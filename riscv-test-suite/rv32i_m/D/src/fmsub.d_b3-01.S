
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 15:28:48 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32D/fmsub.d.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fmsub.d instruction of the RISC-V RV32FD_Zicsr,RV64FD_Zicsr extension for the fmsub.d_b3 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IFD_Zicsr,RV64IFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*D.*);def TEST_CASE_1=True;",fmsub.d_b3)

RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_0:
// rs1 == rs2 == rs3 == rd, rs1==f5, rs2==f5, rs3==f5, rd==f5,fs1 == 0 and fe1 == 0x7f2 and fm1 == 0xe93a4462ebfff and fs2 == 0 and fe2 == 0x408 and fm2 == 0x4435ea24b2dc9 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x35ca63895fd77 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f5; op2:f5; op3:f5; dest:f5; op1val:0x7f2e93a4462ebfff; op2val:0x7f2e93a4462ebfff;
op3val:0x7f2e93a4462ebfff; valaddr_reg:x3; val_offset:0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f5, f5, f5, f5, dyn, 0, 0, x3, 0*FLEN/8, x4, x1, x2)

inst_1:
// rd == rs2 == rs3 != rs1, rs1==f12, rs2==f7, rs3==f7, rd==f7,fs1 == 0 and fe1 == 0x7f2 and fm1 == 0xe93a4462ebfff and fs2 == 0 and fe2 == 0x408 and fm2 == 0x4435ea24b2dc9 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x35ca63895fd77 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f12; op2:f7; op3:f7; dest:f7; op1val:0x7f2e93a4462ebfff; op2val:0x4084435ea24b2dc9;
op3val:0x4084435ea24b2dc9; valaddr_reg:x3; val_offset:3*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f7, f12, f7, f7, dyn, 32, 0, x3, 3*FLEN/8, x4, x1, x2)

inst_2:
// rs1 == rd == rs3 != rs2, rs1==f24, rs2==f19, rs3==f24, rd==f24,fs1 == 0 and fe1 == 0x7f2 and fm1 == 0xe93a4462ebfff and fs2 == 0 and fe2 == 0x408 and fm2 == 0x4435ea24b2dc9 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x35ca63895fd77 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f24; op2:f19; op3:f24; dest:f24; op1val:0x7f2e93a4462ebfff; op2val:0x4084435ea24b2dc9;
op3val:0x7f2e93a4462ebfff; valaddr_reg:x3; val_offset:6*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f24, f24, f19, f24, dyn, 64, 0, x3, 6*FLEN/8, x4, x1, x2)

inst_3:
// rs1 != rs2 and rs1 != rd and rs1 != rs3 and rs2 != rs3 and rs2 != rd and rs3 != rd, rs1==f0, rs2==f8, rs3==f12, rd==f23,fs1 == 0 and fe1 == 0x7f2 and fm1 == 0xe93a4462ebfff and fs2 == 0 and fe2 == 0x408 and fm2 == 0x4435ea24b2dc9 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x35ca63895fd77 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f0; op2:f8; op3:f12; dest:f23; op1val:0x7f2e93a4462ebfff; op2val:0x4084435ea24b2dc9;
op3val:0x7fc35ca63895fd77; valaddr_reg:x3; val_offset:9*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f23, f0, f8, f12, dyn, 96, 0, x3, 9*FLEN/8, x4, x1, x2)

inst_4:
// rs1 == rs3 != rs2 and rs1 == rs3 != rd and rd != rs2, rs1==f8, rs2==f6, rs3==f8, rd==f27,fs1 == 0 and fe1 == 0x7f2 and fm1 == 0xe93a4462ebfff and fs2 == 0 and fe2 == 0x408 and fm2 == 0x4435ea24b2dc9 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x35ca63895fd77 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f8; op2:f6; op3:f8; dest:f27; op1val:0x7f2e93a4462ebfff; op2val:0x4084435ea24b2dc9;
op3val:0x7f2e93a4462ebfff; valaddr_reg:x3; val_offset:12*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f27, f8, f6, f8, dyn, 128, 0, x3, 12*FLEN/8, x4, x1, x2)

inst_5:
// rs1 == rs2 == rs3 != rd, rs1==f2, rs2==f2, rs3==f2, rd==f11,fs1 == 0 and fe1 == 0x7f5 and fm1 == 0x1835aaec2f3ff and fs2 == 0 and fe2 == 0x407 and fm2 == 0x6505bdb287230 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x86c9200abcecf and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f2; op2:f2; op3:f2; dest:f11; op1val:0x7f51835aaec2f3ff; op2val:0x7f51835aaec2f3ff;
op3val:0x7f51835aaec2f3ff; valaddr_reg:x3; val_offset:15*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f11, f2, f2, f2, dyn, 0, 0, x3, 15*FLEN/8, x4, x1, x2)

inst_6:
// rs2 == rs3 != rs1 and rs2 == rs3 != rd and rd != rs1, rs1==f9, rs2==f31, rs3==f31, rd==f22,fs1 == 0 and fe1 == 0x7f5 and fm1 == 0x1835aaec2f3ff and fs2 == 0 and fe2 == 0x407 and fm2 == 0x6505bdb287230 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x86c9200abcecf and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f9; op2:f31; op3:f31; dest:f22; op1val:0x7f51835aaec2f3ff; op2val:0x4076505bdb287230;
op3val:0x4076505bdb287230; valaddr_reg:x3; val_offset:18*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f22, f9, f31, f31, dyn, 32, 0, x3, 18*FLEN/8, x4, x1, x2)

inst_7:
// rs2 == rd != rs1 and rs2 == rd != rs3 and rs3 != rs1, rs1==f19, rs2==f16, rs3==f21, rd==f16,fs1 == 0 and fe1 == 0x7f5 and fm1 == 0x1835aaec2f3ff and fs2 == 0 and fe2 == 0x407 and fm2 == 0x6505bdb287230 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x86c9200abcecf and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f19; op2:f16; op3:f21; dest:f16; op1val:0x7f51835aaec2f3ff; op2val:0x4076505bdb287230;
op3val:0x7fd86c9200abcecf; valaddr_reg:x3; val_offset:21*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f16, f19, f16, f21, dyn, 64, 0, x3, 21*FLEN/8, x4, x1, x2)

inst_8:
// rs1 == rs2 == rd != rs3, rs1==f28, rs2==f28, rs3==f15, rd==f28,fs1 == 0 and fe1 == 0x7f5 and fm1 == 0x1835aaec2f3ff and fs2 == 0 and fe2 == 0x407 and fm2 == 0x6505bdb287230 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x86c9200abcecf and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f28; op2:f28; op3:f15; dest:f28; op1val:0x7f51835aaec2f3ff; op2val:0x7f51835aaec2f3ff;
op3val:0x7fd86c9200abcecf; valaddr_reg:x3; val_offset:24*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f28, f28, f28, f15, dyn, 96, 0, x3, 24*FLEN/8, x4, x1, x2)

inst_9:
// rs1 == rs2 != rs3 and rs1 == rs2 != rd and rd != rs3, rs1==f17, rs2==f17, rs3==f28, rd==f21,fs1 == 0 and fe1 == 0x7f5 and fm1 == 0x1835aaec2f3ff and fs2 == 0 and fe2 == 0x407 and fm2 == 0x6505bdb287230 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x86c9200abcecf and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f17; op2:f17; op3:f28; dest:f21; op1val:0x7f51835aaec2f3ff; op2val:0x7f51835aaec2f3ff;
op3val:0x7fd86c9200abcecf; valaddr_reg:x3; val_offset:27*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f21, f17, f17, f28, dyn, 128, 0, x3, 27*FLEN/8, x4, x1, x2)

inst_10:
// rs1 == rd != rs2 and rs1 == rd != rs3 and rs3 != rs2, rs1==f31, rs2==f15, rs3==f3, rd==f31,fs1 == 0 and fe1 == 0x7f7 and fm1 == 0x01b818d54fa7f and fs2 == 0 and fe2 == 0x406 and fm2 == 0x967222f02addf and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x992cde89965d1 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f31; op2:f15; op3:f3; dest:f31; op1val:0x7f701b818d54fa7f; op2val:0x406967222f02addf;
op3val:0x7fe992cde89965d1; valaddr_reg:x3; val_offset:30*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f31, f15, f3, dyn, 0, 0, x3, 30*FLEN/8, x4, x1, x2)

inst_11:
// rs3 == rd != rs1 and rs3 == rd != rs2 and rs2 != rs1, rs1==f20, rs2==f27, rs3==f13, rd==f13,fs1 == 0 and fe1 == 0x7f7 and fm1 == 0x01b818d54fa7f and fs2 == 0 and fe2 == 0x406 and fm2 == 0x967222f02addf and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x992cde89965d1 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f20; op2:f27; op3:f13; dest:f13; op1val:0x7f701b818d54fa7f; op2val:0x406967222f02addf;
op3val:0x7fe992cde89965d1; valaddr_reg:x3; val_offset:33*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f13, f20, f27, f13, dyn, 32, 0, x3, 33*FLEN/8, x4, x1, x2)

inst_12:
// rs1==f14, rs2==f29, rs3==f4, rd==f18,fs1 == 0 and fe1 == 0x7f7 and fm1 == 0x01b818d54fa7f and fs2 == 0 and fe2 == 0x406 and fm2 == 0x967222f02addf and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x992cde89965d1 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f14; op2:f29; op3:f4; dest:f18; op1val:0x7f701b818d54fa7f; op2val:0x406967222f02addf;
op3val:0x7fe992cde89965d1; valaddr_reg:x3; val_offset:36*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f18, f14, f29, f4, dyn, 64, 0, x3, 36*FLEN/8, x4, x1, x2)

inst_13:
// rs1==f7, rs2==f25, rs3==f20, rd==f2,fs1 == 0 and fe1 == 0x7f7 and fm1 == 0x01b818d54fa7f and fs2 == 0 and fe2 == 0x406 and fm2 == 0x967222f02addf and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x992cde89965d1 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f7; op2:f25; op3:f20; dest:f2; op1val:0x7f701b818d54fa7f; op2val:0x406967222f02addf;
op3val:0x7fe992cde89965d1; valaddr_reg:x3; val_offset:39*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f2, f7, f25, f20, dyn, 96, 0, x3, 39*FLEN/8, x4, x1, x2)

inst_14:
// rs1==f4, rs2==f3, rs3==f11, rd==f6,fs1 == 0 and fe1 == 0x7f7 and fm1 == 0x01b818d54fa7f and fs2 == 0 and fe2 == 0x406 and fm2 == 0x967222f02addf and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x992cde89965d1 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f4; op2:f3; op3:f11; dest:f6; op1val:0x7f701b818d54fa7f; op2val:0x406967222f02addf;
op3val:0x7fe992cde89965d1; valaddr_reg:x3; val_offset:42*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f6, f4, f3, f11, dyn, 128, 0, x3, 42*FLEN/8, x4, x1, x2)

inst_15:
// rs1==f1, rs2==f0, rs3==f17, rd==f15,fs1 == 0 and fe1 == 0x7f7 and fm1 == 0x0c4744a96187f and fs2 == 0 and fe2 == 0x405 and fm2 == 0x995df19783280 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xad004fc46d79f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f1; op2:f0; op3:f17; dest:f15; op1val:0x7f70c4744a96187f; op2val:0x405995df19783280;
op3val:0x7fdad004fc46d79f; valaddr_reg:x3; val_offset:45*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f15, f1, f0, f17, dyn, 0, 0, x3, 45*FLEN/8, x4, x1, x2)

inst_16:
// rs1==f13, rs2==f11, rs3==f0, rd==f17,fs1 == 0 and fe1 == 0x7f7 and fm1 == 0x0c4744a96187f and fs2 == 0 and fe2 == 0x405 and fm2 == 0x995df19783280 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xad004fc46d79f and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f13; op2:f11; op3:f0; dest:f17; op1val:0x7f70c4744a96187f; op2val:0x405995df19783280;
op3val:0x7fdad004fc46d79f; valaddr_reg:x3; val_offset:48*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f17, f13, f11, f0, dyn, 32, 0, x3, 48*FLEN/8, x4, x1, x2)

inst_17:
// rs1==f22, rs2==f4, rs3==f18, rd==f19,fs1 == 0 and fe1 == 0x7f7 and fm1 == 0x0c4744a96187f and fs2 == 0 and fe2 == 0x405 and fm2 == 0x995df19783280 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xad004fc46d79f and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f22; op2:f4; op3:f18; dest:f19; op1val:0x7f70c4744a96187f; op2val:0x405995df19783280;
op3val:0x7fdad004fc46d79f; valaddr_reg:x3; val_offset:51*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f19, f22, f4, f18, dyn, 64, 0, x3, 51*FLEN/8, x4, x1, x2)

inst_18:
// rs1==f23, rs2==f26, rs3==f27, rd==f0,fs1 == 0 and fe1 == 0x7f7 and fm1 == 0x0c4744a96187f and fs2 == 0 and fe2 == 0x405 and fm2 == 0x995df19783280 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xad004fc46d79f and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f23; op2:f26; op3:f27; dest:f0; op1val:0x7f70c4744a96187f; op2val:0x405995df19783280;
op3val:0x7fdad004fc46d79f; valaddr_reg:x3; val_offset:54*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f0, f23, f26, f27, dyn, 96, 0, x3, 54*FLEN/8, x4, x1, x2)

inst_19:
// rs1==f27, rs2==f30, rs3==f1, rd==f29,fs1 == 0 and fe1 == 0x7f7 and fm1 == 0x0c4744a96187f and fs2 == 0 and fe2 == 0x405 and fm2 == 0x995df19783280 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xad004fc46d79f and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f27; op2:f30; op3:f1; dest:f29; op1val:0x7f70c4744a96187f; op2val:0x405995df19783280;
op3val:0x7fdad004fc46d79f; valaddr_reg:x3; val_offset:57*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f29, f27, f30, f1, dyn, 128, 0, x3, 57*FLEN/8, x4, x1, x2)

inst_20:
// rs1==f3, rs2==f24, rs3==f16, rd==f10,fs1 == 0 and fe1 == 0x7f7 and fm1 == 0x447022e841cff and fs2 == 0 and fe2 == 0x404 and fm2 == 0xaae4b950ea7ce and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x0e823c6894e81 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f3; op2:f24; op3:f16; dest:f10; op1val:0x7f7447022e841cff; op2val:0x404aae4b950ea7ce;
op3val:0x7fd0e823c6894e81; valaddr_reg:x3; val_offset:60*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f10, f3, f24, f16, dyn, 0, 0, x3, 60*FLEN/8, x4, x1, x2)

inst_21:
// rs1==f15, rs2==f9, rs3==f25, rd==f8,fs1 == 0 and fe1 == 0x7f7 and fm1 == 0x447022e841cff and fs2 == 0 and fe2 == 0x404 and fm2 == 0xaae4b950ea7ce and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x0e823c6894e81 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f15; op2:f9; op3:f25; dest:f8; op1val:0x7f7447022e841cff; op2val:0x404aae4b950ea7ce;
op3val:0x7fd0e823c6894e81; valaddr_reg:x3; val_offset:63*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f8, f15, f9, f25, dyn, 32, 0, x3, 63*FLEN/8, x4, x1, x2)

inst_22:
// rs1==f6, rs2==f22, rs3==f30, rd==f26,fs1 == 0 and fe1 == 0x7f7 and fm1 == 0x447022e841cff and fs2 == 0 and fe2 == 0x404 and fm2 == 0xaae4b950ea7ce and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x0e823c6894e81 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f6; op2:f22; op3:f30; dest:f26; op1val:0x7f7447022e841cff; op2val:0x404aae4b950ea7ce;
op3val:0x7fd0e823c6894e81; valaddr_reg:x3; val_offset:66*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f26, f6, f22, f30, dyn, 64, 0, x3, 66*FLEN/8, x4, x1, x2)

inst_23:
// rs1==f25, rs2==f10, rs3==f23, rd==f20,fs1 == 0 and fe1 == 0x7f7 and fm1 == 0x447022e841cff and fs2 == 0 and fe2 == 0x404 and fm2 == 0xaae4b950ea7ce and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x0e823c6894e81 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f25; op2:f10; op3:f23; dest:f20; op1val:0x7f7447022e841cff; op2val:0x404aae4b950ea7ce;
op3val:0x7fd0e823c6894e81; valaddr_reg:x3; val_offset:69*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f20, f25, f10, f23, dyn, 96, 0, x3, 69*FLEN/8, x4, x1, x2)

inst_24:
// rs1==f26, rs2==f21, rs3==f9, rd==f30,fs1 == 0 and fe1 == 0x7f7 and fm1 == 0x447022e841cff and fs2 == 0 and fe2 == 0x404 and fm2 == 0xaae4b950ea7ce and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x0e823c6894e81 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f26; op2:f21; op3:f9; dest:f30; op1val:0x7f7447022e841cff; op2val:0x404aae4b950ea7ce;
op3val:0x7fd0e823c6894e81; valaddr_reg:x3; val_offset:72*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f30, f26, f21, f9, dyn, 128, 0, x3, 72*FLEN/8, x4, x1, x2)

inst_25:
// rs1==f30, rs2==f18, rs3==f10, rd==f9,fs1 == 0 and fe1 == 0x7f9 and fm1 == 0x28415313233bf and fs2 == 0 and fe2 == 0x403 and fm2 == 0x25542e0203a76 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x53742ec23b45b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f18; op3:f10; dest:f9; op1val:0x7f928415313233bf; op2val:0x40325542e0203a76;
op3val:0x7fd53742ec23b45b; valaddr_reg:x3; val_offset:75*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f9, f30, f18, f10, dyn, 0, 0, x3, 75*FLEN/8, x4, x1, x2)

inst_26:
// rs1==f29, rs2==f12, rs3==f19, rd==f4,fs1 == 0 and fe1 == 0x7f9 and fm1 == 0x28415313233bf and fs2 == 0 and fe2 == 0x403 and fm2 == 0x25542e0203a76 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x53742ec23b45b and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f29; op2:f12; op3:f19; dest:f4; op1val:0x7f928415313233bf; op2val:0x40325542e0203a76;
op3val:0x7fd53742ec23b45b; valaddr_reg:x3; val_offset:78*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f4, f29, f12, f19, dyn, 32, 0, x3, 78*FLEN/8, x4, x1, x2)

inst_27:
// rs1==f18, rs2==f13, rs3==f6, rd==f1,fs1 == 0 and fe1 == 0x7f9 and fm1 == 0x28415313233bf and fs2 == 0 and fe2 == 0x403 and fm2 == 0x25542e0203a76 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x53742ec23b45b and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f18; op2:f13; op3:f6; dest:f1; op1val:0x7f928415313233bf; op2val:0x40325542e0203a76;
op3val:0x7fd53742ec23b45b; valaddr_reg:x3; val_offset:81*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f1, f18, f13, f6, dyn, 64, 0, x3, 81*FLEN/8, x4, x1, x2)

inst_28:
// rs1==f21, rs2==f14, rs3==f22, rd==f12,fs1 == 0 and fe1 == 0x7f9 and fm1 == 0x28415313233bf and fs2 == 0 and fe2 == 0x403 and fm2 == 0x25542e0203a76 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x53742ec23b45b and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f21; op2:f14; op3:f22; dest:f12; op1val:0x7f928415313233bf; op2val:0x40325542e0203a76;
op3val:0x7fd53742ec23b45b; valaddr_reg:x3; val_offset:84*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f12, f21, f14, f22, dyn, 96, 0, x3, 84*FLEN/8, x4, x1, x2)

inst_29:
// rs1==f16, rs2==f23, rs3==f29, rd==f14,fs1 == 0 and fe1 == 0x7f9 and fm1 == 0x28415313233bf and fs2 == 0 and fe2 == 0x403 and fm2 == 0x25542e0203a76 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x53742ec23b45b and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f16; op2:f23; op3:f29; dest:f14; op1val:0x7f928415313233bf; op2val:0x40325542e0203a76;
op3val:0x7fd53742ec23b45b; valaddr_reg:x3; val_offset:87*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f14, f16, f23, f29, dyn, 128, 0, x3, 87*FLEN/8, x4, x1, x2)

inst_30:
// rs1==f11, rs2==f1, rs3==f14, rd==f25,fs1 == 0 and fe1 == 0x7f9 and fm1 == 0x71abc78672bff and fs2 == 0 and fe2 == 0x403 and fm2 == 0x4766a61cffe7f and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xd8c6a62d7fd8f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f11; op2:f1; op3:f14; dest:f25; op1val:0x7f971abc78672bff; op2val:0x4034766a61cffe7f;
op3val:0x7fdd8c6a62d7fd8f; valaddr_reg:x3; val_offset:90*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f25, f11, f1, f14, dyn, 0, 0, x3, 90*FLEN/8, x4, x1, x2)

inst_31:
// rs1==f10, rs2==f20, rs3==f26, rd==f3,fs1 == 0 and fe1 == 0x7f9 and fm1 == 0x71abc78672bff and fs2 == 0 and fe2 == 0x403 and fm2 == 0x4766a61cffe7f and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xd8c6a62d7fd8f and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f10; op2:f20; op3:f26; dest:f3; op1val:0x7f971abc78672bff; op2val:0x4034766a61cffe7f;
op3val:0x7fdd8c6a62d7fd8f; valaddr_reg:x3; val_offset:93*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f3, f10, f20, f26, dyn, 32, 0, x3, 93*FLEN/8, x4, x1, x2)

inst_32:
// fs1 == 0 and fe1 == 0x7f9 and fm1 == 0x71abc78672bff and fs2 == 0 and fe2 == 0x403 and fm2 == 0x4766a61cffe7f and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xd8c6a62d7fd8f and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f971abc78672bff; op2val:0x4034766a61cffe7f;
op3val:0x7fdd8c6a62d7fd8f; valaddr_reg:x3; val_offset:96*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 96*FLEN/8, x4, x1, x2)

inst_33:
// fs1 == 0 and fe1 == 0x7f9 and fm1 == 0x71abc78672bff and fs2 == 0 and fe2 == 0x403 and fm2 == 0x4766a61cffe7f and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xd8c6a62d7fd8f and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f971abc78672bff; op2val:0x4034766a61cffe7f;
op3val:0x7fdd8c6a62d7fd8f; valaddr_reg:x3; val_offset:99*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 99*FLEN/8, x4, x1, x2)

inst_34:
// fs1 == 0 and fe1 == 0x7f9 and fm1 == 0x71abc78672bff and fs2 == 0 and fe2 == 0x403 and fm2 == 0x4766a61cffe7f and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xd8c6a62d7fd8f and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f971abc78672bff; op2val:0x4034766a61cffe7f;
op3val:0x7fdd8c6a62d7fd8f; valaddr_reg:x3; val_offset:102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 102*FLEN/8, x4, x1, x2)

inst_35:
// fs1 == 0 and fe1 == 0x7f9 and fm1 == 0x7a6679a447c1f and fs2 == 0 and fe2 == 0x404 and fm2 == 0x49681b9694e3f and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xe6e794bcede93 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f97a6679a447c1f; op2val:0x40449681b9694e3f;
op3val:0x7fee6e794bcede93; valaddr_reg:x3; val_offset:105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 105*FLEN/8, x4, x1, x2)

inst_36:
// fs1 == 0 and fe1 == 0x7f9 and fm1 == 0x7a6679a447c1f and fs2 == 0 and fe2 == 0x404 and fm2 == 0x49681b9694e3f and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xe6e794bcede93 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f97a6679a447c1f; op2val:0x40449681b9694e3f;
op3val:0x7fee6e794bcede93; valaddr_reg:x3; val_offset:108*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 108*FLEN/8, x4, x1, x2)

inst_37:
// fs1 == 0 and fe1 == 0x7f9 and fm1 == 0x7a6679a447c1f and fs2 == 0 and fe2 == 0x404 and fm2 == 0x49681b9694e3f and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xe6e794bcede93 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f97a6679a447c1f; op2val:0x40449681b9694e3f;
op3val:0x7fee6e794bcede93; valaddr_reg:x3; val_offset:111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 111*FLEN/8, x4, x1, x2)

inst_38:
// fs1 == 0 and fe1 == 0x7f9 and fm1 == 0x7a6679a447c1f and fs2 == 0 and fe2 == 0x404 and fm2 == 0x49681b9694e3f and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xe6e794bcede93 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f97a6679a447c1f; op2val:0x40449681b9694e3f;
op3val:0x7fee6e794bcede93; valaddr_reg:x3; val_offset:114*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 114*FLEN/8, x4, x1, x2)

inst_39:
// fs1 == 0 and fe1 == 0x7f9 and fm1 == 0x7a6679a447c1f and fs2 == 0 and fe2 == 0x404 and fm2 == 0x49681b9694e3f and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xe6e794bcede93 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f97a6679a447c1f; op2val:0x40449681b9694e3f;
op3val:0x7fee6e794bcede93; valaddr_reg:x3; val_offset:117*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 117*FLEN/8, x4, x1, x2)

inst_40:
// fs1 == 0 and fe1 == 0x7f9 and fm1 == 0xa1ce7890019bf and fs2 == 0 and fe2 == 0x404 and fm2 == 0x124a72ef326d4 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xbfa87e4d4f18b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f9a1ce7890019bf; op2val:0x404124a72ef326d4;
op3val:0x7febfa87e4d4f18b; valaddr_reg:x3; val_offset:120*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 120*FLEN/8, x4, x1, x2)

inst_41:
// fs1 == 0 and fe1 == 0x7f9 and fm1 == 0xa1ce7890019bf and fs2 == 0 and fe2 == 0x404 and fm2 == 0x124a72ef326d4 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xbfa87e4d4f18b and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f9a1ce7890019bf; op2val:0x404124a72ef326d4;
op3val:0x7febfa87e4d4f18b; valaddr_reg:x3; val_offset:123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 123*FLEN/8, x4, x1, x2)

inst_42:
// fs1 == 0 and fe1 == 0x7f9 and fm1 == 0xa1ce7890019bf and fs2 == 0 and fe2 == 0x404 and fm2 == 0x124a72ef326d4 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xbfa87e4d4f18b and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f9a1ce7890019bf; op2val:0x404124a72ef326d4;
op3val:0x7febfa87e4d4f18b; valaddr_reg:x3; val_offset:126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 126*FLEN/8, x4, x1, x2)

inst_43:
// fs1 == 0 and fe1 == 0x7f9 and fm1 == 0xa1ce7890019bf and fs2 == 0 and fe2 == 0x404 and fm2 == 0x124a72ef326d4 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xbfa87e4d4f18b and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f9a1ce7890019bf; op2val:0x404124a72ef326d4;
op3val:0x7febfa87e4d4f18b; valaddr_reg:x3; val_offset:129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 129*FLEN/8, x4, x1, x2)

inst_44:
// fs1 == 0 and fe1 == 0x7f9 and fm1 == 0xa1ce7890019bf and fs2 == 0 and fe2 == 0x404 and fm2 == 0x124a72ef326d4 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xbfa87e4d4f18b and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f9a1ce7890019bf; op2val:0x404124a72ef326d4;
op3val:0x7febfa87e4d4f18b; valaddr_reg:x3; val_offset:132*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 132*FLEN/8, x4, x1, x2)

inst_45:
// fs1 == 0 and fe1 == 0x7f9 and fm1 == 0xc9b89652275bf and fs2 == 0 and fe2 == 0x402 and fm2 == 0x400e03101e0da and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x1e1fe4bc725cb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f9c9b89652275bf; op2val:0x402400e03101e0da;
op3val:0x7fd1e1fe4bc725cb; valaddr_reg:x3; val_offset:135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 135*FLEN/8, x4, x1, x2)

inst_46:
// fs1 == 0 and fe1 == 0x7f9 and fm1 == 0xc9b89652275bf and fs2 == 0 and fe2 == 0x402 and fm2 == 0x400e03101e0da and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x1e1fe4bc725cb and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f9c9b89652275bf; op2val:0x402400e03101e0da;
op3val:0x7fd1e1fe4bc725cb; valaddr_reg:x3; val_offset:138*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 138*FLEN/8, x4, x1, x2)

inst_47:
// fs1 == 0 and fe1 == 0x7f9 and fm1 == 0xc9b89652275bf and fs2 == 0 and fe2 == 0x402 and fm2 == 0x400e03101e0da and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x1e1fe4bc725cb and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f9c9b89652275bf; op2val:0x402400e03101e0da;
op3val:0x7fd1e1fe4bc725cb; valaddr_reg:x3; val_offset:141*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 141*FLEN/8, x4, x1, x2)

inst_48:
// fs1 == 0 and fe1 == 0x7f9 and fm1 == 0xc9b89652275bf and fs2 == 0 and fe2 == 0x402 and fm2 == 0x400e03101e0da and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x1e1fe4bc725cb and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f9c9b89652275bf; op2val:0x402400e03101e0da;
op3val:0x7fd1e1fe4bc725cb; valaddr_reg:x3; val_offset:144*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 144*FLEN/8, x4, x1, x2)

inst_49:
// fs1 == 0 and fe1 == 0x7f9 and fm1 == 0xc9b89652275bf and fs2 == 0 and fe2 == 0x402 and fm2 == 0x400e03101e0da and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x1e1fe4bc725cb and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f9c9b89652275bf; op2val:0x402400e03101e0da;
op3val:0x7fd1e1fe4bc725cb; valaddr_reg:x3; val_offset:147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 147*FLEN/8, x4, x1, x2)

inst_50:
// fs1 == 0 and fe1 == 0x7fa and fm1 == 0x332a1858028cf and fs2 == 0 and fe2 == 0x402 and fm2 == 0x721650593dd17 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xbc0d9d3586aa3 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fa332a1858028cf; op2val:0x402721650593dd17;
op3val:0x7fdbc0d9d3586aa3; valaddr_reg:x3; val_offset:150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 150*FLEN/8, x4, x1, x2)

inst_51:
// fs1 == 0 and fe1 == 0x7fa and fm1 == 0x332a1858028cf and fs2 == 0 and fe2 == 0x402 and fm2 == 0x721650593dd17 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xbc0d9d3586aa3 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fa332a1858028cf; op2val:0x402721650593dd17;
op3val:0x7fdbc0d9d3586aa3; valaddr_reg:x3; val_offset:153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 153*FLEN/8, x4, x1, x2)

inst_52:
// fs1 == 0 and fe1 == 0x7fa and fm1 == 0x332a1858028cf and fs2 == 0 and fe2 == 0x402 and fm2 == 0x721650593dd17 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xbc0d9d3586aa3 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fa332a1858028cf; op2val:0x402721650593dd17;
op3val:0x7fdbc0d9d3586aa3; valaddr_reg:x3; val_offset:156*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 156*FLEN/8, x4, x1, x2)

inst_53:
// fs1 == 0 and fe1 == 0x7fa and fm1 == 0x332a1858028cf and fs2 == 0 and fe2 == 0x402 and fm2 == 0x721650593dd17 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xbc0d9d3586aa3 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fa332a1858028cf; op2val:0x402721650593dd17;
op3val:0x7fdbc0d9d3586aa3; valaddr_reg:x3; val_offset:159*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 159*FLEN/8, x4, x1, x2)

inst_54:
// fs1 == 0 and fe1 == 0x7fa and fm1 == 0x332a1858028cf and fs2 == 0 and fe2 == 0x402 and fm2 == 0x721650593dd17 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xbc0d9d3586aa3 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fa332a1858028cf; op2val:0x402721650593dd17;
op3val:0x7fdbc0d9d3586aa3; valaddr_reg:x3; val_offset:162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 162*FLEN/8, x4, x1, x2)

inst_55:
// fs1 == 0 and fe1 == 0x7fa and fm1 == 0x412f93d91b86f and fs2 == 0 and fe2 == 0x403 and fm2 == 0x10b0d09a9e321 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x56206384f7bbd and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fa412f93d91b86f; op2val:0x40310b0d09a9e321;
op3val:0x7fe56206384f7bbd; valaddr_reg:x3; val_offset:165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 165*FLEN/8, x4, x1, x2)

inst_56:
// fs1 == 0 and fe1 == 0x7fa and fm1 == 0x412f93d91b86f and fs2 == 0 and fe2 == 0x403 and fm2 == 0x10b0d09a9e321 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x56206384f7bbd and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fa412f93d91b86f; op2val:0x40310b0d09a9e321;
op3val:0x7fe56206384f7bbd; valaddr_reg:x3; val_offset:168*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 168*FLEN/8, x4, x1, x2)

inst_57:
// fs1 == 0 and fe1 == 0x7fa and fm1 == 0x412f93d91b86f and fs2 == 0 and fe2 == 0x403 and fm2 == 0x10b0d09a9e321 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x56206384f7bbd and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fa412f93d91b86f; op2val:0x40310b0d09a9e321;
op3val:0x7fe56206384f7bbd; valaddr_reg:x3; val_offset:171*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 171*FLEN/8, x4, x1, x2)

inst_58:
// fs1 == 0 and fe1 == 0x7fa and fm1 == 0x412f93d91b86f and fs2 == 0 and fe2 == 0x403 and fm2 == 0x10b0d09a9e321 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x56206384f7bbd and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fa412f93d91b86f; op2val:0x40310b0d09a9e321;
op3val:0x7fe56206384f7bbd; valaddr_reg:x3; val_offset:174*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 174*FLEN/8, x4, x1, x2)

inst_59:
// fs1 == 0 and fe1 == 0x7fa and fm1 == 0x412f93d91b86f and fs2 == 0 and fe2 == 0x403 and fm2 == 0x10b0d09a9e321 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x56206384f7bbd and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fa412f93d91b86f; op2val:0x40310b0d09a9e321;
op3val:0x7fe56206384f7bbd; valaddr_reg:x3; val_offset:177*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 177*FLEN/8, x4, x1, x2)

inst_60:
// fs1 == 0 and fe1 == 0x7fa and fm1 == 0x444e739fa3e6f and fs2 == 0 and fe2 == 0x403 and fm2 == 0x3ad7200a2e80d and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x8ed8c04b9e89a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fa444e739fa3e6f; op2val:0x4033ad7200a2e80d;
op3val:0x7fe8ed8c04b9e89a; valaddr_reg:x3; val_offset:180*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 180*FLEN/8, x4, x1, x2)

inst_61:
// fs1 == 0 and fe1 == 0x7fa and fm1 == 0x444e739fa3e6f and fs2 == 0 and fe2 == 0x403 and fm2 == 0x3ad7200a2e80d and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x8ed8c04b9e89a and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fa444e739fa3e6f; op2val:0x4033ad7200a2e80d;
op3val:0x7fe8ed8c04b9e89a; valaddr_reg:x3; val_offset:183*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 183*FLEN/8, x4, x1, x2)

inst_62:
// fs1 == 0 and fe1 == 0x7fa and fm1 == 0x444e739fa3e6f and fs2 == 0 and fe2 == 0x403 and fm2 == 0x3ad7200a2e80d and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x8ed8c04b9e89a and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fa444e739fa3e6f; op2val:0x4033ad7200a2e80d;
op3val:0x7fe8ed8c04b9e89a; valaddr_reg:x3; val_offset:186*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 186*FLEN/8, x4, x1, x2)

inst_63:
// fs1 == 0 and fe1 == 0x7fa and fm1 == 0x444e739fa3e6f and fs2 == 0 and fe2 == 0x403 and fm2 == 0x3ad7200a2e80d and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x8ed8c04b9e89a and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fa444e739fa3e6f; op2val:0x4033ad7200a2e80d;
op3val:0x7fe8ed8c04b9e89a; valaddr_reg:x3; val_offset:189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 189*FLEN/8, x4, x1, x2)

inst_64:
// fs1 == 0 and fe1 == 0x7fa and fm1 == 0x444e739fa3e6f and fs2 == 0 and fe2 == 0x403 and fm2 == 0x3ad7200a2e80d and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x8ed8c04b9e89a and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fa444e739fa3e6f; op2val:0x4033ad7200a2e80d;
op3val:0x7fe8ed8c04b9e89a; valaddr_reg:x3; val_offset:192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 192*FLEN/8, x4, x1, x2)

inst_65:
// fs1 == 0 and fe1 == 0x7fa and fm1 == 0x5555f1936f22f and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x1467f94672e9e and fs3 == 0 and fe3 == 0x7f9 and fm3 == 0x708b4a65acd3f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fa5555f1936f22f; op2val:0x3fe1467f94672e9e;
op3val:0x7f9708b4a65acd3f; valaddr_reg:x3; val_offset:195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 195*FLEN/8, x4, x1, x2)

inst_66:
// fs1 == 0 and fe1 == 0x7fa and fm1 == 0x5555f1936f22f and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x1467f94672e9e and fs3 == 0 and fe3 == 0x7f9 and fm3 == 0x708b4a65acd3f and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fa5555f1936f22f; op2val:0x3fe1467f94672e9e;
op3val:0x7f9708b4a65acd3f; valaddr_reg:x3; val_offset:198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 198*FLEN/8, x4, x1, x2)

inst_67:
// fs1 == 0 and fe1 == 0x7fa and fm1 == 0x5555f1936f22f and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x1467f94672e9e and fs3 == 0 and fe3 == 0x7f9 and fm3 == 0x708b4a65acd3f and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fa5555f1936f22f; op2val:0x3fe1467f94672e9e;
op3val:0x7f9708b4a65acd3f; valaddr_reg:x3; val_offset:201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 201*FLEN/8, x4, x1, x2)

inst_68:
// fs1 == 0 and fe1 == 0x7fa and fm1 == 0x5555f1936f22f and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x1467f94672e9e and fs3 == 0 and fe3 == 0x7f9 and fm3 == 0x708b4a65acd3f and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fa5555f1936f22f; op2val:0x3fe1467f94672e9e;
op3val:0x7f9708b4a65acd3f; valaddr_reg:x3; val_offset:204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 204*FLEN/8, x4, x1, x2)

inst_69:
// fs1 == 0 and fe1 == 0x7fa and fm1 == 0x5555f1936f22f and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x1467f94672e9e and fs3 == 0 and fe3 == 0x7f9 and fm3 == 0x708b4a65acd3f and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fa5555f1936f22f; op2val:0x3fe1467f94672e9e;
op3val:0x7f9708b4a65acd3f; valaddr_reg:x3; val_offset:207*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 207*FLEN/8, x4, x1, x2)

inst_70:
// fs1 == 0 and fe1 == 0x7fa and fm1 == 0x9cb5ecb97e53f and fs2 == 0 and fe2 == 0x401 and fm2 == 0x005119d510e39 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x9d38abeea7bb3 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fa9cb5ecb97e53f; op2val:0x401005119d510e39;
op3val:0x7fc9d38abeea7bb3; valaddr_reg:x3; val_offset:210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210*FLEN/8, x4, x1, x2)

inst_71:
// fs1 == 0 and fe1 == 0x7fa and fm1 == 0x9cb5ecb97e53f and fs2 == 0 and fe2 == 0x401 and fm2 == 0x005119d510e39 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x9d38abeea7bb3 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fa9cb5ecb97e53f; op2val:0x401005119d510e39;
op3val:0x7fc9d38abeea7bb3; valaddr_reg:x3; val_offset:213*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 213*FLEN/8, x4, x1, x2)

inst_72:
// fs1 == 0 and fe1 == 0x7fa and fm1 == 0x9cb5ecb97e53f and fs2 == 0 and fe2 == 0x401 and fm2 == 0x005119d510e39 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x9d38abeea7bb3 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fa9cb5ecb97e53f; op2val:0x401005119d510e39;
op3val:0x7fc9d38abeea7bb3; valaddr_reg:x3; val_offset:216*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 216*FLEN/8, x4, x1, x2)

inst_73:
// fs1 == 0 and fe1 == 0x7fa and fm1 == 0x9cb5ecb97e53f and fs2 == 0 and fe2 == 0x401 and fm2 == 0x005119d510e39 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x9d38abeea7bb3 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fa9cb5ecb97e53f; op2val:0x401005119d510e39;
op3val:0x7fc9d38abeea7bb3; valaddr_reg:x3; val_offset:219*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 219*FLEN/8, x4, x1, x2)

inst_74:
// fs1 == 0 and fe1 == 0x7fa and fm1 == 0x9cb5ecb97e53f and fs2 == 0 and fe2 == 0x401 and fm2 == 0x005119d510e39 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x9d38abeea7bb3 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fa9cb5ecb97e53f; op2val:0x401005119d510e39;
op3val:0x7fc9d38abeea7bb3; valaddr_reg:x3; val_offset:222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 222*FLEN/8, x4, x1, x2)

inst_75:
// fs1 == 0 and fe1 == 0x7fa and fm1 == 0xbd8d07591377f and fs2 == 0 and fe2 == 0x400 and fm2 == 0x318515d6311d4 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x09de5303a6393 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fabd8d07591377f; op2val:0x400318515d6311d4;
op3val:0x7fc09de5303a6393; valaddr_reg:x3; val_offset:225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 225*FLEN/8, x4, x1, x2)

inst_76:
// fs1 == 0 and fe1 == 0x7fa and fm1 == 0xbd8d07591377f and fs2 == 0 and fe2 == 0x400 and fm2 == 0x318515d6311d4 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x09de5303a6393 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fabd8d07591377f; op2val:0x400318515d6311d4;
op3val:0x7fc09de5303a6393; valaddr_reg:x3; val_offset:228*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 228*FLEN/8, x4, x1, x2)

inst_77:
// fs1 == 0 and fe1 == 0x7fa and fm1 == 0xbd8d07591377f and fs2 == 0 and fe2 == 0x400 and fm2 == 0x318515d6311d4 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x09de5303a6393 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fabd8d07591377f; op2val:0x400318515d6311d4;
op3val:0x7fc09de5303a6393; valaddr_reg:x3; val_offset:231*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 231*FLEN/8, x4, x1, x2)

inst_78:
// fs1 == 0 and fe1 == 0x7fa and fm1 == 0xbd8d07591377f and fs2 == 0 and fe2 == 0x400 and fm2 == 0x318515d6311d4 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x09de5303a6393 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fabd8d07591377f; op2val:0x400318515d6311d4;
op3val:0x7fc09de5303a6393; valaddr_reg:x3; val_offset:234*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 234*FLEN/8, x4, x1, x2)

inst_79:
// fs1 == 0 and fe1 == 0x7fa and fm1 == 0xbd8d07591377f and fs2 == 0 and fe2 == 0x400 and fm2 == 0x318515d6311d4 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x09de5303a6393 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fabd8d07591377f; op2val:0x400318515d6311d4;
op3val:0x7fc09de5303a6393; valaddr_reg:x3; val_offset:237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 237*FLEN/8, x4, x1, x2)

inst_80:
// fs1 == 0 and fe1 == 0x7fa and fm1 == 0xdb208fa38975f and fs2 == 0 and fe2 == 0x402 and fm2 == 0x17f84065d01af and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x03ce9dcdbd9d6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fadb208fa38975f; op2val:0x40217f84065d01af;
op3val:0x7fe03ce9dcdbd9d6; valaddr_reg:x3; val_offset:240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240*FLEN/8, x4, x1, x2)

inst_81:
// fs1 == 0 and fe1 == 0x7fa and fm1 == 0xdb208fa38975f and fs2 == 0 and fe2 == 0x402 and fm2 == 0x17f84065d01af and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x03ce9dcdbd9d6 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fadb208fa38975f; op2val:0x40217f84065d01af;
op3val:0x7fe03ce9dcdbd9d6; valaddr_reg:x3; val_offset:243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 243*FLEN/8, x4, x1, x2)

inst_82:
// fs1 == 0 and fe1 == 0x7fa and fm1 == 0xdb208fa38975f and fs2 == 0 and fe2 == 0x402 and fm2 == 0x17f84065d01af and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x03ce9dcdbd9d6 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fadb208fa38975f; op2val:0x40217f84065d01af;
op3val:0x7fe03ce9dcdbd9d6; valaddr_reg:x3; val_offset:246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 246*FLEN/8, x4, x1, x2)

inst_83:
// fs1 == 0 and fe1 == 0x7fa and fm1 == 0xdb208fa38975f and fs2 == 0 and fe2 == 0x402 and fm2 == 0x17f84065d01af and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x03ce9dcdbd9d6 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fadb208fa38975f; op2val:0x40217f84065d01af;
op3val:0x7fe03ce9dcdbd9d6; valaddr_reg:x3; val_offset:249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 249*FLEN/8, x4, x1, x2)

inst_84:
// fs1 == 0 and fe1 == 0x7fa and fm1 == 0xdb208fa38975f and fs2 == 0 and fe2 == 0x402 and fm2 == 0x17f84065d01af and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x03ce9dcdbd9d6 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fadb208fa38975f; op2val:0x40217f84065d01af;
op3val:0x7fe03ce9dcdbd9d6; valaddr_reg:x3; val_offset:252*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 252*FLEN/8, x4, x1, x2)

inst_85:
// fs1 == 0 and fe1 == 0x7fa and fm1 == 0xe2f460df71daf and fs2 == 0 and fe2 == 0x402 and fm2 == 0xa0fdaacb5fbcf and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x8955d5926548d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fae2f460df71daf; op2val:0x402a0fdaacb5fbcf;
op3val:0x7fe8955d5926548d; valaddr_reg:x3; val_offset:255*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255*FLEN/8, x4, x1, x2)

inst_86:
// fs1 == 0 and fe1 == 0x7fa and fm1 == 0xe2f460df71daf and fs2 == 0 and fe2 == 0x402 and fm2 == 0xa0fdaacb5fbcf and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x8955d5926548d and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fae2f460df71daf; op2val:0x402a0fdaacb5fbcf;
op3val:0x7fe8955d5926548d; valaddr_reg:x3; val_offset:258*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 258*FLEN/8, x4, x1, x2)

inst_87:
// fs1 == 0 and fe1 == 0x7fa and fm1 == 0xe2f460df71daf and fs2 == 0 and fe2 == 0x402 and fm2 == 0xa0fdaacb5fbcf and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x8955d5926548d and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fae2f460df71daf; op2val:0x402a0fdaacb5fbcf;
op3val:0x7fe8955d5926548d; valaddr_reg:x3; val_offset:261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 261*FLEN/8, x4, x1, x2)

inst_88:
// fs1 == 0 and fe1 == 0x7fa and fm1 == 0xe2f460df71daf and fs2 == 0 and fe2 == 0x402 and fm2 == 0xa0fdaacb5fbcf and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x8955d5926548d and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fae2f460df71daf; op2val:0x402a0fdaacb5fbcf;
op3val:0x7fe8955d5926548d; valaddr_reg:x3; val_offset:264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 264*FLEN/8, x4, x1, x2)

inst_89:
// fs1 == 0 and fe1 == 0x7fa and fm1 == 0xe2f460df71daf and fs2 == 0 and fe2 == 0x402 and fm2 == 0xa0fdaacb5fbcf and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x8955d5926548d and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fae2f460df71daf; op2val:0x402a0fdaacb5fbcf;
op3val:0x7fe8955d5926548d; valaddr_reg:x3; val_offset:267*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 267*FLEN/8, x4, x1, x2)

inst_90:
// fs1 == 0 and fe1 == 0x7fa and fm1 == 0xe840b679dda5f and fs2 == 0 and fe2 == 0x400 and fm2 == 0xba5199ddf7689 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0xa5cdae7f1504f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fae840b679dda5f; op2val:0x400ba5199ddf7689;
op3val:0x7fca5cdae7f1504f; valaddr_reg:x3; val_offset:270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 270*FLEN/8, x4, x1, x2)

inst_91:
// fs1 == 0 and fe1 == 0x7fa and fm1 == 0xe840b679dda5f and fs2 == 0 and fe2 == 0x400 and fm2 == 0xba5199ddf7689 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0xa5cdae7f1504f and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fae840b679dda5f; op2val:0x400ba5199ddf7689;
op3val:0x7fca5cdae7f1504f; valaddr_reg:x3; val_offset:273*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 273*FLEN/8, x4, x1, x2)

inst_92:
// fs1 == 0 and fe1 == 0x7fa and fm1 == 0xe840b679dda5f and fs2 == 0 and fe2 == 0x400 and fm2 == 0xba5199ddf7689 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0xa5cdae7f1504f and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fae840b679dda5f; op2val:0x400ba5199ddf7689;
op3val:0x7fca5cdae7f1504f; valaddr_reg:x3; val_offset:276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 276*FLEN/8, x4, x1, x2)

inst_93:
// fs1 == 0 and fe1 == 0x7fa and fm1 == 0xe840b679dda5f and fs2 == 0 and fe2 == 0x400 and fm2 == 0xba5199ddf7689 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0xa5cdae7f1504f and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fae840b679dda5f; op2val:0x400ba5199ddf7689;
op3val:0x7fca5cdae7f1504f; valaddr_reg:x3; val_offset:279*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 279*FLEN/8, x4, x1, x2)

inst_94:
// fs1 == 0 and fe1 == 0x7fa and fm1 == 0xe840b679dda5f and fs2 == 0 and fe2 == 0x400 and fm2 == 0xba5199ddf7689 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0xa5cdae7f1504f and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fae840b679dda5f; op2val:0x400ba5199ddf7689;
op3val:0x7fca5cdae7f1504f; valaddr_reg:x3; val_offset:282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 282*FLEN/8, x4, x1, x2)

inst_95:
// fs1 == 0 and fe1 == 0x7fa and fm1 == 0xf10102ecb507f and fs2 == 0 and fe2 == 0x402 and fm2 == 0x72003d0023fd5 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x6729f653d09b6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7faf10102ecb507f; op2val:0x40272003d0023fd5;
op3val:0x7fe6729f653d09b6; valaddr_reg:x3; val_offset:285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 285*FLEN/8, x4, x1, x2)

inst_96:
// fs1 == 0 and fe1 == 0x7fa and fm1 == 0xf10102ecb507f and fs2 == 0 and fe2 == 0x402 and fm2 == 0x72003d0023fd5 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x6729f653d09b6 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7faf10102ecb507f; op2val:0x40272003d0023fd5;
op3val:0x7fe6729f653d09b6; valaddr_reg:x3; val_offset:288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 288*FLEN/8, x4, x1, x2)

inst_97:
// fs1 == 0 and fe1 == 0x7fa and fm1 == 0xf10102ecb507f and fs2 == 0 and fe2 == 0x402 and fm2 == 0x72003d0023fd5 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x6729f653d09b6 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7faf10102ecb507f; op2val:0x40272003d0023fd5;
op3val:0x7fe6729f653d09b6; valaddr_reg:x3; val_offset:291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 291*FLEN/8, x4, x1, x2)

inst_98:
// fs1 == 0 and fe1 == 0x7fa and fm1 == 0xf10102ecb507f and fs2 == 0 and fe2 == 0x402 and fm2 == 0x72003d0023fd5 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x6729f653d09b6 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7faf10102ecb507f; op2val:0x40272003d0023fd5;
op3val:0x7fe6729f653d09b6; valaddr_reg:x3; val_offset:294*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 294*FLEN/8, x4, x1, x2)

inst_99:
// fs1 == 0 and fe1 == 0x7fa and fm1 == 0xf10102ecb507f and fs2 == 0 and fe2 == 0x402 and fm2 == 0x72003d0023fd5 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x6729f653d09b6 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7faf10102ecb507f; op2val:0x40272003d0023fd5;
op3val:0x7fe6729f653d09b6; valaddr_reg:x3; val_offset:297*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 297*FLEN/8, x4, x1, x2)

inst_100:
// fs1 == 0 and fe1 == 0x7fa and fm1 == 0xfdef24c32f24f and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x14f92f8aa95db and fs3 == 0 and fe3 == 0x7fb and fm3 == 0x13db17f82659f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fafdef24c32f24f; op2val:0x3ff14f92f8aa95db;
op3val:0x7fb13db17f82659f; valaddr_reg:x3; val_offset:300*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300*FLEN/8, x4, x1, x2)

inst_101:
// fs1 == 0 and fe1 == 0x7fa and fm1 == 0xfdef24c32f24f and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x14f92f8aa95db and fs3 == 0 and fe3 == 0x7fb and fm3 == 0x13db17f82659f and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fafdef24c32f24f; op2val:0x3ff14f92f8aa95db;
op3val:0x7fb13db17f82659f; valaddr_reg:x3; val_offset:303*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 303*FLEN/8, x4, x1, x2)

inst_102:
// fs1 == 0 and fe1 == 0x7fa and fm1 == 0xfdef24c32f24f and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x14f92f8aa95db and fs3 == 0 and fe3 == 0x7fb and fm3 == 0x13db17f82659f and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fafdef24c32f24f; op2val:0x3ff14f92f8aa95db;
op3val:0x7fb13db17f82659f; valaddr_reg:x3; val_offset:306*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 306*FLEN/8, x4, x1, x2)

inst_103:
// fs1 == 0 and fe1 == 0x7fa and fm1 == 0xfdef24c32f24f and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x14f92f8aa95db and fs3 == 0 and fe3 == 0x7fb and fm3 == 0x13db17f82659f and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fafdef24c32f24f; op2val:0x3ff14f92f8aa95db;
op3val:0x7fb13db17f82659f; valaddr_reg:x3; val_offset:309*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 309*FLEN/8, x4, x1, x2)

inst_104:
// fs1 == 0 and fe1 == 0x7fa and fm1 == 0xfdef24c32f24f and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x14f92f8aa95db and fs3 == 0 and fe3 == 0x7fb and fm3 == 0x13db17f82659f and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fafdef24c32f24f; op2val:0x3ff14f92f8aa95db;
op3val:0x7fb13db17f82659f; valaddr_reg:x3; val_offset:312*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 312*FLEN/8, x4, x1, x2)

inst_105:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0x0755c839c777f and fs2 == 0 and fe2 == 0x402 and fm2 == 0xea50563547915 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xf85cd4bac97e1 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fb0755c839c777f; op2val:0x402ea50563547915;
op3val:0x7fef85cd4bac97e1; valaddr_reg:x3; val_offset:315*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 315*FLEN/8, x4, x1, x2)

inst_106:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0x0755c839c777f and fs2 == 0 and fe2 == 0x402 and fm2 == 0xea50563547915 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xf85cd4bac97e1 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fb0755c839c777f; op2val:0x402ea50563547915;
op3val:0x7fef85cd4bac97e1; valaddr_reg:x3; val_offset:318*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 318*FLEN/8, x4, x1, x2)

inst_107:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0x0755c839c777f and fs2 == 0 and fe2 == 0x402 and fm2 == 0xea50563547915 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xf85cd4bac97e1 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fb0755c839c777f; op2val:0x402ea50563547915;
op3val:0x7fef85cd4bac97e1; valaddr_reg:x3; val_offset:321*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 321*FLEN/8, x4, x1, x2)

inst_108:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0x0755c839c777f and fs2 == 0 and fe2 == 0x402 and fm2 == 0xea50563547915 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xf85cd4bac97e1 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fb0755c839c777f; op2val:0x402ea50563547915;
op3val:0x7fef85cd4bac97e1; valaddr_reg:x3; val_offset:324*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 324*FLEN/8, x4, x1, x2)

inst_109:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0x0755c839c777f and fs2 == 0 and fe2 == 0x402 and fm2 == 0xea50563547915 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xf85cd4bac97e1 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fb0755c839c777f; op2val:0x402ea50563547915;
op3val:0x7fef85cd4bac97e1; valaddr_reg:x3; val_offset:327*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 327*FLEN/8, x4, x1, x2)

inst_110:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0x10e2ca87661e7 and fs2 == 0 and fe2 == 0x402 and fm2 == 0x9e6804195486b and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xb9bda407c9909 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fb10e2ca87661e7; op2val:0x4029e6804195486b;
op3val:0x7feb9bda407c9909; valaddr_reg:x3; val_offset:330*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 330*FLEN/8, x4, x1, x2)

inst_111:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0x10e2ca87661e7 and fs2 == 0 and fe2 == 0x402 and fm2 == 0x9e6804195486b and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xb9bda407c9909 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fb10e2ca87661e7; op2val:0x4029e6804195486b;
op3val:0x7feb9bda407c9909; valaddr_reg:x3; val_offset:333*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 333*FLEN/8, x4, x1, x2)

inst_112:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0x10e2ca87661e7 and fs2 == 0 and fe2 == 0x402 and fm2 == 0x9e6804195486b and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xb9bda407c9909 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fb10e2ca87661e7; op2val:0x4029e6804195486b;
op3val:0x7feb9bda407c9909; valaddr_reg:x3; val_offset:336*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 336*FLEN/8, x4, x1, x2)

inst_113:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0x10e2ca87661e7 and fs2 == 0 and fe2 == 0x402 and fm2 == 0x9e6804195486b and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xb9bda407c9909 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fb10e2ca87661e7; op2val:0x4029e6804195486b;
op3val:0x7feb9bda407c9909; valaddr_reg:x3; val_offset:339*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 339*FLEN/8, x4, x1, x2)

inst_114:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0x10e2ca87661e7 and fs2 == 0 and fe2 == 0x402 and fm2 == 0x9e6804195486b and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xb9bda407c9909 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fb10e2ca87661e7; op2val:0x4029e6804195486b;
op3val:0x7feb9bda407c9909; valaddr_reg:x3; val_offset:342*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 342*FLEN/8, x4, x1, x2)

inst_115:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0x1e20b87b382df and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x4c6fe2f4aa781 and fs3 == 0 and fe3 == 0x7fb and fm3 == 0x738f7d1a22dd7 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fb1e20b87b382df; op2val:0x3ff4c6fe2f4aa781;
op3val:0x7fb738f7d1a22dd7; valaddr_reg:x3; val_offset:345*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 345*FLEN/8, x4, x1, x2)

inst_116:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0x1e20b87b382df and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x4c6fe2f4aa781 and fs3 == 0 and fe3 == 0x7fb and fm3 == 0x738f7d1a22dd7 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fb1e20b87b382df; op2val:0x3ff4c6fe2f4aa781;
op3val:0x7fb738f7d1a22dd7; valaddr_reg:x3; val_offset:348*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 348*FLEN/8, x4, x1, x2)

inst_117:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0x1e20b87b382df and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x4c6fe2f4aa781 and fs3 == 0 and fe3 == 0x7fb and fm3 == 0x738f7d1a22dd7 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fb1e20b87b382df; op2val:0x3ff4c6fe2f4aa781;
op3val:0x7fb738f7d1a22dd7; valaddr_reg:x3; val_offset:351*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 351*FLEN/8, x4, x1, x2)

inst_118:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0x1e20b87b382df and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x4c6fe2f4aa781 and fs3 == 0 and fe3 == 0x7fb and fm3 == 0x738f7d1a22dd7 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fb1e20b87b382df; op2val:0x3ff4c6fe2f4aa781;
op3val:0x7fb738f7d1a22dd7; valaddr_reg:x3; val_offset:354*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 354*FLEN/8, x4, x1, x2)

inst_119:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0x1e20b87b382df and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x4c6fe2f4aa781 and fs3 == 0 and fe3 == 0x7fb and fm3 == 0x738f7d1a22dd7 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fb1e20b87b382df; op2val:0x3ff4c6fe2f4aa781;
op3val:0x7fb738f7d1a22dd7; valaddr_reg:x3; val_offset:357*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 357*FLEN/8, x4, x1, x2)

inst_120:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0x21ae3f403ac27 and fs2 == 0 and fe2 == 0x402 and fm2 == 0x4f3b0adcd2e0d and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x7b55d4384f883 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fb21ae3f403ac27; op2val:0x4024f3b0adcd2e0d;
op3val:0x7fe7b55d4384f883; valaddr_reg:x3; val_offset:360*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 360*FLEN/8, x4, x1, x2)

inst_121:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0x21ae3f403ac27 and fs2 == 0 and fe2 == 0x402 and fm2 == 0x4f3b0adcd2e0d and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x7b55d4384f883 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fb21ae3f403ac27; op2val:0x4024f3b0adcd2e0d;
op3val:0x7fe7b55d4384f883; valaddr_reg:x3; val_offset:363*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 363*FLEN/8, x4, x1, x2)

inst_122:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0x21ae3f403ac27 and fs2 == 0 and fe2 == 0x402 and fm2 == 0x4f3b0adcd2e0d and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x7b55d4384f883 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fb21ae3f403ac27; op2val:0x4024f3b0adcd2e0d;
op3val:0x7fe7b55d4384f883; valaddr_reg:x3; val_offset:366*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 366*FLEN/8, x4, x1, x2)

inst_123:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0x21ae3f403ac27 and fs2 == 0 and fe2 == 0x402 and fm2 == 0x4f3b0adcd2e0d and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x7b55d4384f883 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fb21ae3f403ac27; op2val:0x4024f3b0adcd2e0d;
op3val:0x7fe7b55d4384f883; valaddr_reg:x3; val_offset:369*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 369*FLEN/8, x4, x1, x2)

inst_124:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0x21ae3f403ac27 and fs2 == 0 and fe2 == 0x402 and fm2 == 0x4f3b0adcd2e0d and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x7b55d4384f883 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fb21ae3f403ac27; op2val:0x4024f3b0adcd2e0d;
op3val:0x7fe7b55d4384f883; valaddr_reg:x3; val_offset:372*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 372*FLEN/8, x4, x1, x2)

inst_125:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0x289bae89b0547 and fs2 == 0 and fe2 == 0x402 and fm2 == 0x9ea8d3864183b and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xe06f5f8113c54 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fb289bae89b0547; op2val:0x4029ea8d3864183b;
op3val:0x7fee06f5f8113c54; valaddr_reg:x3; val_offset:375*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 375*FLEN/8, x4, x1, x2)

inst_126:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0x289bae89b0547 and fs2 == 0 and fe2 == 0x402 and fm2 == 0x9ea8d3864183b and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xe06f5f8113c54 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fb289bae89b0547; op2val:0x4029ea8d3864183b;
op3val:0x7fee06f5f8113c54; valaddr_reg:x3; val_offset:378*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 378*FLEN/8, x4, x1, x2)

inst_127:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0x289bae89b0547 and fs2 == 0 and fe2 == 0x402 and fm2 == 0x9ea8d3864183b and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xe06f5f8113c54 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fb289bae89b0547; op2val:0x4029ea8d3864183b;
op3val:0x7fee06f5f8113c54; valaddr_reg:x3; val_offset:381*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 381*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_2)

inst_128:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0x289bae89b0547 and fs2 == 0 and fe2 == 0x402 and fm2 == 0x9ea8d3864183b and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xe06f5f8113c54 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fb289bae89b0547; op2val:0x4029ea8d3864183b;
op3val:0x7fee06f5f8113c54; valaddr_reg:x3; val_offset:384*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 384*FLEN/8, x4, x1, x2)

inst_129:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0x289bae89b0547 and fs2 == 0 and fe2 == 0x402 and fm2 == 0x9ea8d3864183b and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xe06f5f8113c54 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fb289bae89b0547; op2val:0x4029ea8d3864183b;
op3val:0x7fee06f5f8113c54; valaddr_reg:x3; val_offset:387*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 387*FLEN/8, x4, x1, x2)

inst_130:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0x29261957a1af7 and fs2 == 0 and fe2 == 0x400 and fm2 == 0xa894f7a055317 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0xecd4036da79a7 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fb29261957a1af7; op2val:0x400a894f7a055317;
op3val:0x7fcecd4036da79a7; valaddr_reg:x3; val_offset:390*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 390*FLEN/8, x4, x1, x2)

inst_131:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0x29261957a1af7 and fs2 == 0 and fe2 == 0x400 and fm2 == 0xa894f7a055317 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0xecd4036da79a7 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fb29261957a1af7; op2val:0x400a894f7a055317;
op3val:0x7fcecd4036da79a7; valaddr_reg:x3; val_offset:393*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 393*FLEN/8, x4, x1, x2)

inst_132:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0x29261957a1af7 and fs2 == 0 and fe2 == 0x400 and fm2 == 0xa894f7a055317 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0xecd4036da79a7 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fb29261957a1af7; op2val:0x400a894f7a055317;
op3val:0x7fcecd4036da79a7; valaddr_reg:x3; val_offset:396*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 396*FLEN/8, x4, x1, x2)

inst_133:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0x29261957a1af7 and fs2 == 0 and fe2 == 0x400 and fm2 == 0xa894f7a055317 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0xecd4036da79a7 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fb29261957a1af7; op2val:0x400a894f7a055317;
op3val:0x7fcecd4036da79a7; valaddr_reg:x3; val_offset:399*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 399*FLEN/8, x4, x1, x2)

inst_134:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0x29261957a1af7 and fs2 == 0 and fe2 == 0x400 and fm2 == 0xa894f7a055317 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0xecd4036da79a7 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fb29261957a1af7; op2val:0x400a894f7a055317;
op3val:0x7fcecd4036da79a7; valaddr_reg:x3; val_offset:402*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 402*FLEN/8, x4, x1, x2)

inst_135:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0x2b80ae6ce5acf and fs2 == 0 and fe2 == 0x402 and fm2 == 0x24fb884b09188 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x56c50d9360bf9 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fb2b80ae6ce5acf; op2val:0x40224fb884b09188;
op3val:0x7fe56c50d9360bf9; valaddr_reg:x3; val_offset:405*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 405*FLEN/8, x4, x1, x2)

inst_136:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0x2b80ae6ce5acf and fs2 == 0 and fe2 == 0x402 and fm2 == 0x24fb884b09188 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x56c50d9360bf9 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fb2b80ae6ce5acf; op2val:0x40224fb884b09188;
op3val:0x7fe56c50d9360bf9; valaddr_reg:x3; val_offset:408*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 408*FLEN/8, x4, x1, x2)

inst_137:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0x2b80ae6ce5acf and fs2 == 0 and fe2 == 0x402 and fm2 == 0x24fb884b09188 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x56c50d9360bf9 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fb2b80ae6ce5acf; op2val:0x40224fb884b09188;
op3val:0x7fe56c50d9360bf9; valaddr_reg:x3; val_offset:411*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 411*FLEN/8, x4, x1, x2)

inst_138:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0x2b80ae6ce5acf and fs2 == 0 and fe2 == 0x402 and fm2 == 0x24fb884b09188 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x56c50d9360bf9 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fb2b80ae6ce5acf; op2val:0x40224fb884b09188;
op3val:0x7fe56c50d9360bf9; valaddr_reg:x3; val_offset:414*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 414*FLEN/8, x4, x1, x2)

inst_139:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0x2b80ae6ce5acf and fs2 == 0 and fe2 == 0x402 and fm2 == 0x24fb884b09188 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x56c50d9360bf9 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fb2b80ae6ce5acf; op2val:0x40224fb884b09188;
op3val:0x7fe56c50d9360bf9; valaddr_reg:x3; val_offset:417*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 417*FLEN/8, x4, x1, x2)

inst_140:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0x4a0f9e552df5f and fs2 == 0 and fe2 == 0x401 and fm2 == 0x64c1f3bb840b8 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xcbf7c83369141 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fb4a0f9e552df5f; op2val:0x40164c1f3bb840b8;
op3val:0x7fdcbf7c83369141; valaddr_reg:x3; val_offset:420*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 420*FLEN/8, x4, x1, x2)

inst_141:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0x4a0f9e552df5f and fs2 == 0 and fe2 == 0x401 and fm2 == 0x64c1f3bb840b8 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xcbf7c83369141 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fb4a0f9e552df5f; op2val:0x40164c1f3bb840b8;
op3val:0x7fdcbf7c83369141; valaddr_reg:x3; val_offset:423*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 423*FLEN/8, x4, x1, x2)

inst_142:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0x4a0f9e552df5f and fs2 == 0 and fe2 == 0x401 and fm2 == 0x64c1f3bb840b8 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xcbf7c83369141 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fb4a0f9e552df5f; op2val:0x40164c1f3bb840b8;
op3val:0x7fdcbf7c83369141; valaddr_reg:x3; val_offset:426*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 426*FLEN/8, x4, x1, x2)

inst_143:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0x4a0f9e552df5f and fs2 == 0 and fe2 == 0x401 and fm2 == 0x64c1f3bb840b8 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xcbf7c83369141 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fb4a0f9e552df5f; op2val:0x40164c1f3bb840b8;
op3val:0x7fdcbf7c83369141; valaddr_reg:x3; val_offset:429*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 429*FLEN/8, x4, x1, x2)

inst_144:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0x4a0f9e552df5f and fs2 == 0 and fe2 == 0x401 and fm2 == 0x64c1f3bb840b8 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xcbf7c83369141 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fb4a0f9e552df5f; op2val:0x40164c1f3bb840b8;
op3val:0x7fdcbf7c83369141; valaddr_reg:x3; val_offset:432*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 432*FLEN/8, x4, x1, x2)

inst_145:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0x5702673763077 and fs2 == 0 and fe2 == 0x402 and fm2 == 0x472f6a2ead396 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xb663998e3beea and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fb5702673763077; op2val:0x402472f6a2ead396;
op3val:0x7feb663998e3beea; valaddr_reg:x3; val_offset:435*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 435*FLEN/8, x4, x1, x2)

inst_146:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0x5702673763077 and fs2 == 0 and fe2 == 0x402 and fm2 == 0x472f6a2ead396 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xb663998e3beea and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fb5702673763077; op2val:0x402472f6a2ead396;
op3val:0x7feb663998e3beea; valaddr_reg:x3; val_offset:438*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 438*FLEN/8, x4, x1, x2)

inst_147:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0x5702673763077 and fs2 == 0 and fe2 == 0x402 and fm2 == 0x472f6a2ead396 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xb663998e3beea and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fb5702673763077; op2val:0x402472f6a2ead396;
op3val:0x7feb663998e3beea; valaddr_reg:x3; val_offset:441*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 441*FLEN/8, x4, x1, x2)

inst_148:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0x5702673763077 and fs2 == 0 and fe2 == 0x402 and fm2 == 0x472f6a2ead396 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xb663998e3beea and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fb5702673763077; op2val:0x402472f6a2ead396;
op3val:0x7feb663998e3beea; valaddr_reg:x3; val_offset:444*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 444*FLEN/8, x4, x1, x2)

inst_149:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0x5702673763077 and fs2 == 0 and fe2 == 0x402 and fm2 == 0x472f6a2ead396 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xb663998e3beea and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fb5702673763077; op2val:0x402472f6a2ead396;
op3val:0x7feb663998e3beea; valaddr_reg:x3; val_offset:447*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 447*FLEN/8, x4, x1, x2)

inst_150:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0x5a0ccf5498b87 and fs2 == 0 and fe2 == 0x402 and fm2 == 0x3ea4e4a974684 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xaebaced8605de and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fb5a0ccf5498b87; op2val:0x4023ea4e4a974684;
op3val:0x7feaebaced8605de; valaddr_reg:x3; val_offset:450*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 450*FLEN/8, x4, x1, x2)

inst_151:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0x5a0ccf5498b87 and fs2 == 0 and fe2 == 0x402 and fm2 == 0x3ea4e4a974684 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xaebaced8605de and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fb5a0ccf5498b87; op2val:0x4023ea4e4a974684;
op3val:0x7feaebaced8605de; valaddr_reg:x3; val_offset:453*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 453*FLEN/8, x4, x1, x2)

inst_152:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0x5a0ccf5498b87 and fs2 == 0 and fe2 == 0x402 and fm2 == 0x3ea4e4a974684 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xaebaced8605de and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fb5a0ccf5498b87; op2val:0x4023ea4e4a974684;
op3val:0x7feaebaced8605de; valaddr_reg:x3; val_offset:456*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 456*FLEN/8, x4, x1, x2)

inst_153:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0x5a0ccf5498b87 and fs2 == 0 and fe2 == 0x402 and fm2 == 0x3ea4e4a974684 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xaebaced8605de and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fb5a0ccf5498b87; op2val:0x4023ea4e4a974684;
op3val:0x7feaebaced8605de; valaddr_reg:x3; val_offset:459*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 459*FLEN/8, x4, x1, x2)

inst_154:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0x5a0ccf5498b87 and fs2 == 0 and fe2 == 0x402 and fm2 == 0x3ea4e4a974684 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xaebaced8605de and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fb5a0ccf5498b87; op2val:0x4023ea4e4a974684;
op3val:0x7feaebaced8605de; valaddr_reg:x3; val_offset:462*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 462*FLEN/8, x4, x1, x2)

inst_155:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0x5b40afab57167 and fs2 == 0 and fe2 == 0x401 and fm2 == 0xf2ae85558a252 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x52384847ac803 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fb5b40afab57167; op2val:0x401f2ae85558a252;
op3val:0x7fe52384847ac803; valaddr_reg:x3; val_offset:465*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 465*FLEN/8, x4, x1, x2)

inst_156:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0x5b40afab57167 and fs2 == 0 and fe2 == 0x401 and fm2 == 0xf2ae85558a252 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x52384847ac803 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fb5b40afab57167; op2val:0x401f2ae85558a252;
op3val:0x7fe52384847ac803; valaddr_reg:x3; val_offset:468*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 468*FLEN/8, x4, x1, x2)

inst_157:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0x5b40afab57167 and fs2 == 0 and fe2 == 0x401 and fm2 == 0xf2ae85558a252 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x52384847ac803 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fb5b40afab57167; op2val:0x401f2ae85558a252;
op3val:0x7fe52384847ac803; valaddr_reg:x3; val_offset:471*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 471*FLEN/8, x4, x1, x2)

inst_158:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0x5b40afab57167 and fs2 == 0 and fe2 == 0x401 and fm2 == 0xf2ae85558a252 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x52384847ac803 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fb5b40afab57167; op2val:0x401f2ae85558a252;
op3val:0x7fe52384847ac803; valaddr_reg:x3; val_offset:474*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 474*FLEN/8, x4, x1, x2)

inst_159:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0x5b40afab57167 and fs2 == 0 and fe2 == 0x401 and fm2 == 0xf2ae85558a252 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x52384847ac803 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fb5b40afab57167; op2val:0x401f2ae85558a252;
op3val:0x7fe52384847ac803; valaddr_reg:x3; val_offset:477*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 477*FLEN/8, x4, x1, x2)

inst_160:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0x5fc89849c9c47 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x30984b5bb5267 and fs3 == 0 and fe3 == 0x7fb and fm3 == 0xa28f7b7fd5427 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fb5fc89849c9c47; op2val:0x3ff30984b5bb5267;
op3val:0x7fba28f7b7fd5427; valaddr_reg:x3; val_offset:480*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 480*FLEN/8, x4, x1, x2)

inst_161:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0x5fc89849c9c47 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x30984b5bb5267 and fs3 == 0 and fe3 == 0x7fb and fm3 == 0xa28f7b7fd5427 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fb5fc89849c9c47; op2val:0x3ff30984b5bb5267;
op3val:0x7fba28f7b7fd5427; valaddr_reg:x3; val_offset:483*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 483*FLEN/8, x4, x1, x2)

inst_162:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0x5fc89849c9c47 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x30984b5bb5267 and fs3 == 0 and fe3 == 0x7fb and fm3 == 0xa28f7b7fd5427 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fb5fc89849c9c47; op2val:0x3ff30984b5bb5267;
op3val:0x7fba28f7b7fd5427; valaddr_reg:x3; val_offset:486*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 486*FLEN/8, x4, x1, x2)

inst_163:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0x5fc89849c9c47 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x30984b5bb5267 and fs3 == 0 and fe3 == 0x7fb and fm3 == 0xa28f7b7fd5427 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fb5fc89849c9c47; op2val:0x3ff30984b5bb5267;
op3val:0x7fba28f7b7fd5427; valaddr_reg:x3; val_offset:489*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 489*FLEN/8, x4, x1, x2)

inst_164:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0x5fc89849c9c47 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x30984b5bb5267 and fs3 == 0 and fe3 == 0x7fb and fm3 == 0xa28f7b7fd5427 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fb5fc89849c9c47; op2val:0x3ff30984b5bb5267;
op3val:0x7fba28f7b7fd5427; valaddr_reg:x3; val_offset:492*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 492*FLEN/8, x4, x1, x2)

inst_165:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0x6e6fec8ee140f and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x493aaf3b6ab0b and fs3 == 0 and fe3 == 0x7fa and fm3 == 0xd741d732c713f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fb6e6fec8ee140f; op2val:0x3fe493aaf3b6ab0b;
op3val:0x7fad741d732c713f; valaddr_reg:x3; val_offset:495*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 495*FLEN/8, x4, x1, x2)

inst_166:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0x6e6fec8ee140f and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x493aaf3b6ab0b and fs3 == 0 and fe3 == 0x7fa and fm3 == 0xd741d732c713f and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fb6e6fec8ee140f; op2val:0x3fe493aaf3b6ab0b;
op3val:0x7fad741d732c713f; valaddr_reg:x3; val_offset:498*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 498*FLEN/8, x4, x1, x2)

inst_167:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0x6e6fec8ee140f and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x493aaf3b6ab0b and fs3 == 0 and fe3 == 0x7fa and fm3 == 0xd741d732c713f and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fb6e6fec8ee140f; op2val:0x3fe493aaf3b6ab0b;
op3val:0x7fad741d732c713f; valaddr_reg:x3; val_offset:501*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 501*FLEN/8, x4, x1, x2)

inst_168:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0x6e6fec8ee140f and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x493aaf3b6ab0b and fs3 == 0 and fe3 == 0x7fa and fm3 == 0xd741d732c713f and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fb6e6fec8ee140f; op2val:0x3fe493aaf3b6ab0b;
op3val:0x7fad741d732c713f; valaddr_reg:x3; val_offset:504*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 504*FLEN/8, x4, x1, x2)

inst_169:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0x6e6fec8ee140f and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x493aaf3b6ab0b and fs3 == 0 and fe3 == 0x7fa and fm3 == 0xd741d732c713f and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fb6e6fec8ee140f; op2val:0x3fe493aaf3b6ab0b;
op3val:0x7fad741d732c713f; valaddr_reg:x3; val_offset:507*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 507*FLEN/8, x4, x1, x2)

inst_170:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0x6fa14249a8b0f and fs2 == 0 and fe2 == 0x401 and fm2 == 0x1ce09d7b99965 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x991974cb1c493 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fb6fa14249a8b0f; op2val:0x4011ce09d7b99965;
op3val:0x7fd991974cb1c493; valaddr_reg:x3; val_offset:510*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 510*FLEN/8, x4, x1, x2)

inst_171:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0x6fa14249a8b0f and fs2 == 0 and fe2 == 0x401 and fm2 == 0x1ce09d7b99965 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x991974cb1c493 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fb6fa14249a8b0f; op2val:0x4011ce09d7b99965;
op3val:0x7fd991974cb1c493; valaddr_reg:x3; val_offset:513*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 513*FLEN/8, x4, x1, x2)

inst_172:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0x6fa14249a8b0f and fs2 == 0 and fe2 == 0x401 and fm2 == 0x1ce09d7b99965 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x991974cb1c493 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fb6fa14249a8b0f; op2val:0x4011ce09d7b99965;
op3val:0x7fd991974cb1c493; valaddr_reg:x3; val_offset:516*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 516*FLEN/8, x4, x1, x2)

inst_173:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0x6fa14249a8b0f and fs2 == 0 and fe2 == 0x401 and fm2 == 0x1ce09d7b99965 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x991974cb1c493 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fb6fa14249a8b0f; op2val:0x4011ce09d7b99965;
op3val:0x7fd991974cb1c493; valaddr_reg:x3; val_offset:519*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 519*FLEN/8, x4, x1, x2)

inst_174:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0x6fa14249a8b0f and fs2 == 0 and fe2 == 0x401 and fm2 == 0x1ce09d7b99965 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x991974cb1c493 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fb6fa14249a8b0f; op2val:0x4011ce09d7b99965;
op3val:0x7fd991974cb1c493; valaddr_reg:x3; val_offset:522*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 522*FLEN/8, x4, x1, x2)

inst_175:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0x9f9919e5dc9c7 and fs2 == 0 and fe2 == 0x400 and fm2 == 0xcab41e926fa19 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x745628ce8ef13 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fb9f9919e5dc9c7; op2val:0x400cab41e926fa19;
op3val:0x7fd745628ce8ef13; valaddr_reg:x3; val_offset:525*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 525*FLEN/8, x4, x1, x2)

inst_176:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0x9f9919e5dc9c7 and fs2 == 0 and fe2 == 0x400 and fm2 == 0xcab41e926fa19 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x745628ce8ef13 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fb9f9919e5dc9c7; op2val:0x400cab41e926fa19;
op3val:0x7fd745628ce8ef13; valaddr_reg:x3; val_offset:528*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 528*FLEN/8, x4, x1, x2)

inst_177:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0x9f9919e5dc9c7 and fs2 == 0 and fe2 == 0x400 and fm2 == 0xcab41e926fa19 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x745628ce8ef13 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fb9f9919e5dc9c7; op2val:0x400cab41e926fa19;
op3val:0x7fd745628ce8ef13; valaddr_reg:x3; val_offset:531*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 531*FLEN/8, x4, x1, x2)

inst_178:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0x9f9919e5dc9c7 and fs2 == 0 and fe2 == 0x400 and fm2 == 0xcab41e926fa19 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x745628ce8ef13 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fb9f9919e5dc9c7; op2val:0x400cab41e926fa19;
op3val:0x7fd745628ce8ef13; valaddr_reg:x3; val_offset:534*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 534*FLEN/8, x4, x1, x2)

inst_179:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0x9f9919e5dc9c7 and fs2 == 0 and fe2 == 0x400 and fm2 == 0xcab41e926fa19 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x745628ce8ef13 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fb9f9919e5dc9c7; op2val:0x400cab41e926fa19;
op3val:0x7fd745628ce8ef13; valaddr_reg:x3; val_offset:537*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 537*FLEN/8, x4, x1, x2)

inst_180:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0xa81682f68a287 and fs2 == 0 and fe2 == 0x401 and fm2 == 0x8813c25ec02a6 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x44c19a19a0da1 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fba81682f68a287; op2val:0x4018813c25ec02a6;
op3val:0x7fe44c19a19a0da1; valaddr_reg:x3; val_offset:540*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 540*FLEN/8, x4, x1, x2)

inst_181:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0xa81682f68a287 and fs2 == 0 and fe2 == 0x401 and fm2 == 0x8813c25ec02a6 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x44c19a19a0da1 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fba81682f68a287; op2val:0x4018813c25ec02a6;
op3val:0x7fe44c19a19a0da1; valaddr_reg:x3; val_offset:543*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 543*FLEN/8, x4, x1, x2)

inst_182:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0xa81682f68a287 and fs2 == 0 and fe2 == 0x401 and fm2 == 0x8813c25ec02a6 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x44c19a19a0da1 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fba81682f68a287; op2val:0x4018813c25ec02a6;
op3val:0x7fe44c19a19a0da1; valaddr_reg:x3; val_offset:546*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 546*FLEN/8, x4, x1, x2)

inst_183:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0xa81682f68a287 and fs2 == 0 and fe2 == 0x401 and fm2 == 0x8813c25ec02a6 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x44c19a19a0da1 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fba81682f68a287; op2val:0x4018813c25ec02a6;
op3val:0x7fe44c19a19a0da1; valaddr_reg:x3; val_offset:549*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 549*FLEN/8, x4, x1, x2)

inst_184:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0xa81682f68a287 and fs2 == 0 and fe2 == 0x401 and fm2 == 0x8813c25ec02a6 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x44c19a19a0da1 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fba81682f68a287; op2val:0x4018813c25ec02a6;
op3val:0x7fe44c19a19a0da1; valaddr_reg:x3; val_offset:552*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 552*FLEN/8, x4, x1, x2)

inst_185:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0xad2d5e2b0a13f and fs2 == 0 and fe2 == 0x400 and fm2 == 0x446a9e40825ba and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x0ff014a2ce4a1 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fbad2d5e2b0a13f; op2val:0x400446a9e40825ba;
op3val:0x7fd0ff014a2ce4a1; valaddr_reg:x3; val_offset:555*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 555*FLEN/8, x4, x1, x2)

inst_186:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0xad2d5e2b0a13f and fs2 == 0 and fe2 == 0x400 and fm2 == 0x446a9e40825ba and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x0ff014a2ce4a1 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fbad2d5e2b0a13f; op2val:0x400446a9e40825ba;
op3val:0x7fd0ff014a2ce4a1; valaddr_reg:x3; val_offset:558*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 558*FLEN/8, x4, x1, x2)

inst_187:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0xad2d5e2b0a13f and fs2 == 0 and fe2 == 0x400 and fm2 == 0x446a9e40825ba and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x0ff014a2ce4a1 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fbad2d5e2b0a13f; op2val:0x400446a9e40825ba;
op3val:0x7fd0ff014a2ce4a1; valaddr_reg:x3; val_offset:561*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 561*FLEN/8, x4, x1, x2)

inst_188:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0xad2d5e2b0a13f and fs2 == 0 and fe2 == 0x400 and fm2 == 0x446a9e40825ba and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x0ff014a2ce4a1 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fbad2d5e2b0a13f; op2val:0x400446a9e40825ba;
op3val:0x7fd0ff014a2ce4a1; valaddr_reg:x3; val_offset:564*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 564*FLEN/8, x4, x1, x2)

inst_189:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0xad2d5e2b0a13f and fs2 == 0 and fe2 == 0x400 and fm2 == 0x446a9e40825ba and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x0ff014a2ce4a1 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fbad2d5e2b0a13f; op2val:0x400446a9e40825ba;
op3val:0x7fd0ff014a2ce4a1; valaddr_reg:x3; val_offset:567*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 567*FLEN/8, x4, x1, x2)

inst_190:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0xb29fc9c4366f7 and fs2 == 0 and fe2 == 0x401 and fm2 == 0x51f17371d44aa and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x1edf2283a2fb1 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fbb29fc9c4366f7; op2val:0x40151f17371d44aa;
op3val:0x7fe1edf2283a2fb1; valaddr_reg:x3; val_offset:570*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 570*FLEN/8, x4, x1, x2)

inst_191:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0xb29fc9c4366f7 and fs2 == 0 and fe2 == 0x401 and fm2 == 0x51f17371d44aa and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x1edf2283a2fb1 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fbb29fc9c4366f7; op2val:0x40151f17371d44aa;
op3val:0x7fe1edf2283a2fb1; valaddr_reg:x3; val_offset:573*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 573*FLEN/8, x4, x1, x2)

inst_192:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0xb29fc9c4366f7 and fs2 == 0 and fe2 == 0x401 and fm2 == 0x51f17371d44aa and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x1edf2283a2fb1 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fbb29fc9c4366f7; op2val:0x40151f17371d44aa;
op3val:0x7fe1edf2283a2fb1; valaddr_reg:x3; val_offset:576*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 576*FLEN/8, x4, x1, x2)

inst_193:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0xb29fc9c4366f7 and fs2 == 0 and fe2 == 0x401 and fm2 == 0x51f17371d44aa and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x1edf2283a2fb1 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fbb29fc9c4366f7; op2val:0x40151f17371d44aa;
op3val:0x7fe1edf2283a2fb1; valaddr_reg:x3; val_offset:579*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 579*FLEN/8, x4, x1, x2)

inst_194:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0xb29fc9c4366f7 and fs2 == 0 and fe2 == 0x401 and fm2 == 0x51f17371d44aa and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x1edf2283a2fb1 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fbb29fc9c4366f7; op2val:0x40151f17371d44aa;
op3val:0x7fe1edf2283a2fb1; valaddr_reg:x3; val_offset:582*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 582*FLEN/8, x4, x1, x2)

inst_195:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0xc0502df03ca97 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x799e7f8f6d9cb and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x4aa5d2430b91b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fbc0502df03ca97; op2val:0x3ff799e7f8f6d9cb;
op3val:0x7fc4aa5d2430b91b; valaddr_reg:x3; val_offset:585*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 585*FLEN/8, x4, x1, x2)

inst_196:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0xc0502df03ca97 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x799e7f8f6d9cb and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x4aa5d2430b91b and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fbc0502df03ca97; op2val:0x3ff799e7f8f6d9cb;
op3val:0x7fc4aa5d2430b91b; valaddr_reg:x3; val_offset:588*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 588*FLEN/8, x4, x1, x2)

inst_197:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0xc0502df03ca97 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x799e7f8f6d9cb and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x4aa5d2430b91b and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fbc0502df03ca97; op2val:0x3ff799e7f8f6d9cb;
op3val:0x7fc4aa5d2430b91b; valaddr_reg:x3; val_offset:591*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 591*FLEN/8, x4, x1, x2)

inst_198:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0xc0502df03ca97 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x799e7f8f6d9cb and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x4aa5d2430b91b and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fbc0502df03ca97; op2val:0x3ff799e7f8f6d9cb;
op3val:0x7fc4aa5d2430b91b; valaddr_reg:x3; val_offset:594*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 594*FLEN/8, x4, x1, x2)

inst_199:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0xc0502df03ca97 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x799e7f8f6d9cb and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x4aa5d2430b91b and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fbc0502df03ca97; op2val:0x3ff799e7f8f6d9cb;
op3val:0x7fc4aa5d2430b91b; valaddr_reg:x3; val_offset:597*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 597*FLEN/8, x4, x1, x2)

inst_200:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0xf229dcc8e3fb7 and fs2 == 0 and fe2 == 0x400 and fm2 == 0xd14daf1382c6d and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xc4ba9aa872069 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fbf229dcc8e3fb7; op2val:0x400d14daf1382c6d;
op3val:0x7fdc4ba9aa872069; valaddr_reg:x3; val_offset:600*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 600*FLEN/8, x4, x1, x2)

inst_201:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0xf229dcc8e3fb7 and fs2 == 0 and fe2 == 0x400 and fm2 == 0xd14daf1382c6d and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xc4ba9aa872069 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fbf229dcc8e3fb7; op2val:0x400d14daf1382c6d;
op3val:0x7fdc4ba9aa872069; valaddr_reg:x3; val_offset:603*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 603*FLEN/8, x4, x1, x2)

inst_202:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0xf229dcc8e3fb7 and fs2 == 0 and fe2 == 0x400 and fm2 == 0xd14daf1382c6d and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xc4ba9aa872069 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fbf229dcc8e3fb7; op2val:0x400d14daf1382c6d;
op3val:0x7fdc4ba9aa872069; valaddr_reg:x3; val_offset:606*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 606*FLEN/8, x4, x1, x2)

inst_203:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0xf229dcc8e3fb7 and fs2 == 0 and fe2 == 0x400 and fm2 == 0xd14daf1382c6d and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xc4ba9aa872069 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fbf229dcc8e3fb7; op2val:0x400d14daf1382c6d;
op3val:0x7fdc4ba9aa872069; valaddr_reg:x3; val_offset:609*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 609*FLEN/8, x4, x1, x2)

inst_204:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0xf229dcc8e3fb7 and fs2 == 0 and fe2 == 0x400 and fm2 == 0xd14daf1382c6d and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xc4ba9aa872069 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fbf229dcc8e3fb7; op2val:0x400d14daf1382c6d;
op3val:0x7fdc4ba9aa872069; valaddr_reg:x3; val_offset:612*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 612*FLEN/8, x4, x1, x2)

inst_205:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0xfb17c3e518207 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xcd9e20ba842b1 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0xc93182a170b2f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fbfb17c3e518207; op2val:0x3ffcd9e20ba842b1;
op3val:0x7fcc93182a170b2f; valaddr_reg:x3; val_offset:615*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 615*FLEN/8, x4, x1, x2)

inst_206:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0xfb17c3e518207 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xcd9e20ba842b1 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0xc93182a170b2f and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fbfb17c3e518207; op2val:0x3ffcd9e20ba842b1;
op3val:0x7fcc93182a170b2f; valaddr_reg:x3; val_offset:618*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 618*FLEN/8, x4, x1, x2)

inst_207:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0xfb17c3e518207 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xcd9e20ba842b1 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0xc93182a170b2f and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fbfb17c3e518207; op2val:0x3ffcd9e20ba842b1;
op3val:0x7fcc93182a170b2f; valaddr_reg:x3; val_offset:621*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 621*FLEN/8, x4, x1, x2)

inst_208:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0xfb17c3e518207 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xcd9e20ba842b1 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0xc93182a170b2f and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fbfb17c3e518207; op2val:0x3ffcd9e20ba842b1;
op3val:0x7fcc93182a170b2f; valaddr_reg:x3; val_offset:624*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 624*FLEN/8, x4, x1, x2)

inst_209:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0xfb17c3e518207 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xcd9e20ba842b1 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0xc93182a170b2f and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fbfb17c3e518207; op2val:0x3ffcd9e20ba842b1;
op3val:0x7fcc93182a170b2f; valaddr_reg:x3; val_offset:627*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 627*FLEN/8, x4, x1, x2)

inst_210:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x042cb1070d70f and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x3096f727622ae and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x358e7f973f797 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc042cb1070d70f; op2val:0x3ff3096f727622ae;
op3val:0x7fc358e7f973f797; valaddr_reg:x3; val_offset:630*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 630*FLEN/8, x4, x1, x2)

inst_211:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x042cb1070d70f and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x3096f727622ae and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x358e7f973f797 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc042cb1070d70f; op2val:0x3ff3096f727622ae;
op3val:0x7fc358e7f973f797; valaddr_reg:x3; val_offset:633*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 633*FLEN/8, x4, x1, x2)

inst_212:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x042cb1070d70f and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x3096f727622ae and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x358e7f973f797 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc042cb1070d70f; op2val:0x3ff3096f727622ae;
op3val:0x7fc358e7f973f797; valaddr_reg:x3; val_offset:636*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 636*FLEN/8, x4, x1, x2)

inst_213:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x042cb1070d70f and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x3096f727622ae and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x358e7f973f797 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc042cb1070d70f; op2val:0x3ff3096f727622ae;
op3val:0x7fc358e7f973f797; valaddr_reg:x3; val_offset:639*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 639*FLEN/8, x4, x1, x2)

inst_214:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x042cb1070d70f and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x3096f727622ae and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x358e7f973f797 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc042cb1070d70f; op2val:0x3ff3096f727622ae;
op3val:0x7fc358e7f973f797; valaddr_reg:x3; val_offset:642*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 642*FLEN/8, x4, x1, x2)

inst_215:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x08e386bd0561b and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xea191d43c722f and fs3 == 0 and fe3 == 0x7fc and fm3 == 0xfb1d7c65dc9f3 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc08e386bd0561b; op2val:0x3ffea191d43c722f;
op3val:0x7fcfb1d7c65dc9f3; valaddr_reg:x3; val_offset:645*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 645*FLEN/8, x4, x1, x2)

inst_216:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x08e386bd0561b and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xea191d43c722f and fs3 == 0 and fe3 == 0x7fc and fm3 == 0xfb1d7c65dc9f3 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc08e386bd0561b; op2val:0x3ffea191d43c722f;
op3val:0x7fcfb1d7c65dc9f3; valaddr_reg:x3; val_offset:648*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 648*FLEN/8, x4, x1, x2)

inst_217:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x08e386bd0561b and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xea191d43c722f and fs3 == 0 and fe3 == 0x7fc and fm3 == 0xfb1d7c65dc9f3 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc08e386bd0561b; op2val:0x3ffea191d43c722f;
op3val:0x7fcfb1d7c65dc9f3; valaddr_reg:x3; val_offset:651*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 651*FLEN/8, x4, x1, x2)

inst_218:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x08e386bd0561b and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xea191d43c722f and fs3 == 0 and fe3 == 0x7fc and fm3 == 0xfb1d7c65dc9f3 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc08e386bd0561b; op2val:0x3ffea191d43c722f;
op3val:0x7fcfb1d7c65dc9f3; valaddr_reg:x3; val_offset:654*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 654*FLEN/8, x4, x1, x2)

inst_219:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x08e386bd0561b and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xea191d43c722f and fs3 == 0 and fe3 == 0x7fc and fm3 == 0xfb1d7c65dc9f3 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc08e386bd0561b; op2val:0x3ffea191d43c722f;
op3val:0x7fcfb1d7c65dc9f3; valaddr_reg:x3; val_offset:657*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 657*FLEN/8, x4, x1, x2)

inst_220:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x0c4143057a407 and fs2 == 0 and fe2 == 0x3fb and fm2 == 0xbd642f851c58f and fs3 == 0 and fe3 == 0x7f8 and fm3 == 0xd2b66cca2a8ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc0c4143057a407; op2val:0x3fbbd642f851c58f;
op3val:0x7f8d2b66cca2a8ff; valaddr_reg:x3; val_offset:660*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 660*FLEN/8, x4, x1, x2)

inst_221:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x0c4143057a407 and fs2 == 0 and fe2 == 0x3fb and fm2 == 0xbd642f851c58f and fs3 == 0 and fe3 == 0x7f8 and fm3 == 0xd2b66cca2a8ff and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc0c4143057a407; op2val:0x3fbbd642f851c58f;
op3val:0x7f8d2b66cca2a8ff; valaddr_reg:x3; val_offset:663*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 663*FLEN/8, x4, x1, x2)

inst_222:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x0c4143057a407 and fs2 == 0 and fe2 == 0x3fb and fm2 == 0xbd642f851c58f and fs3 == 0 and fe3 == 0x7f8 and fm3 == 0xd2b66cca2a8ff and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc0c4143057a407; op2val:0x3fbbd642f851c58f;
op3val:0x7f8d2b66cca2a8ff; valaddr_reg:x3; val_offset:666*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 666*FLEN/8, x4, x1, x2)

inst_223:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x0c4143057a407 and fs2 == 0 and fe2 == 0x3fb and fm2 == 0xbd642f851c58f and fs3 == 0 and fe3 == 0x7f8 and fm3 == 0xd2b66cca2a8ff and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc0c4143057a407; op2val:0x3fbbd642f851c58f;
op3val:0x7f8d2b66cca2a8ff; valaddr_reg:x3; val_offset:669*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 669*FLEN/8, x4, x1, x2)

inst_224:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x0c4143057a407 and fs2 == 0 and fe2 == 0x3fb and fm2 == 0xbd642f851c58f and fs3 == 0 and fe3 == 0x7f8 and fm3 == 0xd2b66cca2a8ff and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc0c4143057a407; op2val:0x3fbbd642f851c58f;
op3val:0x7f8d2b66cca2a8ff; valaddr_reg:x3; val_offset:672*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 672*FLEN/8, x4, x1, x2)

inst_225:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x0c705b0f97703 and fs2 == 0 and fe2 == 0x401 and fm2 == 0xbc56ad55a2445 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xd1edc16f5ae1f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc0c705b0f97703; op2val:0x401bc56ad55a2445;
op3val:0x7fed1edc16f5ae1f; valaddr_reg:x3; val_offset:675*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 675*FLEN/8, x4, x1, x2)

inst_226:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x0c705b0f97703 and fs2 == 0 and fe2 == 0x401 and fm2 == 0xbc56ad55a2445 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xd1edc16f5ae1f and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc0c705b0f97703; op2val:0x401bc56ad55a2445;
op3val:0x7fed1edc16f5ae1f; valaddr_reg:x3; val_offset:678*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 678*FLEN/8, x4, x1, x2)

inst_227:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x0c705b0f97703 and fs2 == 0 and fe2 == 0x401 and fm2 == 0xbc56ad55a2445 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xd1edc16f5ae1f and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc0c705b0f97703; op2val:0x401bc56ad55a2445;
op3val:0x7fed1edc16f5ae1f; valaddr_reg:x3; val_offset:681*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 681*FLEN/8, x4, x1, x2)

inst_228:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x0c705b0f97703 and fs2 == 0 and fe2 == 0x401 and fm2 == 0xbc56ad55a2445 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xd1edc16f5ae1f and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc0c705b0f97703; op2val:0x401bc56ad55a2445;
op3val:0x7fed1edc16f5ae1f; valaddr_reg:x3; val_offset:684*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 684*FLEN/8, x4, x1, x2)

inst_229:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x0c705b0f97703 and fs2 == 0 and fe2 == 0x401 and fm2 == 0xbc56ad55a2445 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xd1edc16f5ae1f and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc0c705b0f97703; op2val:0x401bc56ad55a2445;
op3val:0x7fed1edc16f5ae1f; valaddr_reg:x3; val_offset:687*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 687*FLEN/8, x4, x1, x2)

inst_230:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x276f358a6a63b and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xa21385d91b7e5 and fs3 == 0 and fe3 == 0x7fb and fm3 == 0xe27a1d244ecc7 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc276f358a6a63b; op2val:0x3fea21385d91b7e5;
op3val:0x7fbe27a1d244ecc7; valaddr_reg:x3; val_offset:690*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 690*FLEN/8, x4, x1, x2)

inst_231:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x276f358a6a63b and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xa21385d91b7e5 and fs3 == 0 and fe3 == 0x7fb and fm3 == 0xe27a1d244ecc7 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc276f358a6a63b; op2val:0x3fea21385d91b7e5;
op3val:0x7fbe27a1d244ecc7; valaddr_reg:x3; val_offset:693*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 693*FLEN/8, x4, x1, x2)

inst_232:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x276f358a6a63b and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xa21385d91b7e5 and fs3 == 0 and fe3 == 0x7fb and fm3 == 0xe27a1d244ecc7 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc276f358a6a63b; op2val:0x3fea21385d91b7e5;
op3val:0x7fbe27a1d244ecc7; valaddr_reg:x3; val_offset:696*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 696*FLEN/8, x4, x1, x2)

inst_233:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x276f358a6a63b and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xa21385d91b7e5 and fs3 == 0 and fe3 == 0x7fb and fm3 == 0xe27a1d244ecc7 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc276f358a6a63b; op2val:0x3fea21385d91b7e5;
op3val:0x7fbe27a1d244ecc7; valaddr_reg:x3; val_offset:699*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 699*FLEN/8, x4, x1, x2)

inst_234:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x276f358a6a63b and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xa21385d91b7e5 and fs3 == 0 and fe3 == 0x7fb and fm3 == 0xe27a1d244ecc7 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc276f358a6a63b; op2val:0x3fea21385d91b7e5;
op3val:0x7fbe27a1d244ecc7; valaddr_reg:x3; val_offset:702*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 702*FLEN/8, x4, x1, x2)

inst_235:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x2b5d6f9c9011b and fs2 == 0 and fe2 == 0x401 and fm2 == 0x69dfb973f79f1 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xa72c61a622bce and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc2b5d6f9c9011b; op2val:0x40169dfb973f79f1;
op3val:0x7fea72c61a622bce; valaddr_reg:x3; val_offset:705*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 705*FLEN/8, x4, x1, x2)

inst_236:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x2b5d6f9c9011b and fs2 == 0 and fe2 == 0x401 and fm2 == 0x69dfb973f79f1 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xa72c61a622bce and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc2b5d6f9c9011b; op2val:0x40169dfb973f79f1;
op3val:0x7fea72c61a622bce; valaddr_reg:x3; val_offset:708*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 708*FLEN/8, x4, x1, x2)

inst_237:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x2b5d6f9c9011b and fs2 == 0 and fe2 == 0x401 and fm2 == 0x69dfb973f79f1 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xa72c61a622bce and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc2b5d6f9c9011b; op2val:0x40169dfb973f79f1;
op3val:0x7fea72c61a622bce; valaddr_reg:x3; val_offset:711*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 711*FLEN/8, x4, x1, x2)

inst_238:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x2b5d6f9c9011b and fs2 == 0 and fe2 == 0x401 and fm2 == 0x69dfb973f79f1 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xa72c61a622bce and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc2b5d6f9c9011b; op2val:0x40169dfb973f79f1;
op3val:0x7fea72c61a622bce; valaddr_reg:x3; val_offset:714*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 714*FLEN/8, x4, x1, x2)

inst_239:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x2b5d6f9c9011b and fs2 == 0 and fe2 == 0x401 and fm2 == 0x69dfb973f79f1 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xa72c61a622bce and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc2b5d6f9c9011b; op2val:0x40169dfb973f79f1;
op3val:0x7fea72c61a622bce; valaddr_reg:x3; val_offset:717*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 717*FLEN/8, x4, x1, x2)

inst_240:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x31e7d2895e8b3 and fs2 == 0 and fe2 == 0x401 and fm2 == 0x89d6e02e36b0a and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xd69da5e0f232b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc31e7d2895e8b3; op2val:0x40189d6e02e36b0a;
op3val:0x7fed69da5e0f232b; valaddr_reg:x3; val_offset:720*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 720*FLEN/8, x4, x1, x2)

inst_241:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x31e7d2895e8b3 and fs2 == 0 and fe2 == 0x401 and fm2 == 0x89d6e02e36b0a and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xd69da5e0f232b and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc31e7d2895e8b3; op2val:0x40189d6e02e36b0a;
op3val:0x7fed69da5e0f232b; valaddr_reg:x3; val_offset:723*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 723*FLEN/8, x4, x1, x2)

inst_242:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x31e7d2895e8b3 and fs2 == 0 and fe2 == 0x401 and fm2 == 0x89d6e02e36b0a and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xd69da5e0f232b and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc31e7d2895e8b3; op2val:0x40189d6e02e36b0a;
op3val:0x7fed69da5e0f232b; valaddr_reg:x3; val_offset:726*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 726*FLEN/8, x4, x1, x2)

inst_243:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x31e7d2895e8b3 and fs2 == 0 and fe2 == 0x401 and fm2 == 0x89d6e02e36b0a and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xd69da5e0f232b and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc31e7d2895e8b3; op2val:0x40189d6e02e36b0a;
op3val:0x7fed69da5e0f232b; valaddr_reg:x3; val_offset:729*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 729*FLEN/8, x4, x1, x2)

inst_244:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x31e7d2895e8b3 and fs2 == 0 and fe2 == 0x401 and fm2 == 0x89d6e02e36b0a and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xd69da5e0f232b and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc31e7d2895e8b3; op2val:0x40189d6e02e36b0a;
op3val:0x7fed69da5e0f232b; valaddr_reg:x3; val_offset:732*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 732*FLEN/8, x4, x1, x2)

inst_245:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x3743aaeeeacbb and fs2 == 0 and fe2 == 0x400 and fm2 == 0x9bcce06a14cb0 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xf4b2be35fa361 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc3743aaeeeacbb; op2val:0x4009bcce06a14cb0;
op3val:0x7fdf4b2be35fa361; valaddr_reg:x3; val_offset:735*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 735*FLEN/8, x4, x1, x2)

inst_246:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x3743aaeeeacbb and fs2 == 0 and fe2 == 0x400 and fm2 == 0x9bcce06a14cb0 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xf4b2be35fa361 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc3743aaeeeacbb; op2val:0x4009bcce06a14cb0;
op3val:0x7fdf4b2be35fa361; valaddr_reg:x3; val_offset:738*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 738*FLEN/8, x4, x1, x2)

inst_247:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x3743aaeeeacbb and fs2 == 0 and fe2 == 0x400 and fm2 == 0x9bcce06a14cb0 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xf4b2be35fa361 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc3743aaeeeacbb; op2val:0x4009bcce06a14cb0;
op3val:0x7fdf4b2be35fa361; valaddr_reg:x3; val_offset:741*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 741*FLEN/8, x4, x1, x2)

inst_248:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x3743aaeeeacbb and fs2 == 0 and fe2 == 0x400 and fm2 == 0x9bcce06a14cb0 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xf4b2be35fa361 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc3743aaeeeacbb; op2val:0x4009bcce06a14cb0;
op3val:0x7fdf4b2be35fa361; valaddr_reg:x3; val_offset:744*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 744*FLEN/8, x4, x1, x2)

inst_249:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x3743aaeeeacbb and fs2 == 0 and fe2 == 0x400 and fm2 == 0x9bcce06a14cb0 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xf4b2be35fa361 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc3743aaeeeacbb; op2val:0x4009bcce06a14cb0;
op3val:0x7fdf4b2be35fa361; valaddr_reg:x3; val_offset:747*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 747*FLEN/8, x4, x1, x2)

inst_250:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x3c4e82f083607 and fs2 == 0 and fe2 == 0x401 and fm2 == 0x28bf65ecaacb4 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x6ea743e92e6a6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc3c4e82f083607; op2val:0x40128bf65ecaacb4;
op3val:0x7fe6ea743e92e6a6; valaddr_reg:x3; val_offset:750*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 750*FLEN/8, x4, x1, x2)

inst_251:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x3c4e82f083607 and fs2 == 0 and fe2 == 0x401 and fm2 == 0x28bf65ecaacb4 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x6ea743e92e6a6 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc3c4e82f083607; op2val:0x40128bf65ecaacb4;
op3val:0x7fe6ea743e92e6a6; valaddr_reg:x3; val_offset:753*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 753*FLEN/8, x4, x1, x2)

inst_252:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x3c4e82f083607 and fs2 == 0 and fe2 == 0x401 and fm2 == 0x28bf65ecaacb4 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x6ea743e92e6a6 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc3c4e82f083607; op2val:0x40128bf65ecaacb4;
op3val:0x7fe6ea743e92e6a6; valaddr_reg:x3; val_offset:756*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 756*FLEN/8, x4, x1, x2)

inst_253:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x3c4e82f083607 and fs2 == 0 and fe2 == 0x401 and fm2 == 0x28bf65ecaacb4 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x6ea743e92e6a6 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc3c4e82f083607; op2val:0x40128bf65ecaacb4;
op3val:0x7fe6ea743e92e6a6; valaddr_reg:x3; val_offset:759*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 759*FLEN/8, x4, x1, x2)

inst_254:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x3c4e82f083607 and fs2 == 0 and fe2 == 0x401 and fm2 == 0x28bf65ecaacb4 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x6ea743e92e6a6 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc3c4e82f083607; op2val:0x40128bf65ecaacb4;
op3val:0x7fe6ea743e92e6a6; valaddr_reg:x3; val_offset:762*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 762*FLEN/8, x4, x1, x2)

inst_255:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x42a0a144df96b and fs2 == 0 and fe2 == 0x400 and fm2 == 0x6a3ec4d3e2eea and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xc8863f0076b57 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc42a0a144df96b; op2val:0x4006a3ec4d3e2eea;
op3val:0x7fdc8863f0076b57; valaddr_reg:x3; val_offset:765*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 765*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_3)

inst_256:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x42a0a144df96b and fs2 == 0 and fe2 == 0x400 and fm2 == 0x6a3ec4d3e2eea and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xc8863f0076b57 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc42a0a144df96b; op2val:0x4006a3ec4d3e2eea;
op3val:0x7fdc8863f0076b57; valaddr_reg:x3; val_offset:768*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 768*FLEN/8, x4, x1, x2)

inst_257:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x42a0a144df96b and fs2 == 0 and fe2 == 0x400 and fm2 == 0x6a3ec4d3e2eea and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xc8863f0076b57 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc42a0a144df96b; op2val:0x4006a3ec4d3e2eea;
op3val:0x7fdc8863f0076b57; valaddr_reg:x3; val_offset:771*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 771*FLEN/8, x4, x1, x2)

inst_258:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x42a0a144df96b and fs2 == 0 and fe2 == 0x400 and fm2 == 0x6a3ec4d3e2eea and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xc8863f0076b57 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc42a0a144df96b; op2val:0x4006a3ec4d3e2eea;
op3val:0x7fdc8863f0076b57; valaddr_reg:x3; val_offset:774*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 774*FLEN/8, x4, x1, x2)

inst_259:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x42a0a144df96b and fs2 == 0 and fe2 == 0x400 and fm2 == 0x6a3ec4d3e2eea and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xc8863f0076b57 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc42a0a144df96b; op2val:0x4006a3ec4d3e2eea;
op3val:0x7fdc8863f0076b57; valaddr_reg:x3; val_offset:777*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 777*FLEN/8, x4, x1, x2)

inst_260:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x4aaeb7b4d19eb and fs2 == 0 and fe2 == 0x400 and fm2 == 0x56153ee560dc4 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xb9e0daff3dc55 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc4aaeb7b4d19eb; op2val:0x40056153ee560dc4;
op3val:0x7fdb9e0daff3dc55; valaddr_reg:x3; val_offset:780*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 780*FLEN/8, x4, x1, x2)

inst_261:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x4aaeb7b4d19eb and fs2 == 0 and fe2 == 0x400 and fm2 == 0x56153ee560dc4 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xb9e0daff3dc55 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc4aaeb7b4d19eb; op2val:0x40056153ee560dc4;
op3val:0x7fdb9e0daff3dc55; valaddr_reg:x3; val_offset:783*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 783*FLEN/8, x4, x1, x2)

inst_262:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x4aaeb7b4d19eb and fs2 == 0 and fe2 == 0x400 and fm2 == 0x56153ee560dc4 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xb9e0daff3dc55 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc4aaeb7b4d19eb; op2val:0x40056153ee560dc4;
op3val:0x7fdb9e0daff3dc55; valaddr_reg:x3; val_offset:786*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 786*FLEN/8, x4, x1, x2)

inst_263:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x4aaeb7b4d19eb and fs2 == 0 and fe2 == 0x400 and fm2 == 0x56153ee560dc4 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xb9e0daff3dc55 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc4aaeb7b4d19eb; op2val:0x40056153ee560dc4;
op3val:0x7fdb9e0daff3dc55; valaddr_reg:x3; val_offset:789*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 789*FLEN/8, x4, x1, x2)

inst_264:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x4aaeb7b4d19eb and fs2 == 0 and fe2 == 0x400 and fm2 == 0x56153ee560dc4 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xb9e0daff3dc55 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc4aaeb7b4d19eb; op2val:0x40056153ee560dc4;
op3val:0x7fdb9e0daff3dc55; valaddr_reg:x3; val_offset:792*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 792*FLEN/8, x4, x1, x2)

inst_265:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x561a225b0ee73 and fs2 == 0 and fe2 == 0x401 and fm2 == 0x27c20f760e378 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x8b3b720e423c7 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc561a225b0ee73; op2val:0x40127c20f760e378;
op3val:0x7fe8b3b720e423c7; valaddr_reg:x3; val_offset:795*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 795*FLEN/8, x4, x1, x2)

inst_266:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x561a225b0ee73 and fs2 == 0 and fe2 == 0x401 and fm2 == 0x27c20f760e378 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x8b3b720e423c7 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc561a225b0ee73; op2val:0x40127c20f760e378;
op3val:0x7fe8b3b720e423c7; valaddr_reg:x3; val_offset:798*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 798*FLEN/8, x4, x1, x2)

inst_267:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x561a225b0ee73 and fs2 == 0 and fe2 == 0x401 and fm2 == 0x27c20f760e378 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x8b3b720e423c7 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc561a225b0ee73; op2val:0x40127c20f760e378;
op3val:0x7fe8b3b720e423c7; valaddr_reg:x3; val_offset:801*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 801*FLEN/8, x4, x1, x2)

inst_268:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x561a225b0ee73 and fs2 == 0 and fe2 == 0x401 and fm2 == 0x27c20f760e378 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x8b3b720e423c7 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc561a225b0ee73; op2val:0x40127c20f760e378;
op3val:0x7fe8b3b720e423c7; valaddr_reg:x3; val_offset:804*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 804*FLEN/8, x4, x1, x2)

inst_269:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x561a225b0ee73 and fs2 == 0 and fe2 == 0x401 and fm2 == 0x27c20f760e378 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x8b3b720e423c7 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc561a225b0ee73; op2val:0x40127c20f760e378;
op3val:0x7fe8b3b720e423c7; valaddr_reg:x3; val_offset:807*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 807*FLEN/8, x4, x1, x2)

inst_270:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x5829bf9c6538f and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x64c2b92225f5e and fs3 == 0 and fe3 == 0x7fb and fm3 == 0xdf9fd6fcc553f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc5829bf9c6538f; op2val:0x3fe64c2b92225f5e;
op3val:0x7fbdf9fd6fcc553f; valaddr_reg:x3; val_offset:810*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 810*FLEN/8, x4, x1, x2)

inst_271:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x5829bf9c6538f and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x64c2b92225f5e and fs3 == 0 and fe3 == 0x7fb and fm3 == 0xdf9fd6fcc553f and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc5829bf9c6538f; op2val:0x3fe64c2b92225f5e;
op3val:0x7fbdf9fd6fcc553f; valaddr_reg:x3; val_offset:813*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 813*FLEN/8, x4, x1, x2)

inst_272:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x5829bf9c6538f and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x64c2b92225f5e and fs3 == 0 and fe3 == 0x7fb and fm3 == 0xdf9fd6fcc553f and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc5829bf9c6538f; op2val:0x3fe64c2b92225f5e;
op3val:0x7fbdf9fd6fcc553f; valaddr_reg:x3; val_offset:816*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 816*FLEN/8, x4, x1, x2)

inst_273:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x5829bf9c6538f and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x64c2b92225f5e and fs3 == 0 and fe3 == 0x7fb and fm3 == 0xdf9fd6fcc553f and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc5829bf9c6538f; op2val:0x3fe64c2b92225f5e;
op3val:0x7fbdf9fd6fcc553f; valaddr_reg:x3; val_offset:819*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 819*FLEN/8, x4, x1, x2)

inst_274:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x5829bf9c6538f and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x64c2b92225f5e and fs3 == 0 and fe3 == 0x7fb and fm3 == 0xdf9fd6fcc553f and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc5829bf9c6538f; op2val:0x3fe64c2b92225f5e;
op3val:0x7fbdf9fd6fcc553f; valaddr_reg:x3; val_offset:822*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 822*FLEN/8, x4, x1, x2)

inst_275:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x60f750243d353 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x5fa870dff129f and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xe4db54cf3eb57 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc60f750243d353; op2val:0x4005fa870dff129f;
op3val:0x7fde4db54cf3eb57; valaddr_reg:x3; val_offset:825*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 825*FLEN/8, x4, x1, x2)

inst_276:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x60f750243d353 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x5fa870dff129f and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xe4db54cf3eb57 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc60f750243d353; op2val:0x4005fa870dff129f;
op3val:0x7fde4db54cf3eb57; valaddr_reg:x3; val_offset:828*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 828*FLEN/8, x4, x1, x2)

inst_277:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x60f750243d353 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x5fa870dff129f and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xe4db54cf3eb57 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc60f750243d353; op2val:0x4005fa870dff129f;
op3val:0x7fde4db54cf3eb57; valaddr_reg:x3; val_offset:831*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 831*FLEN/8, x4, x1, x2)

inst_278:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x60f750243d353 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x5fa870dff129f and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xe4db54cf3eb57 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc60f750243d353; op2val:0x4005fa870dff129f;
op3val:0x7fde4db54cf3eb57; valaddr_reg:x3; val_offset:834*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 834*FLEN/8, x4, x1, x2)

inst_279:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x60f750243d353 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x5fa870dff129f and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xe4db54cf3eb57 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc60f750243d353; op2val:0x4005fa870dff129f;
op3val:0x7fde4db54cf3eb57; valaddr_reg:x3; val_offset:837*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 837*FLEN/8, x4, x1, x2)

inst_280:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x68e4d726bb7d7 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x50f99573d3393 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0xdb0c33a8948c7 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc68e4d726bb7d7; op2val:0x3ff50f99573d3393;
op3val:0x7fcdb0c33a8948c7; valaddr_reg:x3; val_offset:840*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 840*FLEN/8, x4, x1, x2)

inst_281:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x68e4d726bb7d7 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x50f99573d3393 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0xdb0c33a8948c7 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc68e4d726bb7d7; op2val:0x3ff50f99573d3393;
op3val:0x7fcdb0c33a8948c7; valaddr_reg:x3; val_offset:843*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 843*FLEN/8, x4, x1, x2)

inst_282:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x68e4d726bb7d7 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x50f99573d3393 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0xdb0c33a8948c7 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc68e4d726bb7d7; op2val:0x3ff50f99573d3393;
op3val:0x7fcdb0c33a8948c7; valaddr_reg:x3; val_offset:846*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 846*FLEN/8, x4, x1, x2)

inst_283:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x68e4d726bb7d7 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x50f99573d3393 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0xdb0c33a8948c7 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc68e4d726bb7d7; op2val:0x3ff50f99573d3393;
op3val:0x7fcdb0c33a8948c7; valaddr_reg:x3; val_offset:849*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 849*FLEN/8, x4, x1, x2)

inst_284:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x68e4d726bb7d7 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x50f99573d3393 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0xdb0c33a8948c7 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc68e4d726bb7d7; op2val:0x3ff50f99573d3393;
op3val:0x7fcdb0c33a8948c7; valaddr_reg:x3; val_offset:852*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 852*FLEN/8, x4, x1, x2)

inst_285:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x6d9ccb6f15b67 and fs2 == 0 and fe2 == 0x401 and fm2 == 0x1ae7a70da303c and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x94098f28b1a38 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc6d9ccb6f15b67; op2val:0x4011ae7a70da303c;
op3val:0x7fe94098f28b1a38; valaddr_reg:x3; val_offset:855*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 855*FLEN/8, x4, x1, x2)

inst_286:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x6d9ccb6f15b67 and fs2 == 0 and fe2 == 0x401 and fm2 == 0x1ae7a70da303c and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x94098f28b1a38 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc6d9ccb6f15b67; op2val:0x4011ae7a70da303c;
op3val:0x7fe94098f28b1a38; valaddr_reg:x3; val_offset:858*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 858*FLEN/8, x4, x1, x2)

inst_287:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x6d9ccb6f15b67 and fs2 == 0 and fe2 == 0x401 and fm2 == 0x1ae7a70da303c and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x94098f28b1a38 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc6d9ccb6f15b67; op2val:0x4011ae7a70da303c;
op3val:0x7fe94098f28b1a38; valaddr_reg:x3; val_offset:861*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 861*FLEN/8, x4, x1, x2)

inst_288:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x6d9ccb6f15b67 and fs2 == 0 and fe2 == 0x401 and fm2 == 0x1ae7a70da303c and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x94098f28b1a38 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc6d9ccb6f15b67; op2val:0x4011ae7a70da303c;
op3val:0x7fe94098f28b1a38; valaddr_reg:x3; val_offset:864*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 864*FLEN/8, x4, x1, x2)

inst_289:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x6d9ccb6f15b67 and fs2 == 0 and fe2 == 0x401 and fm2 == 0x1ae7a70da303c and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x94098f28b1a38 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc6d9ccb6f15b67; op2val:0x4011ae7a70da303c;
op3val:0x7fe94098f28b1a38; valaddr_reg:x3; val_offset:867*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 867*FLEN/8, x4, x1, x2)

inst_290:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x7220ac1a61dbb and fs2 == 0 and fe2 == 0x400 and fm2 == 0x9beb88f04a963 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x29c77f248e9cc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc7220ac1a61dbb; op2val:0x4009beb88f04a963;
op3val:0x7fe29c77f248e9cc; valaddr_reg:x3; val_offset:870*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 870*FLEN/8, x4, x1, x2)

inst_291:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x7220ac1a61dbb and fs2 == 0 and fe2 == 0x400 and fm2 == 0x9beb88f04a963 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x29c77f248e9cc and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc7220ac1a61dbb; op2val:0x4009beb88f04a963;
op3val:0x7fe29c77f248e9cc; valaddr_reg:x3; val_offset:873*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 873*FLEN/8, x4, x1, x2)

inst_292:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x7220ac1a61dbb and fs2 == 0 and fe2 == 0x400 and fm2 == 0x9beb88f04a963 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x29c77f248e9cc and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc7220ac1a61dbb; op2val:0x4009beb88f04a963;
op3val:0x7fe29c77f248e9cc; valaddr_reg:x3; val_offset:876*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 876*FLEN/8, x4, x1, x2)

inst_293:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x7220ac1a61dbb and fs2 == 0 and fe2 == 0x400 and fm2 == 0x9beb88f04a963 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x29c77f248e9cc and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc7220ac1a61dbb; op2val:0x4009beb88f04a963;
op3val:0x7fe29c77f248e9cc; valaddr_reg:x3; val_offset:879*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 879*FLEN/8, x4, x1, x2)

inst_294:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x7220ac1a61dbb and fs2 == 0 and fe2 == 0x400 and fm2 == 0x9beb88f04a963 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x29c77f248e9cc and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc7220ac1a61dbb; op2val:0x4009beb88f04a963;
op3val:0x7fe29c77f248e9cc; valaddr_reg:x3; val_offset:882*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 882*FLEN/8, x4, x1, x2)

inst_295:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x8401c483a4e5f and fs2 == 0 and fe2 == 0x400 and fm2 == 0x40c19bce4afc0 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xe627a71f726d1 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc8401c483a4e5f; op2val:0x40040c19bce4afc0;
op3val:0x7fde627a71f726d1; valaddr_reg:x3; val_offset:885*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 885*FLEN/8, x4, x1, x2)

inst_296:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x8401c483a4e5f and fs2 == 0 and fe2 == 0x400 and fm2 == 0x40c19bce4afc0 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xe627a71f726d1 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc8401c483a4e5f; op2val:0x40040c19bce4afc0;
op3val:0x7fde627a71f726d1; valaddr_reg:x3; val_offset:888*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 888*FLEN/8, x4, x1, x2)

inst_297:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x8401c483a4e5f and fs2 == 0 and fe2 == 0x400 and fm2 == 0x40c19bce4afc0 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xe627a71f726d1 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc8401c483a4e5f; op2val:0x40040c19bce4afc0;
op3val:0x7fde627a71f726d1; valaddr_reg:x3; val_offset:891*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 891*FLEN/8, x4, x1, x2)

inst_298:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x8401c483a4e5f and fs2 == 0 and fe2 == 0x400 and fm2 == 0x40c19bce4afc0 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xe627a71f726d1 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc8401c483a4e5f; op2val:0x40040c19bce4afc0;
op3val:0x7fde627a71f726d1; valaddr_reg:x3; val_offset:894*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 894*FLEN/8, x4, x1, x2)

inst_299:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x8401c483a4e5f and fs2 == 0 and fe2 == 0x400 and fm2 == 0x40c19bce4afc0 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xe627a71f726d1 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc8401c483a4e5f; op2val:0x40040c19bce4afc0;
op3val:0x7fde627a71f726d1; valaddr_reg:x3; val_offset:897*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 897*FLEN/8, x4, x1, x2)

inst_300:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x90e2945b4b1b3 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xa09379e91019b and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x462b910bcd037 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc90e2945b4b1b3; op2val:0x3ffa09379e91019b;
op3val:0x7fd462b910bcd037; valaddr_reg:x3; val_offset:900*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 900*FLEN/8, x4, x1, x2)

inst_301:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x90e2945b4b1b3 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xa09379e91019b and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x462b910bcd037 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc90e2945b4b1b3; op2val:0x3ffa09379e91019b;
op3val:0x7fd462b910bcd037; valaddr_reg:x3; val_offset:903*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 903*FLEN/8, x4, x1, x2)

inst_302:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x90e2945b4b1b3 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xa09379e91019b and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x462b910bcd037 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc90e2945b4b1b3; op2val:0x3ffa09379e91019b;
op3val:0x7fd462b910bcd037; valaddr_reg:x3; val_offset:906*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 906*FLEN/8, x4, x1, x2)

inst_303:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x90e2945b4b1b3 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xa09379e91019b and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x462b910bcd037 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc90e2945b4b1b3; op2val:0x3ffa09379e91019b;
op3val:0x7fd462b910bcd037; valaddr_reg:x3; val_offset:909*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 909*FLEN/8, x4, x1, x2)

inst_304:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x90e2945b4b1b3 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xa09379e91019b and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x462b910bcd037 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc90e2945b4b1b3; op2val:0x3ffa09379e91019b;
op3val:0x7fd462b910bcd037; valaddr_reg:x3; val_offset:912*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 912*FLEN/8, x4, x1, x2)

inst_305:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x92daae5675f67 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x09fa7537d57df and fs3 == 0 and fe3 == 0x7fc and fm3 == 0xa28e807b8f2a7 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc92daae5675f67; op2val:0x3ff09fa7537d57df;
op3val:0x7fca28e807b8f2a7; valaddr_reg:x3; val_offset:915*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 915*FLEN/8, x4, x1, x2)

inst_306:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x92daae5675f67 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x09fa7537d57df and fs3 == 0 and fe3 == 0x7fc and fm3 == 0xa28e807b8f2a7 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc92daae5675f67; op2val:0x3ff09fa7537d57df;
op3val:0x7fca28e807b8f2a7; valaddr_reg:x3; val_offset:918*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 918*FLEN/8, x4, x1, x2)

inst_307:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x92daae5675f67 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x09fa7537d57df and fs3 == 0 and fe3 == 0x7fc and fm3 == 0xa28e807b8f2a7 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc92daae5675f67; op2val:0x3ff09fa7537d57df;
op3val:0x7fca28e807b8f2a7; valaddr_reg:x3; val_offset:921*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 921*FLEN/8, x4, x1, x2)

inst_308:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x92daae5675f67 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x09fa7537d57df and fs3 == 0 and fe3 == 0x7fc and fm3 == 0xa28e807b8f2a7 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc92daae5675f67; op2val:0x3ff09fa7537d57df;
op3val:0x7fca28e807b8f2a7; valaddr_reg:x3; val_offset:924*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 924*FLEN/8, x4, x1, x2)

inst_309:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x92daae5675f67 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x09fa7537d57df and fs3 == 0 and fe3 == 0x7fc and fm3 == 0xa28e807b8f2a7 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc92daae5675f67; op2val:0x3ff09fa7537d57df;
op3val:0x7fca28e807b8f2a7; valaddr_reg:x3; val_offset:927*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 927*FLEN/8, x4, x1, x2)

inst_310:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x9b9b6e3f88af3 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x4174a18832cd7 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x026cb5b1ade26 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc9b9b6e3f88af3; op2val:0x4004174a18832cd7;
op3val:0x7fe026cb5b1ade26; valaddr_reg:x3; val_offset:930*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 930*FLEN/8, x4, x1, x2)

inst_311:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x9b9b6e3f88af3 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x4174a18832cd7 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x026cb5b1ade26 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc9b9b6e3f88af3; op2val:0x4004174a18832cd7;
op3val:0x7fe026cb5b1ade26; valaddr_reg:x3; val_offset:933*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 933*FLEN/8, x4, x1, x2)

inst_312:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x9b9b6e3f88af3 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x4174a18832cd7 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x026cb5b1ade26 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc9b9b6e3f88af3; op2val:0x4004174a18832cd7;
op3val:0x7fe026cb5b1ade26; valaddr_reg:x3; val_offset:936*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 936*FLEN/8, x4, x1, x2)

inst_313:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x9b9b6e3f88af3 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x4174a18832cd7 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x026cb5b1ade26 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc9b9b6e3f88af3; op2val:0x4004174a18832cd7;
op3val:0x7fe026cb5b1ade26; valaddr_reg:x3; val_offset:939*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 939*FLEN/8, x4, x1, x2)

inst_314:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x9b9b6e3f88af3 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x4174a18832cd7 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x026cb5b1ade26 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc9b9b6e3f88af3; op2val:0x4004174a18832cd7;
op3val:0x7fe026cb5b1ade26; valaddr_reg:x3; val_offset:942*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 942*FLEN/8, x4, x1, x2)

inst_315:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0xab8c0870ccebf and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x8e0e153843530 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x4c659d1c2442b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fcab8c0870ccebf; op2val:0x3fe8e0e153843530;
op3val:0x7fc4c659d1c2442b; valaddr_reg:x3; val_offset:945*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 945*FLEN/8, x4, x1, x2)

inst_316:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0xab8c0870ccebf and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x8e0e153843530 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x4c659d1c2442b and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fcab8c0870ccebf; op2val:0x3fe8e0e153843530;
op3val:0x7fc4c659d1c2442b; valaddr_reg:x3; val_offset:948*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 948*FLEN/8, x4, x1, x2)

inst_317:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0xab8c0870ccebf and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x8e0e153843530 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x4c659d1c2442b and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fcab8c0870ccebf; op2val:0x3fe8e0e153843530;
op3val:0x7fc4c659d1c2442b; valaddr_reg:x3; val_offset:951*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 951*FLEN/8, x4, x1, x2)

inst_318:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0xab8c0870ccebf and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x8e0e153843530 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x4c659d1c2442b and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fcab8c0870ccebf; op2val:0x3fe8e0e153843530;
op3val:0x7fc4c659d1c2442b; valaddr_reg:x3; val_offset:954*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 954*FLEN/8, x4, x1, x2)

inst_319:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0xab8c0870ccebf and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x8e0e153843530 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x4c659d1c2442b and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fcab8c0870ccebf; op2val:0x3fe8e0e153843530;
op3val:0x7fc4c659d1c2442b; valaddr_reg:x3; val_offset:957*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 957*FLEN/8, x4, x1, x2)

inst_320:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0xc1b743bf268e7 and fs2 == 0 and fe2 == 0x401 and fm2 == 0x159cba2b1fd8a and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xe7ae9f060626a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fcc1b743bf268e7; op2val:0x401159cba2b1fd8a;
op3val:0x7fee7ae9f060626a; valaddr_reg:x3; val_offset:960*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 960*FLEN/8, x4, x1, x2)

inst_321:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0xc1b743bf268e7 and fs2 == 0 and fe2 == 0x401 and fm2 == 0x159cba2b1fd8a and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xe7ae9f060626a and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fcc1b743bf268e7; op2val:0x401159cba2b1fd8a;
op3val:0x7fee7ae9f060626a; valaddr_reg:x3; val_offset:963*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 963*FLEN/8, x4, x1, x2)

inst_322:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0xc1b743bf268e7 and fs2 == 0 and fe2 == 0x401 and fm2 == 0x159cba2b1fd8a and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xe7ae9f060626a and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fcc1b743bf268e7; op2val:0x401159cba2b1fd8a;
op3val:0x7fee7ae9f060626a; valaddr_reg:x3; val_offset:966*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 966*FLEN/8, x4, x1, x2)

inst_323:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0xc1b743bf268e7 and fs2 == 0 and fe2 == 0x401 and fm2 == 0x159cba2b1fd8a and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xe7ae9f060626a and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fcc1b743bf268e7; op2val:0x401159cba2b1fd8a;
op3val:0x7fee7ae9f060626a; valaddr_reg:x3; val_offset:969*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 969*FLEN/8, x4, x1, x2)

inst_324:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0xc1b743bf268e7 and fs2 == 0 and fe2 == 0x401 and fm2 == 0x159cba2b1fd8a and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xe7ae9f060626a and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fcc1b743bf268e7; op2val:0x401159cba2b1fd8a;
op3val:0x7fee7ae9f060626a; valaddr_reg:x3; val_offset:972*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 972*FLEN/8, x4, x1, x2)

inst_325:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0xc381c01a26f87 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x0769999898d4c and fs3 == 0 and fe3 == 0x7fc and fm3 == 0xd0948b7857293 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fcc381c01a26f87; op2val:0x3ff0769999898d4c;
op3val:0x7fcd0948b7857293; valaddr_reg:x3; val_offset:975*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 975*FLEN/8, x4, x1, x2)

inst_326:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0xc381c01a26f87 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x0769999898d4c and fs3 == 0 and fe3 == 0x7fc and fm3 == 0xd0948b7857293 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fcc381c01a26f87; op2val:0x3ff0769999898d4c;
op3val:0x7fcd0948b7857293; valaddr_reg:x3; val_offset:978*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 978*FLEN/8, x4, x1, x2)

inst_327:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0xc381c01a26f87 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x0769999898d4c and fs3 == 0 and fe3 == 0x7fc and fm3 == 0xd0948b7857293 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fcc381c01a26f87; op2val:0x3ff0769999898d4c;
op3val:0x7fcd0948b7857293; valaddr_reg:x3; val_offset:981*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 981*FLEN/8, x4, x1, x2)

inst_328:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0xc381c01a26f87 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x0769999898d4c and fs3 == 0 and fe3 == 0x7fc and fm3 == 0xd0948b7857293 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fcc381c01a26f87; op2val:0x3ff0769999898d4c;
op3val:0x7fcd0948b7857293; valaddr_reg:x3; val_offset:984*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 984*FLEN/8, x4, x1, x2)

inst_329:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0xc381c01a26f87 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x0769999898d4c and fs3 == 0 and fe3 == 0x7fc and fm3 == 0xd0948b7857293 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fcc381c01a26f87; op2val:0x3ff0769999898d4c;
op3val:0x7fcd0948b7857293; valaddr_reg:x3; val_offset:987*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 987*FLEN/8, x4, x1, x2)

inst_330:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0xd05ccb332dd2f and fs2 == 0 and fe2 == 0x400 and fm2 == 0x2438416c6ef58 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x0907f15f89bcc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fcd05ccb332dd2f; op2val:0x4002438416c6ef58;
op3val:0x7fe0907f15f89bcc; valaddr_reg:x3; val_offset:990*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 990*FLEN/8, x4, x1, x2)

inst_331:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0xd05ccb332dd2f and fs2 == 0 and fe2 == 0x400 and fm2 == 0x2438416c6ef58 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x0907f15f89bcc and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fcd05ccb332dd2f; op2val:0x4002438416c6ef58;
op3val:0x7fe0907f15f89bcc; valaddr_reg:x3; val_offset:993*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 993*FLEN/8, x4, x1, x2)

inst_332:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0xd05ccb332dd2f and fs2 == 0 and fe2 == 0x400 and fm2 == 0x2438416c6ef58 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x0907f15f89bcc and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fcd05ccb332dd2f; op2val:0x4002438416c6ef58;
op3val:0x7fe0907f15f89bcc; valaddr_reg:x3; val_offset:996*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 996*FLEN/8, x4, x1, x2)

inst_333:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0xd05ccb332dd2f and fs2 == 0 and fe2 == 0x400 and fm2 == 0x2438416c6ef58 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x0907f15f89bcc and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fcd05ccb332dd2f; op2val:0x4002438416c6ef58;
op3val:0x7fe0907f15f89bcc; valaddr_reg:x3; val_offset:999*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 999*FLEN/8, x4, x1, x2)

inst_334:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0xd05ccb332dd2f and fs2 == 0 and fe2 == 0x400 and fm2 == 0x2438416c6ef58 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x0907f15f89bcc and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fcd05ccb332dd2f; op2val:0x4002438416c6ef58;
op3val:0x7fe0907f15f89bcc; valaddr_reg:x3; val_offset:1002*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1002*FLEN/8, x4, x1, x2)

inst_335:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0xdddf4f0316907 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x0a089784d8f3d and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xf09a11ea6145f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fcdddf4f0316907; op2val:0x4000a089784d8f3d;
op3val:0x7fdf09a11ea6145f; valaddr_reg:x3; val_offset:1005*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1005*FLEN/8, x4, x1, x2)

inst_336:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0xdddf4f0316907 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x0a089784d8f3d and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xf09a11ea6145f and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fcdddf4f0316907; op2val:0x4000a089784d8f3d;
op3val:0x7fdf09a11ea6145f; valaddr_reg:x3; val_offset:1008*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1008*FLEN/8, x4, x1, x2)

inst_337:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0xdddf4f0316907 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x0a089784d8f3d and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xf09a11ea6145f and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fcdddf4f0316907; op2val:0x4000a089784d8f3d;
op3val:0x7fdf09a11ea6145f; valaddr_reg:x3; val_offset:1011*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1011*FLEN/8, x4, x1, x2)

inst_338:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0xdddf4f0316907 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x0a089784d8f3d and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xf09a11ea6145f and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fcdddf4f0316907; op2val:0x4000a089784d8f3d;
op3val:0x7fdf09a11ea6145f; valaddr_reg:x3; val_offset:1014*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1014*FLEN/8, x4, x1, x2)

inst_339:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0xdddf4f0316907 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x0a089784d8f3d and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xf09a11ea6145f and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fcdddf4f0316907; op2val:0x4000a089784d8f3d;
op3val:0x7fdf09a11ea6145f; valaddr_reg:x3; val_offset:1017*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1017*FLEN/8, x4, x1, x2)

inst_340:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0xec9feac380847 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x3810ac8e0bd02 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x2c417e14dd023 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fcec9feac380847; op2val:0x4003810ac8e0bd02;
op3val:0x7fe2c417e14dd023; valaddr_reg:x3; val_offset:1020*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1020*FLEN/8, x4, x1, x2)

inst_341:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0xec9feac380847 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x3810ac8e0bd02 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x2c417e14dd023 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fcec9feac380847; op2val:0x4003810ac8e0bd02;
op3val:0x7fe2c417e14dd023; valaddr_reg:x3; val_offset:1023*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1023*FLEN/8, x4, x1, x2)

inst_342:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0xec9feac380847 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x3810ac8e0bd02 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x2c417e14dd023 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fcec9feac380847; op2val:0x4003810ac8e0bd02;
op3val:0x7fe2c417e14dd023; valaddr_reg:x3; val_offset:1026*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1026*FLEN/8, x4, x1, x2)

inst_343:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0xec9feac380847 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x3810ac8e0bd02 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x2c417e14dd023 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fcec9feac380847; op2val:0x4003810ac8e0bd02;
op3val:0x7fe2c417e14dd023; valaddr_reg:x3; val_offset:1029*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1029*FLEN/8, x4, x1, x2)

inst_344:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0xec9feac380847 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x3810ac8e0bd02 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x2c417e14dd023 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fcec9feac380847; op2val:0x4003810ac8e0bd02;
op3val:0x7fe2c417e14dd023; valaddr_reg:x3; val_offset:1032*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1032*FLEN/8, x4, x1, x2)

inst_345:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0xf3e8df14f472f and fs2 == 0 and fe2 == 0x400 and fm2 == 0x2d37c75ea8563 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x261add5337480 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fcf3e8df14f472f; op2val:0x4002d37c75ea8563;
op3val:0x7fe261add5337480; valaddr_reg:x3; val_offset:1035*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1035*FLEN/8, x4, x1, x2)

inst_346:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0xf3e8df14f472f and fs2 == 0 and fe2 == 0x400 and fm2 == 0x2d37c75ea8563 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x261add5337480 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fcf3e8df14f472f; op2val:0x4002d37c75ea8563;
op3val:0x7fe261add5337480; valaddr_reg:x3; val_offset:1038*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1038*FLEN/8, x4, x1, x2)

inst_347:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0xf3e8df14f472f and fs2 == 0 and fe2 == 0x400 and fm2 == 0x2d37c75ea8563 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x261add5337480 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fcf3e8df14f472f; op2val:0x4002d37c75ea8563;
op3val:0x7fe261add5337480; valaddr_reg:x3; val_offset:1041*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1041*FLEN/8, x4, x1, x2)

inst_348:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0xf3e8df14f472f and fs2 == 0 and fe2 == 0x400 and fm2 == 0x2d37c75ea8563 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x261add5337480 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fcf3e8df14f472f; op2val:0x4002d37c75ea8563;
op3val:0x7fe261add5337480; valaddr_reg:x3; val_offset:1044*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1044*FLEN/8, x4, x1, x2)

inst_349:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0xf3e8df14f472f and fs2 == 0 and fe2 == 0x400 and fm2 == 0x2d37c75ea8563 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x261add5337480 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fcf3e8df14f472f; op2val:0x4002d37c75ea8563;
op3val:0x7fe261add5337480; valaddr_reg:x3; val_offset:1047*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1047*FLEN/8, x4, x1, x2)

inst_350:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0xf4a05d08d17ff and fs2 == 0 and fe2 == 0x400 and fm2 == 0xf9a76c4edad95 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xee6bdff8790dd and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fcf4a05d08d17ff; op2val:0x400f9a76c4edad95;
op3val:0x7feee6bdff8790dd; valaddr_reg:x3; val_offset:1050*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1050*FLEN/8, x4, x1, x2)

inst_351:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0xf4a05d08d17ff and fs2 == 0 and fe2 == 0x400 and fm2 == 0xf9a76c4edad95 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xee6bdff8790dd and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fcf4a05d08d17ff; op2val:0x400f9a76c4edad95;
op3val:0x7feee6bdff8790dd; valaddr_reg:x3; val_offset:1053*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1053*FLEN/8, x4, x1, x2)

inst_352:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0xf4a05d08d17ff and fs2 == 0 and fe2 == 0x400 and fm2 == 0xf9a76c4edad95 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xee6bdff8790dd and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fcf4a05d08d17ff; op2val:0x400f9a76c4edad95;
op3val:0x7feee6bdff8790dd; valaddr_reg:x3; val_offset:1056*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1056*FLEN/8, x4, x1, x2)

inst_353:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0xf4a05d08d17ff and fs2 == 0 and fe2 == 0x400 and fm2 == 0xf9a76c4edad95 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xee6bdff8790dd and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fcf4a05d08d17ff; op2val:0x400f9a76c4edad95;
op3val:0x7feee6bdff8790dd; valaddr_reg:x3; val_offset:1059*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1059*FLEN/8, x4, x1, x2)

inst_354:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0xf4a05d08d17ff and fs2 == 0 and fe2 == 0x400 and fm2 == 0xf9a76c4edad95 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xee6bdff8790dd and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fcf4a05d08d17ff; op2val:0x400f9a76c4edad95;
op3val:0x7feee6bdff8790dd; valaddr_reg:x3; val_offset:1062*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1062*FLEN/8, x4, x1, x2)

inst_355:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0xfcea9730f9703 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x1d47ffdf2e702 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x1b90260566c5d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fcfcea9730f9703; op2val:0x3ff1d47ffdf2e702;
op3val:0x7fd1b90260566c5d; valaddr_reg:x3; val_offset:1065*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1065*FLEN/8, x4, x1, x2)

inst_356:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0xfcea9730f9703 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x1d47ffdf2e702 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x1b90260566c5d and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fcfcea9730f9703; op2val:0x3ff1d47ffdf2e702;
op3val:0x7fd1b90260566c5d; valaddr_reg:x3; val_offset:1068*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1068*FLEN/8, x4, x1, x2)

inst_357:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0xfcea9730f9703 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x1d47ffdf2e702 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x1b90260566c5d and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fcfcea9730f9703; op2val:0x3ff1d47ffdf2e702;
op3val:0x7fd1b90260566c5d; valaddr_reg:x3; val_offset:1071*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1071*FLEN/8, x4, x1, x2)

inst_358:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0xfcea9730f9703 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x1d47ffdf2e702 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x1b90260566c5d and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fcfcea9730f9703; op2val:0x3ff1d47ffdf2e702;
op3val:0x7fd1b90260566c5d; valaddr_reg:x3; val_offset:1074*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1074*FLEN/8, x4, x1, x2)

inst_359:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0xfcea9730f9703 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x1d47ffdf2e702 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x1b90260566c5d and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fcfcea9730f9703; op2val:0x3ff1d47ffdf2e702;
op3val:0x7fd1b90260566c5d; valaddr_reg:x3; val_offset:1077*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1077*FLEN/8, x4, x1, x2)

inst_360:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x0075a384bac19 and fs2 == 0 and fe2 == 0x3fa and fm2 == 0xf5f5e6496f287 and fs3 == 0 and fe3 == 0x7f8 and fm3 == 0xf6dc904b8153f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd0075a384bac19; op2val:0x3faf5f5e6496f287;
op3val:0x7f8f6dc904b8153f; valaddr_reg:x3; val_offset:1080*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1080*FLEN/8, x4, x1, x2)

inst_361:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x0075a384bac19 and fs2 == 0 and fe2 == 0x3fa and fm2 == 0xf5f5e6496f287 and fs3 == 0 and fe3 == 0x7f8 and fm3 == 0xf6dc904b8153f and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd0075a384bac19; op2val:0x3faf5f5e6496f287;
op3val:0x7f8f6dc904b8153f; valaddr_reg:x3; val_offset:1083*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1083*FLEN/8, x4, x1, x2)

inst_362:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x0075a384bac19 and fs2 == 0 and fe2 == 0x3fa and fm2 == 0xf5f5e6496f287 and fs3 == 0 and fe3 == 0x7f8 and fm3 == 0xf6dc904b8153f and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd0075a384bac19; op2val:0x3faf5f5e6496f287;
op3val:0x7f8f6dc904b8153f; valaddr_reg:x3; val_offset:1086*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1086*FLEN/8, x4, x1, x2)

inst_363:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x0075a384bac19 and fs2 == 0 and fe2 == 0x3fa and fm2 == 0xf5f5e6496f287 and fs3 == 0 and fe3 == 0x7f8 and fm3 == 0xf6dc904b8153f and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd0075a384bac19; op2val:0x3faf5f5e6496f287;
op3val:0x7f8f6dc904b8153f; valaddr_reg:x3; val_offset:1089*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1089*FLEN/8, x4, x1, x2)

inst_364:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x0075a384bac19 and fs2 == 0 and fe2 == 0x3fa and fm2 == 0xf5f5e6496f287 and fs3 == 0 and fe3 == 0x7f8 and fm3 == 0xf6dc904b8153f and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd0075a384bac19; op2val:0x3faf5f5e6496f287;
op3val:0x7f8f6dc904b8153f; valaddr_reg:x3; val_offset:1092*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1092*FLEN/8, x4, x1, x2)

inst_365:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x01e0fc1b3c5e3 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x29cfe82489e48 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x2bff73402612d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd01e0fc1b3c5e3; op2val:0x3ff29cfe82489e48;
op3val:0x7fd2bff73402612d; valaddr_reg:x3; val_offset:1095*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1095*FLEN/8, x4, x1, x2)

inst_366:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x01e0fc1b3c5e3 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x29cfe82489e48 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x2bff73402612d and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd01e0fc1b3c5e3; op2val:0x3ff29cfe82489e48;
op3val:0x7fd2bff73402612d; valaddr_reg:x3; val_offset:1098*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1098*FLEN/8, x4, x1, x2)

inst_367:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x01e0fc1b3c5e3 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x29cfe82489e48 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x2bff73402612d and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd01e0fc1b3c5e3; op2val:0x3ff29cfe82489e48;
op3val:0x7fd2bff73402612d; valaddr_reg:x3; val_offset:1101*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1101*FLEN/8, x4, x1, x2)

inst_368:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x01e0fc1b3c5e3 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x29cfe82489e48 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x2bff73402612d and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd01e0fc1b3c5e3; op2val:0x3ff29cfe82489e48;
op3val:0x7fd2bff73402612d; valaddr_reg:x3; val_offset:1104*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1104*FLEN/8, x4, x1, x2)

inst_369:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x01e0fc1b3c5e3 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x29cfe82489e48 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x2bff73402612d and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd01e0fc1b3c5e3; op2val:0x3ff29cfe82489e48;
op3val:0x7fd2bff73402612d; valaddr_reg:x3; val_offset:1107*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1107*FLEN/8, x4, x1, x2)

inst_370:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x024fdb7a4cc69 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x608b0699807b2 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x63ba15cd177bf and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd024fdb7a4cc69; op2val:0x3ff608b0699807b2;
op3val:0x7fd63ba15cd177bf; valaddr_reg:x3; val_offset:1110*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1110*FLEN/8, x4, x1, x2)

inst_371:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x024fdb7a4cc69 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x608b0699807b2 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x63ba15cd177bf and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd024fdb7a4cc69; op2val:0x3ff608b0699807b2;
op3val:0x7fd63ba15cd177bf; valaddr_reg:x3; val_offset:1113*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1113*FLEN/8, x4, x1, x2)

inst_372:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x024fdb7a4cc69 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x608b0699807b2 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x63ba15cd177bf and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd024fdb7a4cc69; op2val:0x3ff608b0699807b2;
op3val:0x7fd63ba15cd177bf; valaddr_reg:x3; val_offset:1116*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1116*FLEN/8, x4, x1, x2)

inst_373:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x024fdb7a4cc69 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x608b0699807b2 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x63ba15cd177bf and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd024fdb7a4cc69; op2val:0x3ff608b0699807b2;
op3val:0x7fd63ba15cd177bf; valaddr_reg:x3; val_offset:1119*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1119*FLEN/8, x4, x1, x2)

inst_374:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x024fdb7a4cc69 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x608b0699807b2 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x63ba15cd177bf and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd024fdb7a4cc69; op2val:0x3ff608b0699807b2;
op3val:0x7fd63ba15cd177bf; valaddr_reg:x3; val_offset:1122*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1122*FLEN/8, x4, x1, x2)

inst_375:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x05ba66b72282d and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x47030685b1521 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x4e54310e2ec3f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd05ba66b72282d; op2val:0x3fe47030685b1521;
op3val:0x7fc4e54310e2ec3f; valaddr_reg:x3; val_offset:1125*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1125*FLEN/8, x4, x1, x2)

inst_376:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x05ba66b72282d and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x47030685b1521 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x4e54310e2ec3f and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd05ba66b72282d; op2val:0x3fe47030685b1521;
op3val:0x7fc4e54310e2ec3f; valaddr_reg:x3; val_offset:1128*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1128*FLEN/8, x4, x1, x2)

inst_377:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x05ba66b72282d and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x47030685b1521 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x4e54310e2ec3f and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd05ba66b72282d; op2val:0x3fe47030685b1521;
op3val:0x7fc4e54310e2ec3f; valaddr_reg:x3; val_offset:1131*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1131*FLEN/8, x4, x1, x2)

inst_378:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x05ba66b72282d and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x47030685b1521 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x4e54310e2ec3f and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd05ba66b72282d; op2val:0x3fe47030685b1521;
op3val:0x7fc4e54310e2ec3f; valaddr_reg:x3; val_offset:1134*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1134*FLEN/8, x4, x1, x2)

inst_379:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x05ba66b72282d and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x47030685b1521 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x4e54310e2ec3f and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd05ba66b72282d; op2val:0x3fe47030685b1521;
op3val:0x7fc4e54310e2ec3f; valaddr_reg:x3; val_offset:1137*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1137*FLEN/8, x4, x1, x2)

inst_380:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x09650118c95b7 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x56051ce711386 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x62923c66ba98f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd09650118c95b7; op2val:0x40056051ce711386;
op3val:0x7fe62923c66ba98f; valaddr_reg:x3; val_offset:1140*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1140*FLEN/8, x4, x1, x2)

inst_381:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x09650118c95b7 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x56051ce711386 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x62923c66ba98f and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd09650118c95b7; op2val:0x40056051ce711386;
op3val:0x7fe62923c66ba98f; valaddr_reg:x3; val_offset:1143*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1143*FLEN/8, x4, x1, x2)

inst_382:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x09650118c95b7 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x56051ce711386 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x62923c66ba98f and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd09650118c95b7; op2val:0x40056051ce711386;
op3val:0x7fe62923c66ba98f; valaddr_reg:x3; val_offset:1146*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1146*FLEN/8, x4, x1, x2)

inst_383:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x09650118c95b7 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x56051ce711386 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x62923c66ba98f and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd09650118c95b7; op2val:0x40056051ce711386;
op3val:0x7fe62923c66ba98f; valaddr_reg:x3; val_offset:1149*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1149*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_4)

inst_384:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x09650118c95b7 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x56051ce711386 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x62923c66ba98f and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd09650118c95b7; op2val:0x40056051ce711386;
op3val:0x7fe62923c66ba98f; valaddr_reg:x3; val_offset:1152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1152*FLEN/8, x4, x1, x2)

inst_385:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x0996ecc5ad59d and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x9d939ce559199 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xad11a06ac6e6b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd0996ecc5ad59d; op2val:0x3ff9d939ce559199;
op3val:0x7fdad11a06ac6e6b; valaddr_reg:x3; val_offset:1155*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1155*FLEN/8, x4, x1, x2)

inst_386:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x0996ecc5ad59d and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x9d939ce559199 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xad11a06ac6e6b and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd0996ecc5ad59d; op2val:0x3ff9d939ce559199;
op3val:0x7fdad11a06ac6e6b; valaddr_reg:x3; val_offset:1158*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1158*FLEN/8, x4, x1, x2)

inst_387:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x0996ecc5ad59d and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x9d939ce559199 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xad11a06ac6e6b and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd0996ecc5ad59d; op2val:0x3ff9d939ce559199;
op3val:0x7fdad11a06ac6e6b; valaddr_reg:x3; val_offset:1161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1161*FLEN/8, x4, x1, x2)

inst_388:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x0996ecc5ad59d and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x9d939ce559199 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xad11a06ac6e6b and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd0996ecc5ad59d; op2val:0x3ff9d939ce559199;
op3val:0x7fdad11a06ac6e6b; valaddr_reg:x3; val_offset:1164*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1164*FLEN/8, x4, x1, x2)

inst_389:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x0996ecc5ad59d and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x9d939ce559199 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xad11a06ac6e6b and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd0996ecc5ad59d; op2val:0x3ff9d939ce559199;
op3val:0x7fdad11a06ac6e6b; valaddr_reg:x3; val_offset:1167*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1167*FLEN/8, x4, x1, x2)

inst_390:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x0b61c8425ad3f and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x6784267dd63bc and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x7780267441d0d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd0b61c8425ad3f; op2val:0x3ff6784267dd63bc;
op3val:0x7fd7780267441d0d; valaddr_reg:x3; val_offset:1170*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1170*FLEN/8, x4, x1, x2)

inst_391:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x0b61c8425ad3f and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x6784267dd63bc and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x7780267441d0d and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd0b61c8425ad3f; op2val:0x3ff6784267dd63bc;
op3val:0x7fd7780267441d0d; valaddr_reg:x3; val_offset:1173*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1173*FLEN/8, x4, x1, x2)

inst_392:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x0b61c8425ad3f and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x6784267dd63bc and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x7780267441d0d and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd0b61c8425ad3f; op2val:0x3ff6784267dd63bc;
op3val:0x7fd7780267441d0d; valaddr_reg:x3; val_offset:1176*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1176*FLEN/8, x4, x1, x2)

inst_393:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x0b61c8425ad3f and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x6784267dd63bc and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x7780267441d0d and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd0b61c8425ad3f; op2val:0x3ff6784267dd63bc;
op3val:0x7fd7780267441d0d; valaddr_reg:x3; val_offset:1179*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1179*FLEN/8, x4, x1, x2)

inst_394:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x0b61c8425ad3f and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x6784267dd63bc and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x7780267441d0d and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd0b61c8425ad3f; op2val:0x3ff6784267dd63bc;
op3val:0x7fd7780267441d0d; valaddr_reg:x3; val_offset:1182*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1182*FLEN/8, x4, x1, x2)

inst_395:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x0d8f972e9c2ef and fs2 == 0 and fe2 == 0x400 and fm2 == 0xd3a95f351ef8f and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xec6f48d50d204 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd0d8f972e9c2ef; op2val:0x400d3a95f351ef8f;
op3val:0x7feec6f48d50d204; valaddr_reg:x3; val_offset:1185*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1185*FLEN/8, x4, x1, x2)

inst_396:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x0d8f972e9c2ef and fs2 == 0 and fe2 == 0x400 and fm2 == 0xd3a95f351ef8f and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xec6f48d50d204 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd0d8f972e9c2ef; op2val:0x400d3a95f351ef8f;
op3val:0x7feec6f48d50d204; valaddr_reg:x3; val_offset:1188*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1188*FLEN/8, x4, x1, x2)

inst_397:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x0d8f972e9c2ef and fs2 == 0 and fe2 == 0x400 and fm2 == 0xd3a95f351ef8f and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xec6f48d50d204 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd0d8f972e9c2ef; op2val:0x400d3a95f351ef8f;
op3val:0x7feec6f48d50d204; valaddr_reg:x3; val_offset:1191*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1191*FLEN/8, x4, x1, x2)

inst_398:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x0d8f972e9c2ef and fs2 == 0 and fe2 == 0x400 and fm2 == 0xd3a95f351ef8f and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xec6f48d50d204 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd0d8f972e9c2ef; op2val:0x400d3a95f351ef8f;
op3val:0x7feec6f48d50d204; valaddr_reg:x3; val_offset:1194*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1194*FLEN/8, x4, x1, x2)

inst_399:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x0d8f972e9c2ef and fs2 == 0 and fe2 == 0x400 and fm2 == 0xd3a95f351ef8f and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xec6f48d50d204 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd0d8f972e9c2ef; op2val:0x400d3a95f351ef8f;
op3val:0x7feec6f48d50d204; valaddr_reg:x3; val_offset:1197*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1197*FLEN/8, x4, x1, x2)

inst_400:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x1249d34f93fa7 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xee03537e23353 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x08a7030b0f86f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd1249d34f93fa7; op2val:0x3fdee03537e23353;
op3val:0x7fc08a7030b0f86f; valaddr_reg:x3; val_offset:1200*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1200*FLEN/8, x4, x1, x2)

inst_401:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x1249d34f93fa7 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xee03537e23353 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x08a7030b0f86f and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd1249d34f93fa7; op2val:0x3fdee03537e23353;
op3val:0x7fc08a7030b0f86f; valaddr_reg:x3; val_offset:1203*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1203*FLEN/8, x4, x1, x2)

inst_402:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x1249d34f93fa7 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xee03537e23353 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x08a7030b0f86f and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd1249d34f93fa7; op2val:0x3fdee03537e23353;
op3val:0x7fc08a7030b0f86f; valaddr_reg:x3; val_offset:1206*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1206*FLEN/8, x4, x1, x2)

inst_403:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x1249d34f93fa7 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xee03537e23353 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x08a7030b0f86f and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd1249d34f93fa7; op2val:0x3fdee03537e23353;
op3val:0x7fc08a7030b0f86f; valaddr_reg:x3; val_offset:1209*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1209*FLEN/8, x4, x1, x2)

inst_404:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x1249d34f93fa7 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xee03537e23353 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x08a7030b0f86f and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd1249d34f93fa7; op2val:0x3fdee03537e23353;
op3val:0x7fc08a7030b0f86f; valaddr_reg:x3; val_offset:1212*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1212*FLEN/8, x4, x1, x2)

inst_405:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x14efd260bd491 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xea8a7d6d20de8 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x09546cd1dcec3 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd14efd260bd491; op2val:0x3fdea8a7d6d20de8;
op3val:0x7fc09546cd1dcec3; valaddr_reg:x3; val_offset:1215*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1215*FLEN/8, x4, x1, x2)

inst_406:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x14efd260bd491 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xea8a7d6d20de8 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x09546cd1dcec3 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd14efd260bd491; op2val:0x3fdea8a7d6d20de8;
op3val:0x7fc09546cd1dcec3; valaddr_reg:x3; val_offset:1218*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1218*FLEN/8, x4, x1, x2)

inst_407:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x14efd260bd491 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xea8a7d6d20de8 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x09546cd1dcec3 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd14efd260bd491; op2val:0x3fdea8a7d6d20de8;
op3val:0x7fc09546cd1dcec3; valaddr_reg:x3; val_offset:1221*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1221*FLEN/8, x4, x1, x2)

inst_408:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x14efd260bd491 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xea8a7d6d20de8 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x09546cd1dcec3 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd14efd260bd491; op2val:0x3fdea8a7d6d20de8;
op3val:0x7fc09546cd1dcec3; valaddr_reg:x3; val_offset:1224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1224*FLEN/8, x4, x1, x2)

inst_409:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x14efd260bd491 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xea8a7d6d20de8 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x09546cd1dcec3 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd14efd260bd491; op2val:0x3fdea8a7d6d20de8;
op3val:0x7fc09546cd1dcec3; valaddr_reg:x3; val_offset:1227*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1227*FLEN/8, x4, x1, x2)

inst_410:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x1d1a695a6b34f and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x7dda5bc613ddb and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xa9437d7e448d9 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd1d1a695a6b34f; op2val:0x3ff7dda5bc613ddb;
op3val:0x7fda9437d7e448d9; valaddr_reg:x3; val_offset:1230*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1230*FLEN/8, x4, x1, x2)

inst_411:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x1d1a695a6b34f and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x7dda5bc613ddb and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xa9437d7e448d9 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd1d1a695a6b34f; op2val:0x3ff7dda5bc613ddb;
op3val:0x7fda9437d7e448d9; valaddr_reg:x3; val_offset:1233*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1233*FLEN/8, x4, x1, x2)

inst_412:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x1d1a695a6b34f and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x7dda5bc613ddb and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xa9437d7e448d9 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd1d1a695a6b34f; op2val:0x3ff7dda5bc613ddb;
op3val:0x7fda9437d7e448d9; valaddr_reg:x3; val_offset:1236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1236*FLEN/8, x4, x1, x2)

inst_413:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x1d1a695a6b34f and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x7dda5bc613ddb and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xa9437d7e448d9 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd1d1a695a6b34f; op2val:0x3ff7dda5bc613ddb;
op3val:0x7fda9437d7e448d9; valaddr_reg:x3; val_offset:1239*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1239*FLEN/8, x4, x1, x2)

inst_414:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x1d1a695a6b34f and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x7dda5bc613ddb and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xa9437d7e448d9 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd1d1a695a6b34f; op2val:0x3ff7dda5bc613ddb;
op3val:0x7fda9437d7e448d9; valaddr_reg:x3; val_offset:1242*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1242*FLEN/8, x4, x1, x2)

inst_415:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x20b31e4ca4c55 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xb7ddd6aeb162b and fs3 == 0 and fe3 == 0x7fc and fm3 == 0xf00d55b153d67 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd20b31e4ca4c55; op2val:0x3feb7ddd6aeb162b;
op3val:0x7fcf00d55b153d67; valaddr_reg:x3; val_offset:1245*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1245*FLEN/8, x4, x1, x2)

inst_416:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x20b31e4ca4c55 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xb7ddd6aeb162b and fs3 == 0 and fe3 == 0x7fc and fm3 == 0xf00d55b153d67 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd20b31e4ca4c55; op2val:0x3feb7ddd6aeb162b;
op3val:0x7fcf00d55b153d67; valaddr_reg:x3; val_offset:1248*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1248*FLEN/8, x4, x1, x2)

inst_417:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x20b31e4ca4c55 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xb7ddd6aeb162b and fs3 == 0 and fe3 == 0x7fc and fm3 == 0xf00d55b153d67 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd20b31e4ca4c55; op2val:0x3feb7ddd6aeb162b;
op3val:0x7fcf00d55b153d67; valaddr_reg:x3; val_offset:1251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1251*FLEN/8, x4, x1, x2)

inst_418:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x20b31e4ca4c55 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xb7ddd6aeb162b and fs3 == 0 and fe3 == 0x7fc and fm3 == 0xf00d55b153d67 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd20b31e4ca4c55; op2val:0x3feb7ddd6aeb162b;
op3val:0x7fcf00d55b153d67; valaddr_reg:x3; val_offset:1254*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1254*FLEN/8, x4, x1, x2)

inst_419:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x20b31e4ca4c55 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xb7ddd6aeb162b and fs3 == 0 and fe3 == 0x7fc and fm3 == 0xf00d55b153d67 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd20b31e4ca4c55; op2val:0x3feb7ddd6aeb162b;
op3val:0x7fcf00d55b153d67; valaddr_reg:x3; val_offset:1257*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1257*FLEN/8, x4, x1, x2)

inst_420:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x2c178685ca577 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x915a69047262e and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xd67ad517b99d7 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd2c178685ca577; op2val:0x3ff915a69047262e;
op3val:0x7fdd67ad517b99d7; valaddr_reg:x3; val_offset:1260*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1260*FLEN/8, x4, x1, x2)

inst_421:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x2c178685ca577 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x915a69047262e and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xd67ad517b99d7 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd2c178685ca577; op2val:0x3ff915a69047262e;
op3val:0x7fdd67ad517b99d7; valaddr_reg:x3; val_offset:1263*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1263*FLEN/8, x4, x1, x2)

inst_422:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x2c178685ca577 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x915a69047262e and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xd67ad517b99d7 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd2c178685ca577; op2val:0x3ff915a69047262e;
op3val:0x7fdd67ad517b99d7; valaddr_reg:x3; val_offset:1266*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1266*FLEN/8, x4, x1, x2)

inst_423:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x2c178685ca577 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x915a69047262e and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xd67ad517b99d7 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd2c178685ca577; op2val:0x3ff915a69047262e;
op3val:0x7fdd67ad517b99d7; valaddr_reg:x3; val_offset:1269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1269*FLEN/8, x4, x1, x2)

inst_424:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x2c178685ca577 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x915a69047262e and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xd67ad517b99d7 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd2c178685ca577; op2val:0x3ff915a69047262e;
op3val:0x7fdd67ad517b99d7; valaddr_reg:x3; val_offset:1272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1272*FLEN/8, x4, x1, x2)

inst_425:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x378be2d09905b and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x87c8ff0970ad9 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0xdccb4315a0a87 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd378be2d09905b; op2val:0x3fe87c8ff0970ad9;
op3val:0x7fcdccb4315a0a87; valaddr_reg:x3; val_offset:1275*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1275*FLEN/8, x4, x1, x2)

inst_426:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x378be2d09905b and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x87c8ff0970ad9 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0xdccb4315a0a87 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd378be2d09905b; op2val:0x3fe87c8ff0970ad9;
op3val:0x7fcdccb4315a0a87; valaddr_reg:x3; val_offset:1278*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1278*FLEN/8, x4, x1, x2)

inst_427:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x378be2d09905b and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x87c8ff0970ad9 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0xdccb4315a0a87 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd378be2d09905b; op2val:0x3fe87c8ff0970ad9;
op3val:0x7fcdccb4315a0a87; valaddr_reg:x3; val_offset:1281*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1281*FLEN/8, x4, x1, x2)

inst_428:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x378be2d09905b and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x87c8ff0970ad9 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0xdccb4315a0a87 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd378be2d09905b; op2val:0x3fe87c8ff0970ad9;
op3val:0x7fcdccb4315a0a87; valaddr_reg:x3; val_offset:1284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1284*FLEN/8, x4, x1, x2)

inst_429:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x378be2d09905b and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x87c8ff0970ad9 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0xdccb4315a0a87 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd378be2d09905b; op2val:0x3fe87c8ff0970ad9;
op3val:0x7fcdccb4315a0a87; valaddr_reg:x3; val_offset:1287*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1287*FLEN/8, x4, x1, x2)

inst_430:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x3be2a8c7b6829 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x52a3bf7842274 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xa1db506ba5ee9 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd3be2a8c7b6829; op2val:0x40052a3bf7842274;
op3val:0x7fea1db506ba5ee9; valaddr_reg:x3; val_offset:1290*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1290*FLEN/8, x4, x1, x2)

inst_431:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x3be2a8c7b6829 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x52a3bf7842274 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xa1db506ba5ee9 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd3be2a8c7b6829; op2val:0x40052a3bf7842274;
op3val:0x7fea1db506ba5ee9; valaddr_reg:x3; val_offset:1293*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1293*FLEN/8, x4, x1, x2)

inst_432:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x3be2a8c7b6829 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x52a3bf7842274 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xa1db506ba5ee9 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd3be2a8c7b6829; op2val:0x40052a3bf7842274;
op3val:0x7fea1db506ba5ee9; valaddr_reg:x3; val_offset:1296*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1296*FLEN/8, x4, x1, x2)

inst_433:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x3be2a8c7b6829 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x52a3bf7842274 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xa1db506ba5ee9 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd3be2a8c7b6829; op2val:0x40052a3bf7842274;
op3val:0x7fea1db506ba5ee9; valaddr_reg:x3; val_offset:1299*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1299*FLEN/8, x4, x1, x2)

inst_434:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x3be2a8c7b6829 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x52a3bf7842274 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xa1db506ba5ee9 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd3be2a8c7b6829; op2val:0x40052a3bf7842274;
op3val:0x7fea1db506ba5ee9; valaddr_reg:x3; val_offset:1302*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1302*FLEN/8, x4, x1, x2)

inst_435:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x3cfa211be3073 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x26e63c71e4bb3 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x6d2455976b29f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd3cfa211be3073; op2val:0x3ff26e63c71e4bb3;
op3val:0x7fd6d2455976b29f; valaddr_reg:x3; val_offset:1305*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1305*FLEN/8, x4, x1, x2)

inst_436:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x3cfa211be3073 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x26e63c71e4bb3 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x6d2455976b29f and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd3cfa211be3073; op2val:0x3ff26e63c71e4bb3;
op3val:0x7fd6d2455976b29f; valaddr_reg:x3; val_offset:1308*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1308*FLEN/8, x4, x1, x2)

inst_437:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x3cfa211be3073 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x26e63c71e4bb3 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x6d2455976b29f and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd3cfa211be3073; op2val:0x3ff26e63c71e4bb3;
op3val:0x7fd6d2455976b29f; valaddr_reg:x3; val_offset:1311*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1311*FLEN/8, x4, x1, x2)

inst_438:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x3cfa211be3073 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x26e63c71e4bb3 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x6d2455976b29f and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd3cfa211be3073; op2val:0x3ff26e63c71e4bb3;
op3val:0x7fd6d2455976b29f; valaddr_reg:x3; val_offset:1314*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1314*FLEN/8, x4, x1, x2)

inst_439:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x3cfa211be3073 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x26e63c71e4bb3 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x6d2455976b29f and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd3cfa211be3073; op2val:0x3ff26e63c71e4bb3;
op3val:0x7fd6d2455976b29f; valaddr_reg:x3; val_offset:1317*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1317*FLEN/8, x4, x1, x2)

inst_440:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x3f7aefd0784b5 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xf488ab585c398 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x385355c3fa9ed and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd3f7aefd0784b5; op2val:0x3fef488ab585c398;
op3val:0x7fd385355c3fa9ed; valaddr_reg:x3; val_offset:1320*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1320*FLEN/8, x4, x1, x2)

inst_441:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x3f7aefd0784b5 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xf488ab585c398 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x385355c3fa9ed and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd3f7aefd0784b5; op2val:0x3fef488ab585c398;
op3val:0x7fd385355c3fa9ed; valaddr_reg:x3; val_offset:1323*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1323*FLEN/8, x4, x1, x2)

inst_442:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x3f7aefd0784b5 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xf488ab585c398 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x385355c3fa9ed and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd3f7aefd0784b5; op2val:0x3fef488ab585c398;
op3val:0x7fd385355c3fa9ed; valaddr_reg:x3; val_offset:1326*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1326*FLEN/8, x4, x1, x2)

inst_443:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x3f7aefd0784b5 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xf488ab585c398 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x385355c3fa9ed and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd3f7aefd0784b5; op2val:0x3fef488ab585c398;
op3val:0x7fd385355c3fa9ed; valaddr_reg:x3; val_offset:1329*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1329*FLEN/8, x4, x1, x2)

inst_444:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x3f7aefd0784b5 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xf488ab585c398 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x385355c3fa9ed and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd3f7aefd0784b5; op2val:0x3fef488ab585c398;
op3val:0x7fd385355c3fa9ed; valaddr_reg:x3; val_offset:1332*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1332*FLEN/8, x4, x1, x2)

inst_445:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x41afcbbb98d77 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xdd2d56b3ae715 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x2bcec3bb19a9d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd41afcbbb98d77; op2val:0x3ffdd2d56b3ae715;
op3val:0x7fe2bcec3bb19a9d; valaddr_reg:x3; val_offset:1335*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1335*FLEN/8, x4, x1, x2)

inst_446:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x41afcbbb98d77 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xdd2d56b3ae715 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x2bcec3bb19a9d and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd41afcbbb98d77; op2val:0x3ffdd2d56b3ae715;
op3val:0x7fe2bcec3bb19a9d; valaddr_reg:x3; val_offset:1338*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1338*FLEN/8, x4, x1, x2)

inst_447:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x41afcbbb98d77 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xdd2d56b3ae715 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x2bcec3bb19a9d and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd41afcbbb98d77; op2val:0x3ffdd2d56b3ae715;
op3val:0x7fe2bcec3bb19a9d; valaddr_reg:x3; val_offset:1341*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1341*FLEN/8, x4, x1, x2)

inst_448:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x41afcbbb98d77 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xdd2d56b3ae715 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x2bcec3bb19a9d and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd41afcbbb98d77; op2val:0x3ffdd2d56b3ae715;
op3val:0x7fe2bcec3bb19a9d; valaddr_reg:x3; val_offset:1344*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1344*FLEN/8, x4, x1, x2)

inst_449:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x41afcbbb98d77 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xdd2d56b3ae715 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x2bcec3bb19a9d and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd41afcbbb98d77; op2val:0x3ffdd2d56b3ae715;
op3val:0x7fe2bcec3bb19a9d; valaddr_reg:x3; val_offset:1347*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1347*FLEN/8, x4, x1, x2)

inst_450:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x4b9ad0f953a6d and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xdd010c341e476 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x34f069651326f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd4b9ad0f953a6d; op2val:0x3fddd010c341e476;
op3val:0x7fc34f069651326f; valaddr_reg:x3; val_offset:1350*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1350*FLEN/8, x4, x1, x2)

inst_451:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x4b9ad0f953a6d and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xdd010c341e476 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x34f069651326f and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd4b9ad0f953a6d; op2val:0x3fddd010c341e476;
op3val:0x7fc34f069651326f; valaddr_reg:x3; val_offset:1353*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1353*FLEN/8, x4, x1, x2)

inst_452:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x4b9ad0f953a6d and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xdd010c341e476 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x34f069651326f and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd4b9ad0f953a6d; op2val:0x3fddd010c341e476;
op3val:0x7fc34f069651326f; valaddr_reg:x3; val_offset:1356*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1356*FLEN/8, x4, x1, x2)

inst_453:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x4b9ad0f953a6d and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xdd010c341e476 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x34f069651326f and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd4b9ad0f953a6d; op2val:0x3fddd010c341e476;
op3val:0x7fc34f069651326f; valaddr_reg:x3; val_offset:1359*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1359*FLEN/8, x4, x1, x2)

inst_454:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x4b9ad0f953a6d and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xdd010c341e476 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x34f069651326f and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd4b9ad0f953a6d; op2val:0x3fddd010c341e476;
op3val:0x7fc34f069651326f; valaddr_reg:x3; val_offset:1362*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1362*FLEN/8, x4, x1, x2)

inst_455:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x4dce43d756a23 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x9711b27824018 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x096500a1f76b9 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd4dce43d756a23; op2val:0x3ff9711b27824018;
op3val:0x7fe096500a1f76b9; valaddr_reg:x3; val_offset:1365*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1365*FLEN/8, x4, x1, x2)

inst_456:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x4dce43d756a23 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x9711b27824018 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x096500a1f76b9 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd4dce43d756a23; op2val:0x3ff9711b27824018;
op3val:0x7fe096500a1f76b9; valaddr_reg:x3; val_offset:1368*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1368*FLEN/8, x4, x1, x2)

inst_457:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x4dce43d756a23 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x9711b27824018 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x096500a1f76b9 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd4dce43d756a23; op2val:0x3ff9711b27824018;
op3val:0x7fe096500a1f76b9; valaddr_reg:x3; val_offset:1371*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1371*FLEN/8, x4, x1, x2)

inst_458:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x4dce43d756a23 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x9711b27824018 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x096500a1f76b9 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd4dce43d756a23; op2val:0x3ff9711b27824018;
op3val:0x7fe096500a1f76b9; valaddr_reg:x3; val_offset:1374*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1374*FLEN/8, x4, x1, x2)

inst_459:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x4dce43d756a23 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x9711b27824018 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x096500a1f76b9 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd4dce43d756a23; op2val:0x3ff9711b27824018;
op3val:0x7fe096500a1f76b9; valaddr_reg:x3; val_offset:1377*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1377*FLEN/8, x4, x1, x2)

inst_460:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x5193b35176edb and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x5a6779344470f and fs3 == 0 and fe3 == 0x7fc and fm3 == 0xc8ca129cfc863 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd5193b35176edb; op2val:0x3fe5a6779344470f;
op3val:0x7fcc8ca129cfc863; valaddr_reg:x3; val_offset:1380*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1380*FLEN/8, x4, x1, x2)

inst_461:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x5193b35176edb and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x5a6779344470f and fs3 == 0 and fe3 == 0x7fc and fm3 == 0xc8ca129cfc863 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd5193b35176edb; op2val:0x3fe5a6779344470f;
op3val:0x7fcc8ca129cfc863; valaddr_reg:x3; val_offset:1383*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1383*FLEN/8, x4, x1, x2)

inst_462:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x5193b35176edb and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x5a6779344470f and fs3 == 0 and fe3 == 0x7fc and fm3 == 0xc8ca129cfc863 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd5193b35176edb; op2val:0x3fe5a6779344470f;
op3val:0x7fcc8ca129cfc863; valaddr_reg:x3; val_offset:1386*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1386*FLEN/8, x4, x1, x2)

inst_463:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x5193b35176edb and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x5a6779344470f and fs3 == 0 and fe3 == 0x7fc and fm3 == 0xc8ca129cfc863 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd5193b35176edb; op2val:0x3fe5a6779344470f;
op3val:0x7fcc8ca129cfc863; valaddr_reg:x3; val_offset:1389*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1389*FLEN/8, x4, x1, x2)

inst_464:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x5193b35176edb and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x5a6779344470f and fs3 == 0 and fe3 == 0x7fc and fm3 == 0xc8ca129cfc863 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd5193b35176edb; op2val:0x3fe5a6779344470f;
op3val:0x7fcc8ca129cfc863; valaddr_reg:x3; val_offset:1392*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1392*FLEN/8, x4, x1, x2)

inst_465:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x547f638b1a9e7 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x344561a7bbaf9 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x9a058bfc8df90 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd547f638b1a9e7; op2val:0x400344561a7bbaf9;
op3val:0x7fe9a058bfc8df90; valaddr_reg:x3; val_offset:1395*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1395*FLEN/8, x4, x1, x2)

inst_466:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x547f638b1a9e7 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x344561a7bbaf9 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x9a058bfc8df90 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd547f638b1a9e7; op2val:0x400344561a7bbaf9;
op3val:0x7fe9a058bfc8df90; valaddr_reg:x3; val_offset:1398*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1398*FLEN/8, x4, x1, x2)

inst_467:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x547f638b1a9e7 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x344561a7bbaf9 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x9a058bfc8df90 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd547f638b1a9e7; op2val:0x400344561a7bbaf9;
op3val:0x7fe9a058bfc8df90; valaddr_reg:x3; val_offset:1401*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1401*FLEN/8, x4, x1, x2)

inst_468:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x547f638b1a9e7 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x344561a7bbaf9 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x9a058bfc8df90 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd547f638b1a9e7; op2val:0x400344561a7bbaf9;
op3val:0x7fe9a058bfc8df90; valaddr_reg:x3; val_offset:1404*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1404*FLEN/8, x4, x1, x2)

inst_469:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x547f638b1a9e7 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x344561a7bbaf9 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x9a058bfc8df90 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd547f638b1a9e7; op2val:0x400344561a7bbaf9;
op3val:0x7fe9a058bfc8df90; valaddr_reg:x3; val_offset:1407*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1407*FLEN/8, x4, x1, x2)

inst_470:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x5c37064ce4a17 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x3ca406e5d0503 and fs3 == 0 and fe3 == 0x7fa and fm3 == 0xaeb30868d631f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd5c37064ce4a17; op2val:0x3fc3ca406e5d0503;
op3val:0x7faaeb30868d631f; valaddr_reg:x3; val_offset:1410*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1410*FLEN/8, x4, x1, x2)

inst_471:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x5c37064ce4a17 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x3ca406e5d0503 and fs3 == 0 and fe3 == 0x7fa and fm3 == 0xaeb30868d631f and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd5c37064ce4a17; op2val:0x3fc3ca406e5d0503;
op3val:0x7faaeb30868d631f; valaddr_reg:x3; val_offset:1413*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1413*FLEN/8, x4, x1, x2)

inst_472:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x5c37064ce4a17 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x3ca406e5d0503 and fs3 == 0 and fe3 == 0x7fa and fm3 == 0xaeb30868d631f and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd5c37064ce4a17; op2val:0x3fc3ca406e5d0503;
op3val:0x7faaeb30868d631f; valaddr_reg:x3; val_offset:1416*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1416*FLEN/8, x4, x1, x2)

inst_473:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x5c37064ce4a17 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x3ca406e5d0503 and fs3 == 0 and fe3 == 0x7fa and fm3 == 0xaeb30868d631f and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd5c37064ce4a17; op2val:0x3fc3ca406e5d0503;
op3val:0x7faaeb30868d631f; valaddr_reg:x3; val_offset:1419*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1419*FLEN/8, x4, x1, x2)

inst_474:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x5c37064ce4a17 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x3ca406e5d0503 and fs3 == 0 and fe3 == 0x7fa and fm3 == 0xaeb30868d631f and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd5c37064ce4a17; op2val:0x3fc3ca406e5d0503;
op3val:0x7faaeb30868d631f; valaddr_reg:x3; val_offset:1422*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1422*FLEN/8, x4, x1, x2)

inst_475:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x5edbeddec3d41 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x8ba02b0bd188e and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x0f1c6e3d437bb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd5edbeddec3d41; op2val:0x3fe8ba02b0bd188e;
op3val:0x7fd0f1c6e3d437bb; valaddr_reg:x3; val_offset:1425*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1425*FLEN/8, x4, x1, x2)

inst_476:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x5edbeddec3d41 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x8ba02b0bd188e and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x0f1c6e3d437bb and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd5edbeddec3d41; op2val:0x3fe8ba02b0bd188e;
op3val:0x7fd0f1c6e3d437bb; valaddr_reg:x3; val_offset:1428*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1428*FLEN/8, x4, x1, x2)

inst_477:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x5edbeddec3d41 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x8ba02b0bd188e and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x0f1c6e3d437bb and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd5edbeddec3d41; op2val:0x3fe8ba02b0bd188e;
op3val:0x7fd0f1c6e3d437bb; valaddr_reg:x3; val_offset:1431*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1431*FLEN/8, x4, x1, x2)

inst_478:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x5edbeddec3d41 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x8ba02b0bd188e and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x0f1c6e3d437bb and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd5edbeddec3d41; op2val:0x3fe8ba02b0bd188e;
op3val:0x7fd0f1c6e3d437bb; valaddr_reg:x3; val_offset:1434*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1434*FLEN/8, x4, x1, x2)

inst_479:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x5edbeddec3d41 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x8ba02b0bd188e and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x0f1c6e3d437bb and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd5edbeddec3d41; op2val:0x3fe8ba02b0bd188e;
op3val:0x7fd0f1c6e3d437bb; valaddr_reg:x3; val_offset:1437*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1437*FLEN/8, x4, x1, x2)

inst_480:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x5eedf6196c86d and fs2 == 0 and fe2 == 0x400 and fm2 == 0x36dbccb9a7fa5 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xaa21763871829 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd5eedf6196c86d; op2val:0x40036dbccb9a7fa5;
op3val:0x7feaa21763871829; valaddr_reg:x3; val_offset:1440*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1440*FLEN/8, x4, x1, x2)

inst_481:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x5eedf6196c86d and fs2 == 0 and fe2 == 0x400 and fm2 == 0x36dbccb9a7fa5 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xaa21763871829 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd5eedf6196c86d; op2val:0x40036dbccb9a7fa5;
op3val:0x7feaa21763871829; valaddr_reg:x3; val_offset:1443*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1443*FLEN/8, x4, x1, x2)

inst_482:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x5eedf6196c86d and fs2 == 0 and fe2 == 0x400 and fm2 == 0x36dbccb9a7fa5 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xaa21763871829 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd5eedf6196c86d; op2val:0x40036dbccb9a7fa5;
op3val:0x7feaa21763871829; valaddr_reg:x3; val_offset:1446*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1446*FLEN/8, x4, x1, x2)

inst_483:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x5eedf6196c86d and fs2 == 0 and fe2 == 0x400 and fm2 == 0x36dbccb9a7fa5 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xaa21763871829 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd5eedf6196c86d; op2val:0x40036dbccb9a7fa5;
op3val:0x7feaa21763871829; valaddr_reg:x3; val_offset:1449*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1449*FLEN/8, x4, x1, x2)

inst_484:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x5eedf6196c86d and fs2 == 0 and fe2 == 0x400 and fm2 == 0x36dbccb9a7fa5 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xaa21763871829 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd5eedf6196c86d; op2val:0x40036dbccb9a7fa5;
op3val:0x7feaa21763871829; valaddr_reg:x3; val_offset:1452*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1452*FLEN/8, x4, x1, x2)

inst_485:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x63543c66def39 and fs2 == 0 and fe2 == 0x3fa and fm2 == 0xaccb6ce241fe2 and fs3 == 0 and fe3 == 0x7f9 and fm3 == 0x299597f4bbe1f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd63543c66def39; op2val:0x3faaccb6ce241fe2;
op3val:0x7f9299597f4bbe1f; valaddr_reg:x3; val_offset:1455*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1455*FLEN/8, x4, x1, x2)

inst_486:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x63543c66def39 and fs2 == 0 and fe2 == 0x3fa and fm2 == 0xaccb6ce241fe2 and fs3 == 0 and fe3 == 0x7f9 and fm3 == 0x299597f4bbe1f and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd63543c66def39; op2val:0x3faaccb6ce241fe2;
op3val:0x7f9299597f4bbe1f; valaddr_reg:x3; val_offset:1458*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1458*FLEN/8, x4, x1, x2)

inst_487:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x63543c66def39 and fs2 == 0 and fe2 == 0x3fa and fm2 == 0xaccb6ce241fe2 and fs3 == 0 and fe3 == 0x7f9 and fm3 == 0x299597f4bbe1f and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd63543c66def39; op2val:0x3faaccb6ce241fe2;
op3val:0x7f9299597f4bbe1f; valaddr_reg:x3; val_offset:1461*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1461*FLEN/8, x4, x1, x2)

inst_488:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x63543c66def39 and fs2 == 0 and fe2 == 0x3fa and fm2 == 0xaccb6ce241fe2 and fs3 == 0 and fe3 == 0x7f9 and fm3 == 0x299597f4bbe1f and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd63543c66def39; op2val:0x3faaccb6ce241fe2;
op3val:0x7f9299597f4bbe1f; valaddr_reg:x3; val_offset:1464*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1464*FLEN/8, x4, x1, x2)

inst_489:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x63543c66def39 and fs2 == 0 and fe2 == 0x3fa and fm2 == 0xaccb6ce241fe2 and fs3 == 0 and fe3 == 0x7f9 and fm3 == 0x299597f4bbe1f and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd63543c66def39; op2val:0x3faaccb6ce241fe2;
op3val:0x7f9299597f4bbe1f; valaddr_reg:x3; val_offset:1467*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1467*FLEN/8, x4, x1, x2)

inst_490:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x66d13a13f4f01 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x90d6c3ef0fe00 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x18e9f823171c4 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd66d13a13f4f01; op2val:0x3ff90d6c3ef0fe00;
op3val:0x7fe18e9f823171c4; valaddr_reg:x3; val_offset:1470*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1470*FLEN/8, x4, x1, x2)

inst_491:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x66d13a13f4f01 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x90d6c3ef0fe00 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x18e9f823171c4 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd66d13a13f4f01; op2val:0x3ff90d6c3ef0fe00;
op3val:0x7fe18e9f823171c4; valaddr_reg:x3; val_offset:1473*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1473*FLEN/8, x4, x1, x2)

inst_492:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x66d13a13f4f01 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x90d6c3ef0fe00 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x18e9f823171c4 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd66d13a13f4f01; op2val:0x3ff90d6c3ef0fe00;
op3val:0x7fe18e9f823171c4; valaddr_reg:x3; val_offset:1476*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1476*FLEN/8, x4, x1, x2)

inst_493:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x66d13a13f4f01 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x90d6c3ef0fe00 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x18e9f823171c4 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd66d13a13f4f01; op2val:0x3ff90d6c3ef0fe00;
op3val:0x7fe18e9f823171c4; valaddr_reg:x3; val_offset:1479*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1479*FLEN/8, x4, x1, x2)

inst_494:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x66d13a13f4f01 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x90d6c3ef0fe00 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x18e9f823171c4 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd66d13a13f4f01; op2val:0x3ff90d6c3ef0fe00;
op3val:0x7fe18e9f823171c4; valaddr_reg:x3; val_offset:1482*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1482*FLEN/8, x4, x1, x2)

inst_495:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x6a465bf2e7f6d and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x4b8718f931656 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xd5282754cbf99 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd6a465bf2e7f6d; op2val:0x3ff4b8718f931656;
op3val:0x7fdd5282754cbf99; valaddr_reg:x3; val_offset:1485*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1485*FLEN/8, x4, x1, x2)

inst_496:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x6a465bf2e7f6d and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x4b8718f931656 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xd5282754cbf99 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd6a465bf2e7f6d; op2val:0x3ff4b8718f931656;
op3val:0x7fdd5282754cbf99; valaddr_reg:x3; val_offset:1488*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1488*FLEN/8, x4, x1, x2)

inst_497:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x6a465bf2e7f6d and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x4b8718f931656 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xd5282754cbf99 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd6a465bf2e7f6d; op2val:0x3ff4b8718f931656;
op3val:0x7fdd5282754cbf99; valaddr_reg:x3; val_offset:1491*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1491*FLEN/8, x4, x1, x2)

inst_498:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x6a465bf2e7f6d and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x4b8718f931656 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xd5282754cbf99 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd6a465bf2e7f6d; op2val:0x3ff4b8718f931656;
op3val:0x7fdd5282754cbf99; valaddr_reg:x3; val_offset:1494*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1494*FLEN/8, x4, x1, x2)

inst_499:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x6a465bf2e7f6d and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x4b8718f931656 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xd5282754cbf99 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd6a465bf2e7f6d; op2val:0x3ff4b8718f931656;
op3val:0x7fdd5282754cbf99; valaddr_reg:x3; val_offset:1497*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1497*FLEN/8, x4, x1, x2)

inst_500:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x6c18965d9189d and fs2 == 0 and fe2 == 0x3fb and fm2 == 0x4dd84333cff51 and fs3 == 0 and fe3 == 0x7f9 and fm3 == 0xdacf8feab547f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd6c18965d9189d; op2val:0x3fb4dd84333cff51;
op3val:0x7f9dacf8feab547f; valaddr_reg:x3; val_offset:1500*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1500*FLEN/8, x4, x1, x2)

inst_501:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x6c18965d9189d and fs2 == 0 and fe2 == 0x3fb and fm2 == 0x4dd84333cff51 and fs3 == 0 and fe3 == 0x7f9 and fm3 == 0xdacf8feab547f and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd6c18965d9189d; op2val:0x3fb4dd84333cff51;
op3val:0x7f9dacf8feab547f; valaddr_reg:x3; val_offset:1503*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1503*FLEN/8, x4, x1, x2)

inst_502:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x6c18965d9189d and fs2 == 0 and fe2 == 0x3fb and fm2 == 0x4dd84333cff51 and fs3 == 0 and fe3 == 0x7f9 and fm3 == 0xdacf8feab547f and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd6c18965d9189d; op2val:0x3fb4dd84333cff51;
op3val:0x7f9dacf8feab547f; valaddr_reg:x3; val_offset:1506*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1506*FLEN/8, x4, x1, x2)

inst_503:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x6c18965d9189d and fs2 == 0 and fe2 == 0x3fb and fm2 == 0x4dd84333cff51 and fs3 == 0 and fe3 == 0x7f9 and fm3 == 0xdacf8feab547f and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd6c18965d9189d; op2val:0x3fb4dd84333cff51;
op3val:0x7f9dacf8feab547f; valaddr_reg:x3; val_offset:1509*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1509*FLEN/8, x4, x1, x2)

inst_504:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x6c18965d9189d and fs2 == 0 and fe2 == 0x3fb and fm2 == 0x4dd84333cff51 and fs3 == 0 and fe3 == 0x7f9 and fm3 == 0xdacf8feab547f and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd6c18965d9189d; op2val:0x3fb4dd84333cff51;
op3val:0x7f9dacf8feab547f; valaddr_reg:x3; val_offset:1512*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1512*FLEN/8, x4, x1, x2)

inst_505:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x6f61b5576377f and fs2 == 0 and fe2 == 0x400 and fm2 == 0x3b74da956e014 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xc4b4ec1859266 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd6f61b5576377f; op2val:0x4003b74da956e014;
op3val:0x7fec4b4ec1859266; valaddr_reg:x3; val_offset:1515*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1515*FLEN/8, x4, x1, x2)

inst_506:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x6f61b5576377f and fs2 == 0 and fe2 == 0x400 and fm2 == 0x3b74da956e014 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xc4b4ec1859266 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd6f61b5576377f; op2val:0x4003b74da956e014;
op3val:0x7fec4b4ec1859266; valaddr_reg:x3; val_offset:1518*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1518*FLEN/8, x4, x1, x2)

inst_507:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x6f61b5576377f and fs2 == 0 and fe2 == 0x400 and fm2 == 0x3b74da956e014 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xc4b4ec1859266 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd6f61b5576377f; op2val:0x4003b74da956e014;
op3val:0x7fec4b4ec1859266; valaddr_reg:x3; val_offset:1521*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1521*FLEN/8, x4, x1, x2)

inst_508:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x6f61b5576377f and fs2 == 0 and fe2 == 0x400 and fm2 == 0x3b74da956e014 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xc4b4ec1859266 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd6f61b5576377f; op2val:0x4003b74da956e014;
op3val:0x7fec4b4ec1859266; valaddr_reg:x3; val_offset:1524*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1524*FLEN/8, x4, x1, x2)

inst_509:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x6f61b5576377f and fs2 == 0 and fe2 == 0x400 and fm2 == 0x3b74da956e014 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xc4b4ec1859266 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd6f61b5576377f; op2val:0x4003b74da956e014;
op3val:0x7fec4b4ec1859266; valaddr_reg:x3; val_offset:1527*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1527*FLEN/8, x4, x1, x2)

inst_510:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x74e742bcb0feb and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x596c4cb3d62af and fs3 == 0 and fe3 == 0x7fb and fm3 == 0xf7296a3b0f9d7 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd74e742bcb0feb; op2val:0x3fd596c4cb3d62af;
op3val:0x7fbf7296a3b0f9d7; valaddr_reg:x3; val_offset:1530*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1530*FLEN/8, x4, x1, x2)

inst_511:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x74e742bcb0feb and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x596c4cb3d62af and fs3 == 0 and fe3 == 0x7fb and fm3 == 0xf7296a3b0f9d7 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd74e742bcb0feb; op2val:0x3fd596c4cb3d62af;
op3val:0x7fbf7296a3b0f9d7; valaddr_reg:x3; val_offset:1533*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1533*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_5)

inst_512:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x74e742bcb0feb and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x596c4cb3d62af and fs3 == 0 and fe3 == 0x7fb and fm3 == 0xf7296a3b0f9d7 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd74e742bcb0feb; op2val:0x3fd596c4cb3d62af;
op3val:0x7fbf7296a3b0f9d7; valaddr_reg:x3; val_offset:1536*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1536*FLEN/8, x4, x1, x2)

inst_513:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x74e742bcb0feb and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x596c4cb3d62af and fs3 == 0 and fe3 == 0x7fb and fm3 == 0xf7296a3b0f9d7 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd74e742bcb0feb; op2val:0x3fd596c4cb3d62af;
op3val:0x7fbf7296a3b0f9d7; valaddr_reg:x3; val_offset:1539*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1539*FLEN/8, x4, x1, x2)

inst_514:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x74e742bcb0feb and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x596c4cb3d62af and fs3 == 0 and fe3 == 0x7fb and fm3 == 0xf7296a3b0f9d7 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd74e742bcb0feb; op2val:0x3fd596c4cb3d62af;
op3val:0x7fbf7296a3b0f9d7; valaddr_reg:x3; val_offset:1542*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1542*FLEN/8, x4, x1, x2)

inst_515:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x7a1d9bce0e555 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x88a395719f5a5 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x21f77a1464222 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd7a1d9bce0e555; op2val:0x3ff88a395719f5a5;
op3val:0x7fe21f77a1464222; valaddr_reg:x3; val_offset:1545*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1545*FLEN/8, x4, x1, x2)

inst_516:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x7a1d9bce0e555 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x88a395719f5a5 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x21f77a1464222 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd7a1d9bce0e555; op2val:0x3ff88a395719f5a5;
op3val:0x7fe21f77a1464222; valaddr_reg:x3; val_offset:1548*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1548*FLEN/8, x4, x1, x2)

inst_517:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x7a1d9bce0e555 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x88a395719f5a5 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x21f77a1464222 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd7a1d9bce0e555; op2val:0x3ff88a395719f5a5;
op3val:0x7fe21f77a1464222; valaddr_reg:x3; val_offset:1551*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1551*FLEN/8, x4, x1, x2)

inst_518:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x7a1d9bce0e555 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x88a395719f5a5 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x21f77a1464222 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd7a1d9bce0e555; op2val:0x3ff88a395719f5a5;
op3val:0x7fe21f77a1464222; valaddr_reg:x3; val_offset:1554*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1554*FLEN/8, x4, x1, x2)

inst_519:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x7a1d9bce0e555 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x88a395719f5a5 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x21f77a1464222 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd7a1d9bce0e555; op2val:0x3ff88a395719f5a5;
op3val:0x7fe21f77a1464222; valaddr_reg:x3; val_offset:1557*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1557*FLEN/8, x4, x1, x2)

inst_520:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x8b0ce9718a893 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xbbb2d2c120e46 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x5659a61635557 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd8b0ce9718a893; op2val:0x3ffbbb2d2c120e46;
op3val:0x7fe5659a61635557; valaddr_reg:x3; val_offset:1560*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1560*FLEN/8, x4, x1, x2)

inst_521:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x8b0ce9718a893 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xbbb2d2c120e46 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x5659a61635557 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd8b0ce9718a893; op2val:0x3ffbbb2d2c120e46;
op3val:0x7fe5659a61635557; valaddr_reg:x3; val_offset:1563*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1563*FLEN/8, x4, x1, x2)

inst_522:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x8b0ce9718a893 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xbbb2d2c120e46 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x5659a61635557 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd8b0ce9718a893; op2val:0x3ffbbb2d2c120e46;
op3val:0x7fe5659a61635557; valaddr_reg:x3; val_offset:1566*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1566*FLEN/8, x4, x1, x2)

inst_523:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x8b0ce9718a893 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xbbb2d2c120e46 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x5659a61635557 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd8b0ce9718a893; op2val:0x3ffbbb2d2c120e46;
op3val:0x7fe5659a61635557; valaddr_reg:x3; val_offset:1569*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1569*FLEN/8, x4, x1, x2)

inst_524:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x8b0ce9718a893 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xbbb2d2c120e46 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x5659a61635557 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd8b0ce9718a893; op2val:0x3ffbbb2d2c120e46;
op3val:0x7fe5659a61635557; valaddr_reg:x3; val_offset:1572*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1572*FLEN/8, x4, x1, x2)

inst_525:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x8edd67e1d4f43 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xacb0198fb28cb and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x4df644dc3f26f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd8edd67e1d4f43; op2val:0x3feacb0198fb28cb;
op3val:0x7fd4df644dc3f26f; valaddr_reg:x3; val_offset:1575*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1575*FLEN/8, x4, x1, x2)

inst_526:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x8edd67e1d4f43 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xacb0198fb28cb and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x4df644dc3f26f and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd8edd67e1d4f43; op2val:0x3feacb0198fb28cb;
op3val:0x7fd4df644dc3f26f; valaddr_reg:x3; val_offset:1578*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1578*FLEN/8, x4, x1, x2)

inst_527:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x8edd67e1d4f43 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xacb0198fb28cb and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x4df644dc3f26f and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd8edd67e1d4f43; op2val:0x3feacb0198fb28cb;
op3val:0x7fd4df644dc3f26f; valaddr_reg:x3; val_offset:1581*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1581*FLEN/8, x4, x1, x2)

inst_528:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x8edd67e1d4f43 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xacb0198fb28cb and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x4df644dc3f26f and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd8edd67e1d4f43; op2val:0x3feacb0198fb28cb;
op3val:0x7fd4df644dc3f26f; valaddr_reg:x3; val_offset:1584*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1584*FLEN/8, x4, x1, x2)

inst_529:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x8edd67e1d4f43 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xacb0198fb28cb and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x4df644dc3f26f and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd8edd67e1d4f43; op2val:0x3feacb0198fb28cb;
op3val:0x7fd4df644dc3f26f; valaddr_reg:x3; val_offset:1587*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1587*FLEN/8, x4, x1, x2)

inst_530:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x90551e755a3bd and fs2 == 0 and fe2 == 0x400 and fm2 == 0x1d4f75c9f66a4 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xbe2b055fc6c3f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd90551e755a3bd; op2val:0x4001d4f75c9f66a4;
op3val:0x7febe2b055fc6c3f; valaddr_reg:x3; val_offset:1590*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1590*FLEN/8, x4, x1, x2)

inst_531:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x90551e755a3bd and fs2 == 0 and fe2 == 0x400 and fm2 == 0x1d4f75c9f66a4 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xbe2b055fc6c3f and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd90551e755a3bd; op2val:0x4001d4f75c9f66a4;
op3val:0x7febe2b055fc6c3f; valaddr_reg:x3; val_offset:1593*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1593*FLEN/8, x4, x1, x2)

inst_532:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x90551e755a3bd and fs2 == 0 and fe2 == 0x400 and fm2 == 0x1d4f75c9f66a4 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xbe2b055fc6c3f and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd90551e755a3bd; op2val:0x4001d4f75c9f66a4;
op3val:0x7febe2b055fc6c3f; valaddr_reg:x3; val_offset:1596*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1596*FLEN/8, x4, x1, x2)

inst_533:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x90551e755a3bd and fs2 == 0 and fe2 == 0x400 and fm2 == 0x1d4f75c9f66a4 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xbe2b055fc6c3f and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd90551e755a3bd; op2val:0x4001d4f75c9f66a4;
op3val:0x7febe2b055fc6c3f; valaddr_reg:x3; val_offset:1599*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1599*FLEN/8, x4, x1, x2)

inst_534:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x90551e755a3bd and fs2 == 0 and fe2 == 0x400 and fm2 == 0x1d4f75c9f66a4 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xbe2b055fc6c3f and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd90551e755a3bd; op2val:0x4001d4f75c9f66a4;
op3val:0x7febe2b055fc6c3f; valaddr_reg:x3; val_offset:1602*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1602*FLEN/8, x4, x1, x2)

inst_535:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x91cbc6b2f3f1f and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x044e559238bd2 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x988de83272863 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd91cbc6b2f3f1f; op2val:0x3ff044e559238bd2;
op3val:0x7fd988de83272863; valaddr_reg:x3; val_offset:1605*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1605*FLEN/8, x4, x1, x2)

inst_536:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x91cbc6b2f3f1f and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x044e559238bd2 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x988de83272863 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd91cbc6b2f3f1f; op2val:0x3ff044e559238bd2;
op3val:0x7fd988de83272863; valaddr_reg:x3; val_offset:1608*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1608*FLEN/8, x4, x1, x2)

inst_537:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x91cbc6b2f3f1f and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x044e559238bd2 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x988de83272863 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd91cbc6b2f3f1f; op2val:0x3ff044e559238bd2;
op3val:0x7fd988de83272863; valaddr_reg:x3; val_offset:1611*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1611*FLEN/8, x4, x1, x2)

inst_538:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x91cbc6b2f3f1f and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x044e559238bd2 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x988de83272863 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd91cbc6b2f3f1f; op2val:0x3ff044e559238bd2;
op3val:0x7fd988de83272863; valaddr_reg:x3; val_offset:1614*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1614*FLEN/8, x4, x1, x2)

inst_539:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x91cbc6b2f3f1f and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x044e559238bd2 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x988de83272863 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd91cbc6b2f3f1f; op2val:0x3ff044e559238bd2;
op3val:0x7fd988de83272863; valaddr_reg:x3; val_offset:1617*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1617*FLEN/8, x4, x1, x2)

inst_540:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x928527fc33323 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x49fb921840ebb and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x036c5753b2b79 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd928527fc33323; op2val:0x3ff49fb921840ebb;
op3val:0x7fe036c5753b2b79; valaddr_reg:x3; val_offset:1620*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1620*FLEN/8, x4, x1, x2)

inst_541:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x928527fc33323 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x49fb921840ebb and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x036c5753b2b79 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd928527fc33323; op2val:0x3ff49fb921840ebb;
op3val:0x7fe036c5753b2b79; valaddr_reg:x3; val_offset:1623*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1623*FLEN/8, x4, x1, x2)

inst_542:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x928527fc33323 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x49fb921840ebb and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x036c5753b2b79 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd928527fc33323; op2val:0x3ff49fb921840ebb;
op3val:0x7fe036c5753b2b79; valaddr_reg:x3; val_offset:1626*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1626*FLEN/8, x4, x1, x2)

inst_543:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x928527fc33323 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x49fb921840ebb and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x036c5753b2b79 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd928527fc33323; op2val:0x3ff49fb921840ebb;
op3val:0x7fe036c5753b2b79; valaddr_reg:x3; val_offset:1629*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1629*FLEN/8, x4, x1, x2)

inst_544:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x928527fc33323 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x49fb921840ebb and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x036c5753b2b79 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd928527fc33323; op2val:0x3ff49fb921840ebb;
op3val:0x7fe036c5753b2b79; valaddr_reg:x3; val_offset:1632*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1632*FLEN/8, x4, x1, x2)

inst_545:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x97d0a671457af and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x3936397ae5d5c and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xf2f47d14d678b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd97d0a671457af; op2val:0x3ff3936397ae5d5c;
op3val:0x7fdf2f47d14d678b; valaddr_reg:x3; val_offset:1635*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1635*FLEN/8, x4, x1, x2)

inst_546:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x97d0a671457af and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x3936397ae5d5c and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xf2f47d14d678b and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd97d0a671457af; op2val:0x3ff3936397ae5d5c;
op3val:0x7fdf2f47d14d678b; valaddr_reg:x3; val_offset:1638*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1638*FLEN/8, x4, x1, x2)

inst_547:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x97d0a671457af and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x3936397ae5d5c and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xf2f47d14d678b and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd97d0a671457af; op2val:0x3ff3936397ae5d5c;
op3val:0x7fdf2f47d14d678b; valaddr_reg:x3; val_offset:1641*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1641*FLEN/8, x4, x1, x2)

inst_548:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x97d0a671457af and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x3936397ae5d5c and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xf2f47d14d678b and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd97d0a671457af; op2val:0x3ff3936397ae5d5c;
op3val:0x7fdf2f47d14d678b; valaddr_reg:x3; val_offset:1644*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1644*FLEN/8, x4, x1, x2)

inst_549:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x97d0a671457af and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x3936397ae5d5c and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xf2f47d14d678b and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd97d0a671457af; op2val:0x3ff3936397ae5d5c;
op3val:0x7fdf2f47d14d678b; valaddr_reg:x3; val_offset:1647*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1647*FLEN/8, x4, x1, x2)

inst_550:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x9b05255f262e5 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x2deda15b6308d and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xe4c293c56f511 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd9b05255f262e5; op2val:0x4002deda15b6308d;
op3val:0x7fee4c293c56f511; valaddr_reg:x3; val_offset:1650*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1650*FLEN/8, x4, x1, x2)

inst_551:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x9b05255f262e5 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x2deda15b6308d and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xe4c293c56f511 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd9b05255f262e5; op2val:0x4002deda15b6308d;
op3val:0x7fee4c293c56f511; valaddr_reg:x3; val_offset:1653*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1653*FLEN/8, x4, x1, x2)

inst_552:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x9b05255f262e5 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x2deda15b6308d and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xe4c293c56f511 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd9b05255f262e5; op2val:0x4002deda15b6308d;
op3val:0x7fee4c293c56f511; valaddr_reg:x3; val_offset:1656*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1656*FLEN/8, x4, x1, x2)

inst_553:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x9b05255f262e5 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x2deda15b6308d and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xe4c293c56f511 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd9b05255f262e5; op2val:0x4002deda15b6308d;
op3val:0x7fee4c293c56f511; valaddr_reg:x3; val_offset:1659*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1659*FLEN/8, x4, x1, x2)

inst_554:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x9b05255f262e5 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x2deda15b6308d and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xe4c293c56f511 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd9b05255f262e5; op2val:0x4002deda15b6308d;
op3val:0x7fee4c293c56f511; valaddr_reg:x3; val_offset:1662*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1662*FLEN/8, x4, x1, x2)

inst_555:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x9e69137ea5e7f and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xb7b3eacaee577 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x63e4b7fdae4e9 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd9e69137ea5e7f; op2val:0x3feb7b3eacaee577;
op3val:0x7fd63e4b7fdae4e9; valaddr_reg:x3; val_offset:1665*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1665*FLEN/8, x4, x1, x2)

inst_556:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x9e69137ea5e7f and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xb7b3eacaee577 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x63e4b7fdae4e9 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd9e69137ea5e7f; op2val:0x3feb7b3eacaee577;
op3val:0x7fd63e4b7fdae4e9; valaddr_reg:x3; val_offset:1668*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1668*FLEN/8, x4, x1, x2)

inst_557:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x9e69137ea5e7f and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xb7b3eacaee577 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x63e4b7fdae4e9 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd9e69137ea5e7f; op2val:0x3feb7b3eacaee577;
op3val:0x7fd63e4b7fdae4e9; valaddr_reg:x3; val_offset:1671*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1671*FLEN/8, x4, x1, x2)

inst_558:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x9e69137ea5e7f and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xb7b3eacaee577 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x63e4b7fdae4e9 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd9e69137ea5e7f; op2val:0x3feb7b3eacaee577;
op3val:0x7fd63e4b7fdae4e9; valaddr_reg:x3; val_offset:1674*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1674*FLEN/8, x4, x1, x2)

inst_559:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x9e69137ea5e7f and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xb7b3eacaee577 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x63e4b7fdae4e9 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd9e69137ea5e7f; op2val:0x3feb7b3eacaee577;
op3val:0x7fd63e4b7fdae4e9; valaddr_reg:x3; val_offset:1677*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1677*FLEN/8, x4, x1, x2)

inst_560:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xac2863951d7a5 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xcf913c3426f6d and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x83a7f9d5e43df and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fdac2863951d7a5; op2val:0x3ffcf913c3426f6d;
op3val:0x7fe83a7f9d5e43df; valaddr_reg:x3; val_offset:1680*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1680*FLEN/8, x4, x1, x2)

inst_561:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xac2863951d7a5 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xcf913c3426f6d and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x83a7f9d5e43df and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fdac2863951d7a5; op2val:0x3ffcf913c3426f6d;
op3val:0x7fe83a7f9d5e43df; valaddr_reg:x3; val_offset:1683*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1683*FLEN/8, x4, x1, x2)

inst_562:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xac2863951d7a5 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xcf913c3426f6d and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x83a7f9d5e43df and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fdac2863951d7a5; op2val:0x3ffcf913c3426f6d;
op3val:0x7fe83a7f9d5e43df; valaddr_reg:x3; val_offset:1686*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1686*FLEN/8, x4, x1, x2)

inst_563:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xac2863951d7a5 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xcf913c3426f6d and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x83a7f9d5e43df and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fdac2863951d7a5; op2val:0x3ffcf913c3426f6d;
op3val:0x7fe83a7f9d5e43df; valaddr_reg:x3; val_offset:1689*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1689*FLEN/8, x4, x1, x2)

inst_564:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xac2863951d7a5 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xcf913c3426f6d and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x83a7f9d5e43df and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fdac2863951d7a5; op2val:0x3ffcf913c3426f6d;
op3val:0x7fe83a7f9d5e43df; valaddr_reg:x3; val_offset:1692*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1692*FLEN/8, x4, x1, x2)

inst_565:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xaeb92d69dfb67 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x1744c7b952882 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xd5df89b833eac and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fdaeb92d69dfb67; op2val:0x4001744c7b952882;
op3val:0x7fed5df89b833eac; valaddr_reg:x3; val_offset:1695*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1695*FLEN/8, x4, x1, x2)

inst_566:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xaeb92d69dfb67 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x1744c7b952882 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xd5df89b833eac and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fdaeb92d69dfb67; op2val:0x4001744c7b952882;
op3val:0x7fed5df89b833eac; valaddr_reg:x3; val_offset:1698*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1698*FLEN/8, x4, x1, x2)

inst_567:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xaeb92d69dfb67 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x1744c7b952882 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xd5df89b833eac and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fdaeb92d69dfb67; op2val:0x4001744c7b952882;
op3val:0x7fed5df89b833eac; valaddr_reg:x3; val_offset:1701*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1701*FLEN/8, x4, x1, x2)

inst_568:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xaeb92d69dfb67 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x1744c7b952882 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xd5df89b833eac and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fdaeb92d69dfb67; op2val:0x4001744c7b952882;
op3val:0x7fed5df89b833eac; valaddr_reg:x3; val_offset:1704*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1704*FLEN/8, x4, x1, x2)

inst_569:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xaeb92d69dfb67 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x1744c7b952882 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xd5df89b833eac and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fdaeb92d69dfb67; op2val:0x4001744c7b952882;
op3val:0x7fed5df89b833eac; valaddr_reg:x3; val_offset:1707*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1707*FLEN/8, x4, x1, x2)

inst_570:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xb063666cbf4b1 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x1448089b2ebd6 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xd2a4d4eb4326d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fdb063666cbf4b1; op2val:0x4001448089b2ebd6;
op3val:0x7fed2a4d4eb4326d; valaddr_reg:x3; val_offset:1710*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1710*FLEN/8, x4, x1, x2)

inst_571:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xb063666cbf4b1 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x1448089b2ebd6 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xd2a4d4eb4326d and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fdb063666cbf4b1; op2val:0x4001448089b2ebd6;
op3val:0x7fed2a4d4eb4326d; valaddr_reg:x3; val_offset:1713*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1713*FLEN/8, x4, x1, x2)

inst_572:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xb063666cbf4b1 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x1448089b2ebd6 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xd2a4d4eb4326d and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fdb063666cbf4b1; op2val:0x4001448089b2ebd6;
op3val:0x7fed2a4d4eb4326d; valaddr_reg:x3; val_offset:1716*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1716*FLEN/8, x4, x1, x2)

inst_573:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xb063666cbf4b1 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x1448089b2ebd6 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xd2a4d4eb4326d and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fdb063666cbf4b1; op2val:0x4001448089b2ebd6;
op3val:0x7fed2a4d4eb4326d; valaddr_reg:x3; val_offset:1719*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1719*FLEN/8, x4, x1, x2)

inst_574:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xb063666cbf4b1 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x1448089b2ebd6 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xd2a4d4eb4326d and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fdb063666cbf4b1; op2val:0x4001448089b2ebd6;
op3val:0x7fed2a4d4eb4326d; valaddr_reg:x3; val_offset:1722*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1722*FLEN/8, x4, x1, x2)

inst_575:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xb2b5288790eeb and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xf29ef3e1f4174 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xa75929643064a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fdb2b5288790eeb; op2val:0x3fff29ef3e1f4174;
op3val:0x7fea75929643064a; valaddr_reg:x3; val_offset:1725*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1725*FLEN/8, x4, x1, x2)

inst_576:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xb2b5288790eeb and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xf29ef3e1f4174 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xa75929643064a and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fdb2b5288790eeb; op2val:0x3fff29ef3e1f4174;
op3val:0x7fea75929643064a; valaddr_reg:x3; val_offset:1728*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1728*FLEN/8, x4, x1, x2)

inst_577:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xb2b5288790eeb and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xf29ef3e1f4174 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xa75929643064a and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fdb2b5288790eeb; op2val:0x3fff29ef3e1f4174;
op3val:0x7fea75929643064a; valaddr_reg:x3; val_offset:1731*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1731*FLEN/8, x4, x1, x2)

inst_578:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xb2b5288790eeb and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xf29ef3e1f4174 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xa75929643064a and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fdb2b5288790eeb; op2val:0x3fff29ef3e1f4174;
op3val:0x7fea75929643064a; valaddr_reg:x3; val_offset:1734*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1734*FLEN/8, x4, x1, x2)

inst_579:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xb2b5288790eeb and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xf29ef3e1f4174 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xa75929643064a and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fdb2b5288790eeb; op2val:0x3fff29ef3e1f4174;
op3val:0x7fea75929643064a; valaddr_reg:x3; val_offset:1737*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1737*FLEN/8, x4, x1, x2)

inst_580:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xbc388a7e47403 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x0137832c6112c and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xbe5516cc77b12 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fdbc388a7e47403; op2val:0x4000137832c6112c;
op3val:0x7febe5516cc77b12; valaddr_reg:x3; val_offset:1740*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1740*FLEN/8, x4, x1, x2)

inst_581:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xbc388a7e47403 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x0137832c6112c and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xbe5516cc77b12 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fdbc388a7e47403; op2val:0x4000137832c6112c;
op3val:0x7febe5516cc77b12; valaddr_reg:x3; val_offset:1743*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1743*FLEN/8, x4, x1, x2)

inst_582:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xbc388a7e47403 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x0137832c6112c and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xbe5516cc77b12 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fdbc388a7e47403; op2val:0x4000137832c6112c;
op3val:0x7febe5516cc77b12; valaddr_reg:x3; val_offset:1746*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1746*FLEN/8, x4, x1, x2)

inst_583:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xbc388a7e47403 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x0137832c6112c and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xbe5516cc77b12 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fdbc388a7e47403; op2val:0x4000137832c6112c;
op3val:0x7febe5516cc77b12; valaddr_reg:x3; val_offset:1749*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1749*FLEN/8, x4, x1, x2)

inst_584:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xbc388a7e47403 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x0137832c6112c and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xbe5516cc77b12 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fdbc388a7e47403; op2val:0x4000137832c6112c;
op3val:0x7febe5516cc77b12; valaddr_reg:x3; val_offset:1752*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1752*FLEN/8, x4, x1, x2)

inst_585:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xc2b01ae3648db and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xaa05636c3d5a4 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x7701449bca3c7 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fdc2b01ae3648db; op2val:0x3fdaa05636c3d5a4;
op3val:0x7fc7701449bca3c7; valaddr_reg:x3; val_offset:1755*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1755*FLEN/8, x4, x1, x2)

inst_586:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xc2b01ae3648db and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xaa05636c3d5a4 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x7701449bca3c7 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fdc2b01ae3648db; op2val:0x3fdaa05636c3d5a4;
op3val:0x7fc7701449bca3c7; valaddr_reg:x3; val_offset:1758*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1758*FLEN/8, x4, x1, x2)

inst_587:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xc2b01ae3648db and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xaa05636c3d5a4 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x7701449bca3c7 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fdc2b01ae3648db; op2val:0x3fdaa05636c3d5a4;
op3val:0x7fc7701449bca3c7; valaddr_reg:x3; val_offset:1761*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1761*FLEN/8, x4, x1, x2)

inst_588:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xc2b01ae3648db and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xaa05636c3d5a4 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x7701449bca3c7 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fdc2b01ae3648db; op2val:0x3fdaa05636c3d5a4;
op3val:0x7fc7701449bca3c7; valaddr_reg:x3; val_offset:1764*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1764*FLEN/8, x4, x1, x2)

inst_589:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xc2b01ae3648db and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xaa05636c3d5a4 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x7701449bca3c7 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fdc2b01ae3648db; op2val:0x3fdaa05636c3d5a4;
op3val:0x7fc7701449bca3c7; valaddr_reg:x3; val_offset:1767*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1767*FLEN/8, x4, x1, x2)

inst_590:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xcf33bc410b42b and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x2dce8fa7b9c8d and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x110ac9f3abd23 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fdcf33bc410b42b; op2val:0x3ff2dce8fa7b9c8d;
op3val:0x7fe110ac9f3abd23; valaddr_reg:x3; val_offset:1770*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1770*FLEN/8, x4, x1, x2)

inst_591:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xcf33bc410b42b and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x2dce8fa7b9c8d and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x110ac9f3abd23 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fdcf33bc410b42b; op2val:0x3ff2dce8fa7b9c8d;
op3val:0x7fe110ac9f3abd23; valaddr_reg:x3; val_offset:1773*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1773*FLEN/8, x4, x1, x2)

inst_592:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xcf33bc410b42b and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x2dce8fa7b9c8d and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x110ac9f3abd23 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fdcf33bc410b42b; op2val:0x3ff2dce8fa7b9c8d;
op3val:0x7fe110ac9f3abd23; valaddr_reg:x3; val_offset:1776*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1776*FLEN/8, x4, x1, x2)

inst_593:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xcf33bc410b42b and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x2dce8fa7b9c8d and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x110ac9f3abd23 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fdcf33bc410b42b; op2val:0x3ff2dce8fa7b9c8d;
op3val:0x7fe110ac9f3abd23; valaddr_reg:x3; val_offset:1779*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1779*FLEN/8, x4, x1, x2)

inst_594:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xcf33bc410b42b and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x2dce8fa7b9c8d and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x110ac9f3abd23 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fdcf33bc410b42b; op2val:0x3ff2dce8fa7b9c8d;
op3val:0x7fe110ac9f3abd23; valaddr_reg:x3; val_offset:1782*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1782*FLEN/8, x4, x1, x2)

inst_595:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xd00f90ae48549 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x52abf187430ec and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x32f61e9fcc711 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fdd00f90ae48549; op2val:0x3fe52abf187430ec;
op3val:0x7fd32f61e9fcc711; valaddr_reg:x3; val_offset:1785*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1785*FLEN/8, x4, x1, x2)

inst_596:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xd00f90ae48549 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x52abf187430ec and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x32f61e9fcc711 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fdd00f90ae48549; op2val:0x3fe52abf187430ec;
op3val:0x7fd32f61e9fcc711; valaddr_reg:x3; val_offset:1788*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1788*FLEN/8, x4, x1, x2)

inst_597:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xd00f90ae48549 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x52abf187430ec and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x32f61e9fcc711 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fdd00f90ae48549; op2val:0x3fe52abf187430ec;
op3val:0x7fd32f61e9fcc711; valaddr_reg:x3; val_offset:1791*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1791*FLEN/8, x4, x1, x2)

inst_598:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xd00f90ae48549 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x52abf187430ec and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x32f61e9fcc711 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fdd00f90ae48549; op2val:0x3fe52abf187430ec;
op3val:0x7fd32f61e9fcc711; valaddr_reg:x3; val_offset:1794*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1794*FLEN/8, x4, x1, x2)

inst_599:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xd00f90ae48549 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x52abf187430ec and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x32f61e9fcc711 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fdd00f90ae48549; op2val:0x3fe52abf187430ec;
op3val:0x7fd32f61e9fcc711; valaddr_reg:x3; val_offset:1797*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1797*FLEN/8, x4, x1, x2)

inst_600:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xd0aa01817a599 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x7eaba18734fc7 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x5b4a9a7f456a3 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fdd0aa01817a599; op2val:0x3fe7eaba18734fc7;
op3val:0x7fd5b4a9a7f456a3; valaddr_reg:x3; val_offset:1800*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1800*FLEN/8, x4, x1, x2)

inst_601:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xd0aa01817a599 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x7eaba18734fc7 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x5b4a9a7f456a3 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fdd0aa01817a599; op2val:0x3fe7eaba18734fc7;
op3val:0x7fd5b4a9a7f456a3; valaddr_reg:x3; val_offset:1803*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1803*FLEN/8, x4, x1, x2)

inst_602:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xd0aa01817a599 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x7eaba18734fc7 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x5b4a9a7f456a3 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fdd0aa01817a599; op2val:0x3fe7eaba18734fc7;
op3val:0x7fd5b4a9a7f456a3; valaddr_reg:x3; val_offset:1806*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1806*FLEN/8, x4, x1, x2)

inst_603:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xd0aa01817a599 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x7eaba18734fc7 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x5b4a9a7f456a3 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fdd0aa01817a599; op2val:0x3fe7eaba18734fc7;
op3val:0x7fd5b4a9a7f456a3; valaddr_reg:x3; val_offset:1809*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1809*FLEN/8, x4, x1, x2)

inst_604:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xd0aa01817a599 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x7eaba18734fc7 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x5b4a9a7f456a3 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fdd0aa01817a599; op2val:0x3fe7eaba18734fc7;
op3val:0x7fd5b4a9a7f456a3; valaddr_reg:x3; val_offset:1812*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1812*FLEN/8, x4, x1, x2)

inst_605:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xdd2c573d7d961 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x09cdb83340ea0 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xef725a27eac6b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fddd2c573d7d961; op2val:0x3ff09cdb83340ea0;
op3val:0x7fdef725a27eac6b; valaddr_reg:x3; val_offset:1815*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1815*FLEN/8, x4, x1, x2)

inst_606:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xdd2c573d7d961 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x09cdb83340ea0 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xef725a27eac6b and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fddd2c573d7d961; op2val:0x3ff09cdb83340ea0;
op3val:0x7fdef725a27eac6b; valaddr_reg:x3; val_offset:1818*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1818*FLEN/8, x4, x1, x2)

inst_607:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xdd2c573d7d961 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x09cdb83340ea0 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xef725a27eac6b and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fddd2c573d7d961; op2val:0x3ff09cdb83340ea0;
op3val:0x7fdef725a27eac6b; valaddr_reg:x3; val_offset:1821*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1821*FLEN/8, x4, x1, x2)

inst_608:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xdd2c573d7d961 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x09cdb83340ea0 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xef725a27eac6b and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fddd2c573d7d961; op2val:0x3ff09cdb83340ea0;
op3val:0x7fdef725a27eac6b; valaddr_reg:x3; val_offset:1824*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1824*FLEN/8, x4, x1, x2)

inst_609:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xdd2c573d7d961 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x09cdb83340ea0 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xef725a27eac6b and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fddd2c573d7d961; op2val:0x3ff09cdb83340ea0;
op3val:0x7fdef725a27eac6b; valaddr_reg:x3; val_offset:1827*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1827*FLEN/8, x4, x1, x2)

inst_610:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xe57a08d938ac9 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x669fb3be375cc and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x540bc20428f59 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fde57a08d938ac9; op2val:0x3ff669fb3be375cc;
op3val:0x7fe540bc20428f59; valaddr_reg:x3; val_offset:1830*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1830*FLEN/8, x4, x1, x2)

inst_611:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xe57a08d938ac9 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x669fb3be375cc and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x540bc20428f59 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fde57a08d938ac9; op2val:0x3ff669fb3be375cc;
op3val:0x7fe540bc20428f59; valaddr_reg:x3; val_offset:1833*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1833*FLEN/8, x4, x1, x2)

inst_612:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xe57a08d938ac9 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x669fb3be375cc and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x540bc20428f59 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fde57a08d938ac9; op2val:0x3ff669fb3be375cc;
op3val:0x7fe540bc20428f59; valaddr_reg:x3; val_offset:1836*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1836*FLEN/8, x4, x1, x2)

inst_613:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xe57a08d938ac9 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x669fb3be375cc and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x540bc20428f59 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fde57a08d938ac9; op2val:0x3ff669fb3be375cc;
op3val:0x7fe540bc20428f59; valaddr_reg:x3; val_offset:1839*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1839*FLEN/8, x4, x1, x2)

inst_614:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xe57a08d938ac9 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x669fb3be375cc and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x540bc20428f59 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fde57a08d938ac9; op2val:0x3ff669fb3be375cc;
op3val:0x7fe540bc20428f59; valaddr_reg:x3; val_offset:1842*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1842*FLEN/8, x4, x1, x2)

inst_615:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xe608faa3b3f0d and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x0f2ab24ea4e21 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x016a48a9fc325 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fde608faa3b3f0d; op2val:0x3ff0f2ab24ea4e21;
op3val:0x7fe016a48a9fc325; valaddr_reg:x3; val_offset:1845*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1845*FLEN/8, x4, x1, x2)

inst_616:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xe608faa3b3f0d and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x0f2ab24ea4e21 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x016a48a9fc325 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fde608faa3b3f0d; op2val:0x3ff0f2ab24ea4e21;
op3val:0x7fe016a48a9fc325; valaddr_reg:x3; val_offset:1848*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1848*FLEN/8, x4, x1, x2)

inst_617:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xe608faa3b3f0d and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x0f2ab24ea4e21 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x016a48a9fc325 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fde608faa3b3f0d; op2val:0x3ff0f2ab24ea4e21;
op3val:0x7fe016a48a9fc325; valaddr_reg:x3; val_offset:1851*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1851*FLEN/8, x4, x1, x2)

inst_618:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xe608faa3b3f0d and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x0f2ab24ea4e21 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x016a48a9fc325 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fde608faa3b3f0d; op2val:0x3ff0f2ab24ea4e21;
op3val:0x7fe016a48a9fc325; valaddr_reg:x3; val_offset:1854*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1854*FLEN/8, x4, x1, x2)

inst_619:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xe608faa3b3f0d and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x0f2ab24ea4e21 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x016a48a9fc325 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fde608faa3b3f0d; op2val:0x3ff0f2ab24ea4e21;
op3val:0x7fe016a48a9fc325; valaddr_reg:x3; val_offset:1857*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1857*FLEN/8, x4, x1, x2)

inst_620:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xe9825a40fe033 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xf83254b5a727e and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xe20c6f8fd997a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fde9825a40fe033; op2val:0x3fff83254b5a727e;
op3val:0x7fee20c6f8fd997a; valaddr_reg:x3; val_offset:1860*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1860*FLEN/8, x4, x1, x2)

inst_621:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xe9825a40fe033 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xf83254b5a727e and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xe20c6f8fd997a and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fde9825a40fe033; op2val:0x3fff83254b5a727e;
op3val:0x7fee20c6f8fd997a; valaddr_reg:x3; val_offset:1863*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1863*FLEN/8, x4, x1, x2)

inst_622:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xe9825a40fe033 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xf83254b5a727e and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xe20c6f8fd997a and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fde9825a40fe033; op2val:0x3fff83254b5a727e;
op3val:0x7fee20c6f8fd997a; valaddr_reg:x3; val_offset:1866*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1866*FLEN/8, x4, x1, x2)

inst_623:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xe9825a40fe033 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xf83254b5a727e and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xe20c6f8fd997a and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fde9825a40fe033; op2val:0x3fff83254b5a727e;
op3val:0x7fee20c6f8fd997a; valaddr_reg:x3; val_offset:1869*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1869*FLEN/8, x4, x1, x2)

inst_624:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xe9825a40fe033 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xf83254b5a727e and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xe20c6f8fd997a and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fde9825a40fe033; op2val:0x3fff83254b5a727e;
op3val:0x7fee20c6f8fd997a; valaddr_reg:x3; val_offset:1872*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1872*FLEN/8, x4, x1, x2)

inst_625:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xfae1b145e0417 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xafa3294e54a15 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xab528478e0e2d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fdfae1b145e0417; op2val:0x3ffafa3294e54a15;
op3val:0x7feab528478e0e2d; valaddr_reg:x3; val_offset:1875*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1875*FLEN/8, x4, x1, x2)

inst_626:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xfae1b145e0417 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xafa3294e54a15 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xab528478e0e2d and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fdfae1b145e0417; op2val:0x3ffafa3294e54a15;
op3val:0x7feab528478e0e2d; valaddr_reg:x3; val_offset:1878*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1878*FLEN/8, x4, x1, x2)

inst_627:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xfae1b145e0417 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xafa3294e54a15 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xab528478e0e2d and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fdfae1b145e0417; op2val:0x3ffafa3294e54a15;
op3val:0x7feab528478e0e2d; valaddr_reg:x3; val_offset:1881*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1881*FLEN/8, x4, x1, x2)

inst_628:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xfae1b145e0417 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xafa3294e54a15 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xab528478e0e2d and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fdfae1b145e0417; op2val:0x3ffafa3294e54a15;
op3val:0x7feab528478e0e2d; valaddr_reg:x3; val_offset:1884*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1884*FLEN/8, x4, x1, x2)

inst_629:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xfae1b145e0417 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xafa3294e54a15 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xab528478e0e2d and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fdfae1b145e0417; op2val:0x3ffafa3294e54a15;
op3val:0x7feab528478e0e2d; valaddr_reg:x3; val_offset:1887*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1887*FLEN/8, x4, x1, x2)

inst_630:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x000b9ceb049f9 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x6c463ff747485 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x6c56c64540f3f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe000b9ceb049f9; op2val:0x3fd6c463ff747485;
op3val:0x7fc6c56c64540f3f; valaddr_reg:x3; val_offset:1890*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1890*FLEN/8, x4, x1, x2)

inst_631:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x000b9ceb049f9 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x6c463ff747485 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x6c56c64540f3f and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe000b9ceb049f9; op2val:0x3fd6c463ff747485;
op3val:0x7fc6c56c64540f3f; valaddr_reg:x3; val_offset:1893*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1893*FLEN/8, x4, x1, x2)

inst_632:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x000b9ceb049f9 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x6c463ff747485 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x6c56c64540f3f and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe000b9ceb049f9; op2val:0x3fd6c463ff747485;
op3val:0x7fc6c56c64540f3f; valaddr_reg:x3; val_offset:1896*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1896*FLEN/8, x4, x1, x2)

inst_633:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x000b9ceb049f9 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x6c463ff747485 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x6c56c64540f3f and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe000b9ceb049f9; op2val:0x3fd6c463ff747485;
op3val:0x7fc6c56c64540f3f; valaddr_reg:x3; val_offset:1899*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1899*FLEN/8, x4, x1, x2)

inst_634:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x000b9ceb049f9 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x6c463ff747485 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x6c56c64540f3f and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe000b9ceb049f9; op2val:0x3fd6c463ff747485;
op3val:0x7fc6c56c64540f3f; valaddr_reg:x3; val_offset:1902*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1902*FLEN/8, x4, x1, x2)

inst_635:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x00d821485e6cc and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x0f663aff0a092 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x104b5c89b7afe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe00d821485e6cc; op2val:0x3ff0f663aff0a092;
op3val:0x7fe104b5c89b7afe; valaddr_reg:x3; val_offset:1905*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1905*FLEN/8, x4, x1, x2)

inst_636:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x00d821485e6cc and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x0f663aff0a092 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x104b5c89b7afe and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe00d821485e6cc; op2val:0x3ff0f663aff0a092;
op3val:0x7fe104b5c89b7afe; valaddr_reg:x3; val_offset:1908*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1908*FLEN/8, x4, x1, x2)

inst_637:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x00d821485e6cc and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x0f663aff0a092 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x104b5c89b7afe and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe00d821485e6cc; op2val:0x3ff0f663aff0a092;
op3val:0x7fe104b5c89b7afe; valaddr_reg:x3; val_offset:1911*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1911*FLEN/8, x4, x1, x2)

inst_638:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x00d821485e6cc and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x0f663aff0a092 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x104b5c89b7afe and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe00d821485e6cc; op2val:0x3ff0f663aff0a092;
op3val:0x7fe104b5c89b7afe; valaddr_reg:x3; val_offset:1914*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1914*FLEN/8, x4, x1, x2)

inst_639:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x00d821485e6cc and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x0f663aff0a092 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x104b5c89b7afe and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe00d821485e6cc; op2val:0x3ff0f663aff0a092;
op3val:0x7fe104b5c89b7afe; valaddr_reg:x3; val_offset:1917*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1917*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_6)

inst_640:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x063a074cc3059 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x5a419ce7278f9 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x62ada351bd685 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe063a074cc3059; op2val:0x3ff5a419ce7278f9;
op3val:0x7fe62ada351bd685; valaddr_reg:x3; val_offset:1920*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1920*FLEN/8, x4, x1, x2)

inst_641:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x063a074cc3059 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x5a419ce7278f9 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x62ada351bd685 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe063a074cc3059; op2val:0x3ff5a419ce7278f9;
op3val:0x7fe62ada351bd685; valaddr_reg:x3; val_offset:1923*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1923*FLEN/8, x4, x1, x2)

inst_642:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x063a074cc3059 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x5a419ce7278f9 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x62ada351bd685 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe063a074cc3059; op2val:0x3ff5a419ce7278f9;
op3val:0x7fe62ada351bd685; valaddr_reg:x3; val_offset:1926*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1926*FLEN/8, x4, x1, x2)

inst_643:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x063a074cc3059 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x5a419ce7278f9 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x62ada351bd685 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe063a074cc3059; op2val:0x3ff5a419ce7278f9;
op3val:0x7fe62ada351bd685; valaddr_reg:x3; val_offset:1929*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1929*FLEN/8, x4, x1, x2)

inst_644:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x063a074cc3059 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x5a419ce7278f9 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x62ada351bd685 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe063a074cc3059; op2val:0x3ff5a419ce7278f9;
op3val:0x7fe62ada351bd685; valaddr_reg:x3; val_offset:1932*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1932*FLEN/8, x4, x1, x2)

inst_645:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x07ee7e3cd0780 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x32b473be6de7a and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x3c351de9eaf86 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe07ee7e3cd0780; op2val:0x3ff32b473be6de7a;
op3val:0x7fe3c351de9eaf86; valaddr_reg:x3; val_offset:1935*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1935*FLEN/8, x4, x1, x2)

inst_646:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x07ee7e3cd0780 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x32b473be6de7a and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x3c351de9eaf86 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe07ee7e3cd0780; op2val:0x3ff32b473be6de7a;
op3val:0x7fe3c351de9eaf86; valaddr_reg:x3; val_offset:1938*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1938*FLEN/8, x4, x1, x2)

inst_647:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x07ee7e3cd0780 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x32b473be6de7a and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x3c351de9eaf86 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe07ee7e3cd0780; op2val:0x3ff32b473be6de7a;
op3val:0x7fe3c351de9eaf86; valaddr_reg:x3; val_offset:1941*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1941*FLEN/8, x4, x1, x2)

inst_648:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x07ee7e3cd0780 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x32b473be6de7a and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x3c351de9eaf86 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe07ee7e3cd0780; op2val:0x3ff32b473be6de7a;
op3val:0x7fe3c351de9eaf86; valaddr_reg:x3; val_offset:1944*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1944*FLEN/8, x4, x1, x2)

inst_649:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x07ee7e3cd0780 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x32b473be6de7a and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x3c351de9eaf86 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe07ee7e3cd0780; op2val:0x3ff32b473be6de7a;
op3val:0x7fe3c351de9eaf86; valaddr_reg:x3; val_offset:1947*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1947*FLEN/8, x4, x1, x2)

inst_650:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x07fd62d9d804c and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x50bebd7e9d921 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x5b414335ec631 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe07fd62d9d804c; op2val:0x3fe50bebd7e9d921;
op3val:0x7fd5b414335ec631; valaddr_reg:x3; val_offset:1950*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1950*FLEN/8, x4, x1, x2)

inst_651:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x07fd62d9d804c and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x50bebd7e9d921 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x5b414335ec631 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe07fd62d9d804c; op2val:0x3fe50bebd7e9d921;
op3val:0x7fd5b414335ec631; valaddr_reg:x3; val_offset:1953*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1953*FLEN/8, x4, x1, x2)

inst_652:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x07fd62d9d804c and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x50bebd7e9d921 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x5b414335ec631 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe07fd62d9d804c; op2val:0x3fe50bebd7e9d921;
op3val:0x7fd5b414335ec631; valaddr_reg:x3; val_offset:1956*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1956*FLEN/8, x4, x1, x2)

inst_653:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x07fd62d9d804c and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x50bebd7e9d921 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x5b414335ec631 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe07fd62d9d804c; op2val:0x3fe50bebd7e9d921;
op3val:0x7fd5b414335ec631; valaddr_reg:x3; val_offset:1959*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1959*FLEN/8, x4, x1, x2)

inst_654:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x07fd62d9d804c and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x50bebd7e9d921 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x5b414335ec631 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe07fd62d9d804c; op2val:0x3fe50bebd7e9d921;
op3val:0x7fd5b414335ec631; valaddr_reg:x3; val_offset:1962*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1962*FLEN/8, x4, x1, x2)

inst_655:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x0c090e20accd5 and fs2 == 0 and fe2 == 0x3fa and fm2 == 0x24b326b764444 and fs3 == 0 and fe3 == 0x7f9 and fm3 == 0x3275e6fb817ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe0c090e20accd5; op2val:0x3fa24b326b764444;
op3val:0x7f93275e6fb817ff; valaddr_reg:x3; val_offset:1965*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1965*FLEN/8, x4, x1, x2)

inst_656:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x0c090e20accd5 and fs2 == 0 and fe2 == 0x3fa and fm2 == 0x24b326b764444 and fs3 == 0 and fe3 == 0x7f9 and fm3 == 0x3275e6fb817ff and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe0c090e20accd5; op2val:0x3fa24b326b764444;
op3val:0x7f93275e6fb817ff; valaddr_reg:x3; val_offset:1968*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1968*FLEN/8, x4, x1, x2)

inst_657:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x0c090e20accd5 and fs2 == 0 and fe2 == 0x3fa and fm2 == 0x24b326b764444 and fs3 == 0 and fe3 == 0x7f9 and fm3 == 0x3275e6fb817ff and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe0c090e20accd5; op2val:0x3fa24b326b764444;
op3val:0x7f93275e6fb817ff; valaddr_reg:x3; val_offset:1971*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1971*FLEN/8, x4, x1, x2)

inst_658:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x0c090e20accd5 and fs2 == 0 and fe2 == 0x3fa and fm2 == 0x24b326b764444 and fs3 == 0 and fe3 == 0x7f9 and fm3 == 0x3275e6fb817ff and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe0c090e20accd5; op2val:0x3fa24b326b764444;
op3val:0x7f93275e6fb817ff; valaddr_reg:x3; val_offset:1974*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1974*FLEN/8, x4, x1, x2)

inst_659:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x0c090e20accd5 and fs2 == 0 and fe2 == 0x3fa and fm2 == 0x24b326b764444 and fs3 == 0 and fe3 == 0x7f9 and fm3 == 0x3275e6fb817ff and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe0c090e20accd5; op2val:0x3fa24b326b764444;
op3val:0x7f93275e6fb817ff; valaddr_reg:x3; val_offset:1977*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1977*FLEN/8, x4, x1, x2)

inst_660:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x0ce68e5faffc7 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xaa92f4d6f9193 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xc0120595fb816 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe0ce68e5faffc7; op2val:0x3ffaa92f4d6f9193;
op3val:0x7fec0120595fb816; valaddr_reg:x3; val_offset:1980*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1980*FLEN/8, x4, x1, x2)

inst_661:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x0ce68e5faffc7 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xaa92f4d6f9193 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xc0120595fb816 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe0ce68e5faffc7; op2val:0x3ffaa92f4d6f9193;
op3val:0x7fec0120595fb816; valaddr_reg:x3; val_offset:1983*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1983*FLEN/8, x4, x1, x2)

inst_662:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x0ce68e5faffc7 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xaa92f4d6f9193 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xc0120595fb816 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe0ce68e5faffc7; op2val:0x3ffaa92f4d6f9193;
op3val:0x7fec0120595fb816; valaddr_reg:x3; val_offset:1986*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1986*FLEN/8, x4, x1, x2)

inst_663:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x0ce68e5faffc7 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xaa92f4d6f9193 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xc0120595fb816 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe0ce68e5faffc7; op2val:0x3ffaa92f4d6f9193;
op3val:0x7fec0120595fb816; valaddr_reg:x3; val_offset:1989*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1989*FLEN/8, x4, x1, x2)

inst_664:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x0ce68e5faffc7 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xaa92f4d6f9193 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xc0120595fb816 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe0ce68e5faffc7; op2val:0x3ffaa92f4d6f9193;
op3val:0x7fec0120595fb816; valaddr_reg:x3; val_offset:1992*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1992*FLEN/8, x4, x1, x2)

inst_665:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x0d9c07eff7bef and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xc5e2e7ea09ee5 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xde041208e97bd and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe0d9c07eff7bef; op2val:0x3ffc5e2e7ea09ee5;
op3val:0x7fede041208e97bd; valaddr_reg:x3; val_offset:1995*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1995*FLEN/8, x4, x1, x2)

inst_666:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x0d9c07eff7bef and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xc5e2e7ea09ee5 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xde041208e97bd and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe0d9c07eff7bef; op2val:0x3ffc5e2e7ea09ee5;
op3val:0x7fede041208e97bd; valaddr_reg:x3; val_offset:1998*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1998*FLEN/8, x4, x1, x2)

inst_667:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x0d9c07eff7bef and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xc5e2e7ea09ee5 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xde041208e97bd and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe0d9c07eff7bef; op2val:0x3ffc5e2e7ea09ee5;
op3val:0x7fede041208e97bd; valaddr_reg:x3; val_offset:2001*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2001*FLEN/8, x4, x1, x2)

inst_668:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x0d9c07eff7bef and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xc5e2e7ea09ee5 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xde041208e97bd and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe0d9c07eff7bef; op2val:0x3ffc5e2e7ea09ee5;
op3val:0x7fede041208e97bd; valaddr_reg:x3; val_offset:2004*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2004*FLEN/8, x4, x1, x2)

inst_669:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x0d9c07eff7bef and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xc5e2e7ea09ee5 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xde041208e97bd and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe0d9c07eff7bef; op2val:0x3ffc5e2e7ea09ee5;
op3val:0x7fede041208e97bd; valaddr_reg:x3; val_offset:2007*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2007*FLEN/8, x4, x1, x2)

inst_670:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x0dc7ce6d690ca and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xcf5fb3c558905 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0xe85138f02904f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe0dc7ce6d690ca; op2val:0x3fdcf5fb3c558905;
op3val:0x7fce85138f02904f; valaddr_reg:x3; val_offset:2010*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2010*FLEN/8, x4, x1, x2)

inst_671:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x0dc7ce6d690ca and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xcf5fb3c558905 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0xe85138f02904f and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe0dc7ce6d690ca; op2val:0x3fdcf5fb3c558905;
op3val:0x7fce85138f02904f; valaddr_reg:x3; val_offset:2013*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2013*FLEN/8, x4, x1, x2)

inst_672:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x0dc7ce6d690ca and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xcf5fb3c558905 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0xe85138f02904f and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe0dc7ce6d690ca; op2val:0x3fdcf5fb3c558905;
op3val:0x7fce85138f02904f; valaddr_reg:x3; val_offset:2016*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2016*FLEN/8, x4, x1, x2)

inst_673:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x0dc7ce6d690ca and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xcf5fb3c558905 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0xe85138f02904f and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe0dc7ce6d690ca; op2val:0x3fdcf5fb3c558905;
op3val:0x7fce85138f02904f; valaddr_reg:x3; val_offset:2019*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2019*FLEN/8, x4, x1, x2)

inst_674:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x0dc7ce6d690ca and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xcf5fb3c558905 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0xe85138f02904f and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe0dc7ce6d690ca; op2val:0x3fdcf5fb3c558905;
op3val:0x7fce85138f02904f; valaddr_reg:x3; val_offset:2022*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2022*FLEN/8, x4, x1, x2)

inst_675:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x0e645c5313e6b and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xda53976a38938 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xf4fe1d69258d9 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe0e645c5313e6b; op2val:0x3ffda53976a38938;
op3val:0x7fef4fe1d69258d9; valaddr_reg:x3; val_offset:2025*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2025*FLEN/8, x4, x1, x2)

inst_676:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x0e645c5313e6b and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xda53976a38938 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xf4fe1d69258d9 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe0e645c5313e6b; op2val:0x3ffda53976a38938;
op3val:0x7fef4fe1d69258d9; valaddr_reg:x3; val_offset:2028*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2028*FLEN/8, x4, x1, x2)

inst_677:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x0e645c5313e6b and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xda53976a38938 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xf4fe1d69258d9 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe0e645c5313e6b; op2val:0x3ffda53976a38938;
op3val:0x7fef4fe1d69258d9; valaddr_reg:x3; val_offset:2031*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2031*FLEN/8, x4, x1, x2)

inst_678:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x0e645c5313e6b and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xda53976a38938 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xf4fe1d69258d9 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe0e645c5313e6b; op2val:0x3ffda53976a38938;
op3val:0x7fef4fe1d69258d9; valaddr_reg:x3; val_offset:2034*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2034*FLEN/8, x4, x1, x2)

inst_679:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x0e645c5313e6b and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xda53976a38938 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xf4fe1d69258d9 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe0e645c5313e6b; op2val:0x3ffda53976a38938;
op3val:0x7fef4fe1d69258d9; valaddr_reg:x3; val_offset:2037*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2037*FLEN/8, x4, x1, x2)

inst_680:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x0e77c0d726f3b and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x1c2e7961399e0 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x2c3df3b0a844b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe0e77c0d726f3b; op2val:0x3fd1c2e7961399e0;
op3val:0x7fc2c3df3b0a844b; valaddr_reg:x3; val_offset:2040*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2040*FLEN/8, x4, x1, x2)

inst_681:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x0e77c0d726f3b and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x1c2e7961399e0 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x2c3df3b0a844b and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe0e77c0d726f3b; op2val:0x3fd1c2e7961399e0;
op3val:0x7fc2c3df3b0a844b; valaddr_reg:x3; val_offset:2043*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2043*FLEN/8, x4, x1, x2)

inst_682:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x0e77c0d726f3b and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x1c2e7961399e0 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x2c3df3b0a844b and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe0e77c0d726f3b; op2val:0x3fd1c2e7961399e0;
op3val:0x7fc2c3df3b0a844b; valaddr_reg:x3; val_offset:2046*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2046*FLEN/8, x4, x1, x2)

inst_683:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x0e77c0d726f3b and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x1c2e7961399e0 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x2c3df3b0a844b and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe0e77c0d726f3b; op2val:0x3fd1c2e7961399e0;
op3val:0x7fc2c3df3b0a844b; valaddr_reg:x3; val_offset:2049*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2049*FLEN/8, x4, x1, x2)

inst_684:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x0e77c0d726f3b and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x1c2e7961399e0 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x2c3df3b0a844b and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe0e77c0d726f3b; op2val:0x3fd1c2e7961399e0;
op3val:0x7fc2c3df3b0a844b; valaddr_reg:x3; val_offset:2052*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2052*FLEN/8, x4, x1, x2)

inst_685:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x10aff362a9091 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x7677719c0fb36 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x8ee048602c301 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe10aff362a9091; op2val:0x3ff7677719c0fb36;
op3val:0x7fe8ee048602c301; valaddr_reg:x3; val_offset:2055*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2055*FLEN/8, x4, x1, x2)

inst_686:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x10aff362a9091 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x7677719c0fb36 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x8ee048602c301 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe10aff362a9091; op2val:0x3ff7677719c0fb36;
op3val:0x7fe8ee048602c301; valaddr_reg:x3; val_offset:2058*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2058*FLEN/8, x4, x1, x2)

inst_687:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x10aff362a9091 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x7677719c0fb36 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x8ee048602c301 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe10aff362a9091; op2val:0x3ff7677719c0fb36;
op3val:0x7fe8ee048602c301; valaddr_reg:x3; val_offset:2061*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2061*FLEN/8, x4, x1, x2)

inst_688:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x10aff362a9091 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x7677719c0fb36 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x8ee048602c301 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe10aff362a9091; op2val:0x3ff7677719c0fb36;
op3val:0x7fe8ee048602c301; valaddr_reg:x3; val_offset:2064*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2064*FLEN/8, x4, x1, x2)

inst_689:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x10aff362a9091 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x7677719c0fb36 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x8ee048602c301 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe10aff362a9091; op2val:0x3ff7677719c0fb36;
op3val:0x7fe8ee048602c301; valaddr_reg:x3; val_offset:2067*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2067*FLEN/8, x4, x1, x2)

inst_690:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x125f20460639f and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x5d6446920937c and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x767727ca98cc1 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe125f20460639f; op2val:0x3fe5d6446920937c;
op3val:0x7fd767727ca98cc1; valaddr_reg:x3; val_offset:2070*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2070*FLEN/8, x4, x1, x2)

inst_691:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x125f20460639f and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x5d6446920937c and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x767727ca98cc1 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe125f20460639f; op2val:0x3fe5d6446920937c;
op3val:0x7fd767727ca98cc1; valaddr_reg:x3; val_offset:2073*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2073*FLEN/8, x4, x1, x2)

inst_692:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x125f20460639f and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x5d6446920937c and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x767727ca98cc1 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe125f20460639f; op2val:0x3fe5d6446920937c;
op3val:0x7fd767727ca98cc1; valaddr_reg:x3; val_offset:2076*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2076*FLEN/8, x4, x1, x2)

inst_693:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x125f20460639f and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x5d6446920937c and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x767727ca98cc1 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe125f20460639f; op2val:0x3fe5d6446920937c;
op3val:0x7fd767727ca98cc1; valaddr_reg:x3; val_offset:2079*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2079*FLEN/8, x4, x1, x2)

inst_694:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x125f20460639f and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x5d6446920937c and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x767727ca98cc1 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe125f20460639f; op2val:0x3fe5d6446920937c;
op3val:0x7fd767727ca98cc1; valaddr_reg:x3; val_offset:2082*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2082*FLEN/8, x4, x1, x2)

inst_695:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x161ab23a815d4 and fs2 == 0 and fe2 == 0x3fa and fm2 == 0x97d93afcb77c8 and fs3 == 0 and fe3 == 0x7f9 and fm3 == 0xbb106e10ad3ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe161ab23a815d4; op2val:0x3fa97d93afcb77c8;
op3val:0x7f9bb106e10ad3ff; valaddr_reg:x3; val_offset:2085*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2085*FLEN/8, x4, x1, x2)

inst_696:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x161ab23a815d4 and fs2 == 0 and fe2 == 0x3fa and fm2 == 0x97d93afcb77c8 and fs3 == 0 and fe3 == 0x7f9 and fm3 == 0xbb106e10ad3ff and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe161ab23a815d4; op2val:0x3fa97d93afcb77c8;
op3val:0x7f9bb106e10ad3ff; valaddr_reg:x3; val_offset:2088*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2088*FLEN/8, x4, x1, x2)

inst_697:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x161ab23a815d4 and fs2 == 0 and fe2 == 0x3fa and fm2 == 0x97d93afcb77c8 and fs3 == 0 and fe3 == 0x7f9 and fm3 == 0xbb106e10ad3ff and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe161ab23a815d4; op2val:0x3fa97d93afcb77c8;
op3val:0x7f9bb106e10ad3ff; valaddr_reg:x3; val_offset:2091*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2091*FLEN/8, x4, x1, x2)

inst_698:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x161ab23a815d4 and fs2 == 0 and fe2 == 0x3fa and fm2 == 0x97d93afcb77c8 and fs3 == 0 and fe3 == 0x7f9 and fm3 == 0xbb106e10ad3ff and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe161ab23a815d4; op2val:0x3fa97d93afcb77c8;
op3val:0x7f9bb106e10ad3ff; valaddr_reg:x3; val_offset:2094*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2094*FLEN/8, x4, x1, x2)

inst_699:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x161ab23a815d4 and fs2 == 0 and fe2 == 0x3fa and fm2 == 0x97d93afcb77c8 and fs3 == 0 and fe3 == 0x7f9 and fm3 == 0xbb106e10ad3ff and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe161ab23a815d4; op2val:0x3fa97d93afcb77c8;
op3val:0x7f9bb106e10ad3ff; valaddr_reg:x3; val_offset:2097*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2097*FLEN/8, x4, x1, x2)

inst_700:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x1871f66d9338f and fs2 == 0 and fe2 == 0x3fb and fm2 == 0xd5883b90379fc and fs3 == 0 and fe3 == 0x7fb and fm3 == 0x012f0320f4e17 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe1871f66d9338f; op2val:0x3fbd5883b90379fc;
op3val:0x7fb012f0320f4e17; valaddr_reg:x3; val_offset:2100*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2100*FLEN/8, x4, x1, x2)

inst_701:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x1871f66d9338f and fs2 == 0 and fe2 == 0x3fb and fm2 == 0xd5883b90379fc and fs3 == 0 and fe3 == 0x7fb and fm3 == 0x012f0320f4e17 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe1871f66d9338f; op2val:0x3fbd5883b90379fc;
op3val:0x7fb012f0320f4e17; valaddr_reg:x3; val_offset:2103*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2103*FLEN/8, x4, x1, x2)

inst_702:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x1871f66d9338f and fs2 == 0 and fe2 == 0x3fb and fm2 == 0xd5883b90379fc and fs3 == 0 and fe3 == 0x7fb and fm3 == 0x012f0320f4e17 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe1871f66d9338f; op2val:0x3fbd5883b90379fc;
op3val:0x7fb012f0320f4e17; valaddr_reg:x3; val_offset:2106*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2106*FLEN/8, x4, x1, x2)

inst_703:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x1871f66d9338f and fs2 == 0 and fe2 == 0x3fb and fm2 == 0xd5883b90379fc and fs3 == 0 and fe3 == 0x7fb and fm3 == 0x012f0320f4e17 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe1871f66d9338f; op2val:0x3fbd5883b90379fc;
op3val:0x7fb012f0320f4e17; valaddr_reg:x3; val_offset:2109*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2109*FLEN/8, x4, x1, x2)

inst_704:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x1871f66d9338f and fs2 == 0 and fe2 == 0x3fb and fm2 == 0xd5883b90379fc and fs3 == 0 and fe3 == 0x7fb and fm3 == 0x012f0320f4e17 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe1871f66d9338f; op2val:0x3fbd5883b90379fc;
op3val:0x7fb012f0320f4e17; valaddr_reg:x3; val_offset:2112*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2112*FLEN/8, x4, x1, x2)

inst_705:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x19503011c81db and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x9b981b1265c97 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xc44ae288c365c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe19503011c81db; op2val:0x3ff9b981b1265c97;
op3val:0x7fec44ae288c365c; valaddr_reg:x3; val_offset:2115*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2115*FLEN/8, x4, x1, x2)

inst_706:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x19503011c81db and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x9b981b1265c97 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xc44ae288c365c and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe19503011c81db; op2val:0x3ff9b981b1265c97;
op3val:0x7fec44ae288c365c; valaddr_reg:x3; val_offset:2118*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2118*FLEN/8, x4, x1, x2)

inst_707:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x19503011c81db and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x9b981b1265c97 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xc44ae288c365c and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe19503011c81db; op2val:0x3ff9b981b1265c97;
op3val:0x7fec44ae288c365c; valaddr_reg:x3; val_offset:2121*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2121*FLEN/8, x4, x1, x2)

inst_708:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x19503011c81db and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x9b981b1265c97 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xc44ae288c365c and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe19503011c81db; op2val:0x3ff9b981b1265c97;
op3val:0x7fec44ae288c365c; valaddr_reg:x3; val_offset:2124*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2124*FLEN/8, x4, x1, x2)

inst_709:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x19503011c81db and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x9b981b1265c97 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xc44ae288c365c and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe19503011c81db; op2val:0x3ff9b981b1265c97;
op3val:0x7fec44ae288c365c; valaddr_reg:x3; val_offset:2127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2127*FLEN/8, x4, x1, x2)

inst_710:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x1b2b385abc95c and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xaceecb7c0e89e and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xda74657a9659d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe1b2b385abc95c; op2val:0x3ffaceecb7c0e89e;
op3val:0x7feda74657a9659d; valaddr_reg:x3; val_offset:2130*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2130*FLEN/8, x4, x1, x2)

inst_711:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x1b2b385abc95c and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xaceecb7c0e89e and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xda74657a9659d and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe1b2b385abc95c; op2val:0x3ffaceecb7c0e89e;
op3val:0x7feda74657a9659d; valaddr_reg:x3; val_offset:2133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2133*FLEN/8, x4, x1, x2)

inst_712:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x1b2b385abc95c and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xaceecb7c0e89e and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xda74657a9659d and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe1b2b385abc95c; op2val:0x3ffaceecb7c0e89e;
op3val:0x7feda74657a9659d; valaddr_reg:x3; val_offset:2136*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2136*FLEN/8, x4, x1, x2)

inst_713:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x1b2b385abc95c and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xaceecb7c0e89e and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xda74657a9659d and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe1b2b385abc95c; op2val:0x3ffaceecb7c0e89e;
op3val:0x7feda74657a9659d; valaddr_reg:x3; val_offset:2139*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2139*FLEN/8, x4, x1, x2)

inst_714:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x1b2b385abc95c and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xaceecb7c0e89e and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xda74657a9659d and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe1b2b385abc95c; op2val:0x3ffaceecb7c0e89e;
op3val:0x7feda74657a9659d; valaddr_reg:x3; val_offset:2142*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2142*FLEN/8, x4, x1, x2)

inst_715:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x1bac795d5adc9 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x97077011e014f and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xc30772da00dd3 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe1bac795d5adc9; op2val:0x3fe97077011e014f;
op3val:0x7fdc30772da00dd3; valaddr_reg:x3; val_offset:2145*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2145*FLEN/8, x4, x1, x2)

inst_716:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x1bac795d5adc9 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x97077011e014f and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xc30772da00dd3 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe1bac795d5adc9; op2val:0x3fe97077011e014f;
op3val:0x7fdc30772da00dd3; valaddr_reg:x3; val_offset:2148*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2148*FLEN/8, x4, x1, x2)

inst_717:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x1bac795d5adc9 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x97077011e014f and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xc30772da00dd3 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe1bac795d5adc9; op2val:0x3fe97077011e014f;
op3val:0x7fdc30772da00dd3; valaddr_reg:x3; val_offset:2151*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2151*FLEN/8, x4, x1, x2)

inst_718:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x1bac795d5adc9 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x97077011e014f and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xc30772da00dd3 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe1bac795d5adc9; op2val:0x3fe97077011e014f;
op3val:0x7fdc30772da00dd3; valaddr_reg:x3; val_offset:2154*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2154*FLEN/8, x4, x1, x2)

inst_719:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x1bac795d5adc9 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x97077011e014f and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xc30772da00dd3 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe1bac795d5adc9; op2val:0x3fe97077011e014f;
op3val:0x7fdc30772da00dd3; valaddr_reg:x3; val_offset:2157*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2157*FLEN/8, x4, x1, x2)

inst_720:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x1c62e09ee1112 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x69777b155c7d7 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x918c2971b2037 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe1c62e09ee1112; op2val:0x3ff69777b155c7d7;
op3val:0x7fe918c2971b2037; valaddr_reg:x3; val_offset:2160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2160*FLEN/8, x4, x1, x2)

inst_721:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x1c62e09ee1112 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x69777b155c7d7 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x918c2971b2037 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe1c62e09ee1112; op2val:0x3ff69777b155c7d7;
op3val:0x7fe918c2971b2037; valaddr_reg:x3; val_offset:2163*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2163*FLEN/8, x4, x1, x2)

inst_722:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x1c62e09ee1112 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x69777b155c7d7 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x918c2971b2037 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe1c62e09ee1112; op2val:0x3ff69777b155c7d7;
op3val:0x7fe918c2971b2037; valaddr_reg:x3; val_offset:2166*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2166*FLEN/8, x4, x1, x2)

inst_723:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x1c62e09ee1112 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x69777b155c7d7 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x918c2971b2037 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe1c62e09ee1112; op2val:0x3ff69777b155c7d7;
op3val:0x7fe918c2971b2037; valaddr_reg:x3; val_offset:2169*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2169*FLEN/8, x4, x1, x2)

inst_724:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x1c62e09ee1112 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x69777b155c7d7 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x918c2971b2037 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe1c62e09ee1112; op2val:0x3ff69777b155c7d7;
op3val:0x7fe918c2971b2037; valaddr_reg:x3; val_offset:2172*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2172*FLEN/8, x4, x1, x2)

inst_725:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x1e7897f922e58 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xaf951defdb85e and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xe2f3e58cf735c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe1e7897f922e58; op2val:0x3ffaf951defdb85e;
op3val:0x7fee2f3e58cf735c; valaddr_reg:x3; val_offset:2175*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2175*FLEN/8, x4, x1, x2)

inst_726:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x1e7897f922e58 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xaf951defdb85e and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xe2f3e58cf735c and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe1e7897f922e58; op2val:0x3ffaf951defdb85e;
op3val:0x7fee2f3e58cf735c; valaddr_reg:x3; val_offset:2178*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2178*FLEN/8, x4, x1, x2)

inst_727:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x1e7897f922e58 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xaf951defdb85e and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xe2f3e58cf735c and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe1e7897f922e58; op2val:0x3ffaf951defdb85e;
op3val:0x7fee2f3e58cf735c; valaddr_reg:x3; val_offset:2181*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2181*FLEN/8, x4, x1, x2)

inst_728:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x1e7897f922e58 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xaf951defdb85e and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xe2f3e58cf735c and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe1e7897f922e58; op2val:0x3ffaf951defdb85e;
op3val:0x7fee2f3e58cf735c; valaddr_reg:x3; val_offset:2184*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2184*FLEN/8, x4, x1, x2)

inst_729:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x1e7897f922e58 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xaf951defdb85e and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xe2f3e58cf735c and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe1e7897f922e58; op2val:0x3ffaf951defdb85e;
op3val:0x7fee2f3e58cf735c; valaddr_reg:x3; val_offset:2187*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2187*FLEN/8, x4, x1, x2)

inst_730:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x1f9afe81c88d6 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x5a5b1745cb880 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x851dd239377e5 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe1f9afe81c88d6; op2val:0x3ff5a5b1745cb880;
op3val:0x7fe851dd239377e5; valaddr_reg:x3; val_offset:2190*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2190*FLEN/8, x4, x1, x2)

inst_731:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x1f9afe81c88d6 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x5a5b1745cb880 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x851dd239377e5 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe1f9afe81c88d6; op2val:0x3ff5a5b1745cb880;
op3val:0x7fe851dd239377e5; valaddr_reg:x3; val_offset:2193*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2193*FLEN/8, x4, x1, x2)

inst_732:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x1f9afe81c88d6 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x5a5b1745cb880 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x851dd239377e5 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe1f9afe81c88d6; op2val:0x3ff5a5b1745cb880;
op3val:0x7fe851dd239377e5; valaddr_reg:x3; val_offset:2196*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2196*FLEN/8, x4, x1, x2)

inst_733:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x1f9afe81c88d6 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x5a5b1745cb880 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x851dd239377e5 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe1f9afe81c88d6; op2val:0x3ff5a5b1745cb880;
op3val:0x7fe851dd239377e5; valaddr_reg:x3; val_offset:2199*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2199*FLEN/8, x4, x1, x2)

inst_734:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x1f9afe81c88d6 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x5a5b1745cb880 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x851dd239377e5 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe1f9afe81c88d6; op2val:0x3ff5a5b1745cb880;
op3val:0x7fe851dd239377e5; valaddr_reg:x3; val_offset:2202*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2202*FLEN/8, x4, x1, x2)

inst_735:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x2425049fa7b93 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x3a3ed6a3e60e5 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x669d1d94ee5cc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe2425049fa7b93; op2val:0x3ff3a3ed6a3e60e5;
op3val:0x7fe669d1d94ee5cc; valaddr_reg:x3; val_offset:2205*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2205*FLEN/8, x4, x1, x2)

inst_736:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x2425049fa7b93 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x3a3ed6a3e60e5 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x669d1d94ee5cc and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe2425049fa7b93; op2val:0x3ff3a3ed6a3e60e5;
op3val:0x7fe669d1d94ee5cc; valaddr_reg:x3; val_offset:2208*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2208*FLEN/8, x4, x1, x2)

inst_737:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x2425049fa7b93 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x3a3ed6a3e60e5 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x669d1d94ee5cc and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe2425049fa7b93; op2val:0x3ff3a3ed6a3e60e5;
op3val:0x7fe669d1d94ee5cc; valaddr_reg:x3; val_offset:2211*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2211*FLEN/8, x4, x1, x2)

inst_738:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x2425049fa7b93 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x3a3ed6a3e60e5 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x669d1d94ee5cc and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe2425049fa7b93; op2val:0x3ff3a3ed6a3e60e5;
op3val:0x7fe669d1d94ee5cc; valaddr_reg:x3; val_offset:2214*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2214*FLEN/8, x4, x1, x2)

inst_739:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x2425049fa7b93 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x3a3ed6a3e60e5 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x669d1d94ee5cc and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe2425049fa7b93; op2val:0x3ff3a3ed6a3e60e5;
op3val:0x7fe669d1d94ee5cc; valaddr_reg:x3; val_offset:2217*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2217*FLEN/8, x4, x1, x2)

inst_740:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x277a09a57982a and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x5fee54562abf2 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x9633680658f13 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe277a09a57982a; op2val:0x3fe5fee54562abf2;
op3val:0x7fd9633680658f13; valaddr_reg:x3; val_offset:2220*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2220*FLEN/8, x4, x1, x2)

inst_741:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x277a09a57982a and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x5fee54562abf2 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x9633680658f13 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe277a09a57982a; op2val:0x3fe5fee54562abf2;
op3val:0x7fd9633680658f13; valaddr_reg:x3; val_offset:2223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2223*FLEN/8, x4, x1, x2)

inst_742:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x277a09a57982a and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x5fee54562abf2 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x9633680658f13 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe277a09a57982a; op2val:0x3fe5fee54562abf2;
op3val:0x7fd9633680658f13; valaddr_reg:x3; val_offset:2226*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2226*FLEN/8, x4, x1, x2)

inst_743:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x277a09a57982a and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x5fee54562abf2 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x9633680658f13 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe277a09a57982a; op2val:0x3fe5fee54562abf2;
op3val:0x7fd9633680658f13; valaddr_reg:x3; val_offset:2229*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2229*FLEN/8, x4, x1, x2)

inst_744:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x277a09a57982a and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x5fee54562abf2 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x9633680658f13 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe277a09a57982a; op2val:0x3fe5fee54562abf2;
op3val:0x7fd9633680658f13; valaddr_reg:x3; val_offset:2232*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2232*FLEN/8, x4, x1, x2)

inst_745:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x28e8063300472 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x92cabe4efe922 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xd3277d88cd395 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe28e8063300472; op2val:0x3fe92cabe4efe922;
op3val:0x7fdd3277d88cd395; valaddr_reg:x3; val_offset:2235*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2235*FLEN/8, x4, x1, x2)

inst_746:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x28e8063300472 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x92cabe4efe922 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xd3277d88cd395 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe28e8063300472; op2val:0x3fe92cabe4efe922;
op3val:0x7fdd3277d88cd395; valaddr_reg:x3; val_offset:2238*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2238*FLEN/8, x4, x1, x2)

inst_747:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x28e8063300472 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x92cabe4efe922 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xd3277d88cd395 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe28e8063300472; op2val:0x3fe92cabe4efe922;
op3val:0x7fdd3277d88cd395; valaddr_reg:x3; val_offset:2241*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2241*FLEN/8, x4, x1, x2)

inst_748:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x28e8063300472 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x92cabe4efe922 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xd3277d88cd395 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe28e8063300472; op2val:0x3fe92cabe4efe922;
op3val:0x7fdd3277d88cd395; valaddr_reg:x3; val_offset:2244*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2244*FLEN/8, x4, x1, x2)

inst_749:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x28e8063300472 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x92cabe4efe922 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xd3277d88cd395 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe28e8063300472; op2val:0x3fe92cabe4efe922;
op3val:0x7fdd3277d88cd395; valaddr_reg:x3; val_offset:2247*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2247*FLEN/8, x4, x1, x2)

inst_750:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x2aacb0b429baf and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x8cd8ba7eb2d96 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xcefffca1129bf and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe2aacb0b429baf; op2val:0x3ff8cd8ba7eb2d96;
op3val:0x7fecefffca1129bf; valaddr_reg:x3; val_offset:2250*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2250*FLEN/8, x4, x1, x2)

inst_751:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x2aacb0b429baf and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x8cd8ba7eb2d96 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xcefffca1129bf and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe2aacb0b429baf; op2val:0x3ff8cd8ba7eb2d96;
op3val:0x7fecefffca1129bf; valaddr_reg:x3; val_offset:2253*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2253*FLEN/8, x4, x1, x2)

inst_752:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x2aacb0b429baf and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x8cd8ba7eb2d96 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xcefffca1129bf and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe2aacb0b429baf; op2val:0x3ff8cd8ba7eb2d96;
op3val:0x7fecefffca1129bf; valaddr_reg:x3; val_offset:2256*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2256*FLEN/8, x4, x1, x2)

inst_753:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x2aacb0b429baf and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x8cd8ba7eb2d96 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xcefffca1129bf and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe2aacb0b429baf; op2val:0x3ff8cd8ba7eb2d96;
op3val:0x7fecefffca1129bf; valaddr_reg:x3; val_offset:2259*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2259*FLEN/8, x4, x1, x2)

inst_754:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x2aacb0b429baf and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x8cd8ba7eb2d96 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xcefffca1129bf and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe2aacb0b429baf; op2val:0x3ff8cd8ba7eb2d96;
op3val:0x7fecefffca1129bf; valaddr_reg:x3; val_offset:2262*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2262*FLEN/8, x4, x1, x2)

inst_755:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x2bd1927d49ed6 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xceb14dd622f0f and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x0ef1eeb69b9b5 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe2bd1927d49ed6; op2val:0x3feceb14dd622f0f;
op3val:0x7fe0ef1eeb69b9b5; valaddr_reg:x3; val_offset:2265*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2265*FLEN/8, x4, x1, x2)

inst_756:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x2bd1927d49ed6 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xceb14dd622f0f and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x0ef1eeb69b9b5 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe2bd1927d49ed6; op2val:0x3feceb14dd622f0f;
op3val:0x7fe0ef1eeb69b9b5; valaddr_reg:x3; val_offset:2268*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2268*FLEN/8, x4, x1, x2)

inst_757:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x2bd1927d49ed6 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xceb14dd622f0f and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x0ef1eeb69b9b5 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe2bd1927d49ed6; op2val:0x3feceb14dd622f0f;
op3val:0x7fe0ef1eeb69b9b5; valaddr_reg:x3; val_offset:2271*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2271*FLEN/8, x4, x1, x2)

inst_758:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x2bd1927d49ed6 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xceb14dd622f0f and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x0ef1eeb69b9b5 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe2bd1927d49ed6; op2val:0x3feceb14dd622f0f;
op3val:0x7fe0ef1eeb69b9b5; valaddr_reg:x3; val_offset:2274*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2274*FLEN/8, x4, x1, x2)

inst_759:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x2bd1927d49ed6 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xceb14dd622f0f and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x0ef1eeb69b9b5 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe2bd1927d49ed6; op2val:0x3feceb14dd622f0f;
op3val:0x7fe0ef1eeb69b9b5; valaddr_reg:x3; val_offset:2277*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2277*FLEN/8, x4, x1, x2)

inst_760:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x2da1988bab816 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xc8b320bc03279 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x0d0d7324164e3 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe2da1988bab816; op2val:0x3fdc8b320bc03279;
op3val:0x7fd0d0d7324164e3; valaddr_reg:x3; val_offset:2280*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2280*FLEN/8, x4, x1, x2)

inst_761:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x2da1988bab816 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xc8b320bc03279 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x0d0d7324164e3 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe2da1988bab816; op2val:0x3fdc8b320bc03279;
op3val:0x7fd0d0d7324164e3; valaddr_reg:x3; val_offset:2283*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2283*FLEN/8, x4, x1, x2)

inst_762:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x2da1988bab816 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xc8b320bc03279 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x0d0d7324164e3 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe2da1988bab816; op2val:0x3fdc8b320bc03279;
op3val:0x7fd0d0d7324164e3; valaddr_reg:x3; val_offset:2286*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2286*FLEN/8, x4, x1, x2)

inst_763:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x2da1988bab816 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xc8b320bc03279 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x0d0d7324164e3 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe2da1988bab816; op2val:0x3fdc8b320bc03279;
op3val:0x7fd0d0d7324164e3; valaddr_reg:x3; val_offset:2289*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2289*FLEN/8, x4, x1, x2)

inst_764:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x2da1988bab816 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xc8b320bc03279 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x0d0d7324164e3 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe2da1988bab816; op2val:0x3fdc8b320bc03279;
op3val:0x7fd0d0d7324164e3; valaddr_reg:x3; val_offset:2292*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2292*FLEN/8, x4, x1, x2)

inst_765:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x399d413e4b88b and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xa694f80594a8c and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x02d7dc26caf5a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe399d413e4b88b; op2val:0x3fea694f80594a8c;
op3val:0x7fe02d7dc26caf5a; valaddr_reg:x3; val_offset:2295*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2295*FLEN/8, x4, x1, x2)

inst_766:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x399d413e4b88b and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xa694f80594a8c and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x02d7dc26caf5a and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe399d413e4b88b; op2val:0x3fea694f80594a8c;
op3val:0x7fe02d7dc26caf5a; valaddr_reg:x3; val_offset:2298*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2298*FLEN/8, x4, x1, x2)

inst_767:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x399d413e4b88b and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xa694f80594a8c and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x02d7dc26caf5a and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe399d413e4b88b; op2val:0x3fea694f80594a8c;
op3val:0x7fe02d7dc26caf5a; valaddr_reg:x3; val_offset:2301*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2301*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_7)

inst_768:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x399d413e4b88b and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xa694f80594a8c and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x02d7dc26caf5a and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe399d413e4b88b; op2val:0x3fea694f80594a8c;
op3val:0x7fe02d7dc26caf5a; valaddr_reg:x3; val_offset:2304*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2304*FLEN/8, x4, x1, x2)

inst_769:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x399d413e4b88b and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xa694f80594a8c and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x02d7dc26caf5a and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe399d413e4b88b; op2val:0x3fea694f80594a8c;
op3val:0x7fe02d7dc26caf5a; valaddr_reg:x3; val_offset:2307*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2307*FLEN/8, x4, x1, x2)

inst_770:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x3a67401814244 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0xef6f697feeed4 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x303b3ca268aa7 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe3a67401814244; op2val:0x3fcef6f697feeed4;
op3val:0x7fc303b3ca268aa7; valaddr_reg:x3; val_offset:2310*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2310*FLEN/8, x4, x1, x2)

inst_771:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x3a67401814244 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0xef6f697feeed4 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x303b3ca268aa7 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe3a67401814244; op2val:0x3fcef6f697feeed4;
op3val:0x7fc303b3ca268aa7; valaddr_reg:x3; val_offset:2313*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2313*FLEN/8, x4, x1, x2)

inst_772:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x3a67401814244 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0xef6f697feeed4 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x303b3ca268aa7 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe3a67401814244; op2val:0x3fcef6f697feeed4;
op3val:0x7fc303b3ca268aa7; valaddr_reg:x3; val_offset:2316*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2316*FLEN/8, x4, x1, x2)

inst_773:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x3a67401814244 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0xef6f697feeed4 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x303b3ca268aa7 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe3a67401814244; op2val:0x3fcef6f697feeed4;
op3val:0x7fc303b3ca268aa7; valaddr_reg:x3; val_offset:2319*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2319*FLEN/8, x4, x1, x2)

inst_774:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x3a67401814244 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0xef6f697feeed4 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x303b3ca268aa7 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe3a67401814244; op2val:0x3fcef6f697feeed4;
op3val:0x7fc303b3ca268aa7; valaddr_reg:x3; val_offset:2322*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2322*FLEN/8, x4, x1, x2)

inst_775:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x3f735e92e8b84 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xa45ded224b04e and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x06473dfd7d552 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe3f735e92e8b84; op2val:0x3fea45ded224b04e;
op3val:0x7fe06473dfd7d552; valaddr_reg:x3; val_offset:2325*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2325*FLEN/8, x4, x1, x2)

inst_776:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x3f735e92e8b84 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xa45ded224b04e and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x06473dfd7d552 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe3f735e92e8b84; op2val:0x3fea45ded224b04e;
op3val:0x7fe06473dfd7d552; valaddr_reg:x3; val_offset:2328*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2328*FLEN/8, x4, x1, x2)

inst_777:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x3f735e92e8b84 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xa45ded224b04e and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x06473dfd7d552 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe3f735e92e8b84; op2val:0x3fea45ded224b04e;
op3val:0x7fe06473dfd7d552; valaddr_reg:x3; val_offset:2331*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2331*FLEN/8, x4, x1, x2)

inst_778:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x3f735e92e8b84 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xa45ded224b04e and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x06473dfd7d552 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe3f735e92e8b84; op2val:0x3fea45ded224b04e;
op3val:0x7fe06473dfd7d552; valaddr_reg:x3; val_offset:2334*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2334*FLEN/8, x4, x1, x2)

inst_779:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x3f735e92e8b84 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xa45ded224b04e and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x06473dfd7d552 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe3f735e92e8b84; op2val:0x3fea45ded224b04e;
op3val:0x7fe06473dfd7d552; valaddr_reg:x3; val_offset:2337*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2337*FLEN/8, x4, x1, x2)

inst_780:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x3f85a17f0e51b and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x7151666c9f6a7 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xccf536e70e88e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe3f85a17f0e51b; op2val:0x3ff7151666c9f6a7;
op3val:0x7feccf536e70e88e; valaddr_reg:x3; val_offset:2340*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2340*FLEN/8, x4, x1, x2)

inst_781:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x3f85a17f0e51b and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x7151666c9f6a7 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xccf536e70e88e and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe3f85a17f0e51b; op2val:0x3ff7151666c9f6a7;
op3val:0x7feccf536e70e88e; valaddr_reg:x3; val_offset:2343*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2343*FLEN/8, x4, x1, x2)

inst_782:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x3f85a17f0e51b and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x7151666c9f6a7 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xccf536e70e88e and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe3f85a17f0e51b; op2val:0x3ff7151666c9f6a7;
op3val:0x7feccf536e70e88e; valaddr_reg:x3; val_offset:2346*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2346*FLEN/8, x4, x1, x2)

inst_783:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x3f85a17f0e51b and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x7151666c9f6a7 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xccf536e70e88e and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe3f85a17f0e51b; op2val:0x3ff7151666c9f6a7;
op3val:0x7feccf536e70e88e; valaddr_reg:x3; val_offset:2349*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2349*FLEN/8, x4, x1, x2)

inst_784:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x3f85a17f0e51b and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x7151666c9f6a7 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xccf536e70e88e and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe3f85a17f0e51b; op2val:0x3ff7151666c9f6a7;
op3val:0x7feccf536e70e88e; valaddr_reg:x3; val_offset:2352*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2352*FLEN/8, x4, x1, x2)

inst_785:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x413eed654fd22 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x82ad1aedc7830 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xe53a1b43f58c2 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe413eed654fd22; op2val:0x3ff82ad1aedc7830;
op3val:0x7fee53a1b43f58c2; valaddr_reg:x3; val_offset:2355*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2355*FLEN/8, x4, x1, x2)

inst_786:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x413eed654fd22 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x82ad1aedc7830 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xe53a1b43f58c2 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe413eed654fd22; op2val:0x3ff82ad1aedc7830;
op3val:0x7fee53a1b43f58c2; valaddr_reg:x3; val_offset:2358*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2358*FLEN/8, x4, x1, x2)

inst_787:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x413eed654fd22 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x82ad1aedc7830 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xe53a1b43f58c2 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe413eed654fd22; op2val:0x3ff82ad1aedc7830;
op3val:0x7fee53a1b43f58c2; valaddr_reg:x3; val_offset:2361*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2361*FLEN/8, x4, x1, x2)

inst_788:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x413eed654fd22 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x82ad1aedc7830 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xe53a1b43f58c2 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe413eed654fd22; op2val:0x3ff82ad1aedc7830;
op3val:0x7fee53a1b43f58c2; valaddr_reg:x3; val_offset:2364*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2364*FLEN/8, x4, x1, x2)

inst_789:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x413eed654fd22 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x82ad1aedc7830 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xe53a1b43f58c2 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe413eed654fd22; op2val:0x3ff82ad1aedc7830;
op3val:0x7fee53a1b43f58c2; valaddr_reg:x3; val_offset:2367*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2367*FLEN/8, x4, x1, x2)

inst_790:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x44d54145ab105 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x437635ea7ce87 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x9a6f1010ace1c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe44d54145ab105; op2val:0x3ff437635ea7ce87;
op3val:0x7fe9a6f1010ace1c; valaddr_reg:x3; val_offset:2370*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2370*FLEN/8, x4, x1, x2)

inst_791:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x44d54145ab105 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x437635ea7ce87 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x9a6f1010ace1c and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe44d54145ab105; op2val:0x3ff437635ea7ce87;
op3val:0x7fe9a6f1010ace1c; valaddr_reg:x3; val_offset:2373*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2373*FLEN/8, x4, x1, x2)

inst_792:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x44d54145ab105 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x437635ea7ce87 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x9a6f1010ace1c and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe44d54145ab105; op2val:0x3ff437635ea7ce87;
op3val:0x7fe9a6f1010ace1c; valaddr_reg:x3; val_offset:2376*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2376*FLEN/8, x4, x1, x2)

inst_793:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x44d54145ab105 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x437635ea7ce87 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x9a6f1010ace1c and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe44d54145ab105; op2val:0x3ff437635ea7ce87;
op3val:0x7fe9a6f1010ace1c; valaddr_reg:x3; val_offset:2379*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2379*FLEN/8, x4, x1, x2)

inst_794:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x44d54145ab105 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x437635ea7ce87 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x9a6f1010ace1c and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe44d54145ab105; op2val:0x3ff437635ea7ce87;
op3val:0x7fe9a6f1010ace1c; valaddr_reg:x3; val_offset:2382*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2382*FLEN/8, x4, x1, x2)

inst_795:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x471faa8c06142 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x2a6cb740159e7 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x7d55c80c789ad and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe471faa8c06142; op2val:0x3fe2a6cb740159e7;
op3val:0x7fd7d55c80c789ad; valaddr_reg:x3; val_offset:2385*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2385*FLEN/8, x4, x1, x2)

inst_796:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x471faa8c06142 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x2a6cb740159e7 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x7d55c80c789ad and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe471faa8c06142; op2val:0x3fe2a6cb740159e7;
op3val:0x7fd7d55c80c789ad; valaddr_reg:x3; val_offset:2388*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2388*FLEN/8, x4, x1, x2)

inst_797:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x471faa8c06142 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x2a6cb740159e7 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x7d55c80c789ad and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe471faa8c06142; op2val:0x3fe2a6cb740159e7;
op3val:0x7fd7d55c80c789ad; valaddr_reg:x3; val_offset:2391*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2391*FLEN/8, x4, x1, x2)

inst_798:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x471faa8c06142 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x2a6cb740159e7 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x7d55c80c789ad and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe471faa8c06142; op2val:0x3fe2a6cb740159e7;
op3val:0x7fd7d55c80c789ad; valaddr_reg:x3; val_offset:2394*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2394*FLEN/8, x4, x1, x2)

inst_799:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x471faa8c06142 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x2a6cb740159e7 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x7d55c80c789ad and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe471faa8c06142; op2val:0x3fe2a6cb740159e7;
op3val:0x7fd7d55c80c789ad; valaddr_reg:x3; val_offset:2397*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2397*FLEN/8, x4, x1, x2)

inst_800:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x4b547924fd121 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x88dcc2c35a5a1 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xfc77122b9963b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe4b547924fd121; op2val:0x3ff88dcc2c35a5a1;
op3val:0x7fefc77122b9963b; valaddr_reg:x3; val_offset:2400*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2400*FLEN/8, x4, x1, x2)

inst_801:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x4b547924fd121 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x88dcc2c35a5a1 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xfc77122b9963b and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe4b547924fd121; op2val:0x3ff88dcc2c35a5a1;
op3val:0x7fefc77122b9963b; valaddr_reg:x3; val_offset:2403*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2403*FLEN/8, x4, x1, x2)

inst_802:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x4b547924fd121 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x88dcc2c35a5a1 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xfc77122b9963b and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe4b547924fd121; op2val:0x3ff88dcc2c35a5a1;
op3val:0x7fefc77122b9963b; valaddr_reg:x3; val_offset:2406*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2406*FLEN/8, x4, x1, x2)

inst_803:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x4b547924fd121 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x88dcc2c35a5a1 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xfc77122b9963b and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe4b547924fd121; op2val:0x3ff88dcc2c35a5a1;
op3val:0x7fefc77122b9963b; valaddr_reg:x3; val_offset:2409*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2409*FLEN/8, x4, x1, x2)

inst_804:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x4b547924fd121 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x88dcc2c35a5a1 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xfc77122b9963b and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe4b547924fd121; op2val:0x3ff88dcc2c35a5a1;
op3val:0x7fefc77122b9963b; valaddr_reg:x3; val_offset:2412*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2412*FLEN/8, x4, x1, x2)

inst_805:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x4d474883171fe and fs2 == 0 and fe2 == 0x3fb and fm2 == 0xc7ce04a4c90c6 and fs3 == 0 and fe3 == 0x7fb and fm3 == 0x28b2f3a47e0ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe4d474883171fe; op2val:0x3fbc7ce04a4c90c6;
op3val:0x7fb28b2f3a47e0ff; valaddr_reg:x3; val_offset:2415*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2415*FLEN/8, x4, x1, x2)

inst_806:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x4d474883171fe and fs2 == 0 and fe2 == 0x3fb and fm2 == 0xc7ce04a4c90c6 and fs3 == 0 and fe3 == 0x7fb and fm3 == 0x28b2f3a47e0ff and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe4d474883171fe; op2val:0x3fbc7ce04a4c90c6;
op3val:0x7fb28b2f3a47e0ff; valaddr_reg:x3; val_offset:2418*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2418*FLEN/8, x4, x1, x2)

inst_807:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x4d474883171fe and fs2 == 0 and fe2 == 0x3fb and fm2 == 0xc7ce04a4c90c6 and fs3 == 0 and fe3 == 0x7fb and fm3 == 0x28b2f3a47e0ff and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe4d474883171fe; op2val:0x3fbc7ce04a4c90c6;
op3val:0x7fb28b2f3a47e0ff; valaddr_reg:x3; val_offset:2421*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2421*FLEN/8, x4, x1, x2)

inst_808:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x4d474883171fe and fs2 == 0 and fe2 == 0x3fb and fm2 == 0xc7ce04a4c90c6 and fs3 == 0 and fe3 == 0x7fb and fm3 == 0x28b2f3a47e0ff and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe4d474883171fe; op2val:0x3fbc7ce04a4c90c6;
op3val:0x7fb28b2f3a47e0ff; valaddr_reg:x3; val_offset:2424*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2424*FLEN/8, x4, x1, x2)

inst_809:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x4d474883171fe and fs2 == 0 and fe2 == 0x3fb and fm2 == 0xc7ce04a4c90c6 and fs3 == 0 and fe3 == 0x7fb and fm3 == 0x28b2f3a47e0ff and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe4d474883171fe; op2val:0x3fbc7ce04a4c90c6;
op3val:0x7fb28b2f3a47e0ff; valaddr_reg:x3; val_offset:2427*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2427*FLEN/8, x4, x1, x2)

inst_810:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x4e53235604357 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x3980124aa4300 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x996ae7a92917a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe4e53235604357; op2val:0x3ff3980124aa4300;
op3val:0x7fe996ae7a92917a; valaddr_reg:x3; val_offset:2430*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2430*FLEN/8, x4, x1, x2)

inst_811:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x4e53235604357 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x3980124aa4300 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x996ae7a92917a and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe4e53235604357; op2val:0x3ff3980124aa4300;
op3val:0x7fe996ae7a92917a; valaddr_reg:x3; val_offset:2433*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2433*FLEN/8, x4, x1, x2)

inst_812:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x4e53235604357 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x3980124aa4300 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x996ae7a92917a and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe4e53235604357; op2val:0x3ff3980124aa4300;
op3val:0x7fe996ae7a92917a; valaddr_reg:x3; val_offset:2436*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2436*FLEN/8, x4, x1, x2)

inst_813:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x4e53235604357 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x3980124aa4300 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x996ae7a92917a and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe4e53235604357; op2val:0x3ff3980124aa4300;
op3val:0x7fe996ae7a92917a; valaddr_reg:x3; val_offset:2439*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2439*FLEN/8, x4, x1, x2)

inst_814:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x4e53235604357 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x3980124aa4300 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x996ae7a92917a and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe4e53235604357; op2val:0x3ff3980124aa4300;
op3val:0x7fe996ae7a92917a; valaddr_reg:x3; val_offset:2442*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2442*FLEN/8, x4, x1, x2)

inst_815:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x520d24576f8bf and fs2 == 0 and fe2 == 0x3fc and fm2 == 0xbb7eec62a971b and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x24d22c40cbacb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe520d24576f8bf; op2val:0x3fcbb7eec62a971b;
op3val:0x7fc24d22c40cbacb; valaddr_reg:x3; val_offset:2445*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2445*FLEN/8, x4, x1, x2)

inst_816:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x520d24576f8bf and fs2 == 0 and fe2 == 0x3fc and fm2 == 0xbb7eec62a971b and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x24d22c40cbacb and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe520d24576f8bf; op2val:0x3fcbb7eec62a971b;
op3val:0x7fc24d22c40cbacb; valaddr_reg:x3; val_offset:2448*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2448*FLEN/8, x4, x1, x2)

inst_817:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x520d24576f8bf and fs2 == 0 and fe2 == 0x3fc and fm2 == 0xbb7eec62a971b and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x24d22c40cbacb and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe520d24576f8bf; op2val:0x3fcbb7eec62a971b;
op3val:0x7fc24d22c40cbacb; valaddr_reg:x3; val_offset:2451*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2451*FLEN/8, x4, x1, x2)

inst_818:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x520d24576f8bf and fs2 == 0 and fe2 == 0x3fc and fm2 == 0xbb7eec62a971b and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x24d22c40cbacb and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe520d24576f8bf; op2val:0x3fcbb7eec62a971b;
op3val:0x7fc24d22c40cbacb; valaddr_reg:x3; val_offset:2454*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2454*FLEN/8, x4, x1, x2)

inst_819:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x520d24576f8bf and fs2 == 0 and fe2 == 0x3fc and fm2 == 0xbb7eec62a971b and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x24d22c40cbacb and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe520d24576f8bf; op2val:0x3fcbb7eec62a971b;
op3val:0x7fc24d22c40cbacb; valaddr_reg:x3; val_offset:2457*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2457*FLEN/8, x4, x1, x2)

inst_820:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x5a36e5af58a21 and fs2 == 0 and fe2 == 0x3fb and fm2 == 0x470e2ee853fca and fs3 == 0 and fe3 == 0x7fa and fm3 == 0xba4f4dd39a68f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe5a36e5af58a21; op2val:0x3fb470e2ee853fca;
op3val:0x7faba4f4dd39a68f; valaddr_reg:x3; val_offset:2460*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2460*FLEN/8, x4, x1, x2)

inst_821:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x5a36e5af58a21 and fs2 == 0 and fe2 == 0x3fb and fm2 == 0x470e2ee853fca and fs3 == 0 and fe3 == 0x7fa and fm3 == 0xba4f4dd39a68f and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe5a36e5af58a21; op2val:0x3fb470e2ee853fca;
op3val:0x7faba4f4dd39a68f; valaddr_reg:x3; val_offset:2463*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2463*FLEN/8, x4, x1, x2)

inst_822:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x5a36e5af58a21 and fs2 == 0 and fe2 == 0x3fb and fm2 == 0x470e2ee853fca and fs3 == 0 and fe3 == 0x7fa and fm3 == 0xba4f4dd39a68f and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe5a36e5af58a21; op2val:0x3fb470e2ee853fca;
op3val:0x7faba4f4dd39a68f; valaddr_reg:x3; val_offset:2466*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2466*FLEN/8, x4, x1, x2)

inst_823:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x5a36e5af58a21 and fs2 == 0 and fe2 == 0x3fb and fm2 == 0x470e2ee853fca and fs3 == 0 and fe3 == 0x7fa and fm3 == 0xba4f4dd39a68f and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe5a36e5af58a21; op2val:0x3fb470e2ee853fca;
op3val:0x7faba4f4dd39a68f; valaddr_reg:x3; val_offset:2469*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2469*FLEN/8, x4, x1, x2)

inst_824:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x5a36e5af58a21 and fs2 == 0 and fe2 == 0x3fb and fm2 == 0x470e2ee853fca and fs3 == 0 and fe3 == 0x7fa and fm3 == 0xba4f4dd39a68f and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe5a36e5af58a21; op2val:0x3fb470e2ee853fca;
op3val:0x7faba4f4dd39a68f; valaddr_reg:x3; val_offset:2472*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2472*FLEN/8, x4, x1, x2)

inst_825:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x5c5d62a207b44 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x41c339608df40 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xb5dac1e37c3b7 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe5c5d62a207b44; op2val:0x3fe41c339608df40;
op3val:0x7fdb5dac1e37c3b7; valaddr_reg:x3; val_offset:2475*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2475*FLEN/8, x4, x1, x2)

inst_826:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x5c5d62a207b44 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x41c339608df40 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xb5dac1e37c3b7 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe5c5d62a207b44; op2val:0x3fe41c339608df40;
op3val:0x7fdb5dac1e37c3b7; valaddr_reg:x3; val_offset:2478*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2478*FLEN/8, x4, x1, x2)

inst_827:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x5c5d62a207b44 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x41c339608df40 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xb5dac1e37c3b7 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe5c5d62a207b44; op2val:0x3fe41c339608df40;
op3val:0x7fdb5dac1e37c3b7; valaddr_reg:x3; val_offset:2481*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2481*FLEN/8, x4, x1, x2)

inst_828:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x5c5d62a207b44 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x41c339608df40 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xb5dac1e37c3b7 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe5c5d62a207b44; op2val:0x3fe41c339608df40;
op3val:0x7fdb5dac1e37c3b7; valaddr_reg:x3; val_offset:2484*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2484*FLEN/8, x4, x1, x2)

inst_829:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x5c5d62a207b44 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x41c339608df40 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xb5dac1e37c3b7 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe5c5d62a207b44; op2val:0x3fe41c339608df40;
op3val:0x7fdb5dac1e37c3b7; valaddr_reg:x3; val_offset:2487*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2487*FLEN/8, x4, x1, x2)

inst_830:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x601faf4dc586f and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x6db250f0a73a8 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xf702724eb1369 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe601faf4dc586f; op2val:0x3ff6db250f0a73a8;
op3val:0x7fef702724eb1369; valaddr_reg:x3; val_offset:2490*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2490*FLEN/8, x4, x1, x2)

inst_831:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x601faf4dc586f and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x6db250f0a73a8 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xf702724eb1369 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe601faf4dc586f; op2val:0x3ff6db250f0a73a8;
op3val:0x7fef702724eb1369; valaddr_reg:x3; val_offset:2493*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2493*FLEN/8, x4, x1, x2)

inst_832:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x601faf4dc586f and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x6db250f0a73a8 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xf702724eb1369 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe601faf4dc586f; op2val:0x3ff6db250f0a73a8;
op3val:0x7fef702724eb1369; valaddr_reg:x3; val_offset:2496*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2496*FLEN/8, x4, x1, x2)

inst_833:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x601faf4dc586f and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x6db250f0a73a8 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xf702724eb1369 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe601faf4dc586f; op2val:0x3ff6db250f0a73a8;
op3val:0x7fef702724eb1369; valaddr_reg:x3; val_offset:2499*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2499*FLEN/8, x4, x1, x2)

inst_834:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x601faf4dc586f and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x6db250f0a73a8 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xf702724eb1369 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe601faf4dc586f; op2val:0x3ff6db250f0a73a8;
op3val:0x7fef702724eb1369; valaddr_reg:x3; val_offset:2502*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2502*FLEN/8, x4, x1, x2)

inst_835:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x605c7b0bbbe88 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x3c6ba367054d3 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xb3864f7298b49 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe605c7b0bbbe88; op2val:0x3fe3c6ba367054d3;
op3val:0x7fdb3864f7298b49; valaddr_reg:x3; val_offset:2505*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2505*FLEN/8, x4, x1, x2)

inst_836:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x605c7b0bbbe88 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x3c6ba367054d3 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xb3864f7298b49 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe605c7b0bbbe88; op2val:0x3fe3c6ba367054d3;
op3val:0x7fdb3864f7298b49; valaddr_reg:x3; val_offset:2508*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2508*FLEN/8, x4, x1, x2)

inst_837:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x605c7b0bbbe88 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x3c6ba367054d3 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xb3864f7298b49 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe605c7b0bbbe88; op2val:0x3fe3c6ba367054d3;
op3val:0x7fdb3864f7298b49; valaddr_reg:x3; val_offset:2511*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2511*FLEN/8, x4, x1, x2)

inst_838:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x605c7b0bbbe88 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x3c6ba367054d3 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xb3864f7298b49 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe605c7b0bbbe88; op2val:0x3fe3c6ba367054d3;
op3val:0x7fdb3864f7298b49; valaddr_reg:x3; val_offset:2514*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2514*FLEN/8, x4, x1, x2)

inst_839:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x605c7b0bbbe88 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x3c6ba367054d3 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xb3864f7298b49 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe605c7b0bbbe88; op2val:0x3fe3c6ba367054d3;
op3val:0x7fdb3864f7298b49; valaddr_reg:x3; val_offset:2517*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2517*FLEN/8, x4, x1, x2)

inst_840:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x63fdc11669528 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xb5ae43b7daad0 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x30513f9fc9850 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe63fdc11669528; op2val:0x3feb5ae43b7daad0;
op3val:0x7fe30513f9fc9850; valaddr_reg:x3; val_offset:2520*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2520*FLEN/8, x4, x1, x2)

inst_841:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x63fdc11669528 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xb5ae43b7daad0 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x30513f9fc9850 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe63fdc11669528; op2val:0x3feb5ae43b7daad0;
op3val:0x7fe30513f9fc9850; valaddr_reg:x3; val_offset:2523*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2523*FLEN/8, x4, x1, x2)

inst_842:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x63fdc11669528 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xb5ae43b7daad0 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x30513f9fc9850 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe63fdc11669528; op2val:0x3feb5ae43b7daad0;
op3val:0x7fe30513f9fc9850; valaddr_reg:x3; val_offset:2526*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2526*FLEN/8, x4, x1, x2)

inst_843:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x63fdc11669528 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xb5ae43b7daad0 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x30513f9fc9850 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe63fdc11669528; op2val:0x3feb5ae43b7daad0;
op3val:0x7fe30513f9fc9850; valaddr_reg:x3; val_offset:2529*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2529*FLEN/8, x4, x1, x2)

inst_844:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x63fdc11669528 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xb5ae43b7daad0 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x30513f9fc9850 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe63fdc11669528; op2val:0x3feb5ae43b7daad0;
op3val:0x7fe30513f9fc9850; valaddr_reg:x3; val_offset:2532*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2532*FLEN/8, x4, x1, x2)

inst_845:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x65ffe2e17c444 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x40eb8cac5594e and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xc0c9423810004 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe65ffe2e17c444; op2val:0x3ff40eb8cac5594e;
op3val:0x7fec0c9423810004; valaddr_reg:x3; val_offset:2535*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2535*FLEN/8, x4, x1, x2)

inst_846:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x65ffe2e17c444 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x40eb8cac5594e and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xc0c9423810004 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe65ffe2e17c444; op2val:0x3ff40eb8cac5594e;
op3val:0x7fec0c9423810004; valaddr_reg:x3; val_offset:2538*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2538*FLEN/8, x4, x1, x2)

inst_847:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x65ffe2e17c444 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x40eb8cac5594e and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xc0c9423810004 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe65ffe2e17c444; op2val:0x3ff40eb8cac5594e;
op3val:0x7fec0c9423810004; valaddr_reg:x3; val_offset:2541*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2541*FLEN/8, x4, x1, x2)

inst_848:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x65ffe2e17c444 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x40eb8cac5594e and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xc0c9423810004 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe65ffe2e17c444; op2val:0x3ff40eb8cac5594e;
op3val:0x7fec0c9423810004; valaddr_reg:x3; val_offset:2544*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2544*FLEN/8, x4, x1, x2)

inst_849:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x65ffe2e17c444 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x40eb8cac5594e and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xc0c9423810004 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe65ffe2e17c444; op2val:0x3ff40eb8cac5594e;
op3val:0x7fec0c9423810004; valaddr_reg:x3; val_offset:2547*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2547*FLEN/8, x4, x1, x2)

inst_850:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x69d7e96ea561f and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xccbeb890c5f19 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x459ec548f1271 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe69d7e96ea561f; op2val:0x3feccbeb890c5f19;
op3val:0x7fe459ec548f1271; valaddr_reg:x3; val_offset:2550*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2550*FLEN/8, x4, x1, x2)

inst_851:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x69d7e96ea561f and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xccbeb890c5f19 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x459ec548f1271 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe69d7e96ea561f; op2val:0x3feccbeb890c5f19;
op3val:0x7fe459ec548f1271; valaddr_reg:x3; val_offset:2553*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2553*FLEN/8, x4, x1, x2)

inst_852:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x69d7e96ea561f and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xccbeb890c5f19 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x459ec548f1271 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe69d7e96ea561f; op2val:0x3feccbeb890c5f19;
op3val:0x7fe459ec548f1271; valaddr_reg:x3; val_offset:2556*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2556*FLEN/8, x4, x1, x2)

inst_853:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x69d7e96ea561f and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xccbeb890c5f19 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x459ec548f1271 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe69d7e96ea561f; op2val:0x3feccbeb890c5f19;
op3val:0x7fe459ec548f1271; valaddr_reg:x3; val_offset:2559*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2559*FLEN/8, x4, x1, x2)

inst_854:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x69d7e96ea561f and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xccbeb890c5f19 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x459ec548f1271 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe69d7e96ea561f; op2val:0x3feccbeb890c5f19;
op3val:0x7fe459ec548f1271; valaddr_reg:x3; val_offset:2562*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2562*FLEN/8, x4, x1, x2)

inst_855:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x6e96b1322dbaa and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x3a508bfdccb1a and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xc2182ce62e070 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe6e96b1322dbaa; op2val:0x3ff3a508bfdccb1a;
op3val:0x7fec2182ce62e070; valaddr_reg:x3; val_offset:2565*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2565*FLEN/8, x4, x1, x2)

inst_856:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x6e96b1322dbaa and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x3a508bfdccb1a and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xc2182ce62e070 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe6e96b1322dbaa; op2val:0x3ff3a508bfdccb1a;
op3val:0x7fec2182ce62e070; valaddr_reg:x3; val_offset:2568*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2568*FLEN/8, x4, x1, x2)

inst_857:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x6e96b1322dbaa and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x3a508bfdccb1a and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xc2182ce62e070 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe6e96b1322dbaa; op2val:0x3ff3a508bfdccb1a;
op3val:0x7fec2182ce62e070; valaddr_reg:x3; val_offset:2571*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2571*FLEN/8, x4, x1, x2)

inst_858:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x6e96b1322dbaa and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x3a508bfdccb1a and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xc2182ce62e070 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe6e96b1322dbaa; op2val:0x3ff3a508bfdccb1a;
op3val:0x7fec2182ce62e070; valaddr_reg:x3; val_offset:2574*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2574*FLEN/8, x4, x1, x2)

inst_859:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x6e96b1322dbaa and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x3a508bfdccb1a and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xc2182ce62e070 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe6e96b1322dbaa; op2val:0x3ff3a508bfdccb1a;
op3val:0x7fec2182ce62e070; valaddr_reg:x3; val_offset:2577*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2577*FLEN/8, x4, x1, x2)

inst_860:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x71bdc1176bc40 and fs2 == 0 and fe2 == 0x3f9 and fm2 == 0xba063f67a6ca8 and fs3 == 0 and fe3 == 0x7f9 and fm3 == 0x3f3552b42eaff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe71bdc1176bc40; op2val:0x3f9ba063f67a6ca8;
op3val:0x7f93f3552b42eaff; valaddr_reg:x3; val_offset:2580*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2580*FLEN/8, x4, x1, x2)

inst_861:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x71bdc1176bc40 and fs2 == 0 and fe2 == 0x3f9 and fm2 == 0xba063f67a6ca8 and fs3 == 0 and fe3 == 0x7f9 and fm3 == 0x3f3552b42eaff and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe71bdc1176bc40; op2val:0x3f9ba063f67a6ca8;
op3val:0x7f93f3552b42eaff; valaddr_reg:x3; val_offset:2583*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2583*FLEN/8, x4, x1, x2)

inst_862:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x71bdc1176bc40 and fs2 == 0 and fe2 == 0x3f9 and fm2 == 0xba063f67a6ca8 and fs3 == 0 and fe3 == 0x7f9 and fm3 == 0x3f3552b42eaff and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe71bdc1176bc40; op2val:0x3f9ba063f67a6ca8;
op3val:0x7f93f3552b42eaff; valaddr_reg:x3; val_offset:2586*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2586*FLEN/8, x4, x1, x2)

inst_863:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x71bdc1176bc40 and fs2 == 0 and fe2 == 0x3f9 and fm2 == 0xba063f67a6ca8 and fs3 == 0 and fe3 == 0x7f9 and fm3 == 0x3f3552b42eaff and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe71bdc1176bc40; op2val:0x3f9ba063f67a6ca8;
op3val:0x7f93f3552b42eaff; valaddr_reg:x3; val_offset:2589*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2589*FLEN/8, x4, x1, x2)

inst_864:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x71bdc1176bc40 and fs2 == 0 and fe2 == 0x3f9 and fm2 == 0xba063f67a6ca8 and fs3 == 0 and fe3 == 0x7f9 and fm3 == 0x3f3552b42eaff and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe71bdc1176bc40; op2val:0x3f9ba063f67a6ca8;
op3val:0x7f93f3552b42eaff; valaddr_reg:x3; val_offset:2592*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2592*FLEN/8, x4, x1, x2)

inst_865:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x72c48ba798e5e and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xc6c68c15f5c70 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x49540f49439eb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe72c48ba798e5e; op2val:0x3fec6c68c15f5c70;
op3val:0x7fe49540f49439eb; valaddr_reg:x3; val_offset:2595*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2595*FLEN/8, x4, x1, x2)

inst_866:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x72c48ba798e5e and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xc6c68c15f5c70 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x49540f49439eb and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe72c48ba798e5e; op2val:0x3fec6c68c15f5c70;
op3val:0x7fe49540f49439eb; valaddr_reg:x3; val_offset:2598*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2598*FLEN/8, x4, x1, x2)

inst_867:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x72c48ba798e5e and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xc6c68c15f5c70 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x49540f49439eb and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe72c48ba798e5e; op2val:0x3fec6c68c15f5c70;
op3val:0x7fe49540f49439eb; valaddr_reg:x3; val_offset:2601*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2601*FLEN/8, x4, x1, x2)

inst_868:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x72c48ba798e5e and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xc6c68c15f5c70 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x49540f49439eb and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe72c48ba798e5e; op2val:0x3fec6c68c15f5c70;
op3val:0x7fe49540f49439eb; valaddr_reg:x3; val_offset:2604*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2604*FLEN/8, x4, x1, x2)

inst_869:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x72c48ba798e5e and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xc6c68c15f5c70 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x49540f49439eb and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe72c48ba798e5e; op2val:0x3fec6c68c15f5c70;
op3val:0x7fe49540f49439eb; valaddr_reg:x3; val_offset:2607*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2607*FLEN/8, x4, x1, x2)

inst_870:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x7318cf8a2ab28 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0xe05d4b14854ca and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x5c2ae0fe3c9c7 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe7318cf8a2ab28; op2val:0x3fce05d4b14854ca;
op3val:0x7fc5c2ae0fe3c9c7; valaddr_reg:x3; val_offset:2610*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2610*FLEN/8, x4, x1, x2)

inst_871:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x7318cf8a2ab28 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0xe05d4b14854ca and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x5c2ae0fe3c9c7 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe7318cf8a2ab28; op2val:0x3fce05d4b14854ca;
op3val:0x7fc5c2ae0fe3c9c7; valaddr_reg:x3; val_offset:2613*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2613*FLEN/8, x4, x1, x2)

inst_872:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x7318cf8a2ab28 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0xe05d4b14854ca and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x5c2ae0fe3c9c7 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe7318cf8a2ab28; op2val:0x3fce05d4b14854ca;
op3val:0x7fc5c2ae0fe3c9c7; valaddr_reg:x3; val_offset:2616*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2616*FLEN/8, x4, x1, x2)

inst_873:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x7318cf8a2ab28 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0xe05d4b14854ca and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x5c2ae0fe3c9c7 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe7318cf8a2ab28; op2val:0x3fce05d4b14854ca;
op3val:0x7fc5c2ae0fe3c9c7; valaddr_reg:x3; val_offset:2619*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2619*FLEN/8, x4, x1, x2)

inst_874:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x7318cf8a2ab28 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0xe05d4b14854ca and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x5c2ae0fe3c9c7 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe7318cf8a2ab28; op2val:0x3fce05d4b14854ca;
op3val:0x7fc5c2ae0fe3c9c7; valaddr_reg:x3; val_offset:2622*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2622*FLEN/8, x4, x1, x2)

inst_875:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x734c8847b3984 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x88e1d72cdb3a6 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x1cea5f83f3cc6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe734c8847b3984; op2val:0x3fe88e1d72cdb3a6;
op3val:0x7fe1cea5f83f3cc6; valaddr_reg:x3; val_offset:2625*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2625*FLEN/8, x4, x1, x2)

inst_876:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x734c8847b3984 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x88e1d72cdb3a6 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x1cea5f83f3cc6 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe734c8847b3984; op2val:0x3fe88e1d72cdb3a6;
op3val:0x7fe1cea5f83f3cc6; valaddr_reg:x3; val_offset:2628*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2628*FLEN/8, x4, x1, x2)

inst_877:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x734c8847b3984 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x88e1d72cdb3a6 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x1cea5f83f3cc6 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe734c8847b3984; op2val:0x3fe88e1d72cdb3a6;
op3val:0x7fe1cea5f83f3cc6; valaddr_reg:x3; val_offset:2631*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2631*FLEN/8, x4, x1, x2)

inst_878:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x734c8847b3984 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x88e1d72cdb3a6 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x1cea5f83f3cc6 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe734c8847b3984; op2val:0x3fe88e1d72cdb3a6;
op3val:0x7fe1cea5f83f3cc6; valaddr_reg:x3; val_offset:2634*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2634*FLEN/8, x4, x1, x2)

inst_879:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x734c8847b3984 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x88e1d72cdb3a6 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x1cea5f83f3cc6 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe734c8847b3984; op2val:0x3fe88e1d72cdb3a6;
op3val:0x7fe1cea5f83f3cc6; valaddr_reg:x3; val_offset:2637*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2637*FLEN/8, x4, x1, x2)

inst_880:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x7579da5cb9b2f and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x943579dbdd6c5 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x26d9284df25e5 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe7579da5cb9b2f; op2val:0x3fd943579dbdd6c5;
op3val:0x7fd26d9284df25e5; valaddr_reg:x3; val_offset:2640*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2640*FLEN/8, x4, x1, x2)

inst_881:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x7579da5cb9b2f and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x943579dbdd6c5 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x26d9284df25e5 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe7579da5cb9b2f; op2val:0x3fd943579dbdd6c5;
op3val:0x7fd26d9284df25e5; valaddr_reg:x3; val_offset:2643*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2643*FLEN/8, x4, x1, x2)

inst_882:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x7579da5cb9b2f and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x943579dbdd6c5 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x26d9284df25e5 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe7579da5cb9b2f; op2val:0x3fd943579dbdd6c5;
op3val:0x7fd26d9284df25e5; valaddr_reg:x3; val_offset:2646*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2646*FLEN/8, x4, x1, x2)

inst_883:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x7579da5cb9b2f and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x943579dbdd6c5 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x26d9284df25e5 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe7579da5cb9b2f; op2val:0x3fd943579dbdd6c5;
op3val:0x7fd26d9284df25e5; valaddr_reg:x3; val_offset:2649*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2649*FLEN/8, x4, x1, x2)

inst_884:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x7579da5cb9b2f and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x943579dbdd6c5 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x26d9284df25e5 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe7579da5cb9b2f; op2val:0x3fd943579dbdd6c5;
op3val:0x7fd26d9284df25e5; valaddr_reg:x3; val_offset:2652*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2652*FLEN/8, x4, x1, x2)

inst_885:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x77564fe05ca27 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x80dd7fff0060e and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x1a231c7e9865c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe77564fe05ca27; op2val:0x3fe80dd7fff0060e;
op3val:0x7fe1a231c7e9865c; valaddr_reg:x3; val_offset:2655*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2655*FLEN/8, x4, x1, x2)

inst_886:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x77564fe05ca27 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x80dd7fff0060e and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x1a231c7e9865c and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe77564fe05ca27; op2val:0x3fe80dd7fff0060e;
op3val:0x7fe1a231c7e9865c; valaddr_reg:x3; val_offset:2658*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2658*FLEN/8, x4, x1, x2)

inst_887:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x77564fe05ca27 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x80dd7fff0060e and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x1a231c7e9865c and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe77564fe05ca27; op2val:0x3fe80dd7fff0060e;
op3val:0x7fe1a231c7e9865c; valaddr_reg:x3; val_offset:2661*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2661*FLEN/8, x4, x1, x2)

inst_888:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x77564fe05ca27 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x80dd7fff0060e and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x1a231c7e9865c and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe77564fe05ca27; op2val:0x3fe80dd7fff0060e;
op3val:0x7fe1a231c7e9865c; valaddr_reg:x3; val_offset:2664*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2664*FLEN/8, x4, x1, x2)

inst_889:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x77564fe05ca27 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x80dd7fff0060e and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x1a231c7e9865c and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe77564fe05ca27; op2val:0x3fe80dd7fff0060e;
op3val:0x7fe1a231c7e9865c; valaddr_reg:x3; val_offset:2667*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2667*FLEN/8, x4, x1, x2)

inst_890:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x8012690cc1a61 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x4646a264c388c and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xe9816a71cb1cb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe8012690cc1a61; op2val:0x3fe4646a264c388c;
op3val:0x7fde9816a71cb1cb; valaddr_reg:x3; val_offset:2670*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2670*FLEN/8, x4, x1, x2)

inst_891:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x8012690cc1a61 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x4646a264c388c and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xe9816a71cb1cb and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe8012690cc1a61; op2val:0x3fe4646a264c388c;
op3val:0x7fde9816a71cb1cb; valaddr_reg:x3; val_offset:2673*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2673*FLEN/8, x4, x1, x2)

inst_892:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x8012690cc1a61 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x4646a264c388c and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xe9816a71cb1cb and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe8012690cc1a61; op2val:0x3fe4646a264c388c;
op3val:0x7fde9816a71cb1cb; valaddr_reg:x3; val_offset:2676*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2676*FLEN/8, x4, x1, x2)

inst_893:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x8012690cc1a61 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x4646a264c388c and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xe9816a71cb1cb and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe8012690cc1a61; op2val:0x3fe4646a264c388c;
op3val:0x7fde9816a71cb1cb; valaddr_reg:x3; val_offset:2679*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2679*FLEN/8, x4, x1, x2)

inst_894:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x8012690cc1a61 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x4646a264c388c and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xe9816a71cb1cb and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe8012690cc1a61; op2val:0x3fe4646a264c388c;
op3val:0x7fde9816a71cb1cb; valaddr_reg:x3; val_offset:2682*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2682*FLEN/8, x4, x1, x2)

inst_895:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x8046dc89efa69 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xc08f4f8e73967 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x50a9907923a77 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe8046dc89efa69; op2val:0x3fec08f4f8e73967;
op3val:0x7fe50a9907923a77; valaddr_reg:x3; val_offset:2685*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2685*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_8)

inst_896:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x8046dc89efa69 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xc08f4f8e73967 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x50a9907923a77 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe8046dc89efa69; op2val:0x3fec08f4f8e73967;
op3val:0x7fe50a9907923a77; valaddr_reg:x3; val_offset:2688*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2688*FLEN/8, x4, x1, x2)

inst_897:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x8046dc89efa69 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xc08f4f8e73967 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x50a9907923a77 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe8046dc89efa69; op2val:0x3fec08f4f8e73967;
op3val:0x7fe50a9907923a77; valaddr_reg:x3; val_offset:2691*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2691*FLEN/8, x4, x1, x2)

inst_898:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x8046dc89efa69 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xc08f4f8e73967 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x50a9907923a77 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe8046dc89efa69; op2val:0x3fec08f4f8e73967;
op3val:0x7fe50a9907923a77; valaddr_reg:x3; val_offset:2694*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2694*FLEN/8, x4, x1, x2)

inst_899:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x8046dc89efa69 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xc08f4f8e73967 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x50a9907923a77 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe8046dc89efa69; op2val:0x3fec08f4f8e73967;
op3val:0x7fe50a9907923a77; valaddr_reg:x3; val_offset:2697*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2697*FLEN/8, x4, x1, x2)

inst_900:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x84dcf48d2cffc and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x86f131f3eab76 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x28eb7e390c445 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe84dcf48d2cffc; op2val:0x3fd86f131f3eab76;
op3val:0x7fd28eb7e390c445; valaddr_reg:x3; val_offset:2700*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2700*FLEN/8, x4, x1, x2)

inst_901:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x84dcf48d2cffc and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x86f131f3eab76 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x28eb7e390c445 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe84dcf48d2cffc; op2val:0x3fd86f131f3eab76;
op3val:0x7fd28eb7e390c445; valaddr_reg:x3; val_offset:2703*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2703*FLEN/8, x4, x1, x2)

inst_902:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x84dcf48d2cffc and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x86f131f3eab76 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x28eb7e390c445 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe84dcf48d2cffc; op2val:0x3fd86f131f3eab76;
op3val:0x7fd28eb7e390c445; valaddr_reg:x3; val_offset:2706*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2706*FLEN/8, x4, x1, x2)

inst_903:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x84dcf48d2cffc and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x86f131f3eab76 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x28eb7e390c445 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe84dcf48d2cffc; op2val:0x3fd86f131f3eab76;
op3val:0x7fd28eb7e390c445; valaddr_reg:x3; val_offset:2709*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2709*FLEN/8, x4, x1, x2)

inst_904:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x84dcf48d2cffc and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x86f131f3eab76 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x28eb7e390c445 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe84dcf48d2cffc; op2val:0x3fd86f131f3eab76;
op3val:0x7fd28eb7e390c445; valaddr_reg:x3; val_offset:2712*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2712*FLEN/8, x4, x1, x2)

inst_905:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x8775d523b7834 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x7fbb0c63a2134 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x2563a7f28084c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe8775d523b7834; op2val:0x3fe7fbb0c63a2134;
op3val:0x7fe2563a7f28084c; valaddr_reg:x3; val_offset:2715*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2715*FLEN/8, x4, x1, x2)

inst_906:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x8775d523b7834 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x7fbb0c63a2134 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x2563a7f28084c and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe8775d523b7834; op2val:0x3fe7fbb0c63a2134;
op3val:0x7fe2563a7f28084c; valaddr_reg:x3; val_offset:2718*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2718*FLEN/8, x4, x1, x2)

inst_907:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x8775d523b7834 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x7fbb0c63a2134 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x2563a7f28084c and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe8775d523b7834; op2val:0x3fe7fbb0c63a2134;
op3val:0x7fe2563a7f28084c; valaddr_reg:x3; val_offset:2721*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2721*FLEN/8, x4, x1, x2)

inst_908:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x8775d523b7834 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x7fbb0c63a2134 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x2563a7f28084c and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe8775d523b7834; op2val:0x3fe7fbb0c63a2134;
op3val:0x7fe2563a7f28084c; valaddr_reg:x3; val_offset:2724*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2724*FLEN/8, x4, x1, x2)

inst_909:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x8775d523b7834 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x7fbb0c63a2134 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x2563a7f28084c and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe8775d523b7834; op2val:0x3fe7fbb0c63a2134;
op3val:0x7fe2563a7f28084c; valaddr_reg:x3; val_offset:2727*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2727*FLEN/8, x4, x1, x2)

inst_910:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x8b65ce8641755 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x509bbf55e512c and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x03f3169cf0733 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe8b65ce8641755; op2val:0x3fe509bbf55e512c;
op3val:0x7fe03f3169cf0733; valaddr_reg:x3; val_offset:2730*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2730*FLEN/8, x4, x1, x2)

inst_911:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x8b65ce8641755 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x509bbf55e512c and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x03f3169cf0733 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe8b65ce8641755; op2val:0x3fe509bbf55e512c;
op3val:0x7fe03f3169cf0733; valaddr_reg:x3; val_offset:2733*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2733*FLEN/8, x4, x1, x2)

inst_912:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x8b65ce8641755 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x509bbf55e512c and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x03f3169cf0733 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe8b65ce8641755; op2val:0x3fe509bbf55e512c;
op3val:0x7fe03f3169cf0733; valaddr_reg:x3; val_offset:2736*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2736*FLEN/8, x4, x1, x2)

inst_913:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x8b65ce8641755 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x509bbf55e512c and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x03f3169cf0733 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe8b65ce8641755; op2val:0x3fe509bbf55e512c;
op3val:0x7fe03f3169cf0733; valaddr_reg:x3; val_offset:2739*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2739*FLEN/8, x4, x1, x2)

inst_914:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x8b65ce8641755 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x509bbf55e512c and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x03f3169cf0733 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe8b65ce8641755; op2val:0x3fe509bbf55e512c;
op3val:0x7fe03f3169cf0733; valaddr_reg:x3; val_offset:2742*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2742*FLEN/8, x4, x1, x2)

inst_915:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x91600fc7d4948 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x24ee350686e3f and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xcb470c71b9436 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe91600fc7d4948; op2val:0x3ff24ee350686e3f;
op3val:0x7fecb470c71b9436; valaddr_reg:x3; val_offset:2745*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2745*FLEN/8, x4, x1, x2)

inst_916:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x91600fc7d4948 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x24ee350686e3f and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xcb470c71b9436 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe91600fc7d4948; op2val:0x3ff24ee350686e3f;
op3val:0x7fecb470c71b9436; valaddr_reg:x3; val_offset:2748*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2748*FLEN/8, x4, x1, x2)

inst_917:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x91600fc7d4948 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x24ee350686e3f and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xcb470c71b9436 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe91600fc7d4948; op2val:0x3ff24ee350686e3f;
op3val:0x7fecb470c71b9436; valaddr_reg:x3; val_offset:2751*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2751*FLEN/8, x4, x1, x2)

inst_918:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x91600fc7d4948 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x24ee350686e3f and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xcb470c71b9436 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe91600fc7d4948; op2val:0x3ff24ee350686e3f;
op3val:0x7fecb470c71b9436; valaddr_reg:x3; val_offset:2754*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2754*FLEN/8, x4, x1, x2)

inst_919:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x91600fc7d4948 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x24ee350686e3f and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xcb470c71b9436 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe91600fc7d4948; op2val:0x3ff24ee350686e3f;
op3val:0x7fecb470c71b9436; valaddr_reg:x3; val_offset:2757*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2757*FLEN/8, x4, x1, x2)

inst_920:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x93a4528ea0a04 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x3b8851df15037 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xf18221f816cf7 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe93a4528ea0a04; op2val:0x3ff3b8851df15037;
op3val:0x7fef18221f816cf7; valaddr_reg:x3; val_offset:2760*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2760*FLEN/8, x4, x1, x2)

inst_921:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x93a4528ea0a04 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x3b8851df15037 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xf18221f816cf7 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe93a4528ea0a04; op2val:0x3ff3b8851df15037;
op3val:0x7fef18221f816cf7; valaddr_reg:x3; val_offset:2763*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2763*FLEN/8, x4, x1, x2)

inst_922:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x93a4528ea0a04 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x3b8851df15037 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xf18221f816cf7 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe93a4528ea0a04; op2val:0x3ff3b8851df15037;
op3val:0x7fef18221f816cf7; valaddr_reg:x3; val_offset:2766*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2766*FLEN/8, x4, x1, x2)

inst_923:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x93a4528ea0a04 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x3b8851df15037 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xf18221f816cf7 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe93a4528ea0a04; op2val:0x3ff3b8851df15037;
op3val:0x7fef18221f816cf7; valaddr_reg:x3; val_offset:2769*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2769*FLEN/8, x4, x1, x2)

inst_924:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x93a4528ea0a04 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x3b8851df15037 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xf18221f816cf7 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe93a4528ea0a04; op2val:0x3ff3b8851df15037;
op3val:0x7fef18221f816cf7; valaddr_reg:x3; val_offset:2772*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2772*FLEN/8, x4, x1, x2)

inst_925:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x96b8e84b814c5 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xc2858a780d3ff and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x65e29931e8ba7 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe96b8e84b814c5; op2val:0x3fec2858a780d3ff;
op3val:0x7fe65e29931e8ba7; valaddr_reg:x3; val_offset:2775*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2775*FLEN/8, x4, x1, x2)

inst_926:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x96b8e84b814c5 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xc2858a780d3ff and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x65e29931e8ba7 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe96b8e84b814c5; op2val:0x3fec2858a780d3ff;
op3val:0x7fe65e29931e8ba7; valaddr_reg:x3; val_offset:2778*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2778*FLEN/8, x4, x1, x2)

inst_927:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x96b8e84b814c5 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xc2858a780d3ff and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x65e29931e8ba7 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe96b8e84b814c5; op2val:0x3fec2858a780d3ff;
op3val:0x7fe65e29931e8ba7; valaddr_reg:x3; val_offset:2781*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2781*FLEN/8, x4, x1, x2)

inst_928:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x96b8e84b814c5 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xc2858a780d3ff and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x65e29931e8ba7 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe96b8e84b814c5; op2val:0x3fec2858a780d3ff;
op3val:0x7fe65e29931e8ba7; valaddr_reg:x3; val_offset:2784*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2784*FLEN/8, x4, x1, x2)

inst_929:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x96b8e84b814c5 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xc2858a780d3ff and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x65e29931e8ba7 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe96b8e84b814c5; op2val:0x3fec2858a780d3ff;
op3val:0x7fe65e29931e8ba7; valaddr_reg:x3; val_offset:2787*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2787*FLEN/8, x4, x1, x2)

inst_930:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x9f7e66f275221 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x36b4a098857b1 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xf8483a30885ab and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe9f7e66f275221; op2val:0x3ff36b4a098857b1;
op3val:0x7fef8483a30885ab; valaddr_reg:x3; val_offset:2790*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2790*FLEN/8, x4, x1, x2)

inst_931:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x9f7e66f275221 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x36b4a098857b1 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xf8483a30885ab and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe9f7e66f275221; op2val:0x3ff36b4a098857b1;
op3val:0x7fef8483a30885ab; valaddr_reg:x3; val_offset:2793*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2793*FLEN/8, x4, x1, x2)

inst_932:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x9f7e66f275221 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x36b4a098857b1 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xf8483a30885ab and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe9f7e66f275221; op2val:0x3ff36b4a098857b1;
op3val:0x7fef8483a30885ab; valaddr_reg:x3; val_offset:2796*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2796*FLEN/8, x4, x1, x2)

inst_933:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x9f7e66f275221 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x36b4a098857b1 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xf8483a30885ab and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe9f7e66f275221; op2val:0x3ff36b4a098857b1;
op3val:0x7fef8483a30885ab; valaddr_reg:x3; val_offset:2799*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2799*FLEN/8, x4, x1, x2)

inst_934:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x9f7e66f275221 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x36b4a098857b1 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xf8483a30885ab and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe9f7e66f275221; op2val:0x3ff36b4a098857b1;
op3val:0x7fef8483a30885ab; valaddr_reg:x3; val_offset:2802*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2802*FLEN/8, x4, x1, x2)

inst_935:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xa2fc8919a4cff and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xcee91c7df3fa3 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x7ad0a2f369b1a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fea2fc8919a4cff; op2val:0x3fecee91c7df3fa3;
op3val:0x7fe7ad0a2f369b1a; valaddr_reg:x3; val_offset:2805*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2805*FLEN/8, x4, x1, x2)

inst_936:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xa2fc8919a4cff and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xcee91c7df3fa3 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x7ad0a2f369b1a and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fea2fc8919a4cff; op2val:0x3fecee91c7df3fa3;
op3val:0x7fe7ad0a2f369b1a; valaddr_reg:x3; val_offset:2808*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2808*FLEN/8, x4, x1, x2)

inst_937:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xa2fc8919a4cff and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xcee91c7df3fa3 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x7ad0a2f369b1a and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fea2fc8919a4cff; op2val:0x3fecee91c7df3fa3;
op3val:0x7fe7ad0a2f369b1a; valaddr_reg:x3; val_offset:2811*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2811*FLEN/8, x4, x1, x2)

inst_938:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xa2fc8919a4cff and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xcee91c7df3fa3 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x7ad0a2f369b1a and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fea2fc8919a4cff; op2val:0x3fecee91c7df3fa3;
op3val:0x7fe7ad0a2f369b1a; valaddr_reg:x3; val_offset:2814*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2814*FLEN/8, x4, x1, x2)

inst_939:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xa2fc8919a4cff and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xcee91c7df3fa3 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x7ad0a2f369b1a and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fea2fc8919a4cff; op2val:0x3fecee91c7df3fa3;
op3val:0x7fe7ad0a2f369b1a; valaddr_reg:x3; val_offset:2817*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2817*FLEN/8, x4, x1, x2)

inst_940:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xa34980299b561 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x0e340b6f18efb and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xba8cc2d408803 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fea34980299b561; op2val:0x3fe0e340b6f18efb;
op3val:0x7fdba8cc2d408803; valaddr_reg:x3; val_offset:2820*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2820*FLEN/8, x4, x1, x2)

inst_941:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xa34980299b561 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x0e340b6f18efb and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xba8cc2d408803 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fea34980299b561; op2val:0x3fe0e340b6f18efb;
op3val:0x7fdba8cc2d408803; valaddr_reg:x3; val_offset:2823*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2823*FLEN/8, x4, x1, x2)

inst_942:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xa34980299b561 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x0e340b6f18efb and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xba8cc2d408803 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fea34980299b561; op2val:0x3fe0e340b6f18efb;
op3val:0x7fdba8cc2d408803; valaddr_reg:x3; val_offset:2826*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2826*FLEN/8, x4, x1, x2)

inst_943:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xa34980299b561 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x0e340b6f18efb and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xba8cc2d408803 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fea34980299b561; op2val:0x3fe0e340b6f18efb;
op3val:0x7fdba8cc2d408803; valaddr_reg:x3; val_offset:2829*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2829*FLEN/8, x4, x1, x2)

inst_944:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xa34980299b561 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x0e340b6f18efb and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xba8cc2d408803 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fea34980299b561; op2val:0x3fe0e340b6f18efb;
op3val:0x7fdba8cc2d408803; valaddr_reg:x3; val_offset:2832*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2832*FLEN/8, x4, x1, x2)

inst_945:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xa351367c8b4a1 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x435937d1093f0 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x08d0cd33f6191 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fea351367c8b4a1; op2val:0x3fd435937d1093f0;
op3val:0x7fd08d0cd33f6191; valaddr_reg:x3; val_offset:2835*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2835*FLEN/8, x4, x1, x2)

inst_946:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xa351367c8b4a1 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x435937d1093f0 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x08d0cd33f6191 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fea351367c8b4a1; op2val:0x3fd435937d1093f0;
op3val:0x7fd08d0cd33f6191; valaddr_reg:x3; val_offset:2838*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2838*FLEN/8, x4, x1, x2)

inst_947:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xa351367c8b4a1 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x435937d1093f0 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x08d0cd33f6191 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fea351367c8b4a1; op2val:0x3fd435937d1093f0;
op3val:0x7fd08d0cd33f6191; valaddr_reg:x3; val_offset:2841*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2841*FLEN/8, x4, x1, x2)

inst_948:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xa351367c8b4a1 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x435937d1093f0 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x08d0cd33f6191 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fea351367c8b4a1; op2val:0x3fd435937d1093f0;
op3val:0x7fd08d0cd33f6191; valaddr_reg:x3; val_offset:2844*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2844*FLEN/8, x4, x1, x2)

inst_949:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xa351367c8b4a1 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x435937d1093f0 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x08d0cd33f6191 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fea351367c8b4a1; op2val:0x3fd435937d1093f0;
op3val:0x7fd08d0cd33f6191; valaddr_reg:x3; val_offset:2847*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2847*FLEN/8, x4, x1, x2)

inst_950:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xa378a59b8daa9 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x0df805a426e35 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xba5c2c2336cc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fea378a59b8daa9; op2val:0x3ff0df805a426e35;
op3val:0x7feba5c2c2336cc0; valaddr_reg:x3; val_offset:2850*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2850*FLEN/8, x4, x1, x2)

inst_951:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xa378a59b8daa9 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x0df805a426e35 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xba5c2c2336cc0 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fea378a59b8daa9; op2val:0x3ff0df805a426e35;
op3val:0x7feba5c2c2336cc0; valaddr_reg:x3; val_offset:2853*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2853*FLEN/8, x4, x1, x2)

inst_952:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xa378a59b8daa9 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x0df805a426e35 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xba5c2c2336cc0 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fea378a59b8daa9; op2val:0x3ff0df805a426e35;
op3val:0x7feba5c2c2336cc0; valaddr_reg:x3; val_offset:2856*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2856*FLEN/8, x4, x1, x2)

inst_953:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xa378a59b8daa9 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x0df805a426e35 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xba5c2c2336cc0 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fea378a59b8daa9; op2val:0x3ff0df805a426e35;
op3val:0x7feba5c2c2336cc0; valaddr_reg:x3; val_offset:2859*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2859*FLEN/8, x4, x1, x2)

inst_954:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xa378a59b8daa9 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x0df805a426e35 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xba5c2c2336cc0 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fea378a59b8daa9; op2val:0x3ff0df805a426e35;
op3val:0x7feba5c2c2336cc0; valaddr_reg:x3; val_offset:2862*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2862*FLEN/8, x4, x1, x2)

inst_955:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xa4d3535c8560c and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x6290a8daf6d85 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x236d02dbba759 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fea4d3535c8560c; op2val:0x3fd6290a8daf6d85;
op3val:0x7fd236d02dbba759; valaddr_reg:x3; val_offset:2865*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2865*FLEN/8, x4, x1, x2)

inst_956:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xa4d3535c8560c and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x6290a8daf6d85 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x236d02dbba759 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fea4d3535c8560c; op2val:0x3fd6290a8daf6d85;
op3val:0x7fd236d02dbba759; valaddr_reg:x3; val_offset:2868*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2868*FLEN/8, x4, x1, x2)

inst_957:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xa4d3535c8560c and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x6290a8daf6d85 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x236d02dbba759 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fea4d3535c8560c; op2val:0x3fd6290a8daf6d85;
op3val:0x7fd236d02dbba759; valaddr_reg:x3; val_offset:2871*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2871*FLEN/8, x4, x1, x2)

inst_958:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xa4d3535c8560c and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x6290a8daf6d85 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x236d02dbba759 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fea4d3535c8560c; op2val:0x3fd6290a8daf6d85;
op3val:0x7fd236d02dbba759; valaddr_reg:x3; val_offset:2874*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2874*FLEN/8, x4, x1, x2)

inst_959:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xa4d3535c8560c and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x6290a8daf6d85 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x236d02dbba759 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fea4d3535c8560c; op2val:0x3fd6290a8daf6d85;
op3val:0x7fd236d02dbba759; valaddr_reg:x3; val_offset:2877*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2877*FLEN/8, x4, x1, x2)

inst_960:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xa6fdd237ee16f and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x0594fec5c4774 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0xb036f7072a98b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fea6fdd237ee16f; op2val:0x3fd0594fec5c4774;
op3val:0x7fcb036f7072a98b; valaddr_reg:x3; val_offset:2880*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2880*FLEN/8, x4, x1, x2)

inst_961:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xa6fdd237ee16f and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x0594fec5c4774 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0xb036f7072a98b and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fea6fdd237ee16f; op2val:0x3fd0594fec5c4774;
op3val:0x7fcb036f7072a98b; valaddr_reg:x3; val_offset:2883*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2883*FLEN/8, x4, x1, x2)

inst_962:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xa6fdd237ee16f and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x0594fec5c4774 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0xb036f7072a98b and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fea6fdd237ee16f; op2val:0x3fd0594fec5c4774;
op3val:0x7fcb036f7072a98b; valaddr_reg:x3; val_offset:2886*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2886*FLEN/8, x4, x1, x2)

inst_963:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xa6fdd237ee16f and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x0594fec5c4774 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0xb036f7072a98b and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fea6fdd237ee16f; op2val:0x3fd0594fec5c4774;
op3val:0x7fcb036f7072a98b; valaddr_reg:x3; val_offset:2889*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2889*FLEN/8, x4, x1, x2)

inst_964:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xa6fdd237ee16f and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x0594fec5c4774 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0xb036f7072a98b and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fea6fdd237ee16f; op2val:0x3fd0594fec5c4774;
op3val:0x7fcb036f7072a98b; valaddr_reg:x3; val_offset:2892*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2892*FLEN/8, x4, x1, x2)

inst_965:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xa85fbb6c4aa86 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x8ee51f605efcf and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x4aa053842e7fb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fea85fbb6c4aa86; op2val:0x3fc8ee51f605efcf;
op3val:0x7fc4aa053842e7fb; valaddr_reg:x3; val_offset:2895*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2895*FLEN/8, x4, x1, x2)

inst_966:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xa85fbb6c4aa86 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x8ee51f605efcf and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x4aa053842e7fb and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fea85fbb6c4aa86; op2val:0x3fc8ee51f605efcf;
op3val:0x7fc4aa053842e7fb; valaddr_reg:x3; val_offset:2898*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2898*FLEN/8, x4, x1, x2)

inst_967:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xa85fbb6c4aa86 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x8ee51f605efcf and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x4aa053842e7fb and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fea85fbb6c4aa86; op2val:0x3fc8ee51f605efcf;
op3val:0x7fc4aa053842e7fb; valaddr_reg:x3; val_offset:2901*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2901*FLEN/8, x4, x1, x2)

inst_968:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xa85fbb6c4aa86 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x8ee51f605efcf and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x4aa053842e7fb and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fea85fbb6c4aa86; op2val:0x3fc8ee51f605efcf;
op3val:0x7fc4aa053842e7fb; valaddr_reg:x3; val_offset:2904*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2904*FLEN/8, x4, x1, x2)

inst_969:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xa85fbb6c4aa86 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x8ee51f605efcf and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x4aa053842e7fb and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fea85fbb6c4aa86; op2val:0x3fc8ee51f605efcf;
op3val:0x7fc4aa053842e7fb; valaddr_reg:x3; val_offset:2907*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2907*FLEN/8, x4, x1, x2)

inst_970:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xae1041c5fd79f and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x1fe9f24a7455f and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xe3ad3d9146af5 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7feae1041c5fd79f; op2val:0x3ff1fe9f24a7455f;
op3val:0x7fee3ad3d9146af5; valaddr_reg:x3; val_offset:2910*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2910*FLEN/8, x4, x1, x2)

inst_971:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xae1041c5fd79f and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x1fe9f24a7455f and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xe3ad3d9146af5 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7feae1041c5fd79f; op2val:0x3ff1fe9f24a7455f;
op3val:0x7fee3ad3d9146af5; valaddr_reg:x3; val_offset:2913*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2913*FLEN/8, x4, x1, x2)

inst_972:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xae1041c5fd79f and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x1fe9f24a7455f and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xe3ad3d9146af5 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7feae1041c5fd79f; op2val:0x3ff1fe9f24a7455f;
op3val:0x7fee3ad3d9146af5; valaddr_reg:x3; val_offset:2916*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2916*FLEN/8, x4, x1, x2)

inst_973:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xae1041c5fd79f and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x1fe9f24a7455f and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xe3ad3d9146af5 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7feae1041c5fd79f; op2val:0x3ff1fe9f24a7455f;
op3val:0x7fee3ad3d9146af5; valaddr_reg:x3; val_offset:2919*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2919*FLEN/8, x4, x1, x2)

inst_974:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xae1041c5fd79f and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x1fe9f24a7455f and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xe3ad3d9146af5 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7feae1041c5fd79f; op2val:0x3ff1fe9f24a7455f;
op3val:0x7fee3ad3d9146af5; valaddr_reg:x3; val_offset:2922*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2922*FLEN/8, x4, x1, x2)

inst_975:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xae14739ca44d5 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x4e58ce86f883f and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x18d9f06aa8b9b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7feae14739ca44d5; op2val:0x3fc4e58ce86f883f;
op3val:0x7fc18d9f06aa8b9b; valaddr_reg:x3; val_offset:2925*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2925*FLEN/8, x4, x1, x2)

inst_976:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xae14739ca44d5 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x4e58ce86f883f and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x18d9f06aa8b9b and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7feae14739ca44d5; op2val:0x3fc4e58ce86f883f;
op3val:0x7fc18d9f06aa8b9b; valaddr_reg:x3; val_offset:2928*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2928*FLEN/8, x4, x1, x2)

inst_977:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xae14739ca44d5 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x4e58ce86f883f and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x18d9f06aa8b9b and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7feae14739ca44d5; op2val:0x3fc4e58ce86f883f;
op3val:0x7fc18d9f06aa8b9b; valaddr_reg:x3; val_offset:2931*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2931*FLEN/8, x4, x1, x2)

inst_978:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xae14739ca44d5 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x4e58ce86f883f and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x18d9f06aa8b9b and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7feae14739ca44d5; op2val:0x3fc4e58ce86f883f;
op3val:0x7fc18d9f06aa8b9b; valaddr_reg:x3; val_offset:2934*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2934*FLEN/8, x4, x1, x2)

inst_979:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xae14739ca44d5 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x4e58ce86f883f and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x18d9f06aa8b9b and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7feae14739ca44d5; op2val:0x3fc4e58ce86f883f;
op3val:0x7fc18d9f06aa8b9b; valaddr_reg:x3; val_offset:2937*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2937*FLEN/8, x4, x1, x2)

inst_980:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xae4d90c01f43f and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x2419596701007 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xeafb14f460a39 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7feae4d90c01f43f; op2val:0x3fe2419596701007;
op3val:0x7fdeafb14f460a39; valaddr_reg:x3; val_offset:2940*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2940*FLEN/8, x4, x1, x2)

inst_981:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xae4d90c01f43f and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x2419596701007 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xeafb14f460a39 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7feae4d90c01f43f; op2val:0x3fe2419596701007;
op3val:0x7fdeafb14f460a39; valaddr_reg:x3; val_offset:2943*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2943*FLEN/8, x4, x1, x2)

inst_982:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xae4d90c01f43f and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x2419596701007 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xeafb14f460a39 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7feae4d90c01f43f; op2val:0x3fe2419596701007;
op3val:0x7fdeafb14f460a39; valaddr_reg:x3; val_offset:2946*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2946*FLEN/8, x4, x1, x2)

inst_983:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xae4d90c01f43f and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x2419596701007 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xeafb14f460a39 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7feae4d90c01f43f; op2val:0x3fe2419596701007;
op3val:0x7fdeafb14f460a39; valaddr_reg:x3; val_offset:2949*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2949*FLEN/8, x4, x1, x2)

inst_984:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xae4d90c01f43f and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x2419596701007 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xeafb14f460a39 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7feae4d90c01f43f; op2val:0x3fe2419596701007;
op3val:0x7fdeafb14f460a39; valaddr_reg:x3; val_offset:2952*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2952*FLEN/8, x4, x1, x2)

inst_985:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xb2a7dc5f3c81b and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x2b794582212d1 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xfc77f5be94a6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7feb2a7dc5f3c81b; op2val:0x3ff2b794582212d1;
op3val:0x7fefc77f5be94a6d; valaddr_reg:x3; val_offset:2955*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2955*FLEN/8, x4, x1, x2)

inst_986:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xb2a7dc5f3c81b and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x2b794582212d1 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xfc77f5be94a6d and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7feb2a7dc5f3c81b; op2val:0x3ff2b794582212d1;
op3val:0x7fefc77f5be94a6d; valaddr_reg:x3; val_offset:2958*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2958*FLEN/8, x4, x1, x2)

inst_987:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xb2a7dc5f3c81b and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x2b794582212d1 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xfc77f5be94a6d and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7feb2a7dc5f3c81b; op2val:0x3ff2b794582212d1;
op3val:0x7fefc77f5be94a6d; valaddr_reg:x3; val_offset:2961*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2961*FLEN/8, x4, x1, x2)

inst_988:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xb2a7dc5f3c81b and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x2b794582212d1 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xfc77f5be94a6d and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7feb2a7dc5f3c81b; op2val:0x3ff2b794582212d1;
op3val:0x7fefc77f5be94a6d; valaddr_reg:x3; val_offset:2964*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2964*FLEN/8, x4, x1, x2)

inst_989:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xb2a7dc5f3c81b and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x2b794582212d1 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xfc77f5be94a6d and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7feb2a7dc5f3c81b; op2val:0x3ff2b794582212d1;
op3val:0x7fefc77f5be94a6d; valaddr_reg:x3; val_offset:2967*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2967*FLEN/8, x4, x1, x2)

inst_990:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xb48bc30c7d45b and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xe40bfa9b7f1f5 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x9cb6550f52209 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7feb48bc30c7d45b; op2val:0x3fee40bfa9b7f1f5;
op3val:0x7fe9cb6550f52209; valaddr_reg:x3; val_offset:2970*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2970*FLEN/8, x4, x1, x2)

inst_991:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xb48bc30c7d45b and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xe40bfa9b7f1f5 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x9cb6550f52209 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7feb48bc30c7d45b; op2val:0x3fee40bfa9b7f1f5;
op3val:0x7fe9cb6550f52209; valaddr_reg:x3; val_offset:2973*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2973*FLEN/8, x4, x1, x2)

inst_992:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xb48bc30c7d45b and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xe40bfa9b7f1f5 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x9cb6550f52209 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7feb48bc30c7d45b; op2val:0x3fee40bfa9b7f1f5;
op3val:0x7fe9cb6550f52209; valaddr_reg:x3; val_offset:2976*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2976*FLEN/8, x4, x1, x2)

inst_993:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xb48bc30c7d45b and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xe40bfa9b7f1f5 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x9cb6550f52209 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7feb48bc30c7d45b; op2val:0x3fee40bfa9b7f1f5;
op3val:0x7fe9cb6550f52209; valaddr_reg:x3; val_offset:2979*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2979*FLEN/8, x4, x1, x2)

inst_994:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xb48bc30c7d45b and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xe40bfa9b7f1f5 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x9cb6550f52209 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7feb48bc30c7d45b; op2val:0x3fee40bfa9b7f1f5;
op3val:0x7fe9cb6550f52209; valaddr_reg:x3; val_offset:2982*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2982*FLEN/8, x4, x1, x2)

inst_995:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xb7892d8885ef9 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x5973ca5b38043 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x288f5635a6591 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7feb7892d8885ef9; op2val:0x3fd5973ca5b38043;
op3val:0x7fd288f5635a6591; valaddr_reg:x3; val_offset:2985*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2985*FLEN/8, x4, x1, x2)

inst_996:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xb7892d8885ef9 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x5973ca5b38043 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x288f5635a6591 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7feb7892d8885ef9; op2val:0x3fd5973ca5b38043;
op3val:0x7fd288f5635a6591; valaddr_reg:x3; val_offset:2988*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2988*FLEN/8, x4, x1, x2)

inst_997:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xb7892d8885ef9 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x5973ca5b38043 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x288f5635a6591 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7feb7892d8885ef9; op2val:0x3fd5973ca5b38043;
op3val:0x7fd288f5635a6591; valaddr_reg:x3; val_offset:2991*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2991*FLEN/8, x4, x1, x2)

inst_998:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xb7892d8885ef9 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x5973ca5b38043 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x288f5635a6591 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7feb7892d8885ef9; op2val:0x3fd5973ca5b38043;
op3val:0x7fd288f5635a6591; valaddr_reg:x3; val_offset:2994*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2994*FLEN/8, x4, x1, x2)

inst_999:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xb7892d8885ef9 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x5973ca5b38043 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x288f5635a6591 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7feb7892d8885ef9; op2val:0x3fd5973ca5b38043;
op3val:0x7fd288f5635a6591; valaddr_reg:x3; val_offset:2997*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2997*FLEN/8, x4, x1, x2)

inst_1000:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xba05bd05d31dd and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x9ce23435bfc76 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x6473e7b61bd02 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7feba05bd05d31dd; op2val:0x3fe9ce23435bfc76;
op3val:0x7fe6473e7b61bd02; valaddr_reg:x3; val_offset:3000*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3000*FLEN/8, x4, x1, x2)

inst_1001:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xba05bd05d31dd and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x9ce23435bfc76 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x6473e7b61bd02 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7feba05bd05d31dd; op2val:0x3fe9ce23435bfc76;
op3val:0x7fe6473e7b61bd02; valaddr_reg:x3; val_offset:3003*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3003*FLEN/8, x4, x1, x2)

inst_1002:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xba05bd05d31dd and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x9ce23435bfc76 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x6473e7b61bd02 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7feba05bd05d31dd; op2val:0x3fe9ce23435bfc76;
op3val:0x7fe6473e7b61bd02; valaddr_reg:x3; val_offset:3006*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3006*FLEN/8, x4, x1, x2)

inst_1003:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xba05bd05d31dd and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x9ce23435bfc76 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x6473e7b61bd02 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7feba05bd05d31dd; op2val:0x3fe9ce23435bfc76;
op3val:0x7fe6473e7b61bd02; valaddr_reg:x3; val_offset:3009*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3009*FLEN/8, x4, x1, x2)

inst_1004:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xba05bd05d31dd and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x9ce23435bfc76 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x6473e7b61bd02 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7feba05bd05d31dd; op2val:0x3fe9ce23435bfc76;
op3val:0x7fe6473e7b61bd02; valaddr_reg:x3; val_offset:3012*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3012*FLEN/8, x4, x1, x2)

inst_1005:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xbdb72220615e4 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x8a5ff217edb25 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x5751737e23b77 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7febdb72220615e4; op2val:0x3fe8a5ff217edb25;
op3val:0x7fe5751737e23b77; valaddr_reg:x3; val_offset:3015*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3015*FLEN/8, x4, x1, x2)

inst_1006:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xbdb72220615e4 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x8a5ff217edb25 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x5751737e23b77 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7febdb72220615e4; op2val:0x3fe8a5ff217edb25;
op3val:0x7fe5751737e23b77; valaddr_reg:x3; val_offset:3018*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3018*FLEN/8, x4, x1, x2)

inst_1007:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xbdb72220615e4 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x8a5ff217edb25 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x5751737e23b77 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7febdb72220615e4; op2val:0x3fe8a5ff217edb25;
op3val:0x7fe5751737e23b77; valaddr_reg:x3; val_offset:3021*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3021*FLEN/8, x4, x1, x2)

inst_1008:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xbdb72220615e4 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x8a5ff217edb25 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x5751737e23b77 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7febdb72220615e4; op2val:0x3fe8a5ff217edb25;
op3val:0x7fe5751737e23b77; valaddr_reg:x3; val_offset:3024*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3024*FLEN/8, x4, x1, x2)

inst_1009:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xbdb72220615e4 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x8a5ff217edb25 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x5751737e23b77 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7febdb72220615e4; op2val:0x3fe8a5ff217edb25;
op3val:0x7fe5751737e23b77; valaddr_reg:x3; val_offset:3027*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3027*FLEN/8, x4, x1, x2)

inst_1010:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xbfc0312b8e8ac and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xd32130c641952 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x9882d363cb1ba and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7febfc0312b8e8ac; op2val:0x3fed32130c641952;
op3val:0x7fe9882d363cb1ba; valaddr_reg:x3; val_offset:3030*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3030*FLEN/8, x4, x1, x2)

inst_1011:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xbfc0312b8e8ac and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xd32130c641952 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x9882d363cb1ba and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7febfc0312b8e8ac; op2val:0x3fed32130c641952;
op3val:0x7fe9882d363cb1ba; valaddr_reg:x3; val_offset:3033*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3033*FLEN/8, x4, x1, x2)

inst_1012:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xbfc0312b8e8ac and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xd32130c641952 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x9882d363cb1ba and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7febfc0312b8e8ac; op2val:0x3fed32130c641952;
op3val:0x7fe9882d363cb1ba; valaddr_reg:x3; val_offset:3036*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3036*FLEN/8, x4, x1, x2)

inst_1013:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xbfc0312b8e8ac and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xd32130c641952 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x9882d363cb1ba and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7febfc0312b8e8ac; op2val:0x3fed32130c641952;
op3val:0x7fe9882d363cb1ba; valaddr_reg:x3; val_offset:3039*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3039*FLEN/8, x4, x1, x2)

inst_1014:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xbfc0312b8e8ac and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xd32130c641952 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x9882d363cb1ba and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7febfc0312b8e8ac; op2val:0x3fed32130c641952;
op3val:0x7fe9882d363cb1ba; valaddr_reg:x3; val_offset:3042*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3042*FLEN/8, x4, x1, x2)

inst_1015:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xc03ea0b45fe6a and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x6ef94d7b62f69 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x4147072b89211 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fec03ea0b45fe6a; op2val:0x3fd6ef94d7b62f69;
op3val:0x7fd4147072b89211; valaddr_reg:x3; val_offset:3045*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3045*FLEN/8, x4, x1, x2)

inst_1016:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xc03ea0b45fe6a and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x6ef94d7b62f69 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x4147072b89211 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fec03ea0b45fe6a; op2val:0x3fd6ef94d7b62f69;
op3val:0x7fd4147072b89211; valaddr_reg:x3; val_offset:3048*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3048*FLEN/8, x4, x1, x2)

inst_1017:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xc03ea0b45fe6a and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x6ef94d7b62f69 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x4147072b89211 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fec03ea0b45fe6a; op2val:0x3fd6ef94d7b62f69;
op3val:0x7fd4147072b89211; valaddr_reg:x3; val_offset:3051*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3051*FLEN/8, x4, x1, x2)

inst_1018:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xc03ea0b45fe6a and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x6ef94d7b62f69 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x4147072b89211 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fec03ea0b45fe6a; op2val:0x3fd6ef94d7b62f69;
op3val:0x7fd4147072b89211; valaddr_reg:x3; val_offset:3054*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3054*FLEN/8, x4, x1, x2)

inst_1019:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xc03ea0b45fe6a and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x6ef94d7b62f69 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x4147072b89211 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fec03ea0b45fe6a; op2val:0x3fd6ef94d7b62f69;
op3val:0x7fd4147072b89211; valaddr_reg:x3; val_offset:3057*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3057*FLEN/8, x4, x1, x2)

inst_1020:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xc402aa48c8c77 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x18907c865e8fb and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xef62079def623 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fec402aa48c8c77; op2val:0x3ff18907c865e8fb;
op3val:0x7feef62079def623; valaddr_reg:x3; val_offset:3060*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3060*FLEN/8, x4, x1, x2)

inst_1021:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xc402aa48c8c77 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x18907c865e8fb and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xef62079def623 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fec402aa48c8c77; op2val:0x3ff18907c865e8fb;
op3val:0x7feef62079def623; valaddr_reg:x3; val_offset:3063*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3063*FLEN/8, x4, x1, x2)

inst_1022:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xc402aa48c8c77 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x18907c865e8fb and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xef62079def623 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fec402aa48c8c77; op2val:0x3ff18907c865e8fb;
op3val:0x7feef62079def623; valaddr_reg:x3; val_offset:3066*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3066*FLEN/8, x4, x1, x2)

inst_1023:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xc402aa48c8c77 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x18907c865e8fb and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xef62079def623 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fec402aa48c8c77; op2val:0x3ff18907c865e8fb;
op3val:0x7feef62079def623; valaddr_reg:x3; val_offset:3069*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3069*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_9)

inst_1024:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xc402aa48c8c77 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x18907c865e8fb and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xef62079def623 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fec402aa48c8c77; op2val:0x3ff18907c865e8fb;
op3val:0x7feef62079def623; valaddr_reg:x3; val_offset:3072*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3072*FLEN/8, x4, x1, x2)

inst_1025:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xcc8f9737be20b and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xbbf242bc1ad44 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x8f58293cebb41 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fecc8f9737be20b; op2val:0x3febbf242bc1ad44;
op3val:0x7fe8f58293cebb41; valaddr_reg:x3; val_offset:3075*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3075*FLEN/8, x4, x1, x2)

inst_1026:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xcc8f9737be20b and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xbbf242bc1ad44 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x8f58293cebb41 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fecc8f9737be20b; op2val:0x3febbf242bc1ad44;
op3val:0x7fe8f58293cebb41; valaddr_reg:x3; val_offset:3078*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3078*FLEN/8, x4, x1, x2)

inst_1027:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xcc8f9737be20b and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xbbf242bc1ad44 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x8f58293cebb41 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fecc8f9737be20b; op2val:0x3febbf242bc1ad44;
op3val:0x7fe8f58293cebb41; valaddr_reg:x3; val_offset:3081*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3081*FLEN/8, x4, x1, x2)

inst_1028:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xcc8f9737be20b and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xbbf242bc1ad44 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x8f58293cebb41 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fecc8f9737be20b; op2val:0x3febbf242bc1ad44;
op3val:0x7fe8f58293cebb41; valaddr_reg:x3; val_offset:3084*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3084*FLEN/8, x4, x1, x2)

inst_1029:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xcc8f9737be20b and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xbbf242bc1ad44 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x8f58293cebb41 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fecc8f9737be20b; op2val:0x3febbf242bc1ad44;
op3val:0x7fe8f58293cebb41; valaddr_reg:x3; val_offset:3087*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3087*FLEN/8, x4, x1, x2)

inst_1030:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xcf48c61dc85b9 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xc85988489669a and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x9cedd3e9f9949 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fecf48c61dc85b9; op2val:0x3fec85988489669a;
op3val:0x7fe9cedd3e9f9949; valaddr_reg:x3; val_offset:3090*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3090*FLEN/8, x4, x1, x2)

inst_1031:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xcf48c61dc85b9 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xc85988489669a and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x9cedd3e9f9949 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fecf48c61dc85b9; op2val:0x3fec85988489669a;
op3val:0x7fe9cedd3e9f9949; valaddr_reg:x3; val_offset:3093*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3093*FLEN/8, x4, x1, x2)

inst_1032:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xcf48c61dc85b9 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xc85988489669a and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x9cedd3e9f9949 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fecf48c61dc85b9; op2val:0x3fec85988489669a;
op3val:0x7fe9cedd3e9f9949; valaddr_reg:x3; val_offset:3096*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3096*FLEN/8, x4, x1, x2)

inst_1033:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xcf48c61dc85b9 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xc85988489669a and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x9cedd3e9f9949 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fecf48c61dc85b9; op2val:0x3fec85988489669a;
op3val:0x7fe9cedd3e9f9949; valaddr_reg:x3; val_offset:3099*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3099*FLEN/8, x4, x1, x2)

inst_1034:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xcf48c61dc85b9 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xc85988489669a and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x9cedd3e9f9949 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fecf48c61dc85b9; op2val:0x3fec85988489669a;
op3val:0x7fe9cedd3e9f9949; valaddr_reg:x3; val_offset:3102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3102*FLEN/8, x4, x1, x2)

inst_1035:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xd1ce4f18ddc4f and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xb842ba2798159 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x908a00ed8919c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fed1ce4f18ddc4f; op2val:0x3feb842ba2798159;
op3val:0x7fe908a00ed8919c; valaddr_reg:x3; val_offset:3105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3105*FLEN/8, x4, x1, x2)

inst_1036:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xd1ce4f18ddc4f and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xb842ba2798159 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x908a00ed8919c and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fed1ce4f18ddc4f; op2val:0x3feb842ba2798159;
op3val:0x7fe908a00ed8919c; valaddr_reg:x3; val_offset:3108*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3108*FLEN/8, x4, x1, x2)

inst_1037:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xd1ce4f18ddc4f and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xb842ba2798159 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x908a00ed8919c and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fed1ce4f18ddc4f; op2val:0x3feb842ba2798159;
op3val:0x7fe908a00ed8919c; valaddr_reg:x3; val_offset:3111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3111*FLEN/8, x4, x1, x2)

inst_1038:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xd1ce4f18ddc4f and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xb842ba2798159 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x908a00ed8919c and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fed1ce4f18ddc4f; op2val:0x3feb842ba2798159;
op3val:0x7fe908a00ed8919c; valaddr_reg:x3; val_offset:3114*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3114*FLEN/8, x4, x1, x2)

inst_1039:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xd1ce4f18ddc4f and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xb842ba2798159 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x908a00ed8919c and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fed1ce4f18ddc4f; op2val:0x3feb842ba2798159;
op3val:0x7fe908a00ed8919c; valaddr_reg:x3; val_offset:3117*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3117*FLEN/8, x4, x1, x2)

inst_1040:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xd331a1c40e3c1 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xf16a8dc465195 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xc5e2e829adb51 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fed331a1c40e3c1; op2val:0x3fdf16a8dc465195;
op3val:0x7fdc5e2e829adb51; valaddr_reg:x3; val_offset:3120*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3120*FLEN/8, x4, x1, x2)

inst_1041:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xd331a1c40e3c1 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xf16a8dc465195 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xc5e2e829adb51 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fed331a1c40e3c1; op2val:0x3fdf16a8dc465195;
op3val:0x7fdc5e2e829adb51; valaddr_reg:x3; val_offset:3123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3123*FLEN/8, x4, x1, x2)

inst_1042:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xd331a1c40e3c1 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xf16a8dc465195 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xc5e2e829adb51 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fed331a1c40e3c1; op2val:0x3fdf16a8dc465195;
op3val:0x7fdc5e2e829adb51; valaddr_reg:x3; val_offset:3126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3126*FLEN/8, x4, x1, x2)

inst_1043:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xd331a1c40e3c1 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xf16a8dc465195 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xc5e2e829adb51 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fed331a1c40e3c1; op2val:0x3fdf16a8dc465195;
op3val:0x7fdc5e2e829adb51; valaddr_reg:x3; val_offset:3129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3129*FLEN/8, x4, x1, x2)

inst_1044:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xd331a1c40e3c1 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xf16a8dc465195 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xc5e2e829adb51 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fed331a1c40e3c1; op2val:0x3fdf16a8dc465195;
op3val:0x7fdc5e2e829adb51; valaddr_reg:x3; val_offset:3132*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3132*FLEN/8, x4, x1, x2)

inst_1045:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xde89819c9c8ed and fs2 == 0 and fe2 == 0x3fb and fm2 == 0xd1c51041f81fa and fs3 == 0 and fe3 == 0x7fb and fm3 == 0xb35411510f5bf and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fede89819c9c8ed; op2val:0x3fbd1c51041f81fa;
op3val:0x7fbb35411510f5bf; valaddr_reg:x3; val_offset:3135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3135*FLEN/8, x4, x1, x2)

inst_1046:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xde89819c9c8ed and fs2 == 0 and fe2 == 0x3fb and fm2 == 0xd1c51041f81fa and fs3 == 0 and fe3 == 0x7fb and fm3 == 0xb35411510f5bf and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fede89819c9c8ed; op2val:0x3fbd1c51041f81fa;
op3val:0x7fbb35411510f5bf; valaddr_reg:x3; val_offset:3138*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3138*FLEN/8, x4, x1, x2)

inst_1047:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xde89819c9c8ed and fs2 == 0 and fe2 == 0x3fb and fm2 == 0xd1c51041f81fa and fs3 == 0 and fe3 == 0x7fb and fm3 == 0xb35411510f5bf and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fede89819c9c8ed; op2val:0x3fbd1c51041f81fa;
op3val:0x7fbb35411510f5bf; valaddr_reg:x3; val_offset:3141*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3141*FLEN/8, x4, x1, x2)

inst_1048:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xde89819c9c8ed and fs2 == 0 and fe2 == 0x3fb and fm2 == 0xd1c51041f81fa and fs3 == 0 and fe3 == 0x7fb and fm3 == 0xb35411510f5bf and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fede89819c9c8ed; op2val:0x3fbd1c51041f81fa;
op3val:0x7fbb35411510f5bf; valaddr_reg:x3; val_offset:3144*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3144*FLEN/8, x4, x1, x2)

inst_1049:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xde89819c9c8ed and fs2 == 0 and fe2 == 0x3fb and fm2 == 0xd1c51041f81fa and fs3 == 0 and fe3 == 0x7fb and fm3 == 0xb35411510f5bf and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fede89819c9c8ed; op2val:0x3fbd1c51041f81fa;
op3val:0x7fbb35411510f5bf; valaddr_reg:x3; val_offset:3147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3147*FLEN/8, x4, x1, x2)

inst_1050:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xdfc13e2e47ba6 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x0df028bb6dde5 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xf9e01fd65e87a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fedfc13e2e47ba6; op2val:0x3ff0df028bb6dde5;
op3val:0x7fef9e01fd65e87a; valaddr_reg:x3; val_offset:3150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3150*FLEN/8, x4, x1, x2)

inst_1051:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xdfc13e2e47ba6 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x0df028bb6dde5 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xf9e01fd65e87a and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fedfc13e2e47ba6; op2val:0x3ff0df028bb6dde5;
op3val:0x7fef9e01fd65e87a; valaddr_reg:x3; val_offset:3153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3153*FLEN/8, x4, x1, x2)

inst_1052:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xdfc13e2e47ba6 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x0df028bb6dde5 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xf9e01fd65e87a and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fedfc13e2e47ba6; op2val:0x3ff0df028bb6dde5;
op3val:0x7fef9e01fd65e87a; valaddr_reg:x3; val_offset:3156*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3156*FLEN/8, x4, x1, x2)

inst_1053:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xdfc13e2e47ba6 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x0df028bb6dde5 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xf9e01fd65e87a and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fedfc13e2e47ba6; op2val:0x3ff0df028bb6dde5;
op3val:0x7fef9e01fd65e87a; valaddr_reg:x3; val_offset:3159*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3159*FLEN/8, x4, x1, x2)

inst_1054:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xdfc13e2e47ba6 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x0df028bb6dde5 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xf9e01fd65e87a and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fedfc13e2e47ba6; op2val:0x3ff0df028bb6dde5;
op3val:0x7fef9e01fd65e87a; valaddr_reg:x3; val_offset:3162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3162*FLEN/8, x4, x1, x2)

inst_1055:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xe2657e7b613a3 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x1a22aa692456f and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x09d28ff61dcaf and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fee2657e7b613a3; op2val:0x3fd1a22aa692456f;
op3val:0x7fd09d28ff61dcaf; valaddr_reg:x3; val_offset:3165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3165*FLEN/8, x4, x1, x2)

inst_1056:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xe2657e7b613a3 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x1a22aa692456f and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x09d28ff61dcaf and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fee2657e7b613a3; op2val:0x3fd1a22aa692456f;
op3val:0x7fd09d28ff61dcaf; valaddr_reg:x3; val_offset:3168*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3168*FLEN/8, x4, x1, x2)

inst_1057:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xe2657e7b613a3 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x1a22aa692456f and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x09d28ff61dcaf and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fee2657e7b613a3; op2val:0x3fd1a22aa692456f;
op3val:0x7fd09d28ff61dcaf; valaddr_reg:x3; val_offset:3171*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3171*FLEN/8, x4, x1, x2)

inst_1058:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xe2657e7b613a3 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x1a22aa692456f and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x09d28ff61dcaf and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fee2657e7b613a3; op2val:0x3fd1a22aa692456f;
op3val:0x7fd09d28ff61dcaf; valaddr_reg:x3; val_offset:3174*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3174*FLEN/8, x4, x1, x2)

inst_1059:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xe2657e7b613a3 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x1a22aa692456f and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x09d28ff61dcaf and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fee2657e7b613a3; op2val:0x3fd1a22aa692456f;
op3val:0x7fd09d28ff61dcaf; valaddr_reg:x3; val_offset:3177*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3177*FLEN/8, x4, x1, x2)

inst_1060:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xe7fc7388080d7 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x72ee1e089780f and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x61886276fd2a1 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fee7fc7388080d7; op2val:0x3fe72ee1e089780f;
op3val:0x7fe61886276fd2a1; valaddr_reg:x3; val_offset:3180*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3180*FLEN/8, x4, x1, x2)

inst_1061:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xe7fc7388080d7 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x72ee1e089780f and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x61886276fd2a1 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fee7fc7388080d7; op2val:0x3fe72ee1e089780f;
op3val:0x7fe61886276fd2a1; valaddr_reg:x3; val_offset:3183*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3183*FLEN/8, x4, x1, x2)

inst_1062:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xe7fc7388080d7 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x72ee1e089780f and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x61886276fd2a1 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fee7fc7388080d7; op2val:0x3fe72ee1e089780f;
op3val:0x7fe61886276fd2a1; valaddr_reg:x3; val_offset:3186*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3186*FLEN/8, x4, x1, x2)

inst_1063:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xe7fc7388080d7 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x72ee1e089780f and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x61886276fd2a1 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fee7fc7388080d7; op2val:0x3fe72ee1e089780f;
op3val:0x7fe61886276fd2a1; valaddr_reg:x3; val_offset:3189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3189*FLEN/8, x4, x1, x2)

inst_1064:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xe7fc7388080d7 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x72ee1e089780f and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x61886276fd2a1 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fee7fc7388080d7; op2val:0x3fe72ee1e089780f;
op3val:0x7fe61886276fd2a1; valaddr_reg:x3; val_offset:3192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3192*FLEN/8, x4, x1, x2)

inst_1065:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xe8f5d7be5e740 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x86fb25e38210f and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x75631c0a4f12b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fee8f5d7be5e740; op2val:0x3fd86fb25e38210f;
op3val:0x7fd75631c0a4f12b; valaddr_reg:x3; val_offset:3195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3195*FLEN/8, x4, x1, x2)

inst_1066:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xe8f5d7be5e740 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x86fb25e38210f and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x75631c0a4f12b and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fee8f5d7be5e740; op2val:0x3fd86fb25e38210f;
op3val:0x7fd75631c0a4f12b; valaddr_reg:x3; val_offset:3198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3198*FLEN/8, x4, x1, x2)

inst_1067:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xe8f5d7be5e740 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x86fb25e38210f and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x75631c0a4f12b and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fee8f5d7be5e740; op2val:0x3fd86fb25e38210f;
op3val:0x7fd75631c0a4f12b; valaddr_reg:x3; val_offset:3201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3201*FLEN/8, x4, x1, x2)

inst_1068:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xe8f5d7be5e740 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x86fb25e38210f and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x75631c0a4f12b and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fee8f5d7be5e740; op2val:0x3fd86fb25e38210f;
op3val:0x7fd75631c0a4f12b; valaddr_reg:x3; val_offset:3204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3204*FLEN/8, x4, x1, x2)

inst_1069:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xe8f5d7be5e740 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x86fb25e38210f and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x75631c0a4f12b and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fee8f5d7be5e740; op2val:0x3fd86fb25e38210f;
op3val:0x7fd75631c0a4f12b; valaddr_reg:x3; val_offset:3207*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3207*FLEN/8, x4, x1, x2)

inst_1070:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xe9bc581608b2c and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xdec7e893c57ef and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xc9f60d677f14f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fee9bc581608b2c; op2val:0x3fddec7e893c57ef;
op3val:0x7fdc9f60d677f14f; valaddr_reg:x3; val_offset:3210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3210*FLEN/8, x4, x1, x2)

inst_1071:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xe9bc581608b2c and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xdec7e893c57ef and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xc9f60d677f14f and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fee9bc581608b2c; op2val:0x3fddec7e893c57ef;
op3val:0x7fdc9f60d677f14f; valaddr_reg:x3; val_offset:3213*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3213*FLEN/8, x4, x1, x2)

inst_1072:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xe9bc581608b2c and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xdec7e893c57ef and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xc9f60d677f14f and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fee9bc581608b2c; op2val:0x3fddec7e893c57ef;
op3val:0x7fdc9f60d677f14f; valaddr_reg:x3; val_offset:3216*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3216*FLEN/8, x4, x1, x2)

inst_1073:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xe9bc581608b2c and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xdec7e893c57ef and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xc9f60d677f14f and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fee9bc581608b2c; op2val:0x3fddec7e893c57ef;
op3val:0x7fdc9f60d677f14f; valaddr_reg:x3; val_offset:3219*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3219*FLEN/8, x4, x1, x2)

inst_1074:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xe9bc581608b2c and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xdec7e893c57ef and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xc9f60d677f14f and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fee9bc581608b2c; op2val:0x3fddec7e893c57ef;
op3val:0x7fdc9f60d677f14f; valaddr_reg:x3; val_offset:3222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3222*FLEN/8, x4, x1, x2)

inst_1075:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xea5bbe8ec4a1e and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x42ba30fb3fcfe and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x351605153e7bf and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7feea5bbe8ec4a1e; op2val:0x3fc42ba30fb3fcfe;
op3val:0x7fc351605153e7bf; valaddr_reg:x3; val_offset:3225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3225*FLEN/8, x4, x1, x2)

inst_1076:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xea5bbe8ec4a1e and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x42ba30fb3fcfe and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x351605153e7bf and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7feea5bbe8ec4a1e; op2val:0x3fc42ba30fb3fcfe;
op3val:0x7fc351605153e7bf; valaddr_reg:x3; val_offset:3228*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3228*FLEN/8, x4, x1, x2)

inst_1077:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xea5bbe8ec4a1e and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x42ba30fb3fcfe and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x351605153e7bf and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7feea5bbe8ec4a1e; op2val:0x3fc42ba30fb3fcfe;
op3val:0x7fc351605153e7bf; valaddr_reg:x3; val_offset:3231*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3231*FLEN/8, x4, x1, x2)

inst_1078:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xea5bbe8ec4a1e and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x42ba30fb3fcfe and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x351605153e7bf and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7feea5bbe8ec4a1e; op2val:0x3fc42ba30fb3fcfe;
op3val:0x7fc351605153e7bf; valaddr_reg:x3; val_offset:3234*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3234*FLEN/8, x4, x1, x2)

inst_1079:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xea5bbe8ec4a1e and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x42ba30fb3fcfe and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x351605153e7bf and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7feea5bbe8ec4a1e; op2val:0x3fc42ba30fb3fcfe;
op3val:0x7fc351605153e7bf; valaddr_reg:x3; val_offset:3237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3237*FLEN/8, x4, x1, x2)

inst_1080:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xf118846e7cd8c and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x569b4d6573125 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x4ca2288693d12 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fef118846e7cd8c; op2val:0x3fe569b4d6573125;
op3val:0x7fe4ca2288693d12; valaddr_reg:x3; val_offset:3240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3240*FLEN/8, x4, x1, x2)

inst_1081:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xf118846e7cd8c and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x569b4d6573125 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x4ca2288693d12 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fef118846e7cd8c; op2val:0x3fe569b4d6573125;
op3val:0x7fe4ca2288693d12; valaddr_reg:x3; val_offset:3243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3243*FLEN/8, x4, x1, x2)

inst_1082:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xf118846e7cd8c and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x569b4d6573125 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x4ca2288693d12 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fef118846e7cd8c; op2val:0x3fe569b4d6573125;
op3val:0x7fe4ca2288693d12; valaddr_reg:x3; val_offset:3246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3246*FLEN/8, x4, x1, x2)

inst_1083:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xf118846e7cd8c and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x569b4d6573125 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x4ca2288693d12 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fef118846e7cd8c; op2val:0x3fe569b4d6573125;
op3val:0x7fe4ca2288693d12; valaddr_reg:x3; val_offset:3249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3249*FLEN/8, x4, x1, x2)

inst_1084:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xf118846e7cd8c and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x569b4d6573125 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x4ca2288693d12 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fef118846e7cd8c; op2val:0x3fe569b4d6573125;
op3val:0x7fe4ca2288693d12; valaddr_reg:x3; val_offset:3252*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3252*FLEN/8, x4, x1, x2)

inst_1085:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xf17d106e32604 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xa12980fda43d2 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x9556afbb48d81 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fef17d106e32604; op2val:0x3fda12980fda43d2;
op3val:0x7fd9556afbb48d81; valaddr_reg:x3; val_offset:3255*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3255*FLEN/8, x4, x1, x2)

inst_1086:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xf17d106e32604 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xa12980fda43d2 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x9556afbb48d81 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fef17d106e32604; op2val:0x3fda12980fda43d2;
op3val:0x7fd9556afbb48d81; valaddr_reg:x3; val_offset:3258*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3258*FLEN/8, x4, x1, x2)

inst_1087:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xf17d106e32604 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xa12980fda43d2 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x9556afbb48d81 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fef17d106e32604; op2val:0x3fda12980fda43d2;
op3val:0x7fd9556afbb48d81; valaddr_reg:x3; val_offset:3261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3261*FLEN/8, x4, x1, x2)

inst_1088:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xf17d106e32604 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xa12980fda43d2 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x9556afbb48d81 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fef17d106e32604; op2val:0x3fda12980fda43d2;
op3val:0x7fd9556afbb48d81; valaddr_reg:x3; val_offset:3264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3264*FLEN/8, x4, x1, x2)

inst_1089:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xf17d106e32604 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xa12980fda43d2 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x9556afbb48d81 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fef17d106e32604; op2val:0x3fda12980fda43d2;
op3val:0x7fd9556afbb48d81; valaddr_reg:x3; val_offset:3267*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3267*FLEN/8, x4, x1, x2)

inst_1090:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xf1fba43f08c95 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x1ffc5a61fb28d and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x181a0054b4c77 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fef1fba43f08c95; op2val:0x3fe1ffc5a61fb28d;
op3val:0x7fe181a0054b4c77; valaddr_reg:x3; val_offset:3270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3270*FLEN/8, x4, x1, x2)

inst_1091:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xf1fba43f08c95 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x1ffc5a61fb28d and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x181a0054b4c77 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fef1fba43f08c95; op2val:0x3fe1ffc5a61fb28d;
op3val:0x7fe181a0054b4c77; valaddr_reg:x3; val_offset:3273*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3273*FLEN/8, x4, x1, x2)

inst_1092:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xf1fba43f08c95 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x1ffc5a61fb28d and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x181a0054b4c77 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fef1fba43f08c95; op2val:0x3fe1ffc5a61fb28d;
op3val:0x7fe181a0054b4c77; valaddr_reg:x3; val_offset:3276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3276*FLEN/8, x4, x1, x2)

inst_1093:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xf1fba43f08c95 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x1ffc5a61fb28d and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x181a0054b4c77 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fef1fba43f08c95; op2val:0x3fe1ffc5a61fb28d;
op3val:0x7fe181a0054b4c77; valaddr_reg:x3; val_offset:3279*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3279*FLEN/8, x4, x1, x2)

inst_1094:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xf1fba43f08c95 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x1ffc5a61fb28d and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x181a0054b4c77 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fef1fba43f08c95; op2val:0x3fe1ffc5a61fb28d;
op3val:0x7fe181a0054b4c77; valaddr_reg:x3; val_offset:3282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3282*FLEN/8, x4, x1, x2)

inst_1095:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xf3d7b58e26345 and fs2 == 0 and fe2 == 0x3fa and fm2 == 0x86e30b0ef95b6 and fs3 == 0 and fe3 == 0x7fa and fm3 == 0x7d9af63a065bf and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fef3d7b58e26345; op2val:0x3fa86e30b0ef95b6;
op3val:0x7fa7d9af63a065bf; valaddr_reg:x3; val_offset:3285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3285*FLEN/8, x4, x1, x2)

inst_1096:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xf3d7b58e26345 and fs2 == 0 and fe2 == 0x3fa and fm2 == 0x86e30b0ef95b6 and fs3 == 0 and fe3 == 0x7fa and fm3 == 0x7d9af63a065bf and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fef3d7b58e26345; op2val:0x3fa86e30b0ef95b6;
op3val:0x7fa7d9af63a065bf; valaddr_reg:x3; val_offset:3288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3288*FLEN/8, x4, x1, x2)

inst_1097:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xf3d7b58e26345 and fs2 == 0 and fe2 == 0x3fa and fm2 == 0x86e30b0ef95b6 and fs3 == 0 and fe3 == 0x7fa and fm3 == 0x7d9af63a065bf and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fef3d7b58e26345; op2val:0x3fa86e30b0ef95b6;
op3val:0x7fa7d9af63a065bf; valaddr_reg:x3; val_offset:3291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3291*FLEN/8, x4, x1, x2)

inst_1098:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xf3d7b58e26345 and fs2 == 0 and fe2 == 0x3fa and fm2 == 0x86e30b0ef95b6 and fs3 == 0 and fe3 == 0x7fa and fm3 == 0x7d9af63a065bf and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fef3d7b58e26345; op2val:0x3fa86e30b0ef95b6;
op3val:0x7fa7d9af63a065bf; valaddr_reg:x3; val_offset:3294*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3294*FLEN/8, x4, x1, x2)

inst_1099:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xf3d7b58e26345 and fs2 == 0 and fe2 == 0x3fa and fm2 == 0x86e30b0ef95b6 and fs3 == 0 and fe3 == 0x7fa and fm3 == 0x7d9af63a065bf and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fef3d7b58e26345; op2val:0x3fa86e30b0ef95b6;
op3val:0x7fa7d9af63a065bf; valaddr_reg:x3; val_offset:3297*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3297*FLEN/8, x4, x1, x2)

inst_1100:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xf5d97a44af52a and fs2 == 0 and fe2 == 0x3fb and fm2 == 0xed60f4ded2fb1 and fs3 == 0 and fe3 == 0x7fb and fm3 == 0xe398f1061c0ef and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fef5d97a44af52a; op2val:0x3fbed60f4ded2fb1;
op3val:0x7fbe398f1061c0ef; valaddr_reg:x3; val_offset:3300*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3300*FLEN/8, x4, x1, x2)

inst_1101:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xf5d97a44af52a and fs2 == 0 and fe2 == 0x3fb and fm2 == 0xed60f4ded2fb1 and fs3 == 0 and fe3 == 0x7fb and fm3 == 0xe398f1061c0ef and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fef5d97a44af52a; op2val:0x3fbed60f4ded2fb1;
op3val:0x7fbe398f1061c0ef; valaddr_reg:x3; val_offset:3303*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3303*FLEN/8, x4, x1, x2)

inst_1102:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xf5d97a44af52a and fs2 == 0 and fe2 == 0x3fb and fm2 == 0xed60f4ded2fb1 and fs3 == 0 and fe3 == 0x7fb and fm3 == 0xe398f1061c0ef and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fef5d97a44af52a; op2val:0x3fbed60f4ded2fb1;
op3val:0x7fbe398f1061c0ef; valaddr_reg:x3; val_offset:3306*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3306*FLEN/8, x4, x1, x2)

inst_1103:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xf5d97a44af52a and fs2 == 0 and fe2 == 0x3fb and fm2 == 0xed60f4ded2fb1 and fs3 == 0 and fe3 == 0x7fb and fm3 == 0xe398f1061c0ef and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fef5d97a44af52a; op2val:0x3fbed60f4ded2fb1;
op3val:0x7fbe398f1061c0ef; valaddr_reg:x3; val_offset:3309*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3309*FLEN/8, x4, x1, x2)

inst_1104:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xf5d97a44af52a and fs2 == 0 and fe2 == 0x3fb and fm2 == 0xed60f4ded2fb1 and fs3 == 0 and fe3 == 0x7fb and fm3 == 0xe398f1061c0ef and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fef5d97a44af52a; op2val:0x3fbed60f4ded2fb1;
op3val:0x7fbe398f1061c0ef; valaddr_reg:x3; val_offset:3312*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3312*FLEN/8, x4, x1, x2)

inst_1105:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xf5eaa91e5bdd1 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x57482fe1c8752 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x5085783bff77a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fef5eaa91e5bdd1; op2val:0x3fe57482fe1c8752;
op3val:0x7fe5085783bff77a; valaddr_reg:x3; val_offset:3315*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3315*FLEN/8, x4, x1, x2)

inst_1106:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xf5eaa91e5bdd1 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x57482fe1c8752 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x5085783bff77a and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fef5eaa91e5bdd1; op2val:0x3fe57482fe1c8752;
op3val:0x7fe5085783bff77a; valaddr_reg:x3; val_offset:3318*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3318*FLEN/8, x4, x1, x2)

inst_1107:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xf5eaa91e5bdd1 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x57482fe1c8752 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x5085783bff77a and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fef5eaa91e5bdd1; op2val:0x3fe57482fe1c8752;
op3val:0x7fe5085783bff77a; valaddr_reg:x3; val_offset:3321*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3321*FLEN/8, x4, x1, x2)

inst_1108:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xf5eaa91e5bdd1 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x57482fe1c8752 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x5085783bff77a and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fef5eaa91e5bdd1; op2val:0x3fe57482fe1c8752;
op3val:0x7fe5085783bff77a; valaddr_reg:x3; val_offset:3324*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3324*FLEN/8, x4, x1, x2)

inst_1109:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xf5eaa91e5bdd1 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x57482fe1c8752 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x5085783bff77a and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fef5eaa91e5bdd1; op2val:0x3fe57482fe1c8752;
op3val:0x7fe5085783bff77a; valaddr_reg:x3; val_offset:3327*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3327*FLEN/8, x4, x1, x2)

inst_1110:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xf82e691fa0d23 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x36d8f2c34be03 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x3219bc48bfcbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fef82e691fa0d23; op2val:0x3fc36d8f2c34be03;
op3val:0x7fc3219bc48bfcbb; valaddr_reg:x3; val_offset:3330*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3330*FLEN/8, x4, x1, x2)

inst_1111:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xf82e691fa0d23 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x36d8f2c34be03 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x3219bc48bfcbb and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fef82e691fa0d23; op2val:0x3fc36d8f2c34be03;
op3val:0x7fc3219bc48bfcbb; valaddr_reg:x3; val_offset:3333*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3333*FLEN/8, x4, x1, x2)

inst_1112:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xf82e691fa0d23 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x36d8f2c34be03 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x3219bc48bfcbb and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fef82e691fa0d23; op2val:0x3fc36d8f2c34be03;
op3val:0x7fc3219bc48bfcbb; valaddr_reg:x3; val_offset:3336*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3336*FLEN/8, x4, x1, x2)

inst_1113:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xf82e691fa0d23 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x36d8f2c34be03 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x3219bc48bfcbb and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fef82e691fa0d23; op2val:0x3fc36d8f2c34be03;
op3val:0x7fc3219bc48bfcbb; valaddr_reg:x3; val_offset:3339*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3339*FLEN/8, x4, x1, x2)

inst_1114:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xf82e691fa0d23 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x36d8f2c34be03 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x3219bc48bfcbb and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fef82e691fa0d23; op2val:0x3fc36d8f2c34be03;
op3val:0x7fc3219bc48bfcbb; valaddr_reg:x3; val_offset:3342*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3342*FLEN/8, x4, x1, x2)

inst_1115:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xfad06e6abdc66 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xae929f80c30f1 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xaa36300e514cc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fefad06e6abdc66; op2val:0x3feae929f80c30f1;
op3val:0x7feaa36300e514cc; valaddr_reg:x3; val_offset:3345*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3345*FLEN/8, x4, x1, x2)

inst_1116:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xfad06e6abdc66 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xae929f80c30f1 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xaa36300e514cc and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fefad06e6abdc66; op2val:0x3feae929f80c30f1;
op3val:0x7feaa36300e514cc; valaddr_reg:x3; val_offset:3348*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3348*FLEN/8, x4, x1, x2)

inst_1117:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xfad06e6abdc66 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xae929f80c30f1 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xaa36300e514cc and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fefad06e6abdc66; op2val:0x3feae929f80c30f1;
op3val:0x7feaa36300e514cc; valaddr_reg:x3; val_offset:3351*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3351*FLEN/8, x4, x1, x2)

inst_1118:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xfad06e6abdc66 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xae929f80c30f1 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xaa36300e514cc and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fefad06e6abdc66; op2val:0x3feae929f80c30f1;
op3val:0x7feaa36300e514cc; valaddr_reg:x3; val_offset:3354*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3354*FLEN/8, x4, x1, x2)

inst_1119:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xfad06e6abdc66 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xae929f80c30f1 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xaa36300e514cc and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fefad06e6abdc66; op2val:0x3feae929f80c30f1;
op3val:0x7feaa36300e514cc; valaddr_reg:x3; val_offset:3357*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3357*FLEN/8, x4, x1, x2)

inst_1120:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0xe93a4462ebfff and fs2 == 0 and fe2 == 0x408 and fm2 == 0x4435ea24b2dc9 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x35ca63895fd77 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2e93a4462ebfff; op2val:0x4084435ea24b2dc9;
op3val:0x7fc35ca63895fd77; valaddr_reg:x3; val_offset:3360*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3360*FLEN/8, x4, x1, x2)

inst_1121:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0xe93a4462ebfff and fs2 == 0 and fe2 == 0x408 and fm2 == 0x4435ea24b2dc9 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x35ca63895fd77 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2e93a4462ebfff; op2val:0x4084435ea24b2dc9;
op3val:0x7fc35ca63895fd77; valaddr_reg:x3; val_offset:3363*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3363*FLEN/8, x4, x1, x2)

inst_1122:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0xe93a4462ebfff and fs2 == 0 and fe2 == 0x408 and fm2 == 0x4435ea24b2dc9 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x35ca63895fd77 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2e93a4462ebfff; op2val:0x4084435ea24b2dc9;
op3val:0x7fc35ca63895fd77; valaddr_reg:x3; val_offset:3366*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3366*FLEN/8, x4, x1, x2)

inst_1123:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0xe93a4462ebfff and fs2 == 0 and fe2 == 0x408 and fm2 == 0x4435ea24b2dc9 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x35ca63895fd77 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2e93a4462ebfff; op2val:0x4084435ea24b2dc9;
op3val:0x7fc35ca63895fd77; valaddr_reg:x3; val_offset:3369*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3369*FLEN/8, x4, x1, x2)

inst_1124:
// fs1 == 0 and fe1 == 0x7f5 and fm1 == 0x1835aaec2f3ff and fs2 == 0 and fe2 == 0x407 and fm2 == 0x6505bdb287230 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x86c9200abcecf and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f51835aaec2f3ff; op2val:0x4076505bdb287230;
op3val:0x7fd86c9200abcecf; valaddr_reg:x3; val_offset:3372*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3372*FLEN/8, x4, x1, x2)

inst_1125:
// fs1 == 0 and fe1 == 0x7f5 and fm1 == 0x1835aaec2f3ff and fs2 == 0 and fe2 == 0x407 and fm2 == 0x6505bdb287230 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x86c9200abcecf and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f51835aaec2f3ff; op2val:0x4076505bdb287230;
op3val:0x7fd86c9200abcecf; valaddr_reg:x3; val_offset:3375*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3375*FLEN/8, x4, x1, x2)

inst_1126:
// fs1 == 0 and fe1 == 0x7f5 and fm1 == 0x1835aaec2f3ff and fs2 == 0 and fe2 == 0x407 and fm2 == 0x6505bdb287230 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x86c9200abcecf and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f51835aaec2f3ff; op2val:0x4076505bdb287230;
op3val:0x7fd86c9200abcecf; valaddr_reg:x3; val_offset:3378*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3378*FLEN/8, x4, x1, x2)

inst_1127:
// fs1 == 0 and fe1 == 0x7f5 and fm1 == 0x1835aaec2f3ff and fs2 == 0 and fe2 == 0x407 and fm2 == 0x6505bdb287230 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x86c9200abcecf and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f51835aaec2f3ff; op2val:0x4076505bdb287230;
op3val:0x7fd86c9200abcecf; valaddr_reg:x3; val_offset:3381*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3381*FLEN/8, x4, x1, x2)

inst_1128:
// fs1 == 0 and fe1 == 0x7f5 and fm1 == 0x1835aaec2f3ff and fs2 == 0 and fe2 == 0x407 and fm2 == 0x6505bdb287230 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x86c9200abcecf and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f51835aaec2f3ff; op2val:0x4076505bdb287230;
op3val:0x7fd86c9200abcecf; valaddr_reg:x3; val_offset:3384*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3384*FLEN/8, x4, x1, x2)

inst_1129:
// fs1 == 0 and fe1 == 0x7f7 and fm1 == 0x01b818d54fa7f and fs2 == 0 and fe2 == 0x406 and fm2 == 0x967222f02addf and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x992cde89965d1 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f701b818d54fa7f; op2val:0x406967222f02addf;
op3val:0x7fe992cde89965d1; valaddr_reg:x3; val_offset:3387*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3387*FLEN/8, x4, x1, x2)

inst_1130:
// fs1 == 0 and fe1 == 0x7f7 and fm1 == 0x01b818d54fa7f and fs2 == 0 and fe2 == 0x406 and fm2 == 0x967222f02addf and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x992cde89965d1 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f701b818d54fa7f; op2val:0x406967222f02addf;
op3val:0x7fe992cde89965d1; valaddr_reg:x3; val_offset:3390*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3390*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(9164424625506926591,64,FLEN)
NAN_BOXED(9164424625506926591,64,FLEN)
NAN_BOXED(9164424625506926591,64,FLEN)
NAN_BOXED(9164424625506926591,64,FLEN)
NAN_BOXED(4648914789082017225,64,FLEN)
NAN_BOXED(4648914789082017225,64,FLEN)
NAN_BOXED(9164424625506926591,64,FLEN)
NAN_BOXED(4648914789082017225,64,FLEN)
NAN_BOXED(9164424625506926591,64,FLEN)
NAN_BOXED(9164424625506926591,64,FLEN)
NAN_BOXED(4648914789082017225,64,FLEN)
NAN_BOXED(9206303932259106167,64,FLEN)
NAN_BOXED(9164424625506926591,64,FLEN)
NAN_BOXED(4648914789082017225,64,FLEN)
NAN_BOXED(9164424625506926591,64,FLEN)
NAN_BOXED(9174258341432718335,64,FLEN)
NAN_BOXED(9174258341432718335,64,FLEN)
NAN_BOXED(9174258341432718335,64,FLEN)
NAN_BOXED(9174258341432718335,64,FLEN)
NAN_BOXED(4644988421128352304,64,FLEN)
NAN_BOXED(4644988421128352304,64,FLEN)
NAN_BOXED(9174258341432718335,64,FLEN)
NAN_BOXED(4644988421128352304,64,FLEN)
NAN_BOXED(9212232412118634191,64,FLEN)
NAN_BOXED(9174258341432718335,64,FLEN)
NAN_BOXED(9174258341432718335,64,FLEN)
NAN_BOXED(9212232412118634191,64,FLEN)
NAN_BOXED(9174258341432718335,64,FLEN)
NAN_BOXED(9174258341432718335,64,FLEN)
NAN_BOXED(9212232412118634191,64,FLEN)
NAN_BOXED(9182869883444329087,64,FLEN)
NAN_BOXED(4641354287497260511,64,FLEN)
NAN_BOXED(9217059525458748881,64,FLEN)
NAN_BOXED(9182869883444329087,64,FLEN)
NAN_BOXED(4641354287497260511,64,FLEN)
NAN_BOXED(9217059525458748881,64,FLEN)
NAN_BOXED(9182869883444329087,64,FLEN)
NAN_BOXED(4641354287497260511,64,FLEN)
NAN_BOXED(9217059525458748881,64,FLEN)
NAN_BOXED(9182869883444329087,64,FLEN)
NAN_BOXED(4641354287497260511,64,FLEN)
NAN_BOXED(9217059525458748881,64,FLEN)
NAN_BOXED(9182869883444329087,64,FLEN)
NAN_BOXED(4641354287497260511,64,FLEN)
NAN_BOXED(9217059525458748881,64,FLEN)
NAN_BOXED(9183055643955042431,64,FLEN)
NAN_BOXED(4636902076792189568,64,FLEN)
NAN_BOXED(9212904707570718623,64,FLEN)
NAN_BOXED(9183055643955042431,64,FLEN)
NAN_BOXED(4636902076792189568,64,FLEN)
NAN_BOXED(9212904707570718623,64,FLEN)
NAN_BOXED(9183055643955042431,64,FLEN)
NAN_BOXED(4636902076792189568,64,FLEN)
NAN_BOXED(9212904707570718623,64,FLEN)
NAN_BOXED(9183055643955042431,64,FLEN)
NAN_BOXED(4636902076792189568,64,FLEN)
NAN_BOXED(9212904707570718623,64,FLEN)
NAN_BOXED(9183055643955042431,64,FLEN)
NAN_BOXED(4636902076792189568,64,FLEN)
NAN_BOXED(9212904707570718623,64,FLEN)
NAN_BOXED(9184043614811200767,64,FLEN)
NAN_BOXED(4632706806350522318,64,FLEN)
NAN_BOXED(9210116478325051009,64,FLEN)
NAN_BOXED(9184043614811200767,64,FLEN)
NAN_BOXED(4632706806350522318,64,FLEN)
NAN_BOXED(9210116478325051009,64,FLEN)
NAN_BOXED(9184043614811200767,64,FLEN)
NAN_BOXED(4632706806350522318,64,FLEN)
NAN_BOXED(9210116478325051009,64,FLEN)
NAN_BOXED(9184043614811200767,64,FLEN)
NAN_BOXED(4632706806350522318,64,FLEN)
NAN_BOXED(9210116478325051009,64,FLEN)
NAN_BOXED(9184043614811200767,64,FLEN)
NAN_BOXED(4632706806350522318,64,FLEN)
NAN_BOXED(9210116478325051009,64,FLEN)
NAN_BOXED(9192555015971156927,64,FLEN)
NAN_BOXED(4625853512979331702,64,FLEN)
NAN_BOXED(9211329373425349723,64,FLEN)
NAN_BOXED(9192555015971156927,64,FLEN)
NAN_BOXED(4625853512979331702,64,FLEN)
NAN_BOXED(9211329373425349723,64,FLEN)
NAN_BOXED(9192555015971156927,64,FLEN)
NAN_BOXED(4625853512979331702,64,FLEN)
NAN_BOXED(9211329373425349723,64,FLEN)
NAN_BOXED(9192555015971156927,64,FLEN)
NAN_BOXED(4625853512979331702,64,FLEN)
NAN_BOXED(9211329373425349723,64,FLEN)
NAN_BOXED(9192555015971156927,64,FLEN)
NAN_BOXED(4625853512979331702,64,FLEN)
NAN_BOXED(9211329373425349723,64,FLEN)
NAN_BOXED(9193846561076358143,64,FLEN)
NAN_BOXED(4626452916495974015,64,FLEN)
NAN_BOXED(9213674801222647183,64,FLEN)
NAN_BOXED(9193846561076358143,64,FLEN)
NAN_BOXED(4626452916495974015,64,FLEN)
NAN_BOXED(9213674801222647183,64,FLEN)
NAN_BOXED(9193846561076358143,64,FLEN)
NAN_BOXED(4626452916495974015,64,FLEN)
NAN_BOXED(9213674801222647183,64,FLEN)
NAN_BOXED(9193846561076358143,64,FLEN)
NAN_BOXED(4626452916495974015,64,FLEN)
NAN_BOXED(9213674801222647183,64,FLEN)
NAN_BOXED(9193846561076358143,64,FLEN)
NAN_BOXED(4626452916495974015,64,FLEN)
NAN_BOXED(9213674801222647183,64,FLEN)
NAN_BOXED(9194000128200178719,64,FLEN)
NAN_BOXED(4630991800749346367,64,FLEN)
NAN_BOXED(9218426954515930771,64,FLEN)
NAN_BOXED(9194000128200178719,64,FLEN)
NAN_BOXED(4630991800749346367,64,FLEN)
NAN_BOXED(9218426954515930771,64,FLEN)
NAN_BOXED(9194000128200178719,64,FLEN)
NAN_BOXED(4630991800749346367,64,FLEN)
NAN_BOXED(9218426954515930771,64,FLEN)
NAN_BOXED(9194000128200178719,64,FLEN)
NAN_BOXED(4630991800749346367,64,FLEN)
NAN_BOXED(9218426954515930771,64,FLEN)
NAN_BOXED(9194000128200178719,64,FLEN)
NAN_BOXED(4630991800749346367,64,FLEN)
NAN_BOXED(9218426954515930771,64,FLEN)
NAN_BOXED(9194693369991797183,64,FLEN)
NAN_BOXED(4630022192379406036,64,FLEN)
NAN_BOXED(9217736523910541707,64,FLEN)
NAN_BOXED(9194693369991797183,64,FLEN)
NAN_BOXED(4630022192379406036,64,FLEN)
NAN_BOXED(9217736523910541707,64,FLEN)
NAN_BOXED(9194693369991797183,64,FLEN)
NAN_BOXED(4630022192379406036,64,FLEN)
NAN_BOXED(9217736523910541707,64,FLEN)
NAN_BOXED(9194693369991797183,64,FLEN)
NAN_BOXED(4630022192379406036,64,FLEN)
NAN_BOXED(9217736523910541707,64,FLEN)
NAN_BOXED(9194693369991797183,64,FLEN)
NAN_BOXED(4630022192379406036,64,FLEN)
NAN_BOXED(9217736523910541707,64,FLEN)
NAN_BOXED(9195395553593292223,64,FLEN)
NAN_BOXED(4621820080483852506,64,FLEN)
NAN_BOXED(9210391195258660299,64,FLEN)
NAN_BOXED(9195395553593292223,64,FLEN)
NAN_BOXED(4621820080483852506,64,FLEN)
NAN_BOXED(9210391195258660299,64,FLEN)
NAN_BOXED(9195395553593292223,64,FLEN)
NAN_BOXED(4621820080483852506,64,FLEN)
NAN_BOXED(9210391195258660299,64,FLEN)
NAN_BOXED(9195395553593292223,64,FLEN)
NAN_BOXED(4621820080483852506,64,FLEN)
NAN_BOXED(9210391195258660299,64,FLEN)
NAN_BOXED(9195395553593292223,64,FLEN)
NAN_BOXED(4621820080483852506,64,FLEN)
NAN_BOXED(9210391195258660299,64,FLEN)
NAN_BOXED(9197250533331577039,64,FLEN)
NAN_BOXED(4622700260288093463,64,FLEN)
NAN_BOXED(9213169504502704803,64,FLEN)
NAN_BOXED(9197250533331577039,64,FLEN)
NAN_BOXED(4622700260288093463,64,FLEN)
NAN_BOXED(9213169504502704803,64,FLEN)
NAN_BOXED(9197250533331577039,64,FLEN)
NAN_BOXED(4622700260288093463,64,FLEN)
NAN_BOXED(9213169504502704803,64,FLEN)
NAN_BOXED(9197250533331577039,64,FLEN)
NAN_BOXED(4622700260288093463,64,FLEN)
NAN_BOXED(9213169504502704803,64,FLEN)
NAN_BOXED(9197250533331577039,64,FLEN)
NAN_BOXED(4622700260288093463,64,FLEN)
NAN_BOXED(9213169504502704803,64,FLEN)
NAN_BOXED(9197497200686512239,64,FLEN)
NAN_BOXED(4625490442910819105,64,FLEN)
NAN_BOXED(9215879991337647037,64,FLEN)
NAN_BOXED(9197497200686512239,64,FLEN)
NAN_BOXED(4625490442910819105,64,FLEN)
NAN_BOXED(9215879991337647037,64,FLEN)
NAN_BOXED(9197497200686512239,64,FLEN)
NAN_BOXED(4625490442910819105,64,FLEN)
NAN_BOXED(9215879991337647037,64,FLEN)
NAN_BOXED(9197497200686512239,64,FLEN)
NAN_BOXED(4625490442910819105,64,FLEN)
NAN_BOXED(9215879991337647037,64,FLEN)
NAN_BOXED(9197497200686512239,64,FLEN)
NAN_BOXED(4625490442910819105,64,FLEN)
NAN_BOXED(9215879991337647037,64,FLEN)
NAN_BOXED(9197552098898230895,64,FLEN)
NAN_BOXED(4626231947388184589,64,FLEN)
NAN_BOXED(9216877823044216986,64,FLEN)
NAN_BOXED(9197552098898230895,64,FLEN)
NAN_BOXED(4626231947388184589,64,FLEN)
NAN_BOXED(9216877823044216986,64,FLEN)
NAN_BOXED(9197552098898230895,64,FLEN)
NAN_BOXED(4626231947388184589,64,FLEN)
NAN_BOXED(9216877823044216986,64,FLEN)
NAN_BOXED(9197552098898230895,64,FLEN)
NAN_BOXED(4626231947388184589,64,FLEN)
NAN_BOXED(9216877823044216986,64,FLEN)
NAN_BOXED(9197552098898230895,64,FLEN)
NAN_BOXED(4626231947388184589,64,FLEN)
NAN_BOXED(9216877823044216986,64,FLEN)
NAN_BOXED(9197851680907391535,64,FLEN)
NAN_BOXED(4603037807913938590,64,FLEN)
NAN_BOXED(9193826736278261055,64,FLEN)
NAN_BOXED(9197851680907391535,64,FLEN)
NAN_BOXED(4603037807913938590,64,FLEN)
NAN_BOXED(9193826736278261055,64,FLEN)
NAN_BOXED(9197851680907391535,64,FLEN)
NAN_BOXED(4603037807913938590,64,FLEN)
NAN_BOXED(9193826736278261055,64,FLEN)
NAN_BOXED(9197851680907391535,64,FLEN)
NAN_BOXED(4603037807913938590,64,FLEN)
NAN_BOXED(9193826736278261055,64,FLEN)
NAN_BOXED(9197851680907391535,64,FLEN)
NAN_BOXED(4603037807913938590,64,FLEN)
NAN_BOXED(9193826736278261055,64,FLEN)
NAN_BOXED(9199107321884042559,64,FLEN)
NAN_BOXED(4616195191266676281,64,FLEN)
NAN_BOXED(9208123505997675443,64,FLEN)
NAN_BOXED(9199107321884042559,64,FLEN)
NAN_BOXED(4616195191266676281,64,FLEN)
NAN_BOXED(9208123505997675443,64,FLEN)
NAN_BOXED(9199107321884042559,64,FLEN)
NAN_BOXED(4616195191266676281,64,FLEN)
NAN_BOXED(9208123505997675443,64,FLEN)
NAN_BOXED(9199107321884042559,64,FLEN)
NAN_BOXED(4616195191266676281,64,FLEN)
NAN_BOXED(9208123505997675443,64,FLEN)
NAN_BOXED(9199107321884042559,64,FLEN)
NAN_BOXED(4616195191266676281,64,FLEN)
NAN_BOXED(9208123505997675443,64,FLEN)
NAN_BOXED(9199685053671618431,64,FLEN)
NAN_BOXED(4612557181095711188,64,FLEN)
NAN_BOXED(9205531246027498387,64,FLEN)
NAN_BOXED(9199685053671618431,64,FLEN)
NAN_BOXED(4612557181095711188,64,FLEN)
NAN_BOXED(9205531246027498387,64,FLEN)
NAN_BOXED(9199685053671618431,64,FLEN)
NAN_BOXED(4612557181095711188,64,FLEN)
NAN_BOXED(9205531246027498387,64,FLEN)
NAN_BOXED(9199685053671618431,64,FLEN)
NAN_BOXED(4612557181095711188,64,FLEN)
NAN_BOXED(9205531246027498387,64,FLEN)
NAN_BOXED(9199685053671618431,64,FLEN)
NAN_BOXED(4612557181095711188,64,FLEN)
NAN_BOXED(9205531246027498387,64,FLEN)
NAN_BOXED(9200205365415286623,64,FLEN)
NAN_BOXED(4621114897678008751,64,FLEN)
NAN_BOXED(9214431812730477014,64,FLEN)
NAN_BOXED(9200205365415286623,64,FLEN)
NAN_BOXED(4621114897678008751,64,FLEN)
NAN_BOXED(9214431812730477014,64,FLEN)
NAN_BOXED(9200205365415286623,64,FLEN)
NAN_BOXED(4621114897678008751,64,FLEN)
NAN_BOXED(9214431812730477014,64,FLEN)
NAN_BOXED(9200205365415286623,64,FLEN)
NAN_BOXED(4621114897678008751,64,FLEN)
NAN_BOXED(9214431812730477014,64,FLEN)
NAN_BOXED(9200205365415286623,64,FLEN)
NAN_BOXED(4621114897678008751,64,FLEN)
NAN_BOXED(9214431812730477014,64,FLEN)
NAN_BOXED(9200343066693017007,64,FLEN)
NAN_BOXED(4623525399324130255,64,FLEN)
NAN_BOXED(9216780865573901453,64,FLEN)
NAN_BOXED(9200343066693017007,64,FLEN)
NAN_BOXED(4623525399324130255,64,FLEN)
NAN_BOXED(9216780865573901453,64,FLEN)
NAN_BOXED(9200343066693017007,64,FLEN)
NAN_BOXED(4623525399324130255,64,FLEN)
NAN_BOXED(9216780865573901453,64,FLEN)
NAN_BOXED(9200343066693017007,64,FLEN)
NAN_BOXED(4623525399324130255,64,FLEN)
NAN_BOXED(9216780865573901453,64,FLEN)
NAN_BOXED(9200343066693017007,64,FLEN)
NAN_BOXED(4623525399324130255,64,FLEN)
NAN_BOXED(9216780865573901453,64,FLEN)
NAN_BOXED(9200436273282407007,64,FLEN)
NAN_BOXED(4614963772612638345,64,FLEN)
NAN_BOXED(9208274483376377935,64,FLEN)
NAN_BOXED(9200436273282407007,64,FLEN)
NAN_BOXED(4614963772612638345,64,FLEN)
NAN_BOXED(9208274483376377935,64,FLEN)
NAN_BOXED(9200436273282407007,64,FLEN)
NAN_BOXED(4614963772612638345,64,FLEN)
NAN_BOXED(9208274483376377935,64,FLEN)
NAN_BOXED(9200436273282407007,64,FLEN)
NAN_BOXED(4614963772612638345,64,FLEN)
NAN_BOXED(9208274483376377935,64,FLEN)
NAN_BOXED(9200436273282407007,64,FLEN)
NAN_BOXED(4614963772612638345,64,FLEN)
NAN_BOXED(9208274483376377935,64,FLEN)
NAN_BOXED(9200590225431810175,64,FLEN)
NAN_BOXED(4622698743265902549,64,FLEN)
NAN_BOXED(9216179716384164278,64,FLEN)
NAN_BOXED(9200590225431810175,64,FLEN)
NAN_BOXED(4622698743265902549,64,FLEN)
NAN_BOXED(9216179716384164278,64,FLEN)
NAN_BOXED(9200590225431810175,64,FLEN)
NAN_BOXED(4622698743265902549,64,FLEN)
NAN_BOXED(9216179716384164278,64,FLEN)
NAN_BOXED(9200590225431810175,64,FLEN)
NAN_BOXED(4622698743265902549,64,FLEN)
NAN_BOXED(9216179716384164278,64,FLEN)
NAN_BOXED(9200590225431810175,64,FLEN)
NAN_BOXED(4622698743265902549,64,FLEN)
NAN_BOXED(9216179716384164278,64,FLEN)
NAN_BOXED(9200817695983071823,64,FLEN)
NAN_BOXED(4607551386432476635,64,FLEN)
NAN_BOXED(9201203346252391839,64,FLEN)
NAN_BOXED(9200817695983071823,64,FLEN)
NAN_BOXED(4607551386432476635,64,FLEN)
NAN_BOXED(9201203346252391839,64,FLEN)
NAN_BOXED(9200817695983071823,64,FLEN)
NAN_BOXED(4607551386432476635,64,FLEN)
NAN_BOXED(9201203346252391839,64,FLEN)
NAN_BOXED(9200817695983071823,64,FLEN)
NAN_BOXED(4607551386432476635,64,FLEN)
NAN_BOXED(9201203346252391839,64,FLEN)
NAN_BOXED(9200817695983071823,64,FLEN)
NAN_BOXED(4607551386432476635,64,FLEN)
NAN_BOXED(9201203346252391839,64,FLEN)
NAN_BOXED(9200983078923433855,64,FLEN)
NAN_BOXED(4624815309915978005,64,FLEN)
NAN_BOXED(9218734079035086817,64,FLEN)
NAN_BOXED(9200983078923433855,64,FLEN)
NAN_BOXED(4624815309915978005,64,FLEN)
NAN_BOXED(9218734079035086817,64,FLEN)
NAN_BOXED(9200983078923433855,64,FLEN)
NAN_BOXED(4624815309915978005,64,FLEN)
NAN_BOXED(9218734079035086817,64,FLEN)
NAN_BOXED(9200983078923433855,64,FLEN)
NAN_BOXED(4624815309915978005,64,FLEN)
NAN_BOXED(9218734079035086817,64,FLEN)
NAN_BOXED(9200983078923433855,64,FLEN)
NAN_BOXED(4624815309915978005,64,FLEN)
NAN_BOXED(9218734079035086817,64,FLEN)
NAN_BOXED(9201151098662314471,64,FLEN)
NAN_BOXED(4623479931003029611,64,FLEN)
NAN_BOXED(9217632424030935305,64,FLEN)
NAN_BOXED(9201151098662314471,64,FLEN)
NAN_BOXED(4623479931003029611,64,FLEN)
NAN_BOXED(9217632424030935305,64,FLEN)
NAN_BOXED(9201151098662314471,64,FLEN)
NAN_BOXED(4623479931003029611,64,FLEN)
NAN_BOXED(9217632424030935305,64,FLEN)
NAN_BOXED(9201151098662314471,64,FLEN)
NAN_BOXED(4623479931003029611,64,FLEN)
NAN_BOXED(9217632424030935305,64,FLEN)
NAN_BOXED(9201151098662314471,64,FLEN)
NAN_BOXED(4623479931003029611,64,FLEN)
NAN_BOXED(9217632424030935305,64,FLEN)
NAN_BOXED(9201384052843840223,64,FLEN)
NAN_BOXED(4608527113724274561,64,FLEN)
NAN_BOXED(9202887000580042199,64,FLEN)
NAN_BOXED(9201384052843840223,64,FLEN)
NAN_BOXED(4608527113724274561,64,FLEN)
NAN_BOXED(9202887000580042199,64,FLEN)
NAN_BOXED(9201384052843840223,64,FLEN)
NAN_BOXED(4608527113724274561,64,FLEN)
NAN_BOXED(9202887000580042199,64,FLEN)
NAN_BOXED(9201384052843840223,64,FLEN)
NAN_BOXED(4608527113724274561,64,FLEN)
NAN_BOXED(9202887000580042199,64,FLEN)
NAN_BOXED(9201384052843840223,64,FLEN)
NAN_BOXED(4608527113724274561,64,FLEN)
NAN_BOXED(9202887000580042199,64,FLEN)
NAN_BOXED(9201446555025124391,64,FLEN)
NAN_BOXED(4622087057744670221,64,FLEN)
NAN_BOXED(9216534574606383235,64,FLEN)
NAN_BOXED(9201446555025124391,64,FLEN)
NAN_BOXED(4622087057744670221,64,FLEN)
NAN_BOXED(9216534574606383235,64,FLEN)
NAN_BOXED(9201446555025124391,64,FLEN)
NAN_BOXED(4622087057744670221,64,FLEN)
NAN_BOXED(9216534574606383235,64,FLEN)
NAN_BOXED(9201446555025124391,64,FLEN)
NAN_BOXED(4622087057744670221,64,FLEN)
NAN_BOXED(9216534574606383235,64,FLEN)
NAN_BOXED(9201446555025124391,64,FLEN)
NAN_BOXED(4622087057744670221,64,FLEN)
NAN_BOXED(9216534574606383235,64,FLEN)
NAN_BOXED(9201568424530740551,64,FLEN)
NAN_BOXED(4623484384729897019,64,FLEN)
NAN_BOXED(9218313140772617300,64,FLEN)
NAN_BOXED(9201568424530740551,64,FLEN)
NAN_BOXED(4623484384729897019,64,FLEN)
NAN_BOXED(9218313140772617300,64,FLEN)
NAN_BOXED(9201568424530740551,64,FLEN)
NAN_BOXED(4623484384729897019,64,FLEN)
NAN_BOXED(9218313140772617300,64,FLEN)
NAN_BOXED(9201568424530740551,64,FLEN)
NAN_BOXED(4623484384729897019,64,FLEN)
NAN_BOXED(9218313140772617300,64,FLEN)
NAN_BOXED(9201568424530740551,64,FLEN)
NAN_BOXED(4623484384729897019,64,FLEN)
NAN_BOXED(9218313140772617300,64,FLEN)
NAN_BOXED(9201577936488635127,64,FLEN)
NAN_BOXED(4614651742637085463,64,FLEN)
NAN_BOXED(9209523963701131687,64,FLEN)
NAN_BOXED(9201577936488635127,64,FLEN)
NAN_BOXED(4614651742637085463,64,FLEN)
NAN_BOXED(9209523963701131687,64,FLEN)
NAN_BOXED(9201577936488635127,64,FLEN)
NAN_BOXED(4614651742637085463,64,FLEN)
NAN_BOXED(9209523963701131687,64,FLEN)
NAN_BOXED(9201577936488635127,64,FLEN)
NAN_BOXED(4614651742637085463,64,FLEN)
NAN_BOXED(9209523963701131687,64,FLEN)
NAN_BOXED(9201577936488635127,64,FLEN)
NAN_BOXED(4614651742637085463,64,FLEN)
NAN_BOXED(9209523963701131687,64,FLEN)
NAN_BOXED(9201619345632811727,64,FLEN)
NAN_BOXED(4621343821554291080,64,FLEN)
NAN_BOXED(9215891306980969465,64,FLEN)
NAN_BOXED(9201619345632811727,64,FLEN)
NAN_BOXED(4621343821554291080,64,FLEN)
NAN_BOXED(9215891306980969465,64,FLEN)
NAN_BOXED(9201619345632811727,64,FLEN)
NAN_BOXED(4621343821554291080,64,FLEN)
NAN_BOXED(9215891306980969465,64,FLEN)
NAN_BOXED(9201619345632811727,64,FLEN)
NAN_BOXED(4621343821554291080,64,FLEN)
NAN_BOXED(9215891306980969465,64,FLEN)
NAN_BOXED(9201619345632811727,64,FLEN)
NAN_BOXED(4621343821554291080,64,FLEN)
NAN_BOXED(9215891306980969465,64,FLEN)
NAN_BOXED(9202156933779480415,64,FLEN)
NAN_BOXED(4617962164944650424,64,FLEN)
NAN_BOXED(9213449479191433537,64,FLEN)
NAN_BOXED(9202156933779480415,64,FLEN)
NAN_BOXED(4617962164944650424,64,FLEN)
NAN_BOXED(9213449479191433537,64,FLEN)
NAN_BOXED(9202156933779480415,64,FLEN)
NAN_BOXED(4617962164944650424,64,FLEN)
NAN_BOXED(9213449479191433537,64,FLEN)
NAN_BOXED(9202156933779480415,64,FLEN)
NAN_BOXED(4617962164944650424,64,FLEN)
NAN_BOXED(9213449479191433537,64,FLEN)
NAN_BOXED(9202156933779480415,64,FLEN)
NAN_BOXED(4617962164944650424,64,FLEN)
NAN_BOXED(9213449479191433537,64,FLEN)
NAN_BOXED(9202384724049670263,64,FLEN)
NAN_BOXED(4621945521209791382,64,FLEN)
NAN_BOXED(9217573459908083434,64,FLEN)
NAN_BOXED(9202384724049670263,64,FLEN)
NAN_BOXED(4621945521209791382,64,FLEN)
NAN_BOXED(9217573459908083434,64,FLEN)
NAN_BOXED(9202384724049670263,64,FLEN)
NAN_BOXED(4621945521209791382,64,FLEN)
NAN_BOXED(9217573459908083434,64,FLEN)
NAN_BOXED(9202384724049670263,64,FLEN)
NAN_BOXED(4621945521209791382,64,FLEN)
NAN_BOXED(9217573459908083434,64,FLEN)
NAN_BOXED(9202384724049670263,64,FLEN)
NAN_BOXED(4621945521209791382,64,FLEN)
NAN_BOXED(9217573459908083434,64,FLEN)
NAN_BOXED(9202438215750486919,64,FLEN)
NAN_BOXED(4621795264592037508,64,FLEN)
NAN_BOXED(9217438715319027166,64,FLEN)
NAN_BOXED(9202438215750486919,64,FLEN)
NAN_BOXED(4621795264592037508,64,FLEN)
NAN_BOXED(9217438715319027166,64,FLEN)
NAN_BOXED(9202438215750486919,64,FLEN)
NAN_BOXED(4621795264592037508,64,FLEN)
NAN_BOXED(9217438715319027166,64,FLEN)
NAN_BOXED(9202438215750486919,64,FLEN)
NAN_BOXED(4621795264592037508,64,FLEN)
NAN_BOXED(9217438715319027166,64,FLEN)
NAN_BOXED(9202438215750486919,64,FLEN)
NAN_BOXED(4621795264592037508,64,FLEN)
NAN_BOXED(9217438715319027166,64,FLEN)
NAN_BOXED(9202459372850344295,64,FLEN)
NAN_BOXED(4620458920058069586,64,FLEN)
NAN_BOXED(9215811264548882435,64,FLEN)
NAN_BOXED(9202459372850344295,64,FLEN)
NAN_BOXED(4620458920058069586,64,FLEN)
NAN_BOXED(9215811264548882435,64,FLEN)
NAN_BOXED(9202459372850344295,64,FLEN)
NAN_BOXED(4620458920058069586,64,FLEN)
NAN_BOXED(9215811264548882435,64,FLEN)
NAN_BOXED(9202459372850344295,64,FLEN)
NAN_BOXED(4620458920058069586,64,FLEN)
NAN_BOXED(9215811264548882435,64,FLEN)
NAN_BOXED(9202459372850344295,64,FLEN)
NAN_BOXED(4620458920058069586,64,FLEN)
NAN_BOXED(9215811264548882435,64,FLEN)
NAN_BOXED(9202539081167051847,64,FLEN)
NAN_BOXED(4608037309319434855,64,FLEN)
NAN_BOXED(9203713832893895719,64,FLEN)
NAN_BOXED(9202539081167051847,64,FLEN)
NAN_BOXED(4608037309319434855,64,FLEN)
NAN_BOXED(9203713832893895719,64,FLEN)
NAN_BOXED(9202539081167051847,64,FLEN)
NAN_BOXED(4608037309319434855,64,FLEN)
NAN_BOXED(9203713832893895719,64,FLEN)
NAN_BOXED(9202539081167051847,64,FLEN)
NAN_BOXED(4608037309319434855,64,FLEN)
NAN_BOXED(9203713832893895719,64,FLEN)
NAN_BOXED(9202539081167051847,64,FLEN)
NAN_BOXED(4608037309319434855,64,FLEN)
NAN_BOXED(9203713832893895719,64,FLEN)
NAN_BOXED(9202796870545314831,64,FLEN)
NAN_BOXED(4603967081522047755,64,FLEN)
NAN_BOXED(9200137283622957375,64,FLEN)
NAN_BOXED(9202796870545314831,64,FLEN)
NAN_BOXED(4603967081522047755,64,FLEN)
NAN_BOXED(9200137283622957375,64,FLEN)
NAN_BOXED(9202796870545314831,64,FLEN)
NAN_BOXED(4603967081522047755,64,FLEN)
NAN_BOXED(9200137283622957375,64,FLEN)
NAN_BOXED(9202796870545314831,64,FLEN)
NAN_BOXED(4603967081522047755,64,FLEN)
NAN_BOXED(9200137283622957375,64,FLEN)
NAN_BOXED(9202796870545314831,64,FLEN)
NAN_BOXED(4603967081522047755,64,FLEN)
NAN_BOXED(9200137283622957375,64,FLEN)
NAN_BOXED(9202817852998585103,64,FLEN)
NAN_BOXED(4616697634700761445,64,FLEN)
NAN_BOXED(9212554591775868051,64,FLEN)
NAN_BOXED(9202817852998585103,64,FLEN)
NAN_BOXED(4616697634700761445,64,FLEN)
NAN_BOXED(9212554591775868051,64,FLEN)
NAN_BOXED(9202817852998585103,64,FLEN)
NAN_BOXED(4616697634700761445,64,FLEN)
NAN_BOXED(9212554591775868051,64,FLEN)
NAN_BOXED(9202817852998585103,64,FLEN)
NAN_BOXED(4616697634700761445,64,FLEN)
NAN_BOXED(9212554591775868051,64,FLEN)
NAN_BOXED(9202817852998585103,64,FLEN)
NAN_BOXED(4616697634700761445,64,FLEN)
NAN_BOXED(9212554591775868051,64,FLEN)
NAN_BOXED(9203661717330840007,64,FLEN)
NAN_BOXED(4615252017720785433,64,FLEN)
NAN_BOXED(9211907852382826259,64,FLEN)
NAN_BOXED(9203661717330840007,64,FLEN)
NAN_BOXED(4615252017720785433,64,FLEN)
NAN_BOXED(9211907852382826259,64,FLEN)
NAN_BOXED(9203661717330840007,64,FLEN)
NAN_BOXED(4615252017720785433,64,FLEN)
NAN_BOXED(9211907852382826259,64,FLEN)
NAN_BOXED(9203661717330840007,64,FLEN)
NAN_BOXED(4615252017720785433,64,FLEN)
NAN_BOXED(9211907852382826259,64,FLEN)
NAN_BOXED(9203661717330840007,64,FLEN)
NAN_BOXED(4615252017720785433,64,FLEN)
NAN_BOXED(9211907852382826259,64,FLEN)
NAN_BOXED(9203811072956998279,64,FLEN)
NAN_BOXED(4618583513202688678,64,FLEN)
NAN_BOXED(9215574410475998625,64,FLEN)
NAN_BOXED(9203811072956998279,64,FLEN)
NAN_BOXED(4618583513202688678,64,FLEN)
NAN_BOXED(9215574410475998625,64,FLEN)
NAN_BOXED(9203811072956998279,64,FLEN)
NAN_BOXED(4618583513202688678,64,FLEN)
NAN_BOXED(9215574410475998625,64,FLEN)
NAN_BOXED(9203811072956998279,64,FLEN)
NAN_BOXED(4618583513202688678,64,FLEN)
NAN_BOXED(9215574410475998625,64,FLEN)
NAN_BOXED(9203811072956998279,64,FLEN)
NAN_BOXED(4618583513202688678,64,FLEN)
NAN_BOXED(9215574410475998625,64,FLEN)
NAN_BOXED(9203900604558123327,64,FLEN)
NAN_BOXED(4612889613823387066,64,FLEN)
NAN_BOXED(9210141618977170593,64,FLEN)
NAN_BOXED(9203900604558123327,64,FLEN)
NAN_BOXED(4612889613823387066,64,FLEN)
NAN_BOXED(9210141618977170593,64,FLEN)
NAN_BOXED(9203900604558123327,64,FLEN)
NAN_BOXED(4612889613823387066,64,FLEN)
NAN_BOXED(9210141618977170593,64,FLEN)
NAN_BOXED(9203900604558123327,64,FLEN)
NAN_BOXED(4612889613823387066,64,FLEN)
NAN_BOXED(9210141618977170593,64,FLEN)
NAN_BOXED(9203900604558123327,64,FLEN)
NAN_BOXED(4612889613823387066,64,FLEN)
NAN_BOXED(9210141618977170593,64,FLEN)
NAN_BOXED(9203996428391900919,64,FLEN)
NAN_BOXED(4617631177507685546,64,FLEN)
NAN_BOXED(9214907936889515953,64,FLEN)
NAN_BOXED(9203996428391900919,64,FLEN)
NAN_BOXED(4617631177507685546,64,FLEN)
NAN_BOXED(9214907936889515953,64,FLEN)
NAN_BOXED(9203996428391900919,64,FLEN)
NAN_BOXED(4617631177507685546,64,FLEN)
NAN_BOXED(9214907936889515953,64,FLEN)
NAN_BOXED(9203996428391900919,64,FLEN)
NAN_BOXED(4617631177507685546,64,FLEN)
NAN_BOXED(9214907936889515953,64,FLEN)
NAN_BOXED(9203996428391900919,64,FLEN)
NAN_BOXED(4617631177507685546,64,FLEN)
NAN_BOXED(9214907936889515953,64,FLEN)
NAN_BOXED(9204237248328092311,64,FLEN)
NAN_BOXED(4609321965230414283,64,FLEN)
NAN_BOXED(9206670855267989787,64,FLEN)
NAN_BOXED(9204237248328092311,64,FLEN)
NAN_BOXED(4609321965230414283,64,FLEN)
NAN_BOXED(9206670855267989787,64,FLEN)
NAN_BOXED(9204237248328092311,64,FLEN)
NAN_BOXED(4609321965230414283,64,FLEN)
NAN_BOXED(9206670855267989787,64,FLEN)
NAN_BOXED(9204237248328092311,64,FLEN)
NAN_BOXED(4609321965230414283,64,FLEN)
NAN_BOXED(9206670855267989787,64,FLEN)
NAN_BOXED(9204237248328092311,64,FLEN)
NAN_BOXED(4609321965230414283,64,FLEN)
NAN_BOXED(9206670855267989787,64,FLEN)
NAN_BOXED(9205114224505667511,64,FLEN)
NAN_BOXED(4615368123707042925,64,FLEN)
NAN_BOXED(9213322129775730793,64,FLEN)
NAN_BOXED(9205114224505667511,64,FLEN)
NAN_BOXED(4615368123707042925,64,FLEN)
NAN_BOXED(9213322129775730793,64,FLEN)
NAN_BOXED(9205114224505667511,64,FLEN)
NAN_BOXED(4615368123707042925,64,FLEN)
NAN_BOXED(9213322129775730793,64,FLEN)
NAN_BOXED(9205114224505667511,64,FLEN)
NAN_BOXED(4615368123707042925,64,FLEN)
NAN_BOXED(9213322129775730793,64,FLEN)
NAN_BOXED(9205114224505667511,64,FLEN)
NAN_BOXED(4615368123707042925,64,FLEN)
NAN_BOXED(9213322129775730793,64,FLEN)
NAN_BOXED(9205271310548173319,64,FLEN)
NAN_BOXED(4610799683401958065,64,FLEN)
NAN_BOXED(9208897070060473135,64,FLEN)
NAN_BOXED(9205271310548173319,64,FLEN)
NAN_BOXED(4610799683401958065,64,FLEN)
NAN_BOXED(9208897070060473135,64,FLEN)
NAN_BOXED(9205271310548173319,64,FLEN)
NAN_BOXED(4610799683401958065,64,FLEN)
NAN_BOXED(9208897070060473135,64,FLEN)
NAN_BOXED(9205271310548173319,64,FLEN)
NAN_BOXED(4610799683401958065,64,FLEN)
NAN_BOXED(9208897070060473135,64,FLEN)
NAN_BOXED(9205271310548173319,64,FLEN)
NAN_BOXED(4610799683401958065,64,FLEN)
NAN_BOXED(9208897070060473135,64,FLEN)
NAN_BOXED(9205431078266918671,64,FLEN)
NAN_BOXED(4608037217996513966,64,FLEN)
NAN_BOXED(9206299816621242263,64,FLEN)
NAN_BOXED(9205431078266918671,64,FLEN)
NAN_BOXED(4608037217996513966,64,FLEN)
NAN_BOXED(9206299816621242263,64,FLEN)
NAN_BOXED(9205431078266918671,64,FLEN)
NAN_BOXED(4608037217996513966,64,FLEN)
NAN_BOXED(9206299816621242263,64,FLEN)
NAN_BOXED(9205431078266918671,64,FLEN)
NAN_BOXED(4608037217996513966,64,FLEN)
NAN_BOXED(9206299816621242263,64,FLEN)
NAN_BOXED(9205431078266918671,64,FLEN)
NAN_BOXED(4608037217996513966,64,FLEN)
NAN_BOXED(9206299816621242263,64,FLEN)
NAN_BOXED(9205514011323422235,64,FLEN)
NAN_BOXED(4611300716177027631,64,FLEN)
NAN_BOXED(9209775303300073971,64,FLEN)
NAN_BOXED(9205514011323422235,64,FLEN)
NAN_BOXED(4611300716177027631,64,FLEN)
NAN_BOXED(9209775303300073971,64,FLEN)
NAN_BOXED(9205514011323422235,64,FLEN)
NAN_BOXED(4611300716177027631,64,FLEN)
NAN_BOXED(9209775303300073971,64,FLEN)
NAN_BOXED(9205514011323422235,64,FLEN)
NAN_BOXED(4611300716177027631,64,FLEN)
NAN_BOXED(9209775303300073971,64,FLEN)
NAN_BOXED(9205514011323422235,64,FLEN)
NAN_BOXED(4611300716177027631,64,FLEN)
NAN_BOXED(9209775303300073971,64,FLEN)
NAN_BOXED(9205573229334733831,64,FLEN)
NAN_BOXED(4592499828156646799,64,FLEN)
NAN_BOXED(9191050135052921087,64,FLEN)
NAN_BOXED(9205573229334733831,64,FLEN)
NAN_BOXED(4592499828156646799,64,FLEN)
NAN_BOXED(9191050135052921087,64,FLEN)
NAN_BOXED(9205573229334733831,64,FLEN)
NAN_BOXED(4592499828156646799,64,FLEN)
NAN_BOXED(9191050135052921087,64,FLEN)
NAN_BOXED(9205573229334733831,64,FLEN)
NAN_BOXED(4592499828156646799,64,FLEN)
NAN_BOXED(9191050135052921087,64,FLEN)
NAN_BOXED(9205573229334733831,64,FLEN)
NAN_BOXED(4592499828156646799,64,FLEN)
NAN_BOXED(9191050135052921087,64,FLEN)
NAN_BOXED(9205576465603196675,64,FLEN)
NAN_BOXED(4619502905435235397,64,FLEN)
NAN_BOXED(9218057942924111391,64,FLEN)
NAN_BOXED(9205576465603196675,64,FLEN)
NAN_BOXED(4619502905435235397,64,FLEN)
NAN_BOXED(9218057942924111391,64,FLEN)
NAN_BOXED(9205576465603196675,64,FLEN)
NAN_BOXED(4619502905435235397,64,FLEN)
NAN_BOXED(9218057942924111391,64,FLEN)
NAN_BOXED(9205576465603196675,64,FLEN)
NAN_BOXED(4619502905435235397,64,FLEN)
NAN_BOXED(9218057942924111391,64,FLEN)
NAN_BOXED(9205576465603196675,64,FLEN)
NAN_BOXED(4619502905435235397,64,FLEN)
NAN_BOXED(9218057942924111391,64,FLEN)
NAN_BOXED(9206051375835162171,64,FLEN)
NAN_BOXED(4605530094911469541,64,FLEN)
NAN_BOXED(9204838264362822855,64,FLEN)
NAN_BOXED(9206051375835162171,64,FLEN)
NAN_BOXED(4605530094911469541,64,FLEN)
NAN_BOXED(9204838264362822855,64,FLEN)
NAN_BOXED(9206051375835162171,64,FLEN)
NAN_BOXED(4605530094911469541,64,FLEN)
NAN_BOXED(9204838264362822855,64,FLEN)
NAN_BOXED(9206051375835162171,64,FLEN)
NAN_BOXED(4605530094911469541,64,FLEN)
NAN_BOXED(9204838264362822855,64,FLEN)
NAN_BOXED(9206051375835162171,64,FLEN)
NAN_BOXED(4605530094911469541,64,FLEN)
NAN_BOXED(9204838264362822855,64,FLEN)
NAN_BOXED(9206120523217043739,64,FLEN)
NAN_BOXED(4618052171814894065,64,FLEN)
NAN_BOXED(9217305782538873806,64,FLEN)
NAN_BOXED(9206120523217043739,64,FLEN)
NAN_BOXED(4618052171814894065,64,FLEN)
NAN_BOXED(9217305782538873806,64,FLEN)
NAN_BOXED(9206120523217043739,64,FLEN)
NAN_BOXED(4618052171814894065,64,FLEN)
NAN_BOXED(9217305782538873806,64,FLEN)
NAN_BOXED(9206120523217043739,64,FLEN)
NAN_BOXED(4618052171814894065,64,FLEN)
NAN_BOXED(9217305782538873806,64,FLEN)
NAN_BOXED(9206120523217043739,64,FLEN)
NAN_BOXED(4618052171814894065,64,FLEN)
NAN_BOXED(9217305782538873806,64,FLEN)
NAN_BOXED(9206235586176084147,64,FLEN)
NAN_BOXED(4618614513688865546,64,FLEN)
NAN_BOXED(9218140398899110699,64,FLEN)
NAN_BOXED(9206235586176084147,64,FLEN)
NAN_BOXED(4618614513688865546,64,FLEN)
NAN_BOXED(9218140398899110699,64,FLEN)
NAN_BOXED(9206235586176084147,64,FLEN)
NAN_BOXED(4618614513688865546,64,FLEN)
NAN_BOXED(9218140398899110699,64,FLEN)
NAN_BOXED(9206235586176084147,64,FLEN)
NAN_BOXED(4618614513688865546,64,FLEN)
NAN_BOXED(9218140398899110699,64,FLEN)
NAN_BOXED(9206235586176084147,64,FLEN)
NAN_BOXED(4618614513688865546,64,FLEN)
NAN_BOXED(9218140398899110699,64,FLEN)
NAN_BOXED(9206329858667228347,64,FLEN)
NAN_BOXED(4614426886278302896,64,FLEN)
NAN_BOXED(9214166014493696865,64,FLEN)
NAN_BOXED(9206329858667228347,64,FLEN)
NAN_BOXED(4614426886278302896,64,FLEN)
NAN_BOXED(9214166014493696865,64,FLEN)
NAN_BOXED(9206329858667228347,64,FLEN)
NAN_BOXED(4614426886278302896,64,FLEN)
NAN_BOXED(9214166014493696865,64,FLEN)
NAN_BOXED(9206329858667228347,64,FLEN)
NAN_BOXED(4614426886278302896,64,FLEN)
NAN_BOXED(9214166014493696865,64,FLEN)
NAN_BOXED(9206329858667228347,64,FLEN)
NAN_BOXED(4614426886278302896,64,FLEN)
NAN_BOXED(9214166014493696865,64,FLEN)
NAN_BOXED(9206418564775949831,64,FLEN)
NAN_BOXED(4616906458276736180,64,FLEN)
NAN_BOXED(9216311472447219366,64,FLEN)
NAN_BOXED(9206418564775949831,64,FLEN)
NAN_BOXED(4616906458276736180,64,FLEN)
NAN_BOXED(9216311472447219366,64,FLEN)
NAN_BOXED(9206418564775949831,64,FLEN)
NAN_BOXED(4616906458276736180,64,FLEN)
NAN_BOXED(9216311472447219366,64,FLEN)
NAN_BOXED(9206418564775949831,64,FLEN)
NAN_BOXED(4616906458276736180,64,FLEN)
NAN_BOXED(9216311472447219366,64,FLEN)
NAN_BOXED(9206418564775949831,64,FLEN)
NAN_BOXED(4616906458276736180,64,FLEN)
NAN_BOXED(9216311472447219366,64,FLEN)
NAN_BOXED(9206529761030830443,64,FLEN)
NAN_BOXED(4613555103591182058,64,FLEN)
NAN_BOXED(9213388900503350103,64,FLEN)
NAN_BOXED(9206529761030830443,64,FLEN)
NAN_BOXED(4613555103591182058,64,FLEN)
NAN_BOXED(9213388900503350103,64,FLEN)
NAN_BOXED(9206529761030830443,64,FLEN)
NAN_BOXED(4613555103591182058,64,FLEN)
NAN_BOXED(9213388900503350103,64,FLEN)
NAN_BOXED(9206529761030830443,64,FLEN)
NAN_BOXED(4613555103591182058,64,FLEN)
NAN_BOXED(9213388900503350103,64,FLEN)
NAN_BOXED(9206529761030830443,64,FLEN)
NAN_BOXED(4613555103591182058,64,FLEN)
NAN_BOXED(9213388900503350103,64,FLEN)
NAN_BOXED(9206671466614823403,64,FLEN)
NAN_BOXED(4613200406419738052,64,FLEN)
NAN_BOXED(9213131244340239445,64,FLEN)
NAN_BOXED(9206671466614823403,64,FLEN)
NAN_BOXED(4613200406419738052,64,FLEN)
NAN_BOXED(9213131244340239445,64,FLEN)
NAN_BOXED(9206671466614823403,64,FLEN)
NAN_BOXED(4613200406419738052,64,FLEN)
NAN_BOXED(9213131244340239445,64,FLEN)
NAN_BOXED(9206671466614823403,64,FLEN)
NAN_BOXED(4613200406419738052,64,FLEN)
NAN_BOXED(9213131244340239445,64,FLEN)
NAN_BOXED(9206671466614823403,64,FLEN)
NAN_BOXED(4613200406419738052,64,FLEN)
NAN_BOXED(9213131244340239445,64,FLEN)
NAN_BOXED(9206872362273795699,64,FLEN)
NAN_BOXED(4616889049039299448,64,FLEN)
NAN_BOXED(9216814236525929415,64,FLEN)
NAN_BOXED(9206872362273795699,64,FLEN)
NAN_BOXED(4616889049039299448,64,FLEN)
NAN_BOXED(9216814236525929415,64,FLEN)
NAN_BOXED(9206872362273795699,64,FLEN)
NAN_BOXED(4616889049039299448,64,FLEN)
NAN_BOXED(9216814236525929415,64,FLEN)
NAN_BOXED(9206872362273795699,64,FLEN)
NAN_BOXED(4616889049039299448,64,FLEN)
NAN_BOXED(9216814236525929415,64,FLEN)
NAN_BOXED(9206872362273795699,64,FLEN)
NAN_BOXED(4616889049039299448,64,FLEN)
NAN_BOXED(9216814236525929415,64,FLEN)
NAN_BOXED(9206908619650913167,64,FLEN)
NAN_BOXED(4604451419051941726,64,FLEN)
NAN_BOXED(9204788080312866111,64,FLEN)
NAN_BOXED(9206908619650913167,64,FLEN)
NAN_BOXED(4604451419051941726,64,FLEN)
NAN_BOXED(9204788080312866111,64,FLEN)
NAN_BOXED(9206908619650913167,64,FLEN)
NAN_BOXED(4604451419051941726,64,FLEN)
NAN_BOXED(9204788080312866111,64,FLEN)
NAN_BOXED(9206908619650913167,64,FLEN)
NAN_BOXED(4604451419051941726,64,FLEN)
NAN_BOXED(9204788080312866111,64,FLEN)
NAN_BOXED(9206908619650913167,64,FLEN)
NAN_BOXED(4604451419051941726,64,FLEN)
NAN_BOXED(9204788080312866111,64,FLEN)
NAN_BOXED(9207063483429147475,64,FLEN)
NAN_BOXED(4613368851273290399,64,FLEN)
NAN_BOXED(9213887328722086743,64,FLEN)
NAN_BOXED(9207063483429147475,64,FLEN)
NAN_BOXED(4613368851273290399,64,FLEN)
NAN_BOXED(9213887328722086743,64,FLEN)
NAN_BOXED(9207063483429147475,64,FLEN)
NAN_BOXED(4613368851273290399,64,FLEN)
NAN_BOXED(9213887328722086743,64,FLEN)
NAN_BOXED(9207063483429147475,64,FLEN)
NAN_BOXED(4613368851273290399,64,FLEN)
NAN_BOXED(9213887328722086743,64,FLEN)
NAN_BOXED(9207063483429147475,64,FLEN)
NAN_BOXED(4613368851273290399,64,FLEN)
NAN_BOXED(9213887328722086743,64,FLEN)
NAN_BOXED(9207202951488845783,64,FLEN)
NAN_BOXED(4608606944951612307,64,FLEN)
NAN_BOXED(9209211165589719239,64,FLEN)
NAN_BOXED(9207202951488845783,64,FLEN)
NAN_BOXED(4608606944951612307,64,FLEN)
NAN_BOXED(9209211165589719239,64,FLEN)
NAN_BOXED(9207202951488845783,64,FLEN)
NAN_BOXED(4608606944951612307,64,FLEN)
NAN_BOXED(9209211165589719239,64,FLEN)
NAN_BOXED(9207202951488845783,64,FLEN)
NAN_BOXED(4608606944951612307,64,FLEN)
NAN_BOXED(9209211165589719239,64,FLEN)
NAN_BOXED(9207202951488845783,64,FLEN)
NAN_BOXED(4608606944951612307,64,FLEN)
NAN_BOXED(9209211165589719239,64,FLEN)
NAN_BOXED(9207285961471384423,64,FLEN)
NAN_BOXED(4616662933934059580,64,FLEN)
NAN_BOXED(9216969138038839864,64,FLEN)
NAN_BOXED(9207285961471384423,64,FLEN)
NAN_BOXED(4616662933934059580,64,FLEN)
NAN_BOXED(9216969138038839864,64,FLEN)
NAN_BOXED(9207285961471384423,64,FLEN)
NAN_BOXED(4616662933934059580,64,FLEN)
NAN_BOXED(9216969138038839864,64,FLEN)
NAN_BOXED(9207285961471384423,64,FLEN)
NAN_BOXED(4616662933934059580,64,FLEN)
NAN_BOXED(9216969138038839864,64,FLEN)
NAN_BOXED(9207285961471384423,64,FLEN)
NAN_BOXED(4616662933934059580,64,FLEN)
NAN_BOXED(9216969138038839864,64,FLEN)
NAN_BOXED(9207365392776175035,64,FLEN)
NAN_BOXED(4614428993100491107,64,FLEN)
NAN_BOXED(9215099826533362124,64,FLEN)
NAN_BOXED(9207365392776175035,64,FLEN)
NAN_BOXED(4614428993100491107,64,FLEN)
NAN_BOXED(9215099826533362124,64,FLEN)
NAN_BOXED(9207365392776175035,64,FLEN)
NAN_BOXED(4614428993100491107,64,FLEN)
NAN_BOXED(9215099826533362124,64,FLEN)
NAN_BOXED(9207365392776175035,64,FLEN)
NAN_BOXED(4614428993100491107,64,FLEN)
NAN_BOXED(9215099826533362124,64,FLEN)
NAN_BOXED(9207365392776175035,64,FLEN)
NAN_BOXED(4614428993100491107,64,FLEN)
NAN_BOXED(9215099826533362124,64,FLEN)
NAN_BOXED(9207679928374021727,64,FLEN)
NAN_BOXED(4612825223017050048,64,FLEN)
NAN_BOXED(9213910165684168401,64,FLEN)
NAN_BOXED(9207679928374021727,64,FLEN)
NAN_BOXED(4612825223017050048,64,FLEN)
NAN_BOXED(9213910165684168401,64,FLEN)
NAN_BOXED(9207679928374021727,64,FLEN)
NAN_BOXED(4612825223017050048,64,FLEN)
NAN_BOXED(9213910165684168401,64,FLEN)
NAN_BOXED(9207679928374021727,64,FLEN)
NAN_BOXED(4612825223017050048,64,FLEN)
NAN_BOXED(9213910165684168401,64,FLEN)
NAN_BOXED(9207679928374021727,64,FLEN)
NAN_BOXED(4612825223017050048,64,FLEN)
NAN_BOXED(9213910165684168401,64,FLEN)
NAN_BOXED(9207906483561607603,64,FLEN)
NAN_BOXED(4610007303055278491,64,FLEN)
NAN_BOXED(9211095684868788279,64,FLEN)
NAN_BOXED(9207906483561607603,64,FLEN)
NAN_BOXED(4610007303055278491,64,FLEN)
NAN_BOXED(9211095684868788279,64,FLEN)
NAN_BOXED(9207906483561607603,64,FLEN)
NAN_BOXED(4610007303055278491,64,FLEN)
NAN_BOXED(9211095684868788279,64,FLEN)
NAN_BOXED(9207906483561607603,64,FLEN)
NAN_BOXED(4610007303055278491,64,FLEN)
NAN_BOXED(9211095684868788279,64,FLEN)
NAN_BOXED(9207906483561607603,64,FLEN)
NAN_BOXED(4610007303055278491,64,FLEN)
NAN_BOXED(9211095684868788279,64,FLEN)
NAN_BOXED(9207941125152137063,64,FLEN)
NAN_BOXED(4607357959809095647,64,FLEN)
NAN_BOXED(9208217365139485351,64,FLEN)
NAN_BOXED(9207941125152137063,64,FLEN)
NAN_BOXED(4607357959809095647,64,FLEN)
NAN_BOXED(9208217365139485351,64,FLEN)
NAN_BOXED(9207941125152137063,64,FLEN)
NAN_BOXED(4607357959809095647,64,FLEN)
NAN_BOXED(9208217365139485351,64,FLEN)
NAN_BOXED(9207941125152137063,64,FLEN)
NAN_BOXED(4607357959809095647,64,FLEN)
NAN_BOXED(9208217365139485351,64,FLEN)
NAN_BOXED(9207941125152137063,64,FLEN)
NAN_BOXED(4607357959809095647,64,FLEN)
NAN_BOXED(9208217365139485351,64,FLEN)
NAN_BOXED(9208095108295592691,64,FLEN)
NAN_BOXED(4612837525340499159,64,FLEN)
NAN_BOXED(9214407492448738854,64,FLEN)
NAN_BOXED(9208095108295592691,64,FLEN)
NAN_BOXED(4612837525340499159,64,FLEN)
NAN_BOXED(9214407492448738854,64,FLEN)
NAN_BOXED(9208095108295592691,64,FLEN)
NAN_BOXED(4612837525340499159,64,FLEN)
NAN_BOXED(9214407492448738854,64,FLEN)
NAN_BOXED(9208095108295592691,64,FLEN)
NAN_BOXED(4612837525340499159,64,FLEN)
NAN_BOXED(9214407492448738854,64,FLEN)
NAN_BOXED(9208095108295592691,64,FLEN)
NAN_BOXED(4612837525340499159,64,FLEN)
NAN_BOXED(9214407492448738854,64,FLEN)
NAN_BOXED(9208375525151395519,64,FLEN)
NAN_BOXED(4605177877359768880,64,FLEN)
NAN_BOXED(9206701627325695019,64,FLEN)
NAN_BOXED(9208375525151395519,64,FLEN)
NAN_BOXED(4605177877359768880,64,FLEN)
NAN_BOXED(9206701627325695019,64,FLEN)
NAN_BOXED(9208375525151395519,64,FLEN)
NAN_BOXED(4605177877359768880,64,FLEN)
NAN_BOXED(9206701627325695019,64,FLEN)
NAN_BOXED(9208375525151395519,64,FLEN)
NAN_BOXED(4605177877359768880,64,FLEN)
NAN_BOXED(9206701627325695019,64,FLEN)
NAN_BOXED(9208375525151395519,64,FLEN)
NAN_BOXED(4605177877359768880,64,FLEN)
NAN_BOXED(9206701627325695019,64,FLEN)
NAN_BOXED(9208765524101720295,64,FLEN)
NAN_BOXED(4616569824174275978,64,FLEN)
NAN_BOXED(9218440632452801130,64,FLEN)
NAN_BOXED(9208765524101720295,64,FLEN)
NAN_BOXED(4616569824174275978,64,FLEN)
NAN_BOXED(9218440632452801130,64,FLEN)
NAN_BOXED(9208765524101720295,64,FLEN)
NAN_BOXED(4616569824174275978,64,FLEN)
NAN_BOXED(9218440632452801130,64,FLEN)
NAN_BOXED(9208765524101720295,64,FLEN)
NAN_BOXED(4616569824174275978,64,FLEN)
NAN_BOXED(9218440632452801130,64,FLEN)
NAN_BOXED(9208765524101720295,64,FLEN)
NAN_BOXED(4616569824174275978,64,FLEN)
NAN_BOXED(9218440632452801130,64,FLEN)
NAN_BOXED(9208797031003484039,64,FLEN)
NAN_BOXED(4607312820878019916,64,FLEN)
NAN_BOXED(9209027020963803795,64,FLEN)
NAN_BOXED(9208797031003484039,64,FLEN)
NAN_BOXED(4607312820878019916,64,FLEN)
NAN_BOXED(9209027020963803795,64,FLEN)
NAN_BOXED(9208797031003484039,64,FLEN)
NAN_BOXED(4607312820878019916,64,FLEN)
NAN_BOXED(9209027020963803795,64,FLEN)
NAN_BOXED(9208797031003484039,64,FLEN)
NAN_BOXED(4607312820878019916,64,FLEN)
NAN_BOXED(9209027020963803795,64,FLEN)
NAN_BOXED(9208797031003484039,64,FLEN)
NAN_BOXED(4607312820878019916,64,FLEN)
NAN_BOXED(9209027020963803795,64,FLEN)
NAN_BOXED(9209023189780454703,64,FLEN)
NAN_BOXED(4612323202977689432,64,FLEN)
NAN_BOXED(9214523713103895500,64,FLEN)
NAN_BOXED(9209023189780454703,64,FLEN)
NAN_BOXED(4612323202977689432,64,FLEN)
NAN_BOXED(9214523713103895500,64,FLEN)
NAN_BOXED(9209023189780454703,64,FLEN)
NAN_BOXED(4612323202977689432,64,FLEN)
NAN_BOXED(9214523713103895500,64,FLEN)
NAN_BOXED(9209023189780454703,64,FLEN)
NAN_BOXED(4612323202977689432,64,FLEN)
NAN_BOXED(9214523713103895500,64,FLEN)
NAN_BOXED(9209023189780454703,64,FLEN)
NAN_BOXED(4612323202977689432,64,FLEN)
NAN_BOXED(9214523713103895500,64,FLEN)
NAN_BOXED(9209260857114061063,64,FLEN)
NAN_BOXED(4611862530716700477,64,FLEN)
NAN_BOXED(9214093950231909471,64,FLEN)
NAN_BOXED(9209260857114061063,64,FLEN)
NAN_BOXED(4611862530716700477,64,FLEN)
NAN_BOXED(9214093950231909471,64,FLEN)
NAN_BOXED(9209260857114061063,64,FLEN)
NAN_BOXED(4611862530716700477,64,FLEN)
NAN_BOXED(9214093950231909471,64,FLEN)
NAN_BOXED(9209260857114061063,64,FLEN)
NAN_BOXED(4611862530716700477,64,FLEN)
NAN_BOXED(9214093950231909471,64,FLEN)
NAN_BOXED(9209260857114061063,64,FLEN)
NAN_BOXED(4611862530716700477,64,FLEN)
NAN_BOXED(9214093950231909471,64,FLEN)
NAN_BOXED(9209520383667472455,64,FLEN)
NAN_BOXED(4612672326677347586,64,FLEN)
NAN_BOXED(9215143394396721187,64,FLEN)
NAN_BOXED(9209520383667472455,64,FLEN)
NAN_BOXED(4612672326677347586,64,FLEN)
NAN_BOXED(9215143394396721187,64,FLEN)
NAN_BOXED(9209520383667472455,64,FLEN)
NAN_BOXED(4612672326677347586,64,FLEN)
NAN_BOXED(9215143394396721187,64,FLEN)
NAN_BOXED(9209520383667472455,64,FLEN)
NAN_BOXED(4612672326677347586,64,FLEN)
NAN_BOXED(9215143394396721187,64,FLEN)
NAN_BOXED(9209520383667472455,64,FLEN)
NAN_BOXED(4612672326677347586,64,FLEN)
NAN_BOXED(9215143394396721187,64,FLEN)
NAN_BOXED(9209648542355769135,64,FLEN)
NAN_BOXED(4612481499888518499,64,FLEN)
NAN_BOXED(9215035186787611776,64,FLEN)
NAN_BOXED(9209648542355769135,64,FLEN)
NAN_BOXED(4612481499888518499,64,FLEN)
NAN_BOXED(9215035186787611776,64,FLEN)
NAN_BOXED(9209648542355769135,64,FLEN)
NAN_BOXED(4612481499888518499,64,FLEN)
NAN_BOXED(9215035186787611776,64,FLEN)
NAN_BOXED(9209648542355769135,64,FLEN)
NAN_BOXED(4612481499888518499,64,FLEN)
NAN_BOXED(9215035186787611776,64,FLEN)
NAN_BOXED(9209648542355769135,64,FLEN)
NAN_BOXED(4612481499888518499,64,FLEN)
NAN_BOXED(9215035186787611776,64,FLEN)
NAN_BOXED(9209661151830153215,64,FLEN)
NAN_BOXED(4616077977978776981,64,FLEN)
NAN_BOXED(9218559190984265949,64,FLEN)
NAN_BOXED(9209661151830153215,64,FLEN)
NAN_BOXED(4616077977978776981,64,FLEN)
NAN_BOXED(9218559190984265949,64,FLEN)
NAN_BOXED(9209661151830153215,64,FLEN)
NAN_BOXED(4616077977978776981,64,FLEN)
NAN_BOXED(9218559190984265949,64,FLEN)
NAN_BOXED(9209661151830153215,64,FLEN)
NAN_BOXED(4616077977978776981,64,FLEN)
NAN_BOXED(9218559190984265949,64,FLEN)
NAN_BOXED(9209661151830153215,64,FLEN)
NAN_BOXED(4616077977978776981,64,FLEN)
NAN_BOXED(9218559190984265949,64,FLEN)
NAN_BOXED(9209806990171150083,64,FLEN)
NAN_BOXED(4607697539963217666,64,FLEN)
NAN_BOXED(9210346132806724701,64,FLEN)
NAN_BOXED(9209806990171150083,64,FLEN)
NAN_BOXED(4607697539963217666,64,FLEN)
NAN_BOXED(9210346132806724701,64,FLEN)
NAN_BOXED(9209806990171150083,64,FLEN)
NAN_BOXED(4607697539963217666,64,FLEN)
NAN_BOXED(9210346132806724701,64,FLEN)
NAN_BOXED(9209806990171150083,64,FLEN)
NAN_BOXED(4607697539963217666,64,FLEN)
NAN_BOXED(9210346132806724701,64,FLEN)
NAN_BOXED(9209806990171150083,64,FLEN)
NAN_BOXED(4607697539963217666,64,FLEN)
NAN_BOXED(9210346132806724701,64,FLEN)
NAN_BOXED(9209869322045598745,64,FLEN)
NAN_BOXED(4588991404333003399,64,FLEN)
NAN_BOXED(9191686074621498687,64,FLEN)
NAN_BOXED(9209869322045598745,64,FLEN)
NAN_BOXED(4588991404333003399,64,FLEN)
NAN_BOXED(9191686074621498687,64,FLEN)
NAN_BOXED(9209869322045598745,64,FLEN)
NAN_BOXED(4588991404333003399,64,FLEN)
NAN_BOXED(9191686074621498687,64,FLEN)
NAN_BOXED(9209869322045598745,64,FLEN)
NAN_BOXED(4588991404333003399,64,FLEN)
NAN_BOXED(9191686074621498687,64,FLEN)
NAN_BOXED(9209869322045598745,64,FLEN)
NAN_BOXED(4588991404333003399,64,FLEN)
NAN_BOXED(9191686074621498687,64,FLEN)
NAN_BOXED(9209894290995791331,64,FLEN)
NAN_BOXED(4607917985674862152,64,FLEN)
NAN_BOXED(9210635256376484141,64,FLEN)
NAN_BOXED(9209894290995791331,64,FLEN)
NAN_BOXED(4607917985674862152,64,FLEN)
NAN_BOXED(9210635256376484141,64,FLEN)
NAN_BOXED(9209894290995791331,64,FLEN)
NAN_BOXED(4607917985674862152,64,FLEN)
NAN_BOXED(9210635256376484141,64,FLEN)
NAN_BOXED(9209894290995791331,64,FLEN)
NAN_BOXED(4607917985674862152,64,FLEN)
NAN_BOXED(9210635256376484141,64,FLEN)
NAN_BOXED(9209894290995791331,64,FLEN)
NAN_BOXED(4607917985674862152,64,FLEN)
NAN_BOXED(9210635256376484141,64,FLEN)
NAN_BOXED(9209901910099020905,64,FLEN)
NAN_BOXED(4608880822439118770,64,FLEN)
NAN_BOXED(9211615652065933247,64,FLEN)
NAN_BOXED(9209901910099020905,64,FLEN)
NAN_BOXED(4608880822439118770,64,FLEN)
NAN_BOXED(9211615652065933247,64,FLEN)
NAN_BOXED(9209901910099020905,64,FLEN)
NAN_BOXED(4608880822439118770,64,FLEN)
NAN_BOXED(9211615652065933247,64,FLEN)
NAN_BOXED(9209901910099020905,64,FLEN)
NAN_BOXED(4608880822439118770,64,FLEN)
NAN_BOXED(9211615652065933247,64,FLEN)
NAN_BOXED(9209901910099020905,64,FLEN)
NAN_BOXED(4608880822439118770,64,FLEN)
NAN_BOXED(9211615652065933247,64,FLEN)
NAN_BOXED(9209962008298006573,64,FLEN)
NAN_BOXED(4603928072291030305,64,FLEN)
NAN_BOXED(9206735614461013055,64,FLEN)
NAN_BOXED(9209962008298006573,64,FLEN)
NAN_BOXED(4603928072291030305,64,FLEN)
NAN_BOXED(9206735614461013055,64,FLEN)
NAN_BOXED(9209962008298006573,64,FLEN)
NAN_BOXED(4603928072291030305,64,FLEN)
NAN_BOXED(9206735614461013055,64,FLEN)
NAN_BOXED(9209962008298006573,64,FLEN)
NAN_BOXED(4603928072291030305,64,FLEN)
NAN_BOXED(9206735614461013055,64,FLEN)
NAN_BOXED(9209962008298006573,64,FLEN)
NAN_BOXED(4603928072291030305,64,FLEN)
NAN_BOXED(9206735614461013055,64,FLEN)
NAN_BOXED(9210026508608640439,64,FLEN)
NAN_BOXED(4613199297783075718,64,FLEN)
NAN_BOXED(9216098921089837455,64,FLEN)
NAN_BOXED(9210026508608640439,64,FLEN)
NAN_BOXED(4613199297783075718,64,FLEN)
NAN_BOXED(9216098921089837455,64,FLEN)
NAN_BOXED(9210026508608640439,64,FLEN)
NAN_BOXED(4613199297783075718,64,FLEN)
NAN_BOXED(9216098921089837455,64,FLEN)
NAN_BOXED(9210026508608640439,64,FLEN)
NAN_BOXED(4613199297783075718,64,FLEN)
NAN_BOXED(9216098921089837455,64,FLEN)
NAN_BOXED(9210026508608640439,64,FLEN)
NAN_BOXED(4613199297783075718,64,FLEN)
NAN_BOXED(9216098921089837455,64,FLEN)
NAN_BOXED(9210029939126621597,64,FLEN)
NAN_BOXED(4609954535888490905,64,FLEN)
NAN_BOXED(9212905897451089515,64,FLEN)
NAN_BOXED(9210029939126621597,64,FLEN)
NAN_BOXED(4609954535888490905,64,FLEN)
NAN_BOXED(9212905897451089515,64,FLEN)
NAN_BOXED(9210029939126621597,64,FLEN)
NAN_BOXED(4609954535888490905,64,FLEN)
NAN_BOXED(9212905897451089515,64,FLEN)
NAN_BOXED(9210029939126621597,64,FLEN)
NAN_BOXED(4609954535888490905,64,FLEN)
NAN_BOXED(9212905897451089515,64,FLEN)
NAN_BOXED(9210029939126621597,64,FLEN)
NAN_BOXED(4609954535888490905,64,FLEN)
NAN_BOXED(9212905897451089515,64,FLEN)
NAN_BOXED(9210061471565065535,64,FLEN)
NAN_BOXED(4609003495266018236,64,FLEN)
NAN_BOXED(9211963514527423757,64,FLEN)
NAN_BOXED(9210061471565065535,64,FLEN)
NAN_BOXED(4609003495266018236,64,FLEN)
NAN_BOXED(9211963514527423757,64,FLEN)
NAN_BOXED(9210061471565065535,64,FLEN)
NAN_BOXED(4609003495266018236,64,FLEN)
NAN_BOXED(9211963514527423757,64,FLEN)
NAN_BOXED(9210061471565065535,64,FLEN)
NAN_BOXED(4609003495266018236,64,FLEN)
NAN_BOXED(9211963514527423757,64,FLEN)
NAN_BOXED(9210061471565065535,64,FLEN)
NAN_BOXED(4609003495266018236,64,FLEN)
NAN_BOXED(9211963514527423757,64,FLEN)
NAN_BOXED(9210099803859043055,64,FLEN)
NAN_BOXED(4615409608831397775,64,FLEN)
NAN_BOXED(9218524240919187972,64,FLEN)
NAN_BOXED(9210099803859043055,64,FLEN)
NAN_BOXED(4615409608831397775,64,FLEN)
NAN_BOXED(9218524240919187972,64,FLEN)
NAN_BOXED(9210099803859043055,64,FLEN)
NAN_BOXED(4615409608831397775,64,FLEN)
NAN_BOXED(9218524240919187972,64,FLEN)
NAN_BOXED(9210099803859043055,64,FLEN)
NAN_BOXED(4615409608831397775,64,FLEN)
NAN_BOXED(9218524240919187972,64,FLEN)
NAN_BOXED(9210099803859043055,64,FLEN)
NAN_BOXED(4615409608831397775,64,FLEN)
NAN_BOXED(9218524240919187972,64,FLEN)
NAN_BOXED(9210182970566590375,64,FLEN)
NAN_BOXED(4602362388394685267,64,FLEN)
NAN_BOXED(9205509852803168367,64,FLEN)
NAN_BOXED(9210182970566590375,64,FLEN)
NAN_BOXED(4602362388394685267,64,FLEN)
NAN_BOXED(9205509852803168367,64,FLEN)
NAN_BOXED(9210182970566590375,64,FLEN)
NAN_BOXED(4602362388394685267,64,FLEN)
NAN_BOXED(9205509852803168367,64,FLEN)
NAN_BOXED(9210182970566590375,64,FLEN)
NAN_BOXED(4602362388394685267,64,FLEN)
NAN_BOXED(9205509852803168367,64,FLEN)
NAN_BOXED(9210182970566590375,64,FLEN)
NAN_BOXED(4602362388394685267,64,FLEN)
NAN_BOXED(9205509852803168367,64,FLEN)
NAN_BOXED(9210229562121376913,64,FLEN)
NAN_BOXED(4602301308036320744,64,FLEN)
NAN_BOXED(9205521769666825923,64,FLEN)
NAN_BOXED(9210229562121376913,64,FLEN)
NAN_BOXED(4602301308036320744,64,FLEN)
NAN_BOXED(9205521769666825923,64,FLEN)
NAN_BOXED(9210229562121376913,64,FLEN)
NAN_BOXED(4602301308036320744,64,FLEN)
NAN_BOXED(9205521769666825923,64,FLEN)
NAN_BOXED(9210229562121376913,64,FLEN)
NAN_BOXED(4602301308036320744,64,FLEN)
NAN_BOXED(9205521769666825923,64,FLEN)
NAN_BOXED(9210229562121376913,64,FLEN)
NAN_BOXED(4602301308036320744,64,FLEN)
NAN_BOXED(9205521769666825923,64,FLEN)
NAN_BOXED(9210373226354881359,64,FLEN)
NAN_BOXED(4609396447536823771,64,FLEN)
NAN_BOXED(9212838955305945305,64,FLEN)
NAN_BOXED(9210373226354881359,64,FLEN)
NAN_BOXED(4609396447536823771,64,FLEN)
NAN_BOXED(9212838955305945305,64,FLEN)
NAN_BOXED(9210373226354881359,64,FLEN)
NAN_BOXED(4609396447536823771,64,FLEN)
NAN_BOXED(9212838955305945305,64,FLEN)
NAN_BOXED(9210373226354881359,64,FLEN)
NAN_BOXED(4609396447536823771,64,FLEN)
NAN_BOXED(9212838955305945305,64,FLEN)
NAN_BOXED(9210373226354881359,64,FLEN)
NAN_BOXED(4609396447536823771,64,FLEN)
NAN_BOXED(9212838955305945305,64,FLEN)
NAN_BOXED(9210436496845851733,64,FLEN)
NAN_BOXED(4605913433851500075,64,FLEN)
NAN_BOXED(9209580679352106343,64,FLEN)
NAN_BOXED(9210436496845851733,64,FLEN)
NAN_BOXED(4605913433851500075,64,FLEN)
NAN_BOXED(9209580679352106343,64,FLEN)
NAN_BOXED(9210436496845851733,64,FLEN)
NAN_BOXED(4605913433851500075,64,FLEN)
NAN_BOXED(9209580679352106343,64,FLEN)
NAN_BOXED(9210436496845851733,64,FLEN)
NAN_BOXED(4605913433851500075,64,FLEN)
NAN_BOXED(9209580679352106343,64,FLEN)
NAN_BOXED(9210436496845851733,64,FLEN)
NAN_BOXED(4605913433851500075,64,FLEN)
NAN_BOXED(9209580679352106343,64,FLEN)
NAN_BOXED(9210636910817224055,64,FLEN)
NAN_BOXED(4609739498719749678,64,FLEN)
NAN_BOXED(9213634406763960791,64,FLEN)
NAN_BOXED(9210636910817224055,64,FLEN)
NAN_BOXED(4609739498719749678,64,FLEN)
NAN_BOXED(9213634406763960791,64,FLEN)
NAN_BOXED(9210636910817224055,64,FLEN)
NAN_BOXED(4609739498719749678,64,FLEN)
NAN_BOXED(9213634406763960791,64,FLEN)
NAN_BOXED(9210636910817224055,64,FLEN)
NAN_BOXED(4609739498719749678,64,FLEN)
NAN_BOXED(9213634406763960791,64,FLEN)
NAN_BOXED(9210636910817224055,64,FLEN)
NAN_BOXED(4609739498719749678,64,FLEN)
NAN_BOXED(9213634406763960791,64,FLEN)
NAN_BOXED(9210838421097517147,64,FLEN)
NAN_BOXED(4605067576644930265,64,FLEN)
NAN_BOXED(9209241887336696455,64,FLEN)
NAN_BOXED(9210838421097517147,64,FLEN)
NAN_BOXED(4605067576644930265,64,FLEN)
NAN_BOXED(9209241887336696455,64,FLEN)
NAN_BOXED(9210838421097517147,64,FLEN)
NAN_BOXED(4605067576644930265,64,FLEN)
NAN_BOXED(9209241887336696455,64,FLEN)
NAN_BOXED(9210838421097517147,64,FLEN)
NAN_BOXED(4605067576644930265,64,FLEN)
NAN_BOXED(9209241887336696455,64,FLEN)
NAN_BOXED(9210838421097517147,64,FLEN)
NAN_BOXED(4605067576644930265,64,FLEN)
NAN_BOXED(9209241887336696455,64,FLEN)
NAN_BOXED(9210914752857597993,64,FLEN)
NAN_BOXED(4613139830355010164,64,FLEN)
NAN_BOXED(9217212250706304745,64,FLEN)
NAN_BOXED(9210914752857597993,64,FLEN)
NAN_BOXED(4613139830355010164,64,FLEN)
NAN_BOXED(9217212250706304745,64,FLEN)
NAN_BOXED(9210914752857597993,64,FLEN)
NAN_BOXED(4613139830355010164,64,FLEN)
NAN_BOXED(9217212250706304745,64,FLEN)
NAN_BOXED(9210914752857597993,64,FLEN)
NAN_BOXED(4613139830355010164,64,FLEN)
NAN_BOXED(9217212250706304745,64,FLEN)
NAN_BOXED(9210914752857597993,64,FLEN)
NAN_BOXED(4613139830355010164,64,FLEN)
NAN_BOXED(9217212250706304745,64,FLEN)
NAN_BOXED(9210933957892124787,64,FLEN)
NAN_BOXED(4607866743574907827,64,FLEN)
NAN_BOXED(9211781283128455839,64,FLEN)
NAN_BOXED(9210933957892124787,64,FLEN)
NAN_BOXED(4607866743574907827,64,FLEN)
NAN_BOXED(9211781283128455839,64,FLEN)
NAN_BOXED(9210933957892124787,64,FLEN)
NAN_BOXED(4607866743574907827,64,FLEN)
NAN_BOXED(9211781283128455839,64,FLEN)
NAN_BOXED(9210933957892124787,64,FLEN)
NAN_BOXED(4607866743574907827,64,FLEN)
NAN_BOXED(9211781283128455839,64,FLEN)
NAN_BOXED(9210933957892124787,64,FLEN)
NAN_BOXED(4607866743574907827,64,FLEN)
NAN_BOXED(9211781283128455839,64,FLEN)
NAN_BOXED(9210977993844294837,64,FLEN)
NAN_BOXED(4606980704411435928,64,FLEN)
NAN_BOXED(9210852127130233325,64,FLEN)
NAN_BOXED(9210977993844294837,64,FLEN)
NAN_BOXED(4606980704411435928,64,FLEN)
NAN_BOXED(9210852127130233325,64,FLEN)
NAN_BOXED(9210977993844294837,64,FLEN)
NAN_BOXED(4606980704411435928,64,FLEN)
NAN_BOXED(9210852127130233325,64,FLEN)
NAN_BOXED(9210977993844294837,64,FLEN)
NAN_BOXED(4606980704411435928,64,FLEN)
NAN_BOXED(9210852127130233325,64,FLEN)
NAN_BOXED(9210977993844294837,64,FLEN)
NAN_BOXED(4606980704411435928,64,FLEN)
NAN_BOXED(9210852127130233325,64,FLEN)
NAN_BOXED(9211016810663087479,64,FLEN)
NAN_BOXED(4611073407566145301,64,FLEN)
NAN_BOXED(9215135510353255069,64,FLEN)
NAN_BOXED(9211016810663087479,64,FLEN)
NAN_BOXED(4611073407566145301,64,FLEN)
NAN_BOXED(9215135510353255069,64,FLEN)
NAN_BOXED(9211016810663087479,64,FLEN)
NAN_BOXED(4611073407566145301,64,FLEN)
NAN_BOXED(9215135510353255069,64,FLEN)
NAN_BOXED(9211016810663087479,64,FLEN)
NAN_BOXED(4611073407566145301,64,FLEN)
NAN_BOXED(9215135510353255069,64,FLEN)
NAN_BOXED(9211016810663087479,64,FLEN)
NAN_BOXED(4611073407566145301,64,FLEN)
NAN_BOXED(9215135510353255069,64,FLEN)
NAN_BOXED(9211191290821425773,64,FLEN)
NAN_BOXED(4602063164656444534,64,FLEN)
NAN_BOXED(9206288952985727599,64,FLEN)
NAN_BOXED(9211191290821425773,64,FLEN)
NAN_BOXED(4602063164656444534,64,FLEN)
NAN_BOXED(9206288952985727599,64,FLEN)
NAN_BOXED(9211191290821425773,64,FLEN)
NAN_BOXED(4602063164656444534,64,FLEN)
NAN_BOXED(9206288952985727599,64,FLEN)
NAN_BOXED(9211191290821425773,64,FLEN)
NAN_BOXED(4602063164656444534,64,FLEN)
NAN_BOXED(9206288952985727599,64,FLEN)
NAN_BOXED(9211191290821425773,64,FLEN)
NAN_BOXED(4602063164656444534,64,FLEN)
NAN_BOXED(9206288952985727599,64,FLEN)
NAN_BOXED(9211230010721266211,64,FLEN)
NAN_BOXED(4609840055031316504,64,FLEN)
NAN_BOXED(9214530108111419065,64,FLEN)
NAN_BOXED(9211230010721266211,64,FLEN)
NAN_BOXED(4609840055031316504,64,FLEN)
NAN_BOXED(9214530108111419065,64,FLEN)
NAN_BOXED(9211230010721266211,64,FLEN)
NAN_BOXED(4609840055031316504,64,FLEN)
NAN_BOXED(9214530108111419065,64,FLEN)
NAN_BOXED(9211230010721266211,64,FLEN)
NAN_BOXED(4609840055031316504,64,FLEN)
NAN_BOXED(9214530108111419065,64,FLEN)
NAN_BOXED(9211230010721266211,64,FLEN)
NAN_BOXED(4609840055031316504,64,FLEN)
NAN_BOXED(9214530108111419065,64,FLEN)
NAN_BOXED(9211296354940710619,64,FLEN)
NAN_BOXED(4604269226558244623,64,FLEN)
NAN_BOXED(9208889961884928099,64,FLEN)
NAN_BOXED(9211296354940710619,64,FLEN)
NAN_BOXED(4604269226558244623,64,FLEN)
NAN_BOXED(9208889961884928099,64,FLEN)
NAN_BOXED(9211296354940710619,64,FLEN)
NAN_BOXED(4604269226558244623,64,FLEN)
NAN_BOXED(9208889961884928099,64,FLEN)
NAN_BOXED(9211296354940710619,64,FLEN)
NAN_BOXED(4604269226558244623,64,FLEN)
NAN_BOXED(9208889961884928099,64,FLEN)
NAN_BOXED(9211296354940710619,64,FLEN)
NAN_BOXED(4604269226558244623,64,FLEN)
NAN_BOXED(9208889961884928099,64,FLEN)
NAN_BOXED(9211347735694911975,64,FLEN)
NAN_BOXED(4612605579959712505,64,FLEN)
NAN_BOXED(9217074415425609616,64,FLEN)
NAN_BOXED(9211347735694911975,64,FLEN)
NAN_BOXED(4612605579959712505,64,FLEN)
NAN_BOXED(9217074415425609616,64,FLEN)
NAN_BOXED(9211347735694911975,64,FLEN)
NAN_BOXED(4612605579959712505,64,FLEN)
NAN_BOXED(9217074415425609616,64,FLEN)
NAN_BOXED(9211347735694911975,64,FLEN)
NAN_BOXED(4612605579959712505,64,FLEN)
NAN_BOXED(9217074415425609616,64,FLEN)
NAN_BOXED(9211347735694911975,64,FLEN)
NAN_BOXED(4612605579959712505,64,FLEN)
NAN_BOXED(9217074415425609616,64,FLEN)
NAN_BOXED(9211483500351212055,64,FLEN)
NAN_BOXED(4594738422926345475,64,FLEN)
NAN_BOXED(9199423782506029855,64,FLEN)
NAN_BOXED(9211483500351212055,64,FLEN)
NAN_BOXED(4594738422926345475,64,FLEN)
NAN_BOXED(9199423782506029855,64,FLEN)
NAN_BOXED(9211483500351212055,64,FLEN)
NAN_BOXED(4594738422926345475,64,FLEN)
NAN_BOXED(9199423782506029855,64,FLEN)
NAN_BOXED(9211483500351212055,64,FLEN)
NAN_BOXED(4594738422926345475,64,FLEN)
NAN_BOXED(9199423782506029855,64,FLEN)
NAN_BOXED(9211483500351212055,64,FLEN)
NAN_BOXED(4594738422926345475,64,FLEN)
NAN_BOXED(9199423782506029855,64,FLEN)
NAN_BOXED(9211530016879033665,64,FLEN)
NAN_BOXED(4605135139704215694,64,FLEN)
NAN_BOXED(9210127074500818875,64,FLEN)
NAN_BOXED(9211530016879033665,64,FLEN)
NAN_BOXED(4605135139704215694,64,FLEN)
NAN_BOXED(9210127074500818875,64,FLEN)
NAN_BOXED(9211530016879033665,64,FLEN)
NAN_BOXED(4605135139704215694,64,FLEN)
NAN_BOXED(9210127074500818875,64,FLEN)
NAN_BOXED(9211530016879033665,64,FLEN)
NAN_BOXED(4605135139704215694,64,FLEN)
NAN_BOXED(9210127074500818875,64,FLEN)
NAN_BOXED(9211530016879033665,64,FLEN)
NAN_BOXED(4605135139704215694,64,FLEN)
NAN_BOXED(9210127074500818875,64,FLEN)
NAN_BOXED(9211531256038606957,64,FLEN)
NAN_BOXED(4612651100994699173,64,FLEN)
NAN_BOXED(9217357808704886825,64,FLEN)
NAN_BOXED(9211531256038606957,64,FLEN)
NAN_BOXED(4612651100994699173,64,FLEN)
NAN_BOXED(9217357808704886825,64,FLEN)
NAN_BOXED(9211531256038606957,64,FLEN)
NAN_BOXED(4612651100994699173,64,FLEN)
NAN_BOXED(9217357808704886825,64,FLEN)
NAN_BOXED(9211531256038606957,64,FLEN)
NAN_BOXED(4612651100994699173,64,FLEN)
NAN_BOXED(9217357808704886825,64,FLEN)
NAN_BOXED(9211531256038606957,64,FLEN)
NAN_BOXED(4612651100994699173,64,FLEN)
NAN_BOXED(9217357808704886825,64,FLEN)
NAN_BOXED(9211608653041102649,64,FLEN)
NAN_BOXED(4587704255944859618,64,FLEN)
NAN_BOXED(9192578399083413023,64,FLEN)
NAN_BOXED(9211608653041102649,64,FLEN)
NAN_BOXED(4587704255944859618,64,FLEN)
NAN_BOXED(9192578399083413023,64,FLEN)
NAN_BOXED(9211608653041102649,64,FLEN)
NAN_BOXED(4587704255944859618,64,FLEN)
NAN_BOXED(9192578399083413023,64,FLEN)
NAN_BOXED(9211608653041102649,64,FLEN)
NAN_BOXED(4587704255944859618,64,FLEN)
NAN_BOXED(9192578399083413023,64,FLEN)
NAN_BOXED(9211608653041102649,64,FLEN)
NAN_BOXED(4587704255944859618,64,FLEN)
NAN_BOXED(9192578399083413023,64,FLEN)
NAN_BOXED(9211670018910015233,64,FLEN)
NAN_BOXED(4609730452154023424,64,FLEN)
NAN_BOXED(9214803128311968196,64,FLEN)
NAN_BOXED(9211670018910015233,64,FLEN)
NAN_BOXED(4609730452154023424,64,FLEN)
NAN_BOXED(9214803128311968196,64,FLEN)
NAN_BOXED(9211670018910015233,64,FLEN)
NAN_BOXED(4609730452154023424,64,FLEN)
NAN_BOXED(9214803128311968196,64,FLEN)
NAN_BOXED(9211670018910015233,64,FLEN)
NAN_BOXED(4609730452154023424,64,FLEN)
NAN_BOXED(9214803128311968196,64,FLEN)
NAN_BOXED(9211670018910015233,64,FLEN)
NAN_BOXED(4609730452154023424,64,FLEN)
NAN_BOXED(9214803128311968196,64,FLEN)
NAN_BOXED(9211730844739075949,64,FLEN)
NAN_BOXED(4608511116586456662,64,FLEN)
NAN_BOXED(9213611132937093017,64,FLEN)
NAN_BOXED(9211730844739075949,64,FLEN)
NAN_BOXED(4608511116586456662,64,FLEN)
NAN_BOXED(9213611132937093017,64,FLEN)
NAN_BOXED(9211730844739075949,64,FLEN)
NAN_BOXED(4608511116586456662,64,FLEN)
NAN_BOXED(9213611132937093017,64,FLEN)
NAN_BOXED(9211730844739075949,64,FLEN)
NAN_BOXED(4608511116586456662,64,FLEN)
NAN_BOXED(9213611132937093017,64,FLEN)
NAN_BOXED(9211730844739075949,64,FLEN)
NAN_BOXED(4608511116586456662,64,FLEN)
NAN_BOXED(9213611132937093017,64,FLEN)
NAN_BOXED(9211762883696335005,64,FLEN)
NAN_BOXED(4590537480062435153,64,FLEN)
NAN_BOXED(9195696199584928895,64,FLEN)
NAN_BOXED(9211762883696335005,64,FLEN)
NAN_BOXED(4590537480062435153,64,FLEN)
NAN_BOXED(9195696199584928895,64,FLEN)
NAN_BOXED(9211762883696335005,64,FLEN)
NAN_BOXED(4590537480062435153,64,FLEN)
NAN_BOXED(9195696199584928895,64,FLEN)
NAN_BOXED(9211762883696335005,64,FLEN)
NAN_BOXED(4590537480062435153,64,FLEN)
NAN_BOXED(9195696199584928895,64,FLEN)
NAN_BOXED(9211762883696335005,64,FLEN)
NAN_BOXED(4590537480062435153,64,FLEN)
NAN_BOXED(9195696199584928895,64,FLEN)
NAN_BOXED(9211820685091288959,64,FLEN)
NAN_BOXED(4612731987538927636,64,FLEN)
NAN_BOXED(9217825338946851430,64,FLEN)
NAN_BOXED(9211820685091288959,64,FLEN)
NAN_BOXED(4612731987538927636,64,FLEN)
NAN_BOXED(9217825338946851430,64,FLEN)
NAN_BOXED(9211820685091288959,64,FLEN)
NAN_BOXED(4612731987538927636,64,FLEN)
NAN_BOXED(9217825338946851430,64,FLEN)
NAN_BOXED(9211820685091288959,64,FLEN)
NAN_BOXED(4612731987538927636,64,FLEN)
NAN_BOXED(9217825338946851430,64,FLEN)
NAN_BOXED(9211820685091288959,64,FLEN)
NAN_BOXED(4612731987538927636,64,FLEN)
NAN_BOXED(9217825338946851430,64,FLEN)
NAN_BOXED(9211917823667539947,64,FLEN)
NAN_BOXED(4599748366396383919,64,FLEN)
NAN_BOXED(9205202154685528535,64,FLEN)
NAN_BOXED(9211917823667539947,64,FLEN)
NAN_BOXED(4599748366396383919,64,FLEN)
NAN_BOXED(9205202154685528535,64,FLEN)
NAN_BOXED(9211917823667539947,64,FLEN)
NAN_BOXED(4599748366396383919,64,FLEN)
NAN_BOXED(9205202154685528535,64,FLEN)
NAN_BOXED(9211917823667539947,64,FLEN)
NAN_BOXED(4599748366396383919,64,FLEN)
NAN_BOXED(9205202154685528535,64,FLEN)
NAN_BOXED(9211917823667539947,64,FLEN)
NAN_BOXED(4599748366396383919,64,FLEN)
NAN_BOXED(9205202154685528535,64,FLEN)
NAN_BOXED(9212009519358469461,64,FLEN)
NAN_BOXED(4609586197492790693,64,FLEN)
NAN_BOXED(9214962386220761634,64,FLEN)
NAN_BOXED(9212009519358469461,64,FLEN)
NAN_BOXED(4609586197492790693,64,FLEN)
NAN_BOXED(9214962386220761634,64,FLEN)
NAN_BOXED(9212009519358469461,64,FLEN)
NAN_BOXED(4609586197492790693,64,FLEN)
NAN_BOXED(9214962386220761634,64,FLEN)
NAN_BOXED(9212009519358469461,64,FLEN)
NAN_BOXED(4609586197492790693,64,FLEN)
NAN_BOXED(9214962386220761634,64,FLEN)
NAN_BOXED(9212009519358469461,64,FLEN)
NAN_BOXED(4609586197492790693,64,FLEN)
NAN_BOXED(9214962386220761634,64,FLEN)
NAN_BOXED(9212307439131076755,64,FLEN)
NAN_BOXED(4610484446231137862,64,FLEN)
NAN_BOXED(9215883926216856919,64,FLEN)
NAN_BOXED(9212307439131076755,64,FLEN)
NAN_BOXED(4610484446231137862,64,FLEN)
NAN_BOXED(9215883926216856919,64,FLEN)
NAN_BOXED(9212307439131076755,64,FLEN)
NAN_BOXED(4610484446231137862,64,FLEN)
NAN_BOXED(9215883926216856919,64,FLEN)
NAN_BOXED(9212307439131076755,64,FLEN)
NAN_BOXED(4610484446231137862,64,FLEN)
NAN_BOXED(9215883926216856919,64,FLEN)
NAN_BOXED(9212307439131076755,64,FLEN)
NAN_BOXED(4610484446231137862,64,FLEN)
NAN_BOXED(9215883926216856919,64,FLEN)
NAN_BOXED(9212374543280983875,64,FLEN)
NAN_BOXED(4605716776661756107,64,FLEN)
NAN_BOXED(9211232759773917807,64,FLEN)
NAN_BOXED(9212374543280983875,64,FLEN)
NAN_BOXED(4605716776661756107,64,FLEN)
NAN_BOXED(9211232759773917807,64,FLEN)
NAN_BOXED(9212374543280983875,64,FLEN)
NAN_BOXED(4605716776661756107,64,FLEN)
NAN_BOXED(9211232759773917807,64,FLEN)
NAN_BOXED(9212374543280983875,64,FLEN)
NAN_BOXED(4605716776661756107,64,FLEN)
NAN_BOXED(9211232759773917807,64,FLEN)
NAN_BOXED(9212374543280983875,64,FLEN)
NAN_BOXED(4605716776661756107,64,FLEN)
NAN_BOXED(9211232759773917807,64,FLEN)
NAN_BOXED(9212400362094699453,64,FLEN)
NAN_BOXED(4612201652280059556,64,FLEN)
NAN_BOXED(9217710309328579647,64,FLEN)
NAN_BOXED(9212400362094699453,64,FLEN)
NAN_BOXED(4612201652280059556,64,FLEN)
NAN_BOXED(9217710309328579647,64,FLEN)
NAN_BOXED(9212400362094699453,64,FLEN)
NAN_BOXED(4612201652280059556,64,FLEN)
NAN_BOXED(9217710309328579647,64,FLEN)
NAN_BOXED(9212400362094699453,64,FLEN)
NAN_BOXED(4612201652280059556,64,FLEN)
NAN_BOXED(9217710309328579647,64,FLEN)
NAN_BOXED(9212400362094699453,64,FLEN)
NAN_BOXED(4612201652280059556,64,FLEN)
NAN_BOXED(9217710309328579647,64,FLEN)
NAN_BOXED(9212426108340748063,64,FLEN)
NAN_BOXED(4607258170633718738,64,FLEN)
NAN_BOXED(9212545002027559011,64,FLEN)
NAN_BOXED(9212426108340748063,64,FLEN)
NAN_BOXED(4607258170633718738,64,FLEN)
NAN_BOXED(9212545002027559011,64,FLEN)
NAN_BOXED(9212426108340748063,64,FLEN)
NAN_BOXED(4607258170633718738,64,FLEN)
NAN_BOXED(9212545002027559011,64,FLEN)
NAN_BOXED(9212426108340748063,64,FLEN)
NAN_BOXED(4607258170633718738,64,FLEN)
NAN_BOXED(9212545002027559011,64,FLEN)
NAN_BOXED(9212426108340748063,64,FLEN)
NAN_BOXED(4607258170633718738,64,FLEN)
NAN_BOXED(9212545002027559011,64,FLEN)
NAN_BOXED(9212438847558988579,64,FLEN)
NAN_BOXED(4608483936186928827,64,FLEN)
NAN_BOXED(9214425059303304057,64,FLEN)
NAN_BOXED(9212438847558988579,64,FLEN)
NAN_BOXED(4608483936186928827,64,FLEN)
NAN_BOXED(9214425059303304057,64,FLEN)
NAN_BOXED(9212438847558988579,64,FLEN)
NAN_BOXED(4608483936186928827,64,FLEN)
NAN_BOXED(9214425059303304057,64,FLEN)
NAN_BOXED(9212438847558988579,64,FLEN)
NAN_BOXED(4608483936186928827,64,FLEN)
NAN_BOXED(9214425059303304057,64,FLEN)
NAN_BOXED(9212438847558988579,64,FLEN)
NAN_BOXED(4608483936186928827,64,FLEN)
NAN_BOXED(9214425059303304057,64,FLEN)
NAN_BOXED(9212531996395591599,64,FLEN)
NAN_BOXED(4608188899685981532,64,FLEN)
NAN_BOXED(9214135348124018571,64,FLEN)
NAN_BOXED(9212531996395591599,64,FLEN)
NAN_BOXED(4608188899685981532,64,FLEN)
NAN_BOXED(9214135348124018571,64,FLEN)
NAN_BOXED(9212531996395591599,64,FLEN)
NAN_BOXED(4608188899685981532,64,FLEN)
NAN_BOXED(9214135348124018571,64,FLEN)
NAN_BOXED(9212531996395591599,64,FLEN)
NAN_BOXED(4608188899685981532,64,FLEN)
NAN_BOXED(9214135348124018571,64,FLEN)
NAN_BOXED(9212531996395591599,64,FLEN)
NAN_BOXED(4608188899685981532,64,FLEN)
NAN_BOXED(9214135348124018571,64,FLEN)
NAN_BOXED(9212588380438815461,64,FLEN)
NAN_BOXED(4612493996629307533,64,FLEN)
NAN_BOXED(9218389227263685905,64,FLEN)
NAN_BOXED(9212588380438815461,64,FLEN)
NAN_BOXED(4612493996629307533,64,FLEN)
NAN_BOXED(9218389227263685905,64,FLEN)
NAN_BOXED(9212588380438815461,64,FLEN)
NAN_BOXED(4612493996629307533,64,FLEN)
NAN_BOXED(9218389227263685905,64,FLEN)
NAN_BOXED(9212588380438815461,64,FLEN)
NAN_BOXED(4612493996629307533,64,FLEN)
NAN_BOXED(9218389227263685905,64,FLEN)
NAN_BOXED(9212588380438815461,64,FLEN)
NAN_BOXED(4612493996629307533,64,FLEN)
NAN_BOXED(9218389227263685905,64,FLEN)
NAN_BOXED(9212648024145813119,64,FLEN)
NAN_BOXED(4605910553031796087,64,FLEN)
NAN_BOXED(9211618581821449449,64,FLEN)
NAN_BOXED(9212648024145813119,64,FLEN)
NAN_BOXED(4605910553031796087,64,FLEN)
NAN_BOXED(9211618581821449449,64,FLEN)
NAN_BOXED(9212648024145813119,64,FLEN)
NAN_BOXED(4605910553031796087,64,FLEN)
NAN_BOXED(9211618581821449449,64,FLEN)
NAN_BOXED(9212648024145813119,64,FLEN)
NAN_BOXED(4605910553031796087,64,FLEN)
NAN_BOXED(9211618581821449449,64,FLEN)
NAN_BOXED(9212648024145813119,64,FLEN)
NAN_BOXED(4605910553031796087,64,FLEN)
NAN_BOXED(9211618581821449449,64,FLEN)
NAN_BOXED(9212889869482842021,64,FLEN)
NAN_BOXED(4610833981796151149,64,FLEN)
NAN_BOXED(9216680957189178335,64,FLEN)
NAN_BOXED(9212889869482842021,64,FLEN)
NAN_BOXED(4610833981796151149,64,FLEN)
NAN_BOXED(9216680957189178335,64,FLEN)
NAN_BOXED(9212889869482842021,64,FLEN)
NAN_BOXED(4610833981796151149,64,FLEN)
NAN_BOXED(9216680957189178335,64,FLEN)
NAN_BOXED(9212889869482842021,64,FLEN)
NAN_BOXED(4610833981796151149,64,FLEN)
NAN_BOXED(9216680957189178335,64,FLEN)
NAN_BOXED(9212889869482842021,64,FLEN)
NAN_BOXED(4610833981796151149,64,FLEN)
NAN_BOXED(9216680957189178335,64,FLEN)
NAN_BOXED(9212935003638201191,64,FLEN)
NAN_BOXED(4612095365243807874,64,FLEN)
NAN_BOXED(9218127334639615660,64,FLEN)
NAN_BOXED(9212935003638201191,64,FLEN)
NAN_BOXED(4612095365243807874,64,FLEN)
NAN_BOXED(9218127334639615660,64,FLEN)
NAN_BOXED(9212935003638201191,64,FLEN)
NAN_BOXED(4612095365243807874,64,FLEN)
NAN_BOXED(9218127334639615660,64,FLEN)
NAN_BOXED(9212935003638201191,64,FLEN)
NAN_BOXED(4612095365243807874,64,FLEN)
NAN_BOXED(9218127334639615660,64,FLEN)
NAN_BOXED(9212935003638201191,64,FLEN)
NAN_BOXED(4612095365243807874,64,FLEN)
NAN_BOXED(9218127334639615660,64,FLEN)
NAN_BOXED(9212964293439124657,64,FLEN)
NAN_BOXED(4612042812260805590,64,FLEN)
NAN_BOXED(9218070523818553965,64,FLEN)
NAN_BOXED(9212964293439124657,64,FLEN)
NAN_BOXED(4612042812260805590,64,FLEN)
NAN_BOXED(9218070523818553965,64,FLEN)
NAN_BOXED(9212964293439124657,64,FLEN)
NAN_BOXED(4612042812260805590,64,FLEN)
NAN_BOXED(9218070523818553965,64,FLEN)
NAN_BOXED(9212964293439124657,64,FLEN)
NAN_BOXED(4612042812260805590,64,FLEN)
NAN_BOXED(9218070523818553965,64,FLEN)
NAN_BOXED(9212964293439124657,64,FLEN)
NAN_BOXED(4612042812260805590,64,FLEN)
NAN_BOXED(9218070523818553965,64,FLEN)
NAN_BOXED(9213005096193429227,64,FLEN)
NAN_BOXED(4611450650966835572,64,FLEN)
NAN_BOXED(9217308859813791306,64,FLEN)
NAN_BOXED(9213005096193429227,64,FLEN)
NAN_BOXED(4611450650966835572,64,FLEN)
NAN_BOXED(9217308859813791306,64,FLEN)
NAN_BOXED(9213005096193429227,64,FLEN)
NAN_BOXED(4611450650966835572,64,FLEN)
NAN_BOXED(9217308859813791306,64,FLEN)
NAN_BOXED(9213005096193429227,64,FLEN)
NAN_BOXED(4611450650966835572,64,FLEN)
NAN_BOXED(9217308859813791306,64,FLEN)
NAN_BOXED(9213005096193429227,64,FLEN)
NAN_BOXED(4611450650966835572,64,FLEN)
NAN_BOXED(9217308859813791306,64,FLEN)
NAN_BOXED(9213172454416217091,64,FLEN)
NAN_BOXED(4611707425396232492,64,FLEN)
NAN_BOXED(9217713200223976210,64,FLEN)
NAN_BOXED(9213172454416217091,64,FLEN)
NAN_BOXED(4611707425396232492,64,FLEN)
NAN_BOXED(9217713200223976210,64,FLEN)
NAN_BOXED(9213172454416217091,64,FLEN)
NAN_BOXED(4611707425396232492,64,FLEN)
NAN_BOXED(9217713200223976210,64,FLEN)
NAN_BOXED(9213172454416217091,64,FLEN)
NAN_BOXED(4611707425396232492,64,FLEN)
NAN_BOXED(9217713200223976210,64,FLEN)
NAN_BOXED(9213172454416217091,64,FLEN)
NAN_BOXED(4611707425396232492,64,FLEN)
NAN_BOXED(9217713200223976210,64,FLEN)
NAN_BOXED(9213286223910947035,64,FLEN)
NAN_BOXED(4601166261458818468,64,FLEN)
NAN_BOXED(9207451195621024711,64,FLEN)
NAN_BOXED(9213286223910947035,64,FLEN)
NAN_BOXED(4601166261458818468,64,FLEN)
NAN_BOXED(9207451195621024711,64,FLEN)
NAN_BOXED(9213286223910947035,64,FLEN)
NAN_BOXED(4601166261458818468,64,FLEN)
NAN_BOXED(9207451195621024711,64,FLEN)
NAN_BOXED(9213286223910947035,64,FLEN)
NAN_BOXED(4601166261458818468,64,FLEN)
NAN_BOXED(9207451195621024711,64,FLEN)
NAN_BOXED(9213286223910947035,64,FLEN)
NAN_BOXED(4601166261458818468,64,FLEN)
NAN_BOXED(9207451195621024711,64,FLEN)
NAN_BOXED(9213506375711241259,64,FLEN)
NAN_BOXED(4607988261946367117,64,FLEN)
NAN_BOXED(9214664646168591651,64,FLEN)
NAN_BOXED(9213506375711241259,64,FLEN)
NAN_BOXED(4607988261946367117,64,FLEN)
NAN_BOXED(9214664646168591651,64,FLEN)
NAN_BOXED(9213506375711241259,64,FLEN)
NAN_BOXED(4607988261946367117,64,FLEN)
NAN_BOXED(9214664646168591651,64,FLEN)
NAN_BOXED(9213506375711241259,64,FLEN)
NAN_BOXED(4607988261946367117,64,FLEN)
NAN_BOXED(9214664646168591651,64,FLEN)
NAN_BOXED(9213506375711241259,64,FLEN)
NAN_BOXED(4607988261946367117,64,FLEN)
NAN_BOXED(9214664646168591651,64,FLEN)
NAN_BOXED(9213521482299508041,64,FLEN)
NAN_BOXED(4604133194293588204,64,FLEN)
NAN_BOXED(9210757760486786833,64,FLEN)
NAN_BOXED(9213521482299508041,64,FLEN)
NAN_BOXED(4604133194293588204,64,FLEN)
NAN_BOXED(9210757760486786833,64,FLEN)
NAN_BOXED(9213521482299508041,64,FLEN)
NAN_BOXED(4604133194293588204,64,FLEN)
NAN_BOXED(9210757760486786833,64,FLEN)
NAN_BOXED(9213521482299508041,64,FLEN)
NAN_BOXED(4604133194293588204,64,FLEN)
NAN_BOXED(9210757760486786833,64,FLEN)
NAN_BOXED(9213521482299508041,64,FLEN)
NAN_BOXED(4604133194293588204,64,FLEN)
NAN_BOXED(9210757760486786833,64,FLEN)
NAN_BOXED(9213532095385150873,64,FLEN)
NAN_BOXED(4604907229004648391,64,FLEN)
NAN_BOXED(9211467253616498339,64,FLEN)
NAN_BOXED(9213532095385150873,64,FLEN)
NAN_BOXED(4604907229004648391,64,FLEN)
NAN_BOXED(9211467253616498339,64,FLEN)
NAN_BOXED(9213532095385150873,64,FLEN)
NAN_BOXED(4604907229004648391,64,FLEN)
NAN_BOXED(9211467253616498339,64,FLEN)
NAN_BOXED(9213532095385150873,64,FLEN)
NAN_BOXED(4604907229004648391,64,FLEN)
NAN_BOXED(9211467253616498339,64,FLEN)
NAN_BOXED(9213532095385150873,64,FLEN)
NAN_BOXED(4604907229004648391,64,FLEN)
NAN_BOXED(9211467253616498339,64,FLEN)
NAN_BOXED(9213752158163818849,64,FLEN)
NAN_BOXED(4607354885413015200,64,FLEN)
NAN_BOXED(9214073628658674795,64,FLEN)
NAN_BOXED(9213752158163818849,64,FLEN)
NAN_BOXED(4607354885413015200,64,FLEN)
NAN_BOXED(9214073628658674795,64,FLEN)
NAN_BOXED(9213752158163818849,64,FLEN)
NAN_BOXED(4607354885413015200,64,FLEN)
NAN_BOXED(9214073628658674795,64,FLEN)
NAN_BOXED(9213752158163818849,64,FLEN)
NAN_BOXED(4607354885413015200,64,FLEN)
NAN_BOXED(9214073628658674795,64,FLEN)
NAN_BOXED(9213752158163818849,64,FLEN)
NAN_BOXED(4607354885413015200,64,FLEN)
NAN_BOXED(9214073628658674795,64,FLEN)
NAN_BOXED(9213898234728254153,64,FLEN)
NAN_BOXED(4608987796422751692,64,FLEN)
NAN_BOXED(9215843389222850393,64,FLEN)
NAN_BOXED(9213898234728254153,64,FLEN)
NAN_BOXED(4608987796422751692,64,FLEN)
NAN_BOXED(9215843389222850393,64,FLEN)
NAN_BOXED(9213898234728254153,64,FLEN)
NAN_BOXED(4608987796422751692,64,FLEN)
NAN_BOXED(9215843389222850393,64,FLEN)
NAN_BOXED(9213898234728254153,64,FLEN)
NAN_BOXED(4608987796422751692,64,FLEN)
NAN_BOXED(9215843389222850393,64,FLEN)
NAN_BOXED(9213898234728254153,64,FLEN)
NAN_BOXED(4608987796422751692,64,FLEN)
NAN_BOXED(9215843389222850393,64,FLEN)
NAN_BOXED(9213908057799212813,64,FLEN)
NAN_BOXED(4607449235672682017,64,FLEN)
NAN_BOXED(9214389733556208421,64,FLEN)
NAN_BOXED(9213908057799212813,64,FLEN)
NAN_BOXED(4607449235672682017,64,FLEN)
NAN_BOXED(9214389733556208421,64,FLEN)
NAN_BOXED(9213908057799212813,64,FLEN)
NAN_BOXED(4607449235672682017,64,FLEN)
NAN_BOXED(9214389733556208421,64,FLEN)
NAN_BOXED(9213908057799212813,64,FLEN)
NAN_BOXED(4607449235672682017,64,FLEN)
NAN_BOXED(9214389733556208421,64,FLEN)
NAN_BOXED(9213908057799212813,64,FLEN)
NAN_BOXED(4607449235672682017,64,FLEN)
NAN_BOXED(9214389733556208421,64,FLEN)
NAN_BOXED(9213969175080329267,64,FLEN)
NAN_BOXED(4611548739651924606,64,FLEN)
NAN_BOXED(9218341526226966906,64,FLEN)
NAN_BOXED(9213969175080329267,64,FLEN)
NAN_BOXED(4611548739651924606,64,FLEN)
NAN_BOXED(9218341526226966906,64,FLEN)
NAN_BOXED(9213969175080329267,64,FLEN)
NAN_BOXED(4611548739651924606,64,FLEN)
NAN_BOXED(9218341526226966906,64,FLEN)
NAN_BOXED(9213969175080329267,64,FLEN)
NAN_BOXED(4611548739651924606,64,FLEN)
NAN_BOXED(9218341526226966906,64,FLEN)
NAN_BOXED(9213969175080329267,64,FLEN)
NAN_BOXED(4611548739651924606,64,FLEN)
NAN_BOXED(9218341526226966906,64,FLEN)
NAN_BOXED(9214274793952379927,64,FLEN)
NAN_BOXED(4610272263720487445,64,FLEN)
NAN_BOXED(9217378771970952749,64,FLEN)
NAN_BOXED(9214274793952379927,64,FLEN)
NAN_BOXED(4610272263720487445,64,FLEN)
NAN_BOXED(9217378771970952749,64,FLEN)
NAN_BOXED(9214274793952379927,64,FLEN)
NAN_BOXED(4610272263720487445,64,FLEN)
NAN_BOXED(9217378771970952749,64,FLEN)
NAN_BOXED(9214274793952379927,64,FLEN)
NAN_BOXED(4610272263720487445,64,FLEN)
NAN_BOXED(9217378771970952749,64,FLEN)
NAN_BOXED(9214274793952379927,64,FLEN)
NAN_BOXED(4610272263720487445,64,FLEN)
NAN_BOXED(9217378771970952749,64,FLEN)
NAN_BOXED(9214365635636644345,64,FLEN)
NAN_BOXED(4600080003172168837,64,FLEN)
NAN_BOXED(9207263557535928127,64,FLEN)
NAN_BOXED(9214365635636644345,64,FLEN)
NAN_BOXED(4600080003172168837,64,FLEN)
NAN_BOXED(9207263557535928127,64,FLEN)
NAN_BOXED(9214365635636644345,64,FLEN)
NAN_BOXED(4600080003172168837,64,FLEN)
NAN_BOXED(9207263557535928127,64,FLEN)
NAN_BOXED(9214365635636644345,64,FLEN)
NAN_BOXED(4600080003172168837,64,FLEN)
NAN_BOXED(9207263557535928127,64,FLEN)
NAN_BOXED(9214365635636644345,64,FLEN)
NAN_BOXED(4600080003172168837,64,FLEN)
NAN_BOXED(9207263557535928127,64,FLEN)
NAN_BOXED(9214379689941264076,64,FLEN)
NAN_BOXED(4607453326813995154,64,FLEN)
NAN_BOXED(9214651491377969918,64,FLEN)
NAN_BOXED(9214379689941264076,64,FLEN)
NAN_BOXED(4607453326813995154,64,FLEN)
NAN_BOXED(9214651491377969918,64,FLEN)
NAN_BOXED(9214379689941264076,64,FLEN)
NAN_BOXED(4607453326813995154,64,FLEN)
NAN_BOXED(9214651491377969918,64,FLEN)
NAN_BOXED(9214379689941264076,64,FLEN)
NAN_BOXED(4607453326813995154,64,FLEN)
NAN_BOXED(9214651491377969918,64,FLEN)
NAN_BOXED(9214379689941264076,64,FLEN)
NAN_BOXED(4607453326813995154,64,FLEN)
NAN_BOXED(9214651491377969918,64,FLEN)
NAN_BOXED(9214474378405490777,64,FLEN)
NAN_BOXED(4608770224428316921,64,FLEN)
NAN_BOXED(9216100804142552709,64,FLEN)
NAN_BOXED(9214474378405490777,64,FLEN)
NAN_BOXED(4608770224428316921,64,FLEN)
NAN_BOXED(9216100804142552709,64,FLEN)
NAN_BOXED(9214474378405490777,64,FLEN)
NAN_BOXED(4608770224428316921,64,FLEN)
NAN_BOXED(9216100804142552709,64,FLEN)
NAN_BOXED(9214474378405490777,64,FLEN)
NAN_BOXED(4608770224428316921,64,FLEN)
NAN_BOXED(9216100804142552709,64,FLEN)
NAN_BOXED(9214474378405490777,64,FLEN)
NAN_BOXED(4608770224428316921,64,FLEN)
NAN_BOXED(9216100804142552709,64,FLEN)
NAN_BOXED(9214504372024444800,64,FLEN)
NAN_BOXED(4608074428677807738,64,FLEN)
NAN_BOXED(9215424018924875654,64,FLEN)
NAN_BOXED(9214504372024444800,64,FLEN)
NAN_BOXED(4608074428677807738,64,FLEN)
NAN_BOXED(9215424018924875654,64,FLEN)
NAN_BOXED(9214504372024444800,64,FLEN)
NAN_BOXED(4608074428677807738,64,FLEN)
NAN_BOXED(9215424018924875654,64,FLEN)
NAN_BOXED(9214504372024444800,64,FLEN)
NAN_BOXED(4608074428677807738,64,FLEN)
NAN_BOXED(9215424018924875654,64,FLEN)
NAN_BOXED(9214504372024444800,64,FLEN)
NAN_BOXED(4608074428677807738,64,FLEN)
NAN_BOXED(9215424018924875654,64,FLEN)
NAN_BOXED(9214505395465060428,64,FLEN)
NAN_BOXED(4604099301623847201,64,FLEN)
NAN_BOXED(9211466611710412337,64,FLEN)
NAN_BOXED(9214505395465060428,64,FLEN)
NAN_BOXED(4604099301623847201,64,FLEN)
NAN_BOXED(9211466611710412337,64,FLEN)
NAN_BOXED(9214505395465060428,64,FLEN)
NAN_BOXED(4604099301623847201,64,FLEN)
NAN_BOXED(9211466611710412337,64,FLEN)
NAN_BOXED(9214505395465060428,64,FLEN)
NAN_BOXED(4604099301623847201,64,FLEN)
NAN_BOXED(9211466611710412337,64,FLEN)
NAN_BOXED(9214505395465060428,64,FLEN)
NAN_BOXED(4604099301623847201,64,FLEN)
NAN_BOXED(9211466611710412337,64,FLEN)
NAN_BOXED(9214576566100217045,64,FLEN)
NAN_BOXED(4585310050539947076,64,FLEN)
NAN_BOXED(9192734550948059135,64,FLEN)
NAN_BOXED(9214576566100217045,64,FLEN)
NAN_BOXED(4585310050539947076,64,FLEN)
NAN_BOXED(9192734550948059135,64,FLEN)
NAN_BOXED(9214576566100217045,64,FLEN)
NAN_BOXED(4585310050539947076,64,FLEN)
NAN_BOXED(9192734550948059135,64,FLEN)
NAN_BOXED(9214576566100217045,64,FLEN)
NAN_BOXED(4585310050539947076,64,FLEN)
NAN_BOXED(9192734550948059135,64,FLEN)
NAN_BOXED(9214576566100217045,64,FLEN)
NAN_BOXED(4585310050539947076,64,FLEN)
NAN_BOXED(9192734550948059135,64,FLEN)
NAN_BOXED(9214591787530387399,64,FLEN)
NAN_BOXED(4610183189194838419,64,FLEN)
NAN_BOXED(9217743775770589206,64,FLEN)
NAN_BOXED(9214591787530387399,64,FLEN)
NAN_BOXED(4610183189194838419,64,FLEN)
NAN_BOXED(9217743775770589206,64,FLEN)
NAN_BOXED(9214591787530387399,64,FLEN)
NAN_BOXED(4610183189194838419,64,FLEN)
NAN_BOXED(9217743775770589206,64,FLEN)
NAN_BOXED(9214591787530387399,64,FLEN)
NAN_BOXED(4610183189194838419,64,FLEN)
NAN_BOXED(9217743775770589206,64,FLEN)
NAN_BOXED(9214591787530387399,64,FLEN)
NAN_BOXED(4610183189194838419,64,FLEN)
NAN_BOXED(9217743775770589206,64,FLEN)
NAN_BOXED(9214604258387655663,64,FLEN)
NAN_BOXED(4610663672306507493,64,FLEN)
NAN_BOXED(9218270582620985277,64,FLEN)
NAN_BOXED(9214604258387655663,64,FLEN)
NAN_BOXED(4610663672306507493,64,FLEN)
NAN_BOXED(9218270582620985277,64,FLEN)
NAN_BOXED(9214604258387655663,64,FLEN)
NAN_BOXED(4610663672306507493,64,FLEN)
NAN_BOXED(9218270582620985277,64,FLEN)
NAN_BOXED(9214604258387655663,64,FLEN)
NAN_BOXED(4610663672306507493,64,FLEN)
NAN_BOXED(9218270582620985277,64,FLEN)
NAN_BOXED(9214604258387655663,64,FLEN)
NAN_BOXED(4610663672306507493,64,FLEN)
NAN_BOXED(9218270582620985277,64,FLEN)
NAN_BOXED(9214607266606911690,64,FLEN)
NAN_BOXED(4601823378663639301,64,FLEN)
NAN_BOXED(9209444607069425743,64,FLEN)
NAN_BOXED(9214607266606911690,64,FLEN)
NAN_BOXED(4601823378663639301,64,FLEN)
NAN_BOXED(9209444607069425743,64,FLEN)
NAN_BOXED(9214607266606911690,64,FLEN)
NAN_BOXED(4601823378663639301,64,FLEN)
NAN_BOXED(9209444607069425743,64,FLEN)
NAN_BOXED(9214607266606911690,64,FLEN)
NAN_BOXED(4601823378663639301,64,FLEN)
NAN_BOXED(9209444607069425743,64,FLEN)
NAN_BOXED(9214607266606911690,64,FLEN)
NAN_BOXED(4601823378663639301,64,FLEN)
NAN_BOXED(9209444607069425743,64,FLEN)
NAN_BOXED(9214618024935505515,64,FLEN)
NAN_BOXED(4611023259719403832,64,FLEN)
NAN_BOXED(9218674793636845785,64,FLEN)
NAN_BOXED(9214618024935505515,64,FLEN)
NAN_BOXED(4611023259719403832,64,FLEN)
NAN_BOXED(9218674793636845785,64,FLEN)
NAN_BOXED(9214618024935505515,64,FLEN)
NAN_BOXED(4611023259719403832,64,FLEN)
NAN_BOXED(9218674793636845785,64,FLEN)
NAN_BOXED(9214618024935505515,64,FLEN)
NAN_BOXED(4611023259719403832,64,FLEN)
NAN_BOXED(9218674793636845785,64,FLEN)
NAN_BOXED(9214618024935505515,64,FLEN)
NAN_BOXED(4611023259719403832,64,FLEN)
NAN_BOXED(9218674793636845785,64,FLEN)
NAN_BOXED(9214619357587599163,64,FLEN)
NAN_BOXED(4598670994433087968,64,FLEN)
NAN_BOXED(9206135951834383435,64,FLEN)
NAN_BOXED(9214619357587599163,64,FLEN)
NAN_BOXED(4598670994433087968,64,FLEN)
NAN_BOXED(9206135951834383435,64,FLEN)
NAN_BOXED(9214619357587599163,64,FLEN)
NAN_BOXED(4598670994433087968,64,FLEN)
NAN_BOXED(9206135951834383435,64,FLEN)
NAN_BOXED(9214619357587599163,64,FLEN)
NAN_BOXED(4598670994433087968,64,FLEN)
NAN_BOXED(9206135951834383435,64,FLEN)
NAN_BOXED(9214619357587599163,64,FLEN)
NAN_BOXED(4598670994433087968,64,FLEN)
NAN_BOXED(9206135951834383435,64,FLEN)
NAN_BOXED(9214658403818442897,64,FLEN)
NAN_BOXED(4609266504867838774,64,FLEN)
NAN_BOXED(9216878340609327873,64,FLEN)
NAN_BOXED(9214658403818442897,64,FLEN)
NAN_BOXED(4609266504867838774,64,FLEN)
NAN_BOXED(9216878340609327873,64,FLEN)
NAN_BOXED(9214658403818442897,64,FLEN)
NAN_BOXED(4609266504867838774,64,FLEN)
NAN_BOXED(9216878340609327873,64,FLEN)
NAN_BOXED(9214658403818442897,64,FLEN)
NAN_BOXED(4609266504867838774,64,FLEN)
NAN_BOXED(9216878340609327873,64,FLEN)
NAN_BOXED(9214658403818442897,64,FLEN)
NAN_BOXED(4609266504867838774,64,FLEN)
NAN_BOXED(9216878340609327873,64,FLEN)
NAN_BOXED(9214688033962484639,64,FLEN)
NAN_BOXED(4604321783366062972,64,FLEN)
NAN_BOXED(9211945304225057985,64,FLEN)
NAN_BOXED(9214688033962484639,64,FLEN)
NAN_BOXED(4604321783366062972,64,FLEN)
NAN_BOXED(9211945304225057985,64,FLEN)
NAN_BOXED(9214688033962484639,64,FLEN)
NAN_BOXED(4604321783366062972,64,FLEN)
NAN_BOXED(9211945304225057985,64,FLEN)
NAN_BOXED(9214688033962484639,64,FLEN)
NAN_BOXED(4604321783366062972,64,FLEN)
NAN_BOXED(9211945304225057985,64,FLEN)
NAN_BOXED(9214688033962484639,64,FLEN)
NAN_BOXED(4604321783366062972,64,FLEN)
NAN_BOXED(9211945304225057985,64,FLEN)
NAN_BOXED(9214753700242265556,64,FLEN)
NAN_BOXED(4587335768716572616,64,FLEN)
NAN_BOXED(9195137707310502911,64,FLEN)
NAN_BOXED(9214753700242265556,64,FLEN)
NAN_BOXED(4587335768716572616,64,FLEN)
NAN_BOXED(9195137707310502911,64,FLEN)
NAN_BOXED(9214753700242265556,64,FLEN)
NAN_BOXED(4587335768716572616,64,FLEN)
NAN_BOXED(9195137707310502911,64,FLEN)
NAN_BOXED(9214753700242265556,64,FLEN)
NAN_BOXED(4587335768716572616,64,FLEN)
NAN_BOXED(9195137707310502911,64,FLEN)
NAN_BOXED(9214753700242265556,64,FLEN)
NAN_BOXED(4587335768716572616,64,FLEN)
NAN_BOXED(9195137707310502911,64,FLEN)
NAN_BOXED(9214794881515991951,64,FLEN)
NAN_BOXED(4592924517755746812,64,FLEN)
NAN_BOXED(9200874861559238167,64,FLEN)
NAN_BOXED(9214794881515991951,64,FLEN)
NAN_BOXED(4592924517755746812,64,FLEN)
NAN_BOXED(9200874861559238167,64,FLEN)
NAN_BOXED(9214794881515991951,64,FLEN)
NAN_BOXED(4592924517755746812,64,FLEN)
NAN_BOXED(9200874861559238167,64,FLEN)
NAN_BOXED(9214794881515991951,64,FLEN)
NAN_BOXED(4592924517755746812,64,FLEN)
NAN_BOXED(9200874861559238167,64,FLEN)
NAN_BOXED(9214794881515991951,64,FLEN)
NAN_BOXED(4592924517755746812,64,FLEN)
NAN_BOXED(9200874861559238167,64,FLEN)
NAN_BOXED(9214810152712831451,64,FLEN)
NAN_BOXED(4609919660264414359,64,FLEN)
NAN_BOXED(9217818052115838556,64,FLEN)
NAN_BOXED(9214810152712831451,64,FLEN)
NAN_BOXED(4609919660264414359,64,FLEN)
NAN_BOXED(9217818052115838556,64,FLEN)
NAN_BOXED(9214810152712831451,64,FLEN)
NAN_BOXED(4609919660264414359,64,FLEN)
NAN_BOXED(9217818052115838556,64,FLEN)
NAN_BOXED(9214810152712831451,64,FLEN)
NAN_BOXED(4609919660264414359,64,FLEN)
NAN_BOXED(9217818052115838556,64,FLEN)
NAN_BOXED(9214810152712831451,64,FLEN)
NAN_BOXED(4609919660264414359,64,FLEN)
NAN_BOXED(9217818052115838556,64,FLEN)
NAN_BOXED(9214842796688263516,64,FLEN)
NAN_BOXED(4610224684657600670,64,FLEN)
NAN_BOXED(9218207932857542045,64,FLEN)
NAN_BOXED(9214842796688263516,64,FLEN)
NAN_BOXED(4610224684657600670,64,FLEN)
NAN_BOXED(9218207932857542045,64,FLEN)
NAN_BOXED(9214842796688263516,64,FLEN)
NAN_BOXED(4610224684657600670,64,FLEN)
NAN_BOXED(9218207932857542045,64,FLEN)
NAN_BOXED(9214842796688263516,64,FLEN)
NAN_BOXED(4610224684657600670,64,FLEN)
NAN_BOXED(9218207932857542045,64,FLEN)
NAN_BOXED(9214842796688263516,64,FLEN)
NAN_BOXED(4610224684657600670,64,FLEN)
NAN_BOXED(9218207932857542045,64,FLEN)
NAN_BOXED(9214851678951812553,64,FLEN)
NAN_BOXED(4605335750385205583,64,FLEN)
NAN_BOXED(9213292226117897683,64,FLEN)
NAN_BOXED(9214851678951812553,64,FLEN)
NAN_BOXED(4605335750385205583,64,FLEN)
NAN_BOXED(9213292226117897683,64,FLEN)
NAN_BOXED(9214851678951812553,64,FLEN)
NAN_BOXED(4605335750385205583,64,FLEN)
NAN_BOXED(9213292226117897683,64,FLEN)
NAN_BOXED(9214851678951812553,64,FLEN)
NAN_BOXED(4605335750385205583,64,FLEN)
NAN_BOXED(9213292226117897683,64,FLEN)
NAN_BOXED(9214851678951812553,64,FLEN)
NAN_BOXED(4605335750385205583,64,FLEN)
NAN_BOXED(9213292226117897683,64,FLEN)
NAN_BOXED(9214864213614137618,64,FLEN)
NAN_BOXED(4609037808992372695,64,FLEN)
NAN_BOXED(9216925336428290103,64,FLEN)
NAN_BOXED(9214864213614137618,64,FLEN)
NAN_BOXED(4609037808992372695,64,FLEN)
NAN_BOXED(9216925336428290103,64,FLEN)
NAN_BOXED(9214864213614137618,64,FLEN)
NAN_BOXED(4609037808992372695,64,FLEN)
NAN_BOXED(9216925336428290103,64,FLEN)
NAN_BOXED(9214864213614137618,64,FLEN)
NAN_BOXED(4609037808992372695,64,FLEN)
NAN_BOXED(9216925336428290103,64,FLEN)
NAN_BOXED(9214864213614137618,64,FLEN)
NAN_BOXED(4609037808992372695,64,FLEN)
NAN_BOXED(9216925336428290103,64,FLEN)
NAN_BOXED(9214900890313567832,64,FLEN)
NAN_BOXED(4610271298595960926,64,FLEN)
NAN_BOXED(9218357432098452316,64,FLEN)
NAN_BOXED(9214900890313567832,64,FLEN)
NAN_BOXED(4610271298595960926,64,FLEN)
NAN_BOXED(9218357432098452316,64,FLEN)
NAN_BOXED(9214900890313567832,64,FLEN)
NAN_BOXED(4610271298595960926,64,FLEN)
NAN_BOXED(9218357432098452316,64,FLEN)
NAN_BOXED(9214900890313567832,64,FLEN)
NAN_BOXED(4610271298595960926,64,FLEN)
NAN_BOXED(9218357432098452316,64,FLEN)
NAN_BOXED(9214900890313567832,64,FLEN)
NAN_BOXED(4610271298595960926,64,FLEN)
NAN_BOXED(9218357432098452316,64,FLEN)
NAN_BOXED(9214920846485522646,64,FLEN)
NAN_BOXED(4608771975263598720,64,FLEN)
NAN_BOXED(9216706647640209381,64,FLEN)
NAN_BOXED(9214920846485522646,64,FLEN)
NAN_BOXED(4608771975263598720,64,FLEN)
NAN_BOXED(9216706647640209381,64,FLEN)
NAN_BOXED(9214920846485522646,64,FLEN)
NAN_BOXED(4608771975263598720,64,FLEN)
NAN_BOXED(9216706647640209381,64,FLEN)
NAN_BOXED(9214920846485522646,64,FLEN)
NAN_BOXED(4608771975263598720,64,FLEN)
NAN_BOXED(9216706647640209381,64,FLEN)
NAN_BOXED(9214920846485522646,64,FLEN)
NAN_BOXED(4608771975263598720,64,FLEN)
NAN_BOXED(9216706647640209381,64,FLEN)
NAN_BOXED(9215000700159425427,64,FLEN)
NAN_BOXED(4608207083815198949,64,FLEN)
NAN_BOXED(9216170037475206604,64,FLEN)
NAN_BOXED(9215000700159425427,64,FLEN)
NAN_BOXED(4608207083815198949,64,FLEN)
NAN_BOXED(9216170037475206604,64,FLEN)
NAN_BOXED(9215000700159425427,64,FLEN)
NAN_BOXED(4608207083815198949,64,FLEN)
NAN_BOXED(9216170037475206604,64,FLEN)
NAN_BOXED(9215000700159425427,64,FLEN)
NAN_BOXED(4608207083815198949,64,FLEN)
NAN_BOXED(9216170037475206604,64,FLEN)
NAN_BOXED(9215000700159425427,64,FLEN)
NAN_BOXED(4608207083815198949,64,FLEN)
NAN_BOXED(9216170037475206604,64,FLEN)
NAN_BOXED(9215059319221360682,64,FLEN)
NAN_BOXED(4604366454721260530,64,FLEN)
NAN_BOXED(9212503598496583443,64,FLEN)
NAN_BOXED(9215059319221360682,64,FLEN)
NAN_BOXED(4604366454721260530,64,FLEN)
NAN_BOXED(9212503598496583443,64,FLEN)
NAN_BOXED(9215059319221360682,64,FLEN)
NAN_BOXED(4604366454721260530,64,FLEN)
NAN_BOXED(9212503598496583443,64,FLEN)
NAN_BOXED(9215059319221360682,64,FLEN)
NAN_BOXED(4604366454721260530,64,FLEN)
NAN_BOXED(9212503598496583443,64,FLEN)
NAN_BOXED(9215059319221360682,64,FLEN)
NAN_BOXED(4604366454721260530,64,FLEN)
NAN_BOXED(9212503598496583443,64,FLEN)
NAN_BOXED(9215084469624505458,64,FLEN)
NAN_BOXED(4605261210755000610,64,FLEN)
NAN_BOXED(9213575902985507733,64,FLEN)
NAN_BOXED(9215084469624505458,64,FLEN)
NAN_BOXED(4605261210755000610,64,FLEN)
NAN_BOXED(9213575902985507733,64,FLEN)
NAN_BOXED(9215084469624505458,64,FLEN)
NAN_BOXED(4605261210755000610,64,FLEN)
NAN_BOXED(9213575902985507733,64,FLEN)
NAN_BOXED(9215084469624505458,64,FLEN)
NAN_BOXED(4605261210755000610,64,FLEN)
NAN_BOXED(9213575902985507733,64,FLEN)
NAN_BOXED(9215084469624505458,64,FLEN)
NAN_BOXED(4605261210755000610,64,FLEN)
NAN_BOXED(9213575902985507733,64,FLEN)
NAN_BOXED(9215115576597453743,64,FLEN)
NAN_BOXED(4609660218315058582,64,FLEN)
NAN_BOXED(9218006419206384063,64,FLEN)
NAN_BOXED(9215115576597453743,64,FLEN)
NAN_BOXED(4609660218315058582,64,FLEN)
NAN_BOXED(9218006419206384063,64,FLEN)
NAN_BOXED(9215115576597453743,64,FLEN)
NAN_BOXED(4609660218315058582,64,FLEN)
NAN_BOXED(9218006419206384063,64,FLEN)
NAN_BOXED(9215115576597453743,64,FLEN)
NAN_BOXED(4609660218315058582,64,FLEN)
NAN_BOXED(9218006419206384063,64,FLEN)
NAN_BOXED(9215115576597453743,64,FLEN)
NAN_BOXED(4609660218315058582,64,FLEN)
NAN_BOXED(9218006419206384063,64,FLEN)
NAN_BOXED(9215135703293533910,64,FLEN)
NAN_BOXED(4606314993739247375,64,FLEN)
NAN_BOXED(9214627753677666741,64,FLEN)
NAN_BOXED(9215135703293533910,64,FLEN)
NAN_BOXED(4606314993739247375,64,FLEN)
NAN_BOXED(9214627753677666741,64,FLEN)
NAN_BOXED(9215135703293533910,64,FLEN)
NAN_BOXED(4606314993739247375,64,FLEN)
NAN_BOXED(9214627753677666741,64,FLEN)
NAN_BOXED(9215135703293533910,64,FLEN)
NAN_BOXED(4606314993739247375,64,FLEN)
NAN_BOXED(9214627753677666741,64,FLEN)
NAN_BOXED(9215135703293533910,64,FLEN)
NAN_BOXED(4606314993739247375,64,FLEN)
NAN_BOXED(9214627753677666741,64,FLEN)
NAN_BOXED(9215167590756431894,64,FLEN)
NAN_BOXED(4601705966327575161,64,FLEN)
NAN_BOXED(9210090860652356835,64,FLEN)
NAN_BOXED(9215167590756431894,64,FLEN)
NAN_BOXED(4601705966327575161,64,FLEN)
NAN_BOXED(9210090860652356835,64,FLEN)
NAN_BOXED(9215167590756431894,64,FLEN)
NAN_BOXED(4601705966327575161,64,FLEN)
NAN_BOXED(9210090860652356835,64,FLEN)
NAN_BOXED(9215167590756431894,64,FLEN)
NAN_BOXED(4601705966327575161,64,FLEN)
NAN_BOXED(9210090860652356835,64,FLEN)
NAN_BOXED(9215167590756431894,64,FLEN)
NAN_BOXED(4601705966327575161,64,FLEN)
NAN_BOXED(9210090860652356835,64,FLEN)
NAN_BOXED(9215378398676039819,64,FLEN)
NAN_BOXED(4605609359116421772,64,FLEN)
NAN_BOXED(9214414855756099418,64,FLEN)
NAN_BOXED(9215378398676039819,64,FLEN)
NAN_BOXED(4605609359116421772,64,FLEN)
NAN_BOXED(9214414855756099418,64,FLEN)
NAN_BOXED(9215378398676039819,64,FLEN)
NAN_BOXED(4605609359116421772,64,FLEN)
NAN_BOXED(9214414855756099418,64,FLEN)
NAN_BOXED(9215378398676039819,64,FLEN)
NAN_BOXED(4605609359116421772,64,FLEN)
NAN_BOXED(9214414855756099418,64,FLEN)
NAN_BOXED(9215378398676039819,64,FLEN)
NAN_BOXED(4605609359116421772,64,FLEN)
NAN_BOXED(9214414855756099418,64,FLEN)
NAN_BOXED(9215392279701832260,64,FLEN)
NAN_BOXED(4597883808564309716,64,FLEN)
NAN_BOXED(9206206134000978599,64,FLEN)
NAN_BOXED(9215392279701832260,64,FLEN)
NAN_BOXED(4597883808564309716,64,FLEN)
NAN_BOXED(9206206134000978599,64,FLEN)
NAN_BOXED(9215392279701832260,64,FLEN)
NAN_BOXED(4597883808564309716,64,FLEN)
NAN_BOXED(9206206134000978599,64,FLEN)
NAN_BOXED(9215392279701832260,64,FLEN)
NAN_BOXED(4597883808564309716,64,FLEN)
NAN_BOXED(9206206134000978599,64,FLEN)
NAN_BOXED(9215392279701832260,64,FLEN)
NAN_BOXED(4597883808564309716,64,FLEN)
NAN_BOXED(9206206134000978599,64,FLEN)
NAN_BOXED(9215481073447635844,64,FLEN)
NAN_BOXED(4605570392250429518,64,FLEN)
NAN_BOXED(9214475286439515474,64,FLEN)
NAN_BOXED(9215481073447635844,64,FLEN)
NAN_BOXED(4605570392250429518,64,FLEN)
NAN_BOXED(9214475286439515474,64,FLEN)
NAN_BOXED(9215481073447635844,64,FLEN)
NAN_BOXED(4605570392250429518,64,FLEN)
NAN_BOXED(9214475286439515474,64,FLEN)
NAN_BOXED(9215481073447635844,64,FLEN)
NAN_BOXED(4605570392250429518,64,FLEN)
NAN_BOXED(9214475286439515474,64,FLEN)
NAN_BOXED(9215481073447635844,64,FLEN)
NAN_BOXED(4605570392250429518,64,FLEN)
NAN_BOXED(9214475286439515474,64,FLEN)
NAN_BOXED(9215482328362575131,64,FLEN)
NAN_BOXED(4609175929594967719,64,FLEN)
NAN_BOXED(9217970494562691214,64,FLEN)
NAN_BOXED(9215482328362575131,64,FLEN)
NAN_BOXED(4609175929594967719,64,FLEN)
NAN_BOXED(9217970494562691214,64,FLEN)
NAN_BOXED(9215482328362575131,64,FLEN)
NAN_BOXED(4609175929594967719,64,FLEN)
NAN_BOXED(9217970494562691214,64,FLEN)
NAN_BOXED(9215482328362575131,64,FLEN)
NAN_BOXED(4609175929594967719,64,FLEN)
NAN_BOXED(9217970494562691214,64,FLEN)
NAN_BOXED(9215482328362575131,64,FLEN)
NAN_BOXED(4609175929594967719,64,FLEN)
NAN_BOXED(9217970494562691214,64,FLEN)
NAN_BOXED(9215512654025915682,64,FLEN)
NAN_BOXED(4609481298683918384,64,FLEN)
NAN_BOXED(9218397441252874434,64,FLEN)
NAN_BOXED(9215512654025915682,64,FLEN)
NAN_BOXED(4609481298683918384,64,FLEN)
NAN_BOXED(9218397441252874434,64,FLEN)
NAN_BOXED(9215512654025915682,64,FLEN)
NAN_BOXED(4609481298683918384,64,FLEN)
NAN_BOXED(9218397441252874434,64,FLEN)
NAN_BOXED(9215512654025915682,64,FLEN)
NAN_BOXED(4609481298683918384,64,FLEN)
NAN_BOXED(9218397441252874434,64,FLEN)
NAN_BOXED(9215512654025915682,64,FLEN)
NAN_BOXED(4609481298683918384,64,FLEN)
NAN_BOXED(9218397441252874434,64,FLEN)
NAN_BOXED(9215575761020956933,64,FLEN)
NAN_BOXED(4608369218636205703,64,FLEN)
NAN_BOXED(9217081666425245212,64,FLEN)
NAN_BOXED(9215575761020956933,64,FLEN)
NAN_BOXED(4608369218636205703,64,FLEN)
NAN_BOXED(9217081666425245212,64,FLEN)
NAN_BOXED(9215575761020956933,64,FLEN)
NAN_BOXED(4608369218636205703,64,FLEN)
NAN_BOXED(9217081666425245212,64,FLEN)
NAN_BOXED(9215575761020956933,64,FLEN)
NAN_BOXED(4608369218636205703,64,FLEN)
NAN_BOXED(9217081666425245212,64,FLEN)
NAN_BOXED(9215575761020956933,64,FLEN)
NAN_BOXED(4608369218636205703,64,FLEN)
NAN_BOXED(9217081666425245212,64,FLEN)
NAN_BOXED(9215616058893820226,64,FLEN)
NAN_BOXED(4603425161880885735,64,FLEN)
NAN_BOXED(9212066156083906989,64,FLEN)
NAN_BOXED(9215616058893820226,64,FLEN)
NAN_BOXED(4603425161880885735,64,FLEN)
NAN_BOXED(9212066156083906989,64,FLEN)
NAN_BOXED(9215616058893820226,64,FLEN)
NAN_BOXED(4603425161880885735,64,FLEN)
NAN_BOXED(9212066156083906989,64,FLEN)
NAN_BOXED(9215616058893820226,64,FLEN)
NAN_BOXED(4603425161880885735,64,FLEN)
NAN_BOXED(9212066156083906989,64,FLEN)
NAN_BOXED(9215616058893820226,64,FLEN)
NAN_BOXED(4603425161880885735,64,FLEN)
NAN_BOXED(9212066156083906989,64,FLEN)
NAN_BOXED(9215690056508887329,64,FLEN)
NAN_BOXED(4609590126668260769,64,FLEN)
NAN_BOXED(9218806250978514491,64,FLEN)
NAN_BOXED(9215690056508887329,64,FLEN)
NAN_BOXED(4609590126668260769,64,FLEN)
NAN_BOXED(9218806250978514491,64,FLEN)
NAN_BOXED(9215690056508887329,64,FLEN)
NAN_BOXED(4609590126668260769,64,FLEN)
NAN_BOXED(9218806250978514491,64,FLEN)
NAN_BOXED(9215690056508887329,64,FLEN)
NAN_BOXED(4609590126668260769,64,FLEN)
NAN_BOXED(9218806250978514491,64,FLEN)
NAN_BOXED(9215690056508887329,64,FLEN)
NAN_BOXED(4609590126668260769,64,FLEN)
NAN_BOXED(9218806250978514491,64,FLEN)
NAN_BOXED(9215724334473114110,64,FLEN)
NAN_BOXED(4592683022772113606,64,FLEN)
NAN_BOXED(9201570023628857599,64,FLEN)
NAN_BOXED(9215724334473114110,64,FLEN)
NAN_BOXED(4592683022772113606,64,FLEN)
NAN_BOXED(9201570023628857599,64,FLEN)
NAN_BOXED(9215724334473114110,64,FLEN)
NAN_BOXED(4592683022772113606,64,FLEN)
NAN_BOXED(9201570023628857599,64,FLEN)
NAN_BOXED(9215724334473114110,64,FLEN)
NAN_BOXED(4592683022772113606,64,FLEN)
NAN_BOXED(9201570023628857599,64,FLEN)
NAN_BOXED(9215724334473114110,64,FLEN)
NAN_BOXED(4592683022772113606,64,FLEN)
NAN_BOXED(9201570023628857599,64,FLEN)
NAN_BOXED(9215742741313504087,64,FLEN)
NAN_BOXED(4608193974407676672,64,FLEN)
NAN_BOXED(9217063788515332474,64,FLEN)
NAN_BOXED(9215742741313504087,64,FLEN)
NAN_BOXED(4608193974407676672,64,FLEN)
NAN_BOXED(9217063788515332474,64,FLEN)
NAN_BOXED(9215742741313504087,64,FLEN)
NAN_BOXED(4608193974407676672,64,FLEN)
NAN_BOXED(9217063788515332474,64,FLEN)
NAN_BOXED(9215742741313504087,64,FLEN)
NAN_BOXED(4608193974407676672,64,FLEN)
NAN_BOXED(9217063788515332474,64,FLEN)
NAN_BOXED(9215742741313504087,64,FLEN)
NAN_BOXED(4608193974407676672,64,FLEN)
NAN_BOXED(9217063788515332474,64,FLEN)
NAN_BOXED(9215808299964233919,64,FLEN)
NAN_BOXED(4596970080816502555,64,FLEN)
NAN_BOXED(9206005400012110539,64,FLEN)
NAN_BOXED(9215808299964233919,64,FLEN)
NAN_BOXED(4596970080816502555,64,FLEN)
NAN_BOXED(9206005400012110539,64,FLEN)
NAN_BOXED(9215808299964233919,64,FLEN)
NAN_BOXED(4596970080816502555,64,FLEN)
NAN_BOXED(9206005400012110539,64,FLEN)
NAN_BOXED(9215808299964233919,64,FLEN)
NAN_BOXED(4596970080816502555,64,FLEN)
NAN_BOXED(9206005400012110539,64,FLEN)
NAN_BOXED(9215808299964233919,64,FLEN)
NAN_BOXED(4596970080816502555,64,FLEN)
NAN_BOXED(9206005400012110539,64,FLEN)
NAN_BOXED(9215951906851359265,64,FLEN)
NAN_BOXED(4590418040164007882,64,FLEN)
NAN_BOXED(9199628035424888463,64,FLEN)
NAN_BOXED(9215951906851359265,64,FLEN)
NAN_BOXED(4590418040164007882,64,FLEN)
NAN_BOXED(9199628035424888463,64,FLEN)
NAN_BOXED(9215951906851359265,64,FLEN)
NAN_BOXED(4590418040164007882,64,FLEN)
NAN_BOXED(9199628035424888463,64,FLEN)
NAN_BOXED(9215951906851359265,64,FLEN)
NAN_BOXED(4590418040164007882,64,FLEN)
NAN_BOXED(9199628035424888463,64,FLEN)
NAN_BOXED(9215951906851359265,64,FLEN)
NAN_BOXED(4590418040164007882,64,FLEN)
NAN_BOXED(9199628035424888463,64,FLEN)
NAN_BOXED(9215989736104033092,64,FLEN)
NAN_BOXED(4603835726965563200,64,FLEN)
NAN_BOXED(9213060456539210679,64,FLEN)
NAN_BOXED(9215989736104033092,64,FLEN)
NAN_BOXED(4603835726965563200,64,FLEN)
NAN_BOXED(9213060456539210679,64,FLEN)
NAN_BOXED(9215989736104033092,64,FLEN)
NAN_BOXED(4603835726965563200,64,FLEN)
NAN_BOXED(9213060456539210679,64,FLEN)
NAN_BOXED(9215989736104033092,64,FLEN)
NAN_BOXED(4603835726965563200,64,FLEN)
NAN_BOXED(9213060456539210679,64,FLEN)
NAN_BOXED(9215989736104033092,64,FLEN)
NAN_BOXED(4603835726965563200,64,FLEN)
NAN_BOXED(9213060456539210679,64,FLEN)
NAN_BOXED(9216055864821831791,64,FLEN)
NAN_BOXED(4609112220872897448,64,FLEN)
NAN_BOXED(9218710275676115817,64,FLEN)
NAN_BOXED(9216055864821831791,64,FLEN)
NAN_BOXED(4609112220872897448,64,FLEN)
NAN_BOXED(9218710275676115817,64,FLEN)
NAN_BOXED(9216055864821831791,64,FLEN)
NAN_BOXED(4609112220872897448,64,FLEN)
NAN_BOXED(9218710275676115817,64,FLEN)
NAN_BOXED(9216055864821831791,64,FLEN)
NAN_BOXED(4609112220872897448,64,FLEN)
NAN_BOXED(9218710275676115817,64,FLEN)
NAN_BOXED(9216055864821831791,64,FLEN)
NAN_BOXED(4609112220872897448,64,FLEN)
NAN_BOXED(9218710275676115817,64,FLEN)
NAN_BOXED(9216060042682023560,64,FLEN)
NAN_BOXED(4603741747182326995,64,FLEN)
NAN_BOXED(9213019469011061577,64,FLEN)
NAN_BOXED(9216060042682023560,64,FLEN)
NAN_BOXED(4603741747182326995,64,FLEN)
NAN_BOXED(9213019469011061577,64,FLEN)
NAN_BOXED(9216060042682023560,64,FLEN)
NAN_BOXED(4603741747182326995,64,FLEN)
NAN_BOXED(9213019469011061577,64,FLEN)
NAN_BOXED(9216060042682023560,64,FLEN)
NAN_BOXED(4603741747182326995,64,FLEN)
NAN_BOXED(9213019469011061577,64,FLEN)
NAN_BOXED(9216060042682023560,64,FLEN)
NAN_BOXED(4603741747182326995,64,FLEN)
NAN_BOXED(9213019469011061577,64,FLEN)
NAN_BOXED(9216123901877589288,64,FLEN)
NAN_BOXED(4605874980213598928,64,FLEN)
NAN_BOXED(9215214845886765136,64,FLEN)
NAN_BOXED(9216123901877589288,64,FLEN)
NAN_BOXED(4605874980213598928,64,FLEN)
NAN_BOXED(9215214845886765136,64,FLEN)
NAN_BOXED(9216123901877589288,64,FLEN)
NAN_BOXED(4605874980213598928,64,FLEN)
NAN_BOXED(9215214845886765136,64,FLEN)
NAN_BOXED(9216123901877589288,64,FLEN)
NAN_BOXED(4605874980213598928,64,FLEN)
NAN_BOXED(9215214845886765136,64,FLEN)
NAN_BOXED(9216123901877589288,64,FLEN)
NAN_BOXED(4605874980213598928,64,FLEN)
NAN_BOXED(9215214845886765136,64,FLEN)
NAN_BOXED(9216159232759940164,64,FLEN)
NAN_BOXED(4608324505545562446,64,FLEN)
NAN_BOXED(9217756367710912516,64,FLEN)
NAN_BOXED(9216159232759940164,64,FLEN)
NAN_BOXED(4608324505545562446,64,FLEN)
NAN_BOXED(9217756367710912516,64,FLEN)
NAN_BOXED(9216159232759940164,64,FLEN)
NAN_BOXED(4608324505545562446,64,FLEN)
NAN_BOXED(9217756367710912516,64,FLEN)
NAN_BOXED(9216159232759940164,64,FLEN)
NAN_BOXED(4608324505545562446,64,FLEN)
NAN_BOXED(9217756367710912516,64,FLEN)
NAN_BOXED(9216159232759940164,64,FLEN)
NAN_BOXED(4608324505545562446,64,FLEN)
NAN_BOXED(9217756367710912516,64,FLEN)
NAN_BOXED(9216226854483678751,64,FLEN)
NAN_BOXED(4606280731370217241,64,FLEN)
NAN_BOXED(9215589609072693873,64,FLEN)
NAN_BOXED(9216226854483678751,64,FLEN)
NAN_BOXED(4606280731370217241,64,FLEN)
NAN_BOXED(9215589609072693873,64,FLEN)
NAN_BOXED(9216226854483678751,64,FLEN)
NAN_BOXED(4606280731370217241,64,FLEN)
NAN_BOXED(9215589609072693873,64,FLEN)
NAN_BOXED(9216226854483678751,64,FLEN)
NAN_BOXED(4606280731370217241,64,FLEN)
NAN_BOXED(9215589609072693873,64,FLEN)
NAN_BOXED(9216226854483678751,64,FLEN)
NAN_BOXED(4606280731370217241,64,FLEN)
NAN_BOXED(9215589609072693873,64,FLEN)
NAN_BOXED(9216310333552122794,64,FLEN)
NAN_BOXED(4608208300727388954,64,FLEN)
NAN_BOXED(9217779383012614256,64,FLEN)
NAN_BOXED(9216310333552122794,64,FLEN)
NAN_BOXED(4608208300727388954,64,FLEN)
NAN_BOXED(9217779383012614256,64,FLEN)
NAN_BOXED(9216310333552122794,64,FLEN)
NAN_BOXED(4608208300727388954,64,FLEN)
NAN_BOXED(9217779383012614256,64,FLEN)
NAN_BOXED(9216310333552122794,64,FLEN)
NAN_BOXED(4608208300727388954,64,FLEN)
NAN_BOXED(9217779383012614256,64,FLEN)
NAN_BOXED(9216310333552122794,64,FLEN)
NAN_BOXED(4608208300727388954,64,FLEN)
NAN_BOXED(9217779383012614256,64,FLEN)
NAN_BOXED(9216365794436758592,64,FLEN)
NAN_BOXED(4583433396977036456,64,FLEN)
NAN_BOXED(9192958811516889855,64,FLEN)
NAN_BOXED(9216365794436758592,64,FLEN)
NAN_BOXED(4583433396977036456,64,FLEN)
NAN_BOXED(9192958811516889855,64,FLEN)
NAN_BOXED(9216365794436758592,64,FLEN)
NAN_BOXED(4583433396977036456,64,FLEN)
NAN_BOXED(9192958811516889855,64,FLEN)
NAN_BOXED(9216365794436758592,64,FLEN)
NAN_BOXED(4583433396977036456,64,FLEN)
NAN_BOXED(9192958811516889855,64,FLEN)
NAN_BOXED(9216365794436758592,64,FLEN)
NAN_BOXED(4583433396977036456,64,FLEN)
NAN_BOXED(9192958811516889855,64,FLEN)
NAN_BOXED(9216383853314805342,64,FLEN)
NAN_BOXED(4606175716069825648,64,FLEN)
NAN_BOXED(9215654843720677867,64,FLEN)
NAN_BOXED(9216383853314805342,64,FLEN)
NAN_BOXED(4606175716069825648,64,FLEN)
NAN_BOXED(9215654843720677867,64,FLEN)
NAN_BOXED(9216383853314805342,64,FLEN)
NAN_BOXED(4606175716069825648,64,FLEN)
NAN_BOXED(9215654843720677867,64,FLEN)
NAN_BOXED(9216383853314805342,64,FLEN)
NAN_BOXED(4606175716069825648,64,FLEN)
NAN_BOXED(9215654843720677867,64,FLEN)
NAN_BOXED(9216383853314805342,64,FLEN)
NAN_BOXED(4606175716069825648,64,FLEN)
NAN_BOXED(9215654843720677867,64,FLEN)
NAN_BOXED(9216389643973602088,64,FLEN)
NAN_BOXED(4597618680657368266,64,FLEN)
NAN_BOXED(9206979066075531719,64,FLEN)
NAN_BOXED(9216389643973602088,64,FLEN)
NAN_BOXED(4597618680657368266,64,FLEN)
NAN_BOXED(9206979066075531719,64,FLEN)
NAN_BOXED(9216389643973602088,64,FLEN)
NAN_BOXED(4597618680657368266,64,FLEN)
NAN_BOXED(9206979066075531719,64,FLEN)
NAN_BOXED(9216389643973602088,64,FLEN)
NAN_BOXED(4597618680657368266,64,FLEN)
NAN_BOXED(9206979066075531719,64,FLEN)
NAN_BOXED(9216389643973602088,64,FLEN)
NAN_BOXED(4597618680657368266,64,FLEN)
NAN_BOXED(9206979066075531719,64,FLEN)
NAN_BOXED(9216393198257781124,64,FLEN)
NAN_BOXED(4605086876117611430,64,FLEN)
NAN_BOXED(9214873524806565062,64,FLEN)
NAN_BOXED(9216393198257781124,64,FLEN)
NAN_BOXED(4605086876117611430,64,FLEN)
NAN_BOXED(9214873524806565062,64,FLEN)
NAN_BOXED(9216393198257781124,64,FLEN)
NAN_BOXED(4605086876117611430,64,FLEN)
NAN_BOXED(9214873524806565062,64,FLEN)
NAN_BOXED(9216393198257781124,64,FLEN)
NAN_BOXED(4605086876117611430,64,FLEN)
NAN_BOXED(9214873524806565062,64,FLEN)
NAN_BOXED(9216393198257781124,64,FLEN)
NAN_BOXED(4605086876117611430,64,FLEN)
NAN_BOXED(9214873524806565062,64,FLEN)
NAN_BOXED(9216431497040075567,64,FLEN)
NAN_BOXED(4600782537923352261,64,FLEN)
NAN_BOXED(9210544663987955173,64,FLEN)
NAN_BOXED(9216431497040075567,64,FLEN)
NAN_BOXED(4600782537923352261,64,FLEN)
NAN_BOXED(9210544663987955173,64,FLEN)
NAN_BOXED(9216431497040075567,64,FLEN)
NAN_BOXED(4600782537923352261,64,FLEN)
NAN_BOXED(9210544663987955173,64,FLEN)
NAN_BOXED(9216431497040075567,64,FLEN)
NAN_BOXED(4600782537923352261,64,FLEN)
NAN_BOXED(9210544663987955173,64,FLEN)
NAN_BOXED(9216431497040075567,64,FLEN)
NAN_BOXED(4600782537923352261,64,FLEN)
NAN_BOXED(9210544663987955173,64,FLEN)
NAN_BOXED(9216464239055981095,64,FLEN)
NAN_BOXED(4604945840349382158,64,FLEN)
NAN_BOXED(9214824647267812956,64,FLEN)
NAN_BOXED(9216464239055981095,64,FLEN)
NAN_BOXED(4604945840349382158,64,FLEN)
NAN_BOXED(9214824647267812956,64,FLEN)
NAN_BOXED(9216464239055981095,64,FLEN)
NAN_BOXED(4604945840349382158,64,FLEN)
NAN_BOXED(9214824647267812956,64,FLEN)
NAN_BOXED(9216464239055981095,64,FLEN)
NAN_BOXED(4604945840349382158,64,FLEN)
NAN_BOXED(9214824647267812956,64,FLEN)
NAN_BOXED(9216464239055981095,64,FLEN)
NAN_BOXED(4604945840349382158,64,FLEN)
NAN_BOXED(9214824647267812956,64,FLEN)
NAN_BOXED(9216617902563400289,64,FLEN)
NAN_BOXED(4603915126151329932,64,FLEN)
NAN_BOXED(9213969110706991563,64,FLEN)
NAN_BOXED(9216617902563400289,64,FLEN)
NAN_BOXED(4603915126151329932,64,FLEN)
NAN_BOXED(9213969110706991563,64,FLEN)
NAN_BOXED(9216617902563400289,64,FLEN)
NAN_BOXED(4603915126151329932,64,FLEN)
NAN_BOXED(9213969110706991563,64,FLEN)
NAN_BOXED(9216617902563400289,64,FLEN)
NAN_BOXED(4603915126151329932,64,FLEN)
NAN_BOXED(9213969110706991563,64,FLEN)
NAN_BOXED(9216617902563400289,64,FLEN)
NAN_BOXED(4603915126151329932,64,FLEN)
NAN_BOXED(9213969110706991563,64,FLEN)
NAN_BOXED(9216621506977528425,64,FLEN)
NAN_BOXED(4606066367134120295,64,FLEN)
NAN_BOXED(9215783864856885879,64,FLEN)
NAN_BOXED(9216621506977528425,64,FLEN)
NAN_BOXED(4606066367134120295,64,FLEN)
NAN_BOXED(9215783864856885879,64,FLEN)
NAN_BOXED(9216621506977528425,64,FLEN)
NAN_BOXED(4606066367134120295,64,FLEN)
NAN_BOXED(9215783864856885879,64,FLEN)
NAN_BOXED(9216621506977528425,64,FLEN)
NAN_BOXED(4606066367134120295,64,FLEN)
NAN_BOXED(9215783864856885879,64,FLEN)
NAN_BOXED(9216621506977528425,64,FLEN)
NAN_BOXED(4606066367134120295,64,FLEN)
NAN_BOXED(9215783864856885879,64,FLEN)
NAN_BOXED(9216702190089064444,64,FLEN)
NAN_BOXED(4600549147278224246,64,FLEN)
NAN_BOXED(9210581108374160453,64,FLEN)
NAN_BOXED(9216702190089064444,64,FLEN)
NAN_BOXED(4600549147278224246,64,FLEN)
NAN_BOXED(9210581108374160453,64,FLEN)
NAN_BOXED(9216702190089064444,64,FLEN)
NAN_BOXED(4600549147278224246,64,FLEN)
NAN_BOXED(9210581108374160453,64,FLEN)
NAN_BOXED(9216702190089064444,64,FLEN)
NAN_BOXED(4600549147278224246,64,FLEN)
NAN_BOXED(9210581108374160453,64,FLEN)
NAN_BOXED(9216702190089064444,64,FLEN)
NAN_BOXED(4600549147278224246,64,FLEN)
NAN_BOXED(9210581108374160453,64,FLEN)
NAN_BOXED(9216747880109013044,64,FLEN)
NAN_BOXED(4604925880668135732,64,FLEN)
NAN_BOXED(9215022596794878028,64,FLEN)
NAN_BOXED(9216747880109013044,64,FLEN)
NAN_BOXED(4604925880668135732,64,FLEN)
NAN_BOXED(9215022596794878028,64,FLEN)
NAN_BOXED(9216747880109013044,64,FLEN)
NAN_BOXED(4604925880668135732,64,FLEN)
NAN_BOXED(9215022596794878028,64,FLEN)
NAN_BOXED(9216747880109013044,64,FLEN)
NAN_BOXED(4604925880668135732,64,FLEN)
NAN_BOXED(9215022596794878028,64,FLEN)
NAN_BOXED(9216747880109013044,64,FLEN)
NAN_BOXED(4604925880668135732,64,FLEN)
NAN_BOXED(9215022596794878028,64,FLEN)
NAN_BOXED(9216817147565840213,64,FLEN)
NAN_BOXED(4604096896936333612,64,FLEN)
NAN_BOXED(9214434319061157683,64,FLEN)
NAN_BOXED(9216817147565840213,64,FLEN)
NAN_BOXED(4604096896936333612,64,FLEN)
NAN_BOXED(9214434319061157683,64,FLEN)
NAN_BOXED(9216817147565840213,64,FLEN)
NAN_BOXED(4604096896936333612,64,FLEN)
NAN_BOXED(9214434319061157683,64,FLEN)
NAN_BOXED(9216817147565840213,64,FLEN)
NAN_BOXED(4604096896936333612,64,FLEN)
NAN_BOXED(9214434319061157683,64,FLEN)
NAN_BOXED(9216817147565840213,64,FLEN)
NAN_BOXED(4604096896936333612,64,FLEN)
NAN_BOXED(9214434319061157683,64,FLEN)
NAN_BOXED(9216922305882310984,64,FLEN)
NAN_BOXED(4607832106967002687,64,FLEN)
NAN_BOXED(9217940933790372918,64,FLEN)
NAN_BOXED(9216922305882310984,64,FLEN)
NAN_BOXED(4607832106967002687,64,FLEN)
NAN_BOXED(9217940933790372918,64,FLEN)
NAN_BOXED(9216922305882310984,64,FLEN)
NAN_BOXED(4607832106967002687,64,FLEN)
NAN_BOXED(9217940933790372918,64,FLEN)
NAN_BOXED(9216922305882310984,64,FLEN)
NAN_BOXED(4607832106967002687,64,FLEN)
NAN_BOXED(9217940933790372918,64,FLEN)
NAN_BOXED(9216922305882310984,64,FLEN)
NAN_BOXED(4607832106967002687,64,FLEN)
NAN_BOXED(9217940933790372918,64,FLEN)
NAN_BOXED(9216962181104011780,64,FLEN)
NAN_BOXED(4608229725602664503,64,FLEN)
NAN_BOXED(9218613497087225079,64,FLEN)
NAN_BOXED(9216962181104011780,64,FLEN)
NAN_BOXED(4608229725602664503,64,FLEN)
NAN_BOXED(9218613497087225079,64,FLEN)
NAN_BOXED(9216962181104011780,64,FLEN)
NAN_BOXED(4608229725602664503,64,FLEN)
NAN_BOXED(9218613497087225079,64,FLEN)
NAN_BOXED(9216962181104011780,64,FLEN)
NAN_BOXED(4608229725602664503,64,FLEN)
NAN_BOXED(9218613497087225079,64,FLEN)
NAN_BOXED(9216962181104011780,64,FLEN)
NAN_BOXED(4608229725602664503,64,FLEN)
NAN_BOXED(9218613497087225079,64,FLEN)
NAN_BOXED(9217016372246615237,64,FLEN)
NAN_BOXED(4606100880125645823,64,FLEN)
NAN_BOXED(9216157220115221415,64,FLEN)
NAN_BOXED(9217016372246615237,64,FLEN)
NAN_BOXED(4606100880125645823,64,FLEN)
NAN_BOXED(9216157220115221415,64,FLEN)
NAN_BOXED(9217016372246615237,64,FLEN)
NAN_BOXED(4606100880125645823,64,FLEN)
NAN_BOXED(9216157220115221415,64,FLEN)
NAN_BOXED(9217016372246615237,64,FLEN)
NAN_BOXED(4606100880125645823,64,FLEN)
NAN_BOXED(9216157220115221415,64,FLEN)
NAN_BOXED(9217016372246615237,64,FLEN)
NAN_BOXED(4606100880125645823,64,FLEN)
NAN_BOXED(9216157220115221415,64,FLEN)
NAN_BOXED(9217170681469817377,64,FLEN)
NAN_BOXED(4608144809461831601,64,FLEN)
NAN_BOXED(9218732663161521579,64,FLEN)
NAN_BOXED(9217170681469817377,64,FLEN)
NAN_BOXED(4608144809461831601,64,FLEN)
NAN_BOXED(9218732663161521579,64,FLEN)
NAN_BOXED(9217170681469817377,64,FLEN)
NAN_BOXED(4608144809461831601,64,FLEN)
NAN_BOXED(9218732663161521579,64,FLEN)
NAN_BOXED(9217170681469817377,64,FLEN)
NAN_BOXED(4608144809461831601,64,FLEN)
NAN_BOXED(9218732663161521579,64,FLEN)
NAN_BOXED(9217170681469817377,64,FLEN)
NAN_BOXED(4608144809461831601,64,FLEN)
NAN_BOXED(9218732663161521579,64,FLEN)
NAN_BOXED(9217232125849914623,64,FLEN)
NAN_BOXED(4606318828784140195,64,FLEN)
NAN_BOXED(9216525421690395418,64,FLEN)
NAN_BOXED(9217232125849914623,64,FLEN)
NAN_BOXED(4606318828784140195,64,FLEN)
NAN_BOXED(9216525421690395418,64,FLEN)
NAN_BOXED(9217232125849914623,64,FLEN)
NAN_BOXED(4606318828784140195,64,FLEN)
NAN_BOXED(9216525421690395418,64,FLEN)
NAN_BOXED(9217232125849914623,64,FLEN)
NAN_BOXED(4606318828784140195,64,FLEN)
NAN_BOXED(9216525421690395418,64,FLEN)
NAN_BOXED(9217232125849914623,64,FLEN)
NAN_BOXED(4606318828784140195,64,FLEN)
NAN_BOXED(9216525421690395418,64,FLEN)
NAN_BOXED(9217237414850442593,64,FLEN)
NAN_BOXED(4602928686259343099,64,FLEN)
NAN_BOXED(9213143057602480131,64,FLEN)
NAN_BOXED(9217237414850442593,64,FLEN)
NAN_BOXED(4602928686259343099,64,FLEN)
NAN_BOXED(9213143057602480131,64,FLEN)
NAN_BOXED(9217237414850442593,64,FLEN)
NAN_BOXED(4602928686259343099,64,FLEN)
NAN_BOXED(9213143057602480131,64,FLEN)
NAN_BOXED(9217237414850442593,64,FLEN)
NAN_BOXED(4602928686259343099,64,FLEN)
NAN_BOXED(9213143057602480131,64,FLEN)
NAN_BOXED(9217237414850442593,64,FLEN)
NAN_BOXED(4602928686259343099,64,FLEN)
NAN_BOXED(9213143057602480131,64,FLEN)
NAN_BOXED(9217237944828998817,64,FLEN)
NAN_BOXED(4599360027026822128,64,FLEN)
NAN_BOXED(9210016324195934609,64,FLEN)
NAN_BOXED(9217237944828998817,64,FLEN)
NAN_BOXED(4599360027026822128,64,FLEN)
NAN_BOXED(9210016324195934609,64,FLEN)
NAN_BOXED(9217237944828998817,64,FLEN)
NAN_BOXED(4599360027026822128,64,FLEN)
NAN_BOXED(9210016324195934609,64,FLEN)
NAN_BOXED(9217237944828998817,64,FLEN)
NAN_BOXED(4599360027026822128,64,FLEN)
NAN_BOXED(9210016324195934609,64,FLEN)
NAN_BOXED(9217237944828998817,64,FLEN)
NAN_BOXED(4599360027026822128,64,FLEN)
NAN_BOXED(9210016324195934609,64,FLEN)
NAN_BOXED(9217240654717442729,64,FLEN)
NAN_BOXED(4607428161163128373,64,FLEN)
NAN_BOXED(9217643318244240576,64,FLEN)
NAN_BOXED(9217240654717442729,64,FLEN)
NAN_BOXED(4607428161163128373,64,FLEN)
NAN_BOXED(9217643318244240576,64,FLEN)
NAN_BOXED(9217240654717442729,64,FLEN)
NAN_BOXED(4607428161163128373,64,FLEN)
NAN_BOXED(9217643318244240576,64,FLEN)
NAN_BOXED(9217240654717442729,64,FLEN)
NAN_BOXED(4607428161163128373,64,FLEN)
NAN_BOXED(9217643318244240576,64,FLEN)
NAN_BOXED(9217240654717442729,64,FLEN)
NAN_BOXED(4607428161163128373,64,FLEN)
NAN_BOXED(9217643318244240576,64,FLEN)
NAN_BOXED(9217264478298068492,64,FLEN)
NAN_BOXED(4599909194709036421,64,FLEN)
NAN_BOXED(9210484455674455897,64,FLEN)
NAN_BOXED(9217264478298068492,64,FLEN)
NAN_BOXED(4599909194709036421,64,FLEN)
NAN_BOXED(9210484455674455897,64,FLEN)
NAN_BOXED(9217264478298068492,64,FLEN)
NAN_BOXED(4599909194709036421,64,FLEN)
NAN_BOXED(9210484455674455897,64,FLEN)
NAN_BOXED(9217264478298068492,64,FLEN)
NAN_BOXED(4599909194709036421,64,FLEN)
NAN_BOXED(9210484455674455897,64,FLEN)
NAN_BOXED(9217264478298068492,64,FLEN)
NAN_BOXED(4599909194709036421,64,FLEN)
NAN_BOXED(9210484455674455897,64,FLEN)
NAN_BOXED(9217302582941114735,64,FLEN)
NAN_BOXED(4598273419348035444,64,FLEN)
NAN_BOXED(9208457640251926923,64,FLEN)
NAN_BOXED(9217302582941114735,64,FLEN)
NAN_BOXED(4598273419348035444,64,FLEN)
NAN_BOXED(9208457640251926923,64,FLEN)
NAN_BOXED(9217302582941114735,64,FLEN)
NAN_BOXED(4598273419348035444,64,FLEN)
NAN_BOXED(9208457640251926923,64,FLEN)
NAN_BOXED(9217302582941114735,64,FLEN)
NAN_BOXED(4598273419348035444,64,FLEN)
NAN_BOXED(9208457640251926923,64,FLEN)
NAN_BOXED(9217302582941114735,64,FLEN)
NAN_BOXED(4598273419348035444,64,FLEN)
NAN_BOXED(9208457640251926923,64,FLEN)
NAN_BOXED(9217326903516768902,64,FLEN)
NAN_BOXED(4596185455518937039,64,FLEN)
NAN_BOXED(9206670477647603707,64,FLEN)
NAN_BOXED(9217326903516768902,64,FLEN)
NAN_BOXED(4596185455518937039,64,FLEN)
NAN_BOXED(9206670477647603707,64,FLEN)
NAN_BOXED(9217326903516768902,64,FLEN)
NAN_BOXED(4596185455518937039,64,FLEN)
NAN_BOXED(9206670477647603707,64,FLEN)
NAN_BOXED(9217326903516768902,64,FLEN)
NAN_BOXED(4596185455518937039,64,FLEN)
NAN_BOXED(9206670477647603707,64,FLEN)
NAN_BOXED(9217326903516768902,64,FLEN)
NAN_BOXED(4596185455518937039,64,FLEN)
NAN_BOXED(9206670477647603707,64,FLEN)
NAN_BOXED(9217426995139303327,64,FLEN)
NAN_BOXED(4607743853244925279,64,FLEN)
NAN_BOXED(9218370168828488437,64,FLEN)
NAN_BOXED(9217426995139303327,64,FLEN)
NAN_BOXED(4607743853244925279,64,FLEN)
NAN_BOXED(9218370168828488437,64,FLEN)
NAN_BOXED(9217426995139303327,64,FLEN)
NAN_BOXED(4607743853244925279,64,FLEN)
NAN_BOXED(9218370168828488437,64,FLEN)
NAN_BOXED(9217426995139303327,64,FLEN)
NAN_BOXED(4607743853244925279,64,FLEN)
NAN_BOXED(9218370168828488437,64,FLEN)
NAN_BOXED(9217426995139303327,64,FLEN)
NAN_BOXED(4607743853244925279,64,FLEN)
NAN_BOXED(9218370168828488437,64,FLEN)
NAN_BOXED(9217427283395626197,64,FLEN)
NAN_BOXED(4595049913182554175,64,FLEN)
NAN_BOXED(9205794827473161115,64,FLEN)
NAN_BOXED(9217427283395626197,64,FLEN)
NAN_BOXED(4595049913182554175,64,FLEN)
NAN_BOXED(9205794827473161115,64,FLEN)
NAN_BOXED(9217427283395626197,64,FLEN)
NAN_BOXED(4595049913182554175,64,FLEN)
NAN_BOXED(9205794827473161115,64,FLEN)
NAN_BOXED(9217427283395626197,64,FLEN)
NAN_BOXED(4595049913182554175,64,FLEN)
NAN_BOXED(9205794827473161115,64,FLEN)
NAN_BOXED(9217427283395626197,64,FLEN)
NAN_BOXED(4595049913182554175,64,FLEN)
NAN_BOXED(9205794827473161115,64,FLEN)
NAN_BOXED(9217431208227632191,64,FLEN)
NAN_BOXED(4603313879855927303,64,FLEN)
NAN_BOXED(9213995063720675897,64,FLEN)
NAN_BOXED(9217431208227632191,64,FLEN)
NAN_BOXED(4603313879855927303,64,FLEN)
NAN_BOXED(9213995063720675897,64,FLEN)
NAN_BOXED(9217431208227632191,64,FLEN)
NAN_BOXED(4603313879855927303,64,FLEN)
NAN_BOXED(9213995063720675897,64,FLEN)
NAN_BOXED(9217431208227632191,64,FLEN)
NAN_BOXED(4603313879855927303,64,FLEN)
NAN_BOXED(9213995063720675897,64,FLEN)
NAN_BOXED(9217431208227632191,64,FLEN)
NAN_BOXED(4603313879855927303,64,FLEN)
NAN_BOXED(9213995063720675897,64,FLEN)
NAN_BOXED(9217507782024218651,64,FLEN)
NAN_BOXED(4607947216515109585,64,FLEN)
NAN_BOXED(9218806312067484269,64,FLEN)
NAN_BOXED(9217507782024218651,64,FLEN)
NAN_BOXED(4607947216515109585,64,FLEN)
NAN_BOXED(9218806312067484269,64,FLEN)
NAN_BOXED(9217507782024218651,64,FLEN)
NAN_BOXED(4607947216515109585,64,FLEN)
NAN_BOXED(9218806312067484269,64,FLEN)
NAN_BOXED(9217507782024218651,64,FLEN)
NAN_BOXED(4607947216515109585,64,FLEN)
NAN_BOXED(9218806312067484269,64,FLEN)
NAN_BOXED(9217507782024218651,64,FLEN)
NAN_BOXED(4607947216515109585,64,FLEN)
NAN_BOXED(9218806312067484269,64,FLEN)
NAN_BOXED(9217541035453305947,64,FLEN)
NAN_BOXED(4606690660776931829,64,FLEN)
NAN_BOXED(9217121748400808457,64,FLEN)
NAN_BOXED(9217541035453305947,64,FLEN)
NAN_BOXED(4606690660776931829,64,FLEN)
NAN_BOXED(9217121748400808457,64,FLEN)
NAN_BOXED(9217541035453305947,64,FLEN)
NAN_BOXED(4606690660776931829,64,FLEN)
NAN_BOXED(9217121748400808457,64,FLEN)
NAN_BOXED(9217541035453305947,64,FLEN)
NAN_BOXED(4606690660776931829,64,FLEN)
NAN_BOXED(9217121748400808457,64,FLEN)
NAN_BOXED(9217541035453305947,64,FLEN)
NAN_BOXED(4606690660776931829,64,FLEN)
NAN_BOXED(9217121748400808457,64,FLEN)
NAN_BOXED(9217593634437226233,64,FLEN)
NAN_BOXED(4599748881162666051,64,FLEN)
NAN_BOXED(9210574775441319313,64,FLEN)
NAN_BOXED(9217593634437226233,64,FLEN)
NAN_BOXED(4599748881162666051,64,FLEN)
NAN_BOXED(9210574775441319313,64,FLEN)
NAN_BOXED(9217593634437226233,64,FLEN)
NAN_BOXED(4599748881162666051,64,FLEN)
NAN_BOXED(9210574775441319313,64,FLEN)
NAN_BOXED(9217593634437226233,64,FLEN)
NAN_BOXED(4599748881162666051,64,FLEN)
NAN_BOXED(9210574775441319313,64,FLEN)
NAN_BOXED(9217593634437226233,64,FLEN)
NAN_BOXED(4599748881162666051,64,FLEN)
NAN_BOXED(9210574775441319313,64,FLEN)
NAN_BOXED(9217637378542088669,64,FLEN)
NAN_BOXED(4605438744812321910,64,FLEN)
NAN_BOXED(9216132021143846146,64,FLEN)
NAN_BOXED(9217637378542088669,64,FLEN)
NAN_BOXED(4605438744812321910,64,FLEN)
NAN_BOXED(9216132021143846146,64,FLEN)
NAN_BOXED(9217637378542088669,64,FLEN)
NAN_BOXED(4605438744812321910,64,FLEN)
NAN_BOXED(9216132021143846146,64,FLEN)
NAN_BOXED(9217637378542088669,64,FLEN)
NAN_BOXED(4605438744812321910,64,FLEN)
NAN_BOXED(9216132021143846146,64,FLEN)
NAN_BOXED(9217637378542088669,64,FLEN)
NAN_BOXED(4605438744812321910,64,FLEN)
NAN_BOXED(9216132021143846146,64,FLEN)
NAN_BOXED(9217702345587430884,64,FLEN)
NAN_BOXED(4605113134183537445,64,FLEN)
NAN_BOXED(9215900955065858935,64,FLEN)
NAN_BOXED(9217702345587430884,64,FLEN)
NAN_BOXED(4605113134183537445,64,FLEN)
NAN_BOXED(9215900955065858935,64,FLEN)
NAN_BOXED(9217702345587430884,64,FLEN)
NAN_BOXED(4605113134183537445,64,FLEN)
NAN_BOXED(9215900955065858935,64,FLEN)
NAN_BOXED(9217702345587430884,64,FLEN)
NAN_BOXED(4605113134183537445,64,FLEN)
NAN_BOXED(9215900955065858935,64,FLEN)
NAN_BOXED(9217702345587430884,64,FLEN)
NAN_BOXED(4605113134183537445,64,FLEN)
NAN_BOXED(9215900955065858935,64,FLEN)
NAN_BOXED(9217738152473061548,64,FLEN)
NAN_BOXED(4606393051263539538,64,FLEN)
NAN_BOXED(9217047840155283898,64,FLEN)
NAN_BOXED(9217738152473061548,64,FLEN)
NAN_BOXED(4606393051263539538,64,FLEN)
NAN_BOXED(9217047840155283898,64,FLEN)
NAN_BOXED(9217738152473061548,64,FLEN)
NAN_BOXED(4606393051263539538,64,FLEN)
NAN_BOXED(9217047840155283898,64,FLEN)
NAN_BOXED(9217738152473061548,64,FLEN)
NAN_BOXED(4606393051263539538,64,FLEN)
NAN_BOXED(9217047840155283898,64,FLEN)
NAN_BOXED(9217738152473061548,64,FLEN)
NAN_BOXED(4606393051263539538,64,FLEN)
NAN_BOXED(9217047840155283898,64,FLEN)
NAN_BOXED(9217746841066929770,64,FLEN)
NAN_BOXED(4600127491958779753,64,FLEN)
NAN_BOXED(9211009611073098257,64,FLEN)
NAN_BOXED(9217746841066929770,64,FLEN)
NAN_BOXED(4600127491958779753,64,FLEN)
NAN_BOXED(9211009611073098257,64,FLEN)
NAN_BOXED(9217746841066929770,64,FLEN)
NAN_BOXED(4600127491958779753,64,FLEN)
NAN_BOXED(9211009611073098257,64,FLEN)
NAN_BOXED(9217746841066929770,64,FLEN)
NAN_BOXED(4600127491958779753,64,FLEN)
NAN_BOXED(9211009611073098257,64,FLEN)
NAN_BOXED(9217746841066929770,64,FLEN)
NAN_BOXED(4600127491958779753,64,FLEN)
NAN_BOXED(9211009611073098257,64,FLEN)
NAN_BOXED(9217813089214041207,64,FLEN)
NAN_BOXED(4607614560296626427,64,FLEN)
NAN_BOXED(9218576106618025507,64,FLEN)
NAN_BOXED(9217813089214041207,64,FLEN)
NAN_BOXED(4607614560296626427,64,FLEN)
NAN_BOXED(9218576106618025507,64,FLEN)
NAN_BOXED(9217813089214041207,64,FLEN)
NAN_BOXED(4607614560296626427,64,FLEN)
NAN_BOXED(9218576106618025507,64,FLEN)
NAN_BOXED(9217813089214041207,64,FLEN)
NAN_BOXED(4607614560296626427,64,FLEN)
NAN_BOXED(9218576106618025507,64,FLEN)
NAN_BOXED(9217813089214041207,64,FLEN)
NAN_BOXED(4607614560296626427,64,FLEN)
NAN_BOXED(9218576106618025507,64,FLEN)
NAN_BOXED(9217963511030473227,64,FLEN)
NAN_BOXED(4605985205990305092,64,FLEN)
NAN_BOXED(9216886578588072769,64,FLEN)
NAN_BOXED(9217963511030473227,64,FLEN)
NAN_BOXED(4605985205990305092,64,FLEN)
NAN_BOXED(9216886578588072769,64,FLEN)
NAN_BOXED(9217963511030473227,64,FLEN)
NAN_BOXED(4605985205990305092,64,FLEN)
NAN_BOXED(9216886578588072769,64,FLEN)
NAN_BOXED(9217963511030473227,64,FLEN)
NAN_BOXED(4605985205990305092,64,FLEN)
NAN_BOXED(9216886578588072769,64,FLEN)
NAN_BOXED(9217963511030473227,64,FLEN)
NAN_BOXED(4605985205990305092,64,FLEN)
NAN_BOXED(9216886578588072769,64,FLEN)
NAN_BOXED(9218011421095003577,64,FLEN)
NAN_BOXED(4606203408998295194,64,FLEN)
NAN_BOXED(9217125562024171849,64,FLEN)
NAN_BOXED(9218011421095003577,64,FLEN)
NAN_BOXED(4606203408998295194,64,FLEN)
NAN_BOXED(9217125562024171849,64,FLEN)
NAN_BOXED(9218011421095003577,64,FLEN)
NAN_BOXED(4606203408998295194,64,FLEN)
NAN_BOXED(9217125562024171849,64,FLEN)
NAN_BOXED(9218011421095003577,64,FLEN)
NAN_BOXED(4606203408998295194,64,FLEN)
NAN_BOXED(9217125562024171849,64,FLEN)
NAN_BOXED(9218011421095003577,64,FLEN)
NAN_BOXED(4606203408998295194,64,FLEN)
NAN_BOXED(9217125562024171849,64,FLEN)
NAN_BOXED(9218055781928000591,64,FLEN)
NAN_BOXED(4605920366860796249,64,FLEN)
NAN_BOXED(9216907595927294364,64,FLEN)
NAN_BOXED(9218055781928000591,64,FLEN)
NAN_BOXED(4605920366860796249,64,FLEN)
NAN_BOXED(9216907595927294364,64,FLEN)
NAN_BOXED(9218055781928000591,64,FLEN)
NAN_BOXED(4605920366860796249,64,FLEN)
NAN_BOXED(9216907595927294364,64,FLEN)
NAN_BOXED(9218055781928000591,64,FLEN)
NAN_BOXED(4605920366860796249,64,FLEN)
NAN_BOXED(9216907595927294364,64,FLEN)
NAN_BOXED(9218055781928000591,64,FLEN)
NAN_BOXED(4605920366860796249,64,FLEN)
NAN_BOXED(9216907595927294364,64,FLEN)
NAN_BOXED(9218080199533454273,64,FLEN)
NAN_BOXED(4602422258701848981,64,FLEN)
NAN_BOXED(9213342491545885521,64,FLEN)
NAN_BOXED(9218080199533454273,64,FLEN)
NAN_BOXED(4602422258701848981,64,FLEN)
NAN_BOXED(9213342491545885521,64,FLEN)
NAN_BOXED(9218080199533454273,64,FLEN)
NAN_BOXED(4602422258701848981,64,FLEN)
NAN_BOXED(9213342491545885521,64,FLEN)
NAN_BOXED(9218080199533454273,64,FLEN)
NAN_BOXED(4602422258701848981,64,FLEN)
NAN_BOXED(9213342491545885521,64,FLEN)
NAN_BOXED(9218080199533454273,64,FLEN)
NAN_BOXED(4602422258701848981,64,FLEN)
NAN_BOXED(9213342491545885521,64,FLEN)
NAN_BOXED(9218279752262600941,64,FLEN)
NAN_BOXED(4592858329274876410,64,FLEN)
NAN_BOXED(9204008817104319935,64,FLEN)
NAN_BOXED(9218279752262600941,64,FLEN)
NAN_BOXED(4592858329274876410,64,FLEN)
NAN_BOXED(9204008817104319935,64,FLEN)
NAN_BOXED(9218279752262600941,64,FLEN)
NAN_BOXED(4592858329274876410,64,FLEN)
NAN_BOXED(9204008817104319935,64,FLEN)
NAN_BOXED(9218279752262600941,64,FLEN)
NAN_BOXED(4592858329274876410,64,FLEN)
NAN_BOXED(9204008817104319935,64,FLEN)
NAN_BOXED(9218279752262600941,64,FLEN)
NAN_BOXED(4592858329274876410,64,FLEN)
NAN_BOXED(9204008817104319935,64,FLEN)
NAN_BOXED(9218301174638476198,64,FLEN)
NAN_BOXED(4607427620826963429,64,FLEN)
NAN_BOXED(9218760693634164858,64,FLEN)
NAN_BOXED(9218301174638476198,64,FLEN)
NAN_BOXED(4607427620826963429,64,FLEN)
NAN_BOXED(9218760693634164858,64,FLEN)
NAN_BOXED(9218301174638476198,64,FLEN)
NAN_BOXED(4607427620826963429,64,FLEN)
NAN_BOXED(9218760693634164858,64,FLEN)
NAN_BOXED(9218301174638476198,64,FLEN)
NAN_BOXED(4607427620826963429,64,FLEN)
NAN_BOXED(9218760693634164858,64,FLEN)
NAN_BOXED(9218301174638476198,64,FLEN)
NAN_BOXED(4607427620826963429,64,FLEN)
NAN_BOXED(9218760693634164858,64,FLEN)
NAN_BOXED(9218347646265463715,64,FLEN)
NAN_BOXED(4598634998588917103,64,FLEN)
NAN_BOXED(9210034037381520559,64,FLEN)
NAN_BOXED(9218347646265463715,64,FLEN)
NAN_BOXED(4598634998588917103,64,FLEN)
NAN_BOXED(9210034037381520559,64,FLEN)
NAN_BOXED(9218347646265463715,64,FLEN)
NAN_BOXED(4598634998588917103,64,FLEN)
NAN_BOXED(9210034037381520559,64,FLEN)
NAN_BOXED(9218347646265463715,64,FLEN)
NAN_BOXED(4598634998588917103,64,FLEN)
NAN_BOXED(9210034037381520559,64,FLEN)
NAN_BOXED(9218347646265463715,64,FLEN)
NAN_BOXED(4598634998588917103,64,FLEN)
NAN_BOXED(9210034037381520559,64,FLEN)
NAN_BOXED(9218445980897149143,64,FLEN)
NAN_BOXED(4604700691679246351,64,FLEN)
NAN_BOXED(9216080651926622881,64,FLEN)
NAN_BOXED(9218445980897149143,64,FLEN)
NAN_BOXED(4604700691679246351,64,FLEN)
NAN_BOXED(9216080651926622881,64,FLEN)
NAN_BOXED(9218445980897149143,64,FLEN)
NAN_BOXED(4604700691679246351,64,FLEN)
NAN_BOXED(9216080651926622881,64,FLEN)
NAN_BOXED(9218445980897149143,64,FLEN)
NAN_BOXED(4604700691679246351,64,FLEN)
NAN_BOXED(9216080651926622881,64,FLEN)
NAN_BOXED(9218445980897149143,64,FLEN)
NAN_BOXED(4604700691679246351,64,FLEN)
NAN_BOXED(9216080651926622881,64,FLEN)
NAN_BOXED(9218463118947379008,64,FLEN)
NAN_BOXED(4600549831234560271,64,FLEN)
NAN_BOXED(9211926334495060267,64,FLEN)
NAN_BOXED(9218463118947379008,64,FLEN)
NAN_BOXED(4600549831234560271,64,FLEN)
NAN_BOXED(9211926334495060267,64,FLEN)
NAN_BOXED(9218463118947379008,64,FLEN)
NAN_BOXED(4600549831234560271,64,FLEN)
NAN_BOXED(9211926334495060267,64,FLEN)
NAN_BOXED(9218463118947379008,64,FLEN)
NAN_BOXED(4600549831234560271,64,FLEN)
NAN_BOXED(9211926334495060267,64,FLEN)
NAN_BOXED(9218463118947379008,64,FLEN)
NAN_BOXED(4600549831234560271,64,FLEN)
NAN_BOXED(9211926334495060267,64,FLEN)
NAN_BOXED(9218476759855434540,64,FLEN)
NAN_BOXED(4602094422454982639,64,FLEN)
NAN_BOXED(9213414175957053775,64,FLEN)
NAN_BOXED(9218476759855434540,64,FLEN)
NAN_BOXED(4602094422454982639,64,FLEN)
NAN_BOXED(9213414175957053775,64,FLEN)
NAN_BOXED(9218476759855434540,64,FLEN)
NAN_BOXED(4602094422454982639,64,FLEN)
NAN_BOXED(9213414175957053775,64,FLEN)
NAN_BOXED(9218476759855434540,64,FLEN)
NAN_BOXED(4602094422454982639,64,FLEN)
NAN_BOXED(9213414175957053775,64,FLEN)
NAN_BOXED(9218476759855434540,64,FLEN)
NAN_BOXED(4602094422454982639,64,FLEN)
NAN_BOXED(9213414175957053775,64,FLEN)
NAN_BOXED(9218487713759250974,64,FLEN)
NAN_BOXED(4594845499167866110,64,FLEN)
NAN_BOXED(9206291537398589375,64,FLEN)
NAN_BOXED(9218487713759250974,64,FLEN)
NAN_BOXED(4594845499167866110,64,FLEN)
NAN_BOXED(9206291537398589375,64,FLEN)
NAN_BOXED(9218487713759250974,64,FLEN)
NAN_BOXED(4594845499167866110,64,FLEN)
NAN_BOXED(9206291537398589375,64,FLEN)
NAN_BOXED(9218487713759250974,64,FLEN)
NAN_BOXED(4594845499167866110,64,FLEN)
NAN_BOXED(9206291537398589375,64,FLEN)
NAN_BOXED(9218487713759250974,64,FLEN)
NAN_BOXED(4594845499167866110,64,FLEN)
NAN_BOXED(9206291537398589375,64,FLEN)
NAN_BOXED(9218606239253515660,64,FLEN)
NAN_BOXED(4604202419467268389,64,FLEN)
NAN_BOXED(9215712987173174546,64,FLEN)
NAN_BOXED(9218606239253515660,64,FLEN)
NAN_BOXED(4604202419467268389,64,FLEN)
NAN_BOXED(9215712987173174546,64,FLEN)
NAN_BOXED(9218606239253515660,64,FLEN)
NAN_BOXED(4604202419467268389,64,FLEN)
NAN_BOXED(9215712987173174546,64,FLEN)
NAN_BOXED(9218606239253515660,64,FLEN)
NAN_BOXED(4604202419467268389,64,FLEN)
NAN_BOXED(9215712987173174546,64,FLEN)
NAN_BOXED(9218606239253515660,64,FLEN)
NAN_BOXED(4604202419467268389,64,FLEN)
NAN_BOXED(9215712987173174546,64,FLEN)
NAN_BOXED(9218613148781848068,64,FLEN)
NAN_BOXED(4601010413622674386,64,FLEN)
NAN_BOXED(9212488430740868481,64,FLEN)
NAN_BOXED(9218613148781848068,64,FLEN)
NAN_BOXED(4601010413622674386,64,FLEN)
NAN_BOXED(9212488430740868481,64,FLEN)
NAN_BOXED(9218613148781848068,64,FLEN)
NAN_BOXED(4601010413622674386,64,FLEN)
NAN_BOXED(9212488430740868481,64,FLEN)
NAN_BOXED(9218613148781848068,64,FLEN)
NAN_BOXED(4601010413622674386,64,FLEN)
NAN_BOXED(9212488430740868481,64,FLEN)
NAN_BOXED(9218613148781848068,64,FLEN)
NAN_BOXED(4601010413622674386,64,FLEN)
NAN_BOXED(9212488430740868481,64,FLEN)
NAN_BOXED(9218621847114910869,64,FLEN)
NAN_BOXED(4603241518510092941,64,FLEN)
NAN_BOXED(9214788836860316791,64,FLEN)
NAN_BOXED(9218621847114910869,64,FLEN)
NAN_BOXED(4603241518510092941,64,FLEN)
NAN_BOXED(9214788836860316791,64,FLEN)
NAN_BOXED(9218621847114910869,64,FLEN)
NAN_BOXED(4603241518510092941,64,FLEN)
NAN_BOXED(9214788836860316791,64,FLEN)
NAN_BOXED(9218621847114910869,64,FLEN)
NAN_BOXED(4603241518510092941,64,FLEN)
NAN_BOXED(9214788836860316791,64,FLEN)
NAN_BOXED(9218621847114910869,64,FLEN)
NAN_BOXED(4603241518510092941,64,FLEN)
NAN_BOXED(9214788836860316791,64,FLEN)
NAN_BOXED(9218654562232197957,64,FLEN)
NAN_BOXED(4587037375882827190,64,FLEN)
NAN_BOXED(9198560111241487807,64,FLEN)
NAN_BOXED(9218654562232197957,64,FLEN)
NAN_BOXED(4587037375882827190,64,FLEN)
NAN_BOXED(9198560111241487807,64,FLEN)
NAN_BOXED(9218654562232197957,64,FLEN)
NAN_BOXED(4587037375882827190,64,FLEN)
NAN_BOXED(9198560111241487807,64,FLEN)
NAN_BOXED(9218654562232197957,64,FLEN)
NAN_BOXED(4587037375882827190,64,FLEN)
NAN_BOXED(9198560111241487807,64,FLEN)
NAN_BOXED(9218654562232197957,64,FLEN)
NAN_BOXED(4587037375882827190,64,FLEN)
NAN_BOXED(9198560111241487807,64,FLEN)
NAN_BOXED(9218689868128515370,64,FLEN)
NAN_BOXED(4593344031184727985,64,FLEN)
NAN_BOXED(9204857975009820911,64,FLEN)
NAN_BOXED(9218689868128515370,64,FLEN)
NAN_BOXED(4593344031184727985,64,FLEN)
NAN_BOXED(9204857975009820911,64,FLEN)
NAN_BOXED(9218689868128515370,64,FLEN)
NAN_BOXED(4593344031184727985,64,FLEN)
NAN_BOXED(9204857975009820911,64,FLEN)
NAN_BOXED(9218689868128515370,64,FLEN)
NAN_BOXED(4593344031184727985,64,FLEN)
NAN_BOXED(9204857975009820911,64,FLEN)
NAN_BOXED(9218689868128515370,64,FLEN)
NAN_BOXED(4593344031184727985,64,FLEN)
NAN_BOXED(9204857975009820911,64,FLEN)
NAN_BOXED(9218691048935898577,64,FLEN)
NAN_BOXED(4604214300014053202,64,FLEN)
NAN_BOXED(9215781384449161082,64,FLEN)
NAN_BOXED(9218691048935898577,64,FLEN)
NAN_BOXED(4604214300014053202,64,FLEN)
NAN_BOXED(9215781384449161082,64,FLEN)
NAN_BOXED(9218691048935898577,64,FLEN)
NAN_BOXED(4604214300014053202,64,FLEN)
NAN_BOXED(9215781384449161082,64,FLEN)
NAN_BOXED(9218691048935898577,64,FLEN)
NAN_BOXED(4604214300014053202,64,FLEN)
NAN_BOXED(9215781384449161082,64,FLEN)
NAN_BOXED(9218691048935898577,64,FLEN)
NAN_BOXED(4604214300014053202,64,FLEN)
NAN_BOXED(9215781384449161082,64,FLEN)
NAN_BOXED(9218730889053867299,64,FLEN)
NAN_BOXED(4594636506537442819,64,FLEN)
NAN_BOXED(9206239016176581819,64,FLEN)
NAN_BOXED(9218730889053867299,64,FLEN)
NAN_BOXED(4594636506537442819,64,FLEN)
NAN_BOXED(9206239016176581819,64,FLEN)
NAN_BOXED(9218730889053867299,64,FLEN)
NAN_BOXED(4594636506537442819,64,FLEN)
NAN_BOXED(9206239016176581819,64,FLEN)
NAN_BOXED(9218730889053867299,64,FLEN)
NAN_BOXED(4594636506537442819,64,FLEN)
NAN_BOXED(9206239016176581819,64,FLEN)
NAN_BOXED(9218730889053867299,64,FLEN)
NAN_BOXED(4594636506537442819,64,FLEN)
NAN_BOXED(9206239016176581819,64,FLEN)
NAN_BOXED(9218777207402126438,64,FLEN)
NAN_BOXED(4605749935404232945,64,FLEN)
NAN_BOXED(9217359232979244236,64,FLEN)
NAN_BOXED(9218777207402126438,64,FLEN)
NAN_BOXED(4605749935404232945,64,FLEN)
NAN_BOXED(9217359232979244236,64,FLEN)
NAN_BOXED(9218777207402126438,64,FLEN)
NAN_BOXED(4605749935404232945,64,FLEN)
NAN_BOXED(9217359232979244236,64,FLEN)
NAN_BOXED(9218777207402126438,64,FLEN)
NAN_BOXED(4605749935404232945,64,FLEN)
NAN_BOXED(9217359232979244236,64,FLEN)
NAN_BOXED(9218777207402126438,64,FLEN)
NAN_BOXED(4605749935404232945,64,FLEN)
NAN_BOXED(9217359232979244236,64,FLEN)
NAN_BOXED(9164424625506926591,64,FLEN)
NAN_BOXED(4648914789082017225,64,FLEN)
NAN_BOXED(9206303932259106167,64,FLEN)
NAN_BOXED(9164424625506926591,64,FLEN)
NAN_BOXED(4648914789082017225,64,FLEN)
NAN_BOXED(9206303932259106167,64,FLEN)
NAN_BOXED(9164424625506926591,64,FLEN)
NAN_BOXED(4648914789082017225,64,FLEN)
NAN_BOXED(9206303932259106167,64,FLEN)
NAN_BOXED(9164424625506926591,64,FLEN)
NAN_BOXED(4648914789082017225,64,FLEN)
NAN_BOXED(9206303932259106167,64,FLEN)
NAN_BOXED(9174258341432718335,64,FLEN)
NAN_BOXED(4644988421128352304,64,FLEN)
NAN_BOXED(9212232412118634191,64,FLEN)
NAN_BOXED(9174258341432718335,64,FLEN)
NAN_BOXED(4644988421128352304,64,FLEN)
NAN_BOXED(9212232412118634191,64,FLEN)
NAN_BOXED(9174258341432718335,64,FLEN)
NAN_BOXED(4644988421128352304,64,FLEN)
NAN_BOXED(9212232412118634191,64,FLEN)
NAN_BOXED(9174258341432718335,64,FLEN)
NAN_BOXED(4644988421128352304,64,FLEN)
NAN_BOXED(9212232412118634191,64,FLEN)
NAN_BOXED(9174258341432718335,64,FLEN)
NAN_BOXED(4644988421128352304,64,FLEN)
NAN_BOXED(9212232412118634191,64,FLEN)
NAN_BOXED(9182869883444329087,64,FLEN)
NAN_BOXED(4641354287497260511,64,FLEN)
NAN_BOXED(9217059525458748881,64,FLEN)
NAN_BOXED(9182869883444329087,64,FLEN)
NAN_BOXED(4641354287497260511,64,FLEN)
NAN_BOXED(9217059525458748881,64,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_2:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_3:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_4:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_5:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_6:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_7:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_8:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_9:
    .fill 214*((SIGALIGN)/4),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*XLEN/32,4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

RVMODEL_DATA_END
