
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 15:29:07 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32D/fnmsub.d.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fnmsub.d instruction of the RISC-V RV32FD_Zicsr,RV64FD_Zicsr extension for the fnmsub.d_b2 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IFD_Zicsr,RV64IFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*D.*);def TEST_CASE_1=True;",fnmsub.d_b2)

RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_0:
// rs1 == rs3 != rs2 and rs1 == rs3 != rd and rd != rs2, rs1==f13, rs2==f25, rs3==f13, rd==f7,fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000001 and fs2 == 0 and fe2 == 0x408 and fm2 == 0xed80000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000026 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f13; op2:f25; op3:f13; dest:f7; op1val:0x1; op2val:0x408ed80000000000;
op3val:0x1; valaddr_reg:x3; val_offset:0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f7, f13, f25, f13, dyn, 0, 0, x3, 0*FLEN/8, x4, x1, x2)

inst_1:
// rs1 == rs2 == rs3 != rd, rs1==f21, rs2==f21, rs3==f21, rd==f16,fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000001 and fs2 == 1 and fe2 == 0x413 and fm2 == 0x0005c00000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000005b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f21; op2:f21; op3:f21; dest:f16; op1val:0x1; op2val:0x1;
op3val:0x1; valaddr_reg:x3; val_offset:3*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f16, f21, f21, f21, dyn, 0, 0, x3, 3*FLEN/8, x4, x1, x2)

inst_2:
// rs1 == rs2 == rd != rs3, rs1==f17, rs2==f17, rs3==f19, rd==f17,fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000003 and fs2 == 1 and fe2 == 0x413 and fm2 == 0x55571aaaaaaab and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000054 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f17; op2:f17; op3:f19; dest:f17; op1val:0x3; op2val:0x3;
op3val:0x54; valaddr_reg:x3; val_offset:6*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f17, f17, f17, f19, dyn, 0, 0, x3, 6*FLEN/8, x4, x1, x2)

inst_3:
// rs1 == rd != rs2 and rs1 == rd != rs3 and rs3 != rs2, rs1==f5, rs2==f12, rs3==f28, rd==f5,fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000004 and fs2 == 1 and fe2 == 0x404 and fm2 == 0x7600000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000003b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f5; op2:f12; op3:f28; dest:f5; op1val:0x4; op2val:0xc047600000000000;
op3val:0x3b; valaddr_reg:x3; val_offset:9*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f5, f5, f12, f28, dyn, 0, 0, x3, 9*FLEN/8, x4, x1, x2)

inst_4:
// rs2 == rs3 != rs1 and rs2 == rs3 != rd and rd != rs1, rs1==f10, rs2==f30, rs3==f30, rd==f29,fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000005 and fs2 == 0 and fe2 == 0x430 and fm2 == 0x99999997fffed and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000000b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f10; op2:f30; op3:f30; dest:f29; op1val:0x5; op2val:0x43099999997fffed;
op3val:0x43099999997fffed; valaddr_reg:x3; val_offset:12*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f29, f10, f30, f30, dyn, 0, 0, x3, 12*FLEN/8, x4, x1, x2)

inst_5:
// rd == rs2 == rs3 != rs1, rs1==f31, rs2==f6, rs3==f6, rd==f6,fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000006 and fs2 == 1 and fe2 == 0x400 and fm2 == 0x9555555555555 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000000b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f31; op2:f6; op3:f6; dest:f6; op1val:0x6; op2val:0xc009555555555555;
op3val:0xc009555555555555; valaddr_reg:x3; val_offset:15*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f6, f31, f6, f6, dyn, 0, 0, x3, 15*FLEN/8, x4, x1, x2)

inst_6:
// rs1 == rd == rs3 != rs2, rs1==f3, rs2==f8, rs3==f3, rd==f3,fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000007 and fs2 == 1 and fe2 == 0x40c and fm2 == 0x24b1249249249 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000001a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f3; op2:f8; op3:f3; dest:f3; op1val:0x7; op2val:0xc0c24b1249249249;
op3val:0x7; valaddr_reg:x3; val_offset:18*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f3, f3, f8, f3, dyn, 0, 0, x3, 18*FLEN/8, x4, x1, x2)

inst_7:
// rs2 == rd != rs1 and rs2 == rd != rs3 and rs3 != rs1, rs1==f26, rs2==f27, rs3==f31, rd==f27,fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000007 and fs2 == 1 and fe2 == 0x40d and fm2 == 0x24b4000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000003a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f26; op2:f27; op3:f31; dest:f27; op1val:0x7; op2val:0xc0d24b4000000000;
op3val:0x3a; valaddr_reg:x3; val_offset:21*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f27, f26, f27, f31, dyn, 0, 0, x3, 21*FLEN/8, x4, x1, x2)

inst_8:
// rs3 == rd != rs1 and rs3 == rd != rs2 and rs2 != rs1, rs1==f7, rs2==f13, rs3==f8, rd==f8,fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000009 and fs2 == 0 and fe2 == 0x42f and fm2 == 0xc71c71c638dee and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000029 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f7; op2:f13; op3:f8; dest:f8; op1val:0x9; op2val:0x42fc71c71c638dee;
op3val:0x29; valaddr_reg:x3; val_offset:24*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f8, f7, f13, f8, dyn, 0, 0, x3, 24*FLEN/8, x4, x1, x2)

inst_9:
// rs1 != rs2 and rs1 != rd and rs1 != rs3 and rs2 != rs3 and rs2 != rd and rs3 != rd, rs1==f9, rs2==f0, rs3==f2, rd==f20,fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000009 and fs2 == 1 and fe2 == 0x42f and fm2 == 0xc71c71c7155c5 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000040 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f9; op2:f0; op3:f2; dest:f20; op1val:0x9; op2val:0xc2fc71c71c7155c5;
op3val:0x40; valaddr_reg:x3; val_offset:27*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f20, f9, f0, f2, dyn, 0, 0, x3, 27*FLEN/8, x4, x1, x2)

inst_10:
// rs1 == rs2 == rs3 == rd, rs1==f1, rs2==f1, rs3==f1, rd==f1,fs1 == 0 and fe1 == 0x000 and fm1 == 0x000000000000b and fs2 == 0 and fe2 == 0x407 and fm2 == 0x6bba2e8ba2e8c and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000060 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f1; op2:f1; op3:f1; dest:f1; op1val:0xb; op2val:0xb;
op3val:0xb; valaddr_reg:x3; val_offset:30*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f1, f1, f1, f1, dyn, 0, 0, x3, 30*FLEN/8, x4, x1, x2)

inst_11:
// rs1 == rs2 != rs3 and rs1 == rs2 != rd and rd != rs3, rs1==f24, rs2==f24, rs3==f5, rd==f2,fs1 == 0 and fe1 == 0x000 and fm1 == 0x000000000000b and fs2 == 0 and fe2 == 0x42f and fm2 == 0x745d1745d1610 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000054 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f24; op2:f24; op3:f5; dest:f2; op1val:0xb; op2val:0xb;
op3val:0x54; valaddr_reg:x3; val_offset:33*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f2, f24, f24, f5, dyn, 0, 0, x3, 33*FLEN/8, x4, x1, x2)

inst_12:
// rs1==f27, rs2==f20, rs3==f9, rd==f30,fs1 == 0 and fe1 == 0x000 and fm1 == 0x000000000000c and fs2 == 0 and fe2 == 0x42f and fm2 == 0x5555555552a98 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000000d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f27; op2:f20; op3:f9; dest:f30; op1val:0xc; op2val:0x42f5555555552a98;
op3val:0xd; valaddr_reg:x3; val_offset:36*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f30, f27, f20, f9, dyn, 0, 0, x3, 36*FLEN/8, x4, x1, x2)

inst_13:
// rs1==f18, rs2==f3, rs3==f14, rd==f23,fs1 == 0 and fe1 == 0x000 and fm1 == 0x000000000000c and fs2 == 1 and fe2 == 0x407 and fm2 == 0x5d15555555555 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000005c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f18; op2:f3; op3:f14; dest:f23; op1val:0xc; op2val:0xc075d15555555555;
op3val:0x5c; valaddr_reg:x3; val_offset:39*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f23, f18, f3, f14, dyn, 0, 0, x3, 39*FLEN/8, x4, x1, x2)

inst_14:
// rs1==f12, rs2==f31, rs3==f17, rd==f15,fs1 == 0 and fe1 == 0x000 and fm1 == 0x000000000000d and fs2 == 1 and fe2 == 0x40e and fm2 == 0x3b1513b13b13b and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000009 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f12; op2:f31; op3:f17; dest:f15; op1val:0xd; op2val:0xc0e3b1513b13b13b;
op3val:0x9; valaddr_reg:x3; val_offset:42*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f15, f12, f31, f17, dyn, 0, 0, x3, 42*FLEN/8, x4, x1, x2)

inst_15:
// rs1==f15, rs2==f14, rs3==f7, rd==f26,fs1 == 0 and fe1 == 0x000 and fm1 == 0x000000000000e and fs2 == 0 and fe2 == 0x411 and fm2 == 0x2491d6db6db6e and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000001a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f15; op2:f14; op3:f7; dest:f26; op1val:0xe; op2val:0x4112491d6db6db6e;
op3val:0x1a; valaddr_reg:x3; val_offset:45*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f26, f15, f14, f7, dyn, 0, 0, x3, 45*FLEN/8, x4, x1, x2)

inst_16:
// rs1==f23, rs2==f16, rs3==f24, rd==f14,fs1 == 0 and fe1 == 0x000 and fm1 == 0x000000000000e and fs2 == 1 and fe2 == 0x402 and fm2 == 0xd249249249249 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000004b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f23; op2:f16; op3:f24; dest:f14; op1val:0xe; op2val:0xc02d249249249249;
op3val:0x4b; valaddr_reg:x3; val_offset:48*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f14, f23, f16, f24, dyn, 0, 0, x3, 48*FLEN/8, x4, x1, x2)

inst_17:
// rs1==f6, rs2==f4, rs3==f29, rd==f0,fs1 == 0 and fe1 == 0x000 and fm1 == 0x000000000000f and fs2 == 0 and fe2 == 0x42f and fm2 == 0x1111111111096 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000032 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f6; op2:f4; op3:f29; dest:f0; op1val:0xf; op2val:0x42f1111111111096;
op3val:0x32; valaddr_reg:x3; val_offset:51*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f0, f6, f4, f29, dyn, 0, 0, x3, 51*FLEN/8, x4, x1, x2)

inst_18:
// rs1==f30, rs2==f22, rs3==f16, rd==f19,fs1 == 0 and fe1 == 0x000 and fm1 == 0x000000000000f and fs2 == 1 and fe2 == 0x40d and fm2 == 0x1115111111111 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000000e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f22; op3:f16; dest:f19; op1val:0xf; op2val:0xc0d1115111111111;
op3val:0xe; valaddr_reg:x3; val_offset:54*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f19, f30, f22, f16, dyn, 0, 0, x3, 54*FLEN/8, x4, x1, x2)

inst_19:
// rs1==f22, rs2==f7, rs3==f23, rd==f24,fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000010 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000000b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f22; op2:f7; op3:f23; dest:f24; op1val:0x10; op2val:0xbff0000000000000;
op3val:0xb; valaddr_reg:x3; val_offset:57*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f24, f22, f7, f23, dyn, 0, 0, x3, 57*FLEN/8, x4, x1, x2)

inst_20:
// rs1==f16, rs2==f19, rs3==f12, rd==f21,fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000011 and fs2 == 0 and fe2 == 0x42e and fm2 == 0xe1e1e1e1a59c6 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000004e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f16; op2:f19; op3:f12; dest:f21; op1val:0x11; op2val:0x42ee1e1e1e1a59c6;
op3val:0x4e; valaddr_reg:x3; val_offset:60*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f21, f16, f19, f12, dyn, 0, 0, x3, 60*FLEN/8, x4, x1, x2)

inst_21:
// rs1==f19, rs2==f2, rs3==f11, rd==f25,fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000012 and fs2 == 0 and fe2 == 0x42e and fm2 == 0xc71c71c38e2f7 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000054 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f19; op2:f2; op3:f11; dest:f25; op1val:0x12; op2val:0x42ec71c71c38e2f7;
op3val:0x54; valaddr_reg:x3; val_offset:63*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f25, f19, f2, f11, dyn, 0, 0, x3, 63*FLEN/8, x4, x1, x2)

inst_22:
// rs1==f29, rs2==f28, rs3==f18, rd==f13,fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000012 and fs2 == 0 and fe2 == 0x42e and fm2 == 0xc71c71c71bff9 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f29; op2:f28; op3:f18; dest:f13; op1val:0x12; op2val:0x42ec71c71c71bff9;
op3val:0x3; valaddr_reg:x3; val_offset:66*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f13, f29, f28, f18, dyn, 0, 0, x3, 66*FLEN/8, x4, x1, x2)

inst_23:
// rs1==f0, rs2==f9, rs3==f25, rd==f12,fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000012 and fs2 == 1 and fe2 == 0x400 and fm2 == 0x5555555555555 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000020 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f0; op2:f9; op3:f25; dest:f12; op1val:0x12; op2val:0xc005555555555555;
op3val:0x20; valaddr_reg:x3; val_offset:69*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f12, f0, f9, f25, dyn, 0, 0, x3, 69*FLEN/8, x4, x1, x2)

inst_24:
// rs1==f20, rs2==f11, rs3==f27, rd==f18,fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000015 and fs2 == 0 and fe2 == 0x408 and fm2 == 0x83c30c30c30c3 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000062 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f20; op2:f11; op3:f27; dest:f18; op1val:0x15; op2val:0x40883c30c30c30c3;
op3val:0x62; valaddr_reg:x3; val_offset:72*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f18, f20, f11, f27, dyn, 0, 0, x3, 72*FLEN/8, x4, x1, x2)

inst_25:
// rs1==f2, rs2==f10, rs3==f20, rd==f4,fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000016 and fs2 == 0 and fe2 == 0x42e and fm2 == 0x745d1745d1566 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000049 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f2; op2:f10; op3:f20; dest:f4; op1val:0x16; op2val:0x42e745d1745d1566;
op3val:0x49; valaddr_reg:x3; val_offset:75*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f4, f2, f10, f20, dyn, 0, 0, x3, 75*FLEN/8, x4, x1, x2)

inst_26:
// rs1==f25, rs2==f5, rs3==f15, rd==f10,fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000017 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0xe9bd37a6f4dea and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000002c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f25; op2:f5; op3:f15; dest:f10; op1val:0x17; op2val:0xbffe9bd37a6f4dea;
op3val:0x2c; valaddr_reg:x3; val_offset:78*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f10, f25, f5, f15, dyn, 0, 0, x3, 78*FLEN/8, x4, x1, x2)

inst_27:
// rs1==f11, rs2==f23, rs3==f4, rd==f31,fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000019 and fs2 == 0 and fe2 == 0x402 and fm2 == 0x2f5c28f5c28f6 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000013 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f11; op2:f23; op3:f4; dest:f31; op1val:0x19; op2val:0x4022f5c28f5c28f6;
op3val:0x13; valaddr_reg:x3; val_offset:81*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f11, f23, f4, dyn, 0, 0, x3, 81*FLEN/8, x4, x1, x2)

inst_28:
// rs1==f14, rs2==f29, rs3==f26, rd==f28,fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000019 and fs2 == 1 and fe2 == 0x400 and fm2 == 0xe666666666666 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000005b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f14; op2:f29; op3:f26; dest:f28; op1val:0x19; op2val:0xc00e666666666666;
op3val:0x5b; valaddr_reg:x3; val_offset:84*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f28, f14, f29, f26, dyn, 0, 0, x3, 84*FLEN/8, x4, x1, x2)

inst_29:
// rs1==f28, rs2==f15, rs3==f0, rd==f11,fs1 == 0 and fe1 == 0x000 and fm1 == 0x000000000001a and fs2 == 0 and fe2 == 0x42e and fm2 == 0x3b13b13b13ac4 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000030 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f28; op2:f15; op3:f0; dest:f11; op1val:0x1a; op2val:0x42e3b13b13b13ac4;
op3val:0x30; valaddr_reg:x3; val_offset:87*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f11, f28, f15, f0, dyn, 0, 0, x3, 87*FLEN/8, x4, x1, x2)

inst_30:
// rs1==f8, rs2==f26, rs3==f10, rd==f22,fs1 == 0 and fe1 == 0x000 and fm1 == 0x000000000001a and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x3b13b13b13b14 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000041 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f8; op2:f26; op3:f10; dest:f22; op1val:0x1a; op2val:0xbff3b13b13b13b14;
op3val:0x41; valaddr_reg:x3; val_offset:90*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f22, f8, f26, f10, dyn, 0, 0, x3, 90*FLEN/8, x4, x1, x2)

inst_31:
// rs1==f4, rs2==f18, rs3==f22, rd==f9,fs1 == 0 and fe1 == 0x000 and fm1 == 0x000000000001a and fs2 == 1 and fe2 == 0x400 and fm2 == 0xac4ec4ec4ec4f and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000004e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f4; op2:f18; op3:f22; dest:f9; op1val:0x1a; op2val:0xc00ac4ec4ec4ec4f;
op3val:0x4e; valaddr_reg:x3; val_offset:93*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f9, f4, f18, f22, dyn, 0, 0, x3, 93*FLEN/8, x4, x1, x2)

inst_32:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x000000000001c and fs2 == 1 and fe2 == 0x40d and fm2 == 0x249fb6db6db6e and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000005d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x1c; op2val:0xc0d249fb6db6db6e;
op3val:0x5d; valaddr_reg:x3; val_offset:96*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 96*FLEN/8, x4, x1, x2)

inst_33:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x000000000001d and fs2 == 0 and fe2 == 0x408 and fm2 == 0x191a7b9611a7c and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000051 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x1d; op2val:0x408191a7b9611a7c;
op3val:0x51; valaddr_reg:x3; val_offset:99*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 99*FLEN/8, x4, x1, x2)

inst_34:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x000000000001d and fs2 == 1 and fe2 == 0x400 and fm2 == 0x658469ee5846a and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000040 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x1d; op2val:0xc00658469ee5846a;
op3val:0x40; valaddr_reg:x3; val_offset:102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 102*FLEN/8, x4, x1, x2)

inst_35:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x000000000001e and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x8888888888889 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000002a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x1e; op2val:0x3fe8888888888889;
op3val:0x2a; valaddr_reg:x3; val_offset:105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 105*FLEN/8, x4, x1, x2)

inst_36:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x000000000001e and fs2 == 1 and fe2 == 0x3ff and fm2 == 0xa222222222222 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000030 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x1e; op2val:0xbffa222222222222;
op3val:0x30; valaddr_reg:x3; val_offset:108*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 108*FLEN/8, x4, x1, x2)

inst_37:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000020 and fs2 == 0 and fe2 == 0x42d and fm2 == 0xfffffffffff7a and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000041 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x20; op2val:0x42dfffffffffff7a;
op3val:0x41; valaddr_reg:x3; val_offset:111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 111*FLEN/8, x4, x1, x2)

inst_38:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000020 and fs2 == 0 and fe2 == 0x42d and fm2 == 0xfffffffffffba and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000001e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x20; op2val:0x42dfffffffffffba;
op3val:0x1e; valaddr_reg:x3; val_offset:114*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 114*FLEN/8, x4, x1, x2)

inst_39:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000023 and fs2 == 1 and fe2 == 0x42d and fm2 == 0xd41d41d4199be and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000015 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x23; op2val:0xc2dd41d41d4199be;
op3val:0x15; valaddr_reg:x3; val_offset:117*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 117*FLEN/8, x4, x1, x2)

inst_40:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000024 and fs2 == 1 and fe2 == 0x42d and fm2 == 0xc71c71c5555e4 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000051 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x24; op2val:0xc2dc71c71c5555e4;
op3val:0x51; valaddr_reg:x3; val_offset:120*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 120*FLEN/8, x4, x1, x2)

inst_41:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000026 and fs2 == 0 and fe2 == 0x408 and fm2 == 0xaf06bca1af287 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000000b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x26; op2val:0x408af06bca1af287;
op3val:0xb; valaddr_reg:x3; val_offset:123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 123*FLEN/8, x4, x1, x2)

inst_42:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000026 and fs2 == 0 and fe2 == 0x40e and fm2 == 0xaf240d79435e5 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000054 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x26; op2val:0x40eaf240d79435e5;
op3val:0x54; valaddr_reg:x3; val_offset:126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 126*FLEN/8, x4, x1, x2)

inst_43:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000026 and fs2 == 1 and fe2 == 0x42d and fm2 == 0xaf286bc9af2c2 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000024 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x26; op2val:0xc2daf286bc9af2c2;
op3val:0x24; valaddr_reg:x3; val_offset:129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129*FLEN/8, x4, x1, x2)

inst_44:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000026 and fs2 == 1 and fe2 == 0x42d and fm2 == 0xaf286bca1af6f and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000033 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x26; op2val:0xc2daf286bca1af6f;
op3val:0x33; valaddr_reg:x3; val_offset:132*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 132*FLEN/8, x4, x1, x2)

inst_45:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000028 and fs2 == 0 and fe2 == 0x40e and fm2 == 0x999899999999a and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000014 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x28; op2val:0x40e999899999999a;
op3val:0x14; valaddr_reg:x3; val_offset:135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 135*FLEN/8, x4, x1, x2)

inst_46:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000028 and fs2 == 1 and fe2 == 0x42d and fm2 == 0x99999999999bd and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000001b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x28; op2val:0xc2d99999999999bd;
op3val:0x1b; valaddr_reg:x3; val_offset:138*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 138*FLEN/8, x4, x1, x2)

inst_47:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000029 and fs2 == 0 and fe2 == 0x40a and fm2 == 0x8f55da895da89 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000005a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x29; op2val:0x40a8f55da895da89;
op3val:0x5a; valaddr_reg:x3; val_offset:141*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 141*FLEN/8, x4, x1, x2)

inst_48:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x000000000002a and fs2 == 0 and fe2 == 0x406 and fm2 == 0x83aaaaaaaaaab and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000034 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x2a; op2val:0x40683aaaaaaaaaab;
op3val:0x34; valaddr_reg:x3; val_offset:144*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 144*FLEN/8, x4, x1, x2)

inst_49:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x000000000002c and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x5d1745d1745d1 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x2c; op2val:0xbfe5d1745d1745d1;
op3val:0x1f; valaddr_reg:x3; val_offset:147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 147*FLEN/8, x4, x1, x2)

inst_50:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x000000000002e and fs2 == 0 and fe2 == 0x40b and fm2 == 0x640fa6f4de9bd and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000053 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x2e; op2val:0x40b640fa6f4de9bd;
op3val:0x53; valaddr_reg:x3; val_offset:150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 150*FLEN/8, x4, x1, x2)

inst_51:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x000000000002e and fs2 == 0 and fe2 == 0x40f and fm2 == 0x642b0b21642c8 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000044 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x2e; op2val:0x40f642b0b21642c8;
op3val:0x44; valaddr_reg:x3; val_offset:153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 153*FLEN/8, x4, x1, x2)

inst_52:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x000000000002e and fs2 == 0 and fe2 == 0x42d and fm2 == 0x642c85905903c and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000054 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x2e; op2val:0x42d642c85905903c;
op3val:0x54; valaddr_reg:x3; val_offset:156*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 156*FLEN/8, x4, x1, x2)

inst_53:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x000000000002e and fs2 == 1 and fe2 == 0x42d and fm2 == 0x642c8590b212a and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000057 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x2e; op2val:0xc2d642c8590b212a;
op3val:0x57; valaddr_reg:x3; val_offset:159*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 159*FLEN/8, x4, x1, x2)

inst_54:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x000000000002f and fs2 == 0 and fe2 == 0x42d and fm2 == 0x5c9882b3bea27 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000000a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x2f; op2val:0x42d5c9882b3bea27;
op3val:0xa; valaddr_reg:x3; val_offset:162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 162*FLEN/8, x4, x1, x2)

inst_55:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x000000000002f and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x310572620ae4c and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000038 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x2f; op2val:0xbff310572620ae4c;
op3val:0x38; valaddr_reg:x3; val_offset:165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 165*FLEN/8, x4, x1, x2)

inst_56:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x000000000002f and fs2 == 1 and fe2 == 0x42d and fm2 == 0x5c9882b3bea61 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000020 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x2f; op2val:0xc2d5c9882b3bea61;
op3val:0x20; valaddr_reg:x3; val_offset:168*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 168*FLEN/8, x4, x1, x2)

inst_57:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x000000000002f and fs2 == 1 and fe2 == 0x42d and fm2 == 0x5c9882b930e13 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000057 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x2f; op2val:0xc2d5c9882b930e13;
op3val:0x57; valaddr_reg:x3; val_offset:171*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 171*FLEN/8, x4, x1, x2)

inst_58:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000031 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x8d0fac687d634 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000011 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x31; op2val:0xbfd8d0fac687d634;
op3val:0x11; valaddr_reg:x3; val_offset:174*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 174*FLEN/8, x4, x1, x2)

inst_59:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000031 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0xa72f05397829d and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000010 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x31; op2val:0xbffa72f05397829d;
op3val:0x10; valaddr_reg:x3; val_offset:177*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 177*FLEN/8, x4, x1, x2)

inst_60:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000031 and fs2 == 1 and fe2 == 0x40e and fm2 == 0x4e5e9cbc14e5e and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000000e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x31; op2val:0xc0e4e5e9cbc14e5e;
op3val:0xe; valaddr_reg:x3; val_offset:180*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 180*FLEN/8, x4, x1, x2)

inst_61:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000031 and fs2 == 1 and fe2 == 0x42d and fm2 == 0x4e5e0a72f0598 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000004b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x31; op2val:0xc2d4e5e0a72f0598;
op3val:0x4b; valaddr_reg:x3; val_offset:183*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 183*FLEN/8, x4, x1, x2)

inst_62:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000032 and fs2 == 1 and fe2 == 0x402 and fm2 == 0x70a3d70a3d70a and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000040 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x32; op2val:0xc0270a3d70a3d70a;
op3val:0x40; valaddr_reg:x3; val_offset:186*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 186*FLEN/8, x4, x1, x2)

inst_63:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000032 and fs2 == 1 and fe2 == 0x40d and fm2 == 0x47b47ae147ae1 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000050 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x32; op2val:0xc0d47b47ae147ae1;
op3val:0x50; valaddr_reg:x3; val_offset:189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 189*FLEN/8, x4, x1, x2)

inst_64:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000033 and fs2 == 1 and fe2 == 0x407 and fm2 == 0x4232323232323 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000002f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x33; op2val:0xc074232323232323;
op3val:0x2f; valaddr_reg:x3; val_offset:192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 192*FLEN/8, x4, x1, x2)

inst_65:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000034 and fs2 == 1 and fe2 == 0x400 and fm2 == 0x69d89d89d89d9 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000053 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x34; op2val:0xc0069d89d89d89d9;
op3val:0x53; valaddr_reg:x3; val_offset:195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 195*FLEN/8, x4, x1, x2)

inst_66:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000034 and fs2 == 1 and fe2 == 0x404 and fm2 == 0x3cec4ec4ec4ec and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000000c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x34; op2val:0xc043cec4ec4ec4ec;
op3val:0xc; valaddr_reg:x3; val_offset:198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 198*FLEN/8, x4, x1, x2)

inst_67:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000035 and fs2 == 1 and fe2 == 0x42d and fm2 == 0x3521cfb04d4ad and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000020 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x35; op2val:0xc2d3521cfb04d4ad;
op3val:0x20; valaddr_reg:x3; val_offset:201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201*FLEN/8, x4, x1, x2)

inst_68:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000036 and fs2 == 1 and fe2 == 0x42d and fm2 == 0x2f684bda00011 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x36; op2val:0xc2d2f684bda00011;
op3val:0xf; valaddr_reg:x3; val_offset:204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204*FLEN/8, x4, x1, x2)

inst_69:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000037 and fs2 == 0 and fe2 == 0x406 and fm2 == 0x293c8253c8254 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000012 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x37; op2val:0x406293c8253c8254;
op3val:0x12; valaddr_reg:x3; val_offset:207*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 207*FLEN/8, x4, x1, x2)

inst_70:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000037 and fs2 == 0 and fe2 == 0x42d and fm2 == 0x29e4129e41042 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000006 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x37; op2val:0x42d29e4129e41042;
op3val:0x6; valaddr_reg:x3; val_offset:210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210*FLEN/8, x4, x1, x2)

inst_71:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000037 and fs2 == 1 and fe2 == 0x42d and fm2 == 0x29e4129e40e14 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000001a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x37; op2val:0xc2d29e4129e40e14;
op3val:0x1a; valaddr_reg:x3; val_offset:213*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 213*FLEN/8, x4, x1, x2)

inst_72:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000038 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x1249249249249 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000039 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x38; op2val:0xbff1249249249249;
op3val:0x39; valaddr_reg:x3; val_offset:216*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 216*FLEN/8, x4, x1, x2)

inst_73:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000039 and fs2 == 0 and fe2 == 0x404 and fm2 == 0x1a3ee08fb823f and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000025 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x39; op2val:0x4041a3ee08fb823f;
op3val:0x25; valaddr_reg:x3; val_offset:219*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 219*FLEN/8, x4, x1, x2)

inst_74:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x000000000003b and fs2 == 1 and fe2 == 0x408 and fm2 == 0x15f2fba938682 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000001d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3b; op2val:0xc0815f2fba938682;
op3val:0x1d; valaddr_reg:x3; val_offset:222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 222*FLEN/8, x4, x1, x2)

inst_75:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x000000000003c and fs2 == 0 and fe2 == 0x42d and fm2 == 0x111111110cc8d and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000003b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3c; op2val:0x42d111111110cc8d;
op3val:0x3b; valaddr_reg:x3; val_offset:225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 225*FLEN/8, x4, x1, x2)

inst_76:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x000000000003d and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xbcda3ac10c971 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000014 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3d; op2val:0xbfebcda3ac10c971;
op3val:0x14; valaddr_reg:x3; val_offset:228*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 228*FLEN/8, x4, x1, x2)

inst_77:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x000000000003d and fs2 == 1 and fe2 == 0x406 and fm2 == 0x0f04325c53ef3 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000049 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3d; op2val:0xc060f04325c53ef3;
op3val:0x49; valaddr_reg:x3; val_offset:231*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 231*FLEN/8, x4, x1, x2)

inst_78:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x000000000003d and fs2 == 1 and fe2 == 0x409 and fm2 == 0x0cca7de6d1d61 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000031 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3d; op2val:0xc090cca7de6d1d61;
op3val:0x31; valaddr_reg:x3; val_offset:234*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 234*FLEN/8, x4, x1, x2)

inst_79:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x000000000003f and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x34d34d34d34d3 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000005a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3f; op2val:0x3fe34d34d34d34d3;
op3val:0x5a; valaddr_reg:x3; val_offset:237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 237*FLEN/8, x4, x1, x2)

inst_80:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x000000000003f and fs2 == 1 and fe2 == 0x401 and fm2 == 0x4000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000003b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3f; op2val:0xc014000000000000;
op3val:0x3b; valaddr_reg:x3; val_offset:240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240*FLEN/8, x4, x1, x2)

inst_81:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x000000000003f and fs2 == 1 and fe2 == 0x405 and fm2 == 0x05f7df7df7df8 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000001e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3f; op2val:0xc0505f7df7df7df8;
op3val:0x1e; valaddr_reg:x3; val_offset:243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243*FLEN/8, x4, x1, x2)

inst_82:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x000000000003f and fs2 == 1 and fe2 == 0x42d and fm2 == 0x041041040fc34 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000044 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3f; op2val:0xc2d041041040fc34;
op3val:0x44; valaddr_reg:x3; val_offset:246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 246*FLEN/8, x4, x1, x2)

inst_83:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x000000000003f and fs2 == 1 and fe2 == 0x42d and fm2 == 0x041041041043f and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000030 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3f; op2val:0xc2d041041041043f;
op3val:0x30; valaddr_reg:x3; val_offset:249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249*FLEN/8, x4, x1, x2)

inst_84:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000040 and fs2 == 0 and fe2 == 0x40b and fm2 == 0xffefc00000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000041 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x40; op2val:0x40bffefc00000000;
op3val:0x41; valaddr_reg:x3; val_offset:252*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 252*FLEN/8, x4, x1, x2)

inst_85:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000040 and fs2 == 0 and fe2 == 0x42c and fm2 == 0xfffffffffffa2 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000000e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x40; op2val:0x42cfffffffffffa2;
op3val:0xe; valaddr_reg:x3; val_offset:255*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255*FLEN/8, x4, x1, x2)

inst_86:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000040 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x4000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000054 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x40; op2val:0xbff4000000000000;
op3val:0x54; valaddr_reg:x3; val_offset:258*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 258*FLEN/8, x4, x1, x2)

inst_87:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000041 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xd0bd0bd0bd0bd and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000001b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x41; op2val:0xbfed0bd0bd0bd0bd;
op3val:0x1b; valaddr_reg:x3; val_offset:261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 261*FLEN/8, x4, x1, x2)

inst_88:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000041 and fs2 == 1 and fe2 == 0x42c and fm2 == 0xf81f81f723766 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000023 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x41; op2val:0xc2cf81f81f723766;
op3val:0x23; valaddr_reg:x3; val_offset:264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 264*FLEN/8, x4, x1, x2)

inst_89:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000041 and fs2 == 1 and fe2 == 0x42c and fm2 == 0xf81f81f81d8b1 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000000b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x41; op2val:0xc2cf81f81f81d8b1;
op3val:0xb; valaddr_reg:x3; val_offset:267*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 267*FLEN/8, x4, x1, x2)

inst_90:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000042 and fs2 == 1 and fe2 == 0x404 and fm2 == 0x03a2e8ba2e8ba and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000005d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x42; op2val:0xc0403a2e8ba2e8ba;
op3val:0x5d; valaddr_reg:x3; val_offset:270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 270*FLEN/8, x4, x1, x2)

inst_91:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000043 and fs2 == 0 and fe2 == 0x40b and fm2 == 0xe90a07a44c6b0 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000027 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x43; op2val:0x40be90a07a44c6b0;
op3val:0x27; valaddr_reg:x3; val_offset:273*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 273*FLEN/8, x4, x1, x2)

inst_92:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000043 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x226357e16ece5 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000001b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x43; op2val:0xbfd226357e16ece5;
op3val:0x1b; valaddr_reg:x3; val_offset:276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 276*FLEN/8, x4, x1, x2)

inst_93:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000043 and fs2 == 1 and fe2 == 0x407 and fm2 == 0xe9dd9ca81e913 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000035 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x43; op2val:0xc07e9dd9ca81e913;
op3val:0x35; valaddr_reg:x3; val_offset:279*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 279*FLEN/8, x4, x1, x2)

inst_94:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000044 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x2969696969697 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000032 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x44; op2val:0x3ff2969696969697;
op3val:0x32; valaddr_reg:x3; val_offset:282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 282*FLEN/8, x4, x1, x2)

inst_95:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000044 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x0f0f0f0f0f0f1 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000000c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x44; op2val:0xbfc0f0f0f0f0f0f1;
op3val:0xc; valaddr_reg:x3; val_offset:285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 285*FLEN/8, x4, x1, x2)

inst_96:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000045 and fs2 == 0 and fe2 == 0x408 and fm2 == 0xda40ed7303b5d and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000059 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x45; op2val:0x408da40ed7303b5d;
op3val:0x59; valaddr_reg:x3; val_offset:288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 288*FLEN/8, x4, x1, x2)

inst_97:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000046 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xaf8af8af8af8b and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000005 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x46; op2val:0x3feaf8af8af8af8b;
op3val:0x5; valaddr_reg:x3; val_offset:291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 291*FLEN/8, x4, x1, x2)

inst_98:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000047 and fs2 == 0 and fe2 == 0x408 and fm2 == 0xcd25dbf193d4c and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000036 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x47; op2val:0x408cd25dbf193d4c;
op3val:0x36; valaddr_reg:x3; val_offset:294*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 294*FLEN/8, x4, x1, x2)

inst_99:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000048 and fs2 == 0 and fe2 == 0x404 and fm2 == 0xc200000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000002e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x48; op2val:0x404c200000000000;
op3val:0x2e; valaddr_reg:x3; val_offset:297*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 297*FLEN/8, x4, x1, x2)

inst_100:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000049 and fs2 == 0 and fe2 == 0x42c and fm2 == 0xc0e07037fffe9 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000000c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x49; op2val:0x42cc0e07037fffe9;
op3val:0xc; valaddr_reg:x3; val_offset:300*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300*FLEN/8, x4, x1, x2)

inst_101:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x000000000004a and fs2 == 1 and fe2 == 0x402 and fm2 == 0xc59f22983759f and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000019 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x4a; op2val:0xc02c59f22983759f;
op3val:0x19; valaddr_reg:x3; val_offset:303*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303*FLEN/8, x4, x1, x2)

inst_102:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x000000000004b and fs2 == 0 and fe2 == 0x401 and fm2 == 0x828f5c28f5c29 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000003b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x4b; op2val:0x401828f5c28f5c29;
op3val:0x3b; valaddr_reg:x3; val_offset:306*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 306*FLEN/8, x4, x1, x2)

inst_103:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x000000000004b and fs2 == 1 and fe2 == 0x3fa and fm2 == 0x47ae147ae147b and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000013 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x4b; op2val:0xbfa47ae147ae147b;
op3val:0x13; valaddr_reg:x3; val_offset:309*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 309*FLEN/8, x4, x1, x2)

inst_104:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x000000000004d and fs2 == 0 and fe2 == 0x407 and fm2 == 0xa963bd81a98ef and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000000d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x4d; op2val:0x407a963bd81a98ef;
op3val:0xd; valaddr_reg:x3; val_offset:312*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 312*FLEN/8, x4, x1, x2)

inst_105:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x000000000004d and fs2 == 0 and fe2 == 0x42c and fm2 == 0xa98ef606a633e and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000044 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x4d; op2val:0x42ca98ef606a633e;
op3val:0x44; valaddr_reg:x3; val_offset:315*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 315*FLEN/8, x4, x1, x2)

inst_106:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x000000000004d and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x745d1745d1746 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000041 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x4d; op2val:0xbfe745d1745d1746;
op3val:0x41; valaddr_reg:x3; val_offset:318*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 318*FLEN/8, x4, x1, x2)

inst_107:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x000000000004d and fs2 == 1 and fe2 == 0x40d and fm2 == 0xa9931dec0d4c7 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000004f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x4d; op2val:0xc0da9931dec0d4c7;
op3val:0x4f; valaddr_reg:x3; val_offset:321*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 321*FLEN/8, x4, x1, x2)

inst_108:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x000000000004e and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x2df2df2df2df3 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000009 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x4e; op2val:0x3fd2df2df2df2df3;
op3val:0x9; valaddr_reg:x3; val_offset:324*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 324*FLEN/8, x4, x1, x2)

inst_109:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x000000000004e and fs2 == 1 and fe2 == 0x42c and fm2 == 0xa41a41a41a2f0 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000004b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x4e; op2val:0xc2ca41a41a41a2f0;
op3val:0x4b; valaddr_reg:x3; val_offset:327*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 327*FLEN/8, x4, x1, x2)

inst_110:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x000000000004f and fs2 == 0 and fe2 == 0x403 and fm2 == 0x974a8819ec8e9 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000026 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x4f; op2val:0x403974a8819ec8e9;
op3val:0x26; valaddr_reg:x3; val_offset:330*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 330*FLEN/8, x4, x1, x2)

inst_111:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x000000000004f and fs2 == 0 and fe2 == 0x42c and fm2 == 0x9ec8e951026b9 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000019 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x4f; op2val:0x42c9ec8e951026b9;
op3val:0x19; valaddr_reg:x3; val_offset:333*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 333*FLEN/8, x4, x1, x2)

inst_112:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x000000000004f and fs2 == 1 and fe2 == 0x42c and fm2 == 0x9ec8e9510340f and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000032 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x4f; op2val:0xc2c9ec8e9510340f;
op3val:0x32; valaddr_reg:x3; val_offset:336*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 336*FLEN/8, x4, x1, x2)

inst_113:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000050 and fs2 == 0 and fe2 == 0x40c and fm2 == 0x9997000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000001a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x50; op2val:0x40c9997000000000;
op3val:0x1a; valaddr_reg:x3; val_offset:339*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 339*FLEN/8, x4, x1, x2)

inst_114:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000050 and fs2 == 1 and fe2 == 0x42c and fm2 == 0x999999996669e and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000024 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x50; op2val:0xc2c999999996669e;
op3val:0x24; valaddr_reg:x3; val_offset:342*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 342*FLEN/8, x4, x1, x2)

inst_115:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000051 and fs2 == 0 and fe2 == 0x40c and fm2 == 0x94869e06522c4 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000002e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x51; op2val:0x40c94869e06522c4;
op3val:0x2e; valaddr_reg:x3; val_offset:345*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 345*FLEN/8, x4, x1, x2)

inst_116:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000053 and fs2 == 0 and fe2 == 0x401 and fm2 == 0x7784a062b2e44 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000001a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x53; op2val:0x4017784a062b2e44;
op3val:0x1a; valaddr_reg:x3; val_offset:348*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 348*FLEN/8, x4, x1, x2)

inst_117:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000053 and fs2 == 1 and fe2 == 0x401 and fm2 == 0x98acb90f6bf3b and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000011 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x53; op2val:0xc0198acb90f6bf3b;
op3val:0x11; valaddr_reg:x3; val_offset:351*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 351*FLEN/8, x4, x1, x2)

inst_118:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000055 and fs2 == 1 and fe2 == 0x40a and fm2 == 0x818e4e4e4e4e5 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000022 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x55; op2val:0xc0a818e4e4e4e4e5;
op3val:0x22; valaddr_reg:x3; val_offset:354*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 354*FLEN/8, x4, x1, x2)

inst_119:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000055 and fs2 == 1 and fe2 == 0x40e and fm2 == 0x8181b1b1b1b1b and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000008 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x55; op2val:0xc0e8181b1b1b1b1b;
op3val:0x8; valaddr_reg:x3; val_offset:357*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 357*FLEN/8, x4, x1, x2)

inst_120:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000056 and fs2 == 0 and fe2 == 0x42c and fm2 == 0x7d05f417c4739 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000025 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x56; op2val:0x42c7d05f417c4739;
op3val:0x25; valaddr_reg:x3; val_offset:360*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 360*FLEN/8, x4, x1, x2)

inst_121:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000058 and fs2 == 0 and fe2 == 0x42c and fm2 == 0x745d1745cffcd and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000022 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x58; op2val:0x42c745d1745cffcd;
op3val:0x22; valaddr_reg:x3; val_offset:363*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 363*FLEN/8, x4, x1, x2)

inst_122:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000058 and fs2 == 1 and fe2 == 0x42c and fm2 == 0x745d1745d1779 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000044 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x58; op2val:0xc2c745d1745d1779;
op3val:0x44; valaddr_reg:x3; val_offset:366*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 366*FLEN/8, x4, x1, x2)

inst_123:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000059 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0xcc398730e61cc and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000000c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x59; op2val:0xbfbcc398730e61cc;
op3val:0xc; valaddr_reg:x3; val_offset:369*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 369*FLEN/8, x4, x1, x2)

inst_124:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000059 and fs2 == 1 and fe2 == 0x42c and fm2 == 0x702e05c0b819a and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000005e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x59; op2val:0xc2c702e05c0b819a;
op3val:0x5e; valaddr_reg:x3; val_offset:372*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 372*FLEN/8, x4, x1, x2)

inst_125:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x000000000005a and fs2 == 1 and fe2 == 0x406 and fm2 == 0x6cdddddddddde and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000023 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5a; op2val:0xc066cdddddddddde;
op3val:0x23; valaddr_reg:x3; val_offset:375*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 375*FLEN/8, x4, x1, x2)

inst_126:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x000000000005b and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x3b13b13b13b14 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000049 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5b; op2val:0xbfe3b13b13b13b14;
op3val:0x49; valaddr_reg:x3; val_offset:378*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 378*FLEN/8, x4, x1, x2)

inst_127:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x000000000005d and fs2 == 1 and fe2 == 0x400 and fm2 == 0xb18c6318c6319 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000003a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5d; op2val:0xc00b18c6318c6319;
op3val:0x3a; valaddr_reg:x3; val_offset:381*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 381*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_2)

inst_128:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x000000000005d and fs2 == 1 and fe2 == 0x402 and fm2 == 0x744d1344d1345 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000039 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5d; op2val:0xc02744d1344d1345;
op3val:0x39; valaddr_reg:x3; val_offset:384*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 384*FLEN/8, x4, x1, x2)

inst_129:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x000000000005d and fs2 == 1 and fe2 == 0x409 and fm2 == 0x6062689a2689a and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5d; op2val:0xc096062689a2689a;
op3val:0xf; valaddr_reg:x3; val_offset:387*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 387*FLEN/8, x4, x1, x2)

inst_130:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x000000000005e and fs2 == 0 and fe2 == 0x402 and fm2 == 0x4310572620ae5 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000004b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5e; op2val:0x4024310572620ae5;
op3val:0x4b; valaddr_reg:x3; val_offset:390*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 390*FLEN/8, x4, x1, x2)

inst_131:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x000000000005e and fs2 == 1 and fe2 == 0x42c and fm2 == 0x5c9882b926239 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000023 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5e; op2val:0xc2c5c9882b926239;
op3val:0x23; valaddr_reg:x3; val_offset:393*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 393*FLEN/8, x4, x1, x2)

inst_132:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x000000000005f and fs2 == 0 and fe2 == 0x40a and fm2 == 0x58df53896e7bf and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000002a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f; op2val:0x40a58df53896e7bf;
op3val:0x2a; valaddr_reg:x3; val_offset:396*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 396*FLEN/8, x4, x1, x2)

inst_133:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000060 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xfaaaaaaaaaaab and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000043 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x60; op2val:0x3fffaaaaaaaaaaab;
op3val:0x43; valaddr_reg:x3; val_offset:399*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 399*FLEN/8, x4, x1, x2)

inst_134:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000060 and fs2 == 0 and fe2 == 0x409 and fm2 == 0x5536000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000030 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x60; op2val:0x4095536000000000;
op3val:0x30; valaddr_reg:x3; val_offset:402*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 402*FLEN/8, x4, x1, x2)

inst_135:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000060 and fs2 == 0 and fe2 == 0x42c and fm2 == 0x5555555555503 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000003b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x60; op2val:0x42c5555555555503;
op3val:0x3b; valaddr_reg:x3; val_offset:405*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 405*FLEN/8, x4, x1, x2)

inst_136:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000060 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xeaaaaaaaaaaab and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000061 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x60; op2val:0xbfeeaaaaaaaaaaab;
op3val:0x61; valaddr_reg:x3; val_offset:408*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 408*FLEN/8, x4, x1, x2)

inst_137:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000062 and fs2 == 1 and fe2 == 0x405 and fm2 == 0x4e7d6343eb1a2 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x62; op2val:0xc054e7d6343eb1a2;
op3val:0x3; valaddr_reg:x3; val_offset:411*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 411*FLEN/8, x4, x1, x2)

inst_138:
// fs1 == 0 and fe1 == 0x001 and fm1 == 0x0000000000005 and fs2 == 1 and fe2 == 0x400 and fm2 == 0x0000000000023 and fs3 == 0 and fe3 == 0x001 and fm3 == 0x000000000004d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x10000000000005; op2val:0xc000000000000023;
op3val:0x1000000000004d; valaddr_reg:x3; val_offset:414*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 414*FLEN/8, x4, x1, x2)

inst_139:
// fs1 == 0 and fe1 == 0x001 and fm1 == 0x0000000000008 and fs2 == 1 and fe2 == 0x400 and fm2 == 0x000000002001c and fs3 == 0 and fe3 == 0x001 and fm3 == 0x0000000000048 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x10000000000008; op2val:0xc00000000002001c;
op3val:0x10000000000048; valaddr_reg:x3; val_offset:417*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 417*FLEN/8, x4, x1, x2)

inst_140:
// fs1 == 0 and fe1 == 0x001 and fm1 == 0x0000000000009 and fs2 == 1 and fe2 == 0x400 and fm2 == 0x0000000000029 and fs3 == 0 and fe3 == 0x001 and fm3 == 0x0000000000043 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x10000000000009; op2val:0xc000000000000029;
op3val:0x10000000000043; valaddr_reg:x3; val_offset:420*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 420*FLEN/8, x4, x1, x2)

inst_141:
// fs1 == 0 and fe1 == 0x001 and fm1 == 0x0000000000009 and fs2 == 1 and fe2 == 0x400 and fm2 == 0x00000000007fd and fs3 == 0 and fe3 == 0x001 and fm3 == 0x000000000000d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x10000000000009; op2val:0xc0000000000007fd;
op3val:0x1000000000000d; valaddr_reg:x3; val_offset:423*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 423*FLEN/8, x4, x1, x2)

inst_142:
// fs1 == 0 and fe1 == 0x001 and fm1 == 0x000000000000b and fs2 == 1 and fe2 == 0x3ce and fm2 == 0x3fffffffffff2 and fs3 == 0 and fe3 == 0x001 and fm3 == 0x0000000000012 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x1000000000000b; op2val:0xbce3fffffffffff2;
op3val:0x10000000000012; valaddr_reg:x3; val_offset:426*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 426*FLEN/8, x4, x1, x2)

inst_143:
// fs1 == 0 and fe1 == 0x001 and fm1 == 0x000000000000b and fs2 == 1 and fe2 == 0x400 and fm2 == 0x0000000002008 and fs3 == 0 and fe3 == 0x001 and fm3 == 0x0000000000026 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x1000000000000b; op2val:0xc000000000002008;
op3val:0x10000000000026; valaddr_reg:x3; val_offset:429*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 429*FLEN/8, x4, x1, x2)

inst_144:
// fs1 == 0 and fe1 == 0x001 and fm1 == 0x000000000000e and fs2 == 1 and fe2 == 0x400 and fm2 == 0x000000000fff6 and fs3 == 0 and fe3 == 0x001 and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x1000000000000e; op2val:0xc00000000000fff6;
op3val:0x10000000000007; valaddr_reg:x3; val_offset:432*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 432*FLEN/8, x4, x1, x2)

inst_145:
// fs1 == 0 and fe1 == 0x001 and fm1 == 0x000000000000f and fs2 == 1 and fe2 == 0x400 and fm2 == 0x000000000003f and fs3 == 0 and fe3 == 0x001 and fm3 == 0x000000000005d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x1000000000000f; op2val:0xc00000000000003f;
op3val:0x1000000000005d; valaddr_reg:x3; val_offset:435*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 435*FLEN/8, x4, x1, x2)

inst_146:
// fs1 == 0 and fe1 == 0x001 and fm1 == 0x0000000000011 and fs2 == 0 and fe2 == 0x3e0 and fm2 == 0xfffedffffffde and fs3 == 0 and fe3 == 0x001 and fm3 == 0x0000000000024 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x10000000000011; op2val:0x3e0fffedffffffde;
op3val:0x10000000000024; valaddr_reg:x3; val_offset:438*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 438*FLEN/8, x4, x1, x2)

inst_147:
// fs1 == 0 and fe1 == 0x001 and fm1 == 0x0000000000012 and fs2 == 0 and fe2 == 0x3d2 and fm2 == 0x3bfffffffffea and fs3 == 0 and fe3 == 0x001 and fm3 == 0x0000000000062 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x10000000000012; op2val:0x3d23bfffffffffea;
op3val:0x10000000000062; valaddr_reg:x3; val_offset:441*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 441*FLEN/8, x4, x1, x2)

inst_148:
// fs1 == 0 and fe1 == 0x001 and fm1 == 0x0000000000015 and fs2 == 1 and fe2 == 0x400 and fm2 == 0x00000000000fb and fs3 == 0 and fe3 == 0x001 and fm3 == 0x0000000000021 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x10000000000015; op2val:0xc0000000000000fb;
op3val:0x10000000000021; valaddr_reg:x3; val_offset:444*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 444*FLEN/8, x4, x1, x2)

inst_149:
// fs1 == 0 and fe1 == 0x001 and fm1 == 0x0000000000016 and fs2 == 1 and fe2 == 0x400 and fm2 == 0x000000008000e and fs3 == 0 and fe3 == 0x001 and fm3 == 0x0000000000048 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x10000000000016; op2val:0xc00000000008000e;
op3val:0x10000000000048; valaddr_reg:x3; val_offset:447*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 447*FLEN/8, x4, x1, x2)

inst_150:
// fs1 == 0 and fe1 == 0x001 and fm1 == 0x0000000000017 and fs2 == 0 and fe2 == 0x3d1 and fm2 == 0xa7fffffffffda and fs3 == 0 and fe3 == 0x001 and fm3 == 0x0000000000016 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x10000000000017; op2val:0x3d1a7fffffffffda;
op3val:0x10000000000016; valaddr_reg:x3; val_offset:450*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 450*FLEN/8, x4, x1, x2)

inst_151:
// fs1 == 0 and fe1 == 0x001 and fm1 == 0x0000000000017 and fs2 == 1 and fe2 == 0x400 and fm2 == 0x0000000003fff and fs3 == 0 and fe3 == 0x001 and fm3 == 0x000000000002c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x10000000000017; op2val:0xc000000000003fff;
op3val:0x1000000000002c; valaddr_reg:x3; val_offset:453*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 453*FLEN/8, x4, x1, x2)

inst_152:
// fs1 == 0 and fe1 == 0x001 and fm1 == 0x000000000001c and fs2 == 0 and fe2 == 0x3ce and fm2 == 0x5ffffffffffda and fs3 == 0 and fe3 == 0x001 and fm3 == 0x0000000000035 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x1000000000001c; op2val:0x3ce5ffffffffffda;
op3val:0x10000000000035; valaddr_reg:x3; val_offset:456*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 456*FLEN/8, x4, x1, x2)

inst_153:
// fs1 == 0 and fe1 == 0x001 and fm1 == 0x000000000001d and fs2 == 1 and fe2 == 0x3ce and fm2 == 0x3ffffffffffdc and fs3 == 0 and fe3 == 0x001 and fm3 == 0x000000000002a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x1000000000001d; op2val:0xbce3ffffffffffdc;
op3val:0x1000000000002a; valaddr_reg:x3; val_offset:459*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 459*FLEN/8, x4, x1, x2)

inst_154:
// fs1 == 0 and fe1 == 0x001 and fm1 == 0x000000000001e and fs2 == 1 and fe2 == 0x400 and fm2 == 0x0000000000011 and fs3 == 0 and fe3 == 0x001 and fm3 == 0x000000000005d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x1000000000001e; op2val:0xc000000000000011;
op3val:0x1000000000005d; valaddr_reg:x3; val_offset:462*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 462*FLEN/8, x4, x1, x2)

inst_155:
// fs1 == 0 and fe1 == 0x001 and fm1 == 0x0000000000026 and fs2 == 1 and fe2 == 0x400 and fm2 == 0x000000000000e and fs3 == 0 and fe3 == 0x001 and fm3 == 0x0000000000060 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x10000000000026; op2val:0xc00000000000000e;
op3val:0x10000000000060; valaddr_reg:x3; val_offset:465*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 465*FLEN/8, x4, x1, x2)

inst_156:
// fs1 == 0 and fe1 == 0x001 and fm1 == 0x0000000000026 and fs2 == 1 and fe2 == 0x400 and fm2 == 0x00000001fffea and fs3 == 0 and fe3 == 0x001 and fm3 == 0x0000000000020 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x10000000000026; op2val:0xc0000000001fffea;
op3val:0x10000000000020; valaddr_reg:x3; val_offset:468*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 468*FLEN/8, x4, x1, x2)

inst_157:
// fs1 == 0 and fe1 == 0x001 and fm1 == 0x0000000000028 and fs2 == 0 and fe2 == 0x3de and fm2 == 0xfffb9ffffffb0 and fs3 == 0 and fe3 == 0x001 and fm3 == 0x0000000000023 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x10000000000028; op2val:0x3defffb9ffffffb0;
op3val:0x10000000000023; valaddr_reg:x3; val_offset:471*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 471*FLEN/8, x4, x1, x2)

inst_158:
// fs1 == 0 and fe1 == 0x001 and fm1 == 0x0000000000029 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0xfffffffffffce and fs3 == 0 and fe3 == 0x001 and fm3 == 0x000000000001d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x10000000000029; op2val:0xbfffffffffffffce;
op3val:0x1000000000001d; valaddr_reg:x3; val_offset:474*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 474*FLEN/8, x4, x1, x2)

inst_159:
// fs1 == 0 and fe1 == 0x001 and fm1 == 0x000000000002e and fs2 == 1 and fe2 == 0x3ff and fm2 == 0xfffffffffffde and fs3 == 0 and fe3 == 0x001 and fm3 == 0x000000000002a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x1000000000002e; op2val:0xbfffffffffffffde;
op3val:0x1000000000002a; valaddr_reg:x3; val_offset:477*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 477*FLEN/8, x4, x1, x2)

inst_160:
// fs1 == 0 and fe1 == 0x001 and fm1 == 0x000000000002f and fs2 == 0 and fe2 == 0x3dc and fm2 == 0xffd07ffffffa2 and fs3 == 0 and fe3 == 0x001 and fm3 == 0x000000000005f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x1000000000002f; op2val:0x3dcffd07ffffffa2;
op3val:0x1000000000005f; valaddr_reg:x3; val_offset:480*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 480*FLEN/8, x4, x1, x2)

inst_161:
// fs1 == 0 and fe1 == 0x001 and fm1 == 0x0000000000032 and fs2 == 1 and fe2 == 0x400 and fm2 == 0x00000000001d8 and fs3 == 0 and fe3 == 0x001 and fm3 == 0x0000000000014 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x10000000000032; op2val:0xc0000000000001d8;
op3val:0x10000000000014; valaddr_reg:x3; val_offset:483*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 483*FLEN/8, x4, x1, x2)

inst_162:
// fs1 == 0 and fe1 == 0x001 and fm1 == 0x0000000000036 and fs2 == 0 and fe2 == 0x3d7 and fm2 == 0xfc7ffffffff95 and fs3 == 0 and fe3 == 0x001 and fm3 == 0x0000000000038 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x10000000000036; op2val:0x3d7fc7ffffffff95;
op3val:0x10000000000038; valaddr_reg:x3; val_offset:486*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 486*FLEN/8, x4, x1, x2)

inst_163:
// fs1 == 0 and fe1 == 0x001 and fm1 == 0x0000000000038 and fs2 == 1 and fe2 == 0x400 and fm2 == 0x0000000000052 and fs3 == 0 and fe3 == 0x001 and fm3 == 0x0000000000015 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x10000000000038; op2val:0xc000000000000052;
op3val:0x10000000000015; valaddr_reg:x3; val_offset:489*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 489*FLEN/8, x4, x1, x2)

inst_164:
// fs1 == 0 and fe1 == 0x001 and fm1 == 0x0000000000038 and fs2 == 1 and fe2 == 0x400 and fm2 == 0x00000000003f7 and fs3 == 0 and fe3 == 0x001 and fm3 == 0x000000000005e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x10000000000038; op2val:0xc0000000000003f7;
op3val:0x1000000000005e; valaddr_reg:x3; val_offset:492*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 492*FLEN/8, x4, x1, x2)

inst_165:
// fs1 == 0 and fe1 == 0x001 and fm1 == 0x0000000000039 and fs2 == 0 and fe2 == 0x3d3 and fm2 == 0xf7fffffffff90 and fs3 == 0 and fe3 == 0x001 and fm3 == 0x0000000000008 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x10000000000039; op2val:0x3d3f7fffffffff90;
op3val:0x10000000000008; valaddr_reg:x3; val_offset:495*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 495*FLEN/8, x4, x1, x2)

inst_166:
// fs1 == 0 and fe1 == 0x001 and fm1 == 0x000000000003e and fs2 == 1 and fe2 == 0x3ce and fm2 == 0x9ffffffffff9b and fs3 == 0 and fe3 == 0x001 and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x1000000000003e; op2val:0xbce9ffffffffff9b;
op3val:0x1000000000000f; valaddr_reg:x3; val_offset:498*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 498*FLEN/8, x4, x1, x2)

inst_167:
// fs1 == 0 and fe1 == 0x001 and fm1 == 0x0000000000044 and fs2 == 0 and fe2 == 0x3dd and fm2 == 0xfff9fffffff78 and fs3 == 0 and fe3 == 0x001 and fm3 == 0x0000000000018 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x10000000000044; op2val:0x3ddfff9fffffff78;
op3val:0x10000000000018; valaddr_reg:x3; val_offset:501*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 501*FLEN/8, x4, x1, x2)

inst_168:
// fs1 == 0 and fe1 == 0x001 and fm1 == 0x0000000000045 and fs2 == 1 and fe2 == 0x400 and fm2 == 0x0000000000fc9 and fs3 == 0 and fe3 == 0x001 and fm3 == 0x000000000001d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x10000000000045; op2val:0xc000000000000fc9;
op3val:0x1000000000001d; valaddr_reg:x3; val_offset:504*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 504*FLEN/8, x4, x1, x2)

inst_169:
// fs1 == 0 and fe1 == 0x001 and fm1 == 0x0000000000049 and fs2 == 1 and fe2 == 0x3d1 and fm2 == 0x5ffffffffff9c and fs3 == 0 and fe3 == 0x001 and fm3 == 0x000000000005c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x10000000000049; op2val:0xbd15ffffffffff9c;
op3val:0x1000000000005c; valaddr_reg:x3; val_offset:507*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 507*FLEN/8, x4, x1, x2)

inst_170:
// fs1 == 0 and fe1 == 0x001 and fm1 == 0x000000000004b and fs2 == 0 and fe2 == 0x3d5 and fm2 == 0xea7ffffffff70 and fs3 == 0 and fe3 == 0x001 and fm3 == 0x0000000000056 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x1000000000004b; op2val:0x3d5ea7ffffffff70;
op3val:0x10000000000056; valaddr_reg:x3; val_offset:510*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 510*FLEN/8, x4, x1, x2)

inst_171:
// fs1 == 0 and fe1 == 0x001 and fm1 == 0x000000000004b and fs2 == 0 and fe2 == 0x3d8 and fm2 == 0xfd3ffffffff6b and fs3 == 0 and fe3 == 0x001 and fm3 == 0x0000000000058 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x1000000000004b; op2val:0x3d8fd3ffffffff6b;
op3val:0x10000000000058; valaddr_reg:x3; val_offset:513*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 513*FLEN/8, x4, x1, x2)

inst_172:
// fs1 == 0 and fe1 == 0x001 and fm1 == 0x000000000004f and fs2 == 0 and fe2 == 0x3d6 and fm2 == 0xfb5ffffffff63 and fs3 == 0 and fe3 == 0x001 and fm3 == 0x0000000000025 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x1000000000004f; op2val:0x3d6fb5ffffffff63;
op3val:0x10000000000025; valaddr_reg:x3; val_offset:516*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 516*FLEN/8, x4, x1, x2)

inst_173:
// fs1 == 0 and fe1 == 0x001 and fm1 == 0x000000000004f and fs2 == 1 and fe2 == 0x400 and fm2 == 0x0000000000007 and fs3 == 0 and fe3 == 0x001 and fm3 == 0x000000000002d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x1000000000004f; op2val:0xc000000000000007;
op3val:0x1000000000002d; valaddr_reg:x3; val_offset:519*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 519*FLEN/8, x4, x1, x2)

inst_174:
// fs1 == 0 and fe1 == 0x001 and fm1 == 0x0000000000052 and fs2 == 1 and fe2 == 0x400 and fm2 == 0x00000000fffc3 and fs3 == 0 and fe3 == 0x001 and fm3 == 0x000000000002a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x10000000000052; op2val:0xc0000000000fffc3;
op3val:0x1000000000002a; valaddr_reg:x3; val_offset:522*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 522*FLEN/8, x4, x1, x2)

inst_175:
// fs1 == 0 and fe1 == 0x001 and fm1 == 0x0000000000058 and fs2 == 0 and fe2 == 0x3df and fm2 == 0xfffc2ffffff50 and fs3 == 0 and fe3 == 0x001 and fm3 == 0x000000000003d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x10000000000058; op2val:0x3dffffc2ffffff50;
op3val:0x1000000000003d; valaddr_reg:x3; val_offset:525*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 525*FLEN/8, x4, x1, x2)

inst_176:
// fs1 == 0 and fe1 == 0x001 and fm1 == 0x0000000000059 and fs2 == 0 and fe2 == 0x3d4 and fm2 == 0xe2fffffffff58 and fs3 == 0 and fe3 == 0x001 and fm3 == 0x000000000003a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x10000000000059; op2val:0x3d4e2fffffffff58;
op3val:0x1000000000003a; valaddr_reg:x3; val_offset:528*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 528*FLEN/8, x4, x1, x2)

inst_177:
// fs1 == 0 and fe1 == 0x001 and fm1 == 0x0000000000059 and fs2 == 0 and fe2 == 0x3da and fm2 == 0xff6dfffffff4e and fs3 == 0 and fe3 == 0x001 and fm3 == 0x0000000000049 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x10000000000059; op2val:0x3daff6dfffffff4e;
op3val:0x10000000000049; valaddr_reg:x3; val_offset:531*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 531*FLEN/8, x4, x1, x2)

inst_178:
// fs1 == 0 and fe1 == 0x001 and fm1 == 0x000000000005b and fs2 == 0 and fe2 == 0x3db and fm2 == 0xffc0fffffff4a and fs3 == 0 and fe3 == 0x001 and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x1000000000005b; op2val:0x3dbffc0fffffff4a;
op3val:0x1000000000003f; valaddr_reg:x3; val_offset:534*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 534*FLEN/8, x4, x1, x2)

inst_179:
// fs1 == 0 and fe1 == 0x001 and fm1 == 0x000000000005f and fs2 == 0 and fe2 == 0x3d9 and fm2 == 0xff3ffffffff42 and fs3 == 0 and fe3 == 0x001 and fm3 == 0x0000000000030 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x1000000000005f; op2val:0x3d9ff3ffffffff42;
op3val:0x10000000000030; valaddr_reg:x3; val_offset:537*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 537*FLEN/8, x4, x1, x2)

inst_180:
// fs1 == 0 and fe1 == 0x001 and fm1 == 0x000000000005f and fs2 == 1 and fe2 == 0x3d0 and fm2 == 0xfffffffffff42 and fs3 == 0 and fe3 == 0x001 and fm3 == 0x0000000000041 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x1000000000005f; op2val:0xbd0fffffffffff42;
op3val:0x10000000000041; valaddr_reg:x3; val_offset:540*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 540*FLEN/8, x4, x1, x2)

inst_181:
// fs1 == 0 and fe1 == 0x001 and fm1 == 0x000000000005f and fs2 == 1 and fe2 == 0x400 and fm2 == 0x000000003ffad and fs3 == 0 and fe3 == 0x001 and fm3 == 0x0000000000017 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x1000000000005f; op2val:0xc00000000003ffad;
op3val:0x10000000000017; valaddr_reg:x3; val_offset:543*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 543*FLEN/8, x4, x1, x2)

inst_182:
// fs1 == 0 and fe1 == 0x001 and fm1 == 0x0000000000060 and fs2 == 1 and fe2 == 0x3ca and fm2 == 0xfffffffffff40 and fs3 == 0 and fe3 == 0x001 and fm3 == 0x0000000000011 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x10000000000060; op2val:0xbcafffffffffff40;
op3val:0x10000000000011; valaddr_reg:x3; val_offset:546*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 546*FLEN/8, x4, x1, x2)

inst_183:
// fs1 == 0 and fe1 == 0x001 and fm1 == 0x0000000000060 and fs2 == 1 and fe2 == 0x400 and fm2 == 0x0000000007fad and fs3 == 0 and fe3 == 0x001 and fm3 == 0x000000000001a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x10000000000060; op2val:0xc000000000007fad;
op3val:0x1000000000001a; valaddr_reg:x3; val_offset:549*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 549*FLEN/8, x4, x1, x2)

inst_184:
// fs1 == 0 and fe1 == 0x3f8 and fm1 == 0x0000000000001 and fs2 == 0 and fe2 == 0x3dc and fm2 == 0xffd67fffffffe and fs3 == 0 and fe3 == 0x3f8 and fm3 == 0x0000000000053 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3f80000000000001; op2val:0x3dcffd67fffffffe;
op3val:0x3f80000000000053; valaddr_reg:x3; val_offset:552*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 552*FLEN/8, x4, x1, x2)

inst_185:
// fs1 == 0 and fe1 == 0x3f8 and fm1 == 0x0000000000003 and fs2 == 0 and fe2 == 0x3d6 and fm2 == 0xfdbfffffffffa and fs3 == 0 and fe3 == 0x3f8 and fm3 == 0x0000000000012 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3f80000000000003; op2val:0x3d6fdbfffffffffa;
op3val:0x3f80000000000012; valaddr_reg:x3; val_offset:555*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 555*FLEN/8, x4, x1, x2)

inst_186:
// fs1 == 0 and fe1 == 0x3f8 and fm1 == 0x0000000000005 and fs2 == 0 and fe2 == 0x3cd and fm2 == 0x3fffffffffffa and fs3 == 0 and fe3 == 0x3f8 and fm3 == 0x000000000000b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3f80000000000005; op2val:0x3cd3fffffffffffa;
op3val:0x3f8000000000000b; valaddr_reg:x3; val_offset:558*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 558*FLEN/8, x4, x1, x2)

inst_187:
// fs1 == 0 and fe1 == 0x3f8 and fm1 == 0x0000000000005 and fs2 == 0 and fe2 == 0x3df and fm2 == 0xfff9dfffffff6 and fs3 == 0 and fe3 == 0x3f8 and fm3 == 0x0000000000062 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3f80000000000005; op2val:0x3dffff9dfffffff6;
op3val:0x3f80000000000062; valaddr_reg:x3; val_offset:561*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 561*FLEN/8, x4, x1, x2)

inst_188:
// fs1 == 0 and fe1 == 0x3f8 and fm1 == 0x0000000000008 and fs2 == 0 and fe2 == 0x3de and fm2 == 0xfff5ffffffff0 and fs3 == 0 and fe3 == 0x3f8 and fm3 == 0x0000000000050 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3f80000000000008; op2val:0x3defff5ffffffff0;
op3val:0x3f80000000000050; valaddr_reg:x3; val_offset:564*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 564*FLEN/8, x4, x1, x2)

inst_189:
// fs1 == 0 and fe1 == 0x3f8 and fm1 == 0x0000000000009 and fs2 == 0 and fe2 == 0x3d5 and fm2 == 0xf9bffffffffee and fs3 == 0 and fe3 == 0x3f8 and fm3 == 0x0000000000019 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3f80000000000009; op2val:0x3d5f9bffffffffee;
op3val:0x3f80000000000019; valaddr_reg:x3; val_offset:567*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 567*FLEN/8, x4, x1, x2)

inst_190:
// fs1 == 0 and fe1 == 0x3f8 and fm1 == 0x0000000000009 and fs2 == 1 and fe2 == 0x3d0 and fm2 == 0x07ffffffffff7 and fs3 == 0 and fe3 == 0x3f8 and fm3 == 0x0000000000025 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3f80000000000009; op2val:0xbd007ffffffffff7;
op3val:0x3f80000000000025; valaddr_reg:x3; val_offset:570*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 570*FLEN/8, x4, x1, x2)

inst_191:
// fs1 == 0 and fe1 == 0x3f8 and fm1 == 0x000000000000b and fs2 == 1 and fe2 == 0x3d1 and fm2 == 0x27ffffffffff3 and fs3 == 0 and fe3 == 0x3f8 and fm3 == 0x000000000004c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3f8000000000000b; op2val:0xbd127ffffffffff3;
op3val:0x3f8000000000004c; valaddr_reg:x3; val_offset:573*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 573*FLEN/8, x4, x1, x2)

inst_192:
// fs1 == 0 and fe1 == 0x3f8 and fm1 == 0x0000000000010 and fs2 == 0 and fe2 == 0x3d9 and fm2 == 0xfe7ffffffffe0 and fs3 == 0 and fe3 == 0x3f8 and fm3 == 0x0000000000060 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3f80000000000010; op2val:0x3d9fe7ffffffffe0;
op3val:0x3f80000000000060; valaddr_reg:x3; val_offset:576*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 576*FLEN/8, x4, x1, x2)

inst_193:
// fs1 == 0 and fe1 == 0x3f8 and fm1 == 0x0000000000014 and fs2 == 0 and fe2 == 0x3d2 and fm2 == 0x7dfffffffffe2 and fs3 == 0 and fe3 == 0x3f8 and fm3 == 0x0000000000041 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3f80000000000014; op2val:0x3d27dfffffffffe2;
op3val:0x3f80000000000041; valaddr_reg:x3; val_offset:579*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 579*FLEN/8, x4, x1, x2)

inst_194:
// fs1 == 0 and fe1 == 0x3f8 and fm1 == 0x0000000000014 and fs2 == 0 and fe2 == 0x3d4 and fm2 == 0xd8fffffffffdb and fs3 == 0 and fe3 == 0x3f8 and fm3 == 0x000000000004e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3f80000000000014; op2val:0x3d4d8fffffffffdb;
op3val:0x3f8000000000004e; valaddr_reg:x3; val_offset:582*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 582*FLEN/8, x4, x1, x2)

inst_195:
// fs1 == 0 and fe1 == 0x3f8 and fm1 == 0x0000000000027 and fs2 == 0 and fe2 == 0x3da and fm2 == 0xffa5fffffffb2 and fs3 == 0 and fe3 == 0x3f8 and fm3 == 0x000000000002d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3f80000000000027; op2val:0x3daffa5fffffffb2;
op3val:0x3f8000000000002d; valaddr_reg:x3; val_offset:585*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 585*FLEN/8, x4, x1, x2)

inst_196:
// fs1 == 0 and fe1 == 0x3f8 and fm1 == 0x000000000002a and fs2 == 0 and fe2 == 0x3db and fm2 == 0xffd0fffffffac and fs3 == 0 and fe3 == 0x3f8 and fm3 == 0x000000000002f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3f8000000000002a; op2val:0x3dbffd0fffffffac;
op3val:0x3f8000000000002f; valaddr_reg:x3; val_offset:588*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 588*FLEN/8, x4, x1, x2)

inst_197:
// fs1 == 0 and fe1 == 0x3f8 and fm1 == 0x000000000002c and fs2 == 0 and fe2 == 0x3d7 and fm2 == 0xfcdffffffffa9 and fs3 == 0 and fe3 == 0x3f8 and fm3 == 0x0000000000032 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3f8000000000002c; op2val:0x3d7fcdffffffffa9;
op3val:0x3f80000000000032; valaddr_reg:x3; val_offset:591*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 591*FLEN/8, x4, x1, x2)

inst_198:
// fs1 == 0 and fe1 == 0x3f8 and fm1 == 0x0000000000035 and fs2 == 1 and fe2 == 0x3d0 and fm2 == 0xa7fffffffffa8 and fs3 == 0 and fe3 == 0x3f8 and fm3 == 0x0000000000036 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3f80000000000035; op2val:0xbd0a7fffffffffa8;
op3val:0x3f80000000000036; valaddr_reg:x3; val_offset:594*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 594*FLEN/8, x4, x1, x2)

inst_199:
// fs1 == 0 and fe1 == 0x3f8 and fm1 == 0x000000000003f and fs2 == 0 and fe2 == 0x3d3 and fm2 == 0xa4fffffffff98 and fs3 == 0 and fe3 == 0x3f8 and fm3 == 0x000000000005b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3f8000000000003f; op2val:0x3d3a4fffffffff98;
op3val:0x3f8000000000005b; valaddr_reg:x3; val_offset:597*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 597*FLEN/8, x4, x1, x2)

inst_200:
// fs1 == 0 and fe1 == 0x3f8 and fm1 == 0x0000000000040 and fs2 == 0 and fe2 == 0x3dd and fm2 == 0xfff93ffffff80 and fs3 == 0 and fe3 == 0x3f8 and fm3 == 0x000000000001b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3f80000000000040; op2val:0x3ddfff93ffffff80;
op3val:0x3f8000000000001b; valaddr_reg:x3; val_offset:600*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 600*FLEN/8, x4, x1, x2)

inst_201:
// fs1 == 0 and fe1 == 0x3f8 and fm1 == 0x0000000000044 and fs2 == 0 and fe2 == 0x3d1 and fm2 == 0x43fffffffffaa and fs3 == 0 and fe3 == 0x3f8 and fm3 == 0x000000000002f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3f80000000000044; op2val:0x3d143fffffffffaa;
op3val:0x3f8000000000002f; valaddr_reg:x3; val_offset:603*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 603*FLEN/8, x4, x1, x2)

inst_202:
// fs1 == 0 and fe1 == 0x3f8 and fm1 == 0x000000000004b and fs2 == 0 and fe2 == 0x3e0 and fm2 == 0xffff47fffff6a and fs3 == 0 and fe3 == 0x3f8 and fm3 == 0x0000000000017 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3f8000000000004b; op2val:0x3e0ffff47fffff6a;
op3val:0x3f80000000000017; valaddr_reg:x3; val_offset:606*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 606*FLEN/8, x4, x1, x2)

inst_203:
// fs1 == 0 and fe1 == 0x3f8 and fm1 == 0x0000000000055 and fs2 == 0 and fe2 == 0x3cf and fm2 == 0x1ffffffffffa0 and fs3 == 0 and fe3 == 0x3f8 and fm3 == 0x000000000000e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3f80000000000055; op2val:0x3cf1ffffffffffa0;
op3val:0x3f8000000000000e; valaddr_reg:x3; val_offset:609*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 609*FLEN/8, x4, x1, x2)

inst_204:
// fs1 == 0 and fe1 == 0x3f8 and fm1 == 0x0000000000055 and fs2 == 0 and fe2 == 0x3d8 and fm2 == 0xfdaffffffff57 and fs3 == 0 and fe3 == 0x3f8 and fm3 == 0x000000000004a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3f80000000000055; op2val:0x3d8fdaffffffff57;
op3val:0x3f8000000000004a; valaddr_reg:x3; val_offset:612*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 612*FLEN/8, x4, x1, x2)

inst_205:
// fs1 == 0 and fe1 == 0x3f8 and fm1 == 0x000000000005c and fs2 == 1 and fe2 == 0x3cd and fm2 == 0x3ffffffffff8d and fs3 == 0 and fe3 == 0x3f8 and fm3 == 0x000000000000d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3f8000000000005c; op2val:0xbcd3ffffffffff8d;
op3val:0x3f8000000000000d; valaddr_reg:x3; val_offset:615*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 615*FLEN/8, x4, x1, x2)

inst_206:
// fs1 == 0 and fe1 == 0x3f8 and fm1 == 0x0000000000062 and fs2 == 1 and fe2 == 0x3cc and fm2 == 0x7ffffffffff6d and fs3 == 0 and fe3 == 0x3f8 and fm3 == 0x0000000000043 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3f80000000000062; op2val:0xbcc7ffffffffff6d;
op3val:0x3f80000000000043; valaddr_reg:x3; val_offset:618*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 618*FLEN/8, x4, x1, x2)

inst_207:
// fs1 == 0 and fe1 == 0x3ff and fm1 == 0x0000000000002 and fs2 == 1 and fe2 == 0x400 and fm2 == 0x0000000000021 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x0000000000026 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3ff0000000000002; op2val:0xc000000000000021;
op3val:0x3ff0000000000026; valaddr_reg:x3; val_offset:621*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 621*FLEN/8, x4, x1, x2)

inst_208:
// fs1 == 0 and fe1 == 0x3ff and fm1 == 0x0000000000002 and fs2 == 1 and fe2 == 0x400 and fm2 == 0x000000001002f and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x0000000000062 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3ff0000000000002; op2val:0xc00000000001002f;
op3val:0x3ff0000000000062; valaddr_reg:x3; val_offset:624*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 624*FLEN/8, x4, x1, x2)

inst_209:
// fs1 == 0 and fe1 == 0x3ff and fm1 == 0x0000000000004 and fs2 == 1 and fe2 == 0x400 and fm2 == 0x0000000002009 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x000000000001a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3ff0000000000004; op2val:0xc000000000002009;
op3val:0x3ff000000000001a; valaddr_reg:x3; val_offset:627*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 627*FLEN/8, x4, x1, x2)

inst_210:
// fs1 == 0 and fe1 == 0x3ff and fm1 == 0x0000000000012 and fs2 == 1 and fe2 == 0x400 and fm2 == 0x0000000100008 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x0000000000035 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3ff0000000000012; op2val:0xc000000000100008;
op3val:0x3ff0000000000035; valaddr_reg:x3; val_offset:630*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 630*FLEN/8, x4, x1, x2)

inst_211:
// fs1 == 0 and fe1 == 0x3ff and fm1 == 0x0000000000016 and fs2 == 1 and fe2 == 0x400 and fm2 == 0x0000000001014 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x0000000000055 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3ff0000000000016; op2val:0xc000000000001014;
op3val:0x3ff0000000000055; valaddr_reg:x3; val_offset:633*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 633*FLEN/8, x4, x1, x2)

inst_212:
// fs1 == 0 and fe1 == 0x3ff and fm1 == 0x0000000000016 and fs2 == 1 and fe2 == 0x400 and fm2 == 0x000000004000e and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x0000000000049 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3ff0000000000016; op2val:0xc00000000004000e;
op3val:0x3ff0000000000049; valaddr_reg:x3; val_offset:636*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 636*FLEN/8, x4, x1, x2)

inst_213:
// fs1 == 0 and fe1 == 0x3ff and fm1 == 0x0000000000017 and fs2 == 1 and fe2 == 0x400 and fm2 == 0x0000000000413 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x0000000000055 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3ff0000000000017; op2val:0xc000000000000413;
op3val:0x3ff0000000000055; valaddr_reg:x3; val_offset:639*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 639*FLEN/8, x4, x1, x2)

inst_214:
// fs1 == 0 and fe1 == 0x3ff and fm1 == 0x0000000000023 and fs2 == 1 and fe2 == 0x400 and fm2 == 0x000000000001f and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x0000000000005 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3ff0000000000023; op2val:0xc00000000000001f;
op3val:0x3ff0000000000005; valaddr_reg:x3; val_offset:642*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 642*FLEN/8, x4, x1, x2)

inst_215:
// fs1 == 0 and fe1 == 0x3ff and fm1 == 0x0000000000025 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0xffffffffffffa and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x0000000000042 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3ff0000000000025; op2val:0xbffffffffffffffa;
op3val:0x3ff0000000000042; valaddr_reg:x3; val_offset:645*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 645*FLEN/8, x4, x1, x2)

inst_216:
// fs1 == 0 and fe1 == 0x3ff and fm1 == 0x0000000000027 and fs2 == 1 and fe2 == 0x400 and fm2 == 0x0000000007fe1 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3ff0000000000027; op2val:0xc000000000007fe1;
op3val:0x3ff000000000000f; valaddr_reg:x3; val_offset:648*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 648*FLEN/8, x4, x1, x2)

inst_217:
// fs1 == 0 and fe1 == 0x3ff and fm1 == 0x000000000002c and fs2 == 1 and fe2 == 0x400 and fm2 == 0x0000000000002 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x000000000001d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3ff000000000002c; op2val:0xc000000000000002;
op3val:0x3ff000000000001d; valaddr_reg:x3; val_offset:651*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 651*FLEN/8, x4, x1, x2)

inst_218:
// fs1 == 0 and fe1 == 0x3ff and fm1 == 0x000000000002d and fs2 == 1 and fe2 == 0x3ff and fm2 == 0xfffffffffffd6 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x0000000000020 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3ff000000000002d; op2val:0xbfffffffffffffd6;
op3val:0x3ff0000000000020; valaddr_reg:x3; val_offset:654*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 654*FLEN/8, x4, x1, x2)

inst_219:
// fs1 == 0 and fe1 == 0x3ff and fm1 == 0x0000000000031 and fs2 == 1 and fe2 == 0x400 and fm2 == 0x00000000000e3 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x0000000000027 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3ff0000000000031; op2val:0xc0000000000000e3;
op3val:0x3ff0000000000027; valaddr_reg:x3; val_offset:657*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 657*FLEN/8, x4, x1, x2)

inst_220:
// fs1 == 0 and fe1 == 0x3ff and fm1 == 0x0000000000031 and fs2 == 1 and fe2 == 0x400 and fm2 == 0x000000001ffe5 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x000000000002c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3ff0000000000031; op2val:0xc00000000001ffe5;
op3val:0x3ff000000000002c; valaddr_reg:x3; val_offset:660*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 660*FLEN/8, x4, x1, x2)

inst_221:
// fs1 == 0 and fe1 == 0x3ff and fm1 == 0x0000000000033 and fs2 == 1 and fe2 == 0x400 and fm2 == 0x00000000007d5 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3ff0000000000033; op2val:0xc0000000000007d5;
op3val:0x3ff000000000000f; valaddr_reg:x3; val_offset:663*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 663*FLEN/8, x4, x1, x2)

inst_222:
// fs1 == 0 and fe1 == 0x3ff and fm1 == 0x0000000000037 and fs2 == 1 and fe2 == 0x400 and fm2 == 0x0000000000059 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x0000000000021 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3ff0000000000037; op2val:0xc000000000000059;
op3val:0x3ff0000000000021; valaddr_reg:x3; val_offset:666*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 666*FLEN/8, x4, x1, x2)

inst_223:
// fs1 == 0 and fe1 == 0x3ff and fm1 == 0x0000000000038 and fs2 == 1 and fe2 == 0x400 and fm2 == 0x000000007ffd7 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x000000000001e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3ff0000000000038; op2val:0xc00000000007ffd7;
op3val:0x3ff000000000001e; valaddr_reg:x3; val_offset:669*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 669*FLEN/8, x4, x1, x2)

inst_224:
// fs1 == 0 and fe1 == 0x3ff and fm1 == 0x0000000000041 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0xfffffffffffdc and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x000000000005a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3ff0000000000041; op2val:0xbfffffffffffffdc;
op3val:0x3ff000000000005a; valaddr_reg:x3; val_offset:672*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 672*FLEN/8, x4, x1, x2)

inst_225:
// fs1 == 0 and fe1 == 0x3ff and fm1 == 0x0000000000046 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0xfffffffffff98 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x000000000001d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3ff0000000000046; op2val:0xbfffffffffffff98;
op3val:0x3ff000000000001d; valaddr_reg:x3; val_offset:675*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 675*FLEN/8, x4, x1, x2)

inst_226:
// fs1 == 0 and fe1 == 0x3ff and fm1 == 0x0000000000049 and fs2 == 1 and fe2 == 0x400 and fm2 == 0x00000001fffd4 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x000000000003a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3ff0000000000049; op2val:0xc0000000001fffd4;
op3val:0x3ff000000000003a; valaddr_reg:x3; val_offset:678*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 678*FLEN/8, x4, x1, x2)

inst_227:
// fs1 == 0 and fe1 == 0x3ff and fm1 == 0x0000000000055 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0xfffffffffff62 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x000000000000a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3ff0000000000055; op2val:0xbfffffffffffff62;
op3val:0x3ff000000000000a; valaddr_reg:x3; val_offset:681*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 681*FLEN/8, x4, x1, x2)

inst_228:
// fs1 == 0 and fe1 == 0x3ff and fm1 == 0x000000000005b and fs2 == 1 and fe2 == 0x400 and fm2 == 0x00000000001c0 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x0000000000036 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3ff000000000005b; op2val:0xc0000000000001c0;
op3val:0x3ff0000000000036; valaddr_reg:x3; val_offset:684*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 684*FLEN/8, x4, x1, x2)

inst_229:
// fs1 == 0 and fe1 == 0x3ff and fm1 == 0x0000000000063 and fs2 == 1 and fe2 == 0x400 and fm2 == 0x0000000003fa7 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x0000000000015 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3ff0000000000063; op2val:0xc000000000003fa7;
op3val:0x3ff0000000000015; valaddr_reg:x3; val_offset:687*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 687*FLEN/8, x4, x1, x2)

inst_230:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x0000000000002 and fs2 == 1 and fe2 == 0x7ff and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x000000000000b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe0000000000002; op2val:0xfff0000000000000;
op3val:0x7fe000000000000b; valaddr_reg:x3; val_offset:690*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 690*FLEN/8, x4, x1, x2)

inst_231:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x0000000000003 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xfffffff7fff86 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x0000000000039 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe0000000000003; op2val:0x3fefffffff7fff86;
op3val:0x7fe0000000000039; valaddr_reg:x3; val_offset:693*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 693*FLEN/8, x4, x1, x2)

inst_232:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x0000000000004 and fs2 == 1 and fe2 == 0x7ff and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x0000000000050 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe0000000000004; op2val:0xfff0000000000000;
op3val:0x7fe0000000000050; valaddr_reg:x3; val_offset:696*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 696*FLEN/8, x4, x1, x2)

inst_233:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x0000000000005 and fs2 == 1 and fe2 == 0x7ff and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x0000000000005 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe0000000000005; op2val:0xfff0000000000000;
op3val:0x7fe0000000000005; valaddr_reg:x3; val_offset:699*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 699*FLEN/8, x4, x1, x2)

inst_234:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x0000000000006 and fs2 == 1 and fe2 == 0x7ff and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x000000000004d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe0000000000006; op2val:0xfff0000000000000;
op3val:0x7fe000000000004d; valaddr_reg:x3; val_offset:702*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 702*FLEN/8, x4, x1, x2)

inst_235:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x0000000000008 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xffffffffeffe4 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x0000000000005 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe0000000000008; op2val:0x3feffffffffeffe4;
op3val:0x7fe0000000000005; valaddr_reg:x3; val_offset:705*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 705*FLEN/8, x4, x1, x2)

inst_236:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x000000000000e and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xfffffffffff88 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x0000000000029 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe000000000000e; op2val:0x3fefffffffffff88;
op3val:0x7fe0000000000029; valaddr_reg:x3; val_offset:708*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 708*FLEN/8, x4, x1, x2)

inst_237:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x0000000000013 and fs2 == 1 and fe2 == 0x7ff and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x0000000000059 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe0000000000013; op2val:0xfff0000000000000;
op3val:0x7fe0000000000059; valaddr_reg:x3; val_offset:711*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 711*FLEN/8, x4, x1, x2)

inst_238:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x0000000000018 and fs2 == 1 and fe2 == 0x7ff and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x000000000003a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe0000000000018; op2val:0xfff0000000000000;
op3val:0x7fe000000000003a; valaddr_reg:x3; val_offset:714*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 714*FLEN/8, x4, x1, x2)

inst_239:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x000000000001c and fs2 == 1 and fe2 == 0x7ff and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x0000000000049 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe000000000001c; op2val:0xfff0000000000000;
op3val:0x7fe0000000000049; valaddr_reg:x3; val_offset:717*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 717*FLEN/8, x4, x1, x2)

inst_240:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x000000000001e and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xffffffffdff3e and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x0000000000042 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe000000000001e; op2val:0x3feffffffffdff3e;
op3val:0x7fe0000000000042; valaddr_reg:x3; val_offset:720*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 720*FLEN/8, x4, x1, x2)

inst_241:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x0000000000026 and fs2 == 1 and fe2 == 0x7ff and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x000000000002d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe0000000000026; op2val:0xfff0000000000000;
op3val:0x7fe000000000002d; valaddr_reg:x3; val_offset:723*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 723*FLEN/8, x4, x1, x2)

inst_242:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x0000000000026 and fs2 == 1 and fe2 == 0x7ff and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x0000000000033 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe0000000000026; op2val:0xfff0000000000000;
op3val:0x7fe0000000000033; valaddr_reg:x3; val_offset:726*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 726*FLEN/8, x4, x1, x2)

inst_243:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x0000000000027 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xfffffffdfff8c and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x0000000000012 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe0000000000027; op2val:0x3fefffffffdfff8c;
op3val:0x7fe0000000000012; valaddr_reg:x3; val_offset:729*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 729*FLEN/8, x4, x1, x2)

inst_244:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x000000000002f and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xffffffff7ff26 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x000000000003d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe000000000002f; op2val:0x3feffffffff7ff26;
op3val:0x7fe000000000003d; valaddr_reg:x3; val_offset:732*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 732*FLEN/8, x4, x1, x2)

inst_245:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x000000000002f and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xffffffffbff24 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x000000000003e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe000000000002f; op2val:0x3feffffffffbff24;
op3val:0x7fe000000000003e; valaddr_reg:x3; val_offset:735*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 735*FLEN/8, x4, x1, x2)

inst_246:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x0000000000030 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xffffffffffcdc and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x0000000000061 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe0000000000030; op2val:0x3feffffffffffcdc;
op3val:0x7fe0000000000061; valaddr_reg:x3; val_offset:738*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 738*FLEN/8, x4, x1, x2)

inst_247:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x0000000000030 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xfffffffffff3e and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x000000000002e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe0000000000030; op2val:0x3fefffffffffff3e;
op3val:0x7fe000000000002e; valaddr_reg:x3; val_offset:741*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 741*FLEN/8, x4, x1, x2)

inst_248:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x0000000000030 and fs2 == 1 and fe2 == 0x7ff and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x0000000000041 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe0000000000030; op2val:0xfff0000000000000;
op3val:0x7fe0000000000041; valaddr_reg:x3; val_offset:744*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 744*FLEN/8, x4, x1, x2)

inst_249:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x0000000000031 and fs2 == 1 and fe2 == 0x7ff and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x000000000005a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe0000000000031; op2val:0xfff0000000000000;
op3val:0x7fe000000000005a; valaddr_reg:x3; val_offset:747*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 747*FLEN/8, x4, x1, x2)

inst_250:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x0000000000037 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xffffffffffb30 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x0000000000030 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe0000000000037; op2val:0x3feffffffffffb30;
op3val:0x7fe0000000000030; valaddr_reg:x3; val_offset:750*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 750*FLEN/8, x4, x1, x2)

inst_251:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x000000000003d and fs2 == 1 and fe2 == 0x7ff and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x0000000000010 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe000000000003d; op2val:0xfff0000000000000;
op3val:0x7fe0000000000010; valaddr_reg:x3; val_offset:753*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 753*FLEN/8, x4, x1, x2)

inst_252:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x000000000003e and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xffffffffffea4 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x000000000002f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe000000000003e; op2val:0x3feffffffffffea4;
op3val:0x7fe000000000002f; valaddr_reg:x3; val_offset:756*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 756*FLEN/8, x4, x1, x2)

inst_253:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x000000000003e and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xfffffffffff36 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x0000000000016 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe000000000003e; op2val:0x3fefffffffffff36;
op3val:0x7fe0000000000016; valaddr_reg:x3; val_offset:759*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 759*FLEN/8, x4, x1, x2)

inst_254:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x000000000003f and fs2 == 1 and fe2 == 0x7ff and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x0000000000053 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe000000000003f; op2val:0xfff0000000000000;
op3val:0x7fe0000000000053; valaddr_reg:x3; val_offset:762*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 762*FLEN/8, x4, x1, x2)

inst_255:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x0000000000040 and fs2 == 1 and fe2 == 0x7ff and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x0000000000052 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe0000000000040; op2val:0xfff0000000000000;
op3val:0x7fe0000000000052; valaddr_reg:x3; val_offset:765*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 765*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_3)

inst_256:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x0000000000041 and fs2 == 1 and fe2 == 0x7ff and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x0000000000045 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe0000000000041; op2val:0xfff0000000000000;
op3val:0x7fe0000000000045; valaddr_reg:x3; val_offset:768*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 768*FLEN/8, x4, x1, x2)

inst_257:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x0000000000042 and fs2 == 1 and fe2 == 0x7ff and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x0000000000026 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe0000000000042; op2val:0xfff0000000000000;
op3val:0x7fe0000000000026; valaddr_reg:x3; val_offset:771*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 771*FLEN/8, x4, x1, x2)

inst_258:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x0000000000044 and fs2 == 1 and fe2 == 0x7ff and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x0000000000033 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe0000000000044; op2val:0xfff0000000000000;
op3val:0x7fe0000000000033; valaddr_reg:x3; val_offset:774*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 774*FLEN/8, x4, x1, x2)

inst_259:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x0000000000048 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xfffffffefff40 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x0000000000017 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe0000000000048; op2val:0x3fefffffffefff40;
op3val:0x7fe0000000000017; valaddr_reg:x3; val_offset:777*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 777*FLEN/8, x4, x1, x2)

inst_260:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x0000000000049 and fs2 == 1 and fe2 == 0x7ff and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x0000000000051 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe0000000000049; op2val:0xfff0000000000000;
op3val:0x7fe0000000000051; valaddr_reg:x3; val_offset:780*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 780*FLEN/8, x4, x1, x2)

inst_261:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x000000000004a and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xffffffffffe10 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x000000000002d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe000000000004a; op2val:0x3feffffffffffe10;
op3val:0x7fe000000000002d; valaddr_reg:x3; val_offset:783*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 783*FLEN/8, x4, x1, x2)

inst_262:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x000000000004b and fs2 == 1 and fe2 == 0x7ff and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x000000000000e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe000000000004b; op2val:0xfff0000000000000;
op3val:0x7fe000000000000e; valaddr_reg:x3; val_offset:786*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 786*FLEN/8, x4, x1, x2)

inst_263:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x000000000004b and fs2 == 1 and fe2 == 0x7ff and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x0000000000011 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe000000000004b; op2val:0xfff0000000000000;
op3val:0x7fe0000000000011; valaddr_reg:x3; val_offset:789*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 789*FLEN/8, x4, x1, x2)

inst_264:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x0000000000053 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xfffffffbfff12 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x0000000000023 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe0000000000053; op2val:0x3fefffffffbfff12;
op3val:0x7fe0000000000023; valaddr_reg:x3; val_offset:792*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 792*FLEN/8, x4, x1, x2)

inst_265:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x0000000000053 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xffffffffffeda and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe0000000000053; op2val:0x3feffffffffffeda;
op3val:0x7fe000000000001f; valaddr_reg:x3; val_offset:795*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 795*FLEN/8, x4, x1, x2)

inst_266:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x0000000000054 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xfffffffff7f04 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x0000000000029 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe0000000000054; op2val:0x3fefffffffff7f04;
op3val:0x7fe0000000000029; valaddr_reg:x3; val_offset:798*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 798*FLEN/8, x4, x1, x2)

inst_267:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x0000000000054 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xfffffffffff2a and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x000000000000e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe0000000000054; op2val:0x3fefffffffffff2a;
op3val:0x7fe000000000000e; valaddr_reg:x3; val_offset:801*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 801*FLEN/8, x4, x1, x2)

inst_268:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x0000000000056 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xfffffffffef48 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x0000000000005 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe0000000000056; op2val:0x3fefffffffffef48;
op3val:0x7fe0000000000005; valaddr_reg:x3; val_offset:804*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 804*FLEN/8, x4, x1, x2)

inst_269:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x000000000005b and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xfffffffffbe9e and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x0000000000055 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe000000000005b; op2val:0x3fefffffffffbe9e;
op3val:0x7fe0000000000055; valaddr_reg:x3; val_offset:807*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 807*FLEN/8, x4, x1, x2)

inst_270:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x000000000005c and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xffffffffffe9c and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x0000000000054 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe000000000005c; op2val:0x3feffffffffffe9c;
op3val:0x7fe0000000000054; valaddr_reg:x3; val_offset:810*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 810*FLEN/8, x4, x1, x2)

inst_271:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x000000000005f and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xfffffffffdf1a and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x0000000000013 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe000000000005f; op2val:0x3fefffffffffdf1a;
op3val:0x7fe0000000000013; valaddr_reg:x3; val_offset:813*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 813*FLEN/8, x4, x1, x2)

inst_272:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x0000000000060 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xffffffffff69c and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x0000000000051 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe0000000000060; op2val:0x3feffffffffff69c;
op3val:0x7fe0000000000051; valaddr_reg:x3; val_offset:816*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 816*FLEN/8, x4, x1, x2)

inst_273:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x0000000000063 and fs2 == 1 and fe2 == 0x7ff and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x0000000000012 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe0000000000063; op2val:0xfff0000000000000;
op3val:0x7fe0000000000012; valaddr_reg:x3; val_offset:819*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 819*FLEN/8, x4, x1, x2)

inst_274:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x0000000000063 and fs2 == 1 and fe2 == 0x7ff and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x0000000000037 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe0000000000063; op2val:0xfff0000000000000;
op3val:0x7fe0000000000037; valaddr_reg:x3; val_offset:822*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 822*FLEN/8, x4, x1, x2)

inst_275:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000001 and fs2 == 0 and fe2 == 0x408 and fm2 == 0xed80000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000026 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x1; op2val:0x408ed80000000000;
op3val:0x26; valaddr_reg:x3; val_offset:825*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 825*FLEN/8, x4, x1, x2)

inst_276:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000001 and fs2 == 1 and fe2 == 0x413 and fm2 == 0x0005c00000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000005b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x1; op2val:0xc130005c00000000;
op3val:0x5b; valaddr_reg:x3; val_offset:828*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 828*FLEN/8, x4, x1, x2)

inst_277:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000003 and fs2 == 1 and fe2 == 0x413 and fm2 == 0x55571aaaaaaab and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000054 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3; op2val:0xc1355571aaaaaaab;
op3val:0x54; valaddr_reg:x3; val_offset:831*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 831*FLEN/8, x4, x1, x2)

inst_278:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000004 and fs2 == 1 and fe2 == 0x404 and fm2 == 0x7600000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000003b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x4; op2val:0xc047600000000000;
op3val:0x3b; valaddr_reg:x3; val_offset:834*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 834*FLEN/8, x4, x1, x2)

inst_279:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000005 and fs2 == 0 and fe2 == 0x430 and fm2 == 0x99999997fffed and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000000b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5; op2val:0x43099999997fffed;
op3val:0xb; valaddr_reg:x3; val_offset:837*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 837*FLEN/8, x4, x1, x2)

inst_280:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000006 and fs2 == 1 and fe2 == 0x400 and fm2 == 0x9555555555555 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000000b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x6; op2val:0xc009555555555555;
op3val:0xb; valaddr_reg:x3; val_offset:840*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 840*FLEN/8, x4, x1, x2)

inst_281:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000007 and fs2 == 1 and fe2 == 0x40c and fm2 == 0x24b1249249249 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000001a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7; op2val:0xc0c24b1249249249;
op3val:0x1a; valaddr_reg:x3; val_offset:843*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 843*FLEN/8, x4, x1, x2)

inst_282:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000007 and fs2 == 1 and fe2 == 0x40d and fm2 == 0x24b4000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000003a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7; op2val:0xc0d24b4000000000;
op3val:0x3a; valaddr_reg:x3; val_offset:846*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 846*FLEN/8, x4, x1, x2)

inst_283:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000009 and fs2 == 0 and fe2 == 0x42f and fm2 == 0xc71c71c638dee and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000029 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x9; op2val:0x42fc71c71c638dee;
op3val:0x29; valaddr_reg:x3; val_offset:849*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 849*FLEN/8, x4, x1, x2)

inst_284:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x000000000000b and fs2 == 0 and fe2 == 0x407 and fm2 == 0x6bba2e8ba2e8c and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000060 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0xb; op2val:0x4076bba2e8ba2e8c;
op3val:0x60; valaddr_reg:x3; val_offset:852*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 852*FLEN/8, x4, x1, x2)

inst_285:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x000000000000b and fs2 == 0 and fe2 == 0x42f and fm2 == 0x745d1745d1610 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000054 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0xb; op2val:0x42f745d1745d1610;
op3val:0x54; valaddr_reg:x3; val_offset:855*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 855*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(1,64,FLEN)
NAN_BOXED(4651892959631900672,64,FLEN)
NAN_BOXED(1,64,FLEN)
NAN_BOXED(1,64,FLEN)
NAN_BOXED(1,64,FLEN)
NAN_BOXED(1,64,FLEN)
NAN_BOXED(3,64,FLEN)
NAN_BOXED(3,64,FLEN)
NAN_BOXED(84,64,FLEN)
NAN_BOXED(4,64,FLEN)
NAN_BOXED(13855148331744886784,64,FLEN)
NAN_BOXED(59,64,FLEN)
NAN_BOXED(5,64,FLEN)
NAN_BOXED(4830560960315916269,64,FLEN)
NAN_BOXED(4830560960315916269,64,FLEN)
NAN_BOXED(6,64,FLEN)
NAN_BOXED(13837685155064796501,64,FLEN)
NAN_BOXED(13837685155064796501,64,FLEN)
NAN_BOXED(7,64,FLEN)
NAN_BOXED(13889746742672659017,64,FLEN)
NAN_BOXED(7,64,FLEN)
NAN_BOXED(7,64,FLEN)
NAN_BOXED(13894250538641391616,64,FLEN)
NAN_BOXED(58,64,FLEN)
NAN_BOXED(9,64,FLEN)
NAN_BOXED(4826858000623046126,64,FLEN)
NAN_BOXED(41,64,FLEN)
NAN_BOXED(9,64,FLEN)
NAN_BOXED(14050230037478725061,64,FLEN)
NAN_BOXED(64,64,FLEN)
NAN_BOXED(11,64,FLEN)
NAN_BOXED(11,64,FLEN)
NAN_BOXED(11,64,FLEN)
NAN_BOXED(11,64,FLEN)
NAN_BOXED(11,64,FLEN)
NAN_BOXED(84,64,FLEN)
NAN_BOXED(12,64,FLEN)
NAN_BOXED(4824856400789580440,64,FLEN)
NAN_BOXED(13,64,FLEN)
NAN_BOXED(12,64,FLEN)
NAN_BOXED(13868220791991391573,64,FLEN)
NAN_BOXED(92,64,FLEN)
NAN_BOXED(13,64,FLEN)
NAN_BOXED(13899147837437096251,64,FLEN)
NAN_BOXED(9,64,FLEN)
NAN_BOXED(14,64,FLEN)
NAN_BOXED(4688890552789687150,64,FLEN)
NAN_BOXED(26,64,FLEN)
NAN_BOXED(14,64,FLEN)
NAN_BOXED(13847764639945101897,64,FLEN)
NAN_BOXED(75,64,FLEN)
NAN_BOXED(15,64,FLEN)
NAN_BOXED(4823655440888959126,64,FLEN)
NAN_BOXED(50,64,FLEN)
NAN_BOXED(15,64,FLEN)
NAN_BOXED(13893905365291045137,64,FLEN)
NAN_BOXED(14,64,FLEN)
NAN_BOXED(16,64,FLEN)
NAN_BOXED(13830554455654793216,64,FLEN)
NAN_BOXED(11,64,FLEN)
NAN_BOXED(17,64,FLEN)
NAN_BOXED(4822825365663275462,64,FLEN)
NAN_BOXED(78,64,FLEN)
NAN_BOXED(18,64,FLEN)
NAN_BOXED(4822354400992879351,64,FLEN)
NAN_BOXED(84,64,FLEN)
NAN_BOXED(18,64,FLEN)
NAN_BOXED(4822354400996605945,64,FLEN)
NAN_BOXED(3,64,FLEN)
NAN_BOXED(18,64,FLEN)
NAN_BOXED(13836559255157953877,64,FLEN)
NAN_BOXED(32,64,FLEN)
NAN_BOXED(21,64,FLEN)
NAN_BOXED(4650032795388489923,64,FLEN)
NAN_BOXED(98,64,FLEN)
NAN_BOXED(22,64,FLEN)
NAN_BOXED(4820898692026144102,64,FLEN)
NAN_BOXED(73,64,FLEN)
NAN_BOXED(23,64,FLEN)
NAN_BOXED(13834666437923261930,64,FLEN)
NAN_BOXED(44,64,FLEN)
NAN_BOXED(25,64,FLEN)
NAN_BOXED(4621526383613192438,64,FLEN)
NAN_BOXED(19,64,FLEN)
NAN_BOXED(25,64,FLEN)
NAN_BOXED(13839111294946797158,64,FLEN)
NAN_BOXED(91,64,FLEN)
NAN_BOXED(26,64,FLEN)
NAN_BOXED(4819890893508131524,64,FLEN)
NAN_BOXED(48,64,FLEN)
NAN_BOXED(26,64,FLEN)
NAN_BOXED(13831593747876494100,64,FLEN)
NAN_BOXED(65,64,FLEN)
NAN_BOXED(26,64,FLEN)
NAN_BOXED(13838089324262124623,64,FLEN)
NAN_BOXED(78,64,FLEN)
NAN_BOXED(28,64,FLEN)
NAN_BOXED(13894249144617720686,64,FLEN)
NAN_BOXED(93,64,FLEN)
NAN_BOXED(29,64,FLEN)
NAN_BOXED(4648156439978777212,64,FLEN)
NAN_BOXED(81,64,FLEN)
NAN_BOXED(29,64,FLEN)
NAN_BOXED(13836843965479224426,64,FLEN)
NAN_BOXED(64,64,FLEN)
NAN_BOXED(30,64,FLEN)
NAN_BOXED(4605080738973911177,64,FLEN)
NAN_BOXED(42,64,FLEN)
NAN_BOXED(30,64,FLEN)
NAN_BOXED(13833406735418794530,64,FLEN)
NAN_BOXED(48,64,FLEN)
NAN_BOXED(32,64,FLEN)
NAN_BOXED(4818851601286430586,64,FLEN)
NAN_BOXED(65,64,FLEN)
NAN_BOXED(32,64,FLEN)
NAN_BOXED(4818851601286430650,64,FLEN)
NAN_BOXED(30,64,FLEN)
NAN_BOXED(35,64,FLEN)
NAN_BOXED(14041451592490785214,64,FLEN)
NAN_BOXED(21,64,FLEN)
NAN_BOXED(36,64,FLEN)
NAN_BOXED(14041222838222149092,64,FLEN)
NAN_BOXED(81,64,FLEN)
NAN_BOXED(38,64,FLEN)
NAN_BOXED(4650793910956388999,64,FLEN)
NAN_BOXED(11,64,FLEN)
NAN_BOXED(38,64,FLEN)
NAN_BOXED(4677817523286324709,64,FLEN)
NAN_BOXED(84,64,FLEN)
NAN_BOXED(38,64,FLEN)
NAN_BOXED(14040801448784753346,64,FLEN)
NAN_BOXED(36,64,FLEN)
NAN_BOXED(38,64,FLEN)
NAN_BOXED(14040801448785194863,64,FLEN)
NAN_BOXED(51,64,FLEN)
NAN_BOXED(40,64,FLEN)
NAN_BOXED(4677438504267520410,64,FLEN)
NAN_BOXED(20,64,FLEN)
NAN_BOXED(40,64,FLEN)
NAN_BOXED(14040422198290258365,64,FLEN)
NAN_BOXED(27,64,FLEN)
NAN_BOXED(41,64,FLEN)
NAN_BOXED(4659243597123934857,64,FLEN)
NAN_BOXED(90,64,FLEN)
NAN_BOXED(42,64,FLEN)
NAN_BOXED(4641023920687458987,64,FLEN)
NAN_BOXED(52,64,FLEN)
NAN_BOXED(44,64,FLEN)
NAN_BOXED(13827688528619193809,64,FLEN)
NAN_BOXED(31,64,FLEN)
NAN_BOXED(46,64,FLEN)
NAN_BOXED(4662985908542106045,64,FLEN)
NAN_BOXED(83,64,FLEN)
NAN_BOXED(46,64,FLEN)
NAN_BOXED(4681002189367689928,64,FLEN)
NAN_BOXED(68,64,FLEN)
NAN_BOXED(46,64,FLEN)
NAN_BOXED(4816110279773753404,64,FLEN)
NAN_BOXED(84,64,FLEN)
NAN_BOXED(46,64,FLEN)
NAN_BOXED(14039482316628893994,64,FLEN)
NAN_BOXED(87,64,FLEN)
NAN_BOXED(47,64,FLEN)
NAN_BOXED(4815976963220695591,64,FLEN)
NAN_BOXED(10,64,FLEN)
NAN_BOXED(47,64,FLEN)
NAN_BOXED(13831416847072800332,64,FLEN)
NAN_BOXED(56,64,FLEN)
NAN_BOXED(47,64,FLEN)
NAN_BOXED(14039349000075471457,64,FLEN)
NAN_BOXED(32,64,FLEN)
NAN_BOXED(47,64,FLEN)
NAN_BOXED(14039349000081182227,64,FLEN)
NAN_BOXED(87,64,FLEN)
NAN_BOXED(49,64,FLEN)
NAN_BOXED(13824028831704929844,64,FLEN)
NAN_BOXED(17,64,FLEN)
NAN_BOXED(49,64,FLEN)
NAN_BOXED(13833495581942055581,64,FLEN)
NAN_BOXED(16,64,FLEN)
NAN_BOXED(49,64,FLEN)
NAN_BOXED(13899487142280777310,64,FLEN)
NAN_BOXED(14,64,FLEN)
NAN_BOXED(49,64,FLEN)
NAN_BOXED(14039098691460990360,64,FLEN)
NAN_BOXED(75,64,FLEN)
NAN_BOXED(50,64,FLEN)
NAN_BOXED(13846046838372947722,64,FLEN)
NAN_BOXED(64,64,FLEN)
NAN_BOXED(50,64,FLEN)
NAN_BOXED(13894866298138295009,64,FLEN)
NAN_BOXED(80,64,FLEN)
NAN_BOXED(51,64,FLEN)
NAN_BOXED(13867747786400932643,64,FLEN)
NAN_BOXED(47,64,FLEN)
NAN_BOXED(52,64,FLEN)
NAN_BOXED(13836920120512711129,64,FLEN)
NAN_BOXED(83,64,FLEN)
NAN_BOXED(52,64,FLEN)
NAN_BOXED(13854144223895274732,64,FLEN)
NAN_BOXED(12,64,FLEN)
NAN_BOXED(53,64,FLEN)
NAN_BOXED(14038654747867927725,64,FLEN)
NAN_BOXED(32,64,FLEN)
NAN_BOXED(54,64,FLEN)
NAN_BOXED(14038554038444752913,64,FLEN)
NAN_BOXED(15,64,FLEN)
NAN_BOXED(55,64,FLEN)
NAN_BOXED(4639433053972496980,64,FLEN)
NAN_BOXED(18,64,FLEN)
NAN_BOXED(55,64,FLEN)
NAN_BOXED(4815084954325356610,64,FLEN)
NAN_BOXED(6,64,FLEN)
NAN_BOXED(55,64,FLEN)
NAN_BOXED(14038456991180131860,64,FLEN)
NAN_BOXED(26,64,FLEN)
NAN_BOXED(56,64,FLEN)
NAN_BOXED(13830876141342462537,64,FLEN)
NAN_BOXED(57,64,FLEN)
NAN_BOXED(57,64,FLEN)
NAN_BOXED(4630162134661825087,64,FLEN)
NAN_BOXED(37,64,FLEN)
NAN_BOXED(59,64,FLEN)
NAN_BOXED(13871472985876170370,64,FLEN)
NAN_BOXED(29,64,FLEN)
NAN_BOXED(60,64,FLEN)
NAN_BOXED(4814648241634200717,64,FLEN)
NAN_BOXED(59,64,FLEN)
NAN_BOXED(61,64,FLEN)
NAN_BOXED(13829373183621384561,64,FLEN)
NAN_BOXED(20,64,FLEN)
NAN_BOXED(61,64,FLEN)
NAN_BOXED(13862343824233545459,64,FLEN)
NAN_BOXED(73,64,FLEN)
NAN_BOXED(61,64,FLEN)
NAN_BOXED(13875815473291795809,64,FLEN)
NAN_BOXED(49,64,FLEN)
NAN_BOXED(63,64,FLEN)
NAN_BOXED(4603608133381469395,64,FLEN)
NAN_BOXED(90,64,FLEN)
NAN_BOXED(63,64,FLEN)
NAN_BOXED(13840687554816376832,64,FLEN)
NAN_BOXED(59,64,FLEN)
NAN_BOXED(63,64,FLEN)
NAN_BOXED(13857681048053186040,64,FLEN)
NAN_BOXED(30,64,FLEN)
NAN_BOXED(63,64,FLEN)
NAN_BOXED(14037791524222204980,64,FLEN)
NAN_BOXED(68,64,FLEN)
NAN_BOXED(63,64,FLEN)
NAN_BOXED(14037791524222207039,64,FLEN)
NAN_BOXED(48,64,FLEN)
NAN_BOXED(64,64,FLEN)
NAN_BOXED(4665728097264336896,64,FLEN)
NAN_BOXED(65,64,FLEN)
NAN_BOXED(64,64,FLEN)
NAN_BOXED(4814348001659060130,64,FLEN)
NAN_BOXED(14,64,FLEN)
NAN_BOXED(64,64,FLEN)
NAN_BOXED(13831680355561635840,64,FLEN)
NAN_BOXED(84,64,FLEN)
NAN_BOXED(65,64,FLEN)
NAN_BOXED(13829723021877432509,64,FLEN)
NAN_BOXED(27,64,FLEN)
NAN_BOXED(65,64,FLEN)
NAN_BOXED(14037581466216576870,64,FLEN)
NAN_BOXED(35,64,FLEN)
NAN_BOXED(65,64,FLEN)
NAN_BOXED(14037581466217601201,64,FLEN)
NAN_BOXED(11,64,FLEN)
NAN_BOXED(66,64,FLEN)
NAN_BOXED(13853136425377261754,64,FLEN)
NAN_BOXED(93,64,FLEN)
NAN_BOXED(67,64,FLEN)
NAN_BOXED(4665325282922907312,64,FLEN)
NAN_BOXED(39,64,FLEN)
NAN_BOXED(67,64,FLEN)
NAN_BOXED(13822152217544027365,64,FLEN)
NAN_BOXED(27,64,FLEN)
NAN_BOXED(67,64,FLEN)
NAN_BOXED(13870697461078681875,64,FLEN)
NAN_BOXED(53,64,FLEN)
NAN_BOXED(68,64,FLEN)
NAN_BOXED(4607910942269150871,64,FLEN)
NAN_BOXED(50,64,FLEN)
NAN_BOXED(68,64,FLEN)
NAN_BOXED(13817308574397821169,64,FLEN)
NAN_BOXED(12,64,FLEN)
NAN_BOXED(69,64,FLEN)
NAN_BOXED(4651554373790350173,64,FLEN)
NAN_BOXED(89,64,FLEN)
NAN_BOXED(70,64,FLEN)
NAN_BOXED(4605767001774272395,64,FLEN)
NAN_BOXED(5,64,FLEN)
NAN_BOXED(71,64,FLEN)
NAN_BOXED(4651323815246773580,64,FLEN)
NAN_BOXED(54,64,FLEN)
NAN_BOXED(72,64,FLEN)
NAN_BOXED(4633113301029486592,64,FLEN)
NAN_BOXED(46,64,FLEN)
NAN_BOXED(73,64,FLEN)
NAN_BOXED(4813237525038497769,64,FLEN)
NAN_BOXED(12,64,FLEN)
NAN_BOXED(74,64,FLEN)
NAN_BOXED(13847541850870871455,64,FLEN)
NAN_BOXED(25,64,FLEN)
NAN_BOXED(75,64,FLEN)
NAN_BOXED(4618486453864717353,64,FLEN)
NAN_BOXED(59,64,FLEN)
NAN_BOXED(75,64,FLEN)
NAN_BOXED(13809297465413604475,64,FLEN)
NAN_BOXED(19,64,FLEN)
NAN_BOXED(77,64,FLEN)
NAN_BOXED(4646191149358946543,64,FLEN)
NAN_BOXED(13,64,FLEN)
NAN_BOXED(77,64,FLEN)
NAN_BOXED(4812827305680986942,64,FLEN)
NAN_BOXED(68,64,FLEN)
NAN_BOXED(77,64,FLEN)
NAN_BOXED(13828097946767136582,64,FLEN)
NAN_BOXED(65,64,FLEN)
NAN_BOXED(77,64,FLEN)
NAN_BOXED(13896588039674713287,64,FLEN)
NAN_BOXED(79,64,FLEN)
NAN_BOXED(78,64,FLEN)
NAN_BOXED(4598983557939932659,64,FLEN)
NAN_BOXED(9,64,FLEN)
NAN_BOXED(78,64,FLEN)
NAN_BOXED(14036103361724523248,64,FLEN)
NAN_BOXED(75,64,FLEN)
NAN_BOXED(79,64,FLEN)
NAN_BOXED(4627858359177890025,64,FLEN)
NAN_BOXED(38,64,FLEN)
NAN_BOXED(79,64,FLEN)
NAN_BOXED(4812637773952460473,64,FLEN)
NAN_BOXED(25,64,FLEN)
NAN_BOXED(79,64,FLEN)
NAN_BOXED(14036009810807239695,64,FLEN)
NAN_BOXED(50,64,FLEN)
NAN_BOXED(80,64,FLEN)
NAN_BOXED(4668431195061616640,64,FLEN)
NAN_BOXED(26,64,FLEN)
NAN_BOXED(80,64,FLEN)
NAN_BOXED(14035918598662678174,64,FLEN)
NAN_BOXED(36,64,FLEN)
NAN_BOXED(81,64,FLEN)
NAN_BOXED(4668342108319720132,64,FLEN)
NAN_BOXED(46,64,FLEN)
NAN_BOXED(83,64,FLEN)
NAN_BOXED(4618292202218139204,64,FLEN)
NAN_BOXED(26,64,FLEN)
NAN_BOXED(83,64,FLEN)
NAN_BOXED(13842247536615014203,64,FLEN)
NAN_BOXED(17,64,FLEN)
NAN_BOXED(85,64,FLEN)
NAN_BOXED(13882373222741370085,64,FLEN)
NAN_BOXED(34,64,FLEN)
NAN_BOXED(85,64,FLEN)
NAN_BOXED(13900386754576980763,64,FLEN)
NAN_BOXED(8,64,FLEN)
NAN_BOXED(86,64,FLEN)
NAN_BOXED(4812043834407798585,64,FLEN)
NAN_BOXED(37,64,FLEN)
NAN_BOXED(88,64,FLEN)
NAN_BOXED(4811891492771397581,64,FLEN)
NAN_BOXED(34,64,FLEN)
NAN_BOXED(88,64,FLEN)
NAN_BOXED(14035263529626179449,64,FLEN)
NAN_BOXED(68,64,FLEN)
NAN_BOXED(89,64,FLEN)
NAN_BOXED(13816132816398606796,64,FLEN)
NAN_BOXED(12,64,FLEN)
NAN_BOXED(89,64,FLEN)
NAN_BOXED(14035189926363627930,64,FLEN)
NAN_BOXED(94,64,FLEN)
NAN_BOXED(90,64,FLEN)
NAN_BOXED(13863994855700422110,64,FLEN)
NAN_BOXED(35,64,FLEN)
NAN_BOXED(91,64,FLEN)
NAN_BOXED(13827090148249123604,64,FLEN)
NAN_BOXED(73,64,FLEN)
NAN_BOXED(93,64,FLEN)
NAN_BOXED(13838181519539856153,64,FLEN)
NAN_BOXED(58,64,FLEN)
NAN_BOXED(93,64,FLEN)
NAN_BOXED(13846111244690199365,64,FLEN)
NAN_BOXED(57,64,FLEN)
NAN_BOXED(93,64,FLEN)
NAN_BOXED(13877286064376408218,64,FLEN)
NAN_BOXED(15,64,FLEN)
NAN_BOXED(94,64,FLEN)
NAN_BOXED(4621873017052596965,64,FLEN)
NAN_BOXED(75,64,FLEN)
NAN_BOXED(94,64,FLEN)
NAN_BOXED(14034845400453767737,64,FLEN)
NAN_BOXED(35,64,FLEN)
NAN_BOXED(95,64,FLEN)
NAN_BOXED(4658285473940563903,64,FLEN)
NAN_BOXED(42,64,FLEN)
NAN_BOXED(96,64,FLEN)
NAN_BOXED(4611592193435151019,64,FLEN)
NAN_BOXED(67,64,FLEN)
NAN_BOXED(96,64,FLEN)
NAN_BOXED(4653717461739241472,64,FLEN)
NAN_BOXED(48,64,FLEN)
NAN_BOXED(96,64,FLEN)
NAN_BOXED(4811345601907479811,64,FLEN)
NAN_BOXED(59,64,FLEN)
NAN_BOXED(96,64,FLEN)
NAN_BOXED(13830179155685845675,64,FLEN)
NAN_BOXED(97,64,FLEN)
NAN_BOXED(98,64,FLEN)
NAN_BOXED(13858956860511400354,64,FLEN)
NAN_BOXED(3,64,FLEN)
NAN_BOXED(4503599627370501,64,FLEN)
NAN_BOXED(13835058055282163747,64,FLEN)
NAN_BOXED(4503599627370573,64,FLEN)
NAN_BOXED(4503599627370504,64,FLEN)
NAN_BOXED(13835058055282294812,64,FLEN)
NAN_BOXED(4503599627370568,64,FLEN)
NAN_BOXED(4503599627370505,64,FLEN)
NAN_BOXED(13835058055282163753,64,FLEN)
NAN_BOXED(4503599627370563,64,FLEN)
NAN_BOXED(4503599627370505,64,FLEN)
NAN_BOXED(13835058055282165757,64,FLEN)
NAN_BOXED(4503599627370509,64,FLEN)
NAN_BOXED(4503599627370507,64,FLEN)
NAN_BOXED(13611003973820481522,64,FLEN)
NAN_BOXED(4503599627370514,64,FLEN)
NAN_BOXED(4503599627370507,64,FLEN)
NAN_BOXED(13835058055282171912,64,FLEN)
NAN_BOXED(4503599627370534,64,FLEN)
NAN_BOXED(4503599627370510,64,FLEN)
NAN_BOXED(13835058055282229238,64,FLEN)
NAN_BOXED(4503599627370503,64,FLEN)
NAN_BOXED(4503599627370511,64,FLEN)
NAN_BOXED(13835058055282163775,64,FLEN)
NAN_BOXED(4503599627370589,64,FLEN)
NAN_BOXED(4503599627370513,64,FLEN)
NAN_BOXED(4472074352669491166,64,FLEN)
NAN_BOXED(4503599627370532,64,FLEN)
NAN_BOXED(4503599627370514,64,FLEN)
NAN_BOXED(4405575966731010026,64,FLEN)
NAN_BOXED(4503599627370594,64,FLEN)
NAN_BOXED(4503599627370517,64,FLEN)
NAN_BOXED(13835058055282163963,64,FLEN)
NAN_BOXED(4503599627370529,64,FLEN)
NAN_BOXED(4503599627370518,64,FLEN)
NAN_BOXED(13835058055282688014,64,FLEN)
NAN_BOXED(4503599627370568,64,FLEN)
NAN_BOXED(4503599627370519,64,FLEN)
NAN_BOXED(4402972323196436442,64,FLEN)
NAN_BOXED(4503599627370518,64,FLEN)
NAN_BOXED(4503599627370519,64,FLEN)
NAN_BOXED(13835058055282180095,64,FLEN)
NAN_BOXED(4503599627370540,64,FLEN)
NAN_BOXED(4503599627370524,64,FLEN)
NAN_BOXED(4388194886919127002,64,FLEN)
NAN_BOXED(4503599627370549,64,FLEN)
NAN_BOXED(4503599627370525,64,FLEN)
NAN_BOXED(13611003973820481500,64,FLEN)
NAN_BOXED(4503599627370538,64,FLEN)
NAN_BOXED(4503599627370526,64,FLEN)
NAN_BOXED(13835058055282163729,64,FLEN)
NAN_BOXED(4503599627370589,64,FLEN)
NAN_BOXED(4503599627370534,64,FLEN)
NAN_BOXED(13835058055282163726,64,FLEN)
NAN_BOXED(4503599627370592,64,FLEN)
NAN_BOXED(4503599627370534,64,FLEN)
NAN_BOXED(13835058055284260842,64,FLEN)
NAN_BOXED(4503599627370528,64,FLEN)
NAN_BOXED(4503599627370536,64,FLEN)
NAN_BOXED(4463066930076450736,64,FLEN)
NAN_BOXED(4503599627370531,64,FLEN)
NAN_BOXED(4503599627370537,64,FLEN)
NAN_BOXED(13835058055282163662,64,FLEN)
NAN_BOXED(4503599627370525,64,FLEN)
NAN_BOXED(4503599627370542,64,FLEN)
NAN_BOXED(13835058055282163678,64,FLEN)
NAN_BOXED(4503599627370538,64,FLEN)
NAN_BOXED(4503599627370543,64,FLEN)
NAN_BOXED(4454056767294275490,64,FLEN)
NAN_BOXED(4503599627370591,64,FLEN)
NAN_BOXED(4503599627370546,64,FLEN)
NAN_BOXED(13835058055282164184,64,FLEN)
NAN_BOXED(4503599627370516,64,FLEN)
NAN_BOXED(4503599627370550,64,FLEN)
NAN_BOXED(4431480460681412501,64,FLEN)
NAN_BOXED(4503599627370552,64,FLEN)
NAN_BOXED(4503599627370552,64,FLEN)
NAN_BOXED(13835058055282163794,64,FLEN)
NAN_BOXED(4503599627370517,64,FLEN)
NAN_BOXED(4503599627370552,64,FLEN)
NAN_BOXED(13835058055282164727,64,FLEN)
NAN_BOXED(4503599627370590,64,FLEN)
NAN_BOXED(4503599627370553,64,FLEN)
NAN_BOXED(4413386897334730640,64,FLEN)
NAN_BOXED(4503599627370504,64,FLEN)
NAN_BOXED(4503599627370558,64,FLEN)
NAN_BOXED(13612692823680745371,64,FLEN)
NAN_BOXED(4503599627370511,64,FLEN)
NAN_BOXED(4503599627370564,64,FLEN)
NAN_BOXED(4458563218779930488,64,FLEN)
NAN_BOXED(4503599627370520,64,FLEN)
NAN_BOXED(4503599627370565,64,FLEN)
NAN_BOXED(13835058055282167753,64,FLEN)
NAN_BOXED(4503599627370525,64,FLEN)
NAN_BOXED(4503599627370569,64,FLEN)
NAN_BOXED(13625077722656014236,64,FLEN)
NAN_BOXED(4503599627370588,64,FLEN)
NAN_BOXED(4503599627370571,64,FLEN)
NAN_BOXED(4422156602077871984,64,FLEN)
NAN_BOXED(4503599627370582,64,FLEN)
NAN_BOXED(4503599627370571,64,FLEN)
NAN_BOXED(4435997254448316267,64,FLEN)
NAN_BOXED(4503599627370584,64,FLEN)
NAN_BOXED(4503599627370575,64,FLEN)
NAN_BOXED(4426957069844741987,64,FLEN)
NAN_BOXED(4503599627370533,64,FLEN)
NAN_BOXED(4503599627370575,64,FLEN)
NAN_BOXED(13835058055282163719,64,FLEN)
NAN_BOXED(4503599627370541,64,FLEN)
NAN_BOXED(4503599627370578,64,FLEN)
NAN_BOXED(13835058055283212227,64,FLEN)
NAN_BOXED(4503599627370538,64,FLEN)
NAN_BOXED(4503599627370584,64,FLEN)
NAN_BOXED(4467570568358526800,64,FLEN)
NAN_BOXED(4503599627370557,64,FLEN)
NAN_BOXED(4503599627370585,64,FLEN)
NAN_BOXED(4417521061055168344,64,FLEN)
NAN_BOXED(4503599627370554,64,FLEN)
NAN_BOXED(4503599627370585,64,FLEN)
NAN_BOXED(4445042799171075918,64,FLEN)
NAN_BOXED(4503599627370569,64,FLEN)
NAN_BOXED(4503599627370587,64,FLEN)
NAN_BOXED(4449552102515015498,64,FLEN)
NAN_BOXED(4503599627370559,64,FLEN)
NAN_BOXED(4503599627370591,64,FLEN)
NAN_BOXED(4440536038447775554,64,FLEN)
NAN_BOXED(4503599627370544,64,FLEN)
NAN_BOXED(4503599627370591,64,FLEN)
NAN_BOXED(13623388872795750210,64,FLEN)
NAN_BOXED(4503599627370561,64,FLEN)
NAN_BOXED(4503599627370591,64,FLEN)
NAN_BOXED(13835058055282425773,64,FLEN)
NAN_BOXED(4503599627370519,64,FLEN)
NAN_BOXED(4503599627370592,64,FLEN)
NAN_BOXED(13596367275031527232,64,FLEN)
NAN_BOXED(4503599627370513,64,FLEN)
NAN_BOXED(4503599627370592,64,FLEN)
NAN_BOXED(13835058055282196397,64,FLEN)
NAN_BOXED(4503599627370522,64,FLEN)
NAN_BOXED(4575657221408423937,64,FLEN)
NAN_BOXED(4454057179611135998,64,FLEN)
NAN_BOXED(4575657221408424019,64,FLEN)
NAN_BOXED(4575657221408423939,64,FLEN)
NAN_BOXED(4426998851286597626,64,FLEN)
NAN_BOXED(4575657221408423954,64,FLEN)
NAN_BOXED(4575657221408423941,64,FLEN)
NAN_BOXED(4383128337338335226,64,FLEN)
NAN_BOXED(4575657221408423947,64,FLEN)
NAN_BOXED(4575657221408423941,64,FLEN)
NAN_BOXED(4467570409444737014,64,FLEN)
NAN_BOXED(4575657221408424034,64,FLEN)
NAN_BOXED(4575657221408423944,64,FLEN)
NAN_BOXED(4463066543529394160,64,FLEN)
NAN_BOXED(4575657221408424016,64,FLEN)
NAN_BOXED(4575657221408423945,64,FLEN)
NAN_BOXED(4422424882915049454,64,FLEN)
NAN_BOXED(4575657221408423961,64,FLEN)
NAN_BOXED(4575657221408423945,64,FLEN)
NAN_BOXED(13619026010656735223,64,FLEN)
NAN_BOXED(4575657221408423973,64,FLEN)
NAN_BOXED(4575657221408423947,64,FLEN)
NAN_BOXED(13624092560237527027,64,FLEN)
NAN_BOXED(4575657221408424012,64,FLEN)
NAN_BOXED(4575657221408423952,64,FLEN)
NAN_BOXED(4440522844308242400,64,FLEN)
NAN_BOXED(4575657221408424032,64,FLEN)
NAN_BOXED(4575657221408423956,64,FLEN)
NAN_BOXED(4406737051009941474,64,FLEN)
NAN_BOXED(4575657221408424001,64,FLEN)
NAN_BOXED(4575657221408423956,64,FLEN)
NAN_BOXED(4417345139194724315,64,FLEN)
NAN_BOXED(4575657221408424014,64,FLEN)
NAN_BOXED(4575657221408423975,64,FLEN)
NAN_BOXED(4445046647461773234,64,FLEN)
NAN_BOXED(4575657221408423981,64,FLEN)
NAN_BOXED(4575657221408423978,64,FLEN)
NAN_BOXED(4449553202026643372,64,FLEN)
NAN_BOXED(4575657221408423983,64,FLEN)
NAN_BOXED(4575657221408423980,64,FLEN)
NAN_BOXED(4431487057751179177,64,FLEN)
NAN_BOXED(4575657221408423986,64,FLEN)
NAN_BOXED(4575657221408423989,64,FLEN)
NAN_BOXED(13621840760423841704,64,FLEN)
NAN_BOXED(4575657221408423990,64,FLEN)
NAN_BOXED(4575657221408423999,64,FLEN)
NAN_BOXED(4411926745893044120,64,FLEN)
NAN_BOXED(4575657221408424027,64,FLEN)
NAN_BOXED(4575657221408424000,64,FLEN)
NAN_BOXED(4458563167240322944,64,FLEN)
NAN_BOXED(4575657221408423963,64,FLEN)
NAN_BOXED(4575657221408424004,64,FLEN)
NAN_BOXED(4401213104591994794,64,FLEN)
NAN_BOXED(4575657221408423983,64,FLEN)
NAN_BOXED(4575657221408424011,64,FLEN)
NAN_BOXED(4472074380586778474,64,FLEN)
NAN_BOXED(4575657221408423959,64,FLEN)
NAN_BOXED(4575657221408424021,64,FLEN)
NAN_BOXED(4391572586639654816,64,FLEN)
NAN_BOXED(4575657221408423950,64,FLEN)
NAN_BOXED(4575657221408424021,64,FLEN)
NAN_BOXED(4436004951029710679,64,FLEN)
NAN_BOXED(4575657221408424010,64,FLEN)
NAN_BOXED(4575657221408424028,64,FLEN)
NAN_BOXED(13606500374193110925,64,FLEN)
NAN_BOXED(4575657221408423949,64,FLEN)
NAN_BOXED(4575657221408424034,64,FLEN)
NAN_BOXED(13603122674472583021,64,FLEN)
NAN_BOXED(4575657221408424003,64,FLEN)
NAN_BOXED(4607182418800017410,64,FLEN)
NAN_BOXED(13835058055282163745,64,FLEN)
NAN_BOXED(4607182418800017446,64,FLEN)
NAN_BOXED(4607182418800017410,64,FLEN)
NAN_BOXED(13835058055282229295,64,FLEN)
NAN_BOXED(4607182418800017506,64,FLEN)
NAN_BOXED(4607182418800017412,64,FLEN)
NAN_BOXED(13835058055282171913,64,FLEN)
NAN_BOXED(4607182418800017434,64,FLEN)
NAN_BOXED(4607182418800017426,64,FLEN)
NAN_BOXED(13835058055283212296,64,FLEN)
NAN_BOXED(4607182418800017461,64,FLEN)
NAN_BOXED(4607182418800017430,64,FLEN)
NAN_BOXED(13835058055282167828,64,FLEN)
NAN_BOXED(4607182418800017493,64,FLEN)
NAN_BOXED(4607182418800017430,64,FLEN)
NAN_BOXED(13835058055282425870,64,FLEN)
NAN_BOXED(4607182418800017481,64,FLEN)
NAN_BOXED(4607182418800017431,64,FLEN)
NAN_BOXED(13835058055282164755,64,FLEN)
NAN_BOXED(4607182418800017493,64,FLEN)
NAN_BOXED(4607182418800017443,64,FLEN)
NAN_BOXED(13835058055282163743,64,FLEN)
NAN_BOXED(4607182418800017413,64,FLEN)
NAN_BOXED(4607182418800017445,64,FLEN)
NAN_BOXED(13835058055282163706,64,FLEN)
NAN_BOXED(4607182418800017474,64,FLEN)
NAN_BOXED(4607182418800017447,64,FLEN)
NAN_BOXED(13835058055282196449,64,FLEN)
NAN_BOXED(4607182418800017423,64,FLEN)
NAN_BOXED(4607182418800017452,64,FLEN)
NAN_BOXED(13835058055282163714,64,FLEN)
NAN_BOXED(4607182418800017437,64,FLEN)
NAN_BOXED(4607182418800017453,64,FLEN)
NAN_BOXED(13835058055282163670,64,FLEN)
NAN_BOXED(4607182418800017440,64,FLEN)
NAN_BOXED(4607182418800017457,64,FLEN)
NAN_BOXED(13835058055282163939,64,FLEN)
NAN_BOXED(4607182418800017447,64,FLEN)
NAN_BOXED(4607182418800017457,64,FLEN)
NAN_BOXED(13835058055282294757,64,FLEN)
NAN_BOXED(4607182418800017452,64,FLEN)
NAN_BOXED(4607182418800017459,64,FLEN)
NAN_BOXED(13835058055282165717,64,FLEN)
NAN_BOXED(4607182418800017423,64,FLEN)
NAN_BOXED(4607182418800017463,64,FLEN)
NAN_BOXED(13835058055282163801,64,FLEN)
NAN_BOXED(4607182418800017441,64,FLEN)
NAN_BOXED(4607182418800017464,64,FLEN)
NAN_BOXED(13835058055282687959,64,FLEN)
NAN_BOXED(4607182418800017438,64,FLEN)
NAN_BOXED(4607182418800017473,64,FLEN)
NAN_BOXED(13835058055282163676,64,FLEN)
NAN_BOXED(4607182418800017498,64,FLEN)
NAN_BOXED(4607182418800017478,64,FLEN)
NAN_BOXED(13835058055282163608,64,FLEN)
NAN_BOXED(4607182418800017437,64,FLEN)
NAN_BOXED(4607182418800017481,64,FLEN)
NAN_BOXED(13835058055284260820,64,FLEN)
NAN_BOXED(4607182418800017466,64,FLEN)
NAN_BOXED(4607182418800017493,64,FLEN)
NAN_BOXED(13835058055282163554,64,FLEN)
NAN_BOXED(4607182418800017418,64,FLEN)
NAN_BOXED(4607182418800017499,64,FLEN)
NAN_BOXED(13835058055282164160,64,FLEN)
NAN_BOXED(4607182418800017462,64,FLEN)
NAN_BOXED(4607182418800017507,64,FLEN)
NAN_BOXED(13835058055282180007,64,FLEN)
NAN_BOXED(4607182418800017429,64,FLEN)
NAN_BOXED(9214364837600034818,64,FLEN)
NAN_BOXED(18442240474082181120,64,FLEN)
NAN_BOXED(9214364837600034827,64,FLEN)
NAN_BOXED(9214364837600034819,64,FLEN)
NAN_BOXED(4607182418791628678,64,FLEN)
NAN_BOXED(9214364837600034873,64,FLEN)
NAN_BOXED(9214364837600034820,64,FLEN)
NAN_BOXED(18442240474082181120,64,FLEN)
NAN_BOXED(9214364837600034896,64,FLEN)
NAN_BOXED(9214364837600034821,64,FLEN)
NAN_BOXED(18442240474082181120,64,FLEN)
NAN_BOXED(9214364837600034821,64,FLEN)
NAN_BOXED(9214364837600034822,64,FLEN)
NAN_BOXED(18442240474082181120,64,FLEN)
NAN_BOXED(9214364837600034893,64,FLEN)
NAN_BOXED(9214364837600034824,64,FLEN)
NAN_BOXED(4607182418799951844,64,FLEN)
NAN_BOXED(9214364837600034821,64,FLEN)
NAN_BOXED(9214364837600034830,64,FLEN)
NAN_BOXED(4607182418800017288,64,FLEN)
NAN_BOXED(9214364837600034857,64,FLEN)
NAN_BOXED(9214364837600034835,64,FLEN)
NAN_BOXED(18442240474082181120,64,FLEN)
NAN_BOXED(9214364837600034905,64,FLEN)
NAN_BOXED(9214364837600034840,64,FLEN)
NAN_BOXED(18442240474082181120,64,FLEN)
NAN_BOXED(9214364837600034874,64,FLEN)
NAN_BOXED(9214364837600034844,64,FLEN)
NAN_BOXED(18442240474082181120,64,FLEN)
NAN_BOXED(9214364837600034889,64,FLEN)
NAN_BOXED(9214364837600034846,64,FLEN)
NAN_BOXED(4607182418799886142,64,FLEN)
NAN_BOXED(9214364837600034882,64,FLEN)
NAN_BOXED(9214364837600034854,64,FLEN)
NAN_BOXED(18442240474082181120,64,FLEN)
NAN_BOXED(9214364837600034861,64,FLEN)
NAN_BOXED(9214364837600034854,64,FLEN)
NAN_BOXED(18442240474082181120,64,FLEN)
NAN_BOXED(9214364837600034867,64,FLEN)
NAN_BOXED(9214364837600034855,64,FLEN)
NAN_BOXED(4607182418797920140,64,FLEN)
NAN_BOXED(9214364837600034834,64,FLEN)
NAN_BOXED(9214364837600034863,64,FLEN)
NAN_BOXED(4607182418799492902,64,FLEN)
NAN_BOXED(9214364837600034877,64,FLEN)
NAN_BOXED(9214364837600034863,64,FLEN)
NAN_BOXED(4607182418799755044,64,FLEN)
NAN_BOXED(9214364837600034878,64,FLEN)
NAN_BOXED(9214364837600034864,64,FLEN)
NAN_BOXED(4607182418800016604,64,FLEN)
NAN_BOXED(9214364837600034913,64,FLEN)
NAN_BOXED(9214364837600034864,64,FLEN)
NAN_BOXED(4607182418800017214,64,FLEN)
NAN_BOXED(9214364837600034862,64,FLEN)
NAN_BOXED(9214364837600034864,64,FLEN)
NAN_BOXED(18442240474082181120,64,FLEN)
NAN_BOXED(9214364837600034881,64,FLEN)
NAN_BOXED(9214364837600034865,64,FLEN)
NAN_BOXED(18442240474082181120,64,FLEN)
NAN_BOXED(9214364837600034906,64,FLEN)
NAN_BOXED(9214364837600034871,64,FLEN)
NAN_BOXED(4607182418800016176,64,FLEN)
NAN_BOXED(9214364837600034864,64,FLEN)
NAN_BOXED(9214364837600034877,64,FLEN)
NAN_BOXED(18442240474082181120,64,FLEN)
NAN_BOXED(9214364837600034832,64,FLEN)
NAN_BOXED(9214364837600034878,64,FLEN)
NAN_BOXED(4607182418800017060,64,FLEN)
NAN_BOXED(9214364837600034863,64,FLEN)
NAN_BOXED(9214364837600034878,64,FLEN)
NAN_BOXED(4607182418800017206,64,FLEN)
NAN_BOXED(9214364837600034838,64,FLEN)
NAN_BOXED(9214364837600034879,64,FLEN)
NAN_BOXED(18442240474082181120,64,FLEN)
NAN_BOXED(9214364837600034899,64,FLEN)
NAN_BOXED(9214364837600034880,64,FLEN)
NAN_BOXED(18442240474082181120,64,FLEN)
NAN_BOXED(9214364837600034898,64,FLEN)
NAN_BOXED(9214364837600034881,64,FLEN)
NAN_BOXED(18442240474082181120,64,FLEN)
NAN_BOXED(9214364837600034885,64,FLEN)
NAN_BOXED(9214364837600034882,64,FLEN)
NAN_BOXED(18442240474082181120,64,FLEN)
NAN_BOXED(9214364837600034854,64,FLEN)
NAN_BOXED(9214364837600034884,64,FLEN)
NAN_BOXED(18442240474082181120,64,FLEN)
NAN_BOXED(9214364837600034867,64,FLEN)
NAN_BOXED(9214364837600034888,64,FLEN)
NAN_BOXED(4607182418798968640,64,FLEN)
NAN_BOXED(9214364837600034839,64,FLEN)
NAN_BOXED(9214364837600034889,64,FLEN)
NAN_BOXED(18442240474082181120,64,FLEN)
NAN_BOXED(9214364837600034897,64,FLEN)
NAN_BOXED(9214364837600034890,64,FLEN)
NAN_BOXED(4607182418800016912,64,FLEN)
NAN_BOXED(9214364837600034861,64,FLEN)
NAN_BOXED(9214364837600034891,64,FLEN)
NAN_BOXED(18442240474082181120,64,FLEN)
NAN_BOXED(9214364837600034830,64,FLEN)
NAN_BOXED(9214364837600034891,64,FLEN)
NAN_BOXED(18442240474082181120,64,FLEN)
NAN_BOXED(9214364837600034833,64,FLEN)
NAN_BOXED(9214364837600034899,64,FLEN)
NAN_BOXED(4607182418795822866,64,FLEN)
NAN_BOXED(9214364837600034851,64,FLEN)
NAN_BOXED(9214364837600034899,64,FLEN)
NAN_BOXED(4607182418800017114,64,FLEN)
NAN_BOXED(9214364837600034847,64,FLEN)
NAN_BOXED(9214364837600034900,64,FLEN)
NAN_BOXED(4607182418799984388,64,FLEN)
NAN_BOXED(9214364837600034857,64,FLEN)
NAN_BOXED(9214364837600034900,64,FLEN)
NAN_BOXED(4607182418800017194,64,FLEN)
NAN_BOXED(9214364837600034830,64,FLEN)
NAN_BOXED(9214364837600034902,64,FLEN)
NAN_BOXED(4607182418800013128,64,FLEN)
NAN_BOXED(9214364837600034821,64,FLEN)
NAN_BOXED(9214364837600034907,64,FLEN)
NAN_BOXED(4607182418800000670,64,FLEN)
NAN_BOXED(9214364837600034901,64,FLEN)
NAN_BOXED(9214364837600034908,64,FLEN)
NAN_BOXED(4607182418800017052,64,FLEN)
NAN_BOXED(9214364837600034900,64,FLEN)
NAN_BOXED(9214364837600034911,64,FLEN)
NAN_BOXED(4607182418800008986,64,FLEN)
NAN_BOXED(9214364837600034835,64,FLEN)
NAN_BOXED(9214364837600034912,64,FLEN)
NAN_BOXED(4607182418800015004,64,FLEN)
NAN_BOXED(9214364837600034897,64,FLEN)
NAN_BOXED(9214364837600034915,64,FLEN)
NAN_BOXED(18442240474082181120,64,FLEN)
NAN_BOXED(9214364837600034834,64,FLEN)
NAN_BOXED(9214364837600034915,64,FLEN)
NAN_BOXED(18442240474082181120,64,FLEN)
NAN_BOXED(9214364837600034871,64,FLEN)
NAN_BOXED(1,64,FLEN)
NAN_BOXED(4651892959631900672,64,FLEN)
NAN_BOXED(38,64,FLEN)
NAN_BOXED(1,64,FLEN)
NAN_BOXED(13920626843339194368,64,FLEN)
NAN_BOXED(91,64,FLEN)
NAN_BOXED(3,64,FLEN)
NAN_BOXED(13922127769768733355,64,FLEN)
NAN_BOXED(84,64,FLEN)
NAN_BOXED(4,64,FLEN)
NAN_BOXED(13855148331744886784,64,FLEN)
NAN_BOXED(59,64,FLEN)
NAN_BOXED(5,64,FLEN)
NAN_BOXED(4830560960315916269,64,FLEN)
NAN_BOXED(11,64,FLEN)
NAN_BOXED(6,64,FLEN)
NAN_BOXED(13837685155064796501,64,FLEN)
NAN_BOXED(11,64,FLEN)
NAN_BOXED(7,64,FLEN)
NAN_BOXED(13889746742672659017,64,FLEN)
NAN_BOXED(26,64,FLEN)
NAN_BOXED(7,64,FLEN)
NAN_BOXED(13894250538641391616,64,FLEN)
NAN_BOXED(58,64,FLEN)
NAN_BOXED(9,64,FLEN)
NAN_BOXED(4826858000623046126,64,FLEN)
NAN_BOXED(41,64,FLEN)
NAN_BOXED(11,64,FLEN)
NAN_BOXED(4645106374042857100,64,FLEN)
NAN_BOXED(96,64,FLEN)
NAN_BOXED(11,64,FLEN)
NAN_BOXED(4825402291653514768,64,FLEN)
NAN_BOXED(84,64,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_2:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_3:
    .fill 60*((SIGALIGN)/4),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*XLEN/32,4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

RVMODEL_DATA_END
