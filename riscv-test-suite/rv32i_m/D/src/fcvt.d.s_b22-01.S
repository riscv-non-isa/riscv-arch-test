
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:03:32 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32D/fcvt.d.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fcvt.d.s instruction of the RISC-V RV32FD_Zicsr,RV64FD_Zicsr extension for the fcvt.d.s_b22 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IFD_Zicsr,RV64IFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*D.*);def TEST_CASE_1=True;",fcvt.d.s_b22)

RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_0:
// rs1 == rd, rs1==f14, rd==f14,fs1 == 0 and fe1 == 0x67 and fm1 == 0x53a4fc and  fcsr == 0x0 and rm_val == 7  and rs1_nan_prefix == 0xffffffff  
/* opcode: fcvt.d.s ; op1:f14; dest:f14; op1val:0x67000000053a4fc; valaddr_reg:x3;
val_offset:0*FLEN/8; correctval:0; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP_NRM(fcvt.d.s, f14, f14, 0, 0, x3, 0*FLEN/8, x4, x1, x2)  

inst_1:
// rs1 != rd, rs1==f7, rd==f26,fs1 == 0 and fe1 == 0x7c and fm1 == 0x4923b8 and  fcsr == 0x0 and rm_val == 7  and rs1_nan_prefix == 0xffffffff  
/* opcode: fcvt.d.s ; op1:f7; dest:f26; op1val:0x7c00000004923b8; valaddr_reg:x3;
val_offset:1*FLEN/8; correctval:0; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP_NRM(fcvt.d.s, f26, f7, 0, 0, x3, 1*FLEN/8, x4, x1, x2)  

inst_2:
// rs1==f30, rd==f29,fs1 == 0 and fe1 == 0x7d and fm1 == 0x36e5d6 and  fcsr == 0x0 and rm_val == 7  and rs1_nan_prefix == 0xffffffff  
/* opcode: fcvt.d.s ; op1:f30; dest:f29; op1val:0x7d000000036e5d6; valaddr_reg:x3;
val_offset:2*FLEN/8; correctval:0; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP_NRM(fcvt.d.s, f29, f30, 0, 0, x3, 2*FLEN/8, x4, x1, x2)  

inst_3:
// rs1==f9, rd==f25,fs1 == 0 and fe1 == 0x7e and fm1 == 0x49fee5 and  fcsr == 0x0 and rm_val == 7  and rs1_nan_prefix == 0xffffffff  
/* opcode: fcvt.d.s ; op1:f9; dest:f25; op1val:0x7e000000049fee5; valaddr_reg:x3;
val_offset:3*FLEN/8; correctval:0; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP_NRM(fcvt.d.s, f25, f9, 0, 0, x3, 3*FLEN/8, x4, x1, x2)  

inst_4:
// rs1==f23, rd==f1,fs1 == 0 and fe1 == 0x7f and fm1 == 0x1a616d and  fcsr == 0x0 and rm_val == 7  and rs1_nan_prefix == 0xffffffff  
/* opcode: fcvt.d.s ; op1:f23; dest:f1; op1val:0x7f00000001a616d; valaddr_reg:x3;
val_offset:4*FLEN/8; correctval:0; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP_NRM(fcvt.d.s, f1, f23, 0, 0, x3, 4*FLEN/8, x4, x1, x2)  

inst_5:
// rs1==f21, rd==f3,fs1 == 0 and fe1 == 0x80 and fm1 == 0x681ae9 and  fcsr == 0x0 and rm_val == 7  and rs1_nan_prefix == 0xffffffff  
/* opcode: fcvt.d.s ; op1:f21; dest:f3; op1val:0x800000000681ae9; valaddr_reg:x3;
val_offset:5*FLEN/8; correctval:0; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP_NRM(fcvt.d.s, f3, f21, 0, 0, x3, 5*FLEN/8, x4, x1, x2)  

inst_6:
// rs1==f15, rd==f8,fs1 == 0 and fe1 == 0x81 and fm1 == 0x696b5c and  fcsr == 0x0 and rm_val == 7  and rs1_nan_prefix == 0xffffffff  
/* opcode: fcvt.d.s ; op1:f15; dest:f8; op1val:0x810000000696b5c; valaddr_reg:x3;
val_offset:6*FLEN/8; correctval:0; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP_NRM(fcvt.d.s, f8, f15, 0, 0, x3, 6*FLEN/8, x4, x1, x2)  

inst_7:
// rs1==f17, rd==f6,fs1 == 0 and fe1 == 0xc4 and fm1 == 0x046756 and  fcsr == 0x0 and rm_val == 7  and rs1_nan_prefix == 0xffffffff  
/* opcode: fcvt.d.s ; op1:f17; dest:f6; op1val:0xc40000000046756; valaddr_reg:x3;
val_offset:7*FLEN/8; correctval:0; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP_NRM(fcvt.d.s, f6, f17, 0, 0, x3, 7*FLEN/8, x4, x1, x2)  

inst_8:
// rs1==f18, rd==f27,
/* opcode: fcvt.d.s ; op1:f18; dest:f27; op1val:0x0; valaddr_reg:x3;
val_offset:8*FLEN/8; correctval:0; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP_NRM(fcvt.d.s, f27, f18, 0, 0, x3, 8*FLEN/8, x4, x1, x2)  

inst_9:
// rs1==f28, rd==f9,
/* opcode: fcvt.d.s ; op1:f28; dest:f9; op1val:0x0; valaddr_reg:x3;
val_offset:9*FLEN/8; correctval:0; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP_NRM(fcvt.d.s, f9, f28, 0, 0, x3, 9*FLEN/8, x4, x1, x2)  

inst_10:
// rs1==f16, rd==f12,
/* opcode: fcvt.d.s ; op1:f16; dest:f12; op1val:0x0; valaddr_reg:x3;
val_offset:10*FLEN/8; correctval:0; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP_NRM(fcvt.d.s, f12, f16, 0, 0, x3, 10*FLEN/8, x4, x1, x2)  

inst_11:
// rs1==f29, rd==f13,
/* opcode: fcvt.d.s ; op1:f29; dest:f13; op1val:0x0; valaddr_reg:x3;
val_offset:11*FLEN/8; correctval:0; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP_NRM(fcvt.d.s, f13, f29, 0, 0, x3, 11*FLEN/8, x4, x1, x2)  

inst_12:
// rs1==f10, rd==f20,
/* opcode: fcvt.d.s ; op1:f10; dest:f20; op1val:0x0; valaddr_reg:x3;
val_offset:12*FLEN/8; correctval:0; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP_NRM(fcvt.d.s, f20, f10, 0, 0, x3, 12*FLEN/8, x4, x1, x2)  

inst_13:
// rs1==f25, rd==f18,
/* opcode: fcvt.d.s ; op1:f25; dest:f18; op1val:0x0; valaddr_reg:x3;
val_offset:13*FLEN/8; correctval:0; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP_NRM(fcvt.d.s, f18, f25, 0, 0, x3, 13*FLEN/8, x4, x1, x2)  

inst_14:
// rs1==f6, rd==f23,
/* opcode: fcvt.d.s ; op1:f6; dest:f23; op1val:0x0; valaddr_reg:x3;
val_offset:14*FLEN/8; correctval:0; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP_NRM(fcvt.d.s, f23, f6, 0, 0, x3, 14*FLEN/8, x4, x1, x2)  

inst_15:
// rs1==f24, rd==f10,
/* opcode: fcvt.d.s ; op1:f24; dest:f10; op1val:0x0; valaddr_reg:x3;
val_offset:15*FLEN/8; correctval:0; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP_NRM(fcvt.d.s, f10, f24, 0, 0, x3, 15*FLEN/8, x4, x1, x2)  

inst_16:
// rs1==f5, rd==f4,
/* opcode: fcvt.d.s ; op1:f5; dest:f4; op1val:0x0; valaddr_reg:x3;
val_offset:16*FLEN/8; correctval:0; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP_NRM(fcvt.d.s, f4, f5, 0, 0, x3, 16*FLEN/8, x4, x1, x2)  

inst_17:
// rs1==f8, rd==f19,
/* opcode: fcvt.d.s ; op1:f8; dest:f19; op1val:0x0; valaddr_reg:x3;
val_offset:17*FLEN/8; correctval:0; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP_NRM(fcvt.d.s, f19, f8, 0, 0, x3, 17*FLEN/8, x4, x1, x2)  

inst_18:
// rs1==f2, rd==f0,
/* opcode: fcvt.d.s ; op1:f2; dest:f0; op1val:0x0; valaddr_reg:x3;
val_offset:18*FLEN/8; correctval:0; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP_NRM(fcvt.d.s, f0, f2, 0, 0, x3, 18*FLEN/8, x4, x1, x2)  

inst_19:
// rs1==f0, rd==f11,
/* opcode: fcvt.d.s ; op1:f0; dest:f11; op1val:0x0; valaddr_reg:x3;
val_offset:19*FLEN/8; correctval:0; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP_NRM(fcvt.d.s, f11, f0, 0, 0, x3, 19*FLEN/8, x4, x1, x2)  

inst_20:
// rs1==f4, rd==f7,
/* opcode: fcvt.d.s ; op1:f4; dest:f7; op1val:0x0; valaddr_reg:x3;
val_offset:20*FLEN/8; correctval:0; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP_NRM(fcvt.d.s, f7, f4, 0, 0, x3, 20*FLEN/8, x4, x1, x2)  

inst_21:
// rs1==f20, rd==f22,
/* opcode: fcvt.d.s ; op1:f20; dest:f22; op1val:0x0; valaddr_reg:x3;
val_offset:21*FLEN/8; correctval:0; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP_NRM(fcvt.d.s, f22, f20, 0, 0, x3, 21*FLEN/8, x4, x1, x2)  

inst_22:
// rs1==f3, rd==f17,
/* opcode: fcvt.d.s ; op1:f3; dest:f17; op1val:0x0; valaddr_reg:x3;
val_offset:22*FLEN/8; correctval:0; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP_NRM(fcvt.d.s, f17, f3, 0, 0, x3, 22*FLEN/8, x4, x1, x2)  

inst_23:
// rs1==f27, rd==f31,
/* opcode: fcvt.d.s ; op1:f27; dest:f31; op1val:0x0; valaddr_reg:x3;
val_offset:23*FLEN/8; correctval:0; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP_NRM(fcvt.d.s, f31, f27, 0, 0, x3, 23*FLEN/8, x4, x1, x2)  

inst_24:
// rs1==f31, rd==f21,
/* opcode: fcvt.d.s ; op1:f31; dest:f21; op1val:0x0; valaddr_reg:x3;
val_offset:24*FLEN/8; correctval:0; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP_NRM(fcvt.d.s, f21, f31, 0, 0, x3, 24*FLEN/8, x4, x1, x2)  

inst_25:
// rs1==f19, rd==f5,
/* opcode: fcvt.d.s ; op1:f19; dest:f5; op1val:0x0; valaddr_reg:x3;
val_offset:25*FLEN/8; correctval:0; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP_NRM(fcvt.d.s, f5, f19, 0, 0, x3, 25*FLEN/8, x4, x1, x2)  

inst_26:
// rs1==f1, rd==f24,
/* opcode: fcvt.d.s ; op1:f1; dest:f24; op1val:0x0; valaddr_reg:x3;
val_offset:26*FLEN/8; correctval:0; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP_NRM(fcvt.d.s, f24, f1, 0, 0, x3, 26*FLEN/8, x4, x1, x2)  

inst_27:
// rs1==f13, rd==f2,
/* opcode: fcvt.d.s ; op1:f13; dest:f2; op1val:0x0; valaddr_reg:x3;
val_offset:27*FLEN/8; correctval:0; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP_NRM(fcvt.d.s, f2, f13, 0, 0, x3, 27*FLEN/8, x4, x1, x2)  

inst_28:
// rs1==f26, rd==f28,
/* opcode: fcvt.d.s ; op1:f26; dest:f28; op1val:0x0; valaddr_reg:x3;
val_offset:28*FLEN/8; correctval:0; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP_NRM(fcvt.d.s, f28, f26, 0, 0, x3, 28*FLEN/8, x4, x1, x2)  

inst_29:
// rs1==f12, rd==f15,
/* opcode: fcvt.d.s ; op1:f12; dest:f15; op1val:0x0; valaddr_reg:x3;
val_offset:29*FLEN/8; correctval:0; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP_NRM(fcvt.d.s, f15, f12, 0, 0, x3, 29*FLEN/8, x4, x1, x2)  

inst_30:
// rs1==f11, rd==f16,
/* opcode: fcvt.d.s ; op1:f11; dest:f16; op1val:0x0; valaddr_reg:x3;
val_offset:30*FLEN/8; correctval:0; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP_NRM(fcvt.d.s, f16, f11, 0, 0, x3, 30*FLEN/8, x4, x1, x2)  

inst_31:
// rs1==f22, rd==f30,
/* opcode: fcvt.d.s ; op1:f22; dest:f30; op1val:0x0; valaddr_reg:x3;
val_offset:31*FLEN/8; correctval:0; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP_NRM(fcvt.d.s, f30, f22, 0, 0, x3, 31*FLEN/8, x4, x1, x2)  

inst_32:
// fs1 == 0 and fe1 == 0x67 and fm1 == 0x53a4fc and  fcsr == 0x0 and rm_val == 7  and rs1_nan_prefix == 0xffffffff  
/* opcode: fcvt.d.s ; op1:f30; dest:f31; op1val:0x67000000053a4fc; valaddr_reg:x3;
val_offset:32*FLEN/8; correctval:0; testreg:x2;
fcsr_val: 0 */
TEST_FPSR_OP_NRM(fcvt.d.s, f31, f30, 0, 0, x3, 32*FLEN/8, x4, x1, x2)  
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(463870761624642812,64,FLEN)
NAN_BOXED(558446353798734776,64,FLEN)
NAN_BOXED(562949953424909782,64,FLEN)
NAN_BOXED(567453553053531877,64,FLEN)
NAN_BOXED(571957152677781869,64,FLEN)
NAN_BOXED(576460752310246121,64,FLEN)
NAN_BOXED(580964351937702748,64,FLEN)
NAN_BOXED(882705526964905814,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(463870761624642812,64,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 66*((SIGALIGN)/4),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*XLEN/32,4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

RVMODEL_DATA_END
