
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 15:28:48 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32D/fmsub.d.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fmsub.d instruction of the RISC-V RV32FD_Zicsr,RV64FD_Zicsr extension for the fmsub.d_b8 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IFD_Zicsr,RV64IFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*D.*);def TEST_CASE_1=True;",fmsub.d_b8)

RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_0:
// rs1 == rs2 == rs3 == rd, rs1==f4, rs2==f4, rs3==f4, rd==f4,fs1 == 0 and fe1 == 0x3f5 and fm1 == 0x3c8990a4c2a00 and fs2 == 0 and fe2 == 0x407 and fm2 == 0x543a5e5f86adc and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xa4aedff63880a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f4; op2:f4; op3:f4; dest:f4; op1val:0x3f53c8990a4c2a00; op2val:0x3f53c8990a4c2a00;
op3val:0x3f53c8990a4c2a00; valaddr_reg:x3; val_offset:0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f4, f4, f4, f4, dyn, 0, 0, x3, 0*FLEN/8, x4, x1, x2)

inst_1:
// rd == rs2 == rs3 != rs1, rs1==f25, rs2==f14, rs3==f14, rd==f14,fs1 == 0 and fe1 == 0x3f5 and fm1 == 0x3c8990a4c2a00 and fs2 == 0 and fe2 == 0x407 and fm2 == 0x543a5e5f86adc and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xa4aedff63880a and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f25; op2:f14; op3:f14; dest:f14; op1val:0x3f53c8990a4c2a00; op2val:0x407543a5e5f86adc;
op3val:0x407543a5e5f86adc; valaddr_reg:x3; val_offset:3*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f14, f25, f14, f14, dyn, 32, 0, x3, 3*FLEN/8, x4, x1, x2)

inst_2:
// rs1 == rd == rs3 != rs2, rs1==f12, rs2==f25, rs3==f12, rd==f12,fs1 == 0 and fe1 == 0x3f5 and fm1 == 0x3c8990a4c2a00 and fs2 == 0 and fe2 == 0x407 and fm2 == 0x543a5e5f86adc and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xa4aedff63880a and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f12; op2:f25; op3:f12; dest:f12; op1val:0x3f53c8990a4c2a00; op2val:0x407543a5e5f86adc;
op3val:0x3f53c8990a4c2a00; valaddr_reg:x3; val_offset:6*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f12, f12, f25, f12, dyn, 64, 0, x3, 6*FLEN/8, x4, x1, x2)

inst_3:
// rs1 != rs2 and rs1 != rd and rs1 != rs3 and rs2 != rs3 and rs2 != rd and rs3 != rd, rs1==f2, rs2==f3, rs3==f28, rd==f17,fs1 == 0 and fe1 == 0x3f5 and fm1 == 0x3c8990a4c2a00 and fs2 == 0 and fe2 == 0x407 and fm2 == 0x543a5e5f86adc and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xa4aedff63880a and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f2; op2:f3; op3:f28; dest:f17; op1val:0x3f53c8990a4c2a00; op2val:0x407543a5e5f86adc;
op3val:0x3fda4aedff63880a; valaddr_reg:x3; val_offset:9*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f17, f2, f3, f28, dyn, 96, 0, x3, 9*FLEN/8, x4, x1, x2)

inst_4:
// rs1 == rs3 != rs2 and rs1 == rs3 != rd and rd != rs2, rs1==f1, rs2==f2, rs3==f1, rd==f3,fs1 == 0 and fe1 == 0x3f5 and fm1 == 0x3c8990a4c2a00 and fs2 == 0 and fe2 == 0x407 and fm2 == 0x543a5e5f86adc and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xa4aedff63880a and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f1; op2:f2; op3:f1; dest:f3; op1val:0x3f53c8990a4c2a00; op2val:0x407543a5e5f86adc;
op3val:0x3f53c8990a4c2a00; valaddr_reg:x3; val_offset:12*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f3, f1, f2, f1, dyn, 128, 0, x3, 12*FLEN/8, x4, x1, x2)

inst_5:
// rs1 == rs2 == rs3 != rd, rs1==f11, rs2==f11, rs3==f11, rd==f24,fs1 == 0 and fe1 == 0x3f8 and fm1 == 0x4be465508e640 and fs2 == 0 and fe2 == 0x403 and fm2 == 0x08afa5318307d and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x57273fc6baccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f11; op2:f11; op3:f11; dest:f24; op1val:0x3f84be465508e640; op2val:0x3f84be465508e640;
op3val:0x3f84be465508e640; valaddr_reg:x3; val_offset:15*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f24, f11, f11, f11, dyn, 0, 0, x3, 15*FLEN/8, x4, x1, x2)

inst_6:
// rs2 == rs3 != rs1 and rs2 == rs3 != rd and rd != rs1, rs1==f0, rs2==f9, rs3==f9, rd==f23,fs1 == 0 and fe1 == 0x3f8 and fm1 == 0x4be465508e640 and fs2 == 0 and fe2 == 0x403 and fm2 == 0x08afa5318307d and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x57273fc6baccc and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f0; op2:f9; op3:f9; dest:f23; op1val:0x3f84be465508e640; op2val:0x40308afa5318307d;
op3val:0x40308afa5318307d; valaddr_reg:x3; val_offset:18*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f23, f0, f9, f9, dyn, 32, 0, x3, 18*FLEN/8, x4, x1, x2)

inst_7:
// rs2 == rd != rs1 and rs2 == rd != rs3 and rs3 != rs1, rs1==f7, rs2==f29, rs3==f25, rd==f29,fs1 == 0 and fe1 == 0x3f8 and fm1 == 0x4be465508e640 and fs2 == 0 and fe2 == 0x403 and fm2 == 0x08afa5318307d and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x57273fc6baccc and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f7; op2:f29; op3:f25; dest:f29; op1val:0x3f84be465508e640; op2val:0x40308afa5318307d;
op3val:0x3fc57273fc6baccc; valaddr_reg:x3; val_offset:21*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f29, f7, f29, f25, dyn, 64, 0, x3, 21*FLEN/8, x4, x1, x2)

inst_8:
// rs1 == rs2 == rd != rs3, rs1==f6, rs2==f6, rs3==f27, rd==f6,fs1 == 0 and fe1 == 0x3f8 and fm1 == 0x4be465508e640 and fs2 == 0 and fe2 == 0x403 and fm2 == 0x08afa5318307d and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x57273fc6baccc and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f6; op2:f6; op3:f27; dest:f6; op1val:0x3f84be465508e640; op2val:0x3f84be465508e640;
op3val:0x3fc57273fc6baccc; valaddr_reg:x3; val_offset:24*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f6, f6, f6, f27, dyn, 96, 0, x3, 24*FLEN/8, x4, x1, x2)

inst_9:
// rs1 == rs2 != rs3 and rs1 == rs2 != rd and rd != rs3, rs1==f8, rs2==f8, rs3==f18, rd==f13,fs1 == 0 and fe1 == 0x3f8 and fm1 == 0x4be465508e640 and fs2 == 0 and fe2 == 0x403 and fm2 == 0x08afa5318307d and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x57273fc6baccc and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f8; op2:f8; op3:f18; dest:f13; op1val:0x3f84be465508e640; op2val:0x3f84be465508e640;
op3val:0x3fc57273fc6baccc; valaddr_reg:x3; val_offset:27*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f13, f8, f8, f18, dyn, 128, 0, x3, 27*FLEN/8, x4, x1, x2)

inst_10:
// rs1 == rd != rs2 and rs1 == rd != rs3 and rs3 != rs2, rs1==f31, rs2==f0, rs3==f24, rd==f31,fs1 == 0 and fe1 == 0x3f8 and fm1 == 0xf465b817cb700 and fs2 == 0 and fe2 == 0x404 and fm2 == 0xbd927a307f6f9 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xb37990edd00d1 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f31; op2:f0; op3:f24; dest:f31; op1val:0x3f8f465b817cb700; op2val:0x404bd927a307f6f9;
op3val:0x3feb37990edd00d1; valaddr_reg:x3; val_offset:30*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f31, f0, f24, dyn, 0, 0, x3, 30*FLEN/8, x4, x1, x2)

inst_11:
// rs3 == rd != rs1 and rs3 == rd != rs2 and rs2 != rs1, rs1==f18, rs2==f13, rs3==f0, rd==f0,fs1 == 0 and fe1 == 0x3f8 and fm1 == 0xf465b817cb700 and fs2 == 0 and fe2 == 0x404 and fm2 == 0xbd927a307f6f9 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xb37990edd00d1 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f18; op2:f13; op3:f0; dest:f0; op1val:0x3f8f465b817cb700; op2val:0x404bd927a307f6f9;
op3val:0x3feb37990edd00d1; valaddr_reg:x3; val_offset:33*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f0, f18, f13, f0, dyn, 32, 0, x3, 33*FLEN/8, x4, x1, x2)

inst_12:
// rs1==f17, rs2==f19, rs3==f7, rd==f9,fs1 == 0 and fe1 == 0x3f8 and fm1 == 0xf465b817cb700 and fs2 == 0 and fe2 == 0x404 and fm2 == 0xbd927a307f6f9 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xb37990edd00d1 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f17; op2:f19; op3:f7; dest:f9; op1val:0x3f8f465b817cb700; op2val:0x404bd927a307f6f9;
op3val:0x3feb37990edd00d1; valaddr_reg:x3; val_offset:36*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f9, f17, f19, f7, dyn, 64, 0, x3, 36*FLEN/8, x4, x1, x2)

inst_13:
// rs1==f3, rs2==f27, rs3==f2, rd==f11,fs1 == 0 and fe1 == 0x3f8 and fm1 == 0xf465b817cb700 and fs2 == 0 and fe2 == 0x404 and fm2 == 0xbd927a307f6f9 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xb37990edd00d1 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f3; op2:f27; op3:f2; dest:f11; op1val:0x3f8f465b817cb700; op2val:0x404bd927a307f6f9;
op3val:0x3feb37990edd00d1; valaddr_reg:x3; val_offset:39*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f11, f3, f27, f2, dyn, 96, 0, x3, 39*FLEN/8, x4, x1, x2)

inst_14:
// rs1==f16, rs2==f17, rs3==f20, rd==f1,fs1 == 0 and fe1 == 0x3f8 and fm1 == 0xf465b817cb700 and fs2 == 0 and fe2 == 0x404 and fm2 == 0xbd927a307f6f9 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xb37990edd00d1 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f16; op2:f17; op3:f20; dest:f1; op1val:0x3f8f465b817cb700; op2val:0x404bd927a307f6f9;
op3val:0x3feb37990edd00d1; valaddr_reg:x3; val_offset:42*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f1, f16, f17, f20, dyn, 128, 0, x3, 42*FLEN/8, x4, x1, x2)

inst_15:
// rs1==f13, rs2==f10, rs3==f30, rd==f26,fs1 == 0 and fe1 == 0x3f9 and fm1 == 0x42aadc34845c0 and fs2 == 0 and fe2 == 0x403 and fm2 == 0x1671dd577d57d and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x5ef50f880110a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f13; op2:f10; op3:f30; dest:f26; op1val:0x3f942aadc34845c0; op2val:0x4031671dd577d57d;
op3val:0x3fd5ef50f880110a; valaddr_reg:x3; val_offset:45*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f26, f13, f10, f30, dyn, 0, 0, x3, 45*FLEN/8, x4, x1, x2)

inst_16:
// rs1==f21, rs2==f7, rs3==f31, rd==f19,fs1 == 0 and fe1 == 0x3f9 and fm1 == 0x42aadc34845c0 and fs2 == 0 and fe2 == 0x403 and fm2 == 0x1671dd577d57d and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x5ef50f880110a and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f21; op2:f7; op3:f31; dest:f19; op1val:0x3f942aadc34845c0; op2val:0x4031671dd577d57d;
op3val:0x3fd5ef50f880110a; valaddr_reg:x3; val_offset:48*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f19, f21, f7, f31, dyn, 32, 0, x3, 48*FLEN/8, x4, x1, x2)

inst_17:
// rs1==f10, rs2==f21, rs3==f16, rd==f2,fs1 == 0 and fe1 == 0x3f9 and fm1 == 0x42aadc34845c0 and fs2 == 0 and fe2 == 0x403 and fm2 == 0x1671dd577d57d and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x5ef50f880110a and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f10; op2:f21; op3:f16; dest:f2; op1val:0x3f942aadc34845c0; op2val:0x4031671dd577d57d;
op3val:0x3fd5ef50f880110a; valaddr_reg:x3; val_offset:51*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f2, f10, f21, f16, dyn, 64, 0, x3, 51*FLEN/8, x4, x1, x2)

inst_18:
// rs1==f28, rs2==f24, rs3==f19, rd==f21,fs1 == 0 and fe1 == 0x3f9 and fm1 == 0x42aadc34845c0 and fs2 == 0 and fe2 == 0x403 and fm2 == 0x1671dd577d57d and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x5ef50f880110a and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f28; op2:f24; op3:f19; dest:f21; op1val:0x3f942aadc34845c0; op2val:0x4031671dd577d57d;
op3val:0x3fd5ef50f880110a; valaddr_reg:x3; val_offset:54*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f21, f28, f24, f19, dyn, 96, 0, x3, 54*FLEN/8, x4, x1, x2)

inst_19:
// rs1==f24, rs2==f16, rs3==f5, rd==f18,fs1 == 0 and fe1 == 0x3f9 and fm1 == 0x42aadc34845c0 and fs2 == 0 and fe2 == 0x403 and fm2 == 0x1671dd577d57d and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x5ef50f880110a and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f24; op2:f16; op3:f5; dest:f18; op1val:0x3f942aadc34845c0; op2val:0x4031671dd577d57d;
op3val:0x3fd5ef50f880110a; valaddr_reg:x3; val_offset:57*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f18, f24, f16, f5, dyn, 128, 0, x3, 57*FLEN/8, x4, x1, x2)

inst_20:
// rs1==f19, rs2==f5, rs3==f6, rd==f15,fs1 == 0 and fe1 == 0x3f9 and fm1 == 0x44d0b76a15aa0 and fs2 == 0 and fe2 == 0x404 and fm2 == 0x63e28d4a48123 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xc38ce1df3c7e2 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f19; op2:f5; op3:f6; dest:f15; op1val:0x3f944d0b76a15aa0; op2val:0x40463e28d4a48123;
op3val:0x3fec38ce1df3c7e2; valaddr_reg:x3; val_offset:60*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f15, f19, f5, f6, dyn, 0, 0, x3, 60*FLEN/8, x4, x1, x2)

inst_21:
// rs1==f15, rs2==f1, rs3==f8, rd==f20,fs1 == 0 and fe1 == 0x3f9 and fm1 == 0x44d0b76a15aa0 and fs2 == 0 and fe2 == 0x404 and fm2 == 0x63e28d4a48123 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xc38ce1df3c7e2 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f15; op2:f1; op3:f8; dest:f20; op1val:0x3f944d0b76a15aa0; op2val:0x40463e28d4a48123;
op3val:0x3fec38ce1df3c7e2; valaddr_reg:x3; val_offset:63*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f20, f15, f1, f8, dyn, 32, 0, x3, 63*FLEN/8, x4, x1, x2)

inst_22:
// rs1==f27, rs2==f28, rs3==f26, rd==f8,fs1 == 0 and fe1 == 0x3f9 and fm1 == 0x44d0b76a15aa0 and fs2 == 0 and fe2 == 0x404 and fm2 == 0x63e28d4a48123 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xc38ce1df3c7e2 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f27; op2:f28; op3:f26; dest:f8; op1val:0x3f944d0b76a15aa0; op2val:0x40463e28d4a48123;
op3val:0x3fec38ce1df3c7e2; valaddr_reg:x3; val_offset:66*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f8, f27, f28, f26, dyn, 64, 0, x3, 66*FLEN/8, x4, x1, x2)

inst_23:
// rs1==f5, rs2==f18, rs3==f3, rd==f7,fs1 == 0 and fe1 == 0x3f9 and fm1 == 0x44d0b76a15aa0 and fs2 == 0 and fe2 == 0x404 and fm2 == 0x63e28d4a48123 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xc38ce1df3c7e2 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f5; op2:f18; op3:f3; dest:f7; op1val:0x3f944d0b76a15aa0; op2val:0x40463e28d4a48123;
op3val:0x3fec38ce1df3c7e2; valaddr_reg:x3; val_offset:69*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f7, f5, f18, f3, dyn, 96, 0, x3, 69*FLEN/8, x4, x1, x2)

inst_24:
// rs1==f23, rs2==f15, rs3==f22, rd==f28,fs1 == 0 and fe1 == 0x3f9 and fm1 == 0x44d0b76a15aa0 and fs2 == 0 and fe2 == 0x404 and fm2 == 0x63e28d4a48123 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xc38ce1df3c7e2 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f23; op2:f15; op3:f22; dest:f28; op1val:0x3f944d0b76a15aa0; op2val:0x40463e28d4a48123;
op3val:0x3fec38ce1df3c7e2; valaddr_reg:x3; val_offset:72*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f28, f23, f15, f22, dyn, 128, 0, x3, 72*FLEN/8, x4, x1, x2)

inst_25:
// rs1==f26, rs2==f22, rs3==f29, rd==f16,fs1 == 0 and fe1 == 0x3f9 and fm1 == 0x66634f502ba60 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x75040723abe8f and fs3 == 0 and fe3 == 0x3fb and fm3 == 0x051a2b0dda218 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f26; op2:f22; op3:f29; dest:f16; op1val:0x3f966634f502ba60; op2val:0x40075040723abe8f;
op3val:0x3fb051a2b0dda218; valaddr_reg:x3; val_offset:75*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f16, f26, f22, f29, dyn, 0, 0, x3, 75*FLEN/8, x4, x1, x2)

inst_26:
// rs1==f29, rs2==f23, rs3==f10, rd==f25,fs1 == 0 and fe1 == 0x3f9 and fm1 == 0x66634f502ba60 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x75040723abe8f and fs3 == 0 and fe3 == 0x3fb and fm3 == 0x051a2b0dda218 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f29; op2:f23; op3:f10; dest:f25; op1val:0x3f966634f502ba60; op2val:0x40075040723abe8f;
op3val:0x3fb051a2b0dda218; valaddr_reg:x3; val_offset:78*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f25, f29, f23, f10, dyn, 32, 0, x3, 78*FLEN/8, x4, x1, x2)

inst_27:
// rs1==f20, rs2==f30, rs3==f23, rd==f27,fs1 == 0 and fe1 == 0x3f9 and fm1 == 0x66634f502ba60 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x75040723abe8f and fs3 == 0 and fe3 == 0x3fb and fm3 == 0x051a2b0dda218 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f20; op2:f30; op3:f23; dest:f27; op1val:0x3f966634f502ba60; op2val:0x40075040723abe8f;
op3val:0x3fb051a2b0dda218; valaddr_reg:x3; val_offset:81*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f27, f20, f30, f23, dyn, 64, 0, x3, 81*FLEN/8, x4, x1, x2)

inst_28:
// rs1==f30, rs2==f20, rs3==f15, rd==f22,fs1 == 0 and fe1 == 0x3f9 and fm1 == 0x66634f502ba60 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x75040723abe8f and fs3 == 0 and fe3 == 0x3fb and fm3 == 0x051a2b0dda218 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f20; op3:f15; dest:f22; op1val:0x3f966634f502ba60; op2val:0x40075040723abe8f;
op3val:0x3fb051a2b0dda218; valaddr_reg:x3; val_offset:84*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f22, f30, f20, f15, dyn, 96, 0, x3, 84*FLEN/8, x4, x1, x2)

inst_29:
// rs1==f22, rs2==f31, rs3==f13, rd==f5,fs1 == 0 and fe1 == 0x3f9 and fm1 == 0x66634f502ba60 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x75040723abe8f and fs3 == 0 and fe3 == 0x3fb and fm3 == 0x051a2b0dda218 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f22; op2:f31; op3:f13; dest:f5; op1val:0x3f966634f502ba60; op2val:0x40075040723abe8f;
op3val:0x3fb051a2b0dda218; valaddr_reg:x3; val_offset:87*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f5, f22, f31, f13, dyn, 128, 0, x3, 87*FLEN/8, x4, x1, x2)

inst_30:
// rs1==f9, rs2==f26, rs3==f17, rd==f30,fs1 == 0 and fe1 == 0x3f9 and fm1 == 0x85094e3b39740 and fs2 == 0 and fe2 == 0x404 and fm2 == 0x41385bc87f592 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xe826509c5f9a4 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f9; op2:f26; op3:f17; dest:f30; op1val:0x3f985094e3b39740; op2val:0x40441385bc87f592;
op3val:0x3fee826509c5f9a4; valaddr_reg:x3; val_offset:90*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f30, f9, f26, f17, dyn, 0, 0, x3, 90*FLEN/8, x4, x1, x2)

inst_31:
// rs1==f14, rs2==f12, rs3==f21, rd==f10,fs1 == 0 and fe1 == 0x3f9 and fm1 == 0x85094e3b39740 and fs2 == 0 and fe2 == 0x404 and fm2 == 0x41385bc87f592 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xe826509c5f9a4 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f14; op2:f12; op3:f21; dest:f10; op1val:0x3f985094e3b39740; op2val:0x40441385bc87f592;
op3val:0x3fee826509c5f9a4; valaddr_reg:x3; val_offset:93*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f10, f14, f12, f21, dyn, 32, 0, x3, 93*FLEN/8, x4, x1, x2)

inst_32:
// fs1 == 0 and fe1 == 0x3f9 and fm1 == 0x85094e3b39740 and fs2 == 0 and fe2 == 0x404 and fm2 == 0x41385bc87f592 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xe826509c5f9a4 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3f985094e3b39740; op2val:0x40441385bc87f592;
op3val:0x3fee826509c5f9a4; valaddr_reg:x3; val_offset:96*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 96*FLEN/8, x4, x1, x2)

inst_33:
// fs1 == 0 and fe1 == 0x3f9 and fm1 == 0x85094e3b39740 and fs2 == 0 and fe2 == 0x404 and fm2 == 0x41385bc87f592 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xe826509c5f9a4 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3f985094e3b39740; op2val:0x40441385bc87f592;
op3val:0x3fee826509c5f9a4; valaddr_reg:x3; val_offset:99*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 99*FLEN/8, x4, x1, x2)

inst_34:
// fs1 == 0 and fe1 == 0x3f9 and fm1 == 0x85094e3b39740 and fs2 == 0 and fe2 == 0x404 and fm2 == 0x41385bc87f592 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xe826509c5f9a4 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3f985094e3b39740; op2val:0x40441385bc87f592;
op3val:0x3fee826509c5f9a4; valaddr_reg:x3; val_offset:102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 102*FLEN/8, x4, x1, x2)

inst_35:
// fs1 == 0 and fe1 == 0x3f9 and fm1 == 0xc08b781ee6d40 and fs2 == 0 and fe2 == 0x403 and fm2 == 0x08b472f2142b5 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xcfcbff5696710 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3f9c08b781ee6d40; op2val:0x40308b472f2142b5;
op3val:0x3fdcfcbff5696710; valaddr_reg:x3; val_offset:105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 105*FLEN/8, x4, x1, x2)

inst_36:
// fs1 == 0 and fe1 == 0x3f9 and fm1 == 0xc08b781ee6d40 and fs2 == 0 and fe2 == 0x403 and fm2 == 0x08b472f2142b5 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xcfcbff5696710 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3f9c08b781ee6d40; op2val:0x40308b472f2142b5;
op3val:0x3fdcfcbff5696710; valaddr_reg:x3; val_offset:108*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 108*FLEN/8, x4, x1, x2)

inst_37:
// fs1 == 0 and fe1 == 0x3f9 and fm1 == 0xc08b781ee6d40 and fs2 == 0 and fe2 == 0x403 and fm2 == 0x08b472f2142b5 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xcfcbff5696710 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3f9c08b781ee6d40; op2val:0x40308b472f2142b5;
op3val:0x3fdcfcbff5696710; valaddr_reg:x3; val_offset:111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 111*FLEN/8, x4, x1, x2)

inst_38:
// fs1 == 0 and fe1 == 0x3f9 and fm1 == 0xc08b781ee6d40 and fs2 == 0 and fe2 == 0x403 and fm2 == 0x08b472f2142b5 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xcfcbff5696710 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3f9c08b781ee6d40; op2val:0x40308b472f2142b5;
op3val:0x3fdcfcbff5696710; valaddr_reg:x3; val_offset:114*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 114*FLEN/8, x4, x1, x2)

inst_39:
// fs1 == 0 and fe1 == 0x3f9 and fm1 == 0xc08b781ee6d40 and fs2 == 0 and fe2 == 0x403 and fm2 == 0x08b472f2142b5 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xcfcbff5696710 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3f9c08b781ee6d40; op2val:0x40308b472f2142b5;
op3val:0x3fdcfcbff5696710; valaddr_reg:x3; val_offset:117*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 117*FLEN/8, x4, x1, x2)

inst_40:
// fs1 == 0 and fe1 == 0x3f9 and fm1 == 0xd05df239b3f60 and fs2 == 0 and fe2 == 0x403 and fm2 == 0x550f883ad9cf9 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x3554a8225b93f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3f9d05df239b3f60; op2val:0x403550f883ad9cf9;
op3val:0x3fe3554a8225b93f; valaddr_reg:x3; val_offset:120*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 120*FLEN/8, x4, x1, x2)

inst_41:
// fs1 == 0 and fe1 == 0x3f9 and fm1 == 0xd05df239b3f60 and fs2 == 0 and fe2 == 0x403 and fm2 == 0x550f883ad9cf9 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x3554a8225b93f and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3f9d05df239b3f60; op2val:0x403550f883ad9cf9;
op3val:0x3fe3554a8225b93f; valaddr_reg:x3; val_offset:123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 123*FLEN/8, x4, x1, x2)

inst_42:
// fs1 == 0 and fe1 == 0x3f9 and fm1 == 0xd05df239b3f60 and fs2 == 0 and fe2 == 0x403 and fm2 == 0x550f883ad9cf9 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x3554a8225b93f and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3f9d05df239b3f60; op2val:0x403550f883ad9cf9;
op3val:0x3fe3554a8225b93f; valaddr_reg:x3; val_offset:126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 126*FLEN/8, x4, x1, x2)

inst_43:
// fs1 == 0 and fe1 == 0x3f9 and fm1 == 0xd05df239b3f60 and fs2 == 0 and fe2 == 0x403 and fm2 == 0x550f883ad9cf9 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x3554a8225b93f and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3f9d05df239b3f60; op2val:0x403550f883ad9cf9;
op3val:0x3fe3554a8225b93f; valaddr_reg:x3; val_offset:129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 129*FLEN/8, x4, x1, x2)

inst_44:
// fs1 == 0 and fe1 == 0x3f9 and fm1 == 0xd05df239b3f60 and fs2 == 0 and fe2 == 0x403 and fm2 == 0x550f883ad9cf9 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x3554a8225b93f and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3f9d05df239b3f60; op2val:0x403550f883ad9cf9;
op3val:0x3fe3554a8225b93f; valaddr_reg:x3; val_offset:132*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 132*FLEN/8, x4, x1, x2)

inst_45:
// fs1 == 0 and fe1 == 0x3f9 and fm1 == 0xdcef723064e60 and fs2 == 0 and fe2 == 0x402 and fm2 == 0x811b83ff24780 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x66bbaef2d85da and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3f9dcef723064e60; op2val:0x402811b83ff24780;
op3val:0x3fd66bbaef2d85da; valaddr_reg:x3; val_offset:135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 135*FLEN/8, x4, x1, x2)

inst_46:
// fs1 == 0 and fe1 == 0x3f9 and fm1 == 0xdcef723064e60 and fs2 == 0 and fe2 == 0x402 and fm2 == 0x811b83ff24780 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x66bbaef2d85da and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3f9dcef723064e60; op2val:0x402811b83ff24780;
op3val:0x3fd66bbaef2d85da; valaddr_reg:x3; val_offset:138*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 138*FLEN/8, x4, x1, x2)

inst_47:
// fs1 == 0 and fe1 == 0x3f9 and fm1 == 0xdcef723064e60 and fs2 == 0 and fe2 == 0x402 and fm2 == 0x811b83ff24780 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x66bbaef2d85da and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3f9dcef723064e60; op2val:0x402811b83ff24780;
op3val:0x3fd66bbaef2d85da; valaddr_reg:x3; val_offset:141*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 141*FLEN/8, x4, x1, x2)

inst_48:
// fs1 == 0 and fe1 == 0x3f9 and fm1 == 0xdcef723064e60 and fs2 == 0 and fe2 == 0x402 and fm2 == 0x811b83ff24780 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x66bbaef2d85da and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3f9dcef723064e60; op2val:0x402811b83ff24780;
op3val:0x3fd66bbaef2d85da; valaddr_reg:x3; val_offset:144*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 144*FLEN/8, x4, x1, x2)

inst_49:
// fs1 == 0 and fe1 == 0x3f9 and fm1 == 0xdcef723064e60 and fs2 == 0 and fe2 == 0x402 and fm2 == 0x811b83ff24780 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x66bbaef2d85da and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3f9dcef723064e60; op2val:0x402811b83ff24780;
op3val:0x3fd66bbaef2d85da; valaddr_reg:x3; val_offset:147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 147*FLEN/8, x4, x1, x2)

inst_50:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0x5a441713b5e10 and fs2 == 0 and fe2 == 0x403 and fm2 == 0x4166d9d967a4b and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xb2ba7ebab0610 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fa5a441713b5e10; op2val:0x4034166d9d967a4b;
op3val:0x3feb2ba7ebab0610; valaddr_reg:x3; val_offset:150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 150*FLEN/8, x4, x1, x2)

inst_51:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0x5a441713b5e10 and fs2 == 0 and fe2 == 0x403 and fm2 == 0x4166d9d967a4b and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xb2ba7ebab0610 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fa5a441713b5e10; op2val:0x4034166d9d967a4b;
op3val:0x3feb2ba7ebab0610; valaddr_reg:x3; val_offset:153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 153*FLEN/8, x4, x1, x2)

inst_52:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0x5a441713b5e10 and fs2 == 0 and fe2 == 0x403 and fm2 == 0x4166d9d967a4b and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xb2ba7ebab0610 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fa5a441713b5e10; op2val:0x4034166d9d967a4b;
op3val:0x3feb2ba7ebab0610; valaddr_reg:x3; val_offset:156*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 156*FLEN/8, x4, x1, x2)

inst_53:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0x5a441713b5e10 and fs2 == 0 and fe2 == 0x403 and fm2 == 0x4166d9d967a4b and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xb2ba7ebab0610 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fa5a441713b5e10; op2val:0x4034166d9d967a4b;
op3val:0x3feb2ba7ebab0610; valaddr_reg:x3; val_offset:159*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 159*FLEN/8, x4, x1, x2)

inst_54:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0x5a441713b5e10 and fs2 == 0 and fe2 == 0x403 and fm2 == 0x4166d9d967a4b and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xb2ba7ebab0610 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fa5a441713b5e10; op2val:0x4034166d9d967a4b;
op3val:0x3feb2ba7ebab0610; valaddr_reg:x3; val_offset:162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 162*FLEN/8, x4, x1, x2)

inst_55:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0x643a7e9f74d30 and fs2 == 0 and fe2 == 0x402 and fm2 == 0x96c73116fd448 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x1b04f94c40758 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fa643a7e9f74d30; op2val:0x40296c73116fd448;
op3val:0x3fe1b04f94c40758; valaddr_reg:x3; val_offset:165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 165*FLEN/8, x4, x1, x2)

inst_56:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0x643a7e9f74d30 and fs2 == 0 and fe2 == 0x402 and fm2 == 0x96c73116fd448 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x1b04f94c40758 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fa643a7e9f74d30; op2val:0x40296c73116fd448;
op3val:0x3fe1b04f94c40758; valaddr_reg:x3; val_offset:168*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 168*FLEN/8, x4, x1, x2)

inst_57:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0x643a7e9f74d30 and fs2 == 0 and fe2 == 0x402 and fm2 == 0x96c73116fd448 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x1b04f94c40758 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fa643a7e9f74d30; op2val:0x40296c73116fd448;
op3val:0x3fe1b04f94c40758; valaddr_reg:x3; val_offset:171*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 171*FLEN/8, x4, x1, x2)

inst_58:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0x643a7e9f74d30 and fs2 == 0 and fe2 == 0x402 and fm2 == 0x96c73116fd448 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x1b04f94c40758 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fa643a7e9f74d30; op2val:0x40296c73116fd448;
op3val:0x3fe1b04f94c40758; valaddr_reg:x3; val_offset:174*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 174*FLEN/8, x4, x1, x2)

inst_59:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0x643a7e9f74d30 and fs2 == 0 and fe2 == 0x402 and fm2 == 0x96c73116fd448 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x1b04f94c40758 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fa643a7e9f74d30; op2val:0x40296c73116fd448;
op3val:0x3fe1b04f94c40758; valaddr_reg:x3; val_offset:177*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 177*FLEN/8, x4, x1, x2)

inst_60:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0x70a2841a18bf0 and fs2 == 0 and fe2 == 0x402 and fm2 == 0xc3d221471d0b2 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x454e71fad876a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fa70a2841a18bf0; op2val:0x402c3d221471d0b2;
op3val:0x3fe454e71fad876a; valaddr_reg:x3; val_offset:180*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 180*FLEN/8, x4, x1, x2)

inst_61:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0x70a2841a18bf0 and fs2 == 0 and fe2 == 0x402 and fm2 == 0xc3d221471d0b2 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x454e71fad876a and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fa70a2841a18bf0; op2val:0x402c3d221471d0b2;
op3val:0x3fe454e71fad876a; valaddr_reg:x3; val_offset:183*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 183*FLEN/8, x4, x1, x2)

inst_62:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0x70a2841a18bf0 and fs2 == 0 and fe2 == 0x402 and fm2 == 0xc3d221471d0b2 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x454e71fad876a and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fa70a2841a18bf0; op2val:0x402c3d221471d0b2;
op3val:0x3fe454e71fad876a; valaddr_reg:x3; val_offset:186*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 186*FLEN/8, x4, x1, x2)

inst_63:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0x70a2841a18bf0 and fs2 == 0 and fe2 == 0x402 and fm2 == 0xc3d221471d0b2 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x454e71fad876a and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fa70a2841a18bf0; op2val:0x402c3d221471d0b2;
op3val:0x3fe454e71fad876a; valaddr_reg:x3; val_offset:189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 189*FLEN/8, x4, x1, x2)

inst_64:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0x70a2841a18bf0 and fs2 == 0 and fe2 == 0x402 and fm2 == 0xc3d221471d0b2 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x454e71fad876a and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fa70a2841a18bf0; op2val:0x402c3d221471d0b2;
op3val:0x3fe454e71fad876a; valaddr_reg:x3; val_offset:192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 192*FLEN/8, x4, x1, x2)

inst_65:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0x8038c77f7f280 and fs2 == 0 and fe2 == 0x401 and fm2 == 0xa655dc28894f7 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x3cef3b1205abc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fa8038c77f7f280; op2val:0x401a655dc28894f7;
op3val:0x3fd3cef3b1205abc; valaddr_reg:x3; val_offset:195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 195*FLEN/8, x4, x1, x2)

inst_66:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0x8038c77f7f280 and fs2 == 0 and fe2 == 0x401 and fm2 == 0xa655dc28894f7 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x3cef3b1205abc and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fa8038c77f7f280; op2val:0x401a655dc28894f7;
op3val:0x3fd3cef3b1205abc; valaddr_reg:x3; val_offset:198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 198*FLEN/8, x4, x1, x2)

inst_67:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0x8038c77f7f280 and fs2 == 0 and fe2 == 0x401 and fm2 == 0xa655dc28894f7 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x3cef3b1205abc and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fa8038c77f7f280; op2val:0x401a655dc28894f7;
op3val:0x3fd3cef3b1205abc; valaddr_reg:x3; val_offset:201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 201*FLEN/8, x4, x1, x2)

inst_68:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0x8038c77f7f280 and fs2 == 0 and fe2 == 0x401 and fm2 == 0xa655dc28894f7 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x3cef3b1205abc and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fa8038c77f7f280; op2val:0x401a655dc28894f7;
op3val:0x3fd3cef3b1205abc; valaddr_reg:x3; val_offset:204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 204*FLEN/8, x4, x1, x2)

inst_69:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0x8038c77f7f280 and fs2 == 0 and fe2 == 0x401 and fm2 == 0xa655dc28894f7 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x3cef3b1205abc and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fa8038c77f7f280; op2val:0x401a655dc28894f7;
op3val:0x3fd3cef3b1205abc; valaddr_reg:x3; val_offset:207*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 207*FLEN/8, x4, x1, x2)

inst_70:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0x8326b28fd1300 and fs2 == 0 and fe2 == 0x403 and fm2 == 0x25a935ae7ed73 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xbc1b30196274b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fa8326b28fd1300; op2val:0x40325a935ae7ed73;
op3val:0x3febc1b30196274b; valaddr_reg:x3; val_offset:210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210*FLEN/8, x4, x1, x2)

inst_71:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0x8326b28fd1300 and fs2 == 0 and fe2 == 0x403 and fm2 == 0x25a935ae7ed73 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xbc1b30196274b and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fa8326b28fd1300; op2val:0x40325a935ae7ed73;
op3val:0x3febc1b30196274b; valaddr_reg:x3; val_offset:213*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 213*FLEN/8, x4, x1, x2)

inst_72:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0x8326b28fd1300 and fs2 == 0 and fe2 == 0x403 and fm2 == 0x25a935ae7ed73 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xbc1b30196274b and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fa8326b28fd1300; op2val:0x40325a935ae7ed73;
op3val:0x3febc1b30196274b; valaddr_reg:x3; val_offset:216*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 216*FLEN/8, x4, x1, x2)

inst_73:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0x8326b28fd1300 and fs2 == 0 and fe2 == 0x403 and fm2 == 0x25a935ae7ed73 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xbc1b30196274b and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fa8326b28fd1300; op2val:0x40325a935ae7ed73;
op3val:0x3febc1b30196274b; valaddr_reg:x3; val_offset:219*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 219*FLEN/8, x4, x1, x2)

inst_74:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0x8326b28fd1300 and fs2 == 0 and fe2 == 0x403 and fm2 == 0x25a935ae7ed73 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xbc1b30196274b and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fa8326b28fd1300; op2val:0x40325a935ae7ed73;
op3val:0x3febc1b30196274b; valaddr_reg:x3; val_offset:222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 222*FLEN/8, x4, x1, x2)

inst_75:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0xd9a81849ec5c0 and fs2 == 0 and fe2 == 0x402 and fm2 == 0x99c6d487016f1 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x7b16b804f11a8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fad9a81849ec5c0; op2val:0x40299c6d487016f1;
op3val:0x3fe7b16b804f11a8; valaddr_reg:x3; val_offset:225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 225*FLEN/8, x4, x1, x2)

inst_76:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0xd9a81849ec5c0 and fs2 == 0 and fe2 == 0x402 and fm2 == 0x99c6d487016f1 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x7b16b804f11a8 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fad9a81849ec5c0; op2val:0x40299c6d487016f1;
op3val:0x3fe7b16b804f11a8; valaddr_reg:x3; val_offset:228*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 228*FLEN/8, x4, x1, x2)

inst_77:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0xd9a81849ec5c0 and fs2 == 0 and fe2 == 0x402 and fm2 == 0x99c6d487016f1 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x7b16b804f11a8 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fad9a81849ec5c0; op2val:0x40299c6d487016f1;
op3val:0x3fe7b16b804f11a8; valaddr_reg:x3; val_offset:231*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 231*FLEN/8, x4, x1, x2)

inst_78:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0xd9a81849ec5c0 and fs2 == 0 and fe2 == 0x402 and fm2 == 0x99c6d487016f1 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x7b16b804f11a8 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fad9a81849ec5c0; op2val:0x40299c6d487016f1;
op3val:0x3fe7b16b804f11a8; valaddr_reg:x3; val_offset:234*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 234*FLEN/8, x4, x1, x2)

inst_79:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0xd9a81849ec5c0 and fs2 == 0 and fe2 == 0x402 and fm2 == 0x99c6d487016f1 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x7b16b804f11a8 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fad9a81849ec5c0; op2val:0x40299c6d487016f1;
op3val:0x3fe7b16b804f11a8; valaddr_reg:x3; val_offset:237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 237*FLEN/8, x4, x1, x2)

inst_80:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0xe5ca95c88c200 and fs2 == 0 and fe2 == 0x401 and fm2 == 0xe67e4dd9ecae5 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xcd9722e5f5d0c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fae5ca95c88c200; op2val:0x401e67e4dd9ecae5;
op3val:0x3fdcd9722e5f5d0c; valaddr_reg:x3; val_offset:240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240*FLEN/8, x4, x1, x2)

inst_81:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0xe5ca95c88c200 and fs2 == 0 and fe2 == 0x401 and fm2 == 0xe67e4dd9ecae5 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xcd9722e5f5d0c and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fae5ca95c88c200; op2val:0x401e67e4dd9ecae5;
op3val:0x3fdcd9722e5f5d0c; valaddr_reg:x3; val_offset:243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 243*FLEN/8, x4, x1, x2)

inst_82:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0xe5ca95c88c200 and fs2 == 0 and fe2 == 0x401 and fm2 == 0xe67e4dd9ecae5 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xcd9722e5f5d0c and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fae5ca95c88c200; op2val:0x401e67e4dd9ecae5;
op3val:0x3fdcd9722e5f5d0c; valaddr_reg:x3; val_offset:246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 246*FLEN/8, x4, x1, x2)

inst_83:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0xe5ca95c88c200 and fs2 == 0 and fe2 == 0x401 and fm2 == 0xe67e4dd9ecae5 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xcd9722e5f5d0c and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fae5ca95c88c200; op2val:0x401e67e4dd9ecae5;
op3val:0x3fdcd9722e5f5d0c; valaddr_reg:x3; val_offset:249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 249*FLEN/8, x4, x1, x2)

inst_84:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0xe5ca95c88c200 and fs2 == 0 and fe2 == 0x401 and fm2 == 0xe67e4dd9ecae5 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xcd9722e5f5d0c and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fae5ca95c88c200; op2val:0x401e67e4dd9ecae5;
op3val:0x3fdcd9722e5f5d0c; valaddr_reg:x3; val_offset:252*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 252*FLEN/8, x4, x1, x2)

inst_85:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x01f60e8dc22c8 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x84fd2bd7274a9 and fs3 == 0 and fe3 == 0x3f8 and fm3 == 0x87f80a685e140 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fb01f60e8dc22c8; op2val:0x3fc84fd2bd7274a9;
op3val:0x3f887f80a685e140; valaddr_reg:x3; val_offset:255*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255*FLEN/8, x4, x1, x2)

inst_86:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x01f60e8dc22c8 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x84fd2bd7274a9 and fs3 == 0 and fe3 == 0x3f8 and fm3 == 0x87f80a685e140 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fb01f60e8dc22c8; op2val:0x3fc84fd2bd7274a9;
op3val:0x3f887f80a685e140; valaddr_reg:x3; val_offset:258*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 258*FLEN/8, x4, x1, x2)

inst_87:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x01f60e8dc22c8 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x84fd2bd7274a9 and fs3 == 0 and fe3 == 0x3f8 and fm3 == 0x87f80a685e140 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fb01f60e8dc22c8; op2val:0x3fc84fd2bd7274a9;
op3val:0x3f887f80a685e140; valaddr_reg:x3; val_offset:261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 261*FLEN/8, x4, x1, x2)

inst_88:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x01f60e8dc22c8 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x84fd2bd7274a9 and fs3 == 0 and fe3 == 0x3f8 and fm3 == 0x87f80a685e140 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fb01f60e8dc22c8; op2val:0x3fc84fd2bd7274a9;
op3val:0x3f887f80a685e140; valaddr_reg:x3; val_offset:264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 264*FLEN/8, x4, x1, x2)

inst_89:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x01f60e8dc22c8 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x84fd2bd7274a9 and fs3 == 0 and fe3 == 0x3f8 and fm3 == 0x87f80a685e140 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fb01f60e8dc22c8; op2val:0x3fc84fd2bd7274a9;
op3val:0x3f887f80a685e140; valaddr_reg:x3; val_offset:267*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 267*FLEN/8, x4, x1, x2)

inst_90:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x0bb3f31b1b890 and fs2 == 0 and fe2 == 0x402 and fm2 == 0xb59485b35c122 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xc9957dd5de148 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fb0bb3f31b1b890; op2val:0x402b59485b35c122;
op3val:0x3fec9957dd5de148; valaddr_reg:x3; val_offset:270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 270*FLEN/8, x4, x1, x2)

inst_91:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x0bb3f31b1b890 and fs2 == 0 and fe2 == 0x402 and fm2 == 0xb59485b35c122 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xc9957dd5de148 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fb0bb3f31b1b890; op2val:0x402b59485b35c122;
op3val:0x3fec9957dd5de148; valaddr_reg:x3; val_offset:273*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 273*FLEN/8, x4, x1, x2)

inst_92:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x0bb3f31b1b890 and fs2 == 0 and fe2 == 0x402 and fm2 == 0xb59485b35c122 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xc9957dd5de148 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fb0bb3f31b1b890; op2val:0x402b59485b35c122;
op3val:0x3fec9957dd5de148; valaddr_reg:x3; val_offset:276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 276*FLEN/8, x4, x1, x2)

inst_93:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x0bb3f31b1b890 and fs2 == 0 and fe2 == 0x402 and fm2 == 0xb59485b35c122 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xc9957dd5de148 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fb0bb3f31b1b890; op2val:0x402b59485b35c122;
op3val:0x3fec9957dd5de148; valaddr_reg:x3; val_offset:279*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 279*FLEN/8, x4, x1, x2)

inst_94:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x0bb3f31b1b890 and fs2 == 0 and fe2 == 0x402 and fm2 == 0xb59485b35c122 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xc9957dd5de148 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fb0bb3f31b1b890; op2val:0x402b59485b35c122;
op3val:0x3fec9957dd5de148; valaddr_reg:x3; val_offset:282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 282*FLEN/8, x4, x1, x2)

inst_95:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x2d78639bc7d18 and fs2 == 0 and fe2 == 0x400 and fm2 == 0xf314eb94a6891 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x25dd267e7fe80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fb2d78639bc7d18; op2val:0x400f314eb94a6891;
op3val:0x3fd25dd267e7fe80; valaddr_reg:x3; val_offset:285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 285*FLEN/8, x4, x1, x2)

inst_96:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x2d78639bc7d18 and fs2 == 0 and fe2 == 0x400 and fm2 == 0xf314eb94a6891 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x25dd267e7fe80 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fb2d78639bc7d18; op2val:0x400f314eb94a6891;
op3val:0x3fd25dd267e7fe80; valaddr_reg:x3; val_offset:288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 288*FLEN/8, x4, x1, x2)

inst_97:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x2d78639bc7d18 and fs2 == 0 and fe2 == 0x400 and fm2 == 0xf314eb94a6891 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x25dd267e7fe80 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fb2d78639bc7d18; op2val:0x400f314eb94a6891;
op3val:0x3fd25dd267e7fe80; valaddr_reg:x3; val_offset:291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 291*FLEN/8, x4, x1, x2)

inst_98:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x2d78639bc7d18 and fs2 == 0 and fe2 == 0x400 and fm2 == 0xf314eb94a6891 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x25dd267e7fe80 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fb2d78639bc7d18; op2val:0x400f314eb94a6891;
op3val:0x3fd25dd267e7fe80; valaddr_reg:x3; val_offset:294*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 294*FLEN/8, x4, x1, x2)

inst_99:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x2d78639bc7d18 and fs2 == 0 and fe2 == 0x400 and fm2 == 0xf314eb94a6891 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x25dd267e7fe80 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fb2d78639bc7d18; op2val:0x400f314eb94a6891;
op3val:0x3fd25dd267e7fe80; valaddr_reg:x3; val_offset:297*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 297*FLEN/8, x4, x1, x2)

inst_100:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x6672f1df8e1f0 and fs2 == 0 and fe2 == 0x401 and fm2 == 0x972b19b4031b8 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x1d0e8beb29257 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fb6672f1df8e1f0; op2val:0x401972b19b4031b8;
op3val:0x3fe1d0e8beb29257; valaddr_reg:x3; val_offset:300*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300*FLEN/8, x4, x1, x2)

inst_101:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x6672f1df8e1f0 and fs2 == 0 and fe2 == 0x401 and fm2 == 0x972b19b4031b8 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x1d0e8beb29257 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fb6672f1df8e1f0; op2val:0x401972b19b4031b8;
op3val:0x3fe1d0e8beb29257; valaddr_reg:x3; val_offset:303*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 303*FLEN/8, x4, x1, x2)

inst_102:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x6672f1df8e1f0 and fs2 == 0 and fe2 == 0x401 and fm2 == 0x972b19b4031b8 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x1d0e8beb29257 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fb6672f1df8e1f0; op2val:0x401972b19b4031b8;
op3val:0x3fe1d0e8beb29257; valaddr_reg:x3; val_offset:306*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 306*FLEN/8, x4, x1, x2)

inst_103:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x6672f1df8e1f0 and fs2 == 0 and fe2 == 0x401 and fm2 == 0x972b19b4031b8 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x1d0e8beb29257 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fb6672f1df8e1f0; op2val:0x401972b19b4031b8;
op3val:0x3fe1d0e8beb29257; valaddr_reg:x3; val_offset:309*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 309*FLEN/8, x4, x1, x2)

inst_104:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x6672f1df8e1f0 and fs2 == 0 and fe2 == 0x401 and fm2 == 0x972b19b4031b8 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x1d0e8beb29257 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fb6672f1df8e1f0; op2val:0x401972b19b4031b8;
op3val:0x3fe1d0e8beb29257; valaddr_reg:x3; val_offset:312*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 312*FLEN/8, x4, x1, x2)

inst_105:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x718d873911d80 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x34d950cb3586b and fs3 == 0 and fe3 == 0x3fc and fm3 == 0xbdd7fc49db98c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fb718d873911d80; op2val:0x40034d950cb3586b;
op3val:0x3fcbdd7fc49db98c; valaddr_reg:x3; val_offset:315*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 315*FLEN/8, x4, x1, x2)

inst_106:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x718d873911d80 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x34d950cb3586b and fs3 == 0 and fe3 == 0x3fc and fm3 == 0xbdd7fc49db98c and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fb718d873911d80; op2val:0x40034d950cb3586b;
op3val:0x3fcbdd7fc49db98c; valaddr_reg:x3; val_offset:318*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 318*FLEN/8, x4, x1, x2)

inst_107:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x718d873911d80 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x34d950cb3586b and fs3 == 0 and fe3 == 0x3fc and fm3 == 0xbdd7fc49db98c and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fb718d873911d80; op2val:0x40034d950cb3586b;
op3val:0x3fcbdd7fc49db98c; valaddr_reg:x3; val_offset:321*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 321*FLEN/8, x4, x1, x2)

inst_108:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x718d873911d80 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x34d950cb3586b and fs3 == 0 and fe3 == 0x3fc and fm3 == 0xbdd7fc49db98c and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fb718d873911d80; op2val:0x40034d950cb3586b;
op3val:0x3fcbdd7fc49db98c; valaddr_reg:x3; val_offset:324*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 324*FLEN/8, x4, x1, x2)

inst_109:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x718d873911d80 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x34d950cb3586b and fs3 == 0 and fe3 == 0x3fc and fm3 == 0xbdd7fc49db98c and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fb718d873911d80; op2val:0x40034d950cb3586b;
op3val:0x3fcbdd7fc49db98c; valaddr_reg:x3; val_offset:327*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 327*FLEN/8, x4, x1, x2)

inst_110:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x85b9cf11bd230 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x044ecf31c1e57 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x8c48b05819ad8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fb85b9cf11bd230; op2val:0x400044ecf31c1e57;
op3val:0x3fc8c48b05819ad8; valaddr_reg:x3; val_offset:330*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 330*FLEN/8, x4, x1, x2)

inst_111:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x85b9cf11bd230 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x044ecf31c1e57 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x8c48b05819ad8 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fb85b9cf11bd230; op2val:0x400044ecf31c1e57;
op3val:0x3fc8c48b05819ad8; valaddr_reg:x3; val_offset:333*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 333*FLEN/8, x4, x1, x2)

inst_112:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x85b9cf11bd230 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x044ecf31c1e57 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x8c48b05819ad8 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fb85b9cf11bd230; op2val:0x400044ecf31c1e57;
op3val:0x3fc8c48b05819ad8; valaddr_reg:x3; val_offset:336*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 336*FLEN/8, x4, x1, x2)

inst_113:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x85b9cf11bd230 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x044ecf31c1e57 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x8c48b05819ad8 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fb85b9cf11bd230; op2val:0x400044ecf31c1e57;
op3val:0x3fc8c48b05819ad8; valaddr_reg:x3; val_offset:339*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 339*FLEN/8, x4, x1, x2)

inst_114:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x85b9cf11bd230 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x044ecf31c1e57 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x8c48b05819ad8 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fb85b9cf11bd230; op2val:0x400044ecf31c1e57;
op3val:0x3fc8c48b05819ad8; valaddr_reg:x3; val_offset:342*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 342*FLEN/8, x4, x1, x2)

inst_115:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x932ef0852acd8 and fs2 == 0 and fe2 == 0x401 and fm2 == 0xcdbd884193169 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x6b9b03afcb5f0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fb932ef0852acd8; op2val:0x401cdbd884193169;
op3val:0x3fe6b9b03afcb5f0; valaddr_reg:x3; val_offset:345*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 345*FLEN/8, x4, x1, x2)

inst_116:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x932ef0852acd8 and fs2 == 0 and fe2 == 0x401 and fm2 == 0xcdbd884193169 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x6b9b03afcb5f0 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fb932ef0852acd8; op2val:0x401cdbd884193169;
op3val:0x3fe6b9b03afcb5f0; valaddr_reg:x3; val_offset:348*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 348*FLEN/8, x4, x1, x2)

inst_117:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x932ef0852acd8 and fs2 == 0 and fe2 == 0x401 and fm2 == 0xcdbd884193169 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x6b9b03afcb5f0 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fb932ef0852acd8; op2val:0x401cdbd884193169;
op3val:0x3fe6b9b03afcb5f0; valaddr_reg:x3; val_offset:351*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 351*FLEN/8, x4, x1, x2)

inst_118:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x932ef0852acd8 and fs2 == 0 and fe2 == 0x401 and fm2 == 0xcdbd884193169 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x6b9b03afcb5f0 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fb932ef0852acd8; op2val:0x401cdbd884193169;
op3val:0x3fe6b9b03afcb5f0; valaddr_reg:x3; val_offset:354*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 354*FLEN/8, x4, x1, x2)

inst_119:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x932ef0852acd8 and fs2 == 0 and fe2 == 0x401 and fm2 == 0xcdbd884193169 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x6b9b03afcb5f0 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fb932ef0852acd8; op2val:0x401cdbd884193169;
op3val:0x3fe6b9b03afcb5f0; valaddr_reg:x3; val_offset:357*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 357*FLEN/8, x4, x1, x2)

inst_120:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x9b8346420efa0 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x185476e67ceb2 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0xc29f5b0c512f8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fb9b8346420efa0; op2val:0x400185476e67ceb2;
op3val:0x3fcc29f5b0c512f8; valaddr_reg:x3; val_offset:360*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 360*FLEN/8, x4, x1, x2)

inst_121:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x9b8346420efa0 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x185476e67ceb2 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0xc29f5b0c512f8 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fb9b8346420efa0; op2val:0x400185476e67ceb2;
op3val:0x3fcc29f5b0c512f8; valaddr_reg:x3; val_offset:363*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 363*FLEN/8, x4, x1, x2)

inst_122:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x9b8346420efa0 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x185476e67ceb2 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0xc29f5b0c512f8 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fb9b8346420efa0; op2val:0x400185476e67ceb2;
op3val:0x3fcc29f5b0c512f8; valaddr_reg:x3; val_offset:366*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 366*FLEN/8, x4, x1, x2)

inst_123:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x9b8346420efa0 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x185476e67ceb2 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0xc29f5b0c512f8 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fb9b8346420efa0; op2val:0x400185476e67ceb2;
op3val:0x3fcc29f5b0c512f8; valaddr_reg:x3; val_offset:369*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 369*FLEN/8, x4, x1, x2)

inst_124:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x9b8346420efa0 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x185476e67ceb2 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0xc29f5b0c512f8 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fb9b8346420efa0; op2val:0x400185476e67ceb2;
op3val:0x3fcc29f5b0c512f8; valaddr_reg:x3; val_offset:372*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 372*FLEN/8, x4, x1, x2)

inst_125:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0xb38e80e6df720 and fs2 == 0 and fe2 == 0x401 and fm2 == 0xe1f06b96ffe78 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x99fbe66c0d85c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fbb38e80e6df720; op2val:0x401e1f06b96ffe78;
op3val:0x3fe99fbe66c0d85c; valaddr_reg:x3; val_offset:375*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 375*FLEN/8, x4, x1, x2)

inst_126:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0xb38e80e6df720 and fs2 == 0 and fe2 == 0x401 and fm2 == 0xe1f06b96ffe78 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x99fbe66c0d85c and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fbb38e80e6df720; op2val:0x401e1f06b96ffe78;
op3val:0x3fe99fbe66c0d85c; valaddr_reg:x3; val_offset:378*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 378*FLEN/8, x4, x1, x2)

inst_127:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0xb38e80e6df720 and fs2 == 0 and fe2 == 0x401 and fm2 == 0xe1f06b96ffe78 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x99fbe66c0d85c and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fbb38e80e6df720; op2val:0x401e1f06b96ffe78;
op3val:0x3fe99fbe66c0d85c; valaddr_reg:x3; val_offset:381*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 381*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_2)

inst_128:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0xb38e80e6df720 and fs2 == 0 and fe2 == 0x401 and fm2 == 0xe1f06b96ffe78 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x99fbe66c0d85c and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fbb38e80e6df720; op2val:0x401e1f06b96ffe78;
op3val:0x3fe99fbe66c0d85c; valaddr_reg:x3; val_offset:384*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 384*FLEN/8, x4, x1, x2)

inst_129:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0xb38e80e6df720 and fs2 == 0 and fe2 == 0x401 and fm2 == 0xe1f06b96ffe78 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x99fbe66c0d85c and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fbb38e80e6df720; op2val:0x401e1f06b96ffe78;
op3val:0x3fe99fbe66c0d85c; valaddr_reg:x3; val_offset:387*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 387*FLEN/8, x4, x1, x2)

inst_130:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0xba9aa6f95a870 and fs2 == 0 and fe2 == 0x400 and fm2 == 0xb971e039929af and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x7d9ca5c90e828 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fbba9aa6f95a870; op2val:0x400b971e039929af;
op3val:0x3fd7d9ca5c90e828; valaddr_reg:x3; val_offset:390*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 390*FLEN/8, x4, x1, x2)

inst_131:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0xba9aa6f95a870 and fs2 == 0 and fe2 == 0x400 and fm2 == 0xb971e039929af and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x7d9ca5c90e828 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fbba9aa6f95a870; op2val:0x400b971e039929af;
op3val:0x3fd7d9ca5c90e828; valaddr_reg:x3; val_offset:393*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 393*FLEN/8, x4, x1, x2)

inst_132:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0xba9aa6f95a870 and fs2 == 0 and fe2 == 0x400 and fm2 == 0xb971e039929af and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x7d9ca5c90e828 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fbba9aa6f95a870; op2val:0x400b971e039929af;
op3val:0x3fd7d9ca5c90e828; valaddr_reg:x3; val_offset:396*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 396*FLEN/8, x4, x1, x2)

inst_133:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0xba9aa6f95a870 and fs2 == 0 and fe2 == 0x400 and fm2 == 0xb971e039929af and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x7d9ca5c90e828 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fbba9aa6f95a870; op2val:0x400b971e039929af;
op3val:0x3fd7d9ca5c90e828; valaddr_reg:x3; val_offset:399*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 399*FLEN/8, x4, x1, x2)

inst_134:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0xba9aa6f95a870 and fs2 == 0 and fe2 == 0x400 and fm2 == 0xb971e039929af and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x7d9ca5c90e828 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fbba9aa6f95a870; op2val:0x400b971e039929af;
op3val:0x3fd7d9ca5c90e828; valaddr_reg:x3; val_offset:402*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 402*FLEN/8, x4, x1, x2)

inst_135:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0xcf699fc64f208 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x4fa232aa4b78f and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x2fc86a514180a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fbcf699fc64f208; op2val:0x4004fa232aa4b78f;
op3val:0x3fd2fc86a514180a; valaddr_reg:x3; val_offset:405*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 405*FLEN/8, x4, x1, x2)

inst_136:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0xcf699fc64f208 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x4fa232aa4b78f and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x2fc86a514180a and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fbcf699fc64f208; op2val:0x4004fa232aa4b78f;
op3val:0x3fd2fc86a514180a; valaddr_reg:x3; val_offset:408*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 408*FLEN/8, x4, x1, x2)

inst_137:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0xcf699fc64f208 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x4fa232aa4b78f and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x2fc86a514180a and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fbcf699fc64f208; op2val:0x4004fa232aa4b78f;
op3val:0x3fd2fc86a514180a; valaddr_reg:x3; val_offset:411*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 411*FLEN/8, x4, x1, x2)

inst_138:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0xcf699fc64f208 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x4fa232aa4b78f and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x2fc86a514180a and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fbcf699fc64f208; op2val:0x4004fa232aa4b78f;
op3val:0x3fd2fc86a514180a; valaddr_reg:x3; val_offset:414*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 414*FLEN/8, x4, x1, x2)

inst_139:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0xcf699fc64f208 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x4fa232aa4b78f and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x2fc86a514180a and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fbcf699fc64f208; op2val:0x4004fa232aa4b78f;
op3val:0x3fd2fc86a514180a; valaddr_reg:x3; val_offset:417*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 417*FLEN/8, x4, x1, x2)

inst_140:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0xda0b4ff1256e0 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x9fef8366fa9f0 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x8119ed3d04278 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fbda0b4ff1256e0; op2val:0x3ff9fef8366fa9f0;
op3val:0x3fc8119ed3d04278; valaddr_reg:x3; val_offset:420*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 420*FLEN/8, x4, x1, x2)

inst_141:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0xda0b4ff1256e0 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x9fef8366fa9f0 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x8119ed3d04278 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fbda0b4ff1256e0; op2val:0x3ff9fef8366fa9f0;
op3val:0x3fc8119ed3d04278; valaddr_reg:x3; val_offset:423*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 423*FLEN/8, x4, x1, x2)

inst_142:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0xda0b4ff1256e0 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x9fef8366fa9f0 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x8119ed3d04278 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fbda0b4ff1256e0; op2val:0x3ff9fef8366fa9f0;
op3val:0x3fc8119ed3d04278; valaddr_reg:x3; val_offset:426*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 426*FLEN/8, x4, x1, x2)

inst_143:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0xda0b4ff1256e0 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x9fef8366fa9f0 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x8119ed3d04278 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fbda0b4ff1256e0; op2val:0x3ff9fef8366fa9f0;
op3val:0x3fc8119ed3d04278; valaddr_reg:x3; val_offset:429*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 429*FLEN/8, x4, x1, x2)

inst_144:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0xda0b4ff1256e0 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x9fef8366fa9f0 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x8119ed3d04278 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fbda0b4ff1256e0; op2val:0x3ff9fef8366fa9f0;
op3val:0x3fc8119ed3d04278; valaddr_reg:x3; val_offset:432*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 432*FLEN/8, x4, x1, x2)

inst_145:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0xdfeaadb9b9c40 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x1ba5b1126bc5d and fs3 == 0 and fe3 == 0x3fa and fm3 == 0x09df862109dc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fbdfeaadb9b9c40; op2val:0x3fd1ba5b1126bc5d;
op3val:0x3fa09df862109dc0; valaddr_reg:x3; val_offset:435*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 435*FLEN/8, x4, x1, x2)

inst_146:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0xdfeaadb9b9c40 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x1ba5b1126bc5d and fs3 == 0 and fe3 == 0x3fa and fm3 == 0x09df862109dc0 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fbdfeaadb9b9c40; op2val:0x3fd1ba5b1126bc5d;
op3val:0x3fa09df862109dc0; valaddr_reg:x3; val_offset:438*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 438*FLEN/8, x4, x1, x2)

inst_147:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0xdfeaadb9b9c40 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x1ba5b1126bc5d and fs3 == 0 and fe3 == 0x3fa and fm3 == 0x09df862109dc0 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fbdfeaadb9b9c40; op2val:0x3fd1ba5b1126bc5d;
op3val:0x3fa09df862109dc0; valaddr_reg:x3; val_offset:441*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 441*FLEN/8, x4, x1, x2)

inst_148:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0xdfeaadb9b9c40 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x1ba5b1126bc5d and fs3 == 0 and fe3 == 0x3fa and fm3 == 0x09df862109dc0 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fbdfeaadb9b9c40; op2val:0x3fd1ba5b1126bc5d;
op3val:0x3fa09df862109dc0; valaddr_reg:x3; val_offset:444*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 444*FLEN/8, x4, x1, x2)

inst_149:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0xdfeaadb9b9c40 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x1ba5b1126bc5d and fs3 == 0 and fe3 == 0x3fa and fm3 == 0x09df862109dc0 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fbdfeaadb9b9c40; op2val:0x3fd1ba5b1126bc5d;
op3val:0x3fa09df862109dc0; valaddr_reg:x3; val_offset:447*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 447*FLEN/8, x4, x1, x2)

inst_150:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0xfe0afa5d00ca8 and fs2 == 0 and fe2 == 0x401 and fm2 == 0x60b5a20756fab and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x5f5c7c6a3b6f7 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fbfe0afa5d00ca8; op2val:0x40160b5a20756fab;
op3val:0x3fe5f5c7c6a3b6f7; valaddr_reg:x3; val_offset:450*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 450*FLEN/8, x4, x1, x2)

inst_151:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0xfe0afa5d00ca8 and fs2 == 0 and fe2 == 0x401 and fm2 == 0x60b5a20756fab and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x5f5c7c6a3b6f7 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fbfe0afa5d00ca8; op2val:0x40160b5a20756fab;
op3val:0x3fe5f5c7c6a3b6f7; valaddr_reg:x3; val_offset:453*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 453*FLEN/8, x4, x1, x2)

inst_152:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0xfe0afa5d00ca8 and fs2 == 0 and fe2 == 0x401 and fm2 == 0x60b5a20756fab and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x5f5c7c6a3b6f7 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fbfe0afa5d00ca8; op2val:0x40160b5a20756fab;
op3val:0x3fe5f5c7c6a3b6f7; valaddr_reg:x3; val_offset:456*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 456*FLEN/8, x4, x1, x2)

inst_153:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0xfe0afa5d00ca8 and fs2 == 0 and fe2 == 0x401 and fm2 == 0x60b5a20756fab and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x5f5c7c6a3b6f7 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fbfe0afa5d00ca8; op2val:0x40160b5a20756fab;
op3val:0x3fe5f5c7c6a3b6f7; valaddr_reg:x3; val_offset:459*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 459*FLEN/8, x4, x1, x2)

inst_154:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0xfe0afa5d00ca8 and fs2 == 0 and fe2 == 0x401 and fm2 == 0x60b5a20756fab and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x5f5c7c6a3b6f7 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fbfe0afa5d00ca8; op2val:0x40160b5a20756fab;
op3val:0x3fe5f5c7c6a3b6f7; valaddr_reg:x3; val_offset:462*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 462*FLEN/8, x4, x1, x2)

inst_155:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x00ff3b51c5d4c and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x9c5995a864578 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x9df4b270d3914 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc00ff3b51c5d4c; op2val:0x3ff9c5995a864578;
op3val:0x3fc9df4b270d3914; valaddr_reg:x3; val_offset:465*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 465*FLEN/8, x4, x1, x2)

inst_156:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x00ff3b51c5d4c and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x9c5995a864578 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x9df4b270d3914 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc00ff3b51c5d4c; op2val:0x3ff9c5995a864578;
op3val:0x3fc9df4b270d3914; valaddr_reg:x3; val_offset:468*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 468*FLEN/8, x4, x1, x2)

inst_157:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x00ff3b51c5d4c and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x9c5995a864578 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x9df4b270d3914 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc00ff3b51c5d4c; op2val:0x3ff9c5995a864578;
op3val:0x3fc9df4b270d3914; valaddr_reg:x3; val_offset:471*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 471*FLEN/8, x4, x1, x2)

inst_158:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x00ff3b51c5d4c and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x9c5995a864578 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x9df4b270d3914 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc00ff3b51c5d4c; op2val:0x3ff9c5995a864578;
op3val:0x3fc9df4b270d3914; valaddr_reg:x3; val_offset:474*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 474*FLEN/8, x4, x1, x2)

inst_159:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x00ff3b51c5d4c and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x9c5995a864578 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x9df4b270d3914 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc00ff3b51c5d4c; op2val:0x3ff9c5995a864578;
op3val:0x3fc9df4b270d3914; valaddr_reg:x3; val_offset:477*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 477*FLEN/8, x4, x1, x2)

inst_160:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x0923777e7a86c and fs2 == 0 and fe2 == 0x400 and fm2 == 0x45bc5916460aa and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x515d1903b8910 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc0923777e7a86c; op2val:0x40045bc5916460aa;
op3val:0x3fd515d1903b8910; valaddr_reg:x3; val_offset:480*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 480*FLEN/8, x4, x1, x2)

inst_161:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x0923777e7a86c and fs2 == 0 and fe2 == 0x400 and fm2 == 0x45bc5916460aa and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x515d1903b8910 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc0923777e7a86c; op2val:0x40045bc5916460aa;
op3val:0x3fd515d1903b8910; valaddr_reg:x3; val_offset:483*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 483*FLEN/8, x4, x1, x2)

inst_162:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x0923777e7a86c and fs2 == 0 and fe2 == 0x400 and fm2 == 0x45bc5916460aa and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x515d1903b8910 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc0923777e7a86c; op2val:0x40045bc5916460aa;
op3val:0x3fd515d1903b8910; valaddr_reg:x3; val_offset:486*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 486*FLEN/8, x4, x1, x2)

inst_163:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x0923777e7a86c and fs2 == 0 and fe2 == 0x400 and fm2 == 0x45bc5916460aa and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x515d1903b8910 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc0923777e7a86c; op2val:0x40045bc5916460aa;
op3val:0x3fd515d1903b8910; valaddr_reg:x3; val_offset:489*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 489*FLEN/8, x4, x1, x2)

inst_164:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x0923777e7a86c and fs2 == 0 and fe2 == 0x400 and fm2 == 0x45bc5916460aa and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x515d1903b8910 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc0923777e7a86c; op2val:0x40045bc5916460aa;
op3val:0x3fd515d1903b8910; valaddr_reg:x3; val_offset:492*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 492*FLEN/8, x4, x1, x2)

inst_165:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x17e90be8b3888 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x1c853639e0e6c and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x37183093c85fa and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc17e90be8b3888; op2val:0x4001c853639e0e6c;
op3val:0x3fd37183093c85fa; valaddr_reg:x3; val_offset:495*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 495*FLEN/8, x4, x1, x2)

inst_166:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x17e90be8b3888 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x1c853639e0e6c and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x37183093c85fa and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc17e90be8b3888; op2val:0x4001c853639e0e6c;
op3val:0x3fd37183093c85fa; valaddr_reg:x3; val_offset:498*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 498*FLEN/8, x4, x1, x2)

inst_167:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x17e90be8b3888 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x1c853639e0e6c and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x37183093c85fa and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc17e90be8b3888; op2val:0x4001c853639e0e6c;
op3val:0x3fd37183093c85fa; valaddr_reg:x3; val_offset:501*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 501*FLEN/8, x4, x1, x2)

inst_168:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x17e90be8b3888 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x1c853639e0e6c and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x37183093c85fa and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc17e90be8b3888; op2val:0x4001c853639e0e6c;
op3val:0x3fd37183093c85fa; valaddr_reg:x3; val_offset:504*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 504*FLEN/8, x4, x1, x2)

inst_169:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x17e90be8b3888 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x1c853639e0e6c and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x37183093c85fa and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc17e90be8b3888; op2val:0x4001c853639e0e6c;
op3val:0x3fd37183093c85fa; valaddr_reg:x3; val_offset:507*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 507*FLEN/8, x4, x1, x2)

inst_170:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x21db49dde8418 and fs2 == 0 and fe2 == 0x401 and fm2 == 0x413c610b0f2bf and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x6bb854e52cd37 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc21db49dde8418; op2val:0x401413c610b0f2bf;
op3val:0x3fe6bb854e52cd37; valaddr_reg:x3; val_offset:510*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 510*FLEN/8, x4, x1, x2)

inst_171:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x21db49dde8418 and fs2 == 0 and fe2 == 0x401 and fm2 == 0x413c610b0f2bf and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x6bb854e52cd37 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc21db49dde8418; op2val:0x401413c610b0f2bf;
op3val:0x3fe6bb854e52cd37; valaddr_reg:x3; val_offset:513*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 513*FLEN/8, x4, x1, x2)

inst_172:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x21db49dde8418 and fs2 == 0 and fe2 == 0x401 and fm2 == 0x413c610b0f2bf and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x6bb854e52cd37 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc21db49dde8418; op2val:0x401413c610b0f2bf;
op3val:0x3fe6bb854e52cd37; valaddr_reg:x3; val_offset:516*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 516*FLEN/8, x4, x1, x2)

inst_173:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x21db49dde8418 and fs2 == 0 and fe2 == 0x401 and fm2 == 0x413c610b0f2bf and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x6bb854e52cd37 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc21db49dde8418; op2val:0x401413c610b0f2bf;
op3val:0x3fe6bb854e52cd37; valaddr_reg:x3; val_offset:519*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 519*FLEN/8, x4, x1, x2)

inst_174:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x21db49dde8418 and fs2 == 0 and fe2 == 0x401 and fm2 == 0x413c610b0f2bf and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x6bb854e52cd37 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc21db49dde8418; op2val:0x401413c610b0f2bf;
op3val:0x3fe6bb854e52cd37; valaddr_reg:x3; val_offset:522*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 522*FLEN/8, x4, x1, x2)

inst_175:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x2dd0f3ce0ae90 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x50dce37c3f5d6 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x8d26abc2b77d8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc2dd0f3ce0ae90; op2val:0x3ff50dce37c3f5d6;
op3val:0x3fc8d26abc2b77d8; valaddr_reg:x3; val_offset:525*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 525*FLEN/8, x4, x1, x2)

inst_176:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x2dd0f3ce0ae90 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x50dce37c3f5d6 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x8d26abc2b77d8 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc2dd0f3ce0ae90; op2val:0x3ff50dce37c3f5d6;
op3val:0x3fc8d26abc2b77d8; valaddr_reg:x3; val_offset:528*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 528*FLEN/8, x4, x1, x2)

inst_177:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x2dd0f3ce0ae90 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x50dce37c3f5d6 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x8d26abc2b77d8 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc2dd0f3ce0ae90; op2val:0x3ff50dce37c3f5d6;
op3val:0x3fc8d26abc2b77d8; valaddr_reg:x3; val_offset:531*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 531*FLEN/8, x4, x1, x2)

inst_178:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x2dd0f3ce0ae90 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x50dce37c3f5d6 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x8d26abc2b77d8 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc2dd0f3ce0ae90; op2val:0x3ff50dce37c3f5d6;
op3val:0x3fc8d26abc2b77d8; valaddr_reg:x3; val_offset:534*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 534*FLEN/8, x4, x1, x2)

inst_179:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x2dd0f3ce0ae90 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x50dce37c3f5d6 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x8d26abc2b77d8 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc2dd0f3ce0ae90; op2val:0x3ff50dce37c3f5d6;
op3val:0x3fc8d26abc2b77d8; valaddr_reg:x3; val_offset:537*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 537*FLEN/8, x4, x1, x2)

inst_180:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x35608e830df90 and fs2 == 0 and fe2 == 0x3fa and fm2 == 0x760853fb18f8b and fs3 == 0 and fe3 == 0x3f7 and fm3 == 0xc40520b5ac900 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc35608e830df90; op2val:0x3fa760853fb18f8b;
op3val:0x3f7c40520b5ac900; valaddr_reg:x3; val_offset:540*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 540*FLEN/8, x4, x1, x2)

inst_181:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x35608e830df90 and fs2 == 0 and fe2 == 0x3fa and fm2 == 0x760853fb18f8b and fs3 == 0 and fe3 == 0x3f7 and fm3 == 0xc40520b5ac900 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc35608e830df90; op2val:0x3fa760853fb18f8b;
op3val:0x3f7c40520b5ac900; valaddr_reg:x3; val_offset:543*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 543*FLEN/8, x4, x1, x2)

inst_182:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x35608e830df90 and fs2 == 0 and fe2 == 0x3fa and fm2 == 0x760853fb18f8b and fs3 == 0 and fe3 == 0x3f7 and fm3 == 0xc40520b5ac900 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc35608e830df90; op2val:0x3fa760853fb18f8b;
op3val:0x3f7c40520b5ac900; valaddr_reg:x3; val_offset:546*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 546*FLEN/8, x4, x1, x2)

inst_183:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x35608e830df90 and fs2 == 0 and fe2 == 0x3fa and fm2 == 0x760853fb18f8b and fs3 == 0 and fe3 == 0x3f7 and fm3 == 0xc40520b5ac900 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc35608e830df90; op2val:0x3fa760853fb18f8b;
op3val:0x3f7c40520b5ac900; valaddr_reg:x3; val_offset:549*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 549*FLEN/8, x4, x1, x2)

inst_184:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x35608e830df90 and fs2 == 0 and fe2 == 0x3fa and fm2 == 0x760853fb18f8b and fs3 == 0 and fe3 == 0x3f7 and fm3 == 0xc40520b5ac900 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc35608e830df90; op2val:0x3fa760853fb18f8b;
op3val:0x3f7c40520b5ac900; valaddr_reg:x3; val_offset:552*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 552*FLEN/8, x4, x1, x2)

inst_185:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x46c9bcff82f00 and fs2 == 0 and fe2 == 0x400 and fm2 == 0xa18ed09a1191d and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x0a827585cfae3 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc46c9bcff82f00; op2val:0x400a18ed09a1191d;
op3val:0x3fe0a827585cfae3; valaddr_reg:x3; val_offset:555*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 555*FLEN/8, x4, x1, x2)

inst_186:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x46c9bcff82f00 and fs2 == 0 and fe2 == 0x400 and fm2 == 0xa18ed09a1191d and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x0a827585cfae3 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc46c9bcff82f00; op2val:0x400a18ed09a1191d;
op3val:0x3fe0a827585cfae3; valaddr_reg:x3; val_offset:558*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 558*FLEN/8, x4, x1, x2)

inst_187:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x46c9bcff82f00 and fs2 == 0 and fe2 == 0x400 and fm2 == 0xa18ed09a1191d and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x0a827585cfae3 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc46c9bcff82f00; op2val:0x400a18ed09a1191d;
op3val:0x3fe0a827585cfae3; valaddr_reg:x3; val_offset:561*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 561*FLEN/8, x4, x1, x2)

inst_188:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x46c9bcff82f00 and fs2 == 0 and fe2 == 0x400 and fm2 == 0xa18ed09a1191d and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x0a827585cfae3 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc46c9bcff82f00; op2val:0x400a18ed09a1191d;
op3val:0x3fe0a827585cfae3; valaddr_reg:x3; val_offset:564*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 564*FLEN/8, x4, x1, x2)

inst_189:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x46c9bcff82f00 and fs2 == 0 and fe2 == 0x400 and fm2 == 0xa18ed09a1191d and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x0a827585cfae3 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc46c9bcff82f00; op2val:0x400a18ed09a1191d;
op3val:0x3fe0a827585cfae3; valaddr_reg:x3; val_offset:567*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 567*FLEN/8, x4, x1, x2)

inst_190:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x47ae318d6eca8 and fs2 == 0 and fe2 == 0x401 and fm2 == 0x5925506beafb3 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xb9c983e555d19 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc47ae318d6eca8; op2val:0x4015925506beafb3;
op3val:0x3feb9c983e555d19; valaddr_reg:x3; val_offset:570*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 570*FLEN/8, x4, x1, x2)

inst_191:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x47ae318d6eca8 and fs2 == 0 and fe2 == 0x401 and fm2 == 0x5925506beafb3 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xb9c983e555d19 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc47ae318d6eca8; op2val:0x4015925506beafb3;
op3val:0x3feb9c983e555d19; valaddr_reg:x3; val_offset:573*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 573*FLEN/8, x4, x1, x2)

inst_192:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x47ae318d6eca8 and fs2 == 0 and fe2 == 0x401 and fm2 == 0x5925506beafb3 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xb9c983e555d19 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc47ae318d6eca8; op2val:0x4015925506beafb3;
op3val:0x3feb9c983e555d19; valaddr_reg:x3; val_offset:576*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 576*FLEN/8, x4, x1, x2)

inst_193:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x47ae318d6eca8 and fs2 == 0 and fe2 == 0x401 and fm2 == 0x5925506beafb3 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xb9c983e555d19 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc47ae318d6eca8; op2val:0x4015925506beafb3;
op3val:0x3feb9c983e555d19; valaddr_reg:x3; val_offset:579*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 579*FLEN/8, x4, x1, x2)

inst_194:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x47ae318d6eca8 and fs2 == 0 and fe2 == 0x401 and fm2 == 0x5925506beafb3 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xb9c983e555d19 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc47ae318d6eca8; op2val:0x4015925506beafb3;
op3val:0x3feb9c983e555d19; valaddr_reg:x3; val_offset:582*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 582*FLEN/8, x4, x1, x2)

inst_195:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x47bef8e80a180 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x61f83f0832db7 and fs3 == 0 and fe3 == 0x3fa and fm3 == 0xc52c26eb950a0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc47bef8e80a180; op2val:0x3fd61f83f0832db7;
op3val:0x3fac52c26eb950a0; valaddr_reg:x3; val_offset:585*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 585*FLEN/8, x4, x1, x2)

inst_196:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x47bef8e80a180 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x61f83f0832db7 and fs3 == 0 and fe3 == 0x3fa and fm3 == 0xc52c26eb950a0 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc47bef8e80a180; op2val:0x3fd61f83f0832db7;
op3val:0x3fac52c26eb950a0; valaddr_reg:x3; val_offset:588*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 588*FLEN/8, x4, x1, x2)

inst_197:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x47bef8e80a180 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x61f83f0832db7 and fs3 == 0 and fe3 == 0x3fa and fm3 == 0xc52c26eb950a0 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc47bef8e80a180; op2val:0x3fd61f83f0832db7;
op3val:0x3fac52c26eb950a0; valaddr_reg:x3; val_offset:591*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 591*FLEN/8, x4, x1, x2)

inst_198:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x47bef8e80a180 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x61f83f0832db7 and fs3 == 0 and fe3 == 0x3fa and fm3 == 0xc52c26eb950a0 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc47bef8e80a180; op2val:0x3fd61f83f0832db7;
op3val:0x3fac52c26eb950a0; valaddr_reg:x3; val_offset:594*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 594*FLEN/8, x4, x1, x2)

inst_199:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x47bef8e80a180 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x61f83f0832db7 and fs3 == 0 and fe3 == 0x3fa and fm3 == 0xc52c26eb950a0 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc47bef8e80a180; op2val:0x3fd61f83f0832db7;
op3val:0x3fac52c26eb950a0; valaddr_reg:x3; val_offset:597*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 597*FLEN/8, x4, x1, x2)

inst_200:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x4980479a0ba98 and fs2 == 0 and fe2 == 0x401 and fm2 == 0x5e09c1bccd745 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xc289f0c3d8fd5 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc4980479a0ba98; op2val:0x4015e09c1bccd745;
op3val:0x3fec289f0c3d8fd5; valaddr_reg:x3; val_offset:600*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 600*FLEN/8, x4, x1, x2)

inst_201:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x4980479a0ba98 and fs2 == 0 and fe2 == 0x401 and fm2 == 0x5e09c1bccd745 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xc289f0c3d8fd5 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc4980479a0ba98; op2val:0x4015e09c1bccd745;
op3val:0x3fec289f0c3d8fd5; valaddr_reg:x3; val_offset:603*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 603*FLEN/8, x4, x1, x2)

inst_202:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x4980479a0ba98 and fs2 == 0 and fe2 == 0x401 and fm2 == 0x5e09c1bccd745 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xc289f0c3d8fd5 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc4980479a0ba98; op2val:0x4015e09c1bccd745;
op3val:0x3fec289f0c3d8fd5; valaddr_reg:x3; val_offset:606*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 606*FLEN/8, x4, x1, x2)

inst_203:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x4980479a0ba98 and fs2 == 0 and fe2 == 0x401 and fm2 == 0x5e09c1bccd745 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xc289f0c3d8fd5 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc4980479a0ba98; op2val:0x4015e09c1bccd745;
op3val:0x3fec289f0c3d8fd5; valaddr_reg:x3; val_offset:609*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 609*FLEN/8, x4, x1, x2)

inst_204:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x4980479a0ba98 and fs2 == 0 and fe2 == 0x401 and fm2 == 0x5e09c1bccd745 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xc289f0c3d8fd5 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc4980479a0ba98; op2val:0x4015e09c1bccd745;
op3val:0x3fec289f0c3d8fd5; valaddr_reg:x3; val_offset:612*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 612*FLEN/8, x4, x1, x2)

inst_205:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x5e81124ed55e4 and fs2 == 0 and fe2 == 0x401 and fm2 == 0x3995136ffda78 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xad57eb1ef4601 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc5e81124ed55e4; op2val:0x4013995136ffda78;
op3val:0x3fead57eb1ef4601; valaddr_reg:x3; val_offset:615*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 615*FLEN/8, x4, x1, x2)

inst_206:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x5e81124ed55e4 and fs2 == 0 and fe2 == 0x401 and fm2 == 0x3995136ffda78 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xad57eb1ef4601 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc5e81124ed55e4; op2val:0x4013995136ffda78;
op3val:0x3fead57eb1ef4601; valaddr_reg:x3; val_offset:618*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 618*FLEN/8, x4, x1, x2)

inst_207:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x5e81124ed55e4 and fs2 == 0 and fe2 == 0x401 and fm2 == 0x3995136ffda78 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xad57eb1ef4601 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc5e81124ed55e4; op2val:0x4013995136ffda78;
op3val:0x3fead57eb1ef4601; valaddr_reg:x3; val_offset:621*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 621*FLEN/8, x4, x1, x2)

inst_208:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x5e81124ed55e4 and fs2 == 0 and fe2 == 0x401 and fm2 == 0x3995136ffda78 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xad57eb1ef4601 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc5e81124ed55e4; op2val:0x4013995136ffda78;
op3val:0x3fead57eb1ef4601; valaddr_reg:x3; val_offset:624*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 624*FLEN/8, x4, x1, x2)

inst_209:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x5e81124ed55e4 and fs2 == 0 and fe2 == 0x401 and fm2 == 0x3995136ffda78 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xad57eb1ef4601 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc5e81124ed55e4; op2val:0x4013995136ffda78;
op3val:0x3fead57eb1ef4601; valaddr_reg:x3; val_offset:627*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 627*FLEN/8, x4, x1, x2)

inst_210:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x6408b72047a40 and fs2 == 0 and fe2 == 0x401 and fm2 == 0x2273529a4b59c and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x93f2423e3559d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc6408b72047a40; op2val:0x4012273529a4b59c;
op3val:0x3fe93f2423e3559d; valaddr_reg:x3; val_offset:630*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 630*FLEN/8, x4, x1, x2)

inst_211:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x6408b72047a40 and fs2 == 0 and fe2 == 0x401 and fm2 == 0x2273529a4b59c and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x93f2423e3559d and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc6408b72047a40; op2val:0x4012273529a4b59c;
op3val:0x3fe93f2423e3559d; valaddr_reg:x3; val_offset:633*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 633*FLEN/8, x4, x1, x2)

inst_212:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x6408b72047a40 and fs2 == 0 and fe2 == 0x401 and fm2 == 0x2273529a4b59c and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x93f2423e3559d and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc6408b72047a40; op2val:0x4012273529a4b59c;
op3val:0x3fe93f2423e3559d; valaddr_reg:x3; val_offset:636*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 636*FLEN/8, x4, x1, x2)

inst_213:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x6408b72047a40 and fs2 == 0 and fe2 == 0x401 and fm2 == 0x2273529a4b59c and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x93f2423e3559d and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc6408b72047a40; op2val:0x4012273529a4b59c;
op3val:0x3fe93f2423e3559d; valaddr_reg:x3; val_offset:639*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 639*FLEN/8, x4, x1, x2)

inst_214:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x6408b72047a40 and fs2 == 0 and fe2 == 0x401 and fm2 == 0x2273529a4b59c and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x93f2423e3559d and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc6408b72047a40; op2val:0x4012273529a4b59c;
op3val:0x3fe93f2423e3559d; valaddr_reg:x3; val_offset:642*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 642*FLEN/8, x4, x1, x2)

inst_215:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x6cb2b28dea7cc and fs2 == 0 and fe2 == 0x401 and fm2 == 0x011d8d2536d5e and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x6e497e9222c53 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc6cb2b28dea7cc; op2val:0x401011d8d2536d5e;
op3val:0x3fe6e497e9222c53; valaddr_reg:x3; val_offset:645*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 645*FLEN/8, x4, x1, x2)

inst_216:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x6cb2b28dea7cc and fs2 == 0 and fe2 == 0x401 and fm2 == 0x011d8d2536d5e and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x6e497e9222c53 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc6cb2b28dea7cc; op2val:0x401011d8d2536d5e;
op3val:0x3fe6e497e9222c53; valaddr_reg:x3; val_offset:648*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 648*FLEN/8, x4, x1, x2)

inst_217:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x6cb2b28dea7cc and fs2 == 0 and fe2 == 0x401 and fm2 == 0x011d8d2536d5e and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x6e497e9222c53 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc6cb2b28dea7cc; op2val:0x401011d8d2536d5e;
op3val:0x3fe6e497e9222c53; valaddr_reg:x3; val_offset:651*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 651*FLEN/8, x4, x1, x2)

inst_218:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x6cb2b28dea7cc and fs2 == 0 and fe2 == 0x401 and fm2 == 0x011d8d2536d5e and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x6e497e9222c53 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc6cb2b28dea7cc; op2val:0x401011d8d2536d5e;
op3val:0x3fe6e497e9222c53; valaddr_reg:x3; val_offset:654*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 654*FLEN/8, x4, x1, x2)

inst_219:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x6cb2b28dea7cc and fs2 == 0 and fe2 == 0x401 and fm2 == 0x011d8d2536d5e and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x6e497e9222c53 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc6cb2b28dea7cc; op2val:0x401011d8d2536d5e;
op3val:0x3fe6e497e9222c53; valaddr_reg:x3; val_offset:657*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 657*FLEN/8, x4, x1, x2)

inst_220:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x7032105e4afe4 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x5dc24f5615f0e and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xf70bb85c371ea and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc7032105e4afe4; op2val:0x4005dc24f5615f0e;
op3val:0x3fdf70bb85c371ea; valaddr_reg:x3; val_offset:660*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 660*FLEN/8, x4, x1, x2)

inst_221:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x7032105e4afe4 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x5dc24f5615f0e and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xf70bb85c371ea and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc7032105e4afe4; op2val:0x4005dc24f5615f0e;
op3val:0x3fdf70bb85c371ea; valaddr_reg:x3; val_offset:663*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 663*FLEN/8, x4, x1, x2)

inst_222:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x7032105e4afe4 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x5dc24f5615f0e and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xf70bb85c371ea and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc7032105e4afe4; op2val:0x4005dc24f5615f0e;
op3val:0x3fdf70bb85c371ea; valaddr_reg:x3; val_offset:666*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 666*FLEN/8, x4, x1, x2)

inst_223:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x7032105e4afe4 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x5dc24f5615f0e and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xf70bb85c371ea and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc7032105e4afe4; op2val:0x4005dc24f5615f0e;
op3val:0x3fdf70bb85c371ea; valaddr_reg:x3; val_offset:669*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 669*FLEN/8, x4, x1, x2)

inst_224:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x7032105e4afe4 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x5dc24f5615f0e and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xf70bb85c371ea and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc7032105e4afe4; op2val:0x4005dc24f5615f0e;
op3val:0x3fdf70bb85c371ea; valaddr_reg:x3; val_offset:672*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 672*FLEN/8, x4, x1, x2)

inst_225:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x70d97a7e4e400 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x6aa6aec48c3a7 and fs3 == 0 and fe3 == 0x3fa and fm3 == 0x0541d805852e0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc70d97a7e4e400; op2val:0x3fc6aa6aec48c3a7;
op3val:0x3fa0541d805852e0; valaddr_reg:x3; val_offset:675*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 675*FLEN/8, x4, x1, x2)

inst_226:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x70d97a7e4e400 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x6aa6aec48c3a7 and fs3 == 0 and fe3 == 0x3fa and fm3 == 0x0541d805852e0 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc70d97a7e4e400; op2val:0x3fc6aa6aec48c3a7;
op3val:0x3fa0541d805852e0; valaddr_reg:x3; val_offset:678*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 678*FLEN/8, x4, x1, x2)

inst_227:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x70d97a7e4e400 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x6aa6aec48c3a7 and fs3 == 0 and fe3 == 0x3fa and fm3 == 0x0541d805852e0 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc70d97a7e4e400; op2val:0x3fc6aa6aec48c3a7;
op3val:0x3fa0541d805852e0; valaddr_reg:x3; val_offset:681*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 681*FLEN/8, x4, x1, x2)

inst_228:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x70d97a7e4e400 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x6aa6aec48c3a7 and fs3 == 0 and fe3 == 0x3fa and fm3 == 0x0541d805852e0 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc70d97a7e4e400; op2val:0x3fc6aa6aec48c3a7;
op3val:0x3fa0541d805852e0; valaddr_reg:x3; val_offset:684*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 684*FLEN/8, x4, x1, x2)

inst_229:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x70d97a7e4e400 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x6aa6aec48c3a7 and fs3 == 0 and fe3 == 0x3fa and fm3 == 0x0541d805852e0 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc70d97a7e4e400; op2val:0x3fc6aa6aec48c3a7;
op3val:0x3fa0541d805852e0; valaddr_reg:x3; val_offset:687*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 687*FLEN/8, x4, x1, x2)

inst_230:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x721d6991c9558 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x8158cd7192153 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x168f4f7324cfc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc721d6991c9558; op2val:0x3fe8158cd7192153;
op3val:0x3fc168f4f7324cfc; valaddr_reg:x3; val_offset:690*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 690*FLEN/8, x4, x1, x2)

inst_231:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x721d6991c9558 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x8158cd7192153 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x168f4f7324cfc and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc721d6991c9558; op2val:0x3fe8158cd7192153;
op3val:0x3fc168f4f7324cfc; valaddr_reg:x3; val_offset:693*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 693*FLEN/8, x4, x1, x2)

inst_232:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x721d6991c9558 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x8158cd7192153 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x168f4f7324cfc and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc721d6991c9558; op2val:0x3fe8158cd7192153;
op3val:0x3fc168f4f7324cfc; valaddr_reg:x3; val_offset:696*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 696*FLEN/8, x4, x1, x2)

inst_233:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x721d6991c9558 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x8158cd7192153 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x168f4f7324cfc and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc721d6991c9558; op2val:0x3fe8158cd7192153;
op3val:0x3fc168f4f7324cfc; valaddr_reg:x3; val_offset:699*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 699*FLEN/8, x4, x1, x2)

inst_234:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x721d6991c9558 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x8158cd7192153 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x168f4f7324cfc and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc721d6991c9558; op2val:0x3fe8158cd7192153;
op3val:0x3fc168f4f7324cfc; valaddr_reg:x3; val_offset:702*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 702*FLEN/8, x4, x1, x2)

inst_235:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x72bb260dd2d78 and fs2 == 0 and fe2 == 0x401 and fm2 == 0x061e6d769535c and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x7b97996604f37 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc72bb260dd2d78; op2val:0x401061e6d769535c;
op3val:0x3fe7b97996604f37; valaddr_reg:x3; val_offset:705*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 705*FLEN/8, x4, x1, x2)

inst_236:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x72bb260dd2d78 and fs2 == 0 and fe2 == 0x401 and fm2 == 0x061e6d769535c and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x7b97996604f37 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc72bb260dd2d78; op2val:0x401061e6d769535c;
op3val:0x3fe7b97996604f37; valaddr_reg:x3; val_offset:708*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 708*FLEN/8, x4, x1, x2)

inst_237:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x72bb260dd2d78 and fs2 == 0 and fe2 == 0x401 and fm2 == 0x061e6d769535c and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x7b97996604f37 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc72bb260dd2d78; op2val:0x401061e6d769535c;
op3val:0x3fe7b97996604f37; valaddr_reg:x3; val_offset:711*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 711*FLEN/8, x4, x1, x2)

inst_238:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x72bb260dd2d78 and fs2 == 0 and fe2 == 0x401 and fm2 == 0x061e6d769535c and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x7b97996604f37 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc72bb260dd2d78; op2val:0x401061e6d769535c;
op3val:0x3fe7b97996604f37; valaddr_reg:x3; val_offset:714*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 714*FLEN/8, x4, x1, x2)

inst_239:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x72bb260dd2d78 and fs2 == 0 and fe2 == 0x401 and fm2 == 0x061e6d769535c and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x7b97996604f37 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc72bb260dd2d78; op2val:0x401061e6d769535c;
op3val:0x3fe7b97996604f37; valaddr_reg:x3; val_offset:717*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 717*FLEN/8, x4, x1, x2)

inst_240:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x72d9ff5992a78 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x91607b2dac02c and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x22b99e95fbbfe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc72d9ff5992a78; op2val:0x40091607b2dac02c;
op3val:0x3fe22b99e95fbbfe; valaddr_reg:x3; val_offset:720*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 720*FLEN/8, x4, x1, x2)

inst_241:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x72d9ff5992a78 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x91607b2dac02c and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x22b99e95fbbfe and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc72d9ff5992a78; op2val:0x40091607b2dac02c;
op3val:0x3fe22b99e95fbbfe; valaddr_reg:x3; val_offset:723*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 723*FLEN/8, x4, x1, x2)

inst_242:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x72d9ff5992a78 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x91607b2dac02c and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x22b99e95fbbfe and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc72d9ff5992a78; op2val:0x40091607b2dac02c;
op3val:0x3fe22b99e95fbbfe; valaddr_reg:x3; val_offset:726*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 726*FLEN/8, x4, x1, x2)

inst_243:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x72d9ff5992a78 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x91607b2dac02c and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x22b99e95fbbfe and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc72d9ff5992a78; op2val:0x40091607b2dac02c;
op3val:0x3fe22b99e95fbbfe; valaddr_reg:x3; val_offset:729*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 729*FLEN/8, x4, x1, x2)

inst_244:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x72d9ff5992a78 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x91607b2dac02c and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x22b99e95fbbfe and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc72d9ff5992a78; op2val:0x40091607b2dac02c;
op3val:0x3fe22b99e95fbbfe; valaddr_reg:x3; val_offset:732*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 732*FLEN/8, x4, x1, x2)

inst_245:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x740ddb996cc00 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x6e903f9b8c5fd and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x0a5eba192c9ca and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc740ddb996cc00; op2val:0x3ff6e903f9b8c5fd;
op3val:0x3fd0a5eba192c9ca; valaddr_reg:x3; val_offset:735*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 735*FLEN/8, x4, x1, x2)

inst_246:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x740ddb996cc00 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x6e903f9b8c5fd and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x0a5eba192c9ca and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc740ddb996cc00; op2val:0x3ff6e903f9b8c5fd;
op3val:0x3fd0a5eba192c9ca; valaddr_reg:x3; val_offset:738*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 738*FLEN/8, x4, x1, x2)

inst_247:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x740ddb996cc00 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x6e903f9b8c5fd and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x0a5eba192c9ca and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc740ddb996cc00; op2val:0x3ff6e903f9b8c5fd;
op3val:0x3fd0a5eba192c9ca; valaddr_reg:x3; val_offset:741*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 741*FLEN/8, x4, x1, x2)

inst_248:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x740ddb996cc00 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x6e903f9b8c5fd and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x0a5eba192c9ca and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc740ddb996cc00; op2val:0x3ff6e903f9b8c5fd;
op3val:0x3fd0a5eba192c9ca; valaddr_reg:x3; val_offset:744*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 744*FLEN/8, x4, x1, x2)

inst_249:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x740ddb996cc00 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x6e903f9b8c5fd and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x0a5eba192c9ca and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc740ddb996cc00; op2val:0x3ff6e903f9b8c5fd;
op3val:0x3fd0a5eba192c9ca; valaddr_reg:x3; val_offset:747*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 747*FLEN/8, x4, x1, x2)

inst_250:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x820664362b778 and fs2 == 0 and fe2 == 0x3fb and fm2 == 0x47916ceb992b2 and fs3 == 0 and fe3 == 0x3f8 and fm3 == 0xedf173dde9500 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc820664362b778; op2val:0x3fb47916ceb992b2;
op3val:0x3f8edf173dde9500; valaddr_reg:x3; val_offset:750*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 750*FLEN/8, x4, x1, x2)

inst_251:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x820664362b778 and fs2 == 0 and fe2 == 0x3fb and fm2 == 0x47916ceb992b2 and fs3 == 0 and fe3 == 0x3f8 and fm3 == 0xedf173dde9500 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc820664362b778; op2val:0x3fb47916ceb992b2;
op3val:0x3f8edf173dde9500; valaddr_reg:x3; val_offset:753*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 753*FLEN/8, x4, x1, x2)

inst_252:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x820664362b778 and fs2 == 0 and fe2 == 0x3fb and fm2 == 0x47916ceb992b2 and fs3 == 0 and fe3 == 0x3f8 and fm3 == 0xedf173dde9500 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc820664362b778; op2val:0x3fb47916ceb992b2;
op3val:0x3f8edf173dde9500; valaddr_reg:x3; val_offset:756*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 756*FLEN/8, x4, x1, x2)

inst_253:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x820664362b778 and fs2 == 0 and fe2 == 0x3fb and fm2 == 0x47916ceb992b2 and fs3 == 0 and fe3 == 0x3f8 and fm3 == 0xedf173dde9500 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc820664362b778; op2val:0x3fb47916ceb992b2;
op3val:0x3f8edf173dde9500; valaddr_reg:x3; val_offset:759*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 759*FLEN/8, x4, x1, x2)

inst_254:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x820664362b778 and fs2 == 0 and fe2 == 0x3fb and fm2 == 0x47916ceb992b2 and fs3 == 0 and fe3 == 0x3f8 and fm3 == 0xedf173dde9500 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc820664362b778; op2val:0x3fb47916ceb992b2;
op3val:0x3f8edf173dde9500; valaddr_reg:x3; val_offset:762*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 762*FLEN/8, x4, x1, x2)

inst_255:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x90052ffbe2328 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xc708f724b1d08 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x63839d5043638 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc90052ffbe2328; op2val:0x3fec708f724b1d08;
op3val:0x3fc63839d5043638; valaddr_reg:x3; val_offset:765*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 765*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_3)

inst_256:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x90052ffbe2328 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xc708f724b1d08 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x63839d5043638 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc90052ffbe2328; op2val:0x3fec708f724b1d08;
op3val:0x3fc63839d5043638; valaddr_reg:x3; val_offset:768*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 768*FLEN/8, x4, x1, x2)

inst_257:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x90052ffbe2328 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xc708f724b1d08 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x63839d5043638 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc90052ffbe2328; op2val:0x3fec708f724b1d08;
op3val:0x3fc63839d5043638; valaddr_reg:x3; val_offset:771*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 771*FLEN/8, x4, x1, x2)

inst_258:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x90052ffbe2328 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xc708f724b1d08 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x63839d5043638 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc90052ffbe2328; op2val:0x3fec708f724b1d08;
op3val:0x3fc63839d5043638; valaddr_reg:x3; val_offset:774*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 774*FLEN/8, x4, x1, x2)

inst_259:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x90052ffbe2328 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xc708f724b1d08 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x63839d5043638 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc90052ffbe2328; op2val:0x3fec708f724b1d08;
op3val:0x3fc63839d5043638; valaddr_reg:x3; val_offset:777*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 777*FLEN/8, x4, x1, x2)

inst_260:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x9e50beee0d2bc and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x3e8d95ca4e824 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x01c6b908a3b02 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc9e50beee0d2bc; op2val:0x3ff3e8d95ca4e824;
op3val:0x3fd01c6b908a3b02; valaddr_reg:x3; val_offset:780*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 780*FLEN/8, x4, x1, x2)

inst_261:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x9e50beee0d2bc and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x3e8d95ca4e824 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x01c6b908a3b02 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc9e50beee0d2bc; op2val:0x3ff3e8d95ca4e824;
op3val:0x3fd01c6b908a3b02; valaddr_reg:x3; val_offset:783*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 783*FLEN/8, x4, x1, x2)

inst_262:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x9e50beee0d2bc and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x3e8d95ca4e824 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x01c6b908a3b02 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc9e50beee0d2bc; op2val:0x3ff3e8d95ca4e824;
op3val:0x3fd01c6b908a3b02; valaddr_reg:x3; val_offset:786*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 786*FLEN/8, x4, x1, x2)

inst_263:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x9e50beee0d2bc and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x3e8d95ca4e824 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x01c6b908a3b02 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc9e50beee0d2bc; op2val:0x3ff3e8d95ca4e824;
op3val:0x3fd01c6b908a3b02; valaddr_reg:x3; val_offset:789*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 789*FLEN/8, x4, x1, x2)

inst_264:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x9e50beee0d2bc and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x3e8d95ca4e824 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x01c6b908a3b02 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc9e50beee0d2bc; op2val:0x3ff3e8d95ca4e824;
op3val:0x3fd01c6b908a3b02; valaddr_reg:x3; val_offset:792*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 792*FLEN/8, x4, x1, x2)

inst_265:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xa51c5ed1face8 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x76c169f67e93c and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x343acd9c2e8b0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fca51c5ed1face8; op2val:0x3ff76c169f67e93c;
op3val:0x3fd343acd9c2e8b0; valaddr_reg:x3; val_offset:795*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 795*FLEN/8, x4, x1, x2)

inst_266:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xa51c5ed1face8 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x76c169f67e93c and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x343acd9c2e8b0 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fca51c5ed1face8; op2val:0x3ff76c169f67e93c;
op3val:0x3fd343acd9c2e8b0; valaddr_reg:x3; val_offset:798*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 798*FLEN/8, x4, x1, x2)

inst_267:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xa51c5ed1face8 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x76c169f67e93c and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x343acd9c2e8b0 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fca51c5ed1face8; op2val:0x3ff76c169f67e93c;
op3val:0x3fd343acd9c2e8b0; valaddr_reg:x3; val_offset:801*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 801*FLEN/8, x4, x1, x2)

inst_268:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xa51c5ed1face8 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x76c169f67e93c and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x343acd9c2e8b0 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fca51c5ed1face8; op2val:0x3ff76c169f67e93c;
op3val:0x3fd343acd9c2e8b0; valaddr_reg:x3; val_offset:804*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 804*FLEN/8, x4, x1, x2)

inst_269:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xa51c5ed1face8 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x76c169f67e93c and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x343acd9c2e8b0 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fca51c5ed1face8; op2val:0x3ff76c169f67e93c;
op3val:0x3fd343acd9c2e8b0; valaddr_reg:x3; val_offset:807*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 807*FLEN/8, x4, x1, x2)

inst_270:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xb16eb5c57d7ec and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x11e5932279f62 and fs3 == 0 and fe3 == 0x3f9 and fm3 == 0xcfbbc0fd26100 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fcb16eb5c57d7ec; op2val:0x3fc11e5932279f62;
op3val:0x3f9cfbbc0fd26100; valaddr_reg:x3; val_offset:810*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 810*FLEN/8, x4, x1, x2)

inst_271:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xb16eb5c57d7ec and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x11e5932279f62 and fs3 == 0 and fe3 == 0x3f9 and fm3 == 0xcfbbc0fd26100 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fcb16eb5c57d7ec; op2val:0x3fc11e5932279f62;
op3val:0x3f9cfbbc0fd26100; valaddr_reg:x3; val_offset:813*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 813*FLEN/8, x4, x1, x2)

inst_272:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xb16eb5c57d7ec and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x11e5932279f62 and fs3 == 0 and fe3 == 0x3f9 and fm3 == 0xcfbbc0fd26100 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fcb16eb5c57d7ec; op2val:0x3fc11e5932279f62;
op3val:0x3f9cfbbc0fd26100; valaddr_reg:x3; val_offset:816*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 816*FLEN/8, x4, x1, x2)

inst_273:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xb16eb5c57d7ec and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x11e5932279f62 and fs3 == 0 and fe3 == 0x3f9 and fm3 == 0xcfbbc0fd26100 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fcb16eb5c57d7ec; op2val:0x3fc11e5932279f62;
op3val:0x3f9cfbbc0fd26100; valaddr_reg:x3; val_offset:819*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 819*FLEN/8, x4, x1, x2)

inst_274:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xb16eb5c57d7ec and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x11e5932279f62 and fs3 == 0 and fe3 == 0x3f9 and fm3 == 0xcfbbc0fd26100 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fcb16eb5c57d7ec; op2val:0x3fc11e5932279f62;
op3val:0x3f9cfbbc0fd26100; valaddr_reg:x3; val_offset:822*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 822*FLEN/8, x4, x1, x2)

inst_275:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xba7fc0e0adadc and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xe806c3ac92c4c and fs3 == 0 and fe3 == 0x3fb and fm3 == 0xa5c79c7235e48 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fcba7fc0e0adadc; op2val:0x3fde806c3ac92c4c;
op3val:0x3fba5c79c7235e48; valaddr_reg:x3; val_offset:825*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 825*FLEN/8, x4, x1, x2)

inst_276:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xba7fc0e0adadc and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xe806c3ac92c4c and fs3 == 0 and fe3 == 0x3fb and fm3 == 0xa5c79c7235e48 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fcba7fc0e0adadc; op2val:0x3fde806c3ac92c4c;
op3val:0x3fba5c79c7235e48; valaddr_reg:x3; val_offset:828*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 828*FLEN/8, x4, x1, x2)

inst_277:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xba7fc0e0adadc and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xe806c3ac92c4c and fs3 == 0 and fe3 == 0x3fb and fm3 == 0xa5c79c7235e48 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fcba7fc0e0adadc; op2val:0x3fde806c3ac92c4c;
op3val:0x3fba5c79c7235e48; valaddr_reg:x3; val_offset:831*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 831*FLEN/8, x4, x1, x2)

inst_278:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xba7fc0e0adadc and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xe806c3ac92c4c and fs3 == 0 and fe3 == 0x3fb and fm3 == 0xa5c79c7235e48 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fcba7fc0e0adadc; op2val:0x3fde806c3ac92c4c;
op3val:0x3fba5c79c7235e48; valaddr_reg:x3; val_offset:834*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 834*FLEN/8, x4, x1, x2)

inst_279:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xba7fc0e0adadc and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xe806c3ac92c4c and fs3 == 0 and fe3 == 0x3fb and fm3 == 0xa5c79c7235e48 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fcba7fc0e0adadc; op2val:0x3fde806c3ac92c4c;
op3val:0x3fba5c79c7235e48; valaddr_reg:x3; val_offset:837*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 837*FLEN/8, x4, x1, x2)

inst_280:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xd268c5e6fa2a8 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x14b01d4c63626 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xf819d2c61f198 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fcd268c5e6fa2a8; op2val:0x40014b01d4c63626;
op3val:0x3fdf819d2c61f198; valaddr_reg:x3; val_offset:840*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 840*FLEN/8, x4, x1, x2)

inst_281:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xd268c5e6fa2a8 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x14b01d4c63626 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xf819d2c61f198 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fcd268c5e6fa2a8; op2val:0x40014b01d4c63626;
op3val:0x3fdf819d2c61f198; valaddr_reg:x3; val_offset:843*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 843*FLEN/8, x4, x1, x2)

inst_282:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xd268c5e6fa2a8 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x14b01d4c63626 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xf819d2c61f198 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fcd268c5e6fa2a8; op2val:0x40014b01d4c63626;
op3val:0x3fdf819d2c61f198; valaddr_reg:x3; val_offset:846*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 846*FLEN/8, x4, x1, x2)

inst_283:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xd268c5e6fa2a8 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x14b01d4c63626 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xf819d2c61f198 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fcd268c5e6fa2a8; op2val:0x40014b01d4c63626;
op3val:0x3fdf819d2c61f198; valaddr_reg:x3; val_offset:849*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 849*FLEN/8, x4, x1, x2)

inst_284:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xd268c5e6fa2a8 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x14b01d4c63626 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xf819d2c61f198 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fcd268c5e6fa2a8; op2val:0x40014b01d4c63626;
op3val:0x3fdf819d2c61f198; valaddr_reg:x3; val_offset:852*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 852*FLEN/8, x4, x1, x2)

inst_285:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xdd3ec6f4085b8 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xa4c80bc161a77 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x8837f6af00a50 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fcdd3ec6f4085b8; op2val:0x3ffa4c80bc161a77;
op3val:0x3fd8837f6af00a50; valaddr_reg:x3; val_offset:855*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 855*FLEN/8, x4, x1, x2)

inst_286:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xdd3ec6f4085b8 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xa4c80bc161a77 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x8837f6af00a50 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fcdd3ec6f4085b8; op2val:0x3ffa4c80bc161a77;
op3val:0x3fd8837f6af00a50; valaddr_reg:x3; val_offset:858*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 858*FLEN/8, x4, x1, x2)

inst_287:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xdd3ec6f4085b8 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xa4c80bc161a77 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x8837f6af00a50 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fcdd3ec6f4085b8; op2val:0x3ffa4c80bc161a77;
op3val:0x3fd8837f6af00a50; valaddr_reg:x3; val_offset:861*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 861*FLEN/8, x4, x1, x2)

inst_288:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xdd3ec6f4085b8 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xa4c80bc161a77 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x8837f6af00a50 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fcdd3ec6f4085b8; op2val:0x3ffa4c80bc161a77;
op3val:0x3fd8837f6af00a50; valaddr_reg:x3; val_offset:864*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 864*FLEN/8, x4, x1, x2)

inst_289:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xdd3ec6f4085b8 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xa4c80bc161a77 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x8837f6af00a50 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fcdd3ec6f4085b8; op2val:0x3ffa4c80bc161a77;
op3val:0x3fd8837f6af00a50; valaddr_reg:x3; val_offset:867*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 867*FLEN/8, x4, x1, x2)

inst_290:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xe228ab7121f2c and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xd048077389d7c and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xb538b01afef66 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fce228ab7121f2c; op2val:0x3ffd048077389d7c;
op3val:0x3fdb538b01afef66; valaddr_reg:x3; val_offset:870*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 870*FLEN/8, x4, x1, x2)

inst_291:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xe228ab7121f2c and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xd048077389d7c and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xb538b01afef66 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fce228ab7121f2c; op2val:0x3ffd048077389d7c;
op3val:0x3fdb538b01afef66; valaddr_reg:x3; val_offset:873*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 873*FLEN/8, x4, x1, x2)

inst_292:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xe228ab7121f2c and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xd048077389d7c and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xb538b01afef66 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fce228ab7121f2c; op2val:0x3ffd048077389d7c;
op3val:0x3fdb538b01afef66; valaddr_reg:x3; val_offset:876*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 876*FLEN/8, x4, x1, x2)

inst_293:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xe228ab7121f2c and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xd048077389d7c and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xb538b01afef66 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fce228ab7121f2c; op2val:0x3ffd048077389d7c;
op3val:0x3fdb538b01afef66; valaddr_reg:x3; val_offset:879*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 879*FLEN/8, x4, x1, x2)

inst_294:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xe228ab7121f2c and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xd048077389d7c and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xb538b01afef66 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fce228ab7121f2c; op2val:0x3ffd048077389d7c;
op3val:0x3fdb538b01afef66; valaddr_reg:x3; val_offset:882*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 882*FLEN/8, x4, x1, x2)

inst_295:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xec8c2dcb4c00c and fs2 == 0 and fe2 == 0x400 and fm2 == 0x79e5c3ea50872 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x6b8a40e379ddd and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fcec8c2dcb4c00c; op2val:0x40079e5c3ea50872;
op3val:0x3fe6b8a40e379ddd; valaddr_reg:x3; val_offset:885*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 885*FLEN/8, x4, x1, x2)

inst_296:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xec8c2dcb4c00c and fs2 == 0 and fe2 == 0x400 and fm2 == 0x79e5c3ea50872 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x6b8a40e379ddd and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fcec8c2dcb4c00c; op2val:0x40079e5c3ea50872;
op3val:0x3fe6b8a40e379ddd; valaddr_reg:x3; val_offset:888*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 888*FLEN/8, x4, x1, x2)

inst_297:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xec8c2dcb4c00c and fs2 == 0 and fe2 == 0x400 and fm2 == 0x79e5c3ea50872 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x6b8a40e379ddd and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fcec8c2dcb4c00c; op2val:0x40079e5c3ea50872;
op3val:0x3fe6b8a40e379ddd; valaddr_reg:x3; val_offset:891*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 891*FLEN/8, x4, x1, x2)

inst_298:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xec8c2dcb4c00c and fs2 == 0 and fe2 == 0x400 and fm2 == 0x79e5c3ea50872 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x6b8a40e379ddd and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fcec8c2dcb4c00c; op2val:0x40079e5c3ea50872;
op3val:0x3fe6b8a40e379ddd; valaddr_reg:x3; val_offset:894*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 894*FLEN/8, x4, x1, x2)

inst_299:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xec8c2dcb4c00c and fs2 == 0 and fe2 == 0x400 and fm2 == 0x79e5c3ea50872 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x6b8a40e379ddd and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fcec8c2dcb4c00c; op2val:0x40079e5c3ea50872;
op3val:0x3fe6b8a40e379ddd; valaddr_reg:x3; val_offset:897*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 897*FLEN/8, x4, x1, x2)

inst_300:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xfa8931dc8682c and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x6ff7eeafae67b and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x6c0aa090b4eae and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fcfa8931dc8682c; op2val:0x3ff6ff7eeafae67b;
op3val:0x3fd6c0aa090b4eae; valaddr_reg:x3; val_offset:900*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 900*FLEN/8, x4, x1, x2)

inst_301:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xfa8931dc8682c and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x6ff7eeafae67b and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x6c0aa090b4eae and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fcfa8931dc8682c; op2val:0x3ff6ff7eeafae67b;
op3val:0x3fd6c0aa090b4eae; valaddr_reg:x3; val_offset:903*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 903*FLEN/8, x4, x1, x2)

inst_302:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xfa8931dc8682c and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x6ff7eeafae67b and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x6c0aa090b4eae and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fcfa8931dc8682c; op2val:0x3ff6ff7eeafae67b;
op3val:0x3fd6c0aa090b4eae; valaddr_reg:x3; val_offset:906*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 906*FLEN/8, x4, x1, x2)

inst_303:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xfa8931dc8682c and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x6ff7eeafae67b and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x6c0aa090b4eae and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fcfa8931dc8682c; op2val:0x3ff6ff7eeafae67b;
op3val:0x3fd6c0aa090b4eae; valaddr_reg:x3; val_offset:909*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 909*FLEN/8, x4, x1, x2)

inst_304:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xfa8931dc8682c and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x6ff7eeafae67b and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x6c0aa090b4eae and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fcfa8931dc8682c; op2val:0x3ff6ff7eeafae67b;
op3val:0x3fd6c0aa090b4eae; valaddr_reg:x3; val_offset:912*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 912*FLEN/8, x4, x1, x2)

inst_305:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xfee48dd841658 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x5f6f6d7fd60c8 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x5eacdf0db8b10 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fcfee48dd841658; op2val:0x3ff5f6f6d7fd60c8;
op3val:0x3fd5eacdf0db8b10; valaddr_reg:x3; val_offset:915*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 915*FLEN/8, x4, x1, x2)

inst_306:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xfee48dd841658 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x5f6f6d7fd60c8 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x5eacdf0db8b10 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fcfee48dd841658; op2val:0x3ff5f6f6d7fd60c8;
op3val:0x3fd5eacdf0db8b10; valaddr_reg:x3; val_offset:918*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 918*FLEN/8, x4, x1, x2)

inst_307:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xfee48dd841658 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x5f6f6d7fd60c8 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x5eacdf0db8b10 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fcfee48dd841658; op2val:0x3ff5f6f6d7fd60c8;
op3val:0x3fd5eacdf0db8b10; valaddr_reg:x3; val_offset:921*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 921*FLEN/8, x4, x1, x2)

inst_308:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xfee48dd841658 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x5f6f6d7fd60c8 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x5eacdf0db8b10 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fcfee48dd841658; op2val:0x3ff5f6f6d7fd60c8;
op3val:0x3fd5eacdf0db8b10; valaddr_reg:x3; val_offset:924*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 924*FLEN/8, x4, x1, x2)

inst_309:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xfee48dd841658 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x5f6f6d7fd60c8 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x5eacdf0db8b10 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fcfee48dd841658; op2val:0x3ff5f6f6d7fd60c8;
op3val:0x3fd5eacdf0db8b10; valaddr_reg:x3; val_offset:927*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 927*FLEN/8, x4, x1, x2)

inst_310:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xffb65bccf9678 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x0b65c08a4bea4 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x0b3f4ac71a71a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fcffb65bccf9678; op2val:0x4000b65c08a4bea4;
op3val:0x3fe0b3f4ac71a71a; valaddr_reg:x3; val_offset:930*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 930*FLEN/8, x4, x1, x2)

inst_311:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xffb65bccf9678 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x0b65c08a4bea4 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x0b3f4ac71a71a and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fcffb65bccf9678; op2val:0x4000b65c08a4bea4;
op3val:0x3fe0b3f4ac71a71a; valaddr_reg:x3; val_offset:933*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 933*FLEN/8, x4, x1, x2)

inst_312:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xffb65bccf9678 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x0b65c08a4bea4 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x0b3f4ac71a71a and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fcffb65bccf9678; op2val:0x4000b65c08a4bea4;
op3val:0x3fe0b3f4ac71a71a; valaddr_reg:x3; val_offset:936*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 936*FLEN/8, x4, x1, x2)

inst_313:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xffb65bccf9678 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x0b65c08a4bea4 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x0b3f4ac71a71a and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fcffb65bccf9678; op2val:0x4000b65c08a4bea4;
op3val:0x3fe0b3f4ac71a71a; valaddr_reg:x3; val_offset:939*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 939*FLEN/8, x4, x1, x2)

inst_314:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xffb65bccf9678 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x0b65c08a4bea4 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x0b3f4ac71a71a and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fcffb65bccf9678; op2val:0x4000b65c08a4bea4;
op3val:0x3fe0b3f4ac71a71a; valaddr_reg:x3; val_offset:942*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 942*FLEN/8, x4, x1, x2)

inst_315:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x06f20e274f7c2 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x5abb347a4aaac and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x64236fd83f10f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd06f20e274f7c2; op2val:0x4005abb347a4aaac;
op3val:0x3fe64236fd83f10f; valaddr_reg:x3; val_offset:945*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 945*FLEN/8, x4, x1, x2)

inst_316:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x06f20e274f7c2 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x5abb347a4aaac and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x64236fd83f10f and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd06f20e274f7c2; op2val:0x4005abb347a4aaac;
op3val:0x3fe64236fd83f10f; valaddr_reg:x3; val_offset:948*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 948*FLEN/8, x4, x1, x2)

inst_317:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x06f20e274f7c2 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x5abb347a4aaac and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x64236fd83f10f and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd06f20e274f7c2; op2val:0x4005abb347a4aaac;
op3val:0x3fe64236fd83f10f; valaddr_reg:x3; val_offset:951*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 951*FLEN/8, x4, x1, x2)

inst_318:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x06f20e274f7c2 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x5abb347a4aaac and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x64236fd83f10f and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd06f20e274f7c2; op2val:0x4005abb347a4aaac;
op3val:0x3fe64236fd83f10f; valaddr_reg:x3; val_offset:954*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 954*FLEN/8, x4, x1, x2)

inst_319:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x06f20e274f7c2 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x5abb347a4aaac and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x64236fd83f10f and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd06f20e274f7c2; op2val:0x4005abb347a4aaac;
op3val:0x3fe64236fd83f10f; valaddr_reg:x3; val_offset:957*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 957*FLEN/8, x4, x1, x2)

inst_320:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x0a6a5faccf050 and fs2 == 0 and fe2 == 0x3fb and fm2 == 0x7e0384e608111 and fs3 == 0 and fe3 == 0x3f9 and fm3 == 0x8d8e6451393c0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd0a6a5faccf050; op2val:0x3fb7e0384e608111;
op3val:0x3f98d8e6451393c0; valaddr_reg:x3; val_offset:960*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 960*FLEN/8, x4, x1, x2)

inst_321:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x0a6a5faccf050 and fs2 == 0 and fe2 == 0x3fb and fm2 == 0x7e0384e608111 and fs3 == 0 and fe3 == 0x3f9 and fm3 == 0x8d8e6451393c0 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd0a6a5faccf050; op2val:0x3fb7e0384e608111;
op3val:0x3f98d8e6451393c0; valaddr_reg:x3; val_offset:963*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 963*FLEN/8, x4, x1, x2)

inst_322:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x0a6a5faccf050 and fs2 == 0 and fe2 == 0x3fb and fm2 == 0x7e0384e608111 and fs3 == 0 and fe3 == 0x3f9 and fm3 == 0x8d8e6451393c0 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd0a6a5faccf050; op2val:0x3fb7e0384e608111;
op3val:0x3f98d8e6451393c0; valaddr_reg:x3; val_offset:966*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 966*FLEN/8, x4, x1, x2)

inst_323:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x0a6a5faccf050 and fs2 == 0 and fe2 == 0x3fb and fm2 == 0x7e0384e608111 and fs3 == 0 and fe3 == 0x3f9 and fm3 == 0x8d8e6451393c0 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd0a6a5faccf050; op2val:0x3fb7e0384e608111;
op3val:0x3f98d8e6451393c0; valaddr_reg:x3; val_offset:969*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 969*FLEN/8, x4, x1, x2)

inst_324:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x0a6a5faccf050 and fs2 == 0 and fe2 == 0x3fb and fm2 == 0x7e0384e608111 and fs3 == 0 and fe3 == 0x3f9 and fm3 == 0x8d8e6451393c0 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd0a6a5faccf050; op2val:0x3fb7e0384e608111;
op3val:0x3f98d8e6451393c0; valaddr_reg:x3; val_offset:972*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 972*FLEN/8, x4, x1, x2)

inst_325:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x0d875c43589b8 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x6ba8a3f9c7f32 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x7ee07d4c35c27 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd0d875c43589b8; op2val:0x4006ba8a3f9c7f32;
op3val:0x3fe7ee07d4c35c27; valaddr_reg:x3; val_offset:975*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 975*FLEN/8, x4, x1, x2)

inst_326:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x0d875c43589b8 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x6ba8a3f9c7f32 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x7ee07d4c35c27 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd0d875c43589b8; op2val:0x4006ba8a3f9c7f32;
op3val:0x3fe7ee07d4c35c27; valaddr_reg:x3; val_offset:978*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 978*FLEN/8, x4, x1, x2)

inst_327:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x0d875c43589b8 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x6ba8a3f9c7f32 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x7ee07d4c35c27 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd0d875c43589b8; op2val:0x4006ba8a3f9c7f32;
op3val:0x3fe7ee07d4c35c27; valaddr_reg:x3; val_offset:981*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 981*FLEN/8, x4, x1, x2)

inst_328:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x0d875c43589b8 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x6ba8a3f9c7f32 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x7ee07d4c35c27 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd0d875c43589b8; op2val:0x4006ba8a3f9c7f32;
op3val:0x3fe7ee07d4c35c27; valaddr_reg:x3; val_offset:984*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 984*FLEN/8, x4, x1, x2)

inst_329:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x0d875c43589b8 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x6ba8a3f9c7f32 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x7ee07d4c35c27 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd0d875c43589b8; op2val:0x4006ba8a3f9c7f32;
op3val:0x3fe7ee07d4c35c27; valaddr_reg:x3; val_offset:987*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 987*FLEN/8, x4, x1, x2)

inst_330:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x108911a643e2e and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x693e123b5fd81 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x80935e7e94dd0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd108911a643e2e; op2val:0x3fe693e123b5fd81;
op3val:0x3fc80935e7e94dd0; valaddr_reg:x3; val_offset:990*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 990*FLEN/8, x4, x1, x2)

inst_331:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x108911a643e2e and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x693e123b5fd81 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x80935e7e94dd0 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd108911a643e2e; op2val:0x3fe693e123b5fd81;
op3val:0x3fc80935e7e94dd0; valaddr_reg:x3; val_offset:993*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 993*FLEN/8, x4, x1, x2)

inst_332:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x108911a643e2e and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x693e123b5fd81 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x80935e7e94dd0 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd108911a643e2e; op2val:0x3fe693e123b5fd81;
op3val:0x3fc80935e7e94dd0; valaddr_reg:x3; val_offset:996*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 996*FLEN/8, x4, x1, x2)

inst_333:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x108911a643e2e and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x693e123b5fd81 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x80935e7e94dd0 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd108911a643e2e; op2val:0x3fe693e123b5fd81;
op3val:0x3fc80935e7e94dd0; valaddr_reg:x3; val_offset:999*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 999*FLEN/8, x4, x1, x2)

inst_334:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x108911a643e2e and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x693e123b5fd81 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x80935e7e94dd0 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd108911a643e2e; op2val:0x3fe693e123b5fd81;
op3val:0x3fc80935e7e94dd0; valaddr_reg:x3; val_offset:1002*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1002*FLEN/8, x4, x1, x2)

inst_335:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x1153603f46bb0 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xae959b4eb2cac and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xcbb9c702cf346 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd1153603f46bb0; op2val:0x3ffae959b4eb2cac;
op3val:0x3fdcbb9c702cf346; valaddr_reg:x3; val_offset:1005*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1005*FLEN/8, x4, x1, x2)

inst_336:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x1153603f46bb0 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xae959b4eb2cac and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xcbb9c702cf346 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd1153603f46bb0; op2val:0x3ffae959b4eb2cac;
op3val:0x3fdcbb9c702cf346; valaddr_reg:x3; val_offset:1008*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1008*FLEN/8, x4, x1, x2)

inst_337:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x1153603f46bb0 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xae959b4eb2cac and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xcbb9c702cf346 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd1153603f46bb0; op2val:0x3ffae959b4eb2cac;
op3val:0x3fdcbb9c702cf346; valaddr_reg:x3; val_offset:1011*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1011*FLEN/8, x4, x1, x2)

inst_338:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x1153603f46bb0 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xae959b4eb2cac and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xcbb9c702cf346 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd1153603f46bb0; op2val:0x3ffae959b4eb2cac;
op3val:0x3fdcbb9c702cf346; valaddr_reg:x3; val_offset:1014*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1014*FLEN/8, x4, x1, x2)

inst_339:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x1153603f46bb0 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xae959b4eb2cac and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xcbb9c702cf346 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd1153603f46bb0; op2val:0x3ffae959b4eb2cac;
op3val:0x3fdcbb9c702cf346; valaddr_reg:x3; val_offset:1017*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1017*FLEN/8, x4, x1, x2)

inst_340:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x121231cb68166 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x069efab52e69c and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x1928d298a53f8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd121231cb68166; op2val:0x400069efab52e69c;
op3val:0x3fe1928d298a53f8; valaddr_reg:x3; val_offset:1020*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1020*FLEN/8, x4, x1, x2)

inst_341:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x121231cb68166 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x069efab52e69c and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x1928d298a53f8 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd121231cb68166; op2val:0x400069efab52e69c;
op3val:0x3fe1928d298a53f8; valaddr_reg:x3; val_offset:1023*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1023*FLEN/8, x4, x1, x2)

inst_342:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x121231cb68166 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x069efab52e69c and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x1928d298a53f8 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd121231cb68166; op2val:0x400069efab52e69c;
op3val:0x3fe1928d298a53f8; valaddr_reg:x3; val_offset:1026*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1026*FLEN/8, x4, x1, x2)

inst_343:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x121231cb68166 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x069efab52e69c and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x1928d298a53f8 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd121231cb68166; op2val:0x400069efab52e69c;
op3val:0x3fe1928d298a53f8; valaddr_reg:x3; val_offset:1029*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1029*FLEN/8, x4, x1, x2)

inst_344:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x121231cb68166 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x069efab52e69c and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x1928d298a53f8 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd121231cb68166; op2val:0x400069efab52e69c;
op3val:0x3fe1928d298a53f8; valaddr_reg:x3; val_offset:1032*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1032*FLEN/8, x4, x1, x2)

inst_345:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x150c4b468c9a0 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x50e0cd673b6ef and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x6c936bd906d0d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd150c4b468c9a0; op2val:0x40050e0cd673b6ef;
op3val:0x3fe6c936bd906d0d; valaddr_reg:x3; val_offset:1035*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1035*FLEN/8, x4, x1, x2)

inst_346:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x150c4b468c9a0 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x50e0cd673b6ef and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x6c936bd906d0d and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd150c4b468c9a0; op2val:0x40050e0cd673b6ef;
op3val:0x3fe6c936bd906d0d; valaddr_reg:x3; val_offset:1038*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1038*FLEN/8, x4, x1, x2)

inst_347:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x150c4b468c9a0 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x50e0cd673b6ef and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x6c936bd906d0d and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd150c4b468c9a0; op2val:0x40050e0cd673b6ef;
op3val:0x3fe6c936bd906d0d; valaddr_reg:x3; val_offset:1041*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1041*FLEN/8, x4, x1, x2)

inst_348:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x150c4b468c9a0 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x50e0cd673b6ef and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x6c936bd906d0d and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd150c4b468c9a0; op2val:0x40050e0cd673b6ef;
op3val:0x3fe6c936bd906d0d; valaddr_reg:x3; val_offset:1044*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1044*FLEN/8, x4, x1, x2)

inst_349:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x150c4b468c9a0 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x50e0cd673b6ef and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x6c936bd906d0d and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd150c4b468c9a0; op2val:0x40050e0cd673b6ef;
op3val:0x3fe6c936bd906d0d; valaddr_reg:x3; val_offset:1047*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1047*FLEN/8, x4, x1, x2)

inst_350:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x1529321f2ceda and fs2 == 0 and fe2 == 0x400 and fm2 == 0x77dc2ec120486 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x96edba713b9e9 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd1529321f2ceda; op2val:0x40077dc2ec120486;
op3val:0x3fe96edba713b9e9; valaddr_reg:x3; val_offset:1050*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1050*FLEN/8, x4, x1, x2)

inst_351:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x1529321f2ceda and fs2 == 0 and fe2 == 0x400 and fm2 == 0x77dc2ec120486 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x96edba713b9e9 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd1529321f2ceda; op2val:0x40077dc2ec120486;
op3val:0x3fe96edba713b9e9; valaddr_reg:x3; val_offset:1053*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1053*FLEN/8, x4, x1, x2)

inst_352:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x1529321f2ceda and fs2 == 0 and fe2 == 0x400 and fm2 == 0x77dc2ec120486 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x96edba713b9e9 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd1529321f2ceda; op2val:0x40077dc2ec120486;
op3val:0x3fe96edba713b9e9; valaddr_reg:x3; val_offset:1056*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1056*FLEN/8, x4, x1, x2)

inst_353:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x1529321f2ceda and fs2 == 0 and fe2 == 0x400 and fm2 == 0x77dc2ec120486 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x96edba713b9e9 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd1529321f2ceda; op2val:0x40077dc2ec120486;
op3val:0x3fe96edba713b9e9; valaddr_reg:x3; val_offset:1059*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1059*FLEN/8, x4, x1, x2)

inst_354:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x1529321f2ceda and fs2 == 0 and fe2 == 0x400 and fm2 == 0x77dc2ec120486 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x96edba713b9e9 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd1529321f2ceda; op2val:0x40077dc2ec120486;
op3val:0x3fe96edba713b9e9; valaddr_reg:x3; val_offset:1062*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1062*FLEN/8, x4, x1, x2)

inst_355:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x1966ef7098cf6 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x9d2bd70e5a48d and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xc62b40f818672 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd1966ef7098cf6; op2val:0x3ff9d2bd70e5a48d;
op3val:0x3fdc62b40f818672; valaddr_reg:x3; val_offset:1065*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1065*FLEN/8, x4, x1, x2)

inst_356:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x1966ef7098cf6 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x9d2bd70e5a48d and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xc62b40f818672 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd1966ef7098cf6; op2val:0x3ff9d2bd70e5a48d;
op3val:0x3fdc62b40f818672; valaddr_reg:x3; val_offset:1068*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1068*FLEN/8, x4, x1, x2)

inst_357:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x1966ef7098cf6 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x9d2bd70e5a48d and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xc62b40f818672 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd1966ef7098cf6; op2val:0x3ff9d2bd70e5a48d;
op3val:0x3fdc62b40f818672; valaddr_reg:x3; val_offset:1071*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1071*FLEN/8, x4, x1, x2)

inst_358:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x1966ef7098cf6 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x9d2bd70e5a48d and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xc62b40f818672 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd1966ef7098cf6; op2val:0x3ff9d2bd70e5a48d;
op3val:0x3fdc62b40f818672; valaddr_reg:x3; val_offset:1074*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1074*FLEN/8, x4, x1, x2)

inst_359:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x1966ef7098cf6 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x9d2bd70e5a48d and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xc62b40f818672 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd1966ef7098cf6; op2val:0x3ff9d2bd70e5a48d;
op3val:0x3fdc62b40f818672; valaddr_reg:x3; val_offset:1077*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1077*FLEN/8, x4, x1, x2)

inst_360:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x19ce60ebaa9ae and fs2 == 0 and fe2 == 0x400 and fm2 == 0x820afdf3c798f and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xa8f547c070d8e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd19ce60ebaa9ae; op2val:0x400820afdf3c798f;
op3val:0x3fea8f547c070d8e; valaddr_reg:x3; val_offset:1080*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1080*FLEN/8, x4, x1, x2)

inst_361:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x19ce60ebaa9ae and fs2 == 0 and fe2 == 0x400 and fm2 == 0x820afdf3c798f and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xa8f547c070d8e and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd19ce60ebaa9ae; op2val:0x400820afdf3c798f;
op3val:0x3fea8f547c070d8e; valaddr_reg:x3; val_offset:1083*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1083*FLEN/8, x4, x1, x2)

inst_362:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x19ce60ebaa9ae and fs2 == 0 and fe2 == 0x400 and fm2 == 0x820afdf3c798f and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xa8f547c070d8e and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd19ce60ebaa9ae; op2val:0x400820afdf3c798f;
op3val:0x3fea8f547c070d8e; valaddr_reg:x3; val_offset:1086*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1086*FLEN/8, x4, x1, x2)

inst_363:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x19ce60ebaa9ae and fs2 == 0 and fe2 == 0x400 and fm2 == 0x820afdf3c798f and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xa8f547c070d8e and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd19ce60ebaa9ae; op2val:0x400820afdf3c798f;
op3val:0x3fea8f547c070d8e; valaddr_reg:x3; val_offset:1089*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1089*FLEN/8, x4, x1, x2)

inst_364:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x19ce60ebaa9ae and fs2 == 0 and fe2 == 0x400 and fm2 == 0x820afdf3c798f and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xa8f547c070d8e and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd19ce60ebaa9ae; op2val:0x400820afdf3c798f;
op3val:0x3fea8f547c070d8e; valaddr_reg:x3; val_offset:1092*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1092*FLEN/8, x4, x1, x2)

inst_365:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x1a76e8b0ce342 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x4b1d1fcebcbe2 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x6d57e16d78c28 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd1a76e8b0ce342; op2val:0x3ff4b1d1fcebcbe2;
op3val:0x3fd6d57e16d78c28; valaddr_reg:x3; val_offset:1095*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1095*FLEN/8, x4, x1, x2)

inst_366:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x1a76e8b0ce342 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x4b1d1fcebcbe2 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x6d57e16d78c28 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd1a76e8b0ce342; op2val:0x3ff4b1d1fcebcbe2;
op3val:0x3fd6d57e16d78c28; valaddr_reg:x3; val_offset:1098*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1098*FLEN/8, x4, x1, x2)

inst_367:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x1a76e8b0ce342 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x4b1d1fcebcbe2 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x6d57e16d78c28 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd1a76e8b0ce342; op2val:0x3ff4b1d1fcebcbe2;
op3val:0x3fd6d57e16d78c28; valaddr_reg:x3; val_offset:1101*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1101*FLEN/8, x4, x1, x2)

inst_368:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x1a76e8b0ce342 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x4b1d1fcebcbe2 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x6d57e16d78c28 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd1a76e8b0ce342; op2val:0x3ff4b1d1fcebcbe2;
op3val:0x3fd6d57e16d78c28; valaddr_reg:x3; val_offset:1104*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1104*FLEN/8, x4, x1, x2)

inst_369:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x1a76e8b0ce342 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x4b1d1fcebcbe2 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x6d57e16d78c28 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd1a76e8b0ce342; op2val:0x3ff4b1d1fcebcbe2;
op3val:0x3fd6d57e16d78c28; valaddr_reg:x3; val_offset:1107*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1107*FLEN/8, x4, x1, x2)

inst_370:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x1c847dd12877e and fs2 == 0 and fe2 == 0x400 and fm2 == 0xc3b4c84a9b4a9 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xf606556a5e8a8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd1c847dd12877e; op2val:0x400c3b4c84a9b4a9;
op3val:0x3fef606556a5e8a8; valaddr_reg:x3; val_offset:1110*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1110*FLEN/8, x4, x1, x2)

inst_371:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x1c847dd12877e and fs2 == 0 and fe2 == 0x400 and fm2 == 0xc3b4c84a9b4a9 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xf606556a5e8a8 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd1c847dd12877e; op2val:0x400c3b4c84a9b4a9;
op3val:0x3fef606556a5e8a8; valaddr_reg:x3; val_offset:1113*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1113*FLEN/8, x4, x1, x2)

inst_372:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x1c847dd12877e and fs2 == 0 and fe2 == 0x400 and fm2 == 0xc3b4c84a9b4a9 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xf606556a5e8a8 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd1c847dd12877e; op2val:0x400c3b4c84a9b4a9;
op3val:0x3fef606556a5e8a8; valaddr_reg:x3; val_offset:1116*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1116*FLEN/8, x4, x1, x2)

inst_373:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x1c847dd12877e and fs2 == 0 and fe2 == 0x400 and fm2 == 0xc3b4c84a9b4a9 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xf606556a5e8a8 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd1c847dd12877e; op2val:0x400c3b4c84a9b4a9;
op3val:0x3fef606556a5e8a8; valaddr_reg:x3; val_offset:1119*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1119*FLEN/8, x4, x1, x2)

inst_374:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x1c847dd12877e and fs2 == 0 and fe2 == 0x400 and fm2 == 0xc3b4c84a9b4a9 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xf606556a5e8a8 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd1c847dd12877e; op2val:0x400c3b4c84a9b4a9;
op3val:0x3fef606556a5e8a8; valaddr_reg:x3; val_offset:1122*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1122*FLEN/8, x4, x1, x2)

inst_375:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x1f285d75afa80 and fs2 == 0 and fe2 == 0x400 and fm2 == 0xb1dcea768f608 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xe6ab13c4421a9 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd1f285d75afa80; op2val:0x400b1dcea768f608;
op3val:0x3fee6ab13c4421a9; valaddr_reg:x3; val_offset:1125*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1125*FLEN/8, x4, x1, x2)

inst_376:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x1f285d75afa80 and fs2 == 0 and fe2 == 0x400 and fm2 == 0xb1dcea768f608 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xe6ab13c4421a9 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd1f285d75afa80; op2val:0x400b1dcea768f608;
op3val:0x3fee6ab13c4421a9; valaddr_reg:x3; val_offset:1128*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1128*FLEN/8, x4, x1, x2)

inst_377:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x1f285d75afa80 and fs2 == 0 and fe2 == 0x400 and fm2 == 0xb1dcea768f608 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xe6ab13c4421a9 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd1f285d75afa80; op2val:0x400b1dcea768f608;
op3val:0x3fee6ab13c4421a9; valaddr_reg:x3; val_offset:1131*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1131*FLEN/8, x4, x1, x2)

inst_378:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x1f285d75afa80 and fs2 == 0 and fe2 == 0x400 and fm2 == 0xb1dcea768f608 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xe6ab13c4421a9 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd1f285d75afa80; op2val:0x400b1dcea768f608;
op3val:0x3fee6ab13c4421a9; valaddr_reg:x3; val_offset:1134*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1134*FLEN/8, x4, x1, x2)

inst_379:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x1f285d75afa80 and fs2 == 0 and fe2 == 0x400 and fm2 == 0xb1dcea768f608 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xe6ab13c4421a9 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd1f285d75afa80; op2val:0x400b1dcea768f608;
op3val:0x3fee6ab13c4421a9; valaddr_reg:x3; val_offset:1137*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1137*FLEN/8, x4, x1, x2)

inst_380:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x22d29d9ba48aa and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xb3f1d22329e25 and fs3 == 0 and fe3 == 0x3fb and fm3 == 0xef3e98ce8fc78 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd22d29d9ba48aa; op2val:0x3fdb3f1d22329e25;
op3val:0x3fbef3e98ce8fc78; valaddr_reg:x3; val_offset:1140*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1140*FLEN/8, x4, x1, x2)

inst_381:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x22d29d9ba48aa and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xb3f1d22329e25 and fs3 == 0 and fe3 == 0x3fb and fm3 == 0xef3e98ce8fc78 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd22d29d9ba48aa; op2val:0x3fdb3f1d22329e25;
op3val:0x3fbef3e98ce8fc78; valaddr_reg:x3; val_offset:1143*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1143*FLEN/8, x4, x1, x2)

inst_382:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x22d29d9ba48aa and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xb3f1d22329e25 and fs3 == 0 and fe3 == 0x3fb and fm3 == 0xef3e98ce8fc78 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd22d29d9ba48aa; op2val:0x3fdb3f1d22329e25;
op3val:0x3fbef3e98ce8fc78; valaddr_reg:x3; val_offset:1146*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1146*FLEN/8, x4, x1, x2)

inst_383:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x22d29d9ba48aa and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xb3f1d22329e25 and fs3 == 0 and fe3 == 0x3fb and fm3 == 0xef3e98ce8fc78 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd22d29d9ba48aa; op2val:0x3fdb3f1d22329e25;
op3val:0x3fbef3e98ce8fc78; valaddr_reg:x3; val_offset:1149*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1149*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_4)

inst_384:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x22d29d9ba48aa and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xb3f1d22329e25 and fs3 == 0 and fe3 == 0x3fb and fm3 == 0xef3e98ce8fc78 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd22d29d9ba48aa; op2val:0x3fdb3f1d22329e25;
op3val:0x3fbef3e98ce8fc78; valaddr_reg:x3; val_offset:1152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1152*FLEN/8, x4, x1, x2)

inst_385:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x2c502d22b53c0 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x3dc1a802fa803 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x74c2756e1db1c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd2c502d22b53c0; op2val:0x3ff3dc1a802fa803;
op3val:0x3fd74c2756e1db1c; valaddr_reg:x3; val_offset:1155*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1155*FLEN/8, x4, x1, x2)

inst_386:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x2c502d22b53c0 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x3dc1a802fa803 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x74c2756e1db1c and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd2c502d22b53c0; op2val:0x3ff3dc1a802fa803;
op3val:0x3fd74c2756e1db1c; valaddr_reg:x3; val_offset:1158*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1158*FLEN/8, x4, x1, x2)

inst_387:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x2c502d22b53c0 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x3dc1a802fa803 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x74c2756e1db1c and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd2c502d22b53c0; op2val:0x3ff3dc1a802fa803;
op3val:0x3fd74c2756e1db1c; valaddr_reg:x3; val_offset:1161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1161*FLEN/8, x4, x1, x2)

inst_388:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x2c502d22b53c0 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x3dc1a802fa803 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x74c2756e1db1c and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd2c502d22b53c0; op2val:0x3ff3dc1a802fa803;
op3val:0x3fd74c2756e1db1c; valaddr_reg:x3; val_offset:1164*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1164*FLEN/8, x4, x1, x2)

inst_389:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x2c502d22b53c0 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x3dc1a802fa803 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x74c2756e1db1c and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd2c502d22b53c0; op2val:0x3ff3dc1a802fa803;
op3val:0x3fd74c2756e1db1c; valaddr_reg:x3; val_offset:1167*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1167*FLEN/8, x4, x1, x2)

inst_390:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x34003a3d07776 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xa454693f4f9a6 and fs3 == 0 and fe3 == 0x3fb and fm3 == 0xf9b5ee3f7ffd8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd34003a3d07776; op2val:0x3fda454693f4f9a6;
op3val:0x3fbf9b5ee3f7ffd8; valaddr_reg:x3; val_offset:1170*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1170*FLEN/8, x4, x1, x2)

inst_391:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x34003a3d07776 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xa454693f4f9a6 and fs3 == 0 and fe3 == 0x3fb and fm3 == 0xf9b5ee3f7ffd8 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd34003a3d07776; op2val:0x3fda454693f4f9a6;
op3val:0x3fbf9b5ee3f7ffd8; valaddr_reg:x3; val_offset:1173*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1173*FLEN/8, x4, x1, x2)

inst_392:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x34003a3d07776 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xa454693f4f9a6 and fs3 == 0 and fe3 == 0x3fb and fm3 == 0xf9b5ee3f7ffd8 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd34003a3d07776; op2val:0x3fda454693f4f9a6;
op3val:0x3fbf9b5ee3f7ffd8; valaddr_reg:x3; val_offset:1176*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1176*FLEN/8, x4, x1, x2)

inst_393:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x34003a3d07776 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xa454693f4f9a6 and fs3 == 0 and fe3 == 0x3fb and fm3 == 0xf9b5ee3f7ffd8 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd34003a3d07776; op2val:0x3fda454693f4f9a6;
op3val:0x3fbf9b5ee3f7ffd8; valaddr_reg:x3; val_offset:1179*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1179*FLEN/8, x4, x1, x2)

inst_394:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x34003a3d07776 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xa454693f4f9a6 and fs3 == 0 and fe3 == 0x3fb and fm3 == 0xf9b5ee3f7ffd8 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd34003a3d07776; op2val:0x3fda454693f4f9a6;
op3val:0x3fbf9b5ee3f7ffd8; valaddr_reg:x3; val_offset:1182*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1182*FLEN/8, x4, x1, x2)

inst_395:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x38047dd32d5ae and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x54cb18adbde28 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x9f5d80c06cf5e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd38047dd32d5ae; op2val:0x3ff54cb18adbde28;
op3val:0x3fd9f5d80c06cf5e; valaddr_reg:x3; val_offset:1185*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1185*FLEN/8, x4, x1, x2)

inst_396:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x38047dd32d5ae and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x54cb18adbde28 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x9f5d80c06cf5e and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd38047dd32d5ae; op2val:0x3ff54cb18adbde28;
op3val:0x3fd9f5d80c06cf5e; valaddr_reg:x3; val_offset:1188*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1188*FLEN/8, x4, x1, x2)

inst_397:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x38047dd32d5ae and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x54cb18adbde28 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x9f5d80c06cf5e and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd38047dd32d5ae; op2val:0x3ff54cb18adbde28;
op3val:0x3fd9f5d80c06cf5e; valaddr_reg:x3; val_offset:1191*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1191*FLEN/8, x4, x1, x2)

inst_398:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x38047dd32d5ae and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x54cb18adbde28 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x9f5d80c06cf5e and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd38047dd32d5ae; op2val:0x3ff54cb18adbde28;
op3val:0x3fd9f5d80c06cf5e; valaddr_reg:x3; val_offset:1194*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1194*FLEN/8, x4, x1, x2)

inst_399:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x38047dd32d5ae and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x54cb18adbde28 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x9f5d80c06cf5e and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd38047dd32d5ae; op2val:0x3ff54cb18adbde28;
op3val:0x3fd9f5d80c06cf5e; valaddr_reg:x3; val_offset:1197*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1197*FLEN/8, x4, x1, x2)

inst_400:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x3f4709e8882ee and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xd7d87afc0ff29 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x263cd846b3a5b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd3f4709e8882ee; op2val:0x3ffd7d87afc0ff29;
op3val:0x3fe263cd846b3a5b; valaddr_reg:x3; val_offset:1200*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1200*FLEN/8, x4, x1, x2)

inst_401:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x3f4709e8882ee and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xd7d87afc0ff29 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x263cd846b3a5b and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd3f4709e8882ee; op2val:0x3ffd7d87afc0ff29;
op3val:0x3fe263cd846b3a5b; valaddr_reg:x3; val_offset:1203*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1203*FLEN/8, x4, x1, x2)

inst_402:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x3f4709e8882ee and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xd7d87afc0ff29 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x263cd846b3a5b and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd3f4709e8882ee; op2val:0x3ffd7d87afc0ff29;
op3val:0x3fe263cd846b3a5b; valaddr_reg:x3; val_offset:1206*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1206*FLEN/8, x4, x1, x2)

inst_403:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x3f4709e8882ee and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xd7d87afc0ff29 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x263cd846b3a5b and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd3f4709e8882ee; op2val:0x3ffd7d87afc0ff29;
op3val:0x3fe263cd846b3a5b; valaddr_reg:x3; val_offset:1209*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1209*FLEN/8, x4, x1, x2)

inst_404:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x3f4709e8882ee and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xd7d87afc0ff29 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x263cd846b3a5b and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd3f4709e8882ee; op2val:0x3ffd7d87afc0ff29;
op3val:0x3fe263cd846b3a5b; valaddr_reg:x3; val_offset:1212*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1212*FLEN/8, x4, x1, x2)

inst_405:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x3fc0a16474f20 and fs2 == 0 and fe2 == 0x3fa and fm2 == 0xccaac3ad29241 and fs3 == 0 and fe3 == 0x3f9 and fm3 == 0x1fb1b629d92c0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd3fc0a16474f20; op2val:0x3faccaac3ad29241;
op3val:0x3f91fb1b629d92c0; valaddr_reg:x3; val_offset:1215*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1215*FLEN/8, x4, x1, x2)

inst_406:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x3fc0a16474f20 and fs2 == 0 and fe2 == 0x3fa and fm2 == 0xccaac3ad29241 and fs3 == 0 and fe3 == 0x3f9 and fm3 == 0x1fb1b629d92c0 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd3fc0a16474f20; op2val:0x3faccaac3ad29241;
op3val:0x3f91fb1b629d92c0; valaddr_reg:x3; val_offset:1218*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1218*FLEN/8, x4, x1, x2)

inst_407:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x3fc0a16474f20 and fs2 == 0 and fe2 == 0x3fa and fm2 == 0xccaac3ad29241 and fs3 == 0 and fe3 == 0x3f9 and fm3 == 0x1fb1b629d92c0 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd3fc0a16474f20; op2val:0x3faccaac3ad29241;
op3val:0x3f91fb1b629d92c0; valaddr_reg:x3; val_offset:1221*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1221*FLEN/8, x4, x1, x2)

inst_408:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x3fc0a16474f20 and fs2 == 0 and fe2 == 0x3fa and fm2 == 0xccaac3ad29241 and fs3 == 0 and fe3 == 0x3f9 and fm3 == 0x1fb1b629d92c0 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd3fc0a16474f20; op2val:0x3faccaac3ad29241;
op3val:0x3f91fb1b629d92c0; valaddr_reg:x3; val_offset:1224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1224*FLEN/8, x4, x1, x2)

inst_409:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x3fc0a16474f20 and fs2 == 0 and fe2 == 0x3fa and fm2 == 0xccaac3ad29241 and fs3 == 0 and fe3 == 0x3f9 and fm3 == 0x1fb1b629d92c0 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd3fc0a16474f20; op2val:0x3faccaac3ad29241;
op3val:0x3f91fb1b629d92c0; valaddr_reg:x3; val_offset:1227*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1227*FLEN/8, x4, x1, x2)

inst_410:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x44b713859f3f0 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xef288c55d6b06 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x3a08b6adb5c98 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd44b713859f3f0; op2val:0x3feef288c55d6b06;
op3val:0x3fd3a08b6adb5c98; valaddr_reg:x3; val_offset:1230*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1230*FLEN/8, x4, x1, x2)

inst_411:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x44b713859f3f0 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xef288c55d6b06 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x3a08b6adb5c98 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd44b713859f3f0; op2val:0x3feef288c55d6b06;
op3val:0x3fd3a08b6adb5c98; valaddr_reg:x3; val_offset:1233*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1233*FLEN/8, x4, x1, x2)

inst_412:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x44b713859f3f0 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xef288c55d6b06 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x3a08b6adb5c98 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd44b713859f3f0; op2val:0x3feef288c55d6b06;
op3val:0x3fd3a08b6adb5c98; valaddr_reg:x3; val_offset:1236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1236*FLEN/8, x4, x1, x2)

inst_413:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x44b713859f3f0 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xef288c55d6b06 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x3a08b6adb5c98 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd44b713859f3f0; op2val:0x3feef288c55d6b06;
op3val:0x3fd3a08b6adb5c98; valaddr_reg:x3; val_offset:1239*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1239*FLEN/8, x4, x1, x2)

inst_414:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x44b713859f3f0 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xef288c55d6b06 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x3a08b6adb5c98 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd44b713859f3f0; op2val:0x3feef288c55d6b06;
op3val:0x3fd3a08b6adb5c98; valaddr_reg:x3; val_offset:1242*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1242*FLEN/8, x4, x1, x2)

inst_415:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x47453abbf0976 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xca7fce439c398 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x25129f0e41e24 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd47453abbf0976; op2val:0x3ffca7fce439c398;
op3val:0x3fe25129f0e41e24; valaddr_reg:x3; val_offset:1245*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1245*FLEN/8, x4, x1, x2)

inst_416:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x47453abbf0976 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xca7fce439c398 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x25129f0e41e24 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd47453abbf0976; op2val:0x3ffca7fce439c398;
op3val:0x3fe25129f0e41e24; valaddr_reg:x3; val_offset:1248*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1248*FLEN/8, x4, x1, x2)

inst_417:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x47453abbf0976 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xca7fce439c398 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x25129f0e41e24 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd47453abbf0976; op2val:0x3ffca7fce439c398;
op3val:0x3fe25129f0e41e24; valaddr_reg:x3; val_offset:1251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1251*FLEN/8, x4, x1, x2)

inst_418:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x47453abbf0976 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xca7fce439c398 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x25129f0e41e24 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd47453abbf0976; op2val:0x3ffca7fce439c398;
op3val:0x3fe25129f0e41e24; valaddr_reg:x3; val_offset:1254*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1254*FLEN/8, x4, x1, x2)

inst_419:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x47453abbf0976 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xca7fce439c398 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x25129f0e41e24 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd47453abbf0976; op2val:0x3ffca7fce439c398;
op3val:0x3fe25129f0e41e24; valaddr_reg:x3; val_offset:1257*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1257*FLEN/8, x4, x1, x2)

inst_420:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x4b9234a14ebbc and fs2 == 0 and fe2 == 0x400 and fm2 == 0x75f64eb83c9cb and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xe45b0b22c6597 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd4b9234a14ebbc; op2val:0x40075f64eb83c9cb;
op3val:0x3fee45b0b22c6597; valaddr_reg:x3; val_offset:1260*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1260*FLEN/8, x4, x1, x2)

inst_421:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x4b9234a14ebbc and fs2 == 0 and fe2 == 0x400 and fm2 == 0x75f64eb83c9cb and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xe45b0b22c6597 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd4b9234a14ebbc; op2val:0x40075f64eb83c9cb;
op3val:0x3fee45b0b22c6597; valaddr_reg:x3; val_offset:1263*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1263*FLEN/8, x4, x1, x2)

inst_422:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x4b9234a14ebbc and fs2 == 0 and fe2 == 0x400 and fm2 == 0x75f64eb83c9cb and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xe45b0b22c6597 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd4b9234a14ebbc; op2val:0x40075f64eb83c9cb;
op3val:0x3fee45b0b22c6597; valaddr_reg:x3; val_offset:1266*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1266*FLEN/8, x4, x1, x2)

inst_423:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x4b9234a14ebbc and fs2 == 0 and fe2 == 0x400 and fm2 == 0x75f64eb83c9cb and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xe45b0b22c6597 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd4b9234a14ebbc; op2val:0x40075f64eb83c9cb;
op3val:0x3fee45b0b22c6597; valaddr_reg:x3; val_offset:1269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1269*FLEN/8, x4, x1, x2)

inst_424:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x4b9234a14ebbc and fs2 == 0 and fe2 == 0x400 and fm2 == 0x75f64eb83c9cb and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xe45b0b22c6597 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd4b9234a14ebbc; op2val:0x40075f64eb83c9cb;
op3val:0x3fee45b0b22c6597; valaddr_reg:x3; val_offset:1272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1272*FLEN/8, x4, x1, x2)

inst_425:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x4c134ac154518 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x17e7252713de3 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x6b14dc12a1dbe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd4c134ac154518; op2val:0x40017e7252713de3;
op3val:0x3fe6b14dc12a1dbe; valaddr_reg:x3; val_offset:1275*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1275*FLEN/8, x4, x1, x2)

inst_426:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x4c134ac154518 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x17e7252713de3 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x6b14dc12a1dbe and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd4c134ac154518; op2val:0x40017e7252713de3;
op3val:0x3fe6b14dc12a1dbe; valaddr_reg:x3; val_offset:1278*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1278*FLEN/8, x4, x1, x2)

inst_427:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x4c134ac154518 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x17e7252713de3 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x6b14dc12a1dbe and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd4c134ac154518; op2val:0x40017e7252713de3;
op3val:0x3fe6b14dc12a1dbe; valaddr_reg:x3; val_offset:1281*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1281*FLEN/8, x4, x1, x2)

inst_428:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x4c134ac154518 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x17e7252713de3 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x6b14dc12a1dbe and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd4c134ac154518; op2val:0x40017e7252713de3;
op3val:0x3fe6b14dc12a1dbe; valaddr_reg:x3; val_offset:1284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1284*FLEN/8, x4, x1, x2)

inst_429:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x4c134ac154518 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x17e7252713de3 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x6b14dc12a1dbe and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd4c134ac154518; op2val:0x40017e7252713de3;
op3val:0x3fe6b14dc12a1dbe; valaddr_reg:x3; val_offset:1287*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1287*FLEN/8, x4, x1, x2)

inst_430:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x4fded17342f5a and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xe07e666f7ff8a and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x3b33cf64229f0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd4fded17342f5a; op2val:0x3fee07e666f7ff8a;
op3val:0x3fd3b33cf64229f0; valaddr_reg:x3; val_offset:1290*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1290*FLEN/8, x4, x1, x2)

inst_431:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x4fded17342f5a and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xe07e666f7ff8a and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x3b33cf64229f0 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd4fded17342f5a; op2val:0x3fee07e666f7ff8a;
op3val:0x3fd3b33cf64229f0; valaddr_reg:x3; val_offset:1293*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1293*FLEN/8, x4, x1, x2)

inst_432:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x4fded17342f5a and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xe07e666f7ff8a and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x3b33cf64229f0 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd4fded17342f5a; op2val:0x3fee07e666f7ff8a;
op3val:0x3fd3b33cf64229f0; valaddr_reg:x3; val_offset:1296*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1296*FLEN/8, x4, x1, x2)

inst_433:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x4fded17342f5a and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xe07e666f7ff8a and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x3b33cf64229f0 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd4fded17342f5a; op2val:0x3fee07e666f7ff8a;
op3val:0x3fd3b33cf64229f0; valaddr_reg:x3; val_offset:1299*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1299*FLEN/8, x4, x1, x2)

inst_434:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x4fded17342f5a and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xe07e666f7ff8a and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x3b33cf64229f0 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd4fded17342f5a; op2val:0x3fee07e666f7ff8a;
op3val:0x3fd3b33cf64229f0; valaddr_reg:x3; val_offset:1302*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1302*FLEN/8, x4, x1, x2)

inst_435:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x5be5b75120e80 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x42e305a3e34f5 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xb6cb74efcd14d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd5be5b75120e80; op2val:0x40042e305a3e34f5;
op3val:0x3feb6cb74efcd14d; valaddr_reg:x3; val_offset:1305*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1305*FLEN/8, x4, x1, x2)

inst_436:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x5be5b75120e80 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x42e305a3e34f5 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xb6cb74efcd14d and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd5be5b75120e80; op2val:0x40042e305a3e34f5;
op3val:0x3feb6cb74efcd14d; valaddr_reg:x3; val_offset:1308*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1308*FLEN/8, x4, x1, x2)

inst_437:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x5be5b75120e80 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x42e305a3e34f5 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xb6cb74efcd14d and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd5be5b75120e80; op2val:0x40042e305a3e34f5;
op3val:0x3feb6cb74efcd14d; valaddr_reg:x3; val_offset:1311*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1311*FLEN/8, x4, x1, x2)

inst_438:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x5be5b75120e80 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x42e305a3e34f5 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xb6cb74efcd14d and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd5be5b75120e80; op2val:0x40042e305a3e34f5;
op3val:0x3feb6cb74efcd14d; valaddr_reg:x3; val_offset:1314*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1314*FLEN/8, x4, x1, x2)

inst_439:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x5be5b75120e80 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x42e305a3e34f5 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xb6cb74efcd14d and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd5be5b75120e80; op2val:0x40042e305a3e34f5;
op3val:0x3feb6cb74efcd14d; valaddr_reg:x3; val_offset:1317*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1317*FLEN/8, x4, x1, x2)

inst_440:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x5ce0983cac5ae and fs2 == 0 and fe2 == 0x400 and fm2 == 0x5ee1b33f74e5c and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xde2ea5d045fe8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd5ce0983cac5ae; op2val:0x4005ee1b33f74e5c;
op3val:0x3fede2ea5d045fe8; valaddr_reg:x3; val_offset:1320*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1320*FLEN/8, x4, x1, x2)

inst_441:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x5ce0983cac5ae and fs2 == 0 and fe2 == 0x400 and fm2 == 0x5ee1b33f74e5c and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xde2ea5d045fe8 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd5ce0983cac5ae; op2val:0x4005ee1b33f74e5c;
op3val:0x3fede2ea5d045fe8; valaddr_reg:x3; val_offset:1323*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1323*FLEN/8, x4, x1, x2)

inst_442:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x5ce0983cac5ae and fs2 == 0 and fe2 == 0x400 and fm2 == 0x5ee1b33f74e5c and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xde2ea5d045fe8 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd5ce0983cac5ae; op2val:0x4005ee1b33f74e5c;
op3val:0x3fede2ea5d045fe8; valaddr_reg:x3; val_offset:1326*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1326*FLEN/8, x4, x1, x2)

inst_443:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x5ce0983cac5ae and fs2 == 0 and fe2 == 0x400 and fm2 == 0x5ee1b33f74e5c and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xde2ea5d045fe8 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd5ce0983cac5ae; op2val:0x4005ee1b33f74e5c;
op3val:0x3fede2ea5d045fe8; valaddr_reg:x3; val_offset:1329*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1329*FLEN/8, x4, x1, x2)

inst_444:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x5ce0983cac5ae and fs2 == 0 and fe2 == 0x400 and fm2 == 0x5ee1b33f74e5c and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xde2ea5d045fe8 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd5ce0983cac5ae; op2val:0x4005ee1b33f74e5c;
op3val:0x3fede2ea5d045fe8; valaddr_reg:x3; val_offset:1332*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1332*FLEN/8, x4, x1, x2)

inst_445:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x6359b953f7950 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x279b99c98bf69 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x9a54615b5ba14 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd6359b953f7950; op2val:0x3fe279b99c98bf69;
op3val:0x3fc9a54615b5ba14; valaddr_reg:x3; val_offset:1335*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1335*FLEN/8, x4, x1, x2)

inst_446:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x6359b953f7950 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x279b99c98bf69 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x9a54615b5ba14 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd6359b953f7950; op2val:0x3fe279b99c98bf69;
op3val:0x3fc9a54615b5ba14; valaddr_reg:x3; val_offset:1338*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1338*FLEN/8, x4, x1, x2)

inst_447:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x6359b953f7950 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x279b99c98bf69 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x9a54615b5ba14 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd6359b953f7950; op2val:0x3fe279b99c98bf69;
op3val:0x3fc9a54615b5ba14; valaddr_reg:x3; val_offset:1341*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1341*FLEN/8, x4, x1, x2)

inst_448:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x6359b953f7950 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x279b99c98bf69 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x9a54615b5ba14 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd6359b953f7950; op2val:0x3fe279b99c98bf69;
op3val:0x3fc9a54615b5ba14; valaddr_reg:x3; val_offset:1344*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1344*FLEN/8, x4, x1, x2)

inst_449:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x6359b953f7950 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x279b99c98bf69 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x9a54615b5ba14 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd6359b953f7950; op2val:0x3fe279b99c98bf69;
op3val:0x3fc9a54615b5ba14; valaddr_reg:x3; val_offset:1347*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1347*FLEN/8, x4, x1, x2)

inst_450:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x65716ef9d1c02 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x5421a51b61623 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xdae9a18b703e0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd65716ef9d1c02; op2val:0x4005421a51b61623;
op3val:0x3fedae9a18b703e0; valaddr_reg:x3; val_offset:1350*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1350*FLEN/8, x4, x1, x2)

inst_451:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x65716ef9d1c02 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x5421a51b61623 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xdae9a18b703e0 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd65716ef9d1c02; op2val:0x4005421a51b61623;
op3val:0x3fedae9a18b703e0; valaddr_reg:x3; val_offset:1353*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1353*FLEN/8, x4, x1, x2)

inst_452:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x65716ef9d1c02 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x5421a51b61623 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xdae9a18b703e0 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd65716ef9d1c02; op2val:0x4005421a51b61623;
op3val:0x3fedae9a18b703e0; valaddr_reg:x3; val_offset:1356*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1356*FLEN/8, x4, x1, x2)

inst_453:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x65716ef9d1c02 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x5421a51b61623 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xdae9a18b703e0 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd65716ef9d1c02; op2val:0x4005421a51b61623;
op3val:0x3fedae9a18b703e0; valaddr_reg:x3; val_offset:1359*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1359*FLEN/8, x4, x1, x2)

inst_454:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x65716ef9d1c02 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x5421a51b61623 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xdae9a18b703e0 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd65716ef9d1c02; op2val:0x4005421a51b61623;
op3val:0x3fedae9a18b703e0; valaddr_reg:x3; val_offset:1362*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1362*FLEN/8, x4, x1, x2)

inst_455:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x69570db605dbc and fs2 == 0 and fe2 == 0x3f9 and fm2 == 0x408f2e5bbad62 and fs3 == 0 and fe3 == 0x3f7 and fm3 == 0xc476ea334e200 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd69570db605dbc; op2val:0x3f9408f2e5bbad62;
op3val:0x3f7c476ea334e200; valaddr_reg:x3; val_offset:1365*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1365*FLEN/8, x4, x1, x2)

inst_456:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x69570db605dbc and fs2 == 0 and fe2 == 0x3f9 and fm2 == 0x408f2e5bbad62 and fs3 == 0 and fe3 == 0x3f7 and fm3 == 0xc476ea334e200 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd69570db605dbc; op2val:0x3f9408f2e5bbad62;
op3val:0x3f7c476ea334e200; valaddr_reg:x3; val_offset:1368*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1368*FLEN/8, x4, x1, x2)

inst_457:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x69570db605dbc and fs2 == 0 and fe2 == 0x3f9 and fm2 == 0x408f2e5bbad62 and fs3 == 0 and fe3 == 0x3f7 and fm3 == 0xc476ea334e200 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd69570db605dbc; op2val:0x3f9408f2e5bbad62;
op3val:0x3f7c476ea334e200; valaddr_reg:x3; val_offset:1371*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1371*FLEN/8, x4, x1, x2)

inst_458:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x69570db605dbc and fs2 == 0 and fe2 == 0x3f9 and fm2 == 0x408f2e5bbad62 and fs3 == 0 and fe3 == 0x3f7 and fm3 == 0xc476ea334e200 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd69570db605dbc; op2val:0x3f9408f2e5bbad62;
op3val:0x3f7c476ea334e200; valaddr_reg:x3; val_offset:1374*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1374*FLEN/8, x4, x1, x2)

inst_459:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x69570db605dbc and fs2 == 0 and fe2 == 0x3f9 and fm2 == 0x408f2e5bbad62 and fs3 == 0 and fe3 == 0x3f7 and fm3 == 0xc476ea334e200 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd69570db605dbc; op2val:0x3f9408f2e5bbad62;
op3val:0x3f7c476ea334e200; valaddr_reg:x3; val_offset:1377*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1377*FLEN/8, x4, x1, x2)

inst_460:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x6dcf8ae69e6de and fs2 == 0 and fe2 == 0x400 and fm2 == 0x4a8c04952745a and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xd8559d199e6dd and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd6dcf8ae69e6de; op2val:0x4004a8c04952745a;
op3val:0x3fed8559d199e6dd; valaddr_reg:x3; val_offset:1380*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1380*FLEN/8, x4, x1, x2)

inst_461:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x6dcf8ae69e6de and fs2 == 0 and fe2 == 0x400 and fm2 == 0x4a8c04952745a and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xd8559d199e6dd and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd6dcf8ae69e6de; op2val:0x4004a8c04952745a;
op3val:0x3fed8559d199e6dd; valaddr_reg:x3; val_offset:1383*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1383*FLEN/8, x4, x1, x2)

inst_462:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x6dcf8ae69e6de and fs2 == 0 and fe2 == 0x400 and fm2 == 0x4a8c04952745a and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xd8559d199e6dd and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd6dcf8ae69e6de; op2val:0x4004a8c04952745a;
op3val:0x3fed8559d199e6dd; valaddr_reg:x3; val_offset:1386*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1386*FLEN/8, x4, x1, x2)

inst_463:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x6dcf8ae69e6de and fs2 == 0 and fe2 == 0x400 and fm2 == 0x4a8c04952745a and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xd8559d199e6dd and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd6dcf8ae69e6de; op2val:0x4004a8c04952745a;
op3val:0x3fed8559d199e6dd; valaddr_reg:x3; val_offset:1389*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1389*FLEN/8, x4, x1, x2)

inst_464:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x6dcf8ae69e6de and fs2 == 0 and fe2 == 0x400 and fm2 == 0x4a8c04952745a and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xd8559d199e6dd and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd6dcf8ae69e6de; op2val:0x4004a8c04952745a;
op3val:0x3fed8559d199e6dd; valaddr_reg:x3; val_offset:1392*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1392*FLEN/8, x4, x1, x2)

inst_465:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x71c0aae7f3d7a and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xbcf3c03be4fa7 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x41551bf9c3b29 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd71c0aae7f3d7a; op2val:0x3ffbcf3c03be4fa7;
op3val:0x3fe41551bf9c3b29; valaddr_reg:x3; val_offset:1395*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1395*FLEN/8, x4, x1, x2)

inst_466:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x71c0aae7f3d7a and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xbcf3c03be4fa7 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x41551bf9c3b29 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd71c0aae7f3d7a; op2val:0x3ffbcf3c03be4fa7;
op3val:0x3fe41551bf9c3b29; valaddr_reg:x3; val_offset:1398*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1398*FLEN/8, x4, x1, x2)

inst_467:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x71c0aae7f3d7a and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xbcf3c03be4fa7 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x41551bf9c3b29 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd71c0aae7f3d7a; op2val:0x3ffbcf3c03be4fa7;
op3val:0x3fe41551bf9c3b29; valaddr_reg:x3; val_offset:1401*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1401*FLEN/8, x4, x1, x2)

inst_468:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x71c0aae7f3d7a and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xbcf3c03be4fa7 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x41551bf9c3b29 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd71c0aae7f3d7a; op2val:0x3ffbcf3c03be4fa7;
op3val:0x3fe41551bf9c3b29; valaddr_reg:x3; val_offset:1404*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1404*FLEN/8, x4, x1, x2)

inst_469:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x71c0aae7f3d7a and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xbcf3c03be4fa7 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x41551bf9c3b29 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd71c0aae7f3d7a; op2val:0x3ffbcf3c03be4fa7;
op3val:0x3fe41551bf9c3b29; valaddr_reg:x3; val_offset:1407*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1407*FLEN/8, x4, x1, x2)

inst_470:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x76557d74a9df4 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x15d6391f90e25 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x9643bfbd4c78c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd76557d74a9df4; op2val:0x3fe15d6391f90e25;
op3val:0x3fc9643bfbd4c78c; valaddr_reg:x3; val_offset:1410*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1410*FLEN/8, x4, x1, x2)

inst_471:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x76557d74a9df4 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x15d6391f90e25 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x9643bfbd4c78c and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd76557d74a9df4; op2val:0x3fe15d6391f90e25;
op3val:0x3fc9643bfbd4c78c; valaddr_reg:x3; val_offset:1413*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1413*FLEN/8, x4, x1, x2)

inst_472:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x76557d74a9df4 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x15d6391f90e25 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x9643bfbd4c78c and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd76557d74a9df4; op2val:0x3fe15d6391f90e25;
op3val:0x3fc9643bfbd4c78c; valaddr_reg:x3; val_offset:1416*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1416*FLEN/8, x4, x1, x2)

inst_473:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x76557d74a9df4 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x15d6391f90e25 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x9643bfbd4c78c and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd76557d74a9df4; op2val:0x3fe15d6391f90e25;
op3val:0x3fc9643bfbd4c78c; valaddr_reg:x3; val_offset:1419*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1419*FLEN/8, x4, x1, x2)

inst_474:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x76557d74a9df4 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x15d6391f90e25 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x9643bfbd4c78c and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd76557d74a9df4; op2val:0x3fe15d6391f90e25;
op3val:0x3fc9643bfbd4c78c; valaddr_reg:x3; val_offset:1422*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1422*FLEN/8, x4, x1, x2)

inst_475:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x79f6734ccb6f6 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0xe05f9e647ece9 and fs3 == 0 and fe3 == 0x3fb and fm3 == 0x629da23fa0cb8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd79f6734ccb6f6; op2val:0x3fce05f9e647ece9;
op3val:0x3fb629da23fa0cb8; valaddr_reg:x3; val_offset:1425*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1425*FLEN/8, x4, x1, x2)

inst_476:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x79f6734ccb6f6 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0xe05f9e647ece9 and fs3 == 0 and fe3 == 0x3fb and fm3 == 0x629da23fa0cb8 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd79f6734ccb6f6; op2val:0x3fce05f9e647ece9;
op3val:0x3fb629da23fa0cb8; valaddr_reg:x3; val_offset:1428*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1428*FLEN/8, x4, x1, x2)

inst_477:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x79f6734ccb6f6 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0xe05f9e647ece9 and fs3 == 0 and fe3 == 0x3fb and fm3 == 0x629da23fa0cb8 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd79f6734ccb6f6; op2val:0x3fce05f9e647ece9;
op3val:0x3fb629da23fa0cb8; valaddr_reg:x3; val_offset:1431*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1431*FLEN/8, x4, x1, x2)

inst_478:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x79f6734ccb6f6 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0xe05f9e647ece9 and fs3 == 0 and fe3 == 0x3fb and fm3 == 0x629da23fa0cb8 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd79f6734ccb6f6; op2val:0x3fce05f9e647ece9;
op3val:0x3fb629da23fa0cb8; valaddr_reg:x3; val_offset:1434*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1434*FLEN/8, x4, x1, x2)

inst_479:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x79f6734ccb6f6 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0xe05f9e647ece9 and fs3 == 0 and fe3 == 0x3fb and fm3 == 0x629da23fa0cb8 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd79f6734ccb6f6; op2val:0x3fce05f9e647ece9;
op3val:0x3fb629da23fa0cb8; valaddr_reg:x3; val_offset:1437*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1437*FLEN/8, x4, x1, x2)

inst_480:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x7d822535605ba and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x1f71aa2a4024b and fs3 == 0 and fe3 == 0x3fa and fm3 == 0xac5e4bc0a73d0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd7d822535605ba; op2val:0x3fc1f71aa2a4024b;
op3val:0x3faac5e4bc0a73d0; valaddr_reg:x3; val_offset:1440*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1440*FLEN/8, x4, x1, x2)

inst_481:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x7d822535605ba and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x1f71aa2a4024b and fs3 == 0 and fe3 == 0x3fa and fm3 == 0xac5e4bc0a73d0 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd7d822535605ba; op2val:0x3fc1f71aa2a4024b;
op3val:0x3faac5e4bc0a73d0; valaddr_reg:x3; val_offset:1443*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1443*FLEN/8, x4, x1, x2)

inst_482:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x7d822535605ba and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x1f71aa2a4024b and fs3 == 0 and fe3 == 0x3fa and fm3 == 0xac5e4bc0a73d0 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd7d822535605ba; op2val:0x3fc1f71aa2a4024b;
op3val:0x3faac5e4bc0a73d0; valaddr_reg:x3; val_offset:1446*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1446*FLEN/8, x4, x1, x2)

inst_483:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x7d822535605ba and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x1f71aa2a4024b and fs3 == 0 and fe3 == 0x3fa and fm3 == 0xac5e4bc0a73d0 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd7d822535605ba; op2val:0x3fc1f71aa2a4024b;
op3val:0x3faac5e4bc0a73d0; valaddr_reg:x3; val_offset:1449*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1449*FLEN/8, x4, x1, x2)

inst_484:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x7d822535605ba and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x1f71aa2a4024b and fs3 == 0 and fe3 == 0x3fa and fm3 == 0xac5e4bc0a73d0 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd7d822535605ba; op2val:0x3fc1f71aa2a4024b;
op3val:0x3faac5e4bc0a73d0; valaddr_reg:x3; val_offset:1452*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1452*FLEN/8, x4, x1, x2)

inst_485:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x7ebe7dbbf9a60 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xb56e345a2832a and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x46fff860b244c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd7ebe7dbbf9a60; op2val:0x3feb56e345a2832a;
op3val:0x3fd46fff860b244c; valaddr_reg:x3; val_offset:1455*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1455*FLEN/8, x4, x1, x2)

inst_486:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x7ebe7dbbf9a60 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xb56e345a2832a and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x46fff860b244c and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd7ebe7dbbf9a60; op2val:0x3feb56e345a2832a;
op3val:0x3fd46fff860b244c; valaddr_reg:x3; val_offset:1458*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1458*FLEN/8, x4, x1, x2)

inst_487:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x7ebe7dbbf9a60 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xb56e345a2832a and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x46fff860b244c and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd7ebe7dbbf9a60; op2val:0x3feb56e345a2832a;
op3val:0x3fd46fff860b244c; valaddr_reg:x3; val_offset:1461*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1461*FLEN/8, x4, x1, x2)

inst_488:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x7ebe7dbbf9a60 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xb56e345a2832a and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x46fff860b244c and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd7ebe7dbbf9a60; op2val:0x3feb56e345a2832a;
op3val:0x3fd46fff860b244c; valaddr_reg:x3; val_offset:1464*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1464*FLEN/8, x4, x1, x2)

inst_489:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x7ebe7dbbf9a60 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xb56e345a2832a and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x46fff860b244c and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd7ebe7dbbf9a60; op2val:0x3feb56e345a2832a;
op3val:0x3fd46fff860b244c; valaddr_reg:x3; val_offset:1467*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1467*FLEN/8, x4, x1, x2)

inst_490:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x80f4bd01e35c8 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x0f8c74480302e and fs3 == 0 and fe3 == 0x3fb and fm3 == 0x985648c78bb88 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd80f4bd01e35c8; op2val:0x3fd0f8c74480302e;
op3val:0x3fb985648c78bb88; valaddr_reg:x3; val_offset:1470*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1470*FLEN/8, x4, x1, x2)

inst_491:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x80f4bd01e35c8 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x0f8c74480302e and fs3 == 0 and fe3 == 0x3fb and fm3 == 0x985648c78bb88 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd80f4bd01e35c8; op2val:0x3fd0f8c74480302e;
op3val:0x3fb985648c78bb88; valaddr_reg:x3; val_offset:1473*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1473*FLEN/8, x4, x1, x2)

inst_492:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x80f4bd01e35c8 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x0f8c74480302e and fs3 == 0 and fe3 == 0x3fb and fm3 == 0x985648c78bb88 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd80f4bd01e35c8; op2val:0x3fd0f8c74480302e;
op3val:0x3fb985648c78bb88; valaddr_reg:x3; val_offset:1476*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1476*FLEN/8, x4, x1, x2)

inst_493:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x80f4bd01e35c8 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x0f8c74480302e and fs3 == 0 and fe3 == 0x3fb and fm3 == 0x985648c78bb88 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd80f4bd01e35c8; op2val:0x3fd0f8c74480302e;
op3val:0x3fb985648c78bb88; valaddr_reg:x3; val_offset:1479*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1479*FLEN/8, x4, x1, x2)

inst_494:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x80f4bd01e35c8 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x0f8c74480302e and fs3 == 0 and fe3 == 0x3fb and fm3 == 0x985648c78bb88 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd80f4bd01e35c8; op2val:0x3fd0f8c74480302e;
op3val:0x3fb985648c78bb88; valaddr_reg:x3; val_offset:1482*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1482*FLEN/8, x4, x1, x2)

inst_495:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x811942da2e8f6 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x4c03293b52579 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xf37184050555a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd811942da2e8f6; op2val:0x3ff4c03293b52579;
op3val:0x3fdf37184050555a; valaddr_reg:x3; val_offset:1485*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1485*FLEN/8, x4, x1, x2)

inst_496:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x811942da2e8f6 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x4c03293b52579 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xf37184050555a and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd811942da2e8f6; op2val:0x3ff4c03293b52579;
op3val:0x3fdf37184050555a; valaddr_reg:x3; val_offset:1488*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1488*FLEN/8, x4, x1, x2)

inst_497:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x811942da2e8f6 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x4c03293b52579 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xf37184050555a and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd811942da2e8f6; op2val:0x3ff4c03293b52579;
op3val:0x3fdf37184050555a; valaddr_reg:x3; val_offset:1491*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1491*FLEN/8, x4, x1, x2)

inst_498:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x811942da2e8f6 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x4c03293b52579 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xf37184050555a and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd811942da2e8f6; op2val:0x3ff4c03293b52579;
op3val:0x3fdf37184050555a; valaddr_reg:x3; val_offset:1494*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1494*FLEN/8, x4, x1, x2)

inst_499:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x811942da2e8f6 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x4c03293b52579 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xf37184050555a and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd811942da2e8f6; op2val:0x3ff4c03293b52579;
op3val:0x3fdf37184050555a; valaddr_reg:x3; val_offset:1497*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1497*FLEN/8, x4, x1, x2)

inst_500:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x8b317fcfd7b76 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x1a657c1039236 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xb3f130d765d56 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd8b317fcfd7b76; op2val:0x4001a657c1039236;
op3val:0x3feb3f130d765d56; valaddr_reg:x3; val_offset:1500*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1500*FLEN/8, x4, x1, x2)

inst_501:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x8b317fcfd7b76 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x1a657c1039236 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xb3f130d765d56 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd8b317fcfd7b76; op2val:0x4001a657c1039236;
op3val:0x3feb3f130d765d56; valaddr_reg:x3; val_offset:1503*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1503*FLEN/8, x4, x1, x2)

inst_502:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x8b317fcfd7b76 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x1a657c1039236 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xb3f130d765d56 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd8b317fcfd7b76; op2val:0x4001a657c1039236;
op3val:0x3feb3f130d765d56; valaddr_reg:x3; val_offset:1506*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1506*FLEN/8, x4, x1, x2)

inst_503:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x8b317fcfd7b76 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x1a657c1039236 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xb3f130d765d56 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd8b317fcfd7b76; op2val:0x4001a657c1039236;
op3val:0x3feb3f130d765d56; valaddr_reg:x3; val_offset:1509*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1509*FLEN/8, x4, x1, x2)

inst_504:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x8b317fcfd7b76 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x1a657c1039236 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xb3f130d765d56 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd8b317fcfd7b76; op2val:0x4001a657c1039236;
op3val:0x3feb3f130d765d56; valaddr_reg:x3; val_offset:1512*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1512*FLEN/8, x4, x1, x2)

inst_505:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x8cc57d8368ee8 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x46ad6ca7b6828 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xfa5047b26a14a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd8cc57d8368ee8; op2val:0x3ff46ad6ca7b6828;
op3val:0x3fdfa5047b26a14a; valaddr_reg:x3; val_offset:1515*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1515*FLEN/8, x4, x1, x2)

inst_506:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x8cc57d8368ee8 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x46ad6ca7b6828 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xfa5047b26a14a and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd8cc57d8368ee8; op2val:0x3ff46ad6ca7b6828;
op3val:0x3fdfa5047b26a14a; valaddr_reg:x3; val_offset:1518*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1518*FLEN/8, x4, x1, x2)

inst_507:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x8cc57d8368ee8 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x46ad6ca7b6828 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xfa5047b26a14a and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd8cc57d8368ee8; op2val:0x3ff46ad6ca7b6828;
op3val:0x3fdfa5047b26a14a; valaddr_reg:x3; val_offset:1521*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1521*FLEN/8, x4, x1, x2)

inst_508:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x8cc57d8368ee8 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x46ad6ca7b6828 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xfa5047b26a14a and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd8cc57d8368ee8; op2val:0x3ff46ad6ca7b6828;
op3val:0x3fdfa5047b26a14a; valaddr_reg:x3; val_offset:1524*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1524*FLEN/8, x4, x1, x2)

inst_509:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x8cc57d8368ee8 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x46ad6ca7b6828 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xfa5047b26a14a and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd8cc57d8368ee8; op2val:0x3ff46ad6ca7b6828;
op3val:0x3fdfa5047b26a14a; valaddr_reg:x3; val_offset:1527*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1527*FLEN/8, x4, x1, x2)

inst_510:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xa4bccee8a8fd2 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xcb5a10bb898bd and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x7979466df4d8e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fda4bccee8a8fd2; op2val:0x3ffcb5a10bb898bd;
op3val:0x3fe7979466df4d8e; valaddr_reg:x3; val_offset:1530*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1530*FLEN/8, x4, x1, x2)

inst_511:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xa4bccee8a8fd2 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xcb5a10bb898bd and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x7979466df4d8e and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fda4bccee8a8fd2; op2val:0x3ffcb5a10bb898bd;
op3val:0x3fe7979466df4d8e; valaddr_reg:x3; val_offset:1533*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1533*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_5)

inst_512:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xa4bccee8a8fd2 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xcb5a10bb898bd and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x7979466df4d8e and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fda4bccee8a8fd2; op2val:0x3ffcb5a10bb898bd;
op3val:0x3fe7979466df4d8e; valaddr_reg:x3; val_offset:1536*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1536*FLEN/8, x4, x1, x2)

inst_513:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xa4bccee8a8fd2 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xcb5a10bb898bd and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x7979466df4d8e and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fda4bccee8a8fd2; op2val:0x3ffcb5a10bb898bd;
op3val:0x3fe7979466df4d8e; valaddr_reg:x3; val_offset:1539*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1539*FLEN/8, x4, x1, x2)

inst_514:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xa4bccee8a8fd2 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xcb5a10bb898bd and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x7979466df4d8e and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fda4bccee8a8fd2; op2val:0x3ffcb5a10bb898bd;
op3val:0x3fe7979466df4d8e; valaddr_reg:x3; val_offset:1542*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1542*FLEN/8, x4, x1, x2)

inst_515:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xa85cdb056c252 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x22d61fe099365 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xe21c2292c8c94 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fda85cdb056c252; op2val:0x3ff22d61fe099365;
op3val:0x3fde21c2292c8c94; valaddr_reg:x3; val_offset:1545*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1545*FLEN/8, x4, x1, x2)

inst_516:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xa85cdb056c252 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x22d61fe099365 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xe21c2292c8c94 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fda85cdb056c252; op2val:0x3ff22d61fe099365;
op3val:0x3fde21c2292c8c94; valaddr_reg:x3; val_offset:1548*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1548*FLEN/8, x4, x1, x2)

inst_517:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xa85cdb056c252 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x22d61fe099365 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xe21c2292c8c94 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fda85cdb056c252; op2val:0x3ff22d61fe099365;
op3val:0x3fde21c2292c8c94; valaddr_reg:x3; val_offset:1551*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1551*FLEN/8, x4, x1, x2)

inst_518:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xa85cdb056c252 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x22d61fe099365 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xe21c2292c8c94 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fda85cdb056c252; op2val:0x3ff22d61fe099365;
op3val:0x3fde21c2292c8c94; valaddr_reg:x3; val_offset:1554*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1554*FLEN/8, x4, x1, x2)

inst_519:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xa85cdb056c252 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x22d61fe099365 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xe21c2292c8c94 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fda85cdb056c252; op2val:0x3ff22d61fe099365;
op3val:0x3fde21c2292c8c94; valaddr_reg:x3; val_offset:1557*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1557*FLEN/8, x4, x1, x2)

inst_520:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xa9ebc719dc362 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x07d7bdf108b7a and fs3 == 0 and fe3 == 0x3fb and fm3 == 0xb6f82a93df690 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fda9ebc719dc362; op2val:0x3fd07d7bdf108b7a;
op3val:0x3fbb6f82a93df690; valaddr_reg:x3; val_offset:1560*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1560*FLEN/8, x4, x1, x2)

inst_521:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xa9ebc719dc362 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x07d7bdf108b7a and fs3 == 0 and fe3 == 0x3fb and fm3 == 0xb6f82a93df690 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fda9ebc719dc362; op2val:0x3fd07d7bdf108b7a;
op3val:0x3fbb6f82a93df690; valaddr_reg:x3; val_offset:1563*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1563*FLEN/8, x4, x1, x2)

inst_522:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xa9ebc719dc362 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x07d7bdf108b7a and fs3 == 0 and fe3 == 0x3fb and fm3 == 0xb6f82a93df690 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fda9ebc719dc362; op2val:0x3fd07d7bdf108b7a;
op3val:0x3fbb6f82a93df690; valaddr_reg:x3; val_offset:1566*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1566*FLEN/8, x4, x1, x2)

inst_523:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xa9ebc719dc362 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x07d7bdf108b7a and fs3 == 0 and fe3 == 0x3fb and fm3 == 0xb6f82a93df690 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fda9ebc719dc362; op2val:0x3fd07d7bdf108b7a;
op3val:0x3fbb6f82a93df690; valaddr_reg:x3; val_offset:1569*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1569*FLEN/8, x4, x1, x2)

inst_524:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xa9ebc719dc362 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x07d7bdf108b7a and fs3 == 0 and fe3 == 0x3fb and fm3 == 0xb6f82a93df690 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fda9ebc719dc362; op2val:0x3fd07d7bdf108b7a;
op3val:0x3fbb6f82a93df690; valaddr_reg:x3; val_offset:1572*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1572*FLEN/8, x4, x1, x2)

inst_525:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xaaa69e97ac8a0 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0xd66afd1339591 and fs3 == 0 and fe3 == 0x3fb and fm3 == 0x88001af76b200 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdaaa69e97ac8a0; op2val:0x3fcd66afd1339591;
op3val:0x3fb88001af76b200; valaddr_reg:x3; val_offset:1575*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1575*FLEN/8, x4, x1, x2)

inst_526:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xaaa69e97ac8a0 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0xd66afd1339591 and fs3 == 0 and fe3 == 0x3fb and fm3 == 0x88001af76b200 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdaaa69e97ac8a0; op2val:0x3fcd66afd1339591;
op3val:0x3fb88001af76b200; valaddr_reg:x3; val_offset:1578*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1578*FLEN/8, x4, x1, x2)

inst_527:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xaaa69e97ac8a0 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0xd66afd1339591 and fs3 == 0 and fe3 == 0x3fb and fm3 == 0x88001af76b200 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdaaa69e97ac8a0; op2val:0x3fcd66afd1339591;
op3val:0x3fb88001af76b200; valaddr_reg:x3; val_offset:1581*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1581*FLEN/8, x4, x1, x2)

inst_528:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xaaa69e97ac8a0 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0xd66afd1339591 and fs3 == 0 and fe3 == 0x3fb and fm3 == 0x88001af76b200 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdaaa69e97ac8a0; op2val:0x3fcd66afd1339591;
op3val:0x3fb88001af76b200; valaddr_reg:x3; val_offset:1584*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1584*FLEN/8, x4, x1, x2)

inst_529:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xaaa69e97ac8a0 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0xd66afd1339591 and fs3 == 0 and fe3 == 0x3fb and fm3 == 0x88001af76b200 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdaaa69e97ac8a0; op2val:0x3fcd66afd1339591;
op3val:0x3fb88001af76b200; valaddr_reg:x3; val_offset:1587*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1587*FLEN/8, x4, x1, x2)

inst_530:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xae2ff399ff71a and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x4b5f84870fbe0 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x166c413b99635 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdae2ff399ff71a; op2val:0x3ff4b5f84870fbe0;
op3val:0x3fe166c413b99635; valaddr_reg:x3; val_offset:1590*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1590*FLEN/8, x4, x1, x2)

inst_531:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xae2ff399ff71a and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x4b5f84870fbe0 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x166c413b99635 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdae2ff399ff71a; op2val:0x3ff4b5f84870fbe0;
op3val:0x3fe166c413b99635; valaddr_reg:x3; val_offset:1593*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1593*FLEN/8, x4, x1, x2)

inst_532:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xae2ff399ff71a and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x4b5f84870fbe0 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x166c413b99635 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdae2ff399ff71a; op2val:0x3ff4b5f84870fbe0;
op3val:0x3fe166c413b99635; valaddr_reg:x3; val_offset:1596*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1596*FLEN/8, x4, x1, x2)

inst_533:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xae2ff399ff71a and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x4b5f84870fbe0 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x166c413b99635 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdae2ff399ff71a; op2val:0x3ff4b5f84870fbe0;
op3val:0x3fe166c413b99635; valaddr_reg:x3; val_offset:1599*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1599*FLEN/8, x4, x1, x2)

inst_534:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xae2ff399ff71a and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x4b5f84870fbe0 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x166c413b99635 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdae2ff399ff71a; op2val:0x3ff4b5f84870fbe0;
op3val:0x3fe166c413b99635; valaddr_reg:x3; val_offset:1602*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1602*FLEN/8, x4, x1, x2)

inst_535:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xb10becb50cfaa and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x6d37eb3c20d9d and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x34e64bfcd3876 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdb10becb50cfaa; op2val:0x3ff6d37eb3c20d9d;
op3val:0x3fe34e64bfcd3876; valaddr_reg:x3; val_offset:1605*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1605*FLEN/8, x4, x1, x2)

inst_536:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xb10becb50cfaa and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x6d37eb3c20d9d and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x34e64bfcd3876 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdb10becb50cfaa; op2val:0x3ff6d37eb3c20d9d;
op3val:0x3fe34e64bfcd3876; valaddr_reg:x3; val_offset:1608*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1608*FLEN/8, x4, x1, x2)

inst_537:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xb10becb50cfaa and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x6d37eb3c20d9d and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x34e64bfcd3876 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdb10becb50cfaa; op2val:0x3ff6d37eb3c20d9d;
op3val:0x3fe34e64bfcd3876; valaddr_reg:x3; val_offset:1611*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1611*FLEN/8, x4, x1, x2)

inst_538:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xb10becb50cfaa and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x6d37eb3c20d9d and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x34e64bfcd3876 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdb10becb50cfaa; op2val:0x3ff6d37eb3c20d9d;
op3val:0x3fe34e64bfcd3876; valaddr_reg:x3; val_offset:1614*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1614*FLEN/8, x4, x1, x2)

inst_539:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xb10becb50cfaa and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x6d37eb3c20d9d and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x34e64bfcd3876 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdb10becb50cfaa; op2val:0x3ff6d37eb3c20d9d;
op3val:0x3fe34e64bfcd3876; valaddr_reg:x3; val_offset:1617*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1617*FLEN/8, x4, x1, x2)

inst_540:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xb7b5f6c0b08d8 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x6534daadc7c21 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x32c5c4d623466 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdb7b5f6c0b08d8; op2val:0x3fe6534daadc7c21;
op3val:0x3fd32c5c4d623466; valaddr_reg:x3; val_offset:1620*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1620*FLEN/8, x4, x1, x2)

inst_541:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xb7b5f6c0b08d8 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x6534daadc7c21 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x32c5c4d623466 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdb7b5f6c0b08d8; op2val:0x3fe6534daadc7c21;
op3val:0x3fd32c5c4d623466; valaddr_reg:x3; val_offset:1623*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1623*FLEN/8, x4, x1, x2)

inst_542:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xb7b5f6c0b08d8 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x6534daadc7c21 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x32c5c4d623466 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdb7b5f6c0b08d8; op2val:0x3fe6534daadc7c21;
op3val:0x3fd32c5c4d623466; valaddr_reg:x3; val_offset:1626*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1626*FLEN/8, x4, x1, x2)

inst_543:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xb7b5f6c0b08d8 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x6534daadc7c21 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x32c5c4d623466 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdb7b5f6c0b08d8; op2val:0x3fe6534daadc7c21;
op3val:0x3fd32c5c4d623466; valaddr_reg:x3; val_offset:1629*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1629*FLEN/8, x4, x1, x2)

inst_544:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xb7b5f6c0b08d8 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x6534daadc7c21 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x32c5c4d623466 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdb7b5f6c0b08d8; op2val:0x3fe6534daadc7c21;
op3val:0x3fd32c5c4d623466; valaddr_reg:x3; val_offset:1632*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1632*FLEN/8, x4, x1, x2)

inst_545:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xba9cad6eeb67c and fs2 == 0 and fe2 == 0x400 and fm2 == 0x2470bddc65f77 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xf99da2a12004f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdba9cad6eeb67c; op2val:0x4002470bddc65f77;
op3val:0x3fef99da2a12004f; valaddr_reg:x3; val_offset:1635*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1635*FLEN/8, x4, x1, x2)

inst_546:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xba9cad6eeb67c and fs2 == 0 and fe2 == 0x400 and fm2 == 0x2470bddc65f77 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xf99da2a12004f and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdba9cad6eeb67c; op2val:0x4002470bddc65f77;
op3val:0x3fef99da2a12004f; valaddr_reg:x3; val_offset:1638*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1638*FLEN/8, x4, x1, x2)

inst_547:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xba9cad6eeb67c and fs2 == 0 and fe2 == 0x400 and fm2 == 0x2470bddc65f77 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xf99da2a12004f and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdba9cad6eeb67c; op2val:0x4002470bddc65f77;
op3val:0x3fef99da2a12004f; valaddr_reg:x3; val_offset:1641*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1641*FLEN/8, x4, x1, x2)

inst_548:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xba9cad6eeb67c and fs2 == 0 and fe2 == 0x400 and fm2 == 0x2470bddc65f77 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xf99da2a12004f and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdba9cad6eeb67c; op2val:0x4002470bddc65f77;
op3val:0x3fef99da2a12004f; valaddr_reg:x3; val_offset:1644*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1644*FLEN/8, x4, x1, x2)

inst_549:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xba9cad6eeb67c and fs2 == 0 and fe2 == 0x400 and fm2 == 0x2470bddc65f77 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xf99da2a12004f and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdba9cad6eeb67c; op2val:0x4002470bddc65f77;
op3val:0x3fef99da2a12004f; valaddr_reg:x3; val_offset:1647*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1647*FLEN/8, x4, x1, x2)

inst_550:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xc0ca02fc6ee52 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x1861fa95ced4d and fs3 == 0 and fe3 == 0x3fc and fm3 == 0xeb88b71b22068 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdc0ca02fc6ee52; op2val:0x3fe1861fa95ced4d;
op3val:0x3fceb88b71b22068; valaddr_reg:x3; val_offset:1650*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1650*FLEN/8, x4, x1, x2)

inst_551:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xc0ca02fc6ee52 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x1861fa95ced4d and fs3 == 0 and fe3 == 0x3fc and fm3 == 0xeb88b71b22068 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdc0ca02fc6ee52; op2val:0x3fe1861fa95ced4d;
op3val:0x3fceb88b71b22068; valaddr_reg:x3; val_offset:1653*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1653*FLEN/8, x4, x1, x2)

inst_552:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xc0ca02fc6ee52 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x1861fa95ced4d and fs3 == 0 and fe3 == 0x3fc and fm3 == 0xeb88b71b22068 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdc0ca02fc6ee52; op2val:0x3fe1861fa95ced4d;
op3val:0x3fceb88b71b22068; valaddr_reg:x3; val_offset:1656*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1656*FLEN/8, x4, x1, x2)

inst_553:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xc0ca02fc6ee52 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x1861fa95ced4d and fs3 == 0 and fe3 == 0x3fc and fm3 == 0xeb88b71b22068 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdc0ca02fc6ee52; op2val:0x3fe1861fa95ced4d;
op3val:0x3fceb88b71b22068; valaddr_reg:x3; val_offset:1659*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1659*FLEN/8, x4, x1, x2)

inst_554:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xc0ca02fc6ee52 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x1861fa95ced4d and fs3 == 0 and fe3 == 0x3fc and fm3 == 0xeb88b71b22068 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdc0ca02fc6ee52; op2val:0x3fe1861fa95ced4d;
op3val:0x3fceb88b71b22068; valaddr_reg:x3; val_offset:1662*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1662*FLEN/8, x4, x1, x2)

inst_555:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xc30ed00dba34e and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x07c652db859b4 and fs3 == 0 and fe3 == 0x3fa and fm3 == 0xd0c1a7308ca30 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdc30ed00dba34e; op2val:0x3fc07c652db859b4;
op3val:0x3fad0c1a7308ca30; valaddr_reg:x3; val_offset:1665*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1665*FLEN/8, x4, x1, x2)

inst_556:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xc30ed00dba34e and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x07c652db859b4 and fs3 == 0 and fe3 == 0x3fa and fm3 == 0xd0c1a7308ca30 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdc30ed00dba34e; op2val:0x3fc07c652db859b4;
op3val:0x3fad0c1a7308ca30; valaddr_reg:x3; val_offset:1668*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1668*FLEN/8, x4, x1, x2)

inst_557:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xc30ed00dba34e and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x07c652db859b4 and fs3 == 0 and fe3 == 0x3fa and fm3 == 0xd0c1a7308ca30 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdc30ed00dba34e; op2val:0x3fc07c652db859b4;
op3val:0x3fad0c1a7308ca30; valaddr_reg:x3; val_offset:1671*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1671*FLEN/8, x4, x1, x2)

inst_558:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xc30ed00dba34e and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x07c652db859b4 and fs3 == 0 and fe3 == 0x3fa and fm3 == 0xd0c1a7308ca30 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdc30ed00dba34e; op2val:0x3fc07c652db859b4;
op3val:0x3fad0c1a7308ca30; valaddr_reg:x3; val_offset:1674*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1674*FLEN/8, x4, x1, x2)

inst_559:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xc30ed00dba34e and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x07c652db859b4 and fs3 == 0 and fe3 == 0x3fa and fm3 == 0xd0c1a7308ca30 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdc30ed00dba34e; op2val:0x3fc07c652db859b4;
op3val:0x3fad0c1a7308ca30; valaddr_reg:x3; val_offset:1677*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1677*FLEN/8, x4, x1, x2)

inst_560:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xc4116ef98007e and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xafb2e1f620cf1 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x7d2a9e7d96a10 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdc4116ef98007e; op2val:0x3feafb2e1f620cf1;
op3val:0x3fd7d2a9e7d96a10; valaddr_reg:x3; val_offset:1680*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1680*FLEN/8, x4, x1, x2)

inst_561:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xc4116ef98007e and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xafb2e1f620cf1 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x7d2a9e7d96a10 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdc4116ef98007e; op2val:0x3feafb2e1f620cf1;
op3val:0x3fd7d2a9e7d96a10; valaddr_reg:x3; val_offset:1683*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1683*FLEN/8, x4, x1, x2)

inst_562:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xc4116ef98007e and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xafb2e1f620cf1 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x7d2a9e7d96a10 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdc4116ef98007e; op2val:0x3feafb2e1f620cf1;
op3val:0x3fd7d2a9e7d96a10; valaddr_reg:x3; val_offset:1686*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1686*FLEN/8, x4, x1, x2)

inst_563:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xc4116ef98007e and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xafb2e1f620cf1 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x7d2a9e7d96a10 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdc4116ef98007e; op2val:0x3feafb2e1f620cf1;
op3val:0x3fd7d2a9e7d96a10; valaddr_reg:x3; val_offset:1689*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1689*FLEN/8, x4, x1, x2)

inst_564:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xc4116ef98007e and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xafb2e1f620cf1 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x7d2a9e7d96a10 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdc4116ef98007e; op2val:0x3feafb2e1f620cf1;
op3val:0x3fd7d2a9e7d96a10; valaddr_reg:x3; val_offset:1692*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1692*FLEN/8, x4, x1, x2)

inst_565:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xc73a3ec23ddda and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xf0e8bbdd6256b and fs3 == 0 and fe3 == 0x3fc and fm3 == 0xb9cf5a3937f20 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdc73a3ec23ddda; op2val:0x3fdf0e8bbdd6256b;
op3val:0x3fcb9cf5a3937f20; valaddr_reg:x3; val_offset:1695*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1695*FLEN/8, x4, x1, x2)

inst_566:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xc73a3ec23ddda and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xf0e8bbdd6256b and fs3 == 0 and fe3 == 0x3fc and fm3 == 0xb9cf5a3937f20 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdc73a3ec23ddda; op2val:0x3fdf0e8bbdd6256b;
op3val:0x3fcb9cf5a3937f20; valaddr_reg:x3; val_offset:1698*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1698*FLEN/8, x4, x1, x2)

inst_567:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xc73a3ec23ddda and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xf0e8bbdd6256b and fs3 == 0 and fe3 == 0x3fc and fm3 == 0xb9cf5a3937f20 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdc73a3ec23ddda; op2val:0x3fdf0e8bbdd6256b;
op3val:0x3fcb9cf5a3937f20; valaddr_reg:x3; val_offset:1701*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1701*FLEN/8, x4, x1, x2)

inst_568:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xc73a3ec23ddda and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xf0e8bbdd6256b and fs3 == 0 and fe3 == 0x3fc and fm3 == 0xb9cf5a3937f20 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdc73a3ec23ddda; op2val:0x3fdf0e8bbdd6256b;
op3val:0x3fcb9cf5a3937f20; valaddr_reg:x3; val_offset:1704*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1704*FLEN/8, x4, x1, x2)

inst_569:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xc73a3ec23ddda and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xf0e8bbdd6256b and fs3 == 0 and fe3 == 0x3fc and fm3 == 0xb9cf5a3937f20 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdc73a3ec23ddda; op2val:0x3fdf0e8bbdd6256b;
op3val:0x3fcb9cf5a3937f20; valaddr_reg:x3; val_offset:1707*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1707*FLEN/8, x4, x1, x2)

inst_570:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xc8a70d454a46c and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x41354de16dc9d and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x1e7c4692ff916 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdc8a70d454a46c; op2val:0x3ff41354de16dc9d;
op3val:0x3fe1e7c4692ff916; valaddr_reg:x3; val_offset:1710*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1710*FLEN/8, x4, x1, x2)

inst_571:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xc8a70d454a46c and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x41354de16dc9d and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x1e7c4692ff916 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdc8a70d454a46c; op2val:0x3ff41354de16dc9d;
op3val:0x3fe1e7c4692ff916; valaddr_reg:x3; val_offset:1713*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1713*FLEN/8, x4, x1, x2)

inst_572:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xc8a70d454a46c and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x41354de16dc9d and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x1e7c4692ff916 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdc8a70d454a46c; op2val:0x3ff41354de16dc9d;
op3val:0x3fe1e7c4692ff916; valaddr_reg:x3; val_offset:1716*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1716*FLEN/8, x4, x1, x2)

inst_573:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xc8a70d454a46c and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x41354de16dc9d and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x1e7c4692ff916 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdc8a70d454a46c; op2val:0x3ff41354de16dc9d;
op3val:0x3fe1e7c4692ff916; valaddr_reg:x3; val_offset:1719*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1719*FLEN/8, x4, x1, x2)

inst_574:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xc8a70d454a46c and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x41354de16dc9d and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x1e7c4692ff916 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdc8a70d454a46c; op2val:0x3ff41354de16dc9d;
op3val:0x3fe1e7c4692ff916; valaddr_reg:x3; val_offset:1722*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1722*FLEN/8, x4, x1, x2)

inst_575:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xc9a98f4a86d46 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x500636fb865bd and fs3 == 0 and fe3 == 0x3fb and fm3 == 0x2c5cd42b4d310 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdc9a98f4a86d46; op2val:0x3fc500636fb865bd;
op3val:0x3fb2c5cd42b4d310; valaddr_reg:x3; val_offset:1725*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1725*FLEN/8, x4, x1, x2)

inst_576:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xc9a98f4a86d46 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x500636fb865bd and fs3 == 0 and fe3 == 0x3fb and fm3 == 0x2c5cd42b4d310 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdc9a98f4a86d46; op2val:0x3fc500636fb865bd;
op3val:0x3fb2c5cd42b4d310; valaddr_reg:x3; val_offset:1728*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1728*FLEN/8, x4, x1, x2)

inst_577:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xc9a98f4a86d46 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x500636fb865bd and fs3 == 0 and fe3 == 0x3fb and fm3 == 0x2c5cd42b4d310 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdc9a98f4a86d46; op2val:0x3fc500636fb865bd;
op3val:0x3fb2c5cd42b4d310; valaddr_reg:x3; val_offset:1731*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1731*FLEN/8, x4, x1, x2)

inst_578:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xc9a98f4a86d46 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x500636fb865bd and fs3 == 0 and fe3 == 0x3fb and fm3 == 0x2c5cd42b4d310 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdc9a98f4a86d46; op2val:0x3fc500636fb865bd;
op3val:0x3fb2c5cd42b4d310; valaddr_reg:x3; val_offset:1734*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1734*FLEN/8, x4, x1, x2)

inst_579:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xc9a98f4a86d46 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x500636fb865bd and fs3 == 0 and fe3 == 0x3fb and fm3 == 0x2c5cd42b4d310 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdc9a98f4a86d46; op2val:0x3fc500636fb865bd;
op3val:0x3fb2c5cd42b4d310; valaddr_reg:x3; val_offset:1737*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1737*FLEN/8, x4, x1, x2)

inst_580:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xcd5f9fdc6fc48 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x09096579b729c and fs3 == 0 and fe3 == 0x3fb and fm3 == 0xdda8ebb9e4d18 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdcd5f9fdc6fc48; op2val:0x3fd09096579b729c;
op3val:0x3fbdda8ebb9e4d18; valaddr_reg:x3; val_offset:1740*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1740*FLEN/8, x4, x1, x2)

inst_581:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xcd5f9fdc6fc48 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x09096579b729c and fs3 == 0 and fe3 == 0x3fb and fm3 == 0xdda8ebb9e4d18 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdcd5f9fdc6fc48; op2val:0x3fd09096579b729c;
op3val:0x3fbdda8ebb9e4d18; valaddr_reg:x3; val_offset:1743*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1743*FLEN/8, x4, x1, x2)

inst_582:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xcd5f9fdc6fc48 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x09096579b729c and fs3 == 0 and fe3 == 0x3fb and fm3 == 0xdda8ebb9e4d18 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdcd5f9fdc6fc48; op2val:0x3fd09096579b729c;
op3val:0x3fbdda8ebb9e4d18; valaddr_reg:x3; val_offset:1746*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1746*FLEN/8, x4, x1, x2)

inst_583:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xcd5f9fdc6fc48 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x09096579b729c and fs3 == 0 and fe3 == 0x3fb and fm3 == 0xdda8ebb9e4d18 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdcd5f9fdc6fc48; op2val:0x3fd09096579b729c;
op3val:0x3fbdda8ebb9e4d18; valaddr_reg:x3; val_offset:1749*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1749*FLEN/8, x4, x1, x2)

inst_584:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xcd5f9fdc6fc48 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x09096579b729c and fs3 == 0 and fe3 == 0x3fb and fm3 == 0xdda8ebb9e4d18 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdcd5f9fdc6fc48; op2val:0x3fd09096579b729c;
op3val:0x3fbdda8ebb9e4d18; valaddr_reg:x3; val_offset:1752*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1752*FLEN/8, x4, x1, x2)

inst_585:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xcf1c1324d98e0 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x09414340f789b and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xdfda1f9be163d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdcf1c1324d98e0; op2val:0x40009414340f789b;
op3val:0x3fedfda1f9be163d; valaddr_reg:x3; val_offset:1755*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1755*FLEN/8, x4, x1, x2)

inst_586:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xcf1c1324d98e0 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x09414340f789b and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xdfda1f9be163d and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdcf1c1324d98e0; op2val:0x40009414340f789b;
op3val:0x3fedfda1f9be163d; valaddr_reg:x3; val_offset:1758*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1758*FLEN/8, x4, x1, x2)

inst_587:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xcf1c1324d98e0 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x09414340f789b and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xdfda1f9be163d and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdcf1c1324d98e0; op2val:0x40009414340f789b;
op3val:0x3fedfda1f9be163d; valaddr_reg:x3; val_offset:1761*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1761*FLEN/8, x4, x1, x2)

inst_588:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xcf1c1324d98e0 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x09414340f789b and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xdfda1f9be163d and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdcf1c1324d98e0; op2val:0x40009414340f789b;
op3val:0x3fedfda1f9be163d; valaddr_reg:x3; val_offset:1764*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1764*FLEN/8, x4, x1, x2)

inst_589:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xcf1c1324d98e0 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x09414340f789b and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xdfda1f9be163d and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdcf1c1324d98e0; op2val:0x40009414340f789b;
op3val:0x3fedfda1f9be163d; valaddr_reg:x3; val_offset:1767*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1767*FLEN/8, x4, x1, x2)

inst_590:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xd3ca9b8afd456 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x109dba168c8c0 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xf2277c8f7a960 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdd3ca9b8afd456; op2val:0x400109dba168c8c0;
op3val:0x3fef2277c8f7a960; valaddr_reg:x3; val_offset:1770*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1770*FLEN/8, x4, x1, x2)

inst_591:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xd3ca9b8afd456 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x109dba168c8c0 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xf2277c8f7a960 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdd3ca9b8afd456; op2val:0x400109dba168c8c0;
op3val:0x3fef2277c8f7a960; valaddr_reg:x3; val_offset:1773*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1773*FLEN/8, x4, x1, x2)

inst_592:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xd3ca9b8afd456 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x109dba168c8c0 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xf2277c8f7a960 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdd3ca9b8afd456; op2val:0x400109dba168c8c0;
op3val:0x3fef2277c8f7a960; valaddr_reg:x3; val_offset:1776*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1776*FLEN/8, x4, x1, x2)

inst_593:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xd3ca9b8afd456 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x109dba168c8c0 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xf2277c8f7a960 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdd3ca9b8afd456; op2val:0x400109dba168c8c0;
op3val:0x3fef2277c8f7a960; valaddr_reg:x3; val_offset:1779*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1779*FLEN/8, x4, x1, x2)

inst_594:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xd3ca9b8afd456 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x109dba168c8c0 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xf2277c8f7a960 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdd3ca9b8afd456; op2val:0x400109dba168c8c0;
op3val:0x3fef2277c8f7a960; valaddr_reg:x3; val_offset:1782*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1782*FLEN/8, x4, x1, x2)

inst_595:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xdb41bf73f38c0 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x5de031eb83486 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x44c46c1ab399f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fddb41bf73f38c0; op2val:0x3ff5de031eb83486;
op3val:0x3fe44c46c1ab399f; valaddr_reg:x3; val_offset:1785*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1785*FLEN/8, x4, x1, x2)

inst_596:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xdb41bf73f38c0 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x5de031eb83486 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x44c46c1ab399f and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fddb41bf73f38c0; op2val:0x3ff5de031eb83486;
op3val:0x3fe44c46c1ab399f; valaddr_reg:x3; val_offset:1788*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1788*FLEN/8, x4, x1, x2)

inst_597:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xdb41bf73f38c0 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x5de031eb83486 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x44c46c1ab399f and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fddb41bf73f38c0; op2val:0x3ff5de031eb83486;
op3val:0x3fe44c46c1ab399f; valaddr_reg:x3; val_offset:1791*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1791*FLEN/8, x4, x1, x2)

inst_598:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xdb41bf73f38c0 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x5de031eb83486 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x44c46c1ab399f and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fddb41bf73f38c0; op2val:0x3ff5de031eb83486;
op3val:0x3fe44c46c1ab399f; valaddr_reg:x3; val_offset:1794*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1794*FLEN/8, x4, x1, x2)

inst_599:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xdb41bf73f38c0 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x5de031eb83486 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x44c46c1ab399f and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fddb41bf73f38c0; op2val:0x3ff5de031eb83486;
op3val:0x3fe44c46c1ab399f; valaddr_reg:x3; val_offset:1797*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1797*FLEN/8, x4, x1, x2)

inst_600:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xdea0193aadedc and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xe40c54659ad3b and fs3 == 0 and fe3 == 0x3fc and fm3 == 0xc47ede7f4f3f8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fddea0193aadedc; op2val:0x3fde40c54659ad3b;
op3val:0x3fcc47ede7f4f3f8; valaddr_reg:x3; val_offset:1800*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1800*FLEN/8, x4, x1, x2)

inst_601:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xdea0193aadedc and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xe40c54659ad3b and fs3 == 0 and fe3 == 0x3fc and fm3 == 0xc47ede7f4f3f8 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fddea0193aadedc; op2val:0x3fde40c54659ad3b;
op3val:0x3fcc47ede7f4f3f8; valaddr_reg:x3; val_offset:1803*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1803*FLEN/8, x4, x1, x2)

inst_602:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xdea0193aadedc and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xe40c54659ad3b and fs3 == 0 and fe3 == 0x3fc and fm3 == 0xc47ede7f4f3f8 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fddea0193aadedc; op2val:0x3fde40c54659ad3b;
op3val:0x3fcc47ede7f4f3f8; valaddr_reg:x3; val_offset:1806*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1806*FLEN/8, x4, x1, x2)

inst_603:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xdea0193aadedc and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xe40c54659ad3b and fs3 == 0 and fe3 == 0x3fc and fm3 == 0xc47ede7f4f3f8 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fddea0193aadedc; op2val:0x3fde40c54659ad3b;
op3val:0x3fcc47ede7f4f3f8; valaddr_reg:x3; val_offset:1809*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1809*FLEN/8, x4, x1, x2)

inst_604:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xdea0193aadedc and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xe40c54659ad3b and fs3 == 0 and fe3 == 0x3fc and fm3 == 0xc47ede7f4f3f8 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fddea0193aadedc; op2val:0x3fde40c54659ad3b;
op3val:0x3fcc47ede7f4f3f8; valaddr_reg:x3; val_offset:1812*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1812*FLEN/8, x4, x1, x2)

inst_605:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xe3107e51b2188 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xcf1cb85d66d56 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xb4f08313d5eed and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fde3107e51b2188; op2val:0x3ffcf1cb85d66d56;
op3val:0x3feb4f08313d5eed; valaddr_reg:x3; val_offset:1815*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1815*FLEN/8, x4, x1, x2)

inst_606:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xe3107e51b2188 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xcf1cb85d66d56 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xb4f08313d5eed and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fde3107e51b2188; op2val:0x3ffcf1cb85d66d56;
op3val:0x3feb4f08313d5eed; valaddr_reg:x3; val_offset:1818*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1818*FLEN/8, x4, x1, x2)

inst_607:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xe3107e51b2188 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xcf1cb85d66d56 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xb4f08313d5eed and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fde3107e51b2188; op2val:0x3ffcf1cb85d66d56;
op3val:0x3feb4f08313d5eed; valaddr_reg:x3; val_offset:1821*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1821*FLEN/8, x4, x1, x2)

inst_608:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xe3107e51b2188 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xcf1cb85d66d56 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xb4f08313d5eed and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fde3107e51b2188; op2val:0x3ffcf1cb85d66d56;
op3val:0x3feb4f08313d5eed; valaddr_reg:x3; val_offset:1824*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1824*FLEN/8, x4, x1, x2)

inst_609:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xe3107e51b2188 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xcf1cb85d66d56 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xb4f08313d5eed and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fde3107e51b2188; op2val:0x3ffcf1cb85d66d56;
op3val:0x3feb4f08313d5eed; valaddr_reg:x3; val_offset:1827*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1827*FLEN/8, x4, x1, x2)

inst_610:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xe3374759d8328 and fs2 == 0 and fe2 == 0x3fa and fm2 == 0x7537aec362e6b and fs3 == 0 and fe3 == 0x3f9 and fm3 == 0x603c52db4e4c0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fde3374759d8328; op2val:0x3fa7537aec362e6b;
op3val:0x3f9603c52db4e4c0; valaddr_reg:x3; val_offset:1830*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1830*FLEN/8, x4, x1, x2)

inst_611:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xe3374759d8328 and fs2 == 0 and fe2 == 0x3fa and fm2 == 0x7537aec362e6b and fs3 == 0 and fe3 == 0x3f9 and fm3 == 0x603c52db4e4c0 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fde3374759d8328; op2val:0x3fa7537aec362e6b;
op3val:0x3f9603c52db4e4c0; valaddr_reg:x3; val_offset:1833*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1833*FLEN/8, x4, x1, x2)

inst_612:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xe3374759d8328 and fs2 == 0 and fe2 == 0x3fa and fm2 == 0x7537aec362e6b and fs3 == 0 and fe3 == 0x3f9 and fm3 == 0x603c52db4e4c0 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fde3374759d8328; op2val:0x3fa7537aec362e6b;
op3val:0x3f9603c52db4e4c0; valaddr_reg:x3; val_offset:1836*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1836*FLEN/8, x4, x1, x2)

inst_613:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xe3374759d8328 and fs2 == 0 and fe2 == 0x3fa and fm2 == 0x7537aec362e6b and fs3 == 0 and fe3 == 0x3f9 and fm3 == 0x603c52db4e4c0 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fde3374759d8328; op2val:0x3fa7537aec362e6b;
op3val:0x3f9603c52db4e4c0; valaddr_reg:x3; val_offset:1839*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1839*FLEN/8, x4, x1, x2)

inst_614:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xe3374759d8328 and fs2 == 0 and fe2 == 0x3fa and fm2 == 0x7537aec362e6b and fs3 == 0 and fe3 == 0x3f9 and fm3 == 0x603c52db4e4c0 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fde3374759d8328; op2val:0x3fa7537aec362e6b;
op3val:0x3f9603c52db4e4c0; valaddr_reg:x3; val_offset:1842*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1842*FLEN/8, x4, x1, x2)

inst_615:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xe47063252de6a and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x9c1ab1d9e2307 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x85ebb1c3f5bec and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fde47063252de6a; op2val:0x3ff9c1ab1d9e2307;
op3val:0x3fe85ebb1c3f5bec; valaddr_reg:x3; val_offset:1845*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1845*FLEN/8, x4, x1, x2)

inst_616:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xe47063252de6a and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x9c1ab1d9e2307 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x85ebb1c3f5bec and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fde47063252de6a; op2val:0x3ff9c1ab1d9e2307;
op3val:0x3fe85ebb1c3f5bec; valaddr_reg:x3; val_offset:1848*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1848*FLEN/8, x4, x1, x2)

inst_617:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xe47063252de6a and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x9c1ab1d9e2307 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x85ebb1c3f5bec and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fde47063252de6a; op2val:0x3ff9c1ab1d9e2307;
op3val:0x3fe85ebb1c3f5bec; valaddr_reg:x3; val_offset:1851*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1851*FLEN/8, x4, x1, x2)

inst_618:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xe47063252de6a and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x9c1ab1d9e2307 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x85ebb1c3f5bec and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fde47063252de6a; op2val:0x3ff9c1ab1d9e2307;
op3val:0x3fe85ebb1c3f5bec; valaddr_reg:x3; val_offset:1854*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1854*FLEN/8, x4, x1, x2)

inst_619:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xe47063252de6a and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x9c1ab1d9e2307 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x85ebb1c3f5bec and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fde47063252de6a; op2val:0x3ff9c1ab1d9e2307;
op3val:0x3fe85ebb1c3f5bec; valaddr_reg:x3; val_offset:1857*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1857*FLEN/8, x4, x1, x2)

inst_620:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xe4c7f02010820 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x1f233c266d871 and fs3 == 0 and fe3 == 0x3fb and fm3 == 0x0fdf6fb8b4210 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fde4c7f02010820; op2val:0x3fc1f233c266d871;
op3val:0x3fb0fdf6fb8b4210; valaddr_reg:x3; val_offset:1860*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1860*FLEN/8, x4, x1, x2)

inst_621:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xe4c7f02010820 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x1f233c266d871 and fs3 == 0 and fe3 == 0x3fb and fm3 == 0x0fdf6fb8b4210 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fde4c7f02010820; op2val:0x3fc1f233c266d871;
op3val:0x3fb0fdf6fb8b4210; valaddr_reg:x3; val_offset:1863*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1863*FLEN/8, x4, x1, x2)

inst_622:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xe4c7f02010820 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x1f233c266d871 and fs3 == 0 and fe3 == 0x3fb and fm3 == 0x0fdf6fb8b4210 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fde4c7f02010820; op2val:0x3fc1f233c266d871;
op3val:0x3fb0fdf6fb8b4210; valaddr_reg:x3; val_offset:1866*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1866*FLEN/8, x4, x1, x2)

inst_623:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xe4c7f02010820 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x1f233c266d871 and fs3 == 0 and fe3 == 0x3fb and fm3 == 0x0fdf6fb8b4210 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fde4c7f02010820; op2val:0x3fc1f233c266d871;
op3val:0x3fb0fdf6fb8b4210; valaddr_reg:x3; val_offset:1869*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1869*FLEN/8, x4, x1, x2)

inst_624:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xe4c7f02010820 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x1f233c266d871 and fs3 == 0 and fe3 == 0x3fb and fm3 == 0x0fdf6fb8b4210 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fde4c7f02010820; op2val:0x3fc1f233c266d871;
op3val:0x3fb0fdf6fb8b4210; valaddr_reg:x3; val_offset:1872*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1872*FLEN/8, x4, x1, x2)

inst_625:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xe632e340a0070 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x0d49e6a070e30 and fs3 == 0 and fe3 == 0x3fb and fm3 == 0xff6fd35023f48 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fde632e340a0070; op2val:0x3fd0d49e6a070e30;
op3val:0x3fbff6fd35023f48; valaddr_reg:x3; val_offset:1875*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1875*FLEN/8, x4, x1, x2)

inst_626:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xe632e340a0070 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x0d49e6a070e30 and fs3 == 0 and fe3 == 0x3fb and fm3 == 0xff6fd35023f48 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fde632e340a0070; op2val:0x3fd0d49e6a070e30;
op3val:0x3fbff6fd35023f48; valaddr_reg:x3; val_offset:1878*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1878*FLEN/8, x4, x1, x2)

inst_627:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xe632e340a0070 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x0d49e6a070e30 and fs3 == 0 and fe3 == 0x3fb and fm3 == 0xff6fd35023f48 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fde632e340a0070; op2val:0x3fd0d49e6a070e30;
op3val:0x3fbff6fd35023f48; valaddr_reg:x3; val_offset:1881*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1881*FLEN/8, x4, x1, x2)

inst_628:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xe632e340a0070 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x0d49e6a070e30 and fs3 == 0 and fe3 == 0x3fb and fm3 == 0xff6fd35023f48 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fde632e340a0070; op2val:0x3fd0d49e6a070e30;
op3val:0x3fbff6fd35023f48; valaddr_reg:x3; val_offset:1884*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1884*FLEN/8, x4, x1, x2)

inst_629:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xe632e340a0070 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x0d49e6a070e30 and fs3 == 0 and fe3 == 0x3fb and fm3 == 0xff6fd35023f48 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fde632e340a0070; op2val:0x3fd0d49e6a070e30;
op3val:0x3fbff6fd35023f48; valaddr_reg:x3; val_offset:1887*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1887*FLEN/8, x4, x1, x2)

inst_630:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xe7ede3bea6654 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x079abc3331aca and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xf66c50c823f40 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fde7ede3bea6654; op2val:0x400079abc3331aca;
op3val:0x3fef66c50c823f40; valaddr_reg:x3; val_offset:1890*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1890*FLEN/8, x4, x1, x2)

inst_631:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xe7ede3bea6654 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x079abc3331aca and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xf66c50c823f40 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fde7ede3bea6654; op2val:0x400079abc3331aca;
op3val:0x3fef66c50c823f40; valaddr_reg:x3; val_offset:1893*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1893*FLEN/8, x4, x1, x2)

inst_632:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xe7ede3bea6654 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x079abc3331aca and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xf66c50c823f40 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fde7ede3bea6654; op2val:0x400079abc3331aca;
op3val:0x3fef66c50c823f40; valaddr_reg:x3; val_offset:1896*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1896*FLEN/8, x4, x1, x2)

inst_633:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xe7ede3bea6654 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x079abc3331aca and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xf66c50c823f40 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fde7ede3bea6654; op2val:0x400079abc3331aca;
op3val:0x3fef66c50c823f40; valaddr_reg:x3; val_offset:1899*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1899*FLEN/8, x4, x1, x2)

inst_634:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xe7ede3bea6654 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x079abc3331aca and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xf66c50c823f40 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fde7ede3bea6654; op2val:0x400079abc3331aca;
op3val:0x3fef66c50c823f40; valaddr_reg:x3; val_offset:1902*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1902*FLEN/8, x4, x1, x2)

inst_635:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xef11445b734f4 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x1b779f5b68660 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x1217b5e22ebbd and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdef11445b734f4; op2val:0x3ff1b779f5b68660;
op3val:0x3fe1217b5e22ebbd; valaddr_reg:x3; val_offset:1905*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1905*FLEN/8, x4, x1, x2)

inst_636:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xef11445b734f4 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x1b779f5b68660 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x1217b5e22ebbd and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdef11445b734f4; op2val:0x3ff1b779f5b68660;
op3val:0x3fe1217b5e22ebbd; valaddr_reg:x3; val_offset:1908*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1908*FLEN/8, x4, x1, x2)

inst_637:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xef11445b734f4 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x1b779f5b68660 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x1217b5e22ebbd and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdef11445b734f4; op2val:0x3ff1b779f5b68660;
op3val:0x3fe1217b5e22ebbd; valaddr_reg:x3; val_offset:1911*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1911*FLEN/8, x4, x1, x2)

inst_638:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xef11445b734f4 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x1b779f5b68660 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x1217b5e22ebbd and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdef11445b734f4; op2val:0x3ff1b779f5b68660;
op3val:0x3fe1217b5e22ebbd; valaddr_reg:x3; val_offset:1914*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1914*FLEN/8, x4, x1, x2)

inst_639:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xef11445b734f4 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x1b779f5b68660 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x1217b5e22ebbd and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdef11445b734f4; op2val:0x3ff1b779f5b68660;
op3val:0x3fe1217b5e22ebbd; valaddr_reg:x3; val_offset:1917*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1917*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_6)

inst_640:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xf0053a4c4ff66 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x5d45fd5bf3603 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x525f5e6509ce7 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdf0053a4c4ff66; op2val:0x3ff5d45fd5bf3603;
op3val:0x3fe525f5e6509ce7; valaddr_reg:x3; val_offset:1920*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1920*FLEN/8, x4, x1, x2)

inst_641:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xf0053a4c4ff66 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x5d45fd5bf3603 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x525f5e6509ce7 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdf0053a4c4ff66; op2val:0x3ff5d45fd5bf3603;
op3val:0x3fe525f5e6509ce7; valaddr_reg:x3; val_offset:1923*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1923*FLEN/8, x4, x1, x2)

inst_642:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xf0053a4c4ff66 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x5d45fd5bf3603 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x525f5e6509ce7 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdf0053a4c4ff66; op2val:0x3ff5d45fd5bf3603;
op3val:0x3fe525f5e6509ce7; valaddr_reg:x3; val_offset:1926*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1926*FLEN/8, x4, x1, x2)

inst_643:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xf0053a4c4ff66 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x5d45fd5bf3603 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x525f5e6509ce7 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdf0053a4c4ff66; op2val:0x3ff5d45fd5bf3603;
op3val:0x3fe525f5e6509ce7; valaddr_reg:x3; val_offset:1929*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1929*FLEN/8, x4, x1, x2)

inst_644:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xf0053a4c4ff66 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x5d45fd5bf3603 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x525f5e6509ce7 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdf0053a4c4ff66; op2val:0x3ff5d45fd5bf3603;
op3val:0x3fe525f5e6509ce7; valaddr_reg:x3; val_offset:1932*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1932*FLEN/8, x4, x1, x2)

inst_645:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xf02303865f0fe and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x941af9569cfe9 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x8795c42c2a0f2 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdf02303865f0fe; op2val:0x3fe941af9569cfe9;
op3val:0x3fd8795c42c2a0f2; valaddr_reg:x3; val_offset:1935*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1935*FLEN/8, x4, x1, x2)

inst_646:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xf02303865f0fe and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x941af9569cfe9 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x8795c42c2a0f2 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdf02303865f0fe; op2val:0x3fe941af9569cfe9;
op3val:0x3fd8795c42c2a0f2; valaddr_reg:x3; val_offset:1938*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1938*FLEN/8, x4, x1, x2)

inst_647:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xf02303865f0fe and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x941af9569cfe9 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x8795c42c2a0f2 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdf02303865f0fe; op2val:0x3fe941af9569cfe9;
op3val:0x3fd8795c42c2a0f2; valaddr_reg:x3; val_offset:1941*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1941*FLEN/8, x4, x1, x2)

inst_648:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xf02303865f0fe and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x941af9569cfe9 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x8795c42c2a0f2 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdf02303865f0fe; op2val:0x3fe941af9569cfe9;
op3val:0x3fd8795c42c2a0f2; valaddr_reg:x3; val_offset:1944*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1944*FLEN/8, x4, x1, x2)

inst_649:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xf02303865f0fe and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x941af9569cfe9 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x8795c42c2a0f2 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdf02303865f0fe; op2val:0x3fe941af9569cfe9;
op3val:0x3fd8795c42c2a0f2; valaddr_reg:x3; val_offset:1947*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1947*FLEN/8, x4, x1, x2)

inst_650:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xf38bf16679f4c and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x427cbf4dcb848 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x3aa4b95c852f4 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdf38bf16679f4c; op2val:0x3fe427cbf4dcb848;
op3val:0x3fd3aa4b95c852f4; valaddr_reg:x3; val_offset:1950*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1950*FLEN/8, x4, x1, x2)

inst_651:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xf38bf16679f4c and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x427cbf4dcb848 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x3aa4b95c852f4 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdf38bf16679f4c; op2val:0x3fe427cbf4dcb848;
op3val:0x3fd3aa4b95c852f4; valaddr_reg:x3; val_offset:1953*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1953*FLEN/8, x4, x1, x2)

inst_652:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xf38bf16679f4c and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x427cbf4dcb848 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x3aa4b95c852f4 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdf38bf16679f4c; op2val:0x3fe427cbf4dcb848;
op3val:0x3fd3aa4b95c852f4; valaddr_reg:x3; val_offset:1956*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1956*FLEN/8, x4, x1, x2)

inst_653:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xf38bf16679f4c and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x427cbf4dcb848 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x3aa4b95c852f4 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdf38bf16679f4c; op2val:0x3fe427cbf4dcb848;
op3val:0x3fd3aa4b95c852f4; valaddr_reg:x3; val_offset:1959*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1959*FLEN/8, x4, x1, x2)

inst_654:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xf38bf16679f4c and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x427cbf4dcb848 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x3aa4b95c852f4 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdf38bf16679f4c; op2val:0x3fe427cbf4dcb848;
op3val:0x3fd3aa4b95c852f4; valaddr_reg:x3; val_offset:1962*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1962*FLEN/8, x4, x1, x2)

inst_655:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xf4c61e579a5fe and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xa81893e2a29d6 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x9ecc1b0e8428d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdf4c61e579a5fe; op2val:0x3ffa81893e2a29d6;
op3val:0x3fe9ecc1b0e8428d; valaddr_reg:x3; val_offset:1965*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1965*FLEN/8, x4, x1, x2)

inst_656:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xf4c61e579a5fe and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xa81893e2a29d6 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x9ecc1b0e8428d and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdf4c61e579a5fe; op2val:0x3ffa81893e2a29d6;
op3val:0x3fe9ecc1b0e8428d; valaddr_reg:x3; val_offset:1968*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1968*FLEN/8, x4, x1, x2)

inst_657:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xf4c61e579a5fe and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xa81893e2a29d6 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x9ecc1b0e8428d and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdf4c61e579a5fe; op2val:0x3ffa81893e2a29d6;
op3val:0x3fe9ecc1b0e8428d; valaddr_reg:x3; val_offset:1971*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1971*FLEN/8, x4, x1, x2)

inst_658:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xf4c61e579a5fe and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xa81893e2a29d6 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x9ecc1b0e8428d and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdf4c61e579a5fe; op2val:0x3ffa81893e2a29d6;
op3val:0x3fe9ecc1b0e8428d; valaddr_reg:x3; val_offset:1974*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1974*FLEN/8, x4, x1, x2)

inst_659:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xf4c61e579a5fe and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xa81893e2a29d6 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x9ecc1b0e8428d and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdf4c61e579a5fe; op2val:0x3ffa81893e2a29d6;
op3val:0x3fe9ecc1b0e8428d; valaddr_reg:x3; val_offset:1977*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1977*FLEN/8, x4, x1, x2)

inst_660:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xfb8627b73c106 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x5507746b5c321 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x520c3d2fe56ec and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdfb8627b73c106; op2val:0x3fd5507746b5c321;
op3val:0x3fc520c3d2fe56ec; valaddr_reg:x3; val_offset:1980*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1980*FLEN/8, x4, x1, x2)

inst_661:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xfb8627b73c106 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x5507746b5c321 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x520c3d2fe56ec and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdfb8627b73c106; op2val:0x3fd5507746b5c321;
op3val:0x3fc520c3d2fe56ec; valaddr_reg:x3; val_offset:1983*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1983*FLEN/8, x4, x1, x2)

inst_662:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xfb8627b73c106 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x5507746b5c321 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x520c3d2fe56ec and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdfb8627b73c106; op2val:0x3fd5507746b5c321;
op3val:0x3fc520c3d2fe56ec; valaddr_reg:x3; val_offset:1986*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1986*FLEN/8, x4, x1, x2)

inst_663:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xfb8627b73c106 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x5507746b5c321 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x520c3d2fe56ec and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdfb8627b73c106; op2val:0x3fd5507746b5c321;
op3val:0x3fc520c3d2fe56ec; valaddr_reg:x3; val_offset:1989*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1989*FLEN/8, x4, x1, x2)

inst_664:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xfb8627b73c106 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x5507746b5c321 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x520c3d2fe56ec and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdfb8627b73c106; op2val:0x3fd5507746b5c321;
op3val:0x3fc520c3d2fe56ec; valaddr_reg:x3; val_offset:1992*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1992*FLEN/8, x4, x1, x2)

inst_665:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xfcf5280d1300c and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xdeccebc8bcc58 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xdbf494743b3f4 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdfcf5280d1300c; op2val:0x3fedeccebc8bcc58;
op3val:0x3fddbf494743b3f4; valaddr_reg:x3; val_offset:1995*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1995*FLEN/8, x4, x1, x2)

inst_666:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xfcf5280d1300c and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xdeccebc8bcc58 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xdbf494743b3f4 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdfcf5280d1300c; op2val:0x3fedeccebc8bcc58;
op3val:0x3fddbf494743b3f4; valaddr_reg:x3; val_offset:1998*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1998*FLEN/8, x4, x1, x2)

inst_667:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xfcf5280d1300c and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xdeccebc8bcc58 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xdbf494743b3f4 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdfcf5280d1300c; op2val:0x3fedeccebc8bcc58;
op3val:0x3fddbf494743b3f4; valaddr_reg:x3; val_offset:2001*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2001*FLEN/8, x4, x1, x2)

inst_668:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xfcf5280d1300c and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xdeccebc8bcc58 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xdbf494743b3f4 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdfcf5280d1300c; op2val:0x3fedeccebc8bcc58;
op3val:0x3fddbf494743b3f4; valaddr_reg:x3; val_offset:2004*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2004*FLEN/8, x4, x1, x2)

inst_669:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xfcf5280d1300c and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xdeccebc8bcc58 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xdbf494743b3f4 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdfcf5280d1300c; op2val:0x3fedeccebc8bcc58;
op3val:0x3fddbf494743b3f4; valaddr_reg:x3; val_offset:2007*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2007*FLEN/8, x4, x1, x2)

inst_670:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xfe4fbd6f43266 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xe0ff5cebdbd86 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xdf6946ec90a02 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdfe4fbd6f43266; op2val:0x3fee0ff5cebdbd86;
op3val:0x3fddf6946ec90a02; valaddr_reg:x3; val_offset:2010*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2010*FLEN/8, x4, x1, x2)

inst_671:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xfe4fbd6f43266 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xe0ff5cebdbd86 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xdf6946ec90a02 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdfe4fbd6f43266; op2val:0x3fee0ff5cebdbd86;
op3val:0x3fddf6946ec90a02; valaddr_reg:x3; val_offset:2013*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2013*FLEN/8, x4, x1, x2)

inst_672:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xfe4fbd6f43266 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xe0ff5cebdbd86 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xdf6946ec90a02 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdfe4fbd6f43266; op2val:0x3fee0ff5cebdbd86;
op3val:0x3fddf6946ec90a02; valaddr_reg:x3; val_offset:2016*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2016*FLEN/8, x4, x1, x2)

inst_673:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xfe4fbd6f43266 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xe0ff5cebdbd86 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xdf6946ec90a02 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdfe4fbd6f43266; op2val:0x3fee0ff5cebdbd86;
op3val:0x3fddf6946ec90a02; valaddr_reg:x3; val_offset:2019*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2019*FLEN/8, x4, x1, x2)

inst_674:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xfe4fbd6f43266 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xe0ff5cebdbd86 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xdf6946ec90a02 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdfe4fbd6f43266; op2val:0x3fee0ff5cebdbd86;
op3val:0x3fddf6946ec90a02; valaddr_reg:x3; val_offset:2022*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2022*FLEN/8, x4, x1, x2)

inst_675:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xffe8c629f6c0c and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xa4fd675f080ea and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xa4ea4e6eafc30 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdffe8c629f6c0c; op2val:0x3ffa4fd675f080ea;
op3val:0x3fea4ea4e6eafc30; valaddr_reg:x3; val_offset:2025*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2025*FLEN/8, x4, x1, x2)

inst_676:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xffe8c629f6c0c and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xa4fd675f080ea and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xa4ea4e6eafc30 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdffe8c629f6c0c; op2val:0x3ffa4fd675f080ea;
op3val:0x3fea4ea4e6eafc30; valaddr_reg:x3; val_offset:2028*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2028*FLEN/8, x4, x1, x2)

inst_677:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xffe8c629f6c0c and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xa4fd675f080ea and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xa4ea4e6eafc30 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdffe8c629f6c0c; op2val:0x3ffa4fd675f080ea;
op3val:0x3fea4ea4e6eafc30; valaddr_reg:x3; val_offset:2031*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2031*FLEN/8, x4, x1, x2)

inst_678:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xffe8c629f6c0c and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xa4fd675f080ea and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xa4ea4e6eafc30 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdffe8c629f6c0c; op2val:0x3ffa4fd675f080ea;
op3val:0x3fea4ea4e6eafc30; valaddr_reg:x3; val_offset:2034*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2034*FLEN/8, x4, x1, x2)

inst_679:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xffe8c629f6c0c and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xa4fd675f080ea and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xa4ea4e6eafc30 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdffe8c629f6c0c; op2val:0x3ffa4fd675f080ea;
op3val:0x3fea4ea4e6eafc30; valaddr_reg:x3; val_offset:2037*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2037*FLEN/8, x4, x1, x2)

inst_680:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x028f275d0fdf4 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x4f5baef6f1dea and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x52b5ee1c7c748 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe028f275d0fdf4; op2val:0x3fd4f5baef6f1dea;
op3val:0x3fc52b5ee1c7c748; valaddr_reg:x3; val_offset:2040*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2040*FLEN/8, x4, x1, x2)

inst_681:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x028f275d0fdf4 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x4f5baef6f1dea and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x52b5ee1c7c748 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe028f275d0fdf4; op2val:0x3fd4f5baef6f1dea;
op3val:0x3fc52b5ee1c7c748; valaddr_reg:x3; val_offset:2043*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2043*FLEN/8, x4, x1, x2)

inst_682:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x028f275d0fdf4 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x4f5baef6f1dea and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x52b5ee1c7c748 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe028f275d0fdf4; op2val:0x3fd4f5baef6f1dea;
op3val:0x3fc52b5ee1c7c748; valaddr_reg:x3; val_offset:2046*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2046*FLEN/8, x4, x1, x2)

inst_683:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x028f275d0fdf4 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x4f5baef6f1dea and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x52b5ee1c7c748 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe028f275d0fdf4; op2val:0x3fd4f5baef6f1dea;
op3val:0x3fc52b5ee1c7c748; valaddr_reg:x3; val_offset:2049*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2049*FLEN/8, x4, x1, x2)

inst_684:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x028f275d0fdf4 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x4f5baef6f1dea and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x52b5ee1c7c748 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe028f275d0fdf4; op2val:0x3fd4f5baef6f1dea;
op3val:0x3fc52b5ee1c7c748; valaddr_reg:x3; val_offset:2052*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2052*FLEN/8, x4, x1, x2)

inst_685:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x03192549e2d0f and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x38594e58587fb and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x3c21087b16b1b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe03192549e2d0f; op2val:0x3ff38594e58587fb;
op3val:0x3fe3c21087b16b1b; valaddr_reg:x3; val_offset:2055*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2055*FLEN/8, x4, x1, x2)

inst_686:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x03192549e2d0f and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x38594e58587fb and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x3c21087b16b1b and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe03192549e2d0f; op2val:0x3ff38594e58587fb;
op3val:0x3fe3c21087b16b1b; valaddr_reg:x3; val_offset:2058*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2058*FLEN/8, x4, x1, x2)

inst_687:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x03192549e2d0f and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x38594e58587fb and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x3c21087b16b1b and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe03192549e2d0f; op2val:0x3ff38594e58587fb;
op3val:0x3fe3c21087b16b1b; valaddr_reg:x3; val_offset:2061*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2061*FLEN/8, x4, x1, x2)

inst_688:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x03192549e2d0f and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x38594e58587fb and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x3c21087b16b1b and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe03192549e2d0f; op2val:0x3ff38594e58587fb;
op3val:0x3fe3c21087b16b1b; valaddr_reg:x3; val_offset:2064*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2064*FLEN/8, x4, x1, x2)

inst_689:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x03192549e2d0f and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x38594e58587fb and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x3c21087b16b1b and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe03192549e2d0f; op2val:0x3ff38594e58587fb;
op3val:0x3fe3c21087b16b1b; valaddr_reg:x3; val_offset:2067*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2067*FLEN/8, x4, x1, x2)

inst_690:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x057b372f1e047 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xf39b16f9919c5 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xfe4d95a2c15b0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe057b372f1e047; op2val:0x3fff39b16f9919c5;
op3val:0x3fefe4d95a2c15b0; valaddr_reg:x3; val_offset:2070*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2070*FLEN/8, x4, x1, x2)

inst_691:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x057b372f1e047 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xf39b16f9919c5 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xfe4d95a2c15b0 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe057b372f1e047; op2val:0x3fff39b16f9919c5;
op3val:0x3fefe4d95a2c15b0; valaddr_reg:x3; val_offset:2073*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2073*FLEN/8, x4, x1, x2)

inst_692:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x057b372f1e047 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xf39b16f9919c5 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xfe4d95a2c15b0 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe057b372f1e047; op2val:0x3fff39b16f9919c5;
op3val:0x3fefe4d95a2c15b0; valaddr_reg:x3; val_offset:2076*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2076*FLEN/8, x4, x1, x2)

inst_693:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x057b372f1e047 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xf39b16f9919c5 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xfe4d95a2c15b0 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe057b372f1e047; op2val:0x3fff39b16f9919c5;
op3val:0x3fefe4d95a2c15b0; valaddr_reg:x3; val_offset:2079*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2079*FLEN/8, x4, x1, x2)

inst_694:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x057b372f1e047 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xf39b16f9919c5 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xfe4d95a2c15b0 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe057b372f1e047; op2val:0x3fff39b16f9919c5;
op3val:0x3fefe4d95a2c15b0; valaddr_reg:x3; val_offset:2082*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2082*FLEN/8, x4, x1, x2)

inst_695:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x07189266c7628 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xe5d18b6c3caf6 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xf348e7b5d1dff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe07189266c7628; op2val:0x3ffe5d18b6c3caf6;
op3val:0x3fef348e7b5d1dff; valaddr_reg:x3; val_offset:2085*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2085*FLEN/8, x4, x1, x2)

inst_696:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x07189266c7628 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xe5d18b6c3caf6 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xf348e7b5d1dff and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe07189266c7628; op2val:0x3ffe5d18b6c3caf6;
op3val:0x3fef348e7b5d1dff; valaddr_reg:x3; val_offset:2088*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2088*FLEN/8, x4, x1, x2)

inst_697:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x07189266c7628 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xe5d18b6c3caf6 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xf348e7b5d1dff and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe07189266c7628; op2val:0x3ffe5d18b6c3caf6;
op3val:0x3fef348e7b5d1dff; valaddr_reg:x3; val_offset:2091*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2091*FLEN/8, x4, x1, x2)

inst_698:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x07189266c7628 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xe5d18b6c3caf6 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xf348e7b5d1dff and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe07189266c7628; op2val:0x3ffe5d18b6c3caf6;
op3val:0x3fef348e7b5d1dff; valaddr_reg:x3; val_offset:2094*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2094*FLEN/8, x4, x1, x2)

inst_699:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x07189266c7628 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xe5d18b6c3caf6 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xf348e7b5d1dff and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe07189266c7628; op2val:0x3ffe5d18b6c3caf6;
op3val:0x3fef348e7b5d1dff; valaddr_reg:x3; val_offset:2097*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2097*FLEN/8, x4, x1, x2)

inst_700:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x0abf2e05baea1 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x36d8746e32d0a and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x43e50c5b39204 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe0abf2e05baea1; op2val:0x3fe36d8746e32d0a;
op3val:0x3fd43e50c5b39204; valaddr_reg:x3; val_offset:2100*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2100*FLEN/8, x4, x1, x2)

inst_701:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x0abf2e05baea1 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x36d8746e32d0a and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x43e50c5b39204 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe0abf2e05baea1; op2val:0x3fe36d8746e32d0a;
op3val:0x3fd43e50c5b39204; valaddr_reg:x3; val_offset:2103*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2103*FLEN/8, x4, x1, x2)

inst_702:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x0abf2e05baea1 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x36d8746e32d0a and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x43e50c5b39204 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe0abf2e05baea1; op2val:0x3fe36d8746e32d0a;
op3val:0x3fd43e50c5b39204; valaddr_reg:x3; val_offset:2106*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2106*FLEN/8, x4, x1, x2)

inst_703:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x0abf2e05baea1 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x36d8746e32d0a and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x43e50c5b39204 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe0abf2e05baea1; op2val:0x3fe36d8746e32d0a;
op3val:0x3fd43e50c5b39204; valaddr_reg:x3; val_offset:2109*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2109*FLEN/8, x4, x1, x2)

inst_704:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x0abf2e05baea1 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x36d8746e32d0a and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x43e50c5b39204 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe0abf2e05baea1; op2val:0x3fe36d8746e32d0a;
op3val:0x3fd43e50c5b39204; valaddr_reg:x3; val_offset:2112*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2112*FLEN/8, x4, x1, x2)

inst_705:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x0b3ed2df80fe6 and fs2 == 0 and fe2 == 0x3fb and fm2 == 0xcb0ebd2cc8b77 and fs3 == 0 and fe3 == 0x3fa and fm3 == 0xdf39070266850 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe0b3ed2df80fe6; op2val:0x3fbcb0ebd2cc8b77;
op3val:0x3fadf39070266850; valaddr_reg:x3; val_offset:2115*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2115*FLEN/8, x4, x1, x2)

inst_706:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x0b3ed2df80fe6 and fs2 == 0 and fe2 == 0x3fb and fm2 == 0xcb0ebd2cc8b77 and fs3 == 0 and fe3 == 0x3fa and fm3 == 0xdf39070266850 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe0b3ed2df80fe6; op2val:0x3fbcb0ebd2cc8b77;
op3val:0x3fadf39070266850; valaddr_reg:x3; val_offset:2118*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2118*FLEN/8, x4, x1, x2)

inst_707:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x0b3ed2df80fe6 and fs2 == 0 and fe2 == 0x3fb and fm2 == 0xcb0ebd2cc8b77 and fs3 == 0 and fe3 == 0x3fa and fm3 == 0xdf39070266850 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe0b3ed2df80fe6; op2val:0x3fbcb0ebd2cc8b77;
op3val:0x3fadf39070266850; valaddr_reg:x3; val_offset:2121*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2121*FLEN/8, x4, x1, x2)

inst_708:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x0b3ed2df80fe6 and fs2 == 0 and fe2 == 0x3fb and fm2 == 0xcb0ebd2cc8b77 and fs3 == 0 and fe3 == 0x3fa and fm3 == 0xdf39070266850 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe0b3ed2df80fe6; op2val:0x3fbcb0ebd2cc8b77;
op3val:0x3fadf39070266850; valaddr_reg:x3; val_offset:2124*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2124*FLEN/8, x4, x1, x2)

inst_709:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x0b3ed2df80fe6 and fs2 == 0 and fe2 == 0x3fb and fm2 == 0xcb0ebd2cc8b77 and fs3 == 0 and fe3 == 0x3fa and fm3 == 0xdf39070266850 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe0b3ed2df80fe6; op2val:0x3fbcb0ebd2cc8b77;
op3val:0x3fadf39070266850; valaddr_reg:x3; val_offset:2127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2127*FLEN/8, x4, x1, x2)

inst_710:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x0cfb82ae26079 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xe49833a6a1f83 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xfd2b6eac079b4 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe0cfb82ae26079; op2val:0x3fee49833a6a1f83;
op3val:0x3fdfd2b6eac079b4; valaddr_reg:x3; val_offset:2130*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2130*FLEN/8, x4, x1, x2)

inst_711:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x0cfb82ae26079 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xe49833a6a1f83 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xfd2b6eac079b4 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe0cfb82ae26079; op2val:0x3fee49833a6a1f83;
op3val:0x3fdfd2b6eac079b4; valaddr_reg:x3; val_offset:2133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2133*FLEN/8, x4, x1, x2)

inst_712:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x0cfb82ae26079 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xe49833a6a1f83 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xfd2b6eac079b4 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe0cfb82ae26079; op2val:0x3fee49833a6a1f83;
op3val:0x3fdfd2b6eac079b4; valaddr_reg:x3; val_offset:2136*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2136*FLEN/8, x4, x1, x2)

inst_713:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x0cfb82ae26079 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xe49833a6a1f83 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xfd2b6eac079b4 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe0cfb82ae26079; op2val:0x3fee49833a6a1f83;
op3val:0x3fdfd2b6eac079b4; valaddr_reg:x3; val_offset:2139*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2139*FLEN/8, x4, x1, x2)

inst_714:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x0cfb82ae26079 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xe49833a6a1f83 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xfd2b6eac079b4 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe0cfb82ae26079; op2val:0x3fee49833a6a1f83;
op3val:0x3fdfd2b6eac079b4; valaddr_reg:x3; val_offset:2142*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2142*FLEN/8, x4, x1, x2)

inst_715:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x0d42fb9363a9b and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x46f85270f7aa6 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x57e87bf7ae14c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe0d42fb9363a9b; op2val:0x3fe46f85270f7aa6;
op3val:0x3fd57e87bf7ae14c; valaddr_reg:x3; val_offset:2145*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2145*FLEN/8, x4, x1, x2)

inst_716:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x0d42fb9363a9b and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x46f85270f7aa6 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x57e87bf7ae14c and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe0d42fb9363a9b; op2val:0x3fe46f85270f7aa6;
op3val:0x3fd57e87bf7ae14c; valaddr_reg:x3; val_offset:2148*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2148*FLEN/8, x4, x1, x2)

inst_717:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x0d42fb9363a9b and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x46f85270f7aa6 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x57e87bf7ae14c and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe0d42fb9363a9b; op2val:0x3fe46f85270f7aa6;
op3val:0x3fd57e87bf7ae14c; valaddr_reg:x3; val_offset:2151*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2151*FLEN/8, x4, x1, x2)

inst_718:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x0d42fb9363a9b and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x46f85270f7aa6 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x57e87bf7ae14c and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe0d42fb9363a9b; op2val:0x3fe46f85270f7aa6;
op3val:0x3fd57e87bf7ae14c; valaddr_reg:x3; val_offset:2154*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2154*FLEN/8, x4, x1, x2)

inst_719:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x0d42fb9363a9b and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x46f85270f7aa6 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x57e87bf7ae14c and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe0d42fb9363a9b; op2val:0x3fe46f85270f7aa6;
op3val:0x3fd57e87bf7ae14c; valaddr_reg:x3; val_offset:2157*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2157*FLEN/8, x4, x1, x2)

inst_720:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x113bfe8ee6b0d and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xa6dbe46d4eaeb and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xc35397c06dc43 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe113bfe8ee6b0d; op2val:0x3ffa6dbe46d4eaeb;
op3val:0x3fec35397c06dc43; valaddr_reg:x3; val_offset:2160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2160*FLEN/8, x4, x1, x2)

inst_721:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x113bfe8ee6b0d and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xa6dbe46d4eaeb and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xc35397c06dc43 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe113bfe8ee6b0d; op2val:0x3ffa6dbe46d4eaeb;
op3val:0x3fec35397c06dc43; valaddr_reg:x3; val_offset:2163*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2163*FLEN/8, x4, x1, x2)

inst_722:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x113bfe8ee6b0d and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xa6dbe46d4eaeb and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xc35397c06dc43 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe113bfe8ee6b0d; op2val:0x3ffa6dbe46d4eaeb;
op3val:0x3fec35397c06dc43; valaddr_reg:x3; val_offset:2166*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2166*FLEN/8, x4, x1, x2)

inst_723:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x113bfe8ee6b0d and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xa6dbe46d4eaeb and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xc35397c06dc43 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe113bfe8ee6b0d; op2val:0x3ffa6dbe46d4eaeb;
op3val:0x3fec35397c06dc43; valaddr_reg:x3; val_offset:2169*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2169*FLEN/8, x4, x1, x2)

inst_724:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x113bfe8ee6b0d and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xa6dbe46d4eaeb and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xc35397c06dc43 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe113bfe8ee6b0d; op2val:0x3ffa6dbe46d4eaeb;
op3val:0x3fec35397c06dc43; valaddr_reg:x3; val_offset:2172*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2172*FLEN/8, x4, x1, x2)

inst_725:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x1169d4614134f and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xeee3ed0d3765d and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x0846d2ec0a9ca and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe1169d4614134f; op2val:0x3feeee3ed0d3765d;
op3val:0x3fe0846d2ec0a9ca; valaddr_reg:x3; val_offset:2175*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2175*FLEN/8, x4, x1, x2)

inst_726:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x1169d4614134f and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xeee3ed0d3765d and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x0846d2ec0a9ca and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe1169d4614134f; op2val:0x3feeee3ed0d3765d;
op3val:0x3fe0846d2ec0a9ca; valaddr_reg:x3; val_offset:2178*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2178*FLEN/8, x4, x1, x2)

inst_727:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x1169d4614134f and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xeee3ed0d3765d and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x0846d2ec0a9ca and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe1169d4614134f; op2val:0x3feeee3ed0d3765d;
op3val:0x3fe0846d2ec0a9ca; valaddr_reg:x3; val_offset:2181*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2181*FLEN/8, x4, x1, x2)

inst_728:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x1169d4614134f and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xeee3ed0d3765d and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x0846d2ec0a9ca and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe1169d4614134f; op2val:0x3feeee3ed0d3765d;
op3val:0x3fe0846d2ec0a9ca; valaddr_reg:x3; val_offset:2184*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2184*FLEN/8, x4, x1, x2)

inst_729:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x1169d4614134f and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xeee3ed0d3765d and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x0846d2ec0a9ca and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe1169d4614134f; op2val:0x3feeee3ed0d3765d;
op3val:0x3fe0846d2ec0a9ca; valaddr_reg:x3; val_offset:2187*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2187*FLEN/8, x4, x1, x2)

inst_730:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x17aaff3f42d33 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x35b84383a00f7 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x525ab2c05d4ae and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe17aaff3f42d33; op2val:0x3ff35b84383a00f7;
op3val:0x3fe525ab2c05d4ae; valaddr_reg:x3; val_offset:2190*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2190*FLEN/8, x4, x1, x2)

inst_731:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x17aaff3f42d33 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x35b84383a00f7 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x525ab2c05d4ae and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe17aaff3f42d33; op2val:0x3ff35b84383a00f7;
op3val:0x3fe525ab2c05d4ae; valaddr_reg:x3; val_offset:2193*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2193*FLEN/8, x4, x1, x2)

inst_732:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x17aaff3f42d33 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x35b84383a00f7 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x525ab2c05d4ae and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe17aaff3f42d33; op2val:0x3ff35b84383a00f7;
op3val:0x3fe525ab2c05d4ae; valaddr_reg:x3; val_offset:2196*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2196*FLEN/8, x4, x1, x2)

inst_733:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x17aaff3f42d33 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x35b84383a00f7 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x525ab2c05d4ae and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe17aaff3f42d33; op2val:0x3ff35b84383a00f7;
op3val:0x3fe525ab2c05d4ae; valaddr_reg:x3; val_offset:2199*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2199*FLEN/8, x4, x1, x2)

inst_734:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x17aaff3f42d33 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x35b84383a00f7 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x525ab2c05d4ae and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe17aaff3f42d33; op2val:0x3ff35b84383a00f7;
op3val:0x3fe525ab2c05d4ae; valaddr_reg:x3; val_offset:2202*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2202*FLEN/8, x4, x1, x2)

inst_735:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x17f837a8dbd5b and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x47d31d440b7c2 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x6684f0b019c77 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe17f837a8dbd5b; op2val:0x3ff47d31d440b7c2;
op3val:0x3fe6684f0b019c77; valaddr_reg:x3; val_offset:2205*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2205*FLEN/8, x4, x1, x2)

inst_736:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x17f837a8dbd5b and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x47d31d440b7c2 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x6684f0b019c77 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe17f837a8dbd5b; op2val:0x3ff47d31d440b7c2;
op3val:0x3fe6684f0b019c77; valaddr_reg:x3; val_offset:2208*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2208*FLEN/8, x4, x1, x2)

inst_737:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x17f837a8dbd5b and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x47d31d440b7c2 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x6684f0b019c77 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe17f837a8dbd5b; op2val:0x3ff47d31d440b7c2;
op3val:0x3fe6684f0b019c77; valaddr_reg:x3; val_offset:2211*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2211*FLEN/8, x4, x1, x2)

inst_738:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x17f837a8dbd5b and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x47d31d440b7c2 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x6684f0b019c77 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe17f837a8dbd5b; op2val:0x3ff47d31d440b7c2;
op3val:0x3fe6684f0b019c77; valaddr_reg:x3; val_offset:2214*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2214*FLEN/8, x4, x1, x2)

inst_739:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x17f837a8dbd5b and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x47d31d440b7c2 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x6684f0b019c77 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe17f837a8dbd5b; op2val:0x3ff47d31d440b7c2;
op3val:0x3fe6684f0b019c77; valaddr_reg:x3; val_offset:2217*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2217*FLEN/8, x4, x1, x2)

inst_740:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x186621df7a5ea and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xb4546e5fe80be and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xddea6c18a85b8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe186621df7a5ea; op2val:0x3feb4546e5fe80be;
op3val:0x3fdddea6c18a85b8; valaddr_reg:x3; val_offset:2220*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2220*FLEN/8, x4, x1, x2)

inst_741:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x186621df7a5ea and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xb4546e5fe80be and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xddea6c18a85b8 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe186621df7a5ea; op2val:0x3feb4546e5fe80be;
op3val:0x3fdddea6c18a85b8; valaddr_reg:x3; val_offset:2223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2223*FLEN/8, x4, x1, x2)

inst_742:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x186621df7a5ea and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xb4546e5fe80be and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xddea6c18a85b8 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe186621df7a5ea; op2val:0x3feb4546e5fe80be;
op3val:0x3fdddea6c18a85b8; valaddr_reg:x3; val_offset:2226*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2226*FLEN/8, x4, x1, x2)

inst_743:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x186621df7a5ea and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xb4546e5fe80be and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xddea6c18a85b8 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe186621df7a5ea; op2val:0x3feb4546e5fe80be;
op3val:0x3fdddea6c18a85b8; valaddr_reg:x3; val_offset:2229*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2229*FLEN/8, x4, x1, x2)

inst_744:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x186621df7a5ea and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xb4546e5fe80be and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xddea6c18a85b8 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe186621df7a5ea; op2val:0x3feb4546e5fe80be;
op3val:0x3fdddea6c18a85b8; valaddr_reg:x3; val_offset:2232*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2232*FLEN/8, x4, x1, x2)

inst_745:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x1935f2260d9c2 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x455c1d99dd687 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x6566ac5175d67 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe1935f2260d9c2; op2val:0x3ff455c1d99dd687;
op3val:0x3fe6566ac5175d67; valaddr_reg:x3; val_offset:2235*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2235*FLEN/8, x4, x1, x2)

inst_746:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x1935f2260d9c2 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x455c1d99dd687 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x6566ac5175d67 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe1935f2260d9c2; op2val:0x3ff455c1d99dd687;
op3val:0x3fe6566ac5175d67; valaddr_reg:x3; val_offset:2238*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2238*FLEN/8, x4, x1, x2)

inst_747:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x1935f2260d9c2 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x455c1d99dd687 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x6566ac5175d67 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe1935f2260d9c2; op2val:0x3ff455c1d99dd687;
op3val:0x3fe6566ac5175d67; valaddr_reg:x3; val_offset:2241*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2241*FLEN/8, x4, x1, x2)

inst_748:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x1935f2260d9c2 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x455c1d99dd687 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x6566ac5175d67 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe1935f2260d9c2; op2val:0x3ff455c1d99dd687;
op3val:0x3fe6566ac5175d67; valaddr_reg:x3; val_offset:2244*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2244*FLEN/8, x4, x1, x2)

inst_749:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x1935f2260d9c2 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x455c1d99dd687 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x6566ac5175d67 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe1935f2260d9c2; op2val:0x3ff455c1d99dd687;
op3val:0x3fe6566ac5175d67; valaddr_reg:x3; val_offset:2247*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2247*FLEN/8, x4, x1, x2)

inst_750:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x19e1900062d87 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x54113d75894a5 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x76728ee73de07 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe19e1900062d87; op2val:0x3ff54113d75894a5;
op3val:0x3fe76728ee73de07; valaddr_reg:x3; val_offset:2250*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2250*FLEN/8, x4, x1, x2)

inst_751:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x19e1900062d87 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x54113d75894a5 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x76728ee73de07 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe19e1900062d87; op2val:0x3ff54113d75894a5;
op3val:0x3fe76728ee73de07; valaddr_reg:x3; val_offset:2253*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2253*FLEN/8, x4, x1, x2)

inst_752:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x19e1900062d87 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x54113d75894a5 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x76728ee73de07 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe19e1900062d87; op2val:0x3ff54113d75894a5;
op3val:0x3fe76728ee73de07; valaddr_reg:x3; val_offset:2256*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2256*FLEN/8, x4, x1, x2)

inst_753:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x19e1900062d87 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x54113d75894a5 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x76728ee73de07 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe19e1900062d87; op2val:0x3ff54113d75894a5;
op3val:0x3fe76728ee73de07; valaddr_reg:x3; val_offset:2259*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2259*FLEN/8, x4, x1, x2)

inst_754:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x19e1900062d87 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x54113d75894a5 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x76728ee73de07 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe19e1900062d87; op2val:0x3ff54113d75894a5;
op3val:0x3fe76728ee73de07; valaddr_reg:x3; val_offset:2262*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2262*FLEN/8, x4, x1, x2)

inst_755:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x1ea7f28e4db92 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x75850bc5cb42d and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xa23faed90d70e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe1ea7f28e4db92; op2val:0x3ff75850bc5cb42d;
op3val:0x3fea23faed90d70e; valaddr_reg:x3; val_offset:2265*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2265*FLEN/8, x4, x1, x2)

inst_756:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x1ea7f28e4db92 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x75850bc5cb42d and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xa23faed90d70e and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe1ea7f28e4db92; op2val:0x3ff75850bc5cb42d;
op3val:0x3fea23faed90d70e; valaddr_reg:x3; val_offset:2268*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2268*FLEN/8, x4, x1, x2)

inst_757:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x1ea7f28e4db92 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x75850bc5cb42d and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xa23faed90d70e and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe1ea7f28e4db92; op2val:0x3ff75850bc5cb42d;
op3val:0x3fea23faed90d70e; valaddr_reg:x3; val_offset:2271*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2271*FLEN/8, x4, x1, x2)

inst_758:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x1ea7f28e4db92 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x75850bc5cb42d and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xa23faed90d70e and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe1ea7f28e4db92; op2val:0x3ff75850bc5cb42d;
op3val:0x3fea23faed90d70e; valaddr_reg:x3; val_offset:2274*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2274*FLEN/8, x4, x1, x2)

inst_759:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x1ea7f28e4db92 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x75850bc5cb42d and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xa23faed90d70e and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe1ea7f28e4db92; op2val:0x3ff75850bc5cb42d;
op3val:0x3fea23faed90d70e; valaddr_reg:x3; val_offset:2277*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2277*FLEN/8, x4, x1, x2)

inst_760:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x21e3bac0dc5fe and fs2 == 0 and fe2 == 0x3fc and fm2 == 0xcfed09bbb488b and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x06aba4ce213b4 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe21e3bac0dc5fe; op2val:0x3fccfed09bbb488b;
op3val:0x3fc06aba4ce213b4; valaddr_reg:x3; val_offset:2280*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2280*FLEN/8, x4, x1, x2)

inst_761:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x21e3bac0dc5fe and fs2 == 0 and fe2 == 0x3fc and fm2 == 0xcfed09bbb488b and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x06aba4ce213b4 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe21e3bac0dc5fe; op2val:0x3fccfed09bbb488b;
op3val:0x3fc06aba4ce213b4; valaddr_reg:x3; val_offset:2283*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2283*FLEN/8, x4, x1, x2)

inst_762:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x21e3bac0dc5fe and fs2 == 0 and fe2 == 0x3fc and fm2 == 0xcfed09bbb488b and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x06aba4ce213b4 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe21e3bac0dc5fe; op2val:0x3fccfed09bbb488b;
op3val:0x3fc06aba4ce213b4; valaddr_reg:x3; val_offset:2286*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2286*FLEN/8, x4, x1, x2)

inst_763:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x21e3bac0dc5fe and fs2 == 0 and fe2 == 0x3fc and fm2 == 0xcfed09bbb488b and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x06aba4ce213b4 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe21e3bac0dc5fe; op2val:0x3fccfed09bbb488b;
op3val:0x3fc06aba4ce213b4; valaddr_reg:x3; val_offset:2289*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2289*FLEN/8, x4, x1, x2)

inst_764:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x21e3bac0dc5fe and fs2 == 0 and fe2 == 0x3fc and fm2 == 0xcfed09bbb488b and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x06aba4ce213b4 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe21e3bac0dc5fe; op2val:0x3fccfed09bbb488b;
op3val:0x3fc06aba4ce213b4; valaddr_reg:x3; val_offset:2292*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2292*FLEN/8, x4, x1, x2)

inst_765:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x26a56bbc3788a and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x34189d86e22a7 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x629b5a6f3e6d4 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe26a56bbc3788a; op2val:0x3fd34189d86e22a7;
op3val:0x3fc629b5a6f3e6d4; valaddr_reg:x3; val_offset:2295*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2295*FLEN/8, x4, x1, x2)

inst_766:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x26a56bbc3788a and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x34189d86e22a7 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x629b5a6f3e6d4 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe26a56bbc3788a; op2val:0x3fd34189d86e22a7;
op3val:0x3fc629b5a6f3e6d4; valaddr_reg:x3; val_offset:2298*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2298*FLEN/8, x4, x1, x2)

inst_767:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x26a56bbc3788a and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x34189d86e22a7 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x629b5a6f3e6d4 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe26a56bbc3788a; op2val:0x3fd34189d86e22a7;
op3val:0x3fc629b5a6f3e6d4; valaddr_reg:x3; val_offset:2301*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2301*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_7)

inst_768:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x26a56bbc3788a and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x34189d86e22a7 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x629b5a6f3e6d4 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe26a56bbc3788a; op2val:0x3fd34189d86e22a7;
op3val:0x3fc629b5a6f3e6d4; valaddr_reg:x3; val_offset:2304*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2304*FLEN/8, x4, x1, x2)

inst_769:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x26a56bbc3788a and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x34189d86e22a7 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x629b5a6f3e6d4 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe26a56bbc3788a; op2val:0x3fd34189d86e22a7;
op3val:0x3fc629b5a6f3e6d4; valaddr_reg:x3; val_offset:2307*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2307*FLEN/8, x4, x1, x2)

inst_770:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x27ce4cc9a05a7 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x3a0575357dcc6 and fs3 == 0 and fe3 == 0x3fb and fm3 == 0x6ad958a5e6c90 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe27ce4cc9a05a7; op2val:0x3fc3a0575357dcc6;
op3val:0x3fb6ad958a5e6c90; valaddr_reg:x3; val_offset:2310*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2310*FLEN/8, x4, x1, x2)

inst_771:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x27ce4cc9a05a7 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x3a0575357dcc6 and fs3 == 0 and fe3 == 0x3fb and fm3 == 0x6ad958a5e6c90 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe27ce4cc9a05a7; op2val:0x3fc3a0575357dcc6;
op3val:0x3fb6ad958a5e6c90; valaddr_reg:x3; val_offset:2313*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2313*FLEN/8, x4, x1, x2)

inst_772:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x27ce4cc9a05a7 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x3a0575357dcc6 and fs3 == 0 and fe3 == 0x3fb and fm3 == 0x6ad958a5e6c90 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe27ce4cc9a05a7; op2val:0x3fc3a0575357dcc6;
op3val:0x3fb6ad958a5e6c90; valaddr_reg:x3; val_offset:2316*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2316*FLEN/8, x4, x1, x2)

inst_773:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x27ce4cc9a05a7 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x3a0575357dcc6 and fs3 == 0 and fe3 == 0x3fb and fm3 == 0x6ad958a5e6c90 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe27ce4cc9a05a7; op2val:0x3fc3a0575357dcc6;
op3val:0x3fb6ad958a5e6c90; valaddr_reg:x3; val_offset:2319*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2319*FLEN/8, x4, x1, x2)

inst_774:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x27ce4cc9a05a7 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x3a0575357dcc6 and fs3 == 0 and fe3 == 0x3fb and fm3 == 0x6ad958a5e6c90 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe27ce4cc9a05a7; op2val:0x3fc3a0575357dcc6;
op3val:0x3fb6ad958a5e6c90; valaddr_reg:x3; val_offset:2322*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2322*FLEN/8, x4, x1, x2)

inst_775:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x28a3694b1024c and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x22d840cd180b1 and fs3 == 0 and fe3 == 0x3fb and fm3 == 0x5103b23e60a98 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe28a3694b1024c; op2val:0x3fc22d840cd180b1;
op3val:0x3fb5103b23e60a98; valaddr_reg:x3; val_offset:2325*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2325*FLEN/8, x4, x1, x2)

inst_776:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x28a3694b1024c and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x22d840cd180b1 and fs3 == 0 and fe3 == 0x3fb and fm3 == 0x5103b23e60a98 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe28a3694b1024c; op2val:0x3fc22d840cd180b1;
op3val:0x3fb5103b23e60a98; valaddr_reg:x3; val_offset:2328*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2328*FLEN/8, x4, x1, x2)

inst_777:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x28a3694b1024c and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x22d840cd180b1 and fs3 == 0 and fe3 == 0x3fb and fm3 == 0x5103b23e60a98 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe28a3694b1024c; op2val:0x3fc22d840cd180b1;
op3val:0x3fb5103b23e60a98; valaddr_reg:x3; val_offset:2331*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2331*FLEN/8, x4, x1, x2)

inst_778:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x28a3694b1024c and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x22d840cd180b1 and fs3 == 0 and fe3 == 0x3fb and fm3 == 0x5103b23e60a98 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe28a3694b1024c; op2val:0x3fc22d840cd180b1;
op3val:0x3fb5103b23e60a98; valaddr_reg:x3; val_offset:2334*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2334*FLEN/8, x4, x1, x2)

inst_779:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x28a3694b1024c and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x22d840cd180b1 and fs3 == 0 and fe3 == 0x3fb and fm3 == 0x5103b23e60a98 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe28a3694b1024c; op2val:0x3fc22d840cd180b1;
op3val:0x3fb5103b23e60a98; valaddr_reg:x3; val_offset:2337*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2337*FLEN/8, x4, x1, x2)

inst_780:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x29ebce357142d and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xab637d0aa9c07 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0xf16018a86f080 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe29ebce357142d; op2val:0x3fdab637d0aa9c07;
op3val:0x3fcf16018a86f080; valaddr_reg:x3; val_offset:2340*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2340*FLEN/8, x4, x1, x2)

inst_781:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x29ebce357142d and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xab637d0aa9c07 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0xf16018a86f080 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe29ebce357142d; op2val:0x3fdab637d0aa9c07;
op3val:0x3fcf16018a86f080; valaddr_reg:x3; val_offset:2343*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2343*FLEN/8, x4, x1, x2)

inst_782:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x29ebce357142d and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xab637d0aa9c07 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0xf16018a86f080 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe29ebce357142d; op2val:0x3fdab637d0aa9c07;
op3val:0x3fcf16018a86f080; valaddr_reg:x3; val_offset:2346*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2346*FLEN/8, x4, x1, x2)

inst_783:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x29ebce357142d and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xab637d0aa9c07 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0xf16018a86f080 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe29ebce357142d; op2val:0x3fdab637d0aa9c07;
op3val:0x3fcf16018a86f080; valaddr_reg:x3; val_offset:2349*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2349*FLEN/8, x4, x1, x2)

inst_784:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x29ebce357142d and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xab637d0aa9c07 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0xf16018a86f080 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe29ebce357142d; op2val:0x3fdab637d0aa9c07;
op3val:0x3fcf16018a86f080; valaddr_reg:x3; val_offset:2352*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2352*FLEN/8, x4, x1, x2)

inst_785:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x30cb7640ad0c0 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x18931256b030c and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x4e0da40128d8b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe30cb7640ad0c0; op2val:0x3ff18931256b030c;
op3val:0x3fe4e0da40128d8b; valaddr_reg:x3; val_offset:2355*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2355*FLEN/8, x4, x1, x2)

inst_786:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x30cb7640ad0c0 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x18931256b030c and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x4e0da40128d8b and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe30cb7640ad0c0; op2val:0x3ff18931256b030c;
op3val:0x3fe4e0da40128d8b; valaddr_reg:x3; val_offset:2358*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2358*FLEN/8, x4, x1, x2)

inst_787:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x30cb7640ad0c0 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x18931256b030c and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x4e0da40128d8b and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe30cb7640ad0c0; op2val:0x3ff18931256b030c;
op3val:0x3fe4e0da40128d8b; valaddr_reg:x3; val_offset:2361*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2361*FLEN/8, x4, x1, x2)

inst_788:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x30cb7640ad0c0 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x18931256b030c and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x4e0da40128d8b and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe30cb7640ad0c0; op2val:0x3ff18931256b030c;
op3val:0x3fe4e0da40128d8b; valaddr_reg:x3; val_offset:2364*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2364*FLEN/8, x4, x1, x2)

inst_789:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x30cb7640ad0c0 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x18931256b030c and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x4e0da40128d8b and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe30cb7640ad0c0; op2val:0x3ff18931256b030c;
op3val:0x3fe4e0da40128d8b; valaddr_reg:x3; val_offset:2367*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2367*FLEN/8, x4, x1, x2)

inst_790:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x327d6d506ce8d and fs2 == 0 and fe2 == 0x3fb and fm2 == 0x6c0a6054ae63c and fs3 == 0 and fe3 == 0x3fa and fm3 == 0xb3d6c3a90aee0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe327d6d506ce8d; op2val:0x3fb6c0a6054ae63c;
op3val:0x3fab3d6c3a90aee0; valaddr_reg:x3; val_offset:2370*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2370*FLEN/8, x4, x1, x2)

inst_791:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x327d6d506ce8d and fs2 == 0 and fe2 == 0x3fb and fm2 == 0x6c0a6054ae63c and fs3 == 0 and fe3 == 0x3fa and fm3 == 0xb3d6c3a90aee0 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe327d6d506ce8d; op2val:0x3fb6c0a6054ae63c;
op3val:0x3fab3d6c3a90aee0; valaddr_reg:x3; val_offset:2373*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2373*FLEN/8, x4, x1, x2)

inst_792:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x327d6d506ce8d and fs2 == 0 and fe2 == 0x3fb and fm2 == 0x6c0a6054ae63c and fs3 == 0 and fe3 == 0x3fa and fm3 == 0xb3d6c3a90aee0 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe327d6d506ce8d; op2val:0x3fb6c0a6054ae63c;
op3val:0x3fab3d6c3a90aee0; valaddr_reg:x3; val_offset:2376*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2376*FLEN/8, x4, x1, x2)

inst_793:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x327d6d506ce8d and fs2 == 0 and fe2 == 0x3fb and fm2 == 0x6c0a6054ae63c and fs3 == 0 and fe3 == 0x3fa and fm3 == 0xb3d6c3a90aee0 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe327d6d506ce8d; op2val:0x3fb6c0a6054ae63c;
op3val:0x3fab3d6c3a90aee0; valaddr_reg:x3; val_offset:2379*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2379*FLEN/8, x4, x1, x2)

inst_794:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x327d6d506ce8d and fs2 == 0 and fe2 == 0x3fb and fm2 == 0x6c0a6054ae63c and fs3 == 0 and fe3 == 0x3fa and fm3 == 0xb3d6c3a90aee0 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe327d6d506ce8d; op2val:0x3fb6c0a6054ae63c;
op3val:0x3fab3d6c3a90aee0; valaddr_reg:x3; val_offset:2382*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2382*FLEN/8, x4, x1, x2)

inst_795:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x3417acc75d428 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xb4451fcd63c6c and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x0685c17594c3a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe3417acc75d428; op2val:0x3feb4451fcd63c6c;
op3val:0x3fe0685c17594c3a; valaddr_reg:x3; val_offset:2385*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2385*FLEN/8, x4, x1, x2)

inst_796:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x3417acc75d428 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xb4451fcd63c6c and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x0685c17594c3a and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe3417acc75d428; op2val:0x3feb4451fcd63c6c;
op3val:0x3fe0685c17594c3a; valaddr_reg:x3; val_offset:2388*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2388*FLEN/8, x4, x1, x2)

inst_797:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x3417acc75d428 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xb4451fcd63c6c and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x0685c17594c3a and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe3417acc75d428; op2val:0x3feb4451fcd63c6c;
op3val:0x3fe0685c17594c3a; valaddr_reg:x3; val_offset:2391*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2391*FLEN/8, x4, x1, x2)

inst_798:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x3417acc75d428 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xb4451fcd63c6c and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x0685c17594c3a and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe3417acc75d428; op2val:0x3feb4451fcd63c6c;
op3val:0x3fe0685c17594c3a; valaddr_reg:x3; val_offset:2394*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2394*FLEN/8, x4, x1, x2)

inst_799:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x3417acc75d428 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xb4451fcd63c6c and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x0685c17594c3a and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe3417acc75d428; op2val:0x3feb4451fcd63c6c;
op3val:0x3fe0685c17594c3a; valaddr_reg:x3; val_offset:2397*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2397*FLEN/8, x4, x1, x2)

inst_800:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x36bd6c01e666e and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xa02a6f04aa958 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xf92751589a90c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe36bd6c01e666e; op2val:0x3fea02a6f04aa958;
op3val:0x3fdf92751589a90c; valaddr_reg:x3; val_offset:2400*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2400*FLEN/8, x4, x1, x2)

inst_801:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x36bd6c01e666e and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xa02a6f04aa958 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xf92751589a90c and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe36bd6c01e666e; op2val:0x3fea02a6f04aa958;
op3val:0x3fdf92751589a90c; valaddr_reg:x3; val_offset:2403*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2403*FLEN/8, x4, x1, x2)

inst_802:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x36bd6c01e666e and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xa02a6f04aa958 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xf92751589a90c and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe36bd6c01e666e; op2val:0x3fea02a6f04aa958;
op3val:0x3fdf92751589a90c; valaddr_reg:x3; val_offset:2406*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2406*FLEN/8, x4, x1, x2)

inst_803:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x36bd6c01e666e and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xa02a6f04aa958 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xf92751589a90c and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe36bd6c01e666e; op2val:0x3fea02a6f04aa958;
op3val:0x3fdf92751589a90c; valaddr_reg:x3; val_offset:2409*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2409*FLEN/8, x4, x1, x2)

inst_804:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x36bd6c01e666e and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xa02a6f04aa958 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xf92751589a90c and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe36bd6c01e666e; op2val:0x3fea02a6f04aa958;
op3val:0x3fdf92751589a90c; valaddr_reg:x3; val_offset:2412*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2412*FLEN/8, x4, x1, x2)

inst_805:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x371a1ca686070 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xfa704eca5c789 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x33b90be6c6bce and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe371a1ca686070; op2val:0x3fefa704eca5c789;
op3val:0x3fe33b90be6c6bce; valaddr_reg:x3; val_offset:2415*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2415*FLEN/8, x4, x1, x2)

inst_806:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x371a1ca686070 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xfa704eca5c789 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x33b90be6c6bce and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe371a1ca686070; op2val:0x3fefa704eca5c789;
op3val:0x3fe33b90be6c6bce; valaddr_reg:x3; val_offset:2418*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2418*FLEN/8, x4, x1, x2)

inst_807:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x371a1ca686070 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xfa704eca5c789 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x33b90be6c6bce and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe371a1ca686070; op2val:0x3fefa704eca5c789;
op3val:0x3fe33b90be6c6bce; valaddr_reg:x3; val_offset:2421*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2421*FLEN/8, x4, x1, x2)

inst_808:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x371a1ca686070 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xfa704eca5c789 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x33b90be6c6bce and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe371a1ca686070; op2val:0x3fefa704eca5c789;
op3val:0x3fe33b90be6c6bce; valaddr_reg:x3; val_offset:2424*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2424*FLEN/8, x4, x1, x2)

inst_809:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x371a1ca686070 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xfa704eca5c789 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x33b90be6c6bce and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe371a1ca686070; op2val:0x3fefa704eca5c789;
op3val:0x3fe33b90be6c6bce; valaddr_reg:x3; val_offset:2427*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2427*FLEN/8, x4, x1, x2)

inst_810:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x37d570c552e21 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0xb05ba8faebf5e and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x0753ea80e4f00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe37d570c552e21; op2val:0x3fcb05ba8faebf5e;
op3val:0x3fc0753ea80e4f00; valaddr_reg:x3; val_offset:2430*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2430*FLEN/8, x4, x1, x2)

inst_811:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x37d570c552e21 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0xb05ba8faebf5e and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x0753ea80e4f00 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe37d570c552e21; op2val:0x3fcb05ba8faebf5e;
op3val:0x3fc0753ea80e4f00; valaddr_reg:x3; val_offset:2433*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2433*FLEN/8, x4, x1, x2)

inst_812:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x37d570c552e21 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0xb05ba8faebf5e and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x0753ea80e4f00 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe37d570c552e21; op2val:0x3fcb05ba8faebf5e;
op3val:0x3fc0753ea80e4f00; valaddr_reg:x3; val_offset:2436*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2436*FLEN/8, x4, x1, x2)

inst_813:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x37d570c552e21 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0xb05ba8faebf5e and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x0753ea80e4f00 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe37d570c552e21; op2val:0x3fcb05ba8faebf5e;
op3val:0x3fc0753ea80e4f00; valaddr_reg:x3; val_offset:2439*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2439*FLEN/8, x4, x1, x2)

inst_814:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x37d570c552e21 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0xb05ba8faebf5e and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x0753ea80e4f00 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe37d570c552e21; op2val:0x3fcb05ba8faebf5e;
op3val:0x3fc0753ea80e4f00; valaddr_reg:x3; val_offset:2442*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2442*FLEN/8, x4, x1, x2)

inst_815:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x38914c0f1585e and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x1a9416c1f25d1 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x5904dd91e06c8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe38914c0f1585e; op2val:0x3ff1a9416c1f25d1;
op3val:0x3fe5904dd91e06c8; valaddr_reg:x3; val_offset:2445*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2445*FLEN/8, x4, x1, x2)

inst_816:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x38914c0f1585e and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x1a9416c1f25d1 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x5904dd91e06c8 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe38914c0f1585e; op2val:0x3ff1a9416c1f25d1;
op3val:0x3fe5904dd91e06c8; valaddr_reg:x3; val_offset:2448*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2448*FLEN/8, x4, x1, x2)

inst_817:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x38914c0f1585e and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x1a9416c1f25d1 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x5904dd91e06c8 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe38914c0f1585e; op2val:0x3ff1a9416c1f25d1;
op3val:0x3fe5904dd91e06c8; valaddr_reg:x3; val_offset:2451*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2451*FLEN/8, x4, x1, x2)

inst_818:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x38914c0f1585e and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x1a9416c1f25d1 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x5904dd91e06c8 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe38914c0f1585e; op2val:0x3ff1a9416c1f25d1;
op3val:0x3fe5904dd91e06c8; valaddr_reg:x3; val_offset:2454*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2454*FLEN/8, x4, x1, x2)

inst_819:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x38914c0f1585e and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x1a9416c1f25d1 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x5904dd91e06c8 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe38914c0f1585e; op2val:0x3ff1a9416c1f25d1;
op3val:0x3fe5904dd91e06c8; valaddr_reg:x3; val_offset:2457*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2457*FLEN/8, x4, x1, x2)

inst_820:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x3a798b473abb6 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x1435740187afc and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x534cb3d395550 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe3a798b473abb6; op2val:0x3fe1435740187afc;
op3val:0x3fd534cb3d395550; valaddr_reg:x3; val_offset:2460*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2460*FLEN/8, x4, x1, x2)

inst_821:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x3a798b473abb6 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x1435740187afc and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x534cb3d395550 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe3a798b473abb6; op2val:0x3fe1435740187afc;
op3val:0x3fd534cb3d395550; valaddr_reg:x3; val_offset:2463*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2463*FLEN/8, x4, x1, x2)

inst_822:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x3a798b473abb6 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x1435740187afc and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x534cb3d395550 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe3a798b473abb6; op2val:0x3fe1435740187afc;
op3val:0x3fd534cb3d395550; valaddr_reg:x3; val_offset:2466*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2466*FLEN/8, x4, x1, x2)

inst_823:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x3a798b473abb6 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x1435740187afc and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x534cb3d395550 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe3a798b473abb6; op2val:0x3fe1435740187afc;
op3val:0x3fd534cb3d395550; valaddr_reg:x3; val_offset:2469*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2469*FLEN/8, x4, x1, x2)

inst_824:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x3a798b473abb6 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x1435740187afc and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x534cb3d395550 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe3a798b473abb6; op2val:0x3fe1435740187afc;
op3val:0x3fd534cb3d395550; valaddr_reg:x3; val_offset:2472*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2472*FLEN/8, x4, x1, x2)

inst_825:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x40d85ccdc0390 and fs2 == 0 and fe2 == 0x3fb and fm2 == 0x1e84c1ed19119 and fs3 == 0 and fe3 == 0x3fa and fm3 == 0x67181a49fc870 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe40d85ccdc0390; op2val:0x3fb1e84c1ed19119;
op3val:0x3fa67181a49fc870; valaddr_reg:x3; val_offset:2475*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2475*FLEN/8, x4, x1, x2)

inst_826:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x40d85ccdc0390 and fs2 == 0 and fe2 == 0x3fb and fm2 == 0x1e84c1ed19119 and fs3 == 0 and fe3 == 0x3fa and fm3 == 0x67181a49fc870 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe40d85ccdc0390; op2val:0x3fb1e84c1ed19119;
op3val:0x3fa67181a49fc870; valaddr_reg:x3; val_offset:2478*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2478*FLEN/8, x4, x1, x2)

inst_827:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x40d85ccdc0390 and fs2 == 0 and fe2 == 0x3fb and fm2 == 0x1e84c1ed19119 and fs3 == 0 and fe3 == 0x3fa and fm3 == 0x67181a49fc870 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe40d85ccdc0390; op2val:0x3fb1e84c1ed19119;
op3val:0x3fa67181a49fc870; valaddr_reg:x3; val_offset:2481*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2481*FLEN/8, x4, x1, x2)

inst_828:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x40d85ccdc0390 and fs2 == 0 and fe2 == 0x3fb and fm2 == 0x1e84c1ed19119 and fs3 == 0 and fe3 == 0x3fa and fm3 == 0x67181a49fc870 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe40d85ccdc0390; op2val:0x3fb1e84c1ed19119;
op3val:0x3fa67181a49fc870; valaddr_reg:x3; val_offset:2484*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2484*FLEN/8, x4, x1, x2)

inst_829:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x40d85ccdc0390 and fs2 == 0 and fe2 == 0x3fb and fm2 == 0x1e84c1ed19119 and fs3 == 0 and fe3 == 0x3fa and fm3 == 0x67181a49fc870 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe40d85ccdc0390; op2val:0x3fb1e84c1ed19119;
op3val:0x3fa67181a49fc870; valaddr_reg:x3; val_offset:2487*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2487*FLEN/8, x4, x1, x2)

inst_830:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x416c1e3bd7694 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xef22d3d8d0594 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x36d5e4670799f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe416c1e3bd7694; op2val:0x3feef22d3d8d0594;
op3val:0x3fe36d5e4670799f; valaddr_reg:x3; val_offset:2490*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2490*FLEN/8, x4, x1, x2)

inst_831:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x416c1e3bd7694 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xef22d3d8d0594 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x36d5e4670799f and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe416c1e3bd7694; op2val:0x3feef22d3d8d0594;
op3val:0x3fe36d5e4670799f; valaddr_reg:x3; val_offset:2493*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2493*FLEN/8, x4, x1, x2)

inst_832:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x416c1e3bd7694 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xef22d3d8d0594 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x36d5e4670799f and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe416c1e3bd7694; op2val:0x3feef22d3d8d0594;
op3val:0x3fe36d5e4670799f; valaddr_reg:x3; val_offset:2496*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2496*FLEN/8, x4, x1, x2)

inst_833:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x416c1e3bd7694 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xef22d3d8d0594 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x36d5e4670799f and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe416c1e3bd7694; op2val:0x3feef22d3d8d0594;
op3val:0x3fe36d5e4670799f; valaddr_reg:x3; val_offset:2499*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2499*FLEN/8, x4, x1, x2)

inst_834:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x416c1e3bd7694 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xef22d3d8d0594 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x36d5e4670799f and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe416c1e3bd7694; op2val:0x3feef22d3d8d0594;
op3val:0x3fe36d5e4670799f; valaddr_reg:x3; val_offset:2502*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2502*FLEN/8, x4, x1, x2)

inst_835:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x42f13218f8d55 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x600448492323d and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xbc110bd737bba and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe42f13218f8d55; op2val:0x3fe600448492323d;
op3val:0x3fdbc110bd737bba; valaddr_reg:x3; val_offset:2505*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2505*FLEN/8, x4, x1, x2)

inst_836:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x42f13218f8d55 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x600448492323d and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xbc110bd737bba and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe42f13218f8d55; op2val:0x3fe600448492323d;
op3val:0x3fdbc110bd737bba; valaddr_reg:x3; val_offset:2508*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2508*FLEN/8, x4, x1, x2)

inst_837:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x42f13218f8d55 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x600448492323d and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xbc110bd737bba and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe42f13218f8d55; op2val:0x3fe600448492323d;
op3val:0x3fdbc110bd737bba; valaddr_reg:x3; val_offset:2511*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2511*FLEN/8, x4, x1, x2)

inst_838:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x42f13218f8d55 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x600448492323d and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xbc110bd737bba and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe42f13218f8d55; op2val:0x3fe600448492323d;
op3val:0x3fdbc110bd737bba; valaddr_reg:x3; val_offset:2514*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2514*FLEN/8, x4, x1, x2)

inst_839:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x42f13218f8d55 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x600448492323d and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xbc110bd737bba and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe42f13218f8d55; op2val:0x3fe600448492323d;
op3val:0x3fdbc110bd737bba; valaddr_reg:x3; val_offset:2517*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2517*FLEN/8, x4, x1, x2)

inst_840:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x458c5ea1a780a and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x612919c153733 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xc11ad2b89e0c5 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe458c5ea1a780a; op2val:0x3ff612919c153733;
op3val:0x3fec11ad2b89e0c5; valaddr_reg:x3; val_offset:2520*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2520*FLEN/8, x4, x1, x2)

inst_841:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x458c5ea1a780a and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x612919c153733 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xc11ad2b89e0c5 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe458c5ea1a780a; op2val:0x3ff612919c153733;
op3val:0x3fec11ad2b89e0c5; valaddr_reg:x3; val_offset:2523*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2523*FLEN/8, x4, x1, x2)

inst_842:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x458c5ea1a780a and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x612919c153733 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xc11ad2b89e0c5 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe458c5ea1a780a; op2val:0x3ff612919c153733;
op3val:0x3fec11ad2b89e0c5; valaddr_reg:x3; val_offset:2526*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2526*FLEN/8, x4, x1, x2)

inst_843:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x458c5ea1a780a and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x612919c153733 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xc11ad2b89e0c5 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe458c5ea1a780a; op2val:0x3ff612919c153733;
op3val:0x3fec11ad2b89e0c5; valaddr_reg:x3; val_offset:2529*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2529*FLEN/8, x4, x1, x2)

inst_844:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x458c5ea1a780a and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x612919c153733 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xc11ad2b89e0c5 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe458c5ea1a780a; op2val:0x3ff612919c153733;
op3val:0x3fec11ad2b89e0c5; valaddr_reg:x3; val_offset:2532*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2532*FLEN/8, x4, x1, x2)

inst_845:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x47511b84c5fe2 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xca10c363833e2 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x24d6450fa3536 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe47511b84c5fe2; op2val:0x3feca10c363833e2;
op3val:0x3fe24d6450fa3536; valaddr_reg:x3; val_offset:2535*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2535*FLEN/8, x4, x1, x2)

inst_846:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x47511b84c5fe2 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xca10c363833e2 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x24d6450fa3536 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe47511b84c5fe2; op2val:0x3feca10c363833e2;
op3val:0x3fe24d6450fa3536; valaddr_reg:x3; val_offset:2538*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2538*FLEN/8, x4, x1, x2)

inst_847:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x47511b84c5fe2 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xca10c363833e2 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x24d6450fa3536 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe47511b84c5fe2; op2val:0x3feca10c363833e2;
op3val:0x3fe24d6450fa3536; valaddr_reg:x3; val_offset:2541*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2541*FLEN/8, x4, x1, x2)

inst_848:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x47511b84c5fe2 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xca10c363833e2 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x24d6450fa3536 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe47511b84c5fe2; op2val:0x3feca10c363833e2;
op3val:0x3fe24d6450fa3536; valaddr_reg:x3; val_offset:2544*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2544*FLEN/8, x4, x1, x2)

inst_849:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x47511b84c5fe2 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xca10c363833e2 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x24d6450fa3536 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe47511b84c5fe2; op2val:0x3feca10c363833e2;
op3val:0x3fe24d6450fa3536; valaddr_reg:x3; val_offset:2547*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2547*FLEN/8, x4, x1, x2)

inst_850:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x484f25544e440 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x71df6e5390ea5 and fs3 == 0 and fe3 == 0x3fb and fm3 == 0xda589f3d36cc8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe484f25544e440; op2val:0x3fc71df6e5390ea5;
op3val:0x3fbda589f3d36cc8; valaddr_reg:x3; val_offset:2550*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2550*FLEN/8, x4, x1, x2)

inst_851:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x484f25544e440 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x71df6e5390ea5 and fs3 == 0 and fe3 == 0x3fb and fm3 == 0xda589f3d36cc8 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe484f25544e440; op2val:0x3fc71df6e5390ea5;
op3val:0x3fbda589f3d36cc8; valaddr_reg:x3; val_offset:2553*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2553*FLEN/8, x4, x1, x2)

inst_852:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x484f25544e440 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x71df6e5390ea5 and fs3 == 0 and fe3 == 0x3fb and fm3 == 0xda589f3d36cc8 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe484f25544e440; op2val:0x3fc71df6e5390ea5;
op3val:0x3fbda589f3d36cc8; valaddr_reg:x3; val_offset:2556*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2556*FLEN/8, x4, x1, x2)

inst_853:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x484f25544e440 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x71df6e5390ea5 and fs3 == 0 and fe3 == 0x3fb and fm3 == 0xda589f3d36cc8 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe484f25544e440; op2val:0x3fc71df6e5390ea5;
op3val:0x3fbda589f3d36cc8; valaddr_reg:x3; val_offset:2559*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2559*FLEN/8, x4, x1, x2)

inst_854:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x484f25544e440 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x71df6e5390ea5 and fs3 == 0 and fe3 == 0x3fb and fm3 == 0xda589f3d36cc8 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe484f25544e440; op2val:0x3fc71df6e5390ea5;
op3val:0x3fbda589f3d36cc8; valaddr_reg:x3; val_offset:2562*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2562*FLEN/8, x4, x1, x2)

inst_855:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x49f3b4d1373b1 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x81bbc32baff3d and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xf1298380aa55c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe49f3b4d1373b1; op2val:0x3ff81bbc32baff3d;
op3val:0x3fef1298380aa55c; valaddr_reg:x3; val_offset:2565*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2565*FLEN/8, x4, x1, x2)

inst_856:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x49f3b4d1373b1 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x81bbc32baff3d and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xf1298380aa55c and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe49f3b4d1373b1; op2val:0x3ff81bbc32baff3d;
op3val:0x3fef1298380aa55c; valaddr_reg:x3; val_offset:2568*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2568*FLEN/8, x4, x1, x2)

inst_857:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x49f3b4d1373b1 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x81bbc32baff3d and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xf1298380aa55c and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe49f3b4d1373b1; op2val:0x3ff81bbc32baff3d;
op3val:0x3fef1298380aa55c; valaddr_reg:x3; val_offset:2571*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2571*FLEN/8, x4, x1, x2)

inst_858:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x49f3b4d1373b1 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x81bbc32baff3d and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xf1298380aa55c and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe49f3b4d1373b1; op2val:0x3ff81bbc32baff3d;
op3val:0x3fef1298380aa55c; valaddr_reg:x3; val_offset:2574*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2574*FLEN/8, x4, x1, x2)

inst_859:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x49f3b4d1373b1 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x81bbc32baff3d and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xf1298380aa55c and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe49f3b4d1373b1; op2val:0x3ff81bbc32baff3d;
op3val:0x3fef1298380aa55c; valaddr_reg:x3; val_offset:2577*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2577*FLEN/8, x4, x1, x2)

inst_860:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x4adcd2068c049 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xad4d37ef90056 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x156bec559a033 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe4adcd2068c049; op2val:0x3fead4d37ef90056;
op3val:0x3fe156bec559a033; valaddr_reg:x3; val_offset:2580*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2580*FLEN/8, x4, x1, x2)

inst_861:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x4adcd2068c049 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xad4d37ef90056 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x156bec559a033 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe4adcd2068c049; op2val:0x3fead4d37ef90056;
op3val:0x3fe156bec559a033; valaddr_reg:x3; val_offset:2583*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2583*FLEN/8, x4, x1, x2)

inst_862:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x4adcd2068c049 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xad4d37ef90056 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x156bec559a033 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe4adcd2068c049; op2val:0x3fead4d37ef90056;
op3val:0x3fe156bec559a033; valaddr_reg:x3; val_offset:2586*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2586*FLEN/8, x4, x1, x2)

inst_863:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x4adcd2068c049 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xad4d37ef90056 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x156bec559a033 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe4adcd2068c049; op2val:0x3fead4d37ef90056;
op3val:0x3fe156bec559a033; valaddr_reg:x3; val_offset:2589*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2589*FLEN/8, x4, x1, x2)

inst_864:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x4adcd2068c049 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xad4d37ef90056 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x156bec559a033 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe4adcd2068c049; op2val:0x3fead4d37ef90056;
op3val:0x3fe156bec559a033; valaddr_reg:x3; val_offset:2592*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2592*FLEN/8, x4, x1, x2)

inst_865:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x4c9762f60587f and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x63bd733f9210a and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xce2c0fb9d1c76 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe4c9762f60587f; op2val:0x3fe63bd733f9210a;
op3val:0x3fdce2c0fb9d1c76; valaddr_reg:x3; val_offset:2595*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2595*FLEN/8, x4, x1, x2)

inst_866:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x4c9762f60587f and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x63bd733f9210a and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xce2c0fb9d1c76 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe4c9762f60587f; op2val:0x3fe63bd733f9210a;
op3val:0x3fdce2c0fb9d1c76; valaddr_reg:x3; val_offset:2598*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2598*FLEN/8, x4, x1, x2)

inst_867:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x4c9762f60587f and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x63bd733f9210a and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xce2c0fb9d1c76 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe4c9762f60587f; op2val:0x3fe63bd733f9210a;
op3val:0x3fdce2c0fb9d1c76; valaddr_reg:x3; val_offset:2601*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2601*FLEN/8, x4, x1, x2)

inst_868:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x4c9762f60587f and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x63bd733f9210a and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xce2c0fb9d1c76 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe4c9762f60587f; op2val:0x3fe63bd733f9210a;
op3val:0x3fdce2c0fb9d1c76; valaddr_reg:x3; val_offset:2604*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2604*FLEN/8, x4, x1, x2)

inst_869:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x4c9762f60587f and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x63bd733f9210a and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xce2c0fb9d1c76 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe4c9762f60587f; op2val:0x3fe63bd733f9210a;
op3val:0x3fdce2c0fb9d1c76; valaddr_reg:x3; val_offset:2607*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2607*FLEN/8, x4, x1, x2)

inst_870:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x4e55e1cc90863 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x80eab026560b2 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xf6b353405a20f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe4e55e1cc90863; op2val:0x3ff80eab026560b2;
op3val:0x3fef6b353405a20f; valaddr_reg:x3; val_offset:2610*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2610*FLEN/8, x4, x1, x2)

inst_871:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x4e55e1cc90863 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x80eab026560b2 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xf6b353405a20f and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe4e55e1cc90863; op2val:0x3ff80eab026560b2;
op3val:0x3fef6b353405a20f; valaddr_reg:x3; val_offset:2613*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2613*FLEN/8, x4, x1, x2)

inst_872:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x4e55e1cc90863 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x80eab026560b2 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xf6b353405a20f and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe4e55e1cc90863; op2val:0x3ff80eab026560b2;
op3val:0x3fef6b353405a20f; valaddr_reg:x3; val_offset:2616*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2616*FLEN/8, x4, x1, x2)

inst_873:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x4e55e1cc90863 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x80eab026560b2 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xf6b353405a20f and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe4e55e1cc90863; op2val:0x3ff80eab026560b2;
op3val:0x3fef6b353405a20f; valaddr_reg:x3; val_offset:2619*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2619*FLEN/8, x4, x1, x2)

inst_874:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x4e55e1cc90863 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x80eab026560b2 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xf6b353405a20f and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe4e55e1cc90863; op2val:0x3ff80eab026560b2;
op3val:0x3fef6b353405a20f; valaddr_reg:x3; val_offset:2622*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2622*FLEN/8, x4, x1, x2)

inst_875:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x508904f349bc9 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x0547da5f301c4 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x577a271e39f58 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe508904f349bc9; op2val:0x3fd0547da5f301c4;
op3val:0x3fc577a271e39f58; valaddr_reg:x3; val_offset:2625*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2625*FLEN/8, x4, x1, x2)

inst_876:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x508904f349bc9 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x0547da5f301c4 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x577a271e39f58 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe508904f349bc9; op2val:0x3fd0547da5f301c4;
op3val:0x3fc577a271e39f58; valaddr_reg:x3; val_offset:2628*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2628*FLEN/8, x4, x1, x2)

inst_877:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x508904f349bc9 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x0547da5f301c4 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x577a271e39f58 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe508904f349bc9; op2val:0x3fd0547da5f301c4;
op3val:0x3fc577a271e39f58; valaddr_reg:x3; val_offset:2631*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2631*FLEN/8, x4, x1, x2)

inst_878:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x508904f349bc9 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x0547da5f301c4 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x577a271e39f58 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe508904f349bc9; op2val:0x3fd0547da5f301c4;
op3val:0x3fc577a271e39f58; valaddr_reg:x3; val_offset:2634*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2634*FLEN/8, x4, x1, x2)

inst_879:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x508904f349bc9 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x0547da5f301c4 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x577a271e39f58 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe508904f349bc9; op2val:0x3fd0547da5f301c4;
op3val:0x3fc577a271e39f58; valaddr_reg:x3; val_offset:2637*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2637*FLEN/8, x4, x1, x2)

inst_880:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x509209109e15f and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x1e5426aa7e2a2 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x7871c8e15e422 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe509209109e15f; op2val:0x3ff1e5426aa7e2a2;
op3val:0x3fe7871c8e15e422; valaddr_reg:x3; val_offset:2640*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2640*FLEN/8, x4, x1, x2)

inst_881:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x509209109e15f and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x1e5426aa7e2a2 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x7871c8e15e422 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe509209109e15f; op2val:0x3ff1e5426aa7e2a2;
op3val:0x3fe7871c8e15e422; valaddr_reg:x3; val_offset:2643*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2643*FLEN/8, x4, x1, x2)

inst_882:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x509209109e15f and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x1e5426aa7e2a2 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x7871c8e15e422 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe509209109e15f; op2val:0x3ff1e5426aa7e2a2;
op3val:0x3fe7871c8e15e422; valaddr_reg:x3; val_offset:2646*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2646*FLEN/8, x4, x1, x2)

inst_883:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x509209109e15f and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x1e5426aa7e2a2 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x7871c8e15e422 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe509209109e15f; op2val:0x3ff1e5426aa7e2a2;
op3val:0x3fe7871c8e15e422; valaddr_reg:x3; val_offset:2649*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2649*FLEN/8, x4, x1, x2)

inst_884:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x509209109e15f and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x1e5426aa7e2a2 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x7871c8e15e422 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe509209109e15f; op2val:0x3ff1e5426aa7e2a2;
op3val:0x3fe7871c8e15e422; valaddr_reg:x3; val_offset:2652*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2652*FLEN/8, x4, x1, x2)

inst_885:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x51e47cd98daf4 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x6f84050ef1fa5 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xe514cf79729ce and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe51e47cd98daf4; op2val:0x3ff6f84050ef1fa5;
op3val:0x3fee514cf79729ce; valaddr_reg:x3; val_offset:2655*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2655*FLEN/8, x4, x1, x2)

inst_886:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x51e47cd98daf4 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x6f84050ef1fa5 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xe514cf79729ce and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe51e47cd98daf4; op2val:0x3ff6f84050ef1fa5;
op3val:0x3fee514cf79729ce; valaddr_reg:x3; val_offset:2658*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2658*FLEN/8, x4, x1, x2)

inst_887:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x51e47cd98daf4 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x6f84050ef1fa5 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xe514cf79729ce and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe51e47cd98daf4; op2val:0x3ff6f84050ef1fa5;
op3val:0x3fee514cf79729ce; valaddr_reg:x3; val_offset:2661*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2661*FLEN/8, x4, x1, x2)

inst_888:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x51e47cd98daf4 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x6f84050ef1fa5 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xe514cf79729ce and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe51e47cd98daf4; op2val:0x3ff6f84050ef1fa5;
op3val:0x3fee514cf79729ce; valaddr_reg:x3; val_offset:2664*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2664*FLEN/8, x4, x1, x2)

inst_889:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x51e47cd98daf4 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x6f84050ef1fa5 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xe514cf79729ce and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe51e47cd98daf4; op2val:0x3ff6f84050ef1fa5;
op3val:0x3fee514cf79729ce; valaddr_reg:x3; val_offset:2667*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2667*FLEN/8, x4, x1, x2)

inst_890:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x55c04e3a72b0c and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x318f9922d820a and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x97e9d00dc81bc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe55c04e3a72b0c; op2val:0x3fd318f9922d820a;
op3val:0x3fc97e9d00dc81bc; valaddr_reg:x3; val_offset:2670*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2670*FLEN/8, x4, x1, x2)

inst_891:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x55c04e3a72b0c and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x318f9922d820a and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x97e9d00dc81bc and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe55c04e3a72b0c; op2val:0x3fd318f9922d820a;
op3val:0x3fc97e9d00dc81bc; valaddr_reg:x3; val_offset:2673*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2673*FLEN/8, x4, x1, x2)

inst_892:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x55c04e3a72b0c and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x318f9922d820a and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x97e9d00dc81bc and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe55c04e3a72b0c; op2val:0x3fd318f9922d820a;
op3val:0x3fc97e9d00dc81bc; valaddr_reg:x3; val_offset:2676*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2676*FLEN/8, x4, x1, x2)

inst_893:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x55c04e3a72b0c and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x318f9922d820a and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x97e9d00dc81bc and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe55c04e3a72b0c; op2val:0x3fd318f9922d820a;
op3val:0x3fc97e9d00dc81bc; valaddr_reg:x3; val_offset:2679*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2679*FLEN/8, x4, x1, x2)

inst_894:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x55c04e3a72b0c and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x318f9922d820a and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x97e9d00dc81bc and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe55c04e3a72b0c; op2val:0x3fd318f9922d820a;
op3val:0x3fc97e9d00dc81bc; valaddr_reg:x3; val_offset:2682*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2682*FLEN/8, x4, x1, x2)

inst_895:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x5736265744892 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x28b823dfafa69 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x8dcd7b58c0de7 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe5736265744892; op2val:0x3ff28b823dfafa69;
op3val:0x3fe8dcd7b58c0de7; valaddr_reg:x3; val_offset:2685*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2685*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_8)

inst_896:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x5736265744892 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x28b823dfafa69 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x8dcd7b58c0de7 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe5736265744892; op2val:0x3ff28b823dfafa69;
op3val:0x3fe8dcd7b58c0de7; valaddr_reg:x3; val_offset:2688*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2688*FLEN/8, x4, x1, x2)

inst_897:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x5736265744892 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x28b823dfafa69 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x8dcd7b58c0de7 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe5736265744892; op2val:0x3ff28b823dfafa69;
op3val:0x3fe8dcd7b58c0de7; valaddr_reg:x3; val_offset:2691*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2691*FLEN/8, x4, x1, x2)

inst_898:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x5736265744892 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x28b823dfafa69 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x8dcd7b58c0de7 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe5736265744892; op2val:0x3ff28b823dfafa69;
op3val:0x3fe8dcd7b58c0de7; valaddr_reg:x3; val_offset:2694*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2694*FLEN/8, x4, x1, x2)

inst_899:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x5736265744892 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x28b823dfafa69 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x8dcd7b58c0de7 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe5736265744892; op2val:0x3ff28b823dfafa69;
op3val:0x3fe8dcd7b58c0de7; valaddr_reg:x3; val_offset:2697*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2697*FLEN/8, x4, x1, x2)

inst_900:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x5918de1454aee and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x6ddfb02284956 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xed35febc1128c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe5918de1454aee; op2val:0x3fe6ddfb02284956;
op3val:0x3fded35febc1128c; valaddr_reg:x3; val_offset:2700*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2700*FLEN/8, x4, x1, x2)

inst_901:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x5918de1454aee and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x6ddfb02284956 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xed35febc1128c and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe5918de1454aee; op2val:0x3fe6ddfb02284956;
op3val:0x3fded35febc1128c; valaddr_reg:x3; val_offset:2703*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2703*FLEN/8, x4, x1, x2)

inst_902:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x5918de1454aee and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x6ddfb02284956 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xed35febc1128c and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe5918de1454aee; op2val:0x3fe6ddfb02284956;
op3val:0x3fded35febc1128c; valaddr_reg:x3; val_offset:2706*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2706*FLEN/8, x4, x1, x2)

inst_903:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x5918de1454aee and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x6ddfb02284956 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xed35febc1128c and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe5918de1454aee; op2val:0x3fe6ddfb02284956;
op3val:0x3fded35febc1128c; valaddr_reg:x3; val_offset:2709*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2709*FLEN/8, x4, x1, x2)

inst_904:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x5918de1454aee and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x6ddfb02284956 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xed35febc1128c and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe5918de1454aee; op2val:0x3fe6ddfb02284956;
op3val:0x3fded35febc1128c; valaddr_reg:x3; val_offset:2712*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2712*FLEN/8, x4, x1, x2)

inst_905:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x5a329783562c9 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x417e0c661f3f1 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xb2c3e5a6bb364 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe5a329783562c9; op2val:0x3ff417e0c661f3f1;
op3val:0x3feb2c3e5a6bb364; valaddr_reg:x3; val_offset:2715*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2715*FLEN/8, x4, x1, x2)

inst_906:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x5a329783562c9 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x417e0c661f3f1 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xb2c3e5a6bb364 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe5a329783562c9; op2val:0x3ff417e0c661f3f1;
op3val:0x3feb2c3e5a6bb364; valaddr_reg:x3; val_offset:2718*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2718*FLEN/8, x4, x1, x2)

inst_907:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x5a329783562c9 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x417e0c661f3f1 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xb2c3e5a6bb364 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe5a329783562c9; op2val:0x3ff417e0c661f3f1;
op3val:0x3feb2c3e5a6bb364; valaddr_reg:x3; val_offset:2721*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2721*FLEN/8, x4, x1, x2)

inst_908:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x5a329783562c9 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x417e0c661f3f1 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xb2c3e5a6bb364 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe5a329783562c9; op2val:0x3ff417e0c661f3f1;
op3val:0x3feb2c3e5a6bb364; valaddr_reg:x3; val_offset:2724*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2724*FLEN/8, x4, x1, x2)

inst_909:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x5a329783562c9 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x417e0c661f3f1 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xb2c3e5a6bb364 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe5a329783562c9; op2val:0x3ff417e0c661f3f1;
op3val:0x3feb2c3e5a6bb364; valaddr_reg:x3; val_offset:2727*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2727*FLEN/8, x4, x1, x2)

inst_910:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x5e2b04b843057 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0xde6d5ace4b245 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x4734f3ab2e53c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe5e2b04b843057; op2val:0x3fcde6d5ace4b245;
op3val:0x3fc4734f3ab2e53c; valaddr_reg:x3; val_offset:2730*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2730*FLEN/8, x4, x1, x2)

inst_911:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x5e2b04b843057 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0xde6d5ace4b245 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x4734f3ab2e53c and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe5e2b04b843057; op2val:0x3fcde6d5ace4b245;
op3val:0x3fc4734f3ab2e53c; valaddr_reg:x3; val_offset:2733*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2733*FLEN/8, x4, x1, x2)

inst_912:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x5e2b04b843057 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0xde6d5ace4b245 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x4734f3ab2e53c and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe5e2b04b843057; op2val:0x3fcde6d5ace4b245;
op3val:0x3fc4734f3ab2e53c; valaddr_reg:x3; val_offset:2736*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2736*FLEN/8, x4, x1, x2)

inst_913:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x5e2b04b843057 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0xde6d5ace4b245 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x4734f3ab2e53c and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe5e2b04b843057; op2val:0x3fcde6d5ace4b245;
op3val:0x3fc4734f3ab2e53c; valaddr_reg:x3; val_offset:2739*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2739*FLEN/8, x4, x1, x2)

inst_914:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x5e2b04b843057 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0xde6d5ace4b245 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x4734f3ab2e53c and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe5e2b04b843057; op2val:0x3fcde6d5ace4b245;
op3val:0x3fc4734f3ab2e53c; valaddr_reg:x3; val_offset:2742*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2742*FLEN/8, x4, x1, x2)

inst_915:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x5f281a2233944 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x3562774c741c4 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xa8627889ccac4 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe5f281a2233944; op2val:0x3fe3562774c741c4;
op3val:0x3fda8627889ccac4; valaddr_reg:x3; val_offset:2745*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2745*FLEN/8, x4, x1, x2)

inst_916:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x5f281a2233944 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x3562774c741c4 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xa8627889ccac4 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe5f281a2233944; op2val:0x3fe3562774c741c4;
op3val:0x3fda8627889ccac4; valaddr_reg:x3; val_offset:2748*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2748*FLEN/8, x4, x1, x2)

inst_917:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x5f281a2233944 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x3562774c741c4 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xa8627889ccac4 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe5f281a2233944; op2val:0x3fe3562774c741c4;
op3val:0x3fda8627889ccac4; valaddr_reg:x3; val_offset:2751*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2751*FLEN/8, x4, x1, x2)

inst_918:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x5f281a2233944 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x3562774c741c4 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xa8627889ccac4 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe5f281a2233944; op2val:0x3fe3562774c741c4;
op3val:0x3fda8627889ccac4; valaddr_reg:x3; val_offset:2754*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2754*FLEN/8, x4, x1, x2)

inst_919:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x5f281a2233944 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x3562774c741c4 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xa8627889ccac4 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe5f281a2233944; op2val:0x3fe3562774c741c4;
op3val:0x3fda8627889ccac4; valaddr_reg:x3; val_offset:2757*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2757*FLEN/8, x4, x1, x2)

inst_920:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x60428817c3da5 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x02998bad65ec7 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x63d6551e02b09 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe60428817c3da5; op2val:0x3ff02998bad65ec7;
op3val:0x3fe63d6551e02b09; valaddr_reg:x3; val_offset:2760*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2760*FLEN/8, x4, x1, x2)

inst_921:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x60428817c3da5 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x02998bad65ec7 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x63d6551e02b09 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe60428817c3da5; op2val:0x3ff02998bad65ec7;
op3val:0x3fe63d6551e02b09; valaddr_reg:x3; val_offset:2763*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2763*FLEN/8, x4, x1, x2)

inst_922:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x60428817c3da5 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x02998bad65ec7 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x63d6551e02b09 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe60428817c3da5; op2val:0x3ff02998bad65ec7;
op3val:0x3fe63d6551e02b09; valaddr_reg:x3; val_offset:2766*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2766*FLEN/8, x4, x1, x2)

inst_923:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x60428817c3da5 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x02998bad65ec7 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x63d6551e02b09 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe60428817c3da5; op2val:0x3ff02998bad65ec7;
op3val:0x3fe63d6551e02b09; valaddr_reg:x3; val_offset:2769*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2769*FLEN/8, x4, x1, x2)

inst_924:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x60428817c3da5 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x02998bad65ec7 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x63d6551e02b09 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe60428817c3da5; op2val:0x3ff02998bad65ec7;
op3val:0x3fe63d6551e02b09; valaddr_reg:x3; val_offset:2772*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2772*FLEN/8, x4, x1, x2)

inst_925:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x6182ef720e7c6 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xdd1eeb49b9a17 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x496dd5344a6b0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe6182ef720e7c6; op2val:0x3fedd1eeb49b9a17;
op3val:0x3fe496dd5344a6b0; valaddr_reg:x3; val_offset:2775*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2775*FLEN/8, x4, x1, x2)

inst_926:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x6182ef720e7c6 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xdd1eeb49b9a17 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x496dd5344a6b0 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe6182ef720e7c6; op2val:0x3fedd1eeb49b9a17;
op3val:0x3fe496dd5344a6b0; valaddr_reg:x3; val_offset:2778*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2778*FLEN/8, x4, x1, x2)

inst_927:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x6182ef720e7c6 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xdd1eeb49b9a17 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x496dd5344a6b0 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe6182ef720e7c6; op2val:0x3fedd1eeb49b9a17;
op3val:0x3fe496dd5344a6b0; valaddr_reg:x3; val_offset:2781*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2781*FLEN/8, x4, x1, x2)

inst_928:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x6182ef720e7c6 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xdd1eeb49b9a17 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x496dd5344a6b0 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe6182ef720e7c6; op2val:0x3fedd1eeb49b9a17;
op3val:0x3fe496dd5344a6b0; valaddr_reg:x3; val_offset:2784*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2784*FLEN/8, x4, x1, x2)

inst_929:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x6182ef720e7c6 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xdd1eeb49b9a17 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x496dd5344a6b0 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe6182ef720e7c6; op2val:0x3fedd1eeb49b9a17;
op3val:0x3fe496dd5344a6b0; valaddr_reg:x3; val_offset:2787*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2787*FLEN/8, x4, x1, x2)

inst_930:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x620eab9c24beb and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x1047b1ce9f688 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x7892be5168458 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe620eab9c24beb; op2val:0x3fd1047b1ce9f688;
op3val:0x3fc7892be5168458; valaddr_reg:x3; val_offset:2790*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2790*FLEN/8, x4, x1, x2)

inst_931:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x620eab9c24beb and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x1047b1ce9f688 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x7892be5168458 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe620eab9c24beb; op2val:0x3fd1047b1ce9f688;
op3val:0x3fc7892be5168458; valaddr_reg:x3; val_offset:2793*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2793*FLEN/8, x4, x1, x2)

inst_932:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x620eab9c24beb and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x1047b1ce9f688 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x7892be5168458 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe620eab9c24beb; op2val:0x3fd1047b1ce9f688;
op3val:0x3fc7892be5168458; valaddr_reg:x3; val_offset:2796*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2796*FLEN/8, x4, x1, x2)

inst_933:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x620eab9c24beb and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x1047b1ce9f688 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x7892be5168458 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe620eab9c24beb; op2val:0x3fd1047b1ce9f688;
op3val:0x3fc7892be5168458; valaddr_reg:x3; val_offset:2799*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2799*FLEN/8, x4, x1, x2)

inst_934:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x620eab9c24beb and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x1047b1ce9f688 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x7892be5168458 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe620eab9c24beb; op2val:0x3fd1047b1ce9f688;
op3val:0x3fc7892be5168458; valaddr_reg:x3; val_offset:2802*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2802*FLEN/8, x4, x1, x2)

inst_935:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x643a0e97b37d2 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x1a48bfc0a495a and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x88cd2f3a97d5e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe643a0e97b37d2; op2val:0x3ff1a48bfc0a495a;
op3val:0x3fe88cd2f3a97d5e; valaddr_reg:x3; val_offset:2805*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2805*FLEN/8, x4, x1, x2)

inst_936:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x643a0e97b37d2 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x1a48bfc0a495a and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x88cd2f3a97d5e and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe643a0e97b37d2; op2val:0x3ff1a48bfc0a495a;
op3val:0x3fe88cd2f3a97d5e; valaddr_reg:x3; val_offset:2808*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2808*FLEN/8, x4, x1, x2)

inst_937:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x643a0e97b37d2 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x1a48bfc0a495a and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x88cd2f3a97d5e and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe643a0e97b37d2; op2val:0x3ff1a48bfc0a495a;
op3val:0x3fe88cd2f3a97d5e; valaddr_reg:x3; val_offset:2811*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2811*FLEN/8, x4, x1, x2)

inst_938:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x643a0e97b37d2 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x1a48bfc0a495a and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x88cd2f3a97d5e and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe643a0e97b37d2; op2val:0x3ff1a48bfc0a495a;
op3val:0x3fe88cd2f3a97d5e; valaddr_reg:x3; val_offset:2814*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2814*FLEN/8, x4, x1, x2)

inst_939:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x643a0e97b37d2 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x1a48bfc0a495a and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x88cd2f3a97d5e and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe643a0e97b37d2; op2val:0x3ff1a48bfc0a495a;
op3val:0x3fe88cd2f3a97d5e; valaddr_reg:x3; val_offset:2817*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2817*FLEN/8, x4, x1, x2)

inst_940:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x69f43cbd1ad44 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x877d480eebf7f and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x14c2957423314 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe69f43cbd1ad44; op2val:0x3fe877d480eebf7f;
op3val:0x3fe14c2957423314; valaddr_reg:x3; val_offset:2820*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2820*FLEN/8, x4, x1, x2)

inst_941:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x69f43cbd1ad44 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x877d480eebf7f and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x14c2957423314 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe69f43cbd1ad44; op2val:0x3fe877d480eebf7f;
op3val:0x3fe14c2957423314; valaddr_reg:x3; val_offset:2823*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2823*FLEN/8, x4, x1, x2)

inst_942:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x69f43cbd1ad44 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x877d480eebf7f and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x14c2957423314 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe69f43cbd1ad44; op2val:0x3fe877d480eebf7f;
op3val:0x3fe14c2957423314; valaddr_reg:x3; val_offset:2826*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2826*FLEN/8, x4, x1, x2)

inst_943:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x69f43cbd1ad44 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x877d480eebf7f and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x14c2957423314 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe69f43cbd1ad44; op2val:0x3fe877d480eebf7f;
op3val:0x3fe14c2957423314; valaddr_reg:x3; val_offset:2829*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2829*FLEN/8, x4, x1, x2)

inst_944:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x69f43cbd1ad44 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x877d480eebf7f and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x14c2957423314 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe69f43cbd1ad44; op2val:0x3fe877d480eebf7f;
op3val:0x3fe14c2957423314; valaddr_reg:x3; val_offset:2832*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2832*FLEN/8, x4, x1, x2)

inst_945:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x6d761a60ec568 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x551524634d31f and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xe6ec7fc5a3584 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe6d761a60ec568; op2val:0x3ff551524634d31f;
op3val:0x3fee6ec7fc5a3584; valaddr_reg:x3; val_offset:2835*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2835*FLEN/8, x4, x1, x2)

inst_946:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x6d761a60ec568 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x551524634d31f and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xe6ec7fc5a3584 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe6d761a60ec568; op2val:0x3ff551524634d31f;
op3val:0x3fee6ec7fc5a3584; valaddr_reg:x3; val_offset:2838*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2838*FLEN/8, x4, x1, x2)

inst_947:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x6d761a60ec568 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x551524634d31f and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xe6ec7fc5a3584 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe6d761a60ec568; op2val:0x3ff551524634d31f;
op3val:0x3fee6ec7fc5a3584; valaddr_reg:x3; val_offset:2841*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2841*FLEN/8, x4, x1, x2)

inst_948:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x6d761a60ec568 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x551524634d31f and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xe6ec7fc5a3584 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe6d761a60ec568; op2val:0x3ff551524634d31f;
op3val:0x3fee6ec7fc5a3584; valaddr_reg:x3; val_offset:2844*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2844*FLEN/8, x4, x1, x2)

inst_949:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x6d761a60ec568 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x551524634d31f and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xe6ec7fc5a3584 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe6d761a60ec568; op2val:0x3ff551524634d31f;
op3val:0x3fee6ec7fc5a3584; valaddr_reg:x3; val_offset:2847*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2847*FLEN/8, x4, x1, x2)

inst_950:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x6dc2cc175cc22 and fs2 == 0 and fe2 == 0x3fb and fm2 == 0x714e661939458 and fs3 == 0 and fe3 == 0x3fb and fm3 == 0x07d2e5b3c17e8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe6dc2cc175cc22; op2val:0x3fb714e661939458;
op3val:0x3fb07d2e5b3c17e8; valaddr_reg:x3; val_offset:2850*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2850*FLEN/8, x4, x1, x2)

inst_951:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x6dc2cc175cc22 and fs2 == 0 and fe2 == 0x3fb and fm2 == 0x714e661939458 and fs3 == 0 and fe3 == 0x3fb and fm3 == 0x07d2e5b3c17e8 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe6dc2cc175cc22; op2val:0x3fb714e661939458;
op3val:0x3fb07d2e5b3c17e8; valaddr_reg:x3; val_offset:2853*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2853*FLEN/8, x4, x1, x2)

inst_952:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x6dc2cc175cc22 and fs2 == 0 and fe2 == 0x3fb and fm2 == 0x714e661939458 and fs3 == 0 and fe3 == 0x3fb and fm3 == 0x07d2e5b3c17e8 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe6dc2cc175cc22; op2val:0x3fb714e661939458;
op3val:0x3fb07d2e5b3c17e8; valaddr_reg:x3; val_offset:2856*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2856*FLEN/8, x4, x1, x2)

inst_953:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x6dc2cc175cc22 and fs2 == 0 and fe2 == 0x3fb and fm2 == 0x714e661939458 and fs3 == 0 and fe3 == 0x3fb and fm3 == 0x07d2e5b3c17e8 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe6dc2cc175cc22; op2val:0x3fb714e661939458;
op3val:0x3fb07d2e5b3c17e8; valaddr_reg:x3; val_offset:2859*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2859*FLEN/8, x4, x1, x2)

inst_954:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x6dc2cc175cc22 and fs2 == 0 and fe2 == 0x3fb and fm2 == 0x714e661939458 and fs3 == 0 and fe3 == 0x3fb and fm3 == 0x07d2e5b3c17e8 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe6dc2cc175cc22; op2val:0x3fb714e661939458;
op3val:0x3fb07d2e5b3c17e8; valaddr_reg:x3; val_offset:2862*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2862*FLEN/8, x4, x1, x2)

inst_955:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x6fa670d9ad9d5 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x0e292b19cd50a and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x83fcaa93ab0a6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe6fa670d9ad9d5; op2val:0x3ff0e292b19cd50a;
op3val:0x3fe83fcaa93ab0a6; valaddr_reg:x3; val_offset:2865*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2865*FLEN/8, x4, x1, x2)

inst_956:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x6fa670d9ad9d5 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x0e292b19cd50a and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x83fcaa93ab0a6 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe6fa670d9ad9d5; op2val:0x3ff0e292b19cd50a;
op3val:0x3fe83fcaa93ab0a6; valaddr_reg:x3; val_offset:2868*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2868*FLEN/8, x4, x1, x2)

inst_957:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x6fa670d9ad9d5 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x0e292b19cd50a and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x83fcaa93ab0a6 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe6fa670d9ad9d5; op2val:0x3ff0e292b19cd50a;
op3val:0x3fe83fcaa93ab0a6; valaddr_reg:x3; val_offset:2871*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2871*FLEN/8, x4, x1, x2)

inst_958:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x6fa670d9ad9d5 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x0e292b19cd50a and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x83fcaa93ab0a6 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe6fa670d9ad9d5; op2val:0x3ff0e292b19cd50a;
op3val:0x3fe83fcaa93ab0a6; valaddr_reg:x3; val_offset:2874*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2874*FLEN/8, x4, x1, x2)

inst_959:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x6fa670d9ad9d5 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x0e292b19cd50a and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x83fcaa93ab0a6 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe6fa670d9ad9d5; op2val:0x3ff0e292b19cd50a;
op3val:0x3fe83fcaa93ab0a6; valaddr_reg:x3; val_offset:2877*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2877*FLEN/8, x4, x1, x2)

inst_960:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x7172cb52ca658 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x9ee11b944f617 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x2b5e4140ddb93 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe7172cb52ca658; op2val:0x3fe9ee11b944f617;
op3val:0x3fe2b5e4140ddb93; valaddr_reg:x3; val_offset:2880*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2880*FLEN/8, x4, x1, x2)

inst_961:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x7172cb52ca658 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x9ee11b944f617 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x2b5e4140ddb93 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe7172cb52ca658; op2val:0x3fe9ee11b944f617;
op3val:0x3fe2b5e4140ddb93; valaddr_reg:x3; val_offset:2883*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2883*FLEN/8, x4, x1, x2)

inst_962:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x7172cb52ca658 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x9ee11b944f617 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x2b5e4140ddb93 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe7172cb52ca658; op2val:0x3fe9ee11b944f617;
op3val:0x3fe2b5e4140ddb93; valaddr_reg:x3; val_offset:2886*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2886*FLEN/8, x4, x1, x2)

inst_963:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x7172cb52ca658 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x9ee11b944f617 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x2b5e4140ddb93 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe7172cb52ca658; op2val:0x3fe9ee11b944f617;
op3val:0x3fe2b5e4140ddb93; valaddr_reg:x3; val_offset:2889*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2889*FLEN/8, x4, x1, x2)

inst_964:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x7172cb52ca658 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x9ee11b944f617 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x2b5e4140ddb93 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe7172cb52ca658; op2val:0x3fe9ee11b944f617;
op3val:0x3fe2b5e4140ddb93; valaddr_reg:x3; val_offset:2892*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2892*FLEN/8, x4, x1, x2)

inst_965:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x731ed9c953e1c and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x5021bd6cf3a04 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xe749676e0a083 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe731ed9c953e1c; op2val:0x3ff5021bd6cf3a04;
op3val:0x3fee749676e0a083; valaddr_reg:x3; val_offset:2895*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2895*FLEN/8, x4, x1, x2)

inst_966:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x731ed9c953e1c and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x5021bd6cf3a04 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xe749676e0a083 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe731ed9c953e1c; op2val:0x3ff5021bd6cf3a04;
op3val:0x3fee749676e0a083; valaddr_reg:x3; val_offset:2898*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2898*FLEN/8, x4, x1, x2)

inst_967:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x731ed9c953e1c and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x5021bd6cf3a04 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xe749676e0a083 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe731ed9c953e1c; op2val:0x3ff5021bd6cf3a04;
op3val:0x3fee749676e0a083; valaddr_reg:x3; val_offset:2901*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2901*FLEN/8, x4, x1, x2)

inst_968:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x731ed9c953e1c and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x5021bd6cf3a04 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xe749676e0a083 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe731ed9c953e1c; op2val:0x3ff5021bd6cf3a04;
op3val:0x3fee749676e0a083; valaddr_reg:x3; val_offset:2904*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2904*FLEN/8, x4, x1, x2)

inst_969:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x731ed9c953e1c and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x5021bd6cf3a04 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xe749676e0a083 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe731ed9c953e1c; op2val:0x3ff5021bd6cf3a04;
op3val:0x3fee749676e0a083; valaddr_reg:x3; val_offset:2907*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2907*FLEN/8, x4, x1, x2)

inst_970:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x758816cfa15b7 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x31703afe812f6 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xbdaae4cb88c4f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe758816cfa15b7; op2val:0x3ff31703afe812f6;
op3val:0x3febdaae4cb88c4f; valaddr_reg:x3; val_offset:2910*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2910*FLEN/8, x4, x1, x2)

inst_971:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x758816cfa15b7 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x31703afe812f6 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xbdaae4cb88c4f and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe758816cfa15b7; op2val:0x3ff31703afe812f6;
op3val:0x3febdaae4cb88c4f; valaddr_reg:x3; val_offset:2913*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2913*FLEN/8, x4, x1, x2)

inst_972:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x758816cfa15b7 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x31703afe812f6 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xbdaae4cb88c4f and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe758816cfa15b7; op2val:0x3ff31703afe812f6;
op3val:0x3febdaae4cb88c4f; valaddr_reg:x3; val_offset:2916*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2916*FLEN/8, x4, x1, x2)

inst_973:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x758816cfa15b7 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x31703afe812f6 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xbdaae4cb88c4f and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe758816cfa15b7; op2val:0x3ff31703afe812f6;
op3val:0x3febdaae4cb88c4f; valaddr_reg:x3; val_offset:2919*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2919*FLEN/8, x4, x1, x2)

inst_974:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x758816cfa15b7 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x31703afe812f6 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xbdaae4cb88c4f and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe758816cfa15b7; op2val:0x3ff31703afe812f6;
op3val:0x3febdaae4cb88c4f; valaddr_reg:x3; val_offset:2922*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2922*FLEN/8, x4, x1, x2)

inst_975:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x76db16583602c and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x30799ddc49483 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xbdd63f3d3c1e4 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe76db16583602c; op2val:0x3ff30799ddc49483;
op3val:0x3febdd63f3d3c1e4; valaddr_reg:x3; val_offset:2925*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2925*FLEN/8, x4, x1, x2)

inst_976:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x76db16583602c and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x30799ddc49483 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xbdd63f3d3c1e4 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe76db16583602c; op2val:0x3ff30799ddc49483;
op3val:0x3febdd63f3d3c1e4; valaddr_reg:x3; val_offset:2928*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2928*FLEN/8, x4, x1, x2)

inst_977:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x76db16583602c and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x30799ddc49483 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xbdd63f3d3c1e4 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe76db16583602c; op2val:0x3ff30799ddc49483;
op3val:0x3febdd63f3d3c1e4; valaddr_reg:x3; val_offset:2931*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2931*FLEN/8, x4, x1, x2)

inst_978:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x76db16583602c and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x30799ddc49483 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xbdd63f3d3c1e4 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe76db16583602c; op2val:0x3ff30799ddc49483;
op3val:0x3febdd63f3d3c1e4; valaddr_reg:x3; val_offset:2934*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2934*FLEN/8, x4, x1, x2)

inst_979:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x76db16583602c and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x30799ddc49483 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xbdd63f3d3c1e4 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe76db16583602c; op2val:0x3ff30799ddc49483;
op3val:0x3febdd63f3d3c1e4; valaddr_reg:x3; val_offset:2937*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2937*FLEN/8, x4, x1, x2)

inst_980:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x79383468b1e88 and fs2 == 0 and fe2 == 0x3fa and fm2 == 0xa8e540ab0980b and fs3 == 0 and fe3 == 0x3fa and fm3 == 0x390b72af2dfb0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe79383468b1e88; op2val:0x3faa8e540ab0980b;
op3val:0x3fa390b72af2dfb0; valaddr_reg:x3; val_offset:2940*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2940*FLEN/8, x4, x1, x2)

inst_981:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x79383468b1e88 and fs2 == 0 and fe2 == 0x3fa and fm2 == 0xa8e540ab0980b and fs3 == 0 and fe3 == 0x3fa and fm3 == 0x390b72af2dfb0 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe79383468b1e88; op2val:0x3faa8e540ab0980b;
op3val:0x3fa390b72af2dfb0; valaddr_reg:x3; val_offset:2943*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2943*FLEN/8, x4, x1, x2)

inst_982:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x79383468b1e88 and fs2 == 0 and fe2 == 0x3fa and fm2 == 0xa8e540ab0980b and fs3 == 0 and fe3 == 0x3fa and fm3 == 0x390b72af2dfb0 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe79383468b1e88; op2val:0x3faa8e540ab0980b;
op3val:0x3fa390b72af2dfb0; valaddr_reg:x3; val_offset:2946*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2946*FLEN/8, x4, x1, x2)

inst_983:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x79383468b1e88 and fs2 == 0 and fe2 == 0x3fa and fm2 == 0xa8e540ab0980b and fs3 == 0 and fe3 == 0x3fa and fm3 == 0x390b72af2dfb0 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe79383468b1e88; op2val:0x3faa8e540ab0980b;
op3val:0x3fa390b72af2dfb0; valaddr_reg:x3; val_offset:2949*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2949*FLEN/8, x4, x1, x2)

inst_984:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x79383468b1e88 and fs2 == 0 and fe2 == 0x3fa and fm2 == 0xa8e540ab0980b and fs3 == 0 and fe3 == 0x3fa and fm3 == 0x390b72af2dfb0 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe79383468b1e88; op2val:0x3faa8e540ab0980b;
op3val:0x3fa390b72af2dfb0; valaddr_reg:x3; val_offset:2952*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2952*FLEN/8, x4, x1, x2)

inst_985:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x7a4f1bded2960 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xb6d62c7ae57c9 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x443fecc5df179 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe7a4f1bded2960; op2val:0x3feb6d62c7ae57c9;
op3val:0x3fe443fecc5df179; valaddr_reg:x3; val_offset:2955*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2955*FLEN/8, x4, x1, x2)

inst_986:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x7a4f1bded2960 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xb6d62c7ae57c9 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x443fecc5df179 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe7a4f1bded2960; op2val:0x3feb6d62c7ae57c9;
op3val:0x3fe443fecc5df179; valaddr_reg:x3; val_offset:2958*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2958*FLEN/8, x4, x1, x2)

inst_987:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x7a4f1bded2960 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xb6d62c7ae57c9 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x443fecc5df179 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe7a4f1bded2960; op2val:0x3feb6d62c7ae57c9;
op3val:0x3fe443fecc5df179; valaddr_reg:x3; val_offset:2961*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2961*FLEN/8, x4, x1, x2)

inst_988:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x7a4f1bded2960 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xb6d62c7ae57c9 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x443fecc5df179 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe7a4f1bded2960; op2val:0x3feb6d62c7ae57c9;
op3val:0x3fe443fecc5df179; valaddr_reg:x3; val_offset:2964*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2964*FLEN/8, x4, x1, x2)

inst_989:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x7a4f1bded2960 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xb6d62c7ae57c9 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x443fecc5df179 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe7a4f1bded2960; op2val:0x3feb6d62c7ae57c9;
op3val:0x3fe443fecc5df179; valaddr_reg:x3; val_offset:2967*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2967*FLEN/8, x4, x1, x2)

inst_990:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x7b34899d29531 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x91a2c04082ad8 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x29772fca9c8ca and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe7b34899d29531; op2val:0x3fe91a2c04082ad8;
op3val:0x3fe29772fca9c8ca; valaddr_reg:x3; val_offset:2970*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2970*FLEN/8, x4, x1, x2)

inst_991:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x7b34899d29531 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x91a2c04082ad8 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x29772fca9c8ca and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe7b34899d29531; op2val:0x3fe91a2c04082ad8;
op3val:0x3fe29772fca9c8ca; valaddr_reg:x3; val_offset:2973*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2973*FLEN/8, x4, x1, x2)

inst_992:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x7b34899d29531 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x91a2c04082ad8 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x29772fca9c8ca and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe7b34899d29531; op2val:0x3fe91a2c04082ad8;
op3val:0x3fe29772fca9c8ca; valaddr_reg:x3; val_offset:2976*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2976*FLEN/8, x4, x1, x2)

inst_993:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x7b34899d29531 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x91a2c04082ad8 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x29772fca9c8ca and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe7b34899d29531; op2val:0x3fe91a2c04082ad8;
op3val:0x3fe29772fca9c8ca; valaddr_reg:x3; val_offset:2979*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2979*FLEN/8, x4, x1, x2)

inst_994:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x7b34899d29531 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x91a2c04082ad8 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x29772fca9c8ca and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe7b34899d29531; op2val:0x3fe91a2c04082ad8;
op3val:0x3fe29772fca9c8ca; valaddr_reg:x3; val_offset:2982*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2982*FLEN/8, x4, x1, x2)

inst_995:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x7b4d7f739b524 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xa9024b0d22222 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x3adb87328ace0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe7b4d7f739b524; op2val:0x3fda9024b0d22222;
op3val:0x3fd3adb87328ace0; valaddr_reg:x3; val_offset:2985*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2985*FLEN/8, x4, x1, x2)

inst_996:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x7b4d7f739b524 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xa9024b0d22222 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x3adb87328ace0 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe7b4d7f739b524; op2val:0x3fda9024b0d22222;
op3val:0x3fd3adb87328ace0; valaddr_reg:x3; val_offset:2988*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2988*FLEN/8, x4, x1, x2)

inst_997:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x7b4d7f739b524 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xa9024b0d22222 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x3adb87328ace0 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe7b4d7f739b524; op2val:0x3fda9024b0d22222;
op3val:0x3fd3adb87328ace0; valaddr_reg:x3; val_offset:2991*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2991*FLEN/8, x4, x1, x2)

inst_998:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x7b4d7f739b524 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xa9024b0d22222 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x3adb87328ace0 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe7b4d7f739b524; op2val:0x3fda9024b0d22222;
op3val:0x3fd3adb87328ace0; valaddr_reg:x3; val_offset:2994*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2994*FLEN/8, x4, x1, x2)

inst_999:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x7b4d7f739b524 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xa9024b0d22222 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x3adb87328ace0 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe7b4d7f739b524; op2val:0x3fda9024b0d22222;
op3val:0x3fd3adb87328ace0; valaddr_reg:x3; val_offset:2997*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2997*FLEN/8, x4, x1, x2)

inst_1000:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x7d22cca46ebe9 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x1fc212c485561 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xac6af3bc744f0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe7d22cca46ebe9; op2val:0x3ff1fc212c485561;
op3val:0x3feac6af3bc744f0; valaddr_reg:x3; val_offset:3000*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3000*FLEN/8, x4, x1, x2)

inst_1001:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x7d22cca46ebe9 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x1fc212c485561 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xac6af3bc744f0 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe7d22cca46ebe9; op2val:0x3ff1fc212c485561;
op3val:0x3feac6af3bc744f0; valaddr_reg:x3; val_offset:3003*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3003*FLEN/8, x4, x1, x2)

inst_1002:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x7d22cca46ebe9 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x1fc212c485561 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xac6af3bc744f0 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe7d22cca46ebe9; op2val:0x3ff1fc212c485561;
op3val:0x3feac6af3bc744f0; valaddr_reg:x3; val_offset:3006*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3006*FLEN/8, x4, x1, x2)

inst_1003:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x7d22cca46ebe9 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x1fc212c485561 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xac6af3bc744f0 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe7d22cca46ebe9; op2val:0x3ff1fc212c485561;
op3val:0x3feac6af3bc744f0; valaddr_reg:x3; val_offset:3009*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3009*FLEN/8, x4, x1, x2)

inst_1004:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x7d22cca46ebe9 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x1fc212c485561 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xac6af3bc744f0 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe7d22cca46ebe9; op2val:0x3ff1fc212c485561;
op3val:0x3feac6af3bc744f0; valaddr_reg:x3; val_offset:3012*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3012*FLEN/8, x4, x1, x2)

inst_1005:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x7ed81242d99cb and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xbedc50b55d42b and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x4e22f51974420 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe7ed81242d99cb; op2val:0x3febedc50b55d42b;
op3val:0x3fe4e22f51974420; valaddr_reg:x3; val_offset:3015*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3015*FLEN/8, x4, x1, x2)

inst_1006:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x7ed81242d99cb and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xbedc50b55d42b and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x4e22f51974420 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe7ed81242d99cb; op2val:0x3febedc50b55d42b;
op3val:0x3fe4e22f51974420; valaddr_reg:x3; val_offset:3018*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3018*FLEN/8, x4, x1, x2)

inst_1007:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x7ed81242d99cb and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xbedc50b55d42b and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x4e22f51974420 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe7ed81242d99cb; op2val:0x3febedc50b55d42b;
op3val:0x3fe4e22f51974420; valaddr_reg:x3; val_offset:3021*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3021*FLEN/8, x4, x1, x2)

inst_1008:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x7ed81242d99cb and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xbedc50b55d42b and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x4e22f51974420 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe7ed81242d99cb; op2val:0x3febedc50b55d42b;
op3val:0x3fe4e22f51974420; valaddr_reg:x3; val_offset:3024*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3024*FLEN/8, x4, x1, x2)

inst_1009:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x7ed81242d99cb and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xbedc50b55d42b and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x4e22f51974420 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe7ed81242d99cb; op2val:0x3febedc50b55d42b;
op3val:0x3fe4e22f51974420; valaddr_reg:x3; val_offset:3027*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3027*FLEN/8, x4, x1, x2)

inst_1010:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x7f0f81f261d0e and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xe3da0f9e5f6ca and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x6a00465fecf69 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe7f0f81f261d0e; op2val:0x3fee3da0f9e5f6ca;
op3val:0x3fe6a00465fecf69; valaddr_reg:x3; val_offset:3030*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3030*FLEN/8, x4, x1, x2)

inst_1011:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x7f0f81f261d0e and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xe3da0f9e5f6ca and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x6a00465fecf69 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe7f0f81f261d0e; op2val:0x3fee3da0f9e5f6ca;
op3val:0x3fe6a00465fecf69; valaddr_reg:x3; val_offset:3033*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3033*FLEN/8, x4, x1, x2)

inst_1012:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x7f0f81f261d0e and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xe3da0f9e5f6ca and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x6a00465fecf69 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe7f0f81f261d0e; op2val:0x3fee3da0f9e5f6ca;
op3val:0x3fe6a00465fecf69; valaddr_reg:x3; val_offset:3036*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3036*FLEN/8, x4, x1, x2)

inst_1013:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x7f0f81f261d0e and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xe3da0f9e5f6ca and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x6a00465fecf69 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe7f0f81f261d0e; op2val:0x3fee3da0f9e5f6ca;
op3val:0x3fe6a00465fecf69; valaddr_reg:x3; val_offset:3039*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3039*FLEN/8, x4, x1, x2)

inst_1014:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x7f0f81f261d0e and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xe3da0f9e5f6ca and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x6a00465fecf69 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe7f0f81f261d0e; op2val:0x3fee3da0f9e5f6ca;
op3val:0x3fe6a00465fecf69; valaddr_reg:x3; val_offset:3042*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3042*FLEN/8, x4, x1, x2)

inst_1015:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x7fc52e3da29f3 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x504be1a8d115c and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xf8248dbed1fab and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe7fc52e3da29f3; op2val:0x3ff504be1a8d115c;
op3val:0x3fef8248dbed1fab; valaddr_reg:x3; val_offset:3045*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3045*FLEN/8, x4, x1, x2)

inst_1016:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x7fc52e3da29f3 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x504be1a8d115c and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xf8248dbed1fab and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe7fc52e3da29f3; op2val:0x3ff504be1a8d115c;
op3val:0x3fef8248dbed1fab; valaddr_reg:x3; val_offset:3048*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3048*FLEN/8, x4, x1, x2)

inst_1017:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x7fc52e3da29f3 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x504be1a8d115c and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xf8248dbed1fab and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe7fc52e3da29f3; op2val:0x3ff504be1a8d115c;
op3val:0x3fef8248dbed1fab; valaddr_reg:x3; val_offset:3051*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3051*FLEN/8, x4, x1, x2)

inst_1018:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x7fc52e3da29f3 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x504be1a8d115c and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xf8248dbed1fab and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe7fc52e3da29f3; op2val:0x3ff504be1a8d115c;
op3val:0x3fef8248dbed1fab; valaddr_reg:x3; val_offset:3054*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3054*FLEN/8, x4, x1, x2)

inst_1019:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x7fc52e3da29f3 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x504be1a8d115c and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xf8248dbed1fab and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe7fc52e3da29f3; op2val:0x3ff504be1a8d115c;
op3val:0x3fef8248dbed1fab; valaddr_reg:x3; val_offset:3057*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3057*FLEN/8, x4, x1, x2)

inst_1020:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x805882c1da80f and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xf4cfe503167a3 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x77f27f6414a1c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe805882c1da80f; op2val:0x3fef4cfe503167a3;
op3val:0x3fe77f27f6414a1c; valaddr_reg:x3; val_offset:3060*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3060*FLEN/8, x4, x1, x2)

inst_1021:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x805882c1da80f and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xf4cfe503167a3 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x77f27f6414a1c and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe805882c1da80f; op2val:0x3fef4cfe503167a3;
op3val:0x3fe77f27f6414a1c; valaddr_reg:x3; val_offset:3063*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3063*FLEN/8, x4, x1, x2)

inst_1022:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x805882c1da80f and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xf4cfe503167a3 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x77f27f6414a1c and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe805882c1da80f; op2val:0x3fef4cfe503167a3;
op3val:0x3fe77f27f6414a1c; valaddr_reg:x3; val_offset:3066*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3066*FLEN/8, x4, x1, x2)

inst_1023:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x805882c1da80f and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xf4cfe503167a3 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x77f27f6414a1c and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe805882c1da80f; op2val:0x3fef4cfe503167a3;
op3val:0x3fe77f27f6414a1c; valaddr_reg:x3; val_offset:3069*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3069*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_9)

inst_1024:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x805882c1da80f and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xf4cfe503167a3 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x77f27f6414a1c and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe805882c1da80f; op2val:0x3fef4cfe503167a3;
op3val:0x3fe77f27f6414a1c; valaddr_reg:x3; val_offset:3072*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3072*FLEN/8, x4, x1, x2)

inst_1025:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x80c55a33c1a3f and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xeca2b7746a109 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x7237ecfd4c9d1 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe80c55a33c1a3f; op2val:0x3feeca2b7746a109;
op3val:0x3fe7237ecfd4c9d1; valaddr_reg:x3; val_offset:3075*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3075*FLEN/8, x4, x1, x2)

inst_1026:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x80c55a33c1a3f and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xeca2b7746a109 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x7237ecfd4c9d1 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe80c55a33c1a3f; op2val:0x3feeca2b7746a109;
op3val:0x3fe7237ecfd4c9d1; valaddr_reg:x3; val_offset:3078*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3078*FLEN/8, x4, x1, x2)

inst_1027:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x80c55a33c1a3f and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xeca2b7746a109 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x7237ecfd4c9d1 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe80c55a33c1a3f; op2val:0x3feeca2b7746a109;
op3val:0x3fe7237ecfd4c9d1; valaddr_reg:x3; val_offset:3081*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3081*FLEN/8, x4, x1, x2)

inst_1028:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x80c55a33c1a3f and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xeca2b7746a109 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x7237ecfd4c9d1 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe80c55a33c1a3f; op2val:0x3feeca2b7746a109;
op3val:0x3fe7237ecfd4c9d1; valaddr_reg:x3; val_offset:3084*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3084*FLEN/8, x4, x1, x2)

inst_1029:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x80c55a33c1a3f and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xeca2b7746a109 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x7237ecfd4c9d1 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe80c55a33c1a3f; op2val:0x3feeca2b7746a109;
op3val:0x3fe7237ecfd4c9d1; valaddr_reg:x3; val_offset:3087*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3087*FLEN/8, x4, x1, x2)

inst_1030:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x82d7e8bdcba00 and fs2 == 0 and fe2 == 0x3fa and fm2 == 0x7441069035c9b and fs3 == 0 and fe3 == 0x3fa and fm3 == 0x194200786f220 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe82d7e8bdcba00; op2val:0x3fa7441069035c9b;
op3val:0x3fa194200786f220; valaddr_reg:x3; val_offset:3090*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3090*FLEN/8, x4, x1, x2)

inst_1031:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x82d7e8bdcba00 and fs2 == 0 and fe2 == 0x3fa and fm2 == 0x7441069035c9b and fs3 == 0 and fe3 == 0x3fa and fm3 == 0x194200786f220 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe82d7e8bdcba00; op2val:0x3fa7441069035c9b;
op3val:0x3fa194200786f220; valaddr_reg:x3; val_offset:3093*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3093*FLEN/8, x4, x1, x2)

inst_1032:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x82d7e8bdcba00 and fs2 == 0 and fe2 == 0x3fa and fm2 == 0x7441069035c9b and fs3 == 0 and fe3 == 0x3fa and fm3 == 0x194200786f220 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe82d7e8bdcba00; op2val:0x3fa7441069035c9b;
op3val:0x3fa194200786f220; valaddr_reg:x3; val_offset:3096*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3096*FLEN/8, x4, x1, x2)

inst_1033:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x82d7e8bdcba00 and fs2 == 0 and fe2 == 0x3fa and fm2 == 0x7441069035c9b and fs3 == 0 and fe3 == 0x3fa and fm3 == 0x194200786f220 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe82d7e8bdcba00; op2val:0x3fa7441069035c9b;
op3val:0x3fa194200786f220; valaddr_reg:x3; val_offset:3099*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3099*FLEN/8, x4, x1, x2)

inst_1034:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x82d7e8bdcba00 and fs2 == 0 and fe2 == 0x3fa and fm2 == 0x7441069035c9b and fs3 == 0 and fe3 == 0x3fa and fm3 == 0x194200786f220 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe82d7e8bdcba00; op2val:0x3fa7441069035c9b;
op3val:0x3fa194200786f220; valaddr_reg:x3; val_offset:3102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3102*FLEN/8, x4, x1, x2)

inst_1035:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x8305c83ac2e34 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x2041fdc06c830 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xb3ca4559916fe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe8305c83ac2e34; op2val:0x3fe2041fdc06c830;
op3val:0x3fdb3ca4559916fe; valaddr_reg:x3; val_offset:3105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3105*FLEN/8, x4, x1, x2)

inst_1036:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x8305c83ac2e34 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x2041fdc06c830 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xb3ca4559916fe and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe8305c83ac2e34; op2val:0x3fe2041fdc06c830;
op3val:0x3fdb3ca4559916fe; valaddr_reg:x3; val_offset:3108*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3108*FLEN/8, x4, x1, x2)

inst_1037:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x8305c83ac2e34 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x2041fdc06c830 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xb3ca4559916fe and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe8305c83ac2e34; op2val:0x3fe2041fdc06c830;
op3val:0x3fdb3ca4559916fe; valaddr_reg:x3; val_offset:3111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3111*FLEN/8, x4, x1, x2)

inst_1038:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x8305c83ac2e34 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x2041fdc06c830 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xb3ca4559916fe and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe8305c83ac2e34; op2val:0x3fe2041fdc06c830;
op3val:0x3fdb3ca4559916fe; valaddr_reg:x3; val_offset:3114*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3114*FLEN/8, x4, x1, x2)

inst_1039:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x8305c83ac2e34 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x2041fdc06c830 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xb3ca4559916fe and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe8305c83ac2e34; op2val:0x3fe2041fdc06c830;
op3val:0x3fdb3ca4559916fe; valaddr_reg:x3; val_offset:3117*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3117*FLEN/8, x4, x1, x2)

inst_1040:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x84d8054f1fdee and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x16cf023ccfdc0 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xa77d03d645fb8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe84d8054f1fdee; op2val:0x3fe16cf023ccfdc0;
op3val:0x3fda77d03d645fb8; valaddr_reg:x3; val_offset:3120*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3120*FLEN/8, x4, x1, x2)

inst_1041:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x84d8054f1fdee and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x16cf023ccfdc0 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xa77d03d645fb8 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe84d8054f1fdee; op2val:0x3fe16cf023ccfdc0;
op3val:0x3fda77d03d645fb8; valaddr_reg:x3; val_offset:3123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3123*FLEN/8, x4, x1, x2)

inst_1042:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x84d8054f1fdee and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x16cf023ccfdc0 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xa77d03d645fb8 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe84d8054f1fdee; op2val:0x3fe16cf023ccfdc0;
op3val:0x3fda77d03d645fb8; valaddr_reg:x3; val_offset:3126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3126*FLEN/8, x4, x1, x2)

inst_1043:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x84d8054f1fdee and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x16cf023ccfdc0 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xa77d03d645fb8 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe84d8054f1fdee; op2val:0x3fe16cf023ccfdc0;
op3val:0x3fda77d03d645fb8; valaddr_reg:x3; val_offset:3129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3129*FLEN/8, x4, x1, x2)

inst_1044:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x84d8054f1fdee and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x16cf023ccfdc0 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xa77d03d645fb8 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe84d8054f1fdee; op2val:0x3fe16cf023ccfdc0;
op3val:0x3fda77d03d645fb8; valaddr_reg:x3; val_offset:3132*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3132*FLEN/8, x4, x1, x2)

inst_1045:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x88882c3f3a5be and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x57f4e101fcf24 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x07b2f70acf5d0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe88882c3f3a5be; op2val:0x3fe57f4e101fcf24;
op3val:0x3fe07b2f70acf5d0; valaddr_reg:x3; val_offset:3135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3135*FLEN/8, x4, x1, x2)

inst_1046:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x88882c3f3a5be and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x57f4e101fcf24 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x07b2f70acf5d0 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe88882c3f3a5be; op2val:0x3fe57f4e101fcf24;
op3val:0x3fe07b2f70acf5d0; valaddr_reg:x3; val_offset:3138*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3138*FLEN/8, x4, x1, x2)

inst_1047:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x88882c3f3a5be and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x57f4e101fcf24 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x07b2f70acf5d0 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe88882c3f3a5be; op2val:0x3fe57f4e101fcf24;
op3val:0x3fe07b2f70acf5d0; valaddr_reg:x3; val_offset:3141*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3141*FLEN/8, x4, x1, x2)

inst_1048:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x88882c3f3a5be and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x57f4e101fcf24 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x07b2f70acf5d0 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe88882c3f3a5be; op2val:0x3fe57f4e101fcf24;
op3val:0x3fe07b2f70acf5d0; valaddr_reg:x3; val_offset:3144*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3144*FLEN/8, x4, x1, x2)

inst_1049:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x88882c3f3a5be and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x57f4e101fcf24 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x07b2f70acf5d0 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe88882c3f3a5be; op2val:0x3fe57f4e101fcf24;
op3val:0x3fe07b2f70acf5d0; valaddr_reg:x3; val_offset:3147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3147*FLEN/8, x4, x1, x2)

inst_1050:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x898816a0229aa and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x1090e8a9ec990 and fs3 == 0 and fe3 == 0x3fb and fm3 == 0xa2ff5a3f69e48 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe898816a0229aa; op2val:0x3fc1090e8a9ec990;
op3val:0x3fba2ff5a3f69e48; valaddr_reg:x3; val_offset:3150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3150*FLEN/8, x4, x1, x2)

inst_1051:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x898816a0229aa and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x1090e8a9ec990 and fs3 == 0 and fe3 == 0x3fb and fm3 == 0xa2ff5a3f69e48 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe898816a0229aa; op2val:0x3fc1090e8a9ec990;
op3val:0x3fba2ff5a3f69e48; valaddr_reg:x3; val_offset:3153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3153*FLEN/8, x4, x1, x2)

inst_1052:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x898816a0229aa and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x1090e8a9ec990 and fs3 == 0 and fe3 == 0x3fb and fm3 == 0xa2ff5a3f69e48 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe898816a0229aa; op2val:0x3fc1090e8a9ec990;
op3val:0x3fba2ff5a3f69e48; valaddr_reg:x3; val_offset:3156*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3156*FLEN/8, x4, x1, x2)

inst_1053:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x898816a0229aa and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x1090e8a9ec990 and fs3 == 0 and fe3 == 0x3fb and fm3 == 0xa2ff5a3f69e48 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe898816a0229aa; op2val:0x3fc1090e8a9ec990;
op3val:0x3fba2ff5a3f69e48; valaddr_reg:x3; val_offset:3159*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3159*FLEN/8, x4, x1, x2)

inst_1054:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x898816a0229aa and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x1090e8a9ec990 and fs3 == 0 and fe3 == 0x3fb and fm3 == 0xa2ff5a3f69e48 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe898816a0229aa; op2val:0x3fc1090e8a9ec990;
op3val:0x3fba2ff5a3f69e48; valaddr_reg:x3; val_offset:3162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3162*FLEN/8, x4, x1, x2)

inst_1055:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x8a4535ba8ddb9 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x4215372db4f3e and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xf00bba3d5221a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe8a4535ba8ddb9; op2val:0x3ff4215372db4f3e;
op3val:0x3fef00bba3d5221a; valaddr_reg:x3; val_offset:3165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3165*FLEN/8, x4, x1, x2)

inst_1056:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x8a4535ba8ddb9 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x4215372db4f3e and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xf00bba3d5221a and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe8a4535ba8ddb9; op2val:0x3ff4215372db4f3e;
op3val:0x3fef00bba3d5221a; valaddr_reg:x3; val_offset:3168*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3168*FLEN/8, x4, x1, x2)

inst_1057:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x8a4535ba8ddb9 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x4215372db4f3e and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xf00bba3d5221a and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe8a4535ba8ddb9; op2val:0x3ff4215372db4f3e;
op3val:0x3fef00bba3d5221a; valaddr_reg:x3; val_offset:3171*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3171*FLEN/8, x4, x1, x2)

inst_1058:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x8a4535ba8ddb9 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x4215372db4f3e and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xf00bba3d5221a and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe8a4535ba8ddb9; op2val:0x3ff4215372db4f3e;
op3val:0x3fef00bba3d5221a; valaddr_reg:x3; val_offset:3174*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3174*FLEN/8, x4, x1, x2)

inst_1059:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x8a4535ba8ddb9 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x4215372db4f3e and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xf00bba3d5221a and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe8a4535ba8ddb9; op2val:0x3ff4215372db4f3e;
op3val:0x3fef00bba3d5221a; valaddr_reg:x3; val_offset:3177*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3177*FLEN/8, x4, x1, x2)

inst_1060:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x8be8cd33348b4 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x3f62f21d6ac12 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xedf01d40ec866 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe8be8cd33348b4; op2val:0x3fe3f62f21d6ac12;
op3val:0x3fdedf01d40ec866; valaddr_reg:x3; val_offset:3180*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3180*FLEN/8, x4, x1, x2)

inst_1061:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x8be8cd33348b4 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x3f62f21d6ac12 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xedf01d40ec866 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe8be8cd33348b4; op2val:0x3fe3f62f21d6ac12;
op3val:0x3fdedf01d40ec866; valaddr_reg:x3; val_offset:3183*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3183*FLEN/8, x4, x1, x2)

inst_1062:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x8be8cd33348b4 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x3f62f21d6ac12 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xedf01d40ec866 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe8be8cd33348b4; op2val:0x3fe3f62f21d6ac12;
op3val:0x3fdedf01d40ec866; valaddr_reg:x3; val_offset:3186*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3186*FLEN/8, x4, x1, x2)

inst_1063:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x8be8cd33348b4 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x3f62f21d6ac12 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xedf01d40ec866 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe8be8cd33348b4; op2val:0x3fe3f62f21d6ac12;
op3val:0x3fdedf01d40ec866; valaddr_reg:x3; val_offset:3189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3189*FLEN/8, x4, x1, x2)

inst_1064:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x8be8cd33348b4 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x3f62f21d6ac12 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xedf01d40ec866 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe8be8cd33348b4; op2val:0x3fe3f62f21d6ac12;
op3val:0x3fdedf01d40ec866; valaddr_reg:x3; val_offset:3192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3192*FLEN/8, x4, x1, x2)

inst_1065:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x8f1f8ff97641e and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xfbceac5d76d67 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x8bdadd21ea35b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe8f1f8ff97641e; op2val:0x3fefbceac5d76d67;
op3val:0x3fe8bdadd21ea35b; valaddr_reg:x3; val_offset:3195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3195*FLEN/8, x4, x1, x2)

inst_1066:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x8f1f8ff97641e and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xfbceac5d76d67 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x8bdadd21ea35b and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe8f1f8ff97641e; op2val:0x3fefbceac5d76d67;
op3val:0x3fe8bdadd21ea35b; valaddr_reg:x3; val_offset:3198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3198*FLEN/8, x4, x1, x2)

inst_1067:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x8f1f8ff97641e and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xfbceac5d76d67 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x8bdadd21ea35b and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe8f1f8ff97641e; op2val:0x3fefbceac5d76d67;
op3val:0x3fe8bdadd21ea35b; valaddr_reg:x3; val_offset:3201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3201*FLEN/8, x4, x1, x2)

inst_1068:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x8f1f8ff97641e and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xfbceac5d76d67 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x8bdadd21ea35b and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe8f1f8ff97641e; op2val:0x3fefbceac5d76d67;
op3val:0x3fe8bdadd21ea35b; valaddr_reg:x3; val_offset:3204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3204*FLEN/8, x4, x1, x2)

inst_1069:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x8f1f8ff97641e and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xfbceac5d76d67 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x8bdadd21ea35b and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe8f1f8ff97641e; op2val:0x3fefbceac5d76d67;
op3val:0x3fe8bdadd21ea35b; valaddr_reg:x3; val_offset:3207*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3207*FLEN/8, x4, x1, x2)

inst_1070:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x8f922f10365c6 and fs2 == 0 and fe2 == 0x3fa and fm2 == 0xf290a2646769e and fs3 == 0 and fe3 == 0x3fa and fm3 == 0x85160f9f9d950 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe8f922f10365c6; op2val:0x3faf290a2646769e;
op3val:0x3fa85160f9f9d950; valaddr_reg:x3; val_offset:3210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3210*FLEN/8, x4, x1, x2)

inst_1071:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x8f922f10365c6 and fs2 == 0 and fe2 == 0x3fa and fm2 == 0xf290a2646769e and fs3 == 0 and fe3 == 0x3fa and fm3 == 0x85160f9f9d950 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe8f922f10365c6; op2val:0x3faf290a2646769e;
op3val:0x3fa85160f9f9d950; valaddr_reg:x3; val_offset:3213*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3213*FLEN/8, x4, x1, x2)

inst_1072:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x8f922f10365c6 and fs2 == 0 and fe2 == 0x3fa and fm2 == 0xf290a2646769e and fs3 == 0 and fe3 == 0x3fa and fm3 == 0x85160f9f9d950 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe8f922f10365c6; op2val:0x3faf290a2646769e;
op3val:0x3fa85160f9f9d950; valaddr_reg:x3; val_offset:3216*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3216*FLEN/8, x4, x1, x2)

inst_1073:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x8f922f10365c6 and fs2 == 0 and fe2 == 0x3fa and fm2 == 0xf290a2646769e and fs3 == 0 and fe3 == 0x3fa and fm3 == 0x85160f9f9d950 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe8f922f10365c6; op2val:0x3faf290a2646769e;
op3val:0x3fa85160f9f9d950; valaddr_reg:x3; val_offset:3219*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3219*FLEN/8, x4, x1, x2)

inst_1074:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x8f922f10365c6 and fs2 == 0 and fe2 == 0x3fa and fm2 == 0xf290a2646769e and fs3 == 0 and fe3 == 0x3fa and fm3 == 0x85160f9f9d950 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe8f922f10365c6; op2val:0x3faf290a2646769e;
op3val:0x3fa85160f9f9d950; valaddr_reg:x3; val_offset:3222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3222*FLEN/8, x4, x1, x2)

inst_1075:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x941df9fb398b0 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x0f7deb75243a9 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xac9281f470f2c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe941df9fb398b0; op2val:0x3fe0f7deb75243a9;
op3val:0x3fdac9281f470f2c; valaddr_reg:x3; val_offset:3225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3225*FLEN/8, x4, x1, x2)

inst_1076:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x941df9fb398b0 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x0f7deb75243a9 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xac9281f470f2c and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe941df9fb398b0; op2val:0x3fe0f7deb75243a9;
op3val:0x3fdac9281f470f2c; valaddr_reg:x3; val_offset:3228*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3228*FLEN/8, x4, x1, x2)

inst_1077:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x941df9fb398b0 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x0f7deb75243a9 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xac9281f470f2c and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe941df9fb398b0; op2val:0x3fe0f7deb75243a9;
op3val:0x3fdac9281f470f2c; valaddr_reg:x3; val_offset:3231*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3231*FLEN/8, x4, x1, x2)

inst_1078:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x941df9fb398b0 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x0f7deb75243a9 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xac9281f470f2c and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe941df9fb398b0; op2val:0x3fe0f7deb75243a9;
op3val:0x3fdac9281f470f2c; valaddr_reg:x3; val_offset:3234*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3234*FLEN/8, x4, x1, x2)

inst_1079:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x941df9fb398b0 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x0f7deb75243a9 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xac9281f470f2c and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe941df9fb398b0; op2val:0x3fe0f7deb75243a9;
op3val:0x3fdac9281f470f2c; valaddr_reg:x3; val_offset:3237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3237*FLEN/8, x4, x1, x2)

inst_1080:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x94903745572ab and fs2 == 0 and fe2 == 0x3fb and fm2 == 0x1a0fbfb26352e and fs3 == 0 and fe3 == 0x3fa and fm3 == 0xbdbfc047218f0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe94903745572ab; op2val:0x3fb1a0fbfb26352e;
op3val:0x3fabdbfc047218f0; valaddr_reg:x3; val_offset:3240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3240*FLEN/8, x4, x1, x2)

inst_1081:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x94903745572ab and fs2 == 0 and fe2 == 0x3fb and fm2 == 0x1a0fbfb26352e and fs3 == 0 and fe3 == 0x3fa and fm3 == 0xbdbfc047218f0 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe94903745572ab; op2val:0x3fb1a0fbfb26352e;
op3val:0x3fabdbfc047218f0; valaddr_reg:x3; val_offset:3243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3243*FLEN/8, x4, x1, x2)

inst_1082:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x94903745572ab and fs2 == 0 and fe2 == 0x3fb and fm2 == 0x1a0fbfb26352e and fs3 == 0 and fe3 == 0x3fa and fm3 == 0xbdbfc047218f0 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe94903745572ab; op2val:0x3fb1a0fbfb26352e;
op3val:0x3fabdbfc047218f0; valaddr_reg:x3; val_offset:3246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3246*FLEN/8, x4, x1, x2)

inst_1083:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x94903745572ab and fs2 == 0 and fe2 == 0x3fb and fm2 == 0x1a0fbfb26352e and fs3 == 0 and fe3 == 0x3fa and fm3 == 0xbdbfc047218f0 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe94903745572ab; op2val:0x3fb1a0fbfb26352e;
op3val:0x3fabdbfc047218f0; valaddr_reg:x3; val_offset:3249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3249*FLEN/8, x4, x1, x2)

inst_1084:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x94903745572ab and fs2 == 0 and fe2 == 0x3fb and fm2 == 0x1a0fbfb26352e and fs3 == 0 and fe3 == 0x3fa and fm3 == 0xbdbfc047218f0 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe94903745572ab; op2val:0x3fb1a0fbfb26352e;
op3val:0x3fabdbfc047218f0; valaddr_reg:x3; val_offset:3252*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3252*FLEN/8, x4, x1, x2)

inst_1085:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x951cfde3ccc50 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x0f0827d7c7b36 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xace698b8f6ef5 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe951cfde3ccc50; op2val:0x3ff0f0827d7c7b36;
op3val:0x3feace698b8f6ef5; valaddr_reg:x3; val_offset:3255*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3255*FLEN/8, x4, x1, x2)

inst_1086:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x951cfde3ccc50 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x0f0827d7c7b36 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xace698b8f6ef5 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe951cfde3ccc50; op2val:0x3ff0f0827d7c7b36;
op3val:0x3feace698b8f6ef5; valaddr_reg:x3; val_offset:3258*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3258*FLEN/8, x4, x1, x2)

inst_1087:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x951cfde3ccc50 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x0f0827d7c7b36 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xace698b8f6ef5 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe951cfde3ccc50; op2val:0x3ff0f0827d7c7b36;
op3val:0x3feace698b8f6ef5; valaddr_reg:x3; val_offset:3261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3261*FLEN/8, x4, x1, x2)

inst_1088:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x951cfde3ccc50 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x0f0827d7c7b36 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xace698b8f6ef5 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe951cfde3ccc50; op2val:0x3ff0f0827d7c7b36;
op3val:0x3feace698b8f6ef5; valaddr_reg:x3; val_offset:3264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3264*FLEN/8, x4, x1, x2)

inst_1089:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x951cfde3ccc50 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x0f0827d7c7b36 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xace698b8f6ef5 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe951cfde3ccc50; op2val:0x3ff0f0827d7c7b36;
op3val:0x3feace698b8f6ef5; valaddr_reg:x3; val_offset:3267*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3267*FLEN/8, x4, x1, x2)

inst_1090:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x991924701dd43 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x3d5ba44c2ff46 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xfb26949ca43b2 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe991924701dd43; op2val:0x3fe3d5ba44c2ff46;
op3val:0x3fdfb26949ca43b2; valaddr_reg:x3; val_offset:3270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3270*FLEN/8, x4, x1, x2)

inst_1091:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x991924701dd43 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x3d5ba44c2ff46 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xfb26949ca43b2 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe991924701dd43; op2val:0x3fe3d5ba44c2ff46;
op3val:0x3fdfb26949ca43b2; valaddr_reg:x3; val_offset:3273*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3273*FLEN/8, x4, x1, x2)

inst_1092:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x991924701dd43 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x3d5ba44c2ff46 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xfb26949ca43b2 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe991924701dd43; op2val:0x3fe3d5ba44c2ff46;
op3val:0x3fdfb26949ca43b2; valaddr_reg:x3; val_offset:3276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3276*FLEN/8, x4, x1, x2)

inst_1093:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x991924701dd43 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x3d5ba44c2ff46 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xfb26949ca43b2 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe991924701dd43; op2val:0x3fe3d5ba44c2ff46;
op3val:0x3fdfb26949ca43b2; valaddr_reg:x3; val_offset:3279*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3279*FLEN/8, x4, x1, x2)

inst_1094:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x991924701dd43 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x3d5ba44c2ff46 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xfb26949ca43b2 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe991924701dd43; op2val:0x3fe3d5ba44c2ff46;
op3val:0x3fdfb26949ca43b2; valaddr_reg:x3; val_offset:3282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3282*FLEN/8, x4, x1, x2)

inst_1095:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x9b49546a62826 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xfb1cf4f6bc736 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x975c5fe11c356 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe9b49546a62826; op2val:0x3fefb1cf4f6bc736;
op3val:0x3fe975c5fe11c356; valaddr_reg:x3; val_offset:3285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3285*FLEN/8, x4, x1, x2)

inst_1096:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x9b49546a62826 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xfb1cf4f6bc736 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x975c5fe11c356 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe9b49546a62826; op2val:0x3fefb1cf4f6bc736;
op3val:0x3fe975c5fe11c356; valaddr_reg:x3; val_offset:3288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3288*FLEN/8, x4, x1, x2)

inst_1097:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x9b49546a62826 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xfb1cf4f6bc736 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x975c5fe11c356 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe9b49546a62826; op2val:0x3fefb1cf4f6bc736;
op3val:0x3fe975c5fe11c356; valaddr_reg:x3; val_offset:3291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3291*FLEN/8, x4, x1, x2)

inst_1098:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x9b49546a62826 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xfb1cf4f6bc736 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x975c5fe11c356 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe9b49546a62826; op2val:0x3fefb1cf4f6bc736;
op3val:0x3fe975c5fe11c356; valaddr_reg:x3; val_offset:3294*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3294*FLEN/8, x4, x1, x2)

inst_1099:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x9b49546a62826 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xfb1cf4f6bc736 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x975c5fe11c356 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe9b49546a62826; op2val:0x3fefb1cf4f6bc736;
op3val:0x3fe975c5fe11c356; valaddr_reg:x3; val_offset:3297*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3297*FLEN/8, x4, x1, x2)

inst_1100:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x9bc75ae92d393 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xb1d6037170d84 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x5cea377a197e4 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe9bc75ae92d393; op2val:0x3feb1d6037170d84;
op3val:0x3fe5cea377a197e4; valaddr_reg:x3; val_offset:3300*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3300*FLEN/8, x4, x1, x2)

inst_1101:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x9bc75ae92d393 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xb1d6037170d84 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x5cea377a197e4 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe9bc75ae92d393; op2val:0x3feb1d6037170d84;
op3val:0x3fe5cea377a197e4; valaddr_reg:x3; val_offset:3303*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3303*FLEN/8, x4, x1, x2)

inst_1102:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x9bc75ae92d393 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xb1d6037170d84 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x5cea377a197e4 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe9bc75ae92d393; op2val:0x3feb1d6037170d84;
op3val:0x3fe5cea377a197e4; valaddr_reg:x3; val_offset:3306*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3306*FLEN/8, x4, x1, x2)

inst_1103:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x9bc75ae92d393 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xb1d6037170d84 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x5cea377a197e4 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe9bc75ae92d393; op2val:0x3feb1d6037170d84;
op3val:0x3fe5cea377a197e4; valaddr_reg:x3; val_offset:3309*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3309*FLEN/8, x4, x1, x2)

inst_1104:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x9bc75ae92d393 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xb1d6037170d84 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x5cea377a197e4 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe9bc75ae92d393; op2val:0x3feb1d6037170d84;
op3val:0x3fe5cea377a197e4; valaddr_reg:x3; val_offset:3312*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3312*FLEN/8, x4, x1, x2)

inst_1105:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x9eff8edf16c68 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x4bc7d0ce48c78 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x0cec2c7046c97 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe9eff8edf16c68; op2val:0x3fe4bc7d0ce48c78;
op3val:0x3fe0cec2c7046c97; valaddr_reg:x3; val_offset:3315*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3315*FLEN/8, x4, x1, x2)

inst_1106:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x9eff8edf16c68 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x4bc7d0ce48c78 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x0cec2c7046c97 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe9eff8edf16c68; op2val:0x3fe4bc7d0ce48c78;
op3val:0x3fe0cec2c7046c97; valaddr_reg:x3; val_offset:3318*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3318*FLEN/8, x4, x1, x2)

inst_1107:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x9eff8edf16c68 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x4bc7d0ce48c78 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x0cec2c7046c97 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe9eff8edf16c68; op2val:0x3fe4bc7d0ce48c78;
op3val:0x3fe0cec2c7046c97; valaddr_reg:x3; val_offset:3321*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3321*FLEN/8, x4, x1, x2)

inst_1108:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x9eff8edf16c68 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x4bc7d0ce48c78 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x0cec2c7046c97 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe9eff8edf16c68; op2val:0x3fe4bc7d0ce48c78;
op3val:0x3fe0cec2c7046c97; valaddr_reg:x3; val_offset:3324*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3324*FLEN/8, x4, x1, x2)

inst_1109:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x9eff8edf16c68 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x4bc7d0ce48c78 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x0cec2c7046c97 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe9eff8edf16c68; op2val:0x3fe4bc7d0ce48c78;
op3val:0x3fe0cec2c7046c97; valaddr_reg:x3; val_offset:3327*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3327*FLEN/8, x4, x1, x2)

inst_1110:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xa377d4f967891 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x0579f54dab2b4 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xac7101b6e2c66 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fea377d4f967891; op2val:0x3fe0579f54dab2b4;
op3val:0x3fdac7101b6e2c66; valaddr_reg:x3; val_offset:3330*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3330*FLEN/8, x4, x1, x2)

inst_1111:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xa377d4f967891 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x0579f54dab2b4 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xac7101b6e2c66 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fea377d4f967891; op2val:0x3fe0579f54dab2b4;
op3val:0x3fdac7101b6e2c66; valaddr_reg:x3; val_offset:3333*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3333*FLEN/8, x4, x1, x2)

inst_1112:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xa377d4f967891 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x0579f54dab2b4 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xac7101b6e2c66 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fea377d4f967891; op2val:0x3fe0579f54dab2b4;
op3val:0x3fdac7101b6e2c66; valaddr_reg:x3; val_offset:3336*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3336*FLEN/8, x4, x1, x2)

inst_1113:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xa377d4f967891 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x0579f54dab2b4 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xac7101b6e2c66 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fea377d4f967891; op2val:0x3fe0579f54dab2b4;
op3val:0x3fdac7101b6e2c66; valaddr_reg:x3; val_offset:3339*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3339*FLEN/8, x4, x1, x2)

inst_1114:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xa377d4f967891 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x0579f54dab2b4 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xac7101b6e2c66 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fea377d4f967891; op2val:0x3fe0579f54dab2b4;
op3val:0x3fdac7101b6e2c66; valaddr_reg:x3; val_offset:3342*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3342*FLEN/8, x4, x1, x2)

inst_1115:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xa498cd243a926 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x06d985d6c752e and fs3 == 0 and fe3 == 0x3fc and fm3 == 0xafd9c35d3971c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fea498cd243a926; op2val:0x3fd06d985d6c752e;
op3val:0x3fcafd9c35d3971c; valaddr_reg:x3; val_offset:3345*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3345*FLEN/8, x4, x1, x2)

inst_1116:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xa498cd243a926 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x06d985d6c752e and fs3 == 0 and fe3 == 0x3fc and fm3 == 0xafd9c35d3971c and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fea498cd243a926; op2val:0x3fd06d985d6c752e;
op3val:0x3fcafd9c35d3971c; valaddr_reg:x3; val_offset:3348*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3348*FLEN/8, x4, x1, x2)

inst_1117:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xa498cd243a926 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x06d985d6c752e and fs3 == 0 and fe3 == 0x3fc and fm3 == 0xafd9c35d3971c and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fea498cd243a926; op2val:0x3fd06d985d6c752e;
op3val:0x3fcafd9c35d3971c; valaddr_reg:x3; val_offset:3351*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3351*FLEN/8, x4, x1, x2)

inst_1118:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xa498cd243a926 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x06d985d6c752e and fs3 == 0 and fe3 == 0x3fc and fm3 == 0xafd9c35d3971c and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fea498cd243a926; op2val:0x3fd06d985d6c752e;
op3val:0x3fcafd9c35d3971c; valaddr_reg:x3; val_offset:3354*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3354*FLEN/8, x4, x1, x2)

inst_1119:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xa498cd243a926 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x06d985d6c752e and fs3 == 0 and fe3 == 0x3fc and fm3 == 0xafd9c35d3971c and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fea498cd243a926; op2val:0x3fd06d985d6c752e;
op3val:0x3fcafd9c35d3971c; valaddr_reg:x3; val_offset:3357*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3357*FLEN/8, x4, x1, x2)

inst_1120:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xa5c6ca365120a and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xdd5b58737f1f9 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x893cf315dadce and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fea5c6ca365120a; op2val:0x3fedd5b58737f1f9;
op3val:0x3fe893cf315dadce; valaddr_reg:x3; val_offset:3360*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3360*FLEN/8, x4, x1, x2)

inst_1121:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xa5c6ca365120a and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xdd5b58737f1f9 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x893cf315dadce and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fea5c6ca365120a; op2val:0x3fedd5b58737f1f9;
op3val:0x3fe893cf315dadce; valaddr_reg:x3; val_offset:3363*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3363*FLEN/8, x4, x1, x2)

inst_1122:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xa5c6ca365120a and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xdd5b58737f1f9 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x893cf315dadce and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fea5c6ca365120a; op2val:0x3fedd5b58737f1f9;
op3val:0x3fe893cf315dadce; valaddr_reg:x3; val_offset:3366*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3366*FLEN/8, x4, x1, x2)

inst_1123:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xa5c6ca365120a and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xdd5b58737f1f9 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x893cf315dadce and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fea5c6ca365120a; op2val:0x3fedd5b58737f1f9;
op3val:0x3fe893cf315dadce; valaddr_reg:x3; val_offset:3369*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3369*FLEN/8, x4, x1, x2)

inst_1124:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xa5c6ca365120a and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xdd5b58737f1f9 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x893cf315dadce and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fea5c6ca365120a; op2val:0x3fedd5b58737f1f9;
op3val:0x3fe893cf315dadce; valaddr_reg:x3; val_offset:3372*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3372*FLEN/8, x4, x1, x2)

inst_1125:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xa7c22bf6f0b2b and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x45b4ba94c6156 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x0d92559860a54 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fea7c22bf6f0b2b; op2val:0x3fe45b4ba94c6156;
op3val:0x3fe0d92559860a54; valaddr_reg:x3; val_offset:3375*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3375*FLEN/8, x4, x1, x2)

inst_1126:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xa7c22bf6f0b2b and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x45b4ba94c6156 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x0d92559860a54 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fea7c22bf6f0b2b; op2val:0x3fe45b4ba94c6156;
op3val:0x3fe0d92559860a54; valaddr_reg:x3; val_offset:3378*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3378*FLEN/8, x4, x1, x2)

inst_1127:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xa7c22bf6f0b2b and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x45b4ba94c6156 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x0d92559860a54 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fea7c22bf6f0b2b; op2val:0x3fe45b4ba94c6156;
op3val:0x3fe0d92559860a54; valaddr_reg:x3; val_offset:3381*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3381*FLEN/8, x4, x1, x2)

inst_1128:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xa7c22bf6f0b2b and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x45b4ba94c6156 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x0d92559860a54 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fea7c22bf6f0b2b; op2val:0x3fe45b4ba94c6156;
op3val:0x3fe0d92559860a54; valaddr_reg:x3; val_offset:3384*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3384*FLEN/8, x4, x1, x2)

inst_1129:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xa7c22bf6f0b2b and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x45b4ba94c6156 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x0d92559860a54 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fea7c22bf6f0b2b; op2val:0x3fe45b4ba94c6156;
op3val:0x3fe0d92559860a54; valaddr_reg:x3; val_offset:3387*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3387*FLEN/8, x4, x1, x2)

inst_1130:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xa9f59018e6b1c and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x0fadbab1717a3 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xc40c052067558 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fea9f59018e6b1c; op2val:0x3ff0fadbab1717a3;
op3val:0x3fec40c052067558; valaddr_reg:x3; val_offset:3390*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3390*FLEN/8, x4, x1, x2)

inst_1131:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xa9f59018e6b1c and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x0fadbab1717a3 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xc40c052067558 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fea9f59018e6b1c; op2val:0x3ff0fadbab1717a3;
op3val:0x3fec40c052067558; valaddr_reg:x3; val_offset:3393*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3393*FLEN/8, x4, x1, x2)

inst_1132:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xa9f59018e6b1c and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x0fadbab1717a3 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xc40c052067558 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fea9f59018e6b1c; op2val:0x3ff0fadbab1717a3;
op3val:0x3fec40c052067558; valaddr_reg:x3; val_offset:3396*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3396*FLEN/8, x4, x1, x2)

inst_1133:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xa9f59018e6b1c and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x0fadbab1717a3 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xc40c052067558 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fea9f59018e6b1c; op2val:0x3ff0fadbab1717a3;
op3val:0x3fec40c052067558; valaddr_reg:x3; val_offset:3399*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3399*FLEN/8, x4, x1, x2)

inst_1134:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xa9f59018e6b1c and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x0fadbab1717a3 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xc40c052067558 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fea9f59018e6b1c; op2val:0x3ff0fadbab1717a3;
op3val:0x3fec40c052067558; valaddr_reg:x3; val_offset:3402*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3402*FLEN/8, x4, x1, x2)

inst_1135:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xaa7977693c463 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x185e75fed121d and fs3 == 0 and fe3 == 0x3fc and fm3 == 0xd31237c6f70e0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feaa7977693c463; op2val:0x3fd185e75fed121d;
op3val:0x3fcd31237c6f70e0; valaddr_reg:x3; val_offset:3405*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3405*FLEN/8, x4, x1, x2)

inst_1136:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xaa7977693c463 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x185e75fed121d and fs3 == 0 and fe3 == 0x3fc and fm3 == 0xd31237c6f70e0 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feaa7977693c463; op2val:0x3fd185e75fed121d;
op3val:0x3fcd31237c6f70e0; valaddr_reg:x3; val_offset:3408*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3408*FLEN/8, x4, x1, x2)

inst_1137:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xaa7977693c463 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x185e75fed121d and fs3 == 0 and fe3 == 0x3fc and fm3 == 0xd31237c6f70e0 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feaa7977693c463; op2val:0x3fd185e75fed121d;
op3val:0x3fcd31237c6f70e0; valaddr_reg:x3; val_offset:3411*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3411*FLEN/8, x4, x1, x2)

inst_1138:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xaa7977693c463 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x185e75fed121d and fs3 == 0 and fe3 == 0x3fc and fm3 == 0xd31237c6f70e0 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feaa7977693c463; op2val:0x3fd185e75fed121d;
op3val:0x3fcd31237c6f70e0; valaddr_reg:x3; val_offset:3414*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3414*FLEN/8, x4, x1, x2)

inst_1139:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xaa7977693c463 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x185e75fed121d and fs3 == 0 and fe3 == 0x3fc and fm3 == 0xd31237c6f70e0 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feaa7977693c463; op2val:0x3fd185e75fed121d;
op3val:0x3fcd31237c6f70e0; valaddr_reg:x3; val_offset:3417*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3417*FLEN/8, x4, x1, x2)

inst_1140:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xad545212cb985 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x5b1b56f96c571 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x230f9280611d5 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fead545212cb985; op2val:0x3fe5b1b56f96c571;
op3val:0x3fe230f9280611d5; valaddr_reg:x3; val_offset:3420*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3420*FLEN/8, x4, x1, x2)

inst_1141:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xad545212cb985 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x5b1b56f96c571 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x230f9280611d5 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fead545212cb985; op2val:0x3fe5b1b56f96c571;
op3val:0x3fe230f9280611d5; valaddr_reg:x3; val_offset:3423*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3423*FLEN/8, x4, x1, x2)

inst_1142:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xad545212cb985 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x5b1b56f96c571 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x230f9280611d5 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fead545212cb985; op2val:0x3fe5b1b56f96c571;
op3val:0x3fe230f9280611d5; valaddr_reg:x3; val_offset:3426*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3426*FLEN/8, x4, x1, x2)

inst_1143:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xad545212cb985 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x5b1b56f96c571 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x230f9280611d5 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fead545212cb985; op2val:0x3fe5b1b56f96c571;
op3val:0x3fe230f9280611d5; valaddr_reg:x3; val_offset:3429*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3429*FLEN/8, x4, x1, x2)

inst_1144:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xad545212cb985 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x5b1b56f96c571 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x230f9280611d5 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fead545212cb985; op2val:0x3fe5b1b56f96c571;
op3val:0x3fe230f9280611d5; valaddr_reg:x3; val_offset:3432*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3432*FLEN/8, x4, x1, x2)

inst_1145:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xaf57d7aec81a5 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x50cb3fa83fb3e and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x1bbce07fc4a54 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feaf57d7aec81a5; op2val:0x3fe50cb3fa83fb3e;
op3val:0x3fe1bbce07fc4a54; valaddr_reg:x3; val_offset:3435*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3435*FLEN/8, x4, x1, x2)

inst_1146:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xaf57d7aec81a5 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x50cb3fa83fb3e and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x1bbce07fc4a54 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feaf57d7aec81a5; op2val:0x3fe50cb3fa83fb3e;
op3val:0x3fe1bbce07fc4a54; valaddr_reg:x3; val_offset:3438*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3438*FLEN/8, x4, x1, x2)

inst_1147:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xaf57d7aec81a5 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x50cb3fa83fb3e and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x1bbce07fc4a54 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feaf57d7aec81a5; op2val:0x3fe50cb3fa83fb3e;
op3val:0x3fe1bbce07fc4a54; valaddr_reg:x3; val_offset:3441*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3441*FLEN/8, x4, x1, x2)

inst_1148:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xaf57d7aec81a5 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x50cb3fa83fb3e and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x1bbce07fc4a54 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feaf57d7aec81a5; op2val:0x3fe50cb3fa83fb3e;
op3val:0x3fe1bbce07fc4a54; valaddr_reg:x3; val_offset:3444*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3444*FLEN/8, x4, x1, x2)

inst_1149:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xaf57d7aec81a5 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x50cb3fa83fb3e and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x1bbce07fc4a54 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feaf57d7aec81a5; op2val:0x3fe50cb3fa83fb3e;
op3val:0x3fe1bbce07fc4a54; valaddr_reg:x3; val_offset:3447*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3447*FLEN/8, x4, x1, x2)

inst_1150:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xb0ec5f43df27e and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x57ca5fea6ecd2 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x22b1782da32b2 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feb0ec5f43df27e; op2val:0x3fd57ca5fea6ecd2;
op3val:0x3fd22b1782da32b2; valaddr_reg:x3; val_offset:3450*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3450*FLEN/8, x4, x1, x2)

inst_1151:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xb0ec5f43df27e and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x57ca5fea6ecd2 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x22b1782da32b2 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feb0ec5f43df27e; op2val:0x3fd57ca5fea6ecd2;
op3val:0x3fd22b1782da32b2; valaddr_reg:x3; val_offset:3453*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3453*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_10)

inst_1152:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xb0ec5f43df27e and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x57ca5fea6ecd2 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x22b1782da32b2 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feb0ec5f43df27e; op2val:0x3fd57ca5fea6ecd2;
op3val:0x3fd22b1782da32b2; valaddr_reg:x3; val_offset:3456*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3456*FLEN/8, x4, x1, x2)

inst_1153:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xb0ec5f43df27e and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x57ca5fea6ecd2 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x22b1782da32b2 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feb0ec5f43df27e; op2val:0x3fd57ca5fea6ecd2;
op3val:0x3fd22b1782da32b2; valaddr_reg:x3; val_offset:3459*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3459*FLEN/8, x4, x1, x2)

inst_1154:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xb0ec5f43df27e and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x57ca5fea6ecd2 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x22b1782da32b2 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feb0ec5f43df27e; op2val:0x3fd57ca5fea6ecd2;
op3val:0x3fd22b1782da32b2; valaddr_reg:x3; val_offset:3462*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3462*FLEN/8, x4, x1, x2)

inst_1155:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xb22f1544454d1 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x348b82173f45d and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x05a6a0e502e4f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feb22f1544454d1; op2val:0x3fe348b82173f45d;
op3val:0x3fe05a6a0e502e4f; valaddr_reg:x3; val_offset:3465*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3465*FLEN/8, x4, x1, x2)

inst_1156:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xb22f1544454d1 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x348b82173f45d and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x05a6a0e502e4f and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feb22f1544454d1; op2val:0x3fe348b82173f45d;
op3val:0x3fe05a6a0e502e4f; valaddr_reg:x3; val_offset:3468*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3468*FLEN/8, x4, x1, x2)

inst_1157:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xb22f1544454d1 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x348b82173f45d and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x05a6a0e502e4f and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feb22f1544454d1; op2val:0x3fe348b82173f45d;
op3val:0x3fe05a6a0e502e4f; valaddr_reg:x3; val_offset:3471*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3471*FLEN/8, x4, x1, x2)

inst_1158:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xb22f1544454d1 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x348b82173f45d and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x05a6a0e502e4f and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feb22f1544454d1; op2val:0x3fe348b82173f45d;
op3val:0x3fe05a6a0e502e4f; valaddr_reg:x3; val_offset:3474*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3474*FLEN/8, x4, x1, x2)

inst_1159:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xb22f1544454d1 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x348b82173f45d and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x05a6a0e502e4f and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feb22f1544454d1; op2val:0x3fe348b82173f45d;
op3val:0x3fe05a6a0e502e4f; valaddr_reg:x3; val_offset:3477*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3477*FLEN/8, x4, x1, x2)

inst_1160:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xb3860b5da85d3 and fs2 == 0 and fe2 == 0x3fb and fm2 == 0x8535758309e27 and fs3 == 0 and fe3 == 0x3fb and fm3 == 0x4b12d0f86e6a0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feb3860b5da85d3; op2val:0x3fb8535758309e27;
op3val:0x3fb4b12d0f86e6a0; valaddr_reg:x3; val_offset:3480*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3480*FLEN/8, x4, x1, x2)

inst_1161:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xb3860b5da85d3 and fs2 == 0 and fe2 == 0x3fb and fm2 == 0x8535758309e27 and fs3 == 0 and fe3 == 0x3fb and fm3 == 0x4b12d0f86e6a0 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feb3860b5da85d3; op2val:0x3fb8535758309e27;
op3val:0x3fb4b12d0f86e6a0; valaddr_reg:x3; val_offset:3483*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3483*FLEN/8, x4, x1, x2)

inst_1162:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xb3860b5da85d3 and fs2 == 0 and fe2 == 0x3fb and fm2 == 0x8535758309e27 and fs3 == 0 and fe3 == 0x3fb and fm3 == 0x4b12d0f86e6a0 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feb3860b5da85d3; op2val:0x3fb8535758309e27;
op3val:0x3fb4b12d0f86e6a0; valaddr_reg:x3; val_offset:3486*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3486*FLEN/8, x4, x1, x2)

inst_1163:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xb3860b5da85d3 and fs2 == 0 and fe2 == 0x3fb and fm2 == 0x8535758309e27 and fs3 == 0 and fe3 == 0x3fb and fm3 == 0x4b12d0f86e6a0 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feb3860b5da85d3; op2val:0x3fb8535758309e27;
op3val:0x3fb4b12d0f86e6a0; valaddr_reg:x3; val_offset:3489*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3489*FLEN/8, x4, x1, x2)

inst_1164:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xb3860b5da85d3 and fs2 == 0 and fe2 == 0x3fb and fm2 == 0x8535758309e27 and fs3 == 0 and fe3 == 0x3fb and fm3 == 0x4b12d0f86e6a0 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feb3860b5da85d3; op2val:0x3fb8535758309e27;
op3val:0x3fb4b12d0f86e6a0; valaddr_reg:x3; val_offset:3492*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3492*FLEN/8, x4, x1, x2)

inst_1165:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xb484b36ac43b7 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xc008b5d47e1bb and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x7dfb8a164d42e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feb484b36ac43b7; op2val:0x3fec008b5d47e1bb;
op3val:0x3fe7dfb8a164d42e; valaddr_reg:x3; val_offset:3495*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3495*FLEN/8, x4, x1, x2)

inst_1166:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xb484b36ac43b7 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xc008b5d47e1bb and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x7dfb8a164d42e and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feb484b36ac43b7; op2val:0x3fec008b5d47e1bb;
op3val:0x3fe7dfb8a164d42e; valaddr_reg:x3; val_offset:3498*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3498*FLEN/8, x4, x1, x2)

inst_1167:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xb484b36ac43b7 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xc008b5d47e1bb and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x7dfb8a164d42e and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feb484b36ac43b7; op2val:0x3fec008b5d47e1bb;
op3val:0x3fe7dfb8a164d42e; valaddr_reg:x3; val_offset:3501*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3501*FLEN/8, x4, x1, x2)

inst_1168:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xb484b36ac43b7 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xc008b5d47e1bb and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x7dfb8a164d42e and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feb484b36ac43b7; op2val:0x3fec008b5d47e1bb;
op3val:0x3fe7dfb8a164d42e; valaddr_reg:x3; val_offset:3504*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3504*FLEN/8, x4, x1, x2)

inst_1169:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xb484b36ac43b7 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xc008b5d47e1bb and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x7dfb8a164d42e and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feb484b36ac43b7; op2val:0x3fec008b5d47e1bb;
op3val:0x3fe7dfb8a164d42e; valaddr_reg:x3; val_offset:3507*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3507*FLEN/8, x4, x1, x2)

inst_1170:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xb528a418dbfb9 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0xa0227eee2cf53 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x634e7967750c4 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feb528a418dbfb9; op2val:0x3fca0227eee2cf53;
op3val:0x3fc634e7967750c4; valaddr_reg:x3; val_offset:3510*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3510*FLEN/8, x4, x1, x2)

inst_1171:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xb528a418dbfb9 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0xa0227eee2cf53 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x634e7967750c4 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feb528a418dbfb9; op2val:0x3fca0227eee2cf53;
op3val:0x3fc634e7967750c4; valaddr_reg:x3; val_offset:3513*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3513*FLEN/8, x4, x1, x2)

inst_1172:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xb528a418dbfb9 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0xa0227eee2cf53 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x634e7967750c4 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feb528a418dbfb9; op2val:0x3fca0227eee2cf53;
op3val:0x3fc634e7967750c4; valaddr_reg:x3; val_offset:3516*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3516*FLEN/8, x4, x1, x2)

inst_1173:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xb528a418dbfb9 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0xa0227eee2cf53 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x634e7967750c4 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feb528a418dbfb9; op2val:0x3fca0227eee2cf53;
op3val:0x3fc634e7967750c4; valaddr_reg:x3; val_offset:3519*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3519*FLEN/8, x4, x1, x2)

inst_1174:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xb528a418dbfb9 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0xa0227eee2cf53 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x634e7967750c4 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feb528a418dbfb9; op2val:0x3fca0227eee2cf53;
op3val:0x3fc634e7967750c4; valaddr_reg:x3; val_offset:3522*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3522*FLEN/8, x4, x1, x2)

inst_1175:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xb624329d65671 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x07ea9e800cb7e and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xc3b0bc5b76267 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feb624329d65671; op2val:0x3ff07ea9e800cb7e;
op3val:0x3fec3b0bc5b76267; valaddr_reg:x3; val_offset:3525*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3525*FLEN/8, x4, x1, x2)

inst_1176:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xb624329d65671 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x07ea9e800cb7e and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xc3b0bc5b76267 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feb624329d65671; op2val:0x3ff07ea9e800cb7e;
op3val:0x3fec3b0bc5b76267; valaddr_reg:x3; val_offset:3528*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3528*FLEN/8, x4, x1, x2)

inst_1177:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xb624329d65671 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x07ea9e800cb7e and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xc3b0bc5b76267 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feb624329d65671; op2val:0x3ff07ea9e800cb7e;
op3val:0x3fec3b0bc5b76267; valaddr_reg:x3; val_offset:3531*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3531*FLEN/8, x4, x1, x2)

inst_1178:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xb624329d65671 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x07ea9e800cb7e and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xc3b0bc5b76267 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feb624329d65671; op2val:0x3ff07ea9e800cb7e;
op3val:0x3fec3b0bc5b76267; valaddr_reg:x3; val_offset:3534*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3534*FLEN/8, x4, x1, x2)

inst_1179:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xb624329d65671 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x07ea9e800cb7e and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xc3b0bc5b76267 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feb624329d65671; op2val:0x3ff07ea9e800cb7e;
op3val:0x3fec3b0bc5b76267; valaddr_reg:x3; val_offset:3537*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3537*FLEN/8, x4, x1, x2)

inst_1180:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xb76dc410292fc and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x1bebed9cba00e and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xe75b515e7d0b4 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feb76dc410292fc; op2val:0x3fe1bebed9cba00e;
op3val:0x3fde75b515e7d0b4; valaddr_reg:x3; val_offset:3540*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3540*FLEN/8, x4, x1, x2)

inst_1181:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xb76dc410292fc and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x1bebed9cba00e and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xe75b515e7d0b4 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feb76dc410292fc; op2val:0x3fe1bebed9cba00e;
op3val:0x3fde75b515e7d0b4; valaddr_reg:x3; val_offset:3543*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3543*FLEN/8, x4, x1, x2)

inst_1182:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xb76dc410292fc and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x1bebed9cba00e and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xe75b515e7d0b4 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feb76dc410292fc; op2val:0x3fe1bebed9cba00e;
op3val:0x3fde75b515e7d0b4; valaddr_reg:x3; val_offset:3546*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3546*FLEN/8, x4, x1, x2)

inst_1183:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xb76dc410292fc and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x1bebed9cba00e and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xe75b515e7d0b4 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feb76dc410292fc; op2val:0x3fe1bebed9cba00e;
op3val:0x3fde75b515e7d0b4; valaddr_reg:x3; val_offset:3549*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3549*FLEN/8, x4, x1, x2)

inst_1184:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xb76dc410292fc and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x1bebed9cba00e and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xe75b515e7d0b4 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feb76dc410292fc; op2val:0x3fe1bebed9cba00e;
op3val:0x3fde75b515e7d0b4; valaddr_reg:x3; val_offset:3552*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3552*FLEN/8, x4, x1, x2)

inst_1185:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xb7f539255d499 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x86e4de3085257 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x4fe474a7ede08 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feb7f539255d499; op2val:0x3fe86e4de3085257;
op3val:0x3fe4fe474a7ede08; valaddr_reg:x3; val_offset:3555*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3555*FLEN/8, x4, x1, x2)

inst_1186:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xb7f539255d499 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x86e4de3085257 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x4fe474a7ede08 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feb7f539255d499; op2val:0x3fe86e4de3085257;
op3val:0x3fe4fe474a7ede08; valaddr_reg:x3; val_offset:3558*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3558*FLEN/8, x4, x1, x2)

inst_1187:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xb7f539255d499 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x86e4de3085257 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x4fe474a7ede08 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feb7f539255d499; op2val:0x3fe86e4de3085257;
op3val:0x3fe4fe474a7ede08; valaddr_reg:x3; val_offset:3561*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3561*FLEN/8, x4, x1, x2)

inst_1188:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xb7f539255d499 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x86e4de3085257 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x4fe474a7ede08 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feb7f539255d499; op2val:0x3fe86e4de3085257;
op3val:0x3fe4fe474a7ede08; valaddr_reg:x3; val_offset:3564*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3564*FLEN/8, x4, x1, x2)

inst_1189:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xb7f539255d499 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x86e4de3085257 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x4fe474a7ede08 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feb7f539255d499; op2val:0x3fe86e4de3085257;
op3val:0x3fe4fe474a7ede08; valaddr_reg:x3; val_offset:3567*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3567*FLEN/8, x4, x1, x2)

inst_1190:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xb8acac45c466a and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x1b4d6df005a55 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xe7ac2b9fa20ca and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feb8acac45c466a; op2val:0x3fe1b4d6df005a55;
op3val:0x3fde7ac2b9fa20ca; valaddr_reg:x3; val_offset:3570*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3570*FLEN/8, x4, x1, x2)

inst_1191:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xb8acac45c466a and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x1b4d6df005a55 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xe7ac2b9fa20ca and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feb8acac45c466a; op2val:0x3fe1b4d6df005a55;
op3val:0x3fde7ac2b9fa20ca; valaddr_reg:x3; val_offset:3573*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3573*FLEN/8, x4, x1, x2)

inst_1192:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xb8acac45c466a and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x1b4d6df005a55 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xe7ac2b9fa20ca and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feb8acac45c466a; op2val:0x3fe1b4d6df005a55;
op3val:0x3fde7ac2b9fa20ca; valaddr_reg:x3; val_offset:3576*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3576*FLEN/8, x4, x1, x2)

inst_1193:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xb8acac45c466a and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x1b4d6df005a55 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xe7ac2b9fa20ca and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feb8acac45c466a; op2val:0x3fe1b4d6df005a55;
op3val:0x3fde7ac2b9fa20ca; valaddr_reg:x3; val_offset:3579*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3579*FLEN/8, x4, x1, x2)

inst_1194:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xb8acac45c466a and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x1b4d6df005a55 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xe7ac2b9fa20ca and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feb8acac45c466a; op2val:0x3fe1b4d6df005a55;
op3val:0x3fde7ac2b9fa20ca; valaddr_reg:x3; val_offset:3582*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3582*FLEN/8, x4, x1, x2)

inst_1195:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xbbdb3557396d9 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x7991da3183a12 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x475159829749f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3febbdb3557396d9; op2val:0x3fe7991da3183a12;
op3val:0x3fe475159829749f; valaddr_reg:x3; val_offset:3585*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3585*FLEN/8, x4, x1, x2)

inst_1196:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xbbdb3557396d9 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x7991da3183a12 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x475159829749f and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3febbdb3557396d9; op2val:0x3fe7991da3183a12;
op3val:0x3fe475159829749f; valaddr_reg:x3; val_offset:3588*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3588*FLEN/8, x4, x1, x2)

inst_1197:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xbbdb3557396d9 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x7991da3183a12 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x475159829749f and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3febbdb3557396d9; op2val:0x3fe7991da3183a12;
op3val:0x3fe475159829749f; valaddr_reg:x3; val_offset:3591*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3591*FLEN/8, x4, x1, x2)

inst_1198:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xbbdb3557396d9 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x7991da3183a12 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x475159829749f and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3febbdb3557396d9; op2val:0x3fe7991da3183a12;
op3val:0x3fe475159829749f; valaddr_reg:x3; val_offset:3594*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3594*FLEN/8, x4, x1, x2)

inst_1199:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xbbdb3557396d9 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x7991da3183a12 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x475159829749f and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3febbdb3557396d9; op2val:0x3fe7991da3183a12;
op3val:0x3fe475159829749f; valaddr_reg:x3; val_offset:3597*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3597*FLEN/8, x4, x1, x2)

inst_1200:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xbce3e93c1a23f and fs2 == 0 and fe2 == 0x3fb and fm2 == 0xa82ad488d1bd0 and fs3 == 0 and fe3 == 0x3fb and fm3 == 0x7091f48528f00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3febce3e93c1a23f; op2val:0x3fba82ad488d1bd0;
op3val:0x3fb7091f48528f00; valaddr_reg:x3; val_offset:3600*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3600*FLEN/8, x4, x1, x2)

inst_1201:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xbce3e93c1a23f and fs2 == 0 and fe2 == 0x3fb and fm2 == 0xa82ad488d1bd0 and fs3 == 0 and fe3 == 0x3fb and fm3 == 0x7091f48528f00 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3febce3e93c1a23f; op2val:0x3fba82ad488d1bd0;
op3val:0x3fb7091f48528f00; valaddr_reg:x3; val_offset:3603*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3603*FLEN/8, x4, x1, x2)

inst_1202:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xbce3e93c1a23f and fs2 == 0 and fe2 == 0x3fb and fm2 == 0xa82ad488d1bd0 and fs3 == 0 and fe3 == 0x3fb and fm3 == 0x7091f48528f00 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3febce3e93c1a23f; op2val:0x3fba82ad488d1bd0;
op3val:0x3fb7091f48528f00; valaddr_reg:x3; val_offset:3606*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3606*FLEN/8, x4, x1, x2)

inst_1203:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xbce3e93c1a23f and fs2 == 0 and fe2 == 0x3fb and fm2 == 0xa82ad488d1bd0 and fs3 == 0 and fe3 == 0x3fb and fm3 == 0x7091f48528f00 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3febce3e93c1a23f; op2val:0x3fba82ad488d1bd0;
op3val:0x3fb7091f48528f00; valaddr_reg:x3; val_offset:3609*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3609*FLEN/8, x4, x1, x2)

inst_1204:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xbce3e93c1a23f and fs2 == 0 and fe2 == 0x3fb and fm2 == 0xa82ad488d1bd0 and fs3 == 0 and fe3 == 0x3fb and fm3 == 0x7091f48528f00 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3febce3e93c1a23f; op2val:0x3fba82ad488d1bd0;
op3val:0x3fb7091f48528f00; valaddr_reg:x3; val_offset:3612*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3612*FLEN/8, x4, x1, x2)

inst_1205:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xbcefaf3ea16fe and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x2263e6c5cc73f and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xf8b5264cd755c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3febcefaf3ea16fe; op2val:0x3ff2263e6c5cc73f;
op3val:0x3fef8b5264cd755c; valaddr_reg:x3; val_offset:3615*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3615*FLEN/8, x4, x1, x2)

inst_1206:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xbcefaf3ea16fe and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x2263e6c5cc73f and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xf8b5264cd755c and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3febcefaf3ea16fe; op2val:0x3ff2263e6c5cc73f;
op3val:0x3fef8b5264cd755c; valaddr_reg:x3; val_offset:3618*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3618*FLEN/8, x4, x1, x2)

inst_1207:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xbcefaf3ea16fe and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x2263e6c5cc73f and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xf8b5264cd755c and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3febcefaf3ea16fe; op2val:0x3ff2263e6c5cc73f;
op3val:0x3fef8b5264cd755c; valaddr_reg:x3; val_offset:3621*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3621*FLEN/8, x4, x1, x2)

inst_1208:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xbcefaf3ea16fe and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x2263e6c5cc73f and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xf8b5264cd755c and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3febcefaf3ea16fe; op2val:0x3ff2263e6c5cc73f;
op3val:0x3fef8b5264cd755c; valaddr_reg:x3; val_offset:3624*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3624*FLEN/8, x4, x1, x2)

inst_1209:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xbcefaf3ea16fe and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x2263e6c5cc73f and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xf8b5264cd755c and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3febcefaf3ea16fe; op2val:0x3ff2263e6c5cc73f;
op3val:0x3fef8b5264cd755c; valaddr_reg:x3; val_offset:3627*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3627*FLEN/8, x4, x1, x2)

inst_1210:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xbdc71e50bea79 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xba728c93bde0e and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x8138a0e688d83 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3febdc71e50bea79; op2val:0x3feba728c93bde0e;
op3val:0x3fe8138a0e688d83; valaddr_reg:x3; val_offset:3630*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3630*FLEN/8, x4, x1, x2)

inst_1211:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xbdc71e50bea79 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xba728c93bde0e and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x8138a0e688d83 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3febdc71e50bea79; op2val:0x3feba728c93bde0e;
op3val:0x3fe8138a0e688d83; valaddr_reg:x3; val_offset:3633*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3633*FLEN/8, x4, x1, x2)

inst_1212:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xbdc71e50bea79 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xba728c93bde0e and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x8138a0e688d83 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3febdc71e50bea79; op2val:0x3feba728c93bde0e;
op3val:0x3fe8138a0e688d83; valaddr_reg:x3; val_offset:3636*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3636*FLEN/8, x4, x1, x2)

inst_1213:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xbdc71e50bea79 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xba728c93bde0e and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x8138a0e688d83 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3febdc71e50bea79; op2val:0x3feba728c93bde0e;
op3val:0x3fe8138a0e688d83; valaddr_reg:x3; val_offset:3639*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3639*FLEN/8, x4, x1, x2)

inst_1214:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xbdc71e50bea79 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xba728c93bde0e and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x8138a0e688d83 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3febdc71e50bea79; op2val:0x3feba728c93bde0e;
op3val:0x3fe8138a0e688d83; valaddr_reg:x3; val_offset:3642*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3642*FLEN/8, x4, x1, x2)

inst_1215:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xbef4d3be3ca3c and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xf1db9f0bf0ff4 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xb29c601a3021a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3febef4d3be3ca3c; op2val:0x3fef1db9f0bf0ff4;
op3val:0x3feb29c601a3021a; valaddr_reg:x3; val_offset:3645*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3645*FLEN/8, x4, x1, x2)

inst_1216:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xbef4d3be3ca3c and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xf1db9f0bf0ff4 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xb29c601a3021a and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3febef4d3be3ca3c; op2val:0x3fef1db9f0bf0ff4;
op3val:0x3feb29c601a3021a; valaddr_reg:x3; val_offset:3648*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3648*FLEN/8, x4, x1, x2)

inst_1217:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xbef4d3be3ca3c and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xf1db9f0bf0ff4 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xb29c601a3021a and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3febef4d3be3ca3c; op2val:0x3fef1db9f0bf0ff4;
op3val:0x3feb29c601a3021a; valaddr_reg:x3; val_offset:3651*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3651*FLEN/8, x4, x1, x2)

inst_1218:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xbef4d3be3ca3c and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xf1db9f0bf0ff4 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xb29c601a3021a and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3febef4d3be3ca3c; op2val:0x3fef1db9f0bf0ff4;
op3val:0x3feb29c601a3021a; valaddr_reg:x3; val_offset:3654*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3654*FLEN/8, x4, x1, x2)

inst_1219:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xbef4d3be3ca3c and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xf1db9f0bf0ff4 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xb29c601a3021a and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3febef4d3be3ca3c; op2val:0x3fef1db9f0bf0ff4;
op3val:0x3feb29c601a3021a; valaddr_reg:x3; val_offset:3657*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3657*FLEN/8, x4, x1, x2)

inst_1220:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc09d07835cfbf and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xc5e50b5e5cccb and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x8db39f57a3d34 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fec09d07835cfbf; op2val:0x3fec5e50b5e5cccb;
op3val:0x3fe8db39f57a3d34; valaddr_reg:x3; val_offset:3660*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3660*FLEN/8, x4, x1, x2)

inst_1221:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc09d07835cfbf and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xc5e50b5e5cccb and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x8db39f57a3d34 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fec09d07835cfbf; op2val:0x3fec5e50b5e5cccb;
op3val:0x3fe8db39f57a3d34; valaddr_reg:x3; val_offset:3663*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3663*FLEN/8, x4, x1, x2)

inst_1222:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc09d07835cfbf and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xc5e50b5e5cccb and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x8db39f57a3d34 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fec09d07835cfbf; op2val:0x3fec5e50b5e5cccb;
op3val:0x3fe8db39f57a3d34; valaddr_reg:x3; val_offset:3666*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3666*FLEN/8, x4, x1, x2)

inst_1223:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc09d07835cfbf and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xc5e50b5e5cccb and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x8db39f57a3d34 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fec09d07835cfbf; op2val:0x3fec5e50b5e5cccb;
op3val:0x3fe8db39f57a3d34; valaddr_reg:x3; val_offset:3669*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3669*FLEN/8, x4, x1, x2)

inst_1224:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc09d07835cfbf and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xc5e50b5e5cccb and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x8db39f57a3d34 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fec09d07835cfbf; op2val:0x3fec5e50b5e5cccb;
op3val:0x3fe8db39f57a3d34; valaddr_reg:x3; val_offset:3672*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3672*FLEN/8, x4, x1, x2)

inst_1225:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc1bac466e3809 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x452f692527aef and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x1da2b2abc6fcb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fec1bac466e3809; op2val:0x3fe452f692527aef;
op3val:0x3fe1da2b2abc6fcb; valaddr_reg:x3; val_offset:3675*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3675*FLEN/8, x4, x1, x2)

inst_1226:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc1bac466e3809 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x452f692527aef and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x1da2b2abc6fcb and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fec1bac466e3809; op2val:0x3fe452f692527aef;
op3val:0x3fe1da2b2abc6fcb; valaddr_reg:x3; val_offset:3678*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3678*FLEN/8, x4, x1, x2)

inst_1227:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc1bac466e3809 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x452f692527aef and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x1da2b2abc6fcb and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fec1bac466e3809; op2val:0x3fe452f692527aef;
op3val:0x3fe1da2b2abc6fcb; valaddr_reg:x3; val_offset:3681*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3681*FLEN/8, x4, x1, x2)

inst_1228:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc1bac466e3809 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x452f692527aef and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x1da2b2abc6fcb and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fec1bac466e3809; op2val:0x3fe452f692527aef;
op3val:0x3fe1da2b2abc6fcb; valaddr_reg:x3; val_offset:3684*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3684*FLEN/8, x4, x1, x2)

inst_1229:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc1bac466e3809 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x452f692527aef and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x1da2b2abc6fcb and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fec1bac466e3809; op2val:0x3fe452f692527aef;
op3val:0x3fe1da2b2abc6fcb; valaddr_reg:x3; val_offset:3687*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3687*FLEN/8, x4, x1, x2)

inst_1230:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc7f5fa41f86ad and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xe21aed532adf0 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xad568b6f3d1b9 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fec7f5fa41f86ad; op2val:0x3fee21aed532adf0;
op3val:0x3fead568b6f3d1b9; valaddr_reg:x3; val_offset:3690*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3690*FLEN/8, x4, x1, x2)

inst_1231:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc7f5fa41f86ad and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xe21aed532adf0 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xad568b6f3d1b9 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fec7f5fa41f86ad; op2val:0x3fee21aed532adf0;
op3val:0x3fead568b6f3d1b9; valaddr_reg:x3; val_offset:3693*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3693*FLEN/8, x4, x1, x2)

inst_1232:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc7f5fa41f86ad and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xe21aed532adf0 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xad568b6f3d1b9 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fec7f5fa41f86ad; op2val:0x3fee21aed532adf0;
op3val:0x3fead568b6f3d1b9; valaddr_reg:x3; val_offset:3696*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3696*FLEN/8, x4, x1, x2)

inst_1233:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc7f5fa41f86ad and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xe21aed532adf0 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xad568b6f3d1b9 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fec7f5fa41f86ad; op2val:0x3fee21aed532adf0;
op3val:0x3fead568b6f3d1b9; valaddr_reg:x3; val_offset:3699*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3699*FLEN/8, x4, x1, x2)

inst_1234:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc7f5fa41f86ad and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xe21aed532adf0 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xad568b6f3d1b9 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fec7f5fa41f86ad; op2val:0x3fee21aed532adf0;
op3val:0x3fead568b6f3d1b9; valaddr_reg:x3; val_offset:3702*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3702*FLEN/8, x4, x1, x2)

inst_1235:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc9ac06c779321 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xf7b45dc8f3c8c and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xc241baf8ba09c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fec9ac06c779321; op2val:0x3fdf7b45dc8f3c8c;
op3val:0x3fdc241baf8ba09c; valaddr_reg:x3; val_offset:3705*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3705*FLEN/8, x4, x1, x2)

inst_1236:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc9ac06c779321 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xf7b45dc8f3c8c and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xc241baf8ba09c and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fec9ac06c779321; op2val:0x3fdf7b45dc8f3c8c;
op3val:0x3fdc241baf8ba09c; valaddr_reg:x3; val_offset:3708*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3708*FLEN/8, x4, x1, x2)

inst_1237:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc9ac06c779321 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xf7b45dc8f3c8c and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xc241baf8ba09c and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fec9ac06c779321; op2val:0x3fdf7b45dc8f3c8c;
op3val:0x3fdc241baf8ba09c; valaddr_reg:x3; val_offset:3711*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3711*FLEN/8, x4, x1, x2)

inst_1238:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc9ac06c779321 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xf7b45dc8f3c8c and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xc241baf8ba09c and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fec9ac06c779321; op2val:0x3fdf7b45dc8f3c8c;
op3val:0x3fdc241baf8ba09c; valaddr_reg:x3; val_offset:3714*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3714*FLEN/8, x4, x1, x2)

inst_1239:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc9ac06c779321 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xf7b45dc8f3c8c and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xc241baf8ba09c and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fec9ac06c779321; op2val:0x3fdf7b45dc8f3c8c;
op3val:0x3fdc241baf8ba09c; valaddr_reg:x3; val_offset:3717*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3717*FLEN/8, x4, x1, x2)

inst_1240:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xca486367e57c9 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x77a66a706dcb4 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x503cf98c71f4c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feca486367e57c9; op2val:0x3fc77a66a706dcb4;
op3val:0x3fc503cf98c71f4c; valaddr_reg:x3; val_offset:3720*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3720*FLEN/8, x4, x1, x2)

inst_1241:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xca486367e57c9 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x77a66a706dcb4 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x503cf98c71f4c and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feca486367e57c9; op2val:0x3fc77a66a706dcb4;
op3val:0x3fc503cf98c71f4c; valaddr_reg:x3; val_offset:3723*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3723*FLEN/8, x4, x1, x2)

inst_1242:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xca486367e57c9 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x77a66a706dcb4 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x503cf98c71f4c and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feca486367e57c9; op2val:0x3fc77a66a706dcb4;
op3val:0x3fc503cf98c71f4c; valaddr_reg:x3; val_offset:3726*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3726*FLEN/8, x4, x1, x2)

inst_1243:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xca486367e57c9 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x77a66a706dcb4 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x503cf98c71f4c and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feca486367e57c9; op2val:0x3fc77a66a706dcb4;
op3val:0x3fc503cf98c71f4c; valaddr_reg:x3; val_offset:3729*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3729*FLEN/8, x4, x1, x2)

inst_1244:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xca486367e57c9 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x77a66a706dcb4 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x503cf98c71f4c and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feca486367e57c9; op2val:0x3fc77a66a706dcb4;
op3val:0x3fc503cf98c71f4c; valaddr_reg:x3; val_offset:3732*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3732*FLEN/8, x4, x1, x2)

inst_1245:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xca5a543a9ebd8 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xa40b0412fbf1b and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x7807f5ae98daf and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feca5a543a9ebd8; op2val:0x3fea40b0412fbf1b;
op3val:0x3fe7807f5ae98daf; valaddr_reg:x3; val_offset:3735*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3735*FLEN/8, x4, x1, x2)

inst_1246:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xca5a543a9ebd8 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xa40b0412fbf1b and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x7807f5ae98daf and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feca5a543a9ebd8; op2val:0x3fea40b0412fbf1b;
op3val:0x3fe7807f5ae98daf; valaddr_reg:x3; val_offset:3738*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3738*FLEN/8, x4, x1, x2)

inst_1247:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xca5a543a9ebd8 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xa40b0412fbf1b and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x7807f5ae98daf and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feca5a543a9ebd8; op2val:0x3fea40b0412fbf1b;
op3val:0x3fe7807f5ae98daf; valaddr_reg:x3; val_offset:3741*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3741*FLEN/8, x4, x1, x2)

inst_1248:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xca5a543a9ebd8 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xa40b0412fbf1b and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x7807f5ae98daf and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feca5a543a9ebd8; op2val:0x3fea40b0412fbf1b;
op3val:0x3fe7807f5ae98daf; valaddr_reg:x3; val_offset:3744*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3744*FLEN/8, x4, x1, x2)

inst_1249:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xca5a543a9ebd8 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xa40b0412fbf1b and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x7807f5ae98daf and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feca5a543a9ebd8; op2val:0x3fea40b0412fbf1b;
op3val:0x3fe7807f5ae98daf; valaddr_reg:x3; val_offset:3747*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3747*FLEN/8, x4, x1, x2)

inst_1250:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xcafd2fa12ebaf and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xa1bd2cabedb1b and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x767ccbccbe4bc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fecafd2fa12ebaf; op2val:0x3fda1bd2cabedb1b;
op3val:0x3fd767ccbccbe4bc; valaddr_reg:x3; val_offset:3750*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3750*FLEN/8, x4, x1, x2)

inst_1251:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xcafd2fa12ebaf and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xa1bd2cabedb1b and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x767ccbccbe4bc and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fecafd2fa12ebaf; op2val:0x3fda1bd2cabedb1b;
op3val:0x3fd767ccbccbe4bc; valaddr_reg:x3; val_offset:3753*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3753*FLEN/8, x4, x1, x2)

inst_1252:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xcafd2fa12ebaf and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xa1bd2cabedb1b and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x767ccbccbe4bc and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fecafd2fa12ebaf; op2val:0x3fda1bd2cabedb1b;
op3val:0x3fd767ccbccbe4bc; valaddr_reg:x3; val_offset:3756*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3756*FLEN/8, x4, x1, x2)

inst_1253:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xcafd2fa12ebaf and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xa1bd2cabedb1b and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x767ccbccbe4bc and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fecafd2fa12ebaf; op2val:0x3fda1bd2cabedb1b;
op3val:0x3fd767ccbccbe4bc; valaddr_reg:x3; val_offset:3759*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3759*FLEN/8, x4, x1, x2)

inst_1254:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xcafd2fa12ebaf and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xa1bd2cabedb1b and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x767ccbccbe4bc and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fecafd2fa12ebaf; op2val:0x3fda1bd2cabedb1b;
op3val:0x3fd767ccbccbe4bc; valaddr_reg:x3; val_offset:3762*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3762*FLEN/8, x4, x1, x2)

inst_1255:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xcbecaf7cb24c8 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x78eb882e3f81f and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x5295645688994 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fecbecaf7cb24c8; op2val:0x3fc78eb882e3f81f;
op3val:0x3fc5295645688994; valaddr_reg:x3; val_offset:3765*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3765*FLEN/8, x4, x1, x2)

inst_1256:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xcbecaf7cb24c8 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x78eb882e3f81f and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x5295645688994 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fecbecaf7cb24c8; op2val:0x3fc78eb882e3f81f;
op3val:0x3fc5295645688994; valaddr_reg:x3; val_offset:3768*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3768*FLEN/8, x4, x1, x2)

inst_1257:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xcbecaf7cb24c8 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x78eb882e3f81f and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x5295645688994 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fecbecaf7cb24c8; op2val:0x3fc78eb882e3f81f;
op3val:0x3fc5295645688994; valaddr_reg:x3; val_offset:3771*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3771*FLEN/8, x4, x1, x2)

inst_1258:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xcbecaf7cb24c8 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x78eb882e3f81f and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x5295645688994 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fecbecaf7cb24c8; op2val:0x3fc78eb882e3f81f;
op3val:0x3fc5295645688994; valaddr_reg:x3; val_offset:3774*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3774*FLEN/8, x4, x1, x2)

inst_1259:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xcbecaf7cb24c8 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x78eb882e3f81f and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x5295645688994 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fecbecaf7cb24c8; op2val:0x3fc78eb882e3f81f;
op3val:0x3fc5295645688994; valaddr_reg:x3; val_offset:3777*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3777*FLEN/8, x4, x1, x2)

inst_1260:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xcc0cdcc3446c7 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x6aa0113d7bd51 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x45d4eb98b8876 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fecc0cdcc3446c7; op2val:0x3fe6aa0113d7bd51;
op3val:0x3fe45d4eb98b8876; valaddr_reg:x3; val_offset:3780*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3780*FLEN/8, x4, x1, x2)

inst_1261:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xcc0cdcc3446c7 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x6aa0113d7bd51 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x45d4eb98b8876 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fecc0cdcc3446c7; op2val:0x3fe6aa0113d7bd51;
op3val:0x3fe45d4eb98b8876; valaddr_reg:x3; val_offset:3783*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3783*FLEN/8, x4, x1, x2)

inst_1262:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xcc0cdcc3446c7 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x6aa0113d7bd51 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x45d4eb98b8876 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fecc0cdcc3446c7; op2val:0x3fe6aa0113d7bd51;
op3val:0x3fe45d4eb98b8876; valaddr_reg:x3; val_offset:3786*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3786*FLEN/8, x4, x1, x2)

inst_1263:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xcc0cdcc3446c7 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x6aa0113d7bd51 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x45d4eb98b8876 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fecc0cdcc3446c7; op2val:0x3fe6aa0113d7bd51;
op3val:0x3fe45d4eb98b8876; valaddr_reg:x3; val_offset:3789*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3789*FLEN/8, x4, x1, x2)

inst_1264:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xcc0cdcc3446c7 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x6aa0113d7bd51 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x45d4eb98b8876 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fecc0cdcc3446c7; op2val:0x3fe6aa0113d7bd51;
op3val:0x3fe45d4eb98b8876; valaddr_reg:x3; val_offset:3792*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3792*FLEN/8, x4, x1, x2)

inst_1265:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xd20bd7b6cae9e and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x51c41351f8394 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x3373459a71db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fed20bd7b6cae9e; op2val:0x3fe51c41351f8394;
op3val:0x3fe3373459a71db6; valaddr_reg:x3; val_offset:3795*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3795*FLEN/8, x4, x1, x2)

inst_1266:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xd20bd7b6cae9e and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x51c41351f8394 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x3373459a71db6 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fed20bd7b6cae9e; op2val:0x3fe51c41351f8394;
op3val:0x3fe3373459a71db6; valaddr_reg:x3; val_offset:3798*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3798*FLEN/8, x4, x1, x2)

inst_1267:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xd20bd7b6cae9e and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x51c41351f8394 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x3373459a71db6 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fed20bd7b6cae9e; op2val:0x3fe51c41351f8394;
op3val:0x3fe3373459a71db6; valaddr_reg:x3; val_offset:3801*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3801*FLEN/8, x4, x1, x2)

inst_1268:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xd20bd7b6cae9e and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x51c41351f8394 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x3373459a71db6 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fed20bd7b6cae9e; op2val:0x3fe51c41351f8394;
op3val:0x3fe3373459a71db6; valaddr_reg:x3; val_offset:3804*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3804*FLEN/8, x4, x1, x2)

inst_1269:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xd20bd7b6cae9e and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x51c41351f8394 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x3373459a71db6 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fed20bd7b6cae9e; op2val:0x3fe51c41351f8394;
op3val:0x3fe3373459a71db6; valaddr_reg:x3; val_offset:3807*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3807*FLEN/8, x4, x1, x2)

inst_1270:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xd232026e23d7e and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x08fa92bae5289 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xe28be28cd38ec and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fed232026e23d7e; op2val:0x3ff08fa92bae5289;
op3val:0x3fee28be28cd38ec; valaddr_reg:x3; val_offset:3810*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3810*FLEN/8, x4, x1, x2)

inst_1271:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xd232026e23d7e and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x08fa92bae5289 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xe28be28cd38ec and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fed232026e23d7e; op2val:0x3ff08fa92bae5289;
op3val:0x3fee28be28cd38ec; valaddr_reg:x3; val_offset:3813*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3813*FLEN/8, x4, x1, x2)

inst_1272:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xd232026e23d7e and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x08fa92bae5289 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xe28be28cd38ec and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fed232026e23d7e; op2val:0x3ff08fa92bae5289;
op3val:0x3fee28be28cd38ec; valaddr_reg:x3; val_offset:3816*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3816*FLEN/8, x4, x1, x2)

inst_1273:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xd232026e23d7e and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x08fa92bae5289 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xe28be28cd38ec and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fed232026e23d7e; op2val:0x3ff08fa92bae5289;
op3val:0x3fee28be28cd38ec; valaddr_reg:x3; val_offset:3819*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3819*FLEN/8, x4, x1, x2)

inst_1274:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xd232026e23d7e and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x08fa92bae5289 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xe28be28cd38ec and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fed232026e23d7e; op2val:0x3ff08fa92bae5289;
op3val:0x3fee28be28cd38ec; valaddr_reg:x3; val_offset:3822*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3822*FLEN/8, x4, x1, x2)

inst_1275:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xd406ecf6c6c77 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xf6de5f6b3e635 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xcbae10900557b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fed406ecf6c6c77; op2val:0x3fef6de5f6b3e635;
op3val:0x3fecbae10900557b; valaddr_reg:x3; val_offset:3825*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3825*FLEN/8, x4, x1, x2)

inst_1276:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xd406ecf6c6c77 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xf6de5f6b3e635 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xcbae10900557b and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fed406ecf6c6c77; op2val:0x3fef6de5f6b3e635;
op3val:0x3fecbae10900557b; valaddr_reg:x3; val_offset:3828*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3828*FLEN/8, x4, x1, x2)

inst_1277:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xd406ecf6c6c77 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xf6de5f6b3e635 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xcbae10900557b and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fed406ecf6c6c77; op2val:0x3fef6de5f6b3e635;
op3val:0x3fecbae10900557b; valaddr_reg:x3; val_offset:3831*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3831*FLEN/8, x4, x1, x2)

inst_1278:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xd406ecf6c6c77 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xf6de5f6b3e635 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xcbae10900557b and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fed406ecf6c6c77; op2val:0x3fef6de5f6b3e635;
op3val:0x3fecbae10900557b; valaddr_reg:x3; val_offset:3834*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3834*FLEN/8, x4, x1, x2)

inst_1279:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xd406ecf6c6c77 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xf6de5f6b3e635 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xcbae10900557b and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fed406ecf6c6c77; op2val:0x3fef6de5f6b3e635;
op3val:0x3fecbae10900557b; valaddr_reg:x3; val_offset:3837*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3837*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_11)

inst_1280:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xd497ea0a951d3 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x7bc1609f19c0f and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x5b8f6f70a6ff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fed497ea0a951d3; op2val:0x3fd7bc1609f19c0f;
op3val:0x3fd5b8f6f70a6ff8; valaddr_reg:x3; val_offset:3840*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3840*FLEN/8, x4, x1, x2)

inst_1281:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xd497ea0a951d3 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x7bc1609f19c0f and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x5b8f6f70a6ff8 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fed497ea0a951d3; op2val:0x3fd7bc1609f19c0f;
op3val:0x3fd5b8f6f70a6ff8; valaddr_reg:x3; val_offset:3843*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3843*FLEN/8, x4, x1, x2)

inst_1282:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xd497ea0a951d3 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x7bc1609f19c0f and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x5b8f6f70a6ff8 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fed497ea0a951d3; op2val:0x3fd7bc1609f19c0f;
op3val:0x3fd5b8f6f70a6ff8; valaddr_reg:x3; val_offset:3846*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3846*FLEN/8, x4, x1, x2)

inst_1283:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xd497ea0a951d3 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x7bc1609f19c0f and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x5b8f6f70a6ff8 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fed497ea0a951d3; op2val:0x3fd7bc1609f19c0f;
op3val:0x3fd5b8f6f70a6ff8; valaddr_reg:x3; val_offset:3849*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3849*FLEN/8, x4, x1, x2)

inst_1284:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xd497ea0a951d3 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x7bc1609f19c0f and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x5b8f6f70a6ff8 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fed497ea0a951d3; op2val:0x3fd7bc1609f19c0f;
op3val:0x3fd5b8f6f70a6ff8; valaddr_reg:x3; val_offset:3852*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3852*FLEN/8, x4, x1, x2)

inst_1285:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xd4be66156ce8f and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x63147bdda2b8a and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x4514c49e7e884 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fed4be66156ce8f; op2val:0x3fc63147bdda2b8a;
op3val:0x3fc4514c49e7e884; valaddr_reg:x3; val_offset:3855*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3855*FLEN/8, x4, x1, x2)

inst_1286:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xd4be66156ce8f and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x63147bdda2b8a and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x4514c49e7e884 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fed4be66156ce8f; op2val:0x3fc63147bdda2b8a;
op3val:0x3fc4514c49e7e884; valaddr_reg:x3; val_offset:3858*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3858*FLEN/8, x4, x1, x2)

inst_1287:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xd4be66156ce8f and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x63147bdda2b8a and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x4514c49e7e884 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fed4be66156ce8f; op2val:0x3fc63147bdda2b8a;
op3val:0x3fc4514c49e7e884; valaddr_reg:x3; val_offset:3861*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3861*FLEN/8, x4, x1, x2)

inst_1288:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xd4be66156ce8f and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x63147bdda2b8a and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x4514c49e7e884 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fed4be66156ce8f; op2val:0x3fc63147bdda2b8a;
op3val:0x3fc4514c49e7e884; valaddr_reg:x3; val_offset:3864*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3864*FLEN/8, x4, x1, x2)

inst_1289:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xd4be66156ce8f and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x63147bdda2b8a and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x4514c49e7e884 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fed4be66156ce8f; op2val:0x3fc63147bdda2b8a;
op3val:0x3fc4514c49e7e884; valaddr_reg:x3; val_offset:3867*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3867*FLEN/8, x4, x1, x2)

inst_1290:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xd51fb319139f1 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x415ad547ac9cd and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x267199c710454 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fed51fb319139f1; op2val:0x3fc415ad547ac9cd;
op3val:0x3fc267199c710454; valaddr_reg:x3; val_offset:3870*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3870*FLEN/8, x4, x1, x2)

inst_1291:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xd51fb319139f1 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x415ad547ac9cd and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x267199c710454 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fed51fb319139f1; op2val:0x3fc415ad547ac9cd;
op3val:0x3fc267199c710454; valaddr_reg:x3; val_offset:3873*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3873*FLEN/8, x4, x1, x2)

inst_1292:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xd51fb319139f1 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x415ad547ac9cd and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x267199c710454 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fed51fb319139f1; op2val:0x3fc415ad547ac9cd;
op3val:0x3fc267199c710454; valaddr_reg:x3; val_offset:3876*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3876*FLEN/8, x4, x1, x2)

inst_1293:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xd51fb319139f1 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x415ad547ac9cd and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x267199c710454 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fed51fb319139f1; op2val:0x3fc415ad547ac9cd;
op3val:0x3fc267199c710454; valaddr_reg:x3; val_offset:3879*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3879*FLEN/8, x4, x1, x2)

inst_1294:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xd51fb319139f1 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x415ad547ac9cd and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x267199c710454 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fed51fb319139f1; op2val:0x3fc415ad547ac9cd;
op3val:0x3fc267199c710454; valaddr_reg:x3; val_offset:3882*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3882*FLEN/8, x4, x1, x2)

inst_1295:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xd6be0c355a414 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x32bba587a20be and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x1a041be64b75f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fed6be0c355a414; op2val:0x3fe32bba587a20be;
op3val:0x3fe1a041be64b75f; valaddr_reg:x3; val_offset:3885*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3885*FLEN/8, x4, x1, x2)

inst_1296:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xd6be0c355a414 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x32bba587a20be and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x1a041be64b75f and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fed6be0c355a414; op2val:0x3fe32bba587a20be;
op3val:0x3fe1a041be64b75f; valaddr_reg:x3; val_offset:3888*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3888*FLEN/8, x4, x1, x2)

inst_1297:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xd6be0c355a414 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x32bba587a20be and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x1a041be64b75f and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fed6be0c355a414; op2val:0x3fe32bba587a20be;
op3val:0x3fe1a041be64b75f; valaddr_reg:x3; val_offset:3891*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3891*FLEN/8, x4, x1, x2)

inst_1298:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xd6be0c355a414 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x32bba587a20be and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x1a041be64b75f and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fed6be0c355a414; op2val:0x3fe32bba587a20be;
op3val:0x3fe1a041be64b75f; valaddr_reg:x3; val_offset:3894*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3894*FLEN/8, x4, x1, x2)

inst_1299:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xd6be0c355a414 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x32bba587a20be and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x1a041be64b75f and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fed6be0c355a414; op2val:0x3fe32bba587a20be;
op3val:0x3fe1a041be64b75f; valaddr_reg:x3; val_offset:3897*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3897*FLEN/8, x4, x1, x2)

inst_1300:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xd9e1b089d8f26 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x964829049c135 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x7808c0b0f945c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fed9e1b089d8f26; op2val:0x3fe964829049c135;
op3val:0x3fe7808c0b0f945c; valaddr_reg:x3; val_offset:3900*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3900*FLEN/8, x4, x1, x2)

inst_1301:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xd9e1b089d8f26 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x964829049c135 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x7808c0b0f945c and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fed9e1b089d8f26; op2val:0x3fe964829049c135;
op3val:0x3fe7808c0b0f945c; valaddr_reg:x3; val_offset:3903*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3903*FLEN/8, x4, x1, x2)

inst_1302:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xd9e1b089d8f26 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x964829049c135 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x7808c0b0f945c and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fed9e1b089d8f26; op2val:0x3fe964829049c135;
op3val:0x3fe7808c0b0f945c; valaddr_reg:x3; val_offset:3906*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3906*FLEN/8, x4, x1, x2)

inst_1303:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xd9e1b089d8f26 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x964829049c135 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x7808c0b0f945c and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fed9e1b089d8f26; op2val:0x3fe964829049c135;
op3val:0x3fe7808c0b0f945c; valaddr_reg:x3; val_offset:3909*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3909*FLEN/8, x4, x1, x2)

inst_1304:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xd9e1b089d8f26 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x964829049c135 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x7808c0b0f945c and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fed9e1b089d8f26; op2val:0x3fe964829049c135;
op3val:0x3fe7808c0b0f945c; valaddr_reg:x3; val_offset:3912*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3912*FLEN/8, x4, x1, x2)

inst_1305:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xda8fea32634a6 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x6d2951da42bce and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x5275e4d93e80c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feda8fea32634a6; op2val:0x3fd6d2951da42bce;
op3val:0x3fd5275e4d93e80c; valaddr_reg:x3; val_offset:3915*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3915*FLEN/8, x4, x1, x2)

inst_1306:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xda8fea32634a6 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x6d2951da42bce and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x5275e4d93e80c and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feda8fea32634a6; op2val:0x3fd6d2951da42bce;
op3val:0x3fd5275e4d93e80c; valaddr_reg:x3; val_offset:3918*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3918*FLEN/8, x4, x1, x2)

inst_1307:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xda8fea32634a6 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x6d2951da42bce and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x5275e4d93e80c and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feda8fea32634a6; op2val:0x3fd6d2951da42bce;
op3val:0x3fd5275e4d93e80c; valaddr_reg:x3; val_offset:3921*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3921*FLEN/8, x4, x1, x2)

inst_1308:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xda8fea32634a6 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x6d2951da42bce and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x5275e4d93e80c and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feda8fea32634a6; op2val:0x3fd6d2951da42bce;
op3val:0x3fd5275e4d93e80c; valaddr_reg:x3; val_offset:3924*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3924*FLEN/8, x4, x1, x2)

inst_1309:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xda8fea32634a6 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x6d2951da42bce and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x5275e4d93e80c and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feda8fea32634a6; op2val:0x3fd6d2951da42bce;
op3val:0x3fd5275e4d93e80c; valaddr_reg:x3; val_offset:3927*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3927*FLEN/8, x4, x1, x2)

inst_1310:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xdadb3cd50bca1 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xa33461ae28bce and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x84caff2496196 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fedadb3cd50bca1; op2val:0x3fea33461ae28bce;
op3val:0x3fe84caff2496196; valaddr_reg:x3; val_offset:3930*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3930*FLEN/8, x4, x1, x2)

inst_1311:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xdadb3cd50bca1 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xa33461ae28bce and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x84caff2496196 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fedadb3cd50bca1; op2val:0x3fea33461ae28bce;
op3val:0x3fe84caff2496196; valaddr_reg:x3; val_offset:3933*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3933*FLEN/8, x4, x1, x2)

inst_1312:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xdadb3cd50bca1 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xa33461ae28bce and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x84caff2496196 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fedadb3cd50bca1; op2val:0x3fea33461ae28bce;
op3val:0x3fe84caff2496196; valaddr_reg:x3; val_offset:3936*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3936*FLEN/8, x4, x1, x2)

inst_1313:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xdadb3cd50bca1 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xa33461ae28bce and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x84caff2496196 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fedadb3cd50bca1; op2val:0x3fea33461ae28bce;
op3val:0x3fe84caff2496196; valaddr_reg:x3; val_offset:3939*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3939*FLEN/8, x4, x1, x2)

inst_1314:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xdadb3cd50bca1 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xa33461ae28bce and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x84caff2496196 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fedadb3cd50bca1; op2val:0x3fea33461ae28bce;
op3val:0x3fe84caff2496196; valaddr_reg:x3; val_offset:3942*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3942*FLEN/8, x4, x1, x2)

inst_1315:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xdaec8a2ec9f57 and fs2 == 0 and fe2 == 0x3fb and fm2 == 0x103bacd037aaf and fs3 == 0 and fe3 == 0x3fa and fm3 == 0xf90a07eec3ab0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fedaec8a2ec9f57; op2val:0x3fb103bacd037aaf;
op3val:0x3faf90a07eec3ab0; valaddr_reg:x3; val_offset:3945*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3945*FLEN/8, x4, x1, x2)

inst_1316:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xdaec8a2ec9f57 and fs2 == 0 and fe2 == 0x3fb and fm2 == 0x103bacd037aaf and fs3 == 0 and fe3 == 0x3fa and fm3 == 0xf90a07eec3ab0 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fedaec8a2ec9f57; op2val:0x3fb103bacd037aaf;
op3val:0x3faf90a07eec3ab0; valaddr_reg:x3; val_offset:3948*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3948*FLEN/8, x4, x1, x2)

inst_1317:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xdaec8a2ec9f57 and fs2 == 0 and fe2 == 0x3fb and fm2 == 0x103bacd037aaf and fs3 == 0 and fe3 == 0x3fa and fm3 == 0xf90a07eec3ab0 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fedaec8a2ec9f57; op2val:0x3fb103bacd037aaf;
op3val:0x3faf90a07eec3ab0; valaddr_reg:x3; val_offset:3951*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3951*FLEN/8, x4, x1, x2)

inst_1318:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xdaec8a2ec9f57 and fs2 == 0 and fe2 == 0x3fb and fm2 == 0x103bacd037aaf and fs3 == 0 and fe3 == 0x3fa and fm3 == 0xf90a07eec3ab0 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fedaec8a2ec9f57; op2val:0x3fb103bacd037aaf;
op3val:0x3faf90a07eec3ab0; valaddr_reg:x3; val_offset:3954*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3954*FLEN/8, x4, x1, x2)

inst_1319:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xdaec8a2ec9f57 and fs2 == 0 and fe2 == 0x3fb and fm2 == 0x103bacd037aaf and fs3 == 0 and fe3 == 0x3fa and fm3 == 0xf90a07eec3ab0 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fedaec8a2ec9f57; op2val:0x3fb103bacd037aaf;
op3val:0x3faf90a07eec3ab0; valaddr_reg:x3; val_offset:3957*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3957*FLEN/8, x4, x1, x2)

inst_1320:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xdbca3817f8a7b and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x1d85bca5f2b23 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x0954578f60ef8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fedbca3817f8a7b; op2val:0x3fd1d85bca5f2b23;
op3val:0x3fd0954578f60ef8; valaddr_reg:x3; val_offset:3960*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3960*FLEN/8, x4, x1, x2)

inst_1321:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xdbca3817f8a7b and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x1d85bca5f2b23 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x0954578f60ef8 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fedbca3817f8a7b; op2val:0x3fd1d85bca5f2b23;
op3val:0x3fd0954578f60ef8; valaddr_reg:x3; val_offset:3963*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3963*FLEN/8, x4, x1, x2)

inst_1322:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xdbca3817f8a7b and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x1d85bca5f2b23 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x0954578f60ef8 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fedbca3817f8a7b; op2val:0x3fd1d85bca5f2b23;
op3val:0x3fd0954578f60ef8; valaddr_reg:x3; val_offset:3966*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3966*FLEN/8, x4, x1, x2)

inst_1323:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xdbca3817f8a7b and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x1d85bca5f2b23 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x0954578f60ef8 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fedbca3817f8a7b; op2val:0x3fd1d85bca5f2b23;
op3val:0x3fd0954578f60ef8; valaddr_reg:x3; val_offset:3969*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3969*FLEN/8, x4, x1, x2)

inst_1324:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xdbca3817f8a7b and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x1d85bca5f2b23 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x0954578f60ef8 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fedbca3817f8a7b; op2val:0x3fd1d85bca5f2b23;
op3val:0x3fd0954578f60ef8; valaddr_reg:x3; val_offset:3972*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3972*FLEN/8, x4, x1, x2)

inst_1325:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xdc3be8f098fa4 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xf484d66a17113 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xd18e105cbba45 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fedc3be8f098fa4; op2val:0x3fef484d66a17113;
op3val:0x3fed18e105cbba45; valaddr_reg:x3; val_offset:3975*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3975*FLEN/8, x4, x1, x2)

inst_1326:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xdc3be8f098fa4 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xf484d66a17113 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xd18e105cbba45 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fedc3be8f098fa4; op2val:0x3fef484d66a17113;
op3val:0x3fed18e105cbba45; valaddr_reg:x3; val_offset:3978*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3978*FLEN/8, x4, x1, x2)

inst_1327:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xdc3be8f098fa4 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xf484d66a17113 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xd18e105cbba45 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fedc3be8f098fa4; op2val:0x3fef484d66a17113;
op3val:0x3fed18e105cbba45; valaddr_reg:x3; val_offset:3981*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3981*FLEN/8, x4, x1, x2)

inst_1328:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xdc3be8f098fa4 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xf484d66a17113 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xd18e105cbba45 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fedc3be8f098fa4; op2val:0x3fef484d66a17113;
op3val:0x3fed18e105cbba45; valaddr_reg:x3; val_offset:3984*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3984*FLEN/8, x4, x1, x2)

inst_1329:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xdc3be8f098fa4 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xf484d66a17113 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xd18e105cbba45 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fedc3be8f098fa4; op2val:0x3fef484d66a17113;
op3val:0x3fed18e105cbba45; valaddr_reg:x3; val_offset:3987*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3987*FLEN/8, x4, x1, x2)

inst_1330:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xdde3a6af133c3 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x2d18c08b00fb1 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x19096fe0d9bd8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fedde3a6af133c3; op2val:0x3fc2d18c08b00fb1;
op3val:0x3fc19096fe0d9bd8; valaddr_reg:x3; val_offset:3990*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3990*FLEN/8, x4, x1, x2)

inst_1331:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xdde3a6af133c3 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x2d18c08b00fb1 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x19096fe0d9bd8 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fedde3a6af133c3; op2val:0x3fc2d18c08b00fb1;
op3val:0x3fc19096fe0d9bd8; valaddr_reg:x3; val_offset:3993*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3993*FLEN/8, x4, x1, x2)

inst_1332:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xdde3a6af133c3 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x2d18c08b00fb1 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x19096fe0d9bd8 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fedde3a6af133c3; op2val:0x3fc2d18c08b00fb1;
op3val:0x3fc19096fe0d9bd8; valaddr_reg:x3; val_offset:3996*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3996*FLEN/8, x4, x1, x2)

inst_1333:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xdde3a6af133c3 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x2d18c08b00fb1 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x19096fe0d9bd8 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fedde3a6af133c3; op2val:0x3fc2d18c08b00fb1;
op3val:0x3fc19096fe0d9bd8; valaddr_reg:x3; val_offset:3999*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3999*FLEN/8, x4, x1, x2)

inst_1334:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xdde3a6af133c3 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x2d18c08b00fb1 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x19096fe0d9bd8 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fedde3a6af133c3; op2val:0x3fc2d18c08b00fb1;
op3val:0x3fc19096fe0d9bd8; valaddr_reg:x3; val_offset:4002*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 4002*FLEN/8, x4, x1, x2)

inst_1335:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xdf1546f8c7110 and fs2 == 0 and fe2 == 0x3f9 and fm2 == 0x053028965855d and fs3 == 0 and fe3 == 0x3f8 and fm3 == 0xe8cad14da0780 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fedf1546f8c7110; op2val:0x3f9053028965855d;
op3val:0x3f8e8cad14da0780; valaddr_reg:x3; val_offset:4005*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 4005*FLEN/8, x4, x1, x2)

inst_1336:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xdf1546f8c7110 and fs2 == 0 and fe2 == 0x3f9 and fm2 == 0x053028965855d and fs3 == 0 and fe3 == 0x3f8 and fm3 == 0xe8cad14da0780 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fedf1546f8c7110; op2val:0x3f9053028965855d;
op3val:0x3f8e8cad14da0780; valaddr_reg:x3; val_offset:4008*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 4008*FLEN/8, x4, x1, x2)

inst_1337:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xdf1546f8c7110 and fs2 == 0 and fe2 == 0x3f9 and fm2 == 0x053028965855d and fs3 == 0 and fe3 == 0x3f8 and fm3 == 0xe8cad14da0780 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fedf1546f8c7110; op2val:0x3f9053028965855d;
op3val:0x3f8e8cad14da0780; valaddr_reg:x3; val_offset:4011*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 4011*FLEN/8, x4, x1, x2)

inst_1338:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xdf1546f8c7110 and fs2 == 0 and fe2 == 0x3f9 and fm2 == 0x053028965855d and fs3 == 0 and fe3 == 0x3f8 and fm3 == 0xe8cad14da0780 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fedf1546f8c7110; op2val:0x3f9053028965855d;
op3val:0x3f8e8cad14da0780; valaddr_reg:x3; val_offset:4014*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 4014*FLEN/8, x4, x1, x2)

inst_1339:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xdf1546f8c7110 and fs2 == 0 and fe2 == 0x3f9 and fm2 == 0x053028965855d and fs3 == 0 and fe3 == 0x3f8 and fm3 == 0xe8cad14da0780 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fedf1546f8c7110; op2val:0x3f9053028965855d;
op3val:0x3f8e8cad14da0780; valaddr_reg:x3; val_offset:4017*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 4017*FLEN/8, x4, x1, x2)

inst_1340:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xe0210db3cd0db and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xfd3730571579a and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xdd849d00fb34c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fee0210db3cd0db; op2val:0x3fefd3730571579a;
op3val:0x3fedd849d00fb34c; valaddr_reg:x3; val_offset:4020*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 4020*FLEN/8, x4, x1, x2)

inst_1341:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xe0210db3cd0db and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xfd3730571579a and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xdd849d00fb34c and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fee0210db3cd0db; op2val:0x3fefd3730571579a;
op3val:0x3fedd849d00fb34c; valaddr_reg:x3; val_offset:4023*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 4023*FLEN/8, x4, x1, x2)

inst_1342:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xe0210db3cd0db and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xfd3730571579a and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xdd849d00fb34c and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fee0210db3cd0db; op2val:0x3fefd3730571579a;
op3val:0x3fedd849d00fb34c; valaddr_reg:x3; val_offset:4026*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 4026*FLEN/8, x4, x1, x2)

inst_1343:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xe0210db3cd0db and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xfd3730571579a and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xdd849d00fb34c and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fee0210db3cd0db; op2val:0x3fefd3730571579a;
op3val:0x3fedd849d00fb34c; valaddr_reg:x3; val_offset:4029*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 4029*FLEN/8, x4, x1, x2)

inst_1344:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xe0210db3cd0db and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xfd3730571579a and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xdd849d00fb34c and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fee0210db3cd0db; op2val:0x3fefd3730571579a;
op3val:0x3fedd849d00fb34c; valaddr_reg:x3; val_offset:4032*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 4032*FLEN/8, x4, x1, x2)

inst_1345:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xe0efefd134af8 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x456a374c46f55 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x31ac13585ec92 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fee0efefd134af8; op2val:0x3fd456a374c46f55;
op3val:0x3fd31ac13585ec92; valaddr_reg:x3; val_offset:4035*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 4035*FLEN/8, x4, x1, x2)

inst_1346:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xe0efefd134af8 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x456a374c46f55 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x31ac13585ec92 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fee0efefd134af8; op2val:0x3fd456a374c46f55;
op3val:0x3fd31ac13585ec92; valaddr_reg:x3; val_offset:4038*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 4038*FLEN/8, x4, x1, x2)

inst_1347:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xe0efefd134af8 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x456a374c46f55 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x31ac13585ec92 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fee0efefd134af8; op2val:0x3fd456a374c46f55;
op3val:0x3fd31ac13585ec92; valaddr_reg:x3; val_offset:4041*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 4041*FLEN/8, x4, x1, x2)

inst_1348:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xe0efefd134af8 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x456a374c46f55 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x31ac13585ec92 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fee0efefd134af8; op2val:0x3fd456a374c46f55;
op3val:0x3fd31ac13585ec92; valaddr_reg:x3; val_offset:4044*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 4044*FLEN/8, x4, x1, x2)

inst_1349:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xe0efefd134af8 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x456a374c46f55 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x31ac13585ec92 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fee0efefd134af8; op2val:0x3fd456a374c46f55;
op3val:0x3fd31ac13585ec92; valaddr_reg:x3; val_offset:4047*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 4047*FLEN/8, x4, x1, x2)

inst_1350:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xe0f10a20e8af5 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x8e90d4bf1dfcb and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x76636a81c269a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fee0f10a20e8af5; op2val:0x3fe8e90d4bf1dfcb;
op3val:0x3fe76636a81c269a; valaddr_reg:x3; val_offset:4050*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 4050*FLEN/8, x4, x1, x2)

inst_1351:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xe0f10a20e8af5 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x8e90d4bf1dfcb and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x76636a81c269a and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fee0f10a20e8af5; op2val:0x3fe8e90d4bf1dfcb;
op3val:0x3fe76636a81c269a; valaddr_reg:x3; val_offset:4053*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 4053*FLEN/8, x4, x1, x2)

inst_1352:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xe0f10a20e8af5 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x8e90d4bf1dfcb and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x76636a81c269a and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fee0f10a20e8af5; op2val:0x3fe8e90d4bf1dfcb;
op3val:0x3fe76636a81c269a; valaddr_reg:x3; val_offset:4056*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 4056*FLEN/8, x4, x1, x2)

inst_1353:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xe0f10a20e8af5 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x8e90d4bf1dfcb and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x76636a81c269a and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fee0f10a20e8af5; op2val:0x3fe8e90d4bf1dfcb;
op3val:0x3fe76636a81c269a; valaddr_reg:x3; val_offset:4059*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 4059*FLEN/8, x4, x1, x2)

inst_1354:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xe0f10a20e8af5 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x8e90d4bf1dfcb and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x76636a81c269a and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fee0f10a20e8af5; op2val:0x3fe8e90d4bf1dfcb;
op3val:0x3fe76636a81c269a; valaddr_reg:x3; val_offset:4062*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 4062*FLEN/8, x4, x1, x2)

inst_1355:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xe17bf4986225a and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xb050cef74e110 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x968c94603abec and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fee17bf4986225a; op2val:0x3feb050cef74e110;
op3val:0x3fe968c94603abec; valaddr_reg:x3; val_offset:4065*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 4065*FLEN/8, x4, x1, x2)

inst_1356:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xe17bf4986225a and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xb050cef74e110 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x968c94603abec and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fee17bf4986225a; op2val:0x3feb050cef74e110;
op3val:0x3fe968c94603abec; valaddr_reg:x3; val_offset:4068*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 4068*FLEN/8, x4, x1, x2)

inst_1357:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xe17bf4986225a and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xb050cef74e110 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x968c94603abec and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fee17bf4986225a; op2val:0x3feb050cef74e110;
op3val:0x3fe968c94603abec; valaddr_reg:x3; val_offset:4071*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 4071*FLEN/8, x4, x1, x2)

inst_1358:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xe17bf4986225a and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xb050cef74e110 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x968c94603abec and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fee17bf4986225a; op2val:0x3feb050cef74e110;
op3val:0x3fe968c94603abec; valaddr_reg:x3; val_offset:4074*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 4074*FLEN/8, x4, x1, x2)

inst_1359:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xe17bf4986225a and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xb050cef74e110 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x968c94603abec and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fee17bf4986225a; op2val:0x3feb050cef74e110;
op3val:0x3fe968c94603abec; valaddr_reg:x3; val_offset:4077*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 4077*FLEN/8, x4, x1, x2)

inst_1360:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xe1d0b9f208e25 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0xf8652970ed500 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0xdaa8a9b66adc8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fee1d0b9f208e25; op2val:0x3fcf8652970ed500;
op3val:0x3fcdaa8a9b66adc8; valaddr_reg:x3; val_offset:4080*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 4080*FLEN/8, x4, x1, x2)

inst_1361:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xe1d0b9f208e25 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0xf8652970ed500 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0xdaa8a9b66adc8 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fee1d0b9f208e25; op2val:0x3fcf8652970ed500;
op3val:0x3fcdaa8a9b66adc8; valaddr_reg:x3; val_offset:4083*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 4083*FLEN/8, x4, x1, x2)

inst_1362:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xe1d0b9f208e25 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0xf8652970ed500 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0xdaa8a9b66adc8 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fee1d0b9f208e25; op2val:0x3fcf8652970ed500;
op3val:0x3fcdaa8a9b66adc8; valaddr_reg:x3; val_offset:4086*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 4086*FLEN/8, x4, x1, x2)

inst_1363:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xe1d0b9f208e25 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0xf8652970ed500 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0xdaa8a9b66adc8 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fee1d0b9f208e25; op2val:0x3fcf8652970ed500;
op3val:0x3fcdaa8a9b66adc8; valaddr_reg:x3; val_offset:4089*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 4089*FLEN/8, x4, x1, x2)

inst_1364:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xe1d0b9f208e25 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0xf8652970ed500 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0xdaa8a9b66adc8 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fee1d0b9f208e25; op2val:0x3fcf8652970ed500;
op3val:0x3fcdaa8a9b66adc8; valaddr_reg:x3; val_offset:4092*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 4092*FLEN/8, x4, x1, x2)

inst_1365:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xe24df705c768a and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x0bb86c2177a06 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xf862c46484c52 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fee24df705c768a; op2val:0x3fe0bb86c2177a06;
op3val:0x3fdf862c46484c52; valaddr_reg:x3; val_offset:4095*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 4095*FLEN/8, x4, x1, x2)

inst_1366:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xe24df705c768a and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x0bb86c2177a06 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xf862c46484c52 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fee24df705c768a; op2val:0x3fe0bb86c2177a06;
op3val:0x3fdf862c46484c52; valaddr_reg:x3; val_offset:4098*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 4098*FLEN/8, x4, x1, x2)

inst_1367:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xe24df705c768a and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x0bb86c2177a06 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xf862c46484c52 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fee24df705c768a; op2val:0x3fe0bb86c2177a06;
op3val:0x3fdf862c46484c52; valaddr_reg:x3; val_offset:4101*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 4101*FLEN/8, x4, x1, x2)

inst_1368:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xe24df705c768a and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x0bb86c2177a06 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xf862c46484c52 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fee24df705c768a; op2val:0x3fe0bb86c2177a06;
op3val:0x3fdf862c46484c52; valaddr_reg:x3; val_offset:4104*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 4104*FLEN/8, x4, x1, x2)

inst_1369:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xe24df705c768a and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x0bb86c2177a06 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xf862c46484c52 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fee24df705c768a; op2val:0x3fe0bb86c2177a06;
op3val:0x3fdf862c46484c52; valaddr_reg:x3; val_offset:4107*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 4107*FLEN/8, x4, x1, x2)

inst_1370:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xe4272f8a6ec88 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xd728940035e82 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xbd886b3f1671b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fee4272f8a6ec88; op2val:0x3fed728940035e82;
op3val:0x3febd886b3f1671b; valaddr_reg:x3; val_offset:4110*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 4110*FLEN/8, x4, x1, x2)

inst_1371:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xe4272f8a6ec88 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xd728940035e82 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xbd886b3f1671b and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fee4272f8a6ec88; op2val:0x3fed728940035e82;
op3val:0x3febd886b3f1671b; valaddr_reg:x3; val_offset:4113*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 4113*FLEN/8, x4, x1, x2)

inst_1372:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xe4272f8a6ec88 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xd728940035e82 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xbd886b3f1671b and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fee4272f8a6ec88; op2val:0x3fed728940035e82;
op3val:0x3febd886b3f1671b; valaddr_reg:x3; val_offset:4116*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 4116*FLEN/8, x4, x1, x2)

inst_1373:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xe4272f8a6ec88 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xd728940035e82 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xbd886b3f1671b and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fee4272f8a6ec88; op2val:0x3fed728940035e82;
op3val:0x3febd886b3f1671b; valaddr_reg:x3; val_offset:4119*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 4119*FLEN/8, x4, x1, x2)

inst_1374:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xe4272f8a6ec88 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xd728940035e82 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xbd886b3f1671b and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fee4272f8a6ec88; op2val:0x3fed728940035e82;
op3val:0x3febd886b3f1671b; valaddr_reg:x3; val_offset:4122*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 4122*FLEN/8, x4, x1, x2)

inst_1375:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xe634a134681ac and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xae607e1da3637 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x98b1d50456113 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fee634a134681ac; op2val:0x3feae607e1da3637;
op3val:0x3fe98b1d50456113; valaddr_reg:x3; val_offset:4125*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 4125*FLEN/8, x4, x1, x2)

inst_1376:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xe634a134681ac and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xae607e1da3637 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x98b1d50456113 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fee634a134681ac; op2val:0x3feae607e1da3637;
op3val:0x3fe98b1d50456113; valaddr_reg:x3; val_offset:4128*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 4128*FLEN/8, x4, x1, x2)

inst_1377:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xe634a134681ac and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xae607e1da3637 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x98b1d50456113 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fee634a134681ac; op2val:0x3feae607e1da3637;
op3val:0x3fe98b1d50456113; valaddr_reg:x3; val_offset:4131*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 4131*FLEN/8, x4, x1, x2)

inst_1378:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xe634a134681ac and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xae607e1da3637 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x98b1d50456113 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fee634a134681ac; op2val:0x3feae607e1da3637;
op3val:0x3fe98b1d50456113; valaddr_reg:x3; val_offset:4134*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 4134*FLEN/8, x4, x1, x2)

inst_1379:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xe634a134681ac and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xae607e1da3637 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x98b1d50456113 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fee634a134681ac; op2val:0x3feae607e1da3637;
op3val:0x3fe98b1d50456113; valaddr_reg:x3; val_offset:4137*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 4137*FLEN/8, x4, x1, x2)

inst_1380:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xe9949c4b358a7 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x60c639e5d4104 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x5153b748f50a4 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fee9949c4b358a7; op2val:0x3fc60c639e5d4104;
op3val:0x3fc5153b748f50a4; valaddr_reg:x3; val_offset:4140*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 4140*FLEN/8, x4, x1, x2)

inst_1381:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xe9949c4b358a7 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x60c639e5d4104 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x5153b748f50a4 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fee9949c4b358a7; op2val:0x3fc60c639e5d4104;
op3val:0x3fc5153b748f50a4; valaddr_reg:x3; val_offset:4143*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 4143*FLEN/8, x4, x1, x2)

inst_1382:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xe9949c4b358a7 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x60c639e5d4104 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x5153b748f50a4 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fee9949c4b358a7; op2val:0x3fc60c639e5d4104;
op3val:0x3fc5153b748f50a4; valaddr_reg:x3; val_offset:4146*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 4146*FLEN/8, x4, x1, x2)

inst_1383:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xe9949c4b358a7 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x60c639e5d4104 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x5153b748f50a4 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fee9949c4b358a7; op2val:0x3fc60c639e5d4104;
op3val:0x3fc5153b748f50a4; valaddr_reg:x3; val_offset:4149*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 4149*FLEN/8, x4, x1, x2)

inst_1384:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xe9949c4b358a7 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x60c639e5d4104 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x5153b748f50a4 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fee9949c4b358a7; op2val:0x3fc60c639e5d4104;
op3val:0x3fc5153b748f50a4; valaddr_reg:x3; val_offset:4152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 4152*FLEN/8, x4, x1, x2)

inst_1385:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xeaaaa0e6c90dd and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x051f23fbda48b and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xf47ba5acd2996 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feeaaaa0e6c90dd; op2val:0x3ff051f23fbda48b;
op3val:0x3fef47ba5acd2996; valaddr_reg:x3; val_offset:4155*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 4155*FLEN/8, x4, x1, x2)

inst_1386:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xeaaaa0e6c90dd and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x051f23fbda48b and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xf47ba5acd2996 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feeaaaa0e6c90dd; op2val:0x3ff051f23fbda48b;
op3val:0x3fef47ba5acd2996; valaddr_reg:x3; val_offset:4158*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 4158*FLEN/8, x4, x1, x2)

inst_1387:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xeaaaa0e6c90dd and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x051f23fbda48b and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xf47ba5acd2996 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feeaaaa0e6c90dd; op2val:0x3ff051f23fbda48b;
op3val:0x3fef47ba5acd2996; valaddr_reg:x3; val_offset:4161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 4161*FLEN/8, x4, x1, x2)

inst_1388:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xeaaaa0e6c90dd and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x051f23fbda48b and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xf47ba5acd2996 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feeaaaa0e6c90dd; op2val:0x3ff051f23fbda48b;
op3val:0x3fef47ba5acd2996; valaddr_reg:x3; val_offset:4164*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 4164*FLEN/8, x4, x1, x2)

inst_1389:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xeaaaa0e6c90dd and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x051f23fbda48b and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xf47ba5acd2996 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feeaaaa0e6c90dd; op2val:0x3ff051f23fbda48b;
op3val:0x3fef47ba5acd2996; valaddr_reg:x3; val_offset:4167*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 4167*FLEN/8, x4, x1, x2)

inst_1390:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xebbb18c605c19 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0xd7451e0094492 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0xc49cfed185d94 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feebbb18c605c19; op2val:0x3fcd7451e0094492;
op3val:0x3fcc49cfed185d94; valaddr_reg:x3; val_offset:4170*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 4170*FLEN/8, x4, x1, x2)

inst_1391:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xebbb18c605c19 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0xd7451e0094492 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0xc49cfed185d94 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feebbb18c605c19; op2val:0x3fcd7451e0094492;
op3val:0x3fcc49cfed185d94; valaddr_reg:x3; val_offset:4173*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 4173*FLEN/8, x4, x1, x2)

inst_1392:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xebbb18c605c19 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0xd7451e0094492 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0xc49cfed185d94 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feebbb18c605c19; op2val:0x3fcd7451e0094492;
op3val:0x3fcc49cfed185d94; valaddr_reg:x3; val_offset:4176*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 4176*FLEN/8, x4, x1, x2)

inst_1393:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xebbb18c605c19 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0xd7451e0094492 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0xc49cfed185d94 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feebbb18c605c19; op2val:0x3fcd7451e0094492;
op3val:0x3fcc49cfed185d94; valaddr_reg:x3; val_offset:4179*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 4179*FLEN/8, x4, x1, x2)

inst_1394:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xebbb18c605c19 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0xd7451e0094492 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0xc49cfed185d94 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feebbb18c605c19; op2val:0x3fcd7451e0094492;
op3val:0x3fcc49cfed185d94; valaddr_reg:x3; val_offset:4182*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 4182*FLEN/8, x4, x1, x2)

inst_1395:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xebed06c26e479 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x619c6ff8d2bf3 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x53bf38f610884 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feebed06c26e479; op2val:0x3fd619c6ff8d2bf3;
op3val:0x3fd53bf38f610884; valaddr_reg:x3; val_offset:4185*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 4185*FLEN/8, x4, x1, x2)

inst_1396:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xebed06c26e479 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x619c6ff8d2bf3 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x53bf38f610884 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feebed06c26e479; op2val:0x3fd619c6ff8d2bf3;
op3val:0x3fd53bf38f610884; valaddr_reg:x3; val_offset:4188*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 4188*FLEN/8, x4, x1, x2)

inst_1397:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xebed06c26e479 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x619c6ff8d2bf3 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x53bf38f610884 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feebed06c26e479; op2val:0x3fd619c6ff8d2bf3;
op3val:0x3fd53bf38f610884; valaddr_reg:x3; val_offset:4191*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 4191*FLEN/8, x4, x1, x2)

inst_1398:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xebed06c26e479 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x619c6ff8d2bf3 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x53bf38f610884 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feebed06c26e479; op2val:0x3fd619c6ff8d2bf3;
op3val:0x3fd53bf38f610884; valaddr_reg:x3; val_offset:4194*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 4194*FLEN/8, x4, x1, x2)

inst_1399:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xebed06c26e479 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x619c6ff8d2bf3 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x53bf38f610884 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feebed06c26e479; op2val:0x3fd619c6ff8d2bf3;
op3val:0x3fd53bf38f610884; valaddr_reg:x3; val_offset:4197*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 4197*FLEN/8, x4, x1, x2)

inst_1400:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xeccd5e7a7fd73 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x2d450c216da9d and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x21f931653caae and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feeccd5e7a7fd73; op2val:0x3fe2d450c216da9d;
op3val:0x3fe21f931653caae; valaddr_reg:x3; val_offset:4200*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 4200*FLEN/8, x4, x1, x2)

inst_1401:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xeccd5e7a7fd73 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x2d450c216da9d and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x21f931653caae and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feeccd5e7a7fd73; op2val:0x3fe2d450c216da9d;
op3val:0x3fe21f931653caae; valaddr_reg:x3; val_offset:4203*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 4203*FLEN/8, x4, x1, x2)

inst_1402:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xeccd5e7a7fd73 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x2d450c216da9d and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x21f931653caae and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feeccd5e7a7fd73; op2val:0x3fe2d450c216da9d;
op3val:0x3fe21f931653caae; valaddr_reg:x3; val_offset:4206*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 4206*FLEN/8, x4, x1, x2)

inst_1403:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xeccd5e7a7fd73 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x2d450c216da9d and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x21f931653caae and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feeccd5e7a7fd73; op2val:0x3fe2d450c216da9d;
op3val:0x3fe21f931653caae; valaddr_reg:x3; val_offset:4209*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 4209*FLEN/8, x4, x1, x2)

inst_1404:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xeccd5e7a7fd73 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x2d450c216da9d and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x21f931653caae and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feeccd5e7a7fd73; op2val:0x3fe2d450c216da9d;
op3val:0x3fe21f931653caae; valaddr_reg:x3; val_offset:4212*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 4212*FLEN/8, x4, x1, x2)

inst_1405:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xf1b23b4d6ec52 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x7b8a7d3156d7e and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x70f00da1c6d1a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fef1b23b4d6ec52; op2val:0x3fe7b8a7d3156d7e;
op3val:0x3fe70f00da1c6d1a; valaddr_reg:x3; val_offset:4215*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 4215*FLEN/8, x4, x1, x2)

inst_1406:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xf1b23b4d6ec52 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x7b8a7d3156d7e and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x70f00da1c6d1a and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fef1b23b4d6ec52; op2val:0x3fe7b8a7d3156d7e;
op3val:0x3fe70f00da1c6d1a; valaddr_reg:x3; val_offset:4218*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 4218*FLEN/8, x4, x1, x2)

inst_1407:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xf1b23b4d6ec52 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x7b8a7d3156d7e and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x70f00da1c6d1a and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fef1b23b4d6ec52; op2val:0x3fe7b8a7d3156d7e;
op3val:0x3fe70f00da1c6d1a; valaddr_reg:x3; val_offset:4221*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 4221*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_12)

inst_1408:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xf1b23b4d6ec52 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x7b8a7d3156d7e and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x70f00da1c6d1a and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fef1b23b4d6ec52; op2val:0x3fe7b8a7d3156d7e;
op3val:0x3fe70f00da1c6d1a; valaddr_reg:x3; val_offset:4224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 4224*FLEN/8, x4, x1, x2)

inst_1409:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xf1b23b4d6ec52 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x7b8a7d3156d7e and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x70f00da1c6d1a and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fef1b23b4d6ec52; op2val:0x3fe7b8a7d3156d7e;
op3val:0x3fe70f00da1c6d1a; valaddr_reg:x3; val_offset:4227*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 4227*FLEN/8, x4, x1, x2)

inst_1410:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xf2f18c3b7ff32 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x081a252a980bf and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x015e06cac39d0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fef2f18c3b7ff32; op2val:0x3fc081a252a980bf;
op3val:0x3fc015e06cac39d0; valaddr_reg:x3; val_offset:4230*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 4230*FLEN/8, x4, x1, x2)

inst_1411:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xf2f18c3b7ff32 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x081a252a980bf and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x015e06cac39d0 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fef2f18c3b7ff32; op2val:0x3fc081a252a980bf;
op3val:0x3fc015e06cac39d0; valaddr_reg:x3; val_offset:4233*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 4233*FLEN/8, x4, x1, x2)

inst_1412:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xf2f18c3b7ff32 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x081a252a980bf and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x015e06cac39d0 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fef2f18c3b7ff32; op2val:0x3fc081a252a980bf;
op3val:0x3fc015e06cac39d0; valaddr_reg:x3; val_offset:4236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 4236*FLEN/8, x4, x1, x2)

inst_1413:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xf2f18c3b7ff32 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x081a252a980bf and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x015e06cac39d0 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fef2f18c3b7ff32; op2val:0x3fc081a252a980bf;
op3val:0x3fc015e06cac39d0; valaddr_reg:x3; val_offset:4239*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 4239*FLEN/8, x4, x1, x2)

inst_1414:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xf2f18c3b7ff32 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x081a252a980bf and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x015e06cac39d0 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fef2f18c3b7ff32; op2val:0x3fc081a252a980bf;
op3val:0x3fc015e06cac39d0; valaddr_reg:x3; val_offset:4242*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 4242*FLEN/8, x4, x1, x2)

inst_1415:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xf42ccc32ddc1f and fs2 == 0 and fe2 == 0x3fa and fm2 == 0x9b04dafb6fafb and fs3 == 0 and fe3 == 0x3fa and fm3 == 0x9186b431216c0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fef42ccc32ddc1f; op2val:0x3fa9b04dafb6fafb;
op3val:0x3fa9186b431216c0; valaddr_reg:x3; val_offset:4245*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 4245*FLEN/8, x4, x1, x2)

inst_1416:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xf42ccc32ddc1f and fs2 == 0 and fe2 == 0x3fa and fm2 == 0x9b04dafb6fafb and fs3 == 0 and fe3 == 0x3fa and fm3 == 0x9186b431216c0 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fef42ccc32ddc1f; op2val:0x3fa9b04dafb6fafb;
op3val:0x3fa9186b431216c0; valaddr_reg:x3; val_offset:4248*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 4248*FLEN/8, x4, x1, x2)

inst_1417:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xf42ccc32ddc1f and fs2 == 0 and fe2 == 0x3fa and fm2 == 0x9b04dafb6fafb and fs3 == 0 and fe3 == 0x3fa and fm3 == 0x9186b431216c0 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fef42ccc32ddc1f; op2val:0x3fa9b04dafb6fafb;
op3val:0x3fa9186b431216c0; valaddr_reg:x3; val_offset:4251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 4251*FLEN/8, x4, x1, x2)

inst_1418:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xf42ccc32ddc1f and fs2 == 0 and fe2 == 0x3fa and fm2 == 0x9b04dafb6fafb and fs3 == 0 and fe3 == 0x3fa and fm3 == 0x9186b431216c0 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fef42ccc32ddc1f; op2val:0x3fa9b04dafb6fafb;
op3val:0x3fa9186b431216c0; valaddr_reg:x3; val_offset:4254*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 4254*FLEN/8, x4, x1, x2)

inst_1419:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xf42ccc32ddc1f and fs2 == 0 and fe2 == 0x3fa and fm2 == 0x9b04dafb6fafb and fs3 == 0 and fe3 == 0x3fa and fm3 == 0x9186b431216c0 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fef42ccc32ddc1f; op2val:0x3fa9b04dafb6fafb;
op3val:0x3fa9186b431216c0; valaddr_reg:x3; val_offset:4257*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 4257*FLEN/8, x4, x1, x2)

inst_1420:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xf472a1c3cc6a0 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x19f963a116db3 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x139cace940138 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fef472a1c3cc6a0; op2val:0x3fe19f963a116db3;
op3val:0x3fe139cace940138; valaddr_reg:x3; val_offset:4260*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 4260*FLEN/8, x4, x1, x2)

inst_1421:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xf472a1c3cc6a0 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x19f963a116db3 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x139cace940138 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fef472a1c3cc6a0; op2val:0x3fe19f963a116db3;
op3val:0x3fe139cace940138; valaddr_reg:x3; val_offset:4263*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 4263*FLEN/8, x4, x1, x2)

inst_1422:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xf472a1c3cc6a0 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x19f963a116db3 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x139cace940138 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fef472a1c3cc6a0; op2val:0x3fe19f963a116db3;
op3val:0x3fe139cace940138; valaddr_reg:x3; val_offset:4266*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 4266*FLEN/8, x4, x1, x2)

inst_1423:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xf472a1c3cc6a0 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x19f963a116db3 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x139cace940138 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fef472a1c3cc6a0; op2val:0x3fe19f963a116db3;
op3val:0x3fe139cace940138; valaddr_reg:x3; val_offset:4269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 4269*FLEN/8, x4, x1, x2)

inst_1424:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xf472a1c3cc6a0 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x19f963a116db3 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x139cace940138 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fef472a1c3cc6a0; op2val:0x3fe19f963a116db3;
op3val:0x3fe139cace940138; valaddr_reg:x3; val_offset:4272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 4272*FLEN/8, x4, x1, x2)

inst_1425:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xf6bdf56766e62 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x5c93766cd5784 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x5645e89ee25d2 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fef6bdf56766e62; op2val:0x3fe5c93766cd5784;
op3val:0x3fe5645e89ee25d2; valaddr_reg:x3; val_offset:4275*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 4275*FLEN/8, x4, x1, x2)

inst_1426:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xf6bdf56766e62 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x5c93766cd5784 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x5645e89ee25d2 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fef6bdf56766e62; op2val:0x3fe5c93766cd5784;
op3val:0x3fe5645e89ee25d2; valaddr_reg:x3; val_offset:4278*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 4278*FLEN/8, x4, x1, x2)

inst_1427:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xf6bdf56766e62 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x5c93766cd5784 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x5645e89ee25d2 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fef6bdf56766e62; op2val:0x3fe5c93766cd5784;
op3val:0x3fe5645e89ee25d2; valaddr_reg:x3; val_offset:4281*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 4281*FLEN/8, x4, x1, x2)

inst_1428:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xf6bdf56766e62 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x5c93766cd5784 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x5645e89ee25d2 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fef6bdf56766e62; op2val:0x3fe5c93766cd5784;
op3val:0x3fe5645e89ee25d2; valaddr_reg:x3; val_offset:4284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 4284*FLEN/8, x4, x1, x2)

inst_1429:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xf6bdf56766e62 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x5c93766cd5784 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x5645e89ee25d2 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fef6bdf56766e62; op2val:0x3fe5c93766cd5784;
op3val:0x3fe5645e89ee25d2; valaddr_reg:x3; val_offset:4287*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 4287*FLEN/8, x4, x1, x2)

inst_1430:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xf709a7ed77604 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x19f132e9e2970 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x1501c6bb1b35c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fef709a7ed77604; op2val:0x3fe19f132e9e2970;
op3val:0x3fe1501c6bb1b35c; valaddr_reg:x3; val_offset:4290*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 4290*FLEN/8, x4, x1, x2)

inst_1431:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xf709a7ed77604 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x19f132e9e2970 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x1501c6bb1b35c and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fef709a7ed77604; op2val:0x3fe19f132e9e2970;
op3val:0x3fe1501c6bb1b35c; valaddr_reg:x3; val_offset:4293*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 4293*FLEN/8, x4, x1, x2)

inst_1432:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xf709a7ed77604 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x19f132e9e2970 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x1501c6bb1b35c and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fef709a7ed77604; op2val:0x3fe19f132e9e2970;
op3val:0x3fe1501c6bb1b35c; valaddr_reg:x3; val_offset:4296*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 4296*FLEN/8, x4, x1, x2)

inst_1433:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xf709a7ed77604 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x19f132e9e2970 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x1501c6bb1b35c and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fef709a7ed77604; op2val:0x3fe19f132e9e2970;
op3val:0x3fe1501c6bb1b35c; valaddr_reg:x3; val_offset:4299*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 4299*FLEN/8, x4, x1, x2)

inst_1434:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xf709a7ed77604 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x19f132e9e2970 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x1501c6bb1b35c and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fef709a7ed77604; op2val:0x3fe19f132e9e2970;
op3val:0x3fe1501c6bb1b35c; valaddr_reg:x3; val_offset:4302*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 4302*FLEN/8, x4, x1, x2)

inst_1435:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xfd771fba2f7c6 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x7a9eb88650dab and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x78bee1cbb58bf and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fefd771fba2f7c6; op2val:0x3fe7a9eb88650dab;
op3val:0x3fe78bee1cbb58bf; valaddr_reg:x3; val_offset:4305*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 4305*FLEN/8, x4, x1, x2)

inst_1436:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xfd771fba2f7c6 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x7a9eb88650dab and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x78bee1cbb58bf and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fefd771fba2f7c6; op2val:0x3fe7a9eb88650dab;
op3val:0x3fe78bee1cbb58bf; valaddr_reg:x3; val_offset:4308*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 4308*FLEN/8, x4, x1, x2)

inst_1437:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xfd771fba2f7c6 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x7a9eb88650dab and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x78bee1cbb58bf and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fefd771fba2f7c6; op2val:0x3fe7a9eb88650dab;
op3val:0x3fe78bee1cbb58bf; valaddr_reg:x3; val_offset:4311*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 4311*FLEN/8, x4, x1, x2)

inst_1438:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xfd771fba2f7c6 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x7a9eb88650dab and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x78bee1cbb58bf and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fefd771fba2f7c6; op2val:0x3fe7a9eb88650dab;
op3val:0x3fe78bee1cbb58bf; valaddr_reg:x3; val_offset:4314*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 4314*FLEN/8, x4, x1, x2)

inst_1439:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xfd771fba2f7c6 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x7a9eb88650dab and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x78bee1cbb58bf and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fefd771fba2f7c6; op2val:0x3fe7a9eb88650dab;
op3val:0x3fe78bee1cbb58bf; valaddr_reg:x3; val_offset:4317*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 4317*FLEN/8, x4, x1, x2)

inst_1440:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xfde77176ad3cf and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x2ab8e4d6c04e9 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x297fd81dc9430 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fefde77176ad3cf; op2val:0x3fe2ab8e4d6c04e9;
op3val:0x3fe297fd81dc9430; valaddr_reg:x3; val_offset:4320*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 4320*FLEN/8, x4, x1, x2)

inst_1441:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xfde77176ad3cf and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x2ab8e4d6c04e9 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x297fd81dc9430 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fefde77176ad3cf; op2val:0x3fe2ab8e4d6c04e9;
op3val:0x3fe297fd81dc9430; valaddr_reg:x3; val_offset:4323*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 4323*FLEN/8, x4, x1, x2)

inst_1442:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xfde77176ad3cf and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x2ab8e4d6c04e9 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x297fd81dc9430 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fefde77176ad3cf; op2val:0x3fe2ab8e4d6c04e9;
op3val:0x3fe297fd81dc9430; valaddr_reg:x3; val_offset:4326*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 4326*FLEN/8, x4, x1, x2)

inst_1443:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xfde77176ad3cf and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x2ab8e4d6c04e9 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x297fd81dc9430 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fefde77176ad3cf; op2val:0x3fe2ab8e4d6c04e9;
op3val:0x3fe297fd81dc9430; valaddr_reg:x3; val_offset:4329*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 4329*FLEN/8, x4, x1, x2)

inst_1444:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xfde77176ad3cf and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x2ab8e4d6c04e9 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x297fd81dc9430 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fefde77176ad3cf; op2val:0x3fe2ab8e4d6c04e9;
op3val:0x3fe297fd81dc9430; valaddr_reg:x3; val_offset:4332*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 4332*FLEN/8, x4, x1, x2)

inst_1445:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xfdfc8fce5560b and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x9cec37efa48a3 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x9b4c85d9a68b8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fefdfc8fce5560b; op2val:0x3fc9cec37efa48a3;
op3val:0x3fc9b4c85d9a68b8; valaddr_reg:x3; val_offset:4335*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 4335*FLEN/8, x4, x1, x2)

inst_1446:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xfdfc8fce5560b and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x9cec37efa48a3 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x9b4c85d9a68b8 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fefdfc8fce5560b; op2val:0x3fc9cec37efa48a3;
op3val:0x3fc9b4c85d9a68b8; valaddr_reg:x3; val_offset:4338*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 4338*FLEN/8, x4, x1, x2)

inst_1447:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xfdfc8fce5560b and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x9cec37efa48a3 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x9b4c85d9a68b8 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fefdfc8fce5560b; op2val:0x3fc9cec37efa48a3;
op3val:0x3fc9b4c85d9a68b8; valaddr_reg:x3; val_offset:4341*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 4341*FLEN/8, x4, x1, x2)

inst_1448:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xfdfc8fce5560b and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x9cec37efa48a3 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x9b4c85d9a68b8 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fefdfc8fce5560b; op2val:0x3fc9cec37efa48a3;
op3val:0x3fc9b4c85d9a68b8; valaddr_reg:x3; val_offset:4344*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 4344*FLEN/8, x4, x1, x2)

inst_1449:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xfdfc8fce5560b and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x9cec37efa48a3 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x9b4c85d9a68b8 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fefdfc8fce5560b; op2val:0x3fc9cec37efa48a3;
op3val:0x3fc9b4c85d9a68b8; valaddr_reg:x3; val_offset:4347*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 4347*FLEN/8, x4, x1, x2)

inst_1450:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xfe2963c333dcd and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x05307b89919a9 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x0440685460dc4 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fefe2963c333dcd; op2val:0x3fe05307b89919a9;
op3val:0x3fe0440685460dc4; valaddr_reg:x3; val_offset:4350*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 4350*FLEN/8, x4, x1, x2)

inst_1451:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xfe2963c333dcd and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x05307b89919a9 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x0440685460dc4 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fefe2963c333dcd; op2val:0x3fe05307b89919a9;
op3val:0x3fe0440685460dc4; valaddr_reg:x3; val_offset:4353*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 4353*FLEN/8, x4, x1, x2)

inst_1452:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xfe2963c333dcd and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x05307b89919a9 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x0440685460dc4 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fefe2963c333dcd; op2val:0x3fe05307b89919a9;
op3val:0x3fe0440685460dc4; valaddr_reg:x3; val_offset:4356*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 4356*FLEN/8, x4, x1, x2)

inst_1453:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xfe2963c333dcd and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x05307b89919a9 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x0440685460dc4 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fefe2963c333dcd; op2val:0x3fe05307b89919a9;
op3val:0x3fe0440685460dc4; valaddr_reg:x3; val_offset:4359*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 4359*FLEN/8, x4, x1, x2)

inst_1454:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xfe2963c333dcd and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x05307b89919a9 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x0440685460dc4 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fefe2963c333dcd; op2val:0x3fe05307b89919a9;
op3val:0x3fe0440685460dc4; valaddr_reg:x3; val_offset:4362*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 4362*FLEN/8, x4, x1, x2)

inst_1455:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xff1bc0eb3a9cd and fs2 == 0 and fe2 == 0x3fc and fm2 == 0xff631fcf02965 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0xfe7f26a966f74 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feff1bc0eb3a9cd; op2val:0x3fcff631fcf02965;
op3val:0x3fcfe7f26a966f74; valaddr_reg:x3; val_offset:4365*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 4365*FLEN/8, x4, x1, x2)

inst_1456:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xff1bc0eb3a9cd and fs2 == 0 and fe2 == 0x3fc and fm2 == 0xff631fcf02965 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0xfe7f26a966f74 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feff1bc0eb3a9cd; op2val:0x3fcff631fcf02965;
op3val:0x3fcfe7f26a966f74; valaddr_reg:x3; val_offset:4368*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 4368*FLEN/8, x4, x1, x2)

inst_1457:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xff1bc0eb3a9cd and fs2 == 0 and fe2 == 0x3fc and fm2 == 0xff631fcf02965 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0xfe7f26a966f74 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feff1bc0eb3a9cd; op2val:0x3fcff631fcf02965;
op3val:0x3fcfe7f26a966f74; valaddr_reg:x3; val_offset:4371*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 4371*FLEN/8, x4, x1, x2)

inst_1458:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xff1bc0eb3a9cd and fs2 == 0 and fe2 == 0x3fc and fm2 == 0xff631fcf02965 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0xfe7f26a966f74 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feff1bc0eb3a9cd; op2val:0x3fcff631fcf02965;
op3val:0x3fcfe7f26a966f74; valaddr_reg:x3; val_offset:4374*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 4374*FLEN/8, x4, x1, x2)

inst_1459:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xff1bc0eb3a9cd and fs2 == 0 and fe2 == 0x3fc and fm2 == 0xff631fcf02965 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0xfe7f26a966f74 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feff1bc0eb3a9cd; op2val:0x3fcff631fcf02965;
op3val:0x3fcfe7f26a966f74; valaddr_reg:x3; val_offset:4377*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 4377*FLEN/8, x4, x1, x2)

inst_1460:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xff73e52a89e86 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x3cf22acec6197 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x3c9b6ffaa1898 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feff73e52a89e86; op2val:0x3fe3cf22acec6197;
op3val:0x3fe3c9b6ffaa1898; valaddr_reg:x3; val_offset:4380*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 4380*FLEN/8, x4, x1, x2)

inst_1461:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xff73e52a89e86 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x3cf22acec6197 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x3c9b6ffaa1898 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feff73e52a89e86; op2val:0x3fe3cf22acec6197;
op3val:0x3fe3c9b6ffaa1898; valaddr_reg:x3; val_offset:4383*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 4383*FLEN/8, x4, x1, x2)

inst_1462:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xff73e52a89e86 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x3cf22acec6197 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x3c9b6ffaa1898 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feff73e52a89e86; op2val:0x3fe3cf22acec6197;
op3val:0x3fe3c9b6ffaa1898; valaddr_reg:x3; val_offset:4386*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 4386*FLEN/8, x4, x1, x2)

inst_1463:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xff73e52a89e86 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x3cf22acec6197 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x3c9b6ffaa1898 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feff73e52a89e86; op2val:0x3fe3cf22acec6197;
op3val:0x3fe3c9b6ffaa1898; valaddr_reg:x3; val_offset:4389*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 4389*FLEN/8, x4, x1, x2)

inst_1464:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xff73e52a89e86 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x3cf22acec6197 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x3c9b6ffaa1898 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feff73e52a89e86; op2val:0x3fe3cf22acec6197;
op3val:0x3fe3c9b6ffaa1898; valaddr_reg:x3; val_offset:4392*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 4392*FLEN/8, x4, x1, x2)

inst_1465:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xffe16c5bb9d14 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xb2a75c42921df and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xb28d671da80a2 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feffe16c5bb9d14; op2val:0x3feb2a75c42921df;
op3val:0x3feb28d671da80a2; valaddr_reg:x3; val_offset:4395*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 4395*FLEN/8, x4, x1, x2)

inst_1466:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xffe16c5bb9d14 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xb2a75c42921df and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xb28d671da80a2 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feffe16c5bb9d14; op2val:0x3feb2a75c42921df;
op3val:0x3feb28d671da80a2; valaddr_reg:x3; val_offset:4398*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 4398*FLEN/8, x4, x1, x2)

inst_1467:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xffe16c5bb9d14 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xb2a75c42921df and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xb28d671da80a2 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feffe16c5bb9d14; op2val:0x3feb2a75c42921df;
op3val:0x3feb28d671da80a2; valaddr_reg:x3; val_offset:4401*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 4401*FLEN/8, x4, x1, x2)

inst_1468:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xffe16c5bb9d14 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xb2a75c42921df and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xb28d671da80a2 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feffe16c5bb9d14; op2val:0x3feb2a75c42921df;
op3val:0x3feb28d671da80a2; valaddr_reg:x3; val_offset:4404*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 4404*FLEN/8, x4, x1, x2)

inst_1469:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xffe16c5bb9d14 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xb2a75c42921df and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xb28d671da80a2 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feffe16c5bb9d14; op2val:0x3feb2a75c42921df;
op3val:0x3feb28d671da80a2; valaddr_reg:x3; val_offset:4407*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 4407*FLEN/8, x4, x1, x2)

inst_1470:
// fs1 == 0 and fe1 == 0x3f5 and fm1 == 0x3c8990a4c2a00 and fs2 == 0 and fe2 == 0x407 and fm2 == 0x543a5e5f86adc and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xa4aedff63880a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3f53c8990a4c2a00; op2val:0x407543a5e5f86adc;
op3val:0x3fda4aedff63880a; valaddr_reg:x3; val_offset:4410*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 4410*FLEN/8, x4, x1, x2)

inst_1471:
// fs1 == 0 and fe1 == 0x3f5 and fm1 == 0x3c8990a4c2a00 and fs2 == 0 and fe2 == 0x407 and fm2 == 0x543a5e5f86adc and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xa4aedff63880a and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3f53c8990a4c2a00; op2val:0x407543a5e5f86adc;
op3val:0x3fda4aedff63880a; valaddr_reg:x3; val_offset:4413*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 4413*FLEN/8, x4, x1, x2)

inst_1472:
// fs1 == 0 and fe1 == 0x3f5 and fm1 == 0x3c8990a4c2a00 and fs2 == 0 and fe2 == 0x407 and fm2 == 0x543a5e5f86adc and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xa4aedff63880a and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3f53c8990a4c2a00; op2val:0x407543a5e5f86adc;
op3val:0x3fda4aedff63880a; valaddr_reg:x3; val_offset:4416*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 4416*FLEN/8, x4, x1, x2)

inst_1473:
// fs1 == 0 and fe1 == 0x3f5 and fm1 == 0x3c8990a4c2a00 and fs2 == 0 and fe2 == 0x407 and fm2 == 0x543a5e5f86adc and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xa4aedff63880a and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3f53c8990a4c2a00; op2val:0x407543a5e5f86adc;
op3val:0x3fda4aedff63880a; valaddr_reg:x3; val_offset:4419*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 4419*FLEN/8, x4, x1, x2)

inst_1474:
// fs1 == 0 and fe1 == 0x3f8 and fm1 == 0x4be465508e640 and fs2 == 0 and fe2 == 0x403 and fm2 == 0x08afa5318307d and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x57273fc6baccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3f84be465508e640; op2val:0x40308afa5318307d;
op3val:0x3fc57273fc6baccc; valaddr_reg:x3; val_offset:4422*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 4422*FLEN/8, x4, x1, x2)

inst_1475:
// fs1 == 0 and fe1 == 0x3f8 and fm1 == 0x4be465508e640 and fs2 == 0 and fe2 == 0x403 and fm2 == 0x08afa5318307d and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x57273fc6baccc and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3f84be465508e640; op2val:0x40308afa5318307d;
op3val:0x3fc57273fc6baccc; valaddr_reg:x3; val_offset:4425*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 4425*FLEN/8, x4, x1, x2)

inst_1476:
// fs1 == 0 and fe1 == 0x3f8 and fm1 == 0x4be465508e640 and fs2 == 0 and fe2 == 0x403 and fm2 == 0x08afa5318307d and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x57273fc6baccc and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3f84be465508e640; op2val:0x40308afa5318307d;
op3val:0x3fc57273fc6baccc; valaddr_reg:x3; val_offset:4428*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 4428*FLEN/8, x4, x1, x2)

inst_1477:
// fs1 == 0 and fe1 == 0x3f8 and fm1 == 0x4be465508e640 and fs2 == 0 and fe2 == 0x403 and fm2 == 0x08afa5318307d and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x57273fc6baccc and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3f84be465508e640; op2val:0x40308afa5318307d;
op3val:0x3fc57273fc6baccc; valaddr_reg:x3; val_offset:4431*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 4431*FLEN/8, x4, x1, x2)

inst_1478:
// fs1 == 0 and fe1 == 0x3f8 and fm1 == 0x4be465508e640 and fs2 == 0 and fe2 == 0x403 and fm2 == 0x08afa5318307d and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x57273fc6baccc and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3f84be465508e640; op2val:0x40308afa5318307d;
op3val:0x3fc57273fc6baccc; valaddr_reg:x3; val_offset:4434*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 4434*FLEN/8, x4, x1, x2)

inst_1479:
// fs1 == 0 and fe1 == 0x3f8 and fm1 == 0xf465b817cb700 and fs2 == 0 and fe2 == 0x404 and fm2 == 0xbd927a307f6f9 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xb37990edd00d1 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3f8f465b817cb700; op2val:0x404bd927a307f6f9;
op3val:0x3feb37990edd00d1; valaddr_reg:x3; val_offset:4437*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 4437*FLEN/8, x4, x1, x2)

inst_1480:
// fs1 == 0 and fe1 == 0x3f8 and fm1 == 0xf465b817cb700 and fs2 == 0 and fe2 == 0x404 and fm2 == 0xbd927a307f6f9 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xb37990edd00d1 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3f8f465b817cb700; op2val:0x404bd927a307f6f9;
op3val:0x3feb37990edd00d1; valaddr_reg:x3; val_offset:4440*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 4440*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(4563211407084759552,64,FLEN)
NAN_BOXED(4563211407084759552,64,FLEN)
NAN_BOXED(4563211407084759552,64,FLEN)
NAN_BOXED(4563211407084759552,64,FLEN)
NAN_BOXED(4644692970509462236,64,FLEN)
NAN_BOXED(4644692970509462236,64,FLEN)
NAN_BOXED(4563211407084759552,64,FLEN)
NAN_BOXED(4644692970509462236,64,FLEN)
NAN_BOXED(4563211407084759552,64,FLEN)
NAN_BOXED(4563211407084759552,64,FLEN)
NAN_BOXED(4644692970509462236,64,FLEN)
NAN_BOXED(4601072355364800522,64,FLEN)
NAN_BOXED(4563211407084759552,64,FLEN)
NAN_BOXED(4644692970509462236,64,FLEN)
NAN_BOXED(4563211407084759552,64,FLEN)
NAN_BOXED(4576992330598901312,64,FLEN)
NAN_BOXED(4576992330598901312,64,FLEN)
NAN_BOXED(4576992330598901312,64,FLEN)
NAN_BOXED(4576992330598901312,64,FLEN)
NAN_BOXED(4625349625050050685,64,FLEN)
NAN_BOXED(4625349625050050685,64,FLEN)
NAN_BOXED(4576992330598901312,64,FLEN)
NAN_BOXED(4625349625050050685,64,FLEN)
NAN_BOXED(4595204837283179724,64,FLEN)
NAN_BOXED(4576992330598901312,64,FLEN)
NAN_BOXED(4576992330598901312,64,FLEN)
NAN_BOXED(4595204837283179724,64,FLEN)
NAN_BOXED(4576992330598901312,64,FLEN)
NAN_BOXED(4576992330598901312,64,FLEN)
NAN_BOXED(4595204837283179724,64,FLEN)
NAN_BOXED(4579956704887486208,64,FLEN)
NAN_BOXED(4633035405942847225,64,FLEN)
NAN_BOXED(4605836174435352785,64,FLEN)
NAN_BOXED(4579956704887486208,64,FLEN)
NAN_BOXED(4633035405942847225,64,FLEN)
NAN_BOXED(4605836174435352785,64,FLEN)
NAN_BOXED(4579956704887486208,64,FLEN)
NAN_BOXED(4633035405942847225,64,FLEN)
NAN_BOXED(4605836174435352785,64,FLEN)
NAN_BOXED(4579956704887486208,64,FLEN)
NAN_BOXED(4633035405942847225,64,FLEN)
NAN_BOXED(4605836174435352785,64,FLEN)
NAN_BOXED(4579956704887486208,64,FLEN)
NAN_BOXED(4633035405942847225,64,FLEN)
NAN_BOXED(4605836174435352785,64,FLEN)
NAN_BOXED(4581333646736639424,64,FLEN)
NAN_BOXED(4625591670119323005,64,FLEN)
NAN_BOXED(4599845725474394378,64,FLEN)
NAN_BOXED(4581333646736639424,64,FLEN)
NAN_BOXED(4625591670119323005,64,FLEN)
NAN_BOXED(4599845725474394378,64,FLEN)
NAN_BOXED(4581333646736639424,64,FLEN)
NAN_BOXED(4625591670119323005,64,FLEN)
NAN_BOXED(4599845725474394378,64,FLEN)
NAN_BOXED(4581333646736639424,64,FLEN)
NAN_BOXED(4625591670119323005,64,FLEN)
NAN_BOXED(4599845725474394378,64,FLEN)
NAN_BOXED(4581333646736639424,64,FLEN)
NAN_BOXED(4625591670119323005,64,FLEN)
NAN_BOXED(4599845725474394378,64,FLEN)
NAN_BOXED(4581371432572902048,64,FLEN)
NAN_BOXED(4631457611884298531,64,FLEN)
NAN_BOXED(4606118976810108898,64,FLEN)
NAN_BOXED(4581371432572902048,64,FLEN)
NAN_BOXED(4631457611884298531,64,FLEN)
NAN_BOXED(4606118976810108898,64,FLEN)
NAN_BOXED(4581371432572902048,64,FLEN)
NAN_BOXED(4631457611884298531,64,FLEN)
NAN_BOXED(4606118976810108898,64,FLEN)
NAN_BOXED(4581371432572902048,64,FLEN)
NAN_BOXED(4631457611884298531,64,FLEN)
NAN_BOXED(4606118976810108898,64,FLEN)
NAN_BOXED(4581371432572902048,64,FLEN)
NAN_BOXED(4631457611884298531,64,FLEN)
NAN_BOXED(4606118976810108898,64,FLEN)
NAN_BOXED(4581962048530987616,64,FLEN)
NAN_BOXED(4613744580988944015,64,FLEN)
NAN_BOXED(4589257779484402200,64,FLEN)
NAN_BOXED(4581962048530987616,64,FLEN)
NAN_BOXED(4613744580988944015,64,FLEN)
NAN_BOXED(4589257779484402200,64,FLEN)
NAN_BOXED(4581962048530987616,64,FLEN)
NAN_BOXED(4613744580988944015,64,FLEN)
NAN_BOXED(4589257779484402200,64,FLEN)
NAN_BOXED(4581962048530987616,64,FLEN)
NAN_BOXED(4613744580988944015,64,FLEN)
NAN_BOXED(4589257779484402200,64,FLEN)
NAN_BOXED(4581962048530987616,64,FLEN)
NAN_BOXED(4613744580988944015,64,FLEN)
NAN_BOXED(4589257779484402200,64,FLEN)
NAN_BOXED(4582501221255059264,64,FLEN)
NAN_BOXED(4630847781958317458,64,FLEN)
NAN_BOXED(4606762839313873316,64,FLEN)
NAN_BOXED(4582501221255059264,64,FLEN)
NAN_BOXED(4630847781958317458,64,FLEN)
NAN_BOXED(4606762839313873316,64,FLEN)
NAN_BOXED(4582501221255059264,64,FLEN)
NAN_BOXED(4630847781958317458,64,FLEN)
NAN_BOXED(4606762839313873316,64,FLEN)
NAN_BOXED(4582501221255059264,64,FLEN)
NAN_BOXED(4630847781958317458,64,FLEN)
NAN_BOXED(4606762839313873316,64,FLEN)
NAN_BOXED(4582501221255059264,64,FLEN)
NAN_BOXED(4630847781958317458,64,FLEN)
NAN_BOXED(4606762839313873316,64,FLEN)
NAN_BOXED(4583548105008246080,64,FLEN)
NAN_BOXED(4625349955159147189,64,FLEN)
NAN_BOXED(4601830820652082960,64,FLEN)
NAN_BOXED(4583548105008246080,64,FLEN)
NAN_BOXED(4625349955159147189,64,FLEN)
NAN_BOXED(4601830820652082960,64,FLEN)
NAN_BOXED(4583548105008246080,64,FLEN)
NAN_BOXED(4625349955159147189,64,FLEN)
NAN_BOXED(4601830820652082960,64,FLEN)
NAN_BOXED(4583548105008246080,64,FLEN)
NAN_BOXED(4625349955159147189,64,FLEN)
NAN_BOXED(4601830820652082960,64,FLEN)
NAN_BOXED(4583548105008246080,64,FLEN)
NAN_BOXED(4625349955159147189,64,FLEN)
NAN_BOXED(4601830820652082960,64,FLEN)
NAN_BOXED(4583826451666255712,64,FLEN)
NAN_BOXED(4626693220484357369,64,FLEN)
NAN_BOXED(4603617022602230079,64,FLEN)
NAN_BOXED(4583826451666255712,64,FLEN)
NAN_BOXED(4626693220484357369,64,FLEN)
NAN_BOXED(4603617022602230079,64,FLEN)
NAN_BOXED(4583826451666255712,64,FLEN)
NAN_BOXED(4626693220484357369,64,FLEN)
NAN_BOXED(4603617022602230079,64,FLEN)
NAN_BOXED(4583826451666255712,64,FLEN)
NAN_BOXED(4626693220484357369,64,FLEN)
NAN_BOXED(4603617022602230079,64,FLEN)
NAN_BOXED(4583826451666255712,64,FLEN)
NAN_BOXED(4626693220484357369,64,FLEN)
NAN_BOXED(4603617022602230079,64,FLEN)
NAN_BOXED(4584047556572892768,64,FLEN)
NAN_BOXED(4622964500540311424,64,FLEN)
NAN_BOXED(4599982520026367450,64,FLEN)
NAN_BOXED(4584047556572892768,64,FLEN)
NAN_BOXED(4622964500540311424,64,FLEN)
NAN_BOXED(4599982520026367450,64,FLEN)
NAN_BOXED(4584047556572892768,64,FLEN)
NAN_BOXED(4622964500540311424,64,FLEN)
NAN_BOXED(4599982520026367450,64,FLEN)
NAN_BOXED(4584047556572892768,64,FLEN)
NAN_BOXED(4622964500540311424,64,FLEN)
NAN_BOXED(4599982520026367450,64,FLEN)
NAN_BOXED(4584047556572892768,64,FLEN)
NAN_BOXED(4622964500540311424,64,FLEN)
NAN_BOXED(4599982520026367450,64,FLEN)
NAN_BOXED(4586252396526263824,64,FLEN)
NAN_BOXED(4626347377267472971,64,FLEN)
NAN_BOXED(4605823044129850896,64,FLEN)
NAN_BOXED(4586252396526263824,64,FLEN)
NAN_BOXED(4626347377267472971,64,FLEN)
NAN_BOXED(4605823044129850896,64,FLEN)
NAN_BOXED(4586252396526263824,64,FLEN)
NAN_BOXED(4626347377267472971,64,FLEN)
NAN_BOXED(4605823044129850896,64,FLEN)
NAN_BOXED(4586252396526263824,64,FLEN)
NAN_BOXED(4626347377267472971,64,FLEN)
NAN_BOXED(4605823044129850896,64,FLEN)
NAN_BOXED(4586252396526263824,64,FLEN)
NAN_BOXED(4626347377267472971,64,FLEN)
NAN_BOXED(4605823044129850896,64,FLEN)
NAN_BOXED(4586427658987326768,64,FLEN)
NAN_BOXED(4623345733942105160,64,FLEN)
NAN_BOXED(4603154149994137432,64,FLEN)
NAN_BOXED(4586427658987326768,64,FLEN)
NAN_BOXED(4623345733942105160,64,FLEN)
NAN_BOXED(4603154149994137432,64,FLEN)
NAN_BOXED(4586427658987326768,64,FLEN)
NAN_BOXED(4623345733942105160,64,FLEN)
NAN_BOXED(4603154149994137432,64,FLEN)
NAN_BOXED(4586427658987326768,64,FLEN)
NAN_BOXED(4623345733942105160,64,FLEN)
NAN_BOXED(4603154149994137432,64,FLEN)
NAN_BOXED(4586427658987326768,64,FLEN)
NAN_BOXED(4623345733942105160,64,FLEN)
NAN_BOXED(4603154149994137432,64,FLEN)
NAN_BOXED(4586645913516215280,64,FLEN)
NAN_BOXED(4624138133983842482,64,FLEN)
NAN_BOXED(4603898070725134186,64,FLEN)
NAN_BOXED(4586645913516215280,64,FLEN)
NAN_BOXED(4624138133983842482,64,FLEN)
NAN_BOXED(4603898070725134186,64,FLEN)
NAN_BOXED(4586645913516215280,64,FLEN)
NAN_BOXED(4624138133983842482,64,FLEN)
NAN_BOXED(4603898070725134186,64,FLEN)
NAN_BOXED(4586645913516215280,64,FLEN)
NAN_BOXED(4624138133983842482,64,FLEN)
NAN_BOXED(4603898070725134186,64,FLEN)
NAN_BOXED(4586645913516215280,64,FLEN)
NAN_BOXED(4624138133983842482,64,FLEN)
NAN_BOXED(4603898070725134186,64,FLEN)
NAN_BOXED(4586920122319893120,64,FLEN)
NAN_BOXED(4619115821191959799,64,FLEN)
NAN_BOXED(4599247190519470780,64,FLEN)
NAN_BOXED(4586920122319893120,64,FLEN)
NAN_BOXED(4619115821191959799,64,FLEN)
NAN_BOXED(4599247190519470780,64,FLEN)
NAN_BOXED(4586920122319893120,64,FLEN)
NAN_BOXED(4619115821191959799,64,FLEN)
NAN_BOXED(4599247190519470780,64,FLEN)
NAN_BOXED(4586920122319893120,64,FLEN)
NAN_BOXED(4619115821191959799,64,FLEN)
NAN_BOXED(4599247190519470780,64,FLEN)
NAN_BOXED(4586920122319893120,64,FLEN)
NAN_BOXED(4619115821191959799,64,FLEN)
NAN_BOXED(4599247190519470780,64,FLEN)
NAN_BOXED(4586971656307413760,64,FLEN)
NAN_BOXED(4625859356194762099,64,FLEN)
NAN_BOXED(4605988018486388555,64,FLEN)
NAN_BOXED(4586971656307413760,64,FLEN)
NAN_BOXED(4625859356194762099,64,FLEN)
NAN_BOXED(4605988018486388555,64,FLEN)
NAN_BOXED(4586971656307413760,64,FLEN)
NAN_BOXED(4625859356194762099,64,FLEN)
NAN_BOXED(4605988018486388555,64,FLEN)
NAN_BOXED(4586971656307413760,64,FLEN)
NAN_BOXED(4625859356194762099,64,FLEN)
NAN_BOXED(4605988018486388555,64,FLEN)
NAN_BOXED(4586971656307413760,64,FLEN)
NAN_BOXED(4625859356194762099,64,FLEN)
NAN_BOXED(4605988018486388555,64,FLEN)
NAN_BOXED(4588493476426859968,64,FLEN)
NAN_BOXED(4623398485653198577,64,FLEN)
NAN_BOXED(4604844219281904040,64,FLEN)
NAN_BOXED(4588493476426859968,64,FLEN)
NAN_BOXED(4623398485653198577,64,FLEN)
NAN_BOXED(4604844219281904040,64,FLEN)
NAN_BOXED(4588493476426859968,64,FLEN)
NAN_BOXED(4623398485653198577,64,FLEN)
NAN_BOXED(4604844219281904040,64,FLEN)
NAN_BOXED(4588493476426859968,64,FLEN)
NAN_BOXED(4623398485653198577,64,FLEN)
NAN_BOXED(4604844219281904040,64,FLEN)
NAN_BOXED(4588493476426859968,64,FLEN)
NAN_BOXED(4623398485653198577,64,FLEN)
NAN_BOXED(4604844219281904040,64,FLEN)
NAN_BOXED(4588706952808808960,64,FLEN)
NAN_BOXED(4620244500397083365,64,FLEN)
NAN_BOXED(4601792003693305100,64,FLEN)
NAN_BOXED(4588706952808808960,64,FLEN)
NAN_BOXED(4620244500397083365,64,FLEN)
NAN_BOXED(4601792003693305100,64,FLEN)
NAN_BOXED(4588706952808808960,64,FLEN)
NAN_BOXED(4620244500397083365,64,FLEN)
NAN_BOXED(4601792003693305100,64,FLEN)
NAN_BOXED(4588706952808808960,64,FLEN)
NAN_BOXED(4620244500397083365,64,FLEN)
NAN_BOXED(4601792003693305100,64,FLEN)
NAN_BOXED(4588706952808808960,64,FLEN)
NAN_BOXED(4620244500397083365,64,FLEN)
NAN_BOXED(4601792003693305100,64,FLEN)
NAN_BOXED(4589202521374597832,64,FLEN)
NAN_BOXED(4596011186271712425,64,FLEN)
NAN_BOXED(4578049211748442432,64,FLEN)
NAN_BOXED(4589202521374597832,64,FLEN)
NAN_BOXED(4596011186271712425,64,FLEN)
NAN_BOXED(4578049211748442432,64,FLEN)
NAN_BOXED(4589202521374597832,64,FLEN)
NAN_BOXED(4596011186271712425,64,FLEN)
NAN_BOXED(4578049211748442432,64,FLEN)
NAN_BOXED(4589202521374597832,64,FLEN)
NAN_BOXED(4596011186271712425,64,FLEN)
NAN_BOXED(4578049211748442432,64,FLEN)
NAN_BOXED(4589202521374597832,64,FLEN)
NAN_BOXED(4596011186271712425,64,FLEN)
NAN_BOXED(4578049211748442432,64,FLEN)
NAN_BOXED(4589373900381599888,64,FLEN)
NAN_BOXED(4623887609728712994,64,FLEN)
NAN_BOXED(4606225121548296520,64,FLEN)
NAN_BOXED(4589373900381599888,64,FLEN)
NAN_BOXED(4623887609728712994,64,FLEN)
NAN_BOXED(4606225121548296520,64,FLEN)
NAN_BOXED(4589373900381599888,64,FLEN)
NAN_BOXED(4623887609728712994,64,FLEN)
NAN_BOXED(4606225121548296520,64,FLEN)
NAN_BOXED(4589373900381599888,64,FLEN)
NAN_BOXED(4623887609728712994,64,FLEN)
NAN_BOXED(4606225121548296520,64,FLEN)
NAN_BOXED(4589373900381599888,64,FLEN)
NAN_BOXED(4623887609728712994,64,FLEN)
NAN_BOXED(4606225121548296520,64,FLEN)
NAN_BOXED(4589967941738200344,64,FLEN)
NAN_BOXED(4615962357263919249,64,FLEN)
NAN_BOXED(4598841327766470272,64,FLEN)
NAN_BOXED(4589967941738200344,64,FLEN)
NAN_BOXED(4615962357263919249,64,FLEN)
NAN_BOXED(4598841327766470272,64,FLEN)
NAN_BOXED(4589967941738200344,64,FLEN)
NAN_BOXED(4615962357263919249,64,FLEN)
NAN_BOXED(4598841327766470272,64,FLEN)
NAN_BOXED(4589967941738200344,64,FLEN)
NAN_BOXED(4615962357263919249,64,FLEN)
NAN_BOXED(4598841327766470272,64,FLEN)
NAN_BOXED(4589967941738200344,64,FLEN)
NAN_BOXED(4615962357263919249,64,FLEN)
NAN_BOXED(4598841327766470272,64,FLEN)
NAN_BOXED(4590970322214773232,64,FLEN)
NAN_BOXED(4618848999984607672,64,FLEN)
NAN_BOXED(4603189992199721559,64,FLEN)
NAN_BOXED(4590970322214773232,64,FLEN)
NAN_BOXED(4618848999984607672,64,FLEN)
NAN_BOXED(4603189992199721559,64,FLEN)
NAN_BOXED(4590970322214773232,64,FLEN)
NAN_BOXED(4618848999984607672,64,FLEN)
NAN_BOXED(4603189992199721559,64,FLEN)
NAN_BOXED(4590970322214773232,64,FLEN)
NAN_BOXED(4618848999984607672,64,FLEN)
NAN_BOXED(4603189992199721559,64,FLEN)
NAN_BOXED(4590970322214773232,64,FLEN)
NAN_BOXED(4618848999984607672,64,FLEN)
NAN_BOXED(4603189992199721559,64,FLEN)
NAN_BOXED(4591165663058402688,64,FLEN)
NAN_BOXED(4612615745916065899,64,FLEN)
NAN_BOXED(4597011385490979212,64,FLEN)
NAN_BOXED(4591165663058402688,64,FLEN)
NAN_BOXED(4612615745916065899,64,FLEN)
NAN_BOXED(4597011385490979212,64,FLEN)
NAN_BOXED(4591165663058402688,64,FLEN)
NAN_BOXED(4612615745916065899,64,FLEN)
NAN_BOXED(4597011385490979212,64,FLEN)
NAN_BOXED(4591165663058402688,64,FLEN)
NAN_BOXED(4612615745916065899,64,FLEN)
NAN_BOXED(4597011385490979212,64,FLEN)
NAN_BOXED(4591165663058402688,64,FLEN)
NAN_BOXED(4612615745916065899,64,FLEN)
NAN_BOXED(4597011385490979212,64,FLEN)
NAN_BOXED(4591520549722378800,64,FLEN)
NAN_BOXED(4611761802909064791,64,FLEN)
NAN_BOXED(4596139521103469272,64,FLEN)
NAN_BOXED(4591520549722378800,64,FLEN)
NAN_BOXED(4611761802909064791,64,FLEN)
NAN_BOXED(4596139521103469272,64,FLEN)
NAN_BOXED(4591520549722378800,64,FLEN)
NAN_BOXED(4611761802909064791,64,FLEN)
NAN_BOXED(4596139521103469272,64,FLEN)
NAN_BOXED(4591520549722378800,64,FLEN)
NAN_BOXED(4611761802909064791,64,FLEN)
NAN_BOXED(4596139521103469272,64,FLEN)
NAN_BOXED(4591520549722378800,64,FLEN)
NAN_BOXED(4611761802909064791,64,FLEN)
NAN_BOXED(4596139521103469272,64,FLEN)
NAN_BOXED(4591757297299139800,64,FLEN)
NAN_BOXED(4619809040750948713,64,FLEN)
NAN_BOXED(4604571835587933680,64,FLEN)
NAN_BOXED(4591757297299139800,64,FLEN)
NAN_BOXED(4619809040750948713,64,FLEN)
NAN_BOXED(4604571835587933680,64,FLEN)
NAN_BOXED(4591757297299139800,64,FLEN)
NAN_BOXED(4619809040750948713,64,FLEN)
NAN_BOXED(4604571835587933680,64,FLEN)
NAN_BOXED(4591757297299139800,64,FLEN)
NAN_BOXED(4619809040750948713,64,FLEN)
NAN_BOXED(4604571835587933680,64,FLEN)
NAN_BOXED(4591757297299139800,64,FLEN)
NAN_BOXED(4619809040750948713,64,FLEN)
NAN_BOXED(4604571835587933680,64,FLEN)
NAN_BOXED(4591903830238621600,64,FLEN)
NAN_BOXED(4612114035245567666,64,FLEN)
NAN_BOXED(4597095454847865592,64,FLEN)
NAN_BOXED(4591903830238621600,64,FLEN)
NAN_BOXED(4612114035245567666,64,FLEN)
NAN_BOXED(4597095454847865592,64,FLEN)
NAN_BOXED(4591903830238621600,64,FLEN)
NAN_BOXED(4612114035245567666,64,FLEN)
NAN_BOXED(4597095454847865592,64,FLEN)
NAN_BOXED(4591903830238621600,64,FLEN)
NAN_BOXED(4612114035245567666,64,FLEN)
NAN_BOXED(4597095454847865592,64,FLEN)
NAN_BOXED(4591903830238621600,64,FLEN)
NAN_BOXED(4612114035245567666,64,FLEN)
NAN_BOXED(4597095454847865592,64,FLEN)
NAN_BOXED(4592326814360008480,64,FLEN)
NAN_BOXED(4620164381470097016,64,FLEN)
NAN_BOXED(4605387734079559772,64,FLEN)
NAN_BOXED(4592326814360008480,64,FLEN)
NAN_BOXED(4620164381470097016,64,FLEN)
NAN_BOXED(4605387734079559772,64,FLEN)
NAN_BOXED(4592326814360008480,64,FLEN)
NAN_BOXED(4620164381470097016,64,FLEN)
NAN_BOXED(4605387734079559772,64,FLEN)
NAN_BOXED(4592326814360008480,64,FLEN)
NAN_BOXED(4620164381470097016,64,FLEN)
NAN_BOXED(4605387734079559772,64,FLEN)
NAN_BOXED(4592326814360008480,64,FLEN)
NAN_BOXED(4620164381470097016,64,FLEN)
NAN_BOXED(4605387734079559772,64,FLEN)
NAN_BOXED(4592450794515966064,64,FLEN)
NAN_BOXED(4614948398336387503,64,FLEN)
NAN_BOXED(4600385007541872680,64,FLEN)
NAN_BOXED(4592450794515966064,64,FLEN)
NAN_BOXED(4614948398336387503,64,FLEN)
NAN_BOXED(4600385007541872680,64,FLEN)
NAN_BOXED(4592450794515966064,64,FLEN)
NAN_BOXED(4614948398336387503,64,FLEN)
NAN_BOXED(4600385007541872680,64,FLEN)
NAN_BOXED(4592450794515966064,64,FLEN)
NAN_BOXED(4614948398336387503,64,FLEN)
NAN_BOXED(4600385007541872680,64,FLEN)
NAN_BOXED(4592450794515966064,64,FLEN)
NAN_BOXED(4614948398336387503,64,FLEN)
NAN_BOXED(4600385007541872680,64,FLEN)
NAN_BOXED(4592816861235966472,64,FLEN)
NAN_BOXED(4613086947280467855,64,FLEN)
NAN_BOXED(4599015824724072458,64,FLEN)
NAN_BOXED(4592816861235966472,64,FLEN)
NAN_BOXED(4613086947280467855,64,FLEN)
NAN_BOXED(4599015824724072458,64,FLEN)
NAN_BOXED(4592816861235966472,64,FLEN)
NAN_BOXED(4613086947280467855,64,FLEN)
NAN_BOXED(4599015824724072458,64,FLEN)
NAN_BOXED(4592816861235966472,64,FLEN)
NAN_BOXED(4613086947280467855,64,FLEN)
NAN_BOXED(4599015824724072458,64,FLEN)
NAN_BOXED(4592816861235966472,64,FLEN)
NAN_BOXED(4613086947280467855,64,FLEN)
NAN_BOXED(4599015824724072458,64,FLEN)
NAN_BOXED(4593003894221723360,64,FLEN)
NAN_BOXED(4609996035609045488,64,FLEN)
NAN_BOXED(4595942793587737208,64,FLEN)
NAN_BOXED(4593003894221723360,64,FLEN)
NAN_BOXED(4609996035609045488,64,FLEN)
NAN_BOXED(4595942793587737208,64,FLEN)
NAN_BOXED(4593003894221723360,64,FLEN)
NAN_BOXED(4609996035609045488,64,FLEN)
NAN_BOXED(4595942793587737208,64,FLEN)
NAN_BOXED(4593003894221723360,64,FLEN)
NAN_BOXED(4609996035609045488,64,FLEN)
NAN_BOXED(4595942793587737208,64,FLEN)
NAN_BOXED(4593003894221723360,64,FLEN)
NAN_BOXED(4609996035609045488,64,FLEN)
NAN_BOXED(4595942793587737208,64,FLEN)
NAN_BOXED(4593107204770077760,64,FLEN)
NAN_BOXED(4598661594814528605,64,FLEN)
NAN_BOXED(4584838110785871296,64,FLEN)
NAN_BOXED(4593107204770077760,64,FLEN)
NAN_BOXED(4598661594814528605,64,FLEN)
NAN_BOXED(4584838110785871296,64,FLEN)
NAN_BOXED(4593107204770077760,64,FLEN)
NAN_BOXED(4598661594814528605,64,FLEN)
NAN_BOXED(4584838110785871296,64,FLEN)
NAN_BOXED(4593107204770077760,64,FLEN)
NAN_BOXED(4598661594814528605,64,FLEN)
NAN_BOXED(4584838110785871296,64,FLEN)
NAN_BOXED(4593107204770077760,64,FLEN)
NAN_BOXED(4598661594814528605,64,FLEN)
NAN_BOXED(4584838110785871296,64,FLEN)
NAN_BOXED(4593637189946969256,64,FLEN)
NAN_BOXED(4617890949634551723,64,FLEN)
NAN_BOXED(4604356432436115191,64,FLEN)
NAN_BOXED(4593637189946969256,64,FLEN)
NAN_BOXED(4617890949634551723,64,FLEN)
NAN_BOXED(4604356432436115191,64,FLEN)
NAN_BOXED(4593637189946969256,64,FLEN)
NAN_BOXED(4617890949634551723,64,FLEN)
NAN_BOXED(4604356432436115191,64,FLEN)
NAN_BOXED(4593637189946969256,64,FLEN)
NAN_BOXED(4617890949634551723,64,FLEN)
NAN_BOXED(4604356432436115191,64,FLEN)
NAN_BOXED(4593637189946969256,64,FLEN)
NAN_BOXED(4617890949634551723,64,FLEN)
NAN_BOXED(4604356432436115191,64,FLEN)
NAN_BOXED(4593689159307910476,64,FLEN)
NAN_BOXED(4609932956029830520,64,FLEN)
NAN_BOXED(4596450408579021076,64,FLEN)
NAN_BOXED(4593689159307910476,64,FLEN)
NAN_BOXED(4609932956029830520,64,FLEN)
NAN_BOXED(4596450408579021076,64,FLEN)
NAN_BOXED(4593689159307910476,64,FLEN)
NAN_BOXED(4609932956029830520,64,FLEN)
NAN_BOXED(4596450408579021076,64,FLEN)
NAN_BOXED(4593689159307910476,64,FLEN)
NAN_BOXED(4609932956029830520,64,FLEN)
NAN_BOXED(4596450408579021076,64,FLEN)
NAN_BOXED(4593689159307910476,64,FLEN)
NAN_BOXED(4609932956029830520,64,FLEN)
NAN_BOXED(4596450408579021076,64,FLEN)
NAN_BOXED(4593832386850433132,64,FLEN)
NAN_BOXED(4612912822440190122,64,FLEN)
NAN_BOXED(4599606584240998672,64,FLEN)
NAN_BOXED(4593832386850433132,64,FLEN)
NAN_BOXED(4612912822440190122,64,FLEN)
NAN_BOXED(4599606584240998672,64,FLEN)
NAN_BOXED(4593832386850433132,64,FLEN)
NAN_BOXED(4612912822440190122,64,FLEN)
NAN_BOXED(4599606584240998672,64,FLEN)
NAN_BOXED(4593832386850433132,64,FLEN)
NAN_BOXED(4612912822440190122,64,FLEN)
NAN_BOXED(4599606584240998672,64,FLEN)
NAN_BOXED(4593832386850433132,64,FLEN)
NAN_BOXED(4612912822440190122,64,FLEN)
NAN_BOXED(4599606584240998672,64,FLEN)
NAN_BOXED(4594092255031801992,64,FLEN)
NAN_BOXED(4612187753883242092,64,FLEN)
NAN_BOXED(4599144452085024250,64,FLEN)
NAN_BOXED(4594092255031801992,64,FLEN)
NAN_BOXED(4612187753883242092,64,FLEN)
NAN_BOXED(4599144452085024250,64,FLEN)
NAN_BOXED(4594092255031801992,64,FLEN)
NAN_BOXED(4612187753883242092,64,FLEN)
NAN_BOXED(4599144452085024250,64,FLEN)
NAN_BOXED(4594092255031801992,64,FLEN)
NAN_BOXED(4612187753883242092,64,FLEN)
NAN_BOXED(4599144452085024250,64,FLEN)
NAN_BOXED(4594092255031801992,64,FLEN)
NAN_BOXED(4612187753883242092,64,FLEN)
NAN_BOXED(4599144452085024250,64,FLEN)
NAN_BOXED(4594267231451251736,64,FLEN)
NAN_BOXED(4617337259366085311,64,FLEN)
NAN_BOXED(4604573850252004663,64,FLEN)
NAN_BOXED(4594267231451251736,64,FLEN)
NAN_BOXED(4617337259366085311,64,FLEN)
NAN_BOXED(4604573850252004663,64,FLEN)
NAN_BOXED(4594267231451251736,64,FLEN)
NAN_BOXED(4617337259366085311,64,FLEN)
NAN_BOXED(4604573850252004663,64,FLEN)
NAN_BOXED(4594267231451251736,64,FLEN)
NAN_BOXED(4617337259366085311,64,FLEN)
NAN_BOXED(4604573850252004663,64,FLEN)
NAN_BOXED(4594267231451251736,64,FLEN)
NAN_BOXED(4617337259366085311,64,FLEN)
NAN_BOXED(4604573850252004663,64,FLEN)
NAN_BOXED(4594477627386932880,64,FLEN)
NAN_BOXED(4608604973033584086,64,FLEN)
NAN_BOXED(4596154775596922840,64,FLEN)
NAN_BOXED(4594477627386932880,64,FLEN)
NAN_BOXED(4608604973033584086,64,FLEN)
NAN_BOXED(4596154775596922840,64,FLEN)
NAN_BOXED(4594477627386932880,64,FLEN)
NAN_BOXED(4608604973033584086,64,FLEN)
NAN_BOXED(4596154775596922840,64,FLEN)
NAN_BOXED(4594477627386932880,64,FLEN)
NAN_BOXED(4608604973033584086,64,FLEN)
NAN_BOXED(4596154775596922840,64,FLEN)
NAN_BOXED(4594477627386932880,64,FLEN)
NAN_BOXED(4608604973033584086,64,FLEN)
NAN_BOXED(4596154775596922840,64,FLEN)
NAN_BOXED(4594610641103282064,64,FLEN)
NAN_BOXED(4586740870915657611,64,FLEN)
NAN_BOXED(4574602042623576320,64,FLEN)
NAN_BOXED(4594610641103282064,64,FLEN)
NAN_BOXED(4586740870915657611,64,FLEN)
NAN_BOXED(4574602042623576320,64,FLEN)
NAN_BOXED(4594610641103282064,64,FLEN)
NAN_BOXED(4586740870915657611,64,FLEN)
NAN_BOXED(4574602042623576320,64,FLEN)
NAN_BOXED(4594610641103282064,64,FLEN)
NAN_BOXED(4586740870915657611,64,FLEN)
NAN_BOXED(4574602042623576320,64,FLEN)
NAN_BOXED(4594610641103282064,64,FLEN)
NAN_BOXED(4586740870915657611,64,FLEN)
NAN_BOXED(4574602042623576320,64,FLEN)
NAN_BOXED(4594916936289627904,64,FLEN)
NAN_BOXED(4614528174542362909,64,FLEN)
NAN_BOXED(4602863706112326371,64,FLEN)
NAN_BOXED(4594916936289627904,64,FLEN)
NAN_BOXED(4614528174542362909,64,FLEN)
NAN_BOXED(4602863706112326371,64,FLEN)
NAN_BOXED(4594916936289627904,64,FLEN)
NAN_BOXED(4614528174542362909,64,FLEN)
NAN_BOXED(4602863706112326371,64,FLEN)
NAN_BOXED(4594916936289627904,64,FLEN)
NAN_BOXED(4614528174542362909,64,FLEN)
NAN_BOXED(4602863706112326371,64,FLEN)
NAN_BOXED(4594916936289627904,64,FLEN)
NAN_BOXED(4614528174542362909,64,FLEN)
NAN_BOXED(4602863706112326371,64,FLEN)
NAN_BOXED(4594932635617651880,64,FLEN)
NAN_BOXED(4617757886821347251,64,FLEN)
NAN_BOXED(4605947221611207961,64,FLEN)
NAN_BOXED(4594932635617651880,64,FLEN)
NAN_BOXED(4617757886821347251,64,FLEN)
NAN_BOXED(4605947221611207961,64,FLEN)
NAN_BOXED(4594932635617651880,64,FLEN)
NAN_BOXED(4617757886821347251,64,FLEN)
NAN_BOXED(4605947221611207961,64,FLEN)
NAN_BOXED(4594932635617651880,64,FLEN)
NAN_BOXED(4617757886821347251,64,FLEN)
NAN_BOXED(4605947221611207961,64,FLEN)
NAN_BOXED(4594932635617651880,64,FLEN)
NAN_BOXED(4617757886821347251,64,FLEN)
NAN_BOXED(4605947221611207961,64,FLEN)
NAN_BOXED(4594933788642943360,64,FLEN)
NAN_BOXED(4599898720941845943,64,FLEN)
NAN_BOXED(4588133115418464416,64,FLEN)
NAN_BOXED(4594933788642943360,64,FLEN)
NAN_BOXED(4599898720941845943,64,FLEN)
NAN_BOXED(4588133115418464416,64,FLEN)
NAN_BOXED(4594933788642943360,64,FLEN)
NAN_BOXED(4599898720941845943,64,FLEN)
NAN_BOXED(4588133115418464416,64,FLEN)
NAN_BOXED(4594933788642943360,64,FLEN)
NAN_BOXED(4599898720941845943,64,FLEN)
NAN_BOXED(4588133115418464416,64,FLEN)
NAN_BOXED(4594933788642943360,64,FLEN)
NAN_BOXED(4599898720941845943,64,FLEN)
NAN_BOXED(4588133115418464416,64,FLEN)
NAN_BOXED(4594964664812616344,64,FLEN)
NAN_BOXED(4617843954024240965,64,FLEN)
NAN_BOXED(4606101182463446997,64,FLEN)
NAN_BOXED(4594964664812616344,64,FLEN)
NAN_BOXED(4617843954024240965,64,FLEN)
NAN_BOXED(4606101182463446997,64,FLEN)
NAN_BOXED(4594964664812616344,64,FLEN)
NAN_BOXED(4617843954024240965,64,FLEN)
NAN_BOXED(4606101182463446997,64,FLEN)
NAN_BOXED(4594964664812616344,64,FLEN)
NAN_BOXED(4617843954024240965,64,FLEN)
NAN_BOXED(4606101182463446997,64,FLEN)
NAN_BOXED(4594964664812616344,64,FLEN)
NAN_BOXED(4617843954024240965,64,FLEN)
NAN_BOXED(4606101182463446997,64,FLEN)
NAN_BOXED(4595334155133081060,64,FLEN)
NAN_BOXED(4617202617079028344,64,FLEN)
NAN_BOXED(4605728309067597313,64,FLEN)
NAN_BOXED(4595334155133081060,64,FLEN)
NAN_BOXED(4617202617079028344,64,FLEN)
NAN_BOXED(4605728309067597313,64,FLEN)
NAN_BOXED(4595334155133081060,64,FLEN)
NAN_BOXED(4617202617079028344,64,FLEN)
NAN_BOXED(4605728309067597313,64,FLEN)
NAN_BOXED(4595334155133081060,64,FLEN)
NAN_BOXED(4617202617079028344,64,FLEN)
NAN_BOXED(4605728309067597313,64,FLEN)
NAN_BOXED(4595334155133081060,64,FLEN)
NAN_BOXED(4617202617079028344,64,FLEN)
NAN_BOXED(4605728309067597313,64,FLEN)
NAN_BOXED(4595431437435697728,64,FLEN)
NAN_BOXED(4616795677293589916,64,FLEN)
NAN_BOXED(4605281518416516509,64,FLEN)
NAN_BOXED(4595431437435697728,64,FLEN)
NAN_BOXED(4616795677293589916,64,FLEN)
NAN_BOXED(4605281518416516509,64,FLEN)
NAN_BOXED(4595431437435697728,64,FLEN)
NAN_BOXED(4616795677293589916,64,FLEN)
NAN_BOXED(4605281518416516509,64,FLEN)
NAN_BOXED(4595431437435697728,64,FLEN)
NAN_BOXED(4616795677293589916,64,FLEN)
NAN_BOXED(4605281518416516509,64,FLEN)
NAN_BOXED(4595431437435697728,64,FLEN)
NAN_BOXED(4616795677293589916,64,FLEN)
NAN_BOXED(4605281518416516509,64,FLEN)
NAN_BOXED(4595583856007882700,64,FLEN)
NAN_BOXED(4616209240994049374,64,FLEN)
NAN_BOXED(4604619010135436371,64,FLEN)
NAN_BOXED(4595583856007882700,64,FLEN)
NAN_BOXED(4616209240994049374,64,FLEN)
NAN_BOXED(4604619010135436371,64,FLEN)
NAN_BOXED(4595583856007882700,64,FLEN)
NAN_BOXED(4616209240994049374,64,FLEN)
NAN_BOXED(4604619010135436371,64,FLEN)
NAN_BOXED(4595583856007882700,64,FLEN)
NAN_BOXED(4616209240994049374,64,FLEN)
NAN_BOXED(4604619010135436371,64,FLEN)
NAN_BOXED(4595583856007882700,64,FLEN)
NAN_BOXED(4616209240994049374,64,FLEN)
NAN_BOXED(4604619010135436371,64,FLEN)
NAN_BOXED(4595645385122557924,64,FLEN)
NAN_BOXED(4613335444604673806,64,FLEN)
NAN_BOXED(4602521294901309930,64,FLEN)
NAN_BOXED(4595645385122557924,64,FLEN)
NAN_BOXED(4613335444604673806,64,FLEN)
NAN_BOXED(4602521294901309930,64,FLEN)
NAN_BOXED(4595645385122557924,64,FLEN)
NAN_BOXED(4613335444604673806,64,FLEN)
NAN_BOXED(4602521294901309930,64,FLEN)
NAN_BOXED(4595645385122557924,64,FLEN)
NAN_BOXED(4613335444604673806,64,FLEN)
NAN_BOXED(4602521294901309930,64,FLEN)
NAN_BOXED(4595645385122557924,64,FLEN)
NAN_BOXED(4613335444604673806,64,FLEN)
NAN_BOXED(4602521294901309930,64,FLEN)
NAN_BOXED(4595656889762898944,64,FLEN)
NAN_BOXED(4595547845985616807,64,FLEN)
NAN_BOXED(4584756906347221728,64,FLEN)
NAN_BOXED(4595656889762898944,64,FLEN)
NAN_BOXED(4595547845985616807,64,FLEN)
NAN_BOXED(4584756906347221728,64,FLEN)
NAN_BOXED(4595656889762898944,64,FLEN)
NAN_BOXED(4595547845985616807,64,FLEN)
NAN_BOXED(4584756906347221728,64,FLEN)
NAN_BOXED(4595656889762898944,64,FLEN)
NAN_BOXED(4595547845985616807,64,FLEN)
NAN_BOXED(4584756906347221728,64,FLEN)
NAN_BOXED(4595656889762898944,64,FLEN)
NAN_BOXED(4595547845985616807,64,FLEN)
NAN_BOXED(4584756906347221728,64,FLEN)
NAN_BOXED(4595679150330385752,64,FLEN)
NAN_BOXED(4604954313634685267,64,FLEN)
NAN_BOXED(4594068496223194364,64,FLEN)
NAN_BOXED(4595679150330385752,64,FLEN)
NAN_BOXED(4604954313634685267,64,FLEN)
NAN_BOXED(4594068496223194364,64,FLEN)
NAN_BOXED(4595679150330385752,64,FLEN)
NAN_BOXED(4604954313634685267,64,FLEN)
NAN_BOXED(4594068496223194364,64,FLEN)
NAN_BOXED(4595679150330385752,64,FLEN)
NAN_BOXED(4604954313634685267,64,FLEN)
NAN_BOXED(4594068496223194364,64,FLEN)
NAN_BOXED(4595679150330385752,64,FLEN)
NAN_BOXED(4604954313634685267,64,FLEN)
NAN_BOXED(4594068496223194364,64,FLEN)
NAN_BOXED(4595689989884161400,64,FLEN)
NAN_BOXED(4616297262139134812,64,FLEN)
NAN_BOXED(4604853075874697015,64,FLEN)
NAN_BOXED(4595689989884161400,64,FLEN)
NAN_BOXED(4616297262139134812,64,FLEN)
NAN_BOXED(4604853075874697015,64,FLEN)
NAN_BOXED(4595689989884161400,64,FLEN)
NAN_BOXED(4616297262139134812,64,FLEN)
NAN_BOXED(4604853075874697015,64,FLEN)
NAN_BOXED(4595689989884161400,64,FLEN)
NAN_BOXED(4616297262139134812,64,FLEN)
NAN_BOXED(4604853075874697015,64,FLEN)
NAN_BOXED(4595689989884161400,64,FLEN)
NAN_BOXED(4616297262139134812,64,FLEN)
NAN_BOXED(4604853075874697015,64,FLEN)
NAN_BOXED(4595692109798386296,64,FLEN)
NAN_BOXED(4614243515539046444,64,FLEN)
NAN_BOXED(4603289709171424254,64,FLEN)
NAN_BOXED(4595692109798386296,64,FLEN)
NAN_BOXED(4614243515539046444,64,FLEN)
NAN_BOXED(4603289709171424254,64,FLEN)
NAN_BOXED(4595692109798386296,64,FLEN)
NAN_BOXED(4614243515539046444,64,FLEN)
NAN_BOXED(4603289709171424254,64,FLEN)
NAN_BOXED(4595692109798386296,64,FLEN)
NAN_BOXED(4614243515539046444,64,FLEN)
NAN_BOXED(4603289709171424254,64,FLEN)
NAN_BOXED(4595692109798386296,64,FLEN)
NAN_BOXED(4614243515539046444,64,FLEN)
NAN_BOXED(4603289709171424254,64,FLEN)
NAN_BOXED(4595713265800498176,64,FLEN)
NAN_BOXED(4609127471944091133,64,FLEN)
NAN_BOXED(4598357650991925706,64,FLEN)
NAN_BOXED(4595713265800498176,64,FLEN)
NAN_BOXED(4609127471944091133,64,FLEN)
NAN_BOXED(4598357650991925706,64,FLEN)
NAN_BOXED(4595713265800498176,64,FLEN)
NAN_BOXED(4609127471944091133,64,FLEN)
NAN_BOXED(4598357650991925706,64,FLEN)
NAN_BOXED(4595713265800498176,64,FLEN)
NAN_BOXED(4609127471944091133,64,FLEN)
NAN_BOXED(4598357650991925706,64,FLEN)
NAN_BOXED(4595713265800498176,64,FLEN)
NAN_BOXED(4609127471944091133,64,FLEN)
NAN_BOXED(4598357650991925706,64,FLEN)
NAN_BOXED(4595959043320887160,64,FLEN)
NAN_BOXED(4590427059061887666,64,FLEN)
NAN_BOXED(4579843161997612288,64,FLEN)
NAN_BOXED(4595959043320887160,64,FLEN)
NAN_BOXED(4590427059061887666,64,FLEN)
NAN_BOXED(4579843161997612288,64,FLEN)
NAN_BOXED(4595959043320887160,64,FLEN)
NAN_BOXED(4590427059061887666,64,FLEN)
NAN_BOXED(4579843161997612288,64,FLEN)
NAN_BOXED(4595959043320887160,64,FLEN)
NAN_BOXED(4590427059061887666,64,FLEN)
NAN_BOXED(4579843161997612288,64,FLEN)
NAN_BOXED(4595959043320887160,64,FLEN)
NAN_BOXED(4590427059061887666,64,FLEN)
NAN_BOXED(4579843161997612288,64,FLEN)
NAN_BOXED(4596205251186271016,64,FLEN)
NAN_BOXED(4606180280293334280,64,FLEN)
NAN_BOXED(4595422290816284216,64,FLEN)
NAN_BOXED(4596205251186271016,64,FLEN)
NAN_BOXED(4606180280293334280,64,FLEN)
NAN_BOXED(4595422290816284216,64,FLEN)
NAN_BOXED(4596205251186271016,64,FLEN)
NAN_BOXED(4606180280293334280,64,FLEN)
NAN_BOXED(4595422290816284216,64,FLEN)
NAN_BOXED(4596205251186271016,64,FLEN)
NAN_BOXED(4606180280293334280,64,FLEN)
NAN_BOXED(4595422290816284216,64,FLEN)
NAN_BOXED(4596205251186271016,64,FLEN)
NAN_BOXED(4606180280293334280,64,FLEN)
NAN_BOXED(4595422290816284216,64,FLEN)
NAN_BOXED(4596456734123414204,64,FLEN)
NAN_BOXED(4608282863990007844,64,FLEN)
NAN_BOXED(4598206467857332994,64,FLEN)
NAN_BOXED(4596456734123414204,64,FLEN)
NAN_BOXED(4608282863990007844,64,FLEN)
NAN_BOXED(4598206467857332994,64,FLEN)
NAN_BOXED(4596456734123414204,64,FLEN)
NAN_BOXED(4608282863990007844,64,FLEN)
NAN_BOXED(4598206467857332994,64,FLEN)
NAN_BOXED(4596456734123414204,64,FLEN)
NAN_BOXED(4608282863990007844,64,FLEN)
NAN_BOXED(4598206467857332994,64,FLEN)
NAN_BOXED(4596456734123414204,64,FLEN)
NAN_BOXED(4608282863990007844,64,FLEN)
NAN_BOXED(4598206467857332994,64,FLEN)
NAN_BOXED(4596576280213695720,64,FLEN)
NAN_BOXED(4609271588056459580,64,FLEN)
NAN_BOXED(4599094054142273712,64,FLEN)
NAN_BOXED(4596576280213695720,64,FLEN)
NAN_BOXED(4609271588056459580,64,FLEN)
NAN_BOXED(4599094054142273712,64,FLEN)
NAN_BOXED(4596576280213695720,64,FLEN)
NAN_BOXED(4609271588056459580,64,FLEN)
NAN_BOXED(4599094054142273712,64,FLEN)
NAN_BOXED(4596576280213695720,64,FLEN)
NAN_BOXED(4609271588056459580,64,FLEN)
NAN_BOXED(4599094054142273712,64,FLEN)
NAN_BOXED(4596576280213695720,64,FLEN)
NAN_BOXED(4609271588056459580,64,FLEN)
NAN_BOXED(4599094054142273712,64,FLEN)
NAN_BOXED(4596793044784109548,64,FLEN)
NAN_BOXED(4593986463336996706,64,FLEN)
NAN_BOXED(4583815305894191360,64,FLEN)
NAN_BOXED(4596793044784109548,64,FLEN)
NAN_BOXED(4593986463336996706,64,FLEN)
NAN_BOXED(4583815305894191360,64,FLEN)
NAN_BOXED(4596793044784109548,64,FLEN)
NAN_BOXED(4593986463336996706,64,FLEN)
NAN_BOXED(4583815305894191360,64,FLEN)
NAN_BOXED(4596793044784109548,64,FLEN)
NAN_BOXED(4593986463336996706,64,FLEN)
NAN_BOXED(4583815305894191360,64,FLEN)
NAN_BOXED(4596793044784109548,64,FLEN)
NAN_BOXED(4593986463336996706,64,FLEN)
NAN_BOXED(4583815305894191360,64,FLEN)
NAN_BOXED(4596952545670912732,64,FLEN)
NAN_BOXED(4602257071550311500,64,FLEN)
NAN_BOXED(4592084448159424072,64,FLEN)
NAN_BOXED(4596952545670912732,64,FLEN)
NAN_BOXED(4602257071550311500,64,FLEN)
NAN_BOXED(4592084448159424072,64,FLEN)
NAN_BOXED(4596952545670912732,64,FLEN)
NAN_BOXED(4602257071550311500,64,FLEN)
NAN_BOXED(4592084448159424072,64,FLEN)
NAN_BOXED(4596952545670912732,64,FLEN)
NAN_BOXED(4602257071550311500,64,FLEN)
NAN_BOXED(4592084448159424072,64,FLEN)
NAN_BOXED(4596952545670912732,64,FLEN)
NAN_BOXED(4602257071550311500,64,FLEN)
NAN_BOXED(4592084448159424072,64,FLEN)
NAN_BOXED(4597373178936795816,64,FLEN)
NAN_BOXED(4612049964640908838,64,FLEN)
NAN_BOXED(4602539856250401176,64,FLEN)
NAN_BOXED(4597373178936795816,64,FLEN)
NAN_BOXED(4612049964640908838,64,FLEN)
NAN_BOXED(4602539856250401176,64,FLEN)
NAN_BOXED(4597373178936795816,64,FLEN)
NAN_BOXED(4612049964640908838,64,FLEN)
NAN_BOXED(4602539856250401176,64,FLEN)
NAN_BOXED(4597373178936795816,64,FLEN)
NAN_BOXED(4612049964640908838,64,FLEN)
NAN_BOXED(4602539856250401176,64,FLEN)
NAN_BOXED(4597373178936795816,64,FLEN)
NAN_BOXED(4612049964640908838,64,FLEN)
NAN_BOXED(4602539856250401176,64,FLEN)
NAN_BOXED(4597563807047386552,64,FLEN)
NAN_BOXED(4610081284362214007,64,FLEN)
NAN_BOXED(4600571602637163088,64,FLEN)
NAN_BOXED(4597563807047386552,64,FLEN)
NAN_BOXED(4610081284362214007,64,FLEN)
NAN_BOXED(4600571602637163088,64,FLEN)
NAN_BOXED(4597563807047386552,64,FLEN)
NAN_BOXED(4610081284362214007,64,FLEN)
NAN_BOXED(4600571602637163088,64,FLEN)
NAN_BOXED(4597563807047386552,64,FLEN)
NAN_BOXED(4610081284362214007,64,FLEN)
NAN_BOXED(4600571602637163088,64,FLEN)
NAN_BOXED(4597563807047386552,64,FLEN)
NAN_BOXED(4610081284362214007,64,FLEN)
NAN_BOXED(4600571602637163088,64,FLEN)
NAN_BOXED(4597650248764104492,64,FLEN)
NAN_BOXED(4610846543299779964,64,FLEN)
NAN_BOXED(4601363300782960486,64,FLEN)
NAN_BOXED(4597650248764104492,64,FLEN)
NAN_BOXED(4610846543299779964,64,FLEN)
NAN_BOXED(4601363300782960486,64,FLEN)
NAN_BOXED(4597650248764104492,64,FLEN)
NAN_BOXED(4610846543299779964,64,FLEN)
NAN_BOXED(4601363300782960486,64,FLEN)
NAN_BOXED(4597650248764104492,64,FLEN)
NAN_BOXED(4610846543299779964,64,FLEN)
NAN_BOXED(4601363300782960486,64,FLEN)
NAN_BOXED(4597650248764104492,64,FLEN)
NAN_BOXED(4610846543299779964,64,FLEN)
NAN_BOXED(4601363300782960486,64,FLEN)
NAN_BOXED(4597833008843898892,64,FLEN)
NAN_BOXED(4613830462289545330,64,FLEN)
NAN_BOXED(4604570683785584093,64,FLEN)
NAN_BOXED(4597833008843898892,64,FLEN)
NAN_BOXED(4613830462289545330,64,FLEN)
NAN_BOXED(4604570683785584093,64,FLEN)
NAN_BOXED(4597833008843898892,64,FLEN)
NAN_BOXED(4613830462289545330,64,FLEN)
NAN_BOXED(4604570683785584093,64,FLEN)
NAN_BOXED(4597833008843898892,64,FLEN)
NAN_BOXED(4613830462289545330,64,FLEN)
NAN_BOXED(4604570683785584093,64,FLEN)
NAN_BOXED(4597833008843898892,64,FLEN)
NAN_BOXED(4613830462289545330,64,FLEN)
NAN_BOXED(4604570683785584093,64,FLEN)
NAN_BOXED(4598079094381897772,64,FLEN)
NAN_BOXED(4609152189233555067,64,FLEN)
NAN_BOXED(4600075905934249646,64,FLEN)
NAN_BOXED(4598079094381897772,64,FLEN)
NAN_BOXED(4609152189233555067,64,FLEN)
NAN_BOXED(4600075905934249646,64,FLEN)
NAN_BOXED(4598079094381897772,64,FLEN)
NAN_BOXED(4609152189233555067,64,FLEN)
NAN_BOXED(4600075905934249646,64,FLEN)
NAN_BOXED(4598079094381897772,64,FLEN)
NAN_BOXED(4609152189233555067,64,FLEN)
NAN_BOXED(4600075905934249646,64,FLEN)
NAN_BOXED(4598079094381897772,64,FLEN)
NAN_BOXED(4609152189233555067,64,FLEN)
NAN_BOXED(4600075905934249646,64,FLEN)
NAN_BOXED(4598155741290042968,64,FLEN)
NAN_BOXED(4608861333729665224,64,FLEN)
NAN_BOXED(4599840764658944784,64,FLEN)
NAN_BOXED(4598155741290042968,64,FLEN)
NAN_BOXED(4608861333729665224,64,FLEN)
NAN_BOXED(4599840764658944784,64,FLEN)
NAN_BOXED(4598155741290042968,64,FLEN)
NAN_BOXED(4608861333729665224,64,FLEN)
NAN_BOXED(4599840764658944784,64,FLEN)
NAN_BOXED(4598155741290042968,64,FLEN)
NAN_BOXED(4608861333729665224,64,FLEN)
NAN_BOXED(4599840764658944784,64,FLEN)
NAN_BOXED(4598155741290042968,64,FLEN)
NAN_BOXED(4608861333729665224,64,FLEN)
NAN_BOXED(4599840764658944784,64,FLEN)
NAN_BOXED(4598170158946555512,64,FLEN)
NAN_BOXED(4611886524825648804,64,FLEN)
NAN_BOXED(4602876682619168538,64,FLEN)
NAN_BOXED(4598170158946555512,64,FLEN)
NAN_BOXED(4611886524825648804,64,FLEN)
NAN_BOXED(4602876682619168538,64,FLEN)
NAN_BOXED(4598170158946555512,64,FLEN)
NAN_BOXED(4611886524825648804,64,FLEN)
NAN_BOXED(4602876682619168538,64,FLEN)
NAN_BOXED(4598170158946555512,64,FLEN)
NAN_BOXED(4611886524825648804,64,FLEN)
NAN_BOXED(4602876682619168538,64,FLEN)
NAN_BOXED(4598170158946555512,64,FLEN)
NAN_BOXED(4611886524825648804,64,FLEN)
NAN_BOXED(4602876682619168538,64,FLEN)
NAN_BOXED(4598297406574229442,64,FLEN)
NAN_BOXED(4613282179800410796,64,FLEN)
NAN_BOXED(4604440472981860623,64,FLEN)
NAN_BOXED(4598297406574229442,64,FLEN)
NAN_BOXED(4613282179800410796,64,FLEN)
NAN_BOXED(4604440472981860623,64,FLEN)
NAN_BOXED(4598297406574229442,64,FLEN)
NAN_BOXED(4613282179800410796,64,FLEN)
NAN_BOXED(4604440472981860623,64,FLEN)
NAN_BOXED(4598297406574229442,64,FLEN)
NAN_BOXED(4613282179800410796,64,FLEN)
NAN_BOXED(4604440472981860623,64,FLEN)
NAN_BOXED(4598297406574229442,64,FLEN)
NAN_BOXED(4613282179800410796,64,FLEN)
NAN_BOXED(4604440472981860623,64,FLEN)
NAN_BOXED(4598358451352825936,64,FLEN)
NAN_BOXED(4591384877565247761,64,FLEN)
NAN_BOXED(4582651104362468288,64,FLEN)
NAN_BOXED(4598358451352825936,64,FLEN)
NAN_BOXED(4591384877565247761,64,FLEN)
NAN_BOXED(4582651104362468288,64,FLEN)
NAN_BOXED(4598358451352825936,64,FLEN)
NAN_BOXED(4591384877565247761,64,FLEN)
NAN_BOXED(4582651104362468288,64,FLEN)
NAN_BOXED(4598358451352825936,64,FLEN)
NAN_BOXED(4591384877565247761,64,FLEN)
NAN_BOXED(4582651104362468288,64,FLEN)
NAN_BOXED(4598358451352825936,64,FLEN)
NAN_BOXED(4591384877565247761,64,FLEN)
NAN_BOXED(4582651104362468288,64,FLEN)
NAN_BOXED(4598413219859892664,64,FLEN)
NAN_BOXED(4613579971223125810,64,FLEN)
NAN_BOXED(4604910861411376167,64,FLEN)
NAN_BOXED(4598413219859892664,64,FLEN)
NAN_BOXED(4613579971223125810,64,FLEN)
NAN_BOXED(4604910861411376167,64,FLEN)
NAN_BOXED(4598413219859892664,64,FLEN)
NAN_BOXED(4613579971223125810,64,FLEN)
NAN_BOXED(4604910861411376167,64,FLEN)
NAN_BOXED(4598413219859892664,64,FLEN)
NAN_BOXED(4613579971223125810,64,FLEN)
NAN_BOXED(4604910861411376167,64,FLEN)
NAN_BOXED(4598413219859892664,64,FLEN)
NAN_BOXED(4613579971223125810,64,FLEN)
NAN_BOXED(4604910861411376167,64,FLEN)
NAN_BOXED(4598466113828044334,64,FLEN)
NAN_BOXED(4604530264208964993,64,FLEN)
NAN_BOXED(4595933546860334544,64,FLEN)
NAN_BOXED(4598466113828044334,64,FLEN)
NAN_BOXED(4604530264208964993,64,FLEN)
NAN_BOXED(4595933546860334544,64,FLEN)
NAN_BOXED(4598466113828044334,64,FLEN)
NAN_BOXED(4604530264208964993,64,FLEN)
NAN_BOXED(4595933546860334544,64,FLEN)
NAN_BOXED(4598466113828044334,64,FLEN)
NAN_BOXED(4604530264208964993,64,FLEN)
NAN_BOXED(4595933546860334544,64,FLEN)
NAN_BOXED(4598466113828044334,64,FLEN)
NAN_BOXED(4604530264208964993,64,FLEN)
NAN_BOXED(4595933546860334544,64,FLEN)
NAN_BOXED(4598480016260754352,64,FLEN)
NAN_BOXED(4610253740063796396,64,FLEN)
NAN_BOXED(4601759199837090630,64,FLEN)
NAN_BOXED(4598480016260754352,64,FLEN)
NAN_BOXED(4610253740063796396,64,FLEN)
NAN_BOXED(4601759199837090630,64,FLEN)
NAN_BOXED(4598480016260754352,64,FLEN)
NAN_BOXED(4610253740063796396,64,FLEN)
NAN_BOXED(4601759199837090630,64,FLEN)
NAN_BOXED(4598480016260754352,64,FLEN)
NAN_BOXED(4610253740063796396,64,FLEN)
NAN_BOXED(4601759199837090630,64,FLEN)
NAN_BOXED(4598480016260754352,64,FLEN)
NAN_BOXED(4610253740063796396,64,FLEN)
NAN_BOXED(4601759199837090630,64,FLEN)
NAN_BOXED(4598493129211281766,64,FLEN)
NAN_BOXED(4611802496519825052,64,FLEN)
NAN_BOXED(4603121429134332920,64,FLEN)
NAN_BOXED(4598493129211281766,64,FLEN)
NAN_BOXED(4611802496519825052,64,FLEN)
NAN_BOXED(4603121429134332920,64,FLEN)
NAN_BOXED(4598493129211281766,64,FLEN)
NAN_BOXED(4611802496519825052,64,FLEN)
NAN_BOXED(4603121429134332920,64,FLEN)
NAN_BOXED(4598493129211281766,64,FLEN)
NAN_BOXED(4611802496519825052,64,FLEN)
NAN_BOXED(4603121429134332920,64,FLEN)
NAN_BOXED(4598493129211281766,64,FLEN)
NAN_BOXED(4611802496519825052,64,FLEN)
NAN_BOXED(4603121429134332920,64,FLEN)
NAN_BOXED(4598545500292565408,64,FLEN)
NAN_BOXED(4613108841611245295,64,FLEN)
NAN_BOXED(4604588905978686733,64,FLEN)
NAN_BOXED(4598545500292565408,64,FLEN)
NAN_BOXED(4613108841611245295,64,FLEN)
NAN_BOXED(4604588905978686733,64,FLEN)
NAN_BOXED(4598545500292565408,64,FLEN)
NAN_BOXED(4613108841611245295,64,FLEN)
NAN_BOXED(4604588905978686733,64,FLEN)
NAN_BOXED(4598545500292565408,64,FLEN)
NAN_BOXED(4613108841611245295,64,FLEN)
NAN_BOXED(4604588905978686733,64,FLEN)
NAN_BOXED(4598545500292565408,64,FLEN)
NAN_BOXED(4613108841611245295,64,FLEN)
NAN_BOXED(4604588905978686733,64,FLEN)
NAN_BOXED(4598547486405218010,64,FLEN)
NAN_BOXED(4613794619402093702,64,FLEN)
NAN_BOXED(4605333983643023849,64,FLEN)
NAN_BOXED(4598547486405218010,64,FLEN)
NAN_BOXED(4613794619402093702,64,FLEN)
NAN_BOXED(4605333983643023849,64,FLEN)
NAN_BOXED(4598547486405218010,64,FLEN)
NAN_BOXED(4613794619402093702,64,FLEN)
NAN_BOXED(4605333983643023849,64,FLEN)
NAN_BOXED(4598547486405218010,64,FLEN)
NAN_BOXED(4613794619402093702,64,FLEN)
NAN_BOXED(4605333983643023849,64,FLEN)
NAN_BOXED(4598547486405218010,64,FLEN)
NAN_BOXED(4613794619402093702,64,FLEN)
NAN_BOXED(4605333983643023849,64,FLEN)
NAN_BOXED(4598622097857154294,64,FLEN)
NAN_BOXED(4609947404675163277,64,FLEN)
NAN_BOXED(4601661444759586418,64,FLEN)
NAN_BOXED(4598622097857154294,64,FLEN)
NAN_BOXED(4609947404675163277,64,FLEN)
NAN_BOXED(4601661444759586418,64,FLEN)
NAN_BOXED(4598622097857154294,64,FLEN)
NAN_BOXED(4609947404675163277,64,FLEN)
NAN_BOXED(4601661444759586418,64,FLEN)
NAN_BOXED(4598622097857154294,64,FLEN)
NAN_BOXED(4609947404675163277,64,FLEN)
NAN_BOXED(4601661444759586418,64,FLEN)
NAN_BOXED(4598622097857154294,64,FLEN)
NAN_BOXED(4609947404675163277,64,FLEN)
NAN_BOXED(4601661444759586418,64,FLEN)
NAN_BOXED(4598629206425512366,64,FLEN)
NAN_BOXED(4613973757977721231,64,FLEN)
NAN_BOXED(4605651161960615310,64,FLEN)
NAN_BOXED(4598629206425512366,64,FLEN)
NAN_BOXED(4613973757977721231,64,FLEN)
NAN_BOXED(4605651161960615310,64,FLEN)
NAN_BOXED(4598629206425512366,64,FLEN)
NAN_BOXED(4613973757977721231,64,FLEN)
NAN_BOXED(4605651161960615310,64,FLEN)
NAN_BOXED(4598629206425512366,64,FLEN)
NAN_BOXED(4613973757977721231,64,FLEN)
NAN_BOXED(4605651161960615310,64,FLEN)
NAN_BOXED(4598629206425512366,64,FLEN)
NAN_BOXED(4613973757977721231,64,FLEN)
NAN_BOXED(4605651161960615310,64,FLEN)
NAN_BOXED(4598640787743105858,64,FLEN)
NAN_BOXED(4608503834156452834,64,FLEN)
NAN_BOXED(4600098806931360808,64,FLEN)
NAN_BOXED(4598640787743105858,64,FLEN)
NAN_BOXED(4608503834156452834,64,FLEN)
NAN_BOXED(4600098806931360808,64,FLEN)
NAN_BOXED(4598640787743105858,64,FLEN)
NAN_BOXED(4608503834156452834,64,FLEN)
NAN_BOXED(4600098806931360808,64,FLEN)
NAN_BOXED(4598640787743105858,64,FLEN)
NAN_BOXED(4608503834156452834,64,FLEN)
NAN_BOXED(4600098806931360808,64,FLEN)
NAN_BOXED(4598640787743105858,64,FLEN)
NAN_BOXED(4608503834156452834,64,FLEN)
NAN_BOXED(4600098806931360808,64,FLEN)
NAN_BOXED(4598676905499199358,64,FLEN)
NAN_BOXED(4615128917977183401,64,FLEN)
NAN_BOXED(4607006932184983720,64,FLEN)
NAN_BOXED(4598676905499199358,64,FLEN)
NAN_BOXED(4615128917977183401,64,FLEN)
NAN_BOXED(4607006932184983720,64,FLEN)
NAN_BOXED(4598676905499199358,64,FLEN)
NAN_BOXED(4615128917977183401,64,FLEN)
NAN_BOXED(4607006932184983720,64,FLEN)
NAN_BOXED(4598676905499199358,64,FLEN)
NAN_BOXED(4615128917977183401,64,FLEN)
NAN_BOXED(4607006932184983720,64,FLEN)
NAN_BOXED(4598676905499199358,64,FLEN)
NAN_BOXED(4615128917977183401,64,FLEN)
NAN_BOXED(4607006932184983720,64,FLEN)
NAN_BOXED(4598723351179623040,64,FLEN)
NAN_BOXED(4614815016580347400,64,FLEN)
NAN_BOXED(4606736778299449769,64,FLEN)
NAN_BOXED(4598723351179623040,64,FLEN)
NAN_BOXED(4614815016580347400,64,FLEN)
NAN_BOXED(4606736778299449769,64,FLEN)
NAN_BOXED(4598723351179623040,64,FLEN)
NAN_BOXED(4614815016580347400,64,FLEN)
NAN_BOXED(4606736778299449769,64,FLEN)
NAN_BOXED(4598723351179623040,64,FLEN)
NAN_BOXED(4614815016580347400,64,FLEN)
NAN_BOXED(4606736778299449769,64,FLEN)
NAN_BOXED(4598723351179623040,64,FLEN)
NAN_BOXED(4614815016580347400,64,FLEN)
NAN_BOXED(4606736778299449769,64,FLEN)
NAN_BOXED(4598787827268470954,64,FLEN)
NAN_BOXED(4601340838649437733,64,FLEN)
NAN_BOXED(4593376854381493368,64,FLEN)
NAN_BOXED(4598787827268470954,64,FLEN)
NAN_BOXED(4601340838649437733,64,FLEN)
NAN_BOXED(4593376854381493368,64,FLEN)
NAN_BOXED(4598787827268470954,64,FLEN)
NAN_BOXED(4601340838649437733,64,FLEN)
NAN_BOXED(4593376854381493368,64,FLEN)
NAN_BOXED(4598787827268470954,64,FLEN)
NAN_BOXED(4601340838649437733,64,FLEN)
NAN_BOXED(4593376854381493368,64,FLEN)
NAN_BOXED(4598787827268470954,64,FLEN)
NAN_BOXED(4601340838649437733,64,FLEN)
NAN_BOXED(4593376854381493368,64,FLEN)
NAN_BOXED(4598954785405359040,64,FLEN)
NAN_BOXED(4608268850108016643,64,FLEN)
NAN_BOXED(4600229276227328796,64,FLEN)
NAN_BOXED(4598954785405359040,64,FLEN)
NAN_BOXED(4608268850108016643,64,FLEN)
NAN_BOXED(4600229276227328796,64,FLEN)
NAN_BOXED(4598954785405359040,64,FLEN)
NAN_BOXED(4608268850108016643,64,FLEN)
NAN_BOXED(4600229276227328796,64,FLEN)
NAN_BOXED(4598954785405359040,64,FLEN)
NAN_BOXED(4608268850108016643,64,FLEN)
NAN_BOXED(4600229276227328796,64,FLEN)
NAN_BOXED(4598954785405359040,64,FLEN)
NAN_BOXED(4608268850108016643,64,FLEN)
NAN_BOXED(4600229276227328796,64,FLEN)
NAN_BOXED(4599090028852836214,64,FLEN)
NAN_BOXED(4601066138744715686,64,FLEN)
NAN_BOXED(4593560976795107288,64,FLEN)
NAN_BOXED(4599090028852836214,64,FLEN)
NAN_BOXED(4601066138744715686,64,FLEN)
NAN_BOXED(4593560976795107288,64,FLEN)
NAN_BOXED(4599090028852836214,64,FLEN)
NAN_BOXED(4601066138744715686,64,FLEN)
NAN_BOXED(4593560976795107288,64,FLEN)
NAN_BOXED(4599090028852836214,64,FLEN)
NAN_BOXED(4601066138744715686,64,FLEN)
NAN_BOXED(4593560976795107288,64,FLEN)
NAN_BOXED(4599090028852836214,64,FLEN)
NAN_BOXED(4601066138744715686,64,FLEN)
NAN_BOXED(4593560976795107288,64,FLEN)
NAN_BOXED(4599160690617537966,64,FLEN)
NAN_BOXED(4608674119106158120,64,FLEN)
NAN_BOXED(4600978802599186270,64,FLEN)
NAN_BOXED(4599160690617537966,64,FLEN)
NAN_BOXED(4608674119106158120,64,FLEN)
NAN_BOXED(4600978802599186270,64,FLEN)
NAN_BOXED(4599160690617537966,64,FLEN)
NAN_BOXED(4608674119106158120,64,FLEN)
NAN_BOXED(4600978802599186270,64,FLEN)
NAN_BOXED(4599160690617537966,64,FLEN)
NAN_BOXED(4608674119106158120,64,FLEN)
NAN_BOXED(4600978802599186270,64,FLEN)
NAN_BOXED(4599160690617537966,64,FLEN)
NAN_BOXED(4608674119106158120,64,FLEN)
NAN_BOXED(4600978802599186270,64,FLEN)
NAN_BOXED(4599288409008669422,64,FLEN)
NAN_BOXED(4610979615219973929,64,FLEN)
NAN_BOXED(4603351503467133531,64,FLEN)
NAN_BOXED(4599288409008669422,64,FLEN)
NAN_BOXED(4610979615219973929,64,FLEN)
NAN_BOXED(4603351503467133531,64,FLEN)
NAN_BOXED(4599288409008669422,64,FLEN)
NAN_BOXED(4610979615219973929,64,FLEN)
NAN_BOXED(4603351503467133531,64,FLEN)
NAN_BOXED(4599288409008669422,64,FLEN)
NAN_BOXED(4610979615219973929,64,FLEN)
NAN_BOXED(4603351503467133531,64,FLEN)
NAN_BOXED(4599288409008669422,64,FLEN)
NAN_BOXED(4610979615219973929,64,FLEN)
NAN_BOXED(4603351503467133531,64,FLEN)
NAN_BOXED(4599296764729052960,64,FLEN)
NAN_BOXED(4588264961453756993,64,FLEN)
NAN_BOXED(4580718391049687744,64,FLEN)
NAN_BOXED(4599296764729052960,64,FLEN)
NAN_BOXED(4588264961453756993,64,FLEN)
NAN_BOXED(4580718391049687744,64,FLEN)
NAN_BOXED(4599296764729052960,64,FLEN)
NAN_BOXED(4588264961453756993,64,FLEN)
NAN_BOXED(4580718391049687744,64,FLEN)
NAN_BOXED(4599296764729052960,64,FLEN)
NAN_BOXED(4588264961453756993,64,FLEN)
NAN_BOXED(4580718391049687744,64,FLEN)
NAN_BOXED(4599296764729052960,64,FLEN)
NAN_BOXED(4588264961453756993,64,FLEN)
NAN_BOXED(4580718391049687744,64,FLEN)
NAN_BOXED(4599384069100925936,64,FLEN)
NAN_BOXED(4606886138087303942,64,FLEN)
NAN_BOXED(4599196165129067672,64,FLEN)
NAN_BOXED(4599384069100925936,64,FLEN)
NAN_BOXED(4606886138087303942,64,FLEN)
NAN_BOXED(4599196165129067672,64,FLEN)
NAN_BOXED(4599384069100925936,64,FLEN)
NAN_BOXED(4606886138087303942,64,FLEN)
NAN_BOXED(4599196165129067672,64,FLEN)
NAN_BOXED(4599384069100925936,64,FLEN)
NAN_BOXED(4606886138087303942,64,FLEN)
NAN_BOXED(4599196165129067672,64,FLEN)
NAN_BOXED(4599384069100925936,64,FLEN)
NAN_BOXED(4606886138087303942,64,FLEN)
NAN_BOXED(4599196165129067672,64,FLEN)
NAN_BOXED(4599429022164650358,64,FLEN)
NAN_BOXED(4610744823123133336,64,FLEN)
NAN_BOXED(4603331009703058980,64,FLEN)
NAN_BOXED(4599429022164650358,64,FLEN)
NAN_BOXED(4610744823123133336,64,FLEN)
NAN_BOXED(4603331009703058980,64,FLEN)
NAN_BOXED(4599429022164650358,64,FLEN)
NAN_BOXED(4610744823123133336,64,FLEN)
NAN_BOXED(4603331009703058980,64,FLEN)
NAN_BOXED(4599429022164650358,64,FLEN)
NAN_BOXED(4610744823123133336,64,FLEN)
NAN_BOXED(4603331009703058980,64,FLEN)
NAN_BOXED(4599429022164650358,64,FLEN)
NAN_BOXED(4610744823123133336,64,FLEN)
NAN_BOXED(4603331009703058980,64,FLEN)
NAN_BOXED(4599504680669998012,64,FLEN)
NAN_BOXED(4613761230317013451,64,FLEN)
NAN_BOXED(4606696094052410775,64,FLEN)
NAN_BOXED(4599504680669998012,64,FLEN)
NAN_BOXED(4613761230317013451,64,FLEN)
NAN_BOXED(4606696094052410775,64,FLEN)
NAN_BOXED(4599504680669998012,64,FLEN)
NAN_BOXED(4613761230317013451,64,FLEN)
NAN_BOXED(4606696094052410775,64,FLEN)
NAN_BOXED(4599504680669998012,64,FLEN)
NAN_BOXED(4613761230317013451,64,FLEN)
NAN_BOXED(4606696094052410775,64,FLEN)
NAN_BOXED(4599504680669998012,64,FLEN)
NAN_BOXED(4613761230317013451,64,FLEN)
NAN_BOXED(4606696094052410775,64,FLEN)
NAN_BOXED(4599513551421654296,64,FLEN)
NAN_BOXED(4612106522878623203,64,FLEN)
NAN_BOXED(4604562616544271806,64,FLEN)
NAN_BOXED(4599513551421654296,64,FLEN)
NAN_BOXED(4612106522878623203,64,FLEN)
NAN_BOXED(4604562616544271806,64,FLEN)
NAN_BOXED(4599513551421654296,64,FLEN)
NAN_BOXED(4612106522878623203,64,FLEN)
NAN_BOXED(4604562616544271806,64,FLEN)
NAN_BOXED(4599513551421654296,64,FLEN)
NAN_BOXED(4612106522878623203,64,FLEN)
NAN_BOXED(4604562616544271806,64,FLEN)
NAN_BOXED(4599513551421654296,64,FLEN)
NAN_BOXED(4612106522878623203,64,FLEN)
NAN_BOXED(4604562616544271806,64,FLEN)
NAN_BOXED(4599580314190491482,64,FLEN)
NAN_BOXED(4606628154997997450,64,FLEN)
NAN_BOXED(4599216718886349296,64,FLEN)
NAN_BOXED(4599580314190491482,64,FLEN)
NAN_BOXED(4606628154997997450,64,FLEN)
NAN_BOXED(4599216718886349296,64,FLEN)
NAN_BOXED(4599580314190491482,64,FLEN)
NAN_BOXED(4606628154997997450,64,FLEN)
NAN_BOXED(4599216718886349296,64,FLEN)
NAN_BOXED(4599580314190491482,64,FLEN)
NAN_BOXED(4606628154997997450,64,FLEN)
NAN_BOXED(4599216718886349296,64,FLEN)
NAN_BOXED(4599580314190491482,64,FLEN)
NAN_BOXED(4606628154997997450,64,FLEN)
NAN_BOXED(4599216718886349296,64,FLEN)
NAN_BOXED(4599791894444248704,64,FLEN)
NAN_BOXED(4612862703541564661,64,FLEN)
NAN_BOXED(4605894578476470605,64,FLEN)
NAN_BOXED(4599791894444248704,64,FLEN)
NAN_BOXED(4612862703541564661,64,FLEN)
NAN_BOXED(4605894578476470605,64,FLEN)
NAN_BOXED(4599791894444248704,64,FLEN)
NAN_BOXED(4612862703541564661,64,FLEN)
NAN_BOXED(4605894578476470605,64,FLEN)
NAN_BOXED(4599791894444248704,64,FLEN)
NAN_BOXED(4612862703541564661,64,FLEN)
NAN_BOXED(4605894578476470605,64,FLEN)
NAN_BOXED(4599791894444248704,64,FLEN)
NAN_BOXED(4612862703541564661,64,FLEN)
NAN_BOXED(4605894578476470605,64,FLEN)
NAN_BOXED(4599809134689961390,64,FLEN)
NAN_BOXED(4613355193914314332,64,FLEN)
NAN_BOXED(4606587490080677864,64,FLEN)
NAN_BOXED(4599809134689961390,64,FLEN)
NAN_BOXED(4613355193914314332,64,FLEN)
NAN_BOXED(4606587490080677864,64,FLEN)
NAN_BOXED(4599809134689961390,64,FLEN)
NAN_BOXED(4613355193914314332,64,FLEN)
NAN_BOXED(4606587490080677864,64,FLEN)
NAN_BOXED(4599809134689961390,64,FLEN)
NAN_BOXED(4613355193914314332,64,FLEN)
NAN_BOXED(4606587490080677864,64,FLEN)
NAN_BOXED(4599809134689961390,64,FLEN)
NAN_BOXED(4613355193914314332,64,FLEN)
NAN_BOXED(4606587490080677864,64,FLEN)
NAN_BOXED(4599923011745708368,64,FLEN)
NAN_BOXED(4603375607229235049,64,FLEN)
NAN_BOXED(4596386615138826772,64,FLEN)
NAN_BOXED(4599923011745708368,64,FLEN)
NAN_BOXED(4603375607229235049,64,FLEN)
NAN_BOXED(4596386615138826772,64,FLEN)
NAN_BOXED(4599923011745708368,64,FLEN)
NAN_BOXED(4603375607229235049,64,FLEN)
NAN_BOXED(4596386615138826772,64,FLEN)
NAN_BOXED(4599923011745708368,64,FLEN)
NAN_BOXED(4603375607229235049,64,FLEN)
NAN_BOXED(4596386615138826772,64,FLEN)
NAN_BOXED(4599923011745708368,64,FLEN)
NAN_BOXED(4603375607229235049,64,FLEN)
NAN_BOXED(4596386615138826772,64,FLEN)
NAN_BOXED(4599959825426488322,64,FLEN)
NAN_BOXED(4613166074118411811,64,FLEN)
NAN_BOXED(4606529970732729312,64,FLEN)
NAN_BOXED(4599959825426488322,64,FLEN)
NAN_BOXED(4613166074118411811,64,FLEN)
NAN_BOXED(4606529970732729312,64,FLEN)
NAN_BOXED(4599959825426488322,64,FLEN)
NAN_BOXED(4613166074118411811,64,FLEN)
NAN_BOXED(4606529970732729312,64,FLEN)
NAN_BOXED(4599959825426488322,64,FLEN)
NAN_BOXED(4613166074118411811,64,FLEN)
NAN_BOXED(4606529970732729312,64,FLEN)
NAN_BOXED(4599959825426488322,64,FLEN)
NAN_BOXED(4613166074118411811,64,FLEN)
NAN_BOXED(4606529970732729312,64,FLEN)
NAN_BOXED(4600028381354941884,64,FLEN)
NAN_BOXED(4581296560272026978,64,FLEN)
NAN_BOXED(4574609862011707904,64,FLEN)
NAN_BOXED(4600028381354941884,64,FLEN)
NAN_BOXED(4581296560272026978,64,FLEN)
NAN_BOXED(4574609862011707904,64,FLEN)
NAN_BOXED(4600028381354941884,64,FLEN)
NAN_BOXED(4581296560272026978,64,FLEN)
NAN_BOXED(4574609862011707904,64,FLEN)
NAN_BOXED(4600028381354941884,64,FLEN)
NAN_BOXED(4581296560272026978,64,FLEN)
NAN_BOXED(4574609862011707904,64,FLEN)
NAN_BOXED(4600028381354941884,64,FLEN)
NAN_BOXED(4581296560272026978,64,FLEN)
NAN_BOXED(4574609862011707904,64,FLEN)
NAN_BOXED(4600107030041716446,64,FLEN)
NAN_BOXED(4612997462151558234,64,FLEN)
NAN_BOXED(4606484614684993245,64,FLEN)
NAN_BOXED(4600107030041716446,64,FLEN)
NAN_BOXED(4612997462151558234,64,FLEN)
NAN_BOXED(4606484614684993245,64,FLEN)
NAN_BOXED(4600107030041716446,64,FLEN)
NAN_BOXED(4612997462151558234,64,FLEN)
NAN_BOXED(4606484614684993245,64,FLEN)
NAN_BOXED(4600107030041716446,64,FLEN)
NAN_BOXED(4612997462151558234,64,FLEN)
NAN_BOXED(4606484614684993245,64,FLEN)
NAN_BOXED(4600107030041716446,64,FLEN)
NAN_BOXED(4612997462151558234,64,FLEN)
NAN_BOXED(4606484614684993245,64,FLEN)
NAN_BOXED(4600176376585076090,64,FLEN)
NAN_BOXED(4610506500211625895,64,FLEN)
NAN_BOXED(4603828159930710825,64,FLEN)
NAN_BOXED(4600176376585076090,64,FLEN)
NAN_BOXED(4610506500211625895,64,FLEN)
NAN_BOXED(4603828159930710825,64,FLEN)
NAN_BOXED(4600176376585076090,64,FLEN)
NAN_BOXED(4610506500211625895,64,FLEN)
NAN_BOXED(4603828159930710825,64,FLEN)
NAN_BOXED(4600176376585076090,64,FLEN)
NAN_BOXED(4610506500211625895,64,FLEN)
NAN_BOXED(4603828159930710825,64,FLEN)
NAN_BOXED(4600176376585076090,64,FLEN)
NAN_BOXED(4610506500211625895,64,FLEN)
NAN_BOXED(4603828159930710825,64,FLEN)
NAN_BOXED(4600256972330802676,64,FLEN)
NAN_BOXED(4603062976381521445,64,FLEN)
NAN_BOXED(4596315103499175820,64,FLEN)
NAN_BOXED(4600256972330802676,64,FLEN)
NAN_BOXED(4603062976381521445,64,FLEN)
NAN_BOXED(4596315103499175820,64,FLEN)
NAN_BOXED(4600256972330802676,64,FLEN)
NAN_BOXED(4603062976381521445,64,FLEN)
NAN_BOXED(4596315103499175820,64,FLEN)
NAN_BOXED(4600256972330802676,64,FLEN)
NAN_BOXED(4603062976381521445,64,FLEN)
NAN_BOXED(4596315103499175820,64,FLEN)
NAN_BOXED(4600256972330802676,64,FLEN)
NAN_BOXED(4603062976381521445,64,FLEN)
NAN_BOXED(4596315103499175820,64,FLEN)
NAN_BOXED(4600320809998530294,64,FLEN)
NAN_BOXED(4597618840460324073,64,FLEN)
NAN_BOXED(4590902887033998520,64,FLEN)
NAN_BOXED(4600320809998530294,64,FLEN)
NAN_BOXED(4597618840460324073,64,FLEN)
NAN_BOXED(4590902887033998520,64,FLEN)
NAN_BOXED(4600320809998530294,64,FLEN)
NAN_BOXED(4597618840460324073,64,FLEN)
NAN_BOXED(4590902887033998520,64,FLEN)
NAN_BOXED(4600320809998530294,64,FLEN)
NAN_BOXED(4597618840460324073,64,FLEN)
NAN_BOXED(4590902887033998520,64,FLEN)
NAN_BOXED(4600320809998530294,64,FLEN)
NAN_BOXED(4597618840460324073,64,FLEN)
NAN_BOXED(4590902887033998520,64,FLEN)
NAN_BOXED(4600383186320885178,64,FLEN)
NAN_BOXED(4594224788664484427,64,FLEN)
NAN_BOXED(4587696756628288464,64,FLEN)
NAN_BOXED(4600383186320885178,64,FLEN)
NAN_BOXED(4594224788664484427,64,FLEN)
NAN_BOXED(4587696756628288464,64,FLEN)
NAN_BOXED(4600383186320885178,64,FLEN)
NAN_BOXED(4594224788664484427,64,FLEN)
NAN_BOXED(4587696756628288464,64,FLEN)
NAN_BOXED(4600383186320885178,64,FLEN)
NAN_BOXED(4594224788664484427,64,FLEN)
NAN_BOXED(4587696756628288464,64,FLEN)
NAN_BOXED(4600383186320885178,64,FLEN)
NAN_BOXED(4594224788664484427,64,FLEN)
NAN_BOXED(4587696756628288464,64,FLEN)
NAN_BOXED(4600404925438990944,64,FLEN)
NAN_BOXED(4605870578042307370,64,FLEN)
NAN_BOXED(4599424262708339788,64,FLEN)
NAN_BOXED(4600404925438990944,64,FLEN)
NAN_BOXED(4605870578042307370,64,FLEN)
NAN_BOXED(4599424262708339788,64,FLEN)
NAN_BOXED(4600404925438990944,64,FLEN)
NAN_BOXED(4605870578042307370,64,FLEN)
NAN_BOXED(4599424262708339788,64,FLEN)
NAN_BOXED(4600404925438990944,64,FLEN)
NAN_BOXED(4605870578042307370,64,FLEN)
NAN_BOXED(4599424262708339788,64,FLEN)
NAN_BOXED(4600404925438990944,64,FLEN)
NAN_BOXED(4605870578042307370,64,FLEN)
NAN_BOXED(4599424262708339788,64,FLEN)
NAN_BOXED(4600443837647566280,64,FLEN)
NAN_BOXED(4598448754276708398,64,FLEN)
NAN_BOXED(4591847961980877704,64,FLEN)
NAN_BOXED(4600443837647566280,64,FLEN)
NAN_BOXED(4598448754276708398,64,FLEN)
NAN_BOXED(4591847961980877704,64,FLEN)
NAN_BOXED(4600443837647566280,64,FLEN)
NAN_BOXED(4598448754276708398,64,FLEN)
NAN_BOXED(4591847961980877704,64,FLEN)
NAN_BOXED(4600443837647566280,64,FLEN)
NAN_BOXED(4598448754276708398,64,FLEN)
NAN_BOXED(4591847961980877704,64,FLEN)
NAN_BOXED(4600443837647566280,64,FLEN)
NAN_BOXED(4598448754276708398,64,FLEN)
NAN_BOXED(4591847961980877704,64,FLEN)
NAN_BOXED(4600446347477444854,64,FLEN)
NAN_BOXED(4608519642165880185,64,FLEN)
NAN_BOXED(4602457921493685594,64,FLEN)
NAN_BOXED(4600446347477444854,64,FLEN)
NAN_BOXED(4608519642165880185,64,FLEN)
NAN_BOXED(4602457921493685594,64,FLEN)
NAN_BOXED(4600446347477444854,64,FLEN)
NAN_BOXED(4608519642165880185,64,FLEN)
NAN_BOXED(4602457921493685594,64,FLEN)
NAN_BOXED(4600446347477444854,64,FLEN)
NAN_BOXED(4608519642165880185,64,FLEN)
NAN_BOXED(4602457921493685594,64,FLEN)
NAN_BOXED(4600446347477444854,64,FLEN)
NAN_BOXED(4608519642165880185,64,FLEN)
NAN_BOXED(4602457921493685594,64,FLEN)
NAN_BOXED(4600623934969052022,64,FLEN)
NAN_BOXED(4612150389234700854,64,FLEN)
NAN_BOXED(4605844394979253590,64,FLEN)
NAN_BOXED(4600623934969052022,64,FLEN)
NAN_BOXED(4612150389234700854,64,FLEN)
NAN_BOXED(4605844394979253590,64,FLEN)
NAN_BOXED(4600623934969052022,64,FLEN)
NAN_BOXED(4612150389234700854,64,FLEN)
NAN_BOXED(4605844394979253590,64,FLEN)
NAN_BOXED(4600623934969052022,64,FLEN)
NAN_BOXED(4612150389234700854,64,FLEN)
NAN_BOXED(4605844394979253590,64,FLEN)
NAN_BOXED(4600623934969052022,64,FLEN)
NAN_BOXED(4612150389234700854,64,FLEN)
NAN_BOXED(4605844394979253590,64,FLEN)
NAN_BOXED(4600651697020636904,64,FLEN)
NAN_BOXED(4608425789459490856,64,FLEN)
NAN_BOXED(4602578782860517706,64,FLEN)
NAN_BOXED(4600651697020636904,64,FLEN)
NAN_BOXED(4608425789459490856,64,FLEN)
NAN_BOXED(4602578782860517706,64,FLEN)
NAN_BOXED(4600651697020636904,64,FLEN)
NAN_BOXED(4608425789459490856,64,FLEN)
NAN_BOXED(4602578782860517706,64,FLEN)
NAN_BOXED(4600651697020636904,64,FLEN)
NAN_BOXED(4608425789459490856,64,FLEN)
NAN_BOXED(4602578782860517706,64,FLEN)
NAN_BOXED(4600651697020636904,64,FLEN)
NAN_BOXED(4608425789459490856,64,FLEN)
NAN_BOXED(4602578782860517706,64,FLEN)
NAN_BOXED(4601073312859852754,64,FLEN)
NAN_BOXED(4610759821811554493,64,FLEN)
NAN_BOXED(4604815807646485902,64,FLEN)
NAN_BOXED(4601073312859852754,64,FLEN)
NAN_BOXED(4610759821811554493,64,FLEN)
NAN_BOXED(4604815807646485902,64,FLEN)
NAN_BOXED(4601073312859852754,64,FLEN)
NAN_BOXED(4610759821811554493,64,FLEN)
NAN_BOXED(4604815807646485902,64,FLEN)
NAN_BOXED(4601073312859852754,64,FLEN)
NAN_BOXED(4610759821811554493,64,FLEN)
NAN_BOXED(4604815807646485902,64,FLEN)
NAN_BOXED(4601073312859852754,64,FLEN)
NAN_BOXED(4610759821811554493,64,FLEN)
NAN_BOXED(4604815807646485902,64,FLEN)
NAN_BOXED(4601137087785648722,64,FLEN)
NAN_BOXED(4607795267650556773,64,FLEN)
NAN_BOXED(4602152987017383060,64,FLEN)
NAN_BOXED(4601137087785648722,64,FLEN)
NAN_BOXED(4607795267650556773,64,FLEN)
NAN_BOXED(4602152987017383060,64,FLEN)
NAN_BOXED(4601137087785648722,64,FLEN)
NAN_BOXED(4607795267650556773,64,FLEN)
NAN_BOXED(4602152987017383060,64,FLEN)
NAN_BOXED(4601137087785648722,64,FLEN)
NAN_BOXED(4607795267650556773,64,FLEN)
NAN_BOXED(4602152987017383060,64,FLEN)
NAN_BOXED(4601137087785648722,64,FLEN)
NAN_BOXED(4607795267650556773,64,FLEN)
NAN_BOXED(4602152987017383060,64,FLEN)
NAN_BOXED(4601164501509587810,64,FLEN)
NAN_BOXED(4598313190522129274,64,FLEN)
NAN_BOXED(4592386852010194576,64,FLEN)
NAN_BOXED(4601164501509587810,64,FLEN)
NAN_BOXED(4598313190522129274,64,FLEN)
NAN_BOXED(4592386852010194576,64,FLEN)
NAN_BOXED(4601164501509587810,64,FLEN)
NAN_BOXED(4598313190522129274,64,FLEN)
NAN_BOXED(4592386852010194576,64,FLEN)
NAN_BOXED(4601164501509587810,64,FLEN)
NAN_BOXED(4598313190522129274,64,FLEN)
NAN_BOXED(4592386852010194576,64,FLEN)
NAN_BOXED(4601164501509587810,64,FLEN)
NAN_BOXED(4598313190522129274,64,FLEN)
NAN_BOXED(4592386852010194576,64,FLEN)
NAN_BOXED(4601177341177809056,64,FLEN)
NAN_BOXED(4597443699930273169,64,FLEN)
NAN_BOXED(4591560564831334912,64,FLEN)
NAN_BOXED(4601177341177809056,64,FLEN)
NAN_BOXED(4597443699930273169,64,FLEN)
NAN_BOXED(4591560564831334912,64,FLEN)
NAN_BOXED(4601177341177809056,64,FLEN)
NAN_BOXED(4597443699930273169,64,FLEN)
NAN_BOXED(4591560564831334912,64,FLEN)
NAN_BOXED(4601177341177809056,64,FLEN)
NAN_BOXED(4597443699930273169,64,FLEN)
NAN_BOXED(4591560564831334912,64,FLEN)
NAN_BOXED(4601177341177809056,64,FLEN)
NAN_BOXED(4597443699930273169,64,FLEN)
NAN_BOXED(4591560564831334912,64,FLEN)
NAN_BOXED(4601239555123705626,64,FLEN)
NAN_BOXED(4608508396678740960,64,FLEN)
NAN_BOXED(4603073286479910453,64,FLEN)
NAN_BOXED(4601239555123705626,64,FLEN)
NAN_BOXED(4608508396678740960,64,FLEN)
NAN_BOXED(4603073286479910453,64,FLEN)
NAN_BOXED(4601239555123705626,64,FLEN)
NAN_BOXED(4608508396678740960,64,FLEN)
NAN_BOXED(4603073286479910453,64,FLEN)
NAN_BOXED(4601239555123705626,64,FLEN)
NAN_BOXED(4608508396678740960,64,FLEN)
NAN_BOXED(4603073286479910453,64,FLEN)
NAN_BOXED(4601239555123705626,64,FLEN)
NAN_BOXED(4608508396678740960,64,FLEN)
NAN_BOXED(4603073286479910453,64,FLEN)
NAN_BOXED(4601289855929995178,64,FLEN)
NAN_BOXED(4609103809795460509,64,FLEN)
NAN_BOXED(4603609438724372598,64,FLEN)
NAN_BOXED(4601289855929995178,64,FLEN)
NAN_BOXED(4609103809795460509,64,FLEN)
NAN_BOXED(4603609438724372598,64,FLEN)
NAN_BOXED(4601289855929995178,64,FLEN)
NAN_BOXED(4609103809795460509,64,FLEN)
NAN_BOXED(4603609438724372598,64,FLEN)
NAN_BOXED(4601289855929995178,64,FLEN)
NAN_BOXED(4609103809795460509,64,FLEN)
NAN_BOXED(4603609438724372598,64,FLEN)
NAN_BOXED(4601289855929995178,64,FLEN)
NAN_BOXED(4609103809795460509,64,FLEN)
NAN_BOXED(4603609438724372598,64,FLEN)
NAN_BOXED(4601407094053865688,64,FLEN)
NAN_BOXED(4604459262077074465,64,FLEN)
NAN_BOXED(4599068419422303334,64,FLEN)
NAN_BOXED(4601407094053865688,64,FLEN)
NAN_BOXED(4604459262077074465,64,FLEN)
NAN_BOXED(4599068419422303334,64,FLEN)
NAN_BOXED(4601407094053865688,64,FLEN)
NAN_BOXED(4604459262077074465,64,FLEN)
NAN_BOXED(4599068419422303334,64,FLEN)
NAN_BOXED(4601407094053865688,64,FLEN)
NAN_BOXED(4604459262077074465,64,FLEN)
NAN_BOXED(4599068419422303334,64,FLEN)
NAN_BOXED(4601407094053865688,64,FLEN)
NAN_BOXED(4604459262077074465,64,FLEN)
NAN_BOXED(4599068419422303334,64,FLEN)
NAN_BOXED(4601458132943550076,64,FLEN)
NAN_BOXED(4612327084671786871,64,FLEN)
NAN_BOXED(4607070106111049807,64,FLEN)
NAN_BOXED(4601458132943550076,64,FLEN)
NAN_BOXED(4612327084671786871,64,FLEN)
NAN_BOXED(4607070106111049807,64,FLEN)
NAN_BOXED(4601458132943550076,64,FLEN)
NAN_BOXED(4612327084671786871,64,FLEN)
NAN_BOXED(4607070106111049807,64,FLEN)
NAN_BOXED(4601458132943550076,64,FLEN)
NAN_BOXED(4612327084671786871,64,FLEN)
NAN_BOXED(4607070106111049807,64,FLEN)
NAN_BOXED(4601458132943550076,64,FLEN)
NAN_BOXED(4612327084671786871,64,FLEN)
NAN_BOXED(4607070106111049807,64,FLEN)
NAN_BOXED(4601566801401671250,64,FLEN)
NAN_BOXED(4603107764692905293,64,FLEN)
NAN_BOXED(4597815178639319144,64,FLEN)
NAN_BOXED(4601566801401671250,64,FLEN)
NAN_BOXED(4603107764692905293,64,FLEN)
NAN_BOXED(4597815178639319144,64,FLEN)
NAN_BOXED(4601566801401671250,64,FLEN)
NAN_BOXED(4603107764692905293,64,FLEN)
NAN_BOXED(4597815178639319144,64,FLEN)
NAN_BOXED(4601566801401671250,64,FLEN)
NAN_BOXED(4603107764692905293,64,FLEN)
NAN_BOXED(4597815178639319144,64,FLEN)
NAN_BOXED(4601566801401671250,64,FLEN)
NAN_BOXED(4603107764692905293,64,FLEN)
NAN_BOXED(4597815178639319144,64,FLEN)
NAN_BOXED(4601606713745580878,64,FLEN)
NAN_BOXED(4593808393918503348,64,FLEN)
NAN_BOXED(4588336903099042352,64,FLEN)
NAN_BOXED(4601606713745580878,64,FLEN)
NAN_BOXED(4593808393918503348,64,FLEN)
NAN_BOXED(4588336903099042352,64,FLEN)
NAN_BOXED(4601606713745580878,64,FLEN)
NAN_BOXED(4593808393918503348,64,FLEN)
NAN_BOXED(4588336903099042352,64,FLEN)
NAN_BOXED(4601606713745580878,64,FLEN)
NAN_BOXED(4593808393918503348,64,FLEN)
NAN_BOXED(4588336903099042352,64,FLEN)
NAN_BOXED(4601606713745580878,64,FLEN)
NAN_BOXED(4593808393918503348,64,FLEN)
NAN_BOXED(4588336903099042352,64,FLEN)
NAN_BOXED(4601624486030606462,64,FLEN)
NAN_BOXED(4605769744453340401,64,FLEN)
NAN_BOXED(4600377171563342352,64,FLEN)
NAN_BOXED(4601624486030606462,64,FLEN)
NAN_BOXED(4605769744453340401,64,FLEN)
NAN_BOXED(4600377171563342352,64,FLEN)
NAN_BOXED(4601624486030606462,64,FLEN)
NAN_BOXED(4605769744453340401,64,FLEN)
NAN_BOXED(4600377171563342352,64,FLEN)
NAN_BOXED(4601624486030606462,64,FLEN)
NAN_BOXED(4605769744453340401,64,FLEN)
NAN_BOXED(4600377171563342352,64,FLEN)
NAN_BOXED(4601624486030606462,64,FLEN)
NAN_BOXED(4605769744453340401,64,FLEN)
NAN_BOXED(4600377171563342352,64,FLEN)
NAN_BOXED(4601680067144441306,64,FLEN)
NAN_BOXED(4602413337544107371,64,FLEN)
NAN_BOXED(4596940423486996256,64,FLEN)
NAN_BOXED(4601680067144441306,64,FLEN)
NAN_BOXED(4602413337544107371,64,FLEN)
NAN_BOXED(4596940423486996256,64,FLEN)
NAN_BOXED(4601680067144441306,64,FLEN)
NAN_BOXED(4602413337544107371,64,FLEN)
NAN_BOXED(4596940423486996256,64,FLEN)
NAN_BOXED(4601680067144441306,64,FLEN)
NAN_BOXED(4602413337544107371,64,FLEN)
NAN_BOXED(4596940423486996256,64,FLEN)
NAN_BOXED(4601680067144441306,64,FLEN)
NAN_BOXED(4602413337544107371,64,FLEN)
NAN_BOXED(4596940423486996256,64,FLEN)
NAN_BOXED(4601705136469091436,64,FLEN)
NAN_BOXED(4608329573931080861,64,FLEN)
NAN_BOXED(4603215124913715478,64,FLEN)
NAN_BOXED(4601705136469091436,64,FLEN)
NAN_BOXED(4608329573931080861,64,FLEN)
NAN_BOXED(4603215124913715478,64,FLEN)
NAN_BOXED(4601705136469091436,64,FLEN)
NAN_BOXED(4608329573931080861,64,FLEN)
NAN_BOXED(4603215124913715478,64,FLEN)
NAN_BOXED(4601705136469091436,64,FLEN)
NAN_BOXED(4608329573931080861,64,FLEN)
NAN_BOXED(4603215124913715478,64,FLEN)
NAN_BOXED(4601705136469091436,64,FLEN)
NAN_BOXED(4608329573931080861,64,FLEN)
NAN_BOXED(4603215124913715478,64,FLEN)
NAN_BOXED(4601722900996189510,64,FLEN)
NAN_BOXED(4595079421877577149,64,FLEN)
NAN_BOXED(4589948455622071056,64,FLEN)
NAN_BOXED(4601722900996189510,64,FLEN)
NAN_BOXED(4595079421877577149,64,FLEN)
NAN_BOXED(4589948455622071056,64,FLEN)
NAN_BOXED(4601722900996189510,64,FLEN)
NAN_BOXED(4595079421877577149,64,FLEN)
NAN_BOXED(4589948455622071056,64,FLEN)
NAN_BOXED(4601722900996189510,64,FLEN)
NAN_BOXED(4595079421877577149,64,FLEN)
NAN_BOXED(4589948455622071056,64,FLEN)
NAN_BOXED(4601722900996189510,64,FLEN)
NAN_BOXED(4595079421877577149,64,FLEN)
NAN_BOXED(4589948455622071056,64,FLEN)
NAN_BOXED(4601788188947053640,64,FLEN)
NAN_BOXED(4598334194934575772,64,FLEN)
NAN_BOXED(4593067501555698968,64,FLEN)
NAN_BOXED(4601788188947053640,64,FLEN)
NAN_BOXED(4598334194934575772,64,FLEN)
NAN_BOXED(4593067501555698968,64,FLEN)
NAN_BOXED(4601788188947053640,64,FLEN)
NAN_BOXED(4598334194934575772,64,FLEN)
NAN_BOXED(4593067501555698968,64,FLEN)
NAN_BOXED(4601788188947053640,64,FLEN)
NAN_BOXED(4598334194934575772,64,FLEN)
NAN_BOXED(4593067501555698968,64,FLEN)
NAN_BOXED(4601788188947053640,64,FLEN)
NAN_BOXED(4598334194934575772,64,FLEN)
NAN_BOXED(4593067501555698968,64,FLEN)
NAN_BOXED(4601818731340732640,64,FLEN)
NAN_BOXED(4611848832921073819,64,FLEN)
NAN_BOXED(4606616865991431741,64,FLEN)
NAN_BOXED(4601818731340732640,64,FLEN)
NAN_BOXED(4611848832921073819,64,FLEN)
NAN_BOXED(4606616865991431741,64,FLEN)
NAN_BOXED(4601818731340732640,64,FLEN)
NAN_BOXED(4611848832921073819,64,FLEN)
NAN_BOXED(4606616865991431741,64,FLEN)
NAN_BOXED(4601818731340732640,64,FLEN)
NAN_BOXED(4611848832921073819,64,FLEN)
NAN_BOXED(4606616865991431741,64,FLEN)
NAN_BOXED(4601818731340732640,64,FLEN)
NAN_BOXED(4611848832921073819,64,FLEN)
NAN_BOXED(4606616865991431741,64,FLEN)
NAN_BOXED(4601901093888185430,64,FLEN)
NAN_BOXED(4611978332314585280,64,FLEN)
NAN_BOXED(4606938841691433312,64,FLEN)
NAN_BOXED(4601901093888185430,64,FLEN)
NAN_BOXED(4611978332314585280,64,FLEN)
NAN_BOXED(4606938841691433312,64,FLEN)
NAN_BOXED(4601901093888185430,64,FLEN)
NAN_BOXED(4611978332314585280,64,FLEN)
NAN_BOXED(4606938841691433312,64,FLEN)
NAN_BOXED(4601901093888185430,64,FLEN)
NAN_BOXED(4611978332314585280,64,FLEN)
NAN_BOXED(4606938841691433312,64,FLEN)
NAN_BOXED(4601901093888185430,64,FLEN)
NAN_BOXED(4611978332314585280,64,FLEN)
NAN_BOXED(4606938841691433312,64,FLEN)
NAN_BOXED(4602032426447747264,64,FLEN)
NAN_BOXED(4608833898665227398,64,FLEN)
NAN_BOXED(4603888585860135327,64,FLEN)
NAN_BOXED(4602032426447747264,64,FLEN)
NAN_BOXED(4608833898665227398,64,FLEN)
NAN_BOXED(4603888585860135327,64,FLEN)
NAN_BOXED(4602032426447747264,64,FLEN)
NAN_BOXED(4608833898665227398,64,FLEN)
NAN_BOXED(4603888585860135327,64,FLEN)
NAN_BOXED(4602032426447747264,64,FLEN)
NAN_BOXED(4608833898665227398,64,FLEN)
NAN_BOXED(4603888585860135327,64,FLEN)
NAN_BOXED(4602032426447747264,64,FLEN)
NAN_BOXED(4608833898665227398,64,FLEN)
NAN_BOXED(4603888585860135327,64,FLEN)
NAN_BOXED(4602091686735830748,64,FLEN)
NAN_BOXED(4602187085252242747,64,FLEN)
NAN_BOXED(4597128406762845176,64,FLEN)
NAN_BOXED(4602091686735830748,64,FLEN)
NAN_BOXED(4602187085252242747,64,FLEN)
NAN_BOXED(4597128406762845176,64,FLEN)
NAN_BOXED(4602091686735830748,64,FLEN)
NAN_BOXED(4602187085252242747,64,FLEN)
NAN_BOXED(4597128406762845176,64,FLEN)
NAN_BOXED(4602091686735830748,64,FLEN)
NAN_BOXED(4602187085252242747,64,FLEN)
NAN_BOXED(4597128406762845176,64,FLEN)
NAN_BOXED(4602091686735830748,64,FLEN)
NAN_BOXED(4602187085252242747,64,FLEN)
NAN_BOXED(4597128406762845176,64,FLEN)
NAN_BOXED(4602169779197518216,64,FLEN)
NAN_BOXED(4610825974946622806,64,FLEN)
NAN_BOXED(4605861940520902381,64,FLEN)
NAN_BOXED(4602169779197518216,64,FLEN)
NAN_BOXED(4610825974946622806,64,FLEN)
NAN_BOXED(4605861940520902381,64,FLEN)
NAN_BOXED(4602169779197518216,64,FLEN)
NAN_BOXED(4610825974946622806,64,FLEN)
NAN_BOXED(4605861940520902381,64,FLEN)
NAN_BOXED(4602169779197518216,64,FLEN)
NAN_BOXED(4610825974946622806,64,FLEN)
NAN_BOXED(4605861940520902381,64,FLEN)
NAN_BOXED(4602169779197518216,64,FLEN)
NAN_BOXED(4610825974946622806,64,FLEN)
NAN_BOXED(4605861940520902381,64,FLEN)
NAN_BOXED(4602172444501705512,64,FLEN)
NAN_BOXED(4586726532914228843,64,FLEN)
NAN_BOXED(4581853816306328768,64,FLEN)
NAN_BOXED(4602172444501705512,64,FLEN)
NAN_BOXED(4586726532914228843,64,FLEN)
NAN_BOXED(4581853816306328768,64,FLEN)
NAN_BOXED(4602172444501705512,64,FLEN)
NAN_BOXED(4586726532914228843,64,FLEN)
NAN_BOXED(4581853816306328768,64,FLEN)
NAN_BOXED(4602172444501705512,64,FLEN)
NAN_BOXED(4586726532914228843,64,FLEN)
NAN_BOXED(4581853816306328768,64,FLEN)
NAN_BOXED(4602172444501705512,64,FLEN)
NAN_BOXED(4586726532914228843,64,FLEN)
NAN_BOXED(4581853816306328768,64,FLEN)
NAN_BOXED(4602193961158893162,64,FLEN)
NAN_BOXED(4609928634270884615,64,FLEN)
NAN_BOXED(4605034776712141804,64,FLEN)
NAN_BOXED(4602193961158893162,64,FLEN)
NAN_BOXED(4609928634270884615,64,FLEN)
NAN_BOXED(4605034776712141804,64,FLEN)
NAN_BOXED(4602193961158893162,64,FLEN)
NAN_BOXED(4609928634270884615,64,FLEN)
NAN_BOXED(4605034776712141804,64,FLEN)
NAN_BOXED(4602193961158893162,64,FLEN)
NAN_BOXED(4609928634270884615,64,FLEN)
NAN_BOXED(4605034776712141804,64,FLEN)
NAN_BOXED(4602193961158893162,64,FLEN)
NAN_BOXED(4609928634270884615,64,FLEN)
NAN_BOXED(4605034776712141804,64,FLEN)
NAN_BOXED(4602199977597405216,64,FLEN)
NAN_BOXED(4594219399013390449,64,FLEN)
NAN_BOXED(4589447257514525200,64,FLEN)
NAN_BOXED(4602199977597405216,64,FLEN)
NAN_BOXED(4594219399013390449,64,FLEN)
NAN_BOXED(4589447257514525200,64,FLEN)
NAN_BOXED(4602199977597405216,64,FLEN)
NAN_BOXED(4594219399013390449,64,FLEN)
NAN_BOXED(4589447257514525200,64,FLEN)
NAN_BOXED(4602199977597405216,64,FLEN)
NAN_BOXED(4594219399013390449,64,FLEN)
NAN_BOXED(4589447257514525200,64,FLEN)
NAN_BOXED(4602199977597405216,64,FLEN)
NAN_BOXED(4594219399013390449,64,FLEN)
NAN_BOXED(4589447257514525200,64,FLEN)
NAN_BOXED(4602224919311941744,64,FLEN)
NAN_BOXED(4598408996394044976,64,FLEN)
NAN_BOXED(4593661712317693768,64,FLEN)
NAN_BOXED(4602224919311941744,64,FLEN)
NAN_BOXED(4598408996394044976,64,FLEN)
NAN_BOXED(4593661712317693768,64,FLEN)
NAN_BOXED(4602224919311941744,64,FLEN)
NAN_BOXED(4598408996394044976,64,FLEN)
NAN_BOXED(4593661712317693768,64,FLEN)
NAN_BOXED(4602224919311941744,64,FLEN)
NAN_BOXED(4598408996394044976,64,FLEN)
NAN_BOXED(4593661712317693768,64,FLEN)
NAN_BOXED(4602224919311941744,64,FLEN)
NAN_BOXED(4598408996394044976,64,FLEN)
NAN_BOXED(4593661712317693768,64,FLEN)
NAN_BOXED(4602255362172282452,64,FLEN)
NAN_BOXED(4611819797048662730,64,FLEN)
NAN_BOXED(4607013940327759680,64,FLEN)
NAN_BOXED(4602255362172282452,64,FLEN)
NAN_BOXED(4611819797048662730,64,FLEN)
NAN_BOXED(4607013940327759680,64,FLEN)
NAN_BOXED(4602255362172282452,64,FLEN)
NAN_BOXED(4611819797048662730,64,FLEN)
NAN_BOXED(4607013940327759680,64,FLEN)
NAN_BOXED(4602255362172282452,64,FLEN)
NAN_BOXED(4611819797048662730,64,FLEN)
NAN_BOXED(4607013940327759680,64,FLEN)
NAN_BOXED(4602255362172282452,64,FLEN)
NAN_BOXED(4611819797048662730,64,FLEN)
NAN_BOXED(4607013940327759680,64,FLEN)
NAN_BOXED(4602380938590500084,64,FLEN)
NAN_BOXED(4607665628218033760,64,FLEN)
NAN_BOXED(4602997107893398461,64,FLEN)
NAN_BOXED(4602380938590500084,64,FLEN)
NAN_BOXED(4607665628218033760,64,FLEN)
NAN_BOXED(4602997107893398461,64,FLEN)
NAN_BOXED(4602380938590500084,64,FLEN)
NAN_BOXED(4607665628218033760,64,FLEN)
NAN_BOXED(4602997107893398461,64,FLEN)
NAN_BOXED(4602380938590500084,64,FLEN)
NAN_BOXED(4607665628218033760,64,FLEN)
NAN_BOXED(4602997107893398461,64,FLEN)
NAN_BOXED(4602380938590500084,64,FLEN)
NAN_BOXED(4607665628218033760,64,FLEN)
NAN_BOXED(4602997107893398461,64,FLEN)
NAN_BOXED(4602397703442595686,64,FLEN)
NAN_BOXED(4608823301756630531,64,FLEN)
NAN_BOXED(4604127932117458151,64,FLEN)
NAN_BOXED(4602397703442595686,64,FLEN)
NAN_BOXED(4608823301756630531,64,FLEN)
NAN_BOXED(4604127932117458151,64,FLEN)
NAN_BOXED(4602397703442595686,64,FLEN)
NAN_BOXED(4608823301756630531,64,FLEN)
NAN_BOXED(4604127932117458151,64,FLEN)
NAN_BOXED(4602397703442595686,64,FLEN)
NAN_BOXED(4608823301756630531,64,FLEN)
NAN_BOXED(4604127932117458151,64,FLEN)
NAN_BOXED(4602397703442595686,64,FLEN)
NAN_BOXED(4608823301756630531,64,FLEN)
NAN_BOXED(4604127932117458151,64,FLEN)
NAN_BOXED(4602399750323826942,64,FLEN)
NAN_BOXED(4605284316344864745,64,FLEN)
NAN_BOXED(4600560456522965234,64,FLEN)
NAN_BOXED(4602399750323826942,64,FLEN)
NAN_BOXED(4605284316344864745,64,FLEN)
NAN_BOXED(4600560456522965234,64,FLEN)
NAN_BOXED(4602399750323826942,64,FLEN)
NAN_BOXED(4605284316344864745,64,FLEN)
NAN_BOXED(4600560456522965234,64,FLEN)
NAN_BOXED(4602399750323826942,64,FLEN)
NAN_BOXED(4605284316344864745,64,FLEN)
NAN_BOXED(4600560456522965234,64,FLEN)
NAN_BOXED(4602399750323826942,64,FLEN)
NAN_BOXED(4605284316344864745,64,FLEN)
NAN_BOXED(4600560456522965234,64,FLEN)
NAN_BOXED(4602459737561734988,64,FLEN)
NAN_BOXED(4603848476019439688,64,FLEN)
NAN_BOXED(4599206886087611124,64,FLEN)
NAN_BOXED(4602459737561734988,64,FLEN)
NAN_BOXED(4603848476019439688,64,FLEN)
NAN_BOXED(4599206886087611124,64,FLEN)
NAN_BOXED(4602459737561734988,64,FLEN)
NAN_BOXED(4603848476019439688,64,FLEN)
NAN_BOXED(4599206886087611124,64,FLEN)
NAN_BOXED(4602459737561734988,64,FLEN)
NAN_BOXED(4603848476019439688,64,FLEN)
NAN_BOXED(4599206886087611124,64,FLEN)
NAN_BOXED(4602459737561734988,64,FLEN)
NAN_BOXED(4603848476019439688,64,FLEN)
NAN_BOXED(4599206886087611124,64,FLEN)
NAN_BOXED(4602481327541429758,64,FLEN)
NAN_BOXED(4610139595020577238,64,FLEN)
NAN_BOXED(4605472410603897485,64,FLEN)
NAN_BOXED(4602481327541429758,64,FLEN)
NAN_BOXED(4610139595020577238,64,FLEN)
NAN_BOXED(4605472410603897485,64,FLEN)
NAN_BOXED(4602481327541429758,64,FLEN)
NAN_BOXED(4610139595020577238,64,FLEN)
NAN_BOXED(4605472410603897485,64,FLEN)
NAN_BOXED(4602481327541429758,64,FLEN)
NAN_BOXED(4610139595020577238,64,FLEN)
NAN_BOXED(4605472410603897485,64,FLEN)
NAN_BOXED(4602481327541429758,64,FLEN)
NAN_BOXED(4610139595020577238,64,FLEN)
NAN_BOXED(4605472410603897485,64,FLEN)
NAN_BOXED(4602600077313425670,64,FLEN)
NAN_BOXED(4599671067646477089,64,FLEN)
NAN_BOXED(4595115020232054508,64,FLEN)
NAN_BOXED(4602600077313425670,64,FLEN)
NAN_BOXED(4599671067646477089,64,FLEN)
NAN_BOXED(4595115020232054508,64,FLEN)
NAN_BOXED(4602600077313425670,64,FLEN)
NAN_BOXED(4599671067646477089,64,FLEN)
NAN_BOXED(4595115020232054508,64,FLEN)
NAN_BOXED(4602600077313425670,64,FLEN)
NAN_BOXED(4599671067646477089,64,FLEN)
NAN_BOXED(4595115020232054508,64,FLEN)
NAN_BOXED(4602600077313425670,64,FLEN)
NAN_BOXED(4599671067646477089,64,FLEN)
NAN_BOXED(4595115020232054508,64,FLEN)
NAN_BOXED(4602625297451397132,64,FLEN)
NAN_BOXED(4606598366540581976,64,FLEN)
NAN_BOXED(4602044715691652084,64,FLEN)
NAN_BOXED(4602625297451397132,64,FLEN)
NAN_BOXED(4606598366540581976,64,FLEN)
NAN_BOXED(4602044715691652084,64,FLEN)
NAN_BOXED(4602625297451397132,64,FLEN)
NAN_BOXED(4606598366540581976,64,FLEN)
NAN_BOXED(4602044715691652084,64,FLEN)
NAN_BOXED(4602625297451397132,64,FLEN)
NAN_BOXED(4606598366540581976,64,FLEN)
NAN_BOXED(4602044715691652084,64,FLEN)
NAN_BOXED(4602625297451397132,64,FLEN)
NAN_BOXED(4606598366540581976,64,FLEN)
NAN_BOXED(4602044715691652084,64,FLEN)
NAN_BOXED(4602649114490188390,64,FLEN)
NAN_BOXED(4606637017256541574,64,FLEN)
NAN_BOXED(4602105511616776706,64,FLEN)
NAN_BOXED(4602649114490188390,64,FLEN)
NAN_BOXED(4606637017256541574,64,FLEN)
NAN_BOXED(4602105511616776706,64,FLEN)
NAN_BOXED(4602649114490188390,64,FLEN)
NAN_BOXED(4606637017256541574,64,FLEN)
NAN_BOXED(4602105511616776706,64,FLEN)
NAN_BOXED(4602649114490188390,64,FLEN)
NAN_BOXED(4606637017256541574,64,FLEN)
NAN_BOXED(4602105511616776706,64,FLEN)
NAN_BOXED(4602649114490188390,64,FLEN)
NAN_BOXED(4606637017256541574,64,FLEN)
NAN_BOXED(4602105511616776706,64,FLEN)
NAN_BOXED(4602677223099427852,64,FLEN)
NAN_BOXED(4610084951087415530,64,FLEN)
NAN_BOXED(4605580039095516208,64,FLEN)
NAN_BOXED(4602677223099427852,64,FLEN)
NAN_BOXED(4610084951087415530,64,FLEN)
NAN_BOXED(4605580039095516208,64,FLEN)
NAN_BOXED(4602677223099427852,64,FLEN)
NAN_BOXED(4610084951087415530,64,FLEN)
NAN_BOXED(4605580039095516208,64,FLEN)
NAN_BOXED(4602677223099427852,64,FLEN)
NAN_BOXED(4610084951087415530,64,FLEN)
NAN_BOXED(4605580039095516208,64,FLEN)
NAN_BOXED(4602677223099427852,64,FLEN)
NAN_BOXED(4610084951087415530,64,FLEN)
NAN_BOXED(4605580039095516208,64,FLEN)
NAN_BOXED(4602723840996474356,64,FLEN)
NAN_BOXED(4599571302681877994,64,FLEN)
NAN_BOXED(4595126681316345672,64,FLEN)
NAN_BOXED(4602723840996474356,64,FLEN)
NAN_BOXED(4599571302681877994,64,FLEN)
NAN_BOXED(4595126681316345672,64,FLEN)
NAN_BOXED(4602723840996474356,64,FLEN)
NAN_BOXED(4599571302681877994,64,FLEN)
NAN_BOXED(4595126681316345672,64,FLEN)
NAN_BOXED(4602723840996474356,64,FLEN)
NAN_BOXED(4599571302681877994,64,FLEN)
NAN_BOXED(4595126681316345672,64,FLEN)
NAN_BOXED(4602723840996474356,64,FLEN)
NAN_BOXED(4599571302681877994,64,FLEN)
NAN_BOXED(4595126681316345672,64,FLEN)
NAN_BOXED(4602733323727285519,64,FLEN)
NAN_BOXED(4608173718282536955,64,FLEN)
NAN_BOXED(4603736620354595611,64,FLEN)
NAN_BOXED(4602733323727285519,64,FLEN)
NAN_BOXED(4608173718282536955,64,FLEN)
NAN_BOXED(4603736620354595611,64,FLEN)
NAN_BOXED(4602733323727285519,64,FLEN)
NAN_BOXED(4608173718282536955,64,FLEN)
NAN_BOXED(4603736620354595611,64,FLEN)
NAN_BOXED(4602733323727285519,64,FLEN)
NAN_BOXED(4608173718282536955,64,FLEN)
NAN_BOXED(4603736620354595611,64,FLEN)
NAN_BOXED(4602733323727285519,64,FLEN)
NAN_BOXED(4608173718282536955,64,FLEN)
NAN_BOXED(4603736620354595611,64,FLEN)
NAN_BOXED(4602775247411863623,64,FLEN)
NAN_BOXED(4611467977694976453,64,FLEN)
NAN_BOXED(4607152565995181488,64,FLEN)
NAN_BOXED(4602775247411863623,64,FLEN)
NAN_BOXED(4611467977694976453,64,FLEN)
NAN_BOXED(4607152565995181488,64,FLEN)
NAN_BOXED(4602775247411863623,64,FLEN)
NAN_BOXED(4611467977694976453,64,FLEN)
NAN_BOXED(4607152565995181488,64,FLEN)
NAN_BOXED(4602775247411863623,64,FLEN)
NAN_BOXED(4611467977694976453,64,FLEN)
NAN_BOXED(4607152565995181488,64,FLEN)
NAN_BOXED(4602775247411863623,64,FLEN)
NAN_BOXED(4611467977694976453,64,FLEN)
NAN_BOXED(4607152565995181488,64,FLEN)
NAN_BOXED(4602803653041747496,64,FLEN)
NAN_BOXED(4611225429200849654,64,FLEN)
NAN_BOXED(4606958730383007231,64,FLEN)
NAN_BOXED(4602803653041747496,64,FLEN)
NAN_BOXED(4611225429200849654,64,FLEN)
NAN_BOXED(4606958730383007231,64,FLEN)
NAN_BOXED(4602803653041747496,64,FLEN)
NAN_BOXED(4611225429200849654,64,FLEN)
NAN_BOXED(4606958730383007231,64,FLEN)
NAN_BOXED(4602803653041747496,64,FLEN)
NAN_BOXED(4611225429200849654,64,FLEN)
NAN_BOXED(4606958730383007231,64,FLEN)
NAN_BOXED(4602803653041747496,64,FLEN)
NAN_BOXED(4611225429200849654,64,FLEN)
NAN_BOXED(4606958730383007231,64,FLEN)
NAN_BOXED(4602867878807187105,64,FLEN)
NAN_BOXED(4603643671880084746,64,FLEN)
NAN_BOXED(4599369636087304708,64,FLEN)
NAN_BOXED(4602867878807187105,64,FLEN)
NAN_BOXED(4603643671880084746,64,FLEN)
NAN_BOXED(4599369636087304708,64,FLEN)
NAN_BOXED(4602867878807187105,64,FLEN)
NAN_BOXED(4603643671880084746,64,FLEN)
NAN_BOXED(4599369636087304708,64,FLEN)
NAN_BOXED(4602867878807187105,64,FLEN)
NAN_BOXED(4603643671880084746,64,FLEN)
NAN_BOXED(4599369636087304708,64,FLEN)
NAN_BOXED(4602867878807187105,64,FLEN)
NAN_BOXED(4603643671880084746,64,FLEN)
NAN_BOXED(4599369636087304708,64,FLEN)
NAN_BOXED(4602876650432499686,64,FLEN)
NAN_BOXED(4592740246911486839,64,FLEN)
NAN_BOXED(4588591397042808912,64,FLEN)
NAN_BOXED(4602876650432499686,64,FLEN)
NAN_BOXED(4592740246911486839,64,FLEN)
NAN_BOXED(4588591397042808912,64,FLEN)
NAN_BOXED(4602876650432499686,64,FLEN)
NAN_BOXED(4592740246911486839,64,FLEN)
NAN_BOXED(4588591397042808912,64,FLEN)
NAN_BOXED(4602876650432499686,64,FLEN)
NAN_BOXED(4592740246911486839,64,FLEN)
NAN_BOXED(4588591397042808912,64,FLEN)
NAN_BOXED(4602876650432499686,64,FLEN)
NAN_BOXED(4592740246911486839,64,FLEN)
NAN_BOXED(4588591397042808912,64,FLEN)
NAN_BOXED(4602907209073057913,64,FLEN)
NAN_BOXED(4606700296816172931,64,FLEN)
NAN_BOXED(4602629027260299700,64,FLEN)
NAN_BOXED(4602907209073057913,64,FLEN)
NAN_BOXED(4606700296816172931,64,FLEN)
NAN_BOXED(4602629027260299700,64,FLEN)
NAN_BOXED(4602907209073057913,64,FLEN)
NAN_BOXED(4606700296816172931,64,FLEN)
NAN_BOXED(4602629027260299700,64,FLEN)
NAN_BOXED(4602907209073057913,64,FLEN)
NAN_BOXED(4606700296816172931,64,FLEN)
NAN_BOXED(4602629027260299700,64,FLEN)
NAN_BOXED(4602907209073057913,64,FLEN)
NAN_BOXED(4606700296816172931,64,FLEN)
NAN_BOXED(4602629027260299700,64,FLEN)
NAN_BOXED(4602912120608537243,64,FLEN)
NAN_BOXED(4603927336756148902,64,FLEN)
NAN_BOXED(4599721715927015756,64,FLEN)
NAN_BOXED(4602912120608537243,64,FLEN)
NAN_BOXED(4603927336756148902,64,FLEN)
NAN_BOXED(4599721715927015756,64,FLEN)
NAN_BOXED(4602912120608537243,64,FLEN)
NAN_BOXED(4603927336756148902,64,FLEN)
NAN_BOXED(4599721715927015756,64,FLEN)
NAN_BOXED(4602912120608537243,64,FLEN)
NAN_BOXED(4603927336756148902,64,FLEN)
NAN_BOXED(4599721715927015756,64,FLEN)
NAN_BOXED(4602912120608537243,64,FLEN)
NAN_BOXED(4603927336756148902,64,FLEN)
NAN_BOXED(4599721715927015756,64,FLEN)
NAN_BOXED(4602982009116977933,64,FLEN)
NAN_BOXED(4610117832566696683,64,FLEN)
NAN_BOXED(4606115039903407171,64,FLEN)
NAN_BOXED(4602982009116977933,64,FLEN)
NAN_BOXED(4610117832566696683,64,FLEN)
NAN_BOXED(4606115039903407171,64,FLEN)
NAN_BOXED(4602982009116977933,64,FLEN)
NAN_BOXED(4610117832566696683,64,FLEN)
NAN_BOXED(4606115039903407171,64,FLEN)
NAN_BOXED(4602982009116977933,64,FLEN)
NAN_BOXED(4610117832566696683,64,FLEN)
NAN_BOXED(4606115039903407171,64,FLEN)
NAN_BOXED(4602982009116977933,64,FLEN)
NAN_BOXED(4610117832566696683,64,FLEN)
NAN_BOXED(4606115039903407171,64,FLEN)
NAN_BOXED(4602985158890754895,64,FLEN)
NAN_BOXED(4606881422405498461,64,FLEN)
NAN_BOXED(4602824423643326922,64,FLEN)
NAN_BOXED(4602985158890754895,64,FLEN)
NAN_BOXED(4606881422405498461,64,FLEN)
NAN_BOXED(4602824423643326922,64,FLEN)
NAN_BOXED(4602985158890754895,64,FLEN)
NAN_BOXED(4606881422405498461,64,FLEN)
NAN_BOXED(4602824423643326922,64,FLEN)
NAN_BOXED(4602985158890754895,64,FLEN)
NAN_BOXED(4606881422405498461,64,FLEN)
NAN_BOXED(4602824423643326922,64,FLEN)
NAN_BOXED(4602985158890754895,64,FLEN)
NAN_BOXED(4606881422405498461,64,FLEN)
NAN_BOXED(4602824423643326922,64,FLEN)
NAN_BOXED(4603095190280088883,64,FLEN)
NAN_BOXED(4608127467167285495,64,FLEN)
NAN_BOXED(4604127611164415150,64,FLEN)
NAN_BOXED(4603095190280088883,64,FLEN)
NAN_BOXED(4608127467167285495,64,FLEN)
NAN_BOXED(4604127611164415150,64,FLEN)
NAN_BOXED(4603095190280088883,64,FLEN)
NAN_BOXED(4608127467167285495,64,FLEN)
NAN_BOXED(4604127611164415150,64,FLEN)
NAN_BOXED(4603095190280088883,64,FLEN)
NAN_BOXED(4608127467167285495,64,FLEN)
NAN_BOXED(4604127611164415150,64,FLEN)
NAN_BOXED(4603095190280088883,64,FLEN)
NAN_BOXED(4608127467167285495,64,FLEN)
NAN_BOXED(4604127611164415150,64,FLEN)
NAN_BOXED(4603100496822910299,64,FLEN)
NAN_BOXED(4608445971674740674,64,FLEN)
NAN_BOXED(4604482357729270903,64,FLEN)
NAN_BOXED(4603100496822910299,64,FLEN)
NAN_BOXED(4608445971674740674,64,FLEN)
NAN_BOXED(4604482357729270903,64,FLEN)
NAN_BOXED(4603100496822910299,64,FLEN)
NAN_BOXED(4608445971674740674,64,FLEN)
NAN_BOXED(4604482357729270903,64,FLEN)
NAN_BOXED(4603100496822910299,64,FLEN)
NAN_BOXED(4608445971674740674,64,FLEN)
NAN_BOXED(4604482357729270903,64,FLEN)
NAN_BOXED(4603100496822910299,64,FLEN)
NAN_BOXED(4608445971674740674,64,FLEN)
NAN_BOXED(4604482357729270903,64,FLEN)
NAN_BOXED(4603108050117043690,64,FLEN)
NAN_BOXED(4605851214725152958,64,FLEN)
NAN_BOXED(4602079202035533240,64,FLEN)
NAN_BOXED(4603108050117043690,64,FLEN)
NAN_BOXED(4605851214725152958,64,FLEN)
NAN_BOXED(4602079202035533240,64,FLEN)
NAN_BOXED(4603108050117043690,64,FLEN)
NAN_BOXED(4605851214725152958,64,FLEN)
NAN_BOXED(4602079202035533240,64,FLEN)
NAN_BOXED(4603108050117043690,64,FLEN)
NAN_BOXED(4605851214725152958,64,FLEN)
NAN_BOXED(4602079202035533240,64,FLEN)
NAN_BOXED(4603108050117043690,64,FLEN)
NAN_BOXED(4605851214725152958,64,FLEN)
NAN_BOXED(4602079202035533240,64,FLEN)
NAN_BOXED(4603122330957306306,64,FLEN)
NAN_BOXED(4608402609774909063,64,FLEN)
NAN_BOXED(4604462685606075751,64,FLEN)
NAN_BOXED(4603122330957306306,64,FLEN)
NAN_BOXED(4608402609774909063,64,FLEN)
NAN_BOXED(4604462685606075751,64,FLEN)
NAN_BOXED(4603122330957306306,64,FLEN)
NAN_BOXED(4608402609774909063,64,FLEN)
NAN_BOXED(4604462685606075751,64,FLEN)
NAN_BOXED(4603122330957306306,64,FLEN)
NAN_BOXED(4608402609774909063,64,FLEN)
NAN_BOXED(4604462685606075751,64,FLEN)
NAN_BOXED(4603122330957306306,64,FLEN)
NAN_BOXED(4608402609774909063,64,FLEN)
NAN_BOXED(4604462685606075751,64,FLEN)
NAN_BOXED(4603134124361133447,64,FLEN)
NAN_BOXED(4608661347156661413,64,FLEN)
NAN_BOXED(4604762569506545159,64,FLEN)
NAN_BOXED(4603134124361133447,64,FLEN)
NAN_BOXED(4608661347156661413,64,FLEN)
NAN_BOXED(4604762569506545159,64,FLEN)
NAN_BOXED(4603134124361133447,64,FLEN)
NAN_BOXED(4608661347156661413,64,FLEN)
NAN_BOXED(4604762569506545159,64,FLEN)
NAN_BOXED(4603134124361133447,64,FLEN)
NAN_BOXED(4608661347156661413,64,FLEN)
NAN_BOXED(4604762569506545159,64,FLEN)
NAN_BOXED(4603134124361133447,64,FLEN)
NAN_BOXED(4608661347156661413,64,FLEN)
NAN_BOXED(4604762569506545159,64,FLEN)
NAN_BOXED(4603218126017190802,64,FLEN)
NAN_BOXED(4609249847417812013,64,FLEN)
NAN_BOXED(4605533129574242062,64,FLEN)
NAN_BOXED(4603218126017190802,64,FLEN)
NAN_BOXED(4609249847417812013,64,FLEN)
NAN_BOXED(4605533129574242062,64,FLEN)
NAN_BOXED(4603218126017190802,64,FLEN)
NAN_BOXED(4609249847417812013,64,FLEN)
NAN_BOXED(4605533129574242062,64,FLEN)
NAN_BOXED(4603218126017190802,64,FLEN)
NAN_BOXED(4609249847417812013,64,FLEN)
NAN_BOXED(4605533129574242062,64,FLEN)
NAN_BOXED(4603218126017190802,64,FLEN)
NAN_BOXED(4609249847417812013,64,FLEN)
NAN_BOXED(4605533129574242062,64,FLEN)
NAN_BOXED(4603275010764555774,64,FLEN)
NAN_BOXED(4597329491557828747,64,FLEN)
NAN_BOXED(4593788968304251828,64,FLEN)
NAN_BOXED(4603275010764555774,64,FLEN)
NAN_BOXED(4597329491557828747,64,FLEN)
NAN_BOXED(4593788968304251828,64,FLEN)
NAN_BOXED(4603275010764555774,64,FLEN)
NAN_BOXED(4597329491557828747,64,FLEN)
NAN_BOXED(4593788968304251828,64,FLEN)
NAN_BOXED(4603275010764555774,64,FLEN)
NAN_BOXED(4597329491557828747,64,FLEN)
NAN_BOXED(4593788968304251828,64,FLEN)
NAN_BOXED(4603275010764555774,64,FLEN)
NAN_BOXED(4597329491557828747,64,FLEN)
NAN_BOXED(4593788968304251828,64,FLEN)
NAN_BOXED(4603358689875949706,64,FLEN)
NAN_BOXED(4599091704772829863,64,FLEN)
NAN_BOXED(4595406329944991444,64,FLEN)
NAN_BOXED(4603358689875949706,64,FLEN)
NAN_BOXED(4599091704772829863,64,FLEN)
NAN_BOXED(4595406329944991444,64,FLEN)
NAN_BOXED(4603358689875949706,64,FLEN)
NAN_BOXED(4599091704772829863,64,FLEN)
NAN_BOXED(4595406329944991444,64,FLEN)
NAN_BOXED(4603358689875949706,64,FLEN)
NAN_BOXED(4599091704772829863,64,FLEN)
NAN_BOXED(4595406329944991444,64,FLEN)
NAN_BOXED(4603358689875949706,64,FLEN)
NAN_BOXED(4599091704772829863,64,FLEN)
NAN_BOXED(4595406329944991444,64,FLEN)
NAN_BOXED(4603379091253101991,64,FLEN)
NAN_BOXED(4594692341768903878,64,FLEN)
NAN_BOXED(4591047727933975696,64,FLEN)
NAN_BOXED(4603379091253101991,64,FLEN)
NAN_BOXED(4594692341768903878,64,FLEN)
NAN_BOXED(4591047727933975696,64,FLEN)
NAN_BOXED(4603379091253101991,64,FLEN)
NAN_BOXED(4594692341768903878,64,FLEN)
NAN_BOXED(4591047727933975696,64,FLEN)
NAN_BOXED(4603379091253101991,64,FLEN)
NAN_BOXED(4594692341768903878,64,FLEN)
NAN_BOXED(4591047727933975696,64,FLEN)
NAN_BOXED(4603379091253101991,64,FLEN)
NAN_BOXED(4594692341768903878,64,FLEN)
NAN_BOXED(4591047727933975696,64,FLEN)
NAN_BOXED(4603393736153563724,64,FLEN)
NAN_BOXED(4594284615045316785,64,FLEN)
NAN_BOXED(4590593241365482136,64,FLEN)
NAN_BOXED(4603393736153563724,64,FLEN)
NAN_BOXED(4594284615045316785,64,FLEN)
NAN_BOXED(4590593241365482136,64,FLEN)
NAN_BOXED(4603393736153563724,64,FLEN)
NAN_BOXED(4594284615045316785,64,FLEN)
NAN_BOXED(4590593241365482136,64,FLEN)
NAN_BOXED(4603393736153563724,64,FLEN)
NAN_BOXED(4594284615045316785,64,FLEN)
NAN_BOXED(4590593241365482136,64,FLEN)
NAN_BOXED(4603393736153563724,64,FLEN)
NAN_BOXED(4594284615045316785,64,FLEN)
NAN_BOXED(4590593241365482136,64,FLEN)
NAN_BOXED(4603416303231243309,64,FLEN)
NAN_BOXED(4601190320152681479,64,FLEN)
NAN_BOXED(4597917940443443328,64,FLEN)
NAN_BOXED(4603416303231243309,64,FLEN)
NAN_BOXED(4601190320152681479,64,FLEN)
NAN_BOXED(4597917940443443328,64,FLEN)
NAN_BOXED(4603416303231243309,64,FLEN)
NAN_BOXED(4601190320152681479,64,FLEN)
NAN_BOXED(4597917940443443328,64,FLEN)
NAN_BOXED(4603416303231243309,64,FLEN)
NAN_BOXED(4601190320152681479,64,FLEN)
NAN_BOXED(4597917940443443328,64,FLEN)
NAN_BOXED(4603416303231243309,64,FLEN)
NAN_BOXED(4601190320152681479,64,FLEN)
NAN_BOXED(4597917940443443328,64,FLEN)
NAN_BOXED(4603537225899757760,64,FLEN)
NAN_BOXED(4607614737950901004,64,FLEN)
NAN_BOXED(4604051947061939595,64,FLEN)
NAN_BOXED(4603537225899757760,64,FLEN)
NAN_BOXED(4607614737950901004,64,FLEN)
NAN_BOXED(4604051947061939595,64,FLEN)
NAN_BOXED(4603537225899757760,64,FLEN)
NAN_BOXED(4607614737950901004,64,FLEN)
NAN_BOXED(4604051947061939595,64,FLEN)
NAN_BOXED(4603537225899757760,64,FLEN)
NAN_BOXED(4607614737950901004,64,FLEN)
NAN_BOXED(4604051947061939595,64,FLEN)
NAN_BOXED(4603537225899757760,64,FLEN)
NAN_BOXED(4607614737950901004,64,FLEN)
NAN_BOXED(4604051947061939595,64,FLEN)
NAN_BOXED(4603567047753256589,64,FLEN)
NAN_BOXED(4591068689436698172,64,FLEN)
NAN_BOXED(4587828180455304928,64,FLEN)
NAN_BOXED(4603567047753256589,64,FLEN)
NAN_BOXED(4591068689436698172,64,FLEN)
NAN_BOXED(4587828180455304928,64,FLEN)
NAN_BOXED(4603567047753256589,64,FLEN)
NAN_BOXED(4591068689436698172,64,FLEN)
NAN_BOXED(4587828180455304928,64,FLEN)
NAN_BOXED(4603567047753256589,64,FLEN)
NAN_BOXED(4591068689436698172,64,FLEN)
NAN_BOXED(4587828180455304928,64,FLEN)
NAN_BOXED(4603567047753256589,64,FLEN)
NAN_BOXED(4591068689436698172,64,FLEN)
NAN_BOXED(4587828180455304928,64,FLEN)
NAN_BOXED(4603595239774868520,64,FLEN)
NAN_BOXED(4605850162841402476,64,FLEN)
NAN_BOXED(4602793563910655034,64,FLEN)
NAN_BOXED(4603595239774868520,64,FLEN)
NAN_BOXED(4605850162841402476,64,FLEN)
NAN_BOXED(4602793563910655034,64,FLEN)
NAN_BOXED(4603595239774868520,64,FLEN)
NAN_BOXED(4605850162841402476,64,FLEN)
NAN_BOXED(4602793563910655034,64,FLEN)
NAN_BOXED(4603595239774868520,64,FLEN)
NAN_BOXED(4605850162841402476,64,FLEN)
NAN_BOXED(4602793563910655034,64,FLEN)
NAN_BOXED(4603595239774868520,64,FLEN)
NAN_BOXED(4605850162841402476,64,FLEN)
NAN_BOXED(4602793563910655034,64,FLEN)
NAN_BOXED(4603641814193170030,64,FLEN)
NAN_BOXED(4605496484959005016,64,FLEN)
NAN_BOXED(4602558375766108428,64,FLEN)
NAN_BOXED(4603641814193170030,64,FLEN)
NAN_BOXED(4605496484959005016,64,FLEN)
NAN_BOXED(4602558375766108428,64,FLEN)
NAN_BOXED(4603641814193170030,64,FLEN)
NAN_BOXED(4605496484959005016,64,FLEN)
NAN_BOXED(4602558375766108428,64,FLEN)
NAN_BOXED(4603641814193170030,64,FLEN)
NAN_BOXED(4605496484959005016,64,FLEN)
NAN_BOXED(4602558375766108428,64,FLEN)
NAN_BOXED(4603641814193170030,64,FLEN)
NAN_BOXED(4605496484959005016,64,FLEN)
NAN_BOXED(4602558375766108428,64,FLEN)
NAN_BOXED(4603648183802290288,64,FLEN)
NAN_BOXED(4607084583415302025,64,FLEN)
NAN_BOXED(4603588736958884814,64,FLEN)
NAN_BOXED(4603648183802290288,64,FLEN)
NAN_BOXED(4607084583415302025,64,FLEN)
NAN_BOXED(4603588736958884814,64,FLEN)
NAN_BOXED(4603648183802290288,64,FLEN)
NAN_BOXED(4607084583415302025,64,FLEN)
NAN_BOXED(4603588736958884814,64,FLEN)
NAN_BOXED(4603648183802290288,64,FLEN)
NAN_BOXED(4607084583415302025,64,FLEN)
NAN_BOXED(4603588736958884814,64,FLEN)
NAN_BOXED(4603648183802290288,64,FLEN)
NAN_BOXED(4607084583415302025,64,FLEN)
NAN_BOXED(4603588736958884814,64,FLEN)
NAN_BOXED(4603661056925314593,64,FLEN)
NAN_BOXED(4596774143494373214,64,FLEN)
NAN_BOXED(4593800531885838080,64,FLEN)
NAN_BOXED(4603661056925314593,64,FLEN)
NAN_BOXED(4596774143494373214,64,FLEN)
NAN_BOXED(4593800531885838080,64,FLEN)
NAN_BOXED(4603661056925314593,64,FLEN)
NAN_BOXED(4596774143494373214,64,FLEN)
NAN_BOXED(4593800531885838080,64,FLEN)
NAN_BOXED(4603661056925314593,64,FLEN)
NAN_BOXED(4596774143494373214,64,FLEN)
NAN_BOXED(4593800531885838080,64,FLEN)
NAN_BOXED(4603661056925314593,64,FLEN)
NAN_BOXED(4596774143494373214,64,FLEN)
NAN_BOXED(4593800531885838080,64,FLEN)
NAN_BOXED(4603673966332172382,64,FLEN)
NAN_BOXED(4607649992228677073,64,FLEN)
NAN_BOXED(4604244858085705416,64,FLEN)
NAN_BOXED(4603673966332172382,64,FLEN)
NAN_BOXED(4607649992228677073,64,FLEN)
NAN_BOXED(4604244858085705416,64,FLEN)
NAN_BOXED(4603673966332172382,64,FLEN)
NAN_BOXED(4607649992228677073,64,FLEN)
NAN_BOXED(4604244858085705416,64,FLEN)
NAN_BOXED(4603673966332172382,64,FLEN)
NAN_BOXED(4607649992228677073,64,FLEN)
NAN_BOXED(4604244858085705416,64,FLEN)
NAN_BOXED(4603673966332172382,64,FLEN)
NAN_BOXED(4607649992228677073,64,FLEN)
NAN_BOXED(4604244858085705416,64,FLEN)
NAN_BOXED(4603707518407125942,64,FLEN)
NAN_BOXED(4603034336165919484,64,FLEN)
NAN_BOXED(4599640641939002704,64,FLEN)
NAN_BOXED(4603707518407125942,64,FLEN)
NAN_BOXED(4603034336165919484,64,FLEN)
NAN_BOXED(4599640641939002704,64,FLEN)
NAN_BOXED(4603707518407125942,64,FLEN)
NAN_BOXED(4603034336165919484,64,FLEN)
NAN_BOXED(4599640641939002704,64,FLEN)
NAN_BOXED(4603707518407125942,64,FLEN)
NAN_BOXED(4603034336165919484,64,FLEN)
NAN_BOXED(4599640641939002704,64,FLEN)
NAN_BOXED(4603707518407125942,64,FLEN)
NAN_BOXED(4603034336165919484,64,FLEN)
NAN_BOXED(4599640641939002704,64,FLEN)
NAN_BOXED(4603819587398271888,64,FLEN)
NAN_BOXED(4589704908899455257,64,FLEN)
NAN_BOXED(4586478072150083696,64,FLEN)
NAN_BOXED(4603819587398271888,64,FLEN)
NAN_BOXED(4589704908899455257,64,FLEN)
NAN_BOXED(4586478072150083696,64,FLEN)
NAN_BOXED(4603819587398271888,64,FLEN)
NAN_BOXED(4589704908899455257,64,FLEN)
NAN_BOXED(4586478072150083696,64,FLEN)
NAN_BOXED(4603819587398271888,64,FLEN)
NAN_BOXED(4589704908899455257,64,FLEN)
NAN_BOXED(4586478072150083696,64,FLEN)
NAN_BOXED(4603819587398271888,64,FLEN)
NAN_BOXED(4589704908899455257,64,FLEN)
NAN_BOXED(4586478072150083696,64,FLEN)
NAN_BOXED(4603829741084833428,64,FLEN)
NAN_BOXED(4606885744966698388,64,FLEN)
NAN_BOXED(4603643495778908575,64,FLEN)
NAN_BOXED(4603829741084833428,64,FLEN)
NAN_BOXED(4606885744966698388,64,FLEN)
NAN_BOXED(4603643495778908575,64,FLEN)
NAN_BOXED(4603829741084833428,64,FLEN)
NAN_BOXED(4606885744966698388,64,FLEN)
NAN_BOXED(4603643495778908575,64,FLEN)
NAN_BOXED(4603829741084833428,64,FLEN)
NAN_BOXED(4606885744966698388,64,FLEN)
NAN_BOXED(4603643495778908575,64,FLEN)
NAN_BOXED(4603829741084833428,64,FLEN)
NAN_BOXED(4606885744966698388,64,FLEN)
NAN_BOXED(4603643495778908575,64,FLEN)
NAN_BOXED(4603856478293429589,64,FLEN)
NAN_BOXED(4604367963314860605,64,FLEN)
NAN_BOXED(4601483721931193274,64,FLEN)
NAN_BOXED(4603856478293429589,64,FLEN)
NAN_BOXED(4604367963314860605,64,FLEN)
NAN_BOXED(4601483721931193274,64,FLEN)
NAN_BOXED(4603856478293429589,64,FLEN)
NAN_BOXED(4604367963314860605,64,FLEN)
NAN_BOXED(4601483721931193274,64,FLEN)
NAN_BOXED(4603856478293429589,64,FLEN)
NAN_BOXED(4604367963314860605,64,FLEN)
NAN_BOXED(4601483721931193274,64,FLEN)
NAN_BOXED(4603856478293429589,64,FLEN)
NAN_BOXED(4604367963314860605,64,FLEN)
NAN_BOXED(4601483721931193274,64,FLEN)
NAN_BOXED(4603902326138894346,64,FLEN)
NAN_BOXED(4608891685258475315,64,FLEN)
NAN_BOXED(4606075954350645445,64,FLEN)
NAN_BOXED(4603902326138894346,64,FLEN)
NAN_BOXED(4608891685258475315,64,FLEN)
NAN_BOXED(4606075954350645445,64,FLEN)
NAN_BOXED(4603902326138894346,64,FLEN)
NAN_BOXED(4608891685258475315,64,FLEN)
NAN_BOXED(4606075954350645445,64,FLEN)
NAN_BOXED(4603902326138894346,64,FLEN)
NAN_BOXED(4608891685258475315,64,FLEN)
NAN_BOXED(4606075954350645445,64,FLEN)
NAN_BOXED(4603902326138894346,64,FLEN)
NAN_BOXED(4608891685258475315,64,FLEN)
NAN_BOXED(4606075954350645445,64,FLEN)
NAN_BOXED(4603933438046396386,64,FLEN)
NAN_BOXED(4606233592714507234,64,FLEN)
NAN_BOXED(4603326862376711478,64,FLEN)
NAN_BOXED(4603933438046396386,64,FLEN)
NAN_BOXED(4606233592714507234,64,FLEN)
NAN_BOXED(4603326862376711478,64,FLEN)
NAN_BOXED(4603933438046396386,64,FLEN)
NAN_BOXED(4606233592714507234,64,FLEN)
NAN_BOXED(4603326862376711478,64,FLEN)
NAN_BOXED(4603933438046396386,64,FLEN)
NAN_BOXED(4606233592714507234,64,FLEN)
NAN_BOXED(4603326862376711478,64,FLEN)
NAN_BOXED(4603933438046396386,64,FLEN)
NAN_BOXED(4606233592714507234,64,FLEN)
NAN_BOXED(4603326862376711478,64,FLEN)
NAN_BOXED(4603950895427019840,64,FLEN)
NAN_BOXED(4595674890999762597,64,FLEN)
NAN_BOXED(4593009206907595976,64,FLEN)
NAN_BOXED(4603950895427019840,64,FLEN)
NAN_BOXED(4595674890999762597,64,FLEN)
NAN_BOXED(4593009206907595976,64,FLEN)
NAN_BOXED(4603950895427019840,64,FLEN)
NAN_BOXED(4595674890999762597,64,FLEN)
NAN_BOXED(4593009206907595976,64,FLEN)
NAN_BOXED(4603950895427019840,64,FLEN)
NAN_BOXED(4595674890999762597,64,FLEN)
NAN_BOXED(4593009206907595976,64,FLEN)
NAN_BOXED(4603950895427019840,64,FLEN)
NAN_BOXED(4595674890999762597,64,FLEN)
NAN_BOXED(4593009206907595976,64,FLEN)
NAN_BOXED(4603979796124496817,64,FLEN)
NAN_BOXED(4609464713732620093,64,FLEN)
NAN_BOXED(4606921388807857500,64,FLEN)
NAN_BOXED(4603979796124496817,64,FLEN)
NAN_BOXED(4609464713732620093,64,FLEN)
NAN_BOXED(4606921388807857500,64,FLEN)
NAN_BOXED(4603979796124496817,64,FLEN)
NAN_BOXED(4609464713732620093,64,FLEN)
NAN_BOXED(4606921388807857500,64,FLEN)
NAN_BOXED(4603979796124496817,64,FLEN)
NAN_BOXED(4609464713732620093,64,FLEN)
NAN_BOXED(4606921388807857500,64,FLEN)
NAN_BOXED(4603979796124496817,64,FLEN)
NAN_BOXED(4609464713732620093,64,FLEN)
NAN_BOXED(4606921388807857500,64,FLEN)
NAN_BOXED(4603995815603126345,64,FLEN)
NAN_BOXED(4605727573773189206,64,FLEN)
NAN_BOXED(4603055671504117811,64,FLEN)
NAN_BOXED(4603995815603126345,64,FLEN)
NAN_BOXED(4605727573773189206,64,FLEN)
NAN_BOXED(4603055671504117811,64,FLEN)
NAN_BOXED(4603995815603126345,64,FLEN)
NAN_BOXED(4605727573773189206,64,FLEN)
NAN_BOXED(4603055671504117811,64,FLEN)
NAN_BOXED(4603995815603126345,64,FLEN)
NAN_BOXED(4605727573773189206,64,FLEN)
NAN_BOXED(4603055671504117811,64,FLEN)
NAN_BOXED(4603995815603126345,64,FLEN)
NAN_BOXED(4605727573773189206,64,FLEN)
NAN_BOXED(4603055671504117811,64,FLEN)
NAN_BOXED(4604026228517656703,64,FLEN)
NAN_BOXED(4604433464508883210,64,FLEN)
NAN_BOXED(4601802237748780150,64,FLEN)
NAN_BOXED(4604026228517656703,64,FLEN)
NAN_BOXED(4604433464508883210,64,FLEN)
NAN_BOXED(4601802237748780150,64,FLEN)
NAN_BOXED(4604026228517656703,64,FLEN)
NAN_BOXED(4604433464508883210,64,FLEN)
NAN_BOXED(4601802237748780150,64,FLEN)
NAN_BOXED(4604026228517656703,64,FLEN)
NAN_BOXED(4604433464508883210,64,FLEN)
NAN_BOXED(4601802237748780150,64,FLEN)
NAN_BOXED(4604026228517656703,64,FLEN)
NAN_BOXED(4604433464508883210,64,FLEN)
NAN_BOXED(4601802237748780150,64,FLEN)
NAN_BOXED(4604056911452112995,64,FLEN)
NAN_BOXED(4609450346256097458,64,FLEN)
NAN_BOXED(4607018820073529871,64,FLEN)
NAN_BOXED(4604056911452112995,64,FLEN)
NAN_BOXED(4609450346256097458,64,FLEN)
NAN_BOXED(4607018820073529871,64,FLEN)
NAN_BOXED(4604056911452112995,64,FLEN)
NAN_BOXED(4609450346256097458,64,FLEN)
NAN_BOXED(4607018820073529871,64,FLEN)
NAN_BOXED(4604056911452112995,64,FLEN)
NAN_BOXED(4609450346256097458,64,FLEN)
NAN_BOXED(4607018820073529871,64,FLEN)
NAN_BOXED(4604056911452112995,64,FLEN)
NAN_BOXED(4609450346256097458,64,FLEN)
NAN_BOXED(4607018820073529871,64,FLEN)
NAN_BOXED(4604095609953360841,64,FLEN)
NAN_BOXED(4598268118177087940,64,FLEN)
NAN_BOXED(4595210534380609368,64,FLEN)
NAN_BOXED(4604095609953360841,64,FLEN)
NAN_BOXED(4598268118177087940,64,FLEN)
NAN_BOXED(4595210534380609368,64,FLEN)
NAN_BOXED(4604095609953360841,64,FLEN)
NAN_BOXED(4598268118177087940,64,FLEN)
NAN_BOXED(4595210534380609368,64,FLEN)
NAN_BOXED(4604095609953360841,64,FLEN)
NAN_BOXED(4598268118177087940,64,FLEN)
NAN_BOXED(4595210534380609368,64,FLEN)
NAN_BOXED(4604095609953360841,64,FLEN)
NAN_BOXED(4598268118177087940,64,FLEN)
NAN_BOXED(4595210534380609368,64,FLEN)
NAN_BOXED(4604096229533147487,64,FLEN)
NAN_BOXED(4607715967196717730,64,FLEN)
NAN_BOXED(4604797700722254882,64,FLEN)
NAN_BOXED(4604096229533147487,64,FLEN)
NAN_BOXED(4607715967196717730,64,FLEN)
NAN_BOXED(4604797700722254882,64,FLEN)
NAN_BOXED(4604096229533147487,64,FLEN)
NAN_BOXED(4607715967196717730,64,FLEN)
NAN_BOXED(4604797700722254882,64,FLEN)
NAN_BOXED(4604096229533147487,64,FLEN)
NAN_BOXED(4607715967196717730,64,FLEN)
NAN_BOXED(4604797700722254882,64,FLEN)
NAN_BOXED(4604096229533147487,64,FLEN)
NAN_BOXED(4607715967196717730,64,FLEN)
NAN_BOXED(4604797700722254882,64,FLEN)
NAN_BOXED(4604119487797058292,64,FLEN)
NAN_BOXED(4609144223779725221,64,FLEN)
NAN_BOXED(4606708859859839438,64,FLEN)
NAN_BOXED(4604119487797058292,64,FLEN)
NAN_BOXED(4609144223779725221,64,FLEN)
NAN_BOXED(4606708859859839438,64,FLEN)
NAN_BOXED(4604119487797058292,64,FLEN)
NAN_BOXED(4609144223779725221,64,FLEN)
NAN_BOXED(4606708859859839438,64,FLEN)
NAN_BOXED(4604119487797058292,64,FLEN)
NAN_BOXED(4609144223779725221,64,FLEN)
NAN_BOXED(4606708859859839438,64,FLEN)
NAN_BOXED(4604119487797058292,64,FLEN)
NAN_BOXED(4609144223779725221,64,FLEN)
NAN_BOXED(4606708859859839438,64,FLEN)
NAN_BOXED(4604187370125208332,64,FLEN)
NAN_BOXED(4599047104653787658,64,FLEN)
NAN_BOXED(4596344107497718204,64,FLEN)
NAN_BOXED(4604187370125208332,64,FLEN)
NAN_BOXED(4599047104653787658,64,FLEN)
NAN_BOXED(4596344107497718204,64,FLEN)
NAN_BOXED(4604187370125208332,64,FLEN)
NAN_BOXED(4599047104653787658,64,FLEN)
NAN_BOXED(4596344107497718204,64,FLEN)
NAN_BOXED(4604187370125208332,64,FLEN)
NAN_BOXED(4599047104653787658,64,FLEN)
NAN_BOXED(4596344107497718204,64,FLEN)
NAN_BOXED(4604187370125208332,64,FLEN)
NAN_BOXED(4599047104653787658,64,FLEN)
NAN_BOXED(4596344107497718204,64,FLEN)
NAN_BOXED(4604213060502309010,64,FLEN)
NAN_BOXED(4607898760255306345,64,FLEN)
NAN_BOXED(4605173438008266215,64,FLEN)
NAN_BOXED(4604213060502309010,64,FLEN)
NAN_BOXED(4607898760255306345,64,FLEN)
NAN_BOXED(4605173438008266215,64,FLEN)
NAN_BOXED(4604213060502309010,64,FLEN)
NAN_BOXED(4607898760255306345,64,FLEN)
NAN_BOXED(4605173438008266215,64,FLEN)
NAN_BOXED(4604213060502309010,64,FLEN)
NAN_BOXED(4607898760255306345,64,FLEN)
NAN_BOXED(4605173438008266215,64,FLEN)
NAN_BOXED(4604213060502309010,64,FLEN)
NAN_BOXED(4607898760255306345,64,FLEN)
NAN_BOXED(4605173438008266215,64,FLEN)
NAN_BOXED(4604246232612031214,64,FLEN)
NAN_BOXED(4604611739175635286,64,FLEN)
NAN_BOXED(4602348278149878412,64,FLEN)
NAN_BOXED(4604246232612031214,64,FLEN)
NAN_BOXED(4604611739175635286,64,FLEN)
NAN_BOXED(4602348278149878412,64,FLEN)
NAN_BOXED(4604246232612031214,64,FLEN)
NAN_BOXED(4604611739175635286,64,FLEN)
NAN_BOXED(4602348278149878412,64,FLEN)
NAN_BOXED(4604246232612031214,64,FLEN)
NAN_BOXED(4604611739175635286,64,FLEN)
NAN_BOXED(4602348278149878412,64,FLEN)
NAN_BOXED(4604246232612031214,64,FLEN)
NAN_BOXED(4604611739175635286,64,FLEN)
NAN_BOXED(4602348278149878412,64,FLEN)
NAN_BOXED(4604265592561951433,64,FLEN)
NAN_BOXED(4608334572875281393,64,FLEN)
NAN_BOXED(4605823690233066340,64,FLEN)
NAN_BOXED(4604265592561951433,64,FLEN)
NAN_BOXED(4608334572875281393,64,FLEN)
NAN_BOXED(4605823690233066340,64,FLEN)
NAN_BOXED(4604265592561951433,64,FLEN)
NAN_BOXED(4608334572875281393,64,FLEN)
NAN_BOXED(4605823690233066340,64,FLEN)
NAN_BOXED(4604265592561951433,64,FLEN)
NAN_BOXED(4608334572875281393,64,FLEN)
NAN_BOXED(4605823690233066340,64,FLEN)
NAN_BOXED(4604265592561951433,64,FLEN)
NAN_BOXED(4608334572875281393,64,FLEN)
NAN_BOXED(4605823690233066340,64,FLEN)
NAN_BOXED(4604335440865275991,64,FLEN)
NAN_BOXED(4597584600018235973,64,FLEN)
NAN_BOXED(4594924303949161788,64,FLEN)
NAN_BOXED(4604335440865275991,64,FLEN)
NAN_BOXED(4597584600018235973,64,FLEN)
NAN_BOXED(4594924303949161788,64,FLEN)
NAN_BOXED(4604335440865275991,64,FLEN)
NAN_BOXED(4597584600018235973,64,FLEN)
NAN_BOXED(4594924303949161788,64,FLEN)
NAN_BOXED(4604335440865275991,64,FLEN)
NAN_BOXED(4597584600018235973,64,FLEN)
NAN_BOXED(4594924303949161788,64,FLEN)
NAN_BOXED(4604335440865275991,64,FLEN)
NAN_BOXED(4597584600018235973,64,FLEN)
NAN_BOXED(4594924303949161788,64,FLEN)
NAN_BOXED(4604352832641120580,64,FLEN)
NAN_BOXED(4603617971565707716,64,FLEN)
NAN_BOXED(4601137473666206404,64,FLEN)
NAN_BOXED(4604352832641120580,64,FLEN)
NAN_BOXED(4603617971565707716,64,FLEN)
NAN_BOXED(4601137473666206404,64,FLEN)
NAN_BOXED(4604352832641120580,64,FLEN)
NAN_BOXED(4603617971565707716,64,FLEN)
NAN_BOXED(4601137473666206404,64,FLEN)
NAN_BOXED(4604352832641120580,64,FLEN)
NAN_BOXED(4603617971565707716,64,FLEN)
NAN_BOXED(4601137473666206404,64,FLEN)
NAN_BOXED(4604352832641120580,64,FLEN)
NAN_BOXED(4603617971565707716,64,FLEN)
NAN_BOXED(4601137473666206404,64,FLEN)
NAN_BOXED(4604372241050516901,64,FLEN)
NAN_BOXED(4607228154746396359,64,FLEN)
NAN_BOXED(4604435174407547657,64,FLEN)
NAN_BOXED(4604372241050516901,64,FLEN)
NAN_BOXED(4607228154746396359,64,FLEN)
NAN_BOXED(4604435174407547657,64,FLEN)
NAN_BOXED(4604372241050516901,64,FLEN)
NAN_BOXED(4607228154746396359,64,FLEN)
NAN_BOXED(4604435174407547657,64,FLEN)
NAN_BOXED(4604372241050516901,64,FLEN)
NAN_BOXED(4607228154746396359,64,FLEN)
NAN_BOXED(4604435174407547657,64,FLEN)
NAN_BOXED(4604372241050516901,64,FLEN)
NAN_BOXED(4607228154746396359,64,FLEN)
NAN_BOXED(4604435174407547657,64,FLEN)
NAN_BOXED(4604394259026601926,64,FLEN)
NAN_BOXED(4606568817032403479,64,FLEN)
NAN_BOXED(4603970596408436400,64,FLEN)
NAN_BOXED(4604394259026601926,64,FLEN)
NAN_BOXED(4606568817032403479,64,FLEN)
NAN_BOXED(4603970596408436400,64,FLEN)
NAN_BOXED(4604394259026601926,64,FLEN)
NAN_BOXED(4606568817032403479,64,FLEN)
NAN_BOXED(4603970596408436400,64,FLEN)
NAN_BOXED(4604394259026601926,64,FLEN)
NAN_BOXED(4606568817032403479,64,FLEN)
NAN_BOXED(4603970596408436400,64,FLEN)
NAN_BOXED(4604394259026601926,64,FLEN)
NAN_BOXED(4606568817032403479,64,FLEN)
NAN_BOXED(4603970596408436400,64,FLEN)
NAN_BOXED(4604403861543865323,64,FLEN)
NAN_BOXED(4598461621334570632,64,FLEN)
NAN_BOXED(4595792766374937688,64,FLEN)
NAN_BOXED(4604403861543865323,64,FLEN)
NAN_BOXED(4598461621334570632,64,FLEN)
NAN_BOXED(4595792766374937688,64,FLEN)
NAN_BOXED(4604403861543865323,64,FLEN)
NAN_BOXED(4598461621334570632,64,FLEN)
NAN_BOXED(4595792766374937688,64,FLEN)
NAN_BOXED(4604403861543865323,64,FLEN)
NAN_BOXED(4598461621334570632,64,FLEN)
NAN_BOXED(4595792766374937688,64,FLEN)
NAN_BOXED(4604403861543865323,64,FLEN)
NAN_BOXED(4598461621334570632,64,FLEN)
NAN_BOXED(4595792766374937688,64,FLEN)
NAN_BOXED(4604442027423905746,64,FLEN)
NAN_BOXED(4607644814912670042,64,FLEN)
NAN_BOXED(4605085456645324126,64,FLEN)
NAN_BOXED(4604442027423905746,64,FLEN)
NAN_BOXED(4607644814912670042,64,FLEN)
NAN_BOXED(4605085456645324126,64,FLEN)
NAN_BOXED(4604442027423905746,64,FLEN)
NAN_BOXED(4607644814912670042,64,FLEN)
NAN_BOXED(4605085456645324126,64,FLEN)
NAN_BOXED(4604442027423905746,64,FLEN)
NAN_BOXED(4607644814912670042,64,FLEN)
NAN_BOXED(4605085456645324126,64,FLEN)
NAN_BOXED(4604442027423905746,64,FLEN)
NAN_BOXED(4607644814912670042,64,FLEN)
NAN_BOXED(4605085456645324126,64,FLEN)
NAN_BOXED(4604542782564052292,64,FLEN)
NAN_BOXED(4605062373566234495,64,FLEN)
NAN_BOXED(4603044034590683924,64,FLEN)
NAN_BOXED(4604542782564052292,64,FLEN)
NAN_BOXED(4605062373566234495,64,FLEN)
NAN_BOXED(4603044034590683924,64,FLEN)
NAN_BOXED(4604542782564052292,64,FLEN)
NAN_BOXED(4605062373566234495,64,FLEN)
NAN_BOXED(4603044034590683924,64,FLEN)
NAN_BOXED(4604542782564052292,64,FLEN)
NAN_BOXED(4605062373566234495,64,FLEN)
NAN_BOXED(4603044034590683924,64,FLEN)
NAN_BOXED(4604542782564052292,64,FLEN)
NAN_BOXED(4605062373566234495,64,FLEN)
NAN_BOXED(4603044034590683924,64,FLEN)
NAN_BOXED(4604604483430696296,64,FLEN)
NAN_BOXED(4608679207490605855,64,FLEN)
NAN_BOXED(4606741274057913732,64,FLEN)
NAN_BOXED(4604604483430696296,64,FLEN)
NAN_BOXED(4608679207490605855,64,FLEN)
NAN_BOXED(4606741274057913732,64,FLEN)
NAN_BOXED(4604604483430696296,64,FLEN)
NAN_BOXED(4608679207490605855,64,FLEN)
NAN_BOXED(4606741274057913732,64,FLEN)
NAN_BOXED(4604604483430696296,64,FLEN)
NAN_BOXED(4608679207490605855,64,FLEN)
NAN_BOXED(4606741274057913732,64,FLEN)
NAN_BOXED(4604604483430696296,64,FLEN)
NAN_BOXED(4608679207490605855,64,FLEN)
NAN_BOXED(4606741274057913732,64,FLEN)
NAN_BOXED(4604609753815305250,64,FLEN)
NAN_BOXED(4591161324839605336,64,FLEN)
NAN_BOXED(4589305658343167976,64,FLEN)
NAN_BOXED(4604609753815305250,64,FLEN)
NAN_BOXED(4591161324839605336,64,FLEN)
NAN_BOXED(4589305658343167976,64,FLEN)
NAN_BOXED(4604609753815305250,64,FLEN)
NAN_BOXED(4591161324839605336,64,FLEN)
NAN_BOXED(4589305658343167976,64,FLEN)
NAN_BOXED(4604609753815305250,64,FLEN)
NAN_BOXED(4591161324839605336,64,FLEN)
NAN_BOXED(4589305658343167976,64,FLEN)
NAN_BOXED(4604609753815305250,64,FLEN)
NAN_BOXED(4591161324839605336,64,FLEN)
NAN_BOXED(4589305658343167976,64,FLEN)
NAN_BOXED(4604642989549738453,64,FLEN)
NAN_BOXED(4607431538472965386,64,FLEN)
NAN_BOXED(4605000758641471654,64,FLEN)
NAN_BOXED(4604642989549738453,64,FLEN)
NAN_BOXED(4607431538472965386,64,FLEN)
NAN_BOXED(4605000758641471654,64,FLEN)
NAN_BOXED(4604642989549738453,64,FLEN)
NAN_BOXED(4607431538472965386,64,FLEN)
NAN_BOXED(4605000758641471654,64,FLEN)
NAN_BOXED(4604642989549738453,64,FLEN)
NAN_BOXED(4607431538472965386,64,FLEN)
NAN_BOXED(4605000758641471654,64,FLEN)
NAN_BOXED(4604642989549738453,64,FLEN)
NAN_BOXED(4607431538472965386,64,FLEN)
NAN_BOXED(4605000758641471654,64,FLEN)
NAN_BOXED(4604674624795223640,64,FLEN)
NAN_BOXED(4605473853853201943,64,FLEN)
NAN_BOXED(4603441760319691667,64,FLEN)
NAN_BOXED(4604674624795223640,64,FLEN)
NAN_BOXED(4605473853853201943,64,FLEN)
NAN_BOXED(4603441760319691667,64,FLEN)
NAN_BOXED(4604674624795223640,64,FLEN)
NAN_BOXED(4605473853853201943,64,FLEN)
NAN_BOXED(4603441760319691667,64,FLEN)
NAN_BOXED(4604674624795223640,64,FLEN)
NAN_BOXED(4605473853853201943,64,FLEN)
NAN_BOXED(4603441760319691667,64,FLEN)
NAN_BOXED(4604674624795223640,64,FLEN)
NAN_BOXED(4605473853853201943,64,FLEN)
NAN_BOXED(4603441760319691667,64,FLEN)
NAN_BOXED(4604704040613658140,64,FLEN)
NAN_BOXED(4608592112274848260,64,FLEN)
NAN_BOXED(4606747658434945155,64,FLEN)
NAN_BOXED(4604704040613658140,64,FLEN)
NAN_BOXED(4608592112274848260,64,FLEN)
NAN_BOXED(4606747658434945155,64,FLEN)
NAN_BOXED(4604704040613658140,64,FLEN)
NAN_BOXED(4608592112274848260,64,FLEN)
NAN_BOXED(4606747658434945155,64,FLEN)
NAN_BOXED(4604704040613658140,64,FLEN)
NAN_BOXED(4608592112274848260,64,FLEN)
NAN_BOXED(4606747658434945155,64,FLEN)
NAN_BOXED(4604704040613658140,64,FLEN)
NAN_BOXED(4608592112274848260,64,FLEN)
NAN_BOXED(4606747658434945155,64,FLEN)
NAN_BOXED(4604746456911975863,64,FLEN)
NAN_BOXED(4608052148333712118,64,FLEN)
NAN_BOXED(4606015486062791759,64,FLEN)
NAN_BOXED(4604746456911975863,64,FLEN)
NAN_BOXED(4608052148333712118,64,FLEN)
NAN_BOXED(4606015486062791759,64,FLEN)
NAN_BOXED(4604746456911975863,64,FLEN)
NAN_BOXED(4608052148333712118,64,FLEN)
NAN_BOXED(4606015486062791759,64,FLEN)
NAN_BOXED(4604746456911975863,64,FLEN)
NAN_BOXED(4608052148333712118,64,FLEN)
NAN_BOXED(4606015486062791759,64,FLEN)
NAN_BOXED(4604746456911975863,64,FLEN)
NAN_BOXED(4608052148333712118,64,FLEN)
NAN_BOXED(4606015486062791759,64,FLEN)
NAN_BOXED(4604769752689369132,64,FLEN)
NAN_BOXED(4608035201162187907,64,FLEN)
NAN_BOXED(4606018465278706148,64,FLEN)
NAN_BOXED(4604769752689369132,64,FLEN)
NAN_BOXED(4608035201162187907,64,FLEN)
NAN_BOXED(4606018465278706148,64,FLEN)
NAN_BOXED(4604769752689369132,64,FLEN)
NAN_BOXED(4608035201162187907,64,FLEN)
NAN_BOXED(4606018465278706148,64,FLEN)
NAN_BOXED(4604769752689369132,64,FLEN)
NAN_BOXED(4608035201162187907,64,FLEN)
NAN_BOXED(4606018465278706148,64,FLEN)
NAN_BOXED(4604769752689369132,64,FLEN)
NAN_BOXED(4608035201162187907,64,FLEN)
NAN_BOXED(4606018465278706148,64,FLEN)
NAN_BOXED(4604811336043142792,64,FLEN)
NAN_BOXED(4587635662038013963,64,FLEN)
NAN_BOXED(4585667961967271856,64,FLEN)
NAN_BOXED(4604811336043142792,64,FLEN)
NAN_BOXED(4587635662038013963,64,FLEN)
NAN_BOXED(4585667961967271856,64,FLEN)
NAN_BOXED(4604811336043142792,64,FLEN)
NAN_BOXED(4587635662038013963,64,FLEN)
NAN_BOXED(4585667961967271856,64,FLEN)
NAN_BOXED(4604811336043142792,64,FLEN)
NAN_BOXED(4587635662038013963,64,FLEN)
NAN_BOXED(4585667961967271856,64,FLEN)
NAN_BOXED(4604811336043142792,64,FLEN)
NAN_BOXED(4587635662038013963,64,FLEN)
NAN_BOXED(4585667961967271856,64,FLEN)
NAN_BOXED(4604830502190131552,64,FLEN)
NAN_BOXED(4605895314940778441,64,FLEN)
NAN_BOXED(4603879480708952441,64,FLEN)
NAN_BOXED(4604830502190131552,64,FLEN)
NAN_BOXED(4605895314940778441,64,FLEN)
NAN_BOXED(4603879480708952441,64,FLEN)
NAN_BOXED(4604830502190131552,64,FLEN)
NAN_BOXED(4605895314940778441,64,FLEN)
NAN_BOXED(4603879480708952441,64,FLEN)
NAN_BOXED(4604830502190131552,64,FLEN)
NAN_BOXED(4605895314940778441,64,FLEN)
NAN_BOXED(4603879480708952441,64,FLEN)
NAN_BOXED(4604830502190131552,64,FLEN)
NAN_BOXED(4605895314940778441,64,FLEN)
NAN_BOXED(4603879480708952441,64,FLEN)
NAN_BOXED(4604846268409353521,64,FLEN)
NAN_BOXED(4605240870311570136,64,FLEN)
NAN_BOXED(4603408289247119562,64,FLEN)
NAN_BOXED(4604846268409353521,64,FLEN)
NAN_BOXED(4605240870311570136,64,FLEN)
NAN_BOXED(4603408289247119562,64,FLEN)
NAN_BOXED(4604846268409353521,64,FLEN)
NAN_BOXED(4605240870311570136,64,FLEN)
NAN_BOXED(4603408289247119562,64,FLEN)
NAN_BOXED(4604846268409353521,64,FLEN)
NAN_BOXED(4605240870311570136,64,FLEN)
NAN_BOXED(4603408289247119562,64,FLEN)
NAN_BOXED(4604846268409353521,64,FLEN)
NAN_BOXED(4605240870311570136,64,FLEN)
NAN_BOXED(4603408289247119562,64,FLEN)
NAN_BOXED(4604847983668344100,64,FLEN)
NAN_BOXED(4601148456572166690,64,FLEN)
NAN_BOXED(4599210652193041632,64,FLEN)
NAN_BOXED(4604847983668344100,64,FLEN)
NAN_BOXED(4601148456572166690,64,FLEN)
NAN_BOXED(4599210652193041632,64,FLEN)
NAN_BOXED(4604847983668344100,64,FLEN)
NAN_BOXED(4601148456572166690,64,FLEN)
NAN_BOXED(4599210652193041632,64,FLEN)
NAN_BOXED(4604847983668344100,64,FLEN)
NAN_BOXED(4601148456572166690,64,FLEN)
NAN_BOXED(4599210652193041632,64,FLEN)
NAN_BOXED(4604847983668344100,64,FLEN)
NAN_BOXED(4601148456572166690,64,FLEN)
NAN_BOXED(4599210652193041632,64,FLEN)
NAN_BOXED(4604880233823661033,64,FLEN)
NAN_BOXED(4607741113183786337,64,FLEN)
NAN_BOXED(4605712024864244976,64,FLEN)
NAN_BOXED(4604880233823661033,64,FLEN)
NAN_BOXED(4607741113183786337,64,FLEN)
NAN_BOXED(4605712024864244976,64,FLEN)
NAN_BOXED(4604880233823661033,64,FLEN)
NAN_BOXED(4607741113183786337,64,FLEN)
NAN_BOXED(4605712024864244976,64,FLEN)
NAN_BOXED(4604880233823661033,64,FLEN)
NAN_BOXED(4607741113183786337,64,FLEN)
NAN_BOXED(4605712024864244976,64,FLEN)
NAN_BOXED(4604880233823661033,64,FLEN)
NAN_BOXED(4607741113183786337,64,FLEN)
NAN_BOXED(4605712024864244976,64,FLEN)
NAN_BOXED(4604910282923153867,64,FLEN)
NAN_BOXED(4606036474470978603,64,FLEN)
NAN_BOXED(4604053411939697696,64,FLEN)
NAN_BOXED(4604910282923153867,64,FLEN)
NAN_BOXED(4606036474470978603,64,FLEN)
NAN_BOXED(4604053411939697696,64,FLEN)
NAN_BOXED(4604910282923153867,64,FLEN)
NAN_BOXED(4606036474470978603,64,FLEN)
NAN_BOXED(4604053411939697696,64,FLEN)
NAN_BOXED(4604910282923153867,64,FLEN)
NAN_BOXED(4606036474470978603,64,FLEN)
NAN_BOXED(4604053411939697696,64,FLEN)
NAN_BOXED(4604910282923153867,64,FLEN)
NAN_BOXED(4606036474470978603,64,FLEN)
NAN_BOXED(4604053411939697696,64,FLEN)
NAN_BOXED(4604914092474768654,64,FLEN)
NAN_BOXED(4606687230443255498,64,FLEN)
NAN_BOXED(4604543609784422249,64,FLEN)
NAN_BOXED(4604914092474768654,64,FLEN)
NAN_BOXED(4606687230443255498,64,FLEN)
NAN_BOXED(4604543609784422249,64,FLEN)
NAN_BOXED(4604914092474768654,64,FLEN)
NAN_BOXED(4606687230443255498,64,FLEN)
NAN_BOXED(4604543609784422249,64,FLEN)
NAN_BOXED(4604914092474768654,64,FLEN)
NAN_BOXED(4606687230443255498,64,FLEN)
NAN_BOXED(4604543609784422249,64,FLEN)
NAN_BOXED(4604914092474768654,64,FLEN)
NAN_BOXED(4606687230443255498,64,FLEN)
NAN_BOXED(4604543609784422249,64,FLEN)
NAN_BOXED(4604926576949864947,64,FLEN)
NAN_BOXED(4608595008219320668,64,FLEN)
NAN_BOXED(4607044193262313387,64,FLEN)
NAN_BOXED(4604926576949864947,64,FLEN)
NAN_BOXED(4608595008219320668,64,FLEN)
NAN_BOXED(4607044193262313387,64,FLEN)
NAN_BOXED(4604926576949864947,64,FLEN)
NAN_BOXED(4608595008219320668,64,FLEN)
NAN_BOXED(4607044193262313387,64,FLEN)
NAN_BOXED(4604926576949864947,64,FLEN)
NAN_BOXED(4608595008219320668,64,FLEN)
NAN_BOXED(4607044193262313387,64,FLEN)
NAN_BOXED(4604926576949864947,64,FLEN)
NAN_BOXED(4608595008219320668,64,FLEN)
NAN_BOXED(4607044193262313387,64,FLEN)
NAN_BOXED(4604936701400164367,64,FLEN)
NAN_BOXED(4606985598974125987,64,FLEN)
NAN_BOXED(4604788953621547548,64,FLEN)
NAN_BOXED(4604936701400164367,64,FLEN)
NAN_BOXED(4606985598974125987,64,FLEN)
NAN_BOXED(4604788953621547548,64,FLEN)
NAN_BOXED(4604936701400164367,64,FLEN)
NAN_BOXED(4606985598974125987,64,FLEN)
NAN_BOXED(4604788953621547548,64,FLEN)
NAN_BOXED(4604936701400164367,64,FLEN)
NAN_BOXED(4606985598974125987,64,FLEN)
NAN_BOXED(4604788953621547548,64,FLEN)
NAN_BOXED(4604936701400164367,64,FLEN)
NAN_BOXED(4606985598974125987,64,FLEN)
NAN_BOXED(4604788953621547548,64,FLEN)
NAN_BOXED(4604944180936710719,64,FLEN)
NAN_BOXED(4606841756880118025,64,FLEN)
NAN_BOXED(4604688171569301969,64,FLEN)
NAN_BOXED(4604944180936710719,64,FLEN)
NAN_BOXED(4606841756880118025,64,FLEN)
NAN_BOXED(4604688171569301969,64,FLEN)
NAN_BOXED(4604944180936710719,64,FLEN)
NAN_BOXED(4606841756880118025,64,FLEN)
NAN_BOXED(4604688171569301969,64,FLEN)
NAN_BOXED(4604944180936710719,64,FLEN)
NAN_BOXED(4606841756880118025,64,FLEN)
NAN_BOXED(4604688171569301969,64,FLEN)
NAN_BOXED(4604944180936710719,64,FLEN)
NAN_BOXED(4606841756880118025,64,FLEN)
NAN_BOXED(4604688171569301969,64,FLEN)
NAN_BOXED(4604980640521959936,64,FLEN)
NAN_BOXED(4586709582772133019,64,FLEN)
NAN_BOXED(4585108760926024224,64,FLEN)
NAN_BOXED(4604980640521959936,64,FLEN)
NAN_BOXED(4586709582772133019,64,FLEN)
NAN_BOXED(4585108760926024224,64,FLEN)
NAN_BOXED(4604980640521959936,64,FLEN)
NAN_BOXED(4586709582772133019,64,FLEN)
NAN_BOXED(4585108760926024224,64,FLEN)
NAN_BOXED(4604980640521959936,64,FLEN)
NAN_BOXED(4586709582772133019,64,FLEN)
NAN_BOXED(4585108760926024224,64,FLEN)
NAN_BOXED(4604980640521959936,64,FLEN)
NAN_BOXED(4586709582772133019,64,FLEN)
NAN_BOXED(4585108760926024224,64,FLEN)
NAN_BOXED(4604983792890555956,64,FLEN)
NAN_BOXED(4603246304007997488,64,FLEN)
NAN_BOXED(4601338120797492990,64,FLEN)
NAN_BOXED(4604983792890555956,64,FLEN)
NAN_BOXED(4603246304007997488,64,FLEN)
NAN_BOXED(4601338120797492990,64,FLEN)
NAN_BOXED(4604983792890555956,64,FLEN)
NAN_BOXED(4603246304007997488,64,FLEN)
NAN_BOXED(4601338120797492990,64,FLEN)
NAN_BOXED(4604983792890555956,64,FLEN)
NAN_BOXED(4603246304007997488,64,FLEN)
NAN_BOXED(4601338120797492990,64,FLEN)
NAN_BOXED(4604983792890555956,64,FLEN)
NAN_BOXED(4603246304007997488,64,FLEN)
NAN_BOXED(4601338120797492990,64,FLEN)
NAN_BOXED(4605015832562630126,64,FLEN)
NAN_BOXED(4603080072797945280,64,FLEN)
NAN_BOXED(4601121705579274168,64,FLEN)
NAN_BOXED(4605015832562630126,64,FLEN)
NAN_BOXED(4603080072797945280,64,FLEN)
NAN_BOXED(4601121705579274168,64,FLEN)
NAN_BOXED(4605015832562630126,64,FLEN)
NAN_BOXED(4603080072797945280,64,FLEN)
NAN_BOXED(4601121705579274168,64,FLEN)
NAN_BOXED(4605015832562630126,64,FLEN)
NAN_BOXED(4603080072797945280,64,FLEN)
NAN_BOXED(4601121705579274168,64,FLEN)
NAN_BOXED(4605015832562630126,64,FLEN)
NAN_BOXED(4603080072797945280,64,FLEN)
NAN_BOXED(4601121705579274168,64,FLEN)
NAN_BOXED(4605080714200982974,64,FLEN)
NAN_BOXED(4604226167310896932,64,FLEN)
NAN_BOXED(4602814262856709584,64,FLEN)
NAN_BOXED(4605080714200982974,64,FLEN)
NAN_BOXED(4604226167310896932,64,FLEN)
NAN_BOXED(4602814262856709584,64,FLEN)
NAN_BOXED(4605080714200982974,64,FLEN)
NAN_BOXED(4604226167310896932,64,FLEN)
NAN_BOXED(4602814262856709584,64,FLEN)
NAN_BOXED(4605080714200982974,64,FLEN)
NAN_BOXED(4604226167310896932,64,FLEN)
NAN_BOXED(4602814262856709584,64,FLEN)
NAN_BOXED(4605080714200982974,64,FLEN)
NAN_BOXED(4604226167310896932,64,FLEN)
NAN_BOXED(4602814262856709584,64,FLEN)
NAN_BOXED(4605098300583061930,64,FLEN)
NAN_BOXED(4593963052954470800,64,FLEN)
NAN_BOXED(4592035502121983560,64,FLEN)
NAN_BOXED(4605098300583061930,64,FLEN)
NAN_BOXED(4593963052954470800,64,FLEN)
NAN_BOXED(4592035502121983560,64,FLEN)
NAN_BOXED(4605098300583061930,64,FLEN)
NAN_BOXED(4593963052954470800,64,FLEN)
NAN_BOXED(4592035502121983560,64,FLEN)
NAN_BOXED(4605098300583061930,64,FLEN)
NAN_BOXED(4593963052954470800,64,FLEN)
NAN_BOXED(4592035502121983560,64,FLEN)
NAN_BOXED(4605098300583061930,64,FLEN)
NAN_BOXED(4593963052954470800,64,FLEN)
NAN_BOXED(4592035502121983560,64,FLEN)
NAN_BOXED(4605111296913366457,64,FLEN)
NAN_BOXED(4608344960999837502,64,FLEN)
NAN_BOXED(4606901749730845210,64,FLEN)
NAN_BOXED(4605111296913366457,64,FLEN)
NAN_BOXED(4608344960999837502,64,FLEN)
NAN_BOXED(4606901749730845210,64,FLEN)
NAN_BOXED(4605111296913366457,64,FLEN)
NAN_BOXED(4608344960999837502,64,FLEN)
NAN_BOXED(4606901749730845210,64,FLEN)
NAN_BOXED(4605111296913366457,64,FLEN)
NAN_BOXED(4608344960999837502,64,FLEN)
NAN_BOXED(4606901749730845210,64,FLEN)
NAN_BOXED(4605111296913366457,64,FLEN)
NAN_BOXED(4608344960999837502,64,FLEN)
NAN_BOXED(4606901749730845210,64,FLEN)
NAN_BOXED(4605140131034384564,64,FLEN)
NAN_BOXED(4603793926394391570,64,FLEN)
NAN_BOXED(4602361068164925542,64,FLEN)
NAN_BOXED(4605140131034384564,64,FLEN)
NAN_BOXED(4603793926394391570,64,FLEN)
NAN_BOXED(4602361068164925542,64,FLEN)
NAN_BOXED(4605140131034384564,64,FLEN)
NAN_BOXED(4603793926394391570,64,FLEN)
NAN_BOXED(4602361068164925542,64,FLEN)
NAN_BOXED(4605140131034384564,64,FLEN)
NAN_BOXED(4603793926394391570,64,FLEN)
NAN_BOXED(4602361068164925542,64,FLEN)
NAN_BOXED(4605140131034384564,64,FLEN)
NAN_BOXED(4603793926394391570,64,FLEN)
NAN_BOXED(4602361068164925542,64,FLEN)
NAN_BOXED(4605196670728627230,64,FLEN)
NAN_BOXED(4607108660350905703,64,FLEN)
NAN_BOXED(4605139173238547291,64,FLEN)
NAN_BOXED(4605196670728627230,64,FLEN)
NAN_BOXED(4607108660350905703,64,FLEN)
NAN_BOXED(4605139173238547291,64,FLEN)
NAN_BOXED(4605196670728627230,64,FLEN)
NAN_BOXED(4607108660350905703,64,FLEN)
NAN_BOXED(4605139173238547291,64,FLEN)
NAN_BOXED(4605196670728627230,64,FLEN)
NAN_BOXED(4607108660350905703,64,FLEN)
NAN_BOXED(4605139173238547291,64,FLEN)
NAN_BOXED(4605196670728627230,64,FLEN)
NAN_BOXED(4607108660350905703,64,FLEN)
NAN_BOXED(4605139173238547291,64,FLEN)
NAN_BOXED(4605204547454068166,64,FLEN)
NAN_BOXED(4588931668882388638,64,FLEN)
NAN_BOXED(4587005697429461328,64,FLEN)
NAN_BOXED(4605204547454068166,64,FLEN)
NAN_BOXED(4588931668882388638,64,FLEN)
NAN_BOXED(4587005697429461328,64,FLEN)
NAN_BOXED(4605204547454068166,64,FLEN)
NAN_BOXED(4588931668882388638,64,FLEN)
NAN_BOXED(4587005697429461328,64,FLEN)
NAN_BOXED(4605204547454068166,64,FLEN)
NAN_BOXED(4588931668882388638,64,FLEN)
NAN_BOXED(4587005697429461328,64,FLEN)
NAN_BOXED(4605204547454068166,64,FLEN)
NAN_BOXED(4588931668882388638,64,FLEN)
NAN_BOXED(4587005697429461328,64,FLEN)
NAN_BOXED(4605284522675902640,64,FLEN)
NAN_BOXED(4602951355103069097,64,FLEN)
NAN_BOXED(4601211143473008428,64,FLEN)
NAN_BOXED(4605284522675902640,64,FLEN)
NAN_BOXED(4602951355103069097,64,FLEN)
NAN_BOXED(4601211143473008428,64,FLEN)
NAN_BOXED(4605284522675902640,64,FLEN)
NAN_BOXED(4602951355103069097,64,FLEN)
NAN_BOXED(4601211143473008428,64,FLEN)
NAN_BOXED(4605284522675902640,64,FLEN)
NAN_BOXED(4602951355103069097,64,FLEN)
NAN_BOXED(4601211143473008428,64,FLEN)
NAN_BOXED(4605284522675902640,64,FLEN)
NAN_BOXED(4602951355103069097,64,FLEN)
NAN_BOXED(4601211143473008428,64,FLEN)
NAN_BOXED(4605292373148529323,64,FLEN)
NAN_BOXED(4589626499378066734,64,FLEN)
NAN_BOXED(4588002520859810032,64,FLEN)
NAN_BOXED(4605292373148529323,64,FLEN)
NAN_BOXED(4589626499378066734,64,FLEN)
NAN_BOXED(4588002520859810032,64,FLEN)
NAN_BOXED(4605292373148529323,64,FLEN)
NAN_BOXED(4589626499378066734,64,FLEN)
NAN_BOXED(4588002520859810032,64,FLEN)
NAN_BOXED(4605292373148529323,64,FLEN)
NAN_BOXED(4589626499378066734,64,FLEN)
NAN_BOXED(4588002520859810032,64,FLEN)
NAN_BOXED(4605292373148529323,64,FLEN)
NAN_BOXED(4589626499378066734,64,FLEN)
NAN_BOXED(4588002520859810032,64,FLEN)
NAN_BOXED(4605302047191649360,64,FLEN)
NAN_BOXED(4607446862041742134,64,FLEN)
NAN_BOXED(4605720521648074485,64,FLEN)
NAN_BOXED(4605302047191649360,64,FLEN)
NAN_BOXED(4607446862041742134,64,FLEN)
NAN_BOXED(4605720521648074485,64,FLEN)
NAN_BOXED(4605302047191649360,64,FLEN)
NAN_BOXED(4607446862041742134,64,FLEN)
NAN_BOXED(4605720521648074485,64,FLEN)
NAN_BOXED(4605302047191649360,64,FLEN)
NAN_BOXED(4607446862041742134,64,FLEN)
NAN_BOXED(4605720521648074485,64,FLEN)
NAN_BOXED(4605302047191649360,64,FLEN)
NAN_BOXED(4607446862041742134,64,FLEN)
NAN_BOXED(4605720521648074485,64,FLEN)
NAN_BOXED(4605372151405600067,64,FLEN)
NAN_BOXED(4603758240097042246,64,FLEN)
NAN_BOXED(4602593509475238834,64,FLEN)
NAN_BOXED(4605372151405600067,64,FLEN)
NAN_BOXED(4603758240097042246,64,FLEN)
NAN_BOXED(4602593509475238834,64,FLEN)
NAN_BOXED(4605372151405600067,64,FLEN)
NAN_BOXED(4603758240097042246,64,FLEN)
NAN_BOXED(4602593509475238834,64,FLEN)
NAN_BOXED(4605372151405600067,64,FLEN)
NAN_BOXED(4603758240097042246,64,FLEN)
NAN_BOXED(4602593509475238834,64,FLEN)
NAN_BOXED(4605372151405600067,64,FLEN)
NAN_BOXED(4603758240097042246,64,FLEN)
NAN_BOXED(4602593509475238834,64,FLEN)
NAN_BOXED(4605410647191463974,64,FLEN)
NAN_BOXED(4607096447772116790,64,FLEN)
NAN_BOXED(4605341587194626902,64,FLEN)
NAN_BOXED(4605410647191463974,64,FLEN)
NAN_BOXED(4607096447772116790,64,FLEN)
NAN_BOXED(4605341587194626902,64,FLEN)
NAN_BOXED(4605410647191463974,64,FLEN)
NAN_BOXED(4607096447772116790,64,FLEN)
NAN_BOXED(4605341587194626902,64,FLEN)
NAN_BOXED(4605410647191463974,64,FLEN)
NAN_BOXED(4607096447772116790,64,FLEN)
NAN_BOXED(4605341587194626902,64,FLEN)
NAN_BOXED(4605410647191463974,64,FLEN)
NAN_BOXED(4607096447772116790,64,FLEN)
NAN_BOXED(4605341587194626902,64,FLEN)
NAN_BOXED(4605419307589096339,64,FLEN)
NAN_BOXED(4605807342994787716,64,FLEN)
NAN_BOXED(4604313395538270180,64,FLEN)
NAN_BOXED(4605419307589096339,64,FLEN)
NAN_BOXED(4605807342994787716,64,FLEN)
NAN_BOXED(4604313395538270180,64,FLEN)
NAN_BOXED(4605419307589096339,64,FLEN)
NAN_BOXED(4605807342994787716,64,FLEN)
NAN_BOXED(4604313395538270180,64,FLEN)
NAN_BOXED(4605419307589096339,64,FLEN)
NAN_BOXED(4605807342994787716,64,FLEN)
NAN_BOXED(4604313395538270180,64,FLEN)
NAN_BOXED(4605419307589096339,64,FLEN)
NAN_BOXED(4605807342994787716,64,FLEN)
NAN_BOXED(4604313395538270180,64,FLEN)
NAN_BOXED(4605475946385992808,64,FLEN)
NAN_BOXED(4604011964352728184,64,FLEN)
NAN_BOXED(4602906155130580119,64,FLEN)
NAN_BOXED(4605475946385992808,64,FLEN)
NAN_BOXED(4604011964352728184,64,FLEN)
NAN_BOXED(4602906155130580119,64,FLEN)
NAN_BOXED(4605475946385992808,64,FLEN)
NAN_BOXED(4604011964352728184,64,FLEN)
NAN_BOXED(4602906155130580119,64,FLEN)
NAN_BOXED(4605475946385992808,64,FLEN)
NAN_BOXED(4604011964352728184,64,FLEN)
NAN_BOXED(4602906155130580119,64,FLEN)
NAN_BOXED(4605475946385992808,64,FLEN)
NAN_BOXED(4604011964352728184,64,FLEN)
NAN_BOXED(4602906155130580119,64,FLEN)
NAN_BOXED(4605554580285454481,64,FLEN)
NAN_BOXED(4602775161007682228,64,FLEN)
NAN_BOXED(4601208841305992294,64,FLEN)
NAN_BOXED(4605554580285454481,64,FLEN)
NAN_BOXED(4602775161007682228,64,FLEN)
NAN_BOXED(4601208841305992294,64,FLEN)
NAN_BOXED(4605554580285454481,64,FLEN)
NAN_BOXED(4602775161007682228,64,FLEN)
NAN_BOXED(4601208841305992294,64,FLEN)
NAN_BOXED(4605554580285454481,64,FLEN)
NAN_BOXED(4602775161007682228,64,FLEN)
NAN_BOXED(4601208841305992294,64,FLEN)
NAN_BOXED(4605554580285454481,64,FLEN)
NAN_BOXED(4602775161007682228,64,FLEN)
NAN_BOXED(4601208841305992294,64,FLEN)
NAN_BOXED(4605574438111652134,64,FLEN)
NAN_BOXED(4598295720715121966,64,FLEN)
NAN_BOXED(4596765217044797212,64,FLEN)
NAN_BOXED(4605574438111652134,64,FLEN)
NAN_BOXED(4598295720715121966,64,FLEN)
NAN_BOXED(4596765217044797212,64,FLEN)
NAN_BOXED(4605574438111652134,64,FLEN)
NAN_BOXED(4598295720715121966,64,FLEN)
NAN_BOXED(4596765217044797212,64,FLEN)
NAN_BOXED(4605574438111652134,64,FLEN)
NAN_BOXED(4598295720715121966,64,FLEN)
NAN_BOXED(4596765217044797212,64,FLEN)
NAN_BOXED(4605574438111652134,64,FLEN)
NAN_BOXED(4598295720715121966,64,FLEN)
NAN_BOXED(4596765217044797212,64,FLEN)
NAN_BOXED(4605595190607286794,64,FLEN)
NAN_BOXED(4606572969504272889,64,FLEN)
NAN_BOXED(4605093137082068430,64,FLEN)
NAN_BOXED(4605595190607286794,64,FLEN)
NAN_BOXED(4606572969504272889,64,FLEN)
NAN_BOXED(4605093137082068430,64,FLEN)
NAN_BOXED(4605595190607286794,64,FLEN)
NAN_BOXED(4606572969504272889,64,FLEN)
NAN_BOXED(4605093137082068430,64,FLEN)
NAN_BOXED(4605595190607286794,64,FLEN)
NAN_BOXED(4606572969504272889,64,FLEN)
NAN_BOXED(4605093137082068430,64,FLEN)
NAN_BOXED(4605595190607286794,64,FLEN)
NAN_BOXED(4606572969504272889,64,FLEN)
NAN_BOXED(4605093137082068430,64,FLEN)
NAN_BOXED(4605630057622211371,64,FLEN)
NAN_BOXED(4603905099600519510,64,FLEN)
NAN_BOXED(4602917573611620948,64,FLEN)
NAN_BOXED(4605630057622211371,64,FLEN)
NAN_BOXED(4603905099600519510,64,FLEN)
NAN_BOXED(4602917573611620948,64,FLEN)
NAN_BOXED(4605630057622211371,64,FLEN)
NAN_BOXED(4603905099600519510,64,FLEN)
NAN_BOXED(4602917573611620948,64,FLEN)
NAN_BOXED(4605630057622211371,64,FLEN)
NAN_BOXED(4603905099600519510,64,FLEN)
NAN_BOXED(4602917573611620948,64,FLEN)
NAN_BOXED(4605630057622211371,64,FLEN)
NAN_BOXED(4603905099600519510,64,FLEN)
NAN_BOXED(4602917573611620948,64,FLEN)
NAN_BOXED(4605668773566769948,64,FLEN)
NAN_BOXED(4607458240175216547,64,FLEN)
NAN_BOXED(4606127713647228248,64,FLEN)
NAN_BOXED(4605668773566769948,64,FLEN)
NAN_BOXED(4607458240175216547,64,FLEN)
NAN_BOXED(4606127713647228248,64,FLEN)
NAN_BOXED(4605668773566769948,64,FLEN)
NAN_BOXED(4607458240175216547,64,FLEN)
NAN_BOXED(4606127713647228248,64,FLEN)
NAN_BOXED(4605668773566769948,64,FLEN)
NAN_BOXED(4607458240175216547,64,FLEN)
NAN_BOXED(4606127713647228248,64,FLEN)
NAN_BOXED(4605668773566769948,64,FLEN)
NAN_BOXED(4607458240175216547,64,FLEN)
NAN_BOXED(4606127713647228248,64,FLEN)
NAN_BOXED(4605677837911049315,64,FLEN)
NAN_BOXED(4598603923315298845,64,FLEN)
NAN_BOXED(4597384823096439008,64,FLEN)
NAN_BOXED(4605677837911049315,64,FLEN)
NAN_BOXED(4598603923315298845,64,FLEN)
NAN_BOXED(4597384823096439008,64,FLEN)
NAN_BOXED(4605677837911049315,64,FLEN)
NAN_BOXED(4598603923315298845,64,FLEN)
NAN_BOXED(4597384823096439008,64,FLEN)
NAN_BOXED(4605677837911049315,64,FLEN)
NAN_BOXED(4598603923315298845,64,FLEN)
NAN_BOXED(4597384823096439008,64,FLEN)
NAN_BOXED(4605677837911049315,64,FLEN)
NAN_BOXED(4598603923315298845,64,FLEN)
NAN_BOXED(4597384823096439008,64,FLEN)
NAN_BOXED(4605728061825792389,64,FLEN)
NAN_BOXED(4604281586875549041,64,FLEN)
NAN_BOXED(4603295615802544597,64,FLEN)
NAN_BOXED(4605728061825792389,64,FLEN)
NAN_BOXED(4604281586875549041,64,FLEN)
NAN_BOXED(4603295615802544597,64,FLEN)
NAN_BOXED(4605728061825792389,64,FLEN)
NAN_BOXED(4604281586875549041,64,FLEN)
NAN_BOXED(4603295615802544597,64,FLEN)
NAN_BOXED(4605728061825792389,64,FLEN)
NAN_BOXED(4604281586875549041,64,FLEN)
NAN_BOXED(4603295615802544597,64,FLEN)
NAN_BOXED(4605728061825792389,64,FLEN)
NAN_BOXED(4604281586875549041,64,FLEN)
NAN_BOXED(4603295615802544597,64,FLEN)
NAN_BOXED(4605763488221790629,64,FLEN)
NAN_BOXED(4604100161197833022,64,FLEN)
NAN_BOXED(4603166787720989268,64,FLEN)
NAN_BOXED(4605763488221790629,64,FLEN)
NAN_BOXED(4604100161197833022,64,FLEN)
NAN_BOXED(4603166787720989268,64,FLEN)
NAN_BOXED(4605763488221790629,64,FLEN)
NAN_BOXED(4604100161197833022,64,FLEN)
NAN_BOXED(4603166787720989268,64,FLEN)
NAN_BOXED(4605763488221790629,64,FLEN)
NAN_BOXED(4604100161197833022,64,FLEN)
NAN_BOXED(4603166787720989268,64,FLEN)
NAN_BOXED(4605763488221790629,64,FLEN)
NAN_BOXED(4604100161197833022,64,FLEN)
NAN_BOXED(4603166787720989268,64,FLEN)
NAN_BOXED(4605791287285510782,64,FLEN)
NAN_BOXED(4599719646812630226,64,FLEN)
NAN_BOXED(4598785549478277810,64,FLEN)
NAN_BOXED(4605791287285510782,64,FLEN)
NAN_BOXED(4599719646812630226,64,FLEN)
NAN_BOXED(4598785549478277810,64,FLEN)
NAN_BOXED(4605791287285510782,64,FLEN)
NAN_BOXED(4599719646812630226,64,FLEN)
NAN_BOXED(4598785549478277810,64,FLEN)
NAN_BOXED(4605791287285510782,64,FLEN)
NAN_BOXED(4599719646812630226,64,FLEN)
NAN_BOXED(4598785549478277810,64,FLEN)
NAN_BOXED(4605791287285510782,64,FLEN)
NAN_BOXED(4599719646812630226,64,FLEN)
NAN_BOXED(4598785549478277810,64,FLEN)
NAN_BOXED(4605813463812691153,64,FLEN)
NAN_BOXED(4603603199775208541,64,FLEN)
NAN_BOXED(4602778230725815887,64,FLEN)
NAN_BOXED(4605813463812691153,64,FLEN)
NAN_BOXED(4603603199775208541,64,FLEN)
NAN_BOXED(4602778230725815887,64,FLEN)
NAN_BOXED(4605813463812691153,64,FLEN)
NAN_BOXED(4603603199775208541,64,FLEN)
NAN_BOXED(4602778230725815887,64,FLEN)
NAN_BOXED(4605813463812691153,64,FLEN)
NAN_BOXED(4603603199775208541,64,FLEN)
NAN_BOXED(4602778230725815887,64,FLEN)
NAN_BOXED(4605813463812691153,64,FLEN)
NAN_BOXED(4603603199775208541,64,FLEN)
NAN_BOXED(4602778230725815887,64,FLEN)
NAN_BOXED(4605837031935477203,64,FLEN)
NAN_BOXED(4591511454711062055,64,FLEN)
NAN_BOXED(4590488727289521824,64,FLEN)
NAN_BOXED(4605837031935477203,64,FLEN)
NAN_BOXED(4591511454711062055,64,FLEN)
NAN_BOXED(4590488727289521824,64,FLEN)
NAN_BOXED(4605837031935477203,64,FLEN)
NAN_BOXED(4591511454711062055,64,FLEN)
NAN_BOXED(4590488727289521824,64,FLEN)
NAN_BOXED(4605837031935477203,64,FLEN)
NAN_BOXED(4591511454711062055,64,FLEN)
NAN_BOXED(4590488727289521824,64,FLEN)
NAN_BOXED(4605837031935477203,64,FLEN)
NAN_BOXED(4591511454711062055,64,FLEN)
NAN_BOXED(4590488727289521824,64,FLEN)
NAN_BOXED(4605854531793470391,64,FLEN)
NAN_BOXED(4606057117458620859,64,FLEN)
NAN_BOXED(4604895128084337710,64,FLEN)
NAN_BOXED(4605854531793470391,64,FLEN)
NAN_BOXED(4606057117458620859,64,FLEN)
NAN_BOXED(4604895128084337710,64,FLEN)
NAN_BOXED(4605854531793470391,64,FLEN)
NAN_BOXED(4606057117458620859,64,FLEN)
NAN_BOXED(4604895128084337710,64,FLEN)
NAN_BOXED(4605854531793470391,64,FLEN)
NAN_BOXED(4606057117458620859,64,FLEN)
NAN_BOXED(4604895128084337710,64,FLEN)
NAN_BOXED(4605854531793470391,64,FLEN)
NAN_BOXED(4606057117458620859,64,FLEN)
NAN_BOXED(4604895128084337710,64,FLEN)
NAN_BOXED(4605865797675237305,64,FLEN)
NAN_BOXED(4596488740219834195,64,FLEN)
NAN_BOXED(4595418639044661444,64,FLEN)
NAN_BOXED(4605865797675237305,64,FLEN)
NAN_BOXED(4596488740219834195,64,FLEN)
NAN_BOXED(4595418639044661444,64,FLEN)
NAN_BOXED(4605865797675237305,64,FLEN)
NAN_BOXED(4596488740219834195,64,FLEN)
NAN_BOXED(4595418639044661444,64,FLEN)
NAN_BOXED(4605865797675237305,64,FLEN)
NAN_BOXED(4596488740219834195,64,FLEN)
NAN_BOXED(4595418639044661444,64,FLEN)
NAN_BOXED(4605865797675237305,64,FLEN)
NAN_BOXED(4596488740219834195,64,FLEN)
NAN_BOXED(4595418639044661444,64,FLEN)
NAN_BOXED(4605883084520707697,64,FLEN)
NAN_BOXED(4607321687006956414,64,FLEN)
NAN_BOXED(4606121440640983655,64,FLEN)
NAN_BOXED(4605883084520707697,64,FLEN)
NAN_BOXED(4607321687006956414,64,FLEN)
NAN_BOXED(4606121440640983655,64,FLEN)
NAN_BOXED(4605883084520707697,64,FLEN)
NAN_BOXED(4607321687006956414,64,FLEN)
NAN_BOXED(4606121440640983655,64,FLEN)
NAN_BOXED(4605883084520707697,64,FLEN)
NAN_BOXED(4607321687006956414,64,FLEN)
NAN_BOXED(4606121440640983655,64,FLEN)
NAN_BOXED(4605883084520707697,64,FLEN)
NAN_BOXED(4607321687006956414,64,FLEN)
NAN_BOXED(4606121440640983655,64,FLEN)
NAN_BOXED(4605905732272034556,64,FLEN)
NAN_BOXED(4603170021056421902,64,FLEN)
NAN_BOXED(4602245289836269748,64,FLEN)
NAN_BOXED(4605905732272034556,64,FLEN)
NAN_BOXED(4603170021056421902,64,FLEN)
NAN_BOXED(4602245289836269748,64,FLEN)
NAN_BOXED(4605905732272034556,64,FLEN)
NAN_BOXED(4603170021056421902,64,FLEN)
NAN_BOXED(4602245289836269748,64,FLEN)
NAN_BOXED(4605905732272034556,64,FLEN)
NAN_BOXED(4603170021056421902,64,FLEN)
NAN_BOXED(4602245289836269748,64,FLEN)
NAN_BOXED(4605905732272034556,64,FLEN)
NAN_BOXED(4603170021056421902,64,FLEN)
NAN_BOXED(4602245289836269748,64,FLEN)
NAN_BOXED(4605915040830575769,64,FLEN)
NAN_BOXED(4605051899786842711,64,FLEN)
NAN_BOXED(4604084301225451016,64,FLEN)
NAN_BOXED(4605915040830575769,64,FLEN)
NAN_BOXED(4605051899786842711,64,FLEN)
NAN_BOXED(4604084301225451016,64,FLEN)
NAN_BOXED(4605915040830575769,64,FLEN)
NAN_BOXED(4605051899786842711,64,FLEN)
NAN_BOXED(4604084301225451016,64,FLEN)
NAN_BOXED(4605915040830575769,64,FLEN)
NAN_BOXED(4605051899786842711,64,FLEN)
NAN_BOXED(4604084301225451016,64,FLEN)
NAN_BOXED(4605915040830575769,64,FLEN)
NAN_BOXED(4605051899786842711,64,FLEN)
NAN_BOXED(4604084301225451016,64,FLEN)
NAN_BOXED(4605927647398872682,64,FLEN)
NAN_BOXED(4603159129106700885,64,FLEN)
NAN_BOXED(4602250845981647050,64,FLEN)
NAN_BOXED(4605927647398872682,64,FLEN)
NAN_BOXED(4603159129106700885,64,FLEN)
NAN_BOXED(4602250845981647050,64,FLEN)
NAN_BOXED(4605927647398872682,64,FLEN)
NAN_BOXED(4603159129106700885,64,FLEN)
NAN_BOXED(4602250845981647050,64,FLEN)
NAN_BOXED(4605927647398872682,64,FLEN)
NAN_BOXED(4603159129106700885,64,FLEN)
NAN_BOXED(4602250845981647050,64,FLEN)
NAN_BOXED(4605927647398872682,64,FLEN)
NAN_BOXED(4603159129106700885,64,FLEN)
NAN_BOXED(4602250845981647050,64,FLEN)
NAN_BOXED(4605983621846898393,64,FLEN)
NAN_BOXED(4604817496578996754,64,FLEN)
NAN_BOXED(4603933454687106207,64,FLEN)
NAN_BOXED(4605983621846898393,64,FLEN)
NAN_BOXED(4604817496578996754,64,FLEN)
NAN_BOXED(4603933454687106207,64,FLEN)
NAN_BOXED(4605983621846898393,64,FLEN)
NAN_BOXED(4604817496578996754,64,FLEN)
NAN_BOXED(4603933454687106207,64,FLEN)
NAN_BOXED(4605983621846898393,64,FLEN)
NAN_BOXED(4604817496578996754,64,FLEN)
NAN_BOXED(4603933454687106207,64,FLEN)
NAN_BOXED(4605983621846898393,64,FLEN)
NAN_BOXED(4604817496578996754,64,FLEN)
NAN_BOXED(4603933454687106207,64,FLEN)
NAN_BOXED(4606001812078699071,64,FLEN)
NAN_BOXED(4592126450815802320,64,FLEN)
NAN_BOXED(4591148375089516288,64,FLEN)
NAN_BOXED(4606001812078699071,64,FLEN)
NAN_BOXED(4592126450815802320,64,FLEN)
NAN_BOXED(4591148375089516288,64,FLEN)
NAN_BOXED(4606001812078699071,64,FLEN)
NAN_BOXED(4592126450815802320,64,FLEN)
NAN_BOXED(4591148375089516288,64,FLEN)
NAN_BOXED(4606001812078699071,64,FLEN)
NAN_BOXED(4592126450815802320,64,FLEN)
NAN_BOXED(4591148375089516288,64,FLEN)
NAN_BOXED(4606001812078699071,64,FLEN)
NAN_BOXED(4592126450815802320,64,FLEN)
NAN_BOXED(4591148375089516288,64,FLEN)
NAN_BOXED(4606002621145814782,64,FLEN)
NAN_BOXED(4607787418301286207,64,FLEN)
NAN_BOXED(4607054129818072412,64,FLEN)
NAN_BOXED(4606002621145814782,64,FLEN)
NAN_BOXED(4607787418301286207,64,FLEN)
NAN_BOXED(4607054129818072412,64,FLEN)
NAN_BOXED(4606002621145814782,64,FLEN)
NAN_BOXED(4607787418301286207,64,FLEN)
NAN_BOXED(4607054129818072412,64,FLEN)
NAN_BOXED(4606002621145814782,64,FLEN)
NAN_BOXED(4607787418301286207,64,FLEN)
NAN_BOXED(4607054129818072412,64,FLEN)
NAN_BOXED(4606002621145814782,64,FLEN)
NAN_BOXED(4607787418301286207,64,FLEN)
NAN_BOXED(4607054129818072412,64,FLEN)
NAN_BOXED(4606017425648642681,64,FLEN)
NAN_BOXED(4605958837533138446,64,FLEN)
NAN_BOXED(4604952102654479747,64,FLEN)
NAN_BOXED(4606017425648642681,64,FLEN)
NAN_BOXED(4605958837533138446,64,FLEN)
NAN_BOXED(4604952102654479747,64,FLEN)
NAN_BOXED(4606017425648642681,64,FLEN)
NAN_BOXED(4605958837533138446,64,FLEN)
NAN_BOXED(4604952102654479747,64,FLEN)
NAN_BOXED(4606017425648642681,64,FLEN)
NAN_BOXED(4605958837533138446,64,FLEN)
NAN_BOXED(4604952102654479747,64,FLEN)
NAN_BOXED(4606017425648642681,64,FLEN)
NAN_BOXED(4605958837533138446,64,FLEN)
NAN_BOXED(4604952102654479747,64,FLEN)
NAN_BOXED(4606038158912768572,64,FLEN)
NAN_BOXED(4606933628268515316,64,FLEN)
NAN_BOXED(4605820974324187674,64,FLEN)
NAN_BOXED(4606038158912768572,64,FLEN)
NAN_BOXED(4606933628268515316,64,FLEN)
NAN_BOXED(4605820974324187674,64,FLEN)
NAN_BOXED(4606038158912768572,64,FLEN)
NAN_BOXED(4606933628268515316,64,FLEN)
NAN_BOXED(4605820974324187674,64,FLEN)
NAN_BOXED(4606038158912768572,64,FLEN)
NAN_BOXED(4606933628268515316,64,FLEN)
NAN_BOXED(4605820974324187674,64,FLEN)
NAN_BOXED(4606038158912768572,64,FLEN)
NAN_BOXED(4606933628268515316,64,FLEN)
NAN_BOXED(4605820974324187674,64,FLEN)
NAN_BOXED(4606067309867814847,64,FLEN)
NAN_BOXED(4606160219635305675,64,FLEN)
NAN_BOXED(4605171660964379956,64,FLEN)
NAN_BOXED(4606067309867814847,64,FLEN)
NAN_BOXED(4606160219635305675,64,FLEN)
NAN_BOXED(4605171660964379956,64,FLEN)
NAN_BOXED(4606067309867814847,64,FLEN)
NAN_BOXED(4606160219635305675,64,FLEN)
NAN_BOXED(4605171660964379956,64,FLEN)
NAN_BOXED(4606067309867814847,64,FLEN)
NAN_BOXED(4606160219635305675,64,FLEN)
NAN_BOXED(4605171660964379956,64,FLEN)
NAN_BOXED(4606067309867814847,64,FLEN)
NAN_BOXED(4606160219635305675,64,FLEN)
NAN_BOXED(4605171660964379956,64,FLEN)
NAN_BOXED(4606086945623128073,64,FLEN)
NAN_BOXED(4603895938049800943,64,FLEN)
NAN_BOXED(4603200173084798923,64,FLEN)
NAN_BOXED(4606086945623128073,64,FLEN)
NAN_BOXED(4603895938049800943,64,FLEN)
NAN_BOXED(4603200173084798923,64,FLEN)
NAN_BOXED(4606086945623128073,64,FLEN)
NAN_BOXED(4603895938049800943,64,FLEN)
NAN_BOXED(4603200173084798923,64,FLEN)
NAN_BOXED(4606086945623128073,64,FLEN)
NAN_BOXED(4603895938049800943,64,FLEN)
NAN_BOXED(4603200173084798923,64,FLEN)
NAN_BOXED(4606086945623128073,64,FLEN)
NAN_BOXED(4603895938049800943,64,FLEN)
NAN_BOXED(4603200173084798923,64,FLEN)
NAN_BOXED(4606196567645324973,64,FLEN)
NAN_BOXED(4606656503631490544,64,FLEN)
NAN_BOXED(4605728214662500793,64,FLEN)
NAN_BOXED(4606196567645324973,64,FLEN)
NAN_BOXED(4606656503631490544,64,FLEN)
NAN_BOXED(4605728214662500793,64,FLEN)
NAN_BOXED(4606196567645324973,64,FLEN)
NAN_BOXED(4606656503631490544,64,FLEN)
NAN_BOXED(4605728214662500793,64,FLEN)
NAN_BOXED(4606196567645324973,64,FLEN)
NAN_BOXED(4606656503631490544,64,FLEN)
NAN_BOXED(4605728214662500793,64,FLEN)
NAN_BOXED(4606196567645324973,64,FLEN)
NAN_BOXED(4606656503631490544,64,FLEN)
NAN_BOXED(4605728214662500793,64,FLEN)
NAN_BOXED(4606226670137348897,64,FLEN)
NAN_BOXED(4602532884179270796,64,FLEN)
NAN_BOXED(4601592620593684636,64,FLEN)
NAN_BOXED(4606226670137348897,64,FLEN)
NAN_BOXED(4602532884179270796,64,FLEN)
NAN_BOXED(4601592620593684636,64,FLEN)
NAN_BOXED(4606226670137348897,64,FLEN)
NAN_BOXED(4602532884179270796,64,FLEN)
NAN_BOXED(4601592620593684636,64,FLEN)
NAN_BOXED(4606226670137348897,64,FLEN)
NAN_BOXED(4602532884179270796,64,FLEN)
NAN_BOXED(4601592620593684636,64,FLEN)
NAN_BOXED(4606226670137348897,64,FLEN)
NAN_BOXED(4602532884179270796,64,FLEN)
NAN_BOXED(4601592620593684636,64,FLEN)
NAN_BOXED(4606237415239997385,64,FLEN)
NAN_BOXED(4595776526062378164,64,FLEN)
NAN_BOXED(4595083184957759308,64,FLEN)
NAN_BOXED(4606237415239997385,64,FLEN)
NAN_BOXED(4595776526062378164,64,FLEN)
NAN_BOXED(4595083184957759308,64,FLEN)
NAN_BOXED(4606237415239997385,64,FLEN)
NAN_BOXED(4595776526062378164,64,FLEN)
NAN_BOXED(4595083184957759308,64,FLEN)
NAN_BOXED(4606237415239997385,64,FLEN)
NAN_BOXED(4595776526062378164,64,FLEN)
NAN_BOXED(4595083184957759308,64,FLEN)
NAN_BOXED(4606237415239997385,64,FLEN)
NAN_BOXED(4595776526062378164,64,FLEN)
NAN_BOXED(4595083184957759308,64,FLEN)
NAN_BOXED(4606238648116571096,64,FLEN)
NAN_BOXED(4605564694691823387,64,FLEN)
NAN_BOXED(4604790428484079023,64,FLEN)
NAN_BOXED(4606238648116571096,64,FLEN)
NAN_BOXED(4605564694691823387,64,FLEN)
NAN_BOXED(4604790428484079023,64,FLEN)
NAN_BOXED(4606238648116571096,64,FLEN)
NAN_BOXED(4605564694691823387,64,FLEN)
NAN_BOXED(4604790428484079023,64,FLEN)
NAN_BOXED(4606238648116571096,64,FLEN)
NAN_BOXED(4605564694691823387,64,FLEN)
NAN_BOXED(4604790428484079023,64,FLEN)
NAN_BOXED(4606238648116571096,64,FLEN)
NAN_BOXED(4605564694691823387,64,FLEN)
NAN_BOXED(4604790428484079023,64,FLEN)
NAN_BOXED(4606249839566711727,64,FLEN)
NAN_BOXED(4601020561470970651,64,FLEN)
NAN_BOXED(4600259673420719292,64,FLEN)
NAN_BOXED(4606249839566711727,64,FLEN)
NAN_BOXED(4601020561470970651,64,FLEN)
NAN_BOXED(4600259673420719292,64,FLEN)
NAN_BOXED(4606249839566711727,64,FLEN)
NAN_BOXED(4601020561470970651,64,FLEN)
NAN_BOXED(4600259673420719292,64,FLEN)
NAN_BOXED(4606249839566711727,64,FLEN)
NAN_BOXED(4601020561470970651,64,FLEN)
NAN_BOXED(4600259673420719292,64,FLEN)
NAN_BOXED(4606249839566711727,64,FLEN)
NAN_BOXED(4601020561470970651,64,FLEN)
NAN_BOXED(4600259673420719292,64,FLEN)
NAN_BOXED(4606266297843131592,64,FLEN)
NAN_BOXED(4595798867875985439,64,FLEN)
NAN_BOXED(4595124445309864340,64,FLEN)
NAN_BOXED(4606266297843131592,64,FLEN)
NAN_BOXED(4595798867875985439,64,FLEN)
NAN_BOXED(4595124445309864340,64,FLEN)
NAN_BOXED(4606266297843131592,64,FLEN)
NAN_BOXED(4595798867875985439,64,FLEN)
NAN_BOXED(4595124445309864340,64,FLEN)
NAN_BOXED(4606266297843131592,64,FLEN)
NAN_BOXED(4595798867875985439,64,FLEN)
NAN_BOXED(4595124445309864340,64,FLEN)
NAN_BOXED(4606266297843131592,64,FLEN)
NAN_BOXED(4595798867875985439,64,FLEN)
NAN_BOXED(4595124445309864340,64,FLEN)
NAN_BOXED(4606268509019981511,64,FLEN)
NAN_BOXED(4604554590637505873,64,FLEN)
NAN_BOXED(4603907311781251190,64,FLEN)
NAN_BOXED(4606268509019981511,64,FLEN)
NAN_BOXED(4604554590637505873,64,FLEN)
NAN_BOXED(4603907311781251190,64,FLEN)
NAN_BOXED(4606268509019981511,64,FLEN)
NAN_BOXED(4604554590637505873,64,FLEN)
NAN_BOXED(4603907311781251190,64,FLEN)
NAN_BOXED(4606268509019981511,64,FLEN)
NAN_BOXED(4604554590637505873,64,FLEN)
NAN_BOXED(4603907311781251190,64,FLEN)
NAN_BOXED(4606268509019981511,64,FLEN)
NAN_BOXED(4604554590637505873,64,FLEN)
NAN_BOXED(4603907311781251190,64,FLEN)
NAN_BOXED(4606373992061513374,64,FLEN)
NAN_BOXED(4604117260445909908,64,FLEN)
NAN_BOXED(4603583942084730294,64,FLEN)
NAN_BOXED(4606373992061513374,64,FLEN)
NAN_BOXED(4604117260445909908,64,FLEN)
NAN_BOXED(4603583942084730294,64,FLEN)
NAN_BOXED(4606373992061513374,64,FLEN)
NAN_BOXED(4604117260445909908,64,FLEN)
NAN_BOXED(4603583942084730294,64,FLEN)
NAN_BOXED(4606373992061513374,64,FLEN)
NAN_BOXED(4604117260445909908,64,FLEN)
NAN_BOXED(4603583942084730294,64,FLEN)
NAN_BOXED(4606373992061513374,64,FLEN)
NAN_BOXED(4604117260445909908,64,FLEN)
NAN_BOXED(4603583942084730294,64,FLEN)
NAN_BOXED(4606376614868172158,64,FLEN)
NAN_BOXED(4607340375545107081,64,FLEN)
NAN_BOXED(4606664266040031468,64,FLEN)
NAN_BOXED(4606376614868172158,64,FLEN)
NAN_BOXED(4607340375545107081,64,FLEN)
NAN_BOXED(4606664266040031468,64,FLEN)
NAN_BOXED(4606376614868172158,64,FLEN)
NAN_BOXED(4607340375545107081,64,FLEN)
NAN_BOXED(4606664266040031468,64,FLEN)
NAN_BOXED(4606376614868172158,64,FLEN)
NAN_BOXED(4607340375545107081,64,FLEN)
NAN_BOXED(4606664266040031468,64,FLEN)
NAN_BOXED(4606376614868172158,64,FLEN)
NAN_BOXED(4607340375545107081,64,FLEN)
NAN_BOXED(4606664266040031468,64,FLEN)
NAN_BOXED(4606408838540455031,64,FLEN)
NAN_BOXED(4607021778277230133,64,FLEN)
NAN_BOXED(4606261994574599547,64,FLEN)
NAN_BOXED(4606408838540455031,64,FLEN)
NAN_BOXED(4607021778277230133,64,FLEN)
NAN_BOXED(4606261994574599547,64,FLEN)
NAN_BOXED(4606408838540455031,64,FLEN)
NAN_BOXED(4607021778277230133,64,FLEN)
NAN_BOXED(4606261994574599547,64,FLEN)
NAN_BOXED(4606408838540455031,64,FLEN)
NAN_BOXED(4607021778277230133,64,FLEN)
NAN_BOXED(4606261994574599547,64,FLEN)
NAN_BOXED(4606408838540455031,64,FLEN)
NAN_BOXED(4607021778277230133,64,FLEN)
NAN_BOXED(4606261994574599547,64,FLEN)
NAN_BOXED(4606418802080043475,64,FLEN)
NAN_BOXED(4600352347224382479,64,FLEN)
NAN_BOXED(4599785965274951672,64,FLEN)
NAN_BOXED(4606418802080043475,64,FLEN)
NAN_BOXED(4600352347224382479,64,FLEN)
NAN_BOXED(4599785965274951672,64,FLEN)
NAN_BOXED(4606418802080043475,64,FLEN)
NAN_BOXED(4600352347224382479,64,FLEN)
NAN_BOXED(4599785965274951672,64,FLEN)
NAN_BOXED(4606418802080043475,64,FLEN)
NAN_BOXED(4600352347224382479,64,FLEN)
NAN_BOXED(4599785965274951672,64,FLEN)
NAN_BOXED(4606418802080043475,64,FLEN)
NAN_BOXED(4600352347224382479,64,FLEN)
NAN_BOXED(4599785965274951672,64,FLEN)
NAN_BOXED(4606421446717525647,64,FLEN)
NAN_BOXED(4595414653975800714,64,FLEN)
NAN_BOXED(4594886907924048004,64,FLEN)
NAN_BOXED(4606421446717525647,64,FLEN)
NAN_BOXED(4595414653975800714,64,FLEN)
NAN_BOXED(4594886907924048004,64,FLEN)
NAN_BOXED(4606421446717525647,64,FLEN)
NAN_BOXED(4595414653975800714,64,FLEN)
NAN_BOXED(4594886907924048004,64,FLEN)
NAN_BOXED(4606421446717525647,64,FLEN)
NAN_BOXED(4595414653975800714,64,FLEN)
NAN_BOXED(4594886907924048004,64,FLEN)
NAN_BOXED(4606421446717525647,64,FLEN)
NAN_BOXED(4595414653975800714,64,FLEN)
NAN_BOXED(4594886907924048004,64,FLEN)
NAN_BOXED(4606428133180127729,64,FLEN)
NAN_BOXED(4594821354015607245,64,FLEN)
NAN_BOXED(4594347929567822932,64,FLEN)
NAN_BOXED(4606428133180127729,64,FLEN)
NAN_BOXED(4594821354015607245,64,FLEN)
NAN_BOXED(4594347929567822932,64,FLEN)
NAN_BOXED(4606428133180127729,64,FLEN)
NAN_BOXED(4594821354015607245,64,FLEN)
NAN_BOXED(4594347929567822932,64,FLEN)
NAN_BOXED(4606428133180127729,64,FLEN)
NAN_BOXED(4594821354015607245,64,FLEN)
NAN_BOXED(4594347929567822932,64,FLEN)
NAN_BOXED(4606428133180127729,64,FLEN)
NAN_BOXED(4594821354015607245,64,FLEN)
NAN_BOXED(4594347929567822932,64,FLEN)
NAN_BOXED(4606456606963901460,64,FLEN)
NAN_BOXED(4603571323451089086,64,FLEN)
NAN_BOXED(4603136498376947551,64,FLEN)
NAN_BOXED(4606456606963901460,64,FLEN)
NAN_BOXED(4603571323451089086,64,FLEN)
NAN_BOXED(4603136498376947551,64,FLEN)
NAN_BOXED(4606456606963901460,64,FLEN)
NAN_BOXED(4603571323451089086,64,FLEN)
NAN_BOXED(4603136498376947551,64,FLEN)
NAN_BOXED(4606456606963901460,64,FLEN)
NAN_BOXED(4603571323451089086,64,FLEN)
NAN_BOXED(4603136498376947551,64,FLEN)
NAN_BOXED(4606456606963901460,64,FLEN)
NAN_BOXED(4603571323451089086,64,FLEN)
NAN_BOXED(4603136498376947551,64,FLEN)
NAN_BOXED(4606511832815734566,64,FLEN)
NAN_BOXED(4605322605892321589,64,FLEN)
NAN_BOXED(4604790482978968668,64,FLEN)
NAN_BOXED(4606511832815734566,64,FLEN)
NAN_BOXED(4605322605892321589,64,FLEN)
NAN_BOXED(4604790482978968668,64,FLEN)
NAN_BOXED(4606511832815734566,64,FLEN)
NAN_BOXED(4605322605892321589,64,FLEN)
NAN_BOXED(4604790482978968668,64,FLEN)
NAN_BOXED(4606511832815734566,64,FLEN)
NAN_BOXED(4605322605892321589,64,FLEN)
NAN_BOXED(4604790482978968668,64,FLEN)
NAN_BOXED(4606511832815734566,64,FLEN)
NAN_BOXED(4605322605892321589,64,FLEN)
NAN_BOXED(4604790482978968668,64,FLEN)
NAN_BOXED(4606523805482235046,64,FLEN)
NAN_BOXED(4600095607294798798,64,FLEN)
NAN_BOXED(4599625880410777612,64,FLEN)
NAN_BOXED(4606523805482235046,64,FLEN)
NAN_BOXED(4600095607294798798,64,FLEN)
NAN_BOXED(4599625880410777612,64,FLEN)
NAN_BOXED(4606523805482235046,64,FLEN)
NAN_BOXED(4600095607294798798,64,FLEN)
NAN_BOXED(4599625880410777612,64,FLEN)
NAN_BOXED(4606523805482235046,64,FLEN)
NAN_BOXED(4600095607294798798,64,FLEN)
NAN_BOXED(4599625880410777612,64,FLEN)
NAN_BOXED(4606523805482235046,64,FLEN)
NAN_BOXED(4600095607294798798,64,FLEN)
NAN_BOXED(4599625880410777612,64,FLEN)
NAN_BOXED(4606528981625257121,64,FLEN)
NAN_BOXED(4605549945131535310,64,FLEN)
NAN_BOXED(4605014937554215318,64,FLEN)
NAN_BOXED(4606528981625257121,64,FLEN)
NAN_BOXED(4605549945131535310,64,FLEN)
NAN_BOXED(4605014937554215318,64,FLEN)
NAN_BOXED(4606528981625257121,64,FLEN)
NAN_BOXED(4605549945131535310,64,FLEN)
NAN_BOXED(4605014937554215318,64,FLEN)
NAN_BOXED(4606528981625257121,64,FLEN)
NAN_BOXED(4605549945131535310,64,FLEN)
NAN_BOXED(4605014937554215318,64,FLEN)
NAN_BOXED(4606528981625257121,64,FLEN)
NAN_BOXED(4605549945131535310,64,FLEN)
NAN_BOXED(4605014937554215318,64,FLEN)
NAN_BOXED(4606530170619993943,64,FLEN)
NAN_BOXED(4589453596105603759,64,FLEN)
NAN_BOXED(4589045564312402608,64,FLEN)
NAN_BOXED(4606530170619993943,64,FLEN)
NAN_BOXED(4589453596105603759,64,FLEN)
NAN_BOXED(4589045564312402608,64,FLEN)
NAN_BOXED(4606530170619993943,64,FLEN)
NAN_BOXED(4589453596105603759,64,FLEN)
NAN_BOXED(4589045564312402608,64,FLEN)
NAN_BOXED(4606530170619993943,64,FLEN)
NAN_BOXED(4589453596105603759,64,FLEN)
NAN_BOXED(4589045564312402608,64,FLEN)
NAN_BOXED(4606530170619993943,64,FLEN)
NAN_BOXED(4589453596105603759,64,FLEN)
NAN_BOXED(4589045564312402608,64,FLEN)
NAN_BOXED(4606545404308195963,64,FLEN)
NAN_BOXED(4598694583270845219,64,FLEN)
NAN_BOXED(4598339345159950072,64,FLEN)
NAN_BOXED(4606545404308195963,64,FLEN)
NAN_BOXED(4598694583270845219,64,FLEN)
NAN_BOXED(4598339345159950072,64,FLEN)
NAN_BOXED(4606545404308195963,64,FLEN)
NAN_BOXED(4598694583270845219,64,FLEN)
NAN_BOXED(4598339345159950072,64,FLEN)
NAN_BOXED(4606545404308195963,64,FLEN)
NAN_BOXED(4598694583270845219,64,FLEN)
NAN_BOXED(4598339345159950072,64,FLEN)
NAN_BOXED(4606545404308195963,64,FLEN)
NAN_BOXED(4598694583270845219,64,FLEN)
NAN_BOXED(4598339345159950072,64,FLEN)
NAN_BOXED(4606553217080856484,64,FLEN)
NAN_BOXED(4606980441094844691,64,FLEN)
NAN_BOXED(4606365348613831237,64,FLEN)
NAN_BOXED(4606553217080856484,64,FLEN)
NAN_BOXED(4606980441094844691,64,FLEN)
NAN_BOXED(4606365348613831237,64,FLEN)
NAN_BOXED(4606553217080856484,64,FLEN)
NAN_BOXED(4606980441094844691,64,FLEN)
NAN_BOXED(4606365348613831237,64,FLEN)
NAN_BOXED(4606553217080856484,64,FLEN)
NAN_BOXED(4606980441094844691,64,FLEN)
NAN_BOXED(4606365348613831237,64,FLEN)
NAN_BOXED(4606553217080856484,64,FLEN)
NAN_BOXED(4606980441094844691,64,FLEN)
NAN_BOXED(4606365348613831237,64,FLEN)
NAN_BOXED(4606582336353547203,64,FLEN)
NAN_BOXED(4594464969242709937,64,FLEN)
NAN_BOXED(4594112073076415448,64,FLEN)
NAN_BOXED(4606582336353547203,64,FLEN)
NAN_BOXED(4594464969242709937,64,FLEN)
NAN_BOXED(4594112073076415448,64,FLEN)
NAN_BOXED(4606582336353547203,64,FLEN)
NAN_BOXED(4594464969242709937,64,FLEN)
NAN_BOXED(4594112073076415448,64,FLEN)
NAN_BOXED(4606582336353547203,64,FLEN)
NAN_BOXED(4594464969242709937,64,FLEN)
NAN_BOXED(4594112073076415448,64,FLEN)
NAN_BOXED(4606582336353547203,64,FLEN)
NAN_BOXED(4594464969242709937,64,FLEN)
NAN_BOXED(4594112073076415448,64,FLEN)
NAN_BOXED(4606603338820907280,64,FLEN)
NAN_BOXED(4580252091395966301,64,FLEN)
NAN_BOXED(4579752546089437056,64,FLEN)
NAN_BOXED(4606603338820907280,64,FLEN)
NAN_BOXED(4580252091395966301,64,FLEN)
NAN_BOXED(4579752546089437056,64,FLEN)
NAN_BOXED(4606603338820907280,64,FLEN)
NAN_BOXED(4580252091395966301,64,FLEN)
NAN_BOXED(4579752546089437056,64,FLEN)
NAN_BOXED(4606603338820907280,64,FLEN)
NAN_BOXED(4580252091395966301,64,FLEN)
NAN_BOXED(4579752546089437056,64,FLEN)
NAN_BOXED(4606603338820907280,64,FLEN)
NAN_BOXED(4580252091395966301,64,FLEN)
NAN_BOXED(4579752546089437056,64,FLEN)
NAN_BOXED(4606621740267524315,64,FLEN)
NAN_BOXED(4607133434789320602,64,FLEN)
NAN_BOXED(4606575805404787532,64,FLEN)
NAN_BOXED(4606621740267524315,64,FLEN)
NAN_BOXED(4607133434789320602,64,FLEN)
NAN_BOXED(4606575805404787532,64,FLEN)
NAN_BOXED(4606621740267524315,64,FLEN)
NAN_BOXED(4607133434789320602,64,FLEN)
NAN_BOXED(4606575805404787532,64,FLEN)
NAN_BOXED(4606621740267524315,64,FLEN)
NAN_BOXED(4607133434789320602,64,FLEN)
NAN_BOXED(4606575805404787532,64,FLEN)
NAN_BOXED(4606621740267524315,64,FLEN)
NAN_BOXED(4607133434789320602,64,FLEN)
NAN_BOXED(4606575805404787532,64,FLEN)
NAN_BOXED(4606635957176978168,64,FLEN)
NAN_BOXED(4599396379490807637,64,FLEN)
NAN_BOXED(4599049061604387986,64,FLEN)
NAN_BOXED(4606635957176978168,64,FLEN)
NAN_BOXED(4599396379490807637,64,FLEN)
NAN_BOXED(4599049061604387986,64,FLEN)
NAN_BOXED(4606635957176978168,64,FLEN)
NAN_BOXED(4599396379490807637,64,FLEN)
NAN_BOXED(4599049061604387986,64,FLEN)
NAN_BOXED(4606635957176978168,64,FLEN)
NAN_BOXED(4599396379490807637,64,FLEN)
NAN_BOXED(4599049061604387986,64,FLEN)
NAN_BOXED(4606635957176978168,64,FLEN)
NAN_BOXED(4599396379490807637,64,FLEN)
NAN_BOXED(4599049061604387986,64,FLEN)
NAN_BOXED(4606636032959351541,64,FLEN)
NAN_BOXED(4605186862304321483,64,FLEN)
NAN_BOXED(4604761528944305818,64,FLEN)
NAN_BOXED(4606636032959351541,64,FLEN)
NAN_BOXED(4605186862304321483,64,FLEN)
NAN_BOXED(4604761528944305818,64,FLEN)
NAN_BOXED(4606636032959351541,64,FLEN)
NAN_BOXED(4605186862304321483,64,FLEN)
NAN_BOXED(4604761528944305818,64,FLEN)
NAN_BOXED(4606636032959351541,64,FLEN)
NAN_BOXED(4605186862304321483,64,FLEN)
NAN_BOXED(4604761528944305818,64,FLEN)
NAN_BOXED(4606636032959351541,64,FLEN)
NAN_BOXED(4605186862304321483,64,FLEN)
NAN_BOXED(4604761528944305818,64,FLEN)
NAN_BOXED(4606645579186315866,64,FLEN)
NAN_BOXED(4605780597031624976,64,FLEN)
NAN_BOXED(4605327307635403756,64,FLEN)
NAN_BOXED(4606645579186315866,64,FLEN)
NAN_BOXED(4605780597031624976,64,FLEN)
NAN_BOXED(4605327307635403756,64,FLEN)
NAN_BOXED(4606645579186315866,64,FLEN)
NAN_BOXED(4605780597031624976,64,FLEN)
NAN_BOXED(4605327307635403756,64,FLEN)
NAN_BOXED(4606645579186315866,64,FLEN)
NAN_BOXED(4605780597031624976,64,FLEN)
NAN_BOXED(4605327307635403756,64,FLEN)
NAN_BOXED(4606645579186315866,64,FLEN)
NAN_BOXED(4605780597031624976,64,FLEN)
NAN_BOXED(4605327307635403756,64,FLEN)
NAN_BOXED(4606651404598152741,64,FLEN)
NAN_BOXED(4598041433848337664,64,FLEN)
NAN_BOXED(4597518306904550856,64,FLEN)
NAN_BOXED(4606651404598152741,64,FLEN)
NAN_BOXED(4598041433848337664,64,FLEN)
NAN_BOXED(4597518306904550856,64,FLEN)
NAN_BOXED(4606651404598152741,64,FLEN)
NAN_BOXED(4598041433848337664,64,FLEN)
NAN_BOXED(4597518306904550856,64,FLEN)
NAN_BOXED(4606651404598152741,64,FLEN)
NAN_BOXED(4598041433848337664,64,FLEN)
NAN_BOXED(4597518306904550856,64,FLEN)
NAN_BOXED(4606651404598152741,64,FLEN)
NAN_BOXED(4598041433848337664,64,FLEN)
NAN_BOXED(4597518306904550856,64,FLEN)
NAN_BOXED(4606660010928010890,64,FLEN)
NAN_BOXED(4602885006628977158,64,FLEN)
NAN_BOXED(4602544868911762514,64,FLEN)
NAN_BOXED(4606660010928010890,64,FLEN)
NAN_BOXED(4602885006628977158,64,FLEN)
NAN_BOXED(4602544868911762514,64,FLEN)
NAN_BOXED(4606660010928010890,64,FLEN)
NAN_BOXED(4602885006628977158,64,FLEN)
NAN_BOXED(4602544868911762514,64,FLEN)
NAN_BOXED(4606660010928010890,64,FLEN)
NAN_BOXED(4602885006628977158,64,FLEN)
NAN_BOXED(4602544868911762514,64,FLEN)
NAN_BOXED(4606660010928010890,64,FLEN)
NAN_BOXED(4602885006628977158,64,FLEN)
NAN_BOXED(4602544868911762514,64,FLEN)
NAN_BOXED(4606692530411990152,64,FLEN)
NAN_BOXED(4606463927679934082,64,FLEN)
NAN_BOXED(4606013116972623643,64,FLEN)
NAN_BOXED(4606692530411990152,64,FLEN)
NAN_BOXED(4606463927679934082,64,FLEN)
NAN_BOXED(4606013116972623643,64,FLEN)
NAN_BOXED(4606692530411990152,64,FLEN)
NAN_BOXED(4606463927679934082,64,FLEN)
NAN_BOXED(4606013116972623643,64,FLEN)
NAN_BOXED(4606692530411990152,64,FLEN)
NAN_BOXED(4606463927679934082,64,FLEN)
NAN_BOXED(4606013116972623643,64,FLEN)
NAN_BOXED(4606692530411990152,64,FLEN)
NAN_BOXED(4606463927679934082,64,FLEN)
NAN_BOXED(4606013116972623643,64,FLEN)
NAN_BOXED(4606728638648713644,64,FLEN)
NAN_BOXED(4605746490468087351,64,FLEN)
NAN_BOXED(4605365051980079379,64,FLEN)
NAN_BOXED(4606728638648713644,64,FLEN)
NAN_BOXED(4605746490468087351,64,FLEN)
NAN_BOXED(4605365051980079379,64,FLEN)
NAN_BOXED(4606728638648713644,64,FLEN)
NAN_BOXED(4605746490468087351,64,FLEN)
NAN_BOXED(4605365051980079379,64,FLEN)
NAN_BOXED(4606728638648713644,64,FLEN)
NAN_BOXED(4605746490468087351,64,FLEN)
NAN_BOXED(4605365051980079379,64,FLEN)
NAN_BOXED(4606728638648713644,64,FLEN)
NAN_BOXED(4605746490468087351,64,FLEN)
NAN_BOXED(4605365051980079379,64,FLEN)
NAN_BOXED(4606788010958346407,64,FLEN)
NAN_BOXED(4595374091776377092,64,FLEN)
NAN_BOXED(4595102339904262308,64,FLEN)
NAN_BOXED(4606788010958346407,64,FLEN)
NAN_BOXED(4595374091776377092,64,FLEN)
NAN_BOXED(4595102339904262308,64,FLEN)
NAN_BOXED(4606788010958346407,64,FLEN)
NAN_BOXED(4595374091776377092,64,FLEN)
NAN_BOXED(4595102339904262308,64,FLEN)
NAN_BOXED(4606788010958346407,64,FLEN)
NAN_BOXED(4595374091776377092,64,FLEN)
NAN_BOXED(4595102339904262308,64,FLEN)
NAN_BOXED(4606788010958346407,64,FLEN)
NAN_BOXED(4595374091776377092,64,FLEN)
NAN_BOXED(4595102339904262308,64,FLEN)
NAN_BOXED(4606807116209754333,64,FLEN)
NAN_BOXED(4607272519693345931,64,FLEN)
NAN_BOXED(4606979809536190870,64,FLEN)
NAN_BOXED(4606807116209754333,64,FLEN)
NAN_BOXED(4607272519693345931,64,FLEN)
NAN_BOXED(4606979809536190870,64,FLEN)
NAN_BOXED(4606807116209754333,64,FLEN)
NAN_BOXED(4607272519693345931,64,FLEN)
NAN_BOXED(4606979809536190870,64,FLEN)
NAN_BOXED(4606807116209754333,64,FLEN)
NAN_BOXED(4607272519693345931,64,FLEN)
NAN_BOXED(4606979809536190870,64,FLEN)
NAN_BOXED(4606807116209754333,64,FLEN)
NAN_BOXED(4607272519693345931,64,FLEN)
NAN_BOXED(4606979809536190870,64,FLEN)
NAN_BOXED(4606825840085326873,64,FLEN)
NAN_BOXED(4597458689615021202,64,FLEN)
NAN_BOXED(4597130477023288724,64,FLEN)
NAN_BOXED(4606825840085326873,64,FLEN)
NAN_BOXED(4597458689615021202,64,FLEN)
NAN_BOXED(4597130477023288724,64,FLEN)
NAN_BOXED(4606825840085326873,64,FLEN)
NAN_BOXED(4597458689615021202,64,FLEN)
NAN_BOXED(4597130477023288724,64,FLEN)
NAN_BOXED(4606825840085326873,64,FLEN)
NAN_BOXED(4597458689615021202,64,FLEN)
NAN_BOXED(4597130477023288724,64,FLEN)
NAN_BOXED(4606825840085326873,64,FLEN)
NAN_BOXED(4597458689615021202,64,FLEN)
NAN_BOXED(4597130477023288724,64,FLEN)
NAN_BOXED(4606829271223559289,64,FLEN)
NAN_BOXED(4599892411887201267,64,FLEN)
NAN_BOXED(4599648511697422468,64,FLEN)
NAN_BOXED(4606829271223559289,64,FLEN)
NAN_BOXED(4599892411887201267,64,FLEN)
NAN_BOXED(4599648511697422468,64,FLEN)
NAN_BOXED(4606829271223559289,64,FLEN)
NAN_BOXED(4599892411887201267,64,FLEN)
NAN_BOXED(4599648511697422468,64,FLEN)
NAN_BOXED(4606829271223559289,64,FLEN)
NAN_BOXED(4599892411887201267,64,FLEN)
NAN_BOXED(4599648511697422468,64,FLEN)
NAN_BOXED(4606829271223559289,64,FLEN)
NAN_BOXED(4599892411887201267,64,FLEN)
NAN_BOXED(4599648511697422468,64,FLEN)
NAN_BOXED(4606844687933242739,64,FLEN)
NAN_BOXED(4603475212444818077,64,FLEN)
NAN_BOXED(4603276485721311918,64,FLEN)
NAN_BOXED(4606844687933242739,64,FLEN)
NAN_BOXED(4603475212444818077,64,FLEN)
NAN_BOXED(4603276485721311918,64,FLEN)
NAN_BOXED(4606844687933242739,64,FLEN)
NAN_BOXED(4603475212444818077,64,FLEN)
NAN_BOXED(4603276485721311918,64,FLEN)
NAN_BOXED(4606844687933242739,64,FLEN)
NAN_BOXED(4603475212444818077,64,FLEN)
NAN_BOXED(4603276485721311918,64,FLEN)
NAN_BOXED(4606844687933242739,64,FLEN)
NAN_BOXED(4603475212444818077,64,FLEN)
NAN_BOXED(4603276485721311918,64,FLEN)
NAN_BOXED(4606930783995096146,64,FLEN)
NAN_BOXED(4604852174950067582,64,FLEN)
NAN_BOXED(4604665640343334170,64,FLEN)
NAN_BOXED(4606930783995096146,64,FLEN)
NAN_BOXED(4604852174950067582,64,FLEN)
NAN_BOXED(4604665640343334170,64,FLEN)
NAN_BOXED(4606930783995096146,64,FLEN)
NAN_BOXED(4604852174950067582,64,FLEN)
NAN_BOXED(4604665640343334170,64,FLEN)
NAN_BOXED(4606930783995096146,64,FLEN)
NAN_BOXED(4604852174950067582,64,FLEN)
NAN_BOXED(4604665640343334170,64,FLEN)
NAN_BOXED(4606930783995096146,64,FLEN)
NAN_BOXED(4604852174950067582,64,FLEN)
NAN_BOXED(4604665640343334170,64,FLEN)
NAN_BOXED(4606952727232642866,64,FLEN)
NAN_BOXED(4593814154089431231,64,FLEN)
NAN_BOXED(4593695673557989840,64,FLEN)
NAN_BOXED(4606952727232642866,64,FLEN)
NAN_BOXED(4593814154089431231,64,FLEN)
NAN_BOXED(4593695673557989840,64,FLEN)
NAN_BOXED(4606952727232642866,64,FLEN)
NAN_BOXED(4593814154089431231,64,FLEN)
NAN_BOXED(4593695673557989840,64,FLEN)
NAN_BOXED(4606952727232642866,64,FLEN)
NAN_BOXED(4593814154089431231,64,FLEN)
NAN_BOXED(4593695673557989840,64,FLEN)
NAN_BOXED(4606952727232642866,64,FLEN)
NAN_BOXED(4593814154089431231,64,FLEN)
NAN_BOXED(4593695673557989840,64,FLEN)
NAN_BOXED(4606974391038630943,64,FLEN)
NAN_BOXED(4587391543160535803,64,FLEN)
NAN_BOXED(4587224544419387072,64,FLEN)
NAN_BOXED(4606974391038630943,64,FLEN)
NAN_BOXED(4587391543160535803,64,FLEN)
NAN_BOXED(4587224544419387072,64,FLEN)
NAN_BOXED(4606974391038630943,64,FLEN)
NAN_BOXED(4587391543160535803,64,FLEN)
NAN_BOXED(4587224544419387072,64,FLEN)
NAN_BOXED(4606974391038630943,64,FLEN)
NAN_BOXED(4587391543160535803,64,FLEN)
NAN_BOXED(4587224544419387072,64,FLEN)
NAN_BOXED(4606974391038630943,64,FLEN)
NAN_BOXED(4587391543160535803,64,FLEN)
NAN_BOXED(4587224544419387072,64,FLEN)
NAN_BOXED(4606979190011250336,64,FLEN)
NAN_BOXED(4603135761717489075,64,FLEN)
NAN_BOXED(4603023837361340728,64,FLEN)
NAN_BOXED(4606979190011250336,64,FLEN)
NAN_BOXED(4603135761717489075,64,FLEN)
NAN_BOXED(4603023837361340728,64,FLEN)
NAN_BOXED(4606979190011250336,64,FLEN)
NAN_BOXED(4603135761717489075,64,FLEN)
NAN_BOXED(4603023837361340728,64,FLEN)
NAN_BOXED(4606979190011250336,64,FLEN)
NAN_BOXED(4603135761717489075,64,FLEN)
NAN_BOXED(4603023837361340728,64,FLEN)
NAN_BOXED(4606979190011250336,64,FLEN)
NAN_BOXED(4603135761717489075,64,FLEN)
NAN_BOXED(4603023837361340728,64,FLEN)
NAN_BOXED(4607019550795787874,64,FLEN)
NAN_BOXED(4604307433841317764,64,FLEN)
NAN_BOXED(4604196551259989458,64,FLEN)
NAN_BOXED(4607019550795787874,64,FLEN)
NAN_BOXED(4604307433841317764,64,FLEN)
NAN_BOXED(4604196551259989458,64,FLEN)
NAN_BOXED(4607019550795787874,64,FLEN)
NAN_BOXED(4604307433841317764,64,FLEN)
NAN_BOXED(4604196551259989458,64,FLEN)
NAN_BOXED(4607019550795787874,64,FLEN)
NAN_BOXED(4604307433841317764,64,FLEN)
NAN_BOXED(4604196551259989458,64,FLEN)
NAN_BOXED(4607019550795787874,64,FLEN)
NAN_BOXED(4604307433841317764,64,FLEN)
NAN_BOXED(4604196551259989458,64,FLEN)
NAN_BOXED(4607024752678630916,64,FLEN)
NAN_BOXED(4603135198884669808,64,FLEN)
NAN_BOXED(4603048377145471836,64,FLEN)
NAN_BOXED(4607024752678630916,64,FLEN)
NAN_BOXED(4603135198884669808,64,FLEN)
NAN_BOXED(4603048377145471836,64,FLEN)
NAN_BOXED(4607024752678630916,64,FLEN)
NAN_BOXED(4603135198884669808,64,FLEN)
NAN_BOXED(4603048377145471836,64,FLEN)
NAN_BOXED(4607024752678630916,64,FLEN)
NAN_BOXED(4603135198884669808,64,FLEN)
NAN_BOXED(4603048377145471836,64,FLEN)
NAN_BOXED(4607024752678630916,64,FLEN)
NAN_BOXED(4603135198884669808,64,FLEN)
NAN_BOXED(4603048377145471836,64,FLEN)
NAN_BOXED(4607137828376344518,64,FLEN)
NAN_BOXED(4604835973080354219,64,FLEN)
NAN_BOXED(4604802998810138815,64,FLEN)
NAN_BOXED(4607137828376344518,64,FLEN)
NAN_BOXED(4604835973080354219,64,FLEN)
NAN_BOXED(4604802998810138815,64,FLEN)
NAN_BOXED(4607137828376344518,64,FLEN)
NAN_BOXED(4604835973080354219,64,FLEN)
NAN_BOXED(4604802998810138815,64,FLEN)
NAN_BOXED(4607137828376344518,64,FLEN)
NAN_BOXED(4604835973080354219,64,FLEN)
NAN_BOXED(4604802998810138815,64,FLEN)
NAN_BOXED(4607137828376344518,64,FLEN)
NAN_BOXED(4604835973080354219,64,FLEN)
NAN_BOXED(4604802998810138815,64,FLEN)
NAN_BOXED(4607145546898658255,64,FLEN)
NAN_BOXED(4603430396798698729,64,FLEN)
NAN_BOXED(4603408884187305008,64,FLEN)
NAN_BOXED(4607145546898658255,64,FLEN)
NAN_BOXED(4603430396798698729,64,FLEN)
NAN_BOXED(4603408884187305008,64,FLEN)
NAN_BOXED(4607145546898658255,64,FLEN)
NAN_BOXED(4603430396798698729,64,FLEN)
NAN_BOXED(4603408884187305008,64,FLEN)
NAN_BOXED(4607145546898658255,64,FLEN)
NAN_BOXED(4603430396798698729,64,FLEN)
NAN_BOXED(4603408884187305008,64,FLEN)
NAN_BOXED(4607145546898658255,64,FLEN)
NAN_BOXED(4603430396798698729,64,FLEN)
NAN_BOXED(4603408884187305008,64,FLEN)
NAN_BOXED(4607146998152648203,64,FLEN)
NAN_BOXED(4596432233752578211,64,FLEN)
NAN_BOXED(4596403667365161144,64,FLEN)
NAN_BOXED(4607146998152648203,64,FLEN)
NAN_BOXED(4596432233752578211,64,FLEN)
NAN_BOXED(4596403667365161144,64,FLEN)
NAN_BOXED(4607146998152648203,64,FLEN)
NAN_BOXED(4596432233752578211,64,FLEN)
NAN_BOXED(4596403667365161144,64,FLEN)
NAN_BOXED(4607146998152648203,64,FLEN)
NAN_BOXED(4596432233752578211,64,FLEN)
NAN_BOXED(4596403667365161144,64,FLEN)
NAN_BOXED(4607146998152648203,64,FLEN)
NAN_BOXED(4596432233752578211,64,FLEN)
NAN_BOXED(4596403667365161144,64,FLEN)
NAN_BOXED(4607150078706269645,64,FLEN)
NAN_BOXED(4602770111799564713,64,FLEN)
NAN_BOXED(4602753613969100228,64,FLEN)
NAN_BOXED(4607150078706269645,64,FLEN)
NAN_BOXED(4602770111799564713,64,FLEN)
NAN_BOXED(4602753613969100228,64,FLEN)
NAN_BOXED(4607150078706269645,64,FLEN)
NAN_BOXED(4602770111799564713,64,FLEN)
NAN_BOXED(4602753613969100228,64,FLEN)
NAN_BOXED(4607150078706269645,64,FLEN)
NAN_BOXED(4602770111799564713,64,FLEN)
NAN_BOXED(4602753613969100228,64,FLEN)
NAN_BOXED(4607150078706269645,64,FLEN)
NAN_BOXED(4602770111799564713,64,FLEN)
NAN_BOXED(4602753613969100228,64,FLEN)
NAN_BOXED(4607166733826107853,64,FLEN)
NAN_BOXED(4598164439125993829,64,FLEN)
NAN_BOXED(4598148772924911476,64,FLEN)
NAN_BOXED(4607166733826107853,64,FLEN)
NAN_BOXED(4598164439125993829,64,FLEN)
NAN_BOXED(4598148772924911476,64,FLEN)
NAN_BOXED(4607166733826107853,64,FLEN)
NAN_BOXED(4598164439125993829,64,FLEN)
NAN_BOXED(4598148772924911476,64,FLEN)
NAN_BOXED(4607166733826107853,64,FLEN)
NAN_BOXED(4598164439125993829,64,FLEN)
NAN_BOXED(4598148772924911476,64,FLEN)
NAN_BOXED(4607166733826107853,64,FLEN)
NAN_BOXED(4598164439125993829,64,FLEN)
NAN_BOXED(4598148772924911476,64,FLEN)
NAN_BOXED(4607172790870122118,64,FLEN)
NAN_BOXED(4603750991939789207,64,FLEN)
NAN_BOXED(4603745031913347224,64,FLEN)
NAN_BOXED(4607172790870122118,64,FLEN)
NAN_BOXED(4603750991939789207,64,FLEN)
NAN_BOXED(4603745031913347224,64,FLEN)
NAN_BOXED(4607172790870122118,64,FLEN)
NAN_BOXED(4603750991939789207,64,FLEN)
NAN_BOXED(4603745031913347224,64,FLEN)
NAN_BOXED(4607172790870122118,64,FLEN)
NAN_BOXED(4603750991939789207,64,FLEN)
NAN_BOXED(4603745031913347224,64,FLEN)
NAN_BOXED(4607172790870122118,64,FLEN)
NAN_BOXED(4603750991939789207,64,FLEN)
NAN_BOXED(4603745031913347224,64,FLEN)
NAN_BOXED(4607180317583449364,64,FLEN)
NAN_BOXED(4605821729207034335,64,FLEN)
NAN_BOXED(4605819945414721698,64,FLEN)
NAN_BOXED(4607180317583449364,64,FLEN)
NAN_BOXED(4605821729207034335,64,FLEN)
NAN_BOXED(4605819945414721698,64,FLEN)
NAN_BOXED(4607180317583449364,64,FLEN)
NAN_BOXED(4605821729207034335,64,FLEN)
NAN_BOXED(4605819945414721698,64,FLEN)
NAN_BOXED(4607180317583449364,64,FLEN)
NAN_BOXED(4605821729207034335,64,FLEN)
NAN_BOXED(4605819945414721698,64,FLEN)
NAN_BOXED(4607180317583449364,64,FLEN)
NAN_BOXED(4605821729207034335,64,FLEN)
NAN_BOXED(4605819945414721698,64,FLEN)
NAN_BOXED(4563211407084759552,64,FLEN)
NAN_BOXED(4644692970509462236,64,FLEN)
NAN_BOXED(4601072355364800522,64,FLEN)
NAN_BOXED(4563211407084759552,64,FLEN)
NAN_BOXED(4644692970509462236,64,FLEN)
NAN_BOXED(4601072355364800522,64,FLEN)
NAN_BOXED(4563211407084759552,64,FLEN)
NAN_BOXED(4644692970509462236,64,FLEN)
NAN_BOXED(4601072355364800522,64,FLEN)
NAN_BOXED(4563211407084759552,64,FLEN)
NAN_BOXED(4644692970509462236,64,FLEN)
NAN_BOXED(4601072355364800522,64,FLEN)
NAN_BOXED(4576992330598901312,64,FLEN)
NAN_BOXED(4625349625050050685,64,FLEN)
NAN_BOXED(4595204837283179724,64,FLEN)
NAN_BOXED(4576992330598901312,64,FLEN)
NAN_BOXED(4625349625050050685,64,FLEN)
NAN_BOXED(4595204837283179724,64,FLEN)
NAN_BOXED(4576992330598901312,64,FLEN)
NAN_BOXED(4625349625050050685,64,FLEN)
NAN_BOXED(4595204837283179724,64,FLEN)
NAN_BOXED(4576992330598901312,64,FLEN)
NAN_BOXED(4625349625050050685,64,FLEN)
NAN_BOXED(4595204837283179724,64,FLEN)
NAN_BOXED(4576992330598901312,64,FLEN)
NAN_BOXED(4625349625050050685,64,FLEN)
NAN_BOXED(4595204837283179724,64,FLEN)
NAN_BOXED(4579956704887486208,64,FLEN)
NAN_BOXED(4633035405942847225,64,FLEN)
NAN_BOXED(4605836174435352785,64,FLEN)
NAN_BOXED(4579956704887486208,64,FLEN)
NAN_BOXED(4633035405942847225,64,FLEN)
NAN_BOXED(4605836174435352785,64,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_2:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_3:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_4:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_5:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_6:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_7:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_8:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_9:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_10:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_11:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_12:
    .fill 146*((SIGALIGN)/4),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*XLEN/32,4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

RVMODEL_DATA_END
