
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 15:28:48 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32D/fmsub.d.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fmsub.d instruction of the RISC-V RV32FD_Zicsr,RV64FD_Zicsr extension for the fmsub.d_b7 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IFD_Zicsr,RV64IFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*D.*);def TEST_CASE_1=True;",fmsub.d_b7)

RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_0:
// rs1 == rs2 == rs3 == rd, rs1==f9, rs2==f9, rs3==f9, rd==f9,fs1 == 0 and fe1 == 0x7f2 and fm1 == 0xe93a4462ebfff and fs2 == 0 and fe2 == 0x408 and fm2 == 0x4435ea24b2dc9 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x35ca63895fd77 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f9; op2:f9; op3:f9; dest:f9; op1val:0x7f2e93a4462ebfff; op2val:0x7f2e93a4462ebfff;
op3val:0x7f2e93a4462ebfff; valaddr_reg:x3; val_offset:0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f9, f9, f9, f9, dyn, 96, 0, x3, 0*FLEN/8, x4, x1, x2)

inst_1:
// rd == rs2 == rs3 != rs1, rs1==f10, rs2==f29, rs3==f29, rd==f29,fs1 == 0 and fe1 == 0x7f5 and fm1 == 0x1835aaec2f3ff and fs2 == 0 and fe2 == 0x407 and fm2 == 0x6505bdb287230 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x86c9200abcecf and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f10; op2:f29; op3:f29; dest:f29; op1val:0x7f51835aaec2f3ff; op2val:0x4076505bdb287230;
op3val:0x4076505bdb287230; valaddr_reg:x3; val_offset:3*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f29, f10, f29, f29, dyn, 96, 0, x3, 3*FLEN/8, x4, x1, x2)

inst_2:
// rs1 == rd == rs3 != rs2, rs1==f19, rs2==f12, rs3==f19, rd==f19,fs1 == 0 and fe1 == 0x7f5 and fm1 == 0xc87e298ac65ff and fs2 == 0 and fe2 == 0x407 and fm2 == 0xaf1d2bfcc9208 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x80603655a6422 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f19; op2:f12; op3:f19; dest:f19; op1val:0x7f5c87e298ac65ff; op2val:0x407af1d2bfcc9208;
op3val:0x7f5c87e298ac65ff; valaddr_reg:x3; val_offset:6*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f19, f19, f12, f19, dyn, 96, 0, x3, 6*FLEN/8, x4, x1, x2)

inst_3:
// rs1 != rs2 and rs1 != rd and rs1 != rs3 and rs2 != rs3 and rs2 != rd and rs3 != rd, rs1==f8, rs2==f23, rs3==f0, rd==f15,fs1 == 0 and fe1 == 0x7f6 and fm1 == 0xd69c3ccc232ff and fs2 == 0 and fe2 == 0x406 and fm2 == 0x11e3b1516326d and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xf77f2f573e477 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f8; op2:f23; op3:f0; dest:f15; op1val:0x7f6d69c3ccc232ff; op2val:0x40611e3b1516326d;
op3val:0x7fdf77f2f573e477; valaddr_reg:x3; val_offset:9*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f15, f8, f23, f0, dyn, 96, 0, x3, 9*FLEN/8, x4, x1, x2)

inst_4:
// rs1 == rs3 != rs2 and rs1 == rs3 != rd and rd != rs2, rs1==f1, rs2==f20, rs3==f1, rd==f8,fs1 == 0 and fe1 == 0x7f7 and fm1 == 0x01b818d54fa7f and fs2 == 0 and fe2 == 0x406 and fm2 == 0x967222f02addf and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x992cde89965d1 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f1; op2:f20; op3:f1; dest:f8; op1val:0x7f701b818d54fa7f; op2val:0x406967222f02addf;
op3val:0x7f701b818d54fa7f; valaddr_reg:x3; val_offset:12*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f8, f1, f20, f1, dyn, 96, 0, x3, 12*FLEN/8, x4, x1, x2)

inst_5:
// rs1 == rs2 == rs3 != rd, rs1==f5, rs2==f5, rs3==f5, rd==f17,fs1 == 0 and fe1 == 0x7f7 and fm1 == 0x0c4744a96187f and fs2 == 0 and fe2 == 0x405 and fm2 == 0x995df19783280 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xad004fc46d79f and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f5; op2:f5; op3:f5; dest:f17; op1val:0x7f70c4744a96187f; op2val:0x7f70c4744a96187f;
op3val:0x7f70c4744a96187f; valaddr_reg:x3; val_offset:15*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f17, f5, f5, f5, dyn, 96, 0, x3, 15*FLEN/8, x4, x1, x2)

inst_6:
// rs2 == rs3 != rs1 and rs2 == rs3 != rd and rd != rs1, rs1==f24, rs2==f10, rs3==f10, rd==f18,fs1 == 0 and fe1 == 0x7f7 and fm1 == 0x447022e841cff and fs2 == 0 and fe2 == 0x404 and fm2 == 0xaae4b950ea7ce and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x0e823c6894e81 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f24; op2:f10; op3:f10; dest:f18; op1val:0x7f7447022e841cff; op2val:0x404aae4b950ea7ce;
op3val:0x404aae4b950ea7ce; valaddr_reg:x3; val_offset:18*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f18, f24, f10, f10, dyn, 96, 0, x3, 18*FLEN/8, x4, x1, x2)

inst_7:
// rs2 == rd != rs1 and rs2 == rd != rs3 and rs3 != rs1, rs1==f6, rs2==f28, rs3==f13, rd==f28,fs1 == 0 and fe1 == 0x7f9 and fm1 == 0x1ecb025113f7f and fs2 == 0 and fe2 == 0x403 and fm2 == 0xa3860dd245747 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xd5fc7289c9947 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f6; op2:f28; op3:f13; dest:f28; op1val:0x7f91ecb025113f7f; op2val:0x403a3860dd245747;
op3val:0x7fdd5fc7289c9947; valaddr_reg:x3; val_offset:21*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f28, f6, f28, f13, dyn, 96, 0, x3, 21*FLEN/8, x4, x1, x2)

inst_8:
// rs1 == rs2 == rd != rs3, rs1==f13, rs2==f13, rs3==f27, rd==f13,fs1 == 0 and fe1 == 0x7f9 and fm1 == 0x28415313233bf and fs2 == 0 and fe2 == 0x403 and fm2 == 0x25542e0203a76 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x53742ec23b45b and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f13; op2:f13; op3:f27; dest:f13; op1val:0x7f928415313233bf; op2val:0x7f928415313233bf;
op3val:0x7fd53742ec23b45b; valaddr_reg:x3; val_offset:24*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f13, f13, f13, f27, dyn, 96, 0, x3, 24*FLEN/8, x4, x1, x2)

inst_9:
// rs1 == rs2 != rs3 and rs1 == rs2 != rd and rd != rs3, rs1==f18, rs2==f18, rs3==f8, rd==f26,fs1 == 0 and fe1 == 0x7f9 and fm1 == 0x71abc78672bff and fs2 == 0 and fe2 == 0x403 and fm2 == 0x4766a61cffe7f and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xd8c6a62d7fd8f and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f18; op2:f18; op3:f8; dest:f26; op1val:0x7f971abc78672bff; op2val:0x7f971abc78672bff;
op3val:0x7fdd8c6a62d7fd8f; valaddr_reg:x3; val_offset:27*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f26, f18, f18, f8, dyn, 96, 0, x3, 27*FLEN/8, x4, x1, x2)

inst_10:
// rs1 == rd != rs2 and rs1 == rd != rs3 and rs3 != rs2, rs1==f30, rs2==f19, rs3==f12, rd==f30,fs1 == 0 and fe1 == 0x7f9 and fm1 == 0x7a6679a447c1f and fs2 == 0 and fe2 == 0x404 and fm2 == 0x49681b9694e3f and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xe6e794bcede93 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f19; op3:f12; dest:f30; op1val:0x7f97a6679a447c1f; op2val:0x40449681b9694e3f;
op3val:0x7fee6e794bcede93; valaddr_reg:x3; val_offset:30*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f30, f30, f19, f12, dyn, 96, 0, x3, 30*FLEN/8, x4, x1, x2)

inst_11:
// rs3 == rd != rs1 and rs3 == rd != rs2 and rs2 != rs1, rs1==f14, rs2==f0, rs3==f11, rd==f11,fs1 == 0 and fe1 == 0x7f9 and fm1 == 0xa1ce7890019bf and fs2 == 0 and fe2 == 0x404 and fm2 == 0x124a72ef326d4 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xbfa87e4d4f18b and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f14; op2:f0; op3:f11; dest:f11; op1val:0x7f9a1ce7890019bf; op2val:0x404124a72ef326d4;
op3val:0x7febfa87e4d4f18b; valaddr_reg:x3; val_offset:33*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f11, f14, f0, f11, dyn, 96, 0, x3, 33*FLEN/8, x4, x1, x2)

inst_12:
// rs1==f3, rs2==f14, rs3==f15, rd==f21,fs1 == 0 and fe1 == 0x7f9 and fm1 == 0xc9b89652275bf and fs2 == 0 and fe2 == 0x402 and fm2 == 0x400e03101e0da and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x1e1fe4bc725cb and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f3; op2:f14; op3:f15; dest:f21; op1val:0x7f9c9b89652275bf; op2val:0x402400e03101e0da;
op3val:0x7fd1e1fe4bc725cb; valaddr_reg:x3; val_offset:36*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f21, f3, f14, f15, dyn, 96, 0, x3, 36*FLEN/8, x4, x1, x2)

inst_13:
// rs1==f25, rs2==f3, rs3==f16, rd==f4,fs1 == 0 and fe1 == 0x7fa and fm1 == 0x082381b36797f and fs2 == 0 and fe2 == 0x403 and fm2 == 0x6013ae6c00679 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x6b4520f0e04f2 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f25; op2:f3; op3:f16; dest:f4; op1val:0x7fa082381b36797f; op2val:0x4036013ae6c00679;
op3val:0x7fe6b4520f0e04f2; valaddr_reg:x3; val_offset:39*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f4, f25, f3, f16, dyn, 96, 0, x3, 39*FLEN/8, x4, x1, x2)

inst_14:
// rs1==f29, rs2==f22, rs3==f23, rd==f24,fs1 == 0 and fe1 == 0x7fa and fm1 == 0x332a1858028cf and fs2 == 0 and fe2 == 0x402 and fm2 == 0x721650593dd17 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xbc0d9d3586aa3 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f29; op2:f22; op3:f23; dest:f24; op1val:0x7fa332a1858028cf; op2val:0x402721650593dd17;
op3val:0x7fdbc0d9d3586aa3; valaddr_reg:x3; val_offset:42*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f24, f29, f22, f23, dyn, 96, 0, x3, 42*FLEN/8, x4, x1, x2)

inst_15:
// rs1==f12, rs2==f6, rs3==f24, rd==f16,fs1 == 0 and fe1 == 0x7fa and fm1 == 0x412f93d91b86f and fs2 == 0 and fe2 == 0x403 and fm2 == 0x10b0d09a9e321 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x56206384f7bbd and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f12; op2:f6; op3:f24; dest:f16; op1val:0x7fa412f93d91b86f; op2val:0x40310b0d09a9e321;
op3val:0x7fe56206384f7bbd; valaddr_reg:x3; val_offset:45*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f16, f12, f6, f24, dyn, 96, 0, x3, 45*FLEN/8, x4, x1, x2)

inst_16:
// rs1==f31, rs2==f21, rs3==f4, rd==f10,fs1 == 0 and fe1 == 0x7fa and fm1 == 0x43f684016618f and fs2 == 0 and fe2 == 0x403 and fm2 == 0x3c8281523ad71 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x908971c80aada and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f31; op2:f21; op3:f4; dest:f10; op1val:0x7fa43f684016618f; op2val:0x4033c8281523ad71;
op3val:0x7fe908971c80aada; valaddr_reg:x3; val_offset:48*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f10, f31, f21, f4, dyn, 96, 0, x3, 48*FLEN/8, x4, x1, x2)

inst_17:
// rs1==f0, rs2==f16, rs3==f21, rd==f5,fs1 == 0 and fe1 == 0x7fa and fm1 == 0x444e739fa3e6f and fs2 == 0 and fe2 == 0x403 and fm2 == 0x3ad7200a2e80d and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x8ed8c04b9e89a and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f0; op2:f16; op3:f21; dest:f5; op1val:0x7fa444e739fa3e6f; op2val:0x4033ad7200a2e80d;
op3val:0x7fe8ed8c04b9e89a; valaddr_reg:x3; val_offset:51*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f5, f0, f16, f21, dyn, 96, 0, x3, 51*FLEN/8, x4, x1, x2)

inst_18:
// rs1==f16, rs2==f2, rs3==f28, rd==f22,fs1 == 0 and fe1 == 0x7fa and fm1 == 0x5555f1936f22f and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x1467f94672e9e and fs3 == 0 and fe3 == 0x7f9 and fm3 == 0x708b4a65acd3f and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f16; op2:f2; op3:f28; dest:f22; op1val:0x7fa5555f1936f22f; op2val:0x3fe1467f94672e9e;
op3val:0x7f9708b4a65acd3f; valaddr_reg:x3; val_offset:54*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f22, f16, f2, f28, dyn, 96, 0, x3, 54*FLEN/8, x4, x1, x2)

inst_19:
// rs1==f15, rs2==f8, rs3==f6, rd==f20,fs1 == 0 and fe1 == 0x7fa and fm1 == 0x66b63b4ca758f and fs2 == 0 and fe2 == 0x403 and fm2 == 0x31363596b9a6e and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xabab122dc2bd6 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f15; op2:f8; op3:f6; dest:f20; op1val:0x7fa66b63b4ca758f; op2val:0x40331363596b9a6e;
op3val:0x7feabab122dc2bd6; valaddr_reg:x3; val_offset:57*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f20, f15, f8, f6, dyn, 96, 0, x3, 57*FLEN/8, x4, x1, x2)

inst_20:
// rs1==f11, rs2==f7, rs3==f25, rd==f14,fs1 == 0 and fe1 == 0x7fa and fm1 == 0x9cb5ecb97e53f and fs2 == 0 and fe2 == 0x401 and fm2 == 0x005119d510e39 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x9d38abeea7bb3 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f11; op2:f7; op3:f25; dest:f14; op1val:0x7fa9cb5ecb97e53f; op2val:0x401005119d510e39;
op3val:0x7fc9d38abeea7bb3; valaddr_reg:x3; val_offset:60*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f14, f11, f7, f25, dyn, 96, 0, x3, 60*FLEN/8, x4, x1, x2)

inst_21:
// rs1==f4, rs2==f31, rs3==f26, rd==f2,fs1 == 0 and fe1 == 0x7fa and fm1 == 0xbd8d07591377f and fs2 == 0 and fe2 == 0x400 and fm2 == 0x318515d6311d4 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x09de5303a6393 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f4; op2:f31; op3:f26; dest:f2; op1val:0x7fabd8d07591377f; op2val:0x400318515d6311d4;
op3val:0x7fc09de5303a6393; valaddr_reg:x3; val_offset:63*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f2, f4, f31, f26, dyn, 96, 0, x3, 63*FLEN/8, x4, x1, x2)

inst_22:
// rs1==f17, rs2==f30, rs3==f2, rd==f0,fs1 == 0 and fe1 == 0x7fa and fm1 == 0xdb208fa38975f and fs2 == 0 and fe2 == 0x402 and fm2 == 0x17f84065d01af and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x03ce9dcdbd9d6 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f17; op2:f30; op3:f2; dest:f0; op1val:0x7fadb208fa38975f; op2val:0x40217f84065d01af;
op3val:0x7fe03ce9dcdbd9d6; valaddr_reg:x3; val_offset:66*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f0, f17, f30, f2, dyn, 96, 0, x3, 66*FLEN/8, x4, x1, x2)

inst_23:
// rs1==f21, rs2==f11, rs3==f14, rd==f6,fs1 == 0 and fe1 == 0x7fa and fm1 == 0xe2f460df71daf and fs2 == 0 and fe2 == 0x402 and fm2 == 0xa0fdaacb5fbcf and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x8955d5926548d and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f21; op2:f11; op3:f14; dest:f6; op1val:0x7fae2f460df71daf; op2val:0x402a0fdaacb5fbcf;
op3val:0x7fe8955d5926548d; valaddr_reg:x3; val_offset:69*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f6, f21, f11, f14, dyn, 96, 0, x3, 69*FLEN/8, x4, x1, x2)

inst_24:
// rs1==f23, rs2==f27, rs3==f17, rd==f7,fs1 == 0 and fe1 == 0x7fa and fm1 == 0xe840b679dda5f and fs2 == 0 and fe2 == 0x400 and fm2 == 0xba5199ddf7689 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0xa5cdae7f1504f and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f23; op2:f27; op3:f17; dest:f7; op1val:0x7fae840b679dda5f; op2val:0x400ba5199ddf7689;
op3val:0x7fca5cdae7f1504f; valaddr_reg:x3; val_offset:72*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f7, f23, f27, f17, dyn, 96, 0, x3, 72*FLEN/8, x4, x1, x2)

inst_25:
// rs1==f7, rs2==f24, rs3==f18, rd==f3,fs1 == 0 and fe1 == 0x7fa and fm1 == 0xf0ef5df1750af and fs2 == 0 and fe2 == 0x401 and fm2 == 0x1b9121c3beffe and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x13392afc7b2cb and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f7; op2:f24; op3:f18; dest:f3; op1val:0x7faf0ef5df1750af; op2val:0x4011b9121c3beffe;
op3val:0x7fd13392afc7b2cb; valaddr_reg:x3; val_offset:75*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f3, f7, f24, f18, dyn, 96, 0, x3, 75*FLEN/8, x4, x1, x2)

inst_26:
// rs1==f26, rs2==f25, rs3==f31, rd==f12,fs1 == 0 and fe1 == 0x7fa and fm1 == 0xf10102ecb507f and fs2 == 0 and fe2 == 0x402 and fm2 == 0x72003d0023fd5 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x6729f653d09b6 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f26; op2:f25; op3:f31; dest:f12; op1val:0x7faf10102ecb507f; op2val:0x40272003d0023fd5;
op3val:0x7fe6729f653d09b6; valaddr_reg:x3; val_offset:78*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f12, f26, f25, f31, dyn, 96, 0, x3, 78*FLEN/8, x4, x1, x2)

inst_27:
// rs1==f22, rs2==f26, rs3==f3, rd==f23,fs1 == 0 and fe1 == 0x7fa and fm1 == 0xfc643dfe19f4f and fs2 == 0 and fe2 == 0x401 and fm2 == 0x1e3199a5d96aa and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x1c2d3ec982081 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f22; op2:f26; op3:f3; dest:f23; op1val:0x7fafc643dfe19f4f; op2val:0x4011e3199a5d96aa;
op3val:0x7fd1c2d3ec982081; valaddr_reg:x3; val_offset:81*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f23, f22, f26, f3, dyn, 96, 0, x3, 81*FLEN/8, x4, x1, x2)

inst_28:
// rs1==f2, rs2==f15, rs3==f22, rd==f27,fs1 == 0 and fe1 == 0x7fa and fm1 == 0xfdef24c32f24f and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x14f92f8aa95db and fs3 == 0 and fe3 == 0x7fb and fm3 == 0x13db17f82659f and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f2; op2:f15; op3:f22; dest:f27; op1val:0x7fafdef24c32f24f; op2val:0x3ff14f92f8aa95db;
op3val:0x7fb13db17f82659f; valaddr_reg:x3; val_offset:84*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f27, f2, f15, f22, dyn, 96, 0, x3, 84*FLEN/8, x4, x1, x2)

inst_29:
// rs1==f20, rs2==f17, rs3==f7, rd==f25,fs1 == 0 and fe1 == 0x7fb and fm1 == 0x0755c839c777f and fs2 == 0 and fe2 == 0x402 and fm2 == 0xea50563547915 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xf85cd4bac97e1 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f20; op2:f17; op3:f7; dest:f25; op1val:0x7fb0755c839c777f; op2val:0x402ea50563547915;
op3val:0x7fef85cd4bac97e1; valaddr_reg:x3; val_offset:87*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f25, f20, f17, f7, dyn, 96, 0, x3, 87*FLEN/8, x4, x1, x2)

inst_30:
// rs1==f28, rs2==f1, rs3==f30, rd==f31,fs1 == 0 and fe1 == 0x7fb and fm1 == 0x10e2ca87661e7 and fs2 == 0 and fe2 == 0x402 and fm2 == 0x9e6804195486b and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xb9bda407c9909 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f28; op2:f1; op3:f30; dest:f31; op1val:0x7fb10e2ca87661e7; op2val:0x4029e6804195486b;
op3val:0x7feb9bda407c9909; valaddr_reg:x3; val_offset:90*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f28, f1, f30, dyn, 96, 0, x3, 90*FLEN/8, x4, x1, x2)

inst_31:
// rs1==f27, rs2==f4, rs3==f20, rd==f1,fs1 == 0 and fe1 == 0x7fb and fm1 == 0x1e20b87b382df and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x4c6fe2f4aa781 and fs3 == 0 and fe3 == 0x7fb and fm3 == 0x738f7d1a22dd7 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f27; op2:f4; op3:f20; dest:f1; op1val:0x7fb1e20b87b382df; op2val:0x3ff4c6fe2f4aa781;
op3val:0x7fb738f7d1a22dd7; valaddr_reg:x3; val_offset:93*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f1, f27, f4, f20, dyn, 96, 0, x3, 93*FLEN/8, x4, x1, x2)

inst_32:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0x21ae3f403ac27 and fs2 == 0 and fe2 == 0x402 and fm2 == 0x4f3b0adcd2e0d and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x7b55d4384f883 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fb21ae3f403ac27; op2val:0x4024f3b0adcd2e0d;
op3val:0x7fe7b55d4384f883; valaddr_reg:x3; val_offset:96*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 96*FLEN/8, x4, x1, x2)

inst_33:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0x289bae89b0547 and fs2 == 0 and fe2 == 0x402 and fm2 == 0x9ea8d3864183b and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xe06f5f8113c54 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fb289bae89b0547; op2val:0x4029ea8d3864183b;
op3val:0x7fee06f5f8113c54; valaddr_reg:x3; val_offset:99*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 99*FLEN/8, x4, x1, x2)

inst_34:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0x29261957a1af7 and fs2 == 0 and fe2 == 0x400 and fm2 == 0xa894f7a055317 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0xecd4036da79a7 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fb29261957a1af7; op2val:0x400a894f7a055317;
op3val:0x7fcecd4036da79a7; valaddr_reg:x3; val_offset:102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 102*FLEN/8, x4, x1, x2)

inst_35:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0x2b80ae6ce5acf and fs2 == 0 and fe2 == 0x402 and fm2 == 0x24fb884b09188 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x56c50d9360bf9 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fb2b80ae6ce5acf; op2val:0x40224fb884b09188;
op3val:0x7fe56c50d9360bf9; valaddr_reg:x3; val_offset:105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 105*FLEN/8, x4, x1, x2)

inst_36:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0x30f27bb1386cf and fs2 == 0 and fe2 == 0x400 and fm2 == 0xc89149824f6db and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x0fee7e9e0d747 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fb30f27bb1386cf; op2val:0x400c89149824f6db;
op3val:0x7fd0fee7e9e0d747; valaddr_reg:x3; val_offset:108*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 108*FLEN/8, x4, x1, x2)

inst_37:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0x4a0f9e552df5f and fs2 == 0 and fe2 == 0x401 and fm2 == 0x64c1f3bb840b8 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xcbf7c83369141 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fb4a0f9e552df5f; op2val:0x40164c1f3bb840b8;
op3val:0x7fdcbf7c83369141; valaddr_reg:x3; val_offset:111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 111*FLEN/8, x4, x1, x2)

inst_38:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0x5702673763077 and fs2 == 0 and fe2 == 0x402 and fm2 == 0x472f6a2ead396 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xb663998e3beea and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fb5702673763077; op2val:0x402472f6a2ead396;
op3val:0x7feb663998e3beea; valaddr_reg:x3; val_offset:114*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 114*FLEN/8, x4, x1, x2)

inst_39:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0x5a0ccf5498b87 and fs2 == 0 and fe2 == 0x402 and fm2 == 0x3ea4e4a974684 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xaebaced8605de and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fb5a0ccf5498b87; op2val:0x4023ea4e4a974684;
op3val:0x7feaebaced8605de; valaddr_reg:x3; val_offset:117*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 117*FLEN/8, x4, x1, x2)

inst_40:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0x5b40afab57167 and fs2 == 0 and fe2 == 0x401 and fm2 == 0xf2ae85558a252 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x52384847ac803 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fb5b40afab57167; op2val:0x401f2ae85558a252;
op3val:0x7fe52384847ac803; valaddr_reg:x3; val_offset:120*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 120*FLEN/8, x4, x1, x2)

inst_41:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0x5fc89849c9c47 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x30984b5bb5267 and fs3 == 0 and fe3 == 0x7fb and fm3 == 0xa28f7b7fd5427 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fb5fc89849c9c47; op2val:0x3ff30984b5bb5267;
op3val:0x7fba28f7b7fd5427; valaddr_reg:x3; val_offset:123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 123*FLEN/8, x4, x1, x2)

inst_42:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0x6e6fec8ee140f and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x493aaf3b6ab0b and fs3 == 0 and fe3 == 0x7fa and fm3 == 0xd741d732c713f and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fb6e6fec8ee140f; op2val:0x3fe493aaf3b6ab0b;
op3val:0x7fad741d732c713f; valaddr_reg:x3; val_offset:126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 126*FLEN/8, x4, x1, x2)

inst_43:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0x6fa14249a8b0f and fs2 == 0 and fe2 == 0x401 and fm2 == 0x1ce09d7b99965 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x991974cb1c493 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fb6fa14249a8b0f; op2val:0x4011ce09d7b99965;
op3val:0x7fd991974cb1c493; valaddr_reg:x3; val_offset:129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 129*FLEN/8, x4, x1, x2)

inst_44:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0x9f9919e5dc9c7 and fs2 == 0 and fe2 == 0x400 and fm2 == 0xcab41e926fa19 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x745628ce8ef13 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fb9f9919e5dc9c7; op2val:0x400cab41e926fa19;
op3val:0x7fd745628ce8ef13; valaddr_reg:x3; val_offset:132*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 132*FLEN/8, x4, x1, x2)

inst_45:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0xa09a841a6d9bf and fs2 == 0 and fe2 == 0x402 and fm2 == 0x069b2b1d1d7b6 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xab5aa6ea5dd9a and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fba09a841a6d9bf; op2val:0x402069b2b1d1d7b6;
op3val:0x7feab5aa6ea5dd9a; valaddr_reg:x3; val_offset:135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 135*FLEN/8, x4, x1, x2)

inst_46:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0xa81682f68a287 and fs2 == 0 and fe2 == 0x401 and fm2 == 0x8813c25ec02a6 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x44c19a19a0da1 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fba81682f68a287; op2val:0x4018813c25ec02a6;
op3val:0x7fe44c19a19a0da1; valaddr_reg:x3; val_offset:138*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 138*FLEN/8, x4, x1, x2)

inst_47:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0xad2d5e2b0a13f and fs2 == 0 and fe2 == 0x400 and fm2 == 0x446a9e40825ba and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x0ff014a2ce4a1 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fbad2d5e2b0a13f; op2val:0x400446a9e40825ba;
op3val:0x7fd0ff014a2ce4a1; valaddr_reg:x3; val_offset:141*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 141*FLEN/8, x4, x1, x2)

inst_48:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0xadbce4c0d41b7 and fs2 == 0 and fe2 == 0x401 and fm2 == 0xfddbc80b63304 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xabf0c19ce382c and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fbadbce4c0d41b7; op2val:0x401fddbc80b63304;
op3val:0x7feabf0c19ce382c; valaddr_reg:x3; val_offset:144*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 144*FLEN/8, x4, x1, x2)

inst_49:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0xb29fc9c4366f7 and fs2 == 0 and fe2 == 0x401 and fm2 == 0x51f17371d44aa and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x1edf2283a2fb1 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fbb29fc9c4366f7; op2val:0x40151f17371d44aa;
op3val:0x7fe1edf2283a2fb1; valaddr_reg:x3; val_offset:147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 147*FLEN/8, x4, x1, x2)

inst_50:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0xbea7047295f77 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x6a6c7efc0ad33 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x3c2abc26edf17 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fbbea7047295f77; op2val:0x3ff6a6c7efc0ad33;
op3val:0x7fc3c2abc26edf17; valaddr_reg:x3; val_offset:150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 150*FLEN/8, x4, x1, x2)

inst_51:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0xc0502df03ca97 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x799e7f8f6d9cb and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x4aa5d2430b91b and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fbc0502df03ca97; op2val:0x3ff799e7f8f6d9cb;
op3val:0x7fc4aa5d2430b91b; valaddr_reg:x3; val_offset:153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 153*FLEN/8, x4, x1, x2)

inst_52:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0xf229dcc8e3fb7 and fs2 == 0 and fe2 == 0x400 and fm2 == 0xd14daf1382c6d and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xc4ba9aa872069 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fbf229dcc8e3fb7; op2val:0x400d14daf1382c6d;
op3val:0x7fdc4ba9aa872069; valaddr_reg:x3; val_offset:156*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 156*FLEN/8, x4, x1, x2)

inst_53:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0xfb17c3e518207 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xcd9e20ba842b1 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0xc93182a170b2f and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fbfb17c3e518207; op2val:0x3ffcd9e20ba842b1;
op3val:0x7fcc93182a170b2f; valaddr_reg:x3; val_offset:159*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 159*FLEN/8, x4, x1, x2)

inst_54:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x042cb1070d70f and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x3096f727622ae and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x358e7f973f797 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc042cb1070d70f; op2val:0x3ff3096f727622ae;
op3val:0x7fc358e7f973f797; valaddr_reg:x3; val_offset:162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 162*FLEN/8, x4, x1, x2)

inst_55:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x06137ba060843 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xf7b7e63ad7b56 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x01d645c39dcc7 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc06137ba060843; op2val:0x3fff7b7e63ad7b56;
op3val:0x7fd01d645c39dcc7; valaddr_reg:x3; val_offset:165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 165*FLEN/8, x4, x1, x2)

inst_56:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x08e386bd0561b and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xea191d43c722f and fs3 == 0 and fe3 == 0x7fc and fm3 == 0xfb1d7c65dc9f3 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc08e386bd0561b; op2val:0x3ffea191d43c722f;
op3val:0x7fcfb1d7c65dc9f3; valaddr_reg:x3; val_offset:168*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 168*FLEN/8, x4, x1, x2)

inst_57:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x0c4143057a407 and fs2 == 0 and fe2 == 0x3fb and fm2 == 0xbd642f851c58f and fs3 == 0 and fe3 == 0x7f8 and fm3 == 0xd2b66cca2a8ff and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc0c4143057a407; op2val:0x3fbbd642f851c58f;
op3val:0x7f8d2b66cca2a8ff; valaddr_reg:x3; val_offset:171*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 171*FLEN/8, x4, x1, x2)

inst_58:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x0c705b0f97703 and fs2 == 0 and fe2 == 0x401 and fm2 == 0xbc56ad55a2445 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xd1edc16f5ae1f and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc0c705b0f97703; op2val:0x401bc56ad55a2445;
op3val:0x7fed1edc16f5ae1f; valaddr_reg:x3; val_offset:174*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 174*FLEN/8, x4, x1, x2)

inst_59:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x10932aa31a49b and fs2 == 0 and fe2 == 0x400 and fm2 == 0x5ae769b6b5d4b and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x715d4cfad16c1 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc10932aa31a49b; op2val:0x4005ae769b6b5d4b;
op3val:0x7fd715d4cfad16c1; valaddr_reg:x3; val_offset:177*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 177*FLEN/8, x4, x1, x2)

inst_60:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x1d4d4ee8ee657 and fs2 == 0 and fe2 == 0x400 and fm2 == 0xe13e6dd1aee1f and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x0c29ea302ef9a and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc1d4d4ee8ee657; op2val:0x400e13e6dd1aee1f;
op3val:0x7fe0c29ea302ef9a; valaddr_reg:x3; val_offset:180*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 180*FLEN/8, x4, x1, x2)

inst_61:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x202b1b6a8ad9b and fs2 == 0 and fe2 == 0x400 and fm2 == 0x38e5b08809be3 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x603716b0243ef and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc202b1b6a8ad9b; op2val:0x40038e5b08809be3;
op3val:0x7fd603716b0243ef; valaddr_reg:x3; val_offset:183*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 183*FLEN/8, x4, x1, x2)

inst_62:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x2248efbf5b40f and fs2 == 0 and fe2 == 0x400 and fm2 == 0xd942f4283c10f and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x0c525750c17a5 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc2248efbf5b40f; op2val:0x400d942f4283c10f;
op3val:0x7fe0c525750c17a5; valaddr_reg:x3; val_offset:186*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 186*FLEN/8, x4, x1, x2)

inst_63:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x276f358a6a63b and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xa21385d91b7e5 and fs3 == 0 and fe3 == 0x7fb and fm3 == 0xe27a1d244ecc7 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc276f358a6a63b; op2val:0x3fea21385d91b7e5;
op3val:0x7fbe27a1d244ecc7; valaddr_reg:x3; val_offset:189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 189*FLEN/8, x4, x1, x2)

inst_64:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x2b5d6f9c9011b and fs2 == 0 and fe2 == 0x401 and fm2 == 0x69dfb973f79f1 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xa72c61a622bce and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc2b5d6f9c9011b; op2val:0x40169dfb973f79f1;
op3val:0x7fea72c61a622bce; valaddr_reg:x3; val_offset:192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 192*FLEN/8, x4, x1, x2)

inst_65:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x2ded3254ef123 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xb8f6061d94b51 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x0408ebd3657a3 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc2ded3254ef123; op2val:0x3ffb8f6061d94b51;
op3val:0x7fd0408ebd3657a3; valaddr_reg:x3; val_offset:195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 195*FLEN/8, x4, x1, x2)

inst_66:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x31e7d2895e8b3 and fs2 == 0 and fe2 == 0x401 and fm2 == 0x89d6e02e36b0a and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xd69da5e0f232b and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc31e7d2895e8b3; op2val:0x40189d6e02e36b0a;
op3val:0x7fed69da5e0f232b; valaddr_reg:x3; val_offset:198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 198*FLEN/8, x4, x1, x2)

inst_67:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x3743aaeeeacbb and fs2 == 0 and fe2 == 0x400 and fm2 == 0x9bcce06a14cb0 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xf4b2be35fa361 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc3743aaeeeacbb; op2val:0x4009bcce06a14cb0;
op3val:0x7fdf4b2be35fa361; valaddr_reg:x3; val_offset:201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 201*FLEN/8, x4, x1, x2)

inst_68:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x3c4e82f083607 and fs2 == 0 and fe2 == 0x401 and fm2 == 0x28bf65ecaacb4 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x6ea743e92e6a6 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc3c4e82f083607; op2val:0x40128bf65ecaacb4;
op3val:0x7fe6ea743e92e6a6; valaddr_reg:x3; val_offset:204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 204*FLEN/8, x4, x1, x2)

inst_69:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x42a0a144df96b and fs2 == 0 and fe2 == 0x400 and fm2 == 0x6a3ec4d3e2eea and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xc8863f0076b57 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc42a0a144df96b; op2val:0x4006a3ec4d3e2eea;
op3val:0x7fdc8863f0076b57; valaddr_reg:x3; val_offset:207*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 207*FLEN/8, x4, x1, x2)

inst_70:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x4aaeb7b4d19eb and fs2 == 0 and fe2 == 0x400 and fm2 == 0x56153ee560dc4 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xb9e0daff3dc55 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc4aaeb7b4d19eb; op2val:0x40056153ee560dc4;
op3val:0x7fdb9e0daff3dc55; valaddr_reg:x3; val_offset:210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 210*FLEN/8, x4, x1, x2)

inst_71:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x561a225b0ee73 and fs2 == 0 and fe2 == 0x401 and fm2 == 0x27c20f760e378 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x8b3b720e423c7 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc561a225b0ee73; op2val:0x40127c20f760e378;
op3val:0x7fe8b3b720e423c7; valaddr_reg:x3; val_offset:213*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 213*FLEN/8, x4, x1, x2)

inst_72:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x56b267a4a915b and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xeea25c12b5249 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x4b12ce133e613 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc56b267a4a915b; op2val:0x3feeea25c12b5249;
op3val:0x7fc4b12ce133e613; valaddr_reg:x3; val_offset:216*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 216*FLEN/8, x4, x1, x2)

inst_73:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x5829bf9c6538f and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x64c2b92225f5e and fs3 == 0 and fe3 == 0x7fb and fm3 == 0xdf9fd6fcc553f and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc5829bf9c6538f; op2val:0x3fe64c2b92225f5e;
op3val:0x7fbdf9fd6fcc553f; valaddr_reg:x3; val_offset:219*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 219*FLEN/8, x4, x1, x2)

inst_74:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x60f750243d353 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x5fa870dff129f and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xe4db54cf3eb57 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc60f750243d353; op2val:0x4005fa870dff129f;
op3val:0x7fde4db54cf3eb57; valaddr_reg:x3; val_offset:222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 222*FLEN/8, x4, x1, x2)

inst_75:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x68e4d726bb7d7 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x50f99573d3393 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0xdb0c33a8948c7 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc68e4d726bb7d7; op2val:0x3ff50f99573d3393;
op3val:0x7fcdb0c33a8948c7; valaddr_reg:x3; val_offset:225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 225*FLEN/8, x4, x1, x2)

inst_76:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x6d9ccb6f15b67 and fs2 == 0 and fe2 == 0x401 and fm2 == 0x1ae7a70da303c and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x94098f28b1a38 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc6d9ccb6f15b67; op2val:0x4011ae7a70da303c;
op3val:0x7fe94098f28b1a38; valaddr_reg:x3; val_offset:228*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 228*FLEN/8, x4, x1, x2)

inst_77:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x7220ac1a61dbb and fs2 == 0 and fe2 == 0x400 and fm2 == 0x9beb88f04a963 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x29c77f248e9cc and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc7220ac1a61dbb; op2val:0x4009beb88f04a963;
op3val:0x7fe29c77f248e9cc; valaddr_reg:x3; val_offset:231*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 231*FLEN/8, x4, x1, x2)

inst_78:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x8401c483a4e5f and fs2 == 0 and fe2 == 0x400 and fm2 == 0x40c19bce4afc0 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xe627a71f726d1 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc8401c483a4e5f; op2val:0x40040c19bce4afc0;
op3val:0x7fde627a71f726d1; valaddr_reg:x3; val_offset:234*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 234*FLEN/8, x4, x1, x2)

inst_79:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x8a0cbb3e7c653 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xe2c97cd66ceb8 and fs3 == 0 and fe3 == 0x7fb and fm3 == 0x73910e5971a27 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc8a0cbb3e7c653; op2val:0x3fde2c97cd66ceb8;
op3val:0x7fb73910e5971a27; valaddr_reg:x3; val_offset:237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 237*FLEN/8, x4, x1, x2)

inst_80:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x90e2945b4b1b3 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xa09379e91019b and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x462b910bcd037 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc90e2945b4b1b3; op2val:0x3ffa09379e91019b;
op3val:0x7fd462b910bcd037; valaddr_reg:x3; val_offset:240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 240*FLEN/8, x4, x1, x2)

inst_81:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x92daae5675f67 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x09fa7537d57df and fs3 == 0 and fe3 == 0x7fc and fm3 == 0xa28e807b8f2a7 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc92daae5675f67; op2val:0x3ff09fa7537d57df;
op3val:0x7fca28e807b8f2a7; valaddr_reg:x3; val_offset:243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 243*FLEN/8, x4, x1, x2)

inst_82:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x9b9b6e3f88af3 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x4174a18832cd7 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x026cb5b1ade26 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fc9b9b6e3f88af3; op2val:0x4004174a18832cd7;
op3val:0x7fe026cb5b1ade26; valaddr_reg:x3; val_offset:246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 246*FLEN/8, x4, x1, x2)

inst_83:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0xa9b9118027a27 and fs2 == 0 and fe2 == 0x401 and fm2 == 0x16ed8737eb4bc and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xcfd9fa33f4f74 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fca9b9118027a27; op2val:0x40116ed8737eb4bc;
op3val:0x7fecfd9fa33f4f74; valaddr_reg:x3; val_offset:249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 249*FLEN/8, x4, x1, x2)

inst_84:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0xab8c0870ccebf and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x8e0e153843530 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x4c659d1c2442b and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fcab8c0870ccebf; op2val:0x3fe8e0e153843530;
op3val:0x7fc4c659d1c2442b; valaddr_reg:x3; val_offset:252*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 252*FLEN/8, x4, x1, x2)

inst_85:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0xadbf22eaa3553 and fs2 == 0 and fe2 == 0x401 and fm2 == 0x20670c63d396f and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xe42403fb8de70 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fcadbf22eaa3553; op2val:0x40120670c63d396f;
op3val:0x7fee42403fb8de70; valaddr_reg:x3; val_offset:255*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 255*FLEN/8, x4, x1, x2)

inst_86:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0xaf88181319d3f and fs2 == 0 and fe2 == 0x400 and fm2 == 0x613aa15e6dbf3 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x29b6bf05c7869 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fcaf88181319d3f; op2val:0x400613aa15e6dbf3;
op3val:0x7fe29b6bf05c7869; valaddr_reg:x3; val_offset:258*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 258*FLEN/8, x4, x1, x2)

inst_87:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0xc1b743bf268e7 and fs2 == 0 and fe2 == 0x401 and fm2 == 0x159cba2b1fd8a and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xe7ae9f060626a and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fcc1b743bf268e7; op2val:0x401159cba2b1fd8a;
op3val:0x7fee7ae9f060626a; valaddr_reg:x3; val_offset:261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 261*FLEN/8, x4, x1, x2)

inst_88:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0xc381c01a26f87 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x0769999898d4c and fs3 == 0 and fe3 == 0x7fc and fm3 == 0xd0948b7857293 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fcc381c01a26f87; op2val:0x3ff0769999898d4c;
op3val:0x7fcd0948b7857293; valaddr_reg:x3; val_offset:264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 264*FLEN/8, x4, x1, x2)

inst_89:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0xd05ccb332dd2f and fs2 == 0 and fe2 == 0x400 and fm2 == 0x2438416c6ef58 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x0907f15f89bcc and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fcd05ccb332dd2f; op2val:0x4002438416c6ef58;
op3val:0x7fe0907f15f89bcc; valaddr_reg:x3; val_offset:267*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 267*FLEN/8, x4, x1, x2)

inst_90:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0xd6eb2915c891b and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x1589235a4123d and fs3 == 0 and fe3 == 0x7f9 and fm3 == 0xfe88b855bbcbf and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fcd6eb2915c891b; op2val:0x3fc1589235a4123d;
op3val:0x7f9fe88b855bbcbf; valaddr_reg:x3; val_offset:270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 270*FLEN/8, x4, x1, x2)

inst_91:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0xd9dfa57f75957 and fs2 == 0 and fe2 == 0x400 and fm2 == 0xf09af67a7bf04 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xcba014b812c36 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fcd9dfa57f75957; op2val:0x400f09af67a7bf04;
op3val:0x7fecba014b812c36; valaddr_reg:x3; val_offset:273*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 273*FLEN/8, x4, x1, x2)

inst_92:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0xdc513d91c3097 and fs2 == 0 and fe2 == 0x400 and fm2 == 0xfa488909a06e9 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xd6ffc4c267e71 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fcdc513d91c3097; op2val:0x400fa488909a06e9;
op3val:0x7fed6ffc4c267e71; valaddr_reg:x3; val_offset:276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 276*FLEN/8, x4, x1, x2)

inst_93:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0xdddf4f0316907 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x0a089784d8f3d and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xf09a11ea6145f and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fcdddf4f0316907; op2val:0x4000a089784d8f3d;
op3val:0x7fdf09a11ea6145f; valaddr_reg:x3; val_offset:279*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 279*FLEN/8, x4, x1, x2)

inst_94:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0xe9bb325e4941f and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x149685b9fa191 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x088ee2e7990e9 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fce9bb325e4941f; op2val:0x3ff149685b9fa191;
op3val:0x7fd088ee2e7990e9; valaddr_reg:x3; val_offset:282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 282*FLEN/8, x4, x1, x2)

inst_95:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0xec9feac380847 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x3810ac8e0bd02 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x2c417e14dd023 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fcec9feac380847; op2val:0x4003810ac8e0bd02;
op3val:0x7fe2c417e14dd023; valaddr_reg:x3; val_offset:285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 285*FLEN/8, x4, x1, x2)

inst_96:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0xf3e8df14f472f and fs2 == 0 and fe2 == 0x400 and fm2 == 0x2d37c75ea8563 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x261add5337480 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fcf3e8df14f472f; op2val:0x4002d37c75ea8563;
op3val:0x7fe261add5337480; valaddr_reg:x3; val_offset:288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 288*FLEN/8, x4, x1, x2)

inst_97:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0xf4a05d08d17ff and fs2 == 0 and fe2 == 0x400 and fm2 == 0xf9a76c4edad95 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xee6bdff8790dd and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fcf4a05d08d17ff; op2val:0x400f9a76c4edad95;
op3val:0x7feee6bdff8790dd; valaddr_reg:x3; val_offset:291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 291*FLEN/8, x4, x1, x2)

inst_98:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0xfcea9730f9703 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x1d47ffdf2e702 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x1b90260566c5d and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fcfcea9730f9703; op2val:0x3ff1d47ffdf2e702;
op3val:0x7fd1b90260566c5d; valaddr_reg:x3; val_offset:294*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 294*FLEN/8, x4, x1, x2)

inst_99:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0xfe9df4f895fc3 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x10d7ac367e0e5 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x101b0137d6bc7 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fcfe9df4f895fc3; op2val:0x3ff10d7ac367e0e5;
op3val:0x7fd101b0137d6bc7; valaddr_reg:x3; val_offset:297*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 297*FLEN/8, x4, x1, x2)

inst_100:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x0075a384bac19 and fs2 == 0 and fe2 == 0x3fa and fm2 == 0xf5f5e6496f287 and fs3 == 0 and fe3 == 0x7f8 and fm3 == 0xf6dc904b8153f and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd0075a384bac19; op2val:0x3faf5f5e6496f287;
op3val:0x7f8f6dc904b8153f; valaddr_reg:x3; val_offset:300*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 300*FLEN/8, x4, x1, x2)

inst_101:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x01e0fc1b3c5e3 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x29cfe82489e48 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x2bff73402612d and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd01e0fc1b3c5e3; op2val:0x3ff29cfe82489e48;
op3val:0x7fd2bff73402612d; valaddr_reg:x3; val_offset:303*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 303*FLEN/8, x4, x1, x2)

inst_102:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x024fdb7a4cc69 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x608b0699807b2 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x63ba15cd177bf and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd024fdb7a4cc69; op2val:0x3ff608b0699807b2;
op3val:0x7fd63ba15cd177bf; valaddr_reg:x3; val_offset:306*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 306*FLEN/8, x4, x1, x2)

inst_103:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x05ba66b72282d and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x47030685b1521 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x4e54310e2ec3f and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd05ba66b72282d; op2val:0x3fe47030685b1521;
op3val:0x7fc4e54310e2ec3f; valaddr_reg:x3; val_offset:309*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 309*FLEN/8, x4, x1, x2)

inst_104:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x09650118c95b7 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x56051ce711386 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x62923c66ba98f and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd09650118c95b7; op2val:0x40056051ce711386;
op3val:0x7fe62923c66ba98f; valaddr_reg:x3; val_offset:312*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 312*FLEN/8, x4, x1, x2)

inst_105:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x0996ecc5ad59d and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x9d939ce559199 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xad11a06ac6e6b and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd0996ecc5ad59d; op2val:0x3ff9d939ce559199;
op3val:0x7fdad11a06ac6e6b; valaddr_reg:x3; val_offset:315*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 315*FLEN/8, x4, x1, x2)

inst_106:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x0b61c8425ad3f and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x6784267dd63bc and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x7780267441d0d and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd0b61c8425ad3f; op2val:0x3ff6784267dd63bc;
op3val:0x7fd7780267441d0d; valaddr_reg:x3; val_offset:318*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 318*FLEN/8, x4, x1, x2)

inst_107:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x0d8f972e9c2ef and fs2 == 0 and fe2 == 0x400 and fm2 == 0xd3a95f351ef8f and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xec6f48d50d204 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd0d8f972e9c2ef; op2val:0x400d3a95f351ef8f;
op3val:0x7feec6f48d50d204; valaddr_reg:x3; val_offset:321*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 321*FLEN/8, x4, x1, x2)

inst_108:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x1249d34f93fa7 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xee03537e23353 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x08a7030b0f86f and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd1249d34f93fa7; op2val:0x3fdee03537e23353;
op3val:0x7fc08a7030b0f86f; valaddr_reg:x3; val_offset:324*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 324*FLEN/8, x4, x1, x2)

inst_109:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x14efd260bd491 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xea8a7d6d20de8 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x09546cd1dcec3 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd14efd260bd491; op2val:0x3fdea8a7d6d20de8;
op3val:0x7fc09546cd1dcec3; valaddr_reg:x3; val_offset:327*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 327*FLEN/8, x4, x1, x2)

inst_110:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x15867f72ca04d and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xd55df652a8155 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0xfcd544627292b and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd15867f72ca04d; op2val:0x3fed55df652a8155;
op3val:0x7fcfcd544627292b; valaddr_reg:x3; val_offset:330*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 330*FLEN/8, x4, x1, x2)

inst_111:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x19c24c6d583c7 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x67434a96b4133 and fs3 == 0 and fe3 == 0x7fa and fm3 == 0x8b69891f5f7cf and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd19c24c6d583c7; op2val:0x3fc67434a96b4133;
op3val:0x7fa8b69891f5f7cf; valaddr_reg:x3; val_offset:333*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 333*FLEN/8, x4, x1, x2)

inst_112:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x1d1a695a6b34f and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x7dda5bc613ddb and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xa9437d7e448d9 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd1d1a695a6b34f; op2val:0x3ff7dda5bc613ddb;
op3val:0x7fda9437d7e448d9; valaddr_reg:x3; val_offset:336*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 336*FLEN/8, x4, x1, x2)

inst_113:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x20b31e4ca4c55 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xb7ddd6aeb162b and fs3 == 0 and fe3 == 0x7fc and fm3 == 0xf00d55b153d67 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd20b31e4ca4c55; op2val:0x3feb7ddd6aeb162b;
op3val:0x7fcf00d55b153d67; valaddr_reg:x3; val_offset:339*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 339*FLEN/8, x4, x1, x2)

inst_114:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x247a67d1467bb and fs2 == 0 and fe2 == 0x400 and fm2 == 0xa34727c10e472 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xdf05a34987d02 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd247a67d1467bb; op2val:0x400a34727c10e472;
op3val:0x7fedf05a34987d02; valaddr_reg:x3; val_offset:342*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 342*FLEN/8, x4, x1, x2)

inst_115:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x2513cb3e2752f and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x5e75e11fe8993 and fs3 == 0 and fe3 == 0x7fa and fm3 == 0x913803a5ca7bf and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd2513cb3e2752f; op2val:0x3fc5e75e11fe8993;
op3val:0x7fa913803a5ca7bf; valaddr_reg:x3; val_offset:345*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 345*FLEN/8, x4, x1, x2)

inst_116:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x2c178685ca577 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x915a69047262e and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xd67ad517b99d7 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd2c178685ca577; op2val:0x3ff915a69047262e;
op3val:0x7fdd67ad517b99d7; valaddr_reg:x3; val_offset:348*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 348*FLEN/8, x4, x1, x2)

inst_117:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x30eb1ba0bc2dd and fs2 == 0 and fe2 == 0x400 and fm2 == 0x3dae133efb51d and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x7a6277ef479a3 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd30eb1ba0bc2dd; op2val:0x4003dae133efb51d;
op3val:0x7fe7a6277ef479a3; valaddr_reg:x3; val_offset:351*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 351*FLEN/8, x4, x1, x2)

inst_118:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x378be2d09905b and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x87c8ff0970ad9 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0xdccb4315a0a87 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd378be2d09905b; op2val:0x3fe87c8ff0970ad9;
op3val:0x7fcdccb4315a0a87; valaddr_reg:x3; val_offset:354*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 354*FLEN/8, x4, x1, x2)

inst_119:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x3be2a8c7b6829 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x52a3bf7842274 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xa1db506ba5ee9 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd3be2a8c7b6829; op2val:0x40052a3bf7842274;
op3val:0x7fea1db506ba5ee9; valaddr_reg:x3; val_offset:357*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 357*FLEN/8, x4, x1, x2)

inst_120:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x3cfa211be3073 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x26e63c71e4bb3 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x6d2455976b29f and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd3cfa211be3073; op2val:0x3ff26e63c71e4bb3;
op3val:0x7fd6d2455976b29f; valaddr_reg:x3; val_offset:360*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 360*FLEN/8, x4, x1, x2)

inst_121:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x3f7aefd0784b5 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xf488ab585c398 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x385355c3fa9ed and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd3f7aefd0784b5; op2val:0x3fef488ab585c398;
op3val:0x7fd385355c3fa9ed; valaddr_reg:x3; val_offset:363*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 363*FLEN/8, x4, x1, x2)

inst_122:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x41afcbbb98d77 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xdd2d56b3ae715 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x2bcec3bb19a9d and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd41afcbbb98d77; op2val:0x3ffdd2d56b3ae715;
op3val:0x7fe2bcec3bb19a9d; valaddr_reg:x3; val_offset:366*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 366*FLEN/8, x4, x1, x2)

inst_123:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x43a9f68f79f51 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x544340f745d01 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xae32c315346b0 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd43a9f68f79f51; op2val:0x400544340f745d01;
op3val:0x7feae32c315346b0; valaddr_reg:x3; val_offset:369*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 369*FLEN/8, x4, x1, x2)

inst_124:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x4b9ad0f953a6d and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xdd010c341e476 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x34f069651326f and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd4b9ad0f953a6d; op2val:0x3fddd010c341e476;
op3val:0x7fc34f069651326f; valaddr_reg:x3; val_offset:372*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 372*FLEN/8, x4, x1, x2)

inst_125:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x4dce43d756a23 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x9711b27824018 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x096500a1f76b9 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd4dce43d756a23; op2val:0x3ff9711b27824018;
op3val:0x7fe096500a1f76b9; valaddr_reg:x3; val_offset:375*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 375*FLEN/8, x4, x1, x2)

inst_126:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x5193b35176edb and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x5a6779344470f and fs3 == 0 and fe3 == 0x7fc and fm3 == 0xc8ca129cfc863 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd5193b35176edb; op2val:0x3fe5a6779344470f;
op3val:0x7fcc8ca129cfc863; valaddr_reg:x3; val_offset:378*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 378*FLEN/8, x4, x1, x2)

inst_127:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x547f638b1a9e7 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x344561a7bbaf9 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x9a058bfc8df90 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd547f638b1a9e7; op2val:0x400344561a7bbaf9;
op3val:0x7fe9a058bfc8df90; valaddr_reg:x3; val_offset:381*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 381*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_2)

inst_128:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x5c37064ce4a17 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x3ca406e5d0503 and fs3 == 0 and fe3 == 0x7fa and fm3 == 0xaeb30868d631f and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd5c37064ce4a17; op2val:0x3fc3ca406e5d0503;
op3val:0x7faaeb30868d631f; valaddr_reg:x3; val_offset:384*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 384*FLEN/8, x4, x1, x2)

inst_129:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x5e29834726e1b and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x10c937f937819 and fs3 == 0 and fe3 == 0x7fb and fm3 == 0x751f56a379ae7 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd5e29834726e1b; op2val:0x3fd10c937f937819;
op3val:0x7fb751f56a379ae7; valaddr_reg:x3; val_offset:387*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 387*FLEN/8, x4, x1, x2)

inst_130:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x5edbeddec3d41 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x8ba02b0bd188e and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x0f1c6e3d437bb and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd5edbeddec3d41; op2val:0x3fe8ba02b0bd188e;
op3val:0x7fd0f1c6e3d437bb; valaddr_reg:x3; val_offset:390*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 390*FLEN/8, x4, x1, x2)

inst_131:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x5eedf6196c86d and fs2 == 0 and fe2 == 0x400 and fm2 == 0x36dbccb9a7fa5 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xaa21763871829 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd5eedf6196c86d; op2val:0x40036dbccb9a7fa5;
op3val:0x7feaa21763871829; valaddr_reg:x3; val_offset:393*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 393*FLEN/8, x4, x1, x2)

inst_132:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x63543c66def39 and fs2 == 0 and fe2 == 0x3fa and fm2 == 0xaccb6ce241fe2 and fs3 == 0 and fe3 == 0x7f9 and fm3 == 0x299597f4bbe1f and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd63543c66def39; op2val:0x3faaccb6ce241fe2;
op3val:0x7f9299597f4bbe1f; valaddr_reg:x3; val_offset:396*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 396*FLEN/8, x4, x1, x2)

inst_133:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x66d13a13f4f01 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x90d6c3ef0fe00 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x18e9f823171c4 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd66d13a13f4f01; op2val:0x3ff90d6c3ef0fe00;
op3val:0x7fe18e9f823171c4; valaddr_reg:x3; val_offset:399*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 399*FLEN/8, x4, x1, x2)

inst_134:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x6a465bf2e7f6d and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x4b8718f931656 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xd5282754cbf99 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd6a465bf2e7f6d; op2val:0x3ff4b8718f931656;
op3val:0x7fdd5282754cbf99; valaddr_reg:x3; val_offset:402*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 402*FLEN/8, x4, x1, x2)

inst_135:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x6c18965d9189d and fs2 == 0 and fe2 == 0x3fb and fm2 == 0x4dd84333cff51 and fs3 == 0 and fe3 == 0x7f9 and fm3 == 0xdacf8feab547f and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd6c18965d9189d; op2val:0x3fb4dd84333cff51;
op3val:0x7f9dacf8feab547f; valaddr_reg:x3; val_offset:405*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 405*FLEN/8, x4, x1, x2)

inst_136:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x6f61b5576377f and fs2 == 0 and fe2 == 0x400 and fm2 == 0x3b74da956e014 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xc4b4ec1859266 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd6f61b5576377f; op2val:0x4003b74da956e014;
op3val:0x7fec4b4ec1859266; valaddr_reg:x3; val_offset:408*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 408*FLEN/8, x4, x1, x2)

inst_137:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x715dc8f67403b and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x2fcb638fbe403 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xb65375e0b9593 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd715dc8f67403b; op2val:0x3ff2fcb638fbe403;
op3val:0x7fdb65375e0b9593; valaddr_reg:x3; val_offset:411*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 411*FLEN/8, x4, x1, x2)

inst_138:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x74e742bcb0feb and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x596c4cb3d62af and fs3 == 0 and fe3 == 0x7fb and fm3 == 0xf7296a3b0f9d7 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd74e742bcb0feb; op2val:0x3fd596c4cb3d62af;
op3val:0x7fbf7296a3b0f9d7; valaddr_reg:x3; val_offset:414*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 414*FLEN/8, x4, x1, x2)

inst_139:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x7a1d9bce0e555 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x88a395719f5a5 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x21f77a1464222 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd7a1d9bce0e555; op2val:0x3ff88a395719f5a5;
op3val:0x7fe21f77a1464222; valaddr_reg:x3; val_offset:417*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 417*FLEN/8, x4, x1, x2)

inst_140:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x7d27c388512d7 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x0e389aa8e6cdc and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x92543731f0cc1 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd7d27c388512d7; op2val:0x3ff0e389aa8e6cdc;
op3val:0x7fd92543731f0cc1; valaddr_reg:x3; val_offset:420*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 420*FLEN/8, x4, x1, x2)

inst_141:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x7e4f46647f8df and fs2 == 0 and fe2 == 0x400 and fm2 == 0x47d067cf860fe and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xe98e7e5b60378 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd7e4f46647f8df; op2val:0x40047d067cf860fe;
op3val:0x7fee98e7e5b60378; valaddr_reg:x3; val_offset:423*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 423*FLEN/8, x4, x1, x2)

inst_142:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x81e91ca297381 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xcb794e6dc29f6 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x5a51e9e0452c5 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd81e91ca297381; op2val:0x3fecb794e6dc29f6;
op3val:0x7fd5a51e9e0452c5; valaddr_reg:x3; val_offset:426*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 426*FLEN/8, x4, x1, x2)

inst_143:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x8b0ce9718a893 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xbbb2d2c120e46 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x5659a61635557 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd8b0ce9718a893; op2val:0x3ffbbb2d2c120e46;
op3val:0x7fe5659a61635557; valaddr_reg:x3; val_offset:429*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 429*FLEN/8, x4, x1, x2)

inst_144:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x8edd67e1d4f43 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xacb0198fb28cb and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x4df644dc3f26f and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd8edd67e1d4f43; op2val:0x3feacb0198fb28cb;
op3val:0x7fd4df644dc3f26f; valaddr_reg:x3; val_offset:432*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 432*FLEN/8, x4, x1, x2)

inst_145:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x90551e755a3bd and fs2 == 0 and fe2 == 0x400 and fm2 == 0x1d4f75c9f66a4 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xbe2b055fc6c3f and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd90551e755a3bd; op2val:0x4001d4f75c9f66a4;
op3val:0x7febe2b055fc6c3f; valaddr_reg:x3; val_offset:435*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 435*FLEN/8, x4, x1, x2)

inst_146:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x90eae7f7120e1 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x2f01f600da378 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xda891abb66fc1 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd90eae7f7120e1; op2val:0x4002f01f600da378;
op3val:0x7feda891abb66fc1; valaddr_reg:x3; val_offset:438*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 438*FLEN/8, x4, x1, x2)

inst_147:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x91cbc6b2f3f1f and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x044e559238bd2 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x988de83272863 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd91cbc6b2f3f1f; op2val:0x3ff044e559238bd2;
op3val:0x7fd988de83272863; valaddr_reg:x3; val_offset:441*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 441*FLEN/8, x4, x1, x2)

inst_148:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x928527fc33323 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x49fb921840ebb and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x036c5753b2b79 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd928527fc33323; op2val:0x3ff49fb921840ebb;
op3val:0x7fe036c5753b2b79; valaddr_reg:x3; val_offset:444*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 444*FLEN/8, x4, x1, x2)

inst_149:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x97d0a671457af and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x3936397ae5d5c and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xf2f47d14d678b and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd97d0a671457af; op2val:0x3ff3936397ae5d5c;
op3val:0x7fdf2f47d14d678b; valaddr_reg:x3; val_offset:447*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 447*FLEN/8, x4, x1, x2)

inst_150:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x9959ef52a94d7 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x1d85d189e3f0d and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xc88f1a37466c9 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd9959ef52a94d7; op2val:0x3ff1d85d189e3f0d;
op3val:0x7fdc88f1a37466c9; valaddr_reg:x3; val_offset:450*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 450*FLEN/8, x4, x1, x2)

inst_151:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x9b05255f262e5 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x2deda15b6308d and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xe4c293c56f511 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd9b05255f262e5; op2val:0x4002deda15b6308d;
op3val:0x7fee4c293c56f511; valaddr_reg:x3; val_offset:453*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 453*FLEN/8, x4, x1, x2)

inst_152:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x9e69137ea5e7f and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xb7b3eacaee577 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x63e4b7fdae4e9 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fd9e69137ea5e7f; op2val:0x3feb7b3eacaee577;
op3val:0x7fd63e4b7fdae4e9; valaddr_reg:x3; val_offset:456*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 456*FLEN/8, x4, x1, x2)

inst_153:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xa7d1185f77b3d and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x4436e7bd34d14 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x0c5fc44d70b87 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fda7d1185f77b3d; op2val:0x3ff4436e7bd34d14;
op3val:0x7fe0c5fc44d70b87; valaddr_reg:x3; val_offset:459*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 459*FLEN/8, x4, x1, x2)

inst_154:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xac2863951d7a5 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xcf913c3426f6d and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x83a7f9d5e43df and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fdac2863951d7a5; op2val:0x3ffcf913c3426f6d;
op3val:0x7fe83a7f9d5e43df; valaddr_reg:x3; val_offset:462*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 462*FLEN/8, x4, x1, x2)

inst_155:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xaeb92d69dfb67 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x1744c7b952882 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xd5df89b833eac and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fdaeb92d69dfb67; op2val:0x4001744c7b952882;
op3val:0x7fed5df89b833eac; valaddr_reg:x3; val_offset:465*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 465*FLEN/8, x4, x1, x2)

inst_156:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xb063666cbf4b1 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x1448089b2ebd6 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xd2a4d4eb4326d and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fdb063666cbf4b1; op2val:0x4001448089b2ebd6;
op3val:0x7fed2a4d4eb4326d; valaddr_reg:x3; val_offset:468*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 468*FLEN/8, x4, x1, x2)

inst_157:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xb2b5288790eeb and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xf29ef3e1f4174 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xa75929643064a and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fdb2b5288790eeb; op2val:0x3fff29ef3e1f4174;
op3val:0x7fea75929643064a; valaddr_reg:x3; val_offset:471*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 471*FLEN/8, x4, x1, x2)

inst_158:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xbc388a7e47403 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x0137832c6112c and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xbe5516cc77b12 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fdbc388a7e47403; op2val:0x4000137832c6112c;
op3val:0x7febe5516cc77b12; valaddr_reg:x3; val_offset:474*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 474*FLEN/8, x4, x1, x2)

inst_159:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xc2b01ae3648db and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xaa05636c3d5a4 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x7701449bca3c7 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fdc2b01ae3648db; op2val:0x3fdaa05636c3d5a4;
op3val:0x7fc7701449bca3c7; valaddr_reg:x3; val_offset:477*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 477*FLEN/8, x4, x1, x2)

inst_160:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xcc3cdfff3a4f1 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x320baeabd9ff9 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x131ae231843f1 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fdcc3cdfff3a4f1; op2val:0x3fe320baeabd9ff9;
op3val:0x7fd131ae231843f1; valaddr_reg:x3; val_offset:480*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 480*FLEN/8, x4, x1, x2)

inst_161:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xccc26e36b5cc1 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x3dafc013c1302 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x1de48a8c3ba83 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fdccc26e36b5cc1; op2val:0x3fd3dafc013c1302;
op3val:0x7fc1de48a8c3ba83; valaddr_reg:x3; val_offset:483*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 483*FLEN/8, x4, x1, x2)

inst_162:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xcd941bb3e4c7b and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x56f945237a31e and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x3532a75d14531 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fdcd941bb3e4c7b; op2val:0x3fe56f945237a31e;
op3val:0x7fd3532a75d14531; valaddr_reg:x3; val_offset:486*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 486*FLEN/8, x4, x1, x2)

inst_163:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xcf33bc410b42b and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x2dce8fa7b9c8d and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x110ac9f3abd23 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fdcf33bc410b42b; op2val:0x3ff2dce8fa7b9c8d;
op3val:0x7fe110ac9f3abd23; valaddr_reg:x3; val_offset:489*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 489*FLEN/8, x4, x1, x2)

inst_164:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xd00f90ae48549 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x52abf187430ec and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x32f61e9fcc711 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fdd00f90ae48549; op2val:0x3fe52abf187430ec;
op3val:0x7fd32f61e9fcc711; valaddr_reg:x3; val_offset:492*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 492*FLEN/8, x4, x1, x2)

inst_165:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xd0aa01817a599 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x7eaba18734fc7 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x5b4a9a7f456a3 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fdd0aa01817a599; op2val:0x3fe7eaba18734fc7;
op3val:0x7fd5b4a9a7f456a3; valaddr_reg:x3; val_offset:495*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 495*FLEN/8, x4, x1, x2)

inst_166:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xd44d040ae163f and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x34b7acba40d23 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x1a5e53f1b819b and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fdd44d040ae163f; op2val:0x3ff34b7acba40d23;
op3val:0x7fe1a5e53f1b819b; valaddr_reg:x3; val_offset:498*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 498*FLEN/8, x4, x1, x2)

inst_167:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xdd2c573d7d961 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x09cdb83340ea0 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xef725a27eac6b and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fddd2c573d7d961; op2val:0x3ff09cdb83340ea0;
op3val:0x7fdef725a27eac6b; valaddr_reg:x3; val_offset:501*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 501*FLEN/8, x4, x1, x2)

inst_168:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xdd8802e2329e5 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x043635ce6ecfb and fs3 == 0 and fe3 == 0x7fb and fm3 == 0xe56341fc91de7 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fddd8802e2329e5; op2val:0x3fd043635ce6ecfb;
op3val:0x7fbe56341fc91de7; valaddr_reg:x3; val_offset:504*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 504*FLEN/8, x4, x1, x2)

inst_169:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xe38439b51a599 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x74a43880b19cb and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x5fe927a41040f and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fde38439b51a599; op2val:0x3fe74a43880b19cb;
op3val:0x7fd5fe927a41040f; valaddr_reg:x3; val_offset:507*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 507*FLEN/8, x4, x1, x2)

inst_170:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xe57a08d938ac9 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x669fb3be375cc and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x540bc20428f59 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fde57a08d938ac9; op2val:0x3ff669fb3be375cc;
op3val:0x7fe540bc20428f59; valaddr_reg:x3; val_offset:510*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 510*FLEN/8, x4, x1, x2)

inst_171:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xe608faa3b3f0d and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x0f2ab24ea4e21 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x016a48a9fc325 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fde608faa3b3f0d; op2val:0x3ff0f2ab24ea4e21;
op3val:0x7fe016a48a9fc325; valaddr_reg:x3; val_offset:513*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 513*FLEN/8, x4, x1, x2)

inst_172:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xe9825a40fe033 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xf83254b5a727e and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xe20c6f8fd997a and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fde9825a40fe033; op2val:0x3fff83254b5a727e;
op3val:0x7fee20c6f8fd997a; valaddr_reg:x3; val_offset:516*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 516*FLEN/8, x4, x1, x2)

inst_173:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xea81a3f48a2bd and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x6d6443f906711 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x5e0d79d2636fd and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fdea81a3f48a2bd; op2val:0x3ff6d6443f906711;
op3val:0x7fe5e0d79d2636fd; valaddr_reg:x3; val_offset:519*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 519*FLEN/8, x4, x1, x2)

inst_174:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xf1cedb32713af and fs2 == 0 and fe2 == 0x3fa and fm2 == 0xa27c9c8f72760 and fs3 == 0 and fe3 == 0x7f9 and fm3 == 0x96e30945c401f and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fdf1cedb32713af; op2val:0x3faa27c9c8f72760;
op3val:0x7f996e30945c401f; valaddr_reg:x3; val_offset:522*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 522*FLEN/8, x4, x1, x2)

inst_175:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xf50991a1c3f71 and fs2 == 0 and fe2 == 0x3f7 and fm2 == 0xbbeba14cf9d4a and fs3 == 0 and fe3 == 0x7f6 and fm3 == 0xb26a5d3ea4fff and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fdf50991a1c3f71; op2val:0x3f7bbeba14cf9d4a;
op3val:0x7f6b26a5d3ea4fff; valaddr_reg:x3; val_offset:525*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 525*FLEN/8, x4, x1, x2)

inst_176:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xf9cdb56c3a5e1 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x8c8a81d881e03 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x87bdef09d29c9 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fdf9cdb56c3a5e1; op2val:0x3fe8c8a81d881e03;
op3val:0x7fd87bdef09d29c9; valaddr_reg:x3; val_offset:528*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 528*FLEN/8, x4, x1, x2)

inst_177:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xfae1b145e0417 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xafa3294e54a15 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xab528478e0e2d and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fdfae1b145e0417; op2val:0x3ffafa3294e54a15;
op3val:0x7feab528478e0e2d; valaddr_reg:x3; val_offset:531*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 531*FLEN/8, x4, x1, x2)

inst_178:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xfd016f467310d and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xc5433925a1d2e and fs3 == 0 and fe3 == 0x7fc and fm3 == 0xc29c9973f6e4f and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fdfd016f467310d; op2val:0x3fdc5433925a1d2e;
op3val:0x7fcc29c9973f6e4f; valaddr_reg:x3; val_offset:534*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 534*FLEN/8, x4, x1, x2)

inst_179:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x000b9ceb049f9 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x6c463ff747485 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x6c56c64540f3f and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe000b9ceb049f9; op2val:0x3fd6c463ff747485;
op3val:0x7fc6c56c64540f3f; valaddr_reg:x3; val_offset:537*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 537*FLEN/8, x4, x1, x2)

inst_180:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x00d821485e6cc and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x0f663aff0a092 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x104b5c89b7afe and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe00d821485e6cc; op2val:0x3ff0f663aff0a092;
op3val:0x7fe104b5c89b7afe; valaddr_reg:x3; val_offset:540*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 540*FLEN/8, x4, x1, x2)

inst_181:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x01856bf9767f9 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x106755dbc7ecc and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x1205b5c5e2605 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe01856bf9767f9; op2val:0x3ff106755dbc7ecc;
op3val:0x7fe1205b5c5e2605; valaddr_reg:x3; val_offset:543*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 543*FLEN/8, x4, x1, x2)

inst_182:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x01bd1661ded56 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x4031c2b470846 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x425e753294784 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe01bd1661ded56; op2val:0x3ff4031c2b470846;
op3val:0x7fe425e753294784; valaddr_reg:x3; val_offset:546*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 546*FLEN/8, x4, x1, x2)

inst_183:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x023cec2461f7c and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xa7c885c017c23 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xab7cf0b406a44 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe023cec2461f7c; op2val:0x3ffa7c885c017c23;
op3val:0x7feab7cf0b406a44; valaddr_reg:x3; val_offset:549*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 549*FLEN/8, x4, x1, x2)

inst_184:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x059cf0d432d00 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x7c77fccc0aee3 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x84cf93c5ef5cb and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe059cf0d432d00; op2val:0x3fd7c77fccc0aee3;
op3val:0x7fc84cf93c5ef5cb; valaddr_reg:x3; val_offset:552*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 552*FLEN/8, x4, x1, x2)

inst_185:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x063a074cc3059 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x5a419ce7278f9 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x62ada351bd685 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe063a074cc3059; op2val:0x3ff5a419ce7278f9;
op3val:0x7fe62ada351bd685; valaddr_reg:x3; val_offset:555*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 555*FLEN/8, x4, x1, x2)

inst_186:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x07ee7e3cd0780 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x32b473be6de7a and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x3c351de9eaf86 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe07ee7e3cd0780; op2val:0x3ff32b473be6de7a;
op3val:0x7fe3c351de9eaf86; valaddr_reg:x3; val_offset:558*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 558*FLEN/8, x4, x1, x2)

inst_187:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x07fd62d9d804c and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x50bebd7e9d921 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x5b414335ec631 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe07fd62d9d804c; op2val:0x3fe50bebd7e9d921;
op3val:0x7fd5b414335ec631; valaddr_reg:x3; val_offset:561*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 561*FLEN/8, x4, x1, x2)

inst_188:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x08775dd246585 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xcc9528d2934bd and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xdbd0943ba2885 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe08775dd246585; op2val:0x3fecc9528d2934bd;
op3val:0x7fddbd0943ba2885; valaddr_reg:x3; val_offset:564*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 564*FLEN/8, x4, x1, x2)

inst_189:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x0b73813e3367a and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x4e4526c9cf173 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x5d38f146f80f6 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe0b73813e3367a; op2val:0x3ff4e4526c9cf173;
op3val:0x7fe5d38f146f80f6; valaddr_reg:x3; val_offset:567*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 567*FLEN/8, x4, x1, x2)

inst_190:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x0c090e20accd5 and fs2 == 0 and fe2 == 0x3fa and fm2 == 0x24b326b764444 and fs3 == 0 and fe3 == 0x7f9 and fm3 == 0x3275e6fb817ff and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe0c090e20accd5; op2val:0x3fa24b326b764444;
op3val:0x7f93275e6fb817ff; valaddr_reg:x3; val_offset:570*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 570*FLEN/8, x4, x1, x2)

inst_191:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x0ce68e5faffc7 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xaa92f4d6f9193 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xc0120595fb816 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe0ce68e5faffc7; op2val:0x3ffaa92f4d6f9193;
op3val:0x7fec0120595fb816; valaddr_reg:x3; val_offset:573*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 573*FLEN/8, x4, x1, x2)

inst_192:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x0d9c07eff7bef and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xc5e2e7ea09ee5 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xde041208e97bd and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe0d9c07eff7bef; op2val:0x3ffc5e2e7ea09ee5;
op3val:0x7fede041208e97bd; valaddr_reg:x3; val_offset:576*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 576*FLEN/8, x4, x1, x2)

inst_193:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x0dc7ce6d690ca and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xcf5fb3c558905 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0xe85138f02904f and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe0dc7ce6d690ca; op2val:0x3fdcf5fb3c558905;
op3val:0x7fce85138f02904f; valaddr_reg:x3; val_offset:579*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 579*FLEN/8, x4, x1, x2)

inst_194:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x0e645c5313e6b and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xda53976a38938 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xf4fe1d69258d9 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe0e645c5313e6b; op2val:0x3ffda53976a38938;
op3val:0x7fef4fe1d69258d9; valaddr_reg:x3; val_offset:582*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 582*FLEN/8, x4, x1, x2)

inst_195:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x0e77c0d726f3b and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x1c2e7961399e0 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x2c3df3b0a844b and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe0e77c0d726f3b; op2val:0x3fd1c2e7961399e0;
op3val:0x7fc2c3df3b0a844b; valaddr_reg:x3; val_offset:585*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 585*FLEN/8, x4, x1, x2)

inst_196:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x10aff362a9091 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x7677719c0fb36 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x8ee048602c301 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe10aff362a9091; op2val:0x3ff7677719c0fb36;
op3val:0x7fe8ee048602c301; valaddr_reg:x3; val_offset:588*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 588*FLEN/8, x4, x1, x2)

inst_197:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x125f20460639f and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x5d6446920937c and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x767727ca98cc1 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe125f20460639f; op2val:0x3fe5d6446920937c;
op3val:0x7fd767727ca98cc1; valaddr_reg:x3; val_offset:591*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 591*FLEN/8, x4, x1, x2)

inst_198:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x161ab23a815d4 and fs2 == 0 and fe2 == 0x3fa and fm2 == 0x97d93afcb77c8 and fs3 == 0 and fe3 == 0x7f9 and fm3 == 0xbb106e10ad3ff and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe161ab23a815d4; op2val:0x3fa97d93afcb77c8;
op3val:0x7f9bb106e10ad3ff; valaddr_reg:x3; val_offset:594*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 594*FLEN/8, x4, x1, x2)

inst_199:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x1871f66d9338f and fs2 == 0 and fe2 == 0x3fb and fm2 == 0xd5883b90379fc and fs3 == 0 and fe3 == 0x7fb and fm3 == 0x012f0320f4e17 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe1871f66d9338f; op2val:0x3fbd5883b90379fc;
op3val:0x7fb012f0320f4e17; valaddr_reg:x3; val_offset:597*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 597*FLEN/8, x4, x1, x2)

inst_200:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x19503011c81db and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x9b981b1265c97 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xc44ae288c365c and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe19503011c81db; op2val:0x3ff9b981b1265c97;
op3val:0x7fec44ae288c365c; valaddr_reg:x3; val_offset:600*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 600*FLEN/8, x4, x1, x2)

inst_201:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x1b2b385abc95c and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xaceecb7c0e89e and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xda74657a9659d and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe1b2b385abc95c; op2val:0x3ffaceecb7c0e89e;
op3val:0x7feda74657a9659d; valaddr_reg:x3; val_offset:603*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 603*FLEN/8, x4, x1, x2)

inst_202:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x1bac795d5adc9 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x97077011e014f and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xc30772da00dd3 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe1bac795d5adc9; op2val:0x3fe97077011e014f;
op3val:0x7fdc30772da00dd3; valaddr_reg:x3; val_offset:606*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 606*FLEN/8, x4, x1, x2)

inst_203:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x1c62e09ee1112 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x69777b155c7d7 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x918c2971b2037 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe1c62e09ee1112; op2val:0x3ff69777b155c7d7;
op3val:0x7fe918c2971b2037; valaddr_reg:x3; val_offset:609*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 609*FLEN/8, x4, x1, x2)

inst_204:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x1d59452acedd2 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x6a4c2dfad0480 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x93d5258f53b8f and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe1d59452acedd2; op2val:0x3fe6a4c2dfad0480;
op3val:0x7fd93d5258f53b8f; valaddr_reg:x3; val_offset:612*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 612*FLEN/8, x4, x1, x2)

inst_205:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x1df748833ffc0 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x1fbc689ddf505 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x416ab0c134af7 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe1df748833ffc0; op2val:0x3ff1fbc689ddf505;
op3val:0x7fe416ab0c134af7; valaddr_reg:x3; val_offset:615*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 615*FLEN/8, x4, x1, x2)

inst_206:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x1e7897f922e58 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xaf951defdb85e and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xe2f3e58cf735c and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe1e7897f922e58; op2val:0x3ffaf951defdb85e;
op3val:0x7fee2f3e58cf735c; valaddr_reg:x3; val_offset:618*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 618*FLEN/8, x4, x1, x2)

inst_207:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x1f9afe81c88d6 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x5a5b1745cb880 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x851dd239377e5 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe1f9afe81c88d6; op2val:0x3ff5a5b1745cb880;
op3val:0x7fe851dd239377e5; valaddr_reg:x3; val_offset:621*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 621*FLEN/8, x4, x1, x2)

inst_208:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x22b1a9488a4c1 and fs2 == 0 and fe2 == 0x3f9 and fm2 == 0x67d388683bd28 and fs3 == 0 and fe3 == 0x7f8 and fm3 == 0x989757b7fec3f and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe22b1a9488a4c1; op2val:0x3f967d388683bd28;
op3val:0x7f8989757b7fec3f; valaddr_reg:x3; val_offset:624*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 624*FLEN/8, x4, x1, x2)

inst_209:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x23a4efccefe44 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x8ec0956e7209d and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xc645d2c14904c and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe23a4efccefe44; op2val:0x3ff8ec0956e7209d;
op3val:0x7fec645d2c14904c; valaddr_reg:x3; val_offset:627*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 627*FLEN/8, x4, x1, x2)

inst_210:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x2425049fa7b93 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x3a3ed6a3e60e5 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x669d1d94ee5cc and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe2425049fa7b93; op2val:0x3ff3a3ed6a3e60e5;
op3val:0x7fe669d1d94ee5cc; valaddr_reg:x3; val_offset:630*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 630*FLEN/8, x4, x1, x2)

inst_211:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x277a09a57982a and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x5fee54562abf2 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x9633680658f13 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe277a09a57982a; op2val:0x3fe5fee54562abf2;
op3val:0x7fd9633680658f13; valaddr_reg:x3; val_offset:633*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 633*FLEN/8, x4, x1, x2)

inst_212:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x28e8063300472 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x92cabe4efe922 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xd3277d88cd395 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe28e8063300472; op2val:0x3fe92cabe4efe922;
op3val:0x7fdd3277d88cd395; valaddr_reg:x3; val_offset:636*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 636*FLEN/8, x4, x1, x2)

inst_213:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x2aacb0b429baf and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x8cd8ba7eb2d96 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xcefffca1129bf and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe2aacb0b429baf; op2val:0x3ff8cd8ba7eb2d96;
op3val:0x7fecefffca1129bf; valaddr_reg:x3; val_offset:639*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 639*FLEN/8, x4, x1, x2)

inst_214:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x2b0a1c7311e4e and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x875610f99c362 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xc920faad8412d and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe2b0a1c7311e4e; op2val:0x3ff875610f99c362;
op3val:0x7fec920faad8412d; valaddr_reg:x3; val_offset:642*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 642*FLEN/8, x4, x1, x2)

inst_215:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x2bd1927d49ed6 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xceb14dd622f0f and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x0ef1eeb69b9b5 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe2bd1927d49ed6; op2val:0x3feceb14dd622f0f;
op3val:0x7fe0ef1eeb69b9b5; valaddr_reg:x3; val_offset:645*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 645*FLEN/8, x4, x1, x2)

inst_216:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x2ca2659f59483 and fs2 == 0 and fe2 == 0x3f3 and fm2 == 0x3f197caabd246 and fs3 == 0 and fe3 == 0x7f2 and fm3 == 0x76bc4ae4a7fff and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe2ca2659f59483; op2val:0x3f33f197caabd246;
op3val:0x7f276bc4ae4a7fff; valaddr_reg:x3; val_offset:648*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 648*FLEN/8, x4, x1, x2)

inst_217:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x2da1988bab816 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xc8b320bc03279 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x0d0d7324164e3 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe2da1988bab816; op2val:0x3fdc8b320bc03279;
op3val:0x7fd0d0d7324164e3; valaddr_reg:x3; val_offset:651*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 651*FLEN/8, x4, x1, x2)

inst_218:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x399d413e4b88b and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xa694f80594a8c and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x02d7dc26caf5a and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe399d413e4b88b; op2val:0x3fea694f80594a8c;
op3val:0x7fe02d7dc26caf5a; valaddr_reg:x3; val_offset:654*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 654*FLEN/8, x4, x1, x2)

inst_219:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x3a67401814244 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0xef6f697feeed4 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x303b3ca268aa7 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe3a67401814244; op2val:0x3fcef6f697feeed4;
op3val:0x7fc303b3ca268aa7; valaddr_reg:x3; val_offset:657*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 657*FLEN/8, x4, x1, x2)

inst_220:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x3f735e92e8b84 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xa45ded224b04e and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x06473dfd7d552 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe3f735e92e8b84; op2val:0x3fea45ded224b04e;
op3val:0x7fe06473dfd7d552; valaddr_reg:x3; val_offset:660*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 660*FLEN/8, x4, x1, x2)

inst_221:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x3f85a17f0e51b and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x7151666c9f6a7 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xccf536e70e88e and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe3f85a17f0e51b; op2val:0x3ff7151666c9f6a7;
op3val:0x7feccf536e70e88e; valaddr_reg:x3; val_offset:663*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 663*FLEN/8, x4, x1, x2)

inst_222:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x40a0c122032cf and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x16410765a08c0 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x5c8003cfa6dd9 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe40a0c122032cf; op2val:0x3ff16410765a08c0;
op3val:0x7fe5c8003cfa6dd9; valaddr_reg:x3; val_offset:666*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 666*FLEN/8, x4, x1, x2)

inst_223:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x413eed654fd22 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x82ad1aedc7830 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xe53a1b43f58c2 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe413eed654fd22; op2val:0x3ff82ad1aedc7830;
op3val:0x7fee53a1b43f58c2; valaddr_reg:x3; val_offset:669*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 669*FLEN/8, x4, x1, x2)

inst_224:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x4304c6599a484 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x72a45d80f9b30 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xd3ac4bb80be68 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe4304c6599a484; op2val:0x3ff72a45d80f9b30;
op3val:0x7fed3ac4bb80be68; valaddr_reg:x3; val_offset:672*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 672*FLEN/8, x4, x1, x2)

inst_225:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x44d54145ab105 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x437635ea7ce87 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x9a6f1010ace1c and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe44d54145ab105; op2val:0x3ff437635ea7ce87;
op3val:0x7fe9a6f1010ace1c; valaddr_reg:x3; val_offset:675*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 675*FLEN/8, x4, x1, x2)

inst_226:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x45c7f25bfedc8 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x190fc2a460989 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x65ac8770e2d21 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe45c7f25bfedc8; op2val:0x3ff190fc2a460989;
op3val:0x7fe65ac8770e2d21; valaddr_reg:x3; val_offset:678*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 678*FLEN/8, x4, x1, x2)

inst_227:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x471faa8c06142 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x2a6cb740159e7 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x7d55c80c789ad and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe471faa8c06142; op2val:0x3fe2a6cb740159e7;
op3val:0x7fd7d55c80c789ad; valaddr_reg:x3; val_offset:681*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 681*FLEN/8, x4, x1, x2)

inst_228:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x49183a8cb0c90 and fs2 == 0 and fe2 == 0x3fb and fm2 == 0xedb035aa45d10 and fs3 == 0 and fe3 == 0x7fb and fm3 == 0x3d5317330c917 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe49183a8cb0c90; op2val:0x3fbedb035aa45d10;
op3val:0x7fb3d5317330c917; valaddr_reg:x3; val_offset:684*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 684*FLEN/8, x4, x1, x2)

inst_229:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x4a7fbbadc2ea0 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xe1e7e86e9b07a and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x3712b27b3110f and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe4a7fbbadc2ea0; op2val:0x3fde1e7e86e9b07a;
op3val:0x7fd3712b27b3110f; valaddr_reg:x3; val_offset:687*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 687*FLEN/8, x4, x1, x2)

inst_230:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x4b547924fd121 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x88dcc2c35a5a1 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xfc77122b9963b and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe4b547924fd121; op2val:0x3ff88dcc2c35a5a1;
op3val:0x7fefc77122b9963b; valaddr_reg:x3; val_offset:690*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 690*FLEN/8, x4, x1, x2)

inst_231:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x4b7136762d31f and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x2e729b7d2c834 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x8793eff945d39 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe4b7136762d31f; op2val:0x3ff2e729b7d2c834;
op3val:0x7fe8793eff945d39; valaddr_reg:x3; val_offset:693*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 693*FLEN/8, x4, x1, x2)

inst_232:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x4d474883171fe and fs2 == 0 and fe2 == 0x3fb and fm2 == 0xc7ce04a4c90c6 and fs3 == 0 and fe3 == 0x7fb and fm3 == 0x28b2f3a47e0ff and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe4d474883171fe; op2val:0x3fbc7ce04a4c90c6;
op3val:0x7fb28b2f3a47e0ff; valaddr_reg:x3; val_offset:696*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 696*FLEN/8, x4, x1, x2)

inst_233:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x4e53235604357 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x3980124aa4300 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x996ae7a92917a and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe4e53235604357; op2val:0x3ff3980124aa4300;
op3val:0x7fe996ae7a92917a; valaddr_reg:x3; val_offset:699*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 699*FLEN/8, x4, x1, x2)

inst_234:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x4fde9e8f46499 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xd599f93300a4c and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x340e6dbdd8e87 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe4fde9e8f46499; op2val:0x3fdd599f93300a4c;
op3val:0x7fd340e6dbdd8e87; valaddr_reg:x3; val_offset:702*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 702*FLEN/8, x4, x1, x2)

inst_235:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x518fb3e1a9d28 and fs2 == 0 and fe2 == 0x3fb and fm2 == 0x9a5919bbce5f4 and fs3 == 0 and fe3 == 0x7fb and fm3 == 0x0e8ad17dd00bf and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe518fb3e1a9d28; op2val:0x3fb9a5919bbce5f4;
op3val:0x7fb0e8ad17dd00bf; valaddr_reg:x3; val_offset:705*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 705*FLEN/8, x4, x1, x2)

inst_236:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x520d24576f8bf and fs2 == 0 and fe2 == 0x3fc and fm2 == 0xbb7eec62a971b and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x24d22c40cbacb and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe520d24576f8bf; op2val:0x3fcbb7eec62a971b;
op3val:0x7fc24d22c40cbacb; valaddr_reg:x3; val_offset:708*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 708*FLEN/8, x4, x1, x2)

inst_237:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x581097465e852 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x07b060581b5cb and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x6266184deeb07 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe581097465e852; op2val:0x3ff07b060581b5cb;
op3val:0x7fe6266184deeb07; valaddr_reg:x3; val_offset:711*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 711*FLEN/8, x4, x1, x2)

inst_238:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x59f65a9f55d73 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xb8c7278d10c73 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x29d647dabc483 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe59f65a9f55d73; op2val:0x3fdb8c7278d10c73;
op3val:0x7fd29d647dabc483; valaddr_reg:x3; val_offset:714*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 714*FLEN/8, x4, x1, x2)

inst_239:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x5a36e5af58a21 and fs2 == 0 and fe2 == 0x3fb and fm2 == 0x470e2ee853fca and fs3 == 0 and fe3 == 0x7fa and fm3 == 0xba4f4dd39a68f and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe5a36e5af58a21; op2val:0x3fb470e2ee853fca;
op3val:0x7faba4f4dd39a68f; valaddr_reg:x3; val_offset:717*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 717*FLEN/8, x4, x1, x2)

inst_240:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x5c5d62a207b44 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x41c339608df40 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xb5dac1e37c3b7 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe5c5d62a207b44; op2val:0x3fe41c339608df40;
op3val:0x7fdb5dac1e37c3b7; valaddr_reg:x3; val_offset:720*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 720*FLEN/8, x4, x1, x2)

inst_241:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x5da4763d30607 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x03e904a63e388 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x62fba4a9251b3 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe5da4763d30607; op2val:0x3ff03e904a63e388;
op3val:0x7fe62fba4a9251b3; valaddr_reg:x3; val_offset:723*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 723*FLEN/8, x4, x1, x2)

inst_242:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x601faf4dc586f and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x6db250f0a73a8 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xf702724eb1369 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe601faf4dc586f; op2val:0x3ff6db250f0a73a8;
op3val:0x7fef702724eb1369; valaddr_reg:x3; val_offset:726*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 726*FLEN/8, x4, x1, x2)

inst_243:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x605c7b0bbbe88 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x3c6ba367054d3 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xb3864f7298b49 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe605c7b0bbbe88; op2val:0x3fe3c6ba367054d3;
op3val:0x7fdb3864f7298b49; valaddr_reg:x3; val_offset:729*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 729*FLEN/8, x4, x1, x2)

inst_244:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x63fdc11669528 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xb5ae43b7daad0 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x30513f9fc9850 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe63fdc11669528; op2val:0x3feb5ae43b7daad0;
op3val:0x7fe30513f9fc9850; valaddr_reg:x3; val_offset:732*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 732*FLEN/8, x4, x1, x2)

inst_245:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x65ffe2e17c444 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x40eb8cac5594e and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xc0c9423810004 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe65ffe2e17c444; op2val:0x3ff40eb8cac5594e;
op3val:0x7fec0c9423810004; valaddr_reg:x3; val_offset:735*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 735*FLEN/8, x4, x1, x2)

inst_246:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x69d7e96ea561f and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xccbeb890c5f19 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x459ec548f1271 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe69d7e96ea561f; op2val:0x3feccbeb890c5f19;
op3val:0x7fe459ec548f1271; valaddr_reg:x3; val_offset:738*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 738*FLEN/8, x4, x1, x2)

inst_247:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x6e96b1322dbaa and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x3a508bfdccb1a and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xc2182ce62e070 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe6e96b1322dbaa; op2val:0x3ff3a508bfdccb1a;
op3val:0x7fec2182ce62e070; valaddr_reg:x3; val_offset:741*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 741*FLEN/8, x4, x1, x2)

inst_248:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x706bd145282bf and fs2 == 0 and fe2 == 0x3fb and fm2 == 0x19a17f4fcf871 and fs3 == 0 and fe3 == 0x7fa and fm3 == 0x954ec3bbde56f and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe706bd145282bf; op2val:0x3fb19a17f4fcf871;
op3val:0x7fa954ec3bbde56f; valaddr_reg:x3; val_offset:744*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 744*FLEN/8, x4, x1, x2)

inst_249:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x71bdc1176bc40 and fs2 == 0 and fe2 == 0x3f9 and fm2 == 0xba063f67a6ca8 and fs3 == 0 and fe3 == 0x7f9 and fm3 == 0x3f3552b42eaff and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe71bdc1176bc40; op2val:0x3f9ba063f67a6ca8;
op3val:0x7f93f3552b42eaff; valaddr_reg:x3; val_offset:747*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 747*FLEN/8, x4, x1, x2)

inst_250:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x72c48ba798e5e and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xc6c68c15f5c70 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x49540f49439eb and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe72c48ba798e5e; op2val:0x3fec6c68c15f5c70;
op3val:0x7fe49540f49439eb; valaddr_reg:x3; val_offset:750*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 750*FLEN/8, x4, x1, x2)

inst_251:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x7318cf8a2ab28 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0xe05d4b14854ca and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x5c2ae0fe3c9c7 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe7318cf8a2ab28; op2val:0x3fce05d4b14854ca;
op3val:0x7fc5c2ae0fe3c9c7; valaddr_reg:x3; val_offset:753*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 753*FLEN/8, x4, x1, x2)

inst_252:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x734c8847b3984 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x88e1d72cdb3a6 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x1cea5f83f3cc6 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe734c8847b3984; op2val:0x3fe88e1d72cdb3a6;
op3val:0x7fe1cea5f83f3cc6; valaddr_reg:x3; val_offset:756*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 756*FLEN/8, x4, x1, x2)

inst_253:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x756b66f069892 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x202115a643acf and fs3 == 0 and fe3 == 0x7fc and fm3 == 0xa449163b1185b and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe756b66f069892; op2val:0x3fd202115a643acf;
op3val:0x7fca449163b1185b; valaddr_reg:x3; val_offset:759*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 759*FLEN/8, x4, x1, x2)

inst_254:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x7579da5cb9b2f and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x943579dbdd6c5 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x26d9284df25e5 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe7579da5cb9b2f; op2val:0x3fd943579dbdd6c5;
op3val:0x7fd26d9284df25e5; valaddr_reg:x3; val_offset:762*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 762*FLEN/8, x4, x1, x2)

inst_255:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x76f6e71a4bf4c and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x3b34431b2a732 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xcdae5aceb580f and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe76f6e71a4bf4c; op2val:0x3fe3b34431b2a732;
op3val:0x7fdcdae5aceb580f; valaddr_reg:x3; val_offset:765*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 765*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_3)

inst_256:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x77564fe05ca27 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x80dd7fff0060e and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x1a231c7e9865c and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe77564fe05ca27; op2val:0x3fe80dd7fff0060e;
op3val:0x7fe1a231c7e9865c; valaddr_reg:x3; val_offset:768*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 768*FLEN/8, x4, x1, x2)

inst_257:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x77bb772cde0e8 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x1b5679b9667ec and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x9fdb28605ac8b and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe77bb772cde0e8; op2val:0x3ff1b5679b9667ec;
op3val:0x7fe9fdb28605ac8b; valaddr_reg:x3; val_offset:771*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 771*FLEN/8, x4, x1, x2)

inst_258:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x793c51de53b23 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x5e80a6126c9ba and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x023f0567947b1 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe793c51de53b23; op2val:0x3fd5e80a6126c9ba;
op3val:0x7fd023f0567947b1; valaddr_reg:x3; val_offset:774*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 774*FLEN/8, x4, x1, x2)

inst_259:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x7acad029987d7 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x51a13afe014c9 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xf3938cdd76361 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe7acad029987d7; op2val:0x3ff51a13afe014c9;
op3val:0x7fef3938cdd76361; valaddr_reg:x3; val_offset:777*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 777*FLEN/8, x4, x1, x2)

inst_260:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x7c86f8ec5841e and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xa36c8ac35feb7 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x37b9204f81de1 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe7c86f8ec5841e; op2val:0x3fda36c8ac35feb7;
op3val:0x7fd37b9204f81de1; valaddr_reg:x3; val_offset:780*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 780*FLEN/8, x4, x1, x2)

inst_261:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x7fd31f37b82a0 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x19ebc58134c63 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xa6b03c3100d4d and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe7fd31f37b82a0; op2val:0x3fe19ebc58134c63;
op3val:0x7fda6b03c3100d4d; valaddr_reg:x3; val_offset:783*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 783*FLEN/8, x4, x1, x2)

inst_262:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x8012690cc1a61 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x4646a264c388c and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xe9816a71cb1cb and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe8012690cc1a61; op2val:0x3fe4646a264c388c;
op3val:0x7fde9816a71cb1cb; valaddr_reg:x3; val_offset:786*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 786*FLEN/8, x4, x1, x2)

inst_263:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x8046dc89efa69 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xc08f4f8e73967 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x50a9907923a77 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe8046dc89efa69; op2val:0x3fec08f4f8e73967;
op3val:0x7fe50a9907923a77; valaddr_reg:x3; val_offset:789*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 789*FLEN/8, x4, x1, x2)

inst_264:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x815db388de5f4 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xb669a948d2fc8 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x49faafb7a58a8 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe815db388de5f4; op2val:0x3feb669a948d2fc8;
op3val:0x7fe49faafb7a58a8; valaddr_reg:x3; val_offset:792*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 792*FLEN/8, x4, x1, x2)

inst_265:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x84dcf48d2cffc and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x86f131f3eab76 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x28eb7e390c445 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe84dcf48d2cffc; op2val:0x3fd86f131f3eab76;
op3val:0x7fd28eb7e390c445; valaddr_reg:x3; val_offset:795*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 795*FLEN/8, x4, x1, x2)

inst_266:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x8775d523b7834 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x7fbb0c63a2134 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x2563a7f28084c and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe8775d523b7834; op2val:0x3fe7fbb0c63a2134;
op3val:0x7fe2563a7f28084c; valaddr_reg:x3; val_offset:798*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 798*FLEN/8, x4, x1, x2)

inst_267:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x88b04e42fde91 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x9bde4ad39edb9 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x3be404a87fad7 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe88b04e42fde91; op2val:0x3fe9bde4ad39edb9;
op3val:0x7fe3be404a87fad7; valaddr_reg:x3; val_offset:801*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 801*FLEN/8, x4, x1, x2)

inst_268:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x8b65ce8641755 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x509bbf55e512c and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x03f3169cf0733 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe8b65ce8641755; op2val:0x3fe509bbf55e512c;
op3val:0x7fe03f3169cf0733; valaddr_reg:x3; val_offset:804*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 804*FLEN/8, x4, x1, x2)

inst_269:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x91600fc7d4948 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x24ee350686e3f and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xcb470c71b9436 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe91600fc7d4948; op2val:0x3ff24ee350686e3f;
op3val:0x7fecb470c71b9436; valaddr_reg:x3; val_offset:807*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 807*FLEN/8, x4, x1, x2)

inst_270:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x93a4528ea0a04 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x3b8851df15037 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xf18221f816cf7 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe93a4528ea0a04; op2val:0x3ff3b8851df15037;
op3val:0x7fef18221f816cf7; valaddr_reg:x3; val_offset:810*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 810*FLEN/8, x4, x1, x2)

inst_271:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x96b8e84b814c5 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xc2858a780d3ff and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x65e29931e8ba7 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe96b8e84b814c5; op2val:0x3fec2858a780d3ff;
op3val:0x7fe65e29931e8ba7; valaddr_reg:x3; val_offset:813*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 813*FLEN/8, x4, x1, x2)

inst_272:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x986bd0447cb50 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xe045a79c60316 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x7f1ca37bae27e and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe986bd0447cb50; op2val:0x3fee045a79c60316;
op3val:0x7fe7f1ca37bae27e; valaddr_reg:x3; val_offset:816*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 816*FLEN/8, x4, x1, x2)

inst_273:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x9bfeb40107735 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x06e9e5acdeb98 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xa71f18abef271 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe9bfeb40107735; op2val:0x3ff06e9e5acdeb98;
op3val:0x7fea71f18abef271; valaddr_reg:x3; val_offset:819*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 819*FLEN/8, x4, x1, x2)

inst_274:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x9f7e66f275221 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x36b4a098857b1 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xf8483a30885ab and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fe9f7e66f275221; op2val:0x3ff36b4a098857b1;
op3val:0x7fef8483a30885ab; valaddr_reg:x3; val_offset:822*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 822*FLEN/8, x4, x1, x2)

inst_275:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xa2fc8919a4cff and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xcee91c7df3fa3 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x7ad0a2f369b1a and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fea2fc8919a4cff; op2val:0x3fecee91c7df3fa3;
op3val:0x7fe7ad0a2f369b1a; valaddr_reg:x3; val_offset:825*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 825*FLEN/8, x4, x1, x2)

inst_276:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xa34980299b561 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x0e340b6f18efb and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xba8cc2d408803 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fea34980299b561; op2val:0x3fe0e340b6f18efb;
op3val:0x7fdba8cc2d408803; valaddr_reg:x3; val_offset:828*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 828*FLEN/8, x4, x1, x2)

inst_277:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xa351367c8b4a1 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x435937d1093f0 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x08d0cd33f6191 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fea351367c8b4a1; op2val:0x3fd435937d1093f0;
op3val:0x7fd08d0cd33f6191; valaddr_reg:x3; val_offset:831*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 831*FLEN/8, x4, x1, x2)

inst_278:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xa378a59b8daa9 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x0df805a426e35 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xba5c2c2336cc0 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fea378a59b8daa9; op2val:0x3ff0df805a426e35;
op3val:0x7feba5c2c2336cc0; valaddr_reg:x3; val_offset:834*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 834*FLEN/8, x4, x1, x2)

inst_279:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xa3c9a1606c6ff and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x2e46c14fbf2f4 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xefabe27fa7ad1 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fea3c9a1606c6ff; op2val:0x3ff2e46c14fbf2f4;
op3val:0x7feefabe27fa7ad1; valaddr_reg:x3; val_offset:837*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 837*FLEN/8, x4, x1, x2)

inst_280:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xa3f37be86d406 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x3d922ae1c5554 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x047a23d1e470a and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fea3f37be86d406; op2val:0x3fe3d922ae1c5554;
op3val:0x7fe047a23d1e470a; valaddr_reg:x3; val_offset:840*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 840*FLEN/8, x4, x1, x2)

inst_281:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xa4d3535c8560c and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x6290a8daf6d85 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x236d02dbba759 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fea4d3535c8560c; op2val:0x3fd6290a8daf6d85;
op3val:0x7fd236d02dbba759; valaddr_reg:x3; val_offset:843*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 843*FLEN/8, x4, x1, x2)

inst_282:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xa6b3a0e1c87b2 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x094361d976ea2 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xb5ff341df6314 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fea6b3a0e1c87b2; op2val:0x3ff094361d976ea2;
op3val:0x7feb5ff341df6314; valaddr_reg:x3; val_offset:846*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 846*FLEN/8, x4, x1, x2)

inst_283:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xa6fdd237ee16f and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x0594fec5c4774 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0xb036f7072a98b and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fea6fdd237ee16f; op2val:0x3fd0594fec5c4774;
op3val:0x7fcb036f7072a98b; valaddr_reg:x3; val_offset:849*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 849*FLEN/8, x4, x1, x2)

inst_284:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xa85fbb6c4aa86 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x8ee51f605efcf and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x4aa053842e7fb and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fea85fbb6c4aa86; op2val:0x3fc8ee51f605efcf;
op3val:0x7fc4aa053842e7fb; valaddr_reg:x3; val_offset:852*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 852*FLEN/8, x4, x1, x2)

inst_285:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xad9fee197d159 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x24fb7d6ccf2d4 and fs3 == 0 and fe3 == 0x7fb and fm3 == 0xebb079e138157 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fead9fee197d159; op2val:0x3fc24fb7d6ccf2d4;
op3val:0x7fbebb079e138157; valaddr_reg:x3; val_offset:855*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 855*FLEN/8, x4, x1, x2)

inst_286:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xae1041c5fd79f and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x1fe9f24a7455f and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xe3ad3d9146af5 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7feae1041c5fd79f; op2val:0x3ff1fe9f24a7455f;
op3val:0x7fee3ad3d9146af5; valaddr_reg:x3; val_offset:858*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 858*FLEN/8, x4, x1, x2)

inst_287:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xae14739ca44d5 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x4e58ce86f883f and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x18d9f06aa8b9b and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7feae14739ca44d5; op2val:0x3fc4e58ce86f883f;
op3val:0x7fc18d9f06aa8b9b; valaddr_reg:x3; val_offset:861*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 861*FLEN/8, x4, x1, x2)

inst_288:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xae4d90c01f43f and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x2419596701007 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xeafb14f460a39 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7feae4d90c01f43f; op2val:0x3fe2419596701007;
op3val:0x7fdeafb14f460a39; valaddr_reg:x3; val_offset:864*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 864*FLEN/8, x4, x1, x2)

inst_289:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xb2a7dc5f3c81b and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x2b794582212d1 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xfc77f5be94a6d and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7feb2a7dc5f3c81b; op2val:0x3ff2b794582212d1;
op3val:0x7fefc77f5be94a6d; valaddr_reg:x3; val_offset:867*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 867*FLEN/8, x4, x1, x2)

inst_290:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xb48bc30c7d45b and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xe40bfa9b7f1f5 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x9cb6550f52209 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7feb48bc30c7d45b; op2val:0x3fee40bfa9b7f1f5;
op3val:0x7fe9cb6550f52209; valaddr_reg:x3; val_offset:870*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 870*FLEN/8, x4, x1, x2)

inst_291:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xb7892d8885ef9 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x5973ca5b38043 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x288f5635a6591 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7feb7892d8885ef9; op2val:0x3fd5973ca5b38043;
op3val:0x7fd288f5635a6591; valaddr_reg:x3; val_offset:873*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 873*FLEN/8, x4, x1, x2)

inst_292:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xb9c8f6764ffdb and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x004b48dee6c8d and fs3 == 0 and fe3 == 0x7fc and fm3 == 0xba4ae217b4833 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7feb9c8f6764ffdb; op2val:0x3fd004b48dee6c8d;
op3val:0x7fcba4ae217b4833; valaddr_reg:x3; val_offset:876*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 876*FLEN/8, x4, x1, x2)

inst_293:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xba05bd05d31dd and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x9ce23435bfc76 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x6473e7b61bd02 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7feba05bd05d31dd; op2val:0x3fe9ce23435bfc76;
op3val:0x7fe6473e7b61bd02; valaddr_reg:x3; val_offset:879*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 879*FLEN/8, x4, x1, x2)

inst_294:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xbdb72220615e4 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x8a5ff217edb25 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x5751737e23b77 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7febdb72220615e4; op2val:0x3fe8a5ff217edb25;
op3val:0x7fe5751737e23b77; valaddr_reg:x3; val_offset:882*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 882*FLEN/8, x4, x1, x2)

inst_295:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xbeeb913df45f9 and fs2 == 0 and fe2 == 0x3f9 and fm2 == 0x9961122d0989c and fs3 == 0 and fe3 == 0x7f9 and fm3 == 0x6557e9049a15f and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7febeeb913df45f9; op2val:0x3f99961122d0989c;
op3val:0x7f96557e9049a15f; valaddr_reg:x3; val_offset:885*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 885*FLEN/8, x4, x1, x2)

inst_296:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xbfc0312b8e8ac and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xd32130c641952 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x9882d363cb1ba and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7febfc0312b8e8ac; op2val:0x3fed32130c641952;
op3val:0x7fe9882d363cb1ba; valaddr_reg:x3; val_offset:888*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 888*FLEN/8, x4, x1, x2)

inst_297:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xc03ea0b45fe6a and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x6ef94d7b62f69 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x4147072b89211 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fec03ea0b45fe6a; op2val:0x3fd6ef94d7b62f69;
op3val:0x7fd4147072b89211; valaddr_reg:x3; val_offset:891*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 891*FLEN/8, x4, x1, x2)

inst_298:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xc402aa48c8c77 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x18907c865e8fb and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xef62079def623 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fec402aa48c8c77; op2val:0x3ff18907c865e8fb;
op3val:0x7feef62079def623; valaddr_reg:x3; val_offset:894*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 894*FLEN/8, x4, x1, x2)

inst_299:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xc4be9601db523 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xd6229120ea38a and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x9fb984b0bef61 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fec4be9601db523; op2val:0x3fed6229120ea38a;
op3val:0x7fe9fb984b0bef61; valaddr_reg:x3; val_offset:897*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 897*FLEN/8, x4, x1, x2)

inst_300:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xc612cc07361be and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x960c4699b0a59 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x681bcad75f3fa and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fec612cc07361be; op2val:0x3fe960c4699b0a59;
op3val:0x7fe681bcad75f3fa; valaddr_reg:x3; val_offset:900*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 900*FLEN/8, x4, x1, x2)

inst_301:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xc8acab20d4af1 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x681b357406e10 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x4131ad1b78beb and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fec8acab20d4af1; op2val:0x3fe681b357406e10;
op3val:0x7fe4131ad1b78beb; valaddr_reg:x3; val_offset:903*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 903*FLEN/8, x4, x1, x2)

inst_302:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xc98e2fe32411b and fs2 == 0 and fe2 == 0x3fc and fm2 == 0xc89ea2030c8a4 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x9810664fc9e8f and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fec98e2fe32411b; op2val:0x3fcc89ea2030c8a4;
op3val:0x7fc9810664fc9e8f; valaddr_reg:x3; val_offset:906*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 906*FLEN/8, x4, x1, x2)

inst_303:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xca98bbf378d1d and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x0e87d86e10872 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xe4a0707bf0a3d and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7feca98bbf378d1d; op2val:0x3fe0e87d86e10872;
op3val:0x7fde4a0707bf0a3d; valaddr_reg:x3; val_offset:909*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 909*FLEN/8, x4, x1, x2)

inst_304:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xcc8f9737be20b and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xbbf242bc1ad44 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x8f58293cebb41 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fecc8f9737be20b; op2val:0x3febbf242bc1ad44;
op3val:0x7fe8f58293cebb41; valaddr_reg:x3; val_offset:912*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 912*FLEN/8, x4, x1, x2)

inst_305:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xcd9a21ef5aa64 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x4931479e98e13 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x28c9f8a06941f and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fecd9a21ef5aa64; op2val:0x3fd4931479e98e13;
op3val:0x7fd28c9f8a06941f; valaddr_reg:x3; val_offset:915*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 915*FLEN/8, x4, x1, x2)

inst_306:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xcf48c61dc85b9 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xc85988489669a and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x9cedd3e9f9949 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fecf48c61dc85b9; op2val:0x3fec85988489669a;
op3val:0x7fe9cedd3e9f9949; valaddr_reg:x3; val_offset:918*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 918*FLEN/8, x4, x1, x2)

inst_307:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xd0013b154d27f and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x197bef7179510 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xfe31fc7097844 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fed0013b154d27f; op2val:0x3ff197bef7179510;
op3val:0x7fefe31fc7097844; valaddr_reg:x3; val_offset:921*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 921*FLEN/8, x4, x1, x2)

inst_308:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xd1ce4f18ddc4f and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xb842ba2798159 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x908a00ed8919c and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fed1ce4f18ddc4f; op2val:0x3feb842ba2798159;
op3val:0x7fe908a00ed8919c; valaddr_reg:x3; val_offset:924*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 924*FLEN/8, x4, x1, x2)

inst_309:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xd331a1c40e3c1 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xf16a8dc465195 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xc5e2e829adb51 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fed331a1c40e3c1; op2val:0x3fdf16a8dc465195;
op3val:0x7fdc5e2e829adb51; valaddr_reg:x3; val_offset:927*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 927*FLEN/8, x4, x1, x2)

inst_310:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xda50f38c8705c and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x8a127dbe4a28e and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x6d116cc0c00bf and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7feda50f38c8705c; op2val:0x3fe8a127dbe4a28e;
op3val:0x7fe6d116cc0c00bf; valaddr_reg:x3; val_offset:930*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 930*FLEN/8, x4, x1, x2)

inst_311:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xda82856334f8f and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x19556b23fb28f and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x04bbcc2bb71c3 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7feda82856334f8f; op2val:0x3fc19556b23fb28f;
op3val:0x7fc04bbcc2bb71c3; valaddr_reg:x3; val_offset:933*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 933*FLEN/8, x4, x1, x2)

inst_312:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xde89819c9c8ed and fs2 == 0 and fe2 == 0x3fb and fm2 == 0xd1c51041f81fa and fs3 == 0 and fe3 == 0x7fb and fm3 == 0xb35411510f5bf and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fede89819c9c8ed; op2val:0x3fbd1c51041f81fa;
op3val:0x7fbb35411510f5bf; valaddr_reg:x3; val_offset:936*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 936*FLEN/8, x4, x1, x2)

inst_313:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xdfc13e2e47ba6 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x0df028bb6dde5 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xf9e01fd65e87a and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fedfc13e2e47ba6; op2val:0x3ff0df028bb6dde5;
op3val:0x7fef9e01fd65e87a; valaddr_reg:x3; val_offset:939*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 939*FLEN/8, x4, x1, x2)

inst_314:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xe1a356a3773df and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x2aee81e6a084d and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x19346e8d05179 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fee1a356a3773df; op2val:0x3fe2aee81e6a084d;
op3val:0x7fe19346e8d05179; valaddr_reg:x3; val_offset:942*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 942*FLEN/8, x4, x1, x2)

inst_315:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xe20b0cf4d346f and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x887e36352d615 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x718749acdd3e9 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fee20b0cf4d346f; op2val:0x3fe887e36352d615;
op3val:0x7fe718749acdd3e9; valaddr_reg:x3; val_offset:945*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 945*FLEN/8, x4, x1, x2)

inst_316:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xe2657e7b613a3 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x1a22aa692456f and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x09d28ff61dcaf and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fee2657e7b613a3; op2val:0x3fd1a22aa692456f;
op3val:0x7fd09d28ff61dcaf; valaddr_reg:x3; val_offset:948*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 948*FLEN/8, x4, x1, x2)

inst_317:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xe7cd94d702ecf and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x1d0bdfeb27173 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x0f933f9a762d3 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fee7cd94d702ecf; op2val:0x3fc1d0bdfeb27173;
op3val:0x7fc0f933f9a762d3; valaddr_reg:x3; val_offset:951*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 951*FLEN/8, x4, x1, x2)

inst_318:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xe7fc7388080d7 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x72ee1e089780f and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x61886276fd2a1 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fee7fc7388080d7; op2val:0x3fe72ee1e089780f;
op3val:0x7fe61886276fd2a1; valaddr_reg:x3; val_offset:954*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 954*FLEN/8, x4, x1, x2)

inst_319:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xe86b4ad3f811f and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xc78145e474c93 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xb286aab41e211 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fee86b4ad3f811f; op2val:0x3fec78145e474c93;
op3val:0x7feb286aab41e211; valaddr_reg:x3; val_offset:957*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 957*FLEN/8, x4, x1, x2)

inst_320:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xe8f5d7be5e740 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x86fb25e38210f and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x75631c0a4f12b and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fee8f5d7be5e740; op2val:0x3fd86fb25e38210f;
op3val:0x7fd75631c0a4f12b; valaddr_reg:x3; val_offset:960*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 960*FLEN/8, x4, x1, x2)

inst_321:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xe9bc581608b2c and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xdec7e893c57ef and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xc9f60d677f14f and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fee9bc581608b2c; op2val:0x3fddec7e893c57ef;
op3val:0x7fdc9f60d677f14f; valaddr_reg:x3; val_offset:963*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 963*FLEN/8, x4, x1, x2)

inst_322:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xea5bbe8ec4a1e and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x42ba30fb3fcfe and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x351605153e7bf and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7feea5bbe8ec4a1e; op2val:0x3fc42ba30fb3fcfe;
op3val:0x7fc351605153e7bf; valaddr_reg:x3; val_offset:966*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 966*FLEN/8, x4, x1, x2)

inst_323:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xef7471570c9e8 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x0a65ebf53446a and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x01ca1fafcf0e3 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7feef7471570c9e8; op2val:0x3fc0a65ebf53446a;
op3val:0x7fc01ca1fafcf0e3; valaddr_reg:x3; val_offset:969*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 969*FLEN/8, x4, x1, x2)

inst_324:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xf118846e7cd8c and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x569b4d6573125 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x4ca2288693d12 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fef118846e7cd8c; op2val:0x3fe569b4d6573125;
op3val:0x7fe4ca2288693d12; valaddr_reg:x3; val_offset:972*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 972*FLEN/8, x4, x1, x2)

inst_325:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xf17d106e32604 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xa12980fda43d2 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x9556afbb48d81 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fef17d106e32604; op2val:0x3fda12980fda43d2;
op3val:0x7fd9556afbb48d81; valaddr_reg:x3; val_offset:975*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 975*FLEN/8, x4, x1, x2)

inst_326:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xf1c9969cbb9a7 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x05b157dd288f1 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0xfcdb5dc879b63 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fef1c9969cbb9a7; op2val:0x3fd05b157dd288f1;
op3val:0x7fcfcdb5dc879b63; valaddr_reg:x3; val_offset:978*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 978*FLEN/8, x4, x1, x2)

inst_327:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xf1fba43f08c95 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x1ffc5a61fb28d and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x181a0054b4c77 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fef1fba43f08c95; op2val:0x3fe1ffc5a61fb28d;
op3val:0x7fe181a0054b4c77; valaddr_reg:x3; val_offset:981*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 981*FLEN/8, x4, x1, x2)

inst_328:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xf3d7b58e26345 and fs2 == 0 and fe2 == 0x3fa and fm2 == 0x86e30b0ef95b6 and fs3 == 0 and fe3 == 0x7fa and fm3 == 0x7d9af63a065bf and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fef3d7b58e26345; op2val:0x3fa86e30b0ef95b6;
op3val:0x7fa7d9af63a065bf; valaddr_reg:x3; val_offset:984*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 984*FLEN/8, x4, x1, x2)

inst_329:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xf3dd17a9c7c45 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x10e1a66abf85e and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x0a69c1b3feaa3 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fef3dd17a9c7c45; op2val:0x3fd10e1a66abf85e;
op3val:0x7fd0a69c1b3feaa3; valaddr_reg:x3; val_offset:987*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 987*FLEN/8, x4, x1, x2)

inst_330:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xf4cce5857ea2c and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xea15191aacbae and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xdf5cba9e44bbc and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fef4cce5857ea2c; op2val:0x3feea15191aacbae;
op3val:0x7fedf5cba9e44bbc; valaddr_reg:x3; val_offset:990*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 990*FLEN/8, x4, x1, x2)

inst_331:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xf5d97a44af52a and fs2 == 0 and fe2 == 0x3fb and fm2 == 0xed60f4ded2fb1 and fs3 == 0 and fe3 == 0x7fb and fm3 == 0xe398f1061c0ef and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fef5d97a44af52a; op2val:0x3fbed60f4ded2fb1;
op3val:0x7fbe398f1061c0ef; valaddr_reg:x3; val_offset:993*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 993*FLEN/8, x4, x1, x2)

inst_332:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xf5eaa91e5bdd1 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x57482fe1c8752 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x5085783bff77a and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fef5eaa91e5bdd1; op2val:0x3fe57482fe1c8752;
op3val:0x7fe5085783bff77a; valaddr_reg:x3; val_offset:996*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 996*FLEN/8, x4, x1, x2)

inst_333:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xf82e691fa0d23 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x36d8f2c34be03 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x3219bc48bfcbb and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fef82e691fa0d23; op2val:0x3fc36d8f2c34be03;
op3val:0x7fc3219bc48bfcbb; valaddr_reg:x3; val_offset:999*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 999*FLEN/8, x4, x1, x2)

inst_334:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xfad06e6abdc66 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xae929f80c30f1 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xaa36300e514cc and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7fefad06e6abdc66; op2val:0x3feae929f80c30f1;
op3val:0x7feaa36300e514cc; valaddr_reg:x3; val_offset:1002*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1002*FLEN/8, x4, x1, x2)

inst_335:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xff61bb37ad9ea and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x2e05ec6bcd531 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x2da89004e3bfa and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7feff61bb37ad9ea; op2val:0x3fe2e05ec6bcd531;
op3val:0x7fe2da89004e3bfa; valaddr_reg:x3; val_offset:1005*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1005*FLEN/8, x4, x1, x2)

inst_336:
// fs1 == 0 and fe1 == 0x7f2 and fm1 == 0xe93a4462ebfff and fs2 == 0 and fe2 == 0x408 and fm2 == 0x4435ea24b2dc9 and fs3 == 0 and fe3 == 0x7fc and fm3 == 0x35ca63895fd77 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2e93a4462ebfff; op2val:0x4084435ea24b2dc9;
op3val:0x7fc35ca63895fd77; valaddr_reg:x3; val_offset:1008*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1008*FLEN/8, x4, x1, x2)

inst_337:
// fs1 == 0 and fe1 == 0x7f5 and fm1 == 0x1835aaec2f3ff and fs2 == 0 and fe2 == 0x407 and fm2 == 0x6505bdb287230 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x86c9200abcecf and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f51835aaec2f3ff; op2val:0x4076505bdb287230;
op3val:0x7fd86c9200abcecf; valaddr_reg:x3; val_offset:1011*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1011*FLEN/8, x4, x1, x2)

inst_338:
// fs1 == 0 and fe1 == 0x7f5 and fm1 == 0xc87e298ac65ff and fs2 == 0 and fe2 == 0x407 and fm2 == 0xaf1d2bfcc9208 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x80603655a6422 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f5c87e298ac65ff; op2val:0x407af1d2bfcc9208;
op3val:0x7fe80603655a6422; valaddr_reg:x3; val_offset:1014*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1014*FLEN/8, x4, x1, x2)

inst_339:
// fs1 == 0 and fe1 == 0x7f7 and fm1 == 0x01b818d54fa7f and fs2 == 0 and fe2 == 0x406 and fm2 == 0x967222f02addf and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x992cde89965d1 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f701b818d54fa7f; op2val:0x406967222f02addf;
op3val:0x7fe992cde89965d1; valaddr_reg:x3; val_offset:1017*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1017*FLEN/8, x4, x1, x2)

inst_340:
// fs1 == 0 and fe1 == 0x7f7 and fm1 == 0x0c4744a96187f and fs2 == 0 and fe2 == 0x405 and fm2 == 0x995df19783280 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xad004fc46d79f and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f70c4744a96187f; op2val:0x405995df19783280;
op3val:0x7fdad004fc46d79f; valaddr_reg:x3; val_offset:1020*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1020*FLEN/8, x4, x1, x2)

inst_341:
// fs1 == 0 and fe1 == 0x7f7 and fm1 == 0x447022e841cff and fs2 == 0 and fe2 == 0x404 and fm2 == 0xaae4b950ea7ce and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x0e823c6894e81 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f7447022e841cff; op2val:0x404aae4b950ea7ce;
op3val:0x7fd0e823c6894e81; valaddr_reg:x3; val_offset:1023*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1023*FLEN/8, x4, x1, x2)

inst_342:
// fs1 == 0 and fe1 == 0x7f9 and fm1 == 0x1ecb025113f7f and fs2 == 0 and fe2 == 0x403 and fm2 == 0xa3860dd245747 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xd5fc7289c9947 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f91ecb025113f7f; op2val:0x403a3860dd245747;
op3val:0x7fdd5fc7289c9947; valaddr_reg:x3; val_offset:1026*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1026*FLEN/8, x4, x1, x2)

inst_343:
// fs1 == 0 and fe1 == 0x7f9 and fm1 == 0x28415313233bf and fs2 == 0 and fe2 == 0x403 and fm2 == 0x25542e0203a76 and fs3 == 0 and fe3 == 0x7fd and fm3 == 0x53742ec23b45b and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f928415313233bf; op2val:0x40325542e0203a76;
op3val:0x7fd53742ec23b45b; valaddr_reg:x3; val_offset:1029*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1029*FLEN/8, x4, x1, x2)

inst_344:
// fs1 == 0 and fe1 == 0x7f9 and fm1 == 0x71abc78672bff and fs2 == 0 and fe2 == 0x403 and fm2 == 0x4766a61cffe7f and fs3 == 0 and fe3 == 0x7fd and fm3 == 0xd8c6a62d7fd8f and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f971abc78672bff; op2val:0x4034766a61cffe7f;
op3val:0x7fdd8c6a62d7fd8f; valaddr_reg:x3; val_offset:1032*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1032*FLEN/8, x4, x1, x2)

inst_345:
// fs1 == 0 and fe1 == 0x7f9 and fm1 == 0x7a6679a447c1f and fs2 == 0 and fe2 == 0x404 and fm2 == 0x49681b9694e3f and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xe6e794bcede93 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f97a6679a447c1f; op2val:0x40449681b9694e3f;
op3val:0x7fee6e794bcede93; valaddr_reg:x3; val_offset:1035*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1035*FLEN/8, x4, x1, x2)

inst_346:
// fs1 == 0 and fe1 == 0x7f9 and fm1 == 0xa1ce7890019bf and fs2 == 0 and fe2 == 0x404 and fm2 == 0x124a72ef326d4 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xbfa87e4d4f18b and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f9a1ce7890019bf; op2val:0x404124a72ef326d4;
op3val:0x7febfa87e4d4f18b; valaddr_reg:x3; val_offset:1038*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1038*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(9164424625506926591,64,FLEN)
NAN_BOXED(9164424625506926591,64,FLEN)
NAN_BOXED(9164424625506926591,64,FLEN)
NAN_BOXED(9174258341432718335,64,FLEN)
NAN_BOXED(4644988421128352304,64,FLEN)
NAN_BOXED(4644988421128352304,64,FLEN)
NAN_BOXED(9177359547968022015,64,FLEN)
NAN_BOXED(4646291853049369096,64,FLEN)
NAN_BOXED(9177359547968022015,64,FLEN)
NAN_BOXED(9182111504953127679,64,FLEN)
NAN_BOXED(4639022330274001517,64,FLEN)
NAN_BOXED(9214215248007128183,64,FLEN)
NAN_BOXED(9182869883444329087,64,FLEN)
NAN_BOXED(4641354287497260511,64,FLEN)
NAN_BOXED(9182869883444329087,64,FLEN)
NAN_BOXED(9183055643955042431,64,FLEN)
NAN_BOXED(9183055643955042431,64,FLEN)
NAN_BOXED(9183055643955042431,64,FLEN)
NAN_BOXED(9184043614811200767,64,FLEN)
NAN_BOXED(4632706806350522318,64,FLEN)
NAN_BOXED(4632706806350522318,64,FLEN)
NAN_BOXED(9192388555720179583,64,FLEN)
NAN_BOXED(4628073555754768199,64,FLEN)
NAN_BOXED(9213625721654384967,64,FLEN)
NAN_BOXED(9192555015971156927,64,FLEN)
NAN_BOXED(9192555015971156927,64,FLEN)
NAN_BOXED(9211329373425349723,64,FLEN)
NAN_BOXED(9193846561076358143,64,FLEN)
NAN_BOXED(9193846561076358143,64,FLEN)
NAN_BOXED(9213674801222647183,64,FLEN)
NAN_BOXED(9194000128200178719,64,FLEN)
NAN_BOXED(4630991800749346367,64,FLEN)
NAN_BOXED(9218426954515930771,64,FLEN)
NAN_BOXED(9194693369991797183,64,FLEN)
NAN_BOXED(4630022192379406036,64,FLEN)
NAN_BOXED(9217736523910541707,64,FLEN)
NAN_BOXED(9195395553593292223,64,FLEN)
NAN_BOXED(4621820080483852506,64,FLEN)
NAN_BOXED(9210391195258660299,64,FLEN)
NAN_BOXED(9196493616576887167,64,FLEN)
NAN_BOXED(4626887019660838521,64,FLEN)
NAN_BOXED(9216251951993193714,64,FLEN)
NAN_BOXED(9197250533331577039,64,FLEN)
NAN_BOXED(4622700260288093463,64,FLEN)
NAN_BOXED(9213169504502704803,64,FLEN)
NAN_BOXED(9197497200686512239,64,FLEN)
NAN_BOXED(4625490442910819105,64,FLEN)
NAN_BOXED(9215879991337647037,64,FLEN)
NAN_BOXED(9197546055981752719,64,FLEN)
NAN_BOXED(4626261316718538097,64,FLEN)
NAN_BOXED(9216907557501709018,64,FLEN)
NAN_BOXED(9197552098898230895,64,FLEN)
NAN_BOXED(4626231947388184589,64,FLEN)
NAN_BOXED(9216877823044216986,64,FLEN)
NAN_BOXED(9197851680907391535,64,FLEN)
NAN_BOXED(4603037807913938590,64,FLEN)
NAN_BOXED(9193826736278261055,64,FLEN)
NAN_BOXED(9198157364929918351,64,FLEN)
NAN_BOXED(4626062559662545518,64,FLEN)
NAN_BOXED(9217384857323973590,64,FLEN)
NAN_BOXED(9199107321884042559,64,FLEN)
NAN_BOXED(4616195191266676281,64,FLEN)
NAN_BOXED(9208123505997675443,64,FLEN)
NAN_BOXED(9199685053671618431,64,FLEN)
NAN_BOXED(4612557181095711188,64,FLEN)
NAN_BOXED(9205531246027498387,64,FLEN)
NAN_BOXED(9200205365415286623,64,FLEN)
NAN_BOXED(4621114897678008751,64,FLEN)
NAN_BOXED(9214431812730477014,64,FLEN)
NAN_BOXED(9200343066693017007,64,FLEN)
NAN_BOXED(4623525399324130255,64,FLEN)
NAN_BOXED(9216780865573901453,64,FLEN)
NAN_BOXED(9200436273282407007,64,FLEN)
NAN_BOXED(4614963772612638345,64,FLEN)
NAN_BOXED(9208274483376377935,64,FLEN)
NAN_BOXED(9200589012913836207,64,FLEN)
NAN_BOXED(4616674580465709054,64,FLEN)
NAN_BOXED(9210199418056717003,64,FLEN)
NAN_BOXED(9200590225431810175,64,FLEN)
NAN_BOXED(4622698743265902549,64,FLEN)
NAN_BOXED(9216179716384164278,64,FLEN)
NAN_BOXED(9200790558562426703,64,FLEN)
NAN_BOXED(4616720792134981290,64,FLEN)
NAN_BOXED(9210356928412655745,64,FLEN)
NAN_BOXED(9200817695983071823,64,FLEN)
NAN_BOXED(4607551386432476635,64,FLEN)
NAN_BOXED(9201203346252391839,64,FLEN)
NAN_BOXED(9200983078923433855,64,FLEN)
NAN_BOXED(4624815309915978005,64,FLEN)
NAN_BOXED(9218734079035086817,64,FLEN)
NAN_BOXED(9201151098662314471,64,FLEN)
NAN_BOXED(4623479931003029611,64,FLEN)
NAN_BOXED(9217632424030935305,64,FLEN)
NAN_BOXED(9201384052843840223,64,FLEN)
NAN_BOXED(4608527113724274561,64,FLEN)
NAN_BOXED(9202887000580042199,64,FLEN)
NAN_BOXED(9201446555025124391,64,FLEN)
NAN_BOXED(4622087057744670221,64,FLEN)
NAN_BOXED(9216534574606383235,64,FLEN)
NAN_BOXED(9201568424530740551,64,FLEN)
NAN_BOXED(4623484384729897019,64,FLEN)
NAN_BOXED(9218313140772617300,64,FLEN)
NAN_BOXED(9201577936488635127,64,FLEN)
NAN_BOXED(4614651742637085463,64,FLEN)
NAN_BOXED(9209523963701131687,64,FLEN)
NAN_BOXED(9201619345632811727,64,FLEN)
NAN_BOXED(4621343821554291080,64,FLEN)
NAN_BOXED(9215891306980969465,64,FLEN)
NAN_BOXED(9201715126964815567,64,FLEN)
NAN_BOXED(4615214439692826331,64,FLEN)
NAN_BOXED(9210141509987391303,64,FLEN)
NAN_BOXED(9202156933779480415,64,FLEN)
NAN_BOXED(4617962164944650424,64,FLEN)
NAN_BOXED(9213449479191433537,64,FLEN)
NAN_BOXED(9202384724049670263,64,FLEN)
NAN_BOXED(4621945521209791382,64,FLEN)
NAN_BOXED(9217573459908083434,64,FLEN)
NAN_BOXED(9202438215750486919,64,FLEN)
NAN_BOXED(4621795264592037508,64,FLEN)
NAN_BOXED(9217438715319027166,64,FLEN)
NAN_BOXED(9202459372850344295,64,FLEN)
NAN_BOXED(4620458920058069586,64,FLEN)
NAN_BOXED(9215811264548882435,64,FLEN)
NAN_BOXED(9202539081167051847,64,FLEN)
NAN_BOXED(4608037309319434855,64,FLEN)
NAN_BOXED(9203713832893895719,64,FLEN)
NAN_BOXED(9202796870545314831,64,FLEN)
NAN_BOXED(4603967081522047755,64,FLEN)
NAN_BOXED(9200137283622957375,64,FLEN)
NAN_BOXED(9202817852998585103,64,FLEN)
NAN_BOXED(4616697634700761445,64,FLEN)
NAN_BOXED(9212554591775868051,64,FLEN)
NAN_BOXED(9203661717330840007,64,FLEN)
NAN_BOXED(4615252017720785433,64,FLEN)
NAN_BOXED(9211907852382826259,64,FLEN)
NAN_BOXED(9203679406745639359,64,FLEN)
NAN_BOXED(4620809433890543542,64,FLEN)
NAN_BOXED(9217379330972573082,64,FLEN)
NAN_BOXED(9203811072956998279,64,FLEN)
NAN_BOXED(4618583513202688678,64,FLEN)
NAN_BOXED(9215574410475998625,64,FLEN)
NAN_BOXED(9203900604558123327,64,FLEN)
NAN_BOXED(4612889613823387066,64,FLEN)
NAN_BOXED(9210141618977170593,64,FLEN)
NAN_BOXED(9203910467570713015,64,FLEN)
NAN_BOXED(4620655544388432644,64,FLEN)
NAN_BOXED(9217389646060599340,64,FLEN)
NAN_BOXED(9203996428391900919,64,FLEN)
NAN_BOXED(4617631177507685546,64,FLEN)
NAN_BOXED(9214907936889515953,64,FLEN)
NAN_BOXED(9204208031412871031,64,FLEN)
NAN_BOXED(4609054646311365939,64,FLEN)
NAN_BOXED(9206416106232667927,64,FLEN)
NAN_BOXED(9204237248328092311,64,FLEN)
NAN_BOXED(4609321965230414283,64,FLEN)
NAN_BOXED(9206670855267989787,64,FLEN)
NAN_BOXED(9205114224505667511,64,FLEN)
NAN_BOXED(4615368123707042925,64,FLEN)
NAN_BOXED(9213322129775730793,64,FLEN)
NAN_BOXED(9205271310548173319,64,FLEN)
NAN_BOXED(4610799683401958065,64,FLEN)
NAN_BOXED(9208897070060473135,64,FLEN)
NAN_BOXED(9205431078266918671,64,FLEN)
NAN_BOXED(4608037217996513966,64,FLEN)
NAN_BOXED(9206299816621242263,64,FLEN)
NAN_BOXED(9205464530317346883,64,FLEN)
NAN_BOXED(4611540326219086678,64,FLEN)
NAN_BOXED(9209893554853895367,64,FLEN)
NAN_BOXED(9205514011323422235,64,FLEN)
NAN_BOXED(4611300716177027631,64,FLEN)
NAN_BOXED(9209775303300073971,64,FLEN)
NAN_BOXED(9205573229334733831,64,FLEN)
NAN_BOXED(4592499828156646799,64,FLEN)
NAN_BOXED(9191050135052921087,64,FLEN)
NAN_BOXED(9205576465603196675,64,FLEN)
NAN_BOXED(4619502905435235397,64,FLEN)
NAN_BOXED(9218057942924111391,64,FLEN)
NAN_BOXED(9205649226530399387,64,FLEN)
NAN_BOXED(4613285217747819851,64,FLEN)
NAN_BOXED(9211855566571116225,64,FLEN)
NAN_BOXED(9205873124322502231,64,FLEN)
NAN_BOXED(4615648550374272543,64,FLEN)
NAN_BOXED(9214578824195534746,64,FLEN)
NAN_BOXED(9205923550595689883,64,FLEN)
NAN_BOXED(4612686964993334243,64,FLEN)
NAN_BOXED(9211553873494426607,64,FLEN)
NAN_BOXED(9205960784829854735,64,FLEN)
NAN_BOXED(4615508123824931087,64,FLEN)
NAN_BOXED(9214581602268223397,64,FLEN)
NAN_BOXED(9206051375835162171,64,FLEN)
NAN_BOXED(4605530094911469541,64,FLEN)
NAN_BOXED(9204838264362822855,64,FLEN)
NAN_BOXED(9206120523217043739,64,FLEN)
NAN_BOXED(4618052171814894065,64,FLEN)
NAN_BOXED(9217305782538873806,64,FLEN)
NAN_BOXED(9206165586744111395,64,FLEN)
NAN_BOXED(4610436287665097553,64,FLEN)
NAN_BOXED(9209932219776653219,64,FLEN)
NAN_BOXED(9206235586176084147,64,FLEN)
NAN_BOXED(4618614513688865546,64,FLEN)
NAN_BOXED(9218140398899110699,64,FLEN)
NAN_BOXED(9206329858667228347,64,FLEN)
NAN_BOXED(4614426886278302896,64,FLEN)
NAN_BOXED(9214166014493696865,64,FLEN)
NAN_BOXED(9206418564775949831,64,FLEN)
NAN_BOXED(4616906458276736180,64,FLEN)
NAN_BOXED(9216311472447219366,64,FLEN)
NAN_BOXED(9206529761030830443,64,FLEN)
NAN_BOXED(4613555103591182058,64,FLEN)
NAN_BOXED(9213388900503350103,64,FLEN)
NAN_BOXED(9206671466614823403,64,FLEN)
NAN_BOXED(4613200406419738052,64,FLEN)
NAN_BOXED(9213131244340239445,64,FLEN)
NAN_BOXED(9206872362273795699,64,FLEN)
NAN_BOXED(4616889049039299448,64,FLEN)
NAN_BOXED(9216814236525929415,64,FLEN)
NAN_BOXED(9206882826233483611,64,FLEN)
NAN_BOXED(4606876916722127433,64,FLEN)
NAN_BOXED(9206678344567088659,64,FLEN)
NAN_BOXED(9206908619650913167,64,FLEN)
NAN_BOXED(4604451419051941726,64,FLEN)
NAN_BOXED(9204788080312866111,64,FLEN)
NAN_BOXED(9207063483429147475,64,FLEN)
NAN_BOXED(4613368851273290399,64,FLEN)
NAN_BOXED(9213887328722086743,64,FLEN)
NAN_BOXED(9207202951488845783,64,FLEN)
NAN_BOXED(4608606944951612307,64,FLEN)
NAN_BOXED(9209211165589719239,64,FLEN)
NAN_BOXED(9207285961471384423,64,FLEN)
NAN_BOXED(4616662933934059580,64,FLEN)
NAN_BOXED(9216969138038839864,64,FLEN)
NAN_BOXED(9207365392776175035,64,FLEN)
NAN_BOXED(4614428993100491107,64,FLEN)
NAN_BOXED(9215099826533362124,64,FLEN)
NAN_BOXED(9207679928374021727,64,FLEN)
NAN_BOXED(4612825223017050048,64,FLEN)
NAN_BOXED(9213910165684168401,64,FLEN)
NAN_BOXED(9207786234916095571,64,FLEN)
NAN_BOXED(4602164899716976312,64,FLEN)
NAN_BOXED(9202887108289042983,64,FLEN)
NAN_BOXED(9207906483561607603,64,FLEN)
NAN_BOXED(4610007303055278491,64,FLEN)
NAN_BOXED(9211095684868788279,64,FLEN)
NAN_BOXED(9207941125152137063,64,FLEN)
NAN_BOXED(4607357959809095647,64,FLEN)
NAN_BOXED(9208217365139485351,64,FLEN)
NAN_BOXED(9208095108295592691,64,FLEN)
NAN_BOXED(4612837525340499159,64,FLEN)
NAN_BOXED(9214407492448738854,64,FLEN)
NAN_BOXED(9208343435587779111,64,FLEN)
NAN_BOXED(4616592968961143996,64,FLEN)
NAN_BOXED(9218021399401025396,64,FLEN)
NAN_BOXED(9208375525151395519,64,FLEN)
NAN_BOXED(4605177877359768880,64,FLEN)
NAN_BOXED(9206701627325695019,64,FLEN)
NAN_BOXED(9208414221323875667,64,FLEN)
NAN_BOXED(4616759649440184687,64,FLEN)
NAN_BOXED(9218378330988404336,64,FLEN)
NAN_BOXED(9208445623214382399,64,FLEN)
NAN_BOXED(4613396489520471027,64,FLEN)
NAN_BOXED(9215098675449854057,64,FLEN)
NAN_BOXED(9208765524101720295,64,FLEN)
NAN_BOXED(4616569824174275978,64,FLEN)
NAN_BOXED(9218440632452801130,64,FLEN)
NAN_BOXED(9208797031003484039,64,FLEN)
NAN_BOXED(4607312820878019916,64,FLEN)
NAN_BOXED(9209027020963803795,64,FLEN)
NAN_BOXED(9209023189780454703,64,FLEN)
NAN_BOXED(4612323202977689432,64,FLEN)
NAN_BOXED(9214523713103895500,64,FLEN)
NAN_BOXED(9209138526264527131,64,FLEN)
NAN_BOXED(4594050479883031101,64,FLEN)
NAN_BOXED(9196324650049322175,64,FLEN)
NAN_BOXED(9209190511585745239,64,FLEN)
NAN_BOXED(4615918792041021188,64,FLEN)
NAN_BOXED(9217947052045052982,64,FLEN)
NAN_BOXED(9209233502080086167,64,FLEN)
NAN_BOXED(4616089049526568681,64,FLEN)
NAN_BOXED(9218147141697306225,64,FLEN)
NAN_BOXED(9209260857114061063,64,FLEN)
NAN_BOXED(4611862530716700477,64,FLEN)
NAN_BOXED(9214093950231909471,64,FLEN)
NAN_BOXED(9209469481756431391,64,FLEN)
NAN_BOXED(4607544606339342737,64,FLEN)
NAN_BOXED(9210011794535977193,64,FLEN)
NAN_BOXED(9209520383667472455,64,FLEN)
NAN_BOXED(4612672326677347586,64,FLEN)
NAN_BOXED(9215143394396721187,64,FLEN)
NAN_BOXED(9209648542355769135,64,FLEN)
NAN_BOXED(4612481499888518499,64,FLEN)
NAN_BOXED(9215035186787611776,64,FLEN)
NAN_BOXED(9209661151830153215,64,FLEN)
NAN_BOXED(4616077977978776981,64,FLEN)
NAN_BOXED(9218559190984265949,64,FLEN)
NAN_BOXED(9209806990171150083,64,FLEN)
NAN_BOXED(4607697539963217666,64,FLEN)
NAN_BOXED(9210346132806724701,64,FLEN)
NAN_BOXED(9209836908317335491,64,FLEN)
NAN_BOXED(4607478714692264165,64,FLEN)
NAN_BOXED(9210144568702233543,64,FLEN)
NAN_BOXED(9209869322045598745,64,FLEN)
NAN_BOXED(4588991404333003399,64,FLEN)
NAN_BOXED(9191686074621498687,64,FLEN)
NAN_BOXED(9209894290995791331,64,FLEN)
NAN_BOXED(4607917985674862152,64,FLEN)
NAN_BOXED(9210635256376484141,64,FLEN)
NAN_BOXED(9209901910099020905,64,FLEN)
NAN_BOXED(4608880822439118770,64,FLEN)
NAN_BOXED(9211615652065933247,64,FLEN)
NAN_BOXED(9209962008298006573,64,FLEN)
NAN_BOXED(4603928072291030305,64,FLEN)
NAN_BOXED(9206735614461013055,64,FLEN)
NAN_BOXED(9210026508608640439,64,FLEN)
NAN_BOXED(4613199297783075718,64,FLEN)
NAN_BOXED(9216098921089837455,64,FLEN)
NAN_BOXED(9210029939126621597,64,FLEN)
NAN_BOXED(4609954535888490905,64,FLEN)
NAN_BOXED(9212905897451089515,64,FLEN)
NAN_BOXED(9210061471565065535,64,FLEN)
NAN_BOXED(4609003495266018236,64,FLEN)
NAN_BOXED(9211963514527423757,64,FLEN)
NAN_BOXED(9210099803859043055,64,FLEN)
NAN_BOXED(4615409608831397775,64,FLEN)
NAN_BOXED(9218524240919187972,64,FLEN)
NAN_BOXED(9210182970566590375,64,FLEN)
NAN_BOXED(4602362388394685267,64,FLEN)
NAN_BOXED(9205509852803168367,64,FLEN)
NAN_BOXED(9210229562121376913,64,FLEN)
NAN_BOXED(4602301308036320744,64,FLEN)
NAN_BOXED(9205521769666825923,64,FLEN)
NAN_BOXED(9210239916501147725,64,FLEN)
NAN_BOXED(4606432411833237845,64,FLEN)
NAN_BOXED(9209805524833872171,64,FLEN)
NAN_BOXED(9210314394718012359,64,FLEN)
NAN_BOXED(4595488239307669811,64,FLEN)
NAN_BOXED(9198803005304338383,64,FLEN)
NAN_BOXED(9210373226354881359,64,FLEN)
NAN_BOXED(4609396447536823771,64,FLEN)
NAN_BOXED(9212838955305945305,64,FLEN)
NAN_BOXED(9210436496845851733,64,FLEN)
NAN_BOXED(4605913433851500075,64,FLEN)
NAN_BOXED(9209580679352106343,64,FLEN)
NAN_BOXED(9210502968314718139,64,FLEN)
NAN_BOXED(4614558434506892402,64,FLEN)
NAN_BOXED(9218288282517404930,64,FLEN)
NAN_BOXED(9210513509083936047,64,FLEN)
NAN_BOXED(4595333386016295315,64,FLEN)
NAN_BOXED(9198905155336841151,64,FLEN)
NAN_BOXED(9210636910817224055,64,FLEN)
NAN_BOXED(4609739498719749678,64,FLEN)
NAN_BOXED(9213634406763960791,64,FLEN)
NAN_BOXED(9210721819396129501,64,FLEN)
NAN_BOXED(4612771104131364125,64,FLEN)
NAN_BOXED(9216517851000895907,64,FLEN)
NAN_BOXED(9210838421097517147,64,FLEN)
NAN_BOXED(4605067576644930265,64,FLEN)
NAN_BOXED(9209241887336696455,64,FLEN)
NAN_BOXED(9210914752857597993,64,FLEN)
NAN_BOXED(4613139830355010164,64,FLEN)
NAN_BOXED(9217212250706304745,64,FLEN)
NAN_BOXED(9210933957892124787,64,FLEN)
NAN_BOXED(4607866743574907827,64,FLEN)
NAN_BOXED(9211781283128455839,64,FLEN)
NAN_BOXED(9210977993844294837,64,FLEN)
NAN_BOXED(4606980704411435928,64,FLEN)
NAN_BOXED(9210852127130233325,64,FLEN)
NAN_BOXED(9211016810663087479,64,FLEN)
NAN_BOXED(4611073407566145301,64,FLEN)
NAN_BOXED(9215135510353255069,64,FLEN)
NAN_BOXED(9211051594214776657,64,FLEN)
NAN_BOXED(4613168383699213569,64,FLEN)
NAN_BOXED(9217429366312748720,64,FLEN)
NAN_BOXED(9211191290821425773,64,FLEN)
NAN_BOXED(4602063164656444534,64,FLEN)
NAN_BOXED(9206288952985727599,64,FLEN)
NAN_BOXED(9211230010721266211,64,FLEN)
NAN_BOXED(4609840055031316504,64,FLEN)
NAN_BOXED(9214530108111419065,64,FLEN)
NAN_BOXED(9211296354940710619,64,FLEN)
NAN_BOXED(4604269226558244623,64,FLEN)
NAN_BOXED(9208889961884928099,64,FLEN)
NAN_BOXED(9211347735694911975,64,FLEN)
NAN_BOXED(4612605579959712505,64,FLEN)
NAN_BOXED(9217074415425609616,64,FLEN)
NAN_BOXED(9211483500351212055,64,FLEN)
NAN_BOXED(4594738422926345475,64,FLEN)
NAN_BOXED(9199423782506029855,64,FLEN)
NAN_BOXED(9211517756199038491,64,FLEN)
NAN_BOXED(4598470522162083865,64,FLEN)
NAN_BOXED(9202914478045764327,64,FLEN)
NAN_BOXED(9211530016879033665,64,FLEN)
NAN_BOXED(4605135139704215694,64,FLEN)
NAN_BOXED(9210127074500818875,64,FLEN)
NAN_BOXED(9211531256038606957,64,FLEN)
NAN_BOXED(4612651100994699173,64,FLEN)
NAN_BOXED(9217357808704886825,64,FLEN)
NAN_BOXED(9211608653041102649,64,FLEN)
NAN_BOXED(4587704255944859618,64,FLEN)
NAN_BOXED(9192578399083413023,64,FLEN)
NAN_BOXED(9211670018910015233,64,FLEN)
NAN_BOXED(4609730452154023424,64,FLEN)
NAN_BOXED(9214803128311968196,64,FLEN)
NAN_BOXED(9211730844739075949,64,FLEN)
NAN_BOXED(4608511116586456662,64,FLEN)
NAN_BOXED(9213611132937093017,64,FLEN)
NAN_BOXED(9211762883696335005,64,FLEN)
NAN_BOXED(4590537480062435153,64,FLEN)
NAN_BOXED(9195696199584928895,64,FLEN)
NAN_BOXED(9211820685091288959,64,FLEN)
NAN_BOXED(4612731987538927636,64,FLEN)
NAN_BOXED(9217825338946851430,64,FLEN)
NAN_BOXED(9211855599852535867,64,FLEN)
NAN_BOXED(4608023228323718147,64,FLEN)
NAN_BOXED(9213068751191905683,64,FLEN)
NAN_BOXED(9211917823667539947,64,FLEN)
NAN_BOXED(4599748366396383919,64,FLEN)
NAN_BOXED(9205202154685528535,64,FLEN)
NAN_BOXED(9212009519358469461,64,FLEN)
NAN_BOXED(4609586197492790693,64,FLEN)
NAN_BOXED(9214962386220761634,64,FLEN)
NAN_BOXED(9212062993775661783,64,FLEN)
NAN_BOXED(4607432599211502812,64,FLEN)
NAN_BOXED(9212435484387511489,64,FLEN)
NAN_BOXED(9212083301148784863,64,FLEN)
NAN_BOXED(4612949385154158846,64,FLEN)
NAN_BOXED(9218473609032762232,64,FLEN)
NAN_BOXED(9212146649297154945,64,FLEN)
NAN_BOXED(4606258369049405942,64,FLEN)
NAN_BOXED(9211450163774902981,64,FLEN)
NAN_BOXED(9212307439131076755,64,FLEN)
NAN_BOXED(4610484446231137862,64,FLEN)
NAN_BOXED(9215883926216856919,64,FLEN)
NAN_BOXED(9212374543280983875,64,FLEN)
NAN_BOXED(4605716776661756107,64,FLEN)
NAN_BOXED(9211232759773917807,64,FLEN)
NAN_BOXED(9212400362094699453,64,FLEN)
NAN_BOXED(4612201652280059556,64,FLEN)
NAN_BOXED(9217710309328579647,64,FLEN)
NAN_BOXED(9212410655388279009,64,FLEN)
NAN_BOXED(4612512985926968184,64,FLEN)
NAN_BOXED(9218209355901857729,64,FLEN)
NAN_BOXED(9212426108340748063,64,FLEN)
NAN_BOXED(4607258170633718738,64,FLEN)
NAN_BOXED(9212545002027559011,64,FLEN)
NAN_BOXED(9212438847558988579,64,FLEN)
NAN_BOXED(4608483936186928827,64,FLEN)
NAN_BOXED(9214425059303304057,64,FLEN)
NAN_BOXED(9212531996395591599,64,FLEN)
NAN_BOXED(4608188899685981532,64,FLEN)
NAN_BOXED(9214135348124018571,64,FLEN)
NAN_BOXED(9212559022713640151,64,FLEN)
NAN_BOXED(4607701788133310221,64,FLEN)
NAN_BOXED(9213389509104002761,64,FLEN)
NAN_BOXED(9212588380438815461,64,FLEN)
NAN_BOXED(4612493996629307533,64,FLEN)
NAN_BOXED(9218389227263685905,64,FLEN)
NAN_BOXED(9212648024145813119,64,FLEN)
NAN_BOXED(4605910553031796087,64,FLEN)
NAN_BOXED(9211618581821449449,64,FLEN)
NAN_BOXED(9212813501955275581,64,FLEN)
NAN_BOXED(4608382460509768980,64,FLEN)
NAN_BOXED(9214582524877409159,64,FLEN)
NAN_BOXED(9212889869482842021,64,FLEN)
NAN_BOXED(4610833981796151149,64,FLEN)
NAN_BOXED(9216680957189178335,64,FLEN)
NAN_BOXED(9212935003638201191,64,FLEN)
NAN_BOXED(4612095365243807874,64,FLEN)
NAN_BOXED(9218127334639615660,64,FLEN)
NAN_BOXED(9212964293439124657,64,FLEN)
NAN_BOXED(4612042812260805590,64,FLEN)
NAN_BOXED(9218070523818553965,64,FLEN)
NAN_BOXED(9213005096193429227,64,FLEN)
NAN_BOXED(4611450650966835572,64,FLEN)
NAN_BOXED(9217308859813791306,64,FLEN)
NAN_BOXED(9213172454416217091,64,FLEN)
NAN_BOXED(4611707425396232492,64,FLEN)
NAN_BOXED(9217713200223976210,64,FLEN)
NAN_BOXED(9213286223910947035,64,FLEN)
NAN_BOXED(4601166261458818468,64,FLEN)
NAN_BOXED(9207451195621024711,64,FLEN)
NAN_BOXED(9213454227223061745,64,FLEN)
NAN_BOXED(4603559231277080569,64,FLEN)
NAN_BOXED(9210197336932238321,64,FLEN)
NAN_BOXED(9213463405089479873,64,FLEN)
NAN_BOXED(4599260420362736386,64,FLEN)
NAN_BOXED(9205883516972415619,64,FLEN)
NAN_BOXED(9213477814030716027,64,FLEN)
NAN_BOXED(4604208876881421086,64,FLEN)
NAN_BOXED(9210797104733177137,64,FLEN)
NAN_BOXED(9213506375711241259,64,FLEN)
NAN_BOXED(4607988261946367117,64,FLEN)
NAN_BOXED(9214664646168591651,64,FLEN)
NAN_BOXED(9213521482299508041,64,FLEN)
NAN_BOXED(4604133194293588204,64,FLEN)
NAN_BOXED(9210757760486786833,64,FLEN)
NAN_BOXED(9213532095385150873,64,FLEN)
NAN_BOXED(4604907229004648391,64,FLEN)
NAN_BOXED(9211467253616498339,64,FLEN)
NAN_BOXED(9213596073898939967,64,FLEN)
NAN_BOXED(4608109834504768803,64,FLEN)
NAN_BOXED(9214828716601606555,64,FLEN)
NAN_BOXED(9213752158163818849,64,FLEN)
NAN_BOXED(4607354885413015200,64,FLEN)
NAN_BOXED(9214073628658674795,64,FLEN)
NAN_BOXED(9213758457711372773,64,FLEN)
NAN_BOXED(4598249313584737531,64,FLEN)
NAN_BOXED(9204889470263434727,64,FLEN)
NAN_BOXED(9213863750666397081,64,FLEN)
NAN_BOXED(4604730797915314635,64,FLEN)
NAN_BOXED(9211548517925979151,64,FLEN)
NAN_BOXED(9213898234728254153,64,FLEN)
NAN_BOXED(4608987796422751692,64,FLEN)
NAN_BOXED(9215843389222850393,64,FLEN)
NAN_BOXED(9213908057799212813,64,FLEN)
NAN_BOXED(4607449235672682017,64,FLEN)
NAN_BOXED(9214389733556208421,64,FLEN)
NAN_BOXED(9213969175080329267,64,FLEN)
NAN_BOXED(4611548739651924606,64,FLEN)
NAN_BOXED(9218341526226966906,64,FLEN)
NAN_BOXED(9213986718330954429,64,FLEN)
NAN_BOXED(4609106857272829713,64,FLEN)
NAN_BOXED(9216019429142705917,64,FLEN)
NAN_BOXED(9214115169861833647,64,FLEN)
NAN_BOXED(4587522918043821920,64,FLEN)
NAN_BOXED(9194501269180137503,64,FLEN)
NAN_BOXED(9214171981121601393,64,FLEN)
NAN_BOXED(4574459552947215690,64,FLEN)
NAN_BOXED(9181474758991695871,64,FLEN)
NAN_BOXED(9214255828490757601,64,FLEN)
NAN_BOXED(4605151243361852931,64,FLEN)
NAN_BOXED(9212249235236137417,64,FLEN)
NAN_BOXED(9214274793952379927,64,FLEN)
NAN_BOXED(4610272263720487445,64,FLEN)
NAN_BOXED(9217378771970952749,64,FLEN)
NAN_BOXED(9214312159631585549,64,FLEN)
NAN_BOXED(4601645499741248814,64,FLEN)
NAN_BOXED(9208781283868503631,64,FLEN)
NAN_BOXED(9214365635636644345,64,FLEN)
NAN_BOXED(4600080003172168837,64,FLEN)
NAN_BOXED(9207263557535928127,64,FLEN)
NAN_BOXED(9214379689941264076,64,FLEN)
NAN_BOXED(4607453326813995154,64,FLEN)
NAN_BOXED(9214651491377969918,64,FLEN)
NAN_BOXED(9214391598460659705,64,FLEN)
NAN_BOXED(4607470994930302668,64,FLEN)
NAN_BOXED(9214681889340532229,64,FLEN)
NAN_BOXED(9214395423775386966,64,FLEN)
NAN_BOXED(4608311738226903110,64,FLEN)
NAN_BOXED(9215532412969764740,64,FLEN)
NAN_BOXED(9214404208529645436,64,FLEN)
NAN_BOXED(4610134093668121635,64,FLEN)
NAN_BOXED(9217381687242025540,64,FLEN)
NAN_BOXED(9214463583415643392,64,FLEN)
NAN_BOXED(4600364896092204771,64,FLEN)
NAN_BOXED(9207694071502403019,64,FLEN)
NAN_BOXED(9214474378405490777,64,FLEN)
NAN_BOXED(4608770224428316921,64,FLEN)
NAN_BOXED(9216100804142552709,64,FLEN)
NAN_BOXED(9214504372024444800,64,FLEN)
NAN_BOXED(4608074428677807738,64,FLEN)
NAN_BOXED(9215424018924875654,64,FLEN)
NAN_BOXED(9214505395465060428,64,FLEN)
NAN_BOXED(4604099301623847201,64,FLEN)
NAN_BOXED(9211466611710412337,64,FLEN)
NAN_BOXED(9214513777891108229,64,FLEN)
NAN_BOXED(4606277875285963965,64,FLEN)
NAN_BOXED(9213728260158531717,64,FLEN)
NAN_BOXED(9214566289079744122,64,FLEN)
NAN_BOXED(4608559361367535987,64,FLEN)
NAN_BOXED(9216004823960223990,64,FLEN)
NAN_BOXED(9214576566100217045,64,FLEN)
NAN_BOXED(4585310050539947076,64,FLEN)
NAN_BOXED(9192734550948059135,64,FLEN)
NAN_BOXED(9214591787530387399,64,FLEN)
NAN_BOXED(4610183189194838419,64,FLEN)
NAN_BOXED(9217743775770589206,64,FLEN)
NAN_BOXED(9214604258387655663,64,FLEN)
NAN_BOXED(4610663672306507493,64,FLEN)
NAN_BOXED(9218270582620985277,64,FLEN)
NAN_BOXED(9214607266606911690,64,FLEN)
NAN_BOXED(4601823378663639301,64,FLEN)
NAN_BOXED(9209444607069425743,64,FLEN)
NAN_BOXED(9214618024935505515,64,FLEN)
NAN_BOXED(4611023259719403832,64,FLEN)
NAN_BOXED(9218674793636845785,64,FLEN)
NAN_BOXED(9214619357587599163,64,FLEN)
NAN_BOXED(4598670994433087968,64,FLEN)
NAN_BOXED(9206135951834383435,64,FLEN)
NAN_BOXED(9214658403818442897,64,FLEN)
NAN_BOXED(4609266504867838774,64,FLEN)
NAN_BOXED(9216878340609327873,64,FLEN)
NAN_BOXED(9214688033962484639,64,FLEN)
NAN_BOXED(4604321783366062972,64,FLEN)
NAN_BOXED(9211945304225057985,64,FLEN)
NAN_BOXED(9214753700242265556,64,FLEN)
NAN_BOXED(4587335768716572616,64,FLEN)
NAN_BOXED(9195137707310502911,64,FLEN)
NAN_BOXED(9214794881515991951,64,FLEN)
NAN_BOXED(4592924517755746812,64,FLEN)
NAN_BOXED(9200874861559238167,64,FLEN)
NAN_BOXED(9214810152712831451,64,FLEN)
NAN_BOXED(4609919660264414359,64,FLEN)
NAN_BOXED(9217818052115838556,64,FLEN)
NAN_BOXED(9214842796688263516,64,FLEN)
NAN_BOXED(4610224684657600670,64,FLEN)
NAN_BOXED(9218207932857542045,64,FLEN)
NAN_BOXED(9214851678951812553,64,FLEN)
NAN_BOXED(4605335750385205583,64,FLEN)
NAN_BOXED(9213292226117897683,64,FLEN)
NAN_BOXED(9214864213614137618,64,FLEN)
NAN_BOXED(4609037808992372695,64,FLEN)
NAN_BOXED(9216925336428290103,64,FLEN)
NAN_BOXED(9214881145595686354,64,FLEN)
NAN_BOXED(4604548825916179584,64,FLEN)
NAN_BOXED(9212461936652139407,64,FLEN)
NAN_BOXED(9214892004171055040,64,FLEN)
NAN_BOXED(4607740723911849221,64,FLEN)
NAN_BOXED(9215515661404687095,64,FLEN)
NAN_BOXED(9214900890313567832,64,FLEN)
NAN_BOXED(4610271298595960926,64,FLEN)
NAN_BOXED(9218357432098452316,64,FLEN)
NAN_BOXED(9214920846485522646,64,FLEN)
NAN_BOXED(4608771975263598720,64,FLEN)
NAN_BOXED(9216706647640209381,64,FLEN)
NAN_BOXED(9214975180714583233,64,FLEN)
NAN_BOXED(4581987352624479528,64,FLEN)
NAN_BOXED(9190027652302367807,64,FLEN)
NAN_BOXED(9214991898476740164,64,FLEN)
NAN_BOXED(4609693743470551197,64,FLEN)
NAN_BOXED(9217852888654843980,64,FLEN)
NAN_BOXED(9215000700159425427,64,FLEN)
NAN_BOXED(4608207083815198949,64,FLEN)
NAN_BOXED(9216170037475206604,64,FLEN)
NAN_BOXED(9215059319221360682,64,FLEN)
NAN_BOXED(4604366454721260530,64,FLEN)
NAN_BOXED(9212503598496583443,64,FLEN)
NAN_BOXED(9215084469624505458,64,FLEN)
NAN_BOXED(4605261210755000610,64,FLEN)
NAN_BOXED(9213575902985507733,64,FLEN)
NAN_BOXED(9215115576597453743,64,FLEN)
NAN_BOXED(4609660218315058582,64,FLEN)
NAN_BOXED(9218006419206384063,64,FLEN)
NAN_BOXED(9215121996431564366,64,FLEN)
NAN_BOXED(4609563278347715426,64,FLEN)
NAN_BOXED(9217903133309026605,64,FLEN)
NAN_BOXED(9215135703293533910,64,FLEN)
NAN_BOXED(4606314993739247375,64,FLEN)
NAN_BOXED(9214627753677666741,64,FLEN)
NAN_BOXED(9215150053620290691,64,FLEN)
NAN_BOXED(4554249282444317254,64,FLEN)
NAN_BOXED(9162410459390443519,64,FLEN)
NAN_BOXED(9215167590756431894,64,FLEN)
NAN_BOXED(4601705966327575161,64,FLEN)
NAN_BOXED(9210090860652356835,64,FLEN)
NAN_BOXED(9215378398676039819,64,FLEN)
NAN_BOXED(4605609359116421772,64,FLEN)
NAN_BOXED(9214414855756099418,64,FLEN)
NAN_BOXED(9215392279701832260,64,FLEN)
NAN_BOXED(4597883808564309716,64,FLEN)
NAN_BOXED(9206206134000978599,64,FLEN)
NAN_BOXED(9215481073447635844,64,FLEN)
NAN_BOXED(4605570392250429518,64,FLEN)
NAN_BOXED(9214475286439515474,64,FLEN)
NAN_BOXED(9215482328362575131,64,FLEN)
NAN_BOXED(4609175929594967719,64,FLEN)
NAN_BOXED(9217970494562691214,64,FLEN)
NAN_BOXED(9215501784466862799,64,FLEN)
NAN_BOXED(4607573915644594368,64,FLEN)
NAN_BOXED(9215992115832188377,64,FLEN)
NAN_BOXED(9215512654025915682,64,FLEN)
NAN_BOXED(4609481298683918384,64,FLEN)
NAN_BOXED(9218397441252874434,64,FLEN)
NAN_BOXED(9215543842187093124,64,FLEN)
NAN_BOXED(4609199223103003440,64,FLEN)
NAN_BOXED(9218088628931051112,64,FLEN)
NAN_BOXED(9215575761020956933,64,FLEN)
NAN_BOXED(4608369218636205703,64,FLEN)
NAN_BOXED(9217081666425245212,64,FLEN)
NAN_BOXED(9215592438670814664,64,FLEN)
NAN_BOXED(4607623306492119433,64,FLEN)
NAN_BOXED(9216153504497675553,64,FLEN)
NAN_BOXED(9215616058893820226,64,FLEN)
NAN_BOXED(4603425161880885735,64,FLEN)
NAN_BOXED(9212066156083906989,64,FLEN)
NAN_BOXED(9215650732165500048,64,FLEN)
NAN_BOXED(4593349477416590608,64,FLEN)
NAN_BOXED(9201932872010746135,64,FLEN)
NAN_BOXED(9215675437120499360,64,FLEN)
NAN_BOXED(4602149397997400186,64,FLEN)
NAN_BOXED(9210830093066375439,64,FLEN)
NAN_BOXED(9215690056508887329,64,FLEN)
NAN_BOXED(4609590126668260769,64,FLEN)
NAN_BOXED(9218806250978514491,64,FLEN)
NAN_BOXED(9215692031473668895,64,FLEN)
NAN_BOXED(4607999535117158452,64,FLEN)
NAN_BOXED(9216749948896566585,64,FLEN)
NAN_BOXED(9215724334473114110,64,FLEN)
NAN_BOXED(4592683022772113606,64,FLEN)
NAN_BOXED(9201570023628857599,64,FLEN)
NAN_BOXED(9215742741313504087,64,FLEN)
NAN_BOXED(4608193974407676672,64,FLEN)
NAN_BOXED(9217063788515332474,64,FLEN)
NAN_BOXED(9215769918584415385,64,FLEN)
NAN_BOXED(4601932936146586188,64,FLEN)
NAN_BOXED(9210777023178182279,64,FLEN)
NAN_BOXED(9215799679841377576,64,FLEN)
NAN_BOXED(4591883339882620404,64,FLEN)
NAN_BOXED(9201109868845269183,64,FLEN)
NAN_BOXED(9215808299964233919,64,FLEN)
NAN_BOXED(4596970080816502555,64,FLEN)
NAN_BOXED(9206005400012110539,64,FLEN)
NAN_BOXED(9215914090091112530,64,FLEN)
NAN_BOXED(4607317684592424395,64,FLEN)
NAN_BOXED(9216095887743183623,64,FLEN)
NAN_BOXED(9215947471475531123,64,FLEN)
NAN_BOXED(4601425867570220147,64,FLEN)
NAN_BOXED(9210597242856785027,64,FLEN)
NAN_BOXED(9215951906851359265,64,FLEN)
NAN_BOXED(4590418040164007882,64,FLEN)
NAN_BOXED(9199628035424888463,64,FLEN)
NAN_BOXED(9215989736104033092,64,FLEN)
NAN_BOXED(4603835726965563200,64,FLEN)
NAN_BOXED(9213060456539210679,64,FLEN)
NAN_BOXED(9216012212635895303,64,FLEN)
NAN_BOXED(4607251208244290440,64,FLEN)
NAN_BOXED(9216106164621824435,64,FLEN)
NAN_BOXED(9216055864821831791,64,FLEN)
NAN_BOXED(4609112220872897448,64,FLEN)
NAN_BOXED(9218710275676115817,64,FLEN)
NAN_BOXED(9216060042682023560,64,FLEN)
NAN_BOXED(4603741747182326995,64,FLEN)
NAN_BOXED(9213019469011061577,64,FLEN)
NAN_BOXED(9216123901877589288,64,FLEN)
NAN_BOXED(4605874980213598928,64,FLEN)
NAN_BOXED(9215214845886765136,64,FLEN)
NAN_BOXED(9216159232759940164,64,FLEN)
NAN_BOXED(4608324505545562446,64,FLEN)
NAN_BOXED(9217756367710912516,64,FLEN)
NAN_BOXED(9216226854483678751,64,FLEN)
NAN_BOXED(4606280731370217241,64,FLEN)
NAN_BOXED(9215589609072693873,64,FLEN)
NAN_BOXED(9216310333552122794,64,FLEN)
NAN_BOXED(4608208300727388954,64,FLEN)
NAN_BOXED(9217779383012614256,64,FLEN)
NAN_BOXED(9216342571596546751,64,FLEN)
NAN_BOXED(4589618922952390769,64,FLEN)
NAN_BOXED(9198977087472264559,64,FLEN)
NAN_BOXED(9216365794436758592,64,FLEN)
NAN_BOXED(4583433396977036456,64,FLEN)
NAN_BOXED(9192958811516889855,64,FLEN)
NAN_BOXED(9216383853314805342,64,FLEN)
NAN_BOXED(4606175716069825648,64,FLEN)
NAN_BOXED(9215654843720677867,64,FLEN)
NAN_BOXED(9216389643973602088,64,FLEN)
NAN_BOXED(4597618680657368266,64,FLEN)
NAN_BOXED(9206979066075531719,64,FLEN)
NAN_BOXED(9216393198257781124,64,FLEN)
NAN_BOXED(4605086876117611430,64,FLEN)
NAN_BOXED(9214873524806565062,64,FLEN)
NAN_BOXED(9216430503983749266,64,FLEN)
NAN_BOXED(4598740443052915407,64,FLEN)
NAN_BOXED(9208247779345897563,64,FLEN)
NAN_BOXED(9216431497040075567,64,FLEN)
NAN_BOXED(4600782537923352261,64,FLEN)
NAN_BOXED(9210544663987955173,64,FLEN)
NAN_BOXED(9216457682580717388,64,FLEN)
NAN_BOXED(4603720349575718706,64,FLEN)
NAN_BOXED(9213479617676662799,64,FLEN)
NAN_BOXED(9216464239055981095,64,FLEN)
NAN_BOXED(4604945840349382158,64,FLEN)
NAN_BOXED(9214824647267812956,64,FLEN)
NAN_BOXED(9216471190272336104,64,FLEN)
NAN_BOXED(4607663350373312492,64,FLEN)
NAN_BOXED(9217177055584955531,64,FLEN)
NAN_BOXED(9216497637256411939,64,FLEN)
NAN_BOXED(4599837725706078650,64,FLEN)
NAN_BOXED(9209900753122576305,64,FLEN)
NAN_BOXED(9216525021509945303,64,FLEN)
NAN_BOXED(4608618465540969673,64,FLEN)
NAN_BOXED(9218649878385091425,64,FLEN)
NAN_BOXED(9216555543899243550,64,FLEN)
NAN_BOXED(4601050204822961847,64,FLEN)
NAN_BOXED(9210841529981607393,64,FLEN)
NAN_BOXED(9216613553417192096,64,FLEN)
NAN_BOXED(4603134825918057571,64,FLEN)
NAN_BOXED(9212793651641453901,64,FLEN)
NAN_BOXED(9216617902563400289,64,FLEN)
NAN_BOXED(4603915126151329932,64,FLEN)
NAN_BOXED(9213969110706991563,64,FLEN)
NAN_BOXED(9216621506977528425,64,FLEN)
NAN_BOXED(4606066367134120295,64,FLEN)
NAN_BOXED(9215783864856885879,64,FLEN)
NAN_BOXED(9216640668704564724,64,FLEN)
NAN_BOXED(4605887858019741640,64,FLEN)
NAN_BOXED(9215666294219233448,64,FLEN)
NAN_BOXED(9216702190089064444,64,FLEN)
NAN_BOXED(4600549147278224246,64,FLEN)
NAN_BOXED(9210581108374160453,64,FLEN)
NAN_BOXED(9216747880109013044,64,FLEN)
NAN_BOXED(4604925880668135732,64,FLEN)
NAN_BOXED(9215022596794878028,64,FLEN)
NAN_BOXED(9216769490538192529,64,FLEN)
NAN_BOXED(4605420883819490745,64,FLEN)
NAN_BOXED(9215418445867776727,64,FLEN)
NAN_BOXED(9216817147565840213,64,FLEN)
NAN_BOXED(4604096896936333612,64,FLEN)
NAN_BOXED(9214434319061157683,64,FLEN)
NAN_BOXED(9216922305882310984,64,FLEN)
NAN_BOXED(4607832106967002687,64,FLEN)
NAN_BOXED(9217940933790372918,64,FLEN)
NAN_BOXED(9216962181104011780,64,FLEN)
NAN_BOXED(4608229725602664503,64,FLEN)
NAN_BOXED(9218613497087225079,64,FLEN)
NAN_BOXED(9217016372246615237,64,FLEN)
NAN_BOXED(4606100880125645823,64,FLEN)
NAN_BOXED(9216157220115221415,64,FLEN)
NAN_BOXED(9217046258769185616,64,FLEN)
NAN_BOXED(4606624255483183894,64,FLEN)
NAN_BOXED(9216601013257691774,64,FLEN)
NAN_BOXED(9217109129503471413,64,FLEN)
NAN_BOXED(4607304045207350168,64,FLEN)
NAN_BOXED(9217304869595968113,64,FLEN)
NAN_BOXED(9217170681469817377,64,FLEN)
NAN_BOXED(4608144809461831601,64,FLEN)
NAN_BOXED(9218732663161521579,64,FLEN)
NAN_BOXED(9217232125849914623,64,FLEN)
NAN_BOXED(4606318828784140195,64,FLEN)
NAN_BOXED(9216525421690395418,64,FLEN)
NAN_BOXED(9217237414850442593,64,FLEN)
NAN_BOXED(4602928686259343099,64,FLEN)
NAN_BOXED(9213143057602480131,64,FLEN)
NAN_BOXED(9217237944828998817,64,FLEN)
NAN_BOXED(4599360027026822128,64,FLEN)
NAN_BOXED(9210016324195934609,64,FLEN)
NAN_BOXED(9217240654717442729,64,FLEN)
NAN_BOXED(4607428161163128373,64,FLEN)
NAN_BOXED(9217643318244240576,64,FLEN)
NAN_BOXED(9217246219859314431,64,FLEN)
NAN_BOXED(4607996521613095668,64,FLEN)
NAN_BOXED(9218581181895441105,64,FLEN)
NAN_BOXED(9217249096019399686,64,FLEN)
NAN_BOXED(4603761987075986772,64,FLEN)
NAN_BOXED(9214443599735703306,64,FLEN)
NAN_BOXED(9217264478298068492,64,FLEN)
NAN_BOXED(4599909194709036421,64,FLEN)
NAN_BOXED(9210484455674455897,64,FLEN)
NAN_BOXED(9217297484456167346,64,FLEN)
NAN_BOXED(4607345378945625762,64,FLEN)
NAN_BOXED(9217566560730702612,64,FLEN)
NAN_BOXED(9217302582941114735,64,FLEN)
NAN_BOXED(4598273419348035444,64,FLEN)
NAN_BOXED(9208457640251926923,64,FLEN)
NAN_BOXED(9217326903516768902,64,FLEN)
NAN_BOXED(4596185455518937039,64,FLEN)
NAN_BOXED(9206670477647603707,64,FLEN)
NAN_BOXED(9217419276096885081,64,FLEN)
NAN_BOXED(4594322220872692436,64,FLEN)
NAN_BOXED(9205000329783116119,64,FLEN)
NAN_BOXED(9217426995139303327,64,FLEN)
NAN_BOXED(4607743853244925279,64,FLEN)
NAN_BOXED(9218370168828488437,64,FLEN)
NAN_BOXED(9217427283395626197,64,FLEN)
NAN_BOXED(4595049913182554175,64,FLEN)
NAN_BOXED(9205794827473161115,64,FLEN)
NAN_BOXED(9217431208227632191,64,FLEN)
NAN_BOXED(4603313879855927303,64,FLEN)
NAN_BOXED(9213995063720675897,64,FLEN)
NAN_BOXED(9217507782024218651,64,FLEN)
NAN_BOXED(4607947216515109585,64,FLEN)
NAN_BOXED(9218806312067484269,64,FLEN)
NAN_BOXED(9217541035453305947,64,FLEN)
NAN_BOXED(4606690660776931829,64,FLEN)
NAN_BOXED(9217121748400808457,64,FLEN)
NAN_BOXED(9217593634437226233,64,FLEN)
NAN_BOXED(4599748881162666051,64,FLEN)
NAN_BOXED(9210574775441319313,64,FLEN)
NAN_BOXED(9217633202072780763,64,FLEN)
NAN_BOXED(4598180393067113613,64,FLEN)
NAN_BOXED(9208634930882103347,64,FLEN)
NAN_BOXED(9217637378542088669,64,FLEN)
NAN_BOXED(4605438744812321910,64,FLEN)
NAN_BOXED(9216132021143846146,64,FLEN)
NAN_BOXED(9217702345587430884,64,FLEN)
NAN_BOXED(4605113134183537445,64,FLEN)
NAN_BOXED(9215900955065858935,64,FLEN)
NAN_BOXED(9217723541013612025,64,FLEN)
NAN_BOXED(4582859096168896668,64,FLEN)
NAN_BOXED(9193629691398431071,64,FLEN)
NAN_BOXED(9217738152473061548,64,FLEN)
NAN_BOXED(4606393051263539538,64,FLEN)
NAN_BOXED(9217047840155283898,64,FLEN)
NAN_BOXED(9217746841066929770,64,FLEN)
NAN_BOXED(4600127491958779753,64,FLEN)
NAN_BOXED(9211009611073098257,64,FLEN)
NAN_BOXED(9217813089214041207,64,FLEN)
NAN_BOXED(4607614560296626427,64,FLEN)
NAN_BOXED(9218576106618025507,64,FLEN)
NAN_BOXED(9217826003032585507,64,FLEN)
NAN_BOXED(4606445922406015882,64,FLEN)
NAN_BOXED(9217174743903104865,64,FLEN)
NAN_BOXED(9217849382155805118,64,FLEN)
NAN_BOXED(4605318490664667737,64,FLEN)
NAN_BOXED(9216196334824322042,64,FLEN)
NAN_BOXED(9217895140495805169,64,FLEN)
NAN_BOXED(4604510276295880208,64,FLEN)
NAN_BOXED(9215511743415421931,64,FLEN)
NAN_BOXED(9217910638015299867,64,FLEN)
NAN_BOXED(4597200958293854372,64,FLEN)
NAN_BOXED(9208032777599753871,64,FLEN)
NAN_BOXED(9217928954994199837,64,FLEN)
NAN_BOXED(4602934445004097650,64,FLEN)
NAN_BOXED(9213883281701800509,64,FLEN)
NAN_BOXED(9217963511030473227,64,FLEN)
NAN_BOXED(4605985205990305092,64,FLEN)
NAN_BOXED(9216886578588072769,64,FLEN)
NAN_BOXED(9217981827647908452,64,FLEN)
NAN_BOXED(4599462835606097427,64,FLEN)
NAN_BOXED(9210578804769461279,64,FLEN)
NAN_BOXED(9218011421095003577,64,FLEN)
NAN_BOXED(4606203408998295194,64,FLEN)
NAN_BOXED(9217125562024171849,64,FLEN)
NAN_BOXED(9218024096876778111,64,FLEN)
NAN_BOXED(4607630740221826320,64,FLEN)
NAN_BOXED(9218836687873472580,64,FLEN)
NAN_BOXED(9218055781928000591,64,FLEN)
NAN_BOXED(4605920366860796249,64,FLEN)
NAN_BOXED(9216907595927294364,64,FLEN)
NAN_BOXED(9218080199533454273,64,FLEN)
NAN_BOXED(4602422258701848981,64,FLEN)
NAN_BOXED(9213342491545885521,64,FLEN)
NAN_BOXED(9218205497093025884,64,FLEN)
NAN_BOXED(4605107811551322766,64,FLEN)
NAN_BOXED(9216283583303123135,64,FLEN)
NAN_BOXED(9218208903495634831,64,FLEN)
NAN_BOXED(4594117294484861583,64,FLEN)
NAN_BOXED(9205440912438292931,64,FLEN)
NAN_BOXED(9218279752262600941,64,FLEN)
NAN_BOXED(4592858329274876410,64,FLEN)
NAN_BOXED(9204008817104319935,64,FLEN)
NAN_BOXED(9218301174638476198,64,FLEN)
NAN_BOXED(4607427620826963429,64,FLEN)
NAN_BOXED(9218760693634164858,64,FLEN)
NAN_BOXED(9218334303991591903,64,FLEN)
NAN_BOXED(4603434081091979341,64,FLEN)
NAN_BOXED(9214808245339705721,64,FLEN)
NAN_BOXED(9218341431038260335,64,FLEN)
NAN_BOXED(4605080029680031253,64,FLEN)
NAN_BOXED(9216362051529462761,64,FLEN)
NAN_BOXED(9218347646265463715,64,FLEN)
NAN_BOXED(4598634998588917103,64,FLEN)
NAN_BOXED(9210034037381520559,64,FLEN)
NAN_BOXED(9218442760022929103,64,FLEN)
NAN_BOXED(4594182609335120243,64,FLEN)
NAN_BOXED(9205631639972438739,64,FLEN)
NAN_BOXED(9218445980897149143,64,FLEN)
NAN_BOXED(4604700691679246351,64,FLEN)
NAN_BOXED(9216080651926622881,64,FLEN)
NAN_BOXED(9218453597832839455,64,FLEN)
NAN_BOXED(4606188547769584787,64,FLEN)
NAN_BOXED(9217505500948718097,64,FLEN)
NAN_BOXED(9218463118947379008,64,FLEN)
NAN_BOXED(4600549831234560271,64,FLEN)
NAN_BOXED(9211926334495060267,64,FLEN)
NAN_BOXED(9218476759855434540,64,FLEN)
NAN_BOXED(4602094422454982639,64,FLEN)
NAN_BOXED(9213414175957053775,64,FLEN)
NAN_BOXED(9218487713759250974,64,FLEN)
NAN_BOXED(4594845499167866110,64,FLEN)
NAN_BOXED(9206291537398589375,64,FLEN)
NAN_BOXED(9218577371948435944,64,FLEN)
NAN_BOXED(4593854545784947818,64,FLEN)
NAN_BOXED(9205389120371486947,64,FLEN)
NAN_BOXED(9218606239253515660,64,FLEN)
NAN_BOXED(4604202419467268389,64,FLEN)
NAN_BOXED(9215712987173174546,64,FLEN)
NAN_BOXED(9218613148781848068,64,FLEN)
NAN_BOXED(4601010413622674386,64,FLEN)
NAN_BOXED(9212488430740868481,64,FLEN)
NAN_BOXED(9218618407481227687,64,FLEN)
NAN_BOXED(4598275367408666865,64,FLEN)
NAN_BOXED(9209805943968602979,64,FLEN)
NAN_BOXED(9218621847114910869,64,FLEN)
NAN_BOXED(4603241518510092941,64,FLEN)
NAN_BOXED(9214788836860316791,64,FLEN)
NAN_BOXED(9218654562232197957,64,FLEN)
NAN_BOXED(4587037375882827190,64,FLEN)
NAN_BOXED(9198560111241487807,64,FLEN)
NAN_BOXED(9218654932165229637,64,FLEN)
NAN_BOXED(4598472201076471902,64,FLEN)
NAN_BOXED(9210044427374946979,64,FLEN)
NAN_BOXED(9218671411379825196,64,FLEN)
NAN_BOXED(4606796840554908590,64,FLEN)
NAN_BOXED(9218294267374750652,64,FLEN)
NAN_BOXED(9218689868128515370,64,FLEN)
NAN_BOXED(4593344031184727985,64,FLEN)
NAN_BOXED(9204857975009820911,64,FLEN)
NAN_BOXED(9218691048935898577,64,FLEN)
NAN_BOXED(4604214300014053202,64,FLEN)
NAN_BOXED(9215781384449161082,64,FLEN)
NAN_BOXED(9218730889053867299,64,FLEN)
NAN_BOXED(4594636506537442819,64,FLEN)
NAN_BOXED(9206239016176581819,64,FLEN)
NAN_BOXED(9218777207402126438,64,FLEN)
NAN_BOXED(4605749935404232945,64,FLEN)
NAN_BOXED(9217359232979244236,64,FLEN)
NAN_BOXED(9218857561086417386,64,FLEN)
NAN_BOXED(4603488466791879985,64,FLEN)
NAN_BOXED(9215168069503958010,64,FLEN)
NAN_BOXED(9164424625506926591,64,FLEN)
NAN_BOXED(4648914789082017225,64,FLEN)
NAN_BOXED(9206303932259106167,64,FLEN)
NAN_BOXED(9174258341432718335,64,FLEN)
NAN_BOXED(4644988421128352304,64,FLEN)
NAN_BOXED(9212232412118634191,64,FLEN)
NAN_BOXED(9177359547968022015,64,FLEN)
NAN_BOXED(4646291853049369096,64,FLEN)
NAN_BOXED(9216623249068811298,64,FLEN)
NAN_BOXED(9182869883444329087,64,FLEN)
NAN_BOXED(4641354287497260511,64,FLEN)
NAN_BOXED(9217059525458748881,64,FLEN)
NAN_BOXED(9183055643955042431,64,FLEN)
NAN_BOXED(4636902076792189568,64,FLEN)
NAN_BOXED(9212904707570718623,64,FLEN)
NAN_BOXED(9184043614811200767,64,FLEN)
NAN_BOXED(4632706806350522318,64,FLEN)
NAN_BOXED(9210116478325051009,64,FLEN)
NAN_BOXED(9192388555720179583,64,FLEN)
NAN_BOXED(4628073555754768199,64,FLEN)
NAN_BOXED(9213625721654384967,64,FLEN)
NAN_BOXED(9192555015971156927,64,FLEN)
NAN_BOXED(4625853512979331702,64,FLEN)
NAN_BOXED(9211329373425349723,64,FLEN)
NAN_BOXED(9193846561076358143,64,FLEN)
NAN_BOXED(4626452916495974015,64,FLEN)
NAN_BOXED(9213674801222647183,64,FLEN)
NAN_BOXED(9194000128200178719,64,FLEN)
NAN_BOXED(4630991800749346367,64,FLEN)
NAN_BOXED(9218426954515930771,64,FLEN)
NAN_BOXED(9194693369991797183,64,FLEN)
NAN_BOXED(4630022192379406036,64,FLEN)
NAN_BOXED(9217736523910541707,64,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_2:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_3:
    .fill 182*((SIGALIGN)/4),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*XLEN/32,4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

RVMODEL_DATA_END
