
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 15:29:07 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32D/fnmsub.d.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fnmsub.d instruction of the RISC-V RV32FD_Zicsr,RV64FD_Zicsr extension for the fnmsub.d_b8 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IFD_Zicsr,RV64IFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*D.*);def TEST_CASE_1=True;",fnmsub.d_b8)

RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_0:
// rs1 == rs3 != rs2 and rs1 == rs3 != rd and rd != rs2, rs1==f4, rs2==f28, rs3==f4, rd==f7,fs1 == 0 and fe1 == 0x3f4 and fm1 == 0xc8e57e5f2a800 and fs2 == 1 and fe2 == 0x408 and fm2 == 0xc59b860a75fe7 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x94c9d5665ac38 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f4; op2:f28; op3:f4; dest:f7; op1val:0x3f4c8e57e5f2a800; op2val:0xc08c59b860a75fe7;
op3val:0x3f4c8e57e5f2a800; valaddr_reg:x3; val_offset:0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f7, f4, f28, f4, dyn, 0, 0, x3, 0*FLEN/8, x4, x1, x2)

inst_1:
// rs1 == rs2 == rs3 != rd, rs1==f13, rs2==f13, rs3==f13, rd==f26,fs1 == 0 and fe1 == 0x3f4 and fm1 == 0xc8e57e5f2a800 and fs2 == 1 and fe2 == 0x408 and fm2 == 0xc59b860a75fe7 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x94c9d5665ac38 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f13; op2:f13; op3:f13; dest:f26; op1val:0x3f4c8e57e5f2a800; op2val:0x3f4c8e57e5f2a800;
op3val:0x3f4c8e57e5f2a800; valaddr_reg:x3; val_offset:3*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmsub.d, f26, f13, f13, f13, dyn, 32, 0, x3, 3*FLEN/8, x4, x1, x2)

inst_2:
// rs1 == rs2 == rd != rs3, rs1==f1, rs2==f1, rs3==f11, rd==f1,fs1 == 0 and fe1 == 0x3f4 and fm1 == 0xc8e57e5f2a800 and fs2 == 1 and fe2 == 0x408 and fm2 == 0xc59b860a75fe7 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x94c9d5665ac38 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f1; op2:f1; op3:f11; dest:f1; op1val:0x3f4c8e57e5f2a800; op2val:0x3f4c8e57e5f2a800;
op3val:0x3fe94c9d5665ac38; valaddr_reg:x3; val_offset:6*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmsub.d, f1, f1, f1, f11, dyn, 64, 0, x3, 6*FLEN/8, x4, x1, x2)

inst_3:
// rs1 == rd != rs2 and rs1 == rd != rs3 and rs3 != rs2, rs1==f27, rs2==f10, rs3==f31, rd==f27,fs1 == 0 and fe1 == 0x3f4 and fm1 == 0xc8e57e5f2a800 and fs2 == 1 and fe2 == 0x408 and fm2 == 0xc59b860a75fe7 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x94c9d5665ac38 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f27; op2:f10; op3:f31; dest:f27; op1val:0x3f4c8e57e5f2a800; op2val:0xc08c59b860a75fe7;
op3val:0x3fe94c9d5665ac38; valaddr_reg:x3; val_offset:9*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f27, f27, f10, f31, dyn, 96, 0, x3, 9*FLEN/8, x4, x1, x2)

inst_4:
// rs2 == rs3 != rs1 and rs2 == rs3 != rd and rd != rs1, rs1==f29, rs2==f30, rs3==f30, rd==f28,fs1 == 0 and fe1 == 0x3f4 and fm1 == 0xc8e57e5f2a800 and fs2 == 1 and fe2 == 0x408 and fm2 == 0xc59b860a75fe7 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x94c9d5665ac38 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f29; op2:f30; op3:f30; dest:f28; op1val:0x3f4c8e57e5f2a800; op2val:0xc08c59b860a75fe7;
op3val:0xc08c59b860a75fe7; valaddr_reg:x3; val_offset:12*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmsub.d, f28, f29, f30, f30, dyn, 128, 0, x3, 12*FLEN/8, x4, x1, x2)

inst_5:
// rd == rs2 == rs3 != rs1, rs1==f15, rs2==f0, rs3==f0, rd==f0,fs1 == 0 and fe1 == 0x3f4 and fm1 == 0xe3a97f64cf800 and fs2 == 1 and fe2 == 0x409 and fm2 == 0x04444ccc6e171 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xebb92f80c666f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f15; op2:f0; op3:f0; dest:f0; op1val:0x3f4e3a97f64cf800; op2val:0xc0904444ccc6e171;
op3val:0xc0904444ccc6e171; valaddr_reg:x3; val_offset:15*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f0, f15, f0, f0, dyn, 0, 0, x3, 15*FLEN/8, x4, x1, x2)

inst_6:
// rs1 == rd == rs3 != rs2, rs1==f16, rs2==f24, rs3==f16, rd==f16,fs1 == 0 and fe1 == 0x3f4 and fm1 == 0xe3a97f64cf800 and fs2 == 1 and fe2 == 0x409 and fm2 == 0x04444ccc6e171 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xebb92f80c666f and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f16; op2:f24; op3:f16; dest:f16; op1val:0x3f4e3a97f64cf800; op2val:0xc0904444ccc6e171;
op3val:0x3f4e3a97f64cf800; valaddr_reg:x3; val_offset:18*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmsub.d, f16, f16, f24, f16, dyn, 32, 0, x3, 18*FLEN/8, x4, x1, x2)

inst_7:
// rs2 == rd != rs1 and rs2 == rd != rs3 and rs3 != rs1, rs1==f8, rs2==f29, rs3==f27, rd==f29,fs1 == 0 and fe1 == 0x3f4 and fm1 == 0xe3a97f64cf800 and fs2 == 1 and fe2 == 0x409 and fm2 == 0x04444ccc6e171 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xebb92f80c666f and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f8; op2:f29; op3:f27; dest:f29; op1val:0x3f4e3a97f64cf800; op2val:0xc0904444ccc6e171;
op3val:0x3feebb92f80c666f; valaddr_reg:x3; val_offset:21*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmsub.d, f29, f8, f29, f27, dyn, 64, 0, x3, 21*FLEN/8, x4, x1, x2)

inst_8:
// rs3 == rd != rs1 and rs3 == rd != rs2 and rs2 != rs1, rs1==f6, rs2==f19, rs3==f20, rd==f20,fs1 == 0 and fe1 == 0x3f4 and fm1 == 0xe3a97f64cf800 and fs2 == 1 and fe2 == 0x409 and fm2 == 0x04444ccc6e171 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xebb92f80c666f and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f6; op2:f19; op3:f20; dest:f20; op1val:0x3f4e3a97f64cf800; op2val:0xc0904444ccc6e171;
op3val:0x3feebb92f80c666f; valaddr_reg:x3; val_offset:24*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f20, f6, f19, f20, dyn, 96, 0, x3, 24*FLEN/8, x4, x1, x2)

inst_9:
// rs1 != rs2 and rs1 != rd and rs1 != rs3 and rs2 != rs3 and rs2 != rd and rs3 != rd, rs1==f0, rs2==f26, rs3==f29, rd==f23,fs1 == 0 and fe1 == 0x3f4 and fm1 == 0xe3a97f64cf800 and fs2 == 1 and fe2 == 0x409 and fm2 == 0x04444ccc6e171 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xebb92f80c666f and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f0; op2:f26; op3:f29; dest:f23; op1val:0x3f4e3a97f64cf800; op2val:0xc0904444ccc6e171;
op3val:0x3feebb92f80c666f; valaddr_reg:x3; val_offset:27*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmsub.d, f23, f0, f26, f29, dyn, 128, 0, x3, 27*FLEN/8, x4, x1, x2)

inst_10:
// rs1 == rs2 == rs3 == rd, rs1==f3, rs2==f3, rs3==f3, rd==f3,fs1 == 0 and fe1 == 0x3f5 and fm1 == 0x37c8c71046800 and fs2 == 1 and fe2 == 0x408 and fm2 == 0x306070bc01f37 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x72b3e0facabc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f3; op2:f3; op3:f3; dest:f3; op1val:0x3f537c8c71046800; op2val:0x3f537c8c71046800;
op3val:0x3f537c8c71046800; valaddr_reg:x3; val_offset:30*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f3, f3, f3, f3, dyn, 0, 0, x3, 30*FLEN/8, x4, x1, x2)

inst_11:
// rs1 == rs2 != rs3 and rs1 == rs2 != rd and rd != rs3, rs1==f12, rs2==f12, rs3==f17, rd==f30,fs1 == 0 and fe1 == 0x3f5 and fm1 == 0x37c8c71046800 and fs2 == 1 and fe2 == 0x408 and fm2 == 0x306070bc01f37 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x72b3e0facabc0 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f12; op2:f12; op3:f17; dest:f30; op1val:0x3f537c8c71046800; op2val:0x3f537c8c71046800;
op3val:0x3fe72b3e0facabc0; valaddr_reg:x3; val_offset:33*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmsub.d, f30, f12, f12, f17, dyn, 32, 0, x3, 33*FLEN/8, x4, x1, x2)

inst_12:
// rs1==f9, rs2==f27, rs3==f26, rd==f8,fs1 == 0 and fe1 == 0x3f5 and fm1 == 0x37c8c71046800 and fs2 == 1 and fe2 == 0x408 and fm2 == 0x306070bc01f37 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x72b3e0facabc0 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f9; op2:f27; op3:f26; dest:f8; op1val:0x3f537c8c71046800; op2val:0xc08306070bc01f37;
op3val:0x3fe72b3e0facabc0; valaddr_reg:x3; val_offset:36*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmsub.d, f8, f9, f27, f26, dyn, 64, 0, x3, 36*FLEN/8, x4, x1, x2)

inst_13:
// rs1==f26, rs2==f9, rs3==f2, rd==f6,fs1 == 0 and fe1 == 0x3f5 and fm1 == 0x37c8c71046800 and fs2 == 1 and fe2 == 0x408 and fm2 == 0x306070bc01f37 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x72b3e0facabc0 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f26; op2:f9; op3:f2; dest:f6; op1val:0x3f537c8c71046800; op2val:0xc08306070bc01f37;
op3val:0x3fe72b3e0facabc0; valaddr_reg:x3; val_offset:39*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f6, f26, f9, f2, dyn, 96, 0, x3, 39*FLEN/8, x4, x1, x2)

inst_14:
// rs1==f18, rs2==f23, rs3==f10, rd==f15,fs1 == 0 and fe1 == 0x3f5 and fm1 == 0x37c8c71046800 and fs2 == 1 and fe2 == 0x408 and fm2 == 0x306070bc01f37 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x72b3e0facabc0 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f18; op2:f23; op3:f10; dest:f15; op1val:0x3f537c8c71046800; op2val:0xc08306070bc01f37;
op3val:0x3fe72b3e0facabc0; valaddr_reg:x3; val_offset:42*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmsub.d, f15, f18, f23, f10, dyn, 128, 0, x3, 42*FLEN/8, x4, x1, x2)

inst_15:
// rs1==f7, rs2==f14, rs3==f1, rd==f11,fs1 == 0 and fe1 == 0x3f6 and fm1 == 0x5a73773352100 and fs2 == 1 and fe2 == 0x403 and fm2 == 0xa02fc031e4a91 and fs3 == 0 and fe3 == 0x3fb and fm3 == 0x199e2080335d0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f7; op2:f14; op3:f1; dest:f11; op1val:0x3f65a73773352100; op2val:0xc03a02fc031e4a91;
op3val:0x3fb199e2080335d0; valaddr_reg:x3; val_offset:45*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f11, f7, f14, f1, dyn, 0, 0, x3, 45*FLEN/8, x4, x1, x2)

inst_16:
// rs1==f21, rs2==f25, rs3==f18, rd==f14,fs1 == 0 and fe1 == 0x3f6 and fm1 == 0x5a73773352100 and fs2 == 1 and fe2 == 0x403 and fm2 == 0xa02fc031e4a91 and fs3 == 0 and fe3 == 0x3fb and fm3 == 0x199e2080335d0 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f21; op2:f25; op3:f18; dest:f14; op1val:0x3f65a73773352100; op2val:0xc03a02fc031e4a91;
op3val:0x3fb199e2080335d0; valaddr_reg:x3; val_offset:48*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmsub.d, f14, f21, f25, f18, dyn, 32, 0, x3, 48*FLEN/8, x4, x1, x2)

inst_17:
// rs1==f20, rs2==f5, rs3==f8, rd==f19,fs1 == 0 and fe1 == 0x3f6 and fm1 == 0x5a73773352100 and fs2 == 1 and fe2 == 0x403 and fm2 == 0xa02fc031e4a91 and fs3 == 0 and fe3 == 0x3fb and fm3 == 0x199e2080335d0 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f20; op2:f5; op3:f8; dest:f19; op1val:0x3f65a73773352100; op2val:0xc03a02fc031e4a91;
op3val:0x3fb199e2080335d0; valaddr_reg:x3; val_offset:51*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmsub.d, f19, f20, f5, f8, dyn, 64, 0, x3, 51*FLEN/8, x4, x1, x2)

inst_18:
// rs1==f5, rs2==f22, rs3==f28, rd==f12,fs1 == 0 and fe1 == 0x3f6 and fm1 == 0x5a73773352100 and fs2 == 1 and fe2 == 0x403 and fm2 == 0xa02fc031e4a91 and fs3 == 0 and fe3 == 0x3fb and fm3 == 0x199e2080335d0 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f5; op2:f22; op3:f28; dest:f12; op1val:0x3f65a73773352100; op2val:0xc03a02fc031e4a91;
op3val:0x3fb199e2080335d0; valaddr_reg:x3; val_offset:54*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f12, f5, f22, f28, dyn, 96, 0, x3, 54*FLEN/8, x4, x1, x2)

inst_19:
// rs1==f10, rs2==f16, rs3==f19, rd==f13,fs1 == 0 and fe1 == 0x3f6 and fm1 == 0x5a73773352100 and fs2 == 1 and fe2 == 0x403 and fm2 == 0xa02fc031e4a91 and fs3 == 0 and fe3 == 0x3fb and fm3 == 0x199e2080335d0 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f10; op2:f16; op3:f19; dest:f13; op1val:0x3f65a73773352100; op2val:0xc03a02fc031e4a91;
op3val:0x3fb199e2080335d0; valaddr_reg:x3; val_offset:57*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmsub.d, f13, f10, f16, f19, dyn, 128, 0, x3, 57*FLEN/8, x4, x1, x2)

inst_20:
// rs1==f17, rs2==f6, rs3==f25, rd==f31,fs1 == 0 and fe1 == 0x3f7 and fm1 == 0xe024edb715280 and fs2 == 1 and fe2 == 0x405 and fm2 == 0xd4fed36142bb2 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xb7d0b9d5b4b45 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f17; op2:f6; op3:f25; dest:f31; op1val:0x3f7e024edb715280; op2val:0xc05d4fed36142bb2;
op3val:0x3feb7d0b9d5b4b45; valaddr_reg:x3; val_offset:60*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f17, f6, f25, dyn, 0, 0, x3, 60*FLEN/8, x4, x1, x2)

inst_21:
// rs1==f28, rs2==f7, rs3==f14, rd==f5,fs1 == 0 and fe1 == 0x3f7 and fm1 == 0xe024edb715280 and fs2 == 1 and fe2 == 0x405 and fm2 == 0xd4fed36142bb2 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xb7d0b9d5b4b45 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f28; op2:f7; op3:f14; dest:f5; op1val:0x3f7e024edb715280; op2val:0xc05d4fed36142bb2;
op3val:0x3feb7d0b9d5b4b45; valaddr_reg:x3; val_offset:63*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmsub.d, f5, f28, f7, f14, dyn, 32, 0, x3, 63*FLEN/8, x4, x1, x2)

inst_22:
// rs1==f24, rs2==f8, rs3==f9, rd==f22,fs1 == 0 and fe1 == 0x3f7 and fm1 == 0xe024edb715280 and fs2 == 1 and fe2 == 0x405 and fm2 == 0xd4fed36142bb2 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xb7d0b9d5b4b45 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f24; op2:f8; op3:f9; dest:f22; op1val:0x3f7e024edb715280; op2val:0xc05d4fed36142bb2;
op3val:0x3feb7d0b9d5b4b45; valaddr_reg:x3; val_offset:66*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmsub.d, f22, f24, f8, f9, dyn, 64, 0, x3, 66*FLEN/8, x4, x1, x2)

inst_23:
// rs1==f14, rs2==f20, rs3==f7, rd==f10,fs1 == 0 and fe1 == 0x3f7 and fm1 == 0xe024edb715280 and fs2 == 1 and fe2 == 0x405 and fm2 == 0xd4fed36142bb2 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xb7d0b9d5b4b45 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f14; op2:f20; op3:f7; dest:f10; op1val:0x3f7e024edb715280; op2val:0xc05d4fed36142bb2;
op3val:0x3feb7d0b9d5b4b45; valaddr_reg:x3; val_offset:69*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f10, f14, f20, f7, dyn, 96, 0, x3, 69*FLEN/8, x4, x1, x2)

inst_24:
// rs1==f2, rs2==f17, rs3==f23, rd==f18,fs1 == 0 and fe1 == 0x3f7 and fm1 == 0xe024edb715280 and fs2 == 1 and fe2 == 0x405 and fm2 == 0xd4fed36142bb2 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xb7d0b9d5b4b45 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f2; op2:f17; op3:f23; dest:f18; op1val:0x3f7e024edb715280; op2val:0xc05d4fed36142bb2;
op3val:0x3feb7d0b9d5b4b45; valaddr_reg:x3; val_offset:72*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmsub.d, f18, f2, f17, f23, dyn, 128, 0, x3, 72*FLEN/8, x4, x1, x2)

inst_25:
// rs1==f25, rs2==f31, rs3==f21, rd==f4,fs1 == 0 and fe1 == 0x3f8 and fm1 == 0x389c62efde540 and fs2 == 1 and fe2 == 0x404 and fm2 == 0x6030a08cc03f7 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xae126969fccc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f25; op2:f31; op3:f21; dest:f4; op1val:0x3f8389c62efde540; op2val:0xc046030a08cc03f7;
op3val:0x3fdae126969fccc0; valaddr_reg:x3; val_offset:75*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f4, f25, f31, f21, dyn, 0, 0, x3, 75*FLEN/8, x4, x1, x2)

inst_26:
// rs1==f30, rs2==f2, rs3==f15, rd==f21,fs1 == 0 and fe1 == 0x3f8 and fm1 == 0x389c62efde540 and fs2 == 1 and fe2 == 0x404 and fm2 == 0x6030a08cc03f7 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xae126969fccc0 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f2; op3:f15; dest:f21; op1val:0x3f8389c62efde540; op2val:0xc046030a08cc03f7;
op3val:0x3fdae126969fccc0; valaddr_reg:x3; val_offset:78*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmsub.d, f21, f30, f2, f15, dyn, 32, 0, x3, 78*FLEN/8, x4, x1, x2)

inst_27:
// rs1==f31, rs2==f15, rs3==f24, rd==f2,fs1 == 0 and fe1 == 0x3f8 and fm1 == 0x389c62efde540 and fs2 == 1 and fe2 == 0x404 and fm2 == 0x6030a08cc03f7 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xae126969fccc0 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f31; op2:f15; op3:f24; dest:f2; op1val:0x3f8389c62efde540; op2val:0xc046030a08cc03f7;
op3val:0x3fdae126969fccc0; valaddr_reg:x3; val_offset:81*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmsub.d, f2, f31, f15, f24, dyn, 64, 0, x3, 81*FLEN/8, x4, x1, x2)

inst_28:
// rs1==f22, rs2==f18, rs3==f6, rd==f25,fs1 == 0 and fe1 == 0x3f8 and fm1 == 0x389c62efde540 and fs2 == 1 and fe2 == 0x404 and fm2 == 0x6030a08cc03f7 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xae126969fccc0 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f22; op2:f18; op3:f6; dest:f25; op1val:0x3f8389c62efde540; op2val:0xc046030a08cc03f7;
op3val:0x3fdae126969fccc0; valaddr_reg:x3; val_offset:84*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f25, f22, f18, f6, dyn, 96, 0, x3, 84*FLEN/8, x4, x1, x2)

inst_29:
// rs1==f11, rs2==f21, rs3==f5, rd==f24,fs1 == 0 and fe1 == 0x3f8 and fm1 == 0x389c62efde540 and fs2 == 1 and fe2 == 0x404 and fm2 == 0x6030a08cc03f7 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xae126969fccc0 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f11; op2:f21; op3:f5; dest:f24; op1val:0x3f8389c62efde540; op2val:0xc046030a08cc03f7;
op3val:0x3fdae126969fccc0; valaddr_reg:x3; val_offset:87*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmsub.d, f24, f11, f21, f5, dyn, 128, 0, x3, 87*FLEN/8, x4, x1, x2)

inst_30:
// rs1==f19, rs2==f4, rs3==f12, rd==f9,fs1 == 0 and fe1 == 0x3f8 and fm1 == 0xcfbc304128680 and fs2 == 1 and fe2 == 0x404 and fm2 == 0x6ad68c701133b and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x48a260f932be6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f19; op2:f4; op3:f12; dest:f9; op1val:0x3f8cfbc304128680; op2val:0xc046ad68c701133b;
op3val:0x3fe48a260f932be6; valaddr_reg:x3; val_offset:90*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f9, f19, f4, f12, dyn, 0, 0, x3, 90*FLEN/8, x4, x1, x2)

inst_31:
// rs1==f23, rs2==f11, rs3==f22, rd==f17,fs1 == 0 and fe1 == 0x3f8 and fm1 == 0xcfbc304128680 and fs2 == 1 and fe2 == 0x404 and fm2 == 0x6ad68c701133b and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x48a260f932be6 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f23; op2:f11; op3:f22; dest:f17; op1val:0x3f8cfbc304128680; op2val:0xc046ad68c701133b;
op3val:0x3fe48a260f932be6; valaddr_reg:x3; val_offset:93*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmsub.d, f17, f23, f11, f22, dyn, 32, 0, x3, 93*FLEN/8, x4, x1, x2)

inst_32:
// fs1 == 0 and fe1 == 0x3f8 and fm1 == 0xcfbc304128680 and fs2 == 1 and fe2 == 0x404 and fm2 == 0x6ad68c701133b and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x48a260f932be6 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3f8cfbc304128680; op2val:0xc046ad68c701133b;
op3val:0x3fe48a260f932be6; valaddr_reg:x3; val_offset:96*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 96*FLEN/8, x4, x1, x2)

inst_33:
// fs1 == 0 and fe1 == 0x3f8 and fm1 == 0xcfbc304128680 and fs2 == 1 and fe2 == 0x404 and fm2 == 0x6ad68c701133b and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x48a260f932be6 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3f8cfbc304128680; op2val:0xc046ad68c701133b;
op3val:0x3fe48a260f932be6; valaddr_reg:x3; val_offset:99*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 99*FLEN/8, x4, x1, x2)

inst_34:
// fs1 == 0 and fe1 == 0x3f8 and fm1 == 0xcfbc304128680 and fs2 == 1 and fe2 == 0x404 and fm2 == 0x6ad68c701133b and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x48a260f932be6 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3f8cfbc304128680; op2val:0xc046ad68c701133b;
op3val:0x3fe48a260f932be6; valaddr_reg:x3; val_offset:102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 102*FLEN/8, x4, x1, x2)

inst_35:
// fs1 == 0 and fe1 == 0x3f9 and fm1 == 0x4681eb2a19a80 and fs2 == 1 and fe2 == 0x404 and fm2 == 0x78280a00296da and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xdfc1e273dc491 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3f94681eb2a19a80; op2val:0xc0478280a00296da;
op3val:0x3fedfc1e273dc491; valaddr_reg:x3; val_offset:105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 105*FLEN/8, x4, x1, x2)

inst_36:
// fs1 == 0 and fe1 == 0x3f9 and fm1 == 0x4681eb2a19a80 and fs2 == 1 and fe2 == 0x404 and fm2 == 0x78280a00296da and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xdfc1e273dc491 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3f94681eb2a19a80; op2val:0xc0478280a00296da;
op3val:0x3fedfc1e273dc491; valaddr_reg:x3; val_offset:108*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 108*FLEN/8, x4, x1, x2)

inst_37:
// fs1 == 0 and fe1 == 0x3f9 and fm1 == 0x4681eb2a19a80 and fs2 == 1 and fe2 == 0x404 and fm2 == 0x78280a00296da and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xdfc1e273dc491 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3f94681eb2a19a80; op2val:0xc0478280a00296da;
op3val:0x3fedfc1e273dc491; valaddr_reg:x3; val_offset:111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 111*FLEN/8, x4, x1, x2)

inst_38:
// fs1 == 0 and fe1 == 0x3f9 and fm1 == 0x4681eb2a19a80 and fs2 == 1 and fe2 == 0x404 and fm2 == 0x78280a00296da and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xdfc1e273dc491 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3f94681eb2a19a80; op2val:0xc0478280a00296da;
op3val:0x3fedfc1e273dc491; valaddr_reg:x3; val_offset:114*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 114*FLEN/8, x4, x1, x2)

inst_39:
// fs1 == 0 and fe1 == 0x3f9 and fm1 == 0x4681eb2a19a80 and fs2 == 1 and fe2 == 0x404 and fm2 == 0x78280a00296da and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xdfc1e273dc491 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3f94681eb2a19a80; op2val:0xc0478280a00296da;
op3val:0x3fedfc1e273dc491; valaddr_reg:x3; val_offset:117*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 117*FLEN/8, x4, x1, x2)

inst_40:
// fs1 == 0 and fe1 == 0x3f9 and fm1 == 0xd1d5d3f287280 and fs2 == 1 and fe2 == 0x403 and fm2 == 0x066d622ce8a39 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xdd87e19b07cd2 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3f9d1d5d3f287280; op2val:0xc03066d622ce8a39;
op3val:0x3fddd87e19b07cd2; valaddr_reg:x3; val_offset:120*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 120*FLEN/8, x4, x1, x2)

inst_41:
// fs1 == 0 and fe1 == 0x3f9 and fm1 == 0xd1d5d3f287280 and fs2 == 1 and fe2 == 0x403 and fm2 == 0x066d622ce8a39 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xdd87e19b07cd2 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3f9d1d5d3f287280; op2val:0xc03066d622ce8a39;
op3val:0x3fddd87e19b07cd2; valaddr_reg:x3; val_offset:123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 123*FLEN/8, x4, x1, x2)

inst_42:
// fs1 == 0 and fe1 == 0x3f9 and fm1 == 0xd1d5d3f287280 and fs2 == 1 and fe2 == 0x403 and fm2 == 0x066d622ce8a39 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xdd87e19b07cd2 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3f9d1d5d3f287280; op2val:0xc03066d622ce8a39;
op3val:0x3fddd87e19b07cd2; valaddr_reg:x3; val_offset:126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 126*FLEN/8, x4, x1, x2)

inst_43:
// fs1 == 0 and fe1 == 0x3f9 and fm1 == 0xd1d5d3f287280 and fs2 == 1 and fe2 == 0x403 and fm2 == 0x066d622ce8a39 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xdd87e19b07cd2 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3f9d1d5d3f287280; op2val:0xc03066d622ce8a39;
op3val:0x3fddd87e19b07cd2; valaddr_reg:x3; val_offset:129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 129*FLEN/8, x4, x1, x2)

inst_44:
// fs1 == 0 and fe1 == 0x3f9 and fm1 == 0xd1d5d3f287280 and fs2 == 1 and fe2 == 0x403 and fm2 == 0x066d622ce8a39 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xdd87e19b07cd2 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3f9d1d5d3f287280; op2val:0xc03066d622ce8a39;
op3val:0x3fddd87e19b07cd2; valaddr_reg:x3; val_offset:132*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 132*FLEN/8, x4, x1, x2)

inst_45:
// fs1 == 0 and fe1 == 0x3f9 and fm1 == 0xe909d8dd80760 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0xabe28e71652db and fs3 == 0 and fe3 == 0x3fa and fm3 == 0x98b21bc37ede0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3f9e909d8dd80760; op2val:0xbffabe28e71652db;
op3val:0x3fa98b21bc37ede0; valaddr_reg:x3; val_offset:135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 135*FLEN/8, x4, x1, x2)

inst_46:
// fs1 == 0 and fe1 == 0x3f9 and fm1 == 0xe909d8dd80760 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0xabe28e71652db and fs3 == 0 and fe3 == 0x3fa and fm3 == 0x98b21bc37ede0 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3f9e909d8dd80760; op2val:0xbffabe28e71652db;
op3val:0x3fa98b21bc37ede0; valaddr_reg:x3; val_offset:138*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 138*FLEN/8, x4, x1, x2)

inst_47:
// fs1 == 0 and fe1 == 0x3f9 and fm1 == 0xe909d8dd80760 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0xabe28e71652db and fs3 == 0 and fe3 == 0x3fa and fm3 == 0x98b21bc37ede0 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3f9e909d8dd80760; op2val:0xbffabe28e71652db;
op3val:0x3fa98b21bc37ede0; valaddr_reg:x3; val_offset:141*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 141*FLEN/8, x4, x1, x2)

inst_48:
// fs1 == 0 and fe1 == 0x3f9 and fm1 == 0xe909d8dd80760 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0xabe28e71652db and fs3 == 0 and fe3 == 0x3fa and fm3 == 0x98b21bc37ede0 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3f9e909d8dd80760; op2val:0xbffabe28e71652db;
op3val:0x3fa98b21bc37ede0; valaddr_reg:x3; val_offset:144*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 144*FLEN/8, x4, x1, x2)

inst_49:
// fs1 == 0 and fe1 == 0x3f9 and fm1 == 0xe909d8dd80760 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0xabe28e71652db and fs3 == 0 and fe3 == 0x3fa and fm3 == 0x98b21bc37ede0 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3f9e909d8dd80760; op2val:0xbffabe28e71652db;
op3val:0x3fa98b21bc37ede0; valaddr_reg:x3; val_offset:147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 147*FLEN/8, x4, x1, x2)

inst_50:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0x1b11cf0208210 and fs2 == 1 and fe2 == 0x401 and fm2 == 0x84a699eccc969 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0xadbf357ecaff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fa1b11cf0208210; op2val:0xc0184a699eccc969;
op3val:0x3fcadbf357ecaff0; valaddr_reg:x3; val_offset:150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 150*FLEN/8, x4, x1, x2)

inst_51:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0x1b11cf0208210 and fs2 == 1 and fe2 == 0x401 and fm2 == 0x84a699eccc969 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0xadbf357ecaff0 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fa1b11cf0208210; op2val:0xc0184a699eccc969;
op3val:0x3fcadbf357ecaff0; valaddr_reg:x3; val_offset:153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 153*FLEN/8, x4, x1, x2)

inst_52:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0x1b11cf0208210 and fs2 == 1 and fe2 == 0x401 and fm2 == 0x84a699eccc969 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0xadbf357ecaff0 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fa1b11cf0208210; op2val:0xc0184a699eccc969;
op3val:0x3fcadbf357ecaff0; valaddr_reg:x3; val_offset:156*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 156*FLEN/8, x4, x1, x2)

inst_53:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0x1b11cf0208210 and fs2 == 1 and fe2 == 0x401 and fm2 == 0x84a699eccc969 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0xadbf357ecaff0 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fa1b11cf0208210; op2val:0xc0184a699eccc969;
op3val:0x3fcadbf357ecaff0; valaddr_reg:x3; val_offset:159*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 159*FLEN/8, x4, x1, x2)

inst_54:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0x1b11cf0208210 and fs2 == 1 and fe2 == 0x401 and fm2 == 0x84a699eccc969 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0xadbf357ecaff0 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fa1b11cf0208210; op2val:0xc0184a699eccc969;
op3val:0x3fcadbf357ecaff0; valaddr_reg:x3; val_offset:162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 162*FLEN/8, x4, x1, x2)

inst_55:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0x1d62dc863e290 and fs2 == 1 and fe2 == 0x401 and fm2 == 0xba0d15e845be3 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0xeccb473105928 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fa1d62dc863e290; op2val:0xc01ba0d15e845be3;
op3val:0x3fceccb473105928; valaddr_reg:x3; val_offset:165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 165*FLEN/8, x4, x1, x2)

inst_56:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0x1d62dc863e290 and fs2 == 1 and fe2 == 0x401 and fm2 == 0xba0d15e845be3 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0xeccb473105928 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fa1d62dc863e290; op2val:0xc01ba0d15e845be3;
op3val:0x3fceccb473105928; valaddr_reg:x3; val_offset:168*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 168*FLEN/8, x4, x1, x2)

inst_57:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0x1d62dc863e290 and fs2 == 1 and fe2 == 0x401 and fm2 == 0xba0d15e845be3 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0xeccb473105928 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fa1d62dc863e290; op2val:0xc01ba0d15e845be3;
op3val:0x3fceccb473105928; valaddr_reg:x3; val_offset:171*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 171*FLEN/8, x4, x1, x2)

inst_58:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0x1d62dc863e290 and fs2 == 1 and fe2 == 0x401 and fm2 == 0xba0d15e845be3 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0xeccb473105928 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fa1d62dc863e290; op2val:0xc01ba0d15e845be3;
op3val:0x3fceccb473105928; valaddr_reg:x3; val_offset:174*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 174*FLEN/8, x4, x1, x2)

inst_59:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0x1d62dc863e290 and fs2 == 1 and fe2 == 0x401 and fm2 == 0xba0d15e845be3 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0xeccb473105928 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fa1d62dc863e290; op2val:0xc01ba0d15e845be3;
op3val:0x3fceccb473105928; valaddr_reg:x3; val_offset:177*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 177*FLEN/8, x4, x1, x2)

inst_60:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0x1dac507dc8ef0 and fs2 == 1 and fe2 == 0x403 and fm2 == 0x993f4cfb1d314 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xc8aeefe825660 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fa1dac507dc8ef0; op2val:0xc03993f4cfb1d314;
op3val:0x3fec8aeefe825660; valaddr_reg:x3; val_offset:180*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 180*FLEN/8, x4, x1, x2)

inst_61:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0x1dac507dc8ef0 and fs2 == 1 and fe2 == 0x403 and fm2 == 0x993f4cfb1d314 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xc8aeefe825660 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fa1dac507dc8ef0; op2val:0xc03993f4cfb1d314;
op3val:0x3fec8aeefe825660; valaddr_reg:x3; val_offset:183*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 183*FLEN/8, x4, x1, x2)

inst_62:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0x1dac507dc8ef0 and fs2 == 1 and fe2 == 0x403 and fm2 == 0x993f4cfb1d314 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xc8aeefe825660 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fa1dac507dc8ef0; op2val:0xc03993f4cfb1d314;
op3val:0x3fec8aeefe825660; valaddr_reg:x3; val_offset:186*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 186*FLEN/8, x4, x1, x2)

inst_63:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0x1dac507dc8ef0 and fs2 == 1 and fe2 == 0x403 and fm2 == 0x993f4cfb1d314 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xc8aeefe825660 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fa1dac507dc8ef0; op2val:0xc03993f4cfb1d314;
op3val:0x3fec8aeefe825660; valaddr_reg:x3; val_offset:189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 189*FLEN/8, x4, x1, x2)

inst_64:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0x1dac507dc8ef0 and fs2 == 1 and fe2 == 0x403 and fm2 == 0x993f4cfb1d314 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xc8aeefe825660 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fa1dac507dc8ef0; op2val:0xc03993f4cfb1d314;
op3val:0x3fec8aeefe825660; valaddr_reg:x3; val_offset:192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 192*FLEN/8, x4, x1, x2)

inst_65:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0x1f07ce892bbc0 and fs2 == 1 and fe2 == 0x403 and fm2 == 0xc74e4339e0e03 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xfe7e9fd6aa739 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fa1f07ce892bbc0; op2val:0xc03c74e4339e0e03;
op3val:0x3fefe7e9fd6aa739; valaddr_reg:x3; val_offset:195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 195*FLEN/8, x4, x1, x2)

inst_66:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0x1f07ce892bbc0 and fs2 == 1 and fe2 == 0x403 and fm2 == 0xc74e4339e0e03 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xfe7e9fd6aa739 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fa1f07ce892bbc0; op2val:0xc03c74e4339e0e03;
op3val:0x3fefe7e9fd6aa739; valaddr_reg:x3; val_offset:198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 198*FLEN/8, x4, x1, x2)

inst_67:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0x1f07ce892bbc0 and fs2 == 1 and fe2 == 0x403 and fm2 == 0xc74e4339e0e03 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xfe7e9fd6aa739 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fa1f07ce892bbc0; op2val:0xc03c74e4339e0e03;
op3val:0x3fefe7e9fd6aa739; valaddr_reg:x3; val_offset:201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 201*FLEN/8, x4, x1, x2)

inst_68:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0x1f07ce892bbc0 and fs2 == 1 and fe2 == 0x403 and fm2 == 0xc74e4339e0e03 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xfe7e9fd6aa739 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fa1f07ce892bbc0; op2val:0xc03c74e4339e0e03;
op3val:0x3fefe7e9fd6aa739; valaddr_reg:x3; val_offset:204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 204*FLEN/8, x4, x1, x2)

inst_69:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0x1f07ce892bbc0 and fs2 == 1 and fe2 == 0x403 and fm2 == 0xc74e4339e0e03 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xfe7e9fd6aa739 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fa1f07ce892bbc0; op2val:0xc03c74e4339e0e03;
op3val:0x3fefe7e9fd6aa739; valaddr_reg:x3; val_offset:207*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 207*FLEN/8, x4, x1, x2)

inst_70:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0xb4292eb887ee0 and fs2 == 1 and fe2 == 0x401 and fm2 == 0xa47a2683e74c5 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x6631d6f2ed846 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fab4292eb887ee0; op2val:0xc01a47a2683e74c5;
op3val:0x3fd6631d6f2ed846; valaddr_reg:x3; val_offset:210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210*FLEN/8, x4, x1, x2)

inst_71:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0xb4292eb887ee0 and fs2 == 1 and fe2 == 0x401 and fm2 == 0xa47a2683e74c5 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x6631d6f2ed846 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fab4292eb887ee0; op2val:0xc01a47a2683e74c5;
op3val:0x3fd6631d6f2ed846; valaddr_reg:x3; val_offset:213*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 213*FLEN/8, x4, x1, x2)

inst_72:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0xb4292eb887ee0 and fs2 == 1 and fe2 == 0x401 and fm2 == 0xa47a2683e74c5 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x6631d6f2ed846 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fab4292eb887ee0; op2val:0xc01a47a2683e74c5;
op3val:0x3fd6631d6f2ed846; valaddr_reg:x3; val_offset:216*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 216*FLEN/8, x4, x1, x2)

inst_73:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0xb4292eb887ee0 and fs2 == 1 and fe2 == 0x401 and fm2 == 0xa47a2683e74c5 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x6631d6f2ed846 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fab4292eb887ee0; op2val:0xc01a47a2683e74c5;
op3val:0x3fd6631d6f2ed846; valaddr_reg:x3; val_offset:219*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 219*FLEN/8, x4, x1, x2)

inst_74:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0xb4292eb887ee0 and fs2 == 1 and fe2 == 0x401 and fm2 == 0xa47a2683e74c5 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x6631d6f2ed846 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fab4292eb887ee0; op2val:0xc01a47a2683e74c5;
op3val:0x3fd6631d6f2ed846; valaddr_reg:x3; val_offset:222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 222*FLEN/8, x4, x1, x2)

inst_75:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0xb9f257d9a2d20 and fs2 == 1 and fe2 == 0x402 and fm2 == 0x2f4d1754ca447 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x05cd76131562a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fab9f257d9a2d20; op2val:0xc022f4d1754ca447;
op3val:0x3fe05cd76131562a; valaddr_reg:x3; val_offset:225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 225*FLEN/8, x4, x1, x2)

inst_76:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0xb9f257d9a2d20 and fs2 == 1 and fe2 == 0x402 and fm2 == 0x2f4d1754ca447 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x05cd76131562a and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fab9f257d9a2d20; op2val:0xc022f4d1754ca447;
op3val:0x3fe05cd76131562a; valaddr_reg:x3; val_offset:228*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 228*FLEN/8, x4, x1, x2)

inst_77:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0xb9f257d9a2d20 and fs2 == 1 and fe2 == 0x402 and fm2 == 0x2f4d1754ca447 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x05cd76131562a and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fab9f257d9a2d20; op2val:0xc022f4d1754ca447;
op3val:0x3fe05cd76131562a; valaddr_reg:x3; val_offset:231*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 231*FLEN/8, x4, x1, x2)

inst_78:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0xb9f257d9a2d20 and fs2 == 1 and fe2 == 0x402 and fm2 == 0x2f4d1754ca447 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x05cd76131562a and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fab9f257d9a2d20; op2val:0xc022f4d1754ca447;
op3val:0x3fe05cd76131562a; valaddr_reg:x3; val_offset:234*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 234*FLEN/8, x4, x1, x2)

inst_79:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0xb9f257d9a2d20 and fs2 == 1 and fe2 == 0x402 and fm2 == 0x2f4d1754ca447 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x05cd76131562a and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fab9f257d9a2d20; op2val:0xc022f4d1754ca447;
op3val:0x3fe05cd76131562a; valaddr_reg:x3; val_offset:237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 237*FLEN/8, x4, x1, x2)

inst_80:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0xc4fab12e9ba70 and fs2 == 1 and fe2 == 0x401 and fm2 == 0xc68a06c13f37b and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x922468a7fe168 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fac4fab12e9ba70; op2val:0xc01c68a06c13f37b;
op3val:0x3fd922468a7fe168; valaddr_reg:x3; val_offset:240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240*FLEN/8, x4, x1, x2)

inst_81:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0xc4fab12e9ba70 and fs2 == 1 and fe2 == 0x401 and fm2 == 0xc68a06c13f37b and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x922468a7fe168 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fac4fab12e9ba70; op2val:0xc01c68a06c13f37b;
op3val:0x3fd922468a7fe168; valaddr_reg:x3; val_offset:243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 243*FLEN/8, x4, x1, x2)

inst_82:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0xc4fab12e9ba70 and fs2 == 1 and fe2 == 0x401 and fm2 == 0xc68a06c13f37b and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x922468a7fe168 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fac4fab12e9ba70; op2val:0xc01c68a06c13f37b;
op3val:0x3fd922468a7fe168; valaddr_reg:x3; val_offset:246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 246*FLEN/8, x4, x1, x2)

inst_83:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0xc4fab12e9ba70 and fs2 == 1 and fe2 == 0x401 and fm2 == 0xc68a06c13f37b and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x922468a7fe168 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fac4fab12e9ba70; op2val:0xc01c68a06c13f37b;
op3val:0x3fd922468a7fe168; valaddr_reg:x3; val_offset:249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 249*FLEN/8, x4, x1, x2)

inst_84:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0xc4fab12e9ba70 and fs2 == 1 and fe2 == 0x401 and fm2 == 0xc68a06c13f37b and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x922468a7fe168 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fac4fab12e9ba70; op2val:0xc01c68a06c13f37b;
op3val:0x3fd922468a7fe168; valaddr_reg:x3; val_offset:252*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 252*FLEN/8, x4, x1, x2)

inst_85:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x02b09cf9edfe0 and fs2 == 1 and fe2 == 0x402 and fm2 == 0x682cfe45f21ae and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x6bf5d40c5ba28 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fb02b09cf9edfe0; op2val:0xc02682cfe45f21ae;
op3val:0x3fe6bf5d40c5ba28; valaddr_reg:x3; val_offset:255*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255*FLEN/8, x4, x1, x2)

inst_86:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x02b09cf9edfe0 and fs2 == 1 and fe2 == 0x402 and fm2 == 0x682cfe45f21ae and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x6bf5d40c5ba28 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fb02b09cf9edfe0; op2val:0xc02682cfe45f21ae;
op3val:0x3fe6bf5d40c5ba28; valaddr_reg:x3; val_offset:258*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 258*FLEN/8, x4, x1, x2)

inst_87:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x02b09cf9edfe0 and fs2 == 1 and fe2 == 0x402 and fm2 == 0x682cfe45f21ae and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x6bf5d40c5ba28 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fb02b09cf9edfe0; op2val:0xc02682cfe45f21ae;
op3val:0x3fe6bf5d40c5ba28; valaddr_reg:x3; val_offset:261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 261*FLEN/8, x4, x1, x2)

inst_88:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x02b09cf9edfe0 and fs2 == 1 and fe2 == 0x402 and fm2 == 0x682cfe45f21ae and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x6bf5d40c5ba28 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fb02b09cf9edfe0; op2val:0xc02682cfe45f21ae;
op3val:0x3fe6bf5d40c5ba28; valaddr_reg:x3; val_offset:264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 264*FLEN/8, x4, x1, x2)

inst_89:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x02b09cf9edfe0 and fs2 == 1 and fe2 == 0x402 and fm2 == 0x682cfe45f21ae and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x6bf5d40c5ba28 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fb02b09cf9edfe0; op2val:0xc02682cfe45f21ae;
op3val:0x3fe6bf5d40c5ba28; valaddr_reg:x3; val_offset:267*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 267*FLEN/8, x4, x1, x2)

inst_90:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x040c4520792b8 and fs2 == 1 and fe2 == 0x401 and fm2 == 0xa90dcffbcc297 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xafc666a81f204 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fb040c4520792b8; op2val:0xc01a90dcffbcc297;
op3val:0x3fdafc666a81f204; valaddr_reg:x3; val_offset:270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 270*FLEN/8, x4, x1, x2)

inst_91:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x040c4520792b8 and fs2 == 1 and fe2 == 0x401 and fm2 == 0xa90dcffbcc297 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xafc666a81f204 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fb040c4520792b8; op2val:0xc01a90dcffbcc297;
op3val:0x3fdafc666a81f204; valaddr_reg:x3; val_offset:273*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 273*FLEN/8, x4, x1, x2)

inst_92:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x040c4520792b8 and fs2 == 1 and fe2 == 0x401 and fm2 == 0xa90dcffbcc297 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xafc666a81f204 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fb040c4520792b8; op2val:0xc01a90dcffbcc297;
op3val:0x3fdafc666a81f204; valaddr_reg:x3; val_offset:276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 276*FLEN/8, x4, x1, x2)

inst_93:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x040c4520792b8 and fs2 == 1 and fe2 == 0x401 and fm2 == 0xa90dcffbcc297 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xafc666a81f204 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fb040c4520792b8; op2val:0xc01a90dcffbcc297;
op3val:0x3fdafc666a81f204; valaddr_reg:x3; val_offset:279*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 279*FLEN/8, x4, x1, x2)

inst_94:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x040c4520792b8 and fs2 == 1 and fe2 == 0x401 and fm2 == 0xa90dcffbcc297 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xafc666a81f204 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fb040c4520792b8; op2val:0xc01a90dcffbcc297;
op3val:0x3fdafc666a81f204; valaddr_reg:x3; val_offset:282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 282*FLEN/8, x4, x1, x2)

inst_95:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x05f1809e654d0 and fs2 == 1 and fe2 == 0x401 and fm2 == 0x102ce7496f3fc and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x167e8ad2759cc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fb05f1809e654d0; op2val:0xc01102ce7496f3fc;
op3val:0x3fd167e8ad2759cc; valaddr_reg:x3; val_offset:285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 285*FLEN/8, x4, x1, x2)

inst_96:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x05f1809e654d0 and fs2 == 1 and fe2 == 0x401 and fm2 == 0x102ce7496f3fc and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x167e8ad2759cc and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fb05f1809e654d0; op2val:0xc01102ce7496f3fc;
op3val:0x3fd167e8ad2759cc; valaddr_reg:x3; val_offset:288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 288*FLEN/8, x4, x1, x2)

inst_97:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x05f1809e654d0 and fs2 == 1 and fe2 == 0x401 and fm2 == 0x102ce7496f3fc and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x167e8ad2759cc and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fb05f1809e654d0; op2val:0xc01102ce7496f3fc;
op3val:0x3fd167e8ad2759cc; valaddr_reg:x3; val_offset:291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 291*FLEN/8, x4, x1, x2)

inst_98:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x05f1809e654d0 and fs2 == 1 and fe2 == 0x401 and fm2 == 0x102ce7496f3fc and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x167e8ad2759cc and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fb05f1809e654d0; op2val:0xc01102ce7496f3fc;
op3val:0x3fd167e8ad2759cc; valaddr_reg:x3; val_offset:294*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 294*FLEN/8, x4, x1, x2)

inst_99:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x05f1809e654d0 and fs2 == 1 and fe2 == 0x401 and fm2 == 0x102ce7496f3fc and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x167e8ad2759cc and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fb05f1809e654d0; op2val:0xc01102ce7496f3fc;
op3val:0x3fd167e8ad2759cc; valaddr_reg:x3; val_offset:297*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 297*FLEN/8, x4, x1, x2)

inst_100:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x28a1e22f9c158 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x0251bd859fde7 and fs3 == 0 and fe3 == 0x3f9 and fm3 == 0x2b51dcc6e5b40 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fb28a1e22f9c158; op2val:0xbfd0251bd859fde7;
op3val:0x3f92b51dcc6e5b40; valaddr_reg:x3; val_offset:300*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300*FLEN/8, x4, x1, x2)

inst_101:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x28a1e22f9c158 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x0251bd859fde7 and fs3 == 0 and fe3 == 0x3f9 and fm3 == 0x2b51dcc6e5b40 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fb28a1e22f9c158; op2val:0xbfd0251bd859fde7;
op3val:0x3f92b51dcc6e5b40; valaddr_reg:x3; val_offset:303*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 303*FLEN/8, x4, x1, x2)

inst_102:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x28a1e22f9c158 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x0251bd859fde7 and fs3 == 0 and fe3 == 0x3f9 and fm3 == 0x2b51dcc6e5b40 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fb28a1e22f9c158; op2val:0xbfd0251bd859fde7;
op3val:0x3f92b51dcc6e5b40; valaddr_reg:x3; val_offset:306*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 306*FLEN/8, x4, x1, x2)

inst_103:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x28a1e22f9c158 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x0251bd859fde7 and fs3 == 0 and fe3 == 0x3f9 and fm3 == 0x2b51dcc6e5b40 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fb28a1e22f9c158; op2val:0xbfd0251bd859fde7;
op3val:0x3f92b51dcc6e5b40; valaddr_reg:x3; val_offset:309*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 309*FLEN/8, x4, x1, x2)

inst_104:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x28a1e22f9c158 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x0251bd859fde7 and fs3 == 0 and fe3 == 0x3f9 and fm3 == 0x2b51dcc6e5b40 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fb28a1e22f9c158; op2val:0xbfd0251bd859fde7;
op3val:0x3f92b51dcc6e5b40; valaddr_reg:x3; val_offset:312*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 312*FLEN/8, x4, x1, x2)

inst_105:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x45d517e8e3ad0 and fs2 == 1 and fe2 == 0x400 and fm2 == 0x57f0a9240d0f0 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0xb5c2d21702c14 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fb45d517e8e3ad0; op2val:0xc0057f0a9240d0f0;
op3val:0x3fcb5c2d21702c14; valaddr_reg:x3; val_offset:315*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 315*FLEN/8, x4, x1, x2)

inst_106:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x45d517e8e3ad0 and fs2 == 1 and fe2 == 0x400 and fm2 == 0x57f0a9240d0f0 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0xb5c2d21702c14 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fb45d517e8e3ad0; op2val:0xc0057f0a9240d0f0;
op3val:0x3fcb5c2d21702c14; valaddr_reg:x3; val_offset:318*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 318*FLEN/8, x4, x1, x2)

inst_107:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x45d517e8e3ad0 and fs2 == 1 and fe2 == 0x400 and fm2 == 0x57f0a9240d0f0 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0xb5c2d21702c14 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fb45d517e8e3ad0; op2val:0xc0057f0a9240d0f0;
op3val:0x3fcb5c2d21702c14; valaddr_reg:x3; val_offset:321*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 321*FLEN/8, x4, x1, x2)

inst_108:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x45d517e8e3ad0 and fs2 == 1 and fe2 == 0x400 and fm2 == 0x57f0a9240d0f0 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0xb5c2d21702c14 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fb45d517e8e3ad0; op2val:0xc0057f0a9240d0f0;
op3val:0x3fcb5c2d21702c14; valaddr_reg:x3; val_offset:324*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 324*FLEN/8, x4, x1, x2)

inst_109:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x45d517e8e3ad0 and fs2 == 1 and fe2 == 0x400 and fm2 == 0x57f0a9240d0f0 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0xb5c2d21702c14 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fb45d517e8e3ad0; op2val:0xc0057f0a9240d0f0;
op3val:0x3fcb5c2d21702c14; valaddr_reg:x3; val_offset:327*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 327*FLEN/8, x4, x1, x2)

inst_110:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x488795d503e40 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0xc1d08da429d25 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x20a0b8dcd97a0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fb488795d503e40; op2val:0xbffc1d08da429d25;
op3val:0x3fc20a0b8dcd97a0; valaddr_reg:x3; val_offset:330*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 330*FLEN/8, x4, x1, x2)

inst_111:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x488795d503e40 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0xc1d08da429d25 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x20a0b8dcd97a0 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fb488795d503e40; op2val:0xbffc1d08da429d25;
op3val:0x3fc20a0b8dcd97a0; valaddr_reg:x3; val_offset:333*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 333*FLEN/8, x4, x1, x2)

inst_112:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x488795d503e40 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0xc1d08da429d25 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x20a0b8dcd97a0 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fb488795d503e40; op2val:0xbffc1d08da429d25;
op3val:0x3fc20a0b8dcd97a0; valaddr_reg:x3; val_offset:336*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 336*FLEN/8, x4, x1, x2)

inst_113:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x488795d503e40 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0xc1d08da429d25 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x20a0b8dcd97a0 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fb488795d503e40; op2val:0xbffc1d08da429d25;
op3val:0x3fc20a0b8dcd97a0; valaddr_reg:x3; val_offset:339*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 339*FLEN/8, x4, x1, x2)

inst_114:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x488795d503e40 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0xc1d08da429d25 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x20a0b8dcd97a0 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fb488795d503e40; op2val:0xbffc1d08da429d25;
op3val:0x3fc20a0b8dcd97a0; valaddr_reg:x3; val_offset:342*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 342*FLEN/8, x4, x1, x2)

inst_115:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x58f0f1573b368 and fs2 == 1 and fe2 == 0x400 and fm2 == 0x90e27ed671220 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x0e14d45a72152 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fb58f0f1573b368; op2val:0xc0090e27ed671220;
op3val:0x3fd0e14d45a72152; valaddr_reg:x3; val_offset:345*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 345*FLEN/8, x4, x1, x2)

inst_116:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x58f0f1573b368 and fs2 == 1 and fe2 == 0x400 and fm2 == 0x90e27ed671220 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x0e14d45a72152 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fb58f0f1573b368; op2val:0xc0090e27ed671220;
op3val:0x3fd0e14d45a72152; valaddr_reg:x3; val_offset:348*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 348*FLEN/8, x4, x1, x2)

inst_117:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x58f0f1573b368 and fs2 == 1 and fe2 == 0x400 and fm2 == 0x90e27ed671220 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x0e14d45a72152 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fb58f0f1573b368; op2val:0xc0090e27ed671220;
op3val:0x3fd0e14d45a72152; valaddr_reg:x3; val_offset:351*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 351*FLEN/8, x4, x1, x2)

inst_118:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x58f0f1573b368 and fs2 == 1 and fe2 == 0x400 and fm2 == 0x90e27ed671220 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x0e14d45a72152 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fb58f0f1573b368; op2val:0xc0090e27ed671220;
op3val:0x3fd0e14d45a72152; valaddr_reg:x3; val_offset:354*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 354*FLEN/8, x4, x1, x2)

inst_119:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x58f0f1573b368 and fs2 == 1 and fe2 == 0x400 and fm2 == 0x90e27ed671220 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x0e14d45a72152 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fb58f0f1573b368; op2val:0xc0090e27ed671220;
op3val:0x3fd0e14d45a72152; valaddr_reg:x3; val_offset:357*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 357*FLEN/8, x4, x1, x2)

inst_120:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x755865d71ab38 and fs2 == 1 and fe2 == 0x400 and fm2 == 0x687f4ff5d668d and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x06defd56e87d2 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fb755865d71ab38; op2val:0xc00687f4ff5d668d;
op3val:0x3fd06defd56e87d2; valaddr_reg:x3; val_offset:360*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 360*FLEN/8, x4, x1, x2)

inst_121:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x755865d71ab38 and fs2 == 1 and fe2 == 0x400 and fm2 == 0x687f4ff5d668d and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x06defd56e87d2 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fb755865d71ab38; op2val:0xc00687f4ff5d668d;
op3val:0x3fd06defd56e87d2; valaddr_reg:x3; val_offset:363*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 363*FLEN/8, x4, x1, x2)

inst_122:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x755865d71ab38 and fs2 == 1 and fe2 == 0x400 and fm2 == 0x687f4ff5d668d and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x06defd56e87d2 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fb755865d71ab38; op2val:0xc00687f4ff5d668d;
op3val:0x3fd06defd56e87d2; valaddr_reg:x3; val_offset:366*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 366*FLEN/8, x4, x1, x2)

inst_123:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x755865d71ab38 and fs2 == 1 and fe2 == 0x400 and fm2 == 0x687f4ff5d668d and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x06defd56e87d2 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fb755865d71ab38; op2val:0xc00687f4ff5d668d;
op3val:0x3fd06defd56e87d2; valaddr_reg:x3; val_offset:369*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 369*FLEN/8, x4, x1, x2)

inst_124:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x755865d71ab38 and fs2 == 1 and fe2 == 0x400 and fm2 == 0x687f4ff5d668d and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x06defd56e87d2 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fb755865d71ab38; op2val:0xc00687f4ff5d668d;
op3val:0x3fd06defd56e87d2; valaddr_reg:x3; val_offset:372*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 372*FLEN/8, x4, x1, x2)

inst_125:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x8205cdc6b6558 and fs2 == 1 and fe2 == 0x401 and fm2 == 0x86656374b80f9 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x2656dcdf93f67 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fb8205cdc6b6558; op2val:0xc0186656374b80f9;
op3val:0x3fe2656dcdf93f67; valaddr_reg:x3; val_offset:375*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 375*FLEN/8, x4, x1, x2)

inst_126:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x8205cdc6b6558 and fs2 == 1 and fe2 == 0x401 and fm2 == 0x86656374b80f9 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x2656dcdf93f67 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fb8205cdc6b6558; op2val:0xc0186656374b80f9;
op3val:0x3fe2656dcdf93f67; valaddr_reg:x3; val_offset:378*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 378*FLEN/8, x4, x1, x2)

inst_127:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x8205cdc6b6558 and fs2 == 1 and fe2 == 0x401 and fm2 == 0x86656374b80f9 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x2656dcdf93f67 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fb8205cdc6b6558; op2val:0xc0186656374b80f9;
op3val:0x3fe2656dcdf93f67; valaddr_reg:x3; val_offset:381*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 381*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_2)

inst_128:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x8205cdc6b6558 and fs2 == 1 and fe2 == 0x401 and fm2 == 0x86656374b80f9 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x2656dcdf93f67 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fb8205cdc6b6558; op2val:0xc0186656374b80f9;
op3val:0x3fe2656dcdf93f67; valaddr_reg:x3; val_offset:384*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 384*FLEN/8, x4, x1, x2)

inst_129:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x8205cdc6b6558 and fs2 == 1 and fe2 == 0x401 and fm2 == 0x86656374b80f9 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x2656dcdf93f67 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fb8205cdc6b6558; op2val:0xc0186656374b80f9;
op3val:0x3fe2656dcdf93f67; valaddr_reg:x3; val_offset:387*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 387*FLEN/8, x4, x1, x2)

inst_130:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x835d096f7ecd0 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x9456bf625005f and fs3 == 0 and fe3 == 0x3fb and fm3 == 0x31e90ade26270 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fb835d096f7ecd0; op2val:0xbfe9456bf625005f;
op3val:0x3fb31e90ade26270; valaddr_reg:x3; val_offset:390*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 390*FLEN/8, x4, x1, x2)

inst_131:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x835d096f7ecd0 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x9456bf625005f and fs3 == 0 and fe3 == 0x3fb and fm3 == 0x31e90ade26270 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fb835d096f7ecd0; op2val:0xbfe9456bf625005f;
op3val:0x3fb31e90ade26270; valaddr_reg:x3; val_offset:393*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 393*FLEN/8, x4, x1, x2)

inst_132:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x835d096f7ecd0 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x9456bf625005f and fs3 == 0 and fe3 == 0x3fb and fm3 == 0x31e90ade26270 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fb835d096f7ecd0; op2val:0xbfe9456bf625005f;
op3val:0x3fb31e90ade26270; valaddr_reg:x3; val_offset:396*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 396*FLEN/8, x4, x1, x2)

inst_133:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x835d096f7ecd0 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x9456bf625005f and fs3 == 0 and fe3 == 0x3fb and fm3 == 0x31e90ade26270 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fb835d096f7ecd0; op2val:0xbfe9456bf625005f;
op3val:0x3fb31e90ade26270; valaddr_reg:x3; val_offset:399*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 399*FLEN/8, x4, x1, x2)

inst_134:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x835d096f7ecd0 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x9456bf625005f and fs3 == 0 and fe3 == 0x3fb and fm3 == 0x31e90ade26270 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fb835d096f7ecd0; op2val:0xbfe9456bf625005f;
op3val:0x3fb31e90ade26270; valaddr_reg:x3; val_offset:402*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 402*FLEN/8, x4, x1, x2)

inst_135:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x93f7d9958bfe0 and fs2 == 1 and fe2 == 0x401 and fm2 == 0x0f8ce1bdb9ecf and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xac81af1886968 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fb93f7d9958bfe0; op2val:0xc010f8ce1bdb9ecf;
op3val:0x3fdac81af1886968; valaddr_reg:x3; val_offset:405*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 405*FLEN/8, x4, x1, x2)

inst_136:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x93f7d9958bfe0 and fs2 == 1 and fe2 == 0x401 and fm2 == 0x0f8ce1bdb9ecf and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xac81af1886968 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fb93f7d9958bfe0; op2val:0xc010f8ce1bdb9ecf;
op3val:0x3fdac81af1886968; valaddr_reg:x3; val_offset:408*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 408*FLEN/8, x4, x1, x2)

inst_137:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x93f7d9958bfe0 and fs2 == 1 and fe2 == 0x401 and fm2 == 0x0f8ce1bdb9ecf and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xac81af1886968 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fb93f7d9958bfe0; op2val:0xc010f8ce1bdb9ecf;
op3val:0x3fdac81af1886968; valaddr_reg:x3; val_offset:411*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 411*FLEN/8, x4, x1, x2)

inst_138:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x93f7d9958bfe0 and fs2 == 1 and fe2 == 0x401 and fm2 == 0x0f8ce1bdb9ecf and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xac81af1886968 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fb93f7d9958bfe0; op2val:0xc010f8ce1bdb9ecf;
op3val:0x3fdac81af1886968; valaddr_reg:x3; val_offset:414*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 414*FLEN/8, x4, x1, x2)

inst_139:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x93f7d9958bfe0 and fs2 == 1 and fe2 == 0x401 and fm2 == 0x0f8ce1bdb9ecf and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xac81af1886968 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fb93f7d9958bfe0; op2val:0xc010f8ce1bdb9ecf;
op3val:0x3fdac81af1886968; valaddr_reg:x3; val_offset:417*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 417*FLEN/8, x4, x1, x2)

inst_140:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0xa7b6588681a48 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x7e9f95ef618fd and fs3 == 0 and fe3 == 0x3fb and fm3 == 0x3ca51d41839d8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fba7b6588681a48; op2val:0xbfe7e9f95ef618fd;
op3val:0x3fb3ca51d41839d8; valaddr_reg:x3; val_offset:420*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 420*FLEN/8, x4, x1, x2)

inst_141:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0xa7b6588681a48 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x7e9f95ef618fd and fs3 == 0 and fe3 == 0x3fb and fm3 == 0x3ca51d41839d8 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fba7b6588681a48; op2val:0xbfe7e9f95ef618fd;
op3val:0x3fb3ca51d41839d8; valaddr_reg:x3; val_offset:423*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 423*FLEN/8, x4, x1, x2)

inst_142:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0xa7b6588681a48 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x7e9f95ef618fd and fs3 == 0 and fe3 == 0x3fb and fm3 == 0x3ca51d41839d8 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fba7b6588681a48; op2val:0xbfe7e9f95ef618fd;
op3val:0x3fb3ca51d41839d8; valaddr_reg:x3; val_offset:426*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 426*FLEN/8, x4, x1, x2)

inst_143:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0xa7b6588681a48 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x7e9f95ef618fd and fs3 == 0 and fe3 == 0x3fb and fm3 == 0x3ca51d41839d8 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fba7b6588681a48; op2val:0xbfe7e9f95ef618fd;
op3val:0x3fb3ca51d41839d8; valaddr_reg:x3; val_offset:429*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 429*FLEN/8, x4, x1, x2)

inst_144:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0xa7b6588681a48 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x7e9f95ef618fd and fs3 == 0 and fe3 == 0x3fb and fm3 == 0x3ca51d41839d8 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fba7b6588681a48; op2val:0xbfe7e9f95ef618fd;
op3val:0x3fb3ca51d41839d8; valaddr_reg:x3; val_offset:432*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 432*FLEN/8, x4, x1, x2)

inst_145:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0xbc8c592a89840 and fs2 == 1 and fe2 == 0x401 and fm2 == 0xe657daf172416 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xa6458095ec7dc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fbbc8c592a89840; op2val:0xc01e657daf172416;
op3val:0x3fea6458095ec7dc; valaddr_reg:x3; val_offset:435*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 435*FLEN/8, x4, x1, x2)

inst_146:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0xbc8c592a89840 and fs2 == 1 and fe2 == 0x401 and fm2 == 0xe657daf172416 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xa6458095ec7dc and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fbbc8c592a89840; op2val:0xc01e657daf172416;
op3val:0x3fea6458095ec7dc; valaddr_reg:x3; val_offset:438*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 438*FLEN/8, x4, x1, x2)

inst_147:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0xbc8c592a89840 and fs2 == 1 and fe2 == 0x401 and fm2 == 0xe657daf172416 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xa6458095ec7dc and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fbbc8c592a89840; op2val:0xc01e657daf172416;
op3val:0x3fea6458095ec7dc; valaddr_reg:x3; val_offset:441*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 441*FLEN/8, x4, x1, x2)

inst_148:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0xbc8c592a89840 and fs2 == 1 and fe2 == 0x401 and fm2 == 0xe657daf172416 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xa6458095ec7dc and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fbbc8c592a89840; op2val:0xc01e657daf172416;
op3val:0x3fea6458095ec7dc; valaddr_reg:x3; val_offset:444*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 444*FLEN/8, x4, x1, x2)

inst_149:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0xbc8c592a89840 and fs2 == 1 and fe2 == 0x401 and fm2 == 0xe657daf172416 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xa6458095ec7dc and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fbbc8c592a89840; op2val:0xc01e657daf172416;
op3val:0x3fea6458095ec7dc; valaddr_reg:x3; val_offset:447*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 447*FLEN/8, x4, x1, x2)

inst_150:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0xc02e86b2d6c88 and fs2 == 1 and fe2 == 0x401 and fm2 == 0x91c16954365d3 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x5fadbe3c197a4 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fbc02e86b2d6c88; op2val:0xc0191c16954365d3;
op3val:0x3fe5fadbe3c197a4; valaddr_reg:x3; val_offset:450*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 450*FLEN/8, x4, x1, x2)

inst_151:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0xc02e86b2d6c88 and fs2 == 1 and fe2 == 0x401 and fm2 == 0x91c16954365d3 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x5fadbe3c197a4 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fbc02e86b2d6c88; op2val:0xc0191c16954365d3;
op3val:0x3fe5fadbe3c197a4; valaddr_reg:x3; val_offset:453*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 453*FLEN/8, x4, x1, x2)

inst_152:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0xc02e86b2d6c88 and fs2 == 1 and fe2 == 0x401 and fm2 == 0x91c16954365d3 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x5fadbe3c197a4 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fbc02e86b2d6c88; op2val:0xc0191c16954365d3;
op3val:0x3fe5fadbe3c197a4; valaddr_reg:x3; val_offset:456*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 456*FLEN/8, x4, x1, x2)

inst_153:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0xc02e86b2d6c88 and fs2 == 1 and fe2 == 0x401 and fm2 == 0x91c16954365d3 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x5fadbe3c197a4 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fbc02e86b2d6c88; op2val:0xc0191c16954365d3;
op3val:0x3fe5fadbe3c197a4; valaddr_reg:x3; val_offset:459*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 459*FLEN/8, x4, x1, x2)

inst_154:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0xc02e86b2d6c88 and fs2 == 1 and fe2 == 0x401 and fm2 == 0x91c16954365d3 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x5fadbe3c197a4 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fbc02e86b2d6c88; op2val:0xc0191c16954365d3;
op3val:0x3fe5fadbe3c197a4; valaddr_reg:x3; val_offset:462*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 462*FLEN/8, x4, x1, x2)

inst_155:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0xccff731a70a30 and fs2 == 1 and fe2 == 0x400 and fm2 == 0xd7565feda223f and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xa862c3aa84264 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fbccff731a70a30; op2val:0xc00d7565feda223f;
op3val:0x3fda862c3aa84264; valaddr_reg:x3; val_offset:465*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 465*FLEN/8, x4, x1, x2)

inst_156:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0xccff731a70a30 and fs2 == 1 and fe2 == 0x400 and fm2 == 0xd7565feda223f and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xa862c3aa84264 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fbccff731a70a30; op2val:0xc00d7565feda223f;
op3val:0x3fda862c3aa84264; valaddr_reg:x3; val_offset:468*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 468*FLEN/8, x4, x1, x2)

inst_157:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0xccff731a70a30 and fs2 == 1 and fe2 == 0x400 and fm2 == 0xd7565feda223f and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xa862c3aa84264 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fbccff731a70a30; op2val:0xc00d7565feda223f;
op3val:0x3fda862c3aa84264; valaddr_reg:x3; val_offset:471*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 471*FLEN/8, x4, x1, x2)

inst_158:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0xccff731a70a30 and fs2 == 1 and fe2 == 0x400 and fm2 == 0xd7565feda223f and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xa862c3aa84264 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fbccff731a70a30; op2val:0xc00d7565feda223f;
op3val:0x3fda862c3aa84264; valaddr_reg:x3; val_offset:474*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 474*FLEN/8, x4, x1, x2)

inst_159:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0xccff731a70a30 and fs2 == 1 and fe2 == 0x400 and fm2 == 0xd7565feda223f and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xa862c3aa84264 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fbccff731a70a30; op2val:0xc00d7565feda223f;
op3val:0x3fda862c3aa84264; valaddr_reg:x3; val_offset:477*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 477*FLEN/8, x4, x1, x2)

inst_160:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0xdae4484794eb0 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0xae30ebaa29cd7 and fs3 == 0 and fe3 == 0x3f9 and fm3 == 0x8f0318b080860 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fbdae4484794eb0; op2val:0xbfcae30ebaa29cd7;
op3val:0x3f98f0318b080860; valaddr_reg:x3; val_offset:480*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 480*FLEN/8, x4, x1, x2)

inst_161:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0xdae4484794eb0 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0xae30ebaa29cd7 and fs3 == 0 and fe3 == 0x3f9 and fm3 == 0x8f0318b080860 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fbdae4484794eb0; op2val:0xbfcae30ebaa29cd7;
op3val:0x3f98f0318b080860; valaddr_reg:x3; val_offset:483*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 483*FLEN/8, x4, x1, x2)

inst_162:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0xdae4484794eb0 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0xae30ebaa29cd7 and fs3 == 0 and fe3 == 0x3f9 and fm3 == 0x8f0318b080860 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fbdae4484794eb0; op2val:0xbfcae30ebaa29cd7;
op3val:0x3f98f0318b080860; valaddr_reg:x3; val_offset:486*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 486*FLEN/8, x4, x1, x2)

inst_163:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0xdae4484794eb0 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0xae30ebaa29cd7 and fs3 == 0 and fe3 == 0x3f9 and fm3 == 0x8f0318b080860 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fbdae4484794eb0; op2val:0xbfcae30ebaa29cd7;
op3val:0x3f98f0318b080860; valaddr_reg:x3; val_offset:489*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 489*FLEN/8, x4, x1, x2)

inst_164:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0xdae4484794eb0 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0xae30ebaa29cd7 and fs3 == 0 and fe3 == 0x3f9 and fm3 == 0x8f0318b080860 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fbdae4484794eb0; op2val:0xbfcae30ebaa29cd7;
op3val:0x3f98f0318b080860; valaddr_reg:x3; val_offset:492*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 492*FLEN/8, x4, x1, x2)

inst_165:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0xe4bc2466d4078 and fs2 == 1 and fe2 == 0x401 and fm2 == 0xb218e941d3cff and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x9afb1082cf882 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fbe4bc2466d4078; op2val:0xc01b218e941d3cff;
op3val:0x3fe9afb1082cf882; valaddr_reg:x3; val_offset:495*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 495*FLEN/8, x4, x1, x2)

inst_166:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0xe4bc2466d4078 and fs2 == 1 and fe2 == 0x401 and fm2 == 0xb218e941d3cff and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x9afb1082cf882 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fbe4bc2466d4078; op2val:0xc01b218e941d3cff;
op3val:0x3fe9afb1082cf882; valaddr_reg:x3; val_offset:498*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 498*FLEN/8, x4, x1, x2)

inst_167:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0xe4bc2466d4078 and fs2 == 1 and fe2 == 0x401 and fm2 == 0xb218e941d3cff and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x9afb1082cf882 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fbe4bc2466d4078; op2val:0xc01b218e941d3cff;
op3val:0x3fe9afb1082cf882; valaddr_reg:x3; val_offset:501*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 501*FLEN/8, x4, x1, x2)

inst_168:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0xe4bc2466d4078 and fs2 == 1 and fe2 == 0x401 and fm2 == 0xb218e941d3cff and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x9afb1082cf882 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fbe4bc2466d4078; op2val:0xc01b218e941d3cff;
op3val:0x3fe9afb1082cf882; valaddr_reg:x3; val_offset:504*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 504*FLEN/8, x4, x1, x2)

inst_169:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0xe4bc2466d4078 and fs2 == 1 and fe2 == 0x401 and fm2 == 0xb218e941d3cff and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x9afb1082cf882 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fbe4bc2466d4078; op2val:0xc01b218e941d3cff;
op3val:0x3fe9afb1082cf882; valaddr_reg:x3; val_offset:507*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 507*FLEN/8, x4, x1, x2)

inst_170:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0xe796d11c17038 and fs2 == 1 and fe2 == 0x401 and fm2 == 0x800e6f7813112 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x6dbedc1c54de4 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fbe796d11c17038; op2val:0xc01800e6f7813112;
op3val:0x3fe6dbedc1c54de4; valaddr_reg:x3; val_offset:510*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 510*FLEN/8, x4, x1, x2)

inst_171:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0xe796d11c17038 and fs2 == 1 and fe2 == 0x401 and fm2 == 0x800e6f7813112 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x6dbedc1c54de4 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fbe796d11c17038; op2val:0xc01800e6f7813112;
op3val:0x3fe6dbedc1c54de4; valaddr_reg:x3; val_offset:513*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 513*FLEN/8, x4, x1, x2)

inst_172:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0xe796d11c17038 and fs2 == 1 and fe2 == 0x401 and fm2 == 0x800e6f7813112 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x6dbedc1c54de4 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fbe796d11c17038; op2val:0xc01800e6f7813112;
op3val:0x3fe6dbedc1c54de4; valaddr_reg:x3; val_offset:516*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 516*FLEN/8, x4, x1, x2)

inst_173:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0xe796d11c17038 and fs2 == 1 and fe2 == 0x401 and fm2 == 0x800e6f7813112 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x6dbedc1c54de4 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fbe796d11c17038; op2val:0xc01800e6f7813112;
op3val:0x3fe6dbedc1c54de4; valaddr_reg:x3; val_offset:519*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 519*FLEN/8, x4, x1, x2)

inst_174:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0xe796d11c17038 and fs2 == 1 and fe2 == 0x401 and fm2 == 0x800e6f7813112 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x6dbedc1c54de4 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fbe796d11c17038; op2val:0xc01800e6f7813112;
op3val:0x3fe6dbedc1c54de4; valaddr_reg:x3; val_offset:522*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 522*FLEN/8, x4, x1, x2)

inst_175:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0xff441cc3f6770 and fs2 == 1 and fe2 == 0x401 and fm2 == 0xefc0a0e84c794 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xef0ab4077e7bf and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fbff441cc3f6770; op2val:0xc01efc0a0e84c794;
op3val:0x3feef0ab4077e7bf; valaddr_reg:x3; val_offset:525*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 525*FLEN/8, x4, x1, x2)

inst_176:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0xff441cc3f6770 and fs2 == 1 and fe2 == 0x401 and fm2 == 0xefc0a0e84c794 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xef0ab4077e7bf and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fbff441cc3f6770; op2val:0xc01efc0a0e84c794;
op3val:0x3feef0ab4077e7bf; valaddr_reg:x3; val_offset:528*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 528*FLEN/8, x4, x1, x2)

inst_177:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0xff441cc3f6770 and fs2 == 1 and fe2 == 0x401 and fm2 == 0xefc0a0e84c794 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xef0ab4077e7bf and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fbff441cc3f6770; op2val:0xc01efc0a0e84c794;
op3val:0x3feef0ab4077e7bf; valaddr_reg:x3; val_offset:531*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 531*FLEN/8, x4, x1, x2)

inst_178:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0xff441cc3f6770 and fs2 == 1 and fe2 == 0x401 and fm2 == 0xefc0a0e84c794 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xef0ab4077e7bf and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fbff441cc3f6770; op2val:0xc01efc0a0e84c794;
op3val:0x3feef0ab4077e7bf; valaddr_reg:x3; val_offset:534*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 534*FLEN/8, x4, x1, x2)

inst_179:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0xff441cc3f6770 and fs2 == 1 and fe2 == 0x401 and fm2 == 0xefc0a0e84c794 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xef0ab4077e7bf and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fbff441cc3f6770; op2val:0xc01efc0a0e84c794;
op3val:0x3feef0ab4077e7bf; valaddr_reg:x3; val_offset:537*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 537*FLEN/8, x4, x1, x2)

inst_180:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x0bb20263240b4 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0xca853e79a9c58 and fs3 == 0 and fe3 == 0x3f9 and fm3 == 0xdf77cd14f13c0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc0bb20263240b4; op2val:0xbfcca853e79a9c58;
op3val:0x3f9df77cd14f13c0; valaddr_reg:x3; val_offset:540*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 540*FLEN/8, x4, x1, x2)

inst_181:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x0bb20263240b4 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0xca853e79a9c58 and fs3 == 0 and fe3 == 0x3f9 and fm3 == 0xdf77cd14f13c0 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc0bb20263240b4; op2val:0xbfcca853e79a9c58;
op3val:0x3f9df77cd14f13c0; valaddr_reg:x3; val_offset:543*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 543*FLEN/8, x4, x1, x2)

inst_182:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x0bb20263240b4 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0xca853e79a9c58 and fs3 == 0 and fe3 == 0x3f9 and fm3 == 0xdf77cd14f13c0 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc0bb20263240b4; op2val:0xbfcca853e79a9c58;
op3val:0x3f9df77cd14f13c0; valaddr_reg:x3; val_offset:546*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 546*FLEN/8, x4, x1, x2)

inst_183:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x0bb20263240b4 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0xca853e79a9c58 and fs3 == 0 and fe3 == 0x3f9 and fm3 == 0xdf77cd14f13c0 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc0bb20263240b4; op2val:0xbfcca853e79a9c58;
op3val:0x3f9df77cd14f13c0; valaddr_reg:x3; val_offset:549*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 549*FLEN/8, x4, x1, x2)

inst_184:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x0bb20263240b4 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0xca853e79a9c58 and fs3 == 0 and fe3 == 0x3f9 and fm3 == 0xdf77cd14f13c0 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc0bb20263240b4; op2val:0xbfcca853e79a9c58;
op3val:0x3f9df77cd14f13c0; valaddr_reg:x3; val_offset:552*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 552*FLEN/8, x4, x1, x2)

inst_185:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x117731104c654 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0xa56bcd7c7404e and fs3 == 0 and fe3 == 0x3fc and fm3 == 0xc22c2c02b3678 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc117731104c654; op2val:0xbffa56bcd7c7404e;
op3val:0x3fcc22c2c02b3678; valaddr_reg:x3; val_offset:555*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 555*FLEN/8, x4, x1, x2)

inst_186:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x117731104c654 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0xa56bcd7c7404e and fs3 == 0 and fe3 == 0x3fc and fm3 == 0xc22c2c02b3678 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc117731104c654; op2val:0xbffa56bcd7c7404e;
op3val:0x3fcc22c2c02b3678; valaddr_reg:x3; val_offset:558*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 558*FLEN/8, x4, x1, x2)

inst_187:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x117731104c654 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0xa56bcd7c7404e and fs3 == 0 and fe3 == 0x3fc and fm3 == 0xc22c2c02b3678 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc117731104c654; op2val:0xbffa56bcd7c7404e;
op3val:0x3fcc22c2c02b3678; valaddr_reg:x3; val_offset:561*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 561*FLEN/8, x4, x1, x2)

inst_188:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x117731104c654 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0xa56bcd7c7404e and fs3 == 0 and fe3 == 0x3fc and fm3 == 0xc22c2c02b3678 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc117731104c654; op2val:0xbffa56bcd7c7404e;
op3val:0x3fcc22c2c02b3678; valaddr_reg:x3; val_offset:564*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 564*FLEN/8, x4, x1, x2)

inst_189:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x117731104c654 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0xa56bcd7c7404e and fs3 == 0 and fe3 == 0x3fc and fm3 == 0xc22c2c02b3678 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc117731104c654; op2val:0xbffa56bcd7c7404e;
op3val:0x3fcc22c2c02b3678; valaddr_reg:x3; val_offset:567*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 567*FLEN/8, x4, x1, x2)

inst_190:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x14756b04efa98 and fs2 == 1 and fe2 == 0x400 and fm2 == 0x494f0a5e14b30 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x63a041f78e2cc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc14756b04efa98; op2val:0xc00494f0a5e14b30;
op3val:0x3fd63a041f78e2cc; valaddr_reg:x3; val_offset:570*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 570*FLEN/8, x4, x1, x2)

inst_191:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x14756b04efa98 and fs2 == 1 and fe2 == 0x400 and fm2 == 0x494f0a5e14b30 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x63a041f78e2cc and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc14756b04efa98; op2val:0xc00494f0a5e14b30;
op3val:0x3fd63a041f78e2cc; valaddr_reg:x3; val_offset:573*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 573*FLEN/8, x4, x1, x2)

inst_192:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x14756b04efa98 and fs2 == 1 and fe2 == 0x400 and fm2 == 0x494f0a5e14b30 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x63a041f78e2cc and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc14756b04efa98; op2val:0xc00494f0a5e14b30;
op3val:0x3fd63a041f78e2cc; valaddr_reg:x3; val_offset:576*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 576*FLEN/8, x4, x1, x2)

inst_193:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x14756b04efa98 and fs2 == 1 and fe2 == 0x400 and fm2 == 0x494f0a5e14b30 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x63a041f78e2cc and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc14756b04efa98; op2val:0xc00494f0a5e14b30;
op3val:0x3fd63a041f78e2cc; valaddr_reg:x3; val_offset:579*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 579*FLEN/8, x4, x1, x2)

inst_194:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x14756b04efa98 and fs2 == 1 and fe2 == 0x400 and fm2 == 0x494f0a5e14b30 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x63a041f78e2cc and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc14756b04efa98; op2val:0xc00494f0a5e14b30;
op3val:0x3fd63a041f78e2cc; valaddr_reg:x3; val_offset:582*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 582*FLEN/8, x4, x1, x2)

inst_195:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x1e8d2f80b6d44 and fs2 == 1 and fe2 == 0x400 and fm2 == 0xf9c725448ad2b and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x1b11b615fb3c8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc1e8d2f80b6d44; op2val:0xc00f9c725448ad2b;
op3val:0x3fe1b11b615fb3c8; valaddr_reg:x3; val_offset:585*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 585*FLEN/8, x4, x1, x2)

inst_196:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x1e8d2f80b6d44 and fs2 == 1 and fe2 == 0x400 and fm2 == 0xf9c725448ad2b and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x1b11b615fb3c8 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc1e8d2f80b6d44; op2val:0xc00f9c725448ad2b;
op3val:0x3fe1b11b615fb3c8; valaddr_reg:x3; val_offset:588*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 588*FLEN/8, x4, x1, x2)

inst_197:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x1e8d2f80b6d44 and fs2 == 1 and fe2 == 0x400 and fm2 == 0xf9c725448ad2b and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x1b11b615fb3c8 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc1e8d2f80b6d44; op2val:0xc00f9c725448ad2b;
op3val:0x3fe1b11b615fb3c8; valaddr_reg:x3; val_offset:591*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 591*FLEN/8, x4, x1, x2)

inst_198:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x1e8d2f80b6d44 and fs2 == 1 and fe2 == 0x400 and fm2 == 0xf9c725448ad2b and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x1b11b615fb3c8 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc1e8d2f80b6d44; op2val:0xc00f9c725448ad2b;
op3val:0x3fe1b11b615fb3c8; valaddr_reg:x3; val_offset:594*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 594*FLEN/8, x4, x1, x2)

inst_199:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x1e8d2f80b6d44 and fs2 == 1 and fe2 == 0x400 and fm2 == 0xf9c725448ad2b and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x1b11b615fb3c8 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc1e8d2f80b6d44; op2val:0xc00f9c725448ad2b;
op3val:0x3fe1b11b615fb3c8; valaddr_reg:x3; val_offset:597*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 597*FLEN/8, x4, x1, x2)

inst_200:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x250938133dc44 and fs2 == 1 and fe2 == 0x400 and fm2 == 0x2ba997905c879 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x5703e5122d056 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc250938133dc44; op2val:0xc002ba997905c879;
op3val:0x3fd5703e5122d056; valaddr_reg:x3; val_offset:600*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 600*FLEN/8, x4, x1, x2)

inst_201:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x250938133dc44 and fs2 == 1 and fe2 == 0x400 and fm2 == 0x2ba997905c879 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x5703e5122d056 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc250938133dc44; op2val:0xc002ba997905c879;
op3val:0x3fd5703e5122d056; valaddr_reg:x3; val_offset:603*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 603*FLEN/8, x4, x1, x2)

inst_202:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x250938133dc44 and fs2 == 1 and fe2 == 0x400 and fm2 == 0x2ba997905c879 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x5703e5122d056 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc250938133dc44; op2val:0xc002ba997905c879;
op3val:0x3fd5703e5122d056; valaddr_reg:x3; val_offset:606*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 606*FLEN/8, x4, x1, x2)

inst_203:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x250938133dc44 and fs2 == 1 and fe2 == 0x400 and fm2 == 0x2ba997905c879 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x5703e5122d056 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc250938133dc44; op2val:0xc002ba997905c879;
op3val:0x3fd5703e5122d056; valaddr_reg:x3; val_offset:609*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 609*FLEN/8, x4, x1, x2)

inst_204:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x250938133dc44 and fs2 == 1 and fe2 == 0x400 and fm2 == 0x2ba997905c879 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x5703e5122d056 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc250938133dc44; op2val:0xc002ba997905c879;
op3val:0x3fd5703e5122d056; valaddr_reg:x3; val_offset:612*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 612*FLEN/8, x4, x1, x2)

inst_205:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x323636adde334 and fs2 == 1 and fe2 == 0x400 and fm2 == 0x9e1c8d4827133 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xef55d35952758 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc323636adde334; op2val:0xc009e1c8d4827133;
op3val:0x3fdef55d35952758; valaddr_reg:x3; val_offset:615*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 615*FLEN/8, x4, x1, x2)

inst_206:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x323636adde334 and fs2 == 1 and fe2 == 0x400 and fm2 == 0x9e1c8d4827133 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xef55d35952758 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc323636adde334; op2val:0xc009e1c8d4827133;
op3val:0x3fdef55d35952758; valaddr_reg:x3; val_offset:618*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 618*FLEN/8, x4, x1, x2)

inst_207:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x323636adde334 and fs2 == 1 and fe2 == 0x400 and fm2 == 0x9e1c8d4827133 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xef55d35952758 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc323636adde334; op2val:0xc009e1c8d4827133;
op3val:0x3fdef55d35952758; valaddr_reg:x3; val_offset:621*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 621*FLEN/8, x4, x1, x2)

inst_208:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x323636adde334 and fs2 == 1 and fe2 == 0x400 and fm2 == 0x9e1c8d4827133 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xef55d35952758 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc323636adde334; op2val:0xc009e1c8d4827133;
op3val:0x3fdef55d35952758; valaddr_reg:x3; val_offset:624*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 624*FLEN/8, x4, x1, x2)

inst_209:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x323636adde334 and fs2 == 1 and fe2 == 0x400 and fm2 == 0x9e1c8d4827133 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xef55d35952758 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc323636adde334; op2val:0xc009e1c8d4827133;
op3val:0x3fdef55d35952758; valaddr_reg:x3; val_offset:627*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 627*FLEN/8, x4, x1, x2)

inst_210:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x393b0214d2ff0 and fs2 == 1 and fe2 == 0x401 and fm2 == 0x1fe61b0d6c780 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x6042b372dd308 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc393b0214d2ff0; op2val:0xc011fe61b0d6c780;
op3val:0x3fe6042b372dd308; valaddr_reg:x3; val_offset:630*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 630*FLEN/8, x4, x1, x2)

inst_211:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x393b0214d2ff0 and fs2 == 1 and fe2 == 0x401 and fm2 == 0x1fe61b0d6c780 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x6042b372dd308 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc393b0214d2ff0; op2val:0xc011fe61b0d6c780;
op3val:0x3fe6042b372dd308; valaddr_reg:x3; val_offset:633*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 633*FLEN/8, x4, x1, x2)

inst_212:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x393b0214d2ff0 and fs2 == 1 and fe2 == 0x401 and fm2 == 0x1fe61b0d6c780 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x6042b372dd308 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc393b0214d2ff0; op2val:0xc011fe61b0d6c780;
op3val:0x3fe6042b372dd308; valaddr_reg:x3; val_offset:636*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 636*FLEN/8, x4, x1, x2)

inst_213:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x393b0214d2ff0 and fs2 == 1 and fe2 == 0x401 and fm2 == 0x1fe61b0d6c780 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x6042b372dd308 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc393b0214d2ff0; op2val:0xc011fe61b0d6c780;
op3val:0x3fe6042b372dd308; valaddr_reg:x3; val_offset:639*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 639*FLEN/8, x4, x1, x2)

inst_214:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x393b0214d2ff0 and fs2 == 1 and fe2 == 0x401 and fm2 == 0x1fe61b0d6c780 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x6042b372dd308 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc393b0214d2ff0; op2val:0xc011fe61b0d6c780;
op3val:0x3fe6042b372dd308; valaddr_reg:x3; val_offset:642*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 642*FLEN/8, x4, x1, x2)

inst_215:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x3bf8ebe405048 and fs2 == 1 and fe2 == 0x401 and fm2 == 0x4d9fa2ff77091 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x9bc7d3a0f24b2 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc3bf8ebe405048; op2val:0xc014d9fa2ff77091;
op3val:0x3fe9bc7d3a0f24b2; valaddr_reg:x3; val_offset:645*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 645*FLEN/8, x4, x1, x2)

inst_216:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x3bf8ebe405048 and fs2 == 1 and fe2 == 0x401 and fm2 == 0x4d9fa2ff77091 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x9bc7d3a0f24b2 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc3bf8ebe405048; op2val:0xc014d9fa2ff77091;
op3val:0x3fe9bc7d3a0f24b2; valaddr_reg:x3; val_offset:648*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 648*FLEN/8, x4, x1, x2)

inst_217:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x3bf8ebe405048 and fs2 == 1 and fe2 == 0x401 and fm2 == 0x4d9fa2ff77091 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x9bc7d3a0f24b2 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc3bf8ebe405048; op2val:0xc014d9fa2ff77091;
op3val:0x3fe9bc7d3a0f24b2; valaddr_reg:x3; val_offset:651*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 651*FLEN/8, x4, x1, x2)

inst_218:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x3bf8ebe405048 and fs2 == 1 and fe2 == 0x401 and fm2 == 0x4d9fa2ff77091 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x9bc7d3a0f24b2 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc3bf8ebe405048; op2val:0xc014d9fa2ff77091;
op3val:0x3fe9bc7d3a0f24b2; valaddr_reg:x3; val_offset:654*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 654*FLEN/8, x4, x1, x2)

inst_219:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x3bf8ebe405048 and fs2 == 1 and fe2 == 0x401 and fm2 == 0x4d9fa2ff77091 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x9bc7d3a0f24b2 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc3bf8ebe405048; op2val:0xc014d9fa2ff77091;
op3val:0x3fe9bc7d3a0f24b2; valaddr_reg:x3; val_offset:657*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 657*FLEN/8, x4, x1, x2)

inst_220:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x3f7b8a3867498 and fs2 == 1 and fe2 == 0x400 and fm2 == 0x834c0c3e6e6e3 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xe356a9e801198 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc3f7b8a3867498; op2val:0xc00834c0c3e6e6e3;
op3val:0x3fde356a9e801198; valaddr_reg:x3; val_offset:660*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 660*FLEN/8, x4, x1, x2)

inst_221:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x3f7b8a3867498 and fs2 == 1 and fe2 == 0x400 and fm2 == 0x834c0c3e6e6e3 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xe356a9e801198 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc3f7b8a3867498; op2val:0xc00834c0c3e6e6e3;
op3val:0x3fde356a9e801198; valaddr_reg:x3; val_offset:663*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 663*FLEN/8, x4, x1, x2)

inst_222:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x3f7b8a3867498 and fs2 == 1 and fe2 == 0x400 and fm2 == 0x834c0c3e6e6e3 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xe356a9e801198 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc3f7b8a3867498; op2val:0xc00834c0c3e6e6e3;
op3val:0x3fde356a9e801198; valaddr_reg:x3; val_offset:666*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 666*FLEN/8, x4, x1, x2)

inst_223:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x3f7b8a3867498 and fs2 == 1 and fe2 == 0x400 and fm2 == 0x834c0c3e6e6e3 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xe356a9e801198 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc3f7b8a3867498; op2val:0xc00834c0c3e6e6e3;
op3val:0x3fde356a9e801198; valaddr_reg:x3; val_offset:669*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 669*FLEN/8, x4, x1, x2)

inst_224:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x3f7b8a3867498 and fs2 == 1 and fe2 == 0x400 and fm2 == 0x834c0c3e6e6e3 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xe356a9e801198 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc3f7b8a3867498; op2val:0xc00834c0c3e6e6e3;
op3val:0x3fde356a9e801198; valaddr_reg:x3; val_offset:672*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 672*FLEN/8, x4, x1, x2)

inst_225:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x4086c2815fcdc and fs2 == 1 and fe2 == 0x400 and fm2 == 0x95f72cb036201 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xfc4aabb0213c8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc4086c2815fcdc; op2val:0xc0095f72cb036201;
op3val:0x3fdfc4aabb0213c8; valaddr_reg:x3; val_offset:675*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 675*FLEN/8, x4, x1, x2)

inst_226:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x4086c2815fcdc and fs2 == 1 and fe2 == 0x400 and fm2 == 0x95f72cb036201 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xfc4aabb0213c8 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc4086c2815fcdc; op2val:0xc0095f72cb036201;
op3val:0x3fdfc4aabb0213c8; valaddr_reg:x3; val_offset:678*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 678*FLEN/8, x4, x1, x2)

inst_227:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x4086c2815fcdc and fs2 == 1 and fe2 == 0x400 and fm2 == 0x95f72cb036201 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xfc4aabb0213c8 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc4086c2815fcdc; op2val:0xc0095f72cb036201;
op3val:0x3fdfc4aabb0213c8; valaddr_reg:x3; val_offset:681*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 681*FLEN/8, x4, x1, x2)

inst_228:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x4086c2815fcdc and fs2 == 1 and fe2 == 0x400 and fm2 == 0x95f72cb036201 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xfc4aabb0213c8 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc4086c2815fcdc; op2val:0xc0095f72cb036201;
op3val:0x3fdfc4aabb0213c8; valaddr_reg:x3; val_offset:684*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 684*FLEN/8, x4, x1, x2)

inst_229:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x4086c2815fcdc and fs2 == 1 and fe2 == 0x400 and fm2 == 0x95f72cb036201 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xfc4aabb0213c8 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc4086c2815fcdc; op2val:0xc0095f72cb036201;
op3val:0x3fdfc4aabb0213c8; valaddr_reg:x3; val_offset:687*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 687*FLEN/8, x4, x1, x2)

inst_230:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x42472c14be9a0 and fs2 == 1 and fe2 == 0x400 and fm2 == 0x00c2fbfbd6db4 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x433ca33cf8ce8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc42472c14be9a0; op2val:0xc0000c2fbfbd6db4;
op3val:0x3fd433ca33cf8ce8; valaddr_reg:x3; val_offset:690*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 690*FLEN/8, x4, x1, x2)

inst_231:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x42472c14be9a0 and fs2 == 1 and fe2 == 0x400 and fm2 == 0x00c2fbfbd6db4 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x433ca33cf8ce8 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc42472c14be9a0; op2val:0xc0000c2fbfbd6db4;
op3val:0x3fd433ca33cf8ce8; valaddr_reg:x3; val_offset:693*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 693*FLEN/8, x4, x1, x2)

inst_232:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x42472c14be9a0 and fs2 == 1 and fe2 == 0x400 and fm2 == 0x00c2fbfbd6db4 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x433ca33cf8ce8 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc42472c14be9a0; op2val:0xc0000c2fbfbd6db4;
op3val:0x3fd433ca33cf8ce8; valaddr_reg:x3; val_offset:696*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 696*FLEN/8, x4, x1, x2)

inst_233:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x42472c14be9a0 and fs2 == 1 and fe2 == 0x400 and fm2 == 0x00c2fbfbd6db4 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x433ca33cf8ce8 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc42472c14be9a0; op2val:0xc0000c2fbfbd6db4;
op3val:0x3fd433ca33cf8ce8; valaddr_reg:x3; val_offset:699*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 699*FLEN/8, x4, x1, x2)

inst_234:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x42472c14be9a0 and fs2 == 1 and fe2 == 0x400 and fm2 == 0x00c2fbfbd6db4 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x433ca33cf8ce8 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc42472c14be9a0; op2val:0xc0000c2fbfbd6db4;
op3val:0x3fd433ca33cf8ce8; valaddr_reg:x3; val_offset:702*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 702*FLEN/8, x4, x1, x2)

inst_235:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x44be43b41b4d4 and fs2 == 1 and fe2 == 0x401 and fm2 == 0x1ebcbdd0bf302 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x6bbbfc2633de5 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc44be43b41b4d4; op2val:0xc011ebcbdd0bf302;
op3val:0x3fe6bbbfc2633de5; valaddr_reg:x3; val_offset:705*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 705*FLEN/8, x4, x1, x2)

inst_236:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x44be43b41b4d4 and fs2 == 1 and fe2 == 0x401 and fm2 == 0x1ebcbdd0bf302 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x6bbbfc2633de5 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc44be43b41b4d4; op2val:0xc011ebcbdd0bf302;
op3val:0x3fe6bbbfc2633de5; valaddr_reg:x3; val_offset:708*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 708*FLEN/8, x4, x1, x2)

inst_237:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x44be43b41b4d4 and fs2 == 1 and fe2 == 0x401 and fm2 == 0x1ebcbdd0bf302 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x6bbbfc2633de5 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc44be43b41b4d4; op2val:0xc011ebcbdd0bf302;
op3val:0x3fe6bbbfc2633de5; valaddr_reg:x3; val_offset:711*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 711*FLEN/8, x4, x1, x2)

inst_238:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x44be43b41b4d4 and fs2 == 1 and fe2 == 0x401 and fm2 == 0x1ebcbdd0bf302 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x6bbbfc2633de5 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc44be43b41b4d4; op2val:0xc011ebcbdd0bf302;
op3val:0x3fe6bbbfc2633de5; valaddr_reg:x3; val_offset:714*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 714*FLEN/8, x4, x1, x2)

inst_239:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x44be43b41b4d4 and fs2 == 1 and fe2 == 0x401 and fm2 == 0x1ebcbdd0bf302 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x6bbbfc2633de5 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc44be43b41b4d4; op2val:0xc011ebcbdd0bf302;
op3val:0x3fe6bbbfc2633de5; valaddr_reg:x3; val_offset:717*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 717*FLEN/8, x4, x1, x2)

inst_240:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x47d3c9fa92d78 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xf4d5106d1efc9 and fs3 == 0 and fe3 == 0x3fb and fm3 == 0x40ad3f5eb6e20 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc47d3c9fa92d78; op2val:0xbfdf4d5106d1efc9;
op3val:0x3fb40ad3f5eb6e20; valaddr_reg:x3; val_offset:720*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 720*FLEN/8, x4, x1, x2)

inst_241:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x47d3c9fa92d78 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xf4d5106d1efc9 and fs3 == 0 and fe3 == 0x3fb and fm3 == 0x40ad3f5eb6e20 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc47d3c9fa92d78; op2val:0xbfdf4d5106d1efc9;
op3val:0x3fb40ad3f5eb6e20; valaddr_reg:x3; val_offset:723*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 723*FLEN/8, x4, x1, x2)

inst_242:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x47d3c9fa92d78 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xf4d5106d1efc9 and fs3 == 0 and fe3 == 0x3fb and fm3 == 0x40ad3f5eb6e20 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc47d3c9fa92d78; op2val:0xbfdf4d5106d1efc9;
op3val:0x3fb40ad3f5eb6e20; valaddr_reg:x3; val_offset:726*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 726*FLEN/8, x4, x1, x2)

inst_243:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x47d3c9fa92d78 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xf4d5106d1efc9 and fs3 == 0 and fe3 == 0x3fb and fm3 == 0x40ad3f5eb6e20 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc47d3c9fa92d78; op2val:0xbfdf4d5106d1efc9;
op3val:0x3fb40ad3f5eb6e20; valaddr_reg:x3; val_offset:729*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 729*FLEN/8, x4, x1, x2)

inst_244:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x47d3c9fa92d78 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xf4d5106d1efc9 and fs3 == 0 and fe3 == 0x3fb and fm3 == 0x40ad3f5eb6e20 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc47d3c9fa92d78; op2val:0xbfdf4d5106d1efc9;
op3val:0x3fb40ad3f5eb6e20; valaddr_reg:x3; val_offset:732*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 732*FLEN/8, x4, x1, x2)

inst_245:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x4b6180eb03660 and fs2 == 1 and fe2 == 0x401 and fm2 == 0x21320c75cbbe4 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x7659dbb58a146 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc4b6180eb03660; op2val:0xc0121320c75cbbe4;
op3val:0x3fe7659dbb58a146; valaddr_reg:x3; val_offset:735*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 735*FLEN/8, x4, x1, x2)

inst_246:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x4b6180eb03660 and fs2 == 1 and fe2 == 0x401 and fm2 == 0x21320c75cbbe4 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x7659dbb58a146 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc4b6180eb03660; op2val:0xc0121320c75cbbe4;
op3val:0x3fe7659dbb58a146; valaddr_reg:x3; val_offset:738*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 738*FLEN/8, x4, x1, x2)

inst_247:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x4b6180eb03660 and fs2 == 1 and fe2 == 0x401 and fm2 == 0x21320c75cbbe4 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x7659dbb58a146 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc4b6180eb03660; op2val:0xc0121320c75cbbe4;
op3val:0x3fe7659dbb58a146; valaddr_reg:x3; val_offset:741*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 741*FLEN/8, x4, x1, x2)

inst_248:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x4b6180eb03660 and fs2 == 1 and fe2 == 0x401 and fm2 == 0x21320c75cbbe4 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x7659dbb58a146 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc4b6180eb03660; op2val:0xc0121320c75cbbe4;
op3val:0x3fe7659dbb58a146; valaddr_reg:x3; val_offset:744*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 744*FLEN/8, x4, x1, x2)

inst_249:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x4b6180eb03660 and fs2 == 1 and fe2 == 0x401 and fm2 == 0x21320c75cbbe4 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x7659dbb58a146 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc4b6180eb03660; op2val:0xc0121320c75cbbe4;
op3val:0x3fe7659dbb58a146; valaddr_reg:x3; val_offset:747*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 747*FLEN/8, x4, x1, x2)

inst_250:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x4c1b8ab91e9cc and fs2 == 1 and fe2 == 0x400 and fm2 == 0x8ab5e2660ad67 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x00072c5757bff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc4c1b8ab91e9cc; op2val:0xc008ab5e2660ad67;
op3val:0x3fe00072c5757bff; valaddr_reg:x3; val_offset:750*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 750*FLEN/8, x4, x1, x2)

inst_251:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x4c1b8ab91e9cc and fs2 == 1 and fe2 == 0x400 and fm2 == 0x8ab5e2660ad67 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x00072c5757bff and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc4c1b8ab91e9cc; op2val:0xc008ab5e2660ad67;
op3val:0x3fe00072c5757bff; valaddr_reg:x3; val_offset:753*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 753*FLEN/8, x4, x1, x2)

inst_252:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x4c1b8ab91e9cc and fs2 == 1 and fe2 == 0x400 and fm2 == 0x8ab5e2660ad67 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x00072c5757bff and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc4c1b8ab91e9cc; op2val:0xc008ab5e2660ad67;
op3val:0x3fe00072c5757bff; valaddr_reg:x3; val_offset:756*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 756*FLEN/8, x4, x1, x2)

inst_253:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x4c1b8ab91e9cc and fs2 == 1 and fe2 == 0x400 and fm2 == 0x8ab5e2660ad67 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x00072c5757bff and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc4c1b8ab91e9cc; op2val:0xc008ab5e2660ad67;
op3val:0x3fe00072c5757bff; valaddr_reg:x3; val_offset:759*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 759*FLEN/8, x4, x1, x2)

inst_254:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x4c1b8ab91e9cc and fs2 == 1 and fe2 == 0x400 and fm2 == 0x8ab5e2660ad67 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x00072c5757bff and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc4c1b8ab91e9cc; op2val:0xc008ab5e2660ad67;
op3val:0x3fe00072c5757bff; valaddr_reg:x3; val_offset:762*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 762*FLEN/8, x4, x1, x2)

inst_255:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x5087d1804040c and fs2 == 1 and fe2 == 0x401 and fm2 == 0x33a850e9d4cdc and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x947023bc1e0c8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc5087d1804040c; op2val:0xc0133a850e9d4cdc;
op3val:0x3fe947023bc1e0c8; valaddr_reg:x3; val_offset:765*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 765*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_3)

inst_256:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x5087d1804040c and fs2 == 1 and fe2 == 0x401 and fm2 == 0x33a850e9d4cdc and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x947023bc1e0c8 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc5087d1804040c; op2val:0xc0133a850e9d4cdc;
op3val:0x3fe947023bc1e0c8; valaddr_reg:x3; val_offset:768*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 768*FLEN/8, x4, x1, x2)

inst_257:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x5087d1804040c and fs2 == 1 and fe2 == 0x401 and fm2 == 0x33a850e9d4cdc and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x947023bc1e0c8 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc5087d1804040c; op2val:0xc0133a850e9d4cdc;
op3val:0x3fe947023bc1e0c8; valaddr_reg:x3; val_offset:771*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 771*FLEN/8, x4, x1, x2)

inst_258:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x5087d1804040c and fs2 == 1 and fe2 == 0x401 and fm2 == 0x33a850e9d4cdc and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x947023bc1e0c8 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc5087d1804040c; op2val:0xc0133a850e9d4cdc;
op3val:0x3fe947023bc1e0c8; valaddr_reg:x3; val_offset:774*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 774*FLEN/8, x4, x1, x2)

inst_259:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x5087d1804040c and fs2 == 1 and fe2 == 0x401 and fm2 == 0x33a850e9d4cdc and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x947023bc1e0c8 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc5087d1804040c; op2val:0xc0133a850e9d4cdc;
op3val:0x3fe947023bc1e0c8; valaddr_reg:x3; val_offset:777*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 777*FLEN/8, x4, x1, x2)

inst_260:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x5cb935cdfb5dc and fs2 == 1 and fe2 == 0x400 and fm2 == 0xdb227ad4c34ea and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x439d4f6036e9a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc5cb935cdfb5dc; op2val:0xc00db227ad4c34ea;
op3val:0x3fe439d4f6036e9a; valaddr_reg:x3; val_offset:780*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 780*FLEN/8, x4, x1, x2)

inst_261:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x5cb935cdfb5dc and fs2 == 1 and fe2 == 0x400 and fm2 == 0xdb227ad4c34ea and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x439d4f6036e9a and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc5cb935cdfb5dc; op2val:0xc00db227ad4c34ea;
op3val:0x3fe439d4f6036e9a; valaddr_reg:x3; val_offset:783*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 783*FLEN/8, x4, x1, x2)

inst_262:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x5cb935cdfb5dc and fs2 == 1 and fe2 == 0x400 and fm2 == 0xdb227ad4c34ea and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x439d4f6036e9a and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc5cb935cdfb5dc; op2val:0xc00db227ad4c34ea;
op3val:0x3fe439d4f6036e9a; valaddr_reg:x3; val_offset:786*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 786*FLEN/8, x4, x1, x2)

inst_263:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x5cb935cdfb5dc and fs2 == 1 and fe2 == 0x400 and fm2 == 0xdb227ad4c34ea and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x439d4f6036e9a and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc5cb935cdfb5dc; op2val:0xc00db227ad4c34ea;
op3val:0x3fe439d4f6036e9a; valaddr_reg:x3; val_offset:789*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 789*FLEN/8, x4, x1, x2)

inst_264:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x5cb935cdfb5dc and fs2 == 1 and fe2 == 0x400 and fm2 == 0xdb227ad4c34ea and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x439d4f6036e9a and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc5cb935cdfb5dc; op2val:0xc00db227ad4c34ea;
op3val:0x3fe439d4f6036e9a; valaddr_reg:x3; val_offset:792*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 792*FLEN/8, x4, x1, x2)

inst_265:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x5f586decce698 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x145abaa6a8d64 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x7b47dbc4eeb7c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc5f586decce698; op2val:0xbff145abaa6a8d64;
op3val:0x3fc7b47dbc4eeb7c; valaddr_reg:x3; val_offset:795*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 795*FLEN/8, x4, x1, x2)

inst_266:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x5f586decce698 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x145abaa6a8d64 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x7b47dbc4eeb7c and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc5f586decce698; op2val:0xbff145abaa6a8d64;
op3val:0x3fc7b47dbc4eeb7c; valaddr_reg:x3; val_offset:798*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 798*FLEN/8, x4, x1, x2)

inst_267:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x5f586decce698 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x145abaa6a8d64 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x7b47dbc4eeb7c and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc5f586decce698; op2val:0xbff145abaa6a8d64;
op3val:0x3fc7b47dbc4eeb7c; valaddr_reg:x3; val_offset:801*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 801*FLEN/8, x4, x1, x2)

inst_268:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x5f586decce698 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x145abaa6a8d64 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x7b47dbc4eeb7c and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc5f586decce698; op2val:0xbff145abaa6a8d64;
op3val:0x3fc7b47dbc4eeb7c; valaddr_reg:x3; val_offset:804*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 804*FLEN/8, x4, x1, x2)

inst_269:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x5f586decce698 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x145abaa6a8d64 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x7b47dbc4eeb7c and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc5f586decce698; op2val:0xbff145abaa6a8d64;
op3val:0x3fc7b47dbc4eeb7c; valaddr_reg:x3; val_offset:807*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 807*FLEN/8, x4, x1, x2)

inst_270:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x663db5d44aa90 and fs2 == 1 and fe2 == 0x400 and fm2 == 0x425a75c036cc1 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xc318352e219bc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc663db5d44aa90; op2val:0xc00425a75c036cc1;
op3val:0x3fdc318352e219bc; valaddr_reg:x3; val_offset:810*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 810*FLEN/8, x4, x1, x2)

inst_271:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x663db5d44aa90 and fs2 == 1 and fe2 == 0x400 and fm2 == 0x425a75c036cc1 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xc318352e219bc and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc663db5d44aa90; op2val:0xc00425a75c036cc1;
op3val:0x3fdc318352e219bc; valaddr_reg:x3; val_offset:813*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 813*FLEN/8, x4, x1, x2)

inst_272:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x663db5d44aa90 and fs2 == 1 and fe2 == 0x400 and fm2 == 0x425a75c036cc1 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xc318352e219bc and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc663db5d44aa90; op2val:0xc00425a75c036cc1;
op3val:0x3fdc318352e219bc; valaddr_reg:x3; val_offset:816*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 816*FLEN/8, x4, x1, x2)

inst_273:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x663db5d44aa90 and fs2 == 1 and fe2 == 0x400 and fm2 == 0x425a75c036cc1 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xc318352e219bc and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc663db5d44aa90; op2val:0xc00425a75c036cc1;
op3val:0x3fdc318352e219bc; valaddr_reg:x3; val_offset:819*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 819*FLEN/8, x4, x1, x2)

inst_274:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x663db5d44aa90 and fs2 == 1 and fe2 == 0x400 and fm2 == 0x425a75c036cc1 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xc318352e219bc and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc663db5d44aa90; op2val:0xc00425a75c036cc1;
op3val:0x3fdc318352e219bc; valaddr_reg:x3; val_offset:822*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 822*FLEN/8, x4, x1, x2)

inst_275:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x6ec05c52f0704 and fs2 == 1 and fe2 == 0x400 and fm2 == 0x1a6159c78d522 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x948b5d351a5f0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc6ec05c52f0704; op2val:0xc001a6159c78d522;
op3val:0x3fd948b5d351a5f0; valaddr_reg:x3; val_offset:825*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 825*FLEN/8, x4, x1, x2)

inst_276:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x6ec05c52f0704 and fs2 == 1 and fe2 == 0x400 and fm2 == 0x1a6159c78d522 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x948b5d351a5f0 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc6ec05c52f0704; op2val:0xc001a6159c78d522;
op3val:0x3fd948b5d351a5f0; valaddr_reg:x3; val_offset:828*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 828*FLEN/8, x4, x1, x2)

inst_277:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x6ec05c52f0704 and fs2 == 1 and fe2 == 0x400 and fm2 == 0x1a6159c78d522 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x948b5d351a5f0 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc6ec05c52f0704; op2val:0xc001a6159c78d522;
op3val:0x3fd948b5d351a5f0; valaddr_reg:x3; val_offset:831*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 831*FLEN/8, x4, x1, x2)

inst_278:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x6ec05c52f0704 and fs2 == 1 and fe2 == 0x400 and fm2 == 0x1a6159c78d522 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x948b5d351a5f0 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc6ec05c52f0704; op2val:0xc001a6159c78d522;
op3val:0x3fd948b5d351a5f0; valaddr_reg:x3; val_offset:834*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 834*FLEN/8, x4, x1, x2)

inst_279:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x6ec05c52f0704 and fs2 == 1 and fe2 == 0x400 and fm2 == 0x1a6159c78d522 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x948b5d351a5f0 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc6ec05c52f0704; op2val:0xc001a6159c78d522;
op3val:0x3fd948b5d351a5f0; valaddr_reg:x3; val_offset:837*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 837*FLEN/8, x4, x1, x2)

inst_280:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x7e6ab13066e00 and fs2 == 1 and fe2 == 0x400 and fm2 == 0x14874e9e696a7 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x9d1526bcc4bea and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc7e6ab13066e00; op2val:0xc0014874e9e696a7;
op3val:0x3fd9d1526bcc4bea; valaddr_reg:x3; val_offset:840*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 840*FLEN/8, x4, x1, x2)

inst_281:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x7e6ab13066e00 and fs2 == 1 and fe2 == 0x400 and fm2 == 0x14874e9e696a7 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x9d1526bcc4bea and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc7e6ab13066e00; op2val:0xc0014874e9e696a7;
op3val:0x3fd9d1526bcc4bea; valaddr_reg:x3; val_offset:843*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 843*FLEN/8, x4, x1, x2)

inst_282:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x7e6ab13066e00 and fs2 == 1 and fe2 == 0x400 and fm2 == 0x14874e9e696a7 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x9d1526bcc4bea and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc7e6ab13066e00; op2val:0xc0014874e9e696a7;
op3val:0x3fd9d1526bcc4bea; valaddr_reg:x3; val_offset:846*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 846*FLEN/8, x4, x1, x2)

inst_283:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x7e6ab13066e00 and fs2 == 1 and fe2 == 0x400 and fm2 == 0x14874e9e696a7 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x9d1526bcc4bea and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc7e6ab13066e00; op2val:0xc0014874e9e696a7;
op3val:0x3fd9d1526bcc4bea; valaddr_reg:x3; val_offset:849*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 849*FLEN/8, x4, x1, x2)

inst_284:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x7e6ab13066e00 and fs2 == 1 and fe2 == 0x400 and fm2 == 0x14874e9e696a7 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x9d1526bcc4bea and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc7e6ab13066e00; op2val:0xc0014874e9e696a7;
op3val:0x3fd9d1526bcc4bea; valaddr_reg:x3; val_offset:852*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 852*FLEN/8, x4, x1, x2)

inst_285:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x89065a920a7f8 and fs2 == 1 and fe2 == 0x400 and fm2 == 0xa0ed1c611a45e and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x400b2cd077f49 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc89065a920a7f8; op2val:0xc00a0ed1c611a45e;
op3val:0x3fe400b2cd077f49; valaddr_reg:x3; val_offset:855*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 855*FLEN/8, x4, x1, x2)

inst_286:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x89065a920a7f8 and fs2 == 1 and fe2 == 0x400 and fm2 == 0xa0ed1c611a45e and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x400b2cd077f49 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc89065a920a7f8; op2val:0xc00a0ed1c611a45e;
op3val:0x3fe400b2cd077f49; valaddr_reg:x3; val_offset:858*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 858*FLEN/8, x4, x1, x2)

inst_287:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x89065a920a7f8 and fs2 == 1 and fe2 == 0x400 and fm2 == 0xa0ed1c611a45e and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x400b2cd077f49 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc89065a920a7f8; op2val:0xc00a0ed1c611a45e;
op3val:0x3fe400b2cd077f49; valaddr_reg:x3; val_offset:861*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 861*FLEN/8, x4, x1, x2)

inst_288:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x89065a920a7f8 and fs2 == 1 and fe2 == 0x400 and fm2 == 0xa0ed1c611a45e and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x400b2cd077f49 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc89065a920a7f8; op2val:0xc00a0ed1c611a45e;
op3val:0x3fe400b2cd077f49; valaddr_reg:x3; val_offset:864*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 864*FLEN/8, x4, x1, x2)

inst_289:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x89065a920a7f8 and fs2 == 1 and fe2 == 0x400 and fm2 == 0xa0ed1c611a45e and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x400b2cd077f49 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc89065a920a7f8; op2val:0xc00a0ed1c611a45e;
op3val:0x3fe400b2cd077f49; valaddr_reg:x3; val_offset:867*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 867*FLEN/8, x4, x1, x2)

inst_290:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x8a93e93a6ea74 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0xca10235cc712e and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x6102bf812b3f8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc8a93e93a6ea74; op2val:0xbffca10235cc712e;
op3val:0x3fd6102bf812b3f8; valaddr_reg:x3; val_offset:870*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 870*FLEN/8, x4, x1, x2)

inst_291:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x8a93e93a6ea74 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0xca10235cc712e and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x6102bf812b3f8 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc8a93e93a6ea74; op2val:0xbffca10235cc712e;
op3val:0x3fd6102bf812b3f8; valaddr_reg:x3; val_offset:873*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 873*FLEN/8, x4, x1, x2)

inst_292:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x8a93e93a6ea74 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0xca10235cc712e and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x6102bf812b3f8 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc8a93e93a6ea74; op2val:0xbffca10235cc712e;
op3val:0x3fd6102bf812b3f8; valaddr_reg:x3; val_offset:876*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 876*FLEN/8, x4, x1, x2)

inst_293:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x8a93e93a6ea74 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0xca10235cc712e and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x6102bf812b3f8 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc8a93e93a6ea74; op2val:0xbffca10235cc712e;
op3val:0x3fd6102bf812b3f8; valaddr_reg:x3; val_offset:879*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 879*FLEN/8, x4, x1, x2)

inst_294:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x8a93e93a6ea74 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0xca10235cc712e and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x6102bf812b3f8 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc8a93e93a6ea74; op2val:0xbffca10235cc712e;
op3val:0x3fd6102bf812b3f8; valaddr_reg:x3; val_offset:882*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 882*FLEN/8, x4, x1, x2)

inst_295:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x90f2d42cb7c9c and fs2 == 1 and fe2 == 0x400 and fm2 == 0x44228901d89fb and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xfba96b5d9e518 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc90f2d42cb7c9c; op2val:0xc0044228901d89fb;
op3val:0x3fdfba96b5d9e518; valaddr_reg:x3; val_offset:885*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 885*FLEN/8, x4, x1, x2)

inst_296:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x90f2d42cb7c9c and fs2 == 1 and fe2 == 0x400 and fm2 == 0x44228901d89fb and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xfba96b5d9e518 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc90f2d42cb7c9c; op2val:0xc0044228901d89fb;
op3val:0x3fdfba96b5d9e518; valaddr_reg:x3; val_offset:888*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 888*FLEN/8, x4, x1, x2)

inst_297:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x90f2d42cb7c9c and fs2 == 1 and fe2 == 0x400 and fm2 == 0x44228901d89fb and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xfba96b5d9e518 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc90f2d42cb7c9c; op2val:0xc0044228901d89fb;
op3val:0x3fdfba96b5d9e518; valaddr_reg:x3; val_offset:891*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 891*FLEN/8, x4, x1, x2)

inst_298:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x90f2d42cb7c9c and fs2 == 1 and fe2 == 0x400 and fm2 == 0x44228901d89fb and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xfba96b5d9e518 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc90f2d42cb7c9c; op2val:0xc0044228901d89fb;
op3val:0x3fdfba96b5d9e518; valaddr_reg:x3; val_offset:894*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 894*FLEN/8, x4, x1, x2)

inst_299:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x90f2d42cb7c9c and fs2 == 1 and fe2 == 0x400 and fm2 == 0x44228901d89fb and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xfba96b5d9e518 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc90f2d42cb7c9c; op2val:0xc0044228901d89fb;
op3val:0x3fdfba96b5d9e518; valaddr_reg:x3; val_offset:897*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 897*FLEN/8, x4, x1, x2)

inst_300:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x93e17a54dbd28 and fs2 == 1 and fe2 == 0x401 and fm2 == 0x10abdb421c610 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xae2eb38110cc5 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc93e17a54dbd28; op2val:0xc0110abdb421c610;
op3val:0x3feae2eb38110cc5; valaddr_reg:x3; val_offset:900*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 900*FLEN/8, x4, x1, x2)

inst_301:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x93e17a54dbd28 and fs2 == 1 and fe2 == 0x401 and fm2 == 0x10abdb421c610 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xae2eb38110cc5 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc93e17a54dbd28; op2val:0xc0110abdb421c610;
op3val:0x3feae2eb38110cc5; valaddr_reg:x3; val_offset:903*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 903*FLEN/8, x4, x1, x2)

inst_302:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x93e17a54dbd28 and fs2 == 1 and fe2 == 0x401 and fm2 == 0x10abdb421c610 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xae2eb38110cc5 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc93e17a54dbd28; op2val:0xc0110abdb421c610;
op3val:0x3feae2eb38110cc5; valaddr_reg:x3; val_offset:906*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 906*FLEN/8, x4, x1, x2)

inst_303:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x93e17a54dbd28 and fs2 == 1 and fe2 == 0x401 and fm2 == 0x10abdb421c610 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xae2eb38110cc5 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc93e17a54dbd28; op2val:0xc0110abdb421c610;
op3val:0x3feae2eb38110cc5; valaddr_reg:x3; val_offset:909*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 909*FLEN/8, x4, x1, x2)

inst_304:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x93e17a54dbd28 and fs2 == 1 and fe2 == 0x401 and fm2 == 0x10abdb421c610 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xae2eb38110cc5 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc93e17a54dbd28; op2val:0xc0110abdb421c610;
op3val:0x3feae2eb38110cc5; valaddr_reg:x3; val_offset:912*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 912*FLEN/8, x4, x1, x2)

inst_305:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xa09915a9c61f4 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0xea5b3ec900a1e and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x8efcc006ea84e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fca09915a9c61f4; op2val:0xbffea5b3ec900a1e;
op3val:0x3fd8efcc006ea84e; valaddr_reg:x3; val_offset:915*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 915*FLEN/8, x4, x1, x2)

inst_306:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xa09915a9c61f4 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0xea5b3ec900a1e and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x8efcc006ea84e and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fca09915a9c61f4; op2val:0xbffea5b3ec900a1e;
op3val:0x3fd8efcc006ea84e; valaddr_reg:x3; val_offset:918*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 918*FLEN/8, x4, x1, x2)

inst_307:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xa09915a9c61f4 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0xea5b3ec900a1e and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x8efcc006ea84e and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fca09915a9c61f4; op2val:0xbffea5b3ec900a1e;
op3val:0x3fd8efcc006ea84e; valaddr_reg:x3; val_offset:921*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 921*FLEN/8, x4, x1, x2)

inst_308:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xa09915a9c61f4 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0xea5b3ec900a1e and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x8efcc006ea84e and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fca09915a9c61f4; op2val:0xbffea5b3ec900a1e;
op3val:0x3fd8efcc006ea84e; valaddr_reg:x3; val_offset:924*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 924*FLEN/8, x4, x1, x2)

inst_309:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xa09915a9c61f4 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0xea5b3ec900a1e and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x8efcc006ea84e and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fca09915a9c61f4; op2val:0xbffea5b3ec900a1e;
op3val:0x3fd8efcc006ea84e; valaddr_reg:x3; val_offset:927*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 927*FLEN/8, x4, x1, x2)

inst_310:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xa2a5f5b9a588c and fs2 == 1 and fe2 == 0x3ff and fm2 == 0xd109eb5aea847 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x7c3fd6076fd12 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fca2a5f5b9a588c; op2val:0xbffd109eb5aea847;
op3val:0x3fd7c3fd6076fd12; valaddr_reg:x3; val_offset:930*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 930*FLEN/8, x4, x1, x2)

inst_311:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xa2a5f5b9a588c and fs2 == 1 and fe2 == 0x3ff and fm2 == 0xd109eb5aea847 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x7c3fd6076fd12 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fca2a5f5b9a588c; op2val:0xbffd109eb5aea847;
op3val:0x3fd7c3fd6076fd12; valaddr_reg:x3; val_offset:933*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 933*FLEN/8, x4, x1, x2)

inst_312:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xa2a5f5b9a588c and fs2 == 1 and fe2 == 0x3ff and fm2 == 0xd109eb5aea847 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x7c3fd6076fd12 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fca2a5f5b9a588c; op2val:0xbffd109eb5aea847;
op3val:0x3fd7c3fd6076fd12; valaddr_reg:x3; val_offset:936*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 936*FLEN/8, x4, x1, x2)

inst_313:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xa2a5f5b9a588c and fs2 == 1 and fe2 == 0x3ff and fm2 == 0xd109eb5aea847 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x7c3fd6076fd12 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fca2a5f5b9a588c; op2val:0xbffd109eb5aea847;
op3val:0x3fd7c3fd6076fd12; valaddr_reg:x3; val_offset:939*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 939*FLEN/8, x4, x1, x2)

inst_314:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xa2a5f5b9a588c and fs2 == 1 and fe2 == 0x3ff and fm2 == 0xd109eb5aea847 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x7c3fd6076fd12 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fca2a5f5b9a588c; op2val:0xbffd109eb5aea847;
op3val:0x3fd7c3fd6076fd12; valaddr_reg:x3; val_offset:942*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 942*FLEN/8, x4, x1, x2)

inst_315:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xa93ac41d4b2fc and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xfe472a2eb2a94 and fs3 == 0 and fe3 == 0x3fb and fm3 == 0xa7cca407fab48 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fca93ac41d4b2fc; op2val:0xbfdfe472a2eb2a94;
op3val:0x3fba7cca407fab48; valaddr_reg:x3; val_offset:945*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 945*FLEN/8, x4, x1, x2)

inst_316:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xa93ac41d4b2fc and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xfe472a2eb2a94 and fs3 == 0 and fe3 == 0x3fb and fm3 == 0xa7cca407fab48 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fca93ac41d4b2fc; op2val:0xbfdfe472a2eb2a94;
op3val:0x3fba7cca407fab48; valaddr_reg:x3; val_offset:948*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 948*FLEN/8, x4, x1, x2)

inst_317:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xa93ac41d4b2fc and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xfe472a2eb2a94 and fs3 == 0 and fe3 == 0x3fb and fm3 == 0xa7cca407fab48 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fca93ac41d4b2fc; op2val:0xbfdfe472a2eb2a94;
op3val:0x3fba7cca407fab48; valaddr_reg:x3; val_offset:951*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 951*FLEN/8, x4, x1, x2)

inst_318:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xa93ac41d4b2fc and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xfe472a2eb2a94 and fs3 == 0 and fe3 == 0x3fb and fm3 == 0xa7cca407fab48 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fca93ac41d4b2fc; op2val:0xbfdfe472a2eb2a94;
op3val:0x3fba7cca407fab48; valaddr_reg:x3; val_offset:954*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 954*FLEN/8, x4, x1, x2)

inst_319:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xa93ac41d4b2fc and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xfe472a2eb2a94 and fs3 == 0 and fe3 == 0x3fb and fm3 == 0xa7cca407fab48 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fca93ac41d4b2fc; op2val:0xbfdfe472a2eb2a94;
op3val:0x3fba7cca407fab48; valaddr_reg:x3; val_offset:957*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 957*FLEN/8, x4, x1, x2)

inst_320:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xbbdb271acf804 and fs2 == 1 and fe2 == 0x400 and fm2 == 0x9fe38208c3e05 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x68895c964fbc5 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fcbbdb271acf804; op2val:0xc009fe38208c3e05;
op3val:0x3fe68895c964fbc5; valaddr_reg:x3; val_offset:960*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 960*FLEN/8, x4, x1, x2)

inst_321:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xbbdb271acf804 and fs2 == 1 and fe2 == 0x400 and fm2 == 0x9fe38208c3e05 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x68895c964fbc5 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fcbbdb271acf804; op2val:0xc009fe38208c3e05;
op3val:0x3fe68895c964fbc5; valaddr_reg:x3; val_offset:963*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 963*FLEN/8, x4, x1, x2)

inst_322:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xbbdb271acf804 and fs2 == 1 and fe2 == 0x400 and fm2 == 0x9fe38208c3e05 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x68895c964fbc5 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fcbbdb271acf804; op2val:0xc009fe38208c3e05;
op3val:0x3fe68895c964fbc5; valaddr_reg:x3; val_offset:966*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 966*FLEN/8, x4, x1, x2)

inst_323:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xbbdb271acf804 and fs2 == 1 and fe2 == 0x400 and fm2 == 0x9fe38208c3e05 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x68895c964fbc5 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fcbbdb271acf804; op2val:0xc009fe38208c3e05;
op3val:0x3fe68895c964fbc5; valaddr_reg:x3; val_offset:969*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 969*FLEN/8, x4, x1, x2)

inst_324:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xbbdb271acf804 and fs2 == 1 and fe2 == 0x400 and fm2 == 0x9fe38208c3e05 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x68895c964fbc5 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fcbbdb271acf804; op2val:0xc009fe38208c3e05;
op3val:0x3fe68895c964fbc5; valaddr_reg:x3; val_offset:972*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 972*FLEN/8, x4, x1, x2)

inst_325:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xbbf6f08f22524 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x315899829c8f7 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x08c56ddb28e36 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fcbbf6f08f22524; op2val:0xbff315899829c8f7;
op3val:0x3fd08c56ddb28e36; valaddr_reg:x3; val_offset:975*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 975*FLEN/8, x4, x1, x2)

inst_326:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xbbf6f08f22524 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x315899829c8f7 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x08c56ddb28e36 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fcbbf6f08f22524; op2val:0xbff315899829c8f7;
op3val:0x3fd08c56ddb28e36; valaddr_reg:x3; val_offset:978*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 978*FLEN/8, x4, x1, x2)

inst_327:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xbbf6f08f22524 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x315899829c8f7 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x08c56ddb28e36 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fcbbf6f08f22524; op2val:0xbff315899829c8f7;
op3val:0x3fd08c56ddb28e36; valaddr_reg:x3; val_offset:981*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 981*FLEN/8, x4, x1, x2)

inst_328:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xbbf6f08f22524 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x315899829c8f7 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x08c56ddb28e36 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fcbbf6f08f22524; op2val:0xbff315899829c8f7;
op3val:0x3fd08c56ddb28e36; valaddr_reg:x3; val_offset:984*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 984*FLEN/8, x4, x1, x2)

inst_329:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xbbf6f08f22524 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x315899829c8f7 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x08c56ddb28e36 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fcbbf6f08f22524; op2val:0xbff315899829c8f7;
op3val:0x3fd08c56ddb28e36; valaddr_reg:x3; val_offset:987*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 987*FLEN/8, x4, x1, x2)

inst_330:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xbe0c51ef53b68 and fs2 == 1 and fe2 == 0x401 and fm2 == 0x088846101f658 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xccea251dcb599 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fcbe0c51ef53b68; op2val:0xc01088846101f658;
op3val:0x3feccea251dcb599; valaddr_reg:x3; val_offset:990*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 990*FLEN/8, x4, x1, x2)

inst_331:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xbe0c51ef53b68 and fs2 == 1 and fe2 == 0x401 and fm2 == 0x088846101f658 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xccea251dcb599 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fcbe0c51ef53b68; op2val:0xc01088846101f658;
op3val:0x3feccea251dcb599; valaddr_reg:x3; val_offset:993*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 993*FLEN/8, x4, x1, x2)

inst_332:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xbe0c51ef53b68 and fs2 == 1 and fe2 == 0x401 and fm2 == 0x088846101f658 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xccea251dcb599 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fcbe0c51ef53b68; op2val:0xc01088846101f658;
op3val:0x3feccea251dcb599; valaddr_reg:x3; val_offset:996*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 996*FLEN/8, x4, x1, x2)

inst_333:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xbe0c51ef53b68 and fs2 == 1 and fe2 == 0x401 and fm2 == 0x088846101f658 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xccea251dcb599 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fcbe0c51ef53b68; op2val:0xc01088846101f658;
op3val:0x3feccea251dcb599; valaddr_reg:x3; val_offset:999*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 999*FLEN/8, x4, x1, x2)

inst_334:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xbe0c51ef53b68 and fs2 == 1 and fe2 == 0x401 and fm2 == 0x088846101f658 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xccea251dcb599 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fcbe0c51ef53b68; op2val:0xc01088846101f658;
op3val:0x3feccea251dcb599; valaddr_reg:x3; val_offset:1002*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1002*FLEN/8, x4, x1, x2)

inst_335:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xc0fd97e4edb94 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xe268285939431 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0xa70a12e36c758 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fcc0fd97e4edb94; op2val:0xbfee268285939431;
op3val:0x3fca70a12e36c758; valaddr_reg:x3; val_offset:1005*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1005*FLEN/8, x4, x1, x2)

inst_336:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xc0fd97e4edb94 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xe268285939431 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0xa70a12e36c758 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fcc0fd97e4edb94; op2val:0xbfee268285939431;
op3val:0x3fca70a12e36c758; valaddr_reg:x3; val_offset:1008*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1008*FLEN/8, x4, x1, x2)

inst_337:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xc0fd97e4edb94 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xe268285939431 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0xa70a12e36c758 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fcc0fd97e4edb94; op2val:0xbfee268285939431;
op3val:0x3fca70a12e36c758; valaddr_reg:x3; val_offset:1011*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1011*FLEN/8, x4, x1, x2)

inst_338:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xc0fd97e4edb94 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xe268285939431 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0xa70a12e36c758 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fcc0fd97e4edb94; op2val:0xbfee268285939431;
op3val:0x3fca70a12e36c758; valaddr_reg:x3; val_offset:1014*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1014*FLEN/8, x4, x1, x2)

inst_339:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xc0fd97e4edb94 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xe268285939431 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0xa70a12e36c758 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fcc0fd97e4edb94; op2val:0xbfee268285939431;
op3val:0x3fca70a12e36c758; valaddr_reg:x3; val_offset:1017*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1017*FLEN/8, x4, x1, x2)

inst_340:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xc211756ee9dac and fs2 == 1 and fe2 == 0x3fa and fm2 == 0x01d9183f02d40 and fs3 == 0 and fe3 == 0x3f7 and fm3 == 0xc55132514e100 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fcc211756ee9dac; op2val:0xbfa01d9183f02d40;
op3val:0x3f7c55132514e100; valaddr_reg:x3; val_offset:1020*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1020*FLEN/8, x4, x1, x2)

inst_341:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xc211756ee9dac and fs2 == 1 and fe2 == 0x3fa and fm2 == 0x01d9183f02d40 and fs3 == 0 and fe3 == 0x3f7 and fm3 == 0xc55132514e100 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fcc211756ee9dac; op2val:0xbfa01d9183f02d40;
op3val:0x3f7c55132514e100; valaddr_reg:x3; val_offset:1023*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1023*FLEN/8, x4, x1, x2)

inst_342:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xc211756ee9dac and fs2 == 1 and fe2 == 0x3fa and fm2 == 0x01d9183f02d40 and fs3 == 0 and fe3 == 0x3f7 and fm3 == 0xc55132514e100 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fcc211756ee9dac; op2val:0xbfa01d9183f02d40;
op3val:0x3f7c55132514e100; valaddr_reg:x3; val_offset:1026*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1026*FLEN/8, x4, x1, x2)

inst_343:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xc211756ee9dac and fs2 == 1 and fe2 == 0x3fa and fm2 == 0x01d9183f02d40 and fs3 == 0 and fe3 == 0x3f7 and fm3 == 0xc55132514e100 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fcc211756ee9dac; op2val:0xbfa01d9183f02d40;
op3val:0x3f7c55132514e100; valaddr_reg:x3; val_offset:1029*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1029*FLEN/8, x4, x1, x2)

inst_344:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xc211756ee9dac and fs2 == 1 and fe2 == 0x3fa and fm2 == 0x01d9183f02d40 and fs3 == 0 and fe3 == 0x3f7 and fm3 == 0xc55132514e100 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fcc211756ee9dac; op2val:0xbfa01d9183f02d40;
op3val:0x3f7c55132514e100; valaddr_reg:x3; val_offset:1032*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1032*FLEN/8, x4, x1, x2)

inst_345:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xdbac849ee158c and fs2 == 1 and fe2 == 0x401 and fm2 == 0x0b647aed56b64 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xf0d7a21eba20b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fcdbac849ee158c; op2val:0xc010b647aed56b64;
op3val:0x3fef0d7a21eba20b; valaddr_reg:x3; val_offset:1035*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1035*FLEN/8, x4, x1, x2)

inst_346:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xdbac849ee158c and fs2 == 1 and fe2 == 0x401 and fm2 == 0x0b647aed56b64 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xf0d7a21eba20b and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fcdbac849ee158c; op2val:0xc010b647aed56b64;
op3val:0x3fef0d7a21eba20b; valaddr_reg:x3; val_offset:1038*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1038*FLEN/8, x4, x1, x2)

inst_347:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xdbac849ee158c and fs2 == 1 and fe2 == 0x401 and fm2 == 0x0b647aed56b64 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xf0d7a21eba20b and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fcdbac849ee158c; op2val:0xc010b647aed56b64;
op3val:0x3fef0d7a21eba20b; valaddr_reg:x3; val_offset:1041*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1041*FLEN/8, x4, x1, x2)

inst_348:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xdbac849ee158c and fs2 == 1 and fe2 == 0x401 and fm2 == 0x0b647aed56b64 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xf0d7a21eba20b and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fcdbac849ee158c; op2val:0xc010b647aed56b64;
op3val:0x3fef0d7a21eba20b; valaddr_reg:x3; val_offset:1044*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1044*FLEN/8, x4, x1, x2)

inst_349:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xdbac849ee158c and fs2 == 1 and fe2 == 0x401 and fm2 == 0x0b647aed56b64 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xf0d7a21eba20b and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fcdbac849ee158c; op2val:0xc010b647aed56b64;
op3val:0x3fef0d7a21eba20b; valaddr_reg:x3; val_offset:1047*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1047*FLEN/8, x4, x1, x2)

inst_350:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xddbf92dd7e9dc and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x806004c2c05a9 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x66a94682e0b6c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fcddbf92dd7e9dc; op2val:0xbfe806004c2c05a9;
op3val:0x3fc66a94682e0b6c; valaddr_reg:x3; val_offset:1050*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1050*FLEN/8, x4, x1, x2)

inst_351:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xddbf92dd7e9dc and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x806004c2c05a9 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x66a94682e0b6c and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fcddbf92dd7e9dc; op2val:0xbfe806004c2c05a9;
op3val:0x3fc66a94682e0b6c; valaddr_reg:x3; val_offset:1053*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1053*FLEN/8, x4, x1, x2)

inst_352:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xddbf92dd7e9dc and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x806004c2c05a9 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x66a94682e0b6c and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fcddbf92dd7e9dc; op2val:0xbfe806004c2c05a9;
op3val:0x3fc66a94682e0b6c; valaddr_reg:x3; val_offset:1056*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1056*FLEN/8, x4, x1, x2)

inst_353:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xddbf92dd7e9dc and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x806004c2c05a9 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x66a94682e0b6c and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fcddbf92dd7e9dc; op2val:0xbfe806004c2c05a9;
op3val:0x3fc66a94682e0b6c; valaddr_reg:x3; val_offset:1059*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1059*FLEN/8, x4, x1, x2)

inst_354:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xddbf92dd7e9dc and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x806004c2c05a9 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x66a94682e0b6c and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fcddbf92dd7e9dc; op2val:0xbfe806004c2c05a9;
op3val:0x3fc66a94682e0b6c; valaddr_reg:x3; val_offset:1062*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1062*FLEN/8, x4, x1, x2)

inst_355:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xe2b7a49e9aa68 and fs2 == 1 and fe2 == 0x400 and fm2 == 0x656ecaa477a42 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x50fd80ca787a1 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fce2b7a49e9aa68; op2val:0xc00656ecaa477a42;
op3val:0x3fe50fd80ca787a1; valaddr_reg:x3; val_offset:1065*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1065*FLEN/8, x4, x1, x2)

inst_356:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xe2b7a49e9aa68 and fs2 == 1 and fe2 == 0x400 and fm2 == 0x656ecaa477a42 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x50fd80ca787a1 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fce2b7a49e9aa68; op2val:0xc00656ecaa477a42;
op3val:0x3fe50fd80ca787a1; valaddr_reg:x3; val_offset:1068*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1068*FLEN/8, x4, x1, x2)

inst_357:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xe2b7a49e9aa68 and fs2 == 1 and fe2 == 0x400 and fm2 == 0x656ecaa477a42 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x50fd80ca787a1 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fce2b7a49e9aa68; op2val:0xc00656ecaa477a42;
op3val:0x3fe50fd80ca787a1; valaddr_reg:x3; val_offset:1071*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1071*FLEN/8, x4, x1, x2)

inst_358:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xe2b7a49e9aa68 and fs2 == 1 and fe2 == 0x400 and fm2 == 0x656ecaa477a42 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x50fd80ca787a1 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fce2b7a49e9aa68; op2val:0xc00656ecaa477a42;
op3val:0x3fe50fd80ca787a1; valaddr_reg:x3; val_offset:1074*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1074*FLEN/8, x4, x1, x2)

inst_359:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xe2b7a49e9aa68 and fs2 == 1 and fe2 == 0x400 and fm2 == 0x656ecaa477a42 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x50fd80ca787a1 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fce2b7a49e9aa68; op2val:0xc00656ecaa477a42;
op3val:0x3fe50fd80ca787a1; valaddr_reg:x3; val_offset:1077*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1077*FLEN/8, x4, x1, x2)

inst_360:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xe67354c0f5c24 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x032a645ea09fc and fs3 == 0 and fe3 == 0x3fb and fm3 == 0xec773c63fcf80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fce67354c0f5c24; op2val:0xbfe032a645ea09fc;
op3val:0x3fbec773c63fcf80; valaddr_reg:x3; val_offset:1080*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1080*FLEN/8, x4, x1, x2)

inst_361:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xe67354c0f5c24 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x032a645ea09fc and fs3 == 0 and fe3 == 0x3fb and fm3 == 0xec773c63fcf80 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fce67354c0f5c24; op2val:0xbfe032a645ea09fc;
op3val:0x3fbec773c63fcf80; valaddr_reg:x3; val_offset:1083*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1083*FLEN/8, x4, x1, x2)

inst_362:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xe67354c0f5c24 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x032a645ea09fc and fs3 == 0 and fe3 == 0x3fb and fm3 == 0xec773c63fcf80 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fce67354c0f5c24; op2val:0xbfe032a645ea09fc;
op3val:0x3fbec773c63fcf80; valaddr_reg:x3; val_offset:1086*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1086*FLEN/8, x4, x1, x2)

inst_363:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xe67354c0f5c24 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x032a645ea09fc and fs3 == 0 and fe3 == 0x3fb and fm3 == 0xec773c63fcf80 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fce67354c0f5c24; op2val:0xbfe032a645ea09fc;
op3val:0x3fbec773c63fcf80; valaddr_reg:x3; val_offset:1089*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1089*FLEN/8, x4, x1, x2)

inst_364:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xe67354c0f5c24 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x032a645ea09fc and fs3 == 0 and fe3 == 0x3fb and fm3 == 0xec773c63fcf80 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fce67354c0f5c24; op2val:0xbfe032a645ea09fc;
op3val:0x3fbec773c63fcf80; valaddr_reg:x3; val_offset:1092*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1092*FLEN/8, x4, x1, x2)

inst_365:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xe7507f8f40ec4 and fs2 == 1 and fe2 == 0x400 and fm2 == 0xf9344b3618a80 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xe0d8ab9387ba4 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fce7507f8f40ec4; op2val:0xc00f9344b3618a80;
op3val:0x3fee0d8ab9387ba4; valaddr_reg:x3; val_offset:1095*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1095*FLEN/8, x4, x1, x2)

inst_366:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xe7507f8f40ec4 and fs2 == 1 and fe2 == 0x400 and fm2 == 0xf9344b3618a80 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xe0d8ab9387ba4 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fce7507f8f40ec4; op2val:0xc00f9344b3618a80;
op3val:0x3fee0d8ab9387ba4; valaddr_reg:x3; val_offset:1098*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1098*FLEN/8, x4, x1, x2)

inst_367:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xe7507f8f40ec4 and fs2 == 1 and fe2 == 0x400 and fm2 == 0xf9344b3618a80 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xe0d8ab9387ba4 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fce7507f8f40ec4; op2val:0xc00f9344b3618a80;
op3val:0x3fee0d8ab9387ba4; valaddr_reg:x3; val_offset:1101*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1101*FLEN/8, x4, x1, x2)

inst_368:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xe7507f8f40ec4 and fs2 == 1 and fe2 == 0x400 and fm2 == 0xf9344b3618a80 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xe0d8ab9387ba4 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fce7507f8f40ec4; op2val:0xc00f9344b3618a80;
op3val:0x3fee0d8ab9387ba4; valaddr_reg:x3; val_offset:1104*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1104*FLEN/8, x4, x1, x2)

inst_369:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xe7507f8f40ec4 and fs2 == 1 and fe2 == 0x400 and fm2 == 0xf9344b3618a80 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xe0d8ab9387ba4 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fce7507f8f40ec4; op2val:0xc00f9344b3618a80;
op3val:0x3fee0d8ab9387ba4; valaddr_reg:x3; val_offset:1107*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1107*FLEN/8, x4, x1, x2)

inst_370:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xed63a8b04874c and fs2 == 1 and fe2 == 0x400 and fm2 == 0x9fab6ad4f40db and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x908f76f691f9e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fced63a8b04874c; op2val:0xc009fab6ad4f40db;
op3val:0x3fe908f76f691f9e; valaddr_reg:x3; val_offset:1110*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1110*FLEN/8, x4, x1, x2)

inst_371:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xed63a8b04874c and fs2 == 1 and fe2 == 0x400 and fm2 == 0x9fab6ad4f40db and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x908f76f691f9e and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fced63a8b04874c; op2val:0xc009fab6ad4f40db;
op3val:0x3fe908f76f691f9e; valaddr_reg:x3; val_offset:1113*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1113*FLEN/8, x4, x1, x2)

inst_372:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xed63a8b04874c and fs2 == 1 and fe2 == 0x400 and fm2 == 0x9fab6ad4f40db and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x908f76f691f9e and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fced63a8b04874c; op2val:0xc009fab6ad4f40db;
op3val:0x3fe908f76f691f9e; valaddr_reg:x3; val_offset:1116*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1116*FLEN/8, x4, x1, x2)

inst_373:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xed63a8b04874c and fs2 == 1 and fe2 == 0x400 and fm2 == 0x9fab6ad4f40db and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x908f76f691f9e and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fced63a8b04874c; op2val:0xc009fab6ad4f40db;
op3val:0x3fe908f76f691f9e; valaddr_reg:x3; val_offset:1119*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1119*FLEN/8, x4, x1, x2)

inst_374:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xed63a8b04874c and fs2 == 1 and fe2 == 0x400 and fm2 == 0x9fab6ad4f40db and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x908f76f691f9e and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fced63a8b04874c; op2val:0xc009fab6ad4f40db;
op3val:0x3fe908f76f691f9e; valaddr_reg:x3; val_offset:1122*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1122*FLEN/8, x4, x1, x2)

inst_375:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xf477a2665924c and fs2 == 1 and fe2 == 0x400 and fm2 == 0x048be47e9496f and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xfd5afc97221d0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fcf477a2665924c; op2val:0xc00048be47e9496f;
op3val:0x3fdfd5afc97221d0; valaddr_reg:x3; val_offset:1125*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1125*FLEN/8, x4, x1, x2)

inst_376:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xf477a2665924c and fs2 == 1 and fe2 == 0x400 and fm2 == 0x048be47e9496f and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xfd5afc97221d0 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fcf477a2665924c; op2val:0xc00048be47e9496f;
op3val:0x3fdfd5afc97221d0; valaddr_reg:x3; val_offset:1128*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1128*FLEN/8, x4, x1, x2)

inst_377:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xf477a2665924c and fs2 == 1 and fe2 == 0x400 and fm2 == 0x048be47e9496f and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xfd5afc97221d0 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fcf477a2665924c; op2val:0xc00048be47e9496f;
op3val:0x3fdfd5afc97221d0; valaddr_reg:x3; val_offset:1131*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1131*FLEN/8, x4, x1, x2)

inst_378:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xf477a2665924c and fs2 == 1 and fe2 == 0x400 and fm2 == 0x048be47e9496f and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xfd5afc97221d0 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fcf477a2665924c; op2val:0xc00048be47e9496f;
op3val:0x3fdfd5afc97221d0; valaddr_reg:x3; val_offset:1134*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1134*FLEN/8, x4, x1, x2)

inst_379:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xf477a2665924c and fs2 == 1 and fe2 == 0x400 and fm2 == 0x048be47e9496f and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xfd5afc97221d0 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fcf477a2665924c; op2val:0xc00048be47e9496f;
op3val:0x3fdfd5afc97221d0; valaddr_reg:x3; val_offset:1137*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1137*FLEN/8, x4, x1, x2)

inst_380:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x02ad1a456261a and fs2 == 1 and fe2 == 0x400 and fm2 == 0x7c1414b48da97 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x800d3d71025d1 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd02ad1a456261a; op2val:0xc007c1414b48da97;
op3val:0x3fe800d3d71025d1; valaddr_reg:x3; val_offset:1140*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1140*FLEN/8, x4, x1, x2)

inst_381:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x02ad1a456261a and fs2 == 1 and fe2 == 0x400 and fm2 == 0x7c1414b48da97 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x800d3d71025d1 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd02ad1a456261a; op2val:0xc007c1414b48da97;
op3val:0x3fe800d3d71025d1; valaddr_reg:x3; val_offset:1143*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1143*FLEN/8, x4, x1, x2)

inst_382:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x02ad1a456261a and fs2 == 1 and fe2 == 0x400 and fm2 == 0x7c1414b48da97 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x800d3d71025d1 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd02ad1a456261a; op2val:0xc007c1414b48da97;
op3val:0x3fe800d3d71025d1; valaddr_reg:x3; val_offset:1146*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1146*FLEN/8, x4, x1, x2)

inst_383:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x02ad1a456261a and fs2 == 1 and fe2 == 0x400 and fm2 == 0x7c1414b48da97 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x800d3d71025d1 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd02ad1a456261a; op2val:0xc007c1414b48da97;
op3val:0x3fe800d3d71025d1; valaddr_reg:x3; val_offset:1149*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1149*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_4)

inst_384:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x02ad1a456261a and fs2 == 1 and fe2 == 0x400 and fm2 == 0x7c1414b48da97 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x800d3d71025d1 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd02ad1a456261a; op2val:0xc007c1414b48da97;
op3val:0x3fe800d3d71025d1; valaddr_reg:x3; val_offset:1152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1152*FLEN/8, x4, x1, x2)

inst_385:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x0631b23d77622 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x60a92ced6bbed and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x693199e6e3b98 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd0631b23d77622; op2val:0xbff60a92ced6bbed;
op3val:0x3fd693199e6e3b98; valaddr_reg:x3; val_offset:1155*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1155*FLEN/8, x4, x1, x2)

inst_386:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x0631b23d77622 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x60a92ced6bbed and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x693199e6e3b98 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd0631b23d77622; op2val:0xbff60a92ced6bbed;
op3val:0x3fd693199e6e3b98; valaddr_reg:x3; val_offset:1158*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1158*FLEN/8, x4, x1, x2)

inst_387:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x0631b23d77622 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x60a92ced6bbed and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x693199e6e3b98 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd0631b23d77622; op2val:0xbff60a92ced6bbed;
op3val:0x3fd693199e6e3b98; valaddr_reg:x3; val_offset:1161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1161*FLEN/8, x4, x1, x2)

inst_388:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x0631b23d77622 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x60a92ced6bbed and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x693199e6e3b98 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd0631b23d77622; op2val:0xbff60a92ced6bbed;
op3val:0x3fd693199e6e3b98; valaddr_reg:x3; val_offset:1164*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1164*FLEN/8, x4, x1, x2)

inst_389:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x0631b23d77622 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x60a92ced6bbed and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x693199e6e3b98 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd0631b23d77622; op2val:0xbff60a92ced6bbed;
op3val:0x3fd693199e6e3b98; valaddr_reg:x3; val_offset:1167*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1167*FLEN/8, x4, x1, x2)

inst_390:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x0665e459ace6c and fs2 == 1 and fe2 == 0x400 and fm2 == 0x43f6c57541d22 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x4c0f7f6b2c14f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd0665e459ace6c; op2val:0xc0043f6c57541d22;
op3val:0x3fe4c0f7f6b2c14f; valaddr_reg:x3; val_offset:1170*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1170*FLEN/8, x4, x1, x2)

inst_391:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x0665e459ace6c and fs2 == 1 and fe2 == 0x400 and fm2 == 0x43f6c57541d22 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x4c0f7f6b2c14f and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd0665e459ace6c; op2val:0xc0043f6c57541d22;
op3val:0x3fe4c0f7f6b2c14f; valaddr_reg:x3; val_offset:1173*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1173*FLEN/8, x4, x1, x2)

inst_392:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x0665e459ace6c and fs2 == 1 and fe2 == 0x400 and fm2 == 0x43f6c57541d22 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x4c0f7f6b2c14f and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd0665e459ace6c; op2val:0xc0043f6c57541d22;
op3val:0x3fe4c0f7f6b2c14f; valaddr_reg:x3; val_offset:1176*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1176*FLEN/8, x4, x1, x2)

inst_393:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x0665e459ace6c and fs2 == 1 and fe2 == 0x400 and fm2 == 0x43f6c57541d22 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x4c0f7f6b2c14f and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd0665e459ace6c; op2val:0xc0043f6c57541d22;
op3val:0x3fe4c0f7f6b2c14f; valaddr_reg:x3; val_offset:1179*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1179*FLEN/8, x4, x1, x2)

inst_394:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x0665e459ace6c and fs2 == 1 and fe2 == 0x400 and fm2 == 0x43f6c57541d22 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x4c0f7f6b2c14f and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd0665e459ace6c; op2val:0xc0043f6c57541d22;
op3val:0x3fe4c0f7f6b2c14f; valaddr_reg:x3; val_offset:1182*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1182*FLEN/8, x4, x1, x2)

inst_395:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x0e2f3f3ff2d36 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0xf99a32ee2ce59 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x0acef8f8e6126 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd0e2f3f3ff2d36; op2val:0xbfff99a32ee2ce59;
op3val:0x3fe0acef8f8e6126; valaddr_reg:x3; val_offset:1185*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1185*FLEN/8, x4, x1, x2)

inst_396:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x0e2f3f3ff2d36 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0xf99a32ee2ce59 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x0acef8f8e6126 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd0e2f3f3ff2d36; op2val:0xbfff99a32ee2ce59;
op3val:0x3fe0acef8f8e6126; valaddr_reg:x3; val_offset:1188*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1188*FLEN/8, x4, x1, x2)

inst_397:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x0e2f3f3ff2d36 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0xf99a32ee2ce59 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x0acef8f8e6126 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd0e2f3f3ff2d36; op2val:0xbfff99a32ee2ce59;
op3val:0x3fe0acef8f8e6126; valaddr_reg:x3; val_offset:1191*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1191*FLEN/8, x4, x1, x2)

inst_398:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x0e2f3f3ff2d36 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0xf99a32ee2ce59 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x0acef8f8e6126 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd0e2f3f3ff2d36; op2val:0xbfff99a32ee2ce59;
op3val:0x3fe0acef8f8e6126; valaddr_reg:x3; val_offset:1194*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1194*FLEN/8, x4, x1, x2)

inst_399:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x0e2f3f3ff2d36 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0xf99a32ee2ce59 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x0acef8f8e6126 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd0e2f3f3ff2d36; op2val:0xbfff99a32ee2ce59;
op3val:0x3fe0acef8f8e6126; valaddr_reg:x3; val_offset:1197*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1197*FLEN/8, x4, x1, x2)

inst_400:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x0e4164fddf8ec and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xfd0a53d92e833 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x0cb1766f98d86 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd0e4164fddf8ec; op2val:0xbfefd0a53d92e833;
op3val:0x3fd0cb1766f98d86; valaddr_reg:x3; val_offset:1200*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1200*FLEN/8, x4, x1, x2)

inst_401:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x0e4164fddf8ec and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xfd0a53d92e833 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x0cb1766f98d86 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd0e4164fddf8ec; op2val:0xbfefd0a53d92e833;
op3val:0x3fd0cb1766f98d86; valaddr_reg:x3; val_offset:1203*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1203*FLEN/8, x4, x1, x2)

inst_402:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x0e4164fddf8ec and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xfd0a53d92e833 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x0cb1766f98d86 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd0e4164fddf8ec; op2val:0xbfefd0a53d92e833;
op3val:0x3fd0cb1766f98d86; valaddr_reg:x3; val_offset:1206*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1206*FLEN/8, x4, x1, x2)

inst_403:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x0e4164fddf8ec and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xfd0a53d92e833 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x0cb1766f98d86 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd0e4164fddf8ec; op2val:0xbfefd0a53d92e833;
op3val:0x3fd0cb1766f98d86; valaddr_reg:x3; val_offset:1209*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1209*FLEN/8, x4, x1, x2)

inst_404:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x0e4164fddf8ec and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xfd0a53d92e833 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x0cb1766f98d86 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd0e4164fddf8ec; op2val:0xbfefd0a53d92e833;
op3val:0x3fd0cb1766f98d86; valaddr_reg:x3; val_offset:1212*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1212*FLEN/8, x4, x1, x2)

inst_405:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x1974a2ff69374 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x0faa72c89cbbf and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x2aadde331e042 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd1974a2ff69374; op2val:0xbff0faa72c89cbbf;
op3val:0x3fd2aadde331e042; valaddr_reg:x3; val_offset:1215*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1215*FLEN/8, x4, x1, x2)

inst_406:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x1974a2ff69374 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x0faa72c89cbbf and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x2aadde331e042 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd1974a2ff69374; op2val:0xbff0faa72c89cbbf;
op3val:0x3fd2aadde331e042; valaddr_reg:x3; val_offset:1218*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1218*FLEN/8, x4, x1, x2)

inst_407:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x1974a2ff69374 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x0faa72c89cbbf and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x2aadde331e042 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd1974a2ff69374; op2val:0xbff0faa72c89cbbf;
op3val:0x3fd2aadde331e042; valaddr_reg:x3; val_offset:1221*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1221*FLEN/8, x4, x1, x2)

inst_408:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x1974a2ff69374 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x0faa72c89cbbf and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x2aadde331e042 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd1974a2ff69374; op2val:0xbff0faa72c89cbbf;
op3val:0x3fd2aadde331e042; valaddr_reg:x3; val_offset:1224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1224*FLEN/8, x4, x1, x2)

inst_409:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x1974a2ff69374 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x0faa72c89cbbf and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x2aadde331e042 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd1974a2ff69374; op2val:0xbff0faa72c89cbbf;
op3val:0x3fd2aadde331e042; valaddr_reg:x3; val_offset:1227*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1227*FLEN/8, x4, x1, x2)

inst_410:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x19e4567b4192e and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x7438e04d37460 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x99de6e9ad876c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd19e4567b4192e; op2val:0xbff7438e04d37460;
op3val:0x3fd99de6e9ad876c; valaddr_reg:x3; val_offset:1230*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1230*FLEN/8, x4, x1, x2)

inst_411:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x19e4567b4192e and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x7438e04d37460 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x99de6e9ad876c and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd19e4567b4192e; op2val:0xbff7438e04d37460;
op3val:0x3fd99de6e9ad876c; valaddr_reg:x3; val_offset:1233*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1233*FLEN/8, x4, x1, x2)

inst_412:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x19e4567b4192e and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x7438e04d37460 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x99de6e9ad876c and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd19e4567b4192e; op2val:0xbff7438e04d37460;
op3val:0x3fd99de6e9ad876c; valaddr_reg:x3; val_offset:1236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1236*FLEN/8, x4, x1, x2)

inst_413:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x19e4567b4192e and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x7438e04d37460 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x99de6e9ad876c and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd19e4567b4192e; op2val:0xbff7438e04d37460;
op3val:0x3fd99de6e9ad876c; valaddr_reg:x3; val_offset:1239*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1239*FLEN/8, x4, x1, x2)

inst_414:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x19e4567b4192e and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x7438e04d37460 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x99de6e9ad876c and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd19e4567b4192e; op2val:0xbff7438e04d37460;
op3val:0x3fd99de6e9ad876c; valaddr_reg:x3; val_offset:1242*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1242*FLEN/8, x4, x1, x2)

inst_415:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x1d4da7b1fade4 and fs2 == 1 and fe2 == 0x400 and fm2 == 0x2b84055f68608 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x4dccd4e43031c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd1d4da7b1fade4; op2val:0xc002b84055f68608;
op3val:0x3fe4dccd4e43031c; valaddr_reg:x3; val_offset:1245*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1245*FLEN/8, x4, x1, x2)

inst_416:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x1d4da7b1fade4 and fs2 == 1 and fe2 == 0x400 and fm2 == 0x2b84055f68608 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x4dccd4e43031c and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd1d4da7b1fade4; op2val:0xc002b84055f68608;
op3val:0x3fe4dccd4e43031c; valaddr_reg:x3; val_offset:1248*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1248*FLEN/8, x4, x1, x2)

inst_417:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x1d4da7b1fade4 and fs2 == 1 and fe2 == 0x400 and fm2 == 0x2b84055f68608 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x4dccd4e43031c and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd1d4da7b1fade4; op2val:0xc002b84055f68608;
op3val:0x3fe4dccd4e43031c; valaddr_reg:x3; val_offset:1251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1251*FLEN/8, x4, x1, x2)

inst_418:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x1d4da7b1fade4 and fs2 == 1 and fe2 == 0x400 and fm2 == 0x2b84055f68608 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x4dccd4e43031c and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd1d4da7b1fade4; op2val:0xc002b84055f68608;
op3val:0x3fe4dccd4e43031c; valaddr_reg:x3; val_offset:1254*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1254*FLEN/8, x4, x1, x2)

inst_419:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x1d4da7b1fade4 and fs2 == 1 and fe2 == 0x400 and fm2 == 0x2b84055f68608 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x4dccd4e43031c and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd1d4da7b1fade4; op2val:0xc002b84055f68608;
op3val:0x3fe4dccd4e43031c; valaddr_reg:x3; val_offset:1257*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1257*FLEN/8, x4, x1, x2)

inst_420:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x203bbe95e2aa8 and fs2 == 1 and fe2 == 0x400 and fm2 == 0x6669fa25dceb6 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x938adeabbff1b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd203bbe95e2aa8; op2val:0xc006669fa25dceb6;
op3val:0x3fe938adeabbff1b; valaddr_reg:x3; val_offset:1260*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1260*FLEN/8, x4, x1, x2)

inst_421:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x203bbe95e2aa8 and fs2 == 1 and fe2 == 0x400 and fm2 == 0x6669fa25dceb6 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x938adeabbff1b and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd203bbe95e2aa8; op2val:0xc006669fa25dceb6;
op3val:0x3fe938adeabbff1b; valaddr_reg:x3; val_offset:1263*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1263*FLEN/8, x4, x1, x2)

inst_422:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x203bbe95e2aa8 and fs2 == 1 and fe2 == 0x400 and fm2 == 0x6669fa25dceb6 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x938adeabbff1b and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd203bbe95e2aa8; op2val:0xc006669fa25dceb6;
op3val:0x3fe938adeabbff1b; valaddr_reg:x3; val_offset:1266*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1266*FLEN/8, x4, x1, x2)

inst_423:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x203bbe95e2aa8 and fs2 == 1 and fe2 == 0x400 and fm2 == 0x6669fa25dceb6 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x938adeabbff1b and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd203bbe95e2aa8; op2val:0xc006669fa25dceb6;
op3val:0x3fe938adeabbff1b; valaddr_reg:x3; val_offset:1269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1269*FLEN/8, x4, x1, x2)

inst_424:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x203bbe95e2aa8 and fs2 == 1 and fe2 == 0x400 and fm2 == 0x6669fa25dceb6 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x938adeabbff1b and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd203bbe95e2aa8; op2val:0xc006669fa25dceb6;
op3val:0x3fe938adeabbff1b; valaddr_reg:x3; val_offset:1272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1272*FLEN/8, x4, x1, x2)

inst_425:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x21f39c97257ba and fs2 == 1 and fe2 == 0x3fb and fm2 == 0x05bbc6ad9ee60 and fs3 == 0 and fe3 == 0x3f9 and fm3 == 0x28720ca08c560 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd21f39c97257ba; op2val:0xbfb05bbc6ad9ee60;
op3val:0x3f928720ca08c560; valaddr_reg:x3; val_offset:1275*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1275*FLEN/8, x4, x1, x2)

inst_426:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x21f39c97257ba and fs2 == 1 and fe2 == 0x3fb and fm2 == 0x05bbc6ad9ee60 and fs3 == 0 and fe3 == 0x3f9 and fm3 == 0x28720ca08c560 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd21f39c97257ba; op2val:0xbfb05bbc6ad9ee60;
op3val:0x3f928720ca08c560; valaddr_reg:x3; val_offset:1278*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1278*FLEN/8, x4, x1, x2)

inst_427:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x21f39c97257ba and fs2 == 1 and fe2 == 0x3fb and fm2 == 0x05bbc6ad9ee60 and fs3 == 0 and fe3 == 0x3f9 and fm3 == 0x28720ca08c560 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd21f39c97257ba; op2val:0xbfb05bbc6ad9ee60;
op3val:0x3f928720ca08c560; valaddr_reg:x3; val_offset:1281*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1281*FLEN/8, x4, x1, x2)

inst_428:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x21f39c97257ba and fs2 == 1 and fe2 == 0x3fb and fm2 == 0x05bbc6ad9ee60 and fs3 == 0 and fe3 == 0x3f9 and fm3 == 0x28720ca08c560 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd21f39c97257ba; op2val:0xbfb05bbc6ad9ee60;
op3val:0x3f928720ca08c560; valaddr_reg:x3; val_offset:1284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1284*FLEN/8, x4, x1, x2)

inst_429:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x21f39c97257ba and fs2 == 1 and fe2 == 0x3fb and fm2 == 0x05bbc6ad9ee60 and fs3 == 0 and fe3 == 0x3f9 and fm3 == 0x28720ca08c560 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd21f39c97257ba; op2val:0xbfb05bbc6ad9ee60;
op3val:0x3f928720ca08c560; valaddr_reg:x3; val_offset:1287*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1287*FLEN/8, x4, x1, x2)

inst_430:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x2356bf0926058 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0xdbb8969deac58 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x0eb2031be9b81 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd2356bf0926058; op2val:0xbffdbb8969deac58;
op3val:0x3fe0eb2031be9b81; valaddr_reg:x3; val_offset:1290*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1290*FLEN/8, x4, x1, x2)

inst_431:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x2356bf0926058 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0xdbb8969deac58 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x0eb2031be9b81 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd2356bf0926058; op2val:0xbffdbb8969deac58;
op3val:0x3fe0eb2031be9b81; valaddr_reg:x3; val_offset:1293*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1293*FLEN/8, x4, x1, x2)

inst_432:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x2356bf0926058 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0xdbb8969deac58 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x0eb2031be9b81 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd2356bf0926058; op2val:0xbffdbb8969deac58;
op3val:0x3fe0eb2031be9b81; valaddr_reg:x3; val_offset:1296*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1296*FLEN/8, x4, x1, x2)

inst_433:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x2356bf0926058 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0xdbb8969deac58 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x0eb2031be9b81 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd2356bf0926058; op2val:0xbffdbb8969deac58;
op3val:0x3fe0eb2031be9b81; valaddr_reg:x3; val_offset:1299*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1299*FLEN/8, x4, x1, x2)

inst_434:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x2356bf0926058 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0xdbb8969deac58 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x0eb2031be9b81 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd2356bf0926058; op2val:0xbffdbb8969deac58;
op3val:0x3fe0eb2031be9b81; valaddr_reg:x3; val_offset:1302*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1302*FLEN/8, x4, x1, x2)

inst_435:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x29896c9c5943e and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x5795fe1d8b94e and fs3 == 0 and fe3 == 0x3fa and fm3 == 0x8f5574da63290 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd29896c9c5943e; op2val:0xbfc5795fe1d8b94e;
op3val:0x3fa8f5574da63290; valaddr_reg:x3; val_offset:1305*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1305*FLEN/8, x4, x1, x2)

inst_436:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x29896c9c5943e and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x5795fe1d8b94e and fs3 == 0 and fe3 == 0x3fa and fm3 == 0x8f5574da63290 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd29896c9c5943e; op2val:0xbfc5795fe1d8b94e;
op3val:0x3fa8f5574da63290; valaddr_reg:x3; val_offset:1308*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1308*FLEN/8, x4, x1, x2)

inst_437:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x29896c9c5943e and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x5795fe1d8b94e and fs3 == 0 and fe3 == 0x3fa and fm3 == 0x8f5574da63290 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd29896c9c5943e; op2val:0xbfc5795fe1d8b94e;
op3val:0x3fa8f5574da63290; valaddr_reg:x3; val_offset:1311*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1311*FLEN/8, x4, x1, x2)

inst_438:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x29896c9c5943e and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x5795fe1d8b94e and fs3 == 0 and fe3 == 0x3fa and fm3 == 0x8f5574da63290 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd29896c9c5943e; op2val:0xbfc5795fe1d8b94e;
op3val:0x3fa8f5574da63290; valaddr_reg:x3; val_offset:1314*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1314*FLEN/8, x4, x1, x2)

inst_439:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x29896c9c5943e and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x5795fe1d8b94e and fs3 == 0 and fe3 == 0x3fa and fm3 == 0x8f5574da63290 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd29896c9c5943e; op2val:0xbfc5795fe1d8b94e;
op3val:0x3fa8f5574da63290; valaddr_reg:x3; val_offset:1317*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1317*FLEN/8, x4, x1, x2)

inst_440:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x29a2e73478056 and fs2 == 1 and fe2 == 0x400 and fm2 == 0x6bdde96010ea8 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xa70bfecdf3ab8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd29a2e73478056; op2val:0xc006bdde96010ea8;
op3val:0x3fea70bfecdf3ab8; valaddr_reg:x3; val_offset:1320*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1320*FLEN/8, x4, x1, x2)

inst_441:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x29a2e73478056 and fs2 == 1 and fe2 == 0x400 and fm2 == 0x6bdde96010ea8 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xa70bfecdf3ab8 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd29a2e73478056; op2val:0xc006bdde96010ea8;
op3val:0x3fea70bfecdf3ab8; valaddr_reg:x3; val_offset:1323*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1323*FLEN/8, x4, x1, x2)

inst_442:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x29a2e73478056 and fs2 == 1 and fe2 == 0x400 and fm2 == 0x6bdde96010ea8 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xa70bfecdf3ab8 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd29a2e73478056; op2val:0xc006bdde96010ea8;
op3val:0x3fea70bfecdf3ab8; valaddr_reg:x3; val_offset:1326*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1326*FLEN/8, x4, x1, x2)

inst_443:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x29a2e73478056 and fs2 == 1 and fe2 == 0x400 and fm2 == 0x6bdde96010ea8 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xa70bfecdf3ab8 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd29a2e73478056; op2val:0xc006bdde96010ea8;
op3val:0x3fea70bfecdf3ab8; valaddr_reg:x3; val_offset:1329*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1329*FLEN/8, x4, x1, x2)

inst_444:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x29a2e73478056 and fs2 == 1 and fe2 == 0x400 and fm2 == 0x6bdde96010ea8 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xa70bfecdf3ab8 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd29a2e73478056; op2val:0xc006bdde96010ea8;
op3val:0x3fea70bfecdf3ab8; valaddr_reg:x3; val_offset:1332*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1332*FLEN/8, x4, x1, x2)

inst_445:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x2d0a4ee74736c and fs2 == 1 and fe2 == 0x3ff and fm2 == 0xe964efeb613ee and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x1fbfb17001ed5 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd2d0a4ee74736c; op2val:0xbffe964efeb613ee;
op3val:0x3fe1fbfb17001ed5; valaddr_reg:x3; val_offset:1335*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1335*FLEN/8, x4, x1, x2)

inst_446:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x2d0a4ee74736c and fs2 == 1 and fe2 == 0x3ff and fm2 == 0xe964efeb613ee and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x1fbfb17001ed5 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd2d0a4ee74736c; op2val:0xbffe964efeb613ee;
op3val:0x3fe1fbfb17001ed5; valaddr_reg:x3; val_offset:1338*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1338*FLEN/8, x4, x1, x2)

inst_447:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x2d0a4ee74736c and fs2 == 1 and fe2 == 0x3ff and fm2 == 0xe964efeb613ee and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x1fbfb17001ed5 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd2d0a4ee74736c; op2val:0xbffe964efeb613ee;
op3val:0x3fe1fbfb17001ed5; valaddr_reg:x3; val_offset:1341*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1341*FLEN/8, x4, x1, x2)

inst_448:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x2d0a4ee74736c and fs2 == 1 and fe2 == 0x3ff and fm2 == 0xe964efeb613ee and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x1fbfb17001ed5 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd2d0a4ee74736c; op2val:0xbffe964efeb613ee;
op3val:0x3fe1fbfb17001ed5; valaddr_reg:x3; val_offset:1344*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1344*FLEN/8, x4, x1, x2)

inst_449:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x2d0a4ee74736c and fs2 == 1 and fe2 == 0x3ff and fm2 == 0xe964efeb613ee and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x1fbfb17001ed5 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd2d0a4ee74736c; op2val:0xbffe964efeb613ee;
op3val:0x3fe1fbfb17001ed5; valaddr_reg:x3; val_offset:1347*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1347*FLEN/8, x4, x1, x2)

inst_450:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x2de7b6372bde6 and fs2 == 1 and fe2 == 0x400 and fm2 == 0x5b06ad5e5829b and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x9940f3dfe6f27 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd2de7b6372bde6; op2val:0xc005b06ad5e5829b;
op3val:0x3fe9940f3dfe6f27; valaddr_reg:x3; val_offset:1350*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1350*FLEN/8, x4, x1, x2)

inst_451:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x2de7b6372bde6 and fs2 == 1 and fe2 == 0x400 and fm2 == 0x5b06ad5e5829b and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x9940f3dfe6f27 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd2de7b6372bde6; op2val:0xc005b06ad5e5829b;
op3val:0x3fe9940f3dfe6f27; valaddr_reg:x3; val_offset:1353*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1353*FLEN/8, x4, x1, x2)

inst_452:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x2de7b6372bde6 and fs2 == 1 and fe2 == 0x400 and fm2 == 0x5b06ad5e5829b and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x9940f3dfe6f27 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd2de7b6372bde6; op2val:0xc005b06ad5e5829b;
op3val:0x3fe9940f3dfe6f27; valaddr_reg:x3; val_offset:1356*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1356*FLEN/8, x4, x1, x2)

inst_453:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x2de7b6372bde6 and fs2 == 1 and fe2 == 0x400 and fm2 == 0x5b06ad5e5829b and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x9940f3dfe6f27 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd2de7b6372bde6; op2val:0xc005b06ad5e5829b;
op3val:0x3fe9940f3dfe6f27; valaddr_reg:x3; val_offset:1359*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1359*FLEN/8, x4, x1, x2)

inst_454:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x2de7b6372bde6 and fs2 == 1 and fe2 == 0x400 and fm2 == 0x5b06ad5e5829b and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x9940f3dfe6f27 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd2de7b6372bde6; op2val:0xc005b06ad5e5829b;
op3val:0x3fe9940f3dfe6f27; valaddr_reg:x3; val_offset:1362*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1362*FLEN/8, x4, x1, x2)

inst_455:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x3100cad24cd32 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x57cb34140ac4f and fs3 == 0 and fe3 == 0x3fa and fm3 == 0x999a296ca3c90 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd3100cad24cd32; op2val:0xbfc57cb34140ac4f;
op3val:0x3fa999a296ca3c90; valaddr_reg:x3; val_offset:1365*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1365*FLEN/8, x4, x1, x2)

inst_456:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x3100cad24cd32 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x57cb34140ac4f and fs3 == 0 and fe3 == 0x3fa and fm3 == 0x999a296ca3c90 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd3100cad24cd32; op2val:0xbfc57cb34140ac4f;
op3val:0x3fa999a296ca3c90; valaddr_reg:x3; val_offset:1368*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1368*FLEN/8, x4, x1, x2)

inst_457:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x3100cad24cd32 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x57cb34140ac4f and fs3 == 0 and fe3 == 0x3fa and fm3 == 0x999a296ca3c90 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd3100cad24cd32; op2val:0xbfc57cb34140ac4f;
op3val:0x3fa999a296ca3c90; valaddr_reg:x3; val_offset:1371*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1371*FLEN/8, x4, x1, x2)

inst_458:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x3100cad24cd32 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x57cb34140ac4f and fs3 == 0 and fe3 == 0x3fa and fm3 == 0x999a296ca3c90 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd3100cad24cd32; op2val:0xbfc57cb34140ac4f;
op3val:0x3fa999a296ca3c90; valaddr_reg:x3; val_offset:1374*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1374*FLEN/8, x4, x1, x2)

inst_459:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x3100cad24cd32 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x57cb34140ac4f and fs3 == 0 and fe3 == 0x3fa and fm3 == 0x999a296ca3c90 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd3100cad24cd32; op2val:0xbfc57cb34140ac4f;
op3val:0x3fa999a296ca3c90; valaddr_reg:x3; val_offset:1377*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1377*FLEN/8, x4, x1, x2)

inst_460:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x31f42d0748d38 and fs2 == 1 and fe2 == 0x400 and fm2 == 0x5b0d692c7b9f2 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x9ec600217943a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd31f42d0748d38; op2val:0xc005b0d692c7b9f2;
op3val:0x3fe9ec600217943a; valaddr_reg:x3; val_offset:1380*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1380*FLEN/8, x4, x1, x2)

inst_461:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x31f42d0748d38 and fs2 == 1 and fe2 == 0x400 and fm2 == 0x5b0d692c7b9f2 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x9ec600217943a and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd31f42d0748d38; op2val:0xc005b0d692c7b9f2;
op3val:0x3fe9ec600217943a; valaddr_reg:x3; val_offset:1383*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1383*FLEN/8, x4, x1, x2)

inst_462:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x31f42d0748d38 and fs2 == 1 and fe2 == 0x400 and fm2 == 0x5b0d692c7b9f2 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x9ec600217943a and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd31f42d0748d38; op2val:0xc005b0d692c7b9f2;
op3val:0x3fe9ec600217943a; valaddr_reg:x3; val_offset:1386*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1386*FLEN/8, x4, x1, x2)

inst_463:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x31f42d0748d38 and fs2 == 1 and fe2 == 0x400 and fm2 == 0x5b0d692c7b9f2 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x9ec600217943a and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd31f42d0748d38; op2val:0xc005b0d692c7b9f2;
op3val:0x3fe9ec600217943a; valaddr_reg:x3; val_offset:1389*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1389*FLEN/8, x4, x1, x2)

inst_464:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x31f42d0748d38 and fs2 == 1 and fe2 == 0x400 and fm2 == 0x5b0d692c7b9f2 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x9ec600217943a and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd31f42d0748d38; op2val:0xc005b0d692c7b9f2;
op3val:0x3fe9ec600217943a; valaddr_reg:x3; val_offset:1392*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1392*FLEN/8, x4, x1, x2)

inst_465:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x321c1064fe8ea and fs2 == 1 and fe2 == 0x400 and fm2 == 0x5b44ff872cbf7 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x9f3e8b38d681f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd321c1064fe8ea; op2val:0xc005b44ff872cbf7;
op3val:0x3fe9f3e8b38d681f; valaddr_reg:x3; val_offset:1395*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1395*FLEN/8, x4, x1, x2)

inst_466:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x321c1064fe8ea and fs2 == 1 and fe2 == 0x400 and fm2 == 0x5b44ff872cbf7 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x9f3e8b38d681f and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd321c1064fe8ea; op2val:0xc005b44ff872cbf7;
op3val:0x3fe9f3e8b38d681f; valaddr_reg:x3; val_offset:1398*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1398*FLEN/8, x4, x1, x2)

inst_467:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x321c1064fe8ea and fs2 == 1 and fe2 == 0x400 and fm2 == 0x5b44ff872cbf7 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x9f3e8b38d681f and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd321c1064fe8ea; op2val:0xc005b44ff872cbf7;
op3val:0x3fe9f3e8b38d681f; valaddr_reg:x3; val_offset:1401*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1401*FLEN/8, x4, x1, x2)

inst_468:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x321c1064fe8ea and fs2 == 1 and fe2 == 0x400 and fm2 == 0x5b44ff872cbf7 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x9f3e8b38d681f and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd321c1064fe8ea; op2val:0xc005b44ff872cbf7;
op3val:0x3fe9f3e8b38d681f; valaddr_reg:x3; val_offset:1404*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1404*FLEN/8, x4, x1, x2)

inst_469:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x321c1064fe8ea and fs2 == 1 and fe2 == 0x400 and fm2 == 0x5b44ff872cbf7 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x9f3e8b38d681f and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd321c1064fe8ea; op2val:0xc005b44ff872cbf7;
op3val:0x3fe9f3e8b38d681f; valaddr_reg:x3; val_offset:1407*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1407*FLEN/8, x4, x1, x2)

inst_470:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x37438a6b5b25e and fs2 == 1 and fe2 == 0x400 and fm2 == 0x461ed7f000530 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x8c8582bc779dc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd37438a6b5b25e; op2val:0xc00461ed7f000530;
op3val:0x3fe8c8582bc779dc; valaddr_reg:x3; val_offset:1410*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1410*FLEN/8, x4, x1, x2)

inst_471:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x37438a6b5b25e and fs2 == 1 and fe2 == 0x400 and fm2 == 0x461ed7f000530 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x8c8582bc779dc and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd37438a6b5b25e; op2val:0xc00461ed7f000530;
op3val:0x3fe8c8582bc779dc; valaddr_reg:x3; val_offset:1413*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1413*FLEN/8, x4, x1, x2)

inst_472:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x37438a6b5b25e and fs2 == 1 and fe2 == 0x400 and fm2 == 0x461ed7f000530 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x8c8582bc779dc and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd37438a6b5b25e; op2val:0xc00461ed7f000530;
op3val:0x3fe8c8582bc779dc; valaddr_reg:x3; val_offset:1416*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1416*FLEN/8, x4, x1, x2)

inst_473:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x37438a6b5b25e and fs2 == 1 and fe2 == 0x400 and fm2 == 0x461ed7f000530 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x8c8582bc779dc and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd37438a6b5b25e; op2val:0xc00461ed7f000530;
op3val:0x3fe8c8582bc779dc; valaddr_reg:x3; val_offset:1419*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1419*FLEN/8, x4, x1, x2)

inst_474:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x37438a6b5b25e and fs2 == 1 and fe2 == 0x400 and fm2 == 0x461ed7f000530 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x8c8582bc779dc and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd37438a6b5b25e; op2val:0xc00461ed7f000530;
op3val:0x3fe8c8582bc779dc; valaddr_reg:x3; val_offset:1422*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1422*FLEN/8, x4, x1, x2)

inst_475:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x3b4554b7cf508 and fs2 == 1 and fe2 == 0x3fa and fm2 == 0xba9dfc68e440c and fs3 == 0 and fe3 == 0x3f9 and fm3 == 0x108c2251deaa0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd3b4554b7cf508; op2val:0xbfaba9dfc68e440c;
op3val:0x3f9108c2251deaa0; valaddr_reg:x3; val_offset:1425*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1425*FLEN/8, x4, x1, x2)

inst_476:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x3b4554b7cf508 and fs2 == 1 and fe2 == 0x3fa and fm2 == 0xba9dfc68e440c and fs3 == 0 and fe3 == 0x3f9 and fm3 == 0x108c2251deaa0 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd3b4554b7cf508; op2val:0xbfaba9dfc68e440c;
op3val:0x3f9108c2251deaa0; valaddr_reg:x3; val_offset:1428*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1428*FLEN/8, x4, x1, x2)

inst_477:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x3b4554b7cf508 and fs2 == 1 and fe2 == 0x3fa and fm2 == 0xba9dfc68e440c and fs3 == 0 and fe3 == 0x3f9 and fm3 == 0x108c2251deaa0 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd3b4554b7cf508; op2val:0xbfaba9dfc68e440c;
op3val:0x3f9108c2251deaa0; valaddr_reg:x3; val_offset:1431*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1431*FLEN/8, x4, x1, x2)

inst_478:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x3b4554b7cf508 and fs2 == 1 and fe2 == 0x3fa and fm2 == 0xba9dfc68e440c and fs3 == 0 and fe3 == 0x3f9 and fm3 == 0x108c2251deaa0 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd3b4554b7cf508; op2val:0xbfaba9dfc68e440c;
op3val:0x3f9108c2251deaa0; valaddr_reg:x3; val_offset:1434*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1434*FLEN/8, x4, x1, x2)

inst_479:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x3b4554b7cf508 and fs2 == 1 and fe2 == 0x3fa and fm2 == 0xba9dfc68e440c and fs3 == 0 and fe3 == 0x3f9 and fm3 == 0x108c2251deaa0 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd3b4554b7cf508; op2val:0xbfaba9dfc68e440c;
op3val:0x3f9108c2251deaa0; valaddr_reg:x3; val_offset:1437*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1437*FLEN/8, x4, x1, x2)

inst_480:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x3ca9b178997d6 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x925fa13fe16bf and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xf1b8c31df9fe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd3ca9b178997d6; op2val:0xbff925fa13fe16bf;
op3val:0x3fdf1b8c31df9fe0; valaddr_reg:x3; val_offset:1440*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1440*FLEN/8, x4, x1, x2)

inst_481:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x3ca9b178997d6 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x925fa13fe16bf and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xf1b8c31df9fe0 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd3ca9b178997d6; op2val:0xbff925fa13fe16bf;
op3val:0x3fdf1b8c31df9fe0; valaddr_reg:x3; val_offset:1443*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1443*FLEN/8, x4, x1, x2)

inst_482:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x3ca9b178997d6 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x925fa13fe16bf and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xf1b8c31df9fe0 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd3ca9b178997d6; op2val:0xbff925fa13fe16bf;
op3val:0x3fdf1b8c31df9fe0; valaddr_reg:x3; val_offset:1446*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1446*FLEN/8, x4, x1, x2)

inst_483:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x3ca9b178997d6 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x925fa13fe16bf and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xf1b8c31df9fe0 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd3ca9b178997d6; op2val:0xbff925fa13fe16bf;
op3val:0x3fdf1b8c31df9fe0; valaddr_reg:x3; val_offset:1449*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1449*FLEN/8, x4, x1, x2)

inst_484:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x3ca9b178997d6 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x925fa13fe16bf and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xf1b8c31df9fe0 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd3ca9b178997d6; op2val:0xbff925fa13fe16bf;
op3val:0x3fdf1b8c31df9fe0; valaddr_reg:x3; val_offset:1452*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1452*FLEN/8, x4, x1, x2)

inst_485:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x3f1312c39cf68 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0xcd76b52502082 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x1f94a6adc2304 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd3f1312c39cf68; op2val:0xbffcd76b52502082;
op3val:0x3fe1f94a6adc2304; valaddr_reg:x3; val_offset:1455*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1455*FLEN/8, x4, x1, x2)

inst_486:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x3f1312c39cf68 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0xcd76b52502082 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x1f94a6adc2304 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd3f1312c39cf68; op2val:0xbffcd76b52502082;
op3val:0x3fe1f94a6adc2304; valaddr_reg:x3; val_offset:1458*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1458*FLEN/8, x4, x1, x2)

inst_487:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x3f1312c39cf68 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0xcd76b52502082 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x1f94a6adc2304 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd3f1312c39cf68; op2val:0xbffcd76b52502082;
op3val:0x3fe1f94a6adc2304; valaddr_reg:x3; val_offset:1461*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1461*FLEN/8, x4, x1, x2)

inst_488:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x3f1312c39cf68 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0xcd76b52502082 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x1f94a6adc2304 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd3f1312c39cf68; op2val:0xbffcd76b52502082;
op3val:0x3fe1f94a6adc2304; valaddr_reg:x3; val_offset:1464*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1464*FLEN/8, x4, x1, x2)

inst_489:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x3f1312c39cf68 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0xcd76b52502082 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x1f94a6adc2304 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd3f1312c39cf68; op2val:0xbffcd76b52502082;
op3val:0x3fe1f94a6adc2304; valaddr_reg:x3; val_offset:1467*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1467*FLEN/8, x4, x1, x2)

inst_490:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x3f14507e25bbc and fs2 == 1 and fe2 == 0x400 and fm2 == 0x7a09aaac0c335 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xd7300b4b06755 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd3f14507e25bbc; op2val:0xc007a09aaac0c335;
op3val:0x3fed7300b4b06755; valaddr_reg:x3; val_offset:1470*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1470*FLEN/8, x4, x1, x2)

inst_491:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x3f14507e25bbc and fs2 == 1 and fe2 == 0x400 and fm2 == 0x7a09aaac0c335 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xd7300b4b06755 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd3f14507e25bbc; op2val:0xc007a09aaac0c335;
op3val:0x3fed7300b4b06755; valaddr_reg:x3; val_offset:1473*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1473*FLEN/8, x4, x1, x2)

inst_492:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x3f14507e25bbc and fs2 == 1 and fe2 == 0x400 and fm2 == 0x7a09aaac0c335 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xd7300b4b06755 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd3f14507e25bbc; op2val:0xc007a09aaac0c335;
op3val:0x3fed7300b4b06755; valaddr_reg:x3; val_offset:1476*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1476*FLEN/8, x4, x1, x2)

inst_493:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x3f14507e25bbc and fs2 == 1 and fe2 == 0x400 and fm2 == 0x7a09aaac0c335 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xd7300b4b06755 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd3f14507e25bbc; op2val:0xc007a09aaac0c335;
op3val:0x3fed7300b4b06755; valaddr_reg:x3; val_offset:1479*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1479*FLEN/8, x4, x1, x2)

inst_494:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x3f14507e25bbc and fs2 == 1 and fe2 == 0x400 and fm2 == 0x7a09aaac0c335 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xd7300b4b06755 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd3f14507e25bbc; op2val:0xc007a09aaac0c335;
op3val:0x3fed7300b4b06755; valaddr_reg:x3; val_offset:1482*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1482*FLEN/8, x4, x1, x2)

inst_495:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x3fe468ef9050a and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x65d853ac3a170 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xbf27d79ce274e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd3fe468ef9050a; op2val:0xbff65d853ac3a170;
op3val:0x3fdbf27d79ce274e; valaddr_reg:x3; val_offset:1485*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1485*FLEN/8, x4, x1, x2)

inst_496:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x3fe468ef9050a and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x65d853ac3a170 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xbf27d79ce274e and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd3fe468ef9050a; op2val:0xbff65d853ac3a170;
op3val:0x3fdbf27d79ce274e; valaddr_reg:x3; val_offset:1488*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1488*FLEN/8, x4, x1, x2)

inst_497:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x3fe468ef9050a and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x65d853ac3a170 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xbf27d79ce274e and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd3fe468ef9050a; op2val:0xbff65d853ac3a170;
op3val:0x3fdbf27d79ce274e; valaddr_reg:x3; val_offset:1491*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1491*FLEN/8, x4, x1, x2)

inst_498:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x3fe468ef9050a and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x65d853ac3a170 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xbf27d79ce274e and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd3fe468ef9050a; op2val:0xbff65d853ac3a170;
op3val:0x3fdbf27d79ce274e; valaddr_reg:x3; val_offset:1494*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1494*FLEN/8, x4, x1, x2)

inst_499:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x3fe468ef9050a and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x65d853ac3a170 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xbf27d79ce274e and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd3fe468ef9050a; op2val:0xbff65d853ac3a170;
op3val:0x3fdbf27d79ce274e; valaddr_reg:x3; val_offset:1497*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1497*FLEN/8, x4, x1, x2)

inst_500:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x42850e5e2079e and fs2 == 1 and fe2 == 0x400 and fm2 == 0x730660780dc5c and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xd36edc79e4615 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd42850e5e2079e; op2val:0xc00730660780dc5c;
op3val:0x3fed36edc79e4615; valaddr_reg:x3; val_offset:1500*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1500*FLEN/8, x4, x1, x2)

inst_501:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x42850e5e2079e and fs2 == 1 and fe2 == 0x400 and fm2 == 0x730660780dc5c and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xd36edc79e4615 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd42850e5e2079e; op2val:0xc00730660780dc5c;
op3val:0x3fed36edc79e4615; valaddr_reg:x3; val_offset:1503*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1503*FLEN/8, x4, x1, x2)

inst_502:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x42850e5e2079e and fs2 == 1 and fe2 == 0x400 and fm2 == 0x730660780dc5c and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xd36edc79e4615 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd42850e5e2079e; op2val:0xc00730660780dc5c;
op3val:0x3fed36edc79e4615; valaddr_reg:x3; val_offset:1506*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1506*FLEN/8, x4, x1, x2)

inst_503:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x42850e5e2079e and fs2 == 1 and fe2 == 0x400 and fm2 == 0x730660780dc5c and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xd36edc79e4615 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd42850e5e2079e; op2val:0xc00730660780dc5c;
op3val:0x3fed36edc79e4615; valaddr_reg:x3; val_offset:1509*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1509*FLEN/8, x4, x1, x2)

inst_504:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x42850e5e2079e and fs2 == 1 and fe2 == 0x400 and fm2 == 0x730660780dc5c and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xd36edc79e4615 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd42850e5e2079e; op2val:0xc00730660780dc5c;
op3val:0x3fed36edc79e4615; valaddr_reg:x3; val_offset:1512*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1512*FLEN/8, x4, x1, x2)

inst_505:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x43bf5cc03880c and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x26a68eb42ac84 and fs3 == 0 and fe3 == 0x3fb and fm3 == 0x74a06712e3a30 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd43bf5cc03880c; op2val:0xbfd26a68eb42ac84;
op3val:0x3fb74a06712e3a30; valaddr_reg:x3; val_offset:1515*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1515*FLEN/8, x4, x1, x2)

inst_506:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x43bf5cc03880c and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x26a68eb42ac84 and fs3 == 0 and fe3 == 0x3fb and fm3 == 0x74a06712e3a30 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd43bf5cc03880c; op2val:0xbfd26a68eb42ac84;
op3val:0x3fb74a06712e3a30; valaddr_reg:x3; val_offset:1518*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1518*FLEN/8, x4, x1, x2)

inst_507:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x43bf5cc03880c and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x26a68eb42ac84 and fs3 == 0 and fe3 == 0x3fb and fm3 == 0x74a06712e3a30 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd43bf5cc03880c; op2val:0xbfd26a68eb42ac84;
op3val:0x3fb74a06712e3a30; valaddr_reg:x3; val_offset:1521*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1521*FLEN/8, x4, x1, x2)

inst_508:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x43bf5cc03880c and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x26a68eb42ac84 and fs3 == 0 and fe3 == 0x3fb and fm3 == 0x74a06712e3a30 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd43bf5cc03880c; op2val:0xbfd26a68eb42ac84;
op3val:0x3fb74a06712e3a30; valaddr_reg:x3; val_offset:1524*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1524*FLEN/8, x4, x1, x2)

inst_509:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x43bf5cc03880c and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x26a68eb42ac84 and fs3 == 0 and fe3 == 0x3fb and fm3 == 0x74a06712e3a30 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd43bf5cc03880c; op2val:0xbfd26a68eb42ac84;
op3val:0x3fb74a06712e3a30; valaddr_reg:x3; val_offset:1527*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1527*FLEN/8, x4, x1, x2)

inst_510:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x49315eccc6a62 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x39257c68bae1a and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x92ad9105a8c38 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd49315eccc6a62; op2val:0xbff39257c68bae1a;
op3val:0x3fd92ad9105a8c38; valaddr_reg:x3; val_offset:1530*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1530*FLEN/8, x4, x1, x2)

inst_511:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x49315eccc6a62 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x39257c68bae1a and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x92ad9105a8c38 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd49315eccc6a62; op2val:0xbff39257c68bae1a;
op3val:0x3fd92ad9105a8c38; valaddr_reg:x3; val_offset:1533*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1533*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_5)

inst_512:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x49315eccc6a62 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x39257c68bae1a and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x92ad9105a8c38 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd49315eccc6a62; op2val:0xbff39257c68bae1a;
op3val:0x3fd92ad9105a8c38; valaddr_reg:x3; val_offset:1536*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1536*FLEN/8, x4, x1, x2)

inst_513:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x49315eccc6a62 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x39257c68bae1a and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x92ad9105a8c38 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd49315eccc6a62; op2val:0xbff39257c68bae1a;
op3val:0x3fd92ad9105a8c38; valaddr_reg:x3; val_offset:1539*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1539*FLEN/8, x4, x1, x2)

inst_514:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x49315eccc6a62 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x39257c68bae1a and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x92ad9105a8c38 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd49315eccc6a62; op2val:0xbff39257c68bae1a;
op3val:0x3fd92ad9105a8c38; valaddr_reg:x3; val_offset:1542*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1542*FLEN/8, x4, x1, x2)

inst_515:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x5709e8a5be0f8 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0xf399c57c33a09 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x4ebb2f0415449 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd5709e8a5be0f8; op2val:0xbfff399c57c33a09;
op3val:0x3fe4ebb2f0415449; valaddr_reg:x3; val_offset:1545*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1545*FLEN/8, x4, x1, x2)

inst_516:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x5709e8a5be0f8 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0xf399c57c33a09 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x4ebb2f0415449 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd5709e8a5be0f8; op2val:0xbfff399c57c33a09;
op3val:0x3fe4ebb2f0415449; valaddr_reg:x3; val_offset:1548*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1548*FLEN/8, x4, x1, x2)

inst_517:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x5709e8a5be0f8 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0xf399c57c33a09 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x4ebb2f0415449 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd5709e8a5be0f8; op2val:0xbfff399c57c33a09;
op3val:0x3fe4ebb2f0415449; valaddr_reg:x3; val_offset:1551*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1551*FLEN/8, x4, x1, x2)

inst_518:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x5709e8a5be0f8 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0xf399c57c33a09 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x4ebb2f0415449 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd5709e8a5be0f8; op2val:0xbfff399c57c33a09;
op3val:0x3fe4ebb2f0415449; valaddr_reg:x3; val_offset:1554*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1554*FLEN/8, x4, x1, x2)

inst_519:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x5709e8a5be0f8 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0xf399c57c33a09 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x4ebb2f0415449 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd5709e8a5be0f8; op2val:0xbfff399c57c33a09;
op3val:0x3fe4ebb2f0415449; valaddr_reg:x3; val_offset:1557*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1557*FLEN/8, x4, x1, x2)

inst_520:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x58e99712ee18c and fs2 == 1 and fe2 == 0x3fb and fm2 == 0x31e4020d0b428 and fs3 == 0 and fe3 == 0x3f9 and fm3 == 0x9c217fcb80be0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd58e99712ee18c; op2val:0xbfb31e4020d0b428;
op3val:0x3f99c217fcb80be0; valaddr_reg:x3; val_offset:1560*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1560*FLEN/8, x4, x1, x2)

inst_521:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x58e99712ee18c and fs2 == 1 and fe2 == 0x3fb and fm2 == 0x31e4020d0b428 and fs3 == 0 and fe3 == 0x3f9 and fm3 == 0x9c217fcb80be0 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd58e99712ee18c; op2val:0xbfb31e4020d0b428;
op3val:0x3f99c217fcb80be0; valaddr_reg:x3; val_offset:1563*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1563*FLEN/8, x4, x1, x2)

inst_522:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x58e99712ee18c and fs2 == 1 and fe2 == 0x3fb and fm2 == 0x31e4020d0b428 and fs3 == 0 and fe3 == 0x3f9 and fm3 == 0x9c217fcb80be0 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd58e99712ee18c; op2val:0xbfb31e4020d0b428;
op3val:0x3f99c217fcb80be0; valaddr_reg:x3; val_offset:1566*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1566*FLEN/8, x4, x1, x2)

inst_523:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x58e99712ee18c and fs2 == 1 and fe2 == 0x3fb and fm2 == 0x31e4020d0b428 and fs3 == 0 and fe3 == 0x3f9 and fm3 == 0x9c217fcb80be0 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd58e99712ee18c; op2val:0xbfb31e4020d0b428;
op3val:0x3f99c217fcb80be0; valaddr_reg:x3; val_offset:1569*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1569*FLEN/8, x4, x1, x2)

inst_524:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x58e99712ee18c and fs2 == 1 and fe2 == 0x3fb and fm2 == 0x31e4020d0b428 and fs3 == 0 and fe3 == 0x3f9 and fm3 == 0x9c217fcb80be0 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd58e99712ee18c; op2val:0xbfb31e4020d0b428;
op3val:0x3f99c217fcb80be0; valaddr_reg:x3; val_offset:1572*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1572*FLEN/8, x4, x1, x2)

inst_525:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x62725147d5cfa and fs2 == 1 and fe2 == 0x3ff and fm2 == 0xe75e8ae9a47b3 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x51652f774edb8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd62725147d5cfa; op2val:0xbffe75e8ae9a47b3;
op3val:0x3fe51652f774edb8; valaddr_reg:x3; val_offset:1575*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1575*FLEN/8, x4, x1, x2)

inst_526:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x62725147d5cfa and fs2 == 1 and fe2 == 0x3ff and fm2 == 0xe75e8ae9a47b3 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x51652f774edb8 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd62725147d5cfa; op2val:0xbffe75e8ae9a47b3;
op3val:0x3fe51652f774edb8; valaddr_reg:x3; val_offset:1578*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1578*FLEN/8, x4, x1, x2)

inst_527:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x62725147d5cfa and fs2 == 1 and fe2 == 0x3ff and fm2 == 0xe75e8ae9a47b3 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x51652f774edb8 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd62725147d5cfa; op2val:0xbffe75e8ae9a47b3;
op3val:0x3fe51652f774edb8; valaddr_reg:x3; val_offset:1581*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1581*FLEN/8, x4, x1, x2)

inst_528:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x62725147d5cfa and fs2 == 1 and fe2 == 0x3ff and fm2 == 0xe75e8ae9a47b3 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x51652f774edb8 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd62725147d5cfa; op2val:0xbffe75e8ae9a47b3;
op3val:0x3fe51652f774edb8; valaddr_reg:x3; val_offset:1584*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1584*FLEN/8, x4, x1, x2)

inst_529:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x62725147d5cfa and fs2 == 1 and fe2 == 0x3ff and fm2 == 0xe75e8ae9a47b3 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x51652f774edb8 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd62725147d5cfa; op2val:0xbffe75e8ae9a47b3;
op3val:0x3fe51652f774edb8; valaddr_reg:x3; val_offset:1587*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1587*FLEN/8, x4, x1, x2)

inst_530:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x62ab9f9902b34 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0xd46ae37e11a33 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x447aeb0052dbc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd62ab9f9902b34; op2val:0xbffd46ae37e11a33;
op3val:0x3fe447aeb0052dbc; valaddr_reg:x3; val_offset:1590*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1590*FLEN/8, x4, x1, x2)

inst_531:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x62ab9f9902b34 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0xd46ae37e11a33 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x447aeb0052dbc and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd62ab9f9902b34; op2val:0xbffd46ae37e11a33;
op3val:0x3fe447aeb0052dbc; valaddr_reg:x3; val_offset:1593*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1593*FLEN/8, x4, x1, x2)

inst_532:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x62ab9f9902b34 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0xd46ae37e11a33 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x447aeb0052dbc and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd62ab9f9902b34; op2val:0xbffd46ae37e11a33;
op3val:0x3fe447aeb0052dbc; valaddr_reg:x3; val_offset:1596*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1596*FLEN/8, x4, x1, x2)

inst_533:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x62ab9f9902b34 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0xd46ae37e11a33 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x447aeb0052dbc and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd62ab9f9902b34; op2val:0xbffd46ae37e11a33;
op3val:0x3fe447aeb0052dbc; valaddr_reg:x3; val_offset:1599*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1599*FLEN/8, x4, x1, x2)

inst_534:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x62ab9f9902b34 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0xd46ae37e11a33 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x447aeb0052dbc and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd62ab9f9902b34; op2val:0xbffd46ae37e11a33;
op3val:0x3fe447aeb0052dbc; valaddr_reg:x3; val_offset:1602*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1602*FLEN/8, x4, x1, x2)

inst_535:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x69063a431773c and fs2 == 1 and fe2 == 0x400 and fm2 == 0x3df0c654462a9 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xc06043ad5cff1 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd69063a431773c; op2val:0xc003df0c654462a9;
op3val:0x3fec06043ad5cff1; valaddr_reg:x3; val_offset:1605*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1605*FLEN/8, x4, x1, x2)

inst_536:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x69063a431773c and fs2 == 1 and fe2 == 0x400 and fm2 == 0x3df0c654462a9 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xc06043ad5cff1 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd69063a431773c; op2val:0xc003df0c654462a9;
op3val:0x3fec06043ad5cff1; valaddr_reg:x3; val_offset:1608*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1608*FLEN/8, x4, x1, x2)

inst_537:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x69063a431773c and fs2 == 1 and fe2 == 0x400 and fm2 == 0x3df0c654462a9 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xc06043ad5cff1 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd69063a431773c; op2val:0xc003df0c654462a9;
op3val:0x3fec06043ad5cff1; valaddr_reg:x3; val_offset:1611*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1611*FLEN/8, x4, x1, x2)

inst_538:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x69063a431773c and fs2 == 1 and fe2 == 0x400 and fm2 == 0x3df0c654462a9 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xc06043ad5cff1 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd69063a431773c; op2val:0xc003df0c654462a9;
op3val:0x3fec06043ad5cff1; valaddr_reg:x3; val_offset:1614*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1614*FLEN/8, x4, x1, x2)

inst_539:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x69063a431773c and fs2 == 1 and fe2 == 0x400 and fm2 == 0x3df0c654462a9 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xc06043ad5cff1 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd69063a431773c; op2val:0xc003df0c654462a9;
op3val:0x3fec06043ad5cff1; valaddr_reg:x3; val_offset:1617*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1617*FLEN/8, x4, x1, x2)

inst_540:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x696fd75de4a0e and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x3689f54ca1200 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0xb67035fa2de78 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd696fd75de4a0e; op2val:0xbfe3689f54ca1200;
op3val:0x3fcb67035fa2de78; valaddr_reg:x3; val_offset:1620*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1620*FLEN/8, x4, x1, x2)

inst_541:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x696fd75de4a0e and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x3689f54ca1200 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0xb67035fa2de78 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd696fd75de4a0e; op2val:0xbfe3689f54ca1200;
op3val:0x3fcb67035fa2de78; valaddr_reg:x3; val_offset:1623*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1623*FLEN/8, x4, x1, x2)

inst_542:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x696fd75de4a0e and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x3689f54ca1200 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0xb67035fa2de78 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd696fd75de4a0e; op2val:0xbfe3689f54ca1200;
op3val:0x3fcb67035fa2de78; valaddr_reg:x3; val_offset:1626*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1626*FLEN/8, x4, x1, x2)

inst_543:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x696fd75de4a0e and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x3689f54ca1200 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0xb67035fa2de78 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd696fd75de4a0e; op2val:0xbfe3689f54ca1200;
op3val:0x3fcb67035fa2de78; valaddr_reg:x3; val_offset:1629*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1629*FLEN/8, x4, x1, x2)

inst_544:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x696fd75de4a0e and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x3689f54ca1200 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0xb67035fa2de78 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd696fd75de4a0e; op2val:0xbfe3689f54ca1200;
op3val:0x3fcb67035fa2de78; valaddr_reg:x3; val_offset:1632*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1632*FLEN/8, x4, x1, x2)

inst_545:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x6eba0a7c1f55e and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x829f62b49c1eb and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x14ec6b60ce679 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd6eba0a7c1f55e; op2val:0xbff829f62b49c1eb;
op3val:0x3fe14ec6b60ce679; valaddr_reg:x3; val_offset:1635*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1635*FLEN/8, x4, x1, x2)

inst_546:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x6eba0a7c1f55e and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x829f62b49c1eb and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x14ec6b60ce679 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd6eba0a7c1f55e; op2val:0xbff829f62b49c1eb;
op3val:0x3fe14ec6b60ce679; valaddr_reg:x3; val_offset:1638*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1638*FLEN/8, x4, x1, x2)

inst_547:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x6eba0a7c1f55e and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x829f62b49c1eb and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x14ec6b60ce679 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd6eba0a7c1f55e; op2val:0xbff829f62b49c1eb;
op3val:0x3fe14ec6b60ce679; valaddr_reg:x3; val_offset:1641*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1641*FLEN/8, x4, x1, x2)

inst_548:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x6eba0a7c1f55e and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x829f62b49c1eb and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x14ec6b60ce679 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd6eba0a7c1f55e; op2val:0xbff829f62b49c1eb;
op3val:0x3fe14ec6b60ce679; valaddr_reg:x3; val_offset:1644*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1644*FLEN/8, x4, x1, x2)

inst_549:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x6eba0a7c1f55e and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x829f62b49c1eb and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x14ec6b60ce679 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd6eba0a7c1f55e; op2val:0xbff829f62b49c1eb;
op3val:0x3fe14ec6b60ce679; valaddr_reg:x3; val_offset:1647*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1647*FLEN/8, x4, x1, x2)

inst_550:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x74b46a4cb32a2 and fs2 == 1 and fe2 == 0x400 and fm2 == 0x068e4471fe8b3 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x7e3fc483585d7 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd74b46a4cb32a2; op2val:0xc00068e4471fe8b3;
op3val:0x3fe7e3fc483585d7; valaddr_reg:x3; val_offset:1650*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1650*FLEN/8, x4, x1, x2)

inst_551:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x74b46a4cb32a2 and fs2 == 1 and fe2 == 0x400 and fm2 == 0x068e4471fe8b3 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x7e3fc483585d7 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd74b46a4cb32a2; op2val:0xc00068e4471fe8b3;
op3val:0x3fe7e3fc483585d7; valaddr_reg:x3; val_offset:1653*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1653*FLEN/8, x4, x1, x2)

inst_552:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x74b46a4cb32a2 and fs2 == 1 and fe2 == 0x400 and fm2 == 0x068e4471fe8b3 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x7e3fc483585d7 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd74b46a4cb32a2; op2val:0xc00068e4471fe8b3;
op3val:0x3fe7e3fc483585d7; valaddr_reg:x3; val_offset:1656*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1656*FLEN/8, x4, x1, x2)

inst_553:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x74b46a4cb32a2 and fs2 == 1 and fe2 == 0x400 and fm2 == 0x068e4471fe8b3 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x7e3fc483585d7 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd74b46a4cb32a2; op2val:0xc00068e4471fe8b3;
op3val:0x3fe7e3fc483585d7; valaddr_reg:x3; val_offset:1659*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1659*FLEN/8, x4, x1, x2)

inst_554:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x74b46a4cb32a2 and fs2 == 1 and fe2 == 0x400 and fm2 == 0x068e4471fe8b3 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x7e3fc483585d7 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd74b46a4cb32a2; op2val:0xc00068e4471fe8b3;
op3val:0x3fe7e3fc483585d7; valaddr_reg:x3; val_offset:1662*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1662*FLEN/8, x4, x1, x2)

inst_555:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x797bc50a1bdbc and fs2 == 1 and fe2 == 0x400 and fm2 == 0x4150785e33142 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xd9cada3c2b37b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd797bc50a1bdbc; op2val:0xc004150785e33142;
op3val:0x3fed9cada3c2b37b; valaddr_reg:x3; val_offset:1665*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1665*FLEN/8, x4, x1, x2)

inst_556:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x797bc50a1bdbc and fs2 == 1 and fe2 == 0x400 and fm2 == 0x4150785e33142 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xd9cada3c2b37b and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd797bc50a1bdbc; op2val:0xc004150785e33142;
op3val:0x3fed9cada3c2b37b; valaddr_reg:x3; val_offset:1668*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1668*FLEN/8, x4, x1, x2)

inst_557:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x797bc50a1bdbc and fs2 == 1 and fe2 == 0x400 and fm2 == 0x4150785e33142 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xd9cada3c2b37b and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd797bc50a1bdbc; op2val:0xc004150785e33142;
op3val:0x3fed9cada3c2b37b; valaddr_reg:x3; val_offset:1671*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1671*FLEN/8, x4, x1, x2)

inst_558:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x797bc50a1bdbc and fs2 == 1 and fe2 == 0x400 and fm2 == 0x4150785e33142 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xd9cada3c2b37b and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd797bc50a1bdbc; op2val:0xc004150785e33142;
op3val:0x3fed9cada3c2b37b; valaddr_reg:x3; val_offset:1674*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1674*FLEN/8, x4, x1, x2)

inst_559:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x797bc50a1bdbc and fs2 == 1 and fe2 == 0x400 and fm2 == 0x4150785e33142 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xd9cada3c2b37b and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd797bc50a1bdbc; op2val:0xc004150785e33142;
op3val:0x3fed9cada3c2b37b; valaddr_reg:x3; val_offset:1677*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1677*FLEN/8, x4, x1, x2)

inst_560:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x7b8ced1341a78 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0xe8d207b6f02ba and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x6a5e047ba1da0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd7b8ced1341a78; op2val:0xbffe8d207b6f02ba;
op3val:0x3fe6a5e047ba1da0; valaddr_reg:x3; val_offset:1680*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1680*FLEN/8, x4, x1, x2)

inst_561:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x7b8ced1341a78 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0xe8d207b6f02ba and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x6a5e047ba1da0 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd7b8ced1341a78; op2val:0xbffe8d207b6f02ba;
op3val:0x3fe6a5e047ba1da0; valaddr_reg:x3; val_offset:1683*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1683*FLEN/8, x4, x1, x2)

inst_562:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x7b8ced1341a78 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0xe8d207b6f02ba and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x6a5e047ba1da0 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd7b8ced1341a78; op2val:0xbffe8d207b6f02ba;
op3val:0x3fe6a5e047ba1da0; valaddr_reg:x3; val_offset:1686*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1686*FLEN/8, x4, x1, x2)

inst_563:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x7b8ced1341a78 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0xe8d207b6f02ba and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x6a5e047ba1da0 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd7b8ced1341a78; op2val:0xbffe8d207b6f02ba;
op3val:0x3fe6a5e047ba1da0; valaddr_reg:x3; val_offset:1689*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1689*FLEN/8, x4, x1, x2)

inst_564:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x7b8ced1341a78 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0xe8d207b6f02ba and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x6a5e047ba1da0 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd7b8ced1341a78; op2val:0xbffe8d207b6f02ba;
op3val:0x3fe6a5e047ba1da0; valaddr_reg:x3; val_offset:1692*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1692*FLEN/8, x4, x1, x2)

inst_565:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x7bb21774988e0 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x59b9b99328c30 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x00633c4685c2b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd7bb21774988e0; op2val:0xbff59b9b99328c30;
op3val:0x3fe00633c4685c2b; valaddr_reg:x3; val_offset:1695*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1695*FLEN/8, x4, x1, x2)

inst_566:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x7bb21774988e0 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x59b9b99328c30 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x00633c4685c2b and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd7bb21774988e0; op2val:0xbff59b9b99328c30;
op3val:0x3fe00633c4685c2b; valaddr_reg:x3; val_offset:1698*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1698*FLEN/8, x4, x1, x2)

inst_567:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x7bb21774988e0 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x59b9b99328c30 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x00633c4685c2b and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd7bb21774988e0; op2val:0xbff59b9b99328c30;
op3val:0x3fe00633c4685c2b; valaddr_reg:x3; val_offset:1701*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1701*FLEN/8, x4, x1, x2)

inst_568:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x7bb21774988e0 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x59b9b99328c30 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x00633c4685c2b and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd7bb21774988e0; op2val:0xbff59b9b99328c30;
op3val:0x3fe00633c4685c2b; valaddr_reg:x3; val_offset:1704*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1704*FLEN/8, x4, x1, x2)

inst_569:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x7bb21774988e0 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x59b9b99328c30 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x00633c4685c2b and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd7bb21774988e0; op2val:0xbff59b9b99328c30;
op3val:0x3fe00633c4685c2b; valaddr_reg:x3; val_offset:1707*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1707*FLEN/8, x4, x1, x2)

inst_570:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x7c39d9aa35b8c and fs2 == 1 and fe2 == 0x400 and fm2 == 0x4b6bea9b919dc and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xec3f1510fdddc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd7c39d9aa35b8c; op2val:0xc004b6bea9b919dc;
op3val:0x3feec3f1510fdddc; valaddr_reg:x3; val_offset:1710*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1710*FLEN/8, x4, x1, x2)

inst_571:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x7c39d9aa35b8c and fs2 == 1 and fe2 == 0x400 and fm2 == 0x4b6bea9b919dc and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xec3f1510fdddc and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd7c39d9aa35b8c; op2val:0xc004b6bea9b919dc;
op3val:0x3feec3f1510fdddc; valaddr_reg:x3; val_offset:1713*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1713*FLEN/8, x4, x1, x2)

inst_572:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x7c39d9aa35b8c and fs2 == 1 and fe2 == 0x400 and fm2 == 0x4b6bea9b919dc and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xec3f1510fdddc and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd7c39d9aa35b8c; op2val:0xc004b6bea9b919dc;
op3val:0x3feec3f1510fdddc; valaddr_reg:x3; val_offset:1716*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1716*FLEN/8, x4, x1, x2)

inst_573:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x7c39d9aa35b8c and fs2 == 1 and fe2 == 0x400 and fm2 == 0x4b6bea9b919dc and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xec3f1510fdddc and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd7c39d9aa35b8c; op2val:0xc004b6bea9b919dc;
op3val:0x3feec3f1510fdddc; valaddr_reg:x3; val_offset:1719*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1719*FLEN/8, x4, x1, x2)

inst_574:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x7c39d9aa35b8c and fs2 == 1 and fe2 == 0x400 and fm2 == 0x4b6bea9b919dc and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xec3f1510fdddc and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd7c39d9aa35b8c; op2val:0xc004b6bea9b919dc;
op3val:0x3feec3f1510fdddc; valaddr_reg:x3; val_offset:1722*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1722*FLEN/8, x4, x1, x2)

inst_575:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x7fe2999599722 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0xd53eeb5542f77 and fs3 == 0 and fe3 == 0x3fa and fm3 == 0x5fd43e9290ff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd7fe2999599722; op2val:0xbfbd53eeb5542f77;
op3val:0x3fa5fd43e9290ff0; valaddr_reg:x3; val_offset:1725*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1725*FLEN/8, x4, x1, x2)

inst_576:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x7fe2999599722 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0xd53eeb5542f77 and fs3 == 0 and fe3 == 0x3fa and fm3 == 0x5fd43e9290ff0 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd7fe2999599722; op2val:0xbfbd53eeb5542f77;
op3val:0x3fa5fd43e9290ff0; valaddr_reg:x3; val_offset:1728*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1728*FLEN/8, x4, x1, x2)

inst_577:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x7fe2999599722 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0xd53eeb5542f77 and fs3 == 0 and fe3 == 0x3fa and fm3 == 0x5fd43e9290ff0 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd7fe2999599722; op2val:0xbfbd53eeb5542f77;
op3val:0x3fa5fd43e9290ff0; valaddr_reg:x3; val_offset:1731*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1731*FLEN/8, x4, x1, x2)

inst_578:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x7fe2999599722 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0xd53eeb5542f77 and fs3 == 0 and fe3 == 0x3fa and fm3 == 0x5fd43e9290ff0 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd7fe2999599722; op2val:0xbfbd53eeb5542f77;
op3val:0x3fa5fd43e9290ff0; valaddr_reg:x3; val_offset:1734*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1734*FLEN/8, x4, x1, x2)

inst_579:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x7fe2999599722 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0xd53eeb5542f77 and fs3 == 0 and fe3 == 0x3fa and fm3 == 0x5fd43e9290ff0 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd7fe2999599722; op2val:0xbfbd53eeb5542f77;
op3val:0x3fa5fd43e9290ff0; valaddr_reg:x3; val_offset:1737*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1737*FLEN/8, x4, x1, x2)

inst_580:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x80e8c7f135eee and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x78dc42844e792 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x1b5088dc8608c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd80e8c7f135eee; op2val:0xbff78dc42844e792;
op3val:0x3fe1b5088dc8608c; valaddr_reg:x3; val_offset:1740*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1740*FLEN/8, x4, x1, x2)

inst_581:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x80e8c7f135eee and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x78dc42844e792 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x1b5088dc8608c and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd80e8c7f135eee; op2val:0xbff78dc42844e792;
op3val:0x3fe1b5088dc8608c; valaddr_reg:x3; val_offset:1743*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1743*FLEN/8, x4, x1, x2)

inst_582:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x80e8c7f135eee and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x78dc42844e792 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x1b5088dc8608c and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd80e8c7f135eee; op2val:0xbff78dc42844e792;
op3val:0x3fe1b5088dc8608c; valaddr_reg:x3; val_offset:1746*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1746*FLEN/8, x4, x1, x2)

inst_583:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x80e8c7f135eee and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x78dc42844e792 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x1b5088dc8608c and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd80e8c7f135eee; op2val:0xbff78dc42844e792;
op3val:0x3fe1b5088dc8608c; valaddr_reg:x3; val_offset:1749*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1749*FLEN/8, x4, x1, x2)

inst_584:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x80e8c7f135eee and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x78dc42844e792 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x1b5088dc8608c and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd80e8c7f135eee; op2val:0xbff78dc42844e792;
op3val:0x3fe1b5088dc8608c; valaddr_reg:x3; val_offset:1752*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1752*FLEN/8, x4, x1, x2)

inst_585:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x83a7eb80f24c6 and fs2 == 1 and fe2 == 0x400 and fm2 == 0x21aff4ede80a4 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xb6ab038adcf98 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd83a7eb80f24c6; op2val:0xc0021aff4ede80a4;
op3val:0x3feb6ab038adcf98; valaddr_reg:x3; val_offset:1755*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1755*FLEN/8, x4, x1, x2)

inst_586:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x83a7eb80f24c6 and fs2 == 1 and fe2 == 0x400 and fm2 == 0x21aff4ede80a4 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xb6ab038adcf98 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd83a7eb80f24c6; op2val:0xc0021aff4ede80a4;
op3val:0x3feb6ab038adcf98; valaddr_reg:x3; val_offset:1758*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1758*FLEN/8, x4, x1, x2)

inst_587:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x83a7eb80f24c6 and fs2 == 1 and fe2 == 0x400 and fm2 == 0x21aff4ede80a4 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xb6ab038adcf98 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd83a7eb80f24c6; op2val:0xc0021aff4ede80a4;
op3val:0x3feb6ab038adcf98; valaddr_reg:x3; val_offset:1761*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1761*FLEN/8, x4, x1, x2)

inst_588:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x83a7eb80f24c6 and fs2 == 1 and fe2 == 0x400 and fm2 == 0x21aff4ede80a4 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xb6ab038adcf98 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd83a7eb80f24c6; op2val:0xc0021aff4ede80a4;
op3val:0x3feb6ab038adcf98; valaddr_reg:x3; val_offset:1764*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1764*FLEN/8, x4, x1, x2)

inst_589:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x83a7eb80f24c6 and fs2 == 1 and fe2 == 0x400 and fm2 == 0x21aff4ede80a4 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xb6ab038adcf98 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd83a7eb80f24c6; op2val:0xc0021aff4ede80a4;
op3val:0x3feb6ab038adcf98; valaddr_reg:x3; val_offset:1767*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1767*FLEN/8, x4, x1, x2)

inst_590:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x879818ee7c52e and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x0089b71af5cbd and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x886ac16acb34c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd879818ee7c52e; op2val:0xbff0089b71af5cbd;
op3val:0x3fd886ac16acb34c; valaddr_reg:x3; val_offset:1770*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1770*FLEN/8, x4, x1, x2)

inst_591:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x879818ee7c52e and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x0089b71af5cbd and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x886ac16acb34c and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd879818ee7c52e; op2val:0xbff0089b71af5cbd;
op3val:0x3fd886ac16acb34c; valaddr_reg:x3; val_offset:1773*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1773*FLEN/8, x4, x1, x2)

inst_592:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x879818ee7c52e and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x0089b71af5cbd and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x886ac16acb34c and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd879818ee7c52e; op2val:0xbff0089b71af5cbd;
op3val:0x3fd886ac16acb34c; valaddr_reg:x3; val_offset:1776*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1776*FLEN/8, x4, x1, x2)

inst_593:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x879818ee7c52e and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x0089b71af5cbd and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x886ac16acb34c and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd879818ee7c52e; op2val:0xbff0089b71af5cbd;
op3val:0x3fd886ac16acb34c; valaddr_reg:x3; val_offset:1779*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1779*FLEN/8, x4, x1, x2)

inst_594:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x879818ee7c52e and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x0089b71af5cbd and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x886ac16acb34c and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd879818ee7c52e; op2val:0xbff0089b71af5cbd;
op3val:0x3fd886ac16acb34c; valaddr_reg:x3; val_offset:1782*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1782*FLEN/8, x4, x1, x2)

inst_595:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x8b81badb38620 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x83da0789ab74b and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x2b9afacbe12b9 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd8b81badb38620; op2val:0xbff83da0789ab74b;
op3val:0x3fe2b9afacbe12b9; valaddr_reg:x3; val_offset:1785*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1785*FLEN/8, x4, x1, x2)

inst_596:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x8b81badb38620 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x83da0789ab74b and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x2b9afacbe12b9 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd8b81badb38620; op2val:0xbff83da0789ab74b;
op3val:0x3fe2b9afacbe12b9; valaddr_reg:x3; val_offset:1788*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1788*FLEN/8, x4, x1, x2)

inst_597:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x8b81badb38620 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x83da0789ab74b and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x2b9afacbe12b9 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd8b81badb38620; op2val:0xbff83da0789ab74b;
op3val:0x3fe2b9afacbe12b9; valaddr_reg:x3; val_offset:1791*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1791*FLEN/8, x4, x1, x2)

inst_598:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x8b81badb38620 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x83da0789ab74b and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x2b9afacbe12b9 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd8b81badb38620; op2val:0xbff83da0789ab74b;
op3val:0x3fe2b9afacbe12b9; valaddr_reg:x3; val_offset:1794*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1794*FLEN/8, x4, x1, x2)

inst_599:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x8b81badb38620 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x83da0789ab74b and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x2b9afacbe12b9 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd8b81badb38620; op2val:0xbff83da0789ab74b;
op3val:0x3fe2b9afacbe12b9; valaddr_reg:x3; val_offset:1797*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1797*FLEN/8, x4, x1, x2)

inst_600:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x8dce228bf6098 and fs2 == 1 and fe2 == 0x400 and fm2 == 0x420925172d1c4 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xf46b7d5611001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd8dce228bf6098; op2val:0xc00420925172d1c4;
op3val:0x3fef46b7d5611001; valaddr_reg:x3; val_offset:1800*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1800*FLEN/8, x4, x1, x2)

inst_601:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x8dce228bf6098 and fs2 == 1 and fe2 == 0x400 and fm2 == 0x420925172d1c4 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xf46b7d5611001 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd8dce228bf6098; op2val:0xc00420925172d1c4;
op3val:0x3fef46b7d5611001; valaddr_reg:x3; val_offset:1803*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1803*FLEN/8, x4, x1, x2)

inst_602:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x8dce228bf6098 and fs2 == 1 and fe2 == 0x400 and fm2 == 0x420925172d1c4 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xf46b7d5611001 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd8dce228bf6098; op2val:0xc00420925172d1c4;
op3val:0x3fef46b7d5611001; valaddr_reg:x3; val_offset:1806*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1806*FLEN/8, x4, x1, x2)

inst_603:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x8dce228bf6098 and fs2 == 1 and fe2 == 0x400 and fm2 == 0x420925172d1c4 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xf46b7d5611001 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd8dce228bf6098; op2val:0xc00420925172d1c4;
op3val:0x3fef46b7d5611001; valaddr_reg:x3; val_offset:1809*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1809*FLEN/8, x4, x1, x2)

inst_604:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x8dce228bf6098 and fs2 == 1 and fe2 == 0x400 and fm2 == 0x420925172d1c4 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xf46b7d5611001 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd8dce228bf6098; op2val:0xc00420925172d1c4;
op3val:0x3fef46b7d5611001; valaddr_reg:x3; val_offset:1812*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1812*FLEN/8, x4, x1, x2)

inst_605:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x8de9966990f6a and fs2 == 1 and fe2 == 0x400 and fm2 == 0x23d98c6af7d52 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xc5a2ab3c8175e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd8de9966990f6a; op2val:0xc0023d98c6af7d52;
op3val:0x3fec5a2ab3c8175e; valaddr_reg:x3; val_offset:1815*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1815*FLEN/8, x4, x1, x2)

inst_606:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x8de9966990f6a and fs2 == 1 and fe2 == 0x400 and fm2 == 0x23d98c6af7d52 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xc5a2ab3c8175e and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd8de9966990f6a; op2val:0xc0023d98c6af7d52;
op3val:0x3fec5a2ab3c8175e; valaddr_reg:x3; val_offset:1818*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1818*FLEN/8, x4, x1, x2)

inst_607:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x8de9966990f6a and fs2 == 1 and fe2 == 0x400 and fm2 == 0x23d98c6af7d52 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xc5a2ab3c8175e and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd8de9966990f6a; op2val:0xc0023d98c6af7d52;
op3val:0x3fec5a2ab3c8175e; valaddr_reg:x3; val_offset:1821*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1821*FLEN/8, x4, x1, x2)

inst_608:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x8de9966990f6a and fs2 == 1 and fe2 == 0x400 and fm2 == 0x23d98c6af7d52 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xc5a2ab3c8175e and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd8de9966990f6a; op2val:0xc0023d98c6af7d52;
op3val:0x3fec5a2ab3c8175e; valaddr_reg:x3; val_offset:1824*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1824*FLEN/8, x4, x1, x2)

inst_609:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x8de9966990f6a and fs2 == 1 and fe2 == 0x400 and fm2 == 0x23d98c6af7d52 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xc5a2ab3c8175e and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd8de9966990f6a; op2val:0xc0023d98c6af7d52;
op3val:0x3fec5a2ab3c8175e; valaddr_reg:x3; val_offset:1827*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1827*FLEN/8, x4, x1, x2)

inst_610:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x94118ee35484c and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x46311f37dd73e and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x016df24c1260c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd94118ee35484c; op2val:0xbff46311f37dd73e;
op3val:0x3fe016df24c1260c; valaddr_reg:x3; val_offset:1830*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1830*FLEN/8, x4, x1, x2)

inst_611:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x94118ee35484c and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x46311f37dd73e and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x016df24c1260c and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd94118ee35484c; op2val:0xbff46311f37dd73e;
op3val:0x3fe016df24c1260c; valaddr_reg:x3; val_offset:1833*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1833*FLEN/8, x4, x1, x2)

inst_612:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x94118ee35484c and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x46311f37dd73e and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x016df24c1260c and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd94118ee35484c; op2val:0xbff46311f37dd73e;
op3val:0x3fe016df24c1260c; valaddr_reg:x3; val_offset:1836*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1836*FLEN/8, x4, x1, x2)

inst_613:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x94118ee35484c and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x46311f37dd73e and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x016df24c1260c and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd94118ee35484c; op2val:0xbff46311f37dd73e;
op3val:0x3fe016df24c1260c; valaddr_reg:x3; val_offset:1839*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1839*FLEN/8, x4, x1, x2)

inst_614:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x94118ee35484c and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x46311f37dd73e and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x016df24c1260c and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd94118ee35484c; op2val:0xbff46311f37dd73e;
op3val:0x3fe016df24c1260c; valaddr_reg:x3; val_offset:1842*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1842*FLEN/8, x4, x1, x2)

inst_615:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x96a17dfd3d600 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x7ee77b51eb931 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x301a54cd23f48 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd96a17dfd3d600; op2val:0xbff7ee77b51eb931;
op3val:0x3fe301a54cd23f48; valaddr_reg:x3; val_offset:1845*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1845*FLEN/8, x4, x1, x2)

inst_616:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x96a17dfd3d600 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x7ee77b51eb931 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x301a54cd23f48 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd96a17dfd3d600; op2val:0xbff7ee77b51eb931;
op3val:0x3fe301a54cd23f48; valaddr_reg:x3; val_offset:1848*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1848*FLEN/8, x4, x1, x2)

inst_617:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x96a17dfd3d600 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x7ee77b51eb931 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x301a54cd23f48 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd96a17dfd3d600; op2val:0xbff7ee77b51eb931;
op3val:0x3fe301a54cd23f48; valaddr_reg:x3; val_offset:1851*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1851*FLEN/8, x4, x1, x2)

inst_618:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x96a17dfd3d600 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x7ee77b51eb931 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x301a54cd23f48 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd96a17dfd3d600; op2val:0xbff7ee77b51eb931;
op3val:0x3fe301a54cd23f48; valaddr_reg:x3; val_offset:1854*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1854*FLEN/8, x4, x1, x2)

inst_619:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x96a17dfd3d600 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x7ee77b51eb931 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x301a54cd23f48 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd96a17dfd3d600; op2val:0xbff7ee77b51eb931;
op3val:0x3fe301a54cd23f48; valaddr_reg:x3; val_offset:1857*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1857*FLEN/8, x4, x1, x2)

inst_620:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x985358246334e and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xb9c9e28d271e8 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x6054cad0cdca8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd985358246334e; op2val:0xbfeb9c9e28d271e8;
op3val:0x3fd6054cad0cdca8; valaddr_reg:x3; val_offset:1860*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1860*FLEN/8, x4, x1, x2)

inst_621:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x985358246334e and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xb9c9e28d271e8 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x6054cad0cdca8 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd985358246334e; op2val:0xbfeb9c9e28d271e8;
op3val:0x3fd6054cad0cdca8; valaddr_reg:x3; val_offset:1863*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1863*FLEN/8, x4, x1, x2)

inst_622:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x985358246334e and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xb9c9e28d271e8 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x6054cad0cdca8 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd985358246334e; op2val:0xbfeb9c9e28d271e8;
op3val:0x3fd6054cad0cdca8; valaddr_reg:x3; val_offset:1866*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1866*FLEN/8, x4, x1, x2)

inst_623:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x985358246334e and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xb9c9e28d271e8 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x6054cad0cdca8 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd985358246334e; op2val:0xbfeb9c9e28d271e8;
op3val:0x3fd6054cad0cdca8; valaddr_reg:x3; val_offset:1869*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1869*FLEN/8, x4, x1, x2)

inst_624:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x985358246334e and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xb9c9e28d271e8 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x6054cad0cdca8 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd985358246334e; op2val:0xbfeb9c9e28d271e8;
op3val:0x3fd6054cad0cdca8; valaddr_reg:x3; val_offset:1872*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1872*FLEN/8, x4, x1, x2)

inst_625:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x9c46df0a4e7b6 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0xfc0f938676a04 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x991adc2a61c6f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd9c46df0a4e7b6; op2val:0xbfffc0f938676a04;
op3val:0x3fe991adc2a61c6f; valaddr_reg:x3; val_offset:1875*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1875*FLEN/8, x4, x1, x2)

inst_626:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x9c46df0a4e7b6 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0xfc0f938676a04 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x991adc2a61c6f and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd9c46df0a4e7b6; op2val:0xbfffc0f938676a04;
op3val:0x3fe991adc2a61c6f; valaddr_reg:x3; val_offset:1878*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1878*FLEN/8, x4, x1, x2)

inst_627:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x9c46df0a4e7b6 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0xfc0f938676a04 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x991adc2a61c6f and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd9c46df0a4e7b6; op2val:0xbfffc0f938676a04;
op3val:0x3fe991adc2a61c6f; valaddr_reg:x3; val_offset:1881*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1881*FLEN/8, x4, x1, x2)

inst_628:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x9c46df0a4e7b6 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0xfc0f938676a04 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x991adc2a61c6f and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd9c46df0a4e7b6; op2val:0xbfffc0f938676a04;
op3val:0x3fe991adc2a61c6f; valaddr_reg:x3; val_offset:1884*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1884*FLEN/8, x4, x1, x2)

inst_629:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x9c46df0a4e7b6 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0xfc0f938676a04 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x991adc2a61c6f and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd9c46df0a4e7b6; op2val:0xbfffc0f938676a04;
op3val:0x3fe991adc2a61c6f; valaddr_reg:x3; val_offset:1887*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1887*FLEN/8, x4, x1, x2)

inst_630:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x9c6b29c8287fe and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xb43c087ce4d11 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x5f639cf99edd0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd9c6b29c8287fe; op2val:0xbfeb43c087ce4d11;
op3val:0x3fd5f639cf99edd0; valaddr_reg:x3; val_offset:1890*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1890*FLEN/8, x4, x1, x2)

inst_631:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x9c6b29c8287fe and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xb43c087ce4d11 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x5f639cf99edd0 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd9c6b29c8287fe; op2val:0xbfeb43c087ce4d11;
op3val:0x3fd5f639cf99edd0; valaddr_reg:x3; val_offset:1893*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1893*FLEN/8, x4, x1, x2)

inst_632:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x9c6b29c8287fe and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xb43c087ce4d11 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x5f639cf99edd0 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd9c6b29c8287fe; op2val:0xbfeb43c087ce4d11;
op3val:0x3fd5f639cf99edd0; valaddr_reg:x3; val_offset:1896*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1896*FLEN/8, x4, x1, x2)

inst_633:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x9c6b29c8287fe and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xb43c087ce4d11 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x5f639cf99edd0 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd9c6b29c8287fe; op2val:0xbfeb43c087ce4d11;
op3val:0x3fd5f639cf99edd0; valaddr_reg:x3; val_offset:1899*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1899*FLEN/8, x4, x1, x2)

inst_634:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x9c6b29c8287fe and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xb43c087ce4d11 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x5f639cf99edd0 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd9c6b29c8287fe; op2val:0xbfeb43c087ce4d11;
op3val:0x3fd5f639cf99edd0; valaddr_reg:x3; val_offset:1902*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1902*FLEN/8, x4, x1, x2)

inst_635:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xa55df8770b0b4 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0xba7ddd4f244fa and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x6c29b5121f3a4 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fda55df8770b0b4; op2val:0xbffba7ddd4f244fa;
op3val:0x3fe6c29b5121f3a4; valaddr_reg:x3; val_offset:1905*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1905*FLEN/8, x4, x1, x2)

inst_636:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xa55df8770b0b4 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0xba7ddd4f244fa and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x6c29b5121f3a4 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fda55df8770b0b4; op2val:0xbffba7ddd4f244fa;
op3val:0x3fe6c29b5121f3a4; valaddr_reg:x3; val_offset:1908*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1908*FLEN/8, x4, x1, x2)

inst_637:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xa55df8770b0b4 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0xba7ddd4f244fa and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x6c29b5121f3a4 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fda55df8770b0b4; op2val:0xbffba7ddd4f244fa;
op3val:0x3fe6c29b5121f3a4; valaddr_reg:x3; val_offset:1911*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1911*FLEN/8, x4, x1, x2)

inst_638:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xa55df8770b0b4 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0xba7ddd4f244fa and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x6c29b5121f3a4 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fda55df8770b0b4; op2val:0xbffba7ddd4f244fa;
op3val:0x3fe6c29b5121f3a4; valaddr_reg:x3; val_offset:1914*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1914*FLEN/8, x4, x1, x2)

inst_639:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xa55df8770b0b4 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0xba7ddd4f244fa and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x6c29b5121f3a4 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fda55df8770b0b4; op2val:0xbffba7ddd4f244fa;
op3val:0x3fe6c29b5121f3a4; valaddr_reg:x3; val_offset:1917*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1917*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_6)

inst_640:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xa9ed3a2862f86 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0xc6f43b84e7497 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x7a788722ecc5b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fda9ed3a2862f86; op2val:0xbffc6f43b84e7497;
op3val:0x3fe7a788722ecc5b; valaddr_reg:x3; val_offset:1920*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1920*FLEN/8, x4, x1, x2)

inst_641:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xa9ed3a2862f86 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0xc6f43b84e7497 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x7a788722ecc5b and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fda9ed3a2862f86; op2val:0xbffc6f43b84e7497;
op3val:0x3fe7a788722ecc5b; valaddr_reg:x3; val_offset:1923*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1923*FLEN/8, x4, x1, x2)

inst_642:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xa9ed3a2862f86 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0xc6f43b84e7497 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x7a788722ecc5b and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fda9ed3a2862f86; op2val:0xbffc6f43b84e7497;
op3val:0x3fe7a788722ecc5b; valaddr_reg:x3; val_offset:1926*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1926*FLEN/8, x4, x1, x2)

inst_643:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xa9ed3a2862f86 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0xc6f43b84e7497 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x7a788722ecc5b and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fda9ed3a2862f86; op2val:0xbffc6f43b84e7497;
op3val:0x3fe7a788722ecc5b; valaddr_reg:x3; val_offset:1929*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1929*FLEN/8, x4, x1, x2)

inst_644:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xa9ed3a2862f86 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0xc6f43b84e7497 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x7a788722ecc5b and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fda9ed3a2862f86; op2val:0xbffc6f43b84e7497;
op3val:0x3fe7a788722ecc5b; valaddr_reg:x3; val_offset:1932*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1932*FLEN/8, x4, x1, x2)

inst_645:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xaac43073e8a8a and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x55cd0bfdd6cc1 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x1ce693d164e38 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdaac43073e8a8a; op2val:0xbff55cd0bfdd6cc1;
op3val:0x3fe1ce693d164e38; valaddr_reg:x3; val_offset:1935*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1935*FLEN/8, x4, x1, x2)

inst_646:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xaac43073e8a8a and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x55cd0bfdd6cc1 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x1ce693d164e38 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdaac43073e8a8a; op2val:0xbff55cd0bfdd6cc1;
op3val:0x3fe1ce693d164e38; valaddr_reg:x3; val_offset:1938*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1938*FLEN/8, x4, x1, x2)

inst_647:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xaac43073e8a8a and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x55cd0bfdd6cc1 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x1ce693d164e38 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdaac43073e8a8a; op2val:0xbff55cd0bfdd6cc1;
op3val:0x3fe1ce693d164e38; valaddr_reg:x3; val_offset:1941*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1941*FLEN/8, x4, x1, x2)

inst_648:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xaac43073e8a8a and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x55cd0bfdd6cc1 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x1ce693d164e38 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdaac43073e8a8a; op2val:0xbff55cd0bfdd6cc1;
op3val:0x3fe1ce693d164e38; valaddr_reg:x3; val_offset:1944*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1944*FLEN/8, x4, x1, x2)

inst_649:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xaac43073e8a8a and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x55cd0bfdd6cc1 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x1ce693d164e38 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdaac43073e8a8a; op2val:0xbff55cd0bfdd6cc1;
op3val:0x3fe1ce693d164e38; valaddr_reg:x3; val_offset:1947*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1947*FLEN/8, x4, x1, x2)

inst_650:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xaf24a445992b2 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x499e5420fb923 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x15905eb5337bc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdaf24a445992b2; op2val:0xbfe499e5420fb923;
op3val:0x3fd15905eb5337bc; valaddr_reg:x3; val_offset:1950*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1950*FLEN/8, x4, x1, x2)

inst_651:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xaf24a445992b2 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x499e5420fb923 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x15905eb5337bc and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdaf24a445992b2; op2val:0xbfe499e5420fb923;
op3val:0x3fd15905eb5337bc; valaddr_reg:x3; val_offset:1953*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1953*FLEN/8, x4, x1, x2)

inst_652:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xaf24a445992b2 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x499e5420fb923 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x15905eb5337bc and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdaf24a445992b2; op2val:0xbfe499e5420fb923;
op3val:0x3fd15905eb5337bc; valaddr_reg:x3; val_offset:1956*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1956*FLEN/8, x4, x1, x2)

inst_653:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xaf24a445992b2 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x499e5420fb923 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x15905eb5337bc and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdaf24a445992b2; op2val:0xbfe499e5420fb923;
op3val:0x3fd15905eb5337bc; valaddr_reg:x3; val_offset:1959*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1959*FLEN/8, x4, x1, x2)

inst_654:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xaf24a445992b2 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x499e5420fb923 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x15905eb5337bc and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdaf24a445992b2; op2val:0xbfe499e5420fb923;
op3val:0x3fd15905eb5337bc; valaddr_reg:x3; val_offset:1962*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1962*FLEN/8, x4, x1, x2)

inst_655:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xafba8483bff58 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x3feb49da64cf7 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x0dc31bf227e2a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdafba8483bff58; op2val:0xbfe3feb49da64cf7;
op3val:0x3fd0dc31bf227e2a; valaddr_reg:x3; val_offset:1965*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1965*FLEN/8, x4, x1, x2)

inst_656:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xafba8483bff58 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x3feb49da64cf7 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x0dc31bf227e2a and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdafba8483bff58; op2val:0xbfe3feb49da64cf7;
op3val:0x3fd0dc31bf227e2a; valaddr_reg:x3; val_offset:1968*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1968*FLEN/8, x4, x1, x2)

inst_657:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xafba8483bff58 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x3feb49da64cf7 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x0dc31bf227e2a and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdafba8483bff58; op2val:0xbfe3feb49da64cf7;
op3val:0x3fd0dc31bf227e2a; valaddr_reg:x3; val_offset:1971*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1971*FLEN/8, x4, x1, x2)

inst_658:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xafba8483bff58 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x3feb49da64cf7 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x0dc31bf227e2a and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdafba8483bff58; op2val:0xbfe3feb49da64cf7;
op3val:0x3fd0dc31bf227e2a; valaddr_reg:x3; val_offset:1974*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1974*FLEN/8, x4, x1, x2)

inst_659:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xafba8483bff58 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x3feb49da64cf7 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x0dc31bf227e2a and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdafba8483bff58; op2val:0xbfe3feb49da64cf7;
op3val:0x3fd0dc31bf227e2a; valaddr_reg:x3; val_offset:1977*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1977*FLEN/8, x4, x1, x2)

inst_660:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xb24812594aaaa and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xb1e43bcfcb809 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x70078a583e45e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdb24812594aaaa; op2val:0xbfeb1e43bcfcb809;
op3val:0x3fd70078a583e45e; valaddr_reg:x3; val_offset:1980*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1980*FLEN/8, x4, x1, x2)

inst_661:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xb24812594aaaa and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xb1e43bcfcb809 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x70078a583e45e and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdb24812594aaaa; op2val:0xbfeb1e43bcfcb809;
op3val:0x3fd70078a583e45e; valaddr_reg:x3; val_offset:1983*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1983*FLEN/8, x4, x1, x2)

inst_662:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xb24812594aaaa and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xb1e43bcfcb809 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x70078a583e45e and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdb24812594aaaa; op2val:0xbfeb1e43bcfcb809;
op3val:0x3fd70078a583e45e; valaddr_reg:x3; val_offset:1986*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1986*FLEN/8, x4, x1, x2)

inst_663:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xb24812594aaaa and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xb1e43bcfcb809 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x70078a583e45e and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdb24812594aaaa; op2val:0xbfeb1e43bcfcb809;
op3val:0x3fd70078a583e45e; valaddr_reg:x3; val_offset:1989*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1989*FLEN/8, x4, x1, x2)

inst_664:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xb24812594aaaa and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xb1e43bcfcb809 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x70078a583e45e and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdb24812594aaaa; op2val:0xbfeb1e43bcfcb809;
op3val:0x3fd70078a583e45e; valaddr_reg:x3; val_offset:1992*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1992*FLEN/8, x4, x1, x2)

inst_665:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xbbeb7d3a1380a and fs2 == 1 and fe2 == 0x3fb and fm2 == 0xc4bd03f2d7cad and fs3 == 0 and fe3 == 0x3fa and fm3 == 0x8889c6676dcb0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdbbeb7d3a1380a; op2val:0xbfbc4bd03f2d7cad;
op3val:0x3fa8889c6676dcb0; valaddr_reg:x3; val_offset:1995*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1995*FLEN/8, x4, x1, x2)

inst_666:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xbbeb7d3a1380a and fs2 == 1 and fe2 == 0x3fb and fm2 == 0xc4bd03f2d7cad and fs3 == 0 and fe3 == 0x3fa and fm3 == 0x8889c6676dcb0 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdbbeb7d3a1380a; op2val:0xbfbc4bd03f2d7cad;
op3val:0x3fa8889c6676dcb0; valaddr_reg:x3; val_offset:1998*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1998*FLEN/8, x4, x1, x2)

inst_667:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xbbeb7d3a1380a and fs2 == 1 and fe2 == 0x3fb and fm2 == 0xc4bd03f2d7cad and fs3 == 0 and fe3 == 0x3fa and fm3 == 0x8889c6676dcb0 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdbbeb7d3a1380a; op2val:0xbfbc4bd03f2d7cad;
op3val:0x3fa8889c6676dcb0; valaddr_reg:x3; val_offset:2001*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2001*FLEN/8, x4, x1, x2)

inst_668:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xbbeb7d3a1380a and fs2 == 1 and fe2 == 0x3fb and fm2 == 0xc4bd03f2d7cad and fs3 == 0 and fe3 == 0x3fa and fm3 == 0x8889c6676dcb0 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdbbeb7d3a1380a; op2val:0xbfbc4bd03f2d7cad;
op3val:0x3fa8889c6676dcb0; valaddr_reg:x3; val_offset:2004*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2004*FLEN/8, x4, x1, x2)

inst_669:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xbbeb7d3a1380a and fs2 == 1 and fe2 == 0x3fb and fm2 == 0xc4bd03f2d7cad and fs3 == 0 and fe3 == 0x3fa and fm3 == 0x8889c6676dcb0 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdbbeb7d3a1380a; op2val:0xbfbc4bd03f2d7cad;
op3val:0x3fa8889c6676dcb0; valaddr_reg:x3; val_offset:2007*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2007*FLEN/8, x4, x1, x2)

inst_670:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xbfa706a40fde2 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x2b95286e0ef6e and fs3 == 0 and fe3 == 0x3fb and fm3 == 0x05ee73d5847f8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdbfa706a40fde2; op2val:0xbfc2b95286e0ef6e;
op3val:0x3fb05ee73d5847f8; valaddr_reg:x3; val_offset:2010*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2010*FLEN/8, x4, x1, x2)

inst_671:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xbfa706a40fde2 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x2b95286e0ef6e and fs3 == 0 and fe3 == 0x3fb and fm3 == 0x05ee73d5847f8 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdbfa706a40fde2; op2val:0xbfc2b95286e0ef6e;
op3val:0x3fb05ee73d5847f8; valaddr_reg:x3; val_offset:2013*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2013*FLEN/8, x4, x1, x2)

inst_672:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xbfa706a40fde2 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x2b95286e0ef6e and fs3 == 0 and fe3 == 0x3fb and fm3 == 0x05ee73d5847f8 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdbfa706a40fde2; op2val:0xbfc2b95286e0ef6e;
op3val:0x3fb05ee73d5847f8; valaddr_reg:x3; val_offset:2016*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2016*FLEN/8, x4, x1, x2)

inst_673:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xbfa706a40fde2 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x2b95286e0ef6e and fs3 == 0 and fe3 == 0x3fb and fm3 == 0x05ee73d5847f8 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdbfa706a40fde2; op2val:0xbfc2b95286e0ef6e;
op3val:0x3fb05ee73d5847f8; valaddr_reg:x3; val_offset:2019*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2019*FLEN/8, x4, x1, x2)

inst_674:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xbfa706a40fde2 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x2b95286e0ef6e and fs3 == 0 and fe3 == 0x3fb and fm3 == 0x05ee73d5847f8 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdbfa706a40fde2; op2val:0xbfc2b95286e0ef6e;
op3val:0x3fb05ee73d5847f8; valaddr_reg:x3; val_offset:2022*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2022*FLEN/8, x4, x1, x2)

inst_675:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xc106e6e9d6f8a and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x97a6db1ea3400 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x658351f7128bb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdc106e6e9d6f8a; op2val:0xbff97a6db1ea3400;
op3val:0x3fe658351f7128bb; valaddr_reg:x3; val_offset:2025*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2025*FLEN/8, x4, x1, x2)

inst_676:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xc106e6e9d6f8a and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x97a6db1ea3400 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x658351f7128bb and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdc106e6e9d6f8a; op2val:0xbff97a6db1ea3400;
op3val:0x3fe658351f7128bb; valaddr_reg:x3; val_offset:2028*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2028*FLEN/8, x4, x1, x2)

inst_677:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xc106e6e9d6f8a and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x97a6db1ea3400 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x658351f7128bb and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdc106e6e9d6f8a; op2val:0xbff97a6db1ea3400;
op3val:0x3fe658351f7128bb; valaddr_reg:x3; val_offset:2031*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2031*FLEN/8, x4, x1, x2)

inst_678:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xc106e6e9d6f8a and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x97a6db1ea3400 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x658351f7128bb and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdc106e6e9d6f8a; op2val:0xbff97a6db1ea3400;
op3val:0x3fe658351f7128bb; valaddr_reg:x3; val_offset:2034*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2034*FLEN/8, x4, x1, x2)

inst_679:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xc106e6e9d6f8a and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x97a6db1ea3400 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x658351f7128bb and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdc106e6e9d6f8a; op2val:0xbff97a6db1ea3400;
op3val:0x3fe658351f7128bb; valaddr_reg:x3; val_offset:2037*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2037*FLEN/8, x4, x1, x2)

inst_680:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xc6ce691b563fc and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x30227e6b3a1a2 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x0e29326941a3e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdc6ce691b563fc; op2val:0xbfe30227e6b3a1a2;
op3val:0x3fd0e29326941a3e; valaddr_reg:x3; val_offset:2040*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2040*FLEN/8, x4, x1, x2)

inst_681:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xc6ce691b563fc and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x30227e6b3a1a2 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x0e29326941a3e and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdc6ce691b563fc; op2val:0xbfe30227e6b3a1a2;
op3val:0x3fd0e29326941a3e; valaddr_reg:x3; val_offset:2043*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2043*FLEN/8, x4, x1, x2)

inst_682:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xc6ce691b563fc and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x30227e6b3a1a2 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x0e29326941a3e and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdc6ce691b563fc; op2val:0xbfe30227e6b3a1a2;
op3val:0x3fd0e29326941a3e; valaddr_reg:x3; val_offset:2046*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2046*FLEN/8, x4, x1, x2)

inst_683:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xc6ce691b563fc and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x30227e6b3a1a2 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x0e29326941a3e and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdc6ce691b563fc; op2val:0xbfe30227e6b3a1a2;
op3val:0x3fd0e29326941a3e; valaddr_reg:x3; val_offset:2049*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2049*FLEN/8, x4, x1, x2)

inst_684:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xc6ce691b563fc and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x30227e6b3a1a2 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x0e29326941a3e and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdc6ce691b563fc; op2val:0xbfe30227e6b3a1a2;
op3val:0x3fd0e29326941a3e; valaddr_reg:x3; val_offset:2052*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2052*FLEN/8, x4, x1, x2)

inst_685:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xcad63a955ecc6 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x46784d90867d2 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x2492370592f48 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdcad63a955ecc6; op2val:0xbfe46784d90867d2;
op3val:0x3fd2492370592f48; valaddr_reg:x3; val_offset:2055*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2055*FLEN/8, x4, x1, x2)

inst_686:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xcad63a955ecc6 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x46784d90867d2 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x2492370592f48 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdcad63a955ecc6; op2val:0xbfe46784d90867d2;
op3val:0x3fd2492370592f48; valaddr_reg:x3; val_offset:2058*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2058*FLEN/8, x4, x1, x2)

inst_687:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xcad63a955ecc6 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x46784d90867d2 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x2492370592f48 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdcad63a955ecc6; op2val:0xbfe46784d90867d2;
op3val:0x3fd2492370592f48; valaddr_reg:x3; val_offset:2061*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2061*FLEN/8, x4, x1, x2)

inst_688:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xcad63a955ecc6 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x46784d90867d2 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x2492370592f48 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdcad63a955ecc6; op2val:0xbfe46784d90867d2;
op3val:0x3fd2492370592f48; valaddr_reg:x3; val_offset:2064*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2064*FLEN/8, x4, x1, x2)

inst_689:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xcad63a955ecc6 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x46784d90867d2 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x2492370592f48 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdcad63a955ecc6; op2val:0xbfe46784d90867d2;
op3val:0x3fd2492370592f48; valaddr_reg:x3; val_offset:2067*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2067*FLEN/8, x4, x1, x2)

inst_690:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xcef5f1f78b728 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x8aa8728971c09 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x64db9377ee13a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdcef5f1f78b728; op2val:0xbfe8aa8728971c09;
op3val:0x3fd64db9377ee13a; valaddr_reg:x3; val_offset:2070*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2070*FLEN/8, x4, x1, x2)

inst_691:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xcef5f1f78b728 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x8aa8728971c09 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x64db9377ee13a and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdcef5f1f78b728; op2val:0xbfe8aa8728971c09;
op3val:0x3fd64db9377ee13a; valaddr_reg:x3; val_offset:2073*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2073*FLEN/8, x4, x1, x2)

inst_692:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xcef5f1f78b728 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x8aa8728971c09 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x64db9377ee13a and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdcef5f1f78b728; op2val:0xbfe8aa8728971c09;
op3val:0x3fd64db9377ee13a; valaddr_reg:x3; val_offset:2076*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2076*FLEN/8, x4, x1, x2)

inst_693:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xcef5f1f78b728 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x8aa8728971c09 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x64db9377ee13a and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdcef5f1f78b728; op2val:0xbfe8aa8728971c09;
op3val:0x3fd64db9377ee13a; valaddr_reg:x3; val_offset:2079*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2079*FLEN/8, x4, x1, x2)

inst_694:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xcef5f1f78b728 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x8aa8728971c09 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x64db9377ee13a and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdcef5f1f78b728; op2val:0xbfe8aa8728971c09;
op3val:0x3fd64db9377ee13a; valaddr_reg:x3; val_offset:2082*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2082*FLEN/8, x4, x1, x2)

inst_695:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xcf5bc77c63b7e and fs2 == 1 and fe2 == 0x3ff and fm2 == 0xc591492588f6f and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x9a7a2fb01afb7 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdcf5bc77c63b7e; op2val:0xbffc591492588f6f;
op3val:0x3fe9a7a2fb01afb7; valaddr_reg:x3; val_offset:2085*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2085*FLEN/8, x4, x1, x2)

inst_696:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xcf5bc77c63b7e and fs2 == 1 and fe2 == 0x3ff and fm2 == 0xc591492588f6f and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x9a7a2fb01afb7 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdcf5bc77c63b7e; op2val:0xbffc591492588f6f;
op3val:0x3fe9a7a2fb01afb7; valaddr_reg:x3; val_offset:2088*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2088*FLEN/8, x4, x1, x2)

inst_697:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xcf5bc77c63b7e and fs2 == 1 and fe2 == 0x3ff and fm2 == 0xc591492588f6f and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x9a7a2fb01afb7 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdcf5bc77c63b7e; op2val:0xbffc591492588f6f;
op3val:0x3fe9a7a2fb01afb7; valaddr_reg:x3; val_offset:2091*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2091*FLEN/8, x4, x1, x2)

inst_698:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xcf5bc77c63b7e and fs2 == 1 and fe2 == 0x3ff and fm2 == 0xc591492588f6f and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x9a7a2fb01afb7 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdcf5bc77c63b7e; op2val:0xbffc591492588f6f;
op3val:0x3fe9a7a2fb01afb7; valaddr_reg:x3; val_offset:2094*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2094*FLEN/8, x4, x1, x2)

inst_699:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xcf5bc77c63b7e and fs2 == 1 and fe2 == 0x3ff and fm2 == 0xc591492588f6f and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x9a7a2fb01afb7 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdcf5bc77c63b7e; op2val:0xbffc591492588f6f;
op3val:0x3fe9a7a2fb01afb7; valaddr_reg:x3; val_offset:2097*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2097*FLEN/8, x4, x1, x2)

inst_700:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xcf8678ca4e602 and fs2 == 1 and fe2 == 0x3fa and fm2 == 0xa3cc10257bb57 and fs3 == 0 and fe3 == 0x3f9 and fm3 == 0x7c0d4a0bd2bc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdcf8678ca4e602; op2val:0xbfaa3cc10257bb57;
op3val:0x3f97c0d4a0bd2bc0; valaddr_reg:x3; val_offset:2100*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2100*FLEN/8, x4, x1, x2)

inst_701:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xcf8678ca4e602 and fs2 == 1 and fe2 == 0x3fa and fm2 == 0xa3cc10257bb57 and fs3 == 0 and fe3 == 0x3f9 and fm3 == 0x7c0d4a0bd2bc0 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdcf8678ca4e602; op2val:0xbfaa3cc10257bb57;
op3val:0x3f97c0d4a0bd2bc0; valaddr_reg:x3; val_offset:2103*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2103*FLEN/8, x4, x1, x2)

inst_702:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xcf8678ca4e602 and fs2 == 1 and fe2 == 0x3fa and fm2 == 0xa3cc10257bb57 and fs3 == 0 and fe3 == 0x3f9 and fm3 == 0x7c0d4a0bd2bc0 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdcf8678ca4e602; op2val:0xbfaa3cc10257bb57;
op3val:0x3f97c0d4a0bd2bc0; valaddr_reg:x3; val_offset:2106*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2106*FLEN/8, x4, x1, x2)

inst_703:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xcf8678ca4e602 and fs2 == 1 and fe2 == 0x3fa and fm2 == 0xa3cc10257bb57 and fs3 == 0 and fe3 == 0x3f9 and fm3 == 0x7c0d4a0bd2bc0 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdcf8678ca4e602; op2val:0xbfaa3cc10257bb57;
op3val:0x3f97c0d4a0bd2bc0; valaddr_reg:x3; val_offset:2109*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2109*FLEN/8, x4, x1, x2)

inst_704:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xcf8678ca4e602 and fs2 == 1 and fe2 == 0x3fa and fm2 == 0xa3cc10257bb57 and fs3 == 0 and fe3 == 0x3f9 and fm3 == 0x7c0d4a0bd2bc0 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdcf8678ca4e602; op2val:0xbfaa3cc10257bb57;
op3val:0x3f97c0d4a0bd2bc0; valaddr_reg:x3; val_offset:2112*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2112*FLEN/8, x4, x1, x2)

inst_705:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xd604cc826657a and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x731fbdae649c3 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x54b19d9bbc89a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdd604cc826657a; op2val:0xbfe731fbdae649c3;
op3val:0x3fd54b19d9bbc89a; valaddr_reg:x3; val_offset:2115*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2115*FLEN/8, x4, x1, x2)

inst_706:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xd604cc826657a and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x731fbdae649c3 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x54b19d9bbc89a and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdd604cc826657a; op2val:0xbfe731fbdae649c3;
op3val:0x3fd54b19d9bbc89a; valaddr_reg:x3; val_offset:2118*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2118*FLEN/8, x4, x1, x2)

inst_707:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xd604cc826657a and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x731fbdae649c3 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x54b19d9bbc89a and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdd604cc826657a; op2val:0xbfe731fbdae649c3;
op3val:0x3fd54b19d9bbc89a; valaddr_reg:x3; val_offset:2121*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2121*FLEN/8, x4, x1, x2)

inst_708:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xd604cc826657a and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x731fbdae649c3 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x54b19d9bbc89a and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdd604cc826657a; op2val:0xbfe731fbdae649c3;
op3val:0x3fd54b19d9bbc89a; valaddr_reg:x3; val_offset:2124*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2124*FLEN/8, x4, x1, x2)

inst_709:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xd604cc826657a and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x731fbdae649c3 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x54b19d9bbc89a and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdd604cc826657a; op2val:0xbfe731fbdae649c3;
op3val:0x3fd54b19d9bbc89a; valaddr_reg:x3; val_offset:2127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2127*FLEN/8, x4, x1, x2)

inst_710:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xe2972c5b9a45c and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x0a484fde94646 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xf5f9652be5954 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fde2972c5b9a45c; op2val:0xbff0a484fde94646;
op3val:0x3fdf5f9652be5954; valaddr_reg:x3; val_offset:2130*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2130*FLEN/8, x4, x1, x2)

inst_711:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xe2972c5b9a45c and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x0a484fde94646 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xf5f9652be5954 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fde2972c5b9a45c; op2val:0xbff0a484fde94646;
op3val:0x3fdf5f9652be5954; valaddr_reg:x3; val_offset:2133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2133*FLEN/8, x4, x1, x2)

inst_712:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xe2972c5b9a45c and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x0a484fde94646 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xf5f9652be5954 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fde2972c5b9a45c; op2val:0xbff0a484fde94646;
op3val:0x3fdf5f9652be5954; valaddr_reg:x3; val_offset:2136*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2136*FLEN/8, x4, x1, x2)

inst_713:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xe2972c5b9a45c and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x0a484fde94646 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xf5f9652be5954 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fde2972c5b9a45c; op2val:0xbff0a484fde94646;
op3val:0x3fdf5f9652be5954; valaddr_reg:x3; val_offset:2139*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2139*FLEN/8, x4, x1, x2)

inst_714:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xe2972c5b9a45c and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x0a484fde94646 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xf5f9652be5954 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fde2972c5b9a45c; op2val:0xbff0a484fde94646;
op3val:0x3fdf5f9652be5954; valaddr_reg:x3; val_offset:2142*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2142*FLEN/8, x4, x1, x2)

inst_715:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xeb76f28cc8e64 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0xd896f6750ad3c and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xc5a29005580fc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdeb76f28cc8e64; op2val:0xbffd896f6750ad3c;
op3val:0x3fec5a29005580fc; valaddr_reg:x3; val_offset:2145*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2145*FLEN/8, x4, x1, x2)

inst_716:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xeb76f28cc8e64 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0xd896f6750ad3c and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xc5a29005580fc and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdeb76f28cc8e64; op2val:0xbffd896f6750ad3c;
op3val:0x3fec5a29005580fc; valaddr_reg:x3; val_offset:2148*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2148*FLEN/8, x4, x1, x2)

inst_717:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xeb76f28cc8e64 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0xd896f6750ad3c and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xc5a29005580fc and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdeb76f28cc8e64; op2val:0xbffd896f6750ad3c;
op3val:0x3fec5a29005580fc; valaddr_reg:x3; val_offset:2151*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2151*FLEN/8, x4, x1, x2)

inst_718:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xeb76f28cc8e64 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0xd896f6750ad3c and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xc5a29005580fc and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdeb76f28cc8e64; op2val:0xbffd896f6750ad3c;
op3val:0x3fec5a29005580fc; valaddr_reg:x3; val_offset:2154*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2154*FLEN/8, x4, x1, x2)

inst_719:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xeb76f28cc8e64 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0xd896f6750ad3c and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xc5a29005580fc and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdeb76f28cc8e64; op2val:0xbffd896f6750ad3c;
op3val:0x3fec5a29005580fc; valaddr_reg:x3; val_offset:2157*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2157*FLEN/8, x4, x1, x2)

inst_720:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xef247241252ca and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xc4afb5a360c27 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xb5c8197af226e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdef247241252ca; op2val:0xbfec4afb5a360c27;
op3val:0x3fdb5c8197af226e; valaddr_reg:x3; val_offset:2160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2160*FLEN/8, x4, x1, x2)

inst_721:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xef247241252ca and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xc4afb5a360c27 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xb5c8197af226e and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdef247241252ca; op2val:0xbfec4afb5a360c27;
op3val:0x3fdb5c8197af226e; valaddr_reg:x3; val_offset:2163*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2163*FLEN/8, x4, x1, x2)

inst_722:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xef247241252ca and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xc4afb5a360c27 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xb5c8197af226e and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdef247241252ca; op2val:0xbfec4afb5a360c27;
op3val:0x3fdb5c8197af226e; valaddr_reg:x3; val_offset:2166*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2166*FLEN/8, x4, x1, x2)

inst_723:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xef247241252ca and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xc4afb5a360c27 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xb5c8197af226e and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdef247241252ca; op2val:0xbfec4afb5a360c27;
op3val:0x3fdb5c8197af226e; valaddr_reg:x3; val_offset:2169*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2169*FLEN/8, x4, x1, x2)

inst_724:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xef247241252ca and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xc4afb5a360c27 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xb5c8197af226e and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdef247241252ca; op2val:0xbfec4afb5a360c27;
op3val:0x3fdb5c8197af226e; valaddr_reg:x3; val_offset:2172*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2172*FLEN/8, x4, x1, x2)

inst_725:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xf572e218a064c and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x3ce89359cc36e and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x3660afea148ac and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdf572e218a064c; op2val:0xbfe3ce89359cc36e;
op3val:0x3fd3660afea148ac; valaddr_reg:x3; val_offset:2175*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2175*FLEN/8, x4, x1, x2)

inst_726:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xf572e218a064c and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x3ce89359cc36e and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x3660afea148ac and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdf572e218a064c; op2val:0xbfe3ce89359cc36e;
op3val:0x3fd3660afea148ac; valaddr_reg:x3; val_offset:2178*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2178*FLEN/8, x4, x1, x2)

inst_727:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xf572e218a064c and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x3ce89359cc36e and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x3660afea148ac and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdf572e218a064c; op2val:0xbfe3ce89359cc36e;
op3val:0x3fd3660afea148ac; valaddr_reg:x3; val_offset:2181*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2181*FLEN/8, x4, x1, x2)

inst_728:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xf572e218a064c and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x3ce89359cc36e and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x3660afea148ac and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdf572e218a064c; op2val:0xbfe3ce89359cc36e;
op3val:0x3fd3660afea148ac; valaddr_reg:x3; val_offset:2184*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2184*FLEN/8, x4, x1, x2)

inst_729:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xf572e218a064c and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x3ce89359cc36e and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x3660afea148ac and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdf572e218a064c; op2val:0xbfe3ce89359cc36e;
op3val:0x3fd3660afea148ac; valaddr_reg:x3; val_offset:2187*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2187*FLEN/8, x4, x1, x2)

inst_730:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xf78e532cc9c04 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x37d16180dc4ac and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x32ace103db541 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdf78e532cc9c04; op2val:0xbff37d16180dc4ac;
op3val:0x3fe32ace103db541; valaddr_reg:x3; val_offset:2190*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2190*FLEN/8, x4, x1, x2)

inst_731:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xf78e532cc9c04 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x37d16180dc4ac and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x32ace103db541 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdf78e532cc9c04; op2val:0xbff37d16180dc4ac;
op3val:0x3fe32ace103db541; valaddr_reg:x3; val_offset:2193*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2193*FLEN/8, x4, x1, x2)

inst_732:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xf78e532cc9c04 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x37d16180dc4ac and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x32ace103db541 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdf78e532cc9c04; op2val:0xbff37d16180dc4ac;
op3val:0x3fe32ace103db541; valaddr_reg:x3; val_offset:2196*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2196*FLEN/8, x4, x1, x2)

inst_733:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xf78e532cc9c04 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x37d16180dc4ac and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x32ace103db541 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdf78e532cc9c04; op2val:0xbff37d16180dc4ac;
op3val:0x3fe32ace103db541; valaddr_reg:x3; val_offset:2199*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2199*FLEN/8, x4, x1, x2)

inst_734:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xf78e532cc9c04 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x37d16180dc4ac and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x32ace103db541 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdf78e532cc9c04; op2val:0xbff37d16180dc4ac;
op3val:0x3fe32ace103db541; valaddr_reg:x3; val_offset:2202*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2202*FLEN/8, x4, x1, x2)

inst_735:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xf8679e0b20b04 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x367ade24770d3 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x31dfc83a3f8a8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdf8679e0b20b04; op2val:0xbfe367ade24770d3;
op3val:0x3fd31dfc83a3f8a8; valaddr_reg:x3; val_offset:2205*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2205*FLEN/8, x4, x1, x2)

inst_736:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xf8679e0b20b04 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x367ade24770d3 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x31dfc83a3f8a8 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdf8679e0b20b04; op2val:0xbfe367ade24770d3;
op3val:0x3fd31dfc83a3f8a8; valaddr_reg:x3; val_offset:2208*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2208*FLEN/8, x4, x1, x2)

inst_737:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xf8679e0b20b04 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x367ade24770d3 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x31dfc83a3f8a8 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdf8679e0b20b04; op2val:0xbfe367ade24770d3;
op3val:0x3fd31dfc83a3f8a8; valaddr_reg:x3; val_offset:2211*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2211*FLEN/8, x4, x1, x2)

inst_738:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xf8679e0b20b04 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x367ade24770d3 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x31dfc83a3f8a8 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdf8679e0b20b04; op2val:0xbfe367ade24770d3;
op3val:0x3fd31dfc83a3f8a8; valaddr_reg:x3; val_offset:2214*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2214*FLEN/8, x4, x1, x2)

inst_739:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xf8679e0b20b04 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x367ade24770d3 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x31dfc83a3f8a8 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdf8679e0b20b04; op2val:0xbfe367ade24770d3;
op3val:0x3fd31dfc83a3f8a8; valaddr_reg:x3; val_offset:2217*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2217*FLEN/8, x4, x1, x2)

inst_740:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xf9ceec9667200 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0xda4ce1e3a0f97 and fs3 == 0 and fe3 == 0x3fb and fm3 == 0xd49084e6ab090 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdf9ceec9667200; op2val:0xbfcda4ce1e3a0f97;
op3val:0x3fbd49084e6ab090; valaddr_reg:x3; val_offset:2220*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2220*FLEN/8, x4, x1, x2)

inst_741:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xf9ceec9667200 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0xda4ce1e3a0f97 and fs3 == 0 and fe3 == 0x3fb and fm3 == 0xd49084e6ab090 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdf9ceec9667200; op2val:0xbfcda4ce1e3a0f97;
op3val:0x3fbd49084e6ab090; valaddr_reg:x3; val_offset:2223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2223*FLEN/8, x4, x1, x2)

inst_742:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xf9ceec9667200 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0xda4ce1e3a0f97 and fs3 == 0 and fe3 == 0x3fb and fm3 == 0xd49084e6ab090 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdf9ceec9667200; op2val:0xbfcda4ce1e3a0f97;
op3val:0x3fbd49084e6ab090; valaddr_reg:x3; val_offset:2226*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2226*FLEN/8, x4, x1, x2)

inst_743:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xf9ceec9667200 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0xda4ce1e3a0f97 and fs3 == 0 and fe3 == 0x3fb and fm3 == 0xd49084e6ab090 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdf9ceec9667200; op2val:0xbfcda4ce1e3a0f97;
op3val:0x3fbd49084e6ab090; valaddr_reg:x3; val_offset:2229*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2229*FLEN/8, x4, x1, x2)

inst_744:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xf9ceec9667200 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0xda4ce1e3a0f97 and fs3 == 0 and fe3 == 0x3fb and fm3 == 0xd49084e6ab090 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdf9ceec9667200; op2val:0xbfcda4ce1e3a0f97;
op3val:0x3fbd49084e6ab090; valaddr_reg:x3; val_offset:2232*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2232*FLEN/8, x4, x1, x2)

inst_745:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xfaf5634181602 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x2dcc4f14c5c21 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x2ad38eecfcdea and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdfaf5634181602; op2val:0xbfe2dcc4f14c5c21;
op3val:0x3fd2ad38eecfcdea; valaddr_reg:x3; val_offset:2235*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2235*FLEN/8, x4, x1, x2)

inst_746:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xfaf5634181602 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x2dcc4f14c5c21 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x2ad38eecfcdea and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdfaf5634181602; op2val:0xbfe2dcc4f14c5c21;
op3val:0x3fd2ad38eecfcdea; valaddr_reg:x3; val_offset:2238*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2238*FLEN/8, x4, x1, x2)

inst_747:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xfaf5634181602 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x2dcc4f14c5c21 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x2ad38eecfcdea and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdfaf5634181602; op2val:0xbfe2dcc4f14c5c21;
op3val:0x3fd2ad38eecfcdea; valaddr_reg:x3; val_offset:2241*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2241*FLEN/8, x4, x1, x2)

inst_748:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xfaf5634181602 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x2dcc4f14c5c21 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x2ad38eecfcdea and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdfaf5634181602; op2val:0xbfe2dcc4f14c5c21;
op3val:0x3fd2ad38eecfcdea; valaddr_reg:x3; val_offset:2244*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2244*FLEN/8, x4, x1, x2)

inst_749:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xfaf5634181602 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x2dcc4f14c5c21 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x2ad38eecfcdea and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdfaf5634181602; op2val:0xbfe2dcc4f14c5c21;
op3val:0x3fd2ad38eecfcdea; valaddr_reg:x3; val_offset:2247*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2247*FLEN/8, x4, x1, x2)

inst_750:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xff84e9572e12e and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x4191bfd1bc999 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x41447112dccce and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdff84e9572e12e; op2val:0xbff4191bfd1bc999;
op3val:0x3fe41447112dccce; valaddr_reg:x3; val_offset:2250*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2250*FLEN/8, x4, x1, x2)

inst_751:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xff84e9572e12e and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x4191bfd1bc999 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x41447112dccce and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdff84e9572e12e; op2val:0xbff4191bfd1bc999;
op3val:0x3fe41447112dccce; valaddr_reg:x3; val_offset:2253*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2253*FLEN/8, x4, x1, x2)

inst_752:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xff84e9572e12e and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x4191bfd1bc999 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x41447112dccce and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdff84e9572e12e; op2val:0xbff4191bfd1bc999;
op3val:0x3fe41447112dccce; valaddr_reg:x3; val_offset:2256*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2256*FLEN/8, x4, x1, x2)

inst_753:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xff84e9572e12e and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x4191bfd1bc999 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x41447112dccce and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdff84e9572e12e; op2val:0xbff4191bfd1bc999;
op3val:0x3fe41447112dccce; valaddr_reg:x3; val_offset:2259*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2259*FLEN/8, x4, x1, x2)

inst_754:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xff84e9572e12e and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x4191bfd1bc999 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x41447112dccce and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdff84e9572e12e; op2val:0xbff4191bfd1bc999;
op3val:0x3fe41447112dccce; valaddr_reg:x3; val_offset:2262*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2262*FLEN/8, x4, x1, x2)

inst_755:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x013d1fc62ed37 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x64f5413e05736 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x66af713dd9220 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe013d1fc62ed37; op2val:0xbfe64f5413e05736;
op3val:0x3fd66af713dd9220; valaddr_reg:x3; val_offset:2265*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2265*FLEN/8, x4, x1, x2)

inst_756:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x013d1fc62ed37 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x64f5413e05736 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x66af713dd9220 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe013d1fc62ed37; op2val:0xbfe64f5413e05736;
op3val:0x3fd66af713dd9220; valaddr_reg:x3; val_offset:2268*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2268*FLEN/8, x4, x1, x2)

inst_757:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x013d1fc62ed37 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x64f5413e05736 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x66af713dd9220 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe013d1fc62ed37; op2val:0xbfe64f5413e05736;
op3val:0x3fd66af713dd9220; valaddr_reg:x3; val_offset:2271*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2271*FLEN/8, x4, x1, x2)

inst_758:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x013d1fc62ed37 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x64f5413e05736 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x66af713dd9220 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe013d1fc62ed37; op2val:0xbfe64f5413e05736;
op3val:0x3fd66af713dd9220; valaddr_reg:x3; val_offset:2274*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2274*FLEN/8, x4, x1, x2)

inst_759:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x013d1fc62ed37 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x64f5413e05736 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x66af713dd9220 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe013d1fc62ed37; op2val:0xbfe64f5413e05736;
op3val:0x3fd66af713dd9220; valaddr_reg:x3; val_offset:2277*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2277*FLEN/8, x4, x1, x2)

inst_760:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x02e570b605c86 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x1fd33486572da and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x2314d1966daa8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe02e570b605c86; op2val:0xbfe1fd33486572da;
op3val:0x3fd2314d1966daa8; valaddr_reg:x3; val_offset:2280*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2280*FLEN/8, x4, x1, x2)

inst_761:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x02e570b605c86 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x1fd33486572da and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x2314d1966daa8 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe02e570b605c86; op2val:0xbfe1fd33486572da;
op3val:0x3fd2314d1966daa8; valaddr_reg:x3; val_offset:2283*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2283*FLEN/8, x4, x1, x2)

inst_762:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x02e570b605c86 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x1fd33486572da and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x2314d1966daa8 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe02e570b605c86; op2val:0xbfe1fd33486572da;
op3val:0x3fd2314d1966daa8; valaddr_reg:x3; val_offset:2286*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2286*FLEN/8, x4, x1, x2)

inst_763:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x02e570b605c86 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x1fd33486572da and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x2314d1966daa8 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe02e570b605c86; op2val:0xbfe1fd33486572da;
op3val:0x3fd2314d1966daa8; valaddr_reg:x3; val_offset:2289*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2289*FLEN/8, x4, x1, x2)

inst_764:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x02e570b605c86 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x1fd33486572da and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x2314d1966daa8 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe02e570b605c86; op2val:0xbfe1fd33486572da;
op3val:0x3fd2314d1966daa8; valaddr_reg:x3; val_offset:2292*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2292*FLEN/8, x4, x1, x2)

inst_765:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x0526498b590bb and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xd8dc2ae21bca6 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xe25f303f10256 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe0526498b590bb; op2val:0xbfed8dc2ae21bca6;
op3val:0x3fde25f303f10256; valaddr_reg:x3; val_offset:2295*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2295*FLEN/8, x4, x1, x2)

inst_766:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x0526498b590bb and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xd8dc2ae21bca6 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xe25f303f10256 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe0526498b590bb; op2val:0xbfed8dc2ae21bca6;
op3val:0x3fde25f303f10256; valaddr_reg:x3; val_offset:2298*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2298*FLEN/8, x4, x1, x2)

inst_767:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x0526498b590bb and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xd8dc2ae21bca6 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xe25f303f10256 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe0526498b590bb; op2val:0xbfed8dc2ae21bca6;
op3val:0x3fde25f303f10256; valaddr_reg:x3; val_offset:2301*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2301*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_7)

inst_768:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x0526498b590bb and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xd8dc2ae21bca6 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xe25f303f10256 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe0526498b590bb; op2val:0xbfed8dc2ae21bca6;
op3val:0x3fde25f303f10256; valaddr_reg:x3; val_offset:2304*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2304*FLEN/8, x4, x1, x2)

inst_769:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x0526498b590bb and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xd8dc2ae21bca6 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xe25f303f10256 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe0526498b590bb; op2val:0xbfed8dc2ae21bca6;
op3val:0x3fde25f303f10256; valaddr_reg:x3; val_offset:2307*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2307*FLEN/8, x4, x1, x2)

inst_770:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x054f60886995e and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x3dbcc0019df9c and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x4453f4d0fde27 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe054f60886995e; op2val:0xbff3dbcc0019df9c;
op3val:0x3fe4453f4d0fde27; valaddr_reg:x3; val_offset:2310*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2310*FLEN/8, x4, x1, x2)

inst_771:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x054f60886995e and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x3dbcc0019df9c and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x4453f4d0fde27 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe054f60886995e; op2val:0xbff3dbcc0019df9c;
op3val:0x3fe4453f4d0fde27; valaddr_reg:x3; val_offset:2313*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2313*FLEN/8, x4, x1, x2)

inst_772:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x054f60886995e and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x3dbcc0019df9c and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x4453f4d0fde27 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe054f60886995e; op2val:0xbff3dbcc0019df9c;
op3val:0x3fe4453f4d0fde27; valaddr_reg:x3; val_offset:2316*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2316*FLEN/8, x4, x1, x2)

inst_773:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x054f60886995e and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x3dbcc0019df9c and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x4453f4d0fde27 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe054f60886995e; op2val:0xbff3dbcc0019df9c;
op3val:0x3fe4453f4d0fde27; valaddr_reg:x3; val_offset:2319*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2319*FLEN/8, x4, x1, x2)

inst_774:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x054f60886995e and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x3dbcc0019df9c and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x4453f4d0fde27 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe054f60886995e; op2val:0xbff3dbcc0019df9c;
op3val:0x3fe4453f4d0fde27; valaddr_reg:x3; val_offset:2322*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2322*FLEN/8, x4, x1, x2)

inst_775:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x066de56a5de6f and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xc390a8eadf9e8 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xcee7e62453806 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe066de56a5de6f; op2val:0xbfec390a8eadf9e8;
op3val:0x3fdcee7e62453806; valaddr_reg:x3; val_offset:2325*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2325*FLEN/8, x4, x1, x2)

inst_776:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x066de56a5de6f and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xc390a8eadf9e8 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xcee7e62453806 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe066de56a5de6f; op2val:0xbfec390a8eadf9e8;
op3val:0x3fdcee7e62453806; valaddr_reg:x3; val_offset:2328*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2328*FLEN/8, x4, x1, x2)

inst_777:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x066de56a5de6f and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xc390a8eadf9e8 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xcee7e62453806 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe066de56a5de6f; op2val:0xbfec390a8eadf9e8;
op3val:0x3fdcee7e62453806; valaddr_reg:x3; val_offset:2331*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2331*FLEN/8, x4, x1, x2)

inst_778:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x066de56a5de6f and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xc390a8eadf9e8 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xcee7e62453806 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe066de56a5de6f; op2val:0xbfec390a8eadf9e8;
op3val:0x3fdcee7e62453806; valaddr_reg:x3; val_offset:2334*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2334*FLEN/8, x4, x1, x2)

inst_779:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x066de56a5de6f and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xc390a8eadf9e8 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xcee7e62453806 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe066de56a5de6f; op2val:0xbfec390a8eadf9e8;
op3val:0x3fdcee7e62453806; valaddr_reg:x3; val_offset:2337*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2337*FLEN/8, x4, x1, x2)

inst_780:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x06e7d2e4d6296 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xaf1ce04f135ab and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xbabdf3c66389c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe06e7d2e4d6296; op2val:0xbfeaf1ce04f135ab;
op3val:0x3fdbabdf3c66389c; valaddr_reg:x3; val_offset:2340*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2340*FLEN/8, x4, x1, x2)

inst_781:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x06e7d2e4d6296 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xaf1ce04f135ab and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xbabdf3c66389c and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe06e7d2e4d6296; op2val:0xbfeaf1ce04f135ab;
op3val:0x3fdbabdf3c66389c; valaddr_reg:x3; val_offset:2343*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2343*FLEN/8, x4, x1, x2)

inst_782:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x06e7d2e4d6296 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xaf1ce04f135ab and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xbabdf3c66389c and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe06e7d2e4d6296; op2val:0xbfeaf1ce04f135ab;
op3val:0x3fdbabdf3c66389c; valaddr_reg:x3; val_offset:2346*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2346*FLEN/8, x4, x1, x2)

inst_783:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x06e7d2e4d6296 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xaf1ce04f135ab and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xbabdf3c66389c and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe06e7d2e4d6296; op2val:0xbfeaf1ce04f135ab;
op3val:0x3fdbabdf3c66389c; valaddr_reg:x3; val_offset:2349*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2349*FLEN/8, x4, x1, x2)

inst_784:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x06e7d2e4d6296 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xaf1ce04f135ab and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xbabdf3c66389c and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe06e7d2e4d6296; op2val:0xbfeaf1ce04f135ab;
op3val:0x3fdbabdf3c66389c; valaddr_reg:x3; val_offset:2352*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2352*FLEN/8, x4, x1, x2)

inst_785:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x077cbdeb5a8d5 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xad47b91b90ed0 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xb9d5dc6197962 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe077cbdeb5a8d5; op2val:0xbfead47b91b90ed0;
op3val:0x3fdb9d5dc6197962; valaddr_reg:x3; val_offset:2355*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2355*FLEN/8, x4, x1, x2)

inst_786:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x077cbdeb5a8d5 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xad47b91b90ed0 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xb9d5dc6197962 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe077cbdeb5a8d5; op2val:0xbfead47b91b90ed0;
op3val:0x3fdb9d5dc6197962; valaddr_reg:x3; val_offset:2358*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2358*FLEN/8, x4, x1, x2)

inst_787:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x077cbdeb5a8d5 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xad47b91b90ed0 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xb9d5dc6197962 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe077cbdeb5a8d5; op2val:0xbfead47b91b90ed0;
op3val:0x3fdb9d5dc6197962; valaddr_reg:x3; val_offset:2361*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2361*FLEN/8, x4, x1, x2)

inst_788:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x077cbdeb5a8d5 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xad47b91b90ed0 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xb9d5dc6197962 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe077cbdeb5a8d5; op2val:0xbfead47b91b90ed0;
op3val:0x3fdb9d5dc6197962; valaddr_reg:x3; val_offset:2364*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2364*FLEN/8, x4, x1, x2)

inst_789:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x077cbdeb5a8d5 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xad47b91b90ed0 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xb9d5dc6197962 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe077cbdeb5a8d5; op2val:0xbfead47b91b90ed0;
op3val:0x3fdb9d5dc6197962; valaddr_reg:x3; val_offset:2367*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2367*FLEN/8, x4, x1, x2)

inst_790:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x082c4447e9eae and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xa01ca8c32c11a and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xad6581f2c7fc4 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe082c4447e9eae; op2val:0xbfea01ca8c32c11a;
op3val:0x3fdad6581f2c7fc4; valaddr_reg:x3; val_offset:2370*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2370*FLEN/8, x4, x1, x2)

inst_791:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x082c4447e9eae and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xa01ca8c32c11a and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xad6581f2c7fc4 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe082c4447e9eae; op2val:0xbfea01ca8c32c11a;
op3val:0x3fdad6581f2c7fc4; valaddr_reg:x3; val_offset:2373*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2373*FLEN/8, x4, x1, x2)

inst_792:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x082c4447e9eae and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xa01ca8c32c11a and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xad6581f2c7fc4 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe082c4447e9eae; op2val:0xbfea01ca8c32c11a;
op3val:0x3fdad6581f2c7fc4; valaddr_reg:x3; val_offset:2376*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2376*FLEN/8, x4, x1, x2)

inst_793:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x082c4447e9eae and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xa01ca8c32c11a and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xad6581f2c7fc4 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe082c4447e9eae; op2val:0xbfea01ca8c32c11a;
op3val:0x3fdad6581f2c7fc4; valaddr_reg:x3; val_offset:2379*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2379*FLEN/8, x4, x1, x2)

inst_794:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x082c4447e9eae and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xa01ca8c32c11a and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xad6581f2c7fc4 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe082c4447e9eae; op2val:0xbfea01ca8c32c11a;
op3val:0x3fdad6581f2c7fc4; valaddr_reg:x3; val_offset:2382*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2382*FLEN/8, x4, x1, x2)

inst_795:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x097431c55fd7a and fs2 == 1 and fe2 == 0x3f9 and fm2 == 0xb08da4d4b14a9 and fs3 == 0 and fe3 == 0x3f8 and fm3 == 0xc086f3e777640 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe097431c55fd7a; op2val:0xbf9b08da4d4b14a9;
op3val:0x3f8c086f3e777640; valaddr_reg:x3; val_offset:2385*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2385*FLEN/8, x4, x1, x2)

inst_796:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x097431c55fd7a and fs2 == 1 and fe2 == 0x3f9 and fm2 == 0xb08da4d4b14a9 and fs3 == 0 and fe3 == 0x3f8 and fm3 == 0xc086f3e777640 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe097431c55fd7a; op2val:0xbf9b08da4d4b14a9;
op3val:0x3f8c086f3e777640; valaddr_reg:x3; val_offset:2388*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2388*FLEN/8, x4, x1, x2)

inst_797:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x097431c55fd7a and fs2 == 1 and fe2 == 0x3f9 and fm2 == 0xb08da4d4b14a9 and fs3 == 0 and fe3 == 0x3f8 and fm3 == 0xc086f3e777640 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe097431c55fd7a; op2val:0xbf9b08da4d4b14a9;
op3val:0x3f8c086f3e777640; valaddr_reg:x3; val_offset:2391*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2391*FLEN/8, x4, x1, x2)

inst_798:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x097431c55fd7a and fs2 == 1 and fe2 == 0x3f9 and fm2 == 0xb08da4d4b14a9 and fs3 == 0 and fe3 == 0x3f8 and fm3 == 0xc086f3e777640 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe097431c55fd7a; op2val:0xbf9b08da4d4b14a9;
op3val:0x3f8c086f3e777640; valaddr_reg:x3; val_offset:2394*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2394*FLEN/8, x4, x1, x2)

inst_799:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x097431c55fd7a and fs2 == 1 and fe2 == 0x3f9 and fm2 == 0xb08da4d4b14a9 and fs3 == 0 and fe3 == 0x3f8 and fm3 == 0xc086f3e777640 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe097431c55fd7a; op2val:0xbf9b08da4d4b14a9;
op3val:0x3f8c086f3e777640; valaddr_reg:x3; val_offset:2397*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2397*FLEN/8, x4, x1, x2)

inst_800:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x0b84574a6c9c5 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x04b4db856b2c9 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x106f671a99100 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe0b84574a6c9c5; op2val:0xbff04b4db856b2c9;
op3val:0x3fe106f671a99100; valaddr_reg:x3; val_offset:2400*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2400*FLEN/8, x4, x1, x2)

inst_801:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x0b84574a6c9c5 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x04b4db856b2c9 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x106f671a99100 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe0b84574a6c9c5; op2val:0xbff04b4db856b2c9;
op3val:0x3fe106f671a99100; valaddr_reg:x3; val_offset:2403*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2403*FLEN/8, x4, x1, x2)

inst_802:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x0b84574a6c9c5 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x04b4db856b2c9 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x106f671a99100 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe0b84574a6c9c5; op2val:0xbff04b4db856b2c9;
op3val:0x3fe106f671a99100; valaddr_reg:x3; val_offset:2406*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2406*FLEN/8, x4, x1, x2)

inst_803:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x0b84574a6c9c5 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x04b4db856b2c9 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x106f671a99100 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe0b84574a6c9c5; op2val:0xbff04b4db856b2c9;
op3val:0x3fe106f671a99100; valaddr_reg:x3; val_offset:2409*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2409*FLEN/8, x4, x1, x2)

inst_804:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x0b84574a6c9c5 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x04b4db856b2c9 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x106f671a99100 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe0b84574a6c9c5; op2val:0xbff04b4db856b2c9;
op3val:0x3fe106f671a99100; valaddr_reg:x3; val_offset:2412*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2412*FLEN/8, x4, x1, x2)

inst_805:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x0bf3314a06fc5 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x9622159c71929 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xa9175d16a505f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe0bf3314a06fc5; op2val:0xbff9622159c71929;
op3val:0x3fea9175d16a505f; valaddr_reg:x3; val_offset:2415*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2415*FLEN/8, x4, x1, x2)

inst_806:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x0bf3314a06fc5 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x9622159c71929 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xa9175d16a505f and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe0bf3314a06fc5; op2val:0xbff9622159c71929;
op3val:0x3fea9175d16a505f; valaddr_reg:x3; val_offset:2418*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2418*FLEN/8, x4, x1, x2)

inst_807:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x0bf3314a06fc5 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x9622159c71929 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xa9175d16a505f and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe0bf3314a06fc5; op2val:0xbff9622159c71929;
op3val:0x3fea9175d16a505f; valaddr_reg:x3; val_offset:2421*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2421*FLEN/8, x4, x1, x2)

inst_808:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x0bf3314a06fc5 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x9622159c71929 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xa9175d16a505f and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe0bf3314a06fc5; op2val:0xbff9622159c71929;
op3val:0x3fea9175d16a505f; valaddr_reg:x3; val_offset:2424*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2424*FLEN/8, x4, x1, x2)

inst_809:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x0bf3314a06fc5 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x9622159c71929 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xa9175d16a505f and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe0bf3314a06fc5; op2val:0xbff9622159c71929;
op3val:0x3fea9175d16a505f; valaddr_reg:x3; val_offset:2427*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2427*FLEN/8, x4, x1, x2)

inst_810:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x0c5a528aafc8d and fs2 == 1 and fe2 == 0x3ff and fm2 == 0xa9f75d1e2840f and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xbe853fca4e684 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe0c5a528aafc8d; op2val:0xbffa9f75d1e2840f;
op3val:0x3febe853fca4e684; valaddr_reg:x3; val_offset:2430*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2430*FLEN/8, x4, x1, x2)

inst_811:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x0c5a528aafc8d and fs2 == 1 and fe2 == 0x3ff and fm2 == 0xa9f75d1e2840f and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xbe853fca4e684 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe0c5a528aafc8d; op2val:0xbffa9f75d1e2840f;
op3val:0x3febe853fca4e684; valaddr_reg:x3; val_offset:2433*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2433*FLEN/8, x4, x1, x2)

inst_812:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x0c5a528aafc8d and fs2 == 1 and fe2 == 0x3ff and fm2 == 0xa9f75d1e2840f and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xbe853fca4e684 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe0c5a528aafc8d; op2val:0xbffa9f75d1e2840f;
op3val:0x3febe853fca4e684; valaddr_reg:x3; val_offset:2436*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2436*FLEN/8, x4, x1, x2)

inst_813:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x0c5a528aafc8d and fs2 == 1 and fe2 == 0x3ff and fm2 == 0xa9f75d1e2840f and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xbe853fca4e684 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe0c5a528aafc8d; op2val:0xbffa9f75d1e2840f;
op3val:0x3febe853fca4e684; valaddr_reg:x3; val_offset:2439*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2439*FLEN/8, x4, x1, x2)

inst_814:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x0c5a528aafc8d and fs2 == 1 and fe2 == 0x3ff and fm2 == 0xa9f75d1e2840f and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xbe853fca4e684 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe0c5a528aafc8d; op2val:0xbffa9f75d1e2840f;
op3val:0x3febe853fca4e684; valaddr_reg:x3; val_offset:2442*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2442*FLEN/8, x4, x1, x2)

inst_815:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x0dba560d6d311 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x9adaaafd7ed93 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xb0e2d2a79c421 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe0dba560d6d311; op2val:0xbff9adaaafd7ed93;
op3val:0x3feb0e2d2a79c421; valaddr_reg:x3; val_offset:2445*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2445*FLEN/8, x4, x1, x2)

inst_816:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x0dba560d6d311 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x9adaaafd7ed93 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xb0e2d2a79c421 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe0dba560d6d311; op2val:0xbff9adaaafd7ed93;
op3val:0x3feb0e2d2a79c421; valaddr_reg:x3; val_offset:2448*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2448*FLEN/8, x4, x1, x2)

inst_817:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x0dba560d6d311 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x9adaaafd7ed93 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xb0e2d2a79c421 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe0dba560d6d311; op2val:0xbff9adaaafd7ed93;
op3val:0x3feb0e2d2a79c421; valaddr_reg:x3; val_offset:2451*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2451*FLEN/8, x4, x1, x2)

inst_818:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x0dba560d6d311 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x9adaaafd7ed93 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xb0e2d2a79c421 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe0dba560d6d311; op2val:0xbff9adaaafd7ed93;
op3val:0x3feb0e2d2a79c421; valaddr_reg:x3; val_offset:2454*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2454*FLEN/8, x4, x1, x2)

inst_819:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x0dba560d6d311 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x9adaaafd7ed93 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xb0e2d2a79c421 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe0dba560d6d311; op2val:0xbff9adaaafd7ed93;
op3val:0x3feb0e2d2a79c421; valaddr_reg:x3; val_offset:2457*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2457*FLEN/8, x4, x1, x2)

inst_820:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x0fed64f9ce8aa and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x77643b856a573 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x8ebf36deccb1b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe0fed64f9ce8aa; op2val:0xbff77643b856a573;
op3val:0x3fe8ebf36deccb1b; valaddr_reg:x3; val_offset:2460*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2460*FLEN/8, x4, x1, x2)

inst_821:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x0fed64f9ce8aa and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x77643b856a573 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x8ebf36deccb1b and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe0fed64f9ce8aa; op2val:0xbff77643b856a573;
op3val:0x3fe8ebf36deccb1b; valaddr_reg:x3; val_offset:2463*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2463*FLEN/8, x4, x1, x2)

inst_822:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x0fed64f9ce8aa and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x77643b856a573 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x8ebf36deccb1b and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe0fed64f9ce8aa; op2val:0xbff77643b856a573;
op3val:0x3fe8ebf36deccb1b; valaddr_reg:x3; val_offset:2466*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2466*FLEN/8, x4, x1, x2)

inst_823:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x0fed64f9ce8aa and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x77643b856a573 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x8ebf36deccb1b and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe0fed64f9ce8aa; op2val:0xbff77643b856a573;
op3val:0x3fe8ebf36deccb1b; valaddr_reg:x3; val_offset:2469*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2469*FLEN/8, x4, x1, x2)

inst_824:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x0fed64f9ce8aa and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x77643b856a573 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x8ebf36deccb1b and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe0fed64f9ce8aa; op2val:0xbff77643b856a573;
op3val:0x3fe8ebf36deccb1b; valaddr_reg:x3; val_offset:2472*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2472*FLEN/8, x4, x1, x2)

inst_825:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x131a2b2293af0 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0xf46a641bae2b7 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x0ce0b854ae44c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe131a2b2293af0; op2val:0xbfcf46a641bae2b7;
op3val:0x3fc0ce0b854ae44c; valaddr_reg:x3; val_offset:2475*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2475*FLEN/8, x4, x1, x2)

inst_826:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x131a2b2293af0 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0xf46a641bae2b7 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x0ce0b854ae44c and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe131a2b2293af0; op2val:0xbfcf46a641bae2b7;
op3val:0x3fc0ce0b854ae44c; valaddr_reg:x3; val_offset:2478*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2478*FLEN/8, x4, x1, x2)

inst_827:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x131a2b2293af0 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0xf46a641bae2b7 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x0ce0b854ae44c and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe131a2b2293af0; op2val:0xbfcf46a641bae2b7;
op3val:0x3fc0ce0b854ae44c; valaddr_reg:x3; val_offset:2481*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2481*FLEN/8, x4, x1, x2)

inst_828:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x131a2b2293af0 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0xf46a641bae2b7 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x0ce0b854ae44c and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe131a2b2293af0; op2val:0xbfcf46a641bae2b7;
op3val:0x3fc0ce0b854ae44c; valaddr_reg:x3; val_offset:2484*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2484*FLEN/8, x4, x1, x2)

inst_829:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x131a2b2293af0 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0xf46a641bae2b7 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x0ce0b854ae44c and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe131a2b2293af0; op2val:0xbfcf46a641bae2b7;
op3val:0x3fc0ce0b854ae44c; valaddr_reg:x3; val_offset:2487*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2487*FLEN/8, x4, x1, x2)

inst_830:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x164e49a8d95d4 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xf331731e9b3ac and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x0f582ddb55039 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe164e49a8d95d4; op2val:0xbfef331731e9b3ac;
op3val:0x3fe0f582ddb55039; valaddr_reg:x3; val_offset:2490*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2490*FLEN/8, x4, x1, x2)

inst_831:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x164e49a8d95d4 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xf331731e9b3ac and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x0f582ddb55039 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe164e49a8d95d4; op2val:0xbfef331731e9b3ac;
op3val:0x3fe0f582ddb55039; valaddr_reg:x3; val_offset:2493*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2493*FLEN/8, x4, x1, x2)

inst_832:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x164e49a8d95d4 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xf331731e9b3ac and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x0f582ddb55039 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe164e49a8d95d4; op2val:0xbfef331731e9b3ac;
op3val:0x3fe0f582ddb55039; valaddr_reg:x3; val_offset:2496*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2496*FLEN/8, x4, x1, x2)

inst_833:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x164e49a8d95d4 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xf331731e9b3ac and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x0f582ddb55039 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe164e49a8d95d4; op2val:0xbfef331731e9b3ac;
op3val:0x3fe0f582ddb55039; valaddr_reg:x3; val_offset:2499*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2499*FLEN/8, x4, x1, x2)

inst_834:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x164e49a8d95d4 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xf331731e9b3ac and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x0f582ddb55039 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe164e49a8d95d4; op2val:0xbfef331731e9b3ac;
op3val:0x3fe0f582ddb55039; valaddr_reg:x3; val_offset:2502*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2502*FLEN/8, x4, x1, x2)

inst_835:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x17ff06a70268a and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xd8d16c1c10c80 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x0291a0db51ebe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe17ff06a70268a; op2val:0xbfed8d16c1c10c80;
op3val:0x3fe0291a0db51ebe; valaddr_reg:x3; val_offset:2505*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2505*FLEN/8, x4, x1, x2)

inst_836:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x17ff06a70268a and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xd8d16c1c10c80 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x0291a0db51ebe and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe17ff06a70268a; op2val:0xbfed8d16c1c10c80;
op3val:0x3fe0291a0db51ebe; valaddr_reg:x3; val_offset:2508*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2508*FLEN/8, x4, x1, x2)

inst_837:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x17ff06a70268a and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xd8d16c1c10c80 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x0291a0db51ebe and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe17ff06a70268a; op2val:0xbfed8d16c1c10c80;
op3val:0x3fe0291a0db51ebe; valaddr_reg:x3; val_offset:2511*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2511*FLEN/8, x4, x1, x2)

inst_838:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x17ff06a70268a and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xd8d16c1c10c80 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x0291a0db51ebe and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe17ff06a70268a; op2val:0xbfed8d16c1c10c80;
op3val:0x3fe0291a0db51ebe; valaddr_reg:x3; val_offset:2514*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2514*FLEN/8, x4, x1, x2)

inst_839:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x17ff06a70268a and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xd8d16c1c10c80 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x0291a0db51ebe and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe17ff06a70268a; op2val:0xbfed8d16c1c10c80;
op3val:0x3fe0291a0db51ebe; valaddr_reg:x3; val_offset:2517*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2517*FLEN/8, x4, x1, x2)

inst_840:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x18391f56888fb and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x9898418295216 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xbf41b391f63ac and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe18391f56888fb; op2val:0xbff9898418295216;
op3val:0x3febf41b391f63ac; valaddr_reg:x3; val_offset:2520*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2520*FLEN/8, x4, x1, x2)

inst_841:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x18391f56888fb and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x9898418295216 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xbf41b391f63ac and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe18391f56888fb; op2val:0xbff9898418295216;
op3val:0x3febf41b391f63ac; valaddr_reg:x3; val_offset:2523*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2523*FLEN/8, x4, x1, x2)

inst_842:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x18391f56888fb and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x9898418295216 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xbf41b391f63ac and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe18391f56888fb; op2val:0xbff9898418295216;
op3val:0x3febf41b391f63ac; valaddr_reg:x3; val_offset:2526*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2526*FLEN/8, x4, x1, x2)

inst_843:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x18391f56888fb and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x9898418295216 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xbf41b391f63ac and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe18391f56888fb; op2val:0xbff9898418295216;
op3val:0x3febf41b391f63ac; valaddr_reg:x3; val_offset:2529*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2529*FLEN/8, x4, x1, x2)

inst_844:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x18391f56888fb and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x9898418295216 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xbf41b391f63ac and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe18391f56888fb; op2val:0xbff9898418295216;
op3val:0x3febf41b391f63ac; valaddr_reg:x3; val_offset:2532*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2532*FLEN/8, x4, x1, x2)

inst_845:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x1a3ae85e846e7 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xe877b686032da and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x0d4222c7e7f5f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe1a3ae85e846e7; op2val:0xbfee877b686032da;
op3val:0x3fe0d4222c7e7f5f; valaddr_reg:x3; val_offset:2535*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2535*FLEN/8, x4, x1, x2)

inst_846:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x1a3ae85e846e7 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xe877b686032da and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x0d4222c7e7f5f and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe1a3ae85e846e7; op2val:0xbfee877b686032da;
op3val:0x3fe0d4222c7e7f5f; valaddr_reg:x3; val_offset:2538*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2538*FLEN/8, x4, x1, x2)

inst_847:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x1a3ae85e846e7 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xe877b686032da and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x0d4222c7e7f5f and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe1a3ae85e846e7; op2val:0xbfee877b686032da;
op3val:0x3fe0d4222c7e7f5f; valaddr_reg:x3; val_offset:2541*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2541*FLEN/8, x4, x1, x2)

inst_848:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x1a3ae85e846e7 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xe877b686032da and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x0d4222c7e7f5f and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe1a3ae85e846e7; op2val:0xbfee877b686032da;
op3val:0x3fe0d4222c7e7f5f; valaddr_reg:x3; val_offset:2544*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2544*FLEN/8, x4, x1, x2)

inst_849:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x1a3ae85e846e7 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xe877b686032da and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x0d4222c7e7f5f and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe1a3ae85e846e7; op2val:0xbfee877b686032da;
op3val:0x3fe0d4222c7e7f5f; valaddr_reg:x3; val_offset:2547*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2547*FLEN/8, x4, x1, x2)

inst_850:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x1b524be5ad761 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x736a9e82a19fd and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x9b0e437ea4fde and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe1b524be5ad761; op2val:0xbfe736a9e82a19fd;
op3val:0x3fd9b0e437ea4fde; valaddr_reg:x3; val_offset:2550*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2550*FLEN/8, x4, x1, x2)

inst_851:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x1b524be5ad761 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x736a9e82a19fd and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x9b0e437ea4fde and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe1b524be5ad761; op2val:0xbfe736a9e82a19fd;
op3val:0x3fd9b0e437ea4fde; valaddr_reg:x3; val_offset:2553*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2553*FLEN/8, x4, x1, x2)

inst_852:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x1b524be5ad761 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x736a9e82a19fd and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x9b0e437ea4fde and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe1b524be5ad761; op2val:0xbfe736a9e82a19fd;
op3val:0x3fd9b0e437ea4fde; valaddr_reg:x3; val_offset:2556*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2556*FLEN/8, x4, x1, x2)

inst_853:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x1b524be5ad761 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x736a9e82a19fd and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x9b0e437ea4fde and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe1b524be5ad761; op2val:0xbfe736a9e82a19fd;
op3val:0x3fd9b0e437ea4fde; valaddr_reg:x3; val_offset:2559*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2559*FLEN/8, x4, x1, x2)

inst_854:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x1b524be5ad761 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x736a9e82a19fd and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x9b0e437ea4fde and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe1b524be5ad761; op2val:0xbfe736a9e82a19fd;
op3val:0x3fd9b0e437ea4fde; valaddr_reg:x3; val_offset:2562*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2562*FLEN/8, x4, x1, x2)

inst_855:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x1b88deb8dee5a and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x9c4494a88a2b6 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xc89c3b727b71a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe1b88deb8dee5a; op2val:0xbff9c4494a88a2b6;
op3val:0x3fec89c3b727b71a; valaddr_reg:x3; val_offset:2565*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2565*FLEN/8, x4, x1, x2)

inst_856:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x1b88deb8dee5a and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x9c4494a88a2b6 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xc89c3b727b71a and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe1b88deb8dee5a; op2val:0xbff9c4494a88a2b6;
op3val:0x3fec89c3b727b71a; valaddr_reg:x3; val_offset:2568*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2568*FLEN/8, x4, x1, x2)

inst_857:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x1b88deb8dee5a and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x9c4494a88a2b6 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xc89c3b727b71a and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe1b88deb8dee5a; op2val:0xbff9c4494a88a2b6;
op3val:0x3fec89c3b727b71a; valaddr_reg:x3; val_offset:2571*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2571*FLEN/8, x4, x1, x2)

inst_858:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x1b88deb8dee5a and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x9c4494a88a2b6 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xc89c3b727b71a and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe1b88deb8dee5a; op2val:0xbff9c4494a88a2b6;
op3val:0x3fec89c3b727b71a; valaddr_reg:x3; val_offset:2574*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2574*FLEN/8, x4, x1, x2)

inst_859:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x1b88deb8dee5a and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x9c4494a88a2b6 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xc89c3b727b71a and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe1b88deb8dee5a; op2val:0xbff9c4494a88a2b6;
op3val:0x3fec89c3b727b71a; valaddr_reg:x3; val_offset:2577*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2577*FLEN/8, x4, x1, x2)

inst_860:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x1b9ee4a5f12c6 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x0cfb7890db91a and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x2a00f1badefe9 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe1b9ee4a5f12c6; op2val:0xbff0cfb7890db91a;
op3val:0x3fe2a00f1badefe9; valaddr_reg:x3; val_offset:2580*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2580*FLEN/8, x4, x1, x2)

inst_861:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x1b9ee4a5f12c6 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x0cfb7890db91a and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x2a00f1badefe9 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe1b9ee4a5f12c6; op2val:0xbff0cfb7890db91a;
op3val:0x3fe2a00f1badefe9; valaddr_reg:x3; val_offset:2583*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2583*FLEN/8, x4, x1, x2)

inst_862:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x1b9ee4a5f12c6 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x0cfb7890db91a and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x2a00f1badefe9 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe1b9ee4a5f12c6; op2val:0xbff0cfb7890db91a;
op3val:0x3fe2a00f1badefe9; valaddr_reg:x3; val_offset:2586*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2586*FLEN/8, x4, x1, x2)

inst_863:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x1b9ee4a5f12c6 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x0cfb7890db91a and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x2a00f1badefe9 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe1b9ee4a5f12c6; op2val:0xbff0cfb7890db91a;
op3val:0x3fe2a00f1badefe9; valaddr_reg:x3; val_offset:2589*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2589*FLEN/8, x4, x1, x2)

inst_864:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x1b9ee4a5f12c6 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x0cfb7890db91a and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x2a00f1badefe9 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe1b9ee4a5f12c6; op2val:0xbff0cfb7890db91a;
op3val:0x3fe2a00f1badefe9; valaddr_reg:x3; val_offset:2592*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2592*FLEN/8, x4, x1, x2)

inst_865:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x1df095384255b and fs2 == 1 and fe2 == 0x3ff and fm2 == 0xa42e634b38e3d and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xd55284f32bac1 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe1df095384255b; op2val:0xbffa42e634b38e3d;
op3val:0x3fed55284f32bac1; valaddr_reg:x3; val_offset:2595*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2595*FLEN/8, x4, x1, x2)

inst_866:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x1df095384255b and fs2 == 1 and fe2 == 0x3ff and fm2 == 0xa42e634b38e3d and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xd55284f32bac1 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe1df095384255b; op2val:0xbffa42e634b38e3d;
op3val:0x3fed55284f32bac1; valaddr_reg:x3; val_offset:2598*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2598*FLEN/8, x4, x1, x2)

inst_867:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x1df095384255b and fs2 == 1 and fe2 == 0x3ff and fm2 == 0xa42e634b38e3d and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xd55284f32bac1 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe1df095384255b; op2val:0xbffa42e634b38e3d;
op3val:0x3fed55284f32bac1; valaddr_reg:x3; val_offset:2601*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2601*FLEN/8, x4, x1, x2)

inst_868:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x1df095384255b and fs2 == 1 and fe2 == 0x3ff and fm2 == 0xa42e634b38e3d and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xd55284f32bac1 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe1df095384255b; op2val:0xbffa42e634b38e3d;
op3val:0x3fed55284f32bac1; valaddr_reg:x3; val_offset:2604*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2604*FLEN/8, x4, x1, x2)

inst_869:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x1df095384255b and fs2 == 1 and fe2 == 0x3ff and fm2 == 0xa42e634b38e3d and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xd55284f32bac1 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe1df095384255b; op2val:0xbffa42e634b38e3d;
op3val:0x3fed55284f32bac1; valaddr_reg:x3; val_offset:2607*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2607*FLEN/8, x4, x1, x2)

inst_870:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x1efc001f12b78 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xf56faba20ba44 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x19102df46cda0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe1efc001f12b78; op2val:0xbfdf56faba20ba44;
op3val:0x3fd19102df46cda0; valaddr_reg:x3; val_offset:2610*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2610*FLEN/8, x4, x1, x2)

inst_871:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x1efc001f12b78 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xf56faba20ba44 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x19102df46cda0 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe1efc001f12b78; op2val:0xbfdf56faba20ba44;
op3val:0x3fd19102df46cda0; valaddr_reg:x3; val_offset:2613*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2613*FLEN/8, x4, x1, x2)

inst_872:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x1efc001f12b78 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xf56faba20ba44 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x19102df46cda0 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe1efc001f12b78; op2val:0xbfdf56faba20ba44;
op3val:0x3fd19102df46cda0; valaddr_reg:x3; val_offset:2616*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2616*FLEN/8, x4, x1, x2)

inst_873:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x1efc001f12b78 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xf56faba20ba44 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x19102df46cda0 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe1efc001f12b78; op2val:0xbfdf56faba20ba44;
op3val:0x3fd19102df46cda0; valaddr_reg:x3; val_offset:2619*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2619*FLEN/8, x4, x1, x2)

inst_874:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x1efc001f12b78 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xf56faba20ba44 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x19102df46cda0 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe1efc001f12b78; op2val:0xbfdf56faba20ba44;
op3val:0x3fd19102df46cda0; valaddr_reg:x3; val_offset:2622*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2622*FLEN/8, x4, x1, x2)

inst_875:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x2621585be5c7a and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x4982c0fa9dbae and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x7a971535ed06a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe2621585be5c7a; op2val:0xbfe4982c0fa9dbae;
op3val:0x3fd7a971535ed06a; valaddr_reg:x3; val_offset:2625*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2625*FLEN/8, x4, x1, x2)

inst_876:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x2621585be5c7a and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x4982c0fa9dbae and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x7a971535ed06a and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe2621585be5c7a; op2val:0xbfe4982c0fa9dbae;
op3val:0x3fd7a971535ed06a; valaddr_reg:x3; val_offset:2628*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2628*FLEN/8, x4, x1, x2)

inst_877:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x2621585be5c7a and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x4982c0fa9dbae and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x7a971535ed06a and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe2621585be5c7a; op2val:0xbfe4982c0fa9dbae;
op3val:0x3fd7a971535ed06a; valaddr_reg:x3; val_offset:2631*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2631*FLEN/8, x4, x1, x2)

inst_878:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x2621585be5c7a and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x4982c0fa9dbae and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x7a971535ed06a and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe2621585be5c7a; op2val:0xbfe4982c0fa9dbae;
op3val:0x3fd7a971535ed06a; valaddr_reg:x3; val_offset:2634*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2634*FLEN/8, x4, x1, x2)

inst_879:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x2621585be5c7a and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x4982c0fa9dbae and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x7a971535ed06a and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe2621585be5c7a; op2val:0xbfe4982c0fa9dbae;
op3val:0x3fd7a971535ed06a; valaddr_reg:x3; val_offset:2637*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2637*FLEN/8, x4, x1, x2)

inst_880:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x2bc672b0fdb8f and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x3652a58c75153 and fs3 == 0 and fe3 == 0x3fb and fm3 == 0x6b63164e717c8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe2bc672b0fdb8f; op2val:0xbfc3652a58c75153;
op3val:0x3fb6b63164e717c8; valaddr_reg:x3; val_offset:2640*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2640*FLEN/8, x4, x1, x2)

inst_881:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x2bc672b0fdb8f and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x3652a58c75153 and fs3 == 0 and fe3 == 0x3fb and fm3 == 0x6b63164e717c8 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe2bc672b0fdb8f; op2val:0xbfc3652a58c75153;
op3val:0x3fb6b63164e717c8; valaddr_reg:x3; val_offset:2643*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2643*FLEN/8, x4, x1, x2)

inst_882:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x2bc672b0fdb8f and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x3652a58c75153 and fs3 == 0 and fe3 == 0x3fb and fm3 == 0x6b63164e717c8 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe2bc672b0fdb8f; op2val:0xbfc3652a58c75153;
op3val:0x3fb6b63164e717c8; valaddr_reg:x3; val_offset:2646*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2646*FLEN/8, x4, x1, x2)

inst_883:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x2bc672b0fdb8f and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x3652a58c75153 and fs3 == 0 and fe3 == 0x3fb and fm3 == 0x6b63164e717c8 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe2bc672b0fdb8f; op2val:0xbfc3652a58c75153;
op3val:0x3fb6b63164e717c8; valaddr_reg:x3; val_offset:2649*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2649*FLEN/8, x4, x1, x2)

inst_884:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x2bc672b0fdb8f and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x3652a58c75153 and fs3 == 0 and fe3 == 0x3fb and fm3 == 0x6b63164e717c8 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe2bc672b0fdb8f; op2val:0xbfc3652a58c75153;
op3val:0x3fb6b63164e717c8; valaddr_reg:x3; val_offset:2652*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2652*FLEN/8, x4, x1, x2)

inst_885:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x2d282b70597f3 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x15f436be4436c and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x46fbc1b04524f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe2d282b70597f3; op2val:0xbff15f436be4436c;
op3val:0x3fe46fbc1b04524f; valaddr_reg:x3; val_offset:2655*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2655*FLEN/8, x4, x1, x2)

inst_886:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x2d282b70597f3 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x15f436be4436c and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x46fbc1b04524f and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe2d282b70597f3; op2val:0xbff15f436be4436c;
op3val:0x3fe46fbc1b04524f; valaddr_reg:x3; val_offset:2658*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2658*FLEN/8, x4, x1, x2)

inst_887:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x2d282b70597f3 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x15f436be4436c and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x46fbc1b04524f and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe2d282b70597f3; op2val:0xbff15f436be4436c;
op3val:0x3fe46fbc1b04524f; valaddr_reg:x3; val_offset:2661*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2661*FLEN/8, x4, x1, x2)

inst_888:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x2d282b70597f3 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x15f436be4436c and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x46fbc1b04524f and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe2d282b70597f3; op2val:0xbff15f436be4436c;
op3val:0x3fe46fbc1b04524f; valaddr_reg:x3; val_offset:2664*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2664*FLEN/8, x4, x1, x2)

inst_889:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x2d282b70597f3 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x15f436be4436c and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x46fbc1b04524f and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe2d282b70597f3; op2val:0xbff15f436be4436c;
op3val:0x3fe46fbc1b04524f; valaddr_reg:x3; val_offset:2667*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2667*FLEN/8, x4, x1, x2)

inst_890:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x2f31f434dedeb and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x674296301da06 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xa97dea375bb72 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe2f31f434dedeb; op2val:0xbff674296301da06;
op3val:0x3fea97dea375bb72; valaddr_reg:x3; val_offset:2670*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2670*FLEN/8, x4, x1, x2)

inst_891:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x2f31f434dedeb and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x674296301da06 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xa97dea375bb72 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe2f31f434dedeb; op2val:0xbff674296301da06;
op3val:0x3fea97dea375bb72; valaddr_reg:x3; val_offset:2673*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2673*FLEN/8, x4, x1, x2)

inst_892:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x2f31f434dedeb and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x674296301da06 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xa97dea375bb72 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe2f31f434dedeb; op2val:0xbff674296301da06;
op3val:0x3fea97dea375bb72; valaddr_reg:x3; val_offset:2676*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2676*FLEN/8, x4, x1, x2)

inst_893:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x2f31f434dedeb and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x674296301da06 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xa97dea375bb72 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe2f31f434dedeb; op2val:0xbff674296301da06;
op3val:0x3fea97dea375bb72; valaddr_reg:x3; val_offset:2679*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2679*FLEN/8, x4, x1, x2)

inst_894:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x2f31f434dedeb and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x674296301da06 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xa97dea375bb72 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe2f31f434dedeb; op2val:0xbff674296301da06;
op3val:0x3fea97dea375bb72; valaddr_reg:x3; val_offset:2682*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2682*FLEN/8, x4, x1, x2)

inst_895:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x2f46aea1a4b11 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x529cc0e984091 and fs3 == 0 and fe3 == 0x3fb and fm3 == 0x9125062d7cab8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe2f46aea1a4b11; op2val:0xbfc529cc0e984091;
op3val:0x3fb9125062d7cab8; valaddr_reg:x3; val_offset:2685*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2685*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_8)

inst_896:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x2f46aea1a4b11 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x529cc0e984091 and fs3 == 0 and fe3 == 0x3fb and fm3 == 0x9125062d7cab8 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe2f46aea1a4b11; op2val:0xbfc529cc0e984091;
op3val:0x3fb9125062d7cab8; valaddr_reg:x3; val_offset:2688*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2688*FLEN/8, x4, x1, x2)

inst_897:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x2f46aea1a4b11 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x529cc0e984091 and fs3 == 0 and fe3 == 0x3fb and fm3 == 0x9125062d7cab8 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe2f46aea1a4b11; op2val:0xbfc529cc0e984091;
op3val:0x3fb9125062d7cab8; valaddr_reg:x3; val_offset:2691*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2691*FLEN/8, x4, x1, x2)

inst_898:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x2f46aea1a4b11 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x529cc0e984091 and fs3 == 0 and fe3 == 0x3fb and fm3 == 0x9125062d7cab8 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe2f46aea1a4b11; op2val:0xbfc529cc0e984091;
op3val:0x3fb9125062d7cab8; valaddr_reg:x3; val_offset:2694*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2694*FLEN/8, x4, x1, x2)

inst_899:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x2f46aea1a4b11 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x529cc0e984091 and fs3 == 0 and fe3 == 0x3fb and fm3 == 0x9125062d7cab8 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe2f46aea1a4b11; op2val:0xbfc529cc0e984091;
op3val:0x3fb9125062d7cab8; valaddr_reg:x3; val_offset:2697*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2697*FLEN/8, x4, x1, x2)

inst_900:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x33a05aa93ca4b and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x89ee02db08b8b and fs3 == 0 and fe3 == 0x3fc and fm3 == 0xd95f2db08ccd0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe33a05aa93ca4b; op2val:0xbfd89ee02db08b8b;
op3val:0x3fcd95f2db08ccd0; valaddr_reg:x3; val_offset:2700*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2700*FLEN/8, x4, x1, x2)

inst_901:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x33a05aa93ca4b and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x89ee02db08b8b and fs3 == 0 and fe3 == 0x3fc and fm3 == 0xd95f2db08ccd0 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe33a05aa93ca4b; op2val:0xbfd89ee02db08b8b;
op3val:0x3fcd95f2db08ccd0; valaddr_reg:x3; val_offset:2703*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2703*FLEN/8, x4, x1, x2)

inst_902:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x33a05aa93ca4b and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x89ee02db08b8b and fs3 == 0 and fe3 == 0x3fc and fm3 == 0xd95f2db08ccd0 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe33a05aa93ca4b; op2val:0xbfd89ee02db08b8b;
op3val:0x3fcd95f2db08ccd0; valaddr_reg:x3; val_offset:2706*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2706*FLEN/8, x4, x1, x2)

inst_903:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x33a05aa93ca4b and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x89ee02db08b8b and fs3 == 0 and fe3 == 0x3fc and fm3 == 0xd95f2db08ccd0 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe33a05aa93ca4b; op2val:0xbfd89ee02db08b8b;
op3val:0x3fcd95f2db08ccd0; valaddr_reg:x3; val_offset:2709*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2709*FLEN/8, x4, x1, x2)

inst_904:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x33a05aa93ca4b and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x89ee02db08b8b and fs3 == 0 and fe3 == 0x3fc and fm3 == 0xd95f2db08ccd0 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe33a05aa93ca4b; op2val:0xbfd89ee02db08b8b;
op3val:0x3fcd95f2db08ccd0; valaddr_reg:x3; val_offset:2712*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2712*FLEN/8, x4, x1, x2)

inst_905:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x34cc94cb0bfed and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x048bf656e44a8 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x3a489b5869838 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe34cc94cb0bfed; op2val:0xbfe048bf656e44a8;
op3val:0x3fd3a489b5869838; valaddr_reg:x3; val_offset:2715*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2715*FLEN/8, x4, x1, x2)

inst_906:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x34cc94cb0bfed and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x048bf656e44a8 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x3a489b5869838 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe34cc94cb0bfed; op2val:0xbfe048bf656e44a8;
op3val:0x3fd3a489b5869838; valaddr_reg:x3; val_offset:2718*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2718*FLEN/8, x4, x1, x2)

inst_907:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x34cc94cb0bfed and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x048bf656e44a8 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x3a489b5869838 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe34cc94cb0bfed; op2val:0xbfe048bf656e44a8;
op3val:0x3fd3a489b5869838; valaddr_reg:x3; val_offset:2721*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2721*FLEN/8, x4, x1, x2)

inst_908:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x34cc94cb0bfed and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x048bf656e44a8 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x3a489b5869838 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe34cc94cb0bfed; op2val:0xbfe048bf656e44a8;
op3val:0x3fd3a489b5869838; valaddr_reg:x3; val_offset:2724*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2724*FLEN/8, x4, x1, x2)

inst_909:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x34cc94cb0bfed and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x048bf656e44a8 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x3a489b5869838 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe34cc94cb0bfed; op2val:0xbfe048bf656e44a8;
op3val:0x3fd3a489b5869838; valaddr_reg:x3; val_offset:2727*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2727*FLEN/8, x4, x1, x2)

inst_910:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x351ce4788f28f and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x618f9abc0ebd2 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xaaea3d045133b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe351ce4788f28f; op2val:0xbff618f9abc0ebd2;
op3val:0x3feaaea3d045133b; valaddr_reg:x3; val_offset:2730*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2730*FLEN/8, x4, x1, x2)

inst_911:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x351ce4788f28f and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x618f9abc0ebd2 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xaaea3d045133b and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe351ce4788f28f; op2val:0xbff618f9abc0ebd2;
op3val:0x3feaaea3d045133b; valaddr_reg:x3; val_offset:2733*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2733*FLEN/8, x4, x1, x2)

inst_912:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x351ce4788f28f and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x618f9abc0ebd2 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xaaea3d045133b and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe351ce4788f28f; op2val:0xbff618f9abc0ebd2;
op3val:0x3feaaea3d045133b; valaddr_reg:x3; val_offset:2736*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2736*FLEN/8, x4, x1, x2)

inst_913:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x351ce4788f28f and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x618f9abc0ebd2 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xaaea3d045133b and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe351ce4788f28f; op2val:0xbff618f9abc0ebd2;
op3val:0x3feaaea3d045133b; valaddr_reg:x3; val_offset:2739*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2739*FLEN/8, x4, x1, x2)

inst_914:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x351ce4788f28f and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x618f9abc0ebd2 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xaaea3d045133b and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe351ce4788f28f; op2val:0xbff618f9abc0ebd2;
op3val:0x3feaaea3d045133b; valaddr_reg:x3; val_offset:2742*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2742*FLEN/8, x4, x1, x2)

inst_915:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x363bd43df2c9e and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x97ba5ecc6af76 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xee1af8c8633dd and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe363bd43df2c9e; op2val:0xbff97ba5ecc6af76;
op3val:0x3feee1af8c8633dd; valaddr_reg:x3; val_offset:2745*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2745*FLEN/8, x4, x1, x2)

inst_916:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x363bd43df2c9e and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x97ba5ecc6af76 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xee1af8c8633dd and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe363bd43df2c9e; op2val:0xbff97ba5ecc6af76;
op3val:0x3feee1af8c8633dd; valaddr_reg:x3; val_offset:2748*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2748*FLEN/8, x4, x1, x2)

inst_917:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x363bd43df2c9e and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x97ba5ecc6af76 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xee1af8c8633dd and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe363bd43df2c9e; op2val:0xbff97ba5ecc6af76;
op3val:0x3feee1af8c8633dd; valaddr_reg:x3; val_offset:2751*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2751*FLEN/8, x4, x1, x2)

inst_918:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x363bd43df2c9e and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x97ba5ecc6af76 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xee1af8c8633dd and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe363bd43df2c9e; op2val:0xbff97ba5ecc6af76;
op3val:0x3feee1af8c8633dd; valaddr_reg:x3; val_offset:2754*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2754*FLEN/8, x4, x1, x2)

inst_919:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x363bd43df2c9e and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x97ba5ecc6af76 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xee1af8c8633dd and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe363bd43df2c9e; op2val:0xbff97ba5ecc6af76;
op3val:0x3feee1af8c8633dd; valaddr_reg:x3; val_offset:2757*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2757*FLEN/8, x4, x1, x2)

inst_920:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x3666044bbf18c and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x0de9625e45378 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x47442ca2dbc55 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe3666044bbf18c; op2val:0xbff0de9625e45378;
op3val:0x3fe47442ca2dbc55; valaddr_reg:x3; val_offset:2760*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2760*FLEN/8, x4, x1, x2)

inst_921:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x3666044bbf18c and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x0de9625e45378 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x47442ca2dbc55 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe3666044bbf18c; op2val:0xbff0de9625e45378;
op3val:0x3fe47442ca2dbc55; valaddr_reg:x3; val_offset:2763*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2763*FLEN/8, x4, x1, x2)

inst_922:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x3666044bbf18c and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x0de9625e45378 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x47442ca2dbc55 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe3666044bbf18c; op2val:0xbff0de9625e45378;
op3val:0x3fe47442ca2dbc55; valaddr_reg:x3; val_offset:2766*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2766*FLEN/8, x4, x1, x2)

inst_923:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x3666044bbf18c and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x0de9625e45378 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x47442ca2dbc55 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe3666044bbf18c; op2val:0xbff0de9625e45378;
op3val:0x3fe47442ca2dbc55; valaddr_reg:x3; val_offset:2769*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2769*FLEN/8, x4, x1, x2)

inst_924:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x3666044bbf18c and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x0de9625e45378 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x47442ca2dbc55 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe3666044bbf18c; op2val:0xbff0de9625e45378;
op3val:0x3fe47442ca2dbc55; valaddr_reg:x3; val_offset:2772*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2772*FLEN/8, x4, x1, x2)

inst_925:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x38aeabf67ab1c and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xdcd832c59642c and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x23366c916bd13 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe38aeabf67ab1c; op2val:0xbfedcd832c59642c;
op3val:0x3fe23366c916bd13; valaddr_reg:x3; val_offset:2775*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2775*FLEN/8, x4, x1, x2)

inst_926:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x38aeabf67ab1c and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xdcd832c59642c and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x23366c916bd13 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe38aeabf67ab1c; op2val:0xbfedcd832c59642c;
op3val:0x3fe23366c916bd13; valaddr_reg:x3; val_offset:2778*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2778*FLEN/8, x4, x1, x2)

inst_927:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x38aeabf67ab1c and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xdcd832c59642c and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x23366c916bd13 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe38aeabf67ab1c; op2val:0xbfedcd832c59642c;
op3val:0x3fe23366c916bd13; valaddr_reg:x3; val_offset:2781*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2781*FLEN/8, x4, x1, x2)

inst_928:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x38aeabf67ab1c and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xdcd832c59642c and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x23366c916bd13 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe38aeabf67ab1c; op2val:0xbfedcd832c59642c;
op3val:0x3fe23366c916bd13; valaddr_reg:x3; val_offset:2784*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2784*FLEN/8, x4, x1, x2)

inst_929:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x38aeabf67ab1c and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xdcd832c59642c and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x23366c916bd13 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe38aeabf67ab1c; op2val:0xbfedcd832c59642c;
op3val:0x3fe23366c916bd13; valaddr_reg:x3; val_offset:2787*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2787*FLEN/8, x4, x1, x2)

inst_930:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x395fdb7a9c138 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x20db7d6503188 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x6198856a26400 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe395fdb7a9c138; op2val:0xbfe20db7d6503188;
op3val:0x3fd6198856a26400; valaddr_reg:x3; val_offset:2790*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2790*FLEN/8, x4, x1, x2)

inst_931:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x395fdb7a9c138 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x20db7d6503188 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x6198856a26400 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe395fdb7a9c138; op2val:0xbfe20db7d6503188;
op3val:0x3fd6198856a26400; valaddr_reg:x3; val_offset:2793*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2793*FLEN/8, x4, x1, x2)

inst_932:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x395fdb7a9c138 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x20db7d6503188 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x6198856a26400 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe395fdb7a9c138; op2val:0xbfe20db7d6503188;
op3val:0x3fd6198856a26400; valaddr_reg:x3; val_offset:2796*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2796*FLEN/8, x4, x1, x2)

inst_933:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x395fdb7a9c138 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x20db7d6503188 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x6198856a26400 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe395fdb7a9c138; op2val:0xbfe20db7d6503188;
op3val:0x3fd6198856a26400; valaddr_reg:x3; val_offset:2799*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2799*FLEN/8, x4, x1, x2)

inst_934:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x395fdb7a9c138 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x20db7d6503188 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x6198856a26400 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe395fdb7a9c138; op2val:0xbfe20db7d6503188;
op3val:0x3fd6198856a26400; valaddr_reg:x3; val_offset:2802*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2802*FLEN/8, x4, x1, x2)

inst_935:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x3a329115dfee9 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x63b2cd64e6469 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xb48f92708b4cc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe3a329115dfee9; op2val:0xbfe63b2cd64e6469;
op3val:0x3fdb48f92708b4cc; valaddr_reg:x3; val_offset:2805*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2805*FLEN/8, x4, x1, x2)

inst_936:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x3a329115dfee9 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x63b2cd64e6469 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xb48f92708b4cc and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe3a329115dfee9; op2val:0xbfe63b2cd64e6469;
op3val:0x3fdb48f92708b4cc; valaddr_reg:x3; val_offset:2808*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2808*FLEN/8, x4, x1, x2)

inst_937:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x3a329115dfee9 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x63b2cd64e6469 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xb48f92708b4cc and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe3a329115dfee9; op2val:0xbfe63b2cd64e6469;
op3val:0x3fdb48f92708b4cc; valaddr_reg:x3; val_offset:2811*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2811*FLEN/8, x4, x1, x2)

inst_938:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x3a329115dfee9 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x63b2cd64e6469 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xb48f92708b4cc and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe3a329115dfee9; op2val:0xbfe63b2cd64e6469;
op3val:0x3fdb48f92708b4cc; valaddr_reg:x3; val_offset:2814*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2814*FLEN/8, x4, x1, x2)

inst_939:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x3a329115dfee9 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x63b2cd64e6469 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xb48f92708b4cc and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe3a329115dfee9; op2val:0xbfe63b2cd64e6469;
op3val:0x3fdb48f92708b4cc; valaddr_reg:x3; val_offset:2817*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2817*FLEN/8, x4, x1, x2)

inst_940:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x3b958c72feccb and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x789946a278c44 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xd04099bd04e14 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe3b958c72feccb; op2val:0xbfe789946a278c44;
op3val:0x3fdd04099bd04e14; valaddr_reg:x3; val_offset:2820*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2820*FLEN/8, x4, x1, x2)

inst_941:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x3b958c72feccb and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x789946a278c44 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xd04099bd04e14 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe3b958c72feccb; op2val:0xbfe789946a278c44;
op3val:0x3fdd04099bd04e14; valaddr_reg:x3; val_offset:2823*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2823*FLEN/8, x4, x1, x2)

inst_942:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x3b958c72feccb and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x789946a278c44 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xd04099bd04e14 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe3b958c72feccb; op2val:0xbfe789946a278c44;
op3val:0x3fdd04099bd04e14; valaddr_reg:x3; val_offset:2826*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2826*FLEN/8, x4, x1, x2)

inst_943:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x3b958c72feccb and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x789946a278c44 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xd04099bd04e14 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe3b958c72feccb; op2val:0xbfe789946a278c44;
op3val:0x3fdd04099bd04e14; valaddr_reg:x3; val_offset:2829*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2829*FLEN/8, x4, x1, x2)

inst_944:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x3b958c72feccb and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x789946a278c44 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xd04099bd04e14 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe3b958c72feccb; op2val:0xbfe789946a278c44;
op3val:0x3fdd04099bd04e14; valaddr_reg:x3; val_offset:2832*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2832*FLEN/8, x4, x1, x2)

inst_945:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x3de9d391892f3 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x6d6601390ef15 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xc5c50f5592071 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe3de9d391892f3; op2val:0xbff6d6601390ef15;
op3val:0x3fec5c50f5592071; valaddr_reg:x3; val_offset:2835*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2835*FLEN/8, x4, x1, x2)

inst_946:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x3de9d391892f3 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x6d6601390ef15 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xc5c50f5592071 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe3de9d391892f3; op2val:0xbff6d6601390ef15;
op3val:0x3fec5c50f5592071; valaddr_reg:x3; val_offset:2838*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2838*FLEN/8, x4, x1, x2)

inst_947:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x3de9d391892f3 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x6d6601390ef15 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xc5c50f5592071 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe3de9d391892f3; op2val:0xbff6d6601390ef15;
op3val:0x3fec5c50f5592071; valaddr_reg:x3; val_offset:2841*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2841*FLEN/8, x4, x1, x2)

inst_948:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x3de9d391892f3 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x6d6601390ef15 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xc5c50f5592071 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe3de9d391892f3; op2val:0xbff6d6601390ef15;
op3val:0x3fec5c50f5592071; valaddr_reg:x3; val_offset:2844*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2844*FLEN/8, x4, x1, x2)

inst_949:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x3de9d391892f3 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x6d6601390ef15 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xc5c50f5592071 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe3de9d391892f3; op2val:0xbff6d6601390ef15;
op3val:0x3fec5c50f5592071; valaddr_reg:x3; val_offset:2847*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2847*FLEN/8, x4, x1, x2)

inst_950:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x3edef7f91af83 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x16d22dfd404f0 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x5b4bed7891ada and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe3edef7f91af83; op2val:0xbfe16d22dfd404f0;
op3val:0x3fd5b4bed7891ada; valaddr_reg:x3; val_offset:2850*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2850*FLEN/8, x4, x1, x2)

inst_951:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x3edef7f91af83 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x16d22dfd404f0 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x5b4bed7891ada and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe3edef7f91af83; op2val:0xbfe16d22dfd404f0;
op3val:0x3fd5b4bed7891ada; valaddr_reg:x3; val_offset:2853*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2853*FLEN/8, x4, x1, x2)

inst_952:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x3edef7f91af83 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x16d22dfd404f0 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x5b4bed7891ada and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe3edef7f91af83; op2val:0xbfe16d22dfd404f0;
op3val:0x3fd5b4bed7891ada; valaddr_reg:x3; val_offset:2856*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2856*FLEN/8, x4, x1, x2)

inst_953:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x3edef7f91af83 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x16d22dfd404f0 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x5b4bed7891ada and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe3edef7f91af83; op2val:0xbfe16d22dfd404f0;
op3val:0x3fd5b4bed7891ada; valaddr_reg:x3; val_offset:2859*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2859*FLEN/8, x4, x1, x2)

inst_954:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x3edef7f91af83 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x16d22dfd404f0 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x5b4bed7891ada and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe3edef7f91af83; op2val:0xbfe16d22dfd404f0;
op3val:0x3fd5b4bed7891ada; valaddr_reg:x3; val_offset:2862*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2862*FLEN/8, x4, x1, x2)

inst_955:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x3f038c6ce7c85 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x104ba2f1cd45b and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x5352064b6b2d8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe3f038c6ce7c85; op2val:0xbfd104ba2f1cd45b;
op3val:0x3fc5352064b6b2d8; valaddr_reg:x3; val_offset:2865*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2865*FLEN/8, x4, x1, x2)

inst_956:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x3f038c6ce7c85 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x104ba2f1cd45b and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x5352064b6b2d8 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe3f038c6ce7c85; op2val:0xbfd104ba2f1cd45b;
op3val:0x3fc5352064b6b2d8; valaddr_reg:x3; val_offset:2868*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2868*FLEN/8, x4, x1, x2)

inst_957:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x3f038c6ce7c85 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x104ba2f1cd45b and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x5352064b6b2d8 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe3f038c6ce7c85; op2val:0xbfd104ba2f1cd45b;
op3val:0x3fc5352064b6b2d8; valaddr_reg:x3; val_offset:2871*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2871*FLEN/8, x4, x1, x2)

inst_958:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x3f038c6ce7c85 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x104ba2f1cd45b and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x5352064b6b2d8 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe3f038c6ce7c85; op2val:0xbfd104ba2f1cd45b;
op3val:0x3fc5352064b6b2d8; valaddr_reg:x3; val_offset:2874*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2874*FLEN/8, x4, x1, x2)

inst_959:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x3f038c6ce7c85 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x104ba2f1cd45b and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x5352064b6b2d8 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe3f038c6ce7c85; op2val:0xbfd104ba2f1cd45b;
op3val:0x3fc5352064b6b2d8; valaddr_reg:x3; val_offset:2877*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2877*FLEN/8, x4, x1, x2)

inst_960:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x41cc9d5f93cb4 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0x681194b3842f6 and fs3 == 0 and fe3 == 0x3fa and fm3 == 0xc49dd6d0ce650 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe41cc9d5f93cb4; op2val:0xbfb681194b3842f6;
op3val:0x3fac49dd6d0ce650; valaddr_reg:x3; val_offset:2880*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2880*FLEN/8, x4, x1, x2)

inst_961:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x41cc9d5f93cb4 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0x681194b3842f6 and fs3 == 0 and fe3 == 0x3fa and fm3 == 0xc49dd6d0ce650 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe41cc9d5f93cb4; op2val:0xbfb681194b3842f6;
op3val:0x3fac49dd6d0ce650; valaddr_reg:x3; val_offset:2883*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2883*FLEN/8, x4, x1, x2)

inst_962:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x41cc9d5f93cb4 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0x681194b3842f6 and fs3 == 0 and fe3 == 0x3fa and fm3 == 0xc49dd6d0ce650 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe41cc9d5f93cb4; op2val:0xbfb681194b3842f6;
op3val:0x3fac49dd6d0ce650; valaddr_reg:x3; val_offset:2886*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2886*FLEN/8, x4, x1, x2)

inst_963:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x41cc9d5f93cb4 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0x681194b3842f6 and fs3 == 0 and fe3 == 0x3fa and fm3 == 0xc49dd6d0ce650 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe41cc9d5f93cb4; op2val:0xbfb681194b3842f6;
op3val:0x3fac49dd6d0ce650; valaddr_reg:x3; val_offset:2889*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2889*FLEN/8, x4, x1, x2)

inst_964:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x41cc9d5f93cb4 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0x681194b3842f6 and fs3 == 0 and fe3 == 0x3fa and fm3 == 0xc49dd6d0ce650 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe41cc9d5f93cb4; op2val:0xbfb681194b3842f6;
op3val:0x3fac49dd6d0ce650; valaddr_reg:x3; val_offset:2892*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2892*FLEN/8, x4, x1, x2)

inst_965:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x42930027c513f and fs2 == 1 and fe2 == 0x3fb and fm2 == 0x0d42c21df8237 and fs3 == 0 and fe3 == 0x3fa and fm3 == 0x534895a8fdc70 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe42930027c513f; op2val:0xbfb0d42c21df8237;
op3val:0x3fa534895a8fdc70; valaddr_reg:x3; val_offset:2895*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2895*FLEN/8, x4, x1, x2)

inst_966:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x42930027c513f and fs2 == 1 and fe2 == 0x3fb and fm2 == 0x0d42c21df8237 and fs3 == 0 and fe3 == 0x3fa and fm3 == 0x534895a8fdc70 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe42930027c513f; op2val:0xbfb0d42c21df8237;
op3val:0x3fa534895a8fdc70; valaddr_reg:x3; val_offset:2898*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2898*FLEN/8, x4, x1, x2)

inst_967:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x42930027c513f and fs2 == 1 and fe2 == 0x3fb and fm2 == 0x0d42c21df8237 and fs3 == 0 and fe3 == 0x3fa and fm3 == 0x534895a8fdc70 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe42930027c513f; op2val:0xbfb0d42c21df8237;
op3val:0x3fa534895a8fdc70; valaddr_reg:x3; val_offset:2901*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2901*FLEN/8, x4, x1, x2)

inst_968:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x42930027c513f and fs2 == 1 and fe2 == 0x3fb and fm2 == 0x0d42c21df8237 and fs3 == 0 and fe3 == 0x3fa and fm3 == 0x534895a8fdc70 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe42930027c513f; op2val:0xbfb0d42c21df8237;
op3val:0x3fa534895a8fdc70; valaddr_reg:x3; val_offset:2904*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2904*FLEN/8, x4, x1, x2)

inst_969:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x42930027c513f and fs2 == 1 and fe2 == 0x3fb and fm2 == 0x0d42c21df8237 and fs3 == 0 and fe3 == 0x3fa and fm3 == 0x534895a8fdc70 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe42930027c513f; op2val:0xbfb0d42c21df8237;
op3val:0x3fa534895a8fdc70; valaddr_reg:x3; val_offset:2907*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2907*FLEN/8, x4, x1, x2)

inst_970:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x42f12c0c5db80 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0x7c64897de7ffb and fs3 == 0 and fe3 == 0x3fa and fm3 == 0xdfdcd10974f10 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe42f12c0c5db80; op2val:0xbfb7c64897de7ffb;
op3val:0x3fadfdcd10974f10; valaddr_reg:x3; val_offset:2910*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2910*FLEN/8, x4, x1, x2)

inst_971:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x42f12c0c5db80 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0x7c64897de7ffb and fs3 == 0 and fe3 == 0x3fa and fm3 == 0xdfdcd10974f10 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe42f12c0c5db80; op2val:0xbfb7c64897de7ffb;
op3val:0x3fadfdcd10974f10; valaddr_reg:x3; val_offset:2913*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2913*FLEN/8, x4, x1, x2)

inst_972:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x42f12c0c5db80 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0x7c64897de7ffb and fs3 == 0 and fe3 == 0x3fa and fm3 == 0xdfdcd10974f10 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe42f12c0c5db80; op2val:0xbfb7c64897de7ffb;
op3val:0x3fadfdcd10974f10; valaddr_reg:x3; val_offset:2916*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2916*FLEN/8, x4, x1, x2)

inst_973:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x42f12c0c5db80 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0x7c64897de7ffb and fs3 == 0 and fe3 == 0x3fa and fm3 == 0xdfdcd10974f10 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe42f12c0c5db80; op2val:0xbfb7c64897de7ffb;
op3val:0x3fadfdcd10974f10; valaddr_reg:x3; val_offset:2919*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2919*FLEN/8, x4, x1, x2)

inst_974:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x42f12c0c5db80 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0x7c64897de7ffb and fs3 == 0 and fe3 == 0x3fa and fm3 == 0xdfdcd10974f10 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe42f12c0c5db80; op2val:0xbfb7c64897de7ffb;
op3val:0x3fadfdcd10974f10; valaddr_reg:x3; val_offset:2922*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2922*FLEN/8, x4, x1, x2)

inst_975:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x4382c46fb3685 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x100ca9ae9d057 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x57caf145e0d89 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe4382c46fb3685; op2val:0xbff100ca9ae9d057;
op3val:0x3fe57caf145e0d89; valaddr_reg:x3; val_offset:2925*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2925*FLEN/8, x4, x1, x2)

inst_976:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x4382c46fb3685 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x100ca9ae9d057 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x57caf145e0d89 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe4382c46fb3685; op2val:0xbff100ca9ae9d057;
op3val:0x3fe57caf145e0d89; valaddr_reg:x3; val_offset:2928*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2928*FLEN/8, x4, x1, x2)

inst_977:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x4382c46fb3685 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x100ca9ae9d057 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x57caf145e0d89 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe4382c46fb3685; op2val:0xbff100ca9ae9d057;
op3val:0x3fe57caf145e0d89; valaddr_reg:x3; val_offset:2931*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2931*FLEN/8, x4, x1, x2)

inst_978:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x4382c46fb3685 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x100ca9ae9d057 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x57caf145e0d89 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe4382c46fb3685; op2val:0xbff100ca9ae9d057;
op3val:0x3fe57caf145e0d89; valaddr_reg:x3; val_offset:2934*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2934*FLEN/8, x4, x1, x2)

inst_979:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x4382c46fb3685 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x100ca9ae9d057 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x57caf145e0d89 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe4382c46fb3685; op2val:0xbff100ca9ae9d057;
op3val:0x3fe57caf145e0d89; valaddr_reg:x3; val_offset:2937*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2937*FLEN/8, x4, x1, x2)

inst_980:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x4594ee4aed52c and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xc8fd7b84cfe31 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x2299d4de373a8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe4594ee4aed52c; op2val:0xbfec8fd7b84cfe31;
op3val:0x3fe2299d4de373a8; valaddr_reg:x3; val_offset:2940*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2940*FLEN/8, x4, x1, x2)

inst_981:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x4594ee4aed52c and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xc8fd7b84cfe31 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x2299d4de373a8 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe4594ee4aed52c; op2val:0xbfec8fd7b84cfe31;
op3val:0x3fe2299d4de373a8; valaddr_reg:x3; val_offset:2943*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2943*FLEN/8, x4, x1, x2)

inst_982:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x4594ee4aed52c and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xc8fd7b84cfe31 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x2299d4de373a8 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe4594ee4aed52c; op2val:0xbfec8fd7b84cfe31;
op3val:0x3fe2299d4de373a8; valaddr_reg:x3; val_offset:2946*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2946*FLEN/8, x4, x1, x2)

inst_983:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x4594ee4aed52c and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xc8fd7b84cfe31 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x2299d4de373a8 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe4594ee4aed52c; op2val:0xbfec8fd7b84cfe31;
op3val:0x3fe2299d4de373a8; valaddr_reg:x3; val_offset:2949*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2949*FLEN/8, x4, x1, x2)

inst_984:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x4594ee4aed52c and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xc8fd7b84cfe31 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x2299d4de373a8 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe4594ee4aed52c; op2val:0xbfec8fd7b84cfe31;
op3val:0x3fe2299d4de373a8; valaddr_reg:x3; val_offset:2952*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2952*FLEN/8, x4, x1, x2)

inst_985:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x468fee94ec0df and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xcb91033884207 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x251e863376b52 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe468fee94ec0df; op2val:0xbfecb91033884207;
op3val:0x3fe251e863376b52; valaddr_reg:x3; val_offset:2955*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2955*FLEN/8, x4, x1, x2)

inst_986:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x468fee94ec0df and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xcb91033884207 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x251e863376b52 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe468fee94ec0df; op2val:0xbfecb91033884207;
op3val:0x3fe251e863376b52; valaddr_reg:x3; val_offset:2958*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2958*FLEN/8, x4, x1, x2)

inst_987:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x468fee94ec0df and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xcb91033884207 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x251e863376b52 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe468fee94ec0df; op2val:0xbfecb91033884207;
op3val:0x3fe251e863376b52; valaddr_reg:x3; val_offset:2961*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2961*FLEN/8, x4, x1, x2)

inst_988:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x468fee94ec0df and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xcb91033884207 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x251e863376b52 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe468fee94ec0df; op2val:0xbfecb91033884207;
op3val:0x3fe251e863376b52; valaddr_reg:x3; val_offset:2964*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2964*FLEN/8, x4, x1, x2)

inst_989:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x468fee94ec0df and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xcb91033884207 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x251e863376b52 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe468fee94ec0df; op2val:0xbfecb91033884207;
op3val:0x3fe251e863376b52; valaddr_reg:x3; val_offset:2967*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2967*FLEN/8, x4, x1, x2)

inst_990:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x46fa7c92117e8 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x40510860255ec and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x99209baaa1a42 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe46fa7c92117e8; op2val:0xbfe40510860255ec;
op3val:0x3fd99209baaa1a42; valaddr_reg:x3; val_offset:2970*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2970*FLEN/8, x4, x1, x2)

inst_991:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x46fa7c92117e8 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x40510860255ec and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x99209baaa1a42 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe46fa7c92117e8; op2val:0xbfe40510860255ec;
op3val:0x3fd99209baaa1a42; valaddr_reg:x3; val_offset:2973*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2973*FLEN/8, x4, x1, x2)

inst_992:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x46fa7c92117e8 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x40510860255ec and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x99209baaa1a42 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe46fa7c92117e8; op2val:0xbfe40510860255ec;
op3val:0x3fd99209baaa1a42; valaddr_reg:x3; val_offset:2976*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2976*FLEN/8, x4, x1, x2)

inst_993:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x46fa7c92117e8 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x40510860255ec and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x99209baaa1a42 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe46fa7c92117e8; op2val:0xbfe40510860255ec;
op3val:0x3fd99209baaa1a42; valaddr_reg:x3; val_offset:2979*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2979*FLEN/8, x4, x1, x2)

inst_994:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x46fa7c92117e8 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x40510860255ec and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x99209baaa1a42 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe46fa7c92117e8; op2val:0xbfe40510860255ec;
op3val:0x3fd99209baaa1a42; valaddr_reg:x3; val_offset:2982*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2982*FLEN/8, x4, x1, x2)

inst_995:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x476d27e10cca7 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xfb40cd9f7d3b3 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x44640821893f9 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe476d27e10cca7; op2val:0xbfefb40cd9f7d3b3;
op3val:0x3fe44640821893f9; valaddr_reg:x3; val_offset:2985*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2985*FLEN/8, x4, x1, x2)

inst_996:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x476d27e10cca7 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xfb40cd9f7d3b3 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x44640821893f9 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe476d27e10cca7; op2val:0xbfefb40cd9f7d3b3;
op3val:0x3fe44640821893f9; valaddr_reg:x3; val_offset:2988*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2988*FLEN/8, x4, x1, x2)

inst_997:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x476d27e10cca7 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xfb40cd9f7d3b3 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x44640821893f9 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe476d27e10cca7; op2val:0xbfefb40cd9f7d3b3;
op3val:0x3fe44640821893f9; valaddr_reg:x3; val_offset:2991*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2991*FLEN/8, x4, x1, x2)

inst_998:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x476d27e10cca7 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xfb40cd9f7d3b3 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x44640821893f9 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe476d27e10cca7; op2val:0xbfefb40cd9f7d3b3;
op3val:0x3fe44640821893f9; valaddr_reg:x3; val_offset:2994*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2994*FLEN/8, x4, x1, x2)

inst_999:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x476d27e10cca7 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xfb40cd9f7d3b3 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x44640821893f9 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe476d27e10cca7; op2val:0xbfefb40cd9f7d3b3;
op3val:0x3fe44640821893f9; valaddr_reg:x3; val_offset:2997*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2997*FLEN/8, x4, x1, x2)

inst_1000:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x479899362a7e7 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x33c254272cef9 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x89d4ad104407c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe479899362a7e7; op2val:0xbfd33c254272cef9;
op3val:0x3fc89d4ad104407c; valaddr_reg:x3; val_offset:3000*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3000*FLEN/8, x4, x1, x2)

inst_1001:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x479899362a7e7 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x33c254272cef9 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x89d4ad104407c and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe479899362a7e7; op2val:0xbfd33c254272cef9;
op3val:0x3fc89d4ad104407c; valaddr_reg:x3; val_offset:3003*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3003*FLEN/8, x4, x1, x2)

inst_1002:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x479899362a7e7 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x33c254272cef9 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x89d4ad104407c and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe479899362a7e7; op2val:0xbfd33c254272cef9;
op3val:0x3fc89d4ad104407c; valaddr_reg:x3; val_offset:3006*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3006*FLEN/8, x4, x1, x2)

inst_1003:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x479899362a7e7 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x33c254272cef9 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x89d4ad104407c and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe479899362a7e7; op2val:0xbfd33c254272cef9;
op3val:0x3fc89d4ad104407c; valaddr_reg:x3; val_offset:3009*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3009*FLEN/8, x4, x1, x2)

inst_1004:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x479899362a7e7 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x33c254272cef9 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x89d4ad104407c and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe479899362a7e7; op2val:0xbfd33c254272cef9;
op3val:0x3fc89d4ad104407c; valaddr_reg:x3; val_offset:3012*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3012*FLEN/8, x4, x1, x2)

inst_1005:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x48f6e30219322 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x0c3b6c82093af and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x58aed1fbc4dce and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe48f6e30219322; op2val:0xbff0c3b6c82093af;
op3val:0x3fe58aed1fbc4dce; valaddr_reg:x3; val_offset:3015*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3015*FLEN/8, x4, x1, x2)

inst_1006:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x48f6e30219322 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x0c3b6c82093af and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x58aed1fbc4dce and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe48f6e30219322; op2val:0xbff0c3b6c82093af;
op3val:0x3fe58aed1fbc4dce; valaddr_reg:x3; val_offset:3018*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3018*FLEN/8, x4, x1, x2)

inst_1007:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x48f6e30219322 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x0c3b6c82093af and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x58aed1fbc4dce and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe48f6e30219322; op2val:0xbff0c3b6c82093af;
op3val:0x3fe58aed1fbc4dce; valaddr_reg:x3; val_offset:3021*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3021*FLEN/8, x4, x1, x2)

inst_1008:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x48f6e30219322 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x0c3b6c82093af and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x58aed1fbc4dce and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe48f6e30219322; op2val:0xbff0c3b6c82093af;
op3val:0x3fe58aed1fbc4dce; valaddr_reg:x3; val_offset:3024*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3024*FLEN/8, x4, x1, x2)

inst_1009:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x48f6e30219322 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x0c3b6c82093af and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x58aed1fbc4dce and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe48f6e30219322; op2val:0xbff0c3b6c82093af;
op3val:0x3fe58aed1fbc4dce; valaddr_reg:x3; val_offset:3027*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3027*FLEN/8, x4, x1, x2)

inst_1010:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x4930f969667df and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x770e3d00e4fd4 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xe2490c78dac98 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe4930f969667df; op2val:0xbfe770e3d00e4fd4;
op3val:0x3fde2490c78dac98; valaddr_reg:x3; val_offset:3030*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3030*FLEN/8, x4, x1, x2)

inst_1011:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x4930f969667df and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x770e3d00e4fd4 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xe2490c78dac98 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe4930f969667df; op2val:0xbfe770e3d00e4fd4;
op3val:0x3fde2490c78dac98; valaddr_reg:x3; val_offset:3033*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3033*FLEN/8, x4, x1, x2)

inst_1012:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x4930f969667df and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x770e3d00e4fd4 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xe2490c78dac98 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe4930f969667df; op2val:0xbfe770e3d00e4fd4;
op3val:0x3fde2490c78dac98; valaddr_reg:x3; val_offset:3036*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3036*FLEN/8, x4, x1, x2)

inst_1013:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x4930f969667df and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x770e3d00e4fd4 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xe2490c78dac98 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe4930f969667df; op2val:0xbfe770e3d00e4fd4;
op3val:0x3fde2490c78dac98; valaddr_reg:x3; val_offset:3039*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3039*FLEN/8, x4, x1, x2)

inst_1014:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x4930f969667df and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x770e3d00e4fd4 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xe2490c78dac98 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe4930f969667df; op2val:0xbfe770e3d00e4fd4;
op3val:0x3fde2490c78dac98; valaddr_reg:x3; val_offset:3042*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3042*FLEN/8, x4, x1, x2)

inst_1015:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x495f0b8947082 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x8426dc63c6e57 and fs3 == 0 and fe3 == 0x3fb and fm3 == 0xf3660d25d39b0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe495f0b8947082; op2val:0xbfc8426dc63c6e57;
op3val:0x3fbf3660d25d39b0; valaddr_reg:x3; val_offset:3045*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3045*FLEN/8, x4, x1, x2)

inst_1016:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x495f0b8947082 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x8426dc63c6e57 and fs3 == 0 and fe3 == 0x3fb and fm3 == 0xf3660d25d39b0 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe495f0b8947082; op2val:0xbfc8426dc63c6e57;
op3val:0x3fbf3660d25d39b0; valaddr_reg:x3; val_offset:3048*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3048*FLEN/8, x4, x1, x2)

inst_1017:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x495f0b8947082 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x8426dc63c6e57 and fs3 == 0 and fe3 == 0x3fb and fm3 == 0xf3660d25d39b0 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe495f0b8947082; op2val:0xbfc8426dc63c6e57;
op3val:0x3fbf3660d25d39b0; valaddr_reg:x3; val_offset:3051*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3051*FLEN/8, x4, x1, x2)

inst_1018:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x495f0b8947082 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x8426dc63c6e57 and fs3 == 0 and fe3 == 0x3fb and fm3 == 0xf3660d25d39b0 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe495f0b8947082; op2val:0xbfc8426dc63c6e57;
op3val:0x3fbf3660d25d39b0; valaddr_reg:x3; val_offset:3054*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3054*FLEN/8, x4, x1, x2)

inst_1019:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x495f0b8947082 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x8426dc63c6e57 and fs3 == 0 and fe3 == 0x3fb and fm3 == 0xf3660d25d39b0 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe495f0b8947082; op2val:0xbfc8426dc63c6e57;
op3val:0x3fbf3660d25d39b0; valaddr_reg:x3; val_offset:3057*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3057*FLEN/8, x4, x1, x2)

inst_1020:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x4dacf26c7d0bc and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x59f1add9dd906 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xc2e9151e44ddd and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe4dacf26c7d0bc; op2val:0xbff59f1add9dd906;
op3val:0x3fec2e9151e44ddd; valaddr_reg:x3; val_offset:3060*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3060*FLEN/8, x4, x1, x2)

inst_1021:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x4dacf26c7d0bc and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x59f1add9dd906 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xc2e9151e44ddd and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe4dacf26c7d0bc; op2val:0xbff59f1add9dd906;
op3val:0x3fec2e9151e44ddd; valaddr_reg:x3; val_offset:3063*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3063*FLEN/8, x4, x1, x2)

inst_1022:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x4dacf26c7d0bc and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x59f1add9dd906 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xc2e9151e44ddd and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe4dacf26c7d0bc; op2val:0xbff59f1add9dd906;
op3val:0x3fec2e9151e44ddd; valaddr_reg:x3; val_offset:3066*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3066*FLEN/8, x4, x1, x2)

inst_1023:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x4dacf26c7d0bc and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x59f1add9dd906 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xc2e9151e44ddd and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe4dacf26c7d0bc; op2val:0xbff59f1add9dd906;
op3val:0x3fec2e9151e44ddd; valaddr_reg:x3; val_offset:3069*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3069*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_9)

inst_1024:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x4dacf26c7d0bc and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x59f1add9dd906 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xc2e9151e44ddd and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe4dacf26c7d0bc; op2val:0xbff59f1add9dd906;
op3val:0x3fec2e9151e44ddd; valaddr_reg:x3; val_offset:3072*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3072*FLEN/8, x4, x1, x2)

inst_1025:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x4e502927fe9b6 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xd822b386846c1 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x34488e7c7634a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe4e502927fe9b6; op2val:0xbfdd822b386846c1;
op3val:0x3fd34488e7c7634a; valaddr_reg:x3; val_offset:3075*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3075*FLEN/8, x4, x1, x2)

inst_1026:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x4e502927fe9b6 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xd822b386846c1 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x34488e7c7634a and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe4e502927fe9b6; op2val:0xbfdd822b386846c1;
op3val:0x3fd34488e7c7634a; valaddr_reg:x3; val_offset:3078*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3078*FLEN/8, x4, x1, x2)

inst_1027:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x4e502927fe9b6 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xd822b386846c1 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x34488e7c7634a and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe4e502927fe9b6; op2val:0xbfdd822b386846c1;
op3val:0x3fd34488e7c7634a; valaddr_reg:x3; val_offset:3081*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3081*FLEN/8, x4, x1, x2)

inst_1028:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x4e502927fe9b6 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xd822b386846c1 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x34488e7c7634a and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe4e502927fe9b6; op2val:0xbfdd822b386846c1;
op3val:0x3fd34488e7c7634a; valaddr_reg:x3; val_offset:3084*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3084*FLEN/8, x4, x1, x2)

inst_1029:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x4e502927fe9b6 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xd822b386846c1 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x34488e7c7634a and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe4e502927fe9b6; op2val:0xbfdd822b386846c1;
op3val:0x3fd34488e7c7634a; valaddr_reg:x3; val_offset:3087*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3087*FLEN/8, x4, x1, x2)

inst_1030:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x4eb4c4c44ee61 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xec0dd10522e20 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x41aabd4fc8b0e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe4eb4c4c44ee61; op2val:0xbfeec0dd10522e20;
op3val:0x3fe41aabd4fc8b0e; valaddr_reg:x3; val_offset:3090*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3090*FLEN/8, x4, x1, x2)

inst_1031:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x4eb4c4c44ee61 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xec0dd10522e20 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x41aabd4fc8b0e and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe4eb4c4c44ee61; op2val:0xbfeec0dd10522e20;
op3val:0x3fe41aabd4fc8b0e; valaddr_reg:x3; val_offset:3093*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3093*FLEN/8, x4, x1, x2)

inst_1032:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x4eb4c4c44ee61 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xec0dd10522e20 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x41aabd4fc8b0e and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe4eb4c4c44ee61; op2val:0xbfeec0dd10522e20;
op3val:0x3fe41aabd4fc8b0e; valaddr_reg:x3; val_offset:3096*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3096*FLEN/8, x4, x1, x2)

inst_1033:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x4eb4c4c44ee61 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xec0dd10522e20 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x41aabd4fc8b0e and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe4eb4c4c44ee61; op2val:0xbfeec0dd10522e20;
op3val:0x3fe41aabd4fc8b0e; valaddr_reg:x3; val_offset:3099*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3099*FLEN/8, x4, x1, x2)

inst_1034:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x4eb4c4c44ee61 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xec0dd10522e20 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x41aabd4fc8b0e and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe4eb4c4c44ee61; op2val:0xbfeec0dd10522e20;
op3val:0x3fe41aabd4fc8b0e; valaddr_reg:x3; val_offset:3102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3102*FLEN/8, x4, x1, x2)

inst_1035:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x52b82d70ff46b and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xddd248ad56b3b and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x3c1bb3f4fc272 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe52b82d70ff46b; op2val:0xbfdddd248ad56b3b;
op3val:0x3fd3c1bb3f4fc272; valaddr_reg:x3; val_offset:3105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3105*FLEN/8, x4, x1, x2)

inst_1036:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x52b82d70ff46b and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xddd248ad56b3b and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x3c1bb3f4fc272 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe52b82d70ff46b; op2val:0xbfdddd248ad56b3b;
op3val:0x3fd3c1bb3f4fc272; valaddr_reg:x3; val_offset:3108*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3108*FLEN/8, x4, x1, x2)

inst_1037:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x52b82d70ff46b and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xddd248ad56b3b and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x3c1bb3f4fc272 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe52b82d70ff46b; op2val:0xbfdddd248ad56b3b;
op3val:0x3fd3c1bb3f4fc272; valaddr_reg:x3; val_offset:3111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3111*FLEN/8, x4, x1, x2)

inst_1038:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x52b82d70ff46b and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xddd248ad56b3b and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x3c1bb3f4fc272 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe52b82d70ff46b; op2val:0xbfdddd248ad56b3b;
op3val:0x3fd3c1bb3f4fc272; valaddr_reg:x3; val_offset:3114*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3114*FLEN/8, x4, x1, x2)

inst_1039:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x52b82d70ff46b and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xddd248ad56b3b and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x3c1bb3f4fc272 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe52b82d70ff46b; op2val:0xbfdddd248ad56b3b;
op3val:0x3fd3c1bb3f4fc272; valaddr_reg:x3; val_offset:3117*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3117*FLEN/8, x4, x1, x2)

inst_1040:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x544e62a9f1383 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xd9fd99bfc7c10 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x3b0af912a4d07 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe544e62a9f1383; op2val:0xbfed9fd99bfc7c10;
op3val:0x3fe3b0af912a4d07; valaddr_reg:x3; val_offset:3120*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3120*FLEN/8, x4, x1, x2)

inst_1041:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x544e62a9f1383 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xd9fd99bfc7c10 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x3b0af912a4d07 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe544e62a9f1383; op2val:0xbfed9fd99bfc7c10;
op3val:0x3fe3b0af912a4d07; valaddr_reg:x3; val_offset:3123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3123*FLEN/8, x4, x1, x2)

inst_1042:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x544e62a9f1383 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xd9fd99bfc7c10 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x3b0af912a4d07 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe544e62a9f1383; op2val:0xbfed9fd99bfc7c10;
op3val:0x3fe3b0af912a4d07; valaddr_reg:x3; val_offset:3126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3126*FLEN/8, x4, x1, x2)

inst_1043:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x544e62a9f1383 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xd9fd99bfc7c10 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x3b0af912a4d07 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe544e62a9f1383; op2val:0xbfed9fd99bfc7c10;
op3val:0x3fe3b0af912a4d07; valaddr_reg:x3; val_offset:3129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3129*FLEN/8, x4, x1, x2)

inst_1044:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x544e62a9f1383 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xd9fd99bfc7c10 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x3b0af912a4d07 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe544e62a9f1383; op2val:0xbfed9fd99bfc7c10;
op3val:0x3fe3b0af912a4d07; valaddr_reg:x3; val_offset:3132*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3132*FLEN/8, x4, x1, x2)

inst_1045:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x5784326bba827 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0xbbae15650f4c1 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x29adade812650 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe5784326bba827; op2val:0xbfcbbae15650f4c1;
op3val:0x3fc29adade812650; valaddr_reg:x3; val_offset:3135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3135*FLEN/8, x4, x1, x2)

inst_1046:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x5784326bba827 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0xbbae15650f4c1 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x29adade812650 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe5784326bba827; op2val:0xbfcbbae15650f4c1;
op3val:0x3fc29adade812650; valaddr_reg:x3; val_offset:3138*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3138*FLEN/8, x4, x1, x2)

inst_1047:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x5784326bba827 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0xbbae15650f4c1 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x29adade812650 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe5784326bba827; op2val:0xbfcbbae15650f4c1;
op3val:0x3fc29adade812650; valaddr_reg:x3; val_offset:3141*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3141*FLEN/8, x4, x1, x2)

inst_1048:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x5784326bba827 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0xbbae15650f4c1 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x29adade812650 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe5784326bba827; op2val:0xbfcbbae15650f4c1;
op3val:0x3fc29adade812650; valaddr_reg:x3; val_offset:3144*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3144*FLEN/8, x4, x1, x2)

inst_1049:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x5784326bba827 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0xbbae15650f4c1 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x29adade812650 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe5784326bba827; op2val:0xbfcbbae15650f4c1;
op3val:0x3fc29adade812650; valaddr_reg:x3; val_offset:3147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3147*FLEN/8, x4, x1, x2)

inst_1050:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x58b2ad2d181d3 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x6742405084338 and fs3 == 0 and fe3 == 0x3fb and fm3 == 0xe3bbc583f7940 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe58b2ad2d181d3; op2val:0xbfc6742405084338;
op3val:0x3fbe3bbc583f7940; valaddr_reg:x3; val_offset:3150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3150*FLEN/8, x4, x1, x2)

inst_1051:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x58b2ad2d181d3 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x6742405084338 and fs3 == 0 and fe3 == 0x3fb and fm3 == 0xe3bbc583f7940 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe58b2ad2d181d3; op2val:0xbfc6742405084338;
op3val:0x3fbe3bbc583f7940; valaddr_reg:x3; val_offset:3153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3153*FLEN/8, x4, x1, x2)

inst_1052:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x58b2ad2d181d3 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x6742405084338 and fs3 == 0 and fe3 == 0x3fb and fm3 == 0xe3bbc583f7940 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe58b2ad2d181d3; op2val:0xbfc6742405084338;
op3val:0x3fbe3bbc583f7940; valaddr_reg:x3; val_offset:3156*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3156*FLEN/8, x4, x1, x2)

inst_1053:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x58b2ad2d181d3 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x6742405084338 and fs3 == 0 and fe3 == 0x3fb and fm3 == 0xe3bbc583f7940 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe58b2ad2d181d3; op2val:0xbfc6742405084338;
op3val:0x3fbe3bbc583f7940; valaddr_reg:x3; val_offset:3159*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3159*FLEN/8, x4, x1, x2)

inst_1054:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x58b2ad2d181d3 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x6742405084338 and fs3 == 0 and fe3 == 0x3fb and fm3 == 0xe3bbc583f7940 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe58b2ad2d181d3; op2val:0xbfc6742405084338;
op3val:0x3fbe3bbc583f7940; valaddr_reg:x3; val_offset:3162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3162*FLEN/8, x4, x1, x2)

inst_1055:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x5c33830d66aa4 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x69daa900bfb79 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xec2e0d8a85778 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe5c33830d66aa4; op2val:0xbff69daa900bfb79;
op3val:0x3feec2e0d8a85778; valaddr_reg:x3; val_offset:3165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3165*FLEN/8, x4, x1, x2)

inst_1056:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x5c33830d66aa4 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x69daa900bfb79 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xec2e0d8a85778 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe5c33830d66aa4; op2val:0xbff69daa900bfb79;
op3val:0x3feec2e0d8a85778; valaddr_reg:x3; val_offset:3168*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3168*FLEN/8, x4, x1, x2)

inst_1057:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x5c33830d66aa4 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x69daa900bfb79 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xec2e0d8a85778 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe5c33830d66aa4; op2val:0xbff69daa900bfb79;
op3val:0x3feec2e0d8a85778; valaddr_reg:x3; val_offset:3171*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3171*FLEN/8, x4, x1, x2)

inst_1058:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x5c33830d66aa4 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x69daa900bfb79 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xec2e0d8a85778 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe5c33830d66aa4; op2val:0xbff69daa900bfb79;
op3val:0x3feec2e0d8a85778; valaddr_reg:x3; val_offset:3174*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3174*FLEN/8, x4, x1, x2)

inst_1059:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x5c33830d66aa4 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x69daa900bfb79 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xec2e0d8a85778 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe5c33830d66aa4; op2val:0xbff69daa900bfb79;
op3val:0x3feec2e0d8a85778; valaddr_reg:x3; val_offset:3177*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3177*FLEN/8, x4, x1, x2)

inst_1060:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x5c8570b1c55a2 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x08896dc411577 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x6824b51061697 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe5c8570b1c55a2; op2val:0xbff08896dc411577;
op3val:0x3fe6824b51061697; valaddr_reg:x3; val_offset:3180*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3180*FLEN/8, x4, x1, x2)

inst_1061:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x5c8570b1c55a2 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x08896dc411577 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x6824b51061697 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe5c8570b1c55a2; op2val:0xbff08896dc411577;
op3val:0x3fe6824b51061697; valaddr_reg:x3; val_offset:3183*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3183*FLEN/8, x4, x1, x2)

inst_1062:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x5c8570b1c55a2 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x08896dc411577 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x6824b51061697 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe5c8570b1c55a2; op2val:0xbff08896dc411577;
op3val:0x3fe6824b51061697; valaddr_reg:x3; val_offset:3186*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3186*FLEN/8, x4, x1, x2)

inst_1063:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x5c8570b1c55a2 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x08896dc411577 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x6824b51061697 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe5c8570b1c55a2; op2val:0xbff08896dc411577;
op3val:0x3fe6824b51061697; valaddr_reg:x3; val_offset:3189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3189*FLEN/8, x4, x1, x2)

inst_1064:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x5c8570b1c55a2 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x08896dc411577 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x6824b51061697 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe5c8570b1c55a2; op2val:0xbff08896dc411577;
op3val:0x3fe6824b51061697; valaddr_reg:x3; val_offset:3192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3192*FLEN/8, x4, x1, x2)

inst_1065:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x5efb2630b6275 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x02c77c3c31f00 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x62ca9c0bf544e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe5efb2630b6275; op2val:0xbfe02c77c3c31f00;
op3val:0x3fd62ca9c0bf544e; valaddr_reg:x3; val_offset:3195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3195*FLEN/8, x4, x1, x2)

inst_1066:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x5efb2630b6275 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x02c77c3c31f00 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x62ca9c0bf544e and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe5efb2630b6275; op2val:0xbfe02c77c3c31f00;
op3val:0x3fd62ca9c0bf544e; valaddr_reg:x3; val_offset:3198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3198*FLEN/8, x4, x1, x2)

inst_1067:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x5efb2630b6275 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x02c77c3c31f00 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x62ca9c0bf544e and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe5efb2630b6275; op2val:0xbfe02c77c3c31f00;
op3val:0x3fd62ca9c0bf544e; valaddr_reg:x3; val_offset:3201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3201*FLEN/8, x4, x1, x2)

inst_1068:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x5efb2630b6275 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x02c77c3c31f00 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x62ca9c0bf544e and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe5efb2630b6275; op2val:0xbfe02c77c3c31f00;
op3val:0x3fd62ca9c0bf544e; valaddr_reg:x3; val_offset:3204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3204*FLEN/8, x4, x1, x2)

inst_1069:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x5efb2630b6275 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x02c77c3c31f00 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x62ca9c0bf544e and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe5efb2630b6275; op2val:0xbfe02c77c3c31f00;
op3val:0x3fd62ca9c0bf544e; valaddr_reg:x3; val_offset:3207*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3207*FLEN/8, x4, x1, x2)

inst_1070:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x5f14673e36d72 and fs2 == 1 and fe2 == 0x3fa and fm2 == 0x1327efdb97b95 and fs3 == 0 and fe3 == 0x3f9 and fm3 == 0x7959aff4c24e0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe5f14673e36d72; op2val:0xbfa1327efdb97b95;
op3val:0x3f97959aff4c24e0; valaddr_reg:x3; val_offset:3210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3210*FLEN/8, x4, x1, x2)

inst_1071:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x5f14673e36d72 and fs2 == 1 and fe2 == 0x3fa and fm2 == 0x1327efdb97b95 and fs3 == 0 and fe3 == 0x3f9 and fm3 == 0x7959aff4c24e0 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe5f14673e36d72; op2val:0xbfa1327efdb97b95;
op3val:0x3f97959aff4c24e0; valaddr_reg:x3; val_offset:3213*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3213*FLEN/8, x4, x1, x2)

inst_1072:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x5f14673e36d72 and fs2 == 1 and fe2 == 0x3fa and fm2 == 0x1327efdb97b95 and fs3 == 0 and fe3 == 0x3f9 and fm3 == 0x7959aff4c24e0 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe5f14673e36d72; op2val:0xbfa1327efdb97b95;
op3val:0x3f97959aff4c24e0; valaddr_reg:x3; val_offset:3216*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3216*FLEN/8, x4, x1, x2)

inst_1073:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x5f14673e36d72 and fs2 == 1 and fe2 == 0x3fa and fm2 == 0x1327efdb97b95 and fs3 == 0 and fe3 == 0x3f9 and fm3 == 0x7959aff4c24e0 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe5f14673e36d72; op2val:0xbfa1327efdb97b95;
op3val:0x3f97959aff4c24e0; valaddr_reg:x3; val_offset:3219*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3219*FLEN/8, x4, x1, x2)

inst_1074:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x5f14673e36d72 and fs2 == 1 and fe2 == 0x3fa and fm2 == 0x1327efdb97b95 and fs3 == 0 and fe3 == 0x3f9 and fm3 == 0x7959aff4c24e0 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe5f14673e36d72; op2val:0xbfa1327efdb97b95;
op3val:0x3f97959aff4c24e0; valaddr_reg:x3; val_offset:3222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3222*FLEN/8, x4, x1, x2)

inst_1075:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x5fc1a144d049b and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x7e2397cced79b and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x0689eb5942f80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe5fc1a144d049b; op2val:0xbfe7e2397cced79b;
op3val:0x3fe0689eb5942f80; valaddr_reg:x3; val_offset:3225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3225*FLEN/8, x4, x1, x2)

inst_1076:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x5fc1a144d049b and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x7e2397cced79b and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x0689eb5942f80 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe5fc1a144d049b; op2val:0xbfe7e2397cced79b;
op3val:0x3fe0689eb5942f80; valaddr_reg:x3; val_offset:3228*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3228*FLEN/8, x4, x1, x2)

inst_1077:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x5fc1a144d049b and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x7e2397cced79b and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x0689eb5942f80 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe5fc1a144d049b; op2val:0xbfe7e2397cced79b;
op3val:0x3fe0689eb5942f80; valaddr_reg:x3; val_offset:3231*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3231*FLEN/8, x4, x1, x2)

inst_1078:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x5fc1a144d049b and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x7e2397cced79b and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x0689eb5942f80 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe5fc1a144d049b; op2val:0xbfe7e2397cced79b;
op3val:0x3fe0689eb5942f80; valaddr_reg:x3; val_offset:3234*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3234*FLEN/8, x4, x1, x2)

inst_1079:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x5fc1a144d049b and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x7e2397cced79b and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x0689eb5942f80 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe5fc1a144d049b; op2val:0xbfe7e2397cced79b;
op3val:0x3fe0689eb5942f80; valaddr_reg:x3; val_offset:3237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3237*FLEN/8, x4, x1, x2)

inst_1080:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x61e2aeaef8095 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xd9e562c307834 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x478c7686f5dce and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe61e2aeaef8095; op2val:0xbfdd9e562c307834;
op3val:0x3fd478c7686f5dce; valaddr_reg:x3; val_offset:3240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3240*FLEN/8, x4, x1, x2)

inst_1081:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x61e2aeaef8095 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xd9e562c307834 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x478c7686f5dce and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe61e2aeaef8095; op2val:0xbfdd9e562c307834;
op3val:0x3fd478c7686f5dce; valaddr_reg:x3; val_offset:3243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3243*FLEN/8, x4, x1, x2)

inst_1082:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x61e2aeaef8095 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xd9e562c307834 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x478c7686f5dce and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe61e2aeaef8095; op2val:0xbfdd9e562c307834;
op3val:0x3fd478c7686f5dce; valaddr_reg:x3; val_offset:3246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3246*FLEN/8, x4, x1, x2)

inst_1083:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x61e2aeaef8095 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xd9e562c307834 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x478c7686f5dce and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe61e2aeaef8095; op2val:0xbfdd9e562c307834;
op3val:0x3fd478c7686f5dce; valaddr_reg:x3; val_offset:3249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3249*FLEN/8, x4, x1, x2)

inst_1084:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x61e2aeaef8095 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xd9e562c307834 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x478c7686f5dce and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe61e2aeaef8095; op2val:0xbfdd9e562c307834;
op3val:0x3fd478c7686f5dce; valaddr_reg:x3; val_offset:3252*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3252*FLEN/8, x4, x1, x2)

inst_1085:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x666088b88b8a8 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x68e74ac6c143a and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xf93b8a0d077d4 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe666088b88b8a8; op2val:0xbff68e74ac6c143a;
op3val:0x3fef93b8a0d077d4; valaddr_reg:x3; val_offset:3255*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3255*FLEN/8, x4, x1, x2)

inst_1086:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x666088b88b8a8 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x68e74ac6c143a and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xf93b8a0d077d4 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe666088b88b8a8; op2val:0xbff68e74ac6c143a;
op3val:0x3fef93b8a0d077d4; valaddr_reg:x3; val_offset:3258*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3258*FLEN/8, x4, x1, x2)

inst_1087:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x666088b88b8a8 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x68e74ac6c143a and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xf93b8a0d077d4 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe666088b88b8a8; op2val:0xbff68e74ac6c143a;
op3val:0x3fef93b8a0d077d4; valaddr_reg:x3; val_offset:3261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3261*FLEN/8, x4, x1, x2)

inst_1088:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x666088b88b8a8 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x68e74ac6c143a and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xf93b8a0d077d4 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe666088b88b8a8; op2val:0xbff68e74ac6c143a;
op3val:0x3fef93b8a0d077d4; valaddr_reg:x3; val_offset:3264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3264*FLEN/8, x4, x1, x2)

inst_1089:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x666088b88b8a8 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x68e74ac6c143a and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xf93b8a0d077d4 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe666088b88b8a8; op2val:0xbff68e74ac6c143a;
op3val:0x3fef93b8a0d077d4; valaddr_reg:x3; val_offset:3267*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3267*FLEN/8, x4, x1, x2)

inst_1090:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x6b443326972eb and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x173f2ad4e1a56 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x8c40f64eea536 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe6b443326972eb; op2val:0xbfe173f2ad4e1a56;
op3val:0x3fd8c40f64eea536; valaddr_reg:x3; val_offset:3270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3270*FLEN/8, x4, x1, x2)

inst_1091:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x6b443326972eb and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x173f2ad4e1a56 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x8c40f64eea536 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe6b443326972eb; op2val:0xbfe173f2ad4e1a56;
op3val:0x3fd8c40f64eea536; valaddr_reg:x3; val_offset:3273*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3273*FLEN/8, x4, x1, x2)

inst_1092:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x6b443326972eb and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x173f2ad4e1a56 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x8c40f64eea536 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe6b443326972eb; op2val:0xbfe173f2ad4e1a56;
op3val:0x3fd8c40f64eea536; valaddr_reg:x3; val_offset:3276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3276*FLEN/8, x4, x1, x2)

inst_1093:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x6b443326972eb and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x173f2ad4e1a56 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x8c40f64eea536 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe6b443326972eb; op2val:0xbfe173f2ad4e1a56;
op3val:0x3fd8c40f64eea536; valaddr_reg:x3; val_offset:3279*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3279*FLEN/8, x4, x1, x2)

inst_1094:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x6b443326972eb and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x173f2ad4e1a56 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x8c40f64eea536 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe6b443326972eb; op2val:0xbfe173f2ad4e1a56;
op3val:0x3fd8c40f64eea536; valaddr_reg:x3; val_offset:3282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3282*FLEN/8, x4, x1, x2)

inst_1095:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x7201eb004d7ea and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x3c4618ffa8e0f and fs3 == 0 and fe3 == 0x3fb and fm3 == 0xc91faebc53c50 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe7201eb004d7ea; op2val:0xbfc3c4618ffa8e0f;
op3val:0x3fbc91faebc53c50; valaddr_reg:x3; val_offset:3285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3285*FLEN/8, x4, x1, x2)

inst_1096:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x7201eb004d7ea and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x3c4618ffa8e0f and fs3 == 0 and fe3 == 0x3fb and fm3 == 0xc91faebc53c50 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe7201eb004d7ea; op2val:0xbfc3c4618ffa8e0f;
op3val:0x3fbc91faebc53c50; valaddr_reg:x3; val_offset:3288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3288*FLEN/8, x4, x1, x2)

inst_1097:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x7201eb004d7ea and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x3c4618ffa8e0f and fs3 == 0 and fe3 == 0x3fb and fm3 == 0xc91faebc53c50 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe7201eb004d7ea; op2val:0xbfc3c4618ffa8e0f;
op3val:0x3fbc91faebc53c50; valaddr_reg:x3; val_offset:3291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3291*FLEN/8, x4, x1, x2)

inst_1098:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x7201eb004d7ea and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x3c4618ffa8e0f and fs3 == 0 and fe3 == 0x3fb and fm3 == 0xc91faebc53c50 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe7201eb004d7ea; op2val:0xbfc3c4618ffa8e0f;
op3val:0x3fbc91faebc53c50; valaddr_reg:x3; val_offset:3294*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3294*FLEN/8, x4, x1, x2)

inst_1099:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x7201eb004d7ea and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x3c4618ffa8e0f and fs3 == 0 and fe3 == 0x3fb and fm3 == 0xc91faebc53c50 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe7201eb004d7ea; op2val:0xbfc3c4618ffa8e0f;
op3val:0x3fbc91faebc53c50; valaddr_reg:x3; val_offset:3297*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3297*FLEN/8, x4, x1, x2)

inst_1100:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x7306ef7b7be99 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0xf50ea6f24f42a and fs3 == 0 and fe3 == 0x3fb and fm3 == 0x6b18e781b87c8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe7306ef7b7be99; op2val:0xbfbf50ea6f24f42a;
op3val:0x3fb6b18e781b87c8; valaddr_reg:x3; val_offset:3300*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3300*FLEN/8, x4, x1, x2)

inst_1101:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x7306ef7b7be99 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0xf50ea6f24f42a and fs3 == 0 and fe3 == 0x3fb and fm3 == 0x6b18e781b87c8 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe7306ef7b7be99; op2val:0xbfbf50ea6f24f42a;
op3val:0x3fb6b18e781b87c8; valaddr_reg:x3; val_offset:3303*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3303*FLEN/8, x4, x1, x2)

inst_1102:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x7306ef7b7be99 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0xf50ea6f24f42a and fs3 == 0 and fe3 == 0x3fb and fm3 == 0x6b18e781b87c8 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe7306ef7b7be99; op2val:0xbfbf50ea6f24f42a;
op3val:0x3fb6b18e781b87c8; valaddr_reg:x3; val_offset:3306*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3306*FLEN/8, x4, x1, x2)

inst_1103:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x7306ef7b7be99 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0xf50ea6f24f42a and fs3 == 0 and fe3 == 0x3fb and fm3 == 0x6b18e781b87c8 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe7306ef7b7be99; op2val:0xbfbf50ea6f24f42a;
op3val:0x3fb6b18e781b87c8; valaddr_reg:x3; val_offset:3309*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3309*FLEN/8, x4, x1, x2)

inst_1104:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x7306ef7b7be99 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0xf50ea6f24f42a and fs3 == 0 and fe3 == 0x3fb and fm3 == 0x6b18e781b87c8 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe7306ef7b7be99; op2val:0xbfbf50ea6f24f42a;
op3val:0x3fb6b18e781b87c8; valaddr_reg:x3; val_offset:3312*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3312*FLEN/8, x4, x1, x2)

inst_1105:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x73bda7c0d9605 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xf38439e7953e1 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x6aad57ee752d5 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe73bda7c0d9605; op2val:0xbfef38439e7953e1;
op3val:0x3fe6aad57ee752d5; valaddr_reg:x3; val_offset:3315*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3315*FLEN/8, x4, x1, x2)

inst_1106:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x73bda7c0d9605 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xf38439e7953e1 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x6aad57ee752d5 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe73bda7c0d9605; op2val:0xbfef38439e7953e1;
op3val:0x3fe6aad57ee752d5; valaddr_reg:x3; val_offset:3318*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3318*FLEN/8, x4, x1, x2)

inst_1107:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x73bda7c0d9605 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xf38439e7953e1 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x6aad57ee752d5 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe73bda7c0d9605; op2val:0xbfef38439e7953e1;
op3val:0x3fe6aad57ee752d5; valaddr_reg:x3; val_offset:3321*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3321*FLEN/8, x4, x1, x2)

inst_1108:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x73bda7c0d9605 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xf38439e7953e1 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x6aad57ee752d5 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe73bda7c0d9605; op2val:0xbfef38439e7953e1;
op3val:0x3fe6aad57ee752d5; valaddr_reg:x3; val_offset:3324*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3324*FLEN/8, x4, x1, x2)

inst_1109:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x73bda7c0d9605 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xf38439e7953e1 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x6aad57ee752d5 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe73bda7c0d9605; op2val:0xbfef38439e7953e1;
op3val:0x3fe6aad57ee752d5; valaddr_reg:x3; val_offset:3327*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3327*FLEN/8, x4, x1, x2)

inst_1110:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x754ec500b856c and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x977924cef932e and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x2918718e1371c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe754ec500b856c; op2val:0xbfe977924cef932e;
op3val:0x3fe2918718e1371c; valaddr_reg:x3; val_offset:3330*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3330*FLEN/8, x4, x1, x2)

inst_1111:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x754ec500b856c and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x977924cef932e and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x2918718e1371c and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe754ec500b856c; op2val:0xbfe977924cef932e;
op3val:0x3fe2918718e1371c; valaddr_reg:x3; val_offset:3333*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3333*FLEN/8, x4, x1, x2)

inst_1112:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x754ec500b856c and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x977924cef932e and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x2918718e1371c and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe754ec500b856c; op2val:0xbfe977924cef932e;
op3val:0x3fe2918718e1371c; valaddr_reg:x3; val_offset:3336*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3336*FLEN/8, x4, x1, x2)

inst_1113:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x754ec500b856c and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x977924cef932e and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x2918718e1371c and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe754ec500b856c; op2val:0xbfe977924cef932e;
op3val:0x3fe2918718e1371c; valaddr_reg:x3; val_offset:3339*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3339*FLEN/8, x4, x1, x2)

inst_1114:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x754ec500b856c and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x977924cef932e and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x2918718e1371c and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe754ec500b856c; op2val:0xbfe977924cef932e;
op3val:0x3fe2918718e1371c; valaddr_reg:x3; val_offset:3342*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3342*FLEN/8, x4, x1, x2)

inst_1115:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x7760723dd89eb and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x92aab1f3477f5 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x2737df2fb1cd5 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe7760723dd89eb; op2val:0xbfe92aab1f3477f5;
op3val:0x3fe2737df2fb1cd5; valaddr_reg:x3; val_offset:3345*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3345*FLEN/8, x4, x1, x2)

inst_1116:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x7760723dd89eb and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x92aab1f3477f5 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x2737df2fb1cd5 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe7760723dd89eb; op2val:0xbfe92aab1f3477f5;
op3val:0x3fe2737df2fb1cd5; valaddr_reg:x3; val_offset:3348*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3348*FLEN/8, x4, x1, x2)

inst_1117:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x7760723dd89eb and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x92aab1f3477f5 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x2737df2fb1cd5 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe7760723dd89eb; op2val:0xbfe92aab1f3477f5;
op3val:0x3fe2737df2fb1cd5; valaddr_reg:x3; val_offset:3351*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3351*FLEN/8, x4, x1, x2)

inst_1118:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x7760723dd89eb and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x92aab1f3477f5 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x2737df2fb1cd5 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe7760723dd89eb; op2val:0xbfe92aab1f3477f5;
op3val:0x3fe2737df2fb1cd5; valaddr_reg:x3; val_offset:3354*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3354*FLEN/8, x4, x1, x2)

inst_1119:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x7760723dd89eb and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x92aab1f3477f5 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x2737df2fb1cd5 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe7760723dd89eb; op2val:0xbfe92aab1f3477f5;
op3val:0x3fe2737df2fb1cd5; valaddr_reg:x3; val_offset:3357*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3357*FLEN/8, x4, x1, x2)

inst_1120:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x7780b8bb62a7b and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x83c810b60302c and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x1c66862b4f011 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe7780b8bb62a7b; op2val:0xbfe83c810b60302c;
op3val:0x3fe1c66862b4f011; valaddr_reg:x3; val_offset:3360*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3360*FLEN/8, x4, x1, x2)

inst_1121:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x7780b8bb62a7b and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x83c810b60302c and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x1c66862b4f011 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe7780b8bb62a7b; op2val:0xbfe83c810b60302c;
op3val:0x3fe1c66862b4f011; valaddr_reg:x3; val_offset:3363*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3363*FLEN/8, x4, x1, x2)

inst_1122:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x7780b8bb62a7b and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x83c810b60302c and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x1c66862b4f011 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe7780b8bb62a7b; op2val:0xbfe83c810b60302c;
op3val:0x3fe1c66862b4f011; valaddr_reg:x3; val_offset:3366*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3366*FLEN/8, x4, x1, x2)

inst_1123:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x7780b8bb62a7b and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x83c810b60302c and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x1c66862b4f011 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe7780b8bb62a7b; op2val:0xbfe83c810b60302c;
op3val:0x3fe1c66862b4f011; valaddr_reg:x3; val_offset:3369*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3369*FLEN/8, x4, x1, x2)

inst_1124:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x7780b8bb62a7b and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x83c810b60302c and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x1c66862b4f011 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe7780b8bb62a7b; op2val:0xbfe83c810b60302c;
op3val:0x3fe1c66862b4f011; valaddr_reg:x3; val_offset:3372*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3372*FLEN/8, x4, x1, x2)

inst_1125:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x794930ec4dcba and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x4be71ce133871 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xe9263ddc946f0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe794930ec4dcba; op2val:0xbfe4be71ce133871;
op3val:0x3fde9263ddc946f0; valaddr_reg:x3; val_offset:3375*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3375*FLEN/8, x4, x1, x2)

inst_1126:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x794930ec4dcba and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x4be71ce133871 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xe9263ddc946f0 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe794930ec4dcba; op2val:0xbfe4be71ce133871;
op3val:0x3fde9263ddc946f0; valaddr_reg:x3; val_offset:3378*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3378*FLEN/8, x4, x1, x2)

inst_1127:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x794930ec4dcba and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x4be71ce133871 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xe9263ddc946f0 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe794930ec4dcba; op2val:0xbfe4be71ce133871;
op3val:0x3fde9263ddc946f0; valaddr_reg:x3; val_offset:3381*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3381*FLEN/8, x4, x1, x2)

inst_1128:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x794930ec4dcba and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x4be71ce133871 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xe9263ddc946f0 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe794930ec4dcba; op2val:0xbfe4be71ce133871;
op3val:0x3fde9263ddc946f0; valaddr_reg:x3; val_offset:3384*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3384*FLEN/8, x4, x1, x2)

inst_1129:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x794930ec4dcba and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x4be71ce133871 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xe9263ddc946f0 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe794930ec4dcba; op2val:0xbfe4be71ce133871;
op3val:0x3fde9263ddc946f0; valaddr_reg:x3; val_offset:3387*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3387*FLEN/8, x4, x1, x2)

inst_1130:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x7bb8ab79c8032 and fs2 == 1 and fe2 == 0x3f8 and fm2 == 0x7307ef9883d9c and fs3 == 0 and fe3 == 0x3f8 and fm3 == 0x132c32f8e7400 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe7bb8ab79c8032; op2val:0xbf87307ef9883d9c;
op3val:0x3f8132c32f8e7400; valaddr_reg:x3; val_offset:3390*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3390*FLEN/8, x4, x1, x2)

inst_1131:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x7bb8ab79c8032 and fs2 == 1 and fe2 == 0x3f8 and fm2 == 0x7307ef9883d9c and fs3 == 0 and fe3 == 0x3f8 and fm3 == 0x132c32f8e7400 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe7bb8ab79c8032; op2val:0xbf87307ef9883d9c;
op3val:0x3f8132c32f8e7400; valaddr_reg:x3; val_offset:3393*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3393*FLEN/8, x4, x1, x2)

inst_1132:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x7bb8ab79c8032 and fs2 == 1 and fe2 == 0x3f8 and fm2 == 0x7307ef9883d9c and fs3 == 0 and fe3 == 0x3f8 and fm3 == 0x132c32f8e7400 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe7bb8ab79c8032; op2val:0xbf87307ef9883d9c;
op3val:0x3f8132c32f8e7400; valaddr_reg:x3; val_offset:3396*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3396*FLEN/8, x4, x1, x2)

inst_1133:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x7bb8ab79c8032 and fs2 == 1 and fe2 == 0x3f8 and fm2 == 0x7307ef9883d9c and fs3 == 0 and fe3 == 0x3f8 and fm3 == 0x132c32f8e7400 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe7bb8ab79c8032; op2val:0xbf87307ef9883d9c;
op3val:0x3f8132c32f8e7400; valaddr_reg:x3; val_offset:3399*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3399*FLEN/8, x4, x1, x2)

inst_1134:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x7bb8ab79c8032 and fs2 == 1 and fe2 == 0x3f8 and fm2 == 0x7307ef9883d9c and fs3 == 0 and fe3 == 0x3f8 and fm3 == 0x132c32f8e7400 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe7bb8ab79c8032; op2val:0xbf87307ef9883d9c;
op3val:0x3f8132c32f8e7400; valaddr_reg:x3; val_offset:3402*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3402*FLEN/8, x4, x1, x2)

inst_1135:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x7e75e565c5c65 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xa37c75a70a5e2 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x395a73ab101e6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe7e75e565c5c65; op2val:0xbfda37c75a70a5e2;
op3val:0x3fd395a73ab101e6; valaddr_reg:x3; val_offset:3405*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3405*FLEN/8, x4, x1, x2)

inst_1136:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x7e75e565c5c65 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xa37c75a70a5e2 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x395a73ab101e6 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe7e75e565c5c65; op2val:0xbfda37c75a70a5e2;
op3val:0x3fd395a73ab101e6; valaddr_reg:x3; val_offset:3408*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3408*FLEN/8, x4, x1, x2)

inst_1137:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x7e75e565c5c65 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xa37c75a70a5e2 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x395a73ab101e6 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe7e75e565c5c65; op2val:0xbfda37c75a70a5e2;
op3val:0x3fd395a73ab101e6; valaddr_reg:x3; val_offset:3411*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3411*FLEN/8, x4, x1, x2)

inst_1138:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x7e75e565c5c65 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xa37c75a70a5e2 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x395a73ab101e6 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe7e75e565c5c65; op2val:0xbfda37c75a70a5e2;
op3val:0x3fd395a73ab101e6; valaddr_reg:x3; val_offset:3414*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3414*FLEN/8, x4, x1, x2)

inst_1139:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x7e75e565c5c65 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xa37c75a70a5e2 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x395a73ab101e6 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe7e75e565c5c65; op2val:0xbfda37c75a70a5e2;
op3val:0x3fd395a73ab101e6; valaddr_reg:x3; val_offset:3417*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3417*FLEN/8, x4, x1, x2)

inst_1140:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x86d90251ec13e and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x106ef01c8fa1d and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x9feff24d173be and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe86d90251ec13e; op2val:0xbfe106ef01c8fa1d;
op3val:0x3fd9feff24d173be; valaddr_reg:x3; val_offset:3420*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3420*FLEN/8, x4, x1, x2)

inst_1141:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x86d90251ec13e and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x106ef01c8fa1d and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x9feff24d173be and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe86d90251ec13e; op2val:0xbfe106ef01c8fa1d;
op3val:0x3fd9feff24d173be; valaddr_reg:x3; val_offset:3423*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3423*FLEN/8, x4, x1, x2)

inst_1142:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x86d90251ec13e and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x106ef01c8fa1d and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x9feff24d173be and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe86d90251ec13e; op2val:0xbfe106ef01c8fa1d;
op3val:0x3fd9feff24d173be; valaddr_reg:x3; val_offset:3426*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3426*FLEN/8, x4, x1, x2)

inst_1143:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x86d90251ec13e and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x106ef01c8fa1d and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x9feff24d173be and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe86d90251ec13e; op2val:0xbfe106ef01c8fa1d;
op3val:0x3fd9feff24d173be; valaddr_reg:x3; val_offset:3429*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3429*FLEN/8, x4, x1, x2)

inst_1144:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x86d90251ec13e and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x106ef01c8fa1d and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x9feff24d173be and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe86d90251ec13e; op2val:0xbfe106ef01c8fa1d;
op3val:0x3fd9feff24d173be; valaddr_reg:x3; val_offset:3432*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3432*FLEN/8, x4, x1, x2)

inst_1145:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x8749cae17bbb7 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xa94ba26fb6966 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x45068e5b1c77b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe8749cae17bbb7; op2val:0xbfea94ba26fb6966;
op3val:0x3fe45068e5b1c77b; valaddr_reg:x3; val_offset:3435*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3435*FLEN/8, x4, x1, x2)

inst_1146:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x8749cae17bbb7 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xa94ba26fb6966 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x45068e5b1c77b and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe8749cae17bbb7; op2val:0xbfea94ba26fb6966;
op3val:0x3fe45068e5b1c77b; valaddr_reg:x3; val_offset:3438*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3438*FLEN/8, x4, x1, x2)

inst_1147:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x8749cae17bbb7 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xa94ba26fb6966 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x45068e5b1c77b and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe8749cae17bbb7; op2val:0xbfea94ba26fb6966;
op3val:0x3fe45068e5b1c77b; valaddr_reg:x3; val_offset:3441*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3441*FLEN/8, x4, x1, x2)

inst_1148:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x8749cae17bbb7 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xa94ba26fb6966 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x45068e5b1c77b and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe8749cae17bbb7; op2val:0xbfea94ba26fb6966;
op3val:0x3fe45068e5b1c77b; valaddr_reg:x3; val_offset:3444*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3444*FLEN/8, x4, x1, x2)

inst_1149:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x8749cae17bbb7 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xa94ba26fb6966 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x45068e5b1c77b and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe8749cae17bbb7; op2val:0xbfea94ba26fb6966;
op3val:0x3fe45068e5b1c77b; valaddr_reg:x3; val_offset:3447*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3447*FLEN/8, x4, x1, x2)

inst_1150:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x895c17f719feb and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x891f4f93d40d5 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x2e073e9be777f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe895c17f719feb; op2val:0xbfe891f4f93d40d5;
op3val:0x3fe2e073e9be777f; valaddr_reg:x3; val_offset:3450*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3450*FLEN/8, x4, x1, x2)

inst_1151:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x895c17f719feb and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x891f4f93d40d5 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x2e073e9be777f and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe895c17f719feb; op2val:0xbfe891f4f93d40d5;
op3val:0x3fe2e073e9be777f; valaddr_reg:x3; val_offset:3453*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3453*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_10)

inst_1152:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x895c17f719feb and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x891f4f93d40d5 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x2e073e9be777f and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe895c17f719feb; op2val:0xbfe891f4f93d40d5;
op3val:0x3fe2e073e9be777f; valaddr_reg:x3; val_offset:3456*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3456*FLEN/8, x4, x1, x2)

inst_1153:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x895c17f719feb and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x891f4f93d40d5 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x2e073e9be777f and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe895c17f719feb; op2val:0xbfe891f4f93d40d5;
op3val:0x3fe2e073e9be777f; valaddr_reg:x3; val_offset:3459*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3459*FLEN/8, x4, x1, x2)

inst_1154:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x895c17f719feb and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x891f4f93d40d5 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x2e073e9be777f and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe895c17f719feb; op2val:0xbfe891f4f93d40d5;
op3val:0x3fe2e073e9be777f; valaddr_reg:x3; val_offset:3462*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3462*FLEN/8, x4, x1, x2)

inst_1155:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x8a87936b41cce and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x3b1ebcd6ca027 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xe5a4314ed5738 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe8a87936b41cce; op2val:0xbfe3b1ebcd6ca027;
op3val:0x3fde5a4314ed5738; valaddr_reg:x3; val_offset:3465*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3465*FLEN/8, x4, x1, x2)

inst_1156:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x8a87936b41cce and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x3b1ebcd6ca027 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xe5a4314ed5738 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe8a87936b41cce; op2val:0xbfe3b1ebcd6ca027;
op3val:0x3fde5a4314ed5738; valaddr_reg:x3; val_offset:3468*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3468*FLEN/8, x4, x1, x2)

inst_1157:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x8a87936b41cce and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x3b1ebcd6ca027 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xe5a4314ed5738 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe8a87936b41cce; op2val:0xbfe3b1ebcd6ca027;
op3val:0x3fde5a4314ed5738; valaddr_reg:x3; val_offset:3471*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3471*FLEN/8, x4, x1, x2)

inst_1158:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x8a87936b41cce and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x3b1ebcd6ca027 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xe5a4314ed5738 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe8a87936b41cce; op2val:0xbfe3b1ebcd6ca027;
op3val:0x3fde5a4314ed5738; valaddr_reg:x3; val_offset:3474*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3474*FLEN/8, x4, x1, x2)

inst_1159:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x8a87936b41cce and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x3b1ebcd6ca027 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xe5a4314ed5738 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe8a87936b41cce; op2val:0xbfe3b1ebcd6ca027;
op3val:0x3fde5a4314ed5738; valaddr_reg:x3; val_offset:3477*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3477*FLEN/8, x4, x1, x2)

inst_1160:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x8bed35a84b2c1 and fs2 == 1 and fe2 == 0x3fa and fm2 == 0x8f6ecde6240ad and fs3 == 0 and fe3 == 0x3fa and fm3 == 0x34e10a7f9f270 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe8bed35a84b2c1; op2val:0xbfa8f6ecde6240ad;
op3val:0x3fa34e10a7f9f270; valaddr_reg:x3; val_offset:3480*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3480*FLEN/8, x4, x1, x2)

inst_1161:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x8bed35a84b2c1 and fs2 == 1 and fe2 == 0x3fa and fm2 == 0x8f6ecde6240ad and fs3 == 0 and fe3 == 0x3fa and fm3 == 0x34e10a7f9f270 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe8bed35a84b2c1; op2val:0xbfa8f6ecde6240ad;
op3val:0x3fa34e10a7f9f270; valaddr_reg:x3; val_offset:3483*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3483*FLEN/8, x4, x1, x2)

inst_1162:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x8bed35a84b2c1 and fs2 == 1 and fe2 == 0x3fa and fm2 == 0x8f6ecde6240ad and fs3 == 0 and fe3 == 0x3fa and fm3 == 0x34e10a7f9f270 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe8bed35a84b2c1; op2val:0xbfa8f6ecde6240ad;
op3val:0x3fa34e10a7f9f270; valaddr_reg:x3; val_offset:3486*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3486*FLEN/8, x4, x1, x2)

inst_1163:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x8bed35a84b2c1 and fs2 == 1 and fe2 == 0x3fa and fm2 == 0x8f6ecde6240ad and fs3 == 0 and fe3 == 0x3fa and fm3 == 0x34e10a7f9f270 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe8bed35a84b2c1; op2val:0xbfa8f6ecde6240ad;
op3val:0x3fa34e10a7f9f270; valaddr_reg:x3; val_offset:3489*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3489*FLEN/8, x4, x1, x2)

inst_1164:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x8bed35a84b2c1 and fs2 == 1 and fe2 == 0x3fa and fm2 == 0x8f6ecde6240ad and fs3 == 0 and fe3 == 0x3fa and fm3 == 0x34e10a7f9f270 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe8bed35a84b2c1; op2val:0xbfa8f6ecde6240ad;
op3val:0x3fa34e10a7f9f270; valaddr_reg:x3; val_offset:3492*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3492*FLEN/8, x4, x1, x2)

inst_1165:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x8c88b03cbda00 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x09426c2dc44be and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x9ae0613cde624 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe8c88b03cbda00; op2val:0xbff09426c2dc44be;
op3val:0x3fe9ae0613cde624; valaddr_reg:x3; val_offset:3495*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3495*FLEN/8, x4, x1, x2)

inst_1166:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x8c88b03cbda00 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x09426c2dc44be and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x9ae0613cde624 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe8c88b03cbda00; op2val:0xbff09426c2dc44be;
op3val:0x3fe9ae0613cde624; valaddr_reg:x3; val_offset:3498*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3498*FLEN/8, x4, x1, x2)

inst_1167:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x8c88b03cbda00 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x09426c2dc44be and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x9ae0613cde624 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe8c88b03cbda00; op2val:0xbff09426c2dc44be;
op3val:0x3fe9ae0613cde624; valaddr_reg:x3; val_offset:3501*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3501*FLEN/8, x4, x1, x2)

inst_1168:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x8c88b03cbda00 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x09426c2dc44be and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x9ae0613cde624 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe8c88b03cbda00; op2val:0xbff09426c2dc44be;
op3val:0x3fe9ae0613cde624; valaddr_reg:x3; val_offset:3504*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3504*FLEN/8, x4, x1, x2)

inst_1169:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x8c88b03cbda00 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x09426c2dc44be and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x9ae0613cde624 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe8c88b03cbda00; op2val:0xbff09426c2dc44be;
op3val:0x3fe9ae0613cde624; valaddr_reg:x3; val_offset:3507*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3507*FLEN/8, x4, x1, x2)

inst_1170:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x8d7b5e1787baf and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xd0050c909d982 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x683bb8bae77bb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe8d7b5e1787baf; op2val:0xbfed0050c909d982;
op3val:0x3fe683bb8bae77bb; valaddr_reg:x3; val_offset:3510*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3510*FLEN/8, x4, x1, x2)

inst_1171:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x8d7b5e1787baf and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xd0050c909d982 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x683bb8bae77bb and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe8d7b5e1787baf; op2val:0xbfed0050c909d982;
op3val:0x3fe683bb8bae77bb; valaddr_reg:x3; val_offset:3513*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3513*FLEN/8, x4, x1, x2)

inst_1172:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x8d7b5e1787baf and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xd0050c909d982 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x683bb8bae77bb and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe8d7b5e1787baf; op2val:0xbfed0050c909d982;
op3val:0x3fe683bb8bae77bb; valaddr_reg:x3; val_offset:3516*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3516*FLEN/8, x4, x1, x2)

inst_1173:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x8d7b5e1787baf and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xd0050c909d982 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x683bb8bae77bb and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe8d7b5e1787baf; op2val:0xbfed0050c909d982;
op3val:0x3fe683bb8bae77bb; valaddr_reg:x3; val_offset:3519*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3519*FLEN/8, x4, x1, x2)

inst_1174:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x8d7b5e1787baf and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xd0050c909d982 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x683bb8bae77bb and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe8d7b5e1787baf; op2val:0xbfed0050c909d982;
op3val:0x3fe683bb8bae77bb; valaddr_reg:x3; val_offset:3522*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3522*FLEN/8, x4, x1, x2)

inst_1175:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x8e06edfabe22a and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xd188328bcdaef and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x69e72c44cc4dd and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe8e06edfabe22a; op2val:0xbfed188328bcdaef;
op3val:0x3fe69e72c44cc4dd; valaddr_reg:x3; val_offset:3525*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3525*FLEN/8, x4, x1, x2)

inst_1176:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x8e06edfabe22a and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xd188328bcdaef and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x69e72c44cc4dd and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe8e06edfabe22a; op2val:0xbfed188328bcdaef;
op3val:0x3fe69e72c44cc4dd; valaddr_reg:x3; val_offset:3528*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3528*FLEN/8, x4, x1, x2)

inst_1177:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x8e06edfabe22a and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xd188328bcdaef and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x69e72c44cc4dd and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe8e06edfabe22a; op2val:0xbfed188328bcdaef;
op3val:0x3fe69e72c44cc4dd; valaddr_reg:x3; val_offset:3531*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3531*FLEN/8, x4, x1, x2)

inst_1178:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x8e06edfabe22a and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xd188328bcdaef and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x69e72c44cc4dd and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe8e06edfabe22a; op2val:0xbfed188328bcdaef;
op3val:0x3fe69e72c44cc4dd; valaddr_reg:x3; val_offset:3534*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3534*FLEN/8, x4, x1, x2)

inst_1179:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x8e06edfabe22a and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xd188328bcdaef and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x69e72c44cc4dd and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe8e06edfabe22a; op2val:0xbfed188328bcdaef;
op3val:0x3fe69e72c44cc4dd; valaddr_reg:x3; val_offset:3537*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3537*FLEN/8, x4, x1, x2)

inst_1180:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x8eebca24c21d0 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x6c77189350cc7 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x1bf86ca972ac2 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe8eebca24c21d0; op2val:0xbfd6c77189350cc7;
op3val:0x3fd1bf86ca972ac2; valaddr_reg:x3; val_offset:3540*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3540*FLEN/8, x4, x1, x2)

inst_1181:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x8eebca24c21d0 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x6c77189350cc7 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x1bf86ca972ac2 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe8eebca24c21d0; op2val:0xbfd6c77189350cc7;
op3val:0x3fd1bf86ca972ac2; valaddr_reg:x3; val_offset:3543*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3543*FLEN/8, x4, x1, x2)

inst_1182:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x8eebca24c21d0 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x6c77189350cc7 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x1bf86ca972ac2 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe8eebca24c21d0; op2val:0xbfd6c77189350cc7;
op3val:0x3fd1bf86ca972ac2; valaddr_reg:x3; val_offset:3546*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3546*FLEN/8, x4, x1, x2)

inst_1183:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x8eebca24c21d0 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x6c77189350cc7 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x1bf86ca972ac2 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe8eebca24c21d0; op2val:0xbfd6c77189350cc7;
op3val:0x3fd1bf86ca972ac2; valaddr_reg:x3; val_offset:3549*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3549*FLEN/8, x4, x1, x2)

inst_1184:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x8eebca24c21d0 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x6c77189350cc7 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x1bf86ca972ac2 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe8eebca24c21d0; op2val:0xbfd6c77189350cc7;
op3val:0x3fd1bf86ca972ac2; valaddr_reg:x3; val_offset:3552*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3552*FLEN/8, x4, x1, x2)

inst_1185:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x8f620de9f8966 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xf04acca1ba617 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x83215645e4e5d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe8f620de9f8966; op2val:0xbfef04acca1ba617;
op3val:0x3fe83215645e4e5d; valaddr_reg:x3; val_offset:3555*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3555*FLEN/8, x4, x1, x2)

inst_1186:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x8f620de9f8966 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xf04acca1ba617 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x83215645e4e5d and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe8f620de9f8966; op2val:0xbfef04acca1ba617;
op3val:0x3fe83215645e4e5d; valaddr_reg:x3; val_offset:3558*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3558*FLEN/8, x4, x1, x2)

inst_1187:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x8f620de9f8966 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xf04acca1ba617 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x83215645e4e5d and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe8f620de9f8966; op2val:0xbfef04acca1ba617;
op3val:0x3fe83215645e4e5d; valaddr_reg:x3; val_offset:3561*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3561*FLEN/8, x4, x1, x2)

inst_1188:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x8f620de9f8966 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xf04acca1ba617 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x83215645e4e5d and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe8f620de9f8966; op2val:0xbfef04acca1ba617;
op3val:0x3fe83215645e4e5d; valaddr_reg:x3; val_offset:3564*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3564*FLEN/8, x4, x1, x2)

inst_1189:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x8f620de9f8966 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xf04acca1ba617 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x83215645e4e5d and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe8f620de9f8966; op2val:0xbfef04acca1ba617;
op3val:0x3fe83215645e4e5d; valaddr_reg:x3; val_offset:3567*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3567*FLEN/8, x4, x1, x2)

inst_1190:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x90a4a15b9d60b and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x35cf90ff2a459 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xe4db8ecdfef22 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe90a4a15b9d60b; op2val:0xbfe35cf90ff2a459;
op3val:0x3fde4db8ecdfef22; valaddr_reg:x3; val_offset:3570*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3570*FLEN/8, x4, x1, x2)

inst_1191:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x90a4a15b9d60b and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x35cf90ff2a459 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xe4db8ecdfef22 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe90a4a15b9d60b; op2val:0xbfe35cf90ff2a459;
op3val:0x3fde4db8ecdfef22; valaddr_reg:x3; val_offset:3573*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3573*FLEN/8, x4, x1, x2)

inst_1192:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x90a4a15b9d60b and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x35cf90ff2a459 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xe4db8ecdfef22 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe90a4a15b9d60b; op2val:0xbfe35cf90ff2a459;
op3val:0x3fde4db8ecdfef22; valaddr_reg:x3; val_offset:3576*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3576*FLEN/8, x4, x1, x2)

inst_1193:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x90a4a15b9d60b and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x35cf90ff2a459 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xe4db8ecdfef22 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe90a4a15b9d60b; op2val:0xbfe35cf90ff2a459;
op3val:0x3fde4db8ecdfef22; valaddr_reg:x3; val_offset:3579*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3579*FLEN/8, x4, x1, x2)

inst_1194:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x90a4a15b9d60b and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x35cf90ff2a459 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xe4db8ecdfef22 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe90a4a15b9d60b; op2val:0xbfe35cf90ff2a459;
op3val:0x3fde4db8ecdfef22; valaddr_reg:x3; val_offset:3582*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3582*FLEN/8, x4, x1, x2)

inst_1195:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x9546b552fdc42 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x8d8b0808afc79 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x3aad60a70ee04 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe9546b552fdc42; op2val:0xbfd8d8b0808afc79;
op3val:0x3fd3aad60a70ee04; valaddr_reg:x3; val_offset:3585*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3585*FLEN/8, x4, x1, x2)

inst_1196:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x9546b552fdc42 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x8d8b0808afc79 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x3aad60a70ee04 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe9546b552fdc42; op2val:0xbfd8d8b0808afc79;
op3val:0x3fd3aad60a70ee04; valaddr_reg:x3; val_offset:3588*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3588*FLEN/8, x4, x1, x2)

inst_1197:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x9546b552fdc42 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x8d8b0808afc79 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x3aad60a70ee04 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe9546b552fdc42; op2val:0xbfd8d8b0808afc79;
op3val:0x3fd3aad60a70ee04; valaddr_reg:x3; val_offset:3591*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3591*FLEN/8, x4, x1, x2)

inst_1198:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x9546b552fdc42 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x8d8b0808afc79 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x3aad60a70ee04 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe9546b552fdc42; op2val:0xbfd8d8b0808afc79;
op3val:0x3fd3aad60a70ee04; valaddr_reg:x3; val_offset:3594*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3594*FLEN/8, x4, x1, x2)

inst_1199:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x9546b552fdc42 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x8d8b0808afc79 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x3aad60a70ee04 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe9546b552fdc42; op2val:0xbfd8d8b0808afc79;
op3val:0x3fd3aad60a70ee04; valaddr_reg:x3; val_offset:3597*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3597*FLEN/8, x4, x1, x2)

inst_1200:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x98ac9681b927d and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x2b96e99b67800 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0xde427dd6ddf90 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe98ac9681b927d; op2val:0xbfd2b96e99b67800;
op3val:0x3fcde427dd6ddf90; valaddr_reg:x3; val_offset:3600*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3600*FLEN/8, x4, x1, x2)

inst_1201:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x98ac9681b927d and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x2b96e99b67800 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0xde427dd6ddf90 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe98ac9681b927d; op2val:0xbfd2b96e99b67800;
op3val:0x3fcde427dd6ddf90; valaddr_reg:x3; val_offset:3603*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3603*FLEN/8, x4, x1, x2)

inst_1202:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x98ac9681b927d and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x2b96e99b67800 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0xde427dd6ddf90 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe98ac9681b927d; op2val:0xbfd2b96e99b67800;
op3val:0x3fcde427dd6ddf90; valaddr_reg:x3; val_offset:3606*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3606*FLEN/8, x4, x1, x2)

inst_1203:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x98ac9681b927d and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x2b96e99b67800 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0xde427dd6ddf90 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe98ac9681b927d; op2val:0xbfd2b96e99b67800;
op3val:0x3fcde427dd6ddf90; valaddr_reg:x3; val_offset:3609*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3609*FLEN/8, x4, x1, x2)

inst_1204:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x98ac9681b927d and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x2b96e99b67800 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0xde427dd6ddf90 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe98ac9681b927d; op2val:0xbfd2b96e99b67800;
op3val:0x3fcde427dd6ddf90; valaddr_reg:x3; val_offset:3612*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3612*FLEN/8, x4, x1, x2)

inst_1205:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x996df2fef42e5 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x39a117985dca4 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0xf59911fc1b01c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe996df2fef42e5; op2val:0xbfd39a117985dca4;
op3val:0x3fcf59911fc1b01c; valaddr_reg:x3; val_offset:3615*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3615*FLEN/8, x4, x1, x2)

inst_1206:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x996df2fef42e5 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x39a117985dca4 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0xf59911fc1b01c and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe996df2fef42e5; op2val:0xbfd39a117985dca4;
op3val:0x3fcf59911fc1b01c; valaddr_reg:x3; val_offset:3618*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3618*FLEN/8, x4, x1, x2)

inst_1207:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x996df2fef42e5 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x39a117985dca4 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0xf59911fc1b01c and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe996df2fef42e5; op2val:0xbfd39a117985dca4;
op3val:0x3fcf59911fc1b01c; valaddr_reg:x3; val_offset:3621*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3621*FLEN/8, x4, x1, x2)

inst_1208:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x996df2fef42e5 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x39a117985dca4 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0xf59911fc1b01c and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe996df2fef42e5; op2val:0xbfd39a117985dca4;
op3val:0x3fcf59911fc1b01c; valaddr_reg:x3; val_offset:3624*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3624*FLEN/8, x4, x1, x2)

inst_1209:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x996df2fef42e5 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x39a117985dca4 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0xf59911fc1b01c and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe996df2fef42e5; op2val:0xbfd39a117985dca4;
op3val:0x3fcf59911fc1b01c; valaddr_reg:x3; val_offset:3627*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3627*FLEN/8, x4, x1, x2)

inst_1210:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x9a0aa8009cc0f and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x36c7a9c9e93f0 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xf1c8b5adc72a6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe9a0aa8009cc0f; op2val:0xbff36c7a9c9e93f0;
op3val:0x3fef1c8b5adc72a6; valaddr_reg:x3; val_offset:3630*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3630*FLEN/8, x4, x1, x2)

inst_1211:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x9a0aa8009cc0f and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x36c7a9c9e93f0 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xf1c8b5adc72a6 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe9a0aa8009cc0f; op2val:0xbff36c7a9c9e93f0;
op3val:0x3fef1c8b5adc72a6; valaddr_reg:x3; val_offset:3633*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3633*FLEN/8, x4, x1, x2)

inst_1212:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x9a0aa8009cc0f and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x36c7a9c9e93f0 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xf1c8b5adc72a6 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe9a0aa8009cc0f; op2val:0xbff36c7a9c9e93f0;
op3val:0x3fef1c8b5adc72a6; valaddr_reg:x3; val_offset:3636*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3636*FLEN/8, x4, x1, x2)

inst_1213:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x9a0aa8009cc0f and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x36c7a9c9e93f0 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xf1c8b5adc72a6 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe9a0aa8009cc0f; op2val:0xbff36c7a9c9e93f0;
op3val:0x3fef1c8b5adc72a6; valaddr_reg:x3; val_offset:3639*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3639*FLEN/8, x4, x1, x2)

inst_1214:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x9a0aa8009cc0f and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x36c7a9c9e93f0 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xf1c8b5adc72a6 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe9a0aa8009cc0f; op2val:0xbff36c7a9c9e93f0;
op3val:0x3fef1c8b5adc72a6; valaddr_reg:x3; val_offset:3642*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3642*FLEN/8, x4, x1, x2)

inst_1215:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x9acddc6c3cc37 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x0f26d6611e7c2 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xb31e3ee93b923 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe9acddc6c3cc37; op2val:0xbff0f26d6611e7c2;
op3val:0x3feb31e3ee93b923; valaddr_reg:x3; val_offset:3645*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3645*FLEN/8, x4, x1, x2)

inst_1216:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x9acddc6c3cc37 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x0f26d6611e7c2 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xb31e3ee93b923 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe9acddc6c3cc37; op2val:0xbff0f26d6611e7c2;
op3val:0x3feb31e3ee93b923; valaddr_reg:x3; val_offset:3648*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3648*FLEN/8, x4, x1, x2)

inst_1217:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x9acddc6c3cc37 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x0f26d6611e7c2 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xb31e3ee93b923 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe9acddc6c3cc37; op2val:0xbff0f26d6611e7c2;
op3val:0x3feb31e3ee93b923; valaddr_reg:x3; val_offset:3651*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3651*FLEN/8, x4, x1, x2)

inst_1218:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x9acddc6c3cc37 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x0f26d6611e7c2 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xb31e3ee93b923 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe9acddc6c3cc37; op2val:0xbff0f26d6611e7c2;
op3val:0x3feb31e3ee93b923; valaddr_reg:x3; val_offset:3654*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3654*FLEN/8, x4, x1, x2)

inst_1219:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x9acddc6c3cc37 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x0f26d6611e7c2 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xb31e3ee93b923 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe9acddc6c3cc37; op2val:0xbff0f26d6611e7c2;
op3val:0x3feb31e3ee93b923; valaddr_reg:x3; val_offset:3657*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3657*FLEN/8, x4, x1, x2)

inst_1220:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x9cbf2b3683c38 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0x12259cb82e431 and fs3 == 0 and fe3 == 0x3fa and fm3 == 0xba01408f0a3b0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe9cbf2b3683c38; op2val:0xbfb12259cb82e431;
op3val:0x3faba01408f0a3b0; valaddr_reg:x3; val_offset:3660*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3660*FLEN/8, x4, x1, x2)

inst_1221:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x9cbf2b3683c38 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0x12259cb82e431 and fs3 == 0 and fe3 == 0x3fa and fm3 == 0xba01408f0a3b0 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe9cbf2b3683c38; op2val:0xbfb12259cb82e431;
op3val:0x3faba01408f0a3b0; valaddr_reg:x3; val_offset:3663*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3663*FLEN/8, x4, x1, x2)

inst_1222:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x9cbf2b3683c38 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0x12259cb82e431 and fs3 == 0 and fe3 == 0x3fa and fm3 == 0xba01408f0a3b0 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe9cbf2b3683c38; op2val:0xbfb12259cb82e431;
op3val:0x3faba01408f0a3b0; valaddr_reg:x3; val_offset:3666*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3666*FLEN/8, x4, x1, x2)

inst_1223:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x9cbf2b3683c38 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0x12259cb82e431 and fs3 == 0 and fe3 == 0x3fa and fm3 == 0xba01408f0a3b0 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe9cbf2b3683c38; op2val:0xbfb12259cb82e431;
op3val:0x3faba01408f0a3b0; valaddr_reg:x3; val_offset:3669*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3669*FLEN/8, x4, x1, x2)

inst_1224:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x9cbf2b3683c38 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0x12259cb82e431 and fs3 == 0 and fe3 == 0x3fa and fm3 == 0xba01408f0a3b0 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe9cbf2b3683c38; op2val:0xbfb12259cb82e431;
op3val:0x3faba01408f0a3b0; valaddr_reg:x3; val_offset:3672*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3672*FLEN/8, x4, x1, x2)

inst_1225:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x9d93eb4691fe8 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0xadb14e6567f45 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x5b17a998e9b78 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe9d93eb4691fe8; op2val:0xbfcadb14e6567f45;
op3val:0x3fc5b17a998e9b78; valaddr_reg:x3; val_offset:3675*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3675*FLEN/8, x4, x1, x2)

inst_1226:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x9d93eb4691fe8 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0xadb14e6567f45 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x5b17a998e9b78 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe9d93eb4691fe8; op2val:0xbfcadb14e6567f45;
op3val:0x3fc5b17a998e9b78; valaddr_reg:x3; val_offset:3678*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3678*FLEN/8, x4, x1, x2)

inst_1227:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x9d93eb4691fe8 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0xadb14e6567f45 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x5b17a998e9b78 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe9d93eb4691fe8; op2val:0xbfcadb14e6567f45;
op3val:0x3fc5b17a998e9b78; valaddr_reg:x3; val_offset:3681*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3681*FLEN/8, x4, x1, x2)

inst_1228:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x9d93eb4691fe8 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0xadb14e6567f45 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x5b17a998e9b78 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe9d93eb4691fe8; op2val:0xbfcadb14e6567f45;
op3val:0x3fc5b17a998e9b78; valaddr_reg:x3; val_offset:3684*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3684*FLEN/8, x4, x1, x2)

inst_1229:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x9d93eb4691fe8 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0xadb14e6567f45 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x5b17a998e9b78 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe9d93eb4691fe8; op2val:0xbfcadb14e6567f45;
op3val:0x3fc5b17a998e9b78; valaddr_reg:x3; val_offset:3687*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3687*FLEN/8, x4, x1, x2)

inst_1230:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xa17504e344fa6 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x07cb010cca364 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xae2a4186ac54e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fea17504e344fa6; op2val:0xbfe07cb010cca364;
op3val:0x3fdae2a4186ac54e; valaddr_reg:x3; val_offset:3690*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3690*FLEN/8, x4, x1, x2)

inst_1231:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xa17504e344fa6 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x07cb010cca364 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xae2a4186ac54e and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fea17504e344fa6; op2val:0xbfe07cb010cca364;
op3val:0x3fdae2a4186ac54e; valaddr_reg:x3; val_offset:3693*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3693*FLEN/8, x4, x1, x2)

inst_1232:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xa17504e344fa6 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x07cb010cca364 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xae2a4186ac54e and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fea17504e344fa6; op2val:0xbfe07cb010cca364;
op3val:0x3fdae2a4186ac54e; valaddr_reg:x3; val_offset:3696*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3696*FLEN/8, x4, x1, x2)

inst_1233:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xa17504e344fa6 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x07cb010cca364 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xae2a4186ac54e and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fea17504e344fa6; op2val:0xbfe07cb010cca364;
op3val:0x3fdae2a4186ac54e; valaddr_reg:x3; val_offset:3699*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3699*FLEN/8, x4, x1, x2)

inst_1234:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xa17504e344fa6 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x07cb010cca364 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xae2a4186ac54e and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fea17504e344fa6; op2val:0xbfe07cb010cca364;
op3val:0x3fdae2a4186ac54e; valaddr_reg:x3; val_offset:3702*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3702*FLEN/8, x4, x1, x2)

inst_1235:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xa2757baced6e7 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x07555fe4abaf2 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xae723fd01a816 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fea2757baced6e7; op2val:0xbff07555fe4abaf2;
op3val:0x3feae723fd01a816; valaddr_reg:x3; val_offset:3705*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3705*FLEN/8, x4, x1, x2)

inst_1236:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xa2757baced6e7 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x07555fe4abaf2 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xae723fd01a816 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fea2757baced6e7; op2val:0xbff07555fe4abaf2;
op3val:0x3feae723fd01a816; valaddr_reg:x3; val_offset:3708*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3708*FLEN/8, x4, x1, x2)

inst_1237:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xa2757baced6e7 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x07555fe4abaf2 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xae723fd01a816 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fea2757baced6e7; op2val:0xbff07555fe4abaf2;
op3val:0x3feae723fd01a816; valaddr_reg:x3; val_offset:3711*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3711*FLEN/8, x4, x1, x2)

inst_1238:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xa2757baced6e7 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x07555fe4abaf2 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xae723fd01a816 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fea2757baced6e7; op2val:0xbff07555fe4abaf2;
op3val:0x3feae723fd01a816; valaddr_reg:x3; val_offset:3714*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3714*FLEN/8, x4, x1, x2)

inst_1239:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xa2757baced6e7 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x07555fe4abaf2 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xae723fd01a816 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fea2757baced6e7; op2val:0xbff07555fe4abaf2;
op3val:0x3feae723fd01a816; valaddr_reg:x3; val_offset:3717*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3717*FLEN/8, x4, x1, x2)

inst_1240:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xa318f9e6bb000 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x19116e58d042d and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xcc22f39cfc7e2 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fea318f9e6bb000; op2val:0xbff19116e58d042d;
op3val:0x3fecc22f39cfc7e2; valaddr_reg:x3; val_offset:3720*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3720*FLEN/8, x4, x1, x2)

inst_1241:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xa318f9e6bb000 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x19116e58d042d and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xcc22f39cfc7e2 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fea318f9e6bb000; op2val:0xbff19116e58d042d;
op3val:0x3fecc22f39cfc7e2; valaddr_reg:x3; val_offset:3723*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3723*FLEN/8, x4, x1, x2)

inst_1242:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xa318f9e6bb000 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x19116e58d042d and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xcc22f39cfc7e2 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fea318f9e6bb000; op2val:0xbff19116e58d042d;
op3val:0x3fecc22f39cfc7e2; valaddr_reg:x3; val_offset:3726*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3726*FLEN/8, x4, x1, x2)

inst_1243:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xa318f9e6bb000 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x19116e58d042d and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xcc22f39cfc7e2 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fea318f9e6bb000; op2val:0xbff19116e58d042d;
op3val:0x3fecc22f39cfc7e2; valaddr_reg:x3; val_offset:3729*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3729*FLEN/8, x4, x1, x2)

inst_1244:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xa318f9e6bb000 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x19116e58d042d and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xcc22f39cfc7e2 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fea318f9e6bb000; op2val:0xbff19116e58d042d;
op3val:0x3fecc22f39cfc7e2; valaddr_reg:x3; val_offset:3732*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3732*FLEN/8, x4, x1, x2)

inst_1245:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xa4f7a7ea66086 and fs2 == 1 and fe2 == 0x3fa and fm2 == 0x2c364d8eb2613 and fs3 == 0 and fe3 == 0x3f9 and fm3 == 0xedab848d3f380 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fea4f7a7ea66086; op2val:0xbfa2c364d8eb2613;
op3val:0x3f9edab848d3f380; valaddr_reg:x3; val_offset:3735*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3735*FLEN/8, x4, x1, x2)

inst_1246:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xa4f7a7ea66086 and fs2 == 1 and fe2 == 0x3fa and fm2 == 0x2c364d8eb2613 and fs3 == 0 and fe3 == 0x3f9 and fm3 == 0xedab848d3f380 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fea4f7a7ea66086; op2val:0xbfa2c364d8eb2613;
op3val:0x3f9edab848d3f380; valaddr_reg:x3; val_offset:3738*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3738*FLEN/8, x4, x1, x2)

inst_1247:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xa4f7a7ea66086 and fs2 == 1 and fe2 == 0x3fa and fm2 == 0x2c364d8eb2613 and fs3 == 0 and fe3 == 0x3f9 and fm3 == 0xedab848d3f380 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fea4f7a7ea66086; op2val:0xbfa2c364d8eb2613;
op3val:0x3f9edab848d3f380; valaddr_reg:x3; val_offset:3741*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3741*FLEN/8, x4, x1, x2)

inst_1248:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xa4f7a7ea66086 and fs2 == 1 and fe2 == 0x3fa and fm2 == 0x2c364d8eb2613 and fs3 == 0 and fe3 == 0x3f9 and fm3 == 0xedab848d3f380 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fea4f7a7ea66086; op2val:0xbfa2c364d8eb2613;
op3val:0x3f9edab848d3f380; valaddr_reg:x3; val_offset:3744*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3744*FLEN/8, x4, x1, x2)

inst_1249:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xa4f7a7ea66086 and fs2 == 1 and fe2 == 0x3fa and fm2 == 0x2c364d8eb2613 and fs3 == 0 and fe3 == 0x3f9 and fm3 == 0xedab848d3f380 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fea4f7a7ea66086; op2val:0xbfa2c364d8eb2613;
op3val:0x3f9edab848d3f380; valaddr_reg:x3; val_offset:3747*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3747*FLEN/8, x4, x1, x2)

inst_1250:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xa589aeaa6f442 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x37ad4765e7f65 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x009bcb6689888 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fea589aeaa6f442; op2val:0xbfd37ad4765e7f65;
op3val:0x3fd009bcb6689888; valaddr_reg:x3; val_offset:3750*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3750*FLEN/8, x4, x1, x2)

inst_1251:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xa589aeaa6f442 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x37ad4765e7f65 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x009bcb6689888 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fea589aeaa6f442; op2val:0xbfd37ad4765e7f65;
op3val:0x3fd009bcb6689888; valaddr_reg:x3; val_offset:3753*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3753*FLEN/8, x4, x1, x2)

inst_1252:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xa589aeaa6f442 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x37ad4765e7f65 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x009bcb6689888 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fea589aeaa6f442; op2val:0xbfd37ad4765e7f65;
op3val:0x3fd009bcb6689888; valaddr_reg:x3; val_offset:3756*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3756*FLEN/8, x4, x1, x2)

inst_1253:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xa589aeaa6f442 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x37ad4765e7f65 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x009bcb6689888 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fea589aeaa6f442; op2val:0xbfd37ad4765e7f65;
op3val:0x3fd009bcb6689888; valaddr_reg:x3; val_offset:3759*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3759*FLEN/8, x4, x1, x2)

inst_1254:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xa589aeaa6f442 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x37ad4765e7f65 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x009bcb6689888 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fea589aeaa6f442; op2val:0xbfd37ad4765e7f65;
op3val:0x3fd009bcb6689888; valaddr_reg:x3; val_offset:3762*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3762*FLEN/8, x4, x1, x2)

inst_1255:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xa8e12ddb93718 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x5c38abfdca6f9 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x20f81486124eb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fea8e12ddb93718; op2val:0xbfe5c38abfdca6f9;
op3val:0x3fe20f81486124eb; valaddr_reg:x3; val_offset:3765*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3765*FLEN/8, x4, x1, x2)

inst_1256:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xa8e12ddb93718 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x5c38abfdca6f9 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x20f81486124eb and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fea8e12ddb93718; op2val:0xbfe5c38abfdca6f9;
op3val:0x3fe20f81486124eb; valaddr_reg:x3; val_offset:3768*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3768*FLEN/8, x4, x1, x2)

inst_1257:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xa8e12ddb93718 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x5c38abfdca6f9 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x20f81486124eb and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fea8e12ddb93718; op2val:0xbfe5c38abfdca6f9;
op3val:0x3fe20f81486124eb; valaddr_reg:x3; val_offset:3771*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3771*FLEN/8, x4, x1, x2)

inst_1258:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xa8e12ddb93718 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x5c38abfdca6f9 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x20f81486124eb and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fea8e12ddb93718; op2val:0xbfe5c38abfdca6f9;
op3val:0x3fe20f81486124eb; valaddr_reg:x3; val_offset:3774*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3774*FLEN/8, x4, x1, x2)

inst_1259:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xa8e12ddb93718 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x5c38abfdca6f9 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x20f81486124eb and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fea8e12ddb93718; op2val:0xbfe5c38abfdca6f9;
op3val:0x3fe20f81486124eb; valaddr_reg:x3; val_offset:3777*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3777*FLEN/8, x4, x1, x2)

inst_1260:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xad352edc767de and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xd03701e395c70 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x85264f43b74b5 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fead352edc767de; op2val:0xbfed03701e395c70;
op3val:0x3fe85264f43b74b5; valaddr_reg:x3; val_offset:3780*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3780*FLEN/8, x4, x1, x2)

inst_1261:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xad352edc767de and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xd03701e395c70 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x85264f43b74b5 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fead352edc767de; op2val:0xbfed03701e395c70;
op3val:0x3fe85264f43b74b5; valaddr_reg:x3; val_offset:3783*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3783*FLEN/8, x4, x1, x2)

inst_1262:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xad352edc767de and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xd03701e395c70 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x85264f43b74b5 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fead352edc767de; op2val:0xbfed03701e395c70;
op3val:0x3fe85264f43b74b5; valaddr_reg:x3; val_offset:3786*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3786*FLEN/8, x4, x1, x2)

inst_1263:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xad352edc767de and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xd03701e395c70 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x85264f43b74b5 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fead352edc767de; op2val:0xbfed03701e395c70;
op3val:0x3fe85264f43b74b5; valaddr_reg:x3; val_offset:3789*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3789*FLEN/8, x4, x1, x2)

inst_1264:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xad352edc767de and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xd03701e395c70 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x85264f43b74b5 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fead352edc767de; op2val:0xbfed03701e395c70;
op3val:0x3fe85264f43b74b5; valaddr_reg:x3; val_offset:3792*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3792*FLEN/8, x4, x1, x2)

inst_1265:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xae36d875f2552 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xc60175cbd4c41 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x7d7bdc06d019b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feae36d875f2552; op2val:0xbfec60175cbd4c41;
op3val:0x3fe7d7bdc06d019b; valaddr_reg:x3; val_offset:3795*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3795*FLEN/8, x4, x1, x2)

inst_1266:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xae36d875f2552 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xc60175cbd4c41 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x7d7bdc06d019b and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feae36d875f2552; op2val:0xbfec60175cbd4c41;
op3val:0x3fe7d7bdc06d019b; valaddr_reg:x3; val_offset:3798*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3798*FLEN/8, x4, x1, x2)

inst_1267:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xae36d875f2552 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xc60175cbd4c41 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x7d7bdc06d019b and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feae36d875f2552; op2val:0xbfec60175cbd4c41;
op3val:0x3fe7d7bdc06d019b; valaddr_reg:x3; val_offset:3801*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3801*FLEN/8, x4, x1, x2)

inst_1268:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xae36d875f2552 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xc60175cbd4c41 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x7d7bdc06d019b and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feae36d875f2552; op2val:0xbfec60175cbd4c41;
op3val:0x3fe7d7bdc06d019b; valaddr_reg:x3; val_offset:3804*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3804*FLEN/8, x4, x1, x2)

inst_1269:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xae36d875f2552 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xc60175cbd4c41 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x7d7bdc06d019b and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feae36d875f2552; op2val:0xbfec60175cbd4c41;
op3val:0x3fe7d7bdc06d019b; valaddr_reg:x3; val_offset:3807*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3807*FLEN/8, x4, x1, x2)

inst_1270:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xaefcaa82456e2 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x35cca77dccc04 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x04c7c290dd764 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feaefcaa82456e2; op2val:0xbfe35cca77dccc04;
op3val:0x3fe04c7c290dd764; valaddr_reg:x3; val_offset:3810*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3810*FLEN/8, x4, x1, x2)

inst_1271:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xaefcaa82456e2 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x35cca77dccc04 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x04c7c290dd764 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feaefcaa82456e2; op2val:0xbfe35cca77dccc04;
op3val:0x3fe04c7c290dd764; valaddr_reg:x3; val_offset:3813*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3813*FLEN/8, x4, x1, x2)

inst_1272:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xaefcaa82456e2 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x35cca77dccc04 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x04c7c290dd764 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feaefcaa82456e2; op2val:0xbfe35cca77dccc04;
op3val:0x3fe04c7c290dd764; valaddr_reg:x3; val_offset:3816*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3816*FLEN/8, x4, x1, x2)

inst_1273:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xaefcaa82456e2 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x35cca77dccc04 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x04c7c290dd764 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feaefcaa82456e2; op2val:0xbfe35cca77dccc04;
op3val:0x3fe04c7c290dd764; valaddr_reg:x3; val_offset:3819*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3819*FLEN/8, x4, x1, x2)

inst_1274:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xaefcaa82456e2 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x35cca77dccc04 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x04c7c290dd764 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feaefcaa82456e2; op2val:0xbfe35cca77dccc04;
op3val:0x3fe04c7c290dd764; valaddr_reg:x3; val_offset:3822*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3822*FLEN/8, x4, x1, x2)

inst_1275:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xb45888fb3aa33 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x008dfe623272a and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xb54a8f55e4ccd and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feb45888fb3aa33; op2val:0xbff008dfe623272a;
op3val:0x3feb54a8f55e4ccd; valaddr_reg:x3; val_offset:3825*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3825*FLEN/8, x4, x1, x2)

inst_1276:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xb45888fb3aa33 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x008dfe623272a and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xb54a8f55e4ccd and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feb45888fb3aa33; op2val:0xbff008dfe623272a;
op3val:0x3feb54a8f55e4ccd; valaddr_reg:x3; val_offset:3828*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3828*FLEN/8, x4, x1, x2)

inst_1277:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xb45888fb3aa33 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x008dfe623272a and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xb54a8f55e4ccd and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feb45888fb3aa33; op2val:0xbff008dfe623272a;
op3val:0x3feb54a8f55e4ccd; valaddr_reg:x3; val_offset:3831*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3831*FLEN/8, x4, x1, x2)

inst_1278:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xb45888fb3aa33 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x008dfe623272a and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xb54a8f55e4ccd and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feb45888fb3aa33; op2val:0xbff008dfe623272a;
op3val:0x3feb54a8f55e4ccd; valaddr_reg:x3; val_offset:3834*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3834*FLEN/8, x4, x1, x2)

inst_1279:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xb45888fb3aa33 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x008dfe623272a and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xb54a8f55e4ccd and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feb45888fb3aa33; op2val:0xbff008dfe623272a;
op3val:0x3feb54a8f55e4ccd; valaddr_reg:x3; val_offset:3837*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3837*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_11)

inst_1280:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xb531e01fbabad and fs2 == 1 and fe2 == 0x3fc and fm2 == 0xa7f55d9c83f3e and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x6a0438f72b08c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feb531e01fbabad; op2val:0xbfca7f55d9c83f3e;
op3val:0x3fc6a0438f72b08c; valaddr_reg:x3; val_offset:3840*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3840*FLEN/8, x4, x1, x2)

inst_1281:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xb531e01fbabad and fs2 == 1 and fe2 == 0x3fc and fm2 == 0xa7f55d9c83f3e and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x6a0438f72b08c and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feb531e01fbabad; op2val:0xbfca7f55d9c83f3e;
op3val:0x3fc6a0438f72b08c; valaddr_reg:x3; val_offset:3843*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3843*FLEN/8, x4, x1, x2)

inst_1282:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xb531e01fbabad and fs2 == 1 and fe2 == 0x3fc and fm2 == 0xa7f55d9c83f3e and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x6a0438f72b08c and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feb531e01fbabad; op2val:0xbfca7f55d9c83f3e;
op3val:0x3fc6a0438f72b08c; valaddr_reg:x3; val_offset:3846*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3846*FLEN/8, x4, x1, x2)

inst_1283:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xb531e01fbabad and fs2 == 1 and fe2 == 0x3fc and fm2 == 0xa7f55d9c83f3e and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x6a0438f72b08c and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feb531e01fbabad; op2val:0xbfca7f55d9c83f3e;
op3val:0x3fc6a0438f72b08c; valaddr_reg:x3; val_offset:3849*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3849*FLEN/8, x4, x1, x2)

inst_1284:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xb531e01fbabad and fs2 == 1 and fe2 == 0x3fc and fm2 == 0xa7f55d9c83f3e and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x6a0438f72b08c and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feb531e01fbabad; op2val:0xbfca7f55d9c83f3e;
op3val:0x3fc6a0438f72b08c; valaddr_reg:x3; val_offset:3852*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3852*FLEN/8, x4, x1, x2)

inst_1285:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xb739b0d92b8e8 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x1734c8bcb71ec and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xdf0a6fdd754bb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feb739b0d92b8e8; op2val:0xbff1734c8bcb71ec;
op3val:0x3fedf0a6fdd754bb; valaddr_reg:x3; val_offset:3855*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3855*FLEN/8, x4, x1, x2)

inst_1286:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xb739b0d92b8e8 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x1734c8bcb71ec and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xdf0a6fdd754bb and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feb739b0d92b8e8; op2val:0xbff1734c8bcb71ec;
op3val:0x3fedf0a6fdd754bb; valaddr_reg:x3; val_offset:3858*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3858*FLEN/8, x4, x1, x2)

inst_1287:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xb739b0d92b8e8 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x1734c8bcb71ec and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xdf0a6fdd754bb and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feb739b0d92b8e8; op2val:0xbff1734c8bcb71ec;
op3val:0x3fedf0a6fdd754bb; valaddr_reg:x3; val_offset:3861*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3861*FLEN/8, x4, x1, x2)

inst_1288:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xb739b0d92b8e8 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x1734c8bcb71ec and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xdf0a6fdd754bb and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feb739b0d92b8e8; op2val:0xbff1734c8bcb71ec;
op3val:0x3fedf0a6fdd754bb; valaddr_reg:x3; val_offset:3864*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3864*FLEN/8, x4, x1, x2)

inst_1289:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xb739b0d92b8e8 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x1734c8bcb71ec and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xdf0a6fdd754bb and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feb739b0d92b8e8; op2val:0xbff1734c8bcb71ec;
op3val:0x3fedf0a6fdd754bb; valaddr_reg:x3; val_offset:3867*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3867*FLEN/8, x4, x1, x2)

inst_1290:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xb7f69f448e82d and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x59ad0f2649582 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x290a642b22b00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feb7f69f448e82d; op2val:0xbfd59ad0f2649582;
op3val:0x3fd290a642b22b00; valaddr_reg:x3; val_offset:3870*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3870*FLEN/8, x4, x1, x2)

inst_1291:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xb7f69f448e82d and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x59ad0f2649582 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x290a642b22b00 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feb7f69f448e82d; op2val:0xbfd59ad0f2649582;
op3val:0x3fd290a642b22b00; valaddr_reg:x3; val_offset:3873*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3873*FLEN/8, x4, x1, x2)

inst_1292:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xb7f69f448e82d and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x59ad0f2649582 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x290a642b22b00 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feb7f69f448e82d; op2val:0xbfd59ad0f2649582;
op3val:0x3fd290a642b22b00; valaddr_reg:x3; val_offset:3876*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3876*FLEN/8, x4, x1, x2)

inst_1293:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xb7f69f448e82d and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x59ad0f2649582 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x290a642b22b00 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feb7f69f448e82d; op2val:0xbfd59ad0f2649582;
op3val:0x3fd290a642b22b00; valaddr_reg:x3; val_offset:3879*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3879*FLEN/8, x4, x1, x2)

inst_1294:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xb7f69f448e82d and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x59ad0f2649582 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x290a642b22b00 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feb7f69f448e82d; op2val:0xbfd59ad0f2649582;
op3val:0x3fd290a642b22b00; valaddr_reg:x3; val_offset:3882*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3882*FLEN/8, x4, x1, x2)

inst_1295:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xb9f4acbe96179 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xce50739dab394 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x8f1139e785572 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feb9f4acbe96179; op2val:0xbfdce50739dab394;
op3val:0x3fd8f1139e785572; valaddr_reg:x3; val_offset:3885*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3885*FLEN/8, x4, x1, x2)

inst_1296:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xb9f4acbe96179 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xce50739dab394 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x8f1139e785572 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feb9f4acbe96179; op2val:0xbfdce50739dab394;
op3val:0x3fd8f1139e785572; valaddr_reg:x3; val_offset:3888*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3888*FLEN/8, x4, x1, x2)

inst_1297:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xb9f4acbe96179 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xce50739dab394 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x8f1139e785572 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feb9f4acbe96179; op2val:0xbfdce50739dab394;
op3val:0x3fd8f1139e785572; valaddr_reg:x3; val_offset:3891*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3891*FLEN/8, x4, x1, x2)

inst_1298:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xb9f4acbe96179 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xce50739dab394 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x8f1139e785572 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feb9f4acbe96179; op2val:0xbfdce50739dab394;
op3val:0x3fd8f1139e785572; valaddr_reg:x3; val_offset:3894*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3894*FLEN/8, x4, x1, x2)

inst_1299:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xb9f4acbe96179 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xce50739dab394 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x8f1139e785572 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feb9f4acbe96179; op2val:0xbfdce50739dab394;
op3val:0x3fd8f1139e785572; valaddr_reg:x3; val_offset:3897*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3897*FLEN/8, x4, x1, x2)

inst_1300:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xbae475f5de6ac and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x1705df556d057 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0xe2b92566106cc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3febae475f5de6ac; op2val:0xbfd1705df556d057;
op3val:0x3fce2b92566106cc; valaddr_reg:x3; val_offset:3900*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3900*FLEN/8, x4, x1, x2)

inst_1301:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xbae475f5de6ac and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x1705df556d057 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0xe2b92566106cc and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3febae475f5de6ac; op2val:0xbfd1705df556d057;
op3val:0x3fce2b92566106cc; valaddr_reg:x3; val_offset:3903*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3903*FLEN/8, x4, x1, x2)

inst_1302:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xbae475f5de6ac and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x1705df556d057 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0xe2b92566106cc and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3febae475f5de6ac; op2val:0xbfd1705df556d057;
op3val:0x3fce2b92566106cc; valaddr_reg:x3; val_offset:3906*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3906*FLEN/8, x4, x1, x2)

inst_1303:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xbae475f5de6ac and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x1705df556d057 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0xe2b92566106cc and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3febae475f5de6ac; op2val:0xbfd1705df556d057;
op3val:0x3fce2b92566106cc; valaddr_reg:x3; val_offset:3909*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3909*FLEN/8, x4, x1, x2)

inst_1304:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xbae475f5de6ac and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x1705df556d057 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0xe2b92566106cc and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3febae475f5de6ac; op2val:0xbfd1705df556d057;
op3val:0x3fce2b92566106cc; valaddr_reg:x3; val_offset:3912*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3912*FLEN/8, x4, x1, x2)

inst_1305:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xbc14c2b193245 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x8d5ee6c8f0e48 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x58a868f20bb37 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3febc14c2b193245; op2val:0xbfe8d5ee6c8f0e48;
op3val:0x3fe58a868f20bb37; valaddr_reg:x3; val_offset:3915*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3915*FLEN/8, x4, x1, x2)

inst_1306:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xbc14c2b193245 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x8d5ee6c8f0e48 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x58a868f20bb37 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3febc14c2b193245; op2val:0xbfe8d5ee6c8f0e48;
op3val:0x3fe58a868f20bb37; valaddr_reg:x3; val_offset:3918*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3918*FLEN/8, x4, x1, x2)

inst_1307:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xbc14c2b193245 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x8d5ee6c8f0e48 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x58a868f20bb37 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3febc14c2b193245; op2val:0xbfe8d5ee6c8f0e48;
op3val:0x3fe58a868f20bb37; valaddr_reg:x3; val_offset:3921*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3921*FLEN/8, x4, x1, x2)

inst_1308:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xbc14c2b193245 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x8d5ee6c8f0e48 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x58a868f20bb37 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3febc14c2b193245; op2val:0xbfe8d5ee6c8f0e48;
op3val:0x3fe58a868f20bb37; valaddr_reg:x3; val_offset:3924*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3924*FLEN/8, x4, x1, x2)

inst_1309:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xbc14c2b193245 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x8d5ee6c8f0e48 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x58a868f20bb37 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3febc14c2b193245; op2val:0xbfe8d5ee6c8f0e48;
op3val:0x3fe58a868f20bb37; valaddr_reg:x3; val_offset:3927*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3927*FLEN/8, x4, x1, x2)

inst_1310:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xbec4f6cedc2e4 and fs2 == 1 and fe2 == 0x3fa and fm2 == 0x4d9e43fe06d0c and fs3 == 0 and fe3 == 0x3fa and fm3 == 0x231d34a223ff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3febec4f6cedc2e4; op2val:0xbfa4d9e43fe06d0c;
op3val:0x3fa231d34a223ff0; valaddr_reg:x3; val_offset:3930*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3930*FLEN/8, x4, x1, x2)

inst_1311:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xbec4f6cedc2e4 and fs2 == 1 and fe2 == 0x3fa and fm2 == 0x4d9e43fe06d0c and fs3 == 0 and fe3 == 0x3fa and fm3 == 0x231d34a223ff0 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3febec4f6cedc2e4; op2val:0xbfa4d9e43fe06d0c;
op3val:0x3fa231d34a223ff0; valaddr_reg:x3; val_offset:3933*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3933*FLEN/8, x4, x1, x2)

inst_1312:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xbec4f6cedc2e4 and fs2 == 1 and fe2 == 0x3fa and fm2 == 0x4d9e43fe06d0c and fs3 == 0 and fe3 == 0x3fa and fm3 == 0x231d34a223ff0 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3febec4f6cedc2e4; op2val:0xbfa4d9e43fe06d0c;
op3val:0x3fa231d34a223ff0; valaddr_reg:x3; val_offset:3936*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3936*FLEN/8, x4, x1, x2)

inst_1313:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xbec4f6cedc2e4 and fs2 == 1 and fe2 == 0x3fa and fm2 == 0x4d9e43fe06d0c and fs3 == 0 and fe3 == 0x3fa and fm3 == 0x231d34a223ff0 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3febec4f6cedc2e4; op2val:0xbfa4d9e43fe06d0c;
op3val:0x3fa231d34a223ff0; valaddr_reg:x3; val_offset:3939*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3939*FLEN/8, x4, x1, x2)

inst_1314:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xbec4f6cedc2e4 and fs2 == 1 and fe2 == 0x3fa and fm2 == 0x4d9e43fe06d0c and fs3 == 0 and fe3 == 0x3fa and fm3 == 0x231d34a223ff0 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3febec4f6cedc2e4; op2val:0xbfa4d9e43fe06d0c;
op3val:0x3fa231d34a223ff0; valaddr_reg:x3; val_offset:3942*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3942*FLEN/8, x4, x1, x2)

inst_1315:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xbf518e73a3fa2 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x59f98adede999 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x2e4478fa6577c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3febf518e73a3fa2; op2val:0xbfd59f98adede999;
op3val:0x3fd2e4478fa6577c; valaddr_reg:x3; val_offset:3945*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3945*FLEN/8, x4, x1, x2)

inst_1316:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xbf518e73a3fa2 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x59f98adede999 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x2e4478fa6577c and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3febf518e73a3fa2; op2val:0xbfd59f98adede999;
op3val:0x3fd2e4478fa6577c; valaddr_reg:x3; val_offset:3948*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3948*FLEN/8, x4, x1, x2)

inst_1317:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xbf518e73a3fa2 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x59f98adede999 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x2e4478fa6577c and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3febf518e73a3fa2; op2val:0xbfd59f98adede999;
op3val:0x3fd2e4478fa6577c; valaddr_reg:x3; val_offset:3951*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3951*FLEN/8, x4, x1, x2)

inst_1318:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xbf518e73a3fa2 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x59f98adede999 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x2e4478fa6577c and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3febf518e73a3fa2; op2val:0xbfd59f98adede999;
op3val:0x3fd2e4478fa6577c; valaddr_reg:x3; val_offset:3954*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3954*FLEN/8, x4, x1, x2)

inst_1319:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xbf518e73a3fa2 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x59f98adede999 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x2e4478fa6577c and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3febf518e73a3fa2; op2val:0xbfd59f98adede999;
op3val:0x3fd2e4478fa6577c; valaddr_reg:x3; val_offset:3957*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3957*FLEN/8, x4, x1, x2)

inst_1320:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc09d97f45a199 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xdca98c2136b24 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xa1a71212058d7 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fec09d97f45a199; op2val:0xbfedca98c2136b24;
op3val:0x3fea1a71212058d7; valaddr_reg:x3; val_offset:3960*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3960*FLEN/8, x4, x1, x2)

inst_1321:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc09d97f45a199 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xdca98c2136b24 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xa1a71212058d7 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fec09d97f45a199; op2val:0xbfedca98c2136b24;
op3val:0x3fea1a71212058d7; valaddr_reg:x3; val_offset:3963*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3963*FLEN/8, x4, x1, x2)

inst_1322:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc09d97f45a199 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xdca98c2136b24 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xa1a71212058d7 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fec09d97f45a199; op2val:0xbfedca98c2136b24;
op3val:0x3fea1a71212058d7; valaddr_reg:x3; val_offset:3966*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3966*FLEN/8, x4, x1, x2)

inst_1323:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc09d97f45a199 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xdca98c2136b24 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xa1a71212058d7 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fec09d97f45a199; op2val:0xbfedca98c2136b24;
op3val:0x3fea1a71212058d7; valaddr_reg:x3; val_offset:3969*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3969*FLEN/8, x4, x1, x2)

inst_1324:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc09d97f45a199 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xdca98c2136b24 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xa1a71212058d7 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fec09d97f45a199; op2val:0xbfedca98c2136b24;
op3val:0x3fea1a71212058d7; valaddr_reg:x3; val_offset:3972*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3972*FLEN/8, x4, x1, x2)

inst_1325:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc18654790efe2 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xe8fe6cc1bb109 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xad5369a3b78a2 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fec18654790efe2; op2val:0xbfde8fe6cc1bb109;
op3val:0x3fdad5369a3b78a2; valaddr_reg:x3; val_offset:3975*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3975*FLEN/8, x4, x1, x2)

inst_1326:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc18654790efe2 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xe8fe6cc1bb109 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xad5369a3b78a2 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fec18654790efe2; op2val:0xbfde8fe6cc1bb109;
op3val:0x3fdad5369a3b78a2; valaddr_reg:x3; val_offset:3978*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3978*FLEN/8, x4, x1, x2)

inst_1327:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc18654790efe2 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xe8fe6cc1bb109 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xad5369a3b78a2 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fec18654790efe2; op2val:0xbfde8fe6cc1bb109;
op3val:0x3fdad5369a3b78a2; valaddr_reg:x3; val_offset:3981*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3981*FLEN/8, x4, x1, x2)

inst_1328:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc18654790efe2 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xe8fe6cc1bb109 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xad5369a3b78a2 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fec18654790efe2; op2val:0xbfde8fe6cc1bb109;
op3val:0x3fdad5369a3b78a2; valaddr_reg:x3; val_offset:3984*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3984*FLEN/8, x4, x1, x2)

inst_1329:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc18654790efe2 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xe8fe6cc1bb109 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xad5369a3b78a2 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fec18654790efe2; op2val:0xbfde8fe6cc1bb109;
op3val:0x3fdad5369a3b78a2; valaddr_reg:x3; val_offset:3987*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3987*FLEN/8, x4, x1, x2)

inst_1330:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc3535f7870e95 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x648a01acf8bb5 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x3a499f549cebf and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fec3535f7870e95; op2val:0xbfe648a01acf8bb5;
op3val:0x3fe3a499f549cebf; valaddr_reg:x3; val_offset:3990*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3990*FLEN/8, x4, x1, x2)

inst_1331:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc3535f7870e95 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x648a01acf8bb5 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x3a499f549cebf and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fec3535f7870e95; op2val:0xbfe648a01acf8bb5;
op3val:0x3fe3a499f549cebf; valaddr_reg:x3; val_offset:3993*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3993*FLEN/8, x4, x1, x2)

inst_1332:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc3535f7870e95 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x648a01acf8bb5 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x3a499f549cebf and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fec3535f7870e95; op2val:0xbfe648a01acf8bb5;
op3val:0x3fe3a499f549cebf; valaddr_reg:x3; val_offset:3996*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3996*FLEN/8, x4, x1, x2)

inst_1333:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc3535f7870e95 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x648a01acf8bb5 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x3a499f549cebf and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fec3535f7870e95; op2val:0xbfe648a01acf8bb5;
op3val:0x3fe3a499f549cebf; valaddr_reg:x3; val_offset:3999*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3999*FLEN/8, x4, x1, x2)

inst_1334:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc3535f7870e95 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x648a01acf8bb5 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x3a499f549cebf and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fec3535f7870e95; op2val:0xbfe648a01acf8bb5;
op3val:0x3fe3a499f549cebf; valaddr_reg:x3; val_offset:4002*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 4002*FLEN/8, x4, x1, x2)

inst_1335:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc3c2d3db48632 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0x63ac337c64dcb and fs3 == 0 and fe3 == 0x3fb and fm3 == 0x39d386c560a38 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fec3c2d3db48632; op2val:0xbfb63ac337c64dcb;
op3val:0x3fb39d386c560a38; valaddr_reg:x3; val_offset:4005*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 4005*FLEN/8, x4, x1, x2)

inst_1336:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc3c2d3db48632 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0x63ac337c64dcb and fs3 == 0 and fe3 == 0x3fb and fm3 == 0x39d386c560a38 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fec3c2d3db48632; op2val:0xbfb63ac337c64dcb;
op3val:0x3fb39d386c560a38; valaddr_reg:x3; val_offset:4008*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 4008*FLEN/8, x4, x1, x2)

inst_1337:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc3c2d3db48632 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0x63ac337c64dcb and fs3 == 0 and fe3 == 0x3fb and fm3 == 0x39d386c560a38 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fec3c2d3db48632; op2val:0xbfb63ac337c64dcb;
op3val:0x3fb39d386c560a38; valaddr_reg:x3; val_offset:4011*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 4011*FLEN/8, x4, x1, x2)

inst_1338:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc3c2d3db48632 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0x63ac337c64dcb and fs3 == 0 and fe3 == 0x3fb and fm3 == 0x39d386c560a38 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fec3c2d3db48632; op2val:0xbfb63ac337c64dcb;
op3val:0x3fb39d386c560a38; valaddr_reg:x3; val_offset:4014*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 4014*FLEN/8, x4, x1, x2)

inst_1339:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc3c2d3db48632 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0x63ac337c64dcb and fs3 == 0 and fe3 == 0x3fb and fm3 == 0x39d386c560a38 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fec3c2d3db48632; op2val:0xbfb63ac337c64dcb;
op3val:0x3fb39d386c560a38; valaddr_reg:x3; val_offset:4017*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 4017*FLEN/8, x4, x1, x2)

inst_1340:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc41301d8074e2 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x8bdb85c7ce93a and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x5d867e2ccf4dc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fec41301d8074e2; op2val:0xbfc8bdb85c7ce93a;
op3val:0x3fc5d867e2ccf4dc; valaddr_reg:x3; val_offset:4020*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 4020*FLEN/8, x4, x1, x2)

inst_1341:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc41301d8074e2 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x8bdb85c7ce93a and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x5d867e2ccf4dc and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fec41301d8074e2; op2val:0xbfc8bdb85c7ce93a;
op3val:0x3fc5d867e2ccf4dc; valaddr_reg:x3; val_offset:4023*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 4023*FLEN/8, x4, x1, x2)

inst_1342:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc41301d8074e2 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x8bdb85c7ce93a and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x5d867e2ccf4dc and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fec41301d8074e2; op2val:0xbfc8bdb85c7ce93a;
op3val:0x3fc5d867e2ccf4dc; valaddr_reg:x3; val_offset:4026*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 4026*FLEN/8, x4, x1, x2)

inst_1343:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc41301d8074e2 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x8bdb85c7ce93a and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x5d867e2ccf4dc and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fec41301d8074e2; op2val:0xbfc8bdb85c7ce93a;
op3val:0x3fc5d867e2ccf4dc; valaddr_reg:x3; val_offset:4029*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 4029*FLEN/8, x4, x1, x2)

inst_1344:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc41301d8074e2 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x8bdb85c7ce93a and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x5d867e2ccf4dc and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fec41301d8074e2; op2val:0xbfc8bdb85c7ce93a;
op3val:0x3fc5d867e2ccf4dc; valaddr_reg:x3; val_offset:4032*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 4032*FLEN/8, x4, x1, x2)

inst_1345:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc4c6ac7f1b54e and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x16e46b7f2ebc5 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xed43be63a4340 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fec4c6ac7f1b54e; op2val:0xbff16e46b7f2ebc5;
op3val:0x3feed43be63a4340; valaddr_reg:x3; val_offset:4035*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 4035*FLEN/8, x4, x1, x2)

inst_1346:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc4c6ac7f1b54e and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x16e46b7f2ebc5 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xed43be63a4340 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fec4c6ac7f1b54e; op2val:0xbff16e46b7f2ebc5;
op3val:0x3feed43be63a4340; valaddr_reg:x3; val_offset:4038*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 4038*FLEN/8, x4, x1, x2)

inst_1347:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc4c6ac7f1b54e and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x16e46b7f2ebc5 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xed43be63a4340 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fec4c6ac7f1b54e; op2val:0xbff16e46b7f2ebc5;
op3val:0x3feed43be63a4340; valaddr_reg:x3; val_offset:4041*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 4041*FLEN/8, x4, x1, x2)

inst_1348:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc4c6ac7f1b54e and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x16e46b7f2ebc5 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xed43be63a4340 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fec4c6ac7f1b54e; op2val:0xbff16e46b7f2ebc5;
op3val:0x3feed43be63a4340; valaddr_reg:x3; val_offset:4044*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 4044*FLEN/8, x4, x1, x2)

inst_1349:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc4c6ac7f1b54e and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x16e46b7f2ebc5 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xed43be63a4340 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fec4c6ac7f1b54e; op2val:0xbff16e46b7f2ebc5;
op3val:0x3feed43be63a4340; valaddr_reg:x3; val_offset:4047*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 4047*FLEN/8, x4, x1, x2)

inst_1350:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc82fd9c37c99d and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x10b3e3c84e5e7 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xe5f366bc5734f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fec82fd9c37c99d; op2val:0xbff10b3e3c84e5e7;
op3val:0x3fee5f366bc5734f; valaddr_reg:x3; val_offset:4050*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 4050*FLEN/8, x4, x1, x2)

inst_1351:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc82fd9c37c99d and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x10b3e3c84e5e7 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xe5f366bc5734f and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fec82fd9c37c99d; op2val:0xbff10b3e3c84e5e7;
op3val:0x3fee5f366bc5734f; valaddr_reg:x3; val_offset:4053*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 4053*FLEN/8, x4, x1, x2)

inst_1352:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc82fd9c37c99d and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x10b3e3c84e5e7 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xe5f366bc5734f and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fec82fd9c37c99d; op2val:0xbff10b3e3c84e5e7;
op3val:0x3fee5f366bc5734f; valaddr_reg:x3; val_offset:4056*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 4056*FLEN/8, x4, x1, x2)

inst_1353:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc82fd9c37c99d and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x10b3e3c84e5e7 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xe5f366bc5734f and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fec82fd9c37c99d; op2val:0xbff10b3e3c84e5e7;
op3val:0x3fee5f366bc5734f; valaddr_reg:x3; val_offset:4059*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 4059*FLEN/8, x4, x1, x2)

inst_1354:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc82fd9c37c99d and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x10b3e3c84e5e7 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xe5f366bc5734f and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fec82fd9c37c99d; op2val:0xbff10b3e3c84e5e7;
op3val:0x3fee5f366bc5734f; valaddr_reg:x3; val_offset:4062*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 4062*FLEN/8, x4, x1, x2)

inst_1355:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc975c38f16094 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x1284e46fb8dfc and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xea8d843c81f50 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fec975c38f16094; op2val:0xbfe1284e46fb8dfc;
op3val:0x3fdea8d843c81f50; valaddr_reg:x3; val_offset:4065*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 4065*FLEN/8, x4, x1, x2)

inst_1356:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc975c38f16094 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x1284e46fb8dfc and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xea8d843c81f50 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fec975c38f16094; op2val:0xbfe1284e46fb8dfc;
op3val:0x3fdea8d843c81f50; valaddr_reg:x3; val_offset:4068*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 4068*FLEN/8, x4, x1, x2)

inst_1357:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc975c38f16094 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x1284e46fb8dfc and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xea8d843c81f50 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fec975c38f16094; op2val:0xbfe1284e46fb8dfc;
op3val:0x3fdea8d843c81f50; valaddr_reg:x3; val_offset:4071*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 4071*FLEN/8, x4, x1, x2)

inst_1358:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc975c38f16094 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x1284e46fb8dfc and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xea8d843c81f50 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fec975c38f16094; op2val:0xbfe1284e46fb8dfc;
op3val:0x3fdea8d843c81f50; valaddr_reg:x3; val_offset:4074*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 4074*FLEN/8, x4, x1, x2)

inst_1359:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc975c38f16094 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x1284e46fb8dfc and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xea8d843c81f50 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fec975c38f16094; op2val:0xbfe1284e46fb8dfc;
op3val:0x3fdea8d843c81f50; valaddr_reg:x3; val_offset:4077*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 4077*FLEN/8, x4, x1, x2)

inst_1360:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc99c56b942f91 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xce1fbb3289681 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x9d086e883066c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fec99c56b942f91; op2val:0xbfece1fbb3289681;
op3val:0x3fe9d086e883066c; valaddr_reg:x3; val_offset:4080*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 4080*FLEN/8, x4, x1, x2)

inst_1361:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc99c56b942f91 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xce1fbb3289681 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x9d086e883066c and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fec99c56b942f91; op2val:0xbfece1fbb3289681;
op3val:0x3fe9d086e883066c; valaddr_reg:x3; val_offset:4083*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 4083*FLEN/8, x4, x1, x2)

inst_1362:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc99c56b942f91 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xce1fbb3289681 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x9d086e883066c and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fec99c56b942f91; op2val:0xbfece1fbb3289681;
op3val:0x3fe9d086e883066c; valaddr_reg:x3; val_offset:4086*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 4086*FLEN/8, x4, x1, x2)

inst_1363:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc99c56b942f91 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xce1fbb3289681 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x9d086e883066c and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fec99c56b942f91; op2val:0xbfece1fbb3289681;
op3val:0x3fe9d086e883066c; valaddr_reg:x3; val_offset:4089*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 4089*FLEN/8, x4, x1, x2)

inst_1364:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc99c56b942f91 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xce1fbb3289681 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x9d086e883066c and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fec99c56b942f91; op2val:0xbfece1fbb3289681;
op3val:0x3fe9d086e883066c; valaddr_reg:x3; val_offset:4092*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 4092*FLEN/8, x4, x1, x2)

inst_1365:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xcc8d2a53c8f5d and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x60941631c6898 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x3d2641dead4b8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fecc8d2a53c8f5d; op2val:0xbfc60941631c6898;
op3val:0x3fc3d2641dead4b8; valaddr_reg:x3; val_offset:4095*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 4095*FLEN/8, x4, x1, x2)

inst_1366:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xcc8d2a53c8f5d and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x60941631c6898 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x3d2641dead4b8 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fecc8d2a53c8f5d; op2val:0xbfc60941631c6898;
op3val:0x3fc3d2641dead4b8; valaddr_reg:x3; val_offset:4098*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 4098*FLEN/8, x4, x1, x2)

inst_1367:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xcc8d2a53c8f5d and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x60941631c6898 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x3d2641dead4b8 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fecc8d2a53c8f5d; op2val:0xbfc60941631c6898;
op3val:0x3fc3d2641dead4b8; valaddr_reg:x3; val_offset:4101*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 4101*FLEN/8, x4, x1, x2)

inst_1368:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xcc8d2a53c8f5d and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x60941631c6898 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x3d2641dead4b8 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fecc8d2a53c8f5d; op2val:0xbfc60941631c6898;
op3val:0x3fc3d2641dead4b8; valaddr_reg:x3; val_offset:4104*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 4104*FLEN/8, x4, x1, x2)

inst_1369:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xcc8d2a53c8f5d and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x60941631c6898 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x3d2641dead4b8 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fecc8d2a53c8f5d; op2val:0xbfc60941631c6898;
op3val:0x3fc3d2641dead4b8; valaddr_reg:x3; val_offset:4107*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 4107*FLEN/8, x4, x1, x2)

inst_1370:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xce05361df6dba and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x5f92e403ec858 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x3d411fd7d5d70 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fece05361df6dba; op2val:0xbfd5f92e403ec858;
op3val:0x3fd3d411fd7d5d70; valaddr_reg:x3; val_offset:4110*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 4110*FLEN/8, x4, x1, x2)

inst_1371:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xce05361df6dba and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x5f92e403ec858 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x3d411fd7d5d70 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fece05361df6dba; op2val:0xbfd5f92e403ec858;
op3val:0x3fd3d411fd7d5d70; valaddr_reg:x3; val_offset:4113*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 4113*FLEN/8, x4, x1, x2)

inst_1372:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xce05361df6dba and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x5f92e403ec858 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x3d411fd7d5d70 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fece05361df6dba; op2val:0xbfd5f92e403ec858;
op3val:0x3fd3d411fd7d5d70; valaddr_reg:x3; val_offset:4116*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 4116*FLEN/8, x4, x1, x2)

inst_1373:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xce05361df6dba and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x5f92e403ec858 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x3d411fd7d5d70 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fece05361df6dba; op2val:0xbfd5f92e403ec858;
op3val:0x3fd3d411fd7d5d70; valaddr_reg:x3; val_offset:4119*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 4119*FLEN/8, x4, x1, x2)

inst_1374:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xce05361df6dba and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x5f92e403ec858 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x3d411fd7d5d70 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fece05361df6dba; op2val:0xbfd5f92e403ec858;
op3val:0x3fd3d411fd7d5d70; valaddr_reg:x3; val_offset:4122*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 4122*FLEN/8, x4, x1, x2)

inst_1375:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xceedb89ef554e and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x14eb92e54c8b2 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xf4c248e612c5a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feceedb89ef554e; op2val:0xbfe14eb92e54c8b2;
op3val:0x3fdf4c248e612c5a; valaddr_reg:x3; val_offset:4125*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 4125*FLEN/8, x4, x1, x2)

inst_1376:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xceedb89ef554e and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x14eb92e54c8b2 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xf4c248e612c5a and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feceedb89ef554e; op2val:0xbfe14eb92e54c8b2;
op3val:0x3fdf4c248e612c5a; valaddr_reg:x3; val_offset:4128*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 4128*FLEN/8, x4, x1, x2)

inst_1377:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xceedb89ef554e and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x14eb92e54c8b2 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xf4c248e612c5a and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feceedb89ef554e; op2val:0xbfe14eb92e54c8b2;
op3val:0x3fdf4c248e612c5a; valaddr_reg:x3; val_offset:4131*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 4131*FLEN/8, x4, x1, x2)

inst_1378:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xceedb89ef554e and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x14eb92e54c8b2 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xf4c248e612c5a and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feceedb89ef554e; op2val:0xbfe14eb92e54c8b2;
op3val:0x3fdf4c248e612c5a; valaddr_reg:x3; val_offset:4134*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 4134*FLEN/8, x4, x1, x2)

inst_1379:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xceedb89ef554e and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x14eb92e54c8b2 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xf4c248e612c5a and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feceedb89ef554e; op2val:0xbfe14eb92e54c8b2;
op3val:0x3fdf4c248e612c5a; valaddr_reg:x3; val_offset:4137*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 4137*FLEN/8, x4, x1, x2)

inst_1380:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xcf4d843dd266d and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x02c9cdcc155dc and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xd45957958debc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fecf4d843dd266d; op2val:0xbff02c9cdcc155dc;
op3val:0x3fed45957958debc; valaddr_reg:x3; val_offset:4140*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 4140*FLEN/8, x4, x1, x2)

inst_1381:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xcf4d843dd266d and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x02c9cdcc155dc and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xd45957958debc and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fecf4d843dd266d; op2val:0xbff02c9cdcc155dc;
op3val:0x3fed45957958debc; valaddr_reg:x3; val_offset:4143*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 4143*FLEN/8, x4, x1, x2)

inst_1382:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xcf4d843dd266d and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x02c9cdcc155dc and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xd45957958debc and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fecf4d843dd266d; op2val:0xbff02c9cdcc155dc;
op3val:0x3fed45957958debc; valaddr_reg:x3; val_offset:4146*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 4146*FLEN/8, x4, x1, x2)

inst_1383:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xcf4d843dd266d and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x02c9cdcc155dc and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xd45957958debc and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fecf4d843dd266d; op2val:0xbff02c9cdcc155dc;
op3val:0x3fed45957958debc; valaddr_reg:x3; val_offset:4149*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 4149*FLEN/8, x4, x1, x2)

inst_1384:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xcf4d843dd266d and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x02c9cdcc155dc and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xd45957958debc and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fecf4d843dd266d; op2val:0xbff02c9cdcc155dc;
op3val:0x3fed45957958debc; valaddr_reg:x3; val_offset:4152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 4152*FLEN/8, x4, x1, x2)

inst_1385:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xd0364e415dbbd and fs2 == 1 and fe2 == 0x3fa and fm2 == 0x231155b99e0c7 and fs3 == 0 and fe3 == 0x3fa and fm3 == 0x07e695010edb0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fed0364e415dbbd; op2val:0xbfa231155b99e0c7;
op3val:0x3fa07e695010edb0; valaddr_reg:x3; val_offset:4155*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 4155*FLEN/8, x4, x1, x2)

inst_1386:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xd0364e415dbbd and fs2 == 1 and fe2 == 0x3fa and fm2 == 0x231155b99e0c7 and fs3 == 0 and fe3 == 0x3fa and fm3 == 0x07e695010edb0 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fed0364e415dbbd; op2val:0xbfa231155b99e0c7;
op3val:0x3fa07e695010edb0; valaddr_reg:x3; val_offset:4158*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 4158*FLEN/8, x4, x1, x2)

inst_1387:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xd0364e415dbbd and fs2 == 1 and fe2 == 0x3fa and fm2 == 0x231155b99e0c7 and fs3 == 0 and fe3 == 0x3fa and fm3 == 0x07e695010edb0 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fed0364e415dbbd; op2val:0xbfa231155b99e0c7;
op3val:0x3fa07e695010edb0; valaddr_reg:x3; val_offset:4161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 4161*FLEN/8, x4, x1, x2)

inst_1388:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xd0364e415dbbd and fs2 == 1 and fe2 == 0x3fa and fm2 == 0x231155b99e0c7 and fs3 == 0 and fe3 == 0x3fa and fm3 == 0x07e695010edb0 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fed0364e415dbbd; op2val:0xbfa231155b99e0c7;
op3val:0x3fa07e695010edb0; valaddr_reg:x3; val_offset:4164*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 4164*FLEN/8, x4, x1, x2)

inst_1389:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xd0364e415dbbd and fs2 == 1 and fe2 == 0x3fa and fm2 == 0x231155b99e0c7 and fs3 == 0 and fe3 == 0x3fa and fm3 == 0x07e695010edb0 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fed0364e415dbbd; op2val:0xbfa231155b99e0c7;
op3val:0x3fa07e695010edb0; valaddr_reg:x3; val_offset:4167*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 4167*FLEN/8, x4, x1, x2)

inst_1390:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xd089fe37ea0cf and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xbb73331b02b52 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x9257ead23b1fa and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fed089fe37ea0cf; op2val:0xbfdbb73331b02b52;
op3val:0x3fd9257ead23b1fa; valaddr_reg:x3; val_offset:4170*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 4170*FLEN/8, x4, x1, x2)

inst_1391:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xd089fe37ea0cf and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xbb73331b02b52 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x9257ead23b1fa and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fed089fe37ea0cf; op2val:0xbfdbb73331b02b52;
op3val:0x3fd9257ead23b1fa; valaddr_reg:x3; val_offset:4173*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 4173*FLEN/8, x4, x1, x2)

inst_1392:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xd089fe37ea0cf and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xbb73331b02b52 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x9257ead23b1fa and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fed089fe37ea0cf; op2val:0xbfdbb73331b02b52;
op3val:0x3fd9257ead23b1fa; valaddr_reg:x3; val_offset:4176*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 4176*FLEN/8, x4, x1, x2)

inst_1393:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xd089fe37ea0cf and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xbb73331b02b52 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x9257ead23b1fa and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fed089fe37ea0cf; op2val:0xbfdbb73331b02b52;
op3val:0x3fd9257ead23b1fa; valaddr_reg:x3; val_offset:4179*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 4179*FLEN/8, x4, x1, x2)

inst_1394:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xd089fe37ea0cf and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xbb73331b02b52 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x9257ead23b1fa and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fed089fe37ea0cf; op2val:0xbfdbb73331b02b52;
op3val:0x3fd9257ead23b1fa; valaddr_reg:x3; val_offset:4182*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 4182*FLEN/8, x4, x1, x2)

inst_1395:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xd2247460f4215 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xaeabf4d29e849 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x88192bcf6c256 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fed2247460f4215; op2val:0xbfeaeabf4d29e849;
op3val:0x3fe88192bcf6c256; valaddr_reg:x3; val_offset:4185*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 4185*FLEN/8, x4, x1, x2)

inst_1396:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xd2247460f4215 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xaeabf4d29e849 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x88192bcf6c256 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fed2247460f4215; op2val:0xbfeaeabf4d29e849;
op3val:0x3fe88192bcf6c256; valaddr_reg:x3; val_offset:4188*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 4188*FLEN/8, x4, x1, x2)

inst_1397:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xd2247460f4215 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xaeabf4d29e849 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x88192bcf6c256 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fed2247460f4215; op2val:0xbfeaeabf4d29e849;
op3val:0x3fe88192bcf6c256; valaddr_reg:x3; val_offset:4191*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 4191*FLEN/8, x4, x1, x2)

inst_1398:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xd2247460f4215 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xaeabf4d29e849 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x88192bcf6c256 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fed2247460f4215; op2val:0xbfeaeabf4d29e849;
op3val:0x3fe88192bcf6c256; valaddr_reg:x3; val_offset:4194*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 4194*FLEN/8, x4, x1, x2)

inst_1399:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xd2247460f4215 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xaeabf4d29e849 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x88192bcf6c256 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fed2247460f4215; op2val:0xbfeaeabf4d29e849;
op3val:0x3fe88192bcf6c256; valaddr_reg:x3; val_offset:4197*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 4197*FLEN/8, x4, x1, x2)

inst_1400:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xd2b1345cea515 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0xd0e5a0dba105e and fs3 == 0 and fe3 == 0x3fc and fm3 == 0xa7c1e655b1d78 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fed2b1345cea515; op2val:0xbfcd0e5a0dba105e;
op3val:0x3fca7c1e655b1d78; valaddr_reg:x3; val_offset:4200*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 4200*FLEN/8, x4, x1, x2)

inst_1401:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xd2b1345cea515 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0xd0e5a0dba105e and fs3 == 0 and fe3 == 0x3fc and fm3 == 0xa7c1e655b1d78 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fed2b1345cea515; op2val:0xbfcd0e5a0dba105e;
op3val:0x3fca7c1e655b1d78; valaddr_reg:x3; val_offset:4203*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 4203*FLEN/8, x4, x1, x2)

inst_1402:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xd2b1345cea515 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0xd0e5a0dba105e and fs3 == 0 and fe3 == 0x3fc and fm3 == 0xa7c1e655b1d78 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fed2b1345cea515; op2val:0xbfcd0e5a0dba105e;
op3val:0x3fca7c1e655b1d78; valaddr_reg:x3; val_offset:4206*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 4206*FLEN/8, x4, x1, x2)

inst_1403:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xd2b1345cea515 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0xd0e5a0dba105e and fs3 == 0 and fe3 == 0x3fc and fm3 == 0xa7c1e655b1d78 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fed2b1345cea515; op2val:0xbfcd0e5a0dba105e;
op3val:0x3fca7c1e655b1d78; valaddr_reg:x3; val_offset:4209*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 4209*FLEN/8, x4, x1, x2)

inst_1404:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xd2b1345cea515 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0xd0e5a0dba105e and fs3 == 0 and fe3 == 0x3fc and fm3 == 0xa7c1e655b1d78 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fed2b1345cea515; op2val:0xbfcd0e5a0dba105e;
op3val:0x3fca7c1e655b1d78; valaddr_reg:x3; val_offset:4212*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 4212*FLEN/8, x4, x1, x2)

inst_1405:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xd46298b73df6d and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xa53078c4bd335 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x814f6a4c14400 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fed46298b73df6d; op2val:0xbfea53078c4bd335;
op3val:0x3fe814f6a4c14400; valaddr_reg:x3; val_offset:4215*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 4215*FLEN/8, x4, x1, x2)

inst_1406:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xd46298b73df6d and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xa53078c4bd335 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x814f6a4c14400 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fed46298b73df6d; op2val:0xbfea53078c4bd335;
op3val:0x3fe814f6a4c14400; valaddr_reg:x3; val_offset:4218*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 4218*FLEN/8, x4, x1, x2)

inst_1407:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xd46298b73df6d and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xa53078c4bd335 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x814f6a4c14400 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fed46298b73df6d; op2val:0xbfea53078c4bd335;
op3val:0x3fe814f6a4c14400; valaddr_reg:x3; val_offset:4221*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 4221*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_12)

inst_1408:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xd46298b73df6d and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xa53078c4bd335 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x814f6a4c14400 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fed46298b73df6d; op2val:0xbfea53078c4bd335;
op3val:0x3fe814f6a4c14400; valaddr_reg:x3; val_offset:4224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 4224*FLEN/8, x4, x1, x2)

inst_1409:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xd46298b73df6d and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xa53078c4bd335 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x814f6a4c14400 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fed46298b73df6d; op2val:0xbfea53078c4bd335;
op3val:0x3fe814f6a4c14400; valaddr_reg:x3; val_offset:4227*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 4227*FLEN/8, x4, x1, x2)

inst_1410:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xd5d6d7242aeca and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x6cf3ce14415e8 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x4ee67786d91f1 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fed5d6d7242aeca; op2val:0xbfe6cf3ce14415e8;
op3val:0x3fe4ee67786d91f1; valaddr_reg:x3; val_offset:4230*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 4230*FLEN/8, x4, x1, x2)

inst_1411:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xd5d6d7242aeca and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x6cf3ce14415e8 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x4ee67786d91f1 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fed5d6d7242aeca; op2val:0xbfe6cf3ce14415e8;
op3val:0x3fe4ee67786d91f1; valaddr_reg:x3; val_offset:4233*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 4233*FLEN/8, x4, x1, x2)

inst_1412:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xd5d6d7242aeca and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x6cf3ce14415e8 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x4ee67786d91f1 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fed5d6d7242aeca; op2val:0xbfe6cf3ce14415e8;
op3val:0x3fe4ee67786d91f1; valaddr_reg:x3; val_offset:4236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 4236*FLEN/8, x4, x1, x2)

inst_1413:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xd5d6d7242aeca and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x6cf3ce14415e8 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x4ee67786d91f1 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fed5d6d7242aeca; op2val:0xbfe6cf3ce14415e8;
op3val:0x3fe4ee67786d91f1; valaddr_reg:x3; val_offset:4239*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 4239*FLEN/8, x4, x1, x2)

inst_1414:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xd5d6d7242aeca and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x6cf3ce14415e8 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x4ee67786d91f1 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fed5d6d7242aeca; op2val:0xbfe6cf3ce14415e8;
op3val:0x3fe4ee67786d91f1; valaddr_reg:x3; val_offset:4242*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 4242*FLEN/8, x4, x1, x2)

inst_1415:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xdb6eba8c47ba8 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0xaae5ced19ffb3 and fs3 == 0 and fe3 == 0x3fb and fm3 == 0x8c6886495bbc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fedb6eba8c47ba8; op2val:0xbfbaae5ced19ffb3;
op3val:0x3fb8c6886495bbc0; valaddr_reg:x3; val_offset:4245*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 4245*FLEN/8, x4, x1, x2)

inst_1416:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xdb6eba8c47ba8 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0xaae5ced19ffb3 and fs3 == 0 and fe3 == 0x3fb and fm3 == 0x8c6886495bbc0 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fedb6eba8c47ba8; op2val:0xbfbaae5ced19ffb3;
op3val:0x3fb8c6886495bbc0; valaddr_reg:x3; val_offset:4248*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 4248*FLEN/8, x4, x1, x2)

inst_1417:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xdb6eba8c47ba8 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0xaae5ced19ffb3 and fs3 == 0 and fe3 == 0x3fb and fm3 == 0x8c6886495bbc0 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fedb6eba8c47ba8; op2val:0xbfbaae5ced19ffb3;
op3val:0x3fb8c6886495bbc0; valaddr_reg:x3; val_offset:4251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 4251*FLEN/8, x4, x1, x2)

inst_1418:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xdb6eba8c47ba8 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0xaae5ced19ffb3 and fs3 == 0 and fe3 == 0x3fb and fm3 == 0x8c6886495bbc0 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fedb6eba8c47ba8; op2val:0xbfbaae5ced19ffb3;
op3val:0x3fb8c6886495bbc0; valaddr_reg:x3; val_offset:4254*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 4254*FLEN/8, x4, x1, x2)

inst_1419:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xdb6eba8c47ba8 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0xaae5ced19ffb3 and fs3 == 0 and fe3 == 0x3fb and fm3 == 0x8c6886495bbc0 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fedb6eba8c47ba8; op2val:0xbfbaae5ced19ffb3;
op3val:0x3fb8c6886495bbc0; valaddr_reg:x3; val_offset:4257*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 4257*FLEN/8, x4, x1, x2)

inst_1420:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xdcdcdea01cce5 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x25697c687f4c1 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x1146a49119a9a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fedcdcdea01cce5; op2val:0xbfd25697c687f4c1;
op3val:0x3fd1146a49119a9a; valaddr_reg:x3; val_offset:4260*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 4260*FLEN/8, x4, x1, x2)

inst_1421:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xdcdcdea01cce5 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x25697c687f4c1 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x1146a49119a9a and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fedcdcdea01cce5; op2val:0xbfd25697c687f4c1;
op3val:0x3fd1146a49119a9a; valaddr_reg:x3; val_offset:4263*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 4263*FLEN/8, x4, x1, x2)

inst_1422:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xdcdcdea01cce5 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x25697c687f4c1 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x1146a49119a9a and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fedcdcdea01cce5; op2val:0xbfd25697c687f4c1;
op3val:0x3fd1146a49119a9a; valaddr_reg:x3; val_offset:4266*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 4266*FLEN/8, x4, x1, x2)

inst_1423:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xdcdcdea01cce5 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x25697c687f4c1 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x1146a49119a9a and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fedcdcdea01cce5; op2val:0xbfd25697c687f4c1;
op3val:0x3fd1146a49119a9a; valaddr_reg:x3; val_offset:4269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 4269*FLEN/8, x4, x1, x2)

inst_1424:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xdcdcdea01cce5 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x25697c687f4c1 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x1146a49119a9a and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fedcdcdea01cce5; op2val:0xbfd25697c687f4c1;
op3val:0x3fd1146a49119a9a; valaddr_reg:x3; val_offset:4272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 4272*FLEN/8, x4, x1, x2)

inst_1425:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xdf19868ebd220 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x18018af70109b and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x0603672bd5c37 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fedf19868ebd220; op2val:0xbfe18018af70109b;
op3val:0x3fe0603672bd5c37; valaddr_reg:x3; val_offset:4275*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 4275*FLEN/8, x4, x1, x2)

inst_1426:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xdf19868ebd220 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x18018af70109b and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x0603672bd5c37 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fedf19868ebd220; op2val:0xbfe18018af70109b;
op3val:0x3fe0603672bd5c37; valaddr_reg:x3; val_offset:4278*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 4278*FLEN/8, x4, x1, x2)

inst_1427:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xdf19868ebd220 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x18018af70109b and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x0603672bd5c37 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fedf19868ebd220; op2val:0xbfe18018af70109b;
op3val:0x3fe0603672bd5c37; valaddr_reg:x3; val_offset:4281*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 4281*FLEN/8, x4, x1, x2)

inst_1428:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xdf19868ebd220 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x18018af70109b and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x0603672bd5c37 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fedf19868ebd220; op2val:0xbfe18018af70109b;
op3val:0x3fe0603672bd5c37; valaddr_reg:x3; val_offset:4284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 4284*FLEN/8, x4, x1, x2)

inst_1429:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xdf19868ebd220 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x18018af70109b and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x0603672bd5c37 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fedf19868ebd220; op2val:0xbfe18018af70109b;
op3val:0x3fe0603672bd5c37; valaddr_reg:x3; val_offset:4287*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 4287*FLEN/8, x4, x1, x2)

inst_1430:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xdfb2d72745ba1 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x9f23780a874d8 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x84f2b095d1e34 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fedfb2d72745ba1; op2val:0xbfd9f23780a874d8;
op3val:0x3fd84f2b095d1e34; valaddr_reg:x3; val_offset:4290*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 4290*FLEN/8, x4, x1, x2)

inst_1431:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xdfb2d72745ba1 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x9f23780a874d8 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x84f2b095d1e34 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fedfb2d72745ba1; op2val:0xbfd9f23780a874d8;
op3val:0x3fd84f2b095d1e34; valaddr_reg:x3; val_offset:4293*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 4293*FLEN/8, x4, x1, x2)

inst_1432:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xdfb2d72745ba1 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x9f23780a874d8 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x84f2b095d1e34 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fedfb2d72745ba1; op2val:0xbfd9f23780a874d8;
op3val:0x3fd84f2b095d1e34; valaddr_reg:x3; val_offset:4296*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 4296*FLEN/8, x4, x1, x2)

inst_1433:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xdfb2d72745ba1 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x9f23780a874d8 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x84f2b095d1e34 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fedfb2d72745ba1; op2val:0xbfd9f23780a874d8;
op3val:0x3fd84f2b095d1e34; valaddr_reg:x3; val_offset:4299*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 4299*FLEN/8, x4, x1, x2)

inst_1434:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xdfb2d72745ba1 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x9f23780a874d8 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x84f2b095d1e34 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fedfb2d72745ba1; op2val:0xbfd9f23780a874d8;
op3val:0x3fd84f2b095d1e34; valaddr_reg:x3; val_offset:4302*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 4302*FLEN/8, x4, x1, x2)

inst_1435:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xef628b829a953 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x96140d9639291 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x88e68b9f5d664 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feef628b829a953; op2val:0xbfe96140d9639291;
op3val:0x3fe88e68b9f5d664; valaddr_reg:x3; val_offset:4305*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 4305*FLEN/8, x4, x1, x2)

inst_1436:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xef628b829a953 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x96140d9639291 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x88e68b9f5d664 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feef628b829a953; op2val:0xbfe96140d9639291;
op3val:0x3fe88e68b9f5d664; valaddr_reg:x3; val_offset:4308*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 4308*FLEN/8, x4, x1, x2)

inst_1437:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xef628b829a953 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x96140d9639291 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x88e68b9f5d664 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feef628b829a953; op2val:0xbfe96140d9639291;
op3val:0x3fe88e68b9f5d664; valaddr_reg:x3; val_offset:4311*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 4311*FLEN/8, x4, x1, x2)

inst_1438:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xef628b829a953 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x96140d9639291 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x88e68b9f5d664 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feef628b829a953; op2val:0xbfe96140d9639291;
op3val:0x3fe88e68b9f5d664; valaddr_reg:x3; val_offset:4314*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 4314*FLEN/8, x4, x1, x2)

inst_1439:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xef628b829a953 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x96140d9639291 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x88e68b9f5d664 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feef628b829a953; op2val:0xbfe96140d9639291;
op3val:0x3fe88e68b9f5d664; valaddr_reg:x3; val_offset:4317*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 4317*FLEN/8, x4, x1, x2)

inst_1440:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xf5c3b313202a4 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x7f12bccee2340 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x776a415eb5682 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fef5c3b313202a4; op2val:0xbfe7f12bccee2340;
op3val:0x3fe776a415eb5682; valaddr_reg:x3; val_offset:4320*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 4320*FLEN/8, x4, x1, x2)

inst_1441:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xf5c3b313202a4 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x7f12bccee2340 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x776a415eb5682 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fef5c3b313202a4; op2val:0xbfe7f12bccee2340;
op3val:0x3fe776a415eb5682; valaddr_reg:x3; val_offset:4323*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 4323*FLEN/8, x4, x1, x2)

inst_1442:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xf5c3b313202a4 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x7f12bccee2340 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x776a415eb5682 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fef5c3b313202a4; op2val:0xbfe7f12bccee2340;
op3val:0x3fe776a415eb5682; valaddr_reg:x3; val_offset:4326*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 4326*FLEN/8, x4, x1, x2)

inst_1443:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xf5c3b313202a4 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x7f12bccee2340 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x776a415eb5682 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fef5c3b313202a4; op2val:0xbfe7f12bccee2340;
op3val:0x3fe776a415eb5682; valaddr_reg:x3; val_offset:4329*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 4329*FLEN/8, x4, x1, x2)

inst_1444:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xf5c3b313202a4 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x7f12bccee2340 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x776a415eb5682 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fef5c3b313202a4; op2val:0xbfe7f12bccee2340;
op3val:0x3fe776a415eb5682; valaddr_reg:x3; val_offset:4332*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 4332*FLEN/8, x4, x1, x2)

inst_1445:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xf7535a8597b7b and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xbfb47efb7af95 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xb81eb5aa3073f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fef7535a8597b7b; op2val:0xbfebfb47efb7af95;
op3val:0x3feb81eb5aa3073f; valaddr_reg:x3; val_offset:4335*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 4335*FLEN/8, x4, x1, x2)

inst_1446:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xf7535a8597b7b and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xbfb47efb7af95 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xb81eb5aa3073f and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fef7535a8597b7b; op2val:0xbfebfb47efb7af95;
op3val:0x3feb81eb5aa3073f; valaddr_reg:x3; val_offset:4338*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 4338*FLEN/8, x4, x1, x2)

inst_1447:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xf7535a8597b7b and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xbfb47efb7af95 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xb81eb5aa3073f and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fef7535a8597b7b; op2val:0xbfebfb47efb7af95;
op3val:0x3feb81eb5aa3073f; valaddr_reg:x3; val_offset:4341*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 4341*FLEN/8, x4, x1, x2)

inst_1448:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xf7535a8597b7b and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xbfb47efb7af95 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xb81eb5aa3073f and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fef7535a8597b7b; op2val:0xbfebfb47efb7af95;
op3val:0x3feb81eb5aa3073f; valaddr_reg:x3; val_offset:4344*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 4344*FLEN/8, x4, x1, x2)

inst_1449:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xf7535a8597b7b and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xbfb47efb7af95 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xb81eb5aa3073f and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fef7535a8597b7b; op2val:0xbfebfb47efb7af95;
op3val:0x3feb81eb5aa3073f; valaddr_reg:x3; val_offset:4347*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 4347*FLEN/8, x4, x1, x2)

inst_1450:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xf9e61f6d13245 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x5452273002d32 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x5043fd71eef07 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fef9e61f6d13245; op2val:0xbfe5452273002d32;
op3val:0x3fe5043fd71eef07; valaddr_reg:x3; val_offset:4350*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 4350*FLEN/8, x4, x1, x2)

inst_1451:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xf9e61f6d13245 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x5452273002d32 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x5043fd71eef07 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fef9e61f6d13245; op2val:0xbfe5452273002d32;
op3val:0x3fe5043fd71eef07; valaddr_reg:x3; val_offset:4353*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 4353*FLEN/8, x4, x1, x2)

inst_1452:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xf9e61f6d13245 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x5452273002d32 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x5043fd71eef07 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fef9e61f6d13245; op2val:0xbfe5452273002d32;
op3val:0x3fe5043fd71eef07; valaddr_reg:x3; val_offset:4356*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 4356*FLEN/8, x4, x1, x2)

inst_1453:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xf9e61f6d13245 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x5452273002d32 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x5043fd71eef07 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fef9e61f6d13245; op2val:0xbfe5452273002d32;
op3val:0x3fe5043fd71eef07; valaddr_reg:x3; val_offset:4359*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 4359*FLEN/8, x4, x1, x2)

inst_1454:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xf9e61f6d13245 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x5452273002d32 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x5043fd71eef07 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fef9e61f6d13245; op2val:0xbfe5452273002d32;
op3val:0x3fe5043fd71eef07; valaddr_reg:x3; val_offset:4362*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 4362*FLEN/8, x4, x1, x2)

inst_1455:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xfa58573d2bed4 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x842d58e4af554 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x7fe3cac95de50 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fefa58573d2bed4; op2val:0xbfc842d58e4af554;
op3val:0x3fc7fe3cac95de50; valaddr_reg:x3; val_offset:4365*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 4365*FLEN/8, x4, x1, x2)

inst_1456:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xfa58573d2bed4 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x842d58e4af554 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x7fe3cac95de50 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fefa58573d2bed4; op2val:0xbfc842d58e4af554;
op3val:0x3fc7fe3cac95de50; valaddr_reg:x3; val_offset:4368*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 4368*FLEN/8, x4, x1, x2)

inst_1457:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xfa58573d2bed4 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x842d58e4af554 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x7fe3cac95de50 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fefa58573d2bed4; op2val:0xbfc842d58e4af554;
op3val:0x3fc7fe3cac95de50; valaddr_reg:x3; val_offset:4371*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 4371*FLEN/8, x4, x1, x2)

inst_1458:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xfa58573d2bed4 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x842d58e4af554 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x7fe3cac95de50 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fefa58573d2bed4; op2val:0xbfc842d58e4af554;
op3val:0x3fc7fe3cac95de50; valaddr_reg:x3; val_offset:4374*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 4374*FLEN/8, x4, x1, x2)

inst_1459:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xfa58573d2bed4 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x842d58e4af554 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x7fe3cac95de50 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fefa58573d2bed4; op2val:0xbfc842d58e4af554;
op3val:0x3fc7fe3cac95de50; valaddr_reg:x3; val_offset:4377*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 4377*FLEN/8, x4, x1, x2)

inst_1460:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xfc93c0ed77e17 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x8ec7f5176ca3f and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x8c1d79da0cdb2 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fefc93c0ed77e17; op2val:0xbfd8ec7f5176ca3f;
op3val:0x3fd8c1d79da0cdb2; valaddr_reg:x3; val_offset:4380*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 4380*FLEN/8, x4, x1, x2)

inst_1461:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xfc93c0ed77e17 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x8ec7f5176ca3f and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x8c1d79da0cdb2 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fefc93c0ed77e17; op2val:0xbfd8ec7f5176ca3f;
op3val:0x3fd8c1d79da0cdb2; valaddr_reg:x3; val_offset:4383*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 4383*FLEN/8, x4, x1, x2)

inst_1462:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xfc93c0ed77e17 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x8ec7f5176ca3f and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x8c1d79da0cdb2 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fefc93c0ed77e17; op2val:0xbfd8ec7f5176ca3f;
op3val:0x3fd8c1d79da0cdb2; valaddr_reg:x3; val_offset:4386*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 4386*FLEN/8, x4, x1, x2)

inst_1463:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xfc93c0ed77e17 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x8ec7f5176ca3f and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x8c1d79da0cdb2 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fefc93c0ed77e17; op2val:0xbfd8ec7f5176ca3f;
op3val:0x3fd8c1d79da0cdb2; valaddr_reg:x3; val_offset:4389*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 4389*FLEN/8, x4, x1, x2)

inst_1464:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xfc93c0ed77e17 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x8ec7f5176ca3f and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x8c1d79da0cdb2 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fefc93c0ed77e17; op2val:0xbfd8ec7f5176ca3f;
op3val:0x3fd8c1d79da0cdb2; valaddr_reg:x3; val_offset:4392*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 4392*FLEN/8, x4, x1, x2)

inst_1465:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xffc442c859ec8 and fs2 == 1 and fe2 == 0x3f9 and fm2 == 0x414f57ef8ddbb and fs3 == 0 and fe3 == 0x3f9 and fm3 == 0x4129da8c358c0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feffc442c859ec8; op2val:0xbf9414f57ef8ddbb;
op3val:0x3f94129da8c358c0; valaddr_reg:x3; val_offset:4395*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 4395*FLEN/8, x4, x1, x2)

inst_1466:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xffc442c859ec8 and fs2 == 1 and fe2 == 0x3f9 and fm2 == 0x414f57ef8ddbb and fs3 == 0 and fe3 == 0x3f9 and fm3 == 0x4129da8c358c0 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feffc442c859ec8; op2val:0xbf9414f57ef8ddbb;
op3val:0x3f94129da8c358c0; valaddr_reg:x3; val_offset:4398*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 4398*FLEN/8, x4, x1, x2)

inst_1467:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xffc442c859ec8 and fs2 == 1 and fe2 == 0x3f9 and fm2 == 0x414f57ef8ddbb and fs3 == 0 and fe3 == 0x3f9 and fm3 == 0x4129da8c358c0 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feffc442c859ec8; op2val:0xbf9414f57ef8ddbb;
op3val:0x3f94129da8c358c0; valaddr_reg:x3; val_offset:4401*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 4401*FLEN/8, x4, x1, x2)

inst_1468:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xffc442c859ec8 and fs2 == 1 and fe2 == 0x3f9 and fm2 == 0x414f57ef8ddbb and fs3 == 0 and fe3 == 0x3f9 and fm3 == 0x4129da8c358c0 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feffc442c859ec8; op2val:0xbf9414f57ef8ddbb;
op3val:0x3f94129da8c358c0; valaddr_reg:x3; val_offset:4404*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 4404*FLEN/8, x4, x1, x2)

inst_1469:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xffc442c859ec8 and fs2 == 1 and fe2 == 0x3f9 and fm2 == 0x414f57ef8ddbb and fs3 == 0 and fe3 == 0x3f9 and fm3 == 0x4129da8c358c0 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feffc442c859ec8; op2val:0xbf9414f57ef8ddbb;
op3val:0x3f94129da8c358c0; valaddr_reg:x3; val_offset:4407*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 4407*FLEN/8, x4, x1, x2)

inst_1470:
// fs1 == 0 and fe1 == 0x3f4 and fm1 == 0xc8e57e5f2a800 and fs2 == 1 and fe2 == 0x408 and fm2 == 0xc59b860a75fe7 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x94c9d5665ac38 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3f4c8e57e5f2a800; op2val:0xc08c59b860a75fe7;
op3val:0x3fe94c9d5665ac38; valaddr_reg:x3; val_offset:4410*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 4410*FLEN/8, x4, x1, x2)

inst_1471:
// fs1 == 0 and fe1 == 0x3f4 and fm1 == 0xc8e57e5f2a800 and fs2 == 1 and fe2 == 0x408 and fm2 == 0xc59b860a75fe7 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x94c9d5665ac38 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3f4c8e57e5f2a800; op2val:0xc08c59b860a75fe7;
op3val:0x3fe94c9d5665ac38; valaddr_reg:x3; val_offset:4413*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 4413*FLEN/8, x4, x1, x2)

inst_1472:
// fs1 == 0 and fe1 == 0x3f4 and fm1 == 0xc8e57e5f2a800 and fs2 == 1 and fe2 == 0x408 and fm2 == 0xc59b860a75fe7 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x94c9d5665ac38 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3f4c8e57e5f2a800; op2val:0xc08c59b860a75fe7;
op3val:0x3fe94c9d5665ac38; valaddr_reg:x3; val_offset:4416*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 4416*FLEN/8, x4, x1, x2)

inst_1473:
// fs1 == 0 and fe1 == 0x3f4 and fm1 == 0xc8e57e5f2a800 and fs2 == 1 and fe2 == 0x408 and fm2 == 0xc59b860a75fe7 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x94c9d5665ac38 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3f4c8e57e5f2a800; op2val:0xc08c59b860a75fe7;
op3val:0x3fe94c9d5665ac38; valaddr_reg:x3; val_offset:4419*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 4419*FLEN/8, x4, x1, x2)

inst_1474:
// fs1 == 0 and fe1 == 0x3f4 and fm1 == 0xc8e57e5f2a800 and fs2 == 1 and fe2 == 0x408 and fm2 == 0xc59b860a75fe7 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x94c9d5665ac38 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3f4c8e57e5f2a800; op2val:0xc08c59b860a75fe7;
op3val:0x3fe94c9d5665ac38; valaddr_reg:x3; val_offset:4422*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 4422*FLEN/8, x4, x1, x2)

inst_1475:
// fs1 == 0 and fe1 == 0x3f4 and fm1 == 0xe3a97f64cf800 and fs2 == 1 and fe2 == 0x409 and fm2 == 0x04444ccc6e171 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xebb92f80c666f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3f4e3a97f64cf800; op2val:0xc0904444ccc6e171;
op3val:0x3feebb92f80c666f; valaddr_reg:x3; val_offset:4425*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 4425*FLEN/8, x4, x1, x2)

inst_1476:
// fs1 == 0 and fe1 == 0x3f4 and fm1 == 0xe3a97f64cf800 and fs2 == 1 and fe2 == 0x409 and fm2 == 0x04444ccc6e171 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xebb92f80c666f and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3f4e3a97f64cf800; op2val:0xc0904444ccc6e171;
op3val:0x3feebb92f80c666f; valaddr_reg:x3; val_offset:4428*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 4428*FLEN/8, x4, x1, x2)

inst_1477:
// fs1 == 0 and fe1 == 0x3f4 and fm1 == 0xe3a97f64cf800 and fs2 == 1 and fe2 == 0x409 and fm2 == 0x04444ccc6e171 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xebb92f80c666f and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3f4e3a97f64cf800; op2val:0xc0904444ccc6e171;
op3val:0x3feebb92f80c666f; valaddr_reg:x3; val_offset:4431*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 4431*FLEN/8, x4, x1, x2)

inst_1478:
// fs1 == 0 and fe1 == 0x3f4 and fm1 == 0xe3a97f64cf800 and fs2 == 1 and fe2 == 0x409 and fm2 == 0x04444ccc6e171 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xebb92f80c666f and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3f4e3a97f64cf800; op2val:0xc0904444ccc6e171;
op3val:0x3feebb92f80c666f; valaddr_reg:x3; val_offset:4434*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 4434*FLEN/8, x4, x1, x2)

inst_1479:
// fs1 == 0 and fe1 == 0x3f5 and fm1 == 0x37c8c71046800 and fs2 == 1 and fe2 == 0x408 and fm2 == 0x306070bc01f37 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x72b3e0facabc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3f537c8c71046800; op2val:0xc08306070bc01f37;
op3val:0x3fe72b3e0facabc0; valaddr_reg:x3; val_offset:4437*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 4437*FLEN/8, x4, x1, x2)

inst_1480:
// fs1 == 0 and fe1 == 0x3f5 and fm1 == 0x37c8c71046800 and fs2 == 1 and fe2 == 0x408 and fm2 == 0x306070bc01f37 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x72b3e0facabc0 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3f537c8c71046800; op2val:0xc08306070bc01f37;
op3val:0x3fe72b3e0facabc0; valaddr_reg:x3; val_offset:4440*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 4440*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(4561177030790653952,64,FLEN)
NAN_BOXED(13874563200452091879,64,FLEN)
NAN_BOXED(4561177030790653952,64,FLEN)
NAN_BOXED(4561177030790653952,64,FLEN)
NAN_BOXED(4561177030790653952,64,FLEN)
NAN_BOXED(4561177030790653952,64,FLEN)
NAN_BOXED(4561177030790653952,64,FLEN)
NAN_BOXED(4561177030790653952,64,FLEN)
NAN_BOXED(4605296332606123064,64,FLEN)
NAN_BOXED(4561177030790653952,64,FLEN)
NAN_BOXED(13874563200452091879,64,FLEN)
NAN_BOXED(4605296332606123064,64,FLEN)
NAN_BOXED(4561177030790653952,64,FLEN)
NAN_BOXED(13874563200452091879,64,FLEN)
NAN_BOXED(13874563200452091879,64,FLEN)
NAN_BOXED(4561647896919603200,64,FLEN)
NAN_BOXED(13875665514212548977,64,FLEN)
NAN_BOXED(13875665514212548977,64,FLEN)
NAN_BOXED(4561647896919603200,64,FLEN)
NAN_BOXED(13875665514212548977,64,FLEN)
NAN_BOXED(4561647896919603200,64,FLEN)
NAN_BOXED(4561647896919603200,64,FLEN)
NAN_BOXED(13875665514212548977,64,FLEN)
NAN_BOXED(4606825708747777647,64,FLEN)
NAN_BOXED(4561647896919603200,64,FLEN)
NAN_BOXED(13875665514212548977,64,FLEN)
NAN_BOXED(4606825708747777647,64,FLEN)
NAN_BOXED(4561647896919603200,64,FLEN)
NAN_BOXED(13875665514212548977,64,FLEN)
NAN_BOXED(4606825708747777647,64,FLEN)
NAN_BOXED(4563127790089824256,64,FLEN)
NAN_BOXED(4563127790089824256,64,FLEN)
NAN_BOXED(4563127790089824256,64,FLEN)
NAN_BOXED(4563127790089824256,64,FLEN)
NAN_BOXED(4563127790089824256,64,FLEN)
NAN_BOXED(4604696689560562624,64,FLEN)
NAN_BOXED(4563127790089824256,64,FLEN)
NAN_BOXED(13871937904562937655,64,FLEN)
NAN_BOXED(4604696689560562624,64,FLEN)
NAN_BOXED(4563127790089824256,64,FLEN)
NAN_BOXED(13871937904562937655,64,FLEN)
NAN_BOXED(4604696689560562624,64,FLEN)
NAN_BOXED(4563127790089824256,64,FLEN)
NAN_BOXED(13871937904562937655,64,FLEN)
NAN_BOXED(4604696689560562624,64,FLEN)
NAN_BOXED(4568241253635137792,64,FLEN)
NAN_BOXED(13851386885338712721,64,FLEN)
NAN_BOXED(4589618691343332816,64,FLEN)
NAN_BOXED(4568241253635137792,64,FLEN)
NAN_BOXED(13851386885338712721,64,FLEN)
NAN_BOXED(4589618691343332816,64,FLEN)
NAN_BOXED(4568241253635137792,64,FLEN)
NAN_BOXED(13851386885338712721,64,FLEN)
NAN_BOXED(4589618691343332816,64,FLEN)
NAN_BOXED(4568241253635137792,64,FLEN)
NAN_BOXED(13851386885338712721,64,FLEN)
NAN_BOXED(4589618691343332816,64,FLEN)
NAN_BOXED(4568241253635137792,64,FLEN)
NAN_BOXED(13851386885338712721,64,FLEN)
NAN_BOXED(4589618691343332816,64,FLEN)
NAN_BOXED(4575096809167344256,64,FLEN)
NAN_BOXED(13861323108349389746,64,FLEN)
NAN_BOXED(4605912532754582341,64,FLEN)
NAN_BOXED(4575096809167344256,64,FLEN)
NAN_BOXED(13861323108349389746,64,FLEN)
NAN_BOXED(4605912532754582341,64,FLEN)
NAN_BOXED(4575096809167344256,64,FLEN)
NAN_BOXED(13861323108349389746,64,FLEN)
NAN_BOXED(4605912532754582341,64,FLEN)
NAN_BOXED(4575096809167344256,64,FLEN)
NAN_BOXED(13861323108349389746,64,FLEN)
NAN_BOXED(4605912532754582341,64,FLEN)
NAN_BOXED(4575096809167344256,64,FLEN)
NAN_BOXED(13861323108349389746,64,FLEN)
NAN_BOXED(4605912532754582341,64,FLEN)
NAN_BOXED(4576653130623477056,64,FLEN)
NAN_BOXED(13854764645284054007,64,FLEN)
NAN_BOXED(4601237525164444864,64,FLEN)
NAN_BOXED(4576653130623477056,64,FLEN)
NAN_BOXED(13854764645284054007,64,FLEN)
NAN_BOXED(4601237525164444864,64,FLEN)
NAN_BOXED(4576653130623477056,64,FLEN)
NAN_BOXED(13854764645284054007,64,FLEN)
NAN_BOXED(4601237525164444864,64,FLEN)
NAN_BOXED(4576653130623477056,64,FLEN)
NAN_BOXED(13854764645284054007,64,FLEN)
NAN_BOXED(4601237525164444864,64,FLEN)
NAN_BOXED(4576653130623477056,64,FLEN)
NAN_BOXED(13854764645284054007,64,FLEN)
NAN_BOXED(4601237525164444864,64,FLEN)
NAN_BOXED(4579311736134469248,64,FLEN)
NAN_BOXED(13854951969178850107,64,FLEN)
NAN_BOXED(4603956615154183142,64,FLEN)
NAN_BOXED(4579311736134469248,64,FLEN)
NAN_BOXED(13854951969178850107,64,FLEN)
NAN_BOXED(4603956615154183142,64,FLEN)
NAN_BOXED(4579311736134469248,64,FLEN)
NAN_BOXED(13854951969178850107,64,FLEN)
NAN_BOXED(4603956615154183142,64,FLEN)
NAN_BOXED(4579311736134469248,64,FLEN)
NAN_BOXED(13854951969178850107,64,FLEN)
NAN_BOXED(4603956615154183142,64,FLEN)
NAN_BOXED(4579311736134469248,64,FLEN)
NAN_BOXED(13854951969178850107,64,FLEN)
NAN_BOXED(4603956615154183142,64,FLEN)
NAN_BOXED(4581401201997879936,64,FLEN)
NAN_BOXED(13855186267580569306,64,FLEN)
NAN_BOXED(4606615200307463313,64,FLEN)
NAN_BOXED(4581401201997879936,64,FLEN)
NAN_BOXED(13855186267580569306,64,FLEN)
NAN_BOXED(4606615200307463313,64,FLEN)
NAN_BOXED(4581401201997879936,64,FLEN)
NAN_BOXED(13855186267580569306,64,FLEN)
NAN_BOXED(4606615200307463313,64,FLEN)
NAN_BOXED(4581401201997879936,64,FLEN)
NAN_BOXED(13855186267580569306,64,FLEN)
NAN_BOXED(4606615200307463313,64,FLEN)
NAN_BOXED(4581401201997879936,64,FLEN)
NAN_BOXED(13855186267580569306,64,FLEN)
NAN_BOXED(4606615200307463313,64,FLEN)
NAN_BOXED(4583852282061812352,64,FLEN)
NAN_BOXED(13848681924057270841,64,FLEN)
NAN_BOXED(4602072430350990546,64,FLEN)
NAN_BOXED(4583852282061812352,64,FLEN)
NAN_BOXED(13848681924057270841,64,FLEN)
NAN_BOXED(4602072430350990546,64,FLEN)
NAN_BOXED(4583852282061812352,64,FLEN)
NAN_BOXED(13848681924057270841,64,FLEN)
NAN_BOXED(4602072430350990546,64,FLEN)
NAN_BOXED(4583852282061812352,64,FLEN)
NAN_BOXED(13848681924057270841,64,FLEN)
NAN_BOXED(4602072430350990546,64,FLEN)
NAN_BOXED(4583852282061812352,64,FLEN)
NAN_BOXED(13848681924057270841,64,FLEN)
NAN_BOXED(4602072430350990546,64,FLEN)
NAN_BOXED(4584260477073753952,64,FLEN)
NAN_BOXED(13833578288306868955,64,FLEN)
NAN_BOXED(4587350672461524448,64,FLEN)
NAN_BOXED(4584260477073753952,64,FLEN)
NAN_BOXED(13833578288306868955,64,FLEN)
NAN_BOXED(4587350672461524448,64,FLEN)
NAN_BOXED(4584260477073753952,64,FLEN)
NAN_BOXED(13833578288306868955,64,FLEN)
NAN_BOXED(4587350672461524448,64,FLEN)
NAN_BOXED(4584260477073753952,64,FLEN)
NAN_BOXED(13833578288306868955,64,FLEN)
NAN_BOXED(4587350672461524448,64,FLEN)
NAN_BOXED(4584260477073753952,64,FLEN)
NAN_BOXED(13833578288306868955,64,FLEN)
NAN_BOXED(4587350672461524448,64,FLEN)
NAN_BOXED(4585140633485738512,64,FLEN)
NAN_BOXED(13841895272219461993,64,FLEN)
NAN_BOXED(4596728207883677680,64,FLEN)
NAN_BOXED(4585140633485738512,64,FLEN)
NAN_BOXED(13841895272219461993,64,FLEN)
NAN_BOXED(4596728207883677680,64,FLEN)
NAN_BOXED(4585140633485738512,64,FLEN)
NAN_BOXED(13841895272219461993,64,FLEN)
NAN_BOXED(4596728207883677680,64,FLEN)
NAN_BOXED(4585140633485738512,64,FLEN)
NAN_BOXED(13841895272219461993,64,FLEN)
NAN_BOXED(4596728207883677680,64,FLEN)
NAN_BOXED(4585140633485738512,64,FLEN)
NAN_BOXED(13841895272219461993,64,FLEN)
NAN_BOXED(4596728207883677680,64,FLEN)
NAN_BOXED(4585181387763737232,64,FLEN)
NAN_BOXED(13842834700747693027,64,FLEN)
NAN_BOXED(4597837344988485928,64,FLEN)
NAN_BOXED(4585181387763737232,64,FLEN)
NAN_BOXED(13842834700747693027,64,FLEN)
NAN_BOXED(4597837344988485928,64,FLEN)
NAN_BOXED(4585181387763737232,64,FLEN)
NAN_BOXED(13842834700747693027,64,FLEN)
NAN_BOXED(4597837344988485928,64,FLEN)
NAN_BOXED(4585181387763737232,64,FLEN)
NAN_BOXED(13842834700747693027,64,FLEN)
NAN_BOXED(4597837344988485928,64,FLEN)
NAN_BOXED(4585181387763737232,64,FLEN)
NAN_BOXED(13842834700747693027,64,FLEN)
NAN_BOXED(4597837344988485928,64,FLEN)
NAN_BOXED(4585186435415183088,64,FLEN)
NAN_BOXED(13851264808620512020,64,FLEN)
NAN_BOXED(4606209277969978976,64,FLEN)
NAN_BOXED(4585186435415183088,64,FLEN)
NAN_BOXED(13851264808620512020,64,FLEN)
NAN_BOXED(4606209277969978976,64,FLEN)
NAN_BOXED(4585186435415183088,64,FLEN)
NAN_BOXED(13851264808620512020,64,FLEN)
NAN_BOXED(4606209277969978976,64,FLEN)
NAN_BOXED(4585186435415183088,64,FLEN)
NAN_BOXED(13851264808620512020,64,FLEN)
NAN_BOXED(4606209277969978976,64,FLEN)
NAN_BOXED(4585186435415183088,64,FLEN)
NAN_BOXED(13851264808620512020,64,FLEN)
NAN_BOXED(4606209277969978976,64,FLEN)
NAN_BOXED(4585210314908416960,64,FLEN)
NAN_BOXED(13852075077352164867,64,FLEN)
NAN_BOXED(4607155935988328249,64,FLEN)
NAN_BOXED(4585210314908416960,64,FLEN)
NAN_BOXED(13852075077352164867,64,FLEN)
NAN_BOXED(4607155935988328249,64,FLEN)
NAN_BOXED(4585210314908416960,64,FLEN)
NAN_BOXED(13852075077352164867,64,FLEN)
NAN_BOXED(4607155935988328249,64,FLEN)
NAN_BOXED(4585210314908416960,64,FLEN)
NAN_BOXED(13852075077352164867,64,FLEN)
NAN_BOXED(4607155935988328249,64,FLEN)
NAN_BOXED(4585210314908416960,64,FLEN)
NAN_BOXED(13852075077352164867,64,FLEN)
NAN_BOXED(4607155935988328249,64,FLEN)
NAN_BOXED(4587833844191231712,64,FLEN)
NAN_BOXED(13842455167535838405,64,FLEN)
NAN_BOXED(4599973047476082758,64,FLEN)
NAN_BOXED(4587833844191231712,64,FLEN)
NAN_BOXED(13842455167535838405,64,FLEN)
NAN_BOXED(4599973047476082758,64,FLEN)
NAN_BOXED(4587833844191231712,64,FLEN)
NAN_BOXED(13842455167535838405,64,FLEN)
NAN_BOXED(4599973047476082758,64,FLEN)
NAN_BOXED(4587833844191231712,64,FLEN)
NAN_BOXED(13842455167535838405,64,FLEN)
NAN_BOXED(4599973047476082758,64,FLEN)
NAN_BOXED(4587833844191231712,64,FLEN)
NAN_BOXED(13842455167535838405,64,FLEN)
NAN_BOXED(4599973047476082758,64,FLEN)
NAN_BOXED(4587935628776844576,64,FLEN)
NAN_BOXED(13844897384943625287,64,FLEN)
NAN_BOXED(4602780899290994218,64,FLEN)
NAN_BOXED(4587935628776844576,64,FLEN)
NAN_BOXED(13844897384943625287,64,FLEN)
NAN_BOXED(4602780899290994218,64,FLEN)
NAN_BOXED(4587935628776844576,64,FLEN)
NAN_BOXED(13844897384943625287,64,FLEN)
NAN_BOXED(4602780899290994218,64,FLEN)
NAN_BOXED(4587935628776844576,64,FLEN)
NAN_BOXED(13844897384943625287,64,FLEN)
NAN_BOXED(4602780899290994218,64,FLEN)
NAN_BOXED(4587935628776844576,64,FLEN)
NAN_BOXED(13844897384943625287,64,FLEN)
NAN_BOXED(4602780899290994218,64,FLEN)
NAN_BOXED(4588129716559002224,64,FLEN)
NAN_BOXED(13843054392847364987,64,FLEN)
NAN_BOXED(4600746180702364008,64,FLEN)
NAN_BOXED(4588129716559002224,64,FLEN)
NAN_BOXED(13843054392847364987,64,FLEN)
NAN_BOXED(4600746180702364008,64,FLEN)
NAN_BOXED(4588129716559002224,64,FLEN)
NAN_BOXED(13843054392847364987,64,FLEN)
NAN_BOXED(4600746180702364008,64,FLEN)
NAN_BOXED(4588129716559002224,64,FLEN)
NAN_BOXED(13843054392847364987,64,FLEN)
NAN_BOXED(4600746180702364008,64,FLEN)
NAN_BOXED(4588129716559002224,64,FLEN)
NAN_BOXED(13843054392847364987,64,FLEN)
NAN_BOXED(4600746180702364008,64,FLEN)
NAN_BOXED(4589215341428531168,64,FLEN)
NAN_BOXED(13845897933798449582,64,FLEN)
NAN_BOXED(4604578076272474664,64,FLEN)
NAN_BOXED(4589215341428531168,64,FLEN)
NAN_BOXED(13845897933798449582,64,FLEN)
NAN_BOXED(4604578076272474664,64,FLEN)
NAN_BOXED(4589215341428531168,64,FLEN)
NAN_BOXED(13845897933798449582,64,FLEN)
NAN_BOXED(4604578076272474664,64,FLEN)
NAN_BOXED(4589215341428531168,64,FLEN)
NAN_BOXED(13845897933798449582,64,FLEN)
NAN_BOXED(4604578076272474664,64,FLEN)
NAN_BOXED(4589215341428531168,64,FLEN)
NAN_BOXED(13845897933798449582,64,FLEN)
NAN_BOXED(4604578076272474664,64,FLEN)
NAN_BOXED(4589239232224531128,64,FLEN)
NAN_BOXED(13842535683534406295,64,FLEN)
NAN_BOXED(4601267486116147716,64,FLEN)
NAN_BOXED(4589239232224531128,64,FLEN)
NAN_BOXED(13842535683534406295,64,FLEN)
NAN_BOXED(4601267486116147716,64,FLEN)
NAN_BOXED(4589239232224531128,64,FLEN)
NAN_BOXED(13842535683534406295,64,FLEN)
NAN_BOXED(4601267486116147716,64,FLEN)
NAN_BOXED(4589239232224531128,64,FLEN)
NAN_BOXED(13842535683534406295,64,FLEN)
NAN_BOXED(4601267486116147716,64,FLEN)
NAN_BOXED(4589239232224531128,64,FLEN)
NAN_BOXED(13842535683534406295,64,FLEN)
NAN_BOXED(4601267486116147716,64,FLEN)
NAN_BOXED(4589272577140479184,64,FLEN)
NAN_BOXED(13839846215628813308,64,FLEN)
NAN_BOXED(4598570943557097932,64,FLEN)
NAN_BOXED(4589272577140479184,64,FLEN)
NAN_BOXED(13839846215628813308,64,FLEN)
NAN_BOXED(4598570943557097932,64,FLEN)
NAN_BOXED(4589272577140479184,64,FLEN)
NAN_BOXED(13839846215628813308,64,FLEN)
NAN_BOXED(4598570943557097932,64,FLEN)
NAN_BOXED(4589272577140479184,64,FLEN)
NAN_BOXED(13839846215628813308,64,FLEN)
NAN_BOXED(4598570943557097932,64,FLEN)
NAN_BOXED(4589272577140479184,64,FLEN)
NAN_BOXED(13839846215628813308,64,FLEN)
NAN_BOXED(4598570943557097932,64,FLEN)
NAN_BOXED(4589882832284402008,64,FLEN)
NAN_BOXED(13821588057924173287,64,FLEN)
NAN_BOXED(4580922910577679168,64,FLEN)
NAN_BOXED(4589882832284402008,64,FLEN)
NAN_BOXED(13821588057924173287,64,FLEN)
NAN_BOXED(4580922910577679168,64,FLEN)
NAN_BOXED(4589882832284402008,64,FLEN)
NAN_BOXED(13821588057924173287,64,FLEN)
NAN_BOXED(4580922910577679168,64,FLEN)
NAN_BOXED(4589882832284402008,64,FLEN)
NAN_BOXED(13821588057924173287,64,FLEN)
NAN_BOXED(4580922910577679168,64,FLEN)
NAN_BOXED(4589882832284402008,64,FLEN)
NAN_BOXED(13821588057924173287,64,FLEN)
NAN_BOXED(4580922910577679168,64,FLEN)
NAN_BOXED(4590396524794362576,64,FLEN)
NAN_BOXED(13836605113545838832,64,FLEN)
NAN_BOXED(4596869193566006292,64,FLEN)
NAN_BOXED(4590396524794362576,64,FLEN)
NAN_BOXED(13836605113545838832,64,FLEN)
NAN_BOXED(4596869193566006292,64,FLEN)
NAN_BOXED(4590396524794362576,64,FLEN)
NAN_BOXED(13836605113545838832,64,FLEN)
NAN_BOXED(4596869193566006292,64,FLEN)
NAN_BOXED(4590396524794362576,64,FLEN)
NAN_BOXED(13836605113545838832,64,FLEN)
NAN_BOXED(4596869193566006292,64,FLEN)
NAN_BOXED(4590396524794362576,64,FLEN)
NAN_BOXED(13836605113545838832,64,FLEN)
NAN_BOXED(4596869193566006292,64,FLEN)
NAN_BOXED(4590443975035338304,64,FLEN)
NAN_BOXED(13833964079234063653,64,FLEN)
NAN_BOXED(4594245614611306400,64,FLEN)
NAN_BOXED(4590443975035338304,64,FLEN)
NAN_BOXED(13833964079234063653,64,FLEN)
NAN_BOXED(4594245614611306400,64,FLEN)
NAN_BOXED(4590443975035338304,64,FLEN)
NAN_BOXED(13833964079234063653,64,FLEN)
NAN_BOXED(4594245614611306400,64,FLEN)
NAN_BOXED(4590443975035338304,64,FLEN)
NAN_BOXED(13833964079234063653,64,FLEN)
NAN_BOXED(4594245614611306400,64,FLEN)
NAN_BOXED(4590443975035338304,64,FLEN)
NAN_BOXED(13833964079234063653,64,FLEN)
NAN_BOXED(4594245614611306400,64,FLEN)
NAN_BOXED(4590732690121274216,64,FLEN)
NAN_BOXED(13837606894722028064,64,FLEN)
NAN_BOXED(4598422941542588754,64,FLEN)
NAN_BOXED(4590732690121274216,64,FLEN)
NAN_BOXED(13837606894722028064,64,FLEN)
NAN_BOXED(4598422941542588754,64,FLEN)
NAN_BOXED(4590732690121274216,64,FLEN)
NAN_BOXED(13837606894722028064,64,FLEN)
NAN_BOXED(4598422941542588754,64,FLEN)
NAN_BOXED(4590732690121274216,64,FLEN)
NAN_BOXED(13837606894722028064,64,FLEN)
NAN_BOXED(4598422941542588754,64,FLEN)
NAN_BOXED(4590732690121274216,64,FLEN)
NAN_BOXED(13837606894722028064,64,FLEN)
NAN_BOXED(4598422941542588754,64,FLEN)
NAN_BOXED(4591232380709219128,64,FLEN)
NAN_BOXED(13836896391468508813,64,FLEN)
NAN_BOXED(4598296096390678482,64,FLEN)
NAN_BOXED(4591232380709219128,64,FLEN)
NAN_BOXED(13836896391468508813,64,FLEN)
NAN_BOXED(4598296096390678482,64,FLEN)
NAN_BOXED(4591232380709219128,64,FLEN)
NAN_BOXED(13836896391468508813,64,FLEN)
NAN_BOXED(4598296096390678482,64,FLEN)
NAN_BOXED(4591232380709219128,64,FLEN)
NAN_BOXED(13836896391468508813,64,FLEN)
NAN_BOXED(4598296096390678482,64,FLEN)
NAN_BOXED(4591232380709219128,64,FLEN)
NAN_BOXED(13836896391468508813,64,FLEN)
NAN_BOXED(4598296096390678482,64,FLEN)
NAN_BOXED(4591455403311326552,64,FLEN)
NAN_BOXED(13841925975204135161,64,FLEN)
NAN_BOXED(4603353291407572839,64,FLEN)
NAN_BOXED(4591455403311326552,64,FLEN)
NAN_BOXED(13841925975204135161,64,FLEN)
NAN_BOXED(4603353291407572839,64,FLEN)
NAN_BOXED(4591455403311326552,64,FLEN)
NAN_BOXED(13841925975204135161,64,FLEN)
NAN_BOXED(4603353291407572839,64,FLEN)
NAN_BOXED(4591455403311326552,64,FLEN)
NAN_BOXED(13841925975204135161,64,FLEN)
NAN_BOXED(4603353291407572839,64,FLEN)
NAN_BOXED(4591455403311326552,64,FLEN)
NAN_BOXED(13841925975204135161,64,FLEN)
NAN_BOXED(4603353291407572839,64,FLEN)
NAN_BOXED(4591478990106520784,64,FLEN)
NAN_BOXED(13828660460811255903,64,FLEN)
NAN_BOXED(4590046051962086000,64,FLEN)
NAN_BOXED(4591478990106520784,64,FLEN)
NAN_BOXED(13828660460811255903,64,FLEN)
NAN_BOXED(4590046051962086000,64,FLEN)
NAN_BOXED(4591478990106520784,64,FLEN)
NAN_BOXED(13828660460811255903,64,FLEN)
NAN_BOXED(4590046051962086000,64,FLEN)
NAN_BOXED(4591478990106520784,64,FLEN)
NAN_BOXED(13828660460811255903,64,FLEN)
NAN_BOXED(4590046051962086000,64,FLEN)
NAN_BOXED(4591478990106520784,64,FLEN)
NAN_BOXED(13828660460811255903,64,FLEN)
NAN_BOXED(4590046051962086000,64,FLEN)
NAN_BOXED(4591771103757123552,64,FLEN)
NAN_BOXED(13839835219023863503,64,FLEN)
NAN_BOXED(4601209987359336808,64,FLEN)
NAN_BOXED(4591771103757123552,64,FLEN)
NAN_BOXED(13839835219023863503,64,FLEN)
NAN_BOXED(4601209987359336808,64,FLEN)
NAN_BOXED(4591771103757123552,64,FLEN)
NAN_BOXED(13839835219023863503,64,FLEN)
NAN_BOXED(4601209987359336808,64,FLEN)
NAN_BOXED(4591771103757123552,64,FLEN)
NAN_BOXED(13839835219023863503,64,FLEN)
NAN_BOXED(4601209987359336808,64,FLEN)
NAN_BOXED(4591771103757123552,64,FLEN)
NAN_BOXED(13839835219023863503,64,FLEN)
NAN_BOXED(4601209987359336808,64,FLEN)
NAN_BOXED(4592118446068079176,64,FLEN)
NAN_BOXED(13828278438113712381,64,FLEN)
NAN_BOXED(4590234898020186584,64,FLEN)
NAN_BOXED(4592118446068079176,64,FLEN)
NAN_BOXED(13828278438113712381,64,FLEN)
NAN_BOXED(4590234898020186584,64,FLEN)
NAN_BOXED(4592118446068079176,64,FLEN)
NAN_BOXED(13828278438113712381,64,FLEN)
NAN_BOXED(4590234898020186584,64,FLEN)
NAN_BOXED(4592118446068079176,64,FLEN)
NAN_BOXED(13828278438113712381,64,FLEN)
NAN_BOXED(4590234898020186584,64,FLEN)
NAN_BOXED(4592118446068079176,64,FLEN)
NAN_BOXED(13828278438113712381,64,FLEN)
NAN_BOXED(4590234898020186584,64,FLEN)
NAN_BOXED(4592484995928987712,64,FLEN)
NAN_BOXED(13843613895066330134,64,FLEN)
NAN_BOXED(4605603898216859612,64,FLEN)
NAN_BOXED(4592484995928987712,64,FLEN)
NAN_BOXED(13843613895066330134,64,FLEN)
NAN_BOXED(4605603898216859612,64,FLEN)
NAN_BOXED(4592484995928987712,64,FLEN)
NAN_BOXED(13843613895066330134,64,FLEN)
NAN_BOXED(4605603898216859612,64,FLEN)
NAN_BOXED(4592484995928987712,64,FLEN)
NAN_BOXED(13843613895066330134,64,FLEN)
NAN_BOXED(4605603898216859612,64,FLEN)
NAN_BOXED(4592484995928987712,64,FLEN)
NAN_BOXED(13843613895066330134,64,FLEN)
NAN_BOXED(4605603898216859612,64,FLEN)
NAN_BOXED(4592548917264870536,64,FLEN)
NAN_BOXED(13842125813019010515,64,FLEN)
NAN_BOXED(4604362016382097316,64,FLEN)
NAN_BOXED(4592548917264870536,64,FLEN)
NAN_BOXED(13842125813019010515,64,FLEN)
NAN_BOXED(4604362016382097316,64,FLEN)
NAN_BOXED(4592548917264870536,64,FLEN)
NAN_BOXED(13842125813019010515,64,FLEN)
NAN_BOXED(4604362016382097316,64,FLEN)
NAN_BOXED(4592548917264870536,64,FLEN)
NAN_BOXED(13842125813019010515,64,FLEN)
NAN_BOXED(4604362016382097316,64,FLEN)
NAN_BOXED(4592548917264870536,64,FLEN)
NAN_BOXED(13842125813019010515,64,FLEN)
NAN_BOXED(4604362016382097316,64,FLEN)
NAN_BOXED(4592774380607965744,64,FLEN)
NAN_BOXED(13838846310907257407,64,FLEN)
NAN_BOXED(4601137493833171556,64,FLEN)
NAN_BOXED(4592774380607965744,64,FLEN)
NAN_BOXED(13838846310907257407,64,FLEN)
NAN_BOXED(4601137493833171556,64,FLEN)
NAN_BOXED(4592774380607965744,64,FLEN)
NAN_BOXED(13838846310907257407,64,FLEN)
NAN_BOXED(4601137493833171556,64,FLEN)
NAN_BOXED(4592774380607965744,64,FLEN)
NAN_BOXED(13838846310907257407,64,FLEN)
NAN_BOXED(4601137493833171556,64,FLEN)
NAN_BOXED(4592774380607965744,64,FLEN)
NAN_BOXED(13838846310907257407,64,FLEN)
NAN_BOXED(4601137493833171556,64,FLEN)
NAN_BOXED(4593018804291325616,64,FLEN)
NAN_BOXED(13820108058940054743,64,FLEN)
NAN_BOXED(4582676716426102880,64,FLEN)
NAN_BOXED(4593018804291325616,64,FLEN)
NAN_BOXED(13820108058940054743,64,FLEN)
NAN_BOXED(4582676716426102880,64,FLEN)
NAN_BOXED(4593018804291325616,64,FLEN)
NAN_BOXED(13820108058940054743,64,FLEN)
NAN_BOXED(4582676716426102880,64,FLEN)
NAN_BOXED(4593018804291325616,64,FLEN)
NAN_BOXED(13820108058940054743,64,FLEN)
NAN_BOXED(4582676716426102880,64,FLEN)
NAN_BOXED(4593018804291325616,64,FLEN)
NAN_BOXED(13820108058940054743,64,FLEN)
NAN_BOXED(4582676716426102880,64,FLEN)
NAN_BOXED(4593191967741788280,64,FLEN)
NAN_BOXED(13842694775907368191,64,FLEN)
NAN_BOXED(4605405268844279938,64,FLEN)
NAN_BOXED(4593191967741788280,64,FLEN)
NAN_BOXED(13842694775907368191,64,FLEN)
NAN_BOXED(4605405268844279938,64,FLEN)
NAN_BOXED(4593191967741788280,64,FLEN)
NAN_BOXED(13842694775907368191,64,FLEN)
NAN_BOXED(4605405268844279938,64,FLEN)
NAN_BOXED(4593191967741788280,64,FLEN)
NAN_BOXED(13842694775907368191,64,FLEN)
NAN_BOXED(4605405268844279938,64,FLEN)
NAN_BOXED(4593191967741788280,64,FLEN)
NAN_BOXED(13842694775907368191,64,FLEN)
NAN_BOXED(4605405268844279938,64,FLEN)
NAN_BOXED(4593242179320770616,64,FLEN)
NAN_BOXED(13841814446718136594,64,FLEN)
NAN_BOXED(4604609483237576164,64,FLEN)
NAN_BOXED(4593242179320770616,64,FLEN)
NAN_BOXED(13841814446718136594,64,FLEN)
NAN_BOXED(4604609483237576164,64,FLEN)
NAN_BOXED(4593242179320770616,64,FLEN)
NAN_BOXED(13841814446718136594,64,FLEN)
NAN_BOXED(4604609483237576164,64,FLEN)
NAN_BOXED(4593242179320770616,64,FLEN)
NAN_BOXED(13841814446718136594,64,FLEN)
NAN_BOXED(4604609483237576164,64,FLEN)
NAN_BOXED(4593242179320770616,64,FLEN)
NAN_BOXED(13841814446718136594,64,FLEN)
NAN_BOXED(4604609483237576164,64,FLEN)
NAN_BOXED(4593658708377954160,64,FLEN)
NAN_BOXED(13843779424706938772,64,FLEN)
NAN_BOXED(4606884087158269887,64,FLEN)
NAN_BOXED(4593658708377954160,64,FLEN)
NAN_BOXED(13843779424706938772,64,FLEN)
NAN_BOXED(4606884087158269887,64,FLEN)
NAN_BOXED(4593658708377954160,64,FLEN)
NAN_BOXED(13843779424706938772,64,FLEN)
NAN_BOXED(4606884087158269887,64,FLEN)
NAN_BOXED(4593658708377954160,64,FLEN)
NAN_BOXED(13843779424706938772,64,FLEN)
NAN_BOXED(4606884087158269887,64,FLEN)
NAN_BOXED(4593658708377954160,64,FLEN)
NAN_BOXED(13843779424706938772,64,FLEN)
NAN_BOXED(4606884087158269887,64,FLEN)
NAN_BOXED(4593877366672081076,64,FLEN)
NAN_BOXED(13820606434814631000,64,FLEN)
NAN_BOXED(4584092111192658880,64,FLEN)
NAN_BOXED(4593877366672081076,64,FLEN)
NAN_BOXED(13820606434814631000,64,FLEN)
NAN_BOXED(4584092111192658880,64,FLEN)
NAN_BOXED(4593877366672081076,64,FLEN)
NAN_BOXED(13820606434814631000,64,FLEN)
NAN_BOXED(4584092111192658880,64,FLEN)
NAN_BOXED(4593877366672081076,64,FLEN)
NAN_BOXED(13820606434814631000,64,FLEN)
NAN_BOXED(4584092111192658880,64,FLEN)
NAN_BOXED(4593877366672081076,64,FLEN)
NAN_BOXED(13820606434814631000,64,FLEN)
NAN_BOXED(4584092111192658880,64,FLEN)
NAN_BOXED(4593978877868820052,64,FLEN)
NAN_BOXED(13833464574495899726,64,FLEN)
NAN_BOXED(4597087539481491064,64,FLEN)
NAN_BOXED(4593978877868820052,64,FLEN)
NAN_BOXED(13833464574495899726,64,FLEN)
NAN_BOXED(4597087539481491064,64,FLEN)
NAN_BOXED(4593978877868820052,64,FLEN)
NAN_BOXED(13833464574495899726,64,FLEN)
NAN_BOXED(4597087539481491064,64,FLEN)
NAN_BOXED(4593978877868820052,64,FLEN)
NAN_BOXED(13833464574495899726,64,FLEN)
NAN_BOXED(4597087539481491064,64,FLEN)
NAN_BOXED(4593978877868820052,64,FLEN)
NAN_BOXED(13833464574495899726,64,FLEN)
NAN_BOXED(4597087539481491064,64,FLEN)
NAN_BOXED(4594031532545342104,64,FLEN)
NAN_BOXED(13836347716485073712,64,FLEN)
NAN_BOXED(4599927858787836620,64,FLEN)
NAN_BOXED(4594031532545342104,64,FLEN)
NAN_BOXED(13836347716485073712,64,FLEN)
NAN_BOXED(4599927858787836620,64,FLEN)
NAN_BOXED(4594031532545342104,64,FLEN)
NAN_BOXED(13836347716485073712,64,FLEN)
NAN_BOXED(4599927858787836620,64,FLEN)
NAN_BOXED(4594031532545342104,64,FLEN)
NAN_BOXED(13836347716485073712,64,FLEN)
NAN_BOXED(4599927858787836620,64,FLEN)
NAN_BOXED(4594031532545342104,64,FLEN)
NAN_BOXED(13836347716485073712,64,FLEN)
NAN_BOXED(4599927858787836620,64,FLEN)
NAN_BOXED(4594209087696891204,64,FLEN)
NAN_BOXED(13839452194787077419,64,FLEN)
NAN_BOXED(4603155025305252808,64,FLEN)
NAN_BOXED(4594209087696891204,64,FLEN)
NAN_BOXED(13839452194787077419,64,FLEN)
NAN_BOXED(4603155025305252808,64,FLEN)
NAN_BOXED(4594209087696891204,64,FLEN)
NAN_BOXED(13839452194787077419,64,FLEN)
NAN_BOXED(4603155025305252808,64,FLEN)
NAN_BOXED(4594209087696891204,64,FLEN)
NAN_BOXED(13839452194787077419,64,FLEN)
NAN_BOXED(4603155025305252808,64,FLEN)
NAN_BOXED(4594209087696891204,64,FLEN)
NAN_BOXED(13839452194787077419,64,FLEN)
NAN_BOXED(4603155025305252808,64,FLEN)
NAN_BOXED(4594323164329401412,64,FLEN)
NAN_BOXED(13835826173558769785,64,FLEN)
NAN_BOXED(4599706007380349014,64,FLEN)
NAN_BOXED(4594323164329401412,64,FLEN)
NAN_BOXED(13835826173558769785,64,FLEN)
NAN_BOXED(4599706007380349014,64,FLEN)
NAN_BOXED(4594323164329401412,64,FLEN)
NAN_BOXED(13835826173558769785,64,FLEN)
NAN_BOXED(4599706007380349014,64,FLEN)
NAN_BOXED(4594323164329401412,64,FLEN)
NAN_BOXED(13835826173558769785,64,FLEN)
NAN_BOXED(4599706007380349014,64,FLEN)
NAN_BOXED(4594323164329401412,64,FLEN)
NAN_BOXED(13835826173558769785,64,FLEN)
NAN_BOXED(4599706007380349014,64,FLEN)
NAN_BOXED(4594554954749698868,64,FLEN)
NAN_BOXED(13837839582747586867,64,FLEN)
NAN_BOXED(4602385649898956632,64,FLEN)
NAN_BOXED(4594554954749698868,64,FLEN)
NAN_BOXED(13837839582747586867,64,FLEN)
NAN_BOXED(4602385649898956632,64,FLEN)
NAN_BOXED(4594554954749698868,64,FLEN)
NAN_BOXED(13837839582747586867,64,FLEN)
NAN_BOXED(4602385649898956632,64,FLEN)
NAN_BOXED(4594554954749698868,64,FLEN)
NAN_BOXED(13837839582747586867,64,FLEN)
NAN_BOXED(4602385649898956632,64,FLEN)
NAN_BOXED(4594554954749698868,64,FLEN)
NAN_BOXED(13837839582747586867,64,FLEN)
NAN_BOXED(4602385649898956632,64,FLEN)
NAN_BOXED(4594678429530271728,64,FLEN)
NAN_BOXED(13840122825418393472,64,FLEN)
NAN_BOXED(4604372252688765704,64,FLEN)
NAN_BOXED(4594678429530271728,64,FLEN)
NAN_BOXED(13840122825418393472,64,FLEN)
NAN_BOXED(4604372252688765704,64,FLEN)
NAN_BOXED(4594678429530271728,64,FLEN)
NAN_BOXED(13840122825418393472,64,FLEN)
NAN_BOXED(4604372252688765704,64,FLEN)
NAN_BOXED(4594678429530271728,64,FLEN)
NAN_BOXED(13840122825418393472,64,FLEN)
NAN_BOXED(4604372252688765704,64,FLEN)
NAN_BOXED(4594678429530271728,64,FLEN)
NAN_BOXED(13840122825418393472,64,FLEN)
NAN_BOXED(4604372252688765704,64,FLEN)
NAN_BOXED(4594726664646185032,64,FLEN)
NAN_BOXED(13840927223386173585,64,FLEN)
NAN_BOXED(4605419339994047666,64,FLEN)
NAN_BOXED(4594726664646185032,64,FLEN)
NAN_BOXED(13840927223386173585,64,FLEN)
NAN_BOXED(4605419339994047666,64,FLEN)
NAN_BOXED(4594726664646185032,64,FLEN)
NAN_BOXED(13840927223386173585,64,FLEN)
NAN_BOXED(4605419339994047666,64,FLEN)
NAN_BOXED(4594726664646185032,64,FLEN)
NAN_BOXED(13840927223386173585,64,FLEN)
NAN_BOXED(4605419339994047666,64,FLEN)
NAN_BOXED(4594726664646185032,64,FLEN)
NAN_BOXED(13840927223386173585,64,FLEN)
NAN_BOXED(4605419339994047666,64,FLEN)
NAN_BOXED(4594788417237578904,64,FLEN)
NAN_BOXED(13837367857620903651,64,FLEN)
NAN_BOXED(4602174601261224344,64,FLEN)
NAN_BOXED(4594788417237578904,64,FLEN)
NAN_BOXED(13837367857620903651,64,FLEN)
NAN_BOXED(4602174601261224344,64,FLEN)
NAN_BOXED(4594788417237578904,64,FLEN)
NAN_BOXED(13837367857620903651,64,FLEN)
NAN_BOXED(4602174601261224344,64,FLEN)
NAN_BOXED(4594788417237578904,64,FLEN)
NAN_BOXED(13837367857620903651,64,FLEN)
NAN_BOXED(4602174601261224344,64,FLEN)
NAN_BOXED(4594788417237578904,64,FLEN)
NAN_BOXED(13837367857620903651,64,FLEN)
NAN_BOXED(4602174601261224344,64,FLEN)
NAN_BOXED(4594806780446768348,64,FLEN)
NAN_BOXED(13837696276709466625,64,FLEN)
NAN_BOXED(4602613581756896200,64,FLEN)
NAN_BOXED(4594806780446768348,64,FLEN)
NAN_BOXED(13837696276709466625,64,FLEN)
NAN_BOXED(4602613581756896200,64,FLEN)
NAN_BOXED(4594806780446768348,64,FLEN)
NAN_BOXED(13837696276709466625,64,FLEN)
NAN_BOXED(4602613581756896200,64,FLEN)
NAN_BOXED(4594806780446768348,64,FLEN)
NAN_BOXED(13837696276709466625,64,FLEN)
NAN_BOXED(4602613581756896200,64,FLEN)
NAN_BOXED(4594806780446768348,64,FLEN)
NAN_BOXED(13837696276709466625,64,FLEN)
NAN_BOXED(4602613581756896200,64,FLEN)
NAN_BOXED(4594837595112597920,64,FLEN)
NAN_BOXED(13835071454502022580,64,FLEN)
NAN_BOXED(4599358062997769448,64,FLEN)
NAN_BOXED(4594837595112597920,64,FLEN)
NAN_BOXED(13835071454502022580,64,FLEN)
NAN_BOXED(4599358062997769448,64,FLEN)
NAN_BOXED(4594837595112597920,64,FLEN)
NAN_BOXED(13835071454502022580,64,FLEN)
NAN_BOXED(4599358062997769448,64,FLEN)
NAN_BOXED(4594837595112597920,64,FLEN)
NAN_BOXED(13835071454502022580,64,FLEN)
NAN_BOXED(4599358062997769448,64,FLEN)
NAN_BOXED(4594837595112597920,64,FLEN)
NAN_BOXED(13835071454502022580,64,FLEN)
NAN_BOXED(4599358062997769448,64,FLEN)
NAN_BOXED(4594880963443537108,64,FLEN)
NAN_BOXED(13840102390705681154,64,FLEN)
NAN_BOXED(4604574101307342309,64,FLEN)
NAN_BOXED(4594880963443537108,64,FLEN)
NAN_BOXED(13840102390705681154,64,FLEN)
NAN_BOXED(4604574101307342309,64,FLEN)
NAN_BOXED(4594880963443537108,64,FLEN)
NAN_BOXED(13840102390705681154,64,FLEN)
NAN_BOXED(4604574101307342309,64,FLEN)
NAN_BOXED(4594880963443537108,64,FLEN)
NAN_BOXED(13840102390705681154,64,FLEN)
NAN_BOXED(4604574101307342309,64,FLEN)
NAN_BOXED(4594880963443537108,64,FLEN)
NAN_BOXED(13840102390705681154,64,FLEN)
NAN_BOXED(4604574101307342309,64,FLEN)
NAN_BOXED(4594935219154922872,64,FLEN)
NAN_BOXED(13825854391452823497,64,FLEN)
NAN_BOXED(4590305825677602336,64,FLEN)
NAN_BOXED(4594935219154922872,64,FLEN)
NAN_BOXED(13825854391452823497,64,FLEN)
NAN_BOXED(4590305825677602336,64,FLEN)
NAN_BOXED(4594935219154922872,64,FLEN)
NAN_BOXED(13825854391452823497,64,FLEN)
NAN_BOXED(4590305825677602336,64,FLEN)
NAN_BOXED(4594935219154922872,64,FLEN)
NAN_BOXED(13825854391452823497,64,FLEN)
NAN_BOXED(4590305825677602336,64,FLEN)
NAN_BOXED(4594935219154922872,64,FLEN)
NAN_BOXED(13825854391452823497,64,FLEN)
NAN_BOXED(4590305825677602336,64,FLEN)
NAN_BOXED(4594997734266648160,64,FLEN)
NAN_BOXED(13840145636367580132,64,FLEN)
NAN_BOXED(4604760872137040198,64,FLEN)
NAN_BOXED(4594997734266648160,64,FLEN)
NAN_BOXED(13840145636367580132,64,FLEN)
NAN_BOXED(4604760872137040198,64,FLEN)
NAN_BOXED(4594997734266648160,64,FLEN)
NAN_BOXED(13840145636367580132,64,FLEN)
NAN_BOXED(4604760872137040198,64,FLEN)
NAN_BOXED(4594997734266648160,64,FLEN)
NAN_BOXED(13840145636367580132,64,FLEN)
NAN_BOXED(4604760872137040198,64,FLEN)
NAN_BOXED(4594997734266648160,64,FLEN)
NAN_BOXED(13840145636367580132,64,FLEN)
NAN_BOXED(4604760872137040198,64,FLEN)
NAN_BOXED(4595010518721358284,64,FLEN)
NAN_BOXED(13837498275954994535,64,FLEN)
NAN_BOXED(4602679312111729663,64,FLEN)
NAN_BOXED(4595010518721358284,64,FLEN)
NAN_BOXED(13837498275954994535,64,FLEN)
NAN_BOXED(4602679312111729663,64,FLEN)
NAN_BOXED(4595010518721358284,64,FLEN)
NAN_BOXED(13837498275954994535,64,FLEN)
NAN_BOXED(4602679312111729663,64,FLEN)
NAN_BOXED(4595010518721358284,64,FLEN)
NAN_BOXED(13837498275954994535,64,FLEN)
NAN_BOXED(4602679312111729663,64,FLEN)
NAN_BOXED(4595010518721358284,64,FLEN)
NAN_BOXED(13837498275954994535,64,FLEN)
NAN_BOXED(4602679312111729663,64,FLEN)
NAN_BOXED(4595088328168309772,64,FLEN)
NAN_BOXED(13840470422989917404,64,FLEN)
NAN_BOXED(4605290168881111240,64,FLEN)
NAN_BOXED(4595088328168309772,64,FLEN)
NAN_BOXED(13840470422989917404,64,FLEN)
NAN_BOXED(4605290168881111240,64,FLEN)
NAN_BOXED(4595088328168309772,64,FLEN)
NAN_BOXED(13840470422989917404,64,FLEN)
NAN_BOXED(4605290168881111240,64,FLEN)
NAN_BOXED(4595088328168309772,64,FLEN)
NAN_BOXED(13840470422989917404,64,FLEN)
NAN_BOXED(4605290168881111240,64,FLEN)
NAN_BOXED(4595088328168309772,64,FLEN)
NAN_BOXED(13840470422989917404,64,FLEN)
NAN_BOXED(4605290168881111240,64,FLEN)
NAN_BOXED(4595302828580255196,64,FLEN)
NAN_BOXED(13838913113460323562,64,FLEN)
NAN_BOXED(4603868305902759578,64,FLEN)
NAN_BOXED(4595302828580255196,64,FLEN)
NAN_BOXED(13838913113460323562,64,FLEN)
NAN_BOXED(4603868305902759578,64,FLEN)
NAN_BOXED(4595302828580255196,64,FLEN)
NAN_BOXED(13838913113460323562,64,FLEN)
NAN_BOXED(4603868305902759578,64,FLEN)
NAN_BOXED(4595302828580255196,64,FLEN)
NAN_BOXED(13838913113460323562,64,FLEN)
NAN_BOXED(4603868305902759578,64,FLEN)
NAN_BOXED(4595302828580255196,64,FLEN)
NAN_BOXED(13838913113460323562,64,FLEN)
NAN_BOXED(4603868305902759578,64,FLEN)
NAN_BOXED(4595348954413852312,64,FLEN)
NAN_BOXED(13830912534232337764,64,FLEN)
NAN_BOXED(4595840396878080892,64,FLEN)
NAN_BOXED(4595348954413852312,64,FLEN)
NAN_BOXED(13830912534232337764,64,FLEN)
NAN_BOXED(4595840396878080892,64,FLEN)
NAN_BOXED(4595348954413852312,64,FLEN)
NAN_BOXED(13830912534232337764,64,FLEN)
NAN_BOXED(4595840396878080892,64,FLEN)
NAN_BOXED(4595348954413852312,64,FLEN)
NAN_BOXED(13830912534232337764,64,FLEN)
NAN_BOXED(4595840396878080892,64,FLEN)
NAN_BOXED(4595348954413852312,64,FLEN)
NAN_BOXED(13830912534232337764,64,FLEN)
NAN_BOXED(4595840396878080892,64,FLEN)
NAN_BOXED(4595470263591938704,64,FLEN)
NAN_BOXED(13836225355922500801,64,FLEN)
NAN_BOXED(4601607359366830524,64,FLEN)
NAN_BOXED(4595470263591938704,64,FLEN)
NAN_BOXED(13836225355922500801,64,FLEN)
NAN_BOXED(4601607359366830524,64,FLEN)
NAN_BOXED(4595470263591938704,64,FLEN)
NAN_BOXED(13836225355922500801,64,FLEN)
NAN_BOXED(4601607359366830524,64,FLEN)
NAN_BOXED(4595470263591938704,64,FLEN)
NAN_BOXED(13836225355922500801,64,FLEN)
NAN_BOXED(4601607359366830524,64,FLEN)
NAN_BOXED(4595470263591938704,64,FLEN)
NAN_BOXED(13836225355922500801,64,FLEN)
NAN_BOXED(4601607359366830524,64,FLEN)
NAN_BOXED(4595619979305355012,64,FLEN)
NAN_BOXED(13835522142008562978,64,FLEN)
NAN_BOXED(4600788440107296240,64,FLEN)
NAN_BOXED(4595619979305355012,64,FLEN)
NAN_BOXED(13835522142008562978,64,FLEN)
NAN_BOXED(4600788440107296240,64,FLEN)
NAN_BOXED(4595619979305355012,64,FLEN)
NAN_BOXED(13835522142008562978,64,FLEN)
NAN_BOXED(4600788440107296240,64,FLEN)
NAN_BOXED(4595619979305355012,64,FLEN)
NAN_BOXED(13835522142008562978,64,FLEN)
NAN_BOXED(4600788440107296240,64,FLEN)
NAN_BOXED(4595619979305355012,64,FLEN)
NAN_BOXED(13835522142008562978,64,FLEN)
NAN_BOXED(4600788440107296240,64,FLEN)
NAN_BOXED(4595895567187865088,64,FLEN)
NAN_BOXED(13835419197236483751,64,FLEN)
NAN_BOXED(4600938646261746666,64,FLEN)
NAN_BOXED(4595895567187865088,64,FLEN)
NAN_BOXED(13835419197236483751,64,FLEN)
NAN_BOXED(4600938646261746666,64,FLEN)
NAN_BOXED(4595895567187865088,64,FLEN)
NAN_BOXED(13835419197236483751,64,FLEN)
NAN_BOXED(4600938646261746666,64,FLEN)
NAN_BOXED(4595895567187865088,64,FLEN)
NAN_BOXED(13835419197236483751,64,FLEN)
NAN_BOXED(4600938646261746666,64,FLEN)
NAN_BOXED(4595895567187865088,64,FLEN)
NAN_BOXED(13835419197236483751,64,FLEN)
NAN_BOXED(4600938646261746666,64,FLEN)
NAN_BOXED(4596082186035177464,64,FLEN)
NAN_BOXED(13837889099183268958,64,FLEN)
NAN_BOXED(4603805487023488841,64,FLEN)
NAN_BOXED(4596082186035177464,64,FLEN)
NAN_BOXED(13837889099183268958,64,FLEN)
NAN_BOXED(4603805487023488841,64,FLEN)
NAN_BOXED(4596082186035177464,64,FLEN)
NAN_BOXED(13837889099183268958,64,FLEN)
NAN_BOXED(4603805487023488841,64,FLEN)
NAN_BOXED(4596082186035177464,64,FLEN)
NAN_BOXED(13837889099183268958,64,FLEN)
NAN_BOXED(4603805487023488841,64,FLEN)
NAN_BOXED(4596082186035177464,64,FLEN)
NAN_BOXED(13837889099183268958,64,FLEN)
NAN_BOXED(4603805487023488841,64,FLEN)
NAN_BOXED(4596109505961847412,64,FLEN)
NAN_BOXED(13834109186239918382,64,FLEN)
NAN_BOXED(4599881850437153784,64,FLEN)
NAN_BOXED(4596109505961847412,64,FLEN)
NAN_BOXED(13834109186239918382,64,FLEN)
NAN_BOXED(4599881850437153784,64,FLEN)
NAN_BOXED(4596109505961847412,64,FLEN)
NAN_BOXED(13834109186239918382,64,FLEN)
NAN_BOXED(4599881850437153784,64,FLEN)
NAN_BOXED(4596109505961847412,64,FLEN)
NAN_BOXED(13834109186239918382,64,FLEN)
NAN_BOXED(4599881850437153784,64,FLEN)
NAN_BOXED(4596109505961847412,64,FLEN)
NAN_BOXED(13834109186239918382,64,FLEN)
NAN_BOXED(4599881850437153784,64,FLEN)
NAN_BOXED(4596221581776878748,64,FLEN)
NAN_BOXED(13836256697172986363,64,FLEN)
NAN_BOXED(4602602500654753048,64,FLEN)
NAN_BOXED(4596221581776878748,64,FLEN)
NAN_BOXED(13836256697172986363,64,FLEN)
NAN_BOXED(4602602500654753048,64,FLEN)
NAN_BOXED(4596221581776878748,64,FLEN)
NAN_BOXED(13836256697172986363,64,FLEN)
NAN_BOXED(4602602500654753048,64,FLEN)
NAN_BOXED(4596221581776878748,64,FLEN)
NAN_BOXED(13836256697172986363,64,FLEN)
NAN_BOXED(4602602500654753048,64,FLEN)
NAN_BOXED(4596221581776878748,64,FLEN)
NAN_BOXED(13836256697172986363,64,FLEN)
NAN_BOXED(4602602500654753048,64,FLEN)
NAN_BOXED(4596273165986807080,64,FLEN)
NAN_BOXED(13839854939773453840,64,FLEN)
NAN_BOXED(4605743068825586885,64,FLEN)
NAN_BOXED(4596273165986807080,64,FLEN)
NAN_BOXED(13839854939773453840,64,FLEN)
NAN_BOXED(4605743068825586885,64,FLEN)
NAN_BOXED(4596273165986807080,64,FLEN)
NAN_BOXED(13839854939773453840,64,FLEN)
NAN_BOXED(4605743068825586885,64,FLEN)
NAN_BOXED(4596273165986807080,64,FLEN)
NAN_BOXED(13839854939773453840,64,FLEN)
NAN_BOXED(4605743068825586885,64,FLEN)
NAN_BOXED(4596273165986807080,64,FLEN)
NAN_BOXED(13839854939773453840,64,FLEN)
NAN_BOXED(4605743068825586885,64,FLEN)
NAN_BOXED(4596496889580118516,64,FLEN)
NAN_BOXED(13834677297515334174,64,FLEN)
NAN_BOXED(4600690678818580558,64,FLEN)
NAN_BOXED(4596496889580118516,64,FLEN)
NAN_BOXED(13834677297515334174,64,FLEN)
NAN_BOXED(4600690678818580558,64,FLEN)
NAN_BOXED(4596496889580118516,64,FLEN)
NAN_BOXED(13834677297515334174,64,FLEN)
NAN_BOXED(4600690678818580558,64,FLEN)
NAN_BOXED(4596496889580118516,64,FLEN)
NAN_BOXED(13834677297515334174,64,FLEN)
NAN_BOXED(4600690678818580558,64,FLEN)
NAN_BOXED(4596496889580118516,64,FLEN)
NAN_BOXED(13834677297515334174,64,FLEN)
NAN_BOXED(4600690678818580558,64,FLEN)
NAN_BOXED(4596532958732114060,64,FLEN)
NAN_BOXED(13834231904191031367,64,FLEN)
NAN_BOXED(4600361037394803986,64,FLEN)
NAN_BOXED(4596532958732114060,64,FLEN)
NAN_BOXED(13834231904191031367,64,FLEN)
NAN_BOXED(4600361037394803986,64,FLEN)
NAN_BOXED(4596532958732114060,64,FLEN)
NAN_BOXED(13834231904191031367,64,FLEN)
NAN_BOXED(4600361037394803986,64,FLEN)
NAN_BOXED(4596532958732114060,64,FLEN)
NAN_BOXED(13834231904191031367,64,FLEN)
NAN_BOXED(4600361037394803986,64,FLEN)
NAN_BOXED(4596532958732114060,64,FLEN)
NAN_BOXED(13834231904191031367,64,FLEN)
NAN_BOXED(4600361037394803986,64,FLEN)
NAN_BOXED(4596648737733128956,64,FLEN)
NAN_BOXED(13826020562061437588,64,FLEN)
NAN_BOXED(4592119978164988744,64,FLEN)
NAN_BOXED(4596648737733128956,64,FLEN)
NAN_BOXED(13826020562061437588,64,FLEN)
NAN_BOXED(4592119978164988744,64,FLEN)
NAN_BOXED(4596648737733128956,64,FLEN)
NAN_BOXED(13826020562061437588,64,FLEN)
NAN_BOXED(4592119978164988744,64,FLEN)
NAN_BOXED(4596648737733128956,64,FLEN)
NAN_BOXED(13826020562061437588,64,FLEN)
NAN_BOXED(4592119978164988744,64,FLEN)
NAN_BOXED(4596648737733128956,64,FLEN)
NAN_BOXED(13826020562061437588,64,FLEN)
NAN_BOXED(4592119978164988744,64,FLEN)
NAN_BOXED(4596976418770712580,64,FLEN)
NAN_BOXED(13837870847090245125,64,FLEN)
NAN_BOXED(4604517845943253957,64,FLEN)
NAN_BOXED(4596976418770712580,64,FLEN)
NAN_BOXED(13837870847090245125,64,FLEN)
NAN_BOXED(4604517845943253957,64,FLEN)
NAN_BOXED(4596976418770712580,64,FLEN)
NAN_BOXED(13837870847090245125,64,FLEN)
NAN_BOXED(4604517845943253957,64,FLEN)
NAN_BOXED(4596976418770712580,64,FLEN)
NAN_BOXED(13837870847090245125,64,FLEN)
NAN_BOXED(4604517845943253957,64,FLEN)
NAN_BOXED(4596976418770712580,64,FLEN)
NAN_BOXED(13837870847090245125,64,FLEN)
NAN_BOXED(4604517845943253957,64,FLEN)
NAN_BOXED(4596978328274085156,64,FLEN)
NAN_BOXED(13831422561292503287,64,FLEN)
NAN_BOXED(4598329524259819062,64,FLEN)
NAN_BOXED(4596978328274085156,64,FLEN)
NAN_BOXED(13831422561292503287,64,FLEN)
NAN_BOXED(4598329524259819062,64,FLEN)
NAN_BOXED(4596978328274085156,64,FLEN)
NAN_BOXED(13831422561292503287,64,FLEN)
NAN_BOXED(4598329524259819062,64,FLEN)
NAN_BOXED(4596978328274085156,64,FLEN)
NAN_BOXED(13831422561292503287,64,FLEN)
NAN_BOXED(4598329524259819062,64,FLEN)
NAN_BOXED(4596978328274085156,64,FLEN)
NAN_BOXED(13831422561292503287,64,FLEN)
NAN_BOXED(4598329524259819062,64,FLEN)
NAN_BOXED(4597014981894290280,64,FLEN)
NAN_BOXED(13839711757054113368,64,FLEN)
NAN_BOXED(4606283715446617497,64,FLEN)
NAN_BOXED(4597014981894290280,64,FLEN)
NAN_BOXED(13839711757054113368,64,FLEN)
NAN_BOXED(4606283715446617497,64,FLEN)
NAN_BOXED(4597014981894290280,64,FLEN)
NAN_BOXED(13839711757054113368,64,FLEN)
NAN_BOXED(4606283715446617497,64,FLEN)
NAN_BOXED(4597014981894290280,64,FLEN)
NAN_BOXED(13839711757054113368,64,FLEN)
NAN_BOXED(4606283715446617497,64,FLEN)
NAN_BOXED(4597014981894290280,64,FLEN)
NAN_BOXED(13839711757054113368,64,FLEN)
NAN_BOXED(4606283715446617497,64,FLEN)
NAN_BOXED(4597066746439850900,64,FLEN)
NAN_BOXED(13830033847730017329,64,FLEN)
NAN_BOXED(4596610207252399960,64,FLEN)
NAN_BOXED(4597066746439850900,64,FLEN)
NAN_BOXED(13830033847730017329,64,FLEN)
NAN_BOXED(4596610207252399960,64,FLEN)
NAN_BOXED(4597066746439850900,64,FLEN)
NAN_BOXED(13830033847730017329,64,FLEN)
NAN_BOXED(4596610207252399960,64,FLEN)
NAN_BOXED(4597066746439850900,64,FLEN)
NAN_BOXED(13830033847730017329,64,FLEN)
NAN_BOXED(4596610207252399960,64,FLEN)
NAN_BOXED(4597066746439850900,64,FLEN)
NAN_BOXED(13830033847730017329,64,FLEN)
NAN_BOXED(4596610207252399960,64,FLEN)
NAN_BOXED(4597085703764876716,64,FLEN)
NAN_BOXED(13808068968338959680,64,FLEN)
NAN_BOXED(4574624862216446208,64,FLEN)
NAN_BOXED(4597085703764876716,64,FLEN)
NAN_BOXED(13808068968338959680,64,FLEN)
NAN_BOXED(4574624862216446208,64,FLEN)
NAN_BOXED(4597085703764876716,64,FLEN)
NAN_BOXED(13808068968338959680,64,FLEN)
NAN_BOXED(4574624862216446208,64,FLEN)
NAN_BOXED(4597085703764876716,64,FLEN)
NAN_BOXED(13808068968338959680,64,FLEN)
NAN_BOXED(4574624862216446208,64,FLEN)
NAN_BOXED(4597085703764876716,64,FLEN)
NAN_BOXED(13808068968338959680,64,FLEN)
NAN_BOXED(4574624862216446208,64,FLEN)
NAN_BOXED(4597536164011709836,64,FLEN)
NAN_BOXED(13839762073901689700,64,FLEN)
NAN_BOXED(4606915762029568523,64,FLEN)
NAN_BOXED(4597536164011709836,64,FLEN)
NAN_BOXED(13839762073901689700,64,FLEN)
NAN_BOXED(4606915762029568523,64,FLEN)
NAN_BOXED(4597536164011709836,64,FLEN)
NAN_BOXED(13839762073901689700,64,FLEN)
NAN_BOXED(4606915762029568523,64,FLEN)
NAN_BOXED(4597536164011709836,64,FLEN)
NAN_BOXED(13839762073901689700,64,FLEN)
NAN_BOXED(4606915762029568523,64,FLEN)
NAN_BOXED(4597536164011709836,64,FLEN)
NAN_BOXED(13839762073901689700,64,FLEN)
NAN_BOXED(4606915762029568523,64,FLEN)
NAN_BOXED(4597572657877608924,64,FLEN)
NAN_BOXED(13828309254188828073,64,FLEN)
NAN_BOXED(4595477655413721964,64,FLEN)
NAN_BOXED(4597572657877608924,64,FLEN)
NAN_BOXED(13828309254188828073,64,FLEN)
NAN_BOXED(4595477655413721964,64,FLEN)
NAN_BOXED(4597572657877608924,64,FLEN)
NAN_BOXED(13828309254188828073,64,FLEN)
NAN_BOXED(4595477655413721964,64,FLEN)
NAN_BOXED(4597572657877608924,64,FLEN)
NAN_BOXED(13828309254188828073,64,FLEN)
NAN_BOXED(4595477655413721964,64,FLEN)
NAN_BOXED(4597572657877608924,64,FLEN)
NAN_BOXED(13828309254188828073,64,FLEN)
NAN_BOXED(4595477655413721964,64,FLEN)
NAN_BOXED(4597660073817909864,64,FLEN)
NAN_BOXED(13836842479611509314,64,FLEN)
NAN_BOXED(4604103614655858593,64,FLEN)
NAN_BOXED(4597660073817909864,64,FLEN)
NAN_BOXED(13836842479611509314,64,FLEN)
NAN_BOXED(4604103614655858593,64,FLEN)
NAN_BOXED(4597660073817909864,64,FLEN)
NAN_BOXED(13836842479611509314,64,FLEN)
NAN_BOXED(4604103614655858593,64,FLEN)
NAN_BOXED(4597660073817909864,64,FLEN)
NAN_BOXED(13836842479611509314,64,FLEN)
NAN_BOXED(4604103614655858593,64,FLEN)
NAN_BOXED(4597660073817909864,64,FLEN)
NAN_BOXED(13836842479611509314,64,FLEN)
NAN_BOXED(4604103614655858593,64,FLEN)
NAN_BOXED(4597725748198857764,64,FLEN)
NAN_BOXED(13826106545746348540,64,FLEN)
NAN_BOXED(4593327970025721728,64,FLEN)
NAN_BOXED(4597725748198857764,64,FLEN)
NAN_BOXED(13826106545746348540,64,FLEN)
NAN_BOXED(4593327970025721728,64,FLEN)
NAN_BOXED(4597725748198857764,64,FLEN)
NAN_BOXED(13826106545746348540,64,FLEN)
NAN_BOXED(4593327970025721728,64,FLEN)
NAN_BOXED(4597725748198857764,64,FLEN)
NAN_BOXED(13826106545746348540,64,FLEN)
NAN_BOXED(4593327970025721728,64,FLEN)
NAN_BOXED(4597725748198857764,64,FLEN)
NAN_BOXED(13826106545746348540,64,FLEN)
NAN_BOXED(4593327970025721728,64,FLEN)
NAN_BOXED(4597740946693820100,64,FLEN)
NAN_BOXED(13839442103209396864,64,FLEN)
NAN_BOXED(4606634358310730660,64,FLEN)
NAN_BOXED(4597740946693820100,64,FLEN)
NAN_BOXED(13839442103209396864,64,FLEN)
NAN_BOXED(4606634358310730660,64,FLEN)
NAN_BOXED(4597740946693820100,64,FLEN)
NAN_BOXED(13839442103209396864,64,FLEN)
NAN_BOXED(4606634358310730660,64,FLEN)
NAN_BOXED(4597740946693820100,64,FLEN)
NAN_BOXED(13839442103209396864,64,FLEN)
NAN_BOXED(4606634358310730660,64,FLEN)
NAN_BOXED(4597740946693820100,64,FLEN)
NAN_BOXED(13839442103209396864,64,FLEN)
NAN_BOXED(4606634358310730660,64,FLEN)
NAN_BOXED(4597847816520632140,64,FLEN)
NAN_BOXED(13837866992571203803,64,FLEN)
NAN_BOXED(4605221952782147486,64,FLEN)
NAN_BOXED(4597847816520632140,64,FLEN)
NAN_BOXED(13837866992571203803,64,FLEN)
NAN_BOXED(4605221952782147486,64,FLEN)
NAN_BOXED(4597847816520632140,64,FLEN)
NAN_BOXED(13837866992571203803,64,FLEN)
NAN_BOXED(4605221952782147486,64,FLEN)
NAN_BOXED(4597847816520632140,64,FLEN)
NAN_BOXED(13837866992571203803,64,FLEN)
NAN_BOXED(4605221952782147486,64,FLEN)
NAN_BOXED(4597847816520632140,64,FLEN)
NAN_BOXED(13837866992571203803,64,FLEN)
NAN_BOXED(4605221952782147486,64,FLEN)
NAN_BOXED(4597972334524338764,64,FLEN)
NAN_BOXED(13835138037369620847,64,FLEN)
NAN_BOXED(4602632295171629520,64,FLEN)
NAN_BOXED(4597972334524338764,64,FLEN)
NAN_BOXED(13835138037369620847,64,FLEN)
NAN_BOXED(4602632295171629520,64,FLEN)
NAN_BOXED(4597972334524338764,64,FLEN)
NAN_BOXED(13835138037369620847,64,FLEN)
NAN_BOXED(4602632295171629520,64,FLEN)
NAN_BOXED(4597972334524338764,64,FLEN)
NAN_BOXED(13835138037369620847,64,FLEN)
NAN_BOXED(4602632295171629520,64,FLEN)
NAN_BOXED(4597972334524338764,64,FLEN)
NAN_BOXED(13835138037369620847,64,FLEN)
NAN_BOXED(4602632295171629520,64,FLEN)
NAN_BOXED(4598222299438917146,64,FLEN)
NAN_BOXED(13837240866299239063,64,FLEN)
NAN_BOXED(4604931528832591313,64,FLEN)
NAN_BOXED(4598222299438917146,64,FLEN)
NAN_BOXED(13837240866299239063,64,FLEN)
NAN_BOXED(4604931528832591313,64,FLEN)
NAN_BOXED(4598222299438917146,64,FLEN)
NAN_BOXED(13837240866299239063,64,FLEN)
NAN_BOXED(4604931528832591313,64,FLEN)
NAN_BOXED(4598222299438917146,64,FLEN)
NAN_BOXED(13837240866299239063,64,FLEN)
NAN_BOXED(4604931528832591313,64,FLEN)
NAN_BOXED(4598222299438917146,64,FLEN)
NAN_BOXED(13837240866299239063,64,FLEN)
NAN_BOXED(4604931528832591313,64,FLEN)
NAN_BOXED(4598284187761866274,64,FLEN)
NAN_BOXED(13832254931166739437,64,FLEN)
NAN_BOXED(4600025807647030168,64,FLEN)
NAN_BOXED(4598284187761866274,64,FLEN)
NAN_BOXED(13832254931166739437,64,FLEN)
NAN_BOXED(4600025807647030168,64,FLEN)
NAN_BOXED(4598284187761866274,64,FLEN)
NAN_BOXED(13832254931166739437,64,FLEN)
NAN_BOXED(4600025807647030168,64,FLEN)
NAN_BOXED(4598284187761866274,64,FLEN)
NAN_BOXED(13832254931166739437,64,FLEN)
NAN_BOXED(4600025807647030168,64,FLEN)
NAN_BOXED(4598284187761866274,64,FLEN)
NAN_BOXED(13832254931166739437,64,FLEN)
NAN_BOXED(4600025807647030168,64,FLEN)
NAN_BOXED(4598287774626008684,64,FLEN)
NAN_BOXED(13836253689743154466,64,FLEN)
NAN_BOXED(4604016890307854671,64,FLEN)
NAN_BOXED(4598287774626008684,64,FLEN)
NAN_BOXED(13836253689743154466,64,FLEN)
NAN_BOXED(4604016890307854671,64,FLEN)
NAN_BOXED(4598287774626008684,64,FLEN)
NAN_BOXED(13836253689743154466,64,FLEN)
NAN_BOXED(4604016890307854671,64,FLEN)
NAN_BOXED(4598287774626008684,64,FLEN)
NAN_BOXED(13836253689743154466,64,FLEN)
NAN_BOXED(4604016890307854671,64,FLEN)
NAN_BOXED(4598287774626008684,64,FLEN)
NAN_BOXED(13836253689743154466,64,FLEN)
NAN_BOXED(4604016890307854671,64,FLEN)
NAN_BOXED(4598424756943793462,64,FLEN)
NAN_BOXED(13834945506450787929,64,FLEN)
NAN_BOXED(4602868964078280998,64,FLEN)
NAN_BOXED(4598424756943793462,64,FLEN)
NAN_BOXED(13834945506450787929,64,FLEN)
NAN_BOXED(4602868964078280998,64,FLEN)
NAN_BOXED(4598424756943793462,64,FLEN)
NAN_BOXED(13834945506450787929,64,FLEN)
NAN_BOXED(4602868964078280998,64,FLEN)
NAN_BOXED(4598424756943793462,64,FLEN)
NAN_BOXED(13834945506450787929,64,FLEN)
NAN_BOXED(4602868964078280998,64,FLEN)
NAN_BOXED(4598424756943793462,64,FLEN)
NAN_BOXED(13834945506450787929,64,FLEN)
NAN_BOXED(4602868964078280998,64,FLEN)
NAN_BOXED(4598426004025637100,64,FLEN)
NAN_BOXED(13830502388799301683,64,FLEN)
NAN_BOXED(4598398520917593478,64,FLEN)
NAN_BOXED(4598426004025637100,64,FLEN)
NAN_BOXED(13830502388799301683,64,FLEN)
NAN_BOXED(4598398520917593478,64,FLEN)
NAN_BOXED(4598426004025637100,64,FLEN)
NAN_BOXED(13830502388799301683,64,FLEN)
NAN_BOXED(4598398520917593478,64,FLEN)
NAN_BOXED(4598426004025637100,64,FLEN)
NAN_BOXED(13830502388799301683,64,FLEN)
NAN_BOXED(4598398520917593478,64,FLEN)
NAN_BOXED(4598426004025637100,64,FLEN)
NAN_BOXED(13830502388799301683,64,FLEN)
NAN_BOXED(4598398520917593478,64,FLEN)
NAN_BOXED(4598623039410049908,64,FLEN)
NAN_BOXED(13830830051568503743,64,FLEN)
NAN_BOXED(4598926039474888770,64,FLEN)
NAN_BOXED(4598623039410049908,64,FLEN)
NAN_BOXED(13830830051568503743,64,FLEN)
NAN_BOXED(4598926039474888770,64,FLEN)
NAN_BOXED(4598623039410049908,64,FLEN)
NAN_BOXED(13830830051568503743,64,FLEN)
NAN_BOXED(4598926039474888770,64,FLEN)
NAN_BOXED(4598623039410049908,64,FLEN)
NAN_BOXED(13830830051568503743,64,FLEN)
NAN_BOXED(4598926039474888770,64,FLEN)
NAN_BOXED(4598623039410049908,64,FLEN)
NAN_BOXED(13830830051568503743,64,FLEN)
NAN_BOXED(4598926039474888770,64,FLEN)
NAN_BOXED(4598630715451775278,64,FLEN)
NAN_BOXED(13832599057737151584,64,FLEN)
NAN_BOXED(4600882109424174956,64,FLEN)
NAN_BOXED(4598630715451775278,64,FLEN)
NAN_BOXED(13832599057737151584,64,FLEN)
NAN_BOXED(4600882109424174956,64,FLEN)
NAN_BOXED(4598630715451775278,64,FLEN)
NAN_BOXED(13832599057737151584,64,FLEN)
NAN_BOXED(4600882109424174956,64,FLEN)
NAN_BOXED(4598630715451775278,64,FLEN)
NAN_BOXED(13832599057737151584,64,FLEN)
NAN_BOXED(4600882109424174956,64,FLEN)
NAN_BOXED(4598630715451775278,64,FLEN)
NAN_BOXED(13832599057737151584,64,FLEN)
NAN_BOXED(4600882109424174956,64,FLEN)
NAN_BOXED(4598690729355619812,64,FLEN)
NAN_BOXED(13835823591695222280,64,FLEN)
NAN_BOXED(4604047493418910492,64,FLEN)
NAN_BOXED(4598690729355619812,64,FLEN)
NAN_BOXED(13835823591695222280,64,FLEN)
NAN_BOXED(4604047493418910492,64,FLEN)
NAN_BOXED(4598690729355619812,64,FLEN)
NAN_BOXED(13835823591695222280,64,FLEN)
NAN_BOXED(4604047493418910492,64,FLEN)
NAN_BOXED(4598690729355619812,64,FLEN)
NAN_BOXED(13835823591695222280,64,FLEN)
NAN_BOXED(4604047493418910492,64,FLEN)
NAN_BOXED(4598690729355619812,64,FLEN)
NAN_BOXED(13835823591695222280,64,FLEN)
NAN_BOXED(4604047493418910492,64,FLEN)
NAN_BOXED(4598742275107728040,64,FLEN)
NAN_BOXED(13836859740952317622,64,FLEN)
NAN_BOXED(4605274413581729563,64,FLEN)
NAN_BOXED(4598742275107728040,64,FLEN)
NAN_BOXED(13836859740952317622,64,FLEN)
NAN_BOXED(4605274413581729563,64,FLEN)
NAN_BOXED(4598742275107728040,64,FLEN)
NAN_BOXED(13836859740952317622,64,FLEN)
NAN_BOXED(4605274413581729563,64,FLEN)
NAN_BOXED(4598742275107728040,64,FLEN)
NAN_BOXED(13836859740952317622,64,FLEN)
NAN_BOXED(4605274413581729563,64,FLEN)
NAN_BOXED(4598742275107728040,64,FLEN)
NAN_BOXED(13836859740952317622,64,FLEN)
NAN_BOXED(4605274413581729563,64,FLEN)
NAN_BOXED(4598772502552008634,64,FLEN)
NAN_BOXED(13812640921949957728,64,FLEN)
NAN_BOXED(4580872345887491424,64,FLEN)
NAN_BOXED(4598772502552008634,64,FLEN)
NAN_BOXED(13812640921949957728,64,FLEN)
NAN_BOXED(4580872345887491424,64,FLEN)
NAN_BOXED(4598772502552008634,64,FLEN)
NAN_BOXED(13812640921949957728,64,FLEN)
NAN_BOXED(4580872345887491424,64,FLEN)
NAN_BOXED(4598772502552008634,64,FLEN)
NAN_BOXED(13812640921949957728,64,FLEN)
NAN_BOXED(4580872345887491424,64,FLEN)
NAN_BOXED(4598772502552008634,64,FLEN)
NAN_BOXED(13812640921949957728,64,FLEN)
NAN_BOXED(4580872345887491424,64,FLEN)
NAN_BOXED(4598796907212595288,64,FLEN)
NAN_BOXED(13834419829213146200,64,FLEN)
NAN_BOXED(4602937342678702977,64,FLEN)
NAN_BOXED(4598796907212595288,64,FLEN)
NAN_BOXED(13834419829213146200,64,FLEN)
NAN_BOXED(4602937342678702977,64,FLEN)
NAN_BOXED(4598796907212595288,64,FLEN)
NAN_BOXED(13834419829213146200,64,FLEN)
NAN_BOXED(4602937342678702977,64,FLEN)
NAN_BOXED(4598796907212595288,64,FLEN)
NAN_BOXED(13834419829213146200,64,FLEN)
NAN_BOXED(4602937342678702977,64,FLEN)
NAN_BOXED(4598796907212595288,64,FLEN)
NAN_BOXED(13834419829213146200,64,FLEN)
NAN_BOXED(4602937342678702977,64,FLEN)
NAN_BOXED(4598905942896383038,64,FLEN)
NAN_BOXED(13818584484374165838,64,FLEN)
NAN_BOXED(4587185975790547600,64,FLEN)
NAN_BOXED(4598905942896383038,64,FLEN)
NAN_BOXED(13818584484374165838,64,FLEN)
NAN_BOXED(4587185975790547600,64,FLEN)
NAN_BOXED(4598905942896383038,64,FLEN)
NAN_BOXED(13818584484374165838,64,FLEN)
NAN_BOXED(4587185975790547600,64,FLEN)
NAN_BOXED(4598905942896383038,64,FLEN)
NAN_BOXED(13818584484374165838,64,FLEN)
NAN_BOXED(4587185975790547600,64,FLEN)
NAN_BOXED(4598905942896383038,64,FLEN)
NAN_BOXED(13818584484374165838,64,FLEN)
NAN_BOXED(4587185975790547600,64,FLEN)
NAN_BOXED(4598907693791936598,64,FLEN)
NAN_BOXED(13836955668839468712,64,FLEN)
NAN_BOXED(4605617538554870456,64,FLEN)
NAN_BOXED(4598907693791936598,64,FLEN)
NAN_BOXED(13836955668839468712,64,FLEN)
NAN_BOXED(4605617538554870456,64,FLEN)
NAN_BOXED(4598907693791936598,64,FLEN)
NAN_BOXED(13836955668839468712,64,FLEN)
NAN_BOXED(4605617538554870456,64,FLEN)
NAN_BOXED(4598907693791936598,64,FLEN)
NAN_BOXED(13836955668839468712,64,FLEN)
NAN_BOXED(4605617538554870456,64,FLEN)
NAN_BOXED(4598907693791936598,64,FLEN)
NAN_BOXED(13836955668839468712,64,FLEN)
NAN_BOXED(4605617538554870456,64,FLEN)
NAN_BOXED(4598967576292520812,64,FLEN)
NAN_BOXED(13834660371353703406,64,FLEN)
NAN_BOXED(4603237349990604501,64,FLEN)
NAN_BOXED(4598967576292520812,64,FLEN)
NAN_BOXED(13834660371353703406,64,FLEN)
NAN_BOXED(4603237349990604501,64,FLEN)
NAN_BOXED(4598967576292520812,64,FLEN)
NAN_BOXED(13834660371353703406,64,FLEN)
NAN_BOXED(4603237349990604501,64,FLEN)
NAN_BOXED(4598967576292520812,64,FLEN)
NAN_BOXED(13834660371353703406,64,FLEN)
NAN_BOXED(4603237349990604501,64,FLEN)
NAN_BOXED(4598967576292520812,64,FLEN)
NAN_BOXED(13834660371353703406,64,FLEN)
NAN_BOXED(4603237349990604501,64,FLEN)
NAN_BOXED(4598982791029505510,64,FLEN)
NAN_BOXED(13836659403067327131,64,FLEN)
NAN_BOXED(4605374887148547879,64,FLEN)
NAN_BOXED(4598982791029505510,64,FLEN)
NAN_BOXED(13836659403067327131,64,FLEN)
NAN_BOXED(4605374887148547879,64,FLEN)
NAN_BOXED(4598982791029505510,64,FLEN)
NAN_BOXED(13836659403067327131,64,FLEN)
NAN_BOXED(4605374887148547879,64,FLEN)
NAN_BOXED(4598982791029505510,64,FLEN)
NAN_BOXED(13836659403067327131,64,FLEN)
NAN_BOXED(4605374887148547879,64,FLEN)
NAN_BOXED(4598982791029505510,64,FLEN)
NAN_BOXED(13836659403067327131,64,FLEN)
NAN_BOXED(4605374887148547879,64,FLEN)
NAN_BOXED(4599037291105930546,64,FLEN)
NAN_BOXED(13818588140991982671,64,FLEN)
NAN_BOXED(4587366619047148688,64,FLEN)
NAN_BOXED(4599037291105930546,64,FLEN)
NAN_BOXED(13818588140991982671,64,FLEN)
NAN_BOXED(4587366619047148688,64,FLEN)
NAN_BOXED(4599037291105930546,64,FLEN)
NAN_BOXED(13818588140991982671,64,FLEN)
NAN_BOXED(4587366619047148688,64,FLEN)
NAN_BOXED(4599037291105930546,64,FLEN)
NAN_BOXED(13818588140991982671,64,FLEN)
NAN_BOXED(4587366619047148688,64,FLEN)
NAN_BOXED(4599037291105930546,64,FLEN)
NAN_BOXED(13818588140991982671,64,FLEN)
NAN_BOXED(4587366619047148688,64,FLEN)
NAN_BOXED(4599054016301010232,64,FLEN)
NAN_BOXED(13836659865797769714,64,FLEN)
NAN_BOXED(4605471991059158074,64,FLEN)
NAN_BOXED(4599054016301010232,64,FLEN)
NAN_BOXED(13836659865797769714,64,FLEN)
NAN_BOXED(4605471991059158074,64,FLEN)
NAN_BOXED(4599054016301010232,64,FLEN)
NAN_BOXED(13836659865797769714,64,FLEN)
NAN_BOXED(4605471991059158074,64,FLEN)
NAN_BOXED(4599054016301010232,64,FLEN)
NAN_BOXED(13836659865797769714,64,FLEN)
NAN_BOXED(4605471991059158074,64,FLEN)
NAN_BOXED(4599054016301010232,64,FLEN)
NAN_BOXED(13836659865797769714,64,FLEN)
NAN_BOXED(4605471991059158074,64,FLEN)
NAN_BOXED(4599056757393713386,64,FLEN)
NAN_BOXED(13836663685729405943,64,FLEN)
NAN_BOXED(4605480274733393951,64,FLEN)
NAN_BOXED(4599056757393713386,64,FLEN)
NAN_BOXED(13836663685729405943,64,FLEN)
NAN_BOXED(4605480274733393951,64,FLEN)
NAN_BOXED(4599056757393713386,64,FLEN)
NAN_BOXED(13836663685729405943,64,FLEN)
NAN_BOXED(4605480274733393951,64,FLEN)
NAN_BOXED(4599056757393713386,64,FLEN)
NAN_BOXED(13836663685729405943,64,FLEN)
NAN_BOXED(4605480274733393951,64,FLEN)
NAN_BOXED(4599056757393713386,64,FLEN)
NAN_BOXED(13836663685729405943,64,FLEN)
NAN_BOXED(4605480274733393951,64,FLEN)
NAN_BOXED(4599147431139324510,64,FLEN)
NAN_BOXED(13836291627854857520,64,FLEN)
NAN_BOXED(4605150900003502556,64,FLEN)
NAN_BOXED(4599147431139324510,64,FLEN)
NAN_BOXED(13836291627854857520,64,FLEN)
NAN_BOXED(4605150900003502556,64,FLEN)
NAN_BOXED(4599147431139324510,64,FLEN)
NAN_BOXED(13836291627854857520,64,FLEN)
NAN_BOXED(4605150900003502556,64,FLEN)
NAN_BOXED(4599147431139324510,64,FLEN)
NAN_BOXED(13836291627854857520,64,FLEN)
NAN_BOXED(4605150900003502556,64,FLEN)
NAN_BOXED(4599147431139324510,64,FLEN)
NAN_BOXED(13836291627854857520,64,FLEN)
NAN_BOXED(4605150900003502556,64,FLEN)
NAN_BOXED(4599217922907108616,64,FLEN)
NAN_BOXED(13811319460835771404,64,FLEN)
NAN_BOXED(4580451925951900320,64,FLEN)
NAN_BOXED(4599217922907108616,64,FLEN)
NAN_BOXED(13811319460835771404,64,FLEN)
NAN_BOXED(4580451925951900320,64,FLEN)
NAN_BOXED(4599217922907108616,64,FLEN)
NAN_BOXED(13811319460835771404,64,FLEN)
NAN_BOXED(4580451925951900320,64,FLEN)
NAN_BOXED(4599217922907108616,64,FLEN)
NAN_BOXED(13811319460835771404,64,FLEN)
NAN_BOXED(4580451925951900320,64,FLEN)
NAN_BOXED(4599217922907108616,64,FLEN)
NAN_BOXED(13811319460835771404,64,FLEN)
NAN_BOXED(4580451925951900320,64,FLEN)
NAN_BOXED(4599242411939043286,64,FLEN)
NAN_BOXED(13833129486452659903,64,FLEN)
NAN_BOXED(4602427633142046688,64,FLEN)
NAN_BOXED(4599242411939043286,64,FLEN)
NAN_BOXED(13833129486452659903,64,FLEN)
NAN_BOXED(4602427633142046688,64,FLEN)
NAN_BOXED(4599242411939043286,64,FLEN)
NAN_BOXED(13833129486452659903,64,FLEN)
NAN_BOXED(4602427633142046688,64,FLEN)
NAN_BOXED(4599242411939043286,64,FLEN)
NAN_BOXED(13833129486452659903,64,FLEN)
NAN_BOXED(4602427633142046688,64,FLEN)
NAN_BOXED(4599242411939043286,64,FLEN)
NAN_BOXED(13833129486452659903,64,FLEN)
NAN_BOXED(4602427633142046688,64,FLEN)
NAN_BOXED(4599284837973086056,64,FLEN)
NAN_BOXED(13834169011317776514,64,FLEN)
NAN_BOXED(4603234392165065476,64,FLEN)
NAN_BOXED(4599284837973086056,64,FLEN)
NAN_BOXED(13834169011317776514,64,FLEN)
NAN_BOXED(4603234392165065476,64,FLEN)
NAN_BOXED(4599284837973086056,64,FLEN)
NAN_BOXED(13834169011317776514,64,FLEN)
NAN_BOXED(4603234392165065476,64,FLEN)
NAN_BOXED(4599284837973086056,64,FLEN)
NAN_BOXED(13834169011317776514,64,FLEN)
NAN_BOXED(4603234392165065476,64,FLEN)
NAN_BOXED(4599284837973086056,64,FLEN)
NAN_BOXED(13834169011317776514,64,FLEN)
NAN_BOXED(4603234392165065476,64,FLEN)
NAN_BOXED(4599284923262720956,64,FLEN)
NAN_BOXED(13837204966269305653,64,FLEN)
NAN_BOXED(4606464440738539349,64,FLEN)
NAN_BOXED(4599284923262720956,64,FLEN)
NAN_BOXED(13837204966269305653,64,FLEN)
NAN_BOXED(4606464440738539349,64,FLEN)
NAN_BOXED(4599284923262720956,64,FLEN)
NAN_BOXED(13837204966269305653,64,FLEN)
NAN_BOXED(4606464440738539349,64,FLEN)
NAN_BOXED(4599284923262720956,64,FLEN)
NAN_BOXED(13837204966269305653,64,FLEN)
NAN_BOXED(4606464440738539349,64,FLEN)
NAN_BOXED(4599284923262720956,64,FLEN)
NAN_BOXED(13837204966269305653,64,FLEN)
NAN_BOXED(4606464440738539349,64,FLEN)
NAN_BOXED(4599299223475258634,64,FLEN)
NAN_BOXED(13832346132312990064,64,FLEN)
NAN_BOXED(4601538065017481038,64,FLEN)
NAN_BOXED(4599299223475258634,64,FLEN)
NAN_BOXED(13832346132312990064,64,FLEN)
NAN_BOXED(4601538065017481038,64,FLEN)
NAN_BOXED(4599299223475258634,64,FLEN)
NAN_BOXED(13832346132312990064,64,FLEN)
NAN_BOXED(4601538065017481038,64,FLEN)
NAN_BOXED(4599299223475258634,64,FLEN)
NAN_BOXED(13832346132312990064,64,FLEN)
NAN_BOXED(4601538065017481038,64,FLEN)
NAN_BOXED(4599299223475258634,64,FLEN)
NAN_BOXED(13832346132312990064,64,FLEN)
NAN_BOXED(4601538065017481038,64,FLEN)
NAN_BOXED(4599345447371409310,64,FLEN)
NAN_BOXED(13837081594889821276,64,FLEN)
NAN_BOXED(4606398388754073109,64,FLEN)
NAN_BOXED(4599345447371409310,64,FLEN)
NAN_BOXED(13837081594889821276,64,FLEN)
NAN_BOXED(4606398388754073109,64,FLEN)
NAN_BOXED(4599345447371409310,64,FLEN)
NAN_BOXED(13837081594889821276,64,FLEN)
NAN_BOXED(4606398388754073109,64,FLEN)
NAN_BOXED(4599345447371409310,64,FLEN)
NAN_BOXED(13837081594889821276,64,FLEN)
NAN_BOXED(4606398388754073109,64,FLEN)
NAN_BOXED(4599345447371409310,64,FLEN)
NAN_BOXED(13837081594889821276,64,FLEN)
NAN_BOXED(4606398388754073109,64,FLEN)
NAN_BOXED(4599367046327928844,64,FLEN)
NAN_BOXED(13822227205209631876,64,FLEN)
NAN_BOXED(4591219736656624176,64,FLEN)
NAN_BOXED(4599367046327928844,64,FLEN)
NAN_BOXED(13822227205209631876,64,FLEN)
NAN_BOXED(4591219736656624176,64,FLEN)
NAN_BOXED(4599367046327928844,64,FLEN)
NAN_BOXED(13822227205209631876,64,FLEN)
NAN_BOXED(4591219736656624176,64,FLEN)
NAN_BOXED(4599367046327928844,64,FLEN)
NAN_BOXED(13822227205209631876,64,FLEN)
NAN_BOXED(4591219736656624176,64,FLEN)
NAN_BOXED(4599367046327928844,64,FLEN)
NAN_BOXED(13822227205209631876,64,FLEN)
NAN_BOXED(4591219736656624176,64,FLEN)
NAN_BOXED(4599462841828534882,64,FLEN)
NAN_BOXED(13831559786275778074,64,FLEN)
NAN_BOXED(4600755606106311736,64,FLEN)
NAN_BOXED(4599462841828534882,64,FLEN)
NAN_BOXED(13831559786275778074,64,FLEN)
NAN_BOXED(4600755606106311736,64,FLEN)
NAN_BOXED(4599462841828534882,64,FLEN)
NAN_BOXED(13831559786275778074,64,FLEN)
NAN_BOXED(4600755606106311736,64,FLEN)
NAN_BOXED(4599462841828534882,64,FLEN)
NAN_BOXED(13831559786275778074,64,FLEN)
NAN_BOXED(4600755606106311736,64,FLEN)
NAN_BOXED(4599462841828534882,64,FLEN)
NAN_BOXED(13831559786275778074,64,FLEN)
NAN_BOXED(4600755606106311736,64,FLEN)
NAN_BOXED(4599706420657250552,64,FLEN)
NAN_BOXED(13834839923955546633,64,FLEN)
NAN_BOXED(4604063872847008841,64,FLEN)
NAN_BOXED(4599706420657250552,64,FLEN)
NAN_BOXED(13834839923955546633,64,FLEN)
NAN_BOXED(4604063872847008841,64,FLEN)
NAN_BOXED(4599706420657250552,64,FLEN)
NAN_BOXED(13834839923955546633,64,FLEN)
NAN_BOXED(4604063872847008841,64,FLEN)
NAN_BOXED(4599706420657250552,64,FLEN)
NAN_BOXED(13834839923955546633,64,FLEN)
NAN_BOXED(4604063872847008841,64,FLEN)
NAN_BOXED(4599706420657250552,64,FLEN)
NAN_BOXED(13834839923955546633,64,FLEN)
NAN_BOXED(4604063872847008841,64,FLEN)
NAN_BOXED(4599739384108867980,64,FLEN)
NAN_BOXED(13813417742852731944,64,FLEN)
NAN_BOXED(4582907504106146784,64,FLEN)
NAN_BOXED(4599739384108867980,64,FLEN)
NAN_BOXED(13813417742852731944,64,FLEN)
NAN_BOXED(4582907504106146784,64,FLEN)
NAN_BOXED(4599739384108867980,64,FLEN)
NAN_BOXED(13813417742852731944,64,FLEN)
NAN_BOXED(4582907504106146784,64,FLEN)
NAN_BOXED(4599739384108867980,64,FLEN)
NAN_BOXED(13813417742852731944,64,FLEN)
NAN_BOXED(4582907504106146784,64,FLEN)
NAN_BOXED(4599739384108867980,64,FLEN)
NAN_BOXED(13813417742852731944,64,FLEN)
NAN_BOXED(4582907504106146784,64,FLEN)
NAN_BOXED(4599907109616573690,64,FLEN)
NAN_BOXED(13834624747550951347,64,FLEN)
NAN_BOXED(4604110739650964920,64,FLEN)
NAN_BOXED(4599907109616573690,64,FLEN)
NAN_BOXED(13834624747550951347,64,FLEN)
NAN_BOXED(4604110739650964920,64,FLEN)
NAN_BOXED(4599907109616573690,64,FLEN)
NAN_BOXED(13834624747550951347,64,FLEN)
NAN_BOXED(4604110739650964920,64,FLEN)
NAN_BOXED(4599907109616573690,64,FLEN)
NAN_BOXED(13834624747550951347,64,FLEN)
NAN_BOXED(4604110739650964920,64,FLEN)
NAN_BOXED(4599907109616573690,64,FLEN)
NAN_BOXED(13834624747550951347,64,FLEN)
NAN_BOXED(4604110739650964920,64,FLEN)
NAN_BOXED(4599911047649831732,64,FLEN)
NAN_BOXED(13834291344427784755,64,FLEN)
NAN_BOXED(4603883534682500540,64,FLEN)
NAN_BOXED(4599911047649831732,64,FLEN)
NAN_BOXED(13834291344427784755,64,FLEN)
NAN_BOXED(4603883534682500540,64,FLEN)
NAN_BOXED(4599911047649831732,64,FLEN)
NAN_BOXED(13834291344427784755,64,FLEN)
NAN_BOXED(4603883534682500540,64,FLEN)
NAN_BOXED(4599911047649831732,64,FLEN)
NAN_BOXED(13834291344427784755,64,FLEN)
NAN_BOXED(4603883534682500540,64,FLEN)
NAN_BOXED(4599911047649831732,64,FLEN)
NAN_BOXED(13834291344427784755,64,FLEN)
NAN_BOXED(4603883534682500540,64,FLEN)
NAN_BOXED(4600022827036407612,64,FLEN)
NAN_BOXED(13836147724543877801,64,FLEN)
NAN_BOXED(4606063134129901553,64,FLEN)
NAN_BOXED(4600022827036407612,64,FLEN)
NAN_BOXED(13836147724543877801,64,FLEN)
NAN_BOXED(4606063134129901553,64,FLEN)
NAN_BOXED(4600022827036407612,64,FLEN)
NAN_BOXED(13836147724543877801,64,FLEN)
NAN_BOXED(4606063134129901553,64,FLEN)
NAN_BOXED(4600022827036407612,64,FLEN)
NAN_BOXED(13836147724543877801,64,FLEN)
NAN_BOXED(4606063134129901553,64,FLEN)
NAN_BOXED(4600022827036407612,64,FLEN)
NAN_BOXED(13836147724543877801,64,FLEN)
NAN_BOXED(4606063134129901553,64,FLEN)
NAN_BOXED(4600030084753934862,64,FLEN)
NAN_BOXED(13827010314489172480,64,FLEN)
NAN_BOXED(4596881108848795256,64,FLEN)
NAN_BOXED(4600030084753934862,64,FLEN)
NAN_BOXED(13827010314489172480,64,FLEN)
NAN_BOXED(4596881108848795256,64,FLEN)
NAN_BOXED(4600030084753934862,64,FLEN)
NAN_BOXED(13827010314489172480,64,FLEN)
NAN_BOXED(4596881108848795256,64,FLEN)
NAN_BOXED(4600030084753934862,64,FLEN)
NAN_BOXED(13827010314489172480,64,FLEN)
NAN_BOXED(4596881108848795256,64,FLEN)
NAN_BOXED(4600030084753934862,64,FLEN)
NAN_BOXED(13827010314489172480,64,FLEN)
NAN_BOXED(4596881108848795256,64,FLEN)
NAN_BOXED(4600123144647341406,64,FLEN)
NAN_BOXED(13832852392733426155,64,FLEN)
NAN_BOXED(4603046909514147449,64,FLEN)
NAN_BOXED(4600123144647341406,64,FLEN)
NAN_BOXED(13832852392733426155,64,FLEN)
NAN_BOXED(4603046909514147449,64,FLEN)
NAN_BOXED(4600123144647341406,64,FLEN)
NAN_BOXED(13832852392733426155,64,FLEN)
NAN_BOXED(4603046909514147449,64,FLEN)
NAN_BOXED(4600123144647341406,64,FLEN)
NAN_BOXED(13832852392733426155,64,FLEN)
NAN_BOXED(4603046909514147449,64,FLEN)
NAN_BOXED(4600123144647341406,64,FLEN)
NAN_BOXED(13832852392733426155,64,FLEN)
NAN_BOXED(4603046909514147449,64,FLEN)
NAN_BOXED(4600228311166825122,64,FLEN)
NAN_BOXED(13835173384937269427,64,FLEN)
NAN_BOXED(4604899816692352471,64,FLEN)
NAN_BOXED(4600228311166825122,64,FLEN)
NAN_BOXED(13835173384937269427,64,FLEN)
NAN_BOXED(4604899816692352471,64,FLEN)
NAN_BOXED(4600228311166825122,64,FLEN)
NAN_BOXED(13835173384937269427,64,FLEN)
NAN_BOXED(4604899816692352471,64,FLEN)
NAN_BOXED(4600228311166825122,64,FLEN)
NAN_BOXED(13835173384937269427,64,FLEN)
NAN_BOXED(4604899816692352471,64,FLEN)
NAN_BOXED(4600228311166825122,64,FLEN)
NAN_BOXED(13835173384937269427,64,FLEN)
NAN_BOXED(4604899816692352471,64,FLEN)
NAN_BOXED(4600312379444673980,64,FLEN)
NAN_BOXED(13836207077244219714,64,FLEN)
NAN_BOXED(4606510263460606843,64,FLEN)
NAN_BOXED(4600312379444673980,64,FLEN)
NAN_BOXED(13836207077244219714,64,FLEN)
NAN_BOXED(4606510263460606843,64,FLEN)
NAN_BOXED(4600312379444673980,64,FLEN)
NAN_BOXED(13836207077244219714,64,FLEN)
NAN_BOXED(4606510263460606843,64,FLEN)
NAN_BOXED(4600312379444673980,64,FLEN)
NAN_BOXED(13836207077244219714,64,FLEN)
NAN_BOXED(4606510263460606843,64,FLEN)
NAN_BOXED(4600312379444673980,64,FLEN)
NAN_BOXED(13836207077244219714,64,FLEN)
NAN_BOXED(4606510263460606843,64,FLEN)
NAN_BOXED(4600348742794877560,64,FLEN)
NAN_BOXED(13834650275978085050,64,FLEN)
NAN_BOXED(4604550051727547808,64,FLEN)
NAN_BOXED(4600348742794877560,64,FLEN)
NAN_BOXED(13834650275978085050,64,FLEN)
NAN_BOXED(4604550051727547808,64,FLEN)
NAN_BOXED(4600348742794877560,64,FLEN)
NAN_BOXED(13834650275978085050,64,FLEN)
NAN_BOXED(4604550051727547808,64,FLEN)
NAN_BOXED(4600348742794877560,64,FLEN)
NAN_BOXED(13834650275978085050,64,FLEN)
NAN_BOXED(4604550051727547808,64,FLEN)
NAN_BOXED(4600348742794877560,64,FLEN)
NAN_BOXED(13834650275978085050,64,FLEN)
NAN_BOXED(4604550051727547808,64,FLEN)
NAN_BOXED(4600351296791873760,64,FLEN)
NAN_BOXED(13832132923130809392,64,FLEN)
NAN_BOXED(4602685638580919339,64,FLEN)
NAN_BOXED(4600351296791873760,64,FLEN)
NAN_BOXED(13832132923130809392,64,FLEN)
NAN_BOXED(4602685638580919339,64,FLEN)
NAN_BOXED(4600351296791873760,64,FLEN)
NAN_BOXED(13832132923130809392,64,FLEN)
NAN_BOXED(4602685638580919339,64,FLEN)
NAN_BOXED(4600351296791873760,64,FLEN)
NAN_BOXED(13832132923130809392,64,FLEN)
NAN_BOXED(4602685638580919339,64,FLEN)
NAN_BOXED(4600351296791873760,64,FLEN)
NAN_BOXED(13832132923130809392,64,FLEN)
NAN_BOXED(4602685638580919339,64,FLEN)
NAN_BOXED(4600360626053929868,64,FLEN)
NAN_BOXED(13836384885196528092,64,FLEN)
NAN_BOXED(4606834910061125084,64,FLEN)
NAN_BOXED(4600360626053929868,64,FLEN)
NAN_BOXED(13836384885196528092,64,FLEN)
NAN_BOXED(4606834910061125084,64,FLEN)
NAN_BOXED(4600360626053929868,64,FLEN)
NAN_BOXED(13836384885196528092,64,FLEN)
NAN_BOXED(4606834910061125084,64,FLEN)
NAN_BOXED(4600360626053929868,64,FLEN)
NAN_BOXED(13836384885196528092,64,FLEN)
NAN_BOXED(4606834910061125084,64,FLEN)
NAN_BOXED(4600360626053929868,64,FLEN)
NAN_BOXED(13836384885196528092,64,FLEN)
NAN_BOXED(4606834910061125084,64,FLEN)
NAN_BOXED(4600424999002150690,64,FLEN)
NAN_BOXED(13816291516552064887,64,FLEN)
NAN_BOXED(4586350263663136752,64,FLEN)
NAN_BOXED(4600424999002150690,64,FLEN)
NAN_BOXED(13816291516552064887,64,FLEN)
NAN_BOXED(4586350263663136752,64,FLEN)
NAN_BOXED(4600424999002150690,64,FLEN)
NAN_BOXED(13816291516552064887,64,FLEN)
NAN_BOXED(4586350263663136752,64,FLEN)
NAN_BOXED(4600424999002150690,64,FLEN)
NAN_BOXED(13816291516552064887,64,FLEN)
NAN_BOXED(4586350263663136752,64,FLEN)
NAN_BOXED(4600424999002150690,64,FLEN)
NAN_BOXED(13816291516552064887,64,FLEN)
NAN_BOXED(4586350263663136752,64,FLEN)
NAN_BOXED(4600443015949147886,64,FLEN)
NAN_BOXED(13832680654120478610,64,FLEN)
NAN_BOXED(4603159342492442764,64,FLEN)
NAN_BOXED(4600443015949147886,64,FLEN)
NAN_BOXED(13832680654120478610,64,FLEN)
NAN_BOXED(4603159342492442764,64,FLEN)
NAN_BOXED(4600443015949147886,64,FLEN)
NAN_BOXED(13832680654120478610,64,FLEN)
NAN_BOXED(4603159342492442764,64,FLEN)
NAN_BOXED(4600443015949147886,64,FLEN)
NAN_BOXED(13832680654120478610,64,FLEN)
NAN_BOXED(4603159342492442764,64,FLEN)
NAN_BOXED(4600443015949147886,64,FLEN)
NAN_BOXED(13832680654120478610,64,FLEN)
NAN_BOXED(4603159342492442764,64,FLEN)
NAN_BOXED(4600491335287252166,64,FLEN)
NAN_BOXED(13835650689077772452,64,FLEN)
NAN_BOXED(4605892349014167448,64,FLEN)
NAN_BOXED(4600491335287252166,64,FLEN)
NAN_BOXED(13835650689077772452,64,FLEN)
NAN_BOXED(4605892349014167448,64,FLEN)
NAN_BOXED(4600491335287252166,64,FLEN)
NAN_BOXED(13835650689077772452,64,FLEN)
NAN_BOXED(4605892349014167448,64,FLEN)
NAN_BOXED(4600491335287252166,64,FLEN)
NAN_BOXED(13835650689077772452,64,FLEN)
NAN_BOXED(4605892349014167448,64,FLEN)
NAN_BOXED(4600491335287252166,64,FLEN)
NAN_BOXED(13835650689077772452,64,FLEN)
NAN_BOXED(4605892349014167448,64,FLEN)
NAN_BOXED(4600560616714257710,64,FLEN)
NAN_BOXED(13830563919375064253,64,FLEN)
NAN_BOXED(4600575093031875404,64,FLEN)
NAN_BOXED(4600560616714257710,64,FLEN)
NAN_BOXED(13830563919375064253,64,FLEN)
NAN_BOXED(4600575093031875404,64,FLEN)
NAN_BOXED(4600560616714257710,64,FLEN)
NAN_BOXED(13830563919375064253,64,FLEN)
NAN_BOXED(4600575093031875404,64,FLEN)
NAN_BOXED(4600560616714257710,64,FLEN)
NAN_BOXED(13830563919375064253,64,FLEN)
NAN_BOXED(4600575093031875404,64,FLEN)
NAN_BOXED(4600560616714257710,64,FLEN)
NAN_BOXED(13830563919375064253,64,FLEN)
NAN_BOXED(4600575093031875404,64,FLEN)
NAN_BOXED(4600629448376813088,64,FLEN)
NAN_BOXED(13832874014895945547,64,FLEN)
NAN_BOXED(4603445933294621369,64,FLEN)
NAN_BOXED(4600629448376813088,64,FLEN)
NAN_BOXED(13832874014895945547,64,FLEN)
NAN_BOXED(4603445933294621369,64,FLEN)
NAN_BOXED(4600629448376813088,64,FLEN)
NAN_BOXED(13832874014895945547,64,FLEN)
NAN_BOXED(4603445933294621369,64,FLEN)
NAN_BOXED(4600629448376813088,64,FLEN)
NAN_BOXED(13832874014895945547,64,FLEN)
NAN_BOXED(4603445933294621369,64,FLEN)
NAN_BOXED(4600629448376813088,64,FLEN)
NAN_BOXED(13832874014895945547,64,FLEN)
NAN_BOXED(4603445933294621369,64,FLEN)
NAN_BOXED(4600669883263312024,64,FLEN)
NAN_BOXED(13836219767992799684,64,FLEN)
NAN_BOXED(4606978699196174337,64,FLEN)
NAN_BOXED(4600669883263312024,64,FLEN)
NAN_BOXED(13836219767992799684,64,FLEN)
NAN_BOXED(4606978699196174337,64,FLEN)
NAN_BOXED(4600669883263312024,64,FLEN)
NAN_BOXED(13836219767992799684,64,FLEN)
NAN_BOXED(4606978699196174337,64,FLEN)
NAN_BOXED(4600669883263312024,64,FLEN)
NAN_BOXED(13836219767992799684,64,FLEN)
NAN_BOXED(4606978699196174337,64,FLEN)
NAN_BOXED(4600669883263312024,64,FLEN)
NAN_BOXED(13836219767992799684,64,FLEN)
NAN_BOXED(4606978699196174337,64,FLEN)
NAN_BOXED(4600671769791631210,64,FLEN)
NAN_BOXED(13835688731613298002,64,FLEN)
NAN_BOXED(4606155658344535902,64,FLEN)
NAN_BOXED(4600671769791631210,64,FLEN)
NAN_BOXED(13835688731613298002,64,FLEN)
NAN_BOXED(4606155658344535902,64,FLEN)
NAN_BOXED(4600671769791631210,64,FLEN)
NAN_BOXED(13835688731613298002,64,FLEN)
NAN_BOXED(4606155658344535902,64,FLEN)
NAN_BOXED(4600671769791631210,64,FLEN)
NAN_BOXED(13835688731613298002,64,FLEN)
NAN_BOXED(4606155658344535902,64,FLEN)
NAN_BOXED(4600671769791631210,64,FLEN)
NAN_BOXED(13835688731613298002,64,FLEN)
NAN_BOXED(4606155658344535902,64,FLEN)
NAN_BOXED(4600780069667162188,64,FLEN)
NAN_BOXED(13831789284312340286,64,FLEN)
NAN_BOXED(4602703966822802956,64,FLEN)
NAN_BOXED(4600780069667162188,64,FLEN)
NAN_BOXED(13831789284312340286,64,FLEN)
NAN_BOXED(4602703966822802956,64,FLEN)
NAN_BOXED(4600780069667162188,64,FLEN)
NAN_BOXED(13831789284312340286,64,FLEN)
NAN_BOXED(4602703966822802956,64,FLEN)
NAN_BOXED(4600780069667162188,64,FLEN)
NAN_BOXED(13831789284312340286,64,FLEN)
NAN_BOXED(4602703966822802956,64,FLEN)
NAN_BOXED(4600780069667162188,64,FLEN)
NAN_BOXED(13831789284312340286,64,FLEN)
NAN_BOXED(4602703966822802956,64,FLEN)
NAN_BOXED(4600825145107666432,64,FLEN)
NAN_BOXED(13832786978398976305,64,FLEN)
NAN_BOXED(4603525053572857672,64,FLEN)
NAN_BOXED(4600825145107666432,64,FLEN)
NAN_BOXED(13832786978398976305,64,FLEN)
NAN_BOXED(4603525053572857672,64,FLEN)
NAN_BOXED(4600825145107666432,64,FLEN)
NAN_BOXED(13832786978398976305,64,FLEN)
NAN_BOXED(4603525053572857672,64,FLEN)
NAN_BOXED(4600825145107666432,64,FLEN)
NAN_BOXED(13832786978398976305,64,FLEN)
NAN_BOXED(4603525053572857672,64,FLEN)
NAN_BOXED(4600825145107666432,64,FLEN)
NAN_BOXED(13832786978398976305,64,FLEN)
NAN_BOXED(4603525053572857672,64,FLEN)
NAN_BOXED(4600854959201071950,64,FLEN)
NAN_BOXED(13829319283874886120,64,FLEN)
NAN_BOXED(4599869896284495016,64,FLEN)
NAN_BOXED(4600854959201071950,64,FLEN)
NAN_BOXED(13829319283874886120,64,FLEN)
NAN_BOXED(4599869896284495016,64,FLEN)
NAN_BOXED(4600854959201071950,64,FLEN)
NAN_BOXED(13829319283874886120,64,FLEN)
NAN_BOXED(4599869896284495016,64,FLEN)
NAN_BOXED(4600854959201071950,64,FLEN)
NAN_BOXED(13829319283874886120,64,FLEN)
NAN_BOXED(4599869896284495016,64,FLEN)
NAN_BOXED(4600854959201071950,64,FLEN)
NAN_BOXED(13829319283874886120,64,FLEN)
NAN_BOXED(4599869896284495016,64,FLEN)
NAN_BOXED(4600924470803490742,64,FLEN)
NAN_BOXED(13834988756931144196,64,FLEN)
NAN_BOXED(4605372269444078703,64,FLEN)
NAN_BOXED(4600924470803490742,64,FLEN)
NAN_BOXED(13834988756931144196,64,FLEN)
NAN_BOXED(4605372269444078703,64,FLEN)
NAN_BOXED(4600924470803490742,64,FLEN)
NAN_BOXED(13834988756931144196,64,FLEN)
NAN_BOXED(4605372269444078703,64,FLEN)
NAN_BOXED(4600924470803490742,64,FLEN)
NAN_BOXED(13834988756931144196,64,FLEN)
NAN_BOXED(4605372269444078703,64,FLEN)
NAN_BOXED(4600924470803490742,64,FLEN)
NAN_BOXED(13834988756931144196,64,FLEN)
NAN_BOXED(4605372269444078703,64,FLEN)
NAN_BOXED(4600926964767950846,64,FLEN)
NAN_BOXED(13829221574962466065,64,FLEN)
NAN_BOXED(4599853322585370064,64,FLEN)
NAN_BOXED(4600926964767950846,64,FLEN)
NAN_BOXED(13829221574962466065,64,FLEN)
NAN_BOXED(4599853322585370064,64,FLEN)
NAN_BOXED(4600926964767950846,64,FLEN)
NAN_BOXED(13829221574962466065,64,FLEN)
NAN_BOXED(4599853322585370064,64,FLEN)
NAN_BOXED(4600926964767950846,64,FLEN)
NAN_BOXED(13829221574962466065,64,FLEN)
NAN_BOXED(4599853322585370064,64,FLEN)
NAN_BOXED(4600926964767950846,64,FLEN)
NAN_BOXED(13829221574962466065,64,FLEN)
NAN_BOXED(4599853322585370064,64,FLEN)
NAN_BOXED(4601084387850760372,64,FLEN)
NAN_BOXED(13833835251600868602,64,FLEN)
NAN_BOXED(4604581641369809828,64,FLEN)
NAN_BOXED(4601084387850760372,64,FLEN)
NAN_BOXED(13833835251600868602,64,FLEN)
NAN_BOXED(4604581641369809828,64,FLEN)
NAN_BOXED(4601084387850760372,64,FLEN)
NAN_BOXED(13833835251600868602,64,FLEN)
NAN_BOXED(4604581641369809828,64,FLEN)
NAN_BOXED(4601084387850760372,64,FLEN)
NAN_BOXED(13833835251600868602,64,FLEN)
NAN_BOXED(4604581641369809828,64,FLEN)
NAN_BOXED(4601084387850760372,64,FLEN)
NAN_BOXED(13833835251600868602,64,FLEN)
NAN_BOXED(4604581641369809828,64,FLEN)
NAN_BOXED(4601164601114374022,64,FLEN)
NAN_BOXED(13834054492020962455,64,FLEN)
NAN_BOXED(4604833348482681947,64,FLEN)
NAN_BOXED(4601164601114374022,64,FLEN)
NAN_BOXED(13834054492020962455,64,FLEN)
NAN_BOXED(4604833348482681947,64,FLEN)
NAN_BOXED(4601164601114374022,64,FLEN)
NAN_BOXED(13834054492020962455,64,FLEN)
NAN_BOXED(4604833348482681947,64,FLEN)
NAN_BOXED(4601164601114374022,64,FLEN)
NAN_BOXED(13834054492020962455,64,FLEN)
NAN_BOXED(4604833348482681947,64,FLEN)
NAN_BOXED(4601164601114374022,64,FLEN)
NAN_BOXED(13834054492020962455,64,FLEN)
NAN_BOXED(4604833348482681947,64,FLEN)
NAN_BOXED(4601179373196708490,64,FLEN)
NAN_BOXED(13832063882180259009,64,FLEN)
NAN_BOXED(4603187245541117496,64,FLEN)
NAN_BOXED(4601179373196708490,64,FLEN)
NAN_BOXED(13832063882180259009,64,FLEN)
NAN_BOXED(4603187245541117496,64,FLEN)
NAN_BOXED(4601179373196708490,64,FLEN)
NAN_BOXED(13832063882180259009,64,FLEN)
NAN_BOXED(4603187245541117496,64,FLEN)
NAN_BOXED(4601179373196708490,64,FLEN)
NAN_BOXED(13832063882180259009,64,FLEN)
NAN_BOXED(4603187245541117496,64,FLEN)
NAN_BOXED(4601179373196708490,64,FLEN)
NAN_BOXED(13832063882180259009,64,FLEN)
NAN_BOXED(4603187245541117496,64,FLEN)
NAN_BOXED(4601256370100605618,64,FLEN)
NAN_BOXED(13827345965869152547,64,FLEN)
NAN_BOXED(4598554576479795132,64,FLEN)
NAN_BOXED(4601256370100605618,64,FLEN)
NAN_BOXED(13827345965869152547,64,FLEN)
NAN_BOXED(4598554576479795132,64,FLEN)
NAN_BOXED(4601256370100605618,64,FLEN)
NAN_BOXED(13827345965869152547,64,FLEN)
NAN_BOXED(4598554576479795132,64,FLEN)
NAN_BOXED(4601256370100605618,64,FLEN)
NAN_BOXED(13827345965869152547,64,FLEN)
NAN_BOXED(4598554576479795132,64,FLEN)
NAN_BOXED(4601256370100605618,64,FLEN)
NAN_BOXED(13827345965869152547,64,FLEN)
NAN_BOXED(4598554576479795132,64,FLEN)
NAN_BOXED(4601266669497352024,64,FLEN)
NAN_BOXED(13827175332650044663,64,FLEN)
NAN_BOXED(4598417325763493418,64,FLEN)
NAN_BOXED(4601266669497352024,64,FLEN)
NAN_BOXED(13827175332650044663,64,FLEN)
NAN_BOXED(4598417325763493418,64,FLEN)
NAN_BOXED(4601266669497352024,64,FLEN)
NAN_BOXED(13827175332650044663,64,FLEN)
NAN_BOXED(4598417325763493418,64,FLEN)
NAN_BOXED(4601266669497352024,64,FLEN)
NAN_BOXED(13827175332650044663,64,FLEN)
NAN_BOXED(4598417325763493418,64,FLEN)
NAN_BOXED(4601266669497352024,64,FLEN)
NAN_BOXED(13827175332650044663,64,FLEN)
NAN_BOXED(4598417325763493418,64,FLEN)
NAN_BOXED(4601311581388974762,64,FLEN)
NAN_BOXED(13829180357053560841,64,FLEN)
NAN_BOXED(4600146062555210846,64,FLEN)
NAN_BOXED(4601311581388974762,64,FLEN)
NAN_BOXED(13829180357053560841,64,FLEN)
NAN_BOXED(4600146062555210846,64,FLEN)
NAN_BOXED(4601311581388974762,64,FLEN)
NAN_BOXED(13829180357053560841,64,FLEN)
NAN_BOXED(4600146062555210846,64,FLEN)
NAN_BOXED(4601311581388974762,64,FLEN)
NAN_BOXED(13829180357053560841,64,FLEN)
NAN_BOXED(4600146062555210846,64,FLEN)
NAN_BOXED(4601311581388974762,64,FLEN)
NAN_BOXED(13829180357053560841,64,FLEN)
NAN_BOXED(4600146062555210846,64,FLEN)
NAN_BOXED(4601481141027944458,64,FLEN)
NAN_BOXED(13816001114651065517,64,FLEN)
NAN_BOXED(4587066425792191664,64,FLEN)
NAN_BOXED(4601481141027944458,64,FLEN)
NAN_BOXED(13816001114651065517,64,FLEN)
NAN_BOXED(4587066425792191664,64,FLEN)
NAN_BOXED(4601481141027944458,64,FLEN)
NAN_BOXED(13816001114651065517,64,FLEN)
NAN_BOXED(4587066425792191664,64,FLEN)
NAN_BOXED(4601481141027944458,64,FLEN)
NAN_BOXED(13816001114651065517,64,FLEN)
NAN_BOXED(4587066425792191664,64,FLEN)
NAN_BOXED(4601481141027944458,64,FLEN)
NAN_BOXED(13816001114651065517,64,FLEN)
NAN_BOXED(4587066425792191664,64,FLEN)
NAN_BOXED(4601546805015018978,64,FLEN)
NAN_BOXED(13817810370827448174,64,FLEN)
NAN_BOXED(4589272367550187512,64,FLEN)
NAN_BOXED(4601546805015018978,64,FLEN)
NAN_BOXED(13817810370827448174,64,FLEN)
NAN_BOXED(4589272367550187512,64,FLEN)
NAN_BOXED(4601546805015018978,64,FLEN)
NAN_BOXED(13817810370827448174,64,FLEN)
NAN_BOXED(4589272367550187512,64,FLEN)
NAN_BOXED(4601546805015018978,64,FLEN)
NAN_BOXED(13817810370827448174,64,FLEN)
NAN_BOXED(4589272367550187512,64,FLEN)
NAN_BOXED(4601546805015018978,64,FLEN)
NAN_BOXED(13817810370827448174,64,FLEN)
NAN_BOXED(4589272367550187512,64,FLEN)
NAN_BOXED(4601570985754062730,64,FLEN)
NAN_BOXED(13833222342000129024,64,FLEN)
NAN_BOXED(4604464654216931515,64,FLEN)
NAN_BOXED(4601570985754062730,64,FLEN)
NAN_BOXED(13833222342000129024,64,FLEN)
NAN_BOXED(4604464654216931515,64,FLEN)
NAN_BOXED(4601570985754062730,64,FLEN)
NAN_BOXED(13833222342000129024,64,FLEN)
NAN_BOXED(4604464654216931515,64,FLEN)
NAN_BOXED(4601570985754062730,64,FLEN)
NAN_BOXED(13833222342000129024,64,FLEN)
NAN_BOXED(4604464654216931515,64,FLEN)
NAN_BOXED(4601570985754062730,64,FLEN)
NAN_BOXED(13833222342000129024,64,FLEN)
NAN_BOXED(4604464654216931515,64,FLEN)
NAN_BOXED(4601672656808666108,64,FLEN)
NAN_BOXED(13826897651355066786,64,FLEN)
NAN_BOXED(4598424341180586558,64,FLEN)
NAN_BOXED(4601672656808666108,64,FLEN)
NAN_BOXED(13826897651355066786,64,FLEN)
NAN_BOXED(4598424341180586558,64,FLEN)
NAN_BOXED(4601672656808666108,64,FLEN)
NAN_BOXED(13826897651355066786,64,FLEN)
NAN_BOXED(4598424341180586558,64,FLEN)
NAN_BOXED(4601672656808666108,64,FLEN)
NAN_BOXED(13826897651355066786,64,FLEN)
NAN_BOXED(4598424341180586558,64,FLEN)
NAN_BOXED(4601672656808666108,64,FLEN)
NAN_BOXED(13826897651355066786,64,FLEN)
NAN_BOXED(4598424341180586558,64,FLEN)
NAN_BOXED(4601743562820152518,64,FLEN)
NAN_BOXED(13827290576208816082,64,FLEN)
NAN_BOXED(4598818586056273736,64,FLEN)
NAN_BOXED(4601743562820152518,64,FLEN)
NAN_BOXED(13827290576208816082,64,FLEN)
NAN_BOXED(4598818586056273736,64,FLEN)
NAN_BOXED(4601743562820152518,64,FLEN)
NAN_BOXED(13827290576208816082,64,FLEN)
NAN_BOXED(4598818586056273736,64,FLEN)
NAN_BOXED(4601743562820152518,64,FLEN)
NAN_BOXED(13827290576208816082,64,FLEN)
NAN_BOXED(4598818586056273736,64,FLEN)
NAN_BOXED(4601743562820152518,64,FLEN)
NAN_BOXED(13827290576208816082,64,FLEN)
NAN_BOXED(4598818586056273736,64,FLEN)
NAN_BOXED(4601816111094740776,64,FLEN)
NAN_BOXED(13828490153319406601,64,FLEN)
NAN_BOXED(4599949527300890938,64,FLEN)
NAN_BOXED(4601816111094740776,64,FLEN)
NAN_BOXED(13828490153319406601,64,FLEN)
NAN_BOXED(4599949527300890938,64,FLEN)
NAN_BOXED(4601816111094740776,64,FLEN)
NAN_BOXED(13828490153319406601,64,FLEN)
NAN_BOXED(4599949527300890938,64,FLEN)
NAN_BOXED(4601816111094740776,64,FLEN)
NAN_BOXED(13828490153319406601,64,FLEN)
NAN_BOXED(4599949527300890938,64,FLEN)
NAN_BOXED(4601816111094740776,64,FLEN)
NAN_BOXED(13828490153319406601,64,FLEN)
NAN_BOXED(4599949527300890938,64,FLEN)
NAN_BOXED(4601823109077941118,64,FLEN)
NAN_BOXED(13834030100264816495,64,FLEN)
NAN_BOXED(4605396412400775095,64,FLEN)
NAN_BOXED(4601823109077941118,64,FLEN)
NAN_BOXED(13834030100264816495,64,FLEN)
NAN_BOXED(4605396412400775095,64,FLEN)
NAN_BOXED(4601823109077941118,64,FLEN)
NAN_BOXED(13834030100264816495,64,FLEN)
NAN_BOXED(4605396412400775095,64,FLEN)
NAN_BOXED(4601823109077941118,64,FLEN)
NAN_BOXED(13834030100264816495,64,FLEN)
NAN_BOXED(4605396412400775095,64,FLEN)
NAN_BOXED(4601823109077941118,64,FLEN)
NAN_BOXED(13834030100264816495,64,FLEN)
NAN_BOXED(4605396412400775095,64,FLEN)
NAN_BOXED(4601826042890741250,64,FLEN)
NAN_BOXED(13810918006950706007,64,FLEN)
NAN_BOXED(4582343165335120832,64,FLEN)
NAN_BOXED(4601826042890741250,64,FLEN)
NAN_BOXED(13810918006950706007,64,FLEN)
NAN_BOXED(4582343165335120832,64,FLEN)
NAN_BOXED(4601826042890741250,64,FLEN)
NAN_BOXED(13810918006950706007,64,FLEN)
NAN_BOXED(4582343165335120832,64,FLEN)
NAN_BOXED(4601826042890741250,64,FLEN)
NAN_BOXED(13810918006950706007,64,FLEN)
NAN_BOXED(4582343165335120832,64,FLEN)
NAN_BOXED(4601826042890741250,64,FLEN)
NAN_BOXED(13810918006950706007,64,FLEN)
NAN_BOXED(4582343165335120832,64,FLEN)
NAN_BOXED(4601940277134255482,64,FLEN)
NAN_BOXED(13828076138643474883,64,FLEN)
NAN_BOXED(4599665168828057754,64,FLEN)
NAN_BOXED(4601940277134255482,64,FLEN)
NAN_BOXED(13828076138643474883,64,FLEN)
NAN_BOXED(4599665168828057754,64,FLEN)
NAN_BOXED(4601940277134255482,64,FLEN)
NAN_BOXED(13828076138643474883,64,FLEN)
NAN_BOXED(4599665168828057754,64,FLEN)
NAN_BOXED(4601940277134255482,64,FLEN)
NAN_BOXED(13828076138643474883,64,FLEN)
NAN_BOXED(4599665168828057754,64,FLEN)
NAN_BOXED(4601940277134255482,64,FLEN)
NAN_BOXED(13828076138643474883,64,FLEN)
NAN_BOXED(4599665168828057754,64,FLEN)
NAN_BOXED(4602161442139513948,64,FLEN)
NAN_BOXED(13830735346757355078,64,FLEN)
NAN_BOXED(4602502443433875796,64,FLEN)
NAN_BOXED(4602161442139513948,64,FLEN)
NAN_BOXED(13830735346757355078,64,FLEN)
NAN_BOXED(4602502443433875796,64,FLEN)
NAN_BOXED(4602161442139513948,64,FLEN)
NAN_BOXED(13830735346757355078,64,FLEN)
NAN_BOXED(4602502443433875796,64,FLEN)
NAN_BOXED(4602161442139513948,64,FLEN)
NAN_BOXED(13830735346757355078,64,FLEN)
NAN_BOXED(4602502443433875796,64,FLEN)
NAN_BOXED(4602161442139513948,64,FLEN)
NAN_BOXED(13830735346757355078,64,FLEN)
NAN_BOXED(4602502443433875796,64,FLEN)
NAN_BOXED(4602317557272972900,64,FLEN)
NAN_BOXED(13834364741919747388,64,FLEN)
NAN_BOXED(4606155651038937340,64,FLEN)
NAN_BOXED(4602317557272972900,64,FLEN)
NAN_BOXED(13834364741919747388,64,FLEN)
NAN_BOXED(4606155651038937340,64,FLEN)
NAN_BOXED(4602317557272972900,64,FLEN)
NAN_BOXED(13834364741919747388,64,FLEN)
NAN_BOXED(4606155651038937340,64,FLEN)
NAN_BOXED(4602317557272972900,64,FLEN)
NAN_BOXED(13834364741919747388,64,FLEN)
NAN_BOXED(4606155651038937340,64,FLEN)
NAN_BOXED(4602317557272972900,64,FLEN)
NAN_BOXED(13834364741919747388,64,FLEN)
NAN_BOXED(4606155651038937340,64,FLEN)
NAN_BOXED(4602382256581006026,64,FLEN)
NAN_BOXED(13829510999158688807,64,FLEN)
NAN_BOXED(4601373155954467438,64,FLEN)
NAN_BOXED(4602382256581006026,64,FLEN)
NAN_BOXED(13829510999158688807,64,FLEN)
NAN_BOXED(4601373155954467438,64,FLEN)
NAN_BOXED(4602382256581006026,64,FLEN)
NAN_BOXED(13829510999158688807,64,FLEN)
NAN_BOXED(4601373155954467438,64,FLEN)
NAN_BOXED(4602382256581006026,64,FLEN)
NAN_BOXED(13829510999158688807,64,FLEN)
NAN_BOXED(4601373155954467438,64,FLEN)
NAN_BOXED(4602382256581006026,64,FLEN)
NAN_BOXED(13829510999158688807,64,FLEN)
NAN_BOXED(4601373155954467438,64,FLEN)
NAN_BOXED(4602493199838742092,64,FLEN)
NAN_BOXED(13827122369662862190,64,FLEN)
NAN_BOXED(4599131841883097260,64,FLEN)
NAN_BOXED(4602493199838742092,64,FLEN)
NAN_BOXED(13827122369662862190,64,FLEN)
NAN_BOXED(4599131841883097260,64,FLEN)
NAN_BOXED(4602493199838742092,64,FLEN)
NAN_BOXED(13827122369662862190,64,FLEN)
NAN_BOXED(4599131841883097260,64,FLEN)
NAN_BOXED(4602493199838742092,64,FLEN)
NAN_BOXED(13827122369662862190,64,FLEN)
NAN_BOXED(4599131841883097260,64,FLEN)
NAN_BOXED(4602493199838742092,64,FLEN)
NAN_BOXED(13827122369662862190,64,FLEN)
NAN_BOXED(4599131841883097260,64,FLEN)
NAN_BOXED(4602530269991050244,64,FLEN)
NAN_BOXED(13831536414431233196,64,FLEN)
NAN_BOXED(4603570308626888001,64,FLEN)
NAN_BOXED(4602530269991050244,64,FLEN)
NAN_BOXED(13831536414431233196,64,FLEN)
NAN_BOXED(4603570308626888001,64,FLEN)
NAN_BOXED(4602530269991050244,64,FLEN)
NAN_BOXED(13831536414431233196,64,FLEN)
NAN_BOXED(4603570308626888001,64,FLEN)
NAN_BOXED(4602530269991050244,64,FLEN)
NAN_BOXED(13831536414431233196,64,FLEN)
NAN_BOXED(4603570308626888001,64,FLEN)
NAN_BOXED(4602530269991050244,64,FLEN)
NAN_BOXED(13831536414431233196,64,FLEN)
NAN_BOXED(4603570308626888001,64,FLEN)
NAN_BOXED(4602545202214865668,64,FLEN)
NAN_BOXED(13827009277480890579,64,FLEN)
NAN_BOXED(4599052614852933800,64,FLEN)
NAN_BOXED(4602545202214865668,64,FLEN)
NAN_BOXED(13827009277480890579,64,FLEN)
NAN_BOXED(4599052614852933800,64,FLEN)
NAN_BOXED(4602545202214865668,64,FLEN)
NAN_BOXED(13827009277480890579,64,FLEN)
NAN_BOXED(4599052614852933800,64,FLEN)
NAN_BOXED(4602545202214865668,64,FLEN)
NAN_BOXED(13827009277480890579,64,FLEN)
NAN_BOXED(4599052614852933800,64,FLEN)
NAN_BOXED(4602545202214865668,64,FLEN)
NAN_BOXED(13827009277480890579,64,FLEN)
NAN_BOXED(4599052614852933800,64,FLEN)
NAN_BOXED(4602569893591020032,64,FLEN)
NAN_BOXED(13820884036647260055,64,FLEN)
NAN_BOXED(4592907495011954832,64,FLEN)
NAN_BOXED(4602569893591020032,64,FLEN)
NAN_BOXED(13820884036647260055,64,FLEN)
NAN_BOXED(4592907495011954832,64,FLEN)
NAN_BOXED(4602569893591020032,64,FLEN)
NAN_BOXED(13820884036647260055,64,FLEN)
NAN_BOXED(4592907495011954832,64,FLEN)
NAN_BOXED(4602569893591020032,64,FLEN)
NAN_BOXED(13820884036647260055,64,FLEN)
NAN_BOXED(4592907495011954832,64,FLEN)
NAN_BOXED(4602569893591020032,64,FLEN)
NAN_BOXED(13820884036647260055,64,FLEN)
NAN_BOXED(4592907495011954832,64,FLEN)
NAN_BOXED(4602590128971978242,64,FLEN)
NAN_BOXED(13826856544400858145,64,FLEN)
NAN_BOXED(4598928629535067626,64,FLEN)
NAN_BOXED(4602590128971978242,64,FLEN)
NAN_BOXED(13826856544400858145,64,FLEN)
NAN_BOXED(4598928629535067626,64,FLEN)
NAN_BOXED(4602590128971978242,64,FLEN)
NAN_BOXED(13826856544400858145,64,FLEN)
NAN_BOXED(4598928629535067626,64,FLEN)
NAN_BOXED(4602590128971978242,64,FLEN)
NAN_BOXED(13826856544400858145,64,FLEN)
NAN_BOXED(4598928629535067626,64,FLEN)
NAN_BOXED(4602590128971978242,64,FLEN)
NAN_BOXED(13826856544400858145,64,FLEN)
NAN_BOXED(4598928629535067626,64,FLEN)
NAN_BOXED(4602670360594407726,64,FLEN)
NAN_BOXED(13831707963562903961,64,FLEN)
NAN_BOXED(4603827014542937294,64,FLEN)
NAN_BOXED(4602670360594407726,64,FLEN)
NAN_BOXED(13831707963562903961,64,FLEN)
NAN_BOXED(4603827014542937294,64,FLEN)
NAN_BOXED(4602670360594407726,64,FLEN)
NAN_BOXED(13831707963562903961,64,FLEN)
NAN_BOXED(4603827014542937294,64,FLEN)
NAN_BOXED(4602670360594407726,64,FLEN)
NAN_BOXED(13831707963562903961,64,FLEN)
NAN_BOXED(4603827014542937294,64,FLEN)
NAN_BOXED(4602670360594407726,64,FLEN)
NAN_BOXED(13831707963562903961,64,FLEN)
NAN_BOXED(4603827014542937294,64,FLEN)
NAN_BOXED(4602700611776081207,64,FLEN)
NAN_BOXED(13827826928417003318,64,FLEN)
NAN_BOXED(4599981678828294688,64,FLEN)
NAN_BOXED(4602700611776081207,64,FLEN)
NAN_BOXED(13827826928417003318,64,FLEN)
NAN_BOXED(4599981678828294688,64,FLEN)
NAN_BOXED(4602700611776081207,64,FLEN)
NAN_BOXED(13827826928417003318,64,FLEN)
NAN_BOXED(4599981678828294688,64,FLEN)
NAN_BOXED(4602700611776081207,64,FLEN)
NAN_BOXED(13827826928417003318,64,FLEN)
NAN_BOXED(4599981678828294688,64,FLEN)
NAN_BOXED(4602700611776081207,64,FLEN)
NAN_BOXED(13827826928417003318,64,FLEN)
NAN_BOXED(4599981678828294688,64,FLEN)
NAN_BOXED(4602729770560543878,64,FLEN)
NAN_BOXED(13826610727703900890,64,FLEN)
NAN_BOXED(4598792376707111592,64,FLEN)
NAN_BOXED(4602729770560543878,64,FLEN)
NAN_BOXED(13826610727703900890,64,FLEN)
NAN_BOXED(4598792376707111592,64,FLEN)
NAN_BOXED(4602729770560543878,64,FLEN)
NAN_BOXED(13826610727703900890,64,FLEN)
NAN_BOXED(4598792376707111592,64,FLEN)
NAN_BOXED(4602729770560543878,64,FLEN)
NAN_BOXED(13826610727703900890,64,FLEN)
NAN_BOXED(4598792376707111592,64,FLEN)
NAN_BOXED(4602729770560543878,64,FLEN)
NAN_BOXED(13826610727703900890,64,FLEN)
NAN_BOXED(4598792376707111592,64,FLEN)
NAN_BOXED(4602769411184890043,64,FLEN)
NAN_BOXED(13829865898009279654,64,FLEN)
NAN_BOXED(4602157594892632662,64,FLEN)
NAN_BOXED(4602769411184890043,64,FLEN)
NAN_BOXED(13829865898009279654,64,FLEN)
NAN_BOXED(4602157594892632662,64,FLEN)
NAN_BOXED(4602769411184890043,64,FLEN)
NAN_BOXED(13829865898009279654,64,FLEN)
NAN_BOXED(4602157594892632662,64,FLEN)
NAN_BOXED(4602769411184890043,64,FLEN)
NAN_BOXED(13829865898009279654,64,FLEN)
NAN_BOXED(4602157594892632662,64,FLEN)
NAN_BOXED(4602769411184890043,64,FLEN)
NAN_BOXED(13829865898009279654,64,FLEN)
NAN_BOXED(4602157594892632662,64,FLEN)
NAN_BOXED(4602772234854373726,64,FLEN)
NAN_BOXED(13831640549806432156,64,FLEN)
NAN_BOXED(4603880857257631271,64,FLEN)
NAN_BOXED(4602772234854373726,64,FLEN)
NAN_BOXED(13831640549806432156,64,FLEN)
NAN_BOXED(4603880857257631271,64,FLEN)
NAN_BOXED(4602772234854373726,64,FLEN)
NAN_BOXED(13831640549806432156,64,FLEN)
NAN_BOXED(4603880857257631271,64,FLEN)
NAN_BOXED(4602772234854373726,64,FLEN)
NAN_BOXED(13831640549806432156,64,FLEN)
NAN_BOXED(4603880857257631271,64,FLEN)
NAN_BOXED(4602772234854373726,64,FLEN)
NAN_BOXED(13831640549806432156,64,FLEN)
NAN_BOXED(4603880857257631271,64,FLEN)
NAN_BOXED(4602791924295130735,64,FLEN)
NAN_BOXED(13829491273254173160,64,FLEN)
NAN_BOXED(4601815145847797766,64,FLEN)
NAN_BOXED(4602791924295130735,64,FLEN)
NAN_BOXED(13829491273254173160,64,FLEN)
NAN_BOXED(4601815145847797766,64,FLEN)
NAN_BOXED(4602791924295130735,64,FLEN)
NAN_BOXED(13829491273254173160,64,FLEN)
NAN_BOXED(4601815145847797766,64,FLEN)
NAN_BOXED(4602791924295130735,64,FLEN)
NAN_BOXED(13829491273254173160,64,FLEN)
NAN_BOXED(4601815145847797766,64,FLEN)
NAN_BOXED(4602791924295130735,64,FLEN)
NAN_BOXED(13829491273254173160,64,FLEN)
NAN_BOXED(4601815145847797766,64,FLEN)
NAN_BOXED(4602800303099437718,64,FLEN)
NAN_BOXED(13829131472943003051,64,FLEN)
NAN_BOXED(4601460419568482460,64,FLEN)
NAN_BOXED(4602800303099437718,64,FLEN)
NAN_BOXED(13829131472943003051,64,FLEN)
NAN_BOXED(4601460419568482460,64,FLEN)
NAN_BOXED(4602800303099437718,64,FLEN)
NAN_BOXED(13829131472943003051,64,FLEN)
NAN_BOXED(4601460419568482460,64,FLEN)
NAN_BOXED(4602800303099437718,64,FLEN)
NAN_BOXED(13829131472943003051,64,FLEN)
NAN_BOXED(4601460419568482460,64,FLEN)
NAN_BOXED(4602800303099437718,64,FLEN)
NAN_BOXED(13829131472943003051,64,FLEN)
NAN_BOXED(4601460419568482460,64,FLEN)
NAN_BOXED(4602810536671160533,64,FLEN)
NAN_BOXED(13829099232985419472,64,FLEN)
NAN_BOXED(4601444470370171234,64,FLEN)
NAN_BOXED(4602810536671160533,64,FLEN)
NAN_BOXED(13829099232985419472,64,FLEN)
NAN_BOXED(4601444470370171234,64,FLEN)
NAN_BOXED(4602810536671160533,64,FLEN)
NAN_BOXED(13829099232985419472,64,FLEN)
NAN_BOXED(4601444470370171234,64,FLEN)
NAN_BOXED(4602810536671160533,64,FLEN)
NAN_BOXED(13829099232985419472,64,FLEN)
NAN_BOXED(4601444470370171234,64,FLEN)
NAN_BOXED(4602810536671160533,64,FLEN)
NAN_BOXED(13829099232985419472,64,FLEN)
NAN_BOXED(4601444470370171234,64,FLEN)
NAN_BOXED(4602822598646996654,64,FLEN)
NAN_BOXED(13828867575241687322,64,FLEN)
NAN_BOXED(4601225643280859076,64,FLEN)
NAN_BOXED(4602822598646996654,64,FLEN)
NAN_BOXED(13828867575241687322,64,FLEN)
NAN_BOXED(4601225643280859076,64,FLEN)
NAN_BOXED(4602822598646996654,64,FLEN)
NAN_BOXED(13828867575241687322,64,FLEN)
NAN_BOXED(4601225643280859076,64,FLEN)
NAN_BOXED(4602822598646996654,64,FLEN)
NAN_BOXED(13828867575241687322,64,FLEN)
NAN_BOXED(4601225643280859076,64,FLEN)
NAN_BOXED(4602822598646996654,64,FLEN)
NAN_BOXED(13828867575241687322,64,FLEN)
NAN_BOXED(4601225643280859076,64,FLEN)
NAN_BOXED(4602845133666647418,64,FLEN)
NAN_BOXED(13806638816327046313,64,FLEN)
NAN_BOXED(4579044195011360320,64,FLEN)
NAN_BOXED(4602845133666647418,64,FLEN)
NAN_BOXED(13806638816327046313,64,FLEN)
NAN_BOXED(4579044195011360320,64,FLEN)
NAN_BOXED(4602845133666647418,64,FLEN)
NAN_BOXED(13806638816327046313,64,FLEN)
NAN_BOXED(4579044195011360320,64,FLEN)
NAN_BOXED(4602845133666647418,64,FLEN)
NAN_BOXED(13806638816327046313,64,FLEN)
NAN_BOXED(4579044195011360320,64,FLEN)
NAN_BOXED(4602845133666647418,64,FLEN)
NAN_BOXED(13806638816327046313,64,FLEN)
NAN_BOXED(4579044195011360320,64,FLEN)
NAN_BOXED(4602881427621988805,64,FLEN)
NAN_BOXED(13830637252832047817,64,FLEN)
NAN_BOXED(4602967949688017152,64,FLEN)
NAN_BOXED(4602881427621988805,64,FLEN)
NAN_BOXED(13830637252832047817,64,FLEN)
NAN_BOXED(4602967949688017152,64,FLEN)
NAN_BOXED(4602881427621988805,64,FLEN)
NAN_BOXED(13830637252832047817,64,FLEN)
NAN_BOXED(4602967949688017152,64,FLEN)
NAN_BOXED(4602881427621988805,64,FLEN)
NAN_BOXED(13830637252832047817,64,FLEN)
NAN_BOXED(4602967949688017152,64,FLEN)
NAN_BOXED(4602881427621988805,64,FLEN)
NAN_BOXED(13830637252832047817,64,FLEN)
NAN_BOXED(4602967949688017152,64,FLEN)
NAN_BOXED(4602889045282942917,64,FLEN)
NAN_BOXED(13833195625824852265,64,FLEN)
NAN_BOXED(4605653504150360159,64,FLEN)
NAN_BOXED(4602889045282942917,64,FLEN)
NAN_BOXED(13833195625824852265,64,FLEN)
NAN_BOXED(4605653504150360159,64,FLEN)
NAN_BOXED(4602889045282942917,64,FLEN)
NAN_BOXED(13833195625824852265,64,FLEN)
NAN_BOXED(4605653504150360159,64,FLEN)
NAN_BOXED(4602889045282942917,64,FLEN)
NAN_BOXED(13833195625824852265,64,FLEN)
NAN_BOXED(4605653504150360159,64,FLEN)
NAN_BOXED(4602889045282942917,64,FLEN)
NAN_BOXED(13833195625824852265,64,FLEN)
NAN_BOXED(4605653504150360159,64,FLEN)
NAN_BOXED(4602896132315217037,64,FLEN)
NAN_BOXED(13833544533803172879,64,FLEN)
NAN_BOXED(4606030491335059076,64,FLEN)
NAN_BOXED(4602896132315217037,64,FLEN)
NAN_BOXED(13833544533803172879,64,FLEN)
NAN_BOXED(4606030491335059076,64,FLEN)
NAN_BOXED(4602896132315217037,64,FLEN)
NAN_BOXED(13833544533803172879,64,FLEN)
NAN_BOXED(4606030491335059076,64,FLEN)
NAN_BOXED(4602896132315217037,64,FLEN)
NAN_BOXED(13833544533803172879,64,FLEN)
NAN_BOXED(4606030491335059076,64,FLEN)
NAN_BOXED(4602896132315217037,64,FLEN)
NAN_BOXED(13833544533803172879,64,FLEN)
NAN_BOXED(4606030491335059076,64,FLEN)
NAN_BOXED(4602920322513425169,64,FLEN)
NAN_BOXED(13833278679051398547,64,FLEN)
NAN_BOXED(4605790631065404449,64,FLEN)
NAN_BOXED(4602920322513425169,64,FLEN)
NAN_BOXED(13833278679051398547,64,FLEN)
NAN_BOXED(4605790631065404449,64,FLEN)
NAN_BOXED(4602920322513425169,64,FLEN)
NAN_BOXED(13833278679051398547,64,FLEN)
NAN_BOXED(4605790631065404449,64,FLEN)
NAN_BOXED(4602920322513425169,64,FLEN)
NAN_BOXED(13833278679051398547,64,FLEN)
NAN_BOXED(4605790631065404449,64,FLEN)
NAN_BOXED(4602920322513425169,64,FLEN)
NAN_BOXED(13833278679051398547,64,FLEN)
NAN_BOXED(4605790631065404449,64,FLEN)
NAN_BOXED(4602959015584786602,64,FLEN)
NAN_BOXED(13832654813719340403,64,FLEN)
NAN_BOXED(4605190049740147483,64,FLEN)
NAN_BOXED(4602959015584786602,64,FLEN)
NAN_BOXED(13832654813719340403,64,FLEN)
NAN_BOXED(4605190049740147483,64,FLEN)
NAN_BOXED(4602959015584786602,64,FLEN)
NAN_BOXED(13832654813719340403,64,FLEN)
NAN_BOXED(4605190049740147483,64,FLEN)
NAN_BOXED(4602959015584786602,64,FLEN)
NAN_BOXED(13832654813719340403,64,FLEN)
NAN_BOXED(4605190049740147483,64,FLEN)
NAN_BOXED(4602959015584786602,64,FLEN)
NAN_BOXED(13832654813719340403,64,FLEN)
NAN_BOXED(4605190049740147483,64,FLEN)
NAN_BOXED(4603014868992867056,64,FLEN)
NAN_BOXED(13821343461304623799,64,FLEN)
NAN_BOXED(4593898168794145868,64,FLEN)
NAN_BOXED(4603014868992867056,64,FLEN)
NAN_BOXED(13821343461304623799,64,FLEN)
NAN_BOXED(4593898168794145868,64,FLEN)
NAN_BOXED(4603014868992867056,64,FLEN)
NAN_BOXED(13821343461304623799,64,FLEN)
NAN_BOXED(4593898168794145868,64,FLEN)
NAN_BOXED(4603014868992867056,64,FLEN)
NAN_BOXED(13821343461304623799,64,FLEN)
NAN_BOXED(4593898168794145868,64,FLEN)
NAN_BOXED(4603014868992867056,64,FLEN)
NAN_BOXED(13821343461304623799,64,FLEN)
NAN_BOXED(4593898168794145868,64,FLEN)
NAN_BOXED(4603071227157648852,64,FLEN)
NAN_BOXED(13830329155392746412,64,FLEN)
NAN_BOXED(4602948761586847801,64,FLEN)
NAN_BOXED(4603071227157648852,64,FLEN)
NAN_BOXED(13830329155392746412,64,FLEN)
NAN_BOXED(4602948761586847801,64,FLEN)
NAN_BOXED(4603071227157648852,64,FLEN)
NAN_BOXED(13830329155392746412,64,FLEN)
NAN_BOXED(4602948761586847801,64,FLEN)
NAN_BOXED(4603071227157648852,64,FLEN)
NAN_BOXED(13830329155392746412,64,FLEN)
NAN_BOXED(4602948761586847801,64,FLEN)
NAN_BOXED(4603071227157648852,64,FLEN)
NAN_BOXED(13830329155392746412,64,FLEN)
NAN_BOXED(4602948761586847801,64,FLEN)
NAN_BOXED(4603100964703970954,64,FLEN)
NAN_BOXED(13829865159604112512,64,FLEN)
NAN_BOXED(4602724011048509118,64,FLEN)
NAN_BOXED(4603100964703970954,64,FLEN)
NAN_BOXED(13829865159604112512,64,FLEN)
NAN_BOXED(4602724011048509118,64,FLEN)
NAN_BOXED(4603100964703970954,64,FLEN)
NAN_BOXED(13829865159604112512,64,FLEN)
NAN_BOXED(4602724011048509118,64,FLEN)
NAN_BOXED(4603100964703970954,64,FLEN)
NAN_BOXED(13829865159604112512,64,FLEN)
NAN_BOXED(4602724011048509118,64,FLEN)
NAN_BOXED(4603100964703970954,64,FLEN)
NAN_BOXED(13829865159604112512,64,FLEN)
NAN_BOXED(4602724011048509118,64,FLEN)
NAN_BOXED(4603104957060122875,64,FLEN)
NAN_BOXED(13833238930879238678,64,FLEN)
NAN_BOXED(4606043441676116908,64,FLEN)
NAN_BOXED(4603104957060122875,64,FLEN)
NAN_BOXED(13833238930879238678,64,FLEN)
NAN_BOXED(4606043441676116908,64,FLEN)
NAN_BOXED(4603104957060122875,64,FLEN)
NAN_BOXED(13833238930879238678,64,FLEN)
NAN_BOXED(4606043441676116908,64,FLEN)
NAN_BOXED(4603104957060122875,64,FLEN)
NAN_BOXED(13833238930879238678,64,FLEN)
NAN_BOXED(4606043441676116908,64,FLEN)
NAN_BOXED(4603104957060122875,64,FLEN)
NAN_BOXED(13833238930879238678,64,FLEN)
NAN_BOXED(4606043441676116908,64,FLEN)
NAN_BOXED(4603140264115586791,64,FLEN)
NAN_BOXED(13830140469803234010,64,FLEN)
NAN_BOXED(4602912062413111135,64,FLEN)
NAN_BOXED(4603140264115586791,64,FLEN)
NAN_BOXED(13830140469803234010,64,FLEN)
NAN_BOXED(4602912062413111135,64,FLEN)
NAN_BOXED(4603140264115586791,64,FLEN)
NAN_BOXED(13830140469803234010,64,FLEN)
NAN_BOXED(4602912062413111135,64,FLEN)
NAN_BOXED(4603140264115586791,64,FLEN)
NAN_BOXED(13830140469803234010,64,FLEN)
NAN_BOXED(4602912062413111135,64,FLEN)
NAN_BOXED(4603140264115586791,64,FLEN)
NAN_BOXED(13830140469803234010,64,FLEN)
NAN_BOXED(4602912062413111135,64,FLEN)
NAN_BOXED(4603159463566432097,64,FLEN)
NAN_BOXED(13828081284236843517,64,FLEN)
NAN_BOXED(4600902988572807134,64,FLEN)
NAN_BOXED(4603159463566432097,64,FLEN)
NAN_BOXED(13828081284236843517,64,FLEN)
NAN_BOXED(4600902988572807134,64,FLEN)
NAN_BOXED(4603159463566432097,64,FLEN)
NAN_BOXED(13828081284236843517,64,FLEN)
NAN_BOXED(4600902988572807134,64,FLEN)
NAN_BOXED(4603159463566432097,64,FLEN)
NAN_BOXED(13828081284236843517,64,FLEN)
NAN_BOXED(4600902988572807134,64,FLEN)
NAN_BOXED(4603159463566432097,64,FLEN)
NAN_BOXED(13828081284236843517,64,FLEN)
NAN_BOXED(4600902988572807134,64,FLEN)
NAN_BOXED(4603163213831204442,64,FLEN)
NAN_BOXED(13833303549507314358,64,FLEN)
NAN_BOXED(4606207992577636122,64,FLEN)
NAN_BOXED(4603163213831204442,64,FLEN)
NAN_BOXED(13833303549507314358,64,FLEN)
NAN_BOXED(4606207992577636122,64,FLEN)
NAN_BOXED(4603163213831204442,64,FLEN)
NAN_BOXED(13833303549507314358,64,FLEN)
NAN_BOXED(4606207992577636122,64,FLEN)
NAN_BOXED(4603163213831204442,64,FLEN)
NAN_BOXED(13833303549507314358,64,FLEN)
NAN_BOXED(4606207992577636122,64,FLEN)
NAN_BOXED(4603163213831204442,64,FLEN)
NAN_BOXED(13833303549507314358,64,FLEN)
NAN_BOXED(4606207992577636122,64,FLEN)
NAN_BOXED(4603164727250457286,64,FLEN)
NAN_BOXED(13830782842840135962,64,FLEN)
NAN_BOXED(4603417755875405801,64,FLEN)
NAN_BOXED(4603164727250457286,64,FLEN)
NAN_BOXED(13830782842840135962,64,FLEN)
NAN_BOXED(4603417755875405801,64,FLEN)
NAN_BOXED(4603164727250457286,64,FLEN)
NAN_BOXED(13830782842840135962,64,FLEN)
NAN_BOXED(4603417755875405801,64,FLEN)
NAN_BOXED(4603164727250457286,64,FLEN)
NAN_BOXED(13830782842840135962,64,FLEN)
NAN_BOXED(4603417755875405801,64,FLEN)
NAN_BOXED(4603164727250457286,64,FLEN)
NAN_BOXED(13830782842840135962,64,FLEN)
NAN_BOXED(4603417755875405801,64,FLEN)
NAN_BOXED(4603205525298226523,64,FLEN)
NAN_BOXED(13833442761915993661,64,FLEN)
NAN_BOXED(4606431625485662913,64,FLEN)
NAN_BOXED(4603205525298226523,64,FLEN)
NAN_BOXED(13833442761915993661,64,FLEN)
NAN_BOXED(4606431625485662913,64,FLEN)
NAN_BOXED(4603205525298226523,64,FLEN)
NAN_BOXED(13833442761915993661,64,FLEN)
NAN_BOXED(4606431625485662913,64,FLEN)
NAN_BOXED(4603205525298226523,64,FLEN)
NAN_BOXED(13833442761915993661,64,FLEN)
NAN_BOXED(4606431625485662913,64,FLEN)
NAN_BOXED(4603205525298226523,64,FLEN)
NAN_BOXED(13833442761915993661,64,FLEN)
NAN_BOXED(4606431625485662913,64,FLEN)
NAN_BOXED(4603223902094699384,64,FLEN)
NAN_BOXED(13825865015915231812,64,FLEN)
NAN_BOXED(4598616136043908512,64,FLEN)
NAN_BOXED(4603223902094699384,64,FLEN)
NAN_BOXED(13825865015915231812,64,FLEN)
NAN_BOXED(4598616136043908512,64,FLEN)
NAN_BOXED(4603223902094699384,64,FLEN)
NAN_BOXED(13825865015915231812,64,FLEN)
NAN_BOXED(4598616136043908512,64,FLEN)
NAN_BOXED(4603223902094699384,64,FLEN)
NAN_BOXED(13825865015915231812,64,FLEN)
NAN_BOXED(4598616136043908512,64,FLEN)
NAN_BOXED(4603223902094699384,64,FLEN)
NAN_BOXED(13825865015915231812,64,FLEN)
NAN_BOXED(4598616136043908512,64,FLEN)
NAN_BOXED(4603349613703748730,64,FLEN)
NAN_BOXED(13827344070943038382,64,FLEN)
NAN_BOXED(4600331848577372266,64,FLEN)
NAN_BOXED(4603349613703748730,64,FLEN)
NAN_BOXED(13827344070943038382,64,FLEN)
NAN_BOXED(4600331848577372266,64,FLEN)
NAN_BOXED(4603349613703748730,64,FLEN)
NAN_BOXED(13827344070943038382,64,FLEN)
NAN_BOXED(4600331848577372266,64,FLEN)
NAN_BOXED(4603349613703748730,64,FLEN)
NAN_BOXED(13827344070943038382,64,FLEN)
NAN_BOXED(4600331848577372266,64,FLEN)
NAN_BOXED(4603349613703748730,64,FLEN)
NAN_BOXED(13827344070943038382,64,FLEN)
NAN_BOXED(4600331848577372266,64,FLEN)
NAN_BOXED(4603448920416181135,64,FLEN)
NAN_BOXED(13817999314255302995,64,FLEN)
NAN_BOXED(4591057193413318600,64,FLEN)
NAN_BOXED(4603448920416181135,64,FLEN)
NAN_BOXED(13817999314255302995,64,FLEN)
NAN_BOXED(4591057193413318600,64,FLEN)
NAN_BOXED(4603448920416181135,64,FLEN)
NAN_BOXED(13817999314255302995,64,FLEN)
NAN_BOXED(4591057193413318600,64,FLEN)
NAN_BOXED(4603448920416181135,64,FLEN)
NAN_BOXED(13817999314255302995,64,FLEN)
NAN_BOXED(4591057193413318600,64,FLEN)
NAN_BOXED(4603448920416181135,64,FLEN)
NAN_BOXED(13817999314255302995,64,FLEN)
NAN_BOXED(4591057193413318600,64,FLEN)
NAN_BOXED(4603473227984246771,64,FLEN)
NAN_BOXED(13830940673809073004,64,FLEN)
NAN_BOXED(4603927572777292367,64,FLEN)
NAN_BOXED(4603473227984246771,64,FLEN)
NAN_BOXED(13830940673809073004,64,FLEN)
NAN_BOXED(4603927572777292367,64,FLEN)
NAN_BOXED(4603473227984246771,64,FLEN)
NAN_BOXED(13830940673809073004,64,FLEN)
NAN_BOXED(4603927572777292367,64,FLEN)
NAN_BOXED(4603473227984246771,64,FLEN)
NAN_BOXED(13830940673809073004,64,FLEN)
NAN_BOXED(4603927572777292367,64,FLEN)
NAN_BOXED(4603473227984246771,64,FLEN)
NAN_BOXED(13830940673809073004,64,FLEN)
NAN_BOXED(4603927572777292367,64,FLEN)
NAN_BOXED(4603509084724784619,64,FLEN)
NAN_BOXED(13832371026618604038,64,FLEN)
NAN_BOXED(4605660551420689266,64,FLEN)
NAN_BOXED(4603509084724784619,64,FLEN)
NAN_BOXED(13832371026618604038,64,FLEN)
NAN_BOXED(4605660551420689266,64,FLEN)
NAN_BOXED(4603509084724784619,64,FLEN)
NAN_BOXED(13832371026618604038,64,FLEN)
NAN_BOXED(4605660551420689266,64,FLEN)
NAN_BOXED(4603509084724784619,64,FLEN)
NAN_BOXED(13832371026618604038,64,FLEN)
NAN_BOXED(4605660551420689266,64,FLEN)
NAN_BOXED(4603509084724784619,64,FLEN)
NAN_BOXED(13832371026618604038,64,FLEN)
NAN_BOXED(4605660551420689266,64,FLEN)
NAN_BOXED(4603510509157370641,64,FLEN)
NAN_BOXED(13818496988051161233,64,FLEN)
NAN_BOXED(4591721431545924280,64,FLEN)
NAN_BOXED(4603510509157370641,64,FLEN)
NAN_BOXED(13818496988051161233,64,FLEN)
NAN_BOXED(4591721431545924280,64,FLEN)
NAN_BOXED(4603510509157370641,64,FLEN)
NAN_BOXED(13818496988051161233,64,FLEN)
NAN_BOXED(4591721431545924280,64,FLEN)
NAN_BOXED(4603510509157370641,64,FLEN)
NAN_BOXED(13818496988051161233,64,FLEN)
NAN_BOXED(4591721431545924280,64,FLEN)
NAN_BOXED(4603510509157370641,64,FLEN)
NAN_BOXED(13818496988051161233,64,FLEN)
NAN_BOXED(4591721431545924280,64,FLEN)
NAN_BOXED(4603587040113838667,64,FLEN)
NAN_BOXED(13823973741890145163,64,FLEN)
NAN_BOXED(4597495664904555728,64,FLEN)
NAN_BOXED(4603587040113838667,64,FLEN)
NAN_BOXED(13823973741890145163,64,FLEN)
NAN_BOXED(4597495664904555728,64,FLEN)
NAN_BOXED(4603587040113838667,64,FLEN)
NAN_BOXED(13823973741890145163,64,FLEN)
NAN_BOXED(4597495664904555728,64,FLEN)
NAN_BOXED(4603587040113838667,64,FLEN)
NAN_BOXED(13823973741890145163,64,FLEN)
NAN_BOXED(4597495664904555728,64,FLEN)
NAN_BOXED(4603587040113838667,64,FLEN)
NAN_BOXED(13823973741890145163,64,FLEN)
NAN_BOXED(4597495664904555728,64,FLEN)
NAN_BOXED(4603607671561568237,64,FLEN)
NAN_BOXED(13826130842905101480,64,FLEN)
NAN_BOXED(4599200555838380088,64,FLEN)
NAN_BOXED(4603607671561568237,64,FLEN)
NAN_BOXED(13826130842905101480,64,FLEN)
NAN_BOXED(4599200555838380088,64,FLEN)
NAN_BOXED(4603607671561568237,64,FLEN)
NAN_BOXED(13826130842905101480,64,FLEN)
NAN_BOXED(4599200555838380088,64,FLEN)
NAN_BOXED(4603607671561568237,64,FLEN)
NAN_BOXED(13826130842905101480,64,FLEN)
NAN_BOXED(4599200555838380088,64,FLEN)
NAN_BOXED(4603607671561568237,64,FLEN)
NAN_BOXED(13826130842905101480,64,FLEN)
NAN_BOXED(4599200555838380088,64,FLEN)
NAN_BOXED(4603613190508049039,64,FLEN)
NAN_BOXED(13832270766122527698,64,FLEN)
NAN_BOXED(4605685587536843579,64,FLEN)
NAN_BOXED(4603613190508049039,64,FLEN)
NAN_BOXED(13832270766122527698,64,FLEN)
NAN_BOXED(4605685587536843579,64,FLEN)
NAN_BOXED(4603613190508049039,64,FLEN)
NAN_BOXED(13832270766122527698,64,FLEN)
NAN_BOXED(4605685587536843579,64,FLEN)
NAN_BOXED(4603613190508049039,64,FLEN)
NAN_BOXED(13832270766122527698,64,FLEN)
NAN_BOXED(4605685587536843579,64,FLEN)
NAN_BOXED(4603613190508049039,64,FLEN)
NAN_BOXED(13832270766122527698,64,FLEN)
NAN_BOXED(4605685587536843579,64,FLEN)
NAN_BOXED(4603632908641447070,64,FLEN)
NAN_BOXED(13833223683017453430,64,FLEN)
NAN_BOXED(4606867612939727837,64,FLEN)
NAN_BOXED(4603632908641447070,64,FLEN)
NAN_BOXED(13833223683017453430,64,FLEN)
NAN_BOXED(4606867612939727837,64,FLEN)
NAN_BOXED(4603632908641447070,64,FLEN)
NAN_BOXED(13833223683017453430,64,FLEN)
NAN_BOXED(4606867612939727837,64,FLEN)
NAN_BOXED(4603632908641447070,64,FLEN)
NAN_BOXED(13833223683017453430,64,FLEN)
NAN_BOXED(4606867612939727837,64,FLEN)
NAN_BOXED(4603632908641447070,64,FLEN)
NAN_BOXED(13833223683017453430,64,FLEN)
NAN_BOXED(4606867612939727837,64,FLEN)
NAN_BOXED(4603635807758840204,64,FLEN)
NAN_BOXED(13830799192116974456,64,FLEN)
NAN_BOXED(4603932549288148053,64,FLEN)
NAN_BOXED(4603635807758840204,64,FLEN)
NAN_BOXED(13830799192116974456,64,FLEN)
NAN_BOXED(4603932549288148053,64,FLEN)
NAN_BOXED(4603635807758840204,64,FLEN)
NAN_BOXED(13830799192116974456,64,FLEN)
NAN_BOXED(4603932549288148053,64,FLEN)
NAN_BOXED(4603635807758840204,64,FLEN)
NAN_BOXED(13830799192116974456,64,FLEN)
NAN_BOXED(4603932549288148053,64,FLEN)
NAN_BOXED(4603635807758840204,64,FLEN)
NAN_BOXED(13830799192116974456,64,FLEN)
NAN_BOXED(4603932549288148053,64,FLEN)
NAN_BOXED(4603675984941001500,64,FLEN)
NAN_BOXED(13829935993993126956,64,FLEN)
NAN_BOXED(4603298285679459603,64,FLEN)
NAN_BOXED(4603675984941001500,64,FLEN)
NAN_BOXED(13829935993993126956,64,FLEN)
NAN_BOXED(4603298285679459603,64,FLEN)
NAN_BOXED(4603675984941001500,64,FLEN)
NAN_BOXED(13829935993993126956,64,FLEN)
NAN_BOXED(4603298285679459603,64,FLEN)
NAN_BOXED(4603675984941001500,64,FLEN)
NAN_BOXED(13829935993993126956,64,FLEN)
NAN_BOXED(4603298285679459603,64,FLEN)
NAN_BOXED(4603675984941001500,64,FLEN)
NAN_BOXED(13829935993993126956,64,FLEN)
NAN_BOXED(4603298285679459603,64,FLEN)
NAN_BOXED(4603688161043398968,64,FLEN)
NAN_BOXED(13826628889206600072,64,FLEN)
NAN_BOXED(4599892142765270016,64,FLEN)
NAN_BOXED(4603688161043398968,64,FLEN)
NAN_BOXED(13826628889206600072,64,FLEN)
NAN_BOXED(4599892142765270016,64,FLEN)
NAN_BOXED(4603688161043398968,64,FLEN)
NAN_BOXED(13826628889206600072,64,FLEN)
NAN_BOXED(4599892142765270016,64,FLEN)
NAN_BOXED(4603688161043398968,64,FLEN)
NAN_BOXED(13826628889206600072,64,FLEN)
NAN_BOXED(4599892142765270016,64,FLEN)
NAN_BOXED(4603688161043398968,64,FLEN)
NAN_BOXED(13826628889206600072,64,FLEN)
NAN_BOXED(4599892142765270016,64,FLEN)
NAN_BOXED(4603702640883138281,64,FLEN)
NAN_BOXED(13827804769647748201,64,FLEN)
NAN_BOXED(4601351679228032204,64,FLEN)
NAN_BOXED(4603702640883138281,64,FLEN)
NAN_BOXED(13827804769647748201,64,FLEN)
NAN_BOXED(4601351679228032204,64,FLEN)
NAN_BOXED(4603702640883138281,64,FLEN)
NAN_BOXED(13827804769647748201,64,FLEN)
NAN_BOXED(4601351679228032204,64,FLEN)
NAN_BOXED(4603702640883138281,64,FLEN)
NAN_BOXED(13827804769647748201,64,FLEN)
NAN_BOXED(4601351679228032204,64,FLEN)
NAN_BOXED(4603702640883138281,64,FLEN)
NAN_BOXED(13827804769647748201,64,FLEN)
NAN_BOXED(4601351679228032204,64,FLEN)
NAN_BOXED(4603727035052846283,64,FLEN)
NAN_BOXED(13828172451393539140,64,FLEN)
NAN_BOXED(4601838833557851668,64,FLEN)
NAN_BOXED(4603727035052846283,64,FLEN)
NAN_BOXED(13828172451393539140,64,FLEN)
NAN_BOXED(4601838833557851668,64,FLEN)
NAN_BOXED(4603727035052846283,64,FLEN)
NAN_BOXED(13828172451393539140,64,FLEN)
NAN_BOXED(4601838833557851668,64,FLEN)
NAN_BOXED(4603727035052846283,64,FLEN)
NAN_BOXED(13828172451393539140,64,FLEN)
NAN_BOXED(4601838833557851668,64,FLEN)
NAN_BOXED(4603727035052846283,64,FLEN)
NAN_BOXED(13828172451393539140,64,FLEN)
NAN_BOXED(4601838833557851668,64,FLEN)
NAN_BOXED(4603768010951922419,64,FLEN)
NAN_BOXED(13832479013648527125,64,FLEN)
NAN_BOXED(4606158021676572785,64,FLEN)
NAN_BOXED(4603768010951922419,64,FLEN)
NAN_BOXED(13832479013648527125,64,FLEN)
NAN_BOXED(4606158021676572785,64,FLEN)
NAN_BOXED(4603768010951922419,64,FLEN)
NAN_BOXED(13832479013648527125,64,FLEN)
NAN_BOXED(4606158021676572785,64,FLEN)
NAN_BOXED(4603768010951922419,64,FLEN)
NAN_BOXED(13832479013648527125,64,FLEN)
NAN_BOXED(4606158021676572785,64,FLEN)
NAN_BOXED(4603768010951922419,64,FLEN)
NAN_BOXED(13832479013648527125,64,FLEN)
NAN_BOXED(4606158021676572785,64,FLEN)
NAN_BOXED(4603784856995999619,64,FLEN)
NAN_BOXED(13826452327555663088,64,FLEN)
NAN_BOXED(4599781326181702362,64,FLEN)
NAN_BOXED(4603784856995999619,64,FLEN)
NAN_BOXED(13826452327555663088,64,FLEN)
NAN_BOXED(4599781326181702362,64,FLEN)
NAN_BOXED(4603784856995999619,64,FLEN)
NAN_BOXED(13826452327555663088,64,FLEN)
NAN_BOXED(4599781326181702362,64,FLEN)
NAN_BOXED(4603784856995999619,64,FLEN)
NAN_BOXED(13826452327555663088,64,FLEN)
NAN_BOXED(4599781326181702362,64,FLEN)
NAN_BOXED(4603784856995999619,64,FLEN)
NAN_BOXED(13826452327555663088,64,FLEN)
NAN_BOXED(4599781326181702362,64,FLEN)
NAN_BOXED(4603787370747034757,64,FLEN)
NAN_BOXED(13821833929077609563,64,FLEN)
NAN_BOXED(4595137408046379736,64,FLEN)
NAN_BOXED(4603787370747034757,64,FLEN)
NAN_BOXED(13821833929077609563,64,FLEN)
NAN_BOXED(4595137408046379736,64,FLEN)
NAN_BOXED(4603787370747034757,64,FLEN)
NAN_BOXED(13821833929077609563,64,FLEN)
NAN_BOXED(4595137408046379736,64,FLEN)
NAN_BOXED(4603787370747034757,64,FLEN)
NAN_BOXED(13821833929077609563,64,FLEN)
NAN_BOXED(4595137408046379736,64,FLEN)
NAN_BOXED(4603787370747034757,64,FLEN)
NAN_BOXED(13821833929077609563,64,FLEN)
NAN_BOXED(4595137408046379736,64,FLEN)
NAN_BOXED(4603836372283374772,64,FLEN)
NAN_BOXED(13814370852641719030,64,FLEN)
NAN_BOXED(4588123335749854800,64,FLEN)
NAN_BOXED(4603836372283374772,64,FLEN)
NAN_BOXED(13814370852641719030,64,FLEN)
NAN_BOXED(4588123335749854800,64,FLEN)
NAN_BOXED(4603836372283374772,64,FLEN)
NAN_BOXED(13814370852641719030,64,FLEN)
NAN_BOXED(4588123335749854800,64,FLEN)
NAN_BOXED(4603836372283374772,64,FLEN)
NAN_BOXED(13814370852641719030,64,FLEN)
NAN_BOXED(4588123335749854800,64,FLEN)
NAN_BOXED(4603836372283374772,64,FLEN)
NAN_BOXED(13814370852641719030,64,FLEN)
NAN_BOXED(4588123335749854800,64,FLEN)
NAN_BOXED(4603850005256360255,64,FLEN)
NAN_BOXED(13812773343157256759,64,FLEN)
NAN_BOXED(4586129560081259632,64,FLEN)
NAN_BOXED(4603850005256360255,64,FLEN)
NAN_BOXED(13812773343157256759,64,FLEN)
NAN_BOXED(4586129560081259632,64,FLEN)
NAN_BOXED(4603850005256360255,64,FLEN)
NAN_BOXED(13812773343157256759,64,FLEN)
NAN_BOXED(4586129560081259632,64,FLEN)
NAN_BOXED(4603850005256360255,64,FLEN)
NAN_BOXED(13812773343157256759,64,FLEN)
NAN_BOXED(4586129560081259632,64,FLEN)
NAN_BOXED(4603850005256360255,64,FLEN)
NAN_BOXED(13812773343157256759,64,FLEN)
NAN_BOXED(4586129560081259632,64,FLEN)
NAN_BOXED(4603856476669598592,64,FLEN)
NAN_BOXED(13814728397070172155,64,FLEN)
NAN_BOXED(4588602652548878096,64,FLEN)
NAN_BOXED(4603856476669598592,64,FLEN)
NAN_BOXED(13814728397070172155,64,FLEN)
NAN_BOXED(4588602652548878096,64,FLEN)
NAN_BOXED(4603856476669598592,64,FLEN)
NAN_BOXED(13814728397070172155,64,FLEN)
NAN_BOXED(4588602652548878096,64,FLEN)
NAN_BOXED(4603856476669598592,64,FLEN)
NAN_BOXED(13814728397070172155,64,FLEN)
NAN_BOXED(4588602652548878096,64,FLEN)
NAN_BOXED(4603856476669598592,64,FLEN)
NAN_BOXED(13814728397070172155,64,FLEN)
NAN_BOXED(4588602652548878096,64,FLEN)
NAN_BOXED(4603866481900074629,64,FLEN)
NAN_BOXED(13830836800813912151,64,FLEN)
NAN_BOXED(4604223285459029385,64,FLEN)
NAN_BOXED(4603866481900074629,64,FLEN)
NAN_BOXED(13830836800813912151,64,FLEN)
NAN_BOXED(4604223285459029385,64,FLEN)
NAN_BOXED(4603866481900074629,64,FLEN)
NAN_BOXED(13830836800813912151,64,FLEN)
NAN_BOXED(4604223285459029385,64,FLEN)
NAN_BOXED(4603866481900074629,64,FLEN)
NAN_BOXED(13830836800813912151,64,FLEN)
NAN_BOXED(4604223285459029385,64,FLEN)
NAN_BOXED(4603866481900074629,64,FLEN)
NAN_BOXED(13830836800813912151,64,FLEN)
NAN_BOXED(4604223285459029385,64,FLEN)
NAN_BOXED(4603902914458473772,64,FLEN)
NAN_BOXED(13829586712420744753,64,FLEN)
NAN_BOXED(4603287524719424424,64,FLEN)
NAN_BOXED(4603902914458473772,64,FLEN)
NAN_BOXED(13829586712420744753,64,FLEN)
NAN_BOXED(4603287524719424424,64,FLEN)
NAN_BOXED(4603902914458473772,64,FLEN)
NAN_BOXED(13829586712420744753,64,FLEN)
NAN_BOXED(4603287524719424424,64,FLEN)
NAN_BOXED(4603902914458473772,64,FLEN)
NAN_BOXED(13829586712420744753,64,FLEN)
NAN_BOXED(4603287524719424424,64,FLEN)
NAN_BOXED(4603902914458473772,64,FLEN)
NAN_BOXED(13829586712420744753,64,FLEN)
NAN_BOXED(4603287524719424424,64,FLEN)
NAN_BOXED(4603920163124723935,64,FLEN)
NAN_BOXED(13829632034983133703,64,FLEN)
NAN_BOXED(4603331827664907090,64,FLEN)
NAN_BOXED(4603920163124723935,64,FLEN)
NAN_BOXED(13829632034983133703,64,FLEN)
NAN_BOXED(4603331827664907090,64,FLEN)
NAN_BOXED(4603920163124723935,64,FLEN)
NAN_BOXED(13829632034983133703,64,FLEN)
NAN_BOXED(4603331827664907090,64,FLEN)
NAN_BOXED(4603920163124723935,64,FLEN)
NAN_BOXED(13829632034983133703,64,FLEN)
NAN_BOXED(4603331827664907090,64,FLEN)
NAN_BOXED(4603920163124723935,64,FLEN)
NAN_BOXED(13829632034983133703,64,FLEN)
NAN_BOXED(4603331827664907090,64,FLEN)
NAN_BOXED(4603927485504100328,64,FLEN)
NAN_BOXED(13827182324460180972,64,FLEN)
NAN_BOXED(4600869064819743298,64,FLEN)
NAN_BOXED(4603927485504100328,64,FLEN)
NAN_BOXED(13827182324460180972,64,FLEN)
NAN_BOXED(4600869064819743298,64,FLEN)
NAN_BOXED(4603927485504100328,64,FLEN)
NAN_BOXED(13827182324460180972,64,FLEN)
NAN_BOXED(4600869064819743298,64,FLEN)
NAN_BOXED(4603927485504100328,64,FLEN)
NAN_BOXED(13827182324460180972,64,FLEN)
NAN_BOXED(4600869064819743298,64,FLEN)
NAN_BOXED(4603927485504100328,64,FLEN)
NAN_BOXED(13827182324460180972,64,FLEN)
NAN_BOXED(4600869064819743298,64,FLEN)
NAN_BOXED(4603935365509729447,64,FLEN)
NAN_BOXED(13830470947967587251,64,FLEN)
NAN_BOXED(4603881961953989625,64,FLEN)
NAN_BOXED(4603935365509729447,64,FLEN)
NAN_BOXED(13830470947967587251,64,FLEN)
NAN_BOXED(4603881961953989625,64,FLEN)
NAN_BOXED(4603935365509729447,64,FLEN)
NAN_BOXED(13830470947967587251,64,FLEN)
NAN_BOXED(4603881961953989625,64,FLEN)
NAN_BOXED(4603935365509729447,64,FLEN)
NAN_BOXED(13830470947967587251,64,FLEN)
NAN_BOXED(4603881961953989625,64,FLEN)
NAN_BOXED(4603935365509729447,64,FLEN)
NAN_BOXED(13830470947967587251,64,FLEN)
NAN_BOXED(4603881961953989625,64,FLEN)
NAN_BOXED(4603938350869686247,64,FLEN)
NAN_BOXED(13822457812056461049,64,FLEN)
NAN_BOXED(4596096364391448700,64,FLEN)
NAN_BOXED(4603938350869686247,64,FLEN)
NAN_BOXED(13822457812056461049,64,FLEN)
NAN_BOXED(4596096364391448700,64,FLEN)
NAN_BOXED(4603938350869686247,64,FLEN)
NAN_BOXED(13822457812056461049,64,FLEN)
NAN_BOXED(4596096364391448700,64,FLEN)
NAN_BOXED(4603938350869686247,64,FLEN)
NAN_BOXED(13822457812056461049,64,FLEN)
NAN_BOXED(4596096364391448700,64,FLEN)
NAN_BOXED(4603938350869686247,64,FLEN)
NAN_BOXED(13822457812056461049,64,FLEN)
NAN_BOXED(4596096364391448700,64,FLEN)
NAN_BOXED(4603962422496170786,64,FLEN)
NAN_BOXED(13830769645463835567,64,FLEN)
NAN_BOXED(4604238945100516814,64,FLEN)
NAN_BOXED(4603962422496170786,64,FLEN)
NAN_BOXED(13830769645463835567,64,FLEN)
NAN_BOXED(4604238945100516814,64,FLEN)
NAN_BOXED(4603962422496170786,64,FLEN)
NAN_BOXED(13830769645463835567,64,FLEN)
NAN_BOXED(4604238945100516814,64,FLEN)
NAN_BOXED(4603962422496170786,64,FLEN)
NAN_BOXED(13830769645463835567,64,FLEN)
NAN_BOXED(4604238945100516814,64,FLEN)
NAN_BOXED(4603962422496170786,64,FLEN)
NAN_BOXED(13830769645463835567,64,FLEN)
NAN_BOXED(4604238945100516814,64,FLEN)
NAN_BOXED(4603966414239721439,64,FLEN)
NAN_BOXED(13828145304614883284,64,FLEN)
NAN_BOXED(4602156073461066904,64,FLEN)
NAN_BOXED(4603966414239721439,64,FLEN)
NAN_BOXED(13828145304614883284,64,FLEN)
NAN_BOXED(4602156073461066904,64,FLEN)
NAN_BOXED(4603966414239721439,64,FLEN)
NAN_BOXED(13828145304614883284,64,FLEN)
NAN_BOXED(4602156073461066904,64,FLEN)
NAN_BOXED(4603966414239721439,64,FLEN)
NAN_BOXED(13828145304614883284,64,FLEN)
NAN_BOXED(4602156073461066904,64,FLEN)
NAN_BOXED(4603966414239721439,64,FLEN)
NAN_BOXED(13828145304614883284,64,FLEN)
NAN_BOXED(4602156073461066904,64,FLEN)
NAN_BOXED(4603969580200915074,64,FLEN)
NAN_BOXED(13819368495831084631,64,FLEN)
NAN_BOXED(4593449934415280560,64,FLEN)
NAN_BOXED(4603969580200915074,64,FLEN)
NAN_BOXED(13819368495831084631,64,FLEN)
NAN_BOXED(4593449934415280560,64,FLEN)
NAN_BOXED(4603969580200915074,64,FLEN)
NAN_BOXED(13819368495831084631,64,FLEN)
NAN_BOXED(4593449934415280560,64,FLEN)
NAN_BOXED(4603969580200915074,64,FLEN)
NAN_BOXED(13819368495831084631,64,FLEN)
NAN_BOXED(4593449934415280560,64,FLEN)
NAN_BOXED(4603969580200915074,64,FLEN)
NAN_BOXED(13819368495831084631,64,FLEN)
NAN_BOXED(4593449934415280560,64,FLEN)
NAN_BOXED(4604045302323204284,64,FLEN)
NAN_BOXED(13832136768274422022,64,FLEN)
NAN_BOXED(4606107720572227037,64,FLEN)
NAN_BOXED(4604045302323204284,64,FLEN)
NAN_BOXED(13832136768274422022,64,FLEN)
NAN_BOXED(4606107720572227037,64,FLEN)
NAN_BOXED(4604045302323204284,64,FLEN)
NAN_BOXED(13832136768274422022,64,FLEN)
NAN_BOXED(4606107720572227037,64,FLEN)
NAN_BOXED(4604045302323204284,64,FLEN)
NAN_BOXED(13832136768274422022,64,FLEN)
NAN_BOXED(4606107720572227037,64,FLEN)
NAN_BOXED(4604045302323204284,64,FLEN)
NAN_BOXED(13832136768274422022,64,FLEN)
NAN_BOXED(4606107720572227037,64,FLEN)
NAN_BOXED(4604056518290041270,64,FLEN)
NAN_BOXED(13825349553238853313,64,FLEN)
NAN_BOXED(4599094999270253386,64,FLEN)
NAN_BOXED(4604056518290041270,64,FLEN)
NAN_BOXED(13825349553238853313,64,FLEN)
NAN_BOXED(4599094999270253386,64,FLEN)
NAN_BOXED(4604056518290041270,64,FLEN)
NAN_BOXED(13825349553238853313,64,FLEN)
NAN_BOXED(4599094999270253386,64,FLEN)
NAN_BOXED(4604056518290041270,64,FLEN)
NAN_BOXED(13825349553238853313,64,FLEN)
NAN_BOXED(4599094999270253386,64,FLEN)
NAN_BOXED(4604056518290041270,64,FLEN)
NAN_BOXED(13825349553238853313,64,FLEN)
NAN_BOXED(4599094999270253386,64,FLEN)
NAN_BOXED(4604063432009117281,64,FLEN)
NAN_BOXED(13830203561395498528,64,FLEN)
NAN_BOXED(4603834044394539790,64,FLEN)
NAN_BOXED(4604063432009117281,64,FLEN)
NAN_BOXED(13830203561395498528,64,FLEN)
NAN_BOXED(4603834044394539790,64,FLEN)
NAN_BOXED(4604063432009117281,64,FLEN)
NAN_BOXED(13830203561395498528,64,FLEN)
NAN_BOXED(4603834044394539790,64,FLEN)
NAN_BOXED(4604063432009117281,64,FLEN)
NAN_BOXED(13830203561395498528,64,FLEN)
NAN_BOXED(4603834044394539790,64,FLEN)
NAN_BOXED(4604063432009117281,64,FLEN)
NAN_BOXED(13830203561395498528,64,FLEN)
NAN_BOXED(4603834044394539790,64,FLEN)
NAN_BOXED(4604134035010090091,64,FLEN)
NAN_BOXED(13825449580115094331,64,FLEN)
NAN_BOXED(4599232654440645234,64,FLEN)
NAN_BOXED(4604134035010090091,64,FLEN)
NAN_BOXED(13825449580115094331,64,FLEN)
NAN_BOXED(4599232654440645234,64,FLEN)
NAN_BOXED(4604134035010090091,64,FLEN)
NAN_BOXED(13825449580115094331,64,FLEN)
NAN_BOXED(4599232654440645234,64,FLEN)
NAN_BOXED(4604134035010090091,64,FLEN)
NAN_BOXED(13825449580115094331,64,FLEN)
NAN_BOXED(4599232654440645234,64,FLEN)
NAN_BOXED(4604134035010090091,64,FLEN)
NAN_BOXED(13825449580115094331,64,FLEN)
NAN_BOXED(4599232654440645234,64,FLEN)
NAN_BOXED(4604161949404435331,64,FLEN)
NAN_BOXED(13829885787698396176,64,FLEN)
NAN_BOXED(4603717512204012807,64,FLEN)
NAN_BOXED(4604161949404435331,64,FLEN)
NAN_BOXED(13829885787698396176,64,FLEN)
NAN_BOXED(4603717512204012807,64,FLEN)
NAN_BOXED(4604161949404435331,64,FLEN)
NAN_BOXED(13829885787698396176,64,FLEN)
NAN_BOXED(4603717512204012807,64,FLEN)
NAN_BOXED(4604161949404435331,64,FLEN)
NAN_BOXED(13829885787698396176,64,FLEN)
NAN_BOXED(4603717512204012807,64,FLEN)
NAN_BOXED(4604161949404435331,64,FLEN)
NAN_BOXED(13829885787698396176,64,FLEN)
NAN_BOXED(4603717512204012807,64,FLEN)
NAN_BOXED(4604218423864174631,64,FLEN)
NAN_BOXED(13820345358495052993,64,FLEN)
NAN_BOXED(4594404834697881168,64,FLEN)
NAN_BOXED(4604218423864174631,64,FLEN)
NAN_BOXED(13820345358495052993,64,FLEN)
NAN_BOXED(4594404834697881168,64,FLEN)
NAN_BOXED(4604218423864174631,64,FLEN)
NAN_BOXED(13820345358495052993,64,FLEN)
NAN_BOXED(4594404834697881168,64,FLEN)
NAN_BOXED(4604218423864174631,64,FLEN)
NAN_BOXED(13820345358495052993,64,FLEN)
NAN_BOXED(4594404834697881168,64,FLEN)
NAN_BOXED(4604218423864174631,64,FLEN)
NAN_BOXED(13820345358495052993,64,FLEN)
NAN_BOXED(4594404834697881168,64,FLEN)
NAN_BOXED(4604239210098033107,64,FLEN)
NAN_BOXED(13818860204685017912,64,FLEN)
NAN_BOXED(4593174350084929856,64,FLEN)
NAN_BOXED(4604239210098033107,64,FLEN)
NAN_BOXED(13818860204685017912,64,FLEN)
NAN_BOXED(4593174350084929856,64,FLEN)
NAN_BOXED(4604239210098033107,64,FLEN)
NAN_BOXED(13818860204685017912,64,FLEN)
NAN_BOXED(4593174350084929856,64,FLEN)
NAN_BOXED(4604239210098033107,64,FLEN)
NAN_BOXED(13818860204685017912,64,FLEN)
NAN_BOXED(4593174350084929856,64,FLEN)
NAN_BOXED(4604239210098033107,64,FLEN)
NAN_BOXED(13818860204685017912,64,FLEN)
NAN_BOXED(4593174350084929856,64,FLEN)
NAN_BOXED(4604300840161143460,64,FLEN)
NAN_BOXED(13832416661401762681,64,FLEN)
NAN_BOXED(4606833739809970040,64,FLEN)
NAN_BOXED(4604300840161143460,64,FLEN)
NAN_BOXED(13832416661401762681,64,FLEN)
NAN_BOXED(4606833739809970040,64,FLEN)
NAN_BOXED(4604300840161143460,64,FLEN)
NAN_BOXED(13832416661401762681,64,FLEN)
NAN_BOXED(4606833739809970040,64,FLEN)
NAN_BOXED(4604300840161143460,64,FLEN)
NAN_BOXED(13832416661401762681,64,FLEN)
NAN_BOXED(4606833739809970040,64,FLEN)
NAN_BOXED(4604300840161143460,64,FLEN)
NAN_BOXED(13832416661401762681,64,FLEN)
NAN_BOXED(4606833739809970040,64,FLEN)
NAN_BOXED(4604306470230316450,64,FLEN)
NAN_BOXED(13830704637176518007,64,FLEN)
NAN_BOXED(4604510929026422423,64,FLEN)
NAN_BOXED(4604306470230316450,64,FLEN)
NAN_BOXED(13830704637176518007,64,FLEN)
NAN_BOXED(4604510929026422423,64,FLEN)
NAN_BOXED(4604306470230316450,64,FLEN)
NAN_BOXED(13830704637176518007,64,FLEN)
NAN_BOXED(4604510929026422423,64,FLEN)
NAN_BOXED(4604306470230316450,64,FLEN)
NAN_BOXED(13830704637176518007,64,FLEN)
NAN_BOXED(4604510929026422423,64,FLEN)
NAN_BOXED(4604306470230316450,64,FLEN)
NAN_BOXED(13830704637176518007,64,FLEN)
NAN_BOXED(4604510929026422423,64,FLEN)
NAN_BOXED(4604349743501107829,64,FLEN)
NAN_BOXED(13826099748924497664,64,FLEN)
NAN_BOXED(4599913177000399950,64,FLEN)
NAN_BOXED(4604349743501107829,64,FLEN)
NAN_BOXED(13826099748924497664,64,FLEN)
NAN_BOXED(4599913177000399950,64,FLEN)
NAN_BOXED(4604349743501107829,64,FLEN)
NAN_BOXED(13826099748924497664,64,FLEN)
NAN_BOXED(4599913177000399950,64,FLEN)
NAN_BOXED(4604349743501107829,64,FLEN)
NAN_BOXED(13826099748924497664,64,FLEN)
NAN_BOXED(4599913177000399950,64,FLEN)
NAN_BOXED(4604349743501107829,64,FLEN)
NAN_BOXED(13826099748924497664,64,FLEN)
NAN_BOXED(4599913177000399950,64,FLEN)
NAN_BOXED(4604351478950489458,64,FLEN)
NAN_BOXED(13808373453498710933,64,FLEN)
NAN_BOXED(4582295638813451488,64,FLEN)
NAN_BOXED(4604351478950489458,64,FLEN)
NAN_BOXED(13808373453498710933,64,FLEN)
NAN_BOXED(4582295638813451488,64,FLEN)
NAN_BOXED(4604351478950489458,64,FLEN)
NAN_BOXED(13808373453498710933,64,FLEN)
NAN_BOXED(4582295638813451488,64,FLEN)
NAN_BOXED(4604351478950489458,64,FLEN)
NAN_BOXED(13808373453498710933,64,FLEN)
NAN_BOXED(4582295638813451488,64,FLEN)
NAN_BOXED(4604351478950489458,64,FLEN)
NAN_BOXED(13808373453498710933,64,FLEN)
NAN_BOXED(4582295638813451488,64,FLEN)
NAN_BOXED(4604363382996141211,64,FLEN)
NAN_BOXED(13828269917399340955,64,FLEN)
NAN_BOXED(4602793850033155968,64,FLEN)
NAN_BOXED(4604363382996141211,64,FLEN)
NAN_BOXED(13828269917399340955,64,FLEN)
NAN_BOXED(4602793850033155968,64,FLEN)
NAN_BOXED(4604363382996141211,64,FLEN)
NAN_BOXED(13828269917399340955,64,FLEN)
NAN_BOXED(4602793850033155968,64,FLEN)
NAN_BOXED(4604363382996141211,64,FLEN)
NAN_BOXED(13828269917399340955,64,FLEN)
NAN_BOXED(4602793850033155968,64,FLEN)
NAN_BOXED(4604363382996141211,64,FLEN)
NAN_BOXED(13828269917399340955,64,FLEN)
NAN_BOXED(4602793850033155968,64,FLEN)
NAN_BOXED(4604400838711935125,64,FLEN)
NAN_BOXED(13825380524043040820,64,FLEN)
NAN_BOXED(4599433917298073038,64,FLEN)
NAN_BOXED(4604400838711935125,64,FLEN)
NAN_BOXED(13825380524043040820,64,FLEN)
NAN_BOXED(4599433917298073038,64,FLEN)
NAN_BOXED(4604400838711935125,64,FLEN)
NAN_BOXED(13825380524043040820,64,FLEN)
NAN_BOXED(4599433917298073038,64,FLEN)
NAN_BOXED(4604400838711935125,64,FLEN)
NAN_BOXED(13825380524043040820,64,FLEN)
NAN_BOXED(4599433917298073038,64,FLEN)
NAN_BOXED(4604400838711935125,64,FLEN)
NAN_BOXED(13825380524043040820,64,FLEN)
NAN_BOXED(4599433917298073038,64,FLEN)
NAN_BOXED(4604479855919675560,64,FLEN)
NAN_BOXED(13832399937275171898,64,FLEN)
NAN_BOXED(4607063365004589012,64,FLEN)
NAN_BOXED(4604479855919675560,64,FLEN)
NAN_BOXED(13832399937275171898,64,FLEN)
NAN_BOXED(4607063365004589012,64,FLEN)
NAN_BOXED(4604479855919675560,64,FLEN)
NAN_BOXED(13832399937275171898,64,FLEN)
NAN_BOXED(4607063365004589012,64,FLEN)
NAN_BOXED(4604479855919675560,64,FLEN)
NAN_BOXED(13832399937275171898,64,FLEN)
NAN_BOXED(4607063365004589012,64,FLEN)
NAN_BOXED(4604479855919675560,64,FLEN)
NAN_BOXED(13832399937275171898,64,FLEN)
NAN_BOXED(4607063365004589012,64,FLEN)
NAN_BOXED(4604565869734490859,64,FLEN)
NAN_BOXED(13826459817130990166,64,FLEN)
NAN_BOXED(4600642589755876662,64,FLEN)
NAN_BOXED(4604565869734490859,64,FLEN)
NAN_BOXED(13826459817130990166,64,FLEN)
NAN_BOXED(4600642589755876662,64,FLEN)
NAN_BOXED(4604565869734490859,64,FLEN)
NAN_BOXED(13826459817130990166,64,FLEN)
NAN_BOXED(4600642589755876662,64,FLEN)
NAN_BOXED(4604565869734490859,64,FLEN)
NAN_BOXED(13826459817130990166,64,FLEN)
NAN_BOXED(4600642589755876662,64,FLEN)
NAN_BOXED(4604565869734490859,64,FLEN)
NAN_BOXED(13826459817130990166,64,FLEN)
NAN_BOXED(4600642589755876662,64,FLEN)
NAN_BOXED(4604684460183836650,64,FLEN)
NAN_BOXED(13818104005009247759,64,FLEN)
NAN_BOXED(4592706226894486608,64,FLEN)
NAN_BOXED(4604684460183836650,64,FLEN)
NAN_BOXED(13818104005009247759,64,FLEN)
NAN_BOXED(4592706226894486608,64,FLEN)
NAN_BOXED(4604684460183836650,64,FLEN)
NAN_BOXED(13818104005009247759,64,FLEN)
NAN_BOXED(4592706226894486608,64,FLEN)
NAN_BOXED(4604684460183836650,64,FLEN)
NAN_BOXED(13818104005009247759,64,FLEN)
NAN_BOXED(4592706226894486608,64,FLEN)
NAN_BOXED(4604684460183836650,64,FLEN)
NAN_BOXED(13818104005009247759,64,FLEN)
NAN_BOXED(4592706226894486608,64,FLEN)
NAN_BOXED(4604702397170171545,64,FLEN)
NAN_BOXED(13816851149613233194,64,FLEN)
NAN_BOXED(4591052095609341896,64,FLEN)
NAN_BOXED(4604702397170171545,64,FLEN)
NAN_BOXED(13816851149613233194,64,FLEN)
NAN_BOXED(4591052095609341896,64,FLEN)
NAN_BOXED(4604702397170171545,64,FLEN)
NAN_BOXED(13816851149613233194,64,FLEN)
NAN_BOXED(4591052095609341896,64,FLEN)
NAN_BOXED(4604702397170171545,64,FLEN)
NAN_BOXED(13816851149613233194,64,FLEN)
NAN_BOXED(4591052095609341896,64,FLEN)
NAN_BOXED(4604702397170171545,64,FLEN)
NAN_BOXED(13816851149613233194,64,FLEN)
NAN_BOXED(4591052095609341896,64,FLEN)
NAN_BOXED(4604714953579795973,64,FLEN)
NAN_BOXED(13830334843750798305,64,FLEN)
NAN_BOXED(4604555502966756053,64,FLEN)
NAN_BOXED(4604714953579795973,64,FLEN)
NAN_BOXED(13830334843750798305,64,FLEN)
NAN_BOXED(4604555502966756053,64,FLEN)
NAN_BOXED(4604714953579795973,64,FLEN)
NAN_BOXED(13830334843750798305,64,FLEN)
NAN_BOXED(4604555502966756053,64,FLEN)
NAN_BOXED(4604714953579795973,64,FLEN)
NAN_BOXED(13830334843750798305,64,FLEN)
NAN_BOXED(4604555502966756053,64,FLEN)
NAN_BOXED(4604714953579795973,64,FLEN)
NAN_BOXED(13830334843750798305,64,FLEN)
NAN_BOXED(4604555502966756053,64,FLEN)
NAN_BOXED(4604742517941568876,64,FLEN)
NAN_BOXED(13828715601057518382,64,FLEN)
NAN_BOXED(4603401778550093596,64,FLEN)
NAN_BOXED(4604742517941568876,64,FLEN)
NAN_BOXED(13828715601057518382,64,FLEN)
NAN_BOXED(4603401778550093596,64,FLEN)
NAN_BOXED(4604742517941568876,64,FLEN)
NAN_BOXED(13828715601057518382,64,FLEN)
NAN_BOXED(4603401778550093596,64,FLEN)
NAN_BOXED(4604742517941568876,64,FLEN)
NAN_BOXED(13828715601057518382,64,FLEN)
NAN_BOXED(4603401778550093596,64,FLEN)
NAN_BOXED(4604742517941568876,64,FLEN)
NAN_BOXED(13828715601057518382,64,FLEN)
NAN_BOXED(4603401778550093596,64,FLEN)
NAN_BOXED(4604778917048191467,64,FLEN)
NAN_BOXED(13828631045269125109,64,FLEN)
NAN_BOXED(4603368753910717653,64,FLEN)
NAN_BOXED(4604778917048191467,64,FLEN)
NAN_BOXED(13828631045269125109,64,FLEN)
NAN_BOXED(4603368753910717653,64,FLEN)
NAN_BOXED(4604778917048191467,64,FLEN)
NAN_BOXED(13828631045269125109,64,FLEN)
NAN_BOXED(4603368753910717653,64,FLEN)
NAN_BOXED(4604778917048191467,64,FLEN)
NAN_BOXED(13828631045269125109,64,FLEN)
NAN_BOXED(4603368753910717653,64,FLEN)
NAN_BOXED(4604778917048191467,64,FLEN)
NAN_BOXED(13828631045269125109,64,FLEN)
NAN_BOXED(4603368753910717653,64,FLEN)
NAN_BOXED(4604781134993566331,64,FLEN)
NAN_BOXED(13828369180780408876,64,FLEN)
NAN_BOXED(4603178445784281105,64,FLEN)
NAN_BOXED(4604781134993566331,64,FLEN)
NAN_BOXED(13828369180780408876,64,FLEN)
NAN_BOXED(4603178445784281105,64,FLEN)
NAN_BOXED(4604781134993566331,64,FLEN)
NAN_BOXED(13828369180780408876,64,FLEN)
NAN_BOXED(4603178445784281105,64,FLEN)
NAN_BOXED(4604781134993566331,64,FLEN)
NAN_BOXED(13828369180780408876,64,FLEN)
NAN_BOXED(4603178445784281105,64,FLEN)
NAN_BOXED(4604781134993566331,64,FLEN)
NAN_BOXED(13828369180780408876,64,FLEN)
NAN_BOXED(4603178445784281105,64,FLEN)
NAN_BOXED(4604812503338507450,64,FLEN)
NAN_BOXED(13827386151932213361,64,FLEN)
NAN_BOXED(4602276826839598832,64,FLEN)
NAN_BOXED(4604812503338507450,64,FLEN)
NAN_BOXED(13827386151932213361,64,FLEN)
NAN_BOXED(4602276826839598832,64,FLEN)
NAN_BOXED(4604812503338507450,64,FLEN)
NAN_BOXED(13827386151932213361,64,FLEN)
NAN_BOXED(4602276826839598832,64,FLEN)
NAN_BOXED(4604812503338507450,64,FLEN)
NAN_BOXED(13827386151932213361,64,FLEN)
NAN_BOXED(4602276826839598832,64,FLEN)
NAN_BOXED(4604812503338507450,64,FLEN)
NAN_BOXED(13827386151932213361,64,FLEN)
NAN_BOXED(4602276826839598832,64,FLEN)
NAN_BOXED(4604855348469989426,64,FLEN)
NAN_BOXED(13801052905010642332,64,FLEN)
NAN_BOXED(4575994510283011072,64,FLEN)
NAN_BOXED(4604855348469989426,64,FLEN)
NAN_BOXED(13801052905010642332,64,FLEN)
NAN_BOXED(4575994510283011072,64,FLEN)
NAN_BOXED(4604855348469989426,64,FLEN)
NAN_BOXED(13801052905010642332,64,FLEN)
NAN_BOXED(4575994510283011072,64,FLEN)
NAN_BOXED(4604855348469989426,64,FLEN)
NAN_BOXED(13801052905010642332,64,FLEN)
NAN_BOXED(4575994510283011072,64,FLEN)
NAN_BOXED(4604855348469989426,64,FLEN)
NAN_BOXED(13801052905010642332,64,FLEN)
NAN_BOXED(4575994510283011072,64,FLEN)
NAN_BOXED(4604903536371457125,64,FLEN)
NAN_BOXED(13824423335522510306,64,FLEN)
NAN_BOXED(4599184189952164326,64,FLEN)
NAN_BOXED(4604903536371457125,64,FLEN)
NAN_BOXED(13824423335522510306,64,FLEN)
NAN_BOXED(4599184189952164326,64,FLEN)
NAN_BOXED(4604903536371457125,64,FLEN)
NAN_BOXED(13824423335522510306,64,FLEN)
NAN_BOXED(4599184189952164326,64,FLEN)
NAN_BOXED(4604903536371457125,64,FLEN)
NAN_BOXED(13824423335522510306,64,FLEN)
NAN_BOXED(4599184189952164326,64,FLEN)
NAN_BOXED(4604903536371457125,64,FLEN)
NAN_BOXED(13824423335522510306,64,FLEN)
NAN_BOXED(4599184189952164326,64,FLEN)
NAN_BOXED(4605051084851822910,64,FLEN)
NAN_BOXED(13826339954601032221,64,FLEN)
NAN_BOXED(4600988866123494334,64,FLEN)
NAN_BOXED(4605051084851822910,64,FLEN)
NAN_BOXED(13826339954601032221,64,FLEN)
NAN_BOXED(4600988866123494334,64,FLEN)
NAN_BOXED(4605051084851822910,64,FLEN)
NAN_BOXED(13826339954601032221,64,FLEN)
NAN_BOXED(4600988866123494334,64,FLEN)
NAN_BOXED(4605051084851822910,64,FLEN)
NAN_BOXED(13826339954601032221,64,FLEN)
NAN_BOXED(4600988866123494334,64,FLEN)
NAN_BOXED(4605051084851822910,64,FLEN)
NAN_BOXED(13826339954601032221,64,FLEN)
NAN_BOXED(4600988866123494334,64,FLEN)
NAN_BOXED(4605058835270843319,64,FLEN)
NAN_BOXED(13829029133033367910,64,FLEN)
NAN_BOXED(4603893130539943803,64,FLEN)
NAN_BOXED(4605058835270843319,64,FLEN)
NAN_BOXED(13829029133033367910,64,FLEN)
NAN_BOXED(4603893130539943803,64,FLEN)
NAN_BOXED(4605058835270843319,64,FLEN)
NAN_BOXED(13829029133033367910,64,FLEN)
NAN_BOXED(4603893130539943803,64,FLEN)
NAN_BOXED(4605058835270843319,64,FLEN)
NAN_BOXED(13829029133033367910,64,FLEN)
NAN_BOXED(4603893130539943803,64,FLEN)
NAN_BOXED(4605058835270843319,64,FLEN)
NAN_BOXED(13829029133033367910,64,FLEN)
NAN_BOXED(4603893130539943803,64,FLEN)
NAN_BOXED(4605095277285711851,64,FLEN)
NAN_BOXED(13828463137180696789,64,FLEN)
NAN_BOXED(4603488557573502847,64,FLEN)
NAN_BOXED(4605095277285711851,64,FLEN)
NAN_BOXED(13828463137180696789,64,FLEN)
NAN_BOXED(4603488557573502847,64,FLEN)
NAN_BOXED(4605095277285711851,64,FLEN)
NAN_BOXED(13828463137180696789,64,FLEN)
NAN_BOXED(4603488557573502847,64,FLEN)
NAN_BOXED(4605095277285711851,64,FLEN)
NAN_BOXED(13828463137180696789,64,FLEN)
NAN_BOXED(4603488557573502847,64,FLEN)
NAN_BOXED(4605095277285711851,64,FLEN)
NAN_BOXED(13828463137180696789,64,FLEN)
NAN_BOXED(4603488557573502847,64,FLEN)
NAN_BOXED(4605115857548614862,64,FLEN)
NAN_BOXED(13827090907279433767,64,FLEN)
NAN_BOXED(4602215113379632952,64,FLEN)
NAN_BOXED(4605115857548614862,64,FLEN)
NAN_BOXED(13827090907279433767,64,FLEN)
NAN_BOXED(4602215113379632952,64,FLEN)
NAN_BOXED(4605115857548614862,64,FLEN)
NAN_BOXED(13827090907279433767,64,FLEN)
NAN_BOXED(4602215113379632952,64,FLEN)
NAN_BOXED(4605115857548614862,64,FLEN)
NAN_BOXED(13827090907279433767,64,FLEN)
NAN_BOXED(4602215113379632952,64,FLEN)
NAN_BOXED(4605115857548614862,64,FLEN)
NAN_BOXED(13827090907279433767,64,FLEN)
NAN_BOXED(4602215113379632952,64,FLEN)
NAN_BOXED(4605140433952355009,64,FLEN)
NAN_BOXED(13810559754535321773,64,FLEN)
NAN_BOXED(4585594679037915760,64,FLEN)
NAN_BOXED(4605140433952355009,64,FLEN)
NAN_BOXED(13810559754535321773,64,FLEN)
NAN_BOXED(4585594679037915760,64,FLEN)
NAN_BOXED(4605140433952355009,64,FLEN)
NAN_BOXED(13810559754535321773,64,FLEN)
NAN_BOXED(4585594679037915760,64,FLEN)
NAN_BOXED(4605140433952355009,64,FLEN)
NAN_BOXED(13810559754535321773,64,FLEN)
NAN_BOXED(4585594679037915760,64,FLEN)
NAN_BOXED(4605140433952355009,64,FLEN)
NAN_BOXED(13810559754535321773,64,FLEN)
NAN_BOXED(4585594679037915760,64,FLEN)
NAN_BOXED(4605151118376032768,64,FLEN)
NAN_BOXED(13830717349853676734,64,FLEN)
NAN_BOXED(4605403435088340516,64,FLEN)
NAN_BOXED(4605151118376032768,64,FLEN)
NAN_BOXED(13830717349853676734,64,FLEN)
NAN_BOXED(4605403435088340516,64,FLEN)
NAN_BOXED(4605151118376032768,64,FLEN)
NAN_BOXED(13830717349853676734,64,FLEN)
NAN_BOXED(4605403435088340516,64,FLEN)
NAN_BOXED(4605151118376032768,64,FLEN)
NAN_BOXED(13830717349853676734,64,FLEN)
NAN_BOXED(4605403435088340516,64,FLEN)
NAN_BOXED(4605151118376032768,64,FLEN)
NAN_BOXED(13830717349853676734,64,FLEN)
NAN_BOXED(4605403435088340516,64,FLEN)
NAN_BOXED(4605167795158154159,64,FLEN)
NAN_BOXED(13829710377694910850,64,FLEN)
NAN_BOXED(4604512510558500795,64,FLEN)
NAN_BOXED(4605167795158154159,64,FLEN)
NAN_BOXED(13829710377694910850,64,FLEN)
NAN_BOXED(4604512510558500795,64,FLEN)
NAN_BOXED(4605167795158154159,64,FLEN)
NAN_BOXED(13829710377694910850,64,FLEN)
NAN_BOXED(4604512510558500795,64,FLEN)
NAN_BOXED(4605167795158154159,64,FLEN)
NAN_BOXED(13829710377694910850,64,FLEN)
NAN_BOXED(4604512510558500795,64,FLEN)
NAN_BOXED(4605167795158154159,64,FLEN)
NAN_BOXED(13829710377694910850,64,FLEN)
NAN_BOXED(4604512510558500795,64,FLEN)
NAN_BOXED(4605177385789940266,64,FLEN)
NAN_BOXED(13829736982327909103,64,FLEN)
NAN_BOXED(4604541884789736669,64,FLEN)
NAN_BOXED(4605177385789940266,64,FLEN)
NAN_BOXED(13829736982327909103,64,FLEN)
NAN_BOXED(4604541884789736669,64,FLEN)
NAN_BOXED(4605177385789940266,64,FLEN)
NAN_BOXED(13829736982327909103,64,FLEN)
NAN_BOXED(4604541884789736669,64,FLEN)
NAN_BOXED(4605177385789940266,64,FLEN)
NAN_BOXED(13829736982327909103,64,FLEN)
NAN_BOXED(4604541884789736669,64,FLEN)
NAN_BOXED(4605177385789940266,64,FLEN)
NAN_BOXED(13829736982327909103,64,FLEN)
NAN_BOXED(4604541884789736669,64,FLEN)
NAN_BOXED(4605193112930492880,64,FLEN)
NAN_BOXED(13823455396707503303,64,FLEN)
NAN_BOXED(4598667280167414466,64,FLEN)
NAN_BOXED(4605193112930492880,64,FLEN)
NAN_BOXED(13823455396707503303,64,FLEN)
NAN_BOXED(4598667280167414466,64,FLEN)
NAN_BOXED(4605193112930492880,64,FLEN)
NAN_BOXED(13823455396707503303,64,FLEN)
NAN_BOXED(4598667280167414466,64,FLEN)
NAN_BOXED(4605193112930492880,64,FLEN)
NAN_BOXED(13823455396707503303,64,FLEN)
NAN_BOXED(4598667280167414466,64,FLEN)
NAN_BOXED(4605193112930492880,64,FLEN)
NAN_BOXED(13823455396707503303,64,FLEN)
NAN_BOXED(4598667280167414466,64,FLEN)
NAN_BOXED(4605201240020715878,64,FLEN)
NAN_BOXED(13830278120849778199,64,FLEN)
NAN_BOXED(4604985686445936221,64,FLEN)
NAN_BOXED(4605201240020715878,64,FLEN)
NAN_BOXED(13830278120849778199,64,FLEN)
NAN_BOXED(4604985686445936221,64,FLEN)
NAN_BOXED(4605201240020715878,64,FLEN)
NAN_BOXED(13830278120849778199,64,FLEN)
NAN_BOXED(4604985686445936221,64,FLEN)
NAN_BOXED(4605201240020715878,64,FLEN)
NAN_BOXED(13830278120849778199,64,FLEN)
NAN_BOXED(4604985686445936221,64,FLEN)
NAN_BOXED(4605201240020715878,64,FLEN)
NAN_BOXED(13830278120849778199,64,FLEN)
NAN_BOXED(4604985686445936221,64,FLEN)
NAN_BOXED(4605223407271400971,64,FLEN)
NAN_BOXED(13826997505741726809,64,FLEN)
NAN_BOXED(4602201325862645538,64,FLEN)
NAN_BOXED(4605223407271400971,64,FLEN)
NAN_BOXED(13826997505741726809,64,FLEN)
NAN_BOXED(4602201325862645538,64,FLEN)
NAN_BOXED(4605223407271400971,64,FLEN)
NAN_BOXED(13826997505741726809,64,FLEN)
NAN_BOXED(4602201325862645538,64,FLEN)
NAN_BOXED(4605223407271400971,64,FLEN)
NAN_BOXED(13826997505741726809,64,FLEN)
NAN_BOXED(4602201325862645538,64,FLEN)
NAN_BOXED(4605223407271400971,64,FLEN)
NAN_BOXED(13826997505741726809,64,FLEN)
NAN_BOXED(4602201325862645538,64,FLEN)
NAN_BOXED(4605304913930476610,64,FLEN)
NAN_BOXED(13824037308796173433,64,FLEN)
NAN_BOXED(4599207480750304772,64,FLEN)
NAN_BOXED(4605304913930476610,64,FLEN)
NAN_BOXED(13824037308796173433,64,FLEN)
NAN_BOXED(4599207480750304772,64,FLEN)
NAN_BOXED(4605304913930476610,64,FLEN)
NAN_BOXED(13824037308796173433,64,FLEN)
NAN_BOXED(4599207480750304772,64,FLEN)
NAN_BOXED(4605304913930476610,64,FLEN)
NAN_BOXED(13824037308796173433,64,FLEN)
NAN_BOXED(4599207480750304772,64,FLEN)
NAN_BOXED(4605304913930476610,64,FLEN)
NAN_BOXED(13824037308796173433,64,FLEN)
NAN_BOXED(4599207480750304772,64,FLEN)
NAN_BOXED(4605364691602739837,64,FLEN)
NAN_BOXED(13822314091029886976,64,FLEN)
NAN_BOXED(4597581654484967312,64,FLEN)
NAN_BOXED(4605364691602739837,64,FLEN)
NAN_BOXED(13822314091029886976,64,FLEN)
NAN_BOXED(4597581654484967312,64,FLEN)
NAN_BOXED(4605364691602739837,64,FLEN)
NAN_BOXED(13822314091029886976,64,FLEN)
NAN_BOXED(4597581654484967312,64,FLEN)
NAN_BOXED(4605364691602739837,64,FLEN)
NAN_BOXED(13822314091029886976,64,FLEN)
NAN_BOXED(4597581654484967312,64,FLEN)
NAN_BOXED(4605364691602739837,64,FLEN)
NAN_BOXED(13822314091029886976,64,FLEN)
NAN_BOXED(4597581654484967312,64,FLEN)
NAN_BOXED(4605377979289125605,64,FLEN)
NAN_BOXED(13822561081174121636,64,FLEN)
NAN_BOXED(4597992224406482972,64,FLEN)
NAN_BOXED(4605377979289125605,64,FLEN)
NAN_BOXED(13822561081174121636,64,FLEN)
NAN_BOXED(4597992224406482972,64,FLEN)
NAN_BOXED(4605377979289125605,64,FLEN)
NAN_BOXED(13822561081174121636,64,FLEN)
NAN_BOXED(4597992224406482972,64,FLEN)
NAN_BOXED(4605377979289125605,64,FLEN)
NAN_BOXED(13822561081174121636,64,FLEN)
NAN_BOXED(4597992224406482972,64,FLEN)
NAN_BOXED(4605377979289125605,64,FLEN)
NAN_BOXED(13822561081174121636,64,FLEN)
NAN_BOXED(4597992224406482972,64,FLEN)
NAN_BOXED(4605388748116053007,64,FLEN)
NAN_BOXED(13831518154454373360,64,FLEN)
NAN_BOXED(4606932328673735334,64,FLEN)
NAN_BOXED(4605388748116053007,64,FLEN)
NAN_BOXED(13831518154454373360,64,FLEN)
NAN_BOXED(4606932328673735334,64,FLEN)
NAN_BOXED(4605388748116053007,64,FLEN)
NAN_BOXED(13831518154454373360,64,FLEN)
NAN_BOXED(4606932328673735334,64,FLEN)
NAN_BOXED(4605388748116053007,64,FLEN)
NAN_BOXED(13831518154454373360,64,FLEN)
NAN_BOXED(4606932328673735334,64,FLEN)
NAN_BOXED(4605388748116053007,64,FLEN)
NAN_BOXED(13831518154454373360,64,FLEN)
NAN_BOXED(4606932328673735334,64,FLEN)
NAN_BOXED(4605402162485513271,64,FLEN)
NAN_BOXED(13830821007332599746,64,FLEN)
NAN_BOXED(4605829898946459939,64,FLEN)
NAN_BOXED(4605402162485513271,64,FLEN)
NAN_BOXED(13830821007332599746,64,FLEN)
NAN_BOXED(4605829898946459939,64,FLEN)
NAN_BOXED(4605402162485513271,64,FLEN)
NAN_BOXED(13830821007332599746,64,FLEN)
NAN_BOXED(4605829898946459939,64,FLEN)
NAN_BOXED(4605402162485513271,64,FLEN)
NAN_BOXED(13830821007332599746,64,FLEN)
NAN_BOXED(4605829898946459939,64,FLEN)
NAN_BOXED(4605402162485513271,64,FLEN)
NAN_BOXED(13830821007332599746,64,FLEN)
NAN_BOXED(4605829898946459939,64,FLEN)
NAN_BOXED(4605436337215519800,64,FLEN)
NAN_BOXED(13812859301183808561,64,FLEN)
NAN_BOXED(4587936653316760496,64,FLEN)
NAN_BOXED(4605436337215519800,64,FLEN)
NAN_BOXED(13812859301183808561,64,FLEN)
NAN_BOXED(4587936653316760496,64,FLEN)
NAN_BOXED(4605436337215519800,64,FLEN)
NAN_BOXED(13812859301183808561,64,FLEN)
NAN_BOXED(4587936653316760496,64,FLEN)
NAN_BOXED(4605436337215519800,64,FLEN)
NAN_BOXED(13812859301183808561,64,FLEN)
NAN_BOXED(4587936653316760496,64,FLEN)
NAN_BOXED(4605436337215519800,64,FLEN)
NAN_BOXED(13812859301183808561,64,FLEN)
NAN_BOXED(4587936653316760496,64,FLEN)
NAN_BOXED(4605450957301030888,64,FLEN)
NAN_BOXED(13820099289350045509,64,FLEN)
NAN_BOXED(4595274134921845624,64,FLEN)
NAN_BOXED(4605450957301030888,64,FLEN)
NAN_BOXED(13820099289350045509,64,FLEN)
NAN_BOXED(4595274134921845624,64,FLEN)
NAN_BOXED(4605450957301030888,64,FLEN)
NAN_BOXED(13820099289350045509,64,FLEN)
NAN_BOXED(4595274134921845624,64,FLEN)
NAN_BOXED(4605450957301030888,64,FLEN)
NAN_BOXED(13820099289350045509,64,FLEN)
NAN_BOXED(4595274134921845624,64,FLEN)
NAN_BOXED(4605450957301030888,64,FLEN)
NAN_BOXED(13820099289350045509,64,FLEN)
NAN_BOXED(4595274134921845624,64,FLEN)
NAN_BOXED(4605519202616627110,64,FLEN)
NAN_BOXED(13826187951665357668,64,FLEN)
NAN_BOXED(4601239163724547406,64,FLEN)
NAN_BOXED(4605519202616627110,64,FLEN)
NAN_BOXED(13826187951665357668,64,FLEN)
NAN_BOXED(4601239163724547406,64,FLEN)
NAN_BOXED(4605519202616627110,64,FLEN)
NAN_BOXED(13826187951665357668,64,FLEN)
NAN_BOXED(4601239163724547406,64,FLEN)
NAN_BOXED(4605519202616627110,64,FLEN)
NAN_BOXED(13826187951665357668,64,FLEN)
NAN_BOXED(4601239163724547406,64,FLEN)
NAN_BOXED(4605519202616627110,64,FLEN)
NAN_BOXED(13826187951665357668,64,FLEN)
NAN_BOXED(4601239163724547406,64,FLEN)
NAN_BOXED(4605536826689509095,64,FLEN)
NAN_BOXED(13830683467853773554,64,FLEN)
NAN_BOXED(4605747710694369302,64,FLEN)
NAN_BOXED(4605536826689509095,64,FLEN)
NAN_BOXED(13830683467853773554,64,FLEN)
NAN_BOXED(4605747710694369302,64,FLEN)
NAN_BOXED(4605536826689509095,64,FLEN)
NAN_BOXED(13830683467853773554,64,FLEN)
NAN_BOXED(4605747710694369302,64,FLEN)
NAN_BOXED(4605536826689509095,64,FLEN)
NAN_BOXED(13830683467853773554,64,FLEN)
NAN_BOXED(4605747710694369302,64,FLEN)
NAN_BOXED(4605536826689509095,64,FLEN)
NAN_BOXED(13830683467853773554,64,FLEN)
NAN_BOXED(4605747710694369302,64,FLEN)
NAN_BOXED(4605548061847695360,64,FLEN)
NAN_BOXED(13830995458158036013,64,FLEN)
NAN_BOXED(4606270026982344674,64,FLEN)
NAN_BOXED(4605548061847695360,64,FLEN)
NAN_BOXED(13830995458158036013,64,FLEN)
NAN_BOXED(4606270026982344674,64,FLEN)
NAN_BOXED(4605548061847695360,64,FLEN)
NAN_BOXED(13830995458158036013,64,FLEN)
NAN_BOXED(4606270026982344674,64,FLEN)
NAN_BOXED(4605548061847695360,64,FLEN)
NAN_BOXED(13830995458158036013,64,FLEN)
NAN_BOXED(4606270026982344674,64,FLEN)
NAN_BOXED(4605548061847695360,64,FLEN)
NAN_BOXED(13830995458158036013,64,FLEN)
NAN_BOXED(4606270026982344674,64,FLEN)
NAN_BOXED(4605580956469190790,64,FLEN)
NAN_BOXED(13808814245374797331,64,FLEN)
NAN_BOXED(4584341955740431232,64,FLEN)
NAN_BOXED(4605580956469190790,64,FLEN)
NAN_BOXED(13808814245374797331,64,FLEN)
NAN_BOXED(4584341955740431232,64,FLEN)
NAN_BOXED(4605580956469190790,64,FLEN)
NAN_BOXED(13808814245374797331,64,FLEN)
NAN_BOXED(4584341955740431232,64,FLEN)
NAN_BOXED(4605580956469190790,64,FLEN)
NAN_BOXED(13808814245374797331,64,FLEN)
NAN_BOXED(4584341955740431232,64,FLEN)
NAN_BOXED(4605580956469190790,64,FLEN)
NAN_BOXED(13808814245374797331,64,FLEN)
NAN_BOXED(4584341955740431232,64,FLEN)
NAN_BOXED(4605590991324771394,64,FLEN)
NAN_BOXED(13822526734267744101,64,FLEN)
NAN_BOXED(4598185925664086152,64,FLEN)
NAN_BOXED(4605590991324771394,64,FLEN)
NAN_BOXED(13822526734267744101,64,FLEN)
NAN_BOXED(4598185925664086152,64,FLEN)
NAN_BOXED(4605590991324771394,64,FLEN)
NAN_BOXED(13822526734267744101,64,FLEN)
NAN_BOXED(4598185925664086152,64,FLEN)
NAN_BOXED(4605590991324771394,64,FLEN)
NAN_BOXED(13822526734267744101,64,FLEN)
NAN_BOXED(4598185925664086152,64,FLEN)
NAN_BOXED(4605590991324771394,64,FLEN)
NAN_BOXED(13822526734267744101,64,FLEN)
NAN_BOXED(4598185925664086152,64,FLEN)
NAN_BOXED(4605649780620211992,64,FLEN)
NAN_BOXED(13827673231602788089,64,FLEN)
NAN_BOXED(4603258817065592043,64,FLEN)
NAN_BOXED(4605649780620211992,64,FLEN)
NAN_BOXED(13827673231602788089,64,FLEN)
NAN_BOXED(4603258817065592043,64,FLEN)
NAN_BOXED(4605649780620211992,64,FLEN)
NAN_BOXED(13827673231602788089,64,FLEN)
NAN_BOXED(4603258817065592043,64,FLEN)
NAN_BOXED(4605649780620211992,64,FLEN)
NAN_BOXED(13827673231602788089,64,FLEN)
NAN_BOXED(4603258817065592043,64,FLEN)
NAN_BOXED(4605649780620211992,64,FLEN)
NAN_BOXED(13827673231602788089,64,FLEN)
NAN_BOXED(4603258817065592043,64,FLEN)
NAN_BOXED(4605725922069800926,64,FLEN)
NAN_BOXED(13829713810802957424,64,FLEN)
NAN_BOXED(4605021212534076597,64,FLEN)
NAN_BOXED(4605725922069800926,64,FLEN)
NAN_BOXED(13829713810802957424,64,FLEN)
NAN_BOXED(4605021212534076597,64,FLEN)
NAN_BOXED(4605725922069800926,64,FLEN)
NAN_BOXED(13829713810802957424,64,FLEN)
NAN_BOXED(4605021212534076597,64,FLEN)
NAN_BOXED(4605725922069800926,64,FLEN)
NAN_BOXED(13829713810802957424,64,FLEN)
NAN_BOXED(4605021212534076597,64,FLEN)
NAN_BOXED(4605725922069800926,64,FLEN)
NAN_BOXED(13829713810802957424,64,FLEN)
NAN_BOXED(4605021212534076597,64,FLEN)
NAN_BOXED(4605743628501853522,64,FLEN)
NAN_BOXED(13829534209204374593,64,FLEN)
NAN_BOXED(4604886353986781595,64,FLEN)
NAN_BOXED(4605743628501853522,64,FLEN)
NAN_BOXED(13829534209204374593,64,FLEN)
NAN_BOXED(4604886353986781595,64,FLEN)
NAN_BOXED(4605743628501853522,64,FLEN)
NAN_BOXED(13829534209204374593,64,FLEN)
NAN_BOXED(4604886353986781595,64,FLEN)
NAN_BOXED(4605743628501853522,64,FLEN)
NAN_BOXED(13829534209204374593,64,FLEN)
NAN_BOXED(4604886353986781595,64,FLEN)
NAN_BOXED(4605743628501853522,64,FLEN)
NAN_BOXED(13829534209204374593,64,FLEN)
NAN_BOXED(4604886353986781595,64,FLEN)
NAN_BOXED(4605757222623139554,64,FLEN)
NAN_BOXED(13826997305621662724,64,FLEN)
NAN_BOXED(4602762915321075556,64,FLEN)
NAN_BOXED(4605757222623139554,64,FLEN)
NAN_BOXED(13826997305621662724,64,FLEN)
NAN_BOXED(4602762915321075556,64,FLEN)
NAN_BOXED(4605757222623139554,64,FLEN)
NAN_BOXED(13826997305621662724,64,FLEN)
NAN_BOXED(4602762915321075556,64,FLEN)
NAN_BOXED(4605757222623139554,64,FLEN)
NAN_BOXED(13826997305621662724,64,FLEN)
NAN_BOXED(4602762915321075556,64,FLEN)
NAN_BOXED(4605757222623139554,64,FLEN)
NAN_BOXED(13826997305621662724,64,FLEN)
NAN_BOXED(4602762915321075556,64,FLEN)
NAN_BOXED(4605851496745249331,64,FLEN)
NAN_BOXED(13830564213386585898,64,FLEN)
NAN_BOXED(4605868128564301005,64,FLEN)
NAN_BOXED(4605851496745249331,64,FLEN)
NAN_BOXED(13830564213386585898,64,FLEN)
NAN_BOXED(4605868128564301005,64,FLEN)
NAN_BOXED(4605851496745249331,64,FLEN)
NAN_BOXED(13830564213386585898,64,FLEN)
NAN_BOXED(4605868128564301005,64,FLEN)
NAN_BOXED(4605851496745249331,64,FLEN)
NAN_BOXED(13830564213386585898,64,FLEN)
NAN_BOXED(4605868128564301005,64,FLEN)
NAN_BOXED(4605851496745249331,64,FLEN)
NAN_BOXED(13830564213386585898,64,FLEN)
NAN_BOXED(4605868128564301005,64,FLEN)
NAN_BOXED(4605866432263859117,64,FLEN)
NAN_BOXED(13819998413242515262,64,FLEN)
NAN_BOXED(4595536681808081036,64,FLEN)
NAN_BOXED(4605866432263859117,64,FLEN)
NAN_BOXED(13819998413242515262,64,FLEN)
NAN_BOXED(4595536681808081036,64,FLEN)
NAN_BOXED(4605866432263859117,64,FLEN)
NAN_BOXED(13819998413242515262,64,FLEN)
NAN_BOXED(4595536681808081036,64,FLEN)
NAN_BOXED(4605866432263859117,64,FLEN)
NAN_BOXED(13819998413242515262,64,FLEN)
NAN_BOXED(4595536681808081036,64,FLEN)
NAN_BOXED(4605866432263859117,64,FLEN)
NAN_BOXED(13819998413242515262,64,FLEN)
NAN_BOXED(4595536681808081036,64,FLEN)
NAN_BOXED(4605902153701308648,64,FLEN)
NAN_BOXED(13830962703231578604,64,FLEN)
NAN_BOXED(4606602593883870395,64,FLEN)
NAN_BOXED(4605902153701308648,64,FLEN)
NAN_BOXED(13830962703231578604,64,FLEN)
NAN_BOXED(4606602593883870395,64,FLEN)
NAN_BOXED(4605902153701308648,64,FLEN)
NAN_BOXED(13830962703231578604,64,FLEN)
NAN_BOXED(4606602593883870395,64,FLEN)
NAN_BOXED(4605902153701308648,64,FLEN)
NAN_BOXED(13830962703231578604,64,FLEN)
NAN_BOXED(4606602593883870395,64,FLEN)
NAN_BOXED(4605902153701308648,64,FLEN)
NAN_BOXED(13830962703231578604,64,FLEN)
NAN_BOXED(4606602593883870395,64,FLEN)
NAN_BOXED(4605915136963176493,64,FLEN)
NAN_BOXED(13823124853494158722,64,FLEN)
NAN_BOXED(4598897213256641280,64,FLEN)
NAN_BOXED(4605915136963176493,64,FLEN)
NAN_BOXED(13823124853494158722,64,FLEN)
NAN_BOXED(4598897213256641280,64,FLEN)
NAN_BOXED(4605915136963176493,64,FLEN)
NAN_BOXED(13823124853494158722,64,FLEN)
NAN_BOXED(4598897213256641280,64,FLEN)
NAN_BOXED(4605915136963176493,64,FLEN)
NAN_BOXED(13823124853494158722,64,FLEN)
NAN_BOXED(4598897213256641280,64,FLEN)
NAN_BOXED(4605915136963176493,64,FLEN)
NAN_BOXED(13823124853494158722,64,FLEN)
NAN_BOXED(4598897213256641280,64,FLEN)
NAN_BOXED(4605950187513930105,64,FLEN)
NAN_BOXED(13825176775318746004,64,FLEN)
NAN_BOXED(4600692085924320626,64,FLEN)
NAN_BOXED(4605950187513930105,64,FLEN)
NAN_BOXED(13825176775318746004,64,FLEN)
NAN_BOXED(4600692085924320626,64,FLEN)
NAN_BOXED(4605950187513930105,64,FLEN)
NAN_BOXED(13825176775318746004,64,FLEN)
NAN_BOXED(4600692085924320626,64,FLEN)
NAN_BOXED(4605950187513930105,64,FLEN)
NAN_BOXED(13825176775318746004,64,FLEN)
NAN_BOXED(4600692085924320626,64,FLEN)
NAN_BOXED(4605950187513930105,64,FLEN)
NAN_BOXED(13825176775318746004,64,FLEN)
NAN_BOXED(4600692085924320626,64,FLEN)
NAN_BOXED(4605966665482364588,64,FLEN)
NAN_BOXED(13821952280227139671,64,FLEN)
NAN_BOXED(4597660177106273996,64,FLEN)
NAN_BOXED(4605966665482364588,64,FLEN)
NAN_BOXED(13821952280227139671,64,FLEN)
NAN_BOXED(4597660177106273996,64,FLEN)
NAN_BOXED(4605966665482364588,64,FLEN)
NAN_BOXED(13821952280227139671,64,FLEN)
NAN_BOXED(4597660177106273996,64,FLEN)
NAN_BOXED(4605966665482364588,64,FLEN)
NAN_BOXED(13821952280227139671,64,FLEN)
NAN_BOXED(4597660177106273996,64,FLEN)
NAN_BOXED(4605966665482364588,64,FLEN)
NAN_BOXED(13821952280227139671,64,FLEN)
NAN_BOXED(4597660177106273996,64,FLEN)
NAN_BOXED(4605987576801210949,64,FLEN)
NAN_BOXED(13828537875841355336,64,FLEN)
NAN_BOXED(4604238504587737911,64,FLEN)
NAN_BOXED(4605987576801210949,64,FLEN)
NAN_BOXED(13828537875841355336,64,FLEN)
NAN_BOXED(4604238504587737911,64,FLEN)
NAN_BOXED(4605987576801210949,64,FLEN)
NAN_BOXED(13828537875841355336,64,FLEN)
NAN_BOXED(4604238504587737911,64,FLEN)
NAN_BOXED(4605987576801210949,64,FLEN)
NAN_BOXED(13828537875841355336,64,FLEN)
NAN_BOXED(4604238504587737911,64,FLEN)
NAN_BOXED(4605987576801210949,64,FLEN)
NAN_BOXED(13828537875841355336,64,FLEN)
NAN_BOXED(4604238504587737911,64,FLEN)
NAN_BOXED(4606034869790556900,64,FLEN)
NAN_BOXED(13809401931772226828,64,FLEN)
NAN_BOXED(4585282154168205296,64,FLEN)
NAN_BOXED(4606034869790556900,64,FLEN)
NAN_BOXED(13809401931772226828,64,FLEN)
NAN_BOXED(4585282154168205296,64,FLEN)
NAN_BOXED(4606034869790556900,64,FLEN)
NAN_BOXED(13809401931772226828,64,FLEN)
NAN_BOXED(4585282154168205296,64,FLEN)
NAN_BOXED(4606034869790556900,64,FLEN)
NAN_BOXED(13809401931772226828,64,FLEN)
NAN_BOXED(4585282154168205296,64,FLEN)
NAN_BOXED(4606034869790556900,64,FLEN)
NAN_BOXED(13809401931772226828,64,FLEN)
NAN_BOXED(4585282154168205296,64,FLEN)
NAN_BOXED(4606044531223838626,64,FLEN)
NAN_BOXED(13823130109385501081,64,FLEN)
NAN_BOXED(4598989165502551932,64,FLEN)
NAN_BOXED(4606044531223838626,64,FLEN)
NAN_BOXED(13823130109385501081,64,FLEN)
NAN_BOXED(4598989165502551932,64,FLEN)
NAN_BOXED(4606044531223838626,64,FLEN)
NAN_BOXED(13823130109385501081,64,FLEN)
NAN_BOXED(4598989165502551932,64,FLEN)
NAN_BOXED(4606044531223838626,64,FLEN)
NAN_BOXED(13823130109385501081,64,FLEN)
NAN_BOXED(4598989165502551932,64,FLEN)
NAN_BOXED(4606044531223838626,64,FLEN)
NAN_BOXED(13823130109385501081,64,FLEN)
NAN_BOXED(4598989165502551932,64,FLEN)
NAN_BOXED(4606067348640997785,64,FLEN)
NAN_BOXED(13829932788164553508,64,FLEN)
NAN_BOXED(4605522642129148119,64,FLEN)
NAN_BOXED(4606067348640997785,64,FLEN)
NAN_BOXED(13829932788164553508,64,FLEN)
NAN_BOXED(4605522642129148119,64,FLEN)
NAN_BOXED(4606067348640997785,64,FLEN)
NAN_BOXED(13829932788164553508,64,FLEN)
NAN_BOXED(4605522642129148119,64,FLEN)
NAN_BOXED(4606067348640997785,64,FLEN)
NAN_BOXED(13829932788164553508,64,FLEN)
NAN_BOXED(4605522642129148119,64,FLEN)
NAN_BOXED(4606067348640997785,64,FLEN)
NAN_BOXED(13829932788164553508,64,FLEN)
NAN_BOXED(4605522642129148119,64,FLEN)
NAN_BOXED(4606083342164619234,64,FLEN)
NAN_BOXED(13825646127503618313,64,FLEN)
NAN_BOXED(4601224399804922018,64,FLEN)
NAN_BOXED(4606083342164619234,64,FLEN)
NAN_BOXED(13825646127503618313,64,FLEN)
NAN_BOXED(4601224399804922018,64,FLEN)
NAN_BOXED(4606083342164619234,64,FLEN)
NAN_BOXED(13825646127503618313,64,FLEN)
NAN_BOXED(4601224399804922018,64,FLEN)
NAN_BOXED(4606083342164619234,64,FLEN)
NAN_BOXED(13825646127503618313,64,FLEN)
NAN_BOXED(4601224399804922018,64,FLEN)
NAN_BOXED(4606083342164619234,64,FLEN)
NAN_BOXED(13825646127503618313,64,FLEN)
NAN_BOXED(4601224399804922018,64,FLEN)
NAN_BOXED(4606115024795537045,64,FLEN)
NAN_BOXED(13827819558369463221,64,FLEN)
NAN_BOXED(4603704225254985407,64,FLEN)
NAN_BOXED(4606115024795537045,64,FLEN)
NAN_BOXED(13827819558369463221,64,FLEN)
NAN_BOXED(4603704225254985407,64,FLEN)
NAN_BOXED(4606115024795537045,64,FLEN)
NAN_BOXED(13827819558369463221,64,FLEN)
NAN_BOXED(4603704225254985407,64,FLEN)
NAN_BOXED(4606115024795537045,64,FLEN)
NAN_BOXED(13827819558369463221,64,FLEN)
NAN_BOXED(4603704225254985407,64,FLEN)
NAN_BOXED(4606115024795537045,64,FLEN)
NAN_BOXED(13827819558369463221,64,FLEN)
NAN_BOXED(4603704225254985407,64,FLEN)
NAN_BOXED(4606122683899610674,64,FLEN)
NAN_BOXED(13814293517134351819,64,FLEN)
NAN_BOXED(4590185310881974840,64,FLEN)
NAN_BOXED(4606122683899610674,64,FLEN)
NAN_BOXED(13814293517134351819,64,FLEN)
NAN_BOXED(4590185310881974840,64,FLEN)
NAN_BOXED(4606122683899610674,64,FLEN)
NAN_BOXED(13814293517134351819,64,FLEN)
NAN_BOXED(4590185310881974840,64,FLEN)
NAN_BOXED(4606122683899610674,64,FLEN)
NAN_BOXED(13814293517134351819,64,FLEN)
NAN_BOXED(4590185310881974840,64,FLEN)
NAN_BOXED(4606122683899610674,64,FLEN)
NAN_BOXED(13814293517134351819,64,FLEN)
NAN_BOXED(4590185310881974840,64,FLEN)
NAN_BOXED(4606128193802368226,64,FLEN)
NAN_BOXED(13819504056109689146,64,FLEN)
NAN_BOXED(4595316935499773148,64,FLEN)
NAN_BOXED(4606128193802368226,64,FLEN)
NAN_BOXED(13819504056109689146,64,FLEN)
NAN_BOXED(4595316935499773148,64,FLEN)
NAN_BOXED(4606128193802368226,64,FLEN)
NAN_BOXED(13819504056109689146,64,FLEN)
NAN_BOXED(4595316935499773148,64,FLEN)
NAN_BOXED(4606128193802368226,64,FLEN)
NAN_BOXED(13819504056109689146,64,FLEN)
NAN_BOXED(4595316935499773148,64,FLEN)
NAN_BOXED(4606128193802368226,64,FLEN)
NAN_BOXED(13819504056109689146,64,FLEN)
NAN_BOXED(4595316935499773148,64,FLEN)
NAN_BOXED(4606140540397925710,64,FLEN)
NAN_BOXED(13830957180644420549,64,FLEN)
NAN_BOXED(4606852822577333056,64,FLEN)
NAN_BOXED(4606140540397925710,64,FLEN)
NAN_BOXED(13830957180644420549,64,FLEN)
NAN_BOXED(4606852822577333056,64,FLEN)
NAN_BOXED(4606140540397925710,64,FLEN)
NAN_BOXED(13830957180644420549,64,FLEN)
NAN_BOXED(4606852822577333056,64,FLEN)
NAN_BOXED(4606140540397925710,64,FLEN)
NAN_BOXED(13830957180644420549,64,FLEN)
NAN_BOXED(4606852822577333056,64,FLEN)
NAN_BOXED(4606140540397925710,64,FLEN)
NAN_BOXED(13830957180644420549,64,FLEN)
NAN_BOXED(4606852822577333056,64,FLEN)
NAN_BOXED(4606200544652413341,64,FLEN)
NAN_BOXED(13830848292562724327,64,FLEN)
NAN_BOXED(4606724156187571023,64,FLEN)
NAN_BOXED(4606200544652413341,64,FLEN)
NAN_BOXED(13830848292562724327,64,FLEN)
NAN_BOXED(4606724156187571023,64,FLEN)
NAN_BOXED(4606200544652413341,64,FLEN)
NAN_BOXED(13830848292562724327,64,FLEN)
NAN_BOXED(4606724156187571023,64,FLEN)
NAN_BOXED(4606200544652413341,64,FLEN)
NAN_BOXED(13830848292562724327,64,FLEN)
NAN_BOXED(4606724156187571023,64,FLEN)
NAN_BOXED(4606200544652413341,64,FLEN)
NAN_BOXED(13830848292562724327,64,FLEN)
NAN_BOXED(4606724156187571023,64,FLEN)
NAN_BOXED(4606222941241303188,64,FLEN)
NAN_BOXED(13826376647667584508,64,FLEN)
NAN_BOXED(4602301516022816592,64,FLEN)
NAN_BOXED(4606222941241303188,64,FLEN)
NAN_BOXED(13826376647667584508,64,FLEN)
NAN_BOXED(4602301516022816592,64,FLEN)
NAN_BOXED(4606222941241303188,64,FLEN)
NAN_BOXED(13826376647667584508,64,FLEN)
NAN_BOXED(4602301516022816592,64,FLEN)
NAN_BOXED(4606222941241303188,64,FLEN)
NAN_BOXED(13826376647667584508,64,FLEN)
NAN_BOXED(4602301516022816592,64,FLEN)
NAN_BOXED(4606222941241303188,64,FLEN)
NAN_BOXED(13826376647667584508,64,FLEN)
NAN_BOXED(4602301516022816592,64,FLEN)
NAN_BOXED(4606225592085655441,64,FLEN)
NAN_BOXED(13829677026906773121,64,FLEN)
NAN_BOXED(4605441371808138860,64,FLEN)
NAN_BOXED(4606225592085655441,64,FLEN)
NAN_BOXED(13829677026906773121,64,FLEN)
NAN_BOXED(4605441371808138860,64,FLEN)
NAN_BOXED(4606225592085655441,64,FLEN)
NAN_BOXED(13829677026906773121,64,FLEN)
NAN_BOXED(4605441371808138860,64,FLEN)
NAN_BOXED(4606225592085655441,64,FLEN)
NAN_BOXED(13829677026906773121,64,FLEN)
NAN_BOXED(4605441371808138860,64,FLEN)
NAN_BOXED(4606225592085655441,64,FLEN)
NAN_BOXED(13829677026906773121,64,FLEN)
NAN_BOXED(4605441371808138860,64,FLEN)
NAN_BOXED(4606277325934071645,64,FLEN)
NAN_BOXED(13818742683073276056,64,FLEN)
NAN_BOXED(4594747372288529592,64,FLEN)
NAN_BOXED(4606277325934071645,64,FLEN)
NAN_BOXED(13818742683073276056,64,FLEN)
NAN_BOXED(4594747372288529592,64,FLEN)
NAN_BOXED(4606277325934071645,64,FLEN)
NAN_BOXED(13818742683073276056,64,FLEN)
NAN_BOXED(4594747372288529592,64,FLEN)
NAN_BOXED(4606277325934071645,64,FLEN)
NAN_BOXED(13818742683073276056,64,FLEN)
NAN_BOXED(4594747372288529592,64,FLEN)
NAN_BOXED(4606277325934071645,64,FLEN)
NAN_BOXED(13818742683073276056,64,FLEN)
NAN_BOXED(4594747372288529592,64,FLEN)
NAN_BOXED(4606303167622114746,64,FLEN)
NAN_BOXED(13823228608325273688,64,FLEN)
NAN_BOXED(4599252818207792496,64,FLEN)
NAN_BOXED(4606303167622114746,64,FLEN)
NAN_BOXED(13823228608325273688,64,FLEN)
NAN_BOXED(4599252818207792496,64,FLEN)
NAN_BOXED(4606303167622114746,64,FLEN)
NAN_BOXED(13823228608325273688,64,FLEN)
NAN_BOXED(4599252818207792496,64,FLEN)
NAN_BOXED(4606303167622114746,64,FLEN)
NAN_BOXED(13823228608325273688,64,FLEN)
NAN_BOXED(4599252818207792496,64,FLEN)
NAN_BOXED(4606303167622114746,64,FLEN)
NAN_BOXED(13823228608325273688,64,FLEN)
NAN_BOXED(4599252818207792496,64,FLEN)
NAN_BOXED(4606319145572586830,64,FLEN)
NAN_BOXED(13826418888257358002,64,FLEN)
NAN_BOXED(4602481064087202906,64,FLEN)
NAN_BOXED(4606319145572586830,64,FLEN)
NAN_BOXED(13826418888257358002,64,FLEN)
NAN_BOXED(4602481064087202906,64,FLEN)
NAN_BOXED(4606319145572586830,64,FLEN)
NAN_BOXED(13826418888257358002,64,FLEN)
NAN_BOXED(4602481064087202906,64,FLEN)
NAN_BOXED(4606319145572586830,64,FLEN)
NAN_BOXED(13826418888257358002,64,FLEN)
NAN_BOXED(4602481064087202906,64,FLEN)
NAN_BOXED(4606319145572586830,64,FLEN)
NAN_BOXED(13826418888257358002,64,FLEN)
NAN_BOXED(4602481064087202906,64,FLEN)
NAN_BOXED(4606325728581854829,64,FLEN)
NAN_BOXED(13830603507884971484,64,FLEN)
NAN_BOXED(4606414502158196412,64,FLEN)
NAN_BOXED(4606325728581854829,64,FLEN)
NAN_BOXED(13830603507884971484,64,FLEN)
NAN_BOXED(4606414502158196412,64,FLEN)
NAN_BOXED(4606325728581854829,64,FLEN)
NAN_BOXED(13830603507884971484,64,FLEN)
NAN_BOXED(4606414502158196412,64,FLEN)
NAN_BOXED(4606325728581854829,64,FLEN)
NAN_BOXED(13830603507884971484,64,FLEN)
NAN_BOXED(4606414502158196412,64,FLEN)
NAN_BOXED(4606325728581854829,64,FLEN)
NAN_BOXED(13830603507884971484,64,FLEN)
NAN_BOXED(4606414502158196412,64,FLEN)
NAN_BOXED(4606341725728136125,64,FLEN)
NAN_BOXED(13808653375272247495,64,FLEN)
NAN_BOXED(4584803411443117488,64,FLEN)
NAN_BOXED(4606341725728136125,64,FLEN)
NAN_BOXED(13808653375272247495,64,FLEN)
NAN_BOXED(4584803411443117488,64,FLEN)
NAN_BOXED(4606341725728136125,64,FLEN)
NAN_BOXED(13808653375272247495,64,FLEN)
NAN_BOXED(4584803411443117488,64,FLEN)
NAN_BOXED(4606341725728136125,64,FLEN)
NAN_BOXED(13808653375272247495,64,FLEN)
NAN_BOXED(4584803411443117488,64,FLEN)
NAN_BOXED(4606341725728136125,64,FLEN)
NAN_BOXED(13808653375272247495,64,FLEN)
NAN_BOXED(4584803411443117488,64,FLEN)
NAN_BOXED(4606347476679434447,64,FLEN)
NAN_BOXED(13824844911648713554,64,FLEN)
NAN_BOXED(4600749720336577018,64,FLEN)
NAN_BOXED(4606347476679434447,64,FLEN)
NAN_BOXED(13824844911648713554,64,FLEN)
NAN_BOXED(4600749720336577018,64,FLEN)
NAN_BOXED(4606347476679434447,64,FLEN)
NAN_BOXED(13824844911648713554,64,FLEN)
NAN_BOXED(4600749720336577018,64,FLEN)
NAN_BOXED(4606347476679434447,64,FLEN)
NAN_BOXED(13824844911648713554,64,FLEN)
NAN_BOXED(4600749720336577018,64,FLEN)
NAN_BOXED(4606347476679434447,64,FLEN)
NAN_BOXED(13824844911648713554,64,FLEN)
NAN_BOXED(4600749720336577018,64,FLEN)
NAN_BOXED(4606375683383312917,64,FLEN)
NAN_BOXED(13829123713148774473,64,FLEN)
NAN_BOXED(4605073086221828694,64,FLEN)
NAN_BOXED(4606375683383312917,64,FLEN)
NAN_BOXED(13829123713148774473,64,FLEN)
NAN_BOXED(4605073086221828694,64,FLEN)
NAN_BOXED(4606375683383312917,64,FLEN)
NAN_BOXED(13829123713148774473,64,FLEN)
NAN_BOXED(4605073086221828694,64,FLEN)
NAN_BOXED(4606375683383312917,64,FLEN)
NAN_BOXED(13829123713148774473,64,FLEN)
NAN_BOXED(4605073086221828694,64,FLEN)
NAN_BOXED(4606375683383312917,64,FLEN)
NAN_BOXED(13829123713148774473,64,FLEN)
NAN_BOXED(4605073086221828694,64,FLEN)
NAN_BOXED(4606385355645429013,64,FLEN)
NAN_BOXED(13820718611410063454,64,FLEN)
NAN_BOXED(4596622839676345720,64,FLEN)
NAN_BOXED(4606385355645429013,64,FLEN)
NAN_BOXED(13820718611410063454,64,FLEN)
NAN_BOXED(4596622839676345720,64,FLEN)
NAN_BOXED(4606385355645429013,64,FLEN)
NAN_BOXED(13820718611410063454,64,FLEN)
NAN_BOXED(4596622839676345720,64,FLEN)
NAN_BOXED(4606385355645429013,64,FLEN)
NAN_BOXED(13820718611410063454,64,FLEN)
NAN_BOXED(4596622839676345720,64,FLEN)
NAN_BOXED(4606385355645429013,64,FLEN)
NAN_BOXED(13820718611410063454,64,FLEN)
NAN_BOXED(4596622839676345720,64,FLEN)
NAN_BOXED(4606415138117115757,64,FLEN)
NAN_BOXED(13828956897678185269,64,FLEN)
NAN_BOXED(4604953668544971776,64,FLEN)
NAN_BOXED(4606415138117115757,64,FLEN)
NAN_BOXED(13828956897678185269,64,FLEN)
NAN_BOXED(4604953668544971776,64,FLEN)
NAN_BOXED(4606415138117115757,64,FLEN)
NAN_BOXED(13828956897678185269,64,FLEN)
NAN_BOXED(4604953668544971776,64,FLEN)
NAN_BOXED(4606415138117115757,64,FLEN)
NAN_BOXED(13828956897678185269,64,FLEN)
NAN_BOXED(4604953668544971776,64,FLEN)
NAN_BOXED(4606415138117115757,64,FLEN)
NAN_BOXED(13828956897678185269,64,FLEN)
NAN_BOXED(4604953668544971776,64,FLEN)
NAN_BOXED(4606440718519676618,64,FLEN)
NAN_BOXED(13827967566272009704,64,FLEN)
NAN_BOXED(4604066847248978417,64,FLEN)
NAN_BOXED(4606440718519676618,64,FLEN)
NAN_BOXED(13827967566272009704,64,FLEN)
NAN_BOXED(4604066847248978417,64,FLEN)
NAN_BOXED(4606440718519676618,64,FLEN)
NAN_BOXED(13827967566272009704,64,FLEN)
NAN_BOXED(4604066847248978417,64,FLEN)
NAN_BOXED(4606440718519676618,64,FLEN)
NAN_BOXED(13827967566272009704,64,FLEN)
NAN_BOXED(4604066847248978417,64,FLEN)
NAN_BOXED(4606440718519676618,64,FLEN)
NAN_BOXED(13827967566272009704,64,FLEN)
NAN_BOXED(4604066847248978417,64,FLEN)
NAN_BOXED(4606539117134904232,64,FLEN)
NAN_BOXED(13815546521050546099,64,FLEN)
NAN_BOXED(4591638109209607104,64,FLEN)
NAN_BOXED(4606539117134904232,64,FLEN)
NAN_BOXED(13815546521050546099,64,FLEN)
NAN_BOXED(4591638109209607104,64,FLEN)
NAN_BOXED(4606539117134904232,64,FLEN)
NAN_BOXED(13815546521050546099,64,FLEN)
NAN_BOXED(4591638109209607104,64,FLEN)
NAN_BOXED(4606539117134904232,64,FLEN)
NAN_BOXED(13815546521050546099,64,FLEN)
NAN_BOXED(4591638109209607104,64,FLEN)
NAN_BOXED(4606539117134904232,64,FLEN)
NAN_BOXED(13815546521050546099,64,FLEN)
NAN_BOXED(4591638109209607104,64,FLEN)
NAN_BOXED(4606564278147861733,64,FLEN)
NAN_BOXED(13822205416224322753,64,FLEN)
NAN_BOXED(4598479141246966426,64,FLEN)
NAN_BOXED(4606564278147861733,64,FLEN)
NAN_BOXED(13822205416224322753,64,FLEN)
NAN_BOXED(4598479141246966426,64,FLEN)
NAN_BOXED(4606564278147861733,64,FLEN)
NAN_BOXED(13822205416224322753,64,FLEN)
NAN_BOXED(4598479141246966426,64,FLEN)
NAN_BOXED(4606564278147861733,64,FLEN)
NAN_BOXED(13822205416224322753,64,FLEN)
NAN_BOXED(4598479141246966426,64,FLEN)
NAN_BOXED(4606564278147861733,64,FLEN)
NAN_BOXED(13822205416224322753,64,FLEN)
NAN_BOXED(4598479141246966426,64,FLEN)
NAN_BOXED(4606603630767493664,64,FLEN)
NAN_BOXED(13826473174515060891,64,FLEN)
NAN_BOXED(4602784606142159927,64,FLEN)
NAN_BOXED(4606603630767493664,64,FLEN)
NAN_BOXED(13826473174515060891,64,FLEN)
NAN_BOXED(4602784606142159927,64,FLEN)
NAN_BOXED(4606603630767493664,64,FLEN)
NAN_BOXED(13826473174515060891,64,FLEN)
NAN_BOXED(4602784606142159927,64,FLEN)
NAN_BOXED(4606603630767493664,64,FLEN)
NAN_BOXED(13826473174515060891,64,FLEN)
NAN_BOXED(4602784606142159927,64,FLEN)
NAN_BOXED(4606603630767493664,64,FLEN)
NAN_BOXED(13826473174515060891,64,FLEN)
NAN_BOXED(4602784606142159927,64,FLEN)
NAN_BOXED(4606614166482213793,64,FLEN)
NAN_BOXED(13824346851386094808,64,FLEN)
NAN_BOXED(4600514065618247220,64,FLEN)
NAN_BOXED(4606614166482213793,64,FLEN)
NAN_BOXED(13824346851386094808,64,FLEN)
NAN_BOXED(4600514065618247220,64,FLEN)
NAN_BOXED(4606614166482213793,64,FLEN)
NAN_BOXED(13824346851386094808,64,FLEN)
NAN_BOXED(4600514065618247220,64,FLEN)
NAN_BOXED(4606614166482213793,64,FLEN)
NAN_BOXED(13824346851386094808,64,FLEN)
NAN_BOXED(4600514065618247220,64,FLEN)
NAN_BOXED(4606614166482213793,64,FLEN)
NAN_BOXED(13824346851386094808,64,FLEN)
NAN_BOXED(4600514065618247220,64,FLEN)
NAN_BOXED(4606890123595458899,64,FLEN)
NAN_BOXED(13828691061970801297,64,FLEN)
NAN_BOXED(4605087199433971300,64,FLEN)
NAN_BOXED(4606890123595458899,64,FLEN)
NAN_BOXED(13828691061970801297,64,FLEN)
NAN_BOXED(4605087199433971300,64,FLEN)
NAN_BOXED(4606890123595458899,64,FLEN)
NAN_BOXED(13828691061970801297,64,FLEN)
NAN_BOXED(4605087199433971300,64,FLEN)
NAN_BOXED(4606890123595458899,64,FLEN)
NAN_BOXED(13828691061970801297,64,FLEN)
NAN_BOXED(4605087199433971300,64,FLEN)
NAN_BOXED(4606890123595458899,64,FLEN)
NAN_BOXED(13828691061970801297,64,FLEN)
NAN_BOXED(4605087199433971300,64,FLEN)
NAN_BOXED(4607002353121493668,64,FLEN)
NAN_BOXED(13828286351288443712,64,FLEN)
NAN_BOXED(4604779591124080258,64,FLEN)
NAN_BOXED(4607002353121493668,64,FLEN)
NAN_BOXED(13828286351288443712,64,FLEN)
NAN_BOXED(4604779591124080258,64,FLEN)
NAN_BOXED(4607002353121493668,64,FLEN)
NAN_BOXED(13828286351288443712,64,FLEN)
NAN_BOXED(4604779591124080258,64,FLEN)
NAN_BOXED(4607002353121493668,64,FLEN)
NAN_BOXED(13828286351288443712,64,FLEN)
NAN_BOXED(4604779591124080258,64,FLEN)
NAN_BOXED(4607002353121493668,64,FLEN)
NAN_BOXED(13828286351288443712,64,FLEN)
NAN_BOXED(4604779591124080258,64,FLEN)
NAN_BOXED(4607029817141459835,64,FLEN)
NAN_BOXED(13829423367154282389,64,FLEN)
NAN_BOXED(4605917891754395455,64,FLEN)
NAN_BOXED(4607029817141459835,64,FLEN)
NAN_BOXED(13829423367154282389,64,FLEN)
NAN_BOXED(4605917891754395455,64,FLEN)
NAN_BOXED(4607029817141459835,64,FLEN)
NAN_BOXED(13829423367154282389,64,FLEN)
NAN_BOXED(4605917891754395455,64,FLEN)
NAN_BOXED(4607029817141459835,64,FLEN)
NAN_BOXED(13829423367154282389,64,FLEN)
NAN_BOXED(4605917891754395455,64,FLEN)
NAN_BOXED(4607029817141459835,64,FLEN)
NAN_BOXED(13829423367154282389,64,FLEN)
NAN_BOXED(4605917891754395455,64,FLEN)
NAN_BOXED(4607075087413228101,64,FLEN)
NAN_BOXED(13827534245171572018,64,FLEN)
NAN_BOXED(4604090866294779655,64,FLEN)
NAN_BOXED(4607075087413228101,64,FLEN)
NAN_BOXED(13827534245171572018,64,FLEN)
NAN_BOXED(4604090866294779655,64,FLEN)
NAN_BOXED(4607075087413228101,64,FLEN)
NAN_BOXED(13827534245171572018,64,FLEN)
NAN_BOXED(4604090866294779655,64,FLEN)
NAN_BOXED(4607075087413228101,64,FLEN)
NAN_BOXED(13827534245171572018,64,FLEN)
NAN_BOXED(4604090866294779655,64,FLEN)
NAN_BOXED(4607075087413228101,64,FLEN)
NAN_BOXED(13827534245171572018,64,FLEN)
NAN_BOXED(4604090866294779655,64,FLEN)
NAN_BOXED(4607082936415731412,64,FLEN)
NAN_BOXED(13819368941569111380,64,FLEN)
NAN_BOXED(4595921481301876304,64,FLEN)
NAN_BOXED(4607082936415731412,64,FLEN)
NAN_BOXED(13819368941569111380,64,FLEN)
NAN_BOXED(4595921481301876304,64,FLEN)
NAN_BOXED(4607082936415731412,64,FLEN)
NAN_BOXED(13819368941569111380,64,FLEN)
NAN_BOXED(4595921481301876304,64,FLEN)
NAN_BOXED(4607082936415731412,64,FLEN)
NAN_BOXED(13819368941569111380,64,FLEN)
NAN_BOXED(4595921481301876304,64,FLEN)
NAN_BOXED(4607082936415731412,64,FLEN)
NAN_BOXED(13819368941569111380,64,FLEN)
NAN_BOXED(4595921481301876304,64,FLEN)
NAN_BOXED(4607122203607531031,64,FLEN)
NAN_BOXED(13824059087785478719,64,FLEN)
NAN_BOXED(4600640151165652402,64,FLEN)
NAN_BOXED(4607122203607531031,64,FLEN)
NAN_BOXED(13824059087785478719,64,FLEN)
NAN_BOXED(4600640151165652402,64,FLEN)
NAN_BOXED(4607122203607531031,64,FLEN)
NAN_BOXED(13824059087785478719,64,FLEN)
NAN_BOXED(4600640151165652402,64,FLEN)
NAN_BOXED(4607122203607531031,64,FLEN)
NAN_BOXED(13824059087785478719,64,FLEN)
NAN_BOXED(4600640151165652402,64,FLEN)
NAN_BOXED(4607122203607531031,64,FLEN)
NAN_BOXED(13824059087785478719,64,FLEN)
NAN_BOXED(4600640151165652402,64,FLEN)
NAN_BOXED(4607178313558236872,64,FLEN)
NAN_BOXED(13804681802427194811,64,FLEN)
NAN_BOXED(4581307189293177024,64,FLEN)
NAN_BOXED(4607178313558236872,64,FLEN)
NAN_BOXED(13804681802427194811,64,FLEN)
NAN_BOXED(4581307189293177024,64,FLEN)
NAN_BOXED(4607178313558236872,64,FLEN)
NAN_BOXED(13804681802427194811,64,FLEN)
NAN_BOXED(4581307189293177024,64,FLEN)
NAN_BOXED(4607178313558236872,64,FLEN)
NAN_BOXED(13804681802427194811,64,FLEN)
NAN_BOXED(4581307189293177024,64,FLEN)
NAN_BOXED(4607178313558236872,64,FLEN)
NAN_BOXED(13804681802427194811,64,FLEN)
NAN_BOXED(4581307189293177024,64,FLEN)
NAN_BOXED(4561177030790653952,64,FLEN)
NAN_BOXED(13874563200452091879,64,FLEN)
NAN_BOXED(4605296332606123064,64,FLEN)
NAN_BOXED(4561177030790653952,64,FLEN)
NAN_BOXED(13874563200452091879,64,FLEN)
NAN_BOXED(4605296332606123064,64,FLEN)
NAN_BOXED(4561177030790653952,64,FLEN)
NAN_BOXED(13874563200452091879,64,FLEN)
NAN_BOXED(4605296332606123064,64,FLEN)
NAN_BOXED(4561177030790653952,64,FLEN)
NAN_BOXED(13874563200452091879,64,FLEN)
NAN_BOXED(4605296332606123064,64,FLEN)
NAN_BOXED(4561177030790653952,64,FLEN)
NAN_BOXED(13874563200452091879,64,FLEN)
NAN_BOXED(4605296332606123064,64,FLEN)
NAN_BOXED(4561647896919603200,64,FLEN)
NAN_BOXED(13875665514212548977,64,FLEN)
NAN_BOXED(4606825708747777647,64,FLEN)
NAN_BOXED(4561647896919603200,64,FLEN)
NAN_BOXED(13875665514212548977,64,FLEN)
NAN_BOXED(4606825708747777647,64,FLEN)
NAN_BOXED(4561647896919603200,64,FLEN)
NAN_BOXED(13875665514212548977,64,FLEN)
NAN_BOXED(4606825708747777647,64,FLEN)
NAN_BOXED(4561647896919603200,64,FLEN)
NAN_BOXED(13875665514212548977,64,FLEN)
NAN_BOXED(4606825708747777647,64,FLEN)
NAN_BOXED(4563127790089824256,64,FLEN)
NAN_BOXED(13871937904562937655,64,FLEN)
NAN_BOXED(4604696689560562624,64,FLEN)
NAN_BOXED(4563127790089824256,64,FLEN)
NAN_BOXED(13871937904562937655,64,FLEN)
NAN_BOXED(4604696689560562624,64,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_2:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_3:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_4:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_5:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_6:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_7:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_8:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_9:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_10:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_11:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_12:
    .fill 146*((SIGALIGN)/4),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*XLEN/32,4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

RVMODEL_DATA_END
