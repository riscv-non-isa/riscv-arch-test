
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 15:28:39 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32D/fnmadd.d.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fnmadd.d instruction of the RISC-V RV32FD_Zicsr,RV64FD_Zicsr extension for the fnmadd.d_b16 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IFD_Zicsr,RV64IFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*D.*);def TEST_CASE_1=True;",fnmadd.d_b16)

RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_0:
// rs1 == rs2 != rs3 and rs1 == rs2 != rd and rd != rs3, rs1==f29, rs2==f29, rs3==f9, rd==f20,fs1 == 0 and fe1 == 0x5f2 and fm1 == 0x8e1a79f69deff and fs2 == 0 and fe2 == 0x5f9 and fm2 == 0xf112c2c43eca3 and fs3 == 1 and fe3 == 0x7ee and fm3 == 0x6308e242db948 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f29; op2:f29; op3:f9; dest:f20; op1val:0x5f28e1a79f69deff; op2val:0x5f28e1a79f69deff;
op3val:0xfee6308e242db948; valaddr_reg:x3; val_offset:0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f20, f29, f29, f9, dyn, 0, 0, x3, 0*FLEN/8, x4, x1, x2)

inst_1:
// rs1 == rs3 != rs2 and rs1 == rs3 != rd and rd != rs2, rs1==f19, rs2==f1, rs3==f19, rd==f28,fs1 == 0 and fe1 == 0x5f5 and fm1 == 0x0197267f1985f and fs2 == 0 and fe2 == 0x5f9 and fm2 == 0xce41f387adc6f and fs3 == 1 and fe3 == 0x7f0 and fm3 == 0x4812b6bf8d6c3 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f19; op2:f1; op3:f19; dest:f28; op1val:0x5f50197267f1985f; op2val:0x5f9ce41f387adc6f;
op3val:0x5f50197267f1985f; valaddr_reg:x3; val_offset:3*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f28, f19, f1, f19, dyn, 0, 0, x3, 3*FLEN/8, x4, x1, x2)

inst_2:
// rs1 == rs2 == rs3 == rd, rs1==f3, rs2==f3, rs3==f3, rd==f3,fs1 == 0 and fe1 == 0x5f5 and fm1 == 0x3832e6fea9a3f and fs2 == 0 and fe2 == 0x5fa and fm2 == 0x5ee10a5a625fc and fs3 == 1 and fe3 == 0x7f0 and fm3 == 0xd731b74a534ea and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f3; op2:f3; op3:f3; dest:f3; op1val:0x5f53832e6fea9a3f; op2val:0x5f53832e6fea9a3f;
op3val:0x5f53832e6fea9a3f; valaddr_reg:x3; val_offset:6*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f3, f3, f3, f3, dyn, 0, 0, x3, 6*FLEN/8, x4, x1, x2)

inst_3:
// rs1 == rd == rs3 != rs2, rs1==f15, rs2==f2, rs3==f15, rd==f15,fs1 == 0 and fe1 == 0x5f5 and fm1 == 0x5a7002fc1a6bf and fs2 == 0 and fe2 == 0x5f9 and fm2 == 0x05d39d105b541 and fs3 == 1 and fe3 == 0x7f0 and fm3 == 0x4141940cdbe5f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f15; op2:f2; op3:f15; dest:f15; op1val:0x5f55a7002fc1a6bf; op2val:0x5f905d39d105b541;
op3val:0x5f55a7002fc1a6bf; valaddr_reg:x3; val_offset:9*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f15, f15, f2, f15, dyn, 0, 0, x3, 9*FLEN/8, x4, x1, x2)

inst_4:
// rs1 == rs2 == rs3 != rd, rs1==f28, rs2==f28, rs3==f28, rd==f6,fs1 == 0 and fe1 == 0x5f5 and fm1 == 0xc1a812e98063f and fs2 == 0 and fe2 == 0x5f9 and fm2 == 0xdc0d22f746bf5 and fs3 == 1 and fe3 == 0x7f1 and fm3 == 0x139d86656d299 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f28; op2:f28; op3:f28; dest:f6; op1val:0x5f5c1a812e98063f; op2val:0x5f5c1a812e98063f;
op3val:0x5f5c1a812e98063f; valaddr_reg:x3; val_offset:12*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f6, f28, f28, f28, dyn, 0, 0, x3, 12*FLEN/8, x4, x1, x2)

inst_5:
// rs2 == rd != rs1 and rs2 == rd != rs3 and rs3 != rs1, rs1==f31, rs2==f18, rs3==f20, rd==f18,fs1 == 0 and fe1 == 0x5f5 and fm1 == 0xf59904d0ce0bf and fs2 == 0 and fe2 == 0x5fa and fm2 == 0x1a7baab01ceb9 and fs3 == 1 and fe3 == 0x7f1 and fm3 == 0x4ca65e448b1e4 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f31; op2:f18; op3:f20; dest:f18; op1val:0x5f5f59904d0ce0bf; op2val:0x5fa1a7baab01ceb9;
op3val:0xff14ca65e448b1e4; valaddr_reg:x3; val_offset:15*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f18, f31, f18, f20, dyn, 0, 0, x3, 15*FLEN/8, x4, x1, x2)

inst_6:
// rs1 == rs2 == rd != rs3, rs1==f11, rs2==f11, rs3==f0, rd==f11,fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x22cfa989fca0f and fs2 == 0 and fe2 == 0x5f9 and fm2 == 0xa2892d94829ad and fs3 == 1 and fe3 == 0x7f1 and fm3 == 0x08274724f19ab and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f11; op2:f11; op3:f0; dest:f11; op1val:0x5f622cfa989fca0f; op2val:0x5f622cfa989fca0f;
op3val:0xff108274724f19ab; valaddr_reg:x3; val_offset:18*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f11, f11, f11, f0, dyn, 0, 0, x3, 18*FLEN/8, x4, x1, x2)

inst_7:
// rs2 == rs3 != rs1 and rs2 == rs3 != rd and rd != rs1, rs1==f16, rs2==f22, rs3==f22, rd==f24,fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x38aee2c19215f and fs2 == 0 and fe2 == 0x5f8 and fm2 == 0x912bfdff44ba7 and fs3 == 1 and fe3 == 0x7f0 and fm3 == 0x0f8b22ffa1987 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f16; op2:f22; op3:f22; dest:f24; op1val:0x5f638aee2c19215f; op2val:0x5f8912bfdff44ba7;
op3val:0x5f8912bfdff44ba7; valaddr_reg:x3; val_offset:21*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f24, f16, f22, f22, dyn, 0, 0, x3, 21*FLEN/8, x4, x1, x2)

inst_8:
// rs3 == rd != rs1 and rs3 == rd != rs2 and rs2 != rs1, rs1==f25, rs2==f6, rs3==f1, rd==f1,fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x7a1eff83f19af and fs2 == 0 and fe2 == 0x5f7 and fm2 == 0xbb68e4e714e57 and fs3 == 1 and fe3 == 0x7f0 and fm3 == 0x46b0821802661 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f25; op2:f6; op3:f1; dest:f1; op1val:0x5f67a1eff83f19af; op2val:0x5f7bb68e4e714e57;
op3val:0xff046b0821802661; valaddr_reg:x3; val_offset:24*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f1, f25, f6, f1, dyn, 0, 0, x3, 24*FLEN/8, x4, x1, x2)

inst_9:
// rs1 == rd != rs2 and rs1 == rd != rs3 and rs3 != rs2, rs1==f30, rs2==f5, rs3==f8, rd==f30,fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xb3756a76d237f and fs2 == 0 and fe2 == 0x5f8 and fm2 == 0xb8c3b0a05a317 and fs3 == 1 and fe3 == 0x7f1 and fm3 == 0x027fcc8b591c8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f5; op3:f8; dest:f30; op1val:0x5f6b3756a76d237f; op2val:0x5f8b8c3b0a05a317;
op3val:0xff1027fcc8b591c8; valaddr_reg:x3; val_offset:27*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f30, f30, f5, f8, dyn, 0, 0, x3, 27*FLEN/8, x4, x1, x2)

inst_10:
// rs1 != rs2 and rs1 != rd and rs1 != rs3 and rs2 != rs3 and rs2 != rd and rs3 != rd, rs1==f2, rs2==f4, rs3==f10, rd==f21,fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xe15a564c336ef and fs2 == 0 and fe2 == 0x5fa and fm2 == 0x4e4a35c32157e and fs3 == 1 and fe3 == 0x7f2 and fm3 == 0x901c20ed9614b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f2; op2:f4; op3:f10; dest:f21; op1val:0x5f6e15a564c336ef; op2val:0x5fa4e4a35c32157e;
op3val:0xff2901c20ed9614b; valaddr_reg:x3; val_offset:30*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f21, f2, f4, f10, dyn, 0, 0, x3, 30*FLEN/8, x4, x1, x2)

inst_11:
// rd == rs2 == rs3 != rs1, rs1==f18, rs2==f7, rs3==f7, rd==f7,fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xf959d372fdf5f and fs2 == 0 and fe2 == 0x5f8 and fm2 == 0x26ffb22d6ee1f and fs3 == 1 and fe3 == 0x7f1 and fm3 == 0x0d733a9338e84 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f18; op2:f7; op3:f7; dest:f7; op1val:0x5f6f959d372fdf5f; op2val:0x5f826ffb22d6ee1f;
op3val:0x5f826ffb22d6ee1f; valaddr_reg:x3; val_offset:33*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f7, f18, f7, f7, dyn, 0, 0, x3, 33*FLEN/8, x4, x1, x2)

inst_12:
// rs1==f1, rs2==f16, rs3==f5, rd==f14,fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x11c62f98de3bf and fs2 == 0 and fe2 == 0x5f7 and fm2 == 0x60de25d29e92f and fs3 == 1 and fe3 == 0x7f0 and fm3 == 0x65a66d3982040 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f1; op2:f16; op3:f5; dest:f14; op1val:0x5f711c62f98de3bf; op2val:0x5f760de25d29e92f;
op3val:0xff065a66d3982040; valaddr_reg:x3; val_offset:36*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f14, f1, f16, f5, dyn, 0, 0, x3, 36*FLEN/8, x4, x1, x2)

inst_13:
// rs1==f27, rs2==f20, rs3==f26, rd==f29,fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x2e3db402ba61f and fs2 == 0 and fe2 == 0x5f9 and fm2 == 0x232f190317157 and fs3 == 1 and fe3 == 0x7f1 and fm3 == 0xd7fa045f8793f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f27; op2:f20; op3:f26; dest:f29; op1val:0x5f72e3db402ba61f; op2val:0x5f9232f190317157;
op3val:0xff1d7fa045f8793f; valaddr_reg:x3; val_offset:39*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f29, f27, f20, f26, dyn, 0, 0, x3, 39*FLEN/8, x4, x1, x2)

inst_14:
// rs1==f9, rs2==f19, rs3==f12, rd==f27,fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x34bccd918d207 and fs2 == 0 and fe2 == 0x5fa and fm2 == 0xa40b77d5da767 and fs3 == 1 and fe3 == 0x7f3 and fm3 == 0xb529a561abaf3 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f9; op2:f19; op3:f12; dest:f27; op1val:0x5f734bccd918d207; op2val:0x5faa40b77d5da767;
op3val:0xff3b529a561abaf3; valaddr_reg:x3; val_offset:42*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f27, f9, f19, f12, dyn, 0, 0, x3, 42*FLEN/8, x4, x1, x2)

inst_15:
// rs1==f13, rs2==f25, rs3==f24, rd==f5,fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x5ba2bcb8dc85f and fs2 == 0 and fe2 == 0x5fa and fm2 == 0xabc6824ad2440 and fs3 == 1 and fe3 == 0x7f3 and fm3 == 0xf8360dcc13f8b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f13; op2:f25; op3:f24; dest:f5; op1val:0x5f75ba2bcb8dc85f; op2val:0x5faabc6824ad2440;
op3val:0xff3f8360dcc13f8b; valaddr_reg:x3; val_offset:45*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f5, f13, f25, f24, dyn, 0, 0, x3, 45*FLEN/8, x4, x1, x2)

inst_16:
// rs1==f8, rs2==f15, rs3==f30, rd==f16,fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x802693539b05f and fs2 == 0 and fe2 == 0x5fa and fm2 == 0x9af59f9eb5168 and fs3 == 1 and fe3 == 0x7f3 and fm3 == 0xa53ffa5a270dc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f8; op2:f15; op3:f30; dest:f16; op1val:0x5f7802693539b05f; op2val:0x5fa9af59f9eb5168;
op3val:0xff3a53ffa5a270dc; valaddr_reg:x3; val_offset:48*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f16, f8, f15, f30, dyn, 0, 0, x3, 48*FLEN/8, x4, x1, x2)

inst_17:
// rs1==f17, rs2==f30, rs3==f31, rd==f12,fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x97c657c682e1f and fs2 == 0 and fe2 == 0x5f8 and fm2 == 0xe719a478092fb and fs3 == 1 and fe3 == 0x7f1 and fm3 == 0xcd7a17c66ca93 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f17; op2:f30; op3:f31; dest:f12; op1val:0x5f797c657c682e1f; op2val:0x5f8e719a478092fb;
op3val:0xff1cd7a17c66ca93; valaddr_reg:x3; val_offset:51*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f12, f17, f30, f31, dyn, 0, 0, x3, 51*FLEN/8, x4, x1, x2)

inst_18:
// rs1==f26, rs2==f0, rs3==f4, rd==f13,fs1 == 0 and fe1 == 0x5f7 and fm1 == 0xcb0a304fe19bf and fs2 == 0 and fe2 == 0x5fa and fm2 == 0x14eff5bf25de3 and fs3 == 1 and fe3 == 0x7f3 and fm3 == 0xe4273c7307d4f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f26; op2:f0; op3:f4; dest:f13; op1val:0x5f7cb0a304fe19bf; op2val:0x5fa14eff5bf25de3;
op3val:0xff3e4273c7307d4f; valaddr_reg:x3; val_offset:54*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f13, f26, f0, f4, dyn, 0, 0, x3, 54*FLEN/8, x4, x1, x2)

inst_19:
// rs1==f21, rs2==f26, rs3==f16, rd==f23,fs1 == 0 and fe1 == 0x5f7 and fm1 == 0xdd44967e4f77f and fs2 == 0 and fe2 == 0x5f7 and fm2 == 0xbb5518eec7ff7 and fs3 == 1 and fe3 == 0x7f0 and fm3 == 0xf4c7e1737c8fc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f21; op2:f26; op3:f16; dest:f23; op1val:0x5f7dd44967e4f77f; op2val:0x5f7bb5518eec7ff7;
op3val:0xff0f4c7e1737c8fc; valaddr_reg:x3; val_offset:57*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f23, f21, f26, f16, dyn, 0, 0, x3, 57*FLEN/8, x4, x1, x2)

inst_20:
// rs1==f7, rs2==f31, rs3==f29, rd==f10,fs1 == 0 and fe1 == 0x5f7 and fm1 == 0xf29a9c82218e7 and fs2 == 0 and fe2 == 0x5f7 and fm2 == 0xf2c5343ef46b7 and fs3 == 1 and fe3 == 0x7f1 and fm3 == 0x0669be5ed3685 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f7; op2:f31; op3:f29; dest:f10; op1val:0x5f7f29a9c82218e7; op2val:0x5f7f2c5343ef46b7;
op3val:0xff10669be5ed3685; valaddr_reg:x3; val_offset:60*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f10, f7, f31, f29, dyn, 0, 0, x3, 60*FLEN/8, x4, x1, x2)

inst_21:
// rs1==f6, rs2==f21, rs3==f2, rd==f4,fs1 == 0 and fe1 == 0x5f8 and fm1 == 0x0435cbf7ce303 and fs2 == 0 and fe2 == 0x5f5 and fm2 == 0xcb3c58d58b2bf and fs3 == 1 and fe3 == 0x7ef and fm3 == 0x3b439dc268d31 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f6; op2:f21; op3:f2; dest:f4; op1val:0x5f80435cbf7ce303; op2val:0x5f5cb3c58d58b2bf;
op3val:0xfef3b439dc268d31; valaddr_reg:x3; val_offset:63*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f4, f6, f21, f2, dyn, 0, 0, x3, 63*FLEN/8, x4, x1, x2)

inst_22:
// rs1==f22, rs2==f27, rs3==f18, rd==f0,fs1 == 0 and fe1 == 0x5f8 and fm1 == 0x06933c1e52e8b and fs2 == 0 and fe2 == 0x5fa and fm2 == 0xdff0d9faf6b37 and fs3 == 1 and fe3 == 0x7f4 and fm3 == 0x9d702d38e63e4 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f22; op2:f27; op3:f18; dest:f0; op1val:0x5f806933c1e52e8b; op2val:0x5fadff0d9faf6b37;
op3val:0xff49d702d38e63e4; valaddr_reg:x3; val_offset:66*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f0, f22, f27, f18, dyn, 0, 0, x3, 66*FLEN/8, x4, x1, x2)

inst_23:
// rs1==f12, rs2==f14, rs3==f11, rd==f2,fs1 == 0 and fe1 == 0x5f8 and fm1 == 0x1a5d3a022c06b and fs2 == 0 and fe2 == 0x5fa and fm2 == 0x39827e2b6fc0e and fs3 == 1 and fe3 == 0x7f3 and fm3 == 0xf00286babe74d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f12; op2:f14; op3:f11; dest:f2; op1val:0x5f81a5d3a022c06b; op2val:0x5fa39827e2b6fc0e;
op3val:0xff3f00286babe74d; valaddr_reg:x3; val_offset:69*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f2, f12, f14, f11, dyn, 0, 0, x3, 69*FLEN/8, x4, x1, x2)

inst_24:
// rs1==f14, rs2==f12, rs3==f27, rd==f22,fs1 == 0 and fe1 == 0x5f8 and fm1 == 0x1bebe7b21cd5f and fs2 == 0 and fe2 == 0x5fa and fm2 == 0x011af8e2b2a8d and fs3 == 1 and fe3 == 0x7f3 and fm3 == 0x2e5825f882ec1 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f14; op2:f12; op3:f27; dest:f22; op1val:0x5f81bebe7b21cd5f; op2val:0x5fa011af8e2b2a8d;
op3val:0xff32e5825f882ec1; valaddr_reg:x3; val_offset:72*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f22, f14, f12, f27, dyn, 0, 0, x3, 72*FLEN/8, x4, x1, x2)

inst_25:
// rs1==f4, rs2==f10, rs3==f23, rd==f19,fs1 == 0 and fe1 == 0x5f8 and fm1 == 0x1ea6995f1c073 and fs2 == 0 and fe2 == 0x5f9 and fm2 == 0xf7e9d38031687 and fs3 == 1 and fe3 == 0x7f3 and fm3 == 0x3f4c03dfcba0c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f4; op2:f10; op3:f23; dest:f19; op1val:0x5f81ea6995f1c073; op2val:0x5f9f7e9d38031687;
op3val:0xff33f4c03dfcba0c; valaddr_reg:x3; val_offset:75*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f19, f4, f10, f23, dyn, 0, 0, x3, 75*FLEN/8, x4, x1, x2)

inst_26:
// rs1==f20, rs2==f17, rs3==f13, rd==f26,fs1 == 0 and fe1 == 0x5f8 and fm1 == 0x1fe2d6aba9e77 and fs2 == 0 and fe2 == 0x5f6 and fm2 == 0xd126610309c1f and fs3 == 1 and fe3 == 0x7f0 and fm3 == 0x0e51db551c107 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f20; op2:f17; op3:f13; dest:f26; op1val:0x5f81fe2d6aba9e77; op2val:0x5f6d126610309c1f;
op3val:0xff00e51db551c107; valaddr_reg:x3; val_offset:78*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f26, f20, f17, f13, dyn, 0, 0, x3, 78*FLEN/8, x4, x1, x2)

inst_27:
// rs1==f5, rs2==f24, rs3==f14, rd==f25,fs1 == 0 and fe1 == 0x5f8 and fm1 == 0x2339bac8ac55f and fs2 == 0 and fe2 == 0x5f8 and fm2 == 0xa27ff454d2247 and fs3 == 1 and fe3 == 0x7f2 and fm3 == 0x29c95c6687c75 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f5; op2:f24; op3:f14; dest:f25; op1val:0x5f82339bac8ac55f; op2val:0x5f8a27ff454d2247;
op3val:0xff229c95c6687c75; valaddr_reg:x3; val_offset:81*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f25, f5, f24, f14, dyn, 0, 0, x3, 81*FLEN/8, x4, x1, x2)

inst_28:
// rs1==f24, rs2==f8, rs3==f6, rd==f31,fs1 == 0 and fe1 == 0x5f8 and fm1 == 0x287a907776fa3 and fs2 == 0 and fe2 == 0x5f9 and fm2 == 0xc3c58b5c03e1d and fs3 == 1 and fe3 == 0x7f3 and fm3 == 0x0d4a450d85abf and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f24; op2:f8; op3:f6; dest:f31; op1val:0x5f8287a907776fa3; op2val:0x5f9c3c58b5c03e1d;
op3val:0xff30d4a450d85abf; valaddr_reg:x3; val_offset:84*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f24, f8, f6, dyn, 0, 0, x3, 84*FLEN/8, x4, x1, x2)

inst_29:
// rs1==f0, rs2==f13, rs3==f21, rd==f9,fs1 == 0 and fe1 == 0x5f8 and fm1 == 0x361bbef8877ab and fs2 == 0 and fe2 == 0x5f6 and fm2 == 0x291d98044bfbf and fs3 == 1 and fe3 == 0x7ef and fm3 == 0xe3cc0b403a893 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f0; op2:f13; op3:f21; dest:f9; op1val:0x5f8361bbef8877ab; op2val:0x5f6291d98044bfbf;
op3val:0xfefe3cc0b403a893; valaddr_reg:x3; val_offset:87*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f9, f0, f13, f21, dyn, 0, 0, x3, 87*FLEN/8, x4, x1, x2)

inst_30:
// rs1==f10, rs2==f9, rs3==f25, rd==f17,fs1 == 0 and fe1 == 0x5f8 and fm1 == 0x41c73bbc1b00b and fs2 == 0 and fe2 == 0x5f8 and fm2 == 0x784c0d85e9517 and fs3 == 1 and fe3 == 0x7f2 and fm3 == 0x9006b360bbb6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f10; op2:f9; op3:f25; dest:f17; op1val:0x5f841c73bbc1b00b; op2val:0x5f8784c0d85e9517;
op3val:0xff29006b360bbb6d; valaddr_reg:x3; val_offset:90*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f17, f10, f9, f25, dyn, 0, 0, x3, 90*FLEN/8, x4, x1, x2)

inst_31:
// rs1==f23,fs1 == 0 and fe1 == 0x5f8 and fm1 == 0x4a10e22bb3b33 and fs2 == 0 and fe2 == 0x5f7 and fm2 == 0x88b104e822b8f and fs3 == 1 and fe3 == 0x7f1 and fm3 == 0x9dec6c0993cbd and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f23; op2:f13; op3:f17; dest:f31; op1val:0x5f84a10e22bb3b33; op2val:0x5f788b104e822b8f;
op3val:0xff19dec6c0993cbd; valaddr_reg:x3; val_offset:93*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f23, f13, f17, dyn, 0, 0, x3, 93*FLEN/8, x4, x1, x2)

inst_32:
// rs2==f23,fs1 == 0 and fe1 == 0x5f8 and fm1 == 0x4a1b2df4767ef and fs2 == 0 and fe2 == 0x5fa and fm2 == 0x820cd259975cf and fs3 == 1 and fe3 == 0x7f4 and fm3 == 0xaae748b7801c0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f5; op2:f23; op3:f20; dest:f16; op1val:0x5f84a1b2df4767ef; op2val:0x5fa820cd259975cf;
op3val:0xff4aae748b7801c0; valaddr_reg:x3; val_offset:96*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f16, f5, f23, f20, dyn, 0, 0, x3, 96*FLEN/8, x4, x1, x2)

inst_33:
// rd==f8,fs1 == 0 and fe1 == 0x5f8 and fm1 == 0x4cf1937fde173 and fs2 == 0 and fe2 == 0x5f9 and fm2 == 0x86d2c67f038bd and fs3 == 1 and fe3 == 0x7f3 and fm3 == 0x743c2409eb867 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f23; op2:f25; op3:f5; dest:f8; op1val:0x5f84cf1937fde173; op2val:0x5f986d2c67f038bd;
op3val:0xff3743c2409eb867; valaddr_reg:x3; val_offset:99*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f8, f23, f25, f5, dyn, 0, 0, x3, 99*FLEN/8, x4, x1, x2)

inst_34:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0x4dd13d82cf047 and fs2 == 0 and fe2 == 0x5f7 and fm2 == 0xafe78faaa8367 and fs3 == 1 and fe3 == 0x7f1 and fm3 == 0xffe3517f7bf18 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f84dd13d82cf047; op2val:0x5f7afe78faaa8367;
op3val:0xff1ffe3517f7bf18; valaddr_reg:x3; val_offset:102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 102*FLEN/8, x4, x1, x2)

inst_35:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0x54fc797f61a47 and fs2 == 0 and fe2 == 0x5f9 and fm2 == 0xc49dffef48af1 and fs3 == 1 and fe3 == 0x7f3 and fm3 == 0x85743659b13a8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f854fc797f61a47; op2val:0x5f9c49dffef48af1;
op3val:0xff385743659b13a8; valaddr_reg:x3; val_offset:105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 105*FLEN/8, x4, x1, x2)

inst_36:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0x6003243fdf57b and fs2 == 0 and fe2 == 0x5fa and fm2 == 0x5874b6418015b and fs3 == 1 and fe3 == 0x7f4 and fm3 == 0x007478669dfb8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f86003243fdf57b; op2val:0x5fa5874b6418015b;
op3val:0xff4007478669dfb8; valaddr_reg:x3; val_offset:108*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 108*FLEN/8, x4, x1, x2)

inst_37:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0x743ea0c02659b and fs2 == 0 and fe2 == 0x5f8 and fm2 == 0xda2a011aeffab and fs3 == 1 and fe3 == 0x7f2 and fm3 == 0xa3aa8637b0e8c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8743ea0c02659b; op2val:0x5f8da2a011aeffab;
op3val:0xff2a3aa8637b0e8c; valaddr_reg:x3; val_offset:111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 111*FLEN/8, x4, x1, x2)

inst_38:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0x89f3951da2feb and fs2 == 0 and fe2 == 0x5fa and fm2 == 0x24a28f97e5b1f and fs3 == 1 and fe3 == 0x7f4 and fm3 == 0x39610959296ec and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f889f3951da2feb; op2val:0x5fa24a28f97e5b1f;
op3val:0xff439610959296ec; valaddr_reg:x3; val_offset:114*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 114*FLEN/8, x4, x1, x2)

inst_39:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0x8e041c6437953 and fs2 == 0 and fe2 == 0x5fa and fm2 == 0x28d94e0280abc and fs3 == 1 and fe3 == 0x7f4 and fm3 == 0x7ba0482bd497e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f88e041c6437953; op2val:0x5fa28d94e0280abc;
op3val:0xff47ba0482bd497e; valaddr_reg:x3; val_offset:117*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 117*FLEN/8, x4, x1, x2)

inst_40:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0x98cb938bd0d9b and fs2 == 0 and fe2 == 0x5fa and fm2 == 0xd64f454066002 and fs3 == 1 and fe3 == 0x7f5 and fm3 == 0x5618eb3f6a8f3 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f898cb938bd0d9b; op2val:0x5fad64f454066002;
op3val:0xff55618eb3f6a8f3; valaddr_reg:x3; val_offset:120*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 120*FLEN/8, x4, x1, x2)

inst_41:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xa3d5b9f8ee473 and fs2 == 0 and fe2 == 0x5fa and fm2 == 0xeefde430a673b and fs3 == 1 and fe3 == 0x7f4 and fm3 == 0xb3727ee3c0285 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8a3d5b9f8ee473; op2val:0x5faeefde430a673b;
op3val:0xff4b3727ee3c0285; valaddr_reg:x3; val_offset:123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 123*FLEN/8, x4, x1, x2)

inst_42:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xaf0f94f18e857 and fs2 == 0 and fe2 == 0x5fa and fm2 == 0xc2db9cc3dd583 and fs3 == 1 and fe3 == 0x7f5 and fm3 == 0x0e0f021498c48 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8af0f94f18e857; op2val:0x5fac2db9cc3dd583;
op3val:0xff50e0f021498c48; valaddr_reg:x3; val_offset:126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 126*FLEN/8, x4, x1, x2)

inst_43:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xd01c53aeb6daf and fs2 == 0 and fe2 == 0x5fa and fm2 == 0xc04060fa9d235 and fs3 == 1 and fe3 == 0x7f4 and fm3 == 0xc180d6f7bf402 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8d01c53aeb6daf; op2val:0x5fac04060fa9d235;
op3val:0xff4c180d6f7bf402; valaddr_reg:x3; val_offset:129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129*FLEN/8, x4, x1, x2)

inst_44:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xdd01ebf317c47 and fs2 == 0 and fe2 == 0x5f9 and fm2 == 0xd484e5c7d8c61 and fs3 == 1 and fe3 == 0x7f4 and fm3 == 0x0ce829748d56f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8dd01ebf317c47; op2val:0x5f9d484e5c7d8c61;
op3val:0xff40ce829748d56f; valaddr_reg:x3; val_offset:132*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 132*FLEN/8, x4, x1, x2)

inst_45:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xe4e789d337d77 and fs2 == 0 and fe2 == 0x5fa and fm2 == 0xaac467660ea9f and fs3 == 1 and fe3 == 0x7f5 and fm3 == 0x18e38211353ef and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8e4e789d337d77; op2val:0x5faaac467660ea9f;
op3val:0xff518e38211353ef; valaddr_reg:x3; val_offset:135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 135*FLEN/8, x4, x1, x2)

inst_46:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xeea576108affb and fs2 == 0 and fe2 == 0x5f9 and fm2 == 0xed04e711db0e1 and fs3 == 1 and fe3 == 0x7f4 and fm3 == 0x733a2576cd48d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8eea576108affb; op2val:0x5f9ed04e711db0e1;
op3val:0xff4733a2576cd48d; valaddr_reg:x3; val_offset:138*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 138*FLEN/8, x4, x1, x2)

inst_47:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xf8cb3cb5140d7 and fs2 == 0 and fe2 == 0x5f8 and fm2 == 0xebb37bba609a7 and fs3 == 1 and fe3 == 0x7f3 and fm3 == 0x866521dedcf77 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8f8cb3cb5140d7; op2val:0x5f8ebb37bba609a7;
op3val:0xff3866521dedcf77; valaddr_reg:x3; val_offset:141*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 141*FLEN/8, x4, x1, x2)

inst_48:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x00ccac0a4b811 and fs2 == 0 and fe2 == 0x5fa and fm2 == 0x2eb6a94e9ae19 and fs3 == 1 and fe3 == 0x7f4 and fm3 == 0xed311f5a05e8b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f900ccac0a4b811; op2val:0x5fa2eb6a94e9ae19;
op3val:0xff4ed311f5a05e8b; valaddr_reg:x3; val_offset:144*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 144*FLEN/8, x4, x1, x2)

inst_49:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x03c79a41b870f and fs2 == 0 and fe2 == 0x5fa and fm2 == 0x21d7278b1bb7f and fs3 == 1 and fe3 == 0x7f4 and fm3 == 0xaf7fd02c04bab and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f903c79a41b870f; op2val:0x5fa21d7278b1bb7f;
op3val:0xff4af7fd02c04bab; valaddr_reg:x3; val_offset:147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 147*FLEN/8, x4, x1, x2)

inst_50:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1365a93dfa50f and fs2 == 0 and fe2 == 0x5fa and fm2 == 0x0d77af376928b and fs3 == 1 and fe3 == 0x7f4 and fm3 == 0xac528ba1d3993 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91365a93dfa50f; op2val:0x5fa0d77af376928b;
op3val:0xff4ac528ba1d3993; valaddr_reg:x3; val_offset:150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 150*FLEN/8, x4, x1, x2)

inst_51:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1c256e07d7b03 and fs2 == 0 and fe2 == 0x5fa and fm2 == 0xea5ed10729949 and fs3 == 1 and fe3 == 0x7f5 and fm3 == 0x2e9cf17e1c104 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91c256e07d7b03; op2val:0x5faea5ed10729949;
op3val:0xff52e9cf17e1c104; valaddr_reg:x3; val_offset:153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 153*FLEN/8, x4, x1, x2)

inst_52:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x237c293c04d53 and fs2 == 0 and fe2 == 0x5fa and fm2 == 0x468e8279a5120 and fs3 == 1 and fe3 == 0x7f4 and fm3 == 0xabcf67ab47356 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9237c293c04d53; op2val:0x5fa468e8279a5120;
op3val:0xff4abcf67ab47356; valaddr_reg:x3; val_offset:156*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 156*FLEN/8, x4, x1, x2)

inst_53:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x2887dc585eda5 and fs2 == 0 and fe2 == 0x5fa and fm2 == 0xf79012fbad378 and fs3 == 1 and fe3 == 0x7f5 and fm3 == 0x9033b38fd9d06 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f92887dc585eda5; op2val:0x5faf79012fbad378;
op3val:0xff59033b38fd9d06; valaddr_reg:x3; val_offset:159*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 159*FLEN/8, x4, x1, x2)

inst_54:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x2a9ac14416973 and fs2 == 0 and fe2 == 0x5fa and fm2 == 0x3eb682e8c47fa and fs3 == 1 and fe3 == 0x7f5 and fm3 == 0x368985dc4dee6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f92a9ac14416973; op2val:0x5fa3eb682e8c47fa;
op3val:0xff5368985dc4dee6; valaddr_reg:x3; val_offset:162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 162*FLEN/8, x4, x1, x2)

inst_55:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x2de4ff93f2d49 and fs2 == 0 and fe2 == 0x5f4 and fm2 == 0x54cb8485c10ff and fs3 == 1 and fe3 == 0x7ef and fm3 == 0x38f4ff02f8ed1 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f92de4ff93f2d49; op2val:0x5f454cb8485c10ff;
op3val:0xfef38f4ff02f8ed1; valaddr_reg:x3; val_offset:165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 165*FLEN/8, x4, x1, x2)

inst_56:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x2f7ee631fefc5 and fs2 == 0 and fe2 == 0x5f8 and fm2 == 0xda8557b559e8b and fs3 == 1 and fe3 == 0x7f3 and fm3 == 0xd5f14b55eb8d9 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f92f7ee631fefc5; op2val:0x5f8da8557b559e8b;
op3val:0xff3d5f14b55eb8d9; valaddr_reg:x3; val_offset:168*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 168*FLEN/8, x4, x1, x2)

inst_57:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x308800ab9a08f and fs2 == 0 and fe2 == 0x5f9 and fm2 == 0xb9343c1265853 and fs3 == 1 and fe3 == 0x7f4 and fm3 == 0x76ab2f33695e2 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9308800ab9a08f; op2val:0x5f9b9343c1265853;
op3val:0xff476ab2f33695e2; valaddr_reg:x3; val_offset:171*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 171*FLEN/8, x4, x1, x2)

inst_58:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3943b61964e33 and fs2 == 0 and fe2 == 0x5fa and fm2 == 0xae64a7b19f21e and fs3 == 1 and fe3 == 0x7f5 and fm3 == 0xb871d605df6ba and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93943b61964e33; op2val:0x5faae64a7b19f21e;
op3val:0xff5b871d605df6ba; valaddr_reg:x3; val_offset:174*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 174*FLEN/8, x4, x1, x2)

inst_59:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3bd530bfc7921 and fs2 == 0 and fe2 == 0x5fa and fm2 == 0x4c524788895e4 and fs3 == 1 and fe3 == 0x7f5 and fm3 == 0x302ba08bafbad and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93bd530bfc7921; op2val:0x5fa4c524788895e4;
op3val:0xff5302ba08bafbad; valaddr_reg:x3; val_offset:177*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 177*FLEN/8, x4, x1, x2)

inst_60:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3cfe1da6d26d5 and fs2 == 0 and fe2 == 0x5fa and fm2 == 0xea2b5073270ea and fs3 == 1 and fe3 == 0x7f6 and fm3 == 0x02e59388b7142 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93cfe1da6d26d5; op2val:0x5faea2b5073270ea;
op3val:0xff602e59388b7142; valaddr_reg:x3; val_offset:180*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 180*FLEN/8, x4, x1, x2)

inst_61:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x43e5b36b50bcd and fs2 == 0 and fe2 == 0x5f7 and fm2 == 0xa1fe3e0c64717 and fs3 == 1 and fe3 == 0x7f2 and fm3 == 0x7ed8026cc0461 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f943e5b36b50bcd; op2val:0x5f7a1fe3e0c64717;
op3val:0xff27ed8026cc0461; valaddr_reg:x3; val_offset:183*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 183*FLEN/8, x4, x1, x2)

inst_62:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x43f16419df5f9 and fs2 == 0 and fe2 == 0x5fa and fm2 == 0xda33f11fe6a09 and fs3 == 1 and fe3 == 0x7f5 and fm3 == 0x488b8623cffd3 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f943f16419df5f9; op2val:0x5fada33f11fe6a09;
op3val:0xff5488b8623cffd3; valaddr_reg:x3; val_offset:186*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 186*FLEN/8, x4, x1, x2)

inst_63:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x46086cad941b7 and fs2 == 0 and fe2 == 0x5f7 and fm2 == 0x3cf8a4ab5f917 and fs3 == 1 and fe3 == 0x7f2 and fm3 == 0x26291110ad9f3 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f946086cad941b7; op2val:0x5f73cf8a4ab5f917;
op3val:0xff226291110ad9f3; valaddr_reg:x3; val_offset:189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 189*FLEN/8, x4, x1, x2)

inst_64:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x4c7591e8478db and fs2 == 0 and fe2 == 0x5fa and fm2 == 0x662e40f571128 and fs3 == 1 and fe3 == 0x7f5 and fm3 == 0x0f34120631a8e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f94c7591e8478db; op2val:0x5fa662e40f571128;
op3val:0xff50f34120631a8e; valaddr_reg:x3; val_offset:192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 192*FLEN/8, x4, x1, x2)

inst_65:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x4cf244963827f and fs2 == 0 and fe2 == 0x5f8 and fm2 == 0x17f4cd829a48b and fs3 == 1 and fe3 == 0x7f3 and fm3 == 0x12f04c3afbb2d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f94cf244963827f; op2val:0x5f817f4cd829a48b;
op3val:0xff312f04c3afbb2d; valaddr_reg:x3; val_offset:195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 195*FLEN/8, x4, x1, x2)

inst_66:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x588877f85511b and fs2 == 0 and fe2 == 0x5f9 and fm2 == 0x7dbc6852f0d29 and fs3 == 1 and fe3 == 0x7f4 and fm3 == 0xc61c354c7f4da and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9588877f85511b; op2val:0x5f97dbc6852f0d29;
op3val:0xff4c61c354c7f4da; valaddr_reg:x3; val_offset:198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 198*FLEN/8, x4, x1, x2)

inst_67:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x594e913e8fb89 and fs2 == 0 and fe2 == 0x5f5 and fm2 == 0xf8ce1a7792dff and fs3 == 1 and fe3 == 0x7f0 and fm3 == 0xed33518b28b93 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9594e913e8fb89; op2val:0x5f5f8ce1a7792dff;
op3val:0xff0ed33518b28b93; valaddr_reg:x3; val_offset:201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201*FLEN/8, x4, x1, x2)

inst_68:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5e77a2a3ef6e5 and fs2 == 0 and fe2 == 0x5fa and fm2 == 0xc1d568ee159cf and fs3 == 1 and fe3 == 0x7f6 and fm3 == 0x28828379b625d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95e77a2a3ef6e5; op2val:0x5fac1d568ee159cf;
op3val:0xff628828379b625d; valaddr_reg:x3; val_offset:204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204*FLEN/8, x4, x1, x2)

inst_69:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x670e7d1c3c471 and fs2 == 0 and fe2 == 0x5f8 and fm2 == 0x62964c066279b and fs3 == 1 and fe3 == 0x7f3 and fm3 == 0x1d2f4ea5729a9 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9670e7d1c3c471; op2val:0x5f862964c066279b;
op3val:0xff31d2f4ea5729a9; valaddr_reg:x3; val_offset:207*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 207*FLEN/8, x4, x1, x2)

inst_70:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x6a47222e524ad and fs2 == 0 and fe2 == 0x5fa and fm2 == 0xf6428fb6f94fe and fs3 == 1 and fe3 == 0x7f6 and fm3 == 0x5c9dbcae3a532 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f96a47222e524ad; op2val:0x5faf6428fb6f94fe;
op3val:0xff65c9dbcae3a532; valaddr_reg:x3; val_offset:210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210*FLEN/8, x4, x1, x2)

inst_71:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x6a6b1b54b21cf and fs2 == 0 and fe2 == 0x5fa and fm2 == 0xc405091d199ee and fs3 == 1 and fe3 == 0x7f6 and fm3 == 0x2fea59eb04bf2 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f96a6b1b54b21cf; op2val:0x5fac405091d199ee;
op3val:0xff62fea59eb04bf2; valaddr_reg:x3; val_offset:213*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 213*FLEN/8, x4, x1, x2)

inst_72:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x6e2aa97ad4287 and fs2 == 0 and fe2 == 0x5f9 and fm2 == 0xd4012b921b92d and fs3 == 1 and fe3 == 0x7f5 and fm3 == 0x2d04b374e9aab and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f96e2aa97ad4287; op2val:0x5f9d4012b921b92d;
op3val:0xff52d04b374e9aab; valaddr_reg:x3; val_offset:216*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 216*FLEN/8, x4, x1, x2)

inst_73:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x6fcb8489dc591 and fs2 == 0 and fe2 == 0x5fa and fm2 == 0xd5d579f837c3e and fs3 == 1 and fe3 == 0x7f6 and fm3 == 0x3dcb317858039 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f96fcb8489dc591; op2val:0x5fad5d579f837c3e;
op3val:0xff63dcb317858039; valaddr_reg:x3; val_offset:219*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 219*FLEN/8, x4, x1, x2)

inst_74:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x7840b0a77fbbb and fs2 == 0 and fe2 == 0x5f9 and fm2 == 0x94a97c3df3b51 and fs3 == 1 and fe3 == 0x7f4 and fm3 == 0x5d58bc2e4fd7f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f97840b0a77fbbb; op2val:0x5f994a97c3df3b51;
op3val:0xff45d58bc2e4fd7f; valaddr_reg:x3; val_offset:222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 222*FLEN/8, x4, x1, x2)

inst_75:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x8522a1b638e23 and fs2 == 0 and fe2 == 0x5fa and fm2 == 0xc898a0b894837 and fs3 == 1 and fe3 == 0x7f6 and fm3 == 0x08bd0eaaf93fa and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f98522a1b638e23; op2val:0x5fac898a0b894837;
op3val:0xff608bd0eaaf93fa; valaddr_reg:x3; val_offset:225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 225*FLEN/8, x4, x1, x2)

inst_76:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x87814b483b2ff and fs2 == 0 and fe2 == 0x5f9 and fm2 == 0xc56d7d1a2a465 and fs3 == 1 and fe3 == 0x7f5 and fm3 == 0x444426e72046b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f987814b483b2ff; op2val:0x5f9c56d7d1a2a465;
op3val:0xff5444426e72046b; valaddr_reg:x3; val_offset:228*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 228*FLEN/8, x4, x1, x2)

inst_77:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x8ad1c84b735e1 and fs2 == 0 and fe2 == 0x5f6 and fm2 == 0x61932b2d37baf and fs3 == 1 and fe3 == 0x7f2 and fm3 == 0x0f4a2e0ecd21d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f98ad1c84b735e1; op2val:0x5f661932b2d37baf;
op3val:0xff20f4a2e0ecd21d; valaddr_reg:x3; val_offset:231*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 231*FLEN/8, x4, x1, x2)

inst_78:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x908348cc50075 and fs2 == 0 and fe2 == 0x5fa and fm2 == 0x0f993cf648277 and fs3 == 1 and fe3 == 0x7f5 and fm3 == 0x893f7fe0be35f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9908348cc50075; op2val:0x5fa0f993cf648277;
op3val:0xff5893f7fe0be35f; valaddr_reg:x3; val_offset:234*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 234*FLEN/8, x4, x1, x2)

inst_79:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9262273e53737 and fs2 == 0 and fe2 == 0x5fa and fm2 == 0x07943814fd4f4 and fs3 == 1 and fe3 == 0x7f4 and fm3 == 0xd9e255bfde29e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99262273e53737; op2val:0x5fa07943814fd4f4;
op3val:0xff4d9e255bfde29e; valaddr_reg:x3; val_offset:237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 237*FLEN/8, x4, x1, x2)

inst_80:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x97b629a826ff3 and fs2 == 0 and fe2 == 0x5fa and fm2 == 0x98715cd327a81 and fs3 == 1 and fe3 == 0x7f6 and fm3 == 0x26980e77a2cb4 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f997b629a826ff3; op2val:0x5fa98715cd327a81;
op3val:0xff626980e77a2cb4; valaddr_reg:x3; val_offset:240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240*FLEN/8, x4, x1, x2)

inst_81:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9c63a6687c333 and fs2 == 0 and fe2 == 0x5fa and fm2 == 0x557d56987bca8 and fs3 == 1 and fe3 == 0x7f6 and fm3 == 0x0febcf30a99f7 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99c63a6687c333; op2val:0x5fa557d56987bca8;
op3val:0xff60febcf30a99f7; valaddr_reg:x3; val_offset:243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243*FLEN/8, x4, x1, x2)

inst_82:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xac0c7cf6e58fb and fs2 == 0 and fe2 == 0x5fa and fm2 == 0x0cd5422534b0d and fs3 == 1 and fe3 == 0x7f5 and fm3 == 0x097bf15fcaf48 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9ac0c7cf6e58fb; op2val:0x5fa0cd5422534b0d;
op3val:0xff5097bf15fcaf48; valaddr_reg:x3; val_offset:246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 246*FLEN/8, x4, x1, x2)

inst_83:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xadd465d39fd03 and fs2 == 0 and fe2 == 0x5f5 and fm2 == 0x2774cd9885b7f and fs3 == 1 and fe3 == 0x7f0 and fm3 == 0x826e9daaa7e48 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9add465d39fd03; op2val:0x5f52774cd9885b7f;
op3val:0xff0826e9daaa7e48; valaddr_reg:x3; val_offset:249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249*FLEN/8, x4, x1, x2)

inst_84:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xae7cb22e21faf and fs2 == 0 and fe2 == 0x5f9 and fm2 == 0x002e328b68fcd and fs3 == 1 and fe3 == 0x7f4 and fm3 == 0x21358514700b7 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9ae7cb22e21faf; op2val:0x5f9002e328b68fcd;
op3val:0xff421358514700b7; valaddr_reg:x3; val_offset:252*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 252*FLEN/8, x4, x1, x2)

inst_85:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xb12b5923ada87 and fs2 == 0 and fe2 == 0x5fa and fm2 == 0x0d68c4b00b1ad and fs3 == 1 and fe3 == 0x7f4 and fm3 == 0xca0ee02ad1bc6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9b12b5923ada87; op2val:0x5fa0d68c4b00b1ad;
op3val:0xff4ca0ee02ad1bc6; valaddr_reg:x3; val_offset:255*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255*FLEN/8, x4, x1, x2)

inst_86:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xb8178fb8c7f25 and fs2 == 0 and fe2 == 0x5fa and fm2 == 0x8ebf551167019 and fs3 == 1 and fe3 == 0x7f5 and fm3 == 0x844270f80e92d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9b8178fb8c7f25; op2val:0x5fa8ebf551167019;
op3val:0xff5844270f80e92d; valaddr_reg:x3; val_offset:258*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 258*FLEN/8, x4, x1, x2)

inst_87:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xb9017651b96db and fs2 == 0 and fe2 == 0x5f9 and fm2 == 0x92fa0166dea3d and fs3 == 1 and fe3 == 0x7f5 and fm3 == 0x2b0743266244a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9b9017651b96db; op2val:0x5f992fa0166dea3d;
op3val:0xff52b0743266244a; valaddr_reg:x3; val_offset:261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 261*FLEN/8, x4, x1, x2)

inst_88:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc787db4043bd9 and fs2 == 0 and fe2 == 0x5f9 and fm2 == 0x12adb3735ac6d and fs3 == 1 and fe3 == 0x7f3 and fm3 == 0xfa5382456ff12 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c787db4043bd9; op2val:0x5f912adb3735ac6d;
op3val:0xff3fa5382456ff12; valaddr_reg:x3; val_offset:264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 264*FLEN/8, x4, x1, x2)

inst_89:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xd17c6c95aefed and fs2 == 0 and fe2 == 0x5f9 and fm2 == 0xa5ac383168515 and fs3 == 1 and fe3 == 0x7f5 and fm3 == 0x24455c7728a26 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9d17c6c95aefed; op2val:0x5f9a5ac383168515;
op3val:0xff524455c7728a26; valaddr_reg:x3; val_offset:267*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 267*FLEN/8, x4, x1, x2)

inst_90:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xd800e87943f0d and fs2 == 0 and fe2 == 0x5fa and fm2 == 0x680debcf012e2 and fs3 == 1 and fe3 == 0x7f5 and fm3 == 0xd214a37f370b3 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9d800e87943f0d; op2val:0x5fa680debcf012e2;
op3val:0xff5d214a37f370b3; valaddr_reg:x3; val_offset:270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 270*FLEN/8, x4, x1, x2)

inst_91:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xd81392ace6303 and fs2 == 0 and fe2 == 0x5fa and fm2 == 0x22aa3d2e74e72 and fs3 == 1 and fe3 == 0x7f6 and fm3 == 0x01531068b1eb0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9d81392ace6303; op2val:0x5fa22aa3d2e74e72;
op3val:0xff601531068b1eb0; valaddr_reg:x3; val_offset:273*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 273*FLEN/8, x4, x1, x2)

inst_92:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xd87aff53d41f5 and fs2 == 0 and fe2 == 0x5fa and fm2 == 0x0f8ac8cffe63e and fs3 == 1 and fe3 == 0x7f5 and fm3 == 0x755f29a7401bf and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9d87aff53d41f5; op2val:0x5fa0f8ac8cffe63e;
op3val:0xff5755f29a7401bf; valaddr_reg:x3; val_offset:276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 276*FLEN/8, x4, x1, x2)

inst_93:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xda577e11e08d7 and fs2 == 0 and fe2 == 0x5fa and fm2 == 0x81d54dd6137b5 and fs3 == 1 and fe3 == 0x7f5 and fm3 == 0xf2aa1ecb04f9c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9da577e11e08d7; op2val:0x5fa81d54dd6137b5;
op3val:0xff5f2aa1ecb04f9c; valaddr_reg:x3; val_offset:279*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 279*FLEN/8, x4, x1, x2)

inst_94:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xe3d6d32e17fa5 and fs2 == 0 and fe2 == 0x5fa and fm2 == 0xec884da30b843 and fs3 == 1 and fe3 == 0x7f6 and fm3 == 0x35b03f15411b2 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9e3d6d32e17fa5; op2val:0x5faec884da30b843;
op3val:0xff635b03f15411b2; valaddr_reg:x3; val_offset:282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 282*FLEN/8, x4, x1, x2)

inst_95:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xe4204ffab96f7 and fs2 == 0 and fe2 == 0x5f8 and fm2 == 0xcde16617ec93f and fs3 == 1 and fe3 == 0x7f4 and fm3 == 0x6aabd19d990c4 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9e4204ffab96f7; op2val:0x5f8cde16617ec93f;
op3val:0xff46aabd19d990c4; valaddr_reg:x3; val_offset:285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 285*FLEN/8, x4, x1, x2)

inst_96:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xe68dd9c514393 and fs2 == 0 and fe2 == 0x5f6 and fm2 == 0x878222f2318df and fs3 == 1 and fe3 == 0x7f2 and fm3 == 0x49adab20e349e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9e68dd9c514393; op2val:0x5f6878222f2318df;
op3val:0xff249adab20e349e; valaddr_reg:x3; val_offset:288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 288*FLEN/8, x4, x1, x2)

inst_97:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xf1860e3b4eb81 and fs2 == 0 and fe2 == 0x5f8 and fm2 == 0xaa7d58e3b9047 and fs3 == 1 and fe3 == 0x7f4 and fm3 == 0x49366e3f9dbbd and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9f1860e3b4eb81; op2val:0x5f8aa7d58e3b9047;
op3val:0xff449366e3f9dbbd; valaddr_reg:x3; val_offset:291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 291*FLEN/8, x4, x1, x2)

inst_98:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xf4853a4c5bef9 and fs2 == 0 and fe2 == 0x5f9 and fm2 == 0x09a18dc6373ff and fs3 == 1 and fe3 == 0x7f4 and fm3 == 0x72b9fba4041c7 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9f4853a4c5bef9; op2val:0x5f909a18dc6373ff;
op3val:0xff472b9fba4041c7; valaddr_reg:x3; val_offset:294*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 294*FLEN/8, x4, x1, x2)

inst_99:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x01559da52cc50 and fs2 == 0 and fe2 == 0x5fa and fm2 == 0x61457deedafab and fs3 == 1 and fe3 == 0x7f6 and fm3 == 0x5a04d43f6744e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa01559da52cc50; op2val:0x5fa61457deedafab;
op3val:0xff65a04d43f6744e; valaddr_reg:x3; val_offset:297*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 297*FLEN/8, x4, x1, x2)

inst_100:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x017c339d75e4d and fs2 == 0 and fe2 == 0x5f5 and fm2 == 0xc30407e58dcff and fs3 == 1 and fe3 == 0x7f0 and fm3 == 0xe9d605ec1e199 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa017c339d75e4d; op2val:0x5f5c30407e58dcff;
op3val:0xff0e9d605ec1e199; valaddr_reg:x3; val_offset:300*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300*FLEN/8, x4, x1, x2)

inst_101:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x022ce6a3fae64 and fs2 == 0 and fe2 == 0x5fa and fm2 == 0x09163be078882 and fs3 == 1 and fe3 == 0x7f5 and fm3 == 0xb97cfd1ddcd50 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa022ce6a3fae64; op2val:0x5fa09163be078882;
op3val:0xff5b97cfd1ddcd50; valaddr_reg:x3; val_offset:303*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303*FLEN/8, x4, x1, x2)

inst_102:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x043a8c3aa6439 and fs2 == 0 and fe2 == 0x5fa and fm2 == 0xf788de2d51675 and fs3 == 1 and fe3 == 0x7f6 and fm3 == 0xeefe93994c491 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa043a8c3aa6439; op2val:0x5faf788de2d51675;
op3val:0xff6eefe93994c491; valaddr_reg:x3; val_offset:306*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 306*FLEN/8, x4, x1, x2)

inst_103:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x053533036dba9 and fs2 == 0 and fe2 == 0x5f9 and fm2 == 0xee098e2310cc3 and fs3 == 1 and fe3 == 0x7f5 and fm3 == 0x6219989c7d7f0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa053533036dba9; op2val:0x5f9ee098e2310cc3;
op3val:0xff56219989c7d7f0; valaddr_reg:x3; val_offset:309*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 309*FLEN/8, x4, x1, x2)

inst_104:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x05e381015d598 and fs2 == 0 and fe2 == 0x5fa and fm2 == 0x2982d565d88fc and fs3 == 1 and fe3 == 0x7f5 and fm3 == 0x3ff2ba26b011d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa05e381015d598; op2val:0x5fa2982d565d88fc;
op3val:0xff53ff2ba26b011d; valaddr_reg:x3; val_offset:312*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 312*FLEN/8, x4, x1, x2)

inst_105:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0616a9d776586 and fs2 == 0 and fe2 == 0x5fa and fm2 == 0xde497aebca743 and fs3 == 1 and fe3 == 0x7f6 and fm3 == 0x8d6d042a7b2d5 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0616a9d776586; op2val:0x5fade497aebca743;
op3val:0xff68d6d042a7b2d5; valaddr_reg:x3; val_offset:315*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 315*FLEN/8, x4, x1, x2)

inst_106:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x09d5da3d7b9db and fs2 == 0 and fe2 == 0x5fa and fm2 == 0xd7c8570796fe8 and fs3 == 1 and fe3 == 0x7f6 and fm3 == 0x8a804749eca98 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa09d5da3d7b9db; op2val:0x5fad7c8570796fe8;
op3val:0xff68a804749eca98; valaddr_reg:x3; val_offset:318*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 318*FLEN/8, x4, x1, x2)

inst_107:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0a9df4ead8eb3 and fs2 == 0 and fe2 == 0x5f9 and fm2 == 0xdb8c7d3a18027 and fs3 == 1 and fe3 == 0x7f5 and fm3 == 0x4455b0e11d60e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0a9df4ead8eb3; op2val:0x5f9db8c7d3a18027;
op3val:0xff54455b0e11d60e; valaddr_reg:x3; val_offset:321*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 321*FLEN/8, x4, x1, x2)

inst_108:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0b731e88bc69f and fs2 == 0 and fe2 == 0x5fa and fm2 == 0xb5380491038ac and fs3 == 1 and fe3 == 0x7f6 and fm3 == 0x1c4d9d02a9b38 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0b731e88bc69f; op2val:0x5fab5380491038ac;
op3val:0xff61c4d9d02a9b38; valaddr_reg:x3; val_offset:324*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 324*FLEN/8, x4, x1, x2)

inst_109:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0bb792159b051 and fs2 == 0 and fe2 == 0x5fa and fm2 == 0x5d1ae1e1d28a7 and fs3 == 1 and fe3 == 0x7f6 and fm3 == 0x565b8c4137e0d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0bb792159b051; op2val:0x5fa5d1ae1e1d28a7;
op3val:0xff6565b8c4137e0d; valaddr_reg:x3; val_offset:327*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 327*FLEN/8, x4, x1, x2)

inst_110:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0bc55b64ea25c and fs2 == 0 and fe2 == 0x5fa and fm2 == 0xb0d4dc0773572 and fs3 == 1 and fe3 == 0x7f6 and fm3 == 0x2ee34f1961391 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0bc55b64ea25c; op2val:0x5fab0d4dc0773572;
op3val:0xff62ee34f1961391; valaddr_reg:x3; val_offset:330*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 330*FLEN/8, x4, x1, x2)

inst_111:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x13bf56ad82c8a and fs2 == 0 and fe2 == 0x5fa and fm2 == 0xd453f7d35f923 and fs3 == 1 and fe3 == 0x7f6 and fm3 == 0x0f938d0012b4a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa13bf56ad82c8a; op2val:0x5fad453f7d35f923;
op3val:0xff60f938d0012b4a; valaddr_reg:x3; val_offset:333*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 333*FLEN/8, x4, x1, x2)

inst_112:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x1efb36cb5b1e4 and fs2 == 0 and fe2 == 0x5f8 and fm2 == 0xe394ab3b08c6b and fs3 == 1 and fe3 == 0x7f4 and fm3 == 0x1584cfb43ffe2 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa1efb36cb5b1e4; op2val:0x5f8e394ab3b08c6b;
op3val:0xff41584cfb43ffe2; valaddr_reg:x3; val_offset:336*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 336*FLEN/8, x4, x1, x2)

inst_113:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x1ffb1e4665b2c and fs2 == 0 and fe2 == 0x5f9 and fm2 == 0xe4206922dd131 and fs3 == 1 and fe3 == 0x7f5 and fm3 == 0x5dc328d369ad9 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa1ffb1e4665b2c; op2val:0x5f9e4206922dd131;
op3val:0xff55dc328d369ad9; valaddr_reg:x3; val_offset:339*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 339*FLEN/8, x4, x1, x2)

inst_114:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x2c2600e5225e4 and fs2 == 0 and fe2 == 0x5f8 and fm2 == 0x882e3a7d63c53 and fs3 == 1 and fe3 == 0x7f4 and fm3 == 0x9ecbb9e89d747 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa2c2600e5225e4; op2val:0x5f8882e3a7d63c53;
op3val:0xff49ecbb9e89d747; valaddr_reg:x3; val_offset:342*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 342*FLEN/8, x4, x1, x2)

inst_115:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x2d0716da06e3c and fs2 == 0 and fe2 == 0x5f9 and fm2 == 0x3f541e5d8f1c1 and fs3 == 1 and fe3 == 0x7f4 and fm3 == 0xc587a9879e0e4 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa2d0716da06e3c; op2val:0x5f93f541e5d8f1c1;
op3val:0xff4c587a9879e0e4; valaddr_reg:x3; val_offset:345*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 345*FLEN/8, x4, x1, x2)

inst_116:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x30b95bd887309 and fs2 == 0 and fe2 == 0x5fa and fm2 == 0xc37d95ef26f70 and fs3 == 1 and fe3 == 0x7f6 and fm3 == 0x3d316c619258e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa30b95bd887309; op2val:0x5fac37d95ef26f70;
op3val:0xff63d316c619258e; valaddr_reg:x3; val_offset:348*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 348*FLEN/8, x4, x1, x2)

inst_117:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x31f03f05cb87a and fs2 == 0 and fe2 == 0x5fa and fm2 == 0x2d0e69e0aad85 and fs3 == 1 and fe3 == 0x7f6 and fm3 == 0x14c78561793cb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa31f03f05cb87a; op2val:0x5fa2d0e69e0aad85;
op3val:0xff614c78561793cb; valaddr_reg:x3; val_offset:351*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 351*FLEN/8, x4, x1, x2)

inst_118:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x36aeb78249790 and fs2 == 0 and fe2 == 0x5fa and fm2 == 0x299392ab99898 and fs3 == 1 and fe3 == 0x7f5 and fm3 == 0xa256930644047 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa36aeb78249790; op2val:0x5fa299392ab99898;
op3val:0xff5a256930644047; valaddr_reg:x3; val_offset:354*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 354*FLEN/8, x4, x1, x2)

inst_119:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x3b00ab682d289 and fs2 == 0 and fe2 == 0x5fa and fm2 == 0x7c23aaefd9f67 and fs3 == 1 and fe3 == 0x7f6 and fm3 == 0x0454e8106d5cf and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa3b00ab682d289; op2val:0x5fa7c23aaefd9f67;
op3val:0xff60454e8106d5cf; valaddr_reg:x3; val_offset:357*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 357*FLEN/8, x4, x1, x2)

inst_120:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x3d2d3af7c48ae and fs2 == 0 and fe2 == 0x5f9 and fm2 == 0x447163c5b6799 and fs3 == 1 and fe3 == 0x7f5 and fm3 == 0x7157ca9ebcb4a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa3d2d3af7c48ae; op2val:0x5f9447163c5b6799;
op3val:0xff57157ca9ebcb4a; valaddr_reg:x3; val_offset:360*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 360*FLEN/8, x4, x1, x2)

inst_121:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x3ed0f2697260f and fs2 == 0 and fe2 == 0x5fa and fm2 == 0xb79b2b1934a01 and fs3 == 1 and fe3 == 0x7f7 and fm3 == 0x049f916bf2560 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa3ed0f2697260f; op2val:0x5fab79b2b1934a01;
op3val:0xff7049f916bf2560; valaddr_reg:x3; val_offset:363*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 363*FLEN/8, x4, x1, x2)

inst_122:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x4038aec1813f9 and fs2 == 0 and fe2 == 0x5fa and fm2 == 0x7c017850ccf9e and fs3 == 1 and fe3 == 0x7f6 and fm3 == 0x94a9ed2abf1d5 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa4038aec1813f9; op2val:0x5fa7c017850ccf9e;
op3val:0xff694a9ed2abf1d5; valaddr_reg:x3; val_offset:366*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 366*FLEN/8, x4, x1, x2)

inst_123:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x41176abd4258d and fs2 == 0 and fe2 == 0x5f8 and fm2 == 0xaeb9622c6891f and fs3 == 1 and fe3 == 0x7f4 and fm3 == 0x74099544c727f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa41176abd4258d; op2val:0x5f8aeb9622c6891f;
op3val:0xff474099544c727f; valaddr_reg:x3; val_offset:369*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 369*FLEN/8, x4, x1, x2)

inst_124:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x440c579831418 and fs2 == 0 and fe2 == 0x5f9 and fm2 == 0x99ddc9e77cb45 and fs3 == 1 and fe3 == 0x7f5 and fm3 == 0xd908ada8b9c0d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa440c579831418; op2val:0x5f999ddc9e77cb45;
op3val:0xff5d908ada8b9c0d; valaddr_reg:x3; val_offset:372*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 372*FLEN/8, x4, x1, x2)

inst_125:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x45088c7a8eddc and fs2 == 0 and fe2 == 0x5f4 and fm2 == 0x7c4c7501c707f and fs3 == 1 and fe3 == 0x7f0 and fm3 == 0x6194442f94d73 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa45088c7a8eddc; op2val:0x5f47c4c7501c707f;
op3val:0xff06194442f94d73; valaddr_reg:x3; val_offset:375*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 375*FLEN/8, x4, x1, x2)

inst_126:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x477c4d4dd15f5 and fs2 == 0 and fe2 == 0x5fa and fm2 == 0xdbfa105179648 and fs3 == 1 and fe3 == 0x7f6 and fm3 == 0x93c3240340b2a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa477c4d4dd15f5; op2val:0x5fadbfa105179648;
op3val:0xff693c3240340b2a; valaddr_reg:x3; val_offset:378*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 378*FLEN/8, x4, x1, x2)

inst_127:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x48949a9851f6d and fs2 == 0 and fe2 == 0x5f8 and fm2 == 0xb318d9af479ef and fs3 == 1 and fe3 == 0x7f5 and fm3 == 0x0a2ea67ab4e6e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa48949a9851f6d; op2val:0x5f8b318d9af479ef;
op3val:0xff50a2ea67ab4e6e; valaddr_reg:x3; val_offset:381*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 381*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_2)

inst_128:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x4c791addc9912 and fs2 == 0 and fe2 == 0x5f6 and fm2 == 0x97b02f6ed223f and fs3 == 1 and fe3 == 0x7f2 and fm3 == 0xf6a95c1bb8ef7 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa4c791addc9912; op2val:0x5f697b02f6ed223f;
op3val:0xff2f6a95c1bb8ef7; valaddr_reg:x3; val_offset:384*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 384*FLEN/8, x4, x1, x2)

inst_129:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x511a1344303ed and fs2 == 0 and fe2 == 0x5fa and fm2 == 0x82640d65dc24c and fs3 == 1 and fe3 == 0x7f6 and fm3 == 0x79c8ee5480d1b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa511a1344303ed; op2val:0x5fa82640d65dc24c;
op3val:0xff679c8ee5480d1b; valaddr_reg:x3; val_offset:387*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 387*FLEN/8, x4, x1, x2)

inst_130:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x56e6e736a538e and fs2 == 0 and fe2 == 0x5f9 and fm2 == 0x3b881fa033e19 and fs3 == 1 and fe3 == 0x7f5 and fm3 == 0x535ebad73a8a2 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa56e6e736a538e; op2val:0x5f93b881fa033e19;
op3val:0xff5535ebad73a8a2; valaddr_reg:x3; val_offset:390*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 390*FLEN/8, x4, x1, x2)

inst_131:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x56eb5abeef1c8 and fs2 == 0 and fe2 == 0x5f7 and fm2 == 0x78842cac09a97 and fs3 == 1 and fe3 == 0x7f3 and fm3 == 0xf12b1fbe2cab1 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa56eb5abeef1c8; op2val:0x5f778842cac09a97;
op3val:0xff3f12b1fbe2cab1; valaddr_reg:x3; val_offset:393*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 393*FLEN/8, x4, x1, x2)

inst_132:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x597fb1bb06230 and fs2 == 0 and fe2 == 0x5f9 and fm2 == 0x56ed923aca873 and fs3 == 1 and fe3 == 0x7f5 and fm3 == 0x252e9c09634b1 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa597fb1bb06230; op2val:0x5f956ed923aca873;
op3val:0xff5252e9c09634b1; valaddr_reg:x3; val_offset:396*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 396*FLEN/8, x4, x1, x2)

inst_133:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5b608176286de and fs2 == 0 and fe2 == 0x5f9 and fm2 == 0x7ec25e17b909b and fs3 == 1 and fe3 == 0x7f5 and fm3 == 0x602a93732cb46 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5b608176286de; op2val:0x5f97ec25e17b909b;
op3val:0xff5602a93732cb46; valaddr_reg:x3; val_offset:399*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 399*FLEN/8, x4, x1, x2)

inst_134:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5bb8442cbfc28 and fs2 == 0 and fe2 == 0x5fa and fm2 == 0xd65025c565597 and fs3 == 1 and fe3 == 0x7f6 and fm3 == 0xfa8cd783f460a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5bb8442cbfc28; op2val:0x5fad65025c565597;
op3val:0xff6fa8cd783f460a; valaddr_reg:x3; val_offset:402*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 402*FLEN/8, x4, x1, x2)

inst_135:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5cb9025515212 and fs2 == 0 and fe2 == 0x5f9 and fm2 == 0xc160cd96157af and fs3 == 1 and fe3 == 0x7f5 and fm3 == 0xd2735b02a4775 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5cb9025515212; op2val:0x5f9c160cd96157af;
op3val:0xff5d2735b02a4775; valaddr_reg:x3; val_offset:405*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 405*FLEN/8, x4, x1, x2)

inst_136:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x62a35ac6bee41 and fs2 == 0 and fe2 == 0x5f5 and fm2 == 0x942c54f20963f and fs3 == 1 and fe3 == 0x7f1 and fm3 == 0xd07bff3a622c5 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa62a35ac6bee41; op2val:0x5f5942c54f20963f;
op3val:0xff1d07bff3a622c5; valaddr_reg:x3; val_offset:408*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 408*FLEN/8, x4, x1, x2)

inst_137:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x67fb4908ceaaf and fs2 == 0 and fe2 == 0x5fa and fm2 == 0x65eaa9e302952 and fs3 == 1 and fe3 == 0x7f6 and fm3 == 0xa149f8995d019 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa67fb4908ceaaf; op2val:0x5fa65eaa9e302952;
op3val:0xff6a149f8995d019; valaddr_reg:x3; val_offset:411*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 411*FLEN/8, x4, x1, x2)

inst_138:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x6bc16c6eccc22 and fs2 == 0 and fe2 == 0x5fa and fm2 == 0xdf93331a60977 and fs3 == 1 and fe3 == 0x7f7 and fm3 == 0x22879c38e45b3 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa6bc16c6eccc22; op2val:0x5fadf93331a60977;
op3val:0xff722879c38e45b3; valaddr_reg:x3; val_offset:414*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 414*FLEN/8, x4, x1, x2)

inst_139:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x6c53c0ba0796d and fs2 == 0 and fe2 == 0x5fa and fm2 == 0xc43588ddd7fbc and fs3 == 1 and fe3 == 0x7f7 and fm3 == 0x097bba91bea78 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa6c53c0ba0796d; op2val:0x5fac43588ddd7fbc;
op3val:0xff7097bba91bea78; valaddr_reg:x3; val_offset:417*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 417*FLEN/8, x4, x1, x2)

inst_140:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x6e444c20e8184 and fs2 == 0 and fe2 == 0x5f9 and fm2 == 0x076f4d15b455d and fs3 == 1 and fe3 == 0x7f5 and fm3 == 0x6518d4f3d8693 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa6e444c20e8184; op2val:0x5f9076f4d15b455d;
op3val:0xff56518d4f3d8693; valaddr_reg:x3; val_offset:420*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 420*FLEN/8, x4, x1, x2)

inst_141:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x6f1586709a287 and fs2 == 0 and fe2 == 0x5f6 and fm2 == 0x051aac3a28d5f and fs3 == 1 and fe3 == 0x7f1 and fm3 == 0xfe1215b38304a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa6f1586709a287; op2val:0x5f6051aac3a28d5f;
op3val:0xff1fe1215b38304a; valaddr_reg:x3; val_offset:423*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 423*FLEN/8, x4, x1, x2)

inst_142:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x6f674621915da and fs2 == 0 and fe2 == 0x5fa and fm2 == 0x03a0ff71fb0c2 and fs3 == 1 and fe3 == 0x7f6 and fm3 == 0x652550f234063 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa6f674621915da; op2val:0x5fa03a0ff71fb0c2;
op3val:0xff6652550f234063; valaddr_reg:x3; val_offset:426*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 426*FLEN/8, x4, x1, x2)

inst_143:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x7291f0459edd6 and fs2 == 0 and fe2 == 0x5f8 and fm2 == 0xed4ae61a16dab and fs3 == 1 and fe3 == 0x7f4 and fm3 == 0x88a6f73f25521 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa7291f0459edd6; op2val:0x5f8ed4ae61a16dab;
op3val:0xff488a6f73f25521; valaddr_reg:x3; val_offset:429*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 429*FLEN/8, x4, x1, x2)

inst_144:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x72925e5d38221 and fs2 == 0 and fe2 == 0x5f9 and fm2 == 0xf2498354565a7 and fs3 == 1 and fe3 == 0x7f5 and fm3 == 0xb8a466da78c70 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa72925e5d38221; op2val:0x5f9f2498354565a7;
op3val:0xff5b8a466da78c70; valaddr_reg:x3; val_offset:432*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 432*FLEN/8, x4, x1, x2)

inst_145:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x757c41e46ee0f and fs2 == 0 and fe2 == 0x5fa and fm2 == 0x367fd258b0b63 and fs3 == 1 and fe3 == 0x7f6 and fm3 == 0xaf8d402ed4d82 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa757c41e46ee0f; op2val:0x5fa367fd258b0b63;
op3val:0xff6af8d402ed4d82; valaddr_reg:x3; val_offset:435*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 435*FLEN/8, x4, x1, x2)

inst_146:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x7c30cfd9902ca and fs2 == 0 and fe2 == 0x5fa and fm2 == 0x8083feedaf3d3 and fs3 == 1 and fe3 == 0x7f7 and fm3 == 0x0ade42dab32c4 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa7c30cfd9902ca; op2val:0x5fa8083feedaf3d3;
op3val:0xff70ade42dab32c4; valaddr_reg:x3; val_offset:438*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 438*FLEN/8, x4, x1, x2)

inst_147:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x7dc0f47a5db15 and fs2 == 0 and fe2 == 0x5fa and fm2 == 0x5124f30535e0b and fs3 == 1 and fe3 == 0x7f6 and fm3 == 0xbad4e8fb1eecb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa7dc0f47a5db15; op2val:0x5fa5124f30535e0b;
op3val:0xff6bad4e8fb1eecb; valaddr_reg:x3; val_offset:441*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 441*FLEN/8, x4, x1, x2)

inst_148:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x820702d63fac0 and fs2 == 0 and fe2 == 0x5f8 and fm2 == 0x63bca2c276bab and fs3 == 1 and fe3 == 0x7f4 and fm3 == 0xd57035175d798 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa820702d63fac0; op2val:0x5f863bca2c276bab;
op3val:0xff4d57035175d798; valaddr_reg:x3; val_offset:444*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 444*FLEN/8, x4, x1, x2)

inst_149:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x82e62659b7f9b and fs2 == 0 and fe2 == 0x5fa and fm2 == 0xb9927e27c836d and fs3 == 1 and fe3 == 0x7f7 and fm3 == 0x1c84f08b614c7 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa82e62659b7f9b; op2val:0x5fab9927e27c836d;
op3val:0xff71c84f08b614c7; valaddr_reg:x3; val_offset:447*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 447*FLEN/8, x4, x1, x2)

inst_150:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x82f53e1b1e100 and fs2 == 0 and fe2 == 0x5f7 and fm2 == 0x89d942a85e30f and fs3 == 1 and fe3 == 0x7f3 and fm3 == 0xc36797b0fd88d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa82f53e1b1e100; op2val:0x5f789d942a85e30f;
op3val:0xff3c36797b0fd88d; valaddr_reg:x3; val_offset:450*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 450*FLEN/8, x4, x1, x2)

inst_151:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x85eb50a9b65e8 and fs2 == 0 and fe2 == 0x5f9 and fm2 == 0xbee6f48112ca9 and fs3 == 1 and fe3 == 0x7f6 and fm3 == 0x06857d17f9e6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa85eb50a9b65e8; op2val:0x5f9bee6f48112ca9;
op3val:0xff606857d17f9e6d; valaddr_reg:x3; val_offset:453*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 453*FLEN/8, x4, x1, x2)

inst_152:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x87dc8b1f4a7b7 and fs2 == 0 and fe2 == 0x5fa and fm2 == 0xf9492e51e93d3 and fs3 == 1 and fe3 == 0x7f6 and fm3 == 0xdb5278636b311 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa87dc8b1f4a7b7; op2val:0x5faf9492e51e93d3;
op3val:0xff6db5278636b311; valaddr_reg:x3; val_offset:456*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 456*FLEN/8, x4, x1, x2)

inst_153:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x882d3626badfd and fs2 == 0 and fe2 == 0x5fa and fm2 == 0x7ada4a02edef8 and fs3 == 1 and fe3 == 0x7f7 and fm3 == 0x13f930a295467 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa882d3626badfd; op2val:0x5fa7ada4a02edef8;
op3val:0xff713f930a295467; valaddr_reg:x3; val_offset:459*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 459*FLEN/8, x4, x1, x2)

inst_154:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x88b452334d482 and fs2 == 0 and fe2 == 0x5f8 and fm2 == 0x98a767463fb7b and fs3 == 1 and fe3 == 0x7f5 and fm3 == 0x115b37a3f916a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa88b452334d482; op2val:0x5f898a767463fb7b;
op3val:0xff5115b37a3f916a; valaddr_reg:x3; val_offset:462*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 462*FLEN/8, x4, x1, x2)

inst_155:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x894eb52d7a53a and fs2 == 0 and fe2 == 0x5fa and fm2 == 0x3883363d45ce5 and fs3 == 1 and fe3 == 0x7f6 and fm3 == 0x4ec9f86f5cd83 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa894eb52d7a53a; op2val:0x5fa3883363d45ce5;
op3val:0xff64ec9f86f5cd83; valaddr_reg:x3; val_offset:465*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 465*FLEN/8, x4, x1, x2)

inst_156:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x8deeb902c377e and fs2 == 0 and fe2 == 0x5fa and fm2 == 0x7270fced2be29 and fs3 == 1 and fe3 == 0x7f6 and fm3 == 0xaf46dd23cda76 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa8deeb902c377e; op2val:0x5fa7270fced2be29;
op3val:0xff6af46dd23cda76; valaddr_reg:x3; val_offset:468*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 468*FLEN/8, x4, x1, x2)

inst_157:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9199ba7fdacbd and fs2 == 0 and fe2 == 0x5f9 and fm2 == 0x9e32e020ad6fd and fs3 == 1 and fe3 == 0x7f6 and fm3 == 0x10179abe8eb1b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9199ba7fdacbd; op2val:0x5f99e32e020ad6fd;
op3val:0xff610179abe8eb1b; valaddr_reg:x3; val_offset:471*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 471*FLEN/8, x4, x1, x2)

inst_158:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x932903b557086 and fs2 == 0 and fe2 == 0x5fa and fm2 == 0xba615dee0d545 and fs3 == 1 and fe3 == 0x7f6 and fm3 == 0x8b52241b8e024 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa932903b557086; op2val:0x5faba615dee0d545;
op3val:0xff68b52241b8e024; valaddr_reg:x3; val_offset:474*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 474*FLEN/8, x4, x1, x2)

inst_159:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x97170988aa151 and fs2 == 0 and fe2 == 0x5f8 and fm2 == 0xdd895344c54d7 and fs3 == 1 and fe3 == 0x7f5 and fm3 == 0x575700b04d303 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa97170988aa151; op2val:0x5f8dd895344c54d7;
op3val:0xff5575700b04d303; valaddr_reg:x3; val_offset:477*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 477*FLEN/8, x4, x1, x2)

inst_160:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x97787813faa38 and fs2 == 0 and fe2 == 0x5fa and fm2 == 0x4e8baea923265 and fs3 == 1 and fe3 == 0x7f6 and fm3 == 0x72dedcdfdeaae and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa97787813faa38; op2val:0x5fa4e8baea923265;
op3val:0xff672dedcdfdeaae; valaddr_reg:x3; val_offset:480*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 480*FLEN/8, x4, x1, x2)

inst_161:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9881bee04c84c and fs2 == 0 and fe2 == 0x5fa and fm2 == 0x41f756c5b46c8 and fs3 == 1 and fe3 == 0x7f6 and fm3 == 0x5006cf149aed7 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9881bee04c84c; op2val:0x5fa41f756c5b46c8;
op3val:0xff65006cf149aed7; valaddr_reg:x3; val_offset:483*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 483*FLEN/8, x4, x1, x2)

inst_162:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9889fc2d44e5e and fs2 == 0 and fe2 == 0x5f4 and fm2 == 0x21d9040c119bf and fs3 == 1 and fe3 == 0x7ef and fm3 == 0xff9140e19d949 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9889fc2d44e5e; op2val:0x5f421d9040c119bf;
op3val:0xfefff9140e19d949; valaddr_reg:x3; val_offset:486*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 486*FLEN/8, x4, x1, x2)

inst_163:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99b4caa7ee21f and fs2 == 0 and fe2 == 0x5fa and fm2 == 0x6b435c9707703 and fs3 == 1 and fe3 == 0x7f6 and fm3 == 0x6d474fad8ee6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99b4caa7ee21f; op2val:0x5fa6b435c9707703;
op3val:0xff66d474fad8ee6d; valaddr_reg:x3; val_offset:489*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 489*FLEN/8, x4, x1, x2)

inst_164:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa1d3ea060b239 and fs2 == 0 and fe2 == 0x5f5 and fm2 == 0x18c773392efff and fs3 == 1 and fe3 == 0x7f1 and fm3 == 0xbd433bf0d5f95 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa1d3ea060b239; op2val:0x5f518c773392efff;
op3val:0xff1bd433bf0d5f95; valaddr_reg:x3; val_offset:492*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 492*FLEN/8, x4, x1, x2)

inst_165:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa2bda964d91ae and fs2 == 0 and fe2 == 0x5f7 and fm2 == 0x89000c246f107 and fs3 == 1 and fe3 == 0x7f3 and fm3 == 0xb3dbf0af6d297 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa2bda964d91ae; op2val:0x5f789000c246f107;
op3val:0xff3b3dbf0af6d297; valaddr_reg:x3; val_offset:495*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 495*FLEN/8, x4, x1, x2)

inst_166:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa321af726492d and fs2 == 0 and fe2 == 0x5f9 and fm2 == 0x8450b36da4f99 and fs3 == 1 and fe3 == 0x7f5 and fm3 == 0xb1c82278f55e9 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa321af726492d; op2val:0x5f98450b36da4f99;
op3val:0xff5b1c82278f55e9; valaddr_reg:x3; val_offset:498*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 498*FLEN/8, x4, x1, x2)

inst_167:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa56aface5eb97 and fs2 == 0 and fe2 == 0x5fa and fm2 == 0xabc379493ef0f and fs3 == 1 and fe3 == 0x7f7 and fm3 == 0x195528decc428 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa56aface5eb97; op2val:0x5faabc379493ef0f;
op3val:0xff7195528decc428; valaddr_reg:x3; val_offset:501*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 501*FLEN/8, x4, x1, x2)

inst_168:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa613e194097b8 and fs2 == 0 and fe2 == 0x5f9 and fm2 == 0x377828aab6e99 and fs3 == 1 and fe3 == 0x7f5 and fm3 == 0xa6b75a2599da0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa613e194097b8; op2val:0x5f9377828aab6e99;
op3val:0xff5a6b75a2599da0; valaddr_reg:x3; val_offset:504*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 504*FLEN/8, x4, x1, x2)

inst_169:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xac08ec2b88c86 and fs2 == 0 and fe2 == 0x5f9 and fm2 == 0x2fe2d0b2849b1 and fs3 == 1 and fe3 == 0x7f5 and fm3 == 0x38e5397520280 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faac08ec2b88c86; op2val:0x5f92fe2d0b2849b1;
op3val:0xff538e5397520280; valaddr_reg:x3; val_offset:507*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 507*FLEN/8, x4, x1, x2)

inst_170:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xae70dafae96a3 and fs2 == 0 and fe2 == 0x5f7 and fm2 == 0x7cb7e10454cbf and fs3 == 1 and fe3 == 0x7f4 and fm3 == 0x05638ab21778b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faae70dafae96a3; op2val:0x5f77cb7e10454cbf;
op3val:0xff405638ab21778b; valaddr_reg:x3; val_offset:510*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 510*FLEN/8, x4, x1, x2)

inst_171:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb33c7d55682c1 and fs2 == 0 and fe2 == 0x5fa and fm2 == 0x48300cd907da9 and fs3 == 1 and fe3 == 0x7f7 and fm3 == 0x115b5ea65817a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab33c7d55682c1; op2val:0x5fa48300cd907da9;
op3val:0xff7115b5ea65817a; valaddr_reg:x3; val_offset:513*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 513*FLEN/8, x4, x1, x2)

inst_172:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb442f12e7354a and fs2 == 0 and fe2 == 0x5f8 and fm2 == 0xcccc36886926f and fs3 == 1 and fe3 == 0x7f5 and fm3 == 0x3e473b72c36be and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab442f12e7354a; op2val:0x5f8cccc36886926f;
op3val:0xff53e473b72c36be; valaddr_reg:x3; val_offset:516*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 516*FLEN/8, x4, x1, x2)

inst_173:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xbfe0f0fcad936 and fs2 == 0 and fe2 == 0x5f8 and fm2 == 0x0531d684ae65b and fs3 == 1 and fe3 == 0x7f4 and fm3 == 0x6a22dab2e89da and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fabfe0f0fcad936; op2val:0x5f80531d684ae65b;
op3val:0xff46a22dab2e89da; valaddr_reg:x3; val_offset:519*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 519*FLEN/8, x4, x1, x2)

inst_174:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xc4f4bdbe3ee53 and fs2 == 0 and fe2 == 0x5f7 and fm2 == 0x9b7932c7ac007 and fs3 == 1 and fe3 == 0x7f4 and fm3 == 0x4a76956747dfc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fac4f4bdbe3ee53; op2val:0x5f79b7932c7ac007;
op3val:0xff44a76956747dfc; valaddr_reg:x3; val_offset:522*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 522*FLEN/8, x4, x1, x2)

inst_175:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xc9815c3b1adfc and fs2 == 0 and fe2 == 0x5f8 and fm2 == 0x7dd98b509becf and fs3 == 1 and fe3 == 0x7f5 and fm3 == 0x4e7f68bcdab8b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fac9815c3b1adfc; op2val:0x5f87dd98b509becf;
op3val:0xff54e7f68bcdab8b; valaddr_reg:x3; val_offset:525*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 525*FLEN/8, x4, x1, x2)

inst_176:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xc982355c85538 and fs2 == 0 and fe2 == 0x5fa and fm2 == 0x97f0ea9a89f82 and fs3 == 1 and fe3 == 0x7f7 and fm3 == 0x3c1db1578d26b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fac982355c85538; op2val:0x5fa97f0ea9a89f82;
op3val:0xff73c1db1578d26b; valaddr_reg:x3; val_offset:528*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 528*FLEN/8, x4, x1, x2)

inst_177:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xca057fc89126a and fs2 == 0 and fe2 == 0x5fa and fm2 == 0xd7eea06dfbab7 and fs3 == 1 and fe3 == 0x7f7 and fm3 == 0x3063b52602e9f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faca057fc89126a; op2val:0x5fad7eea06dfbab7;
op3val:0xff73063b52602e9f; valaddr_reg:x3; val_offset:531*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 531*FLEN/8, x4, x1, x2)

inst_178:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xd02d0afa24812 and fs2 == 0 and fe2 == 0x5fa and fm2 == 0x8698ed174ff65 and fs3 == 1 and fe3 == 0x7f7 and fm3 == 0x3ce2f4063213b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fad02d0afa24812; op2val:0x5fa8698ed174ff65;
op3val:0xff73ce2f4063213b; valaddr_reg:x3; val_offset:534*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 534*FLEN/8, x4, x1, x2)

inst_179:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xd0b7f9b429ef3 and fs2 == 0 and fe2 == 0x5f8 and fm2 == 0x87fe27ff3fe2f and fs3 == 1 and fe3 == 0x7f5 and fm3 == 0x36642e8a718b9 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fad0b7f9b429ef3; op2val:0x5f887fe27ff3fe2f;
op3val:0xff536642e8a718b9; valaddr_reg:x3; val_offset:537*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 537*FLEN/8, x4, x1, x2)

inst_180:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xd0dd93a77236c and fs2 == 0 and fe2 == 0x5f9 and fm2 == 0x1292a3e2f1241 and fs3 == 1 and fe3 == 0x7f5 and fm3 == 0xdc7f988e257eb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fad0dd93a77236c; op2val:0x5f91292a3e2f1241;
op3val:0xff5dc7f988e257eb; valaddr_reg:x3; val_offset:540*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 540*FLEN/8, x4, x1, x2)

inst_181:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xd486b68b34be3 and fs2 == 0 and fe2 == 0x5f7 and fm2 == 0x3cc532c905347 and fs3 == 1 and fe3 == 0x7f3 and fm3 == 0x7a850c645ac99 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fad486b68b34be3; op2val:0x5f73cc532c905347;
op3val:0xff37a850c645ac99; valaddr_reg:x3; val_offset:543*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 543*FLEN/8, x4, x1, x2)

inst_182:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xd98396dfe04dc and fs2 == 0 and fe2 == 0x5fa and fm2 == 0x006e3d60fc2f8 and fs3 == 1 and fe3 == 0x7f6 and fm3 == 0xb25b0d9cfb0d4 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fad98396dfe04dc; op2val:0x5fa006e3d60fc2f8;
op3val:0xff6b25b0d9cfb0d4; valaddr_reg:x3; val_offset:546*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 546*FLEN/8, x4, x1, x2)

inst_183:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xdedbc42e4ee38 and fs2 == 0 and fe2 == 0x5f7 and fm2 == 0x398aa070366df and fs3 == 1 and fe3 == 0x7f4 and fm3 == 0x0152356c26a6b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fadedbc42e4ee38; op2val:0x5f7398aa070366df;
op3val:0xff40152356c26a6b; valaddr_reg:x3; val_offset:549*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 549*FLEN/8, x4, x1, x2)

inst_184:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xdf0325e8750cf and fs2 == 0 and fe2 == 0x5fa and fm2 == 0x81cf3ffe0cb08 and fs3 == 1 and fe3 == 0x7f7 and fm3 == 0x652cb8a3f1229 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fadf0325e8750cf; op2val:0x5fa81cf3ffe0cb08;
op3val:0xff7652cb8a3f1229; valaddr_reg:x3; val_offset:552*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 552*FLEN/8, x4, x1, x2)

inst_185:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xe8bc5f44515f5 and fs2 == 0 and fe2 == 0x5f5 and fm2 == 0x9f3f7053b60bf and fs3 == 1 and fe3 == 0x7f2 and fm3 == 0x56c11a9ac3ca8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fae8bc5f44515f5; op2val:0x5f59f3f7053b60bf;
op3val:0xff256c11a9ac3ca8; valaddr_reg:x3; val_offset:555*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 555*FLEN/8, x4, x1, x2)

inst_186:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xe8ce066e96229 and fs2 == 0 and fe2 == 0x5fa and fm2 == 0x9bd3c29ad0568 and fs3 == 1 and fe3 == 0x7f7 and fm3 == 0x7bd01baa868ed and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fae8ce066e96229; op2val:0x5fa9bd3c29ad0568;
op3val:0xff77bd01baa868ed; valaddr_reg:x3; val_offset:558*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 558*FLEN/8, x4, x1, x2)

inst_187:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xe97d52f73d2ed and fs2 == 0 and fe2 == 0x5fa and fm2 == 0xe549a4f656ebe and fs3 == 1 and fe3 == 0x7f6 and fm3 == 0xea3051c4d8ded and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fae97d52f73d2ed; op2val:0x5fae549a4f656ebe;
op3val:0xff6ea3051c4d8ded; valaddr_reg:x3; val_offset:561*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 561*FLEN/8, x4, x1, x2)

inst_188:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xea594439af755 and fs2 == 0 and fe2 == 0x5f9 and fm2 == 0x6a7fe63869fed and fs3 == 1 and fe3 == 0x7f6 and fm3 == 0x00525eda1d5a7 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faea594439af755; op2val:0x5f96a7fe63869fed;
op3val:0xff600525eda1d5a7; valaddr_reg:x3; val_offset:564*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 564*FLEN/8, x4, x1, x2)

inst_189:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xeb61e2d5d3c7a and fs2 == 0 and fe2 == 0x5f9 and fm2 == 0x095092a183e33 and fs3 == 1 and fe3 == 0x7f5 and fm3 == 0x98f4fb01003a1 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faeb61e2d5d3c7a; op2val:0x5f9095092a183e33;
op3val:0xff598f4fb01003a1; valaddr_reg:x3; val_offset:567*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 567*FLEN/8, x4, x1, x2)

inst_190:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xed1da04d72f12 and fs2 == 0 and fe2 == 0x5fa and fm2 == 0x7536733396cf8 and fs3 == 1 and fe3 == 0x7f7 and fm3 == 0x01ad09ae1295b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faed1da04d72f12; op2val:0x5fa7536733396cf8;
op3val:0xff701ad09ae1295b; valaddr_reg:x3; val_offset:570*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 570*FLEN/8, x4, x1, x2)

inst_191:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xef0f52001dd13 and fs2 == 0 and fe2 == 0x5f9 and fm2 == 0x774135045aad3 and fs3 == 1 and fe3 == 0x7f6 and fm3 == 0x1705e64f208a1 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faef0f52001dd13; op2val:0x5f9774135045aad3;
op3val:0xff61705e64f208a1; valaddr_reg:x3; val_offset:573*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 573*FLEN/8, x4, x1, x2)

inst_192:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf849379fb9b6b and fs2 == 0 and fe2 == 0x5fa and fm2 == 0xfa550bd9aed1a and fs3 == 1 and fe3 == 0x7f7 and fm3 == 0xcb0130986796b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf849379fb9b6b; op2val:0x5fafa550bd9aed1a;
op3val:0xff7cb0130986796b; valaddr_reg:x3; val_offset:576*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 576*FLEN/8, x4, x1, x2)

inst_193:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfa2ea1f3d3ef9 and fs2 == 0 and fe2 == 0x5fa and fm2 == 0x4bd16a0267938 and fs3 == 1 and fe3 == 0x7f6 and fm3 == 0x7234e530ad7c1 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafa2ea1f3d3ef9; op2val:0x5fa4bd16a0267938;
op3val:0xff67234e530ad7c1; valaddr_reg:x3; val_offset:579*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 579*FLEN/8, x4, x1, x2)

inst_194:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfd32694fcaecb and fs2 == 0 and fe2 == 0x5f8 and fm2 == 0xdc1b3eb6c004b and fs3 == 1 and fe3 == 0x7f5 and fm3 == 0x560832458212e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafd32694fcaecb; op2val:0x5f8dc1b3eb6c004b;
op3val:0xff5560832458212e; valaddr_reg:x3; val_offset:582*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 582*FLEN/8, x4, x1, x2)

inst_195:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfd58fd60948f9 and fs2 == 0 and fe2 == 0x5fa and fm2 == 0xe61729d7cfd5e and fs3 == 1 and fe3 == 0x7f7 and fm3 == 0x755c52dea6fce and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafd58fd60948f9; op2val:0x5fae61729d7cfd5e;
op3val:0xff7755c52dea6fce; valaddr_reg:x3; val_offset:585*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 585*FLEN/8, x4, x1, x2)

inst_196:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfd8213d6f2891 and fs2 == 0 and fe2 == 0x5fa and fm2 == 0x90cd3970eae8a and fs3 == 1 and fe3 == 0x7f7 and fm3 == 0x39c8bbd2038aa and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafd8213d6f2891; op2val:0x5fa90cd3970eae8a;
op3val:0xff739c8bbd2038aa; valaddr_reg:x3; val_offset:588*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 588*FLEN/8, x4, x1, x2)

inst_197:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfea4d203770af and fs2 == 0 and fe2 == 0x5f9 and fm2 == 0x91b7d2621f217 and fs3 == 1 and fe3 == 0x7f6 and fm3 == 0x273d98180e11c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafea4d203770af; op2val:0x5f991b7d2621f217;
op3val:0xff6273d98180e11c; valaddr_reg:x3; val_offset:591*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 591*FLEN/8, x4, x1, x2)

inst_198:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfed8d422e59b9 and fs2 == 0 and fe2 == 0x5f8 and fm2 == 0x2c08bdce69f77 and fs3 == 1 and fe3 == 0x7f4 and fm3 == 0xa81f1c102123e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafed8d422e59b9; op2val:0x5f82c08bdce69f77;
op3val:0xff4a81f1c102123e; valaddr_reg:x3; val_offset:594*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 594*FLEN/8, x4, x1, x2)

inst_199:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xff5373e0e112c and fs2 == 0 and fe2 == 0x5fa and fm2 == 0x59556723d53e2 and fs3 == 1 and fe3 == 0x7f6 and fm3 == 0x9797ced3a8004 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faff5373e0e112c; op2val:0x5fa59556723d53e2;
op3val:0xff69797ced3a8004; valaddr_reg:x3; val_offset:597*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 597*FLEN/8, x4, x1, x2)

inst_200:
// fs1 == 0 and fe1 == 0x5f2 and fm1 == 0x8e1a79f69deff and fs2 == 0 and fe2 == 0x5f9 and fm2 == 0xf112c2c43eca3 and fs3 == 1 and fe3 == 0x7ee and fm3 == 0x6308e242db948 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f28e1a79f69deff; op2val:0x5f9f112c2c43eca3;
op3val:0xfee6308e242db948; valaddr_reg:x3; val_offset:600*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 600*FLEN/8, x4, x1, x2)

inst_201:
// fs1 == 0 and fe1 == 0x5f5 and fm1 == 0x0197267f1985f and fs2 == 0 and fe2 == 0x5f9 and fm2 == 0xce41f387adc6f and fs3 == 1 and fe3 == 0x7f0 and fm3 == 0x4812b6bf8d6c3 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f50197267f1985f; op2val:0x5f9ce41f387adc6f;
op3val:0xff04812b6bf8d6c3; valaddr_reg:x3; val_offset:603*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 603*FLEN/8, x4, x1, x2)

inst_202:
// fs1 == 0 and fe1 == 0x5f5 and fm1 == 0x3832e6fea9a3f and fs2 == 0 and fe2 == 0x5fa and fm2 == 0x5ee10a5a625fc and fs3 == 1 and fe3 == 0x7f0 and fm3 == 0xd731b74a534ea and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f53832e6fea9a3f; op2val:0x5fa5ee10a5a625fc;
op3val:0xff0d731b74a534ea; valaddr_reg:x3; val_offset:606*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 606*FLEN/8, x4, x1, x2)

inst_203:
// fs1 == 0 and fe1 == 0x5f5 and fm1 == 0x5a7002fc1a6bf and fs2 == 0 and fe2 == 0x5f9 and fm2 == 0x05d39d105b541 and fs3 == 1 and fe3 == 0x7f0 and fm3 == 0x4141940cdbe5f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f55a7002fc1a6bf; op2val:0x5f905d39d105b541;
op3val:0xff04141940cdbe5f; valaddr_reg:x3; val_offset:609*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 609*FLEN/8, x4, x1, x2)

inst_204:
// fs1 == 0 and fe1 == 0x5f5 and fm1 == 0xc1a812e98063f and fs2 == 0 and fe2 == 0x5f9 and fm2 == 0xdc0d22f746bf5 and fs3 == 1 and fe3 == 0x7f1 and fm3 == 0x139d86656d299 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f5c1a812e98063f; op2val:0x5f9dc0d22f746bf5;
op3val:0xff1139d86656d299; valaddr_reg:x3; val_offset:612*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 612*FLEN/8, x4, x1, x2)

inst_205:
// fs1 == 0 and fe1 == 0x5f5 and fm1 == 0xf59904d0ce0bf and fs2 == 0 and fe2 == 0x5fa and fm2 == 0x1a7baab01ceb9 and fs3 == 1 and fe3 == 0x7f1 and fm3 == 0x4ca65e448b1e4 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f5f59904d0ce0bf; op2val:0x5fa1a7baab01ceb9;
op3val:0xff14ca65e448b1e4; valaddr_reg:x3; val_offset:615*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 615*FLEN/8, x4, x1, x2)

inst_206:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x22cfa989fca0f and fs2 == 0 and fe2 == 0x5f9 and fm2 == 0xa2892d94829ad and fs3 == 1 and fe3 == 0x7f1 and fm3 == 0x08274724f19ab and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f622cfa989fca0f; op2val:0x5f9a2892d94829ad;
op3val:0xff108274724f19ab; valaddr_reg:x3; val_offset:618*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 618*FLEN/8, x4, x1, x2)

inst_207:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x38aee2c19215f and fs2 == 0 and fe2 == 0x5f8 and fm2 == 0x912bfdff44ba7 and fs3 == 1 and fe3 == 0x7f0 and fm3 == 0x0f8b22ffa1987 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f638aee2c19215f; op2val:0x5f8912bfdff44ba7;
op3val:0xff00f8b22ffa1987; valaddr_reg:x3; val_offset:621*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 621*FLEN/8, x4, x1, x2)

inst_208:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x7a1eff83f19af and fs2 == 0 and fe2 == 0x5f7 and fm2 == 0xbb68e4e714e57 and fs3 == 1 and fe3 == 0x7f0 and fm3 == 0x46b0821802661 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f67a1eff83f19af; op2val:0x5f7bb68e4e714e57;
op3val:0xff046b0821802661; valaddr_reg:x3; val_offset:624*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 624*FLEN/8, x4, x1, x2)

inst_209:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xb3756a76d237f and fs2 == 0 and fe2 == 0x5f8 and fm2 == 0xb8c3b0a05a317 and fs3 == 1 and fe3 == 0x7f1 and fm3 == 0x027fcc8b591c8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6b3756a76d237f; op2val:0x5f8b8c3b0a05a317;
op3val:0xff1027fcc8b591c8; valaddr_reg:x3; val_offset:627*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 627*FLEN/8, x4, x1, x2)

inst_210:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xf959d372fdf5f and fs2 == 0 and fe2 == 0x5f8 and fm2 == 0x26ffb22d6ee1f and fs3 == 1 and fe3 == 0x7f1 and fm3 == 0x0d733a9338e84 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6f959d372fdf5f; op2val:0x5f826ffb22d6ee1f;
op3val:0xff10d733a9338e84; valaddr_reg:x3; val_offset:630*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 630*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(6856978542721883903,64,FLEN)
NAN_BOXED(6856978542721883903,64,FLEN)
NAN_BOXED(18367421517327612232,64,FLEN)
NAN_BOXED(6868017410900858975,64,FLEN)
NAN_BOXED(6889632352712711279,64,FLEN)
NAN_BOXED(6868017410900858975,64,FLEN)
NAN_BOXED(6868978092139518527,64,FLEN)
NAN_BOXED(6868978092139518527,64,FLEN)
NAN_BOXED(6868978092139518527,64,FLEN)
NAN_BOXED(6869580425866618559,64,FLEN)
NAN_BOXED(6886106333150819649,64,FLEN)
NAN_BOXED(6869580425866618559,64,FLEN)
NAN_BOXED(6871396273595352639,64,FLEN)
NAN_BOXED(6871396273595352639,64,FLEN)
NAN_BOXED(6871396273595352639,64,FLEN)
NAN_BOXED(6872310032693518527,64,FLEN)
NAN_BOXED(6890973325028347577,64,FLEN)
NAN_BOXED(18380538518176313828,64,FLEN)
NAN_BOXED(6873105436134853135,64,FLEN)
NAN_BOXED(6873105436134853135,64,FLEN)
NAN_BOXED(18379333515944597931,64,FLEN)
NAN_BOXED(6873490211844202847,64,FLEN)
NAN_BOXED(6884054120717896615,64,FLEN)
NAN_BOXED(6884054120717896615,64,FLEN)
NAN_BOXED(6874641408238492079,64,FLEN)
NAN_BOXED(6880293578056224343,64,FLEN)
NAN_BOXED(18375930062244423265,64,FLEN)
NAN_BOXED(6875650101426856831,64,FLEN)
NAN_BOXED(6884750640565035799,64,FLEN)
NAN_BOXED(18379234045951578568,64,FLEN)
NAN_BOXED(6876457481145628399,64,FLEN)
NAN_BOXED(6891884720061289854,64,FLEN)
NAN_BOXED(18386228886701171019,64,FLEN)
NAN_BOXED(6876879658486325087,64,FLEN)
NAN_BOXED(6882186304987524639,64,FLEN)
NAN_BOXED(6882186304987524639,64,FLEN)
NAN_BOXED(6877309317390656447,64,FLEN)
NAN_BOXED(6878700746731809071,64,FLEN)
NAN_BOXED(18376474727215013952,64,FLEN)
NAN_BOXED(6877810111762114079,64,FLEN)
NAN_BOXED(6886622793290576215,64,FLEN)
NAN_BOXED(18382989580341639487,64,FLEN)
NAN_BOXED(6877924399112573447,64,FLEN)
NAN_BOXED(6893393336470447975,64,FLEN)
NAN_BOXED(18391384326120585971,64,FLEN)
NAN_BOXED(6878608703139727455,64,FLEN)
NAN_BOXED(6893529335121912896,64,FLEN)
NAN_BOXED(18392563855248146315,64,FLEN)
NAN_BOXED(6879251081696227423,64,FLEN)
NAN_BOXED(6893233505647153512,64,FLEN)
NAN_BOXED(18391104385781493980,64,FLEN)
NAN_BOXED(6879666681105886751,64,FLEN)
NAN_BOXED(6885565787734577915,64,FLEN)
NAN_BOXED(18382804867596339859,64,FLEN)
NAN_BOXED(6880568544925194687,64,FLEN)
NAN_BOXED(6890875763519806947,64,FLEN)
NAN_BOXED(18392210993258200399,64,FLEN)
NAN_BOXED(6880889217432745855,64,FLEN)
NAN_BOXED(6880292217633406967,64,FLEN)
NAN_BOXED(18378992708761405692,64,FLEN)
NAN_BOXED(6881264564829296871,64,FLEN)
NAN_BOXED(6881267491779069623,64,FLEN)
NAN_BOXED(18379302899062486661,64,FLEN)
NAN_BOXED(6881574296250802947,64,FLEN)
NAN_BOXED(6871564792521863871,64,FLEN)
NAN_BOXED(18371225465574034737,64,FLEN)
NAN_BOXED(6881615901639388811,64,FLEN)
NAN_BOXED(6894447038552828727,64,FLEN)
NAN_BOXED(18395470560110732260,64,FLEN)
NAN_BOXED(6881964033942143083,64,FLEN)
NAN_BOXED(6891519151881780238,64,FLEN)
NAN_BOXED(18392419576809514829,64,FLEN)
NAN_BOXED(6881991430917705055,64,FLEN)
NAN_BOXED(6890526875579001485,64,FLEN)
NAN_BOXED(18389012576618426049,64,FLEN)
NAN_BOXED(6882039444806942835,64,FLEN)
NAN_BOXED(6890365168614839943,64,FLEN)
NAN_BOXED(18389310809994738188,64,FLEN)
NAN_BOXED(6882061176616427127,64,FLEN)
NAN_BOXED(6876172435632200735,64,FLEN)
NAN_BOXED(18374938395430469895,64,FLEN)
NAN_BOXED(6882119924283262303,64,FLEN)
NAN_BOXED(6884358957722051143,64,FLEN)
NAN_BOXED(18384428795972582517,64,FLEN)
NAN_BOXED(6882212340620029859,64,FLEN)
NAN_BOXED(6889447881674079773,64,FLEN)
NAN_BOXED(18388431080749816511,64,FLEN)
NAN_BOXED(6882452115357726635,64,FLEN)
NAN_BOXED(6873216344666718143,64,FLEN)
NAN_BOXED(18374190328069728403,64,FLEN)
NAN_BOXED(6882657413925810187,64,FLEN)
NAN_BOXED(6883616519257756951,64,FLEN)
NAN_BOXED(18386227414184999789,64,FLEN)
NAN_BOXED(6882803212613270323,64,FLEN)
NAN_BOXED(6879401332961323919,64,FLEN)
NAN_BOXED(18381968299305548989,64,FLEN)
NAN_BOXED(6882803920151209967,64,FLEN)
NAN_BOXED(6892795295161742799,64,FLEN)
NAN_BOXED(18395707443527549376,64,FLEN)
NAN_BOXED(6882853837749477747,64,FLEN)
NAN_BOXED(6888375667552958653,64,FLEN)
NAN_BOXED(18390242104977569895,64,FLEN)
NAN_BOXED(6882869207829901383,64,FLEN)
NAN_BOXED(6880091176316863335,64,FLEN)
NAN_BOXED(18383691707938488088,64,FLEN)
NAN_BOXED(6882995324172245575,64,FLEN)
NAN_BOXED(6889462756373990129,64,FLEN)
NAN_BOXED(18390545025346507688,64,FLEN)
NAN_BOXED(6883189296371463547,64,FLEN)
NAN_BOXED(6892063562632003931,64,FLEN)
NAN_BOXED(18392708881960263608,64,FLEN)
NAN_BOXED(6883545227961984411,64,FLEN)
NAN_BOXED(6885338213694504875,64,FLEN)
NAN_BOXED(18386572923591397004,64,FLEN)
NAN_BOXED(6883927098971009003,64,FLEN)
NAN_BOXED(6891151919675235103,64,FLEN)
NAN_BOXED(18393710301084292844,64,FLEN)
NAN_BOXED(6883998603539609939,64,FLEN)
NAN_BOXED(6891226050385676988,64,FLEN)
NAN_BOXED(18394875731554158974,64,FLEN)
NAN_BOXED(6884188232561266075,64,FLEN)
NAN_BOXED(6894277605118599170,64,FLEN)
NAN_BOXED(18398719118224566515,64,FLEN)
NAN_BOXED(6884382444117484659,64,FLEN)
NAN_BOXED(6894711817437341499,64,FLEN)
NAN_BOXED(18395857747565085317,64,FLEN)
NAN_BOXED(6884579933953779799,64,FLEN)
NAN_BOXED(6893935405616190851,64,FLEN)
NAN_BOXED(18397451799763717192,64,FLEN)
NAN_BOXED(6885161351928049071,64,FLEN)
NAN_BOXED(6893889553676489269,64,FLEN)
NAN_BOXED(18396105023885669378,64,FLEN)
NAN_BOXED(6885388235794644039,64,FLEN)
NAN_BOXED(6889742506343107681,64,FLEN)
NAN_BOXED(18392927938460308847,64,FLEN)
NAN_BOXED(6885527160236506487,64,FLEN)
NAN_BOXED(6893511598277716639,64,FLEN)
NAN_BOXED(18397642324509414383,64,FLEN)
NAN_BOXED(6885698541307080699,64,FLEN)
NAN_BOXED(6890173515247235297,64,FLEN)
NAN_BOXED(18394727975362548877,64,FLEN)
NAN_BOXED(6885877059110912215,64,FLEN)
NAN_BOXED(6885646728341883303,64,FLEN)
NAN_BOXED(18390561581242896247,64,FLEN)
NAN_BOXED(6886017895204435985,64,FLEN)
NAN_BOXED(6891329222827683353,64,FLEN)
NAN_BOXED(18396873601943887499,64,FLEN)
NAN_BOXED(6886070323391465231,64,FLEN)
NAN_BOXED(6891102757318671231,64,FLEN)
NAN_BOXED(18395788293993155499,64,FLEN)
NAN_BOXED(6886345067882063119,64,FLEN)
NAN_BOXED(6890744352947475083,64,FLEN)
NAN_BOXED(18395732406660053395,64,FLEN)
NAN_BOXED(6886498983615494915,64,FLEN)
NAN_BOXED(6894630517152586057,64,FLEN)
NAN_BOXED(18398024503430070532,64,FLEN)
NAN_BOXED(6886628089044946259,64,FLEN)
NAN_BOXED(6891748676089827616,64,FLEN)
NAN_BOXED(18395723394754835286,64,FLEN)
NAN_BOXED(6886716853969087909,64,FLEN)
NAN_BOXED(6894862600530219896,64,FLEN)
NAN_BOXED(18399741305492970758,64,FLEN)
NAN_BOXED(6886753336742209907,64,FLEN)
NAN_BOXED(6891610687497062394,64,FLEN)
NAN_BOXED(18398163906356109030,64,FLEN)
NAN_BOXED(6886811215268359497,64,FLEN)
NAN_BOXED(6864977561367875839,64,FLEN)
NAN_BOXED(18371184878469222097,64,FLEN)
NAN_BOXED(6886839383440224197,64,FLEN)
NAN_BOXED(6885344490414251659,64,FLEN)
NAN_BOXED(18391960995797842137,64,FLEN)
NAN_BOXED(6886857601208393871,64,FLEN)
NAN_BOXED(6889261974205913171,64,FLEN)
NAN_BOXED(18394788519835244002,64,FLEN)
NAN_BOXED(6887011237940842035,64,FLEN)
NAN_BOXED(6893575387211231774,64,FLEN)
NAN_BOXED(18400449262792865466,64,FLEN)
NAN_BOXED(6887056419560651041,64,FLEN)
NAN_BOXED(6891850090215413220,64,FLEN)
NAN_BOXED(18398051900772252589,64,FLEN)
NAN_BOXED(6887076824118798037,64,FLEN)
NAN_BOXED(6894626977944334570,64,FLEN)
NAN_BOXED(18401759038171476290,64,FLEN)
NAN_BOXED(6887198291637111757,64,FLEN)
NAN_BOXED(6879846444350981911,64,FLEN)
NAN_BOXED(18385925138425840737,64,FLEN)
NAN_BOXED(6887199094979032569,64,FLEN)
NAN_BOXED(6894346095854250505,64,FLEN)
NAN_BOXED(18398480703218843603,64,FLEN)
NAN_BOXED(6887235862201450935,64,FLEN)
NAN_BOXED(6878069248790755607,64,FLEN)
NAN_BOXED(18384365004075489779,64,FLEN)
NAN_BOXED(6887348915734345947,64,FLEN)
NAN_BOXED(6892305011386552616,64,FLEN)
NAN_BOXED(18397471938850265742,64,FLEN)
NAN_BOXED(6887357484913361535,64,FLEN)
NAN_BOXED(6881921673619678347,64,FLEN)
NAN_BOXED(18388530451039894317,64,FLEN)
NAN_BOXED(6887561320674447643,64,FLEN)
NAN_BOXED(6888215800770923817,64,FLEN)
NAN_BOXED(18396186069470541018,64,FLEN)
NAN_BOXED(6887574933915368329,64,FLEN)
NAN_BOXED(6872366457195933183,64,FLEN)
NAN_BOXED(18378859354346654611,64,FLEN)
NAN_BOXED(6887665717013837541,64,FLEN)
NAN_BOXED(6893917387198912975,64,FLEN)
NAN_BOXED(18402420733702267485,64,FLEN)
NAN_BOXED(6887816821068776561,64,FLEN)
NAN_BOXED(6883234593183770523,64,FLEN)
NAN_BOXED(18388710702875879849,64,FLEN)
NAN_BOXED(6887873490228421805,64,FLEN)
NAN_BOXED(6894839681707382014,64,FLEN)
NAN_BOXED(18403337398158337330,64,FLEN)
NAN_BOXED(6887875962290774479,64,FLEN)
NAN_BOXED(6893955844385380846,64,FLEN)
NAN_BOXED(18402551014674680818,64,FLEN)
NAN_BOXED(6887941902426784391,64,FLEN)
NAN_BOXED(6889733454106310957,64,FLEN)
NAN_BOXED(18397996449230920363,64,FLEN)
NAN_BOXED(6887970548532233617,64,FLEN)
NAN_BOXED(6894269235493829694,64,FLEN)
NAN_BOXED(18402795164117860409,64,FLEN)
NAN_BOXED(6888119338041605051,64,FLEN)
NAN_BOXED(6888619120726588241,64,FLEN)
NAN_BOXED(18394343049311616383,64,FLEN)
NAN_BOXED(6888345970864786979,64,FLEN)
NAN_BOXED(6894036355589425207,64,FLEN)
NAN_BOXED(18401861806842680314,64,FLEN)
NAN_BOXED(6888387660386382591,64,FLEN)
NAN_BOXED(6889477014905070693,64,FLEN)
NAN_BOXED(18398405429826815083,64,FLEN)
NAN_BOXED(6888445968060462561,64,FLEN)
NAN_BOXED(6874209586766904239,64,FLEN)
NAN_BOXED(18383962659321860637,64,FLEN)
NAN_BOXED(6888546126832926837,64,FLEN)
NAN_BOXED(6890781843111838327,64,FLEN)
NAN_BOXED(18399618970950558559,64,FLEN)
NAN_BOXED(6888579034455029559,64,FLEN)
NAN_BOXED(6890640760716121332,64,FLEN)
NAN_BOXED(18396533936172688030,64,FLEN)
NAN_BOXED(6888672768469135347,64,FLEN)
NAN_BOXED(6893189232373955201,64,FLEN)
NAN_BOXED(18402387029749542068,64,FLEN)
NAN_BOXED(6888755059170460467,64,FLEN)
NAN_BOXED(6892011378870566056,64,FLEN)
NAN_BOXED(18401988164920711671,64,FLEN)
NAN_BOXED(6889030544427735291,64,FLEN)
NAN_BOXED(6890733191113689869,64,FLEN)
NAN_BOXED(18397371324771905352,64,FLEN)
NAN_BOXED(6889061874298125571,64,FLEN)
NAN_BOXED(6868683553644239743,64,FLEN)
NAN_BOXED(18376981065323150920,64,FLEN)
NAN_BOXED(6889073439666216879,64,FLEN)
NAN_BOXED(6886007004913373133,64,FLEN)
NAN_BOXED(18393285098176184503,64,FLEN)
NAN_BOXED(6889120626045016711,64,FLEN)
NAN_BOXED(6890743327918961069,64,FLEN)
NAN_BOXED(18396255522009193414,64,FLEN)
NAN_BOXED(6889242411609653029,64,FLEN)
NAN_BOXED(6893018668550483993,64,FLEN)
NAN_BOXED(18399531212176681261,64,FLEN)
NAN_BOXED(6889258485148260059,64,FLEN)
NAN_BOXED(6888589469657459261,64,FLEN)
NAN_BOXED(18397961440870147146,64,FLEN)
NAN_BOXED(6889514011256437721,64,FLEN)
NAN_BOXED(6886332426238667885,64,FLEN)
NAN_BOXED(18392601063750827794,64,FLEN)
NAN_BOXED(6889689147495870445,64,FLEN)
NAN_BOXED(6888918375781008661,64,FLEN)
NAN_BOXED(18397842562970978854,64,FLEN)
NAN_BOXED(6889803804839264013,64,FLEN)
NAN_BOXED(6892337973878067938,64,FLEN)
NAN_BOXED(18400900255155712179,64,FLEN)
NAN_BOXED(6889805087478014723,64,FLEN)
NAN_BOXED(6891117262936690290,64,FLEN)
NAN_BOXED(18401731377743208112,64,FLEN)
NAN_BOXED(6889812194750185973,64,FLEN)
NAN_BOXED(6890780849860503102,64,FLEN)
NAN_BOXED(18399269303107191231,64,FLEN)
NAN_BOXED(6889844939243260119,64,FLEN)
NAN_BOXED(6892791480019138485,64,FLEN)
NAN_BOXED(18401473477408214940,64,FLEN)
NAN_BOXED(6890012019137806245,64,FLEN)
NAN_BOXED(6894668552472672323,64,FLEN)
NAN_BOXED(18402652574857826738,64,FLEN)
NAN_BOXED(6890017069160175351,64,FLEN)
NAN_BOXED(6885122118048991551,64,FLEN)
NAN_BOXED(18394577457200599236,64,FLEN)
NAN_BOXED(6890059780943070099,64,FLEN)
NAN_BOXED(6874876919396112607,64,FLEN)
NAN_BOXED(18384989842914030750,64,FLEN)
NAN_BOXED(6890252759316360065,64,FLEN)
NAN_BOXED(6884499516045365319,64,FLEN)
NAN_BOXED(18393988848208698301,64,FLEN)
NAN_BOXED(6890305478984056569,64,FLEN)
NAN_BOXED(6886173261816886271,64,FLEN)
NAN_BOXED(18394719168042648007,64,FLEN)
NAN_BOXED(6890530905535990864,64,FLEN)
NAN_BOXED(6892218647371952043,64,FLEN)
NAN_BOXED(18403291706032550990,64,FLEN)
NAN_BOXED(6890533557133336141,64,FLEN)
NAN_BOXED(6871420185016327423,64,FLEN)
NAN_BOXED(18378800166577758617,64,FLEN)
NAN_BOXED(6890545699818024548,64,FLEN)
NAN_BOXED(6890667287452813442,64,FLEN)
NAN_BOXED(18400467621387291984,64,FLEN)
NAN_BOXED(6890581821993149497,64,FLEN)
NAN_BOXED(6894862105318856309,64,FLEN)
NAN_BOXED(18405912512082265233,64,FLEN)
NAN_BOXED(6890599046633151401,64,FLEN)
NAN_BOXED(6890191427157953731,64,FLEN)
NAN_BOXED(18398930270994028528,64,FLEN)
NAN_BOXED(6890611024757904792,64,FLEN)
NAN_BOXED(6891237700320200956,64,FLEN)
NAN_BOXED(18398329465612206365,64,FLEN)
NAN_BOXED(6890614540413134214,64,FLEN)
NAN_BOXED(6894417944696891203,64,FLEN)
NAN_BOXED(18404196067209360085,64,FLEN)
NAN_BOXED(6890680455383202267,64,FLEN)
NAN_BOXED(6894303517133598696,64,FLEN)
NAN_BOXED(18404144614339431064,64,FLEN)
NAN_BOXED(6890694206439657139,64,FLEN)
NAN_BOXED(6889866173335306279,64,FLEN)
NAN_BOXED(18398406635095709198,64,FLEN)
NAN_BOXED(6890708854859613855,64,FLEN)
NAN_BOXED(6893695465067395244,64,FLEN)
NAN_BOXED(18402205992191957816,64,FLEN)
NAN_BOXED(6890713558801821777,64,FLEN)
NAN_BOXED(6892145350520154279,64,FLEN)
NAN_BOXED(18403227296557399565,64,FLEN)
NAN_BOXED(6890714506193707612,64,FLEN)
NAN_BOXED(6893618282213356914,64,FLEN)
NAN_BOXED(18402532938548122513,64,FLEN)
NAN_BOXED(6890854830099147914,64,FLEN)
NAN_BOXED(6894242743560042787,64,FLEN)
NAN_BOXED(18401982099839069002,64,FLEN)
NAN_BOXED(6891052458755600868,64,FLEN)
NAN_BOXED(6885503873301122155,64,FLEN)
NAN_BOXED(18393079440814112738,64,FLEN)
NAN_BOXED(6891070044359777068,64,FLEN)
NAN_BOXED(6890017075913150769,64,FLEN)
NAN_BOXED(18398853962367671001,64,FLEN)
NAN_BOXED(6891284097643193828,64,FLEN)
NAN_BOXED(6883895944720825427,64,FLEN)
NAN_BOXED(18395494443534374727,64,FLEN)
NAN_BOXED(6891299565419392572,64,FLEN)
NAN_BOXED(6887117918557499841,64,FLEN)
NAN_BOXED(18396175861469012196,64,FLEN)
NAN_BOXED(6891364592564859657,64,FLEN)
NAN_BOXED(6893946536337764208,64,FLEN)
NAN_BOXED(18402784597132256654,64,FLEN)
NAN_BOXED(6891385956584962170,64,FLEN)
NAN_BOXED(6891300068742835589,64,FLEN)
NAN_BOXED(18402073632136729547,64,FLEN)
NAN_BOXED(6891469414372513680,64,FLEN)
NAN_BOXED(6891238850639272088,64,FLEN)
NAN_BOXED(18400060361289252935,64,FLEN)
NAN_BOXED(6891545414865179273,64,FLEN)
NAN_BOXED(6892691312013582183,64,FLEN)
NAN_BOXED(18401784280910321103,64,FLEN)
NAN_BOXED(6891583661431081134,64,FLEN)
NAN_BOXED(6887207890983806873,64,FLEN)
NAN_BOXED(18399198427816381258,64,FLEN)
NAN_BOXED(6891612504134723087,64,FLEN)
NAN_BOXED(6893737463011035649,64,FLEN)
NAN_BOXED(18406293011240527200,64,FLEN)
NAN_BOXED(6891637224985072633,64,FLEN)
NAN_BOXED(6892688961962823582,64,FLEN)
NAN_BOXED(18404323398226014677,64,FLEN)
NAN_BOXED(6891652531170321805,64,FLEN)
NAN_BOXED(6884574010450282783,64,FLEN)
NAN_BOXED(18394742230306550399,64,FLEN)
NAN_BOXED(6891704546675069976,64,FLEN)
NAN_BOXED(6888710675916901189,64,FLEN)
NAN_BOXED(18401022578552183821,64,FLEN)
NAN_BOXED(6891721878179212764,64,FLEN)
NAN_BOXED(6865672517271187583,64,FLEN)
NAN_BOXED(18376403110503992691,64,FLEN)
NAN_BOXED(6891765017052255733,64,FLEN)
NAN_BOXED(6894377302870169160,64,FLEN)
NAN_BOXED(18404307538749426474,64,FLEN)
NAN_BOXED(6891784279253393261,64,FLEN)
NAN_BOXED(6884650939625798127,64,FLEN)
NAN_BOXED(18397383605453803118,64,FLEN)
NAN_BOXED(6891852758284802322,64,FLEN)
NAN_BOXED(6875161558820659775,64,FLEN)
NAN_BOXED(18388032995009990391,64,FLEN)
NAN_BOXED(6891934188824626157,64,FLEN)
NAN_BOXED(6892801289606775372,64,FLEN)
NAN_BOXED(18403850539818814747,64,FLEN)
NAN_BOXED(6892036225422218126,64,FLEN)
NAN_BOXED(6887051123564428825,64,FLEN)
NAN_BOXED(18398671139035654306,64,FLEN)
NAN_BOXED(6892036531313111496,64,FLEN)
NAN_BOXED(6879116776282561175,64,FLEN)
NAN_BOXED(18392439958848850609,64,FLEN)
NAN_BOXED(6892081909517541936,64,FLEN)
NAN_BOXED(6887533084018518131,64,FLEN)
NAN_BOXED(18397858591673824433,64,FLEN)
NAN_BOXED(6892114950628738782,64,FLEN)
NAN_BOXED(6888233802527379611,64,FLEN)
NAN_BOXED(18398896253467544390,64,FLEN)
NAN_BOXED(6892120981491153960,64,FLEN)
NAN_BOXED(6894277665387599255,64,FLEN)
NAN_BOXED(18406115802525681162,64,FLEN)
NAN_BOXED(6892138624722227730,64,FLEN)
NAN_BOXED(6889405774412470191,64,FLEN)
NAN_BOXED(18400906764048025461,64,FLEN)
NAN_BOXED(6892242689751510593,64,FLEN)
NAN_BOXED(6870596121733928511,64,FLEN)
NAN_BOXED(18382857775004132037,64,FLEN)
NAN_BOXED(6892336693233117871,64,FLEN)
NAN_BOXED(6892300366628530514,64,FLEN)
NAN_BOXED(18404545502643605529,64,FLEN)
NAN_BOXED(6892403085749832738,64,FLEN)
NAN_BOXED(6894440602845710711,64,FLEN)
NAN_BOXED(18406819130453673395,64,FLEN)
NAN_BOXED(6892413141420898669,64,FLEN)
NAN_BOXED(6893959177213673404,64,FLEN)
NAN_BOXED(18406378509315074680,64,FLEN)
NAN_BOXED(6892447263701762436,64,FLEN)
NAN_BOXED(6886134624106005853,64,FLEN)
NAN_BOXED(18398982995030410899,64,FLEN)
NAN_BOXED(6892461641725223559,64,FLEN)
NAN_BOXED(6872582825235877215,64,FLEN)
NAN_BOXED(18383659737330233418,64,FLEN)
NAN_BOXED(6892467259459573210,64,FLEN)
NAN_BOXED(6890571270121828546,64,FLEN)
NAN_BOXED(18403487452575776867,64,FLEN)
NAN_BOXED(6892522967907560918,64,FLEN)
NAN_BOXED(6885674725723434411,64,FLEN)
NAN_BOXED(18395104889286055201,64,FLEN)
NAN_BOXED(6892522997460206113,64,FLEN)
NAN_BOXED(6890266191047517607,64,FLEN)
NAN_BOXED(18400452737644334192,64,FLEN)
NAN_BOXED(6892574254547004943,64,FLEN)
NAN_BOXED(6891466191761247075,64,FLEN)
NAN_BOXED(18404796416668814722,64,FLEN)
NAN_BOXED(6892692215275520714,64,FLEN)
NAN_BOXED(6892768300373832659,64,FLEN)
NAN_BOXED(18406402872593560260,64,FLEN)
NAN_BOXED(6892719712898505493,64,FLEN)
NAN_BOXED(6891934936082898443,64,FLEN)
NAN_BOXED(18404994855109521099,64,FLEN)
NAN_BOXED(6892794895860497088,64,FLEN)
NAN_BOXED(6883254819992595371,64,FLEN)
NAN_BOXED(18396455724641539992,64,FLEN)
NAN_BOXED(6892810229836906395,64,FLEN)
NAN_BOXED(6893772051203261293,64,FLEN)
NAN_BOXED(18406713393814049991,64,FLEN)
NAN_BOXED(6892811267005866240,64,FLEN)
NAN_BOXED(6879421690502570767,64,FLEN)
NAN_BOXED(18391634873657841805,64,FLEN)
NAN_BOXED(6892863361350591976,64,FLEN)
NAN_BOXED(6889362216711171241,64,FLEN)
NAN_BOXED(18401822803822091885,64,FLEN)
NAN_BOXED(6892897530623076279,64,FLEN)
NAN_BOXED(6894892913157641171,64,FLEN)
NAN_BOXED(18405566433493168913,64,FLEN)
NAN_BOXED(6892903074091478525,64,FLEN)
NAN_BOXED(6892668677287501560,64,FLEN)
NAN_BOXED(18406563052803150951,64,FLEN)
NAN_BOXED(6892912358750213250,64,FLEN)
NAN_BOXED(6884185746775997307,64,FLEN)
NAN_BOXED(18397509813379502442,64,FLEN)
NAN_BOXED(6892922968118633786,64,FLEN)
NAN_BOXED(6891501609106562277,64,FLEN)
NAN_BOXED(18403094147250900355,64,FLEN)
NAN_BOXED(6893004333008041854,64,FLEN)
NAN_BOXED(6892520703561743913,64,FLEN)
NAN_BOXED(18404791579718769270,64,FLEN)
NAN_BOXED(6893068860996299965,64,FLEN)
NAN_BOXED(6888786891782149885,64,FLEN)
NAN_BOXED(18401991174499396379,64,FLEN)
NAN_BOXED(6893096299719389318,64,FLEN)
NAN_BOXED(6893786267484476741,64,FLEN)
NAN_BOXED(18404159035985682468,64,FLEN)
NAN_BOXED(6893165433076752721,64,FLEN)
NAN_BOXED(6885397540658500823,64,FLEN)
NAN_BOXED(18398740976773681923,64,FLEN)
NAN_BOXED(6893172128539978296,64,FLEN)
NAN_BOXED(6891889219280712293,64,FLEN)
NAN_BOXED(18403728901659290286,64,FLEN)
NAN_BOXED(6893190358206040140,64,FLEN)
NAN_BOXED(6891667918973257416,64,FLEN)
NAN_BOXED(18403115920224005847,64,FLEN)
NAN_BOXED(6893190924417125982,64,FLEN)
NAN_BOXED(6864081287464950207,64,FLEN)
NAN_BOXED(18374678869226150217,64,FLEN)
NAN_BOXED(6893211458247516703,64,FLEN)
NAN_BOXED(6892394422842980099,64,FLEN)
NAN_BOXED(18403630526185926253,64,FLEN)
NAN_BOXED(6893354334459834937,64,FLEN)
NAN_BOXED(6868425350310981631,64,FLEN)
NAN_BOXED(18382519622756556693,64,FLEN)
NAN_BOXED(6893370397468496302,64,FLEN)
NAN_BOXED(6879406763742261511,64,FLEN)
NAN_BOXED(18391361394029548183,64,FLEN)
NAN_BOXED(6893377271040985389,64,FLEN)
NAN_BOXED(6888331544530407321,64,FLEN)
NAN_BOXED(18400332047887324649,64,FLEN)
NAN_BOXED(6893417492163980183,64,FLEN)
NAN_BOXED(6893529126545911567,64,FLEN)
NAN_BOXED(18406657333840888872,64,FLEN)
NAN_BOXED(6893429098983495608,64,FLEN)
NAN_BOXED(6886979657735564953,64,FLEN)
NAN_BOXED(18400137380554710432,64,FLEN)
NAN_BOXED(6893533899028728966,64,FLEN)
NAN_BOXED(6886846249617082801,64,FLEN)
NAN_BOXED(18398205392410772096,64,FLEN)
NAN_BOXED(6893576225612011171,64,FLEN)
NAN_BOXED(6879190698131016895,64,FLEN)
NAN_BOXED(18392795679570360203,64,FLEN)
NAN_BOXED(6893660587991401153,64,FLEN)
NAN_BOXED(6891777369255738793,64,FLEN)
NAN_BOXED(18406517023105712506,64,FLEN)
NAN_BOXED(6893678623591970122,64,FLEN)
NAN_BOXED(6885103069986984559,64,FLEN)
NAN_BOXED(18398300088384108222,64,FLEN)
NAN_BOXED(6893882995263592758,64,FLEN)
NAN_BOXED(6881591616391013979,64,FLEN)
NAN_BOXED(18394568045070551514,64,FLEN)
NAN_BOXED(6893972316827676243,64,FLEN)
NAN_BOXED(6879731748519460871,64,FLEN)
NAN_BOXED(18394010848951827964,64,FLEN)
NAN_BOXED(6894052348842323452,64,FLEN)
NAN_BOXED(6883714203401174735,64,FLEN)
NAN_BOXED(18398585423808801675,64,FLEN)
NAN_BOXED(6894052407127856440,64,FLEN)
NAN_BOXED(6893180405619924866,64,FLEN)
NAN_BOXED(18407269248695587435,64,FLEN)
NAN_BOXED(6894061429356827242,64,FLEN)
NAN_BOXED(6894306148176870071,64,FLEN)
NAN_BOXED(18407062953848221343,64,FLEN)
NAN_BOXED(6894169699897198610,64,FLEN)
NAN_BOXED(6892875291810922341,64,FLEN)
NAN_BOXED(18407282804332372283,64,FLEN)
NAN_BOXED(6894179247267684083,64,FLEN)
NAN_BOXED(6883892641221836335,64,FLEN)
NAN_BOXED(18398161340295747769,64,FLEN)
NAN_BOXED(6894181831214048108,64,FLEN)
NAN_BOXED(6886330566634836545,64,FLEN)
NAN_BOXED(18401083527063033835,64,FLEN)
NAN_BOXED(6894246230729378787,64,FLEN)
NAN_BOXED(6878065713526887239,64,FLEN)
NAN_BOXED(18390352668268014745,64,FLEN)
NAN_BOXED(6894333977000019164,64,FLEN)
NAN_BOXED(6890515005495558904,64,FLEN)
NAN_BOXED(18404845743678402772,64,FLEN)
NAN_BOXED(6894427997406031416,64,FLEN)
NAN_BOXED(6878008911954405087,64,FLEN)
NAN_BOXED(18392724119704726123,64,FLEN)
NAN_BOXED(6894430703699054799,64,FLEN)
NAN_BOXED(6892791063986096904,64,FLEN)
NAN_BOXED(18407991561074709033,64,FLEN)
NAN_BOXED(6894601761873794549,64,FLEN)
NAN_BOXED(6870790948800651455,64,FLEN)
NAN_BOXED(18385219876926799016,64,FLEN)
NAN_BOXED(6894602974977942057,64,FLEN)
NAN_BOXED(6893248770762147176,64,FLEN)
NAN_BOXED(18408389817024407789,64,FLEN)
NAN_BOXED(6894615021430756077,64,FLEN)
NAN_BOXED(6894541101284552382,64,FLEN)
NAN_BOXED(18405827969454804461,64,FLEN)
NAN_BOXED(6894630135758780245,64,FLEN)
NAN_BOXED(6887877391143051245,64,FLEN)
NAN_BOXED(18401713737894581671,64,FLEN)
NAN_BOXED(6894648320277167226,64,FLEN)
NAN_BOXED(6886167696842964531,64,FLEN)
NAN_BOXED(18399895325017899937,64,FLEN)
NAN_BOXED(6894678813865094930,64,FLEN)
NAN_BOXED(6892569457419971832,64,FLEN)
NAN_BOXED(18406241160317184347,64,FLEN)
NAN_BOXED(6894713015145454867,64,FLEN)
NAN_BOXED(6888101781386406611,64,FLEN)
NAN_BOXED(18402113103135377569,64,FLEN)
NAN_BOXED(6894875323469110123,64,FLEN)
NAN_BOXED(6894911320724532506,64,FLEN)
NAN_BOXED(18409782972594420075,64,FLEN)
NAN_BOXED(6894908680957673209,64,FLEN)
NAN_BOXED(6891841234657507640,64,FLEN)
NAN_BOXED(18403717221580462017,64,FLEN)
NAN_BOXED(6894961717189324491,64,FLEN)
NAN_BOXED(6885372383812386891,64,FLEN)
NAN_BOXED(18398717969058767150,64,FLEN)
NAN_BOXED(6894964368275491065,64,FLEN)
NAN_BOXED(6894555224447188318,64,FLEN)
NAN_BOXED(18408276307267448782,64,FLEN)
NAN_BOXED(6894967191803734161,64,FLEN)
NAN_BOXED(6893054807579209354,64,FLEN)
NAN_BOXED(18407228225980741802,64,FLEN)
NAN_BOXED(6894987171501404335,64,FLEN)
NAN_BOXED(6888567329364505111,64,FLEN)
NAN_BOXED(18402398405407072540,64,FLEN)
NAN_BOXED(6894990745484024249,64,FLEN)
NAN_BOXED(6882274887514627959,64,FLEN)
NAN_BOXED(18395658503273452094,64,FLEN)
NAN_BOXED(6894999172140634412,64,FLEN)
NAN_BOXED(6892079003276760034,64,FLEN)
NAN_BOXED(18404374929689182212,64,FLEN)
NAN_BOXED(6856978542721883903,64,FLEN)
NAN_BOXED(6890244836319030435,64,FLEN)
NAN_BOXED(18367421517327612232,64,FLEN)
NAN_BOXED(6868017410900858975,64,FLEN)
NAN_BOXED(6889632352712711279,64,FLEN)
NAN_BOXED(18375954403073513155,64,FLEN)
NAN_BOXED(6868978092139518527,64,FLEN)
NAN_BOXED(6892176560026428924,64,FLEN)
NAN_BOXED(18378472216127157482,64,FLEN)
NAN_BOXED(6869580425866618559,64,FLEN)
NAN_BOXED(6886106333150819649,64,FLEN)
NAN_BOXED(18375834478272429663,64,FLEN)
NAN_BOXED(6871396273595352639,64,FLEN)
NAN_BOXED(6889875013918551029,64,FLEN)
NAN_BOXED(18379535155868390041,64,FLEN)
NAN_BOXED(6872310032693518527,64,FLEN)
NAN_BOXED(6890973325028347577,64,FLEN)
NAN_BOXED(18380538518176313828,64,FLEN)
NAN_BOXED(6873105436134853135,64,FLEN)
NAN_BOXED(6888863191192316333,64,FLEN)
NAN_BOXED(18379333515944597931,64,FLEN)
NAN_BOXED(6873490211844202847,64,FLEN)
NAN_BOXED(6884054120717896615,64,FLEN)
NAN_BOXED(18374959923864410503,64,FLEN)
NAN_BOXED(6874641408238492079,64,FLEN)
NAN_BOXED(6880293578056224343,64,FLEN)
NAN_BOXED(18375930062244423265,64,FLEN)
NAN_BOXED(6875650101426856831,64,FLEN)
NAN_BOXED(6884750640565035799,64,FLEN)
NAN_BOXED(18379234045951578568,64,FLEN)
NAN_BOXED(6876879658486325087,64,FLEN)
NAN_BOXED(6882186304987524639,64,FLEN)
NAN_BOXED(18379426696181026436,64,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_2:
    .fill 166*((SIGALIGN)/4),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*XLEN/32,4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

RVMODEL_DATA_END
