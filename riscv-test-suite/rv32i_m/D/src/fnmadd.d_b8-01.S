
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 15:28:39 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32D/fnmadd.d.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fnmadd.d instruction of the RISC-V RV32FD_Zicsr,RV64FD_Zicsr extension for the fnmadd.d_b8 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IFD_Zicsr,RV64IFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*D.*);def TEST_CASE_1=True;",fnmadd.d_b8)

RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_0:
// rs1 == rs2 != rs3 and rs1 == rs2 != rd and rd != rs3, rs1==f16, rs2==f16, rs3==f11, rd==f25,fs1 == 0 and fe1 == 0x3f7 and fm1 == 0x404360ffea780 and fs2 == 0 and fe2 == 0x404 and fm2 == 0xddb38b4ee0625 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x2acf149076dd8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f16; op2:f16; op3:f11; dest:f25; op1val:0x3f7404360ffea780; op2val:0x3f7404360ffea780;
op3val:0x3fd2acf149076dd8; valaddr_reg:x3; val_offset:0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f25, f16, f16, f11, dyn, 0, 0, x3, 0*FLEN/8, x4, x1, x2)

inst_1:
// rs1 == rs3 != rs2 and rs1 == rs3 != rd and rd != rs2, rs1==f28, rs2==f8, rs3==f28, rd==f19,fs1 == 0 and fe1 == 0x3f7 and fm1 == 0x404360ffea780 and fs2 == 0 and fe2 == 0x404 and fm2 == 0xddb38b4ee0625 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x2acf149076dd8 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f28; op2:f8; op3:f28; dest:f19; op1val:0x3f7404360ffea780; op2val:0x404ddb38b4ee0625;
op3val:0x3f7404360ffea780; valaddr_reg:x3; val_offset:3*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f19, f28, f8, f28, dyn, 32, 0, x3, 3*FLEN/8, x4, x1, x2)

inst_2:
// rs1 == rs2 == rs3 == rd, rs1==f0, rs2==f0, rs3==f0, rd==f0,fs1 == 0 and fe1 == 0x3f7 and fm1 == 0x404360ffea780 and fs2 == 0 and fe2 == 0x404 and fm2 == 0xddb38b4ee0625 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x2acf149076dd8 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f0; op2:f0; op3:f0; dest:f0; op1val:0x3f7404360ffea780; op2val:0x3f7404360ffea780;
op3val:0x3f7404360ffea780; valaddr_reg:x3; val_offset:6*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f0, f0, f0, f0, dyn, 64, 0, x3, 6*FLEN/8, x4, x1, x2)

inst_3:
// rs1 == rd == rs3 != rs2, rs1==f22, rs2==f9, rs3==f22, rd==f22,fs1 == 0 and fe1 == 0x3f7 and fm1 == 0x404360ffea780 and fs2 == 0 and fe2 == 0x404 and fm2 == 0xddb38b4ee0625 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x2acf149076dd8 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f22; op2:f9; op3:f22; dest:f22; op1val:0x3f7404360ffea780; op2val:0x404ddb38b4ee0625;
op3val:0x3f7404360ffea780; valaddr_reg:x3; val_offset:9*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f22, f22, f9, f22, dyn, 96, 0, x3, 9*FLEN/8, x4, x1, x2)

inst_4:
// rs1 == rs2 == rs3 != rd, rs1==f21, rs2==f21, rs3==f21, rd==f18,fs1 == 0 and fe1 == 0x3f7 and fm1 == 0x404360ffea780 and fs2 == 0 and fe2 == 0x404 and fm2 == 0xddb38b4ee0625 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x2acf149076dd8 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f21; op2:f21; op3:f21; dest:f18; op1val:0x3f7404360ffea780; op2val:0x3f7404360ffea780;
op3val:0x3f7404360ffea780; valaddr_reg:x3; val_offset:12*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f18, f21, f21, f21, dyn, 128, 0, x3, 12*FLEN/8, x4, x1, x2)

inst_5:
// rs2 == rd != rs1 and rs2 == rd != rs3 and rs3 != rs1, rs1==f15, rs2==f24, rs3==f12, rd==f24,fs1 == 0 and fe1 == 0x3f7 and fm1 == 0x6e2ab57b59a00 and fs2 == 0 and fe2 == 0x403 and fm2 == 0xc54fb75a805c3 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x4431cc49a0808 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f15; op2:f24; op3:f12; dest:f24; op1val:0x3f76e2ab57b59a00; op2val:0x403c54fb75a805c3;
op3val:0x3fc4431cc49a0808; valaddr_reg:x3; val_offset:15*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f24, f15, f24, f12, dyn, 0, 0, x3, 15*FLEN/8, x4, x1, x2)

inst_6:
// rs1 == rs2 == rd != rs3, rs1==f23, rs2==f23, rs3==f6, rd==f23,fs1 == 0 and fe1 == 0x3f7 and fm1 == 0x6e2ab57b59a00 and fs2 == 0 and fe2 == 0x403 and fm2 == 0xc54fb75a805c3 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x4431cc49a0808 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f23; op2:f23; op3:f6; dest:f23; op1val:0x3f76e2ab57b59a00; op2val:0x3f76e2ab57b59a00;
op3val:0x3fc4431cc49a0808; valaddr_reg:x3; val_offset:18*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f23, f23, f23, f6, dyn, 32, 0, x3, 18*FLEN/8, x4, x1, x2)

inst_7:
// rs2 == rs3 != rs1 and rs2 == rs3 != rd and rd != rs1, rs1==f9, rs2==f25, rs3==f25, rd==f27,fs1 == 0 and fe1 == 0x3f7 and fm1 == 0x6e2ab57b59a00 and fs2 == 0 and fe2 == 0x403 and fm2 == 0xc54fb75a805c3 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x4431cc49a0808 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f9; op2:f25; op3:f25; dest:f27; op1val:0x3f76e2ab57b59a00; op2val:0x403c54fb75a805c3;
op3val:0x403c54fb75a805c3; valaddr_reg:x3; val_offset:21*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f27, f9, f25, f25, dyn, 64, 0, x3, 21*FLEN/8, x4, x1, x2)

inst_8:
// rs3 == rd != rs1 and rs3 == rd != rs2 and rs2 != rs1, rs1==f4, rs2==f11, rs3==f15, rd==f15,fs1 == 0 and fe1 == 0x3f7 and fm1 == 0x6e2ab57b59a00 and fs2 == 0 and fe2 == 0x403 and fm2 == 0xc54fb75a805c3 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x4431cc49a0808 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f4; op2:f11; op3:f15; dest:f15; op1val:0x3f76e2ab57b59a00; op2val:0x403c54fb75a805c3;
op3val:0x3fc4431cc49a0808; valaddr_reg:x3; val_offset:24*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f15, f4, f11, f15, dyn, 96, 0, x3, 24*FLEN/8, x4, x1, x2)

inst_9:
// rs1 == rd != rs2 and rs1 == rd != rs3 and rs3 != rs2, rs1==f1, rs2==f29, rs3==f3, rd==f1,fs1 == 0 and fe1 == 0x3f7 and fm1 == 0x6e2ab57b59a00 and fs2 == 0 and fe2 == 0x403 and fm2 == 0xc54fb75a805c3 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x4431cc49a0808 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f1; op2:f29; op3:f3; dest:f1; op1val:0x3f76e2ab57b59a00; op2val:0x403c54fb75a805c3;
op3val:0x3fc4431cc49a0808; valaddr_reg:x3; val_offset:27*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f1, f1, f29, f3, dyn, 128, 0, x3, 27*FLEN/8, x4, x1, x2)

inst_10:
// rs1 != rs2 and rs1 != rd and rs1 != rs3 and rs2 != rs3 and rs2 != rd and rs3 != rd, rs1==f8, rs2==f12, rs3==f10, rd==f14,fs1 == 0 and fe1 == 0x3f7 and fm1 == 0x81ad61d700e80 and fs2 == 0 and fe2 == 0x401 and fm2 == 0x4b97acb7a28c5 and fs3 == 0 and fe3 == 0x3f9 and fm3 == 0xf38faefad98e0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f8; op2:f12; op3:f10; dest:f14; op1val:0x3f781ad61d700e80; op2val:0x4014b97acb7a28c5;
op3val:0x3f9f38faefad98e0; valaddr_reg:x3; val_offset:30*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f14, f8, f12, f10, dyn, 0, 0, x3, 30*FLEN/8, x4, x1, x2)

inst_11:
// rd == rs2 == rs3 != rs1, rs1==f10, rs2==f30, rs3==f30, rd==f30,fs1 == 0 and fe1 == 0x3f7 and fm1 == 0x81ad61d700e80 and fs2 == 0 and fe2 == 0x401 and fm2 == 0x4b97acb7a28c5 and fs3 == 0 and fe3 == 0x3f9 and fm3 == 0xf38faefad98e0 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f10; op2:f30; op3:f30; dest:f30; op1val:0x3f781ad61d700e80; op2val:0x4014b97acb7a28c5;
op3val:0x4014b97acb7a28c5; valaddr_reg:x3; val_offset:33*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f30, f10, f30, f30, dyn, 32, 0, x3, 33*FLEN/8, x4, x1, x2)

inst_12:
// rs1==f7, rs2==f10, rs3==f1, rd==f16,fs1 == 0 and fe1 == 0x3f7 and fm1 == 0x81ad61d700e80 and fs2 == 0 and fe2 == 0x401 and fm2 == 0x4b97acb7a28c5 and fs3 == 0 and fe3 == 0x3f9 and fm3 == 0xf38faefad98e0 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f7; op2:f10; op3:f1; dest:f16; op1val:0x3f781ad61d700e80; op2val:0x4014b97acb7a28c5;
op3val:0x3f9f38faefad98e0; valaddr_reg:x3; val_offset:36*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f16, f7, f10, f1, dyn, 64, 0, x3, 36*FLEN/8, x4, x1, x2)

inst_13:
// rs1==f18, rs2==f6, rs3==f5, rd==f7,fs1 == 0 and fe1 == 0x3f7 and fm1 == 0x81ad61d700e80 and fs2 == 0 and fe2 == 0x401 and fm2 == 0x4b97acb7a28c5 and fs3 == 0 and fe3 == 0x3f9 and fm3 == 0xf38faefad98e0 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f18; op2:f6; op3:f5; dest:f7; op1val:0x3f781ad61d700e80; op2val:0x4014b97acb7a28c5;
op3val:0x3f9f38faefad98e0; valaddr_reg:x3; val_offset:39*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f7, f18, f6, f5, dyn, 96, 0, x3, 39*FLEN/8, x4, x1, x2)

inst_14:
// rs1==f26, rs2==f18, rs3==f14, rd==f17,fs1 == 0 and fe1 == 0x3f7 and fm1 == 0x81ad61d700e80 and fs2 == 0 and fe2 == 0x401 and fm2 == 0x4b97acb7a28c5 and fs3 == 0 and fe3 == 0x3f9 and fm3 == 0xf38faefad98e0 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f26; op2:f18; op3:f14; dest:f17; op1val:0x3f781ad61d700e80; op2val:0x4014b97acb7a28c5;
op3val:0x3f9f38faefad98e0; valaddr_reg:x3; val_offset:42*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f17, f26, f18, f14, dyn, 128, 0, x3, 42*FLEN/8, x4, x1, x2)

inst_15:
// rs1==f25, rs2==f15, rs3==f13, rd==f21,fs1 == 0 and fe1 == 0x3f7 and fm1 == 0xc04b6784e7e00 and fs2 == 0 and fe2 == 0x405 and fm2 == 0x0a056aef1100b and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xd1d7d64afb902 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f25; op2:f15; op3:f13; dest:f21; op1val:0x3f7c04b6784e7e00; op2val:0x4050a056aef1100b;
op3val:0x3fdd1d7d64afb902; valaddr_reg:x3; val_offset:45*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f21, f25, f15, f13, dyn, 0, 0, x3, 45*FLEN/8, x4, x1, x2)

inst_16:
// rs1==f20, rs2==f4, rs3==f8, rd==f13,fs1 == 0 and fe1 == 0x3f7 and fm1 == 0xc04b6784e7e00 and fs2 == 0 and fe2 == 0x405 and fm2 == 0x0a056aef1100b and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xd1d7d64afb902 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f20; op2:f4; op3:f8; dest:f13; op1val:0x3f7c04b6784e7e00; op2val:0x4050a056aef1100b;
op3val:0x3fdd1d7d64afb902; valaddr_reg:x3; val_offset:48*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f13, f20, f4, f8, dyn, 32, 0, x3, 48*FLEN/8, x4, x1, x2)

inst_17:
// rs1==f30, rs2==f31, rs3==f4, rd==f28,fs1 == 0 and fe1 == 0x3f7 and fm1 == 0xc04b6784e7e00 and fs2 == 0 and fe2 == 0x405 and fm2 == 0x0a056aef1100b and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xd1d7d64afb902 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f31; op3:f4; dest:f28; op1val:0x3f7c04b6784e7e00; op2val:0x4050a056aef1100b;
op3val:0x3fdd1d7d64afb902; valaddr_reg:x3; val_offset:51*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f28, f30, f31, f4, dyn, 64, 0, x3, 51*FLEN/8, x4, x1, x2)

inst_18:
// rs1==f12, rs2==f13, rs3==f7, rd==f29,fs1 == 0 and fe1 == 0x3f7 and fm1 == 0xc04b6784e7e00 and fs2 == 0 and fe2 == 0x405 and fm2 == 0x0a056aef1100b and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xd1d7d64afb902 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f12; op2:f13; op3:f7; dest:f29; op1val:0x3f7c04b6784e7e00; op2val:0x4050a056aef1100b;
op3val:0x3fdd1d7d64afb902; valaddr_reg:x3; val_offset:54*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f29, f12, f13, f7, dyn, 96, 0, x3, 54*FLEN/8, x4, x1, x2)

inst_19:
// rs1==f6, rs2==f17, rs3==f19, rd==f11,fs1 == 0 and fe1 == 0x3f7 and fm1 == 0xc04b6784e7e00 and fs2 == 0 and fe2 == 0x405 and fm2 == 0x0a056aef1100b and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xd1d7d64afb902 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f6; op2:f17; op3:f19; dest:f11; op1val:0x3f7c04b6784e7e00; op2val:0x4050a056aef1100b;
op3val:0x3fdd1d7d64afb902; valaddr_reg:x3; val_offset:57*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f11, f6, f17, f19, dyn, 128, 0, x3, 57*FLEN/8, x4, x1, x2)

inst_20:
// rs1==f11, rs2==f20, rs3==f27, rd==f9,fs1 == 0 and fe1 == 0x3f7 and fm1 == 0xc81f48532c680 and fs2 == 0 and fe2 == 0x404 and fm2 == 0x0de481de515b5 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0xe0e0023faf440 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f11; op2:f20; op3:f27; dest:f9; op1val:0x3f7c81f48532c680; op2val:0x4040de481de515b5;
op3val:0x3fce0e0023faf440; valaddr_reg:x3; val_offset:60*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f9, f11, f20, f27, dyn, 0, 0, x3, 60*FLEN/8, x4, x1, x2)

inst_21:
// rs1==f13, rs2==f2, rs3==f26, rd==f8,fs1 == 0 and fe1 == 0x3f7 and fm1 == 0xc81f48532c680 and fs2 == 0 and fe2 == 0x404 and fm2 == 0x0de481de515b5 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0xe0e0023faf440 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f13; op2:f2; op3:f26; dest:f8; op1val:0x3f7c81f48532c680; op2val:0x4040de481de515b5;
op3val:0x3fce0e0023faf440; valaddr_reg:x3; val_offset:63*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f8, f13, f2, f26, dyn, 32, 0, x3, 63*FLEN/8, x4, x1, x2)

inst_22:
// rs1==f27, rs2==f14, rs3==f24, rd==f31,fs1 == 0 and fe1 == 0x3f7 and fm1 == 0xc81f48532c680 and fs2 == 0 and fe2 == 0x404 and fm2 == 0x0de481de515b5 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0xe0e0023faf440 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f27; op2:f14; op3:f24; dest:f31; op1val:0x3f7c81f48532c680; op2val:0x4040de481de515b5;
op3val:0x3fce0e0023faf440; valaddr_reg:x3; val_offset:66*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f27, f14, f24, dyn, 64, 0, x3, 66*FLEN/8, x4, x1, x2)

inst_23:
// rs1==f2, rs2==f5, rs3==f17, rd==f12,fs1 == 0 and fe1 == 0x3f7 and fm1 == 0xc81f48532c680 and fs2 == 0 and fe2 == 0x404 and fm2 == 0x0de481de515b5 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0xe0e0023faf440 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f2; op2:f5; op3:f17; dest:f12; op1val:0x3f7c81f48532c680; op2val:0x4040de481de515b5;
op3val:0x3fce0e0023faf440; valaddr_reg:x3; val_offset:69*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f12, f2, f5, f17, dyn, 96, 0, x3, 69*FLEN/8, x4, x1, x2)

inst_24:
// rs1==f17, rs2==f26, rs3==f2, rd==f4,fs1 == 0 and fe1 == 0x3f7 and fm1 == 0xc81f48532c680 and fs2 == 0 and fe2 == 0x404 and fm2 == 0x0de481de515b5 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0xe0e0023faf440 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f17; op2:f26; op3:f2; dest:f4; op1val:0x3f7c81f48532c680; op2val:0x4040de481de515b5;
op3val:0x3fce0e0023faf440; valaddr_reg:x3; val_offset:72*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f4, f17, f26, f2, dyn, 128, 0, x3, 72*FLEN/8, x4, x1, x2)

inst_25:
// rs1==f31, rs2==f27, rs3==f23, rd==f20,fs1 == 0 and fe1 == 0x3f8 and fm1 == 0x65c71065dc980 and fs2 == 0 and fe2 == 0x402 and fm2 == 0x9541317f0f601 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x1b2f84d47e9d8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f31; op2:f27; op3:f23; dest:f20; op1val:0x3f865c71065dc980; op2val:0x4029541317f0f601;
op3val:0x3fc1b2f84d47e9d8; valaddr_reg:x3; val_offset:75*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f20, f31, f27, f23, dyn, 0, 0, x3, 75*FLEN/8, x4, x1, x2)

inst_26:
// rs1==f3, rs2==f19, rs3==f9, rd==f6,fs1 == 0 and fe1 == 0x3f8 and fm1 == 0x65c71065dc980 and fs2 == 0 and fe2 == 0x402 and fm2 == 0x9541317f0f601 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x1b2f84d47e9d8 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f3; op2:f19; op3:f9; dest:f6; op1val:0x3f865c71065dc980; op2val:0x4029541317f0f601;
op3val:0x3fc1b2f84d47e9d8; valaddr_reg:x3; val_offset:78*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f6, f3, f19, f9, dyn, 32, 0, x3, 78*FLEN/8, x4, x1, x2)

inst_27:
// rs1==f5, rs2==f1, rs3==f18, rd==f10,fs1 == 0 and fe1 == 0x3f8 and fm1 == 0x65c71065dc980 and fs2 == 0 and fe2 == 0x402 and fm2 == 0x9541317f0f601 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x1b2f84d47e9d8 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f5; op2:f1; op3:f18; dest:f10; op1val:0x3f865c71065dc980; op2val:0x4029541317f0f601;
op3val:0x3fc1b2f84d47e9d8; valaddr_reg:x3; val_offset:81*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f10, f5, f1, f18, dyn, 64, 0, x3, 81*FLEN/8, x4, x1, x2)

inst_28:
// rs1==f19, rs2==f22, rs3==f31, rd==f2,fs1 == 0 and fe1 == 0x3f8 and fm1 == 0x65c71065dc980 and fs2 == 0 and fe2 == 0x402 and fm2 == 0x9541317f0f601 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x1b2f84d47e9d8 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f19; op2:f22; op3:f31; dest:f2; op1val:0x3f865c71065dc980; op2val:0x4029541317f0f601;
op3val:0x3fc1b2f84d47e9d8; valaddr_reg:x3; val_offset:84*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f2, f19, f22, f31, dyn, 96, 0, x3, 84*FLEN/8, x4, x1, x2)

inst_29:
// rs1==f24, rs2==f28, rs3==f20, rd==f5,fs1 == 0 and fe1 == 0x3f8 and fm1 == 0x65c71065dc980 and fs2 == 0 and fe2 == 0x402 and fm2 == 0x9541317f0f601 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x1b2f84d47e9d8 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f24; op2:f28; op3:f20; dest:f5; op1val:0x3f865c71065dc980; op2val:0x4029541317f0f601;
op3val:0x3fc1b2f84d47e9d8; valaddr_reg:x3; val_offset:87*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f5, f24, f28, f20, dyn, 128, 0, x3, 87*FLEN/8, x4, x1, x2)

inst_30:
// rs1==f14, rs2==f3, rs3==f29, rd==f26,fs1 == 0 and fe1 == 0x3f9 and fm1 == 0x1273e693dc880 and fs2 == 0 and fe2 == 0x404 and fm2 == 0xc5b0e1da72827 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xe664b8d43a021 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f14; op2:f3; op3:f29; dest:f26; op1val:0x3f91273e693dc880; op2val:0x404c5b0e1da72827;
op3val:0x3fee664b8d43a021; valaddr_reg:x3; val_offset:90*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f26, f14, f3, f29, dyn, 0, 0, x3, 90*FLEN/8, x4, x1, x2)

inst_31:
// rs1==f29, rs2==f7, rs3==f16, rd==f3,fs1 == 0 and fe1 == 0x3f9 and fm1 == 0x1273e693dc880 and fs2 == 0 and fe2 == 0x404 and fm2 == 0xc5b0e1da72827 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xe664b8d43a021 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f29; op2:f7; op3:f16; dest:f3; op1val:0x3f91273e693dc880; op2val:0x404c5b0e1da72827;
op3val:0x3fee664b8d43a021; valaddr_reg:x3; val_offset:93*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f3, f29, f7, f16, dyn, 32, 0, x3, 93*FLEN/8, x4, x1, x2)

inst_32:
// fs1 == 0 and fe1 == 0x3f9 and fm1 == 0x1273e693dc880 and fs2 == 0 and fe2 == 0x404 and fm2 == 0xc5b0e1da72827 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xe664b8d43a021 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3f91273e693dc880; op2val:0x404c5b0e1da72827;
op3val:0x3fee664b8d43a021; valaddr_reg:x3; val_offset:96*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 96*FLEN/8, x4, x1, x2)

inst_33:
// fs1 == 0 and fe1 == 0x3f9 and fm1 == 0x1273e693dc880 and fs2 == 0 and fe2 == 0x404 and fm2 == 0xc5b0e1da72827 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xe664b8d43a021 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3f91273e693dc880; op2val:0x404c5b0e1da72827;
op3val:0x3fee664b8d43a021; valaddr_reg:x3; val_offset:99*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 99*FLEN/8, x4, x1, x2)

inst_34:
// fs1 == 0 and fe1 == 0x3f9 and fm1 == 0x1273e693dc880 and fs2 == 0 and fe2 == 0x404 and fm2 == 0xc5b0e1da72827 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xe664b8d43a021 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3f91273e693dc880; op2val:0x404c5b0e1da72827;
op3val:0x3fee664b8d43a021; valaddr_reg:x3; val_offset:102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 102*FLEN/8, x4, x1, x2)

inst_35:
// fs1 == 0 and fe1 == 0x3f9 and fm1 == 0x37bacc78502a0 and fs2 == 0 and fe2 == 0x404 and fm2 == 0x3d525a8f21a1f and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x8266974c6ffc7 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3f937bacc78502a0; op2val:0x4043d525a8f21a1f;
op3val:0x3fe8266974c6ffc7; valaddr_reg:x3; val_offset:105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 105*FLEN/8, x4, x1, x2)

inst_36:
// fs1 == 0 and fe1 == 0x3f9 and fm1 == 0x37bacc78502a0 and fs2 == 0 and fe2 == 0x404 and fm2 == 0x3d525a8f21a1f and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x8266974c6ffc7 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3f937bacc78502a0; op2val:0x4043d525a8f21a1f;
op3val:0x3fe8266974c6ffc7; valaddr_reg:x3; val_offset:108*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 108*FLEN/8, x4, x1, x2)

inst_37:
// fs1 == 0 and fe1 == 0x3f9 and fm1 == 0x37bacc78502a0 and fs2 == 0 and fe2 == 0x404 and fm2 == 0x3d525a8f21a1f and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x8266974c6ffc7 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3f937bacc78502a0; op2val:0x4043d525a8f21a1f;
op3val:0x3fe8266974c6ffc7; valaddr_reg:x3; val_offset:111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 111*FLEN/8, x4, x1, x2)

inst_38:
// fs1 == 0 and fe1 == 0x3f9 and fm1 == 0x37bacc78502a0 and fs2 == 0 and fe2 == 0x404 and fm2 == 0x3d525a8f21a1f and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x8266974c6ffc7 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3f937bacc78502a0; op2val:0x4043d525a8f21a1f;
op3val:0x3fe8266974c6ffc7; valaddr_reg:x3; val_offset:114*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 114*FLEN/8, x4, x1, x2)

inst_39:
// fs1 == 0 and fe1 == 0x3f9 and fm1 == 0x37bacc78502a0 and fs2 == 0 and fe2 == 0x404 and fm2 == 0x3d525a8f21a1f and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x8266974c6ffc7 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3f937bacc78502a0; op2val:0x4043d525a8f21a1f;
op3val:0x3fe8266974c6ffc7; valaddr_reg:x3; val_offset:117*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 117*FLEN/8, x4, x1, x2)

inst_40:
// fs1 == 0 and fe1 == 0x3f9 and fm1 == 0x53de7f499c6e0 and fs2 == 0 and fe2 == 0x401 and fm2 == 0x4c69963d1bf9e and fs3 == 0 and fe3 == 0x3fb and fm3 == 0xb950bacb2bcd8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3f953de7f499c6e0; op2val:0x4014c69963d1bf9e;
op3val:0x3fbb950bacb2bcd8; valaddr_reg:x3; val_offset:120*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 120*FLEN/8, x4, x1, x2)

inst_41:
// fs1 == 0 and fe1 == 0x3f9 and fm1 == 0x53de7f499c6e0 and fs2 == 0 and fe2 == 0x401 and fm2 == 0x4c69963d1bf9e and fs3 == 0 and fe3 == 0x3fb and fm3 == 0xb950bacb2bcd8 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3f953de7f499c6e0; op2val:0x4014c69963d1bf9e;
op3val:0x3fbb950bacb2bcd8; valaddr_reg:x3; val_offset:123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 123*FLEN/8, x4, x1, x2)

inst_42:
// fs1 == 0 and fe1 == 0x3f9 and fm1 == 0x53de7f499c6e0 and fs2 == 0 and fe2 == 0x401 and fm2 == 0x4c69963d1bf9e and fs3 == 0 and fe3 == 0x3fb and fm3 == 0xb950bacb2bcd8 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3f953de7f499c6e0; op2val:0x4014c69963d1bf9e;
op3val:0x3fbb950bacb2bcd8; valaddr_reg:x3; val_offset:126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 126*FLEN/8, x4, x1, x2)

inst_43:
// fs1 == 0 and fe1 == 0x3f9 and fm1 == 0x53de7f499c6e0 and fs2 == 0 and fe2 == 0x401 and fm2 == 0x4c69963d1bf9e and fs3 == 0 and fe3 == 0x3fb and fm3 == 0xb950bacb2bcd8 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3f953de7f499c6e0; op2val:0x4014c69963d1bf9e;
op3val:0x3fbb950bacb2bcd8; valaddr_reg:x3; val_offset:129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 129*FLEN/8, x4, x1, x2)

inst_44:
// fs1 == 0 and fe1 == 0x3f9 and fm1 == 0x53de7f499c6e0 and fs2 == 0 and fe2 == 0x401 and fm2 == 0x4c69963d1bf9e and fs3 == 0 and fe3 == 0x3fb and fm3 == 0xb950bacb2bcd8 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3f953de7f499c6e0; op2val:0x4014c69963d1bf9e;
op3val:0x3fbb950bacb2bcd8; valaddr_reg:x3; val_offset:132*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 132*FLEN/8, x4, x1, x2)

inst_45:
// fs1 == 0 and fe1 == 0x3f9 and fm1 == 0x67300d17ab200 and fs2 == 0 and fe2 == 0x404 and fm2 == 0x048585eb4d47a and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x6d882528f36fb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3f967300d17ab200; op2val:0x404048585eb4d47a;
op3val:0x3fe6d882528f36fb; valaddr_reg:x3; val_offset:135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 135*FLEN/8, x4, x1, x2)

inst_46:
// fs1 == 0 and fe1 == 0x3f9 and fm1 == 0x67300d17ab200 and fs2 == 0 and fe2 == 0x404 and fm2 == 0x048585eb4d47a and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x6d882528f36fb and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3f967300d17ab200; op2val:0x404048585eb4d47a;
op3val:0x3fe6d882528f36fb; valaddr_reg:x3; val_offset:138*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 138*FLEN/8, x4, x1, x2)

inst_47:
// fs1 == 0 and fe1 == 0x3f9 and fm1 == 0x67300d17ab200 and fs2 == 0 and fe2 == 0x404 and fm2 == 0x048585eb4d47a and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x6d882528f36fb and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3f967300d17ab200; op2val:0x404048585eb4d47a;
op3val:0x3fe6d882528f36fb; valaddr_reg:x3; val_offset:141*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 141*FLEN/8, x4, x1, x2)

inst_48:
// fs1 == 0 and fe1 == 0x3f9 and fm1 == 0x67300d17ab200 and fs2 == 0 and fe2 == 0x404 and fm2 == 0x048585eb4d47a and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x6d882528f36fb and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3f967300d17ab200; op2val:0x404048585eb4d47a;
op3val:0x3fe6d882528f36fb; valaddr_reg:x3; val_offset:144*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 144*FLEN/8, x4, x1, x2)

inst_49:
// fs1 == 0 and fe1 == 0x3f9 and fm1 == 0x67300d17ab200 and fs2 == 0 and fe2 == 0x404 and fm2 == 0x048585eb4d47a and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x6d882528f36fb and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3f967300d17ab200; op2val:0x404048585eb4d47a;
op3val:0x3fe6d882528f36fb; valaddr_reg:x3; val_offset:147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 147*FLEN/8, x4, x1, x2)

inst_50:
// fs1 == 0 and fe1 == 0x3f9 and fm1 == 0xc76b2f8c7f200 and fs2 == 0 and fe2 == 0x403 and fm2 == 0x29e88495ff83a and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x08fc7f9599a23 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3f9c76b2f8c7f200; op2val:0x40329e88495ff83a;
op3val:0x3fe08fc7f9599a23; valaddr_reg:x3; val_offset:150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 150*FLEN/8, x4, x1, x2)

inst_51:
// fs1 == 0 and fe1 == 0x3f9 and fm1 == 0xc76b2f8c7f200 and fs2 == 0 and fe2 == 0x403 and fm2 == 0x29e88495ff83a and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x08fc7f9599a23 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3f9c76b2f8c7f200; op2val:0x40329e88495ff83a;
op3val:0x3fe08fc7f9599a23; valaddr_reg:x3; val_offset:153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 153*FLEN/8, x4, x1, x2)

inst_52:
// fs1 == 0 and fe1 == 0x3f9 and fm1 == 0xc76b2f8c7f200 and fs2 == 0 and fe2 == 0x403 and fm2 == 0x29e88495ff83a and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x08fc7f9599a23 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3f9c76b2f8c7f200; op2val:0x40329e88495ff83a;
op3val:0x3fe08fc7f9599a23; valaddr_reg:x3; val_offset:156*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 156*FLEN/8, x4, x1, x2)

inst_53:
// fs1 == 0 and fe1 == 0x3f9 and fm1 == 0xc76b2f8c7f200 and fs2 == 0 and fe2 == 0x403 and fm2 == 0x29e88495ff83a and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x08fc7f9599a23 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3f9c76b2f8c7f200; op2val:0x40329e88495ff83a;
op3val:0x3fe08fc7f9599a23; valaddr_reg:x3; val_offset:159*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 159*FLEN/8, x4, x1, x2)

inst_54:
// fs1 == 0 and fe1 == 0x3f9 and fm1 == 0xc76b2f8c7f200 and fs2 == 0 and fe2 == 0x403 and fm2 == 0x29e88495ff83a and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x08fc7f9599a23 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3f9c76b2f8c7f200; op2val:0x40329e88495ff83a;
op3val:0x3fe08fc7f9599a23; valaddr_reg:x3; val_offset:162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 162*FLEN/8, x4, x1, x2)

inst_55:
// fs1 == 0 and fe1 == 0x3f9 and fm1 == 0xd987b557882a0 and fs2 == 0 and fe2 == 0x402 and fm2 == 0x9e1a4afa79843 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x7efd0cde4167e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3f9d987b557882a0; op2val:0x4029e1a4afa79843;
op3val:0x3fd7efd0cde4167e; valaddr_reg:x3; val_offset:165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 165*FLEN/8, x4, x1, x2)

inst_56:
// fs1 == 0 and fe1 == 0x3f9 and fm1 == 0xd987b557882a0 and fs2 == 0 and fe2 == 0x402 and fm2 == 0x9e1a4afa79843 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x7efd0cde4167e and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3f9d987b557882a0; op2val:0x4029e1a4afa79843;
op3val:0x3fd7efd0cde4167e; valaddr_reg:x3; val_offset:168*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 168*FLEN/8, x4, x1, x2)

inst_57:
// fs1 == 0 and fe1 == 0x3f9 and fm1 == 0xd987b557882a0 and fs2 == 0 and fe2 == 0x402 and fm2 == 0x9e1a4afa79843 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x7efd0cde4167e and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3f9d987b557882a0; op2val:0x4029e1a4afa79843;
op3val:0x3fd7efd0cde4167e; valaddr_reg:x3; val_offset:171*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 171*FLEN/8, x4, x1, x2)

inst_58:
// fs1 == 0 and fe1 == 0x3f9 and fm1 == 0xd987b557882a0 and fs2 == 0 and fe2 == 0x402 and fm2 == 0x9e1a4afa79843 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x7efd0cde4167e and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3f9d987b557882a0; op2val:0x4029e1a4afa79843;
op3val:0x3fd7efd0cde4167e; valaddr_reg:x3; val_offset:174*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 174*FLEN/8, x4, x1, x2)

inst_59:
// fs1 == 0 and fe1 == 0x3f9 and fm1 == 0xd987b557882a0 and fs2 == 0 and fe2 == 0x402 and fm2 == 0x9e1a4afa79843 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x7efd0cde4167e and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3f9d987b557882a0; op2val:0x4029e1a4afa79843;
op3val:0x3fd7efd0cde4167e; valaddr_reg:x3; val_offset:177*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 177*FLEN/8, x4, x1, x2)

inst_60:
// fs1 == 0 and fe1 == 0x3f9 and fm1 == 0xe7c6951c796c0 and fs2 == 0 and fe2 == 0x403 and fm2 == 0x77d1c840f63bc and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x6609cd8daeb54 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3f9e7c6951c796c0; op2val:0x40377d1c840f63bc;
op3val:0x3fe6609cd8daeb54; valaddr_reg:x3; val_offset:180*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 180*FLEN/8, x4, x1, x2)

inst_61:
// fs1 == 0 and fe1 == 0x3f9 and fm1 == 0xe7c6951c796c0 and fs2 == 0 and fe2 == 0x403 and fm2 == 0x77d1c840f63bc and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x6609cd8daeb54 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3f9e7c6951c796c0; op2val:0x40377d1c840f63bc;
op3val:0x3fe6609cd8daeb54; valaddr_reg:x3; val_offset:183*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 183*FLEN/8, x4, x1, x2)

inst_62:
// fs1 == 0 and fe1 == 0x3f9 and fm1 == 0xe7c6951c796c0 and fs2 == 0 and fe2 == 0x403 and fm2 == 0x77d1c840f63bc and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x6609cd8daeb54 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3f9e7c6951c796c0; op2val:0x40377d1c840f63bc;
op3val:0x3fe6609cd8daeb54; valaddr_reg:x3; val_offset:186*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 186*FLEN/8, x4, x1, x2)

inst_63:
// fs1 == 0 and fe1 == 0x3f9 and fm1 == 0xe7c6951c796c0 and fs2 == 0 and fe2 == 0x403 and fm2 == 0x77d1c840f63bc and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x6609cd8daeb54 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3f9e7c6951c796c0; op2val:0x40377d1c840f63bc;
op3val:0x3fe6609cd8daeb54; valaddr_reg:x3; val_offset:189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 189*FLEN/8, x4, x1, x2)

inst_64:
// fs1 == 0 and fe1 == 0x3f9 and fm1 == 0xe7c6951c796c0 and fs2 == 0 and fe2 == 0x403 and fm2 == 0x77d1c840f63bc and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x6609cd8daeb54 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3f9e7c6951c796c0; op2val:0x40377d1c840f63bc;
op3val:0x3fe6609cd8daeb54; valaddr_reg:x3; val_offset:192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 192*FLEN/8, x4, x1, x2)

inst_65:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0x14b89e1b8baa0 and fs2 == 0 and fe2 == 0x403 and fm2 == 0x0da81e9e68e4e and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x237bb86391b08 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fa14b89e1b8baa0; op2val:0x4030da81e9e68e4e;
op3val:0x3fe237bb86391b08; valaddr_reg:x3; val_offset:195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 195*FLEN/8, x4, x1, x2)

inst_66:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0x14b89e1b8baa0 and fs2 == 0 and fe2 == 0x403 and fm2 == 0x0da81e9e68e4e and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x237bb86391b08 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fa14b89e1b8baa0; op2val:0x4030da81e9e68e4e;
op3val:0x3fe237bb86391b08; valaddr_reg:x3; val_offset:198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 198*FLEN/8, x4, x1, x2)

inst_67:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0x14b89e1b8baa0 and fs2 == 0 and fe2 == 0x403 and fm2 == 0x0da81e9e68e4e and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x237bb86391b08 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fa14b89e1b8baa0; op2val:0x4030da81e9e68e4e;
op3val:0x3fe237bb86391b08; valaddr_reg:x3; val_offset:201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 201*FLEN/8, x4, x1, x2)

inst_68:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0x14b89e1b8baa0 and fs2 == 0 and fe2 == 0x403 and fm2 == 0x0da81e9e68e4e and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x237bb86391b08 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fa14b89e1b8baa0; op2val:0x4030da81e9e68e4e;
op3val:0x3fe237bb86391b08; valaddr_reg:x3; val_offset:204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 204*FLEN/8, x4, x1, x2)

inst_69:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0x14b89e1b8baa0 and fs2 == 0 and fe2 == 0x403 and fm2 == 0x0da81e9e68e4e and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x237bb86391b08 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fa14b89e1b8baa0; op2val:0x4030da81e9e68e4e;
op3val:0x3fe237bb86391b08; valaddr_reg:x3; val_offset:207*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 207*FLEN/8, x4, x1, x2)

inst_70:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0x8e5a33d138740 and fs2 == 0 and fe2 == 0x402 and fm2 == 0x0ec009cc33766 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xa54df58c723c8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fa8e5a33d138740; op2val:0x4020ec009cc33766;
op3val:0x3fda54df58c723c8; valaddr_reg:x3; val_offset:210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210*FLEN/8, x4, x1, x2)

inst_71:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0x8e5a33d138740 and fs2 == 0 and fe2 == 0x402 and fm2 == 0x0ec009cc33766 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xa54df58c723c8 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fa8e5a33d138740; op2val:0x4020ec009cc33766;
op3val:0x3fda54df58c723c8; valaddr_reg:x3; val_offset:213*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 213*FLEN/8, x4, x1, x2)

inst_72:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0x8e5a33d138740 and fs2 == 0 and fe2 == 0x402 and fm2 == 0x0ec009cc33766 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xa54df58c723c8 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fa8e5a33d138740; op2val:0x4020ec009cc33766;
op3val:0x3fda54df58c723c8; valaddr_reg:x3; val_offset:216*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 216*FLEN/8, x4, x1, x2)

inst_73:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0x8e5a33d138740 and fs2 == 0 and fe2 == 0x402 and fm2 == 0x0ec009cc33766 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xa54df58c723c8 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fa8e5a33d138740; op2val:0x4020ec009cc33766;
op3val:0x3fda54df58c723c8; valaddr_reg:x3; val_offset:219*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 219*FLEN/8, x4, x1, x2)

inst_74:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0x8e5a33d138740 and fs2 == 0 and fe2 == 0x402 and fm2 == 0x0ec009cc33766 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xa54df58c723c8 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fa8e5a33d138740; op2val:0x4020ec009cc33766;
op3val:0x3fda54df58c723c8; valaddr_reg:x3; val_offset:222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 222*FLEN/8, x4, x1, x2)

inst_75:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0x9b436f29ccf50 and fs2 == 0 and fe2 == 0x401 and fm2 == 0x7d927b0aaa6ed and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x327f5748925be and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fa9b436f29ccf50; op2val:0x4017d927b0aaa6ed;
op3val:0x3fd327f5748925be; valaddr_reg:x3; val_offset:225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 225*FLEN/8, x4, x1, x2)

inst_76:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0x9b436f29ccf50 and fs2 == 0 and fe2 == 0x401 and fm2 == 0x7d927b0aaa6ed and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x327f5748925be and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fa9b436f29ccf50; op2val:0x4017d927b0aaa6ed;
op3val:0x3fd327f5748925be; valaddr_reg:x3; val_offset:228*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 228*FLEN/8, x4, x1, x2)

inst_77:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0x9b436f29ccf50 and fs2 == 0 and fe2 == 0x401 and fm2 == 0x7d927b0aaa6ed and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x327f5748925be and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fa9b436f29ccf50; op2val:0x4017d927b0aaa6ed;
op3val:0x3fd327f5748925be; valaddr_reg:x3; val_offset:231*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 231*FLEN/8, x4, x1, x2)

inst_78:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0x9b436f29ccf50 and fs2 == 0 and fe2 == 0x401 and fm2 == 0x7d927b0aaa6ed and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x327f5748925be and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fa9b436f29ccf50; op2val:0x4017d927b0aaa6ed;
op3val:0x3fd327f5748925be; valaddr_reg:x3; val_offset:234*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 234*FLEN/8, x4, x1, x2)

inst_79:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0x9b436f29ccf50 and fs2 == 0 and fe2 == 0x401 and fm2 == 0x7d927b0aaa6ed and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x327f5748925be and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fa9b436f29ccf50; op2val:0x4017d927b0aaa6ed;
op3val:0x3fd327f5748925be; valaddr_reg:x3; val_offset:237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 237*FLEN/8, x4, x1, x2)

inst_80:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0xa95ce8494dbc0 and fs2 == 0 and fe2 == 0x400 and fm2 == 0xd587353ac4e00 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x8613eeff562a4 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3faa95ce8494dbc0; op2val:0x400d587353ac4e00;
op3val:0x3fc8613eeff562a4; valaddr_reg:x3; val_offset:240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240*FLEN/8, x4, x1, x2)

inst_81:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0xa95ce8494dbc0 and fs2 == 0 and fe2 == 0x400 and fm2 == 0xd587353ac4e00 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x8613eeff562a4 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3faa95ce8494dbc0; op2val:0x400d587353ac4e00;
op3val:0x3fc8613eeff562a4; valaddr_reg:x3; val_offset:243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 243*FLEN/8, x4, x1, x2)

inst_82:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0xa95ce8494dbc0 and fs2 == 0 and fe2 == 0x400 and fm2 == 0xd587353ac4e00 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x8613eeff562a4 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3faa95ce8494dbc0; op2val:0x400d587353ac4e00;
op3val:0x3fc8613eeff562a4; valaddr_reg:x3; val_offset:246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 246*FLEN/8, x4, x1, x2)

inst_83:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0xa95ce8494dbc0 and fs2 == 0 and fe2 == 0x400 and fm2 == 0xd587353ac4e00 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x8613eeff562a4 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3faa95ce8494dbc0; op2val:0x400d587353ac4e00;
op3val:0x3fc8613eeff562a4; valaddr_reg:x3; val_offset:249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 249*FLEN/8, x4, x1, x2)

inst_84:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0xa95ce8494dbc0 and fs2 == 0 and fe2 == 0x400 and fm2 == 0xd587353ac4e00 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x8613eeff562a4 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3faa95ce8494dbc0; op2val:0x400d587353ac4e00;
op3val:0x3fc8613eeff562a4; valaddr_reg:x3; val_offset:252*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 252*FLEN/8, x4, x1, x2)

inst_85:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0xaaf0baa339640 and fs2 == 0 and fe2 == 0x402 and fm2 == 0x5a8729a5e20c2 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x20f563541dd6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3faaaf0baa339640; op2val:0x4025a8729a5e20c2;
op3val:0x3fe20f563541dd6d; valaddr_reg:x3; val_offset:255*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255*FLEN/8, x4, x1, x2)

inst_86:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0xaaf0baa339640 and fs2 == 0 and fe2 == 0x402 and fm2 == 0x5a8729a5e20c2 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x20f563541dd6d and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3faaaf0baa339640; op2val:0x4025a8729a5e20c2;
op3val:0x3fe20f563541dd6d; valaddr_reg:x3; val_offset:258*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 258*FLEN/8, x4, x1, x2)

inst_87:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0xaaf0baa339640 and fs2 == 0 and fe2 == 0x402 and fm2 == 0x5a8729a5e20c2 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x20f563541dd6d and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3faaaf0baa339640; op2val:0x4025a8729a5e20c2;
op3val:0x3fe20f563541dd6d; valaddr_reg:x3; val_offset:261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 261*FLEN/8, x4, x1, x2)

inst_88:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0xaaf0baa339640 and fs2 == 0 and fe2 == 0x402 and fm2 == 0x5a8729a5e20c2 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x20f563541dd6d and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3faaaf0baa339640; op2val:0x4025a8729a5e20c2;
op3val:0x3fe20f563541dd6d; valaddr_reg:x3; val_offset:264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 264*FLEN/8, x4, x1, x2)

inst_89:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0xaaf0baa339640 and fs2 == 0 and fe2 == 0x402 and fm2 == 0x5a8729a5e20c2 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x20f563541dd6d and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3faaaf0baa339640; op2val:0x4025a8729a5e20c2;
op3val:0x3fe20f563541dd6d; valaddr_reg:x3; val_offset:267*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 267*FLEN/8, x4, x1, x2)

inst_90:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0xee364fdd51a90 and fs2 == 0 and fe2 == 0x402 and fm2 == 0xe60a797998564 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xd527aa1fd8971 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3faee364fdd51a90; op2val:0x402e60a797998564;
op3val:0x3fed527aa1fd8971; valaddr_reg:x3; val_offset:270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 270*FLEN/8, x4, x1, x2)

inst_91:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0xee364fdd51a90 and fs2 == 0 and fe2 == 0x402 and fm2 == 0xe60a797998564 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xd527aa1fd8971 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3faee364fdd51a90; op2val:0x402e60a797998564;
op3val:0x3fed527aa1fd8971; valaddr_reg:x3; val_offset:273*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 273*FLEN/8, x4, x1, x2)

inst_92:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0xee364fdd51a90 and fs2 == 0 and fe2 == 0x402 and fm2 == 0xe60a797998564 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xd527aa1fd8971 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3faee364fdd51a90; op2val:0x402e60a797998564;
op3val:0x3fed527aa1fd8971; valaddr_reg:x3; val_offset:276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 276*FLEN/8, x4, x1, x2)

inst_93:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0xee364fdd51a90 and fs2 == 0 and fe2 == 0x402 and fm2 == 0xe60a797998564 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xd527aa1fd8971 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3faee364fdd51a90; op2val:0x402e60a797998564;
op3val:0x3fed527aa1fd8971; valaddr_reg:x3; val_offset:279*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 279*FLEN/8, x4, x1, x2)

inst_94:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0xee364fdd51a90 and fs2 == 0 and fe2 == 0x402 and fm2 == 0xe60a797998564 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xd527aa1fd8971 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3faee364fdd51a90; op2val:0x402e60a797998564;
op3val:0x3fed527aa1fd8971; valaddr_reg:x3; val_offset:282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 282*FLEN/8, x4, x1, x2)

inst_95:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x2c8dd4b740698 and fs2 == 0 and fe2 == 0x402 and fm2 == 0x8d3162be43595 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xd251edf391baf and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fb2c8dd4b740698; op2val:0x4028d3162be43595;
op3val:0x3fed251edf391baf; valaddr_reg:x3; val_offset:285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 285*FLEN/8, x4, x1, x2)

inst_96:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x2c8dd4b740698 and fs2 == 0 and fe2 == 0x402 and fm2 == 0x8d3162be43595 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xd251edf391baf and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fb2c8dd4b740698; op2val:0x4028d3162be43595;
op3val:0x3fed251edf391baf; valaddr_reg:x3; val_offset:288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 288*FLEN/8, x4, x1, x2)

inst_97:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x2c8dd4b740698 and fs2 == 0 and fe2 == 0x402 and fm2 == 0x8d3162be43595 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xd251edf391baf and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fb2c8dd4b740698; op2val:0x4028d3162be43595;
op3val:0x3fed251edf391baf; valaddr_reg:x3; val_offset:291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 291*FLEN/8, x4, x1, x2)

inst_98:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x2c8dd4b740698 and fs2 == 0 and fe2 == 0x402 and fm2 == 0x8d3162be43595 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xd251edf391baf and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fb2c8dd4b740698; op2val:0x4028d3162be43595;
op3val:0x3fed251edf391baf; valaddr_reg:x3; val_offset:294*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 294*FLEN/8, x4, x1, x2)

inst_99:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x2c8dd4b740698 and fs2 == 0 and fe2 == 0x402 and fm2 == 0x8d3162be43595 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xd251edf391baf and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fb2c8dd4b740698; op2val:0x4028d3162be43595;
op3val:0x3fed251edf391baf; valaddr_reg:x3; val_offset:297*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 297*FLEN/8, x4, x1, x2)

inst_100:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x3b122ac2d8660 and fs2 == 0 and fe2 == 0x402 and fm2 == 0x039233f6888d2 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x3f7751938e17e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fb3b122ac2d8660; op2val:0x402039233f6888d2;
op3val:0x3fe3f7751938e17e; valaddr_reg:x3; val_offset:300*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300*FLEN/8, x4, x1, x2)

inst_101:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x3b122ac2d8660 and fs2 == 0 and fe2 == 0x402 and fm2 == 0x039233f6888d2 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x3f7751938e17e and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fb3b122ac2d8660; op2val:0x402039233f6888d2;
op3val:0x3fe3f7751938e17e; valaddr_reg:x3; val_offset:303*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 303*FLEN/8, x4, x1, x2)

inst_102:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x3b122ac2d8660 and fs2 == 0 and fe2 == 0x402 and fm2 == 0x039233f6888d2 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x3f7751938e17e and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fb3b122ac2d8660; op2val:0x402039233f6888d2;
op3val:0x3fe3f7751938e17e; valaddr_reg:x3; val_offset:306*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 306*FLEN/8, x4, x1, x2)

inst_103:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x3b122ac2d8660 and fs2 == 0 and fe2 == 0x402 and fm2 == 0x039233f6888d2 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x3f7751938e17e and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fb3b122ac2d8660; op2val:0x402039233f6888d2;
op3val:0x3fe3f7751938e17e; valaddr_reg:x3; val_offset:309*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 309*FLEN/8, x4, x1, x2)

inst_104:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x3b122ac2d8660 and fs2 == 0 and fe2 == 0x402 and fm2 == 0x039233f6888d2 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x3f7751938e17e and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fb3b122ac2d8660; op2val:0x402039233f6888d2;
op3val:0x3fe3f7751938e17e; valaddr_reg:x3; val_offset:312*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 312*FLEN/8, x4, x1, x2)

inst_105:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x3ed20141d0ab0 and fs2 == 0 and fe2 == 0x402 and fm2 == 0x8dfede6d1dade and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xefa91552515e2 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fb3ed20141d0ab0; op2val:0x4028dfede6d1dade;
op3val:0x3feefa91552515e2; valaddr_reg:x3; val_offset:315*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 315*FLEN/8, x4, x1, x2)

inst_106:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x3ed20141d0ab0 and fs2 == 0 and fe2 == 0x402 and fm2 == 0x8dfede6d1dade and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xefa91552515e2 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fb3ed20141d0ab0; op2val:0x4028dfede6d1dade;
op3val:0x3feefa91552515e2; valaddr_reg:x3; val_offset:318*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 318*FLEN/8, x4, x1, x2)

inst_107:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x3ed20141d0ab0 and fs2 == 0 and fe2 == 0x402 and fm2 == 0x8dfede6d1dade and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xefa91552515e2 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fb3ed20141d0ab0; op2val:0x4028dfede6d1dade;
op3val:0x3feefa91552515e2; valaddr_reg:x3; val_offset:321*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 321*FLEN/8, x4, x1, x2)

inst_108:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x3ed20141d0ab0 and fs2 == 0 and fe2 == 0x402 and fm2 == 0x8dfede6d1dade and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xefa91552515e2 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fb3ed20141d0ab0; op2val:0x4028dfede6d1dade;
op3val:0x3feefa91552515e2; valaddr_reg:x3; val_offset:324*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 324*FLEN/8, x4, x1, x2)

inst_109:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x3ed20141d0ab0 and fs2 == 0 and fe2 == 0x402 and fm2 == 0x8dfede6d1dade and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xefa91552515e2 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fb3ed20141d0ab0; op2val:0x4028dfede6d1dade;
op3val:0x3feefa91552515e2; valaddr_reg:x3; val_offset:327*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 327*FLEN/8, x4, x1, x2)

inst_110:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x487eedf071008 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x8ed36a783bd36 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0xffc49f28c3a58 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fb487eedf071008; op2val:0x4008ed36a783bd36;
op3val:0x3fcffc49f28c3a58; valaddr_reg:x3; val_offset:330*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 330*FLEN/8, x4, x1, x2)

inst_111:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x487eedf071008 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x8ed36a783bd36 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0xffc49f28c3a58 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fb487eedf071008; op2val:0x4008ed36a783bd36;
op3val:0x3fcffc49f28c3a58; valaddr_reg:x3; val_offset:333*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 333*FLEN/8, x4, x1, x2)

inst_112:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x487eedf071008 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x8ed36a783bd36 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0xffc49f28c3a58 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fb487eedf071008; op2val:0x4008ed36a783bd36;
op3val:0x3fcffc49f28c3a58; valaddr_reg:x3; val_offset:336*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 336*FLEN/8, x4, x1, x2)

inst_113:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x487eedf071008 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x8ed36a783bd36 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0xffc49f28c3a58 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fb487eedf071008; op2val:0x4008ed36a783bd36;
op3val:0x3fcffc49f28c3a58; valaddr_reg:x3; val_offset:339*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 339*FLEN/8, x4, x1, x2)

inst_114:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x487eedf071008 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x8ed36a783bd36 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0xffc49f28c3a58 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fb487eedf071008; op2val:0x4008ed36a783bd36;
op3val:0x3fcffc49f28c3a58; valaddr_reg:x3; val_offset:342*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 342*FLEN/8, x4, x1, x2)

inst_115:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x4b29cb1576348 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x9c6f631e36b2d and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x0ac3ad16ebde0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fb4b29cb1576348; op2val:0x3ff9c6f631e36b2d;
op3val:0x3fc0ac3ad16ebde0; valaddr_reg:x3; val_offset:345*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 345*FLEN/8, x4, x1, x2)

inst_116:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x4b29cb1576348 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x9c6f631e36b2d and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x0ac3ad16ebde0 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fb4b29cb1576348; op2val:0x3ff9c6f631e36b2d;
op3val:0x3fc0ac3ad16ebde0; valaddr_reg:x3; val_offset:348*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 348*FLEN/8, x4, x1, x2)

inst_117:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x4b29cb1576348 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x9c6f631e36b2d and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x0ac3ad16ebde0 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fb4b29cb1576348; op2val:0x3ff9c6f631e36b2d;
op3val:0x3fc0ac3ad16ebde0; valaddr_reg:x3; val_offset:351*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 351*FLEN/8, x4, x1, x2)

inst_118:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x4b29cb1576348 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x9c6f631e36b2d and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x0ac3ad16ebde0 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fb4b29cb1576348; op2val:0x3ff9c6f631e36b2d;
op3val:0x3fc0ac3ad16ebde0; valaddr_reg:x3; val_offset:354*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 354*FLEN/8, x4, x1, x2)

inst_119:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x4b29cb1576348 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x9c6f631e36b2d and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x0ac3ad16ebde0 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fb4b29cb1576348; op2val:0x3ff9c6f631e36b2d;
op3val:0x3fc0ac3ad16ebde0; valaddr_reg:x3; val_offset:357*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 357*FLEN/8, x4, x1, x2)

inst_120:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x69c8e1dd0a5f0 and fs2 == 0 and fe2 == 0x402 and fm2 == 0x0709fe2da1c7b and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x73bb7f4fd3778 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fb69c8e1dd0a5f0; op2val:0x4020709fe2da1c7b;
op3val:0x3fe73bb7f4fd3778; valaddr_reg:x3; val_offset:360*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 360*FLEN/8, x4, x1, x2)

inst_121:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x69c8e1dd0a5f0 and fs2 == 0 and fe2 == 0x402 and fm2 == 0x0709fe2da1c7b and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x73bb7f4fd3778 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fb69c8e1dd0a5f0; op2val:0x4020709fe2da1c7b;
op3val:0x3fe73bb7f4fd3778; valaddr_reg:x3; val_offset:363*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 363*FLEN/8, x4, x1, x2)

inst_122:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x69c8e1dd0a5f0 and fs2 == 0 and fe2 == 0x402 and fm2 == 0x0709fe2da1c7b and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x73bb7f4fd3778 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fb69c8e1dd0a5f0; op2val:0x4020709fe2da1c7b;
op3val:0x3fe73bb7f4fd3778; valaddr_reg:x3; val_offset:366*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 366*FLEN/8, x4, x1, x2)

inst_123:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x69c8e1dd0a5f0 and fs2 == 0 and fe2 == 0x402 and fm2 == 0x0709fe2da1c7b and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x73bb7f4fd3778 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fb69c8e1dd0a5f0; op2val:0x4020709fe2da1c7b;
op3val:0x3fe73bb7f4fd3778; valaddr_reg:x3; val_offset:369*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 369*FLEN/8, x4, x1, x2)

inst_124:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x69c8e1dd0a5f0 and fs2 == 0 and fe2 == 0x402 and fm2 == 0x0709fe2da1c7b and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x73bb7f4fd3778 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fb69c8e1dd0a5f0; op2val:0x4020709fe2da1c7b;
op3val:0x3fe73bb7f4fd3778; valaddr_reg:x3; val_offset:372*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 372*FLEN/8, x4, x1, x2)

inst_125:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x6ae9917839a60 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x0a99cdae1e5a0 and fs3 == 0 and fe3 == 0x3fb and fm3 == 0x79f0ba52bc060 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fb6ae9917839a60; op2val:0x3ff0a99cdae1e5a0;
op3val:0x3fb79f0ba52bc060; valaddr_reg:x3; val_offset:375*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 375*FLEN/8, x4, x1, x2)

inst_126:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x6ae9917839a60 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x0a99cdae1e5a0 and fs3 == 0 and fe3 == 0x3fb and fm3 == 0x79f0ba52bc060 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fb6ae9917839a60; op2val:0x3ff0a99cdae1e5a0;
op3val:0x3fb79f0ba52bc060; valaddr_reg:x3; val_offset:378*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 378*FLEN/8, x4, x1, x2)

inst_127:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x6ae9917839a60 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x0a99cdae1e5a0 and fs3 == 0 and fe3 == 0x3fb and fm3 == 0x79f0ba52bc060 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fb6ae9917839a60; op2val:0x3ff0a99cdae1e5a0;
op3val:0x3fb79f0ba52bc060; valaddr_reg:x3; val_offset:381*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 381*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_2)

inst_128:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x6ae9917839a60 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x0a99cdae1e5a0 and fs3 == 0 and fe3 == 0x3fb and fm3 == 0x79f0ba52bc060 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fb6ae9917839a60; op2val:0x3ff0a99cdae1e5a0;
op3val:0x3fb79f0ba52bc060; valaddr_reg:x3; val_offset:384*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 384*FLEN/8, x4, x1, x2)

inst_129:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x6ae9917839a60 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x0a99cdae1e5a0 and fs3 == 0 and fe3 == 0x3fb and fm3 == 0x79f0ba52bc060 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fb6ae9917839a60; op2val:0x3ff0a99cdae1e5a0;
op3val:0x3fb79f0ba52bc060; valaddr_reg:x3; val_offset:387*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 387*FLEN/8, x4, x1, x2)

inst_130:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x6e4343bf90580 and fs2 == 0 and fe2 == 0x401 and fm2 == 0x9fbe4b6baa77b and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x2967a653c9031 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fb6e4343bf90580; op2val:0x4019fbe4b6baa77b;
op3val:0x3fe2967a653c9031; valaddr_reg:x3; val_offset:390*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 390*FLEN/8, x4, x1, x2)

inst_131:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x6e4343bf90580 and fs2 == 0 and fe2 == 0x401 and fm2 == 0x9fbe4b6baa77b and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x2967a653c9031 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fb6e4343bf90580; op2val:0x4019fbe4b6baa77b;
op3val:0x3fe2967a653c9031; valaddr_reg:x3; val_offset:393*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 393*FLEN/8, x4, x1, x2)

inst_132:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x6e4343bf90580 and fs2 == 0 and fe2 == 0x401 and fm2 == 0x9fbe4b6baa77b and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x2967a653c9031 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fb6e4343bf90580; op2val:0x4019fbe4b6baa77b;
op3val:0x3fe2967a653c9031; valaddr_reg:x3; val_offset:396*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 396*FLEN/8, x4, x1, x2)

inst_133:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x6e4343bf90580 and fs2 == 0 and fe2 == 0x401 and fm2 == 0x9fbe4b6baa77b and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x2967a653c9031 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fb6e4343bf90580; op2val:0x4019fbe4b6baa77b;
op3val:0x3fe2967a653c9031; valaddr_reg:x3; val_offset:399*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 399*FLEN/8, x4, x1, x2)

inst_134:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x6e4343bf90580 and fs2 == 0 and fe2 == 0x401 and fm2 == 0x9fbe4b6baa77b and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x2967a653c9031 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fb6e4343bf90580; op2val:0x4019fbe4b6baa77b;
op3val:0x3fe2967a653c9031; valaddr_reg:x3; val_offset:402*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 402*FLEN/8, x4, x1, x2)

inst_135:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x6eeec22c7d000 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xd1e726c40bda2 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x4de57fda3ae70 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fb6eeec22c7d000; op2val:0x3ffd1e726c40bda2;
op3val:0x3fc4de57fda3ae70; valaddr_reg:x3; val_offset:405*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 405*FLEN/8, x4, x1, x2)

inst_136:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x6eeec22c7d000 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xd1e726c40bda2 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x4de57fda3ae70 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fb6eeec22c7d000; op2val:0x3ffd1e726c40bda2;
op3val:0x3fc4de57fda3ae70; valaddr_reg:x3; val_offset:408*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 408*FLEN/8, x4, x1, x2)

inst_137:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x6eeec22c7d000 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xd1e726c40bda2 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x4de57fda3ae70 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fb6eeec22c7d000; op2val:0x3ffd1e726c40bda2;
op3val:0x3fc4de57fda3ae70; valaddr_reg:x3; val_offset:411*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 411*FLEN/8, x4, x1, x2)

inst_138:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x6eeec22c7d000 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xd1e726c40bda2 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x4de57fda3ae70 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fb6eeec22c7d000; op2val:0x3ffd1e726c40bda2;
op3val:0x3fc4de57fda3ae70; valaddr_reg:x3; val_offset:414*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 414*FLEN/8, x4, x1, x2)

inst_139:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x6eeec22c7d000 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xd1e726c40bda2 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x4de57fda3ae70 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fb6eeec22c7d000; op2val:0x3ffd1e726c40bda2;
op3val:0x3fc4de57fda3ae70; valaddr_reg:x3; val_offset:417*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 417*FLEN/8, x4, x1, x2)

inst_140:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x725ecb20be3d8 and fs2 == 0 and fe2 == 0x401 and fm2 == 0xb92d6784a83ba and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x3f237e2c963c6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fb725ecb20be3d8; op2val:0x401b92d6784a83ba;
op3val:0x3fe3f237e2c963c6; valaddr_reg:x3; val_offset:420*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 420*FLEN/8, x4, x1, x2)

inst_141:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x725ecb20be3d8 and fs2 == 0 and fe2 == 0x401 and fm2 == 0xb92d6784a83ba and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x3f237e2c963c6 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fb725ecb20be3d8; op2val:0x401b92d6784a83ba;
op3val:0x3fe3f237e2c963c6; valaddr_reg:x3; val_offset:423*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 423*FLEN/8, x4, x1, x2)

inst_142:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x725ecb20be3d8 and fs2 == 0 and fe2 == 0x401 and fm2 == 0xb92d6784a83ba and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x3f237e2c963c6 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fb725ecb20be3d8; op2val:0x401b92d6784a83ba;
op3val:0x3fe3f237e2c963c6; valaddr_reg:x3; val_offset:426*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 426*FLEN/8, x4, x1, x2)

inst_143:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x725ecb20be3d8 and fs2 == 0 and fe2 == 0x401 and fm2 == 0xb92d6784a83ba and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x3f237e2c963c6 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fb725ecb20be3d8; op2val:0x401b92d6784a83ba;
op3val:0x3fe3f237e2c963c6; valaddr_reg:x3; val_offset:429*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 429*FLEN/8, x4, x1, x2)

inst_144:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x725ecb20be3d8 and fs2 == 0 and fe2 == 0x401 and fm2 == 0xb92d6784a83ba and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x3f237e2c963c6 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fb725ecb20be3d8; op2val:0x401b92d6784a83ba;
op3val:0x3fe3f237e2c963c6; valaddr_reg:x3; val_offset:432*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 432*FLEN/8, x4, x1, x2)

inst_145:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x72a4619cd0568 and fs2 == 0 and fe2 == 0x401 and fm2 == 0x5745c9c405eb7 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xf0ff493649790 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fb72a4619cd0568; op2val:0x4015745c9c405eb7;
op3val:0x3fdf0ff493649790; valaddr_reg:x3; val_offset:435*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 435*FLEN/8, x4, x1, x2)

inst_146:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x72a4619cd0568 and fs2 == 0 and fe2 == 0x401 and fm2 == 0x5745c9c405eb7 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xf0ff493649790 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fb72a4619cd0568; op2val:0x4015745c9c405eb7;
op3val:0x3fdf0ff493649790; valaddr_reg:x3; val_offset:438*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 438*FLEN/8, x4, x1, x2)

inst_147:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x72a4619cd0568 and fs2 == 0 and fe2 == 0x401 and fm2 == 0x5745c9c405eb7 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xf0ff493649790 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fb72a4619cd0568; op2val:0x4015745c9c405eb7;
op3val:0x3fdf0ff493649790; valaddr_reg:x3; val_offset:441*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 441*FLEN/8, x4, x1, x2)

inst_148:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x72a4619cd0568 and fs2 == 0 and fe2 == 0x401 and fm2 == 0x5745c9c405eb7 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xf0ff493649790 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fb72a4619cd0568; op2val:0x4015745c9c405eb7;
op3val:0x3fdf0ff493649790; valaddr_reg:x3; val_offset:444*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 444*FLEN/8, x4, x1, x2)

inst_149:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x72a4619cd0568 and fs2 == 0 and fe2 == 0x401 and fm2 == 0x5745c9c405eb7 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xf0ff493649790 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fb72a4619cd0568; op2val:0x4015745c9c405eb7;
op3val:0x3fdf0ff493649790; valaddr_reg:x3; val_offset:447*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 447*FLEN/8, x4, x1, x2)

inst_150:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x75a90c21bb1b0 and fs2 == 0 and fe2 == 0x401 and fm2 == 0x883ff60324878 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x1e441b215561c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fb75a90c21bb1b0; op2val:0x401883ff60324878;
op3val:0x3fe1e441b215561c; valaddr_reg:x3; val_offset:450*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 450*FLEN/8, x4, x1, x2)

inst_151:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x75a90c21bb1b0 and fs2 == 0 and fe2 == 0x401 and fm2 == 0x883ff60324878 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x1e441b215561c and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fb75a90c21bb1b0; op2val:0x401883ff60324878;
op3val:0x3fe1e441b215561c; valaddr_reg:x3; val_offset:453*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 453*FLEN/8, x4, x1, x2)

inst_152:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x75a90c21bb1b0 and fs2 == 0 and fe2 == 0x401 and fm2 == 0x883ff60324878 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x1e441b215561c and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fb75a90c21bb1b0; op2val:0x401883ff60324878;
op3val:0x3fe1e441b215561c; valaddr_reg:x3; val_offset:456*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 456*FLEN/8, x4, x1, x2)

inst_153:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x75a90c21bb1b0 and fs2 == 0 and fe2 == 0x401 and fm2 == 0x883ff60324878 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x1e441b215561c and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fb75a90c21bb1b0; op2val:0x401883ff60324878;
op3val:0x3fe1e441b215561c; valaddr_reg:x3; val_offset:459*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 459*FLEN/8, x4, x1, x2)

inst_154:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x75a90c21bb1b0 and fs2 == 0 and fe2 == 0x401 and fm2 == 0x883ff60324878 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x1e441b215561c and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fb75a90c21bb1b0; op2val:0x401883ff60324878;
op3val:0x3fe1e441b215561c; valaddr_reg:x3; val_offset:462*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 462*FLEN/8, x4, x1, x2)

inst_155:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x8db1435eb6450 and fs2 == 0 and fe2 == 0x401 and fm2 == 0xa3432a1fcbbc6 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x45a8bc0c9010c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fb8db1435eb6450; op2val:0x401a3432a1fcbbc6;
op3val:0x3fe45a8bc0c9010c; valaddr_reg:x3; val_offset:465*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 465*FLEN/8, x4, x1, x2)

inst_156:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x8db1435eb6450 and fs2 == 0 and fe2 == 0x401 and fm2 == 0xa3432a1fcbbc6 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x45a8bc0c9010c and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fb8db1435eb6450; op2val:0x401a3432a1fcbbc6;
op3val:0x3fe45a8bc0c9010c; valaddr_reg:x3; val_offset:468*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 468*FLEN/8, x4, x1, x2)

inst_157:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x8db1435eb6450 and fs2 == 0 and fe2 == 0x401 and fm2 == 0xa3432a1fcbbc6 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x45a8bc0c9010c and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fb8db1435eb6450; op2val:0x401a3432a1fcbbc6;
op3val:0x3fe45a8bc0c9010c; valaddr_reg:x3; val_offset:471*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 471*FLEN/8, x4, x1, x2)

inst_158:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x8db1435eb6450 and fs2 == 0 and fe2 == 0x401 and fm2 == 0xa3432a1fcbbc6 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x45a8bc0c9010c and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fb8db1435eb6450; op2val:0x401a3432a1fcbbc6;
op3val:0x3fe45a8bc0c9010c; valaddr_reg:x3; val_offset:474*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 474*FLEN/8, x4, x1, x2)

inst_159:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x8db1435eb6450 and fs2 == 0 and fe2 == 0x401 and fm2 == 0xa3432a1fcbbc6 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x45a8bc0c9010c and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fb8db1435eb6450; op2val:0x401a3432a1fcbbc6;
op3val:0x3fe45a8bc0c9010c; valaddr_reg:x3; val_offset:477*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 477*FLEN/8, x4, x1, x2)

inst_160:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x954b43f9b9e68 and fs2 == 0 and fe2 == 0x402 and fm2 == 0x20b0d1d765829 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xc90c9c6f223d8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fb954b43f9b9e68; op2val:0x40220b0d1d765829;
op3val:0x3fec90c9c6f223d8; valaddr_reg:x3; val_offset:480*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 480*FLEN/8, x4, x1, x2)

inst_161:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x954b43f9b9e68 and fs2 == 0 and fe2 == 0x402 and fm2 == 0x20b0d1d765829 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xc90c9c6f223d8 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fb954b43f9b9e68; op2val:0x40220b0d1d765829;
op3val:0x3fec90c9c6f223d8; valaddr_reg:x3; val_offset:483*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 483*FLEN/8, x4, x1, x2)

inst_162:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x954b43f9b9e68 and fs2 == 0 and fe2 == 0x402 and fm2 == 0x20b0d1d765829 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xc90c9c6f223d8 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fb954b43f9b9e68; op2val:0x40220b0d1d765829;
op3val:0x3fec90c9c6f223d8; valaddr_reg:x3; val_offset:486*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 486*FLEN/8, x4, x1, x2)

inst_163:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x954b43f9b9e68 and fs2 == 0 and fe2 == 0x402 and fm2 == 0x20b0d1d765829 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xc90c9c6f223d8 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fb954b43f9b9e68; op2val:0x40220b0d1d765829;
op3val:0x3fec90c9c6f223d8; valaddr_reg:x3; val_offset:489*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 489*FLEN/8, x4, x1, x2)

inst_164:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x954b43f9b9e68 and fs2 == 0 and fe2 == 0x402 and fm2 == 0x20b0d1d765829 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xc90c9c6f223d8 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fb954b43f9b9e68; op2val:0x40220b0d1d765829;
op3val:0x3fec90c9c6f223d8; valaddr_reg:x3; val_offset:492*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 492*FLEN/8, x4, x1, x2)

inst_165:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x9c43d93929920 and fs2 == 0 and fe2 == 0x402 and fm2 == 0x0cdbd0b5dfd94 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xb0f9058eb05f7 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fb9c43d93929920; op2val:0x4020cdbd0b5dfd94;
op3val:0x3feb0f9058eb05f7; valaddr_reg:x3; val_offset:495*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 495*FLEN/8, x4, x1, x2)

inst_166:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x9c43d93929920 and fs2 == 0 and fe2 == 0x402 and fm2 == 0x0cdbd0b5dfd94 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xb0f9058eb05f7 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fb9c43d93929920; op2val:0x4020cdbd0b5dfd94;
op3val:0x3feb0f9058eb05f7; valaddr_reg:x3; val_offset:498*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 498*FLEN/8, x4, x1, x2)

inst_167:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x9c43d93929920 and fs2 == 0 and fe2 == 0x402 and fm2 == 0x0cdbd0b5dfd94 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xb0f9058eb05f7 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fb9c43d93929920; op2val:0x4020cdbd0b5dfd94;
op3val:0x3feb0f9058eb05f7; valaddr_reg:x3; val_offset:501*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 501*FLEN/8, x4, x1, x2)

inst_168:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x9c43d93929920 and fs2 == 0 and fe2 == 0x402 and fm2 == 0x0cdbd0b5dfd94 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xb0f9058eb05f7 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fb9c43d93929920; op2val:0x4020cdbd0b5dfd94;
op3val:0x3feb0f9058eb05f7; valaddr_reg:x3; val_offset:504*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 504*FLEN/8, x4, x1, x2)

inst_169:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x9c43d93929920 and fs2 == 0 and fe2 == 0x402 and fm2 == 0x0cdbd0b5dfd94 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xb0f9058eb05f7 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fb9c43d93929920; op2val:0x4020cdbd0b5dfd94;
op3val:0x3feb0f9058eb05f7; valaddr_reg:x3; val_offset:507*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 507*FLEN/8, x4, x1, x2)

inst_170:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0xa969c6b6f5848 and fs2 == 0 and fe2 == 0x402 and fm2 == 0x020dc59b54699 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xacd37d03fff64 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fba969c6b6f5848; op2val:0x402020dc59b54699;
op3val:0x3feacd37d03fff64; valaddr_reg:x3; val_offset:510*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 510*FLEN/8, x4, x1, x2)

inst_171:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0xa969c6b6f5848 and fs2 == 0 and fe2 == 0x402 and fm2 == 0x020dc59b54699 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xacd37d03fff64 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fba969c6b6f5848; op2val:0x402020dc59b54699;
op3val:0x3feacd37d03fff64; valaddr_reg:x3; val_offset:513*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 513*FLEN/8, x4, x1, x2)

inst_172:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0xa969c6b6f5848 and fs2 == 0 and fe2 == 0x402 and fm2 == 0x020dc59b54699 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xacd37d03fff64 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fba969c6b6f5848; op2val:0x402020dc59b54699;
op3val:0x3feacd37d03fff64; valaddr_reg:x3; val_offset:516*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 516*FLEN/8, x4, x1, x2)

inst_173:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0xa969c6b6f5848 and fs2 == 0 and fe2 == 0x402 and fm2 == 0x020dc59b54699 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xacd37d03fff64 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fba969c6b6f5848; op2val:0x402020dc59b54699;
op3val:0x3feacd37d03fff64; valaddr_reg:x3; val_offset:519*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 519*FLEN/8, x4, x1, x2)

inst_174:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0xa969c6b6f5848 and fs2 == 0 and fe2 == 0x402 and fm2 == 0x020dc59b54699 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xacd37d03fff64 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fba969c6b6f5848; op2val:0x402020dc59b54699;
op3val:0x3feacd37d03fff64; valaddr_reg:x3; val_offset:522*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 522*FLEN/8, x4, x1, x2)

inst_175:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0xb3015f61331b8 and fs2 == 0 and fe2 == 0x401 and fm2 == 0xc9bbc395d47d3 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x84e640ceea60f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fbb3015f61331b8; op2val:0x401c9bbc395d47d3;
op3val:0x3fe84e640ceea60f; valaddr_reg:x3; val_offset:525*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 525*FLEN/8, x4, x1, x2)

inst_176:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0xb3015f61331b8 and fs2 == 0 and fe2 == 0x401 and fm2 == 0xc9bbc395d47d3 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x84e640ceea60f and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fbb3015f61331b8; op2val:0x401c9bbc395d47d3;
op3val:0x3fe84e640ceea60f; valaddr_reg:x3; val_offset:528*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 528*FLEN/8, x4, x1, x2)

inst_177:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0xb3015f61331b8 and fs2 == 0 and fe2 == 0x401 and fm2 == 0xc9bbc395d47d3 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x84e640ceea60f and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fbb3015f61331b8; op2val:0x401c9bbc395d47d3;
op3val:0x3fe84e640ceea60f; valaddr_reg:x3; val_offset:531*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 531*FLEN/8, x4, x1, x2)

inst_178:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0xb3015f61331b8 and fs2 == 0 and fe2 == 0x401 and fm2 == 0xc9bbc395d47d3 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x84e640ceea60f and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fbb3015f61331b8; op2val:0x401c9bbc395d47d3;
op3val:0x3fe84e640ceea60f; valaddr_reg:x3; val_offset:534*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 534*FLEN/8, x4, x1, x2)

inst_179:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0xb3015f61331b8 and fs2 == 0 and fe2 == 0x401 and fm2 == 0xc9bbc395d47d3 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x84e640ceea60f and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fbb3015f61331b8; op2val:0x401c9bbc395d47d3;
op3val:0x3fe84e640ceea60f; valaddr_reg:x3; val_offset:537*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 537*FLEN/8, x4, x1, x2)

inst_180:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0xb510aeb102548 and fs2 == 0 and fe2 == 0x401 and fm2 == 0x48b0c143b1155 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x189592a0050a0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fbb510aeb102548; op2val:0x40148b0c143b1155;
op3val:0x3fe189592a0050a0; valaddr_reg:x3; val_offset:540*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 540*FLEN/8, x4, x1, x2)

inst_181:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0xb510aeb102548 and fs2 == 0 and fe2 == 0x401 and fm2 == 0x48b0c143b1155 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x189592a0050a0 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fbb510aeb102548; op2val:0x40148b0c143b1155;
op3val:0x3fe189592a0050a0; valaddr_reg:x3; val_offset:543*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 543*FLEN/8, x4, x1, x2)

inst_182:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0xb510aeb102548 and fs2 == 0 and fe2 == 0x401 and fm2 == 0x48b0c143b1155 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x189592a0050a0 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fbb510aeb102548; op2val:0x40148b0c143b1155;
op3val:0x3fe189592a0050a0; valaddr_reg:x3; val_offset:546*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 546*FLEN/8, x4, x1, x2)

inst_183:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0xb510aeb102548 and fs2 == 0 and fe2 == 0x401 and fm2 == 0x48b0c143b1155 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x189592a0050a0 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fbb510aeb102548; op2val:0x40148b0c143b1155;
op3val:0x3fe189592a0050a0; valaddr_reg:x3; val_offset:549*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 549*FLEN/8, x4, x1, x2)

inst_184:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0xb510aeb102548 and fs2 == 0 and fe2 == 0x401 and fm2 == 0x48b0c143b1155 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x189592a0050a0 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fbb510aeb102548; op2val:0x40148b0c143b1155;
op3val:0x3fe189592a0050a0; valaddr_reg:x3; val_offset:552*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 552*FLEN/8, x4, x1, x2)

inst_185:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0xe31fd14064850 and fs2 == 0 and fe2 == 0x401 and fm2 == 0xa88296f8fd225 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x909192d2b92a8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fbe31fd14064850; op2val:0x401a88296f8fd225;
op3val:0x3fe909192d2b92a8; valaddr_reg:x3; val_offset:555*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 555*FLEN/8, x4, x1, x2)

inst_186:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0xe31fd14064850 and fs2 == 0 and fe2 == 0x401 and fm2 == 0xa88296f8fd225 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x909192d2b92a8 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fbe31fd14064850; op2val:0x401a88296f8fd225;
op3val:0x3fe909192d2b92a8; valaddr_reg:x3; val_offset:558*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 558*FLEN/8, x4, x1, x2)

inst_187:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0xe31fd14064850 and fs2 == 0 and fe2 == 0x401 and fm2 == 0xa88296f8fd225 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x909192d2b92a8 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fbe31fd14064850; op2val:0x401a88296f8fd225;
op3val:0x3fe909192d2b92a8; valaddr_reg:x3; val_offset:561*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 561*FLEN/8, x4, x1, x2)

inst_188:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0xe31fd14064850 and fs2 == 0 and fe2 == 0x401 and fm2 == 0xa88296f8fd225 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x909192d2b92a8 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fbe31fd14064850; op2val:0x401a88296f8fd225;
op3val:0x3fe909192d2b92a8; valaddr_reg:x3; val_offset:564*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 564*FLEN/8, x4, x1, x2)

inst_189:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0xe31fd14064850 and fs2 == 0 and fe2 == 0x401 and fm2 == 0xa88296f8fd225 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x909192d2b92a8 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fbe31fd14064850; op2val:0x401a88296f8fd225;
op3val:0x3fe909192d2b92a8; valaddr_reg:x3; val_offset:567*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 567*FLEN/8, x4, x1, x2)

inst_190:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0xeb3272a48c640 and fs2 == 0 and fe2 == 0x400 and fm2 == 0xfab8074446c94 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xe6216866830ec and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fbeb3272a48c640; op2val:0x400fab8074446c94;
op3val:0x3fde6216866830ec; valaddr_reg:x3; val_offset:570*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 570*FLEN/8, x4, x1, x2)

inst_191:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0xeb3272a48c640 and fs2 == 0 and fe2 == 0x400 and fm2 == 0xfab8074446c94 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xe6216866830ec and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fbeb3272a48c640; op2val:0x400fab8074446c94;
op3val:0x3fde6216866830ec; valaddr_reg:x3; val_offset:573*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 573*FLEN/8, x4, x1, x2)

inst_192:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0xeb3272a48c640 and fs2 == 0 and fe2 == 0x400 and fm2 == 0xfab8074446c94 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xe6216866830ec and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fbeb3272a48c640; op2val:0x400fab8074446c94;
op3val:0x3fde6216866830ec; valaddr_reg:x3; val_offset:576*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 576*FLEN/8, x4, x1, x2)

inst_193:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0xeb3272a48c640 and fs2 == 0 and fe2 == 0x400 and fm2 == 0xfab8074446c94 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xe6216866830ec and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fbeb3272a48c640; op2val:0x400fab8074446c94;
op3val:0x3fde6216866830ec; valaddr_reg:x3; val_offset:579*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 579*FLEN/8, x4, x1, x2)

inst_194:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0xeb3272a48c640 and fs2 == 0 and fe2 == 0x400 and fm2 == 0xfab8074446c94 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xe6216866830ec and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fbeb3272a48c640; op2val:0x400fab8074446c94;
op3val:0x3fde6216866830ec; valaddr_reg:x3; val_offset:582*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 582*FLEN/8, x4, x1, x2)

inst_195:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0xee698f2811510 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x9b41f5e2cf4ca and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x8d216e41de434 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fbee698f2811510; op2val:0x4009b41f5e2cf4ca;
op3val:0x3fd8d216e41de434; valaddr_reg:x3; val_offset:585*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 585*FLEN/8, x4, x1, x2)

inst_196:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0xee698f2811510 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x9b41f5e2cf4ca and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x8d216e41de434 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fbee698f2811510; op2val:0x4009b41f5e2cf4ca;
op3val:0x3fd8d216e41de434; valaddr_reg:x3; val_offset:588*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 588*FLEN/8, x4, x1, x2)

inst_197:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0xee698f2811510 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x9b41f5e2cf4ca and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x8d216e41de434 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fbee698f2811510; op2val:0x4009b41f5e2cf4ca;
op3val:0x3fd8d216e41de434; valaddr_reg:x3; val_offset:591*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 591*FLEN/8, x4, x1, x2)

inst_198:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0xee698f2811510 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x9b41f5e2cf4ca and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x8d216e41de434 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fbee698f2811510; op2val:0x4009b41f5e2cf4ca;
op3val:0x3fd8d216e41de434; valaddr_reg:x3; val_offset:594*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 594*FLEN/8, x4, x1, x2)

inst_199:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0xee698f2811510 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x9b41f5e2cf4ca and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x8d216e41de434 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fbee698f2811510; op2val:0x4009b41f5e2cf4ca;
op3val:0x3fd8d216e41de434; valaddr_reg:x3; val_offset:597*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 597*FLEN/8, x4, x1, x2)

inst_200:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0xf00d605d72788 and fs2 == 0 and fe2 == 0x401 and fm2 == 0x0ab6b88a0bc7f and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x0267fa9c5b56e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fbf00d605d72788; op2val:0x4010ab6b88a0bc7f;
op3val:0x3fe0267fa9c5b56e; valaddr_reg:x3; val_offset:600*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 600*FLEN/8, x4, x1, x2)

inst_201:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0xf00d605d72788 and fs2 == 0 and fe2 == 0x401 and fm2 == 0x0ab6b88a0bc7f and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x0267fa9c5b56e and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fbf00d605d72788; op2val:0x4010ab6b88a0bc7f;
op3val:0x3fe0267fa9c5b56e; valaddr_reg:x3; val_offset:603*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 603*FLEN/8, x4, x1, x2)

inst_202:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0xf00d605d72788 and fs2 == 0 and fe2 == 0x401 and fm2 == 0x0ab6b88a0bc7f and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x0267fa9c5b56e and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fbf00d605d72788; op2val:0x4010ab6b88a0bc7f;
op3val:0x3fe0267fa9c5b56e; valaddr_reg:x3; val_offset:606*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 606*FLEN/8, x4, x1, x2)

inst_203:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0xf00d605d72788 and fs2 == 0 and fe2 == 0x401 and fm2 == 0x0ab6b88a0bc7f and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x0267fa9c5b56e and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fbf00d605d72788; op2val:0x4010ab6b88a0bc7f;
op3val:0x3fe0267fa9c5b56e; valaddr_reg:x3; val_offset:609*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 609*FLEN/8, x4, x1, x2)

inst_204:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0xf00d605d72788 and fs2 == 0 and fe2 == 0x401 and fm2 == 0x0ab6b88a0bc7f and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x0267fa9c5b56e and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fbf00d605d72788; op2val:0x4010ab6b88a0bc7f;
op3val:0x3fe0267fa9c5b56e; valaddr_reg:x3; val_offset:612*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 612*FLEN/8, x4, x1, x2)

inst_205:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x1b1f4a2164804 and fs2 == 0 and fe2 == 0x400 and fm2 == 0xb27015edf9013 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xe077019dcb6c8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc1b1f4a2164804; op2val:0x400b27015edf9013;
op3val:0x3fde077019dcb6c8; valaddr_reg:x3; val_offset:615*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 615*FLEN/8, x4, x1, x2)

inst_206:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x1b1f4a2164804 and fs2 == 0 and fe2 == 0x400 and fm2 == 0xb27015edf9013 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xe077019dcb6c8 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc1b1f4a2164804; op2val:0x400b27015edf9013;
op3val:0x3fde077019dcb6c8; valaddr_reg:x3; val_offset:618*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 618*FLEN/8, x4, x1, x2)

inst_207:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x1b1f4a2164804 and fs2 == 0 and fe2 == 0x400 and fm2 == 0xb27015edf9013 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xe077019dcb6c8 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc1b1f4a2164804; op2val:0x400b27015edf9013;
op3val:0x3fde077019dcb6c8; valaddr_reg:x3; val_offset:621*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 621*FLEN/8, x4, x1, x2)

inst_208:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x1b1f4a2164804 and fs2 == 0 and fe2 == 0x400 and fm2 == 0xb27015edf9013 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xe077019dcb6c8 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc1b1f4a2164804; op2val:0x400b27015edf9013;
op3val:0x3fde077019dcb6c8; valaddr_reg:x3; val_offset:624*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 624*FLEN/8, x4, x1, x2)

inst_209:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x1b1f4a2164804 and fs2 == 0 and fe2 == 0x400 and fm2 == 0xb27015edf9013 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xe077019dcb6c8 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc1b1f4a2164804; op2val:0x400b27015edf9013;
op3val:0x3fde077019dcb6c8; valaddr_reg:x3; val_offset:627*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 627*FLEN/8, x4, x1, x2)

inst_210:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x2037185881204 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x925c94b822777 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0xc4febf76e30d8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc2037185881204; op2val:0x3ff925c94b822777;
op3val:0x3fcc4febf76e30d8; valaddr_reg:x3; val_offset:630*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 630*FLEN/8, x4, x1, x2)

inst_211:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x2037185881204 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x925c94b822777 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0xc4febf76e30d8 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc2037185881204; op2val:0x3ff925c94b822777;
op3val:0x3fcc4febf76e30d8; valaddr_reg:x3; val_offset:633*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 633*FLEN/8, x4, x1, x2)

inst_212:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x2037185881204 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x925c94b822777 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0xc4febf76e30d8 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc2037185881204; op2val:0x3ff925c94b822777;
op3val:0x3fcc4febf76e30d8; valaddr_reg:x3; val_offset:636*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 636*FLEN/8, x4, x1, x2)

inst_213:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x2037185881204 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x925c94b822777 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0xc4febf76e30d8 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc2037185881204; op2val:0x3ff925c94b822777;
op3val:0x3fcc4febf76e30d8; valaddr_reg:x3; val_offset:639*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 639*FLEN/8, x4, x1, x2)

inst_214:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x2037185881204 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x925c94b822777 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0xc4febf76e30d8 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc2037185881204; op2val:0x3ff925c94b822777;
op3val:0x3fcc4febf76e30d8; valaddr_reg:x3; val_offset:642*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 642*FLEN/8, x4, x1, x2)

inst_215:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x22a796b9663a4 and fs2 == 0 and fe2 == 0x401 and fm2 == 0x44c6187ca64e9 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x70bd042e74e71 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc22a796b9663a4; op2val:0x40144c6187ca64e9;
op3val:0x3fe70bd042e74e71; valaddr_reg:x3; val_offset:645*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 645*FLEN/8, x4, x1, x2)

inst_216:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x22a796b9663a4 and fs2 == 0 and fe2 == 0x401 and fm2 == 0x44c6187ca64e9 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x70bd042e74e71 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc22a796b9663a4; op2val:0x40144c6187ca64e9;
op3val:0x3fe70bd042e74e71; valaddr_reg:x3; val_offset:648*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 648*FLEN/8, x4, x1, x2)

inst_217:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x22a796b9663a4 and fs2 == 0 and fe2 == 0x401 and fm2 == 0x44c6187ca64e9 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x70bd042e74e71 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc22a796b9663a4; op2val:0x40144c6187ca64e9;
op3val:0x3fe70bd042e74e71; valaddr_reg:x3; val_offset:651*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 651*FLEN/8, x4, x1, x2)

inst_218:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x22a796b9663a4 and fs2 == 0 and fe2 == 0x401 and fm2 == 0x44c6187ca64e9 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x70bd042e74e71 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc22a796b9663a4; op2val:0x40144c6187ca64e9;
op3val:0x3fe70bd042e74e71; valaddr_reg:x3; val_offset:654*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 654*FLEN/8, x4, x1, x2)

inst_219:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x22a796b9663a4 and fs2 == 0 and fe2 == 0x401 and fm2 == 0x44c6187ca64e9 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x70bd042e74e71 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc22a796b9663a4; op2val:0x40144c6187ca64e9;
op3val:0x3fe70bd042e74e71; valaddr_reg:x3; val_offset:657*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 657*FLEN/8, x4, x1, x2)

inst_220:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x28f78cfd45220 and fs2 == 0 and fe2 == 0x401 and fm2 == 0x244a5dfb763ca and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x5310a16546287 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc28f78cfd45220; op2val:0x401244a5dfb763ca;
op3val:0x3fe5310a16546287; valaddr_reg:x3; val_offset:660*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 660*FLEN/8, x4, x1, x2)

inst_221:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x28f78cfd45220 and fs2 == 0 and fe2 == 0x401 and fm2 == 0x244a5dfb763ca and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x5310a16546287 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc28f78cfd45220; op2val:0x401244a5dfb763ca;
op3val:0x3fe5310a16546287; valaddr_reg:x3; val_offset:663*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 663*FLEN/8, x4, x1, x2)

inst_222:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x28f78cfd45220 and fs2 == 0 and fe2 == 0x401 and fm2 == 0x244a5dfb763ca and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x5310a16546287 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc28f78cfd45220; op2val:0x401244a5dfb763ca;
op3val:0x3fe5310a16546287; valaddr_reg:x3; val_offset:666*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 666*FLEN/8, x4, x1, x2)

inst_223:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x28f78cfd45220 and fs2 == 0 and fe2 == 0x401 and fm2 == 0x244a5dfb763ca and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x5310a16546287 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc28f78cfd45220; op2val:0x401244a5dfb763ca;
op3val:0x3fe5310a16546287; valaddr_reg:x3; val_offset:669*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 669*FLEN/8, x4, x1, x2)

inst_224:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x28f78cfd45220 and fs2 == 0 and fe2 == 0x401 and fm2 == 0x244a5dfb763ca and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x5310a16546287 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc28f78cfd45220; op2val:0x401244a5dfb763ca;
op3val:0x3fe5310a16546287; valaddr_reg:x3; val_offset:672*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 672*FLEN/8, x4, x1, x2)

inst_225:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x2c0c9469062fc and fs2 == 0 and fe2 == 0x401 and fm2 == 0x99a19b116c599 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xe01d82c52a9ef and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc2c0c9469062fc; op2val:0x40199a19b116c599;
op3val:0x3fee01d82c52a9ef; valaddr_reg:x3; val_offset:675*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 675*FLEN/8, x4, x1, x2)

inst_226:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x2c0c9469062fc and fs2 == 0 and fe2 == 0x401 and fm2 == 0x99a19b116c599 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xe01d82c52a9ef and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc2c0c9469062fc; op2val:0x40199a19b116c599;
op3val:0x3fee01d82c52a9ef; valaddr_reg:x3; val_offset:678*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 678*FLEN/8, x4, x1, x2)

inst_227:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x2c0c9469062fc and fs2 == 0 and fe2 == 0x401 and fm2 == 0x99a19b116c599 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xe01d82c52a9ef and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc2c0c9469062fc; op2val:0x40199a19b116c599;
op3val:0x3fee01d82c52a9ef; valaddr_reg:x3; val_offset:681*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 681*FLEN/8, x4, x1, x2)

inst_228:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x2c0c9469062fc and fs2 == 0 and fe2 == 0x401 and fm2 == 0x99a19b116c599 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xe01d82c52a9ef and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc2c0c9469062fc; op2val:0x40199a19b116c599;
op3val:0x3fee01d82c52a9ef; valaddr_reg:x3; val_offset:684*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 684*FLEN/8, x4, x1, x2)

inst_229:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x2c0c9469062fc and fs2 == 0 and fe2 == 0x401 and fm2 == 0x99a19b116c599 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xe01d82c52a9ef and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc2c0c9469062fc; op2val:0x40199a19b116c599;
op3val:0x3fee01d82c52a9ef; valaddr_reg:x3; val_offset:687*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 687*FLEN/8, x4, x1, x2)

inst_230:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x2daa2a2acbe34 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xeb492c92904fe and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x2175cc7607cd2 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc2daa2a2acbe34; op2val:0x3ffeb492c92904fe;
op3val:0x3fd2175cc7607cd2; valaddr_reg:x3; val_offset:690*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 690*FLEN/8, x4, x1, x2)

inst_231:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x2daa2a2acbe34 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xeb492c92904fe and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x2175cc7607cd2 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc2daa2a2acbe34; op2val:0x3ffeb492c92904fe;
op3val:0x3fd2175cc7607cd2; valaddr_reg:x3; val_offset:693*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 693*FLEN/8, x4, x1, x2)

inst_232:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x2daa2a2acbe34 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xeb492c92904fe and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x2175cc7607cd2 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc2daa2a2acbe34; op2val:0x3ffeb492c92904fe;
op3val:0x3fd2175cc7607cd2; valaddr_reg:x3; val_offset:696*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 696*FLEN/8, x4, x1, x2)

inst_233:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x2daa2a2acbe34 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xeb492c92904fe and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x2175cc7607cd2 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc2daa2a2acbe34; op2val:0x3ffeb492c92904fe;
op3val:0x3fd2175cc7607cd2; valaddr_reg:x3; val_offset:699*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 699*FLEN/8, x4, x1, x2)

inst_234:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x2daa2a2acbe34 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xeb492c92904fe and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x2175cc7607cd2 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc2daa2a2acbe34; op2val:0x3ffeb492c92904fe;
op3val:0x3fd2175cc7607cd2; valaddr_reg:x3; val_offset:702*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 702*FLEN/8, x4, x1, x2)

inst_235:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x3ee8e89346e7c and fs2 == 0 and fe2 == 0x401 and fm2 == 0x111370f1260ef and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x542e98009ff7f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc3ee8e89346e7c; op2val:0x401111370f1260ef;
op3val:0x3fe542e98009ff7f; valaddr_reg:x3; val_offset:705*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 705*FLEN/8, x4, x1, x2)

inst_236:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x3ee8e89346e7c and fs2 == 0 and fe2 == 0x401 and fm2 == 0x111370f1260ef and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x542e98009ff7f and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc3ee8e89346e7c; op2val:0x401111370f1260ef;
op3val:0x3fe542e98009ff7f; valaddr_reg:x3; val_offset:708*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 708*FLEN/8, x4, x1, x2)

inst_237:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x3ee8e89346e7c and fs2 == 0 and fe2 == 0x401 and fm2 == 0x111370f1260ef and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x542e98009ff7f and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc3ee8e89346e7c; op2val:0x401111370f1260ef;
op3val:0x3fe542e98009ff7f; valaddr_reg:x3; val_offset:711*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 711*FLEN/8, x4, x1, x2)

inst_238:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x3ee8e89346e7c and fs2 == 0 and fe2 == 0x401 and fm2 == 0x111370f1260ef and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x542e98009ff7f and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc3ee8e89346e7c; op2val:0x401111370f1260ef;
op3val:0x3fe542e98009ff7f; valaddr_reg:x3; val_offset:714*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 714*FLEN/8, x4, x1, x2)

inst_239:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x3ee8e89346e7c and fs2 == 0 and fe2 == 0x401 and fm2 == 0x111370f1260ef and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x542e98009ff7f and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc3ee8e89346e7c; op2val:0x401111370f1260ef;
op3val:0x3fe542e98009ff7f; valaddr_reg:x3; val_offset:717*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 717*FLEN/8, x4, x1, x2)

inst_240:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x4badefd9616c8 and fs2 == 0 and fe2 == 0x401 and fm2 == 0x6220ad27f8d27 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xcad0dbc0e8dad and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc4badefd9616c8; op2val:0x4016220ad27f8d27;
op3val:0x3fecad0dbc0e8dad; valaddr_reg:x3; val_offset:720*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 720*FLEN/8, x4, x1, x2)

inst_241:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x4badefd9616c8 and fs2 == 0 and fe2 == 0x401 and fm2 == 0x6220ad27f8d27 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xcad0dbc0e8dad and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc4badefd9616c8; op2val:0x4016220ad27f8d27;
op3val:0x3fecad0dbc0e8dad; valaddr_reg:x3; val_offset:723*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 723*FLEN/8, x4, x1, x2)

inst_242:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x4badefd9616c8 and fs2 == 0 and fe2 == 0x401 and fm2 == 0x6220ad27f8d27 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xcad0dbc0e8dad and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc4badefd9616c8; op2val:0x4016220ad27f8d27;
op3val:0x3fecad0dbc0e8dad; valaddr_reg:x3; val_offset:726*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 726*FLEN/8, x4, x1, x2)

inst_243:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x4badefd9616c8 and fs2 == 0 and fe2 == 0x401 and fm2 == 0x6220ad27f8d27 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xcad0dbc0e8dad and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc4badefd9616c8; op2val:0x4016220ad27f8d27;
op3val:0x3fecad0dbc0e8dad; valaddr_reg:x3; val_offset:729*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 729*FLEN/8, x4, x1, x2)

inst_244:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x4badefd9616c8 and fs2 == 0 and fe2 == 0x401 and fm2 == 0x6220ad27f8d27 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xcad0dbc0e8dad and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc4badefd9616c8; op2val:0x4016220ad27f8d27;
op3val:0x3fecad0dbc0e8dad; valaddr_reg:x3; val_offset:732*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 732*FLEN/8, x4, x1, x2)

inst_245:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x571cbd075fc78 and fs2 == 0 and fe2 == 0x401 and fm2 == 0x6a3d704d8d304 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xe580fba9fbc58 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc571cbd075fc78; op2val:0x4016a3d704d8d304;
op3val:0x3fee580fba9fbc58; valaddr_reg:x3; val_offset:735*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 735*FLEN/8, x4, x1, x2)

inst_246:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x571cbd075fc78 and fs2 == 0 and fe2 == 0x401 and fm2 == 0x6a3d704d8d304 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xe580fba9fbc58 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc571cbd075fc78; op2val:0x4016a3d704d8d304;
op3val:0x3fee580fba9fbc58; valaddr_reg:x3; val_offset:738*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 738*FLEN/8, x4, x1, x2)

inst_247:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x571cbd075fc78 and fs2 == 0 and fe2 == 0x401 and fm2 == 0x6a3d704d8d304 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xe580fba9fbc58 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc571cbd075fc78; op2val:0x4016a3d704d8d304;
op3val:0x3fee580fba9fbc58; valaddr_reg:x3; val_offset:741*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 741*FLEN/8, x4, x1, x2)

inst_248:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x571cbd075fc78 and fs2 == 0 and fe2 == 0x401 and fm2 == 0x6a3d704d8d304 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xe580fba9fbc58 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc571cbd075fc78; op2val:0x4016a3d704d8d304;
op3val:0x3fee580fba9fbc58; valaddr_reg:x3; val_offset:744*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 744*FLEN/8, x4, x1, x2)

inst_249:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x571cbd075fc78 and fs2 == 0 and fe2 == 0x401 and fm2 == 0x6a3d704d8d304 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xe580fba9fbc58 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc571cbd075fc78; op2val:0x4016a3d704d8d304;
op3val:0x3fee580fba9fbc58; valaddr_reg:x3; val_offset:747*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 747*FLEN/8, x4, x1, x2)

inst_250:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x5f93dabc7e57c and fs2 == 0 and fe2 == 0x401 and fm2 == 0x542ea40496169 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xd3306c54aa3b1 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc5f93dabc7e57c; op2val:0x401542ea40496169;
op3val:0x3fed3306c54aa3b1; valaddr_reg:x3; val_offset:750*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 750*FLEN/8, x4, x1, x2)

inst_251:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x5f93dabc7e57c and fs2 == 0 and fe2 == 0x401 and fm2 == 0x542ea40496169 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xd3306c54aa3b1 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc5f93dabc7e57c; op2val:0x401542ea40496169;
op3val:0x3fed3306c54aa3b1; valaddr_reg:x3; val_offset:753*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 753*FLEN/8, x4, x1, x2)

inst_252:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x5f93dabc7e57c and fs2 == 0 and fe2 == 0x401 and fm2 == 0x542ea40496169 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xd3306c54aa3b1 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc5f93dabc7e57c; op2val:0x401542ea40496169;
op3val:0x3fed3306c54aa3b1; valaddr_reg:x3; val_offset:756*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 756*FLEN/8, x4, x1, x2)

inst_253:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x5f93dabc7e57c and fs2 == 0 and fe2 == 0x401 and fm2 == 0x542ea40496169 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xd3306c54aa3b1 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc5f93dabc7e57c; op2val:0x401542ea40496169;
op3val:0x3fed3306c54aa3b1; valaddr_reg:x3; val_offset:759*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 759*FLEN/8, x4, x1, x2)

inst_254:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x5f93dabc7e57c and fs2 == 0 and fe2 == 0x401 and fm2 == 0x542ea40496169 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xd3306c54aa3b1 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc5f93dabc7e57c; op2val:0x401542ea40496169;
op3val:0x3fed3306c54aa3b1; valaddr_reg:x3; val_offset:762*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 762*FLEN/8, x4, x1, x2)

inst_255:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x887509d2ebf38 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x1b2c8c8d10d56 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xb21dad721ebae and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc887509d2ebf38; op2val:0x4001b2c8c8d10d56;
op3val:0x3fdb21dad721ebae; valaddr_reg:x3; val_offset:765*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 765*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_3)

inst_256:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x887509d2ebf38 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x1b2c8c8d10d56 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xb21dad721ebae and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc887509d2ebf38; op2val:0x4001b2c8c8d10d56;
op3val:0x3fdb21dad721ebae; valaddr_reg:x3; val_offset:768*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 768*FLEN/8, x4, x1, x2)

inst_257:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x887509d2ebf38 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x1b2c8c8d10d56 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xb21dad721ebae and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc887509d2ebf38; op2val:0x4001b2c8c8d10d56;
op3val:0x3fdb21dad721ebae; valaddr_reg:x3; val_offset:771*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 771*FLEN/8, x4, x1, x2)

inst_258:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x887509d2ebf38 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x1b2c8c8d10d56 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xb21dad721ebae and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc887509d2ebf38; op2val:0x4001b2c8c8d10d56;
op3val:0x3fdb21dad721ebae; valaddr_reg:x3; val_offset:774*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 774*FLEN/8, x4, x1, x2)

inst_259:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x887509d2ebf38 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x1b2c8c8d10d56 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xb21dad721ebae and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc887509d2ebf38; op2val:0x4001b2c8c8d10d56;
op3val:0x3fdb21dad721ebae; valaddr_reg:x3; val_offset:777*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 777*FLEN/8, x4, x1, x2)

inst_260:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x8e536f7f0e220 and fs2 == 0 and fe2 == 0x3fb and fm2 == 0xf188c984af6cc and fs3 == 0 and fe3 == 0x3f9 and fm3 == 0x831268ab6e3a0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc8e536f7f0e220; op2val:0x3fbf188c984af6cc;
op3val:0x3f9831268ab6e3a0; valaddr_reg:x3; val_offset:780*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 780*FLEN/8, x4, x1, x2)

inst_261:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x8e536f7f0e220 and fs2 == 0 and fe2 == 0x3fb and fm2 == 0xf188c984af6cc and fs3 == 0 and fe3 == 0x3f9 and fm3 == 0x831268ab6e3a0 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc8e536f7f0e220; op2val:0x3fbf188c984af6cc;
op3val:0x3f9831268ab6e3a0; valaddr_reg:x3; val_offset:783*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 783*FLEN/8, x4, x1, x2)

inst_262:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x8e536f7f0e220 and fs2 == 0 and fe2 == 0x3fb and fm2 == 0xf188c984af6cc and fs3 == 0 and fe3 == 0x3f9 and fm3 == 0x831268ab6e3a0 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc8e536f7f0e220; op2val:0x3fbf188c984af6cc;
op3val:0x3f9831268ab6e3a0; valaddr_reg:x3; val_offset:786*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 786*FLEN/8, x4, x1, x2)

inst_263:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x8e536f7f0e220 and fs2 == 0 and fe2 == 0x3fb and fm2 == 0xf188c984af6cc and fs3 == 0 and fe3 == 0x3f9 and fm3 == 0x831268ab6e3a0 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc8e536f7f0e220; op2val:0x3fbf188c984af6cc;
op3val:0x3f9831268ab6e3a0; valaddr_reg:x3; val_offset:789*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 789*FLEN/8, x4, x1, x2)

inst_264:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x8e536f7f0e220 and fs2 == 0 and fe2 == 0x3fb and fm2 == 0xf188c984af6cc and fs3 == 0 and fe3 == 0x3f9 and fm3 == 0x831268ab6e3a0 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc8e536f7f0e220; op2val:0x3fbf188c984af6cc;
op3val:0x3f9831268ab6e3a0; valaddr_reg:x3; val_offset:792*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 792*FLEN/8, x4, x1, x2)

inst_265:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x8ed4fa41d2b08 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x9c9fc97013bf7 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x416bd96e99329 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc8ed4fa41d2b08; op2val:0x4009c9fc97013bf7;
op3val:0x3fe416bd96e99329; valaddr_reg:x3; val_offset:795*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 795*FLEN/8, x4, x1, x2)

inst_266:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x8ed4fa41d2b08 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x9c9fc97013bf7 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x416bd96e99329 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc8ed4fa41d2b08; op2val:0x4009c9fc97013bf7;
op3val:0x3fe416bd96e99329; valaddr_reg:x3; val_offset:798*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 798*FLEN/8, x4, x1, x2)

inst_267:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x8ed4fa41d2b08 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x9c9fc97013bf7 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x416bd96e99329 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc8ed4fa41d2b08; op2val:0x4009c9fc97013bf7;
op3val:0x3fe416bd96e99329; valaddr_reg:x3; val_offset:801*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 801*FLEN/8, x4, x1, x2)

inst_268:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x8ed4fa41d2b08 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x9c9fc97013bf7 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x416bd96e99329 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc8ed4fa41d2b08; op2val:0x4009c9fc97013bf7;
op3val:0x3fe416bd96e99329; valaddr_reg:x3; val_offset:804*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 804*FLEN/8, x4, x1, x2)

inst_269:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x8ed4fa41d2b08 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x9c9fc97013bf7 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x416bd96e99329 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc8ed4fa41d2b08; op2val:0x4009c9fc97013bf7;
op3val:0x3fe416bd96e99329; valaddr_reg:x3; val_offset:807*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 807*FLEN/8, x4, x1, x2)

inst_270:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x8f1b1f456799c and fs2 == 0 and fe2 == 0x400 and fm2 == 0xe26d29351eb24 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x780d9fd5930ba and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc8f1b1f456799c; op2val:0x400e26d29351eb24;
op3val:0x3fe780d9fd5930ba; valaddr_reg:x3; val_offset:810*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 810*FLEN/8, x4, x1, x2)

inst_271:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x8f1b1f456799c and fs2 == 0 and fe2 == 0x400 and fm2 == 0xe26d29351eb24 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x780d9fd5930ba and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc8f1b1f456799c; op2val:0x400e26d29351eb24;
op3val:0x3fe780d9fd5930ba; valaddr_reg:x3; val_offset:813*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 813*FLEN/8, x4, x1, x2)

inst_272:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x8f1b1f456799c and fs2 == 0 and fe2 == 0x400 and fm2 == 0xe26d29351eb24 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x780d9fd5930ba and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc8f1b1f456799c; op2val:0x400e26d29351eb24;
op3val:0x3fe780d9fd5930ba; valaddr_reg:x3; val_offset:816*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 816*FLEN/8, x4, x1, x2)

inst_273:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x8f1b1f456799c and fs2 == 0 and fe2 == 0x400 and fm2 == 0xe26d29351eb24 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x780d9fd5930ba and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc8f1b1f456799c; op2val:0x400e26d29351eb24;
op3val:0x3fe780d9fd5930ba; valaddr_reg:x3; val_offset:819*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 819*FLEN/8, x4, x1, x2)

inst_274:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x8f1b1f456799c and fs2 == 0 and fe2 == 0x400 and fm2 == 0xe26d29351eb24 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x780d9fd5930ba and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc8f1b1f456799c; op2val:0x400e26d29351eb24;
op3val:0x3fe780d9fd5930ba; valaddr_reg:x3; val_offset:822*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 822*FLEN/8, x4, x1, x2)

inst_275:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x8fceb5bfe01b4 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x6bc2bc6f4fbe4 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x1c0d1e5339691 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc8fceb5bfe01b4; op2val:0x4006bc2bc6f4fbe4;
op3val:0x3fe1c0d1e5339691; valaddr_reg:x3; val_offset:825*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 825*FLEN/8, x4, x1, x2)

inst_276:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x8fceb5bfe01b4 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x6bc2bc6f4fbe4 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x1c0d1e5339691 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc8fceb5bfe01b4; op2val:0x4006bc2bc6f4fbe4;
op3val:0x3fe1c0d1e5339691; valaddr_reg:x3; val_offset:828*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 828*FLEN/8, x4, x1, x2)

inst_277:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x8fceb5bfe01b4 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x6bc2bc6f4fbe4 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x1c0d1e5339691 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc8fceb5bfe01b4; op2val:0x4006bc2bc6f4fbe4;
op3val:0x3fe1c0d1e5339691; valaddr_reg:x3; val_offset:831*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 831*FLEN/8, x4, x1, x2)

inst_278:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x8fceb5bfe01b4 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x6bc2bc6f4fbe4 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x1c0d1e5339691 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc8fceb5bfe01b4; op2val:0x4006bc2bc6f4fbe4;
op3val:0x3fe1c0d1e5339691; valaddr_reg:x3; val_offset:834*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 834*FLEN/8, x4, x1, x2)

inst_279:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x8fceb5bfe01b4 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x6bc2bc6f4fbe4 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x1c0d1e5339691 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc8fceb5bfe01b4; op2val:0x4006bc2bc6f4fbe4;
op3val:0x3fe1c0d1e5339691; valaddr_reg:x3; val_offset:837*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 837*FLEN/8, x4, x1, x2)

inst_280:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x8fe3f5886191c and fs2 == 0 and fe2 == 0x400 and fm2 == 0xbb8b5f7c4ea65 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x5a6c97e88ba40 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc8fe3f5886191c; op2val:0x400bb8b5f7c4ea65;
op3val:0x3fe5a6c97e88ba40; valaddr_reg:x3; val_offset:840*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 840*FLEN/8, x4, x1, x2)

inst_281:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x8fe3f5886191c and fs2 == 0 and fe2 == 0x400 and fm2 == 0xbb8b5f7c4ea65 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x5a6c97e88ba40 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc8fe3f5886191c; op2val:0x400bb8b5f7c4ea65;
op3val:0x3fe5a6c97e88ba40; valaddr_reg:x3; val_offset:843*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 843*FLEN/8, x4, x1, x2)

inst_282:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x8fe3f5886191c and fs2 == 0 and fe2 == 0x400 and fm2 == 0xbb8b5f7c4ea65 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x5a6c97e88ba40 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc8fe3f5886191c; op2val:0x400bb8b5f7c4ea65;
op3val:0x3fe5a6c97e88ba40; valaddr_reg:x3; val_offset:846*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 846*FLEN/8, x4, x1, x2)

inst_283:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x8fe3f5886191c and fs2 == 0 and fe2 == 0x400 and fm2 == 0xbb8b5f7c4ea65 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x5a6c97e88ba40 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc8fe3f5886191c; op2val:0x400bb8b5f7c4ea65;
op3val:0x3fe5a6c97e88ba40; valaddr_reg:x3; val_offset:849*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 849*FLEN/8, x4, x1, x2)

inst_284:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x8fe3f5886191c and fs2 == 0 and fe2 == 0x400 and fm2 == 0xbb8b5f7c4ea65 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x5a6c97e88ba40 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc8fe3f5886191c; op2val:0x400bb8b5f7c4ea65;
op3val:0x3fe5a6c97e88ba40; valaddr_reg:x3; val_offset:852*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 852*FLEN/8, x4, x1, x2)

inst_285:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x92b53563d3f54 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x9933d17862ef6 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x41da82f4b8d7c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc92b53563d3f54; op2val:0x3ff9933d17862ef6;
op3val:0x3fd41da82f4b8d7c; valaddr_reg:x3; val_offset:855*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 855*FLEN/8, x4, x1, x2)

inst_286:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x92b53563d3f54 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x9933d17862ef6 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x41da82f4b8d7c and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc92b53563d3f54; op2val:0x3ff9933d17862ef6;
op3val:0x3fd41da82f4b8d7c; valaddr_reg:x3; val_offset:858*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 858*FLEN/8, x4, x1, x2)

inst_287:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x92b53563d3f54 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x9933d17862ef6 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x41da82f4b8d7c and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc92b53563d3f54; op2val:0x3ff9933d17862ef6;
op3val:0x3fd41da82f4b8d7c; valaddr_reg:x3; val_offset:861*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 861*FLEN/8, x4, x1, x2)

inst_288:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x92b53563d3f54 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x9933d17862ef6 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x41da82f4b8d7c and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc92b53563d3f54; op2val:0x3ff9933d17862ef6;
op3val:0x3fd41da82f4b8d7c; valaddr_reg:x3; val_offset:864*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 864*FLEN/8, x4, x1, x2)

inst_289:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x92b53563d3f54 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x9933d17862ef6 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x41da82f4b8d7c and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fc92b53563d3f54; op2val:0x3ff9933d17862ef6;
op3val:0x3fd41da82f4b8d7c; valaddr_reg:x3; val_offset:867*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 867*FLEN/8, x4, x1, x2)

inst_290:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xa196eeec6c690 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x2f670512177f2 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xeee9b0c96b0b4 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fca196eeec6c690; op2val:0x4002f670512177f2;
op3val:0x3fdeee9b0c96b0b4; valaddr_reg:x3; val_offset:870*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 870*FLEN/8, x4, x1, x2)

inst_291:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xa196eeec6c690 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x2f670512177f2 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xeee9b0c96b0b4 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fca196eeec6c690; op2val:0x4002f670512177f2;
op3val:0x3fdeee9b0c96b0b4; valaddr_reg:x3; val_offset:873*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 873*FLEN/8, x4, x1, x2)

inst_292:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xa196eeec6c690 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x2f670512177f2 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xeee9b0c96b0b4 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fca196eeec6c690; op2val:0x4002f670512177f2;
op3val:0x3fdeee9b0c96b0b4; valaddr_reg:x3; val_offset:876*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 876*FLEN/8, x4, x1, x2)

inst_293:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xa196eeec6c690 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x2f670512177f2 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xeee9b0c96b0b4 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fca196eeec6c690; op2val:0x4002f670512177f2;
op3val:0x3fdeee9b0c96b0b4; valaddr_reg:x3; val_offset:879*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 879*FLEN/8, x4, x1, x2)

inst_294:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xa196eeec6c690 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x2f670512177f2 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xeee9b0c96b0b4 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fca196eeec6c690; op2val:0x4002f670512177f2;
op3val:0x3fdeee9b0c96b0b4; valaddr_reg:x3; val_offset:882*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 882*FLEN/8, x4, x1, x2)

inst_295:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xa67c9d09ff3c8 and fs2 == 0 and fe2 == 0x401 and fm2 == 0x0c42c021d53ac and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xbab89d9c3f858 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fca67c9d09ff3c8; op2val:0x4010c42c021d53ac;
op3val:0x3febab89d9c3f858; valaddr_reg:x3; val_offset:885*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 885*FLEN/8, x4, x1, x2)

inst_296:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xa67c9d09ff3c8 and fs2 == 0 and fe2 == 0x401 and fm2 == 0x0c42c021d53ac and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xbab89d9c3f858 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fca67c9d09ff3c8; op2val:0x4010c42c021d53ac;
op3val:0x3febab89d9c3f858; valaddr_reg:x3; val_offset:888*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 888*FLEN/8, x4, x1, x2)

inst_297:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xa67c9d09ff3c8 and fs2 == 0 and fe2 == 0x401 and fm2 == 0x0c42c021d53ac and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xbab89d9c3f858 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fca67c9d09ff3c8; op2val:0x4010c42c021d53ac;
op3val:0x3febab89d9c3f858; valaddr_reg:x3; val_offset:891*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 891*FLEN/8, x4, x1, x2)

inst_298:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xa67c9d09ff3c8 and fs2 == 0 and fe2 == 0x401 and fm2 == 0x0c42c021d53ac and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xbab89d9c3f858 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fca67c9d09ff3c8; op2val:0x4010c42c021d53ac;
op3val:0x3febab89d9c3f858; valaddr_reg:x3; val_offset:894*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 894*FLEN/8, x4, x1, x2)

inst_299:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xa67c9d09ff3c8 and fs2 == 0 and fe2 == 0x401 and fm2 == 0x0c42c021d53ac and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xbab89d9c3f858 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fca67c9d09ff3c8; op2val:0x4010c42c021d53ac;
op3val:0x3febab89d9c3f858; valaddr_reg:x3; val_offset:897*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 897*FLEN/8, x4, x1, x2)

inst_300:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xa70972d7810b8 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x3a3c76601fe91 and fs3 == 0 and fe3 == 0x3fb and fm3 == 0x03a2c05839000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fca70972d7810b8; op2val:0x3fd3a3c76601fe91;
op3val:0x3fb03a2c05839000; valaddr_reg:x3; val_offset:900*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 900*FLEN/8, x4, x1, x2)

inst_301:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xa70972d7810b8 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x3a3c76601fe91 and fs3 == 0 and fe3 == 0x3fb and fm3 == 0x03a2c05839000 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fca70972d7810b8; op2val:0x3fd3a3c76601fe91;
op3val:0x3fb03a2c05839000; valaddr_reg:x3; val_offset:903*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 903*FLEN/8, x4, x1, x2)

inst_302:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xa70972d7810b8 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x3a3c76601fe91 and fs3 == 0 and fe3 == 0x3fb and fm3 == 0x03a2c05839000 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fca70972d7810b8; op2val:0x3fd3a3c76601fe91;
op3val:0x3fb03a2c05839000; valaddr_reg:x3; val_offset:906*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 906*FLEN/8, x4, x1, x2)

inst_303:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xa70972d7810b8 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x3a3c76601fe91 and fs3 == 0 and fe3 == 0x3fb and fm3 == 0x03a2c05839000 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fca70972d7810b8; op2val:0x3fd3a3c76601fe91;
op3val:0x3fb03a2c05839000; valaddr_reg:x3; val_offset:909*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 909*FLEN/8, x4, x1, x2)

inst_304:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xa70972d7810b8 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x3a3c76601fe91 and fs3 == 0 and fe3 == 0x3fb and fm3 == 0x03a2c05839000 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fca70972d7810b8; op2val:0x3fd3a3c76601fe91;
op3val:0x3fb03a2c05839000; valaddr_reg:x3; val_offset:912*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 912*FLEN/8, x4, x1, x2)

inst_305:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xa73d506d1a204 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xb91be181b3554 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x6ca35beb5fcac and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fca73d506d1a204; op2val:0x3feb91be181b3554;
op3val:0x3fc6ca35beb5fcac; valaddr_reg:x3; val_offset:915*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 915*FLEN/8, x4, x1, x2)

inst_306:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xa73d506d1a204 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xb91be181b3554 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x6ca35beb5fcac and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fca73d506d1a204; op2val:0x3feb91be181b3554;
op3val:0x3fc6ca35beb5fcac; valaddr_reg:x3; val_offset:918*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 918*FLEN/8, x4, x1, x2)

inst_307:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xa73d506d1a204 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xb91be181b3554 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x6ca35beb5fcac and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fca73d506d1a204; op2val:0x3feb91be181b3554;
op3val:0x3fc6ca35beb5fcac; valaddr_reg:x3; val_offset:921*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 921*FLEN/8, x4, x1, x2)

inst_308:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xa73d506d1a204 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xb91be181b3554 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x6ca35beb5fcac and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fca73d506d1a204; op2val:0x3feb91be181b3554;
op3val:0x3fc6ca35beb5fcac; valaddr_reg:x3; val_offset:924*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 924*FLEN/8, x4, x1, x2)

inst_309:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xa73d506d1a204 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xb91be181b3554 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x6ca35beb5fcac and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fca73d506d1a204; op2val:0x3feb91be181b3554;
op3val:0x3fc6ca35beb5fcac; valaddr_reg:x3; val_offset:927*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 927*FLEN/8, x4, x1, x2)

inst_310:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xacfbea44a62e8 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x37ed2c48e0db8 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x0559bc8359ad2 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fcacfbea44a62e8; op2val:0x3ff37ed2c48e0db8;
op3val:0x3fd0559bc8359ad2; valaddr_reg:x3; val_offset:930*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 930*FLEN/8, x4, x1, x2)

inst_311:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xacfbea44a62e8 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x37ed2c48e0db8 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x0559bc8359ad2 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fcacfbea44a62e8; op2val:0x3ff37ed2c48e0db8;
op3val:0x3fd0559bc8359ad2; valaddr_reg:x3; val_offset:933*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 933*FLEN/8, x4, x1, x2)

inst_312:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xacfbea44a62e8 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x37ed2c48e0db8 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x0559bc8359ad2 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fcacfbea44a62e8; op2val:0x3ff37ed2c48e0db8;
op3val:0x3fd0559bc8359ad2; valaddr_reg:x3; val_offset:936*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 936*FLEN/8, x4, x1, x2)

inst_313:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xacfbea44a62e8 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x37ed2c48e0db8 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x0559bc8359ad2 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fcacfbea44a62e8; op2val:0x3ff37ed2c48e0db8;
op3val:0x3fd0559bc8359ad2; valaddr_reg:x3; val_offset:939*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 939*FLEN/8, x4, x1, x2)

inst_314:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xacfbea44a62e8 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x37ed2c48e0db8 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x0559bc8359ad2 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fcacfbea44a62e8; op2val:0x3ff37ed2c48e0db8;
op3val:0x3fd0559bc8359ad2; valaddr_reg:x3; val_offset:942*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 942*FLEN/8, x4, x1, x2)

inst_315:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xb31c955af3a98 and fs2 == 0 and fe2 == 0x400 and fm2 == 0xd992174cdd863 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x92740eee383f3 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fcb31c955af3a98; op2val:0x400d992174cdd863;
op3val:0x3fe92740eee383f3; valaddr_reg:x3; val_offset:945*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 945*FLEN/8, x4, x1, x2)

inst_316:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xb31c955af3a98 and fs2 == 0 and fe2 == 0x400 and fm2 == 0xd992174cdd863 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x92740eee383f3 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fcb31c955af3a98; op2val:0x400d992174cdd863;
op3val:0x3fe92740eee383f3; valaddr_reg:x3; val_offset:948*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 948*FLEN/8, x4, x1, x2)

inst_317:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xb31c955af3a98 and fs2 == 0 and fe2 == 0x400 and fm2 == 0xd992174cdd863 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x92740eee383f3 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fcb31c955af3a98; op2val:0x400d992174cdd863;
op3val:0x3fe92740eee383f3; valaddr_reg:x3; val_offset:951*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 951*FLEN/8, x4, x1, x2)

inst_318:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xb31c955af3a98 and fs2 == 0 and fe2 == 0x400 and fm2 == 0xd992174cdd863 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x92740eee383f3 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fcb31c955af3a98; op2val:0x400d992174cdd863;
op3val:0x3fe92740eee383f3; valaddr_reg:x3; val_offset:954*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 954*FLEN/8, x4, x1, x2)

inst_319:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xb31c955af3a98 and fs2 == 0 and fe2 == 0x400 and fm2 == 0xd992174cdd863 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x92740eee383f3 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fcb31c955af3a98; op2val:0x400d992174cdd863;
op3val:0x3fe92740eee383f3; valaddr_reg:x3; val_offset:957*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 957*FLEN/8, x4, x1, x2)

inst_320:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xb56a6431e5f40 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x02598f966223c and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xb96e404e81174 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fcb56a6431e5f40; op2val:0x40002598f966223c;
op3val:0x3fdb96e404e81174; valaddr_reg:x3; val_offset:960*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 960*FLEN/8, x4, x1, x2)

inst_321:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xb56a6431e5f40 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x02598f966223c and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xb96e404e81174 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fcb56a6431e5f40; op2val:0x40002598f966223c;
op3val:0x3fdb96e404e81174; valaddr_reg:x3; val_offset:963*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 963*FLEN/8, x4, x1, x2)

inst_322:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xb56a6431e5f40 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x02598f966223c and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xb96e404e81174 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fcb56a6431e5f40; op2val:0x40002598f966223c;
op3val:0x3fdb96e404e81174; valaddr_reg:x3; val_offset:966*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 966*FLEN/8, x4, x1, x2)

inst_323:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xb56a6431e5f40 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x02598f966223c and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xb96e404e81174 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fcb56a6431e5f40; op2val:0x40002598f966223c;
op3val:0x3fdb96e404e81174; valaddr_reg:x3; val_offset:969*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 969*FLEN/8, x4, x1, x2)

inst_324:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xb56a6431e5f40 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x02598f966223c and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xb96e404e81174 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fcb56a6431e5f40; op2val:0x40002598f966223c;
op3val:0x3fdb96e404e81174; valaddr_reg:x3; val_offset:972*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 972*FLEN/8, x4, x1, x2)

inst_325:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xb56fd497d90e0 and fs2 == 0 and fe2 == 0x400 and fm2 == 0xd01701e6484ea and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x8c8100cf2074a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fcb56fd497d90e0; op2val:0x400d01701e6484ea;
op3val:0x3fe8c8100cf2074a; valaddr_reg:x3; val_offset:975*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 975*FLEN/8, x4, x1, x2)

inst_326:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xb56fd497d90e0 and fs2 == 0 and fe2 == 0x400 and fm2 == 0xd01701e6484ea and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x8c8100cf2074a and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fcb56fd497d90e0; op2val:0x400d01701e6484ea;
op3val:0x3fe8c8100cf2074a; valaddr_reg:x3; val_offset:978*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 978*FLEN/8, x4, x1, x2)

inst_327:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xb56fd497d90e0 and fs2 == 0 and fe2 == 0x400 and fm2 == 0xd01701e6484ea and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x8c8100cf2074a and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fcb56fd497d90e0; op2val:0x400d01701e6484ea;
op3val:0x3fe8c8100cf2074a; valaddr_reg:x3; val_offset:981*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 981*FLEN/8, x4, x1, x2)

inst_328:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xb56fd497d90e0 and fs2 == 0 and fe2 == 0x400 and fm2 == 0xd01701e6484ea and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x8c8100cf2074a and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fcb56fd497d90e0; op2val:0x400d01701e6484ea;
op3val:0x3fe8c8100cf2074a; valaddr_reg:x3; val_offset:984*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 984*FLEN/8, x4, x1, x2)

inst_329:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xb56fd497d90e0 and fs2 == 0 and fe2 == 0x400 and fm2 == 0xd01701e6484ea and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x8c8100cf2074a and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fcb56fd497d90e0; op2val:0x400d01701e6484ea;
op3val:0x3fe8c8100cf2074a; valaddr_reg:x3; val_offset:987*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 987*FLEN/8, x4, x1, x2)

inst_330:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xbdde073328efc and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xb692708a15a23 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x7dec7679a2ddc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fcbdde073328efc; op2val:0x3feb692708a15a23;
op3val:0x3fc7dec7679a2ddc; valaddr_reg:x3; val_offset:990*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 990*FLEN/8, x4, x1, x2)

inst_331:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xbdde073328efc and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xb692708a15a23 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x7dec7679a2ddc and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fcbdde073328efc; op2val:0x3feb692708a15a23;
op3val:0x3fc7dec7679a2ddc; valaddr_reg:x3; val_offset:993*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 993*FLEN/8, x4, x1, x2)

inst_332:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xbdde073328efc and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xb692708a15a23 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x7dec7679a2ddc and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fcbdde073328efc; op2val:0x3feb692708a15a23;
op3val:0x3fc7dec7679a2ddc; valaddr_reg:x3; val_offset:996*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 996*FLEN/8, x4, x1, x2)

inst_333:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xbdde073328efc and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xb692708a15a23 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x7dec7679a2ddc and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fcbdde073328efc; op2val:0x3feb692708a15a23;
op3val:0x3fc7dec7679a2ddc; valaddr_reg:x3; val_offset:999*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 999*FLEN/8, x4, x1, x2)

inst_334:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xbdde073328efc and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xb692708a15a23 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x7dec7679a2ddc and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fcbdde073328efc; op2val:0x3feb692708a15a23;
op3val:0x3fc7dec7679a2ddc; valaddr_reg:x3; val_offset:1002*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1002*FLEN/8, x4, x1, x2)

inst_335:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xc5a2d48f7e4c8 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x3f84adc077a18 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x1b18815c400fe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fcc5a2d48f7e4c8; op2val:0x4003f84adc077a18;
op3val:0x3fe1b18815c400fe; valaddr_reg:x3; val_offset:1005*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1005*FLEN/8, x4, x1, x2)

inst_336:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xc5a2d48f7e4c8 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x3f84adc077a18 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x1b18815c400fe and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fcc5a2d48f7e4c8; op2val:0x4003f84adc077a18;
op3val:0x3fe1b18815c400fe; valaddr_reg:x3; val_offset:1008*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1008*FLEN/8, x4, x1, x2)

inst_337:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xc5a2d48f7e4c8 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x3f84adc077a18 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x1b18815c400fe and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fcc5a2d48f7e4c8; op2val:0x4003f84adc077a18;
op3val:0x3fe1b18815c400fe; valaddr_reg:x3; val_offset:1011*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1011*FLEN/8, x4, x1, x2)

inst_338:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xc5a2d48f7e4c8 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x3f84adc077a18 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x1b18815c400fe and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fcc5a2d48f7e4c8; op2val:0x4003f84adc077a18;
op3val:0x3fe1b18815c400fe; valaddr_reg:x3; val_offset:1014*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1014*FLEN/8, x4, x1, x2)

inst_339:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xc5a2d48f7e4c8 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x3f84adc077a18 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x1b18815c400fe and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fcc5a2d48f7e4c8; op2val:0x4003f84adc077a18;
op3val:0x3fe1b18815c400fe; valaddr_reg:x3; val_offset:1017*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1017*FLEN/8, x4, x1, x2)

inst_340:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xc689c8d4b30ec and fs2 == 0 and fe2 == 0x401 and fm2 == 0x1b71a1ed2a106 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xf74413568760b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fcc689c8d4b30ec; op2val:0x4011b71a1ed2a106;
op3val:0x3fef74413568760b; valaddr_reg:x3; val_offset:1020*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1020*FLEN/8, x4, x1, x2)

inst_341:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xc689c8d4b30ec and fs2 == 0 and fe2 == 0x401 and fm2 == 0x1b71a1ed2a106 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xf74413568760b and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fcc689c8d4b30ec; op2val:0x4011b71a1ed2a106;
op3val:0x3fef74413568760b; valaddr_reg:x3; val_offset:1023*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1023*FLEN/8, x4, x1, x2)

inst_342:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xc689c8d4b30ec and fs2 == 0 and fe2 == 0x401 and fm2 == 0x1b71a1ed2a106 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xf74413568760b and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fcc689c8d4b30ec; op2val:0x4011b71a1ed2a106;
op3val:0x3fef74413568760b; valaddr_reg:x3; val_offset:1026*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1026*FLEN/8, x4, x1, x2)

inst_343:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xc689c8d4b30ec and fs2 == 0 and fe2 == 0x401 and fm2 == 0x1b71a1ed2a106 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xf74413568760b and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fcc689c8d4b30ec; op2val:0x4011b71a1ed2a106;
op3val:0x3fef74413568760b; valaddr_reg:x3; val_offset:1029*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1029*FLEN/8, x4, x1, x2)

inst_344:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xc689c8d4b30ec and fs2 == 0 and fe2 == 0x401 and fm2 == 0x1b71a1ed2a106 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xf74413568760b and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fcc689c8d4b30ec; op2val:0x4011b71a1ed2a106;
op3val:0x3fef74413568760b; valaddr_reg:x3; val_offset:1032*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1032*FLEN/8, x4, x1, x2)

inst_345:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x0334f9600ade2 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x564b6fef8cac8 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x5a952701e2ad0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd0334f9600ade2; op2val:0x3ff564b6fef8cac8;
op3val:0x3fd5a952701e2ad0; valaddr_reg:x3; val_offset:1035*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1035*FLEN/8, x4, x1, x2)

inst_346:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x0334f9600ade2 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x564b6fef8cac8 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x5a952701e2ad0 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd0334f9600ade2; op2val:0x3ff564b6fef8cac8;
op3val:0x3fd5a952701e2ad0; valaddr_reg:x3; val_offset:1038*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1038*FLEN/8, x4, x1, x2)

inst_347:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x0334f9600ade2 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x564b6fef8cac8 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x5a952701e2ad0 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd0334f9600ade2; op2val:0x3ff564b6fef8cac8;
op3val:0x3fd5a952701e2ad0; valaddr_reg:x3; val_offset:1041*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1041*FLEN/8, x4, x1, x2)

inst_348:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x0334f9600ade2 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x564b6fef8cac8 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x5a952701e2ad0 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd0334f9600ade2; op2val:0x3ff564b6fef8cac8;
op3val:0x3fd5a952701e2ad0; valaddr_reg:x3; val_offset:1044*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1044*FLEN/8, x4, x1, x2)

inst_349:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x0334f9600ade2 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x564b6fef8cac8 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x5a952701e2ad0 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd0334f9600ade2; op2val:0x3ff564b6fef8cac8;
op3val:0x3fd5a952701e2ad0; valaddr_reg:x3; val_offset:1047*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1047*FLEN/8, x4, x1, x2)

inst_350:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x039156a8efdf2 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x72bbcd1cdb810 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x77e67a631cf2a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd039156a8efdf2; op2val:0x40072bbcd1cdb810;
op3val:0x3fe77e67a631cf2a; valaddr_reg:x3; val_offset:1050*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1050*FLEN/8, x4, x1, x2)

inst_351:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x039156a8efdf2 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x72bbcd1cdb810 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x77e67a631cf2a and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd039156a8efdf2; op2val:0x40072bbcd1cdb810;
op3val:0x3fe77e67a631cf2a; valaddr_reg:x3; val_offset:1053*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1053*FLEN/8, x4, x1, x2)

inst_352:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x039156a8efdf2 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x72bbcd1cdb810 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x77e67a631cf2a and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd039156a8efdf2; op2val:0x40072bbcd1cdb810;
op3val:0x3fe77e67a631cf2a; valaddr_reg:x3; val_offset:1056*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1056*FLEN/8, x4, x1, x2)

inst_353:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x039156a8efdf2 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x72bbcd1cdb810 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x77e67a631cf2a and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd039156a8efdf2; op2val:0x40072bbcd1cdb810;
op3val:0x3fe77e67a631cf2a; valaddr_reg:x3; val_offset:1059*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1059*FLEN/8, x4, x1, x2)

inst_354:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x039156a8efdf2 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x72bbcd1cdb810 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x77e67a631cf2a and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd039156a8efdf2; op2val:0x40072bbcd1cdb810;
op3val:0x3fe77e67a631cf2a; valaddr_reg:x3; val_offset:1062*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1062*FLEN/8, x4, x1, x2)

inst_355:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x03c6840036cda and fs2 == 0 and fe2 == 0x400 and fm2 == 0x2fdd044d6814d and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x34583cf9db703 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd03c6840036cda; op2val:0x4002fdd044d6814d;
op3val:0x3fe34583cf9db703; valaddr_reg:x3; val_offset:1065*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1065*FLEN/8, x4, x1, x2)

inst_356:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x03c6840036cda and fs2 == 0 and fe2 == 0x400 and fm2 == 0x2fdd044d6814d and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x34583cf9db703 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd03c6840036cda; op2val:0x4002fdd044d6814d;
op3val:0x3fe34583cf9db703; valaddr_reg:x3; val_offset:1068*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1068*FLEN/8, x4, x1, x2)

inst_357:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x03c6840036cda and fs2 == 0 and fe2 == 0x400 and fm2 == 0x2fdd044d6814d and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x34583cf9db703 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd03c6840036cda; op2val:0x4002fdd044d6814d;
op3val:0x3fe34583cf9db703; valaddr_reg:x3; val_offset:1071*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1071*FLEN/8, x4, x1, x2)

inst_358:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x03c6840036cda and fs2 == 0 and fe2 == 0x400 and fm2 == 0x2fdd044d6814d and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x34583cf9db703 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd03c6840036cda; op2val:0x4002fdd044d6814d;
op3val:0x3fe34583cf9db703; valaddr_reg:x3; val_offset:1074*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1074*FLEN/8, x4, x1, x2)

inst_359:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x03c6840036cda and fs2 == 0 and fe2 == 0x400 and fm2 == 0x2fdd044d6814d and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x34583cf9db703 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd03c6840036cda; op2val:0x4002fdd044d6814d;
op3val:0x3fe34583cf9db703; valaddr_reg:x3; val_offset:1077*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1077*FLEN/8, x4, x1, x2)

inst_360:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x097594f14cd9c and fs2 == 0 and fe2 == 0x400 and fm2 == 0x620e618e1177e and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x6f23818cb03c8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd097594f14cd9c; op2val:0x400620e618e1177e;
op3val:0x3fe6f23818cb03c8; valaddr_reg:x3; val_offset:1080*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1080*FLEN/8, x4, x1, x2)

inst_361:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x097594f14cd9c and fs2 == 0 and fe2 == 0x400 and fm2 == 0x620e618e1177e and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x6f23818cb03c8 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd097594f14cd9c; op2val:0x400620e618e1177e;
op3val:0x3fe6f23818cb03c8; valaddr_reg:x3; val_offset:1083*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1083*FLEN/8, x4, x1, x2)

inst_362:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x097594f14cd9c and fs2 == 0 and fe2 == 0x400 and fm2 == 0x620e618e1177e and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x6f23818cb03c8 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd097594f14cd9c; op2val:0x400620e618e1177e;
op3val:0x3fe6f23818cb03c8; valaddr_reg:x3; val_offset:1086*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1086*FLEN/8, x4, x1, x2)

inst_363:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x097594f14cd9c and fs2 == 0 and fe2 == 0x400 and fm2 == 0x620e618e1177e and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x6f23818cb03c8 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd097594f14cd9c; op2val:0x400620e618e1177e;
op3val:0x3fe6f23818cb03c8; valaddr_reg:x3; val_offset:1089*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1089*FLEN/8, x4, x1, x2)

inst_364:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x097594f14cd9c and fs2 == 0 and fe2 == 0x400 and fm2 == 0x620e618e1177e and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x6f23818cb03c8 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd097594f14cd9c; op2val:0x400620e618e1177e;
op3val:0x3fe6f23818cb03c8; valaddr_reg:x3; val_offset:1092*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1092*FLEN/8, x4, x1, x2)

inst_365:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x0b4f120943222 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x09e0c2e0f16fd and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x159f8a582b8e1 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd0b4f120943222; op2val:0x40009e0c2e0f16fd;
op3val:0x3fe159f8a582b8e1; valaddr_reg:x3; val_offset:1095*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1095*FLEN/8, x4, x1, x2)

inst_366:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x0b4f120943222 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x09e0c2e0f16fd and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x159f8a582b8e1 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd0b4f120943222; op2val:0x40009e0c2e0f16fd;
op3val:0x3fe159f8a582b8e1; valaddr_reg:x3; val_offset:1098*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1098*FLEN/8, x4, x1, x2)

inst_367:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x0b4f120943222 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x09e0c2e0f16fd and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x159f8a582b8e1 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd0b4f120943222; op2val:0x40009e0c2e0f16fd;
op3val:0x3fe159f8a582b8e1; valaddr_reg:x3; val_offset:1101*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1101*FLEN/8, x4, x1, x2)

inst_368:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x0b4f120943222 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x09e0c2e0f16fd and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x159f8a582b8e1 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd0b4f120943222; op2val:0x40009e0c2e0f16fd;
op3val:0x3fe159f8a582b8e1; valaddr_reg:x3; val_offset:1104*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1104*FLEN/8, x4, x1, x2)

inst_369:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x0b4f120943222 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x09e0c2e0f16fd and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x159f8a582b8e1 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd0b4f120943222; op2val:0x40009e0c2e0f16fd;
op3val:0x3fe159f8a582b8e1; valaddr_reg:x3; val_offset:1107*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1107*FLEN/8, x4, x1, x2)

inst_370:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x0d35fafc88834 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x20c696cc00970 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x2fad90b061980 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd0d35fafc88834; op2val:0x40020c696cc00970;
op3val:0x3fe2fad90b061980; valaddr_reg:x3; val_offset:1110*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1110*FLEN/8, x4, x1, x2)

inst_371:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x0d35fafc88834 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x20c696cc00970 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x2fad90b061980 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd0d35fafc88834; op2val:0x40020c696cc00970;
op3val:0x3fe2fad90b061980; valaddr_reg:x3; val_offset:1113*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1113*FLEN/8, x4, x1, x2)

inst_372:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x0d35fafc88834 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x20c696cc00970 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x2fad90b061980 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd0d35fafc88834; op2val:0x40020c696cc00970;
op3val:0x3fe2fad90b061980; valaddr_reg:x3; val_offset:1116*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1116*FLEN/8, x4, x1, x2)

inst_373:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x0d35fafc88834 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x20c696cc00970 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x2fad90b061980 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd0d35fafc88834; op2val:0x40020c696cc00970;
op3val:0x3fe2fad90b061980; valaddr_reg:x3; val_offset:1119*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1119*FLEN/8, x4, x1, x2)

inst_374:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x0d35fafc88834 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x20c696cc00970 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x2fad90b061980 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd0d35fafc88834; op2val:0x40020c696cc00970;
op3val:0x3fe2fad90b061980; valaddr_reg:x3; val_offset:1122*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1122*FLEN/8, x4, x1, x2)

inst_375:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x12ec74297ebc0 and fs2 == 0 and fe2 == 0x400 and fm2 == 0xa664077ece2b4 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xc59d33e66c167 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd12ec74297ebc0; op2val:0x400a664077ece2b4;
op3val:0x3fec59d33e66c167; valaddr_reg:x3; val_offset:1125*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1125*FLEN/8, x4, x1, x2)

inst_376:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x12ec74297ebc0 and fs2 == 0 and fe2 == 0x400 and fm2 == 0xa664077ece2b4 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xc59d33e66c167 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd12ec74297ebc0; op2val:0x400a664077ece2b4;
op3val:0x3fec59d33e66c167; valaddr_reg:x3; val_offset:1128*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1128*FLEN/8, x4, x1, x2)

inst_377:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x12ec74297ebc0 and fs2 == 0 and fe2 == 0x400 and fm2 == 0xa664077ece2b4 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xc59d33e66c167 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd12ec74297ebc0; op2val:0x400a664077ece2b4;
op3val:0x3fec59d33e66c167; valaddr_reg:x3; val_offset:1131*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1131*FLEN/8, x4, x1, x2)

inst_378:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x12ec74297ebc0 and fs2 == 0 and fe2 == 0x400 and fm2 == 0xa664077ece2b4 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xc59d33e66c167 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd12ec74297ebc0; op2val:0x400a664077ece2b4;
op3val:0x3fec59d33e66c167; valaddr_reg:x3; val_offset:1134*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1134*FLEN/8, x4, x1, x2)

inst_379:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x12ec74297ebc0 and fs2 == 0 and fe2 == 0x400 and fm2 == 0xa664077ece2b4 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xc59d33e66c167 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd12ec74297ebc0; op2val:0x400a664077ece2b4;
op3val:0x3fec59d33e66c167; valaddr_reg:x3; val_offset:1137*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1137*FLEN/8, x4, x1, x2)

inst_380:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x14a8cc9051ae8 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x159fce3299375 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x2c075905b92d5 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd14a8cc9051ae8; op2val:0x400159fce3299375;
op3val:0x3fe2c075905b92d5; valaddr_reg:x3; val_offset:1140*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1140*FLEN/8, x4, x1, x2)

inst_381:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x14a8cc9051ae8 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x159fce3299375 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x2c075905b92d5 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd14a8cc9051ae8; op2val:0x400159fce3299375;
op3val:0x3fe2c075905b92d5; valaddr_reg:x3; val_offset:1143*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1143*FLEN/8, x4, x1, x2)

inst_382:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x14a8cc9051ae8 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x159fce3299375 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x2c075905b92d5 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd14a8cc9051ae8; op2val:0x400159fce3299375;
op3val:0x3fe2c075905b92d5; valaddr_reg:x3; val_offset:1146*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1146*FLEN/8, x4, x1, x2)

inst_383:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x14a8cc9051ae8 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x159fce3299375 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x2c075905b92d5 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd14a8cc9051ae8; op2val:0x400159fce3299375;
op3val:0x3fe2c075905b92d5; valaddr_reg:x3; val_offset:1149*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1149*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_4)

inst_384:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x14a8cc9051ae8 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x159fce3299375 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x2c075905b92d5 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd14a8cc9051ae8; op2val:0x400159fce3299375;
op3val:0x3fe2c075905b92d5; valaddr_reg:x3; val_offset:1152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1152*FLEN/8, x4, x1, x2)

inst_385:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x161cc16a09f24 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x7e3d0bfffc7b9 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x9f413a7fa65aa and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd161cc16a09f24; op2val:0x3ff7e3d0bfffc7b9;
op3val:0x3fd9f413a7fa65aa; valaddr_reg:x3; val_offset:1155*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1155*FLEN/8, x4, x1, x2)

inst_386:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x161cc16a09f24 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x7e3d0bfffc7b9 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x9f413a7fa65aa and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd161cc16a09f24; op2val:0x3ff7e3d0bfffc7b9;
op3val:0x3fd9f413a7fa65aa; valaddr_reg:x3; val_offset:1158*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1158*FLEN/8, x4, x1, x2)

inst_387:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x161cc16a09f24 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x7e3d0bfffc7b9 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x9f413a7fa65aa and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd161cc16a09f24; op2val:0x3ff7e3d0bfffc7b9;
op3val:0x3fd9f413a7fa65aa; valaddr_reg:x3; val_offset:1161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1161*FLEN/8, x4, x1, x2)

inst_388:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x161cc16a09f24 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x7e3d0bfffc7b9 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x9f413a7fa65aa and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd161cc16a09f24; op2val:0x3ff7e3d0bfffc7b9;
op3val:0x3fd9f413a7fa65aa; valaddr_reg:x3; val_offset:1164*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1164*FLEN/8, x4, x1, x2)

inst_389:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x161cc16a09f24 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x7e3d0bfffc7b9 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x9f413a7fa65aa and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd161cc16a09f24; op2val:0x3ff7e3d0bfffc7b9;
op3val:0x3fd9f413a7fa65aa; valaddr_reg:x3; val_offset:1167*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1167*FLEN/8, x4, x1, x2)

inst_390:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x1690a317382ca and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x396656d35dbcb and fs3 == 0 and fe3 == 0x3fb and fm3 == 0x55063382f4ef0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd1690a317382ca; op2val:0x3fd396656d35dbcb;
op3val:0x3fb55063382f4ef0; valaddr_reg:x3; val_offset:1170*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1170*FLEN/8, x4, x1, x2)

inst_391:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x1690a317382ca and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x396656d35dbcb and fs3 == 0 and fe3 == 0x3fb and fm3 == 0x55063382f4ef0 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd1690a317382ca; op2val:0x3fd396656d35dbcb;
op3val:0x3fb55063382f4ef0; valaddr_reg:x3; val_offset:1173*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1173*FLEN/8, x4, x1, x2)

inst_392:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x1690a317382ca and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x396656d35dbcb and fs3 == 0 and fe3 == 0x3fb and fm3 == 0x55063382f4ef0 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd1690a317382ca; op2val:0x3fd396656d35dbcb;
op3val:0x3fb55063382f4ef0; valaddr_reg:x3; val_offset:1176*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1176*FLEN/8, x4, x1, x2)

inst_393:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x1690a317382ca and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x396656d35dbcb and fs3 == 0 and fe3 == 0x3fb and fm3 == 0x55063382f4ef0 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd1690a317382ca; op2val:0x3fd396656d35dbcb;
op3val:0x3fb55063382f4ef0; valaddr_reg:x3; val_offset:1179*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1179*FLEN/8, x4, x1, x2)

inst_394:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x1690a317382ca and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x396656d35dbcb and fs3 == 0 and fe3 == 0x3fb and fm3 == 0x55063382f4ef0 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd1690a317382ca; op2val:0x3fd396656d35dbcb;
op3val:0x3fb55063382f4ef0; valaddr_reg:x3; val_offset:1182*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1182*FLEN/8, x4, x1, x2)

inst_395:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x1722eb5945782 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x1766d2924fd51 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x30a72c023e4d2 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd1722eb5945782; op2val:0x3ff1766d2924fd51;
op3val:0x3fd30a72c023e4d2; valaddr_reg:x3; val_offset:1185*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1185*FLEN/8, x4, x1, x2)

inst_396:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x1722eb5945782 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x1766d2924fd51 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x30a72c023e4d2 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd1722eb5945782; op2val:0x3ff1766d2924fd51;
op3val:0x3fd30a72c023e4d2; valaddr_reg:x3; val_offset:1188*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1188*FLEN/8, x4, x1, x2)

inst_397:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x1722eb5945782 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x1766d2924fd51 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x30a72c023e4d2 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd1722eb5945782; op2val:0x3ff1766d2924fd51;
op3val:0x3fd30a72c023e4d2; valaddr_reg:x3; val_offset:1191*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1191*FLEN/8, x4, x1, x2)

inst_398:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x1722eb5945782 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x1766d2924fd51 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x30a72c023e4d2 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd1722eb5945782; op2val:0x3ff1766d2924fd51;
op3val:0x3fd30a72c023e4d2; valaddr_reg:x3; val_offset:1194*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1194*FLEN/8, x4, x1, x2)

inst_399:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x1722eb5945782 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x1766d2924fd51 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x30a72c023e4d2 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd1722eb5945782; op2val:0x3ff1766d2924fd51;
op3val:0x3fd30a72c023e4d2; valaddr_reg:x3; val_offset:1197*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1197*FLEN/8, x4, x1, x2)

inst_400:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x1a78dc369aa80 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xf805fdbd17127 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x161246f0f1eec and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd1a78dc369aa80; op2val:0x3fdf805fdbd17127;
op3val:0x3fc161246f0f1eec; valaddr_reg:x3; val_offset:1200*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1200*FLEN/8, x4, x1, x2)

inst_401:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x1a78dc369aa80 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xf805fdbd17127 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x161246f0f1eec and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd1a78dc369aa80; op2val:0x3fdf805fdbd17127;
op3val:0x3fc161246f0f1eec; valaddr_reg:x3; val_offset:1203*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1203*FLEN/8, x4, x1, x2)

inst_402:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x1a78dc369aa80 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xf805fdbd17127 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x161246f0f1eec and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd1a78dc369aa80; op2val:0x3fdf805fdbd17127;
op3val:0x3fc161246f0f1eec; valaddr_reg:x3; val_offset:1206*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1206*FLEN/8, x4, x1, x2)

inst_403:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x1a78dc369aa80 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xf805fdbd17127 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x161246f0f1eec and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd1a78dc369aa80; op2val:0x3fdf805fdbd17127;
op3val:0x3fc161246f0f1eec; valaddr_reg:x3; val_offset:1209*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1209*FLEN/8, x4, x1, x2)

inst_404:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x1a78dc369aa80 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xf805fdbd17127 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x161246f0f1eec and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd1a78dc369aa80; op2val:0x3fdf805fdbd17127;
op3val:0x3fc161246f0f1eec; valaddr_reg:x3; val_offset:1212*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1212*FLEN/8, x4, x1, x2)

inst_405:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x1f11f58160e72 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x81c29c07fd297 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xb0943ccb85c2d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd1f11f58160e72; op2val:0x40081c29c07fd297;
op3val:0x3feb0943ccb85c2d; valaddr_reg:x3; val_offset:1215*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1215*FLEN/8, x4, x1, x2)

inst_406:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x1f11f58160e72 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x81c29c07fd297 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xb0943ccb85c2d and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd1f11f58160e72; op2val:0x40081c29c07fd297;
op3val:0x3feb0943ccb85c2d; valaddr_reg:x3; val_offset:1218*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1218*FLEN/8, x4, x1, x2)

inst_407:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x1f11f58160e72 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x81c29c07fd297 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xb0943ccb85c2d and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd1f11f58160e72; op2val:0x40081c29c07fd297;
op3val:0x3feb0943ccb85c2d; valaddr_reg:x3; val_offset:1221*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1221*FLEN/8, x4, x1, x2)

inst_408:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x1f11f58160e72 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x81c29c07fd297 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xb0943ccb85c2d and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd1f11f58160e72; op2val:0x40081c29c07fd297;
op3val:0x3feb0943ccb85c2d; valaddr_reg:x3; val_offset:1224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1224*FLEN/8, x4, x1, x2)

inst_409:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x1f11f58160e72 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x81c29c07fd297 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xb0943ccb85c2d and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd1f11f58160e72; op2val:0x40081c29c07fd297;
op3val:0x3feb0943ccb85c2d; valaddr_reg:x3; val_offset:1227*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1227*FLEN/8, x4, x1, x2)

inst_410:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x20670f9d80ef2 and fs2 == 0 and fe2 == 0x400 and fm2 == 0xb1b01d638ddb3 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xe894b95ff7ccb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd20670f9d80ef2; op2val:0x400b1b01d638ddb3;
op3val:0x3fee894b95ff7ccb; valaddr_reg:x3; val_offset:1230*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1230*FLEN/8, x4, x1, x2)

inst_411:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x20670f9d80ef2 and fs2 == 0 and fe2 == 0x400 and fm2 == 0xb1b01d638ddb3 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xe894b95ff7ccb and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd20670f9d80ef2; op2val:0x400b1b01d638ddb3;
op3val:0x3fee894b95ff7ccb; valaddr_reg:x3; val_offset:1233*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1233*FLEN/8, x4, x1, x2)

inst_412:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x20670f9d80ef2 and fs2 == 0 and fe2 == 0x400 and fm2 == 0xb1b01d638ddb3 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xe894b95ff7ccb and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd20670f9d80ef2; op2val:0x400b1b01d638ddb3;
op3val:0x3fee894b95ff7ccb; valaddr_reg:x3; val_offset:1236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1236*FLEN/8, x4, x1, x2)

inst_413:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x20670f9d80ef2 and fs2 == 0 and fe2 == 0x400 and fm2 == 0xb1b01d638ddb3 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xe894b95ff7ccb and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd20670f9d80ef2; op2val:0x400b1b01d638ddb3;
op3val:0x3fee894b95ff7ccb; valaddr_reg:x3; val_offset:1239*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1239*FLEN/8, x4, x1, x2)

inst_414:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x20670f9d80ef2 and fs2 == 0 and fe2 == 0x400 and fm2 == 0xb1b01d638ddb3 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xe894b95ff7ccb and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd20670f9d80ef2; op2val:0x400b1b01d638ddb3;
op3val:0x3fee894b95ff7ccb; valaddr_reg:x3; val_offset:1242*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1242*FLEN/8, x4, x1, x2)

inst_415:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x226f44e216580 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x404a6e250f952 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x6b5f873a60a44 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd226f44e216580; op2val:0x3ff404a6e250f952;
op3val:0x3fd6b5f873a60a44; valaddr_reg:x3; val_offset:1245*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1245*FLEN/8, x4, x1, x2)

inst_416:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x226f44e216580 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x404a6e250f952 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x6b5f873a60a44 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd226f44e216580; op2val:0x3ff404a6e250f952;
op3val:0x3fd6b5f873a60a44; valaddr_reg:x3; val_offset:1248*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1248*FLEN/8, x4, x1, x2)

inst_417:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x226f44e216580 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x404a6e250f952 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x6b5f873a60a44 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd226f44e216580; op2val:0x3ff404a6e250f952;
op3val:0x3fd6b5f873a60a44; valaddr_reg:x3; val_offset:1251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1251*FLEN/8, x4, x1, x2)

inst_418:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x226f44e216580 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x404a6e250f952 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x6b5f873a60a44 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd226f44e216580; op2val:0x3ff404a6e250f952;
op3val:0x3fd6b5f873a60a44; valaddr_reg:x3; val_offset:1254*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1254*FLEN/8, x4, x1, x2)

inst_419:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x226f44e216580 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x404a6e250f952 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x6b5f873a60a44 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd226f44e216580; op2val:0x3ff404a6e250f952;
op3val:0x3fd6b5f873a60a44; valaddr_reg:x3; val_offset:1257*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1257*FLEN/8, x4, x1, x2)

inst_420:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x2e13826695a58 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x64aa7000f4ad8 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0xa4dc3e74e9fdc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd2e13826695a58; op2val:0x3fe64aa7000f4ad8;
op3val:0x3fca4dc3e74e9fdc; valaddr_reg:x3; val_offset:1260*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1260*FLEN/8, x4, x1, x2)

inst_421:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x2e13826695a58 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x64aa7000f4ad8 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0xa4dc3e74e9fdc and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd2e13826695a58; op2val:0x3fe64aa7000f4ad8;
op3val:0x3fca4dc3e74e9fdc; valaddr_reg:x3; val_offset:1263*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1263*FLEN/8, x4, x1, x2)

inst_422:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x2e13826695a58 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x64aa7000f4ad8 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0xa4dc3e74e9fdc and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd2e13826695a58; op2val:0x3fe64aa7000f4ad8;
op3val:0x3fca4dc3e74e9fdc; valaddr_reg:x3; val_offset:1266*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1266*FLEN/8, x4, x1, x2)

inst_423:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x2e13826695a58 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x64aa7000f4ad8 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0xa4dc3e74e9fdc and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd2e13826695a58; op2val:0x3fe64aa7000f4ad8;
op3val:0x3fca4dc3e74e9fdc; valaddr_reg:x3; val_offset:1269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1269*FLEN/8, x4, x1, x2)

inst_424:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x2e13826695a58 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x64aa7000f4ad8 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0xa4dc3e74e9fdc and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd2e13826695a58; op2val:0x3fe64aa7000f4ad8;
op3val:0x3fca4dc3e74e9fdc; valaddr_reg:x3; val_offset:1272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1272*FLEN/8, x4, x1, x2)

inst_425:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x3504d5bd2a7fc and fs2 == 0 and fe2 == 0x400 and fm2 == 0xa2d7ff11ff3a5 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xf9969ff3eb932 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd3504d5bd2a7fc; op2val:0x400a2d7ff11ff3a5;
op3val:0x3fef9969ff3eb932; valaddr_reg:x3; val_offset:1275*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1275*FLEN/8, x4, x1, x2)

inst_426:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x3504d5bd2a7fc and fs2 == 0 and fe2 == 0x400 and fm2 == 0xa2d7ff11ff3a5 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xf9969ff3eb932 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd3504d5bd2a7fc; op2val:0x400a2d7ff11ff3a5;
op3val:0x3fef9969ff3eb932; valaddr_reg:x3; val_offset:1278*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1278*FLEN/8, x4, x1, x2)

inst_427:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x3504d5bd2a7fc and fs2 == 0 and fe2 == 0x400 and fm2 == 0xa2d7ff11ff3a5 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xf9969ff3eb932 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd3504d5bd2a7fc; op2val:0x400a2d7ff11ff3a5;
op3val:0x3fef9969ff3eb932; valaddr_reg:x3; val_offset:1281*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1281*FLEN/8, x4, x1, x2)

inst_428:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x3504d5bd2a7fc and fs2 == 0 and fe2 == 0x400 and fm2 == 0xa2d7ff11ff3a5 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xf9969ff3eb932 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd3504d5bd2a7fc; op2val:0x400a2d7ff11ff3a5;
op3val:0x3fef9969ff3eb932; valaddr_reg:x3; val_offset:1284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1284*FLEN/8, x4, x1, x2)

inst_429:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x3504d5bd2a7fc and fs2 == 0 and fe2 == 0x400 and fm2 == 0xa2d7ff11ff3a5 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xf9969ff3eb932 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd3504d5bd2a7fc; op2val:0x400a2d7ff11ff3a5;
op3val:0x3fef9969ff3eb932; valaddr_reg:x3; val_offset:1287*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1287*FLEN/8, x4, x1, x2)

inst_430:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x38e3564325f64 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x4516c3ae1ff79 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x8d546f36a542c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd38e3564325f64; op2val:0x3ff4516c3ae1ff79;
op3val:0x3fd8d546f36a542c; valaddr_reg:x3; val_offset:1290*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1290*FLEN/8, x4, x1, x2)

inst_431:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x38e3564325f64 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x4516c3ae1ff79 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x8d546f36a542c and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd38e3564325f64; op2val:0x3ff4516c3ae1ff79;
op3val:0x3fd8d546f36a542c; valaddr_reg:x3; val_offset:1293*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1293*FLEN/8, x4, x1, x2)

inst_432:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x38e3564325f64 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x4516c3ae1ff79 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x8d546f36a542c and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd38e3564325f64; op2val:0x3ff4516c3ae1ff79;
op3val:0x3fd8d546f36a542c; valaddr_reg:x3; val_offset:1296*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1296*FLEN/8, x4, x1, x2)

inst_433:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x38e3564325f64 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x4516c3ae1ff79 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x8d546f36a542c and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd38e3564325f64; op2val:0x3ff4516c3ae1ff79;
op3val:0x3fd8d546f36a542c; valaddr_reg:x3; val_offset:1299*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1299*FLEN/8, x4, x1, x2)

inst_434:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x38e3564325f64 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x4516c3ae1ff79 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x8d546f36a542c and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd38e3564325f64; op2val:0x3ff4516c3ae1ff79;
op3val:0x3fd8d546f36a542c; valaddr_reg:x3; val_offset:1302*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1302*FLEN/8, x4, x1, x2)

inst_435:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x3913db3ab0a14 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x3b78f0844a256 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x81cf5634614ac and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd3913db3ab0a14; op2val:0x3fe3b78f0844a256;
op3val:0x3fc81cf5634614ac; valaddr_reg:x3; val_offset:1305*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1305*FLEN/8, x4, x1, x2)

inst_436:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x3913db3ab0a14 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x3b78f0844a256 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x81cf5634614ac and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd3913db3ab0a14; op2val:0x3fe3b78f0844a256;
op3val:0x3fc81cf5634614ac; valaddr_reg:x3; val_offset:1308*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1308*FLEN/8, x4, x1, x2)

inst_437:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x3913db3ab0a14 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x3b78f0844a256 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x81cf5634614ac and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd3913db3ab0a14; op2val:0x3fe3b78f0844a256;
op3val:0x3fc81cf5634614ac; valaddr_reg:x3; val_offset:1311*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1311*FLEN/8, x4, x1, x2)

inst_438:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x3913db3ab0a14 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x3b78f0844a256 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x81cf5634614ac and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd3913db3ab0a14; op2val:0x3fe3b78f0844a256;
op3val:0x3fc81cf5634614ac; valaddr_reg:x3; val_offset:1314*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1314*FLEN/8, x4, x1, x2)

inst_439:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x3913db3ab0a14 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x3b78f0844a256 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x81cf5634614ac and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd3913db3ab0a14; op2val:0x3fe3b78f0844a256;
op3val:0x3fc81cf5634614ac; valaddr_reg:x3; val_offset:1317*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1317*FLEN/8, x4, x1, x2)

inst_440:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x398c63fd675de and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x5cea59e72bb75 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0xab59e05cd0208 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd398c63fd675de; op2val:0x3fe5cea59e72bb75;
op3val:0x3fcab59e05cd0208; valaddr_reg:x3; val_offset:1320*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1320*FLEN/8, x4, x1, x2)

inst_441:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x398c63fd675de and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x5cea59e72bb75 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0xab59e05cd0208 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd398c63fd675de; op2val:0x3fe5cea59e72bb75;
op3val:0x3fcab59e05cd0208; valaddr_reg:x3; val_offset:1323*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1323*FLEN/8, x4, x1, x2)

inst_442:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x398c63fd675de and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x5cea59e72bb75 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0xab59e05cd0208 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd398c63fd675de; op2val:0x3fe5cea59e72bb75;
op3val:0x3fcab59e05cd0208; valaddr_reg:x3; val_offset:1326*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1326*FLEN/8, x4, x1, x2)

inst_443:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x398c63fd675de and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x5cea59e72bb75 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0xab59e05cd0208 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd398c63fd675de; op2val:0x3fe5cea59e72bb75;
op3val:0x3fcab59e05cd0208; valaddr_reg:x3; val_offset:1329*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1329*FLEN/8, x4, x1, x2)

inst_444:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x398c63fd675de and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x5cea59e72bb75 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0xab59e05cd0208 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd398c63fd675de; op2val:0x3fe5cea59e72bb75;
op3val:0x3fcab59e05cd0208; valaddr_reg:x3; val_offset:1332*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1332*FLEN/8, x4, x1, x2)

inst_445:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x3fed819e0543e and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x6a1f6e69afc0a and fs3 == 0 and fe3 == 0x3fc and fm3 == 0xc48d21084754c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd3fed819e0543e; op2val:0x3fe6a1f6e69afc0a;
op3val:0x3fcc48d21084754c; valaddr_reg:x3; val_offset:1335*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1335*FLEN/8, x4, x1, x2)

inst_446:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x3fed819e0543e and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x6a1f6e69afc0a and fs3 == 0 and fe3 == 0x3fc and fm3 == 0xc48d21084754c and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd3fed819e0543e; op2val:0x3fe6a1f6e69afc0a;
op3val:0x3fcc48d21084754c; valaddr_reg:x3; val_offset:1338*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1338*FLEN/8, x4, x1, x2)

inst_447:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x3fed819e0543e and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x6a1f6e69afc0a and fs3 == 0 and fe3 == 0x3fc and fm3 == 0xc48d21084754c and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd3fed819e0543e; op2val:0x3fe6a1f6e69afc0a;
op3val:0x3fcc48d21084754c; valaddr_reg:x3; val_offset:1341*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1341*FLEN/8, x4, x1, x2)

inst_448:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x3fed819e0543e and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x6a1f6e69afc0a and fs3 == 0 and fe3 == 0x3fc and fm3 == 0xc48d21084754c and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd3fed819e0543e; op2val:0x3fe6a1f6e69afc0a;
op3val:0x3fcc48d21084754c; valaddr_reg:x3; val_offset:1344*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1344*FLEN/8, x4, x1, x2)

inst_449:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x3fed819e0543e and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x6a1f6e69afc0a and fs3 == 0 and fe3 == 0x3fc and fm3 == 0xc48d21084754c and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd3fed819e0543e; op2val:0x3fe6a1f6e69afc0a;
op3val:0x3fcc48d21084754c; valaddr_reg:x3; val_offset:1347*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1347*FLEN/8, x4, x1, x2)

inst_450:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x43b2ba55a28ae and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x6929bde22d68d and fs3 == 0 and fe3 == 0x3fc and fm3 == 0xc8abd07b8ab18 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd43b2ba55a28ae; op2val:0x3fe6929bde22d68d;
op3val:0x3fcc8abd07b8ab18; valaddr_reg:x3; val_offset:1350*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1350*FLEN/8, x4, x1, x2)

inst_451:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x43b2ba55a28ae and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x6929bde22d68d and fs3 == 0 and fe3 == 0x3fc and fm3 == 0xc8abd07b8ab18 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd43b2ba55a28ae; op2val:0x3fe6929bde22d68d;
op3val:0x3fcc8abd07b8ab18; valaddr_reg:x3; val_offset:1353*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1353*FLEN/8, x4, x1, x2)

inst_452:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x43b2ba55a28ae and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x6929bde22d68d and fs3 == 0 and fe3 == 0x3fc and fm3 == 0xc8abd07b8ab18 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd43b2ba55a28ae; op2val:0x3fe6929bde22d68d;
op3val:0x3fcc8abd07b8ab18; valaddr_reg:x3; val_offset:1356*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1356*FLEN/8, x4, x1, x2)

inst_453:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x43b2ba55a28ae and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x6929bde22d68d and fs3 == 0 and fe3 == 0x3fc and fm3 == 0xc8abd07b8ab18 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd43b2ba55a28ae; op2val:0x3fe6929bde22d68d;
op3val:0x3fcc8abd07b8ab18; valaddr_reg:x3; val_offset:1359*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1359*FLEN/8, x4, x1, x2)

inst_454:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x43b2ba55a28ae and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x6929bde22d68d and fs3 == 0 and fe3 == 0x3fc and fm3 == 0xc8abd07b8ab18 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd43b2ba55a28ae; op2val:0x3fe6929bde22d68d;
op3val:0x3fcc8abd07b8ab18; valaddr_reg:x3; val_offset:1362*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1362*FLEN/8, x4, x1, x2)

inst_455:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x494dd4b96e2d8 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x9ddcbb31ee340 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x0a2f3fef05664 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd494dd4b96e2d8; op2val:0x3ff9ddcbb31ee340;
op3val:0x3fe0a2f3fef05664; valaddr_reg:x3; val_offset:1365*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1365*FLEN/8, x4, x1, x2)

inst_456:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x494dd4b96e2d8 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x9ddcbb31ee340 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x0a2f3fef05664 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd494dd4b96e2d8; op2val:0x3ff9ddcbb31ee340;
op3val:0x3fe0a2f3fef05664; valaddr_reg:x3; val_offset:1368*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1368*FLEN/8, x4, x1, x2)

inst_457:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x494dd4b96e2d8 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x9ddcbb31ee340 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x0a2f3fef05664 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd494dd4b96e2d8; op2val:0x3ff9ddcbb31ee340;
op3val:0x3fe0a2f3fef05664; valaddr_reg:x3; val_offset:1371*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1371*FLEN/8, x4, x1, x2)

inst_458:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x494dd4b96e2d8 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x9ddcbb31ee340 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x0a2f3fef05664 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd494dd4b96e2d8; op2val:0x3ff9ddcbb31ee340;
op3val:0x3fe0a2f3fef05664; valaddr_reg:x3; val_offset:1374*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1374*FLEN/8, x4, x1, x2)

inst_459:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x494dd4b96e2d8 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x9ddcbb31ee340 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x0a2f3fef05664 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd494dd4b96e2d8; op2val:0x3ff9ddcbb31ee340;
op3val:0x3fe0a2f3fef05664; valaddr_reg:x3; val_offset:1377*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1377*FLEN/8, x4, x1, x2)

inst_460:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x4bd73480df80e and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xab77da4b361b8 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x150da8498ecc8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd4bd73480df80e; op2val:0x3feab77da4b361b8;
op3val:0x3fd150da8498ecc8; valaddr_reg:x3; val_offset:1380*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1380*FLEN/8, x4, x1, x2)

inst_461:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x4bd73480df80e and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xab77da4b361b8 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x150da8498ecc8 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd4bd73480df80e; op2val:0x3feab77da4b361b8;
op3val:0x3fd150da8498ecc8; valaddr_reg:x3; val_offset:1383*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1383*FLEN/8, x4, x1, x2)

inst_462:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x4bd73480df80e and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xab77da4b361b8 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x150da8498ecc8 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd4bd73480df80e; op2val:0x3feab77da4b361b8;
op3val:0x3fd150da8498ecc8; valaddr_reg:x3; val_offset:1386*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1386*FLEN/8, x4, x1, x2)

inst_463:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x4bd73480df80e and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xab77da4b361b8 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x150da8498ecc8 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd4bd73480df80e; op2val:0x3feab77da4b361b8;
op3val:0x3fd150da8498ecc8; valaddr_reg:x3; val_offset:1389*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1389*FLEN/8, x4, x1, x2)

inst_464:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x4bd73480df80e and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xab77da4b361b8 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x150da8498ecc8 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd4bd73480df80e; op2val:0x3feab77da4b361b8;
op3val:0x3fd150da8498ecc8; valaddr_reg:x3; val_offset:1392*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1392*FLEN/8, x4, x1, x2)

inst_465:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x51b29b1094462 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x571255803e91d and fs3 == 0 and fe3 == 0x3fb and fm3 == 0xc48e7d1b97280 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd51b29b1094462; op2val:0x3fd571255803e91d;
op3val:0x3fbc48e7d1b97280; valaddr_reg:x3; val_offset:1395*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1395*FLEN/8, x4, x1, x2)

inst_466:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x51b29b1094462 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x571255803e91d and fs3 == 0 and fe3 == 0x3fb and fm3 == 0xc48e7d1b97280 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd51b29b1094462; op2val:0x3fd571255803e91d;
op3val:0x3fbc48e7d1b97280; valaddr_reg:x3; val_offset:1398*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1398*FLEN/8, x4, x1, x2)

inst_467:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x51b29b1094462 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x571255803e91d and fs3 == 0 and fe3 == 0x3fb and fm3 == 0xc48e7d1b97280 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd51b29b1094462; op2val:0x3fd571255803e91d;
op3val:0x3fbc48e7d1b97280; valaddr_reg:x3; val_offset:1401*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1401*FLEN/8, x4, x1, x2)

inst_468:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x51b29b1094462 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x571255803e91d and fs3 == 0 and fe3 == 0x3fb and fm3 == 0xc48e7d1b97280 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd51b29b1094462; op2val:0x3fd571255803e91d;
op3val:0x3fbc48e7d1b97280; valaddr_reg:x3; val_offset:1404*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1404*FLEN/8, x4, x1, x2)

inst_469:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x51b29b1094462 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x571255803e91d and fs3 == 0 and fe3 == 0x3fb and fm3 == 0xc48e7d1b97280 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd51b29b1094462; op2val:0x3fd571255803e91d;
op3val:0x3fbc48e7d1b97280; valaddr_reg:x3; val_offset:1407*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1407*FLEN/8, x4, x1, x2)

inst_470:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x52aede96c55d4 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x4d1a62e846eed and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xb8b06026f7918 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd52aede96c55d4; op2val:0x4004d1a62e846eed;
op3val:0x3feb8b06026f7918; valaddr_reg:x3; val_offset:1410*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1410*FLEN/8, x4, x1, x2)

inst_471:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x52aede96c55d4 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x4d1a62e846eed and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xb8b06026f7918 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd52aede96c55d4; op2val:0x4004d1a62e846eed;
op3val:0x3feb8b06026f7918; valaddr_reg:x3; val_offset:1413*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1413*FLEN/8, x4, x1, x2)

inst_472:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x52aede96c55d4 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x4d1a62e846eed and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xb8b06026f7918 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd52aede96c55d4; op2val:0x4004d1a62e846eed;
op3val:0x3feb8b06026f7918; valaddr_reg:x3; val_offset:1416*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1416*FLEN/8, x4, x1, x2)

inst_473:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x52aede96c55d4 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x4d1a62e846eed and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xb8b06026f7918 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd52aede96c55d4; op2val:0x4004d1a62e846eed;
op3val:0x3feb8b06026f7918; valaddr_reg:x3; val_offset:1419*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1419*FLEN/8, x4, x1, x2)

inst_474:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x52aede96c55d4 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x4d1a62e846eed and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xb8b06026f7918 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd52aede96c55d4; op2val:0x4004d1a62e846eed;
op3val:0x3feb8b06026f7918; valaddr_reg:x3; val_offset:1422*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1422*FLEN/8, x4, x1, x2)

inst_475:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x557177e84d056 and fs2 == 0 and fe2 == 0x3fb and fm2 == 0x50cb664dd723f and fs3 == 0 and fe3 == 0x3f9 and fm3 == 0xc13436ce02260 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd557177e84d056; op2val:0x3fb50cb664dd723f;
op3val:0x3f9c13436ce02260; valaddr_reg:x3; val_offset:1425*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1425*FLEN/8, x4, x1, x2)

inst_476:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x557177e84d056 and fs2 == 0 and fe2 == 0x3fb and fm2 == 0x50cb664dd723f and fs3 == 0 and fe3 == 0x3f9 and fm3 == 0xc13436ce02260 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd557177e84d056; op2val:0x3fb50cb664dd723f;
op3val:0x3f9c13436ce02260; valaddr_reg:x3; val_offset:1428*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1428*FLEN/8, x4, x1, x2)

inst_477:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x557177e84d056 and fs2 == 0 and fe2 == 0x3fb and fm2 == 0x50cb664dd723f and fs3 == 0 and fe3 == 0x3f9 and fm3 == 0xc13436ce02260 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd557177e84d056; op2val:0x3fb50cb664dd723f;
op3val:0x3f9c13436ce02260; valaddr_reg:x3; val_offset:1431*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1431*FLEN/8, x4, x1, x2)

inst_478:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x557177e84d056 and fs2 == 0 and fe2 == 0x3fb and fm2 == 0x50cb664dd723f and fs3 == 0 and fe3 == 0x3f9 and fm3 == 0xc13436ce02260 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd557177e84d056; op2val:0x3fb50cb664dd723f;
op3val:0x3f9c13436ce02260; valaddr_reg:x3; val_offset:1434*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1434*FLEN/8, x4, x1, x2)

inst_479:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x557177e84d056 and fs2 == 0 and fe2 == 0x3fb and fm2 == 0x50cb664dd723f and fs3 == 0 and fe3 == 0x3f9 and fm3 == 0xc13436ce02260 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd557177e84d056; op2val:0x3fb50cb664dd723f;
op3val:0x3f9c13436ce02260; valaddr_reg:x3; val_offset:1437*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1437*FLEN/8, x4, x1, x2)

inst_480:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x57254e9f5d270 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x4e458f7905430 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xc00fe9f22b17b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd57254e9f5d270; op2val:0x4004e458f7905430;
op3val:0x3fec00fe9f22b17b; valaddr_reg:x3; val_offset:1440*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1440*FLEN/8, x4, x1, x2)

inst_481:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x57254e9f5d270 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x4e458f7905430 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xc00fe9f22b17b and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd57254e9f5d270; op2val:0x4004e458f7905430;
op3val:0x3fec00fe9f22b17b; valaddr_reg:x3; val_offset:1443*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1443*FLEN/8, x4, x1, x2)

inst_482:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x57254e9f5d270 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x4e458f7905430 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xc00fe9f22b17b and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd57254e9f5d270; op2val:0x4004e458f7905430;
op3val:0x3fec00fe9f22b17b; valaddr_reg:x3; val_offset:1446*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1446*FLEN/8, x4, x1, x2)

inst_483:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x57254e9f5d270 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x4e458f7905430 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xc00fe9f22b17b and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd57254e9f5d270; op2val:0x4004e458f7905430;
op3val:0x3fec00fe9f22b17b; valaddr_reg:x3; val_offset:1449*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1449*FLEN/8, x4, x1, x2)

inst_484:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x57254e9f5d270 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x4e458f7905430 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xc00fe9f22b17b and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd57254e9f5d270; op2val:0x4004e458f7905430;
op3val:0x3fec00fe9f22b17b; valaddr_reg:x3; val_offset:1452*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1452*FLEN/8, x4, x1, x2)

inst_485:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x5cef5ceb21cc4 and fs2 == 0 and fe2 == 0x3fb and fm2 == 0x5f6687abecb2d and fs3 == 0 and fe3 == 0x3f9 and fm3 == 0xdef7f0b1f98a0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd5cef5ceb21cc4; op2val:0x3fb5f6687abecb2d;
op3val:0x3f9def7f0b1f98a0; valaddr_reg:x3; val_offset:1455*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1455*FLEN/8, x4, x1, x2)

inst_486:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x5cef5ceb21cc4 and fs2 == 0 and fe2 == 0x3fb and fm2 == 0x5f6687abecb2d and fs3 == 0 and fe3 == 0x3f9 and fm3 == 0xdef7f0b1f98a0 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd5cef5ceb21cc4; op2val:0x3fb5f6687abecb2d;
op3val:0x3f9def7f0b1f98a0; valaddr_reg:x3; val_offset:1458*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1458*FLEN/8, x4, x1, x2)

inst_487:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x5cef5ceb21cc4 and fs2 == 0 and fe2 == 0x3fb and fm2 == 0x5f6687abecb2d and fs3 == 0 and fe3 == 0x3f9 and fm3 == 0xdef7f0b1f98a0 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd5cef5ceb21cc4; op2val:0x3fb5f6687abecb2d;
op3val:0x3f9def7f0b1f98a0; valaddr_reg:x3; val_offset:1461*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1461*FLEN/8, x4, x1, x2)

inst_488:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x5cef5ceb21cc4 and fs2 == 0 and fe2 == 0x3fb and fm2 == 0x5f6687abecb2d and fs3 == 0 and fe3 == 0x3f9 and fm3 == 0xdef7f0b1f98a0 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd5cef5ceb21cc4; op2val:0x3fb5f6687abecb2d;
op3val:0x3f9def7f0b1f98a0; valaddr_reg:x3; val_offset:1464*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1464*FLEN/8, x4, x1, x2)

inst_489:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x5cef5ceb21cc4 and fs2 == 0 and fe2 == 0x3fb and fm2 == 0x5f6687abecb2d and fs3 == 0 and fe3 == 0x3f9 and fm3 == 0xdef7f0b1f98a0 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd5cef5ceb21cc4; op2val:0x3fb5f6687abecb2d;
op3val:0x3f9def7f0b1f98a0; valaddr_reg:x3; val_offset:1467*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1467*FLEN/8, x4, x1, x2)

inst_490:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x604848221dffe and fs2 == 0 and fe2 == 0x400 and fm2 == 0x53730b4699b7b and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xd31e0781d7728 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd604848221dffe; op2val:0x40053730b4699b7b;
op3val:0x3fed31e0781d7728; valaddr_reg:x3; val_offset:1470*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1470*FLEN/8, x4, x1, x2)

inst_491:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x604848221dffe and fs2 == 0 and fe2 == 0x400 and fm2 == 0x53730b4699b7b and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xd31e0781d7728 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd604848221dffe; op2val:0x40053730b4699b7b;
op3val:0x3fed31e0781d7728; valaddr_reg:x3; val_offset:1473*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1473*FLEN/8, x4, x1, x2)

inst_492:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x604848221dffe and fs2 == 0 and fe2 == 0x400 and fm2 == 0x53730b4699b7b and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xd31e0781d7728 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd604848221dffe; op2val:0x40053730b4699b7b;
op3val:0x3fed31e0781d7728; valaddr_reg:x3; val_offset:1476*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1476*FLEN/8, x4, x1, x2)

inst_493:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x604848221dffe and fs2 == 0 and fe2 == 0x400 and fm2 == 0x53730b4699b7b and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xd31e0781d7728 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd604848221dffe; op2val:0x40053730b4699b7b;
op3val:0x3fed31e0781d7728; valaddr_reg:x3; val_offset:1479*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1479*FLEN/8, x4, x1, x2)

inst_494:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x604848221dffe and fs2 == 0 and fe2 == 0x400 and fm2 == 0x53730b4699b7b and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xd31e0781d7728 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd604848221dffe; op2val:0x40053730b4699b7b;
op3val:0x3fed31e0781d7728; valaddr_reg:x3; val_offset:1482*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1482*FLEN/8, x4, x1, x2)

inst_495:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x6569842555b14 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x05771b83164cc and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x6d0ade2fa2c95 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd6569842555b14; op2val:0x40005771b83164cc;
op3val:0x3fe6d0ade2fa2c95; valaddr_reg:x3; val_offset:1485*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1485*FLEN/8, x4, x1, x2)

inst_496:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x6569842555b14 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x05771b83164cc and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x6d0ade2fa2c95 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd6569842555b14; op2val:0x40005771b83164cc;
op3val:0x3fe6d0ade2fa2c95; valaddr_reg:x3; val_offset:1488*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1488*FLEN/8, x4, x1, x2)

inst_497:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x6569842555b14 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x05771b83164cc and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x6d0ade2fa2c95 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd6569842555b14; op2val:0x40005771b83164cc;
op3val:0x3fe6d0ade2fa2c95; valaddr_reg:x3; val_offset:1491*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1491*FLEN/8, x4, x1, x2)

inst_498:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x6569842555b14 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x05771b83164cc and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x6d0ade2fa2c95 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd6569842555b14; op2val:0x40005771b83164cc;
op3val:0x3fe6d0ade2fa2c95; valaddr_reg:x3; val_offset:1494*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1494*FLEN/8, x4, x1, x2)

inst_499:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x6569842555b14 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x05771b83164cc and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x6d0ade2fa2c95 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd6569842555b14; op2val:0x40005771b83164cc;
op3val:0x3fe6d0ade2fa2c95; valaddr_reg:x3; val_offset:1497*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1497*FLEN/8, x4, x1, x2)

inst_500:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x66f87c2b09628 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x275a2083544cb and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x9e26b80875d3c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd66f87c2b09628; op2val:0x3fe275a2083544cb;
op3val:0x3fc9e26b80875d3c; valaddr_reg:x3; val_offset:1500*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1500*FLEN/8, x4, x1, x2)

inst_501:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x66f87c2b09628 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x275a2083544cb and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x9e26b80875d3c and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd66f87c2b09628; op2val:0x3fe275a2083544cb;
op3val:0x3fc9e26b80875d3c; valaddr_reg:x3; val_offset:1503*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1503*FLEN/8, x4, x1, x2)

inst_502:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x66f87c2b09628 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x275a2083544cb and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x9e26b80875d3c and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd66f87c2b09628; op2val:0x3fe275a2083544cb;
op3val:0x3fc9e26b80875d3c; valaddr_reg:x3; val_offset:1506*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1506*FLEN/8, x4, x1, x2)

inst_503:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x66f87c2b09628 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x275a2083544cb and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x9e26b80875d3c and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd66f87c2b09628; op2val:0x3fe275a2083544cb;
op3val:0x3fc9e26b80875d3c; valaddr_reg:x3; val_offset:1509*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1509*FLEN/8, x4, x1, x2)

inst_504:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x66f87c2b09628 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x275a2083544cb and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x9e26b80875d3c and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd66f87c2b09628; op2val:0x3fe275a2083544cb;
op3val:0x3fc9e26b80875d3c; valaddr_reg:x3; val_offset:1512*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1512*FLEN/8, x4, x1, x2)

inst_505:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x6bf55e03d5f94 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xb32a3bdb7d700 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x3556fd0dc5900 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd6bf55e03d5f94; op2val:0x3feb32a3bdb7d700;
op3val:0x3fd3556fd0dc5900; valaddr_reg:x3; val_offset:1515*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1515*FLEN/8, x4, x1, x2)

inst_506:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x6bf55e03d5f94 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xb32a3bdb7d700 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x3556fd0dc5900 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd6bf55e03d5f94; op2val:0x3feb32a3bdb7d700;
op3val:0x3fd3556fd0dc5900; valaddr_reg:x3; val_offset:1518*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1518*FLEN/8, x4, x1, x2)

inst_507:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x6bf55e03d5f94 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xb32a3bdb7d700 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x3556fd0dc5900 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd6bf55e03d5f94; op2val:0x3feb32a3bdb7d700;
op3val:0x3fd3556fd0dc5900; valaddr_reg:x3; val_offset:1521*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1521*FLEN/8, x4, x1, x2)

inst_508:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x6bf55e03d5f94 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xb32a3bdb7d700 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x3556fd0dc5900 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd6bf55e03d5f94; op2val:0x3feb32a3bdb7d700;
op3val:0x3fd3556fd0dc5900; valaddr_reg:x3; val_offset:1524*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1524*FLEN/8, x4, x1, x2)

inst_509:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x6bf55e03d5f94 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xb32a3bdb7d700 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x3556fd0dc5900 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd6bf55e03d5f94; op2val:0x3feb32a3bdb7d700;
op3val:0x3fd3556fd0dc5900; valaddr_reg:x3; val_offset:1527*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1527*FLEN/8, x4, x1, x2)

inst_510:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x6c8cd4bf85f98 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xd4f0a5b7cc5f8 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x4de412790aa6c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd6c8cd4bf85f98; op2val:0x3fdd4f0a5b7cc5f8;
op3val:0x3fc4de412790aa6c; valaddr_reg:x3; val_offset:1530*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1530*FLEN/8, x4, x1, x2)

inst_511:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x6c8cd4bf85f98 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xd4f0a5b7cc5f8 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x4de412790aa6c and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd6c8cd4bf85f98; op2val:0x3fdd4f0a5b7cc5f8;
op3val:0x3fc4de412790aa6c; valaddr_reg:x3; val_offset:1533*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1533*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_5)

inst_512:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x6c8cd4bf85f98 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xd4f0a5b7cc5f8 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x4de412790aa6c and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd6c8cd4bf85f98; op2val:0x3fdd4f0a5b7cc5f8;
op3val:0x3fc4de412790aa6c; valaddr_reg:x3; val_offset:1536*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1536*FLEN/8, x4, x1, x2)

inst_513:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x6c8cd4bf85f98 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xd4f0a5b7cc5f8 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x4de412790aa6c and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd6c8cd4bf85f98; op2val:0x3fdd4f0a5b7cc5f8;
op3val:0x3fc4de412790aa6c; valaddr_reg:x3; val_offset:1539*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1539*FLEN/8, x4, x1, x2)

inst_514:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x6c8cd4bf85f98 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xd4f0a5b7cc5f8 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x4de412790aa6c and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd6c8cd4bf85f98; op2val:0x3fdd4f0a5b7cc5f8;
op3val:0x3fc4de412790aa6c; valaddr_reg:x3; val_offset:1542*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1542*FLEN/8, x4, x1, x2)

inst_515:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x6f8428ac99be4 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x848273750ba06 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x16dfca415383c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd6f8428ac99be4; op2val:0x3fd848273750ba06;
op3val:0x3fc16dfca415383c; valaddr_reg:x3; val_offset:1545*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1545*FLEN/8, x4, x1, x2)

inst_516:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x6f8428ac99be4 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x848273750ba06 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x16dfca415383c and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd6f8428ac99be4; op2val:0x3fd848273750ba06;
op3val:0x3fc16dfca415383c; valaddr_reg:x3; val_offset:1548*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1548*FLEN/8, x4, x1, x2)

inst_517:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x6f8428ac99be4 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x848273750ba06 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x16dfca415383c and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd6f8428ac99be4; op2val:0x3fd848273750ba06;
op3val:0x3fc16dfca415383c; valaddr_reg:x3; val_offset:1551*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1551*FLEN/8, x4, x1, x2)

inst_518:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x6f8428ac99be4 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x848273750ba06 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x16dfca415383c and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd6f8428ac99be4; op2val:0x3fd848273750ba06;
op3val:0x3fc16dfca415383c; valaddr_reg:x3; val_offset:1554*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1554*FLEN/8, x4, x1, x2)

inst_519:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x6f8428ac99be4 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x848273750ba06 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x16dfca415383c and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd6f8428ac99be4; op2val:0x3fd848273750ba06;
op3val:0x3fc16dfca415383c; valaddr_reg:x3; val_offset:1557*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1557*FLEN/8, x4, x1, x2)

inst_520:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x721a03617a6ba and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x49017f0d68fa3 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xdba598209479a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd721a03617a6ba; op2val:0x3ff49017f0d68fa3;
op3val:0x3fddba598209479a; valaddr_reg:x3; val_offset:1560*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1560*FLEN/8, x4, x1, x2)

inst_521:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x721a03617a6ba and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x49017f0d68fa3 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xdba598209479a and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd721a03617a6ba; op2val:0x3ff49017f0d68fa3;
op3val:0x3fddba598209479a; valaddr_reg:x3; val_offset:1563*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1563*FLEN/8, x4, x1, x2)

inst_522:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x721a03617a6ba and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x49017f0d68fa3 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xdba598209479a and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd721a03617a6ba; op2val:0x3ff49017f0d68fa3;
op3val:0x3fddba598209479a; valaddr_reg:x3; val_offset:1566*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1566*FLEN/8, x4, x1, x2)

inst_523:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x721a03617a6ba and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x49017f0d68fa3 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xdba598209479a and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd721a03617a6ba; op2val:0x3ff49017f0d68fa3;
op3val:0x3fddba598209479a; valaddr_reg:x3; val_offset:1569*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1569*FLEN/8, x4, x1, x2)

inst_524:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x721a03617a6ba and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x49017f0d68fa3 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xdba598209479a and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd721a03617a6ba; op2val:0x3ff49017f0d68fa3;
op3val:0x3fddba598209479a; valaddr_reg:x3; val_offset:1572*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1572*FLEN/8, x4, x1, x2)

inst_525:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x75d7d51a0f358 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xf108304505770 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x6ae9fcf9c1b9d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd75d7d51a0f358; op2val:0x3fff108304505770;
op3val:0x3fe6ae9fcf9c1b9d; valaddr_reg:x3; val_offset:1575*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1575*FLEN/8, x4, x1, x2)

inst_526:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x75d7d51a0f358 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xf108304505770 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x6ae9fcf9c1b9d and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd75d7d51a0f358; op2val:0x3fff108304505770;
op3val:0x3fe6ae9fcf9c1b9d; valaddr_reg:x3; val_offset:1578*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1578*FLEN/8, x4, x1, x2)

inst_527:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x75d7d51a0f358 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xf108304505770 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x6ae9fcf9c1b9d and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd75d7d51a0f358; op2val:0x3fff108304505770;
op3val:0x3fe6ae9fcf9c1b9d; valaddr_reg:x3; val_offset:1581*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1581*FLEN/8, x4, x1, x2)

inst_528:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x75d7d51a0f358 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xf108304505770 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x6ae9fcf9c1b9d and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd75d7d51a0f358; op2val:0x3fff108304505770;
op3val:0x3fe6ae9fcf9c1b9d; valaddr_reg:x3; val_offset:1584*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1584*FLEN/8, x4, x1, x2)

inst_529:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x75d7d51a0f358 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xf108304505770 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x6ae9fcf9c1b9d and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd75d7d51a0f358; op2val:0x3fff108304505770;
op3val:0x3fe6ae9fcf9c1b9d; valaddr_reg:x3; val_offset:1587*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1587*FLEN/8, x4, x1, x2)

inst_530:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x7bb3ae7c0d3b6 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x9c581f9a066ad and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x31cbf0b96ad66 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd7bb3ae7c0d3b6; op2val:0x3fe9c581f9a066ad;
op3val:0x3fd31cbf0b96ad66; valaddr_reg:x3; val_offset:1590*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1590*FLEN/8, x4, x1, x2)

inst_531:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x7bb3ae7c0d3b6 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x9c581f9a066ad and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x31cbf0b96ad66 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd7bb3ae7c0d3b6; op2val:0x3fe9c581f9a066ad;
op3val:0x3fd31cbf0b96ad66; valaddr_reg:x3; val_offset:1593*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1593*FLEN/8, x4, x1, x2)

inst_532:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x7bb3ae7c0d3b6 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x9c581f9a066ad and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x31cbf0b96ad66 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd7bb3ae7c0d3b6; op2val:0x3fe9c581f9a066ad;
op3val:0x3fd31cbf0b96ad66; valaddr_reg:x3; val_offset:1596*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1596*FLEN/8, x4, x1, x2)

inst_533:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x7bb3ae7c0d3b6 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x9c581f9a066ad and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x31cbf0b96ad66 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd7bb3ae7c0d3b6; op2val:0x3fe9c581f9a066ad;
op3val:0x3fd31cbf0b96ad66; valaddr_reg:x3; val_offset:1599*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1599*FLEN/8, x4, x1, x2)

inst_534:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x7bb3ae7c0d3b6 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x9c581f9a066ad and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x31cbf0b96ad66 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd7bb3ae7c0d3b6; op2val:0x3fe9c581f9a066ad;
op3val:0x3fd31cbf0b96ad66; valaddr_reg:x3; val_offset:1602*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1602*FLEN/8, x4, x1, x2)

inst_535:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x7c065aefef96a and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x83aa4db4551a4 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x1fbd35855b568 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd7c065aefef96a; op2val:0x3fd83aa4db4551a4;
op3val:0x3fc1fbd35855b568; valaddr_reg:x3; val_offset:1605*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1605*FLEN/8, x4, x1, x2)

inst_536:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x7c065aefef96a and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x83aa4db4551a4 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x1fbd35855b568 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd7c065aefef96a; op2val:0x3fd83aa4db4551a4;
op3val:0x3fc1fbd35855b568; valaddr_reg:x3; val_offset:1608*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1608*FLEN/8, x4, x1, x2)

inst_537:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x7c065aefef96a and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x83aa4db4551a4 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x1fbd35855b568 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd7c065aefef96a; op2val:0x3fd83aa4db4551a4;
op3val:0x3fc1fbd35855b568; valaddr_reg:x3; val_offset:1611*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1611*FLEN/8, x4, x1, x2)

inst_538:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x7c065aefef96a and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x83aa4db4551a4 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x1fbd35855b568 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd7c065aefef96a; op2val:0x3fd83aa4db4551a4;
op3val:0x3fc1fbd35855b568; valaddr_reg:x3; val_offset:1614*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1614*FLEN/8, x4, x1, x2)

inst_539:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x7c065aefef96a and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x83aa4db4551a4 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x1fbd35855b568 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd7c065aefef96a; op2val:0x3fd83aa4db4551a4;
op3val:0x3fc1fbd35855b568; valaddr_reg:x3; val_offset:1617*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1617*FLEN/8, x4, x1, x2)

inst_540:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x7ceba02a79cc4 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x369ae0b861013 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xce2bc8124ee1f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd7ceba02a79cc4; op2val:0x400369ae0b861013;
op3val:0x3fece2bc8124ee1f; valaddr_reg:x3; val_offset:1620*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1620*FLEN/8, x4, x1, x2)

inst_541:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x7ceba02a79cc4 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x369ae0b861013 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xce2bc8124ee1f and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd7ceba02a79cc4; op2val:0x400369ae0b861013;
op3val:0x3fece2bc8124ee1f; valaddr_reg:x3; val_offset:1623*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1623*FLEN/8, x4, x1, x2)

inst_542:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x7ceba02a79cc4 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x369ae0b861013 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xce2bc8124ee1f and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd7ceba02a79cc4; op2val:0x400369ae0b861013;
op3val:0x3fece2bc8124ee1f; valaddr_reg:x3; val_offset:1626*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1626*FLEN/8, x4, x1, x2)

inst_543:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x7ceba02a79cc4 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x369ae0b861013 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xce2bc8124ee1f and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd7ceba02a79cc4; op2val:0x400369ae0b861013;
op3val:0x3fece2bc8124ee1f; valaddr_reg:x3; val_offset:1629*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1629*FLEN/8, x4, x1, x2)

inst_544:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x7ceba02a79cc4 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x369ae0b861013 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xce2bc8124ee1f and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd7ceba02a79cc4; op2val:0x400369ae0b861013;
op3val:0x3fece2bc8124ee1f; valaddr_reg:x3; val_offset:1632*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1632*FLEN/8, x4, x1, x2)

inst_545:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x828ef8b098dee and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x3a572b24d172f and fs3 == 0 and fe3 == 0x3fc and fm3 == 0xdaa6fcc4bbaa4 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd828ef8b098dee; op2val:0x3fe3a572b24d172f;
op3val:0x3fcdaa6fcc4bbaa4; valaddr_reg:x3; val_offset:1635*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1635*FLEN/8, x4, x1, x2)

inst_546:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x828ef8b098dee and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x3a572b24d172f and fs3 == 0 and fe3 == 0x3fc and fm3 == 0xdaa6fcc4bbaa4 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd828ef8b098dee; op2val:0x3fe3a572b24d172f;
op3val:0x3fcdaa6fcc4bbaa4; valaddr_reg:x3; val_offset:1638*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1638*FLEN/8, x4, x1, x2)

inst_547:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x828ef8b098dee and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x3a572b24d172f and fs3 == 0 and fe3 == 0x3fc and fm3 == 0xdaa6fcc4bbaa4 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd828ef8b098dee; op2val:0x3fe3a572b24d172f;
op3val:0x3fcdaa6fcc4bbaa4; valaddr_reg:x3; val_offset:1641*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1641*FLEN/8, x4, x1, x2)

inst_548:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x828ef8b098dee and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x3a572b24d172f and fs3 == 0 and fe3 == 0x3fc and fm3 == 0xdaa6fcc4bbaa4 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd828ef8b098dee; op2val:0x3fe3a572b24d172f;
op3val:0x3fcdaa6fcc4bbaa4; valaddr_reg:x3; val_offset:1644*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1644*FLEN/8, x4, x1, x2)

inst_549:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x828ef8b098dee and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x3a572b24d172f and fs3 == 0 and fe3 == 0x3fc and fm3 == 0xdaa6fcc4bbaa4 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd828ef8b098dee; op2val:0x3fe3a572b24d172f;
op3val:0x3fcdaa6fcc4bbaa4; valaddr_reg:x3; val_offset:1647*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1647*FLEN/8, x4, x1, x2)

inst_550:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x83082d83b1d44 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x518bc07d0e43f and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xfe510c5e464c2 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd83082d83b1d44; op2val:0x400518bc07d0e43f;
op3val:0x3fefe510c5e464c2; valaddr_reg:x3; val_offset:1650*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1650*FLEN/8, x4, x1, x2)

inst_551:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x83082d83b1d44 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x518bc07d0e43f and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xfe510c5e464c2 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd83082d83b1d44; op2val:0x400518bc07d0e43f;
op3val:0x3fefe510c5e464c2; valaddr_reg:x3; val_offset:1653*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1653*FLEN/8, x4, x1, x2)

inst_552:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x83082d83b1d44 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x518bc07d0e43f and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xfe510c5e464c2 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd83082d83b1d44; op2val:0x400518bc07d0e43f;
op3val:0x3fefe510c5e464c2; valaddr_reg:x3; val_offset:1656*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1656*FLEN/8, x4, x1, x2)

inst_553:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x83082d83b1d44 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x518bc07d0e43f and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xfe510c5e464c2 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd83082d83b1d44; op2val:0x400518bc07d0e43f;
op3val:0x3fefe510c5e464c2; valaddr_reg:x3; val_offset:1659*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1659*FLEN/8, x4, x1, x2)

inst_554:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x83082d83b1d44 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x518bc07d0e43f and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xfe510c5e464c2 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd83082d83b1d44; op2val:0x400518bc07d0e43f;
op3val:0x3fefe510c5e464c2; valaddr_reg:x3; val_offset:1662*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1662*FLEN/8, x4, x1, x2)

inst_555:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x84d92f30d11d4 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xd3c78c29d4ada and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x6343a5680606e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd84d92f30d11d4; op2val:0x3ffd3c78c29d4ada;
op3val:0x3fe6343a5680606e; valaddr_reg:x3; val_offset:1665*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1665*FLEN/8, x4, x1, x2)

inst_556:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x84d92f30d11d4 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xd3c78c29d4ada and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x6343a5680606e and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd84d92f30d11d4; op2val:0x3ffd3c78c29d4ada;
op3val:0x3fe6343a5680606e; valaddr_reg:x3; val_offset:1668*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1668*FLEN/8, x4, x1, x2)

inst_557:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x84d92f30d11d4 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xd3c78c29d4ada and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x6343a5680606e and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd84d92f30d11d4; op2val:0x3ffd3c78c29d4ada;
op3val:0x3fe6343a5680606e; valaddr_reg:x3; val_offset:1671*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1671*FLEN/8, x4, x1, x2)

inst_558:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x84d92f30d11d4 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xd3c78c29d4ada and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x6343a5680606e and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd84d92f30d11d4; op2val:0x3ffd3c78c29d4ada;
op3val:0x3fe6343a5680606e; valaddr_reg:x3; val_offset:1674*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1674*FLEN/8, x4, x1, x2)

inst_559:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x84d92f30d11d4 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xd3c78c29d4ada and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x6343a5680606e and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd84d92f30d11d4; op2val:0x3ffd3c78c29d4ada;
op3val:0x3fe6343a5680606e; valaddr_reg:x3; val_offset:1677*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1677*FLEN/8, x4, x1, x2)

inst_560:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x862db765ea056 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x06b92ef147ff9 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x906d0847cbe1c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd862db765ea056; op2val:0x3ff06b92ef147ff9;
op3val:0x3fd906d0847cbe1c; valaddr_reg:x3; val_offset:1680*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1680*FLEN/8, x4, x1, x2)

inst_561:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x862db765ea056 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x06b92ef147ff9 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x906d0847cbe1c and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd862db765ea056; op2val:0x3ff06b92ef147ff9;
op3val:0x3fd906d0847cbe1c; valaddr_reg:x3; val_offset:1683*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1683*FLEN/8, x4, x1, x2)

inst_562:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x862db765ea056 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x06b92ef147ff9 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x906d0847cbe1c and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd862db765ea056; op2val:0x3ff06b92ef147ff9;
op3val:0x3fd906d0847cbe1c; valaddr_reg:x3; val_offset:1686*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1686*FLEN/8, x4, x1, x2)

inst_563:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x862db765ea056 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x06b92ef147ff9 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x906d0847cbe1c and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd862db765ea056; op2val:0x3ff06b92ef147ff9;
op3val:0x3fd906d0847cbe1c; valaddr_reg:x3; val_offset:1689*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1689*FLEN/8, x4, x1, x2)

inst_564:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x862db765ea056 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x06b92ef147ff9 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x906d0847cbe1c and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd862db765ea056; op2val:0x3ff06b92ef147ff9;
op3val:0x3fd906d0847cbe1c; valaddr_reg:x3; val_offset:1692*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1692*FLEN/8, x4, x1, x2)

inst_565:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x8a9a2445e183a and fs2 == 0 and fe2 == 0x400 and fm2 == 0x0c177cdef7182 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x9d3d924cc27a5 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd8a9a2445e183a; op2val:0x4000c177cdef7182;
op3val:0x3fe9d3d924cc27a5; valaddr_reg:x3; val_offset:1695*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1695*FLEN/8, x4, x1, x2)

inst_566:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x8a9a2445e183a and fs2 == 0 and fe2 == 0x400 and fm2 == 0x0c177cdef7182 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x9d3d924cc27a5 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd8a9a2445e183a; op2val:0x4000c177cdef7182;
op3val:0x3fe9d3d924cc27a5; valaddr_reg:x3; val_offset:1698*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1698*FLEN/8, x4, x1, x2)

inst_567:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x8a9a2445e183a and fs2 == 0 and fe2 == 0x400 and fm2 == 0x0c177cdef7182 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x9d3d924cc27a5 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd8a9a2445e183a; op2val:0x4000c177cdef7182;
op3val:0x3fe9d3d924cc27a5; valaddr_reg:x3; val_offset:1701*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1701*FLEN/8, x4, x1, x2)

inst_568:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x8a9a2445e183a and fs2 == 0 and fe2 == 0x400 and fm2 == 0x0c177cdef7182 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x9d3d924cc27a5 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd8a9a2445e183a; op2val:0x4000c177cdef7182;
op3val:0x3fe9d3d924cc27a5; valaddr_reg:x3; val_offset:1704*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1704*FLEN/8, x4, x1, x2)

inst_569:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x8a9a2445e183a and fs2 == 0 and fe2 == 0x400 and fm2 == 0x0c177cdef7182 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x9d3d924cc27a5 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd8a9a2445e183a; op2val:0x4000c177cdef7182;
op3val:0x3fe9d3d924cc27a5; valaddr_reg:x3; val_offset:1707*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1707*FLEN/8, x4, x1, x2)

inst_570:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x8bd85dfe1a426 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x7eb337019232c and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x27e0fccc66faa and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd8bd85dfe1a426; op2val:0x3ff7eb337019232c;
op3val:0x3fe27e0fccc66faa; valaddr_reg:x3; val_offset:1710*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1710*FLEN/8, x4, x1, x2)

inst_571:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x8bd85dfe1a426 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x7eb337019232c and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x27e0fccc66faa and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd8bd85dfe1a426; op2val:0x3ff7eb337019232c;
op3val:0x3fe27e0fccc66faa; valaddr_reg:x3; val_offset:1713*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1713*FLEN/8, x4, x1, x2)

inst_572:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x8bd85dfe1a426 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x7eb337019232c and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x27e0fccc66faa and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd8bd85dfe1a426; op2val:0x3ff7eb337019232c;
op3val:0x3fe27e0fccc66faa; valaddr_reg:x3; val_offset:1716*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1716*FLEN/8, x4, x1, x2)

inst_573:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x8bd85dfe1a426 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x7eb337019232c and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x27e0fccc66faa and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd8bd85dfe1a426; op2val:0x3ff7eb337019232c;
op3val:0x3fe27e0fccc66faa; valaddr_reg:x3; val_offset:1719*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1719*FLEN/8, x4, x1, x2)

inst_574:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x8bd85dfe1a426 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x7eb337019232c and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x27e0fccc66faa and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd8bd85dfe1a426; op2val:0x3ff7eb337019232c;
op3val:0x3fe27e0fccc66faa; valaddr_reg:x3; val_offset:1722*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1722*FLEN/8, x4, x1, x2)

inst_575:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x92dca657411b0 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x16695cd79e454 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xb6216b3d96a54 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd92dca657411b0; op2val:0x40016695cd79e454;
op3val:0x3feb6216b3d96a54; valaddr_reg:x3; val_offset:1725*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1725*FLEN/8, x4, x1, x2)

inst_576:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x92dca657411b0 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x16695cd79e454 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xb6216b3d96a54 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd92dca657411b0; op2val:0x40016695cd79e454;
op3val:0x3feb6216b3d96a54; valaddr_reg:x3; val_offset:1728*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1728*FLEN/8, x4, x1, x2)

inst_577:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x92dca657411b0 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x16695cd79e454 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xb6216b3d96a54 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd92dca657411b0; op2val:0x40016695cd79e454;
op3val:0x3feb6216b3d96a54; valaddr_reg:x3; val_offset:1731*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1731*FLEN/8, x4, x1, x2)

inst_578:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x92dca657411b0 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x16695cd79e454 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xb6216b3d96a54 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd92dca657411b0; op2val:0x40016695cd79e454;
op3val:0x3feb6216b3d96a54; valaddr_reg:x3; val_offset:1734*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1734*FLEN/8, x4, x1, x2)

inst_579:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x92dca657411b0 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x16695cd79e454 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xb6216b3d96a54 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd92dca657411b0; op2val:0x40016695cd79e454;
op3val:0x3feb6216b3d96a54; valaddr_reg:x3; val_offset:1737*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1737*FLEN/8, x4, x1, x2)

inst_580:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x967eee5dfa224 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xb67353a66f617 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x5c1a25d6a6506 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd967eee5dfa224; op2val:0x3ffb67353a66f617;
op3val:0x3fe5c1a25d6a6506; valaddr_reg:x3; val_offset:1740*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1740*FLEN/8, x4, x1, x2)

inst_581:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x967eee5dfa224 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xb67353a66f617 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x5c1a25d6a6506 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd967eee5dfa224; op2val:0x3ffb67353a66f617;
op3val:0x3fe5c1a25d6a6506; valaddr_reg:x3; val_offset:1743*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1743*FLEN/8, x4, x1, x2)

inst_582:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x967eee5dfa224 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xb67353a66f617 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x5c1a25d6a6506 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd967eee5dfa224; op2val:0x3ffb67353a66f617;
op3val:0x3fe5c1a25d6a6506; valaddr_reg:x3; val_offset:1746*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1746*FLEN/8, x4, x1, x2)

inst_583:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x967eee5dfa224 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xb67353a66f617 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x5c1a25d6a6506 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd967eee5dfa224; op2val:0x3ffb67353a66f617;
op3val:0x3fe5c1a25d6a6506; valaddr_reg:x3; val_offset:1749*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1749*FLEN/8, x4, x1, x2)

inst_584:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x967eee5dfa224 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xb67353a66f617 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x5c1a25d6a6506 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd967eee5dfa224; op2val:0x3ffb67353a66f617;
op3val:0x3fe5c1a25d6a6506; valaddr_reg:x3; val_offset:1752*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1752*FLEN/8, x4, x1, x2)

inst_585:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x97cf9248fff6c and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xbf2f8c2a523a9 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x642f976920b14 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd97cf9248fff6c; op2val:0x3ffbf2f8c2a523a9;
op3val:0x3fe642f976920b14; valaddr_reg:x3; val_offset:1755*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1755*FLEN/8, x4, x1, x2)

inst_586:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x97cf9248fff6c and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xbf2f8c2a523a9 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x642f976920b14 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd97cf9248fff6c; op2val:0x3ffbf2f8c2a523a9;
op3val:0x3fe642f976920b14; valaddr_reg:x3; val_offset:1758*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1758*FLEN/8, x4, x1, x2)

inst_587:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x97cf9248fff6c and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xbf2f8c2a523a9 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x642f976920b14 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd97cf9248fff6c; op2val:0x3ffbf2f8c2a523a9;
op3val:0x3fe642f976920b14; valaddr_reg:x3; val_offset:1761*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1761*FLEN/8, x4, x1, x2)

inst_588:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x97cf9248fff6c and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xbf2f8c2a523a9 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x642f976920b14 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd97cf9248fff6c; op2val:0x3ffbf2f8c2a523a9;
op3val:0x3fe642f976920b14; valaddr_reg:x3; val_offset:1764*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1764*FLEN/8, x4, x1, x2)

inst_589:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x97cf9248fff6c and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xbf2f8c2a523a9 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x642f976920b14 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fd97cf9248fff6c; op2val:0x3ffbf2f8c2a523a9;
op3val:0x3fe642f976920b14; valaddr_reg:x3; val_offset:1767*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1767*FLEN/8, x4, x1, x2)

inst_590:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xa114284dadecc and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x4acb87d814d07 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x0d77ca20e1fc2 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fda114284dadecc; op2val:0x3ff4acb87d814d07;
op3val:0x3fe0d77ca20e1fc2; valaddr_reg:x3; val_offset:1770*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1770*FLEN/8, x4, x1, x2)

inst_591:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xa114284dadecc and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x4acb87d814d07 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x0d77ca20e1fc2 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fda114284dadecc; op2val:0x3ff4acb87d814d07;
op3val:0x3fe0d77ca20e1fc2; valaddr_reg:x3; val_offset:1773*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1773*FLEN/8, x4, x1, x2)

inst_592:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xa114284dadecc and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x4acb87d814d07 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x0d77ca20e1fc2 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fda114284dadecc; op2val:0x3ff4acb87d814d07;
op3val:0x3fe0d77ca20e1fc2; valaddr_reg:x3; val_offset:1776*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1776*FLEN/8, x4, x1, x2)

inst_593:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xa114284dadecc and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x4acb87d814d07 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x0d77ca20e1fc2 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fda114284dadecc; op2val:0x3ff4acb87d814d07;
op3val:0x3fe0d77ca20e1fc2; valaddr_reg:x3; val_offset:1779*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1779*FLEN/8, x4, x1, x2)

inst_594:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xa114284dadecc and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x4acb87d814d07 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x0d77ca20e1fc2 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fda114284dadecc; op2val:0x3ff4acb87d814d07;
op3val:0x3fe0d77ca20e1fc2; valaddr_reg:x3; val_offset:1782*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1782*FLEN/8, x4, x1, x2)

inst_595:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xa174a114b9ec4 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xfb40ce08049fb and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x9d95d4129f19a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fda174a114b9ec4; op2val:0x3fefb40ce08049fb;
op3val:0x3fd9d95d4129f19a; valaddr_reg:x3; val_offset:1785*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1785*FLEN/8, x4, x1, x2)

inst_596:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xa174a114b9ec4 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xfb40ce08049fb and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x9d95d4129f19a and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fda174a114b9ec4; op2val:0x3fefb40ce08049fb;
op3val:0x3fd9d95d4129f19a; valaddr_reg:x3; val_offset:1788*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1788*FLEN/8, x4, x1, x2)

inst_597:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xa174a114b9ec4 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xfb40ce08049fb and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x9d95d4129f19a and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fda174a114b9ec4; op2val:0x3fefb40ce08049fb;
op3val:0x3fd9d95d4129f19a; valaddr_reg:x3; val_offset:1791*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1791*FLEN/8, x4, x1, x2)

inst_598:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xa174a114b9ec4 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xfb40ce08049fb and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x9d95d4129f19a and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fda174a114b9ec4; op2val:0x3fefb40ce08049fb;
op3val:0x3fd9d95d4129f19a; valaddr_reg:x3; val_offset:1794*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1794*FLEN/8, x4, x1, x2)

inst_599:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xa174a114b9ec4 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xfb40ce08049fb and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x9d95d4129f19a and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fda174a114b9ec4; op2val:0x3fefb40ce08049fb;
op3val:0x3fd9d95d4129f19a; valaddr_reg:x3; val_offset:1797*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1797*FLEN/8, x4, x1, x2)

inst_600:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xa193647e5242a and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xd3ba8ac046c11 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x7d7813de44fc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fda193647e5242a; op2val:0x3ffd3ba8ac046c11;
op3val:0x3fe7d7813de44fc0; valaddr_reg:x3; val_offset:1800*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1800*FLEN/8, x4, x1, x2)

inst_601:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xa193647e5242a and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xd3ba8ac046c11 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x7d7813de44fc0 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fda193647e5242a; op2val:0x3ffd3ba8ac046c11;
op3val:0x3fe7d7813de44fc0; valaddr_reg:x3; val_offset:1803*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1803*FLEN/8, x4, x1, x2)

inst_602:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xa193647e5242a and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xd3ba8ac046c11 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x7d7813de44fc0 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fda193647e5242a; op2val:0x3ffd3ba8ac046c11;
op3val:0x3fe7d7813de44fc0; valaddr_reg:x3; val_offset:1806*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1806*FLEN/8, x4, x1, x2)

inst_603:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xa193647e5242a and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xd3ba8ac046c11 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x7d7813de44fc0 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fda193647e5242a; op2val:0x3ffd3ba8ac046c11;
op3val:0x3fe7d7813de44fc0; valaddr_reg:x3; val_offset:1809*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1809*FLEN/8, x4, x1, x2)

inst_604:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xa193647e5242a and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xd3ba8ac046c11 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x7d7813de44fc0 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fda193647e5242a; op2val:0x3ffd3ba8ac046c11;
op3val:0x3fe7d7813de44fc0; valaddr_reg:x3; val_offset:1812*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1812*FLEN/8, x4, x1, x2)

inst_605:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xa21e33ce1ff66 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x4cf9df696f979 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x0feba3ba1c5b8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fda21e33ce1ff66; op2val:0x3fd4cf9df696f979;
op3val:0x3fc0feba3ba1c5b8; valaddr_reg:x3; val_offset:1815*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1815*FLEN/8, x4, x1, x2)

inst_606:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xa21e33ce1ff66 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x4cf9df696f979 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x0feba3ba1c5b8 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fda21e33ce1ff66; op2val:0x3fd4cf9df696f979;
op3val:0x3fc0feba3ba1c5b8; valaddr_reg:x3; val_offset:1818*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1818*FLEN/8, x4, x1, x2)

inst_607:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xa21e33ce1ff66 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x4cf9df696f979 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x0feba3ba1c5b8 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fda21e33ce1ff66; op2val:0x3fd4cf9df696f979;
op3val:0x3fc0feba3ba1c5b8; valaddr_reg:x3; val_offset:1821*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1821*FLEN/8, x4, x1, x2)

inst_608:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xa21e33ce1ff66 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x4cf9df696f979 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x0feba3ba1c5b8 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fda21e33ce1ff66; op2val:0x3fd4cf9df696f979;
op3val:0x3fc0feba3ba1c5b8; valaddr_reg:x3; val_offset:1824*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1824*FLEN/8, x4, x1, x2)

inst_609:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xa21e33ce1ff66 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x4cf9df696f979 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x0feba3ba1c5b8 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fda21e33ce1ff66; op2val:0x3fd4cf9df696f979;
op3val:0x3fc0feba3ba1c5b8; valaddr_reg:x3; val_offset:1827*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1827*FLEN/8, x4, x1, x2)

inst_610:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xa3166bb120104 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xc69a71909b85b and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x741b4c314414a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fda3166bb120104; op2val:0x3ffc69a71909b85b;
op3val:0x3fe741b4c314414a; valaddr_reg:x3; val_offset:1830*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1830*FLEN/8, x4, x1, x2)

inst_611:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xa3166bb120104 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xc69a71909b85b and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x741b4c314414a and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fda3166bb120104; op2val:0x3ffc69a71909b85b;
op3val:0x3fe741b4c314414a; valaddr_reg:x3; val_offset:1833*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1833*FLEN/8, x4, x1, x2)

inst_612:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xa3166bb120104 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xc69a71909b85b and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x741b4c314414a and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fda3166bb120104; op2val:0x3ffc69a71909b85b;
op3val:0x3fe741b4c314414a; valaddr_reg:x3; val_offset:1836*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1836*FLEN/8, x4, x1, x2)

inst_613:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xa3166bb120104 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xc69a71909b85b and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x741b4c314414a and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fda3166bb120104; op2val:0x3ffc69a71909b85b;
op3val:0x3fe741b4c314414a; valaddr_reg:x3; val_offset:1839*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1839*FLEN/8, x4, x1, x2)

inst_614:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xa3166bb120104 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xc69a71909b85b and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x741b4c314414a and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fda3166bb120104; op2val:0x3ffc69a71909b85b;
op3val:0x3fe741b4c314414a; valaddr_reg:x3; val_offset:1842*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1842*FLEN/8, x4, x1, x2)

inst_615:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xa4b41870b1732 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x1b9ca041b16e5 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xd2147c1ffd6ce and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fda4b41870b1732; op2val:0x4001b9ca041b16e5;
op3val:0x3fed2147c1ffd6ce; valaddr_reg:x3; val_offset:1845*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1845*FLEN/8, x4, x1, x2)

inst_616:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xa4b41870b1732 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x1b9ca041b16e5 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xd2147c1ffd6ce and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fda4b41870b1732; op2val:0x4001b9ca041b16e5;
op3val:0x3fed2147c1ffd6ce; valaddr_reg:x3; val_offset:1848*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1848*FLEN/8, x4, x1, x2)

inst_617:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xa4b41870b1732 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x1b9ca041b16e5 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xd2147c1ffd6ce and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fda4b41870b1732; op2val:0x4001b9ca041b16e5;
op3val:0x3fed2147c1ffd6ce; valaddr_reg:x3; val_offset:1851*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1851*FLEN/8, x4, x1, x2)

inst_618:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xa4b41870b1732 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x1b9ca041b16e5 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xd2147c1ffd6ce and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fda4b41870b1732; op2val:0x4001b9ca041b16e5;
op3val:0x3fed2147c1ffd6ce; valaddr_reg:x3; val_offset:1854*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1854*FLEN/8, x4, x1, x2)

inst_619:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xa4b41870b1732 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x1b9ca041b16e5 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xd2147c1ffd6ce and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fda4b41870b1732; op2val:0x4001b9ca041b16e5;
op3val:0x3fed2147c1ffd6ce; valaddr_reg:x3; val_offset:1857*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1857*FLEN/8, x4, x1, x2)

inst_620:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xb65ee1d07fb8e and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x3e27200f05a28 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x10666ded7d6d4 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdb65ee1d07fb8e; op2val:0x3fe3e27200f05a28;
op3val:0x3fd10666ded7d6d4; valaddr_reg:x3; val_offset:1860*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1860*FLEN/8, x4, x1, x2)

inst_621:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xb65ee1d07fb8e and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x3e27200f05a28 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x10666ded7d6d4 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdb65ee1d07fb8e; op2val:0x3fe3e27200f05a28;
op3val:0x3fd10666ded7d6d4; valaddr_reg:x3; val_offset:1863*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1863*FLEN/8, x4, x1, x2)

inst_622:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xb65ee1d07fb8e and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x3e27200f05a28 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x10666ded7d6d4 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdb65ee1d07fb8e; op2val:0x3fe3e27200f05a28;
op3val:0x3fd10666ded7d6d4; valaddr_reg:x3; val_offset:1866*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1866*FLEN/8, x4, x1, x2)

inst_623:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xb65ee1d07fb8e and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x3e27200f05a28 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x10666ded7d6d4 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdb65ee1d07fb8e; op2val:0x3fe3e27200f05a28;
op3val:0x3fd10666ded7d6d4; valaddr_reg:x3; val_offset:1869*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1869*FLEN/8, x4, x1, x2)

inst_624:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xb65ee1d07fb8e and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x3e27200f05a28 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x10666ded7d6d4 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdb65ee1d07fb8e; op2val:0x3fe3e27200f05a28;
op3val:0x3fd10666ded7d6d4; valaddr_reg:x3; val_offset:1872*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1872*FLEN/8, x4, x1, x2)

inst_625:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xbd2045a7fa026 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x6e2c3fdfbbbc1 and fs3 == 0 and fe3 == 0x3fb and fm3 == 0x3e588a190b7e8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdbd2045a7fa026; op2val:0x3fc6e2c3fdfbbbc1;
op3val:0x3fb3e588a190b7e8; valaddr_reg:x3; val_offset:1875*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1875*FLEN/8, x4, x1, x2)

inst_626:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xbd2045a7fa026 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x6e2c3fdfbbbc1 and fs3 == 0 and fe3 == 0x3fb and fm3 == 0x3e588a190b7e8 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdbd2045a7fa026; op2val:0x3fc6e2c3fdfbbbc1;
op3val:0x3fb3e588a190b7e8; valaddr_reg:x3; val_offset:1878*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1878*FLEN/8, x4, x1, x2)

inst_627:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xbd2045a7fa026 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x6e2c3fdfbbbc1 and fs3 == 0 and fe3 == 0x3fb and fm3 == 0x3e588a190b7e8 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdbd2045a7fa026; op2val:0x3fc6e2c3fdfbbbc1;
op3val:0x3fb3e588a190b7e8; valaddr_reg:x3; val_offset:1881*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1881*FLEN/8, x4, x1, x2)

inst_628:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xbd2045a7fa026 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x6e2c3fdfbbbc1 and fs3 == 0 and fe3 == 0x3fb and fm3 == 0x3e588a190b7e8 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdbd2045a7fa026; op2val:0x3fc6e2c3fdfbbbc1;
op3val:0x3fb3e588a190b7e8; valaddr_reg:x3; val_offset:1884*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1884*FLEN/8, x4, x1, x2)

inst_629:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xbd2045a7fa026 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x6e2c3fdfbbbc1 and fs3 == 0 and fe3 == 0x3fb and fm3 == 0x3e588a190b7e8 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdbd2045a7fa026; op2val:0x3fc6e2c3fdfbbbc1;
op3val:0x3fb3e588a190b7e8; valaddr_reg:x3; val_offset:1887*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1887*FLEN/8, x4, x1, x2)

inst_630:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xbe810b9d74f6a and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x9ddbe487c391e and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x68eadb5cd7728 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdbe810b9d74f6a; op2val:0x3fe9ddbe487c391e;
op3val:0x3fd68eadb5cd7728; valaddr_reg:x3; val_offset:1890*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1890*FLEN/8, x4, x1, x2)

inst_631:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xbe810b9d74f6a and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x9ddbe487c391e and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x68eadb5cd7728 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdbe810b9d74f6a; op2val:0x3fe9ddbe487c391e;
op3val:0x3fd68eadb5cd7728; valaddr_reg:x3; val_offset:1893*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1893*FLEN/8, x4, x1, x2)

inst_632:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xbe810b9d74f6a and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x9ddbe487c391e and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x68eadb5cd7728 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdbe810b9d74f6a; op2val:0x3fe9ddbe487c391e;
op3val:0x3fd68eadb5cd7728; valaddr_reg:x3; val_offset:1896*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1896*FLEN/8, x4, x1, x2)

inst_633:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xbe810b9d74f6a and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x9ddbe487c391e and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x68eadb5cd7728 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdbe810b9d74f6a; op2val:0x3fe9ddbe487c391e;
op3val:0x3fd68eadb5cd7728; valaddr_reg:x3; val_offset:1899*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1899*FLEN/8, x4, x1, x2)

inst_634:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xbe810b9d74f6a and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x9ddbe487c391e and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x68eadb5cd7728 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdbe810b9d74f6a; op2val:0x3fe9ddbe487c391e;
op3val:0x3fd68eadb5cd7728; valaddr_reg:x3; val_offset:1902*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1902*FLEN/8, x4, x1, x2)

inst_635:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xbeee583dc04b2 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xb5b6b10bb56a2 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x7e15e795b08fa and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdbeee583dc04b2; op2val:0x3feb5b6b10bb56a2;
op3val:0x3fd7e15e795b08fa; valaddr_reg:x3; val_offset:1905*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1905*FLEN/8, x4, x1, x2)

inst_636:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xbeee583dc04b2 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xb5b6b10bb56a2 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x7e15e795b08fa and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdbeee583dc04b2; op2val:0x3feb5b6b10bb56a2;
op3val:0x3fd7e15e795b08fa; valaddr_reg:x3; val_offset:1908*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1908*FLEN/8, x4, x1, x2)

inst_637:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xbeee583dc04b2 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xb5b6b10bb56a2 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x7e15e795b08fa and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdbeee583dc04b2; op2val:0x3feb5b6b10bb56a2;
op3val:0x3fd7e15e795b08fa; valaddr_reg:x3; val_offset:1911*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1911*FLEN/8, x4, x1, x2)

inst_638:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xbeee583dc04b2 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xb5b6b10bb56a2 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x7e15e795b08fa and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdbeee583dc04b2; op2val:0x3feb5b6b10bb56a2;
op3val:0x3fd7e15e795b08fa; valaddr_reg:x3; val_offset:1914*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1914*FLEN/8, x4, x1, x2)

inst_639:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xbeee583dc04b2 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xb5b6b10bb56a2 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x7e15e795b08fa and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdbeee583dc04b2; op2val:0x3feb5b6b10bb56a2;
op3val:0x3fd7e15e795b08fa; valaddr_reg:x3; val_offset:1917*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1917*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_6)

inst_640:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xcbb73b1332186 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x8163e6a1ed26f and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x5a08faee8ef88 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdcbb73b1332186; op2val:0x3fe8163e6a1ed26f;
op3val:0x3fd5a08faee8ef88; valaddr_reg:x3; val_offset:1920*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1920*FLEN/8, x4, x1, x2)

inst_641:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xcbb73b1332186 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x8163e6a1ed26f and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x5a08faee8ef88 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdcbb73b1332186; op2val:0x3fe8163e6a1ed26f;
op3val:0x3fd5a08faee8ef88; valaddr_reg:x3; val_offset:1923*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1923*FLEN/8, x4, x1, x2)

inst_642:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xcbb73b1332186 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x8163e6a1ed26f and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x5a08faee8ef88 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdcbb73b1332186; op2val:0x3fe8163e6a1ed26f;
op3val:0x3fd5a08faee8ef88; valaddr_reg:x3; val_offset:1926*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1926*FLEN/8, x4, x1, x2)

inst_643:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xcbb73b1332186 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x8163e6a1ed26f and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x5a08faee8ef88 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdcbb73b1332186; op2val:0x3fe8163e6a1ed26f;
op3val:0x3fd5a08faee8ef88; valaddr_reg:x3; val_offset:1929*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1929*FLEN/8, x4, x1, x2)

inst_644:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xcbb73b1332186 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x8163e6a1ed26f and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x5a08faee8ef88 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdcbb73b1332186; op2val:0x3fe8163e6a1ed26f;
op3val:0x3fd5a08faee8ef88; valaddr_reg:x3; val_offset:1932*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1932*FLEN/8, x4, x1, x2)

inst_645:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xcfbe52eea19fa and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x2ef5cf17cda0f and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x1267e71072593 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdcfbe52eea19fa; op2val:0x3ff2ef5cf17cda0f;
op3val:0x3fe1267e71072593; valaddr_reg:x3; val_offset:1935*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1935*FLEN/8, x4, x1, x2)

inst_646:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xcfbe52eea19fa and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x2ef5cf17cda0f and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x1267e71072593 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdcfbe52eea19fa; op2val:0x3ff2ef5cf17cda0f;
op3val:0x3fe1267e71072593; valaddr_reg:x3; val_offset:1938*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1938*FLEN/8, x4, x1, x2)

inst_647:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xcfbe52eea19fa and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x2ef5cf17cda0f and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x1267e71072593 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdcfbe52eea19fa; op2val:0x3ff2ef5cf17cda0f;
op3val:0x3fe1267e71072593; valaddr_reg:x3; val_offset:1941*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1941*FLEN/8, x4, x1, x2)

inst_648:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xcfbe52eea19fa and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x2ef5cf17cda0f and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x1267e71072593 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdcfbe52eea19fa; op2val:0x3ff2ef5cf17cda0f;
op3val:0x3fe1267e71072593; valaddr_reg:x3; val_offset:1944*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1944*FLEN/8, x4, x1, x2)

inst_649:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xcfbe52eea19fa and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x2ef5cf17cda0f and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x1267e71072593 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdcfbe52eea19fa; op2val:0x3ff2ef5cf17cda0f;
op3val:0x3fe1267e71072593; valaddr_reg:x3; val_offset:1947*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1947*FLEN/8, x4, x1, x2)

inst_650:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xcfe2013058ea6 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x6a2667ddbcc1c and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x481d96b822c39 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdcfe2013058ea6; op2val:0x3ff6a2667ddbcc1c;
op3val:0x3fe481d96b822c39; valaddr_reg:x3; val_offset:1950*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1950*FLEN/8, x4, x1, x2)

inst_651:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xcfe2013058ea6 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x6a2667ddbcc1c and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x481d96b822c39 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdcfe2013058ea6; op2val:0x3ff6a2667ddbcc1c;
op3val:0x3fe481d96b822c39; valaddr_reg:x3; val_offset:1953*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1953*FLEN/8, x4, x1, x2)

inst_652:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xcfe2013058ea6 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x6a2667ddbcc1c and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x481d96b822c39 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdcfe2013058ea6; op2val:0x3ff6a2667ddbcc1c;
op3val:0x3fe481d96b822c39; valaddr_reg:x3; val_offset:1956*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1956*FLEN/8, x4, x1, x2)

inst_653:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xcfe2013058ea6 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x6a2667ddbcc1c and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x481d96b822c39 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdcfe2013058ea6; op2val:0x3ff6a2667ddbcc1c;
op3val:0x3fe481d96b822c39; valaddr_reg:x3; val_offset:1959*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1959*FLEN/8, x4, x1, x2)

inst_654:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xcfe2013058ea6 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x6a2667ddbcc1c and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x481d96b822c39 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdcfe2013058ea6; op2val:0x3ff6a2667ddbcc1c;
op3val:0x3fe481d96b822c39; valaddr_reg:x3; val_offset:1962*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1962*FLEN/8, x4, x1, x2)

inst_655:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xd21feea7d7bb4 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x04ccd4e2d0338 and fs3 == 0 and fe3 == 0x3fb and fm3 == 0xdadd637411c58 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdd21feea7d7bb4; op2val:0x3fd04ccd4e2d0338;
op3val:0x3fbdadd637411c58; valaddr_reg:x3; val_offset:1965*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1965*FLEN/8, x4, x1, x2)

inst_656:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xd21feea7d7bb4 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x04ccd4e2d0338 and fs3 == 0 and fe3 == 0x3fb and fm3 == 0xdadd637411c58 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdd21feea7d7bb4; op2val:0x3fd04ccd4e2d0338;
op3val:0x3fbdadd637411c58; valaddr_reg:x3; val_offset:1968*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1968*FLEN/8, x4, x1, x2)

inst_657:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xd21feea7d7bb4 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x04ccd4e2d0338 and fs3 == 0 and fe3 == 0x3fb and fm3 == 0xdadd637411c58 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdd21feea7d7bb4; op2val:0x3fd04ccd4e2d0338;
op3val:0x3fbdadd637411c58; valaddr_reg:x3; val_offset:1971*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1971*FLEN/8, x4, x1, x2)

inst_658:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xd21feea7d7bb4 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x04ccd4e2d0338 and fs3 == 0 and fe3 == 0x3fb and fm3 == 0xdadd637411c58 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdd21feea7d7bb4; op2val:0x3fd04ccd4e2d0338;
op3val:0x3fbdadd637411c58; valaddr_reg:x3; val_offset:1974*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1974*FLEN/8, x4, x1, x2)

inst_659:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xd21feea7d7bb4 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x04ccd4e2d0338 and fs3 == 0 and fe3 == 0x3fb and fm3 == 0xdadd637411c58 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdd21feea7d7bb4; op2val:0x3fd04ccd4e2d0338;
op3val:0x3fbdadd637411c58; valaddr_reg:x3; val_offset:1977*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1977*FLEN/8, x4, x1, x2)

inst_660:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xd527dd1cc27ca and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x6d7ad37f30e31 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x4ee5776d2a4eb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdd527dd1cc27ca; op2val:0x3ff6d7ad37f30e31;
op3val:0x3fe4ee5776d2a4eb; valaddr_reg:x3; val_offset:1980*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1980*FLEN/8, x4, x1, x2)

inst_661:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xd527dd1cc27ca and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x6d7ad37f30e31 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x4ee5776d2a4eb and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdd527dd1cc27ca; op2val:0x3ff6d7ad37f30e31;
op3val:0x3fe4ee5776d2a4eb; valaddr_reg:x3; val_offset:1983*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1983*FLEN/8, x4, x1, x2)

inst_662:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xd527dd1cc27ca and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x6d7ad37f30e31 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x4ee5776d2a4eb and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdd527dd1cc27ca; op2val:0x3ff6d7ad37f30e31;
op3val:0x3fe4ee5776d2a4eb; valaddr_reg:x3; val_offset:1986*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 1986*FLEN/8, x4, x1, x2)

inst_663:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xd527dd1cc27ca and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x6d7ad37f30e31 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x4ee5776d2a4eb and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdd527dd1cc27ca; op2val:0x3ff6d7ad37f30e31;
op3val:0x3fe4ee5776d2a4eb; valaddr_reg:x3; val_offset:1989*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 1989*FLEN/8, x4, x1, x2)

inst_664:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xd527dd1cc27ca and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x6d7ad37f30e31 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x4ee5776d2a4eb and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdd527dd1cc27ca; op2val:0x3ff6d7ad37f30e31;
op3val:0x3fe4ee5776d2a4eb; valaddr_reg:x3; val_offset:1992*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 1992*FLEN/8, x4, x1, x2)

inst_665:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xd8c6843af9d78 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x609757b7bde27 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x45943a73f0eb8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdd8c6843af9d78; op2val:0x3fe609757b7bde27;
op3val:0x3fd45943a73f0eb8; valaddr_reg:x3; val_offset:1995*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 1995*FLEN/8, x4, x1, x2)

inst_666:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xd8c6843af9d78 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x609757b7bde27 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x45943a73f0eb8 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdd8c6843af9d78; op2val:0x3fe609757b7bde27;
op3val:0x3fd45943a73f0eb8; valaddr_reg:x3; val_offset:1998*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 1998*FLEN/8, x4, x1, x2)

inst_667:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xd8c6843af9d78 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x609757b7bde27 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x45943a73f0eb8 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdd8c6843af9d78; op2val:0x3fe609757b7bde27;
op3val:0x3fd45943a73f0eb8; valaddr_reg:x3; val_offset:2001*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2001*FLEN/8, x4, x1, x2)

inst_668:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xd8c6843af9d78 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x609757b7bde27 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x45943a73f0eb8 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdd8c6843af9d78; op2val:0x3fe609757b7bde27;
op3val:0x3fd45943a73f0eb8; valaddr_reg:x3; val_offset:2004*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2004*FLEN/8, x4, x1, x2)

inst_669:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xd8c6843af9d78 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x609757b7bde27 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x45943a73f0eb8 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdd8c6843af9d78; op2val:0x3fe609757b7bde27;
op3val:0x3fd45943a73f0eb8; valaddr_reg:x3; val_offset:2007*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2007*FLEN/8, x4, x1, x2)

inst_670:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xda553f5f63602 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xca8ec0a0eff89 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xa8d281c9f8123 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdda553f5f63602; op2val:0x3ffca8ec0a0eff89;
op3val:0x3fea8d281c9f8123; valaddr_reg:x3; val_offset:2010*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2010*FLEN/8, x4, x1, x2)

inst_671:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xda553f5f63602 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xca8ec0a0eff89 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xa8d281c9f8123 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdda553f5f63602; op2val:0x3ffca8ec0a0eff89;
op3val:0x3fea8d281c9f8123; valaddr_reg:x3; val_offset:2013*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2013*FLEN/8, x4, x1, x2)

inst_672:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xda553f5f63602 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xca8ec0a0eff89 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xa8d281c9f8123 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdda553f5f63602; op2val:0x3ffca8ec0a0eff89;
op3val:0x3fea8d281c9f8123; valaddr_reg:x3; val_offset:2016*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2016*FLEN/8, x4, x1, x2)

inst_673:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xda553f5f63602 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xca8ec0a0eff89 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xa8d281c9f8123 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdda553f5f63602; op2val:0x3ffca8ec0a0eff89;
op3val:0x3fea8d281c9f8123; valaddr_reg:x3; val_offset:2019*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2019*FLEN/8, x4, x1, x2)

inst_674:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xda553f5f63602 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xca8ec0a0eff89 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xa8d281c9f8123 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdda553f5f63602; op2val:0x3ffca8ec0a0eff89;
op3val:0x3fea8d281c9f8123; valaddr_reg:x3; val_offset:2022*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2022*FLEN/8, x4, x1, x2)

inst_675:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xdd942bf467a1e and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xc3fb83d5b5d53 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xa5989fd41698f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fddd942bf467a1e; op2val:0x3ffc3fb83d5b5d53;
op3val:0x3fea5989fd41698f; valaddr_reg:x3; val_offset:2025*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2025*FLEN/8, x4, x1, x2)

inst_676:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xdd942bf467a1e and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xc3fb83d5b5d53 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xa5989fd41698f and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fddd942bf467a1e; op2val:0x3ffc3fb83d5b5d53;
op3val:0x3fea5989fd41698f; valaddr_reg:x3; val_offset:2028*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2028*FLEN/8, x4, x1, x2)

inst_677:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xdd942bf467a1e and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xc3fb83d5b5d53 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xa5989fd41698f and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fddd942bf467a1e; op2val:0x3ffc3fb83d5b5d53;
op3val:0x3fea5989fd41698f; valaddr_reg:x3; val_offset:2031*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2031*FLEN/8, x4, x1, x2)

inst_678:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xdd942bf467a1e and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xc3fb83d5b5d53 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xa5989fd41698f and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fddd942bf467a1e; op2val:0x3ffc3fb83d5b5d53;
op3val:0x3fea5989fd41698f; valaddr_reg:x3; val_offset:2034*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2034*FLEN/8, x4, x1, x2)

inst_679:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xdd942bf467a1e and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xc3fb83d5b5d53 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xa5989fd41698f and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fddd942bf467a1e; op2val:0x3ffc3fb83d5b5d53;
op3val:0x3fea5989fd41698f; valaddr_reg:x3; val_offset:2037*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2037*FLEN/8, x4, x1, x2)

inst_680:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xeb3bfcbcd1550 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xdd3e1e063ea3d and fs3 == 0 and fe3 == 0x3fc and fm3 == 0xc9e2fc08057f8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdeb3bfcbcd1550; op2val:0x3fddd3e1e063ea3d;
op3val:0x3fcc9e2fc08057f8; valaddr_reg:x3; val_offset:2040*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2040*FLEN/8, x4, x1, x2)

inst_681:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xeb3bfcbcd1550 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xdd3e1e063ea3d and fs3 == 0 and fe3 == 0x3fc and fm3 == 0xc9e2fc08057f8 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdeb3bfcbcd1550; op2val:0x3fddd3e1e063ea3d;
op3val:0x3fcc9e2fc08057f8; valaddr_reg:x3; val_offset:2043*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2043*FLEN/8, x4, x1, x2)

inst_682:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xeb3bfcbcd1550 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xdd3e1e063ea3d and fs3 == 0 and fe3 == 0x3fc and fm3 == 0xc9e2fc08057f8 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdeb3bfcbcd1550; op2val:0x3fddd3e1e063ea3d;
op3val:0x3fcc9e2fc08057f8; valaddr_reg:x3; val_offset:2046*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2046*FLEN/8, x4, x1, x2)

inst_683:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xeb3bfcbcd1550 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xdd3e1e063ea3d and fs3 == 0 and fe3 == 0x3fc and fm3 == 0xc9e2fc08057f8 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdeb3bfcbcd1550; op2val:0x3fddd3e1e063ea3d;
op3val:0x3fcc9e2fc08057f8; valaddr_reg:x3; val_offset:2049*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2049*FLEN/8, x4, x1, x2)

inst_684:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xeb3bfcbcd1550 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xdd3e1e063ea3d and fs3 == 0 and fe3 == 0x3fc and fm3 == 0xc9e2fc08057f8 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdeb3bfcbcd1550; op2val:0x3fddd3e1e063ea3d;
op3val:0x3fcc9e2fc08057f8; valaddr_reg:x3; val_offset:2052*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2052*FLEN/8, x4, x1, x2)

inst_685:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xebb83a091dab8 and fs2 == 0 and fe2 == 0x3fb and fm2 == 0x8805384bc0131 and fs3 == 0 and fe3 == 0x3fa and fm3 == 0x787e0fcc721b0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdebb83a091dab8; op2val:0x3fb8805384bc0131;
op3val:0x3fa787e0fcc721b0; valaddr_reg:x3; val_offset:2055*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2055*FLEN/8, x4, x1, x2)

inst_686:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xebb83a091dab8 and fs2 == 0 and fe2 == 0x3fb and fm2 == 0x8805384bc0131 and fs3 == 0 and fe3 == 0x3fa and fm3 == 0x787e0fcc721b0 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdebb83a091dab8; op2val:0x3fb8805384bc0131;
op3val:0x3fa787e0fcc721b0; valaddr_reg:x3; val_offset:2058*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2058*FLEN/8, x4, x1, x2)

inst_687:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xebb83a091dab8 and fs2 == 0 and fe2 == 0x3fb and fm2 == 0x8805384bc0131 and fs3 == 0 and fe3 == 0x3fa and fm3 == 0x787e0fcc721b0 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdebb83a091dab8; op2val:0x3fb8805384bc0131;
op3val:0x3fa787e0fcc721b0; valaddr_reg:x3; val_offset:2061*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2061*FLEN/8, x4, x1, x2)

inst_688:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xebb83a091dab8 and fs2 == 0 and fe2 == 0x3fb and fm2 == 0x8805384bc0131 and fs3 == 0 and fe3 == 0x3fa and fm3 == 0x787e0fcc721b0 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdebb83a091dab8; op2val:0x3fb8805384bc0131;
op3val:0x3fa787e0fcc721b0; valaddr_reg:x3; val_offset:2064*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2064*FLEN/8, x4, x1, x2)

inst_689:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xebb83a091dab8 and fs2 == 0 and fe2 == 0x3fb and fm2 == 0x8805384bc0131 and fs3 == 0 and fe3 == 0x3fa and fm3 == 0x787e0fcc721b0 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdebb83a091dab8; op2val:0x3fb8805384bc0131;
op3val:0x3fa787e0fcc721b0; valaddr_reg:x3; val_offset:2067*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2067*FLEN/8, x4, x1, x2)

inst_690:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xf043b0baa0bfe and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x0df416b4ece61 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x05a8269e8c67c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdf043b0baa0bfe; op2val:0x3fd0df416b4ece61;
op3val:0x3fc05a8269e8c67c; valaddr_reg:x3; val_offset:2070*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2070*FLEN/8, x4, x1, x2)

inst_691:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xf043b0baa0bfe and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x0df416b4ece61 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x05a8269e8c67c and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdf043b0baa0bfe; op2val:0x3fd0df416b4ece61;
op3val:0x3fc05a8269e8c67c; valaddr_reg:x3; val_offset:2073*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2073*FLEN/8, x4, x1, x2)

inst_692:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xf043b0baa0bfe and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x0df416b4ece61 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x05a8269e8c67c and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdf043b0baa0bfe; op2val:0x3fd0df416b4ece61;
op3val:0x3fc05a8269e8c67c; valaddr_reg:x3; val_offset:2076*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2076*FLEN/8, x4, x1, x2)

inst_693:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xf043b0baa0bfe and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x0df416b4ece61 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x05a8269e8c67c and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdf043b0baa0bfe; op2val:0x3fd0df416b4ece61;
op3val:0x3fc05a8269e8c67c; valaddr_reg:x3; val_offset:2079*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2079*FLEN/8, x4, x1, x2)

inst_694:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xf043b0baa0bfe and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x0df416b4ece61 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x05a8269e8c67c and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdf043b0baa0bfe; op2val:0x3fd0df416b4ece61;
op3val:0x3fc05a8269e8c67c; valaddr_reg:x3; val_offset:2082*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2082*FLEN/8, x4, x1, x2)

inst_695:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xf21b2aeb75d6a and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xcf2c8ff8d2975 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xc29aebb645d1a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdf21b2aeb75d6a; op2val:0x3ffcf2c8ff8d2975;
op3val:0x3fec29aebb645d1a; valaddr_reg:x3; val_offset:2085*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2085*FLEN/8, x4, x1, x2)

inst_696:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xf21b2aeb75d6a and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xcf2c8ff8d2975 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xc29aebb645d1a and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdf21b2aeb75d6a; op2val:0x3ffcf2c8ff8d2975;
op3val:0x3fec29aebb645d1a; valaddr_reg:x3; val_offset:2088*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2088*FLEN/8, x4, x1, x2)

inst_697:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xf21b2aeb75d6a and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xcf2c8ff8d2975 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xc29aebb645d1a and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdf21b2aeb75d6a; op2val:0x3ffcf2c8ff8d2975;
op3val:0x3fec29aebb645d1a; valaddr_reg:x3; val_offset:2091*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2091*FLEN/8, x4, x1, x2)

inst_698:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xf21b2aeb75d6a and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xcf2c8ff8d2975 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xc29aebb645d1a and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdf21b2aeb75d6a; op2val:0x3ffcf2c8ff8d2975;
op3val:0x3fec29aebb645d1a; valaddr_reg:x3; val_offset:2094*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2094*FLEN/8, x4, x1, x2)

inst_699:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xf21b2aeb75d6a and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xcf2c8ff8d2975 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xc29aebb645d1a and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdf21b2aeb75d6a; op2val:0x3ffcf2c8ff8d2975;
op3val:0x3fec29aebb645d1a; valaddr_reg:x3; val_offset:2097*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2097*FLEN/8, x4, x1, x2)

inst_700:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xf817ff78a6296 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xdf65ee0519153 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xd7fece95716fa and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdf817ff78a6296; op2val:0x3ffdf65ee0519153;
op3val:0x3fed7fece95716fa; valaddr_reg:x3; val_offset:2100*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2100*FLEN/8, x4, x1, x2)

inst_701:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xf817ff78a6296 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xdf65ee0519153 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xd7fece95716fa and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdf817ff78a6296; op2val:0x3ffdf65ee0519153;
op3val:0x3fed7fece95716fa; valaddr_reg:x3; val_offset:2103*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2103*FLEN/8, x4, x1, x2)

inst_702:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xf817ff78a6296 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xdf65ee0519153 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xd7fece95716fa and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdf817ff78a6296; op2val:0x3ffdf65ee0519153;
op3val:0x3fed7fece95716fa; valaddr_reg:x3; val_offset:2106*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2106*FLEN/8, x4, x1, x2)

inst_703:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xf817ff78a6296 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xdf65ee0519153 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xd7fece95716fa and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdf817ff78a6296; op2val:0x3ffdf65ee0519153;
op3val:0x3fed7fece95716fa; valaddr_reg:x3; val_offset:2109*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2109*FLEN/8, x4, x1, x2)

inst_704:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xf817ff78a6296 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xdf65ee0519153 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xd7fece95716fa and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdf817ff78a6296; op2val:0x3ffdf65ee0519153;
op3val:0x3fed7fece95716fa; valaddr_reg:x3; val_offset:2112*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2112*FLEN/8, x4, x1, x2)

inst_705:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xfabd4ebf2ad70 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xca8cd03d1e9a8 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xc5d6b54def6d9 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdfabd4ebf2ad70; op2val:0x3ffca8cd03d1e9a8;
op3val:0x3fec5d6b54def6d9; valaddr_reg:x3; val_offset:2115*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2115*FLEN/8, x4, x1, x2)

inst_706:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xfabd4ebf2ad70 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xca8cd03d1e9a8 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xc5d6b54def6d9 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdfabd4ebf2ad70; op2val:0x3ffca8cd03d1e9a8;
op3val:0x3fec5d6b54def6d9; valaddr_reg:x3; val_offset:2118*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2118*FLEN/8, x4, x1, x2)

inst_707:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xfabd4ebf2ad70 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xca8cd03d1e9a8 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xc5d6b54def6d9 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdfabd4ebf2ad70; op2val:0x3ffca8cd03d1e9a8;
op3val:0x3fec5d6b54def6d9; valaddr_reg:x3; val_offset:2121*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2121*FLEN/8, x4, x1, x2)

inst_708:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xfabd4ebf2ad70 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xca8cd03d1e9a8 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xc5d6b54def6d9 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdfabd4ebf2ad70; op2val:0x3ffca8cd03d1e9a8;
op3val:0x3fec5d6b54def6d9; valaddr_reg:x3; val_offset:2124*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2124*FLEN/8, x4, x1, x2)

inst_709:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xfabd4ebf2ad70 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xca8cd03d1e9a8 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xc5d6b54def6d9 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fdfabd4ebf2ad70; op2val:0x3ffca8cd03d1e9a8;
op3val:0x3fec5d6b54def6d9; valaddr_reg:x3; val_offset:2127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2127*FLEN/8, x4, x1, x2)

inst_710:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x0084b356b6583 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x7da384554ea59 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x7e69580024edf and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe0084b356b6583; op2val:0x3ff7da384554ea59;
op3val:0x3fe7e69580024edf; valaddr_reg:x3; val_offset:2130*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2130*FLEN/8, x4, x1, x2)

inst_711:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x0084b356b6583 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x7da384554ea59 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x7e69580024edf and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe0084b356b6583; op2val:0x3ff7da384554ea59;
op3val:0x3fe7e69580024edf; valaddr_reg:x3; val_offset:2133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2133*FLEN/8, x4, x1, x2)

inst_712:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x0084b356b6583 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x7da384554ea59 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x7e69580024edf and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe0084b356b6583; op2val:0x3ff7da384554ea59;
op3val:0x3fe7e69580024edf; valaddr_reg:x3; val_offset:2136*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2136*FLEN/8, x4, x1, x2)

inst_713:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x0084b356b6583 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x7da384554ea59 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x7e69580024edf and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe0084b356b6583; op2val:0x3ff7da384554ea59;
op3val:0x3fe7e69580024edf; valaddr_reg:x3; val_offset:2139*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2139*FLEN/8, x4, x1, x2)

inst_714:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x0084b356b6583 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x7da384554ea59 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x7e69580024edf and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe0084b356b6583; op2val:0x3ff7da384554ea59;
op3val:0x3fe7e69580024edf; valaddr_reg:x3; val_offset:2142*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2142*FLEN/8, x4, x1, x2)

inst_715:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x0244f8a366e40 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x154672f569e38 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x17bbb3df18916 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe0244f8a366e40; op2val:0x3fe154672f569e38;
op3val:0x3fd17bbb3df18916; valaddr_reg:x3; val_offset:2145*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2145*FLEN/8, x4, x1, x2)

inst_716:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x0244f8a366e40 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x154672f569e38 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x17bbb3df18916 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe0244f8a366e40; op2val:0x3fe154672f569e38;
op3val:0x3fd17bbb3df18916; valaddr_reg:x3; val_offset:2148*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2148*FLEN/8, x4, x1, x2)

inst_717:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x0244f8a366e40 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x154672f569e38 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x17bbb3df18916 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe0244f8a366e40; op2val:0x3fe154672f569e38;
op3val:0x3fd17bbb3df18916; valaddr_reg:x3; val_offset:2151*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2151*FLEN/8, x4, x1, x2)

inst_718:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x0244f8a366e40 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x154672f569e38 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x17bbb3df18916 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe0244f8a366e40; op2val:0x3fe154672f569e38;
op3val:0x3fd17bbb3df18916; valaddr_reg:x3; val_offset:2154*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2154*FLEN/8, x4, x1, x2)

inst_719:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x0244f8a366e40 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x154672f569e38 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x17bbb3df18916 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe0244f8a366e40; op2val:0x3fe154672f569e38;
op3val:0x3fd17bbb3df18916; valaddr_reg:x3; val_offset:2157*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2157*FLEN/8, x4, x1, x2)

inst_720:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x02ccddd714043 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xd46236260fb41 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xd981ceb7ce01a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe02ccddd714043; op2val:0x3ffd46236260fb41;
op3val:0x3fed981ceb7ce01a; valaddr_reg:x3; val_offset:2160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2160*FLEN/8, x4, x1, x2)

inst_721:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x02ccddd714043 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xd46236260fb41 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xd981ceb7ce01a and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe02ccddd714043; op2val:0x3ffd46236260fb41;
op3val:0x3fed981ceb7ce01a; valaddr_reg:x3; val_offset:2163*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2163*FLEN/8, x4, x1, x2)

inst_722:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x02ccddd714043 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xd46236260fb41 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xd981ceb7ce01a and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe02ccddd714043; op2val:0x3ffd46236260fb41;
op3val:0x3fed981ceb7ce01a; valaddr_reg:x3; val_offset:2166*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2166*FLEN/8, x4, x1, x2)

inst_723:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x02ccddd714043 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xd46236260fb41 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xd981ceb7ce01a and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe02ccddd714043; op2val:0x3ffd46236260fb41;
op3val:0x3fed981ceb7ce01a; valaddr_reg:x3; val_offset:2169*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2169*FLEN/8, x4, x1, x2)

inst_724:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x02ccddd714043 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xd46236260fb41 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xd981ceb7ce01a and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe02ccddd714043; op2val:0x3ffd46236260fb41;
op3val:0x3fed981ceb7ce01a; valaddr_reg:x3; val_offset:2172*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2172*FLEN/8, x4, x1, x2)

inst_725:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x0440ae3b25c6e and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x0b7af39a76f6f and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x0fec743125d24 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe0440ae3b25c6e; op2val:0x3ff0b7af39a76f6f;
op3val:0x3fe0fec743125d24; valaddr_reg:x3; val_offset:2175*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2175*FLEN/8, x4, x1, x2)

inst_726:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x0440ae3b25c6e and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x0b7af39a76f6f and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x0fec743125d24 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe0440ae3b25c6e; op2val:0x3ff0b7af39a76f6f;
op3val:0x3fe0fec743125d24; valaddr_reg:x3; val_offset:2178*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2178*FLEN/8, x4, x1, x2)

inst_727:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x0440ae3b25c6e and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x0b7af39a76f6f and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x0fec743125d24 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe0440ae3b25c6e; op2val:0x3ff0b7af39a76f6f;
op3val:0x3fe0fec743125d24; valaddr_reg:x3; val_offset:2181*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2181*FLEN/8, x4, x1, x2)

inst_728:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x0440ae3b25c6e and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x0b7af39a76f6f and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x0fec743125d24 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe0440ae3b25c6e; op2val:0x3ff0b7af39a76f6f;
op3val:0x3fe0fec743125d24; valaddr_reg:x3; val_offset:2184*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2184*FLEN/8, x4, x1, x2)

inst_729:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x0440ae3b25c6e and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x0b7af39a76f6f and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x0fec743125d24 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe0440ae3b25c6e; op2val:0x3ff0b7af39a76f6f;
op3val:0x3fe0fec743125d24; valaddr_reg:x3; val_offset:2187*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2187*FLEN/8, x4, x1, x2)

inst_730:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x05be08f26408d and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xd1d7173263cb0 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xdc4a189163399 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe05be08f26408d; op2val:0x3ffd1d7173263cb0;
op3val:0x3fedc4a189163399; valaddr_reg:x3; val_offset:2190*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2190*FLEN/8, x4, x1, x2)

inst_731:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x05be08f26408d and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xd1d7173263cb0 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xdc4a189163399 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe05be08f26408d; op2val:0x3ffd1d7173263cb0;
op3val:0x3fedc4a189163399; valaddr_reg:x3; val_offset:2193*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2193*FLEN/8, x4, x1, x2)

inst_732:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x05be08f26408d and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xd1d7173263cb0 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xdc4a189163399 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe05be08f26408d; op2val:0x3ffd1d7173263cb0;
op3val:0x3fedc4a189163399; valaddr_reg:x3; val_offset:2196*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2196*FLEN/8, x4, x1, x2)

inst_733:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x05be08f26408d and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xd1d7173263cb0 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xdc4a189163399 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe05be08f26408d; op2val:0x3ffd1d7173263cb0;
op3val:0x3fedc4a189163399; valaddr_reg:x3; val_offset:2199*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2199*FLEN/8, x4, x1, x2)

inst_734:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x05be08f26408d and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xd1d7173263cb0 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xdc4a189163399 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe05be08f26408d; op2val:0x3ffd1d7173263cb0;
op3val:0x3fedc4a189163399; valaddr_reg:x3; val_offset:2202*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2202*FLEN/8, x4, x1, x2)

inst_735:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x061da1050c869 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x3de73522f9190 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x457f6b877d62c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe061da1050c869; op2val:0x3ff3de73522f9190;
op3val:0x3fe457f6b877d62c; valaddr_reg:x3; val_offset:2205*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2205*FLEN/8, x4, x1, x2)

inst_736:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x061da1050c869 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x3de73522f9190 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x457f6b877d62c and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe061da1050c869; op2val:0x3ff3de73522f9190;
op3val:0x3fe457f6b877d62c; valaddr_reg:x3; val_offset:2208*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2208*FLEN/8, x4, x1, x2)

inst_737:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x061da1050c869 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x3de73522f9190 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x457f6b877d62c and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe061da1050c869; op2val:0x3ff3de73522f9190;
op3val:0x3fe457f6b877d62c; valaddr_reg:x3; val_offset:2211*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2211*FLEN/8, x4, x1, x2)

inst_738:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x061da1050c869 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x3de73522f9190 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x457f6b877d62c and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe061da1050c869; op2val:0x3ff3de73522f9190;
op3val:0x3fe457f6b877d62c; valaddr_reg:x3; val_offset:2214*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2214*FLEN/8, x4, x1, x2)

inst_739:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x061da1050c869 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x3de73522f9190 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x457f6b877d62c and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe061da1050c869; op2val:0x3ff3de73522f9190;
op3val:0x3fe457f6b877d62c; valaddr_reg:x3; val_offset:2217*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2217*FLEN/8, x4, x1, x2)

inst_740:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x063ea9231d3f5 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x526cd83c3d305 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x5aae3b424b81a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe063ea9231d3f5; op2val:0x3ff526cd83c3d305;
op3val:0x3fe5aae3b424b81a; valaddr_reg:x3; val_offset:2220*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2220*FLEN/8, x4, x1, x2)

inst_741:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x063ea9231d3f5 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x526cd83c3d305 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x5aae3b424b81a and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe063ea9231d3f5; op2val:0x3ff526cd83c3d305;
op3val:0x3fe5aae3b424b81a; valaddr_reg:x3; val_offset:2223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2223*FLEN/8, x4, x1, x2)

inst_742:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x063ea9231d3f5 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x526cd83c3d305 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x5aae3b424b81a and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe063ea9231d3f5; op2val:0x3ff526cd83c3d305;
op3val:0x3fe5aae3b424b81a; valaddr_reg:x3; val_offset:2226*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2226*FLEN/8, x4, x1, x2)

inst_743:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x063ea9231d3f5 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x526cd83c3d305 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x5aae3b424b81a and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe063ea9231d3f5; op2val:0x3ff526cd83c3d305;
op3val:0x3fe5aae3b424b81a; valaddr_reg:x3; val_offset:2229*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2229*FLEN/8, x4, x1, x2)

inst_744:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x063ea9231d3f5 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x526cd83c3d305 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x5aae3b424b81a and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe063ea9231d3f5; op2val:0x3ff526cd83c3d305;
op3val:0x3fe5aae3b424b81a; valaddr_reg:x3; val_offset:2232*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2232*FLEN/8, x4, x1, x2)

inst_745:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x0650e791c0795 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xafa87df6fd291 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0xba4edc08f0eb4 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe0650e791c0795; op2val:0x3fdafa87df6fd291;
op3val:0x3fcba4edc08f0eb4; valaddr_reg:x3; val_offset:2235*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2235*FLEN/8, x4, x1, x2)

inst_746:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x0650e791c0795 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xafa87df6fd291 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0xba4edc08f0eb4 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe0650e791c0795; op2val:0x3fdafa87df6fd291;
op3val:0x3fcba4edc08f0eb4; valaddr_reg:x3; val_offset:2238*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2238*FLEN/8, x4, x1, x2)

inst_747:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x0650e791c0795 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xafa87df6fd291 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0xba4edc08f0eb4 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe0650e791c0795; op2val:0x3fdafa87df6fd291;
op3val:0x3fcba4edc08f0eb4; valaddr_reg:x3; val_offset:2241*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2241*FLEN/8, x4, x1, x2)

inst_748:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x0650e791c0795 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xafa87df6fd291 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0xba4edc08f0eb4 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe0650e791c0795; op2val:0x3fdafa87df6fd291;
op3val:0x3fcba4edc08f0eb4; valaddr_reg:x3; val_offset:2244*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2244*FLEN/8, x4, x1, x2)

inst_749:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x0650e791c0795 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xafa87df6fd291 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0xba4edc08f0eb4 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe0650e791c0795; op2val:0x3fdafa87df6fd291;
op3val:0x3fcba4edc08f0eb4; valaddr_reg:x3; val_offset:2247*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2247*FLEN/8, x4, x1, x2)

inst_750:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x07a98a8f37d6f and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x6f1035e4b87d0 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x7a0cbfbda4b24 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe07a98a8f37d6f; op2val:0x3ff6f1035e4b87d0;
op3val:0x3fe7a0cbfbda4b24; valaddr_reg:x3; val_offset:2250*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2250*FLEN/8, x4, x1, x2)

inst_751:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x07a98a8f37d6f and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x6f1035e4b87d0 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x7a0cbfbda4b24 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe07a98a8f37d6f; op2val:0x3ff6f1035e4b87d0;
op3val:0x3fe7a0cbfbda4b24; valaddr_reg:x3; val_offset:2253*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2253*FLEN/8, x4, x1, x2)

inst_752:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x07a98a8f37d6f and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x6f1035e4b87d0 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x7a0cbfbda4b24 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe07a98a8f37d6f; op2val:0x3ff6f1035e4b87d0;
op3val:0x3fe7a0cbfbda4b24; valaddr_reg:x3; val_offset:2256*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2256*FLEN/8, x4, x1, x2)

inst_753:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x07a98a8f37d6f and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x6f1035e4b87d0 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x7a0cbfbda4b24 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe07a98a8f37d6f; op2val:0x3ff6f1035e4b87d0;
op3val:0x3fe7a0cbfbda4b24; valaddr_reg:x3; val_offset:2259*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2259*FLEN/8, x4, x1, x2)

inst_754:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x07a98a8f37d6f and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x6f1035e4b87d0 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x7a0cbfbda4b24 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe07a98a8f37d6f; op2val:0x3ff6f1035e4b87d0;
op3val:0x3fe7a0cbfbda4b24; valaddr_reg:x3; val_offset:2262*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2262*FLEN/8, x4, x1, x2)

inst_755:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x0852ab71bea61 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xab650dd25ea8a and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xb94a3ad9c5211 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe0852ab71bea61; op2val:0x3ffab650dd25ea8a;
op3val:0x3feb94a3ad9c5211; valaddr_reg:x3; val_offset:2265*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2265*FLEN/8, x4, x1, x2)

inst_756:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x0852ab71bea61 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xab650dd25ea8a and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xb94a3ad9c5211 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe0852ab71bea61; op2val:0x3ffab650dd25ea8a;
op3val:0x3feb94a3ad9c5211; valaddr_reg:x3; val_offset:2268*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2268*FLEN/8, x4, x1, x2)

inst_757:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x0852ab71bea61 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xab650dd25ea8a and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xb94a3ad9c5211 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe0852ab71bea61; op2val:0x3ffab650dd25ea8a;
op3val:0x3feb94a3ad9c5211; valaddr_reg:x3; val_offset:2271*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2271*FLEN/8, x4, x1, x2)

inst_758:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x0852ab71bea61 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xab650dd25ea8a and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xb94a3ad9c5211 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe0852ab71bea61; op2val:0x3ffab650dd25ea8a;
op3val:0x3feb94a3ad9c5211; valaddr_reg:x3; val_offset:2274*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2274*FLEN/8, x4, x1, x2)

inst_759:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x0852ab71bea61 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xab650dd25ea8a and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xb94a3ad9c5211 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe0852ab71bea61; op2val:0x3ffab650dd25ea8a;
op3val:0x3feb94a3ad9c5211; valaddr_reg:x3; val_offset:2277*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2277*FLEN/8, x4, x1, x2)

inst_760:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x0a045fc492db6 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x679c593af2a8c and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x75ae99afcc2bb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe0a045fc492db6; op2val:0x3ff679c593af2a8c;
op3val:0x3fe75ae99afcc2bb; valaddr_reg:x3; val_offset:2280*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2280*FLEN/8, x4, x1, x2)

inst_761:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x0a045fc492db6 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x679c593af2a8c and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x75ae99afcc2bb and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe0a045fc492db6; op2val:0x3ff679c593af2a8c;
op3val:0x3fe75ae99afcc2bb; valaddr_reg:x3; val_offset:2283*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2283*FLEN/8, x4, x1, x2)

inst_762:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x0a045fc492db6 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x679c593af2a8c and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x75ae99afcc2bb and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe0a045fc492db6; op2val:0x3ff679c593af2a8c;
op3val:0x3fe75ae99afcc2bb; valaddr_reg:x3; val_offset:2286*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2286*FLEN/8, x4, x1, x2)

inst_763:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x0a045fc492db6 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x679c593af2a8c and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x75ae99afcc2bb and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe0a045fc492db6; op2val:0x3ff679c593af2a8c;
op3val:0x3fe75ae99afcc2bb; valaddr_reg:x3; val_offset:2289*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2289*FLEN/8, x4, x1, x2)

inst_764:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x0a045fc492db6 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x679c593af2a8c and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x75ae99afcc2bb and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe0a045fc492db6; op2val:0x3ff679c593af2a8c;
op3val:0x3fe75ae99afcc2bb; valaddr_reg:x3; val_offset:2292*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2292*FLEN/8, x4, x1, x2)

inst_765:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x0afcf02082b5b and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xa5202e140c2e5 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xb7338691d6a1e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe0afcf02082b5b; op2val:0x3ffa5202e140c2e5;
op3val:0x3feb7338691d6a1e; valaddr_reg:x3; val_offset:2295*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2295*FLEN/8, x4, x1, x2)

inst_766:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x0afcf02082b5b and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xa5202e140c2e5 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xb7338691d6a1e and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe0afcf02082b5b; op2val:0x3ffa5202e140c2e5;
op3val:0x3feb7338691d6a1e; valaddr_reg:x3; val_offset:2298*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2298*FLEN/8, x4, x1, x2)

inst_767:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x0afcf02082b5b and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xa5202e140c2e5 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xb7338691d6a1e and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe0afcf02082b5b; op2val:0x3ffa5202e140c2e5;
op3val:0x3feb7338691d6a1e; valaddr_reg:x3; val_offset:2301*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2301*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_7)

inst_768:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x0afcf02082b5b and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xa5202e140c2e5 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xb7338691d6a1e and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe0afcf02082b5b; op2val:0x3ffa5202e140c2e5;
op3val:0x3feb7338691d6a1e; valaddr_reg:x3; val_offset:2304*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2304*FLEN/8, x4, x1, x2)

inst_769:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x0afcf02082b5b and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xa5202e140c2e5 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xb7338691d6a1e and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe0afcf02082b5b; op2val:0x3ffa5202e140c2e5;
op3val:0x3feb7338691d6a1e; valaddr_reg:x3; val_offset:2307*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2307*FLEN/8, x4, x1, x2)

inst_770:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x0e3a41309a3d1 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xb292f6ebd7683 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xcab9e46280b2f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe0e3a41309a3d1; op2val:0x3ffb292f6ebd7683;
op3val:0x3fecab9e46280b2f; valaddr_reg:x3; val_offset:2310*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2310*FLEN/8, x4, x1, x2)

inst_771:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x0e3a41309a3d1 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xb292f6ebd7683 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xcab9e46280b2f and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe0e3a41309a3d1; op2val:0x3ffb292f6ebd7683;
op3val:0x3fecab9e46280b2f; valaddr_reg:x3; val_offset:2313*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2313*FLEN/8, x4, x1, x2)

inst_772:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x0e3a41309a3d1 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xb292f6ebd7683 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xcab9e46280b2f and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe0e3a41309a3d1; op2val:0x3ffb292f6ebd7683;
op3val:0x3fecab9e46280b2f; valaddr_reg:x3; val_offset:2316*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2316*FLEN/8, x4, x1, x2)

inst_773:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x0e3a41309a3d1 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xb292f6ebd7683 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xcab9e46280b2f and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe0e3a41309a3d1; op2val:0x3ffb292f6ebd7683;
op3val:0x3fecab9e46280b2f; valaddr_reg:x3; val_offset:2319*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2319*FLEN/8, x4, x1, x2)

inst_774:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x0e3a41309a3d1 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xb292f6ebd7683 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xcab9e46280b2f and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe0e3a41309a3d1; op2val:0x3ffb292f6ebd7683;
op3val:0x3fecab9e46280b2f; valaddr_reg:x3; val_offset:2322*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2322*FLEN/8, x4, x1, x2)

inst_775:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x0ee249ec94153 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x1cd4a8de61447 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x2d6410177bdda and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe0ee249ec94153; op2val:0x3fe1cd4a8de61447;
op3val:0x3fd2d6410177bdda; valaddr_reg:x3; val_offset:2325*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2325*FLEN/8, x4, x1, x2)

inst_776:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x0ee249ec94153 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x1cd4a8de61447 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x2d6410177bdda and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe0ee249ec94153; op2val:0x3fe1cd4a8de61447;
op3val:0x3fd2d6410177bdda; valaddr_reg:x3; val_offset:2328*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2328*FLEN/8, x4, x1, x2)

inst_777:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x0ee249ec94153 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x1cd4a8de61447 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x2d6410177bdda and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe0ee249ec94153; op2val:0x3fe1cd4a8de61447;
op3val:0x3fd2d6410177bdda; valaddr_reg:x3; val_offset:2331*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2331*FLEN/8, x4, x1, x2)

inst_778:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x0ee249ec94153 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x1cd4a8de61447 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x2d6410177bdda and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe0ee249ec94153; op2val:0x3fe1cd4a8de61447;
op3val:0x3fd2d6410177bdda; valaddr_reg:x3; val_offset:2334*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2334*FLEN/8, x4, x1, x2)

inst_779:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x0ee249ec94153 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x1cd4a8de61447 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x2d6410177bdda and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe0ee249ec94153; op2val:0x3fe1cd4a8de61447;
op3val:0x3fd2d6410177bdda; valaddr_reg:x3; val_offset:2337*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2337*FLEN/8, x4, x1, x2)

inst_780:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x0f21c0f23711a and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x31ba3f37b74ae and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x43cc785b14748 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe0f21c0f23711a; op2val:0x3fd31ba3f37b74ae;
op3val:0x3fc43cc785b14748; valaddr_reg:x3; val_offset:2340*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2340*FLEN/8, x4, x1, x2)

inst_781:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x0f21c0f23711a and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x31ba3f37b74ae and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x43cc785b14748 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe0f21c0f23711a; op2val:0x3fd31ba3f37b74ae;
op3val:0x3fc43cc785b14748; valaddr_reg:x3; val_offset:2343*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2343*FLEN/8, x4, x1, x2)

inst_782:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x0f21c0f23711a and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x31ba3f37b74ae and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x43cc785b14748 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe0f21c0f23711a; op2val:0x3fd31ba3f37b74ae;
op3val:0x3fc43cc785b14748; valaddr_reg:x3; val_offset:2346*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2346*FLEN/8, x4, x1, x2)

inst_783:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x0f21c0f23711a and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x31ba3f37b74ae and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x43cc785b14748 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe0f21c0f23711a; op2val:0x3fd31ba3f37b74ae;
op3val:0x3fc43cc785b14748; valaddr_reg:x3; val_offset:2349*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2349*FLEN/8, x4, x1, x2)

inst_784:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x0f21c0f23711a and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x31ba3f37b74ae and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x43cc785b14748 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe0f21c0f23711a; op2val:0x3fd31ba3f37b74ae;
op3val:0x3fc43cc785b14748; valaddr_reg:x3; val_offset:2352*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2352*FLEN/8, x4, x1, x2)

inst_785:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x0f3ad58234f50 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xd070fc84aa2fd and fs3 == 0 and fe3 == 0x3fc and fm3 == 0xec125843e1c54 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe0f3ad58234f50; op2val:0x3fdd070fc84aa2fd;
op3val:0x3fcec125843e1c54; valaddr_reg:x3; val_offset:2355*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2355*FLEN/8, x4, x1, x2)

inst_786:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x0f3ad58234f50 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xd070fc84aa2fd and fs3 == 0 and fe3 == 0x3fc and fm3 == 0xec125843e1c54 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe0f3ad58234f50; op2val:0x3fdd070fc84aa2fd;
op3val:0x3fcec125843e1c54; valaddr_reg:x3; val_offset:2358*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2358*FLEN/8, x4, x1, x2)

inst_787:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x0f3ad58234f50 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xd070fc84aa2fd and fs3 == 0 and fe3 == 0x3fc and fm3 == 0xec125843e1c54 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe0f3ad58234f50; op2val:0x3fdd070fc84aa2fd;
op3val:0x3fcec125843e1c54; valaddr_reg:x3; val_offset:2361*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2361*FLEN/8, x4, x1, x2)

inst_788:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x0f3ad58234f50 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xd070fc84aa2fd and fs3 == 0 and fe3 == 0x3fc and fm3 == 0xec125843e1c54 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe0f3ad58234f50; op2val:0x3fdd070fc84aa2fd;
op3val:0x3fcec125843e1c54; valaddr_reg:x3; val_offset:2364*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2364*FLEN/8, x4, x1, x2)

inst_789:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x0f3ad58234f50 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xd070fc84aa2fd and fs3 == 0 and fe3 == 0x3fc and fm3 == 0xec125843e1c54 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe0f3ad58234f50; op2val:0x3fdd070fc84aa2fd;
op3val:0x3fcec125843e1c54; valaddr_reg:x3; val_offset:2367*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2367*FLEN/8, x4, x1, x2)

inst_790:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x0fdd5d9063fad and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x1f2468c92b50d and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x30efd64d99356 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe0fdd5d9063fad; op2val:0x3ff1f2468c92b50d;
op3val:0x3fe30efd64d99356; valaddr_reg:x3; val_offset:2370*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2370*FLEN/8, x4, x1, x2)

inst_791:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x0fdd5d9063fad and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x1f2468c92b50d and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x30efd64d99356 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe0fdd5d9063fad; op2val:0x3ff1f2468c92b50d;
op3val:0x3fe30efd64d99356; valaddr_reg:x3; val_offset:2373*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2373*FLEN/8, x4, x1, x2)

inst_792:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x0fdd5d9063fad and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x1f2468c92b50d and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x30efd64d99356 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe0fdd5d9063fad; op2val:0x3ff1f2468c92b50d;
op3val:0x3fe30efd64d99356; valaddr_reg:x3; val_offset:2376*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2376*FLEN/8, x4, x1, x2)

inst_793:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x0fdd5d9063fad and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x1f2468c92b50d and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x30efd64d99356 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe0fdd5d9063fad; op2val:0x3ff1f2468c92b50d;
op3val:0x3fe30efd64d99356; valaddr_reg:x3; val_offset:2379*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2379*FLEN/8, x4, x1, x2)

inst_794:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x0fdd5d9063fad and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x1f2468c92b50d and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x30efd64d99356 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe0fdd5d9063fad; op2val:0x3ff1f2468c92b50d;
op3val:0x3fe30efd64d99356; valaddr_reg:x3; val_offset:2382*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2382*FLEN/8, x4, x1, x2)

inst_795:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x13173e11a86e0 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x7ec13e172c394 and fs3 == 0 and fe3 == 0x3fb and fm3 == 0x9b4c55dcac488 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe13173e11a86e0; op2val:0x3fc7ec13e172c394;
op3val:0x3fb9b4c55dcac488; valaddr_reg:x3; val_offset:2385*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2385*FLEN/8, x4, x1, x2)

inst_796:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x13173e11a86e0 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x7ec13e172c394 and fs3 == 0 and fe3 == 0x3fb and fm3 == 0x9b4c55dcac488 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe13173e11a86e0; op2val:0x3fc7ec13e172c394;
op3val:0x3fb9b4c55dcac488; valaddr_reg:x3; val_offset:2388*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2388*FLEN/8, x4, x1, x2)

inst_797:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x13173e11a86e0 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x7ec13e172c394 and fs3 == 0 and fe3 == 0x3fb and fm3 == 0x9b4c55dcac488 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe13173e11a86e0; op2val:0x3fc7ec13e172c394;
op3val:0x3fb9b4c55dcac488; valaddr_reg:x3; val_offset:2391*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2391*FLEN/8, x4, x1, x2)

inst_798:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x13173e11a86e0 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x7ec13e172c394 and fs3 == 0 and fe3 == 0x3fb and fm3 == 0x9b4c55dcac488 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe13173e11a86e0; op2val:0x3fc7ec13e172c394;
op3val:0x3fb9b4c55dcac488; valaddr_reg:x3; val_offset:2394*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2394*FLEN/8, x4, x1, x2)

inst_799:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x13173e11a86e0 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x7ec13e172c394 and fs3 == 0 and fe3 == 0x3fb and fm3 == 0x9b4c55dcac488 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe13173e11a86e0; op2val:0x3fc7ec13e172c394;
op3val:0x3fb9b4c55dcac488; valaddr_reg:x3; val_offset:2397*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2397*FLEN/8, x4, x1, x2)

inst_800:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x16a89d6ba44db and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xb98ac0da36867 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xe09f7fff47111 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe16a89d6ba44db; op2val:0x3ffb98ac0da36867;
op3val:0x3fee09f7fff47111; valaddr_reg:x3; val_offset:2400*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2400*FLEN/8, x4, x1, x2)

inst_801:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x16a89d6ba44db and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xb98ac0da36867 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xe09f7fff47111 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe16a89d6ba44db; op2val:0x3ffb98ac0da36867;
op3val:0x3fee09f7fff47111; valaddr_reg:x3; val_offset:2403*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2403*FLEN/8, x4, x1, x2)

inst_802:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x16a89d6ba44db and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xb98ac0da36867 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xe09f7fff47111 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe16a89d6ba44db; op2val:0x3ffb98ac0da36867;
op3val:0x3fee09f7fff47111; valaddr_reg:x3; val_offset:2406*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2406*FLEN/8, x4, x1, x2)

inst_803:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x16a89d6ba44db and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xb98ac0da36867 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xe09f7fff47111 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe16a89d6ba44db; op2val:0x3ffb98ac0da36867;
op3val:0x3fee09f7fff47111; valaddr_reg:x3; val_offset:2409*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2409*FLEN/8, x4, x1, x2)

inst_804:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x16a89d6ba44db and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xb98ac0da36867 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xe09f7fff47111 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe16a89d6ba44db; op2val:0x3ffb98ac0da36867;
op3val:0x3fee09f7fff47111; valaddr_reg:x3; val_offset:2412*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2412*FLEN/8, x4, x1, x2)

inst_805:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x16c0f201d8250 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x711042f6528dc and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x91ddd1cdbe5c0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe16c0f201d8250; op2val:0x3fd711042f6528dc;
op3val:0x3fc91ddd1cdbe5c0; valaddr_reg:x3; val_offset:2415*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2415*FLEN/8, x4, x1, x2)

inst_806:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x16c0f201d8250 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x711042f6528dc and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x91ddd1cdbe5c0 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe16c0f201d8250; op2val:0x3fd711042f6528dc;
op3val:0x3fc91ddd1cdbe5c0; valaddr_reg:x3; val_offset:2418*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2418*FLEN/8, x4, x1, x2)

inst_807:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x16c0f201d8250 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x711042f6528dc and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x91ddd1cdbe5c0 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe16c0f201d8250; op2val:0x3fd711042f6528dc;
op3val:0x3fc91ddd1cdbe5c0; valaddr_reg:x3; val_offset:2421*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2421*FLEN/8, x4, x1, x2)

inst_808:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x16c0f201d8250 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x711042f6528dc and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x91ddd1cdbe5c0 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe16c0f201d8250; op2val:0x3fd711042f6528dc;
op3val:0x3fc91ddd1cdbe5c0; valaddr_reg:x3; val_offset:2424*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2424*FLEN/8, x4, x1, x2)

inst_809:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x16c0f201d8250 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x711042f6528dc and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x91ddd1cdbe5c0 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe16c0f201d8250; op2val:0x3fd711042f6528dc;
op3val:0x3fc91ddd1cdbe5c0; valaddr_reg:x3; val_offset:2427*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2427*FLEN/8, x4, x1, x2)

inst_810:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x1816ca1c6eb32 and fs2 == 0 and fe2 == 0x3fa and fm2 == 0x195bd899914d1 and fs3 == 0 and fe3 == 0x3f9 and fm3 == 0x33d580ee4cbe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe1816ca1c6eb32; op2val:0x3fa195bd899914d1;
op3val:0x3f933d580ee4cbe0; valaddr_reg:x3; val_offset:2430*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2430*FLEN/8, x4, x1, x2)

inst_811:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x1816ca1c6eb32 and fs2 == 0 and fe2 == 0x3fa and fm2 == 0x195bd899914d1 and fs3 == 0 and fe3 == 0x3f9 and fm3 == 0x33d580ee4cbe0 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe1816ca1c6eb32; op2val:0x3fa195bd899914d1;
op3val:0x3f933d580ee4cbe0; valaddr_reg:x3; val_offset:2433*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2433*FLEN/8, x4, x1, x2)

inst_812:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x1816ca1c6eb32 and fs2 == 0 and fe2 == 0x3fa and fm2 == 0x195bd899914d1 and fs3 == 0 and fe3 == 0x3f9 and fm3 == 0x33d580ee4cbe0 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe1816ca1c6eb32; op2val:0x3fa195bd899914d1;
op3val:0x3f933d580ee4cbe0; valaddr_reg:x3; val_offset:2436*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2436*FLEN/8, x4, x1, x2)

inst_813:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x1816ca1c6eb32 and fs2 == 0 and fe2 == 0x3fa and fm2 == 0x195bd899914d1 and fs3 == 0 and fe3 == 0x3f9 and fm3 == 0x33d580ee4cbe0 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe1816ca1c6eb32; op2val:0x3fa195bd899914d1;
op3val:0x3f933d580ee4cbe0; valaddr_reg:x3; val_offset:2439*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2439*FLEN/8, x4, x1, x2)

inst_814:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x1816ca1c6eb32 and fs2 == 0 and fe2 == 0x3fa and fm2 == 0x195bd899914d1 and fs3 == 0 and fe3 == 0x3f9 and fm3 == 0x33d580ee4cbe0 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe1816ca1c6eb32; op2val:0x3fa195bd899914d1;
op3val:0x3f933d580ee4cbe0; valaddr_reg:x3; val_offset:2442*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2442*FLEN/8, x4, x1, x2)

inst_815:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x18d0a26aea73f and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x0e5b0ff4e67cc and fs3 == 0 and fe3 == 0x3fb and fm3 == 0x288feef75c7b0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe18d0a26aea73f; op2val:0x3fc0e5b0ff4e67cc;
op3val:0x3fb288feef75c7b0; valaddr_reg:x3; val_offset:2445*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2445*FLEN/8, x4, x1, x2)

inst_816:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x18d0a26aea73f and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x0e5b0ff4e67cc and fs3 == 0 and fe3 == 0x3fb and fm3 == 0x288feef75c7b0 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe18d0a26aea73f; op2val:0x3fc0e5b0ff4e67cc;
op3val:0x3fb288feef75c7b0; valaddr_reg:x3; val_offset:2448*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2448*FLEN/8, x4, x1, x2)

inst_817:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x18d0a26aea73f and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x0e5b0ff4e67cc and fs3 == 0 and fe3 == 0x3fb and fm3 == 0x288feef75c7b0 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe18d0a26aea73f; op2val:0x3fc0e5b0ff4e67cc;
op3val:0x3fb288feef75c7b0; valaddr_reg:x3; val_offset:2451*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2451*FLEN/8, x4, x1, x2)

inst_818:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x18d0a26aea73f and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x0e5b0ff4e67cc and fs3 == 0 and fe3 == 0x3fb and fm3 == 0x288feef75c7b0 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe18d0a26aea73f; op2val:0x3fc0e5b0ff4e67cc;
op3val:0x3fb288feef75c7b0; valaddr_reg:x3; val_offset:2454*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2454*FLEN/8, x4, x1, x2)

inst_819:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x18d0a26aea73f and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x0e5b0ff4e67cc and fs3 == 0 and fe3 == 0x3fb and fm3 == 0x288feef75c7b0 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe18d0a26aea73f; op2val:0x3fc0e5b0ff4e67cc;
op3val:0x3fb288feef75c7b0; valaddr_reg:x3; val_offset:2457*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2457*FLEN/8, x4, x1, x2)

inst_820:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x19edd78243138 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xb65ccbdc1a211 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xe2c320b450a38 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe19edd78243138; op2val:0x3ffb65ccbdc1a211;
op3val:0x3fee2c320b450a38; valaddr_reg:x3; val_offset:2460*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2460*FLEN/8, x4, x1, x2)

inst_821:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x19edd78243138 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xb65ccbdc1a211 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xe2c320b450a38 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe19edd78243138; op2val:0x3ffb65ccbdc1a211;
op3val:0x3fee2c320b450a38; valaddr_reg:x3; val_offset:2463*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2463*FLEN/8, x4, x1, x2)

inst_822:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x19edd78243138 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xb65ccbdc1a211 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xe2c320b450a38 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe19edd78243138; op2val:0x3ffb65ccbdc1a211;
op3val:0x3fee2c320b450a38; valaddr_reg:x3; val_offset:2466*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2466*FLEN/8, x4, x1, x2)

inst_823:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x19edd78243138 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xb65ccbdc1a211 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xe2c320b450a38 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe19edd78243138; op2val:0x3ffb65ccbdc1a211;
op3val:0x3fee2c320b450a38; valaddr_reg:x3; val_offset:2469*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2469*FLEN/8, x4, x1, x2)

inst_824:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x19edd78243138 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xb65ccbdc1a211 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xe2c320b450a38 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe19edd78243138; op2val:0x3ffb65ccbdc1a211;
op3val:0x3fee2c320b450a38; valaddr_reg:x3; val_offset:2472*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2472*FLEN/8, x4, x1, x2)

inst_825:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x1b095dcdd4728 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x3891cc67599e2 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x59949c9eb71ac and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe1b095dcdd4728; op2val:0x3fd3891cc67599e2;
op3val:0x3fc59949c9eb71ac; valaddr_reg:x3; val_offset:2475*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2475*FLEN/8, x4, x1, x2)

inst_826:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x1b095dcdd4728 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x3891cc67599e2 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x59949c9eb71ac and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe1b095dcdd4728; op2val:0x3fd3891cc67599e2;
op3val:0x3fc59949c9eb71ac; valaddr_reg:x3; val_offset:2478*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2478*FLEN/8, x4, x1, x2)

inst_827:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x1b095dcdd4728 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x3891cc67599e2 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x59949c9eb71ac and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe1b095dcdd4728; op2val:0x3fd3891cc67599e2;
op3val:0x3fc59949c9eb71ac; valaddr_reg:x3; val_offset:2481*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2481*FLEN/8, x4, x1, x2)

inst_828:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x1b095dcdd4728 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x3891cc67599e2 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x59949c9eb71ac and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe1b095dcdd4728; op2val:0x3fd3891cc67599e2;
op3val:0x3fc59949c9eb71ac; valaddr_reg:x3; val_offset:2484*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2484*FLEN/8, x4, x1, x2)

inst_829:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x1b095dcdd4728 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x3891cc67599e2 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x59949c9eb71ac and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe1b095dcdd4728; op2val:0x3fd3891cc67599e2;
op3val:0x3fc59949c9eb71ac; valaddr_reg:x3; val_offset:2487*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2487*FLEN/8, x4, x1, x2)

inst_830:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x1bc4be6818665 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xc824f5560b86e and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xf99f6ac6dd324 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe1bc4be6818665; op2val:0x3ffc824f5560b86e;
op3val:0x3fef99f6ac6dd324; valaddr_reg:x3; val_offset:2490*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2490*FLEN/8, x4, x1, x2)

inst_831:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x1bc4be6818665 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xc824f5560b86e and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xf99f6ac6dd324 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe1bc4be6818665; op2val:0x3ffc824f5560b86e;
op3val:0x3fef99f6ac6dd324; valaddr_reg:x3; val_offset:2493*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2493*FLEN/8, x4, x1, x2)

inst_832:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x1bc4be6818665 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xc824f5560b86e and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xf99f6ac6dd324 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe1bc4be6818665; op2val:0x3ffc824f5560b86e;
op3val:0x3fef99f6ac6dd324; valaddr_reg:x3; val_offset:2496*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2496*FLEN/8, x4, x1, x2)

inst_833:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x1bc4be6818665 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xc824f5560b86e and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xf99f6ac6dd324 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe1bc4be6818665; op2val:0x3ffc824f5560b86e;
op3val:0x3fef99f6ac6dd324; valaddr_reg:x3; val_offset:2499*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2499*FLEN/8, x4, x1, x2)

inst_834:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x1bc4be6818665 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xc824f5560b86e and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xf99f6ac6dd324 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe1bc4be6818665; op2val:0x3ffc824f5560b86e;
op3val:0x3fef99f6ac6dd324; valaddr_reg:x3; val_offset:2502*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2502*FLEN/8, x4, x1, x2)

inst_835:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x1cfe49f127d25 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x6ef1eea9c3ec3 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x9880e2cbc9aed and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe1cfe49f127d25; op2val:0x3ff6ef1eea9c3ec3;
op3val:0x3fe9880e2cbc9aed; valaddr_reg:x3; val_offset:2505*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2505*FLEN/8, x4, x1, x2)

inst_836:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x1cfe49f127d25 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x6ef1eea9c3ec3 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x9880e2cbc9aed and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe1cfe49f127d25; op2val:0x3ff6ef1eea9c3ec3;
op3val:0x3fe9880e2cbc9aed; valaddr_reg:x3; val_offset:2508*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2508*FLEN/8, x4, x1, x2)

inst_837:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x1cfe49f127d25 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x6ef1eea9c3ec3 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x9880e2cbc9aed and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe1cfe49f127d25; op2val:0x3ff6ef1eea9c3ec3;
op3val:0x3fe9880e2cbc9aed; valaddr_reg:x3; val_offset:2511*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2511*FLEN/8, x4, x1, x2)

inst_838:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x1cfe49f127d25 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x6ef1eea9c3ec3 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x9880e2cbc9aed and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe1cfe49f127d25; op2val:0x3ff6ef1eea9c3ec3;
op3val:0x3fe9880e2cbc9aed; valaddr_reg:x3; val_offset:2514*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2514*FLEN/8, x4, x1, x2)

inst_839:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x1cfe49f127d25 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x6ef1eea9c3ec3 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x9880e2cbc9aed and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe1cfe49f127d25; op2val:0x3ff6ef1eea9c3ec3;
op3val:0x3fe9880e2cbc9aed; valaddr_reg:x3; val_offset:2517*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2517*FLEN/8, x4, x1, x2)

inst_840:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x1fc9952ad2d28 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x532caaade6494 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x7d4a270cb3b2b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe1fc9952ad2d28; op2val:0x3ff532caaade6494;
op3val:0x3fe7d4a270cb3b2b; valaddr_reg:x3; val_offset:2520*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2520*FLEN/8, x4, x1, x2)

inst_841:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x1fc9952ad2d28 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x532caaade6494 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x7d4a270cb3b2b and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe1fc9952ad2d28; op2val:0x3ff532caaade6494;
op3val:0x3fe7d4a270cb3b2b; valaddr_reg:x3; val_offset:2523*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2523*FLEN/8, x4, x1, x2)

inst_842:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x1fc9952ad2d28 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x532caaade6494 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x7d4a270cb3b2b and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe1fc9952ad2d28; op2val:0x3ff532caaade6494;
op3val:0x3fe7d4a270cb3b2b; valaddr_reg:x3; val_offset:2526*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2526*FLEN/8, x4, x1, x2)

inst_843:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x1fc9952ad2d28 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x532caaade6494 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x7d4a270cb3b2b and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe1fc9952ad2d28; op2val:0x3ff532caaade6494;
op3val:0x3fe7d4a270cb3b2b; valaddr_reg:x3; val_offset:2529*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2529*FLEN/8, x4, x1, x2)

inst_844:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x1fc9952ad2d28 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x532caaade6494 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x7d4a270cb3b2b and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe1fc9952ad2d28; op2val:0x3ff532caaade6494;
op3val:0x3fe7d4a270cb3b2b; valaddr_reg:x3; val_offset:2532*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2532*FLEN/8, x4, x1, x2)

inst_845:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x23dfd77c83f6f and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x7522c92a43ba1 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xa96cce0dfaf22 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe23dfd77c83f6f; op2val:0x3fe7522c92a43ba1;
op3val:0x3fda96cce0dfaf22; valaddr_reg:x3; val_offset:2535*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2535*FLEN/8, x4, x1, x2)

inst_846:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x23dfd77c83f6f and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x7522c92a43ba1 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xa96cce0dfaf22 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe23dfd77c83f6f; op2val:0x3fe7522c92a43ba1;
op3val:0x3fda96cce0dfaf22; valaddr_reg:x3; val_offset:2538*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2538*FLEN/8, x4, x1, x2)

inst_847:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x23dfd77c83f6f and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x7522c92a43ba1 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xa96cce0dfaf22 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe23dfd77c83f6f; op2val:0x3fe7522c92a43ba1;
op3val:0x3fda96cce0dfaf22; valaddr_reg:x3; val_offset:2541*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2541*FLEN/8, x4, x1, x2)

inst_848:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x23dfd77c83f6f and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x7522c92a43ba1 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xa96cce0dfaf22 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe23dfd77c83f6f; op2val:0x3fe7522c92a43ba1;
op3val:0x3fda96cce0dfaf22; valaddr_reg:x3; val_offset:2544*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2544*FLEN/8, x4, x1, x2)

inst_849:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x23dfd77c83f6f and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x7522c92a43ba1 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xa96cce0dfaf22 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe23dfd77c83f6f; op2val:0x3fe7522c92a43ba1;
op3val:0x3fda96cce0dfaf22; valaddr_reg:x3; val_offset:2547*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2547*FLEN/8, x4, x1, x2)

inst_850:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x25d7941010993 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x189a353af736a and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x4214cab9f4122 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe25d7941010993; op2val:0x3ff189a353af736a;
op3val:0x3fe4214cab9f4122; valaddr_reg:x3; val_offset:2550*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2550*FLEN/8, x4, x1, x2)

inst_851:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x25d7941010993 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x189a353af736a and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x4214cab9f4122 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe25d7941010993; op2val:0x3ff189a353af736a;
op3val:0x3fe4214cab9f4122; valaddr_reg:x3; val_offset:2553*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2553*FLEN/8, x4, x1, x2)

inst_852:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x25d7941010993 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x189a353af736a and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x4214cab9f4122 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe25d7941010993; op2val:0x3ff189a353af736a;
op3val:0x3fe4214cab9f4122; valaddr_reg:x3; val_offset:2556*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2556*FLEN/8, x4, x1, x2)

inst_853:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x25d7941010993 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x189a353af736a and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x4214cab9f4122 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe25d7941010993; op2val:0x3ff189a353af736a;
op3val:0x3fe4214cab9f4122; valaddr_reg:x3; val_offset:2559*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2559*FLEN/8, x4, x1, x2)

inst_854:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x25d7941010993 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x189a353af736a and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x4214cab9f4122 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe25d7941010993; op2val:0x3ff189a353af736a;
op3val:0x3fe4214cab9f4122; valaddr_reg:x3; val_offset:2562*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2562*FLEN/8, x4, x1, x2)

inst_855:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x2d7149d717096 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x6565156fc5e51 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xa4d602e8fd2fc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe2d7149d717096; op2val:0x3fe6565156fc5e51;
op3val:0x3fda4d602e8fd2fc; valaddr_reg:x3; val_offset:2565*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2565*FLEN/8, x4, x1, x2)

inst_856:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x2d7149d717096 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x6565156fc5e51 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xa4d602e8fd2fc and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe2d7149d717096; op2val:0x3fe6565156fc5e51;
op3val:0x3fda4d602e8fd2fc; valaddr_reg:x3; val_offset:2568*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2568*FLEN/8, x4, x1, x2)

inst_857:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x2d7149d717096 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x6565156fc5e51 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xa4d602e8fd2fc and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe2d7149d717096; op2val:0x3fe6565156fc5e51;
op3val:0x3fda4d602e8fd2fc; valaddr_reg:x3; val_offset:2571*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2571*FLEN/8, x4, x1, x2)

inst_858:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x2d7149d717096 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x6565156fc5e51 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xa4d602e8fd2fc and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe2d7149d717096; op2val:0x3fe6565156fc5e51;
op3val:0x3fda4d602e8fd2fc; valaddr_reg:x3; val_offset:2574*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2574*FLEN/8, x4, x1, x2)

inst_859:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x2d7149d717096 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x6565156fc5e51 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xa4d602e8fd2fc and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe2d7149d717096; op2val:0x3fe6565156fc5e51;
op3val:0x3fda4d602e8fd2fc; valaddr_reg:x3; val_offset:2577*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2577*FLEN/8, x4, x1, x2)

inst_860:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x2e8f31c3cb28c and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x8bfc13d970350 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xd400de33b3e3e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe2e8f31c3cb28c; op2val:0x3ff8bfc13d970350;
op3val:0x3fed400de33b3e3e; valaddr_reg:x3; val_offset:2580*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2580*FLEN/8, x4, x1, x2)

inst_861:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x2e8f31c3cb28c and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x8bfc13d970350 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xd400de33b3e3e and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe2e8f31c3cb28c; op2val:0x3ff8bfc13d970350;
op3val:0x3fed400de33b3e3e; valaddr_reg:x3; val_offset:2583*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2583*FLEN/8, x4, x1, x2)

inst_862:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x2e8f31c3cb28c and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x8bfc13d970350 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xd400de33b3e3e and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe2e8f31c3cb28c; op2val:0x3ff8bfc13d970350;
op3val:0x3fed400de33b3e3e; valaddr_reg:x3; val_offset:2586*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2586*FLEN/8, x4, x1, x2)

inst_863:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x2e8f31c3cb28c and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x8bfc13d970350 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xd400de33b3e3e and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe2e8f31c3cb28c; op2val:0x3ff8bfc13d970350;
op3val:0x3fed400de33b3e3e; valaddr_reg:x3; val_offset:2589*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2589*FLEN/8, x4, x1, x2)

inst_864:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x2e8f31c3cb28c and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x8bfc13d970350 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xd400de33b3e3e and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe2e8f31c3cb28c; op2val:0x3ff8bfc13d970350;
op3val:0x3fed400de33b3e3e; valaddr_reg:x3; val_offset:2592*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2592*FLEN/8, x4, x1, x2)

inst_865:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x34147001995c5 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xb3a8f50c5ad6d and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x06250751530e8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe34147001995c5; op2val:0x3feb3a8f50c5ad6d;
op3val:0x3fe06250751530e8; valaddr_reg:x3; val_offset:2595*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2595*FLEN/8, x4, x1, x2)

inst_866:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x34147001995c5 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xb3a8f50c5ad6d and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x06250751530e8 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe34147001995c5; op2val:0x3feb3a8f50c5ad6d;
op3val:0x3fe06250751530e8; valaddr_reg:x3; val_offset:2598*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2598*FLEN/8, x4, x1, x2)

inst_867:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x34147001995c5 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xb3a8f50c5ad6d and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x06250751530e8 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe34147001995c5; op2val:0x3feb3a8f50c5ad6d;
op3val:0x3fe06250751530e8; valaddr_reg:x3; val_offset:2601*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2601*FLEN/8, x4, x1, x2)

inst_868:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x34147001995c5 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xb3a8f50c5ad6d and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x06250751530e8 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe34147001995c5; op2val:0x3feb3a8f50c5ad6d;
op3val:0x3fe06250751530e8; valaddr_reg:x3; val_offset:2604*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2604*FLEN/8, x4, x1, x2)

inst_869:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x34147001995c5 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xb3a8f50c5ad6d and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x06250751530e8 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe34147001995c5; op2val:0x3feb3a8f50c5ad6d;
op3val:0x3fe06250751530e8; valaddr_reg:x3; val_offset:2607*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2607*FLEN/8, x4, x1, x2)

inst_870:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x34796909eda5c and fs2 == 0 and fe2 == 0x3f7 and fm2 == 0x0db4892c3492a and fs3 == 0 and fe3 == 0x3f6 and fm3 == 0x44fd1e0787200 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe34796909eda5c; op2val:0x3f70db4892c3492a;
op3val:0x3f644fd1e0787200; valaddr_reg:x3; val_offset:2610*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2610*FLEN/8, x4, x1, x2)

inst_871:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x34796909eda5c and fs2 == 0 and fe2 == 0x3f7 and fm2 == 0x0db4892c3492a and fs3 == 0 and fe3 == 0x3f6 and fm3 == 0x44fd1e0787200 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe34796909eda5c; op2val:0x3f70db4892c3492a;
op3val:0x3f644fd1e0787200; valaddr_reg:x3; val_offset:2613*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2613*FLEN/8, x4, x1, x2)

inst_872:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x34796909eda5c and fs2 == 0 and fe2 == 0x3f7 and fm2 == 0x0db4892c3492a and fs3 == 0 and fe3 == 0x3f6 and fm3 == 0x44fd1e0787200 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe34796909eda5c; op2val:0x3f70db4892c3492a;
op3val:0x3f644fd1e0787200; valaddr_reg:x3; val_offset:2616*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2616*FLEN/8, x4, x1, x2)

inst_873:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x34796909eda5c and fs2 == 0 and fe2 == 0x3f7 and fm2 == 0x0db4892c3492a and fs3 == 0 and fe3 == 0x3f6 and fm3 == 0x44fd1e0787200 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe34796909eda5c; op2val:0x3f70db4892c3492a;
op3val:0x3f644fd1e0787200; valaddr_reg:x3; val_offset:2619*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2619*FLEN/8, x4, x1, x2)

inst_874:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x34796909eda5c and fs2 == 0 and fe2 == 0x3f7 and fm2 == 0x0db4892c3492a and fs3 == 0 and fe3 == 0x3f6 and fm3 == 0x44fd1e0787200 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe34796909eda5c; op2val:0x3f70db4892c3492a;
op3val:0x3f644fd1e0787200; valaddr_reg:x3; val_offset:2622*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2622*FLEN/8, x4, x1, x2)

inst_875:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x34f6e5011964f and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x66e23421677c8 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xb12245202bb8e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe34f6e5011964f; op2val:0x3fe66e23421677c8;
op3val:0x3fdb12245202bb8e; valaddr_reg:x3; val_offset:2625*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2625*FLEN/8, x4, x1, x2)

inst_876:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x34f6e5011964f and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x66e23421677c8 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xb12245202bb8e and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe34f6e5011964f; op2val:0x3fe66e23421677c8;
op3val:0x3fdb12245202bb8e; valaddr_reg:x3; val_offset:2628*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2628*FLEN/8, x4, x1, x2)

inst_877:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x34f6e5011964f and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x66e23421677c8 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xb12245202bb8e and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe34f6e5011964f; op2val:0x3fe66e23421677c8;
op3val:0x3fdb12245202bb8e; valaddr_reg:x3; val_offset:2631*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2631*FLEN/8, x4, x1, x2)

inst_878:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x34f6e5011964f and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x66e23421677c8 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xb12245202bb8e and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe34f6e5011964f; op2val:0x3fe66e23421677c8;
op3val:0x3fdb12245202bb8e; valaddr_reg:x3; val_offset:2634*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2634*FLEN/8, x4, x1, x2)

inst_879:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x34f6e5011964f and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x66e23421677c8 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xb12245202bb8e and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe34f6e5011964f; op2val:0x3fe66e23421677c8;
op3val:0x3fdb12245202bb8e; valaddr_reg:x3; val_offset:2637*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2637*FLEN/8, x4, x1, x2)

inst_880:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x392a09262d18e and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x54846121f9fbd and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xa08dc4a5e944e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe392a09262d18e; op2val:0x3fe54846121f9fbd;
op3val:0x3fda08dc4a5e944e; valaddr_reg:x3; val_offset:2640*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2640*FLEN/8, x4, x1, x2)

inst_881:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x392a09262d18e and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x54846121f9fbd and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xa08dc4a5e944e and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe392a09262d18e; op2val:0x3fe54846121f9fbd;
op3val:0x3fda08dc4a5e944e; valaddr_reg:x3; val_offset:2643*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2643*FLEN/8, x4, x1, x2)

inst_882:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x392a09262d18e and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x54846121f9fbd and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xa08dc4a5e944e and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe392a09262d18e; op2val:0x3fe54846121f9fbd;
op3val:0x3fda08dc4a5e944e; valaddr_reg:x3; val_offset:2646*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2646*FLEN/8, x4, x1, x2)

inst_883:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x392a09262d18e and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x54846121f9fbd and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xa08dc4a5e944e and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe392a09262d18e; op2val:0x3fe54846121f9fbd;
op3val:0x3fda08dc4a5e944e; valaddr_reg:x3; val_offset:2649*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2649*FLEN/8, x4, x1, x2)

inst_884:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x392a09262d18e and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x54846121f9fbd and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xa08dc4a5e944e and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe392a09262d18e; op2val:0x3fe54846121f9fbd;
op3val:0x3fda08dc4a5e944e; valaddr_reg:x3; val_offset:2652*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2652*FLEN/8, x4, x1, x2)

inst_885:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x392f888d033e8 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x4526452792ea5 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x8dc82a0383d47 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe392f888d033e8; op2val:0x3ff4526452792ea5;
op3val:0x3fe8dc82a0383d47; valaddr_reg:x3; val_offset:2655*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2655*FLEN/8, x4, x1, x2)

inst_886:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x392f888d033e8 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x4526452792ea5 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x8dc82a0383d47 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe392f888d033e8; op2val:0x3ff4526452792ea5;
op3val:0x3fe8dc82a0383d47; valaddr_reg:x3; val_offset:2658*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2658*FLEN/8, x4, x1, x2)

inst_887:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x392f888d033e8 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x4526452792ea5 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x8dc82a0383d47 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe392f888d033e8; op2val:0x3ff4526452792ea5;
op3val:0x3fe8dc82a0383d47; valaddr_reg:x3; val_offset:2661*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2661*FLEN/8, x4, x1, x2)

inst_888:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x392f888d033e8 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x4526452792ea5 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x8dc82a0383d47 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe392f888d033e8; op2val:0x3ff4526452792ea5;
op3val:0x3fe8dc82a0383d47; valaddr_reg:x3; val_offset:2664*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2664*FLEN/8, x4, x1, x2)

inst_889:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x392f888d033e8 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x4526452792ea5 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x8dc82a0383d47 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe392f888d033e8; op2val:0x3ff4526452792ea5;
op3val:0x3fe8dc82a0383d47; valaddr_reg:x3; val_offset:2667*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2667*FLEN/8, x4, x1, x2)

inst_890:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x3b08c3fb3f140 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x86a62184a7c31 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xe0bbcb7f373e9 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe3b08c3fb3f140; op2val:0x3ff86a62184a7c31;
op3val:0x3fee0bbcb7f373e9; valaddr_reg:x3; val_offset:2670*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2670*FLEN/8, x4, x1, x2)

inst_891:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x3b08c3fb3f140 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x86a62184a7c31 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xe0bbcb7f373e9 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe3b08c3fb3f140; op2val:0x3ff86a62184a7c31;
op3val:0x3fee0bbcb7f373e9; valaddr_reg:x3; val_offset:2673*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2673*FLEN/8, x4, x1, x2)

inst_892:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x3b08c3fb3f140 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x86a62184a7c31 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xe0bbcb7f373e9 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe3b08c3fb3f140; op2val:0x3ff86a62184a7c31;
op3val:0x3fee0bbcb7f373e9; valaddr_reg:x3; val_offset:2676*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2676*FLEN/8, x4, x1, x2)

inst_893:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x3b08c3fb3f140 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x86a62184a7c31 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xe0bbcb7f373e9 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe3b08c3fb3f140; op2val:0x3ff86a62184a7c31;
op3val:0x3fee0bbcb7f373e9; valaddr_reg:x3; val_offset:2679*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2679*FLEN/8, x4, x1, x2)

inst_894:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x3b08c3fb3f140 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x86a62184a7c31 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xe0bbcb7f373e9 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe3b08c3fb3f140; op2val:0x3ff86a62184a7c31;
op3val:0x3fee0bbcb7f373e9; valaddr_reg:x3; val_offset:2682*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2682*FLEN/8, x4, x1, x2)

inst_895:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x3b5b05443f732 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x38b115e720279 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x81311354ffb0a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe3b5b05443f732; op2val:0x3fe38b115e720279;
op3val:0x3fd81311354ffb0a; valaddr_reg:x3; val_offset:2685*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2685*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_8)

inst_896:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x3b5b05443f732 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x38b115e720279 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x81311354ffb0a and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe3b5b05443f732; op2val:0x3fe38b115e720279;
op3val:0x3fd81311354ffb0a; valaddr_reg:x3; val_offset:2688*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2688*FLEN/8, x4, x1, x2)

inst_897:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x3b5b05443f732 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x38b115e720279 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x81311354ffb0a and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe3b5b05443f732; op2val:0x3fe38b115e720279;
op3val:0x3fd81311354ffb0a; valaddr_reg:x3; val_offset:2691*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2691*FLEN/8, x4, x1, x2)

inst_898:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x3b5b05443f732 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x38b115e720279 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x81311354ffb0a and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe3b5b05443f732; op2val:0x3fe38b115e720279;
op3val:0x3fd81311354ffb0a; valaddr_reg:x3; val_offset:2694*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2694*FLEN/8, x4, x1, x2)

inst_899:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x3b5b05443f732 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x38b115e720279 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x81311354ffb0a and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe3b5b05443f732; op2val:0x3fe38b115e720279;
op3val:0x3fd81311354ffb0a; valaddr_reg:x3; val_offset:2697*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2697*FLEN/8, x4, x1, x2)

inst_900:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x3b70e8812730f and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x518d6577aadd7 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x9feddc49137ae and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe3b70e8812730f; op2val:0x3fe518d6577aadd7;
op3val:0x3fd9feddc49137ae; valaddr_reg:x3; val_offset:2700*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2700*FLEN/8, x4, x1, x2)

inst_901:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x3b70e8812730f and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x518d6577aadd7 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x9feddc49137ae and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe3b70e8812730f; op2val:0x3fe518d6577aadd7;
op3val:0x3fd9feddc49137ae; valaddr_reg:x3; val_offset:2703*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2703*FLEN/8, x4, x1, x2)

inst_902:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x3b70e8812730f and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x518d6577aadd7 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x9feddc49137ae and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe3b70e8812730f; op2val:0x3fe518d6577aadd7;
op3val:0x3fd9feddc49137ae; valaddr_reg:x3; val_offset:2706*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2706*FLEN/8, x4, x1, x2)

inst_903:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x3b70e8812730f and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x518d6577aadd7 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x9feddc49137ae and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe3b70e8812730f; op2val:0x3fe518d6577aadd7;
op3val:0x3fd9feddc49137ae; valaddr_reg:x3; val_offset:2709*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2709*FLEN/8, x4, x1, x2)

inst_904:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x3b70e8812730f and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x518d6577aadd7 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x9feddc49137ae and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe3b70e8812730f; op2val:0x3fe518d6577aadd7;
op3val:0x3fd9feddc49137ae; valaddr_reg:x3; val_offset:2712*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2712*FLEN/8, x4, x1, x2)

inst_905:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x3ce2f25e51222 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xce7a976d35582 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x1e3ca87f617e9 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe3ce2f25e51222; op2val:0x3fece7a976d35582;
op3val:0x3fe1e3ca87f617e9; valaddr_reg:x3; val_offset:2715*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2715*FLEN/8, x4, x1, x2)

inst_906:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x3ce2f25e51222 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xce7a976d35582 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x1e3ca87f617e9 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe3ce2f25e51222; op2val:0x3fece7a976d35582;
op3val:0x3fe1e3ca87f617e9; valaddr_reg:x3; val_offset:2718*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2718*FLEN/8, x4, x1, x2)

inst_907:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x3ce2f25e51222 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xce7a976d35582 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x1e3ca87f617e9 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe3ce2f25e51222; op2val:0x3fece7a976d35582;
op3val:0x3fe1e3ca87f617e9; valaddr_reg:x3; val_offset:2721*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2721*FLEN/8, x4, x1, x2)

inst_908:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x3ce2f25e51222 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xce7a976d35582 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x1e3ca87f617e9 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe3ce2f25e51222; op2val:0x3fece7a976d35582;
op3val:0x3fe1e3ca87f617e9; valaddr_reg:x3; val_offset:2724*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2724*FLEN/8, x4, x1, x2)

inst_909:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x3ce2f25e51222 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xce7a976d35582 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x1e3ca87f617e9 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe3ce2f25e51222; op2val:0x3fece7a976d35582;
op3val:0x3fe1e3ca87f617e9; valaddr_reg:x3; val_offset:2727*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2727*FLEN/8, x4, x1, x2)

inst_910:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x3d3bd725a4731 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x692b78bd43028 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xbf8f410fcd4a2 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe3d3bd725a4731; op2val:0x3ff692b78bd43028;
op3val:0x3febf8f410fcd4a2; valaddr_reg:x3; val_offset:2730*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2730*FLEN/8, x4, x1, x2)

inst_911:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x3d3bd725a4731 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x692b78bd43028 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xbf8f410fcd4a2 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe3d3bd725a4731; op2val:0x3ff692b78bd43028;
op3val:0x3febf8f410fcd4a2; valaddr_reg:x3; val_offset:2733*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2733*FLEN/8, x4, x1, x2)

inst_912:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x3d3bd725a4731 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x692b78bd43028 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xbf8f410fcd4a2 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe3d3bd725a4731; op2val:0x3ff692b78bd43028;
op3val:0x3febf8f410fcd4a2; valaddr_reg:x3; val_offset:2736*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2736*FLEN/8, x4, x1, x2)

inst_913:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x3d3bd725a4731 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x692b78bd43028 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xbf8f410fcd4a2 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe3d3bd725a4731; op2val:0x3ff692b78bd43028;
op3val:0x3febf8f410fcd4a2; valaddr_reg:x3; val_offset:2739*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2739*FLEN/8, x4, x1, x2)

inst_914:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x3d3bd725a4731 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x692b78bd43028 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xbf8f410fcd4a2 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe3d3bd725a4731; op2val:0x3ff692b78bd43028;
op3val:0x3febf8f410fcd4a2; valaddr_reg:x3; val_offset:2742*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2742*FLEN/8, x4, x1, x2)

inst_915:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x3ebb306036e19 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x1d873a7324ee7 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x637ec25764ddc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe3ebb306036e19; op2val:0x3ff1d873a7324ee7;
op3val:0x3fe637ec25764ddc; valaddr_reg:x3; val_offset:2745*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2745*FLEN/8, x4, x1, x2)

inst_916:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x3ebb306036e19 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x1d873a7324ee7 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x637ec25764ddc and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe3ebb306036e19; op2val:0x3ff1d873a7324ee7;
op3val:0x3fe637ec25764ddc; valaddr_reg:x3; val_offset:2748*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2748*FLEN/8, x4, x1, x2)

inst_917:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x3ebb306036e19 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x1d873a7324ee7 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x637ec25764ddc and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe3ebb306036e19; op2val:0x3ff1d873a7324ee7;
op3val:0x3fe637ec25764ddc; valaddr_reg:x3; val_offset:2751*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2751*FLEN/8, x4, x1, x2)

inst_918:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x3ebb306036e19 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x1d873a7324ee7 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x637ec25764ddc and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe3ebb306036e19; op2val:0x3ff1d873a7324ee7;
op3val:0x3fe637ec25764ddc; valaddr_reg:x3; val_offset:2754*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2754*FLEN/8, x4, x1, x2)

inst_919:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x3ebb306036e19 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x1d873a7324ee7 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x637ec25764ddc and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe3ebb306036e19; op2val:0x3ff1d873a7324ee7;
op3val:0x3fe637ec25764ddc; valaddr_reg:x3; val_offset:2757*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2757*FLEN/8, x4, x1, x2)

inst_920:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x3ec4cc5e3f81e and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xf6540ee126313 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x38bf49ed7e946 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe3ec4cc5e3f81e; op2val:0x3fef6540ee126313;
op3val:0x3fe38bf49ed7e946; valaddr_reg:x3; val_offset:2760*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2760*FLEN/8, x4, x1, x2)

inst_921:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x3ec4cc5e3f81e and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xf6540ee126313 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x38bf49ed7e946 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe3ec4cc5e3f81e; op2val:0x3fef6540ee126313;
op3val:0x3fe38bf49ed7e946; valaddr_reg:x3; val_offset:2763*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2763*FLEN/8, x4, x1, x2)

inst_922:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x3ec4cc5e3f81e and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xf6540ee126313 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x38bf49ed7e946 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe3ec4cc5e3f81e; op2val:0x3fef6540ee126313;
op3val:0x3fe38bf49ed7e946; valaddr_reg:x3; val_offset:2766*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2766*FLEN/8, x4, x1, x2)

inst_923:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x3ec4cc5e3f81e and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xf6540ee126313 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x38bf49ed7e946 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe3ec4cc5e3f81e; op2val:0x3fef6540ee126313;
op3val:0x3fe38bf49ed7e946; valaddr_reg:x3; val_offset:2769*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2769*FLEN/8, x4, x1, x2)

inst_924:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x3ec4cc5e3f81e and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xf6540ee126313 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x38bf49ed7e946 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe3ec4cc5e3f81e; op2val:0x3fef6540ee126313;
op3val:0x3fe38bf49ed7e946; valaddr_reg:x3; val_offset:2772*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2772*FLEN/8, x4, x1, x2)

inst_925:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x40f11fab8f2f7 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x777f661296c28 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0xd6c0ecfa656e4 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe40f11fab8f2f7; op2val:0x3fd777f661296c28;
op3val:0x3fcd6c0ecfa656e4; valaddr_reg:x3; val_offset:2775*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2775*FLEN/8, x4, x1, x2)

inst_926:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x40f11fab8f2f7 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x777f661296c28 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0xd6c0ecfa656e4 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe40f11fab8f2f7; op2val:0x3fd777f661296c28;
op3val:0x3fcd6c0ecfa656e4; valaddr_reg:x3; val_offset:2778*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2778*FLEN/8, x4, x1, x2)

inst_927:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x40f11fab8f2f7 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x777f661296c28 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0xd6c0ecfa656e4 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe40f11fab8f2f7; op2val:0x3fd777f661296c28;
op3val:0x3fcd6c0ecfa656e4; valaddr_reg:x3; val_offset:2781*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2781*FLEN/8, x4, x1, x2)

inst_928:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x40f11fab8f2f7 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x777f661296c28 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0xd6c0ecfa656e4 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe40f11fab8f2f7; op2val:0x3fd777f661296c28;
op3val:0x3fcd6c0ecfa656e4; valaddr_reg:x3; val_offset:2784*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2784*FLEN/8, x4, x1, x2)

inst_929:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x40f11fab8f2f7 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x777f661296c28 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0xd6c0ecfa656e4 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe40f11fab8f2f7; op2val:0x3fd777f661296c28;
op3val:0x3fcd6c0ecfa656e4; valaddr_reg:x3; val_offset:2787*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2787*FLEN/8, x4, x1, x2)

inst_930:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x40f21d76ea1e3 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x112c27406b2d0 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x56798c3e857c8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe40f21d76ea1e3; op2val:0x3fd112c27406b2d0;
op3val:0x3fc56798c3e857c8; valaddr_reg:x3; val_offset:2790*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2790*FLEN/8, x4, x1, x2)

inst_931:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x40f21d76ea1e3 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x112c27406b2d0 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x56798c3e857c8 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe40f21d76ea1e3; op2val:0x3fd112c27406b2d0;
op3val:0x3fc56798c3e857c8; valaddr_reg:x3; val_offset:2793*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2793*FLEN/8, x4, x1, x2)

inst_932:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x40f21d76ea1e3 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x112c27406b2d0 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x56798c3e857c8 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe40f21d76ea1e3; op2val:0x3fd112c27406b2d0;
op3val:0x3fc56798c3e857c8; valaddr_reg:x3; val_offset:2796*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2796*FLEN/8, x4, x1, x2)

inst_933:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x40f21d76ea1e3 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x112c27406b2d0 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x56798c3e857c8 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe40f21d76ea1e3; op2val:0x3fd112c27406b2d0;
op3val:0x3fc56798c3e857c8; valaddr_reg:x3; val_offset:2799*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2799*FLEN/8, x4, x1, x2)

inst_934:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x40f21d76ea1e3 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x112c27406b2d0 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x56798c3e857c8 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe40f21d76ea1e3; op2val:0x3fd112c27406b2d0;
op3val:0x3fc56798c3e857c8; valaddr_reg:x3; val_offset:2802*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2802*FLEN/8, x4, x1, x2)

inst_935:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x414b779aa5cdd and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x361ae363eb33a and fs3 == 0 and fe3 == 0x3fb and fm3 == 0x853321e2bcea8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe414b779aa5cdd; op2val:0x3fc361ae363eb33a;
op3val:0x3fb853321e2bcea8; valaddr_reg:x3; val_offset:2805*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2805*FLEN/8, x4, x1, x2)

inst_936:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x414b779aa5cdd and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x361ae363eb33a and fs3 == 0 and fe3 == 0x3fb and fm3 == 0x853321e2bcea8 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe414b779aa5cdd; op2val:0x3fc361ae363eb33a;
op3val:0x3fb853321e2bcea8; valaddr_reg:x3; val_offset:2808*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2808*FLEN/8, x4, x1, x2)

inst_937:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x414b779aa5cdd and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x361ae363eb33a and fs3 == 0 and fe3 == 0x3fb and fm3 == 0x853321e2bcea8 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe414b779aa5cdd; op2val:0x3fc361ae363eb33a;
op3val:0x3fb853321e2bcea8; valaddr_reg:x3; val_offset:2811*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2811*FLEN/8, x4, x1, x2)

inst_938:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x414b779aa5cdd and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x361ae363eb33a and fs3 == 0 and fe3 == 0x3fb and fm3 == 0x853321e2bcea8 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe414b779aa5cdd; op2val:0x3fc361ae363eb33a;
op3val:0x3fb853321e2bcea8; valaddr_reg:x3; val_offset:2814*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2814*FLEN/8, x4, x1, x2)

inst_939:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x414b779aa5cdd and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x361ae363eb33a and fs3 == 0 and fe3 == 0x3fb and fm3 == 0x853321e2bcea8 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe414b779aa5cdd; op2val:0x3fc361ae363eb33a;
op3val:0x3fb853321e2bcea8; valaddr_reg:x3; val_offset:2817*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2817*FLEN/8, x4, x1, x2)

inst_940:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x420dddda585dd and fs2 == 0 and fe2 == 0x3fc and fm2 == 0xd80318fda4da2 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x28e6bb5248300 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe420dddda585dd; op2val:0x3fcd80318fda4da2;
op3val:0x3fc28e6bb5248300; valaddr_reg:x3; val_offset:2820*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2820*FLEN/8, x4, x1, x2)

inst_941:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x420dddda585dd and fs2 == 0 and fe2 == 0x3fc and fm2 == 0xd80318fda4da2 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x28e6bb5248300 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe420dddda585dd; op2val:0x3fcd80318fda4da2;
op3val:0x3fc28e6bb5248300; valaddr_reg:x3; val_offset:2823*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2823*FLEN/8, x4, x1, x2)

inst_942:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x420dddda585dd and fs2 == 0 and fe2 == 0x3fc and fm2 == 0xd80318fda4da2 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x28e6bb5248300 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe420dddda585dd; op2val:0x3fcd80318fda4da2;
op3val:0x3fc28e6bb5248300; valaddr_reg:x3; val_offset:2826*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2826*FLEN/8, x4, x1, x2)

inst_943:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x420dddda585dd and fs2 == 0 and fe2 == 0x3fc and fm2 == 0xd80318fda4da2 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x28e6bb5248300 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe420dddda585dd; op2val:0x3fcd80318fda4da2;
op3val:0x3fc28e6bb5248300; valaddr_reg:x3; val_offset:2829*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2829*FLEN/8, x4, x1, x2)

inst_944:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x420dddda585dd and fs2 == 0 and fe2 == 0x3fc and fm2 == 0xd80318fda4da2 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x28e6bb5248300 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe420dddda585dd; op2val:0x3fcd80318fda4da2;
op3val:0x3fc28e6bb5248300; valaddr_reg:x3; val_offset:2832*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2832*FLEN/8, x4, x1, x2)

inst_945:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x424f4f7df44f4 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x817dc4f7e7cea and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xe5579f4314275 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe424f4f7df44f4; op2val:0x3ff817dc4f7e7cea;
op3val:0x3fee5579f4314275; valaddr_reg:x3; val_offset:2835*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2835*FLEN/8, x4, x1, x2)

inst_946:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x424f4f7df44f4 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x817dc4f7e7cea and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xe5579f4314275 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe424f4f7df44f4; op2val:0x3ff817dc4f7e7cea;
op3val:0x3fee5579f4314275; valaddr_reg:x3; val_offset:2838*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2838*FLEN/8, x4, x1, x2)

inst_947:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x424f4f7df44f4 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x817dc4f7e7cea and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xe5579f4314275 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe424f4f7df44f4; op2val:0x3ff817dc4f7e7cea;
op3val:0x3fee5579f4314275; valaddr_reg:x3; val_offset:2841*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2841*FLEN/8, x4, x1, x2)

inst_948:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x424f4f7df44f4 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x817dc4f7e7cea and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xe5579f4314275 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe424f4f7df44f4; op2val:0x3ff817dc4f7e7cea;
op3val:0x3fee5579f4314275; valaddr_reg:x3; val_offset:2844*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2844*FLEN/8, x4, x1, x2)

inst_949:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x424f4f7df44f4 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x817dc4f7e7cea and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xe5579f4314275 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe424f4f7df44f4; op2val:0x3ff817dc4f7e7cea;
op3val:0x3fee5579f4314275; valaddr_reg:x3; val_offset:2847*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2847*FLEN/8, x4, x1, x2)

inst_950:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x46341571b5618 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x8fa8908f35c64 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xfd41f7ce13ff5 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe46341571b5618; op2val:0x3ff8fa8908f35c64;
op3val:0x3fefd41f7ce13ff5; valaddr_reg:x3; val_offset:2850*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2850*FLEN/8, x4, x1, x2)

inst_951:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x46341571b5618 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x8fa8908f35c64 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xfd41f7ce13ff5 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe46341571b5618; op2val:0x3ff8fa8908f35c64;
op3val:0x3fefd41f7ce13ff5; valaddr_reg:x3; val_offset:2853*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2853*FLEN/8, x4, x1, x2)

inst_952:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x46341571b5618 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x8fa8908f35c64 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xfd41f7ce13ff5 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe46341571b5618; op2val:0x3ff8fa8908f35c64;
op3val:0x3fefd41f7ce13ff5; valaddr_reg:x3; val_offset:2856*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2856*FLEN/8, x4, x1, x2)

inst_953:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x46341571b5618 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x8fa8908f35c64 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xfd41f7ce13ff5 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe46341571b5618; op2val:0x3ff8fa8908f35c64;
op3val:0x3fefd41f7ce13ff5; valaddr_reg:x3; val_offset:2859*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2859*FLEN/8, x4, x1, x2)

inst_954:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x46341571b5618 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x8fa8908f35c64 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xfd41f7ce13ff5 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe46341571b5618; op2val:0x3ff8fa8908f35c64;
op3val:0x3fefd41f7ce13ff5; valaddr_reg:x3; val_offset:2862*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2862*FLEN/8, x4, x1, x2)

inst_955:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x46a673811d035 and fs2 == 0 and fe2 == 0x3fb and fm2 == 0x8b391e5a4472d and fs3 == 0 and fe3 == 0x3fa and fm3 == 0xf84bb6029ee80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe46a673811d035; op2val:0x3fb8b391e5a4472d;
op3val:0x3faf84bb6029ee80; valaddr_reg:x3; val_offset:2865*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2865*FLEN/8, x4, x1, x2)

inst_956:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x46a673811d035 and fs2 == 0 and fe2 == 0x3fb and fm2 == 0x8b391e5a4472d and fs3 == 0 and fe3 == 0x3fa and fm3 == 0xf84bb6029ee80 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe46a673811d035; op2val:0x3fb8b391e5a4472d;
op3val:0x3faf84bb6029ee80; valaddr_reg:x3; val_offset:2868*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2868*FLEN/8, x4, x1, x2)

inst_957:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x46a673811d035 and fs2 == 0 and fe2 == 0x3fb and fm2 == 0x8b391e5a4472d and fs3 == 0 and fe3 == 0x3fa and fm3 == 0xf84bb6029ee80 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe46a673811d035; op2val:0x3fb8b391e5a4472d;
op3val:0x3faf84bb6029ee80; valaddr_reg:x3; val_offset:2871*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2871*FLEN/8, x4, x1, x2)

inst_958:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x46a673811d035 and fs2 == 0 and fe2 == 0x3fb and fm2 == 0x8b391e5a4472d and fs3 == 0 and fe3 == 0x3fa and fm3 == 0xf84bb6029ee80 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe46a673811d035; op2val:0x3fb8b391e5a4472d;
op3val:0x3faf84bb6029ee80; valaddr_reg:x3; val_offset:2874*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2874*FLEN/8, x4, x1, x2)

inst_959:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x46a673811d035 and fs2 == 0 and fe2 == 0x3fb and fm2 == 0x8b391e5a4472d and fs3 == 0 and fe3 == 0x3fa and fm3 == 0xf84bb6029ee80 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe46a673811d035; op2val:0x3fb8b391e5a4472d;
op3val:0x3faf84bb6029ee80; valaddr_reg:x3; val_offset:2877*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2877*FLEN/8, x4, x1, x2)

inst_960:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x472491b3ff084 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x29f6ab87092a6 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x7cc4a55fd32a2 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe472491b3ff084; op2val:0x3ff29f6ab87092a6;
op3val:0x3fe7cc4a55fd32a2; valaddr_reg:x3; val_offset:2880*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2880*FLEN/8, x4, x1, x2)

inst_961:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x472491b3ff084 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x29f6ab87092a6 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x7cc4a55fd32a2 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe472491b3ff084; op2val:0x3ff29f6ab87092a6;
op3val:0x3fe7cc4a55fd32a2; valaddr_reg:x3; val_offset:2883*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2883*FLEN/8, x4, x1, x2)

inst_962:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x472491b3ff084 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x29f6ab87092a6 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x7cc4a55fd32a2 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe472491b3ff084; op2val:0x3ff29f6ab87092a6;
op3val:0x3fe7cc4a55fd32a2; valaddr_reg:x3; val_offset:2886*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2886*FLEN/8, x4, x1, x2)

inst_963:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x472491b3ff084 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x29f6ab87092a6 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x7cc4a55fd32a2 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe472491b3ff084; op2val:0x3ff29f6ab87092a6;
op3val:0x3fe7cc4a55fd32a2; valaddr_reg:x3; val_offset:2889*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2889*FLEN/8, x4, x1, x2)

inst_964:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x472491b3ff084 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x29f6ab87092a6 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x7cc4a55fd32a2 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe472491b3ff084; op2val:0x3ff29f6ab87092a6;
op3val:0x3fe7cc4a55fd32a2; valaddr_reg:x3; val_offset:2892*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2892*FLEN/8, x4, x1, x2)

inst_965:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x475ada5e6e7a2 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xcc2293c66a361 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x2631bbb4c9440 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe475ada5e6e7a2; op2val:0x3fdcc2293c66a361;
op3val:0x3fd2631bbb4c9440; valaddr_reg:x3; val_offset:2895*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2895*FLEN/8, x4, x1, x2)

inst_966:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x475ada5e6e7a2 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xcc2293c66a361 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x2631bbb4c9440 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe475ada5e6e7a2; op2val:0x3fdcc2293c66a361;
op3val:0x3fd2631bbb4c9440; valaddr_reg:x3; val_offset:2898*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2898*FLEN/8, x4, x1, x2)

inst_967:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x475ada5e6e7a2 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xcc2293c66a361 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x2631bbb4c9440 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe475ada5e6e7a2; op2val:0x3fdcc2293c66a361;
op3val:0x3fd2631bbb4c9440; valaddr_reg:x3; val_offset:2901*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2901*FLEN/8, x4, x1, x2)

inst_968:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x475ada5e6e7a2 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xcc2293c66a361 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x2631bbb4c9440 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe475ada5e6e7a2; op2val:0x3fdcc2293c66a361;
op3val:0x3fd2631bbb4c9440; valaddr_reg:x3; val_offset:2904*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2904*FLEN/8, x4, x1, x2)

inst_969:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x475ada5e6e7a2 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xcc2293c66a361 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x2631bbb4c9440 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe475ada5e6e7a2; op2val:0x3fdcc2293c66a361;
op3val:0x3fd2631bbb4c9440; valaddr_reg:x3; val_offset:2907*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2907*FLEN/8, x4, x1, x2)

inst_970:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x477c5460d9dfa and fs2 == 0 and fe2 == 0x3fb and fm2 == 0xaebcbe73fbc59 and fs3 == 0 and fe3 == 0x3fb and fm3 == 0x13822455a5518 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe477c5460d9dfa; op2val:0x3fbaebcbe73fbc59;
op3val:0x3fb13822455a5518; valaddr_reg:x3; val_offset:2910*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2910*FLEN/8, x4, x1, x2)

inst_971:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x477c5460d9dfa and fs2 == 0 and fe2 == 0x3fb and fm2 == 0xaebcbe73fbc59 and fs3 == 0 and fe3 == 0x3fb and fm3 == 0x13822455a5518 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe477c5460d9dfa; op2val:0x3fbaebcbe73fbc59;
op3val:0x3fb13822455a5518; valaddr_reg:x3; val_offset:2913*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2913*FLEN/8, x4, x1, x2)

inst_972:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x477c5460d9dfa and fs2 == 0 and fe2 == 0x3fb and fm2 == 0xaebcbe73fbc59 and fs3 == 0 and fe3 == 0x3fb and fm3 == 0x13822455a5518 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe477c5460d9dfa; op2val:0x3fbaebcbe73fbc59;
op3val:0x3fb13822455a5518; valaddr_reg:x3; val_offset:2916*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2916*FLEN/8, x4, x1, x2)

inst_973:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x477c5460d9dfa and fs2 == 0 and fe2 == 0x3fb and fm2 == 0xaebcbe73fbc59 and fs3 == 0 and fe3 == 0x3fb and fm3 == 0x13822455a5518 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe477c5460d9dfa; op2val:0x3fbaebcbe73fbc59;
op3val:0x3fb13822455a5518; valaddr_reg:x3; val_offset:2919*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2919*FLEN/8, x4, x1, x2)

inst_974:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x477c5460d9dfa and fs2 == 0 and fe2 == 0x3fb and fm2 == 0xaebcbe73fbc59 and fs3 == 0 and fe3 == 0x3fb and fm3 == 0x13822455a5518 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe477c5460d9dfa; op2val:0x3fbaebcbe73fbc59;
op3val:0x3fb13822455a5518; valaddr_reg:x3; val_offset:2922*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2922*FLEN/8, x4, x1, x2)

inst_975:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x4911935b1199c and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x44a66a665204e and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xa15028a99cc65 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe4911935b1199c; op2val:0x3ff44a66a665204e;
op3val:0x3fea15028a99cc65; valaddr_reg:x3; val_offset:2925*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2925*FLEN/8, x4, x1, x2)

inst_976:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x4911935b1199c and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x44a66a665204e and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xa15028a99cc65 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe4911935b1199c; op2val:0x3ff44a66a665204e;
op3val:0x3fea15028a99cc65; valaddr_reg:x3; val_offset:2928*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2928*FLEN/8, x4, x1, x2)

inst_977:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x4911935b1199c and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x44a66a665204e and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xa15028a99cc65 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe4911935b1199c; op2val:0x3ff44a66a665204e;
op3val:0x3fea15028a99cc65; valaddr_reg:x3; val_offset:2931*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2931*FLEN/8, x4, x1, x2)

inst_978:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x4911935b1199c and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x44a66a665204e and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xa15028a99cc65 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe4911935b1199c; op2val:0x3ff44a66a665204e;
op3val:0x3fea15028a99cc65; valaddr_reg:x3; val_offset:2934*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2934*FLEN/8, x4, x1, x2)

inst_979:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x4911935b1199c and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x44a66a665204e and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xa15028a99cc65 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe4911935b1199c; op2val:0x3ff44a66a665204e;
op3val:0x3fea15028a99cc65; valaddr_reg:x3; val_offset:2937*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2937*FLEN/8, x4, x1, x2)

inst_980:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x4c4484aa587ac and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x4c0d2dd31a09c and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xaef9f701b0fca and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe4c4484aa587ac; op2val:0x3ff4c0d2dd31a09c;
op3val:0x3feaef9f701b0fca; valaddr_reg:x3; val_offset:2940*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2940*FLEN/8, x4, x1, x2)

inst_981:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x4c4484aa587ac and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x4c0d2dd31a09c and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xaef9f701b0fca and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe4c4484aa587ac; op2val:0x3ff4c0d2dd31a09c;
op3val:0x3feaef9f701b0fca; valaddr_reg:x3; val_offset:2943*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2943*FLEN/8, x4, x1, x2)

inst_982:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x4c4484aa587ac and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x4c0d2dd31a09c and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xaef9f701b0fca and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe4c4484aa587ac; op2val:0x3ff4c0d2dd31a09c;
op3val:0x3feaef9f701b0fca; valaddr_reg:x3; val_offset:2946*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2946*FLEN/8, x4, x1, x2)

inst_983:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x4c4484aa587ac and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x4c0d2dd31a09c and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xaef9f701b0fca and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe4c4484aa587ac; op2val:0x3ff4c0d2dd31a09c;
op3val:0x3feaef9f701b0fca; valaddr_reg:x3; val_offset:2949*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2949*FLEN/8, x4, x1, x2)

inst_984:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x4c4484aa587ac and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x4c0d2dd31a09c and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xaef9f701b0fca and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe4c4484aa587ac; op2val:0x3ff4c0d2dd31a09c;
op3val:0x3feaef9f701b0fca; valaddr_reg:x3; val_offset:2952*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2952*FLEN/8, x4, x1, x2)

inst_985:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x5023a30759f31 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x67ad467385c22 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xd8457e35e9535 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe5023a30759f31; op2val:0x3ff67ad467385c22;
op3val:0x3fed8457e35e9535; valaddr_reg:x3; val_offset:2955*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2955*FLEN/8, x4, x1, x2)

inst_986:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x5023a30759f31 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x67ad467385c22 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xd8457e35e9535 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe5023a30759f31; op2val:0x3ff67ad467385c22;
op3val:0x3fed8457e35e9535; valaddr_reg:x3; val_offset:2958*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2958*FLEN/8, x4, x1, x2)

inst_987:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x5023a30759f31 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x67ad467385c22 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xd8457e35e9535 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe5023a30759f31; op2val:0x3ff67ad467385c22;
op3val:0x3fed8457e35e9535; valaddr_reg:x3; val_offset:2961*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2961*FLEN/8, x4, x1, x2)

inst_988:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x5023a30759f31 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x67ad467385c22 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xd8457e35e9535 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe5023a30759f31; op2val:0x3ff67ad467385c22;
op3val:0x3fed8457e35e9535; valaddr_reg:x3; val_offset:2964*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2964*FLEN/8, x4, x1, x2)

inst_989:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x5023a30759f31 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x67ad467385c22 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xd8457e35e9535 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe5023a30759f31; op2val:0x3ff67ad467385c22;
op3val:0x3fed8457e35e9535; valaddr_reg:x3; val_offset:2967*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2967*FLEN/8, x4, x1, x2)

inst_990:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x558c8cdc4de4b and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x2561abc745bef and fs3 == 0 and fe3 == 0x3fb and fm3 == 0x876c2ca844068 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe558c8cdc4de4b; op2val:0x3fc2561abc745bef;
op3val:0x3fb876c2ca844068; valaddr_reg:x3; val_offset:2970*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2970*FLEN/8, x4, x1, x2)

inst_991:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x558c8cdc4de4b and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x2561abc745bef and fs3 == 0 and fe3 == 0x3fb and fm3 == 0x876c2ca844068 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe558c8cdc4de4b; op2val:0x3fc2561abc745bef;
op3val:0x3fb876c2ca844068; valaddr_reg:x3; val_offset:2973*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2973*FLEN/8, x4, x1, x2)

inst_992:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x558c8cdc4de4b and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x2561abc745bef and fs3 == 0 and fe3 == 0x3fb and fm3 == 0x876c2ca844068 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe558c8cdc4de4b; op2val:0x3fc2561abc745bef;
op3val:0x3fb876c2ca844068; valaddr_reg:x3; val_offset:2976*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2976*FLEN/8, x4, x1, x2)

inst_993:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x558c8cdc4de4b and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x2561abc745bef and fs3 == 0 and fe3 == 0x3fb and fm3 == 0x876c2ca844068 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe558c8cdc4de4b; op2val:0x3fc2561abc745bef;
op3val:0x3fb876c2ca844068; valaddr_reg:x3; val_offset:2979*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2979*FLEN/8, x4, x1, x2)

inst_994:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x558c8cdc4de4b and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x2561abc745bef and fs3 == 0 and fe3 == 0x3fb and fm3 == 0x876c2ca844068 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe558c8cdc4de4b; op2val:0x3fc2561abc745bef;
op3val:0x3fb876c2ca844068; valaddr_reg:x3; val_offset:2982*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2982*FLEN/8, x4, x1, x2)

inst_995:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x586ea1c6e30fb and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xb98985e75f4fd and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x2907ce067b592 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe586ea1c6e30fb; op2val:0x3feb98985e75f4fd;
op3val:0x3fe2907ce067b592; valaddr_reg:x3; val_offset:2985*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 2985*FLEN/8, x4, x1, x2)

inst_996:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x586ea1c6e30fb and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xb98985e75f4fd and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x2907ce067b592 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe586ea1c6e30fb; op2val:0x3feb98985e75f4fd;
op3val:0x3fe2907ce067b592; valaddr_reg:x3; val_offset:2988*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 2988*FLEN/8, x4, x1, x2)

inst_997:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x586ea1c6e30fb and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xb98985e75f4fd and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x2907ce067b592 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe586ea1c6e30fb; op2val:0x3feb98985e75f4fd;
op3val:0x3fe2907ce067b592; valaddr_reg:x3; val_offset:2991*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 2991*FLEN/8, x4, x1, x2)

inst_998:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x586ea1c6e30fb and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xb98985e75f4fd and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x2907ce067b592 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe586ea1c6e30fb; op2val:0x3feb98985e75f4fd;
op3val:0x3fe2907ce067b592; valaddr_reg:x3; val_offset:2994*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 2994*FLEN/8, x4, x1, x2)

inst_999:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x586ea1c6e30fb and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xb98985e75f4fd and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x2907ce067b592 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe586ea1c6e30fb; op2val:0x3feb98985e75f4fd;
op3val:0x3fe2907ce067b592; valaddr_reg:x3; val_offset:2997*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 2997*FLEN/8, x4, x1, x2)

inst_1000:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x5d0c95cbaf8c5 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xf9cca3ea55126 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x58d26c82583dc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe5d0c95cbaf8c5; op2val:0x3fdf9cca3ea55126;
op3val:0x3fd58d26c82583dc; valaddr_reg:x3; val_offset:3000*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3000*FLEN/8, x4, x1, x2)

inst_1001:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x5d0c95cbaf8c5 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xf9cca3ea55126 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x58d26c82583dc and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe5d0c95cbaf8c5; op2val:0x3fdf9cca3ea55126;
op3val:0x3fd58d26c82583dc; valaddr_reg:x3; val_offset:3003*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3003*FLEN/8, x4, x1, x2)

inst_1002:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x5d0c95cbaf8c5 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xf9cca3ea55126 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x58d26c82583dc and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe5d0c95cbaf8c5; op2val:0x3fdf9cca3ea55126;
op3val:0x3fd58d26c82583dc; valaddr_reg:x3; val_offset:3006*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3006*FLEN/8, x4, x1, x2)

inst_1003:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x5d0c95cbaf8c5 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xf9cca3ea55126 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x58d26c82583dc and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe5d0c95cbaf8c5; op2val:0x3fdf9cca3ea55126;
op3val:0x3fd58d26c82583dc; valaddr_reg:x3; val_offset:3009*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3009*FLEN/8, x4, x1, x2)

inst_1004:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x5d0c95cbaf8c5 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xf9cca3ea55126 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x58d26c82583dc and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe5d0c95cbaf8c5; op2val:0x3fdf9cca3ea55126;
op3val:0x3fd58d26c82583dc; valaddr_reg:x3; val_offset:3012*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3012*FLEN/8, x4, x1, x2)

inst_1005:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x601cbfd1fbd97 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x2b33920db03cf and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x9b8882a7b13f4 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe601cbfd1fbd97; op2val:0x3ff2b33920db03cf;
op3val:0x3fe9b8882a7b13f4; valaddr_reg:x3; val_offset:3015*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3015*FLEN/8, x4, x1, x2)

inst_1006:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x601cbfd1fbd97 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x2b33920db03cf and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x9b8882a7b13f4 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe601cbfd1fbd97; op2val:0x3ff2b33920db03cf;
op3val:0x3fe9b8882a7b13f4; valaddr_reg:x3; val_offset:3018*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3018*FLEN/8, x4, x1, x2)

inst_1007:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x601cbfd1fbd97 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x2b33920db03cf and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x9b8882a7b13f4 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe601cbfd1fbd97; op2val:0x3ff2b33920db03cf;
op3val:0x3fe9b8882a7b13f4; valaddr_reg:x3; val_offset:3021*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3021*FLEN/8, x4, x1, x2)

inst_1008:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x601cbfd1fbd97 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x2b33920db03cf and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x9b8882a7b13f4 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe601cbfd1fbd97; op2val:0x3ff2b33920db03cf;
op3val:0x3fe9b8882a7b13f4; valaddr_reg:x3; val_offset:3024*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3024*FLEN/8, x4, x1, x2)

inst_1009:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x601cbfd1fbd97 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x2b33920db03cf and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x9b8882a7b13f4 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe601cbfd1fbd97; op2val:0x3ff2b33920db03cf;
op3val:0x3fe9b8882a7b13f4; valaddr_reg:x3; val_offset:3027*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3027*FLEN/8, x4, x1, x2)

inst_1010:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x63e11574b1ce4 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x51e88a0ec1c83 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xd5be9125e914b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe63e11574b1ce4; op2val:0x3ff51e88a0ec1c83;
op3val:0x3fed5be9125e914b; valaddr_reg:x3; val_offset:3030*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3030*FLEN/8, x4, x1, x2)

inst_1011:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x63e11574b1ce4 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x51e88a0ec1c83 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xd5be9125e914b and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe63e11574b1ce4; op2val:0x3ff51e88a0ec1c83;
op3val:0x3fed5be9125e914b; valaddr_reg:x3; val_offset:3033*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3033*FLEN/8, x4, x1, x2)

inst_1012:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x63e11574b1ce4 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x51e88a0ec1c83 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xd5be9125e914b and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe63e11574b1ce4; op2val:0x3ff51e88a0ec1c83;
op3val:0x3fed5be9125e914b; valaddr_reg:x3; val_offset:3036*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3036*FLEN/8, x4, x1, x2)

inst_1013:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x63e11574b1ce4 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x51e88a0ec1c83 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xd5be9125e914b and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe63e11574b1ce4; op2val:0x3ff51e88a0ec1c83;
op3val:0x3fed5be9125e914b; valaddr_reg:x3; val_offset:3039*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3039*FLEN/8, x4, x1, x2)

inst_1014:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x63e11574b1ce4 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x51e88a0ec1c83 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xd5be9125e914b and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe63e11574b1ce4; op2val:0x3ff51e88a0ec1c83;
op3val:0x3fed5be9125e914b; valaddr_reg:x3; val_offset:3042*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3042*FLEN/8, x4, x1, x2)

inst_1015:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x63e269ed73198 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x2e718544a6a4f and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xa472e92af06e8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe63e269ed73198; op2val:0x3fe2e718544a6a4f;
op3val:0x3fda472e92af06e8; valaddr_reg:x3; val_offset:3045*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3045*FLEN/8, x4, x1, x2)

inst_1016:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x63e269ed73198 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x2e718544a6a4f and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xa472e92af06e8 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe63e269ed73198; op2val:0x3fe2e718544a6a4f;
op3val:0x3fda472e92af06e8; valaddr_reg:x3; val_offset:3048*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3048*FLEN/8, x4, x1, x2)

inst_1017:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x63e269ed73198 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x2e718544a6a4f and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xa472e92af06e8 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe63e269ed73198; op2val:0x3fe2e718544a6a4f;
op3val:0x3fda472e92af06e8; valaddr_reg:x3; val_offset:3051*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3051*FLEN/8, x4, x1, x2)

inst_1018:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x63e269ed73198 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x2e718544a6a4f and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xa472e92af06e8 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe63e269ed73198; op2val:0x3fe2e718544a6a4f;
op3val:0x3fda472e92af06e8; valaddr_reg:x3; val_offset:3054*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3054*FLEN/8, x4, x1, x2)

inst_1019:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x63e269ed73198 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x2e718544a6a4f and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xa472e92af06e8 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe63e269ed73198; op2val:0x3fe2e718544a6a4f;
op3val:0x3fda472e92af06e8; valaddr_reg:x3; val_offset:3057*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3057*FLEN/8, x4, x1, x2)

inst_1020:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x69ba9c3a10fd9 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x7f5457c198ba6 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x0ed2ae7b0d875 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe69ba9c3a10fd9; op2val:0x3fe7f5457c198ba6;
op3val:0x3fe0ed2ae7b0d875; valaddr_reg:x3; val_offset:3060*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3060*FLEN/8, x4, x1, x2)

inst_1021:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x69ba9c3a10fd9 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x7f5457c198ba6 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x0ed2ae7b0d875 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe69ba9c3a10fd9; op2val:0x3fe7f5457c198ba6;
op3val:0x3fe0ed2ae7b0d875; valaddr_reg:x3; val_offset:3063*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3063*FLEN/8, x4, x1, x2)

inst_1022:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x69ba9c3a10fd9 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x7f5457c198ba6 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x0ed2ae7b0d875 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe69ba9c3a10fd9; op2val:0x3fe7f5457c198ba6;
op3val:0x3fe0ed2ae7b0d875; valaddr_reg:x3; val_offset:3066*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3066*FLEN/8, x4, x1, x2)

inst_1023:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x69ba9c3a10fd9 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x7f5457c198ba6 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x0ed2ae7b0d875 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe69ba9c3a10fd9; op2val:0x3fe7f5457c198ba6;
op3val:0x3fe0ed2ae7b0d875; valaddr_reg:x3; val_offset:3069*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3069*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_9)

inst_1024:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x69ba9c3a10fd9 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x7f5457c198ba6 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x0ed2ae7b0d875 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe69ba9c3a10fd9; op2val:0x3fe7f5457c198ba6;
op3val:0x3fe0ed2ae7b0d875; valaddr_reg:x3; val_offset:3072*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3072*FLEN/8, x4, x1, x2)

inst_1025:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x6b1d9a9c2b433 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x66bacd1160028 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xfcd45c9813ec6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe6b1d9a9c2b433; op2val:0x3ff66bacd1160028;
op3val:0x3fefcd45c9813ec6; valaddr_reg:x3; val_offset:3075*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3075*FLEN/8, x4, x1, x2)

inst_1026:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x6b1d9a9c2b433 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x66bacd1160028 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xfcd45c9813ec6 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe6b1d9a9c2b433; op2val:0x3ff66bacd1160028;
op3val:0x3fefcd45c9813ec6; valaddr_reg:x3; val_offset:3078*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3078*FLEN/8, x4, x1, x2)

inst_1027:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x6b1d9a9c2b433 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x66bacd1160028 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xfcd45c9813ec6 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe6b1d9a9c2b433; op2val:0x3ff66bacd1160028;
op3val:0x3fefcd45c9813ec6; valaddr_reg:x3; val_offset:3081*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3081*FLEN/8, x4, x1, x2)

inst_1028:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x6b1d9a9c2b433 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x66bacd1160028 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xfcd45c9813ec6 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe6b1d9a9c2b433; op2val:0x3ff66bacd1160028;
op3val:0x3fefcd45c9813ec6; valaddr_reg:x3; val_offset:3084*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3084*FLEN/8, x4, x1, x2)

inst_1029:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x6b1d9a9c2b433 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x66bacd1160028 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xfcd45c9813ec6 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe6b1d9a9c2b433; op2val:0x3ff66bacd1160028;
op3val:0x3fefcd45c9813ec6; valaddr_reg:x3; val_offset:3087*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3087*FLEN/8, x4, x1, x2)

inst_1030:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x71dace7c18228 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xf083514df46ab and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x66aad43f79c3a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe71dace7c18228; op2val:0x3fdf083514df46ab;
op3val:0x3fd66aad43f79c3a; valaddr_reg:x3; val_offset:3090*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3090*FLEN/8, x4, x1, x2)

inst_1031:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x71dace7c18228 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xf083514df46ab and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x66aad43f79c3a and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe71dace7c18228; op2val:0x3fdf083514df46ab;
op3val:0x3fd66aad43f79c3a; valaddr_reg:x3; val_offset:3093*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3093*FLEN/8, x4, x1, x2)

inst_1032:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x71dace7c18228 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xf083514df46ab and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x66aad43f79c3a and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe71dace7c18228; op2val:0x3fdf083514df46ab;
op3val:0x3fd66aad43f79c3a; valaddr_reg:x3; val_offset:3096*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3096*FLEN/8, x4, x1, x2)

inst_1033:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x71dace7c18228 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xf083514df46ab and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x66aad43f79c3a and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe71dace7c18228; op2val:0x3fdf083514df46ab;
op3val:0x3fd66aad43f79c3a; valaddr_reg:x3; val_offset:3099*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3099*FLEN/8, x4, x1, x2)

inst_1034:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x71dace7c18228 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xf083514df46ab and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x66aad43f79c3a and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe71dace7c18228; op2val:0x3fdf083514df46ab;
op3val:0x3fd66aad43f79c3a; valaddr_reg:x3; val_offset:3102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3102*FLEN/8, x4, x1, x2)

inst_1035:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x727ac5e171c1d and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x96e378bcbcfcd and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x266bf3b5d8de2 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe727ac5e171c1d; op2val:0x3fd96e378bcbcfcd;
op3val:0x3fd266bf3b5d8de2; valaddr_reg:x3; val_offset:3105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3105*FLEN/8, x4, x1, x2)

inst_1036:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x727ac5e171c1d and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x96e378bcbcfcd and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x266bf3b5d8de2 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe727ac5e171c1d; op2val:0x3fd96e378bcbcfcd;
op3val:0x3fd266bf3b5d8de2; valaddr_reg:x3; val_offset:3108*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3108*FLEN/8, x4, x1, x2)

inst_1037:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x727ac5e171c1d and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x96e378bcbcfcd and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x266bf3b5d8de2 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe727ac5e171c1d; op2val:0x3fd96e378bcbcfcd;
op3val:0x3fd266bf3b5d8de2; valaddr_reg:x3; val_offset:3111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3111*FLEN/8, x4, x1, x2)

inst_1038:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x727ac5e171c1d and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x96e378bcbcfcd and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x266bf3b5d8de2 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe727ac5e171c1d; op2val:0x3fd96e378bcbcfcd;
op3val:0x3fd266bf3b5d8de2; valaddr_reg:x3; val_offset:3114*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3114*FLEN/8, x4, x1, x2)

inst_1039:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x727ac5e171c1d and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x96e378bcbcfcd and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x266bf3b5d8de2 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe727ac5e171c1d; op2val:0x3fd96e378bcbcfcd;
op3val:0x3fd266bf3b5d8de2; valaddr_reg:x3; val_offset:3117*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3117*FLEN/8, x4, x1, x2)

inst_1040:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x72dc474f1a36b and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x236788e996ded and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xa6266207068e8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe72dc474f1a36b; op2val:0x3ff236788e996ded;
op3val:0x3fea6266207068e8; valaddr_reg:x3; val_offset:3120*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3120*FLEN/8, x4, x1, x2)

inst_1041:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x72dc474f1a36b and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x236788e996ded and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xa6266207068e8 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe72dc474f1a36b; op2val:0x3ff236788e996ded;
op3val:0x3fea6266207068e8; valaddr_reg:x3; val_offset:3123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3123*FLEN/8, x4, x1, x2)

inst_1042:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x72dc474f1a36b and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x236788e996ded and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xa6266207068e8 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe72dc474f1a36b; op2val:0x3ff236788e996ded;
op3val:0x3fea6266207068e8; valaddr_reg:x3; val_offset:3126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3126*FLEN/8, x4, x1, x2)

inst_1043:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x72dc474f1a36b and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x236788e996ded and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xa6266207068e8 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe72dc474f1a36b; op2val:0x3ff236788e996ded;
op3val:0x3fea6266207068e8; valaddr_reg:x3; val_offset:3129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3129*FLEN/8, x4, x1, x2)

inst_1044:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x72dc474f1a36b and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x236788e996ded and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xa6266207068e8 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe72dc474f1a36b; op2val:0x3ff236788e996ded;
op3val:0x3fea6266207068e8; valaddr_reg:x3; val_offset:3132*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3132*FLEN/8, x4, x1, x2)

inst_1045:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x73600106e1897 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x897158e2cee55 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x1d6167f305c26 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe73600106e1897; op2val:0x3fd897158e2cee55;
op3val:0x3fd1d6167f305c26; valaddr_reg:x3; val_offset:3135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3135*FLEN/8, x4, x1, x2)

inst_1046:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x73600106e1897 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x897158e2cee55 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x1d6167f305c26 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe73600106e1897; op2val:0x3fd897158e2cee55;
op3val:0x3fd1d6167f305c26; valaddr_reg:x3; val_offset:3138*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3138*FLEN/8, x4, x1, x2)

inst_1047:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x73600106e1897 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x897158e2cee55 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x1d6167f305c26 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe73600106e1897; op2val:0x3fd897158e2cee55;
op3val:0x3fd1d6167f305c26; valaddr_reg:x3; val_offset:3141*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3141*FLEN/8, x4, x1, x2)

inst_1048:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x73600106e1897 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x897158e2cee55 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x1d6167f305c26 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe73600106e1897; op2val:0x3fd897158e2cee55;
op3val:0x3fd1d6167f305c26; valaddr_reg:x3; val_offset:3144*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3144*FLEN/8, x4, x1, x2)

inst_1049:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x73600106e1897 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x897158e2cee55 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x1d6167f305c26 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe73600106e1897; op2val:0x3fd897158e2cee55;
op3val:0x3fd1d6167f305c26; valaddr_reg:x3; val_offset:3147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3147*FLEN/8, x4, x1, x2)

inst_1050:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x7460eaa0b6d32 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x16e44d796fedf and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x95ad55cd48dd8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe7460eaa0b6d32; op2val:0x3fd16e44d796fedf;
op3val:0x3fc95ad55cd48dd8; valaddr_reg:x3; val_offset:3150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3150*FLEN/8, x4, x1, x2)

inst_1051:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x7460eaa0b6d32 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x16e44d796fedf and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x95ad55cd48dd8 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe7460eaa0b6d32; op2val:0x3fd16e44d796fedf;
op3val:0x3fc95ad55cd48dd8; valaddr_reg:x3; val_offset:3153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3153*FLEN/8, x4, x1, x2)

inst_1052:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x7460eaa0b6d32 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x16e44d796fedf and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x95ad55cd48dd8 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe7460eaa0b6d32; op2val:0x3fd16e44d796fedf;
op3val:0x3fc95ad55cd48dd8; valaddr_reg:x3; val_offset:3156*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3156*FLEN/8, x4, x1, x2)

inst_1053:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x7460eaa0b6d32 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x16e44d796fedf and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x95ad55cd48dd8 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe7460eaa0b6d32; op2val:0x3fd16e44d796fedf;
op3val:0x3fc95ad55cd48dd8; valaddr_reg:x3; val_offset:3159*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3159*FLEN/8, x4, x1, x2)

inst_1054:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x7460eaa0b6d32 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x16e44d796fedf and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x95ad55cd48dd8 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe7460eaa0b6d32; op2val:0x3fd16e44d796fedf;
op3val:0x3fc95ad55cd48dd8; valaddr_reg:x3; val_offset:3162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3162*FLEN/8, x4, x1, x2)

inst_1055:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x7624ee71fde98 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xfb0bece076f3b and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x728649020d5f2 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe7624ee71fde98; op2val:0x3fdfb0bece076f3b;
op3val:0x3fd728649020d5f2; valaddr_reg:x3; val_offset:3165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3165*FLEN/8, x4, x1, x2)

inst_1056:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x7624ee71fde98 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xfb0bece076f3b and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x728649020d5f2 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe7624ee71fde98; op2val:0x3fdfb0bece076f3b;
op3val:0x3fd728649020d5f2; valaddr_reg:x3; val_offset:3168*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3168*FLEN/8, x4, x1, x2)

inst_1057:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x7624ee71fde98 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xfb0bece076f3b and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x728649020d5f2 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe7624ee71fde98; op2val:0x3fdfb0bece076f3b;
op3val:0x3fd728649020d5f2; valaddr_reg:x3; val_offset:3171*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3171*FLEN/8, x4, x1, x2)

inst_1058:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x7624ee71fde98 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xfb0bece076f3b and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x728649020d5f2 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe7624ee71fde98; op2val:0x3fdfb0bece076f3b;
op3val:0x3fd728649020d5f2; valaddr_reg:x3; val_offset:3174*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3174*FLEN/8, x4, x1, x2)

inst_1059:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x7624ee71fde98 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xfb0bece076f3b and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x728649020d5f2 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe7624ee71fde98; op2val:0x3fdfb0bece076f3b;
op3val:0x3fd728649020d5f2; valaddr_reg:x3; val_offset:3177*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3177*FLEN/8, x4, x1, x2)

inst_1060:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x76d0e55970e1b and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x6f62a5910687c and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x0cf2f395ff628 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe76d0e55970e1b; op2val:0x3fe6f62a5910687c;
op3val:0x3fe0cf2f395ff628; valaddr_reg:x3; val_offset:3180*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3180*FLEN/8, x4, x1, x2)

inst_1061:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x76d0e55970e1b and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x6f62a5910687c and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x0cf2f395ff628 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe76d0e55970e1b; op2val:0x3fe6f62a5910687c;
op3val:0x3fe0cf2f395ff628; valaddr_reg:x3; val_offset:3183*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3183*FLEN/8, x4, x1, x2)

inst_1062:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x76d0e55970e1b and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x6f62a5910687c and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x0cf2f395ff628 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe76d0e55970e1b; op2val:0x3fe6f62a5910687c;
op3val:0x3fe0cf2f395ff628; valaddr_reg:x3; val_offset:3186*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3186*FLEN/8, x4, x1, x2)

inst_1063:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x76d0e55970e1b and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x6f62a5910687c and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x0cf2f395ff628 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe76d0e55970e1b; op2val:0x3fe6f62a5910687c;
op3val:0x3fe0cf2f395ff628; valaddr_reg:x3; val_offset:3189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3189*FLEN/8, x4, x1, x2)

inst_1064:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x76d0e55970e1b and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x6f62a5910687c and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x0cf2f395ff628 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe76d0e55970e1b; op2val:0x3fe6f62a5910687c;
op3val:0x3fe0cf2f395ff628; valaddr_reg:x3; val_offset:3192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3192*FLEN/8, x4, x1, x2)

inst_1065:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x77d81e523ec79 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xe1ccde7bb6b01 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x61acebe9de6b8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe77d81e523ec79; op2val:0x3fee1ccde7bb6b01;
op3val:0x3fe61acebe9de6b8; valaddr_reg:x3; val_offset:3195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3195*FLEN/8, x4, x1, x2)

inst_1066:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x77d81e523ec79 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xe1ccde7bb6b01 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x61acebe9de6b8 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe77d81e523ec79; op2val:0x3fee1ccde7bb6b01;
op3val:0x3fe61acebe9de6b8; valaddr_reg:x3; val_offset:3198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3198*FLEN/8, x4, x1, x2)

inst_1067:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x77d81e523ec79 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xe1ccde7bb6b01 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x61acebe9de6b8 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe77d81e523ec79; op2val:0x3fee1ccde7bb6b01;
op3val:0x3fe61acebe9de6b8; valaddr_reg:x3; val_offset:3201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3201*FLEN/8, x4, x1, x2)

inst_1068:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x77d81e523ec79 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xe1ccde7bb6b01 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x61acebe9de6b8 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe77d81e523ec79; op2val:0x3fee1ccde7bb6b01;
op3val:0x3fe61acebe9de6b8; valaddr_reg:x3; val_offset:3204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3204*FLEN/8, x4, x1, x2)

inst_1069:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x77d81e523ec79 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xe1ccde7bb6b01 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x61acebe9de6b8 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe77d81e523ec79; op2val:0x3fee1ccde7bb6b01;
op3val:0x3fe61acebe9de6b8; valaddr_reg:x3; val_offset:3207*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3207*FLEN/8, x4, x1, x2)

inst_1070:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x79417de97ea95 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x5b04e5384195b and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xff62fc7bf2f12 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe79417de97ea95; op2val:0x3ff5b04e5384195b;
op3val:0x3feff62fc7bf2f12; valaddr_reg:x3; val_offset:3210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3210*FLEN/8, x4, x1, x2)

inst_1071:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x79417de97ea95 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x5b04e5384195b and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xff62fc7bf2f12 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe79417de97ea95; op2val:0x3ff5b04e5384195b;
op3val:0x3feff62fc7bf2f12; valaddr_reg:x3; val_offset:3213*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3213*FLEN/8, x4, x1, x2)

inst_1072:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x79417de97ea95 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x5b04e5384195b and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xff62fc7bf2f12 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe79417de97ea95; op2val:0x3ff5b04e5384195b;
op3val:0x3feff62fc7bf2f12; valaddr_reg:x3; val_offset:3216*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3216*FLEN/8, x4, x1, x2)

inst_1073:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x79417de97ea95 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x5b04e5384195b and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xff62fc7bf2f12 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe79417de97ea95; op2val:0x3ff5b04e5384195b;
op3val:0x3feff62fc7bf2f12; valaddr_reg:x3; val_offset:3219*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3219*FLEN/8, x4, x1, x2)

inst_1074:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x79417de97ea95 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x5b04e5384195b and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xff62fc7bf2f12 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe79417de97ea95; op2val:0x3ff5b04e5384195b;
op3val:0x3feff62fc7bf2f12; valaddr_reg:x3; val_offset:3222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3222*FLEN/8, x4, x1, x2)

inst_1075:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x7d8fa6c12e19d and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x94f47f72ec063 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x2dc98f04ad2e3 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe7d8fa6c12e19d; op2val:0x3fe94f47f72ec063;
op3val:0x3fe2dc98f04ad2e3; valaddr_reg:x3; val_offset:3225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3225*FLEN/8, x4, x1, x2)

inst_1076:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x7d8fa6c12e19d and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x94f47f72ec063 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x2dc98f04ad2e3 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe7d8fa6c12e19d; op2val:0x3fe94f47f72ec063;
op3val:0x3fe2dc98f04ad2e3; valaddr_reg:x3; val_offset:3228*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3228*FLEN/8, x4, x1, x2)

inst_1077:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x7d8fa6c12e19d and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x94f47f72ec063 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x2dc98f04ad2e3 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe7d8fa6c12e19d; op2val:0x3fe94f47f72ec063;
op3val:0x3fe2dc98f04ad2e3; valaddr_reg:x3; val_offset:3231*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3231*FLEN/8, x4, x1, x2)

inst_1078:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x7d8fa6c12e19d and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x94f47f72ec063 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x2dc98f04ad2e3 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe7d8fa6c12e19d; op2val:0x3fe94f47f72ec063;
op3val:0x3fe2dc98f04ad2e3; valaddr_reg:x3; val_offset:3234*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3234*FLEN/8, x4, x1, x2)

inst_1079:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x7d8fa6c12e19d and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x94f47f72ec063 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x2dc98f04ad2e3 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe7d8fa6c12e19d; op2val:0x3fe94f47f72ec063;
op3val:0x3fe2dc98f04ad2e3; valaddr_reg:x3; val_offset:3237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3237*FLEN/8, x4, x1, x2)

inst_1080:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x7ecd48dea67bc and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xf6e55860bfda0 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x77febf5703455 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe7ecd48dea67bc; op2val:0x3fef6e55860bfda0;
op3val:0x3fe77febf5703455; valaddr_reg:x3; val_offset:3240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3240*FLEN/8, x4, x1, x2)

inst_1081:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x7ecd48dea67bc and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xf6e55860bfda0 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x77febf5703455 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe7ecd48dea67bc; op2val:0x3fef6e55860bfda0;
op3val:0x3fe77febf5703455; valaddr_reg:x3; val_offset:3243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3243*FLEN/8, x4, x1, x2)

inst_1082:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x7ecd48dea67bc and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xf6e55860bfda0 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x77febf5703455 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe7ecd48dea67bc; op2val:0x3fef6e55860bfda0;
op3val:0x3fe77febf5703455; valaddr_reg:x3; val_offset:3246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3246*FLEN/8, x4, x1, x2)

inst_1083:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x7ecd48dea67bc and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xf6e55860bfda0 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x77febf5703455 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe7ecd48dea67bc; op2val:0x3fef6e55860bfda0;
op3val:0x3fe77febf5703455; valaddr_reg:x3; val_offset:3249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3249*FLEN/8, x4, x1, x2)

inst_1084:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x7ecd48dea67bc and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xf6e55860bfda0 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x77febf5703455 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe7ecd48dea67bc; op2val:0x3fef6e55860bfda0;
op3val:0x3fe77febf5703455; valaddr_reg:x3; val_offset:3252*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3252*FLEN/8, x4, x1, x2)

inst_1085:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x7f111b6b8f93f and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x28b6fe7e393b5 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xbbfd9aadb5bef and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe7f111b6b8f93f; op2val:0x3ff28b6fe7e393b5;
op3val:0x3febbfd9aadb5bef; valaddr_reg:x3; val_offset:3255*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3255*FLEN/8, x4, x1, x2)

inst_1086:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x7f111b6b8f93f and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x28b6fe7e393b5 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xbbfd9aadb5bef and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe7f111b6b8f93f; op2val:0x3ff28b6fe7e393b5;
op3val:0x3febbfd9aadb5bef; valaddr_reg:x3; val_offset:3258*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3258*FLEN/8, x4, x1, x2)

inst_1087:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x7f111b6b8f93f and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x28b6fe7e393b5 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xbbfd9aadb5bef and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe7f111b6b8f93f; op2val:0x3ff28b6fe7e393b5;
op3val:0x3febbfd9aadb5bef; valaddr_reg:x3; val_offset:3261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3261*FLEN/8, x4, x1, x2)

inst_1088:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x7f111b6b8f93f and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x28b6fe7e393b5 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xbbfd9aadb5bef and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe7f111b6b8f93f; op2val:0x3ff28b6fe7e393b5;
op3val:0x3febbfd9aadb5bef; valaddr_reg:x3; val_offset:3264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3264*FLEN/8, x4, x1, x2)

inst_1089:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x7f111b6b8f93f and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x28b6fe7e393b5 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xbbfd9aadb5bef and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe7f111b6b8f93f; op2val:0x3ff28b6fe7e393b5;
op3val:0x3febbfd9aadb5bef; valaddr_reg:x3; val_offset:3267*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3267*FLEN/8, x4, x1, x2)

inst_1090:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x84f2ff9c1858d and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x2037f7a0de1b8 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xb5e667ff63e10 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe84f2ff9c1858d; op2val:0x3fe2037f7a0de1b8;
op3val:0x3fdb5e667ff63e10; valaddr_reg:x3; val_offset:3270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3270*FLEN/8, x4, x1, x2)

inst_1091:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x84f2ff9c1858d and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x2037f7a0de1b8 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xb5e667ff63e10 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe84f2ff9c1858d; op2val:0x3fe2037f7a0de1b8;
op3val:0x3fdb5e667ff63e10; valaddr_reg:x3; val_offset:3273*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3273*FLEN/8, x4, x1, x2)

inst_1092:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x84f2ff9c1858d and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x2037f7a0de1b8 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xb5e667ff63e10 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe84f2ff9c1858d; op2val:0x3fe2037f7a0de1b8;
op3val:0x3fdb5e667ff63e10; valaddr_reg:x3; val_offset:3276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3276*FLEN/8, x4, x1, x2)

inst_1093:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x84f2ff9c1858d and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x2037f7a0de1b8 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xb5e667ff63e10 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe84f2ff9c1858d; op2val:0x3fe2037f7a0de1b8;
op3val:0x3fdb5e667ff63e10; valaddr_reg:x3; val_offset:3279*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3279*FLEN/8, x4, x1, x2)

inst_1094:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x84f2ff9c1858d and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x2037f7a0de1b8 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xb5e667ff63e10 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe84f2ff9c1858d; op2val:0x3fe2037f7a0de1b8;
op3val:0x3fdb5e667ff63e10; valaddr_reg:x3; val_offset:3282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3282*FLEN/8, x4, x1, x2)

inst_1095:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x8de6f81a66055 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xab321be03e5e0 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x4bff112232436 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe8de6f81a66055; op2val:0x3feab321be03e5e0;
op3val:0x3fe4bff112232436; valaddr_reg:x3; val_offset:3285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3285*FLEN/8, x4, x1, x2)

inst_1096:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x8de6f81a66055 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xab321be03e5e0 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x4bff112232436 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe8de6f81a66055; op2val:0x3feab321be03e5e0;
op3val:0x3fe4bff112232436; valaddr_reg:x3; val_offset:3288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3288*FLEN/8, x4, x1, x2)

inst_1097:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x8de6f81a66055 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xab321be03e5e0 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x4bff112232436 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe8de6f81a66055; op2val:0x3feab321be03e5e0;
op3val:0x3fe4bff112232436; valaddr_reg:x3; val_offset:3291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3291*FLEN/8, x4, x1, x2)

inst_1098:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x8de6f81a66055 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xab321be03e5e0 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x4bff112232436 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe8de6f81a66055; op2val:0x3feab321be03e5e0;
op3val:0x3fe4bff112232436; valaddr_reg:x3; val_offset:3294*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3294*FLEN/8, x4, x1, x2)

inst_1099:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x8de6f81a66055 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xab321be03e5e0 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x4bff112232436 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe8de6f81a66055; op2val:0x3feab321be03e5e0;
op3val:0x3fe4bff112232436; valaddr_reg:x3; val_offset:3297*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3297*FLEN/8, x4, x1, x2)

inst_1100:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x8e8aff137bd98 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x1ebe75e0b8349 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xbe67cba473cbc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe8e8aff137bd98; op2val:0x3fe1ebe75e0b8349;
op3val:0x3fdbe67cba473cbc; valaddr_reg:x3; val_offset:3300*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3300*FLEN/8, x4, x1, x2)

inst_1101:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x8e8aff137bd98 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x1ebe75e0b8349 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xbe67cba473cbc and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe8e8aff137bd98; op2val:0x3fe1ebe75e0b8349;
op3val:0x3fdbe67cba473cbc; valaddr_reg:x3; val_offset:3303*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3303*FLEN/8, x4, x1, x2)

inst_1102:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x8e8aff137bd98 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x1ebe75e0b8349 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xbe67cba473cbc and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe8e8aff137bd98; op2val:0x3fe1ebe75e0b8349;
op3val:0x3fdbe67cba473cbc; valaddr_reg:x3; val_offset:3306*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3306*FLEN/8, x4, x1, x2)

inst_1103:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x8e8aff137bd98 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x1ebe75e0b8349 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xbe67cba473cbc and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe8e8aff137bd98; op2val:0x3fe1ebe75e0b8349;
op3val:0x3fdbe67cba473cbc; valaddr_reg:x3; val_offset:3309*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3309*FLEN/8, x4, x1, x2)

inst_1104:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x8e8aff137bd98 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x1ebe75e0b8349 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xbe67cba473cbc and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe8e8aff137bd98; op2val:0x3fe1ebe75e0b8349;
op3val:0x3fdbe67cba473cbc; valaddr_reg:x3; val_offset:3312*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3312*FLEN/8, x4, x1, x2)

inst_1105:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x8ef771e18e80e and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x948a0662241b4 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x3b3acd870c123 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe8ef771e18e80e; op2val:0x3fe948a0662241b4;
op3val:0x3fe3b3acd870c123; valaddr_reg:x3; val_offset:3315*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3315*FLEN/8, x4, x1, x2)

inst_1106:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x8ef771e18e80e and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x948a0662241b4 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x3b3acd870c123 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe8ef771e18e80e; op2val:0x3fe948a0662241b4;
op3val:0x3fe3b3acd870c123; valaddr_reg:x3; val_offset:3318*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3318*FLEN/8, x4, x1, x2)

inst_1107:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x8ef771e18e80e and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x948a0662241b4 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x3b3acd870c123 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe8ef771e18e80e; op2val:0x3fe948a0662241b4;
op3val:0x3fe3b3acd870c123; valaddr_reg:x3; val_offset:3321*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3321*FLEN/8, x4, x1, x2)

inst_1108:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x8ef771e18e80e and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x948a0662241b4 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x3b3acd870c123 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe8ef771e18e80e; op2val:0x3fe948a0662241b4;
op3val:0x3fe3b3acd870c123; valaddr_reg:x3; val_offset:3324*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3324*FLEN/8, x4, x1, x2)

inst_1109:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x8ef771e18e80e and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x948a0662241b4 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x3b3acd870c123 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe8ef771e18e80e; op2val:0x3fe948a0662241b4;
op3val:0x3fe3b3acd870c123; valaddr_reg:x3; val_offset:3327*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3327*FLEN/8, x4, x1, x2)

inst_1110:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x9489eaca9fae8 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x5c86b81444854 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x13602f1fbf780 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe9489eaca9fae8; op2val:0x3fc5c86b81444854;
op3val:0x3fc13602f1fbf780; valaddr_reg:x3; val_offset:3330*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3330*FLEN/8, x4, x1, x2)

inst_1111:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x9489eaca9fae8 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x5c86b81444854 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x13602f1fbf780 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe9489eaca9fae8; op2val:0x3fc5c86b81444854;
op3val:0x3fc13602f1fbf780; valaddr_reg:x3; val_offset:3333*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3333*FLEN/8, x4, x1, x2)

inst_1112:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x9489eaca9fae8 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x5c86b81444854 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x13602f1fbf780 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe9489eaca9fae8; op2val:0x3fc5c86b81444854;
op3val:0x3fc13602f1fbf780; valaddr_reg:x3; val_offset:3336*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3336*FLEN/8, x4, x1, x2)

inst_1113:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x9489eaca9fae8 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x5c86b81444854 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x13602f1fbf780 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe9489eaca9fae8; op2val:0x3fc5c86b81444854;
op3val:0x3fc13602f1fbf780; valaddr_reg:x3; val_offset:3339*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3339*FLEN/8, x4, x1, x2)

inst_1114:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x9489eaca9fae8 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x5c86b81444854 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x13602f1fbf780 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe9489eaca9fae8; op2val:0x3fc5c86b81444854;
op3val:0x3fc13602f1fbf780; valaddr_reg:x3; val_offset:3342*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3342*FLEN/8, x4, x1, x2)

inst_1115:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x948e2edb7b64b and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xc2e5360274d40 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x64461373cc6d4 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe948e2edb7b64b; op2val:0x3fec2e5360274d40;
op3val:0x3fe64461373cc6d4; valaddr_reg:x3; val_offset:3345*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3345*FLEN/8, x4, x1, x2)

inst_1116:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x948e2edb7b64b and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xc2e5360274d40 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x64461373cc6d4 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe948e2edb7b64b; op2val:0x3fec2e5360274d40;
op3val:0x3fe64461373cc6d4; valaddr_reg:x3; val_offset:3348*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3348*FLEN/8, x4, x1, x2)

inst_1117:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x948e2edb7b64b and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xc2e5360274d40 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x64461373cc6d4 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe948e2edb7b64b; op2val:0x3fec2e5360274d40;
op3val:0x3fe64461373cc6d4; valaddr_reg:x3; val_offset:3351*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3351*FLEN/8, x4, x1, x2)

inst_1118:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x948e2edb7b64b and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xc2e5360274d40 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x64461373cc6d4 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe948e2edb7b64b; op2val:0x3fec2e5360274d40;
op3val:0x3fe64461373cc6d4; valaddr_reg:x3; val_offset:3354*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3354*FLEN/8, x4, x1, x2)

inst_1119:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x948e2edb7b64b and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xc2e5360274d40 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x64461373cc6d4 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe948e2edb7b64b; op2val:0x3fec2e5360274d40;
op3val:0x3fe64461373cc6d4; valaddr_reg:x3; val_offset:3357*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3357*FLEN/8, x4, x1, x2)

inst_1120:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x9927004b039e3 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xb990c2fda8bc8 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x60ddc68b2d704 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe9927004b039e3; op2val:0x3fdb990c2fda8bc8;
op3val:0x3fd60ddc68b2d704; valaddr_reg:x3; val_offset:3360*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3360*FLEN/8, x4, x1, x2)

inst_1121:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x9927004b039e3 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xb990c2fda8bc8 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x60ddc68b2d704 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe9927004b039e3; op2val:0x3fdb990c2fda8bc8;
op3val:0x3fd60ddc68b2d704; valaddr_reg:x3; val_offset:3363*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3363*FLEN/8, x4, x1, x2)

inst_1122:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x9927004b039e3 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xb990c2fda8bc8 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x60ddc68b2d704 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe9927004b039e3; op2val:0x3fdb990c2fda8bc8;
op3val:0x3fd60ddc68b2d704; valaddr_reg:x3; val_offset:3366*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3366*FLEN/8, x4, x1, x2)

inst_1123:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x9927004b039e3 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xb990c2fda8bc8 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x60ddc68b2d704 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe9927004b039e3; op2val:0x3fdb990c2fda8bc8;
op3val:0x3fd60ddc68b2d704; valaddr_reg:x3; val_offset:3369*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3369*FLEN/8, x4, x1, x2)

inst_1124:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x9927004b039e3 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xb990c2fda8bc8 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x60ddc68b2d704 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe9927004b039e3; op2val:0x3fdb990c2fda8bc8;
op3val:0x3fd60ddc68b2d704; valaddr_reg:x3; val_offset:3372*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3372*FLEN/8, x4, x1, x2)

inst_1125:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x9d31161bf0f55 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x1b33f2352351c and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xc9191b267601e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe9d31161bf0f55; op2val:0x3fe1b33f2352351c;
op3val:0x3fdc9191b267601e; valaddr_reg:x3; val_offset:3375*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3375*FLEN/8, x4, x1, x2)

inst_1126:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x9d31161bf0f55 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x1b33f2352351c and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xc9191b267601e and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe9d31161bf0f55; op2val:0x3fe1b33f2352351c;
op3val:0x3fdc9191b267601e; valaddr_reg:x3; val_offset:3378*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3378*FLEN/8, x4, x1, x2)

inst_1127:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x9d31161bf0f55 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x1b33f2352351c and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xc9191b267601e and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe9d31161bf0f55; op2val:0x3fe1b33f2352351c;
op3val:0x3fdc9191b267601e; valaddr_reg:x3; val_offset:3381*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3381*FLEN/8, x4, x1, x2)

inst_1128:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x9d31161bf0f55 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x1b33f2352351c and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xc9191b267601e and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe9d31161bf0f55; op2val:0x3fe1b33f2352351c;
op3val:0x3fdc9191b267601e; valaddr_reg:x3; val_offset:3384*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3384*FLEN/8, x4, x1, x2)

inst_1129:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x9d31161bf0f55 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x1b33f2352351c and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xc9191b267601e and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe9d31161bf0f55; op2val:0x3fe1b33f2352351c;
op3val:0x3fdc9191b267601e; valaddr_reg:x3; val_offset:3387*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3387*FLEN/8, x4, x1, x2)

inst_1130:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x9d5f151b8d426 and fs2 == 0 and fe2 == 0x3fb and fm2 == 0xbb28a2b2bcee8 and fs3 == 0 and fe3 == 0x3fb and fm3 == 0x65ca938c61258 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe9d5f151b8d426; op2val:0x3fbbb28a2b2bcee8;
op3val:0x3fb65ca938c61258; valaddr_reg:x3; val_offset:3390*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3390*FLEN/8, x4, x1, x2)

inst_1131:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x9d5f151b8d426 and fs2 == 0 and fe2 == 0x3fb and fm2 == 0xbb28a2b2bcee8 and fs3 == 0 and fe3 == 0x3fb and fm3 == 0x65ca938c61258 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe9d5f151b8d426; op2val:0x3fbbb28a2b2bcee8;
op3val:0x3fb65ca938c61258; valaddr_reg:x3; val_offset:3393*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3393*FLEN/8, x4, x1, x2)

inst_1132:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x9d5f151b8d426 and fs2 == 0 and fe2 == 0x3fb and fm2 == 0xbb28a2b2bcee8 and fs3 == 0 and fe3 == 0x3fb and fm3 == 0x65ca938c61258 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe9d5f151b8d426; op2val:0x3fbbb28a2b2bcee8;
op3val:0x3fb65ca938c61258; valaddr_reg:x3; val_offset:3396*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3396*FLEN/8, x4, x1, x2)

inst_1133:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x9d5f151b8d426 and fs2 == 0 and fe2 == 0x3fb and fm2 == 0xbb28a2b2bcee8 and fs3 == 0 and fe3 == 0x3fb and fm3 == 0x65ca938c61258 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe9d5f151b8d426; op2val:0x3fbbb28a2b2bcee8;
op3val:0x3fb65ca938c61258; valaddr_reg:x3; val_offset:3399*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3399*FLEN/8, x4, x1, x2)

inst_1134:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x9d5f151b8d426 and fs2 == 0 and fe2 == 0x3fb and fm2 == 0xbb28a2b2bcee8 and fs3 == 0 and fe3 == 0x3fb and fm3 == 0x65ca938c61258 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe9d5f151b8d426; op2val:0x3fbbb28a2b2bcee8;
op3val:0x3fb65ca938c61258; valaddr_reg:x3; val_offset:3402*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3402*FLEN/8, x4, x1, x2)

inst_1135:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x9d5f62b61e808 and fs2 == 0 and fe2 == 0x3fb and fm2 == 0x0ae5d788a48c6 and fs3 == 0 and fe3 == 0x3fa and fm3 == 0xaef83eec48e20 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe9d5f62b61e808; op2val:0x3fb0ae5d788a48c6;
op3val:0x3faaef83eec48e20; valaddr_reg:x3; val_offset:3405*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3405*FLEN/8, x4, x1, x2)

inst_1136:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x9d5f62b61e808 and fs2 == 0 and fe2 == 0x3fb and fm2 == 0x0ae5d788a48c6 and fs3 == 0 and fe3 == 0x3fa and fm3 == 0xaef83eec48e20 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe9d5f62b61e808; op2val:0x3fb0ae5d788a48c6;
op3val:0x3faaef83eec48e20; valaddr_reg:x3; val_offset:3408*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3408*FLEN/8, x4, x1, x2)

inst_1137:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x9d5f62b61e808 and fs2 == 0 and fe2 == 0x3fb and fm2 == 0x0ae5d788a48c6 and fs3 == 0 and fe3 == 0x3fa and fm3 == 0xaef83eec48e20 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe9d5f62b61e808; op2val:0x3fb0ae5d788a48c6;
op3val:0x3faaef83eec48e20; valaddr_reg:x3; val_offset:3411*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3411*FLEN/8, x4, x1, x2)

inst_1138:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x9d5f62b61e808 and fs2 == 0 and fe2 == 0x3fb and fm2 == 0x0ae5d788a48c6 and fs3 == 0 and fe3 == 0x3fa and fm3 == 0xaef83eec48e20 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe9d5f62b61e808; op2val:0x3fb0ae5d788a48c6;
op3val:0x3faaef83eec48e20; valaddr_reg:x3; val_offset:3414*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3414*FLEN/8, x4, x1, x2)

inst_1139:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x9d5f62b61e808 and fs2 == 0 and fe2 == 0x3fb and fm2 == 0x0ae5d788a48c6 and fs3 == 0 and fe3 == 0x3fa and fm3 == 0xaef83eec48e20 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe9d5f62b61e808; op2val:0x3fb0ae5d788a48c6;
op3val:0x3faaef83eec48e20; valaddr_reg:x3; val_offset:3417*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3417*FLEN/8, x4, x1, x2)

inst_1140:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x9d6c84cf7bddb and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x5dbf0586b27dc and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x1a68b6f94c286 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe9d6c84cf7bddb; op2val:0x3fe5dbf0586b27dc;
op3val:0x3fe1a68b6f94c286; valaddr_reg:x3; val_offset:3420*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3420*FLEN/8, x4, x1, x2)

inst_1141:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x9d6c84cf7bddb and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x5dbf0586b27dc and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x1a68b6f94c286 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe9d6c84cf7bddb; op2val:0x3fe5dbf0586b27dc;
op3val:0x3fe1a68b6f94c286; valaddr_reg:x3; val_offset:3423*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3423*FLEN/8, x4, x1, x2)

inst_1142:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x9d6c84cf7bddb and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x5dbf0586b27dc and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x1a68b6f94c286 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe9d6c84cf7bddb; op2val:0x3fe5dbf0586b27dc;
op3val:0x3fe1a68b6f94c286; valaddr_reg:x3; val_offset:3426*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3426*FLEN/8, x4, x1, x2)

inst_1143:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x9d6c84cf7bddb and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x5dbf0586b27dc and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x1a68b6f94c286 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe9d6c84cf7bddb; op2val:0x3fe5dbf0586b27dc;
op3val:0x3fe1a68b6f94c286; valaddr_reg:x3; val_offset:3429*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3429*FLEN/8, x4, x1, x2)

inst_1144:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x9d6c84cf7bddb and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x5dbf0586b27dc and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x1a68b6f94c286 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe9d6c84cf7bddb; op2val:0x3fe5dbf0586b27dc;
op3val:0x3fe1a68b6f94c286; valaddr_reg:x3; val_offset:3432*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3432*FLEN/8, x4, x1, x2)

inst_1145:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x9fab4c4f58420 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xa986c6c1a342d and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x59771c0948a72 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe9fab4c4f58420; op2val:0x3fea986c6c1a342d;
op3val:0x3fe59771c0948a72; valaddr_reg:x3; val_offset:3435*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3435*FLEN/8, x4, x1, x2)

inst_1146:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x9fab4c4f58420 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xa986c6c1a342d and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x59771c0948a72 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe9fab4c4f58420; op2val:0x3fea986c6c1a342d;
op3val:0x3fe59771c0948a72; valaddr_reg:x3; val_offset:3438*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3438*FLEN/8, x4, x1, x2)

inst_1147:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x9fab4c4f58420 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xa986c6c1a342d and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x59771c0948a72 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe9fab4c4f58420; op2val:0x3fea986c6c1a342d;
op3val:0x3fe59771c0948a72; valaddr_reg:x3; val_offset:3441*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3441*FLEN/8, x4, x1, x2)

inst_1148:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x9fab4c4f58420 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xa986c6c1a342d and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x59771c0948a72 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe9fab4c4f58420; op2val:0x3fea986c6c1a342d;
op3val:0x3fe59771c0948a72; valaddr_reg:x3; val_offset:3444*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3444*FLEN/8, x4, x1, x2)

inst_1149:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x9fab4c4f58420 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xa986c6c1a342d and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x59771c0948a72 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fe9fab4c4f58420; op2val:0x3fea986c6c1a342d;
op3val:0x3fe59771c0948a72; valaddr_reg:x3; val_offset:3447*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3447*FLEN/8, x4, x1, x2)

inst_1150:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xa22984a1709c7 and fs2 == 0 and fe2 == 0x3fb and fm2 == 0x7b6b85e8df37c and fs3 == 0 and fe3 == 0x3fb and fm3 == 0x35e18cb8b2ab8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fea22984a1709c7; op2val:0x3fb7b6b85e8df37c;
op3val:0x3fb35e18cb8b2ab8; valaddr_reg:x3; val_offset:3450*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3450*FLEN/8, x4, x1, x2)

inst_1151:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xa22984a1709c7 and fs2 == 0 and fe2 == 0x3fb and fm2 == 0x7b6b85e8df37c and fs3 == 0 and fe3 == 0x3fb and fm3 == 0x35e18cb8b2ab8 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fea22984a1709c7; op2val:0x3fb7b6b85e8df37c;
op3val:0x3fb35e18cb8b2ab8; valaddr_reg:x3; val_offset:3453*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3453*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_10)

inst_1152:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xa22984a1709c7 and fs2 == 0 and fe2 == 0x3fb and fm2 == 0x7b6b85e8df37c and fs3 == 0 and fe3 == 0x3fb and fm3 == 0x35e18cb8b2ab8 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fea22984a1709c7; op2val:0x3fb7b6b85e8df37c;
op3val:0x3fb35e18cb8b2ab8; valaddr_reg:x3; val_offset:3456*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3456*FLEN/8, x4, x1, x2)

inst_1153:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xa22984a1709c7 and fs2 == 0 and fe2 == 0x3fb and fm2 == 0x7b6b85e8df37c and fs3 == 0 and fe3 == 0x3fb and fm3 == 0x35e18cb8b2ab8 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fea22984a1709c7; op2val:0x3fb7b6b85e8df37c;
op3val:0x3fb35e18cb8b2ab8; valaddr_reg:x3; val_offset:3459*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3459*FLEN/8, x4, x1, x2)

inst_1154:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xa22984a1709c7 and fs2 == 0 and fe2 == 0x3fb and fm2 == 0x7b6b85e8df37c and fs3 == 0 and fe3 == 0x3fb and fm3 == 0x35e18cb8b2ab8 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fea22984a1709c7; op2val:0x3fb7b6b85e8df37c;
op3val:0x3fb35e18cb8b2ab8; valaddr_reg:x3; val_offset:3462*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3462*FLEN/8, x4, x1, x2)

inst_1155:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xa2e57e7073430 and fs2 == 0 and fe2 == 0x3f9 and fm2 == 0xc8eb505dd966d and fs3 == 0 and fe3 == 0x3f9 and fm3 == 0x75d4eab253940 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fea2e57e7073430; op2val:0x3f9c8eb505dd966d;
op3val:0x3f975d4eab253940; valaddr_reg:x3; val_offset:3465*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3465*FLEN/8, x4, x1, x2)

inst_1156:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xa2e57e7073430 and fs2 == 0 and fe2 == 0x3f9 and fm2 == 0xc8eb505dd966d and fs3 == 0 and fe3 == 0x3f9 and fm3 == 0x75d4eab253940 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fea2e57e7073430; op2val:0x3f9c8eb505dd966d;
op3val:0x3f975d4eab253940; valaddr_reg:x3; val_offset:3468*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3468*FLEN/8, x4, x1, x2)

inst_1157:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xa2e57e7073430 and fs2 == 0 and fe2 == 0x3f9 and fm2 == 0xc8eb505dd966d and fs3 == 0 and fe3 == 0x3f9 and fm3 == 0x75d4eab253940 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fea2e57e7073430; op2val:0x3f9c8eb505dd966d;
op3val:0x3f975d4eab253940; valaddr_reg:x3; val_offset:3471*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3471*FLEN/8, x4, x1, x2)

inst_1158:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xa2e57e7073430 and fs2 == 0 and fe2 == 0x3f9 and fm2 == 0xc8eb505dd966d and fs3 == 0 and fe3 == 0x3f9 and fm3 == 0x75d4eab253940 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fea2e57e7073430; op2val:0x3f9c8eb505dd966d;
op3val:0x3f975d4eab253940; valaddr_reg:x3; val_offset:3474*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3474*FLEN/8, x4, x1, x2)

inst_1159:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xa2e57e7073430 and fs2 == 0 and fe2 == 0x3f9 and fm2 == 0xc8eb505dd966d and fs3 == 0 and fe3 == 0x3f9 and fm3 == 0x75d4eab253940 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fea2e57e7073430; op2val:0x3f9c8eb505dd966d;
op3val:0x3f975d4eab253940; valaddr_reg:x3; val_offset:3477*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3477*FLEN/8, x4, x1, x2)

inst_1160:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xa533c45df4e40 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x14074223c3412 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xc627c0f1da8d3 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fea533c45df4e40; op2val:0x3ff14074223c3412;
op3val:0x3fec627c0f1da8d3; valaddr_reg:x3; val_offset:3480*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3480*FLEN/8, x4, x1, x2)

inst_1161:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xa533c45df4e40 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x14074223c3412 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xc627c0f1da8d3 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fea533c45df4e40; op2val:0x3ff14074223c3412;
op3val:0x3fec627c0f1da8d3; valaddr_reg:x3; val_offset:3483*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3483*FLEN/8, x4, x1, x2)

inst_1162:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xa533c45df4e40 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x14074223c3412 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xc627c0f1da8d3 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fea533c45df4e40; op2val:0x3ff14074223c3412;
op3val:0x3fec627c0f1da8d3; valaddr_reg:x3; val_offset:3486*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3486*FLEN/8, x4, x1, x2)

inst_1163:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xa533c45df4e40 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x14074223c3412 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xc627c0f1da8d3 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fea533c45df4e40; op2val:0x3ff14074223c3412;
op3val:0x3fec627c0f1da8d3; valaddr_reg:x3; val_offset:3489*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3489*FLEN/8, x4, x1, x2)

inst_1164:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xa533c45df4e40 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x14074223c3412 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xc627c0f1da8d3 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fea533c45df4e40; op2val:0x3ff14074223c3412;
op3val:0x3fec627c0f1da8d3; valaddr_reg:x3; val_offset:3492*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3492*FLEN/8, x4, x1, x2)

inst_1165:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xa654f4023bad6 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xfa79e34521fb3 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xa1c67fb1902b0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fea654f4023bad6; op2val:0x3fefa79e34521fb3;
op3val:0x3fea1c67fb1902b0; valaddr_reg:x3; val_offset:3495*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3495*FLEN/8, x4, x1, x2)

inst_1166:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xa654f4023bad6 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xfa79e34521fb3 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xa1c67fb1902b0 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fea654f4023bad6; op2val:0x3fefa79e34521fb3;
op3val:0x3fea1c67fb1902b0; valaddr_reg:x3; val_offset:3498*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3498*FLEN/8, x4, x1, x2)

inst_1167:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xa654f4023bad6 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xfa79e34521fb3 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xa1c67fb1902b0 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fea654f4023bad6; op2val:0x3fefa79e34521fb3;
op3val:0x3fea1c67fb1902b0; valaddr_reg:x3; val_offset:3501*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3501*FLEN/8, x4, x1, x2)

inst_1168:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xa654f4023bad6 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xfa79e34521fb3 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xa1c67fb1902b0 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fea654f4023bad6; op2val:0x3fefa79e34521fb3;
op3val:0x3fea1c67fb1902b0; valaddr_reg:x3; val_offset:3504*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3504*FLEN/8, x4, x1, x2)

inst_1169:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xa654f4023bad6 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xfa79e34521fb3 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xa1c67fb1902b0 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fea654f4023bad6; op2val:0x3fefa79e34521fb3;
op3val:0x3fea1c67fb1902b0; valaddr_reg:x3; val_offset:3507*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3507*FLEN/8, x4, x1, x2)

inst_1170:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xa7ded33ed039c and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x2e76778e3eca6 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xf4cd03dd925a9 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fea7ded33ed039c; op2val:0x3ff2e76778e3eca6;
op3val:0x3fef4cd03dd925a9; valaddr_reg:x3; val_offset:3510*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3510*FLEN/8, x4, x1, x2)

inst_1171:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xa7ded33ed039c and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x2e76778e3eca6 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xf4cd03dd925a9 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fea7ded33ed039c; op2val:0x3ff2e76778e3eca6;
op3val:0x3fef4cd03dd925a9; valaddr_reg:x3; val_offset:3513*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3513*FLEN/8, x4, x1, x2)

inst_1172:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xa7ded33ed039c and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x2e76778e3eca6 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xf4cd03dd925a9 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fea7ded33ed039c; op2val:0x3ff2e76778e3eca6;
op3val:0x3fef4cd03dd925a9; valaddr_reg:x3; val_offset:3516*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3516*FLEN/8, x4, x1, x2)

inst_1173:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xa7ded33ed039c and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x2e76778e3eca6 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xf4cd03dd925a9 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fea7ded33ed039c; op2val:0x3ff2e76778e3eca6;
op3val:0x3fef4cd03dd925a9; valaddr_reg:x3; val_offset:3519*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3519*FLEN/8, x4, x1, x2)

inst_1174:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xa7ded33ed039c and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x2e76778e3eca6 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xf4cd03dd925a9 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fea7ded33ed039c; op2val:0x3ff2e76778e3eca6;
op3val:0x3fef4cd03dd925a9; valaddr_reg:x3; val_offset:3522*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3522*FLEN/8, x4, x1, x2)

inst_1175:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xa9abae86cce36 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xa118acb5fc403 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x5ac4d747f1bb2 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fea9abae86cce36; op2val:0x3fda118acb5fc403;
op3val:0x3fd5ac4d747f1bb2; valaddr_reg:x3; val_offset:3525*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3525*FLEN/8, x4, x1, x2)

inst_1176:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xa9abae86cce36 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xa118acb5fc403 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x5ac4d747f1bb2 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fea9abae86cce36; op2val:0x3fda118acb5fc403;
op3val:0x3fd5ac4d747f1bb2; valaddr_reg:x3; val_offset:3528*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3528*FLEN/8, x4, x1, x2)

inst_1177:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xa9abae86cce36 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xa118acb5fc403 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x5ac4d747f1bb2 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fea9abae86cce36; op2val:0x3fda118acb5fc403;
op3val:0x3fd5ac4d747f1bb2; valaddr_reg:x3; val_offset:3531*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3531*FLEN/8, x4, x1, x2)

inst_1178:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xa9abae86cce36 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xa118acb5fc403 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x5ac4d747f1bb2 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fea9abae86cce36; op2val:0x3fda118acb5fc403;
op3val:0x3fd5ac4d747f1bb2; valaddr_reg:x3; val_offset:3534*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3534*FLEN/8, x4, x1, x2)

inst_1179:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xa9abae86cce36 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xa118acb5fc403 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x5ac4d747f1bb2 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fea9abae86cce36; op2val:0x3fda118acb5fc403;
op3val:0x3fd5ac4d747f1bb2; valaddr_reg:x3; val_offset:3537*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3537*FLEN/8, x4, x1, x2)

inst_1180:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xabf756d3d3025 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xcad4efb05bc11 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x7f863d6ece360 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feabf756d3d3025; op2val:0x3fdcad4efb05bc11;
op3val:0x3fd7f863d6ece360; valaddr_reg:x3; val_offset:3540*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3540*FLEN/8, x4, x1, x2)

inst_1181:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xabf756d3d3025 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xcad4efb05bc11 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x7f863d6ece360 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feabf756d3d3025; op2val:0x3fdcad4efb05bc11;
op3val:0x3fd7f863d6ece360; valaddr_reg:x3; val_offset:3543*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3543*FLEN/8, x4, x1, x2)

inst_1182:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xabf756d3d3025 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xcad4efb05bc11 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x7f863d6ece360 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feabf756d3d3025; op2val:0x3fdcad4efb05bc11;
op3val:0x3fd7f863d6ece360; valaddr_reg:x3; val_offset:3546*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3546*FLEN/8, x4, x1, x2)

inst_1183:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xabf756d3d3025 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xcad4efb05bc11 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x7f863d6ece360 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feabf756d3d3025; op2val:0x3fdcad4efb05bc11;
op3val:0x3fd7f863d6ece360; valaddr_reg:x3; val_offset:3549*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3549*FLEN/8, x4, x1, x2)

inst_1184:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xabf756d3d3025 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xcad4efb05bc11 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x7f863d6ece360 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feabf756d3d3025; op2val:0x3fdcad4efb05bc11;
op3val:0x3fd7f863d6ece360; valaddr_reg:x3; val_offset:3552*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3552*FLEN/8, x4, x1, x2)

inst_1185:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xac73290f888b3 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xa23204299f289 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x5df3df406bb89 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feac73290f888b3; op2val:0x3fea23204299f289;
op3val:0x3fe5df3df406bb89; valaddr_reg:x3; val_offset:3555*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3555*FLEN/8, x4, x1, x2)

inst_1186:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xac73290f888b3 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xa23204299f289 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x5df3df406bb89 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feac73290f888b3; op2val:0x3fea23204299f289;
op3val:0x3fe5df3df406bb89; valaddr_reg:x3; val_offset:3558*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3558*FLEN/8, x4, x1, x2)

inst_1187:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xac73290f888b3 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xa23204299f289 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x5df3df406bb89 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feac73290f888b3; op2val:0x3fea23204299f289;
op3val:0x3fe5df3df406bb89; valaddr_reg:x3; val_offset:3561*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3561*FLEN/8, x4, x1, x2)

inst_1188:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xac73290f888b3 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xa23204299f289 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x5df3df406bb89 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feac73290f888b3; op2val:0x3fea23204299f289;
op3val:0x3fe5df3df406bb89; valaddr_reg:x3; val_offset:3564*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3564*FLEN/8, x4, x1, x2)

inst_1189:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xac73290f888b3 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xa23204299f289 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x5df3df406bb89 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feac73290f888b3; op2val:0x3fea23204299f289;
op3val:0x3fe5df3df406bb89; valaddr_reg:x3; val_offset:3567*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3567*FLEN/8, x4, x1, x2)

inst_1190:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xb12509ee3433b and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x1cfd7451f90cd and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xe231ed6e8cedc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feb12509ee3433b; op2val:0x3ff1cfd7451f90cd;
op3val:0x3fee231ed6e8cedc; valaddr_reg:x3; val_offset:3570*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3570*FLEN/8, x4, x1, x2)

inst_1191:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xb12509ee3433b and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x1cfd7451f90cd and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xe231ed6e8cedc and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feb12509ee3433b; op2val:0x3ff1cfd7451f90cd;
op3val:0x3fee231ed6e8cedc; valaddr_reg:x3; val_offset:3573*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3573*FLEN/8, x4, x1, x2)

inst_1192:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xb12509ee3433b and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x1cfd7451f90cd and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xe231ed6e8cedc and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feb12509ee3433b; op2val:0x3ff1cfd7451f90cd;
op3val:0x3fee231ed6e8cedc; valaddr_reg:x3; val_offset:3576*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3576*FLEN/8, x4, x1, x2)

inst_1193:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xb12509ee3433b and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x1cfd7451f90cd and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xe231ed6e8cedc and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feb12509ee3433b; op2val:0x3ff1cfd7451f90cd;
op3val:0x3fee231ed6e8cedc; valaddr_reg:x3; val_offset:3579*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3579*FLEN/8, x4, x1, x2)

inst_1194:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xb12509ee3433b and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x1cfd7451f90cd and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xe231ed6e8cedc and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feb12509ee3433b; op2val:0x3ff1cfd7451f90cd;
op3val:0x3fee231ed6e8cedc; valaddr_reg:x3; val_offset:3582*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3582*FLEN/8, x4, x1, x2)

inst_1195:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xb17a4ef1f15ce and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x0581fe4addef5 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0xbacdcfb492790 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feb17a4ef1f15ce; op2val:0x3fd0581fe4addef5;
op3val:0x3fcbacdcfb492790; valaddr_reg:x3; val_offset:3585*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3585*FLEN/8, x4, x1, x2)

inst_1196:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xb17a4ef1f15ce and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x0581fe4addef5 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0xbacdcfb492790 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feb17a4ef1f15ce; op2val:0x3fd0581fe4addef5;
op3val:0x3fcbacdcfb492790; valaddr_reg:x3; val_offset:3588*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3588*FLEN/8, x4, x1, x2)

inst_1197:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xb17a4ef1f15ce and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x0581fe4addef5 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0xbacdcfb492790 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feb17a4ef1f15ce; op2val:0x3fd0581fe4addef5;
op3val:0x3fcbacdcfb492790; valaddr_reg:x3; val_offset:3591*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3591*FLEN/8, x4, x1, x2)

inst_1198:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xb17a4ef1f15ce and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x0581fe4addef5 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0xbacdcfb492790 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feb17a4ef1f15ce; op2val:0x3fd0581fe4addef5;
op3val:0x3fcbacdcfb492790; valaddr_reg:x3; val_offset:3594*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3594*FLEN/8, x4, x1, x2)

inst_1199:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xb17a4ef1f15ce and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x0581fe4addef5 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0xbacdcfb492790 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feb17a4ef1f15ce; op2val:0x3fd0581fe4addef5;
op3val:0x3fcbacdcfb492790; valaddr_reg:x3; val_offset:3597*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3597*FLEN/8, x4, x1, x2)

inst_1200:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xb2afe79f880e6 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x044293842e79f and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xb9ebb31330ee6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feb2afe79f880e6; op2val:0x3fe044293842e79f;
op3val:0x3fdb9ebb31330ee6; valaddr_reg:x3; val_offset:3600*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3600*FLEN/8, x4, x1, x2)

inst_1201:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xb2afe79f880e6 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x044293842e79f and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xb9ebb31330ee6 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feb2afe79f880e6; op2val:0x3fe044293842e79f;
op3val:0x3fdb9ebb31330ee6; valaddr_reg:x3; val_offset:3603*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3603*FLEN/8, x4, x1, x2)

inst_1202:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xb2afe79f880e6 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x044293842e79f and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xb9ebb31330ee6 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feb2afe79f880e6; op2val:0x3fe044293842e79f;
op3val:0x3fdb9ebb31330ee6; valaddr_reg:x3; val_offset:3606*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3606*FLEN/8, x4, x1, x2)

inst_1203:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xb2afe79f880e6 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x044293842e79f and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xb9ebb31330ee6 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feb2afe79f880e6; op2val:0x3fe044293842e79f;
op3val:0x3fdb9ebb31330ee6; valaddr_reg:x3; val_offset:3609*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3609*FLEN/8, x4, x1, x2)

inst_1204:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xb2afe79f880e6 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x044293842e79f and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xb9ebb31330ee6 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feb2afe79f880e6; op2val:0x3fe044293842e79f;
op3val:0x3fdb9ebb31330ee6; valaddr_reg:x3; val_offset:3612*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3612*FLEN/8, x4, x1, x2)

inst_1205:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xb30bd3343e263 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xb0d1c6a3fbf50 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x6fc43950b44b0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feb30bd3343e263; op2val:0x3feb0d1c6a3fbf50;
op3val:0x3fe6fc43950b44b0; valaddr_reg:x3; val_offset:3615*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3615*FLEN/8, x4, x1, x2)

inst_1206:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xb30bd3343e263 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xb0d1c6a3fbf50 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x6fc43950b44b0 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feb30bd3343e263; op2val:0x3feb0d1c6a3fbf50;
op3val:0x3fe6fc43950b44b0; valaddr_reg:x3; val_offset:3618*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3618*FLEN/8, x4, x1, x2)

inst_1207:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xb30bd3343e263 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xb0d1c6a3fbf50 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x6fc43950b44b0 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feb30bd3343e263; op2val:0x3feb0d1c6a3fbf50;
op3val:0x3fe6fc43950b44b0; valaddr_reg:x3; val_offset:3621*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3621*FLEN/8, x4, x1, x2)

inst_1208:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xb30bd3343e263 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xb0d1c6a3fbf50 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x6fc43950b44b0 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feb30bd3343e263; op2val:0x3feb0d1c6a3fbf50;
op3val:0x3fe6fc43950b44b0; valaddr_reg:x3; val_offset:3624*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3624*FLEN/8, x4, x1, x2)

inst_1209:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xb30bd3343e263 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xb0d1c6a3fbf50 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x6fc43950b44b0 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feb30bd3343e263; op2val:0x3feb0d1c6a3fbf50;
op3val:0x3fe6fc43950b44b0; valaddr_reg:x3; val_offset:3627*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3627*FLEN/8, x4, x1, x2)

inst_1210:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xb49433e84bab8 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x8f8a758950ee5 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x54af8e9e791b6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feb49433e84bab8; op2val:0x3fd8f8a758950ee5;
op3val:0x3fd54af8e9e791b6; valaddr_reg:x3; val_offset:3630*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3630*FLEN/8, x4, x1, x2)

inst_1211:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xb49433e84bab8 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x8f8a758950ee5 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x54af8e9e791b6 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feb49433e84bab8; op2val:0x3fd8f8a758950ee5;
op3val:0x3fd54af8e9e791b6; valaddr_reg:x3; val_offset:3633*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3633*FLEN/8, x4, x1, x2)

inst_1212:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xb49433e84bab8 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x8f8a758950ee5 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x54af8e9e791b6 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feb49433e84bab8; op2val:0x3fd8f8a758950ee5;
op3val:0x3fd54af8e9e791b6; valaddr_reg:x3; val_offset:3636*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3636*FLEN/8, x4, x1, x2)

inst_1213:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xb49433e84bab8 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x8f8a758950ee5 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x54af8e9e791b6 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feb49433e84bab8; op2val:0x3fd8f8a758950ee5;
op3val:0x3fd54af8e9e791b6; valaddr_reg:x3; val_offset:3639*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3639*FLEN/8, x4, x1, x2)

inst_1214:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xb49433e84bab8 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x8f8a758950ee5 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x54af8e9e791b6 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feb49433e84bab8; op2val:0x3fd8f8a758950ee5;
op3val:0x3fd54af8e9e791b6; valaddr_reg:x3; val_offset:3642*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3642*FLEN/8, x4, x1, x2)

inst_1215:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xb5c7fb946bf36 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xc063e5e7707a2 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x7f6466e0d993e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feb5c7fb946bf36; op2val:0x3fdc063e5e7707a2;
op3val:0x3fd7f6466e0d993e; valaddr_reg:x3; val_offset:3645*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3645*FLEN/8, x4, x1, x2)

inst_1216:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xb5c7fb946bf36 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xc063e5e7707a2 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x7f6466e0d993e and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feb5c7fb946bf36; op2val:0x3fdc063e5e7707a2;
op3val:0x3fd7f6466e0d993e; valaddr_reg:x3; val_offset:3648*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3648*FLEN/8, x4, x1, x2)

inst_1217:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xb5c7fb946bf36 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xc063e5e7707a2 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x7f6466e0d993e and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feb5c7fb946bf36; op2val:0x3fdc063e5e7707a2;
op3val:0x3fd7f6466e0d993e; valaddr_reg:x3; val_offset:3651*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3651*FLEN/8, x4, x1, x2)

inst_1218:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xb5c7fb946bf36 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xc063e5e7707a2 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x7f6466e0d993e and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feb5c7fb946bf36; op2val:0x3fdc063e5e7707a2;
op3val:0x3fd7f6466e0d993e; valaddr_reg:x3; val_offset:3654*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3654*FLEN/8, x4, x1, x2)

inst_1219:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xb5c7fb946bf36 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xc063e5e7707a2 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x7f6466e0d993e and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feb5c7fb946bf36; op2val:0x3fdc063e5e7707a2;
op3val:0x3fd7f6466e0d993e; valaddr_reg:x3; val_offset:3657*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3657*FLEN/8, x4, x1, x2)

inst_1220:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xb8a0a63e0df83 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x268b076b3a4fa and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xfaf7caea7bcb4 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feb8a0a63e0df83; op2val:0x3ff268b076b3a4fa;
op3val:0x3fefaf7caea7bcb4; valaddr_reg:x3; val_offset:3660*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3660*FLEN/8, x4, x1, x2)

inst_1221:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xb8a0a63e0df83 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x268b076b3a4fa and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xfaf7caea7bcb4 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feb8a0a63e0df83; op2val:0x3ff268b076b3a4fa;
op3val:0x3fefaf7caea7bcb4; valaddr_reg:x3; val_offset:3663*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3663*FLEN/8, x4, x1, x2)

inst_1222:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xb8a0a63e0df83 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x268b076b3a4fa and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xfaf7caea7bcb4 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feb8a0a63e0df83; op2val:0x3ff268b076b3a4fa;
op3val:0x3fefaf7caea7bcb4; valaddr_reg:x3; val_offset:3666*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3666*FLEN/8, x4, x1, x2)

inst_1223:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xb8a0a63e0df83 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x268b076b3a4fa and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xfaf7caea7bcb4 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feb8a0a63e0df83; op2val:0x3ff268b076b3a4fa;
op3val:0x3fefaf7caea7bcb4; valaddr_reg:x3; val_offset:3669*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3669*FLEN/8, x4, x1, x2)

inst_1224:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xb8a0a63e0df83 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x268b076b3a4fa and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xfaf7caea7bcb4 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feb8a0a63e0df83; op2val:0x3ff268b076b3a4fa;
op3val:0x3fefaf7caea7bcb4; valaddr_reg:x3; val_offset:3672*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3672*FLEN/8, x4, x1, x2)

inst_1225:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xb9d1b28ba1cec and fs2 == 0 and fe2 == 0x3fb and fm2 == 0x0ca68ebe491b3 and fs3 == 0 and fe3 == 0x3fa and fm3 == 0xcfa6fb3eacc70 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feb9d1b28ba1cec; op2val:0x3fb0ca68ebe491b3;
op3val:0x3facfa6fb3eacc70; valaddr_reg:x3; val_offset:3675*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3675*FLEN/8, x4, x1, x2)

inst_1226:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xb9d1b28ba1cec and fs2 == 0 and fe2 == 0x3fb and fm2 == 0x0ca68ebe491b3 and fs3 == 0 and fe3 == 0x3fa and fm3 == 0xcfa6fb3eacc70 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feb9d1b28ba1cec; op2val:0x3fb0ca68ebe491b3;
op3val:0x3facfa6fb3eacc70; valaddr_reg:x3; val_offset:3678*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3678*FLEN/8, x4, x1, x2)

inst_1227:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xb9d1b28ba1cec and fs2 == 0 and fe2 == 0x3fb and fm2 == 0x0ca68ebe491b3 and fs3 == 0 and fe3 == 0x3fa and fm3 == 0xcfa6fb3eacc70 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feb9d1b28ba1cec; op2val:0x3fb0ca68ebe491b3;
op3val:0x3facfa6fb3eacc70; valaddr_reg:x3; val_offset:3681*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3681*FLEN/8, x4, x1, x2)

inst_1228:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xb9d1b28ba1cec and fs2 == 0 and fe2 == 0x3fb and fm2 == 0x0ca68ebe491b3 and fs3 == 0 and fe3 == 0x3fa and fm3 == 0xcfa6fb3eacc70 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feb9d1b28ba1cec; op2val:0x3fb0ca68ebe491b3;
op3val:0x3facfa6fb3eacc70; valaddr_reg:x3; val_offset:3684*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3684*FLEN/8, x4, x1, x2)

inst_1229:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xb9d1b28ba1cec and fs2 == 0 and fe2 == 0x3fb and fm2 == 0x0ca68ebe491b3 and fs3 == 0 and fe3 == 0x3fa and fm3 == 0xcfa6fb3eacc70 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feb9d1b28ba1cec; op2val:0x3fb0ca68ebe491b3;
op3val:0x3facfa6fb3eacc70; valaddr_reg:x3; val_offset:3687*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3687*FLEN/8, x4, x1, x2)

inst_1230:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xb9f8ddecdc410 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x099acd554292f and fs3 == 0 and fe3 == 0x3fb and fm3 == 0xca8ddfef2cc40 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feb9f8ddecdc410; op2val:0x3fc099acd554292f;
op3val:0x3fbca8ddfef2cc40; valaddr_reg:x3; val_offset:3690*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3690*FLEN/8, x4, x1, x2)

inst_1231:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xb9f8ddecdc410 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x099acd554292f and fs3 == 0 and fe3 == 0x3fb and fm3 == 0xca8ddfef2cc40 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feb9f8ddecdc410; op2val:0x3fc099acd554292f;
op3val:0x3fbca8ddfef2cc40; valaddr_reg:x3; val_offset:3693*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3693*FLEN/8, x4, x1, x2)

inst_1232:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xb9f8ddecdc410 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x099acd554292f and fs3 == 0 and fe3 == 0x3fb and fm3 == 0xca8ddfef2cc40 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feb9f8ddecdc410; op2val:0x3fc099acd554292f;
op3val:0x3fbca8ddfef2cc40; valaddr_reg:x3; val_offset:3696*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3696*FLEN/8, x4, x1, x2)

inst_1233:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xb9f8ddecdc410 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x099acd554292f and fs3 == 0 and fe3 == 0x3fb and fm3 == 0xca8ddfef2cc40 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feb9f8ddecdc410; op2val:0x3fc099acd554292f;
op3val:0x3fbca8ddfef2cc40; valaddr_reg:x3; val_offset:3699*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3699*FLEN/8, x4, x1, x2)

inst_1234:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xb9f8ddecdc410 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x099acd554292f and fs3 == 0 and fe3 == 0x3fb and fm3 == 0xca8ddfef2cc40 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feb9f8ddecdc410; op2val:0x3fc099acd554292f;
op3val:0x3fbca8ddfef2cc40; valaddr_reg:x3; val_offset:3702*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3702*FLEN/8, x4, x1, x2)

inst_1235:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xbaeb31b628abb and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x0aaea87f19c76 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xcd6691094ff93 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3febaeb31b628abb; op2val:0x3ff0aaea87f19c76;
op3val:0x3fecd6691094ff93; valaddr_reg:x3; val_offset:3705*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3705*FLEN/8, x4, x1, x2)

inst_1236:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xbaeb31b628abb and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x0aaea87f19c76 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xcd6691094ff93 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3febaeb31b628abb; op2val:0x3ff0aaea87f19c76;
op3val:0x3fecd6691094ff93; valaddr_reg:x3; val_offset:3708*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3708*FLEN/8, x4, x1, x2)

inst_1237:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xbaeb31b628abb and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x0aaea87f19c76 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xcd6691094ff93 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3febaeb31b628abb; op2val:0x3ff0aaea87f19c76;
op3val:0x3fecd6691094ff93; valaddr_reg:x3; val_offset:3711*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3711*FLEN/8, x4, x1, x2)

inst_1238:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xbaeb31b628abb and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x0aaea87f19c76 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xcd6691094ff93 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3febaeb31b628abb; op2val:0x3ff0aaea87f19c76;
op3val:0x3fecd6691094ff93; valaddr_reg:x3; val_offset:3714*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3714*FLEN/8, x4, x1, x2)

inst_1239:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xbaeb31b628abb and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x0aaea87f19c76 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xcd6691094ff93 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3febaeb31b628abb; op2val:0x3ff0aaea87f19c76;
op3val:0x3fecd6691094ff93; valaddr_reg:x3; val_offset:3717*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3717*FLEN/8, x4, x1, x2)

inst_1240:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xbc38b337f0b3e and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x56bb61e719328 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x295c735d121c2 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3febc38b337f0b3e; op2val:0x3fe56bb61e719328;
op3val:0x3fe295c735d121c2; valaddr_reg:x3; val_offset:3720*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3720*FLEN/8, x4, x1, x2)

inst_1241:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xbc38b337f0b3e and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x56bb61e719328 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x295c735d121c2 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3febc38b337f0b3e; op2val:0x3fe56bb61e719328;
op3val:0x3fe295c735d121c2; valaddr_reg:x3; val_offset:3723*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3723*FLEN/8, x4, x1, x2)

inst_1242:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xbc38b337f0b3e and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x56bb61e719328 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x295c735d121c2 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3febc38b337f0b3e; op2val:0x3fe56bb61e719328;
op3val:0x3fe295c735d121c2; valaddr_reg:x3; val_offset:3726*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3726*FLEN/8, x4, x1, x2)

inst_1243:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xbc38b337f0b3e and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x56bb61e719328 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x295c735d121c2 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3febc38b337f0b3e; op2val:0x3fe56bb61e719328;
op3val:0x3fe295c735d121c2; valaddr_reg:x3; val_offset:3729*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3729*FLEN/8, x4, x1, x2)

inst_1244:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xbc38b337f0b3e and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x56bb61e719328 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x295c735d121c2 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3febc38b337f0b3e; op2val:0x3fe56bb61e719328;
op3val:0x3fe295c735d121c2; valaddr_reg:x3; val_offset:3732*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3732*FLEN/8, x4, x1, x2)

inst_1245:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xbef8fd1889579 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x88904d0ee291d and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x56b49b1368b80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3febef8fd1889579; op2val:0x3fc88904d0ee291d;
op3val:0x3fc56b49b1368b80; valaddr_reg:x3; val_offset:3735*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3735*FLEN/8, x4, x1, x2)

inst_1246:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xbef8fd1889579 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x88904d0ee291d and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x56b49b1368b80 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3febef8fd1889579; op2val:0x3fc88904d0ee291d;
op3val:0x3fc56b49b1368b80; valaddr_reg:x3; val_offset:3738*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3738*FLEN/8, x4, x1, x2)

inst_1247:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xbef8fd1889579 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x88904d0ee291d and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x56b49b1368b80 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3febef8fd1889579; op2val:0x3fc88904d0ee291d;
op3val:0x3fc56b49b1368b80; valaddr_reg:x3; val_offset:3741*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3741*FLEN/8, x4, x1, x2)

inst_1248:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xbef8fd1889579 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x88904d0ee291d and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x56b49b1368b80 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3febef8fd1889579; op2val:0x3fc88904d0ee291d;
op3val:0x3fc56b49b1368b80; valaddr_reg:x3; val_offset:3744*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3744*FLEN/8, x4, x1, x2)

inst_1249:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xbef8fd1889579 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x88904d0ee291d and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x56b49b1368b80 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3febef8fd1889579; op2val:0x3fc88904d0ee291d;
op3val:0x3fc56b49b1368b80; valaddr_reg:x3; val_offset:3747*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3747*FLEN/8, x4, x1, x2)

inst_1250:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xbf0f84d48fb20 and fs2 == 0 and fe2 == 0x3f2 and fm2 == 0x2395b6ab51f79 and fs3 == 0 and fe3 == 0x3f1 and fm3 == 0xfd34170626000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3febf0f84d48fb20; op2val:0x3f22395b6ab51f79;
op3val:0x3f1fd34170626000; valaddr_reg:x3; val_offset:3750*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3750*FLEN/8, x4, x1, x2)

inst_1251:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xbf0f84d48fb20 and fs2 == 0 and fe2 == 0x3f2 and fm2 == 0x2395b6ab51f79 and fs3 == 0 and fe3 == 0x3f1 and fm3 == 0xfd34170626000 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3febf0f84d48fb20; op2val:0x3f22395b6ab51f79;
op3val:0x3f1fd34170626000; valaddr_reg:x3; val_offset:3753*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3753*FLEN/8, x4, x1, x2)

inst_1252:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xbf0f84d48fb20 and fs2 == 0 and fe2 == 0x3f2 and fm2 == 0x2395b6ab51f79 and fs3 == 0 and fe3 == 0x3f1 and fm3 == 0xfd34170626000 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3febf0f84d48fb20; op2val:0x3f22395b6ab51f79;
op3val:0x3f1fd34170626000; valaddr_reg:x3; val_offset:3756*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3756*FLEN/8, x4, x1, x2)

inst_1253:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xbf0f84d48fb20 and fs2 == 0 and fe2 == 0x3f2 and fm2 == 0x2395b6ab51f79 and fs3 == 0 and fe3 == 0x3f1 and fm3 == 0xfd34170626000 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3febf0f84d48fb20; op2val:0x3f22395b6ab51f79;
op3val:0x3f1fd34170626000; valaddr_reg:x3; val_offset:3759*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3759*FLEN/8, x4, x1, x2)

inst_1254:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xbf0f84d48fb20 and fs2 == 0 and fe2 == 0x3f2 and fm2 == 0x2395b6ab51f79 and fs3 == 0 and fe3 == 0x3f1 and fm3 == 0xfd34170626000 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3febf0f84d48fb20; op2val:0x3f22395b6ab51f79;
op3val:0x3f1fd34170626000; valaddr_reg:x3; val_offset:3762*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3762*FLEN/8, x4, x1, x2)

inst_1255:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc0c538efed5cd and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xdfad1d4fdcd15 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xa4703f195f562 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fec0c538efed5cd; op2val:0x3fddfad1d4fdcd15;
op3val:0x3fda4703f195f562; valaddr_reg:x3; val_offset:3765*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3765*FLEN/8, x4, x1, x2)

inst_1256:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc0c538efed5cd and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xdfad1d4fdcd15 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xa4703f195f562 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fec0c538efed5cd; op2val:0x3fddfad1d4fdcd15;
op3val:0x3fda4703f195f562; valaddr_reg:x3; val_offset:3768*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3768*FLEN/8, x4, x1, x2)

inst_1257:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc0c538efed5cd and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xdfad1d4fdcd15 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xa4703f195f562 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fec0c538efed5cd; op2val:0x3fddfad1d4fdcd15;
op3val:0x3fda4703f195f562; valaddr_reg:x3; val_offset:3771*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3771*FLEN/8, x4, x1, x2)

inst_1258:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc0c538efed5cd and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xdfad1d4fdcd15 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xa4703f195f562 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fec0c538efed5cd; op2val:0x3fddfad1d4fdcd15;
op3val:0x3fda4703f195f562; valaddr_reg:x3; val_offset:3774*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3774*FLEN/8, x4, x1, x2)

inst_1259:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc0c538efed5cd and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xdfad1d4fdcd15 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xa4703f195f562 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fec0c538efed5cd; op2val:0x3fddfad1d4fdcd15;
op3val:0x3fda4703f195f562; valaddr_reg:x3; val_offset:3777*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3777*FLEN/8, x4, x1, x2)

inst_1260:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc287b4c2af288 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x024783d5d141f and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xc68a9fd313334 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fec287b4c2af288; op2val:0x3ff024783d5d141f;
op3val:0x3fec68a9fd313334; valaddr_reg:x3; val_offset:3780*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3780*FLEN/8, x4, x1, x2)

inst_1261:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc287b4c2af288 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x024783d5d141f and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xc68a9fd313334 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fec287b4c2af288; op2val:0x3ff024783d5d141f;
op3val:0x3fec68a9fd313334; valaddr_reg:x3; val_offset:3783*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3783*FLEN/8, x4, x1, x2)

inst_1262:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc287b4c2af288 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x024783d5d141f and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xc68a9fd313334 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fec287b4c2af288; op2val:0x3ff024783d5d141f;
op3val:0x3fec68a9fd313334; valaddr_reg:x3; val_offset:3786*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3786*FLEN/8, x4, x1, x2)

inst_1263:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc287b4c2af288 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x024783d5d141f and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xc68a9fd313334 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fec287b4c2af288; op2val:0x3ff024783d5d141f;
op3val:0x3fec68a9fd313334; valaddr_reg:x3; val_offset:3789*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3789*FLEN/8, x4, x1, x2)

inst_1264:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc287b4c2af288 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x024783d5d141f and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xc68a9fd313334 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fec287b4c2af288; op2val:0x3ff024783d5d141f;
op3val:0x3fec68a9fd313334; valaddr_reg:x3; val_offset:3792*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3792*FLEN/8, x4, x1, x2)

inst_1265:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc2d2b5053b5c6 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x9dcfb84c11eb6 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x6c5ddd7b9c1b8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fec2d2b5053b5c6; op2val:0x3fd9dcfb84c11eb6;
op3val:0x3fd6c5ddd7b9c1b8; valaddr_reg:x3; val_offset:3795*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3795*FLEN/8, x4, x1, x2)

inst_1266:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc2d2b5053b5c6 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x9dcfb84c11eb6 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x6c5ddd7b9c1b8 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fec2d2b5053b5c6; op2val:0x3fd9dcfb84c11eb6;
op3val:0x3fd6c5ddd7b9c1b8; valaddr_reg:x3; val_offset:3798*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3798*FLEN/8, x4, x1, x2)

inst_1267:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc2d2b5053b5c6 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x9dcfb84c11eb6 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x6c5ddd7b9c1b8 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fec2d2b5053b5c6; op2val:0x3fd9dcfb84c11eb6;
op3val:0x3fd6c5ddd7b9c1b8; valaddr_reg:x3; val_offset:3801*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3801*FLEN/8, x4, x1, x2)

inst_1268:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc2d2b5053b5c6 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x9dcfb84c11eb6 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x6c5ddd7b9c1b8 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fec2d2b5053b5c6; op2val:0x3fd9dcfb84c11eb6;
op3val:0x3fd6c5ddd7b9c1b8; valaddr_reg:x3; val_offset:3804*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3804*FLEN/8, x4, x1, x2)

inst_1269:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc2d2b5053b5c6 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x9dcfb84c11eb6 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x6c5ddd7b9c1b8 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fec2d2b5053b5c6; op2val:0x3fd9dcfb84c11eb6;
op3val:0x3fd6c5ddd7b9c1b8; valaddr_reg:x3; val_offset:3807*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3807*FLEN/8, x4, x1, x2)

inst_1270:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc338003e04edb and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x5d5f08a852bff and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x33e56caf892c2 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fec338003e04edb; op2val:0x3fe5d5f08a852bff;
op3val:0x3fe33e56caf892c2; valaddr_reg:x3; val_offset:3810*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3810*FLEN/8, x4, x1, x2)

inst_1271:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc338003e04edb and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x5d5f08a852bff and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x33e56caf892c2 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fec338003e04edb; op2val:0x3fe5d5f08a852bff;
op3val:0x3fe33e56caf892c2; valaddr_reg:x3; val_offset:3813*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3813*FLEN/8, x4, x1, x2)

inst_1272:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc338003e04edb and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x5d5f08a852bff and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x33e56caf892c2 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fec338003e04edb; op2val:0x3fe5d5f08a852bff;
op3val:0x3fe33e56caf892c2; valaddr_reg:x3; val_offset:3816*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3816*FLEN/8, x4, x1, x2)

inst_1273:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc338003e04edb and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x5d5f08a852bff and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x33e56caf892c2 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fec338003e04edb; op2val:0x3fe5d5f08a852bff;
op3val:0x3fe33e56caf892c2; valaddr_reg:x3; val_offset:3819*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3819*FLEN/8, x4, x1, x2)

inst_1274:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc338003e04edb and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x5d5f08a852bff and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x33e56caf892c2 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fec338003e04edb; op2val:0x3fe5d5f08a852bff;
op3val:0x3fe33e56caf892c2; valaddr_reg:x3; val_offset:3822*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3822*FLEN/8, x4, x1, x2)

inst_1275:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc408ee3185172 and fs2 == 0 and fe2 == 0x3fa and fm2 == 0xde1d1fca45333 and fs3 == 0 and fe3 == 0x3fa and fm3 == 0xa61e0cf2d8190 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fec408ee3185172; op2val:0x3fade1d1fca45333;
op3val:0x3faa61e0cf2d8190; valaddr_reg:x3; val_offset:3825*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3825*FLEN/8, x4, x1, x2)

inst_1276:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc408ee3185172 and fs2 == 0 and fe2 == 0x3fa and fm2 == 0xde1d1fca45333 and fs3 == 0 and fe3 == 0x3fa and fm3 == 0xa61e0cf2d8190 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fec408ee3185172; op2val:0x3fade1d1fca45333;
op3val:0x3faa61e0cf2d8190; valaddr_reg:x3; val_offset:3828*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3828*FLEN/8, x4, x1, x2)

inst_1277:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc408ee3185172 and fs2 == 0 and fe2 == 0x3fa and fm2 == 0xde1d1fca45333 and fs3 == 0 and fe3 == 0x3fa and fm3 == 0xa61e0cf2d8190 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fec408ee3185172; op2val:0x3fade1d1fca45333;
op3val:0x3faa61e0cf2d8190; valaddr_reg:x3; val_offset:3831*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3831*FLEN/8, x4, x1, x2)

inst_1278:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc408ee3185172 and fs2 == 0 and fe2 == 0x3fa and fm2 == 0xde1d1fca45333 and fs3 == 0 and fe3 == 0x3fa and fm3 == 0xa61e0cf2d8190 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fec408ee3185172; op2val:0x3fade1d1fca45333;
op3val:0x3faa61e0cf2d8190; valaddr_reg:x3; val_offset:3834*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3834*FLEN/8, x4, x1, x2)

inst_1279:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc408ee3185172 and fs2 == 0 and fe2 == 0x3fa and fm2 == 0xde1d1fca45333 and fs3 == 0 and fe3 == 0x3fa and fm3 == 0xa61e0cf2d8190 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fec408ee3185172; op2val:0x3fade1d1fca45333;
op3val:0x3faa61e0cf2d8190; valaddr_reg:x3; val_offset:3837*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3837*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_11)

inst_1280:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc42f97d9131d2 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x8709186b9baa6 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x595a60ddb5f4e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fec42f97d9131d2; op2val:0x3fd8709186b9baa6;
op3val:0x3fd595a60ddb5f4e; valaddr_reg:x3; val_offset:3840*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3840*FLEN/8, x4, x1, x2)

inst_1281:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc42f97d9131d2 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x8709186b9baa6 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x595a60ddb5f4e and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fec42f97d9131d2; op2val:0x3fd8709186b9baa6;
op3val:0x3fd595a60ddb5f4e; valaddr_reg:x3; val_offset:3843*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3843*FLEN/8, x4, x1, x2)

inst_1282:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc42f97d9131d2 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x8709186b9baa6 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x595a60ddb5f4e and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fec42f97d9131d2; op2val:0x3fd8709186b9baa6;
op3val:0x3fd595a60ddb5f4e; valaddr_reg:x3; val_offset:3846*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3846*FLEN/8, x4, x1, x2)

inst_1283:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc42f97d9131d2 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x8709186b9baa6 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x595a60ddb5f4e and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fec42f97d9131d2; op2val:0x3fd8709186b9baa6;
op3val:0x3fd595a60ddb5f4e; valaddr_reg:x3; val_offset:3849*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3849*FLEN/8, x4, x1, x2)

inst_1284:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc42f97d9131d2 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x8709186b9baa6 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x595a60ddb5f4e and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fec42f97d9131d2; op2val:0x3fd8709186b9baa6;
op3val:0x3fd595a60ddb5f4e; valaddr_reg:x3; val_offset:3852*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3852*FLEN/8, x4, x1, x2)

inst_1285:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc5542916582f3 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x4e2f61ec1bc22 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x27e3dabad83b6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fec5542916582f3; op2val:0x3fd4e2f61ec1bc22;
op3val:0x3fd27e3dabad83b6; valaddr_reg:x3; val_offset:3855*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3855*FLEN/8, x4, x1, x2)

inst_1286:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc5542916582f3 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x4e2f61ec1bc22 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x27e3dabad83b6 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fec5542916582f3; op2val:0x3fd4e2f61ec1bc22;
op3val:0x3fd27e3dabad83b6; valaddr_reg:x3; val_offset:3858*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3858*FLEN/8, x4, x1, x2)

inst_1287:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc5542916582f3 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x4e2f61ec1bc22 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x27e3dabad83b6 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fec5542916582f3; op2val:0x3fd4e2f61ec1bc22;
op3val:0x3fd27e3dabad83b6; valaddr_reg:x3; val_offset:3861*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3861*FLEN/8, x4, x1, x2)

inst_1288:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc5542916582f3 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x4e2f61ec1bc22 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x27e3dabad83b6 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fec5542916582f3; op2val:0x3fd4e2f61ec1bc22;
op3val:0x3fd27e3dabad83b6; valaddr_reg:x3; val_offset:3864*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3864*FLEN/8, x4, x1, x2)

inst_1289:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc5542916582f3 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x4e2f61ec1bc22 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x27e3dabad83b6 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fec5542916582f3; op2val:0x3fd4e2f61ec1bc22;
op3val:0x3fd27e3dabad83b6; valaddr_reg:x3; val_offset:3867*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3867*FLEN/8, x4, x1, x2)

inst_1290:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc6955e545889b and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x44a7f71d15a8a and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x203fa6d0863c6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fec6955e545889b; op2val:0x3fd44a7f71d15a8a;
op3val:0x3fd203fa6d0863c6; valaddr_reg:x3; val_offset:3870*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3870*FLEN/8, x4, x1, x2)

inst_1291:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc6955e545889b and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x44a7f71d15a8a and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x203fa6d0863c6 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fec6955e545889b; op2val:0x3fd44a7f71d15a8a;
op3val:0x3fd203fa6d0863c6; valaddr_reg:x3; val_offset:3873*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3873*FLEN/8, x4, x1, x2)

inst_1292:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc6955e545889b and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x44a7f71d15a8a and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x203fa6d0863c6 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fec6955e545889b; op2val:0x3fd44a7f71d15a8a;
op3val:0x3fd203fa6d0863c6; valaddr_reg:x3; val_offset:3876*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3876*FLEN/8, x4, x1, x2)

inst_1293:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc6955e545889b and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x44a7f71d15a8a and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x203fa6d0863c6 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fec6955e545889b; op2val:0x3fd44a7f71d15a8a;
op3val:0x3fd203fa6d0863c6; valaddr_reg:x3; val_offset:3879*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3879*FLEN/8, x4, x1, x2)

inst_1294:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc6955e545889b and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x44a7f71d15a8a and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x203fa6d0863c6 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fec6955e545889b; op2val:0x3fd44a7f71d15a8a;
op3val:0x3fd203fa6d0863c6; valaddr_reg:x3; val_offset:3882*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3882*FLEN/8, x4, x1, x2)

inst_1295:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc6c2a0bc1c69a and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x439ccfefef77e and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x1f6f106471c5b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fec6c2a0bc1c69a; op2val:0x3fe439ccfefef77e;
op3val:0x3fe1f6f106471c5b; valaddr_reg:x3; val_offset:3885*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3885*FLEN/8, x4, x1, x2)

inst_1296:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc6c2a0bc1c69a and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x439ccfefef77e and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x1f6f106471c5b and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fec6c2a0bc1c69a; op2val:0x3fe439ccfefef77e;
op3val:0x3fe1f6f106471c5b; valaddr_reg:x3; val_offset:3888*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3888*FLEN/8, x4, x1, x2)

inst_1297:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc6c2a0bc1c69a and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x439ccfefef77e and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x1f6f106471c5b and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fec6c2a0bc1c69a; op2val:0x3fe439ccfefef77e;
op3val:0x3fe1f6f106471c5b; valaddr_reg:x3; val_offset:3891*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3891*FLEN/8, x4, x1, x2)

inst_1298:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc6c2a0bc1c69a and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x439ccfefef77e and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x1f6f106471c5b and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fec6c2a0bc1c69a; op2val:0x3fe439ccfefef77e;
op3val:0x3fe1f6f106471c5b; valaddr_reg:x3; val_offset:3894*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3894*FLEN/8, x4, x1, x2)

inst_1299:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc6c2a0bc1c69a and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x439ccfefef77e and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x1f6f106471c5b and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fec6c2a0bc1c69a; op2val:0x3fe439ccfefef77e;
op3val:0x3fe1f6f106471c5b; valaddr_reg:x3; val_offset:3897*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3897*FLEN/8, x4, x1, x2)

inst_1300:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc76af8d181cfc and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xbc3b0b0de2c98 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x8b23486e80ffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fec76af8d181cfc; op2val:0x3fdbc3b0b0de2c98;
op3val:0x3fd8b23486e80ffe; valaddr_reg:x3; val_offset:3900*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3900*FLEN/8, x4, x1, x2)

inst_1301:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc76af8d181cfc and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xbc3b0b0de2c98 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x8b23486e80ffe and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fec76af8d181cfc; op2val:0x3fdbc3b0b0de2c98;
op3val:0x3fd8b23486e80ffe; valaddr_reg:x3; val_offset:3903*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3903*FLEN/8, x4, x1, x2)

inst_1302:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc76af8d181cfc and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xbc3b0b0de2c98 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x8b23486e80ffe and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fec76af8d181cfc; op2val:0x3fdbc3b0b0de2c98;
op3val:0x3fd8b23486e80ffe; valaddr_reg:x3; val_offset:3906*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3906*FLEN/8, x4, x1, x2)

inst_1303:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc76af8d181cfc and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xbc3b0b0de2c98 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x8b23486e80ffe and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fec76af8d181cfc; op2val:0x3fdbc3b0b0de2c98;
op3val:0x3fd8b23486e80ffe; valaddr_reg:x3; val_offset:3909*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3909*FLEN/8, x4, x1, x2)

inst_1304:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc76af8d181cfc and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xbc3b0b0de2c98 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x8b23486e80ffe and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fec76af8d181cfc; op2val:0x3fdbc3b0b0de2c98;
op3val:0x3fd8b23486e80ffe; valaddr_reg:x3; val_offset:3912*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3912*FLEN/8, x4, x1, x2)

inst_1305:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc7fb9bda4e751 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xc856b9693b8ce and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x96695331bd7e4 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fec7fb9bda4e751; op2val:0x3fdc856b9693b8ce;
op3val:0x3fd96695331bd7e4; valaddr_reg:x3; val_offset:3915*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3915*FLEN/8, x4, x1, x2)

inst_1306:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc7fb9bda4e751 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xc856b9693b8ce and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x96695331bd7e4 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fec7fb9bda4e751; op2val:0x3fdc856b9693b8ce;
op3val:0x3fd96695331bd7e4; valaddr_reg:x3; val_offset:3918*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3918*FLEN/8, x4, x1, x2)

inst_1307:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc7fb9bda4e751 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xc856b9693b8ce and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x96695331bd7e4 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fec7fb9bda4e751; op2val:0x3fdc856b9693b8ce;
op3val:0x3fd96695331bd7e4; valaddr_reg:x3; val_offset:3921*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3921*FLEN/8, x4, x1, x2)

inst_1308:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc7fb9bda4e751 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xc856b9693b8ce and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x96695331bd7e4 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fec7fb9bda4e751; op2val:0x3fdc856b9693b8ce;
op3val:0x3fd96695331bd7e4; valaddr_reg:x3; val_offset:3924*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3924*FLEN/8, x4, x1, x2)

inst_1309:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc7fb9bda4e751 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xc856b9693b8ce and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x96695331bd7e4 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fec7fb9bda4e751; op2val:0x3fdc856b9693b8ce;
op3val:0x3fd96695331bd7e4; valaddr_reg:x3; val_offset:3927*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3927*FLEN/8, x4, x1, x2)

inst_1310:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xca04e2fd1a601 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x95b5f9d22910a and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x6aefa7c2d4f84 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feca04e2fd1a601; op2val:0x3fd95b5f9d22910a;
op3val:0x3fd6aefa7c2d4f84; valaddr_reg:x3; val_offset:3930*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3930*FLEN/8, x4, x1, x2)

inst_1311:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xca04e2fd1a601 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x95b5f9d22910a and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x6aefa7c2d4f84 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feca04e2fd1a601; op2val:0x3fd95b5f9d22910a;
op3val:0x3fd6aefa7c2d4f84; valaddr_reg:x3; val_offset:3933*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3933*FLEN/8, x4, x1, x2)

inst_1312:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xca04e2fd1a601 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x95b5f9d22910a and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x6aefa7c2d4f84 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feca04e2fd1a601; op2val:0x3fd95b5f9d22910a;
op3val:0x3fd6aefa7c2d4f84; valaddr_reg:x3; val_offset:3936*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3936*FLEN/8, x4, x1, x2)

inst_1313:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xca04e2fd1a601 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x95b5f9d22910a and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x6aefa7c2d4f84 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feca04e2fd1a601; op2val:0x3fd95b5f9d22910a;
op3val:0x3fd6aefa7c2d4f84; valaddr_reg:x3; val_offset:3939*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3939*FLEN/8, x4, x1, x2)

inst_1314:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xca04e2fd1a601 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x95b5f9d22910a and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x6aefa7c2d4f84 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feca04e2fd1a601; op2val:0x3fd95b5f9d22910a;
op3val:0x3fd6aefa7c2d4f84; valaddr_reg:x3; val_offset:3942*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3942*FLEN/8, x4, x1, x2)

inst_1315:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xcbcfca50cc95e and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x76ce5c2521c31 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x509a1c241b248 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fecbcfca50cc95e; op2val:0x3fc76ce5c2521c31;
op3val:0x3fc509a1c241b248; valaddr_reg:x3; val_offset:3945*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3945*FLEN/8, x4, x1, x2)

inst_1316:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xcbcfca50cc95e and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x76ce5c2521c31 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x509a1c241b248 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fecbcfca50cc95e; op2val:0x3fc76ce5c2521c31;
op3val:0x3fc509a1c241b248; valaddr_reg:x3; val_offset:3948*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3948*FLEN/8, x4, x1, x2)

inst_1317:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xcbcfca50cc95e and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x76ce5c2521c31 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x509a1c241b248 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fecbcfca50cc95e; op2val:0x3fc76ce5c2521c31;
op3val:0x3fc509a1c241b248; valaddr_reg:x3; val_offset:3951*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3951*FLEN/8, x4, x1, x2)

inst_1318:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xcbcfca50cc95e and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x76ce5c2521c31 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x509a1c241b248 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fecbcfca50cc95e; op2val:0x3fc76ce5c2521c31;
op3val:0x3fc509a1c241b248; valaddr_reg:x3; val_offset:3954*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3954*FLEN/8, x4, x1, x2)

inst_1319:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xcbcfca50cc95e and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x76ce5c2521c31 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x509a1c241b248 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fecbcfca50cc95e; op2val:0x3fc76ce5c2521c31;
op3val:0x3fc509a1c241b248; valaddr_reg:x3; val_offset:3957*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3957*FLEN/8, x4, x1, x2)

inst_1320:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xccb87b2842f44 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x6b0791c53642c and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x46ab9b026f34e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feccb87b2842f44; op2val:0x3fe6b0791c53642c;
op3val:0x3fe46ab9b026f34e; valaddr_reg:x3; val_offset:3960*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3960*FLEN/8, x4, x1, x2)

inst_1321:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xccb87b2842f44 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x6b0791c53642c and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x46ab9b026f34e and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feccb87b2842f44; op2val:0x3fe6b0791c53642c;
op3val:0x3fe46ab9b026f34e; valaddr_reg:x3; val_offset:3963*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3963*FLEN/8, x4, x1, x2)

inst_1322:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xccb87b2842f44 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x6b0791c53642c and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x46ab9b026f34e and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feccb87b2842f44; op2val:0x3fe6b0791c53642c;
op3val:0x3fe46ab9b026f34e; valaddr_reg:x3; val_offset:3966*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3966*FLEN/8, x4, x1, x2)

inst_1323:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xccb87b2842f44 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x6b0791c53642c and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x46ab9b026f34e and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feccb87b2842f44; op2val:0x3fe6b0791c53642c;
op3val:0x3fe46ab9b026f34e; valaddr_reg:x3; val_offset:3969*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3969*FLEN/8, x4, x1, x2)

inst_1324:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xccb87b2842f44 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x6b0791c53642c and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x46ab9b026f34e and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feccb87b2842f44; op2val:0x3fe6b0791c53642c;
op3val:0x3fe46ab9b026f34e; valaddr_reg:x3; val_offset:3972*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3972*FLEN/8, x4, x1, x2)

inst_1325:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xccb9a094e1988 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x67d0a7a1ec198 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x43c7ea59e15e2 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feccb9a094e1988; op2val:0x3fe67d0a7a1ec198;
op3val:0x3fe43c7ea59e15e2; valaddr_reg:x3; val_offset:3975*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3975*FLEN/8, x4, x1, x2)

inst_1326:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xccb9a094e1988 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x67d0a7a1ec198 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x43c7ea59e15e2 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feccb9a094e1988; op2val:0x3fe67d0a7a1ec198;
op3val:0x3fe43c7ea59e15e2; valaddr_reg:x3; val_offset:3978*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3978*FLEN/8, x4, x1, x2)

inst_1327:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xccb9a094e1988 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x67d0a7a1ec198 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x43c7ea59e15e2 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feccb9a094e1988; op2val:0x3fe67d0a7a1ec198;
op3val:0x3fe43c7ea59e15e2; valaddr_reg:x3; val_offset:3981*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3981*FLEN/8, x4, x1, x2)

inst_1328:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xccb9a094e1988 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x67d0a7a1ec198 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x43c7ea59e15e2 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feccb9a094e1988; op2val:0x3fe67d0a7a1ec198;
op3val:0x3fe43c7ea59e15e2; valaddr_reg:x3; val_offset:3984*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3984*FLEN/8, x4, x1, x2)

inst_1329:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xccb9a094e1988 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x67d0a7a1ec198 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x43c7ea59e15e2 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feccb9a094e1988; op2val:0x3fe67d0a7a1ec198;
op3val:0x3fe43c7ea59e15e2; valaddr_reg:x3; val_offset:3987*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 3987*FLEN/8, x4, x1, x2)

inst_1330:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xcffc04cfa4c29 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xc597495f8b96c and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x9b0d939326f54 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fecffc04cfa4c29; op2val:0x3fec597495f8b96c;
op3val:0x3fe9b0d939326f54; valaddr_reg:x3; val_offset:3990*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 3990*FLEN/8, x4, x1, x2)

inst_1331:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xcffc04cfa4c29 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xc597495f8b96c and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x9b0d939326f54 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fecffc04cfa4c29; op2val:0x3fec597495f8b96c;
op3val:0x3fe9b0d939326f54; valaddr_reg:x3; val_offset:3993*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 3993*FLEN/8, x4, x1, x2)

inst_1332:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xcffc04cfa4c29 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xc597495f8b96c and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x9b0d939326f54 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fecffc04cfa4c29; op2val:0x3fec597495f8b96c;
op3val:0x3fe9b0d939326f54; valaddr_reg:x3; val_offset:3996*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 3996*FLEN/8, x4, x1, x2)

inst_1333:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xcffc04cfa4c29 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xc597495f8b96c and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x9b0d939326f54 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fecffc04cfa4c29; op2val:0x3fec597495f8b96c;
op3val:0x3fe9b0d939326f54; valaddr_reg:x3; val_offset:3999*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 3999*FLEN/8, x4, x1, x2)

inst_1334:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xcffc04cfa4c29 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xc597495f8b96c and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x9b0d939326f54 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fecffc04cfa4c29; op2val:0x3fec597495f8b96c;
op3val:0x3fe9b0d939326f54; valaddr_reg:x3; val_offset:4002*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 4002*FLEN/8, x4, x1, x2)

inst_1335:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xd009521a915b8 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xc92ca2d8ff90e and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x9e58c62d638fa and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fed009521a915b8; op2val:0x3fdc92ca2d8ff90e;
op3val:0x3fd9e58c62d638fa; valaddr_reg:x3; val_offset:4005*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 4005*FLEN/8, x4, x1, x2)

inst_1336:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xd009521a915b8 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xc92ca2d8ff90e and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x9e58c62d638fa and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fed009521a915b8; op2val:0x3fdc92ca2d8ff90e;
op3val:0x3fd9e58c62d638fa; valaddr_reg:x3; val_offset:4008*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 4008*FLEN/8, x4, x1, x2)

inst_1337:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xd009521a915b8 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xc92ca2d8ff90e and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x9e58c62d638fa and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fed009521a915b8; op2val:0x3fdc92ca2d8ff90e;
op3val:0x3fd9e58c62d638fa; valaddr_reg:x3; val_offset:4011*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 4011*FLEN/8, x4, x1, x2)

inst_1338:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xd009521a915b8 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xc92ca2d8ff90e and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x9e58c62d638fa and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fed009521a915b8; op2val:0x3fdc92ca2d8ff90e;
op3val:0x3fd9e58c62d638fa; valaddr_reg:x3; val_offset:4014*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 4014*FLEN/8, x4, x1, x2)

inst_1339:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xd009521a915b8 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xc92ca2d8ff90e and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x9e58c62d638fa and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fed009521a915b8; op2val:0x3fdc92ca2d8ff90e;
op3val:0x3fd9e58c62d638fa; valaddr_reg:x3; val_offset:4017*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 4017*FLEN/8, x4, x1, x2)

inst_1340:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xd050a9a8d2b05 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0xc306f8539197c and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x99055f970dda8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fed050a9a8d2b05; op2val:0x3fcc306f8539197c;
op3val:0x3fc99055f970dda8; valaddr_reg:x3; val_offset:4020*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 4020*FLEN/8, x4, x1, x2)

inst_1341:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xd050a9a8d2b05 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0xc306f8539197c and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x99055f970dda8 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fed050a9a8d2b05; op2val:0x3fcc306f8539197c;
op3val:0x3fc99055f970dda8; valaddr_reg:x3; val_offset:4023*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 4023*FLEN/8, x4, x1, x2)

inst_1342:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xd050a9a8d2b05 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0xc306f8539197c and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x99055f970dda8 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fed050a9a8d2b05; op2val:0x3fcc306f8539197c;
op3val:0x3fc99055f970dda8; valaddr_reg:x3; val_offset:4026*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 4026*FLEN/8, x4, x1, x2)

inst_1343:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xd050a9a8d2b05 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0xc306f8539197c and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x99055f970dda8 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fed050a9a8d2b05; op2val:0x3fcc306f8539197c;
op3val:0x3fc99055f970dda8; valaddr_reg:x3; val_offset:4029*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 4029*FLEN/8, x4, x1, x2)

inst_1344:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xd050a9a8d2b05 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0xc306f8539197c and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x99055f970dda8 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fed050a9a8d2b05; op2val:0x3fcc306f8539197c;
op3val:0x3fc99055f970dda8; valaddr_reg:x3; val_offset:4032*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 4032*FLEN/8, x4, x1, x2)

inst_1345:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xd1ddd54bd498c and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x195938a733f67 and fs3 == 0 and fe3 == 0x3fb and fm3 == 0xfffedc5830a70 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fed1ddd54bd498c; op2val:0x3fc195938a733f67;
op3val:0x3fbfffedc5830a70; valaddr_reg:x3; val_offset:4035*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 4035*FLEN/8, x4, x1, x2)

inst_1346:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xd1ddd54bd498c and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x195938a733f67 and fs3 == 0 and fe3 == 0x3fb and fm3 == 0xfffedc5830a70 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fed1ddd54bd498c; op2val:0x3fc195938a733f67;
op3val:0x3fbfffedc5830a70; valaddr_reg:x3; val_offset:4038*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 4038*FLEN/8, x4, x1, x2)

inst_1347:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xd1ddd54bd498c and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x195938a733f67 and fs3 == 0 and fe3 == 0x3fb and fm3 == 0xfffedc5830a70 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fed1ddd54bd498c; op2val:0x3fc195938a733f67;
op3val:0x3fbfffedc5830a70; valaddr_reg:x3; val_offset:4041*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 4041*FLEN/8, x4, x1, x2)

inst_1348:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xd1ddd54bd498c and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x195938a733f67 and fs3 == 0 and fe3 == 0x3fb and fm3 == 0xfffedc5830a70 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fed1ddd54bd498c; op2val:0x3fc195938a733f67;
op3val:0x3fbfffedc5830a70; valaddr_reg:x3; val_offset:4044*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 4044*FLEN/8, x4, x1, x2)

inst_1349:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xd1ddd54bd498c and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x195938a733f67 and fs3 == 0 and fe3 == 0x3fb and fm3 == 0xfffedc5830a70 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fed1ddd54bd498c; op2val:0x3fc195938a733f67;
op3val:0x3fbfffedc5830a70; valaddr_reg:x3; val_offset:4047*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 4047*FLEN/8, x4, x1, x2)

inst_1350:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xd3a017fa76c8a and fs2 == 0 and fe2 == 0x3f9 and fm2 == 0x669a5924fe285 and fs3 == 0 and fe3 == 0x3f9 and fm3 == 0x4785e95674f20 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fed3a017fa76c8a; op2val:0x3f9669a5924fe285;
op3val:0x3f94785e95674f20; valaddr_reg:x3; val_offset:4050*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 4050*FLEN/8, x4, x1, x2)

inst_1351:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xd3a017fa76c8a and fs2 == 0 and fe2 == 0x3f9 and fm2 == 0x669a5924fe285 and fs3 == 0 and fe3 == 0x3f9 and fm3 == 0x4785e95674f20 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fed3a017fa76c8a; op2val:0x3f9669a5924fe285;
op3val:0x3f94785e95674f20; valaddr_reg:x3; val_offset:4053*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 4053*FLEN/8, x4, x1, x2)

inst_1352:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xd3a017fa76c8a and fs2 == 0 and fe2 == 0x3f9 and fm2 == 0x669a5924fe285 and fs3 == 0 and fe3 == 0x3f9 and fm3 == 0x4785e95674f20 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fed3a017fa76c8a; op2val:0x3f9669a5924fe285;
op3val:0x3f94785e95674f20; valaddr_reg:x3; val_offset:4056*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 4056*FLEN/8, x4, x1, x2)

inst_1353:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xd3a017fa76c8a and fs2 == 0 and fe2 == 0x3f9 and fm2 == 0x669a5924fe285 and fs3 == 0 and fe3 == 0x3f9 and fm3 == 0x4785e95674f20 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fed3a017fa76c8a; op2val:0x3f9669a5924fe285;
op3val:0x3f94785e95674f20; valaddr_reg:x3; val_offset:4059*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 4059*FLEN/8, x4, x1, x2)

inst_1354:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xd3a017fa76c8a and fs2 == 0 and fe2 == 0x3f9 and fm2 == 0x669a5924fe285 and fs3 == 0 and fe3 == 0x3f9 and fm3 == 0x4785e95674f20 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fed3a017fa76c8a; op2val:0x3f9669a5924fe285;
op3val:0x3f94785e95674f20; valaddr_reg:x3; val_offset:4062*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 4062*FLEN/8, x4, x1, x2)

inst_1355:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xd4268b7006f33 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x9b4bb3296c3d9 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x78122865344b8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fed4268b7006f33; op2val:0x3fc9b4bb3296c3d9;
op3val:0x3fc78122865344b8; valaddr_reg:x3; val_offset:4065*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 4065*FLEN/8, x4, x1, x2)

inst_1356:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xd4268b7006f33 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x9b4bb3296c3d9 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x78122865344b8 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fed4268b7006f33; op2val:0x3fc9b4bb3296c3d9;
op3val:0x3fc78122865344b8; valaddr_reg:x3; val_offset:4068*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 4068*FLEN/8, x4, x1, x2)

inst_1357:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xd4268b7006f33 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x9b4bb3296c3d9 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x78122865344b8 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fed4268b7006f33; op2val:0x3fc9b4bb3296c3d9;
op3val:0x3fc78122865344b8; valaddr_reg:x3; val_offset:4071*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 4071*FLEN/8, x4, x1, x2)

inst_1358:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xd4268b7006f33 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x9b4bb3296c3d9 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x78122865344b8 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fed4268b7006f33; op2val:0x3fc9b4bb3296c3d9;
op3val:0x3fc78122865344b8; valaddr_reg:x3; val_offset:4074*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 4074*FLEN/8, x4, x1, x2)

inst_1359:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xd4268b7006f33 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x9b4bb3296c3d9 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x78122865344b8 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fed4268b7006f33; op2val:0x3fc9b4bb3296c3d9;
op3val:0x3fc78122865344b8; valaddr_reg:x3; val_offset:4077*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 4077*FLEN/8, x4, x1, x2)

inst_1360:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xd539c6b5b1376 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xaab0cc0980b62 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x870b192f358dc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fed539c6b5b1376; op2val:0x3fdaab0cc0980b62;
op3val:0x3fd870b192f358dc; valaddr_reg:x3; val_offset:4080*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 4080*FLEN/8, x4, x1, x2)

inst_1361:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xd539c6b5b1376 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xaab0cc0980b62 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x870b192f358dc and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fed539c6b5b1376; op2val:0x3fdaab0cc0980b62;
op3val:0x3fd870b192f358dc; valaddr_reg:x3; val_offset:4083*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 4083*FLEN/8, x4, x1, x2)

inst_1362:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xd539c6b5b1376 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xaab0cc0980b62 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x870b192f358dc and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fed539c6b5b1376; op2val:0x3fdaab0cc0980b62;
op3val:0x3fd870b192f358dc; valaddr_reg:x3; val_offset:4086*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 4086*FLEN/8, x4, x1, x2)

inst_1363:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xd539c6b5b1376 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xaab0cc0980b62 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x870b192f358dc and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fed539c6b5b1376; op2val:0x3fdaab0cc0980b62;
op3val:0x3fd870b192f358dc; valaddr_reg:x3; val_offset:4089*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 4089*FLEN/8, x4, x1, x2)

inst_1364:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xd539c6b5b1376 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xaab0cc0980b62 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x870b192f358dc and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fed539c6b5b1376; op2val:0x3fdaab0cc0980b62;
op3val:0x3fd870b192f358dc; valaddr_reg:x3; val_offset:4092*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 4092*FLEN/8, x4, x1, x2)

inst_1365:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xda2076e993049 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x093e6659372e1 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xeb3f2c82c09e0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feda2076e993049; op2val:0x3fe093e6659372e1;
op3val:0x3fdeb3f2c82c09e0; valaddr_reg:x3; val_offset:4095*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 4095*FLEN/8, x4, x1, x2)

inst_1366:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xda2076e993049 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x093e6659372e1 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xeb3f2c82c09e0 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feda2076e993049; op2val:0x3fe093e6659372e1;
op3val:0x3fdeb3f2c82c09e0; valaddr_reg:x3; val_offset:4098*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 4098*FLEN/8, x4, x1, x2)

inst_1367:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xda2076e993049 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x093e6659372e1 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xeb3f2c82c09e0 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feda2076e993049; op2val:0x3fe093e6659372e1;
op3val:0x3fdeb3f2c82c09e0; valaddr_reg:x3; val_offset:4101*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 4101*FLEN/8, x4, x1, x2)

inst_1368:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xda2076e993049 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x093e6659372e1 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xeb3f2c82c09e0 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feda2076e993049; op2val:0x3fe093e6659372e1;
op3val:0x3fdeb3f2c82c09e0; valaddr_reg:x3; val_offset:4104*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 4104*FLEN/8, x4, x1, x2)

inst_1369:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xda2076e993049 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x093e6659372e1 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xeb3f2c82c09e0 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feda2076e993049; op2val:0x3fe093e6659372e1;
op3val:0x3fdeb3f2c82c09e0; valaddr_reg:x3; val_offset:4107*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 4107*FLEN/8, x4, x1, x2)

inst_1370:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xdbf773a164ce0 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xe414f79a5a6d1 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xc2036926735eb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fedbf773a164ce0; op2val:0x3fee414f79a5a6d1;
op3val:0x3fec2036926735eb; valaddr_reg:x3; val_offset:4110*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 4110*FLEN/8, x4, x1, x2)

inst_1371:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xdbf773a164ce0 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xe414f79a5a6d1 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xc2036926735eb and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fedbf773a164ce0; op2val:0x3fee414f79a5a6d1;
op3val:0x3fec2036926735eb; valaddr_reg:x3; val_offset:4113*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 4113*FLEN/8, x4, x1, x2)

inst_1372:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xdbf773a164ce0 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xe414f79a5a6d1 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xc2036926735eb and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fedbf773a164ce0; op2val:0x3fee414f79a5a6d1;
op3val:0x3fec2036926735eb; valaddr_reg:x3; val_offset:4116*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 4116*FLEN/8, x4, x1, x2)

inst_1373:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xdbf773a164ce0 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xe414f79a5a6d1 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xc2036926735eb and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fedbf773a164ce0; op2val:0x3fee414f79a5a6d1;
op3val:0x3fec2036926735eb; valaddr_reg:x3; val_offset:4119*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 4119*FLEN/8, x4, x1, x2)

inst_1374:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xdbf773a164ce0 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xe414f79a5a6d1 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xc2036926735eb and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fedbf773a164ce0; op2val:0x3fee414f79a5a6d1;
op3val:0x3fec2036926735eb; valaddr_reg:x3; val_offset:4122*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 4122*FLEN/8, x4, x1, x2)

inst_1375:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xdd239a60f6c26 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x11fec1eaf3e8b and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xfeadca6253e2d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fedd239a60f6c26; op2val:0x3ff11fec1eaf3e8b;
op3val:0x3fefeadca6253e2d; valaddr_reg:x3; val_offset:4125*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 4125*FLEN/8, x4, x1, x2)

inst_1376:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xdd239a60f6c26 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x11fec1eaf3e8b and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xfeadca6253e2d and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fedd239a60f6c26; op2val:0x3ff11fec1eaf3e8b;
op3val:0x3fefeadca6253e2d; valaddr_reg:x3; val_offset:4128*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 4128*FLEN/8, x4, x1, x2)

inst_1377:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xdd239a60f6c26 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x11fec1eaf3e8b and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xfeadca6253e2d and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fedd239a60f6c26; op2val:0x3ff11fec1eaf3e8b;
op3val:0x3fefeadca6253e2d; valaddr_reg:x3; val_offset:4131*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 4131*FLEN/8, x4, x1, x2)

inst_1378:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xdd239a60f6c26 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x11fec1eaf3e8b and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xfeadca6253e2d and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fedd239a60f6c26; op2val:0x3ff11fec1eaf3e8b;
op3val:0x3fefeadca6253e2d; valaddr_reg:x3; val_offset:4134*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 4134*FLEN/8, x4, x1, x2)

inst_1379:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xdd239a60f6c26 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x11fec1eaf3e8b and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xfeadca6253e2d and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fedd239a60f6c26; op2val:0x3ff11fec1eaf3e8b;
op3val:0x3fefeadca6253e2d; valaddr_reg:x3; val_offset:4137*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 4137*FLEN/8, x4, x1, x2)

inst_1380:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xddd671af42724 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xdc76904032308 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xbcac04bd5cc94 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feddd671af42724; op2val:0x3fedc76904032308;
op3val:0x3febcac04bd5cc94; valaddr_reg:x3; val_offset:4140*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 4140*FLEN/8, x4, x1, x2)

inst_1381:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xddd671af42724 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xdc76904032308 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xbcac04bd5cc94 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feddd671af42724; op2val:0x3fedc76904032308;
op3val:0x3febcac04bd5cc94; valaddr_reg:x3; val_offset:4143*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 4143*FLEN/8, x4, x1, x2)

inst_1382:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xddd671af42724 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xdc76904032308 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xbcac04bd5cc94 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feddd671af42724; op2val:0x3fedc76904032308;
op3val:0x3febcac04bd5cc94; valaddr_reg:x3; val_offset:4146*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 4146*FLEN/8, x4, x1, x2)

inst_1383:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xddd671af42724 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xdc76904032308 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xbcac04bd5cc94 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feddd671af42724; op2val:0x3fedc76904032308;
op3val:0x3febcac04bd5cc94; valaddr_reg:x3; val_offset:4149*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 4149*FLEN/8, x4, x1, x2)

inst_1384:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xddd671af42724 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xdc76904032308 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xbcac04bd5cc94 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feddd671af42724; op2val:0x3fedc76904032308;
op3val:0x3febcac04bd5cc94; valaddr_reg:x3; val_offset:4152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 4152*FLEN/8, x4, x1, x2)

inst_1385:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xdf66a04ac9e63 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0xb50497c1cbcaf and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x993164b54f2f4 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fedf66a04ac9e63; op2val:0x3fcb50497c1cbcaf;
op3val:0x3fc993164b54f2f4; valaddr_reg:x3; val_offset:4155*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 4155*FLEN/8, x4, x1, x2)

inst_1386:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xdf66a04ac9e63 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0xb50497c1cbcaf and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x993164b54f2f4 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fedf66a04ac9e63; op2val:0x3fcb50497c1cbcaf;
op3val:0x3fc993164b54f2f4; valaddr_reg:x3; val_offset:4158*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 4158*FLEN/8, x4, x1, x2)

inst_1387:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xdf66a04ac9e63 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0xb50497c1cbcaf and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x993164b54f2f4 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fedf66a04ac9e63; op2val:0x3fcb50497c1cbcaf;
op3val:0x3fc993164b54f2f4; valaddr_reg:x3; val_offset:4161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 4161*FLEN/8, x4, x1, x2)

inst_1388:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xdf66a04ac9e63 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0xb50497c1cbcaf and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x993164b54f2f4 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fedf66a04ac9e63; op2val:0x3fcb50497c1cbcaf;
op3val:0x3fc993164b54f2f4; valaddr_reg:x3; val_offset:4164*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 4164*FLEN/8, x4, x1, x2)

inst_1389:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xdf66a04ac9e63 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0xb50497c1cbcaf and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x993164b54f2f4 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fedf66a04ac9e63; op2val:0x3fcb50497c1cbcaf;
op3val:0x3fc993164b54f2f4; valaddr_reg:x3; val_offset:4167*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 4167*FLEN/8, x4, x1, x2)

inst_1390:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xe4716cb4233e4 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x384a00c1f1cc5 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x277b2359fd0d3 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fee4716cb4233e4; op2val:0x3fe384a00c1f1cc5;
op3val:0x3fe277b2359fd0d3; valaddr_reg:x3; val_offset:4170*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 4170*FLEN/8, x4, x1, x2)

inst_1391:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xe4716cb4233e4 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x384a00c1f1cc5 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x277b2359fd0d3 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fee4716cb4233e4; op2val:0x3fe384a00c1f1cc5;
op3val:0x3fe277b2359fd0d3; valaddr_reg:x3; val_offset:4173*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 4173*FLEN/8, x4, x1, x2)

inst_1392:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xe4716cb4233e4 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x384a00c1f1cc5 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x277b2359fd0d3 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fee4716cb4233e4; op2val:0x3fe384a00c1f1cc5;
op3val:0x3fe277b2359fd0d3; valaddr_reg:x3; val_offset:4176*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 4176*FLEN/8, x4, x1, x2)

inst_1393:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xe4716cb4233e4 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x384a00c1f1cc5 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x277b2359fd0d3 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fee4716cb4233e4; op2val:0x3fe384a00c1f1cc5;
op3val:0x3fe277b2359fd0d3; valaddr_reg:x3; val_offset:4179*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 4179*FLEN/8, x4, x1, x2)

inst_1394:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xe4716cb4233e4 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x384a00c1f1cc5 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x277b2359fd0d3 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fee4716cb4233e4; op2val:0x3fe384a00c1f1cc5;
op3val:0x3fe277b2359fd0d3; valaddr_reg:x3; val_offset:4182*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 4182*FLEN/8, x4, x1, x2)

inst_1395:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xeb95f861c7629 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x0111a568f20fd and fs3 == 0 and fe3 == 0x3fc and fm3 == 0xeda370f0d67e4 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feeb95f861c7629; op2val:0x3fd0111a568f20fd;
op3val:0x3fceda370f0d67e4; valaddr_reg:x3; val_offset:4185*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 4185*FLEN/8, x4, x1, x2)

inst_1396:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xeb95f861c7629 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x0111a568f20fd and fs3 == 0 and fe3 == 0x3fc and fm3 == 0xeda370f0d67e4 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feeb95f861c7629; op2val:0x3fd0111a568f20fd;
op3val:0x3fceda370f0d67e4; valaddr_reg:x3; val_offset:4188*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 4188*FLEN/8, x4, x1, x2)

inst_1397:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xeb95f861c7629 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x0111a568f20fd and fs3 == 0 and fe3 == 0x3fc and fm3 == 0xeda370f0d67e4 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feeb95f861c7629; op2val:0x3fd0111a568f20fd;
op3val:0x3fceda370f0d67e4; valaddr_reg:x3; val_offset:4191*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 4191*FLEN/8, x4, x1, x2)

inst_1398:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xeb95f861c7629 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x0111a568f20fd and fs3 == 0 and fe3 == 0x3fc and fm3 == 0xeda370f0d67e4 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feeb95f861c7629; op2val:0x3fd0111a568f20fd;
op3val:0x3fceda370f0d67e4; valaddr_reg:x3; val_offset:4194*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 4194*FLEN/8, x4, x1, x2)

inst_1399:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xeb95f861c7629 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x0111a568f20fd and fs3 == 0 and fe3 == 0x3fc and fm3 == 0xeda370f0d67e4 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feeb95f861c7629; op2val:0x3fd0111a568f20fd;
op3val:0x3fceda370f0d67e4; valaddr_reg:x3; val_offset:4197*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 4197*FLEN/8, x4, x1, x2)

inst_1400:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xeddb692b7858e and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x05b51bb26c762 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xf8de13c90551e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feeddb692b7858e; op2val:0x3ff05b51bb26c762;
op3val:0x3fef8de13c90551e; valaddr_reg:x3; val_offset:4200*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 4200*FLEN/8, x4, x1, x2)

inst_1401:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xeddb692b7858e and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x05b51bb26c762 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xf8de13c90551e and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feeddb692b7858e; op2val:0x3ff05b51bb26c762;
op3val:0x3fef8de13c90551e; valaddr_reg:x3; val_offset:4203*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 4203*FLEN/8, x4, x1, x2)

inst_1402:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xeddb692b7858e and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x05b51bb26c762 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xf8de13c90551e and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feeddb692b7858e; op2val:0x3ff05b51bb26c762;
op3val:0x3fef8de13c90551e; valaddr_reg:x3; val_offset:4206*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 4206*FLEN/8, x4, x1, x2)

inst_1403:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xeddb692b7858e and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x05b51bb26c762 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xf8de13c90551e and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feeddb692b7858e; op2val:0x3ff05b51bb26c762;
op3val:0x3fef8de13c90551e; valaddr_reg:x3; val_offset:4209*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 4209*FLEN/8, x4, x1, x2)

inst_1404:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xeddb692b7858e and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x05b51bb26c762 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xf8de13c90551e and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feeddb692b7858e; op2val:0x3ff05b51bb26c762;
op3val:0x3fef8de13c90551e; valaddr_reg:x3; val_offset:4212*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 4212*FLEN/8, x4, x1, x2)

inst_1405:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xef3c8c28d42c2 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x4efdfb75879aa and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x44062a13c1cbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feef3c8c28d42c2; op2val:0x3fe4efdfb75879aa;
op3val:0x3fe44062a13c1cbb; valaddr_reg:x3; val_offset:4215*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 4215*FLEN/8, x4, x1, x2)

inst_1406:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xef3c8c28d42c2 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x4efdfb75879aa and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x44062a13c1cbb and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feef3c8c28d42c2; op2val:0x3fe4efdfb75879aa;
op3val:0x3fe44062a13c1cbb; valaddr_reg:x3; val_offset:4218*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 4218*FLEN/8, x4, x1, x2)

inst_1407:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xef3c8c28d42c2 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x4efdfb75879aa and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x44062a13c1cbb and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feef3c8c28d42c2; op2val:0x3fe4efdfb75879aa;
op3val:0x3fe44062a13c1cbb; valaddr_reg:x3; val_offset:4221*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 4221*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_12)

inst_1408:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xef3c8c28d42c2 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x4efdfb75879aa and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x44062a13c1cbb and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feef3c8c28d42c2; op2val:0x3fe4efdfb75879aa;
op3val:0x3fe44062a13c1cbb; valaddr_reg:x3; val_offset:4224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 4224*FLEN/8, x4, x1, x2)

inst_1409:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xef3c8c28d42c2 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x4efdfb75879aa and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x44062a13c1cbb and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feef3c8c28d42c2; op2val:0x3fe4efdfb75879aa;
op3val:0x3fe44062a13c1cbb; valaddr_reg:x3; val_offset:4227*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 4227*FLEN/8, x4, x1, x2)

inst_1410:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xef404650b37dc and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xb596b098e62b7 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xa7461eaa78bbf and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feef404650b37dc; op2val:0x3feb596b098e62b7;
op3val:0x3fea7461eaa78bbf; valaddr_reg:x3; val_offset:4230*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 4230*FLEN/8, x4, x1, x2)

inst_1411:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xef404650b37dc and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xb596b098e62b7 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xa7461eaa78bbf and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feef404650b37dc; op2val:0x3feb596b098e62b7;
op3val:0x3fea7461eaa78bbf; valaddr_reg:x3; val_offset:4233*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 4233*FLEN/8, x4, x1, x2)

inst_1412:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xef404650b37dc and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xb596b098e62b7 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xa7461eaa78bbf and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feef404650b37dc; op2val:0x3feb596b098e62b7;
op3val:0x3fea7461eaa78bbf; valaddr_reg:x3; val_offset:4236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 4236*FLEN/8, x4, x1, x2)

inst_1413:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xef404650b37dc and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xb596b098e62b7 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xa7461eaa78bbf and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feef404650b37dc; op2val:0x3feb596b098e62b7;
op3val:0x3fea7461eaa78bbf; valaddr_reg:x3; val_offset:4239*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 4239*FLEN/8, x4, x1, x2)

inst_1414:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xef404650b37dc and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xb596b098e62b7 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xa7461eaa78bbf and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feef404650b37dc; op2val:0x3feb596b098e62b7;
op3val:0x3fea7461eaa78bbf; valaddr_reg:x3; val_offset:4242*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 4242*FLEN/8, x4, x1, x2)

inst_1415:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xef85fc3c2af94 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xe3c96179fca73 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xd437cbe33a224 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feef85fc3c2af94; op2val:0x3fde3c96179fca73;
op3val:0x3fdd437cbe33a224; valaddr_reg:x3; val_offset:4245*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 4245*FLEN/8, x4, x1, x2)

inst_1416:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xef85fc3c2af94 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xe3c96179fca73 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xd437cbe33a224 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feef85fc3c2af94; op2val:0x3fde3c96179fca73;
op3val:0x3fdd437cbe33a224; valaddr_reg:x3; val_offset:4248*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 4248*FLEN/8, x4, x1, x2)

inst_1417:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xef85fc3c2af94 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xe3c96179fca73 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xd437cbe33a224 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feef85fc3c2af94; op2val:0x3fde3c96179fca73;
op3val:0x3fdd437cbe33a224; valaddr_reg:x3; val_offset:4251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 4251*FLEN/8, x4, x1, x2)

inst_1418:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xef85fc3c2af94 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xe3c96179fca73 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xd437cbe33a224 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feef85fc3c2af94; op2val:0x3fde3c96179fca73;
op3val:0x3fdd437cbe33a224; valaddr_reg:x3; val_offset:4254*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 4254*FLEN/8, x4, x1, x2)

inst_1419:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xef85fc3c2af94 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xe3c96179fca73 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xd437cbe33a224 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feef85fc3c2af94; op2val:0x3fde3c96179fca73;
op3val:0x3fdd437cbe33a224; valaddr_reg:x3; val_offset:4257*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 4257*FLEN/8, x4, x1, x2)

inst_1420:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xf0657cb41dd4e and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xf53e1684b360b and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xe5f780a55d6f8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fef0657cb41dd4e; op2val:0x3fdf53e1684b360b;
op3val:0x3fde5f780a55d6f8; valaddr_reg:x3; val_offset:4260*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 4260*FLEN/8, x4, x1, x2)

inst_1421:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xf0657cb41dd4e and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xf53e1684b360b and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xe5f780a55d6f8 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fef0657cb41dd4e; op2val:0x3fdf53e1684b360b;
op3val:0x3fde5f780a55d6f8; valaddr_reg:x3; val_offset:4263*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 4263*FLEN/8, x4, x1, x2)

inst_1422:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xf0657cb41dd4e and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xf53e1684b360b and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xe5f780a55d6f8 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fef0657cb41dd4e; op2val:0x3fdf53e1684b360b;
op3val:0x3fde5f780a55d6f8; valaddr_reg:x3; val_offset:4266*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 4266*FLEN/8, x4, x1, x2)

inst_1423:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xf0657cb41dd4e and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xf53e1684b360b and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xe5f780a55d6f8 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fef0657cb41dd4e; op2val:0x3fdf53e1684b360b;
op3val:0x3fde5f780a55d6f8; valaddr_reg:x3; val_offset:4269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 4269*FLEN/8, x4, x1, x2)

inst_1424:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xf0657cb41dd4e and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xf53e1684b360b and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xe5f780a55d6f8 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fef0657cb41dd4e; op2val:0x3fdf53e1684b360b;
op3val:0x3fde5f780a55d6f8; valaddr_reg:x3; val_offset:4272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 4272*FLEN/8, x4, x1, x2)

inst_1425:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xf09512d8f663d and fs2 == 0 and fe2 == 0x3fc and fm2 == 0xde1ec5085f9cb and fs3 == 0 and fe3 == 0x3fc and fm3 == 0xcfb9046e238e0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fef09512d8f663d; op2val:0x3fcde1ec5085f9cb;
op3val:0x3fccfb9046e238e0; valaddr_reg:x3; val_offset:4275*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 4275*FLEN/8, x4, x1, x2)

inst_1426:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xf09512d8f663d and fs2 == 0 and fe2 == 0x3fc and fm2 == 0xde1ec5085f9cb and fs3 == 0 and fe3 == 0x3fc and fm3 == 0xcfb9046e238e0 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fef09512d8f663d; op2val:0x3fcde1ec5085f9cb;
op3val:0x3fccfb9046e238e0; valaddr_reg:x3; val_offset:4278*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 4278*FLEN/8, x4, x1, x2)

inst_1427:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xf09512d8f663d and fs2 == 0 and fe2 == 0x3fc and fm2 == 0xde1ec5085f9cb and fs3 == 0 and fe3 == 0x3fc and fm3 == 0xcfb9046e238e0 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fef09512d8f663d; op2val:0x3fcde1ec5085f9cb;
op3val:0x3fccfb9046e238e0; valaddr_reg:x3; val_offset:4281*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 4281*FLEN/8, x4, x1, x2)

inst_1428:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xf09512d8f663d and fs2 == 0 and fe2 == 0x3fc and fm2 == 0xde1ec5085f9cb and fs3 == 0 and fe3 == 0x3fc and fm3 == 0xcfb9046e238e0 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fef09512d8f663d; op2val:0x3fcde1ec5085f9cb;
op3val:0x3fccfb9046e238e0; valaddr_reg:x3; val_offset:4284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 4284*FLEN/8, x4, x1, x2)

inst_1429:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xf09512d8f663d and fs2 == 0 and fe2 == 0x3fc and fm2 == 0xde1ec5085f9cb and fs3 == 0 and fe3 == 0x3fc and fm3 == 0xcfb9046e238e0 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fef09512d8f663d; op2val:0x3fcde1ec5085f9cb;
op3val:0x3fccfb9046e238e0; valaddr_reg:x3; val_offset:4287*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 4287*FLEN/8, x4, x1, x2)

inst_1430:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xf0b41d614d395 and fs2 == 0 and fe2 == 0x3f7 and fm2 == 0xadeea251f4089 and fs3 == 0 and fe3 == 0x3f7 and fm3 == 0xa1166bd02df80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fef0b41d614d395; op2val:0x3f7adeea251f4089;
op3val:0x3f7a1166bd02df80; valaddr_reg:x3; val_offset:4290*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 4290*FLEN/8, x4, x1, x2)

inst_1431:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xf0b41d614d395 and fs2 == 0 and fe2 == 0x3f7 and fm2 == 0xadeea251f4089 and fs3 == 0 and fe3 == 0x3f7 and fm3 == 0xa1166bd02df80 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fef0b41d614d395; op2val:0x3f7adeea251f4089;
op3val:0x3f7a1166bd02df80; valaddr_reg:x3; val_offset:4293*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 4293*FLEN/8, x4, x1, x2)

inst_1432:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xf0b41d614d395 and fs2 == 0 and fe2 == 0x3f7 and fm2 == 0xadeea251f4089 and fs3 == 0 and fe3 == 0x3f7 and fm3 == 0xa1166bd02df80 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fef0b41d614d395; op2val:0x3f7adeea251f4089;
op3val:0x3f7a1166bd02df80; valaddr_reg:x3; val_offset:4296*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 4296*FLEN/8, x4, x1, x2)

inst_1433:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xf0b41d614d395 and fs2 == 0 and fe2 == 0x3f7 and fm2 == 0xadeea251f4089 and fs3 == 0 and fe3 == 0x3f7 and fm3 == 0xa1166bd02df80 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fef0b41d614d395; op2val:0x3f7adeea251f4089;
op3val:0x3f7a1166bd02df80; valaddr_reg:x3; val_offset:4299*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 4299*FLEN/8, x4, x1, x2)

inst_1434:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xf0b41d614d395 and fs2 == 0 and fe2 == 0x3f7 and fm2 == 0xadeea251f4089 and fs3 == 0 and fe3 == 0x3f7 and fm3 == 0xa1166bd02df80 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fef0b41d614d395; op2val:0x3f7adeea251f4089;
op3val:0x3f7a1166bd02df80; valaddr_reg:x3; val_offset:4302*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 4302*FLEN/8, x4, x1, x2)

inst_1435:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xf172ac977516d and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x508a58ca75658 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x46f9ab7053a10 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fef172ac977516d; op2val:0x3fe508a58ca75658;
op3val:0x3fe46f9ab7053a10; valaddr_reg:x3; val_offset:4305*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 4305*FLEN/8, x4, x1, x2)

inst_1436:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xf172ac977516d and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x508a58ca75658 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x46f9ab7053a10 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fef172ac977516d; op2val:0x3fe508a58ca75658;
op3val:0x3fe46f9ab7053a10; valaddr_reg:x3; val_offset:4308*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 4308*FLEN/8, x4, x1, x2)

inst_1437:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xf172ac977516d and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x508a58ca75658 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x46f9ab7053a10 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fef172ac977516d; op2val:0x3fe508a58ca75658;
op3val:0x3fe46f9ab7053a10; valaddr_reg:x3; val_offset:4311*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 4311*FLEN/8, x4, x1, x2)

inst_1438:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xf172ac977516d and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x508a58ca75658 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x46f9ab7053a10 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fef172ac977516d; op2val:0x3fe508a58ca75658;
op3val:0x3fe46f9ab7053a10; valaddr_reg:x3; val_offset:4314*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 4314*FLEN/8, x4, x1, x2)

inst_1439:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xf172ac977516d and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x508a58ca75658 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x46f9ab7053a10 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fef172ac977516d; op2val:0x3fe508a58ca75658;
op3val:0x3fe46f9ab7053a10; valaddr_reg:x3; val_offset:4317*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 4317*FLEN/8, x4, x1, x2)

inst_1440:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xf1a83a28efc59 and fs2 == 0 and fe2 == 0x3fb and fm2 == 0x4b9343189713d and fs3 == 0 and fe3 == 0x3fb and fm3 == 0x4249649d941a8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fef1a83a28efc59; op2val:0x3fb4b9343189713d;
op3val:0x3fb4249649d941a8; valaddr_reg:x3; val_offset:4320*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 4320*FLEN/8, x4, x1, x2)

inst_1441:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xf1a83a28efc59 and fs2 == 0 and fe2 == 0x3fb and fm2 == 0x4b9343189713d and fs3 == 0 and fe3 == 0x3fb and fm3 == 0x4249649d941a8 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fef1a83a28efc59; op2val:0x3fb4b9343189713d;
op3val:0x3fb4249649d941a8; valaddr_reg:x3; val_offset:4323*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 4323*FLEN/8, x4, x1, x2)

inst_1442:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xf1a83a28efc59 and fs2 == 0 and fe2 == 0x3fb and fm2 == 0x4b9343189713d and fs3 == 0 and fe3 == 0x3fb and fm3 == 0x4249649d941a8 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fef1a83a28efc59; op2val:0x3fb4b9343189713d;
op3val:0x3fb4249649d941a8; valaddr_reg:x3; val_offset:4326*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 4326*FLEN/8, x4, x1, x2)

inst_1443:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xf1a83a28efc59 and fs2 == 0 and fe2 == 0x3fb and fm2 == 0x4b9343189713d and fs3 == 0 and fe3 == 0x3fb and fm3 == 0x4249649d941a8 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fef1a83a28efc59; op2val:0x3fb4b9343189713d;
op3val:0x3fb4249649d941a8; valaddr_reg:x3; val_offset:4329*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 4329*FLEN/8, x4, x1, x2)

inst_1444:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xf1a83a28efc59 and fs2 == 0 and fe2 == 0x3fb and fm2 == 0x4b9343189713d and fs3 == 0 and fe3 == 0x3fb and fm3 == 0x4249649d941a8 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fef1a83a28efc59; op2val:0x3fb4b9343189713d;
op3val:0x3fb4249649d941a8; valaddr_reg:x3; val_offset:4332*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 4332*FLEN/8, x4, x1, x2)

inst_1445:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xf3d53f4d3c995 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x9a5dd26d34fa2 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x909d5b59eca2c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fef3d53f4d3c995; op2val:0x3fe9a5dd26d34fa2;
op3val:0x3fe909d5b59eca2c; valaddr_reg:x3; val_offset:4335*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 4335*FLEN/8, x4, x1, x2)

inst_1446:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xf3d53f4d3c995 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x9a5dd26d34fa2 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x909d5b59eca2c and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fef3d53f4d3c995; op2val:0x3fe9a5dd26d34fa2;
op3val:0x3fe909d5b59eca2c; valaddr_reg:x3; val_offset:4338*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 4338*FLEN/8, x4, x1, x2)

inst_1447:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xf3d53f4d3c995 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x9a5dd26d34fa2 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x909d5b59eca2c and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fef3d53f4d3c995; op2val:0x3fe9a5dd26d34fa2;
op3val:0x3fe909d5b59eca2c; valaddr_reg:x3; val_offset:4341*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 4341*FLEN/8, x4, x1, x2)

inst_1448:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xf3d53f4d3c995 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x9a5dd26d34fa2 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x909d5b59eca2c and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fef3d53f4d3c995; op2val:0x3fe9a5dd26d34fa2;
op3val:0x3fe909d5b59eca2c; valaddr_reg:x3; val_offset:4344*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 4344*FLEN/8, x4, x1, x2)

inst_1449:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xf3d53f4d3c995 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x9a5dd26d34fa2 and fs3 == 0 and fe3 == 0x3fe and fm3 == 0x909d5b59eca2c and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fef3d53f4d3c995; op2val:0x3fe9a5dd26d34fa2;
op3val:0x3fe909d5b59eca2c; valaddr_reg:x3; val_offset:4347*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 4347*FLEN/8, x4, x1, x2)

inst_1450:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xf619e38378434 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xe8fb23321392e and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xdf86f50e385a4 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fef619e38378434; op2val:0x3fde8fb23321392e;
op3val:0x3fddf86f50e385a4; valaddr_reg:x3; val_offset:4350*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 4350*FLEN/8, x4, x1, x2)

inst_1451:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xf619e38378434 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xe8fb23321392e and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xdf86f50e385a4 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fef619e38378434; op2val:0x3fde8fb23321392e;
op3val:0x3fddf86f50e385a4; valaddr_reg:x3; val_offset:4353*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 4353*FLEN/8, x4, x1, x2)

inst_1452:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xf619e38378434 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xe8fb23321392e and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xdf86f50e385a4 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fef619e38378434; op2val:0x3fde8fb23321392e;
op3val:0x3fddf86f50e385a4; valaddr_reg:x3; val_offset:4356*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 4356*FLEN/8, x4, x1, x2)

inst_1453:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xf619e38378434 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xe8fb23321392e and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xdf86f50e385a4 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fef619e38378434; op2val:0x3fde8fb23321392e;
op3val:0x3fddf86f50e385a4; valaddr_reg:x3; val_offset:4359*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 4359*FLEN/8, x4, x1, x2)

inst_1454:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xf619e38378434 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xe8fb23321392e and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xdf86f50e385a4 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fef619e38378434; op2val:0x3fde8fb23321392e;
op3val:0x3fddf86f50e385a4; valaddr_reg:x3; val_offset:4362*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 4362*FLEN/8, x4, x1, x2)

inst_1455:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xf84af44508b85 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xed603a2c4b68e and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xe5f2f38e643a3 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fef84af44508b85; op2val:0x3feed603a2c4b68e;
op3val:0x3fee5f2f38e643a3; valaddr_reg:x3; val_offset:4365*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 4365*FLEN/8, x4, x1, x2)

inst_1456:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xf84af44508b85 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xed603a2c4b68e and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xe5f2f38e643a3 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fef84af44508b85; op2val:0x3feed603a2c4b68e;
op3val:0x3fee5f2f38e643a3; valaddr_reg:x3; val_offset:4368*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 4368*FLEN/8, x4, x1, x2)

inst_1457:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xf84af44508b85 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xed603a2c4b68e and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xe5f2f38e643a3 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fef84af44508b85; op2val:0x3feed603a2c4b68e;
op3val:0x3fee5f2f38e643a3; valaddr_reg:x3; val_offset:4371*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 4371*FLEN/8, x4, x1, x2)

inst_1458:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xf84af44508b85 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xed603a2c4b68e and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xe5f2f38e643a3 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fef84af44508b85; op2val:0x3feed603a2c4b68e;
op3val:0x3fee5f2f38e643a3; valaddr_reg:x3; val_offset:4374*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 4374*FLEN/8, x4, x1, x2)

inst_1459:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xf84af44508b85 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xed603a2c4b68e and fs3 == 0 and fe3 == 0x3fe and fm3 == 0xe5f2f38e643a3 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3fef84af44508b85; op2val:0x3feed603a2c4b68e;
op3val:0x3fee5f2f38e643a3; valaddr_reg:x3; val_offset:4377*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 4377*FLEN/8, x4, x1, x2)

inst_1460:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xff37023c16bab and fs2 == 0 and fe2 == 0x3fb and fm2 == 0xe26a414c97520 and fs3 == 0 and fe3 == 0x3fb and fm3 == 0xe1ace0b0fce00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feff37023c16bab; op2val:0x3fbe26a414c97520;
op3val:0x3fbe1ace0b0fce00; valaddr_reg:x3; val_offset:4380*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 4380*FLEN/8, x4, x1, x2)

inst_1461:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xff37023c16bab and fs2 == 0 and fe2 == 0x3fb and fm2 == 0xe26a414c97520 and fs3 == 0 and fe3 == 0x3fb and fm3 == 0xe1ace0b0fce00 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feff37023c16bab; op2val:0x3fbe26a414c97520;
op3val:0x3fbe1ace0b0fce00; valaddr_reg:x3; val_offset:4383*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 4383*FLEN/8, x4, x1, x2)

inst_1462:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xff37023c16bab and fs2 == 0 and fe2 == 0x3fb and fm2 == 0xe26a414c97520 and fs3 == 0 and fe3 == 0x3fb and fm3 == 0xe1ace0b0fce00 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feff37023c16bab; op2val:0x3fbe26a414c97520;
op3val:0x3fbe1ace0b0fce00; valaddr_reg:x3; val_offset:4386*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 4386*FLEN/8, x4, x1, x2)

inst_1463:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xff37023c16bab and fs2 == 0 and fe2 == 0x3fb and fm2 == 0xe26a414c97520 and fs3 == 0 and fe3 == 0x3fb and fm3 == 0xe1ace0b0fce00 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feff37023c16bab; op2val:0x3fbe26a414c97520;
op3val:0x3fbe1ace0b0fce00; valaddr_reg:x3; val_offset:4389*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 4389*FLEN/8, x4, x1, x2)

inst_1464:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xff37023c16bab and fs2 == 0 and fe2 == 0x3fb and fm2 == 0xe26a414c97520 and fs3 == 0 and fe3 == 0x3fb and fm3 == 0xe1ace0b0fce00 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feff37023c16bab; op2val:0x3fbe26a414c97520;
op3val:0x3fbe1ace0b0fce00; valaddr_reg:x3; val_offset:4392*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 4392*FLEN/8, x4, x1, x2)

inst_1465:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xffc4caf6aed99 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x596e092b29af6 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x59461734ee142 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feffc4caf6aed99; op2val:0x3fd596e092b29af6;
op3val:0x3fd59461734ee142; valaddr_reg:x3; val_offset:4395*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 4395*FLEN/8, x4, x1, x2)

inst_1466:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xffc4caf6aed99 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x596e092b29af6 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x59461734ee142 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feffc4caf6aed99; op2val:0x3fd596e092b29af6;
op3val:0x3fd59461734ee142; valaddr_reg:x3; val_offset:4398*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 4398*FLEN/8, x4, x1, x2)

inst_1467:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xffc4caf6aed99 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x596e092b29af6 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x59461734ee142 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feffc4caf6aed99; op2val:0x3fd596e092b29af6;
op3val:0x3fd59461734ee142; valaddr_reg:x3; val_offset:4401*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 4401*FLEN/8, x4, x1, x2)

inst_1468:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xffc4caf6aed99 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x596e092b29af6 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x59461734ee142 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feffc4caf6aed99; op2val:0x3fd596e092b29af6;
op3val:0x3fd59461734ee142; valaddr_reg:x3; val_offset:4404*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 4404*FLEN/8, x4, x1, x2)

inst_1469:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xffc4caf6aed99 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x596e092b29af6 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x59461734ee142 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3feffc4caf6aed99; op2val:0x3fd596e092b29af6;
op3val:0x3fd59461734ee142; valaddr_reg:x3; val_offset:4407*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 4407*FLEN/8, x4, x1, x2)

inst_1470:
// fs1 == 0 and fe1 == 0x3f7 and fm1 == 0x404360ffea780 and fs2 == 0 and fe2 == 0x404 and fm2 == 0xddb38b4ee0625 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x2acf149076dd8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3f7404360ffea780; op2val:0x404ddb38b4ee0625;
op3val:0x3fd2acf149076dd8; valaddr_reg:x3; val_offset:4410*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 4410*FLEN/8, x4, x1, x2)

inst_1471:
// fs1 == 0 and fe1 == 0x3f7 and fm1 == 0x404360ffea780 and fs2 == 0 and fe2 == 0x404 and fm2 == 0xddb38b4ee0625 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x2acf149076dd8 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3f7404360ffea780; op2val:0x404ddb38b4ee0625;
op3val:0x3fd2acf149076dd8; valaddr_reg:x3; val_offset:4413*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 4413*FLEN/8, x4, x1, x2)

inst_1472:
// fs1 == 0 and fe1 == 0x3f7 and fm1 == 0x404360ffea780 and fs2 == 0 and fe2 == 0x404 and fm2 == 0xddb38b4ee0625 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x2acf149076dd8 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3f7404360ffea780; op2val:0x404ddb38b4ee0625;
op3val:0x3fd2acf149076dd8; valaddr_reg:x3; val_offset:4416*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 4416*FLEN/8, x4, x1, x2)

inst_1473:
// fs1 == 0 and fe1 == 0x3f7 and fm1 == 0x404360ffea780 and fs2 == 0 and fe2 == 0x404 and fm2 == 0xddb38b4ee0625 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x2acf149076dd8 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3f7404360ffea780; op2val:0x404ddb38b4ee0625;
op3val:0x3fd2acf149076dd8; valaddr_reg:x3; val_offset:4419*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 4419*FLEN/8, x4, x1, x2)

inst_1474:
// fs1 == 0 and fe1 == 0x3f7 and fm1 == 0x404360ffea780 and fs2 == 0 and fe2 == 0x404 and fm2 == 0xddb38b4ee0625 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x2acf149076dd8 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3f7404360ffea780; op2val:0x404ddb38b4ee0625;
op3val:0x3fd2acf149076dd8; valaddr_reg:x3; val_offset:4422*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 4422*FLEN/8, x4, x1, x2)

inst_1475:
// fs1 == 0 and fe1 == 0x3f7 and fm1 == 0x6e2ab57b59a00 and fs2 == 0 and fe2 == 0x403 and fm2 == 0xc54fb75a805c3 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x4431cc49a0808 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3f76e2ab57b59a00; op2val:0x403c54fb75a805c3;
op3val:0x3fc4431cc49a0808; valaddr_reg:x3; val_offset:4425*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 4425*FLEN/8, x4, x1, x2)

inst_1476:
// fs1 == 0 and fe1 == 0x3f7 and fm1 == 0x6e2ab57b59a00 and fs2 == 0 and fe2 == 0x403 and fm2 == 0xc54fb75a805c3 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x4431cc49a0808 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3f76e2ab57b59a00; op2val:0x403c54fb75a805c3;
op3val:0x3fc4431cc49a0808; valaddr_reg:x3; val_offset:4428*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 4428*FLEN/8, x4, x1, x2)

inst_1477:
// fs1 == 0 and fe1 == 0x3f7 and fm1 == 0x6e2ab57b59a00 and fs2 == 0 and fe2 == 0x403 and fm2 == 0xc54fb75a805c3 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x4431cc49a0808 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3f76e2ab57b59a00; op2val:0x403c54fb75a805c3;
op3val:0x3fc4431cc49a0808; valaddr_reg:x3; val_offset:4431*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 64, 0, x3, 4431*FLEN/8, x4, x1, x2)

inst_1478:
// fs1 == 0 and fe1 == 0x3f7 and fm1 == 0x6e2ab57b59a00 and fs2 == 0 and fe2 == 0x403 and fm2 == 0xc54fb75a805c3 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x4431cc49a0808 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3f76e2ab57b59a00; op2val:0x403c54fb75a805c3;
op3val:0x3fc4431cc49a0808; valaddr_reg:x3; val_offset:4434*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 96, 0, x3, 4434*FLEN/8, x4, x1, x2)

inst_1479:
// fs1 == 0 and fe1 == 0x3f7 and fm1 == 0x6e2ab57b59a00 and fs2 == 0 and fe2 == 0x403 and fm2 == 0xc54fb75a805c3 and fs3 == 0 and fe3 == 0x3fc and fm3 == 0x4431cc49a0808 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3f76e2ab57b59a00; op2val:0x403c54fb75a805c3;
op3val:0x3fc4431cc49a0808; valaddr_reg:x3; val_offset:4437*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 128, 0, x3, 4437*FLEN/8, x4, x1, x2)

inst_1480:
// fs1 == 0 and fe1 == 0x3f7 and fm1 == 0x81ad61d700e80 and fs2 == 0 and fe2 == 0x401 and fm2 == 0x4b97acb7a28c5 and fs3 == 0 and fe3 == 0x3f9 and fm3 == 0xf38faefad98e0 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3f781ad61d700e80; op2val:0x4014b97acb7a28c5;
op3val:0x3f9f38faefad98e0; valaddr_reg:x3; val_offset:4440*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 32, 0, x3, 4440*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(4572284151930988416,64,FLEN)
NAN_BOXED(4572284151930988416,64,FLEN)
NAN_BOXED(4598928321811017176,64,FLEN)
NAN_BOXED(4572284151930988416,64,FLEN)
NAN_BOXED(4633600628234257957,64,FLEN)
NAN_BOXED(4572284151930988416,64,FLEN)
NAN_BOXED(4572284151930988416,64,FLEN)
NAN_BOXED(4572284151930988416,64,FLEN)
NAN_BOXED(4572284151930988416,64,FLEN)
NAN_BOXED(4572284151930988416,64,FLEN)
NAN_BOXED(4633600628234257957,64,FLEN)
NAN_BOXED(4572284151930988416,64,FLEN)
NAN_BOXED(4572284151930988416,64,FLEN)
NAN_BOXED(4572284151930988416,64,FLEN)
NAN_BOXED(4572284151930988416,64,FLEN)
NAN_BOXED(4573091697180121600,64,FLEN)
NAN_BOXED(4628667956017497539,64,FLEN)
NAN_BOXED(4594871310661322760,64,FLEN)
NAN_BOXED(4573091697180121600,64,FLEN)
NAN_BOXED(4573091697180121600,64,FLEN)
NAN_BOXED(4594871310661322760,64,FLEN)
NAN_BOXED(4573091697180121600,64,FLEN)
NAN_BOXED(4628667956017497539,64,FLEN)
NAN_BOXED(4628667956017497539,64,FLEN)
NAN_BOXED(4573091697180121600,64,FLEN)
NAN_BOXED(4628667956017497539,64,FLEN)
NAN_BOXED(4594871310661322760,64,FLEN)
NAN_BOXED(4573091697180121600,64,FLEN)
NAN_BOXED(4628667956017497539,64,FLEN)
NAN_BOXED(4594871310661322760,64,FLEN)
NAN_BOXED(4573434928513945216,64,FLEN)
NAN_BOXED(4617519455012530373,64,FLEN)
NAN_BOXED(4584445596100565216,64,FLEN)
NAN_BOXED(4573434928513945216,64,FLEN)
NAN_BOXED(4617519455012530373,64,FLEN)
NAN_BOXED(4617519455012530373,64,FLEN)
NAN_BOXED(4573434928513945216,64,FLEN)
NAN_BOXED(4617519455012530373,64,FLEN)
NAN_BOXED(4584445596100565216,64,FLEN)
NAN_BOXED(4573434928513945216,64,FLEN)
NAN_BOXED(4617519455012530373,64,FLEN)
NAN_BOXED(4584445596100565216,64,FLEN)
NAN_BOXED(4573434928513945216,64,FLEN)
NAN_BOXED(4617519455012530373,64,FLEN)
NAN_BOXED(4584445596100565216,64,FLEN)
NAN_BOXED(4574536503250550272,64,FLEN)
NAN_BOXED(4634380310726905867,64,FLEN)
NAN_BOXED(4601866818639870210,64,FLEN)
NAN_BOXED(4574536503250550272,64,FLEN)
NAN_BOXED(4634380310726905867,64,FLEN)
NAN_BOXED(4601866818639870210,64,FLEN)
NAN_BOXED(4574536503250550272,64,FLEN)
NAN_BOXED(4634380310726905867,64,FLEN)
NAN_BOXED(4601866818639870210,64,FLEN)
NAN_BOXED(4574536503250550272,64,FLEN)
NAN_BOXED(4634380310726905867,64,FLEN)
NAN_BOXED(4601866818639870210,64,FLEN)
NAN_BOXED(4574536503250550272,64,FLEN)
NAN_BOXED(4634380310726905867,64,FLEN)
NAN_BOXED(4601866818639870210,64,FLEN)
NAN_BOXED(4574674208708281984,64,FLEN)
NAN_BOXED(4629944818257434037,64,FLEN)
NAN_BOXED(4597627663358293056,64,FLEN)
NAN_BOXED(4574674208708281984,64,FLEN)
NAN_BOXED(4629944818257434037,64,FLEN)
NAN_BOXED(4597627663358293056,64,FLEN)
NAN_BOXED(4574674208708281984,64,FLEN)
NAN_BOXED(4629944818257434037,64,FLEN)
NAN_BOXED(4597627663358293056,64,FLEN)
NAN_BOXED(4574674208708281984,64,FLEN)
NAN_BOXED(4629944818257434037,64,FLEN)
NAN_BOXED(4597627663358293056,64,FLEN)
NAN_BOXED(4574674208708281984,64,FLEN)
NAN_BOXED(4629944818257434037,64,FLEN)
NAN_BOXED(4597627663358293056,64,FLEN)
NAN_BOXED(4577447711776557440,64,FLEN)
NAN_BOXED(4623318933455304193,64,FLEN)
NAN_BOXED(4594149874412808664,64,FLEN)
NAN_BOXED(4577447711776557440,64,FLEN)
NAN_BOXED(4623318933455304193,64,FLEN)
NAN_BOXED(4594149874412808664,64,FLEN)
NAN_BOXED(4577447711776557440,64,FLEN)
NAN_BOXED(4623318933455304193,64,FLEN)
NAN_BOXED(4594149874412808664,64,FLEN)
NAN_BOXED(4577447711776557440,64,FLEN)
NAN_BOXED(4623318933455304193,64,FLEN)
NAN_BOXED(4594149874412808664,64,FLEN)
NAN_BOXED(4577447711776557440,64,FLEN)
NAN_BOXED(4623318933455304193,64,FLEN)
NAN_BOXED(4594149874412808664,64,FLEN)
NAN_BOXED(4580485445019617408,64,FLEN)
NAN_BOXED(4633178232842561575,64,FLEN)
NAN_BOXED(4606731943525195809,64,FLEN)
NAN_BOXED(4580485445019617408,64,FLEN)
NAN_BOXED(4633178232842561575,64,FLEN)
NAN_BOXED(4606731943525195809,64,FLEN)
NAN_BOXED(4580485445019617408,64,FLEN)
NAN_BOXED(4633178232842561575,64,FLEN)
NAN_BOXED(4606731943525195809,64,FLEN)
NAN_BOXED(4580485445019617408,64,FLEN)
NAN_BOXED(4633178232842561575,64,FLEN)
NAN_BOXED(4606731943525195809,64,FLEN)
NAN_BOXED(4580485445019617408,64,FLEN)
NAN_BOXED(4633178232842561575,64,FLEN)
NAN_BOXED(4606731943525195809,64,FLEN)
NAN_BOXED(4581141227977900704,64,FLEN)
NAN_BOXED(4630779199591946783,64,FLEN)
NAN_BOXED(4604972853358952391,64,FLEN)
NAN_BOXED(4581141227977900704,64,FLEN)
NAN_BOXED(4630779199591946783,64,FLEN)
NAN_BOXED(4604972853358952391,64,FLEN)
NAN_BOXED(4581141227977900704,64,FLEN)
NAN_BOXED(4630779199591946783,64,FLEN)
NAN_BOXED(4604972853358952391,64,FLEN)
NAN_BOXED(4581141227977900704,64,FLEN)
NAN_BOXED(4630779199591946783,64,FLEN)
NAN_BOXED(4604972853358952391,64,FLEN)
NAN_BOXED(4581141227977900704,64,FLEN)
NAN_BOXED(4630779199591946783,64,FLEN)
NAN_BOXED(4604972853358952391,64,FLEN)
NAN_BOXED(4581636262369806048,64,FLEN)
NAN_BOXED(4617533880068587422,64,FLEN)
NAN_BOXED(4592428122408926424,64,FLEN)
NAN_BOXED(4581636262369806048,64,FLEN)
NAN_BOXED(4617533880068587422,64,FLEN)
NAN_BOXED(4592428122408926424,64,FLEN)
NAN_BOXED(4581636262369806048,64,FLEN)
NAN_BOXED(4617533880068587422,64,FLEN)
NAN_BOXED(4592428122408926424,64,FLEN)
NAN_BOXED(4581636262369806048,64,FLEN)
NAN_BOXED(4617533880068587422,64,FLEN)
NAN_BOXED(4592428122408926424,64,FLEN)
NAN_BOXED(4581636262369806048,64,FLEN)
NAN_BOXED(4617533880068587422,64,FLEN)
NAN_BOXED(4592428122408926424,64,FLEN)
NAN_BOXED(4581976118247731712,64,FLEN)
NAN_BOXED(4629779961320100986,64,FLEN)
NAN_BOXED(4604605723275376379,64,FLEN)
NAN_BOXED(4581976118247731712,64,FLEN)
NAN_BOXED(4629779961320100986,64,FLEN)
NAN_BOXED(4604605723275376379,64,FLEN)
NAN_BOXED(4581976118247731712,64,FLEN)
NAN_BOXED(4629779961320100986,64,FLEN)
NAN_BOXED(4604605723275376379,64,FLEN)
NAN_BOXED(4581976118247731712,64,FLEN)
NAN_BOXED(4629779961320100986,64,FLEN)
NAN_BOXED(4604605723275376379,64,FLEN)
NAN_BOXED(4581976118247731712,64,FLEN)
NAN_BOXED(4629779961320100986,64,FLEN)
NAN_BOXED(4604605723275376379,64,FLEN)
NAN_BOXED(4583669031806431744,64,FLEN)
NAN_BOXED(4625934075446687802,64,FLEN)
NAN_BOXED(4602836908217309731,64,FLEN)
NAN_BOXED(4583669031806431744,64,FLEN)
NAN_BOXED(4625934075446687802,64,FLEN)
NAN_BOXED(4602836908217309731,64,FLEN)
NAN_BOXED(4583669031806431744,64,FLEN)
NAN_BOXED(4625934075446687802,64,FLEN)
NAN_BOXED(4602836908217309731,64,FLEN)
NAN_BOXED(4583669031806431744,64,FLEN)
NAN_BOXED(4625934075446687802,64,FLEN)
NAN_BOXED(4602836908217309731,64,FLEN)
NAN_BOXED(4583669031806431744,64,FLEN)
NAN_BOXED(4625934075446687802,64,FLEN)
NAN_BOXED(4602836908217309731,64,FLEN)
NAN_BOXED(4583987651215393440,64,FLEN)
NAN_BOXED(4623474589910407235,64,FLEN)
NAN_BOXED(4600409224468764286,64,FLEN)
NAN_BOXED(4583987651215393440,64,FLEN)
NAN_BOXED(4623474589910407235,64,FLEN)
NAN_BOXED(4600409224468764286,64,FLEN)
NAN_BOXED(4583987651215393440,64,FLEN)
NAN_BOXED(4623474589910407235,64,FLEN)
NAN_BOXED(4600409224468764286,64,FLEN)
NAN_BOXED(4583987651215393440,64,FLEN)
NAN_BOXED(4623474589910407235,64,FLEN)
NAN_BOXED(4600409224468764286,64,FLEN)
NAN_BOXED(4583987651215393440,64,FLEN)
NAN_BOXED(4623474589910407235,64,FLEN)
NAN_BOXED(4600409224468764286,64,FLEN)
NAN_BOXED(4584238262495188672,64,FLEN)
NAN_BOXED(4627304703574631356,64,FLEN)
NAN_BOXED(4604473895802301268,64,FLEN)
NAN_BOXED(4584238262495188672,64,FLEN)
NAN_BOXED(4627304703574631356,64,FLEN)
NAN_BOXED(4604473895802301268,64,FLEN)
NAN_BOXED(4584238262495188672,64,FLEN)
NAN_BOXED(4627304703574631356,64,FLEN)
NAN_BOXED(4604473895802301268,64,FLEN)
NAN_BOXED(4584238262495188672,64,FLEN)
NAN_BOXED(4627304703574631356,64,FLEN)
NAN_BOXED(4604473895802301268,64,FLEN)
NAN_BOXED(4584238262495188672,64,FLEN)
NAN_BOXED(4627304703574631356,64,FLEN)
NAN_BOXED(4604473895802301268,64,FLEN)
NAN_BOXED(4585028951209458336,64,FLEN)
NAN_BOXED(4625437068819336782,64,FLEN)
NAN_BOXED(4603303047676369672,64,FLEN)
NAN_BOXED(4585028951209458336,64,FLEN)
NAN_BOXED(4625437068819336782,64,FLEN)
NAN_BOXED(4603303047676369672,64,FLEN)
NAN_BOXED(4585028951209458336,64,FLEN)
NAN_BOXED(4625437068819336782,64,FLEN)
NAN_BOXED(4603303047676369672,64,FLEN)
NAN_BOXED(4585028951209458336,64,FLEN)
NAN_BOXED(4625437068819336782,64,FLEN)
NAN_BOXED(4603303047676369672,64,FLEN)
NAN_BOXED(4585028951209458336,64,FLEN)
NAN_BOXED(4625437068819336782,64,FLEN)
NAN_BOXED(4603303047676369672,64,FLEN)
NAN_BOXED(4587168709743970112,64,FLEN)
NAN_BOXED(4620952705056323430,64,FLEN)
NAN_BOXED(4601083287556269000,64,FLEN)
NAN_BOXED(4587168709743970112,64,FLEN)
NAN_BOXED(4620952705056323430,64,FLEN)
NAN_BOXED(4601083287556269000,64,FLEN)
NAN_BOXED(4587168709743970112,64,FLEN)
NAN_BOXED(4620952705056323430,64,FLEN)
NAN_BOXED(4601083287556269000,64,FLEN)
NAN_BOXED(4587168709743970112,64,FLEN)
NAN_BOXED(4620952705056323430,64,FLEN)
NAN_BOXED(4601083287556269000,64,FLEN)
NAN_BOXED(4587168709743970112,64,FLEN)
NAN_BOXED(4620952705056323430,64,FLEN)
NAN_BOXED(4601083287556269000,64,FLEN)
NAN_BOXED(4587395843545157456,64,FLEN)
NAN_BOXED(4618398707382658797,64,FLEN)
NAN_BOXED(4599063579651024318,64,FLEN)
NAN_BOXED(4587395843545157456,64,FLEN)
NAN_BOXED(4618398707382658797,64,FLEN)
NAN_BOXED(4599063579651024318,64,FLEN)
NAN_BOXED(4587395843545157456,64,FLEN)
NAN_BOXED(4618398707382658797,64,FLEN)
NAN_BOXED(4599063579651024318,64,FLEN)
NAN_BOXED(4587395843545157456,64,FLEN)
NAN_BOXED(4618398707382658797,64,FLEN)
NAN_BOXED(4599063579651024318,64,FLEN)
NAN_BOXED(4587395843545157456,64,FLEN)
NAN_BOXED(4618398707382658797,64,FLEN)
NAN_BOXED(4599063579651024318,64,FLEN)
NAN_BOXED(4587643884650421184,64,FLEN)
NAN_BOXED(4615442445472910848,64,FLEN)
NAN_BOXED(4596030342673293988,64,FLEN)
NAN_BOXED(4587643884650421184,64,FLEN)
NAN_BOXED(4615442445472910848,64,FLEN)
NAN_BOXED(4596030342673293988,64,FLEN)
NAN_BOXED(4587643884650421184,64,FLEN)
NAN_BOXED(4615442445472910848,64,FLEN)
NAN_BOXED(4596030342673293988,64,FLEN)
NAN_BOXED(4587643884650421184,64,FLEN)
NAN_BOXED(4615442445472910848,64,FLEN)
NAN_BOXED(4596030342673293988,64,FLEN)
NAN_BOXED(4587643884650421184,64,FLEN)
NAN_BOXED(4615442445472910848,64,FLEN)
NAN_BOXED(4596030342673293988,64,FLEN)
NAN_BOXED(4587671635065280064,64,FLEN)
NAN_BOXED(4622285802735280322,64,FLEN)
NAN_BOXED(4603258632061181293,64,FLEN)
NAN_BOXED(4587671635065280064,64,FLEN)
NAN_BOXED(4622285802735280322,64,FLEN)
NAN_BOXED(4603258632061181293,64,FLEN)
NAN_BOXED(4587671635065280064,64,FLEN)
NAN_BOXED(4622285802735280322,64,FLEN)
NAN_BOXED(4603258632061181293,64,FLEN)
NAN_BOXED(4587671635065280064,64,FLEN)
NAN_BOXED(4622285802735280322,64,FLEN)
NAN_BOXED(4603258632061181293,64,FLEN)
NAN_BOXED(4587671635065280064,64,FLEN)
NAN_BOXED(4622285802735280322,64,FLEN)
NAN_BOXED(4603258632061181293,64,FLEN)
NAN_BOXED(4588855093231950480,64,FLEN)
NAN_BOXED(4624740140275303780,64,FLEN)
NAN_BOXED(4606428680527120753,64,FLEN)
NAN_BOXED(4588855093231950480,64,FLEN)
NAN_BOXED(4624740140275303780,64,FLEN)
NAN_BOXED(4606428680527120753,64,FLEN)
NAN_BOXED(4588855093231950480,64,FLEN)
NAN_BOXED(4624740140275303780,64,FLEN)
NAN_BOXED(4606428680527120753,64,FLEN)
NAN_BOXED(4588855093231950480,64,FLEN)
NAN_BOXED(4624740140275303780,64,FLEN)
NAN_BOXED(4606428680527120753,64,FLEN)
NAN_BOXED(4588855093231950480,64,FLEN)
NAN_BOXED(4624740140275303780,64,FLEN)
NAN_BOXED(4606428680527120753,64,FLEN)
NAN_BOXED(4589951823023179416,64,FLEN)
NAN_BOXED(4623177109674931605,64,FLEN)
NAN_BOXED(4606378808394193839,64,FLEN)
NAN_BOXED(4589951823023179416,64,FLEN)
NAN_BOXED(4623177109674931605,64,FLEN)
NAN_BOXED(4606378808394193839,64,FLEN)
NAN_BOXED(4589951823023179416,64,FLEN)
NAN_BOXED(4623177109674931605,64,FLEN)
NAN_BOXED(4606378808394193839,64,FLEN)
NAN_BOXED(4589951823023179416,64,FLEN)
NAN_BOXED(4623177109674931605,64,FLEN)
NAN_BOXED(4606378808394193839,64,FLEN)
NAN_BOXED(4589951823023179416,64,FLEN)
NAN_BOXED(4623177109674931605,64,FLEN)
NAN_BOXED(4606378808394193839,64,FLEN)
NAN_BOXED(4590207207696336480,64,FLEN)
NAN_BOXED(4620756041232582866,64,FLEN)
NAN_BOXED(4603795326409171326,64,FLEN)
NAN_BOXED(4590207207696336480,64,FLEN)
NAN_BOXED(4620756041232582866,64,FLEN)
NAN_BOXED(4603795326409171326,64,FLEN)
NAN_BOXED(4590207207696336480,64,FLEN)
NAN_BOXED(4620756041232582866,64,FLEN)
NAN_BOXED(4603795326409171326,64,FLEN)
NAN_BOXED(4590207207696336480,64,FLEN)
NAN_BOXED(4620756041232582866,64,FLEN)
NAN_BOXED(4603795326409171326,64,FLEN)
NAN_BOXED(4590207207696336480,64,FLEN)
NAN_BOXED(4620756041232582866,64,FLEN)
NAN_BOXED(4603795326409171326,64,FLEN)
NAN_BOXED(4590273167252851376,64,FLEN)
NAN_BOXED(4623191230368570078,64,FLEN)
NAN_BOXED(4606894970952291810,64,FLEN)
NAN_BOXED(4590273167252851376,64,FLEN)
NAN_BOXED(4623191230368570078,64,FLEN)
NAN_BOXED(4606894970952291810,64,FLEN)
NAN_BOXED(4590273167252851376,64,FLEN)
NAN_BOXED(4623191230368570078,64,FLEN)
NAN_BOXED(4606894970952291810,64,FLEN)
NAN_BOXED(4590273167252851376,64,FLEN)
NAN_BOXED(4623191230368570078,64,FLEN)
NAN_BOXED(4606894970952291810,64,FLEN)
NAN_BOXED(4590273167252851376,64,FLEN)
NAN_BOXED(4623191230368570078,64,FLEN)
NAN_BOXED(4606894970952291810,64,FLEN)
NAN_BOXED(4590443380211126280,64,FLEN)
NAN_BOXED(4614198637235518774,64,FLEN)
NAN_BOXED(4598171139100654168,64,FLEN)
NAN_BOXED(4590443380211126280,64,FLEN)
NAN_BOXED(4614198637235518774,64,FLEN)
NAN_BOXED(4598171139100654168,64,FLEN)
NAN_BOXED(4590443380211126280,64,FLEN)
NAN_BOXED(4614198637235518774,64,FLEN)
NAN_BOXED(4598171139100654168,64,FLEN)
NAN_BOXED(4590443380211126280,64,FLEN)
NAN_BOXED(4614198637235518774,64,FLEN)
NAN_BOXED(4598171139100654168,64,FLEN)
NAN_BOXED(4590443380211126280,64,FLEN)
NAN_BOXED(4614198637235518774,64,FLEN)
NAN_BOXED(4598171139100654168,64,FLEN)
NAN_BOXED(4590490306257314632,64,FLEN)
NAN_BOXED(4609934454291655469,64,FLEN)
NAN_BOXED(4593860988539682272,64,FLEN)
NAN_BOXED(4590490306257314632,64,FLEN)
NAN_BOXED(4609934454291655469,64,FLEN)
NAN_BOXED(4593860988539682272,64,FLEN)
NAN_BOXED(4590490306257314632,64,FLEN)
NAN_BOXED(4609934454291655469,64,FLEN)
NAN_BOXED(4593860988539682272,64,FLEN)
NAN_BOXED(4590490306257314632,64,FLEN)
NAN_BOXED(4609934454291655469,64,FLEN)
NAN_BOXED(4593860988539682272,64,FLEN)
NAN_BOXED(4590490306257314632,64,FLEN)
NAN_BOXED(4609934454291655469,64,FLEN)
NAN_BOXED(4593860988539682272,64,FLEN)
NAN_BOXED(4591029004350301680,64,FLEN)
NAN_BOXED(4620817049690184827,64,FLEN)
NAN_BOXED(4604714805284910968,64,FLEN)
NAN_BOXED(4591029004350301680,64,FLEN)
NAN_BOXED(4620817049690184827,64,FLEN)
NAN_BOXED(4604714805284910968,64,FLEN)
NAN_BOXED(4591029004350301680,64,FLEN)
NAN_BOXED(4620817049690184827,64,FLEN)
NAN_BOXED(4604714805284910968,64,FLEN)
NAN_BOXED(4591029004350301680,64,FLEN)
NAN_BOXED(4620817049690184827,64,FLEN)
NAN_BOXED(4604714805284910968,64,FLEN)
NAN_BOXED(4591029004350301680,64,FLEN)
NAN_BOXED(4620817049690184827,64,FLEN)
NAN_BOXED(4604714805284910968,64,FLEN)
NAN_BOXED(4591048842698529376,64,FLEN)
NAN_BOXED(4607368909952247200,64,FLEN)
NAN_BOXED(4591313217492074592,64,FLEN)
NAN_BOXED(4591048842698529376,64,FLEN)
NAN_BOXED(4607368909952247200,64,FLEN)
NAN_BOXED(4591313217492074592,64,FLEN)
NAN_BOXED(4591048842698529376,64,FLEN)
NAN_BOXED(4607368909952247200,64,FLEN)
NAN_BOXED(4591313217492074592,64,FLEN)
NAN_BOXED(4591048842698529376,64,FLEN)
NAN_BOXED(4607368909952247200,64,FLEN)
NAN_BOXED(4591313217492074592,64,FLEN)
NAN_BOXED(4591048842698529376,64,FLEN)
NAN_BOXED(4607368909952247200,64,FLEN)
NAN_BOXED(4591313217492074592,64,FLEN)
NAN_BOXED(4591107783146407296,64,FLEN)
NAN_BOXED(4618999852581955451,64,FLEN)
NAN_BOXED(4603407221554712625,64,FLEN)
NAN_BOXED(4591107783146407296,64,FLEN)
NAN_BOXED(4618999852581955451,64,FLEN)
NAN_BOXED(4603407221554712625,64,FLEN)
NAN_BOXED(4591107783146407296,64,FLEN)
NAN_BOXED(4618999852581955451,64,FLEN)
NAN_BOXED(4603407221554712625,64,FLEN)
NAN_BOXED(4591107783146407296,64,FLEN)
NAN_BOXED(4618999852581955451,64,FLEN)
NAN_BOXED(4603407221554712625,64,FLEN)
NAN_BOXED(4591107783146407296,64,FLEN)
NAN_BOXED(4618999852581955451,64,FLEN)
NAN_BOXED(4603407221554712625,64,FLEN)
NAN_BOXED(4591119568114012160,64,FLEN)
NAN_BOXED(4610875070288543138,64,FLEN)
NAN_BOXED(4595041989323632240,64,FLEN)
NAN_BOXED(4591119568114012160,64,FLEN)
NAN_BOXED(4610875070288543138,64,FLEN)
NAN_BOXED(4595041989323632240,64,FLEN)
NAN_BOXED(4591119568114012160,64,FLEN)
NAN_BOXED(4610875070288543138,64,FLEN)
NAN_BOXED(4595041989323632240,64,FLEN)
NAN_BOXED(4591119568114012160,64,FLEN)
NAN_BOXED(4610875070288543138,64,FLEN)
NAN_BOXED(4595041989323632240,64,FLEN)
NAN_BOXED(4591119568114012160,64,FLEN)
NAN_BOXED(4610875070288543138,64,FLEN)
NAN_BOXED(4595041989323632240,64,FLEN)
NAN_BOXED(4591180043657143256,64,FLEN)
NAN_BOXED(4619447292637381562,64,FLEN)
NAN_BOXED(4603789565944751046,64,FLEN)
NAN_BOXED(4591180043657143256,64,FLEN)
NAN_BOXED(4619447292637381562,64,FLEN)
NAN_BOXED(4603789565944751046,64,FLEN)
NAN_BOXED(4591180043657143256,64,FLEN)
NAN_BOXED(4619447292637381562,64,FLEN)
NAN_BOXED(4603789565944751046,64,FLEN)
NAN_BOXED(4591180043657143256,64,FLEN)
NAN_BOXED(4619447292637381562,64,FLEN)
NAN_BOXED(4603789565944751046,64,FLEN)
NAN_BOXED(4591180043657143256,64,FLEN)
NAN_BOXED(4619447292637381562,64,FLEN)
NAN_BOXED(4603789565944751046,64,FLEN)
NAN_BOXED(4591184825696453992,64,FLEN)
NAN_BOXED(4617724934045589175,64,FLEN)
NAN_BOXED(4602414887315216272,64,FLEN)
NAN_BOXED(4591184825696453992,64,FLEN)
NAN_BOXED(4617724934045589175,64,FLEN)
NAN_BOXED(4602414887315216272,64,FLEN)
NAN_BOXED(4591184825696453992,64,FLEN)
NAN_BOXED(4617724934045589175,64,FLEN)
NAN_BOXED(4602414887315216272,64,FLEN)
NAN_BOXED(4591184825696453992,64,FLEN)
NAN_BOXED(4617724934045589175,64,FLEN)
NAN_BOXED(4602414887315216272,64,FLEN)
NAN_BOXED(4591184825696453992,64,FLEN)
NAN_BOXED(4617724934045589175,64,FLEN)
NAN_BOXED(4602414887315216272,64,FLEN)
NAN_BOXED(4591237922905895344,64,FLEN)
NAN_BOXED(4618586550722250872,64,FLEN)
NAN_BOXED(4603211264961107484,64,FLEN)
NAN_BOXED(4591237922905895344,64,FLEN)
NAN_BOXED(4618586550722250872,64,FLEN)
NAN_BOXED(4603211264961107484,64,FLEN)
NAN_BOXED(4591237922905895344,64,FLEN)
NAN_BOXED(4618586550722250872,64,FLEN)
NAN_BOXED(4603211264961107484,64,FLEN)
NAN_BOXED(4591237922905895344,64,FLEN)
NAN_BOXED(4618586550722250872,64,FLEN)
NAN_BOXED(4603211264961107484,64,FLEN)
NAN_BOXED(4591237922905895344,64,FLEN)
NAN_BOXED(4618586550722250872,64,FLEN)
NAN_BOXED(4603211264961107484,64,FLEN)
NAN_BOXED(4591660699954668624,64,FLEN)
NAN_BOXED(4619061759892569030,64,FLEN)
NAN_BOXED(4603904275360841996,64,FLEN)
NAN_BOXED(4591660699954668624,64,FLEN)
NAN_BOXED(4619061759892569030,64,FLEN)
NAN_BOXED(4603904275360841996,64,FLEN)
NAN_BOXED(4591660699954668624,64,FLEN)
NAN_BOXED(4619061759892569030,64,FLEN)
NAN_BOXED(4603904275360841996,64,FLEN)
NAN_BOXED(4591660699954668624,64,FLEN)
NAN_BOXED(4619061759892569030,64,FLEN)
NAN_BOXED(4603904275360841996,64,FLEN)
NAN_BOXED(4591660699954668624,64,FLEN)
NAN_BOXED(4619061759892569030,64,FLEN)
NAN_BOXED(4603904275360841996,64,FLEN)
NAN_BOXED(4591794428218941032,64,FLEN)
NAN_BOXED(4621268318592325673,64,FLEN)
NAN_BOXED(4606215715193758680,64,FLEN)
NAN_BOXED(4591794428218941032,64,FLEN)
NAN_BOXED(4621268318592325673,64,FLEN)
NAN_BOXED(4606215715193758680,64,FLEN)
NAN_BOXED(4591794428218941032,64,FLEN)
NAN_BOXED(4621268318592325673,64,FLEN)
NAN_BOXED(4606215715193758680,64,FLEN)
NAN_BOXED(4591794428218941032,64,FLEN)
NAN_BOXED(4621268318592325673,64,FLEN)
NAN_BOXED(4606215715193758680,64,FLEN)
NAN_BOXED(4591794428218941032,64,FLEN)
NAN_BOXED(4621268318592325673,64,FLEN)
NAN_BOXED(4606215715193758680,64,FLEN)
NAN_BOXED(4591917063828838688,64,FLEN)
NAN_BOXED(4620919429505351060,64,FLEN)
NAN_BOXED(4605792156557968887,64,FLEN)
NAN_BOXED(4591917063828838688,64,FLEN)
NAN_BOXED(4620919429505351060,64,FLEN)
NAN_BOXED(4605792156557968887,64,FLEN)
NAN_BOXED(4591917063828838688,64,FLEN)
NAN_BOXED(4620919429505351060,64,FLEN)
NAN_BOXED(4605792156557968887,64,FLEN)
NAN_BOXED(4591917063828838688,64,FLEN)
NAN_BOXED(4620919429505351060,64,FLEN)
NAN_BOXED(4605792156557968887,64,FLEN)
NAN_BOXED(4591917063828838688,64,FLEN)
NAN_BOXED(4620919429505351060,64,FLEN)
NAN_BOXED(4605792156557968887,64,FLEN)
NAN_BOXED(4592148368619165768,64,FLEN)
NAN_BOXED(4620729348452075161,64,FLEN)
NAN_BOXED(4605719208540503908,64,FLEN)
NAN_BOXED(4592148368619165768,64,FLEN)
NAN_BOXED(4620729348452075161,64,FLEN)
NAN_BOXED(4605719208540503908,64,FLEN)
NAN_BOXED(4592148368619165768,64,FLEN)
NAN_BOXED(4620729348452075161,64,FLEN)
NAN_BOXED(4605719208540503908,64,FLEN)
NAN_BOXED(4592148368619165768,64,FLEN)
NAN_BOXED(4620729348452075161,64,FLEN)
NAN_BOXED(4605719208540503908,64,FLEN)
NAN_BOXED(4592148368619165768,64,FLEN)
NAN_BOXED(4620729348452075161,64,FLEN)
NAN_BOXED(4605719208540503908,64,FLEN)
NAN_BOXED(4592317115915252152,64,FLEN)
NAN_BOXED(4619738550493857747,64,FLEN)
NAN_BOXED(4605016810606994959,64,FLEN)
NAN_BOXED(4592317115915252152,64,FLEN)
NAN_BOXED(4619738550493857747,64,FLEN)
NAN_BOXED(4605016810606994959,64,FLEN)
NAN_BOXED(4592317115915252152,64,FLEN)
NAN_BOXED(4619738550493857747,64,FLEN)
NAN_BOXED(4605016810606994959,64,FLEN)
NAN_BOXED(4592317115915252152,64,FLEN)
NAN_BOXED(4619738550493857747,64,FLEN)
NAN_BOXED(4605016810606994959,64,FLEN)
NAN_BOXED(4592317115915252152,64,FLEN)
NAN_BOXED(4619738550493857747,64,FLEN)
NAN_BOXED(4605016810606994959,64,FLEN)
NAN_BOXED(4592353352369579336,64,FLEN)
NAN_BOXED(4617468401956884821,64,FLEN)
NAN_BOXED(4603111310199115936,64,FLEN)
NAN_BOXED(4592353352369579336,64,FLEN)
NAN_BOXED(4617468401956884821,64,FLEN)
NAN_BOXED(4603111310199115936,64,FLEN)
NAN_BOXED(4592353352369579336,64,FLEN)
NAN_BOXED(4617468401956884821,64,FLEN)
NAN_BOXED(4603111310199115936,64,FLEN)
NAN_BOXED(4592353352369579336,64,FLEN)
NAN_BOXED(4617468401956884821,64,FLEN)
NAN_BOXED(4603111310199115936,64,FLEN)
NAN_BOXED(4592353352369579336,64,FLEN)
NAN_BOXED(4617468401956884821,64,FLEN)
NAN_BOXED(4603111310199115936,64,FLEN)
NAN_BOXED(4593163632996927568,64,FLEN)
NAN_BOXED(4619154079368598053,64,FLEN)
NAN_BOXED(4605222097699705512,64,FLEN)
NAN_BOXED(4593163632996927568,64,FLEN)
NAN_BOXED(4619154079368598053,64,FLEN)
NAN_BOXED(4605222097699705512,64,FLEN)
NAN_BOXED(4593163632996927568,64,FLEN)
NAN_BOXED(4619154079368598053,64,FLEN)
NAN_BOXED(4605222097699705512,64,FLEN)
NAN_BOXED(4593163632996927568,64,FLEN)
NAN_BOXED(4619154079368598053,64,FLEN)
NAN_BOXED(4605222097699705512,64,FLEN)
NAN_BOXED(4593163632996927568,64,FLEN)
NAN_BOXED(4619154079368598053,64,FLEN)
NAN_BOXED(4605222097699705512,64,FLEN)
NAN_BOXED(4593305650758993472,64,FLEN)
NAN_BOXED(4616096711272852628,64,FLEN)
NAN_BOXED(4602223718103003372,64,FLEN)
NAN_BOXED(4593305650758993472,64,FLEN)
NAN_BOXED(4616096711272852628,64,FLEN)
NAN_BOXED(4602223718103003372,64,FLEN)
NAN_BOXED(4593305650758993472,64,FLEN)
NAN_BOXED(4616096711272852628,64,FLEN)
NAN_BOXED(4602223718103003372,64,FLEN)
NAN_BOXED(4593305650758993472,64,FLEN)
NAN_BOXED(4616096711272852628,64,FLEN)
NAN_BOXED(4602223718103003372,64,FLEN)
NAN_BOXED(4593305650758993472,64,FLEN)
NAN_BOXED(4616096711272852628,64,FLEN)
NAN_BOXED(4602223718103003372,64,FLEN)
NAN_BOXED(4593362214542447888,64,FLEN)
NAN_BOXED(4614417340034774218,64,FLEN)
NAN_BOXED(4600658015117239348,64,FLEN)
NAN_BOXED(4593362214542447888,64,FLEN)
NAN_BOXED(4614417340034774218,64,FLEN)
NAN_BOXED(4600658015117239348,64,FLEN)
NAN_BOXED(4593362214542447888,64,FLEN)
NAN_BOXED(4614417340034774218,64,FLEN)
NAN_BOXED(4600658015117239348,64,FLEN)
NAN_BOXED(4593362214542447888,64,FLEN)
NAN_BOXED(4614417340034774218,64,FLEN)
NAN_BOXED(4600658015117239348,64,FLEN)
NAN_BOXED(4593362214542447888,64,FLEN)
NAN_BOXED(4614417340034774218,64,FLEN)
NAN_BOXED(4600658015117239348,64,FLEN)
NAN_BOXED(4593391064162183048,64,FLEN)
NAN_BOXED(4616378096396844159,64,FLEN)
NAN_BOXED(4602721148923655534,64,FLEN)
NAN_BOXED(4593391064162183048,64,FLEN)
NAN_BOXED(4616378096396844159,64,FLEN)
NAN_BOXED(4602721148923655534,64,FLEN)
NAN_BOXED(4593391064162183048,64,FLEN)
NAN_BOXED(4616378096396844159,64,FLEN)
NAN_BOXED(4602721148923655534,64,FLEN)
NAN_BOXED(4593391064162183048,64,FLEN)
NAN_BOXED(4616378096396844159,64,FLEN)
NAN_BOXED(4602721148923655534,64,FLEN)
NAN_BOXED(4593391064162183048,64,FLEN)
NAN_BOXED(4616378096396844159,64,FLEN)
NAN_BOXED(4602721148923655534,64,FLEN)
NAN_BOXED(4594148759144122372,64,FLEN)
NAN_BOXED(4614825130011365395,64,FLEN)
NAN_BOXED(4602124047270852296,64,FLEN)
NAN_BOXED(4594148759144122372,64,FLEN)
NAN_BOXED(4614825130011365395,64,FLEN)
NAN_BOXED(4602124047270852296,64,FLEN)
NAN_BOXED(4594148759144122372,64,FLEN)
NAN_BOXED(4614825130011365395,64,FLEN)
NAN_BOXED(4602124047270852296,64,FLEN)
NAN_BOXED(4594148759144122372,64,FLEN)
NAN_BOXED(4614825130011365395,64,FLEN)
NAN_BOXED(4602124047270852296,64,FLEN)
NAN_BOXED(4594148759144122372,64,FLEN)
NAN_BOXED(4614825130011365395,64,FLEN)
NAN_BOXED(4602124047270852296,64,FLEN)
NAN_BOXED(4594238355977802244,64,FLEN)
NAN_BOXED(4609757240075888503,64,FLEN)
NAN_BOXED(4597137194525536472,64,FLEN)
NAN_BOXED(4594238355977802244,64,FLEN)
NAN_BOXED(4609757240075888503,64,FLEN)
NAN_BOXED(4597137194525536472,64,FLEN)
NAN_BOXED(4594238355977802244,64,FLEN)
NAN_BOXED(4609757240075888503,64,FLEN)
NAN_BOXED(4597137194525536472,64,FLEN)
NAN_BOXED(4594238355977802244,64,FLEN)
NAN_BOXED(4609757240075888503,64,FLEN)
NAN_BOXED(4597137194525536472,64,FLEN)
NAN_BOXED(4594238355977802244,64,FLEN)
NAN_BOXED(4609757240075888503,64,FLEN)
NAN_BOXED(4597137194525536472,64,FLEN)
NAN_BOXED(4594281270855754660,64,FLEN)
NAN_BOXED(4617399499735327977,64,FLEN)
NAN_BOXED(4604662133113179761,64,FLEN)
NAN_BOXED(4594281270855754660,64,FLEN)
NAN_BOXED(4617399499735327977,64,FLEN)
NAN_BOXED(4604662133113179761,64,FLEN)
NAN_BOXED(4594281270855754660,64,FLEN)
NAN_BOXED(4617399499735327977,64,FLEN)
NAN_BOXED(4604662133113179761,64,FLEN)
NAN_BOXED(4594281270855754660,64,FLEN)
NAN_BOXED(4617399499735327977,64,FLEN)
NAN_BOXED(4604662133113179761,64,FLEN)
NAN_BOXED(4594281270855754660,64,FLEN)
NAN_BOXED(4617399499735327977,64,FLEN)
NAN_BOXED(4604662133113179761,64,FLEN)
NAN_BOXED(4594392318916973088,64,FLEN)
NAN_BOXED(4616828047221810122,64,FLEN)
NAN_BOXED(4604140113450263175,64,FLEN)
NAN_BOXED(4594392318916973088,64,FLEN)
NAN_BOXED(4616828047221810122,64,FLEN)
NAN_BOXED(4604140113450263175,64,FLEN)
NAN_BOXED(4594392318916973088,64,FLEN)
NAN_BOXED(4616828047221810122,64,FLEN)
NAN_BOXED(4604140113450263175,64,FLEN)
NAN_BOXED(4594392318916973088,64,FLEN)
NAN_BOXED(4616828047221810122,64,FLEN)
NAN_BOXED(4604140113450263175,64,FLEN)
NAN_BOXED(4594392318916973088,64,FLEN)
NAN_BOXED(4616828047221810122,64,FLEN)
NAN_BOXED(4604140113450263175,64,FLEN)
NAN_BOXED(4594446540576154364,64,FLEN)
NAN_BOXED(4618892327981073817,64,FLEN)
NAN_BOXED(4606621496814774767,64,FLEN)
NAN_BOXED(4594446540576154364,64,FLEN)
NAN_BOXED(4618892327981073817,64,FLEN)
NAN_BOXED(4606621496814774767,64,FLEN)
NAN_BOXED(4594446540576154364,64,FLEN)
NAN_BOXED(4618892327981073817,64,FLEN)
NAN_BOXED(4606621496814774767,64,FLEN)
NAN_BOXED(4594446540576154364,64,FLEN)
NAN_BOXED(4618892327981073817,64,FLEN)
NAN_BOXED(4606621496814774767,64,FLEN)
NAN_BOXED(4594446540576154364,64,FLEN)
NAN_BOXED(4618892327981073817,64,FLEN)
NAN_BOXED(4606621496814774767,64,FLEN)
NAN_BOXED(4594474961920114228,64,FLEN)
NAN_BOXED(4611321611007100158,64,FLEN)
NAN_BOXED(4598763856748117202,64,FLEN)
NAN_BOXED(4594474961920114228,64,FLEN)
NAN_BOXED(4611321611007100158,64,FLEN)
NAN_BOXED(4598763856748117202,64,FLEN)
NAN_BOXED(4594474961920114228,64,FLEN)
NAN_BOXED(4611321611007100158,64,FLEN)
NAN_BOXED(4598763856748117202,64,FLEN)
NAN_BOXED(4594474961920114228,64,FLEN)
NAN_BOXED(4611321611007100158,64,FLEN)
NAN_BOXED(4598763856748117202,64,FLEN)
NAN_BOXED(4594474961920114228,64,FLEN)
NAN_BOXED(4611321611007100158,64,FLEN)
NAN_BOXED(4598763856748117202,64,FLEN)
NAN_BOXED(4594778340802719356,64,FLEN)
NAN_BOXED(4616490021205205231,64,FLEN)
NAN_BOXED(4604159764699152255,64,FLEN)
NAN_BOXED(4594778340802719356,64,FLEN)
NAN_BOXED(4616490021205205231,64,FLEN)
NAN_BOXED(4604159764699152255,64,FLEN)
NAN_BOXED(4594778340802719356,64,FLEN)
NAN_BOXED(4616490021205205231,64,FLEN)
NAN_BOXED(4604159764699152255,64,FLEN)
NAN_BOXED(4594778340802719356,64,FLEN)
NAN_BOXED(4616490021205205231,64,FLEN)
NAN_BOXED(4604159764699152255,64,FLEN)
NAN_BOXED(4594778340802719356,64,FLEN)
NAN_BOXED(4616490021205205231,64,FLEN)
NAN_BOXED(4604159764699152255,64,FLEN)
NAN_BOXED(4595002986724726472,64,FLEN)
NAN_BOXED(4617915897791614247,64,FLEN)
NAN_BOXED(4606246793394425261,64,FLEN)
NAN_BOXED(4595002986724726472,64,FLEN)
NAN_BOXED(4617915897791614247,64,FLEN)
NAN_BOXED(4606246793394425261,64,FLEN)
NAN_BOXED(4595002986724726472,64,FLEN)
NAN_BOXED(4617915897791614247,64,FLEN)
NAN_BOXED(4606246793394425261,64,FLEN)
NAN_BOXED(4595002986724726472,64,FLEN)
NAN_BOXED(4617915897791614247,64,FLEN)
NAN_BOXED(4606246793394425261,64,FLEN)
NAN_BOXED(4595002986724726472,64,FLEN)
NAN_BOXED(4617915897791614247,64,FLEN)
NAN_BOXED(4606246793394425261,64,FLEN)
NAN_BOXED(4595204114991152248,64,FLEN)
NAN_BOXED(4618058611809637124,64,FLEN)
NAN_BOXED(4606716293425380440,64,FLEN)
NAN_BOXED(4595204114991152248,64,FLEN)
NAN_BOXED(4618058611809637124,64,FLEN)
NAN_BOXED(4606716293425380440,64,FLEN)
NAN_BOXED(4595204114991152248,64,FLEN)
NAN_BOXED(4618058611809637124,64,FLEN)
NAN_BOXED(4606716293425380440,64,FLEN)
NAN_BOXED(4595204114991152248,64,FLEN)
NAN_BOXED(4618058611809637124,64,FLEN)
NAN_BOXED(4606716293425380440,64,FLEN)
NAN_BOXED(4595204114991152248,64,FLEN)
NAN_BOXED(4618058611809637124,64,FLEN)
NAN_BOXED(4606716293425380440,64,FLEN)
NAN_BOXED(4595353038071784828,64,FLEN)
NAN_BOXED(4617670566806643049,64,FLEN)
NAN_BOXED(4606394098042708913,64,FLEN)
NAN_BOXED(4595353038071784828,64,FLEN)
NAN_BOXED(4617670566806643049,64,FLEN)
NAN_BOXED(4606394098042708913,64,FLEN)
NAN_BOXED(4595353038071784828,64,FLEN)
NAN_BOXED(4617670566806643049,64,FLEN)
NAN_BOXED(4606394098042708913,64,FLEN)
NAN_BOXED(4595353038071784828,64,FLEN)
NAN_BOXED(4617670566806643049,64,FLEN)
NAN_BOXED(4606394098042708913,64,FLEN)
NAN_BOXED(4595353038071784828,64,FLEN)
NAN_BOXED(4617670566806643049,64,FLEN)
NAN_BOXED(4606394098042708913,64,FLEN)
NAN_BOXED(4596072200035811128,64,FLEN)
NAN_BOXED(4612164068836445526,64,FLEN)
NAN_BOXED(4601308668085005230,64,FLEN)
NAN_BOXED(4596072200035811128,64,FLEN)
NAN_BOXED(4612164068836445526,64,FLEN)
NAN_BOXED(4601308668085005230,64,FLEN)
NAN_BOXED(4596072200035811128,64,FLEN)
NAN_BOXED(4612164068836445526,64,FLEN)
NAN_BOXED(4601308668085005230,64,FLEN)
NAN_BOXED(4596072200035811128,64,FLEN)
NAN_BOXED(4612164068836445526,64,FLEN)
NAN_BOXED(4601308668085005230,64,FLEN)
NAN_BOXED(4596072200035811128,64,FLEN)
NAN_BOXED(4612164068836445526,64,FLEN)
NAN_BOXED(4601308668085005230,64,FLEN)
NAN_BOXED(4596175443982344736,64,FLEN)
NAN_BOXED(4593417137070733004,64,FLEN)
NAN_BOXED(4582466662455239584,64,FLEN)
NAN_BOXED(4596175443982344736,64,FLEN)
NAN_BOXED(4593417137070733004,64,FLEN)
NAN_BOXED(4582466662455239584,64,FLEN)
NAN_BOXED(4596175443982344736,64,FLEN)
NAN_BOXED(4593417137070733004,64,FLEN)
NAN_BOXED(4582466662455239584,64,FLEN)
NAN_BOXED(4596175443982344736,64,FLEN)
NAN_BOXED(4593417137070733004,64,FLEN)
NAN_BOXED(4582466662455239584,64,FLEN)
NAN_BOXED(4596175443982344736,64,FLEN)
NAN_BOXED(4593417137070733004,64,FLEN)
NAN_BOXED(4582466662455239584,64,FLEN)
NAN_BOXED(4596184346043165448,64,FLEN)
NAN_BOXED(4614441379920165879,64,FLEN)
NAN_BOXED(4603829722616009513,64,FLEN)
NAN_BOXED(4596184346043165448,64,FLEN)
NAN_BOXED(4614441379920165879,64,FLEN)
NAN_BOXED(4603829722616009513,64,FLEN)
NAN_BOXED(4596184346043165448,64,FLEN)
NAN_BOXED(4614441379920165879,64,FLEN)
NAN_BOXED(4603829722616009513,64,FLEN)
NAN_BOXED(4596184346043165448,64,FLEN)
NAN_BOXED(4614441379920165879,64,FLEN)
NAN_BOXED(4603829722616009513,64,FLEN)
NAN_BOXED(4596184346043165448,64,FLEN)
NAN_BOXED(4614441379920165879,64,FLEN)
NAN_BOXED(4603829722616009513,64,FLEN)
NAN_BOXED(4596189166342404508,64,FLEN)
NAN_BOXED(4615669353957944100,64,FLEN)
NAN_BOXED(4604790817756360890,64,FLEN)
NAN_BOXED(4596189166342404508,64,FLEN)
NAN_BOXED(4615669353957944100,64,FLEN)
NAN_BOXED(4604790817756360890,64,FLEN)
NAN_BOXED(4596189166342404508,64,FLEN)
NAN_BOXED(4615669353957944100,64,FLEN)
NAN_BOXED(4604790817756360890,64,FLEN)
NAN_BOXED(4596189166342404508,64,FLEN)
NAN_BOXED(4615669353957944100,64,FLEN)
NAN_BOXED(4604790817756360890,64,FLEN)
NAN_BOXED(4596189166342404508,64,FLEN)
NAN_BOXED(4615669353957944100,64,FLEN)
NAN_BOXED(4604790817756360890,64,FLEN)
NAN_BOXED(4596201507522478516,64,FLEN)
NAN_BOXED(4613581764495211492,64,FLEN)
NAN_BOXED(4603172301875418769,64,FLEN)
NAN_BOXED(4596201507522478516,64,FLEN)
NAN_BOXED(4613581764495211492,64,FLEN)
NAN_BOXED(4603172301875418769,64,FLEN)
NAN_BOXED(4596201507522478516,64,FLEN)
NAN_BOXED(4613581764495211492,64,FLEN)
NAN_BOXED(4603172301875418769,64,FLEN)
NAN_BOXED(4596201507522478516,64,FLEN)
NAN_BOXED(4613581764495211492,64,FLEN)
NAN_BOXED(4603172301875418769,64,FLEN)
NAN_BOXED(4596201507522478516,64,FLEN)
NAN_BOXED(4613581764495211492,64,FLEN)
NAN_BOXED(4603172301875418769,64,FLEN)
NAN_BOXED(4596202967753169180,64,FLEN)
NAN_BOXED(4614985334856673893,64,FLEN)
NAN_BOXED(4604269578397727296,64,FLEN)
NAN_BOXED(4596202967753169180,64,FLEN)
NAN_BOXED(4614985334856673893,64,FLEN)
NAN_BOXED(4604269578397727296,64,FLEN)
NAN_BOXED(4596202967753169180,64,FLEN)
NAN_BOXED(4614985334856673893,64,FLEN)
NAN_BOXED(4604269578397727296,64,FLEN)
NAN_BOXED(4596202967753169180,64,FLEN)
NAN_BOXED(4614985334856673893,64,FLEN)
NAN_BOXED(4604269578397727296,64,FLEN)
NAN_BOXED(4596202967753169180,64,FLEN)
NAN_BOXED(4614985334856673893,64,FLEN)
NAN_BOXED(4604269578397727296,64,FLEN)
NAN_BOXED(4596252531637436244,64,FLEN)
NAN_BOXED(4609877584187371254,64,FLEN)
NAN_BOXED(4599333727637310844,64,FLEN)
NAN_BOXED(4596252531637436244,64,FLEN)
NAN_BOXED(4609877584187371254,64,FLEN)
NAN_BOXED(4599333727637310844,64,FLEN)
NAN_BOXED(4596252531637436244,64,FLEN)
NAN_BOXED(4609877584187371254,64,FLEN)
NAN_BOXED(4599333727637310844,64,FLEN)
NAN_BOXED(4596252531637436244,64,FLEN)
NAN_BOXED(4609877584187371254,64,FLEN)
NAN_BOXED(4599333727637310844,64,FLEN)
NAN_BOXED(4596252531637436244,64,FLEN)
NAN_BOXED(4609877584187371254,64,FLEN)
NAN_BOXED(4599333727637310844,64,FLEN)
NAN_BOXED(4596514333928113808,64,FLEN)
NAN_BOXED(4612519930638727154,64,FLEN)
NAN_BOXED(4602378218917769396,64,FLEN)
NAN_BOXED(4596514333928113808,64,FLEN)
NAN_BOXED(4612519930638727154,64,FLEN)
NAN_BOXED(4602378218917769396,64,FLEN)
NAN_BOXED(4596514333928113808,64,FLEN)
NAN_BOXED(4612519930638727154,64,FLEN)
NAN_BOXED(4602378218917769396,64,FLEN)
NAN_BOXED(4596514333928113808,64,FLEN)
NAN_BOXED(4612519930638727154,64,FLEN)
NAN_BOXED(4602378218917769396,64,FLEN)
NAN_BOXED(4596514333928113808,64,FLEN)
NAN_BOXED(4612519930638727154,64,FLEN)
NAN_BOXED(4602378218917769396,64,FLEN)
NAN_BOXED(4596600486171243464,64,FLEN)
NAN_BOXED(4616405311347839916,64,FLEN)
NAN_BOXED(4605963652468832344,64,FLEN)
NAN_BOXED(4596600486171243464,64,FLEN)
NAN_BOXED(4616405311347839916,64,FLEN)
NAN_BOXED(4605963652468832344,64,FLEN)
NAN_BOXED(4596600486171243464,64,FLEN)
NAN_BOXED(4616405311347839916,64,FLEN)
NAN_BOXED(4605963652468832344,64,FLEN)
NAN_BOXED(4596600486171243464,64,FLEN)
NAN_BOXED(4616405311347839916,64,FLEN)
NAN_BOXED(4605963652468832344,64,FLEN)
NAN_BOXED(4596600486171243464,64,FLEN)
NAN_BOXED(4616405311347839916,64,FLEN)
NAN_BOXED(4605963652468832344,64,FLEN)
NAN_BOXED(4596610164290228408,64,FLEN)
NAN_BOXED(4599199721280634513,64,FLEN)
NAN_BOXED(4589231981036015616,64,FLEN)
NAN_BOXED(4596610164290228408,64,FLEN)
NAN_BOXED(4599199721280634513,64,FLEN)
NAN_BOXED(4589231981036015616,64,FLEN)
NAN_BOXED(4596610164290228408,64,FLEN)
NAN_BOXED(4599199721280634513,64,FLEN)
NAN_BOXED(4589231981036015616,64,FLEN)
NAN_BOXED(4596610164290228408,64,FLEN)
NAN_BOXED(4599199721280634513,64,FLEN)
NAN_BOXED(4589231981036015616,64,FLEN)
NAN_BOXED(4596610164290228408,64,FLEN)
NAN_BOXED(4599199721280634513,64,FLEN)
NAN_BOXED(4589231981036015616,64,FLEN)
NAN_BOXED(4596613728464642564,64,FLEN)
NAN_BOXED(4605935289550714196,64,FLEN)
NAN_BOXED(4595582801959845036,64,FLEN)
NAN_BOXED(4596613728464642564,64,FLEN)
NAN_BOXED(4605935289550714196,64,FLEN)
NAN_BOXED(4595582801959845036,64,FLEN)
NAN_BOXED(4596613728464642564,64,FLEN)
NAN_BOXED(4605935289550714196,64,FLEN)
NAN_BOXED(4595582801959845036,64,FLEN)
NAN_BOXED(4596613728464642564,64,FLEN)
NAN_BOXED(4605935289550714196,64,FLEN)
NAN_BOXED(4595582801959845036,64,FLEN)
NAN_BOXED(4596613728464642564,64,FLEN)
NAN_BOXED(4605935289550714196,64,FLEN)
NAN_BOXED(4595582801959845036,64,FLEN)
NAN_BOXED(4596714787392086760,64,FLEN)
NAN_BOXED(4608166287436025272,64,FLEN)
NAN_BOXED(4598269347112524498,64,FLEN)
NAN_BOXED(4596714787392086760,64,FLEN)
NAN_BOXED(4608166287436025272,64,FLEN)
NAN_BOXED(4598269347112524498,64,FLEN)
NAN_BOXED(4596714787392086760,64,FLEN)
NAN_BOXED(4608166287436025272,64,FLEN)
NAN_BOXED(4598269347112524498,64,FLEN)
NAN_BOXED(4596714787392086760,64,FLEN)
NAN_BOXED(4608166287436025272,64,FLEN)
NAN_BOXED(4598269347112524498,64,FLEN)
NAN_BOXED(4596714787392086760,64,FLEN)
NAN_BOXED(4608166287436025272,64,FLEN)
NAN_BOXED(4598269347112524498,64,FLEN)
NAN_BOXED(4596822585457457816,64,FLEN)
NAN_BOXED(4615513562097244259,64,FLEN)
NAN_BOXED(4605255253802320883,64,FLEN)
NAN_BOXED(4596822585457457816,64,FLEN)
NAN_BOXED(4615513562097244259,64,FLEN)
NAN_BOXED(4605255253802320883,64,FLEN)
NAN_BOXED(4596822585457457816,64,FLEN)
NAN_BOXED(4615513562097244259,64,FLEN)
NAN_BOXED(4605255253802320883,64,FLEN)
NAN_BOXED(4596822585457457816,64,FLEN)
NAN_BOXED(4615513562097244259,64,FLEN)
NAN_BOXED(4605255253802320883,64,FLEN)
NAN_BOXED(4596822585457457816,64,FLEN)
NAN_BOXED(4615513562097244259,64,FLEN)
NAN_BOXED(4605255253802320883,64,FLEN)
NAN_BOXED(4596863116752346944,64,FLEN)
NAN_BOXED(4611727357376864828,64,FLEN)
NAN_BOXED(4601437350368121204,64,FLEN)
NAN_BOXED(4596863116752346944,64,FLEN)
NAN_BOXED(4611727357376864828,64,FLEN)
NAN_BOXED(4601437350368121204,64,FLEN)
NAN_BOXED(4596863116752346944,64,FLEN)
NAN_BOXED(4611727357376864828,64,FLEN)
NAN_BOXED(4601437350368121204,64,FLEN)
NAN_BOXED(4596863116752346944,64,FLEN)
NAN_BOXED(4611727357376864828,64,FLEN)
NAN_BOXED(4601437350368121204,64,FLEN)
NAN_BOXED(4596863116752346944,64,FLEN)
NAN_BOXED(4611727357376864828,64,FLEN)
NAN_BOXED(4601437350368121204,64,FLEN)
NAN_BOXED(4596863490521403616,64,FLEN)
NAN_BOXED(4615346774182495466,64,FLEN)
NAN_BOXED(4605150590248552266,64,FLEN)
NAN_BOXED(4596863490521403616,64,FLEN)
NAN_BOXED(4615346774182495466,64,FLEN)
NAN_BOXED(4605150590248552266,64,FLEN)
NAN_BOXED(4596863490521403616,64,FLEN)
NAN_BOXED(4615346774182495466,64,FLEN)
NAN_BOXED(4605150590248552266,64,FLEN)
NAN_BOXED(4596863490521403616,64,FLEN)
NAN_BOXED(4615346774182495466,64,FLEN)
NAN_BOXED(4605150590248552266,64,FLEN)
NAN_BOXED(4596863490521403616,64,FLEN)
NAN_BOXED(4615346774182495466,64,FLEN)
NAN_BOXED(4605150590248552266,64,FLEN)
NAN_BOXED(4597011800736829180,64,FLEN)
NAN_BOXED(4605890660285897251,64,FLEN)
NAN_BOXED(4595886892772896220,64,FLEN)
NAN_BOXED(4597011800736829180,64,FLEN)
NAN_BOXED(4605890660285897251,64,FLEN)
NAN_BOXED(4595886892772896220,64,FLEN)
NAN_BOXED(4597011800736829180,64,FLEN)
NAN_BOXED(4605890660285897251,64,FLEN)
NAN_BOXED(4595886892772896220,64,FLEN)
NAN_BOXED(4597011800736829180,64,FLEN)
NAN_BOXED(4605890660285897251,64,FLEN)
NAN_BOXED(4595886892772896220,64,FLEN)
NAN_BOXED(4597011800736829180,64,FLEN)
NAN_BOXED(4605890660285897251,64,FLEN)
NAN_BOXED(4595886892772896220,64,FLEN)
NAN_BOXED(4597148470182667464,64,FLEN)
NAN_BOXED(4612803443760265752,64,FLEN)
NAN_BOXED(4603155492188193022,64,FLEN)
NAN_BOXED(4597148470182667464,64,FLEN)
NAN_BOXED(4612803443760265752,64,FLEN)
NAN_BOXED(4603155492188193022,64,FLEN)
NAN_BOXED(4597148470182667464,64,FLEN)
NAN_BOXED(4612803443760265752,64,FLEN)
NAN_BOXED(4603155492188193022,64,FLEN)
NAN_BOXED(4597148470182667464,64,FLEN)
NAN_BOXED(4612803443760265752,64,FLEN)
NAN_BOXED(4603155492188193022,64,FLEN)
NAN_BOXED(4597148470182667464,64,FLEN)
NAN_BOXED(4612803443760265752,64,FLEN)
NAN_BOXED(4603155492188193022,64,FLEN)
NAN_BOXED(4597164341233135852,64,FLEN)
NAN_BOXED(4616672415845622022,64,FLEN)
NAN_BOXED(4607028767241041419,64,FLEN)
NAN_BOXED(4597164341233135852,64,FLEN)
NAN_BOXED(4616672415845622022,64,FLEN)
NAN_BOXED(4607028767241041419,64,FLEN)
NAN_BOXED(4597164341233135852,64,FLEN)
NAN_BOXED(4616672415845622022,64,FLEN)
NAN_BOXED(4607028767241041419,64,FLEN)
NAN_BOXED(4597164341233135852,64,FLEN)
NAN_BOXED(4616672415845622022,64,FLEN)
NAN_BOXED(4607028767241041419,64,FLEN)
NAN_BOXED(4597164341233135852,64,FLEN)
NAN_BOXED(4616672415845622022,64,FLEN)
NAN_BOXED(4607028767241041419,64,FLEN)
NAN_BOXED(4598231636457336290,64,FLEN)
NAN_BOXED(4608700530808113864,64,FLEN)
NAN_BOXED(4599768765962267344,64,FLEN)
NAN_BOXED(4598231636457336290,64,FLEN)
NAN_BOXED(4608700530808113864,64,FLEN)
NAN_BOXED(4599768765962267344,64,FLEN)
NAN_BOXED(4598231636457336290,64,FLEN)
NAN_BOXED(4608700530808113864,64,FLEN)
NAN_BOXED(4599768765962267344,64,FLEN)
NAN_BOXED(4598231636457336290,64,FLEN)
NAN_BOXED(4608700530808113864,64,FLEN)
NAN_BOXED(4599768765962267344,64,FLEN)
NAN_BOXED(4598231636457336290,64,FLEN)
NAN_BOXED(4608700530808113864,64,FLEN)
NAN_BOXED(4599768765962267344,64,FLEN)
NAN_BOXED(4598237983690128882,64,FLEN)
NAN_BOXED(4613704433238128656,64,FLEN)
NAN_BOXED(4604788127644634922,64,FLEN)
NAN_BOXED(4598237983690128882,64,FLEN)
NAN_BOXED(4613704433238128656,64,FLEN)
NAN_BOXED(4604788127644634922,64,FLEN)
NAN_BOXED(4598237983690128882,64,FLEN)
NAN_BOXED(4613704433238128656,64,FLEN)
NAN_BOXED(4604788127644634922,64,FLEN)
NAN_BOXED(4598237983690128882,64,FLEN)
NAN_BOXED(4613704433238128656,64,FLEN)
NAN_BOXED(4604788127644634922,64,FLEN)
NAN_BOXED(4598237983690128882,64,FLEN)
NAN_BOXED(4613704433238128656,64,FLEN)
NAN_BOXED(4604788127644634922,64,FLEN)
NAN_BOXED(4598241637993508058,64,FLEN)
NAN_BOXED(4612528039330742605,64,FLEN)
NAN_BOXED(4603599676529030915,64,FLEN)
NAN_BOXED(4598241637993508058,64,FLEN)
NAN_BOXED(4612528039330742605,64,FLEN)
NAN_BOXED(4603599676529030915,64,FLEN)
NAN_BOXED(4598241637993508058,64,FLEN)
NAN_BOXED(4612528039330742605,64,FLEN)
NAN_BOXED(4603599676529030915,64,FLEN)
NAN_BOXED(4598241637993508058,64,FLEN)
NAN_BOXED(4612528039330742605,64,FLEN)
NAN_BOXED(4603599676529030915,64,FLEN)
NAN_BOXED(4598241637993508058,64,FLEN)
NAN_BOXED(4612528039330742605,64,FLEN)
NAN_BOXED(4603599676529030915,64,FLEN)
NAN_BOXED(4598341629379923356,64,FLEN)
NAN_BOXED(4613411040919623550,64,FLEN)
NAN_BOXED(4604633991780959176,64,FLEN)
NAN_BOXED(4598341629379923356,64,FLEN)
NAN_BOXED(4613411040919623550,64,FLEN)
NAN_BOXED(4604633991780959176,64,FLEN)
NAN_BOXED(4598341629379923356,64,FLEN)
NAN_BOXED(4613411040919623550,64,FLEN)
NAN_BOXED(4604633991780959176,64,FLEN)
NAN_BOXED(4598341629379923356,64,FLEN)
NAN_BOXED(4613411040919623550,64,FLEN)
NAN_BOXED(4604633991780959176,64,FLEN)
NAN_BOXED(4598341629379923356,64,FLEN)
NAN_BOXED(4613411040919623550,64,FLEN)
NAN_BOXED(4604633991780959176,64,FLEN)
NAN_BOXED(4598374167271977506,64,FLEN)
NAN_BOXED(4611859793576924925,64,FLEN)
NAN_BOXED(4603059218612926689,64,FLEN)
NAN_BOXED(4598374167271977506,64,FLEN)
NAN_BOXED(4611859793576924925,64,FLEN)
NAN_BOXED(4603059218612926689,64,FLEN)
NAN_BOXED(4598374167271977506,64,FLEN)
NAN_BOXED(4611859793576924925,64,FLEN)
NAN_BOXED(4603059218612926689,64,FLEN)
NAN_BOXED(4598374167271977506,64,FLEN)
NAN_BOXED(4611859793576924925,64,FLEN)
NAN_BOXED(4603059218612926689,64,FLEN)
NAN_BOXED(4598374167271977506,64,FLEN)
NAN_BOXED(4611859793576924925,64,FLEN)
NAN_BOXED(4603059218612926689,64,FLEN)
NAN_BOXED(4598407627469785140,64,FLEN)
NAN_BOXED(4612262615316433264,64,FLEN)
NAN_BOXED(4603517579225864576,64,FLEN)
NAN_BOXED(4598407627469785140,64,FLEN)
NAN_BOXED(4612262615316433264,64,FLEN)
NAN_BOXED(4603517579225864576,64,FLEN)
NAN_BOXED(4598407627469785140,64,FLEN)
NAN_BOXED(4612262615316433264,64,FLEN)
NAN_BOXED(4603517579225864576,64,FLEN)
NAN_BOXED(4598407627469785140,64,FLEN)
NAN_BOXED(4612262615316433264,64,FLEN)
NAN_BOXED(4603517579225864576,64,FLEN)
NAN_BOXED(4598407627469785140,64,FLEN)
NAN_BOXED(4612262615316433264,64,FLEN)
NAN_BOXED(4603517579225864576,64,FLEN)
NAN_BOXED(4598508127872609216,64,FLEN)
NAN_BOXED(4614613195270447796,64,FLEN)
NAN_BOXED(4606155282713067879,64,FLEN)
NAN_BOXED(4598508127872609216,64,FLEN)
NAN_BOXED(4614613195270447796,64,FLEN)
NAN_BOXED(4606155282713067879,64,FLEN)
NAN_BOXED(4598508127872609216,64,FLEN)
NAN_BOXED(4614613195270447796,64,FLEN)
NAN_BOXED(4606155282713067879,64,FLEN)
NAN_BOXED(4598508127872609216,64,FLEN)
NAN_BOXED(4614613195270447796,64,FLEN)
NAN_BOXED(4606155282713067879,64,FLEN)
NAN_BOXED(4598508127872609216,64,FLEN)
NAN_BOXED(4614613195270447796,64,FLEN)
NAN_BOXED(4606155282713067879,64,FLEN)
NAN_BOXED(4598538663050418920,64,FLEN)
NAN_BOXED(4612066436081881973,64,FLEN)
NAN_BOXED(4603453380291695317,64,FLEN)
NAN_BOXED(4598538663050418920,64,FLEN)
NAN_BOXED(4612066436081881973,64,FLEN)
NAN_BOXED(4603453380291695317,64,FLEN)
NAN_BOXED(4598538663050418920,64,FLEN)
NAN_BOXED(4612066436081881973,64,FLEN)
NAN_BOXED(4603453380291695317,64,FLEN)
NAN_BOXED(4598538663050418920,64,FLEN)
NAN_BOXED(4612066436081881973,64,FLEN)
NAN_BOXED(4603453380291695317,64,FLEN)
NAN_BOXED(4598538663050418920,64,FLEN)
NAN_BOXED(4612066436081881973,64,FLEN)
NAN_BOXED(4603453380291695317,64,FLEN)
NAN_BOXED(4598564223702834980,64,FLEN)
NAN_BOXED(4609403229350905785,64,FLEN)
NAN_BOXED(4600976859595433386,64,FLEN)
NAN_BOXED(4598564223702834980,64,FLEN)
NAN_BOXED(4609403229350905785,64,FLEN)
NAN_BOXED(4600976859595433386,64,FLEN)
NAN_BOXED(4598564223702834980,64,FLEN)
NAN_BOXED(4609403229350905785,64,FLEN)
NAN_BOXED(4600976859595433386,64,FLEN)
NAN_BOXED(4598564223702834980,64,FLEN)
NAN_BOXED(4609403229350905785,64,FLEN)
NAN_BOXED(4600976859595433386,64,FLEN)
NAN_BOXED(4598564223702834980,64,FLEN)
NAN_BOXED(4609403229350905785,64,FLEN)
NAN_BOXED(4600976859595433386,64,FLEN)
NAN_BOXED(4598572187022230218,64,FLEN)
NAN_BOXED(4599185006843517899,64,FLEN)
NAN_BOXED(4590663782248697584,64,FLEN)
NAN_BOXED(4598572187022230218,64,FLEN)
NAN_BOXED(4599185006843517899,64,FLEN)
NAN_BOXED(4590663782248697584,64,FLEN)
NAN_BOXED(4598572187022230218,64,FLEN)
NAN_BOXED(4599185006843517899,64,FLEN)
NAN_BOXED(4590663782248697584,64,FLEN)
NAN_BOXED(4598572187022230218,64,FLEN)
NAN_BOXED(4599185006843517899,64,FLEN)
NAN_BOXED(4590663782248697584,64,FLEN)
NAN_BOXED(4598572187022230218,64,FLEN)
NAN_BOXED(4599185006843517899,64,FLEN)
NAN_BOXED(4590663782248697584,64,FLEN)
NAN_BOXED(4598582239462446978,64,FLEN)
NAN_BOXED(4607594104990530897,64,FLEN)
NAN_BOXED(4599031132441535698,64,FLEN)
NAN_BOXED(4598582239462446978,64,FLEN)
NAN_BOXED(4607594104990530897,64,FLEN)
NAN_BOXED(4599031132441535698,64,FLEN)
NAN_BOXED(4598582239462446978,64,FLEN)
NAN_BOXED(4607594104990530897,64,FLEN)
NAN_BOXED(4599031132441535698,64,FLEN)
NAN_BOXED(4598582239462446978,64,FLEN)
NAN_BOXED(4607594104990530897,64,FLEN)
NAN_BOXED(4599031132441535698,64,FLEN)
NAN_BOXED(4598582239462446978,64,FLEN)
NAN_BOXED(4607594104990530897,64,FLEN)
NAN_BOXED(4599031132441535698,64,FLEN)
NAN_BOXED(4598640921832696448,64,FLEN)
NAN_BOXED(4602538493394120999,64,FLEN)
NAN_BOXED(4594059904004595436,64,FLEN)
NAN_BOXED(4598640921832696448,64,FLEN)
NAN_BOXED(4602538493394120999,64,FLEN)
NAN_BOXED(4594059904004595436,64,FLEN)
NAN_BOXED(4598640921832696448,64,FLEN)
NAN_BOXED(4602538493394120999,64,FLEN)
NAN_BOXED(4594059904004595436,64,FLEN)
NAN_BOXED(4598640921832696448,64,FLEN)
NAN_BOXED(4602538493394120999,64,FLEN)
NAN_BOXED(4594059904004595436,64,FLEN)
NAN_BOXED(4598640921832696448,64,FLEN)
NAN_BOXED(4602538493394120999,64,FLEN)
NAN_BOXED(4594059904004595436,64,FLEN)
NAN_BOXED(4598721811446107762,64,FLEN)
NAN_BOXED(4613968783889912471,64,FLEN)
NAN_BOXED(4605785230718557229,64,FLEN)
NAN_BOXED(4598721811446107762,64,FLEN)
NAN_BOXED(4613968783889912471,64,FLEN)
NAN_BOXED(4605785230718557229,64,FLEN)
NAN_BOXED(4598721811446107762,64,FLEN)
NAN_BOXED(4613968783889912471,64,FLEN)
NAN_BOXED(4605785230718557229,64,FLEN)
NAN_BOXED(4598721811446107762,64,FLEN)
NAN_BOXED(4613968783889912471,64,FLEN)
NAN_BOXED(4605785230718557229,64,FLEN)
NAN_BOXED(4598721811446107762,64,FLEN)
NAN_BOXED(4613968783889912471,64,FLEN)
NAN_BOXED(4605785230718557229,64,FLEN)
NAN_BOXED(4598745251796487922,64,FLEN)
NAN_BOXED(4614811937874173363,64,FLEN)
NAN_BOXED(4606770426578697419,64,FLEN)
NAN_BOXED(4598745251796487922,64,FLEN)
NAN_BOXED(4614811937874173363,64,FLEN)
NAN_BOXED(4606770426578697419,64,FLEN)
NAN_BOXED(4598745251796487922,64,FLEN)
NAN_BOXED(4614811937874173363,64,FLEN)
NAN_BOXED(4606770426578697419,64,FLEN)
NAN_BOXED(4598745251796487922,64,FLEN)
NAN_BOXED(4614811937874173363,64,FLEN)
NAN_BOXED(4606770426578697419,64,FLEN)
NAN_BOXED(4598745251796487922,64,FLEN)
NAN_BOXED(4614811937874173363,64,FLEN)
NAN_BOXED(4606770426578697419,64,FLEN)
NAN_BOXED(4598781000223384960,64,FLEN)
NAN_BOXED(4608313433514899794,64,FLEN)
NAN_BOXED(4600064148102318660,64,FLEN)
NAN_BOXED(4598781000223384960,64,FLEN)
NAN_BOXED(4608313433514899794,64,FLEN)
NAN_BOXED(4600064148102318660,64,FLEN)
NAN_BOXED(4598781000223384960,64,FLEN)
NAN_BOXED(4608313433514899794,64,FLEN)
NAN_BOXED(4600064148102318660,64,FLEN)
NAN_BOXED(4598781000223384960,64,FLEN)
NAN_BOXED(4608313433514899794,64,FLEN)
NAN_BOXED(4600064148102318660,64,FLEN)
NAN_BOXED(4598781000223384960,64,FLEN)
NAN_BOXED(4608313433514899794,64,FLEN)
NAN_BOXED(4600064148102318660,64,FLEN)
NAN_BOXED(4598985800777554520,64,FLEN)
NAN_BOXED(4604449750153906904,64,FLEN)
NAN_BOXED(4596571873479663580,64,FLEN)
NAN_BOXED(4598985800777554520,64,FLEN)
NAN_BOXED(4604449750153906904,64,FLEN)
NAN_BOXED(4596571873479663580,64,FLEN)
NAN_BOXED(4598985800777554520,64,FLEN)
NAN_BOXED(4604449750153906904,64,FLEN)
NAN_BOXED(4596571873479663580,64,FLEN)
NAN_BOXED(4598985800777554520,64,FLEN)
NAN_BOXED(4604449750153906904,64,FLEN)
NAN_BOXED(4596571873479663580,64,FLEN)
NAN_BOXED(4598985800777554520,64,FLEN)
NAN_BOXED(4604449750153906904,64,FLEN)
NAN_BOXED(4596571873479663580,64,FLEN)
NAN_BOXED(4599107937658644476,64,FLEN)
NAN_BOXED(4614550795723994021,64,FLEN)
NAN_BOXED(4607069624356223282,64,FLEN)
NAN_BOXED(4599107937658644476,64,FLEN)
NAN_BOXED(4614550795723994021,64,FLEN)
NAN_BOXED(4607069624356223282,64,FLEN)
NAN_BOXED(4599107937658644476,64,FLEN)
NAN_BOXED(4614550795723994021,64,FLEN)
NAN_BOXED(4607069624356223282,64,FLEN)
NAN_BOXED(4599107937658644476,64,FLEN)
NAN_BOXED(4614550795723994021,64,FLEN)
NAN_BOXED(4607069624356223282,64,FLEN)
NAN_BOXED(4599107937658644476,64,FLEN)
NAN_BOXED(4614550795723994021,64,FLEN)
NAN_BOXED(4607069624356223282,64,FLEN)
NAN_BOXED(4599176004440842084,64,FLEN)
NAN_BOXED(4608397843993067385,64,FLEN)
NAN_BOXED(4600661520067220524,64,FLEN)
NAN_BOXED(4599176004440842084,64,FLEN)
NAN_BOXED(4608397843993067385,64,FLEN)
NAN_BOXED(4600661520067220524,64,FLEN)
NAN_BOXED(4599176004440842084,64,FLEN)
NAN_BOXED(4608397843993067385,64,FLEN)
NAN_BOXED(4600661520067220524,64,FLEN)
NAN_BOXED(4599176004440842084,64,FLEN)
NAN_BOXED(4608397843993067385,64,FLEN)
NAN_BOXED(4600661520067220524,64,FLEN)
NAN_BOXED(4599176004440842084,64,FLEN)
NAN_BOXED(4608397843993067385,64,FLEN)
NAN_BOXED(4600661520067220524,64,FLEN)
NAN_BOXED(4599179338668771860,64,FLEN)
NAN_BOXED(4603725069049700950,64,FLEN)
NAN_BOXED(4595955259989693612,64,FLEN)
NAN_BOXED(4599179338668771860,64,FLEN)
NAN_BOXED(4603725069049700950,64,FLEN)
NAN_BOXED(4595955259989693612,64,FLEN)
NAN_BOXED(4599179338668771860,64,FLEN)
NAN_BOXED(4603725069049700950,64,FLEN)
NAN_BOXED(4595955259989693612,64,FLEN)
NAN_BOXED(4599179338668771860,64,FLEN)
NAN_BOXED(4603725069049700950,64,FLEN)
NAN_BOXED(4595955259989693612,64,FLEN)
NAN_BOXED(4599179338668771860,64,FLEN)
NAN_BOXED(4603725069049700950,64,FLEN)
NAN_BOXED(4595955259989693612,64,FLEN)
NAN_BOXED(4599187621717374430,64,FLEN)
NAN_BOXED(4604313404779445109,64,FLEN)
NAN_BOXED(4596686059991794184,64,FLEN)
NAN_BOXED(4599187621717374430,64,FLEN)
NAN_BOXED(4604313404779445109,64,FLEN)
NAN_BOXED(4596686059991794184,64,FLEN)
NAN_BOXED(4599187621717374430,64,FLEN)
NAN_BOXED(4604313404779445109,64,FLEN)
NAN_BOXED(4596686059991794184,64,FLEN)
NAN_BOXED(4599187621717374430,64,FLEN)
NAN_BOXED(4604313404779445109,64,FLEN)
NAN_BOXED(4596686059991794184,64,FLEN)
NAN_BOXED(4599187621717374430,64,FLEN)
NAN_BOXED(4604313404779445109,64,FLEN)
NAN_BOXED(4596686059991794184,64,FLEN)
NAN_BOXED(4599299848575931454,64,FLEN)
NAN_BOXED(4604545750835854346,64,FLEN)
NAN_BOXED(4597129386695882060,64,FLEN)
NAN_BOXED(4599299848575931454,64,FLEN)
NAN_BOXED(4604545750835854346,64,FLEN)
NAN_BOXED(4597129386695882060,64,FLEN)
NAN_BOXED(4599299848575931454,64,FLEN)
NAN_BOXED(4604545750835854346,64,FLEN)
NAN_BOXED(4597129386695882060,64,FLEN)
NAN_BOXED(4599299848575931454,64,FLEN)
NAN_BOXED(4604545750835854346,64,FLEN)
NAN_BOXED(4597129386695882060,64,FLEN)
NAN_BOXED(4599299848575931454,64,FLEN)
NAN_BOXED(4604545750835854346,64,FLEN)
NAN_BOXED(4597129386695882060,64,FLEN)
NAN_BOXED(4599366178095900846,64,FLEN)
NAN_BOXED(4604528867177322125,64,FLEN)
NAN_BOXED(4597201864121428760,64,FLEN)
NAN_BOXED(4599366178095900846,64,FLEN)
NAN_BOXED(4604528867177322125,64,FLEN)
NAN_BOXED(4597201864121428760,64,FLEN)
NAN_BOXED(4599366178095900846,64,FLEN)
NAN_BOXED(4604528867177322125,64,FLEN)
NAN_BOXED(4597201864121428760,64,FLEN)
NAN_BOXED(4599366178095900846,64,FLEN)
NAN_BOXED(4604528867177322125,64,FLEN)
NAN_BOXED(4597201864121428760,64,FLEN)
NAN_BOXED(4599366178095900846,64,FLEN)
NAN_BOXED(4604528867177322125,64,FLEN)
NAN_BOXED(4597201864121428760,64,FLEN)
NAN_BOXED(4599464797628981976,64,FLEN)
NAN_BOXED(4609959560543658816,64,FLEN)
NAN_BOXED(4602857988010563172,64,FLEN)
NAN_BOXED(4599464797628981976,64,FLEN)
NAN_BOXED(4609959560543658816,64,FLEN)
NAN_BOXED(4602857988010563172,64,FLEN)
NAN_BOXED(4599464797628981976,64,FLEN)
NAN_BOXED(4609959560543658816,64,FLEN)
NAN_BOXED(4602857988010563172,64,FLEN)
NAN_BOXED(4599464797628981976,64,FLEN)
NAN_BOXED(4609959560543658816,64,FLEN)
NAN_BOXED(4602857988010563172,64,FLEN)
NAN_BOXED(4599464797628981976,64,FLEN)
NAN_BOXED(4609959560543658816,64,FLEN)
NAN_BOXED(4602857988010563172,64,FLEN)
NAN_BOXED(4599509422279882766,64,FLEN)
NAN_BOXED(4605695319201767864,64,FLEN)
NAN_BOXED(4598545593979694280,64,FLEN)
NAN_BOXED(4599509422279882766,64,FLEN)
NAN_BOXED(4605695319201767864,64,FLEN)
NAN_BOXED(4598545593979694280,64,FLEN)
NAN_BOXED(4599509422279882766,64,FLEN)
NAN_BOXED(4605695319201767864,64,FLEN)
NAN_BOXED(4598545593979694280,64,FLEN)
NAN_BOXED(4599509422279882766,64,FLEN)
NAN_BOXED(4605695319201767864,64,FLEN)
NAN_BOXED(4598545593979694280,64,FLEN)
NAN_BOXED(4599509422279882766,64,FLEN)
NAN_BOXED(4605695319201767864,64,FLEN)
NAN_BOXED(4598545593979694280,64,FLEN)
NAN_BOXED(4599612460306613346,64,FLEN)
NAN_BOXED(4599706999633209629,64,FLEN)
NAN_BOXED(4592625880504300160,64,FLEN)
NAN_BOXED(4599612460306613346,64,FLEN)
NAN_BOXED(4599706999633209629,64,FLEN)
NAN_BOXED(4592625880504300160,64,FLEN)
NAN_BOXED(4599612460306613346,64,FLEN)
NAN_BOXED(4599706999633209629,64,FLEN)
NAN_BOXED(4592625880504300160,64,FLEN)
NAN_BOXED(4599612460306613346,64,FLEN)
NAN_BOXED(4599706999633209629,64,FLEN)
NAN_BOXED(4592625880504300160,64,FLEN)
NAN_BOXED(4599612460306613346,64,FLEN)
NAN_BOXED(4599706999633209629,64,FLEN)
NAN_BOXED(4592625880504300160,64,FLEN)
NAN_BOXED(4599629795740636628,64,FLEN)
NAN_BOXED(4613042430009437933,64,FLEN)
NAN_BOXED(4605927901843388696,64,FLEN)
NAN_BOXED(4599629795740636628,64,FLEN)
NAN_BOXED(4613042430009437933,64,FLEN)
NAN_BOXED(4605927901843388696,64,FLEN)
NAN_BOXED(4599629795740636628,64,FLEN)
NAN_BOXED(4613042430009437933,64,FLEN)
NAN_BOXED(4605927901843388696,64,FLEN)
NAN_BOXED(4599629795740636628,64,FLEN)
NAN_BOXED(4613042430009437933,64,FLEN)
NAN_BOXED(4605927901843388696,64,FLEN)
NAN_BOXED(4599629795740636628,64,FLEN)
NAN_BOXED(4613042430009437933,64,FLEN)
NAN_BOXED(4605927901843388696,64,FLEN)
NAN_BOXED(4599678352847327318,64,FLEN)
NAN_BOXED(4590589372689904191,64,FLEN)
NAN_BOXED(4583559701066687072,64,FLEN)
NAN_BOXED(4599678352847327318,64,FLEN)
NAN_BOXED(4590589372689904191,64,FLEN)
NAN_BOXED(4583559701066687072,64,FLEN)
NAN_BOXED(4599678352847327318,64,FLEN)
NAN_BOXED(4590589372689904191,64,FLEN)
NAN_BOXED(4583559701066687072,64,FLEN)
NAN_BOXED(4599678352847327318,64,FLEN)
NAN_BOXED(4590589372689904191,64,FLEN)
NAN_BOXED(4583559701066687072,64,FLEN)
NAN_BOXED(4599678352847327318,64,FLEN)
NAN_BOXED(4590589372689904191,64,FLEN)
NAN_BOXED(4583559701066687072,64,FLEN)
NAN_BOXED(4599708303456850544,64,FLEN)
NAN_BOXED(4613062989095916592,64,FLEN)
NAN_BOXED(4606057612484718971,64,FLEN)
NAN_BOXED(4599708303456850544,64,FLEN)
NAN_BOXED(4613062989095916592,64,FLEN)
NAN_BOXED(4606057612484718971,64,FLEN)
NAN_BOXED(4599708303456850544,64,FLEN)
NAN_BOXED(4613062989095916592,64,FLEN)
NAN_BOXED(4606057612484718971,64,FLEN)
NAN_BOXED(4599708303456850544,64,FLEN)
NAN_BOXED(4613062989095916592,64,FLEN)
NAN_BOXED(4606057612484718971,64,FLEN)
NAN_BOXED(4599708303456850544,64,FLEN)
NAN_BOXED(4613062989095916592,64,FLEN)
NAN_BOXED(4606057612484718971,64,FLEN)
NAN_BOXED(4599810149558918340,64,FLEN)
NAN_BOXED(4590846323770444589,64,FLEN)
NAN_BOXED(4584083324659538080,64,FLEN)
NAN_BOXED(4599810149558918340,64,FLEN)
NAN_BOXED(4590846323770444589,64,FLEN)
NAN_BOXED(4584083324659538080,64,FLEN)
NAN_BOXED(4599810149558918340,64,FLEN)
NAN_BOXED(4590846323770444589,64,FLEN)
NAN_BOXED(4584083324659538080,64,FLEN)
NAN_BOXED(4599810149558918340,64,FLEN)
NAN_BOXED(4590846323770444589,64,FLEN)
NAN_BOXED(4584083324659538080,64,FLEN)
NAN_BOXED(4599810149558918340,64,FLEN)
NAN_BOXED(4590846323770444589,64,FLEN)
NAN_BOXED(4584083324659538080,64,FLEN)
NAN_BOXED(4599869036570992638,64,FLEN)
NAN_BOXED(4613154075635719035,64,FLEN)
NAN_BOXED(4606392834027517736,64,FLEN)
NAN_BOXED(4599869036570992638,64,FLEN)
NAN_BOXED(4613154075635719035,64,FLEN)
NAN_BOXED(4606392834027517736,64,FLEN)
NAN_BOXED(4599869036570992638,64,FLEN)
NAN_BOXED(4613154075635719035,64,FLEN)
NAN_BOXED(4606392834027517736,64,FLEN)
NAN_BOXED(4599869036570992638,64,FLEN)
NAN_BOXED(4613154075635719035,64,FLEN)
NAN_BOXED(4606392834027517736,64,FLEN)
NAN_BOXED(4599869036570992638,64,FLEN)
NAN_BOXED(4613154075635719035,64,FLEN)
NAN_BOXED(4606392834027517736,64,FLEN)
NAN_BOXED(4599959281353448212,64,FLEN)
NAN_BOXED(4611782164360553676,64,FLEN)
NAN_BOXED(4604597114288876693,64,FLEN)
NAN_BOXED(4599959281353448212,64,FLEN)
NAN_BOXED(4611782164360553676,64,FLEN)
NAN_BOXED(4604597114288876693,64,FLEN)
NAN_BOXED(4599959281353448212,64,FLEN)
NAN_BOXED(4611782164360553676,64,FLEN)
NAN_BOXED(4604597114288876693,64,FLEN)
NAN_BOXED(4599959281353448212,64,FLEN)
NAN_BOXED(4611782164360553676,64,FLEN)
NAN_BOXED(4604597114288876693,64,FLEN)
NAN_BOXED(4599959281353448212,64,FLEN)
NAN_BOXED(4611782164360553676,64,FLEN)
NAN_BOXED(4604597114288876693,64,FLEN)
NAN_BOXED(4599986698283161128,64,FLEN)
NAN_BOXED(4603371107908928715,64,FLEN)
NAN_BOXED(4596453846054034748,64,FLEN)
NAN_BOXED(4599986698283161128,64,FLEN)
NAN_BOXED(4603371107908928715,64,FLEN)
NAN_BOXED(4596453846054034748,64,FLEN)
NAN_BOXED(4599986698283161128,64,FLEN)
NAN_BOXED(4603371107908928715,64,FLEN)
NAN_BOXED(4596453846054034748,64,FLEN)
NAN_BOXED(4599986698283161128,64,FLEN)
NAN_BOXED(4603371107908928715,64,FLEN)
NAN_BOXED(4596453846054034748,64,FLEN)
NAN_BOXED(4599986698283161128,64,FLEN)
NAN_BOXED(4603371107908928715,64,FLEN)
NAN_BOXED(4596453846054034748,64,FLEN)
NAN_BOXED(4600074444960784276,64,FLEN)
NAN_BOXED(4605830722760464128,64,FLEN)
NAN_BOXED(4599113583209240832,64,FLEN)
NAN_BOXED(4600074444960784276,64,FLEN)
NAN_BOXED(4605830722760464128,64,FLEN)
NAN_BOXED(4599113583209240832,64,FLEN)
NAN_BOXED(4600074444960784276,64,FLEN)
NAN_BOXED(4605830722760464128,64,FLEN)
NAN_BOXED(4599113583209240832,64,FLEN)
NAN_BOXED(4600074444960784276,64,FLEN)
NAN_BOXED(4605830722760464128,64,FLEN)
NAN_BOXED(4599113583209240832,64,FLEN)
NAN_BOXED(4600074444960784276,64,FLEN)
NAN_BOXED(4605830722760464128,64,FLEN)
NAN_BOXED(4599113583209240832,64,FLEN)
NAN_BOXED(4600084853473959832,64,FLEN)
NAN_BOXED(4601921300145686008,64,FLEN)
NAN_BOXED(4595041891242781292,64,FLEN)
NAN_BOXED(4600084853473959832,64,FLEN)
NAN_BOXED(4601921300145686008,64,FLEN)
NAN_BOXED(4595041891242781292,64,FLEN)
NAN_BOXED(4600084853473959832,64,FLEN)
NAN_BOXED(4601921300145686008,64,FLEN)
NAN_BOXED(4595041891242781292,64,FLEN)
NAN_BOXED(4600084853473959832,64,FLEN)
NAN_BOXED(4601921300145686008,64,FLEN)
NAN_BOXED(4595041891242781292,64,FLEN)
NAN_BOXED(4600084853473959832,64,FLEN)
NAN_BOXED(4601921300145686008,64,FLEN)
NAN_BOXED(4595041891242781292,64,FLEN)
NAN_BOXED(4600137034085538788,64,FLEN)
NAN_BOXED(4600506352627923462,64,FLEN)
NAN_BOXED(4594074026746656828,64,FLEN)
NAN_BOXED(4600137034085538788,64,FLEN)
NAN_BOXED(4600506352627923462,64,FLEN)
NAN_BOXED(4594074026746656828,64,FLEN)
NAN_BOXED(4600137034085538788,64,FLEN)
NAN_BOXED(4600506352627923462,64,FLEN)
NAN_BOXED(4594074026746656828,64,FLEN)
NAN_BOXED(4600137034085538788,64,FLEN)
NAN_BOXED(4600506352627923462,64,FLEN)
NAN_BOXED(4594074026746656828,64,FLEN)
NAN_BOXED(4600137034085538788,64,FLEN)
NAN_BOXED(4600506352627923462,64,FLEN)
NAN_BOXED(4594074026746656828,64,FLEN)
NAN_BOXED(4600182516368254650,64,FLEN)
NAN_BOXED(4608466751206100899,64,FLEN)
NAN_BOXED(4602039287839016858,64,FLEN)
NAN_BOXED(4600182516368254650,64,FLEN)
NAN_BOXED(4608466751206100899,64,FLEN)
NAN_BOXED(4602039287839016858,64,FLEN)
NAN_BOXED(4600182516368254650,64,FLEN)
NAN_BOXED(4608466751206100899,64,FLEN)
NAN_BOXED(4602039287839016858,64,FLEN)
NAN_BOXED(4600182516368254650,64,FLEN)
NAN_BOXED(4608466751206100899,64,FLEN)
NAN_BOXED(4602039287839016858,64,FLEN)
NAN_BOXED(4600182516368254650,64,FLEN)
NAN_BOXED(4608466751206100899,64,FLEN)
NAN_BOXED(4602039287839016858,64,FLEN)
NAN_BOXED(4600248337204048728,64,FLEN)
NAN_BOXED(4611422698349811568,64,FLEN)
NAN_BOXED(4604559670439058333,64,FLEN)
NAN_BOXED(4600248337204048728,64,FLEN)
NAN_BOXED(4611422698349811568,64,FLEN)
NAN_BOXED(4604559670439058333,64,FLEN)
NAN_BOXED(4600248337204048728,64,FLEN)
NAN_BOXED(4611422698349811568,64,FLEN)
NAN_BOXED(4604559670439058333,64,FLEN)
NAN_BOXED(4600248337204048728,64,FLEN)
NAN_BOXED(4611422698349811568,64,FLEN)
NAN_BOXED(4604559670439058333,64,FLEN)
NAN_BOXED(4600248337204048728,64,FLEN)
NAN_BOXED(4611422698349811568,64,FLEN)
NAN_BOXED(4604559670439058333,64,FLEN)
NAN_BOXED(4600351406052922294,64,FLEN)
NAN_BOXED(4605429255992534701,64,FLEN)
NAN_BOXED(4599051251334163814,64,FLEN)
NAN_BOXED(4600351406052922294,64,FLEN)
NAN_BOXED(4605429255992534701,64,FLEN)
NAN_BOXED(4599051251334163814,64,FLEN)
NAN_BOXED(4600351406052922294,64,FLEN)
NAN_BOXED(4605429255992534701,64,FLEN)
NAN_BOXED(4599051251334163814,64,FLEN)
NAN_BOXED(4600351406052922294,64,FLEN)
NAN_BOXED(4605429255992534701,64,FLEN)
NAN_BOXED(4599051251334163814,64,FLEN)
NAN_BOXED(4600351406052922294,64,FLEN)
NAN_BOXED(4605429255992534701,64,FLEN)
NAN_BOXED(4599051251334163814,64,FLEN)
NAN_BOXED(4600357087342426474,64,FLEN)
NAN_BOXED(4600491499086762404,64,FLEN)
NAN_BOXED(4594229980033299816,64,FLEN)
NAN_BOXED(4600357087342426474,64,FLEN)
NAN_BOXED(4600491499086762404,64,FLEN)
NAN_BOXED(4594229980033299816,64,FLEN)
NAN_BOXED(4600357087342426474,64,FLEN)
NAN_BOXED(4600491499086762404,64,FLEN)
NAN_BOXED(4594229980033299816,64,FLEN)
NAN_BOXED(4600357087342426474,64,FLEN)
NAN_BOXED(4600491499086762404,64,FLEN)
NAN_BOXED(4594229980033299816,64,FLEN)
NAN_BOXED(4600357087342426474,64,FLEN)
NAN_BOXED(4600491499086762404,64,FLEN)
NAN_BOXED(4594229980033299816,64,FLEN)
NAN_BOXED(4600372842686028996,64,FLEN)
NAN_BOXED(4612646639596081171,64,FLEN)
NAN_BOXED(4606305818141584927,64,FLEN)
NAN_BOXED(4600372842686028996,64,FLEN)
NAN_BOXED(4612646639596081171,64,FLEN)
NAN_BOXED(4606305818141584927,64,FLEN)
NAN_BOXED(4600372842686028996,64,FLEN)
NAN_BOXED(4612646639596081171,64,FLEN)
NAN_BOXED(4606305818141584927,64,FLEN)
NAN_BOXED(4600372842686028996,64,FLEN)
NAN_BOXED(4612646639596081171,64,FLEN)
NAN_BOXED(4606305818141584927,64,FLEN)
NAN_BOXED(4600372842686028996,64,FLEN)
NAN_BOXED(4612646639596081171,64,FLEN)
NAN_BOXED(4606305818141584927,64,FLEN)
NAN_BOXED(4600472028653915630,64,FLEN)
NAN_BOXED(4603705156139030319,64,FLEN)
NAN_BOXED(4597518191760751268,64,FLEN)
NAN_BOXED(4600472028653915630,64,FLEN)
NAN_BOXED(4603705156139030319,64,FLEN)
NAN_BOXED(4597518191760751268,64,FLEN)
NAN_BOXED(4600472028653915630,64,FLEN)
NAN_BOXED(4603705156139030319,64,FLEN)
NAN_BOXED(4597518191760751268,64,FLEN)
NAN_BOXED(4600472028653915630,64,FLEN)
NAN_BOXED(4603705156139030319,64,FLEN)
NAN_BOXED(4597518191760751268,64,FLEN)
NAN_BOXED(4600472028653915630,64,FLEN)
NAN_BOXED(4603705156139030319,64,FLEN)
NAN_BOXED(4597518191760751268,64,FLEN)
NAN_BOXED(4600480357890596164,64,FLEN)
NAN_BOXED(4613120589174989887,64,FLEN)
NAN_BOXED(4607152804025623746,64,FLEN)
NAN_BOXED(4600480357890596164,64,FLEN)
NAN_BOXED(4613120589174989887,64,FLEN)
NAN_BOXED(4607152804025623746,64,FLEN)
NAN_BOXED(4600480357890596164,64,FLEN)
NAN_BOXED(4613120589174989887,64,FLEN)
NAN_BOXED(4607152804025623746,64,FLEN)
NAN_BOXED(4600480357890596164,64,FLEN)
NAN_BOXED(4613120589174989887,64,FLEN)
NAN_BOXED(4607152804025623746,64,FLEN)
NAN_BOXED(4600480357890596164,64,FLEN)
NAN_BOXED(4613120589174989887,64,FLEN)
NAN_BOXED(4607152804025623746,64,FLEN)
NAN_BOXED(4600512312897245652,64,FLEN)
NAN_BOXED(4610908082856086234,64,FLEN)
NAN_BOXED(4604425094196912238,64,FLEN)
NAN_BOXED(4600512312897245652,64,FLEN)
NAN_BOXED(4610908082856086234,64,FLEN)
NAN_BOXED(4604425094196912238,64,FLEN)
NAN_BOXED(4600512312897245652,64,FLEN)
NAN_BOXED(4610908082856086234,64,FLEN)
NAN_BOXED(4604425094196912238,64,FLEN)
NAN_BOXED(4600512312897245652,64,FLEN)
NAN_BOXED(4610908082856086234,64,FLEN)
NAN_BOXED(4604425094196912238,64,FLEN)
NAN_BOXED(4600512312897245652,64,FLEN)
NAN_BOXED(4610908082856086234,64,FLEN)
NAN_BOXED(4604425094196912238,64,FLEN)
NAN_BOXED(4600535714082234454,64,FLEN)
NAN_BOXED(4607300697620512761,64,FLEN)
NAN_BOXED(4600715986981404188,64,FLEN)
NAN_BOXED(4600535714082234454,64,FLEN)
NAN_BOXED(4607300697620512761,64,FLEN)
NAN_BOXED(4600715986981404188,64,FLEN)
NAN_BOXED(4600535714082234454,64,FLEN)
NAN_BOXED(4607300697620512761,64,FLEN)
NAN_BOXED(4600715986981404188,64,FLEN)
NAN_BOXED(4600535714082234454,64,FLEN)
NAN_BOXED(4607300697620512761,64,FLEN)
NAN_BOXED(4600715986981404188,64,FLEN)
NAN_BOXED(4600535714082234454,64,FLEN)
NAN_BOXED(4607300697620512761,64,FLEN)
NAN_BOXED(4600715986981404188,64,FLEN)
NAN_BOXED(4600613533755775034,64,FLEN)
NAN_BOXED(4611898738727678338,64,FLEN)
NAN_BOXED(4605445023541766053,64,FLEN)
NAN_BOXED(4600613533755775034,64,FLEN)
NAN_BOXED(4611898738727678338,64,FLEN)
NAN_BOXED(4605445023541766053,64,FLEN)
NAN_BOXED(4600613533755775034,64,FLEN)
NAN_BOXED(4611898738727678338,64,FLEN)
NAN_BOXED(4605445023541766053,64,FLEN)
NAN_BOXED(4600613533755775034,64,FLEN)
NAN_BOXED(4611898738727678338,64,FLEN)
NAN_BOXED(4605445023541766053,64,FLEN)
NAN_BOXED(4600613533755775034,64,FLEN)
NAN_BOXED(4611898738727678338,64,FLEN)
NAN_BOXED(4605445023541766053,64,FLEN)
NAN_BOXED(4600635402043368486,64,FLEN)
NAN_BOXED(4609411349793547052,64,FLEN)
NAN_BOXED(4603380375451234218,64,FLEN)
NAN_BOXED(4600635402043368486,64,FLEN)
NAN_BOXED(4609411349793547052,64,FLEN)
NAN_BOXED(4603380375451234218,64,FLEN)
NAN_BOXED(4600635402043368486,64,FLEN)
NAN_BOXED(4609411349793547052,64,FLEN)
NAN_BOXED(4603380375451234218,64,FLEN)
NAN_BOXED(4600635402043368486,64,FLEN)
NAN_BOXED(4609411349793547052,64,FLEN)
NAN_BOXED(4603380375451234218,64,FLEN)
NAN_BOXED(4600635402043368486,64,FLEN)
NAN_BOXED(4609411349793547052,64,FLEN)
NAN_BOXED(4603380375451234218,64,FLEN)
NAN_BOXED(4600758841644421552,64,FLEN)
NAN_BOXED(4612080286987576404,64,FLEN)
NAN_BOXED(4605882893562636884,64,FLEN)
NAN_BOXED(4600758841644421552,64,FLEN)
NAN_BOXED(4612080286987576404,64,FLEN)
NAN_BOXED(4605882893562636884,64,FLEN)
NAN_BOXED(4600758841644421552,64,FLEN)
NAN_BOXED(4612080286987576404,64,FLEN)
NAN_BOXED(4605882893562636884,64,FLEN)
NAN_BOXED(4600758841644421552,64,FLEN)
NAN_BOXED(4612080286987576404,64,FLEN)
NAN_BOXED(4605882893562636884,64,FLEN)
NAN_BOXED(4600758841644421552,64,FLEN)
NAN_BOXED(4612080286987576404,64,FLEN)
NAN_BOXED(4605882893562636884,64,FLEN)
NAN_BOXED(4600822770092188196,64,FLEN)
NAN_BOXED(4610392121854588439,64,FLEN)
NAN_BOXED(4604299097152316678,64,FLEN)
NAN_BOXED(4600822770092188196,64,FLEN)
NAN_BOXED(4610392121854588439,64,FLEN)
NAN_BOXED(4604299097152316678,64,FLEN)
NAN_BOXED(4600822770092188196,64,FLEN)
NAN_BOXED(4610392121854588439,64,FLEN)
NAN_BOXED(4604299097152316678,64,FLEN)
NAN_BOXED(4600822770092188196,64,FLEN)
NAN_BOXED(4610392121854588439,64,FLEN)
NAN_BOXED(4604299097152316678,64,FLEN)
NAN_BOXED(4600822770092188196,64,FLEN)
NAN_BOXED(4610392121854588439,64,FLEN)
NAN_BOXED(4604299097152316678,64,FLEN)
NAN_BOXED(4600845903837790060,64,FLEN)
NAN_BOXED(4610545793775248297,64,FLEN)
NAN_BOXED(4604441308236483348,64,FLEN)
NAN_BOXED(4600845903837790060,64,FLEN)
NAN_BOXED(4610545793775248297,64,FLEN)
NAN_BOXED(4604441308236483348,64,FLEN)
NAN_BOXED(4600845903837790060,64,FLEN)
NAN_BOXED(4610545793775248297,64,FLEN)
NAN_BOXED(4604441308236483348,64,FLEN)
NAN_BOXED(4600845903837790060,64,FLEN)
NAN_BOXED(4610545793775248297,64,FLEN)
NAN_BOXED(4604441308236483348,64,FLEN)
NAN_BOXED(4600845903837790060,64,FLEN)
NAN_BOXED(4610545793775248297,64,FLEN)
NAN_BOXED(4604441308236483348,64,FLEN)
NAN_BOXED(4601008946706833100,64,FLEN)
NAN_BOXED(4608498227086445831,64,FLEN)
NAN_BOXED(4602915749467398082,64,FLEN)
NAN_BOXED(4601008946706833100,64,FLEN)
NAN_BOXED(4608498227086445831,64,FLEN)
NAN_BOXED(4602915749467398082,64,FLEN)
NAN_BOXED(4601008946706833100,64,FLEN)
NAN_BOXED(4608498227086445831,64,FLEN)
NAN_BOXED(4602915749467398082,64,FLEN)
NAN_BOXED(4601008946706833100,64,FLEN)
NAN_BOXED(4608498227086445831,64,FLEN)
NAN_BOXED(4602915749467398082,64,FLEN)
NAN_BOXED(4601008946706833100,64,FLEN)
NAN_BOXED(4608498227086445831,64,FLEN)
NAN_BOXED(4602915749467398082,64,FLEN)
NAN_BOXED(4601015576197570244,64,FLEN)
NAN_BOXED(4607098911222417915,64,FLEN)
NAN_BOXED(4600947488884126106,64,FLEN)
NAN_BOXED(4601015576197570244,64,FLEN)
NAN_BOXED(4607098911222417915,64,FLEN)
NAN_BOXED(4600947488884126106,64,FLEN)
NAN_BOXED(4601015576197570244,64,FLEN)
NAN_BOXED(4607098911222417915,64,FLEN)
NAN_BOXED(4600947488884126106,64,FLEN)
NAN_BOXED(4601015576197570244,64,FLEN)
NAN_BOXED(4607098911222417915,64,FLEN)
NAN_BOXED(4600947488884126106,64,FLEN)
NAN_BOXED(4601015576197570244,64,FLEN)
NAN_BOXED(4607098911222417915,64,FLEN)
NAN_BOXED(4600947488884126106,64,FLEN)
NAN_BOXED(4601017690237510698,64,FLEN)
NAN_BOXED(4610907189123771409,64,FLEN)
NAN_BOXED(4604886094098747328,64,FLEN)
NAN_BOXED(4601017690237510698,64,FLEN)
NAN_BOXED(4610907189123771409,64,FLEN)
NAN_BOXED(4604886094098747328,64,FLEN)
NAN_BOXED(4601017690237510698,64,FLEN)
NAN_BOXED(4610907189123771409,64,FLEN)
NAN_BOXED(4604886094098747328,64,FLEN)
NAN_BOXED(4601017690237510698,64,FLEN)
NAN_BOXED(4610907189123771409,64,FLEN)
NAN_BOXED(4604886094098747328,64,FLEN)
NAN_BOXED(4601017690237510698,64,FLEN)
NAN_BOXED(4610907189123771409,64,FLEN)
NAN_BOXED(4604886094098747328,64,FLEN)
NAN_BOXED(4601027229175119718,64,FLEN)
NAN_BOXED(4599529396806023545,64,FLEN)
NAN_BOXED(4593951695735735736,64,FLEN)
NAN_BOXED(4601027229175119718,64,FLEN)
NAN_BOXED(4599529396806023545,64,FLEN)
NAN_BOXED(4593951695735735736,64,FLEN)
NAN_BOXED(4601027229175119718,64,FLEN)
NAN_BOXED(4599529396806023545,64,FLEN)
NAN_BOXED(4593951695735735736,64,FLEN)
NAN_BOXED(4601027229175119718,64,FLEN)
NAN_BOXED(4599529396806023545,64,FLEN)
NAN_BOXED(4593951695735735736,64,FLEN)
NAN_BOXED(4601027229175119718,64,FLEN)
NAN_BOXED(4599529396806023545,64,FLEN)
NAN_BOXED(4593951695735735736,64,FLEN)
NAN_BOXED(4601044286607327492,64,FLEN)
NAN_BOXED(4610676284921067611,64,FLEN)
NAN_BOXED(4604721388632424778,64,FLEN)
NAN_BOXED(4601044286607327492,64,FLEN)
NAN_BOXED(4610676284921067611,64,FLEN)
NAN_BOXED(4604721388632424778,64,FLEN)
NAN_BOXED(4601044286607327492,64,FLEN)
NAN_BOXED(4610676284921067611,64,FLEN)
NAN_BOXED(4604721388632424778,64,FLEN)
NAN_BOXED(4601044286607327492,64,FLEN)
NAN_BOXED(4610676284921067611,64,FLEN)
NAN_BOXED(4604721388632424778,64,FLEN)
NAN_BOXED(4601044286607327492,64,FLEN)
NAN_BOXED(4610676284921067611,64,FLEN)
NAN_BOXED(4604721388632424778,64,FLEN)
NAN_BOXED(4601072714122991410,64,FLEN)
NAN_BOXED(4612171770707515109,64,FLEN)
NAN_BOXED(4606374585951049422,64,FLEN)
NAN_BOXED(4601072714122991410,64,FLEN)
NAN_BOXED(4612171770707515109,64,FLEN)
NAN_BOXED(4606374585951049422,64,FLEN)
NAN_BOXED(4601072714122991410,64,FLEN)
NAN_BOXED(4612171770707515109,64,FLEN)
NAN_BOXED(4606374585951049422,64,FLEN)
NAN_BOXED(4601072714122991410,64,FLEN)
NAN_BOXED(4612171770707515109,64,FLEN)
NAN_BOXED(4606374585951049422,64,FLEN)
NAN_BOXED(4601072714122991410,64,FLEN)
NAN_BOXED(4612171770707515109,64,FLEN)
NAN_BOXED(4606374585951049422,64,FLEN)
NAN_BOXED(4601383517652777870,64,FLEN)
NAN_BOXED(4603772223372679720,64,FLEN)
NAN_BOXED(4598463733417105108,64,FLEN)
NAN_BOXED(4601383517652777870,64,FLEN)
NAN_BOXED(4603772223372679720,64,FLEN)
NAN_BOXED(4598463733417105108,64,FLEN)
NAN_BOXED(4601383517652777870,64,FLEN)
NAN_BOXED(4603772223372679720,64,FLEN)
NAN_BOXED(4598463733417105108,64,FLEN)
NAN_BOXED(4601383517652777870,64,FLEN)
NAN_BOXED(4603772223372679720,64,FLEN)
NAN_BOXED(4598463733417105108,64,FLEN)
NAN_BOXED(4601383517652777870,64,FLEN)
NAN_BOXED(4603772223372679720,64,FLEN)
NAN_BOXED(4598463733417105108,64,FLEN)
NAN_BOXED(4601502360429109286,64,FLEN)
NAN_BOXED(4595609801185803201,64,FLEN)
NAN_BOXED(4590264820209596392,64,FLEN)
NAN_BOXED(4601502360429109286,64,FLEN)
NAN_BOXED(4595609801185803201,64,FLEN)
NAN_BOXED(4590264820209596392,64,FLEN)
NAN_BOXED(4601502360429109286,64,FLEN)
NAN_BOXED(4595609801185803201,64,FLEN)
NAN_BOXED(4590264820209596392,64,FLEN)
NAN_BOXED(4601502360429109286,64,FLEN)
NAN_BOXED(4595609801185803201,64,FLEN)
NAN_BOXED(4590264820209596392,64,FLEN)
NAN_BOXED(4601502360429109286,64,FLEN)
NAN_BOXED(4595609801185803201,64,FLEN)
NAN_BOXED(4590264820209596392,64,FLEN)
NAN_BOXED(4601526602824109930,64,FLEN)
NAN_BOXED(4605455903292668190,64,FLEN)
NAN_BOXED(4600020946136168232,64,FLEN)
NAN_BOXED(4601526602824109930,64,FLEN)
NAN_BOXED(4605455903292668190,64,FLEN)
NAN_BOXED(4600020946136168232,64,FLEN)
NAN_BOXED(4601526602824109930,64,FLEN)
NAN_BOXED(4605455903292668190,64,FLEN)
NAN_BOXED(4600020946136168232,64,FLEN)
NAN_BOXED(4601526602824109930,64,FLEN)
NAN_BOXED(4605455903292668190,64,FLEN)
NAN_BOXED(4600020946136168232,64,FLEN)
NAN_BOXED(4601526602824109930,64,FLEN)
NAN_BOXED(4605455903292668190,64,FLEN)
NAN_BOXED(4600020946136168232,64,FLEN)
NAN_BOXED(4601534113816249522,64,FLEN)
NAN_BOXED(4605875559316805282,64,FLEN)
NAN_BOXED(4600393340261435642,64,FLEN)
NAN_BOXED(4601534113816249522,64,FLEN)
NAN_BOXED(4605875559316805282,64,FLEN)
NAN_BOXED(4600393340261435642,64,FLEN)
NAN_BOXED(4601534113816249522,64,FLEN)
NAN_BOXED(4605875559316805282,64,FLEN)
NAN_BOXED(4600393340261435642,64,FLEN)
NAN_BOXED(4601534113816249522,64,FLEN)
NAN_BOXED(4605875559316805282,64,FLEN)
NAN_BOXED(4600393340261435642,64,FLEN)
NAN_BOXED(4601534113816249522,64,FLEN)
NAN_BOXED(4605875559316805282,64,FLEN)
NAN_BOXED(4600393340261435642,64,FLEN)
NAN_BOXED(4601759024834355590,64,FLEN)
NAN_BOXED(4604955076310520431,64,FLEN)
NAN_BOXED(4599759133404098440,64,FLEN)
NAN_BOXED(4601759024834355590,64,FLEN)
NAN_BOXED(4604955076310520431,64,FLEN)
NAN_BOXED(4599759133404098440,64,FLEN)
NAN_BOXED(4601759024834355590,64,FLEN)
NAN_BOXED(4604955076310520431,64,FLEN)
NAN_BOXED(4599759133404098440,64,FLEN)
NAN_BOXED(4601759024834355590,64,FLEN)
NAN_BOXED(4604955076310520431,64,FLEN)
NAN_BOXED(4599759133404098440,64,FLEN)
NAN_BOXED(4601759024834355590,64,FLEN)
NAN_BOXED(4604955076310520431,64,FLEN)
NAN_BOXED(4599759133404098440,64,FLEN)
NAN_BOXED(4601829881018980858,64,FLEN)
NAN_BOXED(4608008551220959759,64,FLEN)
NAN_BOXED(4603002618653386131,64,FLEN)
NAN_BOXED(4601829881018980858,64,FLEN)
NAN_BOXED(4608008551220959759,64,FLEN)
NAN_BOXED(4603002618653386131,64,FLEN)
NAN_BOXED(4601829881018980858,64,FLEN)
NAN_BOXED(4608008551220959759,64,FLEN)
NAN_BOXED(4603002618653386131,64,FLEN)
NAN_BOXED(4601829881018980858,64,FLEN)
NAN_BOXED(4608008551220959759,64,FLEN)
NAN_BOXED(4603002618653386131,64,FLEN)
NAN_BOXED(4601829881018980858,64,FLEN)
NAN_BOXED(4608008551220959759,64,FLEN)
NAN_BOXED(4603002618653386131,64,FLEN)
NAN_BOXED(4601832332977344166,64,FLEN)
NAN_BOXED(4609049829742201884,64,FLEN)
NAN_BOXED(4603947489891068985,64,FLEN)
NAN_BOXED(4601832332977344166,64,FLEN)
NAN_BOXED(4609049829742201884,64,FLEN)
NAN_BOXED(4603947489891068985,64,FLEN)
NAN_BOXED(4601832332977344166,64,FLEN)
NAN_BOXED(4609049829742201884,64,FLEN)
NAN_BOXED(4603947489891068985,64,FLEN)
NAN_BOXED(4601832332977344166,64,FLEN)
NAN_BOXED(4609049829742201884,64,FLEN)
NAN_BOXED(4603947489891068985,64,FLEN)
NAN_BOXED(4601832332977344166,64,FLEN)
NAN_BOXED(4609049829742201884,64,FLEN)
NAN_BOXED(4603947489891068985,64,FLEN)
NAN_BOXED(4601871772982016948,64,FLEN)
NAN_BOXED(4598259664208855864,64,FLEN)
NAN_BOXED(4593018330549394520,64,FLEN)
NAN_BOXED(4601871772982016948,64,FLEN)
NAN_BOXED(4598259664208855864,64,FLEN)
NAN_BOXED(4593018330549394520,64,FLEN)
NAN_BOXED(4601871772982016948,64,FLEN)
NAN_BOXED(4598259664208855864,64,FLEN)
NAN_BOXED(4593018330549394520,64,FLEN)
NAN_BOXED(4601871772982016948,64,FLEN)
NAN_BOXED(4598259664208855864,64,FLEN)
NAN_BOXED(4593018330549394520,64,FLEN)
NAN_BOXED(4601871772982016948,64,FLEN)
NAN_BOXED(4598259664208855864,64,FLEN)
NAN_BOXED(4593018330549394520,64,FLEN)
NAN_BOXED(4601925094586722250,64,FLEN)
NAN_BOXED(4609108407628271153,64,FLEN)
NAN_BOXED(4604066778502571243,64,FLEN)
NAN_BOXED(4601925094586722250,64,FLEN)
NAN_BOXED(4609108407628271153,64,FLEN)
NAN_BOXED(4604066778502571243,64,FLEN)
NAN_BOXED(4601925094586722250,64,FLEN)
NAN_BOXED(4609108407628271153,64,FLEN)
NAN_BOXED(4604066778502571243,64,FLEN)
NAN_BOXED(4601925094586722250,64,FLEN)
NAN_BOXED(4609108407628271153,64,FLEN)
NAN_BOXED(4604066778502571243,64,FLEN)
NAN_BOXED(4601925094586722250,64,FLEN)
NAN_BOXED(4609108407628271153,64,FLEN)
NAN_BOXED(4604066778502571243,64,FLEN)
NAN_BOXED(4601988773682584952,64,FLEN)
NAN_BOXED(4604378069220449831,64,FLEN)
NAN_BOXED(4599399266555727544,64,FLEN)
NAN_BOXED(4601988773682584952,64,FLEN)
NAN_BOXED(4604378069220449831,64,FLEN)
NAN_BOXED(4599399266555727544,64,FLEN)
NAN_BOXED(4601988773682584952,64,FLEN)
NAN_BOXED(4604378069220449831,64,FLEN)
NAN_BOXED(4599399266555727544,64,FLEN)
NAN_BOXED(4601988773682584952,64,FLEN)
NAN_BOXED(4604378069220449831,64,FLEN)
NAN_BOXED(4599399266555727544,64,FLEN)
NAN_BOXED(4601988773682584952,64,FLEN)
NAN_BOXED(4604378069220449831,64,FLEN)
NAN_BOXED(4599399266555727544,64,FLEN)
NAN_BOXED(4602016174269937154,64,FLEN)
NAN_BOXED(4610745850255048585,64,FLEN)
NAN_BOXED(4605648772358177059,64,FLEN)
NAN_BOXED(4602016174269937154,64,FLEN)
NAN_BOXED(4610745850255048585,64,FLEN)
NAN_BOXED(4605648772358177059,64,FLEN)
NAN_BOXED(4602016174269937154,64,FLEN)
NAN_BOXED(4610745850255048585,64,FLEN)
NAN_BOXED(4605648772358177059,64,FLEN)
NAN_BOXED(4602016174269937154,64,FLEN)
NAN_BOXED(4610745850255048585,64,FLEN)
NAN_BOXED(4605648772358177059,64,FLEN)
NAN_BOXED(4602016174269937154,64,FLEN)
NAN_BOXED(4610745850255048585,64,FLEN)
NAN_BOXED(4605648772358177059,64,FLEN)
NAN_BOXED(4602073274942650910,64,FLEN)
NAN_BOXED(4610630179056475475,64,FLEN)
NAN_BOXED(4605592018134067599,64,FLEN)
NAN_BOXED(4602073274942650910,64,FLEN)
NAN_BOXED(4610630179056475475,64,FLEN)
NAN_BOXED(4605592018134067599,64,FLEN)
NAN_BOXED(4602073274942650910,64,FLEN)
NAN_BOXED(4610630179056475475,64,FLEN)
NAN_BOXED(4605592018134067599,64,FLEN)
NAN_BOXED(4602073274942650910,64,FLEN)
NAN_BOXED(4610630179056475475,64,FLEN)
NAN_BOXED(4605592018134067599,64,FLEN)
NAN_BOXED(4602073274942650910,64,FLEN)
NAN_BOXED(4610630179056475475,64,FLEN)
NAN_BOXED(4605592018134067599,64,FLEN)
NAN_BOXED(4602313505558566224,64,FLEN)
NAN_BOXED(4602067361328261693,64,FLEN)
NAN_BOXED(4597223247568721912,64,FLEN)
NAN_BOXED(4602313505558566224,64,FLEN)
NAN_BOXED(4602067361328261693,64,FLEN)
NAN_BOXED(4597223247568721912,64,FLEN)
NAN_BOXED(4602313505558566224,64,FLEN)
NAN_BOXED(4602067361328261693,64,FLEN)
NAN_BOXED(4597223247568721912,64,FLEN)
NAN_BOXED(4602313505558566224,64,FLEN)
NAN_BOXED(4602067361328261693,64,FLEN)
NAN_BOXED(4597223247568721912,64,FLEN)
NAN_BOXED(4602313505558566224,64,FLEN)
NAN_BOXED(4602067361328261693,64,FLEN)
NAN_BOXED(4597223247568721912,64,FLEN)
NAN_BOXED(4602322043228248760,64,FLEN)
NAN_BOXED(4591560916301775153,64,FLEN)
NAN_BOXED(4586784145883472304,64,FLEN)
NAN_BOXED(4602322043228248760,64,FLEN)
NAN_BOXED(4591560916301775153,64,FLEN)
NAN_BOXED(4586784145883472304,64,FLEN)
NAN_BOXED(4602322043228248760,64,FLEN)
NAN_BOXED(4591560916301775153,64,FLEN)
NAN_BOXED(4586784145883472304,64,FLEN)
NAN_BOXED(4602322043228248760,64,FLEN)
NAN_BOXED(4591560916301775153,64,FLEN)
NAN_BOXED(4586784145883472304,64,FLEN)
NAN_BOXED(4602322043228248760,64,FLEN)
NAN_BOXED(4591560916301775153,64,FLEN)
NAN_BOXED(4586784145883472304,64,FLEN)
NAN_BOXED(4602401995841211390,64,FLEN)
NAN_BOXED(4598420691611471457,64,FLEN)
NAN_BOXED(4593771136087017084,64,FLEN)
NAN_BOXED(4602401995841211390,64,FLEN)
NAN_BOXED(4598420691611471457,64,FLEN)
NAN_BOXED(4593771136087017084,64,FLEN)
NAN_BOXED(4602401995841211390,64,FLEN)
NAN_BOXED(4598420691611471457,64,FLEN)
NAN_BOXED(4593771136087017084,64,FLEN)
NAN_BOXED(4602401995841211390,64,FLEN)
NAN_BOXED(4598420691611471457,64,FLEN)
NAN_BOXED(4593771136087017084,64,FLEN)
NAN_BOXED(4602401995841211390,64,FLEN)
NAN_BOXED(4598420691611471457,64,FLEN)
NAN_BOXED(4593771136087017084,64,FLEN)
NAN_BOXED(4602434395515084138,64,FLEN)
NAN_BOXED(4610827063615367541,64,FLEN)
NAN_BOXED(4606102349338139930,64,FLEN)
NAN_BOXED(4602434395515084138,64,FLEN)
NAN_BOXED(4610827063615367541,64,FLEN)
NAN_BOXED(4606102349338139930,64,FLEN)
NAN_BOXED(4602434395515084138,64,FLEN)
NAN_BOXED(4610827063615367541,64,FLEN)
NAN_BOXED(4606102349338139930,64,FLEN)
NAN_BOXED(4602434395515084138,64,FLEN)
NAN_BOXED(4610827063615367541,64,FLEN)
NAN_BOXED(4606102349338139930,64,FLEN)
NAN_BOXED(4602434395515084138,64,FLEN)
NAN_BOXED(4610827063615367541,64,FLEN)
NAN_BOXED(4606102349338139930,64,FLEN)
NAN_BOXED(4602539730809807510,64,FLEN)
NAN_BOXED(4611112480848056659,64,FLEN)
NAN_BOXED(4606478649373693690,64,FLEN)
NAN_BOXED(4602539730809807510,64,FLEN)
NAN_BOXED(4611112480848056659,64,FLEN)
NAN_BOXED(4606478649373693690,64,FLEN)
NAN_BOXED(4602539730809807510,64,FLEN)
NAN_BOXED(4611112480848056659,64,FLEN)
NAN_BOXED(4606478649373693690,64,FLEN)
NAN_BOXED(4602539730809807510,64,FLEN)
NAN_BOXED(4611112480848056659,64,FLEN)
NAN_BOXED(4606478649373693690,64,FLEN)
NAN_BOXED(4602539730809807510,64,FLEN)
NAN_BOXED(4611112480848056659,64,FLEN)
NAN_BOXED(4606478649373693690,64,FLEN)
NAN_BOXED(4602586275175902576,64,FLEN)
NAN_BOXED(4610745717006395816,64,FLEN)
NAN_BOXED(4606159234459956953,64,FLEN)
NAN_BOXED(4602586275175902576,64,FLEN)
NAN_BOXED(4610745717006395816,64,FLEN)
NAN_BOXED(4606159234459956953,64,FLEN)
NAN_BOXED(4602586275175902576,64,FLEN)
NAN_BOXED(4610745717006395816,64,FLEN)
NAN_BOXED(4606159234459956953,64,FLEN)
NAN_BOXED(4602586275175902576,64,FLEN)
NAN_BOXED(4610745717006395816,64,FLEN)
NAN_BOXED(4606159234459956953,64,FLEN)
NAN_BOXED(4602586275175902576,64,FLEN)
NAN_BOXED(4610745717006395816,64,FLEN)
NAN_BOXED(4606159234459956953,64,FLEN)
NAN_BOXED(4602687938284447107,64,FLEN)
NAN_BOXED(4609392678853208665,64,FLEN)
NAN_BOXED(4604902673781771999,64,FLEN)
NAN_BOXED(4602687938284447107,64,FLEN)
NAN_BOXED(4609392678853208665,64,FLEN)
NAN_BOXED(4604902673781771999,64,FLEN)
NAN_BOXED(4602687938284447107,64,FLEN)
NAN_BOXED(4609392678853208665,64,FLEN)
NAN_BOXED(4604902673781771999,64,FLEN)
NAN_BOXED(4602687938284447107,64,FLEN)
NAN_BOXED(4609392678853208665,64,FLEN)
NAN_BOXED(4604902673781771999,64,FLEN)
NAN_BOXED(4602687938284447107,64,FLEN)
NAN_BOXED(4609392678853208665,64,FLEN)
NAN_BOXED(4604902673781771999,64,FLEN)
NAN_BOXED(4602718743212486208,64,FLEN)
NAN_BOXED(4603053096301927992,64,FLEN)
NAN_BOXED(4598592738650327318,64,FLEN)
NAN_BOXED(4602718743212486208,64,FLEN)
NAN_BOXED(4603053096301927992,64,FLEN)
NAN_BOXED(4598592738650327318,64,FLEN)
NAN_BOXED(4602718743212486208,64,FLEN)
NAN_BOXED(4603053096301927992,64,FLEN)
NAN_BOXED(4598592738650327318,64,FLEN)
NAN_BOXED(4602718743212486208,64,FLEN)
NAN_BOXED(4603053096301927992,64,FLEN)
NAN_BOXED(4598592738650327318,64,FLEN)
NAN_BOXED(4602718743212486208,64,FLEN)
NAN_BOXED(4603053096301927992,64,FLEN)
NAN_BOXED(4598592738650327318,64,FLEN)
NAN_BOXED(4602728081867751491,64,FLEN)
NAN_BOXED(4610918711285578561,64,FLEN)
NAN_BOXED(4606505243847221274,64,FLEN)
NAN_BOXED(4602728081867751491,64,FLEN)
NAN_BOXED(4610918711285578561,64,FLEN)
NAN_BOXED(4606505243847221274,64,FLEN)
NAN_BOXED(4602728081867751491,64,FLEN)
NAN_BOXED(4610918711285578561,64,FLEN)
NAN_BOXED(4606505243847221274,64,FLEN)
NAN_BOXED(4602728081867751491,64,FLEN)
NAN_BOXED(4610918711285578561,64,FLEN)
NAN_BOXED(4606505243847221274,64,FLEN)
NAN_BOXED(4602728081867751491,64,FLEN)
NAN_BOXED(4610918711285578561,64,FLEN)
NAN_BOXED(4606505243847221274,64,FLEN)
NAN_BOXED(4602753632733125742,64,FLEN)
NAN_BOXED(4607384382014451567,64,FLEN)
NAN_BOXED(4602958950949870884,64,FLEN)
NAN_BOXED(4602753632733125742,64,FLEN)
NAN_BOXED(4607384382014451567,64,FLEN)
NAN_BOXED(4602958950949870884,64,FLEN)
NAN_BOXED(4602753632733125742,64,FLEN)
NAN_BOXED(4607384382014451567,64,FLEN)
NAN_BOXED(4602958950949870884,64,FLEN)
NAN_BOXED(4602753632733125742,64,FLEN)
NAN_BOXED(4607384382014451567,64,FLEN)
NAN_BOXED(4602958950949870884,64,FLEN)
NAN_BOXED(4602753632733125742,64,FLEN)
NAN_BOXED(4607384382014451567,64,FLEN)
NAN_BOXED(4602958950949870884,64,FLEN)
NAN_BOXED(4602779839205097613,64,FLEN)
NAN_BOXED(4610873966597651632,64,FLEN)
NAN_BOXED(4606554191938597785,64,FLEN)
NAN_BOXED(4602779839205097613,64,FLEN)
NAN_BOXED(4610873966597651632,64,FLEN)
NAN_BOXED(4606554191938597785,64,FLEN)
NAN_BOXED(4602779839205097613,64,FLEN)
NAN_BOXED(4610873966597651632,64,FLEN)
NAN_BOXED(4606554191938597785,64,FLEN)
NAN_BOXED(4602779839205097613,64,FLEN)
NAN_BOXED(4610873966597651632,64,FLEN)
NAN_BOXED(4606554191938597785,64,FLEN)
NAN_BOXED(4602779839205097613,64,FLEN)
NAN_BOXED(4610873966597651632,64,FLEN)
NAN_BOXED(4606554191938597785,64,FLEN)
NAN_BOXED(4602786408377141353,64,FLEN)
NAN_BOXED(4608271430611603856,64,FLEN)
NAN_BOXED(4603901436247922220,64,FLEN)
NAN_BOXED(4602786408377141353,64,FLEN)
NAN_BOXED(4608271430611603856,64,FLEN)
NAN_BOXED(4603901436247922220,64,FLEN)
NAN_BOXED(4602786408377141353,64,FLEN)
NAN_BOXED(4608271430611603856,64,FLEN)
NAN_BOXED(4603901436247922220,64,FLEN)
NAN_BOXED(4602786408377141353,64,FLEN)
NAN_BOXED(4608271430611603856,64,FLEN)
NAN_BOXED(4603901436247922220,64,FLEN)
NAN_BOXED(4602786408377141353,64,FLEN)
NAN_BOXED(4608271430611603856,64,FLEN)
NAN_BOXED(4603901436247922220,64,FLEN)
NAN_BOXED(4602788678298883061,64,FLEN)
NAN_BOXED(4608632457804370693,64,FLEN)
NAN_BOXED(4604274089012803610,64,FLEN)
NAN_BOXED(4602788678298883061,64,FLEN)
NAN_BOXED(4608632457804370693,64,FLEN)
NAN_BOXED(4604274089012803610,64,FLEN)
NAN_BOXED(4602788678298883061,64,FLEN)
NAN_BOXED(4608632457804370693,64,FLEN)
NAN_BOXED(4604274089012803610,64,FLEN)
NAN_BOXED(4602788678298883061,64,FLEN)
NAN_BOXED(4608632457804370693,64,FLEN)
NAN_BOXED(4604274089012803610,64,FLEN)
NAN_BOXED(4602788678298883061,64,FLEN)
NAN_BOXED(4608632457804370693,64,FLEN)
NAN_BOXED(4604274089012803610,64,FLEN)
NAN_BOXED(4602789932008474517,64,FLEN)
NAN_BOXED(4601265430788559505,64,FLEN)
NAN_BOXED(4596949185706528436,64,FLEN)
NAN_BOXED(4602789932008474517,64,FLEN)
NAN_BOXED(4601265430788559505,64,FLEN)
NAN_BOXED(4596949185706528436,64,FLEN)
NAN_BOXED(4602789932008474517,64,FLEN)
NAN_BOXED(4601265430788559505,64,FLEN)
NAN_BOXED(4596949185706528436,64,FLEN)
NAN_BOXED(4602789932008474517,64,FLEN)
NAN_BOXED(4601265430788559505,64,FLEN)
NAN_BOXED(4596949185706528436,64,FLEN)
NAN_BOXED(4602789932008474517,64,FLEN)
NAN_BOXED(4601265430788559505,64,FLEN)
NAN_BOXED(4596949185706528436,64,FLEN)
NAN_BOXED(4602813615260794223,64,FLEN)
NAN_BOXED(4609136265429485520,64,FLEN)
NAN_BOXED(4604825941973814052,64,FLEN)
NAN_BOXED(4602813615260794223,64,FLEN)
NAN_BOXED(4609136265429485520,64,FLEN)
NAN_BOXED(4604825941973814052,64,FLEN)
NAN_BOXED(4602813615260794223,64,FLEN)
NAN_BOXED(4609136265429485520,64,FLEN)
NAN_BOXED(4604825941973814052,64,FLEN)
NAN_BOXED(4602813615260794223,64,FLEN)
NAN_BOXED(4609136265429485520,64,FLEN)
NAN_BOXED(4604825941973814052,64,FLEN)
NAN_BOXED(4602813615260794223,64,FLEN)
NAN_BOXED(4609136265429485520,64,FLEN)
NAN_BOXED(4604825941973814052,64,FLEN)
NAN_BOXED(4602825237679827553,64,FLEN)
NAN_BOXED(4610197626991012490,64,FLEN)
NAN_BOXED(4605938474629747217,64,FLEN)
NAN_BOXED(4602825237679827553,64,FLEN)
NAN_BOXED(4610197626991012490,64,FLEN)
NAN_BOXED(4605938474629747217,64,FLEN)
NAN_BOXED(4602825237679827553,64,FLEN)
NAN_BOXED(4610197626991012490,64,FLEN)
NAN_BOXED(4605938474629747217,64,FLEN)
NAN_BOXED(4602825237679827553,64,FLEN)
NAN_BOXED(4610197626991012490,64,FLEN)
NAN_BOXED(4605938474629747217,64,FLEN)
NAN_BOXED(4602825237679827553,64,FLEN)
NAN_BOXED(4610197626991012490,64,FLEN)
NAN_BOXED(4605938474629747217,64,FLEN)
NAN_BOXED(4602855041618488758,64,FLEN)
NAN_BOXED(4609005158153529996,64,FLEN)
NAN_BOXED(4604749103383757499,64,FLEN)
NAN_BOXED(4602855041618488758,64,FLEN)
NAN_BOXED(4609005158153529996,64,FLEN)
NAN_BOXED(4604749103383757499,64,FLEN)
NAN_BOXED(4602855041618488758,64,FLEN)
NAN_BOXED(4609005158153529996,64,FLEN)
NAN_BOXED(4604749103383757499,64,FLEN)
NAN_BOXED(4602855041618488758,64,FLEN)
NAN_BOXED(4609005158153529996,64,FLEN)
NAN_BOXED(4604749103383757499,64,FLEN)
NAN_BOXED(4602855041618488758,64,FLEN)
NAN_BOXED(4609005158153529996,64,FLEN)
NAN_BOXED(4604749103383757499,64,FLEN)
NAN_BOXED(4602872122799827803,64,FLEN)
NAN_BOXED(4610087340889653989,64,FLEN)
NAN_BOXED(4605901730035362334,64,FLEN)
NAN_BOXED(4602872122799827803,64,FLEN)
NAN_BOXED(4610087340889653989,64,FLEN)
NAN_BOXED(4605901730035362334,64,FLEN)
NAN_BOXED(4602872122799827803,64,FLEN)
NAN_BOXED(4610087340889653989,64,FLEN)
NAN_BOXED(4605901730035362334,64,FLEN)
NAN_BOXED(4602872122799827803,64,FLEN)
NAN_BOXED(4610087340889653989,64,FLEN)
NAN_BOXED(4605901730035362334,64,FLEN)
NAN_BOXED(4602872122799827803,64,FLEN)
NAN_BOXED(4610087340889653989,64,FLEN)
NAN_BOXED(4605901730035362334,64,FLEN)
NAN_BOXED(4602929113006187473,64,FLEN)
NAN_BOXED(4610323927241946755,64,FLEN)
NAN_BOXED(4606245215163386671,64,FLEN)
NAN_BOXED(4602929113006187473,64,FLEN)
NAN_BOXED(4610323927241946755,64,FLEN)
NAN_BOXED(4606245215163386671,64,FLEN)
NAN_BOXED(4602929113006187473,64,FLEN)
NAN_BOXED(4610323927241946755,64,FLEN)
NAN_BOXED(4606245215163386671,64,FLEN)
NAN_BOXED(4602929113006187473,64,FLEN)
NAN_BOXED(4610323927241946755,64,FLEN)
NAN_BOXED(4606245215163386671,64,FLEN)
NAN_BOXED(4602929113006187473,64,FLEN)
NAN_BOXED(4610323927241946755,64,FLEN)
NAN_BOXED(4606245215163386671,64,FLEN)
NAN_BOXED(4602940660222869843,64,FLEN)
NAN_BOXED(4603186014241297479,64,FLEN)
NAN_BOXED(4598973744184540634,64,FLEN)
NAN_BOXED(4602940660222869843,64,FLEN)
NAN_BOXED(4603186014241297479,64,FLEN)
NAN_BOXED(4598973744184540634,64,FLEN)
NAN_BOXED(4602940660222869843,64,FLEN)
NAN_BOXED(4603186014241297479,64,FLEN)
NAN_BOXED(4598973744184540634,64,FLEN)
NAN_BOXED(4602940660222869843,64,FLEN)
NAN_BOXED(4603186014241297479,64,FLEN)
NAN_BOXED(4598973744184540634,64,FLEN)
NAN_BOXED(4602940660222869843,64,FLEN)
NAN_BOXED(4603186014241297479,64,FLEN)
NAN_BOXED(4598973744184540634,64,FLEN)
NAN_BOXED(4602945021499633946,64,FLEN)
NAN_BOXED(4599050035453981870,64,FLEN)
NAN_BOXED(4594864347463894856,64,FLEN)
NAN_BOXED(4602945021499633946,64,FLEN)
NAN_BOXED(4599050035453981870,64,FLEN)
NAN_BOXED(4594864347463894856,64,FLEN)
NAN_BOXED(4602945021499633946,64,FLEN)
NAN_BOXED(4599050035453981870,64,FLEN)
NAN_BOXED(4594864347463894856,64,FLEN)
NAN_BOXED(4602945021499633946,64,FLEN)
NAN_BOXED(4599050035453981870,64,FLEN)
NAN_BOXED(4594864347463894856,64,FLEN)
NAN_BOXED(4602945021499633946,64,FLEN)
NAN_BOXED(4599050035453981870,64,FLEN)
NAN_BOXED(4594864347463894856,64,FLEN)
NAN_BOXED(4602946745006247760,64,FLEN)
NAN_BOXED(4601842158608753405,64,FLEN)
NAN_BOXED(4597824636468468820,64,FLEN)
NAN_BOXED(4602946745006247760,64,FLEN)
NAN_BOXED(4601842158608753405,64,FLEN)
NAN_BOXED(4597824636468468820,64,FLEN)
NAN_BOXED(4602946745006247760,64,FLEN)
NAN_BOXED(4601842158608753405,64,FLEN)
NAN_BOXED(4597824636468468820,64,FLEN)
NAN_BOXED(4602946745006247760,64,FLEN)
NAN_BOXED(4601842158608753405,64,FLEN)
NAN_BOXED(4597824636468468820,64,FLEN)
NAN_BOXED(4602946745006247760,64,FLEN)
NAN_BOXED(4601842158608753405,64,FLEN)
NAN_BOXED(4597824636468468820,64,FLEN)
NAN_BOXED(4602957914083573677,64,FLEN)
NAN_BOXED(4607730278596785421,64,FLEN)
NAN_BOXED(4603539725584274262,64,FLEN)
NAN_BOXED(4602957914083573677,64,FLEN)
NAN_BOXED(4607730278596785421,64,FLEN)
NAN_BOXED(4603539725584274262,64,FLEN)
NAN_BOXED(4602957914083573677,64,FLEN)
NAN_BOXED(4607730278596785421,64,FLEN)
NAN_BOXED(4603539725584274262,64,FLEN)
NAN_BOXED(4602957914083573677,64,FLEN)
NAN_BOXED(4607730278596785421,64,FLEN)
NAN_BOXED(4603539725584274262,64,FLEN)
NAN_BOXED(4602957914083573677,64,FLEN)
NAN_BOXED(4607730278596785421,64,FLEN)
NAN_BOXED(4603539725584274262,64,FLEN)
NAN_BOXED(4603014667916969696,64,FLEN)
NAN_BOXED(4595901514885809044,64,FLEN)
NAN_BOXED(4591900054856057992,64,FLEN)
NAN_BOXED(4603014667916969696,64,FLEN)
NAN_BOXED(4595901514885809044,64,FLEN)
NAN_BOXED(4591900054856057992,64,FLEN)
NAN_BOXED(4603014667916969696,64,FLEN)
NAN_BOXED(4595901514885809044,64,FLEN)
NAN_BOXED(4591900054856057992,64,FLEN)
NAN_BOXED(4603014667916969696,64,FLEN)
NAN_BOXED(4595901514885809044,64,FLEN)
NAN_BOXED(4591900054856057992,64,FLEN)
NAN_BOXED(4603014667916969696,64,FLEN)
NAN_BOXED(4595901514885809044,64,FLEN)
NAN_BOXED(4591900054856057992,64,FLEN)
NAN_BOXED(4603077434394952923,64,FLEN)
NAN_BOXED(4610446508274444391,64,FLEN)
NAN_BOXED(4606630429602378001,64,FLEN)
NAN_BOXED(4603077434394952923,64,FLEN)
NAN_BOXED(4610446508274444391,64,FLEN)
NAN_BOXED(4606630429602378001,64,FLEN)
NAN_BOXED(4603077434394952923,64,FLEN)
NAN_BOXED(4610446508274444391,64,FLEN)
NAN_BOXED(4606630429602378001,64,FLEN)
NAN_BOXED(4603077434394952923,64,FLEN)
NAN_BOXED(4610446508274444391,64,FLEN)
NAN_BOXED(4606630429602378001,64,FLEN)
NAN_BOXED(4603077434394952923,64,FLEN)
NAN_BOXED(4610446508274444391,64,FLEN)
NAN_BOXED(4606630429602378001,64,FLEN)
NAN_BOXED(4603079106368471632,64,FLEN)
NAN_BOXED(4600164254054951132,64,FLEN)
NAN_BOXED(4596237730217452992,64,FLEN)
NAN_BOXED(4603079106368471632,64,FLEN)
NAN_BOXED(4600164254054951132,64,FLEN)
NAN_BOXED(4596237730217452992,64,FLEN)
NAN_BOXED(4603079106368471632,64,FLEN)
NAN_BOXED(4600164254054951132,64,FLEN)
NAN_BOXED(4596237730217452992,64,FLEN)
NAN_BOXED(4603079106368471632,64,FLEN)
NAN_BOXED(4600164254054951132,64,FLEN)
NAN_BOXED(4596237730217452992,64,FLEN)
NAN_BOXED(4603079106368471632,64,FLEN)
NAN_BOXED(4600164254054951132,64,FLEN)
NAN_BOXED(4596237730217452992,64,FLEN)
NAN_BOXED(4603102597719976754,64,FLEN)
NAN_BOXED(4585110536929744081,64,FLEN)
NAN_BOXED(4581072694382218208,64,FLEN)
NAN_BOXED(4603102597719976754,64,FLEN)
NAN_BOXED(4585110536929744081,64,FLEN)
NAN_BOXED(4581072694382218208,64,FLEN)
NAN_BOXED(4603102597719976754,64,FLEN)
NAN_BOXED(4585110536929744081,64,FLEN)
NAN_BOXED(4581072694382218208,64,FLEN)
NAN_BOXED(4603102597719976754,64,FLEN)
NAN_BOXED(4585110536929744081,64,FLEN)
NAN_BOXED(4581072694382218208,64,FLEN)
NAN_BOXED(4603102597719976754,64,FLEN)
NAN_BOXED(4585110536929744081,64,FLEN)
NAN_BOXED(4581072694382218208,64,FLEN)
NAN_BOXED(4603115368887527231,64,FLEN)
NAN_BOXED(4593924168278239180,64,FLEN)
NAN_BOXED(4589881598764500912,64,FLEN)
NAN_BOXED(4603115368887527231,64,FLEN)
NAN_BOXED(4593924168278239180,64,FLEN)
NAN_BOXED(4589881598764500912,64,FLEN)
NAN_BOXED(4603115368887527231,64,FLEN)
NAN_BOXED(4593924168278239180,64,FLEN)
NAN_BOXED(4589881598764500912,64,FLEN)
NAN_BOXED(4603115368887527231,64,FLEN)
NAN_BOXED(4593924168278239180,64,FLEN)
NAN_BOXED(4589881598764500912,64,FLEN)
NAN_BOXED(4603115368887527231,64,FLEN)
NAN_BOXED(4593924168278239180,64,FLEN)
NAN_BOXED(4589881598764500912,64,FLEN)
NAN_BOXED(4603134968189956408,64,FLEN)
NAN_BOXED(4610390573575152145,64,FLEN)
NAN_BOXED(4606668062295657016,64,FLEN)
NAN_BOXED(4603134968189956408,64,FLEN)
NAN_BOXED(4610390573575152145,64,FLEN)
NAN_BOXED(4606668062295657016,64,FLEN)
NAN_BOXED(4603134968189956408,64,FLEN)
NAN_BOXED(4610390573575152145,64,FLEN)
NAN_BOXED(4606668062295657016,64,FLEN)
NAN_BOXED(4603134968189956408,64,FLEN)
NAN_BOXED(4610390573575152145,64,FLEN)
NAN_BOXED(4606668062295657016,64,FLEN)
NAN_BOXED(4603134968189956408,64,FLEN)
NAN_BOXED(4610390573575152145,64,FLEN)
NAN_BOXED(4606668062295657016,64,FLEN)
NAN_BOXED(4603154451851462440,64,FLEN)
NAN_BOXED(4599170401157093858,64,FLEN)
NAN_BOXED(4595247537000772012,64,FLEN)
NAN_BOXED(4603154451851462440,64,FLEN)
NAN_BOXED(4599170401157093858,64,FLEN)
NAN_BOXED(4595247537000772012,64,FLEN)
NAN_BOXED(4603154451851462440,64,FLEN)
NAN_BOXED(4599170401157093858,64,FLEN)
NAN_BOXED(4595247537000772012,64,FLEN)
NAN_BOXED(4603154451851462440,64,FLEN)
NAN_BOXED(4599170401157093858,64,FLEN)
NAN_BOXED(4595247537000772012,64,FLEN)
NAN_BOXED(4603154451851462440,64,FLEN)
NAN_BOXED(4599170401157093858,64,FLEN)
NAN_BOXED(4595247537000772012,64,FLEN)
NAN_BOXED(4603167328325174885,64,FLEN)
NAN_BOXED(4610703395766974574,64,FLEN)
NAN_BOXED(4607070228557189924,64,FLEN)
NAN_BOXED(4603167328325174885,64,FLEN)
NAN_BOXED(4610703395766974574,64,FLEN)
NAN_BOXED(4607070228557189924,64,FLEN)
NAN_BOXED(4603167328325174885,64,FLEN)
NAN_BOXED(4610703395766974574,64,FLEN)
NAN_BOXED(4607070228557189924,64,FLEN)
NAN_BOXED(4603167328325174885,64,FLEN)
NAN_BOXED(4610703395766974574,64,FLEN)
NAN_BOXED(4607070228557189924,64,FLEN)
NAN_BOXED(4603167328325174885,64,FLEN)
NAN_BOXED(4610703395766974574,64,FLEN)
NAN_BOXED(4607070228557189924,64,FLEN)
NAN_BOXED(4603188874977639717,64,FLEN)
NAN_BOXED(4609134184724446915,64,FLEN)
NAN_BOXED(4605361688424520429,64,FLEN)
NAN_BOXED(4603188874977639717,64,FLEN)
NAN_BOXED(4609134184724446915,64,FLEN)
NAN_BOXED(4605361688424520429,64,FLEN)
NAN_BOXED(4603188874977639717,64,FLEN)
NAN_BOXED(4609134184724446915,64,FLEN)
NAN_BOXED(4605361688424520429,64,FLEN)
NAN_BOXED(4603188874977639717,64,FLEN)
NAN_BOXED(4609134184724446915,64,FLEN)
NAN_BOXED(4605361688424520429,64,FLEN)
NAN_BOXED(4603188874977639717,64,FLEN)
NAN_BOXED(4609134184724446915,64,FLEN)
NAN_BOXED(4605361688424520429,64,FLEN)
NAN_BOXED(4603238029596634408,64,FLEN)
NAN_BOXED(4608645639715054740,64,FLEN)
NAN_BOXED(4604882938151779115,64,FLEN)
NAN_BOXED(4603238029596634408,64,FLEN)
NAN_BOXED(4608645639715054740,64,FLEN)
NAN_BOXED(4604882938151779115,64,FLEN)
NAN_BOXED(4603238029596634408,64,FLEN)
NAN_BOXED(4608645639715054740,64,FLEN)
NAN_BOXED(4604882938151779115,64,FLEN)
NAN_BOXED(4603238029596634408,64,FLEN)
NAN_BOXED(4608645639715054740,64,FLEN)
NAN_BOXED(4604882938151779115,64,FLEN)
NAN_BOXED(4603238029596634408,64,FLEN)
NAN_BOXED(4608645639715054740,64,FLEN)
NAN_BOXED(4604882938151779115,64,FLEN)
NAN_BOXED(4603309927971700591,64,FLEN)
NAN_BOXED(4604739495401896865,64,FLEN)
NAN_BOXED(4601155776002633506,64,FLEN)
NAN_BOXED(4603309927971700591,64,FLEN)
NAN_BOXED(4604739495401896865,64,FLEN)
NAN_BOXED(4601155776002633506,64,FLEN)
NAN_BOXED(4603309927971700591,64,FLEN)
NAN_BOXED(4604739495401896865,64,FLEN)
NAN_BOXED(4601155776002633506,64,FLEN)
NAN_BOXED(4603309927971700591,64,FLEN)
NAN_BOXED(4604739495401896865,64,FLEN)
NAN_BOXED(4601155776002633506,64,FLEN)
NAN_BOXED(4603309927971700591,64,FLEN)
NAN_BOXED(4604739495401896865,64,FLEN)
NAN_BOXED(4601155776002633506,64,FLEN)
NAN_BOXED(4603344544489081235,64,FLEN)
NAN_BOXED(4607615228353409898,64,FLEN)
NAN_BOXED(4603841332260061474,64,FLEN)
NAN_BOXED(4603344544489081235,64,FLEN)
NAN_BOXED(4607615228353409898,64,FLEN)
NAN_BOXED(4603841332260061474,64,FLEN)
NAN_BOXED(4603344544489081235,64,FLEN)
NAN_BOXED(4607615228353409898,64,FLEN)
NAN_BOXED(4603841332260061474,64,FLEN)
NAN_BOXED(4603344544489081235,64,FLEN)
NAN_BOXED(4607615228353409898,64,FLEN)
NAN_BOXED(4603841332260061474,64,FLEN)
NAN_BOXED(4603344544489081235,64,FLEN)
NAN_BOXED(4607615228353409898,64,FLEN)
NAN_BOXED(4603841332260061474,64,FLEN)
NAN_BOXED(4603478252666843286,64,FLEN)
NAN_BOXED(4604462576384630353,64,FLEN)
NAN_BOXED(4601075044805759740,64,FLEN)
NAN_BOXED(4603478252666843286,64,FLEN)
NAN_BOXED(4604462576384630353,64,FLEN)
NAN_BOXED(4601075044805759740,64,FLEN)
NAN_BOXED(4603478252666843286,64,FLEN)
NAN_BOXED(4604462576384630353,64,FLEN)
NAN_BOXED(4601075044805759740,64,FLEN)
NAN_BOXED(4603478252666843286,64,FLEN)
NAN_BOXED(4604462576384630353,64,FLEN)
NAN_BOXED(4601075044805759740,64,FLEN)
NAN_BOXED(4603478252666843286,64,FLEN)
NAN_BOXED(4604462576384630353,64,FLEN)
NAN_BOXED(4601075044805759740,64,FLEN)
NAN_BOXED(4603497899974505100,64,FLEN)
NAN_BOXED(4609645055296602960,64,FLEN)
NAN_BOXED(4606408422260948542,64,FLEN)
NAN_BOXED(4603497899974505100,64,FLEN)
NAN_BOXED(4609645055296602960,64,FLEN)
NAN_BOXED(4606408422260948542,64,FLEN)
NAN_BOXED(4603497899974505100,64,FLEN)
NAN_BOXED(4609645055296602960,64,FLEN)
NAN_BOXED(4606408422260948542,64,FLEN)
NAN_BOXED(4603497899974505100,64,FLEN)
NAN_BOXED(4609645055296602960,64,FLEN)
NAN_BOXED(4606408422260948542,64,FLEN)
NAN_BOXED(4603497899974505100,64,FLEN)
NAN_BOXED(4609645055296602960,64,FLEN)
NAN_BOXED(4606408422260948542,64,FLEN)
NAN_BOXED(4603595017302939077,64,FLEN)
NAN_BOXED(4605839431126330733,64,FLEN)
NAN_BOXED(4602786916873875688,64,FLEN)
NAN_BOXED(4603595017302939077,64,FLEN)
NAN_BOXED(4605839431126330733,64,FLEN)
NAN_BOXED(4602786916873875688,64,FLEN)
NAN_BOXED(4603595017302939077,64,FLEN)
NAN_BOXED(4605839431126330733,64,FLEN)
NAN_BOXED(4602786916873875688,64,FLEN)
NAN_BOXED(4603595017302939077,64,FLEN)
NAN_BOXED(4605839431126330733,64,FLEN)
NAN_BOXED(4602786916873875688,64,FLEN)
NAN_BOXED(4603595017302939077,64,FLEN)
NAN_BOXED(4605839431126330733,64,FLEN)
NAN_BOXED(4602786916873875688,64,FLEN)
NAN_BOXED(4603601956099775068,64,FLEN)
NAN_BOXED(4571394726527453482,64,FLEN)
NAN_BOXED(4567863684893274624,64,FLEN)
NAN_BOXED(4603601956099775068,64,FLEN)
NAN_BOXED(4571394726527453482,64,FLEN)
NAN_BOXED(4567863684893274624,64,FLEN)
NAN_BOXED(4603601956099775068,64,FLEN)
NAN_BOXED(4571394726527453482,64,FLEN)
NAN_BOXED(4567863684893274624,64,FLEN)
NAN_BOXED(4603601956099775068,64,FLEN)
NAN_BOXED(4571394726527453482,64,FLEN)
NAN_BOXED(4567863684893274624,64,FLEN)
NAN_BOXED(4603601956099775068,64,FLEN)
NAN_BOXED(4571394726527453482,64,FLEN)
NAN_BOXED(4567863684893274624,64,FLEN)
NAN_BOXED(4603610579311105615,64,FLEN)
NAN_BOXED(4604488766744590280,64,FLEN)
NAN_BOXED(4601291391493127054,64,FLEN)
NAN_BOXED(4603610579311105615,64,FLEN)
NAN_BOXED(4604488766744590280,64,FLEN)
NAN_BOXED(4601291391493127054,64,FLEN)
NAN_BOXED(4603610579311105615,64,FLEN)
NAN_BOXED(4604488766744590280,64,FLEN)
NAN_BOXED(4601291391493127054,64,FLEN)
NAN_BOXED(4603610579311105615,64,FLEN)
NAN_BOXED(4604488766744590280,64,FLEN)
NAN_BOXED(4601291391493127054,64,FLEN)
NAN_BOXED(4603610579311105615,64,FLEN)
NAN_BOXED(4604488766744590280,64,FLEN)
NAN_BOXED(4601291391493127054,64,FLEN)
NAN_BOXED(4603684462451151246,64,FLEN)
NAN_BOXED(4604165659845173181,64,FLEN)
NAN_BOXED(4600999711545922638,64,FLEN)
NAN_BOXED(4603684462451151246,64,FLEN)
NAN_BOXED(4604165659845173181,64,FLEN)
NAN_BOXED(4600999711545922638,64,FLEN)
NAN_BOXED(4603684462451151246,64,FLEN)
NAN_BOXED(4604165659845173181,64,FLEN)
NAN_BOXED(4600999711545922638,64,FLEN)
NAN_BOXED(4603684462451151246,64,FLEN)
NAN_BOXED(4604165659845173181,64,FLEN)
NAN_BOXED(4600999711545922638,64,FLEN)
NAN_BOXED(4603684462451151246,64,FLEN)
NAN_BOXED(4604165659845173181,64,FLEN)
NAN_BOXED(4600999711545922638,64,FLEN)
NAN_BOXED(4603684840247669736,64,FLEN)
NAN_BOXED(4608398909540740773,64,FLEN)
NAN_BOXED(4605173072578231623,64,FLEN)
NAN_BOXED(4603684840247669736,64,FLEN)
NAN_BOXED(4608398909540740773,64,FLEN)
NAN_BOXED(4605173072578231623,64,FLEN)
NAN_BOXED(4603684840247669736,64,FLEN)
NAN_BOXED(4608398909540740773,64,FLEN)
NAN_BOXED(4605173072578231623,64,FLEN)
NAN_BOXED(4603684840247669736,64,FLEN)
NAN_BOXED(4608398909540740773,64,FLEN)
NAN_BOXED(4605173072578231623,64,FLEN)
NAN_BOXED(4603684840247669736,64,FLEN)
NAN_BOXED(4608398909540740773,64,FLEN)
NAN_BOXED(4605173072578231623,64,FLEN)
NAN_BOXED(4603717360513446208,64,FLEN)
NAN_BOXED(4609551188160576561,64,FLEN)
NAN_BOXED(4606632374014538729,64,FLEN)
NAN_BOXED(4603717360513446208,64,FLEN)
NAN_BOXED(4609551188160576561,64,FLEN)
NAN_BOXED(4606632374014538729,64,FLEN)
NAN_BOXED(4603717360513446208,64,FLEN)
NAN_BOXED(4609551188160576561,64,FLEN)
NAN_BOXED(4606632374014538729,64,FLEN)
NAN_BOXED(4603717360513446208,64,FLEN)
NAN_BOXED(4609551188160576561,64,FLEN)
NAN_BOXED(4606632374014538729,64,FLEN)
NAN_BOXED(4603717360513446208,64,FLEN)
NAN_BOXED(4609551188160576561,64,FLEN)
NAN_BOXED(4606632374014538729,64,FLEN)
NAN_BOXED(4603723013035390770,64,FLEN)
NAN_BOXED(4603676150818013817,64,FLEN)
NAN_BOXED(4600447983988767498,64,FLEN)
NAN_BOXED(4603723013035390770,64,FLEN)
NAN_BOXED(4603676150818013817,64,FLEN)
NAN_BOXED(4600447983988767498,64,FLEN)
NAN_BOXED(4603723013035390770,64,FLEN)
NAN_BOXED(4603676150818013817,64,FLEN)
NAN_BOXED(4600447983988767498,64,FLEN)
NAN_BOXED(4603723013035390770,64,FLEN)
NAN_BOXED(4603676150818013817,64,FLEN)
NAN_BOXED(4600447983988767498,64,FLEN)
NAN_BOXED(4603723013035390770,64,FLEN)
NAN_BOXED(4603676150818013817,64,FLEN)
NAN_BOXED(4600447983988767498,64,FLEN)
NAN_BOXED(4603724517143114511,64,FLEN)
NAN_BOXED(4604113502925925847,64,FLEN)
NAN_BOXED(4600988722774751150,64,FLEN)
NAN_BOXED(4603724517143114511,64,FLEN)
NAN_BOXED(4604113502925925847,64,FLEN)
NAN_BOXED(4600988722774751150,64,FLEN)
NAN_BOXED(4603724517143114511,64,FLEN)
NAN_BOXED(4604113502925925847,64,FLEN)
NAN_BOXED(4600988722774751150,64,FLEN)
NAN_BOXED(4603724517143114511,64,FLEN)
NAN_BOXED(4604113502925925847,64,FLEN)
NAN_BOXED(4600988722774751150,64,FLEN)
NAN_BOXED(4603724517143114511,64,FLEN)
NAN_BOXED(4604113502925925847,64,FLEN)
NAN_BOXED(4600988722774751150,64,FLEN)
NAN_BOXED(4603749945997333026,64,FLEN)
NAN_BOXED(4606311233922225538,64,FLEN)
NAN_BOXED(4603210753153308649,64,FLEN)
NAN_BOXED(4603749945997333026,64,FLEN)
NAN_BOXED(4606311233922225538,64,FLEN)
NAN_BOXED(4603210753153308649,64,FLEN)
NAN_BOXED(4603749945997333026,64,FLEN)
NAN_BOXED(4606311233922225538,64,FLEN)
NAN_BOXED(4603210753153308649,64,FLEN)
NAN_BOXED(4603749945997333026,64,FLEN)
NAN_BOXED(4606311233922225538,64,FLEN)
NAN_BOXED(4603210753153308649,64,FLEN)
NAN_BOXED(4603749945997333026,64,FLEN)
NAN_BOXED(4606311233922225538,64,FLEN)
NAN_BOXED(4603210753153308649,64,FLEN)
NAN_BOXED(4603756054723577649,64,FLEN)
NAN_BOXED(4609032585682890792,64,FLEN)
NAN_BOXED(4606048771057177762,64,FLEN)
NAN_BOXED(4603756054723577649,64,FLEN)
NAN_BOXED(4609032585682890792,64,FLEN)
NAN_BOXED(4606048771057177762,64,FLEN)
NAN_BOXED(4603756054723577649,64,FLEN)
NAN_BOXED(4609032585682890792,64,FLEN)
NAN_BOXED(4606048771057177762,64,FLEN)
NAN_BOXED(4603756054723577649,64,FLEN)
NAN_BOXED(4609032585682890792,64,FLEN)
NAN_BOXED(4606048771057177762,64,FLEN)
NAN_BOXED(4603756054723577649,64,FLEN)
NAN_BOXED(4609032585682890792,64,FLEN)
NAN_BOXED(4606048771057177762,64,FLEN)
NAN_BOXED(4603782398235340313,64,FLEN)
NAN_BOXED(4607701885014658791,64,FLEN)
NAN_BOXED(4604429156413230556,64,FLEN)
NAN_BOXED(4603782398235340313,64,FLEN)
NAN_BOXED(4607701885014658791,64,FLEN)
NAN_BOXED(4604429156413230556,64,FLEN)
NAN_BOXED(4603782398235340313,64,FLEN)
NAN_BOXED(4607701885014658791,64,FLEN)
NAN_BOXED(4604429156413230556,64,FLEN)
NAN_BOXED(4603782398235340313,64,FLEN)
NAN_BOXED(4607701885014658791,64,FLEN)
NAN_BOXED(4604429156413230556,64,FLEN)
NAN_BOXED(4603782398235340313,64,FLEN)
NAN_BOXED(4607701885014658791,64,FLEN)
NAN_BOXED(4604429156413230556,64,FLEN)
NAN_BOXED(4603783058584500254,64,FLEN)
NAN_BOXED(4607012273369801491,64,FLEN)
NAN_BOXED(4603677126856010054,64,FLEN)
NAN_BOXED(4603783058584500254,64,FLEN)
NAN_BOXED(4607012273369801491,64,FLEN)
NAN_BOXED(4603677126856010054,64,FLEN)
NAN_BOXED(4603783058584500254,64,FLEN)
NAN_BOXED(4607012273369801491,64,FLEN)
NAN_BOXED(4603677126856010054,64,FLEN)
NAN_BOXED(4603783058584500254,64,FLEN)
NAN_BOXED(4607012273369801491,64,FLEN)
NAN_BOXED(4603677126856010054,64,FLEN)
NAN_BOXED(4603783058584500254,64,FLEN)
NAN_BOXED(4607012273369801491,64,FLEN)
NAN_BOXED(4603677126856010054,64,FLEN)
NAN_BOXED(4603821288974775031,64,FLEN)
NAN_BOXED(4600277444458015784,64,FLEN)
NAN_BOXED(4597449605484271332,64,FLEN)
NAN_BOXED(4603821288974775031,64,FLEN)
NAN_BOXED(4600277444458015784,64,FLEN)
NAN_BOXED(4597449605484271332,64,FLEN)
NAN_BOXED(4603821288974775031,64,FLEN)
NAN_BOXED(4600277444458015784,64,FLEN)
NAN_BOXED(4597449605484271332,64,FLEN)
NAN_BOXED(4603821288974775031,64,FLEN)
NAN_BOXED(4600277444458015784,64,FLEN)
NAN_BOXED(4597449605484271332,64,FLEN)
NAN_BOXED(4603821288974775031,64,FLEN)
NAN_BOXED(4600277444458015784,64,FLEN)
NAN_BOXED(4597449605484271332,64,FLEN)
NAN_BOXED(4603821357102178787,64,FLEN)
NAN_BOXED(4598477320901538512,64,FLEN)
NAN_BOXED(4595192900620933064,64,FLEN)
NAN_BOXED(4603821357102178787,64,FLEN)
NAN_BOXED(4598477320901538512,64,FLEN)
NAN_BOXED(4595192900620933064,64,FLEN)
NAN_BOXED(4603821357102178787,64,FLEN)
NAN_BOXED(4598477320901538512,64,FLEN)
NAN_BOXED(4595192900620933064,64,FLEN)
NAN_BOXED(4603821357102178787,64,FLEN)
NAN_BOXED(4598477320901538512,64,FLEN)
NAN_BOXED(4595192900620933064,64,FLEN)
NAN_BOXED(4603821357102178787,64,FLEN)
NAN_BOXED(4598477320901538512,64,FLEN)
NAN_BOXED(4595192900620933064,64,FLEN)
NAN_BOXED(4603827497332268253,64,FLEN)
NAN_BOXED(4594623445710320442,64,FLEN)
NAN_BOXED(4591511294823878312,64,FLEN)
NAN_BOXED(4603827497332268253,64,FLEN)
NAN_BOXED(4594623445710320442,64,FLEN)
NAN_BOXED(4591511294823878312,64,FLEN)
NAN_BOXED(4603827497332268253,64,FLEN)
NAN_BOXED(4594623445710320442,64,FLEN)
NAN_BOXED(4591511294823878312,64,FLEN)
NAN_BOXED(4603827497332268253,64,FLEN)
NAN_BOXED(4594623445710320442,64,FLEN)
NAN_BOXED(4591511294823878312,64,FLEN)
NAN_BOXED(4603827497332268253,64,FLEN)
NAN_BOXED(4594623445710320442,64,FLEN)
NAN_BOXED(4591511294823878312,64,FLEN)
NAN_BOXED(4603840856357963229,64,FLEN)
NAN_BOXED(4597471744970345890,64,FLEN)
NAN_BOXED(4594391163123041024,64,FLEN)
NAN_BOXED(4603840856357963229,64,FLEN)
NAN_BOXED(4597471744970345890,64,FLEN)
NAN_BOXED(4594391163123041024,64,FLEN)
NAN_BOXED(4603840856357963229,64,FLEN)
NAN_BOXED(4597471744970345890,64,FLEN)
NAN_BOXED(4594391163123041024,64,FLEN)
NAN_BOXED(4603840856357963229,64,FLEN)
NAN_BOXED(4597471744970345890,64,FLEN)
NAN_BOXED(4594391163123041024,64,FLEN)
NAN_BOXED(4603840856357963229,64,FLEN)
NAN_BOXED(4597471744970345890,64,FLEN)
NAN_BOXED(4594391163123041024,64,FLEN)
NAN_BOXED(4603845353628714228,64,FLEN)
NAN_BOXED(4609460453607636202,64,FLEN)
NAN_BOXED(4606713451122868853,64,FLEN)
NAN_BOXED(4603845353628714228,64,FLEN)
NAN_BOXED(4609460453607636202,64,FLEN)
NAN_BOXED(4606713451122868853,64,FLEN)
NAN_BOXED(4603845353628714228,64,FLEN)
NAN_BOXED(4609460453607636202,64,FLEN)
NAN_BOXED(4606713451122868853,64,FLEN)
NAN_BOXED(4603845353628714228,64,FLEN)
NAN_BOXED(4609460453607636202,64,FLEN)
NAN_BOXED(4606713451122868853,64,FLEN)
NAN_BOXED(4603845353628714228,64,FLEN)
NAN_BOXED(4609460453607636202,64,FLEN)
NAN_BOXED(4606713451122868853,64,FLEN)
NAN_BOXED(4603913851364922904,64,FLEN)
NAN_BOXED(4609709685081332836,64,FLEN)
NAN_BOXED(4607134175527518197,64,FLEN)
NAN_BOXED(4603913851364922904,64,FLEN)
NAN_BOXED(4609709685081332836,64,FLEN)
NAN_BOXED(4607134175527518197,64,FLEN)
NAN_BOXED(4603913851364922904,64,FLEN)
NAN_BOXED(4609709685081332836,64,FLEN)
NAN_BOXED(4607134175527518197,64,FLEN)
NAN_BOXED(4603913851364922904,64,FLEN)
NAN_BOXED(4609709685081332836,64,FLEN)
NAN_BOXED(4607134175527518197,64,FLEN)
NAN_BOXED(4603913851364922904,64,FLEN)
NAN_BOXED(4609709685081332836,64,FLEN)
NAN_BOXED(4607134175527518197,64,FLEN)
NAN_BOXED(4603921710634356789,64,FLEN)
NAN_BOXED(4591617259308599085,64,FLEN)
NAN_BOXED(4589032485620936320,64,FLEN)
NAN_BOXED(4603921710634356789,64,FLEN)
NAN_BOXED(4591617259308599085,64,FLEN)
NAN_BOXED(4589032485620936320,64,FLEN)
NAN_BOXED(4603921710634356789,64,FLEN)
NAN_BOXED(4591617259308599085,64,FLEN)
NAN_BOXED(4589032485620936320,64,FLEN)
NAN_BOXED(4603921710634356789,64,FLEN)
NAN_BOXED(4591617259308599085,64,FLEN)
NAN_BOXED(4589032485620936320,64,FLEN)
NAN_BOXED(4603921710634356789,64,FLEN)
NAN_BOXED(4591617259308599085,64,FLEN)
NAN_BOXED(4589032485620936320,64,FLEN)
NAN_BOXED(4603930377394843780,64,FLEN)
NAN_BOXED(4607920649463173798,64,FLEN)
NAN_BOXED(4604873763651924642,64,FLEN)
NAN_BOXED(4603930377394843780,64,FLEN)
NAN_BOXED(4607920649463173798,64,FLEN)
NAN_BOXED(4604873763651924642,64,FLEN)
NAN_BOXED(4603930377394843780,64,FLEN)
NAN_BOXED(4607920649463173798,64,FLEN)
NAN_BOXED(4604873763651924642,64,FLEN)
NAN_BOXED(4603930377394843780,64,FLEN)
NAN_BOXED(4607920649463173798,64,FLEN)
NAN_BOXED(4604873763651924642,64,FLEN)
NAN_BOXED(4603930377394843780,64,FLEN)
NAN_BOXED(4607920649463173798,64,FLEN)
NAN_BOXED(4604873763651924642,64,FLEN)
NAN_BOXED(4603934107752654754,64,FLEN)
NAN_BOXED(4601766401628611425,64,FLEN)
NAN_BOXED(4598847140256322624,64,FLEN)
NAN_BOXED(4603934107752654754,64,FLEN)
NAN_BOXED(4601766401628611425,64,FLEN)
NAN_BOXED(4598847140256322624,64,FLEN)
NAN_BOXED(4603934107752654754,64,FLEN)
NAN_BOXED(4601766401628611425,64,FLEN)
NAN_BOXED(4598847140256322624,64,FLEN)
NAN_BOXED(4603934107752654754,64,FLEN)
NAN_BOXED(4601766401628611425,64,FLEN)
NAN_BOXED(4598847140256322624,64,FLEN)
NAN_BOXED(4603934107752654754,64,FLEN)
NAN_BOXED(4601766401628611425,64,FLEN)
NAN_BOXED(4598847140256322624,64,FLEN)
NAN_BOXED(4603936408247049722,64,FLEN)
NAN_BOXED(4592242031048244313,64,FLEN)
NAN_BOXED(4589511215110837528,64,FLEN)
NAN_BOXED(4603936408247049722,64,FLEN)
NAN_BOXED(4592242031048244313,64,FLEN)
NAN_BOXED(4589511215110837528,64,FLEN)
NAN_BOXED(4603936408247049722,64,FLEN)
NAN_BOXED(4592242031048244313,64,FLEN)
NAN_BOXED(4589511215110837528,64,FLEN)
NAN_BOXED(4603936408247049722,64,FLEN)
NAN_BOXED(4592242031048244313,64,FLEN)
NAN_BOXED(4589511215110837528,64,FLEN)
NAN_BOXED(4603936408247049722,64,FLEN)
NAN_BOXED(4592242031048244313,64,FLEN)
NAN_BOXED(4589511215110837528,64,FLEN)
NAN_BOXED(4603964256540498332,64,FLEN)
NAN_BOXED(4608390123445624910,64,FLEN)
NAN_BOXED(4605516669599206501,64,FLEN)
NAN_BOXED(4603964256540498332,64,FLEN)
NAN_BOXED(4608390123445624910,64,FLEN)
NAN_BOXED(4605516669599206501,64,FLEN)
NAN_BOXED(4603964256540498332,64,FLEN)
NAN_BOXED(4608390123445624910,64,FLEN)
NAN_BOXED(4605516669599206501,64,FLEN)
NAN_BOXED(4603964256540498332,64,FLEN)
NAN_BOXED(4608390123445624910,64,FLEN)
NAN_BOXED(4605516669599206501,64,FLEN)
NAN_BOXED(4603964256540498332,64,FLEN)
NAN_BOXED(4608390123445624910,64,FLEN)
NAN_BOXED(4605516669599206501,64,FLEN)
NAN_BOXED(4604020533848541100,64,FLEN)
NAN_BOXED(4608520330593542300,64,FLEN)
NAN_BOXED(4605757036999413706,64,FLEN)
NAN_BOXED(4604020533848541100,64,FLEN)
NAN_BOXED(4608520330593542300,64,FLEN)
NAN_BOXED(4605757036999413706,64,FLEN)
NAN_BOXED(4604020533848541100,64,FLEN)
NAN_BOXED(4608520330593542300,64,FLEN)
NAN_BOXED(4605757036999413706,64,FLEN)
NAN_BOXED(4604020533848541100,64,FLEN)
NAN_BOXED(4608520330593542300,64,FLEN)
NAN_BOXED(4605757036999413706,64,FLEN)
NAN_BOXED(4604020533848541100,64,FLEN)
NAN_BOXED(4608520330593542300,64,FLEN)
NAN_BOXED(4605757036999413706,64,FLEN)
NAN_BOXED(4604088643000573745,64,FLEN)
NAN_BOXED(4609006321343683618,64,FLEN)
NAN_BOXED(4606483506881533237,64,FLEN)
NAN_BOXED(4604088643000573745,64,FLEN)
NAN_BOXED(4609006321343683618,64,FLEN)
NAN_BOXED(4606483506881533237,64,FLEN)
NAN_BOXED(4604088643000573745,64,FLEN)
NAN_BOXED(4609006321343683618,64,FLEN)
NAN_BOXED(4606483506881533237,64,FLEN)
NAN_BOXED(4604088643000573745,64,FLEN)
NAN_BOXED(4609006321343683618,64,FLEN)
NAN_BOXED(4606483506881533237,64,FLEN)
NAN_BOXED(4604088643000573745,64,FLEN)
NAN_BOXED(4609006321343683618,64,FLEN)
NAN_BOXED(4606483506881533237,64,FLEN)
NAN_BOXED(4604183813525134923,64,FLEN)
NAN_BOXED(4594329242702207983,64,FLEN)
NAN_BOXED(4591550399097618536,64,FLEN)
NAN_BOXED(4604183813525134923,64,FLEN)
NAN_BOXED(4594329242702207983,64,FLEN)
NAN_BOXED(4591550399097618536,64,FLEN)
NAN_BOXED(4604183813525134923,64,FLEN)
NAN_BOXED(4594329242702207983,64,FLEN)
NAN_BOXED(4591550399097618536,64,FLEN)
NAN_BOXED(4604183813525134923,64,FLEN)
NAN_BOXED(4594329242702207983,64,FLEN)
NAN_BOXED(4591550399097618536,64,FLEN)
NAN_BOXED(4604183813525134923,64,FLEN)
NAN_BOXED(4594329242702207983,64,FLEN)
NAN_BOXED(4591550399097618536,64,FLEN)
NAN_BOXED(4604234534113652987,64,FLEN)
NAN_BOXED(4605942824103703805,64,FLEN)
NAN_BOXED(4603400635141305746,64,FLEN)
NAN_BOXED(4604234534113652987,64,FLEN)
NAN_BOXED(4605942824103703805,64,FLEN)
NAN_BOXED(4603400635141305746,64,FLEN)
NAN_BOXED(4604234534113652987,64,FLEN)
NAN_BOXED(4605942824103703805,64,FLEN)
NAN_BOXED(4603400635141305746,64,FLEN)
NAN_BOXED(4604234534113652987,64,FLEN)
NAN_BOXED(4605942824103703805,64,FLEN)
NAN_BOXED(4603400635141305746,64,FLEN)
NAN_BOXED(4604234534113652987,64,FLEN)
NAN_BOXED(4605942824103703805,64,FLEN)
NAN_BOXED(4603400635141305746,64,FLEN)
NAN_BOXED(4604315757318961349,64,FLEN)
NAN_BOXED(4602569736644284710,64,FLEN)
NAN_BOXED(4599737792135005148,64,FLEN)
NAN_BOXED(4604315757318961349,64,FLEN)
NAN_BOXED(4602569736644284710,64,FLEN)
NAN_BOXED(4599737792135005148,64,FLEN)
NAN_BOXED(4604315757318961349,64,FLEN)
NAN_BOXED(4602569736644284710,64,FLEN)
NAN_BOXED(4599737792135005148,64,FLEN)
NAN_BOXED(4604315757318961349,64,FLEN)
NAN_BOXED(4602569736644284710,64,FLEN)
NAN_BOXED(4599737792135005148,64,FLEN)
NAN_BOXED(4604315757318961349,64,FLEN)
NAN_BOXED(4602569736644284710,64,FLEN)
NAN_BOXED(4599737792135005148,64,FLEN)
NAN_BOXED(4604369644669615511,64,FLEN)
NAN_BOXED(4607942426699170767,64,FLEN)
NAN_BOXED(4605414988930814964,64,FLEN)
NAN_BOXED(4604369644669615511,64,FLEN)
NAN_BOXED(4607942426699170767,64,FLEN)
NAN_BOXED(4605414988930814964,64,FLEN)
NAN_BOXED(4604369644669615511,64,FLEN)
NAN_BOXED(4607942426699170767,64,FLEN)
NAN_BOXED(4605414988930814964,64,FLEN)
NAN_BOXED(4604369644669615511,64,FLEN)
NAN_BOXED(4607942426699170767,64,FLEN)
NAN_BOXED(4605414988930814964,64,FLEN)
NAN_BOXED(4604369644669615511,64,FLEN)
NAN_BOXED(4607942426699170767,64,FLEN)
NAN_BOXED(4605414988930814964,64,FLEN)
NAN_BOXED(4604435913232817380,64,FLEN)
NAN_BOXED(4608623365847784579,64,FLEN)
NAN_BOXED(4606439050463580491,64,FLEN)
NAN_BOXED(4604435913232817380,64,FLEN)
NAN_BOXED(4608623365847784579,64,FLEN)
NAN_BOXED(4606439050463580491,64,FLEN)
NAN_BOXED(4604435913232817380,64,FLEN)
NAN_BOXED(4608623365847784579,64,FLEN)
NAN_BOXED(4606439050463580491,64,FLEN)
NAN_BOXED(4604435913232817380,64,FLEN)
NAN_BOXED(4608623365847784579,64,FLEN)
NAN_BOXED(4606439050463580491,64,FLEN)
NAN_BOXED(4604435913232817380,64,FLEN)
NAN_BOXED(4608623365847784579,64,FLEN)
NAN_BOXED(4606439050463580491,64,FLEN)
NAN_BOXED(4604436004627493272,64,FLEN)
NAN_BOXED(4603495860805462607,64,FLEN)
NAN_BOXED(4601068234667394792,64,FLEN)
NAN_BOXED(4604436004627493272,64,FLEN)
NAN_BOXED(4603495860805462607,64,FLEN)
NAN_BOXED(4601068234667394792,64,FLEN)
NAN_BOXED(4604436004627493272,64,FLEN)
NAN_BOXED(4603495860805462607,64,FLEN)
NAN_BOXED(4601068234667394792,64,FLEN)
NAN_BOXED(4604436004627493272,64,FLEN)
NAN_BOXED(4603495860805462607,64,FLEN)
NAN_BOXED(4601068234667394792,64,FLEN)
NAN_BOXED(4604436004627493272,64,FLEN)
NAN_BOXED(4603495860805462607,64,FLEN)
NAN_BOXED(4601068234667394792,64,FLEN)
NAN_BOXED(4604538822466801625,64,FLEN)
NAN_BOXED(4604918822793218982,64,FLEN)
NAN_BOXED(4602939587704182901,64,FLEN)
NAN_BOXED(4604538822466801625,64,FLEN)
NAN_BOXED(4604918822793218982,64,FLEN)
NAN_BOXED(4602939587704182901,64,FLEN)
NAN_BOXED(4604538822466801625,64,FLEN)
NAN_BOXED(4604918822793218982,64,FLEN)
NAN_BOXED(4602939587704182901,64,FLEN)
NAN_BOXED(4604538822466801625,64,FLEN)
NAN_BOXED(4604918822793218982,64,FLEN)
NAN_BOXED(4602939587704182901,64,FLEN)
NAN_BOXED(4604538822466801625,64,FLEN)
NAN_BOXED(4604918822793218982,64,FLEN)
NAN_BOXED(4602939587704182901,64,FLEN)
NAN_BOXED(4604563217447040051,64,FLEN)
NAN_BOXED(4608989658646708264,64,FLEN)
NAN_BOXED(4607126643440434886,64,FLEN)
NAN_BOXED(4604563217447040051,64,FLEN)
NAN_BOXED(4608989658646708264,64,FLEN)
NAN_BOXED(4607126643440434886,64,FLEN)
NAN_BOXED(4604563217447040051,64,FLEN)
NAN_BOXED(4608989658646708264,64,FLEN)
NAN_BOXED(4607126643440434886,64,FLEN)
NAN_BOXED(4604563217447040051,64,FLEN)
NAN_BOXED(4608989658646708264,64,FLEN)
NAN_BOXED(4607126643440434886,64,FLEN)
NAN_BOXED(4604563217447040051,64,FLEN)
NAN_BOXED(4608989658646708264,64,FLEN)
NAN_BOXED(4607126643440434886,64,FLEN)
NAN_BOXED(4604681772469420584,64,FLEN)
NAN_BOXED(4602406368272402091,64,FLEN)
NAN_BOXED(4599981361807727674,64,FLEN)
NAN_BOXED(4604681772469420584,64,FLEN)
NAN_BOXED(4602406368272402091,64,FLEN)
NAN_BOXED(4599981361807727674,64,FLEN)
NAN_BOXED(4604681772469420584,64,FLEN)
NAN_BOXED(4602406368272402091,64,FLEN)
NAN_BOXED(4599981361807727674,64,FLEN)
NAN_BOXED(4604681772469420584,64,FLEN)
NAN_BOXED(4602406368272402091,64,FLEN)
NAN_BOXED(4599981361807727674,64,FLEN)
NAN_BOXED(4604681772469420584,64,FLEN)
NAN_BOXED(4602406368272402091,64,FLEN)
NAN_BOXED(4599981361807727674,64,FLEN)
NAN_BOXED(4604692765276052509,64,FLEN)
NAN_BOXED(4600829679183318989,64,FLEN)
NAN_BOXED(4598851141019471330,64,FLEN)
NAN_BOXED(4604692765276052509,64,FLEN)
NAN_BOXED(4600829679183318989,64,FLEN)
NAN_BOXED(4598851141019471330,64,FLEN)
NAN_BOXED(4604692765276052509,64,FLEN)
NAN_BOXED(4600829679183318989,64,FLEN)
NAN_BOXED(4598851141019471330,64,FLEN)
NAN_BOXED(4604692765276052509,64,FLEN)
NAN_BOXED(4600829679183318989,64,FLEN)
NAN_BOXED(4598851141019471330,64,FLEN)
NAN_BOXED(4604692765276052509,64,FLEN)
NAN_BOXED(4600829679183318989,64,FLEN)
NAN_BOXED(4598851141019471330,64,FLEN)
NAN_BOXED(4604699465808454507,64,FLEN)
NAN_BOXED(4607805260169833965,64,FLEN)
NAN_BOXED(4605601759710177512,64,FLEN)
NAN_BOXED(4604699465808454507,64,FLEN)
NAN_BOXED(4607805260169833965,64,FLEN)
NAN_BOXED(4605601759710177512,64,FLEN)
NAN_BOXED(4604699465808454507,64,FLEN)
NAN_BOXED(4607805260169833965,64,FLEN)
NAN_BOXED(4605601759710177512,64,FLEN)
NAN_BOXED(4604699465808454507,64,FLEN)
NAN_BOXED(4607805260169833965,64,FLEN)
NAN_BOXED(4605601759710177512,64,FLEN)
NAN_BOXED(4604699465808454507,64,FLEN)
NAN_BOXED(4607805260169833965,64,FLEN)
NAN_BOXED(4605601759710177512,64,FLEN)
NAN_BOXED(4604708517913172119,64,FLEN)
NAN_BOXED(4600593138194378325,64,FLEN)
NAN_BOXED(4598692086633487398,64,FLEN)
NAN_BOXED(4604708517913172119,64,FLEN)
NAN_BOXED(4600593138194378325,64,FLEN)
NAN_BOXED(4598692086633487398,64,FLEN)
NAN_BOXED(4604708517913172119,64,FLEN)
NAN_BOXED(4600593138194378325,64,FLEN)
NAN_BOXED(4598692086633487398,64,FLEN)
NAN_BOXED(4604708517913172119,64,FLEN)
NAN_BOXED(4600593138194378325,64,FLEN)
NAN_BOXED(4598692086633487398,64,FLEN)
NAN_BOXED(4604708517913172119,64,FLEN)
NAN_BOXED(4600593138194378325,64,FLEN)
NAN_BOXED(4598692086633487398,64,FLEN)
NAN_BOXED(4604726172805983538,64,FLEN)
NAN_BOXED(4598577936475815647,64,FLEN)
NAN_BOXED(4596304767140269528,64,FLEN)
NAN_BOXED(4604726172805983538,64,FLEN)
NAN_BOXED(4598577936475815647,64,FLEN)
NAN_BOXED(4596304767140269528,64,FLEN)
NAN_BOXED(4604726172805983538,64,FLEN)
NAN_BOXED(4598577936475815647,64,FLEN)
NAN_BOXED(4596304767140269528,64,FLEN)
NAN_BOXED(4604726172805983538,64,FLEN)
NAN_BOXED(4598577936475815647,64,FLEN)
NAN_BOXED(4596304767140269528,64,FLEN)
NAN_BOXED(4604726172805983538,64,FLEN)
NAN_BOXED(4598577936475815647,64,FLEN)
NAN_BOXED(4596304767140269528,64,FLEN)
NAN_BOXED(4604757235034218136,64,FLEN)
NAN_BOXED(4602591677742804795,64,FLEN)
NAN_BOXED(4600189956762162674,64,FLEN)
NAN_BOXED(4604757235034218136,64,FLEN)
NAN_BOXED(4602591677742804795,64,FLEN)
NAN_BOXED(4600189956762162674,64,FLEN)
NAN_BOXED(4604757235034218136,64,FLEN)
NAN_BOXED(4602591677742804795,64,FLEN)
NAN_BOXED(4600189956762162674,64,FLEN)
NAN_BOXED(4604757235034218136,64,FLEN)
NAN_BOXED(4602591677742804795,64,FLEN)
NAN_BOXED(4600189956762162674,64,FLEN)
NAN_BOXED(4604757235034218136,64,FLEN)
NAN_BOXED(4602591677742804795,64,FLEN)
NAN_BOXED(4600189956762162674,64,FLEN)
NAN_BOXED(4604769052342554139,64,FLEN)
NAN_BOXED(4604638330776217724,64,FLEN)
NAN_BOXED(4602906620905649704,64,FLEN)
NAN_BOXED(4604769052342554139,64,FLEN)
NAN_BOXED(4604638330776217724,64,FLEN)
NAN_BOXED(4602906620905649704,64,FLEN)
NAN_BOXED(4604769052342554139,64,FLEN)
NAN_BOXED(4604638330776217724,64,FLEN)
NAN_BOXED(4602906620905649704,64,FLEN)
NAN_BOXED(4604769052342554139,64,FLEN)
NAN_BOXED(4604638330776217724,64,FLEN)
NAN_BOXED(4602906620905649704,64,FLEN)
NAN_BOXED(4604769052342554139,64,FLEN)
NAN_BOXED(4604638330776217724,64,FLEN)
NAN_BOXED(4602906620905649704,64,FLEN)
NAN_BOXED(4604787140858211449,64,FLEN)
NAN_BOXED(4606651139528289025,64,FLEN)
NAN_BOXED(4604397144296515256,64,FLEN)
NAN_BOXED(4604787140858211449,64,FLEN)
NAN_BOXED(4606651139528289025,64,FLEN)
NAN_BOXED(4604397144296515256,64,FLEN)
NAN_BOXED(4604787140858211449,64,FLEN)
NAN_BOXED(4606651139528289025,64,FLEN)
NAN_BOXED(4604397144296515256,64,FLEN)
NAN_BOXED(4604787140858211449,64,FLEN)
NAN_BOXED(4606651139528289025,64,FLEN)
NAN_BOXED(4604397144296515256,64,FLEN)
NAN_BOXED(4604787140858211449,64,FLEN)
NAN_BOXED(4606651139528289025,64,FLEN)
NAN_BOXED(4604397144296515256,64,FLEN)
NAN_BOXED(4604811974249278101,64,FLEN)
NAN_BOXED(4608783644138674523,64,FLEN)
NAN_BOXED(4607171628898397970,64,FLEN)
NAN_BOXED(4604811974249278101,64,FLEN)
NAN_BOXED(4608783644138674523,64,FLEN)
NAN_BOXED(4607171628898397970,64,FLEN)
NAN_BOXED(4604811974249278101,64,FLEN)
NAN_BOXED(4608783644138674523,64,FLEN)
NAN_BOXED(4607171628898397970,64,FLEN)
NAN_BOXED(4604811974249278101,64,FLEN)
NAN_BOXED(4608783644138674523,64,FLEN)
NAN_BOXED(4607171628898397970,64,FLEN)
NAN_BOXED(4604811974249278101,64,FLEN)
NAN_BOXED(4608783644138674523,64,FLEN)
NAN_BOXED(4607171628898397970,64,FLEN)
NAN_BOXED(4604887714076221853,64,FLEN)
NAN_BOXED(4605299264471351395,64,FLEN)
NAN_BOXED(4603484318550643427,64,FLEN)
NAN_BOXED(4604887714076221853,64,FLEN)
NAN_BOXED(4605299264471351395,64,FLEN)
NAN_BOXED(4603484318550643427,64,FLEN)
NAN_BOXED(4604887714076221853,64,FLEN)
NAN_BOXED(4605299264471351395,64,FLEN)
NAN_BOXED(4603484318550643427,64,FLEN)
NAN_BOXED(4604887714076221853,64,FLEN)
NAN_BOXED(4605299264471351395,64,FLEN)
NAN_BOXED(4603484318550643427,64,FLEN)
NAN_BOXED(4604887714076221853,64,FLEN)
NAN_BOXED(4605299264471351395,64,FLEN)
NAN_BOXED(4603484318550643427,64,FLEN)
NAN_BOXED(4604909541667792828,64,FLEN)
NAN_BOXED(4607022257423515040,64,FLEN)
NAN_BOXED(4604789795421434965,64,FLEN)
NAN_BOXED(4604909541667792828,64,FLEN)
NAN_BOXED(4607022257423515040,64,FLEN)
NAN_BOXED(4604789795421434965,64,FLEN)
NAN_BOXED(4604909541667792828,64,FLEN)
NAN_BOXED(4607022257423515040,64,FLEN)
NAN_BOXED(4604789795421434965,64,FLEN)
NAN_BOXED(4604909541667792828,64,FLEN)
NAN_BOXED(4607022257423515040,64,FLEN)
NAN_BOXED(4604789795421434965,64,FLEN)
NAN_BOXED(4604909541667792828,64,FLEN)
NAN_BOXED(4607022257423515040,64,FLEN)
NAN_BOXED(4604789795421434965,64,FLEN)
NAN_BOXED(4604914202391935295,64,FLEN)
NAN_BOXED(4607898681501520821,64,FLEN)
NAN_BOXED(4605985985511775215,64,FLEN)
NAN_BOXED(4604914202391935295,64,FLEN)
NAN_BOXED(4607898681501520821,64,FLEN)
NAN_BOXED(4605985985511775215,64,FLEN)
NAN_BOXED(4604914202391935295,64,FLEN)
NAN_BOXED(4607898681501520821,64,FLEN)
NAN_BOXED(4605985985511775215,64,FLEN)
NAN_BOXED(4604914202391935295,64,FLEN)
NAN_BOXED(4607898681501520821,64,FLEN)
NAN_BOXED(4605985985511775215,64,FLEN)
NAN_BOXED(4604914202391935295,64,FLEN)
NAN_BOXED(4607898681501520821,64,FLEN)
NAN_BOXED(4605985985511775215,64,FLEN)
NAN_BOXED(4605017686458598797,64,FLEN)
NAN_BOXED(4603245615169528248,64,FLEN)
NAN_BOXED(4601375238615612944,64,FLEN)
NAN_BOXED(4605017686458598797,64,FLEN)
NAN_BOXED(4603245615169528248,64,FLEN)
NAN_BOXED(4601375238615612944,64,FLEN)
NAN_BOXED(4605017686458598797,64,FLEN)
NAN_BOXED(4603245615169528248,64,FLEN)
NAN_BOXED(4601375238615612944,64,FLEN)
NAN_BOXED(4605017686458598797,64,FLEN)
NAN_BOXED(4603245615169528248,64,FLEN)
NAN_BOXED(4601375238615612944,64,FLEN)
NAN_BOXED(4605017686458598797,64,FLEN)
NAN_BOXED(4603245615169528248,64,FLEN)
NAN_BOXED(4601375238615612944,64,FLEN)
NAN_BOXED(4605175189484232789,64,FLEN)
NAN_BOXED(4605690526442972640,64,FLEN)
NAN_BOXED(4604015761191806006,64,FLEN)
NAN_BOXED(4605175189484232789,64,FLEN)
NAN_BOXED(4605690526442972640,64,FLEN)
NAN_BOXED(4604015761191806006,64,FLEN)
NAN_BOXED(4605175189484232789,64,FLEN)
NAN_BOXED(4605690526442972640,64,FLEN)
NAN_BOXED(4604015761191806006,64,FLEN)
NAN_BOXED(4605175189484232789,64,FLEN)
NAN_BOXED(4605690526442972640,64,FLEN)
NAN_BOXED(4604015761191806006,64,FLEN)
NAN_BOXED(4605175189484232789,64,FLEN)
NAN_BOXED(4605690526442972640,64,FLEN)
NAN_BOXED(4604015761191806006,64,FLEN)
NAN_BOXED(4605186461350215064,64,FLEN)
NAN_BOXED(4603219673097143113,64,FLEN)
NAN_BOXED(4601524867664657596,64,FLEN)
NAN_BOXED(4605186461350215064,64,FLEN)
NAN_BOXED(4603219673097143113,64,FLEN)
NAN_BOXED(4601524867664657596,64,FLEN)
NAN_BOXED(4605186461350215064,64,FLEN)
NAN_BOXED(4603219673097143113,64,FLEN)
NAN_BOXED(4601524867664657596,64,FLEN)
NAN_BOXED(4605186461350215064,64,FLEN)
NAN_BOXED(4603219673097143113,64,FLEN)
NAN_BOXED(4601524867664657596,64,FLEN)
NAN_BOXED(4605186461350215064,64,FLEN)
NAN_BOXED(4603219673097143113,64,FLEN)
NAN_BOXED(4601524867664657596,64,FLEN)
NAN_BOXED(4605193913871427598,64,FLEN)
NAN_BOXED(4605291947708531124,64,FLEN)
NAN_BOXED(4603720799049793827,64,FLEN)
NAN_BOXED(4605193913871427598,64,FLEN)
NAN_BOXED(4605291947708531124,64,FLEN)
NAN_BOXED(4603720799049793827,64,FLEN)
NAN_BOXED(4605193913871427598,64,FLEN)
NAN_BOXED(4605291947708531124,64,FLEN)
NAN_BOXED(4603720799049793827,64,FLEN)
NAN_BOXED(4605193913871427598,64,FLEN)
NAN_BOXED(4605291947708531124,64,FLEN)
NAN_BOXED(4603720799049793827,64,FLEN)
NAN_BOXED(4605193913871427598,64,FLEN)
NAN_BOXED(4605291947708531124,64,FLEN)
NAN_BOXED(4603720799049793827,64,FLEN)
NAN_BOXED(4605291940301896424,64,FLEN)
NAN_BOXED(4595299358857250900,64,FLEN)
NAN_BOXED(4594012481172273024,64,FLEN)
NAN_BOXED(4605291940301896424,64,FLEN)
NAN_BOXED(4595299358857250900,64,FLEN)
NAN_BOXED(4594012481172273024,64,FLEN)
NAN_BOXED(4605291940301896424,64,FLEN)
NAN_BOXED(4595299358857250900,64,FLEN)
NAN_BOXED(4594012481172273024,64,FLEN)
NAN_BOXED(4605291940301896424,64,FLEN)
NAN_BOXED(4595299358857250900,64,FLEN)
NAN_BOXED(4594012481172273024,64,FLEN)
NAN_BOXED(4605291940301896424,64,FLEN)
NAN_BOXED(4595299358857250900,64,FLEN)
NAN_BOXED(4594012481172273024,64,FLEN)
NAN_BOXED(4605292233451091531,64,FLEN)
NAN_BOXED(4606107454523526464,64,FLEN)
NAN_BOXED(4604442853362157268,64,FLEN)
NAN_BOXED(4605292233451091531,64,FLEN)
NAN_BOXED(4606107454523526464,64,FLEN)
NAN_BOXED(4604442853362157268,64,FLEN)
NAN_BOXED(4605292233451091531,64,FLEN)
NAN_BOXED(4606107454523526464,64,FLEN)
NAN_BOXED(4604442853362157268,64,FLEN)
NAN_BOXED(4605292233451091531,64,FLEN)
NAN_BOXED(4606107454523526464,64,FLEN)
NAN_BOXED(4604442853362157268,64,FLEN)
NAN_BOXED(4605292233451091531,64,FLEN)
NAN_BOXED(4606107454523526464,64,FLEN)
NAN_BOXED(4604442853362157268,64,FLEN)
NAN_BOXED(4605373103775693283,64,FLEN)
NAN_BOXED(4601439721910602696,64,FLEN)
NAN_BOXED(4599879309706057476,64,FLEN)
NAN_BOXED(4605373103775693283,64,FLEN)
NAN_BOXED(4601439721910602696,64,FLEN)
NAN_BOXED(4599879309706057476,64,FLEN)
NAN_BOXED(4605373103775693283,64,FLEN)
NAN_BOXED(4601439721910602696,64,FLEN)
NAN_BOXED(4599879309706057476,64,FLEN)
NAN_BOXED(4605373103775693283,64,FLEN)
NAN_BOXED(4601439721910602696,64,FLEN)
NAN_BOXED(4599879309706057476,64,FLEN)
NAN_BOXED(4605373103775693283,64,FLEN)
NAN_BOXED(4601439721910602696,64,FLEN)
NAN_BOXED(4599879309706057476,64,FLEN)
NAN_BOXED(4605444165570858837,64,FLEN)
NAN_BOXED(4603157377906259228,64,FLEN)
NAN_BOXED(4601712974215208990,64,FLEN)
NAN_BOXED(4605444165570858837,64,FLEN)
NAN_BOXED(4603157377906259228,64,FLEN)
NAN_BOXED(4601712974215208990,64,FLEN)
NAN_BOXED(4605444165570858837,64,FLEN)
NAN_BOXED(4603157377906259228,64,FLEN)
NAN_BOXED(4601712974215208990,64,FLEN)
NAN_BOXED(4605444165570858837,64,FLEN)
NAN_BOXED(4603157377906259228,64,FLEN)
NAN_BOXED(4601712974215208990,64,FLEN)
NAN_BOXED(4605444165570858837,64,FLEN)
NAN_BOXED(4603157377906259228,64,FLEN)
NAN_BOXED(4601712974215208990,64,FLEN)
NAN_BOXED(4605447326397944870,64,FLEN)
NAN_BOXED(4592460551533874920,64,FLEN)
NAN_BOXED(4590958752022532696,64,FLEN)
NAN_BOXED(4605447326397944870,64,FLEN)
NAN_BOXED(4592460551533874920,64,FLEN)
NAN_BOXED(4590958752022532696,64,FLEN)
NAN_BOXED(4605447326397944870,64,FLEN)
NAN_BOXED(4592460551533874920,64,FLEN)
NAN_BOXED(4590958752022532696,64,FLEN)
NAN_BOXED(4605447326397944870,64,FLEN)
NAN_BOXED(4592460551533874920,64,FLEN)
NAN_BOXED(4590958752022532696,64,FLEN)
NAN_BOXED(4605447326397944870,64,FLEN)
NAN_BOXED(4592460551533874920,64,FLEN)
NAN_BOXED(4590958752022532696,64,FLEN)
NAN_BOXED(4605447347229550600,64,FLEN)
NAN_BOXED(4589359736768055494,64,FLEN)
NAN_BOXED(4587742520355884576,64,FLEN)
NAN_BOXED(4605447347229550600,64,FLEN)
NAN_BOXED(4589359736768055494,64,FLEN)
NAN_BOXED(4587742520355884576,64,FLEN)
NAN_BOXED(4605447347229550600,64,FLEN)
NAN_BOXED(4589359736768055494,64,FLEN)
NAN_BOXED(4587742520355884576,64,FLEN)
NAN_BOXED(4605447347229550600,64,FLEN)
NAN_BOXED(4589359736768055494,64,FLEN)
NAN_BOXED(4587742520355884576,64,FLEN)
NAN_BOXED(4605447347229550600,64,FLEN)
NAN_BOXED(4589359736768055494,64,FLEN)
NAN_BOXED(4587742520355884576,64,FLEN)
NAN_BOXED(4605448249736150491,64,FLEN)
NAN_BOXED(4604328019378251740,64,FLEN)
NAN_BOXED(4603143411952042630,64,FLEN)
NAN_BOXED(4605448249736150491,64,FLEN)
NAN_BOXED(4604328019378251740,64,FLEN)
NAN_BOXED(4603143411952042630,64,FLEN)
NAN_BOXED(4605448249736150491,64,FLEN)
NAN_BOXED(4604328019378251740,64,FLEN)
NAN_BOXED(4603143411952042630,64,FLEN)
NAN_BOXED(4605448249736150491,64,FLEN)
NAN_BOXED(4604328019378251740,64,FLEN)
NAN_BOXED(4603143411952042630,64,FLEN)
NAN_BOXED(4605448249736150491,64,FLEN)
NAN_BOXED(4604328019378251740,64,FLEN)
NAN_BOXED(4603143411952042630,64,FLEN)
NAN_BOXED(4605487748268524576,64,FLEN)
NAN_BOXED(4605661160377300013,64,FLEN)
NAN_BOXED(4604252708874259058,64,FLEN)
NAN_BOXED(4605487748268524576,64,FLEN)
NAN_BOXED(4605661160377300013,64,FLEN)
NAN_BOXED(4604252708874259058,64,FLEN)
NAN_BOXED(4605487748268524576,64,FLEN)
NAN_BOXED(4605661160377300013,64,FLEN)
NAN_BOXED(4604252708874259058,64,FLEN)
NAN_BOXED(4605487748268524576,64,FLEN)
NAN_BOXED(4605661160377300013,64,FLEN)
NAN_BOXED(4604252708874259058,64,FLEN)
NAN_BOXED(4605487748268524576,64,FLEN)
NAN_BOXED(4605661160377300013,64,FLEN)
NAN_BOXED(4604252708874259058,64,FLEN)
NAN_BOXED(4605531606413150663,64,FLEN)
NAN_BOXED(4591339248104108924,64,FLEN)
NAN_BOXED(4590115905807788728,64,FLEN)
NAN_BOXED(4605531606413150663,64,FLEN)
NAN_BOXED(4591339248104108924,64,FLEN)
NAN_BOXED(4590115905807788728,64,FLEN)
NAN_BOXED(4605531606413150663,64,FLEN)
NAN_BOXED(4591339248104108924,64,FLEN)
NAN_BOXED(4590115905807788728,64,FLEN)
NAN_BOXED(4605531606413150663,64,FLEN)
NAN_BOXED(4591339248104108924,64,FLEN)
NAN_BOXED(4590115905807788728,64,FLEN)
NAN_BOXED(4605531606413150663,64,FLEN)
NAN_BOXED(4591339248104108924,64,FLEN)
NAN_BOXED(4590115905807788728,64,FLEN)
NAN_BOXED(4605544524012794928,64,FLEN)
NAN_BOXED(4583695428894955117,64,FLEN)
NAN_BOXED(4582233738332944704,64,FLEN)
NAN_BOXED(4605544524012794928,64,FLEN)
NAN_BOXED(4583695428894955117,64,FLEN)
NAN_BOXED(4582233738332944704,64,FLEN)
NAN_BOXED(4605544524012794928,64,FLEN)
NAN_BOXED(4583695428894955117,64,FLEN)
NAN_BOXED(4582233738332944704,64,FLEN)
NAN_BOXED(4605544524012794928,64,FLEN)
NAN_BOXED(4583695428894955117,64,FLEN)
NAN_BOXED(4582233738332944704,64,FLEN)
NAN_BOXED(4605544524012794928,64,FLEN)
NAN_BOXED(4583695428894955117,64,FLEN)
NAN_BOXED(4582233738332944704,64,FLEN)
NAN_BOXED(4605585087275159104,64,FLEN)
NAN_BOXED(4607534761311482898,64,FLEN)
NAN_BOXED(4606164803862243539,64,FLEN)
NAN_BOXED(4605585087275159104,64,FLEN)
NAN_BOXED(4607534761311482898,64,FLEN)
NAN_BOXED(4606164803862243539,64,FLEN)
NAN_BOXED(4605585087275159104,64,FLEN)
NAN_BOXED(4607534761311482898,64,FLEN)
NAN_BOXED(4606164803862243539,64,FLEN)
NAN_BOXED(4605585087275159104,64,FLEN)
NAN_BOXED(4607534761311482898,64,FLEN)
NAN_BOXED(4606164803862243539,64,FLEN)
NAN_BOXED(4605585087275159104,64,FLEN)
NAN_BOXED(4607534761311482898,64,FLEN)
NAN_BOXED(4606164803862243539,64,FLEN)
NAN_BOXED(4605604959992658646,64,FLEN)
NAN_BOXED(4607085241747775411,64,FLEN)
NAN_BOXED(4605524801859682992,64,FLEN)
NAN_BOXED(4605604959992658646,64,FLEN)
NAN_BOXED(4607085241747775411,64,FLEN)
NAN_BOXED(4605524801859682992,64,FLEN)
NAN_BOXED(4605604959992658646,64,FLEN)
NAN_BOXED(4607085241747775411,64,FLEN)
NAN_BOXED(4605524801859682992,64,FLEN)
NAN_BOXED(4605604959992658646,64,FLEN)
NAN_BOXED(4607085241747775411,64,FLEN)
NAN_BOXED(4605524801859682992,64,FLEN)
NAN_BOXED(4605604959992658646,64,FLEN)
NAN_BOXED(4607085241747775411,64,FLEN)
NAN_BOXED(4605524801859682992,64,FLEN)
NAN_BOXED(4605632026671645596,64,FLEN)
NAN_BOXED(4607999800349289638,64,FLEN)
NAN_BOXED(4606985401097856425,64,FLEN)
NAN_BOXED(4605632026671645596,64,FLEN)
NAN_BOXED(4607999800349289638,64,FLEN)
NAN_BOXED(4606985401097856425,64,FLEN)
NAN_BOXED(4605632026671645596,64,FLEN)
NAN_BOXED(4607999800349289638,64,FLEN)
NAN_BOXED(4606985401097856425,64,FLEN)
NAN_BOXED(4605632026671645596,64,FLEN)
NAN_BOXED(4607999800349289638,64,FLEN)
NAN_BOXED(4606985401097856425,64,FLEN)
NAN_BOXED(4605632026671645596,64,FLEN)
NAN_BOXED(4607999800349289638,64,FLEN)
NAN_BOXED(4606985401097856425,64,FLEN)
NAN_BOXED(4605663696493792822,64,FLEN)
NAN_BOXED(4601009257127592963,64,FLEN)
NAN_BOXED(4599772043095776178,64,FLEN)
NAN_BOXED(4605663696493792822,64,FLEN)
NAN_BOXED(4601009257127592963,64,FLEN)
NAN_BOXED(4599772043095776178,64,FLEN)
NAN_BOXED(4605663696493792822,64,FLEN)
NAN_BOXED(4601009257127592963,64,FLEN)
NAN_BOXED(4599772043095776178,64,FLEN)
NAN_BOXED(4605663696493792822,64,FLEN)
NAN_BOXED(4601009257127592963,64,FLEN)
NAN_BOXED(4599772043095776178,64,FLEN)
NAN_BOXED(4605663696493792822,64,FLEN)
NAN_BOXED(4601009257127592963,64,FLEN)
NAN_BOXED(4599772043095776178,64,FLEN)
NAN_BOXED(4605704080004558885,64,FLEN)
NAN_BOXED(4601743473996315665,64,FLEN)
NAN_BOXED(4600418652073550688,64,FLEN)
NAN_BOXED(4605704080004558885,64,FLEN)
NAN_BOXED(4601743473996315665,64,FLEN)
NAN_BOXED(4600418652073550688,64,FLEN)
NAN_BOXED(4605704080004558885,64,FLEN)
NAN_BOXED(4601743473996315665,64,FLEN)
NAN_BOXED(4600418652073550688,64,FLEN)
NAN_BOXED(4605704080004558885,64,FLEN)
NAN_BOXED(4601743473996315665,64,FLEN)
NAN_BOXED(4600418652073550688,64,FLEN)
NAN_BOXED(4605704080004558885,64,FLEN)
NAN_BOXED(4601743473996315665,64,FLEN)
NAN_BOXED(4600418652073550688,64,FLEN)
NAN_BOXED(4605712588934252723,64,FLEN)
NAN_BOXED(4605532190403064457,64,FLEN)
NAN_BOXED(4604331651236281225,64,FLEN)
NAN_BOXED(4605712588934252723,64,FLEN)
NAN_BOXED(4605532190403064457,64,FLEN)
NAN_BOXED(4604331651236281225,64,FLEN)
NAN_BOXED(4605712588934252723,64,FLEN)
NAN_BOXED(4605532190403064457,64,FLEN)
NAN_BOXED(4604331651236281225,64,FLEN)
NAN_BOXED(4605712588934252723,64,FLEN)
NAN_BOXED(4605532190403064457,64,FLEN)
NAN_BOXED(4604331651236281225,64,FLEN)
NAN_BOXED(4605712588934252723,64,FLEN)
NAN_BOXED(4605532190403064457,64,FLEN)
NAN_BOXED(4604331651236281225,64,FLEN)
NAN_BOXED(4605795181388841787,64,FLEN)
NAN_BOXED(4607692417261342925,64,FLEN)
NAN_BOXED(4606658084208168668,64,FLEN)
NAN_BOXED(4605795181388841787,64,FLEN)
NAN_BOXED(4607692417261342925,64,FLEN)
NAN_BOXED(4606658084208168668,64,FLEN)
NAN_BOXED(4605795181388841787,64,FLEN)
NAN_BOXED(4607692417261342925,64,FLEN)
NAN_BOXED(4606658084208168668,64,FLEN)
NAN_BOXED(4605795181388841787,64,FLEN)
NAN_BOXED(4607692417261342925,64,FLEN)
NAN_BOXED(4606658084208168668,64,FLEN)
NAN_BOXED(4605795181388841787,64,FLEN)
NAN_BOXED(4607692417261342925,64,FLEN)
NAN_BOXED(4606658084208168668,64,FLEN)
NAN_BOXED(4605801041070331342,64,FLEN)
NAN_BOXED(4598272113549106933,64,FLEN)
NAN_BOXED(4596957909770381200,64,FLEN)
NAN_BOXED(4605801041070331342,64,FLEN)
NAN_BOXED(4598272113549106933,64,FLEN)
NAN_BOXED(4596957909770381200,64,FLEN)
NAN_BOXED(4605801041070331342,64,FLEN)
NAN_BOXED(4598272113549106933,64,FLEN)
NAN_BOXED(4596957909770381200,64,FLEN)
NAN_BOXED(4605801041070331342,64,FLEN)
NAN_BOXED(4598272113549106933,64,FLEN)
NAN_BOXED(4596957909770381200,64,FLEN)
NAN_BOXED(4605801041070331342,64,FLEN)
NAN_BOXED(4598272113549106933,64,FLEN)
NAN_BOXED(4596957909770381200,64,FLEN)
NAN_BOXED(4605822316372852966,64,FLEN)
NAN_BOXED(4602753763000903583,64,FLEN)
NAN_BOXED(4601445971110596326,64,FLEN)
NAN_BOXED(4605822316372852966,64,FLEN)
NAN_BOXED(4602753763000903583,64,FLEN)
NAN_BOXED(4601445971110596326,64,FLEN)
NAN_BOXED(4605822316372852966,64,FLEN)
NAN_BOXED(4602753763000903583,64,FLEN)
NAN_BOXED(4601445971110596326,64,FLEN)
NAN_BOXED(4605822316372852966,64,FLEN)
NAN_BOXED(4602753763000903583,64,FLEN)
NAN_BOXED(4601445971110596326,64,FLEN)
NAN_BOXED(4605822316372852966,64,FLEN)
NAN_BOXED(4602753763000903583,64,FLEN)
NAN_BOXED(4601445971110596326,64,FLEN)
NAN_BOXED(4605828633083503203,64,FLEN)
NAN_BOXED(4605789459609272144,64,FLEN)
NAN_BOXED(4604645036226462896,64,FLEN)
NAN_BOXED(4605828633083503203,64,FLEN)
NAN_BOXED(4605789459609272144,64,FLEN)
NAN_BOXED(4604645036226462896,64,FLEN)
NAN_BOXED(4605828633083503203,64,FLEN)
NAN_BOXED(4605789459609272144,64,FLEN)
NAN_BOXED(4604645036226462896,64,FLEN)
NAN_BOXED(4605828633083503203,64,FLEN)
NAN_BOXED(4605789459609272144,64,FLEN)
NAN_BOXED(4604645036226462896,64,FLEN)
NAN_BOXED(4605828633083503203,64,FLEN)
NAN_BOXED(4605789459609272144,64,FLEN)
NAN_BOXED(4604645036226462896,64,FLEN)
NAN_BOXED(4605855597076986552,64,FLEN)
NAN_BOXED(4600700416988352229,64,FLEN)
NAN_BOXED(4599665027365441974,64,FLEN)
NAN_BOXED(4605855597076986552,64,FLEN)
NAN_BOXED(4600700416988352229,64,FLEN)
NAN_BOXED(4599665027365441974,64,FLEN)
NAN_BOXED(4605855597076986552,64,FLEN)
NAN_BOXED(4600700416988352229,64,FLEN)
NAN_BOXED(4599665027365441974,64,FLEN)
NAN_BOXED(4605855597076986552,64,FLEN)
NAN_BOXED(4600700416988352229,64,FLEN)
NAN_BOXED(4599665027365441974,64,FLEN)
NAN_BOXED(4605855597076986552,64,FLEN)
NAN_BOXED(4600700416988352229,64,FLEN)
NAN_BOXED(4599665027365441974,64,FLEN)
NAN_BOXED(4605876747555487542,64,FLEN)
NAN_BOXED(4601559784208402338,64,FLEN)
NAN_BOXED(4600416326736779582,64,FLEN)
NAN_BOXED(4605876747555487542,64,FLEN)
NAN_BOXED(4601559784208402338,64,FLEN)
NAN_BOXED(4600416326736779582,64,FLEN)
NAN_BOXED(4605876747555487542,64,FLEN)
NAN_BOXED(4601559784208402338,64,FLEN)
NAN_BOXED(4600416326736779582,64,FLEN)
NAN_BOXED(4605876747555487542,64,FLEN)
NAN_BOXED(4601559784208402338,64,FLEN)
NAN_BOXED(4600416326736779582,64,FLEN)
NAN_BOXED(4605876747555487542,64,FLEN)
NAN_BOXED(4601559784208402338,64,FLEN)
NAN_BOXED(4600416326736779582,64,FLEN)
NAN_BOXED(4605926821146451843,64,FLEN)
NAN_BOXED(4607860475868456186,64,FLEN)
NAN_BOXED(4607093893864340660,64,FLEN)
NAN_BOXED(4605926821146451843,64,FLEN)
NAN_BOXED(4607860475868456186,64,FLEN)
NAN_BOXED(4607093893864340660,64,FLEN)
NAN_BOXED(4605926821146451843,64,FLEN)
NAN_BOXED(4607860475868456186,64,FLEN)
NAN_BOXED(4607093893864340660,64,FLEN)
NAN_BOXED(4605926821146451843,64,FLEN)
NAN_BOXED(4607860475868456186,64,FLEN)
NAN_BOXED(4607093893864340660,64,FLEN)
NAN_BOXED(4605926821146451843,64,FLEN)
NAN_BOXED(4607860475868456186,64,FLEN)
NAN_BOXED(4607093893864340660,64,FLEN)
NAN_BOXED(4605947783889427692,64,FLEN)
NAN_BOXED(4589390572273570227,64,FLEN)
NAN_BOXED(4588317478050516080,64,FLEN)
NAN_BOXED(4605947783889427692,64,FLEN)
NAN_BOXED(4589390572273570227,64,FLEN)
NAN_BOXED(4588317478050516080,64,FLEN)
NAN_BOXED(4605947783889427692,64,FLEN)
NAN_BOXED(4589390572273570227,64,FLEN)
NAN_BOXED(4588317478050516080,64,FLEN)
NAN_BOXED(4605947783889427692,64,FLEN)
NAN_BOXED(4589390572273570227,64,FLEN)
NAN_BOXED(4588317478050516080,64,FLEN)
NAN_BOXED(4605947783889427692,64,FLEN)
NAN_BOXED(4589390572273570227,64,FLEN)
NAN_BOXED(4588317478050516080,64,FLEN)
NAN_BOXED(4605950475593696272,64,FLEN)
NAN_BOXED(4593840587510393135,64,FLEN)
NAN_BOXED(4592731391429626944,64,FLEN)
NAN_BOXED(4605950475593696272,64,FLEN)
NAN_BOXED(4593840587510393135,64,FLEN)
NAN_BOXED(4592731391429626944,64,FLEN)
NAN_BOXED(4605950475593696272,64,FLEN)
NAN_BOXED(4593840587510393135,64,FLEN)
NAN_BOXED(4592731391429626944,64,FLEN)
NAN_BOXED(4605950475593696272,64,FLEN)
NAN_BOXED(4593840587510393135,64,FLEN)
NAN_BOXED(4592731391429626944,64,FLEN)
NAN_BOXED(4605950475593696272,64,FLEN)
NAN_BOXED(4593840587510393135,64,FLEN)
NAN_BOXED(4592731391429626944,64,FLEN)
NAN_BOXED(4605967128198286011,64,FLEN)
NAN_BOXED(4607370343079844982,64,FLEN)
NAN_BOXED(4606292265631285139,64,FLEN)
NAN_BOXED(4605967128198286011,64,FLEN)
NAN_BOXED(4607370343079844982,64,FLEN)
NAN_BOXED(4606292265631285139,64,FLEN)
NAN_BOXED(4605967128198286011,64,FLEN)
NAN_BOXED(4607370343079844982,64,FLEN)
NAN_BOXED(4606292265631285139,64,FLEN)
NAN_BOXED(4605967128198286011,64,FLEN)
NAN_BOXED(4607370343079844982,64,FLEN)
NAN_BOXED(4606292265631285139,64,FLEN)
NAN_BOXED(4605967128198286011,64,FLEN)
NAN_BOXED(4607370343079844982,64,FLEN)
NAN_BOXED(4606292265631285139,64,FLEN)
NAN_BOXED(4605990046548298558,64,FLEN)
NAN_BOXED(4604204623995179816,64,FLEN)
NAN_BOXED(4603406451959996866,64,FLEN)
NAN_BOXED(4605990046548298558,64,FLEN)
NAN_BOXED(4604204623995179816,64,FLEN)
NAN_BOXED(4603406451959996866,64,FLEN)
NAN_BOXED(4605990046548298558,64,FLEN)
NAN_BOXED(4604204623995179816,64,FLEN)
NAN_BOXED(4603406451959996866,64,FLEN)
NAN_BOXED(4605990046548298558,64,FLEN)
NAN_BOXED(4604204623995179816,64,FLEN)
NAN_BOXED(4603406451959996866,64,FLEN)
NAN_BOXED(4605990046548298558,64,FLEN)
NAN_BOXED(4604204623995179816,64,FLEN)
NAN_BOXED(4603406451959996866,64,FLEN)
NAN_BOXED(4606038444891215225,64,FLEN)
NAN_BOXED(4596074073509734685,64,FLEN)
NAN_BOXED(4595196959051385728,64,FLEN)
NAN_BOXED(4606038444891215225,64,FLEN)
NAN_BOXED(4596074073509734685,64,FLEN)
NAN_BOXED(4595196959051385728,64,FLEN)
NAN_BOXED(4606038444891215225,64,FLEN)
NAN_BOXED(4596074073509734685,64,FLEN)
NAN_BOXED(4595196959051385728,64,FLEN)
NAN_BOXED(4606038444891215225,64,FLEN)
NAN_BOXED(4596074073509734685,64,FLEN)
NAN_BOXED(4595196959051385728,64,FLEN)
NAN_BOXED(4606038444891215225,64,FLEN)
NAN_BOXED(4596074073509734685,64,FLEN)
NAN_BOXED(4595196959051385728,64,FLEN)
NAN_BOXED(4606039993155648288,64,FLEN)
NAN_BOXED(4549261638392684409,64,FLEN)
NAN_BOXED(4548586426679320576,64,FLEN)
NAN_BOXED(4606039993155648288,64,FLEN)
NAN_BOXED(4549261638392684409,64,FLEN)
NAN_BOXED(4548586426679320576,64,FLEN)
NAN_BOXED(4606039993155648288,64,FLEN)
NAN_BOXED(4549261638392684409,64,FLEN)
NAN_BOXED(4548586426679320576,64,FLEN)
NAN_BOXED(4606039993155648288,64,FLEN)
NAN_BOXED(4549261638392684409,64,FLEN)
NAN_BOXED(4548586426679320576,64,FLEN)
NAN_BOXED(4606039993155648288,64,FLEN)
NAN_BOXED(4549261638392684409,64,FLEN)
NAN_BOXED(4548586426679320576,64,FLEN)
NAN_BOXED(4606070071914059213,64,FLEN)
NAN_BOXED(4602110173371026709,64,FLEN)
NAN_BOXED(4601068051575993698,64,FLEN)
NAN_BOXED(4606070071914059213,64,FLEN)
NAN_BOXED(4602110173371026709,64,FLEN)
NAN_BOXED(4601068051575993698,64,FLEN)
NAN_BOXED(4606070071914059213,64,FLEN)
NAN_BOXED(4602110173371026709,64,FLEN)
NAN_BOXED(4601068051575993698,64,FLEN)
NAN_BOXED(4606070071914059213,64,FLEN)
NAN_BOXED(4602110173371026709,64,FLEN)
NAN_BOXED(4601068051575993698,64,FLEN)
NAN_BOXED(4606070071914059213,64,FLEN)
NAN_BOXED(4602110173371026709,64,FLEN)
NAN_BOXED(4601068051575993698,64,FLEN)
NAN_BOXED(4606101028917146248,64,FLEN)
NAN_BOXED(4607222517644203039,64,FLEN)
NAN_BOXED(4606171598199796532,64,FLEN)
NAN_BOXED(4606101028917146248,64,FLEN)
NAN_BOXED(4607222517644203039,64,FLEN)
NAN_BOXED(4606171598199796532,64,FLEN)
NAN_BOXED(4606101028917146248,64,FLEN)
NAN_BOXED(4607222517644203039,64,FLEN)
NAN_BOXED(4606171598199796532,64,FLEN)
NAN_BOXED(4606101028917146248,64,FLEN)
NAN_BOXED(4607222517644203039,64,FLEN)
NAN_BOXED(4606171598199796532,64,FLEN)
NAN_BOXED(4606101028917146248,64,FLEN)
NAN_BOXED(4607222517644203039,64,FLEN)
NAN_BOXED(4606171598199796532,64,FLEN)
NAN_BOXED(4606106182947681734,64,FLEN)
NAN_BOXED(4600951467157823158,64,FLEN)
NAN_BOXED(4600081626003259832,64,FLEN)
NAN_BOXED(4606106182947681734,64,FLEN)
NAN_BOXED(4600951467157823158,64,FLEN)
NAN_BOXED(4600081626003259832,64,FLEN)
NAN_BOXED(4606106182947681734,64,FLEN)
NAN_BOXED(4600951467157823158,64,FLEN)
NAN_BOXED(4600081626003259832,64,FLEN)
NAN_BOXED(4606106182947681734,64,FLEN)
NAN_BOXED(4600951467157823158,64,FLEN)
NAN_BOXED(4600081626003259832,64,FLEN)
NAN_BOXED(4606106182947681734,64,FLEN)
NAN_BOXED(4600951467157823158,64,FLEN)
NAN_BOXED(4600081626003259832,64,FLEN)
NAN_BOXED(4606113143807037147,64,FLEN)
NAN_BOXED(4604321423149050879,64,FLEN)
NAN_BOXED(4603591786596176578,64,FLEN)
NAN_BOXED(4606113143807037147,64,FLEN)
NAN_BOXED(4604321423149050879,64,FLEN)
NAN_BOXED(4603591786596176578,64,FLEN)
NAN_BOXED(4606113143807037147,64,FLEN)
NAN_BOXED(4604321423149050879,64,FLEN)
NAN_BOXED(4603591786596176578,64,FLEN)
NAN_BOXED(4606113143807037147,64,FLEN)
NAN_BOXED(4604321423149050879,64,FLEN)
NAN_BOXED(4603591786596176578,64,FLEN)
NAN_BOXED(4606113143807037147,64,FLEN)
NAN_BOXED(4604321423149050879,64,FLEN)
NAN_BOXED(4603591786596176578,64,FLEN)
NAN_BOXED(4606127501332730226,64,FLEN)
NAN_BOXED(4588571887363445555,64,FLEN)
NAN_BOXED(4587586788606706064,64,FLEN)
NAN_BOXED(4606127501332730226,64,FLEN)
NAN_BOXED(4588571887363445555,64,FLEN)
NAN_BOXED(4587586788606706064,64,FLEN)
NAN_BOXED(4606127501332730226,64,FLEN)
NAN_BOXED(4588571887363445555,64,FLEN)
NAN_BOXED(4587586788606706064,64,FLEN)
NAN_BOXED(4606127501332730226,64,FLEN)
NAN_BOXED(4588571887363445555,64,FLEN)
NAN_BOXED(4587586788606706064,64,FLEN)
NAN_BOXED(4606127501332730226,64,FLEN)
NAN_BOXED(4588571887363445555,64,FLEN)
NAN_BOXED(4587586788606706064,64,FLEN)
NAN_BOXED(4606130158214132178,64,FLEN)
NAN_BOXED(4600550789691849382,64,FLEN)
NAN_BOXED(4599747134858420046,64,FLEN)
NAN_BOXED(4606130158214132178,64,FLEN)
NAN_BOXED(4600550789691849382,64,FLEN)
NAN_BOXED(4599747134858420046,64,FLEN)
NAN_BOXED(4606130158214132178,64,FLEN)
NAN_BOXED(4600550789691849382,64,FLEN)
NAN_BOXED(4599747134858420046,64,FLEN)
NAN_BOXED(4606130158214132178,64,FLEN)
NAN_BOXED(4600550789691849382,64,FLEN)
NAN_BOXED(4599747134858420046,64,FLEN)
NAN_BOXED(4606130158214132178,64,FLEN)
NAN_BOXED(4600550789691849382,64,FLEN)
NAN_BOXED(4599747134858420046,64,FLEN)
NAN_BOXED(4606150263288726259,64,FLEN)
NAN_BOXED(4599550666157964322,64,FLEN)
NAN_BOXED(4598876972837077942,64,FLEN)
NAN_BOXED(4606150263288726259,64,FLEN)
NAN_BOXED(4599550666157964322,64,FLEN)
NAN_BOXED(4598876972837077942,64,FLEN)
NAN_BOXED(4606150263288726259,64,FLEN)
NAN_BOXED(4599550666157964322,64,FLEN)
NAN_BOXED(4598876972837077942,64,FLEN)
NAN_BOXED(4606150263288726259,64,FLEN)
NAN_BOXED(4599550666157964322,64,FLEN)
NAN_BOXED(4598876972837077942,64,FLEN)
NAN_BOXED(4606150263288726259,64,FLEN)
NAN_BOXED(4599550666157964322,64,FLEN)
NAN_BOXED(4598876972837077942,64,FLEN)
NAN_BOXED(4606172336532850843,64,FLEN)
NAN_BOXED(4599383030682966666,64,FLEN)
NAN_BOXED(4598742543604671430,64,FLEN)
NAN_BOXED(4606172336532850843,64,FLEN)
NAN_BOXED(4599383030682966666,64,FLEN)
NAN_BOXED(4598742543604671430,64,FLEN)
NAN_BOXED(4606172336532850843,64,FLEN)
NAN_BOXED(4599383030682966666,64,FLEN)
NAN_BOXED(4598742543604671430,64,FLEN)
NAN_BOXED(4606172336532850843,64,FLEN)
NAN_BOXED(4599383030682966666,64,FLEN)
NAN_BOXED(4598742543604671430,64,FLEN)
NAN_BOXED(4606172336532850843,64,FLEN)
NAN_BOXED(4599383030682966666,64,FLEN)
NAN_BOXED(4598742543604671430,64,FLEN)
NAN_BOXED(4606175446734849690,64,FLEN)
NAN_BOXED(4603868271693723518,64,FLEN)
NAN_BOXED(4603231809202232411,64,FLEN)
NAN_BOXED(4606175446734849690,64,FLEN)
NAN_BOXED(4603868271693723518,64,FLEN)
NAN_BOXED(4603231809202232411,64,FLEN)
NAN_BOXED(4606175446734849690,64,FLEN)
NAN_BOXED(4603868271693723518,64,FLEN)
NAN_BOXED(4603231809202232411,64,FLEN)
NAN_BOXED(4606175446734849690,64,FLEN)
NAN_BOXED(4603868271693723518,64,FLEN)
NAN_BOXED(4603231809202232411,64,FLEN)
NAN_BOXED(4606175446734849690,64,FLEN)
NAN_BOXED(4603868271693723518,64,FLEN)
NAN_BOXED(4603231809202232411,64,FLEN)
NAN_BOXED(4606187015251696892,64,FLEN)
NAN_BOXED(4601486607938104472,64,FLEN)
NAN_BOXED(4600622958030360574,64,FLEN)
NAN_BOXED(4606187015251696892,64,FLEN)
NAN_BOXED(4601486607938104472,64,FLEN)
NAN_BOXED(4600622958030360574,64,FLEN)
NAN_BOXED(4606187015251696892,64,FLEN)
NAN_BOXED(4601486607938104472,64,FLEN)
NAN_BOXED(4600622958030360574,64,FLEN)
NAN_BOXED(4606187015251696892,64,FLEN)
NAN_BOXED(4601486607938104472,64,FLEN)
NAN_BOXED(4600622958030360574,64,FLEN)
NAN_BOXED(4606187015251696892,64,FLEN)
NAN_BOXED(4601486607938104472,64,FLEN)
NAN_BOXED(4600622958030360574,64,FLEN)
NAN_BOXED(4606196954620553041,64,FLEN)
NAN_BOXED(4601699616400062670,64,FLEN)
NAN_BOXED(4600821285329295332,64,FLEN)
NAN_BOXED(4606196954620553041,64,FLEN)
NAN_BOXED(4601699616400062670,64,FLEN)
NAN_BOXED(4600821285329295332,64,FLEN)
NAN_BOXED(4606196954620553041,64,FLEN)
NAN_BOXED(4601699616400062670,64,FLEN)
NAN_BOXED(4600821285329295332,64,FLEN)
NAN_BOXED(4606196954620553041,64,FLEN)
NAN_BOXED(4601699616400062670,64,FLEN)
NAN_BOXED(4600821285329295332,64,FLEN)
NAN_BOXED(4606196954620553041,64,FLEN)
NAN_BOXED(4601699616400062670,64,FLEN)
NAN_BOXED(4600821285329295332,64,FLEN)
NAN_BOXED(4606232776563336705,64,FLEN)
NAN_BOXED(4600808960551981322,64,FLEN)
NAN_BOXED(4600056460253941636,64,FLEN)
NAN_BOXED(4606232776563336705,64,FLEN)
NAN_BOXED(4600808960551981322,64,FLEN)
NAN_BOXED(4600056460253941636,64,FLEN)
NAN_BOXED(4606232776563336705,64,FLEN)
NAN_BOXED(4600808960551981322,64,FLEN)
NAN_BOXED(4600056460253941636,64,FLEN)
NAN_BOXED(4606232776563336705,64,FLEN)
NAN_BOXED(4600808960551981322,64,FLEN)
NAN_BOXED(4600056460253941636,64,FLEN)
NAN_BOXED(4606232776563336705,64,FLEN)
NAN_BOXED(4600808960551981322,64,FLEN)
NAN_BOXED(4600056460253941636,64,FLEN)
NAN_BOXED(4606264312180033886,64,FLEN)
NAN_BOXED(4595761678818352177,64,FLEN)
NAN_BOXED(4595089585154929224,64,FLEN)
NAN_BOXED(4606264312180033886,64,FLEN)
NAN_BOXED(4595761678818352177,64,FLEN)
NAN_BOXED(4595089585154929224,64,FLEN)
NAN_BOXED(4606264312180033886,64,FLEN)
NAN_BOXED(4595761678818352177,64,FLEN)
NAN_BOXED(4595089585154929224,64,FLEN)
NAN_BOXED(4606264312180033886,64,FLEN)
NAN_BOXED(4595761678818352177,64,FLEN)
NAN_BOXED(4595089585154929224,64,FLEN)
NAN_BOXED(4606264312180033886,64,FLEN)
NAN_BOXED(4595761678818352177,64,FLEN)
NAN_BOXED(4595089585154929224,64,FLEN)
NAN_BOXED(4606280302569205572,64,FLEN)
NAN_BOXED(4604561703245669420,64,FLEN)
NAN_BOXED(4603922064836326222,64,FLEN)
NAN_BOXED(4606280302569205572,64,FLEN)
NAN_BOXED(4604561703245669420,64,FLEN)
NAN_BOXED(4603922064836326222,64,FLEN)
NAN_BOXED(4606280302569205572,64,FLEN)
NAN_BOXED(4604561703245669420,64,FLEN)
NAN_BOXED(4603922064836326222,64,FLEN)
NAN_BOXED(4606280302569205572,64,FLEN)
NAN_BOXED(4604561703245669420,64,FLEN)
NAN_BOXED(4603922064836326222,64,FLEN)
NAN_BOXED(4606280302569205572,64,FLEN)
NAN_BOXED(4604561703245669420,64,FLEN)
NAN_BOXED(4603922064836326222,64,FLEN)
NAN_BOXED(4606280381334690184,64,FLEN)
NAN_BOXED(4604505152984891800,64,FLEN)
NAN_BOXED(4603871233721636322,64,FLEN)
NAN_BOXED(4606280381334690184,64,FLEN)
NAN_BOXED(4604505152984891800,64,FLEN)
NAN_BOXED(4603871233721636322,64,FLEN)
NAN_BOXED(4606280381334690184,64,FLEN)
NAN_BOXED(4604505152984891800,64,FLEN)
NAN_BOXED(4603871233721636322,64,FLEN)
NAN_BOXED(4606280381334690184,64,FLEN)
NAN_BOXED(4604505152984891800,64,FLEN)
NAN_BOXED(4603871233721636322,64,FLEN)
NAN_BOXED(4606280381334690184,64,FLEN)
NAN_BOXED(4604505152984891800,64,FLEN)
NAN_BOXED(4603871233721636322,64,FLEN)
NAN_BOXED(4606337720283450409,64,FLEN)
NAN_BOXED(4606154876160358764,64,FLEN)
NAN_BOXED(4605406540977041236,64,FLEN)
NAN_BOXED(4606337720283450409,64,FLEN)
NAN_BOXED(4606154876160358764,64,FLEN)
NAN_BOXED(4605406540977041236,64,FLEN)
NAN_BOXED(4606337720283450409,64,FLEN)
NAN_BOXED(4606154876160358764,64,FLEN)
NAN_BOXED(4605406540977041236,64,FLEN)
NAN_BOXED(4606337720283450409,64,FLEN)
NAN_BOXED(4606154876160358764,64,FLEN)
NAN_BOXED(4605406540977041236,64,FLEN)
NAN_BOXED(4606337720283450409,64,FLEN)
NAN_BOXED(4606154876160358764,64,FLEN)
NAN_BOXED(4605406540977041236,64,FLEN)
NAN_BOXED(4606338634384741816,64,FLEN)
NAN_BOXED(4601714316311263502,64,FLEN)
NAN_BOXED(4600960885452060922,64,FLEN)
NAN_BOXED(4606338634384741816,64,FLEN)
NAN_BOXED(4601714316311263502,64,FLEN)
NAN_BOXED(4600960885452060922,64,FLEN)
NAN_BOXED(4606338634384741816,64,FLEN)
NAN_BOXED(4601714316311263502,64,FLEN)
NAN_BOXED(4600960885452060922,64,FLEN)
NAN_BOXED(4606338634384741816,64,FLEN)
NAN_BOXED(4601714316311263502,64,FLEN)
NAN_BOXED(4600960885452060922,64,FLEN)
NAN_BOXED(4606338634384741816,64,FLEN)
NAN_BOXED(4601714316311263502,64,FLEN)
NAN_BOXED(4600960885452060922,64,FLEN)
NAN_BOXED(4606343536970640133,64,FLEN)
NAN_BOXED(4597102575173048700,64,FLEN)
NAN_BOXED(4596363593639845288,64,FLEN)
NAN_BOXED(4606343536970640133,64,FLEN)
NAN_BOXED(4597102575173048700,64,FLEN)
NAN_BOXED(4596363593639845288,64,FLEN)
NAN_BOXED(4606343536970640133,64,FLEN)
NAN_BOXED(4597102575173048700,64,FLEN)
NAN_BOXED(4596363593639845288,64,FLEN)
NAN_BOXED(4606343536970640133,64,FLEN)
NAN_BOXED(4597102575173048700,64,FLEN)
NAN_BOXED(4596363593639845288,64,FLEN)
NAN_BOXED(4606343536970640133,64,FLEN)
NAN_BOXED(4597102575173048700,64,FLEN)
NAN_BOXED(4596363593639845288,64,FLEN)
NAN_BOXED(4606370830316554636,64,FLEN)
NAN_BOXED(4594117555810156391,64,FLEN)
NAN_BOXED(4593671541627226736,64,FLEN)
NAN_BOXED(4606370830316554636,64,FLEN)
NAN_BOXED(4594117555810156391,64,FLEN)
NAN_BOXED(4593671541627226736,64,FLEN)
NAN_BOXED(4606370830316554636,64,FLEN)
NAN_BOXED(4594117555810156391,64,FLEN)
NAN_BOXED(4593671541627226736,64,FLEN)
NAN_BOXED(4606370830316554636,64,FLEN)
NAN_BOXED(4594117555810156391,64,FLEN)
NAN_BOXED(4593671541627226736,64,FLEN)
NAN_BOXED(4606370830316554636,64,FLEN)
NAN_BOXED(4594117555810156391,64,FLEN)
NAN_BOXED(4593671541627226736,64,FLEN)
NAN_BOXED(4606401771980942474,64,FLEN)
NAN_BOXED(4581965830741287557,64,FLEN)
NAN_BOXED(4581419068571471648,64,FLEN)
NAN_BOXED(4606401771980942474,64,FLEN)
NAN_BOXED(4581965830741287557,64,FLEN)
NAN_BOXED(4581419068571471648,64,FLEN)
NAN_BOXED(4606401771980942474,64,FLEN)
NAN_BOXED(4581965830741287557,64,FLEN)
NAN_BOXED(4581419068571471648,64,FLEN)
NAN_BOXED(4606401771980942474,64,FLEN)
NAN_BOXED(4581965830741287557,64,FLEN)
NAN_BOXED(4581419068571471648,64,FLEN)
NAN_BOXED(4606401771980942474,64,FLEN)
NAN_BOXED(4581965830741287557,64,FLEN)
NAN_BOXED(4581419068571471648,64,FLEN)
NAN_BOXED(4606411011384176435,64,FLEN)
NAN_BOXED(4596403610808927193,64,FLEN)
NAN_BOXED(4595783930037355704,64,FLEN)
NAN_BOXED(4606411011384176435,64,FLEN)
NAN_BOXED(4596403610808927193,64,FLEN)
NAN_BOXED(4595783930037355704,64,FLEN)
NAN_BOXED(4606411011384176435,64,FLEN)
NAN_BOXED(4596403610808927193,64,FLEN)
NAN_BOXED(4595783930037355704,64,FLEN)
NAN_BOXED(4606411011384176435,64,FLEN)
NAN_BOXED(4596403610808927193,64,FLEN)
NAN_BOXED(4595783930037355704,64,FLEN)
NAN_BOXED(4606411011384176435,64,FLEN)
NAN_BOXED(4596403610808927193,64,FLEN)
NAN_BOXED(4595783930037355704,64,FLEN)
NAN_BOXED(4606429925151019894,64,FLEN)
NAN_BOXED(4601178040571530082,64,FLEN)
NAN_BOXED(4600550927335905500,64,FLEN)
NAN_BOXED(4606429925151019894,64,FLEN)
NAN_BOXED(4601178040571530082,64,FLEN)
NAN_BOXED(4600550927335905500,64,FLEN)
NAN_BOXED(4606429925151019894,64,FLEN)
NAN_BOXED(4601178040571530082,64,FLEN)
NAN_BOXED(4600550927335905500,64,FLEN)
NAN_BOXED(4606429925151019894,64,FLEN)
NAN_BOXED(4601178040571530082,64,FLEN)
NAN_BOXED(4600550927335905500,64,FLEN)
NAN_BOXED(4606429925151019894,64,FLEN)
NAN_BOXED(4601178040571530082,64,FLEN)
NAN_BOXED(4600550927335905500,64,FLEN)
NAN_BOXED(4606516146673889353,64,FLEN)
NAN_BOXED(4602841436928570081,64,FLEN)
NAN_BOXED(4602313724541012448,64,FLEN)
NAN_BOXED(4606516146673889353,64,FLEN)
NAN_BOXED(4602841436928570081,64,FLEN)
NAN_BOXED(4602313724541012448,64,FLEN)
NAN_BOXED(4606516146673889353,64,FLEN)
NAN_BOXED(4602841436928570081,64,FLEN)
NAN_BOXED(4602313724541012448,64,FLEN)
NAN_BOXED(4606516146673889353,64,FLEN)
NAN_BOXED(4602841436928570081,64,FLEN)
NAN_BOXED(4602313724541012448,64,FLEN)
NAN_BOXED(4606516146673889353,64,FLEN)
NAN_BOXED(4602841436928570081,64,FLEN)
NAN_BOXED(4602313724541012448,64,FLEN)
NAN_BOXED(4606548512666438880,64,FLEN)
NAN_BOXED(4606691278445717201,64,FLEN)
NAN_BOXED(4606091937649735147,64,FLEN)
NAN_BOXED(4606548512666438880,64,FLEN)
NAN_BOXED(4606691278445717201,64,FLEN)
NAN_BOXED(4606091937649735147,64,FLEN)
NAN_BOXED(4606548512666438880,64,FLEN)
NAN_BOXED(4606691278445717201,64,FLEN)
NAN_BOXED(4606091937649735147,64,FLEN)
NAN_BOXED(4606548512666438880,64,FLEN)
NAN_BOXED(4606691278445717201,64,FLEN)
NAN_BOXED(4606091937649735147,64,FLEN)
NAN_BOXED(4606548512666438880,64,FLEN)
NAN_BOXED(4606691278445717201,64,FLEN)
NAN_BOXED(4606091937649735147,64,FLEN)
NAN_BOXED(4606569138910882854,64,FLEN)
NAN_BOXED(4607498992764272267,64,FLEN)
NAN_BOXED(4607159177224470061,64,FLEN)
NAN_BOXED(4606569138910882854,64,FLEN)
NAN_BOXED(4607498992764272267,64,FLEN)
NAN_BOXED(4607159177224470061,64,FLEN)
NAN_BOXED(4606569138910882854,64,FLEN)
NAN_BOXED(4607498992764272267,64,FLEN)
NAN_BOXED(4607159177224470061,64,FLEN)
NAN_BOXED(4606569138910882854,64,FLEN)
NAN_BOXED(4607498992764272267,64,FLEN)
NAN_BOXED(4607159177224470061,64,FLEN)
NAN_BOXED(4606569138910882854,64,FLEN)
NAN_BOXED(4607498992764272267,64,FLEN)
NAN_BOXED(4607159177224470061,64,FLEN)
NAN_BOXED(4606581428773463844,64,FLEN)
NAN_BOXED(4606557247722693384,64,FLEN)
NAN_BOXED(4605997971171298452,64,FLEN)
NAN_BOXED(4606581428773463844,64,FLEN)
NAN_BOXED(4606557247722693384,64,FLEN)
NAN_BOXED(4605997971171298452,64,FLEN)
NAN_BOXED(4606581428773463844,64,FLEN)
NAN_BOXED(4606557247722693384,64,FLEN)
NAN_BOXED(4605997971171298452,64,FLEN)
NAN_BOXED(4606581428773463844,64,FLEN)
NAN_BOXED(4606557247722693384,64,FLEN)
NAN_BOXED(4605997971171298452,64,FLEN)
NAN_BOXED(4606581428773463844,64,FLEN)
NAN_BOXED(4606557247722693384,64,FLEN)
NAN_BOXED(4605997971171298452,64,FLEN)
NAN_BOXED(4606608929075273315,64,FLEN)
NAN_BOXED(4596856121206815919,64,FLEN)
NAN_BOXED(4596366618670723828,64,FLEN)
NAN_BOXED(4606608929075273315,64,FLEN)
NAN_BOXED(4596856121206815919,64,FLEN)
NAN_BOXED(4596366618670723828,64,FLEN)
NAN_BOXED(4606608929075273315,64,FLEN)
NAN_BOXED(4596856121206815919,64,FLEN)
NAN_BOXED(4596366618670723828,64,FLEN)
NAN_BOXED(4606608929075273315,64,FLEN)
NAN_BOXED(4596856121206815919,64,FLEN)
NAN_BOXED(4596366618670723828,64,FLEN)
NAN_BOXED(4606608929075273315,64,FLEN)
NAN_BOXED(4596856121206815919,64,FLEN)
NAN_BOXED(4596366618670723828,64,FLEN)
NAN_BOXED(4606697632071562212,64,FLEN)
NAN_BOXED(4603669067035778245,64,FLEN)
NAN_BOXED(4603373376413618387,64,FLEN)
NAN_BOXED(4606697632071562212,64,FLEN)
NAN_BOXED(4603669067035778245,64,FLEN)
NAN_BOXED(4603373376413618387,64,FLEN)
NAN_BOXED(4606697632071562212,64,FLEN)
NAN_BOXED(4603669067035778245,64,FLEN)
NAN_BOXED(4603373376413618387,64,FLEN)
NAN_BOXED(4606697632071562212,64,FLEN)
NAN_BOXED(4603669067035778245,64,FLEN)
NAN_BOXED(4603373376413618387,64,FLEN)
NAN_BOXED(4606697632071562212,64,FLEN)
NAN_BOXED(4603669067035778245,64,FLEN)
NAN_BOXED(4603373376413618387,64,FLEN)
NAN_BOXED(4606823288769639977,64,FLEN)
NAN_BOXED(4598194024364318973,64,FLEN)
NAN_BOXED(4597852199602448356,64,FLEN)
NAN_BOXED(4606823288769639977,64,FLEN)
NAN_BOXED(4598194024364318973,64,FLEN)
NAN_BOXED(4597852199602448356,64,FLEN)
NAN_BOXED(4606823288769639977,64,FLEN)
NAN_BOXED(4598194024364318973,64,FLEN)
NAN_BOXED(4597852199602448356,64,FLEN)
NAN_BOXED(4606823288769639977,64,FLEN)
NAN_BOXED(4598194024364318973,64,FLEN)
NAN_BOXED(4597852199602448356,64,FLEN)
NAN_BOXED(4606823288769639977,64,FLEN)
NAN_BOXED(4598194024364318973,64,FLEN)
NAN_BOXED(4597852199602448356,64,FLEN)
NAN_BOXED(4606863245061883278,64,FLEN)
NAN_BOXED(4607282825390376802,64,FLEN)
NAN_BOXED(4607056942346556702,64,FLEN)
NAN_BOXED(4606863245061883278,64,FLEN)
NAN_BOXED(4607282825390376802,64,FLEN)
NAN_BOXED(4607056942346556702,64,FLEN)
NAN_BOXED(4606863245061883278,64,FLEN)
NAN_BOXED(4607282825390376802,64,FLEN)
NAN_BOXED(4607056942346556702,64,FLEN)
NAN_BOXED(4606863245061883278,64,FLEN)
NAN_BOXED(4607282825390376802,64,FLEN)
NAN_BOXED(4607056942346556702,64,FLEN)
NAN_BOXED(4606863245061883278,64,FLEN)
NAN_BOXED(4607282825390376802,64,FLEN)
NAN_BOXED(4607056942346556702,64,FLEN)
NAN_BOXED(4606887512429642434,64,FLEN)
NAN_BOXED(4604068463212263850,64,FLEN)
NAN_BOXED(4603875511435533499,64,FLEN)
NAN_BOXED(4606887512429642434,64,FLEN)
NAN_BOXED(4604068463212263850,64,FLEN)
NAN_BOXED(4603875511435533499,64,FLEN)
NAN_BOXED(4606887512429642434,64,FLEN)
NAN_BOXED(4604068463212263850,64,FLEN)
NAN_BOXED(4603875511435533499,64,FLEN)
NAN_BOXED(4606887512429642434,64,FLEN)
NAN_BOXED(4604068463212263850,64,FLEN)
NAN_BOXED(4603875511435533499,64,FLEN)
NAN_BOXED(4606887512429642434,64,FLEN)
NAN_BOXED(4604068463212263850,64,FLEN)
NAN_BOXED(4603875511435533499,64,FLEN)
NAN_BOXED(4606887768558876636,64,FLEN)
NAN_BOXED(4605873360173163191,64,FLEN)
NAN_BOXED(4605621532837252031,64,FLEN)
NAN_BOXED(4606887768558876636,64,FLEN)
NAN_BOXED(4605873360173163191,64,FLEN)
NAN_BOXED(4605621532837252031,64,FLEN)
NAN_BOXED(4606887768558876636,64,FLEN)
NAN_BOXED(4605873360173163191,64,FLEN)
NAN_BOXED(4605621532837252031,64,FLEN)
NAN_BOXED(4606887768558876636,64,FLEN)
NAN_BOXED(4605873360173163191,64,FLEN)
NAN_BOXED(4605621532837252031,64,FLEN)
NAN_BOXED(4606887768558876636,64,FLEN)
NAN_BOXED(4605873360173163191,64,FLEN)
NAN_BOXED(4605621532837252031,64,FLEN)
NAN_BOXED(4606892559036493716,64,FLEN)
NAN_BOXED(4602182484558334579,64,FLEN)
NAN_BOXED(4601908597288575524,64,FLEN)
NAN_BOXED(4606892559036493716,64,FLEN)
NAN_BOXED(4602182484558334579,64,FLEN)
NAN_BOXED(4601908597288575524,64,FLEN)
NAN_BOXED(4606892559036493716,64,FLEN)
NAN_BOXED(4602182484558334579,64,FLEN)
NAN_BOXED(4601908597288575524,64,FLEN)
NAN_BOXED(4606892559036493716,64,FLEN)
NAN_BOXED(4602182484558334579,64,FLEN)
NAN_BOXED(4601908597288575524,64,FLEN)
NAN_BOXED(4606892559036493716,64,FLEN)
NAN_BOXED(4602182484558334579,64,FLEN)
NAN_BOXED(4601908597288575524,64,FLEN)
NAN_BOXED(4606907917965319502,64,FLEN)
NAN_BOXED(4602489571778442763,64,FLEN)
NAN_BOXED(4602220838393337592,64,FLEN)
NAN_BOXED(4606907917965319502,64,FLEN)
NAN_BOXED(4602489571778442763,64,FLEN)
NAN_BOXED(4602220838393337592,64,FLEN)
NAN_BOXED(4606907917965319502,64,FLEN)
NAN_BOXED(4602489571778442763,64,FLEN)
NAN_BOXED(4602220838393337592,64,FLEN)
NAN_BOXED(4606907917965319502,64,FLEN)
NAN_BOXED(4602489571778442763,64,FLEN)
NAN_BOXED(4602220838393337592,64,FLEN)
NAN_BOXED(4606907917965319502,64,FLEN)
NAN_BOXED(4602489571778442763,64,FLEN)
NAN_BOXED(4602220838393337592,64,FLEN)
NAN_BOXED(4606911188084680253,64,FLEN)
NAN_BOXED(4597579199694633419,64,FLEN)
NAN_BOXED(4597325916721527008,64,FLEN)
NAN_BOXED(4606911188084680253,64,FLEN)
NAN_BOXED(4597579199694633419,64,FLEN)
NAN_BOXED(4597325916721527008,64,FLEN)
NAN_BOXED(4606911188084680253,64,FLEN)
NAN_BOXED(4597579199694633419,64,FLEN)
NAN_BOXED(4597325916721527008,64,FLEN)
NAN_BOXED(4606911188084680253,64,FLEN)
NAN_BOXED(4597579199694633419,64,FLEN)
NAN_BOXED(4597325916721527008,64,FLEN)
NAN_BOXED(4606911188084680253,64,FLEN)
NAN_BOXED(4597579199694633419,64,FLEN)
NAN_BOXED(4597325916721527008,64,FLEN)
NAN_BOXED(4606913321215775637,64,FLEN)
NAN_BOXED(4574213468774678665,64,FLEN)
NAN_BOXED(4573987504503578496,64,FLEN)
NAN_BOXED(4606913321215775637,64,FLEN)
NAN_BOXED(4574213468774678665,64,FLEN)
NAN_BOXED(4573987504503578496,64,FLEN)
NAN_BOXED(4606913321215775637,64,FLEN)
NAN_BOXED(4574213468774678665,64,FLEN)
NAN_BOXED(4573987504503578496,64,FLEN)
NAN_BOXED(4606913321215775637,64,FLEN)
NAN_BOXED(4574213468774678665,64,FLEN)
NAN_BOXED(4573987504503578496,64,FLEN)
NAN_BOXED(4606913321215775637,64,FLEN)
NAN_BOXED(4574213468774678665,64,FLEN)
NAN_BOXED(4573987504503578496,64,FLEN)
NAN_BOXED(4606926416359412077,64,FLEN)
NAN_BOXED(4604095701178603096,64,FLEN)
NAN_BOXED(4603927429365709328,64,FLEN)
NAN_BOXED(4606926416359412077,64,FLEN)
NAN_BOXED(4604095701178603096,64,FLEN)
NAN_BOXED(4603927429365709328,64,FLEN)
NAN_BOXED(4606926416359412077,64,FLEN)
NAN_BOXED(4604095701178603096,64,FLEN)
NAN_BOXED(4603927429365709328,64,FLEN)
NAN_BOXED(4606926416359412077,64,FLEN)
NAN_BOXED(4604095701178603096,64,FLEN)
NAN_BOXED(4603927429365709328,64,FLEN)
NAN_BOXED(4606926416359412077,64,FLEN)
NAN_BOXED(4604095701178603096,64,FLEN)
NAN_BOXED(4603927429365709328,64,FLEN)
NAN_BOXED(4606930096493624409,64,FLEN)
NAN_BOXED(4590497554017907005,64,FLEN)
NAN_BOXED(4590334148100047272,64,FLEN)
NAN_BOXED(4606930096493624409,64,FLEN)
NAN_BOXED(4590497554017907005,64,FLEN)
NAN_BOXED(4590334148100047272,64,FLEN)
NAN_BOXED(4606930096493624409,64,FLEN)
NAN_BOXED(4590497554017907005,64,FLEN)
NAN_BOXED(4590334148100047272,64,FLEN)
NAN_BOXED(4606930096493624409,64,FLEN)
NAN_BOXED(4590497554017907005,64,FLEN)
NAN_BOXED(4590334148100047272,64,FLEN)
NAN_BOXED(4606930096493624409,64,FLEN)
NAN_BOXED(4590497554017907005,64,FLEN)
NAN_BOXED(4590334148100047272,64,FLEN)
NAN_BOXED(4606968374622407061,64,FLEN)
NAN_BOXED(4605394463220780962,64,FLEN)
NAN_BOXED(4605222907442809388,64,FLEN)
NAN_BOXED(4606968374622407061,64,FLEN)
NAN_BOXED(4605394463220780962,64,FLEN)
NAN_BOXED(4605222907442809388,64,FLEN)
NAN_BOXED(4606968374622407061,64,FLEN)
NAN_BOXED(4605394463220780962,64,FLEN)
NAN_BOXED(4605222907442809388,64,FLEN)
NAN_BOXED(4606968374622407061,64,FLEN)
NAN_BOXED(4605394463220780962,64,FLEN)
NAN_BOXED(4605222907442809388,64,FLEN)
NAN_BOXED(4606968374622407061,64,FLEN)
NAN_BOXED(4605394463220780962,64,FLEN)
NAN_BOXED(4605222907442809388,64,FLEN)
NAN_BOXED(4607008275999196212,64,FLEN)
NAN_BOXED(4602273864743991598,64,FLEN)
NAN_BOXED(4602107551224661412,64,FLEN)
NAN_BOXED(4607008275999196212,64,FLEN)
NAN_BOXED(4602273864743991598,64,FLEN)
NAN_BOXED(4602107551224661412,64,FLEN)
NAN_BOXED(4607008275999196212,64,FLEN)
NAN_BOXED(4602273864743991598,64,FLEN)
NAN_BOXED(4602107551224661412,64,FLEN)
NAN_BOXED(4607008275999196212,64,FLEN)
NAN_BOXED(4602273864743991598,64,FLEN)
NAN_BOXED(4602107551224661412,64,FLEN)
NAN_BOXED(4607008275999196212,64,FLEN)
NAN_BOXED(4602273864743991598,64,FLEN)
NAN_BOXED(4602107551224661412,64,FLEN)
NAN_BOXED(4607046832123579269,64,FLEN)
NAN_BOXED(4606854779950642830,64,FLEN)
NAN_BOXED(4606724125269312419,64,FLEN)
NAN_BOXED(4607046832123579269,64,FLEN)
NAN_BOXED(4606854779950642830,64,FLEN)
NAN_BOXED(4606724125269312419,64,FLEN)
NAN_BOXED(4607046832123579269,64,FLEN)
NAN_BOXED(4606854779950642830,64,FLEN)
NAN_BOXED(4606724125269312419,64,FLEN)
NAN_BOXED(4607046832123579269,64,FLEN)
NAN_BOXED(4606854779950642830,64,FLEN)
NAN_BOXED(4606724125269312419,64,FLEN)
NAN_BOXED(4607046832123579269,64,FLEN)
NAN_BOXED(4606854779950642830,64,FLEN)
NAN_BOXED(4606724125269312419,64,FLEN)
NAN_BOXED(4607168606785072043,64,FLEN)
NAN_BOXED(4593151156129723680,64,FLEN)
NAN_BOXED(4593138142215654912,64,FLEN)
NAN_BOXED(4607168606785072043,64,FLEN)
NAN_BOXED(4593151156129723680,64,FLEN)
NAN_BOXED(4593138142215654912,64,FLEN)
NAN_BOXED(4607168606785072043,64,FLEN)
NAN_BOXED(4593151156129723680,64,FLEN)
NAN_BOXED(4593138142215654912,64,FLEN)
NAN_BOXED(4607168606785072043,64,FLEN)
NAN_BOXED(4593151156129723680,64,FLEN)
NAN_BOXED(4593138142215654912,64,FLEN)
NAN_BOXED(4607168606785072043,64,FLEN)
NAN_BOXED(4593151156129723680,64,FLEN)
NAN_BOXED(4593138142215654912,64,FLEN)
NAN_BOXED(4607178350114041241,64,FLEN)
NAN_BOXED(4599748485706849014,64,FLEN)
NAN_BOXED(4599745740696117570,64,FLEN)
NAN_BOXED(4607178350114041241,64,FLEN)
NAN_BOXED(4599748485706849014,64,FLEN)
NAN_BOXED(4599745740696117570,64,FLEN)
NAN_BOXED(4607178350114041241,64,FLEN)
NAN_BOXED(4599748485706849014,64,FLEN)
NAN_BOXED(4599745740696117570,64,FLEN)
NAN_BOXED(4607178350114041241,64,FLEN)
NAN_BOXED(4599748485706849014,64,FLEN)
NAN_BOXED(4599745740696117570,64,FLEN)
NAN_BOXED(4607178350114041241,64,FLEN)
NAN_BOXED(4599748485706849014,64,FLEN)
NAN_BOXED(4599745740696117570,64,FLEN)
NAN_BOXED(4572284151930988416,64,FLEN)
NAN_BOXED(4633600628234257957,64,FLEN)
NAN_BOXED(4598928321811017176,64,FLEN)
NAN_BOXED(4572284151930988416,64,FLEN)
NAN_BOXED(4633600628234257957,64,FLEN)
NAN_BOXED(4598928321811017176,64,FLEN)
NAN_BOXED(4572284151930988416,64,FLEN)
NAN_BOXED(4633600628234257957,64,FLEN)
NAN_BOXED(4598928321811017176,64,FLEN)
NAN_BOXED(4572284151930988416,64,FLEN)
NAN_BOXED(4633600628234257957,64,FLEN)
NAN_BOXED(4598928321811017176,64,FLEN)
NAN_BOXED(4572284151930988416,64,FLEN)
NAN_BOXED(4633600628234257957,64,FLEN)
NAN_BOXED(4598928321811017176,64,FLEN)
NAN_BOXED(4573091697180121600,64,FLEN)
NAN_BOXED(4628667956017497539,64,FLEN)
NAN_BOXED(4594871310661322760,64,FLEN)
NAN_BOXED(4573091697180121600,64,FLEN)
NAN_BOXED(4628667956017497539,64,FLEN)
NAN_BOXED(4594871310661322760,64,FLEN)
NAN_BOXED(4573091697180121600,64,FLEN)
NAN_BOXED(4628667956017497539,64,FLEN)
NAN_BOXED(4594871310661322760,64,FLEN)
NAN_BOXED(4573091697180121600,64,FLEN)
NAN_BOXED(4628667956017497539,64,FLEN)
NAN_BOXED(4594871310661322760,64,FLEN)
NAN_BOXED(4573091697180121600,64,FLEN)
NAN_BOXED(4628667956017497539,64,FLEN)
NAN_BOXED(4594871310661322760,64,FLEN)
NAN_BOXED(4573434928513945216,64,FLEN)
NAN_BOXED(4617519455012530373,64,FLEN)
NAN_BOXED(4584445596100565216,64,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_2:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_3:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_4:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_5:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_6:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_7:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_8:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_9:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_10:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_11:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_12:
    .fill 146*((SIGALIGN)/4),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*XLEN/32,4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

RVMODEL_DATA_END
