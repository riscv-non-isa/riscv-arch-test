
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.11.2
// timestamp : Thu Nov 30 15:11:32 2023 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /home/vedvyas/rvi-code-forks/riscv-ctg/sample_cgfs/dataset.cgf \
//                  --cgf /home/vedvyas/rvi-code-forks/riscv-ctg/sample_cgfs/zicfilp.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the lpad-s instruction of the RISC-V RV32Zicfilp extension for the lpad-s covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IZicfilp")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*Zicsr.*Zicfilp.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True;def TEST_CASE_1=True;",lpad-s)

RVTEST_SIGBASE(x1,signature_x1_1)

inst_0:
// imm_val == ((2**20)-1), imm_val > 0
// opcode: lpad ; dest:x0; immval:0xfffff
TEST_LPAD_SMODE(x2, x1, 0*XLEN/8, 0xfffff)

inst_1:
// imm_val == 0, imm_val==0
// opcode: lpad ; dest:x0; immval:0x0
TEST_LPAD_SMODE(x2, x1, 1*XLEN/8, 0x0)

inst_2:
// imm_val == 1048574, 
// opcode: lpad ; dest:x0; immval:0xffffe
TEST_LPAD_SMODE(x2, x1, 2*XLEN/8, 0xffffe)

inst_3:
// imm_val == 1048573, 
// opcode: lpad ; dest:x0; immval:0xffffd
TEST_LPAD_SMODE(x2, x1, 3*XLEN/8, 0xffffd)

inst_4:
// imm_val == 1048571, 
// opcode: lpad ; dest:x0; immval:0xffffb
TEST_LPAD_SMODE(x2, x1, 4*XLEN/8, 0xffffb)

inst_5:
// imm_val == 1048567, 
// opcode: lpad ; dest:x0; immval:0xffff7
TEST_LPAD_SMODE(x2, x1, 5*XLEN/8, 0xffff7)

inst_6:
// imm_val == 1048559, 
// opcode: lpad ; dest:x0; immval:0xfffef
TEST_LPAD_SMODE(x2, x1, 6*XLEN/8, 0xfffef)

inst_7:
// imm_val == 1048543, 
// opcode: lpad ; dest:x0; immval:0xfffdf
TEST_LPAD_SMODE(x2, x1, 7*XLEN/8, 0xfffdf)

inst_8:
// imm_val == 1048511, 
// opcode: lpad ; dest:x0; immval:0xfffbf
TEST_LPAD_SMODE(x2, x1, 8*XLEN/8, 0xfffbf)

inst_9:
// imm_val == 1048447, 
// opcode: lpad ; dest:x0; immval:0xfff7f
TEST_LPAD_SMODE(x2, x1, 9*XLEN/8, 0xfff7f)

inst_10:
// imm_val == 1048319, 
// opcode: lpad ; dest:x0; immval:0xffeff
TEST_LPAD_SMODE(x2, x1, 10*XLEN/8, 0xffeff)

inst_11:
// imm_val == 1048063, 
// opcode: lpad ; dest:x0; immval:0xffdff
TEST_LPAD_SMODE(x2, x1, 11*XLEN/8, 0xffdff)

inst_12:
// imm_val == 1047551, 
// opcode: lpad ; dest:x0; immval:0xffbff
TEST_LPAD_SMODE(x2, x1, 12*XLEN/8, 0xffbff)

inst_13:
// imm_val == 1046527, 
// opcode: lpad ; dest:x0; immval:0xff7ff
TEST_LPAD_SMODE(x2, x1, 13*XLEN/8, 0xff7ff)

inst_14:
// imm_val == 1044479, 
// opcode: lpad ; dest:x0; immval:0xfefff
TEST_LPAD_SMODE(x2, x1, 14*XLEN/8, 0xfefff)

inst_15:
// imm_val == 1040383, 
// opcode: lpad ; dest:x0; immval:0xfdfff
TEST_LPAD_SMODE(x2, x1, 15*XLEN/8, 0xfdfff)

inst_16:
// imm_val == 1032191, 
// opcode: lpad ; dest:x0; immval:0xfbfff
TEST_LPAD_SMODE(x2, x1, 16*XLEN/8, 0xfbfff)

inst_17:
// imm_val == 1015807, 
// opcode: lpad ; dest:x0; immval:0xf7fff
TEST_LPAD_SMODE(x2, x1, 17*XLEN/8, 0xf7fff)

inst_18:
// imm_val == 983039, 
// opcode: lpad ; dest:x0; immval:0xeffff
TEST_LPAD_SMODE(x2, x1, 18*XLEN/8, 0xeffff)

inst_19:
// imm_val == 917503, 
// opcode: lpad ; dest:x0; immval:0xdffff
TEST_LPAD_SMODE(x2, x1, 19*XLEN/8, 0xdffff)

inst_20:
// imm_val == 786431, 
// opcode: lpad ; dest:x0; immval:0xbffff
TEST_LPAD_SMODE(x2, x1, 20*XLEN/8, 0xbffff)

inst_21:
// imm_val == 524287, 
// opcode: lpad ; dest:x0; immval:0x7ffff
TEST_LPAD_SMODE(x2, x1, 21*XLEN/8, 0x7ffff)

inst_22:
// imm_val == 1, imm_val==1
// opcode: lpad ; dest:x0; immval:0x1
TEST_LPAD_SMODE(x2, x1, 22*XLEN/8, 0x1)

inst_23:
// imm_val == 2, imm_val==2
// opcode: lpad ; dest:x0; immval:0x2
TEST_LPAD_SMODE(x2, x1, 23*XLEN/8, 0x2)

inst_24:
// imm_val == 4, imm_val==4
// opcode: lpad ; dest:x0; immval:0x4
TEST_LPAD_SMODE(x2, x1, 24*XLEN/8, 0x4)

inst_25:
// imm_val == 8, 
// opcode: lpad ; dest:x0; immval:0x8
TEST_LPAD_SMODE(x2, x1, 25*XLEN/8, 0x8)

inst_26:
// imm_val == 16, 
// opcode: lpad ; dest:x0; immval:0x10
TEST_LPAD_SMODE(x2, x1, 26*XLEN/8, 0x10)

inst_27:
// imm_val == 32, 
// opcode: lpad ; dest:x0; immval:0x20
TEST_LPAD_SMODE(x2, x1, 27*XLEN/8, 0x20)

inst_28:
// imm_val == 64, 
// opcode: lpad ; dest:x0; immval:0x40
TEST_LPAD_SMODE(x2, x1, 28*XLEN/8, 0x40)

inst_29:
// imm_val == 128, 
// opcode: lpad ; dest:x0; immval:0x80
TEST_LPAD_SMODE(x2, x1, 29*XLEN/8, 0x80)

inst_30:
// imm_val == 256, 
// opcode: lpad ; dest:x0; immval:0x100
TEST_LPAD_SMODE(x2, x1, 30*XLEN/8, 0x100)

inst_31:
// imm_val == 512, 
// opcode: lpad ; dest:x0; immval:0x200
TEST_LPAD_SMODE(x2, x1, 31*XLEN/8, 0x200)

inst_32:
// imm_val == 1024, imm_val==1024
// opcode: lpad ; dest:x0; immval:0x400
TEST_LPAD_SMODE(x2, x1, 32*XLEN/8, 0x400)

inst_33:
// imm_val == 2048, 
// opcode: lpad ; dest:x0; immval:0x800
TEST_LPAD_SMODE(x2, x1, 33*XLEN/8, 0x800)

inst_34:
// imm_val==6, 
// opcode: lpad ; dest:x0; immval:0x6
TEST_LPAD_SMODE(x2, x1, 34*XLEN/8, 0x6)

inst_35:
// imm_val==209716, 
// opcode: lpad ; dest:x0; immval:0x33334
TEST_LPAD_SMODE(x2, x1, 35*XLEN/8, 0x33334)

inst_36:
// imm_val==419431, 
// opcode: lpad ; dest:x0; immval:0x66667
TEST_LPAD_SMODE(x2, x1, 36*XLEN/8, 0x66667)

inst_37:
// imm_val==725, 
// opcode: lpad ; dest:x0; immval:0x2d5
TEST_LPAD_SMODE(x2, x1, 37*XLEN/8, 0x2d5)

inst_38:
// imm_val == 4096, 
// opcode: lpad ; dest:x0; immval:0x1000
TEST_LPAD_SMODE(x2, x1, 38*XLEN/8, 0x1000)

inst_39:
// imm_val == 8192, 
// opcode: lpad ; dest:x0; immval:0x2000
TEST_LPAD_SMODE(x2, x1, 39*XLEN/8, 0x2000)

inst_40:
// imm_val == 16384, 
// opcode: lpad ; dest:x0; immval:0x4000
TEST_LPAD_SMODE(x2, x1, 40*XLEN/8, 0x4000)

inst_41:
// imm_val == 32768, 
// opcode: lpad ; dest:x0; immval:0x8000
TEST_LPAD_SMODE(x2, x1, 41*XLEN/8, 0x8000)

inst_42:
// imm_val == 65536, 
// opcode: lpad ; dest:x0; immval:0x10000
TEST_LPAD_SMODE(x2, x1, 42*XLEN/8, 0x10000)

inst_43:
// imm_val == 131072, 
// opcode: lpad ; dest:x0; immval:0x20000
TEST_LPAD_SMODE(x2, x1, 43*XLEN/8, 0x20000)

inst_44:
// imm_val == 262144, 
// opcode: lpad ; dest:x0; immval:0x40000
TEST_LPAD_SMODE(x2, x1, 44*XLEN/8, 0x40000)

inst_45:
// imm_val == 524288, 
// opcode: lpad ; dest:x0; immval:0x80000
TEST_LPAD_SMODE(x2, x1, 45*XLEN/8, 0x80000)

inst_46:
// imm_val==3, 
// opcode: lpad ; dest:x0; immval:0x3
TEST_LPAD_SMODE(x2, x1, 46*XLEN/8, 0x3)

inst_47:
// imm_val==349525, imm_val == 349525
// opcode: lpad ; dest:x0; immval:0x55555
TEST_LPAD_SMODE(x2, x1, 47*XLEN/8, 0x55555)

inst_48:
// imm_val==699050, imm_val == 699050
// opcode: lpad ; dest:x0; immval:0xaaaaa
TEST_LPAD_SMODE(x2, x1, 48*XLEN/8, 0xaaaaa)

inst_49:
// imm_val==5, 
// opcode: lpad ; dest:x0; immval:0x5
TEST_LPAD_SMODE(x2, x1, 49*XLEN/8, 0x5)

inst_50:
// imm_val==209715, 
// opcode: lpad ; dest:x0; immval:0x33333
TEST_LPAD_SMODE(x2, x1, 50*XLEN/8, 0x33333)

inst_51:
// imm_val==419430, 
// opcode: lpad ; dest:x0; immval:0x66666
TEST_LPAD_SMODE(x2, x1, 51*XLEN/8, 0x66666)

inst_52:
// imm_val==724, 
// opcode: lpad ; dest:x0; immval:0x2d4
TEST_LPAD_SMODE(x2, x1, 52*XLEN/8, 0x2d4)

inst_53:
// imm_val==1023, 
// opcode: lpad ; dest:x0; immval:0x3ff
TEST_LPAD_SMODE(x2, x1, 53*XLEN/8, 0x3ff)

inst_54:
// imm_val==349524, 
// opcode: lpad ; dest:x0; immval:0x55554
TEST_LPAD_SMODE(x2, x1, 54*XLEN/8, 0x55554)

inst_55:
// imm_val==699049, 
// opcode: lpad ; dest:x0; immval:0xaaaa9
TEST_LPAD_SMODE(x2, x1, 55*XLEN/8, 0xaaaa9)

inst_56:
// imm_val==209714, 
// opcode: lpad ; dest:x0; immval:0x33332
TEST_LPAD_SMODE(x2, x1, 56*XLEN/8, 0x33332)

inst_57:
// imm_val==419429, 
// opcode: lpad ; dest:x0; immval:0x66665
TEST_LPAD_SMODE(x2, x1, 57*XLEN/8, 0x66665)

inst_58:
// imm_val==723, 
// opcode: lpad ; dest:x0; immval:0x2d3
TEST_LPAD_SMODE(x2, x1, 58*XLEN/8, 0x2d3)

inst_59:
// imm_val==1022, 
// opcode: lpad ; dest:x0; immval:0x3fe
TEST_LPAD_SMODE(x2, x1, 59*XLEN/8, 0x3fe)

inst_60:
// imm_val==349526, 
// opcode: lpad ; dest:x0; immval:0x55556
TEST_LPAD_SMODE(x2, x1, 60*XLEN/8, 0x55556)

inst_61:
// imm_val==699051, 
// opcode: lpad ; dest:x0; immval:0xaaaab
TEST_LPAD_SMODE(x2, x1, 61*XLEN/8, 0xaaaab)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;



signature_x1_0:
    .fill 0*((XLEN/8)/4),4,0xdeadbeef


signature_x1_1:
    .fill 62*((XLEN/8)/4),4,0xdeadbeef

#ifdef rvtest_mtrap_routine
tsig_begin_canary:
CANARY;

mtrap_sigptr:
    .fill 64*XLEN/32,4,0xdeadbeef

tsig_end_canary:
CANARY;
#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif


sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
