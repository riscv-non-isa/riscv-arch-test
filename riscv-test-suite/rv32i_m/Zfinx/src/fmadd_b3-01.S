
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.9.0
// timestamp : Fri Oct  7 11:55:36 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /home/reg/tools/riscv-ctg/sample_cgfs/dataset.cgf \
//                  --cgf /home/reg/tools/riscv-ctg/sample_cgfs/sample_cgfs_fext/RV32Zfinx/fmadd.s.cgf \
 \
//                  -- xlen 32  \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fmadd.s instruction of the RISC-V RV32_Zfinx,RV32_Zdinx,RV64_Zfinx,RV64_Zdinx extension for the fmadd_b3 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32I_Zfinx,RV32I_Zdinx,RV64I_Zfinx,RV64I_Zdinx")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*Zfinx.*);def TEST_CASE_1=True;",fmadd_b3)

RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_0:
// rs1 == rs2 != rs3 and rs1 == rs2 != rd and rd != rs3, rs1==x30, rs2==x30, rs3==x29, rd==x31,fs1 == 0 and fe1 == 0xfd and fm1 == 0x6f31b9 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x186e02 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x0e6c50 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x30; op3:x29; dest:x31; op1val:0x7eef31b9; op2val:0x7eef31b9;
op3val:0x7f0e6c50; valaddr_reg:x3; val_offset:0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x30, x29, dyn, 0, 0, x3, 0*FLEN/8, x4, x1, x2)

inst_1:
// rs1 != rs2 and rs1 != rd and rs1 != rs3 and rs2 != rs3 and rs2 != rd and rs3 != rd, rs1==x31, rs2==x29, rs3==x28, rd==x30,fs1 == 0 and fe1 == 0xfd and fm1 == 0x6f31b9 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x186e02 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x0e6c50 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.s ; op1:x31; op2:x29; op3:x28; dest:x30; op1val:0x7eef31b9; op2val:0xbf986e02;
op3val:0x7f0e6c50; valaddr_reg:x3; val_offset:3*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.s, x30, x31, x29, x28, dyn, 32, 0, x3, 3*FLEN/8, x4, x1, x2)

inst_2:
// rs1 == rs2 == rd != rs3, rs1==x28, rs2==x28, rs3==x31, rd==x28,fs1 == 0 and fe1 == 0xfd and fm1 == 0x6f31b9 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x186e02 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x0e6c50 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.s ; op1:x28; op2:x28; op3:x31; dest:x28; op1val:0x7eef31b9; op2val:0x7eef31b9;
op3val:0x7f0e6c50; valaddr_reg:x3; val_offset:6*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.s, x28, x28, x28, x31, dyn, 64, 0, x3, 6*FLEN/8, x4, x1, x2)

inst_3:
// rd == rs2 == rs3 != rs1, rs1==x29, rs2==x27, rs3==x27, rd==x27,fs1 == 0 and fe1 == 0xfd and fm1 == 0x6f31b9 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x186e02 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x0e6c50 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.s ; op1:x29; op2:x27; op3:x27; dest:x27; op1val:0x7eef31b9; op2val:0xbf986e02;
op3val:0xbf986e02; valaddr_reg:x3; val_offset:9*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.s, x27, x29, x27, x27, dyn, 96, 0, x3, 9*FLEN/8, x4, x1, x2)

inst_4:
// rs2 == rs3 != rs1 and rs2 == rs3 != rd and rd != rs1, rs1==x27, rs2==x26, rs3==x26, rd==x29,fs1 == 0 and fe1 == 0xfd and fm1 == 0x6f31b9 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x186e02 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x0e6c50 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.s ; op1:x27; op2:x26; op3:x26; dest:x29; op1val:0x7eef31b9; op2val:0xbf986e02;
op3val:0xbf986e02; valaddr_reg:x3; val_offset:12*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.s, x29, x27, x26, x26, dyn, 128, 0, x3, 12*FLEN/8, x4, x1, x2)

inst_5:
// rs1 == rs2 == rs3 != rd, rs1==x25, rs2==x25, rs3==x25, rd==x26,fs1 == 0 and fe1 == 0xfe and fm1 == 0x18ad5a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x17b417 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x34f350 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x25; op2:x25; op3:x25; dest:x26; op1val:0x7f18ad5a; op2val:0x7f18ad5a;
op3val:0x7f18ad5a; valaddr_reg:x3; val_offset:15*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x26, x25, x25, x25, dyn, 0, 0, x3, 15*FLEN/8, x4, x1, x2)

inst_6:
// rs1 == rs2 == rs3 == rd, rs1==x24, rs2==x24, rs3==x24, rd==x24,fs1 == 0 and fe1 == 0xfe and fm1 == 0x18ad5a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x17b417 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x34f350 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.s ; op1:x24; op2:x24; op3:x24; dest:x24; op1val:0x7f18ad5a; op2val:0x7f18ad5a;
op3val:0x7f18ad5a; valaddr_reg:x3; val_offset:18*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.s, x24, x24, x24, x24, dyn, 32, 0, x3, 18*FLEN/8, x4, x1, x2)

inst_7:
// rs1 == rs3 != rs2 and rs1 == rs3 != rd and rd != rs2, rs1==x23, rs2==x31, rs3==x23, rd==x25,fs1 == 0 and fe1 == 0xfe and fm1 == 0x18ad5a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x17b417 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x34f350 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.s ; op1:x23; op2:x31; op3:x23; dest:x25; op1val:0x7f18ad5a; op2val:0xbf97b417;
op3val:0x7f18ad5a; valaddr_reg:x3; val_offset:21*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.s, x25, x23, x31, x23, dyn, 64, 0, x3, 21*FLEN/8, x4, x1, x2)

inst_8:
// rs1 == rd != rs2 and rs1 == rd != rs3 and rs3 != rs2, rs1==x22, rs2==x23, rs3==x30, rd==x22,fs1 == 0 and fe1 == 0xfe and fm1 == 0x18ad5a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x17b417 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x34f350 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.s ; op1:x22; op2:x23; op3:x30; dest:x22; op1val:0x7f18ad5a; op2val:0xbf97b417;
op3val:0x7f34f350; valaddr_reg:x3; val_offset:24*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.s, x22, x22, x23, x30, dyn, 96, 0, x3, 24*FLEN/8, x4, x1, x2)

inst_9:
// rs2 == rd != rs1 and rs2 == rd != rs3 and rs3 != rs1, rs1==x26, rs2==x21, rs3==x22, rd==x21,fs1 == 0 and fe1 == 0xfe and fm1 == 0x18ad5a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x17b417 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x34f350 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.s ; op1:x26; op2:x21; op3:x22; dest:x21; op1val:0x7f18ad5a; op2val:0xbf97b417;
op3val:0x7f34f350; valaddr_reg:x3; val_offset:27*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.s, x21, x26, x21, x22, dyn, 128, 0, x3, 27*FLEN/8, x4, x1, x2)

inst_10:
// rs3 == rd != rs1 and rs3 == rd != rs2 and rs2 != rs1, rs1==x21, rs2==x22, rs3==x20, rd==x20,fs1 == 0 and fe1 == 0xfe and fm1 == 0x0e0f7e and fs2 == 1 and fe2 == 0x7f and fm2 == 0x1f8f25 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x31161d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x21; op2:x22; op3:x20; dest:x20; op1val:0x7f0e0f7e; op2val:0xbf9f8f25;
op3val:0x7f31161d; valaddr_reg:x3; val_offset:30*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x20, x21, x22, x20, dyn, 0, 0, x3, 30*FLEN/8, x4, x1, x2)

inst_11:
// rs1 == rd == rs3 != rs2, rs1==x19, rs2==x20, rs3==x19, rd==x19,fs1 == 0 and fe1 == 0xfe and fm1 == 0x0e0f7e and fs2 == 1 and fe2 == 0x7f and fm2 == 0x1f8f25 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x31161d and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.s ; op1:x19; op2:x20; op3:x19; dest:x19; op1val:0x7f0e0f7e; op2val:0xbf9f8f25;
op3val:0x7f0e0f7e; valaddr_reg:x3; val_offset:33*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.s, x19, x19, x20, x19, dyn, 32, 0, x3, 33*FLEN/8, x4, x1, x2)

inst_12:
// rs1==x20, rs2==x19, rs3==x21, rd==x23,fs1 == 0 and fe1 == 0xfe and fm1 == 0x0e0f7e and fs2 == 1 and fe2 == 0x7f and fm2 == 0x1f8f25 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x31161d and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.s ; op1:x20; op2:x19; op3:x21; dest:x23; op1val:0x7f0e0f7e; op2val:0xbf9f8f25;
op3val:0x7f31161d; valaddr_reg:x3; val_offset:36*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.s, x23, x20, x19, x21, dyn, 64, 0, x3, 36*FLEN/8, x4, x1, x2)

inst_13:
// rs1==x17, rs2==x16, rs3==x15, rd==x18,fs1 == 0 and fe1 == 0xfe and fm1 == 0x0e0f7e and fs2 == 1 and fe2 == 0x7f and fm2 == 0x1f8f25 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x31161d and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.s ; op1:x17; op2:x16; op3:x15; dest:x18; op1val:0x7f0e0f7e; op2val:0xbf9f8f25;
op3val:0x7f31161d; valaddr_reg:x3; val_offset:39*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.s, x18, x17, x16, x15, dyn, 96, 0, x3, 39*FLEN/8, x4, x1, x2)

inst_14:
// rs1==x15, rs2==x18, rs3==x16, rd==x17,fs1 == 0 and fe1 == 0xfe and fm1 == 0x0e0f7e and fs2 == 1 and fe2 == 0x7f and fm2 == 0x1f8f25 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x31161d and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.s ; op1:x15; op2:x18; op3:x16; dest:x17; op1val:0x7f0e0f7e; op2val:0xbf9f8f25;
op3val:0x7f31161d; valaddr_reg:x3; val_offset:42*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.s, x17, x15, x18, x16, dyn, 128, 0, x3, 42*FLEN/8, x4, x1, x2)

inst_15:
// rs1==x18, rs2==x15, rs3==x17, rd==x16,fs1 == 0 and fe1 == 0xf9 and fm1 == 0x323547 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x006caa and fs3 == 0 and fe3 == 0xfd and fm3 == 0x32cc91 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x18; op2:x15; op3:x17; dest:x16; op1val:0x7cb23547; op2val:0xc1806caa;
op3val:0x7eb2cc91; valaddr_reg:x3; val_offset:45*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x16, x18, x15, x17, dyn, 0, 0, x3, 45*FLEN/8, x4, x1, x2)

inst_16:
// rs1==x16, rs2==x17, rs3==x18, rd==x15,fs1 == 0 and fe1 == 0xf9 and fm1 == 0x323547 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x006caa and fs3 == 0 and fe3 == 0xfd and fm3 == 0x32cc91 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.s ; op1:x16; op2:x17; op3:x18; dest:x15; op1val:0x7cb23547; op2val:0xc1806caa;
op3val:0x7eb2cc91; valaddr_reg:x3; val_offset:48*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.s, x15, x16, x17, x18, dyn, 32, 0, x3, 48*FLEN/8, x4, x1, x2)

inst_17:
// rs1==x13, rs2==x12, rs3==x11, rd==x14,fs1 == 0 and fe1 == 0xf9 and fm1 == 0x323547 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x006caa and fs3 == 0 and fe3 == 0xfd and fm3 == 0x32cc91 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.s ; op1:x13; op2:x12; op3:x11; dest:x14; op1val:0x7cb23547; op2val:0xc1806caa;
op3val:0x7eb2cc91; valaddr_reg:x3; val_offset:51*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fmadd.s, x14, x13, x12, x11, dyn, 64, 0, x3, 51*FLEN/8, x4, x1, x2)

inst_18:
// rs1==x11, rs2==x14, rs3==x12, rd==x13,fs1 == 0 and fe1 == 0xf9 and fm1 == 0x323547 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x006caa and fs3 == 0 and fe3 == 0xfd and fm3 == 0x32cc91 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.s ; op1:x11; op2:x14; op3:x12; dest:x13; op1val:0x7cb23547; op2val:0xc1806caa;
op3val:0x7eb2cc91; valaddr_reg:x3; val_offset:54*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fmadd.s, x13, x11, x14, x12, dyn, 96, 0, x3, 54*FLEN/8, x4, x1, x2)

inst_19:
// rs1==x14, rs2==x11, rs3==x13, rd==x12,fs1 == 0 and fe1 == 0xf9 and fm1 == 0x323547 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x006caa and fs3 == 0 and fe3 == 0xfd and fm3 == 0x32cc91 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.s ; op1:x14; op2:x11; op3:x13; dest:x12; op1val:0x7cb23547; op2val:0xc1806caa;
op3val:0x7eb2cc91; valaddr_reg:x3; val_offset:57*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fmadd.s, x12, x14, x11, x13, dyn, 128, 0, x3, 57*FLEN/8, x4, x1, x2)

inst_20:
// rs1==x12, rs2==x13, rs3==x14, rd==x11,fs1 == 0 and fe1 == 0xfe and fm1 == 0x351fde and fs2 == 1 and fe2 == 0x7e and fm2 == 0x301cf4 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x7934ca and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x12; op2:x13; op3:x14; dest:x11; op1val:0x7f351fde; op2val:0xbf301cf4;
op3val:0x7ef934ca; valaddr_reg:x3; val_offset:60*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x11, x12, x13, x14, dyn, 0, 0, x3, 60*FLEN/8, x4, x1, x2)

inst_21:
// rs1==x9, rs2==x8, rs3==x7, rd==x10,fs1 == 0 and fe1 == 0xfe and fm1 == 0x351fde and fs2 == 1 and fe2 == 0x7e and fm2 == 0x301cf4 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x7934ca and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.s ; op1:x9; op2:x8; op3:x7; dest:x10; op1val:0x7f351fde; op2val:0xbf301cf4;
op3val:0x7ef934ca; valaddr_reg:x3; val_offset:63*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fmadd.s, x10, x9, x8, x7, dyn, 32, 0, x3, 63*FLEN/8, x4, x1, x2)
RVTEST_VALBASEUPD(x13,test_dataset_1)
RVTEST_SIGBASE(x11,signature_x11_0)

inst_22:
// rs1==x7, rs2==x10, rs3==x8, rd==x9,fs1 == 0 and fe1 == 0xfe and fm1 == 0x351fde and fs2 == 1 and fe2 == 0x7e and fm2 == 0x301cf4 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x7934ca and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.s ; op1:x7; op2:x10; op3:x8; dest:x9; op1val:0x7f351fde; op2val:0xbf301cf4;
op3val:0x7ef934ca; valaddr_reg:x13; val_offset:0*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:64 */
TEST_FPR4_OP(fmadd.s, x9, x7, x10, x8, dyn, 64, 0, x13, 0*FLEN/8, x14, x11, x12)

inst_23:
// rs1==x10, rs2==x7, rs3==x9, rd==x8,fs1 == 0 and fe1 == 0xfe and fm1 == 0x351fde and fs2 == 1 and fe2 == 0x7e and fm2 == 0x301cf4 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x7934ca and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.s ; op1:x10; op2:x7; op3:x9; dest:x8; op1val:0x7f351fde; op2val:0xbf301cf4;
op3val:0x7ef934ca; valaddr_reg:x13; val_offset:3*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:96 */
TEST_FPR4_OP(fmadd.s, x8, x10, x7, x9, dyn, 96, 0, x13, 3*FLEN/8, x14, x11, x12)

inst_24:
// rs1==x8, rs2==x9, rs3==x10, rd==x7,fs1 == 0 and fe1 == 0xfe and fm1 == 0x351fde and fs2 == 1 and fe2 == 0x7e and fm2 == 0x301cf4 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x7934ca and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.s ; op1:x8; op2:x9; op3:x10; dest:x7; op1val:0x7f351fde; op2val:0xbf301cf4;
op3val:0x7ef934ca; valaddr_reg:x13; val_offset:6*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:128 */
TEST_FPR4_OP(fmadd.s, x7, x8, x9, x10, dyn, 128, 0, x13, 6*FLEN/8, x14, x11, x12)

inst_25:
// rs1==x5, rs2==x4, rs3==x3, rd==x6,fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cf90f and fs2 == 1 and fe2 == 0x7c and fm2 == 0x00acab and fs3 == 0 and fe3 == 0xfb and fm3 == 0x2de265 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x5; op2:x4; op3:x3; dest:x6; op1val:0x7f2cf90f; op2val:0xbe00acab;
op3val:0x7dade265; valaddr_reg:x13; val_offset:9*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x6, x5, x4, x3, dyn, 0, 0, x13, 9*FLEN/8, x14, x11, x12)

inst_26:
// rs1==x3, rs2==x6, rs3==x4, rd==x5,fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cf90f and fs2 == 1 and fe2 == 0x7c and fm2 == 0x00acab and fs3 == 0 and fe3 == 0xfb and fm3 == 0x2de265 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.s ; op1:x3; op2:x6; op3:x4; dest:x5; op1val:0x7f2cf90f; op2val:0xbe00acab;
op3val:0x7dade265; valaddr_reg:x13; val_offset:12*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:32 */
TEST_FPR4_OP(fmadd.s, x5, x3, x6, x4, dyn, 32, 0, x13, 12*FLEN/8, x14, x11, x12)

inst_27:
// rs1==x6, rs2==x3, rs3==x5, rd==x4,fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cf90f and fs2 == 1 and fe2 == 0x7c and fm2 == 0x00acab and fs3 == 0 and fe3 == 0xfb and fm3 == 0x2de265 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.s ; op1:x6; op2:x3; op3:x5; dest:x4; op1val:0x7f2cf90f; op2val:0xbe00acab;
op3val:0x7dade265; valaddr_reg:x13; val_offset:15*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:64 */
TEST_FPR4_OP(fmadd.s, x4, x6, x3, x5, dyn, 64, 0, x13, 15*FLEN/8, x14, x11, x12)

inst_28:
// rs1==x4, rs2==x5, rs3==x6, rd==x3,fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cf90f and fs2 == 1 and fe2 == 0x7c and fm2 == 0x00acab and fs3 == 0 and fe3 == 0xfb and fm3 == 0x2de265 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.s ; op1:x4; op2:x5; op3:x6; dest:x3; op1val:0x7f2cf90f; op2val:0xbe00acab;
op3val:0x7dade265; valaddr_reg:x13; val_offset:18*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:96 */
TEST_FPR4_OP(fmadd.s, x3, x4, x5, x6, dyn, 96, 0, x13, 18*FLEN/8, x14, x11, x12)

inst_29:
// rs1==x2,fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cf90f and fs2 == 1 and fe2 == 0x7c and fm2 == 0x00acab and fs3 == 0 and fe3 == 0xfb and fm3 == 0x2de265 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.s ; op1:x2; op2:x30; op3:x29; dest:x31; op1val:0x7f2cf90f; op2val:0xbe00acab;
op3val:0x7dade265; valaddr_reg:x13; val_offset:21*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:128 */
TEST_FPR4_OP(fmadd.s, x31, x2, x30, x29, dyn, 128, 0, x13, 21*FLEN/8, x14, x11, x12)

inst_30:
// rs1==x1,fs1 == 0 and fe1 == 0xfd and fm1 == 0x341f5c and fs2 == 1 and fe2 == 0x7e and fm2 == 0x0691ee and fs3 == 0 and fe3 == 0xfc and fm3 == 0x3d5e30 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x1; op2:x30; op3:x29; dest:x31; op1val:0x7eb41f5c; op2val:0xbf0691ee;
op3val:0x7e3d5e30; valaddr_reg:x13; val_offset:24*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x1, x30, x29, dyn, 0, 0, x13, 24*FLEN/8, x14, x11, x12)

inst_31:
// rs1==x0,fs1 == 0 and fe1 == 0xfd and fm1 == 0x341f5c and fs2 == 1 and fe2 == 0x7e and fm2 == 0x0691ee and fs3 == 0 and fe3 == 0xfc and fm3 == 0x3d5e30 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.s ; op1:x0; op2:x30; op3:x29; dest:x31; op1val:0x0; op2val:0xbf0691ee;
op3val:0x7e3d5e30; valaddr_reg:x13; val_offset:27*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:32 */
TEST_FPR4_OP(fmadd.s, x31, x0, x30, x29, dyn, 32, 0, x13, 27*FLEN/8, x14, x11, x12)

inst_32:
// rs2==x2,fs1 == 0 and fe1 == 0xfd and fm1 == 0x341f5c and fs2 == 1 and fe2 == 0x7e and fm2 == 0x0691ee and fs3 == 0 and fe3 == 0xfc and fm3 == 0x3d5e30 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x2; op3:x29; dest:x31; op1val:0x7eb41f5c; op2val:0xbf0691ee;
op3val:0x7e3d5e30; valaddr_reg:x13; val_offset:30*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:64 */
TEST_FPR4_OP(fmadd.s, x31, x30, x2, x29, dyn, 64, 0, x13, 30*FLEN/8, x14, x11, x12)

inst_33:
// rs2==x1,fs1 == 0 and fe1 == 0xfd and fm1 == 0x341f5c and fs2 == 1 and fe2 == 0x7e and fm2 == 0x0691ee and fs3 == 0 and fe3 == 0xfc and fm3 == 0x3d5e30 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x1; op3:x29; dest:x31; op1val:0x7eb41f5c; op2val:0xbf0691ee;
op3val:0x7e3d5e30; valaddr_reg:x13; val_offset:33*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:96 */
TEST_FPR4_OP(fmadd.s, x31, x30, x1, x29, dyn, 96, 0, x13, 33*FLEN/8, x14, x11, x12)

inst_34:
// rs2==x0,fs1 == 0 and fe1 == 0xfd and fm1 == 0x341f5c and fs2 == 1 and fe2 == 0x7e and fm2 == 0x0691ee and fs3 == 0 and fe3 == 0xfc and fm3 == 0x3d5e30 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x0; op3:x29; dest:x31; op1val:0x7eb41f5c; op2val:0x0;
op3val:0x7e3d5e30; valaddr_reg:x13; val_offset:36*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:128 */
TEST_FPR4_OP(fmadd.s, x31, x30, x0, x29, dyn, 128, 0, x13, 36*FLEN/8, x14, x11, x12)

inst_35:
// rs3==x2,fs1 == 0 and fe1 == 0xfd and fm1 == 0x50cddd and fs2 == 1 and fe2 == 0x7f and fm2 == 0x071ab8 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x5c64b6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x2; dest:x31; op1val:0x7ed0cddd; op2val:0xbf871ab8;
op3val:0x7edc64b6; valaddr_reg:x13; val_offset:39*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x2, dyn, 0, 0, x13, 39*FLEN/8, x14, x11, x12)

inst_36:
// rs3==x1,fs1 == 0 and fe1 == 0xfd and fm1 == 0x50cddd and fs2 == 1 and fe2 == 0x7f and fm2 == 0x071ab8 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x5c64b6 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x1; dest:x31; op1val:0x7ed0cddd; op2val:0xbf871ab8;
op3val:0x7edc64b6; valaddr_reg:x13; val_offset:42*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:32 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x1, dyn, 32, 0, x13, 42*FLEN/8, x14, x11, x12)

inst_37:
// rs3==x0,fs1 == 0 and fe1 == 0xfd and fm1 == 0x50cddd and fs2 == 1 and fe2 == 0x7f and fm2 == 0x071ab8 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x5c64b6 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x0; dest:x31; op1val:0x7ed0cddd; op2val:0xbf871ab8;
op3val:0x0; valaddr_reg:x13; val_offset:45*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:64 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x0, dyn, 64, 0, x13, 45*FLEN/8, x14, x11, x12)

inst_38:
// rd==x2,fs1 == 0 and fe1 == 0xfd and fm1 == 0x50cddd and fs2 == 1 and fe2 == 0x7f and fm2 == 0x071ab8 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x5c64b6 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.s ; op1:x31; op2:x30; op3:x29; dest:x2; op1val:0x7ed0cddd; op2val:0xbf871ab8;
op3val:0x7edc64b6; valaddr_reg:x13; val_offset:48*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:96 */
TEST_FPR4_OP(fmadd.s, x2, x31, x30, x29, dyn, 96, 0, x13, 48*FLEN/8, x14, x11, x12)

inst_39:
// rd==x1,fs1 == 0 and fe1 == 0xfd and fm1 == 0x50cddd and fs2 == 1 and fe2 == 0x7f and fm2 == 0x071ab8 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x5c64b6 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.s ; op1:x31; op2:x30; op3:x29; dest:x1; op1val:0x7ed0cddd; op2val:0xbf871ab8;
op3val:0x7edc64b6; valaddr_reg:x13; val_offset:51*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:128 */
TEST_FPR4_OP(fmadd.s, x1, x31, x30, x29, dyn, 128, 0, x13, 51*FLEN/8, x14, x11, x12)

inst_40:
// rd==x0,fs1 == 0 and fe1 == 0xf8 and fm1 == 0x2125ab and fs2 == 1 and fe2 == 0x83 and fm2 == 0x0435fb and fs3 == 0 and fe3 == 0xfc and fm3 == 0x2672cf and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x31; op2:x30; op3:x29; dest:x0; op1val:0x7c2125ab; op2val:0xc18435fb;
op3val:0x7e2672cf; valaddr_reg:x13; val_offset:54*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x0, x31, x30, x29, dyn, 0, 0, x13, 54*FLEN/8, x14, x11, x12)

inst_41:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x2125ab and fs2 == 1 and fe2 == 0x83 and fm2 == 0x0435fb and fs3 == 0 and fe3 == 0xfc and fm3 == 0x2672cf and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7c2125ab; op2val:0xc18435fb;
op3val:0x7e2672cf; valaddr_reg:x13; val_offset:57*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:32 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 32, 0, x13, 57*FLEN/8, x14, x11, x12)

inst_42:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x2125ab and fs2 == 1 and fe2 == 0x83 and fm2 == 0x0435fb and fs3 == 0 and fe3 == 0xfc and fm3 == 0x2672cf and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7c2125ab; op2val:0xc18435fb;
op3val:0x7e2672cf; valaddr_reg:x13; val_offset:60*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:64 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 64, 0, x13, 60*FLEN/8, x14, x11, x12)

inst_43:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x2125ab and fs2 == 1 and fe2 == 0x83 and fm2 == 0x0435fb and fs3 == 0 and fe3 == 0xfc and fm3 == 0x2672cf and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7c2125ab; op2val:0xc18435fb;
op3val:0x7e2672cf; valaddr_reg:x13; val_offset:63*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:96 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 96, 0, x13, 63*FLEN/8, x14, x11, x12)

inst_44:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x2125ab and fs2 == 1 and fe2 == 0x83 and fm2 == 0x0435fb and fs3 == 0 and fe3 == 0xfc and fm3 == 0x2672cf and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7c2125ab; op2val:0xc18435fb;
op3val:0x7e2672cf; valaddr_reg:x13; val_offset:66*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:128 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 128, 0, x13, 66*FLEN/8, x14, x11, x12)

inst_45:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x56a477 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x51d69a and fs3 == 0 and fe3 == 0xfe and fm3 == 0x2ff034 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e56a477; op2val:0xc051d69a;
op3val:0x7f2ff034; valaddr_reg:x13; val_offset:69*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 69*FLEN/8, x14, x11, x12)

inst_46:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x56a477 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x51d69a and fs3 == 0 and fe3 == 0xfe and fm3 == 0x2ff034 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e56a477; op2val:0xc051d69a;
op3val:0x7f2ff034; valaddr_reg:x13; val_offset:72*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:32 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 32, 0, x13, 72*FLEN/8, x14, x11, x12)

inst_47:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x56a477 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x51d69a and fs3 == 0 and fe3 == 0xfe and fm3 == 0x2ff034 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e56a477; op2val:0xc051d69a;
op3val:0x7f2ff034; valaddr_reg:x13; val_offset:75*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:64 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 64, 0, x13, 75*FLEN/8, x14, x11, x12)

inst_48:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x56a477 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x51d69a and fs3 == 0 and fe3 == 0xfe and fm3 == 0x2ff034 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e56a477; op2val:0xc051d69a;
op3val:0x7f2ff034; valaddr_reg:x13; val_offset:78*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:96 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 96, 0, x13, 78*FLEN/8, x14, x11, x12)

inst_49:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x56a477 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x51d69a and fs3 == 0 and fe3 == 0xfe and fm3 == 0x2ff034 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e56a477; op2val:0xc051d69a;
op3val:0x7f2ff034; valaddr_reg:x13; val_offset:81*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:128 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 128, 0, x13, 81*FLEN/8, x14, x11, x12)

inst_50:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1304ef and fs2 == 1 and fe2 == 0x7c and fm2 == 0x557010 and fs3 == 0 and fe3 == 0xfb and fm3 == 0x7526ed and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f1304ef; op2val:0xbe557010;
op3val:0x7df526ed; valaddr_reg:x13; val_offset:84*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 84*FLEN/8, x14, x11, x12)

inst_51:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1304ef and fs2 == 1 and fe2 == 0x7c and fm2 == 0x557010 and fs3 == 0 and fe3 == 0xfb and fm3 == 0x7526ed and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f1304ef; op2val:0xbe557010;
op3val:0x7df526ed; valaddr_reg:x13; val_offset:87*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:32 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 32, 0, x13, 87*FLEN/8, x14, x11, x12)

inst_52:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1304ef and fs2 == 1 and fe2 == 0x7c and fm2 == 0x557010 and fs3 == 0 and fe3 == 0xfb and fm3 == 0x7526ed and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f1304ef; op2val:0xbe557010;
op3val:0x7df526ed; valaddr_reg:x13; val_offset:90*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:64 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 64, 0, x13, 90*FLEN/8, x14, x11, x12)

inst_53:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1304ef and fs2 == 1 and fe2 == 0x7c and fm2 == 0x557010 and fs3 == 0 and fe3 == 0xfb and fm3 == 0x7526ed and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f1304ef; op2val:0xbe557010;
op3val:0x7df526ed; valaddr_reg:x13; val_offset:93*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:96 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 96, 0, x13, 93*FLEN/8, x14, x11, x12)

inst_54:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1304ef and fs2 == 1 and fe2 == 0x7c and fm2 == 0x557010 and fs3 == 0 and fe3 == 0xfb and fm3 == 0x7526ed and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f1304ef; op2val:0xbe557010;
op3val:0x7df526ed; valaddr_reg:x13; val_offset:96*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:128 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 128, 0, x13, 96*FLEN/8, x14, x11, x12)

inst_55:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x190d5e and fs2 == 1 and fe2 == 0x7c and fm2 == 0x32420c and fs3 == 0 and fe3 == 0xfb and fm3 == 0x552591 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f190d5e; op2val:0xbe32420c;
op3val:0x7dd52591; valaddr_reg:x13; val_offset:99*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 99*FLEN/8, x14, x11, x12)

inst_56:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x190d5e and fs2 == 1 and fe2 == 0x7c and fm2 == 0x32420c and fs3 == 0 and fe3 == 0xfb and fm3 == 0x552591 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f190d5e; op2val:0xbe32420c;
op3val:0x7dd52591; valaddr_reg:x13; val_offset:102*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:32 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 32, 0, x13, 102*FLEN/8, x14, x11, x12)

inst_57:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x190d5e and fs2 == 1 and fe2 == 0x7c and fm2 == 0x32420c and fs3 == 0 and fe3 == 0xfb and fm3 == 0x552591 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f190d5e; op2val:0xbe32420c;
op3val:0x7dd52591; valaddr_reg:x13; val_offset:105*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:64 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 64, 0, x13, 105*FLEN/8, x14, x11, x12)

inst_58:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x190d5e and fs2 == 1 and fe2 == 0x7c and fm2 == 0x32420c and fs3 == 0 and fe3 == 0xfb and fm3 == 0x552591 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f190d5e; op2val:0xbe32420c;
op3val:0x7dd52591; valaddr_reg:x13; val_offset:108*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:96 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 96, 0, x13, 108*FLEN/8, x14, x11, x12)

inst_59:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x190d5e and fs2 == 1 and fe2 == 0x7c and fm2 == 0x32420c and fs3 == 0 and fe3 == 0xfb and fm3 == 0x552591 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f190d5e; op2val:0xbe32420c;
op3val:0x7dd52591; valaddr_reg:x13; val_offset:111*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:128 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 128, 0, x13, 111*FLEN/8, x14, x11, x12)

inst_60:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6d1a0c and fs2 == 1 and fe2 == 0x7c and fm2 == 0x521f16 and fs3 == 0 and fe3 == 0xfb and fm3 == 0x429c29 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7eed1a0c; op2val:0xbe521f16;
op3val:0x7dc29c29; valaddr_reg:x13; val_offset:114*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 114*FLEN/8, x14, x11, x12)

inst_61:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6d1a0c and fs2 == 1 and fe2 == 0x7c and fm2 == 0x521f16 and fs3 == 0 and fe3 == 0xfb and fm3 == 0x429c29 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7eed1a0c; op2val:0xbe521f16;
op3val:0x7dc29c29; valaddr_reg:x13; val_offset:117*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:32 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 32, 0, x13, 117*FLEN/8, x14, x11, x12)

inst_62:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6d1a0c and fs2 == 1 and fe2 == 0x7c and fm2 == 0x521f16 and fs3 == 0 and fe3 == 0xfb and fm3 == 0x429c29 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7eed1a0c; op2val:0xbe521f16;
op3val:0x7dc29c29; valaddr_reg:x13; val_offset:120*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:64 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 64, 0, x13, 120*FLEN/8, x14, x11, x12)

inst_63:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6d1a0c and fs2 == 1 and fe2 == 0x7c and fm2 == 0x521f16 and fs3 == 0 and fe3 == 0xfb and fm3 == 0x429c29 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7eed1a0c; op2val:0xbe521f16;
op3val:0x7dc29c29; valaddr_reg:x13; val_offset:123*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:96 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 96, 0, x13, 123*FLEN/8, x14, x11, x12)

inst_64:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6d1a0c and fs2 == 1 and fe2 == 0x7c and fm2 == 0x521f16 and fs3 == 0 and fe3 == 0xfb and fm3 == 0x429c29 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7eed1a0c; op2val:0xbe521f16;
op3val:0x7dc29c29; valaddr_reg:x13; val_offset:126*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:128 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 128, 0, x13, 126*FLEN/8, x14, x11, x12)

inst_65:
// fs1 == 0 and fe1 == 0xf5 and fm1 == 0x2e79de and fs2 == 1 and fe2 == 0x87 and fm2 == 0x757c34 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x274f48 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7aae79de; op2val:0xc3f57c34;
op3val:0x7f274f48; valaddr_reg:x13; val_offset:129*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 129*FLEN/8, x14, x11, x12)

inst_66:
// fs1 == 0 and fe1 == 0xf5 and fm1 == 0x2e79de and fs2 == 1 and fe2 == 0x87 and fm2 == 0x757c34 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x274f48 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7aae79de; op2val:0xc3f57c34;
op3val:0x7f274f48; valaddr_reg:x13; val_offset:132*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:32 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 32, 0, x13, 132*FLEN/8, x14, x11, x12)

inst_67:
// fs1 == 0 and fe1 == 0xf5 and fm1 == 0x2e79de and fs2 == 1 and fe2 == 0x87 and fm2 == 0x757c34 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x274f48 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7aae79de; op2val:0xc3f57c34;
op3val:0x7f274f48; valaddr_reg:x13; val_offset:135*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:64 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 64, 0, x13, 135*FLEN/8, x14, x11, x12)

inst_68:
// fs1 == 0 and fe1 == 0xf5 and fm1 == 0x2e79de and fs2 == 1 and fe2 == 0x87 and fm2 == 0x757c34 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x274f48 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7aae79de; op2val:0xc3f57c34;
op3val:0x7f274f48; valaddr_reg:x13; val_offset:138*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:96 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 96, 0, x13, 138*FLEN/8, x14, x11, x12)

inst_69:
// fs1 == 0 and fe1 == 0xf5 and fm1 == 0x2e79de and fs2 == 1 and fe2 == 0x87 and fm2 == 0x757c34 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x274f48 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7aae79de; op2val:0xc3f57c34;
op3val:0x7f274f48; valaddr_reg:x13; val_offset:141*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:128 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 128, 0, x13, 141*FLEN/8, x14, x11, x12)

inst_70:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x20dccc and fs2 == 1 and fe2 == 0x7f and fm2 == 0x03ae89 and fs3 == 0 and fe3 == 0xfc and fm3 == 0x257d51 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e20dccc; op2val:0xbf83ae89;
op3val:0x7e257d51; valaddr_reg:x13; val_offset:144*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 144*FLEN/8, x14, x11, x12)

inst_71:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x20dccc and fs2 == 1 and fe2 == 0x7f and fm2 == 0x03ae89 and fs3 == 0 and fe3 == 0xfc and fm3 == 0x257d51 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e20dccc; op2val:0xbf83ae89;
op3val:0x7e257d51; valaddr_reg:x13; val_offset:147*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:32 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 32, 0, x13, 147*FLEN/8, x14, x11, x12)

inst_72:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x20dccc and fs2 == 1 and fe2 == 0x7f and fm2 == 0x03ae89 and fs3 == 0 and fe3 == 0xfc and fm3 == 0x257d51 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e20dccc; op2val:0xbf83ae89;
op3val:0x7e257d51; valaddr_reg:x13; val_offset:150*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:64 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 64, 0, x13, 150*FLEN/8, x14, x11, x12)

inst_73:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x20dccc and fs2 == 1 and fe2 == 0x7f and fm2 == 0x03ae89 and fs3 == 0 and fe3 == 0xfc and fm3 == 0x257d51 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e20dccc; op2val:0xbf83ae89;
op3val:0x7e257d51; valaddr_reg:x13; val_offset:153*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:96 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 96, 0, x13, 153*FLEN/8, x14, x11, x12)

inst_74:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x20dccc and fs2 == 1 and fe2 == 0x7f and fm2 == 0x03ae89 and fs3 == 0 and fe3 == 0xfc and fm3 == 0x257d51 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e20dccc; op2val:0xbf83ae89;
op3val:0x7e257d51; valaddr_reg:x13; val_offset:156*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:128 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 128, 0, x13, 156*FLEN/8, x14, x11, x12)

inst_75:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3c9ff5 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x635528 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x278095 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f3c9ff5; op2val:0xbf635528;
op3val:0x7f278095; valaddr_reg:x13; val_offset:159*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 159*FLEN/8, x14, x11, x12)

inst_76:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3c9ff5 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x635528 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x278095 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f3c9ff5; op2val:0xbf635528;
op3val:0x7f278095; valaddr_reg:x13; val_offset:162*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:32 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 32, 0, x13, 162*FLEN/8, x14, x11, x12)

inst_77:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3c9ff5 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x635528 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x278095 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f3c9ff5; op2val:0xbf635528;
op3val:0x7f278095; valaddr_reg:x13; val_offset:165*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:64 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 64, 0, x13, 165*FLEN/8, x14, x11, x12)

inst_78:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3c9ff5 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x635528 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x278095 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f3c9ff5; op2val:0xbf635528;
op3val:0x7f278095; valaddr_reg:x13; val_offset:168*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:96 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 96, 0, x13, 168*FLEN/8, x14, x11, x12)

inst_79:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3c9ff5 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x635528 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x278095 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f3c9ff5; op2val:0xbf635528;
op3val:0x7f278095; valaddr_reg:x13; val_offset:171*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:128 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 128, 0, x13, 171*FLEN/8, x14, x11, x12)

inst_80:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x5e2fb5 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x54b2a7 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x389a90 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e5e2fb5; op2val:0xc054b2a7;
op3val:0x7f389a90; valaddr_reg:x13; val_offset:174*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 174*FLEN/8, x14, x11, x12)

inst_81:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x5e2fb5 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x54b2a7 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x389a90 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e5e2fb5; op2val:0xc054b2a7;
op3val:0x7f389a90; valaddr_reg:x13; val_offset:177*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:32 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 32, 0, x13, 177*FLEN/8, x14, x11, x12)

inst_82:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x5e2fb5 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x54b2a7 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x389a90 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e5e2fb5; op2val:0xc054b2a7;
op3val:0x7f389a90; valaddr_reg:x13; val_offset:180*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:64 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 64, 0, x13, 180*FLEN/8, x14, x11, x12)

inst_83:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x5e2fb5 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x54b2a7 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x389a90 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e5e2fb5; op2val:0xc054b2a7;
op3val:0x7f389a90; valaddr_reg:x13; val_offset:183*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:96 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 96, 0, x13, 183*FLEN/8, x14, x11, x12)

inst_84:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x5e2fb5 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x54b2a7 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x389a90 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e5e2fb5; op2val:0xc054b2a7;
op3val:0x7f389a90; valaddr_reg:x13; val_offset:186*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:128 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 128, 0, x13, 186*FLEN/8, x14, x11, x12)

inst_85:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4f0fd2 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x20e6fd and fs3 == 0 and fe3 == 0xfe and fm3 == 0x0224b8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ecf0fd2; op2val:0xbfa0e6fd;
op3val:0x7f0224b8; valaddr_reg:x13; val_offset:189*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 189*FLEN/8, x14, x11, x12)

inst_86:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4f0fd2 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x20e6fd and fs3 == 0 and fe3 == 0xfe and fm3 == 0x0224b8 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ecf0fd2; op2val:0xbfa0e6fd;
op3val:0x7f0224b8; valaddr_reg:x13; val_offset:192*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:32 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 32, 0, x13, 192*FLEN/8, x14, x11, x12)

inst_87:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4f0fd2 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x20e6fd and fs3 == 0 and fe3 == 0xfe and fm3 == 0x0224b8 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ecf0fd2; op2val:0xbfa0e6fd;
op3val:0x7f0224b8; valaddr_reg:x13; val_offset:195*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:64 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 64, 0, x13, 195*FLEN/8, x14, x11, x12)

inst_88:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4f0fd2 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x20e6fd and fs3 == 0 and fe3 == 0xfe and fm3 == 0x0224b8 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ecf0fd2; op2val:0xbfa0e6fd;
op3val:0x7f0224b8; valaddr_reg:x13; val_offset:198*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:96 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 96, 0, x13, 198*FLEN/8, x14, x11, x12)

inst_89:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4f0fd2 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x20e6fd and fs3 == 0 and fe3 == 0xfe and fm3 == 0x0224b8 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ecf0fd2; op2val:0xbfa0e6fd;
op3val:0x7f0224b8; valaddr_reg:x13; val_offset:201*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:128 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 128, 0, x13, 201*FLEN/8, x14, x11, x12)

inst_90:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1d454a and fs2 == 1 and fe2 == 0x81 and fm2 == 0x130ace and fs3 == 0 and fe3 == 0xfe and fm3 == 0x34aad9 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e1d454a; op2val:0xc0930ace;
op3val:0x7f34aad9; valaddr_reg:x13; val_offset:204*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 204*FLEN/8, x14, x11, x12)

inst_91:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1d454a and fs2 == 1 and fe2 == 0x81 and fm2 == 0x130ace and fs3 == 0 and fe3 == 0xfe and fm3 == 0x34aad9 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e1d454a; op2val:0xc0930ace;
op3val:0x7f34aad9; valaddr_reg:x13; val_offset:207*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:32 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 32, 0, x13, 207*FLEN/8, x14, x11, x12)

inst_92:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1d454a and fs2 == 1 and fe2 == 0x81 and fm2 == 0x130ace and fs3 == 0 and fe3 == 0xfe and fm3 == 0x34aad9 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e1d454a; op2val:0xc0930ace;
op3val:0x7f34aad9; valaddr_reg:x13; val_offset:210*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:64 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 64, 0, x13, 210*FLEN/8, x14, x11, x12)

inst_93:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1d454a and fs2 == 1 and fe2 == 0x81 and fm2 == 0x130ace and fs3 == 0 and fe3 == 0xfe and fm3 == 0x34aad9 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e1d454a; op2val:0xc0930ace;
op3val:0x7f34aad9; valaddr_reg:x13; val_offset:213*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:96 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 96, 0, x13, 213*FLEN/8, x14, x11, x12)

inst_94:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1d454a and fs2 == 1 and fe2 == 0x81 and fm2 == 0x130ace and fs3 == 0 and fe3 == 0xfe and fm3 == 0x34aad9 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e1d454a; op2val:0xc0930ace;
op3val:0x7f34aad9; valaddr_reg:x13; val_offset:216*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:128 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 128, 0, x13, 216*FLEN/8, x14, x11, x12)

inst_95:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x049a6e and fs2 == 1 and fe2 == 0x7f and fm2 == 0x332355 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x399491 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f049a6e; op2val:0xbfb32355;
op3val:0x7f399491; valaddr_reg:x13; val_offset:219*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 219*FLEN/8, x14, x11, x12)

inst_96:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x049a6e and fs2 == 1 and fe2 == 0x7f and fm2 == 0x332355 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x399491 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f049a6e; op2val:0xbfb32355;
op3val:0x7f399491; valaddr_reg:x13; val_offset:222*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:32 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 32, 0, x13, 222*FLEN/8, x14, x11, x12)

inst_97:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x049a6e and fs2 == 1 and fe2 == 0x7f and fm2 == 0x332355 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x399491 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f049a6e; op2val:0xbfb32355;
op3val:0x7f399491; valaddr_reg:x13; val_offset:225*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:64 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 64, 0, x13, 225*FLEN/8, x14, x11, x12)

inst_98:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x049a6e and fs2 == 1 and fe2 == 0x7f and fm2 == 0x332355 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x399491 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f049a6e; op2val:0xbfb32355;
op3val:0x7f399491; valaddr_reg:x13; val_offset:228*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:96 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 96, 0, x13, 228*FLEN/8, x14, x11, x12)

inst_99:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x049a6e and fs2 == 1 and fe2 == 0x7f and fm2 == 0x332355 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x399491 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f049a6e; op2val:0xbfb32355;
op3val:0x7f399491; valaddr_reg:x13; val_offset:231*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:128 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 128, 0, x13, 231*FLEN/8, x14, x11, x12)

inst_100:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2b9930 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x2b2afd and fs3 == 0 and fe3 == 0xfc and fm3 == 0x657849 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f2b9930; op2val:0xbeab2afd;
op3val:0x7e657849; valaddr_reg:x13; val_offset:234*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 234*FLEN/8, x14, x11, x12)

inst_101:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2b9930 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x2b2afd and fs3 == 0 and fe3 == 0xfc and fm3 == 0x657849 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f2b9930; op2val:0xbeab2afd;
op3val:0x7e657849; valaddr_reg:x13; val_offset:237*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:32 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 32, 0, x13, 237*FLEN/8, x14, x11, x12)

inst_102:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2b9930 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x2b2afd and fs3 == 0 and fe3 == 0xfc and fm3 == 0x657849 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f2b9930; op2val:0xbeab2afd;
op3val:0x7e657849; valaddr_reg:x13; val_offset:240*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:64 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 64, 0, x13, 240*FLEN/8, x14, x11, x12)

inst_103:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2b9930 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x2b2afd and fs3 == 0 and fe3 == 0xfc and fm3 == 0x657849 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f2b9930; op2val:0xbeab2afd;
op3val:0x7e657849; valaddr_reg:x13; val_offset:243*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:96 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 96, 0, x13, 243*FLEN/8, x14, x11, x12)

inst_104:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2b9930 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x2b2afd and fs3 == 0 and fe3 == 0xfc and fm3 == 0x657849 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f2b9930; op2val:0xbeab2afd;
op3val:0x7e657849; valaddr_reg:x13; val_offset:246*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:128 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 128, 0, x13, 246*FLEN/8, x14, x11, x12)

inst_105:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0ab269 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x6b3fb1 and fs3 == 0 and fe3 == 0xfb and fm3 == 0x7ee893 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e8ab269; op2val:0xbeeb3fb1;
op3val:0x7dfee893; valaddr_reg:x13; val_offset:249*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 249*FLEN/8, x14, x11, x12)

inst_106:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0ab269 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x6b3fb1 and fs3 == 0 and fe3 == 0xfb and fm3 == 0x7ee893 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e8ab269; op2val:0xbeeb3fb1;
op3val:0x7dfee893; valaddr_reg:x13; val_offset:252*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:32 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 32, 0, x13, 252*FLEN/8, x14, x11, x12)

inst_107:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0ab269 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x6b3fb1 and fs3 == 0 and fe3 == 0xfb and fm3 == 0x7ee893 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e8ab269; op2val:0xbeeb3fb1;
op3val:0x7dfee893; valaddr_reg:x13; val_offset:255*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:64 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 64, 0, x13, 255*FLEN/8, x14, x11, x12)

inst_108:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0ab269 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x6b3fb1 and fs3 == 0 and fe3 == 0xfb and fm3 == 0x7ee893 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e8ab269; op2val:0xbeeb3fb1;
op3val:0x7dfee893; valaddr_reg:x13; val_offset:258*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:96 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 96, 0, x13, 258*FLEN/8, x14, x11, x12)

inst_109:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0ab269 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x6b3fb1 and fs3 == 0 and fe3 == 0xfb and fm3 == 0x7ee893 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e8ab269; op2val:0xbeeb3fb1;
op3val:0x7dfee893; valaddr_reg:x13; val_offset:261*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:128 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 128, 0, x13, 261*FLEN/8, x14, x11, x12)

inst_110:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x5fcc51 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x64e70b and fs3 == 0 and fe3 == 0xfa and fm3 == 0x481bf3 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ddfcc51; op2val:0xbee4e70b;
op3val:0x7d481bf3; valaddr_reg:x13; val_offset:264*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 264*FLEN/8, x14, x11, x12)

inst_111:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x5fcc51 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x64e70b and fs3 == 0 and fe3 == 0xfa and fm3 == 0x481bf3 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ddfcc51; op2val:0xbee4e70b;
op3val:0x7d481bf3; valaddr_reg:x13; val_offset:267*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:32 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 32, 0, x13, 267*FLEN/8, x14, x11, x12)

inst_112:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x5fcc51 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x64e70b and fs3 == 0 and fe3 == 0xfa and fm3 == 0x481bf3 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ddfcc51; op2val:0xbee4e70b;
op3val:0x7d481bf3; valaddr_reg:x13; val_offset:270*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:64 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 64, 0, x13, 270*FLEN/8, x14, x11, x12)

inst_113:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x5fcc51 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x64e70b and fs3 == 0 and fe3 == 0xfa and fm3 == 0x481bf3 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ddfcc51; op2val:0xbee4e70b;
op3val:0x7d481bf3; valaddr_reg:x13; val_offset:273*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:96 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 96, 0, x13, 273*FLEN/8, x14, x11, x12)

inst_114:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x5fcc51 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x64e70b and fs3 == 0 and fe3 == 0xfa and fm3 == 0x481bf3 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ddfcc51; op2val:0xbee4e70b;
op3val:0x7d481bf3; valaddr_reg:x13; val_offset:276*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:128 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 128, 0, x13, 276*FLEN/8, x14, x11, x12)

inst_115:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x67719b and fs2 == 1 and fe2 == 0x80 and fm2 == 0x00154c and fs3 == 0 and fe3 == 0xfd and fm3 == 0x67981f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e67719b; op2val:0xc000154c;
op3val:0x7ee7981f; valaddr_reg:x13; val_offset:279*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 279*FLEN/8, x14, x11, x12)

inst_116:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x67719b and fs2 == 1 and fe2 == 0x80 and fm2 == 0x00154c and fs3 == 0 and fe3 == 0xfd and fm3 == 0x67981f and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e67719b; op2val:0xc000154c;
op3val:0x7ee7981f; valaddr_reg:x13; val_offset:282*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:32 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 32, 0, x13, 282*FLEN/8, x14, x11, x12)

inst_117:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x67719b and fs2 == 1 and fe2 == 0x80 and fm2 == 0x00154c and fs3 == 0 and fe3 == 0xfd and fm3 == 0x67981f and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e67719b; op2val:0xc000154c;
op3val:0x7ee7981f; valaddr_reg:x13; val_offset:285*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:64 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 64, 0, x13, 285*FLEN/8, x14, x11, x12)

inst_118:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x67719b and fs2 == 1 and fe2 == 0x80 and fm2 == 0x00154c and fs3 == 0 and fe3 == 0xfd and fm3 == 0x67981f and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e67719b; op2val:0xc000154c;
op3val:0x7ee7981f; valaddr_reg:x13; val_offset:288*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:96 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 96, 0, x13, 288*FLEN/8, x14, x11, x12)

inst_119:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x67719b and fs2 == 1 and fe2 == 0x80 and fm2 == 0x00154c and fs3 == 0 and fe3 == 0xfd and fm3 == 0x67981f and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e67719b; op2val:0xc000154c;
op3val:0x7ee7981f; valaddr_reg:x13; val_offset:291*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:128 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 128, 0, x13, 291*FLEN/8, x14, x11, x12)

inst_120:
// fs1 == 0 and fe1 == 0xf6 and fm1 == 0x26497d and fs2 == 1 and fe2 == 0x86 and fm2 == 0x486327 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x0229d2 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7b26497d; op2val:0xc3486327;
op3val:0x7f0229d2; valaddr_reg:x13; val_offset:294*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 294*FLEN/8, x14, x11, x12)

inst_121:
// fs1 == 0 and fe1 == 0xf6 and fm1 == 0x26497d and fs2 == 1 and fe2 == 0x86 and fm2 == 0x486327 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x0229d2 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7b26497d; op2val:0xc3486327;
op3val:0x7f0229d2; valaddr_reg:x13; val_offset:297*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:32 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 32, 0, x13, 297*FLEN/8, x14, x11, x12)

inst_122:
// fs1 == 0 and fe1 == 0xf6 and fm1 == 0x26497d and fs2 == 1 and fe2 == 0x86 and fm2 == 0x486327 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x0229d2 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7b26497d; op2val:0xc3486327;
op3val:0x7f0229d2; valaddr_reg:x13; val_offset:300*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:64 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 64, 0, x13, 300*FLEN/8, x14, x11, x12)

inst_123:
// fs1 == 0 and fe1 == 0xf6 and fm1 == 0x26497d and fs2 == 1 and fe2 == 0x86 and fm2 == 0x486327 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x0229d2 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7b26497d; op2val:0xc3486327;
op3val:0x7f0229d2; valaddr_reg:x13; val_offset:303*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:96 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 96, 0, x13, 303*FLEN/8, x14, x11, x12)

inst_124:
// fs1 == 0 and fe1 == 0xf6 and fm1 == 0x26497d and fs2 == 1 and fe2 == 0x86 and fm2 == 0x486327 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x0229d2 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7b26497d; op2val:0xc3486327;
op3val:0x7f0229d2; valaddr_reg:x13; val_offset:306*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:128 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 128, 0, x13, 306*FLEN/8, x14, x11, x12)

inst_125:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x01c09c and fs2 == 1 and fe2 == 0x7e and fm2 == 0x6ad52b and fs3 == 0 and fe3 == 0xfc and fm3 == 0x6e0c34 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e81c09c; op2val:0xbf6ad52b;
op3val:0x7e6e0c34; valaddr_reg:x13; val_offset:309*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 309*FLEN/8, x14, x11, x12)

inst_126:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x01c09c and fs2 == 1 and fe2 == 0x7e and fm2 == 0x6ad52b and fs3 == 0 and fe3 == 0xfc and fm3 == 0x6e0c34 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e81c09c; op2val:0xbf6ad52b;
op3val:0x7e6e0c34; valaddr_reg:x13; val_offset:312*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:32 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 32, 0, x13, 312*FLEN/8, x14, x11, x12)

inst_127:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x01c09c and fs2 == 1 and fe2 == 0x7e and fm2 == 0x6ad52b and fs3 == 0 and fe3 == 0xfc and fm3 == 0x6e0c34 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e81c09c; op2val:0xbf6ad52b;
op3val:0x7e6e0c34; valaddr_reg:x13; val_offset:315*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:64 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 64, 0, x13, 315*FLEN/8, x14, x11, x12)

inst_128:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x01c09c and fs2 == 1 and fe2 == 0x7e and fm2 == 0x6ad52b and fs3 == 0 and fe3 == 0xfc and fm3 == 0x6e0c34 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e81c09c; op2val:0xbf6ad52b;
op3val:0x7e6e0c34; valaddr_reg:x13; val_offset:318*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:96 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 96, 0, x13, 318*FLEN/8, x14, x11, x12)

inst_129:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x01c09c and fs2 == 1 and fe2 == 0x7e and fm2 == 0x6ad52b and fs3 == 0 and fe3 == 0xfc and fm3 == 0x6e0c34 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e81c09c; op2val:0xbf6ad52b;
op3val:0x7e6e0c34; valaddr_reg:x13; val_offset:321*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:128 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 128, 0, x13, 321*FLEN/8, x14, x11, x12)

inst_130:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1d27cc and fs2 == 1 and fe2 == 0x7e and fm2 == 0x165ba8 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x389b2c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f1d27cc; op2val:0xbf165ba8;
op3val:0x7eb89b2c; valaddr_reg:x13; val_offset:324*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 324*FLEN/8, x14, x11, x12)

inst_131:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1d27cc and fs2 == 1 and fe2 == 0x7e and fm2 == 0x165ba8 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x389b2c and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f1d27cc; op2val:0xbf165ba8;
op3val:0x7eb89b2c; valaddr_reg:x13; val_offset:327*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:32 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 32, 0, x13, 327*FLEN/8, x14, x11, x12)

inst_132:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1d27cc and fs2 == 1 and fe2 == 0x7e and fm2 == 0x165ba8 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x389b2c and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f1d27cc; op2val:0xbf165ba8;
op3val:0x7eb89b2c; valaddr_reg:x13; val_offset:330*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:64 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 64, 0, x13, 330*FLEN/8, x14, x11, x12)

inst_133:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1d27cc and fs2 == 1 and fe2 == 0x7e and fm2 == 0x165ba8 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x389b2c and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f1d27cc; op2val:0xbf165ba8;
op3val:0x7eb89b2c; valaddr_reg:x13; val_offset:333*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:96 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 96, 0, x13, 333*FLEN/8, x14, x11, x12)

inst_134:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1d27cc and fs2 == 1 and fe2 == 0x7e and fm2 == 0x165ba8 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x389b2c and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f1d27cc; op2val:0xbf165ba8;
op3val:0x7eb89b2c; valaddr_reg:x13; val_offset:336*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:128 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 128, 0, x13, 336*FLEN/8, x14, x11, x12)

inst_135:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x728772 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x430d36 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x38c9b0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e728772; op2val:0xbfc30d36;
op3val:0x7eb8c9b0; valaddr_reg:x13; val_offset:339*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 339*FLEN/8, x14, x11, x12)

inst_136:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x728772 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x430d36 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x38c9b0 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e728772; op2val:0xbfc30d36;
op3val:0x7eb8c9b0; valaddr_reg:x13; val_offset:342*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:32 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 32, 0, x13, 342*FLEN/8, x14, x11, x12)

inst_137:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x728772 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x430d36 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x38c9b0 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e728772; op2val:0xbfc30d36;
op3val:0x7eb8c9b0; valaddr_reg:x13; val_offset:345*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:64 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 64, 0, x13, 345*FLEN/8, x14, x11, x12)

inst_138:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x728772 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x430d36 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x38c9b0 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e728772; op2val:0xbfc30d36;
op3val:0x7eb8c9b0; valaddr_reg:x13; val_offset:348*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:96 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 96, 0, x13, 348*FLEN/8, x14, x11, x12)

inst_139:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x728772 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x430d36 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x38c9b0 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e728772; op2val:0xbfc30d36;
op3val:0x7eb8c9b0; valaddr_reg:x13; val_offset:351*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:128 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 128, 0, x13, 351*FLEN/8, x14, x11, x12)

inst_140:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x074be5 and fs2 == 1 and fe2 == 0x7b and fm2 == 0x25a9d6 and fs3 == 0 and fe3 == 0xfa and fm3 == 0x2f1b5a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f074be5; op2val:0xbda5a9d6;
op3val:0x7d2f1b5a; valaddr_reg:x13; val_offset:354*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 354*FLEN/8, x14, x11, x12)

inst_141:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x074be5 and fs2 == 1 and fe2 == 0x7b and fm2 == 0x25a9d6 and fs3 == 0 and fe3 == 0xfa and fm3 == 0x2f1b5a and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f074be5; op2val:0xbda5a9d6;
op3val:0x7d2f1b5a; valaddr_reg:x13; val_offset:357*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:32 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 32, 0, x13, 357*FLEN/8, x14, x11, x12)

inst_142:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x074be5 and fs2 == 1 and fe2 == 0x7b and fm2 == 0x25a9d6 and fs3 == 0 and fe3 == 0xfa and fm3 == 0x2f1b5a and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f074be5; op2val:0xbda5a9d6;
op3val:0x7d2f1b5a; valaddr_reg:x13; val_offset:360*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:64 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 64, 0, x13, 360*FLEN/8, x14, x11, x12)

inst_143:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x074be5 and fs2 == 1 and fe2 == 0x7b and fm2 == 0x25a9d6 and fs3 == 0 and fe3 == 0xfa and fm3 == 0x2f1b5a and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f074be5; op2val:0xbda5a9d6;
op3val:0x7d2f1b5a; valaddr_reg:x13; val_offset:363*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:96 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 96, 0, x13, 363*FLEN/8, x14, x11, x12)

inst_144:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x074be5 and fs2 == 1 and fe2 == 0x7b and fm2 == 0x25a9d6 and fs3 == 0 and fe3 == 0xfa and fm3 == 0x2f1b5a and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f074be5; op2val:0xbda5a9d6;
op3val:0x7d2f1b5a; valaddr_reg:x13; val_offset:366*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:128 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 128, 0, x13, 366*FLEN/8, x14, x11, x12)

inst_145:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3b3817 and fs2 == 1 and fe2 == 0x79 and fm2 == 0x401917 and fs3 == 0 and fe3 == 0xf9 and fm3 == 0x0c7c6b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f3b3817; op2val:0xbcc01917;
op3val:0x7c8c7c6b; valaddr_reg:x13; val_offset:369*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 369*FLEN/8, x14, x11, x12)

inst_146:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3b3817 and fs2 == 1 and fe2 == 0x79 and fm2 == 0x401917 and fs3 == 0 and fe3 == 0xf9 and fm3 == 0x0c7c6b and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f3b3817; op2val:0xbcc01917;
op3val:0x7c8c7c6b; valaddr_reg:x13; val_offset:372*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:32 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 32, 0, x13, 372*FLEN/8, x14, x11, x12)

inst_147:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3b3817 and fs2 == 1 and fe2 == 0x79 and fm2 == 0x401917 and fs3 == 0 and fe3 == 0xf9 and fm3 == 0x0c7c6b and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f3b3817; op2val:0xbcc01917;
op3val:0x7c8c7c6b; valaddr_reg:x13; val_offset:375*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:64 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 64, 0, x13, 375*FLEN/8, x14, x11, x12)

inst_148:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3b3817 and fs2 == 1 and fe2 == 0x79 and fm2 == 0x401917 and fs3 == 0 and fe3 == 0xf9 and fm3 == 0x0c7c6b and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f3b3817; op2val:0xbcc01917;
op3val:0x7c8c7c6b; valaddr_reg:x13; val_offset:378*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:96 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 96, 0, x13, 378*FLEN/8, x14, x11, x12)

inst_149:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3b3817 and fs2 == 1 and fe2 == 0x79 and fm2 == 0x401917 and fs3 == 0 and fe3 == 0xf9 and fm3 == 0x0c7c6b and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f3b3817; op2val:0xbcc01917;
op3val:0x7c8c7c6b; valaddr_reg:x13; val_offset:381*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:128 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 128, 0, x13, 381*FLEN/8, x14, x11, x12)
RVTEST_SIGBASE(x11,signature_x11_1)

inst_150:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0ff5ec and fs2 == 1 and fe2 == 0x7f and fm2 == 0x103b80 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x223795 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f0ff5ec; op2val:0xbf903b80;
op3val:0x7f223795; valaddr_reg:x13; val_offset:384*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 384*FLEN/8, x14, x11, x12)

inst_151:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0ff5ec and fs2 == 1 and fe2 == 0x7f and fm2 == 0x103b80 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x223795 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f0ff5ec; op2val:0xbf903b80;
op3val:0x7f223795; valaddr_reg:x13; val_offset:387*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:32 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 32, 0, x13, 387*FLEN/8, x14, x11, x12)

inst_152:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0ff5ec and fs2 == 1 and fe2 == 0x7f and fm2 == 0x103b80 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x223795 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f0ff5ec; op2val:0xbf903b80;
op3val:0x7f223795; valaddr_reg:x13; val_offset:390*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:64 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 64, 0, x13, 390*FLEN/8, x14, x11, x12)

inst_153:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0ff5ec and fs2 == 1 and fe2 == 0x7f and fm2 == 0x103b80 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x223795 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f0ff5ec; op2val:0xbf903b80;
op3val:0x7f223795; valaddr_reg:x13; val_offset:393*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:96 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 96, 0, x13, 393*FLEN/8, x14, x11, x12)

inst_154:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0ff5ec and fs2 == 1 and fe2 == 0x7f and fm2 == 0x103b80 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x223795 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f0ff5ec; op2val:0xbf903b80;
op3val:0x7f223795; valaddr_reg:x13; val_offset:396*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:128 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 128, 0, x13, 396*FLEN/8, x14, x11, x12)

inst_155:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x5e038c and fs2 == 1 and fe2 == 0x84 and fm2 == 0x2e660b and fs3 == 0 and fe3 == 0xfe and fm3 == 0x173ee9 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7c5e038c; op2val:0xc22e660b;
op3val:0x7f173ee9; valaddr_reg:x13; val_offset:399*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 399*FLEN/8, x14, x11, x12)

inst_156:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x5e038c and fs2 == 1 and fe2 == 0x84 and fm2 == 0x2e660b and fs3 == 0 and fe3 == 0xfe and fm3 == 0x173ee9 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7c5e038c; op2val:0xc22e660b;
op3val:0x7f173ee9; valaddr_reg:x13; val_offset:402*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:32 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 32, 0, x13, 402*FLEN/8, x14, x11, x12)

inst_157:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x5e038c and fs2 == 1 and fe2 == 0x84 and fm2 == 0x2e660b and fs3 == 0 and fe3 == 0xfe and fm3 == 0x173ee9 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7c5e038c; op2val:0xc22e660b;
op3val:0x7f173ee9; valaddr_reg:x13; val_offset:405*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:64 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 64, 0, x13, 405*FLEN/8, x14, x11, x12)

inst_158:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x5e038c and fs2 == 1 and fe2 == 0x84 and fm2 == 0x2e660b and fs3 == 0 and fe3 == 0xfe and fm3 == 0x173ee9 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7c5e038c; op2val:0xc22e660b;
op3val:0x7f173ee9; valaddr_reg:x13; val_offset:408*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:96 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 96, 0, x13, 408*FLEN/8, x14, x11, x12)

inst_159:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x5e038c and fs2 == 1 and fe2 == 0x84 and fm2 == 0x2e660b and fs3 == 0 and fe3 == 0xfe and fm3 == 0x173ee9 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7c5e038c; op2val:0xc22e660b;
op3val:0x7f173ee9; valaddr_reg:x13; val_offset:411*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:128 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 128, 0, x13, 411*FLEN/8, x14, x11, x12)

inst_160:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0c9d65 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x4a38ba and fs3 == 0 and fe3 == 0xfd and fm3 == 0x5e26b6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e8c9d65; op2val:0xbfca38ba;
op3val:0x7ede26b6; valaddr_reg:x13; val_offset:414*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 414*FLEN/8, x14, x11, x12)

inst_161:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0c9d65 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x4a38ba and fs3 == 0 and fe3 == 0xfd and fm3 == 0x5e26b6 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e8c9d65; op2val:0xbfca38ba;
op3val:0x7ede26b6; valaddr_reg:x13; val_offset:417*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:32 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 32, 0, x13, 417*FLEN/8, x14, x11, x12)

inst_162:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0c9d65 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x4a38ba and fs3 == 0 and fe3 == 0xfd and fm3 == 0x5e26b6 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e8c9d65; op2val:0xbfca38ba;
op3val:0x7ede26b6; valaddr_reg:x13; val_offset:420*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:64 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 64, 0, x13, 420*FLEN/8, x14, x11, x12)

inst_163:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0c9d65 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x4a38ba and fs3 == 0 and fe3 == 0xfd and fm3 == 0x5e26b6 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e8c9d65; op2val:0xbfca38ba;
op3val:0x7ede26b6; valaddr_reg:x13; val_offset:423*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:96 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 96, 0, x13, 423*FLEN/8, x14, x11, x12)

inst_164:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0c9d65 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x4a38ba and fs3 == 0 and fe3 == 0xfd and fm3 == 0x5e26b6 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e8c9d65; op2val:0xbfca38ba;
op3val:0x7ede26b6; valaddr_reg:x13; val_offset:426*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:128 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 128, 0, x13, 426*FLEN/8, x14, x11, x12)

inst_165:
// fs1 == 0 and fe1 == 0xf7 and fm1 == 0x5f1c44 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x24b4d2 and fs3 == 0 and fe3 == 0xfa and fm3 == 0x0f8bb3 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7bdf1c44; op2val:0xc0a4b4d2;
op3val:0x7d0f8bb3; valaddr_reg:x13; val_offset:429*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 429*FLEN/8, x14, x11, x12)

inst_166:
// fs1 == 0 and fe1 == 0xf7 and fm1 == 0x5f1c44 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x24b4d2 and fs3 == 0 and fe3 == 0xfa and fm3 == 0x0f8bb3 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7bdf1c44; op2val:0xc0a4b4d2;
op3val:0x7d0f8bb3; valaddr_reg:x13; val_offset:432*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:32 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 32, 0, x13, 432*FLEN/8, x14, x11, x12)

inst_167:
// fs1 == 0 and fe1 == 0xf7 and fm1 == 0x5f1c44 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x24b4d2 and fs3 == 0 and fe3 == 0xfa and fm3 == 0x0f8bb3 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7bdf1c44; op2val:0xc0a4b4d2;
op3val:0x7d0f8bb3; valaddr_reg:x13; val_offset:435*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:64 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 64, 0, x13, 435*FLEN/8, x14, x11, x12)

inst_168:
// fs1 == 0 and fe1 == 0xf7 and fm1 == 0x5f1c44 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x24b4d2 and fs3 == 0 and fe3 == 0xfa and fm3 == 0x0f8bb3 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7bdf1c44; op2val:0xc0a4b4d2;
op3val:0x7d0f8bb3; valaddr_reg:x13; val_offset:438*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:96 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 96, 0, x13, 438*FLEN/8, x14, x11, x12)

inst_169:
// fs1 == 0 and fe1 == 0xf7 and fm1 == 0x5f1c44 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x24b4d2 and fs3 == 0 and fe3 == 0xfa and fm3 == 0x0f8bb3 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7bdf1c44; op2val:0xc0a4b4d2;
op3val:0x7d0f8bb3; valaddr_reg:x13; val_offset:441*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:128 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 128, 0, x13, 441*FLEN/8, x14, x11, x12)

inst_170:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0af237 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x28f25d and fs3 == 0 and fe3 == 0xfe and fm3 == 0x376500 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e0af237; op2val:0xc0a8f25d;
op3val:0x7f376500; valaddr_reg:x13; val_offset:444*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 444*FLEN/8, x14, x11, x12)

inst_171:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0af237 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x28f25d and fs3 == 0 and fe3 == 0xfe and fm3 == 0x376500 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e0af237; op2val:0xc0a8f25d;
op3val:0x7f376500; valaddr_reg:x13; val_offset:447*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:32 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 32, 0, x13, 447*FLEN/8, x14, x11, x12)

inst_172:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0af237 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x28f25d and fs3 == 0 and fe3 == 0xfe and fm3 == 0x376500 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e0af237; op2val:0xc0a8f25d;
op3val:0x7f376500; valaddr_reg:x13; val_offset:450*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:64 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 64, 0, x13, 450*FLEN/8, x14, x11, x12)

inst_173:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0af237 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x28f25d and fs3 == 0 and fe3 == 0xfe and fm3 == 0x376500 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e0af237; op2val:0xc0a8f25d;
op3val:0x7f376500; valaddr_reg:x13; val_offset:453*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:96 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 96, 0, x13, 453*FLEN/8, x14, x11, x12)

inst_174:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0af237 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x28f25d and fs3 == 0 and fe3 == 0xfe and fm3 == 0x376500 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e0af237; op2val:0xc0a8f25d;
op3val:0x7f376500; valaddr_reg:x13; val_offset:456*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:128 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 128, 0, x13, 456*FLEN/8, x14, x11, x12)

inst_175:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x16edbb and fs2 == 1 and fe2 == 0x80 and fm2 == 0x761db3 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x1119f4 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e16edbb; op2val:0xc0761db3;
op3val:0x7f1119f4; valaddr_reg:x13; val_offset:459*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 459*FLEN/8, x14, x11, x12)

inst_176:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x16edbb and fs2 == 1 and fe2 == 0x80 and fm2 == 0x761db3 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x1119f4 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e16edbb; op2val:0xc0761db3;
op3val:0x7f1119f4; valaddr_reg:x13; val_offset:462*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:32 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 32, 0, x13, 462*FLEN/8, x14, x11, x12)

inst_177:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x16edbb and fs2 == 1 and fe2 == 0x80 and fm2 == 0x761db3 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x1119f4 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e16edbb; op2val:0xc0761db3;
op3val:0x7f1119f4; valaddr_reg:x13; val_offset:465*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:64 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 64, 0, x13, 465*FLEN/8, x14, x11, x12)

inst_178:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x16edbb and fs2 == 1 and fe2 == 0x80 and fm2 == 0x761db3 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x1119f4 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e16edbb; op2val:0xc0761db3;
op3val:0x7f1119f4; valaddr_reg:x13; val_offset:468*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:96 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 96, 0, x13, 468*FLEN/8, x14, x11, x12)

inst_179:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x16edbb and fs2 == 1 and fe2 == 0x80 and fm2 == 0x761db3 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x1119f4 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e16edbb; op2val:0xc0761db3;
op3val:0x7f1119f4; valaddr_reg:x13; val_offset:471*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:128 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 128, 0, x13, 471*FLEN/8, x14, x11, x12)

inst_180:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x327e6a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x01b4a9 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x34df56 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f327e6a; op2val:0xbf81b4a9;
op3val:0x7f34df56; valaddr_reg:x13; val_offset:474*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 474*FLEN/8, x14, x11, x12)

inst_181:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x327e6a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x01b4a9 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x34df56 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f327e6a; op2val:0xbf81b4a9;
op3val:0x7f34df56; valaddr_reg:x13; val_offset:477*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:32 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 32, 0, x13, 477*FLEN/8, x14, x11, x12)

inst_182:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x327e6a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x01b4a9 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x34df56 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f327e6a; op2val:0xbf81b4a9;
op3val:0x7f34df56; valaddr_reg:x13; val_offset:480*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:64 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 64, 0, x13, 480*FLEN/8, x14, x11, x12)

inst_183:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x327e6a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x01b4a9 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x34df56 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f327e6a; op2val:0xbf81b4a9;
op3val:0x7f34df56; valaddr_reg:x13; val_offset:483*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:96 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 96, 0, x13, 483*FLEN/8, x14, x11, x12)

inst_184:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x327e6a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x01b4a9 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x34df56 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f327e6a; op2val:0xbf81b4a9;
op3val:0x7f34df56; valaddr_reg:x13; val_offset:486*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:128 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 128, 0, x13, 486*FLEN/8, x14, x11, x12)

inst_185:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x043e1b and fs2 == 1 and fe2 == 0x7f and fm2 == 0x03dea5 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x083d97 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e843e1b; op2val:0xbf83dea5;
op3val:0x7e883d97; valaddr_reg:x13; val_offset:489*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 489*FLEN/8, x14, x11, x12)

inst_186:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x043e1b and fs2 == 1 and fe2 == 0x7f and fm2 == 0x03dea5 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x083d97 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e843e1b; op2val:0xbf83dea5;
op3val:0x7e883d97; valaddr_reg:x13; val_offset:492*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:32 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 32, 0, x13, 492*FLEN/8, x14, x11, x12)

inst_187:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x043e1b and fs2 == 1 and fe2 == 0x7f and fm2 == 0x03dea5 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x083d97 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e843e1b; op2val:0xbf83dea5;
op3val:0x7e883d97; valaddr_reg:x13; val_offset:495*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:64 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 64, 0, x13, 495*FLEN/8, x14, x11, x12)

inst_188:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x043e1b and fs2 == 1 and fe2 == 0x7f and fm2 == 0x03dea5 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x083d97 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e843e1b; op2val:0xbf83dea5;
op3val:0x7e883d97; valaddr_reg:x13; val_offset:498*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:96 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 96, 0, x13, 498*FLEN/8, x14, x11, x12)

inst_189:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x043e1b and fs2 == 1 and fe2 == 0x7f and fm2 == 0x03dea5 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x083d97 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e843e1b; op2val:0xbf83dea5;
op3val:0x7e883d97; valaddr_reg:x13; val_offset:501*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:128 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 128, 0, x13, 501*FLEN/8, x14, x11, x12)

inst_190:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x497c49 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3d34f5 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x14ea70 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ec97c49; op2val:0xbfbd34f5;
op3val:0x7f14ea70; valaddr_reg:x13; val_offset:504*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 504*FLEN/8, x14, x11, x12)

inst_191:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x497c49 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3d34f5 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x14ea70 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ec97c49; op2val:0xbfbd34f5;
op3val:0x7f14ea70; valaddr_reg:x13; val_offset:507*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:32 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 32, 0, x13, 507*FLEN/8, x14, x11, x12)

inst_192:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x497c49 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3d34f5 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x14ea70 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ec97c49; op2val:0xbfbd34f5;
op3val:0x7f14ea70; valaddr_reg:x13; val_offset:510*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:64 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 64, 0, x13, 510*FLEN/8, x14, x11, x12)

inst_193:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x497c49 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3d34f5 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x14ea70 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ec97c49; op2val:0xbfbd34f5;
op3val:0x7f14ea70; valaddr_reg:x13; val_offset:513*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:96 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 96, 0, x13, 513*FLEN/8, x14, x11, x12)

inst_194:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x497c49 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3d34f5 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x14ea70 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ec97c49; op2val:0xbfbd34f5;
op3val:0x7f14ea70; valaddr_reg:x13; val_offset:516*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:128 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 128, 0, x13, 516*FLEN/8, x14, x11, x12)

inst_195:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x25f81d and fs2 == 1 and fe2 == 0x81 and fm2 == 0x5da39a and fs3 == 0 and fe3 == 0xfe and fm3 == 0x0fb142 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7da5f81d; op2val:0xc0dda39a;
op3val:0x7f0fb142; valaddr_reg:x13; val_offset:519*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 519*FLEN/8, x14, x11, x12)

inst_196:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x25f81d and fs2 == 1 and fe2 == 0x81 and fm2 == 0x5da39a and fs3 == 0 and fe3 == 0xfe and fm3 == 0x0fb142 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7da5f81d; op2val:0xc0dda39a;
op3val:0x7f0fb142; valaddr_reg:x13; val_offset:522*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:32 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 32, 0, x13, 522*FLEN/8, x14, x11, x12)

inst_197:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x25f81d and fs2 == 1 and fe2 == 0x81 and fm2 == 0x5da39a and fs3 == 0 and fe3 == 0xfe and fm3 == 0x0fb142 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7da5f81d; op2val:0xc0dda39a;
op3val:0x7f0fb142; valaddr_reg:x13; val_offset:525*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:64 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 64, 0, x13, 525*FLEN/8, x14, x11, x12)

inst_198:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x25f81d and fs2 == 1 and fe2 == 0x81 and fm2 == 0x5da39a and fs3 == 0 and fe3 == 0xfe and fm3 == 0x0fb142 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7da5f81d; op2val:0xc0dda39a;
op3val:0x7f0fb142; valaddr_reg:x13; val_offset:528*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:96 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 96, 0, x13, 528*FLEN/8, x14, x11, x12)

inst_199:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x25f81d and fs2 == 1 and fe2 == 0x81 and fm2 == 0x5da39a and fs3 == 0 and fe3 == 0xfe and fm3 == 0x0fb142 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7da5f81d; op2val:0xc0dda39a;
op3val:0x7f0fb142; valaddr_reg:x13; val_offset:531*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:128 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 128, 0, x13, 531*FLEN/8, x14, x11, x12)

inst_200:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x191148 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x0a0793 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x250fb1 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f191148; op2val:0xbf8a0793;
op3val:0x7f250fb1; valaddr_reg:x13; val_offset:534*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 534*FLEN/8, x14, x11, x12)

inst_201:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x191148 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x0a0793 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x250fb1 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f191148; op2val:0xbf8a0793;
op3val:0x7f250fb1; valaddr_reg:x13; val_offset:537*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:32 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 32, 0, x13, 537*FLEN/8, x14, x11, x12)

inst_202:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x191148 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x0a0793 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x250fb1 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f191148; op2val:0xbf8a0793;
op3val:0x7f250fb1; valaddr_reg:x13; val_offset:540*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:64 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 64, 0, x13, 540*FLEN/8, x14, x11, x12)

inst_203:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x191148 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x0a0793 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x250fb1 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f191148; op2val:0xbf8a0793;
op3val:0x7f250fb1; valaddr_reg:x13; val_offset:543*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:96 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 96, 0, x13, 543*FLEN/8, x14, x11, x12)

inst_204:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x191148 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x0a0793 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x250fb1 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f191148; op2val:0xbf8a0793;
op3val:0x7f250fb1; valaddr_reg:x13; val_offset:546*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:128 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 128, 0, x13, 546*FLEN/8, x14, x11, x12)

inst_205:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x61107d and fs2 == 1 and fe2 == 0x83 and fm2 == 0x4e8dd6 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x3597f8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ce1107d; op2val:0xc1ce8dd6;
op3val:0x7f3597f8; valaddr_reg:x13; val_offset:549*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 549*FLEN/8, x14, x11, x12)

inst_206:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x61107d and fs2 == 1 and fe2 == 0x83 and fm2 == 0x4e8dd6 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x3597f8 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ce1107d; op2val:0xc1ce8dd6;
op3val:0x7f3597f8; valaddr_reg:x13; val_offset:552*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:32 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 32, 0, x13, 552*FLEN/8, x14, x11, x12)

inst_207:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x61107d and fs2 == 1 and fe2 == 0x83 and fm2 == 0x4e8dd6 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x3597f8 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ce1107d; op2val:0xc1ce8dd6;
op3val:0x7f3597f8; valaddr_reg:x13; val_offset:555*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:64 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 64, 0, x13, 555*FLEN/8, x14, x11, x12)

inst_208:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x61107d and fs2 == 1 and fe2 == 0x83 and fm2 == 0x4e8dd6 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x3597f8 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ce1107d; op2val:0xc1ce8dd6;
op3val:0x7f3597f8; valaddr_reg:x13; val_offset:558*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:96 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 96, 0, x13, 558*FLEN/8, x14, x11, x12)

inst_209:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x61107d and fs2 == 1 and fe2 == 0x83 and fm2 == 0x4e8dd6 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x3597f8 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ce1107d; op2val:0xc1ce8dd6;
op3val:0x7f3597f8; valaddr_reg:x13; val_offset:561*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:128 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 128, 0, x13, 561*FLEN/8, x14, x11, x12)

inst_210:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0c0d61 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x6f2b41 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x02d828 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d8c0d61; op2val:0xc06f2b41;
op3val:0x7e82d828; valaddr_reg:x13; val_offset:564*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 564*FLEN/8, x14, x11, x12)

inst_211:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0c0d61 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x6f2b41 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x02d828 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d8c0d61; op2val:0xc06f2b41;
op3val:0x7e82d828; valaddr_reg:x13; val_offset:567*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:32 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 32, 0, x13, 567*FLEN/8, x14, x11, x12)

inst_212:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0c0d61 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x6f2b41 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x02d828 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d8c0d61; op2val:0xc06f2b41;
op3val:0x7e82d828; valaddr_reg:x13; val_offset:570*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:64 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 64, 0, x13, 570*FLEN/8, x14, x11, x12)

inst_213:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0c0d61 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x6f2b41 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x02d828 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d8c0d61; op2val:0xc06f2b41;
op3val:0x7e82d828; valaddr_reg:x13; val_offset:573*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:96 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 96, 0, x13, 573*FLEN/8, x14, x11, x12)

inst_214:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0c0d61 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x6f2b41 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x02d828 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d8c0d61; op2val:0xc06f2b41;
op3val:0x7e82d828; valaddr_reg:x13; val_offset:576*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:128 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 128, 0, x13, 576*FLEN/8, x14, x11, x12)

inst_215:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6a8ec9 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x406305 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x3045d1 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7eea8ec9; op2val:0xbfc06305;
op3val:0x7f3045d1; valaddr_reg:x13; val_offset:579*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 579*FLEN/8, x14, x11, x12)

inst_216:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6a8ec9 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x406305 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x3045d1 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7eea8ec9; op2val:0xbfc06305;
op3val:0x7f3045d1; valaddr_reg:x13; val_offset:582*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:32 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 32, 0, x13, 582*FLEN/8, x14, x11, x12)

inst_217:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6a8ec9 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x406305 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x3045d1 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7eea8ec9; op2val:0xbfc06305;
op3val:0x7f3045d1; valaddr_reg:x13; val_offset:585*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:64 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 64, 0, x13, 585*FLEN/8, x14, x11, x12)

inst_218:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6a8ec9 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x406305 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x3045d1 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7eea8ec9; op2val:0xbfc06305;
op3val:0x7f3045d1; valaddr_reg:x13; val_offset:588*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:96 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 96, 0, x13, 588*FLEN/8, x14, x11, x12)

inst_219:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6a8ec9 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x406305 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x3045d1 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7eea8ec9; op2val:0xbfc06305;
op3val:0x7f3045d1; valaddr_reg:x13; val_offset:591*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:128 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 128, 0, x13, 591*FLEN/8, x14, x11, x12)

inst_220:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x028b61 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x2dfcc1 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x317228 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e828b61; op2val:0xc02dfcc1;
op3val:0x7f317228; valaddr_reg:x13; val_offset:594*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 594*FLEN/8, x14, x11, x12)

inst_221:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x028b61 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x2dfcc1 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x317228 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e828b61; op2val:0xc02dfcc1;
op3val:0x7f317228; valaddr_reg:x13; val_offset:597*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:32 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 32, 0, x13, 597*FLEN/8, x14, x11, x12)

inst_222:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x028b61 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x2dfcc1 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x317228 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e828b61; op2val:0xc02dfcc1;
op3val:0x7f317228; valaddr_reg:x13; val_offset:600*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:64 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 64, 0, x13, 600*FLEN/8, x14, x11, x12)

inst_223:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x028b61 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x2dfcc1 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x317228 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e828b61; op2val:0xc02dfcc1;
op3val:0x7f317228; valaddr_reg:x13; val_offset:603*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:96 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 96, 0, x13, 603*FLEN/8, x14, x11, x12)

inst_224:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x028b61 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x2dfcc1 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x317228 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e828b61; op2val:0xc02dfcc1;
op3val:0x7f317228; valaddr_reg:x13; val_offset:606*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:128 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 128, 0, x13, 606*FLEN/8, x14, x11, x12)

inst_225:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5155d6 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x12ba16 and fs3 == 0 and fe3 == 0xfc and fm3 == 0x6ff63d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ed155d6; op2val:0xbf12ba16;
op3val:0x7e6ff63d; valaddr_reg:x13; val_offset:609*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 609*FLEN/8, x14, x11, x12)

inst_226:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5155d6 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x12ba16 and fs3 == 0 and fe3 == 0xfc and fm3 == 0x6ff63d and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ed155d6; op2val:0xbf12ba16;
op3val:0x7e6ff63d; valaddr_reg:x13; val_offset:612*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:32 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 32, 0, x13, 612*FLEN/8, x14, x11, x12)

inst_227:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5155d6 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x12ba16 and fs3 == 0 and fe3 == 0xfc and fm3 == 0x6ff63d and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ed155d6; op2val:0xbf12ba16;
op3val:0x7e6ff63d; valaddr_reg:x13; val_offset:615*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:64 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 64, 0, x13, 615*FLEN/8, x14, x11, x12)

inst_228:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5155d6 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x12ba16 and fs3 == 0 and fe3 == 0xfc and fm3 == 0x6ff63d and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ed155d6; op2val:0xbf12ba16;
op3val:0x7e6ff63d; valaddr_reg:x13; val_offset:618*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:96 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 96, 0, x13, 618*FLEN/8, x14, x11, x12)

inst_229:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5155d6 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x12ba16 and fs3 == 0 and fe3 == 0xfc and fm3 == 0x6ff63d and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ed155d6; op2val:0xbf12ba16;
op3val:0x7e6ff63d; valaddr_reg:x13; val_offset:621*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:128 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 128, 0, x13, 621*FLEN/8, x14, x11, x12)

inst_230:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x734d68 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x0f6a98 and fs3 == 0 and fe3 == 0xfc and fm3 == 0x084d8c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e734d68; op2val:0xbf0f6a98;
op3val:0x7e084d8c; valaddr_reg:x13; val_offset:624*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 624*FLEN/8, x14, x11, x12)

inst_231:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x734d68 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x0f6a98 and fs3 == 0 and fe3 == 0xfc and fm3 == 0x084d8c and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e734d68; op2val:0xbf0f6a98;
op3val:0x7e084d8c; valaddr_reg:x13; val_offset:627*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:32 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 32, 0, x13, 627*FLEN/8, x14, x11, x12)

inst_232:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x734d68 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x0f6a98 and fs3 == 0 and fe3 == 0xfc and fm3 == 0x084d8c and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e734d68; op2val:0xbf0f6a98;
op3val:0x7e084d8c; valaddr_reg:x13; val_offset:630*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:64 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 64, 0, x13, 630*FLEN/8, x14, x11, x12)

inst_233:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x734d68 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x0f6a98 and fs3 == 0 and fe3 == 0xfc and fm3 == 0x084d8c and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e734d68; op2val:0xbf0f6a98;
op3val:0x7e084d8c; valaddr_reg:x13; val_offset:633*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:96 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 96, 0, x13, 633*FLEN/8, x14, x11, x12)

inst_234:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x734d68 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x0f6a98 and fs3 == 0 and fe3 == 0xfc and fm3 == 0x084d8c and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e734d68; op2val:0xbf0f6a98;
op3val:0x7e084d8c; valaddr_reg:x13; val_offset:636*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:128 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 128, 0, x13, 636*FLEN/8, x14, x11, x12)

inst_235:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x703804 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x73aee7 and fs3 == 0 and fe3 == 0xfb and fm3 == 0x64a94b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d703804; op2val:0xbff3aee7;
op3val:0x7de4a94b; valaddr_reg:x13; val_offset:639*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 639*FLEN/8, x14, x11, x12)

inst_236:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x703804 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x73aee7 and fs3 == 0 and fe3 == 0xfb and fm3 == 0x64a94b and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d703804; op2val:0xbff3aee7;
op3val:0x7de4a94b; valaddr_reg:x13; val_offset:642*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:32 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 32, 0, x13, 642*FLEN/8, x14, x11, x12)

inst_237:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x703804 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x73aee7 and fs3 == 0 and fe3 == 0xfb and fm3 == 0x64a94b and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d703804; op2val:0xbff3aee7;
op3val:0x7de4a94b; valaddr_reg:x13; val_offset:645*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:64 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 64, 0, x13, 645*FLEN/8, x14, x11, x12)

inst_238:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x703804 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x73aee7 and fs3 == 0 and fe3 == 0xfb and fm3 == 0x64a94b and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d703804; op2val:0xbff3aee7;
op3val:0x7de4a94b; valaddr_reg:x13; val_offset:648*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:96 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 96, 0, x13, 648*FLEN/8, x14, x11, x12)

inst_239:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x703804 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x73aee7 and fs3 == 0 and fe3 == 0xfb and fm3 == 0x64a94b and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d703804; op2val:0xbff3aee7;
op3val:0x7de4a94b; valaddr_reg:x13; val_offset:651*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:128 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 128, 0, x13, 651*FLEN/8, x14, x11, x12)

inst_240:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04524e and fs2 == 1 and fe2 == 0x7f and fm2 == 0x391f1a and fs3 == 0 and fe3 == 0xfe and fm3 == 0x3f5f1d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f04524e; op2val:0xbfb91f1a;
op3val:0x7f3f5f1d; valaddr_reg:x13; val_offset:654*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 654*FLEN/8, x14, x11, x12)

inst_241:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04524e and fs2 == 1 and fe2 == 0x7f and fm2 == 0x391f1a and fs3 == 0 and fe3 == 0xfe and fm3 == 0x3f5f1d and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f04524e; op2val:0xbfb91f1a;
op3val:0x7f3f5f1d; valaddr_reg:x13; val_offset:657*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:32 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 32, 0, x13, 657*FLEN/8, x14, x11, x12)

inst_242:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04524e and fs2 == 1 and fe2 == 0x7f and fm2 == 0x391f1a and fs3 == 0 and fe3 == 0xfe and fm3 == 0x3f5f1d and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f04524e; op2val:0xbfb91f1a;
op3val:0x7f3f5f1d; valaddr_reg:x13; val_offset:660*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:64 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 64, 0, x13, 660*FLEN/8, x14, x11, x12)

inst_243:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04524e and fs2 == 1 and fe2 == 0x7f and fm2 == 0x391f1a and fs3 == 0 and fe3 == 0xfe and fm3 == 0x3f5f1d and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f04524e; op2val:0xbfb91f1a;
op3val:0x7f3f5f1d; valaddr_reg:x13; val_offset:663*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:96 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 96, 0, x13, 663*FLEN/8, x14, x11, x12)

inst_244:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04524e and fs2 == 1 and fe2 == 0x7f and fm2 == 0x391f1a and fs3 == 0 and fe3 == 0xfe and fm3 == 0x3f5f1d and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f04524e; op2val:0xbfb91f1a;
op3val:0x7f3f5f1d; valaddr_reg:x13; val_offset:666*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:128 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 128, 0, x13, 666*FLEN/8, x14, x11, x12)

inst_245:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x781bf7 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x19e553 and fs3 == 0 and fe3 == 0xfa and fm3 == 0x1526f9 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7df81bf7; op2val:0xbe99e553;
op3val:0x7d1526f9; valaddr_reg:x13; val_offset:669*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 669*FLEN/8, x14, x11, x12)

inst_246:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x781bf7 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x19e553 and fs3 == 0 and fe3 == 0xfa and fm3 == 0x1526f9 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7df81bf7; op2val:0xbe99e553;
op3val:0x7d1526f9; valaddr_reg:x13; val_offset:672*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:32 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 32, 0, x13, 672*FLEN/8, x14, x11, x12)

inst_247:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x781bf7 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x19e553 and fs3 == 0 and fe3 == 0xfa and fm3 == 0x1526f9 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7df81bf7; op2val:0xbe99e553;
op3val:0x7d1526f9; valaddr_reg:x13; val_offset:675*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:64 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 64, 0, x13, 675*FLEN/8, x14, x11, x12)

inst_248:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x781bf7 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x19e553 and fs3 == 0 and fe3 == 0xfa and fm3 == 0x1526f9 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7df81bf7; op2val:0xbe99e553;
op3val:0x7d1526f9; valaddr_reg:x13; val_offset:678*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:96 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 96, 0, x13, 678*FLEN/8, x14, x11, x12)

inst_249:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x781bf7 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x19e553 and fs3 == 0 and fe3 == 0xfa and fm3 == 0x1526f9 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7df81bf7; op2val:0xbe99e553;
op3val:0x7d1526f9; valaddr_reg:x13; val_offset:681*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:128 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 128, 0, x13, 681*FLEN/8, x14, x11, x12)

inst_250:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3d723b and fs2 == 1 and fe2 == 0x7e and fm2 == 0x0a6ccf and fs3 == 0 and fe3 == 0xfd and fm3 == 0x4ce034 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f3d723b; op2val:0xbf0a6ccf;
op3val:0x7ecce034; valaddr_reg:x13; val_offset:684*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 684*FLEN/8, x14, x11, x12)

inst_251:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3d723b and fs2 == 1 and fe2 == 0x7e and fm2 == 0x0a6ccf and fs3 == 0 and fe3 == 0xfd and fm3 == 0x4ce034 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f3d723b; op2val:0xbf0a6ccf;
op3val:0x7ecce034; valaddr_reg:x13; val_offset:687*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:32 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 32, 0, x13, 687*FLEN/8, x14, x11, x12)

inst_252:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3d723b and fs2 == 1 and fe2 == 0x7e and fm2 == 0x0a6ccf and fs3 == 0 and fe3 == 0xfd and fm3 == 0x4ce034 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f3d723b; op2val:0xbf0a6ccf;
op3val:0x7ecce034; valaddr_reg:x13; val_offset:690*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:64 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 64, 0, x13, 690*FLEN/8, x14, x11, x12)

inst_253:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3d723b and fs2 == 1 and fe2 == 0x7e and fm2 == 0x0a6ccf and fs3 == 0 and fe3 == 0xfd and fm3 == 0x4ce034 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f3d723b; op2val:0xbf0a6ccf;
op3val:0x7ecce034; valaddr_reg:x13; val_offset:693*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:96 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 96, 0, x13, 693*FLEN/8, x14, x11, x12)

inst_254:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3d723b and fs2 == 1 and fe2 == 0x7e and fm2 == 0x0a6ccf and fs3 == 0 and fe3 == 0xfd and fm3 == 0x4ce034 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f3d723b; op2val:0xbf0a6ccf;
op3val:0x7ecce034; valaddr_reg:x13; val_offset:696*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:128 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 128, 0, x13, 696*FLEN/8, x14, x11, x12)

inst_255:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1bdc6a and fs2 == 1 and fe2 == 0x7e and fm2 == 0x15b123 and fs3 == 0 and fe3 == 0xfc and fm3 == 0x364645 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e9bdc6a; op2val:0xbf15b123;
op3val:0x7e364645; valaddr_reg:x13; val_offset:699*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 699*FLEN/8, x14, x11, x12)

inst_256:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1bdc6a and fs2 == 1 and fe2 == 0x7e and fm2 == 0x15b123 and fs3 == 0 and fe3 == 0xfc and fm3 == 0x364645 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e9bdc6a; op2val:0xbf15b123;
op3val:0x7e364645; valaddr_reg:x13; val_offset:702*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:32 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 32, 0, x13, 702*FLEN/8, x14, x11, x12)

inst_257:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1bdc6a and fs2 == 1 and fe2 == 0x7e and fm2 == 0x15b123 and fs3 == 0 and fe3 == 0xfc and fm3 == 0x364645 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e9bdc6a; op2val:0xbf15b123;
op3val:0x7e364645; valaddr_reg:x13; val_offset:705*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:64 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 64, 0, x13, 705*FLEN/8, x14, x11, x12)

inst_258:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1bdc6a and fs2 == 1 and fe2 == 0x7e and fm2 == 0x15b123 and fs3 == 0 and fe3 == 0xfc and fm3 == 0x364645 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e9bdc6a; op2val:0xbf15b123;
op3val:0x7e364645; valaddr_reg:x13; val_offset:708*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:96 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 96, 0, x13, 708*FLEN/8, x14, x11, x12)

inst_259:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1bdc6a and fs2 == 1 and fe2 == 0x7e and fm2 == 0x15b123 and fs3 == 0 and fe3 == 0xfc and fm3 == 0x364645 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e9bdc6a; op2val:0xbf15b123;
op3val:0x7e364645; valaddr_reg:x13; val_offset:711*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:128 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 128, 0, x13, 711*FLEN/8, x14, x11, x12)

inst_260:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6414a9 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3211a1 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x1ea613 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ee414a9; op2val:0xbfb211a1;
op3val:0x7f1ea613; valaddr_reg:x13; val_offset:714*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 714*FLEN/8, x14, x11, x12)

inst_261:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6414a9 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3211a1 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x1ea613 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ee414a9; op2val:0xbfb211a1;
op3val:0x7f1ea613; valaddr_reg:x13; val_offset:717*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:32 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 32, 0, x13, 717*FLEN/8, x14, x11, x12)

inst_262:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6414a9 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3211a1 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x1ea613 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ee414a9; op2val:0xbfb211a1;
op3val:0x7f1ea613; valaddr_reg:x13; val_offset:720*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:64 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 64, 0, x13, 720*FLEN/8, x14, x11, x12)

inst_263:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6414a9 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3211a1 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x1ea613 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ee414a9; op2val:0xbfb211a1;
op3val:0x7f1ea613; valaddr_reg:x13; val_offset:723*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:96 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 96, 0, x13, 723*FLEN/8, x14, x11, x12)

inst_264:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6414a9 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3211a1 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x1ea613 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ee414a9; op2val:0xbfb211a1;
op3val:0x7f1ea613; valaddr_reg:x13; val_offset:726*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:128 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 128, 0, x13, 726*FLEN/8, x14, x11, x12)

inst_265:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2ef9b3 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x6cf335 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x21f46d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7eaef9b3; op2val:0xbf6cf335;
op3val:0x7ea1f46d; valaddr_reg:x13; val_offset:729*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 729*FLEN/8, x14, x11, x12)

inst_266:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2ef9b3 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x6cf335 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x21f46d and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7eaef9b3; op2val:0xbf6cf335;
op3val:0x7ea1f46d; valaddr_reg:x13; val_offset:732*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:32 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 32, 0, x13, 732*FLEN/8, x14, x11, x12)

inst_267:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2ef9b3 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x6cf335 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x21f46d and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7eaef9b3; op2val:0xbf6cf335;
op3val:0x7ea1f46d; valaddr_reg:x13; val_offset:735*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:64 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 64, 0, x13, 735*FLEN/8, x14, x11, x12)

inst_268:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2ef9b3 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x6cf335 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x21f46d and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7eaef9b3; op2val:0xbf6cf335;
op3val:0x7ea1f46d; valaddr_reg:x13; val_offset:738*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:96 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 96, 0, x13, 738*FLEN/8, x14, x11, x12)

inst_269:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2ef9b3 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x6cf335 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x21f46d and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7eaef9b3; op2val:0xbf6cf335;
op3val:0x7ea1f46d; valaddr_reg:x13; val_offset:741*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:128 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 128, 0, x13, 741*FLEN/8, x14, x11, x12)

inst_270:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x2b21f2 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x038e08 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x2fe2a3 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d2b21f2; op2val:0xc1838e08;
op3val:0x7f2fe2a3; valaddr_reg:x13; val_offset:744*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 744*FLEN/8, x14, x11, x12)

inst_271:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x2b21f2 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x038e08 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x2fe2a3 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d2b21f2; op2val:0xc1838e08;
op3val:0x7f2fe2a3; valaddr_reg:x13; val_offset:747*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:32 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 32, 0, x13, 747*FLEN/8, x14, x11, x12)

inst_272:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x2b21f2 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x038e08 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x2fe2a3 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d2b21f2; op2val:0xc1838e08;
op3val:0x7f2fe2a3; valaddr_reg:x13; val_offset:750*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:64 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 64, 0, x13, 750*FLEN/8, x14, x11, x12)

inst_273:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x2b21f2 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x038e08 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x2fe2a3 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d2b21f2; op2val:0xc1838e08;
op3val:0x7f2fe2a3; valaddr_reg:x13; val_offset:753*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:96 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 96, 0, x13, 753*FLEN/8, x14, x11, x12)

inst_274:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x2b21f2 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x038e08 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x2fe2a3 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d2b21f2; op2val:0xc1838e08;
op3val:0x7f2fe2a3; valaddr_reg:x13; val_offset:756*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:128 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 128, 0, x13, 756*FLEN/8, x14, x11, x12)

inst_275:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x490a06 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x7157ba and fs3 == 0 and fe3 == 0xfd and fm3 == 0x3d8755 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7cc90a06; op2val:0xc17157ba;
op3val:0x7ebd8755; valaddr_reg:x13; val_offset:759*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 759*FLEN/8, x14, x11, x12)

inst_276:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x490a06 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x7157ba and fs3 == 0 and fe3 == 0xfd and fm3 == 0x3d8755 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7cc90a06; op2val:0xc17157ba;
op3val:0x7ebd8755; valaddr_reg:x13; val_offset:762*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:32 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 32, 0, x13, 762*FLEN/8, x14, x11, x12)

inst_277:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x490a06 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x7157ba and fs3 == 0 and fe3 == 0xfd and fm3 == 0x3d8755 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7cc90a06; op2val:0xc17157ba;
op3val:0x7ebd8755; valaddr_reg:x13; val_offset:765*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:64 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 64, 0, x13, 765*FLEN/8, x14, x11, x12)
RVTEST_SIGBASE(x11,signature_x11_2)

inst_278:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x490a06 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x7157ba and fs3 == 0 and fe3 == 0xfd and fm3 == 0x3d8755 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7cc90a06; op2val:0xc17157ba;
op3val:0x7ebd8755; valaddr_reg:x13; val_offset:768*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:96 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 96, 0, x13, 768*FLEN/8, x14, x11, x12)

inst_279:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x490a06 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x7157ba and fs3 == 0 and fe3 == 0xfd and fm3 == 0x3d8755 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7cc90a06; op2val:0xc17157ba;
op3val:0x7ebd8755; valaddr_reg:x13; val_offset:771*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:128 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 128, 0, x13, 771*FLEN/8, x14, x11, x12)

inst_280:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20fa79 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x1f78b2 and fs3 == 0 and fe3 == 0xfb and fm3 == 0x488eed and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f20fa79; op2val:0xbe1f78b2;
op3val:0x7dc88eed; valaddr_reg:x13; val_offset:774*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 774*FLEN/8, x14, x11, x12)

inst_281:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20fa79 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x1f78b2 and fs3 == 0 and fe3 == 0xfb and fm3 == 0x488eed and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f20fa79; op2val:0xbe1f78b2;
op3val:0x7dc88eed; valaddr_reg:x13; val_offset:777*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:32 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 32, 0, x13, 777*FLEN/8, x14, x11, x12)

inst_282:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20fa79 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x1f78b2 and fs3 == 0 and fe3 == 0xfb and fm3 == 0x488eed and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f20fa79; op2val:0xbe1f78b2;
op3val:0x7dc88eed; valaddr_reg:x13; val_offset:780*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:64 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 64, 0, x13, 780*FLEN/8, x14, x11, x12)

inst_283:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20fa79 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x1f78b2 and fs3 == 0 and fe3 == 0xfb and fm3 == 0x488eed and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f20fa79; op2val:0xbe1f78b2;
op3val:0x7dc88eed; valaddr_reg:x13; val_offset:783*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:96 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 96, 0, x13, 783*FLEN/8, x14, x11, x12)

inst_284:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20fa79 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x1f78b2 and fs3 == 0 and fe3 == 0xfb and fm3 == 0x488eed and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f20fa79; op2val:0xbe1f78b2;
op3val:0x7dc88eed; valaddr_reg:x13; val_offset:786*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:128 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 128, 0, x13, 786*FLEN/8, x14, x11, x12)

inst_285:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0c7ac4 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x262942 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x365c7f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f0c7ac4; op2val:0xbfa62942;
op3val:0x7f365c7f; valaddr_reg:x13; val_offset:789*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 789*FLEN/8, x14, x11, x12)

inst_286:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0c7ac4 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x262942 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x365c7f and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f0c7ac4; op2val:0xbfa62942;
op3val:0x7f365c7f; valaddr_reg:x13; val_offset:792*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:32 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 32, 0, x13, 792*FLEN/8, x14, x11, x12)

inst_287:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0c7ac4 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x262942 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x365c7f and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f0c7ac4; op2val:0xbfa62942;
op3val:0x7f365c7f; valaddr_reg:x13; val_offset:795*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:64 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 64, 0, x13, 795*FLEN/8, x14, x11, x12)

inst_288:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0c7ac4 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x262942 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x365c7f and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f0c7ac4; op2val:0xbfa62942;
op3val:0x7f365c7f; valaddr_reg:x13; val_offset:798*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:96 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 96, 0, x13, 798*FLEN/8, x14, x11, x12)

inst_289:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0c7ac4 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x262942 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x365c7f and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f0c7ac4; op2val:0xbfa62942;
op3val:0x7f365c7f; valaddr_reg:x13; val_offset:801*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:128 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 128, 0, x13, 801*FLEN/8, x14, x11, x12)

inst_290:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7212c5 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x20008a and fs3 == 0 and fe3 == 0xfe and fm3 == 0x174c3e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ef212c5; op2val:0xbfa0008a;
op3val:0x7f174c3e; valaddr_reg:x13; val_offset:804*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 804*FLEN/8, x14, x11, x12)

inst_291:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7212c5 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x20008a and fs3 == 0 and fe3 == 0xfe and fm3 == 0x174c3e and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ef212c5; op2val:0xbfa0008a;
op3val:0x7f174c3e; valaddr_reg:x13; val_offset:807*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:32 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 32, 0, x13, 807*FLEN/8, x14, x11, x12)

inst_292:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7212c5 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x20008a and fs3 == 0 and fe3 == 0xfe and fm3 == 0x174c3e and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ef212c5; op2val:0xbfa0008a;
op3val:0x7f174c3e; valaddr_reg:x13; val_offset:810*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:64 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 64, 0, x13, 810*FLEN/8, x14, x11, x12)

inst_293:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7212c5 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x20008a and fs3 == 0 and fe3 == 0xfe and fm3 == 0x174c3e and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ef212c5; op2val:0xbfa0008a;
op3val:0x7f174c3e; valaddr_reg:x13; val_offset:813*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:96 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 96, 0, x13, 813*FLEN/8, x14, x11, x12)

inst_294:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7212c5 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x20008a and fs3 == 0 and fe3 == 0xfe and fm3 == 0x174c3e and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ef212c5; op2val:0xbfa0008a;
op3val:0x7f174c3e; valaddr_reg:x13; val_offset:816*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:128 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 128, 0, x13, 816*FLEN/8, x14, x11, x12)

inst_295:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x23c8dc and fs2 == 1 and fe2 == 0x81 and fm2 == 0x02691f and fs3 == 0 and fe3 == 0xfd and fm3 == 0x26de83 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7da3c8dc; op2val:0xc082691f;
op3val:0x7ea6de83; valaddr_reg:x13; val_offset:819*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 819*FLEN/8, x14, x11, x12)

inst_296:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x23c8dc and fs2 == 1 and fe2 == 0x81 and fm2 == 0x02691f and fs3 == 0 and fe3 == 0xfd and fm3 == 0x26de83 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7da3c8dc; op2val:0xc082691f;
op3val:0x7ea6de83; valaddr_reg:x13; val_offset:822*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:32 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 32, 0, x13, 822*FLEN/8, x14, x11, x12)

inst_297:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x23c8dc and fs2 == 1 and fe2 == 0x81 and fm2 == 0x02691f and fs3 == 0 and fe3 == 0xfd and fm3 == 0x26de83 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7da3c8dc; op2val:0xc082691f;
op3val:0x7ea6de83; valaddr_reg:x13; val_offset:825*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:64 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 64, 0, x13, 825*FLEN/8, x14, x11, x12)

inst_298:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x23c8dc and fs2 == 1 and fe2 == 0x81 and fm2 == 0x02691f and fs3 == 0 and fe3 == 0xfd and fm3 == 0x26de83 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7da3c8dc; op2val:0xc082691f;
op3val:0x7ea6de83; valaddr_reg:x13; val_offset:828*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:96 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 96, 0, x13, 828*FLEN/8, x14, x11, x12)

inst_299:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x23c8dc and fs2 == 1 and fe2 == 0x81 and fm2 == 0x02691f and fs3 == 0 and fe3 == 0xfd and fm3 == 0x26de83 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7da3c8dc; op2val:0xc082691f;
op3val:0x7ea6de83; valaddr_reg:x13; val_offset:831*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:128 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 128, 0, x13, 831*FLEN/8, x14, x11, x12)

inst_300:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x653da7 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x351f02 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x22305b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7de53da7; op2val:0xc0b51f02;
op3val:0x7f22305b; valaddr_reg:x13; val_offset:834*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 834*FLEN/8, x14, x11, x12)

inst_301:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x653da7 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x351f02 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x22305b and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7de53da7; op2val:0xc0b51f02;
op3val:0x7f22305b; valaddr_reg:x13; val_offset:837*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:32 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 32, 0, x13, 837*FLEN/8, x14, x11, x12)

inst_302:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x653da7 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x351f02 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x22305b and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7de53da7; op2val:0xc0b51f02;
op3val:0x7f22305b; valaddr_reg:x13; val_offset:840*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:64 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 64, 0, x13, 840*FLEN/8, x14, x11, x12)

inst_303:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x653da7 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x351f02 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x22305b and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7de53da7; op2val:0xc0b51f02;
op3val:0x7f22305b; valaddr_reg:x13; val_offset:843*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:96 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 96, 0, x13, 843*FLEN/8, x14, x11, x12)

inst_304:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x653da7 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x351f02 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x22305b and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7de53da7; op2val:0xc0b51f02;
op3val:0x7f22305b; valaddr_reg:x13; val_offset:846*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:128 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 128, 0, x13, 846*FLEN/8, x14, x11, x12)

inst_305:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x626a93 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x44bf77 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x2e02f0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e626a93; op2val:0xbfc4bf77;
op3val:0x7eae02f0; valaddr_reg:x13; val_offset:849*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 849*FLEN/8, x14, x11, x12)

inst_306:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x626a93 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x44bf77 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x2e02f0 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e626a93; op2val:0xbfc4bf77;
op3val:0x7eae02f0; valaddr_reg:x13; val_offset:852*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:32 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 32, 0, x13, 852*FLEN/8, x14, x11, x12)

inst_307:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x626a93 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x44bf77 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x2e02f0 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e626a93; op2val:0xbfc4bf77;
op3val:0x7eae02f0; valaddr_reg:x13; val_offset:855*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:64 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 64, 0, x13, 855*FLEN/8, x14, x11, x12)

inst_308:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x626a93 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x44bf77 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x2e02f0 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e626a93; op2val:0xbfc4bf77;
op3val:0x7eae02f0; valaddr_reg:x13; val_offset:858*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:96 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 96, 0, x13, 858*FLEN/8, x14, x11, x12)

inst_309:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x626a93 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x44bf77 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x2e02f0 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e626a93; op2val:0xbfc4bf77;
op3val:0x7eae02f0; valaddr_reg:x13; val_offset:861*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:128 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 128, 0, x13, 861*FLEN/8, x14, x11, x12)

inst_310:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3fdd96 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x5a545b and fs3 == 0 and fe3 == 0xfe and fm3 == 0x23a1eb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f3fdd96; op2val:0xbf5a545b;
op3val:0x7f23a1eb; valaddr_reg:x13; val_offset:864*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 864*FLEN/8, x14, x11, x12)

inst_311:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3fdd96 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x5a545b and fs3 == 0 and fe3 == 0xfe and fm3 == 0x23a1eb and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f3fdd96; op2val:0xbf5a545b;
op3val:0x7f23a1eb; valaddr_reg:x13; val_offset:867*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:32 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 32, 0, x13, 867*FLEN/8, x14, x11, x12)

inst_312:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3fdd96 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x5a545b and fs3 == 0 and fe3 == 0xfe and fm3 == 0x23a1eb and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f3fdd96; op2val:0xbf5a545b;
op3val:0x7f23a1eb; valaddr_reg:x13; val_offset:870*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:64 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 64, 0, x13, 870*FLEN/8, x14, x11, x12)

inst_313:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3fdd96 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x5a545b and fs3 == 0 and fe3 == 0xfe and fm3 == 0x23a1eb and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f3fdd96; op2val:0xbf5a545b;
op3val:0x7f23a1eb; valaddr_reg:x13; val_offset:873*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:96 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 96, 0, x13, 873*FLEN/8, x14, x11, x12)

inst_314:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3fdd96 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x5a545b and fs3 == 0 and fe3 == 0xfe and fm3 == 0x23a1eb and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f3fdd96; op2val:0xbf5a545b;
op3val:0x7f23a1eb; valaddr_reg:x13; val_offset:876*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:128 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 128, 0, x13, 876*FLEN/8, x14, x11, x12)

inst_315:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3b64b8 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x6debb7 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x2e28cb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f3b64b8; op2val:0xbeedebb7;
op3val:0x7eae28cb; valaddr_reg:x13; val_offset:879*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 879*FLEN/8, x14, x11, x12)

inst_316:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3b64b8 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x6debb7 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x2e28cb and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f3b64b8; op2val:0xbeedebb7;
op3val:0x7eae28cb; valaddr_reg:x13; val_offset:882*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:32 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 32, 0, x13, 882*FLEN/8, x14, x11, x12)

inst_317:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3b64b8 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x6debb7 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x2e28cb and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f3b64b8; op2val:0xbeedebb7;
op3val:0x7eae28cb; valaddr_reg:x13; val_offset:885*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:64 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 64, 0, x13, 885*FLEN/8, x14, x11, x12)

inst_318:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3b64b8 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x6debb7 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x2e28cb and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f3b64b8; op2val:0xbeedebb7;
op3val:0x7eae28cb; valaddr_reg:x13; val_offset:888*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:96 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 96, 0, x13, 888*FLEN/8, x14, x11, x12)

inst_319:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3b64b8 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x6debb7 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x2e28cb and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f3b64b8; op2val:0xbeedebb7;
op3val:0x7eae28cb; valaddr_reg:x13; val_offset:891*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:128 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 128, 0, x13, 891*FLEN/8, x14, x11, x12)

inst_320:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3b73fa and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3f4883 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x0c10a1 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ebb73fa; op2val:0xbfbf4883;
op3val:0x7f0c10a1; valaddr_reg:x13; val_offset:894*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 894*FLEN/8, x14, x11, x12)

inst_321:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3b73fa and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3f4883 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x0c10a1 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ebb73fa; op2val:0xbfbf4883;
op3val:0x7f0c10a1; valaddr_reg:x13; val_offset:897*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:32 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 32, 0, x13, 897*FLEN/8, x14, x11, x12)

inst_322:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3b73fa and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3f4883 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x0c10a1 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ebb73fa; op2val:0xbfbf4883;
op3val:0x7f0c10a1; valaddr_reg:x13; val_offset:900*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:64 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 64, 0, x13, 900*FLEN/8, x14, x11, x12)

inst_323:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3b73fa and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3f4883 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x0c10a1 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ebb73fa; op2val:0xbfbf4883;
op3val:0x7f0c10a1; valaddr_reg:x13; val_offset:903*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:96 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 96, 0, x13, 903*FLEN/8, x14, x11, x12)

inst_324:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3b73fa and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3f4883 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x0c10a1 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ebb73fa; op2val:0xbfbf4883;
op3val:0x7f0c10a1; valaddr_reg:x13; val_offset:906*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:128 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 128, 0, x13, 906*FLEN/8, x14, x11, x12)

inst_325:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x37f3c9 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x1b85b6 and fs3 == 0 and fe3 == 0xfc and fm3 == 0x5f815f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7eb7f3c9; op2val:0xbf1b85b6;
op3val:0x7e5f815f; valaddr_reg:x13; val_offset:909*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 909*FLEN/8, x14, x11, x12)

inst_326:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x37f3c9 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x1b85b6 and fs3 == 0 and fe3 == 0xfc and fm3 == 0x5f815f and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7eb7f3c9; op2val:0xbf1b85b6;
op3val:0x7e5f815f; valaddr_reg:x13; val_offset:912*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:32 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 32, 0, x13, 912*FLEN/8, x14, x11, x12)

inst_327:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x37f3c9 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x1b85b6 and fs3 == 0 and fe3 == 0xfc and fm3 == 0x5f815f and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7eb7f3c9; op2val:0xbf1b85b6;
op3val:0x7e5f815f; valaddr_reg:x13; val_offset:915*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:64 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 64, 0, x13, 915*FLEN/8, x14, x11, x12)

inst_328:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x37f3c9 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x1b85b6 and fs3 == 0 and fe3 == 0xfc and fm3 == 0x5f815f and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7eb7f3c9; op2val:0xbf1b85b6;
op3val:0x7e5f815f; valaddr_reg:x13; val_offset:918*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:96 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 96, 0, x13, 918*FLEN/8, x14, x11, x12)

inst_329:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x37f3c9 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x1b85b6 and fs3 == 0 and fe3 == 0xfc and fm3 == 0x5f815f and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7eb7f3c9; op2val:0xbf1b85b6;
op3val:0x7e5f815f; valaddr_reg:x13; val_offset:921*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:128 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 128, 0, x13, 921*FLEN/8, x14, x11, x12)

inst_330:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1b0e1c and fs2 == 1 and fe2 == 0x7d and fm2 == 0x39c4ac and fs3 == 0 and fe3 == 0xfb and fm3 == 0x6108a4 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e9b0e1c; op2val:0xbeb9c4ac;
op3val:0x7de108a4; valaddr_reg:x13; val_offset:924*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 924*FLEN/8, x14, x11, x12)

inst_331:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1b0e1c and fs2 == 1 and fe2 == 0x7d and fm2 == 0x39c4ac and fs3 == 0 and fe3 == 0xfb and fm3 == 0x6108a4 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e9b0e1c; op2val:0xbeb9c4ac;
op3val:0x7de108a4; valaddr_reg:x13; val_offset:927*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:32 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 32, 0, x13, 927*FLEN/8, x14, x11, x12)

inst_332:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1b0e1c and fs2 == 1 and fe2 == 0x7d and fm2 == 0x39c4ac and fs3 == 0 and fe3 == 0xfb and fm3 == 0x6108a4 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e9b0e1c; op2val:0xbeb9c4ac;
op3val:0x7de108a4; valaddr_reg:x13; val_offset:930*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:64 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 64, 0, x13, 930*FLEN/8, x14, x11, x12)

inst_333:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1b0e1c and fs2 == 1 and fe2 == 0x7d and fm2 == 0x39c4ac and fs3 == 0 and fe3 == 0xfb and fm3 == 0x6108a4 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e9b0e1c; op2val:0xbeb9c4ac;
op3val:0x7de108a4; valaddr_reg:x13; val_offset:933*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:96 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 96, 0, x13, 933*FLEN/8, x14, x11, x12)

inst_334:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1b0e1c and fs2 == 1 and fe2 == 0x7d and fm2 == 0x39c4ac and fs3 == 0 and fe3 == 0xfb and fm3 == 0x6108a4 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e9b0e1c; op2val:0xbeb9c4ac;
op3val:0x7de108a4; valaddr_reg:x13; val_offset:936*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:128 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 128, 0, x13, 936*FLEN/8, x14, x11, x12)

inst_335:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x10c4ae and fs2 == 1 and fe2 == 0x80 and fm2 == 0x27ca24 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x3dc53a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e90c4ae; op2val:0xc027ca24;
op3val:0x7f3dc53a; valaddr_reg:x13; val_offset:939*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 939*FLEN/8, x14, x11, x12)

inst_336:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x10c4ae and fs2 == 1 and fe2 == 0x80 and fm2 == 0x27ca24 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x3dc53a and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e90c4ae; op2val:0xc027ca24;
op3val:0x7f3dc53a; valaddr_reg:x13; val_offset:942*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:32 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 32, 0, x13, 942*FLEN/8, x14, x11, x12)

inst_337:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x10c4ae and fs2 == 1 and fe2 == 0x80 and fm2 == 0x27ca24 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x3dc53a and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e90c4ae; op2val:0xc027ca24;
op3val:0x7f3dc53a; valaddr_reg:x13; val_offset:945*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:64 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 64, 0, x13, 945*FLEN/8, x14, x11, x12)

inst_338:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x10c4ae and fs2 == 1 and fe2 == 0x80 and fm2 == 0x27ca24 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x3dc53a and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e90c4ae; op2val:0xc027ca24;
op3val:0x7f3dc53a; valaddr_reg:x13; val_offset:948*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:96 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 96, 0, x13, 948*FLEN/8, x14, x11, x12)

inst_339:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x10c4ae and fs2 == 1 and fe2 == 0x80 and fm2 == 0x27ca24 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x3dc53a and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e90c4ae; op2val:0xc027ca24;
op3val:0x7f3dc53a; valaddr_reg:x13; val_offset:951*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:128 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 128, 0, x13, 951*FLEN/8, x14, x11, x12)

inst_340:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3848de and fs2 == 1 and fe2 == 0x7e and fm2 == 0x273904 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x70c129 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f3848de; op2val:0xbf273904;
op3val:0x7ef0c129; valaddr_reg:x13; val_offset:954*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 954*FLEN/8, x14, x11, x12)

inst_341:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3848de and fs2 == 1 and fe2 == 0x7e and fm2 == 0x273904 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x70c129 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f3848de; op2val:0xbf273904;
op3val:0x7ef0c129; valaddr_reg:x13; val_offset:957*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:32 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 32, 0, x13, 957*FLEN/8, x14, x11, x12)

inst_342:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3848de and fs2 == 1 and fe2 == 0x7e and fm2 == 0x273904 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x70c129 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f3848de; op2val:0xbf273904;
op3val:0x7ef0c129; valaddr_reg:x13; val_offset:960*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:64 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 64, 0, x13, 960*FLEN/8, x14, x11, x12)

inst_343:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3848de and fs2 == 1 and fe2 == 0x7e and fm2 == 0x273904 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x70c129 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f3848de; op2val:0xbf273904;
op3val:0x7ef0c129; valaddr_reg:x13; val_offset:963*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:96 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 96, 0, x13, 963*FLEN/8, x14, x11, x12)

inst_344:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3848de and fs2 == 1 and fe2 == 0x7e and fm2 == 0x273904 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x70c129 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f3848de; op2val:0xbf273904;
op3val:0x7ef0c129; valaddr_reg:x13; val_offset:966*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:128 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 128, 0, x13, 966*FLEN/8, x14, x11, x12)

inst_345:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3fbd64 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x2d8949 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x01f9d0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ebfbd64; op2val:0xbf2d8949;
op3val:0x7e81f9d0; valaddr_reg:x13; val_offset:969*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 969*FLEN/8, x14, x11, x12)

inst_346:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3fbd64 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x2d8949 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x01f9d0 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ebfbd64; op2val:0xbf2d8949;
op3val:0x7e81f9d0; valaddr_reg:x13; val_offset:972*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:32 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 32, 0, x13, 972*FLEN/8, x14, x11, x12)

inst_347:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3fbd64 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x2d8949 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x01f9d0 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ebfbd64; op2val:0xbf2d8949;
op3val:0x7e81f9d0; valaddr_reg:x13; val_offset:975*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:64 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 64, 0, x13, 975*FLEN/8, x14, x11, x12)

inst_348:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3fbd64 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x2d8949 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x01f9d0 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ebfbd64; op2val:0xbf2d8949;
op3val:0x7e81f9d0; valaddr_reg:x13; val_offset:978*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:96 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 96, 0, x13, 978*FLEN/8, x14, x11, x12)

inst_349:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3fbd64 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x2d8949 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x01f9d0 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ebfbd64; op2val:0xbf2d8949;
op3val:0x7e81f9d0; valaddr_reg:x13; val_offset:981*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:128 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 128, 0, x13, 981*FLEN/8, x14, x11, x12)

inst_350:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x08ea41 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x438442 and fs3 == 0 and fe3 == 0xfc and fm3 == 0x512259 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d88ea41; op2val:0xc0438442;
op3val:0x7e512259; valaddr_reg:x13; val_offset:984*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 984*FLEN/8, x14, x11, x12)

inst_351:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x08ea41 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x438442 and fs3 == 0 and fe3 == 0xfc and fm3 == 0x512259 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d88ea41; op2val:0xc0438442;
op3val:0x7e512259; valaddr_reg:x13; val_offset:987*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:32 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 32, 0, x13, 987*FLEN/8, x14, x11, x12)

inst_352:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x08ea41 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x438442 and fs3 == 0 and fe3 == 0xfc and fm3 == 0x512259 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d88ea41; op2val:0xc0438442;
op3val:0x7e512259; valaddr_reg:x13; val_offset:990*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:64 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 64, 0, x13, 990*FLEN/8, x14, x11, x12)

inst_353:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x08ea41 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x438442 and fs3 == 0 and fe3 == 0xfc and fm3 == 0x512259 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d88ea41; op2val:0xc0438442;
op3val:0x7e512259; valaddr_reg:x13; val_offset:993*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:96 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 96, 0, x13, 993*FLEN/8, x14, x11, x12)

inst_354:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x08ea41 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x438442 and fs3 == 0 and fe3 == 0xfc and fm3 == 0x512259 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d88ea41; op2val:0xc0438442;
op3val:0x7e512259; valaddr_reg:x13; val_offset:996*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:128 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 128, 0, x13, 996*FLEN/8, x14, x11, x12)

inst_355:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1625cb and fs2 == 1 and fe2 == 0x7f and fm2 == 0x0df910 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x2689cb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f1625cb; op2val:0xbf8df910;
op3val:0x7f2689cb; valaddr_reg:x13; val_offset:999*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 999*FLEN/8, x14, x11, x12)

inst_356:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1625cb and fs2 == 1 and fe2 == 0x7f and fm2 == 0x0df910 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x2689cb and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f1625cb; op2val:0xbf8df910;
op3val:0x7f2689cb; valaddr_reg:x13; val_offset:1002*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:32 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 32, 0, x13, 1002*FLEN/8, x14, x11, x12)

inst_357:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1625cb and fs2 == 1 and fe2 == 0x7f and fm2 == 0x0df910 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x2689cb and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f1625cb; op2val:0xbf8df910;
op3val:0x7f2689cb; valaddr_reg:x13; val_offset:1005*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:64 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 64, 0, x13, 1005*FLEN/8, x14, x11, x12)

inst_358:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1625cb and fs2 == 1 and fe2 == 0x7f and fm2 == 0x0df910 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x2689cb and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f1625cb; op2val:0xbf8df910;
op3val:0x7f2689cb; valaddr_reg:x13; val_offset:1008*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:96 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 96, 0, x13, 1008*FLEN/8, x14, x11, x12)

inst_359:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1625cb and fs2 == 1 and fe2 == 0x7f and fm2 == 0x0df910 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x2689cb and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f1625cb; op2val:0xbf8df910;
op3val:0x7f2689cb; valaddr_reg:x13; val_offset:1011*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:128 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 128, 0, x13, 1011*FLEN/8, x14, x11, x12)

inst_360:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0abfd0 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x0b3975 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x16ea94 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e8abfd0; op2val:0xc00b3975;
op3val:0x7f16ea94; valaddr_reg:x13; val_offset:1014*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 1014*FLEN/8, x14, x11, x12)

inst_361:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0abfd0 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x0b3975 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x16ea94 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e8abfd0; op2val:0xc00b3975;
op3val:0x7f16ea94; valaddr_reg:x13; val_offset:1017*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:32 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 32, 0, x13, 1017*FLEN/8, x14, x11, x12)

inst_362:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0abfd0 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x0b3975 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x16ea94 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e8abfd0; op2val:0xc00b3975;
op3val:0x7f16ea94; valaddr_reg:x13; val_offset:1020*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:64 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 64, 0, x13, 1020*FLEN/8, x14, x11, x12)

inst_363:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0abfd0 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x0b3975 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x16ea94 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e8abfd0; op2val:0xc00b3975;
op3val:0x7f16ea94; valaddr_reg:x13; val_offset:1023*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:96 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 96, 0, x13, 1023*FLEN/8, x14, x11, x12)

inst_364:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0abfd0 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x0b3975 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x16ea94 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e8abfd0; op2val:0xc00b3975;
op3val:0x7f16ea94; valaddr_reg:x13; val_offset:1026*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:128 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 128, 0, x13, 1026*FLEN/8, x14, x11, x12)

inst_365:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x14c7ca and fs2 == 1 and fe2 == 0x7e and fm2 == 0x65789e and fs3 == 0 and fe3 == 0xfe and fm3 == 0x055cd1 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f14c7ca; op2val:0xbf65789e;
op3val:0x7f055cd1; valaddr_reg:x13; val_offset:1029*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 1029*FLEN/8, x14, x11, x12)

inst_366:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x14c7ca and fs2 == 1 and fe2 == 0x7e and fm2 == 0x65789e and fs3 == 0 and fe3 == 0xfe and fm3 == 0x055cd1 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f14c7ca; op2val:0xbf65789e;
op3val:0x7f055cd1; valaddr_reg:x13; val_offset:1032*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:32 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 32, 0, x13, 1032*FLEN/8, x14, x11, x12)

inst_367:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x14c7ca and fs2 == 1 and fe2 == 0x7e and fm2 == 0x65789e and fs3 == 0 and fe3 == 0xfe and fm3 == 0x055cd1 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f14c7ca; op2val:0xbf65789e;
op3val:0x7f055cd1; valaddr_reg:x13; val_offset:1035*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:64 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 64, 0, x13, 1035*FLEN/8, x14, x11, x12)

inst_368:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x14c7ca and fs2 == 1 and fe2 == 0x7e and fm2 == 0x65789e and fs3 == 0 and fe3 == 0xfe and fm3 == 0x055cd1 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f14c7ca; op2val:0xbf65789e;
op3val:0x7f055cd1; valaddr_reg:x13; val_offset:1038*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:96 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 96, 0, x13, 1038*FLEN/8, x14, x11, x12)

inst_369:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x14c7ca and fs2 == 1 and fe2 == 0x7e and fm2 == 0x65789e and fs3 == 0 and fe3 == 0xfe and fm3 == 0x055cd1 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f14c7ca; op2val:0xbf65789e;
op3val:0x7f055cd1; valaddr_reg:x13; val_offset:1041*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:128 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 128, 0, x13, 1041*FLEN/8, x14, x11, x12)

inst_370:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7efbaa and fs2 == 1 and fe2 == 0x7f and fm2 == 0x126eac and fs3 == 0 and fe3 == 0xfe and fm3 == 0x11d9c2 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7efefbaa; op2val:0xbf926eac;
op3val:0x7f11d9c2; valaddr_reg:x13; val_offset:1044*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 1044*FLEN/8, x14, x11, x12)

inst_371:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7efbaa and fs2 == 1 and fe2 == 0x7f and fm2 == 0x126eac and fs3 == 0 and fe3 == 0xfe and fm3 == 0x11d9c2 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7efefbaa; op2val:0xbf926eac;
op3val:0x7f11d9c2; valaddr_reg:x13; val_offset:1047*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:32 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 32, 0, x13, 1047*FLEN/8, x14, x11, x12)

inst_372:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7efbaa and fs2 == 1 and fe2 == 0x7f and fm2 == 0x126eac and fs3 == 0 and fe3 == 0xfe and fm3 == 0x11d9c2 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7efefbaa; op2val:0xbf926eac;
op3val:0x7f11d9c2; valaddr_reg:x13; val_offset:1050*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:64 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 64, 0, x13, 1050*FLEN/8, x14, x11, x12)

inst_373:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7efbaa and fs2 == 1 and fe2 == 0x7f and fm2 == 0x126eac and fs3 == 0 and fe3 == 0xfe and fm3 == 0x11d9c2 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7efefbaa; op2val:0xbf926eac;
op3val:0x7f11d9c2; valaddr_reg:x13; val_offset:1053*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:96 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 96, 0, x13, 1053*FLEN/8, x14, x11, x12)

inst_374:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7efbaa and fs2 == 1 and fe2 == 0x7f and fm2 == 0x126eac and fs3 == 0 and fe3 == 0xfe and fm3 == 0x11d9c2 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7efefbaa; op2val:0xbf926eac;
op3val:0x7f11d9c2; valaddr_reg:x13; val_offset:1056*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:128 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 128, 0, x13, 1056*FLEN/8, x14, x11, x12)

inst_375:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0b8ecb and fs2 == 1 and fe2 == 0x7f and fm2 == 0x781ce6 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x074216 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e8b8ecb; op2val:0xbff81ce6;
op3val:0x7f074216; valaddr_reg:x13; val_offset:1059*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 1059*FLEN/8, x14, x11, x12)

inst_376:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0b8ecb and fs2 == 1 and fe2 == 0x7f and fm2 == 0x781ce6 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x074216 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e8b8ecb; op2val:0xbff81ce6;
op3val:0x7f074216; valaddr_reg:x13; val_offset:1062*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:32 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 32, 0, x13, 1062*FLEN/8, x14, x11, x12)

inst_377:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0b8ecb and fs2 == 1 and fe2 == 0x7f and fm2 == 0x781ce6 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x074216 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e8b8ecb; op2val:0xbff81ce6;
op3val:0x7f074216; valaddr_reg:x13; val_offset:1065*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:64 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 64, 0, x13, 1065*FLEN/8, x14, x11, x12)

inst_378:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0b8ecb and fs2 == 1 and fe2 == 0x7f and fm2 == 0x781ce6 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x074216 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e8b8ecb; op2val:0xbff81ce6;
op3val:0x7f074216; valaddr_reg:x13; val_offset:1068*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:96 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 96, 0, x13, 1068*FLEN/8, x14, x11, x12)

inst_379:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0b8ecb and fs2 == 1 and fe2 == 0x7f and fm2 == 0x781ce6 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x074216 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e8b8ecb; op2val:0xbff81ce6;
op3val:0x7f074216; valaddr_reg:x13; val_offset:1071*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:128 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 128, 0, x13, 1071*FLEN/8, x14, x11, x12)

inst_380:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x57b1c2 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x5d5a9b and fs3 == 0 and fe3 == 0xfd and fm3 == 0x3a80cc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e57b1c2; op2val:0xbfdd5a9b;
op3val:0x7eba80cc; valaddr_reg:x13; val_offset:1074*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 1074*FLEN/8, x14, x11, x12)

inst_381:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x57b1c2 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x5d5a9b and fs3 == 0 and fe3 == 0xfd and fm3 == 0x3a80cc and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e57b1c2; op2val:0xbfdd5a9b;
op3val:0x7eba80cc; valaddr_reg:x13; val_offset:1077*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:32 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 32, 0, x13, 1077*FLEN/8, x14, x11, x12)

inst_382:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x57b1c2 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x5d5a9b and fs3 == 0 and fe3 == 0xfd and fm3 == 0x3a80cc and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e57b1c2; op2val:0xbfdd5a9b;
op3val:0x7eba80cc; valaddr_reg:x13; val_offset:1080*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:64 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 64, 0, x13, 1080*FLEN/8, x14, x11, x12)

inst_383:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x57b1c2 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x5d5a9b and fs3 == 0 and fe3 == 0xfd and fm3 == 0x3a80cc and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e57b1c2; op2val:0xbfdd5a9b;
op3val:0x7eba80cc; valaddr_reg:x13; val_offset:1083*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:96 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 96, 0, x13, 1083*FLEN/8, x14, x11, x12)

inst_384:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x57b1c2 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x5d5a9b and fs3 == 0 and fe3 == 0xfd and fm3 == 0x3a80cc and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e57b1c2; op2val:0xbfdd5a9b;
op3val:0x7eba80cc; valaddr_reg:x13; val_offset:1086*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:128 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 128, 0, x13, 1086*FLEN/8, x14, x11, x12)

inst_385:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x13caa0 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x65c581 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x04a647 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f13caa0; op2val:0xbf65c581;
op3val:0x7f04a647; valaddr_reg:x13; val_offset:1089*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 1089*FLEN/8, x14, x11, x12)

inst_386:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x13caa0 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x65c581 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x04a647 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f13caa0; op2val:0xbf65c581;
op3val:0x7f04a647; valaddr_reg:x13; val_offset:1092*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:32 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 32, 0, x13, 1092*FLEN/8, x14, x11, x12)

inst_387:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x13caa0 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x65c581 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x04a647 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f13caa0; op2val:0xbf65c581;
op3val:0x7f04a647; valaddr_reg:x13; val_offset:1095*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:64 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 64, 0, x13, 1095*FLEN/8, x14, x11, x12)

inst_388:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x13caa0 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x65c581 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x04a647 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f13caa0; op2val:0xbf65c581;
op3val:0x7f04a647; valaddr_reg:x13; val_offset:1098*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:96 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 96, 0, x13, 1098*FLEN/8, x14, x11, x12)

inst_389:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x13caa0 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x65c581 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x04a647 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f13caa0; op2val:0xbf65c581;
op3val:0x7f04a647; valaddr_reg:x13; val_offset:1101*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:128 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 128, 0, x13, 1101*FLEN/8, x14, x11, x12)

inst_390:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x61ada9 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x4defe6 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x358b8d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e61ada9; op2val:0xc04defe6;
op3val:0x7f358b8d; valaddr_reg:x13; val_offset:1104*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 1104*FLEN/8, x14, x11, x12)

inst_391:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x61ada9 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x4defe6 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x358b8d and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e61ada9; op2val:0xc04defe6;
op3val:0x7f358b8d; valaddr_reg:x13; val_offset:1107*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:32 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 32, 0, x13, 1107*FLEN/8, x14, x11, x12)

inst_392:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x61ada9 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x4defe6 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x358b8d and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e61ada9; op2val:0xc04defe6;
op3val:0x7f358b8d; valaddr_reg:x13; val_offset:1110*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:64 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 64, 0, x13, 1110*FLEN/8, x14, x11, x12)

inst_393:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x61ada9 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x4defe6 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x358b8d and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e61ada9; op2val:0xc04defe6;
op3val:0x7f358b8d; valaddr_reg:x13; val_offset:1113*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:96 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 96, 0, x13, 1113*FLEN/8, x14, x11, x12)

inst_394:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x61ada9 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x4defe6 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x358b8d and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e61ada9; op2val:0xc04defe6;
op3val:0x7f358b8d; valaddr_reg:x13; val_offset:1116*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:128 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 128, 0, x13, 1116*FLEN/8, x14, x11, x12)

inst_395:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x797b55 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x64cca5 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x5ef947 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ef97b55; op2val:0xbf64cca5;
op3val:0x7edef947; valaddr_reg:x13; val_offset:1119*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 1119*FLEN/8, x14, x11, x12)

inst_396:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x797b55 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x64cca5 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x5ef947 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ef97b55; op2val:0xbf64cca5;
op3val:0x7edef947; valaddr_reg:x13; val_offset:1122*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:32 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 32, 0, x13, 1122*FLEN/8, x14, x11, x12)

inst_397:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x797b55 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x64cca5 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x5ef947 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ef97b55; op2val:0xbf64cca5;
op3val:0x7edef947; valaddr_reg:x13; val_offset:1125*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:64 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 64, 0, x13, 1125*FLEN/8, x14, x11, x12)

inst_398:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x797b55 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x64cca5 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x5ef947 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ef97b55; op2val:0xbf64cca5;
op3val:0x7edef947; valaddr_reg:x13; val_offset:1128*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:96 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 96, 0, x13, 1128*FLEN/8, x14, x11, x12)

inst_399:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x797b55 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x64cca5 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x5ef947 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ef97b55; op2val:0xbf64cca5;
op3val:0x7edef947; valaddr_reg:x13; val_offset:1131*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:128 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 128, 0, x13, 1131*FLEN/8, x14, x11, x12)

inst_400:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x0e4d98 and fs2 == 1 and fe2 == 0x84 and fm2 == 0x3ceebe and fs3 == 0 and fe3 == 0xfd and fm3 == 0x520b63 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7c0e4d98; op2val:0xc23ceebe;
op3val:0x7ed20b63; valaddr_reg:x13; val_offset:1134*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 1134*FLEN/8, x14, x11, x12)

inst_401:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x0e4d98 and fs2 == 1 and fe2 == 0x84 and fm2 == 0x3ceebe and fs3 == 0 and fe3 == 0xfd and fm3 == 0x520b63 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7c0e4d98; op2val:0xc23ceebe;
op3val:0x7ed20b63; valaddr_reg:x13; val_offset:1137*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:32 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 32, 0, x13, 1137*FLEN/8, x14, x11, x12)

inst_402:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x0e4d98 and fs2 == 1 and fe2 == 0x84 and fm2 == 0x3ceebe and fs3 == 0 and fe3 == 0xfd and fm3 == 0x520b63 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7c0e4d98; op2val:0xc23ceebe;
op3val:0x7ed20b63; valaddr_reg:x13; val_offset:1140*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:64 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 64, 0, x13, 1140*FLEN/8, x14, x11, x12)

inst_403:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x0e4d98 and fs2 == 1 and fe2 == 0x84 and fm2 == 0x3ceebe and fs3 == 0 and fe3 == 0xfd and fm3 == 0x520b63 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7c0e4d98; op2val:0xc23ceebe;
op3val:0x7ed20b63; valaddr_reg:x13; val_offset:1143*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:96 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 96, 0, x13, 1143*FLEN/8, x14, x11, x12)

inst_404:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x0e4d98 and fs2 == 1 and fe2 == 0x84 and fm2 == 0x3ceebe and fs3 == 0 and fe3 == 0xfd and fm3 == 0x520b63 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7c0e4d98; op2val:0xc23ceebe;
op3val:0x7ed20b63; valaddr_reg:x13; val_offset:1146*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:128 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 128, 0, x13, 1146*FLEN/8, x14, x11, x12)

inst_405:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x40881b and fs2 == 1 and fe2 == 0x80 and fm2 == 0x2b773c and fs3 == 0 and fe3 == 0xfe and fm3 == 0x00f497 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e40881b; op2val:0xc02b773c;
op3val:0x7f00f497; valaddr_reg:x13; val_offset:1149*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 1149*FLEN/8, x14, x11, x12)
RVTEST_SIGBASE(x11,signature_x11_3)

inst_406:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x40881b and fs2 == 1 and fe2 == 0x80 and fm2 == 0x2b773c and fs3 == 0 and fe3 == 0xfe and fm3 == 0x00f497 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e40881b; op2val:0xc02b773c;
op3val:0x7f00f497; valaddr_reg:x13; val_offset:1152*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:32 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 32, 0, x13, 1152*FLEN/8, x14, x11, x12)

inst_407:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x40881b and fs2 == 1 and fe2 == 0x80 and fm2 == 0x2b773c and fs3 == 0 and fe3 == 0xfe and fm3 == 0x00f497 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e40881b; op2val:0xc02b773c;
op3val:0x7f00f497; valaddr_reg:x13; val_offset:1155*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:64 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 64, 0, x13, 1155*FLEN/8, x14, x11, x12)

inst_408:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x40881b and fs2 == 1 and fe2 == 0x80 and fm2 == 0x2b773c and fs3 == 0 and fe3 == 0xfe and fm3 == 0x00f497 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e40881b; op2val:0xc02b773c;
op3val:0x7f00f497; valaddr_reg:x13; val_offset:1158*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:96 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 96, 0, x13, 1158*FLEN/8, x14, x11, x12)

inst_409:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x40881b and fs2 == 1 and fe2 == 0x80 and fm2 == 0x2b773c and fs3 == 0 and fe3 == 0xfe and fm3 == 0x00f497 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e40881b; op2val:0xc02b773c;
op3val:0x7f00f497; valaddr_reg:x13; val_offset:1161*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:128 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 128, 0, x13, 1161*FLEN/8, x14, x11, x12)

inst_410:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x31c4c0 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x61ceaa and fs3 == 0 and fe3 == 0xfe and fm3 == 0x1ccd6f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7eb1c4c0; op2val:0xbfe1ceaa;
op3val:0x7f1ccd6f; valaddr_reg:x13; val_offset:1164*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 1164*FLEN/8, x14, x11, x12)

inst_411:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x31c4c0 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x61ceaa and fs3 == 0 and fe3 == 0xfe and fm3 == 0x1ccd6f and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7eb1c4c0; op2val:0xbfe1ceaa;
op3val:0x7f1ccd6f; valaddr_reg:x13; val_offset:1167*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:32 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 32, 0, x13, 1167*FLEN/8, x14, x11, x12)

inst_412:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x31c4c0 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x61ceaa and fs3 == 0 and fe3 == 0xfe and fm3 == 0x1ccd6f and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7eb1c4c0; op2val:0xbfe1ceaa;
op3val:0x7f1ccd6f; valaddr_reg:x13; val_offset:1170*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:64 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 64, 0, x13, 1170*FLEN/8, x14, x11, x12)

inst_413:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x31c4c0 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x61ceaa and fs3 == 0 and fe3 == 0xfe and fm3 == 0x1ccd6f and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7eb1c4c0; op2val:0xbfe1ceaa;
op3val:0x7f1ccd6f; valaddr_reg:x13; val_offset:1173*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:96 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 96, 0, x13, 1173*FLEN/8, x14, x11, x12)

inst_414:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x31c4c0 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x61ceaa and fs3 == 0 and fe3 == 0xfe and fm3 == 0x1ccd6f and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7eb1c4c0; op2val:0xbfe1ceaa;
op3val:0x7f1ccd6f; valaddr_reg:x13; val_offset:1176*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:128 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 128, 0, x13, 1176*FLEN/8, x14, x11, x12)

inst_415:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x789da3 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x1db158 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x1924e8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ef89da3; op2val:0xbf9db158;
op3val:0x7f1924e8; valaddr_reg:x13; val_offset:1179*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 1179*FLEN/8, x14, x11, x12)

inst_416:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x789da3 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x1db158 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x1924e8 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ef89da3; op2val:0xbf9db158;
op3val:0x7f1924e8; valaddr_reg:x13; val_offset:1182*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:32 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 32, 0, x13, 1182*FLEN/8, x14, x11, x12)

inst_417:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x789da3 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x1db158 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x1924e8 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ef89da3; op2val:0xbf9db158;
op3val:0x7f1924e8; valaddr_reg:x13; val_offset:1185*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:64 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 64, 0, x13, 1185*FLEN/8, x14, x11, x12)

inst_418:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x789da3 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x1db158 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x1924e8 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ef89da3; op2val:0xbf9db158;
op3val:0x7f1924e8; valaddr_reg:x13; val_offset:1188*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:96 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 96, 0, x13, 1188*FLEN/8, x14, x11, x12)

inst_419:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x789da3 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x1db158 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x1924e8 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ef89da3; op2val:0xbf9db158;
op3val:0x7f1924e8; valaddr_reg:x13; val_offset:1191*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:128 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 128, 0, x13, 1191*FLEN/8, x14, x11, x12)

inst_420:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x05966f and fs2 == 1 and fe2 == 0x7f and fm2 == 0x6cf9b4 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x7751f9 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e85966f; op2val:0xbfecf9b4;
op3val:0x7ef751f9; valaddr_reg:x13; val_offset:1194*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 1194*FLEN/8, x14, x11, x12)

inst_421:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x05966f and fs2 == 1 and fe2 == 0x7f and fm2 == 0x6cf9b4 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x7751f9 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e85966f; op2val:0xbfecf9b4;
op3val:0x7ef751f9; valaddr_reg:x13; val_offset:1197*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:32 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 32, 0, x13, 1197*FLEN/8, x14, x11, x12)

inst_422:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x05966f and fs2 == 1 and fe2 == 0x7f and fm2 == 0x6cf9b4 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x7751f9 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e85966f; op2val:0xbfecf9b4;
op3val:0x7ef751f9; valaddr_reg:x13; val_offset:1200*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:64 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 64, 0, x13, 1200*FLEN/8, x14, x11, x12)

inst_423:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x05966f and fs2 == 1 and fe2 == 0x7f and fm2 == 0x6cf9b4 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x7751f9 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e85966f; op2val:0xbfecf9b4;
op3val:0x7ef751f9; valaddr_reg:x13; val_offset:1203*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:96 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 96, 0, x13, 1203*FLEN/8, x14, x11, x12)

inst_424:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x05966f and fs2 == 1 and fe2 == 0x7f and fm2 == 0x6cf9b4 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x7751f9 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e85966f; op2val:0xbfecf9b4;
op3val:0x7ef751f9; valaddr_reg:x13; val_offset:1206*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:128 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 128, 0, x13, 1206*FLEN/8, x14, x11, x12)

inst_425:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0da9b0 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x0fad14 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x1f0320 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f0da9b0; op2val:0xbf8fad14;
op3val:0x7f1f0320; valaddr_reg:x13; val_offset:1209*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 1209*FLEN/8, x14, x11, x12)

inst_426:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0da9b0 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x0fad14 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x1f0320 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f0da9b0; op2val:0xbf8fad14;
op3val:0x7f1f0320; valaddr_reg:x13; val_offset:1212*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:32 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 32, 0, x13, 1212*FLEN/8, x14, x11, x12)

inst_427:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0da9b0 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x0fad14 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x1f0320 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f0da9b0; op2val:0xbf8fad14;
op3val:0x7f1f0320; valaddr_reg:x13; val_offset:1215*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:64 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 64, 0, x13, 1215*FLEN/8, x14, x11, x12)

inst_428:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0da9b0 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x0fad14 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x1f0320 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f0da9b0; op2val:0xbf8fad14;
op3val:0x7f1f0320; valaddr_reg:x13; val_offset:1218*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:96 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 96, 0, x13, 1218*FLEN/8, x14, x11, x12)

inst_429:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0da9b0 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x0fad14 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x1f0320 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f0da9b0; op2val:0xbf8fad14;
op3val:0x7f1f0320; valaddr_reg:x13; val_offset:1221*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:128 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 128, 0, x13, 1221*FLEN/8, x14, x11, x12)

inst_430:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x066ad6 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x1a1b4e and fs3 == 0 and fe3 == 0xfe and fm3 == 0x21d537 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e866ad6; op2val:0xc01a1b4e;
op3val:0x7f21d537; valaddr_reg:x13; val_offset:1224*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 1224*FLEN/8, x14, x11, x12)

inst_431:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x066ad6 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x1a1b4e and fs3 == 0 and fe3 == 0xfe and fm3 == 0x21d537 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e866ad6; op2val:0xc01a1b4e;
op3val:0x7f21d537; valaddr_reg:x13; val_offset:1227*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:32 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 32, 0, x13, 1227*FLEN/8, x14, x11, x12)

inst_432:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x066ad6 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x1a1b4e and fs3 == 0 and fe3 == 0xfe and fm3 == 0x21d537 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e866ad6; op2val:0xc01a1b4e;
op3val:0x7f21d537; valaddr_reg:x13; val_offset:1230*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:64 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 64, 0, x13, 1230*FLEN/8, x14, x11, x12)

inst_433:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x066ad6 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x1a1b4e and fs3 == 0 and fe3 == 0xfe and fm3 == 0x21d537 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e866ad6; op2val:0xc01a1b4e;
op3val:0x7f21d537; valaddr_reg:x13; val_offset:1233*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:96 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 96, 0, x13, 1233*FLEN/8, x14, x11, x12)

inst_434:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x066ad6 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x1a1b4e and fs3 == 0 and fe3 == 0xfe and fm3 == 0x21d537 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e866ad6; op2val:0xc01a1b4e;
op3val:0x7f21d537; valaddr_reg:x13; val_offset:1236*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:128 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 128, 0, x13, 1236*FLEN/8, x14, x11, x12)

inst_435:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2705e0 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x4a90d7 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x042923 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f2705e0; op2val:0xbf4a90d7;
op3val:0x7f042923; valaddr_reg:x13; val_offset:1239*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 1239*FLEN/8, x14, x11, x12)

inst_436:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2705e0 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x4a90d7 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x042923 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f2705e0; op2val:0xbf4a90d7;
op3val:0x7f042923; valaddr_reg:x13; val_offset:1242*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:32 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 32, 0, x13, 1242*FLEN/8, x14, x11, x12)

inst_437:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2705e0 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x4a90d7 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x042923 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f2705e0; op2val:0xbf4a90d7;
op3val:0x7f042923; valaddr_reg:x13; val_offset:1245*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:64 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 64, 0, x13, 1245*FLEN/8, x14, x11, x12)

inst_438:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2705e0 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x4a90d7 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x042923 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f2705e0; op2val:0xbf4a90d7;
op3val:0x7f042923; valaddr_reg:x13; val_offset:1248*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:96 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 96, 0, x13, 1248*FLEN/8, x14, x11, x12)

inst_439:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2705e0 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x4a90d7 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x042923 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f2705e0; op2val:0xbf4a90d7;
op3val:0x7f042923; valaddr_reg:x13; val_offset:1251*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:128 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 128, 0, x13, 1251*FLEN/8, x14, x11, x12)

inst_440:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3b6a5b and fs2 == 1 and fe2 == 0x7e and fm2 == 0x7adbb0 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x37a6b2 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f3b6a5b; op2val:0xbf7adbb0;
op3val:0x7f37a6b2; valaddr_reg:x13; val_offset:1254*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 1254*FLEN/8, x14, x11, x12)

inst_441:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3b6a5b and fs2 == 1 and fe2 == 0x7e and fm2 == 0x7adbb0 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x37a6b2 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f3b6a5b; op2val:0xbf7adbb0;
op3val:0x7f37a6b2; valaddr_reg:x13; val_offset:1257*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:32 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 32, 0, x13, 1257*FLEN/8, x14, x11, x12)

inst_442:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3b6a5b and fs2 == 1 and fe2 == 0x7e and fm2 == 0x7adbb0 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x37a6b2 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f3b6a5b; op2val:0xbf7adbb0;
op3val:0x7f37a6b2; valaddr_reg:x13; val_offset:1260*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:64 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 64, 0, x13, 1260*FLEN/8, x14, x11, x12)

inst_443:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3b6a5b and fs2 == 1 and fe2 == 0x7e and fm2 == 0x7adbb0 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x37a6b2 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f3b6a5b; op2val:0xbf7adbb0;
op3val:0x7f37a6b2; valaddr_reg:x13; val_offset:1263*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:96 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 96, 0, x13, 1263*FLEN/8, x14, x11, x12)

inst_444:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3b6a5b and fs2 == 1 and fe2 == 0x7e and fm2 == 0x7adbb0 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x37a6b2 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f3b6a5b; op2val:0xbf7adbb0;
op3val:0x7f37a6b2; valaddr_reg:x13; val_offset:1266*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:128 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 128, 0, x13, 1266*FLEN/8, x14, x11, x12)

inst_445:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x46f72d and fs2 == 1 and fe2 == 0x7f and fm2 == 0x02c459 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x4b443e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ec6f72d; op2val:0xbf82c459;
op3val:0x7ecb443e; valaddr_reg:x13; val_offset:1269*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 1269*FLEN/8, x14, x11, x12)

inst_446:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x46f72d and fs2 == 1 and fe2 == 0x7f and fm2 == 0x02c459 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x4b443e and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ec6f72d; op2val:0xbf82c459;
op3val:0x7ecb443e; valaddr_reg:x13; val_offset:1272*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:32 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 32, 0, x13, 1272*FLEN/8, x14, x11, x12)

inst_447:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x46f72d and fs2 == 1 and fe2 == 0x7f and fm2 == 0x02c459 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x4b443e and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ec6f72d; op2val:0xbf82c459;
op3val:0x7ecb443e; valaddr_reg:x13; val_offset:1275*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:64 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 64, 0, x13, 1275*FLEN/8, x14, x11, x12)

inst_448:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x46f72d and fs2 == 1 and fe2 == 0x7f and fm2 == 0x02c459 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x4b443e and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ec6f72d; op2val:0xbf82c459;
op3val:0x7ecb443e; valaddr_reg:x13; val_offset:1278*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:96 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 96, 0, x13, 1278*FLEN/8, x14, x11, x12)

inst_449:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x46f72d and fs2 == 1 and fe2 == 0x7f and fm2 == 0x02c459 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x4b443e and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ec6f72d; op2val:0xbf82c459;
op3val:0x7ecb443e; valaddr_reg:x13; val_offset:1281*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:128 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 128, 0, x13, 1281*FLEN/8, x14, x11, x12)

inst_450:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7f3dba and fs2 == 1 and fe2 == 0x81 and fm2 == 0x211bd1 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x20a18e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7dff3dba; op2val:0xc0a11bd1;
op3val:0x7f20a18e; valaddr_reg:x13; val_offset:1284*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 1284*FLEN/8, x14, x11, x12)

inst_451:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7f3dba and fs2 == 1 and fe2 == 0x81 and fm2 == 0x211bd1 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x20a18e and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7dff3dba; op2val:0xc0a11bd1;
op3val:0x7f20a18e; valaddr_reg:x13; val_offset:1287*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:32 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 32, 0, x13, 1287*FLEN/8, x14, x11, x12)

inst_452:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7f3dba and fs2 == 1 and fe2 == 0x81 and fm2 == 0x211bd1 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x20a18e and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7dff3dba; op2val:0xc0a11bd1;
op3val:0x7f20a18e; valaddr_reg:x13; val_offset:1290*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:64 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 64, 0, x13, 1290*FLEN/8, x14, x11, x12)

inst_453:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7f3dba and fs2 == 1 and fe2 == 0x81 and fm2 == 0x211bd1 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x20a18e and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7dff3dba; op2val:0xc0a11bd1;
op3val:0x7f20a18e; valaddr_reg:x13; val_offset:1293*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:96 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 96, 0, x13, 1293*FLEN/8, x14, x11, x12)

inst_454:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7f3dba and fs2 == 1 and fe2 == 0x81 and fm2 == 0x211bd1 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x20a18e and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7dff3dba; op2val:0xc0a11bd1;
op3val:0x7f20a18e; valaddr_reg:x13; val_offset:1296*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:128 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 128, 0, x13, 1296*FLEN/8, x14, x11, x12)

inst_455:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x33fa2e and fs2 == 1 and fe2 == 0x7e and fm2 == 0x0255a1 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x37427e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f33fa2e; op2val:0xbf0255a1;
op3val:0x7eb7427e; valaddr_reg:x13; val_offset:1299*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 1299*FLEN/8, x14, x11, x12)

inst_456:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x33fa2e and fs2 == 1 and fe2 == 0x7e and fm2 == 0x0255a1 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x37427e and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f33fa2e; op2val:0xbf0255a1;
op3val:0x7eb7427e; valaddr_reg:x13; val_offset:1302*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:32 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 32, 0, x13, 1302*FLEN/8, x14, x11, x12)

inst_457:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x33fa2e and fs2 == 1 and fe2 == 0x7e and fm2 == 0x0255a1 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x37427e and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f33fa2e; op2val:0xbf0255a1;
op3val:0x7eb7427e; valaddr_reg:x13; val_offset:1305*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:64 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 64, 0, x13, 1305*FLEN/8, x14, x11, x12)

inst_458:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x33fa2e and fs2 == 1 and fe2 == 0x7e and fm2 == 0x0255a1 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x37427e and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f33fa2e; op2val:0xbf0255a1;
op3val:0x7eb7427e; valaddr_reg:x13; val_offset:1308*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:96 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 96, 0, x13, 1308*FLEN/8, x14, x11, x12)

inst_459:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x33fa2e and fs2 == 1 and fe2 == 0x7e and fm2 == 0x0255a1 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x37427e and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f33fa2e; op2val:0xbf0255a1;
op3val:0x7eb7427e; valaddr_reg:x13; val_offset:1311*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:128 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 128, 0, x13, 1311*FLEN/8, x14, x11, x12)

inst_460:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04c0f2 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x053b56 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x0a2e07 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f04c0f2; op2val:0xbf853b56;
op3val:0x7f0a2e07; valaddr_reg:x13; val_offset:1314*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 1314*FLEN/8, x14, x11, x12)

inst_461:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04c0f2 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x053b56 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x0a2e07 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f04c0f2; op2val:0xbf853b56;
op3val:0x7f0a2e07; valaddr_reg:x13; val_offset:1317*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:32 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 32, 0, x13, 1317*FLEN/8, x14, x11, x12)

inst_462:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04c0f2 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x053b56 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x0a2e07 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f04c0f2; op2val:0xbf853b56;
op3val:0x7f0a2e07; valaddr_reg:x13; val_offset:1320*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:64 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 64, 0, x13, 1320*FLEN/8, x14, x11, x12)

inst_463:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04c0f2 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x053b56 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x0a2e07 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f04c0f2; op2val:0xbf853b56;
op3val:0x7f0a2e07; valaddr_reg:x13; val_offset:1323*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:96 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 96, 0, x13, 1323*FLEN/8, x14, x11, x12)

inst_464:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04c0f2 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x053b56 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x0a2e07 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f04c0f2; op2val:0xbf853b56;
op3val:0x7f0a2e07; valaddr_reg:x13; val_offset:1326*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:128 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 128, 0, x13, 1326*FLEN/8, x14, x11, x12)

inst_465:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0c3a54 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x70e95d and fs3 == 0 and fe3 == 0xfc and fm3 == 0x03f683 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f0c3a54; op2val:0xbe70e95d;
op3val:0x7e03f683; valaddr_reg:x13; val_offset:1329*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 1329*FLEN/8, x14, x11, x12)

inst_466:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0c3a54 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x70e95d and fs3 == 0 and fe3 == 0xfc and fm3 == 0x03f683 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f0c3a54; op2val:0xbe70e95d;
op3val:0x7e03f683; valaddr_reg:x13; val_offset:1332*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:32 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 32, 0, x13, 1332*FLEN/8, x14, x11, x12)

inst_467:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0c3a54 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x70e95d and fs3 == 0 and fe3 == 0xfc and fm3 == 0x03f683 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f0c3a54; op2val:0xbe70e95d;
op3val:0x7e03f683; valaddr_reg:x13; val_offset:1335*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:64 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 64, 0, x13, 1335*FLEN/8, x14, x11, x12)

inst_468:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0c3a54 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x70e95d and fs3 == 0 and fe3 == 0xfc and fm3 == 0x03f683 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f0c3a54; op2val:0xbe70e95d;
op3val:0x7e03f683; valaddr_reg:x13; val_offset:1338*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:96 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 96, 0, x13, 1338*FLEN/8, x14, x11, x12)

inst_469:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0c3a54 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x70e95d and fs3 == 0 and fe3 == 0xfc and fm3 == 0x03f683 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f0c3a54; op2val:0xbe70e95d;
op3val:0x7e03f683; valaddr_reg:x13; val_offset:1341*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:128 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 128, 0, x13, 1341*FLEN/8, x14, x11, x12)

inst_470:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x15d4d3 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x3e8bad and fs3 == 0 and fe3 == 0xfd and fm3 == 0x5f0b6a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f15d4d3; op2val:0xbf3e8bad;
op3val:0x7edf0b6a; valaddr_reg:x13; val_offset:1344*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 1344*FLEN/8, x14, x11, x12)

inst_471:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x15d4d3 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x3e8bad and fs3 == 0 and fe3 == 0xfd and fm3 == 0x5f0b6a and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f15d4d3; op2val:0xbf3e8bad;
op3val:0x7edf0b6a; valaddr_reg:x13; val_offset:1347*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:32 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 32, 0, x13, 1347*FLEN/8, x14, x11, x12)

inst_472:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x15d4d3 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x3e8bad and fs3 == 0 and fe3 == 0xfd and fm3 == 0x5f0b6a and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f15d4d3; op2val:0xbf3e8bad;
op3val:0x7edf0b6a; valaddr_reg:x13; val_offset:1350*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:64 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 64, 0, x13, 1350*FLEN/8, x14, x11, x12)

inst_473:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x15d4d3 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x3e8bad and fs3 == 0 and fe3 == 0xfd and fm3 == 0x5f0b6a and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f15d4d3; op2val:0xbf3e8bad;
op3val:0x7edf0b6a; valaddr_reg:x13; val_offset:1353*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:96 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 96, 0, x13, 1353*FLEN/8, x14, x11, x12)

inst_474:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x15d4d3 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x3e8bad and fs3 == 0 and fe3 == 0xfd and fm3 == 0x5f0b6a and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f15d4d3; op2val:0xbf3e8bad;
op3val:0x7edf0b6a; valaddr_reg:x13; val_offset:1356*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:128 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 128, 0, x13, 1356*FLEN/8, x14, x11, x12)

inst_475:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7f92d6 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x21da8e and fs3 == 0 and fe3 == 0xfd and fm3 == 0x219589 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7eff92d6; op2val:0xbf21da8e;
op3val:0x7ea19589; valaddr_reg:x13; val_offset:1359*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 1359*FLEN/8, x14, x11, x12)

inst_476:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7f92d6 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x21da8e and fs3 == 0 and fe3 == 0xfd and fm3 == 0x219589 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7eff92d6; op2val:0xbf21da8e;
op3val:0x7ea19589; valaddr_reg:x13; val_offset:1362*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:32 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 32, 0, x13, 1362*FLEN/8, x14, x11, x12)

inst_477:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7f92d6 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x21da8e and fs3 == 0 and fe3 == 0xfd and fm3 == 0x219589 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7eff92d6; op2val:0xbf21da8e;
op3val:0x7ea19589; valaddr_reg:x13; val_offset:1365*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:64 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 64, 0, x13, 1365*FLEN/8, x14, x11, x12)

inst_478:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7f92d6 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x21da8e and fs3 == 0 and fe3 == 0xfd and fm3 == 0x219589 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7eff92d6; op2val:0xbf21da8e;
op3val:0x7ea19589; valaddr_reg:x13; val_offset:1368*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:96 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 96, 0, x13, 1368*FLEN/8, x14, x11, x12)

inst_479:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7f92d6 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x21da8e and fs3 == 0 and fe3 == 0xfd and fm3 == 0x219589 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7eff92d6; op2val:0xbf21da8e;
op3val:0x7ea19589; valaddr_reg:x13; val_offset:1371*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:128 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 128, 0, x13, 1371*FLEN/8, x14, x11, x12)

inst_480:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6f83d9 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x1efb14 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x14be49 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7eef83d9; op2val:0xbf9efb14;
op3val:0x7f14be49; valaddr_reg:x13; val_offset:1374*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 1374*FLEN/8, x14, x11, x12)

inst_481:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6f83d9 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x1efb14 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x14be49 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7eef83d9; op2val:0xbf9efb14;
op3val:0x7f14be49; valaddr_reg:x13; val_offset:1377*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:32 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 32, 0, x13, 1377*FLEN/8, x14, x11, x12)

inst_482:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6f83d9 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x1efb14 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x14be49 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7eef83d9; op2val:0xbf9efb14;
op3val:0x7f14be49; valaddr_reg:x13; val_offset:1380*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:64 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 64, 0, x13, 1380*FLEN/8, x14, x11, x12)

inst_483:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6f83d9 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x1efb14 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x14be49 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7eef83d9; op2val:0xbf9efb14;
op3val:0x7f14be49; valaddr_reg:x13; val_offset:1383*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:96 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 96, 0, x13, 1383*FLEN/8, x14, x11, x12)

inst_484:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6f83d9 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x1efb14 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x14be49 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7eef83d9; op2val:0xbf9efb14;
op3val:0x7f14be49; valaddr_reg:x13; val_offset:1386*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:128 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 128, 0, x13, 1386*FLEN/8, x14, x11, x12)

inst_485:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x748e89 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x10cab1 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x0a51cf and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ef48e89; op2val:0xbf90cab1;
op3val:0x7f0a51cf; valaddr_reg:x13; val_offset:1389*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 1389*FLEN/8, x14, x11, x12)

inst_486:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x748e89 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x10cab1 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x0a51cf and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ef48e89; op2val:0xbf90cab1;
op3val:0x7f0a51cf; valaddr_reg:x13; val_offset:1392*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:32 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 32, 0, x13, 1392*FLEN/8, x14, x11, x12)

inst_487:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x748e89 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x10cab1 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x0a51cf and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ef48e89; op2val:0xbf90cab1;
op3val:0x7f0a51cf; valaddr_reg:x13; val_offset:1395*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:64 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 64, 0, x13, 1395*FLEN/8, x14, x11, x12)

inst_488:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x748e89 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x10cab1 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x0a51cf and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ef48e89; op2val:0xbf90cab1;
op3val:0x7f0a51cf; valaddr_reg:x13; val_offset:1398*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:96 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 96, 0, x13, 1398*FLEN/8, x14, x11, x12)

inst_489:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x748e89 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x10cab1 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x0a51cf and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ef48e89; op2val:0xbf90cab1;
op3val:0x7f0a51cf; valaddr_reg:x13; val_offset:1401*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:128 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 128, 0, x13, 1401*FLEN/8, x14, x11, x12)

inst_490:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x29b5ac and fs2 == 1 and fe2 == 0x81 and fm2 == 0x3962d8 and fs3 == 0 and fe3 == 0xfb and fm3 == 0x75cba0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ca9b5ac; op2val:0xc0b962d8;
op3val:0x7df5cba0; valaddr_reg:x13; val_offset:1404*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 1404*FLEN/8, x14, x11, x12)

inst_491:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x29b5ac and fs2 == 1 and fe2 == 0x81 and fm2 == 0x3962d8 and fs3 == 0 and fe3 == 0xfb and fm3 == 0x75cba0 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ca9b5ac; op2val:0xc0b962d8;
op3val:0x7df5cba0; valaddr_reg:x13; val_offset:1407*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:32 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 32, 0, x13, 1407*FLEN/8, x14, x11, x12)

inst_492:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x29b5ac and fs2 == 1 and fe2 == 0x81 and fm2 == 0x3962d8 and fs3 == 0 and fe3 == 0xfb and fm3 == 0x75cba0 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ca9b5ac; op2val:0xc0b962d8;
op3val:0x7df5cba0; valaddr_reg:x13; val_offset:1410*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:64 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 64, 0, x13, 1410*FLEN/8, x14, x11, x12)

inst_493:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x29b5ac and fs2 == 1 and fe2 == 0x81 and fm2 == 0x3962d8 and fs3 == 0 and fe3 == 0xfb and fm3 == 0x75cba0 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ca9b5ac; op2val:0xc0b962d8;
op3val:0x7df5cba0; valaddr_reg:x13; val_offset:1413*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:96 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 96, 0, x13, 1413*FLEN/8, x14, x11, x12)

inst_494:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x29b5ac and fs2 == 1 and fe2 == 0x81 and fm2 == 0x3962d8 and fs3 == 0 and fe3 == 0xfb and fm3 == 0x75cba0 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ca9b5ac; op2val:0xc0b962d8;
op3val:0x7df5cba0; valaddr_reg:x13; val_offset:1416*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:128 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 128, 0, x13, 1416*FLEN/8, x14, x11, x12)

inst_495:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x295ec9 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3caab6 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x79a51a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ea95ec9; op2val:0xbfbcaab6;
op3val:0x7ef9a51a; valaddr_reg:x13; val_offset:1419*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 1419*FLEN/8, x14, x11, x12)

inst_496:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x295ec9 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3caab6 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x79a51a and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ea95ec9; op2val:0xbfbcaab6;
op3val:0x7ef9a51a; valaddr_reg:x13; val_offset:1422*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:32 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 32, 0, x13, 1422*FLEN/8, x14, x11, x12)

inst_497:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x295ec9 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3caab6 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x79a51a and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ea95ec9; op2val:0xbfbcaab6;
op3val:0x7ef9a51a; valaddr_reg:x13; val_offset:1425*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:64 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 64, 0, x13, 1425*FLEN/8, x14, x11, x12)

inst_498:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x295ec9 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3caab6 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x79a51a and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ea95ec9; op2val:0xbfbcaab6;
op3val:0x7ef9a51a; valaddr_reg:x13; val_offset:1428*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:96 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 96, 0, x13, 1428*FLEN/8, x14, x11, x12)

inst_499:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x295ec9 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3caab6 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x79a51a and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ea95ec9; op2val:0xbfbcaab6;
op3val:0x7ef9a51a; valaddr_reg:x13; val_offset:1431*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:128 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 128, 0, x13, 1431*FLEN/8, x14, x11, x12)

inst_500:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2838a7 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x486d6d and fs3 == 0 and fe3 == 0xfe and fm3 == 0x03b42b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e2838a7; op2val:0xc0486d6d;
op3val:0x7f03b42b; valaddr_reg:x13; val_offset:1434*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 1434*FLEN/8, x14, x11, x12)

inst_501:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2838a7 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x486d6d and fs3 == 0 and fe3 == 0xfe and fm3 == 0x03b42b and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e2838a7; op2val:0xc0486d6d;
op3val:0x7f03b42b; valaddr_reg:x13; val_offset:1437*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:32 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 32, 0, x13, 1437*FLEN/8, x14, x11, x12)

inst_502:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2838a7 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x486d6d and fs3 == 0 and fe3 == 0xfe and fm3 == 0x03b42b and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e2838a7; op2val:0xc0486d6d;
op3val:0x7f03b42b; valaddr_reg:x13; val_offset:1440*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:64 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 64, 0, x13, 1440*FLEN/8, x14, x11, x12)

inst_503:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2838a7 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x486d6d and fs3 == 0 and fe3 == 0xfe and fm3 == 0x03b42b and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e2838a7; op2val:0xc0486d6d;
op3val:0x7f03b42b; valaddr_reg:x13; val_offset:1443*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:96 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 96, 0, x13, 1443*FLEN/8, x14, x11, x12)

inst_504:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2838a7 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x486d6d and fs3 == 0 and fe3 == 0xfe and fm3 == 0x03b42b and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e2838a7; op2val:0xc0486d6d;
op3val:0x7f03b42b; valaddr_reg:x13; val_offset:1446*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:128 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 128, 0, x13, 1446*FLEN/8, x14, x11, x12)

inst_505:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x724091 and fs2 == 1 and fe2 == 0x7b and fm2 == 0x07e5ab and fs3 == 0 and fe3 == 0xfa and fm3 == 0x009962 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ef24091; op2val:0xbd87e5ab;
op3val:0x7d009962; valaddr_reg:x13; val_offset:1449*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 1449*FLEN/8, x14, x11, x12)

inst_506:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x724091 and fs2 == 1 and fe2 == 0x7b and fm2 == 0x07e5ab and fs3 == 0 and fe3 == 0xfa and fm3 == 0x009962 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ef24091; op2val:0xbd87e5ab;
op3val:0x7d009962; valaddr_reg:x13; val_offset:1452*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:32 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 32, 0, x13, 1452*FLEN/8, x14, x11, x12)

inst_507:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x724091 and fs2 == 1 and fe2 == 0x7b and fm2 == 0x07e5ab and fs3 == 0 and fe3 == 0xfa and fm3 == 0x009962 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ef24091; op2val:0xbd87e5ab;
op3val:0x7d009962; valaddr_reg:x13; val_offset:1455*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:64 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 64, 0, x13, 1455*FLEN/8, x14, x11, x12)

inst_508:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x724091 and fs2 == 1 and fe2 == 0x7b and fm2 == 0x07e5ab and fs3 == 0 and fe3 == 0xfa and fm3 == 0x009962 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ef24091; op2val:0xbd87e5ab;
op3val:0x7d009962; valaddr_reg:x13; val_offset:1458*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:96 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 96, 0, x13, 1458*FLEN/8, x14, x11, x12)

inst_509:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x724091 and fs2 == 1 and fe2 == 0x7b and fm2 == 0x07e5ab and fs3 == 0 and fe3 == 0xfa and fm3 == 0x009962 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ef24091; op2val:0xbd87e5ab;
op3val:0x7d009962; valaddr_reg:x13; val_offset:1461*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:128 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 128, 0, x13, 1461*FLEN/8, x14, x11, x12)

inst_510:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3516bd and fs2 == 1 and fe2 == 0x7d and fm2 == 0x75a1a3 and fs3 == 0 and fe3 == 0xfc and fm3 == 0x2dc11a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7eb516bd; op2val:0xbef5a1a3;
op3val:0x7e2dc11a; valaddr_reg:x13; val_offset:1464*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 1464*FLEN/8, x14, x11, x12)

inst_511:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3516bd and fs2 == 1 and fe2 == 0x7d and fm2 == 0x75a1a3 and fs3 == 0 and fe3 == 0xfc and fm3 == 0x2dc11a and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7eb516bd; op2val:0xbef5a1a3;
op3val:0x7e2dc11a; valaddr_reg:x13; val_offset:1467*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:32 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 32, 0, x13, 1467*FLEN/8, x14, x11, x12)

inst_512:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3516bd and fs2 == 1 and fe2 == 0x7d and fm2 == 0x75a1a3 and fs3 == 0 and fe3 == 0xfc and fm3 == 0x2dc11a and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7eb516bd; op2val:0xbef5a1a3;
op3val:0x7e2dc11a; valaddr_reg:x13; val_offset:1470*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:64 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 64, 0, x13, 1470*FLEN/8, x14, x11, x12)

inst_513:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3516bd and fs2 == 1 and fe2 == 0x7d and fm2 == 0x75a1a3 and fs3 == 0 and fe3 == 0xfc and fm3 == 0x2dc11a and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7eb516bd; op2val:0xbef5a1a3;
op3val:0x7e2dc11a; valaddr_reg:x13; val_offset:1473*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:96 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 96, 0, x13, 1473*FLEN/8, x14, x11, x12)

inst_514:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3516bd and fs2 == 1 and fe2 == 0x7d and fm2 == 0x75a1a3 and fs3 == 0 and fe3 == 0xfc and fm3 == 0x2dc11a and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7eb516bd; op2val:0xbef5a1a3;
op3val:0x7e2dc11a; valaddr_reg:x13; val_offset:1476*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:128 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 128, 0, x13, 1476*FLEN/8, x14, x11, x12)

inst_515:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x2653cb and fs2 == 1 and fe2 == 0x80 and fm2 == 0x1dd609 and fs3 == 0 and fe3 == 0xfb and fm3 == 0x4d18e7 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d2653cb; op2val:0xc01dd609;
op3val:0x7dcd18e7; valaddr_reg:x13; val_offset:1479*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 1479*FLEN/8, x14, x11, x12)

inst_516:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x2653cb and fs2 == 1 and fe2 == 0x80 and fm2 == 0x1dd609 and fs3 == 0 and fe3 == 0xfb and fm3 == 0x4d18e7 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d2653cb; op2val:0xc01dd609;
op3val:0x7dcd18e7; valaddr_reg:x13; val_offset:1482*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:32 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 32, 0, x13, 1482*FLEN/8, x14, x11, x12)

inst_517:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x2653cb and fs2 == 1 and fe2 == 0x80 and fm2 == 0x1dd609 and fs3 == 0 and fe3 == 0xfb and fm3 == 0x4d18e7 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d2653cb; op2val:0xc01dd609;
op3val:0x7dcd18e7; valaddr_reg:x13; val_offset:1485*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:64 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 64, 0, x13, 1485*FLEN/8, x14, x11, x12)

inst_518:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x2653cb and fs2 == 1 and fe2 == 0x80 and fm2 == 0x1dd609 and fs3 == 0 and fe3 == 0xfb and fm3 == 0x4d18e7 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d2653cb; op2val:0xc01dd609;
op3val:0x7dcd18e7; valaddr_reg:x13; val_offset:1488*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:96 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 96, 0, x13, 1488*FLEN/8, x14, x11, x12)

inst_519:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x2653cb and fs2 == 1 and fe2 == 0x80 and fm2 == 0x1dd609 and fs3 == 0 and fe3 == 0xfb and fm3 == 0x4d18e7 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d2653cb; op2val:0xc01dd609;
op3val:0x7dcd18e7; valaddr_reg:x13; val_offset:1491*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:128 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 128, 0, x13, 1491*FLEN/8, x14, x11, x12)

inst_520:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x73b9b6 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x12733e and fs3 == 0 and fe3 == 0xfc and fm3 == 0x0b6da2 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e73b9b6; op2val:0xbf12733e;
op3val:0x7e0b6da2; valaddr_reg:x13; val_offset:1494*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 1494*FLEN/8, x14, x11, x12)

inst_521:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x73b9b6 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x12733e and fs3 == 0 and fe3 == 0xfc and fm3 == 0x0b6da2 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e73b9b6; op2val:0xbf12733e;
op3val:0x7e0b6da2; valaddr_reg:x13; val_offset:1497*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:32 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 32, 0, x13, 1497*FLEN/8, x14, x11, x12)

inst_522:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x73b9b6 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x12733e and fs3 == 0 and fe3 == 0xfc and fm3 == 0x0b6da2 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e73b9b6; op2val:0xbf12733e;
op3val:0x7e0b6da2; valaddr_reg:x13; val_offset:1500*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:64 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 64, 0, x13, 1500*FLEN/8, x14, x11, x12)

inst_523:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x73b9b6 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x12733e and fs3 == 0 and fe3 == 0xfc and fm3 == 0x0b6da2 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e73b9b6; op2val:0xbf12733e;
op3val:0x7e0b6da2; valaddr_reg:x13; val_offset:1503*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:96 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 96, 0, x13, 1503*FLEN/8, x14, x11, x12)

inst_524:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x73b9b6 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x12733e and fs3 == 0 and fe3 == 0xfc and fm3 == 0x0b6da2 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e73b9b6; op2val:0xbf12733e;
op3val:0x7e0b6da2; valaddr_reg:x13; val_offset:1506*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:128 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 128, 0, x13, 1506*FLEN/8, x14, x11, x12)

inst_525:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x148024 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x3cd5fe and fs3 == 0 and fe3 == 0xf9 and fm3 == 0x5b1479 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e148024; op2val:0xbe3cd5fe;
op3val:0x7cdb1479; valaddr_reg:x13; val_offset:1509*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 1509*FLEN/8, x14, x11, x12)

inst_526:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x148024 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x3cd5fe and fs3 == 0 and fe3 == 0xf9 and fm3 == 0x5b1479 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e148024; op2val:0xbe3cd5fe;
op3val:0x7cdb1479; valaddr_reg:x13; val_offset:1512*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:32 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 32, 0, x13, 1512*FLEN/8, x14, x11, x12)

inst_527:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x148024 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x3cd5fe and fs3 == 0 and fe3 == 0xf9 and fm3 == 0x5b1479 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e148024; op2val:0xbe3cd5fe;
op3val:0x7cdb1479; valaddr_reg:x13; val_offset:1515*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:64 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 64, 0, x13, 1515*FLEN/8, x14, x11, x12)

inst_528:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x148024 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x3cd5fe and fs3 == 0 and fe3 == 0xf9 and fm3 == 0x5b1479 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e148024; op2val:0xbe3cd5fe;
op3val:0x7cdb1479; valaddr_reg:x13; val_offset:1518*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:96 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 96, 0, x13, 1518*FLEN/8, x14, x11, x12)

inst_529:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x148024 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x3cd5fe and fs3 == 0 and fe3 == 0xf9 and fm3 == 0x5b1479 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e148024; op2val:0xbe3cd5fe;
op3val:0x7cdb1479; valaddr_reg:x13; val_offset:1521*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:128 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 128, 0, x13, 1521*FLEN/8, x14, x11, x12)

inst_530:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x32afd0 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x513864 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x1208e5 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7eb2afd0; op2val:0xbf513864;
op3val:0x7e9208e5; valaddr_reg:x13; val_offset:1524*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 1524*FLEN/8, x14, x11, x12)

inst_531:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x32afd0 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x513864 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x1208e5 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7eb2afd0; op2val:0xbf513864;
op3val:0x7e9208e5; valaddr_reg:x13; val_offset:1527*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:32 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 32, 0, x13, 1527*FLEN/8, x14, x11, x12)

inst_532:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x32afd0 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x513864 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x1208e5 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7eb2afd0; op2val:0xbf513864;
op3val:0x7e9208e5; valaddr_reg:x13; val_offset:1530*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:64 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 64, 0, x13, 1530*FLEN/8, x14, x11, x12)

inst_533:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x32afd0 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x513864 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x1208e5 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7eb2afd0; op2val:0xbf513864;
op3val:0x7e9208e5; valaddr_reg:x13; val_offset:1533*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:96 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 96, 0, x13, 1533*FLEN/8, x14, x11, x12)
RVTEST_SIGBASE(x11,signature_x11_4)

inst_534:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x32afd0 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x513864 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x1208e5 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7eb2afd0; op2val:0xbf513864;
op3val:0x7e9208e5; valaddr_reg:x13; val_offset:1536*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:128 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 128, 0, x13, 1536*FLEN/8, x14, x11, x12)

inst_535:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6aedca and fs2 == 1 and fe2 == 0x7e and fm2 == 0x76f305 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x629f84 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7eeaedca; op2val:0xbf76f305;
op3val:0x7ee29f84; valaddr_reg:x13; val_offset:1539*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 1539*FLEN/8, x14, x11, x12)

inst_536:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6aedca and fs2 == 1 and fe2 == 0x7e and fm2 == 0x76f305 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x629f84 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7eeaedca; op2val:0xbf76f305;
op3val:0x7ee29f84; valaddr_reg:x13; val_offset:1542*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:32 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 32, 0, x13, 1542*FLEN/8, x14, x11, x12)

inst_537:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6aedca and fs2 == 1 and fe2 == 0x7e and fm2 == 0x76f305 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x629f84 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7eeaedca; op2val:0xbf76f305;
op3val:0x7ee29f84; valaddr_reg:x13; val_offset:1545*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:64 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 64, 0, x13, 1545*FLEN/8, x14, x11, x12)

inst_538:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6aedca and fs2 == 1 and fe2 == 0x7e and fm2 == 0x76f305 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x629f84 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7eeaedca; op2val:0xbf76f305;
op3val:0x7ee29f84; valaddr_reg:x13; val_offset:1548*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:96 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 96, 0, x13, 1548*FLEN/8, x14, x11, x12)

inst_539:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6aedca and fs2 == 1 and fe2 == 0x7e and fm2 == 0x76f305 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x629f84 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7eeaedca; op2val:0xbf76f305;
op3val:0x7ee29f84; valaddr_reg:x13; val_offset:1551*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:128 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 128, 0, x13, 1551*FLEN/8, x14, x11, x12)

inst_540:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x36aa81 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x730786 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x2d6937 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e36aa81; op2val:0xc0730786;
op3val:0x7f2d6937; valaddr_reg:x13; val_offset:1554*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 1554*FLEN/8, x14, x11, x12)

inst_541:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x36aa81 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x730786 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x2d6937 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e36aa81; op2val:0xc0730786;
op3val:0x7f2d6937; valaddr_reg:x13; val_offset:1557*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:32 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 32, 0, x13, 1557*FLEN/8, x14, x11, x12)

inst_542:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x36aa81 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x730786 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x2d6937 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e36aa81; op2val:0xc0730786;
op3val:0x7f2d6937; valaddr_reg:x13; val_offset:1560*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:64 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 64, 0, x13, 1560*FLEN/8, x14, x11, x12)

inst_543:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x36aa81 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x730786 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x2d6937 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e36aa81; op2val:0xc0730786;
op3val:0x7f2d6937; valaddr_reg:x13; val_offset:1563*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:96 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 96, 0, x13, 1563*FLEN/8, x14, x11, x12)

inst_544:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x36aa81 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x730786 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x2d6937 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e36aa81; op2val:0xc0730786;
op3val:0x7f2d6937; valaddr_reg:x13; val_offset:1566*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:128 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 128, 0, x13, 1566*FLEN/8, x14, x11, x12)

inst_545:
// fs1 == 0 and fe1 == 0xf4 and fm1 == 0x01e1e1 and fs2 == 1 and fe2 == 0x88 and fm2 == 0x196885 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x1baa0e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7a01e1e1; op2val:0xc4196885;
op3val:0x7e9baa0e; valaddr_reg:x13; val_offset:1569*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 1569*FLEN/8, x14, x11, x12)

inst_546:
// fs1 == 0 and fe1 == 0xf4 and fm1 == 0x01e1e1 and fs2 == 1 and fe2 == 0x88 and fm2 == 0x196885 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x1baa0e and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7a01e1e1; op2val:0xc4196885;
op3val:0x7e9baa0e; valaddr_reg:x13; val_offset:1572*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:32 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 32, 0, x13, 1572*FLEN/8, x14, x11, x12)

inst_547:
// fs1 == 0 and fe1 == 0xf4 and fm1 == 0x01e1e1 and fs2 == 1 and fe2 == 0x88 and fm2 == 0x196885 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x1baa0e and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7a01e1e1; op2val:0xc4196885;
op3val:0x7e9baa0e; valaddr_reg:x13; val_offset:1575*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:64 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 64, 0, x13, 1575*FLEN/8, x14, x11, x12)

inst_548:
// fs1 == 0 and fe1 == 0xf4 and fm1 == 0x01e1e1 and fs2 == 1 and fe2 == 0x88 and fm2 == 0x196885 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x1baa0e and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7a01e1e1; op2val:0xc4196885;
op3val:0x7e9baa0e; valaddr_reg:x13; val_offset:1578*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:96 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 96, 0, x13, 1578*FLEN/8, x14, x11, x12)

inst_549:
// fs1 == 0 and fe1 == 0xf4 and fm1 == 0x01e1e1 and fs2 == 1 and fe2 == 0x88 and fm2 == 0x196885 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x1baa0e and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7a01e1e1; op2val:0xc4196885;
op3val:0x7e9baa0e; valaddr_reg:x13; val_offset:1581*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:128 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 128, 0, x13, 1581*FLEN/8, x14, x11, x12)

inst_550:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x55e8d8 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3c7042 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x1d74cc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e55e8d8; op2val:0xbfbc7042;
op3val:0x7e9d74cc; valaddr_reg:x13; val_offset:1584*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 1584*FLEN/8, x14, x11, x12)

inst_551:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x55e8d8 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3c7042 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x1d74cc and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e55e8d8; op2val:0xbfbc7042;
op3val:0x7e9d74cc; valaddr_reg:x13; val_offset:1587*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:32 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 32, 0, x13, 1587*FLEN/8, x14, x11, x12)

inst_552:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x55e8d8 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3c7042 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x1d74cc and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e55e8d8; op2val:0xbfbc7042;
op3val:0x7e9d74cc; valaddr_reg:x13; val_offset:1590*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:64 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 64, 0, x13, 1590*FLEN/8, x14, x11, x12)

inst_553:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x55e8d8 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3c7042 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x1d74cc and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e55e8d8; op2val:0xbfbc7042;
op3val:0x7e9d74cc; valaddr_reg:x13; val_offset:1593*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:96 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 96, 0, x13, 1593*FLEN/8, x14, x11, x12)

inst_554:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x55e8d8 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3c7042 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x1d74cc and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e55e8d8; op2val:0xbfbc7042;
op3val:0x7e9d74cc; valaddr_reg:x13; val_offset:1596*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:128 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 128, 0, x13, 1596*FLEN/8, x14, x11, x12)

inst_555:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x30c11b and fs2 == 1 and fe2 == 0x81 and fm2 == 0x673027 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x1f9f7f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7db0c11b; op2val:0xc0e73027;
op3val:0x7f1f9f7f; valaddr_reg:x13; val_offset:1599*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 1599*FLEN/8, x14, x11, x12)

inst_556:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x30c11b and fs2 == 1 and fe2 == 0x81 and fm2 == 0x673027 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x1f9f7f and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7db0c11b; op2val:0xc0e73027;
op3val:0x7f1f9f7f; valaddr_reg:x13; val_offset:1602*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:32 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 32, 0, x13, 1602*FLEN/8, x14, x11, x12)

inst_557:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x30c11b and fs2 == 1 and fe2 == 0x81 and fm2 == 0x673027 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x1f9f7f and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7db0c11b; op2val:0xc0e73027;
op3val:0x7f1f9f7f; valaddr_reg:x13; val_offset:1605*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:64 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 64, 0, x13, 1605*FLEN/8, x14, x11, x12)

inst_558:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x30c11b and fs2 == 1 and fe2 == 0x81 and fm2 == 0x673027 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x1f9f7f and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7db0c11b; op2val:0xc0e73027;
op3val:0x7f1f9f7f; valaddr_reg:x13; val_offset:1608*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:96 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 96, 0, x13, 1608*FLEN/8, x14, x11, x12)

inst_559:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x30c11b and fs2 == 1 and fe2 == 0x81 and fm2 == 0x673027 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x1f9f7f and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7db0c11b; op2val:0xc0e73027;
op3val:0x7f1f9f7f; valaddr_reg:x13; val_offset:1611*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:128 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 128, 0, x13, 1611*FLEN/8, x14, x11, x12)

inst_560:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0f91dd and fs2 == 1 and fe2 == 0x7b and fm2 == 0x458990 and fs3 == 0 and fe3 == 0xf9 and fm3 == 0x5d90cb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e8f91dd; op2val:0xbdc58990;
op3val:0x7cdd90cb; valaddr_reg:x13; val_offset:1614*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 1614*FLEN/8, x14, x11, x12)

inst_561:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0f91dd and fs2 == 1 and fe2 == 0x7b and fm2 == 0x458990 and fs3 == 0 and fe3 == 0xf9 and fm3 == 0x5d90cb and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e8f91dd; op2val:0xbdc58990;
op3val:0x7cdd90cb; valaddr_reg:x13; val_offset:1617*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:32 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 32, 0, x13, 1617*FLEN/8, x14, x11, x12)

inst_562:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0f91dd and fs2 == 1 and fe2 == 0x7b and fm2 == 0x458990 and fs3 == 0 and fe3 == 0xf9 and fm3 == 0x5d90cb and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e8f91dd; op2val:0xbdc58990;
op3val:0x7cdd90cb; valaddr_reg:x13; val_offset:1620*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:64 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 64, 0, x13, 1620*FLEN/8, x14, x11, x12)

inst_563:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0f91dd and fs2 == 1 and fe2 == 0x7b and fm2 == 0x458990 and fs3 == 0 and fe3 == 0xf9 and fm3 == 0x5d90cb and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e8f91dd; op2val:0xbdc58990;
op3val:0x7cdd90cb; valaddr_reg:x13; val_offset:1623*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:96 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 96, 0, x13, 1623*FLEN/8, x14, x11, x12)

inst_564:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0f91dd and fs2 == 1 and fe2 == 0x7b and fm2 == 0x458990 and fs3 == 0 and fe3 == 0xf9 and fm3 == 0x5d90cb and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e8f91dd; op2val:0xbdc58990;
op3val:0x7cdd90cb; valaddr_reg:x13; val_offset:1626*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:128 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 128, 0, x13, 1626*FLEN/8, x14, x11, x12)

inst_565:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6b9bcd and fs2 == 1 and fe2 == 0x7c and fm2 == 0x1e405c and fs3 == 0 and fe3 == 0xfb and fm3 == 0x11a564 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7eeb9bcd; op2val:0xbe1e405c;
op3val:0x7d91a564; valaddr_reg:x13; val_offset:1629*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 1629*FLEN/8, x14, x11, x12)

inst_566:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6b9bcd and fs2 == 1 and fe2 == 0x7c and fm2 == 0x1e405c and fs3 == 0 and fe3 == 0xfb and fm3 == 0x11a564 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7eeb9bcd; op2val:0xbe1e405c;
op3val:0x7d91a564; valaddr_reg:x13; val_offset:1632*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:32 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 32, 0, x13, 1632*FLEN/8, x14, x11, x12)

inst_567:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6b9bcd and fs2 == 1 and fe2 == 0x7c and fm2 == 0x1e405c and fs3 == 0 and fe3 == 0xfb and fm3 == 0x11a564 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7eeb9bcd; op2val:0xbe1e405c;
op3val:0x7d91a564; valaddr_reg:x13; val_offset:1635*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:64 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 64, 0, x13, 1635*FLEN/8, x14, x11, x12)

inst_568:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6b9bcd and fs2 == 1 and fe2 == 0x7c and fm2 == 0x1e405c and fs3 == 0 and fe3 == 0xfb and fm3 == 0x11a564 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7eeb9bcd; op2val:0xbe1e405c;
op3val:0x7d91a564; valaddr_reg:x13; val_offset:1638*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:96 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 96, 0, x13, 1638*FLEN/8, x14, x11, x12)

inst_569:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6b9bcd and fs2 == 1 and fe2 == 0x7c and fm2 == 0x1e405c and fs3 == 0 and fe3 == 0xfb and fm3 == 0x11a564 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7eeb9bcd; op2val:0xbe1e405c;
op3val:0x7d91a564; valaddr_reg:x13; val_offset:1641*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:128 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 128, 0, x13, 1641*FLEN/8, x14, x11, x12)

inst_570:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x515d63 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x1f58f4 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x0251c0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ed15d63; op2val:0xbf1f58f4;
op3val:0x7e8251c0; valaddr_reg:x13; val_offset:1644*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 1644*FLEN/8, x14, x11, x12)

inst_571:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x515d63 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x1f58f4 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x0251c0 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ed15d63; op2val:0xbf1f58f4;
op3val:0x7e8251c0; valaddr_reg:x13; val_offset:1647*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:32 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 32, 0, x13, 1647*FLEN/8, x14, x11, x12)

inst_572:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x515d63 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x1f58f4 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x0251c0 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ed15d63; op2val:0xbf1f58f4;
op3val:0x7e8251c0; valaddr_reg:x13; val_offset:1650*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:64 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 64, 0, x13, 1650*FLEN/8, x14, x11, x12)

inst_573:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x515d63 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x1f58f4 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x0251c0 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ed15d63; op2val:0xbf1f58f4;
op3val:0x7e8251c0; valaddr_reg:x13; val_offset:1653*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:96 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 96, 0, x13, 1653*FLEN/8, x14, x11, x12)

inst_574:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x515d63 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x1f58f4 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x0251c0 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ed15d63; op2val:0xbf1f58f4;
op3val:0x7e8251c0; valaddr_reg:x13; val_offset:1656*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:128 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 128, 0, x13, 1656*FLEN/8, x14, x11, x12)

inst_575:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5f106b and fs2 == 1 and fe2 == 0x7f and fm2 == 0x532924 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x37fe62 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7edf106b; op2val:0xbfd32924;
op3val:0x7f37fe62; valaddr_reg:x13; val_offset:1659*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 1659*FLEN/8, x14, x11, x12)

inst_576:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5f106b and fs2 == 1 and fe2 == 0x7f and fm2 == 0x532924 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x37fe62 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7edf106b; op2val:0xbfd32924;
op3val:0x7f37fe62; valaddr_reg:x13; val_offset:1662*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:32 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 32, 0, x13, 1662*FLEN/8, x14, x11, x12)

inst_577:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5f106b and fs2 == 1 and fe2 == 0x7f and fm2 == 0x532924 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x37fe62 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7edf106b; op2val:0xbfd32924;
op3val:0x7f37fe62; valaddr_reg:x13; val_offset:1665*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:64 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 64, 0, x13, 1665*FLEN/8, x14, x11, x12)

inst_578:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5f106b and fs2 == 1 and fe2 == 0x7f and fm2 == 0x532924 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x37fe62 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7edf106b; op2val:0xbfd32924;
op3val:0x7f37fe62; valaddr_reg:x13; val_offset:1668*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:96 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 96, 0, x13, 1668*FLEN/8, x14, x11, x12)

inst_579:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5f106b and fs2 == 1 and fe2 == 0x7f and fm2 == 0x532924 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x37fe62 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7edf106b; op2val:0xbfd32924;
op3val:0x7f37fe62; valaddr_reg:x13; val_offset:1671*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:128 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 128, 0, x13, 1671*FLEN/8, x14, x11, x12)

inst_580:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1d27fd and fs2 == 1 and fe2 == 0x7e and fm2 == 0x0313ed and fs3 == 0 and fe3 == 0xfd and fm3 == 0x20ef64 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f1d27fd; op2val:0xbf0313ed;
op3val:0x7ea0ef64; valaddr_reg:x13; val_offset:1674*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 1674*FLEN/8, x14, x11, x12)

inst_581:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1d27fd and fs2 == 1 and fe2 == 0x7e and fm2 == 0x0313ed and fs3 == 0 and fe3 == 0xfd and fm3 == 0x20ef64 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f1d27fd; op2val:0xbf0313ed;
op3val:0x7ea0ef64; valaddr_reg:x13; val_offset:1677*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:32 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 32, 0, x13, 1677*FLEN/8, x14, x11, x12)

inst_582:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1d27fd and fs2 == 1 and fe2 == 0x7e and fm2 == 0x0313ed and fs3 == 0 and fe3 == 0xfd and fm3 == 0x20ef64 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f1d27fd; op2val:0xbf0313ed;
op3val:0x7ea0ef64; valaddr_reg:x13; val_offset:1680*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:64 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 64, 0, x13, 1680*FLEN/8, x14, x11, x12)

inst_583:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1d27fd and fs2 == 1 and fe2 == 0x7e and fm2 == 0x0313ed and fs3 == 0 and fe3 == 0xfd and fm3 == 0x20ef64 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f1d27fd; op2val:0xbf0313ed;
op3val:0x7ea0ef64; valaddr_reg:x13; val_offset:1683*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:96 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 96, 0, x13, 1683*FLEN/8, x14, x11, x12)

inst_584:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1d27fd and fs2 == 1 and fe2 == 0x7e and fm2 == 0x0313ed and fs3 == 0 and fe3 == 0xfd and fm3 == 0x20ef64 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f1d27fd; op2val:0xbf0313ed;
op3val:0x7ea0ef64; valaddr_reg:x13; val_offset:1686*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:128 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 128, 0, x13, 1686*FLEN/8, x14, x11, x12)

inst_585:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c1813 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x4a4039 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x76a451 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f1c1813; op2val:0xbf4a4039;
op3val:0x7ef6a451; valaddr_reg:x13; val_offset:1689*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 1689*FLEN/8, x14, x11, x12)

inst_586:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c1813 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x4a4039 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x76a451 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f1c1813; op2val:0xbf4a4039;
op3val:0x7ef6a451; valaddr_reg:x13; val_offset:1692*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:32 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 32, 0, x13, 1692*FLEN/8, x14, x11, x12)

inst_587:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c1813 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x4a4039 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x76a451 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f1c1813; op2val:0xbf4a4039;
op3val:0x7ef6a451; valaddr_reg:x13; val_offset:1695*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:64 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 64, 0, x13, 1695*FLEN/8, x14, x11, x12)

inst_588:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c1813 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x4a4039 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x76a451 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f1c1813; op2val:0xbf4a4039;
op3val:0x7ef6a451; valaddr_reg:x13; val_offset:1698*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:96 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 96, 0, x13, 1698*FLEN/8, x14, x11, x12)

inst_589:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c1813 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x4a4039 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x76a451 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f1c1813; op2val:0xbf4a4039;
op3val:0x7ef6a451; valaddr_reg:x13; val_offset:1701*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:128 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 128, 0, x13, 1701*FLEN/8, x14, x11, x12)

inst_590:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0dddb2 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x44f318 and fs3 == 0 and fe3 == 0xfb and fm3 == 0x5a48e6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e8dddb2; op2val:0xbec4f318;
op3val:0x7dda48e6; valaddr_reg:x13; val_offset:1704*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 1704*FLEN/8, x14, x11, x12)

inst_591:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0dddb2 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x44f318 and fs3 == 0 and fe3 == 0xfb and fm3 == 0x5a48e6 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e8dddb2; op2val:0xbec4f318;
op3val:0x7dda48e6; valaddr_reg:x13; val_offset:1707*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:32 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 32, 0, x13, 1707*FLEN/8, x14, x11, x12)

inst_592:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0dddb2 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x44f318 and fs3 == 0 and fe3 == 0xfb and fm3 == 0x5a48e6 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e8dddb2; op2val:0xbec4f318;
op3val:0x7dda48e6; valaddr_reg:x13; val_offset:1710*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:64 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 64, 0, x13, 1710*FLEN/8, x14, x11, x12)

inst_593:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0dddb2 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x44f318 and fs3 == 0 and fe3 == 0xfb and fm3 == 0x5a48e6 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e8dddb2; op2val:0xbec4f318;
op3val:0x7dda48e6; valaddr_reg:x13; val_offset:1713*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:96 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 96, 0, x13, 1713*FLEN/8, x14, x11, x12)

inst_594:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0dddb2 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x44f318 and fs3 == 0 and fe3 == 0xfb and fm3 == 0x5a48e6 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e8dddb2; op2val:0xbec4f318;
op3val:0x7dda48e6; valaddr_reg:x13; val_offset:1716*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:128 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 128, 0, x13, 1716*FLEN/8, x14, x11, x12)

inst_595:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x64d70d and fs2 == 1 and fe2 == 0x7e and fm2 == 0x723849 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x58859b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ee4d70d; op2val:0xbf723849;
op3val:0x7ed8859b; valaddr_reg:x13; val_offset:1719*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 1719*FLEN/8, x14, x11, x12)

inst_596:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x64d70d and fs2 == 1 and fe2 == 0x7e and fm2 == 0x723849 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x58859b and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ee4d70d; op2val:0xbf723849;
op3val:0x7ed8859b; valaddr_reg:x13; val_offset:1722*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:32 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 32, 0, x13, 1722*FLEN/8, x14, x11, x12)

inst_597:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x64d70d and fs2 == 1 and fe2 == 0x7e and fm2 == 0x723849 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x58859b and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ee4d70d; op2val:0xbf723849;
op3val:0x7ed8859b; valaddr_reg:x13; val_offset:1725*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:64 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 64, 0, x13, 1725*FLEN/8, x14, x11, x12)

inst_598:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x64d70d and fs2 == 1 and fe2 == 0x7e and fm2 == 0x723849 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x58859b and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ee4d70d; op2val:0xbf723849;
op3val:0x7ed8859b; valaddr_reg:x13; val_offset:1728*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:96 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 96, 0, x13, 1728*FLEN/8, x14, x11, x12)

inst_599:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x64d70d and fs2 == 1 and fe2 == 0x7e and fm2 == 0x723849 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x58859b and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ee4d70d; op2val:0xbf723849;
op3val:0x7ed8859b; valaddr_reg:x13; val_offset:1731*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:128 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 128, 0, x13, 1731*FLEN/8, x14, x11, x12)

inst_600:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x37c8e9 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x01712d and fs3 == 0 and fe3 == 0xfe and fm3 == 0x39dafb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f37c8e9; op2val:0xbf81712d;
op3val:0x7f39dafb; valaddr_reg:x13; val_offset:1734*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 1734*FLEN/8, x14, x11, x12)

inst_601:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x37c8e9 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x01712d and fs3 == 0 and fe3 == 0xfe and fm3 == 0x39dafb and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f37c8e9; op2val:0xbf81712d;
op3val:0x7f39dafb; valaddr_reg:x13; val_offset:1737*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:32 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 32, 0, x13, 1737*FLEN/8, x14, x11, x12)

inst_602:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x37c8e9 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x01712d and fs3 == 0 and fe3 == 0xfe and fm3 == 0x39dafb and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f37c8e9; op2val:0xbf81712d;
op3val:0x7f39dafb; valaddr_reg:x13; val_offset:1740*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:64 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 64, 0, x13, 1740*FLEN/8, x14, x11, x12)

inst_603:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x37c8e9 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x01712d and fs3 == 0 and fe3 == 0xfe and fm3 == 0x39dafb and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f37c8e9; op2val:0xbf81712d;
op3val:0x7f39dafb; valaddr_reg:x13; val_offset:1743*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:96 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 96, 0, x13, 1743*FLEN/8, x14, x11, x12)

inst_604:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x37c8e9 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x01712d and fs3 == 0 and fe3 == 0xfe and fm3 == 0x39dafb and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f37c8e9; op2val:0xbf81712d;
op3val:0x7f39dafb; valaddr_reg:x13; val_offset:1746*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:128 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 128, 0, x13, 1746*FLEN/8, x14, x11, x12)

inst_605:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x69b4c8 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x13b0b0 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x06d41d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ee9b4c8; op2val:0xbf13b0b0;
op3val:0x7e86d41d; valaddr_reg:x13; val_offset:1749*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 1749*FLEN/8, x14, x11, x12)

inst_606:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x69b4c8 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x13b0b0 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x06d41d and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ee9b4c8; op2val:0xbf13b0b0;
op3val:0x7e86d41d; valaddr_reg:x13; val_offset:1752*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:32 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 32, 0, x13, 1752*FLEN/8, x14, x11, x12)

inst_607:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x69b4c8 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x13b0b0 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x06d41d and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ee9b4c8; op2val:0xbf13b0b0;
op3val:0x7e86d41d; valaddr_reg:x13; val_offset:1755*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:64 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 64, 0, x13, 1755*FLEN/8, x14, x11, x12)

inst_608:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x69b4c8 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x13b0b0 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x06d41d and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ee9b4c8; op2val:0xbf13b0b0;
op3val:0x7e86d41d; valaddr_reg:x13; val_offset:1758*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:96 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 96, 0, x13, 1758*FLEN/8, x14, x11, x12)

inst_609:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x69b4c8 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x13b0b0 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x06d41d and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ee9b4c8; op2val:0xbf13b0b0;
op3val:0x7e86d41d; valaddr_reg:x13; val_offset:1761*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:128 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 128, 0, x13, 1761*FLEN/8, x14, x11, x12)

inst_610:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2b8bb0 and fs2 == 1 and fe2 == 0x75 and fm2 == 0x0afed7 and fs3 == 0 and fe3 == 0xf4 and fm3 == 0x3a4824 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f2b8bb0; op2val:0xba8afed7;
op3val:0x7a3a4824; valaddr_reg:x13; val_offset:1764*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 1764*FLEN/8, x14, x11, x12)

inst_611:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2b8bb0 and fs2 == 1 and fe2 == 0x75 and fm2 == 0x0afed7 and fs3 == 0 and fe3 == 0xf4 and fm3 == 0x3a4824 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f2b8bb0; op2val:0xba8afed7;
op3val:0x7a3a4824; valaddr_reg:x13; val_offset:1767*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:32 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 32, 0, x13, 1767*FLEN/8, x14, x11, x12)

inst_612:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2b8bb0 and fs2 == 1 and fe2 == 0x75 and fm2 == 0x0afed7 and fs3 == 0 and fe3 == 0xf4 and fm3 == 0x3a4824 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f2b8bb0; op2val:0xba8afed7;
op3val:0x7a3a4824; valaddr_reg:x13; val_offset:1770*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:64 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 64, 0, x13, 1770*FLEN/8, x14, x11, x12)

inst_613:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2b8bb0 and fs2 == 1 and fe2 == 0x75 and fm2 == 0x0afed7 and fs3 == 0 and fe3 == 0xf4 and fm3 == 0x3a4824 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f2b8bb0; op2val:0xba8afed7;
op3val:0x7a3a4824; valaddr_reg:x13; val_offset:1773*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:96 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 96, 0, x13, 1773*FLEN/8, x14, x11, x12)

inst_614:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2b8bb0 and fs2 == 1 and fe2 == 0x75 and fm2 == 0x0afed7 and fs3 == 0 and fe3 == 0xf4 and fm3 == 0x3a4824 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f2b8bb0; op2val:0xba8afed7;
op3val:0x7a3a4824; valaddr_reg:x13; val_offset:1776*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:128 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 128, 0, x13, 1776*FLEN/8, x14, x11, x12)

inst_615:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x25c337 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x27c65d and fs3 == 0 and fe3 == 0xfd and fm3 == 0x594594 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7da5c337; op2val:0xc0a7c65d;
op3val:0x7ed94594; valaddr_reg:x13; val_offset:1779*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 1779*FLEN/8, x14, x11, x12)

inst_616:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x25c337 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x27c65d and fs3 == 0 and fe3 == 0xfd and fm3 == 0x594594 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7da5c337; op2val:0xc0a7c65d;
op3val:0x7ed94594; valaddr_reg:x13; val_offset:1782*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:32 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 32, 0, x13, 1782*FLEN/8, x14, x11, x12)

inst_617:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x25c337 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x27c65d and fs3 == 0 and fe3 == 0xfd and fm3 == 0x594594 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7da5c337; op2val:0xc0a7c65d;
op3val:0x7ed94594; valaddr_reg:x13; val_offset:1785*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:64 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 64, 0, x13, 1785*FLEN/8, x14, x11, x12)

inst_618:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x25c337 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x27c65d and fs3 == 0 and fe3 == 0xfd and fm3 == 0x594594 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7da5c337; op2val:0xc0a7c65d;
op3val:0x7ed94594; valaddr_reg:x13; val_offset:1788*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:96 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 96, 0, x13, 1788*FLEN/8, x14, x11, x12)

inst_619:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x25c337 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x27c65d and fs3 == 0 and fe3 == 0xfd and fm3 == 0x594594 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7da5c337; op2val:0xc0a7c65d;
op3val:0x7ed94594; valaddr_reg:x13; val_offset:1791*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:128 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 128, 0, x13, 1791*FLEN/8, x14, x11, x12)

inst_620:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6c3979 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x6a3541 and fs3 == 0 and fe3 == 0xfb and fm3 == 0x581dad and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7eec3979; op2val:0xbe6a3541;
op3val:0x7dd81dad; valaddr_reg:x13; val_offset:1794*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 1794*FLEN/8, x14, x11, x12)

inst_621:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6c3979 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x6a3541 and fs3 == 0 and fe3 == 0xfb and fm3 == 0x581dad and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7eec3979; op2val:0xbe6a3541;
op3val:0x7dd81dad; valaddr_reg:x13; val_offset:1797*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:32 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 32, 0, x13, 1797*FLEN/8, x14, x11, x12)

inst_622:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6c3979 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x6a3541 and fs3 == 0 and fe3 == 0xfb and fm3 == 0x581dad and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7eec3979; op2val:0xbe6a3541;
op3val:0x7dd81dad; valaddr_reg:x13; val_offset:1800*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:64 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 64, 0, x13, 1800*FLEN/8, x14, x11, x12)

inst_623:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6c3979 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x6a3541 and fs3 == 0 and fe3 == 0xfb and fm3 == 0x581dad and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7eec3979; op2val:0xbe6a3541;
op3val:0x7dd81dad; valaddr_reg:x13; val_offset:1803*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:96 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 96, 0, x13, 1803*FLEN/8, x14, x11, x12)

inst_624:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6c3979 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x6a3541 and fs3 == 0 and fe3 == 0xfb and fm3 == 0x581dad and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7eec3979; op2val:0xbe6a3541;
op3val:0x7dd81dad; valaddr_reg:x13; val_offset:1806*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:128 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 128, 0, x13, 1806*FLEN/8, x14, x11, x12)

inst_625:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x71b611 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x353e03 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x2b2047 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ef1b611; op2val:0xbfb53e03;
op3val:0x7f2b2047; valaddr_reg:x13; val_offset:1809*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 1809*FLEN/8, x14, x11, x12)

inst_626:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x71b611 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x353e03 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x2b2047 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ef1b611; op2val:0xbfb53e03;
op3val:0x7f2b2047; valaddr_reg:x13; val_offset:1812*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:32 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 32, 0, x13, 1812*FLEN/8, x14, x11, x12)

inst_627:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x71b611 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x353e03 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x2b2047 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ef1b611; op2val:0xbfb53e03;
op3val:0x7f2b2047; valaddr_reg:x13; val_offset:1815*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:64 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 64, 0, x13, 1815*FLEN/8, x14, x11, x12)

inst_628:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x71b611 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x353e03 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x2b2047 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ef1b611; op2val:0xbfb53e03;
op3val:0x7f2b2047; valaddr_reg:x13; val_offset:1818*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:96 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 96, 0, x13, 1818*FLEN/8, x14, x11, x12)

inst_629:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x71b611 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x353e03 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x2b2047 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ef1b611; op2val:0xbfb53e03;
op3val:0x7f2b2047; valaddr_reg:x13; val_offset:1821*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:128 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 128, 0, x13, 1821*FLEN/8, x14, x11, x12)

inst_630:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x105363 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x1303f7 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x25c43d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e905363; op2val:0xbf9303f7;
op3val:0x7ea5c43d; valaddr_reg:x13; val_offset:1824*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 1824*FLEN/8, x14, x11, x12)

inst_631:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x105363 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x1303f7 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x25c43d and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e905363; op2val:0xbf9303f7;
op3val:0x7ea5c43d; valaddr_reg:x13; val_offset:1827*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:32 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 32, 0, x13, 1827*FLEN/8, x14, x11, x12)

inst_632:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x105363 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x1303f7 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x25c43d and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e905363; op2val:0xbf9303f7;
op3val:0x7ea5c43d; valaddr_reg:x13; val_offset:1830*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:64 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 64, 0, x13, 1830*FLEN/8, x14, x11, x12)

inst_633:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x105363 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x1303f7 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x25c43d and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e905363; op2val:0xbf9303f7;
op3val:0x7ea5c43d; valaddr_reg:x13; val_offset:1833*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:96 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 96, 0, x13, 1833*FLEN/8, x14, x11, x12)

inst_634:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x105363 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x1303f7 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x25c43d and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e905363; op2val:0xbf9303f7;
op3val:0x7ea5c43d; valaddr_reg:x13; val_offset:1836*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:128 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 128, 0, x13, 1836*FLEN/8, x14, x11, x12)

inst_635:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2dd370 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x24d96b and fs3 == 0 and fe3 == 0xfc and fm3 == 0x5fde2a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e2dd370; op2val:0xbfa4d96b;
op3val:0x7e5fde2a; valaddr_reg:x13; val_offset:1839*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 1839*FLEN/8, x14, x11, x12)

inst_636:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2dd370 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x24d96b and fs3 == 0 and fe3 == 0xfc and fm3 == 0x5fde2a and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e2dd370; op2val:0xbfa4d96b;
op3val:0x7e5fde2a; valaddr_reg:x13; val_offset:1842*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:32 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 32, 0, x13, 1842*FLEN/8, x14, x11, x12)

inst_637:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2dd370 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x24d96b and fs3 == 0 and fe3 == 0xfc and fm3 == 0x5fde2a and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e2dd370; op2val:0xbfa4d96b;
op3val:0x7e5fde2a; valaddr_reg:x13; val_offset:1845*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:64 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 64, 0, x13, 1845*FLEN/8, x14, x11, x12)

inst_638:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2dd370 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x24d96b and fs3 == 0 and fe3 == 0xfc and fm3 == 0x5fde2a and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e2dd370; op2val:0xbfa4d96b;
op3val:0x7e5fde2a; valaddr_reg:x13; val_offset:1848*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:96 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 96, 0, x13, 1848*FLEN/8, x14, x11, x12)

inst_639:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2dd370 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x24d96b and fs3 == 0 and fe3 == 0xfc and fm3 == 0x5fde2a and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e2dd370; op2val:0xbfa4d96b;
op3val:0x7e5fde2a; valaddr_reg:x13; val_offset:1851*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:128 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 128, 0, x13, 1851*FLEN/8, x14, x11, x12)

inst_640:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3ab616 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x47f49a and fs3 == 0 and fe3 == 0xfd and fm3 == 0x11d5f1 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f3ab616; op2val:0xbec7f49a;
op3val:0x7e91d5f1; valaddr_reg:x13; val_offset:1854*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 1854*FLEN/8, x14, x11, x12)

inst_641:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3ab616 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x47f49a and fs3 == 0 and fe3 == 0xfd and fm3 == 0x11d5f1 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f3ab616; op2val:0xbec7f49a;
op3val:0x7e91d5f1; valaddr_reg:x13; val_offset:1857*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:32 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 32, 0, x13, 1857*FLEN/8, x14, x11, x12)

inst_642:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3ab616 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x47f49a and fs3 == 0 and fe3 == 0xfd and fm3 == 0x11d5f1 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f3ab616; op2val:0xbec7f49a;
op3val:0x7e91d5f1; valaddr_reg:x13; val_offset:1860*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:64 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 64, 0, x13, 1860*FLEN/8, x14, x11, x12)

inst_643:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3ab616 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x47f49a and fs3 == 0 and fe3 == 0xfd and fm3 == 0x11d5f1 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f3ab616; op2val:0xbec7f49a;
op3val:0x7e91d5f1; valaddr_reg:x13; val_offset:1863*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:96 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 96, 0, x13, 1863*FLEN/8, x14, x11, x12)

inst_644:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3ab616 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x47f49a and fs3 == 0 and fe3 == 0xfd and fm3 == 0x11d5f1 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f3ab616; op2val:0xbec7f49a;
op3val:0x7e91d5f1; valaddr_reg:x13; val_offset:1866*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:128 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 128, 0, x13, 1866*FLEN/8, x14, x11, x12)

inst_645:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3889e8 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x73608d and fs3 == 0 and fe3 == 0xfe and fm3 == 0x2f7080 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f3889e8; op2val:0xbf73608d;
op3val:0x7f2f7080; valaddr_reg:x13; val_offset:1869*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 1869*FLEN/8, x14, x11, x12)

inst_646:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3889e8 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x73608d and fs3 == 0 and fe3 == 0xfe and fm3 == 0x2f7080 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f3889e8; op2val:0xbf73608d;
op3val:0x7f2f7080; valaddr_reg:x13; val_offset:1872*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:32 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 32, 0, x13, 1872*FLEN/8, x14, x11, x12)

inst_647:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3889e8 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x73608d and fs3 == 0 and fe3 == 0xfe and fm3 == 0x2f7080 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f3889e8; op2val:0xbf73608d;
op3val:0x7f2f7080; valaddr_reg:x13; val_offset:1875*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:64 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 64, 0, x13, 1875*FLEN/8, x14, x11, x12)

inst_648:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3889e8 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x73608d and fs3 == 0 and fe3 == 0xfe and fm3 == 0x2f7080 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f3889e8; op2val:0xbf73608d;
op3val:0x7f2f7080; valaddr_reg:x13; val_offset:1878*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:96 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 96, 0, x13, 1878*FLEN/8, x14, x11, x12)

inst_649:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3889e8 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x73608d and fs3 == 0 and fe3 == 0xfe and fm3 == 0x2f7080 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f3889e8; op2val:0xbf73608d;
op3val:0x7f2f7080; valaddr_reg:x13; val_offset:1881*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:128 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 128, 0, x13, 1881*FLEN/8, x14, x11, x12)

inst_650:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x64ca80 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x5f46b8 and fs3 == 0 and fe3 == 0xfc and fm3 == 0x478b9a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ee4ca80; op2val:0xbedf46b8;
op3val:0x7e478b9a; valaddr_reg:x13; val_offset:1884*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 1884*FLEN/8, x14, x11, x12)

inst_651:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x64ca80 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x5f46b8 and fs3 == 0 and fe3 == 0xfc and fm3 == 0x478b9a and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ee4ca80; op2val:0xbedf46b8;
op3val:0x7e478b9a; valaddr_reg:x13; val_offset:1887*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:32 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 32, 0, x13, 1887*FLEN/8, x14, x11, x12)

inst_652:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x64ca80 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x5f46b8 and fs3 == 0 and fe3 == 0xfc and fm3 == 0x478b9a and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ee4ca80; op2val:0xbedf46b8;
op3val:0x7e478b9a; valaddr_reg:x13; val_offset:1890*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:64 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 64, 0, x13, 1890*FLEN/8, x14, x11, x12)

inst_653:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x64ca80 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x5f46b8 and fs3 == 0 and fe3 == 0xfc and fm3 == 0x478b9a and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ee4ca80; op2val:0xbedf46b8;
op3val:0x7e478b9a; valaddr_reg:x13; val_offset:1893*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:96 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 96, 0, x13, 1893*FLEN/8, x14, x11, x12)

inst_654:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x64ca80 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x5f46b8 and fs3 == 0 and fe3 == 0xfc and fm3 == 0x478b9a and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ee4ca80; op2val:0xbedf46b8;
op3val:0x7e478b9a; valaddr_reg:x13; val_offset:1896*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:128 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 128, 0, x13, 1896*FLEN/8, x14, x11, x12)

inst_655:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3c5927 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x01847e and fs3 == 0 and fe3 == 0xfd and fm3 == 0x3e94d0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f3c5927; op2val:0xbf01847e;
op3val:0x7ebe94d0; valaddr_reg:x13; val_offset:1899*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 1899*FLEN/8, x14, x11, x12)

inst_656:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3c5927 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x01847e and fs3 == 0 and fe3 == 0xfd and fm3 == 0x3e94d0 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f3c5927; op2val:0xbf01847e;
op3val:0x7ebe94d0; valaddr_reg:x13; val_offset:1902*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:32 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 32, 0, x13, 1902*FLEN/8, x14, x11, x12)

inst_657:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3c5927 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x01847e and fs3 == 0 and fe3 == 0xfd and fm3 == 0x3e94d0 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f3c5927; op2val:0xbf01847e;
op3val:0x7ebe94d0; valaddr_reg:x13; val_offset:1905*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:64 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 64, 0, x13, 1905*FLEN/8, x14, x11, x12)

inst_658:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3c5927 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x01847e and fs3 == 0 and fe3 == 0xfd and fm3 == 0x3e94d0 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f3c5927; op2val:0xbf01847e;
op3val:0x7ebe94d0; valaddr_reg:x13; val_offset:1908*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:96 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 96, 0, x13, 1908*FLEN/8, x14, x11, x12)

inst_659:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3c5927 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x01847e and fs3 == 0 and fe3 == 0xfd and fm3 == 0x3e94d0 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f3c5927; op2val:0xbf01847e;
op3val:0x7ebe94d0; valaddr_reg:x13; val_offset:1911*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:128 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 128, 0, x13, 1911*FLEN/8, x14, x11, x12)

inst_660:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1f8c7e and fs2 == 1 and fe2 == 0x7e and fm2 == 0x44a44f and fs3 == 0 and fe3 == 0xfc and fm3 == 0x751bf1 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e9f8c7e; op2val:0xbf44a44f;
op3val:0x7e751bf1; valaddr_reg:x13; val_offset:1914*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 1914*FLEN/8, x14, x11, x12)

inst_661:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1f8c7e and fs2 == 1 and fe2 == 0x7e and fm2 == 0x44a44f and fs3 == 0 and fe3 == 0xfc and fm3 == 0x751bf1 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e9f8c7e; op2val:0xbf44a44f;
op3val:0x7e751bf1; valaddr_reg:x13; val_offset:1917*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:32 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 32, 0, x13, 1917*FLEN/8, x14, x11, x12)
RVTEST_SIGBASE(x11,signature_x11_5)

inst_662:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1f8c7e and fs2 == 1 and fe2 == 0x7e and fm2 == 0x44a44f and fs3 == 0 and fe3 == 0xfc and fm3 == 0x751bf1 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e9f8c7e; op2val:0xbf44a44f;
op3val:0x7e751bf1; valaddr_reg:x13; val_offset:1920*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:64 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 64, 0, x13, 1920*FLEN/8, x14, x11, x12)

inst_663:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1f8c7e and fs2 == 1 and fe2 == 0x7e and fm2 == 0x44a44f and fs3 == 0 and fe3 == 0xfc and fm3 == 0x751bf1 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e9f8c7e; op2val:0xbf44a44f;
op3val:0x7e751bf1; valaddr_reg:x13; val_offset:1923*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:96 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 96, 0, x13, 1923*FLEN/8, x14, x11, x12)

inst_664:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1f8c7e and fs2 == 1 and fe2 == 0x7e and fm2 == 0x44a44f and fs3 == 0 and fe3 == 0xfc and fm3 == 0x751bf1 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e9f8c7e; op2val:0xbf44a44f;
op3val:0x7e751bf1; valaddr_reg:x13; val_offset:1926*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:128 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 128, 0, x13, 1926*FLEN/8, x14, x11, x12)

inst_665:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3cfb28 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x7fccec and fs3 == 0 and fe3 == 0xfd and fm3 == 0x3cd574 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f3cfb28; op2val:0xbeffccec;
op3val:0x7ebcd574; valaddr_reg:x13; val_offset:1929*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 1929*FLEN/8, x14, x11, x12)

inst_666:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3cfb28 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x7fccec and fs3 == 0 and fe3 == 0xfd and fm3 == 0x3cd574 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f3cfb28; op2val:0xbeffccec;
op3val:0x7ebcd574; valaddr_reg:x13; val_offset:1932*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:32 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 32, 0, x13, 1932*FLEN/8, x14, x11, x12)

inst_667:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3cfb28 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x7fccec and fs3 == 0 and fe3 == 0xfd and fm3 == 0x3cd574 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f3cfb28; op2val:0xbeffccec;
op3val:0x7ebcd574; valaddr_reg:x13; val_offset:1935*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:64 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 64, 0, x13, 1935*FLEN/8, x14, x11, x12)

inst_668:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3cfb28 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x7fccec and fs3 == 0 and fe3 == 0xfd and fm3 == 0x3cd574 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f3cfb28; op2val:0xbeffccec;
op3val:0x7ebcd574; valaddr_reg:x13; val_offset:1938*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:96 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 96, 0, x13, 1938*FLEN/8, x14, x11, x12)

inst_669:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3cfb28 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x7fccec and fs3 == 0 and fe3 == 0xfd and fm3 == 0x3cd574 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f3cfb28; op2val:0xbeffccec;
op3val:0x7ebcd574; valaddr_reg:x13; val_offset:1941*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:128 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 128, 0, x13, 1941*FLEN/8, x14, x11, x12)

inst_670:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x5bf434 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x552827 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x3724af and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e5bf434; op2val:0xbfd52827;
op3val:0x7eb724af; valaddr_reg:x13; val_offset:1944*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 1944*FLEN/8, x14, x11, x12)

inst_671:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x5bf434 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x552827 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x3724af and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e5bf434; op2val:0xbfd52827;
op3val:0x7eb724af; valaddr_reg:x13; val_offset:1947*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:32 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 32, 0, x13, 1947*FLEN/8, x14, x11, x12)

inst_672:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x5bf434 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x552827 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x3724af and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e5bf434; op2val:0xbfd52827;
op3val:0x7eb724af; valaddr_reg:x13; val_offset:1950*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:64 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 64, 0, x13, 1950*FLEN/8, x14, x11, x12)

inst_673:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x5bf434 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x552827 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x3724af and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e5bf434; op2val:0xbfd52827;
op3val:0x7eb724af; valaddr_reg:x13; val_offset:1953*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:96 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 96, 0, x13, 1953*FLEN/8, x14, x11, x12)

inst_674:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x5bf434 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x552827 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x3724af and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e5bf434; op2val:0xbfd52827;
op3val:0x7eb724af; valaddr_reg:x13; val_offset:1956*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:128 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 128, 0, x13, 1956*FLEN/8, x14, x11, x12)

inst_675:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3b3787 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2337c4 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x6eba47 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7dbb3787; op2val:0xc0a337c4;
op3val:0x7eeeba47; valaddr_reg:x13; val_offset:1959*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 1959*FLEN/8, x14, x11, x12)

inst_676:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3b3787 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2337c4 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x6eba47 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7dbb3787; op2val:0xc0a337c4;
op3val:0x7eeeba47; valaddr_reg:x13; val_offset:1962*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:32 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 32, 0, x13, 1962*FLEN/8, x14, x11, x12)

inst_677:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3b3787 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2337c4 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x6eba47 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7dbb3787; op2val:0xc0a337c4;
op3val:0x7eeeba47; valaddr_reg:x13; val_offset:1965*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:64 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 64, 0, x13, 1965*FLEN/8, x14, x11, x12)

inst_678:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3b3787 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2337c4 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x6eba47 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7dbb3787; op2val:0xc0a337c4;
op3val:0x7eeeba47; valaddr_reg:x13; val_offset:1968*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:96 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 96, 0, x13, 1968*FLEN/8, x14, x11, x12)

inst_679:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3b3787 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2337c4 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x6eba47 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7dbb3787; op2val:0xc0a337c4;
op3val:0x7eeeba47; valaddr_reg:x13; val_offset:1971*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:128 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 128, 0, x13, 1971*FLEN/8, x14, x11, x12)

inst_680:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2a4aa3 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x293302 and fs3 == 0 and fe3 == 0xfc and fm3 == 0x611a69 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7eaa4aa3; op2val:0xbf293302;
op3val:0x7e611a69; valaddr_reg:x13; val_offset:1974*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 1974*FLEN/8, x14, x11, x12)

inst_681:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2a4aa3 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x293302 and fs3 == 0 and fe3 == 0xfc and fm3 == 0x611a69 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7eaa4aa3; op2val:0xbf293302;
op3val:0x7e611a69; valaddr_reg:x13; val_offset:1977*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:32 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 32, 0, x13, 1977*FLEN/8, x14, x11, x12)

inst_682:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2a4aa3 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x293302 and fs3 == 0 and fe3 == 0xfc and fm3 == 0x611a69 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7eaa4aa3; op2val:0xbf293302;
op3val:0x7e611a69; valaddr_reg:x13; val_offset:1980*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:64 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 64, 0, x13, 1980*FLEN/8, x14, x11, x12)

inst_683:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2a4aa3 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x293302 and fs3 == 0 and fe3 == 0xfc and fm3 == 0x611a69 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7eaa4aa3; op2val:0xbf293302;
op3val:0x7e611a69; valaddr_reg:x13; val_offset:1983*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:96 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 96, 0, x13, 1983*FLEN/8, x14, x11, x12)

inst_684:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2a4aa3 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x293302 and fs3 == 0 and fe3 == 0xfc and fm3 == 0x611a69 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7eaa4aa3; op2val:0xbf293302;
op3val:0x7e611a69; valaddr_reg:x13; val_offset:1986*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:128 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 128, 0, x13, 1986*FLEN/8, x14, x11, x12)

inst_685:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x16166d and fs2 == 1 and fe2 == 0x7f and fm2 == 0x07627c and fs3 == 0 and fe3 == 0xfe and fm3 == 0x1ebf21 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f16166d; op2val:0xbf87627c;
op3val:0x7f1ebf21; valaddr_reg:x13; val_offset:1989*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 1989*FLEN/8, x14, x11, x12)

inst_686:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x16166d and fs2 == 1 and fe2 == 0x7f and fm2 == 0x07627c and fs3 == 0 and fe3 == 0xfe and fm3 == 0x1ebf21 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f16166d; op2val:0xbf87627c;
op3val:0x7f1ebf21; valaddr_reg:x13; val_offset:1992*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:32 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 32, 0, x13, 1992*FLEN/8, x14, x11, x12)

inst_687:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x16166d and fs2 == 1 and fe2 == 0x7f and fm2 == 0x07627c and fs3 == 0 and fe3 == 0xfe and fm3 == 0x1ebf21 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f16166d; op2val:0xbf87627c;
op3val:0x7f1ebf21; valaddr_reg:x13; val_offset:1995*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:64 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 64, 0, x13, 1995*FLEN/8, x14, x11, x12)

inst_688:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x16166d and fs2 == 1 and fe2 == 0x7f and fm2 == 0x07627c and fs3 == 0 and fe3 == 0xfe and fm3 == 0x1ebf21 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f16166d; op2val:0xbf87627c;
op3val:0x7f1ebf21; valaddr_reg:x13; val_offset:1998*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:96 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 96, 0, x13, 1998*FLEN/8, x14, x11, x12)

inst_689:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x16166d and fs2 == 1 and fe2 == 0x7f and fm2 == 0x07627c and fs3 == 0 and fe3 == 0xfe and fm3 == 0x1ebf21 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f16166d; op2val:0xbf87627c;
op3val:0x7f1ebf21; valaddr_reg:x13; val_offset:2001*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:128 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 128, 0, x13, 2001*FLEN/8, x14, x11, x12)

inst_690:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x223dfa and fs2 == 1 and fe2 == 0x84 and fm2 == 0x2157ca and fs3 == 0 and fe3 == 0xfd and fm3 == 0x4c813b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7c223dfa; op2val:0xc22157ca;
op3val:0x7ecc813b; valaddr_reg:x13; val_offset:2004*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 2004*FLEN/8, x14, x11, x12)

inst_691:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x223dfa and fs2 == 1 and fe2 == 0x84 and fm2 == 0x2157ca and fs3 == 0 and fe3 == 0xfd and fm3 == 0x4c813b and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7c223dfa; op2val:0xc22157ca;
op3val:0x7ecc813b; valaddr_reg:x13; val_offset:2007*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:32 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 32, 0, x13, 2007*FLEN/8, x14, x11, x12)

inst_692:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x223dfa and fs2 == 1 and fe2 == 0x84 and fm2 == 0x2157ca and fs3 == 0 and fe3 == 0xfd and fm3 == 0x4c813b and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7c223dfa; op2val:0xc22157ca;
op3val:0x7ecc813b; valaddr_reg:x13; val_offset:2010*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:64 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 64, 0, x13, 2010*FLEN/8, x14, x11, x12)

inst_693:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x223dfa and fs2 == 1 and fe2 == 0x84 and fm2 == 0x2157ca and fs3 == 0 and fe3 == 0xfd and fm3 == 0x4c813b and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7c223dfa; op2val:0xc22157ca;
op3val:0x7ecc813b; valaddr_reg:x13; val_offset:2013*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:96 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 96, 0, x13, 2013*FLEN/8, x14, x11, x12)

inst_694:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x223dfa and fs2 == 1 and fe2 == 0x84 and fm2 == 0x2157ca and fs3 == 0 and fe3 == 0xfd and fm3 == 0x4c813b and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7c223dfa; op2val:0xc22157ca;
op3val:0x7ecc813b; valaddr_reg:x13; val_offset:2016*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:128 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 128, 0, x13, 2016*FLEN/8, x14, x11, x12)

inst_695:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x5244d5 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x5a9f6c and fs3 == 0 and fe3 == 0xfe and fm3 == 0x33918f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e5244d5; op2val:0xc05a9f6c;
op3val:0x7f33918f; valaddr_reg:x13; val_offset:2019*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 2019*FLEN/8, x14, x11, x12)

inst_696:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x5244d5 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x5a9f6c and fs3 == 0 and fe3 == 0xfe and fm3 == 0x33918f and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e5244d5; op2val:0xc05a9f6c;
op3val:0x7f33918f; valaddr_reg:x13; val_offset:2022*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:32 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 32, 0, x13, 2022*FLEN/8, x14, x11, x12)

inst_697:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x5244d5 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x5a9f6c and fs3 == 0 and fe3 == 0xfe and fm3 == 0x33918f and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e5244d5; op2val:0xc05a9f6c;
op3val:0x7f33918f; valaddr_reg:x13; val_offset:2025*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:64 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 64, 0, x13, 2025*FLEN/8, x14, x11, x12)

inst_698:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x5244d5 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x5a9f6c and fs3 == 0 and fe3 == 0xfe and fm3 == 0x33918f and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e5244d5; op2val:0xc05a9f6c;
op3val:0x7f33918f; valaddr_reg:x13; val_offset:2028*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:96 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 96, 0, x13, 2028*FLEN/8, x14, x11, x12)

inst_699:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x5244d5 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x5a9f6c and fs3 == 0 and fe3 == 0xfe and fm3 == 0x33918f and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e5244d5; op2val:0xc05a9f6c;
op3val:0x7f33918f; valaddr_reg:x13; val_offset:2031*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:128 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 128, 0, x13, 2031*FLEN/8, x14, x11, x12)

inst_700:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x16204d and fs2 == 1 and fe2 == 0x7d and fm2 == 0x20dc4b and fs3 == 0 and fe3 == 0xfc and fm3 == 0x3caac1 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f16204d; op2val:0xbea0dc4b;
op3val:0x7e3caac1; valaddr_reg:x13; val_offset:2034*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 2034*FLEN/8, x14, x11, x12)

inst_701:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x16204d and fs2 == 1 and fe2 == 0x7d and fm2 == 0x20dc4b and fs3 == 0 and fe3 == 0xfc and fm3 == 0x3caac1 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f16204d; op2val:0xbea0dc4b;
op3val:0x7e3caac1; valaddr_reg:x13; val_offset:2037*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:32 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 32, 0, x13, 2037*FLEN/8, x14, x11, x12)

inst_702:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x16204d and fs2 == 1 and fe2 == 0x7d and fm2 == 0x20dc4b and fs3 == 0 and fe3 == 0xfc and fm3 == 0x3caac1 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f16204d; op2val:0xbea0dc4b;
op3val:0x7e3caac1; valaddr_reg:x13; val_offset:2040*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:64 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 64, 0, x13, 2040*FLEN/8, x14, x11, x12)

inst_703:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x16204d and fs2 == 1 and fe2 == 0x7d and fm2 == 0x20dc4b and fs3 == 0 and fe3 == 0xfc and fm3 == 0x3caac1 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f16204d; op2val:0xbea0dc4b;
op3val:0x7e3caac1; valaddr_reg:x13; val_offset:2043*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:96 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 96, 0, x13, 2043*FLEN/8, x14, x11, x12)

inst_704:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x16204d and fs2 == 1 and fe2 == 0x7d and fm2 == 0x20dc4b and fs3 == 0 and fe3 == 0xfc and fm3 == 0x3caac1 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f16204d; op2val:0xbea0dc4b;
op3val:0x7e3caac1; valaddr_reg:x13; val_offset:2046*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:128 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 128, 0, x13, 2046*FLEN/8, x14, x11, x12)

inst_705:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4d95b3 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x140204 and fs3 == 0 and fe3 == 0xfb and fm3 == 0x6db854 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e4d95b3; op2val:0xbf140204;
op3val:0x7dedb854; valaddr_reg:x13; val_offset:2049*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 2049*FLEN/8, x14, x11, x12)

inst_706:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4d95b3 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x140204 and fs3 == 0 and fe3 == 0xfb and fm3 == 0x6db854 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e4d95b3; op2val:0xbf140204;
op3val:0x7dedb854; valaddr_reg:x13; val_offset:2052*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:32 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 32, 0, x13, 2052*FLEN/8, x14, x11, x12)

inst_707:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4d95b3 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x140204 and fs3 == 0 and fe3 == 0xfb and fm3 == 0x6db854 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e4d95b3; op2val:0xbf140204;
op3val:0x7dedb854; valaddr_reg:x13; val_offset:2055*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:64 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 64, 0, x13, 2055*FLEN/8, x14, x11, x12)

inst_708:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4d95b3 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x140204 and fs3 == 0 and fe3 == 0xfb and fm3 == 0x6db854 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e4d95b3; op2val:0xbf140204;
op3val:0x7dedb854; valaddr_reg:x13; val_offset:2058*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:96 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 96, 0, x13, 2058*FLEN/8, x14, x11, x12)

inst_709:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4d95b3 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x140204 and fs3 == 0 and fe3 == 0xfb and fm3 == 0x6db854 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e4d95b3; op2val:0xbf140204;
op3val:0x7dedb854; valaddr_reg:x13; val_offset:2061*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:128 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 128, 0, x13, 2061*FLEN/8, x14, x11, x12)

inst_710:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3ddabc and fs2 == 1 and fe2 == 0x7d and fm2 == 0x17cf0e and fs3 == 0 and fe3 == 0xfc and fm3 == 0x612b27 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f3ddabc; op2val:0xbe97cf0e;
op3val:0x7e612b27; valaddr_reg:x13; val_offset:2064*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 2064*FLEN/8, x14, x11, x12)

inst_711:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3ddabc and fs2 == 1 and fe2 == 0x7d and fm2 == 0x17cf0e and fs3 == 0 and fe3 == 0xfc and fm3 == 0x612b27 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f3ddabc; op2val:0xbe97cf0e;
op3val:0x7e612b27; valaddr_reg:x13; val_offset:2067*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:32 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 32, 0, x13, 2067*FLEN/8, x14, x11, x12)

inst_712:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3ddabc and fs2 == 1 and fe2 == 0x7d and fm2 == 0x17cf0e and fs3 == 0 and fe3 == 0xfc and fm3 == 0x612b27 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f3ddabc; op2val:0xbe97cf0e;
op3val:0x7e612b27; valaddr_reg:x13; val_offset:2070*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:64 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 64, 0, x13, 2070*FLEN/8, x14, x11, x12)

inst_713:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3ddabc and fs2 == 1 and fe2 == 0x7d and fm2 == 0x17cf0e and fs3 == 0 and fe3 == 0xfc and fm3 == 0x612b27 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f3ddabc; op2val:0xbe97cf0e;
op3val:0x7e612b27; valaddr_reg:x13; val_offset:2073*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:96 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 96, 0, x13, 2073*FLEN/8, x14, x11, x12)

inst_714:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3ddabc and fs2 == 1 and fe2 == 0x7d and fm2 == 0x17cf0e and fs3 == 0 and fe3 == 0xfc and fm3 == 0x612b27 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f3ddabc; op2val:0xbe97cf0e;
op3val:0x7e612b27; valaddr_reg:x13; val_offset:2076*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:128 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 128, 0, x13, 2076*FLEN/8, x14, x11, x12)

inst_715:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x697c86 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x47d51b and fs3 == 0 and fe3 == 0xfd and fm3 == 0x36422a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ee97c86; op2val:0xbf47d51b;
op3val:0x7eb6422a; valaddr_reg:x13; val_offset:2079*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 2079*FLEN/8, x14, x11, x12)

inst_716:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x697c86 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x47d51b and fs3 == 0 and fe3 == 0xfd and fm3 == 0x36422a and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ee97c86; op2val:0xbf47d51b;
op3val:0x7eb6422a; valaddr_reg:x13; val_offset:2082*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:32 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 32, 0, x13, 2082*FLEN/8, x14, x11, x12)

inst_717:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x697c86 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x47d51b and fs3 == 0 and fe3 == 0xfd and fm3 == 0x36422a and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ee97c86; op2val:0xbf47d51b;
op3val:0x7eb6422a; valaddr_reg:x13; val_offset:2085*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:64 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 64, 0, x13, 2085*FLEN/8, x14, x11, x12)

inst_718:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x697c86 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x47d51b and fs3 == 0 and fe3 == 0xfd and fm3 == 0x36422a and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ee97c86; op2val:0xbf47d51b;
op3val:0x7eb6422a; valaddr_reg:x13; val_offset:2088*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:96 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 96, 0, x13, 2088*FLEN/8, x14, x11, x12)

inst_719:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x697c86 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x47d51b and fs3 == 0 and fe3 == 0xfd and fm3 == 0x36422a and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ee97c86; op2val:0xbf47d51b;
op3val:0x7eb6422a; valaddr_reg:x13; val_offset:2091*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:128 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 128, 0, x13, 2091*FLEN/8, x14, x11, x12)

inst_720:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x77a1f3 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x6fb705 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x67e13b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ef7a1f3; op2val:0xbf6fb705;
op3val:0x7ee7e13b; valaddr_reg:x13; val_offset:2094*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 2094*FLEN/8, x14, x11, x12)

inst_721:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x77a1f3 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x6fb705 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x67e13b and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ef7a1f3; op2val:0xbf6fb705;
op3val:0x7ee7e13b; valaddr_reg:x13; val_offset:2097*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:32 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 32, 0, x13, 2097*FLEN/8, x14, x11, x12)

inst_722:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x77a1f3 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x6fb705 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x67e13b and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ef7a1f3; op2val:0xbf6fb705;
op3val:0x7ee7e13b; valaddr_reg:x13; val_offset:2100*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:64 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 64, 0, x13, 2100*FLEN/8, x14, x11, x12)

inst_723:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x77a1f3 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x6fb705 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x67e13b and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ef7a1f3; op2val:0xbf6fb705;
op3val:0x7ee7e13b; valaddr_reg:x13; val_offset:2103*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:96 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 96, 0, x13, 2103*FLEN/8, x14, x11, x12)

inst_724:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x77a1f3 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x6fb705 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x67e13b and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ef7a1f3; op2val:0xbf6fb705;
op3val:0x7ee7e13b; valaddr_reg:x13; val_offset:2106*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:128 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 128, 0, x13, 2106*FLEN/8, x14, x11, x12)

inst_725:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0ebf31 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x22c52b and fs3 == 0 and fe3 == 0xfb and fm3 == 0x3585de and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f0ebf31; op2val:0xbe22c52b;
op3val:0x7db585de; valaddr_reg:x13; val_offset:2109*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 2109*FLEN/8, x14, x11, x12)

inst_726:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0ebf31 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x22c52b and fs3 == 0 and fe3 == 0xfb and fm3 == 0x3585de and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f0ebf31; op2val:0xbe22c52b;
op3val:0x7db585de; valaddr_reg:x13; val_offset:2112*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:32 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 32, 0, x13, 2112*FLEN/8, x14, x11, x12)

inst_727:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0ebf31 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x22c52b and fs3 == 0 and fe3 == 0xfb and fm3 == 0x3585de and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f0ebf31; op2val:0xbe22c52b;
op3val:0x7db585de; valaddr_reg:x13; val_offset:2115*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:64 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 64, 0, x13, 2115*FLEN/8, x14, x11, x12)

inst_728:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0ebf31 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x22c52b and fs3 == 0 and fe3 == 0xfb and fm3 == 0x3585de and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f0ebf31; op2val:0xbe22c52b;
op3val:0x7db585de; valaddr_reg:x13; val_offset:2118*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:96 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 96, 0, x13, 2118*FLEN/8, x14, x11, x12)

inst_729:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0ebf31 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x22c52b and fs3 == 0 and fe3 == 0xfb and fm3 == 0x3585de and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f0ebf31; op2val:0xbe22c52b;
op3val:0x7db585de; valaddr_reg:x13; val_offset:2121*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:128 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 128, 0, x13, 2121*FLEN/8, x14, x11, x12)

inst_730:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x11ff1d and fs2 == 1 and fe2 == 0x7d and fm2 == 0x4a76b7 and fs3 == 0 and fe3 == 0xfc and fm3 == 0x66ee02 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f11ff1d; op2val:0xbeca76b7;
op3val:0x7e66ee02; valaddr_reg:x13; val_offset:2124*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 2124*FLEN/8, x14, x11, x12)

inst_731:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x11ff1d and fs2 == 1 and fe2 == 0x7d and fm2 == 0x4a76b7 and fs3 == 0 and fe3 == 0xfc and fm3 == 0x66ee02 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f11ff1d; op2val:0xbeca76b7;
op3val:0x7e66ee02; valaddr_reg:x13; val_offset:2127*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:32 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 32, 0, x13, 2127*FLEN/8, x14, x11, x12)

inst_732:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x11ff1d and fs2 == 1 and fe2 == 0x7d and fm2 == 0x4a76b7 and fs3 == 0 and fe3 == 0xfc and fm3 == 0x66ee02 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f11ff1d; op2val:0xbeca76b7;
op3val:0x7e66ee02; valaddr_reg:x13; val_offset:2130*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:64 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 64, 0, x13, 2130*FLEN/8, x14, x11, x12)

inst_733:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x11ff1d and fs2 == 1 and fe2 == 0x7d and fm2 == 0x4a76b7 and fs3 == 0 and fe3 == 0xfc and fm3 == 0x66ee02 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f11ff1d; op2val:0xbeca76b7;
op3val:0x7e66ee02; valaddr_reg:x13; val_offset:2133*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:96 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 96, 0, x13, 2133*FLEN/8, x14, x11, x12)

inst_734:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x11ff1d and fs2 == 1 and fe2 == 0x7d and fm2 == 0x4a76b7 and fs3 == 0 and fe3 == 0xfc and fm3 == 0x66ee02 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f11ff1d; op2val:0xbeca76b7;
op3val:0x7e66ee02; valaddr_reg:x13; val_offset:2136*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:128 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 128, 0, x13, 2136*FLEN/8, x14, x11, x12)

inst_735:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4cdcfa and fs2 == 1 and fe2 == 0x7e and fm2 == 0x2149e2 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x011219 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7eccdcfa; op2val:0xbf2149e2;
op3val:0x7e811219; valaddr_reg:x13; val_offset:2139*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 2139*FLEN/8, x14, x11, x12)

inst_736:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4cdcfa and fs2 == 1 and fe2 == 0x7e and fm2 == 0x2149e2 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x011219 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7eccdcfa; op2val:0xbf2149e2;
op3val:0x7e811219; valaddr_reg:x13; val_offset:2142*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:32 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 32, 0, x13, 2142*FLEN/8, x14, x11, x12)

inst_737:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4cdcfa and fs2 == 1 and fe2 == 0x7e and fm2 == 0x2149e2 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x011219 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7eccdcfa; op2val:0xbf2149e2;
op3val:0x7e811219; valaddr_reg:x13; val_offset:2145*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:64 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 64, 0, x13, 2145*FLEN/8, x14, x11, x12)

inst_738:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4cdcfa and fs2 == 1 and fe2 == 0x7e and fm2 == 0x2149e2 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x011219 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7eccdcfa; op2val:0xbf2149e2;
op3val:0x7e811219; valaddr_reg:x13; val_offset:2148*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:96 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 96, 0, x13, 2148*FLEN/8, x14, x11, x12)

inst_739:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4cdcfa and fs2 == 1 and fe2 == 0x7e and fm2 == 0x2149e2 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x011219 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7eccdcfa; op2val:0xbf2149e2;
op3val:0x7e811219; valaddr_reg:x13; val_offset:2151*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:128 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 128, 0, x13, 2151*FLEN/8, x14, x11, x12)

inst_740:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x63f59c and fs2 == 1 and fe2 == 0x7f and fm2 == 0x647f4a and fs3 == 0 and fe3 == 0xfd and fm3 == 0x4b7817 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e63f59c; op2val:0xbfe47f4a;
op3val:0x7ecb7817; valaddr_reg:x13; val_offset:2154*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 2154*FLEN/8, x14, x11, x12)

inst_741:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x63f59c and fs2 == 1 and fe2 == 0x7f and fm2 == 0x647f4a and fs3 == 0 and fe3 == 0xfd and fm3 == 0x4b7817 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e63f59c; op2val:0xbfe47f4a;
op3val:0x7ecb7817; valaddr_reg:x13; val_offset:2157*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:32 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 32, 0, x13, 2157*FLEN/8, x14, x11, x12)

inst_742:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x63f59c and fs2 == 1 and fe2 == 0x7f and fm2 == 0x647f4a and fs3 == 0 and fe3 == 0xfd and fm3 == 0x4b7817 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e63f59c; op2val:0xbfe47f4a;
op3val:0x7ecb7817; valaddr_reg:x13; val_offset:2160*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:64 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 64, 0, x13, 2160*FLEN/8, x14, x11, x12)

inst_743:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x63f59c and fs2 == 1 and fe2 == 0x7f and fm2 == 0x647f4a and fs3 == 0 and fe3 == 0xfd and fm3 == 0x4b7817 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e63f59c; op2val:0xbfe47f4a;
op3val:0x7ecb7817; valaddr_reg:x13; val_offset:2163*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:96 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 96, 0, x13, 2163*FLEN/8, x14, x11, x12)

inst_744:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x63f59c and fs2 == 1 and fe2 == 0x7f and fm2 == 0x647f4a and fs3 == 0 and fe3 == 0xfd and fm3 == 0x4b7817 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e63f59c; op2val:0xbfe47f4a;
op3val:0x7ecb7817; valaddr_reg:x13; val_offset:2166*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:128 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 128, 0, x13, 2166*FLEN/8, x14, x11, x12)

inst_745:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x324e28 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x470cb8 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x0aa39d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7eb24e28; op2val:0xbf470cb8;
op3val:0x7e8aa39d; valaddr_reg:x13; val_offset:2169*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 2169*FLEN/8, x14, x11, x12)

inst_746:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x324e28 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x470cb8 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x0aa39d and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7eb24e28; op2val:0xbf470cb8;
op3val:0x7e8aa39d; valaddr_reg:x13; val_offset:2172*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:32 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 32, 0, x13, 2172*FLEN/8, x14, x11, x12)

inst_747:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x324e28 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x470cb8 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x0aa39d and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7eb24e28; op2val:0xbf470cb8;
op3val:0x7e8aa39d; valaddr_reg:x13; val_offset:2175*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:64 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 64, 0, x13, 2175*FLEN/8, x14, x11, x12)

inst_748:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x324e28 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x470cb8 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x0aa39d and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7eb24e28; op2val:0xbf470cb8;
op3val:0x7e8aa39d; valaddr_reg:x13; val_offset:2178*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:96 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 96, 0, x13, 2178*FLEN/8, x14, x11, x12)

inst_749:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x324e28 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x470cb8 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x0aa39d and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7eb24e28; op2val:0xbf470cb8;
op3val:0x7e8aa39d; valaddr_reg:x13; val_offset:2181*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:128 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 128, 0, x13, 2181*FLEN/8, x14, x11, x12)

inst_750:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0f0b15 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x4b0294 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x62de76 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f0f0b15; op2val:0xbf4b0294;
op3val:0x7ee2de76; valaddr_reg:x13; val_offset:2184*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 2184*FLEN/8, x14, x11, x12)

inst_751:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0f0b15 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x4b0294 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x62de76 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f0f0b15; op2val:0xbf4b0294;
op3val:0x7ee2de76; valaddr_reg:x13; val_offset:2187*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:32 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 32, 0, x13, 2187*FLEN/8, x14, x11, x12)

inst_752:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0f0b15 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x4b0294 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x62de76 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f0f0b15; op2val:0xbf4b0294;
op3val:0x7ee2de76; valaddr_reg:x13; val_offset:2190*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:64 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 64, 0, x13, 2190*FLEN/8, x14, x11, x12)

inst_753:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0f0b15 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x4b0294 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x62de76 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f0f0b15; op2val:0xbf4b0294;
op3val:0x7ee2de76; valaddr_reg:x13; val_offset:2193*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:96 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 96, 0, x13, 2193*FLEN/8, x14, x11, x12)

inst_754:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0f0b15 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x4b0294 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x62de76 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f0f0b15; op2val:0xbf4b0294;
op3val:0x7ee2de76; valaddr_reg:x13; val_offset:2196*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:128 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 128, 0, x13, 2196*FLEN/8, x14, x11, x12)

inst_755:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x5fd1b9 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x5dbbf1 and fs3 == 0 and fe3 == 0xfc and fm3 == 0x41dc5e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7cdfd1b9; op2val:0xc0ddbbf1;
op3val:0x7e41dc5e; valaddr_reg:x13; val_offset:2199*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 2199*FLEN/8, x14, x11, x12)

inst_756:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x5fd1b9 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x5dbbf1 and fs3 == 0 and fe3 == 0xfc and fm3 == 0x41dc5e and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7cdfd1b9; op2val:0xc0ddbbf1;
op3val:0x7e41dc5e; valaddr_reg:x13; val_offset:2202*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:32 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 32, 0, x13, 2202*FLEN/8, x14, x11, x12)

inst_757:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x5fd1b9 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x5dbbf1 and fs3 == 0 and fe3 == 0xfc and fm3 == 0x41dc5e and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7cdfd1b9; op2val:0xc0ddbbf1;
op3val:0x7e41dc5e; valaddr_reg:x13; val_offset:2205*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:64 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 64, 0, x13, 2205*FLEN/8, x14, x11, x12)

inst_758:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x5fd1b9 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x5dbbf1 and fs3 == 0 and fe3 == 0xfc and fm3 == 0x41dc5e and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7cdfd1b9; op2val:0xc0ddbbf1;
op3val:0x7e41dc5e; valaddr_reg:x13; val_offset:2208*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:96 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 96, 0, x13, 2208*FLEN/8, x14, x11, x12)

inst_759:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x5fd1b9 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x5dbbf1 and fs3 == 0 and fe3 == 0xfc and fm3 == 0x41dc5e and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7cdfd1b9; op2val:0xc0ddbbf1;
op3val:0x7e41dc5e; valaddr_reg:x13; val_offset:2211*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:128 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 128, 0, x13, 2211*FLEN/8, x14, x11, x12)

inst_760:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2ef4a6 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x00c03c and fs3 == 0 and fe3 == 0xfe and fm3 == 0x2ffb67 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7eaef4a6; op2val:0xc000c03c;
op3val:0x7f2ffb67; valaddr_reg:x13; val_offset:2214*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 2214*FLEN/8, x14, x11, x12)

inst_761:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2ef4a6 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x00c03c and fs3 == 0 and fe3 == 0xfe and fm3 == 0x2ffb67 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7eaef4a6; op2val:0xc000c03c;
op3val:0x7f2ffb67; valaddr_reg:x13; val_offset:2217*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:32 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 32, 0, x13, 2217*FLEN/8, x14, x11, x12)

inst_762:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2ef4a6 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x00c03c and fs3 == 0 and fe3 == 0xfe and fm3 == 0x2ffb67 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7eaef4a6; op2val:0xc000c03c;
op3val:0x7f2ffb67; valaddr_reg:x13; val_offset:2220*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:64 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 64, 0, x13, 2220*FLEN/8, x14, x11, x12)

inst_763:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2ef4a6 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x00c03c and fs3 == 0 and fe3 == 0xfe and fm3 == 0x2ffb67 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7eaef4a6; op2val:0xc000c03c;
op3val:0x7f2ffb67; valaddr_reg:x13; val_offset:2223*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:96 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 96, 0, x13, 2223*FLEN/8, x14, x11, x12)

inst_764:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2ef4a6 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x00c03c and fs3 == 0 and fe3 == 0xfe and fm3 == 0x2ffb67 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7eaef4a6; op2val:0xc000c03c;
op3val:0x7f2ffb67; valaddr_reg:x13; val_offset:2226*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:128 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 128, 0, x13, 2226*FLEN/8, x14, x11, x12)

inst_765:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2a7c0d and fs2 == 1 and fe2 == 0x7e and fm2 == 0x1d4c63 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x5181e6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f2a7c0d; op2val:0xbf1d4c63;
op3val:0x7ed181e6; valaddr_reg:x13; val_offset:2229*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 2229*FLEN/8, x14, x11, x12)

inst_766:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2a7c0d and fs2 == 1 and fe2 == 0x7e and fm2 == 0x1d4c63 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x5181e6 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f2a7c0d; op2val:0xbf1d4c63;
op3val:0x7ed181e6; valaddr_reg:x13; val_offset:2232*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:32 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 32, 0, x13, 2232*FLEN/8, x14, x11, x12)

inst_767:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2a7c0d and fs2 == 1 and fe2 == 0x7e and fm2 == 0x1d4c63 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x5181e6 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f2a7c0d; op2val:0xbf1d4c63;
op3val:0x7ed181e6; valaddr_reg:x13; val_offset:2235*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:64 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 64, 0, x13, 2235*FLEN/8, x14, x11, x12)

inst_768:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2a7c0d and fs2 == 1 and fe2 == 0x7e and fm2 == 0x1d4c63 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x5181e6 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f2a7c0d; op2val:0xbf1d4c63;
op3val:0x7ed181e6; valaddr_reg:x13; val_offset:2238*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:96 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 96, 0, x13, 2238*FLEN/8, x14, x11, x12)

inst_769:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2a7c0d and fs2 == 1 and fe2 == 0x7e and fm2 == 0x1d4c63 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x5181e6 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f2a7c0d; op2val:0xbf1d4c63;
op3val:0x7ed181e6; valaddr_reg:x13; val_offset:2241*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:128 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 128, 0, x13, 2241*FLEN/8, x14, x11, x12)

inst_770:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x32eb6c and fs2 == 1 and fe2 == 0x84 and fm2 == 0x55d574 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x157310 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7c32eb6c; op2val:0xc255d574;
op3val:0x7f157310; valaddr_reg:x13; val_offset:2244*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 2244*FLEN/8, x14, x11, x12)

inst_771:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x32eb6c and fs2 == 1 and fe2 == 0x84 and fm2 == 0x55d574 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x157310 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7c32eb6c; op2val:0xc255d574;
op3val:0x7f157310; valaddr_reg:x13; val_offset:2247*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:32 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 32, 0, x13, 2247*FLEN/8, x14, x11, x12)

inst_772:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x32eb6c and fs2 == 1 and fe2 == 0x84 and fm2 == 0x55d574 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x157310 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7c32eb6c; op2val:0xc255d574;
op3val:0x7f157310; valaddr_reg:x13; val_offset:2250*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:64 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 64, 0, x13, 2250*FLEN/8, x14, x11, x12)

inst_773:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x32eb6c and fs2 == 1 and fe2 == 0x84 and fm2 == 0x55d574 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x157310 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7c32eb6c; op2val:0xc255d574;
op3val:0x7f157310; valaddr_reg:x13; val_offset:2253*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:96 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 96, 0, x13, 2253*FLEN/8, x14, x11, x12)

inst_774:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x32eb6c and fs2 == 1 and fe2 == 0x84 and fm2 == 0x55d574 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x157310 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7c32eb6c; op2val:0xc255d574;
op3val:0x7f157310; valaddr_reg:x13; val_offset:2256*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:128 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 128, 0, x13, 2256*FLEN/8, x14, x11, x12)

inst_775:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x243fb8 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x2c433a and fs3 == 0 and fe3 == 0xfd and fm3 == 0x5d0be3 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ea43fb8; op2val:0xbfac433a;
op3val:0x7edd0be3; valaddr_reg:x13; val_offset:2259*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 2259*FLEN/8, x14, x11, x12)

inst_776:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x243fb8 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x2c433a and fs3 == 0 and fe3 == 0xfd and fm3 == 0x5d0be3 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ea43fb8; op2val:0xbfac433a;
op3val:0x7edd0be3; valaddr_reg:x13; val_offset:2262*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:32 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 32, 0, x13, 2262*FLEN/8, x14, x11, x12)

inst_777:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x243fb8 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x2c433a and fs3 == 0 and fe3 == 0xfd and fm3 == 0x5d0be3 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ea43fb8; op2val:0xbfac433a;
op3val:0x7edd0be3; valaddr_reg:x13; val_offset:2265*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:64 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 64, 0, x13, 2265*FLEN/8, x14, x11, x12)

inst_778:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x243fb8 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x2c433a and fs3 == 0 and fe3 == 0xfd and fm3 == 0x5d0be3 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ea43fb8; op2val:0xbfac433a;
op3val:0x7edd0be3; valaddr_reg:x13; val_offset:2268*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:96 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 96, 0, x13, 2268*FLEN/8, x14, x11, x12)

inst_779:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x243fb8 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x2c433a and fs3 == 0 and fe3 == 0xfd and fm3 == 0x5d0be3 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ea43fb8; op2val:0xbfac433a;
op3val:0x7edd0be3; valaddr_reg:x13; val_offset:2271*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:128 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 128, 0, x13, 2271*FLEN/8, x14, x11, x12)

inst_780:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x07f885 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x648bdf and fs3 == 0 and fe3 == 0xfd and fm3 == 0x72c742 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f07f885; op2val:0xbf648bdf;
op3val:0x7ef2c742; valaddr_reg:x13; val_offset:2274*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 2274*FLEN/8, x14, x11, x12)

inst_781:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x07f885 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x648bdf and fs3 == 0 and fe3 == 0xfd and fm3 == 0x72c742 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f07f885; op2val:0xbf648bdf;
op3val:0x7ef2c742; valaddr_reg:x13; val_offset:2277*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:32 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 32, 0, x13, 2277*FLEN/8, x14, x11, x12)

inst_782:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x07f885 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x648bdf and fs3 == 0 and fe3 == 0xfd and fm3 == 0x72c742 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f07f885; op2val:0xbf648bdf;
op3val:0x7ef2c742; valaddr_reg:x13; val_offset:2280*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:64 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 64, 0, x13, 2280*FLEN/8, x14, x11, x12)

inst_783:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x07f885 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x648bdf and fs3 == 0 and fe3 == 0xfd and fm3 == 0x72c742 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f07f885; op2val:0xbf648bdf;
op3val:0x7ef2c742; valaddr_reg:x13; val_offset:2283*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:96 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 96, 0, x13, 2283*FLEN/8, x14, x11, x12)

inst_784:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x07f885 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x648bdf and fs3 == 0 and fe3 == 0xfd and fm3 == 0x72c742 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f07f885; op2val:0xbf648bdf;
op3val:0x7ef2c742; valaddr_reg:x13; val_offset:2286*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:128 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 128, 0, x13, 2286*FLEN/8, x14, x11, x12)

inst_785:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x390aa3 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x722d10 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x2f0ca1 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7eb90aa3; op2val:0xbff22d10;
op3val:0x7f2f0ca1; valaddr_reg:x13; val_offset:2289*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 2289*FLEN/8, x14, x11, x12)

inst_786:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x390aa3 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x722d10 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x2f0ca1 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7eb90aa3; op2val:0xbff22d10;
op3val:0x7f2f0ca1; valaddr_reg:x13; val_offset:2292*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:32 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 32, 0, x13, 2292*FLEN/8, x14, x11, x12)

inst_787:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x390aa3 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x722d10 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x2f0ca1 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7eb90aa3; op2val:0xbff22d10;
op3val:0x7f2f0ca1; valaddr_reg:x13; val_offset:2295*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:64 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 64, 0, x13, 2295*FLEN/8, x14, x11, x12)

inst_788:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x390aa3 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x722d10 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x2f0ca1 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7eb90aa3; op2val:0xbff22d10;
op3val:0x7f2f0ca1; valaddr_reg:x13; val_offset:2298*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:96 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 96, 0, x13, 2298*FLEN/8, x14, x11, x12)

inst_789:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x390aa3 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x722d10 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x2f0ca1 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7eb90aa3; op2val:0xbff22d10;
op3val:0x7f2f0ca1; valaddr_reg:x13; val_offset:2301*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:128 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 128, 0, x13, 2301*FLEN/8, x14, x11, x12)
RVTEST_SIGBASE(x11,signature_x11_6)

inst_790:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x14058d and fs2 == 1 and fe2 == 0x7f and fm2 == 0x021f69 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x1679f6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e94058d; op2val:0xbf821f69;
op3val:0x7e9679f6; valaddr_reg:x13; val_offset:2304*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 2304*FLEN/8, x14, x11, x12)

inst_791:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x14058d and fs2 == 1 and fe2 == 0x7f and fm2 == 0x021f69 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x1679f6 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e94058d; op2val:0xbf821f69;
op3val:0x7e9679f6; valaddr_reg:x13; val_offset:2307*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:32 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 32, 0, x13, 2307*FLEN/8, x14, x11, x12)

inst_792:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x14058d and fs2 == 1 and fe2 == 0x7f and fm2 == 0x021f69 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x1679f6 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e94058d; op2val:0xbf821f69;
op3val:0x7e9679f6; valaddr_reg:x13; val_offset:2310*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:64 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 64, 0, x13, 2310*FLEN/8, x14, x11, x12)

inst_793:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x14058d and fs2 == 1 and fe2 == 0x7f and fm2 == 0x021f69 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x1679f6 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e94058d; op2val:0xbf821f69;
op3val:0x7e9679f6; valaddr_reg:x13; val_offset:2313*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:96 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 96, 0, x13, 2313*FLEN/8, x14, x11, x12)

inst_794:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x14058d and fs2 == 1 and fe2 == 0x7f and fm2 == 0x021f69 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x1679f6 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e94058d; op2val:0xbf821f69;
op3val:0x7e9679f6; valaddr_reg:x13; val_offset:2316*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:128 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 128, 0, x13, 2316*FLEN/8, x14, x11, x12)

inst_795:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2390a7 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x6c2877 and fs3 == 0 and fe3 == 0xfc and fm3 == 0x16e335 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f2390a7; op2val:0xbe6c2877;
op3val:0x7e16e335; valaddr_reg:x13; val_offset:2319*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 2319*FLEN/8, x14, x11, x12)

inst_796:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2390a7 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x6c2877 and fs3 == 0 and fe3 == 0xfc and fm3 == 0x16e335 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f2390a7; op2val:0xbe6c2877;
op3val:0x7e16e335; valaddr_reg:x13; val_offset:2322*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:32 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 32, 0, x13, 2322*FLEN/8, x14, x11, x12)

inst_797:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2390a7 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x6c2877 and fs3 == 0 and fe3 == 0xfc and fm3 == 0x16e335 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f2390a7; op2val:0xbe6c2877;
op3val:0x7e16e335; valaddr_reg:x13; val_offset:2325*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:64 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 64, 0, x13, 2325*FLEN/8, x14, x11, x12)

inst_798:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2390a7 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x6c2877 and fs3 == 0 and fe3 == 0xfc and fm3 == 0x16e335 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f2390a7; op2val:0xbe6c2877;
op3val:0x7e16e335; valaddr_reg:x13; val_offset:2328*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:96 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 96, 0, x13, 2328*FLEN/8, x14, x11, x12)

inst_799:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2390a7 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x6c2877 and fs3 == 0 and fe3 == 0xfc and fm3 == 0x16e335 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f2390a7; op2val:0xbe6c2877;
op3val:0x7e16e335; valaddr_reg:x13; val_offset:2331*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:128 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 128, 0, x13, 2331*FLEN/8, x14, x11, x12)

inst_800:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x63ac29 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x333166 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x1f5d50 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e63ac29; op2val:0xc0333166;
op3val:0x7f1f5d50; valaddr_reg:x13; val_offset:2334*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 2334*FLEN/8, x14, x11, x12)

inst_801:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x63ac29 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x333166 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x1f5d50 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e63ac29; op2val:0xc0333166;
op3val:0x7f1f5d50; valaddr_reg:x13; val_offset:2337*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:32 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 32, 0, x13, 2337*FLEN/8, x14, x11, x12)

inst_802:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x63ac29 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x333166 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x1f5d50 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e63ac29; op2val:0xc0333166;
op3val:0x7f1f5d50; valaddr_reg:x13; val_offset:2340*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:64 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 64, 0, x13, 2340*FLEN/8, x14, x11, x12)

inst_803:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x63ac29 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x333166 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x1f5d50 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e63ac29; op2val:0xc0333166;
op3val:0x7f1f5d50; valaddr_reg:x13; val_offset:2343*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:96 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 96, 0, x13, 2343*FLEN/8, x14, x11, x12)

inst_804:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x63ac29 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x333166 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x1f5d50 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e63ac29; op2val:0xc0333166;
op3val:0x7f1f5d50; valaddr_reg:x13; val_offset:2346*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:128 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 128, 0, x13, 2346*FLEN/8, x14, x11, x12)

inst_805:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x4aeb32 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x4a914f and fs3 == 0 and fe3 == 0xfe and fm3 == 0x2090c4 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d4aeb32; op2val:0xc14a914f;
op3val:0x7f2090c4; valaddr_reg:x13; val_offset:2349*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 2349*FLEN/8, x14, x11, x12)

inst_806:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x4aeb32 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x4a914f and fs3 == 0 and fe3 == 0xfe and fm3 == 0x2090c4 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d4aeb32; op2val:0xc14a914f;
op3val:0x7f2090c4; valaddr_reg:x13; val_offset:2352*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:32 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 32, 0, x13, 2352*FLEN/8, x14, x11, x12)

inst_807:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x4aeb32 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x4a914f and fs3 == 0 and fe3 == 0xfe and fm3 == 0x2090c4 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d4aeb32; op2val:0xc14a914f;
op3val:0x7f2090c4; valaddr_reg:x13; val_offset:2355*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:64 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 64, 0, x13, 2355*FLEN/8, x14, x11, x12)

inst_808:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x4aeb32 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x4a914f and fs3 == 0 and fe3 == 0xfe and fm3 == 0x2090c4 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d4aeb32; op2val:0xc14a914f;
op3val:0x7f2090c4; valaddr_reg:x13; val_offset:2358*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:96 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 96, 0, x13, 2358*FLEN/8, x14, x11, x12)

inst_809:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x4aeb32 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x4a914f and fs3 == 0 and fe3 == 0xfe and fm3 == 0x2090c4 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d4aeb32; op2val:0xc14a914f;
op3val:0x7f2090c4; valaddr_reg:x13; val_offset:2361*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:128 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 128, 0, x13, 2361*FLEN/8, x14, x11, x12)

inst_810:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x055e08 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x1f839e and fs3 == 0 and fe3 == 0xfd and fm3 == 0x2633f2 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f055e08; op2val:0xbf1f839e;
op3val:0x7ea633f2; valaddr_reg:x13; val_offset:2364*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 2364*FLEN/8, x14, x11, x12)

inst_811:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x055e08 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x1f839e and fs3 == 0 and fe3 == 0xfd and fm3 == 0x2633f2 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f055e08; op2val:0xbf1f839e;
op3val:0x7ea633f2; valaddr_reg:x13; val_offset:2367*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:32 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 32, 0, x13, 2367*FLEN/8, x14, x11, x12)

inst_812:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x055e08 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x1f839e and fs3 == 0 and fe3 == 0xfd and fm3 == 0x2633f2 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f055e08; op2val:0xbf1f839e;
op3val:0x7ea633f2; valaddr_reg:x13; val_offset:2370*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:64 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 64, 0, x13, 2370*FLEN/8, x14, x11, x12)

inst_813:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x055e08 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x1f839e and fs3 == 0 and fe3 == 0xfd and fm3 == 0x2633f2 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f055e08; op2val:0xbf1f839e;
op3val:0x7ea633f2; valaddr_reg:x13; val_offset:2373*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:96 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 96, 0, x13, 2373*FLEN/8, x14, x11, x12)

inst_814:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x055e08 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x1f839e and fs3 == 0 and fe3 == 0xfd and fm3 == 0x2633f2 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f055e08; op2val:0xbf1f839e;
op3val:0x7ea633f2; valaddr_reg:x13; val_offset:2376*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:128 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 128, 0, x13, 2376*FLEN/8, x14, x11, x12)

inst_815:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x5bece0 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x2e7d03 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x15e665 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e5bece0; op2val:0xc02e7d03;
op3val:0x7f15e665; valaddr_reg:x13; val_offset:2379*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 2379*FLEN/8, x14, x11, x12)

inst_816:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x5bece0 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x2e7d03 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x15e665 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e5bece0; op2val:0xc02e7d03;
op3val:0x7f15e665; valaddr_reg:x13; val_offset:2382*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:32 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 32, 0, x13, 2382*FLEN/8, x14, x11, x12)

inst_817:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x5bece0 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x2e7d03 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x15e665 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e5bece0; op2val:0xc02e7d03;
op3val:0x7f15e665; valaddr_reg:x13; val_offset:2385*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:64 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 64, 0, x13, 2385*FLEN/8, x14, x11, x12)

inst_818:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x5bece0 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x2e7d03 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x15e665 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e5bece0; op2val:0xc02e7d03;
op3val:0x7f15e665; valaddr_reg:x13; val_offset:2388*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:96 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 96, 0, x13, 2388*FLEN/8, x14, x11, x12)

inst_819:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x5bece0 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x2e7d03 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x15e665 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e5bece0; op2val:0xc02e7d03;
op3val:0x7f15e665; valaddr_reg:x13; val_offset:2391*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:128 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 128, 0, x13, 2391*FLEN/8, x14, x11, x12)

inst_820:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2ed986 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x207095 and fs3 == 0 and fe3 == 0xfb and fm3 == 0x5b29b3 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f2ed986; op2val:0xbe207095;
op3val:0x7ddb29b3; valaddr_reg:x13; val_offset:2394*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 2394*FLEN/8, x14, x11, x12)

inst_821:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2ed986 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x207095 and fs3 == 0 and fe3 == 0xfb and fm3 == 0x5b29b3 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f2ed986; op2val:0xbe207095;
op3val:0x7ddb29b3; valaddr_reg:x13; val_offset:2397*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:32 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 32, 0, x13, 2397*FLEN/8, x14, x11, x12)

inst_822:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2ed986 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x207095 and fs3 == 0 and fe3 == 0xfb and fm3 == 0x5b29b3 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f2ed986; op2val:0xbe207095;
op3val:0x7ddb29b3; valaddr_reg:x13; val_offset:2400*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:64 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 64, 0, x13, 2400*FLEN/8, x14, x11, x12)

inst_823:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2ed986 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x207095 and fs3 == 0 and fe3 == 0xfb and fm3 == 0x5b29b3 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f2ed986; op2val:0xbe207095;
op3val:0x7ddb29b3; valaddr_reg:x13; val_offset:2403*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:96 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 96, 0, x13, 2403*FLEN/8, x14, x11, x12)

inst_824:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2ed986 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x207095 and fs3 == 0 and fe3 == 0xfb and fm3 == 0x5b29b3 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f2ed986; op2val:0xbe207095;
op3val:0x7ddb29b3; valaddr_reg:x13; val_offset:2406*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:128 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 128, 0, x13, 2406*FLEN/8, x14, x11, x12)

inst_825:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x37b5df and fs2 == 1 and fe2 == 0x7f and fm2 == 0x12e948 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x52da44 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7eb7b5df; op2val:0xbf92e948;
op3val:0x7ed2da44; valaddr_reg:x13; val_offset:2409*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 2409*FLEN/8, x14, x11, x12)

inst_826:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x37b5df and fs2 == 1 and fe2 == 0x7f and fm2 == 0x12e948 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x52da44 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7eb7b5df; op2val:0xbf92e948;
op3val:0x7ed2da44; valaddr_reg:x13; val_offset:2412*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:32 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 32, 0, x13, 2412*FLEN/8, x14, x11, x12)

inst_827:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x37b5df and fs2 == 1 and fe2 == 0x7f and fm2 == 0x12e948 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x52da44 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7eb7b5df; op2val:0xbf92e948;
op3val:0x7ed2da44; valaddr_reg:x13; val_offset:2415*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:64 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 64, 0, x13, 2415*FLEN/8, x14, x11, x12)

inst_828:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x37b5df and fs2 == 1 and fe2 == 0x7f and fm2 == 0x12e948 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x52da44 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7eb7b5df; op2val:0xbf92e948;
op3val:0x7ed2da44; valaddr_reg:x13; val_offset:2418*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:96 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 96, 0, x13, 2418*FLEN/8, x14, x11, x12)

inst_829:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x37b5df and fs2 == 1 and fe2 == 0x7f and fm2 == 0x12e948 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x52da44 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7eb7b5df; op2val:0xbf92e948;
op3val:0x7ed2da44; valaddr_reg:x13; val_offset:2421*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:128 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 128, 0, x13, 2421*FLEN/8, x14, x11, x12)

inst_830:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3f1c1f and fs2 == 1 and fe2 == 0x7e and fm2 == 0x2a2046 and fs3 == 0 and fe3 == 0xfc and fm3 == 0x7e0189 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ebf1c1f; op2val:0xbf2a2046;
op3val:0x7e7e0189; valaddr_reg:x13; val_offset:2424*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 2424*FLEN/8, x14, x11, x12)

inst_831:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3f1c1f and fs2 == 1 and fe2 == 0x7e and fm2 == 0x2a2046 and fs3 == 0 and fe3 == 0xfc and fm3 == 0x7e0189 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ebf1c1f; op2val:0xbf2a2046;
op3val:0x7e7e0189; valaddr_reg:x13; val_offset:2427*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:32 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 32, 0, x13, 2427*FLEN/8, x14, x11, x12)

inst_832:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3f1c1f and fs2 == 1 and fe2 == 0x7e and fm2 == 0x2a2046 and fs3 == 0 and fe3 == 0xfc and fm3 == 0x7e0189 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ebf1c1f; op2val:0xbf2a2046;
op3val:0x7e7e0189; valaddr_reg:x13; val_offset:2430*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:64 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 64, 0, x13, 2430*FLEN/8, x14, x11, x12)

inst_833:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3f1c1f and fs2 == 1 and fe2 == 0x7e and fm2 == 0x2a2046 and fs3 == 0 and fe3 == 0xfc and fm3 == 0x7e0189 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ebf1c1f; op2val:0xbf2a2046;
op3val:0x7e7e0189; valaddr_reg:x13; val_offset:2433*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:96 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 96, 0, x13, 2433*FLEN/8, x14, x11, x12)

inst_834:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3f1c1f and fs2 == 1 and fe2 == 0x7e and fm2 == 0x2a2046 and fs3 == 0 and fe3 == 0xfc and fm3 == 0x7e0189 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ebf1c1f; op2val:0xbf2a2046;
op3val:0x7e7e0189; valaddr_reg:x13; val_offset:2436*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:128 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 128, 0, x13, 2436*FLEN/8, x14, x11, x12)

inst_835:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x6bd190 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x743850 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x60f79d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7debd190; op2val:0xc0743850;
op3val:0x7ee0f79d; valaddr_reg:x13; val_offset:2439*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 2439*FLEN/8, x14, x11, x12)

inst_836:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x6bd190 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x743850 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x60f79d and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7debd190; op2val:0xc0743850;
op3val:0x7ee0f79d; valaddr_reg:x13; val_offset:2442*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:32 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 32, 0, x13, 2442*FLEN/8, x14, x11, x12)

inst_837:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x6bd190 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x743850 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x60f79d and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7debd190; op2val:0xc0743850;
op3val:0x7ee0f79d; valaddr_reg:x13; val_offset:2445*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:64 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 64, 0, x13, 2445*FLEN/8, x14, x11, x12)

inst_838:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x6bd190 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x743850 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x60f79d and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7debd190; op2val:0xc0743850;
op3val:0x7ee0f79d; valaddr_reg:x13; val_offset:2448*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:96 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 96, 0, x13, 2448*FLEN/8, x14, x11, x12)

inst_839:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x6bd190 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x743850 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x60f79d and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7debd190; op2val:0xc0743850;
op3val:0x7ee0f79d; valaddr_reg:x13; val_offset:2451*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:128 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 128, 0, x13, 2451*FLEN/8, x14, x11, x12)

inst_840:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1bdeb9 and fs2 == 1 and fe2 == 0x7b and fm2 == 0x2c9a42 and fs3 == 0 and fe3 == 0xfa and fm3 == 0x522f22 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f1bdeb9; op2val:0xbdac9a42;
op3val:0x7d522f22; valaddr_reg:x13; val_offset:2454*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 2454*FLEN/8, x14, x11, x12)

inst_841:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1bdeb9 and fs2 == 1 and fe2 == 0x7b and fm2 == 0x2c9a42 and fs3 == 0 and fe3 == 0xfa and fm3 == 0x522f22 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f1bdeb9; op2val:0xbdac9a42;
op3val:0x7d522f22; valaddr_reg:x13; val_offset:2457*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:32 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 32, 0, x13, 2457*FLEN/8, x14, x11, x12)

inst_842:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1bdeb9 and fs2 == 1 and fe2 == 0x7b and fm2 == 0x2c9a42 and fs3 == 0 and fe3 == 0xfa and fm3 == 0x522f22 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f1bdeb9; op2val:0xbdac9a42;
op3val:0x7d522f22; valaddr_reg:x13; val_offset:2460*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:64 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 64, 0, x13, 2460*FLEN/8, x14, x11, x12)

inst_843:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1bdeb9 and fs2 == 1 and fe2 == 0x7b and fm2 == 0x2c9a42 and fs3 == 0 and fe3 == 0xfa and fm3 == 0x522f22 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f1bdeb9; op2val:0xbdac9a42;
op3val:0x7d522f22; valaddr_reg:x13; val_offset:2463*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:96 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 96, 0, x13, 2463*FLEN/8, x14, x11, x12)

inst_844:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1bdeb9 and fs2 == 1 and fe2 == 0x7b and fm2 == 0x2c9a42 and fs3 == 0 and fe3 == 0xfa and fm3 == 0x522f22 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f1bdeb9; op2val:0xbdac9a42;
op3val:0x7d522f22; valaddr_reg:x13; val_offset:2466*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:128 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 128, 0, x13, 2466*FLEN/8, x14, x11, x12)

inst_845:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x30a79f and fs2 == 1 and fe2 == 0x80 and fm2 == 0x640ab1 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x1d5cab and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e30a79f; op2val:0xc0640ab1;
op3val:0x7f1d5cab; valaddr_reg:x13; val_offset:2469*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 2469*FLEN/8, x14, x11, x12)

inst_846:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x30a79f and fs2 == 1 and fe2 == 0x80 and fm2 == 0x640ab1 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x1d5cab and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e30a79f; op2val:0xc0640ab1;
op3val:0x7f1d5cab; valaddr_reg:x13; val_offset:2472*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:32 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 32, 0, x13, 2472*FLEN/8, x14, x11, x12)

inst_847:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x30a79f and fs2 == 1 and fe2 == 0x80 and fm2 == 0x640ab1 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x1d5cab and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e30a79f; op2val:0xc0640ab1;
op3val:0x7f1d5cab; valaddr_reg:x13; val_offset:2475*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:64 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 64, 0, x13, 2475*FLEN/8, x14, x11, x12)

inst_848:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x30a79f and fs2 == 1 and fe2 == 0x80 and fm2 == 0x640ab1 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x1d5cab and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e30a79f; op2val:0xc0640ab1;
op3val:0x7f1d5cab; valaddr_reg:x13; val_offset:2478*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:96 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 96, 0, x13, 2478*FLEN/8, x14, x11, x12)

inst_849:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x30a79f and fs2 == 1 and fe2 == 0x80 and fm2 == 0x640ab1 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x1d5cab and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e30a79f; op2val:0xc0640ab1;
op3val:0x7f1d5cab; valaddr_reg:x13; val_offset:2481*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:128 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 128, 0, x13, 2481*FLEN/8, x14, x11, x12)

inst_850:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x18041e and fs2 == 1 and fe2 == 0x7e and fm2 == 0x5690a4 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x7ed2ab and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f18041e; op2val:0xbf5690a4;
op3val:0x7efed2ab; valaddr_reg:x13; val_offset:2484*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 2484*FLEN/8, x14, x11, x12)

inst_851:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x18041e and fs2 == 1 and fe2 == 0x7e and fm2 == 0x5690a4 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x7ed2ab and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f18041e; op2val:0xbf5690a4;
op3val:0x7efed2ab; valaddr_reg:x13; val_offset:2487*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:32 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 32, 0, x13, 2487*FLEN/8, x14, x11, x12)

inst_852:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x18041e and fs2 == 1 and fe2 == 0x7e and fm2 == 0x5690a4 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x7ed2ab and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f18041e; op2val:0xbf5690a4;
op3val:0x7efed2ab; valaddr_reg:x13; val_offset:2490*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:64 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 64, 0, x13, 2490*FLEN/8, x14, x11, x12)

inst_853:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x18041e and fs2 == 1 and fe2 == 0x7e and fm2 == 0x5690a4 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x7ed2ab and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f18041e; op2val:0xbf5690a4;
op3val:0x7efed2ab; valaddr_reg:x13; val_offset:2493*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:96 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 96, 0, x13, 2493*FLEN/8, x14, x11, x12)

inst_854:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x18041e and fs2 == 1 and fe2 == 0x7e and fm2 == 0x5690a4 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x7ed2ab and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f18041e; op2val:0xbf5690a4;
op3val:0x7efed2ab; valaddr_reg:x13; val_offset:2496*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:128 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 128, 0, x13, 2496*FLEN/8, x14, x11, x12)

inst_855:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x1cffed and fs2 == 1 and fe2 == 0x83 and fm2 == 0x623971 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x0abd2a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7c9cffed; op2val:0xc1e23971;
op3val:0x7f0abd2a; valaddr_reg:x13; val_offset:2499*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 2499*FLEN/8, x14, x11, x12)

inst_856:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x1cffed and fs2 == 1 and fe2 == 0x83 and fm2 == 0x623971 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x0abd2a and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7c9cffed; op2val:0xc1e23971;
op3val:0x7f0abd2a; valaddr_reg:x13; val_offset:2502*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:32 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 32, 0, x13, 2502*FLEN/8, x14, x11, x12)

inst_857:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x1cffed and fs2 == 1 and fe2 == 0x83 and fm2 == 0x623971 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x0abd2a and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7c9cffed; op2val:0xc1e23971;
op3val:0x7f0abd2a; valaddr_reg:x13; val_offset:2505*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:64 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 64, 0, x13, 2505*FLEN/8, x14, x11, x12)

inst_858:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x1cffed and fs2 == 1 and fe2 == 0x83 and fm2 == 0x623971 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x0abd2a and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7c9cffed; op2val:0xc1e23971;
op3val:0x7f0abd2a; valaddr_reg:x13; val_offset:2508*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:96 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 96, 0, x13, 2508*FLEN/8, x14, x11, x12)

inst_859:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x1cffed and fs2 == 1 and fe2 == 0x83 and fm2 == 0x623971 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x0abd2a and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7c9cffed; op2val:0xc1e23971;
op3val:0x7f0abd2a; valaddr_reg:x13; val_offset:2511*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:128 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 128, 0, x13, 2511*FLEN/8, x14, x11, x12)

inst_860:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3be85f and fs2 == 1 and fe2 == 0x7f and fm2 == 0x0291dd and fs3 == 0 and fe3 == 0xfe and fm3 == 0x3fae22 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f3be85f; op2val:0xbf8291dd;
op3val:0x7f3fae22; valaddr_reg:x13; val_offset:2514*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 2514*FLEN/8, x14, x11, x12)

inst_861:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3be85f and fs2 == 1 and fe2 == 0x7f and fm2 == 0x0291dd and fs3 == 0 and fe3 == 0xfe and fm3 == 0x3fae22 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f3be85f; op2val:0xbf8291dd;
op3val:0x7f3fae22; valaddr_reg:x13; val_offset:2517*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:32 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 32, 0, x13, 2517*FLEN/8, x14, x11, x12)

inst_862:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3be85f and fs2 == 1 and fe2 == 0x7f and fm2 == 0x0291dd and fs3 == 0 and fe3 == 0xfe and fm3 == 0x3fae22 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f3be85f; op2val:0xbf8291dd;
op3val:0x7f3fae22; valaddr_reg:x13; val_offset:2520*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:64 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 64, 0, x13, 2520*FLEN/8, x14, x11, x12)

inst_863:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3be85f and fs2 == 1 and fe2 == 0x7f and fm2 == 0x0291dd and fs3 == 0 and fe3 == 0xfe and fm3 == 0x3fae22 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f3be85f; op2val:0xbf8291dd;
op3val:0x7f3fae22; valaddr_reg:x13; val_offset:2523*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:96 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 96, 0, x13, 2523*FLEN/8, x14, x11, x12)

inst_864:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3be85f and fs2 == 1 and fe2 == 0x7f and fm2 == 0x0291dd and fs3 == 0 and fe3 == 0xfe and fm3 == 0x3fae22 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f3be85f; op2val:0xbf8291dd;
op3val:0x7f3fae22; valaddr_reg:x13; val_offset:2526*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:128 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 128, 0, x13, 2526*FLEN/8, x14, x11, x12)

inst_865:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x06a3bf and fs2 == 1 and fe2 == 0x7b and fm2 == 0x0ecac8 and fs3 == 0 and fe3 == 0xfa and fm3 == 0x1632f5 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f06a3bf; op2val:0xbd8ecac8;
op3val:0x7d1632f5; valaddr_reg:x13; val_offset:2529*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 2529*FLEN/8, x14, x11, x12)

inst_866:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x06a3bf and fs2 == 1 and fe2 == 0x7b and fm2 == 0x0ecac8 and fs3 == 0 and fe3 == 0xfa and fm3 == 0x1632f5 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f06a3bf; op2val:0xbd8ecac8;
op3val:0x7d1632f5; valaddr_reg:x13; val_offset:2532*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:32 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 32, 0, x13, 2532*FLEN/8, x14, x11, x12)

inst_867:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x06a3bf and fs2 == 1 and fe2 == 0x7b and fm2 == 0x0ecac8 and fs3 == 0 and fe3 == 0xfa and fm3 == 0x1632f5 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f06a3bf; op2val:0xbd8ecac8;
op3val:0x7d1632f5; valaddr_reg:x13; val_offset:2535*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:64 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 64, 0, x13, 2535*FLEN/8, x14, x11, x12)

inst_868:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x06a3bf and fs2 == 1 and fe2 == 0x7b and fm2 == 0x0ecac8 and fs3 == 0 and fe3 == 0xfa and fm3 == 0x1632f5 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f06a3bf; op2val:0xbd8ecac8;
op3val:0x7d1632f5; valaddr_reg:x13; val_offset:2538*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:96 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 96, 0, x13, 2538*FLEN/8, x14, x11, x12)

inst_869:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x06a3bf and fs2 == 1 and fe2 == 0x7b and fm2 == 0x0ecac8 and fs3 == 0 and fe3 == 0xfa and fm3 == 0x1632f5 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f06a3bf; op2val:0xbd8ecac8;
op3val:0x7d1632f5; valaddr_reg:x13; val_offset:2541*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:128 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 128, 0, x13, 2541*FLEN/8, x14, x11, x12)

inst_870:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x21ad0f and fs2 == 1 and fe2 == 0x7d and fm2 == 0x054cc4 and fs3 == 0 and fe3 == 0xfc and fm3 == 0x285ec8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f21ad0f; op2val:0xbe854cc4;
op3val:0x7e285ec8; valaddr_reg:x13; val_offset:2544*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 2544*FLEN/8, x14, x11, x12)

inst_871:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x21ad0f and fs2 == 1 and fe2 == 0x7d and fm2 == 0x054cc4 and fs3 == 0 and fe3 == 0xfc and fm3 == 0x285ec8 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f21ad0f; op2val:0xbe854cc4;
op3val:0x7e285ec8; valaddr_reg:x13; val_offset:2547*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:32 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 32, 0, x13, 2547*FLEN/8, x14, x11, x12)

inst_872:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x21ad0f and fs2 == 1 and fe2 == 0x7d and fm2 == 0x054cc4 and fs3 == 0 and fe3 == 0xfc and fm3 == 0x285ec8 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f21ad0f; op2val:0xbe854cc4;
op3val:0x7e285ec8; valaddr_reg:x13; val_offset:2550*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:64 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 64, 0, x13, 2550*FLEN/8, x14, x11, x12)

inst_873:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x21ad0f and fs2 == 1 and fe2 == 0x7d and fm2 == 0x054cc4 and fs3 == 0 and fe3 == 0xfc and fm3 == 0x285ec8 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f21ad0f; op2val:0xbe854cc4;
op3val:0x7e285ec8; valaddr_reg:x13; val_offset:2553*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:96 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 96, 0, x13, 2553*FLEN/8, x14, x11, x12)

inst_874:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x21ad0f and fs2 == 1 and fe2 == 0x7d and fm2 == 0x054cc4 and fs3 == 0 and fe3 == 0xfc and fm3 == 0x285ec8 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f21ad0f; op2val:0xbe854cc4;
op3val:0x7e285ec8; valaddr_reg:x13; val_offset:2556*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:128 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 128, 0, x13, 2556*FLEN/8, x14, x11, x12)

inst_875:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x77f691 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3cc1c0 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x36d4be and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ef7f691; op2val:0xbfbcc1c0;
op3val:0x7f36d4be; valaddr_reg:x13; val_offset:2559*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 2559*FLEN/8, x14, x11, x12)

inst_876:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x77f691 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3cc1c0 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x36d4be and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ef7f691; op2val:0xbfbcc1c0;
op3val:0x7f36d4be; valaddr_reg:x13; val_offset:2562*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:32 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 32, 0, x13, 2562*FLEN/8, x14, x11, x12)

inst_877:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x77f691 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3cc1c0 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x36d4be and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ef7f691; op2val:0xbfbcc1c0;
op3val:0x7f36d4be; valaddr_reg:x13; val_offset:2565*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:64 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 64, 0, x13, 2565*FLEN/8, x14, x11, x12)

inst_878:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x77f691 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3cc1c0 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x36d4be and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ef7f691; op2val:0xbfbcc1c0;
op3val:0x7f36d4be; valaddr_reg:x13; val_offset:2568*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:96 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 96, 0, x13, 2568*FLEN/8, x14, x11, x12)

inst_879:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x77f691 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3cc1c0 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x36d4be and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ef7f691; op2val:0xbfbcc1c0;
op3val:0x7f36d4be; valaddr_reg:x13; val_offset:2571*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:128 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 128, 0, x13, 2571*FLEN/8, x14, x11, x12)

inst_880:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x08ca03 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x417fae and fs3 == 0 and fe3 == 0xfb and fm3 == 0x4ec90d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f08ca03; op2val:0xbe417fae;
op3val:0x7dcec90d; valaddr_reg:x13; val_offset:2574*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 2574*FLEN/8, x14, x11, x12)

inst_881:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x08ca03 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x417fae and fs3 == 0 and fe3 == 0xfb and fm3 == 0x4ec90d and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f08ca03; op2val:0xbe417fae;
op3val:0x7dcec90d; valaddr_reg:x13; val_offset:2577*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:32 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 32, 0, x13, 2577*FLEN/8, x14, x11, x12)

inst_882:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x08ca03 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x417fae and fs3 == 0 and fe3 == 0xfb and fm3 == 0x4ec90d and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f08ca03; op2val:0xbe417fae;
op3val:0x7dcec90d; valaddr_reg:x13; val_offset:2580*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:64 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 64, 0, x13, 2580*FLEN/8, x14, x11, x12)

inst_883:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x08ca03 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x417fae and fs3 == 0 and fe3 == 0xfb and fm3 == 0x4ec90d and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f08ca03; op2val:0xbe417fae;
op3val:0x7dcec90d; valaddr_reg:x13; val_offset:2583*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:96 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 96, 0, x13, 2583*FLEN/8, x14, x11, x12)

inst_884:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x08ca03 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x417fae and fs3 == 0 and fe3 == 0xfb and fm3 == 0x4ec90d and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f08ca03; op2val:0xbe417fae;
op3val:0x7dcec90d; valaddr_reg:x13; val_offset:2586*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:128 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 128, 0, x13, 2586*FLEN/8, x14, x11, x12)

inst_885:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x60a271 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x48ddad and fs3 == 0 and fe3 == 0xfe and fm3 == 0x30416d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e60a271; op2val:0xc048ddad;
op3val:0x7f30416d; valaddr_reg:x13; val_offset:2589*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 2589*FLEN/8, x14, x11, x12)

inst_886:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x60a271 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x48ddad and fs3 == 0 and fe3 == 0xfe and fm3 == 0x30416d and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e60a271; op2val:0xc048ddad;
op3val:0x7f30416d; valaddr_reg:x13; val_offset:2592*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:32 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 32, 0, x13, 2592*FLEN/8, x14, x11, x12)

inst_887:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x60a271 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x48ddad and fs3 == 0 and fe3 == 0xfe and fm3 == 0x30416d and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e60a271; op2val:0xc048ddad;
op3val:0x7f30416d; valaddr_reg:x13; val_offset:2595*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:64 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 64, 0, x13, 2595*FLEN/8, x14, x11, x12)

inst_888:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x60a271 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x48ddad and fs3 == 0 and fe3 == 0xfe and fm3 == 0x30416d and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e60a271; op2val:0xc048ddad;
op3val:0x7f30416d; valaddr_reg:x13; val_offset:2598*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:96 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 96, 0, x13, 2598*FLEN/8, x14, x11, x12)

inst_889:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x60a271 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x48ddad and fs3 == 0 and fe3 == 0xfe and fm3 == 0x30416d and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e60a271; op2val:0xc048ddad;
op3val:0x7f30416d; valaddr_reg:x13; val_offset:2601*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:128 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 128, 0, x13, 2601*FLEN/8, x14, x11, x12)

inst_890:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x65fc3b and fs2 == 1 and fe2 == 0x81 and fm2 == 0x027faf and fs3 == 0 and fe3 == 0xfd and fm3 == 0x6a7997 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7de5fc3b; op2val:0xc0827faf;
op3val:0x7eea7997; valaddr_reg:x13; val_offset:2604*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 2604*FLEN/8, x14, x11, x12)

inst_891:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x65fc3b and fs2 == 1 and fe2 == 0x81 and fm2 == 0x027faf and fs3 == 0 and fe3 == 0xfd and fm3 == 0x6a7997 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7de5fc3b; op2val:0xc0827faf;
op3val:0x7eea7997; valaddr_reg:x13; val_offset:2607*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:32 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 32, 0, x13, 2607*FLEN/8, x14, x11, x12)

inst_892:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x65fc3b and fs2 == 1 and fe2 == 0x81 and fm2 == 0x027faf and fs3 == 0 and fe3 == 0xfd and fm3 == 0x6a7997 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7de5fc3b; op2val:0xc0827faf;
op3val:0x7eea7997; valaddr_reg:x13; val_offset:2610*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:64 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 64, 0, x13, 2610*FLEN/8, x14, x11, x12)

inst_893:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x65fc3b and fs2 == 1 and fe2 == 0x81 and fm2 == 0x027faf and fs3 == 0 and fe3 == 0xfd and fm3 == 0x6a7997 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7de5fc3b; op2val:0xc0827faf;
op3val:0x7eea7997; valaddr_reg:x13; val_offset:2613*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:96 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 96, 0, x13, 2613*FLEN/8, x14, x11, x12)

inst_894:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x65fc3b and fs2 == 1 and fe2 == 0x81 and fm2 == 0x027faf and fs3 == 0 and fe3 == 0xfd and fm3 == 0x6a7997 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7de5fc3b; op2val:0xc0827faf;
op3val:0x7eea7997; valaddr_reg:x13; val_offset:2616*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:128 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 128, 0, x13, 2616*FLEN/8, x14, x11, x12)

inst_895:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1ef396 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x475d41 and fs3 == 0 and fe3 == 0xfb and fm3 == 0x779282 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e9ef396; op2val:0xbec75d41;
op3val:0x7df79282; valaddr_reg:x13; val_offset:2619*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 2619*FLEN/8, x14, x11, x12)

inst_896:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1ef396 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x475d41 and fs3 == 0 and fe3 == 0xfb and fm3 == 0x779282 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e9ef396; op2val:0xbec75d41;
op3val:0x7df79282; valaddr_reg:x13; val_offset:2622*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:32 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 32, 0, x13, 2622*FLEN/8, x14, x11, x12)

inst_897:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1ef396 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x475d41 and fs3 == 0 and fe3 == 0xfb and fm3 == 0x779282 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e9ef396; op2val:0xbec75d41;
op3val:0x7df79282; valaddr_reg:x13; val_offset:2625*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:64 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 64, 0, x13, 2625*FLEN/8, x14, x11, x12)

inst_898:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1ef396 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x475d41 and fs3 == 0 and fe3 == 0xfb and fm3 == 0x779282 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e9ef396; op2val:0xbec75d41;
op3val:0x7df79282; valaddr_reg:x13; val_offset:2628*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:96 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 96, 0, x13, 2628*FLEN/8, x14, x11, x12)

inst_899:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1ef396 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x475d41 and fs3 == 0 and fe3 == 0xfb and fm3 == 0x779282 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e9ef396; op2val:0xbec75d41;
op3val:0x7df79282; valaddr_reg:x13; val_offset:2631*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:128 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 128, 0, x13, 2631*FLEN/8, x14, x11, x12)

inst_900:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6f00e7 and fs2 == 1 and fe2 == 0x7b and fm2 == 0x0f578d and fs3 == 0 and fe3 == 0xfa and fm3 == 0x05d33e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7eef00e7; op2val:0xbd8f578d;
op3val:0x7d05d33e; valaddr_reg:x13; val_offset:2634*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 2634*FLEN/8, x14, x11, x12)

inst_901:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6f00e7 and fs2 == 1 and fe2 == 0x7b and fm2 == 0x0f578d and fs3 == 0 and fe3 == 0xfa and fm3 == 0x05d33e and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7eef00e7; op2val:0xbd8f578d;
op3val:0x7d05d33e; valaddr_reg:x13; val_offset:2637*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:32 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 32, 0, x13, 2637*FLEN/8, x14, x11, x12)

inst_902:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6f00e7 and fs2 == 1 and fe2 == 0x7b and fm2 == 0x0f578d and fs3 == 0 and fe3 == 0xfa and fm3 == 0x05d33e and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7eef00e7; op2val:0xbd8f578d;
op3val:0x7d05d33e; valaddr_reg:x13; val_offset:2640*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:64 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 64, 0, x13, 2640*FLEN/8, x14, x11, x12)

inst_903:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6f00e7 and fs2 == 1 and fe2 == 0x7b and fm2 == 0x0f578d and fs3 == 0 and fe3 == 0xfa and fm3 == 0x05d33e and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7eef00e7; op2val:0xbd8f578d;
op3val:0x7d05d33e; valaddr_reg:x13; val_offset:2643*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:96 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 96, 0, x13, 2643*FLEN/8, x14, x11, x12)

inst_904:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6f00e7 and fs2 == 1 and fe2 == 0x7b and fm2 == 0x0f578d and fs3 == 0 and fe3 == 0xfa and fm3 == 0x05d33e and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7eef00e7; op2val:0xbd8f578d;
op3val:0x7d05d33e; valaddr_reg:x13; val_offset:2646*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:128 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 128, 0, x13, 2646*FLEN/8, x14, x11, x12)

inst_905:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x2637c1 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x6043c2 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x119cc8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7da637c1; op2val:0xc06043c2;
op3val:0x7e919cc8; valaddr_reg:x13; val_offset:2649*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 2649*FLEN/8, x14, x11, x12)

inst_906:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x2637c1 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x6043c2 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x119cc8 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7da637c1; op2val:0xc06043c2;
op3val:0x7e919cc8; valaddr_reg:x13; val_offset:2652*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:32 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 32, 0, x13, 2652*FLEN/8, x14, x11, x12)

inst_907:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x2637c1 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x6043c2 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x119cc8 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7da637c1; op2val:0xc06043c2;
op3val:0x7e919cc8; valaddr_reg:x13; val_offset:2655*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:64 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 64, 0, x13, 2655*FLEN/8, x14, x11, x12)

inst_908:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x2637c1 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x6043c2 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x119cc8 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7da637c1; op2val:0xc06043c2;
op3val:0x7e919cc8; valaddr_reg:x13; val_offset:2658*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:96 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 96, 0, x13, 2658*FLEN/8, x14, x11, x12)

inst_909:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x2637c1 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x6043c2 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x119cc8 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7da637c1; op2val:0xc06043c2;
op3val:0x7e919cc8; valaddr_reg:x13; val_offset:2661*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:128 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 128, 0, x13, 2661*FLEN/8, x14, x11, x12)

inst_910:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x5d3233 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x4ca6a8 and fs3 == 0 and fe3 == 0xfa and fm3 == 0x30d400 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d5d3233; op2val:0xbf4ca6a8;
op3val:0x7d30d400; valaddr_reg:x13; val_offset:2664*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 2664*FLEN/8, x14, x11, x12)

inst_911:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x5d3233 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x4ca6a8 and fs3 == 0 and fe3 == 0xfa and fm3 == 0x30d400 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d5d3233; op2val:0xbf4ca6a8;
op3val:0x7d30d400; valaddr_reg:x13; val_offset:2667*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:32 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 32, 0, x13, 2667*FLEN/8, x14, x11, x12)

inst_912:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x5d3233 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x4ca6a8 and fs3 == 0 and fe3 == 0xfa and fm3 == 0x30d400 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d5d3233; op2val:0xbf4ca6a8;
op3val:0x7d30d400; valaddr_reg:x13; val_offset:2670*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:64 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 64, 0, x13, 2670*FLEN/8, x14, x11, x12)

inst_913:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x5d3233 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x4ca6a8 and fs3 == 0 and fe3 == 0xfa and fm3 == 0x30d400 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d5d3233; op2val:0xbf4ca6a8;
op3val:0x7d30d400; valaddr_reg:x13; val_offset:2673*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:96 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 96, 0, x13, 2673*FLEN/8, x14, x11, x12)

inst_914:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x5d3233 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x4ca6a8 and fs3 == 0 and fe3 == 0xfa and fm3 == 0x30d400 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d5d3233; op2val:0xbf4ca6a8;
op3val:0x7d30d400; valaddr_reg:x13; val_offset:2676*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:128 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 128, 0, x13, 2676*FLEN/8, x14, x11, x12)

inst_915:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5ce5ef and fs2 == 1 and fe2 == 0x7f and fm2 == 0x252d67 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x0e8760 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7edce5ef; op2val:0xbfa52d67;
op3val:0x7f0e8760; valaddr_reg:x13; val_offset:2679*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 2679*FLEN/8, x14, x11, x12)

inst_916:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5ce5ef and fs2 == 1 and fe2 == 0x7f and fm2 == 0x252d67 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x0e8760 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7edce5ef; op2val:0xbfa52d67;
op3val:0x7f0e8760; valaddr_reg:x13; val_offset:2682*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:32 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 32, 0, x13, 2682*FLEN/8, x14, x11, x12)

inst_917:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5ce5ef and fs2 == 1 and fe2 == 0x7f and fm2 == 0x252d67 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x0e8760 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7edce5ef; op2val:0xbfa52d67;
op3val:0x7f0e8760; valaddr_reg:x13; val_offset:2685*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:64 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 64, 0, x13, 2685*FLEN/8, x14, x11, x12)
RVTEST_SIGBASE(x11,signature_x11_7)

inst_918:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5ce5ef and fs2 == 1 and fe2 == 0x7f and fm2 == 0x252d67 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x0e8760 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7edce5ef; op2val:0xbfa52d67;
op3val:0x7f0e8760; valaddr_reg:x13; val_offset:2688*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:96 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 96, 0, x13, 2688*FLEN/8, x14, x11, x12)

inst_919:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5ce5ef and fs2 == 1 and fe2 == 0x7f and fm2 == 0x252d67 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x0e8760 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7edce5ef; op2val:0xbfa52d67;
op3val:0x7f0e8760; valaddr_reg:x13; val_offset:2691*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:128 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 128, 0, x13, 2691*FLEN/8, x14, x11, x12)

inst_920:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x28a9ec and fs2 == 1 and fe2 == 0x7c and fm2 == 0x1c96d3 and fs3 == 0 and fe3 == 0xfb and fm3 == 0x4e55d5 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f28a9ec; op2val:0xbe1c96d3;
op3val:0x7dce55d5; valaddr_reg:x13; val_offset:2694*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 2694*FLEN/8, x14, x11, x12)

inst_921:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x28a9ec and fs2 == 1 and fe2 == 0x7c and fm2 == 0x1c96d3 and fs3 == 0 and fe3 == 0xfb and fm3 == 0x4e55d5 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f28a9ec; op2val:0xbe1c96d3;
op3val:0x7dce55d5; valaddr_reg:x13; val_offset:2697*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:32 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 32, 0, x13, 2697*FLEN/8, x14, x11, x12)

inst_922:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x28a9ec and fs2 == 1 and fe2 == 0x7c and fm2 == 0x1c96d3 and fs3 == 0 and fe3 == 0xfb and fm3 == 0x4e55d5 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f28a9ec; op2val:0xbe1c96d3;
op3val:0x7dce55d5; valaddr_reg:x13; val_offset:2700*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:64 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 64, 0, x13, 2700*FLEN/8, x14, x11, x12)

inst_923:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x28a9ec and fs2 == 1 and fe2 == 0x7c and fm2 == 0x1c96d3 and fs3 == 0 and fe3 == 0xfb and fm3 == 0x4e55d5 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f28a9ec; op2val:0xbe1c96d3;
op3val:0x7dce55d5; valaddr_reg:x13; val_offset:2703*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:96 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 96, 0, x13, 2703*FLEN/8, x14, x11, x12)

inst_924:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x28a9ec and fs2 == 1 and fe2 == 0x7c and fm2 == 0x1c96d3 and fs3 == 0 and fe3 == 0xfb and fm3 == 0x4e55d5 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f28a9ec; op2val:0xbe1c96d3;
op3val:0x7dce55d5; valaddr_reg:x13; val_offset:2706*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:128 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 128, 0, x13, 2706*FLEN/8, x14, x11, x12)

inst_925:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x25c2ef and fs2 == 1 and fe2 == 0x7e and fm2 == 0x3a8dcd and fs3 == 0 and fe3 == 0xfc and fm3 == 0x7196e6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ea5c2ef; op2val:0xbf3a8dcd;
op3val:0x7e7196e6; valaddr_reg:x13; val_offset:2709*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 2709*FLEN/8, x14, x11, x12)

inst_926:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x25c2ef and fs2 == 1 and fe2 == 0x7e and fm2 == 0x3a8dcd and fs3 == 0 and fe3 == 0xfc and fm3 == 0x7196e6 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ea5c2ef; op2val:0xbf3a8dcd;
op3val:0x7e7196e6; valaddr_reg:x13; val_offset:2712*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:32 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 32, 0, x13, 2712*FLEN/8, x14, x11, x12)

inst_927:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x25c2ef and fs2 == 1 and fe2 == 0x7e and fm2 == 0x3a8dcd and fs3 == 0 and fe3 == 0xfc and fm3 == 0x7196e6 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ea5c2ef; op2val:0xbf3a8dcd;
op3val:0x7e7196e6; valaddr_reg:x13; val_offset:2715*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:64 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 64, 0, x13, 2715*FLEN/8, x14, x11, x12)

inst_928:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x25c2ef and fs2 == 1 and fe2 == 0x7e and fm2 == 0x3a8dcd and fs3 == 0 and fe3 == 0xfc and fm3 == 0x7196e6 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ea5c2ef; op2val:0xbf3a8dcd;
op3val:0x7e7196e6; valaddr_reg:x13; val_offset:2718*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:96 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 96, 0, x13, 2718*FLEN/8, x14, x11, x12)

inst_929:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x25c2ef and fs2 == 1 and fe2 == 0x7e and fm2 == 0x3a8dcd and fs3 == 0 and fe3 == 0xfc and fm3 == 0x7196e6 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ea5c2ef; op2val:0xbf3a8dcd;
op3val:0x7e7196e6; valaddr_reg:x13; val_offset:2721*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:128 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 128, 0, x13, 2721*FLEN/8, x14, x11, x12)

inst_930:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x667bca and fs2 == 1 and fe2 == 0x7e and fm2 == 0x50cfc6 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x3bffa5 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ee67bca; op2val:0xbf50cfc6;
op3val:0x7ebbffa5; valaddr_reg:x13; val_offset:2724*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 2724*FLEN/8, x14, x11, x12)

inst_931:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x667bca and fs2 == 1 and fe2 == 0x7e and fm2 == 0x50cfc6 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x3bffa5 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ee67bca; op2val:0xbf50cfc6;
op3val:0x7ebbffa5; valaddr_reg:x13; val_offset:2727*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:32 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 32, 0, x13, 2727*FLEN/8, x14, x11, x12)

inst_932:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x667bca and fs2 == 1 and fe2 == 0x7e and fm2 == 0x50cfc6 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x3bffa5 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ee67bca; op2val:0xbf50cfc6;
op3val:0x7ebbffa5; valaddr_reg:x13; val_offset:2730*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:64 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 64, 0, x13, 2730*FLEN/8, x14, x11, x12)

inst_933:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x667bca and fs2 == 1 and fe2 == 0x7e and fm2 == 0x50cfc6 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x3bffa5 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ee67bca; op2val:0xbf50cfc6;
op3val:0x7ebbffa5; valaddr_reg:x13; val_offset:2733*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:96 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 96, 0, x13, 2733*FLEN/8, x14, x11, x12)

inst_934:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x667bca and fs2 == 1 and fe2 == 0x7e and fm2 == 0x50cfc6 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x3bffa5 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ee67bca; op2val:0xbf50cfc6;
op3val:0x7ebbffa5; valaddr_reg:x13; val_offset:2736*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:128 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 128, 0, x13, 2736*FLEN/8, x14, x11, x12)

inst_935:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x343304 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x4c22d6 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x0fb12d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f343304; op2val:0xbecc22d6;
op3val:0x7e8fb12d; valaddr_reg:x13; val_offset:2739*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 2739*FLEN/8, x14, x11, x12)

inst_936:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x343304 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x4c22d6 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x0fb12d and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f343304; op2val:0xbecc22d6;
op3val:0x7e8fb12d; valaddr_reg:x13; val_offset:2742*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:32 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 32, 0, x13, 2742*FLEN/8, x14, x11, x12)

inst_937:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x343304 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x4c22d6 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x0fb12d and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f343304; op2val:0xbecc22d6;
op3val:0x7e8fb12d; valaddr_reg:x13; val_offset:2745*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:64 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 64, 0, x13, 2745*FLEN/8, x14, x11, x12)

inst_938:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x343304 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x4c22d6 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x0fb12d and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f343304; op2val:0xbecc22d6;
op3val:0x7e8fb12d; valaddr_reg:x13; val_offset:2748*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:96 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 96, 0, x13, 2748*FLEN/8, x14, x11, x12)

inst_939:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x343304 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x4c22d6 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x0fb12d and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f343304; op2val:0xbecc22d6;
op3val:0x7e8fb12d; valaddr_reg:x13; val_offset:2751*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:128 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 128, 0, x13, 2751*FLEN/8, x14, x11, x12)

inst_940:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x2b448a and fs2 == 1 and fe2 == 0x82 and fm2 == 0x481dd4 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x05e181 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d2b448a; op2val:0xc1481dd4;
op3val:0x7f05e181; valaddr_reg:x13; val_offset:2754*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 2754*FLEN/8, x14, x11, x12)

inst_941:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x2b448a and fs2 == 1 and fe2 == 0x82 and fm2 == 0x481dd4 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x05e181 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d2b448a; op2val:0xc1481dd4;
op3val:0x7f05e181; valaddr_reg:x13; val_offset:2757*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:32 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 32, 0, x13, 2757*FLEN/8, x14, x11, x12)

inst_942:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x2b448a and fs2 == 1 and fe2 == 0x82 and fm2 == 0x481dd4 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x05e181 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d2b448a; op2val:0xc1481dd4;
op3val:0x7f05e181; valaddr_reg:x13; val_offset:2760*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:64 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 64, 0, x13, 2760*FLEN/8, x14, x11, x12)

inst_943:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x2b448a and fs2 == 1 and fe2 == 0x82 and fm2 == 0x481dd4 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x05e181 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d2b448a; op2val:0xc1481dd4;
op3val:0x7f05e181; valaddr_reg:x13; val_offset:2763*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:96 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 96, 0, x13, 2763*FLEN/8, x14, x11, x12)

inst_944:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x2b448a and fs2 == 1 and fe2 == 0x82 and fm2 == 0x481dd4 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x05e181 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d2b448a; op2val:0xc1481dd4;
op3val:0x7f05e181; valaddr_reg:x13; val_offset:2766*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:128 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 128, 0, x13, 2766*FLEN/8, x14, x11, x12)

inst_945:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x681a8e and fs2 == 1 and fe2 == 0x81 and fm2 == 0x05b2ce and fs3 == 0 and fe3 == 0xfd and fm3 == 0x726fd3 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7de81a8e; op2val:0xc085b2ce;
op3val:0x7ef26fd3; valaddr_reg:x13; val_offset:2769*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 2769*FLEN/8, x14, x11, x12)

inst_946:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x681a8e and fs2 == 1 and fe2 == 0x81 and fm2 == 0x05b2ce and fs3 == 0 and fe3 == 0xfd and fm3 == 0x726fd3 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7de81a8e; op2val:0xc085b2ce;
op3val:0x7ef26fd3; valaddr_reg:x13; val_offset:2772*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:32 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 32, 0, x13, 2772*FLEN/8, x14, x11, x12)

inst_947:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x681a8e and fs2 == 1 and fe2 == 0x81 and fm2 == 0x05b2ce and fs3 == 0 and fe3 == 0xfd and fm3 == 0x726fd3 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7de81a8e; op2val:0xc085b2ce;
op3val:0x7ef26fd3; valaddr_reg:x13; val_offset:2775*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:64 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 64, 0, x13, 2775*FLEN/8, x14, x11, x12)

inst_948:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x681a8e and fs2 == 1 and fe2 == 0x81 and fm2 == 0x05b2ce and fs3 == 0 and fe3 == 0xfd and fm3 == 0x726fd3 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7de81a8e; op2val:0xc085b2ce;
op3val:0x7ef26fd3; valaddr_reg:x13; val_offset:2778*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:96 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 96, 0, x13, 2778*FLEN/8, x14, x11, x12)

inst_949:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x681a8e and fs2 == 1 and fe2 == 0x81 and fm2 == 0x05b2ce and fs3 == 0 and fe3 == 0xfd and fm3 == 0x726fd3 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7de81a8e; op2val:0xc085b2ce;
op3val:0x7ef26fd3; valaddr_reg:x13; val_offset:2781*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:128 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 128, 0, x13, 2781*FLEN/8, x14, x11, x12)

inst_950:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x423e7f and fs2 == 1 and fe2 == 0x7f and fm2 == 0x666020 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x2ecd16 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ec23e7f; op2val:0xbfe66020;
op3val:0x7f2ecd16; valaddr_reg:x13; val_offset:2784*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 2784*FLEN/8, x14, x11, x12)

inst_951:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x423e7f and fs2 == 1 and fe2 == 0x7f and fm2 == 0x666020 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x2ecd16 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ec23e7f; op2val:0xbfe66020;
op3val:0x7f2ecd16; valaddr_reg:x13; val_offset:2787*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:32 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 32, 0, x13, 2787*FLEN/8, x14, x11, x12)

inst_952:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x423e7f and fs2 == 1 and fe2 == 0x7f and fm2 == 0x666020 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x2ecd16 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ec23e7f; op2val:0xbfe66020;
op3val:0x7f2ecd16; valaddr_reg:x13; val_offset:2790*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:64 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 64, 0, x13, 2790*FLEN/8, x14, x11, x12)

inst_953:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x423e7f and fs2 == 1 and fe2 == 0x7f and fm2 == 0x666020 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x2ecd16 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ec23e7f; op2val:0xbfe66020;
op3val:0x7f2ecd16; valaddr_reg:x13; val_offset:2793*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:96 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 96, 0, x13, 2793*FLEN/8, x14, x11, x12)

inst_954:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x423e7f and fs2 == 1 and fe2 == 0x7f and fm2 == 0x666020 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x2ecd16 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ec23e7f; op2val:0xbfe66020;
op3val:0x7f2ecd16; valaddr_reg:x13; val_offset:2796*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:128 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 128, 0, x13, 2796*FLEN/8, x14, x11, x12)

inst_955:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5513fd and fs2 == 1 and fe2 == 0x7f and fm2 == 0x0f38bb and fs3 == 0 and fe3 == 0xfd and fm3 == 0x6e6ac5 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ed513fd; op2val:0xbf8f38bb;
op3val:0x7eee6ac5; valaddr_reg:x13; val_offset:2799*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 2799*FLEN/8, x14, x11, x12)

inst_956:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5513fd and fs2 == 1 and fe2 == 0x7f and fm2 == 0x0f38bb and fs3 == 0 and fe3 == 0xfd and fm3 == 0x6e6ac5 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ed513fd; op2val:0xbf8f38bb;
op3val:0x7eee6ac5; valaddr_reg:x13; val_offset:2802*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:32 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 32, 0, x13, 2802*FLEN/8, x14, x11, x12)

inst_957:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5513fd and fs2 == 1 and fe2 == 0x7f and fm2 == 0x0f38bb and fs3 == 0 and fe3 == 0xfd and fm3 == 0x6e6ac5 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ed513fd; op2val:0xbf8f38bb;
op3val:0x7eee6ac5; valaddr_reg:x13; val_offset:2805*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:64 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 64, 0, x13, 2805*FLEN/8, x14, x11, x12)

inst_958:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5513fd and fs2 == 1 and fe2 == 0x7f and fm2 == 0x0f38bb and fs3 == 0 and fe3 == 0xfd and fm3 == 0x6e6ac5 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ed513fd; op2val:0xbf8f38bb;
op3val:0x7eee6ac5; valaddr_reg:x13; val_offset:2808*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:96 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 96, 0, x13, 2808*FLEN/8, x14, x11, x12)

inst_959:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5513fd and fs2 == 1 and fe2 == 0x7f and fm2 == 0x0f38bb and fs3 == 0 and fe3 == 0xfd and fm3 == 0x6e6ac5 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ed513fd; op2val:0xbf8f38bb;
op3val:0x7eee6ac5; valaddr_reg:x13; val_offset:2811*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:128 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 128, 0, x13, 2811*FLEN/8, x14, x11, x12)

inst_960:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4a2c68 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x061f45 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x53d7e2 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e4a2c68; op2val:0xc0061f45;
op3val:0x7ed3d7e2; valaddr_reg:x13; val_offset:2814*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 2814*FLEN/8, x14, x11, x12)

inst_961:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4a2c68 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x061f45 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x53d7e2 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e4a2c68; op2val:0xc0061f45;
op3val:0x7ed3d7e2; valaddr_reg:x13; val_offset:2817*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:32 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 32, 0, x13, 2817*FLEN/8, x14, x11, x12)

inst_962:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4a2c68 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x061f45 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x53d7e2 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e4a2c68; op2val:0xc0061f45;
op3val:0x7ed3d7e2; valaddr_reg:x13; val_offset:2820*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:64 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 64, 0, x13, 2820*FLEN/8, x14, x11, x12)

inst_963:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4a2c68 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x061f45 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x53d7e2 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e4a2c68; op2val:0xc0061f45;
op3val:0x7ed3d7e2; valaddr_reg:x13; val_offset:2823*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:96 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 96, 0, x13, 2823*FLEN/8, x14, x11, x12)

inst_964:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4a2c68 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x061f45 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x53d7e2 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e4a2c68; op2val:0xc0061f45;
op3val:0x7ed3d7e2; valaddr_reg:x13; val_offset:2826*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:128 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 128, 0, x13, 2826*FLEN/8, x14, x11, x12)

inst_965:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4337d6 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x3cfb09 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x101c70 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e4337d6; op2val:0xc03cfb09;
op3val:0x7f101c70; valaddr_reg:x13; val_offset:2829*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 2829*FLEN/8, x14, x11, x12)

inst_966:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4337d6 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x3cfb09 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x101c70 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e4337d6; op2val:0xc03cfb09;
op3val:0x7f101c70; valaddr_reg:x13; val_offset:2832*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:32 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 32, 0, x13, 2832*FLEN/8, x14, x11, x12)

inst_967:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4337d6 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x3cfb09 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x101c70 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e4337d6; op2val:0xc03cfb09;
op3val:0x7f101c70; valaddr_reg:x13; val_offset:2835*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:64 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 64, 0, x13, 2835*FLEN/8, x14, x11, x12)

inst_968:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4337d6 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x3cfb09 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x101c70 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e4337d6; op2val:0xc03cfb09;
op3val:0x7f101c70; valaddr_reg:x13; val_offset:2838*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:96 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 96, 0, x13, 2838*FLEN/8, x14, x11, x12)

inst_969:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4337d6 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x3cfb09 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x101c70 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e4337d6; op2val:0xc03cfb09;
op3val:0x7f101c70; valaddr_reg:x13; val_offset:2841*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:128 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 128, 0, x13, 2841*FLEN/8, x14, x11, x12)

inst_970:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4686be and fs2 == 1 and fe2 == 0x7d and fm2 == 0x047cf6 and fs3 == 0 and fe3 == 0xfb and fm3 == 0x4d7cc4 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ec686be; op2val:0xbe847cf6;
op3val:0x7dcd7cc4; valaddr_reg:x13; val_offset:2844*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 2844*FLEN/8, x14, x11, x12)

inst_971:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4686be and fs2 == 1 and fe2 == 0x7d and fm2 == 0x047cf6 and fs3 == 0 and fe3 == 0xfb and fm3 == 0x4d7cc4 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ec686be; op2val:0xbe847cf6;
op3val:0x7dcd7cc4; valaddr_reg:x13; val_offset:2847*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:32 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 32, 0, x13, 2847*FLEN/8, x14, x11, x12)

inst_972:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4686be and fs2 == 1 and fe2 == 0x7d and fm2 == 0x047cf6 and fs3 == 0 and fe3 == 0xfb and fm3 == 0x4d7cc4 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ec686be; op2val:0xbe847cf6;
op3val:0x7dcd7cc4; valaddr_reg:x13; val_offset:2850*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:64 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 64, 0, x13, 2850*FLEN/8, x14, x11, x12)

inst_973:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4686be and fs2 == 1 and fe2 == 0x7d and fm2 == 0x047cf6 and fs3 == 0 and fe3 == 0xfb and fm3 == 0x4d7cc4 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ec686be; op2val:0xbe847cf6;
op3val:0x7dcd7cc4; valaddr_reg:x13; val_offset:2853*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:96 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 96, 0, x13, 2853*FLEN/8, x14, x11, x12)

inst_974:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4686be and fs2 == 1 and fe2 == 0x7d and fm2 == 0x047cf6 and fs3 == 0 and fe3 == 0xfb and fm3 == 0x4d7cc4 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ec686be; op2val:0xbe847cf6;
op3val:0x7dcd7cc4; valaddr_reg:x13; val_offset:2856*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:128 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 128, 0, x13, 2856*FLEN/8, x14, x11, x12)

inst_975:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3408e8 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x4ab176 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x0e8bd4 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e3408e8; op2val:0xbfcab176;
op3val:0x7e8e8bd4; valaddr_reg:x13; val_offset:2859*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 2859*FLEN/8, x14, x11, x12)

inst_976:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3408e8 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x4ab176 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x0e8bd4 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e3408e8; op2val:0xbfcab176;
op3val:0x7e8e8bd4; valaddr_reg:x13; val_offset:2862*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:32 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 32, 0, x13, 2862*FLEN/8, x14, x11, x12)

inst_977:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3408e8 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x4ab176 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x0e8bd4 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e3408e8; op2val:0xbfcab176;
op3val:0x7e8e8bd4; valaddr_reg:x13; val_offset:2865*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:64 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 64, 0, x13, 2865*FLEN/8, x14, x11, x12)

inst_978:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3408e8 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x4ab176 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x0e8bd4 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e3408e8; op2val:0xbfcab176;
op3val:0x7e8e8bd4; valaddr_reg:x13; val_offset:2868*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:96 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 96, 0, x13, 2868*FLEN/8, x14, x11, x12)

inst_979:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3408e8 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x4ab176 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x0e8bd4 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e3408e8; op2val:0xbfcab176;
op3val:0x7e8e8bd4; valaddr_reg:x13; val_offset:2871*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:128 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 128, 0, x13, 2871*FLEN/8, x14, x11, x12)

inst_980:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0d74e0 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x793bf9 and fs3 == 0 and fe3 == 0xfc and fm3 == 0x09b7d2 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f0d74e0; op2val:0xbe793bf9;
op3val:0x7e09b7d2; valaddr_reg:x13; val_offset:2874*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 2874*FLEN/8, x14, x11, x12)

inst_981:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0d74e0 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x793bf9 and fs3 == 0 and fe3 == 0xfc and fm3 == 0x09b7d2 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f0d74e0; op2val:0xbe793bf9;
op3val:0x7e09b7d2; valaddr_reg:x13; val_offset:2877*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:32 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 32, 0, x13, 2877*FLEN/8, x14, x11, x12)

inst_982:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0d74e0 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x793bf9 and fs3 == 0 and fe3 == 0xfc and fm3 == 0x09b7d2 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f0d74e0; op2val:0xbe793bf9;
op3val:0x7e09b7d2; valaddr_reg:x13; val_offset:2880*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:64 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 64, 0, x13, 2880*FLEN/8, x14, x11, x12)

inst_983:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0d74e0 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x793bf9 and fs3 == 0 and fe3 == 0xfc and fm3 == 0x09b7d2 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f0d74e0; op2val:0xbe793bf9;
op3val:0x7e09b7d2; valaddr_reg:x13; val_offset:2883*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:96 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 96, 0, x13, 2883*FLEN/8, x14, x11, x12)

inst_984:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0d74e0 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x793bf9 and fs3 == 0 and fe3 == 0xfc and fm3 == 0x09b7d2 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f0d74e0; op2val:0xbe793bf9;
op3val:0x7e09b7d2; valaddr_reg:x13; val_offset:2886*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:128 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 128, 0, x13, 2886*FLEN/8, x14, x11, x12)

inst_985:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x08f3f0 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x6b1522 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x7b8677 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f08f3f0; op2val:0xbf6b1522;
op3val:0x7efb8677; valaddr_reg:x13; val_offset:2889*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 2889*FLEN/8, x14, x11, x12)

inst_986:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x08f3f0 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x6b1522 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x7b8677 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f08f3f0; op2val:0xbf6b1522;
op3val:0x7efb8677; valaddr_reg:x13; val_offset:2892*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:32 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 32, 0, x13, 2892*FLEN/8, x14, x11, x12)

inst_987:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x08f3f0 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x6b1522 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x7b8677 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f08f3f0; op2val:0xbf6b1522;
op3val:0x7efb8677; valaddr_reg:x13; val_offset:2895*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:64 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 64, 0, x13, 2895*FLEN/8, x14, x11, x12)

inst_988:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x08f3f0 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x6b1522 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x7b8677 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f08f3f0; op2val:0xbf6b1522;
op3val:0x7efb8677; valaddr_reg:x13; val_offset:2898*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:96 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 96, 0, x13, 2898*FLEN/8, x14, x11, x12)

inst_989:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x08f3f0 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x6b1522 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x7b8677 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f08f3f0; op2val:0xbf6b1522;
op3val:0x7efb8677; valaddr_reg:x13; val_offset:2901*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:128 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 128, 0, x13, 2901*FLEN/8, x14, x11, x12)

inst_990:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x02ef0c and fs2 == 1 and fe2 == 0x81 and fm2 == 0x7abf31 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x003f3c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d82ef0c; op2val:0xc0fabf31;
op3val:0x7f003f3c; valaddr_reg:x13; val_offset:2904*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 2904*FLEN/8, x14, x11, x12)

inst_991:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x02ef0c and fs2 == 1 and fe2 == 0x81 and fm2 == 0x7abf31 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x003f3c and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d82ef0c; op2val:0xc0fabf31;
op3val:0x7f003f3c; valaddr_reg:x13; val_offset:2907*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:32 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 32, 0, x13, 2907*FLEN/8, x14, x11, x12)

inst_992:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x02ef0c and fs2 == 1 and fe2 == 0x81 and fm2 == 0x7abf31 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x003f3c and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d82ef0c; op2val:0xc0fabf31;
op3val:0x7f003f3c; valaddr_reg:x13; val_offset:2910*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:64 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 64, 0, x13, 2910*FLEN/8, x14, x11, x12)

inst_993:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x02ef0c and fs2 == 1 and fe2 == 0x81 and fm2 == 0x7abf31 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x003f3c and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d82ef0c; op2val:0xc0fabf31;
op3val:0x7f003f3c; valaddr_reg:x13; val_offset:2913*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:96 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 96, 0, x13, 2913*FLEN/8, x14, x11, x12)

inst_994:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x02ef0c and fs2 == 1 and fe2 == 0x81 and fm2 == 0x7abf31 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x003f3c and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d82ef0c; op2val:0xc0fabf31;
op3val:0x7f003f3c; valaddr_reg:x13; val_offset:2916*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:128 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 128, 0, x13, 2916*FLEN/8, x14, x11, x12)

inst_995:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0c0cc1 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x2f3018 and fs3 == 0 and fe3 == 0xfb and fm3 == 0x3fae0f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d8c0cc1; op2val:0xbfaf3018;
op3val:0x7dbfae0f; valaddr_reg:x13; val_offset:2919*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 2919*FLEN/8, x14, x11, x12)

inst_996:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0c0cc1 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x2f3018 and fs3 == 0 and fe3 == 0xfb and fm3 == 0x3fae0f and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d8c0cc1; op2val:0xbfaf3018;
op3val:0x7dbfae0f; valaddr_reg:x13; val_offset:2922*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:32 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 32, 0, x13, 2922*FLEN/8, x14, x11, x12)

inst_997:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0c0cc1 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x2f3018 and fs3 == 0 and fe3 == 0xfb and fm3 == 0x3fae0f and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d8c0cc1; op2val:0xbfaf3018;
op3val:0x7dbfae0f; valaddr_reg:x13; val_offset:2925*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:64 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 64, 0, x13, 2925*FLEN/8, x14, x11, x12)

inst_998:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0c0cc1 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x2f3018 and fs3 == 0 and fe3 == 0xfb and fm3 == 0x3fae0f and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d8c0cc1; op2val:0xbfaf3018;
op3val:0x7dbfae0f; valaddr_reg:x13; val_offset:2928*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:96 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 96, 0, x13, 2928*FLEN/8, x14, x11, x12)

inst_999:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0c0cc1 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x2f3018 and fs3 == 0 and fe3 == 0xfb and fm3 == 0x3fae0f and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d8c0cc1; op2val:0xbfaf3018;
op3val:0x7dbfae0f; valaddr_reg:x13; val_offset:2931*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:128 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 128, 0, x13, 2931*FLEN/8, x14, x11, x12)

inst_1000:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x64160b and fs2 == 1 and fe2 == 0x7d and fm2 == 0x4da873 and fs3 == 0 and fe3 == 0xfc and fm3 == 0x373bbc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ee4160b; op2val:0xbecda873;
op3val:0x7e373bbc; valaddr_reg:x13; val_offset:2934*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 2934*FLEN/8, x14, x11, x12)

inst_1001:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x64160b and fs2 == 1 and fe2 == 0x7d and fm2 == 0x4da873 and fs3 == 0 and fe3 == 0xfc and fm3 == 0x373bbc and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ee4160b; op2val:0xbecda873;
op3val:0x7e373bbc; valaddr_reg:x13; val_offset:2937*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:32 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 32, 0, x13, 2937*FLEN/8, x14, x11, x12)

inst_1002:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x64160b and fs2 == 1 and fe2 == 0x7d and fm2 == 0x4da873 and fs3 == 0 and fe3 == 0xfc and fm3 == 0x373bbc and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ee4160b; op2val:0xbecda873;
op3val:0x7e373bbc; valaddr_reg:x13; val_offset:2940*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:64 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 64, 0, x13, 2940*FLEN/8, x14, x11, x12)

inst_1003:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x64160b and fs2 == 1 and fe2 == 0x7d and fm2 == 0x4da873 and fs3 == 0 and fe3 == 0xfc and fm3 == 0x373bbc and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ee4160b; op2val:0xbecda873;
op3val:0x7e373bbc; valaddr_reg:x13; val_offset:2943*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:96 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 96, 0, x13, 2943*FLEN/8, x14, x11, x12)

inst_1004:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x64160b and fs2 == 1 and fe2 == 0x7d and fm2 == 0x4da873 and fs3 == 0 and fe3 == 0xfc and fm3 == 0x373bbc and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ee4160b; op2val:0xbecda873;
op3val:0x7e373bbc; valaddr_reg:x13; val_offset:2946*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:128 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 128, 0, x13, 2946*FLEN/8, x14, x11, x12)

inst_1005:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x285eb2 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x0c4329 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x387fea and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f285eb2; op2val:0xbf0c4329;
op3val:0x7eb87fea; valaddr_reg:x13; val_offset:2949*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 2949*FLEN/8, x14, x11, x12)

inst_1006:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x285eb2 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x0c4329 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x387fea and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f285eb2; op2val:0xbf0c4329;
op3val:0x7eb87fea; valaddr_reg:x13; val_offset:2952*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:32 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 32, 0, x13, 2952*FLEN/8, x14, x11, x12)

inst_1007:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x285eb2 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x0c4329 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x387fea and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f285eb2; op2val:0xbf0c4329;
op3val:0x7eb87fea; valaddr_reg:x13; val_offset:2955*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:64 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 64, 0, x13, 2955*FLEN/8, x14, x11, x12)

inst_1008:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x285eb2 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x0c4329 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x387fea and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f285eb2; op2val:0xbf0c4329;
op3val:0x7eb87fea; valaddr_reg:x13; val_offset:2958*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:96 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 96, 0, x13, 2958*FLEN/8, x14, x11, x12)

inst_1009:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x285eb2 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x0c4329 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x387fea and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f285eb2; op2val:0xbf0c4329;
op3val:0x7eb87fea; valaddr_reg:x13; val_offset:2961*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:128 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 128, 0, x13, 2961*FLEN/8, x14, x11, x12)

inst_1010:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7848a8 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x1dac69 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x18ebc6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e7848a8; op2val:0xc01dac69;
op3val:0x7f18ebc6; valaddr_reg:x13; val_offset:2964*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 2964*FLEN/8, x14, x11, x12)

inst_1011:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7848a8 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x1dac69 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x18ebc6 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e7848a8; op2val:0xc01dac69;
op3val:0x7f18ebc6; valaddr_reg:x13; val_offset:2967*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:32 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 32, 0, x13, 2967*FLEN/8, x14, x11, x12)

inst_1012:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7848a8 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x1dac69 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x18ebc6 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e7848a8; op2val:0xc01dac69;
op3val:0x7f18ebc6; valaddr_reg:x13; val_offset:2970*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:64 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 64, 0, x13, 2970*FLEN/8, x14, x11, x12)

inst_1013:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7848a8 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x1dac69 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x18ebc6 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e7848a8; op2val:0xc01dac69;
op3val:0x7f18ebc6; valaddr_reg:x13; val_offset:2973*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:96 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 96, 0, x13, 2973*FLEN/8, x14, x11, x12)

inst_1014:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7848a8 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x1dac69 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x18ebc6 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e7848a8; op2val:0xc01dac69;
op3val:0x7f18ebc6; valaddr_reg:x13; val_offset:2976*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:128 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 128, 0, x13, 2976*FLEN/8, x14, x11, x12)

inst_1015:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x35021c and fs2 == 1 and fe2 == 0x83 and fm2 == 0x44df55 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x0b3386 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7cb5021c; op2val:0xc1c4df55;
op3val:0x7f0b3386; valaddr_reg:x13; val_offset:2979*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 2979*FLEN/8, x14, x11, x12)

inst_1016:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x35021c and fs2 == 1 and fe2 == 0x83 and fm2 == 0x44df55 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x0b3386 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7cb5021c; op2val:0xc1c4df55;
op3val:0x7f0b3386; valaddr_reg:x13; val_offset:2982*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:32 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 32, 0, x13, 2982*FLEN/8, x14, x11, x12)

inst_1017:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x35021c and fs2 == 1 and fe2 == 0x83 and fm2 == 0x44df55 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x0b3386 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7cb5021c; op2val:0xc1c4df55;
op3val:0x7f0b3386; valaddr_reg:x13; val_offset:2985*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:64 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 64, 0, x13, 2985*FLEN/8, x14, x11, x12)

inst_1018:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x35021c and fs2 == 1 and fe2 == 0x83 and fm2 == 0x44df55 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x0b3386 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7cb5021c; op2val:0xc1c4df55;
op3val:0x7f0b3386; valaddr_reg:x13; val_offset:2988*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:96 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 96, 0, x13, 2988*FLEN/8, x14, x11, x12)

inst_1019:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x35021c and fs2 == 1 and fe2 == 0x83 and fm2 == 0x44df55 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x0b3386 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7cb5021c; op2val:0xc1c4df55;
op3val:0x7f0b3386; valaddr_reg:x13; val_offset:2991*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:128 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 128, 0, x13, 2991*FLEN/8, x14, x11, x12)

inst_1020:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x24d74d and fs2 == 1 and fe2 == 0x80 and fm2 == 0x33dcc2 and fs3 == 0 and fe3 == 0xfb and fm3 == 0x67a163 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d24d74d; op2val:0xc033dcc2;
op3val:0x7de7a163; valaddr_reg:x13; val_offset:2994*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 2994*FLEN/8, x14, x11, x12)

inst_1021:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x24d74d and fs2 == 1 and fe2 == 0x80 and fm2 == 0x33dcc2 and fs3 == 0 and fe3 == 0xfb and fm3 == 0x67a163 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d24d74d; op2val:0xc033dcc2;
op3val:0x7de7a163; valaddr_reg:x13; val_offset:2997*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:32 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 32, 0, x13, 2997*FLEN/8, x14, x11, x12)

inst_1022:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x24d74d and fs2 == 1 and fe2 == 0x80 and fm2 == 0x33dcc2 and fs3 == 0 and fe3 == 0xfb and fm3 == 0x67a163 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d24d74d; op2val:0xc033dcc2;
op3val:0x7de7a163; valaddr_reg:x13; val_offset:3000*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:64 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 64, 0, x13, 3000*FLEN/8, x14, x11, x12)

inst_1023:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x24d74d and fs2 == 1 and fe2 == 0x80 and fm2 == 0x33dcc2 and fs3 == 0 and fe3 == 0xfb and fm3 == 0x67a163 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d24d74d; op2val:0xc033dcc2;
op3val:0x7de7a163; valaddr_reg:x13; val_offset:3003*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:96 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 96, 0, x13, 3003*FLEN/8, x14, x11, x12)

inst_1024:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x24d74d and fs2 == 1 and fe2 == 0x80 and fm2 == 0x33dcc2 and fs3 == 0 and fe3 == 0xfb and fm3 == 0x67a163 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d24d74d; op2val:0xc033dcc2;
op3val:0x7de7a163; valaddr_reg:x13; val_offset:3006*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:128 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 128, 0, x13, 3006*FLEN/8, x14, x11, x12)

inst_1025:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x36cabd and fs2 == 1 and fe2 == 0x7e and fm2 == 0x3725f9 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x02c60b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f36cabd; op2val:0xbf3725f9;
op3val:0x7f02c60b; valaddr_reg:x13; val_offset:3009*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 3009*FLEN/8, x14, x11, x12)

inst_1026:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x36cabd and fs2 == 1 and fe2 == 0x7e and fm2 == 0x3725f9 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x02c60b and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f36cabd; op2val:0xbf3725f9;
op3val:0x7f02c60b; valaddr_reg:x13; val_offset:3012*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:32 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 32, 0, x13, 3012*FLEN/8, x14, x11, x12)

inst_1027:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x36cabd and fs2 == 1 and fe2 == 0x7e and fm2 == 0x3725f9 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x02c60b and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f36cabd; op2val:0xbf3725f9;
op3val:0x7f02c60b; valaddr_reg:x13; val_offset:3015*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:64 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 64, 0, x13, 3015*FLEN/8, x14, x11, x12)

inst_1028:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x36cabd and fs2 == 1 and fe2 == 0x7e and fm2 == 0x3725f9 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x02c60b and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f36cabd; op2val:0xbf3725f9;
op3val:0x7f02c60b; valaddr_reg:x13; val_offset:3018*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:96 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 96, 0, x13, 3018*FLEN/8, x14, x11, x12)

inst_1029:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x36cabd and fs2 == 1 and fe2 == 0x7e and fm2 == 0x3725f9 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x02c60b and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f36cabd; op2val:0xbf3725f9;
op3val:0x7f02c60b; valaddr_reg:x13; val_offset:3021*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:128 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 128, 0, x13, 3021*FLEN/8, x14, x11, x12)

inst_1030:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2b54e3 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x0533df and fs3 == 0 and fe3 == 0xfb and fm3 == 0x324ba2 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e2b54e3; op2val:0xbf0533df;
op3val:0x7db24ba2; valaddr_reg:x13; val_offset:3024*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 3024*FLEN/8, x14, x11, x12)

inst_1031:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2b54e3 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x0533df and fs3 == 0 and fe3 == 0xfb and fm3 == 0x324ba2 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e2b54e3; op2val:0xbf0533df;
op3val:0x7db24ba2; valaddr_reg:x13; val_offset:3027*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:32 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 32, 0, x13, 3027*FLEN/8, x14, x11, x12)

inst_1032:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2b54e3 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x0533df and fs3 == 0 and fe3 == 0xfb and fm3 == 0x324ba2 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e2b54e3; op2val:0xbf0533df;
op3val:0x7db24ba2; valaddr_reg:x13; val_offset:3030*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:64 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 64, 0, x13, 3030*FLEN/8, x14, x11, x12)

inst_1033:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2b54e3 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x0533df and fs3 == 0 and fe3 == 0xfb and fm3 == 0x324ba2 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e2b54e3; op2val:0xbf0533df;
op3val:0x7db24ba2; valaddr_reg:x13; val_offset:3033*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:96 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 96, 0, x13, 3033*FLEN/8, x14, x11, x12)

inst_1034:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2b54e3 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x0533df and fs3 == 0 and fe3 == 0xfb and fm3 == 0x324ba2 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e2b54e3; op2val:0xbf0533df;
op3val:0x7db24ba2; valaddr_reg:x13; val_offset:3036*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:128 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 128, 0, x13, 3036*FLEN/8, x14, x11, x12)

inst_1035:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3ac206 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x2f08f3 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x7f6253 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f3ac206; op2val:0xbf2f08f3;
op3val:0x7eff6253; valaddr_reg:x13; val_offset:3039*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 3039*FLEN/8, x14, x11, x12)

inst_1036:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3ac206 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x2f08f3 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x7f6253 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f3ac206; op2val:0xbf2f08f3;
op3val:0x7eff6253; valaddr_reg:x13; val_offset:3042*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:32 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 32, 0, x13, 3042*FLEN/8, x14, x11, x12)

inst_1037:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3ac206 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x2f08f3 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x7f6253 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f3ac206; op2val:0xbf2f08f3;
op3val:0x7eff6253; valaddr_reg:x13; val_offset:3045*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:64 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 64, 0, x13, 3045*FLEN/8, x14, x11, x12)

inst_1038:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3ac206 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x2f08f3 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x7f6253 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f3ac206; op2val:0xbf2f08f3;
op3val:0x7eff6253; valaddr_reg:x13; val_offset:3048*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:96 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 96, 0, x13, 3048*FLEN/8, x14, x11, x12)

inst_1039:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3ac206 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x2f08f3 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x7f6253 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f3ac206; op2val:0xbf2f08f3;
op3val:0x7eff6253; valaddr_reg:x13; val_offset:3051*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:128 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 128, 0, x13, 3051*FLEN/8, x14, x11, x12)

inst_1040:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1d8df1 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x2e68c6 and fs3 == 0 and fe3 == 0xfb and fm3 == 0x56adeb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f1d8df1; op2val:0xbe2e68c6;
op3val:0x7dd6adeb; valaddr_reg:x13; val_offset:3054*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 3054*FLEN/8, x14, x11, x12)

inst_1041:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1d8df1 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x2e68c6 and fs3 == 0 and fe3 == 0xfb and fm3 == 0x56adeb and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f1d8df1; op2val:0xbe2e68c6;
op3val:0x7dd6adeb; valaddr_reg:x13; val_offset:3057*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:32 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 32, 0, x13, 3057*FLEN/8, x14, x11, x12)

inst_1042:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1d8df1 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x2e68c6 and fs3 == 0 and fe3 == 0xfb and fm3 == 0x56adeb and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f1d8df1; op2val:0xbe2e68c6;
op3val:0x7dd6adeb; valaddr_reg:x13; val_offset:3060*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:64 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 64, 0, x13, 3060*FLEN/8, x14, x11, x12)

inst_1043:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1d8df1 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x2e68c6 and fs3 == 0 and fe3 == 0xfb and fm3 == 0x56adeb and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f1d8df1; op2val:0xbe2e68c6;
op3val:0x7dd6adeb; valaddr_reg:x13; val_offset:3063*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:96 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 96, 0, x13, 3063*FLEN/8, x14, x11, x12)

inst_1044:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1d8df1 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x2e68c6 and fs3 == 0 and fe3 == 0xfb and fm3 == 0x56adeb and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f1d8df1; op2val:0xbe2e68c6;
op3val:0x7dd6adeb; valaddr_reg:x13; val_offset:3066*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:128 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 128, 0, x13, 3066*FLEN/8, x14, x11, x12)

inst_1045:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6fec16 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x112ae8 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x080cef and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7eefec16; op2val:0xbf112ae8;
op3val:0x7e880cef; valaddr_reg:x13; val_offset:3069*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 3069*FLEN/8, x14, x11, x12)
RVTEST_SIGBASE(x11,signature_x11_8)

inst_1046:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6fec16 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x112ae8 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x080cef and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7eefec16; op2val:0xbf112ae8;
op3val:0x7e880cef; valaddr_reg:x13; val_offset:3072*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:32 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 32, 0, x13, 3072*FLEN/8, x14, x11, x12)

inst_1047:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6fec16 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x112ae8 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x080cef and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7eefec16; op2val:0xbf112ae8;
op3val:0x7e880cef; valaddr_reg:x13; val_offset:3075*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:64 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 64, 0, x13, 3075*FLEN/8, x14, x11, x12)

inst_1048:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6fec16 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x112ae8 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x080cef and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7eefec16; op2val:0xbf112ae8;
op3val:0x7e880cef; valaddr_reg:x13; val_offset:3078*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:96 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 96, 0, x13, 3078*FLEN/8, x14, x11, x12)

inst_1049:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6fec16 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x112ae8 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x080cef and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7eefec16; op2val:0xbf112ae8;
op3val:0x7e880cef; valaddr_reg:x13; val_offset:3081*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:128 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 128, 0, x13, 3081*FLEN/8, x14, x11, x12)

inst_1050:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x347e95 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x358230 and fs3 == 0 and fe3 == 0xfc and fm3 == 0x7ff294 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e347e95; op2val:0xbfb58230;
op3val:0x7e7ff294; valaddr_reg:x13; val_offset:3084*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 3084*FLEN/8, x14, x11, x12)

inst_1051:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x347e95 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x358230 and fs3 == 0 and fe3 == 0xfc and fm3 == 0x7ff294 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e347e95; op2val:0xbfb58230;
op3val:0x7e7ff294; valaddr_reg:x13; val_offset:3087*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:32 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 32, 0, x13, 3087*FLEN/8, x14, x11, x12)

inst_1052:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x347e95 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x358230 and fs3 == 0 and fe3 == 0xfc and fm3 == 0x7ff294 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e347e95; op2val:0xbfb58230;
op3val:0x7e7ff294; valaddr_reg:x13; val_offset:3090*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:64 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 64, 0, x13, 3090*FLEN/8, x14, x11, x12)

inst_1053:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x347e95 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x358230 and fs3 == 0 and fe3 == 0xfc and fm3 == 0x7ff294 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e347e95; op2val:0xbfb58230;
op3val:0x7e7ff294; valaddr_reg:x13; val_offset:3093*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:96 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 96, 0, x13, 3093*FLEN/8, x14, x11, x12)

inst_1054:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x347e95 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x358230 and fs3 == 0 and fe3 == 0xfc and fm3 == 0x7ff294 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e347e95; op2val:0xbfb58230;
op3val:0x7e7ff294; valaddr_reg:x13; val_offset:3096*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:128 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 128, 0, x13, 3096*FLEN/8, x14, x11, x12)

inst_1055:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6baecd and fs2 == 1 and fe2 == 0x7e and fm2 == 0x116e97 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x05e3d3 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7eebaecd; op2val:0xbf116e97;
op3val:0x7e85e3d3; valaddr_reg:x13; val_offset:3099*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 3099*FLEN/8, x14, x11, x12)

inst_1056:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6baecd and fs2 == 1 and fe2 == 0x7e and fm2 == 0x116e97 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x05e3d3 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7eebaecd; op2val:0xbf116e97;
op3val:0x7e85e3d3; valaddr_reg:x13; val_offset:3102*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:32 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 32, 0, x13, 3102*FLEN/8, x14, x11, x12)

inst_1057:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6baecd and fs2 == 1 and fe2 == 0x7e and fm2 == 0x116e97 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x05e3d3 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7eebaecd; op2val:0xbf116e97;
op3val:0x7e85e3d3; valaddr_reg:x13; val_offset:3105*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:64 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 64, 0, x13, 3105*FLEN/8, x14, x11, x12)

inst_1058:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6baecd and fs2 == 1 and fe2 == 0x7e and fm2 == 0x116e97 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x05e3d3 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7eebaecd; op2val:0xbf116e97;
op3val:0x7e85e3d3; valaddr_reg:x13; val_offset:3108*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:96 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 96, 0, x13, 3108*FLEN/8, x14, x11, x12)

inst_1059:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6baecd and fs2 == 1 and fe2 == 0x7e and fm2 == 0x116e97 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x05e3d3 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7eebaecd; op2val:0xbf116e97;
op3val:0x7e85e3d3; valaddr_reg:x13; val_offset:3111*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:128 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 128, 0, x13, 3111*FLEN/8, x14, x11, x12)

inst_1060:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x142090 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x351387 and fs3 == 0 and fe3 == 0xfb and fm3 == 0x518ca6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e942090; op2val:0xbeb51387;
op3val:0x7dd18ca6; valaddr_reg:x13; val_offset:3114*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 3114*FLEN/8, x14, x11, x12)

inst_1061:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x142090 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x351387 and fs3 == 0 and fe3 == 0xfb and fm3 == 0x518ca6 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e942090; op2val:0xbeb51387;
op3val:0x7dd18ca6; valaddr_reg:x13; val_offset:3117*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:32 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 32, 0, x13, 3117*FLEN/8, x14, x11, x12)

inst_1062:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x142090 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x351387 and fs3 == 0 and fe3 == 0xfb and fm3 == 0x518ca6 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e942090; op2val:0xbeb51387;
op3val:0x7dd18ca6; valaddr_reg:x13; val_offset:3120*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:64 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 64, 0, x13, 3120*FLEN/8, x14, x11, x12)

inst_1063:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x142090 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x351387 and fs3 == 0 and fe3 == 0xfb and fm3 == 0x518ca6 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e942090; op2val:0xbeb51387;
op3val:0x7dd18ca6; valaddr_reg:x13; val_offset:3123*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:96 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 96, 0, x13, 3123*FLEN/8, x14, x11, x12)

inst_1064:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x142090 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x351387 and fs3 == 0 and fe3 == 0xfb and fm3 == 0x518ca6 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e942090; op2val:0xbeb51387;
op3val:0x7dd18ca6; valaddr_reg:x13; val_offset:3126*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:128 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 128, 0, x13, 3126*FLEN/8, x14, x11, x12)

inst_1065:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1f9240 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x479101 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x78ca25 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f1f9240; op2val:0xbf479101;
op3val:0x7ef8ca25; valaddr_reg:x13; val_offset:3129*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 3129*FLEN/8, x14, x11, x12)

inst_1066:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1f9240 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x479101 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x78ca25 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f1f9240; op2val:0xbf479101;
op3val:0x7ef8ca25; valaddr_reg:x13; val_offset:3132*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:32 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 32, 0, x13, 3132*FLEN/8, x14, x11, x12)

inst_1067:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1f9240 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x479101 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x78ca25 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f1f9240; op2val:0xbf479101;
op3val:0x7ef8ca25; valaddr_reg:x13; val_offset:3135*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:64 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 64, 0, x13, 3135*FLEN/8, x14, x11, x12)

inst_1068:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1f9240 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x479101 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x78ca25 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f1f9240; op2val:0xbf479101;
op3val:0x7ef8ca25; valaddr_reg:x13; val_offset:3138*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:96 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 96, 0, x13, 3138*FLEN/8, x14, x11, x12)

inst_1069:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1f9240 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x479101 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x78ca25 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f1f9240; op2val:0xbf479101;
op3val:0x7ef8ca25; valaddr_reg:x13; val_offset:3141*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:128 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 128, 0, x13, 3141*FLEN/8, x14, x11, x12)

inst_1070:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1a76f0 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x09e8f2 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x266c69 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f1a76f0; op2val:0xbf09e8f2;
op3val:0x7ea66c69; valaddr_reg:x13; val_offset:3144*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 3144*FLEN/8, x14, x11, x12)

inst_1071:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1a76f0 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x09e8f2 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x266c69 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f1a76f0; op2val:0xbf09e8f2;
op3val:0x7ea66c69; valaddr_reg:x13; val_offset:3147*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:32 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 32, 0, x13, 3147*FLEN/8, x14, x11, x12)

inst_1072:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1a76f0 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x09e8f2 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x266c69 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f1a76f0; op2val:0xbf09e8f2;
op3val:0x7ea66c69; valaddr_reg:x13; val_offset:3150*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:64 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 64, 0, x13, 3150*FLEN/8, x14, x11, x12)

inst_1073:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1a76f0 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x09e8f2 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x266c69 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f1a76f0; op2val:0xbf09e8f2;
op3val:0x7ea66c69; valaddr_reg:x13; val_offset:3153*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:96 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 96, 0, x13, 3153*FLEN/8, x14, x11, x12)

inst_1074:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1a76f0 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x09e8f2 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x266c69 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f1a76f0; op2val:0xbf09e8f2;
op3val:0x7ea66c69; valaddr_reg:x13; val_offset:3156*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:128 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 128, 0, x13, 3156*FLEN/8, x14, x11, x12)

inst_1075:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2380ab and fs2 == 1 and fe2 == 0x7e and fm2 == 0x1b9155 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x46b774 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f2380ab; op2val:0xbf1b9155;
op3val:0x7ec6b774; valaddr_reg:x13; val_offset:3159*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 3159*FLEN/8, x14, x11, x12)

inst_1076:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2380ab and fs2 == 1 and fe2 == 0x7e and fm2 == 0x1b9155 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x46b774 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f2380ab; op2val:0xbf1b9155;
op3val:0x7ec6b774; valaddr_reg:x13; val_offset:3162*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:32 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 32, 0, x13, 3162*FLEN/8, x14, x11, x12)

inst_1077:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2380ab and fs2 == 1 and fe2 == 0x7e and fm2 == 0x1b9155 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x46b774 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f2380ab; op2val:0xbf1b9155;
op3val:0x7ec6b774; valaddr_reg:x13; val_offset:3165*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:64 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 64, 0, x13, 3165*FLEN/8, x14, x11, x12)

inst_1078:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2380ab and fs2 == 1 and fe2 == 0x7e and fm2 == 0x1b9155 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x46b774 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f2380ab; op2val:0xbf1b9155;
op3val:0x7ec6b774; valaddr_reg:x13; val_offset:3168*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:96 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 96, 0, x13, 3168*FLEN/8, x14, x11, x12)

inst_1079:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2380ab and fs2 == 1 and fe2 == 0x7e and fm2 == 0x1b9155 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x46b774 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f2380ab; op2val:0xbf1b9155;
op3val:0x7ec6b774; valaddr_reg:x13; val_offset:3171*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:128 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 128, 0, x13, 3171*FLEN/8, x14, x11, x12)

inst_1080:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x639195 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x77a223 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x5c2198 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ee39195; op2val:0xbf77a223;
op3val:0x7edc2198; valaddr_reg:x13; val_offset:3174*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 3174*FLEN/8, x14, x11, x12)

inst_1081:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x639195 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x77a223 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x5c2198 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ee39195; op2val:0xbf77a223;
op3val:0x7edc2198; valaddr_reg:x13; val_offset:3177*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:32 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 32, 0, x13, 3177*FLEN/8, x14, x11, x12)

inst_1082:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x639195 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x77a223 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x5c2198 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ee39195; op2val:0xbf77a223;
op3val:0x7edc2198; valaddr_reg:x13; val_offset:3180*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:64 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 64, 0, x13, 3180*FLEN/8, x14, x11, x12)

inst_1083:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x639195 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x77a223 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x5c2198 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ee39195; op2val:0xbf77a223;
op3val:0x7edc2198; valaddr_reg:x13; val_offset:3183*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:96 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 96, 0, x13, 3183*FLEN/8, x14, x11, x12)

inst_1084:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x639195 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x77a223 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x5c2198 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ee39195; op2val:0xbf77a223;
op3val:0x7edc2198; valaddr_reg:x13; val_offset:3186*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:128 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 128, 0, x13, 3186*FLEN/8, x14, x11, x12)

inst_1085:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0e1c58 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x08cba3 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x17e034 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f0e1c58; op2val:0xbf08cba3;
op3val:0x7e97e034; valaddr_reg:x13; val_offset:3189*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 3189*FLEN/8, x14, x11, x12)

inst_1086:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0e1c58 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x08cba3 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x17e034 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f0e1c58; op2val:0xbf08cba3;
op3val:0x7e97e034; valaddr_reg:x13; val_offset:3192*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:32 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 32, 0, x13, 3192*FLEN/8, x14, x11, x12)

inst_1087:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0e1c58 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x08cba3 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x17e034 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f0e1c58; op2val:0xbf08cba3;
op3val:0x7e97e034; valaddr_reg:x13; val_offset:3195*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:64 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 64, 0, x13, 3195*FLEN/8, x14, x11, x12)

inst_1088:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0e1c58 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x08cba3 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x17e034 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f0e1c58; op2val:0xbf08cba3;
op3val:0x7e97e034; valaddr_reg:x13; val_offset:3198*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:96 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 96, 0, x13, 3198*FLEN/8, x14, x11, x12)

inst_1089:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0e1c58 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x08cba3 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x17e034 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f0e1c58; op2val:0xbf08cba3;
op3val:0x7e97e034; valaddr_reg:x13; val_offset:3201*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:128 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 128, 0, x13, 3201*FLEN/8, x14, x11, x12)

inst_1090:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x14fd75 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x2f0fd6 and fs3 == 0 and fe3 == 0xf9 and fm3 == 0x4bc4f6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d94fd75; op2val:0xbeaf0fd6;
op3val:0x7ccbc4f6; valaddr_reg:x13; val_offset:3204*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 3204*FLEN/8, x14, x11, x12)

inst_1091:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x14fd75 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x2f0fd6 and fs3 == 0 and fe3 == 0xf9 and fm3 == 0x4bc4f6 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d94fd75; op2val:0xbeaf0fd6;
op3val:0x7ccbc4f6; valaddr_reg:x13; val_offset:3207*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:32 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 32, 0, x13, 3207*FLEN/8, x14, x11, x12)

inst_1092:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x14fd75 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x2f0fd6 and fs3 == 0 and fe3 == 0xf9 and fm3 == 0x4bc4f6 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d94fd75; op2val:0xbeaf0fd6;
op3val:0x7ccbc4f6; valaddr_reg:x13; val_offset:3210*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:64 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 64, 0, x13, 3210*FLEN/8, x14, x11, x12)

inst_1093:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x14fd75 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x2f0fd6 and fs3 == 0 and fe3 == 0xf9 and fm3 == 0x4bc4f6 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d94fd75; op2val:0xbeaf0fd6;
op3val:0x7ccbc4f6; valaddr_reg:x13; val_offset:3213*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:96 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 96, 0, x13, 3213*FLEN/8, x14, x11, x12)

inst_1094:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x14fd75 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x2f0fd6 and fs3 == 0 and fe3 == 0xf9 and fm3 == 0x4bc4f6 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7d94fd75; op2val:0xbeaf0fd6;
op3val:0x7ccbc4f6; valaddr_reg:x13; val_offset:3216*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:128 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 128, 0, x13, 3216*FLEN/8, x14, x11, x12)

inst_1095:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1b72ef and fs2 == 1 and fe2 == 0x7c and fm2 == 0x4798e7 and fs3 == 0 and fe3 == 0xf9 and fm3 == 0x726661 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e1b72ef; op2val:0xbe4798e7;
op3val:0x7cf26661; valaddr_reg:x13; val_offset:3219*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 3219*FLEN/8, x14, x11, x12)

inst_1096:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1b72ef and fs2 == 1 and fe2 == 0x7c and fm2 == 0x4798e7 and fs3 == 0 and fe3 == 0xf9 and fm3 == 0x726661 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e1b72ef; op2val:0xbe4798e7;
op3val:0x7cf26661; valaddr_reg:x13; val_offset:3222*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:32 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 32, 0, x13, 3222*FLEN/8, x14, x11, x12)

inst_1097:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1b72ef and fs2 == 1 and fe2 == 0x7c and fm2 == 0x4798e7 and fs3 == 0 and fe3 == 0xf9 and fm3 == 0x726661 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e1b72ef; op2val:0xbe4798e7;
op3val:0x7cf26661; valaddr_reg:x13; val_offset:3225*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:64 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 64, 0, x13, 3225*FLEN/8, x14, x11, x12)

inst_1098:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1b72ef and fs2 == 1 and fe2 == 0x7c and fm2 == 0x4798e7 and fs3 == 0 and fe3 == 0xf9 and fm3 == 0x726661 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e1b72ef; op2val:0xbe4798e7;
op3val:0x7cf26661; valaddr_reg:x13; val_offset:3228*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:96 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 96, 0, x13, 3228*FLEN/8, x14, x11, x12)

inst_1099:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1b72ef and fs2 == 1 and fe2 == 0x7c and fm2 == 0x4798e7 and fs3 == 0 and fe3 == 0xf9 and fm3 == 0x726661 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7e1b72ef; op2val:0xbe4798e7;
op3val:0x7cf26661; valaddr_reg:x13; val_offset:3231*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:128 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 128, 0, x13, 3231*FLEN/8, x14, x11, x12)

inst_1100:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2abcc7 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x0a77e2 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x38b371 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f2abcc7; op2val:0xbf0a77e2;
op3val:0x7eb8b371; valaddr_reg:x13; val_offset:3234*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 3234*FLEN/8, x14, x11, x12)

inst_1101:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2abcc7 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x0a77e2 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x38b371 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f2abcc7; op2val:0xbf0a77e2;
op3val:0x7eb8b371; valaddr_reg:x13; val_offset:3237*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:32 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 32, 0, x13, 3237*FLEN/8, x14, x11, x12)

inst_1102:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2abcc7 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x0a77e2 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x38b371 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f2abcc7; op2val:0xbf0a77e2;
op3val:0x7eb8b371; valaddr_reg:x13; val_offset:3240*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:64 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 64, 0, x13, 3240*FLEN/8, x14, x11, x12)

inst_1103:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2abcc7 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x0a77e2 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x38b371 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f2abcc7; op2val:0xbf0a77e2;
op3val:0x7eb8b371; valaddr_reg:x13; val_offset:3243*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:96 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 96, 0, x13, 3243*FLEN/8, x14, x11, x12)

inst_1104:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2abcc7 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x0a77e2 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x38b371 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f2abcc7; op2val:0xbf0a77e2;
op3val:0x7eb8b371; valaddr_reg:x13; val_offset:3246*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:128 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 128, 0, x13, 3246*FLEN/8, x14, x11, x12)

inst_1105:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x11fc97 and fs2 == 1 and fe2 == 0x74 and fm2 == 0x179248 and fs3 == 0 and fe3 == 0xf3 and fm3 == 0x2cded1 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f11fc97; op2val:0xba179248;
op3val:0x79acded1; valaddr_reg:x13; val_offset:3249*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 3249*FLEN/8, x14, x11, x12)

inst_1106:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x11fc97 and fs2 == 1 and fe2 == 0x74 and fm2 == 0x179248 and fs3 == 0 and fe3 == 0xf3 and fm3 == 0x2cded1 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f11fc97; op2val:0xba179248;
op3val:0x79acded1; valaddr_reg:x13; val_offset:3252*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:32 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 32, 0, x13, 3252*FLEN/8, x14, x11, x12)

inst_1107:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x11fc97 and fs2 == 1 and fe2 == 0x74 and fm2 == 0x179248 and fs3 == 0 and fe3 == 0xf3 and fm3 == 0x2cded1 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f11fc97; op2val:0xba179248;
op3val:0x79acded1; valaddr_reg:x13; val_offset:3255*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:64 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 64, 0, x13, 3255*FLEN/8, x14, x11, x12)

inst_1108:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x11fc97 and fs2 == 1 and fe2 == 0x74 and fm2 == 0x179248 and fs3 == 0 and fe3 == 0xf3 and fm3 == 0x2cded1 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f11fc97; op2val:0xba179248;
op3val:0x79acded1; valaddr_reg:x13; val_offset:3258*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:96 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 96, 0, x13, 3258*FLEN/8, x14, x11, x12)

inst_1109:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x11fc97 and fs2 == 1 and fe2 == 0x74 and fm2 == 0x179248 and fs3 == 0 and fe3 == 0xf3 and fm3 == 0x2cded1 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f11fc97; op2val:0xba179248;
op3val:0x79acded1; valaddr_reg:x13; val_offset:3261*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:128 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 128, 0, x13, 3261*FLEN/8, x14, x11, x12)

inst_1110:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x348d37 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x7239df and fs3 == 0 and fe3 == 0xfe and fm3 == 0x2ad64f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7eb48d37; op2val:0xbff239df;
op3val:0x7f2ad64f; valaddr_reg:x13; val_offset:3264*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 3264*FLEN/8, x14, x11, x12)

inst_1111:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x348d37 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x7239df and fs3 == 0 and fe3 == 0xfe and fm3 == 0x2ad64f and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7eb48d37; op2val:0xbff239df;
op3val:0x7f2ad64f; valaddr_reg:x13; val_offset:3267*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:32 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 32, 0, x13, 3267*FLEN/8, x14, x11, x12)

inst_1112:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x348d37 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x7239df and fs3 == 0 and fe3 == 0xfe and fm3 == 0x2ad64f and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7eb48d37; op2val:0xbff239df;
op3val:0x7f2ad64f; valaddr_reg:x13; val_offset:3270*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:64 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 64, 0, x13, 3270*FLEN/8, x14, x11, x12)

inst_1113:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x348d37 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x7239df and fs3 == 0 and fe3 == 0xfe and fm3 == 0x2ad64f and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7eb48d37; op2val:0xbff239df;
op3val:0x7f2ad64f; valaddr_reg:x13; val_offset:3273*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:96 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 96, 0, x13, 3273*FLEN/8, x14, x11, x12)

inst_1114:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x348d37 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x7239df and fs3 == 0 and fe3 == 0xfe and fm3 == 0x2ad64f and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7eb48d37; op2val:0xbff239df;
op3val:0x7f2ad64f; valaddr_reg:x13; val_offset:3276*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:128 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 128, 0, x13, 3276*FLEN/8, x14, x11, x12)

inst_1115:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6ddfec and fs2 == 1 and fe2 == 0x7e and fm2 == 0x31243e and fs3 == 0 and fe3 == 0xfd and fm3 == 0x249980 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7eeddfec; op2val:0xbf31243e;
op3val:0x7ea49980; valaddr_reg:x13; val_offset:3279*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 3279*FLEN/8, x14, x11, x12)

inst_1116:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6ddfec and fs2 == 1 and fe2 == 0x7e and fm2 == 0x31243e and fs3 == 0 and fe3 == 0xfd and fm3 == 0x249980 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7eeddfec; op2val:0xbf31243e;
op3val:0x7ea49980; valaddr_reg:x13; val_offset:3282*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:32 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 32, 0, x13, 3282*FLEN/8, x14, x11, x12)

inst_1117:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6ddfec and fs2 == 1 and fe2 == 0x7e and fm2 == 0x31243e and fs3 == 0 and fe3 == 0xfd and fm3 == 0x249980 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7eeddfec; op2val:0xbf31243e;
op3val:0x7ea49980; valaddr_reg:x13; val_offset:3285*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:64 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 64, 0, x13, 3285*FLEN/8, x14, x11, x12)

inst_1118:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6ddfec and fs2 == 1 and fe2 == 0x7e and fm2 == 0x31243e and fs3 == 0 and fe3 == 0xfd and fm3 == 0x249980 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7eeddfec; op2val:0xbf31243e;
op3val:0x7ea49980; valaddr_reg:x13; val_offset:3288*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:96 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 96, 0, x13, 3288*FLEN/8, x14, x11, x12)

inst_1119:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6ddfec and fs2 == 1 and fe2 == 0x7e and fm2 == 0x31243e and fs3 == 0 and fe3 == 0xfd and fm3 == 0x249980 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7eeddfec; op2val:0xbf31243e;
op3val:0x7ea49980; valaddr_reg:x13; val_offset:3291*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:128 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 128, 0, x13, 3291*FLEN/8, x14, x11, x12)

inst_1120:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6f31b9 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x186e02 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x0e6c50 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7eef31b9; op2val:0xbf986e02;
op3val:0x7f0e6c50; valaddr_reg:x13; val_offset:3294*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 3294*FLEN/8, x14, x11, x12)

inst_1121:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6f31b9 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x186e02 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x0e6c50 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7eef31b9; op2val:0xbf986e02;
op3val:0x7f0e6c50; valaddr_reg:x13; val_offset:3297*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:64 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 64, 0, x13, 3297*FLEN/8, x14, x11, x12)

inst_1122:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6f31b9 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x186e02 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x0e6c50 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7eef31b9; op2val:0xbf986e02;
op3val:0x7f0e6c50; valaddr_reg:x13; val_offset:3300*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:96 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 96, 0, x13, 3300*FLEN/8, x14, x11, x12)

inst_1123:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6f31b9 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x186e02 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x0e6c50 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7eef31b9; op2val:0xbf986e02;
op3val:0x7f0e6c50; valaddr_reg:x13; val_offset:3303*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:128 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 128, 0, x13, 3303*FLEN/8, x14, x11, x12)

inst_1124:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x18ad5a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x17b417 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x34f350 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f18ad5a; op2val:0xbf97b417;
op3val:0x7f34f350; valaddr_reg:x13; val_offset:3306*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 3306*FLEN/8, x14, x11, x12)

inst_1125:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x18ad5a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x17b417 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x34f350 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f18ad5a; op2val:0xbf97b417;
op3val:0x7f34f350; valaddr_reg:x13; val_offset:3309*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:32 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 32, 0, x13, 3309*FLEN/8, x14, x11, x12)

inst_1126:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x18ad5a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x17b417 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x34f350 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f18ad5a; op2val:0xbf97b417;
op3val:0x7f34f350; valaddr_reg:x13; val_offset:3312*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:64 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 64, 0, x13, 3312*FLEN/8, x14, x11, x12)

inst_1127:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x18ad5a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x17b417 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x34f350 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f18ad5a; op2val:0xbf97b417;
op3val:0x7f34f350; valaddr_reg:x13; val_offset:3315*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:96 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 96, 0, x13, 3315*FLEN/8, x14, x11, x12)

inst_1128:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x18ad5a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x17b417 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x34f350 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f18ad5a; op2val:0xbf97b417;
op3val:0x7f34f350; valaddr_reg:x13; val_offset:3318*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:128 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 128, 0, x13, 3318*FLEN/8, x14, x11, x12)

inst_1129:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0e0f7e and fs2 == 1 and fe2 == 0x7f and fm2 == 0x1f8f25 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x31161d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f0e0f7e; op2val:0xbf9f8f25;
op3val:0x7f31161d; valaddr_reg:x13; val_offset:3321*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 3321*FLEN/8, x14, x11, x12)

inst_1130:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0e0f7e and fs2 == 1 and fe2 == 0x7f and fm2 == 0x1f8f25 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x31161d and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f0e0f7e; op2val:0xbf9f8f25;
op3val:0x7f31161d; valaddr_reg:x13; val_offset:3324*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:32 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 32, 0, x13, 3324*FLEN/8, x14, x11, x12)

inst_1131:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x341f5c and fs2 == 1 and fe2 == 0x7e and fm2 == 0x0691ee and fs3 == 0 and fe3 == 0xfc and fm3 == 0x3d5e30 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7eb41f5c; op2val:0xbf0691ee;
op3val:0x7e3d5e30; valaddr_reg:x13; val_offset:3327*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:32 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 32, 0, x13, 3327*FLEN/8, x14, x11, x12)

inst_1132:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x341f5c and fs2 == 1 and fe2 == 0x7e and fm2 == 0x0691ee and fs3 == 0 and fe3 == 0xfc and fm3 == 0x3d5e30 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7eb41f5c; op2val:0xbf0691ee;
op3val:0x7e3d5e30; valaddr_reg:x13; val_offset:3330*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:128 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 128, 0, x13, 3330*FLEN/8, x14, x11, x12)

inst_1133:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x50cddd and fs2 == 1 and fe2 == 0x7f and fm2 == 0x071ab8 and fs3 == 0 and fe3 == 0xfd and fm3 == 0x5c64b6 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ed0cddd; op2val:0xbf871ab8;
op3val:0x7edc64b6; valaddr_reg:x13; val_offset:3333*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:64 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 64, 0, x13, 3333*FLEN/8, x14, x11, x12)

inst_1134:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x2125ab and fs2 == 1 and fe2 == 0x83 and fm2 == 0x0435fb and fs3 == 0 and fe3 == 0xfc and fm3 == 0x2672cf and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7c2125ab; op2val:0xc18435fb;
op3val:0x7e2672cf; valaddr_reg:x13; val_offset:3336*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 3336*FLEN/8, x14, x11, x12)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2129605049,32,FLEN)
NAN_BOXED(2129605049,32,FLEN)
NAN_BOXED(2131651664,32,FLEN)
NAN_BOXED(2129605049,32,FLEN)
NAN_BOXED(3214437890,32,FLEN)
NAN_BOXED(2131651664,32,FLEN)
NAN_BOXED(2129605049,32,FLEN)
NAN_BOXED(2129605049,32,FLEN)
NAN_BOXED(2131651664,32,FLEN)
NAN_BOXED(2129605049,32,FLEN)
NAN_BOXED(3214437890,32,FLEN)
NAN_BOXED(3214437890,32,FLEN)
NAN_BOXED(2129605049,32,FLEN)
NAN_BOXED(3214437890,32,FLEN)
NAN_BOXED(3214437890,32,FLEN)
NAN_BOXED(2132323674,32,FLEN)
NAN_BOXED(2132323674,32,FLEN)
NAN_BOXED(2132323674,32,FLEN)
NAN_BOXED(2132323674,32,FLEN)
NAN_BOXED(2132323674,32,FLEN)
NAN_BOXED(2132323674,32,FLEN)
NAN_BOXED(2132323674,32,FLEN)
NAN_BOXED(3214390295,32,FLEN)
NAN_BOXED(2132323674,32,FLEN)
NAN_BOXED(2132323674,32,FLEN)
NAN_BOXED(3214390295,32,FLEN)
NAN_BOXED(2134176592,32,FLEN)
NAN_BOXED(2132323674,32,FLEN)
NAN_BOXED(3214390295,32,FLEN)
NAN_BOXED(2134176592,32,FLEN)
NAN_BOXED(2131627902,32,FLEN)
NAN_BOXED(3214905125,32,FLEN)
NAN_BOXED(2133923357,32,FLEN)
NAN_BOXED(2131627902,32,FLEN)
NAN_BOXED(3214905125,32,FLEN)
NAN_BOXED(2131627902,32,FLEN)
NAN_BOXED(2131627902,32,FLEN)
NAN_BOXED(3214905125,32,FLEN)
NAN_BOXED(2133923357,32,FLEN)
NAN_BOXED(2131627902,32,FLEN)
NAN_BOXED(3214905125,32,FLEN)
NAN_BOXED(2133923357,32,FLEN)
NAN_BOXED(2131627902,32,FLEN)
NAN_BOXED(3214905125,32,FLEN)
NAN_BOXED(2133923357,32,FLEN)
NAN_BOXED(2092053831,32,FLEN)
NAN_BOXED(3246419114,32,FLEN)
NAN_BOXED(2125646993,32,FLEN)
NAN_BOXED(2092053831,32,FLEN)
NAN_BOXED(3246419114,32,FLEN)
NAN_BOXED(2125646993,32,FLEN)
NAN_BOXED(2092053831,32,FLEN)
NAN_BOXED(3246419114,32,FLEN)
NAN_BOXED(2125646993,32,FLEN)
NAN_BOXED(2092053831,32,FLEN)
NAN_BOXED(3246419114,32,FLEN)
NAN_BOXED(2125646993,32,FLEN)
NAN_BOXED(2092053831,32,FLEN)
NAN_BOXED(3246419114,32,FLEN)
NAN_BOXED(2125646993,32,FLEN)
NAN_BOXED(2134187998,32,FLEN)
NAN_BOXED(3207601396,32,FLEN)
NAN_BOXED(2130261194,32,FLEN)
NAN_BOXED(2134187998,32,FLEN)
NAN_BOXED(3207601396,32,FLEN)
NAN_BOXED(2130261194,32,FLEN)
test_dataset_1:
NAN_BOXED(2134187998,32,FLEN)
NAN_BOXED(3207601396,32,FLEN)
NAN_BOXED(2130261194,32,FLEN)
NAN_BOXED(2134187998,32,FLEN)
NAN_BOXED(3207601396,32,FLEN)
NAN_BOXED(2130261194,32,FLEN)
NAN_BOXED(2134187998,32,FLEN)
NAN_BOXED(3207601396,32,FLEN)
NAN_BOXED(2130261194,32,FLEN)
NAN_BOXED(2133653775,32,FLEN)
NAN_BOXED(3187715243,32,FLEN)
NAN_BOXED(2108547685,32,FLEN)
NAN_BOXED(2133653775,32,FLEN)
NAN_BOXED(3187715243,32,FLEN)
NAN_BOXED(2108547685,32,FLEN)
NAN_BOXED(2133653775,32,FLEN)
NAN_BOXED(3187715243,32,FLEN)
NAN_BOXED(2108547685,32,FLEN)
NAN_BOXED(2133653775,32,FLEN)
NAN_BOXED(3187715243,32,FLEN)
NAN_BOXED(2108547685,32,FLEN)
NAN_BOXED(2133653775,32,FLEN)
NAN_BOXED(3187715243,32,FLEN)
NAN_BOXED(2108547685,32,FLEN)
NAN_BOXED(2125733724,32,FLEN)
NAN_BOXED(3204878830,32,FLEN)
NAN_BOXED(2117951024,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3204878830,32,FLEN)
NAN_BOXED(2117951024,32,FLEN)
NAN_BOXED(2125733724,32,FLEN)
NAN_BOXED(3204878830,32,FLEN)
NAN_BOXED(2117951024,32,FLEN)
NAN_BOXED(2125733724,32,FLEN)
NAN_BOXED(3204878830,32,FLEN)
NAN_BOXED(2117951024,32,FLEN)
NAN_BOXED(2125733724,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2117951024,32,FLEN)
NAN_BOXED(2127613405,32,FLEN)
NAN_BOXED(3213302456,32,FLEN)
NAN_BOXED(2128372918,32,FLEN)
NAN_BOXED(2127613405,32,FLEN)
NAN_BOXED(3213302456,32,FLEN)
NAN_BOXED(2128372918,32,FLEN)
NAN_BOXED(2127613405,32,FLEN)
NAN_BOXED(3213302456,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2127613405,32,FLEN)
NAN_BOXED(3213302456,32,FLEN)
NAN_BOXED(2128372918,32,FLEN)
NAN_BOXED(2127613405,32,FLEN)
NAN_BOXED(3213302456,32,FLEN)
NAN_BOXED(2128372918,32,FLEN)
NAN_BOXED(2082547115,32,FLEN)
NAN_BOXED(3246667259,32,FLEN)
NAN_BOXED(2116448975,32,FLEN)
NAN_BOXED(2082547115,32,FLEN)
NAN_BOXED(3246667259,32,FLEN)
NAN_BOXED(2116448975,32,FLEN)
NAN_BOXED(2082547115,32,FLEN)
NAN_BOXED(3246667259,32,FLEN)
NAN_BOXED(2116448975,32,FLEN)
NAN_BOXED(2082547115,32,FLEN)
NAN_BOXED(3246667259,32,FLEN)
NAN_BOXED(2116448975,32,FLEN)
NAN_BOXED(2082547115,32,FLEN)
NAN_BOXED(3246667259,32,FLEN)
NAN_BOXED(2116448975,32,FLEN)
NAN_BOXED(2119607415,32,FLEN)
NAN_BOXED(3226588826,32,FLEN)
NAN_BOXED(2133848116,32,FLEN)
NAN_BOXED(2119607415,32,FLEN)
NAN_BOXED(3226588826,32,FLEN)
NAN_BOXED(2133848116,32,FLEN)
NAN_BOXED(2119607415,32,FLEN)
NAN_BOXED(3226588826,32,FLEN)
NAN_BOXED(2133848116,32,FLEN)
NAN_BOXED(2119607415,32,FLEN)
NAN_BOXED(3226588826,32,FLEN)
NAN_BOXED(2133848116,32,FLEN)
NAN_BOXED(2119607415,32,FLEN)
NAN_BOXED(3226588826,32,FLEN)
NAN_BOXED(2133848116,32,FLEN)
NAN_BOXED(2131952879,32,FLEN)
NAN_BOXED(3193270288,32,FLEN)
NAN_BOXED(2113218285,32,FLEN)
NAN_BOXED(2131952879,32,FLEN)
NAN_BOXED(3193270288,32,FLEN)
NAN_BOXED(2113218285,32,FLEN)
NAN_BOXED(2131952879,32,FLEN)
NAN_BOXED(3193270288,32,FLEN)
NAN_BOXED(2113218285,32,FLEN)
NAN_BOXED(2131952879,32,FLEN)
NAN_BOXED(3193270288,32,FLEN)
NAN_BOXED(2113218285,32,FLEN)
NAN_BOXED(2131952879,32,FLEN)
NAN_BOXED(3193270288,32,FLEN)
NAN_BOXED(2113218285,32,FLEN)
NAN_BOXED(2132348254,32,FLEN)
NAN_BOXED(3190964748,32,FLEN)
NAN_BOXED(2111120785,32,FLEN)
NAN_BOXED(2132348254,32,FLEN)
NAN_BOXED(3190964748,32,FLEN)
NAN_BOXED(2111120785,32,FLEN)
NAN_BOXED(2132348254,32,FLEN)
NAN_BOXED(3190964748,32,FLEN)
NAN_BOXED(2111120785,32,FLEN)
NAN_BOXED(2132348254,32,FLEN)
NAN_BOXED(3190964748,32,FLEN)
NAN_BOXED(2111120785,32,FLEN)
NAN_BOXED(2132348254,32,FLEN)
NAN_BOXED(3190964748,32,FLEN)
NAN_BOXED(2111120785,32,FLEN)
NAN_BOXED(2129467916,32,FLEN)
NAN_BOXED(3193052950,32,FLEN)
NAN_BOXED(2109905961,32,FLEN)
NAN_BOXED(2129467916,32,FLEN)
NAN_BOXED(3193052950,32,FLEN)
NAN_BOXED(2109905961,32,FLEN)
NAN_BOXED(2129467916,32,FLEN)
NAN_BOXED(3193052950,32,FLEN)
NAN_BOXED(2109905961,32,FLEN)
NAN_BOXED(2129467916,32,FLEN)
NAN_BOXED(3193052950,32,FLEN)
NAN_BOXED(2109905961,32,FLEN)
NAN_BOXED(2129467916,32,FLEN)
NAN_BOXED(3193052950,32,FLEN)
NAN_BOXED(2109905961,32,FLEN)
NAN_BOXED(2058254814,32,FLEN)
NAN_BOXED(3287645236,32,FLEN)
NAN_BOXED(2133282632,32,FLEN)
NAN_BOXED(2058254814,32,FLEN)
NAN_BOXED(3287645236,32,FLEN)
NAN_BOXED(2133282632,32,FLEN)
NAN_BOXED(2058254814,32,FLEN)
NAN_BOXED(3287645236,32,FLEN)
NAN_BOXED(2133282632,32,FLEN)
NAN_BOXED(2058254814,32,FLEN)
NAN_BOXED(3287645236,32,FLEN)
NAN_BOXED(2133282632,32,FLEN)
NAN_BOXED(2058254814,32,FLEN)
NAN_BOXED(3287645236,32,FLEN)
NAN_BOXED(2133282632,32,FLEN)
NAN_BOXED(2116082892,32,FLEN)
NAN_BOXED(3213078153,32,FLEN)
NAN_BOXED(2116386129,32,FLEN)
NAN_BOXED(2116082892,32,FLEN)
NAN_BOXED(3213078153,32,FLEN)
NAN_BOXED(2116386129,32,FLEN)
NAN_BOXED(2116082892,32,FLEN)
NAN_BOXED(3213078153,32,FLEN)
NAN_BOXED(2116386129,32,FLEN)
NAN_BOXED(2116082892,32,FLEN)
NAN_BOXED(3213078153,32,FLEN)
NAN_BOXED(2116386129,32,FLEN)
NAN_BOXED(2116082892,32,FLEN)
NAN_BOXED(3213078153,32,FLEN)
NAN_BOXED(2116386129,32,FLEN)
NAN_BOXED(2134679541,32,FLEN)
NAN_BOXED(3210958120,32,FLEN)
NAN_BOXED(2133295253,32,FLEN)
NAN_BOXED(2134679541,32,FLEN)
NAN_BOXED(3210958120,32,FLEN)
NAN_BOXED(2133295253,32,FLEN)
NAN_BOXED(2134679541,32,FLEN)
NAN_BOXED(3210958120,32,FLEN)
NAN_BOXED(2133295253,32,FLEN)
NAN_BOXED(2134679541,32,FLEN)
NAN_BOXED(3210958120,32,FLEN)
NAN_BOXED(2133295253,32,FLEN)
NAN_BOXED(2134679541,32,FLEN)
NAN_BOXED(3210958120,32,FLEN)
NAN_BOXED(2133295253,32,FLEN)
NAN_BOXED(2120101813,32,FLEN)
NAN_BOXED(3226776231,32,FLEN)
NAN_BOXED(2134416016,32,FLEN)
NAN_BOXED(2120101813,32,FLEN)
NAN_BOXED(3226776231,32,FLEN)
NAN_BOXED(2134416016,32,FLEN)
NAN_BOXED(2120101813,32,FLEN)
NAN_BOXED(3226776231,32,FLEN)
NAN_BOXED(2134416016,32,FLEN)
NAN_BOXED(2120101813,32,FLEN)
NAN_BOXED(3226776231,32,FLEN)
NAN_BOXED(2134416016,32,FLEN)
NAN_BOXED(2120101813,32,FLEN)
NAN_BOXED(3226776231,32,FLEN)
NAN_BOXED(2134416016,32,FLEN)
NAN_BOXED(2127499218,32,FLEN)
NAN_BOXED(3214993149,32,FLEN)
NAN_BOXED(2130846904,32,FLEN)
NAN_BOXED(2127499218,32,FLEN)
NAN_BOXED(3214993149,32,FLEN)
NAN_BOXED(2130846904,32,FLEN)
NAN_BOXED(2127499218,32,FLEN)
NAN_BOXED(3214993149,32,FLEN)
NAN_BOXED(2130846904,32,FLEN)
NAN_BOXED(2127499218,32,FLEN)
NAN_BOXED(3214993149,32,FLEN)
NAN_BOXED(2130846904,32,FLEN)
NAN_BOXED(2127499218,32,FLEN)
NAN_BOXED(3214993149,32,FLEN)
NAN_BOXED(2130846904,32,FLEN)
NAN_BOXED(2115847498,32,FLEN)
NAN_BOXED(3230862030,32,FLEN)
NAN_BOXED(2134158041,32,FLEN)
NAN_BOXED(2115847498,32,FLEN)
NAN_BOXED(3230862030,32,FLEN)
NAN_BOXED(2134158041,32,FLEN)
NAN_BOXED(2115847498,32,FLEN)
NAN_BOXED(3230862030,32,FLEN)
NAN_BOXED(2134158041,32,FLEN)
NAN_BOXED(2115847498,32,FLEN)
NAN_BOXED(3230862030,32,FLEN)
NAN_BOXED(2134158041,32,FLEN)
NAN_BOXED(2115847498,32,FLEN)
NAN_BOXED(3230862030,32,FLEN)
NAN_BOXED(2134158041,32,FLEN)
NAN_BOXED(2131008110,32,FLEN)
NAN_BOXED(3216188245,32,FLEN)
NAN_BOXED(2134480017,32,FLEN)
NAN_BOXED(2131008110,32,FLEN)
NAN_BOXED(3216188245,32,FLEN)
NAN_BOXED(2134480017,32,FLEN)
NAN_BOXED(2131008110,32,FLEN)
NAN_BOXED(3216188245,32,FLEN)
NAN_BOXED(2134480017,32,FLEN)
NAN_BOXED(2131008110,32,FLEN)
NAN_BOXED(3216188245,32,FLEN)
NAN_BOXED(2134480017,32,FLEN)
NAN_BOXED(2131008110,32,FLEN)
NAN_BOXED(3216188245,32,FLEN)
NAN_BOXED(2134480017,32,FLEN)
NAN_BOXED(2133563696,32,FLEN)
NAN_BOXED(3198888701,32,FLEN)
NAN_BOXED(2120579145,32,FLEN)
NAN_BOXED(2133563696,32,FLEN)
NAN_BOXED(3198888701,32,FLEN)
NAN_BOXED(2120579145,32,FLEN)
NAN_BOXED(2133563696,32,FLEN)
NAN_BOXED(3198888701,32,FLEN)
NAN_BOXED(2120579145,32,FLEN)
NAN_BOXED(2133563696,32,FLEN)
NAN_BOXED(3198888701,32,FLEN)
NAN_BOXED(2120579145,32,FLEN)
NAN_BOXED(2133563696,32,FLEN)
NAN_BOXED(3198888701,32,FLEN)
NAN_BOXED(2120579145,32,FLEN)
NAN_BOXED(2123018857,32,FLEN)
NAN_BOXED(3203088305,32,FLEN)
NAN_BOXED(2113857683,32,FLEN)
NAN_BOXED(2123018857,32,FLEN)
NAN_BOXED(3203088305,32,FLEN)
NAN_BOXED(2113857683,32,FLEN)
NAN_BOXED(2123018857,32,FLEN)
NAN_BOXED(3203088305,32,FLEN)
NAN_BOXED(2113857683,32,FLEN)
NAN_BOXED(2123018857,32,FLEN)
NAN_BOXED(3203088305,32,FLEN)
NAN_BOXED(2113857683,32,FLEN)
NAN_BOXED(2123018857,32,FLEN)
NAN_BOXED(3203088305,32,FLEN)
NAN_BOXED(2113857683,32,FLEN)
NAN_BOXED(2111818833,32,FLEN)
NAN_BOXED(3202672395,32,FLEN)
NAN_BOXED(2101877747,32,FLEN)
NAN_BOXED(2111818833,32,FLEN)
NAN_BOXED(3202672395,32,FLEN)
NAN_BOXED(2101877747,32,FLEN)
NAN_BOXED(2111818833,32,FLEN)
NAN_BOXED(3202672395,32,FLEN)
NAN_BOXED(2101877747,32,FLEN)
NAN_BOXED(2111818833,32,FLEN)
NAN_BOXED(3202672395,32,FLEN)
NAN_BOXED(2101877747,32,FLEN)
NAN_BOXED(2111818833,32,FLEN)
NAN_BOXED(3202672395,32,FLEN)
NAN_BOXED(2101877747,32,FLEN)
NAN_BOXED(2120708507,32,FLEN)
NAN_BOXED(3221230924,32,FLEN)
NAN_BOXED(2129106975,32,FLEN)
NAN_BOXED(2120708507,32,FLEN)
NAN_BOXED(3221230924,32,FLEN)
NAN_BOXED(2129106975,32,FLEN)
NAN_BOXED(2120708507,32,FLEN)
NAN_BOXED(3221230924,32,FLEN)
NAN_BOXED(2129106975,32,FLEN)
NAN_BOXED(2120708507,32,FLEN)
NAN_BOXED(3221230924,32,FLEN)
NAN_BOXED(2129106975,32,FLEN)
NAN_BOXED(2120708507,32,FLEN)
NAN_BOXED(3221230924,32,FLEN)
NAN_BOXED(2129106975,32,FLEN)
NAN_BOXED(2066106749,32,FLEN)
NAN_BOXED(3276301095,32,FLEN)
NAN_BOXED(2130848210,32,FLEN)
NAN_BOXED(2066106749,32,FLEN)
NAN_BOXED(3276301095,32,FLEN)
NAN_BOXED(2130848210,32,FLEN)
NAN_BOXED(2066106749,32,FLEN)
NAN_BOXED(3276301095,32,FLEN)
NAN_BOXED(2130848210,32,FLEN)
NAN_BOXED(2066106749,32,FLEN)
NAN_BOXED(3276301095,32,FLEN)
NAN_BOXED(2130848210,32,FLEN)
NAN_BOXED(2066106749,32,FLEN)
NAN_BOXED(3276301095,32,FLEN)
NAN_BOXED(2130848210,32,FLEN)
NAN_BOXED(2122432668,32,FLEN)
NAN_BOXED(3211449643,32,FLEN)
NAN_BOXED(2121141300,32,FLEN)
NAN_BOXED(2122432668,32,FLEN)
NAN_BOXED(3211449643,32,FLEN)
NAN_BOXED(2121141300,32,FLEN)
NAN_BOXED(2122432668,32,FLEN)
NAN_BOXED(3211449643,32,FLEN)
NAN_BOXED(2121141300,32,FLEN)
NAN_BOXED(2122432668,32,FLEN)
NAN_BOXED(3211449643,32,FLEN)
NAN_BOXED(2121141300,32,FLEN)
NAN_BOXED(2122432668,32,FLEN)
NAN_BOXED(3211449643,32,FLEN)
NAN_BOXED(2121141300,32,FLEN)
NAN_BOXED(2132617164,32,FLEN)
NAN_BOXED(3205913512,32,FLEN)
NAN_BOXED(2126027564,32,FLEN)
NAN_BOXED(2132617164,32,FLEN)
NAN_BOXED(3205913512,32,FLEN)
NAN_BOXED(2126027564,32,FLEN)
NAN_BOXED(2132617164,32,FLEN)
NAN_BOXED(3205913512,32,FLEN)
NAN_BOXED(2126027564,32,FLEN)
NAN_BOXED(2132617164,32,FLEN)
NAN_BOXED(3205913512,32,FLEN)
NAN_BOXED(2126027564,32,FLEN)
NAN_BOXED(2132617164,32,FLEN)
NAN_BOXED(3205913512,32,FLEN)
NAN_BOXED(2126027564,32,FLEN)
NAN_BOXED(2121434994,32,FLEN)
NAN_BOXED(3217231158,32,FLEN)
NAN_BOXED(2126039472,32,FLEN)
NAN_BOXED(2121434994,32,FLEN)
NAN_BOXED(3217231158,32,FLEN)
NAN_BOXED(2126039472,32,FLEN)
NAN_BOXED(2121434994,32,FLEN)
NAN_BOXED(3217231158,32,FLEN)
NAN_BOXED(2126039472,32,FLEN)
NAN_BOXED(2121434994,32,FLEN)
NAN_BOXED(3217231158,32,FLEN)
NAN_BOXED(2126039472,32,FLEN)
NAN_BOXED(2121434994,32,FLEN)
NAN_BOXED(3217231158,32,FLEN)
NAN_BOXED(2126039472,32,FLEN)
NAN_BOXED(2131184613,32,FLEN)
NAN_BOXED(3181750742,32,FLEN)
NAN_BOXED(2100239194,32,FLEN)
NAN_BOXED(2131184613,32,FLEN)
NAN_BOXED(3181750742,32,FLEN)
NAN_BOXED(2100239194,32,FLEN)
NAN_BOXED(2131184613,32,FLEN)
NAN_BOXED(3181750742,32,FLEN)
NAN_BOXED(2100239194,32,FLEN)
NAN_BOXED(2131184613,32,FLEN)
NAN_BOXED(3181750742,32,FLEN)
NAN_BOXED(2100239194,32,FLEN)
NAN_BOXED(2131184613,32,FLEN)
NAN_BOXED(3181750742,32,FLEN)
NAN_BOXED(2100239194,32,FLEN)
NAN_BOXED(2134587415,32,FLEN)
NAN_BOXED(3166705943,32,FLEN)
NAN_BOXED(2089581675,32,FLEN)
NAN_BOXED(2134587415,32,FLEN)
NAN_BOXED(3166705943,32,FLEN)
NAN_BOXED(2089581675,32,FLEN)
NAN_BOXED(2134587415,32,FLEN)
NAN_BOXED(3166705943,32,FLEN)
NAN_BOXED(2089581675,32,FLEN)
NAN_BOXED(2134587415,32,FLEN)
NAN_BOXED(3166705943,32,FLEN)
NAN_BOXED(2089581675,32,FLEN)
NAN_BOXED(2134587415,32,FLEN)
NAN_BOXED(3166705943,32,FLEN)
NAN_BOXED(2089581675,32,FLEN)
NAN_BOXED(2131752428,32,FLEN)
NAN_BOXED(3213900672,32,FLEN)
NAN_BOXED(2132948885,32,FLEN)
NAN_BOXED(2131752428,32,FLEN)
NAN_BOXED(3213900672,32,FLEN)
NAN_BOXED(2132948885,32,FLEN)
NAN_BOXED(2131752428,32,FLEN)
NAN_BOXED(3213900672,32,FLEN)
NAN_BOXED(2132948885,32,FLEN)
NAN_BOXED(2131752428,32,FLEN)
NAN_BOXED(3213900672,32,FLEN)
NAN_BOXED(2132948885,32,FLEN)
NAN_BOXED(2131752428,32,FLEN)
NAN_BOXED(3213900672,32,FLEN)
NAN_BOXED(2132948885,32,FLEN)
NAN_BOXED(2086536076,32,FLEN)
NAN_BOXED(3257820683,32,FLEN)
NAN_BOXED(2132229865,32,FLEN)
NAN_BOXED(2086536076,32,FLEN)
NAN_BOXED(3257820683,32,FLEN)
NAN_BOXED(2132229865,32,FLEN)
NAN_BOXED(2086536076,32,FLEN)
NAN_BOXED(3257820683,32,FLEN)
NAN_BOXED(2132229865,32,FLEN)
NAN_BOXED(2086536076,32,FLEN)
NAN_BOXED(3257820683,32,FLEN)
NAN_BOXED(2132229865,32,FLEN)
NAN_BOXED(2086536076,32,FLEN)
NAN_BOXED(3257820683,32,FLEN)
NAN_BOXED(2132229865,32,FLEN)
NAN_BOXED(2123144549,32,FLEN)
NAN_BOXED(3217701050,32,FLEN)
NAN_BOXED(2128488118,32,FLEN)
NAN_BOXED(2123144549,32,FLEN)
NAN_BOXED(3217701050,32,FLEN)
NAN_BOXED(2128488118,32,FLEN)
NAN_BOXED(2123144549,32,FLEN)
NAN_BOXED(3217701050,32,FLEN)
NAN_BOXED(2128488118,32,FLEN)
NAN_BOXED(2123144549,32,FLEN)
NAN_BOXED(3217701050,32,FLEN)
NAN_BOXED(2128488118,32,FLEN)
NAN_BOXED(2123144549,32,FLEN)
NAN_BOXED(3217701050,32,FLEN)
NAN_BOXED(2128488118,32,FLEN)
NAN_BOXED(2078219332,32,FLEN)
NAN_BOXED(3232019666,32,FLEN)
NAN_BOXED(2098170803,32,FLEN)
NAN_BOXED(2078219332,32,FLEN)
NAN_BOXED(3232019666,32,FLEN)
NAN_BOXED(2098170803,32,FLEN)
NAN_BOXED(2078219332,32,FLEN)
NAN_BOXED(3232019666,32,FLEN)
NAN_BOXED(2098170803,32,FLEN)
NAN_BOXED(2078219332,32,FLEN)
NAN_BOXED(3232019666,32,FLEN)
NAN_BOXED(2098170803,32,FLEN)
NAN_BOXED(2078219332,32,FLEN)
NAN_BOXED(3232019666,32,FLEN)
NAN_BOXED(2098170803,32,FLEN)
NAN_BOXED(2114646583,32,FLEN)
NAN_BOXED(3232297565,32,FLEN)
NAN_BOXED(2134336768,32,FLEN)
NAN_BOXED(2114646583,32,FLEN)
NAN_BOXED(3232297565,32,FLEN)
NAN_BOXED(2134336768,32,FLEN)
NAN_BOXED(2114646583,32,FLEN)
NAN_BOXED(3232297565,32,FLEN)
NAN_BOXED(2134336768,32,FLEN)
NAN_BOXED(2114646583,32,FLEN)
NAN_BOXED(3232297565,32,FLEN)
NAN_BOXED(2134336768,32,FLEN)
NAN_BOXED(2114646583,32,FLEN)
NAN_BOXED(3232297565,32,FLEN)
NAN_BOXED(2134336768,32,FLEN)
NAN_BOXED(2115431867,32,FLEN)
NAN_BOXED(3228966323,32,FLEN)
NAN_BOXED(2131827188,32,FLEN)
NAN_BOXED(2115431867,32,FLEN)
NAN_BOXED(3228966323,32,FLEN)
NAN_BOXED(2131827188,32,FLEN)
NAN_BOXED(2115431867,32,FLEN)
NAN_BOXED(3228966323,32,FLEN)
NAN_BOXED(2131827188,32,FLEN)
NAN_BOXED(2115431867,32,FLEN)
NAN_BOXED(3228966323,32,FLEN)
NAN_BOXED(2131827188,32,FLEN)
NAN_BOXED(2115431867,32,FLEN)
NAN_BOXED(3228966323,32,FLEN)
NAN_BOXED(2131827188,32,FLEN)
NAN_BOXED(2134015594,32,FLEN)
NAN_BOXED(3212948649,32,FLEN)
NAN_BOXED(2134171478,32,FLEN)
NAN_BOXED(2134015594,32,FLEN)
NAN_BOXED(3212948649,32,FLEN)
NAN_BOXED(2134171478,32,FLEN)
NAN_BOXED(2134015594,32,FLEN)
NAN_BOXED(3212948649,32,FLEN)
NAN_BOXED(2134171478,32,FLEN)
NAN_BOXED(2134015594,32,FLEN)
NAN_BOXED(3212948649,32,FLEN)
NAN_BOXED(2134171478,32,FLEN)
NAN_BOXED(2134015594,32,FLEN)
NAN_BOXED(3212948649,32,FLEN)
NAN_BOXED(2134171478,32,FLEN)
NAN_BOXED(2122595867,32,FLEN)
NAN_BOXED(3213090469,32,FLEN)
NAN_BOXED(2122857879,32,FLEN)
NAN_BOXED(2122595867,32,FLEN)
NAN_BOXED(3213090469,32,FLEN)
NAN_BOXED(2122857879,32,FLEN)
NAN_BOXED(2122595867,32,FLEN)
NAN_BOXED(3213090469,32,FLEN)
NAN_BOXED(2122857879,32,FLEN)
NAN_BOXED(2122595867,32,FLEN)
NAN_BOXED(3213090469,32,FLEN)
NAN_BOXED(2122857879,32,FLEN)
NAN_BOXED(2122595867,32,FLEN)
NAN_BOXED(3213090469,32,FLEN)
NAN_BOXED(2122857879,32,FLEN)
NAN_BOXED(2127133769,32,FLEN)
NAN_BOXED(3216848117,32,FLEN)
NAN_BOXED(2132077168,32,FLEN)
NAN_BOXED(2127133769,32,FLEN)
NAN_BOXED(3216848117,32,FLEN)
NAN_BOXED(2132077168,32,FLEN)
NAN_BOXED(2127133769,32,FLEN)
NAN_BOXED(3216848117,32,FLEN)
NAN_BOXED(2132077168,32,FLEN)
NAN_BOXED(2127133769,32,FLEN)
NAN_BOXED(3216848117,32,FLEN)
NAN_BOXED(2132077168,32,FLEN)
NAN_BOXED(2127133769,32,FLEN)
NAN_BOXED(3216848117,32,FLEN)
NAN_BOXED(2132077168,32,FLEN)
NAN_BOXED(2108028957,32,FLEN)
NAN_BOXED(3235750810,32,FLEN)
NAN_BOXED(2131734850,32,FLEN)
NAN_BOXED(2108028957,32,FLEN)
NAN_BOXED(3235750810,32,FLEN)
NAN_BOXED(2131734850,32,FLEN)
NAN_BOXED(2108028957,32,FLEN)
NAN_BOXED(3235750810,32,FLEN)
NAN_BOXED(2131734850,32,FLEN)
NAN_BOXED(2108028957,32,FLEN)
NAN_BOXED(3235750810,32,FLEN)
NAN_BOXED(2131734850,32,FLEN)
NAN_BOXED(2108028957,32,FLEN)
NAN_BOXED(3235750810,32,FLEN)
NAN_BOXED(2131734850,32,FLEN)
NAN_BOXED(2132349256,32,FLEN)
NAN_BOXED(3213494163,32,FLEN)
NAN_BOXED(2133135281,32,FLEN)
NAN_BOXED(2132349256,32,FLEN)
NAN_BOXED(3213494163,32,FLEN)
NAN_BOXED(2133135281,32,FLEN)
NAN_BOXED(2132349256,32,FLEN)
NAN_BOXED(3213494163,32,FLEN)
NAN_BOXED(2133135281,32,FLEN)
NAN_BOXED(2132349256,32,FLEN)
NAN_BOXED(3213494163,32,FLEN)
NAN_BOXED(2133135281,32,FLEN)
NAN_BOXED(2132349256,32,FLEN)
NAN_BOXED(3213494163,32,FLEN)
NAN_BOXED(2133135281,32,FLEN)
NAN_BOXED(2095124605,32,FLEN)
NAN_BOXED(3251539414,32,FLEN)
NAN_BOXED(2134218744,32,FLEN)
NAN_BOXED(2095124605,32,FLEN)
NAN_BOXED(3251539414,32,FLEN)
NAN_BOXED(2134218744,32,FLEN)
NAN_BOXED(2095124605,32,FLEN)
NAN_BOXED(3251539414,32,FLEN)
NAN_BOXED(2134218744,32,FLEN)
NAN_BOXED(2095124605,32,FLEN)
NAN_BOXED(3251539414,32,FLEN)
NAN_BOXED(2134218744,32,FLEN)
NAN_BOXED(2095124605,32,FLEN)
NAN_BOXED(3251539414,32,FLEN)
NAN_BOXED(2134218744,32,FLEN)
NAN_BOXED(2106330465,32,FLEN)
NAN_BOXED(3228511041,32,FLEN)
NAN_BOXED(2122504232,32,FLEN)
NAN_BOXED(2106330465,32,FLEN)
NAN_BOXED(3228511041,32,FLEN)
NAN_BOXED(2122504232,32,FLEN)
NAN_BOXED(2106330465,32,FLEN)
NAN_BOXED(3228511041,32,FLEN)
NAN_BOXED(2122504232,32,FLEN)
NAN_BOXED(2106330465,32,FLEN)
NAN_BOXED(3228511041,32,FLEN)
NAN_BOXED(2122504232,32,FLEN)
NAN_BOXED(2106330465,32,FLEN)
NAN_BOXED(3228511041,32,FLEN)
NAN_BOXED(2122504232,32,FLEN)
NAN_BOXED(2129301193,32,FLEN)
NAN_BOXED(3217056517,32,FLEN)
NAN_BOXED(2133870033,32,FLEN)
NAN_BOXED(2129301193,32,FLEN)
NAN_BOXED(3217056517,32,FLEN)
NAN_BOXED(2133870033,32,FLEN)
NAN_BOXED(2129301193,32,FLEN)
NAN_BOXED(3217056517,32,FLEN)
NAN_BOXED(2133870033,32,FLEN)
NAN_BOXED(2129301193,32,FLEN)
NAN_BOXED(3217056517,32,FLEN)
NAN_BOXED(2133870033,32,FLEN)
NAN_BOXED(2129301193,32,FLEN)
NAN_BOXED(3217056517,32,FLEN)
NAN_BOXED(2133870033,32,FLEN)
NAN_BOXED(2122484577,32,FLEN)
NAN_BOXED(3224239297,32,FLEN)
NAN_BOXED(2133946920,32,FLEN)
NAN_BOXED(2122484577,32,FLEN)
NAN_BOXED(3224239297,32,FLEN)
NAN_BOXED(2133946920,32,FLEN)
NAN_BOXED(2122484577,32,FLEN)
NAN_BOXED(3224239297,32,FLEN)
NAN_BOXED(2133946920,32,FLEN)
NAN_BOXED(2122484577,32,FLEN)
NAN_BOXED(3224239297,32,FLEN)
NAN_BOXED(2133946920,32,FLEN)
NAN_BOXED(2122484577,32,FLEN)
NAN_BOXED(3224239297,32,FLEN)
NAN_BOXED(2133946920,32,FLEN)
NAN_BOXED(2127648214,32,FLEN)
NAN_BOXED(3205675542,32,FLEN)
NAN_BOXED(2121266749,32,FLEN)
NAN_BOXED(2127648214,32,FLEN)
NAN_BOXED(3205675542,32,FLEN)
NAN_BOXED(2121266749,32,FLEN)
NAN_BOXED(2127648214,32,FLEN)
NAN_BOXED(3205675542,32,FLEN)
NAN_BOXED(2121266749,32,FLEN)
NAN_BOXED(2127648214,32,FLEN)
NAN_BOXED(3205675542,32,FLEN)
NAN_BOXED(2121266749,32,FLEN)
NAN_BOXED(2127648214,32,FLEN)
NAN_BOXED(3205675542,32,FLEN)
NAN_BOXED(2121266749,32,FLEN)
NAN_BOXED(2121485672,32,FLEN)
NAN_BOXED(3205458584,32,FLEN)
NAN_BOXED(2114473356,32,FLEN)
NAN_BOXED(2121485672,32,FLEN)
NAN_BOXED(3205458584,32,FLEN)
NAN_BOXED(2114473356,32,FLEN)
NAN_BOXED(2121485672,32,FLEN)
NAN_BOXED(3205458584,32,FLEN)
NAN_BOXED(2114473356,32,FLEN)
NAN_BOXED(2121485672,32,FLEN)
NAN_BOXED(3205458584,32,FLEN)
NAN_BOXED(2114473356,32,FLEN)
NAN_BOXED(2121485672,32,FLEN)
NAN_BOXED(3205458584,32,FLEN)
NAN_BOXED(2114473356,32,FLEN)
NAN_BOXED(2104506372,32,FLEN)
NAN_BOXED(3220418279,32,FLEN)
NAN_BOXED(2112137547,32,FLEN)
NAN_BOXED(2104506372,32,FLEN)
NAN_BOXED(3220418279,32,FLEN)
NAN_BOXED(2112137547,32,FLEN)
NAN_BOXED(2104506372,32,FLEN)
NAN_BOXED(3220418279,32,FLEN)
NAN_BOXED(2112137547,32,FLEN)
NAN_BOXED(2104506372,32,FLEN)
NAN_BOXED(3220418279,32,FLEN)
NAN_BOXED(2112137547,32,FLEN)
NAN_BOXED(2104506372,32,FLEN)
NAN_BOXED(3220418279,32,FLEN)
NAN_BOXED(2112137547,32,FLEN)
NAN_BOXED(2130989646,32,FLEN)
NAN_BOXED(3216580378,32,FLEN)
NAN_BOXED(2134859549,32,FLEN)
NAN_BOXED(2130989646,32,FLEN)
NAN_BOXED(3216580378,32,FLEN)
NAN_BOXED(2134859549,32,FLEN)
NAN_BOXED(2130989646,32,FLEN)
NAN_BOXED(3216580378,32,FLEN)
NAN_BOXED(2134859549,32,FLEN)
NAN_BOXED(2130989646,32,FLEN)
NAN_BOXED(3216580378,32,FLEN)
NAN_BOXED(2134859549,32,FLEN)
NAN_BOXED(2130989646,32,FLEN)
NAN_BOXED(3216580378,32,FLEN)
NAN_BOXED(2134859549,32,FLEN)
NAN_BOXED(2113412087,32,FLEN)
NAN_BOXED(3197756755,32,FLEN)
NAN_BOXED(2098538233,32,FLEN)
NAN_BOXED(2113412087,32,FLEN)
NAN_BOXED(3197756755,32,FLEN)
NAN_BOXED(2098538233,32,FLEN)
NAN_BOXED(2113412087,32,FLEN)
NAN_BOXED(3197756755,32,FLEN)
NAN_BOXED(2098538233,32,FLEN)
NAN_BOXED(2113412087,32,FLEN)
NAN_BOXED(3197756755,32,FLEN)
NAN_BOXED(2098538233,32,FLEN)
NAN_BOXED(2113412087,32,FLEN)
NAN_BOXED(3197756755,32,FLEN)
NAN_BOXED(2098538233,32,FLEN)
NAN_BOXED(2134733371,32,FLEN)
NAN_BOXED(3205131471,32,FLEN)
NAN_BOXED(2127355956,32,FLEN)
NAN_BOXED(2134733371,32,FLEN)
NAN_BOXED(3205131471,32,FLEN)
NAN_BOXED(2127355956,32,FLEN)
NAN_BOXED(2134733371,32,FLEN)
NAN_BOXED(3205131471,32,FLEN)
NAN_BOXED(2127355956,32,FLEN)
NAN_BOXED(2134733371,32,FLEN)
NAN_BOXED(3205131471,32,FLEN)
NAN_BOXED(2127355956,32,FLEN)
NAN_BOXED(2134733371,32,FLEN)
NAN_BOXED(3205131471,32,FLEN)
NAN_BOXED(2127355956,32,FLEN)
NAN_BOXED(2124143722,32,FLEN)
NAN_BOXED(3205869859,32,FLEN)
NAN_BOXED(2117486149,32,FLEN)
NAN_BOXED(2124143722,32,FLEN)
NAN_BOXED(3205869859,32,FLEN)
NAN_BOXED(2117486149,32,FLEN)
NAN_BOXED(2124143722,32,FLEN)
NAN_BOXED(3205869859,32,FLEN)
NAN_BOXED(2117486149,32,FLEN)
NAN_BOXED(2124143722,32,FLEN)
NAN_BOXED(3205869859,32,FLEN)
NAN_BOXED(2117486149,32,FLEN)
NAN_BOXED(2124143722,32,FLEN)
NAN_BOXED(3205869859,32,FLEN)
NAN_BOXED(2117486149,32,FLEN)
NAN_BOXED(2128876713,32,FLEN)
NAN_BOXED(3216118177,32,FLEN)
NAN_BOXED(2132715027,32,FLEN)
NAN_BOXED(2128876713,32,FLEN)
NAN_BOXED(3216118177,32,FLEN)
NAN_BOXED(2132715027,32,FLEN)
NAN_BOXED(2128876713,32,FLEN)
NAN_BOXED(3216118177,32,FLEN)
NAN_BOXED(2132715027,32,FLEN)
NAN_BOXED(2128876713,32,FLEN)
NAN_BOXED(3216118177,32,FLEN)
NAN_BOXED(2132715027,32,FLEN)
NAN_BOXED(2128876713,32,FLEN)
NAN_BOXED(3216118177,32,FLEN)
NAN_BOXED(2132715027,32,FLEN)
NAN_BOXED(2125396403,32,FLEN)
NAN_BOXED(3211588405,32,FLEN)
NAN_BOXED(2124543085,32,FLEN)
NAN_BOXED(2125396403,32,FLEN)
NAN_BOXED(3211588405,32,FLEN)
NAN_BOXED(2124543085,32,FLEN)
NAN_BOXED(2125396403,32,FLEN)
NAN_BOXED(3211588405,32,FLEN)
NAN_BOXED(2124543085,32,FLEN)
NAN_BOXED(2125396403,32,FLEN)
NAN_BOXED(3211588405,32,FLEN)
NAN_BOXED(2124543085,32,FLEN)
NAN_BOXED(2125396403,32,FLEN)
NAN_BOXED(3211588405,32,FLEN)
NAN_BOXED(2124543085,32,FLEN)
NAN_BOXED(2099978738,32,FLEN)
NAN_BOXED(3246624264,32,FLEN)
NAN_BOXED(2133844643,32,FLEN)
NAN_BOXED(2099978738,32,FLEN)
NAN_BOXED(3246624264,32,FLEN)
NAN_BOXED(2133844643,32,FLEN)
NAN_BOXED(2099978738,32,FLEN)
NAN_BOXED(3246624264,32,FLEN)
NAN_BOXED(2133844643,32,FLEN)
NAN_BOXED(2099978738,32,FLEN)
NAN_BOXED(3246624264,32,FLEN)
NAN_BOXED(2133844643,32,FLEN)
NAN_BOXED(2099978738,32,FLEN)
NAN_BOXED(3246624264,32,FLEN)
NAN_BOXED(2133844643,32,FLEN)
NAN_BOXED(2093550086,32,FLEN)
NAN_BOXED(3245430714,32,FLEN)
NAN_BOXED(2126350165,32,FLEN)
NAN_BOXED(2093550086,32,FLEN)
NAN_BOXED(3245430714,32,FLEN)
NAN_BOXED(2126350165,32,FLEN)
NAN_BOXED(2093550086,32,FLEN)
NAN_BOXED(3245430714,32,FLEN)
NAN_BOXED(2126350165,32,FLEN)
NAN_BOXED(2093550086,32,FLEN)
NAN_BOXED(3245430714,32,FLEN)
NAN_BOXED(2126350165,32,FLEN)
NAN_BOXED(2093550086,32,FLEN)
NAN_BOXED(3245430714,32,FLEN)
NAN_BOXED(2126350165,32,FLEN)
NAN_BOXED(2132867705,32,FLEN)
NAN_BOXED(3189733554,32,FLEN)
NAN_BOXED(2110295789,32,FLEN)
NAN_BOXED(2132867705,32,FLEN)
NAN_BOXED(3189733554,32,FLEN)
NAN_BOXED(2110295789,32,FLEN)
NAN_BOXED(2132867705,32,FLEN)
NAN_BOXED(3189733554,32,FLEN)
NAN_BOXED(2110295789,32,FLEN)
NAN_BOXED(2132867705,32,FLEN)
NAN_BOXED(3189733554,32,FLEN)
NAN_BOXED(2110295789,32,FLEN)
NAN_BOXED(2132867705,32,FLEN)
NAN_BOXED(3189733554,32,FLEN)
NAN_BOXED(2110295789,32,FLEN)
NAN_BOXED(2131524292,32,FLEN)
NAN_BOXED(3215337794,32,FLEN)
NAN_BOXED(2134269055,32,FLEN)
NAN_BOXED(2131524292,32,FLEN)
NAN_BOXED(3215337794,32,FLEN)
NAN_BOXED(2134269055,32,FLEN)
NAN_BOXED(2131524292,32,FLEN)
NAN_BOXED(3215337794,32,FLEN)
NAN_BOXED(2134269055,32,FLEN)
NAN_BOXED(2131524292,32,FLEN)
NAN_BOXED(3215337794,32,FLEN)
NAN_BOXED(2134269055,32,FLEN)
NAN_BOXED(2131524292,32,FLEN)
NAN_BOXED(3215337794,32,FLEN)
NAN_BOXED(2134269055,32,FLEN)
NAN_BOXED(2129793733,32,FLEN)
NAN_BOXED(3214934154,32,FLEN)
NAN_BOXED(2132233278,32,FLEN)
NAN_BOXED(2129793733,32,FLEN)
NAN_BOXED(3214934154,32,FLEN)
NAN_BOXED(2132233278,32,FLEN)
NAN_BOXED(2129793733,32,FLEN)
NAN_BOXED(3214934154,32,FLEN)
NAN_BOXED(2132233278,32,FLEN)
NAN_BOXED(2129793733,32,FLEN)
NAN_BOXED(3214934154,32,FLEN)
NAN_BOXED(2132233278,32,FLEN)
NAN_BOXED(2129793733,32,FLEN)
NAN_BOXED(3214934154,32,FLEN)
NAN_BOXED(2132233278,32,FLEN)
NAN_BOXED(2107885788,32,FLEN)
NAN_BOXED(3229772063,32,FLEN)
NAN_BOXED(2124865155,32,FLEN)
NAN_BOXED(2107885788,32,FLEN)
NAN_BOXED(3229772063,32,FLEN)
NAN_BOXED(2124865155,32,FLEN)
NAN_BOXED(2107885788,32,FLEN)
NAN_BOXED(3229772063,32,FLEN)
NAN_BOXED(2124865155,32,FLEN)
NAN_BOXED(2107885788,32,FLEN)
NAN_BOXED(3229772063,32,FLEN)
NAN_BOXED(2124865155,32,FLEN)
NAN_BOXED(2107885788,32,FLEN)
NAN_BOXED(3229772063,32,FLEN)
NAN_BOXED(2124865155,32,FLEN)
NAN_BOXED(2112175527,32,FLEN)
NAN_BOXED(3233095426,32,FLEN)
NAN_BOXED(2132947035,32,FLEN)
NAN_BOXED(2112175527,32,FLEN)
NAN_BOXED(3233095426,32,FLEN)
NAN_BOXED(2132947035,32,FLEN)
NAN_BOXED(2112175527,32,FLEN)
NAN_BOXED(3233095426,32,FLEN)
NAN_BOXED(2132947035,32,FLEN)
NAN_BOXED(2112175527,32,FLEN)
NAN_BOXED(3233095426,32,FLEN)
NAN_BOXED(2132947035,32,FLEN)
NAN_BOXED(2112175527,32,FLEN)
NAN_BOXED(3233095426,32,FLEN)
NAN_BOXED(2132947035,32,FLEN)
NAN_BOXED(2120379027,32,FLEN)
NAN_BOXED(3217342327,32,FLEN)
NAN_BOXED(2125333232,32,FLEN)
NAN_BOXED(2120379027,32,FLEN)
NAN_BOXED(3217342327,32,FLEN)
NAN_BOXED(2125333232,32,FLEN)
NAN_BOXED(2120379027,32,FLEN)
NAN_BOXED(3217342327,32,FLEN)
NAN_BOXED(2125333232,32,FLEN)
NAN_BOXED(2120379027,32,FLEN)
NAN_BOXED(3217342327,32,FLEN)
NAN_BOXED(2125333232,32,FLEN)
NAN_BOXED(2120379027,32,FLEN)
NAN_BOXED(3217342327,32,FLEN)
NAN_BOXED(2125333232,32,FLEN)
NAN_BOXED(2134891926,32,FLEN)
NAN_BOXED(3210368091,32,FLEN)
NAN_BOXED(2133041643,32,FLEN)
NAN_BOXED(2134891926,32,FLEN)
NAN_BOXED(3210368091,32,FLEN)
NAN_BOXED(2133041643,32,FLEN)
NAN_BOXED(2134891926,32,FLEN)
NAN_BOXED(3210368091,32,FLEN)
NAN_BOXED(2133041643,32,FLEN)
NAN_BOXED(2134891926,32,FLEN)
NAN_BOXED(3210368091,32,FLEN)
NAN_BOXED(2133041643,32,FLEN)
NAN_BOXED(2134891926,32,FLEN)
NAN_BOXED(3210368091,32,FLEN)
NAN_BOXED(2133041643,32,FLEN)
NAN_BOXED(2134598840,32,FLEN)
NAN_BOXED(3203263415,32,FLEN)
NAN_BOXED(2125342923,32,FLEN)
NAN_BOXED(2134598840,32,FLEN)
NAN_BOXED(3203263415,32,FLEN)
NAN_BOXED(2125342923,32,FLEN)
NAN_BOXED(2134598840,32,FLEN)
NAN_BOXED(3203263415,32,FLEN)
NAN_BOXED(2125342923,32,FLEN)
NAN_BOXED(2134598840,32,FLEN)
NAN_BOXED(3203263415,32,FLEN)
NAN_BOXED(2125342923,32,FLEN)
NAN_BOXED(2134598840,32,FLEN)
NAN_BOXED(3203263415,32,FLEN)
NAN_BOXED(2125342923,32,FLEN)
NAN_BOXED(2126214138,32,FLEN)
NAN_BOXED(3216984195,32,FLEN)
NAN_BOXED(2131497121,32,FLEN)
NAN_BOXED(2126214138,32,FLEN)
NAN_BOXED(3216984195,32,FLEN)
NAN_BOXED(2131497121,32,FLEN)
NAN_BOXED(2126214138,32,FLEN)
NAN_BOXED(3216984195,32,FLEN)
NAN_BOXED(2131497121,32,FLEN)
NAN_BOXED(2126214138,32,FLEN)
NAN_BOXED(3216984195,32,FLEN)
NAN_BOXED(2131497121,32,FLEN)
NAN_BOXED(2126214138,32,FLEN)
NAN_BOXED(3216984195,32,FLEN)
NAN_BOXED(2131497121,32,FLEN)
NAN_BOXED(2125984713,32,FLEN)
NAN_BOXED(3206251958,32,FLEN)
NAN_BOXED(2120188255,32,FLEN)
NAN_BOXED(2125984713,32,FLEN)
NAN_BOXED(3206251958,32,FLEN)
NAN_BOXED(2120188255,32,FLEN)
NAN_BOXED(2125984713,32,FLEN)
NAN_BOXED(3206251958,32,FLEN)
NAN_BOXED(2120188255,32,FLEN)
NAN_BOXED(2125984713,32,FLEN)
NAN_BOXED(3206251958,32,FLEN)
NAN_BOXED(2120188255,32,FLEN)
NAN_BOXED(2125984713,32,FLEN)
NAN_BOXED(3206251958,32,FLEN)
NAN_BOXED(2120188255,32,FLEN)
NAN_BOXED(2124090908,32,FLEN)
NAN_BOXED(3199845548,32,FLEN)
NAN_BOXED(2111899812,32,FLEN)
NAN_BOXED(2124090908,32,FLEN)
NAN_BOXED(3199845548,32,FLEN)
NAN_BOXED(2111899812,32,FLEN)
NAN_BOXED(2124090908,32,FLEN)
NAN_BOXED(3199845548,32,FLEN)
NAN_BOXED(2111899812,32,FLEN)
NAN_BOXED(2124090908,32,FLEN)
NAN_BOXED(3199845548,32,FLEN)
NAN_BOXED(2111899812,32,FLEN)
NAN_BOXED(2124090908,32,FLEN)
NAN_BOXED(3199845548,32,FLEN)
NAN_BOXED(2111899812,32,FLEN)
NAN_BOXED(2123416750,32,FLEN)
NAN_BOXED(3223833124,32,FLEN)
NAN_BOXED(2134754618,32,FLEN)
NAN_BOXED(2123416750,32,FLEN)
NAN_BOXED(3223833124,32,FLEN)
NAN_BOXED(2134754618,32,FLEN)
NAN_BOXED(2123416750,32,FLEN)
NAN_BOXED(3223833124,32,FLEN)
NAN_BOXED(2134754618,32,FLEN)
NAN_BOXED(2123416750,32,FLEN)
NAN_BOXED(3223833124,32,FLEN)
NAN_BOXED(2134754618,32,FLEN)
NAN_BOXED(2123416750,32,FLEN)
NAN_BOXED(3223833124,32,FLEN)
NAN_BOXED(2134754618,32,FLEN)
NAN_BOXED(2134395102,32,FLEN)
NAN_BOXED(3207018756,32,FLEN)
NAN_BOXED(2129707305,32,FLEN)
NAN_BOXED(2134395102,32,FLEN)
NAN_BOXED(3207018756,32,FLEN)
NAN_BOXED(2129707305,32,FLEN)
NAN_BOXED(2134395102,32,FLEN)
NAN_BOXED(3207018756,32,FLEN)
NAN_BOXED(2129707305,32,FLEN)
NAN_BOXED(2134395102,32,FLEN)
NAN_BOXED(3207018756,32,FLEN)
NAN_BOXED(2129707305,32,FLEN)
NAN_BOXED(2134395102,32,FLEN)
NAN_BOXED(3207018756,32,FLEN)
NAN_BOXED(2129707305,32,FLEN)
NAN_BOXED(2126495076,32,FLEN)
NAN_BOXED(3207432521,32,FLEN)
NAN_BOXED(2122447312,32,FLEN)
NAN_BOXED(2126495076,32,FLEN)
NAN_BOXED(3207432521,32,FLEN)
NAN_BOXED(2122447312,32,FLEN)
NAN_BOXED(2126495076,32,FLEN)
NAN_BOXED(3207432521,32,FLEN)
NAN_BOXED(2122447312,32,FLEN)
NAN_BOXED(2126495076,32,FLEN)
NAN_BOXED(3207432521,32,FLEN)
NAN_BOXED(2122447312,32,FLEN)
NAN_BOXED(2126495076,32,FLEN)
NAN_BOXED(3207432521,32,FLEN)
NAN_BOXED(2122447312,32,FLEN)
NAN_BOXED(2106124865,32,FLEN)
NAN_BOXED(3225650242,32,FLEN)
NAN_BOXED(2119246425,32,FLEN)
NAN_BOXED(2106124865,32,FLEN)
NAN_BOXED(3225650242,32,FLEN)
NAN_BOXED(2119246425,32,FLEN)
NAN_BOXED(2106124865,32,FLEN)
NAN_BOXED(3225650242,32,FLEN)
NAN_BOXED(2119246425,32,FLEN)
NAN_BOXED(2106124865,32,FLEN)
NAN_BOXED(3225650242,32,FLEN)
NAN_BOXED(2119246425,32,FLEN)
NAN_BOXED(2106124865,32,FLEN)
NAN_BOXED(3225650242,32,FLEN)
NAN_BOXED(2119246425,32,FLEN)
NAN_BOXED(2132157899,32,FLEN)
NAN_BOXED(3213752592,32,FLEN)
NAN_BOXED(2133232075,32,FLEN)
NAN_BOXED(2132157899,32,FLEN)
NAN_BOXED(3213752592,32,FLEN)
NAN_BOXED(2133232075,32,FLEN)
NAN_BOXED(2132157899,32,FLEN)
NAN_BOXED(3213752592,32,FLEN)
NAN_BOXED(2133232075,32,FLEN)
NAN_BOXED(2132157899,32,FLEN)
NAN_BOXED(3213752592,32,FLEN)
NAN_BOXED(2133232075,32,FLEN)
NAN_BOXED(2132157899,32,FLEN)
NAN_BOXED(3213752592,32,FLEN)
NAN_BOXED(2133232075,32,FLEN)
NAN_BOXED(2123022288,32,FLEN)
NAN_BOXED(3221961077,32,FLEN)
NAN_BOXED(2132208276,32,FLEN)
NAN_BOXED(2123022288,32,FLEN)
NAN_BOXED(3221961077,32,FLEN)
NAN_BOXED(2132208276,32,FLEN)
NAN_BOXED(2123022288,32,FLEN)
NAN_BOXED(3221961077,32,FLEN)
NAN_BOXED(2132208276,32,FLEN)
NAN_BOXED(2123022288,32,FLEN)
NAN_BOXED(3221961077,32,FLEN)
NAN_BOXED(2132208276,32,FLEN)
NAN_BOXED(2123022288,32,FLEN)
NAN_BOXED(3221961077,32,FLEN)
NAN_BOXED(2132208276,32,FLEN)
NAN_BOXED(2132068298,32,FLEN)
NAN_BOXED(3211098270,32,FLEN)
NAN_BOXED(2131057873,32,FLEN)
NAN_BOXED(2132068298,32,FLEN)
NAN_BOXED(3211098270,32,FLEN)
NAN_BOXED(2131057873,32,FLEN)
NAN_BOXED(2132068298,32,FLEN)
NAN_BOXED(3211098270,32,FLEN)
NAN_BOXED(2131057873,32,FLEN)
NAN_BOXED(2132068298,32,FLEN)
NAN_BOXED(3211098270,32,FLEN)
NAN_BOXED(2131057873,32,FLEN)
NAN_BOXED(2132068298,32,FLEN)
NAN_BOXED(3211098270,32,FLEN)
NAN_BOXED(2131057873,32,FLEN)
NAN_BOXED(2130639786,32,FLEN)
NAN_BOXED(3214044844,32,FLEN)
NAN_BOXED(2131876290,32,FLEN)
NAN_BOXED(2130639786,32,FLEN)
NAN_BOXED(3214044844,32,FLEN)
NAN_BOXED(2131876290,32,FLEN)
NAN_BOXED(2130639786,32,FLEN)
NAN_BOXED(3214044844,32,FLEN)
NAN_BOXED(2131876290,32,FLEN)
NAN_BOXED(2130639786,32,FLEN)
NAN_BOXED(3214044844,32,FLEN)
NAN_BOXED(2131876290,32,FLEN)
NAN_BOXED(2130639786,32,FLEN)
NAN_BOXED(3214044844,32,FLEN)
NAN_BOXED(2131876290,32,FLEN)
NAN_BOXED(2123075275,32,FLEN)
NAN_BOXED(3220708582,32,FLEN)
NAN_BOXED(2131182102,32,FLEN)
NAN_BOXED(2123075275,32,FLEN)
NAN_BOXED(3220708582,32,FLEN)
NAN_BOXED(2131182102,32,FLEN)
NAN_BOXED(2123075275,32,FLEN)
NAN_BOXED(3220708582,32,FLEN)
NAN_BOXED(2131182102,32,FLEN)
NAN_BOXED(2123075275,32,FLEN)
NAN_BOXED(3220708582,32,FLEN)
NAN_BOXED(2131182102,32,FLEN)
NAN_BOXED(2123075275,32,FLEN)
NAN_BOXED(3220708582,32,FLEN)
NAN_BOXED(2131182102,32,FLEN)
NAN_BOXED(2119676354,32,FLEN)
NAN_BOXED(3218954907,32,FLEN)
NAN_BOXED(2126151884,32,FLEN)
NAN_BOXED(2119676354,32,FLEN)
NAN_BOXED(3218954907,32,FLEN)
NAN_BOXED(2126151884,32,FLEN)
NAN_BOXED(2119676354,32,FLEN)
NAN_BOXED(3218954907,32,FLEN)
NAN_BOXED(2126151884,32,FLEN)
NAN_BOXED(2119676354,32,FLEN)
NAN_BOXED(3218954907,32,FLEN)
NAN_BOXED(2126151884,32,FLEN)
NAN_BOXED(2119676354,32,FLEN)
NAN_BOXED(3218954907,32,FLEN)
NAN_BOXED(2126151884,32,FLEN)
NAN_BOXED(2132003488,32,FLEN)
NAN_BOXED(3211117953,32,FLEN)
NAN_BOXED(2131011143,32,FLEN)
NAN_BOXED(2132003488,32,FLEN)
NAN_BOXED(3211117953,32,FLEN)
NAN_BOXED(2131011143,32,FLEN)
NAN_BOXED(2132003488,32,FLEN)
NAN_BOXED(3211117953,32,FLEN)
NAN_BOXED(2131011143,32,FLEN)
NAN_BOXED(2132003488,32,FLEN)
NAN_BOXED(3211117953,32,FLEN)
NAN_BOXED(2131011143,32,FLEN)
NAN_BOXED(2132003488,32,FLEN)
NAN_BOXED(3211117953,32,FLEN)
NAN_BOXED(2131011143,32,FLEN)
NAN_BOXED(2120330665,32,FLEN)
NAN_BOXED(3226333158,32,FLEN)
NAN_BOXED(2134215565,32,FLEN)
NAN_BOXED(2120330665,32,FLEN)
NAN_BOXED(3226333158,32,FLEN)
NAN_BOXED(2134215565,32,FLEN)
NAN_BOXED(2120330665,32,FLEN)
NAN_BOXED(3226333158,32,FLEN)
NAN_BOXED(2134215565,32,FLEN)
NAN_BOXED(2120330665,32,FLEN)
NAN_BOXED(3226333158,32,FLEN)
NAN_BOXED(2134215565,32,FLEN)
NAN_BOXED(2120330665,32,FLEN)
NAN_BOXED(3226333158,32,FLEN)
NAN_BOXED(2134215565,32,FLEN)
NAN_BOXED(2130279253,32,FLEN)
NAN_BOXED(3211054245,32,FLEN)
NAN_BOXED(2128542023,32,FLEN)
NAN_BOXED(2130279253,32,FLEN)
NAN_BOXED(3211054245,32,FLEN)
NAN_BOXED(2128542023,32,FLEN)
NAN_BOXED(2130279253,32,FLEN)
NAN_BOXED(3211054245,32,FLEN)
NAN_BOXED(2128542023,32,FLEN)
NAN_BOXED(2130279253,32,FLEN)
NAN_BOXED(3211054245,32,FLEN)
NAN_BOXED(2128542023,32,FLEN)
NAN_BOXED(2130279253,32,FLEN)
NAN_BOXED(3211054245,32,FLEN)
NAN_BOXED(2128542023,32,FLEN)
NAN_BOXED(2081312152,32,FLEN)
NAN_BOXED(3258773182,32,FLEN)
NAN_BOXED(2127694691,32,FLEN)
NAN_BOXED(2081312152,32,FLEN)
NAN_BOXED(3258773182,32,FLEN)
NAN_BOXED(2127694691,32,FLEN)
NAN_BOXED(2081312152,32,FLEN)
NAN_BOXED(3258773182,32,FLEN)
NAN_BOXED(2127694691,32,FLEN)
NAN_BOXED(2081312152,32,FLEN)
NAN_BOXED(3258773182,32,FLEN)
NAN_BOXED(2127694691,32,FLEN)
NAN_BOXED(2081312152,32,FLEN)
NAN_BOXED(3258773182,32,FLEN)
NAN_BOXED(2127694691,32,FLEN)
NAN_BOXED(2118158363,32,FLEN)
NAN_BOXED(3224074044,32,FLEN)
NAN_BOXED(2130769047,32,FLEN)
NAN_BOXED(2118158363,32,FLEN)
NAN_BOXED(3224074044,32,FLEN)
NAN_BOXED(2130769047,32,FLEN)
NAN_BOXED(2118158363,32,FLEN)
NAN_BOXED(3224074044,32,FLEN)
NAN_BOXED(2130769047,32,FLEN)
NAN_BOXED(2118158363,32,FLEN)
NAN_BOXED(3224074044,32,FLEN)
NAN_BOXED(2130769047,32,FLEN)
NAN_BOXED(2118158363,32,FLEN)
NAN_BOXED(3224074044,32,FLEN)
NAN_BOXED(2130769047,32,FLEN)
NAN_BOXED(2125579456,32,FLEN)
NAN_BOXED(3219246762,32,FLEN)
NAN_BOXED(2132594031,32,FLEN)
NAN_BOXED(2125579456,32,FLEN)
NAN_BOXED(3219246762,32,FLEN)
NAN_BOXED(2132594031,32,FLEN)
NAN_BOXED(2125579456,32,FLEN)
NAN_BOXED(3219246762,32,FLEN)
NAN_BOXED(2132594031,32,FLEN)
NAN_BOXED(2125579456,32,FLEN)
NAN_BOXED(3219246762,32,FLEN)
NAN_BOXED(2132594031,32,FLEN)
NAN_BOXED(2125579456,32,FLEN)
NAN_BOXED(3219246762,32,FLEN)
NAN_BOXED(2132594031,32,FLEN)
NAN_BOXED(2130222499,32,FLEN)
NAN_BOXED(3214782808,32,FLEN)
NAN_BOXED(2132354280,32,FLEN)
NAN_BOXED(2130222499,32,FLEN)
NAN_BOXED(3214782808,32,FLEN)
NAN_BOXED(2132354280,32,FLEN)
NAN_BOXED(2130222499,32,FLEN)
NAN_BOXED(3214782808,32,FLEN)
NAN_BOXED(2132354280,32,FLEN)
NAN_BOXED(2130222499,32,FLEN)
NAN_BOXED(3214782808,32,FLEN)
NAN_BOXED(2132354280,32,FLEN)
NAN_BOXED(2130222499,32,FLEN)
NAN_BOXED(3214782808,32,FLEN)
NAN_BOXED(2132354280,32,FLEN)
NAN_BOXED(2122684015,32,FLEN)
NAN_BOXED(3219978676,32,FLEN)
NAN_BOXED(2130137593,32,FLEN)
NAN_BOXED(2122684015,32,FLEN)
NAN_BOXED(3219978676,32,FLEN)
NAN_BOXED(2130137593,32,FLEN)
NAN_BOXED(2122684015,32,FLEN)
NAN_BOXED(3219978676,32,FLEN)
NAN_BOXED(2130137593,32,FLEN)
NAN_BOXED(2122684015,32,FLEN)
NAN_BOXED(3219978676,32,FLEN)
NAN_BOXED(2130137593,32,FLEN)
NAN_BOXED(2122684015,32,FLEN)
NAN_BOXED(3219978676,32,FLEN)
NAN_BOXED(2130137593,32,FLEN)
NAN_BOXED(2131601840,32,FLEN)
NAN_BOXED(3213864212,32,FLEN)
NAN_BOXED(2132738848,32,FLEN)
NAN_BOXED(2131601840,32,FLEN)
NAN_BOXED(3213864212,32,FLEN)
NAN_BOXED(2132738848,32,FLEN)
NAN_BOXED(2131601840,32,FLEN)
NAN_BOXED(3213864212,32,FLEN)
NAN_BOXED(2132738848,32,FLEN)
NAN_BOXED(2131601840,32,FLEN)
NAN_BOXED(3213864212,32,FLEN)
NAN_BOXED(2132738848,32,FLEN)
NAN_BOXED(2131601840,32,FLEN)
NAN_BOXED(3213864212,32,FLEN)
NAN_BOXED(2132738848,32,FLEN)
NAN_BOXED(2122738390,32,FLEN)
NAN_BOXED(3222936398,32,FLEN)
NAN_BOXED(2132923703,32,FLEN)
NAN_BOXED(2122738390,32,FLEN)
NAN_BOXED(3222936398,32,FLEN)
NAN_BOXED(2132923703,32,FLEN)
NAN_BOXED(2122738390,32,FLEN)
NAN_BOXED(3222936398,32,FLEN)
NAN_BOXED(2132923703,32,FLEN)
NAN_BOXED(2122738390,32,FLEN)
NAN_BOXED(3222936398,32,FLEN)
NAN_BOXED(2132923703,32,FLEN)
NAN_BOXED(2122738390,32,FLEN)
NAN_BOXED(3222936398,32,FLEN)
NAN_BOXED(2132923703,32,FLEN)
NAN_BOXED(2133263840,32,FLEN)
NAN_BOXED(3209334999,32,FLEN)
NAN_BOXED(2130979107,32,FLEN)
NAN_BOXED(2133263840,32,FLEN)
NAN_BOXED(3209334999,32,FLEN)
NAN_BOXED(2130979107,32,FLEN)
NAN_BOXED(2133263840,32,FLEN)
NAN_BOXED(3209334999,32,FLEN)
NAN_BOXED(2130979107,32,FLEN)
NAN_BOXED(2133263840,32,FLEN)
NAN_BOXED(3209334999,32,FLEN)
NAN_BOXED(2130979107,32,FLEN)
NAN_BOXED(2133263840,32,FLEN)
NAN_BOXED(3209334999,32,FLEN)
NAN_BOXED(2130979107,32,FLEN)
NAN_BOXED(2134600283,32,FLEN)
NAN_BOXED(3212499888,32,FLEN)
NAN_BOXED(2134353586,32,FLEN)
NAN_BOXED(2134600283,32,FLEN)
NAN_BOXED(3212499888,32,FLEN)
NAN_BOXED(2134353586,32,FLEN)
NAN_BOXED(2134600283,32,FLEN)
NAN_BOXED(3212499888,32,FLEN)
NAN_BOXED(2134353586,32,FLEN)
NAN_BOXED(2134600283,32,FLEN)
NAN_BOXED(3212499888,32,FLEN)
NAN_BOXED(2134353586,32,FLEN)
NAN_BOXED(2134600283,32,FLEN)
NAN_BOXED(3212499888,32,FLEN)
NAN_BOXED(2134353586,32,FLEN)
NAN_BOXED(2126968621,32,FLEN)
NAN_BOXED(3213018201,32,FLEN)
NAN_BOXED(2127250494,32,FLEN)
NAN_BOXED(2126968621,32,FLEN)
NAN_BOXED(3213018201,32,FLEN)
NAN_BOXED(2127250494,32,FLEN)
NAN_BOXED(2126968621,32,FLEN)
NAN_BOXED(3213018201,32,FLEN)
NAN_BOXED(2127250494,32,FLEN)
NAN_BOXED(2126968621,32,FLEN)
NAN_BOXED(3213018201,32,FLEN)
NAN_BOXED(2127250494,32,FLEN)
NAN_BOXED(2126968621,32,FLEN)
NAN_BOXED(3213018201,32,FLEN)
NAN_BOXED(2127250494,32,FLEN)
NAN_BOXED(2113879482,32,FLEN)
NAN_BOXED(3231783889,32,FLEN)
NAN_BOXED(2132844942,32,FLEN)
NAN_BOXED(2113879482,32,FLEN)
NAN_BOXED(3231783889,32,FLEN)
NAN_BOXED(2132844942,32,FLEN)
NAN_BOXED(2113879482,32,FLEN)
NAN_BOXED(3231783889,32,FLEN)
NAN_BOXED(2132844942,32,FLEN)
NAN_BOXED(2113879482,32,FLEN)
NAN_BOXED(3231783889,32,FLEN)
NAN_BOXED(2132844942,32,FLEN)
NAN_BOXED(2113879482,32,FLEN)
NAN_BOXED(3231783889,32,FLEN)
NAN_BOXED(2132844942,32,FLEN)
NAN_BOXED(2134112814,32,FLEN)
NAN_BOXED(3204601249,32,FLEN)
NAN_BOXED(2125939326,32,FLEN)
NAN_BOXED(2134112814,32,FLEN)
NAN_BOXED(3204601249,32,FLEN)
NAN_BOXED(2125939326,32,FLEN)
NAN_BOXED(2134112814,32,FLEN)
NAN_BOXED(3204601249,32,FLEN)
NAN_BOXED(2125939326,32,FLEN)
NAN_BOXED(2134112814,32,FLEN)
NAN_BOXED(3204601249,32,FLEN)
NAN_BOXED(2125939326,32,FLEN)
NAN_BOXED(2134112814,32,FLEN)
NAN_BOXED(3204601249,32,FLEN)
NAN_BOXED(2125939326,32,FLEN)
NAN_BOXED(2131017970,32,FLEN)
NAN_BOXED(3213179734,32,FLEN)
NAN_BOXED(2131373575,32,FLEN)
NAN_BOXED(2131017970,32,FLEN)
NAN_BOXED(3213179734,32,FLEN)
NAN_BOXED(2131373575,32,FLEN)
NAN_BOXED(2131017970,32,FLEN)
NAN_BOXED(3213179734,32,FLEN)
NAN_BOXED(2131373575,32,FLEN)
NAN_BOXED(2131017970,32,FLEN)
NAN_BOXED(3213179734,32,FLEN)
NAN_BOXED(2131373575,32,FLEN)
NAN_BOXED(2131017970,32,FLEN)
NAN_BOXED(3213179734,32,FLEN)
NAN_BOXED(2131373575,32,FLEN)
NAN_BOXED(2131507796,32,FLEN)
NAN_BOXED(3195070813,32,FLEN)
NAN_BOXED(2114188931,32,FLEN)
NAN_BOXED(2131507796,32,FLEN)
NAN_BOXED(3195070813,32,FLEN)
NAN_BOXED(2114188931,32,FLEN)
NAN_BOXED(2131507796,32,FLEN)
NAN_BOXED(3195070813,32,FLEN)
NAN_BOXED(2114188931,32,FLEN)
NAN_BOXED(2131507796,32,FLEN)
NAN_BOXED(3195070813,32,FLEN)
NAN_BOXED(2114188931,32,FLEN)
NAN_BOXED(2131507796,32,FLEN)
NAN_BOXED(3195070813,32,FLEN)
NAN_BOXED(2114188931,32,FLEN)
NAN_BOXED(2132137171,32,FLEN)
NAN_BOXED(3208547245,32,FLEN)
NAN_BOXED(2128546666,32,FLEN)
NAN_BOXED(2132137171,32,FLEN)
NAN_BOXED(3208547245,32,FLEN)
NAN_BOXED(2128546666,32,FLEN)
NAN_BOXED(2132137171,32,FLEN)
NAN_BOXED(3208547245,32,FLEN)
NAN_BOXED(2128546666,32,FLEN)
NAN_BOXED(2132137171,32,FLEN)
NAN_BOXED(3208547245,32,FLEN)
NAN_BOXED(2128546666,32,FLEN)
NAN_BOXED(2132137171,32,FLEN)
NAN_BOXED(3208547245,32,FLEN)
NAN_BOXED(2128546666,32,FLEN)
NAN_BOXED(2130678486,32,FLEN)
NAN_BOXED(3206666894,32,FLEN)
NAN_BOXED(2124518793,32,FLEN)
NAN_BOXED(2130678486,32,FLEN)
NAN_BOXED(3206666894,32,FLEN)
NAN_BOXED(2124518793,32,FLEN)
NAN_BOXED(2130678486,32,FLEN)
NAN_BOXED(3206666894,32,FLEN)
NAN_BOXED(2124518793,32,FLEN)
NAN_BOXED(2130678486,32,FLEN)
NAN_BOXED(3206666894,32,FLEN)
NAN_BOXED(2124518793,32,FLEN)
NAN_BOXED(2130678486,32,FLEN)
NAN_BOXED(3206666894,32,FLEN)
NAN_BOXED(2124518793,32,FLEN)
NAN_BOXED(2129626073,32,FLEN)
NAN_BOXED(3214867220,32,FLEN)
NAN_BOXED(2132065865,32,FLEN)
NAN_BOXED(2129626073,32,FLEN)
NAN_BOXED(3214867220,32,FLEN)
NAN_BOXED(2132065865,32,FLEN)
NAN_BOXED(2129626073,32,FLEN)
NAN_BOXED(3214867220,32,FLEN)
NAN_BOXED(2132065865,32,FLEN)
NAN_BOXED(2129626073,32,FLEN)
NAN_BOXED(3214867220,32,FLEN)
NAN_BOXED(2132065865,32,FLEN)
NAN_BOXED(2129626073,32,FLEN)
NAN_BOXED(3214867220,32,FLEN)
NAN_BOXED(2132065865,32,FLEN)
NAN_BOXED(2129956489,32,FLEN)
NAN_BOXED(3213937329,32,FLEN)
NAN_BOXED(2131382735,32,FLEN)
NAN_BOXED(2129956489,32,FLEN)
NAN_BOXED(3213937329,32,FLEN)
NAN_BOXED(2131382735,32,FLEN)
NAN_BOXED(2129956489,32,FLEN)
NAN_BOXED(3213937329,32,FLEN)
NAN_BOXED(2131382735,32,FLEN)
NAN_BOXED(2129956489,32,FLEN)
NAN_BOXED(3213937329,32,FLEN)
NAN_BOXED(2131382735,32,FLEN)
NAN_BOXED(2129956489,32,FLEN)
NAN_BOXED(3213937329,32,FLEN)
NAN_BOXED(2131382735,32,FLEN)
NAN_BOXED(2091496876,32,FLEN)
NAN_BOXED(3233374936,32,FLEN)
NAN_BOXED(2113260448,32,FLEN)
NAN_BOXED(2091496876,32,FLEN)
NAN_BOXED(3233374936,32,FLEN)
NAN_BOXED(2113260448,32,FLEN)
NAN_BOXED(2091496876,32,FLEN)
NAN_BOXED(3233374936,32,FLEN)
NAN_BOXED(2113260448,32,FLEN)
NAN_BOXED(2091496876,32,FLEN)
NAN_BOXED(3233374936,32,FLEN)
NAN_BOXED(2113260448,32,FLEN)
NAN_BOXED(2091496876,32,FLEN)
NAN_BOXED(3233374936,32,FLEN)
NAN_BOXED(2113260448,32,FLEN)
NAN_BOXED(2125029065,32,FLEN)
NAN_BOXED(3216812726,32,FLEN)
NAN_BOXED(2130289946,32,FLEN)
NAN_BOXED(2125029065,32,FLEN)
NAN_BOXED(3216812726,32,FLEN)
NAN_BOXED(2130289946,32,FLEN)
NAN_BOXED(2125029065,32,FLEN)
NAN_BOXED(3216812726,32,FLEN)
NAN_BOXED(2130289946,32,FLEN)
NAN_BOXED(2125029065,32,FLEN)
NAN_BOXED(3216812726,32,FLEN)
NAN_BOXED(2130289946,32,FLEN)
NAN_BOXED(2125029065,32,FLEN)
NAN_BOXED(3216812726,32,FLEN)
NAN_BOXED(2130289946,32,FLEN)
NAN_BOXED(2116565159,32,FLEN)
NAN_BOXED(3225972077,32,FLEN)
NAN_BOXED(2130949163,32,FLEN)
NAN_BOXED(2116565159,32,FLEN)
NAN_BOXED(3225972077,32,FLEN)
NAN_BOXED(2130949163,32,FLEN)
NAN_BOXED(2116565159,32,FLEN)
NAN_BOXED(3225972077,32,FLEN)
NAN_BOXED(2130949163,32,FLEN)
NAN_BOXED(2116565159,32,FLEN)
NAN_BOXED(3225972077,32,FLEN)
NAN_BOXED(2130949163,32,FLEN)
NAN_BOXED(2116565159,32,FLEN)
NAN_BOXED(3225972077,32,FLEN)
NAN_BOXED(2130949163,32,FLEN)
NAN_BOXED(2129805457,32,FLEN)
NAN_BOXED(3179799979,32,FLEN)
NAN_BOXED(2097191266,32,FLEN)
NAN_BOXED(2129805457,32,FLEN)
NAN_BOXED(3179799979,32,FLEN)
NAN_BOXED(2097191266,32,FLEN)
NAN_BOXED(2129805457,32,FLEN)
NAN_BOXED(3179799979,32,FLEN)
NAN_BOXED(2097191266,32,FLEN)
NAN_BOXED(2129805457,32,FLEN)
NAN_BOXED(3179799979,32,FLEN)
NAN_BOXED(2097191266,32,FLEN)
NAN_BOXED(2129805457,32,FLEN)
NAN_BOXED(3179799979,32,FLEN)
NAN_BOXED(2097191266,32,FLEN)
NAN_BOXED(2125797053,32,FLEN)
NAN_BOXED(3203768739,32,FLEN)
NAN_BOXED(2116927770,32,FLEN)
NAN_BOXED(2125797053,32,FLEN)
NAN_BOXED(3203768739,32,FLEN)
NAN_BOXED(2116927770,32,FLEN)
NAN_BOXED(2125797053,32,FLEN)
NAN_BOXED(3203768739,32,FLEN)
NAN_BOXED(2116927770,32,FLEN)
NAN_BOXED(2125797053,32,FLEN)
NAN_BOXED(3203768739,32,FLEN)
NAN_BOXED(2116927770,32,FLEN)
NAN_BOXED(2125797053,32,FLEN)
NAN_BOXED(3203768739,32,FLEN)
NAN_BOXED(2116927770,32,FLEN)
NAN_BOXED(2099663819,32,FLEN)
NAN_BOXED(3223180809,32,FLEN)
NAN_BOXED(2110593255,32,FLEN)
NAN_BOXED(2099663819,32,FLEN)
NAN_BOXED(3223180809,32,FLEN)
NAN_BOXED(2110593255,32,FLEN)
NAN_BOXED(2099663819,32,FLEN)
NAN_BOXED(3223180809,32,FLEN)
NAN_BOXED(2110593255,32,FLEN)
NAN_BOXED(2099663819,32,FLEN)
NAN_BOXED(3223180809,32,FLEN)
NAN_BOXED(2110593255,32,FLEN)
NAN_BOXED(2099663819,32,FLEN)
NAN_BOXED(3223180809,32,FLEN)
NAN_BOXED(2110593255,32,FLEN)
NAN_BOXED(2121513398,32,FLEN)
NAN_BOXED(3205657406,32,FLEN)
NAN_BOXED(2114678178,32,FLEN)
NAN_BOXED(2121513398,32,FLEN)
NAN_BOXED(3205657406,32,FLEN)
NAN_BOXED(2114678178,32,FLEN)
NAN_BOXED(2121513398,32,FLEN)
NAN_BOXED(3205657406,32,FLEN)
NAN_BOXED(2114678178,32,FLEN)
NAN_BOXED(2121513398,32,FLEN)
NAN_BOXED(3205657406,32,FLEN)
NAN_BOXED(2114678178,32,FLEN)
NAN_BOXED(2121513398,32,FLEN)
NAN_BOXED(3205657406,32,FLEN)
NAN_BOXED(2114678178,32,FLEN)
NAN_BOXED(2115272740,32,FLEN)
NAN_BOXED(3191657982,32,FLEN)
NAN_BOXED(2094732409,32,FLEN)
NAN_BOXED(2115272740,32,FLEN)
NAN_BOXED(3191657982,32,FLEN)
NAN_BOXED(2094732409,32,FLEN)
NAN_BOXED(2115272740,32,FLEN)
NAN_BOXED(3191657982,32,FLEN)
NAN_BOXED(2094732409,32,FLEN)
NAN_BOXED(2115272740,32,FLEN)
NAN_BOXED(3191657982,32,FLEN)
NAN_BOXED(2094732409,32,FLEN)
NAN_BOXED(2115272740,32,FLEN)
NAN_BOXED(3191657982,32,FLEN)
NAN_BOXED(2094732409,32,FLEN)
NAN_BOXED(2125639632,32,FLEN)
NAN_BOXED(3209771108,32,FLEN)
NAN_BOXED(2123499749,32,FLEN)
NAN_BOXED(2125639632,32,FLEN)
NAN_BOXED(3209771108,32,FLEN)
NAN_BOXED(2123499749,32,FLEN)
NAN_BOXED(2125639632,32,FLEN)
NAN_BOXED(3209771108,32,FLEN)
NAN_BOXED(2123499749,32,FLEN)
NAN_BOXED(2125639632,32,FLEN)
NAN_BOXED(3209771108,32,FLEN)
NAN_BOXED(2123499749,32,FLEN)
NAN_BOXED(2125639632,32,FLEN)
NAN_BOXED(3209771108,32,FLEN)
NAN_BOXED(2123499749,32,FLEN)
NAN_BOXED(2129325514,32,FLEN)
NAN_BOXED(3212243717,32,FLEN)
NAN_BOXED(2128781188,32,FLEN)
NAN_BOXED(2129325514,32,FLEN)
NAN_BOXED(3212243717,32,FLEN)
NAN_BOXED(2128781188,32,FLEN)
NAN_BOXED(2129325514,32,FLEN)
NAN_BOXED(3212243717,32,FLEN)
NAN_BOXED(2128781188,32,FLEN)
NAN_BOXED(2129325514,32,FLEN)
NAN_BOXED(3212243717,32,FLEN)
NAN_BOXED(2128781188,32,FLEN)
NAN_BOXED(2129325514,32,FLEN)
NAN_BOXED(3212243717,32,FLEN)
NAN_BOXED(2128781188,32,FLEN)
NAN_BOXED(2117511809,32,FLEN)
NAN_BOXED(3228764038,32,FLEN)
NAN_BOXED(2133682487,32,FLEN)
NAN_BOXED(2117511809,32,FLEN)
NAN_BOXED(3228764038,32,FLEN)
NAN_BOXED(2133682487,32,FLEN)
NAN_BOXED(2117511809,32,FLEN)
NAN_BOXED(3228764038,32,FLEN)
NAN_BOXED(2133682487,32,FLEN)
NAN_BOXED(2117511809,32,FLEN)
NAN_BOXED(3228764038,32,FLEN)
NAN_BOXED(2133682487,32,FLEN)
NAN_BOXED(2117511809,32,FLEN)
NAN_BOXED(3228764038,32,FLEN)
NAN_BOXED(2133682487,32,FLEN)
NAN_BOXED(2046943713,32,FLEN)
NAN_BOXED(3289999493,32,FLEN)
NAN_BOXED(2124130830,32,FLEN)
NAN_BOXED(2046943713,32,FLEN)
NAN_BOXED(3289999493,32,FLEN)
NAN_BOXED(2124130830,32,FLEN)
NAN_BOXED(2046943713,32,FLEN)
NAN_BOXED(3289999493,32,FLEN)
NAN_BOXED(2124130830,32,FLEN)
NAN_BOXED(2046943713,32,FLEN)
NAN_BOXED(3289999493,32,FLEN)
NAN_BOXED(2124130830,32,FLEN)
NAN_BOXED(2046943713,32,FLEN)
NAN_BOXED(3289999493,32,FLEN)
NAN_BOXED(2124130830,32,FLEN)
NAN_BOXED(2119559384,32,FLEN)
NAN_BOXED(3216797762,32,FLEN)
NAN_BOXED(2124248268,32,FLEN)
NAN_BOXED(2119559384,32,FLEN)
NAN_BOXED(3216797762,32,FLEN)
NAN_BOXED(2124248268,32,FLEN)
NAN_BOXED(2119559384,32,FLEN)
NAN_BOXED(3216797762,32,FLEN)
NAN_BOXED(2124248268,32,FLEN)
NAN_BOXED(2119559384,32,FLEN)
NAN_BOXED(3216797762,32,FLEN)
NAN_BOXED(2124248268,32,FLEN)
NAN_BOXED(2119559384,32,FLEN)
NAN_BOXED(3216797762,32,FLEN)
NAN_BOXED(2124248268,32,FLEN)
NAN_BOXED(2108735771,32,FLEN)
NAN_BOXED(3236376615,32,FLEN)
NAN_BOXED(2132778879,32,FLEN)
NAN_BOXED(2108735771,32,FLEN)
NAN_BOXED(3236376615,32,FLEN)
NAN_BOXED(2132778879,32,FLEN)
NAN_BOXED(2108735771,32,FLEN)
NAN_BOXED(3236376615,32,FLEN)
NAN_BOXED(2132778879,32,FLEN)
NAN_BOXED(2108735771,32,FLEN)
NAN_BOXED(3236376615,32,FLEN)
NAN_BOXED(2132778879,32,FLEN)
NAN_BOXED(2108735771,32,FLEN)
NAN_BOXED(3236376615,32,FLEN)
NAN_BOXED(2132778879,32,FLEN)
NAN_BOXED(2123338205,32,FLEN)
NAN_BOXED(3183839632,32,FLEN)
NAN_BOXED(2094895307,32,FLEN)
NAN_BOXED(2123338205,32,FLEN)
NAN_BOXED(3183839632,32,FLEN)
NAN_BOXED(2094895307,32,FLEN)
NAN_BOXED(2123338205,32,FLEN)
NAN_BOXED(3183839632,32,FLEN)
NAN_BOXED(2094895307,32,FLEN)
NAN_BOXED(2123338205,32,FLEN)
NAN_BOXED(3183839632,32,FLEN)
NAN_BOXED(2094895307,32,FLEN)
NAN_BOXED(2123338205,32,FLEN)
NAN_BOXED(3183839632,32,FLEN)
NAN_BOXED(2094895307,32,FLEN)
NAN_BOXED(2129370061,32,FLEN)
NAN_BOXED(3189653596,32,FLEN)
NAN_BOXED(2106697060,32,FLEN)
NAN_BOXED(2129370061,32,FLEN)
NAN_BOXED(3189653596,32,FLEN)
NAN_BOXED(2106697060,32,FLEN)
NAN_BOXED(2129370061,32,FLEN)
NAN_BOXED(3189653596,32,FLEN)
NAN_BOXED(2106697060,32,FLEN)
NAN_BOXED(2129370061,32,FLEN)
NAN_BOXED(3189653596,32,FLEN)
NAN_BOXED(2106697060,32,FLEN)
NAN_BOXED(2129370061,32,FLEN)
NAN_BOXED(3189653596,32,FLEN)
NAN_BOXED(2106697060,32,FLEN)
NAN_BOXED(2127650147,32,FLEN)
NAN_BOXED(3206502644,32,FLEN)
NAN_BOXED(2122469824,32,FLEN)
NAN_BOXED(2127650147,32,FLEN)
NAN_BOXED(3206502644,32,FLEN)
NAN_BOXED(2122469824,32,FLEN)
NAN_BOXED(2127650147,32,FLEN)
NAN_BOXED(3206502644,32,FLEN)
NAN_BOXED(2122469824,32,FLEN)
NAN_BOXED(2127650147,32,FLEN)
NAN_BOXED(3206502644,32,FLEN)
NAN_BOXED(2122469824,32,FLEN)
NAN_BOXED(2127650147,32,FLEN)
NAN_BOXED(3206502644,32,FLEN)
NAN_BOXED(2122469824,32,FLEN)
NAN_BOXED(2128547947,32,FLEN)
NAN_BOXED(3218286884,32,FLEN)
NAN_BOXED(2134376034,32,FLEN)
NAN_BOXED(2128547947,32,FLEN)
NAN_BOXED(3218286884,32,FLEN)
NAN_BOXED(2134376034,32,FLEN)
NAN_BOXED(2128547947,32,FLEN)
NAN_BOXED(3218286884,32,FLEN)
NAN_BOXED(2134376034,32,FLEN)
NAN_BOXED(2128547947,32,FLEN)
NAN_BOXED(3218286884,32,FLEN)
NAN_BOXED(2134376034,32,FLEN)
NAN_BOXED(2128547947,32,FLEN)
NAN_BOXED(3218286884,32,FLEN)
NAN_BOXED(2134376034,32,FLEN)
NAN_BOXED(2132617213,32,FLEN)
NAN_BOXED(3204649965,32,FLEN)
NAN_BOXED(2124476260,32,FLEN)
NAN_BOXED(2132617213,32,FLEN)
NAN_BOXED(3204649965,32,FLEN)
NAN_BOXED(2124476260,32,FLEN)
NAN_BOXED(2132617213,32,FLEN)
NAN_BOXED(3204649965,32,FLEN)
NAN_BOXED(2124476260,32,FLEN)
NAN_BOXED(2132617213,32,FLEN)
NAN_BOXED(3204649965,32,FLEN)
NAN_BOXED(2124476260,32,FLEN)
NAN_BOXED(2132617213,32,FLEN)
NAN_BOXED(3204649965,32,FLEN)
NAN_BOXED(2124476260,32,FLEN)
NAN_BOXED(2132547603,32,FLEN)
NAN_BOXED(3209314361,32,FLEN)
NAN_BOXED(2130093137,32,FLEN)
NAN_BOXED(2132547603,32,FLEN)
NAN_BOXED(3209314361,32,FLEN)
NAN_BOXED(2130093137,32,FLEN)
NAN_BOXED(2132547603,32,FLEN)
NAN_BOXED(3209314361,32,FLEN)
NAN_BOXED(2130093137,32,FLEN)
NAN_BOXED(2132547603,32,FLEN)
NAN_BOXED(3209314361,32,FLEN)
NAN_BOXED(2130093137,32,FLEN)
NAN_BOXED(2132547603,32,FLEN)
NAN_BOXED(3209314361,32,FLEN)
NAN_BOXED(2130093137,32,FLEN)
NAN_BOXED(2123226546,32,FLEN)
NAN_BOXED(3200578328,32,FLEN)
NAN_BOXED(2111457510,32,FLEN)
NAN_BOXED(2123226546,32,FLEN)
NAN_BOXED(3200578328,32,FLEN)
NAN_BOXED(2111457510,32,FLEN)
NAN_BOXED(2123226546,32,FLEN)
NAN_BOXED(3200578328,32,FLEN)
NAN_BOXED(2111457510,32,FLEN)
NAN_BOXED(2123226546,32,FLEN)
NAN_BOXED(3200578328,32,FLEN)
NAN_BOXED(2111457510,32,FLEN)
NAN_BOXED(2123226546,32,FLEN)
NAN_BOXED(3200578328,32,FLEN)
NAN_BOXED(2111457510,32,FLEN)
NAN_BOXED(2128926477,32,FLEN)
NAN_BOXED(3211933769,32,FLEN)
NAN_BOXED(2128119195,32,FLEN)
NAN_BOXED(2128926477,32,FLEN)
NAN_BOXED(3211933769,32,FLEN)
NAN_BOXED(2128119195,32,FLEN)
NAN_BOXED(2128926477,32,FLEN)
NAN_BOXED(3211933769,32,FLEN)
NAN_BOXED(2128119195,32,FLEN)
NAN_BOXED(2128926477,32,FLEN)
NAN_BOXED(3211933769,32,FLEN)
NAN_BOXED(2128119195,32,FLEN)
NAN_BOXED(2128926477,32,FLEN)
NAN_BOXED(3211933769,32,FLEN)
NAN_BOXED(2128119195,32,FLEN)
NAN_BOXED(2134362345,32,FLEN)
NAN_BOXED(3212931373,32,FLEN)
NAN_BOXED(2134498043,32,FLEN)
NAN_BOXED(2134362345,32,FLEN)
NAN_BOXED(3212931373,32,FLEN)
NAN_BOXED(2134498043,32,FLEN)
NAN_BOXED(2134362345,32,FLEN)
NAN_BOXED(3212931373,32,FLEN)
NAN_BOXED(2134498043,32,FLEN)
NAN_BOXED(2134362345,32,FLEN)
NAN_BOXED(3212931373,32,FLEN)
NAN_BOXED(2134498043,32,FLEN)
NAN_BOXED(2134362345,32,FLEN)
NAN_BOXED(3212931373,32,FLEN)
NAN_BOXED(2134498043,32,FLEN)
NAN_BOXED(2129245384,32,FLEN)
NAN_BOXED(3205738672,32,FLEN)
NAN_BOXED(2122765341,32,FLEN)
NAN_BOXED(2129245384,32,FLEN)
NAN_BOXED(3205738672,32,FLEN)
NAN_BOXED(2122765341,32,FLEN)
NAN_BOXED(2129245384,32,FLEN)
NAN_BOXED(3205738672,32,FLEN)
NAN_BOXED(2122765341,32,FLEN)
NAN_BOXED(2129245384,32,FLEN)
NAN_BOXED(3205738672,32,FLEN)
NAN_BOXED(2122765341,32,FLEN)
NAN_BOXED(2129245384,32,FLEN)
NAN_BOXED(3205738672,32,FLEN)
NAN_BOXED(2122765341,32,FLEN)
NAN_BOXED(2133560240,32,FLEN)
NAN_BOXED(3129671383,32,FLEN)
NAN_BOXED(2050639908,32,FLEN)
NAN_BOXED(2133560240,32,FLEN)
NAN_BOXED(3129671383,32,FLEN)
NAN_BOXED(2050639908,32,FLEN)
NAN_BOXED(2133560240,32,FLEN)
NAN_BOXED(3129671383,32,FLEN)
NAN_BOXED(2050639908,32,FLEN)
NAN_BOXED(2133560240,32,FLEN)
NAN_BOXED(3129671383,32,FLEN)
NAN_BOXED(2050639908,32,FLEN)
NAN_BOXED(2133560240,32,FLEN)
NAN_BOXED(3129671383,32,FLEN)
NAN_BOXED(2050639908,32,FLEN)
NAN_BOXED(2108015415,32,FLEN)
NAN_BOXED(3232220765,32,FLEN)
NAN_BOXED(2128168340,32,FLEN)
NAN_BOXED(2108015415,32,FLEN)
NAN_BOXED(3232220765,32,FLEN)
NAN_BOXED(2128168340,32,FLEN)
NAN_BOXED(2108015415,32,FLEN)
NAN_BOXED(3232220765,32,FLEN)
NAN_BOXED(2128168340,32,FLEN)
NAN_BOXED(2108015415,32,FLEN)
NAN_BOXED(3232220765,32,FLEN)
NAN_BOXED(2128168340,32,FLEN)
NAN_BOXED(2108015415,32,FLEN)
NAN_BOXED(3232220765,32,FLEN)
NAN_BOXED(2128168340,32,FLEN)
NAN_BOXED(2129410425,32,FLEN)
NAN_BOXED(3194631489,32,FLEN)
NAN_BOXED(2111315373,32,FLEN)
NAN_BOXED(2129410425,32,FLEN)
NAN_BOXED(3194631489,32,FLEN)
NAN_BOXED(2111315373,32,FLEN)
NAN_BOXED(2129410425,32,FLEN)
NAN_BOXED(3194631489,32,FLEN)
NAN_BOXED(2111315373,32,FLEN)
NAN_BOXED(2129410425,32,FLEN)
NAN_BOXED(3194631489,32,FLEN)
NAN_BOXED(2111315373,32,FLEN)
NAN_BOXED(2129410425,32,FLEN)
NAN_BOXED(3194631489,32,FLEN)
NAN_BOXED(2111315373,32,FLEN)
NAN_BOXED(2129770001,32,FLEN)
NAN_BOXED(3216326147,32,FLEN)
NAN_BOXED(2133532743,32,FLEN)
NAN_BOXED(2129770001,32,FLEN)
NAN_BOXED(3216326147,32,FLEN)
NAN_BOXED(2133532743,32,FLEN)
NAN_BOXED(2129770001,32,FLEN)
NAN_BOXED(3216326147,32,FLEN)
NAN_BOXED(2133532743,32,FLEN)
NAN_BOXED(2129770001,32,FLEN)
NAN_BOXED(3216326147,32,FLEN)
NAN_BOXED(2133532743,32,FLEN)
NAN_BOXED(2129770001,32,FLEN)
NAN_BOXED(3216326147,32,FLEN)
NAN_BOXED(2133532743,32,FLEN)
NAN_BOXED(2123387747,32,FLEN)
NAN_BOXED(3214083063,32,FLEN)
NAN_BOXED(2124792893,32,FLEN)
NAN_BOXED(2123387747,32,FLEN)
NAN_BOXED(3214083063,32,FLEN)
NAN_BOXED(2124792893,32,FLEN)
NAN_BOXED(2123387747,32,FLEN)
NAN_BOXED(3214083063,32,FLEN)
NAN_BOXED(2124792893,32,FLEN)
NAN_BOXED(2123387747,32,FLEN)
NAN_BOXED(3214083063,32,FLEN)
NAN_BOXED(2124792893,32,FLEN)
NAN_BOXED(2123387747,32,FLEN)
NAN_BOXED(3214083063,32,FLEN)
NAN_BOXED(2124792893,32,FLEN)
NAN_BOXED(2116932464,32,FLEN)
NAN_BOXED(3215251819,32,FLEN)
NAN_BOXED(2120212010,32,FLEN)
NAN_BOXED(2116932464,32,FLEN)
NAN_BOXED(3215251819,32,FLEN)
NAN_BOXED(2120212010,32,FLEN)
NAN_BOXED(2116932464,32,FLEN)
NAN_BOXED(3215251819,32,FLEN)
NAN_BOXED(2120212010,32,FLEN)
NAN_BOXED(2116932464,32,FLEN)
NAN_BOXED(3215251819,32,FLEN)
NAN_BOXED(2120212010,32,FLEN)
NAN_BOXED(2116932464,32,FLEN)
NAN_BOXED(3215251819,32,FLEN)
NAN_BOXED(2120212010,32,FLEN)
NAN_BOXED(2134554134,32,FLEN)
NAN_BOXED(3200775322,32,FLEN)
NAN_BOXED(2123486705,32,FLEN)
NAN_BOXED(2134554134,32,FLEN)
NAN_BOXED(3200775322,32,FLEN)
NAN_BOXED(2123486705,32,FLEN)
NAN_BOXED(2134554134,32,FLEN)
NAN_BOXED(3200775322,32,FLEN)
NAN_BOXED(2123486705,32,FLEN)
NAN_BOXED(2134554134,32,FLEN)
NAN_BOXED(3200775322,32,FLEN)
NAN_BOXED(2123486705,32,FLEN)
NAN_BOXED(2134554134,32,FLEN)
NAN_BOXED(3200775322,32,FLEN)
NAN_BOXED(2123486705,32,FLEN)
NAN_BOXED(2134411752,32,FLEN)
NAN_BOXED(3212009613,32,FLEN)
NAN_BOXED(2133815424,32,FLEN)
NAN_BOXED(2134411752,32,FLEN)
NAN_BOXED(3212009613,32,FLEN)
NAN_BOXED(2133815424,32,FLEN)
NAN_BOXED(2134411752,32,FLEN)
NAN_BOXED(3212009613,32,FLEN)
NAN_BOXED(2133815424,32,FLEN)
NAN_BOXED(2134411752,32,FLEN)
NAN_BOXED(3212009613,32,FLEN)
NAN_BOXED(2133815424,32,FLEN)
NAN_BOXED(2134411752,32,FLEN)
NAN_BOXED(3212009613,32,FLEN)
NAN_BOXED(2133815424,32,FLEN)
NAN_BOXED(2128923264,32,FLEN)
NAN_BOXED(3202303672,32,FLEN)
NAN_BOXED(2118618010,32,FLEN)
NAN_BOXED(2128923264,32,FLEN)
NAN_BOXED(3202303672,32,FLEN)
NAN_BOXED(2118618010,32,FLEN)
NAN_BOXED(2128923264,32,FLEN)
NAN_BOXED(3202303672,32,FLEN)
NAN_BOXED(2118618010,32,FLEN)
NAN_BOXED(2128923264,32,FLEN)
NAN_BOXED(3202303672,32,FLEN)
NAN_BOXED(2118618010,32,FLEN)
NAN_BOXED(2128923264,32,FLEN)
NAN_BOXED(3202303672,32,FLEN)
NAN_BOXED(2118618010,32,FLEN)
NAN_BOXED(2134661415,32,FLEN)
NAN_BOXED(3204547710,32,FLEN)
NAN_BOXED(2126419152,32,FLEN)
NAN_BOXED(2134661415,32,FLEN)
NAN_BOXED(3204547710,32,FLEN)
NAN_BOXED(2126419152,32,FLEN)
NAN_BOXED(2134661415,32,FLEN)
NAN_BOXED(3204547710,32,FLEN)
NAN_BOXED(2126419152,32,FLEN)
NAN_BOXED(2134661415,32,FLEN)
NAN_BOXED(3204547710,32,FLEN)
NAN_BOXED(2126419152,32,FLEN)
NAN_BOXED(2134661415,32,FLEN)
NAN_BOXED(3204547710,32,FLEN)
NAN_BOXED(2126419152,32,FLEN)
NAN_BOXED(2124385406,32,FLEN)
NAN_BOXED(3208946767,32,FLEN)
NAN_BOXED(2121604081,32,FLEN)
NAN_BOXED(2124385406,32,FLEN)
NAN_BOXED(3208946767,32,FLEN)
NAN_BOXED(2121604081,32,FLEN)
NAN_BOXED(2124385406,32,FLEN)
NAN_BOXED(3208946767,32,FLEN)
NAN_BOXED(2121604081,32,FLEN)
NAN_BOXED(2124385406,32,FLEN)
NAN_BOXED(3208946767,32,FLEN)
NAN_BOXED(2121604081,32,FLEN)
NAN_BOXED(2124385406,32,FLEN)
NAN_BOXED(3208946767,32,FLEN)
NAN_BOXED(2121604081,32,FLEN)
NAN_BOXED(2134702888,32,FLEN)
NAN_BOXED(3204435180,32,FLEN)
NAN_BOXED(2126304628,32,FLEN)
NAN_BOXED(2134702888,32,FLEN)
NAN_BOXED(3204435180,32,FLEN)
NAN_BOXED(2126304628,32,FLEN)
NAN_BOXED(2134702888,32,FLEN)
NAN_BOXED(3204435180,32,FLEN)
NAN_BOXED(2126304628,32,FLEN)
NAN_BOXED(2134702888,32,FLEN)
NAN_BOXED(3204435180,32,FLEN)
NAN_BOXED(2126304628,32,FLEN)
NAN_BOXED(2134702888,32,FLEN)
NAN_BOXED(3204435180,32,FLEN)
NAN_BOXED(2126304628,32,FLEN)
NAN_BOXED(2119955508,32,FLEN)
NAN_BOXED(3218417703,32,FLEN)
NAN_BOXED(2125931695,32,FLEN)
NAN_BOXED(2119955508,32,FLEN)
NAN_BOXED(3218417703,32,FLEN)
NAN_BOXED(2125931695,32,FLEN)
NAN_BOXED(2119955508,32,FLEN)
NAN_BOXED(3218417703,32,FLEN)
NAN_BOXED(2125931695,32,FLEN)
NAN_BOXED(2119955508,32,FLEN)
NAN_BOXED(3218417703,32,FLEN)
NAN_BOXED(2125931695,32,FLEN)
NAN_BOXED(2119955508,32,FLEN)
NAN_BOXED(3218417703,32,FLEN)
NAN_BOXED(2125931695,32,FLEN)
NAN_BOXED(2109421447,32,FLEN)
NAN_BOXED(3231922116,32,FLEN)
NAN_BOXED(2129574471,32,FLEN)
NAN_BOXED(2109421447,32,FLEN)
NAN_BOXED(3231922116,32,FLEN)
NAN_BOXED(2129574471,32,FLEN)
NAN_BOXED(2109421447,32,FLEN)
NAN_BOXED(3231922116,32,FLEN)
NAN_BOXED(2129574471,32,FLEN)
NAN_BOXED(2109421447,32,FLEN)
NAN_BOXED(3231922116,32,FLEN)
NAN_BOXED(2129574471,32,FLEN)
NAN_BOXED(2109421447,32,FLEN)
NAN_BOXED(3231922116,32,FLEN)
NAN_BOXED(2129574471,32,FLEN)
NAN_BOXED(2125089443,32,FLEN)
NAN_BOXED(3207148290,32,FLEN)
NAN_BOXED(2120292969,32,FLEN)
NAN_BOXED(2125089443,32,FLEN)
NAN_BOXED(3207148290,32,FLEN)
NAN_BOXED(2120292969,32,FLEN)
NAN_BOXED(2125089443,32,FLEN)
NAN_BOXED(3207148290,32,FLEN)
NAN_BOXED(2120292969,32,FLEN)
NAN_BOXED(2125089443,32,FLEN)
NAN_BOXED(3207148290,32,FLEN)
NAN_BOXED(2120292969,32,FLEN)
NAN_BOXED(2125089443,32,FLEN)
NAN_BOXED(3207148290,32,FLEN)
NAN_BOXED(2120292969,32,FLEN)
NAN_BOXED(2132153965,32,FLEN)
NAN_BOXED(3213320828,32,FLEN)
NAN_BOXED(2132721441,32,FLEN)
NAN_BOXED(2132153965,32,FLEN)
NAN_BOXED(3213320828,32,FLEN)
NAN_BOXED(2132721441,32,FLEN)
NAN_BOXED(2132153965,32,FLEN)
NAN_BOXED(3213320828,32,FLEN)
NAN_BOXED(2132721441,32,FLEN)
NAN_BOXED(2132153965,32,FLEN)
NAN_BOXED(3213320828,32,FLEN)
NAN_BOXED(2132721441,32,FLEN)
NAN_BOXED(2132153965,32,FLEN)
NAN_BOXED(3213320828,32,FLEN)
NAN_BOXED(2132721441,32,FLEN)
NAN_BOXED(2082618874,32,FLEN)
NAN_BOXED(3256965066,32,FLEN)
NAN_BOXED(2127331643,32,FLEN)
NAN_BOXED(2082618874,32,FLEN)
NAN_BOXED(3256965066,32,FLEN)
NAN_BOXED(2127331643,32,FLEN)
NAN_BOXED(2082618874,32,FLEN)
NAN_BOXED(3256965066,32,FLEN)
NAN_BOXED(2127331643,32,FLEN)
NAN_BOXED(2082618874,32,FLEN)
NAN_BOXED(3256965066,32,FLEN)
NAN_BOXED(2127331643,32,FLEN)
NAN_BOXED(2082618874,32,FLEN)
NAN_BOXED(3256965066,32,FLEN)
NAN_BOXED(2127331643,32,FLEN)
NAN_BOXED(2119320789,32,FLEN)
NAN_BOXED(3227164524,32,FLEN)
NAN_BOXED(2134086031,32,FLEN)
NAN_BOXED(2119320789,32,FLEN)
NAN_BOXED(3227164524,32,FLEN)
NAN_BOXED(2134086031,32,FLEN)
NAN_BOXED(2119320789,32,FLEN)
NAN_BOXED(3227164524,32,FLEN)
NAN_BOXED(2134086031,32,FLEN)
NAN_BOXED(2119320789,32,FLEN)
NAN_BOXED(3227164524,32,FLEN)
NAN_BOXED(2134086031,32,FLEN)
NAN_BOXED(2119320789,32,FLEN)
NAN_BOXED(3227164524,32,FLEN)
NAN_BOXED(2134086031,32,FLEN)
NAN_BOXED(2132156493,32,FLEN)
NAN_BOXED(3198213195,32,FLEN)
NAN_BOXED(2117905089,32,FLEN)
NAN_BOXED(2132156493,32,FLEN)
NAN_BOXED(3198213195,32,FLEN)
NAN_BOXED(2117905089,32,FLEN)
NAN_BOXED(2132156493,32,FLEN)
NAN_BOXED(3198213195,32,FLEN)
NAN_BOXED(2117905089,32,FLEN)
NAN_BOXED(2132156493,32,FLEN)
NAN_BOXED(3198213195,32,FLEN)
NAN_BOXED(2117905089,32,FLEN)
NAN_BOXED(2132156493,32,FLEN)
NAN_BOXED(3198213195,32,FLEN)
NAN_BOXED(2117905089,32,FLEN)
NAN_BOXED(2119013811,32,FLEN)
NAN_BOXED(3205759492,32,FLEN)
NAN_BOXED(2112731220,32,FLEN)
NAN_BOXED(2119013811,32,FLEN)
NAN_BOXED(3205759492,32,FLEN)
NAN_BOXED(2112731220,32,FLEN)
NAN_BOXED(2119013811,32,FLEN)
NAN_BOXED(3205759492,32,FLEN)
NAN_BOXED(2112731220,32,FLEN)
NAN_BOXED(2119013811,32,FLEN)
NAN_BOXED(3205759492,32,FLEN)
NAN_BOXED(2112731220,32,FLEN)
NAN_BOXED(2119013811,32,FLEN)
NAN_BOXED(3205759492,32,FLEN)
NAN_BOXED(2112731220,32,FLEN)
NAN_BOXED(2134760124,32,FLEN)
NAN_BOXED(3197619982,32,FLEN)
NAN_BOXED(2120297255,32,FLEN)
NAN_BOXED(2134760124,32,FLEN)
NAN_BOXED(3197619982,32,FLEN)
NAN_BOXED(2120297255,32,FLEN)
NAN_BOXED(2134760124,32,FLEN)
NAN_BOXED(3197619982,32,FLEN)
NAN_BOXED(2120297255,32,FLEN)
NAN_BOXED(2134760124,32,FLEN)
NAN_BOXED(3197619982,32,FLEN)
NAN_BOXED(2120297255,32,FLEN)
NAN_BOXED(2134760124,32,FLEN)
NAN_BOXED(3197619982,32,FLEN)
NAN_BOXED(2120297255,32,FLEN)
NAN_BOXED(2129230982,32,FLEN)
NAN_BOXED(3209155867,32,FLEN)
NAN_BOXED(2125873706,32,FLEN)
NAN_BOXED(2129230982,32,FLEN)
NAN_BOXED(3209155867,32,FLEN)
NAN_BOXED(2125873706,32,FLEN)
NAN_BOXED(2129230982,32,FLEN)
NAN_BOXED(3209155867,32,FLEN)
NAN_BOXED(2125873706,32,FLEN)
NAN_BOXED(2129230982,32,FLEN)
NAN_BOXED(3209155867,32,FLEN)
NAN_BOXED(2125873706,32,FLEN)
NAN_BOXED(2129230982,32,FLEN)
NAN_BOXED(3209155867,32,FLEN)
NAN_BOXED(2125873706,32,FLEN)
NAN_BOXED(2130158067,32,FLEN)
NAN_BOXED(3211769605,32,FLEN)
NAN_BOXED(2129125691,32,FLEN)
NAN_BOXED(2130158067,32,FLEN)
NAN_BOXED(3211769605,32,FLEN)
NAN_BOXED(2129125691,32,FLEN)
NAN_BOXED(2130158067,32,FLEN)
NAN_BOXED(3211769605,32,FLEN)
NAN_BOXED(2129125691,32,FLEN)
NAN_BOXED(2130158067,32,FLEN)
NAN_BOXED(3211769605,32,FLEN)
NAN_BOXED(2129125691,32,FLEN)
NAN_BOXED(2130158067,32,FLEN)
NAN_BOXED(3211769605,32,FLEN)
NAN_BOXED(2129125691,32,FLEN)
NAN_BOXED(2131672881,32,FLEN)
NAN_BOXED(3189949739,32,FLEN)
NAN_BOXED(2109048286,32,FLEN)
NAN_BOXED(2131672881,32,FLEN)
NAN_BOXED(3189949739,32,FLEN)
NAN_BOXED(2109048286,32,FLEN)
NAN_BOXED(2131672881,32,FLEN)
NAN_BOXED(3189949739,32,FLEN)
NAN_BOXED(2109048286,32,FLEN)
NAN_BOXED(2131672881,32,FLEN)
NAN_BOXED(3189949739,32,FLEN)
NAN_BOXED(2109048286,32,FLEN)
NAN_BOXED(2131672881,32,FLEN)
NAN_BOXED(3189949739,32,FLEN)
NAN_BOXED(2109048286,32,FLEN)
NAN_BOXED(2131885853,32,FLEN)
NAN_BOXED(3200939703,32,FLEN)
NAN_BOXED(2120674818,32,FLEN)
NAN_BOXED(2131885853,32,FLEN)
NAN_BOXED(3200939703,32,FLEN)
NAN_BOXED(2120674818,32,FLEN)
NAN_BOXED(2131885853,32,FLEN)
NAN_BOXED(3200939703,32,FLEN)
NAN_BOXED(2120674818,32,FLEN)
NAN_BOXED(2131885853,32,FLEN)
NAN_BOXED(3200939703,32,FLEN)
NAN_BOXED(2120674818,32,FLEN)
NAN_BOXED(2131885853,32,FLEN)
NAN_BOXED(3200939703,32,FLEN)
NAN_BOXED(2120674818,32,FLEN)
NAN_BOXED(2127355130,32,FLEN)
NAN_BOXED(3206629858,32,FLEN)
NAN_BOXED(2122387993,32,FLEN)
NAN_BOXED(2127355130,32,FLEN)
NAN_BOXED(3206629858,32,FLEN)
NAN_BOXED(2122387993,32,FLEN)
NAN_BOXED(2127355130,32,FLEN)
NAN_BOXED(3206629858,32,FLEN)
NAN_BOXED(2122387993,32,FLEN)
NAN_BOXED(2127355130,32,FLEN)
NAN_BOXED(3206629858,32,FLEN)
NAN_BOXED(2122387993,32,FLEN)
NAN_BOXED(2127355130,32,FLEN)
NAN_BOXED(3206629858,32,FLEN)
NAN_BOXED(2122387993,32,FLEN)
NAN_BOXED(2120480156,32,FLEN)
NAN_BOXED(3219423050,32,FLEN)
NAN_BOXED(2127263767,32,FLEN)
NAN_BOXED(2120480156,32,FLEN)
NAN_BOXED(3219423050,32,FLEN)
NAN_BOXED(2127263767,32,FLEN)
NAN_BOXED(2120480156,32,FLEN)
NAN_BOXED(3219423050,32,FLEN)
NAN_BOXED(2127263767,32,FLEN)
NAN_BOXED(2120480156,32,FLEN)
NAN_BOXED(3219423050,32,FLEN)
NAN_BOXED(2127263767,32,FLEN)
NAN_BOXED(2120480156,32,FLEN)
NAN_BOXED(3219423050,32,FLEN)
NAN_BOXED(2127263767,32,FLEN)
NAN_BOXED(2125614632,32,FLEN)
NAN_BOXED(3209104568,32,FLEN)
NAN_BOXED(2123015069,32,FLEN)
NAN_BOXED(2125614632,32,FLEN)
NAN_BOXED(3209104568,32,FLEN)
NAN_BOXED(2123015069,32,FLEN)
NAN_BOXED(2125614632,32,FLEN)
NAN_BOXED(3209104568,32,FLEN)
NAN_BOXED(2123015069,32,FLEN)
NAN_BOXED(2125614632,32,FLEN)
NAN_BOXED(3209104568,32,FLEN)
NAN_BOXED(2123015069,32,FLEN)
NAN_BOXED(2125614632,32,FLEN)
NAN_BOXED(3209104568,32,FLEN)
NAN_BOXED(2123015069,32,FLEN)
NAN_BOXED(2131692309,32,FLEN)
NAN_BOXED(3209364116,32,FLEN)
NAN_BOXED(2128797302,32,FLEN)
NAN_BOXED(2131692309,32,FLEN)
NAN_BOXED(3209364116,32,FLEN)
NAN_BOXED(2128797302,32,FLEN)
NAN_BOXED(2131692309,32,FLEN)
NAN_BOXED(3209364116,32,FLEN)
NAN_BOXED(2128797302,32,FLEN)
NAN_BOXED(2131692309,32,FLEN)
NAN_BOXED(3209364116,32,FLEN)
NAN_BOXED(2128797302,32,FLEN)
NAN_BOXED(2131692309,32,FLEN)
NAN_BOXED(3209364116,32,FLEN)
NAN_BOXED(2128797302,32,FLEN)
NAN_BOXED(2095043001,32,FLEN)
NAN_BOXED(3235757041,32,FLEN)
NAN_BOXED(2118245470,32,FLEN)
NAN_BOXED(2095043001,32,FLEN)
NAN_BOXED(3235757041,32,FLEN)
NAN_BOXED(2118245470,32,FLEN)
NAN_BOXED(2095043001,32,FLEN)
NAN_BOXED(3235757041,32,FLEN)
NAN_BOXED(2118245470,32,FLEN)
NAN_BOXED(2095043001,32,FLEN)
NAN_BOXED(3235757041,32,FLEN)
NAN_BOXED(2118245470,32,FLEN)
NAN_BOXED(2095043001,32,FLEN)
NAN_BOXED(3235757041,32,FLEN)
NAN_BOXED(2118245470,32,FLEN)
NAN_BOXED(2125395110,32,FLEN)
NAN_BOXED(3221274684,32,FLEN)
NAN_BOXED(2133850983,32,FLEN)
NAN_BOXED(2125395110,32,FLEN)
NAN_BOXED(3221274684,32,FLEN)
NAN_BOXED(2133850983,32,FLEN)
NAN_BOXED(2125395110,32,FLEN)
NAN_BOXED(3221274684,32,FLEN)
NAN_BOXED(2133850983,32,FLEN)
NAN_BOXED(2125395110,32,FLEN)
NAN_BOXED(3221274684,32,FLEN)
NAN_BOXED(2133850983,32,FLEN)
NAN_BOXED(2125395110,32,FLEN)
NAN_BOXED(3221274684,32,FLEN)
NAN_BOXED(2133850983,32,FLEN)
NAN_BOXED(2133490701,32,FLEN)
NAN_BOXED(3206368355,32,FLEN)
NAN_BOXED(2127659494,32,FLEN)
NAN_BOXED(2133490701,32,FLEN)
NAN_BOXED(3206368355,32,FLEN)
NAN_BOXED(2127659494,32,FLEN)
NAN_BOXED(2133490701,32,FLEN)
NAN_BOXED(3206368355,32,FLEN)
NAN_BOXED(2127659494,32,FLEN)
NAN_BOXED(2133490701,32,FLEN)
NAN_BOXED(3206368355,32,FLEN)
NAN_BOXED(2127659494,32,FLEN)
NAN_BOXED(2133490701,32,FLEN)
NAN_BOXED(3206368355,32,FLEN)
NAN_BOXED(2127659494,32,FLEN)
NAN_BOXED(2083711852,32,FLEN)
NAN_BOXED(3260405108,32,FLEN)
NAN_BOXED(2132112144,32,FLEN)
NAN_BOXED(2083711852,32,FLEN)
NAN_BOXED(3260405108,32,FLEN)
NAN_BOXED(2132112144,32,FLEN)
NAN_BOXED(2083711852,32,FLEN)
NAN_BOXED(3260405108,32,FLEN)
NAN_BOXED(2132112144,32,FLEN)
NAN_BOXED(2083711852,32,FLEN)
NAN_BOXED(3260405108,32,FLEN)
NAN_BOXED(2132112144,32,FLEN)
NAN_BOXED(2083711852,32,FLEN)
NAN_BOXED(3260405108,32,FLEN)
NAN_BOXED(2132112144,32,FLEN)
NAN_BOXED(2124693432,32,FLEN)
NAN_BOXED(3215737658,32,FLEN)
NAN_BOXED(2128415715,32,FLEN)
NAN_BOXED(2124693432,32,FLEN)
NAN_BOXED(3215737658,32,FLEN)
NAN_BOXED(2128415715,32,FLEN)
NAN_BOXED(2124693432,32,FLEN)
NAN_BOXED(3215737658,32,FLEN)
NAN_BOXED(2128415715,32,FLEN)
NAN_BOXED(2124693432,32,FLEN)
NAN_BOXED(3215737658,32,FLEN)
NAN_BOXED(2128415715,32,FLEN)
NAN_BOXED(2124693432,32,FLEN)
NAN_BOXED(3215737658,32,FLEN)
NAN_BOXED(2128415715,32,FLEN)
NAN_BOXED(2131228805,32,FLEN)
NAN_BOXED(3211037663,32,FLEN)
NAN_BOXED(2129839938,32,FLEN)
NAN_BOXED(2131228805,32,FLEN)
NAN_BOXED(3211037663,32,FLEN)
NAN_BOXED(2129839938,32,FLEN)
NAN_BOXED(2131228805,32,FLEN)
NAN_BOXED(3211037663,32,FLEN)
NAN_BOXED(2129839938,32,FLEN)
NAN_BOXED(2131228805,32,FLEN)
NAN_BOXED(3211037663,32,FLEN)
NAN_BOXED(2129839938,32,FLEN)
NAN_BOXED(2131228805,32,FLEN)
NAN_BOXED(3211037663,32,FLEN)
NAN_BOXED(2129839938,32,FLEN)
NAN_BOXED(2126056099,32,FLEN)
NAN_BOXED(3220319504,32,FLEN)
NAN_BOXED(2133789857,32,FLEN)
NAN_BOXED(2126056099,32,FLEN)
NAN_BOXED(3220319504,32,FLEN)
NAN_BOXED(2133789857,32,FLEN)
NAN_BOXED(2126056099,32,FLEN)
NAN_BOXED(3220319504,32,FLEN)
NAN_BOXED(2133789857,32,FLEN)
NAN_BOXED(2126056099,32,FLEN)
NAN_BOXED(3220319504,32,FLEN)
NAN_BOXED(2133789857,32,FLEN)
NAN_BOXED(2126056099,32,FLEN)
NAN_BOXED(3220319504,32,FLEN)
NAN_BOXED(2133789857,32,FLEN)
NAN_BOXED(2123629965,32,FLEN)
NAN_BOXED(3212975977,32,FLEN)
NAN_BOXED(2123790838,32,FLEN)
NAN_BOXED(2123629965,32,FLEN)
NAN_BOXED(3212975977,32,FLEN)
NAN_BOXED(2123790838,32,FLEN)
NAN_BOXED(2123629965,32,FLEN)
NAN_BOXED(3212975977,32,FLEN)
NAN_BOXED(2123790838,32,FLEN)
NAN_BOXED(2123629965,32,FLEN)
NAN_BOXED(3212975977,32,FLEN)
NAN_BOXED(2123790838,32,FLEN)
NAN_BOXED(2123629965,32,FLEN)
NAN_BOXED(3212975977,32,FLEN)
NAN_BOXED(2123790838,32,FLEN)
NAN_BOXED(2133037223,32,FLEN)
NAN_BOXED(3194759287,32,FLEN)
NAN_BOXED(2115429173,32,FLEN)
NAN_BOXED(2133037223,32,FLEN)
NAN_BOXED(3194759287,32,FLEN)
NAN_BOXED(2115429173,32,FLEN)
NAN_BOXED(2133037223,32,FLEN)
NAN_BOXED(3194759287,32,FLEN)
NAN_BOXED(2115429173,32,FLEN)
NAN_BOXED(2133037223,32,FLEN)
NAN_BOXED(3194759287,32,FLEN)
NAN_BOXED(2115429173,32,FLEN)
NAN_BOXED(2133037223,32,FLEN)
NAN_BOXED(3194759287,32,FLEN)
NAN_BOXED(2115429173,32,FLEN)
NAN_BOXED(2120461353,32,FLEN)
NAN_BOXED(3224580454,32,FLEN)
NAN_BOXED(2132761936,32,FLEN)
NAN_BOXED(2120461353,32,FLEN)
NAN_BOXED(3224580454,32,FLEN)
NAN_BOXED(2132761936,32,FLEN)
NAN_BOXED(2120461353,32,FLEN)
NAN_BOXED(3224580454,32,FLEN)
NAN_BOXED(2132761936,32,FLEN)
NAN_BOXED(2120461353,32,FLEN)
NAN_BOXED(3224580454,32,FLEN)
NAN_BOXED(2132761936,32,FLEN)
NAN_BOXED(2120461353,32,FLEN)
NAN_BOXED(3224580454,32,FLEN)
NAN_BOXED(2132761936,32,FLEN)
NAN_BOXED(2102061874,32,FLEN)
NAN_BOXED(3242889551,32,FLEN)
NAN_BOXED(2132840644,32,FLEN)
NAN_BOXED(2102061874,32,FLEN)
NAN_BOXED(3242889551,32,FLEN)
NAN_BOXED(2132840644,32,FLEN)
NAN_BOXED(2102061874,32,FLEN)
NAN_BOXED(3242889551,32,FLEN)
NAN_BOXED(2132840644,32,FLEN)
NAN_BOXED(2102061874,32,FLEN)
NAN_BOXED(3242889551,32,FLEN)
NAN_BOXED(2132840644,32,FLEN)
NAN_BOXED(2102061874,32,FLEN)
NAN_BOXED(3242889551,32,FLEN)
NAN_BOXED(2132840644,32,FLEN)
NAN_BOXED(2131058184,32,FLEN)
NAN_BOXED(3206513566,32,FLEN)
NAN_BOXED(2124821490,32,FLEN)
NAN_BOXED(2131058184,32,FLEN)
NAN_BOXED(3206513566,32,FLEN)
NAN_BOXED(2124821490,32,FLEN)
NAN_BOXED(2131058184,32,FLEN)
NAN_BOXED(3206513566,32,FLEN)
NAN_BOXED(2124821490,32,FLEN)
NAN_BOXED(2131058184,32,FLEN)
NAN_BOXED(3206513566,32,FLEN)
NAN_BOXED(2124821490,32,FLEN)
NAN_BOXED(2131058184,32,FLEN)
NAN_BOXED(3206513566,32,FLEN)
NAN_BOXED(2124821490,32,FLEN)
NAN_BOXED(2119953632,32,FLEN)
NAN_BOXED(3224272131,32,FLEN)
NAN_BOXED(2132141669,32,FLEN)
NAN_BOXED(2119953632,32,FLEN)
NAN_BOXED(3224272131,32,FLEN)
NAN_BOXED(2132141669,32,FLEN)
NAN_BOXED(2119953632,32,FLEN)
NAN_BOXED(3224272131,32,FLEN)
NAN_BOXED(2132141669,32,FLEN)
NAN_BOXED(2119953632,32,FLEN)
NAN_BOXED(3224272131,32,FLEN)
NAN_BOXED(2132141669,32,FLEN)
NAN_BOXED(2119953632,32,FLEN)
NAN_BOXED(3224272131,32,FLEN)
NAN_BOXED(2132141669,32,FLEN)
NAN_BOXED(2133776774,32,FLEN)
NAN_BOXED(3189797013,32,FLEN)
NAN_BOXED(2111515059,32,FLEN)
NAN_BOXED(2133776774,32,FLEN)
NAN_BOXED(3189797013,32,FLEN)
NAN_BOXED(2111515059,32,FLEN)
NAN_BOXED(2133776774,32,FLEN)
NAN_BOXED(3189797013,32,FLEN)
NAN_BOXED(2111515059,32,FLEN)
NAN_BOXED(2133776774,32,FLEN)
NAN_BOXED(3189797013,32,FLEN)
NAN_BOXED(2111515059,32,FLEN)
NAN_BOXED(2133776774,32,FLEN)
NAN_BOXED(3189797013,32,FLEN)
NAN_BOXED(2111515059,32,FLEN)
NAN_BOXED(2125968863,32,FLEN)
NAN_BOXED(3214076232,32,FLEN)
NAN_BOXED(2127747652,32,FLEN)
NAN_BOXED(2125968863,32,FLEN)
NAN_BOXED(3214076232,32,FLEN)
NAN_BOXED(2127747652,32,FLEN)
NAN_BOXED(2125968863,32,FLEN)
NAN_BOXED(3214076232,32,FLEN)
NAN_BOXED(2127747652,32,FLEN)
NAN_BOXED(2125968863,32,FLEN)
NAN_BOXED(3214076232,32,FLEN)
NAN_BOXED(2127747652,32,FLEN)
NAN_BOXED(2125968863,32,FLEN)
NAN_BOXED(3214076232,32,FLEN)
NAN_BOXED(2127747652,32,FLEN)
NAN_BOXED(2126453791,32,FLEN)
NAN_BOXED(3207209030,32,FLEN)
NAN_BOXED(2122187145,32,FLEN)
NAN_BOXED(2126453791,32,FLEN)
NAN_BOXED(3207209030,32,FLEN)
NAN_BOXED(2122187145,32,FLEN)
NAN_BOXED(2126453791,32,FLEN)
NAN_BOXED(3207209030,32,FLEN)
NAN_BOXED(2122187145,32,FLEN)
NAN_BOXED(2126453791,32,FLEN)
NAN_BOXED(3207209030,32,FLEN)
NAN_BOXED(2122187145,32,FLEN)
NAN_BOXED(2126453791,32,FLEN)
NAN_BOXED(3207209030,32,FLEN)
NAN_BOXED(2122187145,32,FLEN)
NAN_BOXED(2112606608,32,FLEN)
NAN_BOXED(3228842064,32,FLEN)
NAN_BOXED(2128672669,32,FLEN)
NAN_BOXED(2112606608,32,FLEN)
NAN_BOXED(3228842064,32,FLEN)
NAN_BOXED(2128672669,32,FLEN)
NAN_BOXED(2112606608,32,FLEN)
NAN_BOXED(3228842064,32,FLEN)
NAN_BOXED(2128672669,32,FLEN)
NAN_BOXED(2112606608,32,FLEN)
NAN_BOXED(3228842064,32,FLEN)
NAN_BOXED(2128672669,32,FLEN)
NAN_BOXED(2112606608,32,FLEN)
NAN_BOXED(3228842064,32,FLEN)
NAN_BOXED(2128672669,32,FLEN)
NAN_BOXED(2132532921,32,FLEN)
NAN_BOXED(3182205506,32,FLEN)
NAN_BOXED(2102538018,32,FLEN)
NAN_BOXED(2132532921,32,FLEN)
NAN_BOXED(3182205506,32,FLEN)
NAN_BOXED(2102538018,32,FLEN)
NAN_BOXED(2132532921,32,FLEN)
NAN_BOXED(3182205506,32,FLEN)
NAN_BOXED(2102538018,32,FLEN)
NAN_BOXED(2132532921,32,FLEN)
NAN_BOXED(3182205506,32,FLEN)
NAN_BOXED(2102538018,32,FLEN)
NAN_BOXED(2132532921,32,FLEN)
NAN_BOXED(3182205506,32,FLEN)
NAN_BOXED(2102538018,32,FLEN)
NAN_BOXED(2117117855,32,FLEN)
NAN_BOXED(3227781809,32,FLEN)
NAN_BOXED(2132630699,32,FLEN)
NAN_BOXED(2117117855,32,FLEN)
NAN_BOXED(3227781809,32,FLEN)
NAN_BOXED(2132630699,32,FLEN)
NAN_BOXED(2117117855,32,FLEN)
NAN_BOXED(3227781809,32,FLEN)
NAN_BOXED(2132630699,32,FLEN)
NAN_BOXED(2117117855,32,FLEN)
NAN_BOXED(3227781809,32,FLEN)
NAN_BOXED(2132630699,32,FLEN)
NAN_BOXED(2117117855,32,FLEN)
NAN_BOXED(3227781809,32,FLEN)
NAN_BOXED(2132630699,32,FLEN)
NAN_BOXED(2132280350,32,FLEN)
NAN_BOXED(3210121380,32,FLEN)
NAN_BOXED(2130629291,32,FLEN)
NAN_BOXED(2132280350,32,FLEN)
NAN_BOXED(3210121380,32,FLEN)
NAN_BOXED(2130629291,32,FLEN)
NAN_BOXED(2132280350,32,FLEN)
NAN_BOXED(3210121380,32,FLEN)
NAN_BOXED(2130629291,32,FLEN)
NAN_BOXED(2132280350,32,FLEN)
NAN_BOXED(3210121380,32,FLEN)
NAN_BOXED(2130629291,32,FLEN)
NAN_BOXED(2132280350,32,FLEN)
NAN_BOXED(3210121380,32,FLEN)
NAN_BOXED(2130629291,32,FLEN)
NAN_BOXED(2090663917,32,FLEN)
NAN_BOXED(3252828529,32,FLEN)
NAN_BOXED(2131410218,32,FLEN)
NAN_BOXED(2090663917,32,FLEN)
NAN_BOXED(3252828529,32,FLEN)
NAN_BOXED(2131410218,32,FLEN)
NAN_BOXED(2090663917,32,FLEN)
NAN_BOXED(3252828529,32,FLEN)
NAN_BOXED(2131410218,32,FLEN)
NAN_BOXED(2090663917,32,FLEN)
NAN_BOXED(3252828529,32,FLEN)
NAN_BOXED(2131410218,32,FLEN)
NAN_BOXED(2090663917,32,FLEN)
NAN_BOXED(3252828529,32,FLEN)
NAN_BOXED(2131410218,32,FLEN)
NAN_BOXED(2134632543,32,FLEN)
NAN_BOXED(3213005277,32,FLEN)
NAN_BOXED(2134879778,32,FLEN)
NAN_BOXED(2134632543,32,FLEN)
NAN_BOXED(3213005277,32,FLEN)
NAN_BOXED(2134879778,32,FLEN)
NAN_BOXED(2134632543,32,FLEN)
NAN_BOXED(3213005277,32,FLEN)
NAN_BOXED(2134879778,32,FLEN)
NAN_BOXED(2134632543,32,FLEN)
NAN_BOXED(3213005277,32,FLEN)
NAN_BOXED(2134879778,32,FLEN)
NAN_BOXED(2134632543,32,FLEN)
NAN_BOXED(3213005277,32,FLEN)
NAN_BOXED(2134879778,32,FLEN)
NAN_BOXED(2131141567,32,FLEN)
NAN_BOXED(3180251848,32,FLEN)
NAN_BOXED(2098606837,32,FLEN)
NAN_BOXED(2131141567,32,FLEN)
NAN_BOXED(3180251848,32,FLEN)
NAN_BOXED(2098606837,32,FLEN)
NAN_BOXED(2131141567,32,FLEN)
NAN_BOXED(3180251848,32,FLEN)
NAN_BOXED(2098606837,32,FLEN)
NAN_BOXED(2131141567,32,FLEN)
NAN_BOXED(3180251848,32,FLEN)
NAN_BOXED(2098606837,32,FLEN)
NAN_BOXED(2131141567,32,FLEN)
NAN_BOXED(3180251848,32,FLEN)
NAN_BOXED(2098606837,32,FLEN)
NAN_BOXED(2132913423,32,FLEN)
NAN_BOXED(3196406980,32,FLEN)
NAN_BOXED(2116574920,32,FLEN)
NAN_BOXED(2132913423,32,FLEN)
NAN_BOXED(3196406980,32,FLEN)
NAN_BOXED(2116574920,32,FLEN)
NAN_BOXED(2132913423,32,FLEN)
NAN_BOXED(3196406980,32,FLEN)
NAN_BOXED(2116574920,32,FLEN)
NAN_BOXED(2132913423,32,FLEN)
NAN_BOXED(3196406980,32,FLEN)
NAN_BOXED(2116574920,32,FLEN)
NAN_BOXED(2132913423,32,FLEN)
NAN_BOXED(3196406980,32,FLEN)
NAN_BOXED(2116574920,32,FLEN)
NAN_BOXED(2130179729,32,FLEN)
NAN_BOXED(3216818624,32,FLEN)
NAN_BOXED(2134299838,32,FLEN)
NAN_BOXED(2130179729,32,FLEN)
NAN_BOXED(3216818624,32,FLEN)
NAN_BOXED(2134299838,32,FLEN)
NAN_BOXED(2130179729,32,FLEN)
NAN_BOXED(3216818624,32,FLEN)
NAN_BOXED(2134299838,32,FLEN)
NAN_BOXED(2130179729,32,FLEN)
NAN_BOXED(3216818624,32,FLEN)
NAN_BOXED(2134299838,32,FLEN)
NAN_BOXED(2130179729,32,FLEN)
NAN_BOXED(3216818624,32,FLEN)
NAN_BOXED(2134299838,32,FLEN)
NAN_BOXED(2131282435,32,FLEN)
NAN_BOXED(3191963566,32,FLEN)
NAN_BOXED(2110703885,32,FLEN)
NAN_BOXED(2131282435,32,FLEN)
NAN_BOXED(3191963566,32,FLEN)
NAN_BOXED(2110703885,32,FLEN)
NAN_BOXED(2131282435,32,FLEN)
NAN_BOXED(3191963566,32,FLEN)
NAN_BOXED(2110703885,32,FLEN)
NAN_BOXED(2131282435,32,FLEN)
NAN_BOXED(3191963566,32,FLEN)
NAN_BOXED(2110703885,32,FLEN)
NAN_BOXED(2131282435,32,FLEN)
NAN_BOXED(3191963566,32,FLEN)
NAN_BOXED(2110703885,32,FLEN)
NAN_BOXED(2120262257,32,FLEN)
NAN_BOXED(3226000813,32,FLEN)
NAN_BOXED(2133868909,32,FLEN)
NAN_BOXED(2120262257,32,FLEN)
NAN_BOXED(3226000813,32,FLEN)
NAN_BOXED(2133868909,32,FLEN)
NAN_BOXED(2120262257,32,FLEN)
NAN_BOXED(3226000813,32,FLEN)
NAN_BOXED(2133868909,32,FLEN)
NAN_BOXED(2120262257,32,FLEN)
NAN_BOXED(3226000813,32,FLEN)
NAN_BOXED(2133868909,32,FLEN)
NAN_BOXED(2120262257,32,FLEN)
NAN_BOXED(3226000813,32,FLEN)
NAN_BOXED(2133868909,32,FLEN)
NAN_BOXED(2112224315,32,FLEN)
NAN_BOXED(3229777839,32,FLEN)
NAN_BOXED(2129295767,32,FLEN)
NAN_BOXED(2112224315,32,FLEN)
NAN_BOXED(3229777839,32,FLEN)
NAN_BOXED(2129295767,32,FLEN)
NAN_BOXED(2112224315,32,FLEN)
NAN_BOXED(3229777839,32,FLEN)
NAN_BOXED(2129295767,32,FLEN)
NAN_BOXED(2112224315,32,FLEN)
NAN_BOXED(3229777839,32,FLEN)
NAN_BOXED(2129295767,32,FLEN)
NAN_BOXED(2112224315,32,FLEN)
NAN_BOXED(3229777839,32,FLEN)
NAN_BOXED(2129295767,32,FLEN)
NAN_BOXED(2124346262,32,FLEN)
NAN_BOXED(3200736577,32,FLEN)
NAN_BOXED(2113376898,32,FLEN)
NAN_BOXED(2124346262,32,FLEN)
NAN_BOXED(3200736577,32,FLEN)
NAN_BOXED(2113376898,32,FLEN)
NAN_BOXED(2124346262,32,FLEN)
NAN_BOXED(3200736577,32,FLEN)
NAN_BOXED(2113376898,32,FLEN)
NAN_BOXED(2124346262,32,FLEN)
NAN_BOXED(3200736577,32,FLEN)
NAN_BOXED(2113376898,32,FLEN)
NAN_BOXED(2124346262,32,FLEN)
NAN_BOXED(3200736577,32,FLEN)
NAN_BOXED(2113376898,32,FLEN)
NAN_BOXED(2129592551,32,FLEN)
NAN_BOXED(3180287885,32,FLEN)
NAN_BOXED(2097533758,32,FLEN)
NAN_BOXED(2129592551,32,FLEN)
NAN_BOXED(3180287885,32,FLEN)
NAN_BOXED(2097533758,32,FLEN)
NAN_BOXED(2129592551,32,FLEN)
NAN_BOXED(3180287885,32,FLEN)
NAN_BOXED(2097533758,32,FLEN)
NAN_BOXED(2129592551,32,FLEN)
NAN_BOXED(3180287885,32,FLEN)
NAN_BOXED(2097533758,32,FLEN)
NAN_BOXED(2129592551,32,FLEN)
NAN_BOXED(3180287885,32,FLEN)
NAN_BOXED(2097533758,32,FLEN)
NAN_BOXED(2108045249,32,FLEN)
NAN_BOXED(3227534274,32,FLEN)
NAN_BOXED(2123472072,32,FLEN)
NAN_BOXED(2108045249,32,FLEN)
NAN_BOXED(3227534274,32,FLEN)
NAN_BOXED(2123472072,32,FLEN)
NAN_BOXED(2108045249,32,FLEN)
NAN_BOXED(3227534274,32,FLEN)
NAN_BOXED(2123472072,32,FLEN)
NAN_BOXED(2108045249,32,FLEN)
NAN_BOXED(3227534274,32,FLEN)
NAN_BOXED(2123472072,32,FLEN)
NAN_BOXED(2108045249,32,FLEN)
NAN_BOXED(3227534274,32,FLEN)
NAN_BOXED(2123472072,32,FLEN)
NAN_BOXED(2103259699,32,FLEN)
NAN_BOXED(3209471656,32,FLEN)
NAN_BOXED(2100352000,32,FLEN)
NAN_BOXED(2103259699,32,FLEN)
NAN_BOXED(3209471656,32,FLEN)
NAN_BOXED(2100352000,32,FLEN)
NAN_BOXED(2103259699,32,FLEN)
NAN_BOXED(3209471656,32,FLEN)
NAN_BOXED(2100352000,32,FLEN)
NAN_BOXED(2103259699,32,FLEN)
NAN_BOXED(3209471656,32,FLEN)
NAN_BOXED(2100352000,32,FLEN)
NAN_BOXED(2103259699,32,FLEN)
NAN_BOXED(3209471656,32,FLEN)
NAN_BOXED(2100352000,32,FLEN)
NAN_BOXED(2128405999,32,FLEN)
NAN_BOXED(3215273319,32,FLEN)
NAN_BOXED(2131658592,32,FLEN)
NAN_BOXED(2128405999,32,FLEN)
NAN_BOXED(3215273319,32,FLEN)
NAN_BOXED(2131658592,32,FLEN)
NAN_BOXED(2128405999,32,FLEN)
NAN_BOXED(3215273319,32,FLEN)
NAN_BOXED(2131658592,32,FLEN)
NAN_BOXED(2128405999,32,FLEN)
NAN_BOXED(3215273319,32,FLEN)
NAN_BOXED(2131658592,32,FLEN)
NAN_BOXED(2128405999,32,FLEN)
NAN_BOXED(3215273319,32,FLEN)
NAN_BOXED(2131658592,32,FLEN)
NAN_BOXED(2133371372,32,FLEN)
NAN_BOXED(3189544659,32,FLEN)
NAN_BOXED(2110674389,32,FLEN)
NAN_BOXED(2133371372,32,FLEN)
NAN_BOXED(3189544659,32,FLEN)
NAN_BOXED(2110674389,32,FLEN)
NAN_BOXED(2133371372,32,FLEN)
NAN_BOXED(3189544659,32,FLEN)
NAN_BOXED(2110674389,32,FLEN)
NAN_BOXED(2133371372,32,FLEN)
NAN_BOXED(3189544659,32,FLEN)
NAN_BOXED(2110674389,32,FLEN)
NAN_BOXED(2133371372,32,FLEN)
NAN_BOXED(3189544659,32,FLEN)
NAN_BOXED(2110674389,32,FLEN)
NAN_BOXED(2124792559,32,FLEN)
NAN_BOXED(3208285645,32,FLEN)
NAN_BOXED(2121373414,32,FLEN)
NAN_BOXED(2124792559,32,FLEN)
NAN_BOXED(3208285645,32,FLEN)
NAN_BOXED(2121373414,32,FLEN)
NAN_BOXED(2124792559,32,FLEN)
NAN_BOXED(3208285645,32,FLEN)
NAN_BOXED(2121373414,32,FLEN)
NAN_BOXED(2124792559,32,FLEN)
NAN_BOXED(3208285645,32,FLEN)
NAN_BOXED(2121373414,32,FLEN)
NAN_BOXED(2124792559,32,FLEN)
NAN_BOXED(3208285645,32,FLEN)
NAN_BOXED(2121373414,32,FLEN)
NAN_BOXED(2129034186,32,FLEN)
NAN_BOXED(3209744326,32,FLEN)
NAN_BOXED(2126249893,32,FLEN)
NAN_BOXED(2129034186,32,FLEN)
NAN_BOXED(3209744326,32,FLEN)
NAN_BOXED(2126249893,32,FLEN)
NAN_BOXED(2129034186,32,FLEN)
NAN_BOXED(3209744326,32,FLEN)
NAN_BOXED(2126249893,32,FLEN)
NAN_BOXED(2129034186,32,FLEN)
NAN_BOXED(3209744326,32,FLEN)
NAN_BOXED(2126249893,32,FLEN)
NAN_BOXED(2129034186,32,FLEN)
NAN_BOXED(3209744326,32,FLEN)
NAN_BOXED(2126249893,32,FLEN)
NAN_BOXED(2134127364,32,FLEN)
NAN_BOXED(3201049302,32,FLEN)
NAN_BOXED(2123346221,32,FLEN)
NAN_BOXED(2134127364,32,FLEN)
NAN_BOXED(3201049302,32,FLEN)
NAN_BOXED(2123346221,32,FLEN)
NAN_BOXED(2134127364,32,FLEN)
NAN_BOXED(3201049302,32,FLEN)
NAN_BOXED(2123346221,32,FLEN)
NAN_BOXED(2134127364,32,FLEN)
NAN_BOXED(3201049302,32,FLEN)
NAN_BOXED(2123346221,32,FLEN)
NAN_BOXED(2134127364,32,FLEN)
NAN_BOXED(3201049302,32,FLEN)
NAN_BOXED(2123346221,32,FLEN)
NAN_BOXED(2099987594,32,FLEN)
NAN_BOXED(3242728916,32,FLEN)
NAN_BOXED(2131091841,32,FLEN)
NAN_BOXED(2099987594,32,FLEN)
NAN_BOXED(3242728916,32,FLEN)
NAN_BOXED(2131091841,32,FLEN)
NAN_BOXED(2099987594,32,FLEN)
NAN_BOXED(3242728916,32,FLEN)
NAN_BOXED(2131091841,32,FLEN)
NAN_BOXED(2099987594,32,FLEN)
NAN_BOXED(3242728916,32,FLEN)
NAN_BOXED(2131091841,32,FLEN)
NAN_BOXED(2099987594,32,FLEN)
NAN_BOXED(3242728916,32,FLEN)
NAN_BOXED(2131091841,32,FLEN)
NAN_BOXED(2112363150,32,FLEN)
NAN_BOXED(3229987534,32,FLEN)
NAN_BOXED(2129817555,32,FLEN)
NAN_BOXED(2112363150,32,FLEN)
NAN_BOXED(3229987534,32,FLEN)
NAN_BOXED(2129817555,32,FLEN)
NAN_BOXED(2112363150,32,FLEN)
NAN_BOXED(3229987534,32,FLEN)
NAN_BOXED(2129817555,32,FLEN)
NAN_BOXED(2112363150,32,FLEN)
NAN_BOXED(3229987534,32,FLEN)
NAN_BOXED(2129817555,32,FLEN)
NAN_BOXED(2112363150,32,FLEN)
NAN_BOXED(3229987534,32,FLEN)
NAN_BOXED(2129817555,32,FLEN)
NAN_BOXED(2126659199,32,FLEN)
NAN_BOXED(3219546144,32,FLEN)
NAN_BOXED(2133773590,32,FLEN)
NAN_BOXED(2126659199,32,FLEN)
NAN_BOXED(3219546144,32,FLEN)
NAN_BOXED(2133773590,32,FLEN)
NAN_BOXED(2126659199,32,FLEN)
NAN_BOXED(3219546144,32,FLEN)
NAN_BOXED(2133773590,32,FLEN)
NAN_BOXED(2126659199,32,FLEN)
NAN_BOXED(3219546144,32,FLEN)
NAN_BOXED(2133773590,32,FLEN)
NAN_BOXED(2126659199,32,FLEN)
NAN_BOXED(3219546144,32,FLEN)
NAN_BOXED(2133773590,32,FLEN)
NAN_BOXED(2127893501,32,FLEN)
NAN_BOXED(3213834427,32,FLEN)
NAN_BOXED(2129554117,32,FLEN)
NAN_BOXED(2127893501,32,FLEN)
NAN_BOXED(3213834427,32,FLEN)
NAN_BOXED(2129554117,32,FLEN)
NAN_BOXED(2127893501,32,FLEN)
NAN_BOXED(3213834427,32,FLEN)
NAN_BOXED(2129554117,32,FLEN)
NAN_BOXED(2127893501,32,FLEN)
NAN_BOXED(3213834427,32,FLEN)
NAN_BOXED(2129554117,32,FLEN)
NAN_BOXED(2127893501,32,FLEN)
NAN_BOXED(3213834427,32,FLEN)
NAN_BOXED(2129554117,32,FLEN)
NAN_BOXED(2118790248,32,FLEN)
NAN_BOXED(3221626693,32,FLEN)
NAN_BOXED(2127812578,32,FLEN)
NAN_BOXED(2118790248,32,FLEN)
NAN_BOXED(3221626693,32,FLEN)
NAN_BOXED(2127812578,32,FLEN)
NAN_BOXED(2118790248,32,FLEN)
NAN_BOXED(3221626693,32,FLEN)
NAN_BOXED(2127812578,32,FLEN)
NAN_BOXED(2118790248,32,FLEN)
NAN_BOXED(3221626693,32,FLEN)
NAN_BOXED(2127812578,32,FLEN)
NAN_BOXED(2118790248,32,FLEN)
NAN_BOXED(3221626693,32,FLEN)
NAN_BOXED(2127812578,32,FLEN)
NAN_BOXED(2118334422,32,FLEN)
NAN_BOXED(3225221897,32,FLEN)
NAN_BOXED(2131762288,32,FLEN)
NAN_BOXED(2118334422,32,FLEN)
NAN_BOXED(3225221897,32,FLEN)
NAN_BOXED(2131762288,32,FLEN)
NAN_BOXED(2118334422,32,FLEN)
NAN_BOXED(3225221897,32,FLEN)
NAN_BOXED(2131762288,32,FLEN)
NAN_BOXED(2118334422,32,FLEN)
NAN_BOXED(3225221897,32,FLEN)
NAN_BOXED(2131762288,32,FLEN)
NAN_BOXED(2118334422,32,FLEN)
NAN_BOXED(3225221897,32,FLEN)
NAN_BOXED(2131762288,32,FLEN)
NAN_BOXED(2126939838,32,FLEN)
NAN_BOXED(3196353782,32,FLEN)
NAN_BOXED(2110618820,32,FLEN)
NAN_BOXED(2126939838,32,FLEN)
NAN_BOXED(3196353782,32,FLEN)
NAN_BOXED(2110618820,32,FLEN)
NAN_BOXED(2126939838,32,FLEN)
NAN_BOXED(3196353782,32,FLEN)
NAN_BOXED(2110618820,32,FLEN)
NAN_BOXED(2126939838,32,FLEN)
NAN_BOXED(3196353782,32,FLEN)
NAN_BOXED(2110618820,32,FLEN)
NAN_BOXED(2126939838,32,FLEN)
NAN_BOXED(3196353782,32,FLEN)
NAN_BOXED(2110618820,32,FLEN)
NAN_BOXED(2117339368,32,FLEN)
NAN_BOXED(3217731958,32,FLEN)
NAN_BOXED(2123271124,32,FLEN)
NAN_BOXED(2117339368,32,FLEN)
NAN_BOXED(3217731958,32,FLEN)
NAN_BOXED(2123271124,32,FLEN)
NAN_BOXED(2117339368,32,FLEN)
NAN_BOXED(3217731958,32,FLEN)
NAN_BOXED(2123271124,32,FLEN)
NAN_BOXED(2117339368,32,FLEN)
NAN_BOXED(3217731958,32,FLEN)
NAN_BOXED(2123271124,32,FLEN)
NAN_BOXED(2117339368,32,FLEN)
NAN_BOXED(3217731958,32,FLEN)
NAN_BOXED(2123271124,32,FLEN)
NAN_BOXED(2131588320,32,FLEN)
NAN_BOXED(3195616249,32,FLEN)
NAN_BOXED(2114566098,32,FLEN)
NAN_BOXED(2131588320,32,FLEN)
NAN_BOXED(3195616249,32,FLEN)
NAN_BOXED(2114566098,32,FLEN)
NAN_BOXED(2131588320,32,FLEN)
NAN_BOXED(3195616249,32,FLEN)
NAN_BOXED(2114566098,32,FLEN)
NAN_BOXED(2131588320,32,FLEN)
NAN_BOXED(3195616249,32,FLEN)
NAN_BOXED(2114566098,32,FLEN)
NAN_BOXED(2131588320,32,FLEN)
NAN_BOXED(3195616249,32,FLEN)
NAN_BOXED(2114566098,32,FLEN)
NAN_BOXED(2131293168,32,FLEN)
NAN_BOXED(3211466018,32,FLEN)
NAN_BOXED(2130413175,32,FLEN)
NAN_BOXED(2131293168,32,FLEN)
NAN_BOXED(3211466018,32,FLEN)
NAN_BOXED(2130413175,32,FLEN)
NAN_BOXED(2131293168,32,FLEN)
NAN_BOXED(3211466018,32,FLEN)
NAN_BOXED(2130413175,32,FLEN)
NAN_BOXED(2131293168,32,FLEN)
NAN_BOXED(3211466018,32,FLEN)
NAN_BOXED(2130413175,32,FLEN)
NAN_BOXED(2131293168,32,FLEN)
NAN_BOXED(3211466018,32,FLEN)
NAN_BOXED(2130413175,32,FLEN)
NAN_BOXED(2105732876,32,FLEN)
NAN_BOXED(3237658417,32,FLEN)
NAN_BOXED(2130722620,32,FLEN)
NAN_BOXED(2105732876,32,FLEN)
NAN_BOXED(3237658417,32,FLEN)
NAN_BOXED(2130722620,32,FLEN)
NAN_BOXED(2105732876,32,FLEN)
NAN_BOXED(3237658417,32,FLEN)
NAN_BOXED(2130722620,32,FLEN)
NAN_BOXED(2105732876,32,FLEN)
NAN_BOXED(3237658417,32,FLEN)
NAN_BOXED(2130722620,32,FLEN)
NAN_BOXED(2105732876,32,FLEN)
NAN_BOXED(3237658417,32,FLEN)
NAN_BOXED(2130722620,32,FLEN)
NAN_BOXED(2106330305,32,FLEN)
NAN_BOXED(3215929368,32,FLEN)
NAN_BOXED(2109713935,32,FLEN)
NAN_BOXED(2106330305,32,FLEN)
NAN_BOXED(3215929368,32,FLEN)
NAN_BOXED(2109713935,32,FLEN)
NAN_BOXED(2106330305,32,FLEN)
NAN_BOXED(3215929368,32,FLEN)
NAN_BOXED(2109713935,32,FLEN)
NAN_BOXED(2106330305,32,FLEN)
NAN_BOXED(3215929368,32,FLEN)
NAN_BOXED(2109713935,32,FLEN)
NAN_BOXED(2106330305,32,FLEN)
NAN_BOXED(3215929368,32,FLEN)
NAN_BOXED(2109713935,32,FLEN)
NAN_BOXED(2128877067,32,FLEN)
NAN_BOXED(3201149043,32,FLEN)
NAN_BOXED(2117548988,32,FLEN)
NAN_BOXED(2128877067,32,FLEN)
NAN_BOXED(3201149043,32,FLEN)
NAN_BOXED(2117548988,32,FLEN)
NAN_BOXED(2128877067,32,FLEN)
NAN_BOXED(3201149043,32,FLEN)
NAN_BOXED(2117548988,32,FLEN)
NAN_BOXED(2128877067,32,FLEN)
NAN_BOXED(3201149043,32,FLEN)
NAN_BOXED(2117548988,32,FLEN)
NAN_BOXED(2128877067,32,FLEN)
NAN_BOXED(3201149043,32,FLEN)
NAN_BOXED(2117548988,32,FLEN)
NAN_BOXED(2133352114,32,FLEN)
NAN_BOXED(3205251881,32,FLEN)
NAN_BOXED(2126020586,32,FLEN)
NAN_BOXED(2133352114,32,FLEN)
NAN_BOXED(3205251881,32,FLEN)
NAN_BOXED(2126020586,32,FLEN)
NAN_BOXED(2133352114,32,FLEN)
NAN_BOXED(3205251881,32,FLEN)
NAN_BOXED(2126020586,32,FLEN)
NAN_BOXED(2133352114,32,FLEN)
NAN_BOXED(3205251881,32,FLEN)
NAN_BOXED(2126020586,32,FLEN)
NAN_BOXED(2133352114,32,FLEN)
NAN_BOXED(3205251881,32,FLEN)
NAN_BOXED(2126020586,32,FLEN)
NAN_BOXED(2121812136,32,FLEN)
NAN_BOXED(3223170153,32,FLEN)
NAN_BOXED(2132339654,32,FLEN)
NAN_BOXED(2121812136,32,FLEN)
NAN_BOXED(3223170153,32,FLEN)
NAN_BOXED(2132339654,32,FLEN)
NAN_BOXED(2121812136,32,FLEN)
NAN_BOXED(3223170153,32,FLEN)
NAN_BOXED(2132339654,32,FLEN)
NAN_BOXED(2121812136,32,FLEN)
NAN_BOXED(3223170153,32,FLEN)
NAN_BOXED(2132339654,32,FLEN)
NAN_BOXED(2121812136,32,FLEN)
NAN_BOXED(3223170153,32,FLEN)
NAN_BOXED(2132339654,32,FLEN)
NAN_BOXED(2092237340,32,FLEN)
NAN_BOXED(3250904917,32,FLEN)
NAN_BOXED(2131440518,32,FLEN)
NAN_BOXED(2092237340,32,FLEN)
NAN_BOXED(3250904917,32,FLEN)
NAN_BOXED(2131440518,32,FLEN)
NAN_BOXED(2092237340,32,FLEN)
NAN_BOXED(3250904917,32,FLEN)
NAN_BOXED(2131440518,32,FLEN)
NAN_BOXED(2092237340,32,FLEN)
NAN_BOXED(3250904917,32,FLEN)
NAN_BOXED(2131440518,32,FLEN)
NAN_BOXED(2092237340,32,FLEN)
NAN_BOXED(3250904917,32,FLEN)
NAN_BOXED(2131440518,32,FLEN)
NAN_BOXED(2099566413,32,FLEN)
NAN_BOXED(3224624322,32,FLEN)
NAN_BOXED(2112332131,32,FLEN)
NAN_BOXED(2099566413,32,FLEN)
NAN_BOXED(3224624322,32,FLEN)
NAN_BOXED(2112332131,32,FLEN)
NAN_BOXED(2099566413,32,FLEN)
NAN_BOXED(3224624322,32,FLEN)
NAN_BOXED(2112332131,32,FLEN)
NAN_BOXED(2099566413,32,FLEN)
NAN_BOXED(3224624322,32,FLEN)
NAN_BOXED(2112332131,32,FLEN)
NAN_BOXED(2099566413,32,FLEN)
NAN_BOXED(3224624322,32,FLEN)
NAN_BOXED(2112332131,32,FLEN)
NAN_BOXED(2134297277,32,FLEN)
NAN_BOXED(3208062457,32,FLEN)
NAN_BOXED(2130888203,32,FLEN)
NAN_BOXED(2134297277,32,FLEN)
NAN_BOXED(3208062457,32,FLEN)
NAN_BOXED(2130888203,32,FLEN)
NAN_BOXED(2134297277,32,FLEN)
NAN_BOXED(3208062457,32,FLEN)
NAN_BOXED(2130888203,32,FLEN)
NAN_BOXED(2134297277,32,FLEN)
NAN_BOXED(3208062457,32,FLEN)
NAN_BOXED(2130888203,32,FLEN)
NAN_BOXED(2134297277,32,FLEN)
NAN_BOXED(3208062457,32,FLEN)
NAN_BOXED(2130888203,32,FLEN)
NAN_BOXED(2116768995,32,FLEN)
NAN_BOXED(3204789215,32,FLEN)
NAN_BOXED(2108836770,32,FLEN)
NAN_BOXED(2116768995,32,FLEN)
NAN_BOXED(3204789215,32,FLEN)
NAN_BOXED(2108836770,32,FLEN)
NAN_BOXED(2116768995,32,FLEN)
NAN_BOXED(3204789215,32,FLEN)
NAN_BOXED(2108836770,32,FLEN)
NAN_BOXED(2116768995,32,FLEN)
NAN_BOXED(3204789215,32,FLEN)
NAN_BOXED(2108836770,32,FLEN)
NAN_BOXED(2116768995,32,FLEN)
NAN_BOXED(3204789215,32,FLEN)
NAN_BOXED(2108836770,32,FLEN)
NAN_BOXED(2134557190,32,FLEN)
NAN_BOXED(3207530739,32,FLEN)
NAN_BOXED(2130666067,32,FLEN)
NAN_BOXED(2134557190,32,FLEN)
NAN_BOXED(3207530739,32,FLEN)
NAN_BOXED(2130666067,32,FLEN)
NAN_BOXED(2134557190,32,FLEN)
NAN_BOXED(3207530739,32,FLEN)
NAN_BOXED(2130666067,32,FLEN)
NAN_BOXED(2134557190,32,FLEN)
NAN_BOXED(3207530739,32,FLEN)
NAN_BOXED(2130666067,32,FLEN)
NAN_BOXED(2134557190,32,FLEN)
NAN_BOXED(3207530739,32,FLEN)
NAN_BOXED(2130666067,32,FLEN)
NAN_BOXED(2132643313,32,FLEN)
NAN_BOXED(3190712518,32,FLEN)
NAN_BOXED(2111221227,32,FLEN)
NAN_BOXED(2132643313,32,FLEN)
NAN_BOXED(3190712518,32,FLEN)
NAN_BOXED(2111221227,32,FLEN)
NAN_BOXED(2132643313,32,FLEN)
NAN_BOXED(3190712518,32,FLEN)
NAN_BOXED(2111221227,32,FLEN)
NAN_BOXED(2132643313,32,FLEN)
NAN_BOXED(3190712518,32,FLEN)
NAN_BOXED(2111221227,32,FLEN)
NAN_BOXED(2132643313,32,FLEN)
NAN_BOXED(3190712518,32,FLEN)
NAN_BOXED(2111221227,32,FLEN)
NAN_BOXED(2129652758,32,FLEN)
NAN_BOXED(3205573352,32,FLEN)
NAN_BOXED(2122845423,32,FLEN)
NAN_BOXED(2129652758,32,FLEN)
NAN_BOXED(3205573352,32,FLEN)
NAN_BOXED(2122845423,32,FLEN)
NAN_BOXED(2129652758,32,FLEN)
NAN_BOXED(3205573352,32,FLEN)
NAN_BOXED(2122845423,32,FLEN)
NAN_BOXED(2129652758,32,FLEN)
NAN_BOXED(3205573352,32,FLEN)
NAN_BOXED(2122845423,32,FLEN)
NAN_BOXED(2129652758,32,FLEN)
NAN_BOXED(3205573352,32,FLEN)
NAN_BOXED(2122845423,32,FLEN)
NAN_BOXED(2117369493,32,FLEN)
NAN_BOXED(3216343600,32,FLEN)
NAN_BOXED(2122314388,32,FLEN)
NAN_BOXED(2117369493,32,FLEN)
NAN_BOXED(3216343600,32,FLEN)
NAN_BOXED(2122314388,32,FLEN)
NAN_BOXED(2117369493,32,FLEN)
NAN_BOXED(3216343600,32,FLEN)
NAN_BOXED(2122314388,32,FLEN)
NAN_BOXED(2117369493,32,FLEN)
NAN_BOXED(3216343600,32,FLEN)
NAN_BOXED(2122314388,32,FLEN)
NAN_BOXED(2117369493,32,FLEN)
NAN_BOXED(3216343600,32,FLEN)
NAN_BOXED(2122314388,32,FLEN)
NAN_BOXED(2129374925,32,FLEN)
NAN_BOXED(3205590679,32,FLEN)
NAN_BOXED(2122703827,32,FLEN)
NAN_BOXED(2129374925,32,FLEN)
NAN_BOXED(3205590679,32,FLEN)
NAN_BOXED(2122703827,32,FLEN)
NAN_BOXED(2129374925,32,FLEN)
NAN_BOXED(3205590679,32,FLEN)
NAN_BOXED(2122703827,32,FLEN)
NAN_BOXED(2129374925,32,FLEN)
NAN_BOXED(3205590679,32,FLEN)
NAN_BOXED(2122703827,32,FLEN)
NAN_BOXED(2129374925,32,FLEN)
NAN_BOXED(3205590679,32,FLEN)
NAN_BOXED(2122703827,32,FLEN)
NAN_BOXED(2123636880,32,FLEN)
NAN_BOXED(3199538055,32,FLEN)
NAN_BOXED(2110885030,32,FLEN)
NAN_BOXED(2123636880,32,FLEN)
NAN_BOXED(3199538055,32,FLEN)
NAN_BOXED(2110885030,32,FLEN)
NAN_BOXED(2123636880,32,FLEN)
NAN_BOXED(3199538055,32,FLEN)
NAN_BOXED(2110885030,32,FLEN)
NAN_BOXED(2123636880,32,FLEN)
NAN_BOXED(3199538055,32,FLEN)
NAN_BOXED(2110885030,32,FLEN)
NAN_BOXED(2123636880,32,FLEN)
NAN_BOXED(3199538055,32,FLEN)
NAN_BOXED(2110885030,32,FLEN)
NAN_BOXED(2132775488,32,FLEN)
NAN_BOXED(3209138433,32,FLEN)
NAN_BOXED(2130233893,32,FLEN)
NAN_BOXED(2132775488,32,FLEN)
NAN_BOXED(3209138433,32,FLEN)
NAN_BOXED(2130233893,32,FLEN)
NAN_BOXED(2132775488,32,FLEN)
NAN_BOXED(3209138433,32,FLEN)
NAN_BOXED(2130233893,32,FLEN)
NAN_BOXED(2132775488,32,FLEN)
NAN_BOXED(3209138433,32,FLEN)
NAN_BOXED(2130233893,32,FLEN)
NAN_BOXED(2132775488,32,FLEN)
NAN_BOXED(3209138433,32,FLEN)
NAN_BOXED(2130233893,32,FLEN)
NAN_BOXED(2132440816,32,FLEN)
NAN_BOXED(3205097714,32,FLEN)
NAN_BOXED(2124835945,32,FLEN)
NAN_BOXED(2132440816,32,FLEN)
NAN_BOXED(3205097714,32,FLEN)
NAN_BOXED(2124835945,32,FLEN)
NAN_BOXED(2132440816,32,FLEN)
NAN_BOXED(3205097714,32,FLEN)
NAN_BOXED(2124835945,32,FLEN)
NAN_BOXED(2132440816,32,FLEN)
NAN_BOXED(3205097714,32,FLEN)
NAN_BOXED(2124835945,32,FLEN)
NAN_BOXED(2132440816,32,FLEN)
NAN_BOXED(3205097714,32,FLEN)
NAN_BOXED(2124835945,32,FLEN)
NAN_BOXED(2133033131,32,FLEN)
NAN_BOXED(3206254933,32,FLEN)
NAN_BOXED(2126952308,32,FLEN)
NAN_BOXED(2133033131,32,FLEN)
NAN_BOXED(3206254933,32,FLEN)
NAN_BOXED(2126952308,32,FLEN)
NAN_BOXED(2133033131,32,FLEN)
NAN_BOXED(3206254933,32,FLEN)
NAN_BOXED(2126952308,32,FLEN)
NAN_BOXED(2133033131,32,FLEN)
NAN_BOXED(3206254933,32,FLEN)
NAN_BOXED(2126952308,32,FLEN)
NAN_BOXED(2133033131,32,FLEN)
NAN_BOXED(3206254933,32,FLEN)
NAN_BOXED(2126952308,32,FLEN)
NAN_BOXED(2128843157,32,FLEN)
NAN_BOXED(3212288547,32,FLEN)
NAN_BOXED(2128355736,32,FLEN)
NAN_BOXED(2128843157,32,FLEN)
NAN_BOXED(3212288547,32,FLEN)
NAN_BOXED(2128355736,32,FLEN)
NAN_BOXED(2128843157,32,FLEN)
NAN_BOXED(3212288547,32,FLEN)
NAN_BOXED(2128355736,32,FLEN)
NAN_BOXED(2128843157,32,FLEN)
NAN_BOXED(3212288547,32,FLEN)
NAN_BOXED(2128355736,32,FLEN)
NAN_BOXED(2128843157,32,FLEN)
NAN_BOXED(3212288547,32,FLEN)
NAN_BOXED(2128355736,32,FLEN)
NAN_BOXED(2131631192,32,FLEN)
NAN_BOXED(3205024675,32,FLEN)
NAN_BOXED(2123882548,32,FLEN)
NAN_BOXED(2131631192,32,FLEN)
NAN_BOXED(3205024675,32,FLEN)
NAN_BOXED(2123882548,32,FLEN)
NAN_BOXED(2131631192,32,FLEN)
NAN_BOXED(3205024675,32,FLEN)
NAN_BOXED(2123882548,32,FLEN)
NAN_BOXED(2131631192,32,FLEN)
NAN_BOXED(3205024675,32,FLEN)
NAN_BOXED(2123882548,32,FLEN)
NAN_BOXED(2131631192,32,FLEN)
NAN_BOXED(3205024675,32,FLEN)
NAN_BOXED(2123882548,32,FLEN)
NAN_BOXED(2106916213,32,FLEN)
NAN_BOXED(3199143894,32,FLEN)
NAN_BOXED(2093729014,32,FLEN)
NAN_BOXED(2106916213,32,FLEN)
NAN_BOXED(3199143894,32,FLEN)
NAN_BOXED(2093729014,32,FLEN)
NAN_BOXED(2106916213,32,FLEN)
NAN_BOXED(3199143894,32,FLEN)
NAN_BOXED(2093729014,32,FLEN)
NAN_BOXED(2106916213,32,FLEN)
NAN_BOXED(3199143894,32,FLEN)
NAN_BOXED(2093729014,32,FLEN)
NAN_BOXED(2106916213,32,FLEN)
NAN_BOXED(3199143894,32,FLEN)
NAN_BOXED(2093729014,32,FLEN)
NAN_BOXED(2115728111,32,FLEN)
NAN_BOXED(3192363239,32,FLEN)
NAN_BOXED(2096260705,32,FLEN)
NAN_BOXED(2115728111,32,FLEN)
NAN_BOXED(3192363239,32,FLEN)
NAN_BOXED(2096260705,32,FLEN)
NAN_BOXED(2115728111,32,FLEN)
NAN_BOXED(3192363239,32,FLEN)
NAN_BOXED(2096260705,32,FLEN)
NAN_BOXED(2115728111,32,FLEN)
NAN_BOXED(3192363239,32,FLEN)
NAN_BOXED(2096260705,32,FLEN)
NAN_BOXED(2115728111,32,FLEN)
NAN_BOXED(3192363239,32,FLEN)
NAN_BOXED(2096260705,32,FLEN)
NAN_BOXED(2133507271,32,FLEN)
NAN_BOXED(3205134306,32,FLEN)
NAN_BOXED(2126033777,32,FLEN)
NAN_BOXED(2133507271,32,FLEN)
NAN_BOXED(3205134306,32,FLEN)
NAN_BOXED(2126033777,32,FLEN)
NAN_BOXED(2133507271,32,FLEN)
NAN_BOXED(3205134306,32,FLEN)
NAN_BOXED(2126033777,32,FLEN)
NAN_BOXED(2133507271,32,FLEN)
NAN_BOXED(3205134306,32,FLEN)
NAN_BOXED(2126033777,32,FLEN)
NAN_BOXED(2133507271,32,FLEN)
NAN_BOXED(3205134306,32,FLEN)
NAN_BOXED(2126033777,32,FLEN)
NAN_BOXED(2131885207,32,FLEN)
NAN_BOXED(3122106952,32,FLEN)
NAN_BOXED(2041372369,32,FLEN)
NAN_BOXED(2131885207,32,FLEN)
NAN_BOXED(3122106952,32,FLEN)
NAN_BOXED(2041372369,32,FLEN)
NAN_BOXED(2131885207,32,FLEN)
NAN_BOXED(3122106952,32,FLEN)
NAN_BOXED(2041372369,32,FLEN)
NAN_BOXED(2131885207,32,FLEN)
NAN_BOXED(3122106952,32,FLEN)
NAN_BOXED(2041372369,32,FLEN)
NAN_BOXED(2131885207,32,FLEN)
NAN_BOXED(3122106952,32,FLEN)
NAN_BOXED(2041372369,32,FLEN)
NAN_BOXED(2125761847,32,FLEN)
NAN_BOXED(3220322783,32,FLEN)
NAN_BOXED(2133513807,32,FLEN)
NAN_BOXED(2125761847,32,FLEN)
NAN_BOXED(3220322783,32,FLEN)
NAN_BOXED(2133513807,32,FLEN)
NAN_BOXED(2125761847,32,FLEN)
NAN_BOXED(3220322783,32,FLEN)
NAN_BOXED(2133513807,32,FLEN)
NAN_BOXED(2125761847,32,FLEN)
NAN_BOXED(3220322783,32,FLEN)
NAN_BOXED(2133513807,32,FLEN)
NAN_BOXED(2125761847,32,FLEN)
NAN_BOXED(3220322783,32,FLEN)
NAN_BOXED(2133513807,32,FLEN)
NAN_BOXED(2129518572,32,FLEN)
NAN_BOXED(3207668798,32,FLEN)
NAN_BOXED(2124716416,32,FLEN)
NAN_BOXED(2129518572,32,FLEN)
NAN_BOXED(3207668798,32,FLEN)
NAN_BOXED(2124716416,32,FLEN)
NAN_BOXED(2129518572,32,FLEN)
NAN_BOXED(3207668798,32,FLEN)
NAN_BOXED(2124716416,32,FLEN)
NAN_BOXED(2129518572,32,FLEN)
NAN_BOXED(3207668798,32,FLEN)
NAN_BOXED(2124716416,32,FLEN)
NAN_BOXED(2129518572,32,FLEN)
NAN_BOXED(3207668798,32,FLEN)
NAN_BOXED(2124716416,32,FLEN)
NAN_BOXED(2129605049,32,FLEN)
NAN_BOXED(3214437890,32,FLEN)
NAN_BOXED(2131651664,32,FLEN)
NAN_BOXED(2129605049,32,FLEN)
NAN_BOXED(3214437890,32,FLEN)
NAN_BOXED(2131651664,32,FLEN)
NAN_BOXED(2129605049,32,FLEN)
NAN_BOXED(3214437890,32,FLEN)
NAN_BOXED(2131651664,32,FLEN)
NAN_BOXED(2129605049,32,FLEN)
NAN_BOXED(3214437890,32,FLEN)
NAN_BOXED(2131651664,32,FLEN)
NAN_BOXED(2132323674,32,FLEN)
NAN_BOXED(3214390295,32,FLEN)
NAN_BOXED(2134176592,32,FLEN)
NAN_BOXED(2132323674,32,FLEN)
NAN_BOXED(3214390295,32,FLEN)
NAN_BOXED(2134176592,32,FLEN)
NAN_BOXED(2132323674,32,FLEN)
NAN_BOXED(3214390295,32,FLEN)
NAN_BOXED(2134176592,32,FLEN)
NAN_BOXED(2132323674,32,FLEN)
NAN_BOXED(3214390295,32,FLEN)
NAN_BOXED(2134176592,32,FLEN)
NAN_BOXED(2132323674,32,FLEN)
NAN_BOXED(3214390295,32,FLEN)
NAN_BOXED(2134176592,32,FLEN)
NAN_BOXED(2131627902,32,FLEN)
NAN_BOXED(3214905125,32,FLEN)
NAN_BOXED(2133923357,32,FLEN)
NAN_BOXED(2131627902,32,FLEN)
NAN_BOXED(3214905125,32,FLEN)
NAN_BOXED(2133923357,32,FLEN)
NAN_BOXED(2125733724,32,FLEN)
NAN_BOXED(3204878830,32,FLEN)
NAN_BOXED(2117951024,32,FLEN)
NAN_BOXED(2125733724,32,FLEN)
NAN_BOXED(3204878830,32,FLEN)
NAN_BOXED(2117951024,32,FLEN)
NAN_BOXED(2127613405,32,FLEN)
NAN_BOXED(3213302456,32,FLEN)
NAN_BOXED(2128372918,32,FLEN)
NAN_BOXED(2082547115,32,FLEN)
NAN_BOXED(3246667259,32,FLEN)
NAN_BOXED(2116448975,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 44*((SIGALIGN)/4),4,0xdeadbeef


signature_x11_0:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x11_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x11_2:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x11_3:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x11_4:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x11_5:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x11_6:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x11_7:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x11_8:
    .fill 178*((SIGALIGN)/4),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*XLEN/32,4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

RVMODEL_DATA_END
