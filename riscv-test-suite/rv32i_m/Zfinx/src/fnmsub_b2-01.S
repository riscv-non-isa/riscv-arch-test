
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.9.0
// timestamp : Fri Oct  7 12:46:38 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /home/reg/tools/riscv-ctg/sample_cgfs/dataset.cgf \
//                  --cgf /home/reg/tools/riscv-ctg/sample_cgfs/sample_cgfs_fext/RV32Zfinx/fnmsub.s.cgf \
 \
//                  -- xlen 32  \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fnmsub.s instruction of the RISC-V RV32_Zfinx,RV32_Zdinx,RV64_Zfinx,RV64_Zdinx extension for the fnmsub_b2 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32I_Zfinx,RV32I_Zdinx,RV64I_Zfinx,RV64I_Zdinx")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*Zfinx.*);def TEST_CASE_1=True;",fnmsub_b2)

RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_0:
// rs2 == rd != rs1 and rs2 == rd != rs3 and rs3 != rs1, rs1==x30, rs2==x31, rs3==x29, rd==x31,fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x85 and fm2 == 0x0953c7 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000030 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x31; op3:x29; dest:x31; op1val:0x0; op2val:0xc28953c7;
op3val:0x30; valaddr_reg:x3; val_offset:0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x31, x29, dyn, 0, 0, x3, 0*FLEN/8, x4, x1, x2)

inst_1:
// rs2 == rs3 != rs1 and rs2 == rs3 != rd and rd != rs1, rs1==x31, rs2==x28, rs3==x28, rd==x30,fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x54ff53 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000011 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x31; op2:x28; op3:x28; dest:x30; op1val:0x0; op2val:0xc1d4ff53;
op3val:0xc1d4ff53; valaddr_reg:x3; val_offset:3*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x30, x31, x28, x28, dyn, 0, 0, x3, 3*FLEN/8, x4, x1, x2)

inst_2:
// rs1 == rs2 != rs3 and rs1 == rs2 != rd and rd != rs3, rs1==x27, rs2==x27, rs3==x31, rd==x29,fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x86 and fm2 == 0x051f94 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00005b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x27; op2:x27; op3:x31; dest:x29; op1val:0x0; op2val:0x0;
op3val:0x5b; valaddr_reg:x3; val_offset:6*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x29, x27, x27, x31, dyn, 0, 0, x3, 6*FLEN/8, x4, x1, x2)

inst_3:
// rs1 == rs3 != rs2 and rs1 == rs3 != rd and rd != rs2, rs1==x26, rs2==x30, rs3==x26, rd==x28,fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x54ff53 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00000b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x26; op2:x30; op3:x26; dest:x28; op1val:0x0; op2val:0xc1d4ff53;
op3val:0x0; valaddr_reg:x3; val_offset:9*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x28, x26, x30, x26, dyn, 0, 0, x3, 9*FLEN/8, x4, x1, x2)

inst_4:
// rs3 == rd != rs1 and rs3 == rd != rs2 and rs2 != rs1, rs1==x29, rs2==x26, rs3==x27, rd==x27,fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x85 and fm2 == 0x068650 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000020 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x29; op2:x26; op3:x27; dest:x27; op1val:0x0; op2val:0xc2868650;
op3val:0x20; valaddr_reg:x3; val_offset:12*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x27, x29, x26, x27, dyn, 0, 0, x3, 12*FLEN/8, x4, x1, x2)

inst_5:
// rs1 == rs2 == rd != rs3, rs1==x25, rs2==x25, rs3==x30, rd==x25,fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x85 and fm2 == 0x6b6b0b and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000034 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x25; op2:x25; op3:x30; dest:x25; op1val:0x0; op2val:0x0;
op3val:0x34; valaddr_reg:x3; val_offset:15*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x25, x25, x25, x30, dyn, 0, 0, x3, 15*FLEN/8, x4, x1, x2)

inst_6:
// rs1 == rd != rs2 and rs1 == rd != rs3 and rs3 != rs2, rs1==x24, rs2==x29, rs3==x25, rd==x24,fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x86 and fm2 == 0x2c5c16 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00003b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x24; op2:x29; op3:x25; dest:x24; op1val:0x0; op2val:0xc32c5c16;
op3val:0x3b; valaddr_reg:x3; val_offset:18*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x24, x24, x29, x25, dyn, 0, 0, x3, 18*FLEN/8, x4, x1, x2)

inst_7:
// rs1 == rs2 == rs3 == rd, rs1==x23, rs2==x23, rs3==x23, rd==x23,fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x87 and fm2 == 0x03057b and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00003b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x23; op2:x23; op3:x23; dest:x23; op1val:0x0; op2val:0x0;
op3val:0x0; valaddr_reg:x3; val_offset:21*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x23, x23, x23, x23, dyn, 0, 0, x3, 21*FLEN/8, x4, x1, x2)

inst_8:
// rs1 == rd == rs3 != rs2, rs1==x22, rs2==x24, rs3==x22, rd==x22,fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x87 and fm2 == 0x60352f and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000040 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x22; op2:x24; op3:x22; dest:x22; op1val:0x0; op2val:0xc3e0352f;
op3val:0x0; valaddr_reg:x3; val_offset:24*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x22, x22, x24, x22, dyn, 0, 0, x3, 24*FLEN/8, x4, x1, x2)

inst_9:
// rs1 == rs2 == rs3 != rd, rs1==x21, rs2==x21, rs3==x21, rd==x26,fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x88 and fm2 == 0x459545 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000034 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x21; op2:x21; op3:x21; dest:x26; op1val:0x0; op2val:0x0;
op3val:0x0; valaddr_reg:x3; val_offset:27*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x26, x21, x21, x21, dyn, 0, 0, x3, 27*FLEN/8, x4, x1, x2)

inst_10:
// rs1 != rs2 and rs1 != rd and rs1 != rs3 and rs2 != rs3 and rs2 != rd and rs3 != rd, rs1==x28, rs2==x22, rs3==x24, rd==x21,fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x89 and fm2 == 0x3e66c4 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x28; op2:x22; op3:x24; dest:x21; op1val:0x0; op2val:0xc4be66c4;
op3val:0x3f; valaddr_reg:x3; val_offset:30*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x21, x28, x22, x24, dyn, 0, 0, x3, 30*FLEN/8, x4, x1, x2)

inst_11:
// rd == rs2 == rs3 != rs1, rs1==x19, rs2==x20, rs3==x20, rd==x20,fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x8a and fm2 == 0x3bf2fc and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000062 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x19; op2:x20; op3:x20; dest:x20; op1val:0x0; op2val:0xc53bf2fc;
op3val:0xc53bf2fc; valaddr_reg:x3; val_offset:33*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x20, x19, x20, x20, dyn, 0, 0, x3, 33*FLEN/8, x4, x1, x2)

inst_12:
// rs1==x20, rs2==x18, rs3==x17, rd==x19,fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x8b and fm2 == 0x374eaf and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00005a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x20; op2:x18; op3:x17; dest:x19; op1val:0x0; op2val:0xc5b74eaf;
op3val:0x5a; valaddr_reg:x3; val_offset:36*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x19, x20, x18, x17, dyn, 0, 0, x3, 36*FLEN/8, x4, x1, x2)

inst_13:
// rs1==x17, rs2==x19, rs3==x16, rd==x18,fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x8c and fm2 == 0x34d54c and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000043 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x17; op2:x19; op3:x16; dest:x18; op1val:0x0; op2val:0xc634d54c;
op3val:0x43; valaddr_reg:x3; val_offset:39*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x18, x17, x19, x16, dyn, 0, 0, x3, 39*FLEN/8, x4, x1, x2)

inst_14:
// rs1==x18, rs2==x16, rs3==x19, rd==x17,fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x8d and fm2 == 0x3408b5 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00003d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x18; op2:x16; op3:x19; dest:x17; op1val:0x0; op2val:0xc6b408b5;
op3val:0x3d; valaddr_reg:x3; val_offset:42*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x17, x18, x16, x19, dyn, 0, 0, x3, 42*FLEN/8, x4, x1, x2)

inst_15:
// rs1==x15, rs2==x17, rs3==x18, rd==x16,fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x8e and fm2 == 0x33e012 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00005d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x15; op2:x17; op3:x18; dest:x16; op1val:0x0; op2val:0xc733e012;
op3val:0x5d; valaddr_reg:x3; val_offset:45*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x16, x15, x17, x18, dyn, 0, 0, x3, 45*FLEN/8, x4, x1, x2)

inst_16:
// rs1==x16, rs2==x14, rs3==x13, rd==x15,fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x8f and fm2 == 0x33994e and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000055 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x16; op2:x14; op3:x13; dest:x15; op1val:0x0; op2val:0xc7b3994e;
op3val:0x55; valaddr_reg:x3; val_offset:48*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x15, x16, x14, x13, dyn, 0, 0, x3, 48*FLEN/8, x4, x1, x2)

inst_17:
// rs1==x13, rs2==x15, rs3==x12, rd==x14,fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x90 and fm2 == 0x33624d and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00000d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x13; op2:x15; op3:x12; dest:x14; op1val:0x0; op2val:0xc833624d;
op3val:0xd; valaddr_reg:x3; val_offset:51*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x14, x13, x15, x12, dyn, 0, 0, x3, 51*FLEN/8, x4, x1, x2)

inst_18:
// rs1==x14, rs2==x12, rs3==x15, rd==x13,fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x91 and fm2 == 0x336682 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000032 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x14; op2:x12; op3:x15; dest:x13; op1val:0x0; op2val:0xc8b36682;
op3val:0x32; valaddr_reg:x3; val_offset:54*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x13, x14, x12, x15, dyn, 0, 0, x3, 54*FLEN/8, x4, x1, x2)

inst_19:
// rs1==x11, rs2==x13, rs3==x14, rd==x12,fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x92 and fm2 == 0x335ef9 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00000e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x11; op2:x13; op3:x14; dest:x12; op1val:0x0; op2val:0xc9335ef9;
op3val:0xe; valaddr_reg:x3; val_offset:57*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x12, x11, x13, x14, dyn, 0, 0, x3, 57*FLEN/8, x4, x1, x2)

inst_20:
// rs1==x12, rs2==x10, rs3==x9, rd==x11,fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x93 and fm2 == 0x335fad and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00002c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x12; op2:x10; op3:x9; dest:x11; op1val:0x0; op2val:0xc9b35fad;
op3val:0x2c; valaddr_reg:x3; val_offset:60*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x11, x12, x10, x9, dyn, 0, 0, x3, 60*FLEN/8, x4, x1, x2)
RVTEST_VALBASEUPD(x13,test_dataset_1)

inst_21:
// rs1==x9, rs2==x11, rs3==x8, rd==x10,fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x94 and fm2 == 0x335fb2 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000059 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x9; op2:x11; op3:x8; dest:x10; op1val:0x0; op2val:0xca335fb2;
op3val:0x59; valaddr_reg:x13; val_offset:0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x10, x9, x11, x8, dyn, 0, 0, x13, 0*FLEN/8, x14, x1, x2)

inst_22:
// rs1==x10, rs2==x8, rs3==x11, rd==x9,fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x95 and fm2 == 0x335e73 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000040 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x10; op2:x8; op3:x11; dest:x9; op1val:0x0; op2val:0xcab35e73;
op3val:0x40; valaddr_reg:x13; val_offset:3*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x9, x10, x8, x11, dyn, 0, 0, x13, 3*FLEN/8, x14, x1, x12)

inst_23:
// rs1==x7, rs2==x9, rs3==x10, rd==x8,fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x85 and fm2 == 0x4f6465 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00004b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x7; op2:x9; op3:x10; dest:x8; op1val:0x0; op2val:0xc2cf6465;
op3val:0x4b; valaddr_reg:x13; val_offset:6*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x8, x7, x9, x10, dyn, 0, 0, x13, 6*FLEN/8, x14, x1, x12)
RVTEST_SIGBASE(x9,signature_x9_0)

inst_24:
// rs1==x8, rs2==x6, rs3==x5, rd==x7,fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x85 and fm2 == 0x54ff53 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00004e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x8; op2:x6; op3:x5; dest:x7; op1val:0x0; op2val:0xc2d4ff53;
op3val:0x4e; valaddr_reg:x13; val_offset:9*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x7, x8, x6, x5, dyn, 0, 0, x13, 9*FLEN/8, x14, x9, x12)

inst_25:
// rs1==x5, rs2==x7, rs3==x4, rd==x6,fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x85 and fm2 == 0x38f8ad and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000046 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x5; op2:x7; op3:x4; dest:x6; op1val:0x0; op2val:0xc2b8f8ad;
op3val:0x46; valaddr_reg:x13; val_offset:12*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x6, x5, x7, x4, dyn, 0, 0, x13, 12*FLEN/8, x14, x9, x12)

inst_26:
// rs1==x6, rs2==x4, rs3==x7, rd==x5,fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x85 and fm2 == 0x1a2491 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x6; op2:x4; op3:x7; dest:x5; op1val:0x0; op2val:0xc29a2491;
op3val:0x3f; valaddr_reg:x13; val_offset:15*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x5, x6, x4, x7, dyn, 0, 0, x13, 15*FLEN/8, x14, x9, x12)

inst_27:
// rs1==x3, rs2==x5, rs3==x6, rd==x4,fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x068650 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000013 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x3; op2:x5; op3:x6; dest:x4; op1val:0x0; op2val:0xc0868650;
op3val:0x13; valaddr_reg:x13; val_offset:18*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x4, x3, x5, x6, dyn, 0, 0, x13, 18*FLEN/8, x14, x9, x12)

inst_28:
// rs1==x4, rs2==x2, rs3==x1, rd==x3,fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x85 and fm2 == 0x2dc2d2 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00005e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x4; op2:x2; op3:x1; dest:x3; op1val:0x0; op2val:0xc2adc2d2;
op3val:0x5e; valaddr_reg:x13; val_offset:21*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x3, x4, x2, x1, dyn, 0, 0, x13, 21*FLEN/8, x14, x9, x12)

inst_29:
// rs1==x1, rs2==x3, rs3==x0, rd==x2,fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x84 and fm2 == 0x17571a and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000025 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x1; op2:x3; op3:x0; dest:x2; op1val:0x0; op2val:0x4217571a;
op3val:0x0; valaddr_reg:x13; val_offset:24*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x2, x1, x3, x0, dyn, 0, 0, x13, 24*FLEN/8, x14, x9, x12)

inst_30:
// rs1==x2, rs2==x0, rs3==x3, rd==x1,fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x85 and fm2 == 0x4c96ee and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000037 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x2; op2:x0; op3:x3; dest:x1; op1val:0x0; op2val:0x0;
op3val:0x37; valaddr_reg:x13; val_offset:27*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x1, x2, x0, x3, dyn, 0, 0, x13, 27*FLEN/8, x14, x9, x12)

inst_31:
// rs1==x0,fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x87 and fm2 == 0x24a70f and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000015 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x0; op2:x30; op3:x29; dest:x31; op1val:0x0; op2val:0x43a4a70f;
op3val:0x15; valaddr_reg:x13; val_offset:30*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x0, x30, x29, dyn, 0, 0, x13, 30*FLEN/8, x14, x9, x12)

inst_32:
// rs2==x1,fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x88 and fm2 == 0x1b319d and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000045 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x1; op3:x29; dest:x31; op1val:0x0; op2val:0x441b319d;
op3val:0x45; valaddr_reg:x13; val_offset:33*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x1, x29, dyn, 0, 0, x13, 33*FLEN/8, x14, x9, x12)

inst_33:
// rs3==x2,fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x89 and fm2 == 0x239a02 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00005a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x2; dest:x31; op1val:0x0; op2val:0x44a39a02;
op3val:0x5a; valaddr_reg:x13; val_offset:36*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x2, dyn, 0, 0, x13, 36*FLEN/8, x14, x9, x12)

inst_34:
// rd==x0,fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x8a and fm2 == 0x2c18d3 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000053 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x31; op2:x30; op3:x29; dest:x0; op1val:0x0; op2val:0x452c18d3;
op3val:0x53; valaddr_reg:x13; val_offset:39*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x0, x31, x30, x29, dyn, 0, 0, x13, 39*FLEN/8, x14, x9, x12)

inst_35:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x8b and fm2 == 0x308513 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000041 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0x45b08513;
op3val:0x41; valaddr_reg:x13; val_offset:42*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 42*FLEN/8, x14, x9, x12)

inst_36:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x8c and fm2 == 0x327d8a and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000028 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0x46327d8a;
op3val:0x28; valaddr_reg:x13; val_offset:45*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 45*FLEN/8, x14, x9, x12)

inst_37:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x8d and fm2 == 0x32dcd4 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00002e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0x46b2dcd4;
op3val:0x2e; valaddr_reg:x13; val_offset:48*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 48*FLEN/8, x14, x9, x12)

inst_38:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x8e and fm2 == 0x330143 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000042 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0x47330143;
op3val:0x42; valaddr_reg:x13; val_offset:51*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 51*FLEN/8, x14, x9, x12)

inst_39:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x8f and fm2 == 0x333035 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000041 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0x47b33035;
op3val:0x41; valaddr_reg:x13; val_offset:54*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 54*FLEN/8, x14, x9, x12)

inst_40:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x90 and fm2 == 0x334dfc and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00002d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0x48334dfc;
op3val:0x2d; valaddr_reg:x13; val_offset:57*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 57*FLEN/8, x14, x9, x12)

inst_41:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x91 and fm2 == 0x335d66 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000002 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0x48b35d66;
op3val:0x2; valaddr_reg:x13; val_offset:60*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 60*FLEN/8, x14, x9, x12)

inst_42:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x92 and fm2 == 0x3359e5 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00002c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0x493359e5;
op3val:0x2c; valaddr_reg:x13; val_offset:63*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 63*FLEN/8, x14, x9, x12)

inst_43:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x93 and fm2 == 0x335c37 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000023 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0x49b35c37;
op3val:0x23; valaddr_reg:x13; val_offset:66*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 66*FLEN/8, x14, x9, x12)

inst_44:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x94 and fm2 == 0x335c8b and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000037 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0x4a335c8b;
op3val:0x37; valaddr_reg:x13; val_offset:69*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 69*FLEN/8, x14, x9, x12)

inst_45:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x95 and fm2 == 0x335d36 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000031 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0x4ab35d36;
op3val:0x31; valaddr_reg:x13; val_offset:72*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 72*FLEN/8, x14, x9, x12)

inst_46:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x00002e and fs3 == 0 and fe3 == 0x7f and fm3 == 0x00005b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x3f800000; op2val:0xc000002e;
op3val:0x3f80005b; valaddr_reg:x13; val_offset:75*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 75*FLEN/8, x14, x9, x12)

inst_47:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x00000c and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000017 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x3f800000; op2val:0xc000000c;
op3val:0x3f800017; valaddr_reg:x13; val_offset:78*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 78*FLEN/8, x14, x9, x12)

inst_48:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x00000a and fs3 == 0 and fe3 == 0x7f and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x3f800000; op2val:0xc000000a;
op3val:0x3f80000f; valaddr_reg:x13; val_offset:81*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 81*FLEN/8, x14, x9, x12)

inst_49:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x00002e and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000055 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x3f800000; op2val:0xc000002e;
op3val:0x3f800055; valaddr_reg:x13; val_offset:84*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 84*FLEN/8, x14, x9, x12)

inst_50:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x000015 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x00001a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x3f800000; op2val:0xc0000015;
op3val:0x3f80001a; valaddr_reg:x13; val_offset:87*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 87*FLEN/8, x14, x9, x12)

inst_51:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x000024 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000027 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x3f800000; op2val:0xc0000024;
op3val:0x3f800027; valaddr_reg:x13; val_offset:90*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 90*FLEN/8, x14, x9, x12)

inst_52:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x000021 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000002 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x3f800000; op2val:0xc0000021;
op3val:0x3f800002; valaddr_reg:x13; val_offset:93*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 93*FLEN/8, x14, x9, x12)

inst_53:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x000056 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x00002c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x3f800000; op2val:0xc0000056;
op3val:0x3f80002c; valaddr_reg:x13; val_offset:96*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 96*FLEN/8, x14, x9, x12)

inst_54:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x0000a4 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000049 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x3f800000; op2val:0xc00000a4;
op3val:0x3f800049; valaddr_reg:x13; val_offset:99*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 99*FLEN/8, x14, x9, x12)

inst_55:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x00010f and fs3 == 0 and fe3 == 0x7f and fm3 == 0x00001e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x3f800000; op2val:0xc000010f;
op3val:0x3f80001e; valaddr_reg:x13; val_offset:102*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102*FLEN/8, x14, x9, x12)

inst_56:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x00021a and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000035 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x3f800000; op2val:0xc000021a;
op3val:0x3f800035; valaddr_reg:x13; val_offset:105*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 105*FLEN/8, x14, x9, x12)

inst_57:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x00041a and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000035 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x3f800000; op2val:0xc000041a;
op3val:0x3f800035; valaddr_reg:x13; val_offset:108*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 108*FLEN/8, x14, x9, x12)

inst_58:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x000806 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x00000b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x3f800000; op2val:0xc0000806;
op3val:0x3f80000b; valaddr_reg:x13; val_offset:111*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 111*FLEN/8, x14, x9, x12)

inst_59:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x001012 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000025 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x3f800000; op2val:0xc0001012;
op3val:0x3f800025; valaddr_reg:x13; val_offset:114*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 114*FLEN/8, x14, x9, x12)

inst_60:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x002002 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000005 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x3f800000; op2val:0xc0002002;
op3val:0x3f800005; valaddr_reg:x13; val_offset:117*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 117*FLEN/8, x14, x9, x12)

inst_61:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x00402a and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000055 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x3f800000; op2val:0xc000402a;
op3val:0x3f800055; valaddr_reg:x13; val_offset:120*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 120*FLEN/8, x14, x9, x12)

inst_62:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x008031 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000062 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x3f800000; op2val:0xc0008031;
op3val:0x3f800062; valaddr_reg:x13; val_offset:123*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 123*FLEN/8, x14, x9, x12)

inst_63:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x01000a and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000014 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x3f800000; op2val:0xc001000a;
op3val:0x3f800014; valaddr_reg:x13; val_offset:126*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 126*FLEN/8, x14, x9, x12)

inst_64:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x02002e and fs3 == 0 and fe3 == 0x7f and fm3 == 0x00005b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x3f800000; op2val:0xc002002e;
op3val:0x3f80005b; valaddr_reg:x13; val_offset:129*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 129*FLEN/8, x14, x9, x12)

inst_65:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x040027 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x00004e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x3f800000; op2val:0xc0040027;
op3val:0x3f80004e; valaddr_reg:x13; val_offset:132*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 132*FLEN/8, x14, x9, x12)

inst_66:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x08000c and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000019 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x3f800000; op2val:0xc008000c;
op3val:0x3f800019; valaddr_reg:x13; val_offset:135*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 135*FLEN/8, x14, x9, x12)

inst_67:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x100009 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000012 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x3f800000; op2val:0xc0100009;
op3val:0x3f800012; valaddr_reg:x13; val_offset:138*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 138*FLEN/8, x14, x9, x12)

inst_68:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x200019 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000032 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x3f800000; op2val:0xc0200019;
op3val:0x3f800032; valaddr_reg:x13; val_offset:141*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 141*FLEN/8, x14, x9, x12)

inst_69:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x6e and fm2 == 0x3e0000 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000060 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x3f800000; op2val:0xb73e0000;
op3val:0x3f800060; valaddr_reg:x13; val_offset:144*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 144*FLEN/8, x14, x9, x12)

inst_70:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x6d and fm2 == 0x2c0000 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x00002d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x3f800000; op2val:0xb6ac0000;
op3val:0x3f80002d; valaddr_reg:x13; val_offset:147*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 147*FLEN/8, x14, x9, x12)

inst_71:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x6d and fm2 == 0x2c0000 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x00002f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x3f800000; op2val:0xb6ac0000;
op3val:0x3f80002f; valaddr_reg:x13; val_offset:150*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 150*FLEN/8, x14, x9, x12)

inst_72:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x6e and fm2 == 0x160000 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000053 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x3f800000; op2val:0xb7160000;
op3val:0x3f800053; valaddr_reg:x13; val_offset:153*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 153*FLEN/8, x14, x9, x12)

inst_73:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x6b and fm2 == 0x300000 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x00001b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x3f800000; op2val:0xb5b00000;
op3val:0x3f80001b; valaddr_reg:x13; val_offset:156*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 156*FLEN/8, x14, x9, x12)

inst_74:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x6d and fm2 == 0x400000 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000050 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x3f800000; op2val:0xb6c00000;
op3val:0x3f800050; valaddr_reg:x13; val_offset:159*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 159*FLEN/8, x14, x9, x12)

inst_75:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x6d and fm2 == 0x080000 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000062 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x3f800000; op2val:0xb6880000;
op3val:0x3f800062; valaddr_reg:x13; val_offset:162*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 162*FLEN/8, x14, x9, x12)

inst_76:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x6e and fm2 == 0x520000 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000017 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x3f800000; op2val:0x37520000;
op3val:0x3f800017; valaddr_reg:x13; val_offset:165*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 165*FLEN/8, x14, x9, x12)

inst_77:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x6f and fm2 == 0x480000 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000038 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x3f800000; op2val:0x37c80000;
op3val:0x3f800038; valaddr_reg:x13; val_offset:168*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 168*FLEN/8, x14, x9, x12)

inst_78:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x70 and fm2 == 0x780000 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000010 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x3f800000; op2val:0x38780000;
op3val:0x3f800010; valaddr_reg:x13; val_offset:171*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 171*FLEN/8, x14, x9, x12)

inst_79:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x71 and fm2 == 0x798000 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x00001a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x3f800000; op2val:0x38f98000;
op3val:0x3f80001a; valaddr_reg:x13; val_offset:174*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 174*FLEN/8, x14, x9, x12)

inst_80:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x72 and fm2 == 0x780000 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000040 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x3f800000; op2val:0x39780000;
op3val:0x3f800040; valaddr_reg:x13; val_offset:177*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 177*FLEN/8, x14, x9, x12)

inst_81:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x73 and fm2 == 0x7ec000 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000014 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x3f800000; op2val:0x39fec000;
op3val:0x3f800014; valaddr_reg:x13; val_offset:180*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 180*FLEN/8, x14, x9, x12)

inst_82:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x74 and fm2 == 0x7f8000 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000010 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x3f800000; op2val:0x3a7f8000;
op3val:0x3f800010; valaddr_reg:x13; val_offset:183*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 183*FLEN/8, x14, x9, x12)

inst_83:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x75 and fm2 == 0x7ed400 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x00004b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x3f800000; op2val:0x3afed400;
op3val:0x3f80004b; valaddr_reg:x13; val_offset:186*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 186*FLEN/8, x14, x9, x12)

inst_84:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x76 and fm2 == 0x7f5a00 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000053 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x3f800000; op2val:0x3b7f5a00;
op3val:0x3f800053; valaddr_reg:x13; val_offset:189*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 189*FLEN/8, x14, x9, x12)

inst_85:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x77 and fm2 == 0x7fa300 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x00005d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x3f800000; op2val:0x3bffa300;
op3val:0x3f80005d; valaddr_reg:x13; val_offset:192*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 192*FLEN/8, x14, x9, x12)

inst_86:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x78 and fm2 == 0x7fdf00 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000042 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x3f800000; op2val:0x3c7fdf00;
op3val:0x3f800042; valaddr_reg:x13; val_offset:195*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 195*FLEN/8, x14, x9, x12)

inst_87:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x79 and fm2 == 0x7fe900 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x00005c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x3f800000; op2val:0x3cffe900;
op3val:0x3f80005c; valaddr_reg:x13; val_offset:198*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 198*FLEN/8, x14, x9, x12)

inst_88:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7a and fm2 == 0x7ff6e0 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000049 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x3f800000; op2val:0x3d7ff6e0;
op3val:0x3f800049; valaddr_reg:x13; val_offset:201*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 201*FLEN/8, x14, x9, x12)

inst_89:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7b and fm2 == 0x7ffd10 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x00002f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x3f800000; op2val:0x3dfffd10;
op3val:0x3f80002f; valaddr_reg:x13; val_offset:204*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 204*FLEN/8, x14, x9, x12)

inst_90:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x7fff18 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x00001d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x3f800000; op2val:0x3e7fff18;
op3val:0x3f80001d; valaddr_reg:x13; val_offset:207*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 207*FLEN/8, x14, x9, x12)

inst_91:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x7fff98 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x00001a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x3f800000; op2val:0x3effff98;
op3val:0x3f80001a; valaddr_reg:x13; val_offset:210*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 210*FLEN/8, x14, x9, x12)

inst_92:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x85 and fm2 == 0x248cf6 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00003a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0xc2a48cf6;
op3val:0x3a; valaddr_reg:x13; val_offset:213*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 213*FLEN/8, x14, x9, x12)

inst_93:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x3e939b and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00000e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0xc1be939b;
op3val:0xe; valaddr_reg:x13; val_offset:216*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 216*FLEN/8, x14, x9, x12)

inst_94:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x86 and fm2 == 0x0953c7 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00005d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0xc30953c7;
op3val:0x5d; valaddr_reg:x13; val_offset:219*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 219*FLEN/8, x14, x9, x12)

inst_95:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x86 and fm2 == 0x0c213e and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00005b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0xc30c213e;
op3val:0x5b; valaddr_reg:x13; val_offset:222*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 222*FLEN/8, x14, x9, x12)

inst_96:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x86 and fm2 == 0x0d87f9 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000054 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0xc30d87f9;
op3val:0x54; valaddr_reg:x13; val_offset:225*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 225*FLEN/8, x14, x9, x12)

inst_97:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x85 and fm2 == 0x796e5e and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000038 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0xc2f96e5e;
op3val:0x38; valaddr_reg:x13; val_offset:228*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 228*FLEN/8, x14, x9, x12)

inst_98:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x86 and fm2 == 0x619beb and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000060 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0xc3619beb;
op3val:0x60; valaddr_reg:x13; val_offset:231*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 231*FLEN/8, x14, x9, x12)

inst_99:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x87 and fm2 == 0x07ed0b and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000041 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0xc387ed0b;
op3val:0x41; valaddr_reg:x13; val_offset:234*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 234*FLEN/8, x14, x9, x12)

inst_100:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x87 and fm2 == 0x517e7f and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00002a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0xc3d17e7f;
op3val:0x2a; valaddr_reg:x13; val_offset:237*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 237*FLEN/8, x14, x9, x12)

inst_101:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x88 and fm2 == 0x555902 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000060 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0xc4555902;
op3val:0x60; valaddr_reg:x13; val_offset:240*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 240*FLEN/8, x14, x9, x12)

inst_102:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x89 and fm2 == 0x33b76e and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0xc4b3b76e;
op3val:0x1; valaddr_reg:x13; val_offset:243*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 243*FLEN/8, x14, x9, x12)

inst_103:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x8a and fm2 == 0x3a5f69 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00004f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0xc53a5f69;
op3val:0x4f; valaddr_reg:x13; val_offset:246*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 246*FLEN/8, x14, x9, x12)

inst_104:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x8b and fm2 == 0x33e446 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00000b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0xc5b3e446;
op3val:0xb; valaddr_reg:x13; val_offset:249*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 249*FLEN/8, x14, x9, x12)

inst_105:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x8c and fm2 == 0x3486d3 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000034 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0xc63486d3;
op3val:0x34; valaddr_reg:x13; val_offset:252*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 252*FLEN/8, x14, x9, x12)

inst_106:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x8d and fm2 == 0x344390 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000051 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0xc6b44390;
op3val:0x51; valaddr_reg:x13; val_offset:255*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 255*FLEN/8, x14, x9, x12)

inst_107:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x8e and fm2 == 0x336e90 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00000b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0xc7336e90;
op3val:0xb; valaddr_reg:x13; val_offset:258*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 258*FLEN/8, x14, x9, x12)

inst_108:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x8f and fm2 == 0x33a1b6 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000060 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0xc7b3a1b6;
op3val:0x60; valaddr_reg:x13; val_offset:261*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 261*FLEN/8, x14, x9, x12)

inst_109:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x90 and fm2 == 0x337f61 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00005f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0xc8337f61;
op3val:0x5f; valaddr_reg:x13; val_offset:264*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 264*FLEN/8, x14, x9, x12)

inst_110:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x91 and fm2 == 0x3369a9 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000043 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0xc8b369a9;
op3val:0x43; valaddr_reg:x13; val_offset:267*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 267*FLEN/8, x14, x9, x12)

inst_111:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x92 and fm2 == 0x3364ee and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000051 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0xc93364ee;
op3val:0x51; valaddr_reg:x13; val_offset:270*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 270*FLEN/8, x14, x9, x12)

inst_112:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x93 and fm2 == 0x335f75 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000026 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0xc9b35f75;
op3val:0x26; valaddr_reg:x13; val_offset:273*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 273*FLEN/8, x14, x9, x12)

inst_113:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x94 and fm2 == 0x335e57 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00001a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0xca335e57;
op3val:0x1a; valaddr_reg:x13; val_offset:276*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 276*FLEN/8, x14, x9, x12)

inst_114:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x95 and fm2 == 0x335e49 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000030 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0xcab35e49;
op3val:0x30; valaddr_reg:x13; val_offset:279*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 279*FLEN/8, x14, x9, x12)

inst_115:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x85 and fm2 == 0x5031dc and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00004b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0xc2d031dc;
op3val:0x4b; valaddr_reg:x13; val_offset:282*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 282*FLEN/8, x14, x9, x12)

inst_116:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x84 and fm2 == 0x068650 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00001b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0xc2068650;
op3val:0x1b; valaddr_reg:x13; val_offset:285*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 285*FLEN/8, x14, x9, x12)

inst_117:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x85 and fm2 == 0x00eb62 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000033 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0xc280eb62;
op3val:0x33; valaddr_reg:x13; val_offset:288*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 288*FLEN/8, x14, x9, x12)

inst_118:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x85 and fm2 == 0x5d67b8 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000058 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0xc2dd67b8;
op3val:0x58; valaddr_reg:x13; val_offset:291*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 291*FLEN/8, x14, x9, x12)

inst_119:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x85 and fm2 == 0x442e89 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000057 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0xc2c42e89;
op3val:0x57; valaddr_reg:x13; val_offset:294*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 294*FLEN/8, x14, x9, x12)

inst_120:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x85 and fm2 == 0x17571a and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000057 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0xc297571a;
op3val:0x57; valaddr_reg:x13; val_offset:297*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 297*FLEN/8, x14, x9, x12)

inst_121:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x84 and fm2 == 0x5a9a41 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00001a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0x425a9a41;
op3val:0x1a; valaddr_reg:x13; val_offset:300*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 300*FLEN/8, x14, x9, x12)

inst_122:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x85 and fm2 == 0x2af55b and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000044 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0x42aaf55b;
op3val:0x44; valaddr_reg:x13; val_offset:303*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 303*FLEN/8, x14, x9, x12)

inst_123:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x87 and fm2 == 0x1b8b4c and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000023 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0x439b8b4c;
op3val:0x23; valaddr_reg:x13; val_offset:306*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 306*FLEN/8, x14, x9, x12)

inst_124:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x88 and fm2 == 0x309049 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000009 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0x44309049;
op3val:0x9; valaddr_reg:x13; val_offset:309*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 309*FLEN/8, x14, x9, x12)

inst_125:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x89 and fm2 == 0x23137c and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00005e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0x44a3137c;
op3val:0x5e; valaddr_reg:x13; val_offset:312*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 312*FLEN/8, x14, x9, x12)

inst_126:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x8a and fm2 == 0x2eb972 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000036 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0x452eb972;
op3val:0x36; valaddr_reg:x13; val_offset:315*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 315*FLEN/8, x14, x9, x12)

inst_127:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x8b and fm2 == 0x2fe821 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000050 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0x45afe821;
op3val:0x50; valaddr_reg:x13; val_offset:318*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 318*FLEN/8, x14, x9, x12)

inst_128:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x8c and fm2 == 0x328e5b and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000026 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0x46328e5b;
op3val:0x26; valaddr_reg:x13; val_offset:321*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 321*FLEN/8, x14, x9, x12)

inst_129:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x8d and fm2 == 0x32aa62 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000041 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0x46b2aa62;
op3val:0x41; valaddr_reg:x13; val_offset:324*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 324*FLEN/8, x14, x9, x12)

inst_130:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x8e and fm2 == 0x332cb4 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000024 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0x47332cb4;
op3val:0x24; valaddr_reg:x13; val_offset:327*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 327*FLEN/8, x14, x9, x12)

inst_131:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x8f and fm2 == 0x334807 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000020 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0x47b34807;
op3val:0x20; valaddr_reg:x13; val_offset:330*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 330*FLEN/8, x14, x9, x12)

inst_132:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x90 and fm2 == 0x3352e3 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000020 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0x483352e3;
op3val:0x20; valaddr_reg:x13; val_offset:333*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 333*FLEN/8, x14, x9, x12)

inst_133:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x91 and fm2 == 0x33528a and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000041 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0x48b3528a;
op3val:0x41; valaddr_reg:x13; val_offset:336*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 336*FLEN/8, x14, x9, x12)

inst_134:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x92 and fm2 == 0x335b08 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000020 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0x49335b08;
op3val:0x20; valaddr_reg:x13; val_offset:339*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 339*FLEN/8, x14, x9, x12)

inst_135:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x93 and fm2 == 0x335a6c and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00004d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0x49b35a6c;
op3val:0x4d; valaddr_reg:x13; val_offset:342*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 342*FLEN/8, x14, x9, x12)

inst_136:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x94 and fm2 == 0x335cb8 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000030 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0x4a335cb8;
op3val:0x30; valaddr_reg:x13; val_offset:345*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 345*FLEN/8, x14, x9, x12)

inst_137:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x95 and fm2 == 0x335d9b and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00000e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0x4ab35d9b;
op3val:0xe; valaddr_reg:x13; val_offset:348*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 348*FLEN/8, x14, x9, x12)

inst_138:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x96 and fm2 == 0x335e03 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000032 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0xcb335e03;
op3val:0x32; valaddr_reg:x13; val_offset:351*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 351*FLEN/8, x14, x9, x12)

inst_139:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x96 and fm2 == 0x335e31 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000054 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0xcb335e31;
op3val:0x54; valaddr_reg:x13; val_offset:354*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 354*FLEN/8, x14, x9, x12)

inst_140:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x96 and fm2 == 0x335e1f and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000049 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0xcb335e1f;
op3val:0x49; valaddr_reg:x13; val_offset:357*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 357*FLEN/8, x14, x9, x12)

inst_141:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x96 and fm2 == 0x335dbb and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000006 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0xcb335dbb;
op3val:0x6; valaddr_reg:x13; val_offset:360*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 360*FLEN/8, x14, x9, x12)

inst_142:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x96 and fm2 == 0x335dac and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0xcb335dac;
op3val:0x3; valaddr_reg:x13; val_offset:363*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 363*FLEN/8, x14, x9, x12)

inst_143:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x96 and fm2 == 0x335e0d and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000058 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0xcb335e0d;
op3val:0x58; valaddr_reg:x13; val_offset:366*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 366*FLEN/8, x14, x9, x12)

inst_144:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x96 and fm2 == 0x335d75 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00000c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0xcb335d75;
op3val:0xc; valaddr_reg:x13; val_offset:369*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 369*FLEN/8, x14, x9, x12)

inst_145:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x96 and fm2 == 0x335d5f and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00003c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0xcb335d5f;
op3val:0x3c; valaddr_reg:x13; val_offset:372*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 372*FLEN/8, x14, x9, x12)

inst_146:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x96 and fm2 == 0x335cd0 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000056 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0xcb335cd0;
op3val:0x56; valaddr_reg:x13; val_offset:375*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 375*FLEN/8, x14, x9, x12)

inst_147:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x96 and fm2 == 0x335b57 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000049 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0xcb335b57;
op3val:0x49; valaddr_reg:x13; val_offset:378*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 378*FLEN/8, x14, x9, x12)

inst_148:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x96 and fm2 == 0x33583b and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000011 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0xcb33583b;
op3val:0x11; valaddr_reg:x13; val_offset:381*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 381*FLEN/8, x14, x9, x12)

inst_149:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x96 and fm2 == 0x3352fe and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000054 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0xcb3352fe;
op3val:0x54; valaddr_reg:x13; val_offset:384*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 384*FLEN/8, x14, x9, x12)

inst_150:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x96 and fm2 == 0x33478c and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000029 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0xcb33478c;
op3val:0x29; valaddr_reg:x13; val_offset:387*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 387*FLEN/8, x14, x9, x12)

inst_151:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x96 and fm2 == 0x3330f6 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00000b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0xcb3330f6;
op3val:0xb; valaddr_reg:x13; val_offset:390*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 390*FLEN/8, x14, x9, x12)
RVTEST_SIGBASE(x9,signature_x9_1)

inst_152:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x96 and fm2 == 0x330485 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000054 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0xcb330485;
op3val:0x54; valaddr_reg:x13; val_offset:393*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 393*FLEN/8, x14, x9, x12)

inst_153:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x96 and fm2 == 0x32aa6e and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00000a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0xcb32aa6e;
op3val:0xa; valaddr_reg:x13; val_offset:396*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 396*FLEN/8, x14, x9, x12)

inst_154:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x96 and fm2 == 0x31f785 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00005d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0xcb31f785;
op3val:0x5d; valaddr_reg:x13; val_offset:399*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 399*FLEN/8, x14, x9, x12)

inst_155:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x96 and fm2 == 0x3090b3 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00004d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0xcb3090b3;
op3val:0x4d; valaddr_reg:x13; val_offset:402*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 402*FLEN/8, x14, x9, x12)

inst_156:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x96 and fm2 == 0x2dc2f9 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00001d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0xcb2dc2f9;
op3val:0x1d; valaddr_reg:x13; val_offset:405*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 405*FLEN/8, x14, x9, x12)

inst_157:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x96 and fm2 == 0x282869 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000060 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0xcb282869;
op3val:0x60; valaddr_reg:x13; val_offset:408*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 408*FLEN/8, x14, x9, x12)

inst_158:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x96 and fm2 == 0x1cf241 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00002a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0xcb1cf241;
op3val:0x2a; valaddr_reg:x13; val_offset:411*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 411*FLEN/8, x14, x9, x12)

inst_159:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x96 and fm2 == 0x0686ac and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000043 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0xcb0686ac;
op3val:0x43; valaddr_reg:x13; val_offset:414*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 414*FLEN/8, x14, x9, x12)

inst_160:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x95 and fm2 == 0x335ec1 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00005d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0xcab35ec1;
op3val:0x5d; valaddr_reg:x13; val_offset:417*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 417*FLEN/8, x14, x9, x12)

inst_161:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x96 and fm2 == 0x335d6e and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000038 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0x4b335d6e;
op3val:0x38; valaddr_reg:x13; val_offset:420*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 420*FLEN/8, x14, x9, x12)

inst_162:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x96 and fm2 == 0x335d9e and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000015 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0x4b335d9e;
op3val:0x15; valaddr_reg:x13; val_offset:423*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 423*FLEN/8, x14, x9, x12)

inst_163:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x96 and fm2 == 0x335d72 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000032 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0x4b335d72;
op3val:0x32; valaddr_reg:x13; val_offset:426*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 426*FLEN/8, x14, x9, x12)

inst_164:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x96 and fm2 == 0x335d64 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000038 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0x4b335d64;
op3val:0x38; valaddr_reg:x13; val_offset:429*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 429*FLEN/8, x14, x9, x12)

inst_165:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x96 and fm2 == 0x335d95 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00000d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0x4b335d95;
op3val:0xd; valaddr_reg:x13; val_offset:432*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 432*FLEN/8, x14, x9, x12)

inst_166:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x96 and fm2 == 0x335d82 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00000b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0x4b335d82;
op3val:0xb; valaddr_reg:x13; val_offset:435*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 435*FLEN/8, x14, x9, x12)

inst_167:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x96 and fm2 == 0x335d44 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000017 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0x4b335d44;
op3val:0x17; valaddr_reg:x13; val_offset:438*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 438*FLEN/8, x14, x9, x12)

inst_168:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x96 and fm2 == 0x335c84 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000060 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0x4b335c84;
op3val:0x60; valaddr_reg:x13; val_offset:441*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 441*FLEN/8, x14, x9, x12)

inst_169:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x96 and fm2 == 0x335c44 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00000e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0x4b335c44;
op3val:0xe; valaddr_reg:x13; val_offset:444*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 444*FLEN/8, x14, x9, x12)

inst_170:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x96 and fm2 == 0x335ae5 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000008 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0x4b335ae5;
op3val:0x8; valaddr_reg:x13; val_offset:447*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 447*FLEN/8, x14, x9, x12)

inst_171:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x96 and fm2 == 0x335804 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000016 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0x4b335804;
op3val:0x16; valaddr_reg:x13; val_offset:450*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 450*FLEN/8, x14, x9, x12)

inst_172:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x96 and fm2 == 0x335253 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000026 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0x4b335253;
op3val:0x26; valaddr_reg:x13; val_offset:453*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 453*FLEN/8, x14, x9, x12)

inst_173:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x96 and fm2 == 0x3346cd and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00005f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0x4b3346cd;
op3val:0x5f; valaddr_reg:x13; val_offset:456*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 456*FLEN/8, x14, x9, x12)

inst_174:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x96 and fm2 == 0x3330d2 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0x4b3330d2;
op3val:0xf; valaddr_reg:x13; val_offset:459*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 459*FLEN/8, x14, x9, x12)

inst_175:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x96 and fm2 == 0x3303f6 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000012 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0x4b3303f6;
op3val:0x12; valaddr_reg:x13; val_offset:462*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 462*FLEN/8, x14, x9, x12)

inst_176:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x96 and fm2 == 0x32aa38 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00001d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0x4b32aa38;
op3val:0x1d; valaddr_reg:x13; val_offset:465*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 465*FLEN/8, x14, x9, x12)

inst_177:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x96 and fm2 == 0x31f6db and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00001c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0x4b31f6db;
op3val:0x1c; valaddr_reg:x13; val_offset:468*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 468*FLEN/8, x14, x9, x12)

inst_178:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x96 and fm2 == 0x309027 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000017 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0x4b309027;
op3val:0x17; valaddr_reg:x13; val_offset:471*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 471*FLEN/8, x14, x9, x12)

inst_179:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x96 and fm2 == 0x2dc2b7 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000012 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0x4b2dc2b7;
op3val:0x12; valaddr_reg:x13; val_offset:474*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 474*FLEN/8, x14, x9, x12)

inst_180:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x96 and fm2 == 0x2827d7 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000008 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0x4b2827d7;
op3val:0x8; valaddr_reg:x13; val_offset:477*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 477*FLEN/8, x14, x9, x12)

inst_181:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x96 and fm2 == 0x1cf19d and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00004b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0x4b1cf19d;
op3val:0x4b; valaddr_reg:x13; val_offset:480*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 480*FLEN/8, x14, x9, x12)

inst_182:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x96 and fm2 == 0x068603 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000036 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0x4b068603;
op3val:0x36; valaddr_reg:x13; val_offset:483*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 483*FLEN/8, x14, x9, x12)

inst_183:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x95 and fm2 == 0x335ceb and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00004b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0x4ab35ceb;
op3val:0x4b; valaddr_reg:x13; val_offset:486*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 486*FLEN/8, x14, x9, x12)

inst_184:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x00002d and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000059 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x800000; op2val:0xc000002d;
op3val:0x800059; valaddr_reg:x13; val_offset:489*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 489*FLEN/8, x14, x9, x12)

inst_185:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x000018 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x00002f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x800000; op2val:0xc0000018;
op3val:0x80002f; valaddr_reg:x13; val_offset:492*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 492*FLEN/8, x14, x9, x12)

inst_186:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x000016 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000028 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x800000; op2val:0xc0000016;
op3val:0x800028; valaddr_reg:x13; val_offset:495*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 495*FLEN/8, x14, x9, x12)

inst_187:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x000030 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000058 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x800000; op2val:0xc0000030;
op3val:0x800058; valaddr_reg:x13; val_offset:498*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 498*FLEN/8, x14, x9, x12)

inst_188:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x000010 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000011 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x800000; op2val:0xc0000010;
op3val:0x800011; valaddr_reg:x13; val_offset:501*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 501*FLEN/8, x14, x9, x12)

inst_189:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x000030 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000040 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x800000; op2val:0xc0000030;
op3val:0x800040; valaddr_reg:x13; val_offset:504*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 504*FLEN/8, x14, x9, x12)

inst_190:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x00002e and fs3 == 0 and fe3 == 0x01 and fm3 == 0x00001c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x800000; op2val:0xc000002e;
op3val:0x80001c; valaddr_reg:x13; val_offset:507*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 507*FLEN/8, x14, x9, x12)

inst_191:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x000072 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000063 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x800000; op2val:0xc0000072;
op3val:0x800063; valaddr_reg:x13; val_offset:510*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 510*FLEN/8, x14, x9, x12)

inst_192:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x0000a0 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x800000; op2val:0xc00000a0;
op3val:0x80003f; valaddr_reg:x13; val_offset:513*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 513*FLEN/8, x14, x9, x12)

inst_193:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x000108 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000010 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x800000; op2val:0xc0000108;
op3val:0x800010; valaddr_reg:x13; val_offset:516*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 516*FLEN/8, x14, x9, x12)

inst_194:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x00021a and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000033 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x800000; op2val:0xc000021a;
op3val:0x800033; valaddr_reg:x13; val_offset:519*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 519*FLEN/8, x14, x9, x12)

inst_195:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x000402 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000005 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x800000; op2val:0xc0000402;
op3val:0x800005; valaddr_reg:x13; val_offset:522*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 522*FLEN/8, x14, x9, x12)

inst_196:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x000820 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000041 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x800000; op2val:0xc0000820;
op3val:0x800041; valaddr_reg:x13; val_offset:525*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 525*FLEN/8, x14, x9, x12)

inst_197:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x001016 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x00002d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x800000; op2val:0xc0001016;
op3val:0x80002d; valaddr_reg:x13; val_offset:528*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 528*FLEN/8, x14, x9, x12)

inst_198:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x00202d and fs3 == 0 and fe3 == 0x01 and fm3 == 0x00005a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x800000; op2val:0xc000202d;
op3val:0x80005a; valaddr_reg:x13; val_offset:531*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 531*FLEN/8, x14, x9, x12)

inst_199:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x004028 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000050 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x800000; op2val:0xc0004028;
op3val:0x800050; valaddr_reg:x13; val_offset:534*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 534*FLEN/8, x14, x9, x12)

inst_200:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x00802c and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000059 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x800000; op2val:0xc000802c;
op3val:0x800059; valaddr_reg:x13; val_offset:537*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 537*FLEN/8, x14, x9, x12)

inst_201:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x010006 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x00000b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x800000; op2val:0xc0010006;
op3val:0x80000b; valaddr_reg:x13; val_offset:540*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 540*FLEN/8, x14, x9, x12)

inst_202:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x02001d and fs3 == 0 and fe3 == 0x01 and fm3 == 0x00003a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x800000; op2val:0xc002001d;
op3val:0x80003a; valaddr_reg:x13; val_offset:543*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 543*FLEN/8, x14, x9, x12)

inst_203:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x040032 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000063 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x800000; op2val:0xc0040032;
op3val:0x800063; valaddr_reg:x13; val_offset:546*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 546*FLEN/8, x14, x9, x12)

inst_204:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x080024 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000049 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x800000; op2val:0xc0080024;
op3val:0x800049; valaddr_reg:x13; val_offset:549*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 549*FLEN/8, x14, x9, x12)

inst_205:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x100018 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000030 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x800000; op2val:0xc0100018;
op3val:0x800030; valaddr_reg:x13; val_offset:552*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 552*FLEN/8, x14, x9, x12)

inst_206:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x200026 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x00004d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x800000; op2val:0xc0200026;
op3val:0x80004d; valaddr_reg:x13; val_offset:555*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 555*FLEN/8, x14, x9, x12)

inst_207:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x6d and fm2 == 0x340000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x00002e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x800000; op2val:0xb6b40000;
op3val:0x80002e; valaddr_reg:x13; val_offset:558*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 558*FLEN/8, x14, x9, x12)

inst_208:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x6d and fm2 == 0x1c0000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000029 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x800000; op2val:0xb69c0000;
op3val:0x800029; valaddr_reg:x13; val_offset:561*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 561*FLEN/8, x14, x9, x12)

inst_209:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x6d and fm2 == 0x680000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x00003e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x800000; op2val:0xb6e80000;
op3val:0x80003e; valaddr_reg:x13; val_offset:564*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 564*FLEN/8, x14, x9, x12)

inst_210:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x6e and fm2 == 0x160000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000053 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x800000; op2val:0xb7160000;
op3val:0x800053; valaddr_reg:x13; val_offset:567*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 567*FLEN/8, x14, x9, x12)

inst_211:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x6d and fm2 == 0x380000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x00003e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x800000; op2val:0xb6b80000;
op3val:0x80003e; valaddr_reg:x13; val_offset:570*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 570*FLEN/8, x14, x9, x12)

inst_212:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x6d and fm2 == 0x280000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x00004a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x800000; op2val:0xb6a80000;
op3val:0x80004a; valaddr_reg:x13; val_offset:573*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 573*FLEN/8, x14, x9, x12)

inst_213:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x6c and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000030 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x800000; op2val:0x36000000;
op3val:0x800030; valaddr_reg:x13; val_offset:576*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 576*FLEN/8, x14, x9, x12)

inst_214:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x6e and fm2 == 0x200000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000030 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x800000; op2val:0x37200000;
op3val:0x800030; valaddr_reg:x13; val_offset:579*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 579*FLEN/8, x14, x9, x12)

inst_215:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x6f and fm2 == 0x210000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x00005f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x800000; op2val:0x37a10000;
op3val:0x80005f; valaddr_reg:x13; val_offset:582*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 582*FLEN/8, x14, x9, x12)

inst_216:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x70 and fm2 == 0x528000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x00005b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x800000; op2val:0x38528000;
op3val:0x80005b; valaddr_reg:x13; val_offset:585*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 585*FLEN/8, x14, x9, x12)

inst_217:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x71 and fm2 == 0x7e0000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000008 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x800000; op2val:0x38fe0000;
op3val:0x800008; valaddr_reg:x13; val_offset:588*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 588*FLEN/8, x14, x9, x12)

inst_218:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x72 and fm2 == 0x7c4000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x00001e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x800000; op2val:0x397c4000;
op3val:0x80001e; valaddr_reg:x13; val_offset:591*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 591*FLEN/8, x14, x9, x12)

inst_219:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x73 and fm2 == 0x7c2000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x00003e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x800000; op2val:0x39fc2000;
op3val:0x80003e; valaddr_reg:x13; val_offset:594*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 594*FLEN/8, x14, x9, x12)

inst_220:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x74 and fm2 == 0x7e1800 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x00003d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x800000; op2val:0x3a7e1800;
op3val:0x80003d; valaddr_reg:x13; val_offset:597*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 597*FLEN/8, x14, x9, x12)

inst_221:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x75 and fm2 == 0x7f6400 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000027 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x800000; op2val:0x3aff6400;
op3val:0x800027; valaddr_reg:x13; val_offset:600*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 600*FLEN/8, x14, x9, x12)

inst_222:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x76 and fm2 == 0x7f5a00 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000053 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x800000; op2val:0x3b7f5a00;
op3val:0x800053; valaddr_reg:x13; val_offset:603*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 603*FLEN/8, x14, x9, x12)

inst_223:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x77 and fm2 == 0x7ffd00 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x800000; op2val:0x3bfffd00;
op3val:0x800003; valaddr_reg:x13; val_offset:606*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 606*FLEN/8, x14, x9, x12)

inst_224:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x78 and fm2 == 0x7fd080 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x00005f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x800000; op2val:0x3c7fd080;
op3val:0x80005f; valaddr_reg:x13; val_offset:609*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 609*FLEN/8, x14, x9, x12)

inst_225:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x79 and fm2 == 0x7fed40 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x00004b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x800000; op2val:0x3cffed40;
op3val:0x80004b; valaddr_reg:x13; val_offset:612*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 612*FLEN/8, x14, x9, x12)

inst_226:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7a and fm2 == 0x7ff8a0 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x00003b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x800000; op2val:0x3d7ff8a0;
op3val:0x80003b; valaddr_reg:x13; val_offset:615*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 615*FLEN/8, x14, x9, x12)

inst_227:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7b and fm2 == 0x7ffda0 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000026 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x800000; op2val:0x3dfffda0;
op3val:0x800026; valaddr_reg:x13; val_offset:618*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 618*FLEN/8, x14, x9, x12)

inst_228:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x7ffe00 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000040 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x800000; op2val:0x3e7ffe00;
op3val:0x800040; valaddr_reg:x13; val_offset:621*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 621*FLEN/8, x14, x9, x12)

inst_229:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x7ffeac and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000055 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x800000; op2val:0x3efffeac;
op3val:0x800055; valaddr_reg:x13; val_offset:624*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 624*FLEN/8, x14, x9, x12)

inst_230:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x40001f and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000040 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f000000; op2val:0xc040001f;
op3val:0x7f000040; valaddr_reg:x13; val_offset:627*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 627*FLEN/8, x14, x9, x12)

inst_231:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x400014 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x00002c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f000000; op2val:0xc0400014;
op3val:0x7f00002c; valaddr_reg:x13; val_offset:630*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 630*FLEN/8, x14, x9, x12)

inst_232:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x400023 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x00004b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f000000; op2val:0xc0400023;
op3val:0x7f00004b; valaddr_reg:x13; val_offset:633*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 633*FLEN/8, x14, x9, x12)

inst_233:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x400013 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x00002f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f000000; op2val:0xc0400013;
op3val:0x7f00002f; valaddr_reg:x13; val_offset:636*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 636*FLEN/8, x14, x9, x12)

inst_234:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x40000f and fs3 == 0 and fe3 == 0xfe and fm3 == 0x00002f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f000000; op2val:0xc040000f;
op3val:0x7f00002f; valaddr_reg:x13; val_offset:639*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 639*FLEN/8, x14, x9, x12)

inst_235:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x400014 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x00004a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f000000; op2val:0xc0400014;
op3val:0x7f00004a; valaddr_reg:x13; val_offset:642*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 642*FLEN/8, x14, x9, x12)

inst_236:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x3fffed and fs3 == 0 and fe3 == 0xfe and fm3 == 0x00001b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f000000; op2val:0xc03fffed;
op3val:0x7f00001b; valaddr_reg:x13; val_offset:645*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 645*FLEN/8, x14, x9, x12)

inst_237:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x3fffc9 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000013 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f000000; op2val:0xc03fffc9;
op3val:0x7f000013; valaddr_reg:x13; val_offset:648*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 648*FLEN/8, x14, x9, x12)

inst_238:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x3fff86 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x00000c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f000000; op2val:0xc03fff86;
op3val:0x7f00000c; valaddr_reg:x13; val_offset:651*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 651*FLEN/8, x14, x9, x12)

inst_239:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x3fff0e and fs3 == 0 and fe3 == 0xfe and fm3 == 0x00001c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f000000; op2val:0xc03fff0e;
op3val:0x7f00001c; valaddr_reg:x13; val_offset:654*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 654*FLEN/8, x14, x9, x12)

inst_240:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x3ffe28 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000052 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f000000; op2val:0xc03ffe28;
op3val:0x7f000052; valaddr_reg:x13; val_offset:657*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 657*FLEN/8, x14, x9, x12)

inst_241:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x3ffc10 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000021 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f000000; op2val:0xc03ffc10;
op3val:0x7f000021; valaddr_reg:x13; val_offset:660*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 660*FLEN/8, x14, x9, x12)

inst_242:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x3ff807 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f000000; op2val:0xc03ff807;
op3val:0x7f00000f; valaddr_reg:x13; val_offset:663*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 663*FLEN/8, x14, x9, x12)

inst_243:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x3ff002 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000005 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f000000; op2val:0xc03ff002;
op3val:0x7f000005; valaddr_reg:x13; val_offset:666*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 666*FLEN/8, x14, x9, x12)

inst_244:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x3fe02e and fs3 == 0 and fe3 == 0xfe and fm3 == 0x00005c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f000000; op2val:0xc03fe02e;
op3val:0x7f00005c; valaddr_reg:x13; val_offset:669*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 669*FLEN/8, x14, x9, x12)

inst_245:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x3fc014 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000029 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f000000; op2val:0xc03fc014;
op3val:0x7f000029; valaddr_reg:x13; val_offset:672*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 672*FLEN/8, x14, x9, x12)

inst_246:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x3f8002 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000004 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f000000; op2val:0xc03f8002;
op3val:0x7f000004; valaddr_reg:x13; val_offset:675*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 675*FLEN/8, x14, x9, x12)

inst_247:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x3f002f and fs3 == 0 and fe3 == 0xfe and fm3 == 0x00005f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f000000; op2val:0xc03f002f;
op3val:0x7f00005f; valaddr_reg:x13; val_offset:678*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 678*FLEN/8, x14, x9, x12)

inst_248:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x3e002f and fs3 == 0 and fe3 == 0xfe and fm3 == 0x00005f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f000000; op2val:0xc03e002f;
op3val:0x7f00005f; valaddr_reg:x13; val_offset:681*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 681*FLEN/8, x14, x9, x12)

inst_249:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x3c0024 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x00004a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f000000; op2val:0xc03c0024;
op3val:0x7f00004a; valaddr_reg:x13; val_offset:684*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 684*FLEN/8, x14, x9, x12)

inst_250:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x380028 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000052 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f000000; op2val:0xc0380028;
op3val:0x7f000052; valaddr_reg:x13; val_offset:687*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 687*FLEN/8, x14, x9, x12)

inst_251:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x300000 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000002 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f000000; op2val:0xc0300000;
op3val:0x7f000002; valaddr_reg:x13; val_offset:690*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 690*FLEN/8, x14, x9, x12)

inst_252:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x20000e and fs3 == 0 and fe3 == 0xfe and fm3 == 0x00001c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f000000; op2val:0xc020000e;
op3val:0x7f00001c; valaddr_reg:x13; val_offset:693*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 693*FLEN/8, x14, x9, x12)

inst_253:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x7fffaa and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000029 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f000000; op2val:0x3f7fffaa;
op3val:0x7f000029; valaddr_reg:x13; val_offset:696*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 696*FLEN/8, x14, x9, x12)

inst_254:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x7fff8e and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000036 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f000000; op2val:0x3f7fff8e;
op3val:0x7f000036; valaddr_reg:x13; val_offset:699*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 699*FLEN/8, x14, x9, x12)

inst_255:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x7ffff4 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f000000; op2val:0x3f7ffff4;
op3val:0x7f000001; valaddr_reg:x13; val_offset:702*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 702*FLEN/8, x14, x9, x12)

inst_256:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x7fff68 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000043 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f000000; op2val:0x3f7fff68;
op3val:0x7f000043; valaddr_reg:x13; val_offset:705*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 705*FLEN/8, x14, x9, x12)

inst_257:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x7fff62 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x00003e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f000000; op2val:0x3f7fff62;
op3val:0x7f00003e; valaddr_reg:x13; val_offset:708*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 708*FLEN/8, x14, x9, x12)

inst_258:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x7fffa0 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f000000; op2val:0x3f7fffa0;
op3val:0x7f00000f; valaddr_reg:x13; val_offset:711*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 711*FLEN/8, x14, x9, x12)

inst_259:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x7ffefc and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000041 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f000000; op2val:0x3f7ffefc;
op3val:0x7f000041; valaddr_reg:x13; val_offset:714*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 714*FLEN/8, x14, x9, x12)

inst_260:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x7ffeea and fs3 == 0 and fe3 == 0xfe and fm3 == 0x00000a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f000000; op2val:0x3f7ffeea;
op3val:0x7f00000a; valaddr_reg:x13; val_offset:717*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 717*FLEN/8, x14, x9, x12)

inst_261:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x7ffd54 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000055 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f000000; op2val:0x3f7ffd54;
op3val:0x7f000055; valaddr_reg:x13; val_offset:720*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 720*FLEN/8, x14, x9, x12)

inst_262:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x7ffb64 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x00004d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f000000; op2val:0x3f7ffb64;
op3val:0x7f00004d; valaddr_reg:x13; val_offset:723*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 723*FLEN/8, x14, x9, x12)

inst_263:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x7ff754 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000055 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f000000; op2val:0x3f7ff754;
op3val:0x7f000055; valaddr_reg:x13; val_offset:726*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 726*FLEN/8, x14, x9, x12)

inst_264:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x7fefbc and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000021 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f000000; op2val:0x3f7fefbc;
op3val:0x7f000021; valaddr_reg:x13; val_offset:729*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 729*FLEN/8, x14, x9, x12)

inst_265:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x7fdf4c and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000059 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f000000; op2val:0x3f7fdf4c;
op3val:0x7f000059; valaddr_reg:x13; val_offset:732*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 732*FLEN/8, x14, x9, x12)

inst_266:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x7fbff6 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000004 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f000000; op2val:0x3f7fbff6;
op3val:0x7f000004; valaddr_reg:x13; val_offset:735*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 735*FLEN/8, x14, x9, x12)

inst_267:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x7f7fec and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000009 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f000000; op2val:0x3f7f7fec;
op3val:0x7f000009; valaddr_reg:x13; val_offset:738*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 738*FLEN/8, x14, x9, x12)

inst_268:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x7effac and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000029 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f000000; op2val:0x3f7effac;
op3val:0x7f000029; valaddr_reg:x13; val_offset:741*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 741*FLEN/8, x14, x9, x12)

inst_269:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x7dffc4 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x00001d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f000000; op2val:0x3f7dffc4;
op3val:0x7f00001d; valaddr_reg:x13; val_offset:744*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 744*FLEN/8, x14, x9, x12)

inst_270:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x7bff98 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000033 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f000000; op2val:0x3f7bff98;
op3val:0x7f000033; valaddr_reg:x13; val_offset:747*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 747*FLEN/8, x14, x9, x12)

inst_271:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x77ffba and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000022 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f000000; op2val:0x3f77ffba;
op3val:0x7f000022; valaddr_reg:x13; val_offset:750*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 750*FLEN/8, x14, x9, x12)

inst_272:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x6fff78 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000043 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f000000; op2val:0x3f6fff78;
op3val:0x7f000043; valaddr_reg:x13; val_offset:753*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 753*FLEN/8, x14, x9, x12)

inst_273:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x5fff62 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x00004e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f000000; op2val:0x3f5fff62;
op3val:0x7f00004e; valaddr_reg:x13; val_offset:756*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 756*FLEN/8, x14, x9, x12)

inst_274:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x3fff96 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000034 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f000000; op2val:0x3f3fff96;
op3val:0x7f000034; valaddr_reg:x13; val_offset:759*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 759*FLEN/8, x14, x9, x12)

inst_275:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x7ffe90 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x00005b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f000000; op2val:0x3efffe90;
op3val:0x7f00005b; valaddr_reg:x13; val_offset:762*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 762*FLEN/8, x14, x9, x12)

inst_276:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x85 and fm2 == 0x0953c7 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000030 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0xc28953c7;
op3val:0x30; valaddr_reg:x13; val_offset:765*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 765*FLEN/8, x14, x9, x12)

inst_277:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x54ff53 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000011 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0xc1d4ff53;
op3val:0x11; valaddr_reg:x13; val_offset:768*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 768*FLEN/8, x14, x9, x12)

inst_278:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x86 and fm2 == 0x051f94 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00005b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0xc3051f94;
op3val:0x5b; valaddr_reg:x13; val_offset:771*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 771*FLEN/8, x14, x9, x12)

inst_279:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x54ff53 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00000b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0xc1d4ff53;
op3val:0xb; valaddr_reg:x13; val_offset:774*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 774*FLEN/8, x14, x9, x12)
RVTEST_SIGBASE(x9,signature_x9_2)

inst_280:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x85 and fm2 == 0x068650 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000020 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0xc2868650;
op3val:0x20; valaddr_reg:x13; val_offset:777*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 777*FLEN/8, x14, x9, x12)

inst_281:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x85 and fm2 == 0x6b6b0b and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000034 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0xc2eb6b0b;
op3val:0x34; valaddr_reg:x13; val_offset:780*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 780*FLEN/8, x14, x9, x12)

inst_282:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x86 and fm2 == 0x2c5c16 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00003b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0xc32c5c16;
op3val:0x3b; valaddr_reg:x13; val_offset:783*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 783*FLEN/8, x14, x9, x12)

inst_283:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x87 and fm2 == 0x03057b and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00003b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0xc383057b;
op3val:0x3b; valaddr_reg:x13; val_offset:786*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 786*FLEN/8, x14, x9, x12)

inst_284:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x87 and fm2 == 0x60352f and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000040 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0xc3e0352f;
op3val:0x40; valaddr_reg:x13; val_offset:789*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 789*FLEN/8, x14, x9, x12)

inst_285:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x88 and fm2 == 0x459545 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000034 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0xc4459545;
op3val:0x34; valaddr_reg:x13; val_offset:792*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 792*FLEN/8, x14, x9, x12)

inst_286:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x8a and fm2 == 0x3bf2fc and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000062 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0xc53bf2fc;
op3val:0x62; valaddr_reg:x13; val_offset:795*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 795*FLEN/8, x14, x9, x12)

inst_287:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x84 and fm2 == 0x17571a and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000025 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0x4217571a;
op3val:0x25; valaddr_reg:x13; val_offset:798*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 798*FLEN/8, x14, x9, x12)

inst_288:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x85 and fm2 == 0x4c96ee and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000037 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0x42cc96ee;
op3val:0x37; valaddr_reg:x13; val_offset:801*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 801*FLEN/8, x14, x9, x12)

inst_289:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x87 and fm2 == 0x24a70f and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000015 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0x43a4a70f;
op3val:0x15; valaddr_reg:x13; val_offset:804*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 804*FLEN/8, x14, x9, x12)

inst_290:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x8a and fm2 == 0x2c18d3 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000053 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0x452c18d3;
op3val:0x53; valaddr_reg:x13; val_offset:807*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 807*FLEN/8, x14, x9, x12)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3263779783,32,FLEN)
NAN_BOXED(48,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3251961683,32,FLEN)
NAN_BOXED(3251961683,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(91,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3251961683,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3263596112,32,FLEN)
NAN_BOXED(32,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(52,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3274464278,32,FLEN)
NAN_BOXED(59,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3286250799,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3300812484,32,FLEN)
NAN_BOXED(63,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3309040380,32,FLEN)
NAN_BOXED(3309040380,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3317124783,32,FLEN)
NAN_BOXED(90,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3325351244,32,FLEN)
NAN_BOXED(67,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3333687477,32,FLEN)
NAN_BOXED(61,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3342065682,32,FLEN)
NAN_BOXED(93,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3350436174,32,FLEN)
NAN_BOXED(85,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3358810701,32,FLEN)
NAN_BOXED(13,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3367200386,32,FLEN)
NAN_BOXED(50,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3375587065,32,FLEN)
NAN_BOXED(14,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3383975853,32,FLEN)
NAN_BOXED(44,32,FLEN)
test_dataset_1:
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3392364466,32,FLEN)
NAN_BOXED(89,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3400752755,32,FLEN)
NAN_BOXED(64,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3268371557,32,FLEN)
NAN_BOXED(75,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3268738899,32,FLEN)
NAN_BOXED(78,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3266902189,32,FLEN)
NAN_BOXED(70,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3264881809,32,FLEN)
NAN_BOXED(63,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3230041680,32,FLEN)
NAN_BOXED(19,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3266167506,32,FLEN)
NAN_BOXED(94,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1108825882,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(55,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1134864143,32,FLEN)
NAN_BOXED(21,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1142632861,32,FLEN)
NAN_BOXED(69,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1151572482,32,FLEN)
NAN_BOXED(90,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1160517843,32,FLEN)
NAN_BOXED(83,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1169196307,32,FLEN)
NAN_BOXED(65,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1177714058,32,FLEN)
NAN_BOXED(40,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1186127060,32,FLEN)
NAN_BOXED(46,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1194524995,32,FLEN)
NAN_BOXED(66,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1202925621,32,FLEN)
NAN_BOXED(65,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1211321852,32,FLEN)
NAN_BOXED(45,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1219714406,32,FLEN)
NAN_BOXED(2,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1228102117,32,FLEN)
NAN_BOXED(44,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1236491319,32,FLEN)
NAN_BOXED(35,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1244880011,32,FLEN)
NAN_BOXED(55,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1253268790,32,FLEN)
NAN_BOXED(49,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(3221225518,32,FLEN)
NAN_BOXED(1065353307,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(3221225484,32,FLEN)
NAN_BOXED(1065353239,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(3221225482,32,FLEN)
NAN_BOXED(1065353231,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(3221225518,32,FLEN)
NAN_BOXED(1065353301,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(3221225493,32,FLEN)
NAN_BOXED(1065353242,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(3221225508,32,FLEN)
NAN_BOXED(1065353255,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(3221225505,32,FLEN)
NAN_BOXED(1065353218,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(3221225558,32,FLEN)
NAN_BOXED(1065353260,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(3221225636,32,FLEN)
NAN_BOXED(1065353289,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(3221225743,32,FLEN)
NAN_BOXED(1065353246,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(3221226010,32,FLEN)
NAN_BOXED(1065353269,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(3221226522,32,FLEN)
NAN_BOXED(1065353269,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(3221227526,32,FLEN)
NAN_BOXED(1065353227,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(3221229586,32,FLEN)
NAN_BOXED(1065353253,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(3221233666,32,FLEN)
NAN_BOXED(1065353221,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(3221241898,32,FLEN)
NAN_BOXED(1065353301,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(3221258289,32,FLEN)
NAN_BOXED(1065353314,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(3221291018,32,FLEN)
NAN_BOXED(1065353236,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(3221356590,32,FLEN)
NAN_BOXED(1065353307,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(3221487655,32,FLEN)
NAN_BOXED(1065353294,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(3221749772,32,FLEN)
NAN_BOXED(1065353241,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(3222274057,32,FLEN)
NAN_BOXED(1065353234,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(3223322649,32,FLEN)
NAN_BOXED(1065353266,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(3074293760,32,FLEN)
NAN_BOXED(1065353312,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(3064725504,32,FLEN)
NAN_BOXED(1065353261,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(3064725504,32,FLEN)
NAN_BOXED(1065353263,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(3071672320,32,FLEN)
NAN_BOXED(1065353299,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(3048210432,32,FLEN)
NAN_BOXED(1065353243,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(3066036224,32,FLEN)
NAN_BOXED(1065353296,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(3062366208,32,FLEN)
NAN_BOXED(1065353314,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(928120832,32,FLEN)
NAN_BOXED(1065353239,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(935854080,32,FLEN)
NAN_BOXED(1065353272,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(947388416,32,FLEN)
NAN_BOXED(1065353232,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(955875328,32,FLEN)
NAN_BOXED(1065353242,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(964165632,32,FLEN)
NAN_BOXED(1065353280,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(972996608,32,FLEN)
NAN_BOXED(1065353236,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(981434368,32,FLEN)
NAN_BOXED(1065353232,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(989778944,32,FLEN)
NAN_BOXED(1065353291,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(998201856,32,FLEN)
NAN_BOXED(1065353299,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(1006609152,32,FLEN)
NAN_BOXED(1065353309,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(1015013120,32,FLEN)
NAN_BOXED(1065353282,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(1023404288,32,FLEN)
NAN_BOXED(1065353308,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(1031796448,32,FLEN)
NAN_BOXED(1065353289,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(1040186640,32,FLEN)
NAN_BOXED(1065353263,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(1048575768,32,FLEN)
NAN_BOXED(1065353245,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(1056964504,32,FLEN)
NAN_BOXED(1065353242,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3265563894,32,FLEN)
NAN_BOXED(58,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3250492315,32,FLEN)
NAN_BOXED(14,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3272168391,32,FLEN)
NAN_BOXED(93,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3272352062,32,FLEN)
NAN_BOXED(91,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3272443897,32,FLEN)
NAN_BOXED(84,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3271126622,32,FLEN)
NAN_BOXED(56,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3277954027,32,FLEN)
NAN_BOXED(96,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3280465163,32,FLEN)
NAN_BOXED(65,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3285286527,32,FLEN)
NAN_BOXED(42,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3293927682,32,FLEN)
NAN_BOXED(96,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3300112238,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3308937065,32,FLEN)
NAN_BOXED(79,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3316900934,32,FLEN)
NAN_BOXED(11,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3325331155,32,FLEN)
NAN_BOXED(52,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3333702544,32,FLEN)
NAN_BOXED(81,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3342036624,32,FLEN)
NAN_BOXED(11,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3350438326,32,FLEN)
NAN_BOXED(96,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3358818145,32,FLEN)
NAN_BOXED(95,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3367201193,32,FLEN)
NAN_BOXED(67,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3375588590,32,FLEN)
NAN_BOXED(81,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3383975797,32,FLEN)
NAN_BOXED(38,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3392364119,32,FLEN)
NAN_BOXED(26,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3400752713,32,FLEN)
NAN_BOXED(48,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3268424156,32,FLEN)
NAN_BOXED(75,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3255207504,32,FLEN)
NAN_BOXED(27,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3263228770,32,FLEN)
NAN_BOXED(51,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3269289912,32,FLEN)
NAN_BOXED(88,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3267636873,32,FLEN)
NAN_BOXED(87,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3264698138,32,FLEN)
NAN_BOXED(87,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1113233985,32,FLEN)
NAN_BOXED(26,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1118500187,32,FLEN)
NAN_BOXED(68,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1134267212,32,FLEN)
NAN_BOXED(35,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1144033353,32,FLEN)
NAN_BOXED(9,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1151538044,32,FLEN)
NAN_BOXED(94,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1160690034,32,FLEN)
NAN_BOXED(54,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1169156129,32,FLEN)
NAN_BOXED(80,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1177718363,32,FLEN)
NAN_BOXED(38,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1186114146,32,FLEN)
NAN_BOXED(65,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1194536116,32,FLEN)
NAN_BOXED(36,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1202931719,32,FLEN)
NAN_BOXED(32,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1211323107,32,FLEN)
NAN_BOXED(32,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1219711626,32,FLEN)
NAN_BOXED(65,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1228102408,32,FLEN)
NAN_BOXED(32,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1236490860,32,FLEN)
NAN_BOXED(77,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1244880056,32,FLEN)
NAN_BOXED(48,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1253268891,32,FLEN)
NAN_BOXED(14,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3409141251,32,FLEN)
NAN_BOXED(50,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3409141297,32,FLEN)
NAN_BOXED(84,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3409141279,32,FLEN)
NAN_BOXED(73,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3409141179,32,FLEN)
NAN_BOXED(6,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3409141164,32,FLEN)
NAN_BOXED(3,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3409141261,32,FLEN)
NAN_BOXED(88,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3409141109,32,FLEN)
NAN_BOXED(12,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3409141087,32,FLEN)
NAN_BOXED(60,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3409140944,32,FLEN)
NAN_BOXED(86,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3409140567,32,FLEN)
NAN_BOXED(73,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3409139771,32,FLEN)
NAN_BOXED(17,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3409138430,32,FLEN)
NAN_BOXED(84,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3409135500,32,FLEN)
NAN_BOXED(41,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3409129718,32,FLEN)
NAN_BOXED(11,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3409118341,32,FLEN)
NAN_BOXED(84,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3409095278,32,FLEN)
NAN_BOXED(10,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3409049477,32,FLEN)
NAN_BOXED(93,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3408957619,32,FLEN)
NAN_BOXED(77,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3408773881,32,FLEN)
NAN_BOXED(29,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3408406633,32,FLEN)
NAN_BOXED(96,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3407671873,32,FLEN)
NAN_BOXED(42,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3406202540,32,FLEN)
NAN_BOXED(67,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3400752833,32,FLEN)
NAN_BOXED(93,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1261657454,32,FLEN)
NAN_BOXED(56,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1261657502,32,FLEN)
NAN_BOXED(21,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1261657458,32,FLEN)
NAN_BOXED(50,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1261657444,32,FLEN)
NAN_BOXED(56,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1261657493,32,FLEN)
NAN_BOXED(13,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1261657474,32,FLEN)
NAN_BOXED(11,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1261657412,32,FLEN)
NAN_BOXED(23,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1261657220,32,FLEN)
NAN_BOXED(96,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1261657156,32,FLEN)
NAN_BOXED(14,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1261656805,32,FLEN)
NAN_BOXED(8,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1261656068,32,FLEN)
NAN_BOXED(22,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1261654611,32,FLEN)
NAN_BOXED(38,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1261651661,32,FLEN)
NAN_BOXED(95,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1261646034,32,FLEN)
NAN_BOXED(15,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1261634550,32,FLEN)
NAN_BOXED(18,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1261611576,32,FLEN)
NAN_BOXED(29,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1261565659,32,FLEN)
NAN_BOXED(28,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1261473831,32,FLEN)
NAN_BOXED(23,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1261290167,32,FLEN)
NAN_BOXED(18,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1260922839,32,FLEN)
NAN_BOXED(8,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1260188061,32,FLEN)
NAN_BOXED(75,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1258718723,32,FLEN)
NAN_BOXED(54,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1253268715,32,FLEN)
NAN_BOXED(75,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(3221225517,32,FLEN)
NAN_BOXED(8388697,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(3221225496,32,FLEN)
NAN_BOXED(8388655,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(3221225494,32,FLEN)
NAN_BOXED(8388648,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(3221225520,32,FLEN)
NAN_BOXED(8388696,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(3221225488,32,FLEN)
NAN_BOXED(8388625,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(3221225520,32,FLEN)
NAN_BOXED(8388672,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(3221225518,32,FLEN)
NAN_BOXED(8388636,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(3221225586,32,FLEN)
NAN_BOXED(8388707,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(3221225632,32,FLEN)
NAN_BOXED(8388671,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(3221225736,32,FLEN)
NAN_BOXED(8388624,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(3221226010,32,FLEN)
NAN_BOXED(8388659,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(3221226498,32,FLEN)
NAN_BOXED(8388613,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(3221227552,32,FLEN)
NAN_BOXED(8388673,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(3221229590,32,FLEN)
NAN_BOXED(8388653,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(3221233709,32,FLEN)
NAN_BOXED(8388698,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(3221241896,32,FLEN)
NAN_BOXED(8388688,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(3221258284,32,FLEN)
NAN_BOXED(8388697,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(3221291014,32,FLEN)
NAN_BOXED(8388619,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(3221356573,32,FLEN)
NAN_BOXED(8388666,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(3221487666,32,FLEN)
NAN_BOXED(8388707,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(3221749796,32,FLEN)
NAN_BOXED(8388681,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(3222274072,32,FLEN)
NAN_BOXED(8388656,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(3223322662,32,FLEN)
NAN_BOXED(8388685,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(3065249792,32,FLEN)
NAN_BOXED(8388654,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(3063676928,32,FLEN)
NAN_BOXED(8388649,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(3068657664,32,FLEN)
NAN_BOXED(8388670,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(3071672320,32,FLEN)
NAN_BOXED(8388691,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(3065511936,32,FLEN)
NAN_BOXED(8388670,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(3064463360,32,FLEN)
NAN_BOXED(8388682,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(905969664,32,FLEN)
NAN_BOXED(8388656,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(924844032,32,FLEN)
NAN_BOXED(8388656,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(933298176,32,FLEN)
NAN_BOXED(8388703,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(944930816,32,FLEN)
NAN_BOXED(8388699,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(956170240,32,FLEN)
NAN_BOXED(8388616,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(964444160,32,FLEN)
NAN_BOXED(8388638,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(972824576,32,FLEN)
NAN_BOXED(8388670,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(981342208,32,FLEN)
NAN_BOXED(8388669,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(989815808,32,FLEN)
NAN_BOXED(8388647,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(998201856,32,FLEN)
NAN_BOXED(8388691,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(1006632192,32,FLEN)
NAN_BOXED(8388611,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(1015009408,32,FLEN)
NAN_BOXED(8388703,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(1023405376,32,FLEN)
NAN_BOXED(8388683,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(1031796896,32,FLEN)
NAN_BOXED(8388667,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(1040186784,32,FLEN)
NAN_BOXED(8388646,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(1048575488,32,FLEN)
NAN_BOXED(8388672,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(1056964268,32,FLEN)
NAN_BOXED(8388693,32,FLEN)
NAN_BOXED(2130706432,32,FLEN)
NAN_BOXED(3225419807,32,FLEN)
NAN_BOXED(2130706496,32,FLEN)
NAN_BOXED(2130706432,32,FLEN)
NAN_BOXED(3225419796,32,FLEN)
NAN_BOXED(2130706476,32,FLEN)
NAN_BOXED(2130706432,32,FLEN)
NAN_BOXED(3225419811,32,FLEN)
NAN_BOXED(2130706507,32,FLEN)
NAN_BOXED(2130706432,32,FLEN)
NAN_BOXED(3225419795,32,FLEN)
NAN_BOXED(2130706479,32,FLEN)
NAN_BOXED(2130706432,32,FLEN)
NAN_BOXED(3225419791,32,FLEN)
NAN_BOXED(2130706479,32,FLEN)
NAN_BOXED(2130706432,32,FLEN)
NAN_BOXED(3225419796,32,FLEN)
NAN_BOXED(2130706506,32,FLEN)
NAN_BOXED(2130706432,32,FLEN)
NAN_BOXED(3225419757,32,FLEN)
NAN_BOXED(2130706459,32,FLEN)
NAN_BOXED(2130706432,32,FLEN)
NAN_BOXED(3225419721,32,FLEN)
NAN_BOXED(2130706451,32,FLEN)
NAN_BOXED(2130706432,32,FLEN)
NAN_BOXED(3225419654,32,FLEN)
NAN_BOXED(2130706444,32,FLEN)
NAN_BOXED(2130706432,32,FLEN)
NAN_BOXED(3225419534,32,FLEN)
NAN_BOXED(2130706460,32,FLEN)
NAN_BOXED(2130706432,32,FLEN)
NAN_BOXED(3225419304,32,FLEN)
NAN_BOXED(2130706514,32,FLEN)
NAN_BOXED(2130706432,32,FLEN)
NAN_BOXED(3225418768,32,FLEN)
NAN_BOXED(2130706465,32,FLEN)
NAN_BOXED(2130706432,32,FLEN)
NAN_BOXED(3225417735,32,FLEN)
NAN_BOXED(2130706447,32,FLEN)
NAN_BOXED(2130706432,32,FLEN)
NAN_BOXED(3225415682,32,FLEN)
NAN_BOXED(2130706437,32,FLEN)
NAN_BOXED(2130706432,32,FLEN)
NAN_BOXED(3225411630,32,FLEN)
NAN_BOXED(2130706524,32,FLEN)
NAN_BOXED(2130706432,32,FLEN)
NAN_BOXED(3225403412,32,FLEN)
NAN_BOXED(2130706473,32,FLEN)
NAN_BOXED(2130706432,32,FLEN)
NAN_BOXED(3225387010,32,FLEN)
NAN_BOXED(2130706436,32,FLEN)
NAN_BOXED(2130706432,32,FLEN)
NAN_BOXED(3225354287,32,FLEN)
NAN_BOXED(2130706527,32,FLEN)
NAN_BOXED(2130706432,32,FLEN)
NAN_BOXED(3225288751,32,FLEN)
NAN_BOXED(2130706527,32,FLEN)
NAN_BOXED(2130706432,32,FLEN)
NAN_BOXED(3225157668,32,FLEN)
NAN_BOXED(2130706506,32,FLEN)
NAN_BOXED(2130706432,32,FLEN)
NAN_BOXED(3224895528,32,FLEN)
NAN_BOXED(2130706514,32,FLEN)
NAN_BOXED(2130706432,32,FLEN)
NAN_BOXED(3224371200,32,FLEN)
NAN_BOXED(2130706434,32,FLEN)
NAN_BOXED(2130706432,32,FLEN)
NAN_BOXED(3223322638,32,FLEN)
NAN_BOXED(2130706460,32,FLEN)
NAN_BOXED(2130706432,32,FLEN)
NAN_BOXED(1065353130,32,FLEN)
NAN_BOXED(2130706473,32,FLEN)
NAN_BOXED(2130706432,32,FLEN)
NAN_BOXED(1065353102,32,FLEN)
NAN_BOXED(2130706486,32,FLEN)
NAN_BOXED(2130706432,32,FLEN)
NAN_BOXED(1065353204,32,FLEN)
NAN_BOXED(2130706433,32,FLEN)
NAN_BOXED(2130706432,32,FLEN)
NAN_BOXED(1065353064,32,FLEN)
NAN_BOXED(2130706499,32,FLEN)
NAN_BOXED(2130706432,32,FLEN)
NAN_BOXED(1065353058,32,FLEN)
NAN_BOXED(2130706494,32,FLEN)
NAN_BOXED(2130706432,32,FLEN)
NAN_BOXED(1065353120,32,FLEN)
NAN_BOXED(2130706447,32,FLEN)
NAN_BOXED(2130706432,32,FLEN)
NAN_BOXED(1065352956,32,FLEN)
NAN_BOXED(2130706497,32,FLEN)
NAN_BOXED(2130706432,32,FLEN)
NAN_BOXED(1065352938,32,FLEN)
NAN_BOXED(2130706442,32,FLEN)
NAN_BOXED(2130706432,32,FLEN)
NAN_BOXED(1065352532,32,FLEN)
NAN_BOXED(2130706517,32,FLEN)
NAN_BOXED(2130706432,32,FLEN)
NAN_BOXED(1065352036,32,FLEN)
NAN_BOXED(2130706509,32,FLEN)
NAN_BOXED(2130706432,32,FLEN)
NAN_BOXED(1065350996,32,FLEN)
NAN_BOXED(2130706517,32,FLEN)
NAN_BOXED(2130706432,32,FLEN)
NAN_BOXED(1065349052,32,FLEN)
NAN_BOXED(2130706465,32,FLEN)
NAN_BOXED(2130706432,32,FLEN)
NAN_BOXED(1065344844,32,FLEN)
NAN_BOXED(2130706521,32,FLEN)
NAN_BOXED(2130706432,32,FLEN)
NAN_BOXED(1065336822,32,FLEN)
NAN_BOXED(2130706436,32,FLEN)
NAN_BOXED(2130706432,32,FLEN)
NAN_BOXED(1065320428,32,FLEN)
NAN_BOXED(2130706441,32,FLEN)
NAN_BOXED(2130706432,32,FLEN)
NAN_BOXED(1065287596,32,FLEN)
NAN_BOXED(2130706473,32,FLEN)
NAN_BOXED(2130706432,32,FLEN)
NAN_BOXED(1065222084,32,FLEN)
NAN_BOXED(2130706461,32,FLEN)
NAN_BOXED(2130706432,32,FLEN)
NAN_BOXED(1065090968,32,FLEN)
NAN_BOXED(2130706483,32,FLEN)
NAN_BOXED(2130706432,32,FLEN)
NAN_BOXED(1064828858,32,FLEN)
NAN_BOXED(2130706466,32,FLEN)
NAN_BOXED(2130706432,32,FLEN)
NAN_BOXED(1064304504,32,FLEN)
NAN_BOXED(2130706499,32,FLEN)
NAN_BOXED(2130706432,32,FLEN)
NAN_BOXED(1063255906,32,FLEN)
NAN_BOXED(2130706510,32,FLEN)
NAN_BOXED(2130706432,32,FLEN)
NAN_BOXED(1061158806,32,FLEN)
NAN_BOXED(2130706484,32,FLEN)
NAN_BOXED(2130706432,32,FLEN)
NAN_BOXED(1056964240,32,FLEN)
NAN_BOXED(2130706523,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3263779783,32,FLEN)
NAN_BOXED(48,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3251961683,32,FLEN)
NAN_BOXED(17,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3271892884,32,FLEN)
NAN_BOXED(91,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3251961683,32,FLEN)
NAN_BOXED(11,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3263596112,32,FLEN)
NAN_BOXED(32,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3270208267,32,FLEN)
NAN_BOXED(52,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3274464278,32,FLEN)
NAN_BOXED(59,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3280143739,32,FLEN)
NAN_BOXED(59,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3286250799,32,FLEN)
NAN_BOXED(64,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3292894533,32,FLEN)
NAN_BOXED(52,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3309040380,32,FLEN)
NAN_BOXED(98,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1108825882,32,FLEN)
NAN_BOXED(37,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1120704238,32,FLEN)
NAN_BOXED(55,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1134864143,32,FLEN)
NAN_BOXED(21,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1160517843,32,FLEN)
NAN_BOXED(83,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 48*((SIGALIGN)/4),4,0xdeadbeef


signature_x9_0:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x9_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x9_2:
    .fill 22*((SIGALIGN)/4),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*XLEN/32,4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

RVMODEL_DATA_END
