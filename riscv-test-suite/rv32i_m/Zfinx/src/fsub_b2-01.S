
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.9.0
// timestamp : Mon Oct  3 10:12:58 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /home/reg/tools/riscv-ctg/sample_cgfs/dataset.cgf \
//                  --cgf /home/reg/tools/riscv-ctg/sample_cgfs/sample_cgfs_fext/RV32Zfinx/fsub.s.cgf \
 \
//                  -- xlen 32  \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fsub.s instruction of the RISC-V RV32_Zfinx,RV32_Zdinx,RV64_Zfinx,RV64_Zdinx extension for the fsub_b2 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32I_Zfinx,RV32I_Zdinx,RV64I_Zfinx,RV64I_Zdinx")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*Zfinx.*);def TEST_CASE_1=True;",fsub_b2)

RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_0:
// rs1 == rd != rs2, rs1==x31, rs2==x30, rd==x31,fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x0017f0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x31; op2:x30; dest:x31; op1val:0x0; op2val:0x17f0;
   valaddr_reg:x3; val_offset:0*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, x31, x31, x30, dyn, 0, 0, x3, 0*FLEN/8, x4, x1, x2)

inst_1:
// rs1 == rs2 == rd, rs1==x29, rs2==x29, rd==x29,fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x29; op2:x29; dest:x29; op1val:0x0; op2val:0x0;
   valaddr_reg:x3; val_offset:2*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, x29, x29, x29, dyn, 0, 0, x3, 2*FLEN/8, x4, x1, x2)

inst_2:
// rs1 == rs2 != rd, rs1==x28, rs2==x28, rd==x30,fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x28; op2:x28; dest:x30; op1val:0x0; op2val:0x0;
   valaddr_reg:x3; val_offset:4*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, x30, x28, x28, dyn, 0, 0, x3, 4*FLEN/8, x4, x1, x2)

inst_3:
// rs2 == rd != rs1, rs1==x30, rs2==x27, rd==x27,fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x27; dest:x27; op1val:0x0; op2val:0x80000007;
   valaddr_reg:x3; val_offset:6*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, x27, x30, x27, dyn, 0, 0, x3, 6*FLEN/8, x4, x1, x2)

inst_4:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x27, rs2==x31, rd==x28,fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x27; op2:x31; dest:x28; op1val:0x0; op2val:0x8000000f;
   valaddr_reg:x3; val_offset:8*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, x28, x27, x31, dyn, 0, 0, x3, 8*FLEN/8, x4, x1, x2)

inst_5:
// rs1==x25, rs2==x24, rd==x26,fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x25; op2:x24; dest:x26; op1val:0x0; op2val:0x8000001f;
   valaddr_reg:x3; val_offset:10*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, x26, x25, x24, dyn, 0, 0, x3, 10*FLEN/8, x4, x1, x2)

inst_6:
// rs1==x24, rs2==x26, rd==x25,fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x24; op2:x26; dest:x25; op1val:0x0; op2val:0x8000003f;
   valaddr_reg:x3; val_offset:12*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, x25, x24, x26, dyn, 0, 0, x3, 12*FLEN/8, x4, x1, x2)

inst_7:
// rs1==x26, rs2==x25, rd==x24,fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x26; op2:x25; dest:x24; op1val:0x0; op2val:0x8000007f;
   valaddr_reg:x3; val_offset:14*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, x24, x26, x25, dyn, 0, 0, x3, 14*FLEN/8, x4, x1, x2)

inst_8:
// rs1==x22, rs2==x21, rd==x23,fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x22; op2:x21; dest:x23; op1val:0x0; op2val:0x800000ff;
   valaddr_reg:x3; val_offset:16*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, x23, x22, x21, dyn, 0, 0, x3, 16*FLEN/8, x4, x1, x2)

inst_9:
// rs1==x21, rs2==x23, rd==x22,fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x21; op2:x23; dest:x22; op1val:0x0; op2val:0x800001ff;
   valaddr_reg:x3; val_offset:18*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, x22, x21, x23, dyn, 0, 0, x3, 18*FLEN/8, x4, x1, x2)

inst_10:
// rs1==x23, rs2==x22, rd==x21,fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x23; op2:x22; dest:x21; op1val:0x0; op2val:0x800003ff;
   valaddr_reg:x3; val_offset:20*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, x21, x23, x22, dyn, 0, 0, x3, 20*FLEN/8, x4, x1, x2)

inst_11:
// rs1==x19, rs2==x18, rd==x20,fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x19; op2:x18; dest:x20; op1val:0x0; op2val:0x800007ff;
   valaddr_reg:x3; val_offset:22*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, x20, x19, x18, dyn, 0, 0, x3, 22*FLEN/8, x4, x1, x2)

inst_12:
// rs1==x18, rs2==x20, rd==x19,fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x18; op2:x20; dest:x19; op1val:0x0; op2val:0x80000fff;
   valaddr_reg:x3; val_offset:24*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, x19, x18, x20, dyn, 0, 0, x3, 24*FLEN/8, x4, x1, x2)

inst_13:
// rs1==x20, rs2==x19, rd==x18,fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x20; op2:x19; dest:x18; op1val:0x0; op2val:0x80001fff;
   valaddr_reg:x3; val_offset:26*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, x18, x20, x19, dyn, 0, 0, x3, 26*FLEN/8, x4, x1, x2)

inst_14:
// rs1==x16, rs2==x15, rd==x17,fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x16; op2:x15; dest:x17; op1val:0x0; op2val:0x80003fff;
   valaddr_reg:x3; val_offset:28*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, x17, x16, x15, dyn, 0, 0, x3, 28*FLEN/8, x4, x1, x2)

inst_15:
// rs1==x15, rs2==x17, rd==x16,fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x15; op2:x17; dest:x16; op1val:0x0; op2val:0x80007fff;
   valaddr_reg:x3; val_offset:30*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, x16, x15, x17, dyn, 0, 0, x3, 30*FLEN/8, x4, x1, x2)

inst_16:
// rs1==x17, rs2==x16, rd==x15,fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x17; op2:x16; dest:x15; op1val:0x0; op2val:0x8000ffff;
   valaddr_reg:x3; val_offset:32*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, x15, x17, x16, dyn, 0, 0, x3, 32*FLEN/8, x4, x1, x2)

inst_17:
// rs1==x13, rs2==x12, rd==x14,fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x13; op2:x12; dest:x14; op1val:0x0; op2val:0x8001ffff;
   valaddr_reg:x3; val_offset:34*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, x14, x13, x12, dyn, 0, 0, x3, 34*FLEN/8, x4, x1, x2)

inst_18:
// rs1==x12, rs2==x14, rd==x13,fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x12; op2:x14; dest:x13; op1val:0x0; op2val:0x8003ffff;
   valaddr_reg:x3; val_offset:36*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, x13, x12, x14, dyn, 0, 0, x3, 36*FLEN/8, x4, x1, x2)

inst_19:
// rs1==x14, rs2==x13, rd==x12,fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x14; op2:x13; dest:x12; op1val:0x0; op2val:0x8007ffff;
   valaddr_reg:x3; val_offset:38*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, x12, x14, x13, dyn, 0, 0, x3, 38*FLEN/8, x4, x1, x2)

inst_20:
// rs1==x10, rs2==x9, rd==x11,fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x10; op2:x9; dest:x11; op1val:0x0; op2val:0x800fffff;
   valaddr_reg:x3; val_offset:40*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, x11, x10, x9, dyn, 0, 0, x3, 40*FLEN/8, x4, x1, x2)
RVTEST_VALBASEUPD(x12,test_dataset_1)

inst_21:
// rs1==x9, rs2==x11, rd==x10,fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x9; op2:x11; dest:x10; op1val:0x0; op2val:0x801fffff;
   valaddr_reg:x12; val_offset:0*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, x10, x9, x11, dyn, 0, 0, x12, 0*FLEN/8, x13, x1, x2)

inst_22:
// rs1==x11, rs2==x10, rd==x9,fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x11; op2:x10; dest:x9; op1val:0x0; op2val:0x803fffff;
   valaddr_reg:x12; val_offset:2*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, x9, x11, x10, dyn, 0, 0, x12, 2*FLEN/8, x13, x1, x2)

inst_23:
// rs1==x7, rs2==x6, rd==x8,fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000002 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x7; op2:x6; dest:x8; op1val:0x0; op2val:0x2;
   valaddr_reg:x12; val_offset:4*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, x8, x7, x6, dyn, 0, 0, x12, 4*FLEN/8, x13, x1, x2)
RVTEST_SIGBASE(x9,signature_x9_0)

inst_24:
// rs1==x6, rs2==x8, rd==x7,fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x6; op2:x8; dest:x7; op1val:0x0; op2val:0x3;
   valaddr_reg:x12; val_offset:6*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x7, x6, x8, dyn, 0, 0, x12, 6*FLEN/8, x13, x9, x10)

inst_25:
// rs1==x8, rs2==x7, rd==x6,fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000005 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x8; op2:x7; dest:x6; op1val:0x0; op2val:0x5;
   valaddr_reg:x12; val_offset:8*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x6, x8, x7, dyn, 0, 0, x12, 8*FLEN/8, x13, x9, x10)

inst_26:
// rs1==x4, rs2==x3, rd==x5,fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000009 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x4; op2:x3; dest:x5; op1val:0x0; op2val:0x9;
   valaddr_reg:x12; val_offset:10*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x5, x4, x3, dyn, 0, 0, x12, 10*FLEN/8, x13, x9, x10)

inst_27:
// rs1==x3, rs2==x5, rd==x4,fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000011 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x3; op2:x5; dest:x4; op1val:0x0; op2val:0x11;
   valaddr_reg:x12; val_offset:12*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x4, x3, x5, dyn, 0, 0, x12, 12*FLEN/8, x13, x9, x10)

inst_28:
// rs1==x5, rs2==x4, rd==x3,fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000021 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x5; op2:x4; dest:x3; op1val:0x0; op2val:0x21;
   valaddr_reg:x12; val_offset:14*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x3, x5, x4, dyn, 0, 0, x12, 14*FLEN/8, x13, x9, x10)

inst_29:
// rs1==x1, rs2==x0, rd==x2,fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000041 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x1; op2:x0; dest:x2; op1val:0x0; op2val:0x0;
   valaddr_reg:x12; val_offset:16*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x2, x1, x0, dyn, 0, 0, x12, 16*FLEN/8, x13, x9, x10)

inst_30:
// rs1==x0, rs2==x2, rd==x1,fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000081 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x0; op2:x2; dest:x1; op1val:0x0; op2val:0x81;
   valaddr_reg:x12; val_offset:18*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x1, x0, x2, dyn, 0, 0, x12, 18*FLEN/8, x13, x9, x10)

inst_31:
// rs1==x2, rs2==x1, rd==x0,fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000101 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x2; op2:x1; dest:x0; op1val:0x0; op2val:0x101;
   valaddr_reg:x12; val_offset:20*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x0, x2, x1, dyn, 0, 0, x12, 20*FLEN/8, x13, x9, x10)

inst_32:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000201 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x0; op2val:0x201;
   valaddr_reg:x12; val_offset:22*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 22*FLEN/8, x13, x9, x10)

inst_33:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000401 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x0; op2val:0x401;
   valaddr_reg:x12; val_offset:24*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 24*FLEN/8, x13, x9, x10)

inst_34:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000801 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x0; op2val:0x801;
   valaddr_reg:x12; val_offset:26*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 26*FLEN/8, x13, x9, x10)

inst_35:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x001001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x0; op2val:0x1001;
   valaddr_reg:x12; val_offset:28*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 28*FLEN/8, x13, x9, x10)

inst_36:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x002001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x0; op2val:0x2001;
   valaddr_reg:x12; val_offset:30*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 30*FLEN/8, x13, x9, x10)

inst_37:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x004001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x0; op2val:0x4001;
   valaddr_reg:x12; val_offset:32*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 32*FLEN/8, x13, x9, x10)

inst_38:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x008001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x0; op2val:0x8001;
   valaddr_reg:x12; val_offset:34*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 34*FLEN/8, x13, x9, x10)

inst_39:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x010001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x0; op2val:0x10001;
   valaddr_reg:x12; val_offset:36*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 36*FLEN/8, x13, x9, x10)

inst_40:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x020001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x0; op2val:0x20001;
   valaddr_reg:x12; val_offset:38*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 38*FLEN/8, x13, x9, x10)

inst_41:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x040001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x0; op2val:0x40001;
   valaddr_reg:x12; val_offset:40*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 40*FLEN/8, x13, x9, x10)

inst_42:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x080001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x0; op2val:0x80001;
   valaddr_reg:x12; val_offset:42*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 42*FLEN/8, x13, x9, x10)

inst_43:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x100001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x0; op2val:0x100001;
   valaddr_reg:x12; val_offset:44*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 44*FLEN/8, x13, x9, x10)

inst_44:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x200001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x0; op2val:0x200001;
   valaddr_reg:x12; val_offset:46*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 46*FLEN/8, x13, x9, x10)

inst_45:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x400001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x0; op2val:0x400001;
   valaddr_reg:x12; val_offset:48*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 48*FLEN/8, x13, x9, x10)

inst_46:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x68 and fm2 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f800000; op2val:0xb4000000;
   valaddr_reg:x12; val_offset:50*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 50*FLEN/8, x13, x9, x10)

inst_47:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x69 and fm2 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f800000; op2val:0xb4800000;
   valaddr_reg:x12; val_offset:52*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 52*FLEN/8, x13, x9, x10)

inst_48:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x6a and fm2 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f800000; op2val:0xb5000000;
   valaddr_reg:x12; val_offset:54*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 54*FLEN/8, x13, x9, x10)

inst_49:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x6b and fm2 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f800000; op2val:0xb5800000;
   valaddr_reg:x12; val_offset:56*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 56*FLEN/8, x13, x9, x10)

inst_50:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x6c and fm2 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f800000; op2val:0xb6000000;
   valaddr_reg:x12; val_offset:58*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 58*FLEN/8, x13, x9, x10)

inst_51:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x6d and fm2 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f800000; op2val:0xb6800000;
   valaddr_reg:x12; val_offset:60*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 60*FLEN/8, x13, x9, x10)

inst_52:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x6e and fm2 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f800000; op2val:0xb7000000;
   valaddr_reg:x12; val_offset:62*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 62*FLEN/8, x13, x9, x10)

inst_53:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x6f and fm2 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f800000; op2val:0xb7800000;
   valaddr_reg:x12; val_offset:64*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 64*FLEN/8, x13, x9, x10)

inst_54:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x70 and fm2 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f800000; op2val:0xb8000000;
   valaddr_reg:x12; val_offset:66*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 66*FLEN/8, x13, x9, x10)

inst_55:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x71 and fm2 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f800000; op2val:0xb8800000;
   valaddr_reg:x12; val_offset:68*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 68*FLEN/8, x13, x9, x10)

inst_56:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x72 and fm2 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f800000; op2val:0xb9000000;
   valaddr_reg:x12; val_offset:70*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 70*FLEN/8, x13, x9, x10)

inst_57:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x73 and fm2 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f800000; op2val:0xb9800000;
   valaddr_reg:x12; val_offset:72*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 72*FLEN/8, x13, x9, x10)

inst_58:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x74 and fm2 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f800000; op2val:0xba000000;
   valaddr_reg:x12; val_offset:74*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 74*FLEN/8, x13, x9, x10)

inst_59:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x75 and fm2 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f800000; op2val:0xba800000;
   valaddr_reg:x12; val_offset:76*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 76*FLEN/8, x13, x9, x10)

inst_60:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x76 and fm2 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f800000; op2val:0xbb000000;
   valaddr_reg:x12; val_offset:78*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 78*FLEN/8, x13, x9, x10)

inst_61:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x77 and fm2 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f800000; op2val:0xbb800000;
   valaddr_reg:x12; val_offset:80*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 80*FLEN/8, x13, x9, x10)

inst_62:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x78 and fm2 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f800000; op2val:0xbc000000;
   valaddr_reg:x12; val_offset:82*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 82*FLEN/8, x13, x9, x10)

inst_63:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x79 and fm2 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f800000; op2val:0xbc800000;
   valaddr_reg:x12; val_offset:84*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 84*FLEN/8, x13, x9, x10)

inst_64:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7a and fm2 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f800000; op2val:0xbd000000;
   valaddr_reg:x12; val_offset:86*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 86*FLEN/8, x13, x9, x10)

inst_65:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7b and fm2 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f800000; op2val:0xbd800000;
   valaddr_reg:x12; val_offset:88*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 88*FLEN/8, x13, x9, x10)

inst_66:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f800000; op2val:0xbe000000;
   valaddr_reg:x12; val_offset:90*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 90*FLEN/8, x13, x9, x10)

inst_67:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f800000; op2val:0xbe800000;
   valaddr_reg:x12; val_offset:92*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 92*FLEN/8, x13, x9, x10)

inst_68:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f800000; op2val:0xbf000000;
   valaddr_reg:x12; val_offset:94*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 94*FLEN/8, x13, x9, x10)

inst_69:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f800000; op2val:0x40000000;
   valaddr_reg:x12; val_offset:96*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 96*FLEN/8, x13, x9, x10)

inst_70:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f800000; op2val:0x40000001;
   valaddr_reg:x12; val_offset:98*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 98*FLEN/8, x13, x9, x10)

inst_71:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x000002 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f800000; op2val:0x40000002;
   valaddr_reg:x12; val_offset:100*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 100*FLEN/8, x13, x9, x10)

inst_72:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x000004 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f800000; op2val:0x40000004;
   valaddr_reg:x12; val_offset:102*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 102*FLEN/8, x13, x9, x10)

inst_73:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x000008 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f800000; op2val:0x40000008;
   valaddr_reg:x12; val_offset:104*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 104*FLEN/8, x13, x9, x10)

inst_74:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x000010 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f800000; op2val:0x40000010;
   valaddr_reg:x12; val_offset:106*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 106*FLEN/8, x13, x9, x10)

inst_75:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x000020 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f800000; op2val:0x40000020;
   valaddr_reg:x12; val_offset:108*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 108*FLEN/8, x13, x9, x10)

inst_76:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x000040 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f800000; op2val:0x40000040;
   valaddr_reg:x12; val_offset:110*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 110*FLEN/8, x13, x9, x10)

inst_77:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x000080 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f800000; op2val:0x40000080;
   valaddr_reg:x12; val_offset:112*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 112*FLEN/8, x13, x9, x10)

inst_78:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x000100 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f800000; op2val:0x40000100;
   valaddr_reg:x12; val_offset:114*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 114*FLEN/8, x13, x9, x10)

inst_79:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x000200 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f800000; op2val:0x40000200;
   valaddr_reg:x12; val_offset:116*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 116*FLEN/8, x13, x9, x10)

inst_80:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x000400 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f800000; op2val:0x40000400;
   valaddr_reg:x12; val_offset:118*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 118*FLEN/8, x13, x9, x10)

inst_81:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x000800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f800000; op2val:0x40000800;
   valaddr_reg:x12; val_offset:120*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 120*FLEN/8, x13, x9, x10)

inst_82:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x001000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f800000; op2val:0x40001000;
   valaddr_reg:x12; val_offset:122*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 122*FLEN/8, x13, x9, x10)

inst_83:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x002000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f800000; op2val:0x40002000;
   valaddr_reg:x12; val_offset:124*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 124*FLEN/8, x13, x9, x10)

inst_84:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x004000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f800000; op2val:0x40004000;
   valaddr_reg:x12; val_offset:126*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 126*FLEN/8, x13, x9, x10)

inst_85:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x008000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f800000; op2val:0x40008000;
   valaddr_reg:x12; val_offset:128*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 128*FLEN/8, x13, x9, x10)

inst_86:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x010000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f800000; op2val:0x40010000;
   valaddr_reg:x12; val_offset:130*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 130*FLEN/8, x13, x9, x10)

inst_87:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x020000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f800000; op2val:0x40020000;
   valaddr_reg:x12; val_offset:132*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 132*FLEN/8, x13, x9, x10)

inst_88:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x040000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f800000; op2val:0x40040000;
   valaddr_reg:x12; val_offset:134*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 134*FLEN/8, x13, x9, x10)

inst_89:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x080000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f800000; op2val:0x40080000;
   valaddr_reg:x12; val_offset:136*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 136*FLEN/8, x13, x9, x10)

inst_90:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x100000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f800000; op2val:0x40100000;
   valaddr_reg:x12; val_offset:138*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 138*FLEN/8, x13, x9, x10)

inst_91:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x200000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f800000; op2val:0x40200000;
   valaddr_reg:x12; val_offset:140*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 140*FLEN/8, x13, x9, x10)

inst_92:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x0007f0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x0; op2val:0x7f0;
   valaddr_reg:x12; val_offset:142*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 142*FLEN/8, x13, x9, x10)

inst_93:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000002 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x0; op2val:0x80000002;
   valaddr_reg:x12; val_offset:144*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 144*FLEN/8, x13, x9, x10)

inst_94:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000004 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x0; op2val:0x80000004;
   valaddr_reg:x12; val_offset:146*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 146*FLEN/8, x13, x9, x10)

inst_95:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000008 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x0; op2val:0x80000008;
   valaddr_reg:x12; val_offset:148*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 148*FLEN/8, x13, x9, x10)

inst_96:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000010 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x0; op2val:0x80000010;
   valaddr_reg:x12; val_offset:150*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 150*FLEN/8, x13, x9, x10)

inst_97:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000020 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x0; op2val:0x80000020;
   valaddr_reg:x12; val_offset:152*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 152*FLEN/8, x13, x9, x10)

inst_98:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000040 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x0; op2val:0x80000040;
   valaddr_reg:x12; val_offset:154*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 154*FLEN/8, x13, x9, x10)

inst_99:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000080 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x0; op2val:0x80000080;
   valaddr_reg:x12; val_offset:156*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 156*FLEN/8, x13, x9, x10)

inst_100:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000100 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x0; op2val:0x80000100;
   valaddr_reg:x12; val_offset:158*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 158*FLEN/8, x13, x9, x10)

inst_101:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000200 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x0; op2val:0x80000200;
   valaddr_reg:x12; val_offset:160*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 160*FLEN/8, x13, x9, x10)

inst_102:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000400 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x0; op2val:0x80000400;
   valaddr_reg:x12; val_offset:162*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 162*FLEN/8, x13, x9, x10)

inst_103:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x0; op2val:0x80000800;
   valaddr_reg:x12; val_offset:164*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 164*FLEN/8, x13, x9, x10)

inst_104:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x001000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x0; op2val:0x80001000;
   valaddr_reg:x12; val_offset:166*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 166*FLEN/8, x13, x9, x10)

inst_105:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x002000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x0; op2val:0x80002000;
   valaddr_reg:x12; val_offset:168*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 168*FLEN/8, x13, x9, x10)

inst_106:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x004000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x0; op2val:0x80004000;
   valaddr_reg:x12; val_offset:170*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 170*FLEN/8, x13, x9, x10)

inst_107:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x008000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x0; op2val:0x80008000;
   valaddr_reg:x12; val_offset:172*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 172*FLEN/8, x13, x9, x10)

inst_108:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x010000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x0; op2val:0x80010000;
   valaddr_reg:x12; val_offset:174*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 174*FLEN/8, x13, x9, x10)

inst_109:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x020000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x0; op2val:0x80020000;
   valaddr_reg:x12; val_offset:176*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 176*FLEN/8, x13, x9, x10)

inst_110:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x040000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x0; op2val:0x80040000;
   valaddr_reg:x12; val_offset:178*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 178*FLEN/8, x13, x9, x10)

inst_111:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x080000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x0; op2val:0x80080000;
   valaddr_reg:x12; val_offset:180*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 180*FLEN/8, x13, x9, x10)

inst_112:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x100000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x0; op2val:0x80100000;
   valaddr_reg:x12; val_offset:182*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 182*FLEN/8, x13, x9, x10)

inst_113:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x200000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x0; op2val:0x80200000;
   valaddr_reg:x12; val_offset:184*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 184*FLEN/8, x13, x9, x10)

inst_114:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x0; op2val:0x80400000;
   valaddr_reg:x12; val_offset:186*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 186*FLEN/8, x13, x9, x10)

inst_115:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x0; op2val:0x1;
   valaddr_reg:x12; val_offset:188*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 188*FLEN/8, x13, x9, x10)

inst_116:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000004 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x0; op2val:0x4;
   valaddr_reg:x12; val_offset:190*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 190*FLEN/8, x13, x9, x10)

inst_117:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000006 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x0; op2val:0x6;
   valaddr_reg:x12; val_offset:192*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 192*FLEN/8, x13, x9, x10)

inst_118:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x00000a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x0; op2val:0xa;
   valaddr_reg:x12; val_offset:194*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 194*FLEN/8, x13, x9, x10)

inst_119:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000012 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x0; op2val:0x12;
   valaddr_reg:x12; val_offset:196*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 196*FLEN/8, x13, x9, x10)

inst_120:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000022 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x0; op2val:0x22;
   valaddr_reg:x12; val_offset:198*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 198*FLEN/8, x13, x9, x10)

inst_121:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000042 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x0; op2val:0x42;
   valaddr_reg:x12; val_offset:200*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 200*FLEN/8, x13, x9, x10)

inst_122:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000082 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x0; op2val:0x82;
   valaddr_reg:x12; val_offset:202*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 202*FLEN/8, x13, x9, x10)

inst_123:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000102 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x0; op2val:0x102;
   valaddr_reg:x12; val_offset:204*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 204*FLEN/8, x13, x9, x10)

inst_124:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000202 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x0; op2val:0x202;
   valaddr_reg:x12; val_offset:206*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 206*FLEN/8, x13, x9, x10)

inst_125:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000402 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x0; op2val:0x402;
   valaddr_reg:x12; val_offset:208*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 208*FLEN/8, x13, x9, x10)

inst_126:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000802 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x0; op2val:0x802;
   valaddr_reg:x12; val_offset:210*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 210*FLEN/8, x13, x9, x10)

inst_127:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x001002 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x0; op2val:0x1002;
   valaddr_reg:x12; val_offset:212*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 212*FLEN/8, x13, x9, x10)

inst_128:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x002002 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x0; op2val:0x2002;
   valaddr_reg:x12; val_offset:214*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 214*FLEN/8, x13, x9, x10)

inst_129:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x004002 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x0; op2val:0x4002;
   valaddr_reg:x12; val_offset:216*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 216*FLEN/8, x13, x9, x10)

inst_130:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x008002 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x0; op2val:0x8002;
   valaddr_reg:x12; val_offset:218*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 218*FLEN/8, x13, x9, x10)

inst_131:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x010002 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x0; op2val:0x10002;
   valaddr_reg:x12; val_offset:220*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 220*FLEN/8, x13, x9, x10)

inst_132:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x020002 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x0; op2val:0x20002;
   valaddr_reg:x12; val_offset:222*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 222*FLEN/8, x13, x9, x10)

inst_133:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x040002 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x0; op2val:0x40002;
   valaddr_reg:x12; val_offset:224*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 224*FLEN/8, x13, x9, x10)

inst_134:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x080002 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x0; op2val:0x80002;
   valaddr_reg:x12; val_offset:226*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 226*FLEN/8, x13, x9, x10)

inst_135:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x100002 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x0; op2val:0x100002;
   valaddr_reg:x12; val_offset:228*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 228*FLEN/8, x13, x9, x10)

inst_136:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x200002 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x0; op2val:0x200002;
   valaddr_reg:x12; val_offset:230*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 230*FLEN/8, x13, x9, x10)

inst_137:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x400002 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x0; op2val:0x400002;
   valaddr_reg:x12; val_offset:232*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 232*FLEN/8, x13, x9, x10)

inst_138:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7ffffd and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x0; op2val:0x807ffffd;
   valaddr_reg:x12; val_offset:234*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 234*FLEN/8, x13, x9, x10)

inst_139:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x0; op2val:0x807ffffc;
   valaddr_reg:x12; val_offset:236*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 236*FLEN/8, x13, x9, x10)

inst_140:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7ffffa and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x0; op2val:0x807ffffa;
   valaddr_reg:x12; val_offset:238*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 238*FLEN/8, x13, x9, x10)

inst_141:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7ffff6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x0; op2val:0x807ffff6;
   valaddr_reg:x12; val_offset:240*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 240*FLEN/8, x13, x9, x10)

inst_142:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffee and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x0; op2val:0x807fffee;
   valaddr_reg:x12; val_offset:242*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 242*FLEN/8, x13, x9, x10)

inst_143:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffde and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x0; op2val:0x807fffde;
   valaddr_reg:x12; val_offset:244*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 244*FLEN/8, x13, x9, x10)

inst_144:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fffbe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x0; op2val:0x807fffbe;
   valaddr_reg:x12; val_offset:246*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 246*FLEN/8, x13, x9, x10)

inst_145:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fff7e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x0; op2val:0x807fff7e;
   valaddr_reg:x12; val_offset:248*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 248*FLEN/8, x13, x9, x10)

inst_146:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7ffefe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x0; op2val:0x807ffefe;
   valaddr_reg:x12; val_offset:250*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 250*FLEN/8, x13, x9, x10)

inst_147:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7ffdfe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x0; op2val:0x807ffdfe;
   valaddr_reg:x12; val_offset:252*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 252*FLEN/8, x13, x9, x10)

inst_148:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7ffbfe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x0; op2val:0x807ffbfe;
   valaddr_reg:x12; val_offset:254*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 254*FLEN/8, x13, x9, x10)

inst_149:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7ff7fe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x0; op2val:0x807ff7fe;
   valaddr_reg:x12; val_offset:256*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 256*FLEN/8, x13, x9, x10)

inst_150:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7feffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x0; op2val:0x807feffe;
   valaddr_reg:x12; val_offset:258*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 258*FLEN/8, x13, x9, x10)

inst_151:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fdffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x0; op2val:0x807fdffe;
   valaddr_reg:x12; val_offset:260*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 260*FLEN/8, x13, x9, x10)
RVTEST_SIGBASE(x9,signature_x9_1)

inst_152:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7fbffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x0; op2val:0x807fbffe;
   valaddr_reg:x12; val_offset:262*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 262*FLEN/8, x13, x9, x10)

inst_153:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7f7ffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x0; op2val:0x807f7ffe;
   valaddr_reg:x12; val_offset:264*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 264*FLEN/8, x13, x9, x10)

inst_154:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7efffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x0; op2val:0x807efffe;
   valaddr_reg:x12; val_offset:266*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 266*FLEN/8, x13, x9, x10)

inst_155:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7dfffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x0; op2val:0x807dfffe;
   valaddr_reg:x12; val_offset:268*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 268*FLEN/8, x13, x9, x10)

inst_156:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7bfffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x0; op2val:0x807bfffe;
   valaddr_reg:x12; val_offset:270*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 270*FLEN/8, x13, x9, x10)

inst_157:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x77fffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x0; op2val:0x8077fffe;
   valaddr_reg:x12; val_offset:272*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 272*FLEN/8, x13, x9, x10)

inst_158:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x6ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x0; op2val:0x806ffffe;
   valaddr_reg:x12; val_offset:274*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 274*FLEN/8, x13, x9, x10)

inst_159:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x0; op2val:0x805ffffe;
   valaddr_reg:x12; val_offset:276*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 276*FLEN/8, x13, x9, x10)

inst_160:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x0; op2val:0x803ffffe;
   valaddr_reg:x12; val_offset:278*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 278*FLEN/8, x13, x9, x10)

inst_161:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x0; op2val:0x7fffff;
   valaddr_reg:x12; val_offset:280*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 280*FLEN/8, x13, x9, x10)

inst_162:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x0; op2val:0x7ffffe;
   valaddr_reg:x12; val_offset:282*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 282*FLEN/8, x13, x9, x10)

inst_163:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x0; op2val:0x7ffffc;
   valaddr_reg:x12; val_offset:284*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 284*FLEN/8, x13, x9, x10)

inst_164:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x0; op2val:0x7ffff8;
   valaddr_reg:x12; val_offset:286*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 286*FLEN/8, x13, x9, x10)

inst_165:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x0; op2val:0x7ffff0;
   valaddr_reg:x12; val_offset:288*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 288*FLEN/8, x13, x9, x10)

inst_166:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x0; op2val:0x7fffe0;
   valaddr_reg:x12; val_offset:290*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 290*FLEN/8, x13, x9, x10)

inst_167:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x0; op2val:0x7fffc0;
   valaddr_reg:x12; val_offset:292*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 292*FLEN/8, x13, x9, x10)

inst_168:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x0; op2val:0x7fff80;
   valaddr_reg:x12; val_offset:294*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 294*FLEN/8, x13, x9, x10)

inst_169:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x0; op2val:0x7fff00;
   valaddr_reg:x12; val_offset:296*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 296*FLEN/8, x13, x9, x10)

inst_170:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x0; op2val:0x7ffe00;
   valaddr_reg:x12; val_offset:298*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 298*FLEN/8, x13, x9, x10)

inst_171:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x0; op2val:0x7ffc00;
   valaddr_reg:x12; val_offset:300*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 300*FLEN/8, x13, x9, x10)

inst_172:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x0; op2val:0x7ff800;
   valaddr_reg:x12; val_offset:302*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 302*FLEN/8, x13, x9, x10)

inst_173:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x0; op2val:0x7ff000;
   valaddr_reg:x12; val_offset:304*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 304*FLEN/8, x13, x9, x10)

inst_174:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x0; op2val:0x7fe000;
   valaddr_reg:x12; val_offset:306*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 306*FLEN/8, x13, x9, x10)

inst_175:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x0; op2val:0x7fc000;
   valaddr_reg:x12; val_offset:308*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 308*FLEN/8, x13, x9, x10)

inst_176:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x0; op2val:0x7f8000;
   valaddr_reg:x12; val_offset:310*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 310*FLEN/8, x13, x9, x10)

inst_177:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x0; op2val:0x7f0000;
   valaddr_reg:x12; val_offset:312*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 312*FLEN/8, x13, x9, x10)

inst_178:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x0; op2val:0x7e0000;
   valaddr_reg:x12; val_offset:314*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 314*FLEN/8, x13, x9, x10)

inst_179:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x0; op2val:0x7c0000;
   valaddr_reg:x12; val_offset:316*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 316*FLEN/8, x13, x9, x10)

inst_180:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x0; op2val:0x780000;
   valaddr_reg:x12; val_offset:318*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 318*FLEN/8, x13, x9, x10)

inst_181:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x0; op2val:0x700000;
   valaddr_reg:x12; val_offset:320*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 320*FLEN/8, x13, x9, x10)

inst_182:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x0; op2val:0x600000;
   valaddr_reg:x12; val_offset:322*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 322*FLEN/8, x13, x9, x10)

inst_183:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x0; op2val:0x400000;
   valaddr_reg:x12; val_offset:324*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 324*FLEN/8, x13, x9, x10)

inst_184:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x800000; op2val:0x80000001;
   valaddr_reg:x12; val_offset:326*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 326*FLEN/8, x13, x9, x10)

inst_185:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000002 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x800000; op2val:0x80000002;
   valaddr_reg:x12; val_offset:328*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 328*FLEN/8, x13, x9, x10)

inst_186:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000004 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x800000; op2val:0x80000004;
   valaddr_reg:x12; val_offset:330*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 330*FLEN/8, x13, x9, x10)

inst_187:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000008 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x800000; op2val:0x80000008;
   valaddr_reg:x12; val_offset:332*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 332*FLEN/8, x13, x9, x10)

inst_188:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000010 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x800000; op2val:0x80000010;
   valaddr_reg:x12; val_offset:334*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 334*FLEN/8, x13, x9, x10)

inst_189:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000020 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x800000; op2val:0x80000020;
   valaddr_reg:x12; val_offset:336*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 336*FLEN/8, x13, x9, x10)

inst_190:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000040 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x800000; op2val:0x80000040;
   valaddr_reg:x12; val_offset:338*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 338*FLEN/8, x13, x9, x10)

inst_191:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000080 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x800000; op2val:0x80000080;
   valaddr_reg:x12; val_offset:340*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 340*FLEN/8, x13, x9, x10)

inst_192:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000100 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x800000; op2val:0x80000100;
   valaddr_reg:x12; val_offset:342*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 342*FLEN/8, x13, x9, x10)

inst_193:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000200 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x800000; op2val:0x80000200;
   valaddr_reg:x12; val_offset:344*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 344*FLEN/8, x13, x9, x10)

inst_194:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000400 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x800000; op2val:0x80000400;
   valaddr_reg:x12; val_offset:346*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 346*FLEN/8, x13, x9, x10)

inst_195:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x800000; op2val:0x80000800;
   valaddr_reg:x12; val_offset:348*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 348*FLEN/8, x13, x9, x10)

inst_196:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x001000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x800000; op2val:0x80001000;
   valaddr_reg:x12; val_offset:350*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 350*FLEN/8, x13, x9, x10)

inst_197:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x002000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x800000; op2val:0x80002000;
   valaddr_reg:x12; val_offset:352*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 352*FLEN/8, x13, x9, x10)

inst_198:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x004000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x800000; op2val:0x80004000;
   valaddr_reg:x12; val_offset:354*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 354*FLEN/8, x13, x9, x10)

inst_199:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x008000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x800000; op2val:0x80008000;
   valaddr_reg:x12; val_offset:356*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 356*FLEN/8, x13, x9, x10)

inst_200:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x010000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x800000; op2val:0x80010000;
   valaddr_reg:x12; val_offset:358*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 358*FLEN/8, x13, x9, x10)

inst_201:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x020000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x800000; op2val:0x80020000;
   valaddr_reg:x12; val_offset:360*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 360*FLEN/8, x13, x9, x10)

inst_202:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x040000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x800000; op2val:0x80040000;
   valaddr_reg:x12; val_offset:362*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 362*FLEN/8, x13, x9, x10)

inst_203:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x080000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x800000; op2val:0x80080000;
   valaddr_reg:x12; val_offset:364*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 364*FLEN/8, x13, x9, x10)

inst_204:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x100000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x800000; op2val:0x80100000;
   valaddr_reg:x12; val_offset:366*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 366*FLEN/8, x13, x9, x10)

inst_205:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x200000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x800000; op2val:0x80200000;
   valaddr_reg:x12; val_offset:368*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 368*FLEN/8, x13, x9, x10)

inst_206:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x800000; op2val:0x80400000;
   valaddr_reg:x12; val_offset:370*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 370*FLEN/8, x13, x9, x10)

inst_207:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x800000; op2val:0x1000000;
   valaddr_reg:x12; val_offset:372*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 372*FLEN/8, x13, x9, x10)

inst_208:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x800000; op2val:0x1000001;
   valaddr_reg:x12; val_offset:374*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 374*FLEN/8, x13, x9, x10)

inst_209:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x000002 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x800000; op2val:0x1000002;
   valaddr_reg:x12; val_offset:376*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 376*FLEN/8, x13, x9, x10)

inst_210:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x000004 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x800000; op2val:0x1000004;
   valaddr_reg:x12; val_offset:378*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 378*FLEN/8, x13, x9, x10)

inst_211:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x000008 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x800000; op2val:0x1000008;
   valaddr_reg:x12; val_offset:380*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 380*FLEN/8, x13, x9, x10)

inst_212:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x000010 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x800000; op2val:0x1000010;
   valaddr_reg:x12; val_offset:382*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 382*FLEN/8, x13, x9, x10)

inst_213:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x000020 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x800000; op2val:0x1000020;
   valaddr_reg:x12; val_offset:384*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 384*FLEN/8, x13, x9, x10)

inst_214:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x000040 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x800000; op2val:0x1000040;
   valaddr_reg:x12; val_offset:386*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 386*FLEN/8, x13, x9, x10)

inst_215:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x000080 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x800000; op2val:0x1000080;
   valaddr_reg:x12; val_offset:388*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 388*FLEN/8, x13, x9, x10)

inst_216:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x000100 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x800000; op2val:0x1000100;
   valaddr_reg:x12; val_offset:390*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 390*FLEN/8, x13, x9, x10)

inst_217:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x000200 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x800000; op2val:0x1000200;
   valaddr_reg:x12; val_offset:392*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 392*FLEN/8, x13, x9, x10)

inst_218:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x000400 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x800000; op2val:0x1000400;
   valaddr_reg:x12; val_offset:394*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 394*FLEN/8, x13, x9, x10)

inst_219:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x000800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x800000; op2val:0x1000800;
   valaddr_reg:x12; val_offset:396*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 396*FLEN/8, x13, x9, x10)

inst_220:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x001000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x800000; op2val:0x1001000;
   valaddr_reg:x12; val_offset:398*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 398*FLEN/8, x13, x9, x10)

inst_221:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x002000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x800000; op2val:0x1002000;
   valaddr_reg:x12; val_offset:400*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 400*FLEN/8, x13, x9, x10)

inst_222:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x004000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x800000; op2val:0x1004000;
   valaddr_reg:x12; val_offset:402*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 402*FLEN/8, x13, x9, x10)

inst_223:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x008000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x800000; op2val:0x1008000;
   valaddr_reg:x12; val_offset:404*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 404*FLEN/8, x13, x9, x10)

inst_224:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x010000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x800000; op2val:0x1010000;
   valaddr_reg:x12; val_offset:406*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 406*FLEN/8, x13, x9, x10)

inst_225:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x020000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x800000; op2val:0x1020000;
   valaddr_reg:x12; val_offset:408*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 408*FLEN/8, x13, x9, x10)

inst_226:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x040000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x800000; op2val:0x1040000;
   valaddr_reg:x12; val_offset:410*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 410*FLEN/8, x13, x9, x10)

inst_227:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x080000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x800000; op2val:0x1080000;
   valaddr_reg:x12; val_offset:412*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 412*FLEN/8, x13, x9, x10)

inst_228:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x100000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x800000; op2val:0x1100000;
   valaddr_reg:x12; val_offset:414*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 414*FLEN/8, x13, x9, x10)

inst_229:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x200000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x800000; op2val:0x1200000;
   valaddr_reg:x12; val_offset:416*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 416*FLEN/8, x13, x9, x10)

inst_230:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000000 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f000000; op2val:0xfefffffc;
   valaddr_reg:x12; val_offset:418*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 418*FLEN/8, x13, x9, x10)

inst_231:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000000 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x7ffffa and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f000000; op2val:0xfefffffa;
   valaddr_reg:x12; val_offset:420*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 420*FLEN/8, x13, x9, x10)

inst_232:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000000 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x7ffff6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f000000; op2val:0xfefffff6;
   valaddr_reg:x12; val_offset:422*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 422*FLEN/8, x13, x9, x10)

inst_233:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000000 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x7fffee and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f000000; op2val:0xfeffffee;
   valaddr_reg:x12; val_offset:424*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 424*FLEN/8, x13, x9, x10)

inst_234:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000000 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x7fffde and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f000000; op2val:0xfeffffde;
   valaddr_reg:x12; val_offset:426*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 426*FLEN/8, x13, x9, x10)

inst_235:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000000 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x7fffbe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f000000; op2val:0xfeffffbe;
   valaddr_reg:x12; val_offset:428*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 428*FLEN/8, x13, x9, x10)

inst_236:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000000 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x7fff7e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f000000; op2val:0xfeffff7e;
   valaddr_reg:x12; val_offset:430*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 430*FLEN/8, x13, x9, x10)

inst_237:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000000 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x7ffefe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f000000; op2val:0xfefffefe;
   valaddr_reg:x12; val_offset:432*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 432*FLEN/8, x13, x9, x10)

inst_238:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000000 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x7ffdfe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f000000; op2val:0xfefffdfe;
   valaddr_reg:x12; val_offset:434*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 434*FLEN/8, x13, x9, x10)

inst_239:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000000 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x7ffbfe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f000000; op2val:0xfefffbfe;
   valaddr_reg:x12; val_offset:436*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 436*FLEN/8, x13, x9, x10)

inst_240:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000000 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x7ff7fe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f000000; op2val:0xfefff7fe;
   valaddr_reg:x12; val_offset:438*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 438*FLEN/8, x13, x9, x10)

inst_241:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000000 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x7feffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f000000; op2val:0xfeffeffe;
   valaddr_reg:x12; val_offset:440*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 440*FLEN/8, x13, x9, x10)

inst_242:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000000 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x7fdffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f000000; op2val:0xfeffdffe;
   valaddr_reg:x12; val_offset:442*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 442*FLEN/8, x13, x9, x10)

inst_243:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000000 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x7fbffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f000000; op2val:0xfeffbffe;
   valaddr_reg:x12; val_offset:444*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 444*FLEN/8, x13, x9, x10)

inst_244:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000000 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x7f7ffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f000000; op2val:0xfeff7ffe;
   valaddr_reg:x12; val_offset:446*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 446*FLEN/8, x13, x9, x10)

inst_245:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000000 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x7efffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f000000; op2val:0xfefefffe;
   valaddr_reg:x12; val_offset:448*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 448*FLEN/8, x13, x9, x10)

inst_246:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000000 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x7dfffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f000000; op2val:0xfefdfffe;
   valaddr_reg:x12; val_offset:450*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 450*FLEN/8, x13, x9, x10)

inst_247:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000000 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x7bfffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f000000; op2val:0xfefbfffe;
   valaddr_reg:x12; val_offset:452*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 452*FLEN/8, x13, x9, x10)

inst_248:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000000 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x77fffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f000000; op2val:0xfef7fffe;
   valaddr_reg:x12; val_offset:454*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 454*FLEN/8, x13, x9, x10)

inst_249:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000000 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x6ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f000000; op2val:0xfeeffffe;
   valaddr_reg:x12; val_offset:456*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 456*FLEN/8, x13, x9, x10)

inst_250:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000000 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x5ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f000000; op2val:0xfedffffe;
   valaddr_reg:x12; val_offset:458*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 458*FLEN/8, x13, x9, x10)

inst_251:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000000 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x3ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f000000; op2val:0xfebffffe;
   valaddr_reg:x12; val_offset:460*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 460*FLEN/8, x13, x9, x10)

inst_252:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000000 and fs2 == 1 and fe2 == 0xfc and fm2 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f000000; op2val:0xfe7ffffc;
   valaddr_reg:x12; val_offset:462*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 462*FLEN/8, x13, x9, x10)

inst_253:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000000 and fs2 == 0 and fe2 == 0xff and fm2 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f000000; op2val:0x7f800000;
   valaddr_reg:x12; val_offset:464*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 464*FLEN/8, x13, x9, x10)

inst_254:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x0017f0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x0; op2val:0x17f0;
   valaddr_reg:x12; val_offset:466*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 466*FLEN/8, x13, x9, x10)

inst_255:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x0; op2val:0x80000001;
   valaddr_reg:x12; val_offset:468*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 468*FLEN/8, x13, x9, x10)

inst_256:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x0; op2val:0x80000003;
   valaddr_reg:x12; val_offset:470*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 470*FLEN/8, x13, x9, x10)

inst_257:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x0; op2val:0x80000007;
   valaddr_reg:x12; val_offset:472*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 472*FLEN/8, x13, x9, x10)

inst_258:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000041 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x0; op2val:0x41;
   valaddr_reg:x12; val_offset:474*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 474*FLEN/8, x13, x9, x10)

inst_259:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000081 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x0; op2val:0x81;
   valaddr_reg:x12; val_offset:476*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 476*FLEN/8, x13, x9, x10)

inst_260:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000101 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x0; op2val:0x101;
   valaddr_reg:x12; val_offset:478*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 478*FLEN/8, x13, x9, x10)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(0,32,FLEN)
NAN_BOXED(6128,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2147483655,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2147483663,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2147483679,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2147483711,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2147483775,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2147483903,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2147484159,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2147484671,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2147485695,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2147487743,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2147491839,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2147500031,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2147516415,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2147549183,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2147614719,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2147745791,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2148007935,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2148532223,32,FLEN)
test_dataset_1:
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2149580799,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2151677951,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(5,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(9,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(17,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(33,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(129,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(257,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(513,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1025,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2049,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(4097,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8193,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16385,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(32769,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(65537,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(131073,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(262145,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(524289,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1048577,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2097153,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(4194305,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(3019898880,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(3028287488,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(3036676096,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(3045064704,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(3053453312,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(3061841920,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(3070230528,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(3078619136,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(3087007744,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(3095396352,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(3103784960,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(3112173568,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(3120562176,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(3128950784,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(3137339392,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(3145728000,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(3154116608,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(3162505216,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(3170893824,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(3179282432,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(3187671040,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(3196059648,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(3204448256,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(1073741824,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(1073741825,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(1073741826,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(1073741828,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(1073741832,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(1073741840,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(1073741856,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(1073741888,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(1073741952,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(1073742080,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(1073742336,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(1073742848,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(1073743872,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(1073745920,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(1073750016,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(1073758208,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(1073774592,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(1073807360,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(1073872896,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(1074003968,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(1074266112,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(1074790400,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(1075838976,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2032,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2147483650,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2147483652,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2147483656,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2147483664,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2147483680,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2147483712,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2147483776,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2147483904,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2147484160,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2147484672,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2147485696,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2147487744,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2147491840,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2147500032,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2147516416,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2147549184,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2147614720,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2147745792,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2148007936,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2148532224,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2149580800,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2151677952,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(4,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(6,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(10,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(18,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(34,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(66,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(130,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(258,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(514,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1026,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2050,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(4098,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8194,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16386,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(32770,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(65538,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(131074,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(262146,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(524290,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1048578,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2097154,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(4194306,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2155872253,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2155872252,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2155872250,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2155872246,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2155872238,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2155872222,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2155872190,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2155872126,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2155871998,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2155871742,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2155871230,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2155870206,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2155868158,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2155864062,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2155855870,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2155839486,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2155806718,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2155741182,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2155610110,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2155347966,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2154823678,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2153775102,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2151677950,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388607,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388606,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388604,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388600,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388592,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388576,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388544,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388480,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388352,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388096,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8387584,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8386560,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8384512,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8380416,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8372224,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8355840,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8323072,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8257536,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8126464,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(7864320,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(7340032,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(6291456,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(4194304,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(2147483649,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(2147483650,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(2147483652,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(2147483656,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(2147483664,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(2147483680,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(2147483712,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(2147483776,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(2147483904,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(2147484160,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(2147484672,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(2147485696,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(2147487744,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(2147491840,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(2147500032,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(2147516416,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(2147549184,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(2147614720,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(2147745792,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(2148007936,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(2148532224,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(2149580800,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(2151677952,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(16777216,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(16777217,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(16777218,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(16777220,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(16777224,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(16777232,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(16777248,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(16777280,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(16777344,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(16777472,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(16777728,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(16778240,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(16779264,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(16781312,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(16785408,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(16793600,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(16809984,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(16842752,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(16908288,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(17039360,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(17301504,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(17825792,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(18874368,32,FLEN)
NAN_BOXED(2130706432,32,FLEN)
NAN_BOXED(4278190076,32,FLEN)
NAN_BOXED(2130706432,32,FLEN)
NAN_BOXED(4278190074,32,FLEN)
NAN_BOXED(2130706432,32,FLEN)
NAN_BOXED(4278190070,32,FLEN)
NAN_BOXED(2130706432,32,FLEN)
NAN_BOXED(4278190062,32,FLEN)
NAN_BOXED(2130706432,32,FLEN)
NAN_BOXED(4278190046,32,FLEN)
NAN_BOXED(2130706432,32,FLEN)
NAN_BOXED(4278190014,32,FLEN)
NAN_BOXED(2130706432,32,FLEN)
NAN_BOXED(4278189950,32,FLEN)
NAN_BOXED(2130706432,32,FLEN)
NAN_BOXED(4278189822,32,FLEN)
NAN_BOXED(2130706432,32,FLEN)
NAN_BOXED(4278189566,32,FLEN)
NAN_BOXED(2130706432,32,FLEN)
NAN_BOXED(4278189054,32,FLEN)
NAN_BOXED(2130706432,32,FLEN)
NAN_BOXED(4278188030,32,FLEN)
NAN_BOXED(2130706432,32,FLEN)
NAN_BOXED(4278185982,32,FLEN)
NAN_BOXED(2130706432,32,FLEN)
NAN_BOXED(4278181886,32,FLEN)
NAN_BOXED(2130706432,32,FLEN)
NAN_BOXED(4278173694,32,FLEN)
NAN_BOXED(2130706432,32,FLEN)
NAN_BOXED(4278157310,32,FLEN)
NAN_BOXED(2130706432,32,FLEN)
NAN_BOXED(4278124542,32,FLEN)
NAN_BOXED(2130706432,32,FLEN)
NAN_BOXED(4278059006,32,FLEN)
NAN_BOXED(2130706432,32,FLEN)
NAN_BOXED(4277927934,32,FLEN)
NAN_BOXED(2130706432,32,FLEN)
NAN_BOXED(4277665790,32,FLEN)
NAN_BOXED(2130706432,32,FLEN)
NAN_BOXED(4277141502,32,FLEN)
NAN_BOXED(2130706432,32,FLEN)
NAN_BOXED(4276092926,32,FLEN)
NAN_BOXED(2130706432,32,FLEN)
NAN_BOXED(4273995774,32,FLEN)
NAN_BOXED(2130706432,32,FLEN)
NAN_BOXED(4269801468,32,FLEN)
NAN_BOXED(2130706432,32,FLEN)
NAN_BOXED(2139095040,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(6128,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2147483649,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2147483651,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2147483655,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(65,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(129,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(257,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 48*((SIGALIGN)/4),4,0xdeadbeef


signature_x9_0:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x9_1:
    .fill 218*((SIGALIGN)/4),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*XLEN/32,4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

RVMODEL_DATA_END
