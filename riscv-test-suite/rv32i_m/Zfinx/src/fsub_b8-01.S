
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.9.0
// timestamp : Mon Oct  3 10:12:58 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /home/reg/tools/riscv-ctg/sample_cgfs/dataset.cgf \
//                  --cgf /home/reg/tools/riscv-ctg/sample_cgfs/sample_cgfs_fext/RV32Zfinx/fsub.s.cgf \
 \
//                  -- xlen 32  \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fsub.s instruction of the RISC-V RV32_Zfinx,RV32_Zdinx,RV64_Zfinx,RV64_Zdinx extension for the fsub_b8 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32I_Zfinx,RV32I_Zdinx,RV64I_Zfinx,RV64I_Zdinx")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*Zfinx.*);def TEST_CASE_1=True;",fsub_b8)

RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_0:
// rs1 == rd != rs2, rs1==x31, rs2==x30, rd==x31,fs1 == 0 and fe1 == 0x7e and fm1 == 0x5d9a4e and fs2 == 0 and fe2 == 0x7e and fm2 == 0x5d9a4e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x31; op2:x30; dest:x31; op1val:0x3f5d9a4e; op2val:0x3f5d9a4e;
   valaddr_reg:x3; val_offset:0*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, x31, x31, x30, dyn, 0, 0, x3, 0*FLEN/8, x4, x1, x2)

inst_1:
// rs1 == rs2 == rd, rs1==x29, rs2==x29, rd==x29,fs1 == 0 and fe1 == 0x7e and fm1 == 0x5d9a4e and fs2 == 0 and fe2 == 0x7e and fm2 == 0x5d9a4e and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x29; op2:x29; dest:x29; op1val:0x3f5d9a4e; op2val:0x3f5d9a4e;
   valaddr_reg:x3; val_offset:2*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, x29, x29, x29, dyn, 32, 0, x3, 2*FLEN/8, x4, x1, x2)

inst_2:
// rs1 == rs2 != rd, rs1==x28, rs2==x28, rd==x30,fs1 == 0 and fe1 == 0x7e and fm1 == 0x5d9a4e and fs2 == 0 and fe2 == 0x7e and fm2 == 0x5d9a4e and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x28; op2:x28; dest:x30; op1val:0x3f5d9a4e; op2val:0x3f5d9a4e;
   valaddr_reg:x3; val_offset:4*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, x30, x28, x28, dyn, 64, 0, x3, 4*FLEN/8, x4, x1, x2)

inst_3:
// rs2 == rd != rs1, rs1==x30, rs2==x27, rd==x27,fs1 == 0 and fe1 == 0x7e and fm1 == 0x5d9a4e and fs2 == 0 and fe2 == 0x7e and fm2 == 0x5d9a4e and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x27; dest:x27; op1val:0x3f5d9a4e; op2val:0x3f5d9a4e;
   valaddr_reg:x3; val_offset:6*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, x27, x30, x27, dyn, 96, 0, x3, 6*FLEN/8, x4, x1, x2)

inst_4:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x27, rs2==x31, rd==x28,fs1 == 0 and fe1 == 0x7e and fm1 == 0x5d9a4e and fs2 == 0 and fe2 == 0x7e and fm2 == 0x5d9a4e and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x27; op2:x31; dest:x28; op1val:0x3f5d9a4e; op2val:0x3f5d9a4e;
   valaddr_reg:x3; val_offset:8*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, x28, x27, x31, dyn, 128, 0, x3, 8*FLEN/8, x4, x1, x2)

inst_5:
// rs1==x25, rs2==x24, rd==x26,fs1 == 0 and fe1 == 0x7c and fm1 == 0x71e510 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x71e510 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x25; op2:x24; dest:x26; op1val:0x3e71e510; op2val:0x3e71e510;
   valaddr_reg:x3; val_offset:10*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, x26, x25, x24, dyn, 0, 0, x3, 10*FLEN/8, x4, x1, x2)

inst_6:
// rs1==x24, rs2==x26, rd==x25,fs1 == 0 and fe1 == 0x7c and fm1 == 0x71e510 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x71e510 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x24; op2:x26; dest:x25; op1val:0x3e71e510; op2val:0x3e71e510;
   valaddr_reg:x3; val_offset:12*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, x25, x24, x26, dyn, 32, 0, x3, 12*FLEN/8, x4, x1, x2)

inst_7:
// rs1==x26, rs2==x25, rd==x24,fs1 == 0 and fe1 == 0x7c and fm1 == 0x71e510 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x71e510 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x26; op2:x25; dest:x24; op1val:0x3e71e510; op2val:0x3e71e510;
   valaddr_reg:x3; val_offset:14*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, x24, x26, x25, dyn, 64, 0, x3, 14*FLEN/8, x4, x1, x2)

inst_8:
// rs1==x22, rs2==x21, rd==x23,fs1 == 0 and fe1 == 0x7c and fm1 == 0x71e510 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x71e510 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x22; op2:x21; dest:x23; op1val:0x3e71e510; op2val:0x3e71e510;
   valaddr_reg:x3; val_offset:16*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, x23, x22, x21, dyn, 96, 0, x3, 16*FLEN/8, x4, x1, x2)

inst_9:
// rs1==x21, rs2==x23, rd==x22,fs1 == 0 and fe1 == 0x7c and fm1 == 0x71e510 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x71e510 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x21; op2:x23; dest:x22; op1val:0x3e71e510; op2val:0x3e71e510;
   valaddr_reg:x3; val_offset:18*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, x22, x21, x23, dyn, 128, 0, x3, 18*FLEN/8, x4, x1, x2)

inst_10:
// rs1==x23, rs2==x22, rd==x21,fs1 == 0 and fe1 == 0x7e and fm1 == 0x012b2a and fs2 == 0 and fe2 == 0x7e and fm2 == 0x012b2a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x23; op2:x22; dest:x21; op1val:0x3f012b2a; op2val:0x3f012b2a;
   valaddr_reg:x3; val_offset:20*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, x21, x23, x22, dyn, 0, 0, x3, 20*FLEN/8, x4, x1, x2)

inst_11:
// rs1==x19, rs2==x18, rd==x20,fs1 == 0 and fe1 == 0x7e and fm1 == 0x012b2a and fs2 == 0 and fe2 == 0x7e and fm2 == 0x012b2a and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x19; op2:x18; dest:x20; op1val:0x3f012b2a; op2val:0x3f012b2a;
   valaddr_reg:x3; val_offset:22*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, x20, x19, x18, dyn, 32, 0, x3, 22*FLEN/8, x4, x1, x2)

inst_12:
// rs1==x18, rs2==x20, rd==x19,fs1 == 0 and fe1 == 0x7e and fm1 == 0x012b2a and fs2 == 0 and fe2 == 0x7e and fm2 == 0x012b2a and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x18; op2:x20; dest:x19; op1val:0x3f012b2a; op2val:0x3f012b2a;
   valaddr_reg:x3; val_offset:24*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, x19, x18, x20, dyn, 64, 0, x3, 24*FLEN/8, x4, x1, x2)

inst_13:
// rs1==x20, rs2==x19, rd==x18,fs1 == 0 and fe1 == 0x7e and fm1 == 0x012b2a and fs2 == 0 and fe2 == 0x7e and fm2 == 0x012b2a and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x20; op2:x19; dest:x18; op1val:0x3f012b2a; op2val:0x3f012b2a;
   valaddr_reg:x3; val_offset:26*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, x18, x20, x19, dyn, 96, 0, x3, 26*FLEN/8, x4, x1, x2)

inst_14:
// rs1==x16, rs2==x15, rd==x17,fs1 == 0 and fe1 == 0x7e and fm1 == 0x012b2a and fs2 == 0 and fe2 == 0x7e and fm2 == 0x012b2a and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x16; op2:x15; dest:x17; op1val:0x3f012b2a; op2val:0x3f012b2a;
   valaddr_reg:x3; val_offset:28*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, x17, x16, x15, dyn, 128, 0, x3, 28*FLEN/8, x4, x1, x2)

inst_15:
// rs1==x15, rs2==x17, rd==x16,fs1 == 0 and fe1 == 0x7d and fm1 == 0x326267 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x326267 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x15; op2:x17; dest:x16; op1val:0x3eb26267; op2val:0x3eb26267;
   valaddr_reg:x3; val_offset:30*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, x16, x15, x17, dyn, 0, 0, x3, 30*FLEN/8, x4, x1, x2)

inst_16:
// rs1==x17, rs2==x16, rd==x15,fs1 == 0 and fe1 == 0x7d and fm1 == 0x326267 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x326267 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x17; op2:x16; dest:x15; op1val:0x3eb26267; op2val:0x3eb26267;
   valaddr_reg:x3; val_offset:32*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, x15, x17, x16, dyn, 32, 0, x3, 32*FLEN/8, x4, x1, x2)

inst_17:
// rs1==x13, rs2==x12, rd==x14,fs1 == 0 and fe1 == 0x7d and fm1 == 0x326267 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x326267 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x13; op2:x12; dest:x14; op1val:0x3eb26267; op2val:0x3eb26267;
   valaddr_reg:x3; val_offset:34*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, x14, x13, x12, dyn, 64, 0, x3, 34*FLEN/8, x4, x1, x2)

inst_18:
// rs1==x12, rs2==x14, rd==x13,fs1 == 0 and fe1 == 0x7d and fm1 == 0x326267 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x326267 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x12; op2:x14; dest:x13; op1val:0x3eb26267; op2val:0x3eb26267;
   valaddr_reg:x3; val_offset:36*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, x13, x12, x14, dyn, 96, 0, x3, 36*FLEN/8, x4, x1, x2)

inst_19:
// rs1==x14, rs2==x13, rd==x12,fs1 == 0 and fe1 == 0x7d and fm1 == 0x326267 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x326267 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x14; op2:x13; dest:x12; op1val:0x3eb26267; op2val:0x3eb26267;
   valaddr_reg:x3; val_offset:38*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, x12, x14, x13, dyn, 128, 0, x3, 38*FLEN/8, x4, x1, x2)

inst_20:
// rs1==x10, rs2==x9, rd==x11,fs1 == 0 and fe1 == 0x7e and fm1 == 0x67f8d1 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x67f8d1 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x10; op2:x9; dest:x11; op1val:0x3f67f8d1; op2val:0x3f67f8d1;
   valaddr_reg:x3; val_offset:40*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, x11, x10, x9, dyn, 0, 0, x3, 40*FLEN/8, x4, x1, x2)
RVTEST_VALBASEUPD(x12,test_dataset_1)

inst_21:
// rs1==x9, rs2==x11, rd==x10,fs1 == 0 and fe1 == 0x7e and fm1 == 0x67f8d1 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x67f8d1 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x9; op2:x11; dest:x10; op1val:0x3f67f8d1; op2val:0x3f67f8d1;
   valaddr_reg:x12; val_offset:0*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, x10, x9, x11, dyn, 32, 0, x12, 0*FLEN/8, x13, x1, x2)

inst_22:
// rs1==x11, rs2==x10, rd==x9,fs1 == 0 and fe1 == 0x7e and fm1 == 0x67f8d1 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x67f8d1 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x11; op2:x10; dest:x9; op1val:0x3f67f8d1; op2val:0x3f67f8d1;
   valaddr_reg:x12; val_offset:2*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, x9, x11, x10, dyn, 64, 0, x12, 2*FLEN/8, x13, x1, x2)

inst_23:
// rs1==x7, rs2==x6, rd==x8,fs1 == 0 and fe1 == 0x7e and fm1 == 0x67f8d1 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x67f8d1 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x7; op2:x6; dest:x8; op1val:0x3f67f8d1; op2val:0x3f67f8d1;
   valaddr_reg:x12; val_offset:4*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fsub.s, x8, x7, x6, dyn, 96, 0, x12, 4*FLEN/8, x13, x1, x2)
RVTEST_SIGBASE(x9,signature_x9_0)

inst_24:
// rs1==x6, rs2==x8, rd==x7,fs1 == 0 and fe1 == 0x7e and fm1 == 0x67f8d1 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x67f8d1 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x6; op2:x8; dest:x7; op1val:0x3f67f8d1; op2val:0x3f67f8d1;
   valaddr_reg:x12; val_offset:6*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x7, x6, x8, dyn, 128, 0, x12, 6*FLEN/8, x13, x9, x10)

inst_25:
// rs1==x8, rs2==x7, rd==x6,fs1 == 0 and fe1 == 0x7c and fm1 == 0x282d31 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x282d31 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x8; op2:x7; dest:x6; op1val:0x3e282d31; op2val:0x3e282d31;
   valaddr_reg:x12; val_offset:8*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x6, x8, x7, dyn, 0, 0, x12, 8*FLEN/8, x13, x9, x10)

inst_26:
// rs1==x4, rs2==x3, rd==x5,fs1 == 0 and fe1 == 0x7c and fm1 == 0x282d31 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x282d31 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x4; op2:x3; dest:x5; op1val:0x3e282d31; op2val:0x3e282d31;
   valaddr_reg:x12; val_offset:10*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x5, x4, x3, dyn, 32, 0, x12, 10*FLEN/8, x13, x9, x10)

inst_27:
// rs1==x3, rs2==x5, rd==x4,fs1 == 0 and fe1 == 0x7c and fm1 == 0x282d31 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x282d31 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x3; op2:x5; dest:x4; op1val:0x3e282d31; op2val:0x3e282d31;
   valaddr_reg:x12; val_offset:12*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x4, x3, x5, dyn, 64, 0, x12, 12*FLEN/8, x13, x9, x10)

inst_28:
// rs1==x5, rs2==x4, rd==x3,fs1 == 0 and fe1 == 0x7c and fm1 == 0x282d31 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x282d31 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x5; op2:x4; dest:x3; op1val:0x3e282d31; op2val:0x3e282d31;
   valaddr_reg:x12; val_offset:14*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x3, x5, x4, dyn, 96, 0, x12, 14*FLEN/8, x13, x9, x10)

inst_29:
// rs1==x1, rs2==x0, rd==x2,fs1 == 0 and fe1 == 0x7c and fm1 == 0x282d31 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x282d31 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x1; op2:x0; dest:x2; op1val:0x3e282d31; op2val:0x0;
   valaddr_reg:x12; val_offset:16*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x2, x1, x0, dyn, 128, 0, x12, 16*FLEN/8, x13, x9, x10)

inst_30:
// rs1==x0, rs2==x2, rd==x1,fs1 == 0 and fe1 == 0x7c and fm1 == 0x736cd9 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x736cd9 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x0; op2:x2; dest:x1; op1val:0x0; op2val:0x3e736cd9;
   valaddr_reg:x12; val_offset:18*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x1, x0, x2, dyn, 0, 0, x12, 18*FLEN/8, x13, x9, x10)

inst_31:
// rs1==x2, rs2==x1, rd==x0,fs1 == 0 and fe1 == 0x7c and fm1 == 0x736cd9 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x736cd9 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x2; op2:x1; dest:x0; op1val:0x3e736cd9; op2val:0x3e736cd9;
   valaddr_reg:x12; val_offset:20*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x0, x2, x1, dyn, 32, 0, x12, 20*FLEN/8, x13, x9, x10)

inst_32:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x736cd9 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x736cd9 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e736cd9; op2val:0x3e736cd9;
   valaddr_reg:x12; val_offset:22*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 22*FLEN/8, x13, x9, x10)

inst_33:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x736cd9 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x736cd9 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e736cd9; op2val:0x3e736cd9;
   valaddr_reg:x12; val_offset:24*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 24*FLEN/8, x13, x9, x10)

inst_34:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x736cd9 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x736cd9 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e736cd9; op2val:0x3e736cd9;
   valaddr_reg:x12; val_offset:26*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 26*FLEN/8, x13, x9, x10)

inst_35:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x0dfb1a and fs2 == 0 and fe2 == 0x7e and fm2 == 0x0dfb1a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f0dfb1a; op2val:0x3f0dfb1a;
   valaddr_reg:x12; val_offset:28*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 28*FLEN/8, x13, x9, x10)

inst_36:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x0dfb1a and fs2 == 0 and fe2 == 0x7e and fm2 == 0x0dfb1a and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f0dfb1a; op2val:0x3f0dfb1a;
   valaddr_reg:x12; val_offset:30*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 30*FLEN/8, x13, x9, x10)

inst_37:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x0dfb1a and fs2 == 0 and fe2 == 0x7e and fm2 == 0x0dfb1a and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f0dfb1a; op2val:0x3f0dfb1a;
   valaddr_reg:x12; val_offset:32*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 32*FLEN/8, x13, x9, x10)

inst_38:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x0dfb1a and fs2 == 0 and fe2 == 0x7e and fm2 == 0x0dfb1a and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f0dfb1a; op2val:0x3f0dfb1a;
   valaddr_reg:x12; val_offset:34*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 34*FLEN/8, x13, x9, x10)

inst_39:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x0dfb1a and fs2 == 0 and fe2 == 0x7e and fm2 == 0x0dfb1a and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f0dfb1a; op2val:0x3f0dfb1a;
   valaddr_reg:x12; val_offset:36*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 36*FLEN/8, x13, x9, x10)

inst_40:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x456fd6 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x456fd6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f456fd6; op2val:0x3f456fd6;
   valaddr_reg:x12; val_offset:38*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 38*FLEN/8, x13, x9, x10)

inst_41:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x456fd6 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x456fd6 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f456fd6; op2val:0x3f456fd6;
   valaddr_reg:x12; val_offset:40*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 40*FLEN/8, x13, x9, x10)

inst_42:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x456fd6 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x456fd6 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f456fd6; op2val:0x3f456fd6;
   valaddr_reg:x12; val_offset:42*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 42*FLEN/8, x13, x9, x10)

inst_43:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x456fd6 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x456fd6 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f456fd6; op2val:0x3f456fd6;
   valaddr_reg:x12; val_offset:44*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 44*FLEN/8, x13, x9, x10)

inst_44:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x456fd6 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x456fd6 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f456fd6; op2val:0x3f456fd6;
   valaddr_reg:x12; val_offset:46*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 46*FLEN/8, x13, x9, x10)

inst_45:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x49e066 and fs2 == 0 and fe2 == 0x7b and fm2 == 0x49e066 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3dc9e066; op2val:0x3dc9e066;
   valaddr_reg:x12; val_offset:48*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 48*FLEN/8, x13, x9, x10)

inst_46:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x49e066 and fs2 == 0 and fe2 == 0x7b and fm2 == 0x49e066 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3dc9e066; op2val:0x3dc9e066;
   valaddr_reg:x12; val_offset:50*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 50*FLEN/8, x13, x9, x10)

inst_47:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x49e066 and fs2 == 0 and fe2 == 0x7b and fm2 == 0x49e066 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3dc9e066; op2val:0x3dc9e066;
   valaddr_reg:x12; val_offset:52*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 52*FLEN/8, x13, x9, x10)

inst_48:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x49e066 and fs2 == 0 and fe2 == 0x7b and fm2 == 0x49e066 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3dc9e066; op2val:0x3dc9e066;
   valaddr_reg:x12; val_offset:54*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 54*FLEN/8, x13, x9, x10)

inst_49:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x49e066 and fs2 == 0 and fe2 == 0x7b and fm2 == 0x49e066 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3dc9e066; op2val:0x3dc9e066;
   valaddr_reg:x12; val_offset:56*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 56*FLEN/8, x13, x9, x10)

inst_50:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x797c61 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x797c61 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f797c61; op2val:0x3f797c61;
   valaddr_reg:x12; val_offset:58*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 58*FLEN/8, x13, x9, x10)

inst_51:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x797c61 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x797c61 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f797c61; op2val:0x3f797c61;
   valaddr_reg:x12; val_offset:60*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 60*FLEN/8, x13, x9, x10)

inst_52:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x797c61 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x797c61 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f797c61; op2val:0x3f797c61;
   valaddr_reg:x12; val_offset:62*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 62*FLEN/8, x13, x9, x10)

inst_53:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x797c61 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x797c61 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f797c61; op2val:0x3f797c61;
   valaddr_reg:x12; val_offset:64*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 64*FLEN/8, x13, x9, x10)

inst_54:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x797c61 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x797c61 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f797c61; op2val:0x3f797c61;
   valaddr_reg:x12; val_offset:66*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 66*FLEN/8, x13, x9, x10)

inst_55:
// fs1 == 0 and fe1 == 0x7a and fm1 == 0x793eba and fs2 == 0 and fe2 == 0x7a and fm2 == 0x793eba and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3d793eba; op2val:0x3d793eba;
   valaddr_reg:x12; val_offset:68*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 68*FLEN/8, x13, x9, x10)

inst_56:
// fs1 == 0 and fe1 == 0x7a and fm1 == 0x793eba and fs2 == 0 and fe2 == 0x7a and fm2 == 0x793eba and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3d793eba; op2val:0x3d793eba;
   valaddr_reg:x12; val_offset:70*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 70*FLEN/8, x13, x9, x10)

inst_57:
// fs1 == 0 and fe1 == 0x7a and fm1 == 0x793eba and fs2 == 0 and fe2 == 0x7a and fm2 == 0x793eba and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3d793eba; op2val:0x3d793eba;
   valaddr_reg:x12; val_offset:72*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 72*FLEN/8, x13, x9, x10)

inst_58:
// fs1 == 0 and fe1 == 0x7a and fm1 == 0x793eba and fs2 == 0 and fe2 == 0x7a and fm2 == 0x793eba and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3d793eba; op2val:0x3d793eba;
   valaddr_reg:x12; val_offset:74*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 74*FLEN/8, x13, x9, x10)

inst_59:
// fs1 == 0 and fe1 == 0x7a and fm1 == 0x793eba and fs2 == 0 and fe2 == 0x7a and fm2 == 0x793eba and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3d793eba; op2val:0x3d793eba;
   valaddr_reg:x12; val_offset:76*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 76*FLEN/8, x13, x9, x10)

inst_60:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x488cf1 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x488cf1 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f488cf1; op2val:0x3f488cf1;
   valaddr_reg:x12; val_offset:78*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 78*FLEN/8, x13, x9, x10)

inst_61:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x488cf1 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x488cf1 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f488cf1; op2val:0x3f488cf1;
   valaddr_reg:x12; val_offset:80*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 80*FLEN/8, x13, x9, x10)

inst_62:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x488cf1 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x488cf1 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f488cf1; op2val:0x3f488cf1;
   valaddr_reg:x12; val_offset:82*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 82*FLEN/8, x13, x9, x10)

inst_63:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x488cf1 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x488cf1 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f488cf1; op2val:0x3f488cf1;
   valaddr_reg:x12; val_offset:84*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 84*FLEN/8, x13, x9, x10)

inst_64:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x488cf1 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x488cf1 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f488cf1; op2val:0x3f488cf1;
   valaddr_reg:x12; val_offset:86*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 86*FLEN/8, x13, x9, x10)

inst_65:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x7890c8 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x7890c8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f7890c8; op2val:0x3f7890c8;
   valaddr_reg:x12; val_offset:88*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 88*FLEN/8, x13, x9, x10)

inst_66:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x7890c8 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x7890c8 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f7890c8; op2val:0x3f7890c8;
   valaddr_reg:x12; val_offset:90*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 90*FLEN/8, x13, x9, x10)

inst_67:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x7890c8 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x7890c8 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f7890c8; op2val:0x3f7890c8;
   valaddr_reg:x12; val_offset:92*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 92*FLEN/8, x13, x9, x10)

inst_68:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x7890c8 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x7890c8 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f7890c8; op2val:0x3f7890c8;
   valaddr_reg:x12; val_offset:94*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 94*FLEN/8, x13, x9, x10)

inst_69:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x7890c8 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x7890c8 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f7890c8; op2val:0x3f7890c8;
   valaddr_reg:x12; val_offset:96*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 96*FLEN/8, x13, x9, x10)

inst_70:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x0fe699 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x0fe699 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f0fe699; op2val:0x3f0fe699;
   valaddr_reg:x12; val_offset:98*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 98*FLEN/8, x13, x9, x10)

inst_71:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x0fe699 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x0fe699 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f0fe699; op2val:0x3f0fe699;
   valaddr_reg:x12; val_offset:100*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 100*FLEN/8, x13, x9, x10)

inst_72:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x0fe699 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x0fe699 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f0fe699; op2val:0x3f0fe699;
   valaddr_reg:x12; val_offset:102*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 102*FLEN/8, x13, x9, x10)

inst_73:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x0fe699 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x0fe699 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f0fe699; op2val:0x3f0fe699;
   valaddr_reg:x12; val_offset:104*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 104*FLEN/8, x13, x9, x10)

inst_74:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x0fe699 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x0fe699 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f0fe699; op2val:0x3f0fe699;
   valaddr_reg:x12; val_offset:106*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 106*FLEN/8, x13, x9, x10)

inst_75:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x445493 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x445493 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f445493; op2val:0x3f445493;
   valaddr_reg:x12; val_offset:108*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 108*FLEN/8, x13, x9, x10)

inst_76:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x445493 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x445493 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f445493; op2val:0x3f445493;
   valaddr_reg:x12; val_offset:110*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 110*FLEN/8, x13, x9, x10)

inst_77:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x445493 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x445493 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f445493; op2val:0x3f445493;
   valaddr_reg:x12; val_offset:112*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 112*FLEN/8, x13, x9, x10)

inst_78:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x445493 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x445493 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f445493; op2val:0x3f445493;
   valaddr_reg:x12; val_offset:114*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 114*FLEN/8, x13, x9, x10)

inst_79:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x445493 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x445493 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f445493; op2val:0x3f445493;
   valaddr_reg:x12; val_offset:116*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 116*FLEN/8, x13, x9, x10)

inst_80:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x47fdf7 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x47fdf7 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f47fdf7; op2val:0x3f47fdf7;
   valaddr_reg:x12; val_offset:118*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 118*FLEN/8, x13, x9, x10)

inst_81:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x47fdf7 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x47fdf7 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f47fdf7; op2val:0x3f47fdf7;
   valaddr_reg:x12; val_offset:120*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 120*FLEN/8, x13, x9, x10)

inst_82:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x47fdf7 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x47fdf7 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f47fdf7; op2val:0x3f47fdf7;
   valaddr_reg:x12; val_offset:122*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 122*FLEN/8, x13, x9, x10)

inst_83:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x47fdf7 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x47fdf7 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f47fdf7; op2val:0x3f47fdf7;
   valaddr_reg:x12; val_offset:124*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 124*FLEN/8, x13, x9, x10)

inst_84:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x47fdf7 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x47fdf7 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f47fdf7; op2val:0x3f47fdf7;
   valaddr_reg:x12; val_offset:126*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 126*FLEN/8, x13, x9, x10)

inst_85:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x35d0df and fs2 == 0 and fe2 == 0x7e and fm2 == 0x35d0df and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f35d0df; op2val:0x3f35d0df;
   valaddr_reg:x12; val_offset:128*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 128*FLEN/8, x13, x9, x10)

inst_86:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x35d0df and fs2 == 0 and fe2 == 0x7e and fm2 == 0x35d0df and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f35d0df; op2val:0x3f35d0df;
   valaddr_reg:x12; val_offset:130*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 130*FLEN/8, x13, x9, x10)

inst_87:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x35d0df and fs2 == 0 and fe2 == 0x7e and fm2 == 0x35d0df and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f35d0df; op2val:0x3f35d0df;
   valaddr_reg:x12; val_offset:132*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 132*FLEN/8, x13, x9, x10)

inst_88:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x35d0df and fs2 == 0 and fe2 == 0x7e and fm2 == 0x35d0df and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f35d0df; op2val:0x3f35d0df;
   valaddr_reg:x12; val_offset:134*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 134*FLEN/8, x13, x9, x10)

inst_89:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x35d0df and fs2 == 0 and fe2 == 0x7e and fm2 == 0x35d0df and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f35d0df; op2val:0x3f35d0df;
   valaddr_reg:x12; val_offset:136*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 136*FLEN/8, x13, x9, x10)

inst_90:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x2651f5 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x2651f5 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e2651f5; op2val:0x3e2651f5;
   valaddr_reg:x12; val_offset:138*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 138*FLEN/8, x13, x9, x10)

inst_91:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x2651f5 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x2651f5 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e2651f5; op2val:0x3e2651f5;
   valaddr_reg:x12; val_offset:140*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 140*FLEN/8, x13, x9, x10)

inst_92:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x2651f5 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x2651f5 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e2651f5; op2val:0x3e2651f5;
   valaddr_reg:x12; val_offset:142*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 142*FLEN/8, x13, x9, x10)

inst_93:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x2651f5 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x2651f5 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e2651f5; op2val:0x3e2651f5;
   valaddr_reg:x12; val_offset:144*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 144*FLEN/8, x13, x9, x10)

inst_94:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x2651f5 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x2651f5 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e2651f5; op2val:0x3e2651f5;
   valaddr_reg:x12; val_offset:146*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 146*FLEN/8, x13, x9, x10)

inst_95:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x372531 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x372531 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3eb72531; op2val:0x3eb72531;
   valaddr_reg:x12; val_offset:148*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 148*FLEN/8, x13, x9, x10)

inst_96:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x372531 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x372531 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3eb72531; op2val:0x3eb72531;
   valaddr_reg:x12; val_offset:150*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 150*FLEN/8, x13, x9, x10)

inst_97:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x372531 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x372531 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3eb72531; op2val:0x3eb72531;
   valaddr_reg:x12; val_offset:152*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 152*FLEN/8, x13, x9, x10)

inst_98:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x372531 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x372531 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3eb72531; op2val:0x3eb72531;
   valaddr_reg:x12; val_offset:154*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 154*FLEN/8, x13, x9, x10)

inst_99:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x372531 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x372531 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3eb72531; op2val:0x3eb72531;
   valaddr_reg:x12; val_offset:156*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 156*FLEN/8, x13, x9, x10)

inst_100:
// fs1 == 0 and fe1 == 0x77 and fm1 == 0x745664 and fs2 == 0 and fe2 == 0x77 and fm2 == 0x745664 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3bf45664; op2val:0x3bf45664;
   valaddr_reg:x12; val_offset:158*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 158*FLEN/8, x13, x9, x10)

inst_101:
// fs1 == 0 and fe1 == 0x77 and fm1 == 0x745664 and fs2 == 0 and fe2 == 0x77 and fm2 == 0x745664 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3bf45664; op2val:0x3bf45664;
   valaddr_reg:x12; val_offset:160*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 160*FLEN/8, x13, x9, x10)

inst_102:
// fs1 == 0 and fe1 == 0x77 and fm1 == 0x745664 and fs2 == 0 and fe2 == 0x77 and fm2 == 0x745664 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3bf45664; op2val:0x3bf45664;
   valaddr_reg:x12; val_offset:162*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 162*FLEN/8, x13, x9, x10)

inst_103:
// fs1 == 0 and fe1 == 0x77 and fm1 == 0x745664 and fs2 == 0 and fe2 == 0x77 and fm2 == 0x745664 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3bf45664; op2val:0x3bf45664;
   valaddr_reg:x12; val_offset:164*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 164*FLEN/8, x13, x9, x10)

inst_104:
// fs1 == 0 and fe1 == 0x77 and fm1 == 0x745664 and fs2 == 0 and fe2 == 0x77 and fm2 == 0x745664 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3bf45664; op2val:0x3bf45664;
   valaddr_reg:x12; val_offset:166*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 166*FLEN/8, x13, x9, x10)

inst_105:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x610d5b and fs2 == 0 and fe2 == 0x7e and fm2 == 0x610d5b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f610d5b; op2val:0x3f610d5b;
   valaddr_reg:x12; val_offset:168*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 168*FLEN/8, x13, x9, x10)

inst_106:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x610d5b and fs2 == 0 and fe2 == 0x7e and fm2 == 0x610d5b and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f610d5b; op2val:0x3f610d5b;
   valaddr_reg:x12; val_offset:170*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 170*FLEN/8, x13, x9, x10)

inst_107:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x610d5b and fs2 == 0 and fe2 == 0x7e and fm2 == 0x610d5b and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f610d5b; op2val:0x3f610d5b;
   valaddr_reg:x12; val_offset:172*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 172*FLEN/8, x13, x9, x10)

inst_108:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x610d5b and fs2 == 0 and fe2 == 0x7e and fm2 == 0x610d5b and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f610d5b; op2val:0x3f610d5b;
   valaddr_reg:x12; val_offset:174*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 174*FLEN/8, x13, x9, x10)

inst_109:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x610d5b and fs2 == 0 and fe2 == 0x7e and fm2 == 0x610d5b and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f610d5b; op2val:0x3f610d5b;
   valaddr_reg:x12; val_offset:176*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 176*FLEN/8, x13, x9, x10)

inst_110:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x0e9998 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x0e9998 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e8e9998; op2val:0x3e8e9998;
   valaddr_reg:x12; val_offset:178*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 178*FLEN/8, x13, x9, x10)

inst_111:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x0e9998 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x0e9998 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e8e9998; op2val:0x3e8e9998;
   valaddr_reg:x12; val_offset:180*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 180*FLEN/8, x13, x9, x10)

inst_112:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x0e9998 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x0e9998 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e8e9998; op2val:0x3e8e9998;
   valaddr_reg:x12; val_offset:182*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 182*FLEN/8, x13, x9, x10)

inst_113:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x0e9998 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x0e9998 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e8e9998; op2val:0x3e8e9998;
   valaddr_reg:x12; val_offset:184*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 184*FLEN/8, x13, x9, x10)

inst_114:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x0e9998 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x0e9998 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e8e9998; op2val:0x3e8e9998;
   valaddr_reg:x12; val_offset:186*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 186*FLEN/8, x13, x9, x10)

inst_115:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x022b70 and fs2 == 0 and fe2 == 0x7b and fm2 == 0x022b70 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3d822b70; op2val:0x3d822b70;
   valaddr_reg:x12; val_offset:188*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 188*FLEN/8, x13, x9, x10)

inst_116:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x022b70 and fs2 == 0 and fe2 == 0x7b and fm2 == 0x022b70 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3d822b70; op2val:0x3d822b70;
   valaddr_reg:x12; val_offset:190*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 190*FLEN/8, x13, x9, x10)

inst_117:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x022b70 and fs2 == 0 and fe2 == 0x7b and fm2 == 0x022b70 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3d822b70; op2val:0x3d822b70;
   valaddr_reg:x12; val_offset:192*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 192*FLEN/8, x13, x9, x10)

inst_118:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x022b70 and fs2 == 0 and fe2 == 0x7b and fm2 == 0x022b70 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3d822b70; op2val:0x3d822b70;
   valaddr_reg:x12; val_offset:194*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 194*FLEN/8, x13, x9, x10)

inst_119:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x022b70 and fs2 == 0 and fe2 == 0x7b and fm2 == 0x022b70 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3d822b70; op2val:0x3d822b70;
   valaddr_reg:x12; val_offset:196*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 196*FLEN/8, x13, x9, x10)

inst_120:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x2e0b1f and fs2 == 0 and fe2 == 0x7c and fm2 == 0x2e0b1f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e2e0b1f; op2val:0x3e2e0b1f;
   valaddr_reg:x12; val_offset:198*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 198*FLEN/8, x13, x9, x10)

inst_121:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x2e0b1f and fs2 == 0 and fe2 == 0x7c and fm2 == 0x2e0b1f and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e2e0b1f; op2val:0x3e2e0b1f;
   valaddr_reg:x12; val_offset:200*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 200*FLEN/8, x13, x9, x10)

inst_122:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x2e0b1f and fs2 == 0 and fe2 == 0x7c and fm2 == 0x2e0b1f and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e2e0b1f; op2val:0x3e2e0b1f;
   valaddr_reg:x12; val_offset:202*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 202*FLEN/8, x13, x9, x10)

inst_123:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x2e0b1f and fs2 == 0 and fe2 == 0x7c and fm2 == 0x2e0b1f and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e2e0b1f; op2val:0x3e2e0b1f;
   valaddr_reg:x12; val_offset:204*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 204*FLEN/8, x13, x9, x10)

inst_124:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x2e0b1f and fs2 == 0 and fe2 == 0x7c and fm2 == 0x2e0b1f and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e2e0b1f; op2val:0x3e2e0b1f;
   valaddr_reg:x12; val_offset:206*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 206*FLEN/8, x13, x9, x10)

inst_125:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x325670 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x325670 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f325670; op2val:0x3f325670;
   valaddr_reg:x12; val_offset:208*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 208*FLEN/8, x13, x9, x10)

inst_126:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x325670 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x325670 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f325670; op2val:0x3f325670;
   valaddr_reg:x12; val_offset:210*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 210*FLEN/8, x13, x9, x10)

inst_127:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x325670 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x325670 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f325670; op2val:0x3f325670;
   valaddr_reg:x12; val_offset:212*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 212*FLEN/8, x13, x9, x10)

inst_128:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x325670 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x325670 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f325670; op2val:0x3f325670;
   valaddr_reg:x12; val_offset:214*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 214*FLEN/8, x13, x9, x10)

inst_129:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x325670 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x325670 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f325670; op2val:0x3f325670;
   valaddr_reg:x12; val_offset:216*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 216*FLEN/8, x13, x9, x10)

inst_130:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x70aed9 and fs2 == 0 and fe2 == 0x7b and fm2 == 0x70aed9 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3df0aed9; op2val:0x3df0aed9;
   valaddr_reg:x12; val_offset:218*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 218*FLEN/8, x13, x9, x10)

inst_131:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x70aed9 and fs2 == 0 and fe2 == 0x7b and fm2 == 0x70aed9 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3df0aed9; op2val:0x3df0aed9;
   valaddr_reg:x12; val_offset:220*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 220*FLEN/8, x13, x9, x10)

inst_132:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x70aed9 and fs2 == 0 and fe2 == 0x7b and fm2 == 0x70aed9 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3df0aed9; op2val:0x3df0aed9;
   valaddr_reg:x12; val_offset:222*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 222*FLEN/8, x13, x9, x10)

inst_133:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x70aed9 and fs2 == 0 and fe2 == 0x7b and fm2 == 0x70aed9 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3df0aed9; op2val:0x3df0aed9;
   valaddr_reg:x12; val_offset:224*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 224*FLEN/8, x13, x9, x10)

inst_134:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x70aed9 and fs2 == 0 and fe2 == 0x7b and fm2 == 0x70aed9 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3df0aed9; op2val:0x3df0aed9;
   valaddr_reg:x12; val_offset:226*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 226*FLEN/8, x13, x9, x10)

inst_135:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x7d4b70 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x7d4b70 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3efd4b70; op2val:0x3efd4b70;
   valaddr_reg:x12; val_offset:228*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 228*FLEN/8, x13, x9, x10)

inst_136:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x7d4b70 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x7d4b70 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3efd4b70; op2val:0x3efd4b70;
   valaddr_reg:x12; val_offset:230*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 230*FLEN/8, x13, x9, x10)

inst_137:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x7d4b70 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x7d4b70 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3efd4b70; op2val:0x3efd4b70;
   valaddr_reg:x12; val_offset:232*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 232*FLEN/8, x13, x9, x10)

inst_138:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x7d4b70 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x7d4b70 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3efd4b70; op2val:0x3efd4b70;
   valaddr_reg:x12; val_offset:234*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 234*FLEN/8, x13, x9, x10)

inst_139:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x7d4b70 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x7d4b70 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3efd4b70; op2val:0x3efd4b70;
   valaddr_reg:x12; val_offset:236*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 236*FLEN/8, x13, x9, x10)

inst_140:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x772950 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x772950 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f772950; op2val:0x3f772950;
   valaddr_reg:x12; val_offset:238*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 238*FLEN/8, x13, x9, x10)

inst_141:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x772950 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x772950 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f772950; op2val:0x3f772950;
   valaddr_reg:x12; val_offset:240*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 240*FLEN/8, x13, x9, x10)

inst_142:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x772950 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x772950 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f772950; op2val:0x3f772950;
   valaddr_reg:x12; val_offset:242*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 242*FLEN/8, x13, x9, x10)

inst_143:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x772950 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x772950 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f772950; op2val:0x3f772950;
   valaddr_reg:x12; val_offset:244*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 244*FLEN/8, x13, x9, x10)

inst_144:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x772950 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x772950 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f772950; op2val:0x3f772950;
   valaddr_reg:x12; val_offset:246*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 246*FLEN/8, x13, x9, x10)

inst_145:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x4f7542 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x4f7542 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e4f7542; op2val:0x3e4f7542;
   valaddr_reg:x12; val_offset:248*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 248*FLEN/8, x13, x9, x10)

inst_146:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x4f7542 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x4f7542 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e4f7542; op2val:0x3e4f7542;
   valaddr_reg:x12; val_offset:250*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 250*FLEN/8, x13, x9, x10)

inst_147:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x4f7542 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x4f7542 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e4f7542; op2val:0x3e4f7542;
   valaddr_reg:x12; val_offset:252*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 252*FLEN/8, x13, x9, x10)

inst_148:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x4f7542 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x4f7542 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e4f7542; op2val:0x3e4f7542;
   valaddr_reg:x12; val_offset:254*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 254*FLEN/8, x13, x9, x10)

inst_149:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x4f7542 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x4f7542 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e4f7542; op2val:0x3e4f7542;
   valaddr_reg:x12; val_offset:256*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 256*FLEN/8, x13, x9, x10)

inst_150:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x53b5c9 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x53b5c9 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f53b5c9; op2val:0x3f53b5c9;
   valaddr_reg:x12; val_offset:258*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 258*FLEN/8, x13, x9, x10)

inst_151:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x53b5c9 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x53b5c9 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f53b5c9; op2val:0x3f53b5c9;
   valaddr_reg:x12; val_offset:260*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 260*FLEN/8, x13, x9, x10)
RVTEST_SIGBASE(x9,signature_x9_1)

inst_152:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x53b5c9 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x53b5c9 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f53b5c9; op2val:0x3f53b5c9;
   valaddr_reg:x12; val_offset:262*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 262*FLEN/8, x13, x9, x10)

inst_153:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x53b5c9 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x53b5c9 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f53b5c9; op2val:0x3f53b5c9;
   valaddr_reg:x12; val_offset:264*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 264*FLEN/8, x13, x9, x10)

inst_154:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x53b5c9 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x53b5c9 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f53b5c9; op2val:0x3f53b5c9;
   valaddr_reg:x12; val_offset:266*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 266*FLEN/8, x13, x9, x10)

inst_155:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x180b0a and fs2 == 0 and fe2 == 0x7d and fm2 == 0x180b0a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e980b0a; op2val:0x3e980b0a;
   valaddr_reg:x12; val_offset:268*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 268*FLEN/8, x13, x9, x10)

inst_156:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x180b0a and fs2 == 0 and fe2 == 0x7d and fm2 == 0x180b0a and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e980b0a; op2val:0x3e980b0a;
   valaddr_reg:x12; val_offset:270*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 270*FLEN/8, x13, x9, x10)

inst_157:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x180b0a and fs2 == 0 and fe2 == 0x7d and fm2 == 0x180b0a and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e980b0a; op2val:0x3e980b0a;
   valaddr_reg:x12; val_offset:272*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 272*FLEN/8, x13, x9, x10)

inst_158:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x180b0a and fs2 == 0 and fe2 == 0x7d and fm2 == 0x180b0a and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e980b0a; op2val:0x3e980b0a;
   valaddr_reg:x12; val_offset:274*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 274*FLEN/8, x13, x9, x10)

inst_159:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x180b0a and fs2 == 0 and fe2 == 0x7d and fm2 == 0x180b0a and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e980b0a; op2val:0x3e980b0a;
   valaddr_reg:x12; val_offset:276*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 276*FLEN/8, x13, x9, x10)

inst_160:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x201376 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x201376 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f201376; op2val:0x3f201376;
   valaddr_reg:x12; val_offset:278*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 278*FLEN/8, x13, x9, x10)

inst_161:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x201376 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x201376 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f201376; op2val:0x3f201376;
   valaddr_reg:x12; val_offset:280*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 280*FLEN/8, x13, x9, x10)

inst_162:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x201376 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x201376 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f201376; op2val:0x3f201376;
   valaddr_reg:x12; val_offset:282*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 282*FLEN/8, x13, x9, x10)

inst_163:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x201376 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x201376 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f201376; op2val:0x3f201376;
   valaddr_reg:x12; val_offset:284*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 284*FLEN/8, x13, x9, x10)

inst_164:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x201376 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x201376 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f201376; op2val:0x3f201376;
   valaddr_reg:x12; val_offset:286*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 286*FLEN/8, x13, x9, x10)

inst_165:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x7baf85 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x7baf85 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3efbaf85; op2val:0x3efbaf85;
   valaddr_reg:x12; val_offset:288*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 288*FLEN/8, x13, x9, x10)

inst_166:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x7baf85 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x7baf85 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3efbaf85; op2val:0x3efbaf85;
   valaddr_reg:x12; val_offset:290*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 290*FLEN/8, x13, x9, x10)

inst_167:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x7baf85 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x7baf85 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3efbaf85; op2val:0x3efbaf85;
   valaddr_reg:x12; val_offset:292*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 292*FLEN/8, x13, x9, x10)

inst_168:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x7baf85 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x7baf85 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3efbaf85; op2val:0x3efbaf85;
   valaddr_reg:x12; val_offset:294*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 294*FLEN/8, x13, x9, x10)

inst_169:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x7baf85 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x7baf85 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3efbaf85; op2val:0x3efbaf85;
   valaddr_reg:x12; val_offset:296*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 296*FLEN/8, x13, x9, x10)

inst_170:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x75478f and fs2 == 0 and fe2 == 0x7d and fm2 == 0x75478f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ef5478f; op2val:0x3ef5478f;
   valaddr_reg:x12; val_offset:298*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 298*FLEN/8, x13, x9, x10)

inst_171:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x75478f and fs2 == 0 and fe2 == 0x7d and fm2 == 0x75478f and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ef5478f; op2val:0x3ef5478f;
   valaddr_reg:x12; val_offset:300*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 300*FLEN/8, x13, x9, x10)

inst_172:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x75478f and fs2 == 0 and fe2 == 0x7d and fm2 == 0x75478f and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ef5478f; op2val:0x3ef5478f;
   valaddr_reg:x12; val_offset:302*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 302*FLEN/8, x13, x9, x10)

inst_173:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x75478f and fs2 == 0 and fe2 == 0x7d and fm2 == 0x75478f and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ef5478f; op2val:0x3ef5478f;
   valaddr_reg:x12; val_offset:304*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 304*FLEN/8, x13, x9, x10)

inst_174:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x75478f and fs2 == 0 and fe2 == 0x7d and fm2 == 0x75478f and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ef5478f; op2val:0x3ef5478f;
   valaddr_reg:x12; val_offset:306*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 306*FLEN/8, x13, x9, x10)

inst_175:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x02a372 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x02a372 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f02a372; op2val:0x3f02a372;
   valaddr_reg:x12; val_offset:308*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 308*FLEN/8, x13, x9, x10)

inst_176:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x02a372 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x02a372 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f02a372; op2val:0x3f02a372;
   valaddr_reg:x12; val_offset:310*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 310*FLEN/8, x13, x9, x10)

inst_177:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x02a372 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x02a372 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f02a372; op2val:0x3f02a372;
   valaddr_reg:x12; val_offset:312*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 312*FLEN/8, x13, x9, x10)

inst_178:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x02a372 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x02a372 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f02a372; op2val:0x3f02a372;
   valaddr_reg:x12; val_offset:314*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 314*FLEN/8, x13, x9, x10)

inst_179:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x02a372 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x02a372 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f02a372; op2val:0x3f02a372;
   valaddr_reg:x12; val_offset:316*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 316*FLEN/8, x13, x9, x10)

inst_180:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x74de04 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x74de04 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f74de04; op2val:0x3f74de04;
   valaddr_reg:x12; val_offset:318*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 318*FLEN/8, x13, x9, x10)

inst_181:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x74de04 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x74de04 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f74de04; op2val:0x3f74de04;
   valaddr_reg:x12; val_offset:320*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 320*FLEN/8, x13, x9, x10)

inst_182:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x74de04 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x74de04 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f74de04; op2val:0x3f74de04;
   valaddr_reg:x12; val_offset:322*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 322*FLEN/8, x13, x9, x10)

inst_183:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x74de04 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x74de04 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f74de04; op2val:0x3f74de04;
   valaddr_reg:x12; val_offset:324*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 324*FLEN/8, x13, x9, x10)

inst_184:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x74de04 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x74de04 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f74de04; op2val:0x3f74de04;
   valaddr_reg:x12; val_offset:326*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 326*FLEN/8, x13, x9, x10)

inst_185:
// fs1 == 0 and fe1 == 0x79 and fm1 == 0x09b9e9 and fs2 == 0 and fe2 == 0x79 and fm2 == 0x09b9e9 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3c89b9e9; op2val:0x3c89b9e9;
   valaddr_reg:x12; val_offset:328*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 328*FLEN/8, x13, x9, x10)

inst_186:
// fs1 == 0 and fe1 == 0x79 and fm1 == 0x09b9e9 and fs2 == 0 and fe2 == 0x79 and fm2 == 0x09b9e9 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3c89b9e9; op2val:0x3c89b9e9;
   valaddr_reg:x12; val_offset:330*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 330*FLEN/8, x13, x9, x10)

inst_187:
// fs1 == 0 and fe1 == 0x79 and fm1 == 0x09b9e9 and fs2 == 0 and fe2 == 0x79 and fm2 == 0x09b9e9 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3c89b9e9; op2val:0x3c89b9e9;
   valaddr_reg:x12; val_offset:332*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 332*FLEN/8, x13, x9, x10)

inst_188:
// fs1 == 0 and fe1 == 0x79 and fm1 == 0x09b9e9 and fs2 == 0 and fe2 == 0x79 and fm2 == 0x09b9e9 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3c89b9e9; op2val:0x3c89b9e9;
   valaddr_reg:x12; val_offset:334*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 334*FLEN/8, x13, x9, x10)

inst_189:
// fs1 == 0 and fe1 == 0x79 and fm1 == 0x09b9e9 and fs2 == 0 and fe2 == 0x79 and fm2 == 0x09b9e9 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3c89b9e9; op2val:0x3c89b9e9;
   valaddr_reg:x12; val_offset:336*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 336*FLEN/8, x13, x9, x10)

inst_190:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x1b3d0d and fs2 == 0 and fe2 == 0x7e and fm2 == 0x1b3d0d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f1b3d0d; op2val:0x3f1b3d0d;
   valaddr_reg:x12; val_offset:338*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 338*FLEN/8, x13, x9, x10)

inst_191:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x1b3d0d and fs2 == 0 and fe2 == 0x7e and fm2 == 0x1b3d0d and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f1b3d0d; op2val:0x3f1b3d0d;
   valaddr_reg:x12; val_offset:340*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 340*FLEN/8, x13, x9, x10)

inst_192:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x1b3d0d and fs2 == 0 and fe2 == 0x7e and fm2 == 0x1b3d0d and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f1b3d0d; op2val:0x3f1b3d0d;
   valaddr_reg:x12; val_offset:342*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 342*FLEN/8, x13, x9, x10)

inst_193:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x1b3d0d and fs2 == 0 and fe2 == 0x7e and fm2 == 0x1b3d0d and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f1b3d0d; op2val:0x3f1b3d0d;
   valaddr_reg:x12; val_offset:344*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 344*FLEN/8, x13, x9, x10)

inst_194:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x1b3d0d and fs2 == 0 and fe2 == 0x7e and fm2 == 0x1b3d0d and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f1b3d0d; op2val:0x3f1b3d0d;
   valaddr_reg:x12; val_offset:346*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 346*FLEN/8, x13, x9, x10)

inst_195:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x7eda96 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x7eda96 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3efeda96; op2val:0x3efeda96;
   valaddr_reg:x12; val_offset:348*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 348*FLEN/8, x13, x9, x10)

inst_196:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x7eda96 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x7eda96 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3efeda96; op2val:0x3efeda96;
   valaddr_reg:x12; val_offset:350*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 350*FLEN/8, x13, x9, x10)

inst_197:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x7eda96 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x7eda96 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3efeda96; op2val:0x3efeda96;
   valaddr_reg:x12; val_offset:352*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 352*FLEN/8, x13, x9, x10)

inst_198:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x7eda96 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x7eda96 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3efeda96; op2val:0x3efeda96;
   valaddr_reg:x12; val_offset:354*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 354*FLEN/8, x13, x9, x10)

inst_199:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x7eda96 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x7eda96 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3efeda96; op2val:0x3efeda96;
   valaddr_reg:x12; val_offset:356*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 356*FLEN/8, x13, x9, x10)

inst_200:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x6afbfb and fs2 == 0 and fe2 == 0x7c and fm2 == 0x6afbfb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e6afbfb; op2val:0x3e6afbfb;
   valaddr_reg:x12; val_offset:358*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 358*FLEN/8, x13, x9, x10)

inst_201:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x6afbfb and fs2 == 0 and fe2 == 0x7c and fm2 == 0x6afbfb and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e6afbfb; op2val:0x3e6afbfb;
   valaddr_reg:x12; val_offset:360*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 360*FLEN/8, x13, x9, x10)

inst_202:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x6afbfb and fs2 == 0 and fe2 == 0x7c and fm2 == 0x6afbfb and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e6afbfb; op2val:0x3e6afbfb;
   valaddr_reg:x12; val_offset:362*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 362*FLEN/8, x13, x9, x10)

inst_203:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x6afbfb and fs2 == 0 and fe2 == 0x7c and fm2 == 0x6afbfb and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e6afbfb; op2val:0x3e6afbfb;
   valaddr_reg:x12; val_offset:364*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 364*FLEN/8, x13, x9, x10)

inst_204:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x6afbfb and fs2 == 0 and fe2 == 0x7c and fm2 == 0x6afbfb and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e6afbfb; op2val:0x3e6afbfb;
   valaddr_reg:x12; val_offset:366*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 366*FLEN/8, x13, x9, x10)

inst_205:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x0f1032 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x0f1032 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e0f1032; op2val:0x3e0f1032;
   valaddr_reg:x12; val_offset:368*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 368*FLEN/8, x13, x9, x10)

inst_206:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x0f1032 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x0f1032 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e0f1032; op2val:0x3e0f1032;
   valaddr_reg:x12; val_offset:370*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 370*FLEN/8, x13, x9, x10)

inst_207:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x0f1032 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x0f1032 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e0f1032; op2val:0x3e0f1032;
   valaddr_reg:x12; val_offset:372*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 372*FLEN/8, x13, x9, x10)

inst_208:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x0f1032 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x0f1032 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e0f1032; op2val:0x3e0f1032;
   valaddr_reg:x12; val_offset:374*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 374*FLEN/8, x13, x9, x10)

inst_209:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x0f1032 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x0f1032 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e0f1032; op2val:0x3e0f1032;
   valaddr_reg:x12; val_offset:376*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 376*FLEN/8, x13, x9, x10)

inst_210:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x78f2eb and fs2 == 0 and fe2 == 0x7d and fm2 == 0x78f2eb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ef8f2eb; op2val:0x3ef8f2eb;
   valaddr_reg:x12; val_offset:378*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 378*FLEN/8, x13, x9, x10)

inst_211:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x78f2eb and fs2 == 0 and fe2 == 0x7d and fm2 == 0x78f2eb and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ef8f2eb; op2val:0x3ef8f2eb;
   valaddr_reg:x12; val_offset:380*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 380*FLEN/8, x13, x9, x10)

inst_212:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x78f2eb and fs2 == 0 and fe2 == 0x7d and fm2 == 0x78f2eb and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ef8f2eb; op2val:0x3ef8f2eb;
   valaddr_reg:x12; val_offset:382*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 382*FLEN/8, x13, x9, x10)

inst_213:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x78f2eb and fs2 == 0 and fe2 == 0x7d and fm2 == 0x78f2eb and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ef8f2eb; op2val:0x3ef8f2eb;
   valaddr_reg:x12; val_offset:384*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 384*FLEN/8, x13, x9, x10)

inst_214:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x78f2eb and fs2 == 0 and fe2 == 0x7d and fm2 == 0x78f2eb and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ef8f2eb; op2val:0x3ef8f2eb;
   valaddr_reg:x12; val_offset:386*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 386*FLEN/8, x13, x9, x10)

inst_215:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x582b47 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x582b47 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ed82b47; op2val:0x3ed82b47;
   valaddr_reg:x12; val_offset:388*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 388*FLEN/8, x13, x9, x10)

inst_216:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x582b47 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x582b47 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ed82b47; op2val:0x3ed82b47;
   valaddr_reg:x12; val_offset:390*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 390*FLEN/8, x13, x9, x10)

inst_217:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x582b47 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x582b47 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ed82b47; op2val:0x3ed82b47;
   valaddr_reg:x12; val_offset:392*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 392*FLEN/8, x13, x9, x10)

inst_218:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x582b47 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x582b47 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ed82b47; op2val:0x3ed82b47;
   valaddr_reg:x12; val_offset:394*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 394*FLEN/8, x13, x9, x10)

inst_219:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x582b47 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x582b47 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ed82b47; op2val:0x3ed82b47;
   valaddr_reg:x12; val_offset:396*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 396*FLEN/8, x13, x9, x10)

inst_220:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x3b1080 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x3b1080 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f3b1080; op2val:0x3f3b1080;
   valaddr_reg:x12; val_offset:398*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 398*FLEN/8, x13, x9, x10)

inst_221:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x3b1080 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x3b1080 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f3b1080; op2val:0x3f3b1080;
   valaddr_reg:x12; val_offset:400*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 400*FLEN/8, x13, x9, x10)

inst_222:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x3b1080 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x3b1080 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f3b1080; op2val:0x3f3b1080;
   valaddr_reg:x12; val_offset:402*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 402*FLEN/8, x13, x9, x10)

inst_223:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x3b1080 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x3b1080 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f3b1080; op2val:0x3f3b1080;
   valaddr_reg:x12; val_offset:404*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 404*FLEN/8, x13, x9, x10)

inst_224:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x3b1080 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x3b1080 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f3b1080; op2val:0x3f3b1080;
   valaddr_reg:x12; val_offset:406*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 406*FLEN/8, x13, x9, x10)

inst_225:
// fs1 == 0 and fe1 == 0x7a and fm1 == 0x2fa6d6 and fs2 == 0 and fe2 == 0x7a and fm2 == 0x2fa6d6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3d2fa6d6; op2val:0x3d2fa6d6;
   valaddr_reg:x12; val_offset:408*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 408*FLEN/8, x13, x9, x10)

inst_226:
// fs1 == 0 and fe1 == 0x7a and fm1 == 0x2fa6d6 and fs2 == 0 and fe2 == 0x7a and fm2 == 0x2fa6d6 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3d2fa6d6; op2val:0x3d2fa6d6;
   valaddr_reg:x12; val_offset:410*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 410*FLEN/8, x13, x9, x10)

inst_227:
// fs1 == 0 and fe1 == 0x7a and fm1 == 0x2fa6d6 and fs2 == 0 and fe2 == 0x7a and fm2 == 0x2fa6d6 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3d2fa6d6; op2val:0x3d2fa6d6;
   valaddr_reg:x12; val_offset:412*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 412*FLEN/8, x13, x9, x10)

inst_228:
// fs1 == 0 and fe1 == 0x7a and fm1 == 0x2fa6d6 and fs2 == 0 and fe2 == 0x7a and fm2 == 0x2fa6d6 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3d2fa6d6; op2val:0x3d2fa6d6;
   valaddr_reg:x12; val_offset:414*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 414*FLEN/8, x13, x9, x10)

inst_229:
// fs1 == 0 and fe1 == 0x7a and fm1 == 0x2fa6d6 and fs2 == 0 and fe2 == 0x7a and fm2 == 0x2fa6d6 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3d2fa6d6; op2val:0x3d2fa6d6;
   valaddr_reg:x12; val_offset:416*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 416*FLEN/8, x13, x9, x10)

inst_230:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x5d897b and fs2 == 0 and fe2 == 0x7c and fm2 == 0x5d897b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e5d897b; op2val:0x3e5d897b;
   valaddr_reg:x12; val_offset:418*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 418*FLEN/8, x13, x9, x10)

inst_231:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x5d897b and fs2 == 0 and fe2 == 0x7c and fm2 == 0x5d897b and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e5d897b; op2val:0x3e5d897b;
   valaddr_reg:x12; val_offset:420*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 420*FLEN/8, x13, x9, x10)

inst_232:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x5d897b and fs2 == 0 and fe2 == 0x7c and fm2 == 0x5d897b and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e5d897b; op2val:0x3e5d897b;
   valaddr_reg:x12; val_offset:422*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 422*FLEN/8, x13, x9, x10)

inst_233:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x5d897b and fs2 == 0 and fe2 == 0x7c and fm2 == 0x5d897b and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e5d897b; op2val:0x3e5d897b;
   valaddr_reg:x12; val_offset:424*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 424*FLEN/8, x13, x9, x10)

inst_234:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x5d897b and fs2 == 0 and fe2 == 0x7c and fm2 == 0x5d897b and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e5d897b; op2val:0x3e5d897b;
   valaddr_reg:x12; val_offset:426*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 426*FLEN/8, x13, x9, x10)

inst_235:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x691aae and fs2 == 0 and fe2 == 0x7b and fm2 == 0x691aae and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3de91aae; op2val:0x3de91aae;
   valaddr_reg:x12; val_offset:428*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 428*FLEN/8, x13, x9, x10)

inst_236:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x691aae and fs2 == 0 and fe2 == 0x7b and fm2 == 0x691aae and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3de91aae; op2val:0x3de91aae;
   valaddr_reg:x12; val_offset:430*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 430*FLEN/8, x13, x9, x10)

inst_237:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x691aae and fs2 == 0 and fe2 == 0x7b and fm2 == 0x691aae and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3de91aae; op2val:0x3de91aae;
   valaddr_reg:x12; val_offset:432*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 432*FLEN/8, x13, x9, x10)

inst_238:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x691aae and fs2 == 0 and fe2 == 0x7b and fm2 == 0x691aae and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3de91aae; op2val:0x3de91aae;
   valaddr_reg:x12; val_offset:434*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 434*FLEN/8, x13, x9, x10)

inst_239:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x691aae and fs2 == 0 and fe2 == 0x7b and fm2 == 0x691aae and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3de91aae; op2val:0x3de91aae;
   valaddr_reg:x12; val_offset:436*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 436*FLEN/8, x13, x9, x10)

inst_240:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x4370d4 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x4370d4 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e4370d4; op2val:0x3e4370d4;
   valaddr_reg:x12; val_offset:438*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 438*FLEN/8, x13, x9, x10)

inst_241:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x4370d4 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x4370d4 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e4370d4; op2val:0x3e4370d4;
   valaddr_reg:x12; val_offset:440*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 440*FLEN/8, x13, x9, x10)

inst_242:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x4370d4 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x4370d4 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e4370d4; op2val:0x3e4370d4;
   valaddr_reg:x12; val_offset:442*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 442*FLEN/8, x13, x9, x10)

inst_243:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x4370d4 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x4370d4 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e4370d4; op2val:0x3e4370d4;
   valaddr_reg:x12; val_offset:444*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 444*FLEN/8, x13, x9, x10)

inst_244:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x4370d4 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x4370d4 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e4370d4; op2val:0x3e4370d4;
   valaddr_reg:x12; val_offset:446*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 446*FLEN/8, x13, x9, x10)

inst_245:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x6095b3 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x6095b3 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ee095b3; op2val:0x3ee095b3;
   valaddr_reg:x12; val_offset:448*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 448*FLEN/8, x13, x9, x10)

inst_246:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x6095b3 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x6095b3 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ee095b3; op2val:0x3ee095b3;
   valaddr_reg:x12; val_offset:450*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 450*FLEN/8, x13, x9, x10)

inst_247:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x6095b3 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x6095b3 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ee095b3; op2val:0x3ee095b3;
   valaddr_reg:x12; val_offset:452*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 452*FLEN/8, x13, x9, x10)

inst_248:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x6095b3 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x6095b3 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ee095b3; op2val:0x3ee095b3;
   valaddr_reg:x12; val_offset:454*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 454*FLEN/8, x13, x9, x10)

inst_249:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x6095b3 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x6095b3 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ee095b3; op2val:0x3ee095b3;
   valaddr_reg:x12; val_offset:456*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 456*FLEN/8, x13, x9, x10)

inst_250:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x71a1e7 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x71a1e7 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f71a1e7; op2val:0x3f71a1e7;
   valaddr_reg:x12; val_offset:458*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 458*FLEN/8, x13, x9, x10)

inst_251:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x71a1e7 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x71a1e7 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f71a1e7; op2val:0x3f71a1e7;
   valaddr_reg:x12; val_offset:460*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 460*FLEN/8, x13, x9, x10)

inst_252:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x71a1e7 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x71a1e7 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f71a1e7; op2val:0x3f71a1e7;
   valaddr_reg:x12; val_offset:462*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 462*FLEN/8, x13, x9, x10)

inst_253:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x71a1e7 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x71a1e7 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f71a1e7; op2val:0x3f71a1e7;
   valaddr_reg:x12; val_offset:464*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 464*FLEN/8, x13, x9, x10)

inst_254:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x71a1e7 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x71a1e7 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f71a1e7; op2val:0x3f71a1e7;
   valaddr_reg:x12; val_offset:466*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 466*FLEN/8, x13, x9, x10)

inst_255:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x5c290c and fs2 == 0 and fe2 == 0x7d and fm2 == 0x5c290c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3edc290c; op2val:0x3edc290c;
   valaddr_reg:x12; val_offset:468*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 468*FLEN/8, x13, x9, x10)

inst_256:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x5c290c and fs2 == 0 and fe2 == 0x7d and fm2 == 0x5c290c and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3edc290c; op2val:0x3edc290c;
   valaddr_reg:x12; val_offset:470*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 470*FLEN/8, x13, x9, x10)

inst_257:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x5c290c and fs2 == 0 and fe2 == 0x7d and fm2 == 0x5c290c and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3edc290c; op2val:0x3edc290c;
   valaddr_reg:x12; val_offset:472*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 472*FLEN/8, x13, x9, x10)

inst_258:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x5c290c and fs2 == 0 and fe2 == 0x7d and fm2 == 0x5c290c and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3edc290c; op2val:0x3edc290c;
   valaddr_reg:x12; val_offset:474*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 474*FLEN/8, x13, x9, x10)

inst_259:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x5c290c and fs2 == 0 and fe2 == 0x7d and fm2 == 0x5c290c and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3edc290c; op2val:0x3edc290c;
   valaddr_reg:x12; val_offset:476*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 476*FLEN/8, x13, x9, x10)

inst_260:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x7d9547 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x7d9547 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3efd9547; op2val:0x3efd9547;
   valaddr_reg:x12; val_offset:478*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 478*FLEN/8, x13, x9, x10)

inst_261:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x7d9547 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x7d9547 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3efd9547; op2val:0x3efd9547;
   valaddr_reg:x12; val_offset:480*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 480*FLEN/8, x13, x9, x10)

inst_262:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x7d9547 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x7d9547 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3efd9547; op2val:0x3efd9547;
   valaddr_reg:x12; val_offset:482*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 482*FLEN/8, x13, x9, x10)

inst_263:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x7d9547 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x7d9547 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3efd9547; op2val:0x3efd9547;
   valaddr_reg:x12; val_offset:484*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 484*FLEN/8, x13, x9, x10)

inst_264:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x7d9547 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x7d9547 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3efd9547; op2val:0x3efd9547;
   valaddr_reg:x12; val_offset:486*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 486*FLEN/8, x13, x9, x10)

inst_265:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x24a969 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x24a969 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f24a969; op2val:0x3f24a969;
   valaddr_reg:x12; val_offset:488*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 488*FLEN/8, x13, x9, x10)

inst_266:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x24a969 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x24a969 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f24a969; op2val:0x3f24a969;
   valaddr_reg:x12; val_offset:490*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 490*FLEN/8, x13, x9, x10)

inst_267:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x24a969 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x24a969 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f24a969; op2val:0x3f24a969;
   valaddr_reg:x12; val_offset:492*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 492*FLEN/8, x13, x9, x10)

inst_268:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x24a969 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x24a969 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f24a969; op2val:0x3f24a969;
   valaddr_reg:x12; val_offset:494*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 494*FLEN/8, x13, x9, x10)

inst_269:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x24a969 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x24a969 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f24a969; op2val:0x3f24a969;
   valaddr_reg:x12; val_offset:496*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 496*FLEN/8, x13, x9, x10)

inst_270:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x6c4c81 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x6c4c81 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3eec4c81; op2val:0x3eec4c81;
   valaddr_reg:x12; val_offset:498*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 498*FLEN/8, x13, x9, x10)

inst_271:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x6c4c81 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x6c4c81 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3eec4c81; op2val:0x3eec4c81;
   valaddr_reg:x12; val_offset:500*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 500*FLEN/8, x13, x9, x10)

inst_272:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x6c4c81 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x6c4c81 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3eec4c81; op2val:0x3eec4c81;
   valaddr_reg:x12; val_offset:502*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 502*FLEN/8, x13, x9, x10)

inst_273:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x6c4c81 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x6c4c81 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3eec4c81; op2val:0x3eec4c81;
   valaddr_reg:x12; val_offset:504*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 504*FLEN/8, x13, x9, x10)

inst_274:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x6c4c81 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x6c4c81 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3eec4c81; op2val:0x3eec4c81;
   valaddr_reg:x12; val_offset:506*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 506*FLEN/8, x13, x9, x10)

inst_275:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x466ca1 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x466ca1 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ec66ca1; op2val:0x3ec66ca1;
   valaddr_reg:x12; val_offset:508*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 508*FLEN/8, x13, x9, x10)

inst_276:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x466ca1 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x466ca1 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ec66ca1; op2val:0x3ec66ca1;
   valaddr_reg:x12; val_offset:510*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 510*FLEN/8, x13, x9, x10)

inst_277:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x466ca1 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x466ca1 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ec66ca1; op2val:0x3ec66ca1;
   valaddr_reg:x12; val_offset:512*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 512*FLEN/8, x13, x9, x10)

inst_278:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x466ca1 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x466ca1 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ec66ca1; op2val:0x3ec66ca1;
   valaddr_reg:x12; val_offset:514*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 514*FLEN/8, x13, x9, x10)

inst_279:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x466ca1 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x466ca1 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ec66ca1; op2val:0x3ec66ca1;
   valaddr_reg:x12; val_offset:516*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 516*FLEN/8, x13, x9, x10)
RVTEST_SIGBASE(x9,signature_x9_2)

inst_280:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x78d6a1 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x78d6a1 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f78d6a1; op2val:0x3f78d6a1;
   valaddr_reg:x12; val_offset:518*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 518*FLEN/8, x13, x9, x10)

inst_281:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x78d6a1 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x78d6a1 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f78d6a1; op2val:0x3f78d6a1;
   valaddr_reg:x12; val_offset:520*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 520*FLEN/8, x13, x9, x10)

inst_282:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x78d6a1 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x78d6a1 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f78d6a1; op2val:0x3f78d6a1;
   valaddr_reg:x12; val_offset:522*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 522*FLEN/8, x13, x9, x10)

inst_283:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x78d6a1 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x78d6a1 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f78d6a1; op2val:0x3f78d6a1;
   valaddr_reg:x12; val_offset:524*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 524*FLEN/8, x13, x9, x10)

inst_284:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x78d6a1 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x78d6a1 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f78d6a1; op2val:0x3f78d6a1;
   valaddr_reg:x12; val_offset:526*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 526*FLEN/8, x13, x9, x10)

inst_285:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x52a248 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x52a248 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f52a248; op2val:0x3f52a248;
   valaddr_reg:x12; val_offset:528*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 528*FLEN/8, x13, x9, x10)

inst_286:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x52a248 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x52a248 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f52a248; op2val:0x3f52a248;
   valaddr_reg:x12; val_offset:530*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 530*FLEN/8, x13, x9, x10)

inst_287:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x52a248 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x52a248 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f52a248; op2val:0x3f52a248;
   valaddr_reg:x12; val_offset:532*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 532*FLEN/8, x13, x9, x10)

inst_288:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x52a248 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x52a248 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f52a248; op2val:0x3f52a248;
   valaddr_reg:x12; val_offset:534*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 534*FLEN/8, x13, x9, x10)

inst_289:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x52a248 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x52a248 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f52a248; op2val:0x3f52a248;
   valaddr_reg:x12; val_offset:536*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 536*FLEN/8, x13, x9, x10)

inst_290:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x0e53b1 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x0e53b1 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e0e53b1; op2val:0x3e0e53b1;
   valaddr_reg:x12; val_offset:538*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 538*FLEN/8, x13, x9, x10)

inst_291:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x0e53b1 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x0e53b1 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e0e53b1; op2val:0x3e0e53b1;
   valaddr_reg:x12; val_offset:540*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 540*FLEN/8, x13, x9, x10)

inst_292:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x0e53b1 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x0e53b1 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e0e53b1; op2val:0x3e0e53b1;
   valaddr_reg:x12; val_offset:542*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 542*FLEN/8, x13, x9, x10)

inst_293:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x0e53b1 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x0e53b1 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e0e53b1; op2val:0x3e0e53b1;
   valaddr_reg:x12; val_offset:544*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 544*FLEN/8, x13, x9, x10)

inst_294:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x0e53b1 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x0e53b1 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e0e53b1; op2val:0x3e0e53b1;
   valaddr_reg:x12; val_offset:546*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 546*FLEN/8, x13, x9, x10)

inst_295:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x4fc5a8 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x4fc5a8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e4fc5a8; op2val:0x3e4fc5a8;
   valaddr_reg:x12; val_offset:548*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 548*FLEN/8, x13, x9, x10)

inst_296:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x4fc5a8 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x4fc5a8 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e4fc5a8; op2val:0x3e4fc5a8;
   valaddr_reg:x12; val_offset:550*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 550*FLEN/8, x13, x9, x10)

inst_297:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x4fc5a8 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x4fc5a8 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e4fc5a8; op2val:0x3e4fc5a8;
   valaddr_reg:x12; val_offset:552*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 552*FLEN/8, x13, x9, x10)

inst_298:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x4fc5a8 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x4fc5a8 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e4fc5a8; op2val:0x3e4fc5a8;
   valaddr_reg:x12; val_offset:554*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 554*FLEN/8, x13, x9, x10)

inst_299:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x4fc5a8 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x4fc5a8 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e4fc5a8; op2val:0x3e4fc5a8;
   valaddr_reg:x12; val_offset:556*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 556*FLEN/8, x13, x9, x10)

inst_300:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x3ea50c and fs2 == 0 and fe2 == 0x7e and fm2 == 0x3ea50c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f3ea50c; op2val:0x3f3ea50c;
   valaddr_reg:x12; val_offset:558*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 558*FLEN/8, x13, x9, x10)

inst_301:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x3ea50c and fs2 == 0 and fe2 == 0x7e and fm2 == 0x3ea50c and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f3ea50c; op2val:0x3f3ea50c;
   valaddr_reg:x12; val_offset:560*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 560*FLEN/8, x13, x9, x10)

inst_302:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x3ea50c and fs2 == 0 and fe2 == 0x7e and fm2 == 0x3ea50c and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f3ea50c; op2val:0x3f3ea50c;
   valaddr_reg:x12; val_offset:562*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 562*FLEN/8, x13, x9, x10)

inst_303:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x3ea50c and fs2 == 0 and fe2 == 0x7e and fm2 == 0x3ea50c and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f3ea50c; op2val:0x3f3ea50c;
   valaddr_reg:x12; val_offset:564*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 564*FLEN/8, x13, x9, x10)

inst_304:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x3ea50c and fs2 == 0 and fe2 == 0x7e and fm2 == 0x3ea50c and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f3ea50c; op2val:0x3f3ea50c;
   valaddr_reg:x12; val_offset:566*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 566*FLEN/8, x13, x9, x10)

inst_305:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x275da9 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x275da9 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ea75da9; op2val:0x3ea75da9;
   valaddr_reg:x12; val_offset:568*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 568*FLEN/8, x13, x9, x10)

inst_306:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x275da9 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x275da9 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ea75da9; op2val:0x3ea75da9;
   valaddr_reg:x12; val_offset:570*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 570*FLEN/8, x13, x9, x10)

inst_307:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x275da9 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x275da9 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ea75da9; op2val:0x3ea75da9;
   valaddr_reg:x12; val_offset:572*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 572*FLEN/8, x13, x9, x10)

inst_308:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x275da9 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x275da9 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ea75da9; op2val:0x3ea75da9;
   valaddr_reg:x12; val_offset:574*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 574*FLEN/8, x13, x9, x10)

inst_309:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x275da9 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x275da9 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ea75da9; op2val:0x3ea75da9;
   valaddr_reg:x12; val_offset:576*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 576*FLEN/8, x13, x9, x10)

inst_310:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x7bba29 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x7bba29 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f7bba29; op2val:0x3f7bba29;
   valaddr_reg:x12; val_offset:578*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 578*FLEN/8, x13, x9, x10)

inst_311:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x7bba29 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x7bba29 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f7bba29; op2val:0x3f7bba29;
   valaddr_reg:x12; val_offset:580*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 580*FLEN/8, x13, x9, x10)

inst_312:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x7bba29 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x7bba29 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f7bba29; op2val:0x3f7bba29;
   valaddr_reg:x12; val_offset:582*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 582*FLEN/8, x13, x9, x10)

inst_313:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x7bba29 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x7bba29 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f7bba29; op2val:0x3f7bba29;
   valaddr_reg:x12; val_offset:584*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 584*FLEN/8, x13, x9, x10)

inst_314:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x7bba29 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x7bba29 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f7bba29; op2val:0x3f7bba29;
   valaddr_reg:x12; val_offset:586*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 586*FLEN/8, x13, x9, x10)

inst_315:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x7a4775 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x7a4775 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e7a4775; op2val:0x3e7a4775;
   valaddr_reg:x12; val_offset:588*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 588*FLEN/8, x13, x9, x10)

inst_316:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x7a4775 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x7a4775 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e7a4775; op2val:0x3e7a4775;
   valaddr_reg:x12; val_offset:590*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 590*FLEN/8, x13, x9, x10)

inst_317:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x7a4775 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x7a4775 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e7a4775; op2val:0x3e7a4775;
   valaddr_reg:x12; val_offset:592*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 592*FLEN/8, x13, x9, x10)

inst_318:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x7a4775 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x7a4775 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e7a4775; op2val:0x3e7a4775;
   valaddr_reg:x12; val_offset:594*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 594*FLEN/8, x13, x9, x10)

inst_319:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x7a4775 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x7a4775 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e7a4775; op2val:0x3e7a4775;
   valaddr_reg:x12; val_offset:596*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 596*FLEN/8, x13, x9, x10)

inst_320:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x63f88d and fs2 == 0 and fe2 == 0x7e and fm2 == 0x63f88d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f63f88d; op2val:0x3f63f88d;
   valaddr_reg:x12; val_offset:598*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 598*FLEN/8, x13, x9, x10)

inst_321:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x63f88d and fs2 == 0 and fe2 == 0x7e and fm2 == 0x63f88d and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f63f88d; op2val:0x3f63f88d;
   valaddr_reg:x12; val_offset:600*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 600*FLEN/8, x13, x9, x10)

inst_322:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x63f88d and fs2 == 0 and fe2 == 0x7e and fm2 == 0x63f88d and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f63f88d; op2val:0x3f63f88d;
   valaddr_reg:x12; val_offset:602*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 602*FLEN/8, x13, x9, x10)

inst_323:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x63f88d and fs2 == 0 and fe2 == 0x7e and fm2 == 0x63f88d and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f63f88d; op2val:0x3f63f88d;
   valaddr_reg:x12; val_offset:604*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 604*FLEN/8, x13, x9, x10)

inst_324:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x63f88d and fs2 == 0 and fe2 == 0x7e and fm2 == 0x63f88d and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f63f88d; op2val:0x3f63f88d;
   valaddr_reg:x12; val_offset:606*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 606*FLEN/8, x13, x9, x10)

inst_325:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x27d3e7 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x27d3e7 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f27d3e7; op2val:0x3f27d3e7;
   valaddr_reg:x12; val_offset:608*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 608*FLEN/8, x13, x9, x10)

inst_326:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x27d3e7 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x27d3e7 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f27d3e7; op2val:0x3f27d3e7;
   valaddr_reg:x12; val_offset:610*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 610*FLEN/8, x13, x9, x10)

inst_327:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x27d3e7 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x27d3e7 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f27d3e7; op2val:0x3f27d3e7;
   valaddr_reg:x12; val_offset:612*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 612*FLEN/8, x13, x9, x10)

inst_328:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x27d3e7 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x27d3e7 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f27d3e7; op2val:0x3f27d3e7;
   valaddr_reg:x12; val_offset:614*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 614*FLEN/8, x13, x9, x10)

inst_329:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x27d3e7 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x27d3e7 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f27d3e7; op2val:0x3f27d3e7;
   valaddr_reg:x12; val_offset:616*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 616*FLEN/8, x13, x9, x10)

inst_330:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x5722c8 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x5722c8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f5722c8; op2val:0x3f5722c8;
   valaddr_reg:x12; val_offset:618*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 618*FLEN/8, x13, x9, x10)

inst_331:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x5722c8 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x5722c8 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f5722c8; op2val:0x3f5722c8;
   valaddr_reg:x12; val_offset:620*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 620*FLEN/8, x13, x9, x10)

inst_332:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x5722c8 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x5722c8 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f5722c8; op2val:0x3f5722c8;
   valaddr_reg:x12; val_offset:622*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 622*FLEN/8, x13, x9, x10)

inst_333:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x5722c8 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x5722c8 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f5722c8; op2val:0x3f5722c8;
   valaddr_reg:x12; val_offset:624*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 624*FLEN/8, x13, x9, x10)

inst_334:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x5722c8 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x5722c8 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f5722c8; op2val:0x3f5722c8;
   valaddr_reg:x12; val_offset:626*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 626*FLEN/8, x13, x9, x10)

inst_335:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x54f473 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x54f473 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f54f473; op2val:0x3f54f473;
   valaddr_reg:x12; val_offset:628*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 628*FLEN/8, x13, x9, x10)

inst_336:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x54f473 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x54f473 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f54f473; op2val:0x3f54f473;
   valaddr_reg:x12; val_offset:630*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 630*FLEN/8, x13, x9, x10)

inst_337:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x54f473 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x54f473 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f54f473; op2val:0x3f54f473;
   valaddr_reg:x12; val_offset:632*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 632*FLEN/8, x13, x9, x10)

inst_338:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x54f473 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x54f473 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f54f473; op2val:0x3f54f473;
   valaddr_reg:x12; val_offset:634*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 634*FLEN/8, x13, x9, x10)

inst_339:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x54f473 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x54f473 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f54f473; op2val:0x3f54f473;
   valaddr_reg:x12; val_offset:636*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 636*FLEN/8, x13, x9, x10)

inst_340:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x13aa7c and fs2 == 0 and fe2 == 0x7d and fm2 == 0x13aa7c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e93aa7c; op2val:0x3e93aa7c;
   valaddr_reg:x12; val_offset:638*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 638*FLEN/8, x13, x9, x10)

inst_341:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x13aa7c and fs2 == 0 and fe2 == 0x7d and fm2 == 0x13aa7c and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e93aa7c; op2val:0x3e93aa7c;
   valaddr_reg:x12; val_offset:640*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 640*FLEN/8, x13, x9, x10)

inst_342:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x13aa7c and fs2 == 0 and fe2 == 0x7d and fm2 == 0x13aa7c and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e93aa7c; op2val:0x3e93aa7c;
   valaddr_reg:x12; val_offset:642*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 642*FLEN/8, x13, x9, x10)

inst_343:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x13aa7c and fs2 == 0 and fe2 == 0x7d and fm2 == 0x13aa7c and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e93aa7c; op2val:0x3e93aa7c;
   valaddr_reg:x12; val_offset:644*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 644*FLEN/8, x13, x9, x10)

inst_344:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x13aa7c and fs2 == 0 and fe2 == 0x7d and fm2 == 0x13aa7c and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e93aa7c; op2val:0x3e93aa7c;
   valaddr_reg:x12; val_offset:646*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 646*FLEN/8, x13, x9, x10)

inst_345:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x2d914a and fs2 == 0 and fe2 == 0x7e and fm2 == 0x2d914a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f2d914a; op2val:0x3f2d914a;
   valaddr_reg:x12; val_offset:648*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 648*FLEN/8, x13, x9, x10)

inst_346:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x2d914a and fs2 == 0 and fe2 == 0x7e and fm2 == 0x2d914a and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f2d914a; op2val:0x3f2d914a;
   valaddr_reg:x12; val_offset:650*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 650*FLEN/8, x13, x9, x10)

inst_347:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x2d914a and fs2 == 0 and fe2 == 0x7e and fm2 == 0x2d914a and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f2d914a; op2val:0x3f2d914a;
   valaddr_reg:x12; val_offset:652*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 652*FLEN/8, x13, x9, x10)

inst_348:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x2d914a and fs2 == 0 and fe2 == 0x7e and fm2 == 0x2d914a and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f2d914a; op2val:0x3f2d914a;
   valaddr_reg:x12; val_offset:654*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 654*FLEN/8, x13, x9, x10)

inst_349:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x2d914a and fs2 == 0 and fe2 == 0x7e and fm2 == 0x2d914a and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f2d914a; op2val:0x3f2d914a;
   valaddr_reg:x12; val_offset:656*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 656*FLEN/8, x13, x9, x10)

inst_350:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x79f315 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x79f315 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f79f315; op2val:0x3f79f315;
   valaddr_reg:x12; val_offset:658*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 658*FLEN/8, x13, x9, x10)

inst_351:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x79f315 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x79f315 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f79f315; op2val:0x3f79f315;
   valaddr_reg:x12; val_offset:660*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 660*FLEN/8, x13, x9, x10)

inst_352:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x79f315 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x79f315 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f79f315; op2val:0x3f79f315;
   valaddr_reg:x12; val_offset:662*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 662*FLEN/8, x13, x9, x10)

inst_353:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x79f315 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x79f315 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f79f315; op2val:0x3f79f315;
   valaddr_reg:x12; val_offset:664*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 664*FLEN/8, x13, x9, x10)

inst_354:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x79f315 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x79f315 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f79f315; op2val:0x3f79f315;
   valaddr_reg:x12; val_offset:666*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 666*FLEN/8, x13, x9, x10)

inst_355:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x143eac and fs2 == 0 and fe2 == 0x7e and fm2 == 0x143eac and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f143eac; op2val:0x3f143eac;
   valaddr_reg:x12; val_offset:668*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 668*FLEN/8, x13, x9, x10)

inst_356:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x143eac and fs2 == 0 and fe2 == 0x7e and fm2 == 0x143eac and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f143eac; op2val:0x3f143eac;
   valaddr_reg:x12; val_offset:670*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 670*FLEN/8, x13, x9, x10)

inst_357:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x143eac and fs2 == 0 and fe2 == 0x7e and fm2 == 0x143eac and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f143eac; op2val:0x3f143eac;
   valaddr_reg:x12; val_offset:672*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 672*FLEN/8, x13, x9, x10)

inst_358:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x143eac and fs2 == 0 and fe2 == 0x7e and fm2 == 0x143eac and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f143eac; op2val:0x3f143eac;
   valaddr_reg:x12; val_offset:674*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 674*FLEN/8, x13, x9, x10)

inst_359:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x143eac and fs2 == 0 and fe2 == 0x7e and fm2 == 0x143eac and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f143eac; op2val:0x3f143eac;
   valaddr_reg:x12; val_offset:676*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 676*FLEN/8, x13, x9, x10)

inst_360:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x642831 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x642831 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f642831; op2val:0x3f642831;
   valaddr_reg:x12; val_offset:678*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 678*FLEN/8, x13, x9, x10)

inst_361:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x642831 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x642831 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f642831; op2val:0x3f642831;
   valaddr_reg:x12; val_offset:680*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 680*FLEN/8, x13, x9, x10)

inst_362:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x642831 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x642831 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f642831; op2val:0x3f642831;
   valaddr_reg:x12; val_offset:682*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 682*FLEN/8, x13, x9, x10)

inst_363:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x642831 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x642831 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f642831; op2val:0x3f642831;
   valaddr_reg:x12; val_offset:684*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 684*FLEN/8, x13, x9, x10)

inst_364:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x642831 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x642831 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f642831; op2val:0x3f642831;
   valaddr_reg:x12; val_offset:686*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 686*FLEN/8, x13, x9, x10)

inst_365:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x7ad214 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x7ad214 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3efad214; op2val:0x3efad214;
   valaddr_reg:x12; val_offset:688*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 688*FLEN/8, x13, x9, x10)

inst_366:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x7ad214 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x7ad214 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3efad214; op2val:0x3efad214;
   valaddr_reg:x12; val_offset:690*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 690*FLEN/8, x13, x9, x10)

inst_367:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x7ad214 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x7ad214 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3efad214; op2val:0x3efad214;
   valaddr_reg:x12; val_offset:692*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 692*FLEN/8, x13, x9, x10)

inst_368:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x7ad214 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x7ad214 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3efad214; op2val:0x3efad214;
   valaddr_reg:x12; val_offset:694*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 694*FLEN/8, x13, x9, x10)

inst_369:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x7ad214 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x7ad214 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3efad214; op2val:0x3efad214;
   valaddr_reg:x12; val_offset:696*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 696*FLEN/8, x13, x9, x10)

inst_370:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x49e86b and fs2 == 0 and fe2 == 0x7d and fm2 == 0x49e86b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ec9e86b; op2val:0x3ec9e86b;
   valaddr_reg:x12; val_offset:698*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 698*FLEN/8, x13, x9, x10)

inst_371:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x49e86b and fs2 == 0 and fe2 == 0x7d and fm2 == 0x49e86b and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ec9e86b; op2val:0x3ec9e86b;
   valaddr_reg:x12; val_offset:700*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 700*FLEN/8, x13, x9, x10)

inst_372:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x49e86b and fs2 == 0 and fe2 == 0x7d and fm2 == 0x49e86b and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ec9e86b; op2val:0x3ec9e86b;
   valaddr_reg:x12; val_offset:702*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 702*FLEN/8, x13, x9, x10)

inst_373:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x49e86b and fs2 == 0 and fe2 == 0x7d and fm2 == 0x49e86b and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ec9e86b; op2val:0x3ec9e86b;
   valaddr_reg:x12; val_offset:704*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 704*FLEN/8, x13, x9, x10)

inst_374:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x49e86b and fs2 == 0 and fe2 == 0x7d and fm2 == 0x49e86b and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ec9e86b; op2val:0x3ec9e86b;
   valaddr_reg:x12; val_offset:706*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 706*FLEN/8, x13, x9, x10)

inst_375:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x7aabaa and fs2 == 0 and fe2 == 0x7e and fm2 == 0x7aabaa and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f7aabaa; op2val:0x3f7aabaa;
   valaddr_reg:x12; val_offset:708*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 708*FLEN/8, x13, x9, x10)

inst_376:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x7aabaa and fs2 == 0 and fe2 == 0x7e and fm2 == 0x7aabaa and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f7aabaa; op2val:0x3f7aabaa;
   valaddr_reg:x12; val_offset:710*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 710*FLEN/8, x13, x9, x10)

inst_377:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x7aabaa and fs2 == 0 and fe2 == 0x7e and fm2 == 0x7aabaa and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f7aabaa; op2val:0x3f7aabaa;
   valaddr_reg:x12; val_offset:712*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 712*FLEN/8, x13, x9, x10)

inst_378:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x7aabaa and fs2 == 0 and fe2 == 0x7e and fm2 == 0x7aabaa and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f7aabaa; op2val:0x3f7aabaa;
   valaddr_reg:x12; val_offset:714*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 714*FLEN/8, x13, x9, x10)

inst_379:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x7aabaa and fs2 == 0 and fe2 == 0x7e and fm2 == 0x7aabaa and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f7aabaa; op2val:0x3f7aabaa;
   valaddr_reg:x12; val_offset:716*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 716*FLEN/8, x13, x9, x10)

inst_380:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x5a817b and fs2 == 0 and fe2 == 0x7e and fm2 == 0x5a817b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f5a817b; op2val:0x3f5a817b;
   valaddr_reg:x12; val_offset:718*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 718*FLEN/8, x13, x9, x10)

inst_381:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x5a817b and fs2 == 0 and fe2 == 0x7e and fm2 == 0x5a817b and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f5a817b; op2val:0x3f5a817b;
   valaddr_reg:x12; val_offset:720*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 720*FLEN/8, x13, x9, x10)

inst_382:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x5a817b and fs2 == 0 and fe2 == 0x7e and fm2 == 0x5a817b and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f5a817b; op2val:0x3f5a817b;
   valaddr_reg:x12; val_offset:722*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 722*FLEN/8, x13, x9, x10)

inst_383:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x5a817b and fs2 == 0 and fe2 == 0x7e and fm2 == 0x5a817b and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f5a817b; op2val:0x3f5a817b;
   valaddr_reg:x12; val_offset:724*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 724*FLEN/8, x13, x9, x10)

inst_384:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x5a817b and fs2 == 0 and fe2 == 0x7e and fm2 == 0x5a817b and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f5a817b; op2val:0x3f5a817b;
   valaddr_reg:x12; val_offset:726*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 726*FLEN/8, x13, x9, x10)

inst_385:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x56fb53 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x56fb53 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f56fb53; op2val:0x3f56fb53;
   valaddr_reg:x12; val_offset:728*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 728*FLEN/8, x13, x9, x10)

inst_386:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x56fb53 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x56fb53 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f56fb53; op2val:0x3f56fb53;
   valaddr_reg:x12; val_offset:730*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 730*FLEN/8, x13, x9, x10)

inst_387:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x56fb53 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x56fb53 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f56fb53; op2val:0x3f56fb53;
   valaddr_reg:x12; val_offset:732*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 732*FLEN/8, x13, x9, x10)

inst_388:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x56fb53 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x56fb53 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f56fb53; op2val:0x3f56fb53;
   valaddr_reg:x12; val_offset:734*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 734*FLEN/8, x13, x9, x10)

inst_389:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x56fb53 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x56fb53 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f56fb53; op2val:0x3f56fb53;
   valaddr_reg:x12; val_offset:736*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 736*FLEN/8, x13, x9, x10)

inst_390:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x24c624 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x24c624 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ea4c624; op2val:0x3ea4c624;
   valaddr_reg:x12; val_offset:738*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 738*FLEN/8, x13, x9, x10)

inst_391:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x24c624 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x24c624 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ea4c624; op2val:0x3ea4c624;
   valaddr_reg:x12; val_offset:740*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 740*FLEN/8, x13, x9, x10)

inst_392:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x24c624 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x24c624 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ea4c624; op2val:0x3ea4c624;
   valaddr_reg:x12; val_offset:742*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 742*FLEN/8, x13, x9, x10)

inst_393:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x24c624 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x24c624 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ea4c624; op2val:0x3ea4c624;
   valaddr_reg:x12; val_offset:744*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 744*FLEN/8, x13, x9, x10)

inst_394:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x24c624 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x24c624 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ea4c624; op2val:0x3ea4c624;
   valaddr_reg:x12; val_offset:746*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 746*FLEN/8, x13, x9, x10)

inst_395:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x4786c6 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x4786c6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f4786c6; op2val:0x3f4786c6;
   valaddr_reg:x12; val_offset:748*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 748*FLEN/8, x13, x9, x10)

inst_396:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x4786c6 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x4786c6 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f4786c6; op2val:0x3f4786c6;
   valaddr_reg:x12; val_offset:750*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 750*FLEN/8, x13, x9, x10)

inst_397:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x4786c6 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x4786c6 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f4786c6; op2val:0x3f4786c6;
   valaddr_reg:x12; val_offset:752*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 752*FLEN/8, x13, x9, x10)

inst_398:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x4786c6 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x4786c6 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f4786c6; op2val:0x3f4786c6;
   valaddr_reg:x12; val_offset:754*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 754*FLEN/8, x13, x9, x10)

inst_399:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x4786c6 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x4786c6 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f4786c6; op2val:0x3f4786c6;
   valaddr_reg:x12; val_offset:756*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 756*FLEN/8, x13, x9, x10)

inst_400:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x4f0aab and fs2 == 0 and fe2 == 0x7c and fm2 == 0x4f0aab and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e4f0aab; op2val:0x3e4f0aab;
   valaddr_reg:x12; val_offset:758*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 758*FLEN/8, x13, x9, x10)

inst_401:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x4f0aab and fs2 == 0 and fe2 == 0x7c and fm2 == 0x4f0aab and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e4f0aab; op2val:0x3e4f0aab;
   valaddr_reg:x12; val_offset:760*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 760*FLEN/8, x13, x9, x10)

inst_402:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x4f0aab and fs2 == 0 and fe2 == 0x7c and fm2 == 0x4f0aab and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e4f0aab; op2val:0x3e4f0aab;
   valaddr_reg:x12; val_offset:762*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 762*FLEN/8, x13, x9, x10)

inst_403:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x4f0aab and fs2 == 0 and fe2 == 0x7c and fm2 == 0x4f0aab and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e4f0aab; op2val:0x3e4f0aab;
   valaddr_reg:x12; val_offset:764*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 764*FLEN/8, x13, x9, x10)

inst_404:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x4f0aab and fs2 == 0 and fe2 == 0x7c and fm2 == 0x4f0aab and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e4f0aab; op2val:0x3e4f0aab;
   valaddr_reg:x12; val_offset:766*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 766*FLEN/8, x13, x9, x10)

inst_405:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x46dca4 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x46dca4 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f46dca4; op2val:0x3f46dca4;
   valaddr_reg:x12; val_offset:768*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 768*FLEN/8, x13, x9, x10)

inst_406:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x46dca4 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x46dca4 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f46dca4; op2val:0x3f46dca4;
   valaddr_reg:x12; val_offset:770*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 770*FLEN/8, x13, x9, x10)

inst_407:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x46dca4 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x46dca4 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f46dca4; op2val:0x3f46dca4;
   valaddr_reg:x12; val_offset:772*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 772*FLEN/8, x13, x9, x10)
RVTEST_SIGBASE(x9,signature_x9_3)

inst_408:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x46dca4 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x46dca4 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f46dca4; op2val:0x3f46dca4;
   valaddr_reg:x12; val_offset:774*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 774*FLEN/8, x13, x9, x10)

inst_409:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x46dca4 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x46dca4 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f46dca4; op2val:0x3f46dca4;
   valaddr_reg:x12; val_offset:776*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 776*FLEN/8, x13, x9, x10)

inst_410:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x1ae7f6 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x1ae7f6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f1ae7f6; op2val:0x3f1ae7f6;
   valaddr_reg:x12; val_offset:778*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 778*FLEN/8, x13, x9, x10)

inst_411:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x1ae7f6 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x1ae7f6 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f1ae7f6; op2val:0x3f1ae7f6;
   valaddr_reg:x12; val_offset:780*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 780*FLEN/8, x13, x9, x10)

inst_412:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x1ae7f6 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x1ae7f6 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f1ae7f6; op2val:0x3f1ae7f6;
   valaddr_reg:x12; val_offset:782*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 782*FLEN/8, x13, x9, x10)

inst_413:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x1ae7f6 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x1ae7f6 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f1ae7f6; op2val:0x3f1ae7f6;
   valaddr_reg:x12; val_offset:784*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 784*FLEN/8, x13, x9, x10)

inst_414:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x1ae7f6 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x1ae7f6 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f1ae7f6; op2val:0x3f1ae7f6;
   valaddr_reg:x12; val_offset:786*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 786*FLEN/8, x13, x9, x10)

inst_415:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x2dc2d5 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x2dc2d5 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f2dc2d5; op2val:0x3f2dc2d5;
   valaddr_reg:x12; val_offset:788*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 788*FLEN/8, x13, x9, x10)

inst_416:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x2dc2d5 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x2dc2d5 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f2dc2d5; op2val:0x3f2dc2d5;
   valaddr_reg:x12; val_offset:790*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 790*FLEN/8, x13, x9, x10)

inst_417:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x2dc2d5 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x2dc2d5 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f2dc2d5; op2val:0x3f2dc2d5;
   valaddr_reg:x12; val_offset:792*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 792*FLEN/8, x13, x9, x10)

inst_418:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x2dc2d5 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x2dc2d5 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f2dc2d5; op2val:0x3f2dc2d5;
   valaddr_reg:x12; val_offset:794*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 794*FLEN/8, x13, x9, x10)

inst_419:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x2dc2d5 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x2dc2d5 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f2dc2d5; op2val:0x3f2dc2d5;
   valaddr_reg:x12; val_offset:796*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 796*FLEN/8, x13, x9, x10)

inst_420:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x70f375 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x70f375 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f70f375; op2val:0x3f70f375;
   valaddr_reg:x12; val_offset:798*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 798*FLEN/8, x13, x9, x10)

inst_421:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x70f375 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x70f375 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f70f375; op2val:0x3f70f375;
   valaddr_reg:x12; val_offset:800*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 800*FLEN/8, x13, x9, x10)

inst_422:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x70f375 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x70f375 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f70f375; op2val:0x3f70f375;
   valaddr_reg:x12; val_offset:802*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 802*FLEN/8, x13, x9, x10)

inst_423:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x70f375 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x70f375 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f70f375; op2val:0x3f70f375;
   valaddr_reg:x12; val_offset:804*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 804*FLEN/8, x13, x9, x10)

inst_424:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x70f375 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x70f375 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f70f375; op2val:0x3f70f375;
   valaddr_reg:x12; val_offset:806*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 806*FLEN/8, x13, x9, x10)

inst_425:
// fs1 == 0 and fe1 == 0x7a and fm1 == 0x0377d1 and fs2 == 0 and fe2 == 0x7a and fm2 == 0x0377d1 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3d0377d1; op2val:0x3d0377d1;
   valaddr_reg:x12; val_offset:808*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 808*FLEN/8, x13, x9, x10)

inst_426:
// fs1 == 0 and fe1 == 0x7a and fm1 == 0x0377d1 and fs2 == 0 and fe2 == 0x7a and fm2 == 0x0377d1 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3d0377d1; op2val:0x3d0377d1;
   valaddr_reg:x12; val_offset:810*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 810*FLEN/8, x13, x9, x10)

inst_427:
// fs1 == 0 and fe1 == 0x7a and fm1 == 0x0377d1 and fs2 == 0 and fe2 == 0x7a and fm2 == 0x0377d1 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3d0377d1; op2val:0x3d0377d1;
   valaddr_reg:x12; val_offset:812*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 812*FLEN/8, x13, x9, x10)

inst_428:
// fs1 == 0 and fe1 == 0x7a and fm1 == 0x0377d1 and fs2 == 0 and fe2 == 0x7a and fm2 == 0x0377d1 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3d0377d1; op2val:0x3d0377d1;
   valaddr_reg:x12; val_offset:814*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 814*FLEN/8, x13, x9, x10)

inst_429:
// fs1 == 0 and fe1 == 0x7a and fm1 == 0x0377d1 and fs2 == 0 and fe2 == 0x7a and fm2 == 0x0377d1 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3d0377d1; op2val:0x3d0377d1;
   valaddr_reg:x12; val_offset:816*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 816*FLEN/8, x13, x9, x10)

inst_430:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x3190a5 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x3190a5 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f3190a5; op2val:0x3f3190a5;
   valaddr_reg:x12; val_offset:818*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 818*FLEN/8, x13, x9, x10)

inst_431:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x3190a5 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x3190a5 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f3190a5; op2val:0x3f3190a5;
   valaddr_reg:x12; val_offset:820*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 820*FLEN/8, x13, x9, x10)

inst_432:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x3190a5 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x3190a5 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f3190a5; op2val:0x3f3190a5;
   valaddr_reg:x12; val_offset:822*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 822*FLEN/8, x13, x9, x10)

inst_433:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x3190a5 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x3190a5 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f3190a5; op2val:0x3f3190a5;
   valaddr_reg:x12; val_offset:824*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 824*FLEN/8, x13, x9, x10)

inst_434:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x3190a5 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x3190a5 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f3190a5; op2val:0x3f3190a5;
   valaddr_reg:x12; val_offset:826*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 826*FLEN/8, x13, x9, x10)

inst_435:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x308c02 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x308c02 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f308c02; op2val:0x3f308c02;
   valaddr_reg:x12; val_offset:828*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 828*FLEN/8, x13, x9, x10)

inst_436:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x308c02 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x308c02 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f308c02; op2val:0x3f308c02;
   valaddr_reg:x12; val_offset:830*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 830*FLEN/8, x13, x9, x10)

inst_437:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x308c02 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x308c02 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f308c02; op2val:0x3f308c02;
   valaddr_reg:x12; val_offset:832*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 832*FLEN/8, x13, x9, x10)

inst_438:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x308c02 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x308c02 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f308c02; op2val:0x3f308c02;
   valaddr_reg:x12; val_offset:834*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 834*FLEN/8, x13, x9, x10)

inst_439:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x308c02 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x308c02 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f308c02; op2val:0x3f308c02;
   valaddr_reg:x12; val_offset:836*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 836*FLEN/8, x13, x9, x10)

inst_440:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x032720 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x032720 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e832720; op2val:0x3e832720;
   valaddr_reg:x12; val_offset:838*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 838*FLEN/8, x13, x9, x10)

inst_441:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x032720 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x032720 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e832720; op2val:0x3e832720;
   valaddr_reg:x12; val_offset:840*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 840*FLEN/8, x13, x9, x10)

inst_442:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x032720 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x032720 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e832720; op2val:0x3e832720;
   valaddr_reg:x12; val_offset:842*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 842*FLEN/8, x13, x9, x10)

inst_443:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x032720 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x032720 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e832720; op2val:0x3e832720;
   valaddr_reg:x12; val_offset:844*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 844*FLEN/8, x13, x9, x10)

inst_444:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x032720 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x032720 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e832720; op2val:0x3e832720;
   valaddr_reg:x12; val_offset:846*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 846*FLEN/8, x13, x9, x10)

inst_445:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x3f6575 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x3f6575 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f3f6575; op2val:0x3f3f6575;
   valaddr_reg:x12; val_offset:848*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 848*FLEN/8, x13, x9, x10)

inst_446:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x3f6575 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x3f6575 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f3f6575; op2val:0x3f3f6575;
   valaddr_reg:x12; val_offset:850*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 850*FLEN/8, x13, x9, x10)

inst_447:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x3f6575 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x3f6575 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f3f6575; op2val:0x3f3f6575;
   valaddr_reg:x12; val_offset:852*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 852*FLEN/8, x13, x9, x10)

inst_448:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x3f6575 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x3f6575 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f3f6575; op2val:0x3f3f6575;
   valaddr_reg:x12; val_offset:854*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 854*FLEN/8, x13, x9, x10)

inst_449:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x3f6575 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x3f6575 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f3f6575; op2val:0x3f3f6575;
   valaddr_reg:x12; val_offset:856*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 856*FLEN/8, x13, x9, x10)

inst_450:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x7862c0 and fs2 == 0 and fe2 == 0x7b and fm2 == 0x7862c0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3df862c0; op2val:0x3df862c0;
   valaddr_reg:x12; val_offset:858*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 858*FLEN/8, x13, x9, x10)

inst_451:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x7862c0 and fs2 == 0 and fe2 == 0x7b and fm2 == 0x7862c0 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3df862c0; op2val:0x3df862c0;
   valaddr_reg:x12; val_offset:860*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 860*FLEN/8, x13, x9, x10)

inst_452:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x7862c0 and fs2 == 0 and fe2 == 0x7b and fm2 == 0x7862c0 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3df862c0; op2val:0x3df862c0;
   valaddr_reg:x12; val_offset:862*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 862*FLEN/8, x13, x9, x10)

inst_453:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x7862c0 and fs2 == 0 and fe2 == 0x7b and fm2 == 0x7862c0 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3df862c0; op2val:0x3df862c0;
   valaddr_reg:x12; val_offset:864*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 864*FLEN/8, x13, x9, x10)

inst_454:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x7862c0 and fs2 == 0 and fe2 == 0x7b and fm2 == 0x7862c0 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3df862c0; op2val:0x3df862c0;
   valaddr_reg:x12; val_offset:866*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 866*FLEN/8, x13, x9, x10)

inst_455:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x38eb81 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x38eb81 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e38eb81; op2val:0x3e38eb81;
   valaddr_reg:x12; val_offset:868*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 868*FLEN/8, x13, x9, x10)

inst_456:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x38eb81 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x38eb81 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e38eb81; op2val:0x3e38eb81;
   valaddr_reg:x12; val_offset:870*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 870*FLEN/8, x13, x9, x10)

inst_457:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x38eb81 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x38eb81 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e38eb81; op2val:0x3e38eb81;
   valaddr_reg:x12; val_offset:872*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 872*FLEN/8, x13, x9, x10)

inst_458:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x38eb81 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x38eb81 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e38eb81; op2val:0x3e38eb81;
   valaddr_reg:x12; val_offset:874*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 874*FLEN/8, x13, x9, x10)

inst_459:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x38eb81 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x38eb81 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e38eb81; op2val:0x3e38eb81;
   valaddr_reg:x12; val_offset:876*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 876*FLEN/8, x13, x9, x10)

inst_460:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x5c042f and fs2 == 0 and fe2 == 0x7d and fm2 == 0x5c042f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3edc042f; op2val:0x3edc042f;
   valaddr_reg:x12; val_offset:878*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 878*FLEN/8, x13, x9, x10)

inst_461:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x5c042f and fs2 == 0 and fe2 == 0x7d and fm2 == 0x5c042f and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3edc042f; op2val:0x3edc042f;
   valaddr_reg:x12; val_offset:880*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 880*FLEN/8, x13, x9, x10)

inst_462:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x5c042f and fs2 == 0 and fe2 == 0x7d and fm2 == 0x5c042f and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3edc042f; op2val:0x3edc042f;
   valaddr_reg:x12; val_offset:882*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 882*FLEN/8, x13, x9, x10)

inst_463:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x5c042f and fs2 == 0 and fe2 == 0x7d and fm2 == 0x5c042f and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3edc042f; op2val:0x3edc042f;
   valaddr_reg:x12; val_offset:884*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 884*FLEN/8, x13, x9, x10)

inst_464:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x5c042f and fs2 == 0 and fe2 == 0x7d and fm2 == 0x5c042f and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3edc042f; op2val:0x3edc042f;
   valaddr_reg:x12; val_offset:886*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 886*FLEN/8, x13, x9, x10)

inst_465:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x076466 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x076466 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e076466; op2val:0x3e076466;
   valaddr_reg:x12; val_offset:888*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 888*FLEN/8, x13, x9, x10)

inst_466:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x076466 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x076466 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e076466; op2val:0x3e076466;
   valaddr_reg:x12; val_offset:890*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 890*FLEN/8, x13, x9, x10)

inst_467:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x076466 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x076466 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e076466; op2val:0x3e076466;
   valaddr_reg:x12; val_offset:892*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 892*FLEN/8, x13, x9, x10)

inst_468:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x076466 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x076466 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e076466; op2val:0x3e076466;
   valaddr_reg:x12; val_offset:894*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 894*FLEN/8, x13, x9, x10)

inst_469:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x076466 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x076466 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e076466; op2val:0x3e076466;
   valaddr_reg:x12; val_offset:896*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 896*FLEN/8, x13, x9, x10)

inst_470:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x178a47 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x178a47 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e978a47; op2val:0x3e978a47;
   valaddr_reg:x12; val_offset:898*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 898*FLEN/8, x13, x9, x10)

inst_471:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x178a47 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x178a47 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e978a47; op2val:0x3e978a47;
   valaddr_reg:x12; val_offset:900*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 900*FLEN/8, x13, x9, x10)

inst_472:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x178a47 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x178a47 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e978a47; op2val:0x3e978a47;
   valaddr_reg:x12; val_offset:902*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 902*FLEN/8, x13, x9, x10)

inst_473:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x178a47 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x178a47 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e978a47; op2val:0x3e978a47;
   valaddr_reg:x12; val_offset:904*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 904*FLEN/8, x13, x9, x10)

inst_474:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x178a47 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x178a47 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e978a47; op2val:0x3e978a47;
   valaddr_reg:x12; val_offset:906*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 906*FLEN/8, x13, x9, x10)

inst_475:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x1f3d6f and fs2 == 0 and fe2 == 0x7e and fm2 == 0x1f3d6f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f1f3d6f; op2val:0x3f1f3d6f;
   valaddr_reg:x12; val_offset:908*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 908*FLEN/8, x13, x9, x10)

inst_476:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x1f3d6f and fs2 == 0 and fe2 == 0x7e and fm2 == 0x1f3d6f and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f1f3d6f; op2val:0x3f1f3d6f;
   valaddr_reg:x12; val_offset:910*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 910*FLEN/8, x13, x9, x10)

inst_477:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x1f3d6f and fs2 == 0 and fe2 == 0x7e and fm2 == 0x1f3d6f and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f1f3d6f; op2val:0x3f1f3d6f;
   valaddr_reg:x12; val_offset:912*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 912*FLEN/8, x13, x9, x10)

inst_478:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x1f3d6f and fs2 == 0 and fe2 == 0x7e and fm2 == 0x1f3d6f and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f1f3d6f; op2val:0x3f1f3d6f;
   valaddr_reg:x12; val_offset:914*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 914*FLEN/8, x13, x9, x10)

inst_479:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x1f3d6f and fs2 == 0 and fe2 == 0x7e and fm2 == 0x1f3d6f and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f1f3d6f; op2val:0x3f1f3d6f;
   valaddr_reg:x12; val_offset:916*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 916*FLEN/8, x13, x9, x10)

inst_480:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x4b5332 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x4b5332 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f4b5332; op2val:0x3f4b5332;
   valaddr_reg:x12; val_offset:918*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 918*FLEN/8, x13, x9, x10)

inst_481:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x4b5332 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x4b5332 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f4b5332; op2val:0x3f4b5332;
   valaddr_reg:x12; val_offset:920*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 920*FLEN/8, x13, x9, x10)

inst_482:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x4b5332 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x4b5332 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f4b5332; op2val:0x3f4b5332;
   valaddr_reg:x12; val_offset:922*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 922*FLEN/8, x13, x9, x10)

inst_483:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x4b5332 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x4b5332 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f4b5332; op2val:0x3f4b5332;
   valaddr_reg:x12; val_offset:924*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 924*FLEN/8, x13, x9, x10)

inst_484:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x4b5332 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x4b5332 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f4b5332; op2val:0x3f4b5332;
   valaddr_reg:x12; val_offset:926*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 926*FLEN/8, x13, x9, x10)

inst_485:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x112a2e and fs2 == 0 and fe2 == 0x7e and fm2 == 0x112a2e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f112a2e; op2val:0x3f112a2e;
   valaddr_reg:x12; val_offset:928*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 928*FLEN/8, x13, x9, x10)

inst_486:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x112a2e and fs2 == 0 and fe2 == 0x7e and fm2 == 0x112a2e and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f112a2e; op2val:0x3f112a2e;
   valaddr_reg:x12; val_offset:930*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 930*FLEN/8, x13, x9, x10)

inst_487:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x112a2e and fs2 == 0 and fe2 == 0x7e and fm2 == 0x112a2e and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f112a2e; op2val:0x3f112a2e;
   valaddr_reg:x12; val_offset:932*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 932*FLEN/8, x13, x9, x10)

inst_488:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x112a2e and fs2 == 0 and fe2 == 0x7e and fm2 == 0x112a2e and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f112a2e; op2val:0x3f112a2e;
   valaddr_reg:x12; val_offset:934*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 934*FLEN/8, x13, x9, x10)

inst_489:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x112a2e and fs2 == 0 and fe2 == 0x7e and fm2 == 0x112a2e and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f112a2e; op2val:0x3f112a2e;
   valaddr_reg:x12; val_offset:936*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 936*FLEN/8, x13, x9, x10)

inst_490:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x654474 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x654474 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f654474; op2val:0x3f654474;
   valaddr_reg:x12; val_offset:938*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 938*FLEN/8, x13, x9, x10)

inst_491:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x654474 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x654474 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f654474; op2val:0x3f654474;
   valaddr_reg:x12; val_offset:940*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 940*FLEN/8, x13, x9, x10)

inst_492:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x654474 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x654474 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f654474; op2val:0x3f654474;
   valaddr_reg:x12; val_offset:942*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 942*FLEN/8, x13, x9, x10)

inst_493:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x654474 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x654474 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f654474; op2val:0x3f654474;
   valaddr_reg:x12; val_offset:944*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 944*FLEN/8, x13, x9, x10)

inst_494:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x654474 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x654474 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f654474; op2val:0x3f654474;
   valaddr_reg:x12; val_offset:946*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 946*FLEN/8, x13, x9, x10)

inst_495:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x343494 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x343494 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f343494; op2val:0x3f343494;
   valaddr_reg:x12; val_offset:948*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 948*FLEN/8, x13, x9, x10)

inst_496:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x343494 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x343494 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f343494; op2val:0x3f343494;
   valaddr_reg:x12; val_offset:950*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 950*FLEN/8, x13, x9, x10)

inst_497:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x343494 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x343494 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f343494; op2val:0x3f343494;
   valaddr_reg:x12; val_offset:952*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 952*FLEN/8, x13, x9, x10)

inst_498:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x343494 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x343494 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f343494; op2val:0x3f343494;
   valaddr_reg:x12; val_offset:954*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 954*FLEN/8, x13, x9, x10)

inst_499:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x343494 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x343494 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f343494; op2val:0x3f343494;
   valaddr_reg:x12; val_offset:956*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 956*FLEN/8, x13, x9, x10)

inst_500:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x2cb625 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x2cb625 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f2cb625; op2val:0x3f2cb625;
   valaddr_reg:x12; val_offset:958*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 958*FLEN/8, x13, x9, x10)

inst_501:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x2cb625 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x2cb625 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f2cb625; op2val:0x3f2cb625;
   valaddr_reg:x12; val_offset:960*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 960*FLEN/8, x13, x9, x10)

inst_502:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x2cb625 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x2cb625 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f2cb625; op2val:0x3f2cb625;
   valaddr_reg:x12; val_offset:962*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 962*FLEN/8, x13, x9, x10)

inst_503:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x2cb625 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x2cb625 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f2cb625; op2val:0x3f2cb625;
   valaddr_reg:x12; val_offset:964*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 964*FLEN/8, x13, x9, x10)

inst_504:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x2cb625 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x2cb625 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f2cb625; op2val:0x3f2cb625;
   valaddr_reg:x12; val_offset:966*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 966*FLEN/8, x13, x9, x10)

inst_505:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x4d757a and fs2 == 0 and fe2 == 0x7b and fm2 == 0x4d757a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3dcd757a; op2val:0x3dcd757a;
   valaddr_reg:x12; val_offset:968*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 968*FLEN/8, x13, x9, x10)

inst_506:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x4d757a and fs2 == 0 and fe2 == 0x7b and fm2 == 0x4d757a and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3dcd757a; op2val:0x3dcd757a;
   valaddr_reg:x12; val_offset:970*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 970*FLEN/8, x13, x9, x10)

inst_507:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x4d757a and fs2 == 0 and fe2 == 0x7b and fm2 == 0x4d757a and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3dcd757a; op2val:0x3dcd757a;
   valaddr_reg:x12; val_offset:972*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 972*FLEN/8, x13, x9, x10)

inst_508:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x4d757a and fs2 == 0 and fe2 == 0x7b and fm2 == 0x4d757a and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3dcd757a; op2val:0x3dcd757a;
   valaddr_reg:x12; val_offset:974*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 974*FLEN/8, x13, x9, x10)

inst_509:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x4d757a and fs2 == 0 and fe2 == 0x7b and fm2 == 0x4d757a and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3dcd757a; op2val:0x3dcd757a;
   valaddr_reg:x12; val_offset:976*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 976*FLEN/8, x13, x9, x10)

inst_510:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x4c94e5 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x4c94e5 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f4c94e5; op2val:0x3f4c94e5;
   valaddr_reg:x12; val_offset:978*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 978*FLEN/8, x13, x9, x10)

inst_511:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x4c94e5 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x4c94e5 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f4c94e5; op2val:0x3f4c94e5;
   valaddr_reg:x12; val_offset:980*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 980*FLEN/8, x13, x9, x10)

inst_512:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x4c94e5 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x4c94e5 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f4c94e5; op2val:0x3f4c94e5;
   valaddr_reg:x12; val_offset:982*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 982*FLEN/8, x13, x9, x10)

inst_513:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x4c94e5 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x4c94e5 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f4c94e5; op2val:0x3f4c94e5;
   valaddr_reg:x12; val_offset:984*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 984*FLEN/8, x13, x9, x10)

inst_514:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x4c94e5 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x4c94e5 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f4c94e5; op2val:0x3f4c94e5;
   valaddr_reg:x12; val_offset:986*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 986*FLEN/8, x13, x9, x10)

inst_515:
// fs1 == 0 and fe1 == 0x78 and fm1 == 0x542d6b and fs2 == 0 and fe2 == 0x78 and fm2 == 0x542d6b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3c542d6b; op2val:0x3c542d6b;
   valaddr_reg:x12; val_offset:988*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 988*FLEN/8, x13, x9, x10)

inst_516:
// fs1 == 0 and fe1 == 0x78 and fm1 == 0x542d6b and fs2 == 0 and fe2 == 0x78 and fm2 == 0x542d6b and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3c542d6b; op2val:0x3c542d6b;
   valaddr_reg:x12; val_offset:990*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 990*FLEN/8, x13, x9, x10)

inst_517:
// fs1 == 0 and fe1 == 0x78 and fm1 == 0x542d6b and fs2 == 0 and fe2 == 0x78 and fm2 == 0x542d6b and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3c542d6b; op2val:0x3c542d6b;
   valaddr_reg:x12; val_offset:992*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 992*FLEN/8, x13, x9, x10)

inst_518:
// fs1 == 0 and fe1 == 0x78 and fm1 == 0x542d6b and fs2 == 0 and fe2 == 0x78 and fm2 == 0x542d6b and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3c542d6b; op2val:0x3c542d6b;
   valaddr_reg:x12; val_offset:994*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 994*FLEN/8, x13, x9, x10)

inst_519:
// fs1 == 0 and fe1 == 0x78 and fm1 == 0x542d6b and fs2 == 0 and fe2 == 0x78 and fm2 == 0x542d6b and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3c542d6b; op2val:0x3c542d6b;
   valaddr_reg:x12; val_offset:996*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 996*FLEN/8, x13, x9, x10)

inst_520:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x293107 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x293107 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f293107; op2val:0x3f293107;
   valaddr_reg:x12; val_offset:998*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 998*FLEN/8, x13, x9, x10)

inst_521:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x293107 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x293107 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f293107; op2val:0x3f293107;
   valaddr_reg:x12; val_offset:1000*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 1000*FLEN/8, x13, x9, x10)

inst_522:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x293107 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x293107 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f293107; op2val:0x3f293107;
   valaddr_reg:x12; val_offset:1002*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 1002*FLEN/8, x13, x9, x10)

inst_523:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x293107 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x293107 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f293107; op2val:0x3f293107;
   valaddr_reg:x12; val_offset:1004*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 1004*FLEN/8, x13, x9, x10)

inst_524:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x293107 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x293107 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f293107; op2val:0x3f293107;
   valaddr_reg:x12; val_offset:1006*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 1006*FLEN/8, x13, x9, x10)

inst_525:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x26add3 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x26add3 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ea6add3; op2val:0x3ea6add3;
   valaddr_reg:x12; val_offset:1008*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 1008*FLEN/8, x13, x9, x10)

inst_526:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x26add3 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x26add3 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ea6add3; op2val:0x3ea6add3;
   valaddr_reg:x12; val_offset:1010*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 1010*FLEN/8, x13, x9, x10)

inst_527:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x26add3 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x26add3 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ea6add3; op2val:0x3ea6add3;
   valaddr_reg:x12; val_offset:1012*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 1012*FLEN/8, x13, x9, x10)

inst_528:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x26add3 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x26add3 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ea6add3; op2val:0x3ea6add3;
   valaddr_reg:x12; val_offset:1014*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 1014*FLEN/8, x13, x9, x10)

inst_529:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x26add3 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x26add3 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ea6add3; op2val:0x3ea6add3;
   valaddr_reg:x12; val_offset:1016*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 1016*FLEN/8, x13, x9, x10)

inst_530:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x0ae14b and fs2 == 0 and fe2 == 0x7b and fm2 == 0x0ae14b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3d8ae14b; op2val:0x3d8ae14b;
   valaddr_reg:x12; val_offset:1018*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 1018*FLEN/8, x13, x9, x10)

inst_531:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x0ae14b and fs2 == 0 and fe2 == 0x7b and fm2 == 0x0ae14b and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3d8ae14b; op2val:0x3d8ae14b;
   valaddr_reg:x12; val_offset:1020*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 1020*FLEN/8, x13, x9, x10)

inst_532:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x0ae14b and fs2 == 0 and fe2 == 0x7b and fm2 == 0x0ae14b and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3d8ae14b; op2val:0x3d8ae14b;
   valaddr_reg:x12; val_offset:1022*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 1022*FLEN/8, x13, x9, x10)

inst_533:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x0ae14b and fs2 == 0 and fe2 == 0x7b and fm2 == 0x0ae14b and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3d8ae14b; op2val:0x3d8ae14b;
   valaddr_reg:x12; val_offset:1024*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 1024*FLEN/8, x13, x9, x10)

inst_534:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x0ae14b and fs2 == 0 and fe2 == 0x7b and fm2 == 0x0ae14b and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3d8ae14b; op2val:0x3d8ae14b;
   valaddr_reg:x12; val_offset:1026*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 1026*FLEN/8, x13, x9, x10)

inst_535:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x70dbd5 and fs2 == 0 and fe2 == 0x7b and fm2 == 0x70dbd5 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3df0dbd5; op2val:0x3df0dbd5;
   valaddr_reg:x12; val_offset:1028*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 1028*FLEN/8, x13, x9, x10)
RVTEST_SIGBASE(x9,signature_x9_4)

inst_536:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x70dbd5 and fs2 == 0 and fe2 == 0x7b and fm2 == 0x70dbd5 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3df0dbd5; op2val:0x3df0dbd5;
   valaddr_reg:x12; val_offset:1030*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 1030*FLEN/8, x13, x9, x10)

inst_537:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x70dbd5 and fs2 == 0 and fe2 == 0x7b and fm2 == 0x70dbd5 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3df0dbd5; op2val:0x3df0dbd5;
   valaddr_reg:x12; val_offset:1032*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 1032*FLEN/8, x13, x9, x10)

inst_538:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x70dbd5 and fs2 == 0 and fe2 == 0x7b and fm2 == 0x70dbd5 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3df0dbd5; op2val:0x3df0dbd5;
   valaddr_reg:x12; val_offset:1034*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 1034*FLEN/8, x13, x9, x10)

inst_539:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x70dbd5 and fs2 == 0 and fe2 == 0x7b and fm2 == 0x70dbd5 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3df0dbd5; op2val:0x3df0dbd5;
   valaddr_reg:x12; val_offset:1036*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 1036*FLEN/8, x13, x9, x10)

inst_540:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x03f7e4 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x03f7e4 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f03f7e4; op2val:0x3f03f7e4;
   valaddr_reg:x12; val_offset:1038*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 1038*FLEN/8, x13, x9, x10)

inst_541:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x03f7e4 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x03f7e4 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f03f7e4; op2val:0x3f03f7e4;
   valaddr_reg:x12; val_offset:1040*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 1040*FLEN/8, x13, x9, x10)

inst_542:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x03f7e4 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x03f7e4 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f03f7e4; op2val:0x3f03f7e4;
   valaddr_reg:x12; val_offset:1042*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 1042*FLEN/8, x13, x9, x10)

inst_543:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x03f7e4 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x03f7e4 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f03f7e4; op2val:0x3f03f7e4;
   valaddr_reg:x12; val_offset:1044*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 1044*FLEN/8, x13, x9, x10)

inst_544:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x03f7e4 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x03f7e4 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f03f7e4; op2val:0x3f03f7e4;
   valaddr_reg:x12; val_offset:1046*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 1046*FLEN/8, x13, x9, x10)

inst_545:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x43ee9a and fs2 == 0 and fe2 == 0x7e and fm2 == 0x43ee9a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f43ee9a; op2val:0x3f43ee9a;
   valaddr_reg:x12; val_offset:1048*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 1048*FLEN/8, x13, x9, x10)

inst_546:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x43ee9a and fs2 == 0 and fe2 == 0x7e and fm2 == 0x43ee9a and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f43ee9a; op2val:0x3f43ee9a;
   valaddr_reg:x12; val_offset:1050*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 1050*FLEN/8, x13, x9, x10)

inst_547:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x43ee9a and fs2 == 0 and fe2 == 0x7e and fm2 == 0x43ee9a and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f43ee9a; op2val:0x3f43ee9a;
   valaddr_reg:x12; val_offset:1052*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 1052*FLEN/8, x13, x9, x10)

inst_548:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x43ee9a and fs2 == 0 and fe2 == 0x7e and fm2 == 0x43ee9a and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f43ee9a; op2val:0x3f43ee9a;
   valaddr_reg:x12; val_offset:1054*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 1054*FLEN/8, x13, x9, x10)

inst_549:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x43ee9a and fs2 == 0 and fe2 == 0x7e and fm2 == 0x43ee9a and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f43ee9a; op2val:0x3f43ee9a;
   valaddr_reg:x12; val_offset:1056*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 1056*FLEN/8, x13, x9, x10)

inst_550:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x6a5265 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x6a5265 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f6a5265; op2val:0x3f6a5265;
   valaddr_reg:x12; val_offset:1058*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 1058*FLEN/8, x13, x9, x10)

inst_551:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x6a5265 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x6a5265 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f6a5265; op2val:0x3f6a5265;
   valaddr_reg:x12; val_offset:1060*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 1060*FLEN/8, x13, x9, x10)

inst_552:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x6a5265 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x6a5265 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f6a5265; op2val:0x3f6a5265;
   valaddr_reg:x12; val_offset:1062*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 1062*FLEN/8, x13, x9, x10)

inst_553:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x6a5265 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x6a5265 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f6a5265; op2val:0x3f6a5265;
   valaddr_reg:x12; val_offset:1064*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 1064*FLEN/8, x13, x9, x10)

inst_554:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x6a5265 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x6a5265 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f6a5265; op2val:0x3f6a5265;
   valaddr_reg:x12; val_offset:1066*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 1066*FLEN/8, x13, x9, x10)

inst_555:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x364c09 and fs2 == 0 and fe2 == 0x7b and fm2 == 0x364c09 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3db64c09; op2val:0x3db64c09;
   valaddr_reg:x12; val_offset:1068*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 1068*FLEN/8, x13, x9, x10)

inst_556:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x364c09 and fs2 == 0 and fe2 == 0x7b and fm2 == 0x364c09 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3db64c09; op2val:0x3db64c09;
   valaddr_reg:x12; val_offset:1070*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 1070*FLEN/8, x13, x9, x10)

inst_557:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x364c09 and fs2 == 0 and fe2 == 0x7b and fm2 == 0x364c09 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3db64c09; op2val:0x3db64c09;
   valaddr_reg:x12; val_offset:1072*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 1072*FLEN/8, x13, x9, x10)

inst_558:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x364c09 and fs2 == 0 and fe2 == 0x7b and fm2 == 0x364c09 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3db64c09; op2val:0x3db64c09;
   valaddr_reg:x12; val_offset:1074*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 1074*FLEN/8, x13, x9, x10)

inst_559:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x364c09 and fs2 == 0 and fe2 == 0x7b and fm2 == 0x364c09 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3db64c09; op2val:0x3db64c09;
   valaddr_reg:x12; val_offset:1076*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 1076*FLEN/8, x13, x9, x10)

inst_560:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x76aa3f and fs2 == 0 and fe2 == 0x7c and fm2 == 0x76aa3f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e76aa3f; op2val:0x3e76aa3f;
   valaddr_reg:x12; val_offset:1078*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 1078*FLEN/8, x13, x9, x10)

inst_561:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x76aa3f and fs2 == 0 and fe2 == 0x7c and fm2 == 0x76aa3f and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e76aa3f; op2val:0x3e76aa3f;
   valaddr_reg:x12; val_offset:1080*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 1080*FLEN/8, x13, x9, x10)

inst_562:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x76aa3f and fs2 == 0 and fe2 == 0x7c and fm2 == 0x76aa3f and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e76aa3f; op2val:0x3e76aa3f;
   valaddr_reg:x12; val_offset:1082*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 1082*FLEN/8, x13, x9, x10)

inst_563:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x76aa3f and fs2 == 0 and fe2 == 0x7c and fm2 == 0x76aa3f and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e76aa3f; op2val:0x3e76aa3f;
   valaddr_reg:x12; val_offset:1084*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 1084*FLEN/8, x13, x9, x10)

inst_564:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x76aa3f and fs2 == 0 and fe2 == 0x7c and fm2 == 0x76aa3f and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e76aa3f; op2val:0x3e76aa3f;
   valaddr_reg:x12; val_offset:1086*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 1086*FLEN/8, x13, x9, x10)

inst_565:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x22ae3d and fs2 == 0 and fe2 == 0x7c and fm2 == 0x22ae3d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e22ae3d; op2val:0x3e22ae3d;
   valaddr_reg:x12; val_offset:1088*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 1088*FLEN/8, x13, x9, x10)

inst_566:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x22ae3d and fs2 == 0 and fe2 == 0x7c and fm2 == 0x22ae3d and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e22ae3d; op2val:0x3e22ae3d;
   valaddr_reg:x12; val_offset:1090*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 1090*FLEN/8, x13, x9, x10)

inst_567:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x22ae3d and fs2 == 0 and fe2 == 0x7c and fm2 == 0x22ae3d and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e22ae3d; op2val:0x3e22ae3d;
   valaddr_reg:x12; val_offset:1092*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 1092*FLEN/8, x13, x9, x10)

inst_568:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x22ae3d and fs2 == 0 and fe2 == 0x7c and fm2 == 0x22ae3d and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e22ae3d; op2val:0x3e22ae3d;
   valaddr_reg:x12; val_offset:1094*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 1094*FLEN/8, x13, x9, x10)

inst_569:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x22ae3d and fs2 == 0 and fe2 == 0x7c and fm2 == 0x22ae3d and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e22ae3d; op2val:0x3e22ae3d;
   valaddr_reg:x12; val_offset:1096*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 1096*FLEN/8, x13, x9, x10)

inst_570:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x28e311 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x28e311 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f28e311; op2val:0x3f28e311;
   valaddr_reg:x12; val_offset:1098*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 1098*FLEN/8, x13, x9, x10)

inst_571:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x28e311 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x28e311 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f28e311; op2val:0x3f28e311;
   valaddr_reg:x12; val_offset:1100*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 1100*FLEN/8, x13, x9, x10)

inst_572:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x28e311 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x28e311 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f28e311; op2val:0x3f28e311;
   valaddr_reg:x12; val_offset:1102*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 1102*FLEN/8, x13, x9, x10)

inst_573:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x28e311 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x28e311 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f28e311; op2val:0x3f28e311;
   valaddr_reg:x12; val_offset:1104*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 1104*FLEN/8, x13, x9, x10)

inst_574:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x28e311 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x28e311 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f28e311; op2val:0x3f28e311;
   valaddr_reg:x12; val_offset:1106*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 1106*FLEN/8, x13, x9, x10)

inst_575:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x07c319 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x07c319 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e07c319; op2val:0x3e07c319;
   valaddr_reg:x12; val_offset:1108*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 1108*FLEN/8, x13, x9, x10)

inst_576:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x07c319 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x07c319 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e07c319; op2val:0x3e07c319;
   valaddr_reg:x12; val_offset:1110*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 1110*FLEN/8, x13, x9, x10)

inst_577:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x07c319 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x07c319 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e07c319; op2val:0x3e07c319;
   valaddr_reg:x12; val_offset:1112*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 1112*FLEN/8, x13, x9, x10)

inst_578:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x07c319 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x07c319 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e07c319; op2val:0x3e07c319;
   valaddr_reg:x12; val_offset:1114*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 1114*FLEN/8, x13, x9, x10)

inst_579:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x07c319 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x07c319 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e07c319; op2val:0x3e07c319;
   valaddr_reg:x12; val_offset:1116*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 1116*FLEN/8, x13, x9, x10)

inst_580:
// fs1 == 0 and fe1 == 0x7a and fm1 == 0x3b281a and fs2 == 0 and fe2 == 0x7a and fm2 == 0x3b281a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3d3b281a; op2val:0x3d3b281a;
   valaddr_reg:x12; val_offset:1118*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 1118*FLEN/8, x13, x9, x10)

inst_581:
// fs1 == 0 and fe1 == 0x7a and fm1 == 0x3b281a and fs2 == 0 and fe2 == 0x7a and fm2 == 0x3b281a and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3d3b281a; op2val:0x3d3b281a;
   valaddr_reg:x12; val_offset:1120*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 1120*FLEN/8, x13, x9, x10)

inst_582:
// fs1 == 0 and fe1 == 0x7a and fm1 == 0x3b281a and fs2 == 0 and fe2 == 0x7a and fm2 == 0x3b281a and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3d3b281a; op2val:0x3d3b281a;
   valaddr_reg:x12; val_offset:1122*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 1122*FLEN/8, x13, x9, x10)

inst_583:
// fs1 == 0 and fe1 == 0x7a and fm1 == 0x3b281a and fs2 == 0 and fe2 == 0x7a and fm2 == 0x3b281a and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3d3b281a; op2val:0x3d3b281a;
   valaddr_reg:x12; val_offset:1124*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 1124*FLEN/8, x13, x9, x10)

inst_584:
// fs1 == 0 and fe1 == 0x7a and fm1 == 0x3b281a and fs2 == 0 and fe2 == 0x7a and fm2 == 0x3b281a and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3d3b281a; op2val:0x3d3b281a;
   valaddr_reg:x12; val_offset:1126*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 1126*FLEN/8, x13, x9, x10)

inst_585:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x5d59f7 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x5d59f7 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f5d59f7; op2val:0x3f5d59f7;
   valaddr_reg:x12; val_offset:1128*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 1128*FLEN/8, x13, x9, x10)

inst_586:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x5d59f7 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x5d59f7 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f5d59f7; op2val:0x3f5d59f7;
   valaddr_reg:x12; val_offset:1130*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 1130*FLEN/8, x13, x9, x10)

inst_587:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x5d59f7 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x5d59f7 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f5d59f7; op2val:0x3f5d59f7;
   valaddr_reg:x12; val_offset:1132*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 1132*FLEN/8, x13, x9, x10)

inst_588:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x5d59f7 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x5d59f7 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f5d59f7; op2val:0x3f5d59f7;
   valaddr_reg:x12; val_offset:1134*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 1134*FLEN/8, x13, x9, x10)

inst_589:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x5d59f7 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x5d59f7 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f5d59f7; op2val:0x3f5d59f7;
   valaddr_reg:x12; val_offset:1136*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 1136*FLEN/8, x13, x9, x10)

inst_590:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x654e3b and fs2 == 0 and fe2 == 0x7e and fm2 == 0x654e3b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f654e3b; op2val:0x3f654e3b;
   valaddr_reg:x12; val_offset:1138*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 1138*FLEN/8, x13, x9, x10)

inst_591:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x654e3b and fs2 == 0 and fe2 == 0x7e and fm2 == 0x654e3b and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f654e3b; op2val:0x3f654e3b;
   valaddr_reg:x12; val_offset:1140*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 1140*FLEN/8, x13, x9, x10)

inst_592:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x654e3b and fs2 == 0 and fe2 == 0x7e and fm2 == 0x654e3b and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f654e3b; op2val:0x3f654e3b;
   valaddr_reg:x12; val_offset:1142*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 1142*FLEN/8, x13, x9, x10)

inst_593:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x654e3b and fs2 == 0 and fe2 == 0x7e and fm2 == 0x654e3b and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f654e3b; op2val:0x3f654e3b;
   valaddr_reg:x12; val_offset:1144*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 1144*FLEN/8, x13, x9, x10)

inst_594:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x654e3b and fs2 == 0 and fe2 == 0x7e and fm2 == 0x654e3b and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f654e3b; op2val:0x3f654e3b;
   valaddr_reg:x12; val_offset:1146*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 1146*FLEN/8, x13, x9, x10)

inst_595:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x6d4332 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x6d4332 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f6d4332; op2val:0x3f6d4332;
   valaddr_reg:x12; val_offset:1148*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 1148*FLEN/8, x13, x9, x10)

inst_596:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x6d4332 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x6d4332 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f6d4332; op2val:0x3f6d4332;
   valaddr_reg:x12; val_offset:1150*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 1150*FLEN/8, x13, x9, x10)

inst_597:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x6d4332 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x6d4332 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f6d4332; op2val:0x3f6d4332;
   valaddr_reg:x12; val_offset:1152*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 1152*FLEN/8, x13, x9, x10)

inst_598:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x6d4332 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x6d4332 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f6d4332; op2val:0x3f6d4332;
   valaddr_reg:x12; val_offset:1154*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 1154*FLEN/8, x13, x9, x10)

inst_599:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x6d4332 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x6d4332 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f6d4332; op2val:0x3f6d4332;
   valaddr_reg:x12; val_offset:1156*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 1156*FLEN/8, x13, x9, x10)

inst_600:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x58f800 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x58f800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e58f800; op2val:0x3e58f800;
   valaddr_reg:x12; val_offset:1158*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 1158*FLEN/8, x13, x9, x10)

inst_601:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x58f800 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x58f800 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e58f800; op2val:0x3e58f800;
   valaddr_reg:x12; val_offset:1160*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 1160*FLEN/8, x13, x9, x10)

inst_602:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x58f800 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x58f800 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e58f800; op2val:0x3e58f800;
   valaddr_reg:x12; val_offset:1162*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 1162*FLEN/8, x13, x9, x10)

inst_603:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x58f800 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x58f800 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e58f800; op2val:0x3e58f800;
   valaddr_reg:x12; val_offset:1164*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 1164*FLEN/8, x13, x9, x10)

inst_604:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x58f800 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x58f800 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e58f800; op2val:0x3e58f800;
   valaddr_reg:x12; val_offset:1166*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 1166*FLEN/8, x13, x9, x10)

inst_605:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x28baf1 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x28baf1 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f28baf1; op2val:0x3f28baf1;
   valaddr_reg:x12; val_offset:1168*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 1168*FLEN/8, x13, x9, x10)

inst_606:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x28baf1 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x28baf1 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f28baf1; op2val:0x3f28baf1;
   valaddr_reg:x12; val_offset:1170*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 1170*FLEN/8, x13, x9, x10)

inst_607:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x28baf1 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x28baf1 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f28baf1; op2val:0x3f28baf1;
   valaddr_reg:x12; val_offset:1172*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 1172*FLEN/8, x13, x9, x10)

inst_608:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x28baf1 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x28baf1 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f28baf1; op2val:0x3f28baf1;
   valaddr_reg:x12; val_offset:1174*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 1174*FLEN/8, x13, x9, x10)

inst_609:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x28baf1 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x28baf1 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f28baf1; op2val:0x3f28baf1;
   valaddr_reg:x12; val_offset:1176*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 1176*FLEN/8, x13, x9, x10)

inst_610:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x5f54a9 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x5f54a9 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e5f54a9; op2val:0x3e5f54a9;
   valaddr_reg:x12; val_offset:1178*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 1178*FLEN/8, x13, x9, x10)

inst_611:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x5f54a9 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x5f54a9 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e5f54a9; op2val:0x3e5f54a9;
   valaddr_reg:x12; val_offset:1180*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 1180*FLEN/8, x13, x9, x10)

inst_612:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x5f54a9 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x5f54a9 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e5f54a9; op2val:0x3e5f54a9;
   valaddr_reg:x12; val_offset:1182*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 1182*FLEN/8, x13, x9, x10)

inst_613:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x5f54a9 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x5f54a9 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e5f54a9; op2val:0x3e5f54a9;
   valaddr_reg:x12; val_offset:1184*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 1184*FLEN/8, x13, x9, x10)

inst_614:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x5f54a9 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x5f54a9 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e5f54a9; op2val:0x3e5f54a9;
   valaddr_reg:x12; val_offset:1186*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 1186*FLEN/8, x13, x9, x10)

inst_615:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x5bc286 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x5bc286 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3edbc286; op2val:0x3edbc286;
   valaddr_reg:x12; val_offset:1188*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 1188*FLEN/8, x13, x9, x10)

inst_616:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x5bc286 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x5bc286 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3edbc286; op2val:0x3edbc286;
   valaddr_reg:x12; val_offset:1190*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 1190*FLEN/8, x13, x9, x10)

inst_617:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x5bc286 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x5bc286 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3edbc286; op2val:0x3edbc286;
   valaddr_reg:x12; val_offset:1192*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 1192*FLEN/8, x13, x9, x10)

inst_618:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x5bc286 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x5bc286 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3edbc286; op2val:0x3edbc286;
   valaddr_reg:x12; val_offset:1194*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 1194*FLEN/8, x13, x9, x10)

inst_619:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x5bc286 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x5bc286 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3edbc286; op2val:0x3edbc286;
   valaddr_reg:x12; val_offset:1196*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 1196*FLEN/8, x13, x9, x10)

inst_620:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x6b12df and fs2 == 0 and fe2 == 0x7e and fm2 == 0x6b12df and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f6b12df; op2val:0x3f6b12df;
   valaddr_reg:x12; val_offset:1198*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 1198*FLEN/8, x13, x9, x10)

inst_621:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x6b12df and fs2 == 0 and fe2 == 0x7e and fm2 == 0x6b12df and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f6b12df; op2val:0x3f6b12df;
   valaddr_reg:x12; val_offset:1200*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 1200*FLEN/8, x13, x9, x10)

inst_622:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x6b12df and fs2 == 0 and fe2 == 0x7e and fm2 == 0x6b12df and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f6b12df; op2val:0x3f6b12df;
   valaddr_reg:x12; val_offset:1202*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 1202*FLEN/8, x13, x9, x10)

inst_623:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x6b12df and fs2 == 0 and fe2 == 0x7e and fm2 == 0x6b12df and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f6b12df; op2val:0x3f6b12df;
   valaddr_reg:x12; val_offset:1204*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 1204*FLEN/8, x13, x9, x10)

inst_624:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x6b12df and fs2 == 0 and fe2 == 0x7e and fm2 == 0x6b12df and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f6b12df; op2val:0x3f6b12df;
   valaddr_reg:x12; val_offset:1206*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 1206*FLEN/8, x13, x9, x10)

inst_625:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x5fb4f5 and fs2 == 0 and fe2 == 0x7b and fm2 == 0x5fb4f5 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ddfb4f5; op2val:0x3ddfb4f5;
   valaddr_reg:x12; val_offset:1208*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 1208*FLEN/8, x13, x9, x10)

inst_626:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x5fb4f5 and fs2 == 0 and fe2 == 0x7b and fm2 == 0x5fb4f5 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ddfb4f5; op2val:0x3ddfb4f5;
   valaddr_reg:x12; val_offset:1210*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 1210*FLEN/8, x13, x9, x10)

inst_627:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x5fb4f5 and fs2 == 0 and fe2 == 0x7b and fm2 == 0x5fb4f5 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ddfb4f5; op2val:0x3ddfb4f5;
   valaddr_reg:x12; val_offset:1212*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 1212*FLEN/8, x13, x9, x10)

inst_628:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x5fb4f5 and fs2 == 0 and fe2 == 0x7b and fm2 == 0x5fb4f5 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ddfb4f5; op2val:0x3ddfb4f5;
   valaddr_reg:x12; val_offset:1214*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 1214*FLEN/8, x13, x9, x10)

inst_629:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x5fb4f5 and fs2 == 0 and fe2 == 0x7b and fm2 == 0x5fb4f5 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ddfb4f5; op2val:0x3ddfb4f5;
   valaddr_reg:x12; val_offset:1216*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 1216*FLEN/8, x13, x9, x10)

inst_630:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x19765d and fs2 == 0 and fe2 == 0x7b and fm2 == 0x19765d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3d99765d; op2val:0x3d99765d;
   valaddr_reg:x12; val_offset:1218*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 1218*FLEN/8, x13, x9, x10)

inst_631:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x19765d and fs2 == 0 and fe2 == 0x7b and fm2 == 0x19765d and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3d99765d; op2val:0x3d99765d;
   valaddr_reg:x12; val_offset:1220*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 1220*FLEN/8, x13, x9, x10)

inst_632:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x19765d and fs2 == 0 and fe2 == 0x7b and fm2 == 0x19765d and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3d99765d; op2val:0x3d99765d;
   valaddr_reg:x12; val_offset:1222*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 1222*FLEN/8, x13, x9, x10)

inst_633:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x19765d and fs2 == 0 and fe2 == 0x7b and fm2 == 0x19765d and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3d99765d; op2val:0x3d99765d;
   valaddr_reg:x12; val_offset:1224*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 1224*FLEN/8, x13, x9, x10)

inst_634:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x19765d and fs2 == 0 and fe2 == 0x7b and fm2 == 0x19765d and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3d99765d; op2val:0x3d99765d;
   valaddr_reg:x12; val_offset:1226*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 1226*FLEN/8, x13, x9, x10)

inst_635:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x390a8c and fs2 == 0 and fe2 == 0x7e and fm2 == 0x390a8c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f390a8c; op2val:0x3f390a8c;
   valaddr_reg:x12; val_offset:1228*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 1228*FLEN/8, x13, x9, x10)

inst_636:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x390a8c and fs2 == 0 and fe2 == 0x7e and fm2 == 0x390a8c and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f390a8c; op2val:0x3f390a8c;
   valaddr_reg:x12; val_offset:1230*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 1230*FLEN/8, x13, x9, x10)

inst_637:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x390a8c and fs2 == 0 and fe2 == 0x7e and fm2 == 0x390a8c and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f390a8c; op2val:0x3f390a8c;
   valaddr_reg:x12; val_offset:1232*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 1232*FLEN/8, x13, x9, x10)

inst_638:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x390a8c and fs2 == 0 and fe2 == 0x7e and fm2 == 0x390a8c and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f390a8c; op2val:0x3f390a8c;
   valaddr_reg:x12; val_offset:1234*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 1234*FLEN/8, x13, x9, x10)

inst_639:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x390a8c and fs2 == 0 and fe2 == 0x7e and fm2 == 0x390a8c and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f390a8c; op2val:0x3f390a8c;
   valaddr_reg:x12; val_offset:1236*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 1236*FLEN/8, x13, x9, x10)

inst_640:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x305d8b and fs2 == 0 and fe2 == 0x7c and fm2 == 0x305d8b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e305d8b; op2val:0x3e305d8b;
   valaddr_reg:x12; val_offset:1238*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 1238*FLEN/8, x13, x9, x10)

inst_641:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x305d8b and fs2 == 0 and fe2 == 0x7c and fm2 == 0x305d8b and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e305d8b; op2val:0x3e305d8b;
   valaddr_reg:x12; val_offset:1240*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 1240*FLEN/8, x13, x9, x10)

inst_642:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x305d8b and fs2 == 0 and fe2 == 0x7c and fm2 == 0x305d8b and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e305d8b; op2val:0x3e305d8b;
   valaddr_reg:x12; val_offset:1242*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 1242*FLEN/8, x13, x9, x10)

inst_643:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x305d8b and fs2 == 0 and fe2 == 0x7c and fm2 == 0x305d8b and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e305d8b; op2val:0x3e305d8b;
   valaddr_reg:x12; val_offset:1244*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 1244*FLEN/8, x13, x9, x10)

inst_644:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x305d8b and fs2 == 0 and fe2 == 0x7c and fm2 == 0x305d8b and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e305d8b; op2val:0x3e305d8b;
   valaddr_reg:x12; val_offset:1246*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 1246*FLEN/8, x13, x9, x10)

inst_645:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x28bfce and fs2 == 0 and fe2 == 0x7d and fm2 == 0x28bfce and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ea8bfce; op2val:0x3ea8bfce;
   valaddr_reg:x12; val_offset:1248*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 1248*FLEN/8, x13, x9, x10)

inst_646:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x28bfce and fs2 == 0 and fe2 == 0x7d and fm2 == 0x28bfce and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ea8bfce; op2val:0x3ea8bfce;
   valaddr_reg:x12; val_offset:1250*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 1250*FLEN/8, x13, x9, x10)

inst_647:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x28bfce and fs2 == 0 and fe2 == 0x7d and fm2 == 0x28bfce and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ea8bfce; op2val:0x3ea8bfce;
   valaddr_reg:x12; val_offset:1252*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 1252*FLEN/8, x13, x9, x10)

inst_648:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x28bfce and fs2 == 0 and fe2 == 0x7d and fm2 == 0x28bfce and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ea8bfce; op2val:0x3ea8bfce;
   valaddr_reg:x12; val_offset:1254*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 1254*FLEN/8, x13, x9, x10)

inst_649:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x28bfce and fs2 == 0 and fe2 == 0x7d and fm2 == 0x28bfce and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ea8bfce; op2val:0x3ea8bfce;
   valaddr_reg:x12; val_offset:1256*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 1256*FLEN/8, x13, x9, x10)

inst_650:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x6288a4 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x6288a4 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f6288a4; op2val:0x3f6288a4;
   valaddr_reg:x12; val_offset:1258*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 1258*FLEN/8, x13, x9, x10)

inst_651:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x6288a4 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x6288a4 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f6288a4; op2val:0x3f6288a4;
   valaddr_reg:x12; val_offset:1260*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 1260*FLEN/8, x13, x9, x10)

inst_652:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x6288a4 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x6288a4 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f6288a4; op2val:0x3f6288a4;
   valaddr_reg:x12; val_offset:1262*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 1262*FLEN/8, x13, x9, x10)

inst_653:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x6288a4 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x6288a4 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f6288a4; op2val:0x3f6288a4;
   valaddr_reg:x12; val_offset:1264*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 1264*FLEN/8, x13, x9, x10)

inst_654:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x6288a4 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x6288a4 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f6288a4; op2val:0x3f6288a4;
   valaddr_reg:x12; val_offset:1266*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 1266*FLEN/8, x13, x9, x10)

inst_655:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x75c104 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x75c104 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f75c104; op2val:0x3f75c104;
   valaddr_reg:x12; val_offset:1268*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 1268*FLEN/8, x13, x9, x10)

inst_656:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x75c104 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x75c104 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f75c104; op2val:0x3f75c104;
   valaddr_reg:x12; val_offset:1270*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 1270*FLEN/8, x13, x9, x10)

inst_657:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x75c104 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x75c104 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f75c104; op2val:0x3f75c104;
   valaddr_reg:x12; val_offset:1272*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 1272*FLEN/8, x13, x9, x10)

inst_658:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x75c104 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x75c104 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f75c104; op2val:0x3f75c104;
   valaddr_reg:x12; val_offset:1274*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 1274*FLEN/8, x13, x9, x10)

inst_659:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x75c104 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x75c104 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f75c104; op2val:0x3f75c104;
   valaddr_reg:x12; val_offset:1276*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 1276*FLEN/8, x13, x9, x10)

inst_660:
// fs1 == 0 and fe1 == 0x78 and fm1 == 0x4202db and fs2 == 0 and fe2 == 0x78 and fm2 == 0x4202db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3c4202db; op2val:0x3c4202db;
   valaddr_reg:x12; val_offset:1278*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 1278*FLEN/8, x13, x9, x10)

inst_661:
// fs1 == 0 and fe1 == 0x78 and fm1 == 0x4202db and fs2 == 0 and fe2 == 0x78 and fm2 == 0x4202db and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3c4202db; op2val:0x3c4202db;
   valaddr_reg:x12; val_offset:1280*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 1280*FLEN/8, x13, x9, x10)

inst_662:
// fs1 == 0 and fe1 == 0x78 and fm1 == 0x4202db and fs2 == 0 and fe2 == 0x78 and fm2 == 0x4202db and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3c4202db; op2val:0x3c4202db;
   valaddr_reg:x12; val_offset:1282*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 1282*FLEN/8, x13, x9, x10)

inst_663:
// fs1 == 0 and fe1 == 0x78 and fm1 == 0x4202db and fs2 == 0 and fe2 == 0x78 and fm2 == 0x4202db and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3c4202db; op2val:0x3c4202db;
   valaddr_reg:x12; val_offset:1284*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 1284*FLEN/8, x13, x9, x10)
RVTEST_SIGBASE(x9,signature_x9_5)

inst_664:
// fs1 == 0 and fe1 == 0x78 and fm1 == 0x4202db and fs2 == 0 and fe2 == 0x78 and fm2 == 0x4202db and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3c4202db; op2val:0x3c4202db;
   valaddr_reg:x12; val_offset:1286*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 1286*FLEN/8, x13, x9, x10)

inst_665:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x626ac7 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x626ac7 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f626ac7; op2val:0x3f626ac7;
   valaddr_reg:x12; val_offset:1288*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 1288*FLEN/8, x13, x9, x10)

inst_666:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x626ac7 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x626ac7 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f626ac7; op2val:0x3f626ac7;
   valaddr_reg:x12; val_offset:1290*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 1290*FLEN/8, x13, x9, x10)

inst_667:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x626ac7 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x626ac7 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f626ac7; op2val:0x3f626ac7;
   valaddr_reg:x12; val_offset:1292*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 1292*FLEN/8, x13, x9, x10)

inst_668:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x626ac7 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x626ac7 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f626ac7; op2val:0x3f626ac7;
   valaddr_reg:x12; val_offset:1294*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 1294*FLEN/8, x13, x9, x10)

inst_669:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x626ac7 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x626ac7 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f626ac7; op2val:0x3f626ac7;
   valaddr_reg:x12; val_offset:1296*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 1296*FLEN/8, x13, x9, x10)

inst_670:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x423247 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x423247 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f423247; op2val:0x3f423247;
   valaddr_reg:x12; val_offset:1298*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 1298*FLEN/8, x13, x9, x10)

inst_671:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x423247 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x423247 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f423247; op2val:0x3f423247;
   valaddr_reg:x12; val_offset:1300*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 1300*FLEN/8, x13, x9, x10)

inst_672:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x423247 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x423247 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f423247; op2val:0x3f423247;
   valaddr_reg:x12; val_offset:1302*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 1302*FLEN/8, x13, x9, x10)

inst_673:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x423247 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x423247 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f423247; op2val:0x3f423247;
   valaddr_reg:x12; val_offset:1304*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 1304*FLEN/8, x13, x9, x10)

inst_674:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x423247 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x423247 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f423247; op2val:0x3f423247;
   valaddr_reg:x12; val_offset:1306*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 1306*FLEN/8, x13, x9, x10)

inst_675:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x65aca9 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x65aca9 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f65aca9; op2val:0x3f65aca9;
   valaddr_reg:x12; val_offset:1308*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 1308*FLEN/8, x13, x9, x10)

inst_676:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x65aca9 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x65aca9 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f65aca9; op2val:0x3f65aca9;
   valaddr_reg:x12; val_offset:1310*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 1310*FLEN/8, x13, x9, x10)

inst_677:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x65aca9 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x65aca9 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f65aca9; op2val:0x3f65aca9;
   valaddr_reg:x12; val_offset:1312*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 1312*FLEN/8, x13, x9, x10)

inst_678:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x65aca9 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x65aca9 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f65aca9; op2val:0x3f65aca9;
   valaddr_reg:x12; val_offset:1314*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 1314*FLEN/8, x13, x9, x10)

inst_679:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x65aca9 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x65aca9 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f65aca9; op2val:0x3f65aca9;
   valaddr_reg:x12; val_offset:1316*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 1316*FLEN/8, x13, x9, x10)

inst_680:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x1f2938 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x1f2938 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f1f2938; op2val:0x3f1f2938;
   valaddr_reg:x12; val_offset:1318*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 1318*FLEN/8, x13, x9, x10)

inst_681:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x1f2938 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x1f2938 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f1f2938; op2val:0x3f1f2938;
   valaddr_reg:x12; val_offset:1320*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 1320*FLEN/8, x13, x9, x10)

inst_682:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x1f2938 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x1f2938 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f1f2938; op2val:0x3f1f2938;
   valaddr_reg:x12; val_offset:1322*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 1322*FLEN/8, x13, x9, x10)

inst_683:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x1f2938 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x1f2938 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f1f2938; op2val:0x3f1f2938;
   valaddr_reg:x12; val_offset:1324*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 1324*FLEN/8, x13, x9, x10)

inst_684:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x1f2938 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x1f2938 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f1f2938; op2val:0x3f1f2938;
   valaddr_reg:x12; val_offset:1326*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 1326*FLEN/8, x13, x9, x10)

inst_685:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x39e96f and fs2 == 0 and fe2 == 0x7b and fm2 == 0x39e96f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3db9e96f; op2val:0x3db9e96f;
   valaddr_reg:x12; val_offset:1328*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 1328*FLEN/8, x13, x9, x10)

inst_686:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x39e96f and fs2 == 0 and fe2 == 0x7b and fm2 == 0x39e96f and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3db9e96f; op2val:0x3db9e96f;
   valaddr_reg:x12; val_offset:1330*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 1330*FLEN/8, x13, x9, x10)

inst_687:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x39e96f and fs2 == 0 and fe2 == 0x7b and fm2 == 0x39e96f and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3db9e96f; op2val:0x3db9e96f;
   valaddr_reg:x12; val_offset:1332*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 1332*FLEN/8, x13, x9, x10)

inst_688:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x39e96f and fs2 == 0 and fe2 == 0x7b and fm2 == 0x39e96f and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3db9e96f; op2val:0x3db9e96f;
   valaddr_reg:x12; val_offset:1334*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 1334*FLEN/8, x13, x9, x10)

inst_689:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x39e96f and fs2 == 0 and fe2 == 0x7b and fm2 == 0x39e96f and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3db9e96f; op2val:0x3db9e96f;
   valaddr_reg:x12; val_offset:1336*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 1336*FLEN/8, x13, x9, x10)

inst_690:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x3f2083 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x3f2083 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f3f2083; op2val:0x3f3f2083;
   valaddr_reg:x12; val_offset:1338*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 1338*FLEN/8, x13, x9, x10)

inst_691:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x3f2083 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x3f2083 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f3f2083; op2val:0x3f3f2083;
   valaddr_reg:x12; val_offset:1340*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 1340*FLEN/8, x13, x9, x10)

inst_692:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x3f2083 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x3f2083 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f3f2083; op2val:0x3f3f2083;
   valaddr_reg:x12; val_offset:1342*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 1342*FLEN/8, x13, x9, x10)

inst_693:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x3f2083 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x3f2083 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f3f2083; op2val:0x3f3f2083;
   valaddr_reg:x12; val_offset:1344*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 1344*FLEN/8, x13, x9, x10)

inst_694:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x3f2083 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x3f2083 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f3f2083; op2val:0x3f3f2083;
   valaddr_reg:x12; val_offset:1346*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 1346*FLEN/8, x13, x9, x10)

inst_695:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x665def and fs2 == 0 and fe2 == 0x7e and fm2 == 0x665def and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f665def; op2val:0x3f665def;
   valaddr_reg:x12; val_offset:1348*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 1348*FLEN/8, x13, x9, x10)

inst_696:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x665def and fs2 == 0 and fe2 == 0x7e and fm2 == 0x665def and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f665def; op2val:0x3f665def;
   valaddr_reg:x12; val_offset:1350*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 1350*FLEN/8, x13, x9, x10)

inst_697:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x665def and fs2 == 0 and fe2 == 0x7e and fm2 == 0x665def and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f665def; op2val:0x3f665def;
   valaddr_reg:x12; val_offset:1352*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 1352*FLEN/8, x13, x9, x10)

inst_698:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x665def and fs2 == 0 and fe2 == 0x7e and fm2 == 0x665def and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f665def; op2val:0x3f665def;
   valaddr_reg:x12; val_offset:1354*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 1354*FLEN/8, x13, x9, x10)

inst_699:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x665def and fs2 == 0 and fe2 == 0x7e and fm2 == 0x665def and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f665def; op2val:0x3f665def;
   valaddr_reg:x12; val_offset:1356*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 1356*FLEN/8, x13, x9, x10)

inst_700:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x75db73 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x75db73 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f75db73; op2val:0x3f75db73;
   valaddr_reg:x12; val_offset:1358*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 1358*FLEN/8, x13, x9, x10)

inst_701:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x75db73 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x75db73 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f75db73; op2val:0x3f75db73;
   valaddr_reg:x12; val_offset:1360*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 1360*FLEN/8, x13, x9, x10)

inst_702:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x75db73 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x75db73 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f75db73; op2val:0x3f75db73;
   valaddr_reg:x12; val_offset:1362*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 1362*FLEN/8, x13, x9, x10)

inst_703:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x75db73 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x75db73 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f75db73; op2val:0x3f75db73;
   valaddr_reg:x12; val_offset:1364*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 1364*FLEN/8, x13, x9, x10)

inst_704:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x75db73 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x75db73 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f75db73; op2val:0x3f75db73;
   valaddr_reg:x12; val_offset:1366*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 1366*FLEN/8, x13, x9, x10)

inst_705:
// fs1 == 0 and fe1 == 0x79 and fm1 == 0x0eacc8 and fs2 == 0 and fe2 == 0x79 and fm2 == 0x0eacc8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3c8eacc8; op2val:0x3c8eacc8;
   valaddr_reg:x12; val_offset:1368*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 1368*FLEN/8, x13, x9, x10)

inst_706:
// fs1 == 0 and fe1 == 0x79 and fm1 == 0x0eacc8 and fs2 == 0 and fe2 == 0x79 and fm2 == 0x0eacc8 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3c8eacc8; op2val:0x3c8eacc8;
   valaddr_reg:x12; val_offset:1370*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 1370*FLEN/8, x13, x9, x10)

inst_707:
// fs1 == 0 and fe1 == 0x79 and fm1 == 0x0eacc8 and fs2 == 0 and fe2 == 0x79 and fm2 == 0x0eacc8 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3c8eacc8; op2val:0x3c8eacc8;
   valaddr_reg:x12; val_offset:1372*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 1372*FLEN/8, x13, x9, x10)

inst_708:
// fs1 == 0 and fe1 == 0x79 and fm1 == 0x0eacc8 and fs2 == 0 and fe2 == 0x79 and fm2 == 0x0eacc8 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3c8eacc8; op2val:0x3c8eacc8;
   valaddr_reg:x12; val_offset:1374*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 1374*FLEN/8, x13, x9, x10)

inst_709:
// fs1 == 0 and fe1 == 0x79 and fm1 == 0x0eacc8 and fs2 == 0 and fe2 == 0x79 and fm2 == 0x0eacc8 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3c8eacc8; op2val:0x3c8eacc8;
   valaddr_reg:x12; val_offset:1376*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 1376*FLEN/8, x13, x9, x10)

inst_710:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x4e8e4a and fs2 == 0 and fe2 == 0x7d and fm2 == 0x4e8e4a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ece8e4a; op2val:0x3ece8e4a;
   valaddr_reg:x12; val_offset:1378*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 1378*FLEN/8, x13, x9, x10)

inst_711:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x4e8e4a and fs2 == 0 and fe2 == 0x7d and fm2 == 0x4e8e4a and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ece8e4a; op2val:0x3ece8e4a;
   valaddr_reg:x12; val_offset:1380*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 1380*FLEN/8, x13, x9, x10)

inst_712:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x4e8e4a and fs2 == 0 and fe2 == 0x7d and fm2 == 0x4e8e4a and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ece8e4a; op2val:0x3ece8e4a;
   valaddr_reg:x12; val_offset:1382*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 1382*FLEN/8, x13, x9, x10)

inst_713:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x4e8e4a and fs2 == 0 and fe2 == 0x7d and fm2 == 0x4e8e4a and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ece8e4a; op2val:0x3ece8e4a;
   valaddr_reg:x12; val_offset:1384*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 1384*FLEN/8, x13, x9, x10)

inst_714:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x4e8e4a and fs2 == 0 and fe2 == 0x7d and fm2 == 0x4e8e4a and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ece8e4a; op2val:0x3ece8e4a;
   valaddr_reg:x12; val_offset:1386*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 1386*FLEN/8, x13, x9, x10)

inst_715:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x2fccd3 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x2fccd3 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f2fccd3; op2val:0x3f2fccd3;
   valaddr_reg:x12; val_offset:1388*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 1388*FLEN/8, x13, x9, x10)

inst_716:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x2fccd3 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x2fccd3 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f2fccd3; op2val:0x3f2fccd3;
   valaddr_reg:x12; val_offset:1390*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 1390*FLEN/8, x13, x9, x10)

inst_717:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x2fccd3 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x2fccd3 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f2fccd3; op2val:0x3f2fccd3;
   valaddr_reg:x12; val_offset:1392*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 1392*FLEN/8, x13, x9, x10)

inst_718:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x2fccd3 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x2fccd3 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f2fccd3; op2val:0x3f2fccd3;
   valaddr_reg:x12; val_offset:1394*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 1394*FLEN/8, x13, x9, x10)

inst_719:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x2fccd3 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x2fccd3 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f2fccd3; op2val:0x3f2fccd3;
   valaddr_reg:x12; val_offset:1396*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 1396*FLEN/8, x13, x9, x10)

inst_720:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x315f86 and fs2 == 0 and fe2 == 0x7b and fm2 == 0x315f86 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3db15f86; op2val:0x3db15f86;
   valaddr_reg:x12; val_offset:1398*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 1398*FLEN/8, x13, x9, x10)

inst_721:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x315f86 and fs2 == 0 and fe2 == 0x7b and fm2 == 0x315f86 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3db15f86; op2val:0x3db15f86;
   valaddr_reg:x12; val_offset:1400*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 1400*FLEN/8, x13, x9, x10)

inst_722:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x315f86 and fs2 == 0 and fe2 == 0x7b and fm2 == 0x315f86 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3db15f86; op2val:0x3db15f86;
   valaddr_reg:x12; val_offset:1402*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 1402*FLEN/8, x13, x9, x10)

inst_723:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x315f86 and fs2 == 0 and fe2 == 0x7b and fm2 == 0x315f86 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3db15f86; op2val:0x3db15f86;
   valaddr_reg:x12; val_offset:1404*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 1404*FLEN/8, x13, x9, x10)

inst_724:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x315f86 and fs2 == 0 and fe2 == 0x7b and fm2 == 0x315f86 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3db15f86; op2val:0x3db15f86;
   valaddr_reg:x12; val_offset:1406*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 1406*FLEN/8, x13, x9, x10)

inst_725:
// fs1 == 0 and fe1 == 0x79 and fm1 == 0x776d52 and fs2 == 0 and fe2 == 0x79 and fm2 == 0x776d52 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3cf76d52; op2val:0x3cf76d52;
   valaddr_reg:x12; val_offset:1408*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 1408*FLEN/8, x13, x9, x10)

inst_726:
// fs1 == 0 and fe1 == 0x79 and fm1 == 0x776d52 and fs2 == 0 and fe2 == 0x79 and fm2 == 0x776d52 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3cf76d52; op2val:0x3cf76d52;
   valaddr_reg:x12; val_offset:1410*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 1410*FLEN/8, x13, x9, x10)

inst_727:
// fs1 == 0 and fe1 == 0x79 and fm1 == 0x776d52 and fs2 == 0 and fe2 == 0x79 and fm2 == 0x776d52 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3cf76d52; op2val:0x3cf76d52;
   valaddr_reg:x12; val_offset:1412*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 1412*FLEN/8, x13, x9, x10)

inst_728:
// fs1 == 0 and fe1 == 0x79 and fm1 == 0x776d52 and fs2 == 0 and fe2 == 0x79 and fm2 == 0x776d52 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3cf76d52; op2val:0x3cf76d52;
   valaddr_reg:x12; val_offset:1414*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 1414*FLEN/8, x13, x9, x10)

inst_729:
// fs1 == 0 and fe1 == 0x79 and fm1 == 0x776d52 and fs2 == 0 and fe2 == 0x79 and fm2 == 0x776d52 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3cf76d52; op2val:0x3cf76d52;
   valaddr_reg:x12; val_offset:1416*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 1416*FLEN/8, x13, x9, x10)

inst_730:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x48e918 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x48e918 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f48e918; op2val:0x3f48e918;
   valaddr_reg:x12; val_offset:1418*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 1418*FLEN/8, x13, x9, x10)

inst_731:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x48e918 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x48e918 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f48e918; op2val:0x3f48e918;
   valaddr_reg:x12; val_offset:1420*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 1420*FLEN/8, x13, x9, x10)

inst_732:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x48e918 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x48e918 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f48e918; op2val:0x3f48e918;
   valaddr_reg:x12; val_offset:1422*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 1422*FLEN/8, x13, x9, x10)

inst_733:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x48e918 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x48e918 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f48e918; op2val:0x3f48e918;
   valaddr_reg:x12; val_offset:1424*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 1424*FLEN/8, x13, x9, x10)

inst_734:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x48e918 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x48e918 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f48e918; op2val:0x3f48e918;
   valaddr_reg:x12; val_offset:1426*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 1426*FLEN/8, x13, x9, x10)

inst_735:
// fs1 == 0 and fe1 == 0x79 and fm1 == 0x2439d8 and fs2 == 0 and fe2 == 0x79 and fm2 == 0x2439d8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ca439d8; op2val:0x3ca439d8;
   valaddr_reg:x12; val_offset:1428*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 1428*FLEN/8, x13, x9, x10)

inst_736:
// fs1 == 0 and fe1 == 0x79 and fm1 == 0x2439d8 and fs2 == 0 and fe2 == 0x79 and fm2 == 0x2439d8 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ca439d8; op2val:0x3ca439d8;
   valaddr_reg:x12; val_offset:1430*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 1430*FLEN/8, x13, x9, x10)

inst_737:
// fs1 == 0 and fe1 == 0x79 and fm1 == 0x2439d8 and fs2 == 0 and fe2 == 0x79 and fm2 == 0x2439d8 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ca439d8; op2val:0x3ca439d8;
   valaddr_reg:x12; val_offset:1432*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 1432*FLEN/8, x13, x9, x10)

inst_738:
// fs1 == 0 and fe1 == 0x79 and fm1 == 0x2439d8 and fs2 == 0 and fe2 == 0x79 and fm2 == 0x2439d8 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ca439d8; op2val:0x3ca439d8;
   valaddr_reg:x12; val_offset:1434*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 1434*FLEN/8, x13, x9, x10)

inst_739:
// fs1 == 0 and fe1 == 0x79 and fm1 == 0x2439d8 and fs2 == 0 and fe2 == 0x79 and fm2 == 0x2439d8 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ca439d8; op2val:0x3ca439d8;
   valaddr_reg:x12; val_offset:1436*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 1436*FLEN/8, x13, x9, x10)

inst_740:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x1fa595 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x1fa595 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e9fa595; op2val:0x3e9fa595;
   valaddr_reg:x12; val_offset:1438*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 1438*FLEN/8, x13, x9, x10)

inst_741:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x1fa595 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x1fa595 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e9fa595; op2val:0x3e9fa595;
   valaddr_reg:x12; val_offset:1440*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 1440*FLEN/8, x13, x9, x10)

inst_742:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x1fa595 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x1fa595 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e9fa595; op2val:0x3e9fa595;
   valaddr_reg:x12; val_offset:1442*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 1442*FLEN/8, x13, x9, x10)

inst_743:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x1fa595 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x1fa595 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e9fa595; op2val:0x3e9fa595;
   valaddr_reg:x12; val_offset:1444*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 1444*FLEN/8, x13, x9, x10)

inst_744:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x1fa595 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x1fa595 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e9fa595; op2val:0x3e9fa595;
   valaddr_reg:x12; val_offset:1446*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 1446*FLEN/8, x13, x9, x10)

inst_745:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x3dac8a and fs2 == 0 and fe2 == 0x7e and fm2 == 0x3dac8a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f3dac8a; op2val:0x3f3dac8a;
   valaddr_reg:x12; val_offset:1448*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 1448*FLEN/8, x13, x9, x10)

inst_746:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x3dac8a and fs2 == 0 and fe2 == 0x7e and fm2 == 0x3dac8a and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f3dac8a; op2val:0x3f3dac8a;
   valaddr_reg:x12; val_offset:1450*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 1450*FLEN/8, x13, x9, x10)

inst_747:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x3dac8a and fs2 == 0 and fe2 == 0x7e and fm2 == 0x3dac8a and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f3dac8a; op2val:0x3f3dac8a;
   valaddr_reg:x12; val_offset:1452*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 1452*FLEN/8, x13, x9, x10)

inst_748:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x3dac8a and fs2 == 0 and fe2 == 0x7e and fm2 == 0x3dac8a and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f3dac8a; op2val:0x3f3dac8a;
   valaddr_reg:x12; val_offset:1454*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 1454*FLEN/8, x13, x9, x10)

inst_749:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x3dac8a and fs2 == 0 and fe2 == 0x7e and fm2 == 0x3dac8a and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f3dac8a; op2val:0x3f3dac8a;
   valaddr_reg:x12; val_offset:1456*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 1456*FLEN/8, x13, x9, x10)

inst_750:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x315367 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x315367 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f315367; op2val:0x3f315367;
   valaddr_reg:x12; val_offset:1458*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 1458*FLEN/8, x13, x9, x10)

inst_751:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x315367 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x315367 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f315367; op2val:0x3f315367;
   valaddr_reg:x12; val_offset:1460*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 1460*FLEN/8, x13, x9, x10)

inst_752:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x315367 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x315367 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f315367; op2val:0x3f315367;
   valaddr_reg:x12; val_offset:1462*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 1462*FLEN/8, x13, x9, x10)

inst_753:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x315367 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x315367 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f315367; op2val:0x3f315367;
   valaddr_reg:x12; val_offset:1464*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 1464*FLEN/8, x13, x9, x10)

inst_754:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x315367 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x315367 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f315367; op2val:0x3f315367;
   valaddr_reg:x12; val_offset:1466*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 1466*FLEN/8, x13, x9, x10)

inst_755:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x6b2b6a and fs2 == 0 and fe2 == 0x7e and fm2 == 0x6b2b6a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f6b2b6a; op2val:0x3f6b2b6a;
   valaddr_reg:x12; val_offset:1468*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 1468*FLEN/8, x13, x9, x10)

inst_756:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x6b2b6a and fs2 == 0 and fe2 == 0x7e and fm2 == 0x6b2b6a and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f6b2b6a; op2val:0x3f6b2b6a;
   valaddr_reg:x12; val_offset:1470*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 1470*FLEN/8, x13, x9, x10)

inst_757:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x6b2b6a and fs2 == 0 and fe2 == 0x7e and fm2 == 0x6b2b6a and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f6b2b6a; op2val:0x3f6b2b6a;
   valaddr_reg:x12; val_offset:1472*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 1472*FLEN/8, x13, x9, x10)

inst_758:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x6b2b6a and fs2 == 0 and fe2 == 0x7e and fm2 == 0x6b2b6a and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f6b2b6a; op2val:0x3f6b2b6a;
   valaddr_reg:x12; val_offset:1474*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 1474*FLEN/8, x13, x9, x10)

inst_759:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x6b2b6a and fs2 == 0 and fe2 == 0x7e and fm2 == 0x6b2b6a and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f6b2b6a; op2val:0x3f6b2b6a;
   valaddr_reg:x12; val_offset:1476*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 1476*FLEN/8, x13, x9, x10)

inst_760:
// fs1 == 0 and fe1 == 0x79 and fm1 == 0x082d8c and fs2 == 0 and fe2 == 0x79 and fm2 == 0x082d8c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3c882d8c; op2val:0x3c882d8c;
   valaddr_reg:x12; val_offset:1478*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 1478*FLEN/8, x13, x9, x10)

inst_761:
// fs1 == 0 and fe1 == 0x79 and fm1 == 0x082d8c and fs2 == 0 and fe2 == 0x79 and fm2 == 0x082d8c and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3c882d8c; op2val:0x3c882d8c;
   valaddr_reg:x12; val_offset:1480*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 1480*FLEN/8, x13, x9, x10)

inst_762:
// fs1 == 0 and fe1 == 0x79 and fm1 == 0x082d8c and fs2 == 0 and fe2 == 0x79 and fm2 == 0x082d8c and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3c882d8c; op2val:0x3c882d8c;
   valaddr_reg:x12; val_offset:1482*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 1482*FLEN/8, x13, x9, x10)

inst_763:
// fs1 == 0 and fe1 == 0x79 and fm1 == 0x082d8c and fs2 == 0 and fe2 == 0x79 and fm2 == 0x082d8c and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3c882d8c; op2val:0x3c882d8c;
   valaddr_reg:x12; val_offset:1484*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 1484*FLEN/8, x13, x9, x10)

inst_764:
// fs1 == 0 and fe1 == 0x79 and fm1 == 0x082d8c and fs2 == 0 and fe2 == 0x79 and fm2 == 0x082d8c and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3c882d8c; op2val:0x3c882d8c;
   valaddr_reg:x12; val_offset:1486*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 1486*FLEN/8, x13, x9, x10)

inst_765:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x322bac and fs2 == 0 and fe2 == 0x7d and fm2 == 0x322bac and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3eb22bac; op2val:0x3eb22bac;
   valaddr_reg:x12; val_offset:1488*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 1488*FLEN/8, x13, x9, x10)

inst_766:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x322bac and fs2 == 0 and fe2 == 0x7d and fm2 == 0x322bac and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3eb22bac; op2val:0x3eb22bac;
   valaddr_reg:x12; val_offset:1490*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 1490*FLEN/8, x13, x9, x10)

inst_767:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x322bac and fs2 == 0 and fe2 == 0x7d and fm2 == 0x322bac and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3eb22bac; op2val:0x3eb22bac;
   valaddr_reg:x12; val_offset:1492*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 1492*FLEN/8, x13, x9, x10)

inst_768:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x322bac and fs2 == 0 and fe2 == 0x7d and fm2 == 0x322bac and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3eb22bac; op2val:0x3eb22bac;
   valaddr_reg:x12; val_offset:1494*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 1494*FLEN/8, x13, x9, x10)

inst_769:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x322bac and fs2 == 0 and fe2 == 0x7d and fm2 == 0x322bac and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3eb22bac; op2val:0x3eb22bac;
   valaddr_reg:x12; val_offset:1496*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 1496*FLEN/8, x13, x9, x10)

inst_770:
// fs1 == 0 and fe1 == 0x7a and fm1 == 0x72c05b and fs2 == 0 and fe2 == 0x7a and fm2 == 0x72c05b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3d72c05b; op2val:0x3d72c05b;
   valaddr_reg:x12; val_offset:1498*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 1498*FLEN/8, x13, x9, x10)

inst_771:
// fs1 == 0 and fe1 == 0x7a and fm1 == 0x72c05b and fs2 == 0 and fe2 == 0x7a and fm2 == 0x72c05b and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3d72c05b; op2val:0x3d72c05b;
   valaddr_reg:x12; val_offset:1500*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 1500*FLEN/8, x13, x9, x10)

inst_772:
// fs1 == 0 and fe1 == 0x7a and fm1 == 0x72c05b and fs2 == 0 and fe2 == 0x7a and fm2 == 0x72c05b and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3d72c05b; op2val:0x3d72c05b;
   valaddr_reg:x12; val_offset:1502*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 1502*FLEN/8, x13, x9, x10)

inst_773:
// fs1 == 0 and fe1 == 0x7a and fm1 == 0x72c05b and fs2 == 0 and fe2 == 0x7a and fm2 == 0x72c05b and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3d72c05b; op2val:0x3d72c05b;
   valaddr_reg:x12; val_offset:1504*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 1504*FLEN/8, x13, x9, x10)

inst_774:
// fs1 == 0 and fe1 == 0x7a and fm1 == 0x72c05b and fs2 == 0 and fe2 == 0x7a and fm2 == 0x72c05b and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3d72c05b; op2val:0x3d72c05b;
   valaddr_reg:x12; val_offset:1506*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 1506*FLEN/8, x13, x9, x10)

inst_775:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x317695 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x317695 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f317695; op2val:0x3f317695;
   valaddr_reg:x12; val_offset:1508*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 1508*FLEN/8, x13, x9, x10)

inst_776:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x317695 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x317695 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f317695; op2val:0x3f317695;
   valaddr_reg:x12; val_offset:1510*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 1510*FLEN/8, x13, x9, x10)

inst_777:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x317695 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x317695 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f317695; op2val:0x3f317695;
   valaddr_reg:x12; val_offset:1512*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 1512*FLEN/8, x13, x9, x10)

inst_778:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x317695 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x317695 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f317695; op2val:0x3f317695;
   valaddr_reg:x12; val_offset:1514*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 1514*FLEN/8, x13, x9, x10)

inst_779:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x317695 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x317695 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f317695; op2val:0x3f317695;
   valaddr_reg:x12; val_offset:1516*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 1516*FLEN/8, x13, x9, x10)

inst_780:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x2eea72 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x2eea72 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f2eea72; op2val:0x3f2eea72;
   valaddr_reg:x12; val_offset:1518*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 1518*FLEN/8, x13, x9, x10)

inst_781:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x2eea72 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x2eea72 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f2eea72; op2val:0x3f2eea72;
   valaddr_reg:x12; val_offset:1520*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 1520*FLEN/8, x13, x9, x10)

inst_782:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x2eea72 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x2eea72 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f2eea72; op2val:0x3f2eea72;
   valaddr_reg:x12; val_offset:1522*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 1522*FLEN/8, x13, x9, x10)

inst_783:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x2eea72 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x2eea72 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f2eea72; op2val:0x3f2eea72;
   valaddr_reg:x12; val_offset:1524*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 1524*FLEN/8, x13, x9, x10)

inst_784:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x2eea72 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x2eea72 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f2eea72; op2val:0x3f2eea72;
   valaddr_reg:x12; val_offset:1526*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 1526*FLEN/8, x13, x9, x10)

inst_785:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x5a1c8b and fs2 == 0 and fe2 == 0x7b and fm2 == 0x5a1c8b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3dda1c8b; op2val:0x3dda1c8b;
   valaddr_reg:x12; val_offset:1528*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 1528*FLEN/8, x13, x9, x10)

inst_786:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x5a1c8b and fs2 == 0 and fe2 == 0x7b and fm2 == 0x5a1c8b and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3dda1c8b; op2val:0x3dda1c8b;
   valaddr_reg:x12; val_offset:1530*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 1530*FLEN/8, x13, x9, x10)

inst_787:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x5a1c8b and fs2 == 0 and fe2 == 0x7b and fm2 == 0x5a1c8b and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3dda1c8b; op2val:0x3dda1c8b;
   valaddr_reg:x12; val_offset:1532*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 1532*FLEN/8, x13, x9, x10)

inst_788:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x5a1c8b and fs2 == 0 and fe2 == 0x7b and fm2 == 0x5a1c8b and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3dda1c8b; op2val:0x3dda1c8b;
   valaddr_reg:x12; val_offset:1534*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 1534*FLEN/8, x13, x9, x10)

inst_789:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x5a1c8b and fs2 == 0 and fe2 == 0x7b and fm2 == 0x5a1c8b and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3dda1c8b; op2val:0x3dda1c8b;
   valaddr_reg:x12; val_offset:1536*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 1536*FLEN/8, x13, x9, x10)

inst_790:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x2a6920 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x2a6920 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f2a6920; op2val:0x3f2a6920;
   valaddr_reg:x12; val_offset:1538*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 1538*FLEN/8, x13, x9, x10)

inst_791:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x2a6920 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x2a6920 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f2a6920; op2val:0x3f2a6920;
   valaddr_reg:x12; val_offset:1540*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 1540*FLEN/8, x13, x9, x10)
RVTEST_SIGBASE(x9,signature_x9_6)

inst_792:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x2a6920 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x2a6920 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f2a6920; op2val:0x3f2a6920;
   valaddr_reg:x12; val_offset:1542*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 1542*FLEN/8, x13, x9, x10)

inst_793:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x2a6920 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x2a6920 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f2a6920; op2val:0x3f2a6920;
   valaddr_reg:x12; val_offset:1544*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 1544*FLEN/8, x13, x9, x10)

inst_794:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x2a6920 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x2a6920 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f2a6920; op2val:0x3f2a6920;
   valaddr_reg:x12; val_offset:1546*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 1546*FLEN/8, x13, x9, x10)

inst_795:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x578f38 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x578f38 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ed78f38; op2val:0x3ed78f38;
   valaddr_reg:x12; val_offset:1548*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 1548*FLEN/8, x13, x9, x10)

inst_796:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x578f38 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x578f38 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ed78f38; op2val:0x3ed78f38;
   valaddr_reg:x12; val_offset:1550*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 1550*FLEN/8, x13, x9, x10)

inst_797:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x578f38 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x578f38 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ed78f38; op2val:0x3ed78f38;
   valaddr_reg:x12; val_offset:1552*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 1552*FLEN/8, x13, x9, x10)

inst_798:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x578f38 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x578f38 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ed78f38; op2val:0x3ed78f38;
   valaddr_reg:x12; val_offset:1554*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 1554*FLEN/8, x13, x9, x10)

inst_799:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x578f38 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x578f38 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ed78f38; op2val:0x3ed78f38;
   valaddr_reg:x12; val_offset:1556*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 1556*FLEN/8, x13, x9, x10)

inst_800:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x414141 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x414141 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f414141; op2val:0x3f414141;
   valaddr_reg:x12; val_offset:1558*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 1558*FLEN/8, x13, x9, x10)

inst_801:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x414141 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x414141 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f414141; op2val:0x3f414141;
   valaddr_reg:x12; val_offset:1560*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 1560*FLEN/8, x13, x9, x10)

inst_802:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x414141 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x414141 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f414141; op2val:0x3f414141;
   valaddr_reg:x12; val_offset:1562*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 1562*FLEN/8, x13, x9, x10)

inst_803:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x414141 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x414141 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f414141; op2val:0x3f414141;
   valaddr_reg:x12; val_offset:1564*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 1564*FLEN/8, x13, x9, x10)

inst_804:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x414141 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x414141 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f414141; op2val:0x3f414141;
   valaddr_reg:x12; val_offset:1566*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 1566*FLEN/8, x13, x9, x10)

inst_805:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x4198fd and fs2 == 0 and fe2 == 0x7e and fm2 == 0x4198fd and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f4198fd; op2val:0x3f4198fd;
   valaddr_reg:x12; val_offset:1568*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 1568*FLEN/8, x13, x9, x10)

inst_806:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x4198fd and fs2 == 0 and fe2 == 0x7e and fm2 == 0x4198fd and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f4198fd; op2val:0x3f4198fd;
   valaddr_reg:x12; val_offset:1570*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 1570*FLEN/8, x13, x9, x10)

inst_807:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x4198fd and fs2 == 0 and fe2 == 0x7e and fm2 == 0x4198fd and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f4198fd; op2val:0x3f4198fd;
   valaddr_reg:x12; val_offset:1572*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 1572*FLEN/8, x13, x9, x10)

inst_808:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x4198fd and fs2 == 0 and fe2 == 0x7e and fm2 == 0x4198fd and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f4198fd; op2val:0x3f4198fd;
   valaddr_reg:x12; val_offset:1574*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 1574*FLEN/8, x13, x9, x10)

inst_809:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x4198fd and fs2 == 0 and fe2 == 0x7e and fm2 == 0x4198fd and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f4198fd; op2val:0x3f4198fd;
   valaddr_reg:x12; val_offset:1576*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 1576*FLEN/8, x13, x9, x10)

inst_810:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x65c87d and fs2 == 0 and fe2 == 0x7d and fm2 == 0x65c87d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ee5c87d; op2val:0x3ee5c87d;
   valaddr_reg:x12; val_offset:1578*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 1578*FLEN/8, x13, x9, x10)

inst_811:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x65c87d and fs2 == 0 and fe2 == 0x7d and fm2 == 0x65c87d and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ee5c87d; op2val:0x3ee5c87d;
   valaddr_reg:x12; val_offset:1580*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 1580*FLEN/8, x13, x9, x10)

inst_812:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x65c87d and fs2 == 0 and fe2 == 0x7d and fm2 == 0x65c87d and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ee5c87d; op2val:0x3ee5c87d;
   valaddr_reg:x12; val_offset:1582*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 1582*FLEN/8, x13, x9, x10)

inst_813:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x65c87d and fs2 == 0 and fe2 == 0x7d and fm2 == 0x65c87d and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ee5c87d; op2val:0x3ee5c87d;
   valaddr_reg:x12; val_offset:1584*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 1584*FLEN/8, x13, x9, x10)

inst_814:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x65c87d and fs2 == 0 and fe2 == 0x7d and fm2 == 0x65c87d and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ee5c87d; op2val:0x3ee5c87d;
   valaddr_reg:x12; val_offset:1586*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 1586*FLEN/8, x13, x9, x10)

inst_815:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x6cc44b and fs2 == 0 and fe2 == 0x7e and fm2 == 0x6cc44b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f6cc44b; op2val:0x3f6cc44b;
   valaddr_reg:x12; val_offset:1588*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 1588*FLEN/8, x13, x9, x10)

inst_816:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x6cc44b and fs2 == 0 and fe2 == 0x7e and fm2 == 0x6cc44b and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f6cc44b; op2val:0x3f6cc44b;
   valaddr_reg:x12; val_offset:1590*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 1590*FLEN/8, x13, x9, x10)

inst_817:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x6cc44b and fs2 == 0 and fe2 == 0x7e and fm2 == 0x6cc44b and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f6cc44b; op2val:0x3f6cc44b;
   valaddr_reg:x12; val_offset:1592*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 1592*FLEN/8, x13, x9, x10)

inst_818:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x6cc44b and fs2 == 0 and fe2 == 0x7e and fm2 == 0x6cc44b and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f6cc44b; op2val:0x3f6cc44b;
   valaddr_reg:x12; val_offset:1594*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 1594*FLEN/8, x13, x9, x10)

inst_819:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x6cc44b and fs2 == 0 and fe2 == 0x7e and fm2 == 0x6cc44b and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f6cc44b; op2val:0x3f6cc44b;
   valaddr_reg:x12; val_offset:1596*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 1596*FLEN/8, x13, x9, x10)

inst_820:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x358cb8 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x358cb8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f358cb8; op2val:0x3f358cb8;
   valaddr_reg:x12; val_offset:1598*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 1598*FLEN/8, x13, x9, x10)

inst_821:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x358cb8 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x358cb8 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f358cb8; op2val:0x3f358cb8;
   valaddr_reg:x12; val_offset:1600*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 1600*FLEN/8, x13, x9, x10)

inst_822:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x358cb8 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x358cb8 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f358cb8; op2val:0x3f358cb8;
   valaddr_reg:x12; val_offset:1602*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 1602*FLEN/8, x13, x9, x10)

inst_823:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x358cb8 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x358cb8 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f358cb8; op2val:0x3f358cb8;
   valaddr_reg:x12; val_offset:1604*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 1604*FLEN/8, x13, x9, x10)

inst_824:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x358cb8 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x358cb8 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f358cb8; op2val:0x3f358cb8;
   valaddr_reg:x12; val_offset:1606*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 1606*FLEN/8, x13, x9, x10)

inst_825:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x01b9a4 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x01b9a4 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f01b9a4; op2val:0x3f01b9a4;
   valaddr_reg:x12; val_offset:1608*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 1608*FLEN/8, x13, x9, x10)

inst_826:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x01b9a4 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x01b9a4 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f01b9a4; op2val:0x3f01b9a4;
   valaddr_reg:x12; val_offset:1610*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 1610*FLEN/8, x13, x9, x10)

inst_827:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x01b9a4 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x01b9a4 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f01b9a4; op2val:0x3f01b9a4;
   valaddr_reg:x12; val_offset:1612*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 1612*FLEN/8, x13, x9, x10)

inst_828:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x01b9a4 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x01b9a4 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f01b9a4; op2val:0x3f01b9a4;
   valaddr_reg:x12; val_offset:1614*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 1614*FLEN/8, x13, x9, x10)

inst_829:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x01b9a4 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x01b9a4 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f01b9a4; op2val:0x3f01b9a4;
   valaddr_reg:x12; val_offset:1616*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 1616*FLEN/8, x13, x9, x10)

inst_830:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x5887af and fs2 == 0 and fe2 == 0x7e and fm2 == 0x5887af and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f5887af; op2val:0x3f5887af;
   valaddr_reg:x12; val_offset:1618*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 1618*FLEN/8, x13, x9, x10)

inst_831:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x5887af and fs2 == 0 and fe2 == 0x7e and fm2 == 0x5887af and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f5887af; op2val:0x3f5887af;
   valaddr_reg:x12; val_offset:1620*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 1620*FLEN/8, x13, x9, x10)

inst_832:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x5887af and fs2 == 0 and fe2 == 0x7e and fm2 == 0x5887af and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f5887af; op2val:0x3f5887af;
   valaddr_reg:x12; val_offset:1622*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 1622*FLEN/8, x13, x9, x10)

inst_833:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x5887af and fs2 == 0 and fe2 == 0x7e and fm2 == 0x5887af and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f5887af; op2val:0x3f5887af;
   valaddr_reg:x12; val_offset:1624*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 1624*FLEN/8, x13, x9, x10)

inst_834:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x5887af and fs2 == 0 and fe2 == 0x7e and fm2 == 0x5887af and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f5887af; op2val:0x3f5887af;
   valaddr_reg:x12; val_offset:1626*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 1626*FLEN/8, x13, x9, x10)

inst_835:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x51efd8 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x51efd8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e51efd8; op2val:0x3e51efd8;
   valaddr_reg:x12; val_offset:1628*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 1628*FLEN/8, x13, x9, x10)

inst_836:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x51efd8 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x51efd8 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e51efd8; op2val:0x3e51efd8;
   valaddr_reg:x12; val_offset:1630*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 1630*FLEN/8, x13, x9, x10)

inst_837:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x51efd8 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x51efd8 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e51efd8; op2val:0x3e51efd8;
   valaddr_reg:x12; val_offset:1632*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 1632*FLEN/8, x13, x9, x10)

inst_838:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x51efd8 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x51efd8 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e51efd8; op2val:0x3e51efd8;
   valaddr_reg:x12; val_offset:1634*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 1634*FLEN/8, x13, x9, x10)

inst_839:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x51efd8 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x51efd8 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e51efd8; op2val:0x3e51efd8;
   valaddr_reg:x12; val_offset:1636*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 1636*FLEN/8, x13, x9, x10)

inst_840:
// fs1 == 0 and fe1 == 0x7a and fm1 == 0x4ff65a and fs2 == 0 and fe2 == 0x7a and fm2 == 0x4ff65a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3d4ff65a; op2val:0x3d4ff65a;
   valaddr_reg:x12; val_offset:1638*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 1638*FLEN/8, x13, x9, x10)

inst_841:
// fs1 == 0 and fe1 == 0x7a and fm1 == 0x4ff65a and fs2 == 0 and fe2 == 0x7a and fm2 == 0x4ff65a and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3d4ff65a; op2val:0x3d4ff65a;
   valaddr_reg:x12; val_offset:1640*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 1640*FLEN/8, x13, x9, x10)

inst_842:
// fs1 == 0 and fe1 == 0x7a and fm1 == 0x4ff65a and fs2 == 0 and fe2 == 0x7a and fm2 == 0x4ff65a and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3d4ff65a; op2val:0x3d4ff65a;
   valaddr_reg:x12; val_offset:1642*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 1642*FLEN/8, x13, x9, x10)

inst_843:
// fs1 == 0 and fe1 == 0x7a and fm1 == 0x4ff65a and fs2 == 0 and fe2 == 0x7a and fm2 == 0x4ff65a and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3d4ff65a; op2val:0x3d4ff65a;
   valaddr_reg:x12; val_offset:1644*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 1644*FLEN/8, x13, x9, x10)

inst_844:
// fs1 == 0 and fe1 == 0x7a and fm1 == 0x4ff65a and fs2 == 0 and fe2 == 0x7a and fm2 == 0x4ff65a and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3d4ff65a; op2val:0x3d4ff65a;
   valaddr_reg:x12; val_offset:1646*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 1646*FLEN/8, x13, x9, x10)

inst_845:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x652978 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x652978 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e652978; op2val:0x3e652978;
   valaddr_reg:x12; val_offset:1648*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 1648*FLEN/8, x13, x9, x10)

inst_846:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x652978 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x652978 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e652978; op2val:0x3e652978;
   valaddr_reg:x12; val_offset:1650*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 1650*FLEN/8, x13, x9, x10)

inst_847:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x652978 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x652978 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e652978; op2val:0x3e652978;
   valaddr_reg:x12; val_offset:1652*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 1652*FLEN/8, x13, x9, x10)

inst_848:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x652978 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x652978 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e652978; op2val:0x3e652978;
   valaddr_reg:x12; val_offset:1654*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 1654*FLEN/8, x13, x9, x10)

inst_849:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x652978 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x652978 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e652978; op2val:0x3e652978;
   valaddr_reg:x12; val_offset:1656*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 1656*FLEN/8, x13, x9, x10)

inst_850:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x36bb8f and fs2 == 0 and fe2 == 0x7c and fm2 == 0x36bb8f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e36bb8f; op2val:0x3e36bb8f;
   valaddr_reg:x12; val_offset:1658*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 1658*FLEN/8, x13, x9, x10)

inst_851:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x36bb8f and fs2 == 0 and fe2 == 0x7c and fm2 == 0x36bb8f and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e36bb8f; op2val:0x3e36bb8f;
   valaddr_reg:x12; val_offset:1660*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 1660*FLEN/8, x13, x9, x10)

inst_852:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x36bb8f and fs2 == 0 and fe2 == 0x7c and fm2 == 0x36bb8f and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e36bb8f; op2val:0x3e36bb8f;
   valaddr_reg:x12; val_offset:1662*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 1662*FLEN/8, x13, x9, x10)

inst_853:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x36bb8f and fs2 == 0 and fe2 == 0x7c and fm2 == 0x36bb8f and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e36bb8f; op2val:0x3e36bb8f;
   valaddr_reg:x12; val_offset:1664*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 1664*FLEN/8, x13, x9, x10)

inst_854:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x36bb8f and fs2 == 0 and fe2 == 0x7c and fm2 == 0x36bb8f and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e36bb8f; op2val:0x3e36bb8f;
   valaddr_reg:x12; val_offset:1666*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 1666*FLEN/8, x13, x9, x10)

inst_855:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x64a3a9 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x64a3a9 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f64a3a9; op2val:0x3f64a3a9;
   valaddr_reg:x12; val_offset:1668*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 1668*FLEN/8, x13, x9, x10)

inst_856:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x64a3a9 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x64a3a9 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f64a3a9; op2val:0x3f64a3a9;
   valaddr_reg:x12; val_offset:1670*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 1670*FLEN/8, x13, x9, x10)

inst_857:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x64a3a9 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x64a3a9 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f64a3a9; op2val:0x3f64a3a9;
   valaddr_reg:x12; val_offset:1672*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 1672*FLEN/8, x13, x9, x10)

inst_858:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x64a3a9 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x64a3a9 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f64a3a9; op2val:0x3f64a3a9;
   valaddr_reg:x12; val_offset:1674*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 1674*FLEN/8, x13, x9, x10)

inst_859:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x64a3a9 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x64a3a9 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f64a3a9; op2val:0x3f64a3a9;
   valaddr_reg:x12; val_offset:1676*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 1676*FLEN/8, x13, x9, x10)

inst_860:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x252830 and fs2 == 0 and fe2 == 0x7b and fm2 == 0x252830 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3da52830; op2val:0x3da52830;
   valaddr_reg:x12; val_offset:1678*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 1678*FLEN/8, x13, x9, x10)

inst_861:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x252830 and fs2 == 0 and fe2 == 0x7b and fm2 == 0x252830 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3da52830; op2val:0x3da52830;
   valaddr_reg:x12; val_offset:1680*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 1680*FLEN/8, x13, x9, x10)

inst_862:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x252830 and fs2 == 0 and fe2 == 0x7b and fm2 == 0x252830 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3da52830; op2val:0x3da52830;
   valaddr_reg:x12; val_offset:1682*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 1682*FLEN/8, x13, x9, x10)

inst_863:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x252830 and fs2 == 0 and fe2 == 0x7b and fm2 == 0x252830 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3da52830; op2val:0x3da52830;
   valaddr_reg:x12; val_offset:1684*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 1684*FLEN/8, x13, x9, x10)

inst_864:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x252830 and fs2 == 0 and fe2 == 0x7b and fm2 == 0x252830 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3da52830; op2val:0x3da52830;
   valaddr_reg:x12; val_offset:1686*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 1686*FLEN/8, x13, x9, x10)

inst_865:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x5994fc and fs2 == 0 and fe2 == 0x7b and fm2 == 0x5994fc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3dd994fc; op2val:0x3dd994fc;
   valaddr_reg:x12; val_offset:1688*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 1688*FLEN/8, x13, x9, x10)

inst_866:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x5994fc and fs2 == 0 and fe2 == 0x7b and fm2 == 0x5994fc and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3dd994fc; op2val:0x3dd994fc;
   valaddr_reg:x12; val_offset:1690*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 1690*FLEN/8, x13, x9, x10)

inst_867:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x5994fc and fs2 == 0 and fe2 == 0x7b and fm2 == 0x5994fc and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3dd994fc; op2val:0x3dd994fc;
   valaddr_reg:x12; val_offset:1692*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 1692*FLEN/8, x13, x9, x10)

inst_868:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x5994fc and fs2 == 0 and fe2 == 0x7b and fm2 == 0x5994fc and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3dd994fc; op2val:0x3dd994fc;
   valaddr_reg:x12; val_offset:1694*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 1694*FLEN/8, x13, x9, x10)

inst_869:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x5994fc and fs2 == 0 and fe2 == 0x7b and fm2 == 0x5994fc and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3dd994fc; op2val:0x3dd994fc;
   valaddr_reg:x12; val_offset:1696*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 1696*FLEN/8, x13, x9, x10)

inst_870:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x375562 and fs2 == 0 and fe2 == 0x7b and fm2 == 0x375562 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3db75562; op2val:0x3db75562;
   valaddr_reg:x12; val_offset:1698*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 1698*FLEN/8, x13, x9, x10)

inst_871:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x375562 and fs2 == 0 and fe2 == 0x7b and fm2 == 0x375562 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3db75562; op2val:0x3db75562;
   valaddr_reg:x12; val_offset:1700*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 1700*FLEN/8, x13, x9, x10)

inst_872:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x375562 and fs2 == 0 and fe2 == 0x7b and fm2 == 0x375562 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3db75562; op2val:0x3db75562;
   valaddr_reg:x12; val_offset:1702*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 1702*FLEN/8, x13, x9, x10)

inst_873:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x375562 and fs2 == 0 and fe2 == 0x7b and fm2 == 0x375562 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3db75562; op2val:0x3db75562;
   valaddr_reg:x12; val_offset:1704*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 1704*FLEN/8, x13, x9, x10)

inst_874:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x375562 and fs2 == 0 and fe2 == 0x7b and fm2 == 0x375562 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3db75562; op2val:0x3db75562;
   valaddr_reg:x12; val_offset:1706*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 1706*FLEN/8, x13, x9, x10)

inst_875:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x2f161f and fs2 == 0 and fe2 == 0x7e and fm2 == 0x2f161f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f2f161f; op2val:0x3f2f161f;
   valaddr_reg:x12; val_offset:1708*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 1708*FLEN/8, x13, x9, x10)

inst_876:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x2f161f and fs2 == 0 and fe2 == 0x7e and fm2 == 0x2f161f and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f2f161f; op2val:0x3f2f161f;
   valaddr_reg:x12; val_offset:1710*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 1710*FLEN/8, x13, x9, x10)

inst_877:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x2f161f and fs2 == 0 and fe2 == 0x7e and fm2 == 0x2f161f and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f2f161f; op2val:0x3f2f161f;
   valaddr_reg:x12; val_offset:1712*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 1712*FLEN/8, x13, x9, x10)

inst_878:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x2f161f and fs2 == 0 and fe2 == 0x7e and fm2 == 0x2f161f and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f2f161f; op2val:0x3f2f161f;
   valaddr_reg:x12; val_offset:1714*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 1714*FLEN/8, x13, x9, x10)

inst_879:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x2f161f and fs2 == 0 and fe2 == 0x7e and fm2 == 0x2f161f and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f2f161f; op2val:0x3f2f161f;
   valaddr_reg:x12; val_offset:1716*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 1716*FLEN/8, x13, x9, x10)

inst_880:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x48d9e6 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x48d9e6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e48d9e6; op2val:0x3e48d9e6;
   valaddr_reg:x12; val_offset:1718*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 1718*FLEN/8, x13, x9, x10)

inst_881:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x48d9e6 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x48d9e6 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e48d9e6; op2val:0x3e48d9e6;
   valaddr_reg:x12; val_offset:1720*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 1720*FLEN/8, x13, x9, x10)

inst_882:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x48d9e6 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x48d9e6 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e48d9e6; op2val:0x3e48d9e6;
   valaddr_reg:x12; val_offset:1722*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 1722*FLEN/8, x13, x9, x10)

inst_883:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x48d9e6 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x48d9e6 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e48d9e6; op2val:0x3e48d9e6;
   valaddr_reg:x12; val_offset:1724*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 1724*FLEN/8, x13, x9, x10)

inst_884:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x48d9e6 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x48d9e6 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e48d9e6; op2val:0x3e48d9e6;
   valaddr_reg:x12; val_offset:1726*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 1726*FLEN/8, x13, x9, x10)

inst_885:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x231aaf and fs2 == 0 and fe2 == 0x7c and fm2 == 0x231aaf and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e231aaf; op2val:0x3e231aaf;
   valaddr_reg:x12; val_offset:1728*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 1728*FLEN/8, x13, x9, x10)

inst_886:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x231aaf and fs2 == 0 and fe2 == 0x7c and fm2 == 0x231aaf and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e231aaf; op2val:0x3e231aaf;
   valaddr_reg:x12; val_offset:1730*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 1730*FLEN/8, x13, x9, x10)

inst_887:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x231aaf and fs2 == 0 and fe2 == 0x7c and fm2 == 0x231aaf and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e231aaf; op2val:0x3e231aaf;
   valaddr_reg:x12; val_offset:1732*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 1732*FLEN/8, x13, x9, x10)

inst_888:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x231aaf and fs2 == 0 and fe2 == 0x7c and fm2 == 0x231aaf and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e231aaf; op2val:0x3e231aaf;
   valaddr_reg:x12; val_offset:1734*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 1734*FLEN/8, x13, x9, x10)

inst_889:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x231aaf and fs2 == 0 and fe2 == 0x7c and fm2 == 0x231aaf and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e231aaf; op2val:0x3e231aaf;
   valaddr_reg:x12; val_offset:1736*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 1736*FLEN/8, x13, x9, x10)

inst_890:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x1eed61 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x1eed61 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e9eed61; op2val:0x3e9eed61;
   valaddr_reg:x12; val_offset:1738*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 1738*FLEN/8, x13, x9, x10)

inst_891:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x1eed61 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x1eed61 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e9eed61; op2val:0x3e9eed61;
   valaddr_reg:x12; val_offset:1740*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 1740*FLEN/8, x13, x9, x10)

inst_892:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x1eed61 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x1eed61 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e9eed61; op2val:0x3e9eed61;
   valaddr_reg:x12; val_offset:1742*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 1742*FLEN/8, x13, x9, x10)

inst_893:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x1eed61 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x1eed61 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e9eed61; op2val:0x3e9eed61;
   valaddr_reg:x12; val_offset:1744*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 1744*FLEN/8, x13, x9, x10)

inst_894:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x1eed61 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x1eed61 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e9eed61; op2val:0x3e9eed61;
   valaddr_reg:x12; val_offset:1746*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 1746*FLEN/8, x13, x9, x10)

inst_895:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x113ea2 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x113ea2 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f113ea2; op2val:0x3f113ea2;
   valaddr_reg:x12; val_offset:1748*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 1748*FLEN/8, x13, x9, x10)

inst_896:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x113ea2 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x113ea2 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f113ea2; op2val:0x3f113ea2;
   valaddr_reg:x12; val_offset:1750*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 1750*FLEN/8, x13, x9, x10)

inst_897:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x113ea2 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x113ea2 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f113ea2; op2val:0x3f113ea2;
   valaddr_reg:x12; val_offset:1752*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 1752*FLEN/8, x13, x9, x10)

inst_898:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x113ea2 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x113ea2 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f113ea2; op2val:0x3f113ea2;
   valaddr_reg:x12; val_offset:1754*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 1754*FLEN/8, x13, x9, x10)

inst_899:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x113ea2 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x113ea2 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f113ea2; op2val:0x3f113ea2;
   valaddr_reg:x12; val_offset:1756*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 1756*FLEN/8, x13, x9, x10)

inst_900:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x120287 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x120287 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e920287; op2val:0x3e920287;
   valaddr_reg:x12; val_offset:1758*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 1758*FLEN/8, x13, x9, x10)

inst_901:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x120287 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x120287 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e920287; op2val:0x3e920287;
   valaddr_reg:x12; val_offset:1760*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 1760*FLEN/8, x13, x9, x10)

inst_902:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x120287 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x120287 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e920287; op2val:0x3e920287;
   valaddr_reg:x12; val_offset:1762*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 1762*FLEN/8, x13, x9, x10)

inst_903:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x120287 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x120287 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e920287; op2val:0x3e920287;
   valaddr_reg:x12; val_offset:1764*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 1764*FLEN/8, x13, x9, x10)

inst_904:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x120287 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x120287 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e920287; op2val:0x3e920287;
   valaddr_reg:x12; val_offset:1766*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 1766*FLEN/8, x13, x9, x10)

inst_905:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x3f567f and fs2 == 0 and fe2 == 0x7e and fm2 == 0x3f567f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f3f567f; op2val:0x3f3f567f;
   valaddr_reg:x12; val_offset:1768*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 1768*FLEN/8, x13, x9, x10)

inst_906:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x3f567f and fs2 == 0 and fe2 == 0x7e and fm2 == 0x3f567f and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f3f567f; op2val:0x3f3f567f;
   valaddr_reg:x12; val_offset:1770*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 1770*FLEN/8, x13, x9, x10)

inst_907:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x3f567f and fs2 == 0 and fe2 == 0x7e and fm2 == 0x3f567f and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f3f567f; op2val:0x3f3f567f;
   valaddr_reg:x12; val_offset:1772*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 1772*FLEN/8, x13, x9, x10)

inst_908:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x3f567f and fs2 == 0 and fe2 == 0x7e and fm2 == 0x3f567f and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f3f567f; op2val:0x3f3f567f;
   valaddr_reg:x12; val_offset:1774*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 1774*FLEN/8, x13, x9, x10)

inst_909:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x3f567f and fs2 == 0 and fe2 == 0x7e and fm2 == 0x3f567f and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f3f567f; op2val:0x3f3f567f;
   valaddr_reg:x12; val_offset:1776*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 1776*FLEN/8, x13, x9, x10)

inst_910:
// fs1 == 0 and fe1 == 0x7a and fm1 == 0x15f8af and fs2 == 0 and fe2 == 0x7a and fm2 == 0x15f8af and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3d15f8af; op2val:0x3d15f8af;
   valaddr_reg:x12; val_offset:1778*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 1778*FLEN/8, x13, x9, x10)

inst_911:
// fs1 == 0 and fe1 == 0x7a and fm1 == 0x15f8af and fs2 == 0 and fe2 == 0x7a and fm2 == 0x15f8af and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3d15f8af; op2val:0x3d15f8af;
   valaddr_reg:x12; val_offset:1780*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 1780*FLEN/8, x13, x9, x10)

inst_912:
// fs1 == 0 and fe1 == 0x7a and fm1 == 0x15f8af and fs2 == 0 and fe2 == 0x7a and fm2 == 0x15f8af and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3d15f8af; op2val:0x3d15f8af;
   valaddr_reg:x12; val_offset:1782*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 1782*FLEN/8, x13, x9, x10)

inst_913:
// fs1 == 0 and fe1 == 0x7a and fm1 == 0x15f8af and fs2 == 0 and fe2 == 0x7a and fm2 == 0x15f8af and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3d15f8af; op2val:0x3d15f8af;
   valaddr_reg:x12; val_offset:1784*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 1784*FLEN/8, x13, x9, x10)

inst_914:
// fs1 == 0 and fe1 == 0x7a and fm1 == 0x15f8af and fs2 == 0 and fe2 == 0x7a and fm2 == 0x15f8af and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3d15f8af; op2val:0x3d15f8af;
   valaddr_reg:x12; val_offset:1786*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 1786*FLEN/8, x13, x9, x10)

inst_915:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x66c617 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x66c617 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ee6c617; op2val:0x3ee6c617;
   valaddr_reg:x12; val_offset:1788*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 1788*FLEN/8, x13, x9, x10)

inst_916:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x66c617 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x66c617 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ee6c617; op2val:0x3ee6c617;
   valaddr_reg:x12; val_offset:1790*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 1790*FLEN/8, x13, x9, x10)

inst_917:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x66c617 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x66c617 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ee6c617; op2val:0x3ee6c617;
   valaddr_reg:x12; val_offset:1792*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 1792*FLEN/8, x13, x9, x10)

inst_918:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x66c617 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x66c617 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ee6c617; op2val:0x3ee6c617;
   valaddr_reg:x12; val_offset:1794*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 1794*FLEN/8, x13, x9, x10)

inst_919:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x66c617 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x66c617 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ee6c617; op2val:0x3ee6c617;
   valaddr_reg:x12; val_offset:1796*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 1796*FLEN/8, x13, x9, x10)
RVTEST_SIGBASE(x9,signature_x9_7)

inst_920:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x1846bc and fs2 == 0 and fe2 == 0x7c and fm2 == 0x1846bc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e1846bc; op2val:0x3e1846bc;
   valaddr_reg:x12; val_offset:1798*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 1798*FLEN/8, x13, x9, x10)

inst_921:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x1846bc and fs2 == 0 and fe2 == 0x7c and fm2 == 0x1846bc and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e1846bc; op2val:0x3e1846bc;
   valaddr_reg:x12; val_offset:1800*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 1800*FLEN/8, x13, x9, x10)

inst_922:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x1846bc and fs2 == 0 and fe2 == 0x7c and fm2 == 0x1846bc and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e1846bc; op2val:0x3e1846bc;
   valaddr_reg:x12; val_offset:1802*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 1802*FLEN/8, x13, x9, x10)

inst_923:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x1846bc and fs2 == 0 and fe2 == 0x7c and fm2 == 0x1846bc and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e1846bc; op2val:0x3e1846bc;
   valaddr_reg:x12; val_offset:1804*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 1804*FLEN/8, x13, x9, x10)

inst_924:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x1846bc and fs2 == 0 and fe2 == 0x7c and fm2 == 0x1846bc and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e1846bc; op2val:0x3e1846bc;
   valaddr_reg:x12; val_offset:1806*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 1806*FLEN/8, x13, x9, x10)

inst_925:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x1ab2b8 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x1ab2b8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f1ab2b8; op2val:0x3f1ab2b8;
   valaddr_reg:x12; val_offset:1808*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 1808*FLEN/8, x13, x9, x10)

inst_926:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x1ab2b8 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x1ab2b8 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f1ab2b8; op2val:0x3f1ab2b8;
   valaddr_reg:x12; val_offset:1810*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 1810*FLEN/8, x13, x9, x10)

inst_927:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x1ab2b8 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x1ab2b8 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f1ab2b8; op2val:0x3f1ab2b8;
   valaddr_reg:x12; val_offset:1812*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 1812*FLEN/8, x13, x9, x10)

inst_928:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x1ab2b8 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x1ab2b8 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f1ab2b8; op2val:0x3f1ab2b8;
   valaddr_reg:x12; val_offset:1814*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 1814*FLEN/8, x13, x9, x10)

inst_929:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x1ab2b8 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x1ab2b8 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f1ab2b8; op2val:0x3f1ab2b8;
   valaddr_reg:x12; val_offset:1816*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 1816*FLEN/8, x13, x9, x10)

inst_930:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x3df5bc and fs2 == 0 and fe2 == 0x7e and fm2 == 0x3df5bc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f3df5bc; op2val:0x3f3df5bc;
   valaddr_reg:x12; val_offset:1818*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 1818*FLEN/8, x13, x9, x10)

inst_931:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x3df5bc and fs2 == 0 and fe2 == 0x7e and fm2 == 0x3df5bc and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f3df5bc; op2val:0x3f3df5bc;
   valaddr_reg:x12; val_offset:1820*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 1820*FLEN/8, x13, x9, x10)

inst_932:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x3df5bc and fs2 == 0 and fe2 == 0x7e and fm2 == 0x3df5bc and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f3df5bc; op2val:0x3f3df5bc;
   valaddr_reg:x12; val_offset:1822*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 1822*FLEN/8, x13, x9, x10)

inst_933:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x3df5bc and fs2 == 0 and fe2 == 0x7e and fm2 == 0x3df5bc and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f3df5bc; op2val:0x3f3df5bc;
   valaddr_reg:x12; val_offset:1824*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 1824*FLEN/8, x13, x9, x10)

inst_934:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x3df5bc and fs2 == 0 and fe2 == 0x7e and fm2 == 0x3df5bc and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f3df5bc; op2val:0x3f3df5bc;
   valaddr_reg:x12; val_offset:1826*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 1826*FLEN/8, x13, x9, x10)

inst_935:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x3505f7 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x3505f7 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3eb505f7; op2val:0x3eb505f7;
   valaddr_reg:x12; val_offset:1828*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 1828*FLEN/8, x13, x9, x10)

inst_936:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x3505f7 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x3505f7 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3eb505f7; op2val:0x3eb505f7;
   valaddr_reg:x12; val_offset:1830*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 1830*FLEN/8, x13, x9, x10)

inst_937:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x3505f7 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x3505f7 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3eb505f7; op2val:0x3eb505f7;
   valaddr_reg:x12; val_offset:1832*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 1832*FLEN/8, x13, x9, x10)

inst_938:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x3505f7 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x3505f7 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3eb505f7; op2val:0x3eb505f7;
   valaddr_reg:x12; val_offset:1834*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 1834*FLEN/8, x13, x9, x10)

inst_939:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x3505f7 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x3505f7 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3eb505f7; op2val:0x3eb505f7;
   valaddr_reg:x12; val_offset:1836*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 1836*FLEN/8, x13, x9, x10)

inst_940:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x5bd9d7 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x5bd9d7 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3edbd9d7; op2val:0x3edbd9d7;
   valaddr_reg:x12; val_offset:1838*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 1838*FLEN/8, x13, x9, x10)

inst_941:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x5bd9d7 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x5bd9d7 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3edbd9d7; op2val:0x3edbd9d7;
   valaddr_reg:x12; val_offset:1840*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 1840*FLEN/8, x13, x9, x10)

inst_942:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x5bd9d7 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x5bd9d7 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3edbd9d7; op2val:0x3edbd9d7;
   valaddr_reg:x12; val_offset:1842*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 1842*FLEN/8, x13, x9, x10)

inst_943:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x5bd9d7 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x5bd9d7 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3edbd9d7; op2val:0x3edbd9d7;
   valaddr_reg:x12; val_offset:1844*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 1844*FLEN/8, x13, x9, x10)

inst_944:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x5bd9d7 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x5bd9d7 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3edbd9d7; op2val:0x3edbd9d7;
   valaddr_reg:x12; val_offset:1846*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 1846*FLEN/8, x13, x9, x10)

inst_945:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x25226d and fs2 == 0 and fe2 == 0x7e and fm2 == 0x25226d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f25226d; op2val:0x3f25226d;
   valaddr_reg:x12; val_offset:1848*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 1848*FLEN/8, x13, x9, x10)

inst_946:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x25226d and fs2 == 0 and fe2 == 0x7e and fm2 == 0x25226d and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f25226d; op2val:0x3f25226d;
   valaddr_reg:x12; val_offset:1850*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 1850*FLEN/8, x13, x9, x10)

inst_947:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x25226d and fs2 == 0 and fe2 == 0x7e and fm2 == 0x25226d and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f25226d; op2val:0x3f25226d;
   valaddr_reg:x12; val_offset:1852*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 1852*FLEN/8, x13, x9, x10)

inst_948:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x25226d and fs2 == 0 and fe2 == 0x7e and fm2 == 0x25226d and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f25226d; op2val:0x3f25226d;
   valaddr_reg:x12; val_offset:1854*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 1854*FLEN/8, x13, x9, x10)

inst_949:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x25226d and fs2 == 0 and fe2 == 0x7e and fm2 == 0x25226d and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f25226d; op2val:0x3f25226d;
   valaddr_reg:x12; val_offset:1856*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 1856*FLEN/8, x13, x9, x10)

inst_950:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x5ff78b and fs2 == 0 and fe2 == 0x7e and fm2 == 0x5ff78b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f5ff78b; op2val:0x3f5ff78b;
   valaddr_reg:x12; val_offset:1858*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 1858*FLEN/8, x13, x9, x10)

inst_951:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x5ff78b and fs2 == 0 and fe2 == 0x7e and fm2 == 0x5ff78b and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f5ff78b; op2val:0x3f5ff78b;
   valaddr_reg:x12; val_offset:1860*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 1860*FLEN/8, x13, x9, x10)

inst_952:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x5ff78b and fs2 == 0 and fe2 == 0x7e and fm2 == 0x5ff78b and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f5ff78b; op2val:0x3f5ff78b;
   valaddr_reg:x12; val_offset:1862*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 1862*FLEN/8, x13, x9, x10)

inst_953:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x5ff78b and fs2 == 0 and fe2 == 0x7e and fm2 == 0x5ff78b and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f5ff78b; op2val:0x3f5ff78b;
   valaddr_reg:x12; val_offset:1864*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 1864*FLEN/8, x13, x9, x10)

inst_954:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x5ff78b and fs2 == 0 and fe2 == 0x7e and fm2 == 0x5ff78b and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f5ff78b; op2val:0x3f5ff78b;
   valaddr_reg:x12; val_offset:1866*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 1866*FLEN/8, x13, x9, x10)

inst_955:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x2f2bd3 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x2f2bd3 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e2f2bd3; op2val:0x3e2f2bd3;
   valaddr_reg:x12; val_offset:1868*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 1868*FLEN/8, x13, x9, x10)

inst_956:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x2f2bd3 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x2f2bd3 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e2f2bd3; op2val:0x3e2f2bd3;
   valaddr_reg:x12; val_offset:1870*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 1870*FLEN/8, x13, x9, x10)

inst_957:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x2f2bd3 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x2f2bd3 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e2f2bd3; op2val:0x3e2f2bd3;
   valaddr_reg:x12; val_offset:1872*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 1872*FLEN/8, x13, x9, x10)

inst_958:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x2f2bd3 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x2f2bd3 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e2f2bd3; op2val:0x3e2f2bd3;
   valaddr_reg:x12; val_offset:1874*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 1874*FLEN/8, x13, x9, x10)

inst_959:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x2f2bd3 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x2f2bd3 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e2f2bd3; op2val:0x3e2f2bd3;
   valaddr_reg:x12; val_offset:1876*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 1876*FLEN/8, x13, x9, x10)

inst_960:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x1952ae and fs2 == 0 and fe2 == 0x7e and fm2 == 0x1952ae and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f1952ae; op2val:0x3f1952ae;
   valaddr_reg:x12; val_offset:1878*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 1878*FLEN/8, x13, x9, x10)

inst_961:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x1952ae and fs2 == 0 and fe2 == 0x7e and fm2 == 0x1952ae and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f1952ae; op2val:0x3f1952ae;
   valaddr_reg:x12; val_offset:1880*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 1880*FLEN/8, x13, x9, x10)

inst_962:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x1952ae and fs2 == 0 and fe2 == 0x7e and fm2 == 0x1952ae and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f1952ae; op2val:0x3f1952ae;
   valaddr_reg:x12; val_offset:1882*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 1882*FLEN/8, x13, x9, x10)

inst_963:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x1952ae and fs2 == 0 and fe2 == 0x7e and fm2 == 0x1952ae and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f1952ae; op2val:0x3f1952ae;
   valaddr_reg:x12; val_offset:1884*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 1884*FLEN/8, x13, x9, x10)

inst_964:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x1952ae and fs2 == 0 and fe2 == 0x7e and fm2 == 0x1952ae and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f1952ae; op2val:0x3f1952ae;
   valaddr_reg:x12; val_offset:1886*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 1886*FLEN/8, x13, x9, x10)

inst_965:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x443766 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x443766 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f443766; op2val:0x3f443766;
   valaddr_reg:x12; val_offset:1888*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 1888*FLEN/8, x13, x9, x10)

inst_966:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x443766 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x443766 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f443766; op2val:0x3f443766;
   valaddr_reg:x12; val_offset:1890*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 1890*FLEN/8, x13, x9, x10)

inst_967:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x443766 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x443766 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f443766; op2val:0x3f443766;
   valaddr_reg:x12; val_offset:1892*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 1892*FLEN/8, x13, x9, x10)

inst_968:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x443766 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x443766 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f443766; op2val:0x3f443766;
   valaddr_reg:x12; val_offset:1894*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 1894*FLEN/8, x13, x9, x10)

inst_969:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x443766 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x443766 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f443766; op2val:0x3f443766;
   valaddr_reg:x12; val_offset:1896*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 1896*FLEN/8, x13, x9, x10)

inst_970:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x714e01 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x714e01 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ef14e01; op2val:0x3ef14e01;
   valaddr_reg:x12; val_offset:1898*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 1898*FLEN/8, x13, x9, x10)

inst_971:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x714e01 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x714e01 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ef14e01; op2val:0x3ef14e01;
   valaddr_reg:x12; val_offset:1900*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 1900*FLEN/8, x13, x9, x10)

inst_972:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x714e01 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x714e01 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ef14e01; op2val:0x3ef14e01;
   valaddr_reg:x12; val_offset:1902*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 1902*FLEN/8, x13, x9, x10)

inst_973:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x714e01 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x714e01 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ef14e01; op2val:0x3ef14e01;
   valaddr_reg:x12; val_offset:1904*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 1904*FLEN/8, x13, x9, x10)

inst_974:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x714e01 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x714e01 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ef14e01; op2val:0x3ef14e01;
   valaddr_reg:x12; val_offset:1906*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 1906*FLEN/8, x13, x9, x10)

inst_975:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x33cb4c and fs2 == 0 and fe2 == 0x7d and fm2 == 0x33cb4c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3eb3cb4c; op2val:0x3eb3cb4c;
   valaddr_reg:x12; val_offset:1908*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 1908*FLEN/8, x13, x9, x10)

inst_976:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x33cb4c and fs2 == 0 and fe2 == 0x7d and fm2 == 0x33cb4c and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3eb3cb4c; op2val:0x3eb3cb4c;
   valaddr_reg:x12; val_offset:1910*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 1910*FLEN/8, x13, x9, x10)

inst_977:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x33cb4c and fs2 == 0 and fe2 == 0x7d and fm2 == 0x33cb4c and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3eb3cb4c; op2val:0x3eb3cb4c;
   valaddr_reg:x12; val_offset:1912*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 1912*FLEN/8, x13, x9, x10)

inst_978:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x33cb4c and fs2 == 0 and fe2 == 0x7d and fm2 == 0x33cb4c and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3eb3cb4c; op2val:0x3eb3cb4c;
   valaddr_reg:x12; val_offset:1914*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 1914*FLEN/8, x13, x9, x10)

inst_979:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x33cb4c and fs2 == 0 and fe2 == 0x7d and fm2 == 0x33cb4c and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3eb3cb4c; op2val:0x3eb3cb4c;
   valaddr_reg:x12; val_offset:1916*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 1916*FLEN/8, x13, x9, x10)

inst_980:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x208159 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x208159 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ea08159; op2val:0x3ea08159;
   valaddr_reg:x12; val_offset:1918*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 1918*FLEN/8, x13, x9, x10)

inst_981:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x208159 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x208159 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ea08159; op2val:0x3ea08159;
   valaddr_reg:x12; val_offset:1920*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 1920*FLEN/8, x13, x9, x10)

inst_982:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x208159 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x208159 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ea08159; op2val:0x3ea08159;
   valaddr_reg:x12; val_offset:1922*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 1922*FLEN/8, x13, x9, x10)

inst_983:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x208159 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x208159 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ea08159; op2val:0x3ea08159;
   valaddr_reg:x12; val_offset:1924*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 1924*FLEN/8, x13, x9, x10)

inst_984:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x208159 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x208159 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ea08159; op2val:0x3ea08159;
   valaddr_reg:x12; val_offset:1926*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 1926*FLEN/8, x13, x9, x10)

inst_985:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x42f9e0 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x42f9e0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f42f9e0; op2val:0x3f42f9e0;
   valaddr_reg:x12; val_offset:1928*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 1928*FLEN/8, x13, x9, x10)

inst_986:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x42f9e0 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x42f9e0 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f42f9e0; op2val:0x3f42f9e0;
   valaddr_reg:x12; val_offset:1930*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 1930*FLEN/8, x13, x9, x10)

inst_987:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x42f9e0 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x42f9e0 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f42f9e0; op2val:0x3f42f9e0;
   valaddr_reg:x12; val_offset:1932*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 1932*FLEN/8, x13, x9, x10)

inst_988:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x42f9e0 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x42f9e0 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f42f9e0; op2val:0x3f42f9e0;
   valaddr_reg:x12; val_offset:1934*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 1934*FLEN/8, x13, x9, x10)

inst_989:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x42f9e0 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x42f9e0 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f42f9e0; op2val:0x3f42f9e0;
   valaddr_reg:x12; val_offset:1936*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 1936*FLEN/8, x13, x9, x10)

inst_990:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x056b99 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x056b99 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f056b99; op2val:0x3f056b99;
   valaddr_reg:x12; val_offset:1938*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 1938*FLEN/8, x13, x9, x10)

inst_991:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x056b99 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x056b99 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f056b99; op2val:0x3f056b99;
   valaddr_reg:x12; val_offset:1940*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 1940*FLEN/8, x13, x9, x10)

inst_992:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x056b99 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x056b99 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f056b99; op2val:0x3f056b99;
   valaddr_reg:x12; val_offset:1942*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 1942*FLEN/8, x13, x9, x10)

inst_993:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x056b99 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x056b99 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f056b99; op2val:0x3f056b99;
   valaddr_reg:x12; val_offset:1944*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 1944*FLEN/8, x13, x9, x10)

inst_994:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x056b99 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x056b99 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f056b99; op2val:0x3f056b99;
   valaddr_reg:x12; val_offset:1946*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 1946*FLEN/8, x13, x9, x10)

inst_995:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x167709 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x167709 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f167709; op2val:0x3f167709;
   valaddr_reg:x12; val_offset:1948*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 1948*FLEN/8, x13, x9, x10)

inst_996:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x167709 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x167709 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f167709; op2val:0x3f167709;
   valaddr_reg:x12; val_offset:1950*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 1950*FLEN/8, x13, x9, x10)

inst_997:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x167709 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x167709 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f167709; op2val:0x3f167709;
   valaddr_reg:x12; val_offset:1952*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 1952*FLEN/8, x13, x9, x10)

inst_998:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x167709 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x167709 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f167709; op2val:0x3f167709;
   valaddr_reg:x12; val_offset:1954*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 1954*FLEN/8, x13, x9, x10)

inst_999:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x167709 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x167709 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f167709; op2val:0x3f167709;
   valaddr_reg:x12; val_offset:1956*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 1956*FLEN/8, x13, x9, x10)

inst_1000:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x3e9680 and fs2 == 0 and fe2 == 0x7b and fm2 == 0x3e9680 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3dbe9680; op2val:0x3dbe9680;
   valaddr_reg:x12; val_offset:1958*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 1958*FLEN/8, x13, x9, x10)

inst_1001:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x3e9680 and fs2 == 0 and fe2 == 0x7b and fm2 == 0x3e9680 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3dbe9680; op2val:0x3dbe9680;
   valaddr_reg:x12; val_offset:1960*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 1960*FLEN/8, x13, x9, x10)

inst_1002:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x3e9680 and fs2 == 0 and fe2 == 0x7b and fm2 == 0x3e9680 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3dbe9680; op2val:0x3dbe9680;
   valaddr_reg:x12; val_offset:1962*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 1962*FLEN/8, x13, x9, x10)

inst_1003:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x3e9680 and fs2 == 0 and fe2 == 0x7b and fm2 == 0x3e9680 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3dbe9680; op2val:0x3dbe9680;
   valaddr_reg:x12; val_offset:1964*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 1964*FLEN/8, x13, x9, x10)

inst_1004:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x3e9680 and fs2 == 0 and fe2 == 0x7b and fm2 == 0x3e9680 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3dbe9680; op2val:0x3dbe9680;
   valaddr_reg:x12; val_offset:1966*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 1966*FLEN/8, x13, x9, x10)

inst_1005:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x398ad4 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x398ad4 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f398ad4; op2val:0x3f398ad4;
   valaddr_reg:x12; val_offset:1968*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 1968*FLEN/8, x13, x9, x10)

inst_1006:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x398ad4 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x398ad4 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f398ad4; op2val:0x3f398ad4;
   valaddr_reg:x12; val_offset:1970*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 1970*FLEN/8, x13, x9, x10)

inst_1007:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x398ad4 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x398ad4 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f398ad4; op2val:0x3f398ad4;
   valaddr_reg:x12; val_offset:1972*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 1972*FLEN/8, x13, x9, x10)

inst_1008:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x398ad4 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x398ad4 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f398ad4; op2val:0x3f398ad4;
   valaddr_reg:x12; val_offset:1974*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 1974*FLEN/8, x13, x9, x10)

inst_1009:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x398ad4 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x398ad4 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f398ad4; op2val:0x3f398ad4;
   valaddr_reg:x12; val_offset:1976*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 1976*FLEN/8, x13, x9, x10)

inst_1010:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x73a956 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x73a956 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f73a956; op2val:0x3f73a956;
   valaddr_reg:x12; val_offset:1978*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 1978*FLEN/8, x13, x9, x10)

inst_1011:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x73a956 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x73a956 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f73a956; op2val:0x3f73a956;
   valaddr_reg:x12; val_offset:1980*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 1980*FLEN/8, x13, x9, x10)

inst_1012:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x73a956 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x73a956 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f73a956; op2val:0x3f73a956;
   valaddr_reg:x12; val_offset:1982*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 1982*FLEN/8, x13, x9, x10)

inst_1013:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x73a956 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x73a956 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f73a956; op2val:0x3f73a956;
   valaddr_reg:x12; val_offset:1984*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 1984*FLEN/8, x13, x9, x10)

inst_1014:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x73a956 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x73a956 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f73a956; op2val:0x3f73a956;
   valaddr_reg:x12; val_offset:1986*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 1986*FLEN/8, x13, x9, x10)

inst_1015:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x7a038b and fs2 == 0 and fe2 == 0x7d and fm2 == 0x7a038b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3efa038b; op2val:0x3efa038b;
   valaddr_reg:x12; val_offset:1988*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 1988*FLEN/8, x13, x9, x10)

inst_1016:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x7a038b and fs2 == 0 and fe2 == 0x7d and fm2 == 0x7a038b and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3efa038b; op2val:0x3efa038b;
   valaddr_reg:x12; val_offset:1990*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 1990*FLEN/8, x13, x9, x10)

inst_1017:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x7a038b and fs2 == 0 and fe2 == 0x7d and fm2 == 0x7a038b and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3efa038b; op2val:0x3efa038b;
   valaddr_reg:x12; val_offset:1992*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 1992*FLEN/8, x13, x9, x10)

inst_1018:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x7a038b and fs2 == 0 and fe2 == 0x7d and fm2 == 0x7a038b and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3efa038b; op2val:0x3efa038b;
   valaddr_reg:x12; val_offset:1994*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 1994*FLEN/8, x13, x9, x10)

inst_1019:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x7a038b and fs2 == 0 and fe2 == 0x7d and fm2 == 0x7a038b and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3efa038b; op2val:0x3efa038b;
   valaddr_reg:x12; val_offset:1996*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 1996*FLEN/8, x13, x9, x10)

inst_1020:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x572d1f and fs2 == 0 and fe2 == 0x7e and fm2 == 0x572d1f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f572d1f; op2val:0x3f572d1f;
   valaddr_reg:x12; val_offset:1998*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 1998*FLEN/8, x13, x9, x10)

inst_1021:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x572d1f and fs2 == 0 and fe2 == 0x7e and fm2 == 0x572d1f and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f572d1f; op2val:0x3f572d1f;
   valaddr_reg:x12; val_offset:2000*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 2000*FLEN/8, x13, x9, x10)

inst_1022:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x572d1f and fs2 == 0 and fe2 == 0x7e and fm2 == 0x572d1f and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f572d1f; op2val:0x3f572d1f;
   valaddr_reg:x12; val_offset:2002*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 2002*FLEN/8, x13, x9, x10)

inst_1023:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x572d1f and fs2 == 0 and fe2 == 0x7e and fm2 == 0x572d1f and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f572d1f; op2val:0x3f572d1f;
   valaddr_reg:x12; val_offset:2004*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 2004*FLEN/8, x13, x9, x10)

inst_1024:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x572d1f and fs2 == 0 and fe2 == 0x7e and fm2 == 0x572d1f and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f572d1f; op2val:0x3f572d1f;
   valaddr_reg:x12; val_offset:2006*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 2006*FLEN/8, x13, x9, x10)

inst_1025:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x6f98ad and fs2 == 0 and fe2 == 0x7b and fm2 == 0x6f98ad and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3def98ad; op2val:0x3def98ad;
   valaddr_reg:x12; val_offset:2008*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 2008*FLEN/8, x13, x9, x10)

inst_1026:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x6f98ad and fs2 == 0 and fe2 == 0x7b and fm2 == 0x6f98ad and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3def98ad; op2val:0x3def98ad;
   valaddr_reg:x12; val_offset:2010*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 2010*FLEN/8, x13, x9, x10)

inst_1027:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x6f98ad and fs2 == 0 and fe2 == 0x7b and fm2 == 0x6f98ad and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3def98ad; op2val:0x3def98ad;
   valaddr_reg:x12; val_offset:2012*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 2012*FLEN/8, x13, x9, x10)

inst_1028:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x6f98ad and fs2 == 0 and fe2 == 0x7b and fm2 == 0x6f98ad and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3def98ad; op2val:0x3def98ad;
   valaddr_reg:x12; val_offset:2014*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 2014*FLEN/8, x13, x9, x10)

inst_1029:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x6f98ad and fs2 == 0 and fe2 == 0x7b and fm2 == 0x6f98ad and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3def98ad; op2val:0x3def98ad;
   valaddr_reg:x12; val_offset:2016*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 2016*FLEN/8, x13, x9, x10)

inst_1030:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x1d692c and fs2 == 0 and fe2 == 0x7d and fm2 == 0x1d692c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e9d692c; op2val:0x3e9d692c;
   valaddr_reg:x12; val_offset:2018*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 2018*FLEN/8, x13, x9, x10)

inst_1031:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x1d692c and fs2 == 0 and fe2 == 0x7d and fm2 == 0x1d692c and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e9d692c; op2val:0x3e9d692c;
   valaddr_reg:x12; val_offset:2020*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 2020*FLEN/8, x13, x9, x10)

inst_1032:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x1d692c and fs2 == 0 and fe2 == 0x7d and fm2 == 0x1d692c and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e9d692c; op2val:0x3e9d692c;
   valaddr_reg:x12; val_offset:2022*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 2022*FLEN/8, x13, x9, x10)

inst_1033:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x1d692c and fs2 == 0 and fe2 == 0x7d and fm2 == 0x1d692c and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e9d692c; op2val:0x3e9d692c;
   valaddr_reg:x12; val_offset:2024*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 2024*FLEN/8, x13, x9, x10)

inst_1034:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x1d692c and fs2 == 0 and fe2 == 0x7d and fm2 == 0x1d692c and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e9d692c; op2val:0x3e9d692c;
   valaddr_reg:x12; val_offset:2026*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 2026*FLEN/8, x13, x9, x10)

inst_1035:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x20dde2 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x20dde2 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f20dde2; op2val:0x3f20dde2;
   valaddr_reg:x12; val_offset:2028*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 2028*FLEN/8, x13, x9, x10)

inst_1036:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x20dde2 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x20dde2 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f20dde2; op2val:0x3f20dde2;
   valaddr_reg:x12; val_offset:2030*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 2030*FLEN/8, x13, x9, x10)

inst_1037:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x20dde2 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x20dde2 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f20dde2; op2val:0x3f20dde2;
   valaddr_reg:x12; val_offset:2032*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 2032*FLEN/8, x13, x9, x10)

inst_1038:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x20dde2 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x20dde2 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f20dde2; op2val:0x3f20dde2;
   valaddr_reg:x12; val_offset:2034*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 2034*FLEN/8, x13, x9, x10)

inst_1039:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x20dde2 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x20dde2 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f20dde2; op2val:0x3f20dde2;
   valaddr_reg:x12; val_offset:2036*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 2036*FLEN/8, x13, x9, x10)

inst_1040:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x06f434 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x06f434 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e86f434; op2val:0x3e86f434;
   valaddr_reg:x12; val_offset:2038*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 2038*FLEN/8, x13, x9, x10)

inst_1041:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x06f434 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x06f434 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e86f434; op2val:0x3e86f434;
   valaddr_reg:x12; val_offset:2040*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 2040*FLEN/8, x13, x9, x10)

inst_1042:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x06f434 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x06f434 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e86f434; op2val:0x3e86f434;
   valaddr_reg:x12; val_offset:2042*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 2042*FLEN/8, x13, x9, x10)

inst_1043:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x06f434 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x06f434 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e86f434; op2val:0x3e86f434;
   valaddr_reg:x12; val_offset:2044*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 2044*FLEN/8, x13, x9, x10)

inst_1044:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x06f434 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x06f434 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e86f434; op2val:0x3e86f434;
   valaddr_reg:x12; val_offset:2046*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 2046*FLEN/8, x13, x9, x10)

inst_1045:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x132c15 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x132c15 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e132c15; op2val:0x3e132c15;
   valaddr_reg:x12; val_offset:2048*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 2048*FLEN/8, x13, x9, x10)

inst_1046:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x132c15 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x132c15 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e132c15; op2val:0x3e132c15;
   valaddr_reg:x12; val_offset:2050*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 2050*FLEN/8, x13, x9, x10)

inst_1047:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x132c15 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x132c15 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e132c15; op2val:0x3e132c15;
   valaddr_reg:x12; val_offset:2052*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 2052*FLEN/8, x13, x9, x10)
RVTEST_SIGBASE(x9,signature_x9_8)

inst_1048:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x132c15 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x132c15 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e132c15; op2val:0x3e132c15;
   valaddr_reg:x12; val_offset:2054*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 2054*FLEN/8, x13, x9, x10)

inst_1049:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x132c15 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x132c15 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e132c15; op2val:0x3e132c15;
   valaddr_reg:x12; val_offset:2056*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 2056*FLEN/8, x13, x9, x10)

inst_1050:
// fs1 == 0 and fe1 == 0x7a and fm1 == 0x238464 and fs2 == 0 and fe2 == 0x7a and fm2 == 0x238464 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3d238464; op2val:0x3d238464;
   valaddr_reg:x12; val_offset:2058*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 2058*FLEN/8, x13, x9, x10)

inst_1051:
// fs1 == 0 and fe1 == 0x7a and fm1 == 0x238464 and fs2 == 0 and fe2 == 0x7a and fm2 == 0x238464 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3d238464; op2val:0x3d238464;
   valaddr_reg:x12; val_offset:2060*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 2060*FLEN/8, x13, x9, x10)

inst_1052:
// fs1 == 0 and fe1 == 0x7a and fm1 == 0x238464 and fs2 == 0 and fe2 == 0x7a and fm2 == 0x238464 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3d238464; op2val:0x3d238464;
   valaddr_reg:x12; val_offset:2062*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 2062*FLEN/8, x13, x9, x10)

inst_1053:
// fs1 == 0 and fe1 == 0x7a and fm1 == 0x238464 and fs2 == 0 and fe2 == 0x7a and fm2 == 0x238464 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3d238464; op2val:0x3d238464;
   valaddr_reg:x12; val_offset:2064*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 2064*FLEN/8, x13, x9, x10)

inst_1054:
// fs1 == 0 and fe1 == 0x7a and fm1 == 0x238464 and fs2 == 0 and fe2 == 0x7a and fm2 == 0x238464 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3d238464; op2val:0x3d238464;
   valaddr_reg:x12; val_offset:2066*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 2066*FLEN/8, x13, x9, x10)

inst_1055:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x52df95 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x52df95 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f52df95; op2val:0x3f52df95;
   valaddr_reg:x12; val_offset:2068*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 2068*FLEN/8, x13, x9, x10)

inst_1056:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x52df95 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x52df95 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f52df95; op2val:0x3f52df95;
   valaddr_reg:x12; val_offset:2070*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 2070*FLEN/8, x13, x9, x10)

inst_1057:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x52df95 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x52df95 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f52df95; op2val:0x3f52df95;
   valaddr_reg:x12; val_offset:2072*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 2072*FLEN/8, x13, x9, x10)

inst_1058:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x52df95 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x52df95 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f52df95; op2val:0x3f52df95;
   valaddr_reg:x12; val_offset:2074*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 2074*FLEN/8, x13, x9, x10)

inst_1059:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x52df95 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x52df95 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f52df95; op2val:0x3f52df95;
   valaddr_reg:x12; val_offset:2076*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 2076*FLEN/8, x13, x9, x10)

inst_1060:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x484a24 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x484a24 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f484a24; op2val:0x3f484a24;
   valaddr_reg:x12; val_offset:2078*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 2078*FLEN/8, x13, x9, x10)

inst_1061:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x484a24 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x484a24 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f484a24; op2val:0x3f484a24;
   valaddr_reg:x12; val_offset:2080*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 2080*FLEN/8, x13, x9, x10)

inst_1062:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x484a24 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x484a24 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f484a24; op2val:0x3f484a24;
   valaddr_reg:x12; val_offset:2082*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 2082*FLEN/8, x13, x9, x10)

inst_1063:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x484a24 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x484a24 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f484a24; op2val:0x3f484a24;
   valaddr_reg:x12; val_offset:2084*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 2084*FLEN/8, x13, x9, x10)

inst_1064:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x484a24 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x484a24 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f484a24; op2val:0x3f484a24;
   valaddr_reg:x12; val_offset:2086*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 2086*FLEN/8, x13, x9, x10)

inst_1065:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x78105a and fs2 == 0 and fe2 == 0x7c and fm2 == 0x78105a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e78105a; op2val:0x3e78105a;
   valaddr_reg:x12; val_offset:2088*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 2088*FLEN/8, x13, x9, x10)

inst_1066:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x78105a and fs2 == 0 and fe2 == 0x7c and fm2 == 0x78105a and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e78105a; op2val:0x3e78105a;
   valaddr_reg:x12; val_offset:2090*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 2090*FLEN/8, x13, x9, x10)

inst_1067:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x78105a and fs2 == 0 and fe2 == 0x7c and fm2 == 0x78105a and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e78105a; op2val:0x3e78105a;
   valaddr_reg:x12; val_offset:2092*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 2092*FLEN/8, x13, x9, x10)

inst_1068:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x78105a and fs2 == 0 and fe2 == 0x7c and fm2 == 0x78105a and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e78105a; op2val:0x3e78105a;
   valaddr_reg:x12; val_offset:2094*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 2094*FLEN/8, x13, x9, x10)

inst_1069:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x78105a and fs2 == 0 and fe2 == 0x7c and fm2 == 0x78105a and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e78105a; op2val:0x3e78105a;
   valaddr_reg:x12; val_offset:2096*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 2096*FLEN/8, x13, x9, x10)

inst_1070:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x23008b and fs2 == 0 and fe2 == 0x7d and fm2 == 0x23008b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ea3008b; op2val:0x3ea3008b;
   valaddr_reg:x12; val_offset:2098*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 2098*FLEN/8, x13, x9, x10)

inst_1071:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x23008b and fs2 == 0 and fe2 == 0x7d and fm2 == 0x23008b and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ea3008b; op2val:0x3ea3008b;
   valaddr_reg:x12; val_offset:2100*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 2100*FLEN/8, x13, x9, x10)

inst_1072:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x23008b and fs2 == 0 and fe2 == 0x7d and fm2 == 0x23008b and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ea3008b; op2val:0x3ea3008b;
   valaddr_reg:x12; val_offset:2102*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 2102*FLEN/8, x13, x9, x10)

inst_1073:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x23008b and fs2 == 0 and fe2 == 0x7d and fm2 == 0x23008b and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ea3008b; op2val:0x3ea3008b;
   valaddr_reg:x12; val_offset:2104*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 2104*FLEN/8, x13, x9, x10)

inst_1074:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x23008b and fs2 == 0 and fe2 == 0x7d and fm2 == 0x23008b and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ea3008b; op2val:0x3ea3008b;
   valaddr_reg:x12; val_offset:2106*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 2106*FLEN/8, x13, x9, x10)

inst_1075:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x26eaaf and fs2 == 0 and fe2 == 0x7e and fm2 == 0x26eaaf and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f26eaaf; op2val:0x3f26eaaf;
   valaddr_reg:x12; val_offset:2108*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 2108*FLEN/8, x13, x9, x10)

inst_1076:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x26eaaf and fs2 == 0 and fe2 == 0x7e and fm2 == 0x26eaaf and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f26eaaf; op2val:0x3f26eaaf;
   valaddr_reg:x12; val_offset:2110*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 2110*FLEN/8, x13, x9, x10)

inst_1077:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x26eaaf and fs2 == 0 and fe2 == 0x7e and fm2 == 0x26eaaf and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f26eaaf; op2val:0x3f26eaaf;
   valaddr_reg:x12; val_offset:2112*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 2112*FLEN/8, x13, x9, x10)

inst_1078:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x26eaaf and fs2 == 0 and fe2 == 0x7e and fm2 == 0x26eaaf and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f26eaaf; op2val:0x3f26eaaf;
   valaddr_reg:x12; val_offset:2114*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 2114*FLEN/8, x13, x9, x10)

inst_1079:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x26eaaf and fs2 == 0 and fe2 == 0x7e and fm2 == 0x26eaaf and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f26eaaf; op2val:0x3f26eaaf;
   valaddr_reg:x12; val_offset:2116*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 2116*FLEN/8, x13, x9, x10)

inst_1080:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x55cfc9 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x55cfc9 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f55cfc9; op2val:0x3f55cfc9;
   valaddr_reg:x12; val_offset:2118*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 2118*FLEN/8, x13, x9, x10)

inst_1081:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x55cfc9 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x55cfc9 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f55cfc9; op2val:0x3f55cfc9;
   valaddr_reg:x12; val_offset:2120*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 2120*FLEN/8, x13, x9, x10)

inst_1082:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x55cfc9 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x55cfc9 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f55cfc9; op2val:0x3f55cfc9;
   valaddr_reg:x12; val_offset:2122*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 2122*FLEN/8, x13, x9, x10)

inst_1083:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x55cfc9 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x55cfc9 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f55cfc9; op2val:0x3f55cfc9;
   valaddr_reg:x12; val_offset:2124*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 2124*FLEN/8, x13, x9, x10)

inst_1084:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x55cfc9 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x55cfc9 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f55cfc9; op2val:0x3f55cfc9;
   valaddr_reg:x12; val_offset:2126*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 2126*FLEN/8, x13, x9, x10)

inst_1085:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x75941d and fs2 == 0 and fe2 == 0x7e and fm2 == 0x75941d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f75941d; op2val:0x3f75941d;
   valaddr_reg:x12; val_offset:2128*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 2128*FLEN/8, x13, x9, x10)

inst_1086:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x75941d and fs2 == 0 and fe2 == 0x7e and fm2 == 0x75941d and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f75941d; op2val:0x3f75941d;
   valaddr_reg:x12; val_offset:2130*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 2130*FLEN/8, x13, x9, x10)

inst_1087:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x75941d and fs2 == 0 and fe2 == 0x7e and fm2 == 0x75941d and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f75941d; op2val:0x3f75941d;
   valaddr_reg:x12; val_offset:2132*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 2132*FLEN/8, x13, x9, x10)

inst_1088:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x75941d and fs2 == 0 and fe2 == 0x7e and fm2 == 0x75941d and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f75941d; op2val:0x3f75941d;
   valaddr_reg:x12; val_offset:2134*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 2134*FLEN/8, x13, x9, x10)

inst_1089:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x75941d and fs2 == 0 and fe2 == 0x7e and fm2 == 0x75941d and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f75941d; op2val:0x3f75941d;
   valaddr_reg:x12; val_offset:2136*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 2136*FLEN/8, x13, x9, x10)

inst_1090:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x44aa65 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x44aa65 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e44aa65; op2val:0x3e44aa65;
   valaddr_reg:x12; val_offset:2138*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 2138*FLEN/8, x13, x9, x10)

inst_1091:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x44aa65 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x44aa65 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e44aa65; op2val:0x3e44aa65;
   valaddr_reg:x12; val_offset:2140*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 2140*FLEN/8, x13, x9, x10)

inst_1092:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x44aa65 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x44aa65 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e44aa65; op2val:0x3e44aa65;
   valaddr_reg:x12; val_offset:2142*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 2142*FLEN/8, x13, x9, x10)

inst_1093:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x44aa65 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x44aa65 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e44aa65; op2val:0x3e44aa65;
   valaddr_reg:x12; val_offset:2144*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 2144*FLEN/8, x13, x9, x10)

inst_1094:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x44aa65 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x44aa65 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e44aa65; op2val:0x3e44aa65;
   valaddr_reg:x12; val_offset:2146*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 2146*FLEN/8, x13, x9, x10)

inst_1095:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x3b8366 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x3b8366 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f3b8366; op2val:0x3f3b8366;
   valaddr_reg:x12; val_offset:2148*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 2148*FLEN/8, x13, x9, x10)

inst_1096:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x3b8366 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x3b8366 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f3b8366; op2val:0x3f3b8366;
   valaddr_reg:x12; val_offset:2150*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 2150*FLEN/8, x13, x9, x10)

inst_1097:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x3b8366 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x3b8366 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f3b8366; op2val:0x3f3b8366;
   valaddr_reg:x12; val_offset:2152*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 2152*FLEN/8, x13, x9, x10)

inst_1098:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x3b8366 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x3b8366 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f3b8366; op2val:0x3f3b8366;
   valaddr_reg:x12; val_offset:2154*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 2154*FLEN/8, x13, x9, x10)

inst_1099:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x3b8366 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x3b8366 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f3b8366; op2val:0x3f3b8366;
   valaddr_reg:x12; val_offset:2156*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 2156*FLEN/8, x13, x9, x10)

inst_1100:
// fs1 == 0 and fe1 == 0x7a and fm1 == 0x262376 and fs2 == 0 and fe2 == 0x7a and fm2 == 0x262376 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3d262376; op2val:0x3d262376;
   valaddr_reg:x12; val_offset:2158*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 2158*FLEN/8, x13, x9, x10)

inst_1101:
// fs1 == 0 and fe1 == 0x7a and fm1 == 0x262376 and fs2 == 0 and fe2 == 0x7a and fm2 == 0x262376 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3d262376; op2val:0x3d262376;
   valaddr_reg:x12; val_offset:2160*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 2160*FLEN/8, x13, x9, x10)

inst_1102:
// fs1 == 0 and fe1 == 0x7a and fm1 == 0x262376 and fs2 == 0 and fe2 == 0x7a and fm2 == 0x262376 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3d262376; op2val:0x3d262376;
   valaddr_reg:x12; val_offset:2162*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 2162*FLEN/8, x13, x9, x10)

inst_1103:
// fs1 == 0 and fe1 == 0x7a and fm1 == 0x262376 and fs2 == 0 and fe2 == 0x7a and fm2 == 0x262376 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3d262376; op2val:0x3d262376;
   valaddr_reg:x12; val_offset:2164*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 2164*FLEN/8, x13, x9, x10)

inst_1104:
// fs1 == 0 and fe1 == 0x7a and fm1 == 0x262376 and fs2 == 0 and fe2 == 0x7a and fm2 == 0x262376 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3d262376; op2val:0x3d262376;
   valaddr_reg:x12; val_offset:2166*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 2166*FLEN/8, x13, x9, x10)

inst_1105:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x659fe4 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x659fe4 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e659fe4; op2val:0x3e659fe4;
   valaddr_reg:x12; val_offset:2168*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 2168*FLEN/8, x13, x9, x10)

inst_1106:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x659fe4 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x659fe4 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e659fe4; op2val:0x3e659fe4;
   valaddr_reg:x12; val_offset:2170*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 2170*FLEN/8, x13, x9, x10)

inst_1107:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x659fe4 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x659fe4 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e659fe4; op2val:0x3e659fe4;
   valaddr_reg:x12; val_offset:2172*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 2172*FLEN/8, x13, x9, x10)

inst_1108:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x659fe4 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x659fe4 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e659fe4; op2val:0x3e659fe4;
   valaddr_reg:x12; val_offset:2174*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 2174*FLEN/8, x13, x9, x10)

inst_1109:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x659fe4 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x659fe4 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e659fe4; op2val:0x3e659fe4;
   valaddr_reg:x12; val_offset:2176*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 2176*FLEN/8, x13, x9, x10)

inst_1110:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x2e3986 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x2e3986 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3eae3986; op2val:0x3eae3986;
   valaddr_reg:x12; val_offset:2178*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 2178*FLEN/8, x13, x9, x10)

inst_1111:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x2e3986 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x2e3986 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3eae3986; op2val:0x3eae3986;
   valaddr_reg:x12; val_offset:2180*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 2180*FLEN/8, x13, x9, x10)

inst_1112:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x2e3986 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x2e3986 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3eae3986; op2val:0x3eae3986;
   valaddr_reg:x12; val_offset:2182*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 2182*FLEN/8, x13, x9, x10)

inst_1113:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x2e3986 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x2e3986 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3eae3986; op2val:0x3eae3986;
   valaddr_reg:x12; val_offset:2184*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 2184*FLEN/8, x13, x9, x10)

inst_1114:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x2e3986 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x2e3986 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3eae3986; op2val:0x3eae3986;
   valaddr_reg:x12; val_offset:2186*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 2186*FLEN/8, x13, x9, x10)

inst_1115:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x0e10a1 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x0e10a1 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f0e10a1; op2val:0x3f0e10a1;
   valaddr_reg:x12; val_offset:2188*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 2188*FLEN/8, x13, x9, x10)

inst_1116:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x0e10a1 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x0e10a1 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f0e10a1; op2val:0x3f0e10a1;
   valaddr_reg:x12; val_offset:2190*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 2190*FLEN/8, x13, x9, x10)

inst_1117:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x0e10a1 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x0e10a1 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f0e10a1; op2val:0x3f0e10a1;
   valaddr_reg:x12; val_offset:2192*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 2192*FLEN/8, x13, x9, x10)

inst_1118:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x0e10a1 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x0e10a1 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f0e10a1; op2val:0x3f0e10a1;
   valaddr_reg:x12; val_offset:2194*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 2194*FLEN/8, x13, x9, x10)

inst_1119:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x0e10a1 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x0e10a1 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f0e10a1; op2val:0x3f0e10a1;
   valaddr_reg:x12; val_offset:2196*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 2196*FLEN/8, x13, x9, x10)

inst_1120:
// fs1 == 0 and fe1 == 0x79 and fm1 == 0x6bde30 and fs2 == 0 and fe2 == 0x79 and fm2 == 0x6bde30 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3cebde30; op2val:0x3cebde30;
   valaddr_reg:x12; val_offset:2198*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 2198*FLEN/8, x13, x9, x10)

inst_1121:
// fs1 == 0 and fe1 == 0x79 and fm1 == 0x6bde30 and fs2 == 0 and fe2 == 0x79 and fm2 == 0x6bde30 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3cebde30; op2val:0x3cebde30;
   valaddr_reg:x12; val_offset:2200*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 2200*FLEN/8, x13, x9, x10)

inst_1122:
// fs1 == 0 and fe1 == 0x79 and fm1 == 0x6bde30 and fs2 == 0 and fe2 == 0x79 and fm2 == 0x6bde30 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3cebde30; op2val:0x3cebde30;
   valaddr_reg:x12; val_offset:2202*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 2202*FLEN/8, x13, x9, x10)

inst_1123:
// fs1 == 0 and fe1 == 0x79 and fm1 == 0x6bde30 and fs2 == 0 and fe2 == 0x79 and fm2 == 0x6bde30 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3cebde30; op2val:0x3cebde30;
   valaddr_reg:x12; val_offset:2204*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 2204*FLEN/8, x13, x9, x10)

inst_1124:
// fs1 == 0 and fe1 == 0x79 and fm1 == 0x6bde30 and fs2 == 0 and fe2 == 0x79 and fm2 == 0x6bde30 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3cebde30; op2val:0x3cebde30;
   valaddr_reg:x12; val_offset:2206*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 2206*FLEN/8, x13, x9, x10)

inst_1125:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x4a05fd and fs2 == 0 and fe2 == 0x7c and fm2 == 0x4a05fd and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e4a05fd; op2val:0x3e4a05fd;
   valaddr_reg:x12; val_offset:2208*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 2208*FLEN/8, x13, x9, x10)

inst_1126:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x4a05fd and fs2 == 0 and fe2 == 0x7c and fm2 == 0x4a05fd and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e4a05fd; op2val:0x3e4a05fd;
   valaddr_reg:x12; val_offset:2210*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 2210*FLEN/8, x13, x9, x10)

inst_1127:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x4a05fd and fs2 == 0 and fe2 == 0x7c and fm2 == 0x4a05fd and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e4a05fd; op2val:0x3e4a05fd;
   valaddr_reg:x12; val_offset:2212*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 2212*FLEN/8, x13, x9, x10)

inst_1128:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x4a05fd and fs2 == 0 and fe2 == 0x7c and fm2 == 0x4a05fd and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e4a05fd; op2val:0x3e4a05fd;
   valaddr_reg:x12; val_offset:2214*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 2214*FLEN/8, x13, x9, x10)

inst_1129:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x4a05fd and fs2 == 0 and fe2 == 0x7c and fm2 == 0x4a05fd and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e4a05fd; op2val:0x3e4a05fd;
   valaddr_reg:x12; val_offset:2216*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 2216*FLEN/8, x13, x9, x10)

inst_1130:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x55d2aa and fs2 == 0 and fe2 == 0x7e and fm2 == 0x55d2aa and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f55d2aa; op2val:0x3f55d2aa;
   valaddr_reg:x12; val_offset:2218*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 2218*FLEN/8, x13, x9, x10)

inst_1131:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x55d2aa and fs2 == 0 and fe2 == 0x7e and fm2 == 0x55d2aa and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f55d2aa; op2val:0x3f55d2aa;
   valaddr_reg:x12; val_offset:2220*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 2220*FLEN/8, x13, x9, x10)

inst_1132:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x55d2aa and fs2 == 0 and fe2 == 0x7e and fm2 == 0x55d2aa and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f55d2aa; op2val:0x3f55d2aa;
   valaddr_reg:x12; val_offset:2222*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 2222*FLEN/8, x13, x9, x10)

inst_1133:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x55d2aa and fs2 == 0 and fe2 == 0x7e and fm2 == 0x55d2aa and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f55d2aa; op2val:0x3f55d2aa;
   valaddr_reg:x12; val_offset:2224*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 2224*FLEN/8, x13, x9, x10)

inst_1134:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x55d2aa and fs2 == 0 and fe2 == 0x7e and fm2 == 0x55d2aa and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f55d2aa; op2val:0x3f55d2aa;
   valaddr_reg:x12; val_offset:2226*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 2226*FLEN/8, x13, x9, x10)

inst_1135:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x5fa8d5 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x5fa8d5 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f5fa8d5; op2val:0x3f5fa8d5;
   valaddr_reg:x12; val_offset:2228*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 2228*FLEN/8, x13, x9, x10)

inst_1136:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x5fa8d5 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x5fa8d5 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f5fa8d5; op2val:0x3f5fa8d5;
   valaddr_reg:x12; val_offset:2230*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 2230*FLEN/8, x13, x9, x10)

inst_1137:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x5fa8d5 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x5fa8d5 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f5fa8d5; op2val:0x3f5fa8d5;
   valaddr_reg:x12; val_offset:2232*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 2232*FLEN/8, x13, x9, x10)

inst_1138:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x5fa8d5 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x5fa8d5 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f5fa8d5; op2val:0x3f5fa8d5;
   valaddr_reg:x12; val_offset:2234*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 2234*FLEN/8, x13, x9, x10)

inst_1139:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x5fa8d5 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x5fa8d5 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f5fa8d5; op2val:0x3f5fa8d5;
   valaddr_reg:x12; val_offset:2236*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 2236*FLEN/8, x13, x9, x10)

inst_1140:
// fs1 == 0 and fe1 == 0x7a and fm1 == 0x2632ef and fs2 == 0 and fe2 == 0x7a and fm2 == 0x2632ef and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3d2632ef; op2val:0x3d2632ef;
   valaddr_reg:x12; val_offset:2238*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 2238*FLEN/8, x13, x9, x10)

inst_1141:
// fs1 == 0 and fe1 == 0x7a and fm1 == 0x2632ef and fs2 == 0 and fe2 == 0x7a and fm2 == 0x2632ef and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3d2632ef; op2val:0x3d2632ef;
   valaddr_reg:x12; val_offset:2240*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 2240*FLEN/8, x13, x9, x10)

inst_1142:
// fs1 == 0 and fe1 == 0x7a and fm1 == 0x2632ef and fs2 == 0 and fe2 == 0x7a and fm2 == 0x2632ef and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3d2632ef; op2val:0x3d2632ef;
   valaddr_reg:x12; val_offset:2242*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 2242*FLEN/8, x13, x9, x10)

inst_1143:
// fs1 == 0 and fe1 == 0x7a and fm1 == 0x2632ef and fs2 == 0 and fe2 == 0x7a and fm2 == 0x2632ef and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3d2632ef; op2val:0x3d2632ef;
   valaddr_reg:x12; val_offset:2244*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 2244*FLEN/8, x13, x9, x10)

inst_1144:
// fs1 == 0 and fe1 == 0x7a and fm1 == 0x2632ef and fs2 == 0 and fe2 == 0x7a and fm2 == 0x2632ef and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3d2632ef; op2val:0x3d2632ef;
   valaddr_reg:x12; val_offset:2246*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 2246*FLEN/8, x13, x9, x10)

inst_1145:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x4c73ca and fs2 == 0 and fe2 == 0x7d and fm2 == 0x4c73ca and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ecc73ca; op2val:0x3ecc73ca;
   valaddr_reg:x12; val_offset:2248*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 2248*FLEN/8, x13, x9, x10)

inst_1146:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x4c73ca and fs2 == 0 and fe2 == 0x7d and fm2 == 0x4c73ca and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ecc73ca; op2val:0x3ecc73ca;
   valaddr_reg:x12; val_offset:2250*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 2250*FLEN/8, x13, x9, x10)

inst_1147:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x4c73ca and fs2 == 0 and fe2 == 0x7d and fm2 == 0x4c73ca and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ecc73ca; op2val:0x3ecc73ca;
   valaddr_reg:x12; val_offset:2252*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 2252*FLEN/8, x13, x9, x10)

inst_1148:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x4c73ca and fs2 == 0 and fe2 == 0x7d and fm2 == 0x4c73ca and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ecc73ca; op2val:0x3ecc73ca;
   valaddr_reg:x12; val_offset:2254*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 2254*FLEN/8, x13, x9, x10)

inst_1149:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x4c73ca and fs2 == 0 and fe2 == 0x7d and fm2 == 0x4c73ca and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ecc73ca; op2val:0x3ecc73ca;
   valaddr_reg:x12; val_offset:2256*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 2256*FLEN/8, x13, x9, x10)

inst_1150:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x61c4da and fs2 == 0 and fe2 == 0x7e and fm2 == 0x61c4da and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f61c4da; op2val:0x3f61c4da;
   valaddr_reg:x12; val_offset:2258*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 2258*FLEN/8, x13, x9, x10)

inst_1151:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x61c4da and fs2 == 0 and fe2 == 0x7e and fm2 == 0x61c4da and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f61c4da; op2val:0x3f61c4da;
   valaddr_reg:x12; val_offset:2260*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 2260*FLEN/8, x13, x9, x10)

inst_1152:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x61c4da and fs2 == 0 and fe2 == 0x7e and fm2 == 0x61c4da and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f61c4da; op2val:0x3f61c4da;
   valaddr_reg:x12; val_offset:2262*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 2262*FLEN/8, x13, x9, x10)

inst_1153:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x61c4da and fs2 == 0 and fe2 == 0x7e and fm2 == 0x61c4da and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f61c4da; op2val:0x3f61c4da;
   valaddr_reg:x12; val_offset:2264*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 2264*FLEN/8, x13, x9, x10)

inst_1154:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x61c4da and fs2 == 0 and fe2 == 0x7e and fm2 == 0x61c4da and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f61c4da; op2val:0x3f61c4da;
   valaddr_reg:x12; val_offset:2266*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 2266*FLEN/8, x13, x9, x10)

inst_1155:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x4074e4 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x4074e4 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f4074e4; op2val:0x3f4074e4;
   valaddr_reg:x12; val_offset:2268*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 2268*FLEN/8, x13, x9, x10)

inst_1156:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x4074e4 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x4074e4 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f4074e4; op2val:0x3f4074e4;
   valaddr_reg:x12; val_offset:2270*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 2270*FLEN/8, x13, x9, x10)

inst_1157:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x4074e4 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x4074e4 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f4074e4; op2val:0x3f4074e4;
   valaddr_reg:x12; val_offset:2272*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 2272*FLEN/8, x13, x9, x10)

inst_1158:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x4074e4 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x4074e4 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f4074e4; op2val:0x3f4074e4;
   valaddr_reg:x12; val_offset:2274*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 2274*FLEN/8, x13, x9, x10)

inst_1159:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x4074e4 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x4074e4 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f4074e4; op2val:0x3f4074e4;
   valaddr_reg:x12; val_offset:2276*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 2276*FLEN/8, x13, x9, x10)

inst_1160:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x7ef944 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x7ef944 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f7ef944; op2val:0x3f7ef944;
   valaddr_reg:x12; val_offset:2278*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 2278*FLEN/8, x13, x9, x10)

inst_1161:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x7ef944 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x7ef944 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f7ef944; op2val:0x3f7ef944;
   valaddr_reg:x12; val_offset:2280*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 2280*FLEN/8, x13, x9, x10)

inst_1162:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x7ef944 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x7ef944 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f7ef944; op2val:0x3f7ef944;
   valaddr_reg:x12; val_offset:2282*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 2282*FLEN/8, x13, x9, x10)

inst_1163:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x7ef944 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x7ef944 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f7ef944; op2val:0x3f7ef944;
   valaddr_reg:x12; val_offset:2284*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 2284*FLEN/8, x13, x9, x10)

inst_1164:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x7ef944 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x7ef944 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f7ef944; op2val:0x3f7ef944;
   valaddr_reg:x12; val_offset:2286*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 2286*FLEN/8, x13, x9, x10)

inst_1165:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x0fac91 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x0fac91 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f0fac91; op2val:0x3f0fac91;
   valaddr_reg:x12; val_offset:2288*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 2288*FLEN/8, x13, x9, x10)

inst_1166:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x0fac91 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x0fac91 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f0fac91; op2val:0x3f0fac91;
   valaddr_reg:x12; val_offset:2290*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 2290*FLEN/8, x13, x9, x10)

inst_1167:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x0fac91 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x0fac91 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f0fac91; op2val:0x3f0fac91;
   valaddr_reg:x12; val_offset:2292*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 2292*FLEN/8, x13, x9, x10)

inst_1168:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x0fac91 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x0fac91 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f0fac91; op2val:0x3f0fac91;
   valaddr_reg:x12; val_offset:2294*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 2294*FLEN/8, x13, x9, x10)

inst_1169:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x0fac91 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x0fac91 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f0fac91; op2val:0x3f0fac91;
   valaddr_reg:x12; val_offset:2296*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 2296*FLEN/8, x13, x9, x10)

inst_1170:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x3eb4d5 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x3eb4d5 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ebeb4d5; op2val:0x3ebeb4d5;
   valaddr_reg:x12; val_offset:2298*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 2298*FLEN/8, x13, x9, x10)

inst_1171:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x3eb4d5 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x3eb4d5 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ebeb4d5; op2val:0x3ebeb4d5;
   valaddr_reg:x12; val_offset:2300*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 2300*FLEN/8, x13, x9, x10)

inst_1172:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x3eb4d5 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x3eb4d5 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ebeb4d5; op2val:0x3ebeb4d5;
   valaddr_reg:x12; val_offset:2302*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 2302*FLEN/8, x13, x9, x10)

inst_1173:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x3eb4d5 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x3eb4d5 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ebeb4d5; op2val:0x3ebeb4d5;
   valaddr_reg:x12; val_offset:2304*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 2304*FLEN/8, x13, x9, x10)

inst_1174:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x3eb4d5 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x3eb4d5 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ebeb4d5; op2val:0x3ebeb4d5;
   valaddr_reg:x12; val_offset:2306*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 2306*FLEN/8, x13, x9, x10)

inst_1175:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x289ea2 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x289ea2 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e289ea2; op2val:0x3e289ea2;
   valaddr_reg:x12; val_offset:2308*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 2308*FLEN/8, x13, x9, x10)
RVTEST_SIGBASE(x9,signature_x9_9)

inst_1176:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x289ea2 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x289ea2 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e289ea2; op2val:0x3e289ea2;
   valaddr_reg:x12; val_offset:2310*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 2310*FLEN/8, x13, x9, x10)

inst_1177:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x289ea2 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x289ea2 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e289ea2; op2val:0x3e289ea2;
   valaddr_reg:x12; val_offset:2312*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 2312*FLEN/8, x13, x9, x10)

inst_1178:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x289ea2 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x289ea2 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e289ea2; op2val:0x3e289ea2;
   valaddr_reg:x12; val_offset:2314*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 2314*FLEN/8, x13, x9, x10)

inst_1179:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x289ea2 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x289ea2 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e289ea2; op2val:0x3e289ea2;
   valaddr_reg:x12; val_offset:2316*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 2316*FLEN/8, x13, x9, x10)

inst_1180:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x37188d and fs2 == 0 and fe2 == 0x7e and fm2 == 0x37188d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f37188d; op2val:0x3f37188d;
   valaddr_reg:x12; val_offset:2318*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 2318*FLEN/8, x13, x9, x10)

inst_1181:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x37188d and fs2 == 0 and fe2 == 0x7e and fm2 == 0x37188d and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f37188d; op2val:0x3f37188d;
   valaddr_reg:x12; val_offset:2320*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 2320*FLEN/8, x13, x9, x10)

inst_1182:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x37188d and fs2 == 0 and fe2 == 0x7e and fm2 == 0x37188d and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f37188d; op2val:0x3f37188d;
   valaddr_reg:x12; val_offset:2322*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 2322*FLEN/8, x13, x9, x10)

inst_1183:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x37188d and fs2 == 0 and fe2 == 0x7e and fm2 == 0x37188d and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f37188d; op2val:0x3f37188d;
   valaddr_reg:x12; val_offset:2324*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 2324*FLEN/8, x13, x9, x10)

inst_1184:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x37188d and fs2 == 0 and fe2 == 0x7e and fm2 == 0x37188d and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f37188d; op2val:0x3f37188d;
   valaddr_reg:x12; val_offset:2326*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 2326*FLEN/8, x13, x9, x10)

inst_1185:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x3a0de1 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x3a0de1 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f3a0de1; op2val:0x3f3a0de1;
   valaddr_reg:x12; val_offset:2328*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 2328*FLEN/8, x13, x9, x10)

inst_1186:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x3a0de1 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x3a0de1 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f3a0de1; op2val:0x3f3a0de1;
   valaddr_reg:x12; val_offset:2330*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 2330*FLEN/8, x13, x9, x10)

inst_1187:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x3a0de1 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x3a0de1 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f3a0de1; op2val:0x3f3a0de1;
   valaddr_reg:x12; val_offset:2332*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 2332*FLEN/8, x13, x9, x10)

inst_1188:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x3a0de1 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x3a0de1 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f3a0de1; op2val:0x3f3a0de1;
   valaddr_reg:x12; val_offset:2334*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 2334*FLEN/8, x13, x9, x10)

inst_1189:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x3a0de1 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x3a0de1 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f3a0de1; op2val:0x3f3a0de1;
   valaddr_reg:x12; val_offset:2336*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 2336*FLEN/8, x13, x9, x10)

inst_1190:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x3fc62e and fs2 == 0 and fe2 == 0x7e and fm2 == 0x3fc62e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f3fc62e; op2val:0x3f3fc62e;
   valaddr_reg:x12; val_offset:2338*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 2338*FLEN/8, x13, x9, x10)

inst_1191:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x3fc62e and fs2 == 0 and fe2 == 0x7e and fm2 == 0x3fc62e and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f3fc62e; op2val:0x3f3fc62e;
   valaddr_reg:x12; val_offset:2340*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 2340*FLEN/8, x13, x9, x10)

inst_1192:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x3fc62e and fs2 == 0 and fe2 == 0x7e and fm2 == 0x3fc62e and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f3fc62e; op2val:0x3f3fc62e;
   valaddr_reg:x12; val_offset:2342*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 2342*FLEN/8, x13, x9, x10)

inst_1193:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x3fc62e and fs2 == 0 and fe2 == 0x7e and fm2 == 0x3fc62e and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f3fc62e; op2val:0x3f3fc62e;
   valaddr_reg:x12; val_offset:2344*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 2344*FLEN/8, x13, x9, x10)

inst_1194:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x3fc62e and fs2 == 0 and fe2 == 0x7e and fm2 == 0x3fc62e and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f3fc62e; op2val:0x3f3fc62e;
   valaddr_reg:x12; val_offset:2346*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 2346*FLEN/8, x13, x9, x10)

inst_1195:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x55ec50 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x55ec50 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e55ec50; op2val:0x3e55ec50;
   valaddr_reg:x12; val_offset:2348*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 2348*FLEN/8, x13, x9, x10)

inst_1196:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x55ec50 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x55ec50 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e55ec50; op2val:0x3e55ec50;
   valaddr_reg:x12; val_offset:2350*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 2350*FLEN/8, x13, x9, x10)

inst_1197:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x55ec50 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x55ec50 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e55ec50; op2val:0x3e55ec50;
   valaddr_reg:x12; val_offset:2352*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 2352*FLEN/8, x13, x9, x10)

inst_1198:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x55ec50 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x55ec50 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e55ec50; op2val:0x3e55ec50;
   valaddr_reg:x12; val_offset:2354*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 2354*FLEN/8, x13, x9, x10)

inst_1199:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x55ec50 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x55ec50 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e55ec50; op2val:0x3e55ec50;
   valaddr_reg:x12; val_offset:2356*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 2356*FLEN/8, x13, x9, x10)

inst_1200:
// fs1 == 0 and fe1 == 0x79 and fm1 == 0x582307 and fs2 == 0 and fe2 == 0x79 and fm2 == 0x582307 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3cd82307; op2val:0x3cd82307;
   valaddr_reg:x12; val_offset:2358*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 2358*FLEN/8, x13, x9, x10)

inst_1201:
// fs1 == 0 and fe1 == 0x79 and fm1 == 0x582307 and fs2 == 0 and fe2 == 0x79 and fm2 == 0x582307 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3cd82307; op2val:0x3cd82307;
   valaddr_reg:x12; val_offset:2360*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 2360*FLEN/8, x13, x9, x10)

inst_1202:
// fs1 == 0 and fe1 == 0x79 and fm1 == 0x582307 and fs2 == 0 and fe2 == 0x79 and fm2 == 0x582307 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3cd82307; op2val:0x3cd82307;
   valaddr_reg:x12; val_offset:2362*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 2362*FLEN/8, x13, x9, x10)

inst_1203:
// fs1 == 0 and fe1 == 0x79 and fm1 == 0x582307 and fs2 == 0 and fe2 == 0x79 and fm2 == 0x582307 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3cd82307; op2val:0x3cd82307;
   valaddr_reg:x12; val_offset:2364*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 2364*FLEN/8, x13, x9, x10)

inst_1204:
// fs1 == 0 and fe1 == 0x79 and fm1 == 0x582307 and fs2 == 0 and fe2 == 0x79 and fm2 == 0x582307 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3cd82307; op2val:0x3cd82307;
   valaddr_reg:x12; val_offset:2366*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 2366*FLEN/8, x13, x9, x10)

inst_1205:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x025a52 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x025a52 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f025a52; op2val:0x3f025a52;
   valaddr_reg:x12; val_offset:2368*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 2368*FLEN/8, x13, x9, x10)

inst_1206:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x025a52 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x025a52 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f025a52; op2val:0x3f025a52;
   valaddr_reg:x12; val_offset:2370*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 2370*FLEN/8, x13, x9, x10)

inst_1207:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x025a52 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x025a52 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f025a52; op2val:0x3f025a52;
   valaddr_reg:x12; val_offset:2372*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 2372*FLEN/8, x13, x9, x10)

inst_1208:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x025a52 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x025a52 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f025a52; op2val:0x3f025a52;
   valaddr_reg:x12; val_offset:2374*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 2374*FLEN/8, x13, x9, x10)

inst_1209:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x025a52 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x025a52 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f025a52; op2val:0x3f025a52;
   valaddr_reg:x12; val_offset:2376*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 2376*FLEN/8, x13, x9, x10)

inst_1210:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x6c7999 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x6c7999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e6c7999; op2val:0x3e6c7999;
   valaddr_reg:x12; val_offset:2378*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 2378*FLEN/8, x13, x9, x10)

inst_1211:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x6c7999 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x6c7999 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e6c7999; op2val:0x3e6c7999;
   valaddr_reg:x12; val_offset:2380*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 2380*FLEN/8, x13, x9, x10)

inst_1212:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x6c7999 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x6c7999 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e6c7999; op2val:0x3e6c7999;
   valaddr_reg:x12; val_offset:2382*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 2382*FLEN/8, x13, x9, x10)

inst_1213:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x6c7999 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x6c7999 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e6c7999; op2val:0x3e6c7999;
   valaddr_reg:x12; val_offset:2384*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 2384*FLEN/8, x13, x9, x10)

inst_1214:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x6c7999 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x6c7999 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e6c7999; op2val:0x3e6c7999;
   valaddr_reg:x12; val_offset:2386*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 2386*FLEN/8, x13, x9, x10)

inst_1215:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x1de2e8 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x1de2e8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f1de2e8; op2val:0x3f1de2e8;
   valaddr_reg:x12; val_offset:2388*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 2388*FLEN/8, x13, x9, x10)

inst_1216:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x1de2e8 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x1de2e8 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f1de2e8; op2val:0x3f1de2e8;
   valaddr_reg:x12; val_offset:2390*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 2390*FLEN/8, x13, x9, x10)

inst_1217:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x1de2e8 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x1de2e8 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f1de2e8; op2val:0x3f1de2e8;
   valaddr_reg:x12; val_offset:2392*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 2392*FLEN/8, x13, x9, x10)

inst_1218:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x1de2e8 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x1de2e8 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f1de2e8; op2val:0x3f1de2e8;
   valaddr_reg:x12; val_offset:2394*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 2394*FLEN/8, x13, x9, x10)

inst_1219:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x1de2e8 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x1de2e8 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f1de2e8; op2val:0x3f1de2e8;
   valaddr_reg:x12; val_offset:2396*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 2396*FLEN/8, x13, x9, x10)

inst_1220:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x6450fd and fs2 == 0 and fe2 == 0x7e and fm2 == 0x6450fd and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f6450fd; op2val:0x3f6450fd;
   valaddr_reg:x12; val_offset:2398*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 2398*FLEN/8, x13, x9, x10)

inst_1221:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x6450fd and fs2 == 0 and fe2 == 0x7e and fm2 == 0x6450fd and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f6450fd; op2val:0x3f6450fd;
   valaddr_reg:x12; val_offset:2400*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 2400*FLEN/8, x13, x9, x10)

inst_1222:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x6450fd and fs2 == 0 and fe2 == 0x7e and fm2 == 0x6450fd and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f6450fd; op2val:0x3f6450fd;
   valaddr_reg:x12; val_offset:2402*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 2402*FLEN/8, x13, x9, x10)

inst_1223:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x6450fd and fs2 == 0 and fe2 == 0x7e and fm2 == 0x6450fd and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f6450fd; op2val:0x3f6450fd;
   valaddr_reg:x12; val_offset:2404*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 2404*FLEN/8, x13, x9, x10)

inst_1224:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x6450fd and fs2 == 0 and fe2 == 0x7e and fm2 == 0x6450fd and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f6450fd; op2val:0x3f6450fd;
   valaddr_reg:x12; val_offset:2406*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 2406*FLEN/8, x13, x9, x10)

inst_1225:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x61c610 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x61c610 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f61c610; op2val:0x3f61c610;
   valaddr_reg:x12; val_offset:2408*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 2408*FLEN/8, x13, x9, x10)

inst_1226:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x61c610 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x61c610 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f61c610; op2val:0x3f61c610;
   valaddr_reg:x12; val_offset:2410*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 2410*FLEN/8, x13, x9, x10)

inst_1227:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x61c610 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x61c610 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f61c610; op2val:0x3f61c610;
   valaddr_reg:x12; val_offset:2412*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 2412*FLEN/8, x13, x9, x10)

inst_1228:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x61c610 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x61c610 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f61c610; op2val:0x3f61c610;
   valaddr_reg:x12; val_offset:2414*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 2414*FLEN/8, x13, x9, x10)

inst_1229:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x61c610 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x61c610 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f61c610; op2val:0x3f61c610;
   valaddr_reg:x12; val_offset:2416*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 2416*FLEN/8, x13, x9, x10)

inst_1230:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x68d021 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x68d021 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ee8d021; op2val:0x3ee8d021;
   valaddr_reg:x12; val_offset:2418*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 2418*FLEN/8, x13, x9, x10)

inst_1231:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x68d021 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x68d021 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ee8d021; op2val:0x3ee8d021;
   valaddr_reg:x12; val_offset:2420*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 2420*FLEN/8, x13, x9, x10)

inst_1232:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x68d021 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x68d021 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ee8d021; op2val:0x3ee8d021;
   valaddr_reg:x12; val_offset:2422*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 2422*FLEN/8, x13, x9, x10)

inst_1233:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x68d021 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x68d021 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ee8d021; op2val:0x3ee8d021;
   valaddr_reg:x12; val_offset:2424*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 2424*FLEN/8, x13, x9, x10)

inst_1234:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x68d021 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x68d021 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ee8d021; op2val:0x3ee8d021;
   valaddr_reg:x12; val_offset:2426*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 2426*FLEN/8, x13, x9, x10)

inst_1235:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x74ab34 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x74ab34 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e74ab34; op2val:0x3e74ab34;
   valaddr_reg:x12; val_offset:2428*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 2428*FLEN/8, x13, x9, x10)

inst_1236:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x74ab34 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x74ab34 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e74ab34; op2val:0x3e74ab34;
   valaddr_reg:x12; val_offset:2430*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 2430*FLEN/8, x13, x9, x10)

inst_1237:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x74ab34 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x74ab34 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e74ab34; op2val:0x3e74ab34;
   valaddr_reg:x12; val_offset:2432*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 2432*FLEN/8, x13, x9, x10)

inst_1238:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x74ab34 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x74ab34 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e74ab34; op2val:0x3e74ab34;
   valaddr_reg:x12; val_offset:2434*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 2434*FLEN/8, x13, x9, x10)

inst_1239:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x74ab34 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x74ab34 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e74ab34; op2val:0x3e74ab34;
   valaddr_reg:x12; val_offset:2436*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 2436*FLEN/8, x13, x9, x10)

inst_1240:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x5d082c and fs2 == 0 and fe2 == 0x7e and fm2 == 0x5d082c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f5d082c; op2val:0x3f5d082c;
   valaddr_reg:x12; val_offset:2438*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 2438*FLEN/8, x13, x9, x10)

inst_1241:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x5d082c and fs2 == 0 and fe2 == 0x7e and fm2 == 0x5d082c and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f5d082c; op2val:0x3f5d082c;
   valaddr_reg:x12; val_offset:2440*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 2440*FLEN/8, x13, x9, x10)

inst_1242:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x5d082c and fs2 == 0 and fe2 == 0x7e and fm2 == 0x5d082c and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f5d082c; op2val:0x3f5d082c;
   valaddr_reg:x12; val_offset:2442*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 2442*FLEN/8, x13, x9, x10)

inst_1243:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x5d082c and fs2 == 0 and fe2 == 0x7e and fm2 == 0x5d082c and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f5d082c; op2val:0x3f5d082c;
   valaddr_reg:x12; val_offset:2444*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 2444*FLEN/8, x13, x9, x10)

inst_1244:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x5d082c and fs2 == 0 and fe2 == 0x7e and fm2 == 0x5d082c and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f5d082c; op2val:0x3f5d082c;
   valaddr_reg:x12; val_offset:2446*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 2446*FLEN/8, x13, x9, x10)

inst_1245:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x5ad704 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x5ad704 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3edad704; op2val:0x3edad704;
   valaddr_reg:x12; val_offset:2448*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 2448*FLEN/8, x13, x9, x10)

inst_1246:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x5ad704 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x5ad704 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3edad704; op2val:0x3edad704;
   valaddr_reg:x12; val_offset:2450*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 2450*FLEN/8, x13, x9, x10)

inst_1247:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x5ad704 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x5ad704 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3edad704; op2val:0x3edad704;
   valaddr_reg:x12; val_offset:2452*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 2452*FLEN/8, x13, x9, x10)

inst_1248:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x5ad704 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x5ad704 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3edad704; op2val:0x3edad704;
   valaddr_reg:x12; val_offset:2454*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 2454*FLEN/8, x13, x9, x10)

inst_1249:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x5ad704 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x5ad704 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3edad704; op2val:0x3edad704;
   valaddr_reg:x12; val_offset:2456*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 2456*FLEN/8, x13, x9, x10)

inst_1250:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x7e7286 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x7e7286 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3efe7286; op2val:0x3efe7286;
   valaddr_reg:x12; val_offset:2458*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 2458*FLEN/8, x13, x9, x10)

inst_1251:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x7e7286 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x7e7286 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3efe7286; op2val:0x3efe7286;
   valaddr_reg:x12; val_offset:2460*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 2460*FLEN/8, x13, x9, x10)

inst_1252:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x7e7286 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x7e7286 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3efe7286; op2val:0x3efe7286;
   valaddr_reg:x12; val_offset:2462*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 2462*FLEN/8, x13, x9, x10)

inst_1253:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x7e7286 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x7e7286 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3efe7286; op2val:0x3efe7286;
   valaddr_reg:x12; val_offset:2464*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 2464*FLEN/8, x13, x9, x10)

inst_1254:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x7e7286 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x7e7286 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3efe7286; op2val:0x3efe7286;
   valaddr_reg:x12; val_offset:2466*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 2466*FLEN/8, x13, x9, x10)

inst_1255:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x717658 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x717658 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ef17658; op2val:0x3ef17658;
   valaddr_reg:x12; val_offset:2468*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 2468*FLEN/8, x13, x9, x10)

inst_1256:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x717658 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x717658 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ef17658; op2val:0x3ef17658;
   valaddr_reg:x12; val_offset:2470*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 2470*FLEN/8, x13, x9, x10)

inst_1257:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x717658 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x717658 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ef17658; op2val:0x3ef17658;
   valaddr_reg:x12; val_offset:2472*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 2472*FLEN/8, x13, x9, x10)

inst_1258:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x717658 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x717658 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ef17658; op2val:0x3ef17658;
   valaddr_reg:x12; val_offset:2474*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 2474*FLEN/8, x13, x9, x10)

inst_1259:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x717658 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x717658 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ef17658; op2val:0x3ef17658;
   valaddr_reg:x12; val_offset:2476*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 2476*FLEN/8, x13, x9, x10)

inst_1260:
// fs1 == 0 and fe1 == 0xa8 and fm1 == 0x627706 and fs2 == 1 and fe2 == 0xa9 and fm2 == 0x0ec47c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x54627706; op2val:0xd48ec47c;
   valaddr_reg:x12; val_offset:2478*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 2478*FLEN/8, x13, x9, x10)

inst_1261:
// fs1 == 0 and fe1 == 0xa8 and fm1 == 0x627706 and fs2 == 1 and fe2 == 0xa9 and fm2 == 0x0ec47c and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x54627706; op2val:0xd48ec47c;
   valaddr_reg:x12; val_offset:2480*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 2480*FLEN/8, x13, x9, x10)

inst_1262:
// fs1 == 0 and fe1 == 0xa8 and fm1 == 0x627706 and fs2 == 1 and fe2 == 0xa9 and fm2 == 0x0ec47c and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x54627706; op2val:0xd48ec47c;
   valaddr_reg:x12; val_offset:2482*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 2482*FLEN/8, x13, x9, x10)

inst_1263:
// fs1 == 0 and fe1 == 0xa8 and fm1 == 0x627706 and fs2 == 1 and fe2 == 0xa9 and fm2 == 0x0ec47c and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x54627706; op2val:0xd48ec47c;
   valaddr_reg:x12; val_offset:2484*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 2484*FLEN/8, x13, x9, x10)

inst_1264:
// fs1 == 0 and fe1 == 0xa8 and fm1 == 0x627706 and fs2 == 1 and fe2 == 0xa9 and fm2 == 0x0ec47c and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x54627706; op2val:0xd48ec47c;
   valaddr_reg:x12; val_offset:2486*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 2486*FLEN/8, x13, x9, x10)

inst_1265:
// fs1 == 0 and fe1 == 0xa8 and fm1 == 0x1c0ea3 and fs2 == 1 and fe2 == 0xa9 and fm2 == 0x31f8ae and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x541c0ea3; op2val:0xd4b1f8ae;
   valaddr_reg:x12; val_offset:2488*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 2488*FLEN/8, x13, x9, x10)

inst_1266:
// fs1 == 0 and fe1 == 0xa8 and fm1 == 0x1c0ea3 and fs2 == 1 and fe2 == 0xa9 and fm2 == 0x31f8ae and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x541c0ea3; op2val:0xd4b1f8ae;
   valaddr_reg:x12; val_offset:2490*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 2490*FLEN/8, x13, x9, x10)

inst_1267:
// fs1 == 0 and fe1 == 0xa8 and fm1 == 0x1c0ea3 and fs2 == 1 and fe2 == 0xa9 and fm2 == 0x31f8ae and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x541c0ea3; op2val:0xd4b1f8ae;
   valaddr_reg:x12; val_offset:2492*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 2492*FLEN/8, x13, x9, x10)

inst_1268:
// fs1 == 0 and fe1 == 0xa8 and fm1 == 0x1c0ea3 and fs2 == 1 and fe2 == 0xa9 and fm2 == 0x31f8ae and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x541c0ea3; op2val:0xd4b1f8ae;
   valaddr_reg:x12; val_offset:2494*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 2494*FLEN/8, x13, x9, x10)

inst_1269:
// fs1 == 0 and fe1 == 0xa8 and fm1 == 0x1c0ea3 and fs2 == 1 and fe2 == 0xa9 and fm2 == 0x31f8ae and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x541c0ea3; op2val:0xd4b1f8ae;
   valaddr_reg:x12; val_offset:2496*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 2496*FLEN/8, x13, x9, x10)

inst_1270:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x487869 and fs2 == 1 and fe2 == 0xa7 and fm2 == 0x5e1e5c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x54c87869; op2val:0xd3de1e5c;
   valaddr_reg:x12; val_offset:2498*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 2498*FLEN/8, x13, x9, x10)

inst_1271:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x487869 and fs2 == 1 and fe2 == 0xa7 and fm2 == 0x5e1e5c and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x54c87869; op2val:0xd3de1e5c;
   valaddr_reg:x12; val_offset:2500*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 2500*FLEN/8, x13, x9, x10)

inst_1272:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x487869 and fs2 == 1 and fe2 == 0xa7 and fm2 == 0x5e1e5c and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x54c87869; op2val:0xd3de1e5c;
   valaddr_reg:x12; val_offset:2502*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 2502*FLEN/8, x13, x9, x10)

inst_1273:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x487869 and fs2 == 1 and fe2 == 0xa7 and fm2 == 0x5e1e5c and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x54c87869; op2val:0xd3de1e5c;
   valaddr_reg:x12; val_offset:2504*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 2504*FLEN/8, x13, x9, x10)

inst_1274:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x487869 and fs2 == 1 and fe2 == 0xa7 and fm2 == 0x5e1e5c and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x54c87869; op2val:0xd3de1e5c;
   valaddr_reg:x12; val_offset:2506*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 2506*FLEN/8, x13, x9, x10)

inst_1275:
// fs1 == 0 and fe1 == 0xa8 and fm1 == 0x7c0ea2 and fs2 == 1 and fe2 == 0xa9 and fm2 == 0x01f8af and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x547c0ea2; op2val:0xd481f8af;
   valaddr_reg:x12; val_offset:2508*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 2508*FLEN/8, x13, x9, x10)

inst_1276:
// fs1 == 0 and fe1 == 0xa8 and fm1 == 0x7c0ea2 and fs2 == 1 and fe2 == 0xa9 and fm2 == 0x01f8af and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x547c0ea2; op2val:0xd481f8af;
   valaddr_reg:x12; val_offset:2510*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 2510*FLEN/8, x13, x9, x10)

inst_1277:
// fs1 == 0 and fe1 == 0xa8 and fm1 == 0x7c0ea2 and fs2 == 1 and fe2 == 0xa9 and fm2 == 0x01f8af and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x547c0ea2; op2val:0xd481f8af;
   valaddr_reg:x12; val_offset:2512*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 2512*FLEN/8, x13, x9, x10)

inst_1278:
// fs1 == 0 and fe1 == 0xa8 and fm1 == 0x7c0ea2 and fs2 == 1 and fe2 == 0xa9 and fm2 == 0x01f8af and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x547c0ea2; op2val:0xd481f8af;
   valaddr_reg:x12; val_offset:2514*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 2514*FLEN/8, x13, x9, x10)

inst_1279:
// fs1 == 0 and fe1 == 0xa8 and fm1 == 0x7c0ea2 and fs2 == 1 and fe2 == 0xa9 and fm2 == 0x01f8af and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x547c0ea2; op2val:0xd481f8af;
   valaddr_reg:x12; val_offset:2516*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 2516*FLEN/8, x13, x9, x10)

inst_1280:
// fs1 == 0 and fe1 == 0xa8 and fm1 == 0x414f4f and fs2 == 1 and fe2 == 0xa9 and fm2 == 0x1f5858 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x54414f4f; op2val:0xd49f5858;
   valaddr_reg:x12; val_offset:2518*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 2518*FLEN/8, x13, x9, x10)

inst_1281:
// fs1 == 0 and fe1 == 0xa8 and fm1 == 0x414f4f and fs2 == 1 and fe2 == 0xa9 and fm2 == 0x1f5858 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x54414f4f; op2val:0xd49f5858;
   valaddr_reg:x12; val_offset:2520*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 2520*FLEN/8, x13, x9, x10)

inst_1282:
// fs1 == 0 and fe1 == 0xa8 and fm1 == 0x414f4f and fs2 == 1 and fe2 == 0xa9 and fm2 == 0x1f5858 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x54414f4f; op2val:0xd49f5858;
   valaddr_reg:x12; val_offset:2522*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 2522*FLEN/8, x13, x9, x10)

inst_1283:
// fs1 == 0 and fe1 == 0xa8 and fm1 == 0x414f4f and fs2 == 1 and fe2 == 0xa9 and fm2 == 0x1f5858 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x54414f4f; op2val:0xd49f5858;
   valaddr_reg:x12; val_offset:2524*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 2524*FLEN/8, x13, x9, x10)

inst_1284:
// fs1 == 0 and fe1 == 0xa8 and fm1 == 0x414f4f and fs2 == 1 and fe2 == 0xa9 and fm2 == 0x1f5858 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x54414f4f; op2val:0xd49f5858;
   valaddr_reg:x12; val_offset:2526*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 2526*FLEN/8, x13, x9, x10)

inst_1285:
// fs1 == 0 and fe1 == 0xa1 and fm1 == 0x7dfec0 and fs2 == 1 and fe2 == 0xa9 and fm2 == 0x7f0201 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x50fdfec0; op2val:0xd4ff0201;
   valaddr_reg:x12; val_offset:2528*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 2528*FLEN/8, x13, x9, x10)

inst_1286:
// fs1 == 0 and fe1 == 0xa1 and fm1 == 0x7dfec0 and fs2 == 1 and fe2 == 0xa9 and fm2 == 0x7f0201 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x50fdfec0; op2val:0xd4ff0201;
   valaddr_reg:x12; val_offset:2530*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 2530*FLEN/8, x13, x9, x10)

inst_1287:
// fs1 == 0 and fe1 == 0xa1 and fm1 == 0x7dfec0 and fs2 == 1 and fe2 == 0xa9 and fm2 == 0x7f0201 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x50fdfec0; op2val:0xd4ff0201;
   valaddr_reg:x12; val_offset:2532*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 2532*FLEN/8, x13, x9, x10)

inst_1288:
// fs1 == 0 and fe1 == 0xa1 and fm1 == 0x7dfec0 and fs2 == 1 and fe2 == 0xa9 and fm2 == 0x7f0201 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x50fdfec0; op2val:0xd4ff0201;
   valaddr_reg:x12; val_offset:2534*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 2534*FLEN/8, x13, x9, x10)

inst_1289:
// fs1 == 0 and fe1 == 0xa1 and fm1 == 0x7dfec0 and fs2 == 1 and fe2 == 0xa9 and fm2 == 0x7f0201 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x50fdfec0; op2val:0xd4ff0201;
   valaddr_reg:x12; val_offset:2536*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 2536*FLEN/8, x13, x9, x10)

inst_1290:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x19214a and fs2 == 1 and fe2 == 0xa8 and fm2 == 0x4dbd6c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x5499214a; op2val:0xd44dbd6c;
   valaddr_reg:x12; val_offset:2538*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 2538*FLEN/8, x13, x9, x10)

inst_1291:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x19214a and fs2 == 1 and fe2 == 0xa8 and fm2 == 0x4dbd6c and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x5499214a; op2val:0xd44dbd6c;
   valaddr_reg:x12; val_offset:2540*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 2540*FLEN/8, x13, x9, x10)

inst_1292:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x19214a and fs2 == 1 and fe2 == 0xa8 and fm2 == 0x4dbd6c and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x5499214a; op2val:0xd44dbd6c;
   valaddr_reg:x12; val_offset:2542*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 2542*FLEN/8, x13, x9, x10)

inst_1293:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x19214a and fs2 == 1 and fe2 == 0xa8 and fm2 == 0x4dbd6c and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x5499214a; op2val:0xd44dbd6c;
   valaddr_reg:x12; val_offset:2544*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 2544*FLEN/8, x13, x9, x10)

inst_1294:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x19214a and fs2 == 1 and fe2 == 0xa8 and fm2 == 0x4dbd6c and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x5499214a; op2val:0xd44dbd6c;
   valaddr_reg:x12; val_offset:2546*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 2546*FLEN/8, x13, x9, x10)

inst_1295:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x5454f3 and fs2 == 1 and fe2 == 0xa7 and fm2 == 0x2eac32 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x54d454f3; op2val:0xd3aeac32;
   valaddr_reg:x12; val_offset:2548*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 2548*FLEN/8, x13, x9, x10)

inst_1296:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x5454f3 and fs2 == 1 and fe2 == 0xa7 and fm2 == 0x2eac32 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x54d454f3; op2val:0xd3aeac32;
   valaddr_reg:x12; val_offset:2550*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 2550*FLEN/8, x13, x9, x10)

inst_1297:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x5454f3 and fs2 == 1 and fe2 == 0xa7 and fm2 == 0x2eac32 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x54d454f3; op2val:0xd3aeac32;
   valaddr_reg:x12; val_offset:2552*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 2552*FLEN/8, x13, x9, x10)

inst_1298:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x5454f3 and fs2 == 1 and fe2 == 0xa7 and fm2 == 0x2eac32 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x54d454f3; op2val:0xd3aeac32;
   valaddr_reg:x12; val_offset:2554*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 2554*FLEN/8, x13, x9, x10)

inst_1299:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x5454f3 and fs2 == 1 and fe2 == 0xa7 and fm2 == 0x2eac32 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x54d454f3; op2val:0xd3aeac32;
   valaddr_reg:x12; val_offset:2556*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 2556*FLEN/8, x13, x9, x10)

inst_1300:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x7cad39 and fs2 == 1 and fe2 == 0xa3 and fm2 == 0x54b1d9 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x54fcad39; op2val:0xd1d4b1d9;
   valaddr_reg:x12; val_offset:2558*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 2558*FLEN/8, x13, x9, x10)

inst_1301:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x7cad39 and fs2 == 1 and fe2 == 0xa3 and fm2 == 0x54b1d9 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x54fcad39; op2val:0xd1d4b1d9;
   valaddr_reg:x12; val_offset:2560*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 2560*FLEN/8, x13, x9, x10)

inst_1302:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x7cad39 and fs2 == 1 and fe2 == 0xa3 and fm2 == 0x54b1d9 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x54fcad39; op2val:0xd1d4b1d9;
   valaddr_reg:x12; val_offset:2562*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 2562*FLEN/8, x13, x9, x10)

inst_1303:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x7cad39 and fs2 == 1 and fe2 == 0xa3 and fm2 == 0x54b1d9 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x54fcad39; op2val:0xd1d4b1d9;
   valaddr_reg:x12; val_offset:2564*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 2564*FLEN/8, x13, x9, x10)
RVTEST_SIGBASE(x9,signature_x9_10)

inst_1304:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x7cad39 and fs2 == 1 and fe2 == 0xa3 and fm2 == 0x54b1d9 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x54fcad39; op2val:0xd1d4b1d9;
   valaddr_reg:x12; val_offset:2566*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 2566*FLEN/8, x13, x9, x10)

inst_1305:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x55a7eb and fs2 == 1 and fe2 == 0xa7 and fm2 == 0x296053 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x54d5a7eb; op2val:0xd3a96053;
   valaddr_reg:x12; val_offset:2568*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 2568*FLEN/8, x13, x9, x10)

inst_1306:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x55a7eb and fs2 == 1 and fe2 == 0xa7 and fm2 == 0x296053 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x54d5a7eb; op2val:0xd3a96053;
   valaddr_reg:x12; val_offset:2570*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 2570*FLEN/8, x13, x9, x10)

inst_1307:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x55a7eb and fs2 == 1 and fe2 == 0xa7 and fm2 == 0x296053 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x54d5a7eb; op2val:0xd3a96053;
   valaddr_reg:x12; val_offset:2572*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 2572*FLEN/8, x13, x9, x10)

inst_1308:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x55a7eb and fs2 == 1 and fe2 == 0xa7 and fm2 == 0x296053 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x54d5a7eb; op2val:0xd3a96053;
   valaddr_reg:x12; val_offset:2574*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 2574*FLEN/8, x13, x9, x10)

inst_1309:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x55a7eb and fs2 == 1 and fe2 == 0xa7 and fm2 == 0x296053 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x54d5a7eb; op2val:0xd3a96053;
   valaddr_reg:x12; val_offset:2576*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 2576*FLEN/8, x13, x9, x10)

inst_1310:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x3ea01d and fs2 == 1 and fe2 == 0xa8 and fm2 == 0x02bfc6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x54bea01d; op2val:0xd402bfc6;
   valaddr_reg:x12; val_offset:2578*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 2578*FLEN/8, x13, x9, x10)

inst_1311:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x3ea01d and fs2 == 1 and fe2 == 0xa8 and fm2 == 0x02bfc6 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x54bea01d; op2val:0xd402bfc6;
   valaddr_reg:x12; val_offset:2580*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 2580*FLEN/8, x13, x9, x10)

inst_1312:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x3ea01d and fs2 == 1 and fe2 == 0xa8 and fm2 == 0x02bfc6 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x54bea01d; op2val:0xd402bfc6;
   valaddr_reg:x12; val_offset:2582*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 2582*FLEN/8, x13, x9, x10)

inst_1313:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x3ea01d and fs2 == 1 and fe2 == 0xa8 and fm2 == 0x02bfc6 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x54bea01d; op2val:0xd402bfc6;
   valaddr_reg:x12; val_offset:2584*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 2584*FLEN/8, x13, x9, x10)

inst_1314:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x3ea01d and fs2 == 1 and fe2 == 0xa8 and fm2 == 0x02bfc6 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x54bea01d; op2val:0xd402bfc6;
   valaddr_reg:x12; val_offset:2586*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 2586*FLEN/8, x13, x9, x10)

inst_1315:
// fs1 == 0 and fe1 == 0xa8 and fm1 == 0x1c5514 and fs2 == 1 and fe2 == 0xa9 and fm2 == 0x31d576 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x541c5514; op2val:0xd4b1d576;
   valaddr_reg:x12; val_offset:2588*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 2588*FLEN/8, x13, x9, x10)

inst_1316:
// fs1 == 0 and fe1 == 0xa8 and fm1 == 0x1c5514 and fs2 == 1 and fe2 == 0xa9 and fm2 == 0x31d576 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x541c5514; op2val:0xd4b1d576;
   valaddr_reg:x12; val_offset:2590*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 2590*FLEN/8, x13, x9, x10)

inst_1317:
// fs1 == 0 and fe1 == 0xa8 and fm1 == 0x1c5514 and fs2 == 1 and fe2 == 0xa9 and fm2 == 0x31d576 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x541c5514; op2val:0xd4b1d576;
   valaddr_reg:x12; val_offset:2592*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 2592*FLEN/8, x13, x9, x10)

inst_1318:
// fs1 == 0 and fe1 == 0xa8 and fm1 == 0x1c5514 and fs2 == 1 and fe2 == 0xa9 and fm2 == 0x31d576 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x541c5514; op2val:0xd4b1d576;
   valaddr_reg:x12; val_offset:2594*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 2594*FLEN/8, x13, x9, x10)

inst_1319:
// fs1 == 0 and fe1 == 0xa8 and fm1 == 0x1c5514 and fs2 == 1 and fe2 == 0xa9 and fm2 == 0x31d576 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x541c5514; op2val:0xd4b1d576;
   valaddr_reg:x12; val_offset:2596*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 2596*FLEN/8, x13, x9, x10)

inst_1320:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x1eba88 and fs2 == 1 and fe2 == 0xa8 and fm2 == 0x428af1 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x549eba88; op2val:0xd4428af1;
   valaddr_reg:x12; val_offset:2598*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 2598*FLEN/8, x13, x9, x10)

inst_1321:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x1eba88 and fs2 == 1 and fe2 == 0xa8 and fm2 == 0x428af1 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x549eba88; op2val:0xd4428af1;
   valaddr_reg:x12; val_offset:2600*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 2600*FLEN/8, x13, x9, x10)

inst_1322:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x1eba88 and fs2 == 1 and fe2 == 0xa8 and fm2 == 0x428af1 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x549eba88; op2val:0xd4428af1;
   valaddr_reg:x12; val_offset:2602*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 2602*FLEN/8, x13, x9, x10)

inst_1323:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x1eba88 and fs2 == 1 and fe2 == 0xa8 and fm2 == 0x428af1 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x549eba88; op2val:0xd4428af1;
   valaddr_reg:x12; val_offset:2604*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 2604*FLEN/8, x13, x9, x10)

inst_1324:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x1eba88 and fs2 == 1 and fe2 == 0xa8 and fm2 == 0x428af1 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x549eba88; op2val:0xd4428af1;
   valaddr_reg:x12; val_offset:2606*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 2606*FLEN/8, x13, x9, x10)

inst_1325:
// fs1 == 0 and fe1 == 0xa8 and fm1 == 0x38062a and fs2 == 1 and fe2 == 0xa9 and fm2 == 0x23fceb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x5438062a; op2val:0xd4a3fceb;
   valaddr_reg:x12; val_offset:2608*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 2608*FLEN/8, x13, x9, x10)

inst_1326:
// fs1 == 0 and fe1 == 0xa8 and fm1 == 0x38062a and fs2 == 1 and fe2 == 0xa9 and fm2 == 0x23fceb and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x5438062a; op2val:0xd4a3fceb;
   valaddr_reg:x12; val_offset:2610*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 2610*FLEN/8, x13, x9, x10)

inst_1327:
// fs1 == 0 and fe1 == 0xa8 and fm1 == 0x38062a and fs2 == 1 and fe2 == 0xa9 and fm2 == 0x23fceb and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x5438062a; op2val:0xd4a3fceb;
   valaddr_reg:x12; val_offset:2612*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 2612*FLEN/8, x13, x9, x10)

inst_1328:
// fs1 == 0 and fe1 == 0xa8 and fm1 == 0x38062a and fs2 == 1 and fe2 == 0xa9 and fm2 == 0x23fceb and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x5438062a; op2val:0xd4a3fceb;
   valaddr_reg:x12; val_offset:2614*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 2614*FLEN/8, x13, x9, x10)

inst_1329:
// fs1 == 0 and fe1 == 0xa8 and fm1 == 0x38062a and fs2 == 1 and fe2 == 0xa9 and fm2 == 0x23fceb and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x5438062a; op2val:0xd4a3fceb;
   valaddr_reg:x12; val_offset:2616*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 2616*FLEN/8, x13, x9, x10)

inst_1330:
// fs1 == 0 and fe1 == 0xa8 and fm1 == 0x474053 and fs2 == 1 and fe2 == 0xa9 and fm2 == 0x1c5fd6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x54474053; op2val:0xd49c5fd6;
   valaddr_reg:x12; val_offset:2618*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 2618*FLEN/8, x13, x9, x10)

inst_1331:
// fs1 == 0 and fe1 == 0xa8 and fm1 == 0x474053 and fs2 == 1 and fe2 == 0xa9 and fm2 == 0x1c5fd6 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x54474053; op2val:0xd49c5fd6;
   valaddr_reg:x12; val_offset:2620*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 2620*FLEN/8, x13, x9, x10)

inst_1332:
// fs1 == 0 and fe1 == 0xa8 and fm1 == 0x474053 and fs2 == 1 and fe2 == 0xa9 and fm2 == 0x1c5fd6 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x54474053; op2val:0xd49c5fd6;
   valaddr_reg:x12; val_offset:2622*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 2622*FLEN/8, x13, x9, x10)

inst_1333:
// fs1 == 0 and fe1 == 0xa8 and fm1 == 0x474053 and fs2 == 1 and fe2 == 0xa9 and fm2 == 0x1c5fd6 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x54474053; op2val:0xd49c5fd6;
   valaddr_reg:x12; val_offset:2624*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 2624*FLEN/8, x13, x9, x10)

inst_1334:
// fs1 == 0 and fe1 == 0xa8 and fm1 == 0x474053 and fs2 == 1 and fe2 == 0xa9 and fm2 == 0x1c5fd6 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x54474053; op2val:0xd49c5fd6;
   valaddr_reg:x12; val_offset:2626*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 2626*FLEN/8, x13, x9, x10)

inst_1335:
// fs1 == 0 and fe1 == 0xa8 and fm1 == 0x4f7d33 and fs2 == 1 and fe2 == 0xa9 and fm2 == 0x184166 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x544f7d33; op2val:0xd4984166;
   valaddr_reg:x12; val_offset:2628*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 2628*FLEN/8, x13, x9, x10)

inst_1336:
// fs1 == 0 and fe1 == 0xa8 and fm1 == 0x4f7d33 and fs2 == 1 and fe2 == 0xa9 and fm2 == 0x184166 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x544f7d33; op2val:0xd4984166;
   valaddr_reg:x12; val_offset:2630*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 2630*FLEN/8, x13, x9, x10)

inst_1337:
// fs1 == 0 and fe1 == 0xa8 and fm1 == 0x4f7d33 and fs2 == 1 and fe2 == 0xa9 and fm2 == 0x184166 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x544f7d33; op2val:0xd4984166;
   valaddr_reg:x12; val_offset:2632*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 2632*FLEN/8, x13, x9, x10)

inst_1338:
// fs1 == 0 and fe1 == 0xa8 and fm1 == 0x4f7d33 and fs2 == 1 and fe2 == 0xa9 and fm2 == 0x184166 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x544f7d33; op2val:0xd4984166;
   valaddr_reg:x12; val_offset:2634*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 2634*FLEN/8, x13, x9, x10)

inst_1339:
// fs1 == 0 and fe1 == 0xa8 and fm1 == 0x4f7d33 and fs2 == 1 and fe2 == 0xa9 and fm2 == 0x184166 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x544f7d33; op2val:0xd4984166;
   valaddr_reg:x12; val_offset:2636*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 2636*FLEN/8, x13, x9, x10)

inst_1340:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x159d13 and fs2 == 1 and fe2 == 0xa8 and fm2 == 0x54c5d9 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x54959d13; op2val:0xd454c5d9;
   valaddr_reg:x12; val_offset:2638*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 2638*FLEN/8, x13, x9, x10)

inst_1341:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x159d13 and fs2 == 1 and fe2 == 0xa8 and fm2 == 0x54c5d9 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x54959d13; op2val:0xd454c5d9;
   valaddr_reg:x12; val_offset:2640*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 2640*FLEN/8, x13, x9, x10)

inst_1342:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x159d13 and fs2 == 1 and fe2 == 0xa8 and fm2 == 0x54c5d9 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x54959d13; op2val:0xd454c5d9;
   valaddr_reg:x12; val_offset:2642*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 2642*FLEN/8, x13, x9, x10)

inst_1343:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x159d13 and fs2 == 1 and fe2 == 0xa8 and fm2 == 0x54c5d9 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x54959d13; op2val:0xd454c5d9;
   valaddr_reg:x12; val_offset:2644*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 2644*FLEN/8, x13, x9, x10)

inst_1344:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x159d13 and fs2 == 1 and fe2 == 0xa8 and fm2 == 0x54c5d9 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x54959d13; op2val:0xd454c5d9;
   valaddr_reg:x12; val_offset:2646*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 2646*FLEN/8, x13, x9, x10)

inst_1345:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x65dd60 and fs2 == 1 and fe2 == 0xa6 and fm2 == 0x5114ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x54e5dd60; op2val:0xd35114ff;
   valaddr_reg:x12; val_offset:2648*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 2648*FLEN/8, x13, x9, x10)

inst_1346:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x65dd60 and fs2 == 1 and fe2 == 0xa6 and fm2 == 0x5114ff and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x54e5dd60; op2val:0xd35114ff;
   valaddr_reg:x12; val_offset:2650*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 2650*FLEN/8, x13, x9, x10)

inst_1347:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x65dd60 and fs2 == 1 and fe2 == 0xa6 and fm2 == 0x5114ff and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x54e5dd60; op2val:0xd35114ff;
   valaddr_reg:x12; val_offset:2652*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 2652*FLEN/8, x13, x9, x10)

inst_1348:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x65dd60 and fs2 == 1 and fe2 == 0xa6 and fm2 == 0x5114ff and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x54e5dd60; op2val:0xd35114ff;
   valaddr_reg:x12; val_offset:2654*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 2654*FLEN/8, x13, x9, x10)

inst_1349:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x65dd60 and fs2 == 1 and fe2 == 0xa6 and fm2 == 0x5114ff and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x54e5dd60; op2val:0xd35114ff;
   valaddr_reg:x12; val_offset:2656*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 2656*FLEN/8, x13, x9, x10)

inst_1350:
// fs1 == 0 and fe1 == 0xa8 and fm1 == 0x7c4371 and fs2 == 1 and fe2 == 0xa9 and fm2 == 0x01de47 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x547c4371; op2val:0xd481de47;
   valaddr_reg:x12; val_offset:2658*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 2658*FLEN/8, x13, x9, x10)

inst_1351:
// fs1 == 0 and fe1 == 0xa8 and fm1 == 0x7c4371 and fs2 == 1 and fe2 == 0xa9 and fm2 == 0x01de47 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x547c4371; op2val:0xd481de47;
   valaddr_reg:x12; val_offset:2660*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 2660*FLEN/8, x13, x9, x10)

inst_1352:
// fs1 == 0 and fe1 == 0xa8 and fm1 == 0x7c4371 and fs2 == 1 and fe2 == 0xa9 and fm2 == 0x01de47 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x547c4371; op2val:0xd481de47;
   valaddr_reg:x12; val_offset:2662*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 2662*FLEN/8, x13, x9, x10)

inst_1353:
// fs1 == 0 and fe1 == 0xa8 and fm1 == 0x7c4371 and fs2 == 1 and fe2 == 0xa9 and fm2 == 0x01de47 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x547c4371; op2val:0xd481de47;
   valaddr_reg:x12; val_offset:2664*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 2664*FLEN/8, x13, x9, x10)

inst_1354:
// fs1 == 0 and fe1 == 0xa8 and fm1 == 0x7c4371 and fs2 == 1 and fe2 == 0xa9 and fm2 == 0x01de47 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x547c4371; op2val:0xd481de47;
   valaddr_reg:x12; val_offset:2666*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 2666*FLEN/8, x13, x9, x10)

inst_1355:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x23ee55 and fs2 == 1 and fe2 == 0xa8 and fm2 == 0x382356 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x54a3ee55; op2val:0xd4382356;
   valaddr_reg:x12; val_offset:2668*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 2668*FLEN/8, x13, x9, x10)

inst_1356:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x23ee55 and fs2 == 1 and fe2 == 0xa8 and fm2 == 0x382356 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x54a3ee55; op2val:0xd4382356;
   valaddr_reg:x12; val_offset:2670*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 2670*FLEN/8, x13, x9, x10)

inst_1357:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x23ee55 and fs2 == 1 and fe2 == 0xa8 and fm2 == 0x382356 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x54a3ee55; op2val:0xd4382356;
   valaddr_reg:x12; val_offset:2672*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 2672*FLEN/8, x13, x9, x10)

inst_1358:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x23ee55 and fs2 == 1 and fe2 == 0xa8 and fm2 == 0x382356 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x54a3ee55; op2val:0xd4382356;
   valaddr_reg:x12; val_offset:2674*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 2674*FLEN/8, x13, x9, x10)

inst_1359:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x23ee55 and fs2 == 1 and fe2 == 0xa8 and fm2 == 0x382356 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x54a3ee55; op2val:0xd4382356;
   valaddr_reg:x12; val_offset:2676*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 2676*FLEN/8, x13, x9, x10)

inst_1360:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x213267 and fs2 == 1 and fe2 == 0xa8 and fm2 == 0x3d9b31 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x54a13267; op2val:0xd43d9b31;
   valaddr_reg:x12; val_offset:2678*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 2678*FLEN/8, x13, x9, x10)

inst_1361:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x213267 and fs2 == 1 and fe2 == 0xa8 and fm2 == 0x3d9b31 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x54a13267; op2val:0xd43d9b31;
   valaddr_reg:x12; val_offset:2680*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 2680*FLEN/8, x13, x9, x10)

inst_1362:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x213267 and fs2 == 1 and fe2 == 0xa8 and fm2 == 0x3d9b31 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x54a13267; op2val:0xd43d9b31;
   valaddr_reg:x12; val_offset:2682*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 2682*FLEN/8, x13, x9, x10)

inst_1363:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x213267 and fs2 == 1 and fe2 == 0xa8 and fm2 == 0x3d9b31 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x54a13267; op2val:0xd43d9b31;
   valaddr_reg:x12; val_offset:2684*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 2684*FLEN/8, x13, x9, x10)

inst_1364:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x213267 and fs2 == 1 and fe2 == 0xa8 and fm2 == 0x3d9b31 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x54a13267; op2val:0xd43d9b31;
   valaddr_reg:x12; val_offset:2686*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 2686*FLEN/8, x13, x9, x10)

inst_1365:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x211751 and fs2 == 1 and fe2 == 0xa8 and fm2 == 0x3dd15e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x54a11751; op2val:0xd43dd15e;
   valaddr_reg:x12; val_offset:2688*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 2688*FLEN/8, x13, x9, x10)

inst_1366:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x211751 and fs2 == 1 and fe2 == 0xa8 and fm2 == 0x3dd15e and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x54a11751; op2val:0xd43dd15e;
   valaddr_reg:x12; val_offset:2690*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 2690*FLEN/8, x13, x9, x10)

inst_1367:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x211751 and fs2 == 1 and fe2 == 0xa8 and fm2 == 0x3dd15e and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x54a11751; op2val:0xd43dd15e;
   valaddr_reg:x12; val_offset:2692*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 2692*FLEN/8, x13, x9, x10)

inst_1368:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x211751 and fs2 == 1 and fe2 == 0xa8 and fm2 == 0x3dd15e and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x54a11751; op2val:0xd43dd15e;
   valaddr_reg:x12; val_offset:2694*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 2694*FLEN/8, x13, x9, x10)

inst_1369:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x211751 and fs2 == 1 and fe2 == 0xa8 and fm2 == 0x3dd15e and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x54a11751; op2val:0xd43dd15e;
   valaddr_reg:x12; val_offset:2696*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 2696*FLEN/8, x13, x9, x10)

inst_1370:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x6fe6f7 and fs2 == 1 and fe2 == 0xa6 and fm2 == 0x00c84c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x54efe6f7; op2val:0xd300c84c;
   valaddr_reg:x12; val_offset:2698*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 2698*FLEN/8, x13, x9, x10)

inst_1371:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x6fe6f7 and fs2 == 1 and fe2 == 0xa6 and fm2 == 0x00c84c and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x54efe6f7; op2val:0xd300c84c;
   valaddr_reg:x12; val_offset:2700*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 2700*FLEN/8, x13, x9, x10)

inst_1372:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x6fe6f7 and fs2 == 1 and fe2 == 0xa6 and fm2 == 0x00c84c and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x54efe6f7; op2val:0xd300c84c;
   valaddr_reg:x12; val_offset:2702*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 2702*FLEN/8, x13, x9, x10)

inst_1373:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x6fe6f7 and fs2 == 1 and fe2 == 0xa6 and fm2 == 0x00c84c and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x54efe6f7; op2val:0xd300c84c;
   valaddr_reg:x12; val_offset:2704*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 2704*FLEN/8, x13, x9, x10)

inst_1374:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x6fe6f7 and fs2 == 1 and fe2 == 0xa6 and fm2 == 0x00c84c and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x54efe6f7; op2val:0xd300c84c;
   valaddr_reg:x12; val_offset:2706*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 2706*FLEN/8, x13, x9, x10)

inst_1375:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x58a506 and fs2 == 1 and fe2 == 0xa7 and fm2 == 0x1d6be7 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x54d8a506; op2val:0xd39d6be7;
   valaddr_reg:x12; val_offset:2708*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 2708*FLEN/8, x13, x9, x10)

inst_1376:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x58a506 and fs2 == 1 and fe2 == 0xa7 and fm2 == 0x1d6be7 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x54d8a506; op2val:0xd39d6be7;
   valaddr_reg:x12; val_offset:2710*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 2710*FLEN/8, x13, x9, x10)

inst_1377:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x58a506 and fs2 == 1 and fe2 == 0xa7 and fm2 == 0x1d6be7 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x54d8a506; op2val:0xd39d6be7;
   valaddr_reg:x12; val_offset:2712*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 2712*FLEN/8, x13, x9, x10)

inst_1378:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x58a506 and fs2 == 1 and fe2 == 0xa7 and fm2 == 0x1d6be7 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x54d8a506; op2val:0xd39d6be7;
   valaddr_reg:x12; val_offset:2714*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 2714*FLEN/8, x13, x9, x10)

inst_1379:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x58a506 and fs2 == 1 and fe2 == 0xa7 and fm2 == 0x1d6be7 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x54d8a506; op2val:0xd39d6be7;
   valaddr_reg:x12; val_offset:2716*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 2716*FLEN/8, x13, x9, x10)

inst_1380:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x50b932 and fs2 == 1 and fe2 == 0xa7 and fm2 == 0x3d1b38 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x54d0b932; op2val:0xd3bd1b38;
   valaddr_reg:x12; val_offset:2718*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 2718*FLEN/8, x13, x9, x10)

inst_1381:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x50b932 and fs2 == 1 and fe2 == 0xa7 and fm2 == 0x3d1b38 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x54d0b932; op2val:0xd3bd1b38;
   valaddr_reg:x12; val_offset:2720*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 2720*FLEN/8, x13, x9, x10)

inst_1382:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x50b932 and fs2 == 1 and fe2 == 0xa7 and fm2 == 0x3d1b38 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x54d0b932; op2val:0xd3bd1b38;
   valaddr_reg:x12; val_offset:2722*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 2722*FLEN/8, x13, x9, x10)

inst_1383:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x50b932 and fs2 == 1 and fe2 == 0xa7 and fm2 == 0x3d1b38 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x54d0b932; op2val:0xd3bd1b38;
   valaddr_reg:x12; val_offset:2724*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 2724*FLEN/8, x13, x9, x10)

inst_1384:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x50b932 and fs2 == 1 and fe2 == 0xa7 and fm2 == 0x3d1b38 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x54d0b932; op2val:0xd3bd1b38;
   valaddr_reg:x12; val_offset:2726*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 2726*FLEN/8, x13, x9, x10)

inst_1385:
// fs1 == 0 and fe1 == 0xa8 and fm1 == 0x32eb1f and fs2 == 1 and fe2 == 0xa9 and fm2 == 0x268a70 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x5432eb1f; op2val:0xd4a68a70;
   valaddr_reg:x12; val_offset:2728*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 2728*FLEN/8, x13, x9, x10)

inst_1386:
// fs1 == 0 and fe1 == 0xa8 and fm1 == 0x32eb1f and fs2 == 1 and fe2 == 0xa9 and fm2 == 0x268a70 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x5432eb1f; op2val:0xd4a68a70;
   valaddr_reg:x12; val_offset:2730*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 2730*FLEN/8, x13, x9, x10)

inst_1387:
// fs1 == 0 and fe1 == 0xa8 and fm1 == 0x32eb1f and fs2 == 1 and fe2 == 0xa9 and fm2 == 0x268a70 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x5432eb1f; op2val:0xd4a68a70;
   valaddr_reg:x12; val_offset:2732*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 2732*FLEN/8, x13, x9, x10)

inst_1388:
// fs1 == 0 and fe1 == 0xa8 and fm1 == 0x32eb1f and fs2 == 1 and fe2 == 0xa9 and fm2 == 0x268a70 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x5432eb1f; op2val:0xd4a68a70;
   valaddr_reg:x12; val_offset:2734*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 2734*FLEN/8, x13, x9, x10)

inst_1389:
// fs1 == 0 and fe1 == 0xa8 and fm1 == 0x32eb1f and fs2 == 1 and fe2 == 0xa9 and fm2 == 0x268a70 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x5432eb1f; op2val:0xd4a68a70;
   valaddr_reg:x12; val_offset:2736*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 2736*FLEN/8, x13, x9, x10)

inst_1390:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x3540cd and fs2 == 1 and fe2 == 0xa8 and fm2 == 0x157e66 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x54b540cd; op2val:0xd4157e66;
   valaddr_reg:x12; val_offset:2738*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 2738*FLEN/8, x13, x9, x10)

inst_1391:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x3540cd and fs2 == 1 and fe2 == 0xa8 and fm2 == 0x157e66 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x54b540cd; op2val:0xd4157e66;
   valaddr_reg:x12; val_offset:2740*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 2740*FLEN/8, x13, x9, x10)

inst_1392:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x3540cd and fs2 == 1 and fe2 == 0xa8 and fm2 == 0x157e66 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x54b540cd; op2val:0xd4157e66;
   valaddr_reg:x12; val_offset:2742*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 2742*FLEN/8, x13, x9, x10)

inst_1393:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x3540cd and fs2 == 1 and fe2 == 0xa8 and fm2 == 0x157e66 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x54b540cd; op2val:0xd4157e66;
   valaddr_reg:x12; val_offset:2744*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 2744*FLEN/8, x13, x9, x10)

inst_1394:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x3540cd and fs2 == 1 and fe2 == 0xa8 and fm2 == 0x157e66 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x54b540cd; op2val:0xd4157e66;
   valaddr_reg:x12; val_offset:2746*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 2746*FLEN/8, x13, x9, x10)

inst_1395:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x0b53c1 and fs2 == 1 and fe2 == 0xa8 and fm2 == 0x69587e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x548b53c1; op2val:0xd469587e;
   valaddr_reg:x12; val_offset:2748*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 2748*FLEN/8, x13, x9, x10)

inst_1396:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x0b53c1 and fs2 == 1 and fe2 == 0xa8 and fm2 == 0x69587e and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x548b53c1; op2val:0xd469587e;
   valaddr_reg:x12; val_offset:2750*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 2750*FLEN/8, x13, x9, x10)

inst_1397:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x0b53c1 and fs2 == 1 and fe2 == 0xa8 and fm2 == 0x69587e and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x548b53c1; op2val:0xd469587e;
   valaddr_reg:x12; val_offset:2752*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 2752*FLEN/8, x13, x9, x10)

inst_1398:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x0b53c1 and fs2 == 1 and fe2 == 0xa8 and fm2 == 0x69587e and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x548b53c1; op2val:0xd469587e;
   valaddr_reg:x12; val_offset:2754*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 2754*FLEN/8, x13, x9, x10)

inst_1399:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x0b53c1 and fs2 == 1 and fe2 == 0xa8 and fm2 == 0x69587e and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x548b53c1; op2val:0xd469587e;
   valaddr_reg:x12; val_offset:2756*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 2756*FLEN/8, x13, x9, x10)

inst_1400:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x553dde and fs2 == 1 and fe2 == 0xa7 and fm2 == 0x2b0886 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x54d53dde; op2val:0xd3ab0886;
   valaddr_reg:x12; val_offset:2758*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 2758*FLEN/8, x13, x9, x10)

inst_1401:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x553dde and fs2 == 1 and fe2 == 0xa7 and fm2 == 0x2b0886 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x54d53dde; op2val:0xd3ab0886;
   valaddr_reg:x12; val_offset:2760*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 2760*FLEN/8, x13, x9, x10)

inst_1402:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x553dde and fs2 == 1 and fe2 == 0xa7 and fm2 == 0x2b0886 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x54d53dde; op2val:0xd3ab0886;
   valaddr_reg:x12; val_offset:2762*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 2762*FLEN/8, x13, x9, x10)

inst_1403:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x553dde and fs2 == 1 and fe2 == 0xa7 and fm2 == 0x2b0886 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x54d53dde; op2val:0xd3ab0886;
   valaddr_reg:x12; val_offset:2764*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 2764*FLEN/8, x13, x9, x10)

inst_1404:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x553dde and fs2 == 1 and fe2 == 0xa7 and fm2 == 0x2b0886 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x54d53dde; op2val:0xd3ab0886;
   valaddr_reg:x12; val_offset:2766*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 2766*FLEN/8, x13, x9, x10)

inst_1405:
// fs1 == 0 and fe1 == 0xa8 and fm1 == 0x6f2813 and fs2 == 1 and fe2 == 0xa9 and fm2 == 0x086bf6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x546f2813; op2val:0xd4886bf6;
   valaddr_reg:x12; val_offset:2768*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 2768*FLEN/8, x13, x9, x10)

inst_1406:
// fs1 == 0 and fe1 == 0xa8 and fm1 == 0x6f2813 and fs2 == 1 and fe2 == 0xa9 and fm2 == 0x086bf6 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x546f2813; op2val:0xd4886bf6;
   valaddr_reg:x12; val_offset:2770*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 2770*FLEN/8, x13, x9, x10)

inst_1407:
// fs1 == 0 and fe1 == 0xa8 and fm1 == 0x6f2813 and fs2 == 1 and fe2 == 0xa9 and fm2 == 0x086bf6 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x546f2813; op2val:0xd4886bf6;
   valaddr_reg:x12; val_offset:2772*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 2772*FLEN/8, x13, x9, x10)

inst_1408:
// fs1 == 0 and fe1 == 0xa8 and fm1 == 0x6f2813 and fs2 == 1 and fe2 == 0xa9 and fm2 == 0x086bf6 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x546f2813; op2val:0xd4886bf6;
   valaddr_reg:x12; val_offset:2774*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 2774*FLEN/8, x13, x9, x10)

inst_1409:
// fs1 == 0 and fe1 == 0xa8 and fm1 == 0x6f2813 and fs2 == 1 and fe2 == 0xa9 and fm2 == 0x086bf6 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x546f2813; op2val:0xd4886bf6;
   valaddr_reg:x12; val_offset:2776*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 2776*FLEN/8, x13, x9, x10)

inst_1410:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x02a1c5 and fs2 == 1 and fe2 == 0xa8 and fm2 == 0x7abc75 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x5482a1c5; op2val:0xd47abc75;
   valaddr_reg:x12; val_offset:2778*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 2778*FLEN/8, x13, x9, x10)

inst_1411:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x02a1c5 and fs2 == 1 and fe2 == 0xa8 and fm2 == 0x7abc75 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x5482a1c5; op2val:0xd47abc75;
   valaddr_reg:x12; val_offset:2780*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 2780*FLEN/8, x13, x9, x10)

inst_1412:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x02a1c5 and fs2 == 1 and fe2 == 0xa8 and fm2 == 0x7abc75 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x5482a1c5; op2val:0xd47abc75;
   valaddr_reg:x12; val_offset:2782*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 2782*FLEN/8, x13, x9, x10)

inst_1413:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x02a1c5 and fs2 == 1 and fe2 == 0xa8 and fm2 == 0x7abc75 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x5482a1c5; op2val:0xd47abc75;
   valaddr_reg:x12; val_offset:2784*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 2784*FLEN/8, x13, x9, x10)

inst_1414:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x02a1c5 and fs2 == 1 and fe2 == 0xa8 and fm2 == 0x7abc75 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x5482a1c5; op2val:0xd47abc75;
   valaddr_reg:x12; val_offset:2786*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 2786*FLEN/8, x13, x9, x10)

inst_1415:
// fs1 == 0 and fe1 == 0xa8 and fm1 == 0x585ebd and fs2 == 1 and fe2 == 0xa9 and fm2 == 0x13d0a1 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x54585ebd; op2val:0xd493d0a1;
   valaddr_reg:x12; val_offset:2788*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 2788*FLEN/8, x13, x9, x10)

inst_1416:
// fs1 == 0 and fe1 == 0xa8 and fm1 == 0x585ebd and fs2 == 1 and fe2 == 0xa9 and fm2 == 0x13d0a1 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x54585ebd; op2val:0xd493d0a1;
   valaddr_reg:x12; val_offset:2790*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 2790*FLEN/8, x13, x9, x10)

inst_1417:
// fs1 == 0 and fe1 == 0xa8 and fm1 == 0x585ebd and fs2 == 1 and fe2 == 0xa9 and fm2 == 0x13d0a1 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x54585ebd; op2val:0xd493d0a1;
   valaddr_reg:x12; val_offset:2792*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 2792*FLEN/8, x13, x9, x10)

inst_1418:
// fs1 == 0 and fe1 == 0xa8 and fm1 == 0x585ebd and fs2 == 1 and fe2 == 0xa9 and fm2 == 0x13d0a1 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x54585ebd; op2val:0xd493d0a1;
   valaddr_reg:x12; val_offset:2794*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 2794*FLEN/8, x13, x9, x10)

inst_1419:
// fs1 == 0 and fe1 == 0xa8 and fm1 == 0x585ebd and fs2 == 1 and fe2 == 0xa9 and fm2 == 0x13d0a1 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x54585ebd; op2val:0xd493d0a1;
   valaddr_reg:x12; val_offset:2796*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 2796*FLEN/8, x13, x9, x10)

inst_1420:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x2826e6 and fs2 == 1 and fe2 == 0xa8 and fm2 == 0x2fb234 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x54a826e6; op2val:0xd42fb234;
   valaddr_reg:x12; val_offset:2798*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 2798*FLEN/8, x13, x9, x10)

inst_1421:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x2826e6 and fs2 == 1 and fe2 == 0xa8 and fm2 == 0x2fb234 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x54a826e6; op2val:0xd42fb234;
   valaddr_reg:x12; val_offset:2800*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 2800*FLEN/8, x13, x9, x10)

inst_1422:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x2826e6 and fs2 == 1 and fe2 == 0xa8 and fm2 == 0x2fb234 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x54a826e6; op2val:0xd42fb234;
   valaddr_reg:x12; val_offset:2802*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 2802*FLEN/8, x13, x9, x10)

inst_1423:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x2826e6 and fs2 == 1 and fe2 == 0xa8 and fm2 == 0x2fb234 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x54a826e6; op2val:0xd42fb234;
   valaddr_reg:x12; val_offset:2804*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 2804*FLEN/8, x13, x9, x10)

inst_1424:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x2826e6 and fs2 == 1 and fe2 == 0xa8 and fm2 == 0x2fb234 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x54a826e6; op2val:0xd42fb234;
   valaddr_reg:x12; val_offset:2806*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 2806*FLEN/8, x13, x9, x10)

inst_1425:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x01d579 and fs2 == 1 and fe2 == 0xa8 and fm2 == 0x7c550e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x5481d579; op2val:0xd47c550e;
   valaddr_reg:x12; val_offset:2808*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 2808*FLEN/8, x13, x9, x10)

inst_1426:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x01d579 and fs2 == 1 and fe2 == 0xa8 and fm2 == 0x7c550e and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x5481d579; op2val:0xd47c550e;
   valaddr_reg:x12; val_offset:2810*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 2810*FLEN/8, x13, x9, x10)

inst_1427:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x01d579 and fs2 == 1 and fe2 == 0xa8 and fm2 == 0x7c550e and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x5481d579; op2val:0xd47c550e;
   valaddr_reg:x12; val_offset:2812*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 2812*FLEN/8, x13, x9, x10)

inst_1428:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x01d579 and fs2 == 1 and fe2 == 0xa8 and fm2 == 0x7c550e and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x5481d579; op2val:0xd47c550e;
   valaddr_reg:x12; val_offset:2814*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 2814*FLEN/8, x13, x9, x10)

inst_1429:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x01d579 and fs2 == 1 and fe2 == 0xa8 and fm2 == 0x7c550e and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x5481d579; op2val:0xd47c550e;
   valaddr_reg:x12; val_offset:2816*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 2816*FLEN/8, x13, x9, x10)

inst_1430:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x30c12c and fs2 == 1 and fe2 == 0xa8 and fm2 == 0x1e7da7 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x54b0c12c; op2val:0xd41e7da7;
   valaddr_reg:x12; val_offset:2818*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 2818*FLEN/8, x13, x9, x10)

inst_1431:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x30c12c and fs2 == 1 and fe2 == 0xa8 and fm2 == 0x1e7da7 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x54b0c12c; op2val:0xd41e7da7;
   valaddr_reg:x12; val_offset:2820*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 2820*FLEN/8, x13, x9, x10)
RVTEST_SIGBASE(x9,signature_x9_11)

inst_1432:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x30c12c and fs2 == 1 and fe2 == 0xa8 and fm2 == 0x1e7da7 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x54b0c12c; op2val:0xd41e7da7;
   valaddr_reg:x12; val_offset:2822*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 2822*FLEN/8, x13, x9, x10)

inst_1433:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x30c12c and fs2 == 1 and fe2 == 0xa8 and fm2 == 0x1e7da7 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x54b0c12c; op2val:0xd41e7da7;
   valaddr_reg:x12; val_offset:2824*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 2824*FLEN/8, x13, x9, x10)

inst_1434:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x30c12c and fs2 == 1 and fe2 == 0xa8 and fm2 == 0x1e7da7 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x54b0c12c; op2val:0xd41e7da7;
   valaddr_reg:x12; val_offset:2826*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 2826*FLEN/8, x13, x9, x10)

inst_1435:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x305c4a and fs2 == 1 and fe2 == 0xa8 and fm2 == 0x1f476b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x54b05c4a; op2val:0xd41f476b;
   valaddr_reg:x12; val_offset:2828*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 2828*FLEN/8, x13, x9, x10)

inst_1436:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x305c4a and fs2 == 1 and fe2 == 0xa8 and fm2 == 0x1f476b and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x54b05c4a; op2val:0xd41f476b;
   valaddr_reg:x12; val_offset:2830*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 2830*FLEN/8, x13, x9, x10)

inst_1437:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x305c4a and fs2 == 1 and fe2 == 0xa8 and fm2 == 0x1f476b and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x54b05c4a; op2val:0xd41f476b;
   valaddr_reg:x12; val_offset:2832*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 2832*FLEN/8, x13, x9, x10)

inst_1438:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x305c4a and fs2 == 1 and fe2 == 0xa8 and fm2 == 0x1f476b and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x54b05c4a; op2val:0xd41f476b;
   valaddr_reg:x12; val_offset:2834*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 2834*FLEN/8, x13, x9, x10)

inst_1439:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x305c4a and fs2 == 1 and fe2 == 0xa8 and fm2 == 0x1f476b and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x54b05c4a; op2val:0xd41f476b;
   valaddr_reg:x12; val_offset:2836*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 2836*FLEN/8, x13, x9, x10)

inst_1440:
// fs1 == 0 and fe1 == 0xa7 and fm1 == 0x55e71a and fs2 == 1 and fe2 == 0xa9 and fm2 == 0x4a863a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x53d5e71a; op2val:0xd4ca863a;
   valaddr_reg:x12; val_offset:2838*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 2838*FLEN/8, x13, x9, x10)

inst_1441:
// fs1 == 0 and fe1 == 0xa7 and fm1 == 0x55e71a and fs2 == 1 and fe2 == 0xa9 and fm2 == 0x4a863a and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x53d5e71a; op2val:0xd4ca863a;
   valaddr_reg:x12; val_offset:2840*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 2840*FLEN/8, x13, x9, x10)

inst_1442:
// fs1 == 0 and fe1 == 0xa7 and fm1 == 0x55e71a and fs2 == 1 and fe2 == 0xa9 and fm2 == 0x4a863a and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x53d5e71a; op2val:0xd4ca863a;
   valaddr_reg:x12; val_offset:2842*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 2842*FLEN/8, x13, x9, x10)

inst_1443:
// fs1 == 0 and fe1 == 0xa7 and fm1 == 0x55e71a and fs2 == 1 and fe2 == 0xa9 and fm2 == 0x4a863a and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x53d5e71a; op2val:0xd4ca863a;
   valaddr_reg:x12; val_offset:2844*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 2844*FLEN/8, x13, x9, x10)

inst_1444:
// fs1 == 0 and fe1 == 0xa7 and fm1 == 0x55e71a and fs2 == 1 and fe2 == 0xa9 and fm2 == 0x4a863a and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x53d5e71a; op2val:0xd4ca863a;
   valaddr_reg:x12; val_offset:2846*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 2846*FLEN/8, x13, x9, x10)

inst_1445:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x62d28e and fs2 == 1 and fe2 == 0xa6 and fm2 == 0x696b93 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x54e2d28e; op2val:0xd3696b93;
   valaddr_reg:x12; val_offset:2848*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 2848*FLEN/8, x13, x9, x10)

inst_1446:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x62d28e and fs2 == 1 and fe2 == 0xa6 and fm2 == 0x696b93 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x54e2d28e; op2val:0xd3696b93;
   valaddr_reg:x12; val_offset:2850*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 2850*FLEN/8, x13, x9, x10)

inst_1447:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x62d28e and fs2 == 1 and fe2 == 0xa6 and fm2 == 0x696b93 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x54e2d28e; op2val:0xd3696b93;
   valaddr_reg:x12; val_offset:2852*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 2852*FLEN/8, x13, x9, x10)

inst_1448:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x62d28e and fs2 == 1 and fe2 == 0xa6 and fm2 == 0x696b93 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x54e2d28e; op2val:0xd3696b93;
   valaddr_reg:x12; val_offset:2854*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 2854*FLEN/8, x13, x9, x10)

inst_1449:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x62d28e and fs2 == 1 and fe2 == 0xa6 and fm2 == 0x696b93 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x54e2d28e; op2val:0xd3696b93;
   valaddr_reg:x12; val_offset:2856*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 2856*FLEN/8, x13, x9, x10)

inst_1450:
// fs1 == 0 and fe1 == 0xa6 and fm1 == 0x195d31 and fs2 == 1 and fe2 == 0xa9 and fm2 == 0x6cd45a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x53195d31; op2val:0xd4ecd45a;
   valaddr_reg:x12; val_offset:2858*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 2858*FLEN/8, x13, x9, x10)

inst_1451:
// fs1 == 0 and fe1 == 0xa6 and fm1 == 0x195d31 and fs2 == 1 and fe2 == 0xa9 and fm2 == 0x6cd45a and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x53195d31; op2val:0xd4ecd45a;
   valaddr_reg:x12; val_offset:2860*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 2860*FLEN/8, x13, x9, x10)

inst_1452:
// fs1 == 0 and fe1 == 0xa6 and fm1 == 0x195d31 and fs2 == 1 and fe2 == 0xa9 and fm2 == 0x6cd45a and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x53195d31; op2val:0xd4ecd45a;
   valaddr_reg:x12; val_offset:2862*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 2862*FLEN/8, x13, x9, x10)

inst_1453:
// fs1 == 0 and fe1 == 0xa6 and fm1 == 0x195d31 and fs2 == 1 and fe2 == 0xa9 and fm2 == 0x6cd45a and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x53195d31; op2val:0xd4ecd45a;
   valaddr_reg:x12; val_offset:2864*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 2864*FLEN/8, x13, x9, x10)

inst_1454:
// fs1 == 0 and fe1 == 0xa6 and fm1 == 0x195d31 and fs2 == 1 and fe2 == 0xa9 and fm2 == 0x6cd45a and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x53195d31; op2val:0xd4ecd45a;
   valaddr_reg:x12; val_offset:2866*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 2866*FLEN/8, x13, x9, x10)

inst_1455:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x05f04a and fs2 == 1 and fe2 == 0xa8 and fm2 == 0x741f6c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x5485f04a; op2val:0xd4741f6c;
   valaddr_reg:x12; val_offset:2868*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 2868*FLEN/8, x13, x9, x10)

inst_1456:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x05f04a and fs2 == 1 and fe2 == 0xa8 and fm2 == 0x741f6c and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x5485f04a; op2val:0xd4741f6c;
   valaddr_reg:x12; val_offset:2870*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 2870*FLEN/8, x13, x9, x10)

inst_1457:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x05f04a and fs2 == 1 and fe2 == 0xa8 and fm2 == 0x741f6c and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x5485f04a; op2val:0xd4741f6c;
   valaddr_reg:x12; val_offset:2872*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 2872*FLEN/8, x13, x9, x10)

inst_1458:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x05f04a and fs2 == 1 and fe2 == 0xa8 and fm2 == 0x741f6c and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x5485f04a; op2val:0xd4741f6c;
   valaddr_reg:x12; val_offset:2874*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 2874*FLEN/8, x13, x9, x10)

inst_1459:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x05f04a and fs2 == 1 and fe2 == 0xa8 and fm2 == 0x741f6c and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x5485f04a; op2val:0xd4741f6c;
   valaddr_reg:x12; val_offset:2876*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 2876*FLEN/8, x13, x9, x10)

inst_1460:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x02f2e7 and fs2 == 1 and fe2 == 0xa8 and fm2 == 0x7a1a31 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x5482f2e7; op2val:0xd47a1a31;
   valaddr_reg:x12; val_offset:2878*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 2878*FLEN/8, x13, x9, x10)

inst_1461:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x02f2e7 and fs2 == 1 and fe2 == 0xa8 and fm2 == 0x7a1a31 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x5482f2e7; op2val:0xd47a1a31;
   valaddr_reg:x12; val_offset:2880*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 2880*FLEN/8, x13, x9, x10)

inst_1462:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x02f2e7 and fs2 == 1 and fe2 == 0xa8 and fm2 == 0x7a1a31 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x5482f2e7; op2val:0xd47a1a31;
   valaddr_reg:x12; val_offset:2882*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 2882*FLEN/8, x13, x9, x10)

inst_1463:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x02f2e7 and fs2 == 1 and fe2 == 0xa8 and fm2 == 0x7a1a31 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x5482f2e7; op2val:0xd47a1a31;
   valaddr_reg:x12; val_offset:2884*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 2884*FLEN/8, x13, x9, x10)

inst_1464:
// fs1 == 0 and fe1 == 0xa9 and fm1 == 0x02f2e7 and fs2 == 1 and fe2 == 0xa8 and fm2 == 0x7a1a31 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x5482f2e7; op2val:0xd47a1a31;
   valaddr_reg:x12; val_offset:2886*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 2886*FLEN/8, x13, x9, x10)

inst_1465:
// fs1 == 0 and fe1 == 0xa7 and fm1 == 0x2c9951 and fs2 == 1 and fe2 == 0xa9 and fm2 == 0x54d9ac and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x53ac9951; op2val:0xd4d4d9ac;
   valaddr_reg:x12; val_offset:2888*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 2888*FLEN/8, x13, x9, x10)

inst_1466:
// fs1 == 0 and fe1 == 0xa7 and fm1 == 0x2c9951 and fs2 == 1 and fe2 == 0xa9 and fm2 == 0x54d9ac and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x53ac9951; op2val:0xd4d4d9ac;
   valaddr_reg:x12; val_offset:2890*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 2890*FLEN/8, x13, x9, x10)

inst_1467:
// fs1 == 0 and fe1 == 0xa7 and fm1 == 0x2c9951 and fs2 == 1 and fe2 == 0xa9 and fm2 == 0x54d9ac and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x53ac9951; op2val:0xd4d4d9ac;
   valaddr_reg:x12; val_offset:2892*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 2892*FLEN/8, x13, x9, x10)

inst_1468:
// fs1 == 0 and fe1 == 0xa7 and fm1 == 0x2c9951 and fs2 == 1 and fe2 == 0xa9 and fm2 == 0x54d9ac and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x53ac9951; op2val:0xd4d4d9ac;
   valaddr_reg:x12; val_offset:2894*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 2894*FLEN/8, x13, x9, x10)

inst_1469:
// fs1 == 0 and fe1 == 0xa7 and fm1 == 0x2c9951 and fs2 == 1 and fe2 == 0xa9 and fm2 == 0x54d9ac and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x53ac9951; op2val:0xd4d4d9ac;
   valaddr_reg:x12; val_offset:2896*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 2896*FLEN/8, x13, x9, x10)

inst_1470:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x12b862 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x12b862 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e92b862; op2val:0x3e92b862;
   valaddr_reg:x12; val_offset:2898*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 2898*FLEN/8, x13, x9, x10)

inst_1471:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x12b862 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x12b862 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e92b862; op2val:0x3e92b862;
   valaddr_reg:x12; val_offset:2900*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 2900*FLEN/8, x13, x9, x10)

inst_1472:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x12b862 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x12b862 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e92b862; op2val:0x3e92b862;
   valaddr_reg:x12; val_offset:2902*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 2902*FLEN/8, x13, x9, x10)

inst_1473:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x12b862 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x12b862 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e92b862; op2val:0x3e92b862;
   valaddr_reg:x12; val_offset:2904*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 2904*FLEN/8, x13, x9, x10)

inst_1474:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x12b862 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x12b862 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e92b862; op2val:0x3e92b862;
   valaddr_reg:x12; val_offset:2906*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 2906*FLEN/8, x13, x9, x10)

inst_1475:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x3af0f7 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x3af0f7 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f3af0f7; op2val:0x3f3af0f7;
   valaddr_reg:x12; val_offset:2908*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 2908*FLEN/8, x13, x9, x10)

inst_1476:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x3af0f7 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x3af0f7 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f3af0f7; op2val:0x3f3af0f7;
   valaddr_reg:x12; val_offset:2910*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 2910*FLEN/8, x13, x9, x10)

inst_1477:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x3af0f7 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x3af0f7 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f3af0f7; op2val:0x3f3af0f7;
   valaddr_reg:x12; val_offset:2912*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 2912*FLEN/8, x13, x9, x10)

inst_1478:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x3af0f7 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x3af0f7 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f3af0f7; op2val:0x3f3af0f7;
   valaddr_reg:x12; val_offset:2914*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 2914*FLEN/8, x13, x9, x10)

inst_1479:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x3af0f7 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x3af0f7 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f3af0f7; op2val:0x3f3af0f7;
   valaddr_reg:x12; val_offset:2916*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 2916*FLEN/8, x13, x9, x10)

inst_1480:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x44942f and fs2 == 0 and fe2 == 0x7e and fm2 == 0x44942f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f44942f; op2val:0x3f44942f;
   valaddr_reg:x12; val_offset:2918*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 2918*FLEN/8, x13, x9, x10)

inst_1481:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x44942f and fs2 == 0 and fe2 == 0x7e and fm2 == 0x44942f and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f44942f; op2val:0x3f44942f;
   valaddr_reg:x12; val_offset:2920*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 2920*FLEN/8, x13, x9, x10)

inst_1482:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x44942f and fs2 == 0 and fe2 == 0x7e and fm2 == 0x44942f and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f44942f; op2val:0x3f44942f;
   valaddr_reg:x12; val_offset:2922*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 2922*FLEN/8, x13, x9, x10)

inst_1483:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x44942f and fs2 == 0 and fe2 == 0x7e and fm2 == 0x44942f and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f44942f; op2val:0x3f44942f;
   valaddr_reg:x12; val_offset:2924*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 2924*FLEN/8, x13, x9, x10)

inst_1484:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x44942f and fs2 == 0 and fe2 == 0x7e and fm2 == 0x44942f and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f44942f; op2val:0x3f44942f;
   valaddr_reg:x12; val_offset:2926*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 2926*FLEN/8, x13, x9, x10)

inst_1485:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x53e005 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x53e005 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f53e005; op2val:0x3f53e005;
   valaddr_reg:x12; val_offset:2928*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 2928*FLEN/8, x13, x9, x10)

inst_1486:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x53e005 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x53e005 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f53e005; op2val:0x3f53e005;
   valaddr_reg:x12; val_offset:2930*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 2930*FLEN/8, x13, x9, x10)

inst_1487:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x53e005 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x53e005 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f53e005; op2val:0x3f53e005;
   valaddr_reg:x12; val_offset:2932*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 2932*FLEN/8, x13, x9, x10)

inst_1488:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x53e005 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x53e005 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f53e005; op2val:0x3f53e005;
   valaddr_reg:x12; val_offset:2934*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 2934*FLEN/8, x13, x9, x10)

inst_1489:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x53e005 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x53e005 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f53e005; op2val:0x3f53e005;
   valaddr_reg:x12; val_offset:2936*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 2936*FLEN/8, x13, x9, x10)

inst_1490:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x087b1c and fs2 == 0 and fe2 == 0x7c and fm2 == 0x087b1c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e087b1c; op2val:0x3e087b1c;
   valaddr_reg:x12; val_offset:2938*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 2938*FLEN/8, x13, x9, x10)

inst_1491:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x087b1c and fs2 == 0 and fe2 == 0x7c and fm2 == 0x087b1c and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e087b1c; op2val:0x3e087b1c;
   valaddr_reg:x12; val_offset:2940*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 2940*FLEN/8, x13, x9, x10)

inst_1492:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x087b1c and fs2 == 0 and fe2 == 0x7c and fm2 == 0x087b1c and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e087b1c; op2val:0x3e087b1c;
   valaddr_reg:x12; val_offset:2942*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 2942*FLEN/8, x13, x9, x10)

inst_1493:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x087b1c and fs2 == 0 and fe2 == 0x7c and fm2 == 0x087b1c and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e087b1c; op2val:0x3e087b1c;
   valaddr_reg:x12; val_offset:2944*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 2944*FLEN/8, x13, x9, x10)

inst_1494:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x087b1c and fs2 == 0 and fe2 == 0x7c and fm2 == 0x087b1c and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e087b1c; op2val:0x3e087b1c;
   valaddr_reg:x12; val_offset:2946*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 2946*FLEN/8, x13, x9, x10)

inst_1495:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x471621 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x471621 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f471621; op2val:0x3f471621;
   valaddr_reg:x12; val_offset:2948*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 2948*FLEN/8, x13, x9, x10)

inst_1496:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x471621 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x471621 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f471621; op2val:0x3f471621;
   valaddr_reg:x12; val_offset:2950*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 2950*FLEN/8, x13, x9, x10)

inst_1497:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x471621 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x471621 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f471621; op2val:0x3f471621;
   valaddr_reg:x12; val_offset:2952*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 2952*FLEN/8, x13, x9, x10)

inst_1498:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x471621 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x471621 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f471621; op2val:0x3f471621;
   valaddr_reg:x12; val_offset:2954*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 2954*FLEN/8, x13, x9, x10)

inst_1499:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x471621 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x471621 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f471621; op2val:0x3f471621;
   valaddr_reg:x12; val_offset:2956*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 2956*FLEN/8, x13, x9, x10)

inst_1500:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x162caf and fs2 == 0 and fe2 == 0x7d and fm2 == 0x162caf and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e962caf; op2val:0x3e962caf;
   valaddr_reg:x12; val_offset:2958*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 2958*FLEN/8, x13, x9, x10)

inst_1501:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x162caf and fs2 == 0 and fe2 == 0x7d and fm2 == 0x162caf and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e962caf; op2val:0x3e962caf;
   valaddr_reg:x12; val_offset:2960*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 2960*FLEN/8, x13, x9, x10)

inst_1502:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x162caf and fs2 == 0 and fe2 == 0x7d and fm2 == 0x162caf and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e962caf; op2val:0x3e962caf;
   valaddr_reg:x12; val_offset:2962*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 2962*FLEN/8, x13, x9, x10)

inst_1503:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x162caf and fs2 == 0 and fe2 == 0x7d and fm2 == 0x162caf and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e962caf; op2val:0x3e962caf;
   valaddr_reg:x12; val_offset:2964*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 2964*FLEN/8, x13, x9, x10)

inst_1504:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x162caf and fs2 == 0 and fe2 == 0x7d and fm2 == 0x162caf and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e962caf; op2val:0x3e962caf;
   valaddr_reg:x12; val_offset:2966*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 2966*FLEN/8, x13, x9, x10)

inst_1505:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x782ee4 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x782ee4 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f782ee4; op2val:0x3f782ee4;
   valaddr_reg:x12; val_offset:2968*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 2968*FLEN/8, x13, x9, x10)

inst_1506:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x782ee4 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x782ee4 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f782ee4; op2val:0x3f782ee4;
   valaddr_reg:x12; val_offset:2970*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 2970*FLEN/8, x13, x9, x10)

inst_1507:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x782ee4 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x782ee4 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f782ee4; op2val:0x3f782ee4;
   valaddr_reg:x12; val_offset:2972*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 2972*FLEN/8, x13, x9, x10)

inst_1508:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x782ee4 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x782ee4 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f782ee4; op2val:0x3f782ee4;
   valaddr_reg:x12; val_offset:2974*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 2974*FLEN/8, x13, x9, x10)

inst_1509:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x782ee4 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x782ee4 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f782ee4; op2val:0x3f782ee4;
   valaddr_reg:x12; val_offset:2976*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 2976*FLEN/8, x13, x9, x10)

inst_1510:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x414df6 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x414df6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ec14df6; op2val:0x3ec14df6;
   valaddr_reg:x12; val_offset:2978*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 2978*FLEN/8, x13, x9, x10)

inst_1511:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x414df6 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x414df6 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ec14df6; op2val:0x3ec14df6;
   valaddr_reg:x12; val_offset:2980*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 2980*FLEN/8, x13, x9, x10)

inst_1512:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x414df6 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x414df6 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ec14df6; op2val:0x3ec14df6;
   valaddr_reg:x12; val_offset:2982*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 2982*FLEN/8, x13, x9, x10)

inst_1513:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x414df6 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x414df6 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ec14df6; op2val:0x3ec14df6;
   valaddr_reg:x12; val_offset:2984*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 2984*FLEN/8, x13, x9, x10)

inst_1514:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x414df6 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x414df6 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ec14df6; op2val:0x3ec14df6;
   valaddr_reg:x12; val_offset:2986*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 2986*FLEN/8, x13, x9, x10)

inst_1515:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x1177ce and fs2 == 0 and fe2 == 0x7e and fm2 == 0x1177ce and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f1177ce; op2val:0x3f1177ce;
   valaddr_reg:x12; val_offset:2988*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 2988*FLEN/8, x13, x9, x10)

inst_1516:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x1177ce and fs2 == 0 and fe2 == 0x7e and fm2 == 0x1177ce and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f1177ce; op2val:0x3f1177ce;
   valaddr_reg:x12; val_offset:2990*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 2990*FLEN/8, x13, x9, x10)

inst_1517:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x1177ce and fs2 == 0 and fe2 == 0x7e and fm2 == 0x1177ce and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f1177ce; op2val:0x3f1177ce;
   valaddr_reg:x12; val_offset:2992*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 2992*FLEN/8, x13, x9, x10)

inst_1518:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x1177ce and fs2 == 0 and fe2 == 0x7e and fm2 == 0x1177ce and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f1177ce; op2val:0x3f1177ce;
   valaddr_reg:x12; val_offset:2994*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 2994*FLEN/8, x13, x9, x10)

inst_1519:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x1177ce and fs2 == 0 and fe2 == 0x7e and fm2 == 0x1177ce and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f1177ce; op2val:0x3f1177ce;
   valaddr_reg:x12; val_offset:2996*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 2996*FLEN/8, x13, x9, x10)

inst_1520:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x5bbcf7 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x5bbcf7 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e5bbcf7; op2val:0x3e5bbcf7;
   valaddr_reg:x12; val_offset:2998*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 2998*FLEN/8, x13, x9, x10)

inst_1521:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x5bbcf7 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x5bbcf7 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e5bbcf7; op2val:0x3e5bbcf7;
   valaddr_reg:x12; val_offset:3000*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 3000*FLEN/8, x13, x9, x10)

inst_1522:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x5bbcf7 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x5bbcf7 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e5bbcf7; op2val:0x3e5bbcf7;
   valaddr_reg:x12; val_offset:3002*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 3002*FLEN/8, x13, x9, x10)

inst_1523:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x5bbcf7 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x5bbcf7 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e5bbcf7; op2val:0x3e5bbcf7;
   valaddr_reg:x12; val_offset:3004*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 3004*FLEN/8, x13, x9, x10)

inst_1524:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x5bbcf7 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x5bbcf7 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e5bbcf7; op2val:0x3e5bbcf7;
   valaddr_reg:x12; val_offset:3006*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 3006*FLEN/8, x13, x9, x10)

inst_1525:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x3f8bcd and fs2 == 0 and fe2 == 0x7d and fm2 == 0x3f8bcd and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ebf8bcd; op2val:0x3ebf8bcd;
   valaddr_reg:x12; val_offset:3008*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 3008*FLEN/8, x13, x9, x10)

inst_1526:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x3f8bcd and fs2 == 0 and fe2 == 0x7d and fm2 == 0x3f8bcd and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ebf8bcd; op2val:0x3ebf8bcd;
   valaddr_reg:x12; val_offset:3010*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 3010*FLEN/8, x13, x9, x10)

inst_1527:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x3f8bcd and fs2 == 0 and fe2 == 0x7d and fm2 == 0x3f8bcd and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ebf8bcd; op2val:0x3ebf8bcd;
   valaddr_reg:x12; val_offset:3012*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 3012*FLEN/8, x13, x9, x10)

inst_1528:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x3f8bcd and fs2 == 0 and fe2 == 0x7d and fm2 == 0x3f8bcd and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ebf8bcd; op2val:0x3ebf8bcd;
   valaddr_reg:x12; val_offset:3014*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 3014*FLEN/8, x13, x9, x10)

inst_1529:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x3f8bcd and fs2 == 0 and fe2 == 0x7d and fm2 == 0x3f8bcd and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ebf8bcd; op2val:0x3ebf8bcd;
   valaddr_reg:x12; val_offset:3016*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 3016*FLEN/8, x13, x9, x10)

inst_1530:
// fs1 == 0 and fe1 == 0x79 and fm1 == 0x5cc699 and fs2 == 0 and fe2 == 0x79 and fm2 == 0x5cc699 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3cdcc699; op2val:0x3cdcc699;
   valaddr_reg:x12; val_offset:3018*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 3018*FLEN/8, x13, x9, x10)

inst_1531:
// fs1 == 0 and fe1 == 0x79 and fm1 == 0x5cc699 and fs2 == 0 and fe2 == 0x79 and fm2 == 0x5cc699 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3cdcc699; op2val:0x3cdcc699;
   valaddr_reg:x12; val_offset:3020*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 3020*FLEN/8, x13, x9, x10)

inst_1532:
// fs1 == 0 and fe1 == 0x79 and fm1 == 0x5cc699 and fs2 == 0 and fe2 == 0x79 and fm2 == 0x5cc699 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3cdcc699; op2val:0x3cdcc699;
   valaddr_reg:x12; val_offset:3022*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 3022*FLEN/8, x13, x9, x10)

inst_1533:
// fs1 == 0 and fe1 == 0x79 and fm1 == 0x5cc699 and fs2 == 0 and fe2 == 0x79 and fm2 == 0x5cc699 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3cdcc699; op2val:0x3cdcc699;
   valaddr_reg:x12; val_offset:3024*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 3024*FLEN/8, x13, x9, x10)

inst_1534:
// fs1 == 0 and fe1 == 0x79 and fm1 == 0x5cc699 and fs2 == 0 and fe2 == 0x79 and fm2 == 0x5cc699 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3cdcc699; op2val:0x3cdcc699;
   valaddr_reg:x12; val_offset:3026*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 3026*FLEN/8, x13, x9, x10)

inst_1535:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x31e108 and fs2 == 0 and fe2 == 0x7b and fm2 == 0x31e108 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3db1e108; op2val:0x3db1e108;
   valaddr_reg:x12; val_offset:3028*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 3028*FLEN/8, x13, x9, x10)

inst_1536:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x31e108 and fs2 == 0 and fe2 == 0x7b and fm2 == 0x31e108 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3db1e108; op2val:0x3db1e108;
   valaddr_reg:x12; val_offset:3030*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 3030*FLEN/8, x13, x9, x10)

inst_1537:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x31e108 and fs2 == 0 and fe2 == 0x7b and fm2 == 0x31e108 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3db1e108; op2val:0x3db1e108;
   valaddr_reg:x12; val_offset:3032*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 3032*FLEN/8, x13, x9, x10)

inst_1538:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x31e108 and fs2 == 0 and fe2 == 0x7b and fm2 == 0x31e108 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3db1e108; op2val:0x3db1e108;
   valaddr_reg:x12; val_offset:3034*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 3034*FLEN/8, x13, x9, x10)

inst_1539:
// fs1 == 0 and fe1 == 0x7b and fm1 == 0x31e108 and fs2 == 0 and fe2 == 0x7b and fm2 == 0x31e108 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3db1e108; op2val:0x3db1e108;
   valaddr_reg:x12; val_offset:3036*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 3036*FLEN/8, x13, x9, x10)

inst_1540:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x49984d and fs2 == 0 and fe2 == 0x7d and fm2 == 0x49984d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ec9984d; op2val:0x3ec9984d;
   valaddr_reg:x12; val_offset:3038*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 3038*FLEN/8, x13, x9, x10)

inst_1541:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x49984d and fs2 == 0 and fe2 == 0x7d and fm2 == 0x49984d and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ec9984d; op2val:0x3ec9984d;
   valaddr_reg:x12; val_offset:3040*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 3040*FLEN/8, x13, x9, x10)

inst_1542:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x49984d and fs2 == 0 and fe2 == 0x7d and fm2 == 0x49984d and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ec9984d; op2val:0x3ec9984d;
   valaddr_reg:x12; val_offset:3042*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 3042*FLEN/8, x13, x9, x10)

inst_1543:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x49984d and fs2 == 0 and fe2 == 0x7d and fm2 == 0x49984d and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ec9984d; op2val:0x3ec9984d;
   valaddr_reg:x12; val_offset:3044*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 3044*FLEN/8, x13, x9, x10)

inst_1544:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x49984d and fs2 == 0 and fe2 == 0x7d and fm2 == 0x49984d and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ec9984d; op2val:0x3ec9984d;
   valaddr_reg:x12; val_offset:3046*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 3046*FLEN/8, x13, x9, x10)

inst_1545:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x72627d and fs2 == 0 and fe2 == 0x7d and fm2 == 0x72627d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ef2627d; op2val:0x3ef2627d;
   valaddr_reg:x12; val_offset:3048*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 3048*FLEN/8, x13, x9, x10)

inst_1546:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x72627d and fs2 == 0 and fe2 == 0x7d and fm2 == 0x72627d and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ef2627d; op2val:0x3ef2627d;
   valaddr_reg:x12; val_offset:3050*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 3050*FLEN/8, x13, x9, x10)

inst_1547:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x72627d and fs2 == 0 and fe2 == 0x7d and fm2 == 0x72627d and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ef2627d; op2val:0x3ef2627d;
   valaddr_reg:x12; val_offset:3052*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 3052*FLEN/8, x13, x9, x10)

inst_1548:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x72627d and fs2 == 0 and fe2 == 0x7d and fm2 == 0x72627d and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ef2627d; op2val:0x3ef2627d;
   valaddr_reg:x12; val_offset:3054*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 3054*FLEN/8, x13, x9, x10)

inst_1549:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x72627d and fs2 == 0 and fe2 == 0x7d and fm2 == 0x72627d and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ef2627d; op2val:0x3ef2627d;
   valaddr_reg:x12; val_offset:3056*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 3056*FLEN/8, x13, x9, x10)

inst_1550:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x5ca59c and fs2 == 0 and fe2 == 0x7e and fm2 == 0x5ca59c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f5ca59c; op2val:0x3f5ca59c;
   valaddr_reg:x12; val_offset:3058*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 3058*FLEN/8, x13, x9, x10)

inst_1551:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x5ca59c and fs2 == 0 and fe2 == 0x7e and fm2 == 0x5ca59c and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f5ca59c; op2val:0x3f5ca59c;
   valaddr_reg:x12; val_offset:3060*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 3060*FLEN/8, x13, x9, x10)

inst_1552:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x5ca59c and fs2 == 0 and fe2 == 0x7e and fm2 == 0x5ca59c and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f5ca59c; op2val:0x3f5ca59c;
   valaddr_reg:x12; val_offset:3062*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 3062*FLEN/8, x13, x9, x10)

inst_1553:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x5ca59c and fs2 == 0 and fe2 == 0x7e and fm2 == 0x5ca59c and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f5ca59c; op2val:0x3f5ca59c;
   valaddr_reg:x12; val_offset:3064*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 3064*FLEN/8, x13, x9, x10)

inst_1554:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x5ca59c and fs2 == 0 and fe2 == 0x7e and fm2 == 0x5ca59c and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f5ca59c; op2val:0x3f5ca59c;
   valaddr_reg:x12; val_offset:3066*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 3066*FLEN/8, x13, x9, x10)

inst_1555:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x238f9e and fs2 == 0 and fe2 == 0x7e and fm2 == 0x238f9e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f238f9e; op2val:0x3f238f9e;
   valaddr_reg:x12; val_offset:3068*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 3068*FLEN/8, x13, x9, x10)

inst_1556:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x238f9e and fs2 == 0 and fe2 == 0x7e and fm2 == 0x238f9e and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f238f9e; op2val:0x3f238f9e;
   valaddr_reg:x12; val_offset:3070*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 3070*FLEN/8, x13, x9, x10)

inst_1557:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x238f9e and fs2 == 0 and fe2 == 0x7e and fm2 == 0x238f9e and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f238f9e; op2val:0x3f238f9e;
   valaddr_reg:x12; val_offset:3072*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 3072*FLEN/8, x13, x9, x10)

inst_1558:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x238f9e and fs2 == 0 and fe2 == 0x7e and fm2 == 0x238f9e and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f238f9e; op2val:0x3f238f9e;
   valaddr_reg:x12; val_offset:3074*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 3074*FLEN/8, x13, x9, x10)

inst_1559:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x238f9e and fs2 == 0 and fe2 == 0x7e and fm2 == 0x238f9e and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f238f9e; op2val:0x3f238f9e;
   valaddr_reg:x12; val_offset:3076*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 3076*FLEN/8, x13, x9, x10)
RVTEST_SIGBASE(x9,signature_x9_12)

inst_1560:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x426f02 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x426f02 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f426f02; op2val:0x3f426f02;
   valaddr_reg:x12; val_offset:3078*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 3078*FLEN/8, x13, x9, x10)

inst_1561:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x426f02 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x426f02 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f426f02; op2val:0x3f426f02;
   valaddr_reg:x12; val_offset:3080*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 3080*FLEN/8, x13, x9, x10)

inst_1562:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x426f02 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x426f02 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f426f02; op2val:0x3f426f02;
   valaddr_reg:x12; val_offset:3082*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 3082*FLEN/8, x13, x9, x10)

inst_1563:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x426f02 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x426f02 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f426f02; op2val:0x3f426f02;
   valaddr_reg:x12; val_offset:3084*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 3084*FLEN/8, x13, x9, x10)

inst_1564:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x426f02 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x426f02 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f426f02; op2val:0x3f426f02;
   valaddr_reg:x12; val_offset:3086*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 3086*FLEN/8, x13, x9, x10)

inst_1565:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x1023ca and fs2 == 0 and fe2 == 0x7d and fm2 == 0x1023ca and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e9023ca; op2val:0x3e9023ca;
   valaddr_reg:x12; val_offset:3088*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 3088*FLEN/8, x13, x9, x10)

inst_1566:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x1023ca and fs2 == 0 and fe2 == 0x7d and fm2 == 0x1023ca and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e9023ca; op2val:0x3e9023ca;
   valaddr_reg:x12; val_offset:3090*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 3090*FLEN/8, x13, x9, x10)

inst_1567:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x1023ca and fs2 == 0 and fe2 == 0x7d and fm2 == 0x1023ca and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e9023ca; op2val:0x3e9023ca;
   valaddr_reg:x12; val_offset:3092*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 3092*FLEN/8, x13, x9, x10)

inst_1568:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x1023ca and fs2 == 0 and fe2 == 0x7d and fm2 == 0x1023ca and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e9023ca; op2val:0x3e9023ca;
   valaddr_reg:x12; val_offset:3094*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 3094*FLEN/8, x13, x9, x10)

inst_1569:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x1023ca and fs2 == 0 and fe2 == 0x7d and fm2 == 0x1023ca and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e9023ca; op2val:0x3e9023ca;
   valaddr_reg:x12; val_offset:3096*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 3096*FLEN/8, x13, x9, x10)

inst_1570:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x64c3ec and fs2 == 0 and fe2 == 0x7e and fm2 == 0x64c3ec and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f64c3ec; op2val:0x3f64c3ec;
   valaddr_reg:x12; val_offset:3098*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 3098*FLEN/8, x13, x9, x10)

inst_1571:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x64c3ec and fs2 == 0 and fe2 == 0x7e and fm2 == 0x64c3ec and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f64c3ec; op2val:0x3f64c3ec;
   valaddr_reg:x12; val_offset:3100*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 3100*FLEN/8, x13, x9, x10)

inst_1572:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x64c3ec and fs2 == 0 and fe2 == 0x7e and fm2 == 0x64c3ec and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f64c3ec; op2val:0x3f64c3ec;
   valaddr_reg:x12; val_offset:3102*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 3102*FLEN/8, x13, x9, x10)

inst_1573:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x64c3ec and fs2 == 0 and fe2 == 0x7e and fm2 == 0x64c3ec and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f64c3ec; op2val:0x3f64c3ec;
   valaddr_reg:x12; val_offset:3104*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 3104*FLEN/8, x13, x9, x10)

inst_1574:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x64c3ec and fs2 == 0 and fe2 == 0x7e and fm2 == 0x64c3ec and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f64c3ec; op2val:0x3f64c3ec;
   valaddr_reg:x12; val_offset:3106*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 3106*FLEN/8, x13, x9, x10)

inst_1575:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x01f498 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x01f498 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f01f498; op2val:0x3f01f498;
   valaddr_reg:x12; val_offset:3108*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 3108*FLEN/8, x13, x9, x10)

inst_1576:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x01f498 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x01f498 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f01f498; op2val:0x3f01f498;
   valaddr_reg:x12; val_offset:3110*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 3110*FLEN/8, x13, x9, x10)

inst_1577:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x01f498 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x01f498 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f01f498; op2val:0x3f01f498;
   valaddr_reg:x12; val_offset:3112*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 3112*FLEN/8, x13, x9, x10)

inst_1578:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x01f498 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x01f498 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f01f498; op2val:0x3f01f498;
   valaddr_reg:x12; val_offset:3114*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 3114*FLEN/8, x13, x9, x10)

inst_1579:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x01f498 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x01f498 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f01f498; op2val:0x3f01f498;
   valaddr_reg:x12; val_offset:3116*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 3116*FLEN/8, x13, x9, x10)

inst_1580:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x503069 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x503069 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f503069; op2val:0x3f503069;
   valaddr_reg:x12; val_offset:3118*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 3118*FLEN/8, x13, x9, x10)

inst_1581:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x503069 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x503069 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f503069; op2val:0x3f503069;
   valaddr_reg:x12; val_offset:3120*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 3120*FLEN/8, x13, x9, x10)

inst_1582:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x503069 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x503069 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f503069; op2val:0x3f503069;
   valaddr_reg:x12; val_offset:3122*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 3122*FLEN/8, x13, x9, x10)

inst_1583:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x503069 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x503069 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f503069; op2val:0x3f503069;
   valaddr_reg:x12; val_offset:3124*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 3124*FLEN/8, x13, x9, x10)

inst_1584:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x503069 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x503069 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f503069; op2val:0x3f503069;
   valaddr_reg:x12; val_offset:3126*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 3126*FLEN/8, x13, x9, x10)

inst_1585:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x4e12b3 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x4e12b3 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ece12b3; op2val:0x3ece12b3;
   valaddr_reg:x12; val_offset:3128*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 3128*FLEN/8, x13, x9, x10)

inst_1586:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x4e12b3 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x4e12b3 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ece12b3; op2val:0x3ece12b3;
   valaddr_reg:x12; val_offset:3130*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 3130*FLEN/8, x13, x9, x10)

inst_1587:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x4e12b3 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x4e12b3 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ece12b3; op2val:0x3ece12b3;
   valaddr_reg:x12; val_offset:3132*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 3132*FLEN/8, x13, x9, x10)

inst_1588:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x4e12b3 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x4e12b3 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ece12b3; op2val:0x3ece12b3;
   valaddr_reg:x12; val_offset:3134*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 3134*FLEN/8, x13, x9, x10)

inst_1589:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x4e12b3 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x4e12b3 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ece12b3; op2val:0x3ece12b3;
   valaddr_reg:x12; val_offset:3136*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 3136*FLEN/8, x13, x9, x10)

inst_1590:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x488fab and fs2 == 0 and fe2 == 0x7e and fm2 == 0x488fab and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f488fab; op2val:0x3f488fab;
   valaddr_reg:x12; val_offset:3138*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 3138*FLEN/8, x13, x9, x10)

inst_1591:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x488fab and fs2 == 0 and fe2 == 0x7e and fm2 == 0x488fab and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f488fab; op2val:0x3f488fab;
   valaddr_reg:x12; val_offset:3140*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 3140*FLEN/8, x13, x9, x10)

inst_1592:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x488fab and fs2 == 0 and fe2 == 0x7e and fm2 == 0x488fab and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f488fab; op2val:0x3f488fab;
   valaddr_reg:x12; val_offset:3142*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 3142*FLEN/8, x13, x9, x10)

inst_1593:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x488fab and fs2 == 0 and fe2 == 0x7e and fm2 == 0x488fab and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f488fab; op2val:0x3f488fab;
   valaddr_reg:x12; val_offset:3144*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 3144*FLEN/8, x13, x9, x10)

inst_1594:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x488fab and fs2 == 0 and fe2 == 0x7e and fm2 == 0x488fab and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f488fab; op2val:0x3f488fab;
   valaddr_reg:x12; val_offset:3146*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 3146*FLEN/8, x13, x9, x10)

inst_1595:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x179753 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x179753 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e979753; op2val:0x3e979753;
   valaddr_reg:x12; val_offset:3148*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 3148*FLEN/8, x13, x9, x10)

inst_1596:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x179753 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x179753 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e979753; op2val:0x3e979753;
   valaddr_reg:x12; val_offset:3150*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 3150*FLEN/8, x13, x9, x10)

inst_1597:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x179753 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x179753 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e979753; op2val:0x3e979753;
   valaddr_reg:x12; val_offset:3152*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 3152*FLEN/8, x13, x9, x10)

inst_1598:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x179753 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x179753 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e979753; op2val:0x3e979753;
   valaddr_reg:x12; val_offset:3154*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 3154*FLEN/8, x13, x9, x10)

inst_1599:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x179753 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x179753 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e979753; op2val:0x3e979753;
   valaddr_reg:x12; val_offset:3156*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 3156*FLEN/8, x13, x9, x10)

inst_1600:
// fs1 == 0 and fe1 == 0x7a and fm1 == 0x12f53e and fs2 == 0 and fe2 == 0x7a and fm2 == 0x12f53e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3d12f53e; op2val:0x3d12f53e;
   valaddr_reg:x12; val_offset:3158*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 3158*FLEN/8, x13, x9, x10)

inst_1601:
// fs1 == 0 and fe1 == 0x7a and fm1 == 0x12f53e and fs2 == 0 and fe2 == 0x7a and fm2 == 0x12f53e and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3d12f53e; op2val:0x3d12f53e;
   valaddr_reg:x12; val_offset:3160*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 3160*FLEN/8, x13, x9, x10)

inst_1602:
// fs1 == 0 and fe1 == 0x7a and fm1 == 0x12f53e and fs2 == 0 and fe2 == 0x7a and fm2 == 0x12f53e and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3d12f53e; op2val:0x3d12f53e;
   valaddr_reg:x12; val_offset:3162*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 3162*FLEN/8, x13, x9, x10)

inst_1603:
// fs1 == 0 and fe1 == 0x7a and fm1 == 0x12f53e and fs2 == 0 and fe2 == 0x7a and fm2 == 0x12f53e and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3d12f53e; op2val:0x3d12f53e;
   valaddr_reg:x12; val_offset:3164*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 3164*FLEN/8, x13, x9, x10)

inst_1604:
// fs1 == 0 and fe1 == 0x7a and fm1 == 0x12f53e and fs2 == 0 and fe2 == 0x7a and fm2 == 0x12f53e and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3d12f53e; op2val:0x3d12f53e;
   valaddr_reg:x12; val_offset:3166*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 3166*FLEN/8, x13, x9, x10)

inst_1605:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x2855a5 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x2855a5 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f2855a5; op2val:0x3f2855a5;
   valaddr_reg:x12; val_offset:3168*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 3168*FLEN/8, x13, x9, x10)

inst_1606:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x2855a5 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x2855a5 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f2855a5; op2val:0x3f2855a5;
   valaddr_reg:x12; val_offset:3170*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 3170*FLEN/8, x13, x9, x10)

inst_1607:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x2855a5 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x2855a5 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f2855a5; op2val:0x3f2855a5;
   valaddr_reg:x12; val_offset:3172*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 3172*FLEN/8, x13, x9, x10)

inst_1608:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x2855a5 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x2855a5 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f2855a5; op2val:0x3f2855a5;
   valaddr_reg:x12; val_offset:3174*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 3174*FLEN/8, x13, x9, x10)

inst_1609:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x2855a5 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x2855a5 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f2855a5; op2val:0x3f2855a5;
   valaddr_reg:x12; val_offset:3176*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 3176*FLEN/8, x13, x9, x10)

inst_1610:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x61c65a and fs2 == 0 and fe2 == 0x7e and fm2 == 0x61c65a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f61c65a; op2val:0x3f61c65a;
   valaddr_reg:x12; val_offset:3178*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 3178*FLEN/8, x13, x9, x10)

inst_1611:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x61c65a and fs2 == 0 and fe2 == 0x7e and fm2 == 0x61c65a and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f61c65a; op2val:0x3f61c65a;
   valaddr_reg:x12; val_offset:3180*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 3180*FLEN/8, x13, x9, x10)

inst_1612:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x61c65a and fs2 == 0 and fe2 == 0x7e and fm2 == 0x61c65a and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f61c65a; op2val:0x3f61c65a;
   valaddr_reg:x12; val_offset:3182*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 3182*FLEN/8, x13, x9, x10)

inst_1613:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x61c65a and fs2 == 0 and fe2 == 0x7e and fm2 == 0x61c65a and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f61c65a; op2val:0x3f61c65a;
   valaddr_reg:x12; val_offset:3184*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 3184*FLEN/8, x13, x9, x10)

inst_1614:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x61c65a and fs2 == 0 and fe2 == 0x7e and fm2 == 0x61c65a and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f61c65a; op2val:0x3f61c65a;
   valaddr_reg:x12; val_offset:3186*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 3186*FLEN/8, x13, x9, x10)

inst_1615:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x679ef3 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x679ef3 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f679ef3; op2val:0x3f679ef3;
   valaddr_reg:x12; val_offset:3188*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 3188*FLEN/8, x13, x9, x10)

inst_1616:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x679ef3 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x679ef3 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f679ef3; op2val:0x3f679ef3;
   valaddr_reg:x12; val_offset:3190*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 3190*FLEN/8, x13, x9, x10)

inst_1617:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x679ef3 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x679ef3 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f679ef3; op2val:0x3f679ef3;
   valaddr_reg:x12; val_offset:3192*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 3192*FLEN/8, x13, x9, x10)

inst_1618:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x679ef3 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x679ef3 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f679ef3; op2val:0x3f679ef3;
   valaddr_reg:x12; val_offset:3194*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 3194*FLEN/8, x13, x9, x10)

inst_1619:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x679ef3 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x679ef3 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f679ef3; op2val:0x3f679ef3;
   valaddr_reg:x12; val_offset:3196*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 3196*FLEN/8, x13, x9, x10)

inst_1620:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x01462e and fs2 == 0 and fe2 == 0x7e and fm2 == 0x01462e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f01462e; op2val:0x3f01462e;
   valaddr_reg:x12; val_offset:3198*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 3198*FLEN/8, x13, x9, x10)

inst_1621:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x01462e and fs2 == 0 and fe2 == 0x7e and fm2 == 0x01462e and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f01462e; op2val:0x3f01462e;
   valaddr_reg:x12; val_offset:3200*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 3200*FLEN/8, x13, x9, x10)

inst_1622:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x01462e and fs2 == 0 and fe2 == 0x7e and fm2 == 0x01462e and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f01462e; op2val:0x3f01462e;
   valaddr_reg:x12; val_offset:3202*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 3202*FLEN/8, x13, x9, x10)

inst_1623:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x01462e and fs2 == 0 and fe2 == 0x7e and fm2 == 0x01462e and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f01462e; op2val:0x3f01462e;
   valaddr_reg:x12; val_offset:3204*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 3204*FLEN/8, x13, x9, x10)

inst_1624:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x01462e and fs2 == 0 and fe2 == 0x7e and fm2 == 0x01462e and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f01462e; op2val:0x3f01462e;
   valaddr_reg:x12; val_offset:3206*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 3206*FLEN/8, x13, x9, x10)

inst_1625:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x54d6ca and fs2 == 0 and fe2 == 0x7e and fm2 == 0x54d6ca and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f54d6ca; op2val:0x3f54d6ca;
   valaddr_reg:x12; val_offset:3208*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 3208*FLEN/8, x13, x9, x10)

inst_1626:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x54d6ca and fs2 == 0 and fe2 == 0x7e and fm2 == 0x54d6ca and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f54d6ca; op2val:0x3f54d6ca;
   valaddr_reg:x12; val_offset:3210*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 3210*FLEN/8, x13, x9, x10)

inst_1627:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x54d6ca and fs2 == 0 and fe2 == 0x7e and fm2 == 0x54d6ca and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f54d6ca; op2val:0x3f54d6ca;
   valaddr_reg:x12; val_offset:3212*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 3212*FLEN/8, x13, x9, x10)

inst_1628:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x54d6ca and fs2 == 0 and fe2 == 0x7e and fm2 == 0x54d6ca and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f54d6ca; op2val:0x3f54d6ca;
   valaddr_reg:x12; val_offset:3214*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 3214*FLEN/8, x13, x9, x10)

inst_1629:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x54d6ca and fs2 == 0 and fe2 == 0x7e and fm2 == 0x54d6ca and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f54d6ca; op2val:0x3f54d6ca;
   valaddr_reg:x12; val_offset:3216*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 3216*FLEN/8, x13, x9, x10)

inst_1630:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x382a99 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x382a99 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e382a99; op2val:0x3e382a99;
   valaddr_reg:x12; val_offset:3218*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 3218*FLEN/8, x13, x9, x10)

inst_1631:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x382a99 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x382a99 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e382a99; op2val:0x3e382a99;
   valaddr_reg:x12; val_offset:3220*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 3220*FLEN/8, x13, x9, x10)

inst_1632:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x382a99 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x382a99 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e382a99; op2val:0x3e382a99;
   valaddr_reg:x12; val_offset:3222*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 3222*FLEN/8, x13, x9, x10)

inst_1633:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x382a99 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x382a99 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e382a99; op2val:0x3e382a99;
   valaddr_reg:x12; val_offset:3224*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 3224*FLEN/8, x13, x9, x10)

inst_1634:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x382a99 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x382a99 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e382a99; op2val:0x3e382a99;
   valaddr_reg:x12; val_offset:3226*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 3226*FLEN/8, x13, x9, x10)

inst_1635:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x57130e and fs2 == 0 and fe2 == 0x7d and fm2 == 0x57130e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ed7130e; op2val:0x3ed7130e;
   valaddr_reg:x12; val_offset:3228*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 3228*FLEN/8, x13, x9, x10)

inst_1636:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x57130e and fs2 == 0 and fe2 == 0x7d and fm2 == 0x57130e and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ed7130e; op2val:0x3ed7130e;
   valaddr_reg:x12; val_offset:3230*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 3230*FLEN/8, x13, x9, x10)

inst_1637:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x57130e and fs2 == 0 and fe2 == 0x7d and fm2 == 0x57130e and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ed7130e; op2val:0x3ed7130e;
   valaddr_reg:x12; val_offset:3232*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 3232*FLEN/8, x13, x9, x10)

inst_1638:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x57130e and fs2 == 0 and fe2 == 0x7d and fm2 == 0x57130e and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ed7130e; op2val:0x3ed7130e;
   valaddr_reg:x12; val_offset:3234*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 3234*FLEN/8, x13, x9, x10)

inst_1639:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x57130e and fs2 == 0 and fe2 == 0x7d and fm2 == 0x57130e and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ed7130e; op2val:0x3ed7130e;
   valaddr_reg:x12; val_offset:3236*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 3236*FLEN/8, x13, x9, x10)

inst_1640:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x11f408 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x11f408 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e91f408; op2val:0x3e91f408;
   valaddr_reg:x12; val_offset:3238*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 3238*FLEN/8, x13, x9, x10)

inst_1641:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x11f408 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x11f408 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e91f408; op2val:0x3e91f408;
   valaddr_reg:x12; val_offset:3240*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 3240*FLEN/8, x13, x9, x10)

inst_1642:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x11f408 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x11f408 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e91f408; op2val:0x3e91f408;
   valaddr_reg:x12; val_offset:3242*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 3242*FLEN/8, x13, x9, x10)

inst_1643:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x11f408 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x11f408 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e91f408; op2val:0x3e91f408;
   valaddr_reg:x12; val_offset:3244*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 3244*FLEN/8, x13, x9, x10)

inst_1644:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x11f408 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x11f408 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e91f408; op2val:0x3e91f408;
   valaddr_reg:x12; val_offset:3246*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 3246*FLEN/8, x13, x9, x10)

inst_1645:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x501139 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x501139 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ed01139; op2val:0x3ed01139;
   valaddr_reg:x12; val_offset:3248*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 3248*FLEN/8, x13, x9, x10)

inst_1646:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x501139 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x501139 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ed01139; op2val:0x3ed01139;
   valaddr_reg:x12; val_offset:3250*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 3250*FLEN/8, x13, x9, x10)

inst_1647:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x501139 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x501139 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ed01139; op2val:0x3ed01139;
   valaddr_reg:x12; val_offset:3252*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 3252*FLEN/8, x13, x9, x10)

inst_1648:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x501139 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x501139 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ed01139; op2val:0x3ed01139;
   valaddr_reg:x12; val_offset:3254*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 3254*FLEN/8, x13, x9, x10)

inst_1649:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x501139 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x501139 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ed01139; op2val:0x3ed01139;
   valaddr_reg:x12; val_offset:3256*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 3256*FLEN/8, x13, x9, x10)

inst_1650:
// fs1 == 0 and fe1 == 0x77 and fm1 == 0x37b77e and fs2 == 0 and fe2 == 0x77 and fm2 == 0x37b77e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3bb7b77e; op2val:0x3bb7b77e;
   valaddr_reg:x12; val_offset:3258*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 3258*FLEN/8, x13, x9, x10)

inst_1651:
// fs1 == 0 and fe1 == 0x77 and fm1 == 0x37b77e and fs2 == 0 and fe2 == 0x77 and fm2 == 0x37b77e and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3bb7b77e; op2val:0x3bb7b77e;
   valaddr_reg:x12; val_offset:3260*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 3260*FLEN/8, x13, x9, x10)

inst_1652:
// fs1 == 0 and fe1 == 0x77 and fm1 == 0x37b77e and fs2 == 0 and fe2 == 0x77 and fm2 == 0x37b77e and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3bb7b77e; op2val:0x3bb7b77e;
   valaddr_reg:x12; val_offset:3262*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 3262*FLEN/8, x13, x9, x10)

inst_1653:
// fs1 == 0 and fe1 == 0x77 and fm1 == 0x37b77e and fs2 == 0 and fe2 == 0x77 and fm2 == 0x37b77e and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3bb7b77e; op2val:0x3bb7b77e;
   valaddr_reg:x12; val_offset:3264*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 3264*FLEN/8, x13, x9, x10)

inst_1654:
// fs1 == 0 and fe1 == 0x77 and fm1 == 0x37b77e and fs2 == 0 and fe2 == 0x77 and fm2 == 0x37b77e and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3bb7b77e; op2val:0x3bb7b77e;
   valaddr_reg:x12; val_offset:3266*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 3266*FLEN/8, x13, x9, x10)

inst_1655:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x4f6b2d and fs2 == 0 and fe2 == 0x7c and fm2 == 0x4f6b2d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e4f6b2d; op2val:0x3e4f6b2d;
   valaddr_reg:x12; val_offset:3268*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 3268*FLEN/8, x13, x9, x10)

inst_1656:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x4f6b2d and fs2 == 0 and fe2 == 0x7c and fm2 == 0x4f6b2d and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e4f6b2d; op2val:0x3e4f6b2d;
   valaddr_reg:x12; val_offset:3270*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 3270*FLEN/8, x13, x9, x10)

inst_1657:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x4f6b2d and fs2 == 0 and fe2 == 0x7c and fm2 == 0x4f6b2d and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e4f6b2d; op2val:0x3e4f6b2d;
   valaddr_reg:x12; val_offset:3272*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 3272*FLEN/8, x13, x9, x10)

inst_1658:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x4f6b2d and fs2 == 0 and fe2 == 0x7c and fm2 == 0x4f6b2d and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e4f6b2d; op2val:0x3e4f6b2d;
   valaddr_reg:x12; val_offset:3274*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 3274*FLEN/8, x13, x9, x10)

inst_1659:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x4f6b2d and fs2 == 0 and fe2 == 0x7c and fm2 == 0x4f6b2d and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e4f6b2d; op2val:0x3e4f6b2d;
   valaddr_reg:x12; val_offset:3276*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 3276*FLEN/8, x13, x9, x10)

inst_1660:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x2e305e and fs2 == 0 and fe2 == 0x7e and fm2 == 0x2e305e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f2e305e; op2val:0x3f2e305e;
   valaddr_reg:x12; val_offset:3278*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 3278*FLEN/8, x13, x9, x10)

inst_1661:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x2e305e and fs2 == 0 and fe2 == 0x7e and fm2 == 0x2e305e and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f2e305e; op2val:0x3f2e305e;
   valaddr_reg:x12; val_offset:3280*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 3280*FLEN/8, x13, x9, x10)

inst_1662:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x2e305e and fs2 == 0 and fe2 == 0x7e and fm2 == 0x2e305e and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f2e305e; op2val:0x3f2e305e;
   valaddr_reg:x12; val_offset:3282*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 3282*FLEN/8, x13, x9, x10)

inst_1663:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x2e305e and fs2 == 0 and fe2 == 0x7e and fm2 == 0x2e305e and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f2e305e; op2val:0x3f2e305e;
   valaddr_reg:x12; val_offset:3284*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 3284*FLEN/8, x13, x9, x10)

inst_1664:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x2e305e and fs2 == 0 and fe2 == 0x7e and fm2 == 0x2e305e and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f2e305e; op2val:0x3f2e305e;
   valaddr_reg:x12; val_offset:3286*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 3286*FLEN/8, x13, x9, x10)

inst_1665:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x56e8fa and fs2 == 0 and fe2 == 0x7d and fm2 == 0x56e8fa and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ed6e8fa; op2val:0x3ed6e8fa;
   valaddr_reg:x12; val_offset:3288*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 3288*FLEN/8, x13, x9, x10)

inst_1666:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x56e8fa and fs2 == 0 and fe2 == 0x7d and fm2 == 0x56e8fa and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ed6e8fa; op2val:0x3ed6e8fa;
   valaddr_reg:x12; val_offset:3290*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 3290*FLEN/8, x13, x9, x10)

inst_1667:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x56e8fa and fs2 == 0 and fe2 == 0x7d and fm2 == 0x56e8fa and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ed6e8fa; op2val:0x3ed6e8fa;
   valaddr_reg:x12; val_offset:3292*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 3292*FLEN/8, x13, x9, x10)

inst_1668:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x56e8fa and fs2 == 0 and fe2 == 0x7d and fm2 == 0x56e8fa and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ed6e8fa; op2val:0x3ed6e8fa;
   valaddr_reg:x12; val_offset:3294*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 3294*FLEN/8, x13, x9, x10)

inst_1669:
// fs1 == 0 and fe1 == 0x7d and fm1 == 0x56e8fa and fs2 == 0 and fe2 == 0x7d and fm2 == 0x56e8fa and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3ed6e8fa; op2val:0x3ed6e8fa;
   valaddr_reg:x12; val_offset:3296*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 3296*FLEN/8, x13, x9, x10)

inst_1670:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x199e47 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x199e47 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f199e47; op2val:0x3f199e47;
   valaddr_reg:x12; val_offset:3298*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 3298*FLEN/8, x13, x9, x10)

inst_1671:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x199e47 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x199e47 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f199e47; op2val:0x3f199e47;
   valaddr_reg:x12; val_offset:3300*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 3300*FLEN/8, x13, x9, x10)

inst_1672:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x199e47 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x199e47 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f199e47; op2val:0x3f199e47;
   valaddr_reg:x12; val_offset:3302*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 3302*FLEN/8, x13, x9, x10)

inst_1673:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x199e47 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x199e47 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f199e47; op2val:0x3f199e47;
   valaddr_reg:x12; val_offset:3304*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 3304*FLEN/8, x13, x9, x10)

inst_1674:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x199e47 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x199e47 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f199e47; op2val:0x3f199e47;
   valaddr_reg:x12; val_offset:3306*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 3306*FLEN/8, x13, x9, x10)

inst_1675:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x773be8 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x773be8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e773be8; op2val:0x3e773be8;
   valaddr_reg:x12; val_offset:3308*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 3308*FLEN/8, x13, x9, x10)

inst_1676:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x773be8 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x773be8 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e773be8; op2val:0x3e773be8;
   valaddr_reg:x12; val_offset:3310*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 3310*FLEN/8, x13, x9, x10)

inst_1677:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x773be8 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x773be8 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e773be8; op2val:0x3e773be8;
   valaddr_reg:x12; val_offset:3312*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 3312*FLEN/8, x13, x9, x10)

inst_1678:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x773be8 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x773be8 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e773be8; op2val:0x3e773be8;
   valaddr_reg:x12; val_offset:3314*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 3314*FLEN/8, x13, x9, x10)

inst_1679:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x773be8 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x773be8 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e773be8; op2val:0x3e773be8;
   valaddr_reg:x12; val_offset:3316*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 3316*FLEN/8, x13, x9, x10)

inst_1680:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x5d9a4e and fs2 == 0 and fe2 == 0x7e and fm2 == 0x5d9a4e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f5d9a4e; op2val:0x3f5d9a4e;
   valaddr_reg:x12; val_offset:3318*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 3318*FLEN/8, x13, x9, x10)

inst_1681:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x5d9a4e and fs2 == 0 and fe2 == 0x7e and fm2 == 0x5d9a4e and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f5d9a4e; op2val:0x3f5d9a4e;
   valaddr_reg:x12; val_offset:3320*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 3320*FLEN/8, x13, x9, x10)

inst_1682:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x5d9a4e and fs2 == 0 and fe2 == 0x7e and fm2 == 0x5d9a4e and  fcsr == 0x40 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f5d9a4e; op2val:0x3f5d9a4e;
   valaddr_reg:x12; val_offset:3322*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 64, 0, x12, 3322*FLEN/8, x13, x9, x10)

inst_1683:
// fs1 == 0 and fe1 == 0x7e and fm1 == 0x5d9a4e and fs2 == 0 and fe2 == 0x7e and fm2 == 0x5d9a4e and  fcsr == 0x60 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f5d9a4e; op2val:0x3f5d9a4e;
   valaddr_reg:x12; val_offset:3324*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 96, 0, x12, 3324*FLEN/8, x13, x9, x10)

inst_1684:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x282d31 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x282d31 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e282d31; op2val:0x3e282d31;
   valaddr_reg:x12; val_offset:3326*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 128, 0, x12, 3326*FLEN/8, x13, x9, x10)

inst_1685:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x736cd9 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x736cd9 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e736cd9; op2val:0x3e736cd9;
   valaddr_reg:x12; val_offset:3328*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 0, 0, x12, 3328*FLEN/8, x13, x9, x10)

inst_1686:
// fs1 == 0 and fe1 == 0x7c and fm1 == 0x736cd9 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x736cd9 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fsub.s ; op1:x30; op2:x29; dest:x31; op1val:0x3e736cd9; op2val:0x3e736cd9;
   valaddr_reg:x12; val_offset:3330*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10
*/
TEST_FPRR_OP(fsub.s, x31, x30, x29, dyn, 32, 0, x12, 3330*FLEN/8, x13, x9, x10)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(1063098958,32,FLEN)
NAN_BOXED(1063098958,32,FLEN)
NAN_BOXED(1063098958,32,FLEN)
NAN_BOXED(1063098958,32,FLEN)
NAN_BOXED(1063098958,32,FLEN)
NAN_BOXED(1063098958,32,FLEN)
NAN_BOXED(1063098958,32,FLEN)
NAN_BOXED(1063098958,32,FLEN)
NAN_BOXED(1063098958,32,FLEN)
NAN_BOXED(1063098958,32,FLEN)
NAN_BOXED(1047651600,32,FLEN)
NAN_BOXED(1047651600,32,FLEN)
NAN_BOXED(1047651600,32,FLEN)
NAN_BOXED(1047651600,32,FLEN)
NAN_BOXED(1047651600,32,FLEN)
NAN_BOXED(1047651600,32,FLEN)
NAN_BOXED(1047651600,32,FLEN)
NAN_BOXED(1047651600,32,FLEN)
NAN_BOXED(1047651600,32,FLEN)
NAN_BOXED(1047651600,32,FLEN)
NAN_BOXED(1057041194,32,FLEN)
NAN_BOXED(1057041194,32,FLEN)
NAN_BOXED(1057041194,32,FLEN)
NAN_BOXED(1057041194,32,FLEN)
NAN_BOXED(1057041194,32,FLEN)
NAN_BOXED(1057041194,32,FLEN)
NAN_BOXED(1057041194,32,FLEN)
NAN_BOXED(1057041194,32,FLEN)
NAN_BOXED(1057041194,32,FLEN)
NAN_BOXED(1057041194,32,FLEN)
NAN_BOXED(1051877991,32,FLEN)
NAN_BOXED(1051877991,32,FLEN)
NAN_BOXED(1051877991,32,FLEN)
NAN_BOXED(1051877991,32,FLEN)
NAN_BOXED(1051877991,32,FLEN)
NAN_BOXED(1051877991,32,FLEN)
NAN_BOXED(1051877991,32,FLEN)
NAN_BOXED(1051877991,32,FLEN)
NAN_BOXED(1051877991,32,FLEN)
NAN_BOXED(1051877991,32,FLEN)
NAN_BOXED(1063778513,32,FLEN)
NAN_BOXED(1063778513,32,FLEN)
test_dataset_1:
NAN_BOXED(1063778513,32,FLEN)
NAN_BOXED(1063778513,32,FLEN)
NAN_BOXED(1063778513,32,FLEN)
NAN_BOXED(1063778513,32,FLEN)
NAN_BOXED(1063778513,32,FLEN)
NAN_BOXED(1063778513,32,FLEN)
NAN_BOXED(1063778513,32,FLEN)
NAN_BOXED(1063778513,32,FLEN)
NAN_BOXED(1042820401,32,FLEN)
NAN_BOXED(1042820401,32,FLEN)
NAN_BOXED(1042820401,32,FLEN)
NAN_BOXED(1042820401,32,FLEN)
NAN_BOXED(1042820401,32,FLEN)
NAN_BOXED(1042820401,32,FLEN)
NAN_BOXED(1042820401,32,FLEN)
NAN_BOXED(1042820401,32,FLEN)
NAN_BOXED(1042820401,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1047751897,32,FLEN)
NAN_BOXED(1047751897,32,FLEN)
NAN_BOXED(1047751897,32,FLEN)
NAN_BOXED(1047751897,32,FLEN)
NAN_BOXED(1047751897,32,FLEN)
NAN_BOXED(1047751897,32,FLEN)
NAN_BOXED(1047751897,32,FLEN)
NAN_BOXED(1047751897,32,FLEN)
NAN_BOXED(1047751897,32,FLEN)
NAN_BOXED(1057880858,32,FLEN)
NAN_BOXED(1057880858,32,FLEN)
NAN_BOXED(1057880858,32,FLEN)
NAN_BOXED(1057880858,32,FLEN)
NAN_BOXED(1057880858,32,FLEN)
NAN_BOXED(1057880858,32,FLEN)
NAN_BOXED(1057880858,32,FLEN)
NAN_BOXED(1057880858,32,FLEN)
NAN_BOXED(1057880858,32,FLEN)
NAN_BOXED(1057880858,32,FLEN)
NAN_BOXED(1061515222,32,FLEN)
NAN_BOXED(1061515222,32,FLEN)
NAN_BOXED(1061515222,32,FLEN)
NAN_BOXED(1061515222,32,FLEN)
NAN_BOXED(1061515222,32,FLEN)
NAN_BOXED(1061515222,32,FLEN)
NAN_BOXED(1061515222,32,FLEN)
NAN_BOXED(1061515222,32,FLEN)
NAN_BOXED(1061515222,32,FLEN)
NAN_BOXED(1061515222,32,FLEN)
NAN_BOXED(1036640358,32,FLEN)
NAN_BOXED(1036640358,32,FLEN)
NAN_BOXED(1036640358,32,FLEN)
NAN_BOXED(1036640358,32,FLEN)
NAN_BOXED(1036640358,32,FLEN)
NAN_BOXED(1036640358,32,FLEN)
NAN_BOXED(1036640358,32,FLEN)
NAN_BOXED(1036640358,32,FLEN)
NAN_BOXED(1036640358,32,FLEN)
NAN_BOXED(1036640358,32,FLEN)
NAN_BOXED(1064926305,32,FLEN)
NAN_BOXED(1064926305,32,FLEN)
NAN_BOXED(1064926305,32,FLEN)
NAN_BOXED(1064926305,32,FLEN)
NAN_BOXED(1064926305,32,FLEN)
NAN_BOXED(1064926305,32,FLEN)
NAN_BOXED(1064926305,32,FLEN)
NAN_BOXED(1064926305,32,FLEN)
NAN_BOXED(1064926305,32,FLEN)
NAN_BOXED(1064926305,32,FLEN)
NAN_BOXED(1031356090,32,FLEN)
NAN_BOXED(1031356090,32,FLEN)
NAN_BOXED(1031356090,32,FLEN)
NAN_BOXED(1031356090,32,FLEN)
NAN_BOXED(1031356090,32,FLEN)
NAN_BOXED(1031356090,32,FLEN)
NAN_BOXED(1031356090,32,FLEN)
NAN_BOXED(1031356090,32,FLEN)
NAN_BOXED(1031356090,32,FLEN)
NAN_BOXED(1031356090,32,FLEN)
NAN_BOXED(1061719281,32,FLEN)
NAN_BOXED(1061719281,32,FLEN)
NAN_BOXED(1061719281,32,FLEN)
NAN_BOXED(1061719281,32,FLEN)
NAN_BOXED(1061719281,32,FLEN)
NAN_BOXED(1061719281,32,FLEN)
NAN_BOXED(1061719281,32,FLEN)
NAN_BOXED(1061719281,32,FLEN)
NAN_BOXED(1061719281,32,FLEN)
NAN_BOXED(1061719281,32,FLEN)
NAN_BOXED(1064865992,32,FLEN)
NAN_BOXED(1064865992,32,FLEN)
NAN_BOXED(1064865992,32,FLEN)
NAN_BOXED(1064865992,32,FLEN)
NAN_BOXED(1064865992,32,FLEN)
NAN_BOXED(1064865992,32,FLEN)
NAN_BOXED(1064865992,32,FLEN)
NAN_BOXED(1064865992,32,FLEN)
NAN_BOXED(1064865992,32,FLEN)
NAN_BOXED(1064865992,32,FLEN)
NAN_BOXED(1058006681,32,FLEN)
NAN_BOXED(1058006681,32,FLEN)
NAN_BOXED(1058006681,32,FLEN)
NAN_BOXED(1058006681,32,FLEN)
NAN_BOXED(1058006681,32,FLEN)
NAN_BOXED(1058006681,32,FLEN)
NAN_BOXED(1058006681,32,FLEN)
NAN_BOXED(1058006681,32,FLEN)
NAN_BOXED(1058006681,32,FLEN)
NAN_BOXED(1058006681,32,FLEN)
NAN_BOXED(1061442707,32,FLEN)
NAN_BOXED(1061442707,32,FLEN)
NAN_BOXED(1061442707,32,FLEN)
NAN_BOXED(1061442707,32,FLEN)
NAN_BOXED(1061442707,32,FLEN)
NAN_BOXED(1061442707,32,FLEN)
NAN_BOXED(1061442707,32,FLEN)
NAN_BOXED(1061442707,32,FLEN)
NAN_BOXED(1061442707,32,FLEN)
NAN_BOXED(1061442707,32,FLEN)
NAN_BOXED(1061682679,32,FLEN)
NAN_BOXED(1061682679,32,FLEN)
NAN_BOXED(1061682679,32,FLEN)
NAN_BOXED(1061682679,32,FLEN)
NAN_BOXED(1061682679,32,FLEN)
NAN_BOXED(1061682679,32,FLEN)
NAN_BOXED(1061682679,32,FLEN)
NAN_BOXED(1061682679,32,FLEN)
NAN_BOXED(1061682679,32,FLEN)
NAN_BOXED(1061682679,32,FLEN)
NAN_BOXED(1060491487,32,FLEN)
NAN_BOXED(1060491487,32,FLEN)
NAN_BOXED(1060491487,32,FLEN)
NAN_BOXED(1060491487,32,FLEN)
NAN_BOXED(1060491487,32,FLEN)
NAN_BOXED(1060491487,32,FLEN)
NAN_BOXED(1060491487,32,FLEN)
NAN_BOXED(1060491487,32,FLEN)
NAN_BOXED(1060491487,32,FLEN)
NAN_BOXED(1060491487,32,FLEN)
NAN_BOXED(1042698741,32,FLEN)
NAN_BOXED(1042698741,32,FLEN)
NAN_BOXED(1042698741,32,FLEN)
NAN_BOXED(1042698741,32,FLEN)
NAN_BOXED(1042698741,32,FLEN)
NAN_BOXED(1042698741,32,FLEN)
NAN_BOXED(1042698741,32,FLEN)
NAN_BOXED(1042698741,32,FLEN)
NAN_BOXED(1042698741,32,FLEN)
NAN_BOXED(1042698741,32,FLEN)
NAN_BOXED(1052190001,32,FLEN)
NAN_BOXED(1052190001,32,FLEN)
NAN_BOXED(1052190001,32,FLEN)
NAN_BOXED(1052190001,32,FLEN)
NAN_BOXED(1052190001,32,FLEN)
NAN_BOXED(1052190001,32,FLEN)
NAN_BOXED(1052190001,32,FLEN)
NAN_BOXED(1052190001,32,FLEN)
NAN_BOXED(1052190001,32,FLEN)
NAN_BOXED(1052190001,32,FLEN)
NAN_BOXED(1005868644,32,FLEN)
NAN_BOXED(1005868644,32,FLEN)
NAN_BOXED(1005868644,32,FLEN)
NAN_BOXED(1005868644,32,FLEN)
NAN_BOXED(1005868644,32,FLEN)
NAN_BOXED(1005868644,32,FLEN)
NAN_BOXED(1005868644,32,FLEN)
NAN_BOXED(1005868644,32,FLEN)
NAN_BOXED(1005868644,32,FLEN)
NAN_BOXED(1005868644,32,FLEN)
NAN_BOXED(1063325019,32,FLEN)
NAN_BOXED(1063325019,32,FLEN)
NAN_BOXED(1063325019,32,FLEN)
NAN_BOXED(1063325019,32,FLEN)
NAN_BOXED(1063325019,32,FLEN)
NAN_BOXED(1063325019,32,FLEN)
NAN_BOXED(1063325019,32,FLEN)
NAN_BOXED(1063325019,32,FLEN)
NAN_BOXED(1063325019,32,FLEN)
NAN_BOXED(1063325019,32,FLEN)
NAN_BOXED(1049532824,32,FLEN)
NAN_BOXED(1049532824,32,FLEN)
NAN_BOXED(1049532824,32,FLEN)
NAN_BOXED(1049532824,32,FLEN)
NAN_BOXED(1049532824,32,FLEN)
NAN_BOXED(1049532824,32,FLEN)
NAN_BOXED(1049532824,32,FLEN)
NAN_BOXED(1049532824,32,FLEN)
NAN_BOXED(1049532824,32,FLEN)
NAN_BOXED(1049532824,32,FLEN)
NAN_BOXED(1031940976,32,FLEN)
NAN_BOXED(1031940976,32,FLEN)
NAN_BOXED(1031940976,32,FLEN)
NAN_BOXED(1031940976,32,FLEN)
NAN_BOXED(1031940976,32,FLEN)
NAN_BOXED(1031940976,32,FLEN)
NAN_BOXED(1031940976,32,FLEN)
NAN_BOXED(1031940976,32,FLEN)
NAN_BOXED(1031940976,32,FLEN)
NAN_BOXED(1031940976,32,FLEN)
NAN_BOXED(1043204895,32,FLEN)
NAN_BOXED(1043204895,32,FLEN)
NAN_BOXED(1043204895,32,FLEN)
NAN_BOXED(1043204895,32,FLEN)
NAN_BOXED(1043204895,32,FLEN)
NAN_BOXED(1043204895,32,FLEN)
NAN_BOXED(1043204895,32,FLEN)
NAN_BOXED(1043204895,32,FLEN)
NAN_BOXED(1043204895,32,FLEN)
NAN_BOXED(1043204895,32,FLEN)
NAN_BOXED(1060263536,32,FLEN)
NAN_BOXED(1060263536,32,FLEN)
NAN_BOXED(1060263536,32,FLEN)
NAN_BOXED(1060263536,32,FLEN)
NAN_BOXED(1060263536,32,FLEN)
NAN_BOXED(1060263536,32,FLEN)
NAN_BOXED(1060263536,32,FLEN)
NAN_BOXED(1060263536,32,FLEN)
NAN_BOXED(1060263536,32,FLEN)
NAN_BOXED(1060263536,32,FLEN)
NAN_BOXED(1039183577,32,FLEN)
NAN_BOXED(1039183577,32,FLEN)
NAN_BOXED(1039183577,32,FLEN)
NAN_BOXED(1039183577,32,FLEN)
NAN_BOXED(1039183577,32,FLEN)
NAN_BOXED(1039183577,32,FLEN)
NAN_BOXED(1039183577,32,FLEN)
NAN_BOXED(1039183577,32,FLEN)
NAN_BOXED(1039183577,32,FLEN)
NAN_BOXED(1039183577,32,FLEN)
NAN_BOXED(1056787312,32,FLEN)
NAN_BOXED(1056787312,32,FLEN)
NAN_BOXED(1056787312,32,FLEN)
NAN_BOXED(1056787312,32,FLEN)
NAN_BOXED(1056787312,32,FLEN)
NAN_BOXED(1056787312,32,FLEN)
NAN_BOXED(1056787312,32,FLEN)
NAN_BOXED(1056787312,32,FLEN)
NAN_BOXED(1056787312,32,FLEN)
NAN_BOXED(1056787312,32,FLEN)
NAN_BOXED(1064773968,32,FLEN)
NAN_BOXED(1064773968,32,FLEN)
NAN_BOXED(1064773968,32,FLEN)
NAN_BOXED(1064773968,32,FLEN)
NAN_BOXED(1064773968,32,FLEN)
NAN_BOXED(1064773968,32,FLEN)
NAN_BOXED(1064773968,32,FLEN)
NAN_BOXED(1064773968,32,FLEN)
NAN_BOXED(1064773968,32,FLEN)
NAN_BOXED(1064773968,32,FLEN)
NAN_BOXED(1045394754,32,FLEN)
NAN_BOXED(1045394754,32,FLEN)
NAN_BOXED(1045394754,32,FLEN)
NAN_BOXED(1045394754,32,FLEN)
NAN_BOXED(1045394754,32,FLEN)
NAN_BOXED(1045394754,32,FLEN)
NAN_BOXED(1045394754,32,FLEN)
NAN_BOXED(1045394754,32,FLEN)
NAN_BOXED(1045394754,32,FLEN)
NAN_BOXED(1045394754,32,FLEN)
NAN_BOXED(1062450633,32,FLEN)
NAN_BOXED(1062450633,32,FLEN)
NAN_BOXED(1062450633,32,FLEN)
NAN_BOXED(1062450633,32,FLEN)
NAN_BOXED(1062450633,32,FLEN)
NAN_BOXED(1062450633,32,FLEN)
NAN_BOXED(1062450633,32,FLEN)
NAN_BOXED(1062450633,32,FLEN)
NAN_BOXED(1062450633,32,FLEN)
NAN_BOXED(1062450633,32,FLEN)
NAN_BOXED(1050151690,32,FLEN)
NAN_BOXED(1050151690,32,FLEN)
NAN_BOXED(1050151690,32,FLEN)
NAN_BOXED(1050151690,32,FLEN)
NAN_BOXED(1050151690,32,FLEN)
NAN_BOXED(1050151690,32,FLEN)
NAN_BOXED(1050151690,32,FLEN)
NAN_BOXED(1050151690,32,FLEN)
NAN_BOXED(1050151690,32,FLEN)
NAN_BOXED(1050151690,32,FLEN)
NAN_BOXED(1059066742,32,FLEN)
NAN_BOXED(1059066742,32,FLEN)
NAN_BOXED(1059066742,32,FLEN)
NAN_BOXED(1059066742,32,FLEN)
NAN_BOXED(1059066742,32,FLEN)
NAN_BOXED(1059066742,32,FLEN)
NAN_BOXED(1059066742,32,FLEN)
NAN_BOXED(1059066742,32,FLEN)
NAN_BOXED(1059066742,32,FLEN)
NAN_BOXED(1059066742,32,FLEN)
NAN_BOXED(1056681861,32,FLEN)
NAN_BOXED(1056681861,32,FLEN)
NAN_BOXED(1056681861,32,FLEN)
NAN_BOXED(1056681861,32,FLEN)
NAN_BOXED(1056681861,32,FLEN)
NAN_BOXED(1056681861,32,FLEN)
NAN_BOXED(1056681861,32,FLEN)
NAN_BOXED(1056681861,32,FLEN)
NAN_BOXED(1056681861,32,FLEN)
NAN_BOXED(1056681861,32,FLEN)
NAN_BOXED(1056262031,32,FLEN)
NAN_BOXED(1056262031,32,FLEN)
NAN_BOXED(1056262031,32,FLEN)
NAN_BOXED(1056262031,32,FLEN)
NAN_BOXED(1056262031,32,FLEN)
NAN_BOXED(1056262031,32,FLEN)
NAN_BOXED(1056262031,32,FLEN)
NAN_BOXED(1056262031,32,FLEN)
NAN_BOXED(1056262031,32,FLEN)
NAN_BOXED(1056262031,32,FLEN)
NAN_BOXED(1057137522,32,FLEN)
NAN_BOXED(1057137522,32,FLEN)
NAN_BOXED(1057137522,32,FLEN)
NAN_BOXED(1057137522,32,FLEN)
NAN_BOXED(1057137522,32,FLEN)
NAN_BOXED(1057137522,32,FLEN)
NAN_BOXED(1057137522,32,FLEN)
NAN_BOXED(1057137522,32,FLEN)
NAN_BOXED(1057137522,32,FLEN)
NAN_BOXED(1057137522,32,FLEN)
NAN_BOXED(1064623620,32,FLEN)
NAN_BOXED(1064623620,32,FLEN)
NAN_BOXED(1064623620,32,FLEN)
NAN_BOXED(1064623620,32,FLEN)
NAN_BOXED(1064623620,32,FLEN)
NAN_BOXED(1064623620,32,FLEN)
NAN_BOXED(1064623620,32,FLEN)
NAN_BOXED(1064623620,32,FLEN)
NAN_BOXED(1064623620,32,FLEN)
NAN_BOXED(1064623620,32,FLEN)
NAN_BOXED(1015658985,32,FLEN)
NAN_BOXED(1015658985,32,FLEN)
NAN_BOXED(1015658985,32,FLEN)
NAN_BOXED(1015658985,32,FLEN)
NAN_BOXED(1015658985,32,FLEN)
NAN_BOXED(1015658985,32,FLEN)
NAN_BOXED(1015658985,32,FLEN)
NAN_BOXED(1015658985,32,FLEN)
NAN_BOXED(1015658985,32,FLEN)
NAN_BOXED(1015658985,32,FLEN)
NAN_BOXED(1058749709,32,FLEN)
NAN_BOXED(1058749709,32,FLEN)
NAN_BOXED(1058749709,32,FLEN)
NAN_BOXED(1058749709,32,FLEN)
NAN_BOXED(1058749709,32,FLEN)
NAN_BOXED(1058749709,32,FLEN)
NAN_BOXED(1058749709,32,FLEN)
NAN_BOXED(1058749709,32,FLEN)
NAN_BOXED(1058749709,32,FLEN)
NAN_BOXED(1058749709,32,FLEN)
NAN_BOXED(1056889494,32,FLEN)
NAN_BOXED(1056889494,32,FLEN)
NAN_BOXED(1056889494,32,FLEN)
NAN_BOXED(1056889494,32,FLEN)
NAN_BOXED(1056889494,32,FLEN)
NAN_BOXED(1056889494,32,FLEN)
NAN_BOXED(1056889494,32,FLEN)
NAN_BOXED(1056889494,32,FLEN)
NAN_BOXED(1056889494,32,FLEN)
NAN_BOXED(1056889494,32,FLEN)
NAN_BOXED(1047198715,32,FLEN)
NAN_BOXED(1047198715,32,FLEN)
NAN_BOXED(1047198715,32,FLEN)
NAN_BOXED(1047198715,32,FLEN)
NAN_BOXED(1047198715,32,FLEN)
NAN_BOXED(1047198715,32,FLEN)
NAN_BOXED(1047198715,32,FLEN)
NAN_BOXED(1047198715,32,FLEN)
NAN_BOXED(1047198715,32,FLEN)
NAN_BOXED(1047198715,32,FLEN)
NAN_BOXED(1041174578,32,FLEN)
NAN_BOXED(1041174578,32,FLEN)
NAN_BOXED(1041174578,32,FLEN)
NAN_BOXED(1041174578,32,FLEN)
NAN_BOXED(1041174578,32,FLEN)
NAN_BOXED(1041174578,32,FLEN)
NAN_BOXED(1041174578,32,FLEN)
NAN_BOXED(1041174578,32,FLEN)
NAN_BOXED(1041174578,32,FLEN)
NAN_BOXED(1041174578,32,FLEN)
NAN_BOXED(1056502507,32,FLEN)
NAN_BOXED(1056502507,32,FLEN)
NAN_BOXED(1056502507,32,FLEN)
NAN_BOXED(1056502507,32,FLEN)
NAN_BOXED(1056502507,32,FLEN)
NAN_BOXED(1056502507,32,FLEN)
NAN_BOXED(1056502507,32,FLEN)
NAN_BOXED(1056502507,32,FLEN)
NAN_BOXED(1056502507,32,FLEN)
NAN_BOXED(1056502507,32,FLEN)
NAN_BOXED(1054354247,32,FLEN)
NAN_BOXED(1054354247,32,FLEN)
NAN_BOXED(1054354247,32,FLEN)
NAN_BOXED(1054354247,32,FLEN)
NAN_BOXED(1054354247,32,FLEN)
NAN_BOXED(1054354247,32,FLEN)
NAN_BOXED(1054354247,32,FLEN)
NAN_BOXED(1054354247,32,FLEN)
NAN_BOXED(1054354247,32,FLEN)
NAN_BOXED(1054354247,32,FLEN)
NAN_BOXED(1060835456,32,FLEN)
NAN_BOXED(1060835456,32,FLEN)
NAN_BOXED(1060835456,32,FLEN)
NAN_BOXED(1060835456,32,FLEN)
NAN_BOXED(1060835456,32,FLEN)
NAN_BOXED(1060835456,32,FLEN)
NAN_BOXED(1060835456,32,FLEN)
NAN_BOXED(1060835456,32,FLEN)
NAN_BOXED(1060835456,32,FLEN)
NAN_BOXED(1060835456,32,FLEN)
NAN_BOXED(1026533078,32,FLEN)
NAN_BOXED(1026533078,32,FLEN)
NAN_BOXED(1026533078,32,FLEN)
NAN_BOXED(1026533078,32,FLEN)
NAN_BOXED(1026533078,32,FLEN)
NAN_BOXED(1026533078,32,FLEN)
NAN_BOXED(1026533078,32,FLEN)
NAN_BOXED(1026533078,32,FLEN)
NAN_BOXED(1026533078,32,FLEN)
NAN_BOXED(1026533078,32,FLEN)
NAN_BOXED(1046317435,32,FLEN)
NAN_BOXED(1046317435,32,FLEN)
NAN_BOXED(1046317435,32,FLEN)
NAN_BOXED(1046317435,32,FLEN)
NAN_BOXED(1046317435,32,FLEN)
NAN_BOXED(1046317435,32,FLEN)
NAN_BOXED(1046317435,32,FLEN)
NAN_BOXED(1046317435,32,FLEN)
NAN_BOXED(1046317435,32,FLEN)
NAN_BOXED(1046317435,32,FLEN)
NAN_BOXED(1038686894,32,FLEN)
NAN_BOXED(1038686894,32,FLEN)
NAN_BOXED(1038686894,32,FLEN)
NAN_BOXED(1038686894,32,FLEN)
NAN_BOXED(1038686894,32,FLEN)
NAN_BOXED(1038686894,32,FLEN)
NAN_BOXED(1038686894,32,FLEN)
NAN_BOXED(1038686894,32,FLEN)
NAN_BOXED(1038686894,32,FLEN)
NAN_BOXED(1038686894,32,FLEN)
NAN_BOXED(1044607188,32,FLEN)
NAN_BOXED(1044607188,32,FLEN)
NAN_BOXED(1044607188,32,FLEN)
NAN_BOXED(1044607188,32,FLEN)
NAN_BOXED(1044607188,32,FLEN)
NAN_BOXED(1044607188,32,FLEN)
NAN_BOXED(1044607188,32,FLEN)
NAN_BOXED(1044607188,32,FLEN)
NAN_BOXED(1044607188,32,FLEN)
NAN_BOXED(1044607188,32,FLEN)
NAN_BOXED(1054905779,32,FLEN)
NAN_BOXED(1054905779,32,FLEN)
NAN_BOXED(1054905779,32,FLEN)
NAN_BOXED(1054905779,32,FLEN)
NAN_BOXED(1054905779,32,FLEN)
NAN_BOXED(1054905779,32,FLEN)
NAN_BOXED(1054905779,32,FLEN)
NAN_BOXED(1054905779,32,FLEN)
NAN_BOXED(1054905779,32,FLEN)
NAN_BOXED(1054905779,32,FLEN)
NAN_BOXED(1064411623,32,FLEN)
NAN_BOXED(1064411623,32,FLEN)
NAN_BOXED(1064411623,32,FLEN)
NAN_BOXED(1064411623,32,FLEN)
NAN_BOXED(1064411623,32,FLEN)
NAN_BOXED(1064411623,32,FLEN)
NAN_BOXED(1064411623,32,FLEN)
NAN_BOXED(1064411623,32,FLEN)
NAN_BOXED(1064411623,32,FLEN)
NAN_BOXED(1064411623,32,FLEN)
NAN_BOXED(1054615820,32,FLEN)
NAN_BOXED(1054615820,32,FLEN)
NAN_BOXED(1054615820,32,FLEN)
NAN_BOXED(1054615820,32,FLEN)
NAN_BOXED(1054615820,32,FLEN)
NAN_BOXED(1054615820,32,FLEN)
NAN_BOXED(1054615820,32,FLEN)
NAN_BOXED(1054615820,32,FLEN)
NAN_BOXED(1054615820,32,FLEN)
NAN_BOXED(1054615820,32,FLEN)
NAN_BOXED(1056806215,32,FLEN)
NAN_BOXED(1056806215,32,FLEN)
NAN_BOXED(1056806215,32,FLEN)
NAN_BOXED(1056806215,32,FLEN)
NAN_BOXED(1056806215,32,FLEN)
NAN_BOXED(1056806215,32,FLEN)
NAN_BOXED(1056806215,32,FLEN)
NAN_BOXED(1056806215,32,FLEN)
NAN_BOXED(1056806215,32,FLEN)
NAN_BOXED(1056806215,32,FLEN)
NAN_BOXED(1059367273,32,FLEN)
NAN_BOXED(1059367273,32,FLEN)
NAN_BOXED(1059367273,32,FLEN)
NAN_BOXED(1059367273,32,FLEN)
NAN_BOXED(1059367273,32,FLEN)
NAN_BOXED(1059367273,32,FLEN)
NAN_BOXED(1059367273,32,FLEN)
NAN_BOXED(1059367273,32,FLEN)
NAN_BOXED(1059367273,32,FLEN)
NAN_BOXED(1059367273,32,FLEN)
NAN_BOXED(1055673473,32,FLEN)
NAN_BOXED(1055673473,32,FLEN)
NAN_BOXED(1055673473,32,FLEN)
NAN_BOXED(1055673473,32,FLEN)
NAN_BOXED(1055673473,32,FLEN)
NAN_BOXED(1055673473,32,FLEN)
NAN_BOXED(1055673473,32,FLEN)
NAN_BOXED(1055673473,32,FLEN)
NAN_BOXED(1055673473,32,FLEN)
NAN_BOXED(1055673473,32,FLEN)
NAN_BOXED(1053191329,32,FLEN)
NAN_BOXED(1053191329,32,FLEN)
NAN_BOXED(1053191329,32,FLEN)
NAN_BOXED(1053191329,32,FLEN)
NAN_BOXED(1053191329,32,FLEN)
NAN_BOXED(1053191329,32,FLEN)
NAN_BOXED(1053191329,32,FLEN)
NAN_BOXED(1053191329,32,FLEN)
NAN_BOXED(1053191329,32,FLEN)
NAN_BOXED(1053191329,32,FLEN)
NAN_BOXED(1064883873,32,FLEN)
NAN_BOXED(1064883873,32,FLEN)
NAN_BOXED(1064883873,32,FLEN)
NAN_BOXED(1064883873,32,FLEN)
NAN_BOXED(1064883873,32,FLEN)
NAN_BOXED(1064883873,32,FLEN)
NAN_BOXED(1064883873,32,FLEN)
NAN_BOXED(1064883873,32,FLEN)
NAN_BOXED(1064883873,32,FLEN)
NAN_BOXED(1064883873,32,FLEN)
NAN_BOXED(1062380104,32,FLEN)
NAN_BOXED(1062380104,32,FLEN)
NAN_BOXED(1062380104,32,FLEN)
NAN_BOXED(1062380104,32,FLEN)
NAN_BOXED(1062380104,32,FLEN)
NAN_BOXED(1062380104,32,FLEN)
NAN_BOXED(1062380104,32,FLEN)
NAN_BOXED(1062380104,32,FLEN)
NAN_BOXED(1062380104,32,FLEN)
NAN_BOXED(1062380104,32,FLEN)
NAN_BOXED(1041126321,32,FLEN)
NAN_BOXED(1041126321,32,FLEN)
NAN_BOXED(1041126321,32,FLEN)
NAN_BOXED(1041126321,32,FLEN)
NAN_BOXED(1041126321,32,FLEN)
NAN_BOXED(1041126321,32,FLEN)
NAN_BOXED(1041126321,32,FLEN)
NAN_BOXED(1041126321,32,FLEN)
NAN_BOXED(1041126321,32,FLEN)
NAN_BOXED(1041126321,32,FLEN)
NAN_BOXED(1045415336,32,FLEN)
NAN_BOXED(1045415336,32,FLEN)
NAN_BOXED(1045415336,32,FLEN)
NAN_BOXED(1045415336,32,FLEN)
NAN_BOXED(1045415336,32,FLEN)
NAN_BOXED(1045415336,32,FLEN)
NAN_BOXED(1045415336,32,FLEN)
NAN_BOXED(1045415336,32,FLEN)
NAN_BOXED(1045415336,32,FLEN)
NAN_BOXED(1045415336,32,FLEN)
NAN_BOXED(1061070092,32,FLEN)
NAN_BOXED(1061070092,32,FLEN)
NAN_BOXED(1061070092,32,FLEN)
NAN_BOXED(1061070092,32,FLEN)
NAN_BOXED(1061070092,32,FLEN)
NAN_BOXED(1061070092,32,FLEN)
NAN_BOXED(1061070092,32,FLEN)
NAN_BOXED(1061070092,32,FLEN)
NAN_BOXED(1061070092,32,FLEN)
NAN_BOXED(1061070092,32,FLEN)
NAN_BOXED(1051155881,32,FLEN)
NAN_BOXED(1051155881,32,FLEN)
NAN_BOXED(1051155881,32,FLEN)
NAN_BOXED(1051155881,32,FLEN)
NAN_BOXED(1051155881,32,FLEN)
NAN_BOXED(1051155881,32,FLEN)
NAN_BOXED(1051155881,32,FLEN)
NAN_BOXED(1051155881,32,FLEN)
NAN_BOXED(1051155881,32,FLEN)
NAN_BOXED(1051155881,32,FLEN)
NAN_BOXED(1065073193,32,FLEN)
NAN_BOXED(1065073193,32,FLEN)
NAN_BOXED(1065073193,32,FLEN)
NAN_BOXED(1065073193,32,FLEN)
NAN_BOXED(1065073193,32,FLEN)
NAN_BOXED(1065073193,32,FLEN)
NAN_BOXED(1065073193,32,FLEN)
NAN_BOXED(1065073193,32,FLEN)
NAN_BOXED(1065073193,32,FLEN)
NAN_BOXED(1065073193,32,FLEN)
NAN_BOXED(1048201077,32,FLEN)
NAN_BOXED(1048201077,32,FLEN)
NAN_BOXED(1048201077,32,FLEN)
NAN_BOXED(1048201077,32,FLEN)
NAN_BOXED(1048201077,32,FLEN)
NAN_BOXED(1048201077,32,FLEN)
NAN_BOXED(1048201077,32,FLEN)
NAN_BOXED(1048201077,32,FLEN)
NAN_BOXED(1048201077,32,FLEN)
NAN_BOXED(1048201077,32,FLEN)
NAN_BOXED(1063516301,32,FLEN)
NAN_BOXED(1063516301,32,FLEN)
NAN_BOXED(1063516301,32,FLEN)
NAN_BOXED(1063516301,32,FLEN)
NAN_BOXED(1063516301,32,FLEN)
NAN_BOXED(1063516301,32,FLEN)
NAN_BOXED(1063516301,32,FLEN)
NAN_BOXED(1063516301,32,FLEN)
NAN_BOXED(1063516301,32,FLEN)
NAN_BOXED(1063516301,32,FLEN)
NAN_BOXED(1059574759,32,FLEN)
NAN_BOXED(1059574759,32,FLEN)
NAN_BOXED(1059574759,32,FLEN)
NAN_BOXED(1059574759,32,FLEN)
NAN_BOXED(1059574759,32,FLEN)
NAN_BOXED(1059574759,32,FLEN)
NAN_BOXED(1059574759,32,FLEN)
NAN_BOXED(1059574759,32,FLEN)
NAN_BOXED(1059574759,32,FLEN)
NAN_BOXED(1059574759,32,FLEN)
NAN_BOXED(1062675144,32,FLEN)
NAN_BOXED(1062675144,32,FLEN)
NAN_BOXED(1062675144,32,FLEN)
NAN_BOXED(1062675144,32,FLEN)
NAN_BOXED(1062675144,32,FLEN)
NAN_BOXED(1062675144,32,FLEN)
NAN_BOXED(1062675144,32,FLEN)
NAN_BOXED(1062675144,32,FLEN)
NAN_BOXED(1062675144,32,FLEN)
NAN_BOXED(1062675144,32,FLEN)
NAN_BOXED(1062532211,32,FLEN)
NAN_BOXED(1062532211,32,FLEN)
NAN_BOXED(1062532211,32,FLEN)
NAN_BOXED(1062532211,32,FLEN)
NAN_BOXED(1062532211,32,FLEN)
NAN_BOXED(1062532211,32,FLEN)
NAN_BOXED(1062532211,32,FLEN)
NAN_BOXED(1062532211,32,FLEN)
NAN_BOXED(1062532211,32,FLEN)
NAN_BOXED(1062532211,32,FLEN)
NAN_BOXED(1049864828,32,FLEN)
NAN_BOXED(1049864828,32,FLEN)
NAN_BOXED(1049864828,32,FLEN)
NAN_BOXED(1049864828,32,FLEN)
NAN_BOXED(1049864828,32,FLEN)
NAN_BOXED(1049864828,32,FLEN)
NAN_BOXED(1049864828,32,FLEN)
NAN_BOXED(1049864828,32,FLEN)
NAN_BOXED(1049864828,32,FLEN)
NAN_BOXED(1049864828,32,FLEN)
NAN_BOXED(1059950922,32,FLEN)
NAN_BOXED(1059950922,32,FLEN)
NAN_BOXED(1059950922,32,FLEN)
NAN_BOXED(1059950922,32,FLEN)
NAN_BOXED(1059950922,32,FLEN)
NAN_BOXED(1059950922,32,FLEN)
NAN_BOXED(1059950922,32,FLEN)
NAN_BOXED(1059950922,32,FLEN)
NAN_BOXED(1059950922,32,FLEN)
NAN_BOXED(1059950922,32,FLEN)
NAN_BOXED(1064956693,32,FLEN)
NAN_BOXED(1064956693,32,FLEN)
NAN_BOXED(1064956693,32,FLEN)
NAN_BOXED(1064956693,32,FLEN)
NAN_BOXED(1064956693,32,FLEN)
NAN_BOXED(1064956693,32,FLEN)
NAN_BOXED(1064956693,32,FLEN)
NAN_BOXED(1064956693,32,FLEN)
NAN_BOXED(1064956693,32,FLEN)
NAN_BOXED(1064956693,32,FLEN)
NAN_BOXED(1058291372,32,FLEN)
NAN_BOXED(1058291372,32,FLEN)
NAN_BOXED(1058291372,32,FLEN)
NAN_BOXED(1058291372,32,FLEN)
NAN_BOXED(1058291372,32,FLEN)
NAN_BOXED(1058291372,32,FLEN)
NAN_BOXED(1058291372,32,FLEN)
NAN_BOXED(1058291372,32,FLEN)
NAN_BOXED(1058291372,32,FLEN)
NAN_BOXED(1058291372,32,FLEN)
NAN_BOXED(1063528497,32,FLEN)
NAN_BOXED(1063528497,32,FLEN)
NAN_BOXED(1063528497,32,FLEN)
NAN_BOXED(1063528497,32,FLEN)
NAN_BOXED(1063528497,32,FLEN)
NAN_BOXED(1063528497,32,FLEN)
NAN_BOXED(1063528497,32,FLEN)
NAN_BOXED(1063528497,32,FLEN)
NAN_BOXED(1063528497,32,FLEN)
NAN_BOXED(1063528497,32,FLEN)
NAN_BOXED(1056625172,32,FLEN)
NAN_BOXED(1056625172,32,FLEN)
NAN_BOXED(1056625172,32,FLEN)
NAN_BOXED(1056625172,32,FLEN)
NAN_BOXED(1056625172,32,FLEN)
NAN_BOXED(1056625172,32,FLEN)
NAN_BOXED(1056625172,32,FLEN)
NAN_BOXED(1056625172,32,FLEN)
NAN_BOXED(1056625172,32,FLEN)
NAN_BOXED(1056625172,32,FLEN)
NAN_BOXED(1053419627,32,FLEN)
NAN_BOXED(1053419627,32,FLEN)
NAN_BOXED(1053419627,32,FLEN)
NAN_BOXED(1053419627,32,FLEN)
NAN_BOXED(1053419627,32,FLEN)
NAN_BOXED(1053419627,32,FLEN)
NAN_BOXED(1053419627,32,FLEN)
NAN_BOXED(1053419627,32,FLEN)
NAN_BOXED(1053419627,32,FLEN)
NAN_BOXED(1053419627,32,FLEN)
NAN_BOXED(1065003946,32,FLEN)
NAN_BOXED(1065003946,32,FLEN)
NAN_BOXED(1065003946,32,FLEN)
NAN_BOXED(1065003946,32,FLEN)
NAN_BOXED(1065003946,32,FLEN)
NAN_BOXED(1065003946,32,FLEN)
NAN_BOXED(1065003946,32,FLEN)
NAN_BOXED(1065003946,32,FLEN)
NAN_BOXED(1065003946,32,FLEN)
NAN_BOXED(1065003946,32,FLEN)
NAN_BOXED(1062895995,32,FLEN)
NAN_BOXED(1062895995,32,FLEN)
NAN_BOXED(1062895995,32,FLEN)
NAN_BOXED(1062895995,32,FLEN)
NAN_BOXED(1062895995,32,FLEN)
NAN_BOXED(1062895995,32,FLEN)
NAN_BOXED(1062895995,32,FLEN)
NAN_BOXED(1062895995,32,FLEN)
NAN_BOXED(1062895995,32,FLEN)
NAN_BOXED(1062895995,32,FLEN)
NAN_BOXED(1062665043,32,FLEN)
NAN_BOXED(1062665043,32,FLEN)
NAN_BOXED(1062665043,32,FLEN)
NAN_BOXED(1062665043,32,FLEN)
NAN_BOXED(1062665043,32,FLEN)
NAN_BOXED(1062665043,32,FLEN)
NAN_BOXED(1062665043,32,FLEN)
NAN_BOXED(1062665043,32,FLEN)
NAN_BOXED(1062665043,32,FLEN)
NAN_BOXED(1062665043,32,FLEN)
NAN_BOXED(1050986020,32,FLEN)
NAN_BOXED(1050986020,32,FLEN)
NAN_BOXED(1050986020,32,FLEN)
NAN_BOXED(1050986020,32,FLEN)
NAN_BOXED(1050986020,32,FLEN)
NAN_BOXED(1050986020,32,FLEN)
NAN_BOXED(1050986020,32,FLEN)
NAN_BOXED(1050986020,32,FLEN)
NAN_BOXED(1050986020,32,FLEN)
NAN_BOXED(1050986020,32,FLEN)
NAN_BOXED(1061652166,32,FLEN)
NAN_BOXED(1061652166,32,FLEN)
NAN_BOXED(1061652166,32,FLEN)
NAN_BOXED(1061652166,32,FLEN)
NAN_BOXED(1061652166,32,FLEN)
NAN_BOXED(1061652166,32,FLEN)
NAN_BOXED(1061652166,32,FLEN)
NAN_BOXED(1061652166,32,FLEN)
NAN_BOXED(1061652166,32,FLEN)
NAN_BOXED(1061652166,32,FLEN)
NAN_BOXED(1045367467,32,FLEN)
NAN_BOXED(1045367467,32,FLEN)
NAN_BOXED(1045367467,32,FLEN)
NAN_BOXED(1045367467,32,FLEN)
NAN_BOXED(1045367467,32,FLEN)
NAN_BOXED(1045367467,32,FLEN)
NAN_BOXED(1045367467,32,FLEN)
NAN_BOXED(1045367467,32,FLEN)
NAN_BOXED(1045367467,32,FLEN)
NAN_BOXED(1045367467,32,FLEN)
NAN_BOXED(1061608612,32,FLEN)
NAN_BOXED(1061608612,32,FLEN)
NAN_BOXED(1061608612,32,FLEN)
NAN_BOXED(1061608612,32,FLEN)
NAN_BOXED(1061608612,32,FLEN)
NAN_BOXED(1061608612,32,FLEN)
NAN_BOXED(1061608612,32,FLEN)
NAN_BOXED(1061608612,32,FLEN)
NAN_BOXED(1061608612,32,FLEN)
NAN_BOXED(1061608612,32,FLEN)
NAN_BOXED(1058727926,32,FLEN)
NAN_BOXED(1058727926,32,FLEN)
NAN_BOXED(1058727926,32,FLEN)
NAN_BOXED(1058727926,32,FLEN)
NAN_BOXED(1058727926,32,FLEN)
NAN_BOXED(1058727926,32,FLEN)
NAN_BOXED(1058727926,32,FLEN)
NAN_BOXED(1058727926,32,FLEN)
NAN_BOXED(1058727926,32,FLEN)
NAN_BOXED(1058727926,32,FLEN)
NAN_BOXED(1059963605,32,FLEN)
NAN_BOXED(1059963605,32,FLEN)
NAN_BOXED(1059963605,32,FLEN)
NAN_BOXED(1059963605,32,FLEN)
NAN_BOXED(1059963605,32,FLEN)
NAN_BOXED(1059963605,32,FLEN)
NAN_BOXED(1059963605,32,FLEN)
NAN_BOXED(1059963605,32,FLEN)
NAN_BOXED(1059963605,32,FLEN)
NAN_BOXED(1059963605,32,FLEN)
NAN_BOXED(1064366965,32,FLEN)
NAN_BOXED(1064366965,32,FLEN)
NAN_BOXED(1064366965,32,FLEN)
NAN_BOXED(1064366965,32,FLEN)
NAN_BOXED(1064366965,32,FLEN)
NAN_BOXED(1064366965,32,FLEN)
NAN_BOXED(1064366965,32,FLEN)
NAN_BOXED(1064366965,32,FLEN)
NAN_BOXED(1064366965,32,FLEN)
NAN_BOXED(1064366965,32,FLEN)
NAN_BOXED(1023637457,32,FLEN)
NAN_BOXED(1023637457,32,FLEN)
NAN_BOXED(1023637457,32,FLEN)
NAN_BOXED(1023637457,32,FLEN)
NAN_BOXED(1023637457,32,FLEN)
NAN_BOXED(1023637457,32,FLEN)
NAN_BOXED(1023637457,32,FLEN)
NAN_BOXED(1023637457,32,FLEN)
NAN_BOXED(1023637457,32,FLEN)
NAN_BOXED(1023637457,32,FLEN)
NAN_BOXED(1060212901,32,FLEN)
NAN_BOXED(1060212901,32,FLEN)
NAN_BOXED(1060212901,32,FLEN)
NAN_BOXED(1060212901,32,FLEN)
NAN_BOXED(1060212901,32,FLEN)
NAN_BOXED(1060212901,32,FLEN)
NAN_BOXED(1060212901,32,FLEN)
NAN_BOXED(1060212901,32,FLEN)
NAN_BOXED(1060212901,32,FLEN)
NAN_BOXED(1060212901,32,FLEN)
NAN_BOXED(1060146178,32,FLEN)
NAN_BOXED(1060146178,32,FLEN)
NAN_BOXED(1060146178,32,FLEN)
NAN_BOXED(1060146178,32,FLEN)
NAN_BOXED(1060146178,32,FLEN)
NAN_BOXED(1060146178,32,FLEN)
NAN_BOXED(1060146178,32,FLEN)
NAN_BOXED(1060146178,32,FLEN)
NAN_BOXED(1060146178,32,FLEN)
NAN_BOXED(1060146178,32,FLEN)
NAN_BOXED(1048782624,32,FLEN)
NAN_BOXED(1048782624,32,FLEN)
NAN_BOXED(1048782624,32,FLEN)
NAN_BOXED(1048782624,32,FLEN)
NAN_BOXED(1048782624,32,FLEN)
NAN_BOXED(1048782624,32,FLEN)
NAN_BOXED(1048782624,32,FLEN)
NAN_BOXED(1048782624,32,FLEN)
NAN_BOXED(1048782624,32,FLEN)
NAN_BOXED(1048782624,32,FLEN)
NAN_BOXED(1061119349,32,FLEN)
NAN_BOXED(1061119349,32,FLEN)
NAN_BOXED(1061119349,32,FLEN)
NAN_BOXED(1061119349,32,FLEN)
NAN_BOXED(1061119349,32,FLEN)
NAN_BOXED(1061119349,32,FLEN)
NAN_BOXED(1061119349,32,FLEN)
NAN_BOXED(1061119349,32,FLEN)
NAN_BOXED(1061119349,32,FLEN)
NAN_BOXED(1061119349,32,FLEN)
NAN_BOXED(1039688384,32,FLEN)
NAN_BOXED(1039688384,32,FLEN)
NAN_BOXED(1039688384,32,FLEN)
NAN_BOXED(1039688384,32,FLEN)
NAN_BOXED(1039688384,32,FLEN)
NAN_BOXED(1039688384,32,FLEN)
NAN_BOXED(1039688384,32,FLEN)
NAN_BOXED(1039688384,32,FLEN)
NAN_BOXED(1039688384,32,FLEN)
NAN_BOXED(1039688384,32,FLEN)
NAN_BOXED(1043917697,32,FLEN)
NAN_BOXED(1043917697,32,FLEN)
NAN_BOXED(1043917697,32,FLEN)
NAN_BOXED(1043917697,32,FLEN)
NAN_BOXED(1043917697,32,FLEN)
NAN_BOXED(1043917697,32,FLEN)
NAN_BOXED(1043917697,32,FLEN)
NAN_BOXED(1043917697,32,FLEN)
NAN_BOXED(1043917697,32,FLEN)
NAN_BOXED(1043917697,32,FLEN)
NAN_BOXED(1054606383,32,FLEN)
NAN_BOXED(1054606383,32,FLEN)
NAN_BOXED(1054606383,32,FLEN)
NAN_BOXED(1054606383,32,FLEN)
NAN_BOXED(1054606383,32,FLEN)
NAN_BOXED(1054606383,32,FLEN)
NAN_BOXED(1054606383,32,FLEN)
NAN_BOXED(1054606383,32,FLEN)
NAN_BOXED(1054606383,32,FLEN)
NAN_BOXED(1054606383,32,FLEN)
NAN_BOXED(1040671846,32,FLEN)
NAN_BOXED(1040671846,32,FLEN)
NAN_BOXED(1040671846,32,FLEN)
NAN_BOXED(1040671846,32,FLEN)
NAN_BOXED(1040671846,32,FLEN)
NAN_BOXED(1040671846,32,FLEN)
NAN_BOXED(1040671846,32,FLEN)
NAN_BOXED(1040671846,32,FLEN)
NAN_BOXED(1040671846,32,FLEN)
NAN_BOXED(1040671846,32,FLEN)
NAN_BOXED(1050118727,32,FLEN)
NAN_BOXED(1050118727,32,FLEN)
NAN_BOXED(1050118727,32,FLEN)
NAN_BOXED(1050118727,32,FLEN)
NAN_BOXED(1050118727,32,FLEN)
NAN_BOXED(1050118727,32,FLEN)
NAN_BOXED(1050118727,32,FLEN)
NAN_BOXED(1050118727,32,FLEN)
NAN_BOXED(1050118727,32,FLEN)
NAN_BOXED(1050118727,32,FLEN)
NAN_BOXED(1059011951,32,FLEN)
NAN_BOXED(1059011951,32,FLEN)
NAN_BOXED(1059011951,32,FLEN)
NAN_BOXED(1059011951,32,FLEN)
NAN_BOXED(1059011951,32,FLEN)
NAN_BOXED(1059011951,32,FLEN)
NAN_BOXED(1059011951,32,FLEN)
NAN_BOXED(1059011951,32,FLEN)
NAN_BOXED(1059011951,32,FLEN)
NAN_BOXED(1059011951,32,FLEN)
NAN_BOXED(1061901106,32,FLEN)
NAN_BOXED(1061901106,32,FLEN)
NAN_BOXED(1061901106,32,FLEN)
NAN_BOXED(1061901106,32,FLEN)
NAN_BOXED(1061901106,32,FLEN)
NAN_BOXED(1061901106,32,FLEN)
NAN_BOXED(1061901106,32,FLEN)
NAN_BOXED(1061901106,32,FLEN)
NAN_BOXED(1061901106,32,FLEN)
NAN_BOXED(1061901106,32,FLEN)
NAN_BOXED(1058089518,32,FLEN)
NAN_BOXED(1058089518,32,FLEN)
NAN_BOXED(1058089518,32,FLEN)
NAN_BOXED(1058089518,32,FLEN)
NAN_BOXED(1058089518,32,FLEN)
NAN_BOXED(1058089518,32,FLEN)
NAN_BOXED(1058089518,32,FLEN)
NAN_BOXED(1058089518,32,FLEN)
NAN_BOXED(1058089518,32,FLEN)
NAN_BOXED(1058089518,32,FLEN)
NAN_BOXED(1063601268,32,FLEN)
NAN_BOXED(1063601268,32,FLEN)
NAN_BOXED(1063601268,32,FLEN)
NAN_BOXED(1063601268,32,FLEN)
NAN_BOXED(1063601268,32,FLEN)
NAN_BOXED(1063601268,32,FLEN)
NAN_BOXED(1063601268,32,FLEN)
NAN_BOXED(1063601268,32,FLEN)
NAN_BOXED(1063601268,32,FLEN)
NAN_BOXED(1063601268,32,FLEN)
NAN_BOXED(1060385940,32,FLEN)
NAN_BOXED(1060385940,32,FLEN)
NAN_BOXED(1060385940,32,FLEN)
NAN_BOXED(1060385940,32,FLEN)
NAN_BOXED(1060385940,32,FLEN)
NAN_BOXED(1060385940,32,FLEN)
NAN_BOXED(1060385940,32,FLEN)
NAN_BOXED(1060385940,32,FLEN)
NAN_BOXED(1060385940,32,FLEN)
NAN_BOXED(1060385940,32,FLEN)
NAN_BOXED(1059894821,32,FLEN)
NAN_BOXED(1059894821,32,FLEN)
NAN_BOXED(1059894821,32,FLEN)
NAN_BOXED(1059894821,32,FLEN)
NAN_BOXED(1059894821,32,FLEN)
NAN_BOXED(1059894821,32,FLEN)
NAN_BOXED(1059894821,32,FLEN)
NAN_BOXED(1059894821,32,FLEN)
NAN_BOXED(1059894821,32,FLEN)
NAN_BOXED(1059894821,32,FLEN)
NAN_BOXED(1036875130,32,FLEN)
NAN_BOXED(1036875130,32,FLEN)
NAN_BOXED(1036875130,32,FLEN)
NAN_BOXED(1036875130,32,FLEN)
NAN_BOXED(1036875130,32,FLEN)
NAN_BOXED(1036875130,32,FLEN)
NAN_BOXED(1036875130,32,FLEN)
NAN_BOXED(1036875130,32,FLEN)
NAN_BOXED(1036875130,32,FLEN)
NAN_BOXED(1036875130,32,FLEN)
NAN_BOXED(1061983461,32,FLEN)
NAN_BOXED(1061983461,32,FLEN)
NAN_BOXED(1061983461,32,FLEN)
NAN_BOXED(1061983461,32,FLEN)
NAN_BOXED(1061983461,32,FLEN)
NAN_BOXED(1061983461,32,FLEN)
NAN_BOXED(1061983461,32,FLEN)
NAN_BOXED(1061983461,32,FLEN)
NAN_BOXED(1061983461,32,FLEN)
NAN_BOXED(1061983461,32,FLEN)
NAN_BOXED(1012149611,32,FLEN)
NAN_BOXED(1012149611,32,FLEN)
NAN_BOXED(1012149611,32,FLEN)
NAN_BOXED(1012149611,32,FLEN)
NAN_BOXED(1012149611,32,FLEN)
NAN_BOXED(1012149611,32,FLEN)
NAN_BOXED(1012149611,32,FLEN)
NAN_BOXED(1012149611,32,FLEN)
NAN_BOXED(1012149611,32,FLEN)
NAN_BOXED(1012149611,32,FLEN)
NAN_BOXED(1059664135,32,FLEN)
NAN_BOXED(1059664135,32,FLEN)
NAN_BOXED(1059664135,32,FLEN)
NAN_BOXED(1059664135,32,FLEN)
NAN_BOXED(1059664135,32,FLEN)
NAN_BOXED(1059664135,32,FLEN)
NAN_BOXED(1059664135,32,FLEN)
NAN_BOXED(1059664135,32,FLEN)
NAN_BOXED(1059664135,32,FLEN)
NAN_BOXED(1059664135,32,FLEN)
NAN_BOXED(1051110867,32,FLEN)
NAN_BOXED(1051110867,32,FLEN)
NAN_BOXED(1051110867,32,FLEN)
NAN_BOXED(1051110867,32,FLEN)
NAN_BOXED(1051110867,32,FLEN)
NAN_BOXED(1051110867,32,FLEN)
NAN_BOXED(1051110867,32,FLEN)
NAN_BOXED(1051110867,32,FLEN)
NAN_BOXED(1051110867,32,FLEN)
NAN_BOXED(1051110867,32,FLEN)
NAN_BOXED(1032511819,32,FLEN)
NAN_BOXED(1032511819,32,FLEN)
NAN_BOXED(1032511819,32,FLEN)
NAN_BOXED(1032511819,32,FLEN)
NAN_BOXED(1032511819,32,FLEN)
NAN_BOXED(1032511819,32,FLEN)
NAN_BOXED(1032511819,32,FLEN)
NAN_BOXED(1032511819,32,FLEN)
NAN_BOXED(1032511819,32,FLEN)
NAN_BOXED(1032511819,32,FLEN)
NAN_BOXED(1039195093,32,FLEN)
NAN_BOXED(1039195093,32,FLEN)
NAN_BOXED(1039195093,32,FLEN)
NAN_BOXED(1039195093,32,FLEN)
NAN_BOXED(1039195093,32,FLEN)
NAN_BOXED(1039195093,32,FLEN)
NAN_BOXED(1039195093,32,FLEN)
NAN_BOXED(1039195093,32,FLEN)
NAN_BOXED(1039195093,32,FLEN)
NAN_BOXED(1039195093,32,FLEN)
NAN_BOXED(1057224676,32,FLEN)
NAN_BOXED(1057224676,32,FLEN)
NAN_BOXED(1057224676,32,FLEN)
NAN_BOXED(1057224676,32,FLEN)
NAN_BOXED(1057224676,32,FLEN)
NAN_BOXED(1057224676,32,FLEN)
NAN_BOXED(1057224676,32,FLEN)
NAN_BOXED(1057224676,32,FLEN)
NAN_BOXED(1057224676,32,FLEN)
NAN_BOXED(1057224676,32,FLEN)
NAN_BOXED(1061416602,32,FLEN)
NAN_BOXED(1061416602,32,FLEN)
NAN_BOXED(1061416602,32,FLEN)
NAN_BOXED(1061416602,32,FLEN)
NAN_BOXED(1061416602,32,FLEN)
NAN_BOXED(1061416602,32,FLEN)
NAN_BOXED(1061416602,32,FLEN)
NAN_BOXED(1061416602,32,FLEN)
NAN_BOXED(1061416602,32,FLEN)
NAN_BOXED(1061416602,32,FLEN)
NAN_BOXED(1063932517,32,FLEN)
NAN_BOXED(1063932517,32,FLEN)
NAN_BOXED(1063932517,32,FLEN)
NAN_BOXED(1063932517,32,FLEN)
NAN_BOXED(1063932517,32,FLEN)
NAN_BOXED(1063932517,32,FLEN)
NAN_BOXED(1063932517,32,FLEN)
NAN_BOXED(1063932517,32,FLEN)
NAN_BOXED(1063932517,32,FLEN)
NAN_BOXED(1063932517,32,FLEN)
NAN_BOXED(1035357193,32,FLEN)
NAN_BOXED(1035357193,32,FLEN)
NAN_BOXED(1035357193,32,FLEN)
NAN_BOXED(1035357193,32,FLEN)
NAN_BOXED(1035357193,32,FLEN)
NAN_BOXED(1035357193,32,FLEN)
NAN_BOXED(1035357193,32,FLEN)
NAN_BOXED(1035357193,32,FLEN)
NAN_BOXED(1035357193,32,FLEN)
NAN_BOXED(1035357193,32,FLEN)
NAN_BOXED(1047964223,32,FLEN)
NAN_BOXED(1047964223,32,FLEN)
NAN_BOXED(1047964223,32,FLEN)
NAN_BOXED(1047964223,32,FLEN)
NAN_BOXED(1047964223,32,FLEN)
NAN_BOXED(1047964223,32,FLEN)
NAN_BOXED(1047964223,32,FLEN)
NAN_BOXED(1047964223,32,FLEN)
NAN_BOXED(1047964223,32,FLEN)
NAN_BOXED(1047964223,32,FLEN)
NAN_BOXED(1042460221,32,FLEN)
NAN_BOXED(1042460221,32,FLEN)
NAN_BOXED(1042460221,32,FLEN)
NAN_BOXED(1042460221,32,FLEN)
NAN_BOXED(1042460221,32,FLEN)
NAN_BOXED(1042460221,32,FLEN)
NAN_BOXED(1042460221,32,FLEN)
NAN_BOXED(1042460221,32,FLEN)
NAN_BOXED(1042460221,32,FLEN)
NAN_BOXED(1042460221,32,FLEN)
NAN_BOXED(1059644177,32,FLEN)
NAN_BOXED(1059644177,32,FLEN)
NAN_BOXED(1059644177,32,FLEN)
NAN_BOXED(1059644177,32,FLEN)
NAN_BOXED(1059644177,32,FLEN)
NAN_BOXED(1059644177,32,FLEN)
NAN_BOXED(1059644177,32,FLEN)
NAN_BOXED(1059644177,32,FLEN)
NAN_BOXED(1059644177,32,FLEN)
NAN_BOXED(1059644177,32,FLEN)
NAN_BOXED(1040696089,32,FLEN)
NAN_BOXED(1040696089,32,FLEN)
NAN_BOXED(1040696089,32,FLEN)
NAN_BOXED(1040696089,32,FLEN)
NAN_BOXED(1040696089,32,FLEN)
NAN_BOXED(1040696089,32,FLEN)
NAN_BOXED(1040696089,32,FLEN)
NAN_BOXED(1040696089,32,FLEN)
NAN_BOXED(1040696089,32,FLEN)
NAN_BOXED(1040696089,32,FLEN)
NAN_BOXED(1027287066,32,FLEN)
NAN_BOXED(1027287066,32,FLEN)
NAN_BOXED(1027287066,32,FLEN)
NAN_BOXED(1027287066,32,FLEN)
NAN_BOXED(1027287066,32,FLEN)
NAN_BOXED(1027287066,32,FLEN)
NAN_BOXED(1027287066,32,FLEN)
NAN_BOXED(1027287066,32,FLEN)
NAN_BOXED(1027287066,32,FLEN)
NAN_BOXED(1027287066,32,FLEN)
NAN_BOXED(1063082487,32,FLEN)
NAN_BOXED(1063082487,32,FLEN)
NAN_BOXED(1063082487,32,FLEN)
NAN_BOXED(1063082487,32,FLEN)
NAN_BOXED(1063082487,32,FLEN)
NAN_BOXED(1063082487,32,FLEN)
NAN_BOXED(1063082487,32,FLEN)
NAN_BOXED(1063082487,32,FLEN)
NAN_BOXED(1063082487,32,FLEN)
NAN_BOXED(1063082487,32,FLEN)
NAN_BOXED(1063603771,32,FLEN)
NAN_BOXED(1063603771,32,FLEN)
NAN_BOXED(1063603771,32,FLEN)
NAN_BOXED(1063603771,32,FLEN)
NAN_BOXED(1063603771,32,FLEN)
NAN_BOXED(1063603771,32,FLEN)
NAN_BOXED(1063603771,32,FLEN)
NAN_BOXED(1063603771,32,FLEN)
NAN_BOXED(1063603771,32,FLEN)
NAN_BOXED(1063603771,32,FLEN)
NAN_BOXED(1064125234,32,FLEN)
NAN_BOXED(1064125234,32,FLEN)
NAN_BOXED(1064125234,32,FLEN)
NAN_BOXED(1064125234,32,FLEN)
NAN_BOXED(1064125234,32,FLEN)
NAN_BOXED(1064125234,32,FLEN)
NAN_BOXED(1064125234,32,FLEN)
NAN_BOXED(1064125234,32,FLEN)
NAN_BOXED(1064125234,32,FLEN)
NAN_BOXED(1064125234,32,FLEN)
NAN_BOXED(1046018048,32,FLEN)
NAN_BOXED(1046018048,32,FLEN)
NAN_BOXED(1046018048,32,FLEN)
NAN_BOXED(1046018048,32,FLEN)
NAN_BOXED(1046018048,32,FLEN)
NAN_BOXED(1046018048,32,FLEN)
NAN_BOXED(1046018048,32,FLEN)
NAN_BOXED(1046018048,32,FLEN)
NAN_BOXED(1046018048,32,FLEN)
NAN_BOXED(1046018048,32,FLEN)
NAN_BOXED(1059633905,32,FLEN)
NAN_BOXED(1059633905,32,FLEN)
NAN_BOXED(1059633905,32,FLEN)
NAN_BOXED(1059633905,32,FLEN)
NAN_BOXED(1059633905,32,FLEN)
NAN_BOXED(1059633905,32,FLEN)
NAN_BOXED(1059633905,32,FLEN)
NAN_BOXED(1059633905,32,FLEN)
NAN_BOXED(1059633905,32,FLEN)
NAN_BOXED(1059633905,32,FLEN)
NAN_BOXED(1046434985,32,FLEN)
NAN_BOXED(1046434985,32,FLEN)
NAN_BOXED(1046434985,32,FLEN)
NAN_BOXED(1046434985,32,FLEN)
NAN_BOXED(1046434985,32,FLEN)
NAN_BOXED(1046434985,32,FLEN)
NAN_BOXED(1046434985,32,FLEN)
NAN_BOXED(1046434985,32,FLEN)
NAN_BOXED(1046434985,32,FLEN)
NAN_BOXED(1046434985,32,FLEN)
NAN_BOXED(1054589574,32,FLEN)
NAN_BOXED(1054589574,32,FLEN)
NAN_BOXED(1054589574,32,FLEN)
NAN_BOXED(1054589574,32,FLEN)
NAN_BOXED(1054589574,32,FLEN)
NAN_BOXED(1054589574,32,FLEN)
NAN_BOXED(1054589574,32,FLEN)
NAN_BOXED(1054589574,32,FLEN)
NAN_BOXED(1054589574,32,FLEN)
NAN_BOXED(1054589574,32,FLEN)
NAN_BOXED(1063981791,32,FLEN)
NAN_BOXED(1063981791,32,FLEN)
NAN_BOXED(1063981791,32,FLEN)
NAN_BOXED(1063981791,32,FLEN)
NAN_BOXED(1063981791,32,FLEN)
NAN_BOXED(1063981791,32,FLEN)
NAN_BOXED(1063981791,32,FLEN)
NAN_BOXED(1063981791,32,FLEN)
NAN_BOXED(1063981791,32,FLEN)
NAN_BOXED(1063981791,32,FLEN)
NAN_BOXED(1038071029,32,FLEN)
NAN_BOXED(1038071029,32,FLEN)
NAN_BOXED(1038071029,32,FLEN)
NAN_BOXED(1038071029,32,FLEN)
NAN_BOXED(1038071029,32,FLEN)
NAN_BOXED(1038071029,32,FLEN)
NAN_BOXED(1038071029,32,FLEN)
NAN_BOXED(1038071029,32,FLEN)
NAN_BOXED(1038071029,32,FLEN)
NAN_BOXED(1038071029,32,FLEN)
NAN_BOXED(1033467485,32,FLEN)
NAN_BOXED(1033467485,32,FLEN)
NAN_BOXED(1033467485,32,FLEN)
NAN_BOXED(1033467485,32,FLEN)
NAN_BOXED(1033467485,32,FLEN)
NAN_BOXED(1033467485,32,FLEN)
NAN_BOXED(1033467485,32,FLEN)
NAN_BOXED(1033467485,32,FLEN)
NAN_BOXED(1033467485,32,FLEN)
NAN_BOXED(1033467485,32,FLEN)
NAN_BOXED(1060702860,32,FLEN)
NAN_BOXED(1060702860,32,FLEN)
NAN_BOXED(1060702860,32,FLEN)
NAN_BOXED(1060702860,32,FLEN)
NAN_BOXED(1060702860,32,FLEN)
NAN_BOXED(1060702860,32,FLEN)
NAN_BOXED(1060702860,32,FLEN)
NAN_BOXED(1060702860,32,FLEN)
NAN_BOXED(1060702860,32,FLEN)
NAN_BOXED(1060702860,32,FLEN)
NAN_BOXED(1043357067,32,FLEN)
NAN_BOXED(1043357067,32,FLEN)
NAN_BOXED(1043357067,32,FLEN)
NAN_BOXED(1043357067,32,FLEN)
NAN_BOXED(1043357067,32,FLEN)
NAN_BOXED(1043357067,32,FLEN)
NAN_BOXED(1043357067,32,FLEN)
NAN_BOXED(1043357067,32,FLEN)
NAN_BOXED(1043357067,32,FLEN)
NAN_BOXED(1043357067,32,FLEN)
NAN_BOXED(1051246542,32,FLEN)
NAN_BOXED(1051246542,32,FLEN)
NAN_BOXED(1051246542,32,FLEN)
NAN_BOXED(1051246542,32,FLEN)
NAN_BOXED(1051246542,32,FLEN)
NAN_BOXED(1051246542,32,FLEN)
NAN_BOXED(1051246542,32,FLEN)
NAN_BOXED(1051246542,32,FLEN)
NAN_BOXED(1051246542,32,FLEN)
NAN_BOXED(1051246542,32,FLEN)
NAN_BOXED(1063422116,32,FLEN)
NAN_BOXED(1063422116,32,FLEN)
NAN_BOXED(1063422116,32,FLEN)
NAN_BOXED(1063422116,32,FLEN)
NAN_BOXED(1063422116,32,FLEN)
NAN_BOXED(1063422116,32,FLEN)
NAN_BOXED(1063422116,32,FLEN)
NAN_BOXED(1063422116,32,FLEN)
NAN_BOXED(1063422116,32,FLEN)
NAN_BOXED(1063422116,32,FLEN)
NAN_BOXED(1064681732,32,FLEN)
NAN_BOXED(1064681732,32,FLEN)
NAN_BOXED(1064681732,32,FLEN)
NAN_BOXED(1064681732,32,FLEN)
NAN_BOXED(1064681732,32,FLEN)
NAN_BOXED(1064681732,32,FLEN)
NAN_BOXED(1064681732,32,FLEN)
NAN_BOXED(1064681732,32,FLEN)
NAN_BOXED(1064681732,32,FLEN)
NAN_BOXED(1064681732,32,FLEN)
NAN_BOXED(1010959067,32,FLEN)
NAN_BOXED(1010959067,32,FLEN)
NAN_BOXED(1010959067,32,FLEN)
NAN_BOXED(1010959067,32,FLEN)
NAN_BOXED(1010959067,32,FLEN)
NAN_BOXED(1010959067,32,FLEN)
NAN_BOXED(1010959067,32,FLEN)
NAN_BOXED(1010959067,32,FLEN)
NAN_BOXED(1010959067,32,FLEN)
NAN_BOXED(1010959067,32,FLEN)
NAN_BOXED(1063414471,32,FLEN)
NAN_BOXED(1063414471,32,FLEN)
NAN_BOXED(1063414471,32,FLEN)
NAN_BOXED(1063414471,32,FLEN)
NAN_BOXED(1063414471,32,FLEN)
NAN_BOXED(1063414471,32,FLEN)
NAN_BOXED(1063414471,32,FLEN)
NAN_BOXED(1063414471,32,FLEN)
NAN_BOXED(1063414471,32,FLEN)
NAN_BOXED(1063414471,32,FLEN)
NAN_BOXED(1061302855,32,FLEN)
NAN_BOXED(1061302855,32,FLEN)
NAN_BOXED(1061302855,32,FLEN)
NAN_BOXED(1061302855,32,FLEN)
NAN_BOXED(1061302855,32,FLEN)
NAN_BOXED(1061302855,32,FLEN)
NAN_BOXED(1061302855,32,FLEN)
NAN_BOXED(1061302855,32,FLEN)
NAN_BOXED(1061302855,32,FLEN)
NAN_BOXED(1061302855,32,FLEN)
NAN_BOXED(1063627945,32,FLEN)
NAN_BOXED(1063627945,32,FLEN)
NAN_BOXED(1063627945,32,FLEN)
NAN_BOXED(1063627945,32,FLEN)
NAN_BOXED(1063627945,32,FLEN)
NAN_BOXED(1063627945,32,FLEN)
NAN_BOXED(1063627945,32,FLEN)
NAN_BOXED(1063627945,32,FLEN)
NAN_BOXED(1063627945,32,FLEN)
NAN_BOXED(1063627945,32,FLEN)
NAN_BOXED(1059006776,32,FLEN)
NAN_BOXED(1059006776,32,FLEN)
NAN_BOXED(1059006776,32,FLEN)
NAN_BOXED(1059006776,32,FLEN)
NAN_BOXED(1059006776,32,FLEN)
NAN_BOXED(1059006776,32,FLEN)
NAN_BOXED(1059006776,32,FLEN)
NAN_BOXED(1059006776,32,FLEN)
NAN_BOXED(1059006776,32,FLEN)
NAN_BOXED(1059006776,32,FLEN)
NAN_BOXED(1035594095,32,FLEN)
NAN_BOXED(1035594095,32,FLEN)
NAN_BOXED(1035594095,32,FLEN)
NAN_BOXED(1035594095,32,FLEN)
NAN_BOXED(1035594095,32,FLEN)
NAN_BOXED(1035594095,32,FLEN)
NAN_BOXED(1035594095,32,FLEN)
NAN_BOXED(1035594095,32,FLEN)
NAN_BOXED(1035594095,32,FLEN)
NAN_BOXED(1035594095,32,FLEN)
NAN_BOXED(1061101699,32,FLEN)
NAN_BOXED(1061101699,32,FLEN)
NAN_BOXED(1061101699,32,FLEN)
NAN_BOXED(1061101699,32,FLEN)
NAN_BOXED(1061101699,32,FLEN)
NAN_BOXED(1061101699,32,FLEN)
NAN_BOXED(1061101699,32,FLEN)
NAN_BOXED(1061101699,32,FLEN)
NAN_BOXED(1061101699,32,FLEN)
NAN_BOXED(1061101699,32,FLEN)
NAN_BOXED(1063673327,32,FLEN)
NAN_BOXED(1063673327,32,FLEN)
NAN_BOXED(1063673327,32,FLEN)
NAN_BOXED(1063673327,32,FLEN)
NAN_BOXED(1063673327,32,FLEN)
NAN_BOXED(1063673327,32,FLEN)
NAN_BOXED(1063673327,32,FLEN)
NAN_BOXED(1063673327,32,FLEN)
NAN_BOXED(1063673327,32,FLEN)
NAN_BOXED(1063673327,32,FLEN)
NAN_BOXED(1064688499,32,FLEN)
NAN_BOXED(1064688499,32,FLEN)
NAN_BOXED(1064688499,32,FLEN)
NAN_BOXED(1064688499,32,FLEN)
NAN_BOXED(1064688499,32,FLEN)
NAN_BOXED(1064688499,32,FLEN)
NAN_BOXED(1064688499,32,FLEN)
NAN_BOXED(1064688499,32,FLEN)
NAN_BOXED(1064688499,32,FLEN)
NAN_BOXED(1064688499,32,FLEN)
NAN_BOXED(1015983304,32,FLEN)
NAN_BOXED(1015983304,32,FLEN)
NAN_BOXED(1015983304,32,FLEN)
NAN_BOXED(1015983304,32,FLEN)
NAN_BOXED(1015983304,32,FLEN)
NAN_BOXED(1015983304,32,FLEN)
NAN_BOXED(1015983304,32,FLEN)
NAN_BOXED(1015983304,32,FLEN)
NAN_BOXED(1015983304,32,FLEN)
NAN_BOXED(1015983304,32,FLEN)
NAN_BOXED(1053724234,32,FLEN)
NAN_BOXED(1053724234,32,FLEN)
NAN_BOXED(1053724234,32,FLEN)
NAN_BOXED(1053724234,32,FLEN)
NAN_BOXED(1053724234,32,FLEN)
NAN_BOXED(1053724234,32,FLEN)
NAN_BOXED(1053724234,32,FLEN)
NAN_BOXED(1053724234,32,FLEN)
NAN_BOXED(1053724234,32,FLEN)
NAN_BOXED(1053724234,32,FLEN)
NAN_BOXED(1060097235,32,FLEN)
NAN_BOXED(1060097235,32,FLEN)
NAN_BOXED(1060097235,32,FLEN)
NAN_BOXED(1060097235,32,FLEN)
NAN_BOXED(1060097235,32,FLEN)
NAN_BOXED(1060097235,32,FLEN)
NAN_BOXED(1060097235,32,FLEN)
NAN_BOXED(1060097235,32,FLEN)
NAN_BOXED(1060097235,32,FLEN)
NAN_BOXED(1060097235,32,FLEN)
NAN_BOXED(1035034502,32,FLEN)
NAN_BOXED(1035034502,32,FLEN)
NAN_BOXED(1035034502,32,FLEN)
NAN_BOXED(1035034502,32,FLEN)
NAN_BOXED(1035034502,32,FLEN)
NAN_BOXED(1035034502,32,FLEN)
NAN_BOXED(1035034502,32,FLEN)
NAN_BOXED(1035034502,32,FLEN)
NAN_BOXED(1035034502,32,FLEN)
NAN_BOXED(1035034502,32,FLEN)
NAN_BOXED(1022848338,32,FLEN)
NAN_BOXED(1022848338,32,FLEN)
NAN_BOXED(1022848338,32,FLEN)
NAN_BOXED(1022848338,32,FLEN)
NAN_BOXED(1022848338,32,FLEN)
NAN_BOXED(1022848338,32,FLEN)
NAN_BOXED(1022848338,32,FLEN)
NAN_BOXED(1022848338,32,FLEN)
NAN_BOXED(1022848338,32,FLEN)
NAN_BOXED(1022848338,32,FLEN)
NAN_BOXED(1061742872,32,FLEN)
NAN_BOXED(1061742872,32,FLEN)
NAN_BOXED(1061742872,32,FLEN)
NAN_BOXED(1061742872,32,FLEN)
NAN_BOXED(1061742872,32,FLEN)
NAN_BOXED(1061742872,32,FLEN)
NAN_BOXED(1061742872,32,FLEN)
NAN_BOXED(1061742872,32,FLEN)
NAN_BOXED(1061742872,32,FLEN)
NAN_BOXED(1061742872,32,FLEN)
NAN_BOXED(1017395672,32,FLEN)
NAN_BOXED(1017395672,32,FLEN)
NAN_BOXED(1017395672,32,FLEN)
NAN_BOXED(1017395672,32,FLEN)
NAN_BOXED(1017395672,32,FLEN)
NAN_BOXED(1017395672,32,FLEN)
NAN_BOXED(1017395672,32,FLEN)
NAN_BOXED(1017395672,32,FLEN)
NAN_BOXED(1017395672,32,FLEN)
NAN_BOXED(1017395672,32,FLEN)
NAN_BOXED(1050650005,32,FLEN)
NAN_BOXED(1050650005,32,FLEN)
NAN_BOXED(1050650005,32,FLEN)
NAN_BOXED(1050650005,32,FLEN)
NAN_BOXED(1050650005,32,FLEN)
NAN_BOXED(1050650005,32,FLEN)
NAN_BOXED(1050650005,32,FLEN)
NAN_BOXED(1050650005,32,FLEN)
NAN_BOXED(1050650005,32,FLEN)
NAN_BOXED(1050650005,32,FLEN)
NAN_BOXED(1061006474,32,FLEN)
NAN_BOXED(1061006474,32,FLEN)
NAN_BOXED(1061006474,32,FLEN)
NAN_BOXED(1061006474,32,FLEN)
NAN_BOXED(1061006474,32,FLEN)
NAN_BOXED(1061006474,32,FLEN)
NAN_BOXED(1061006474,32,FLEN)
NAN_BOXED(1061006474,32,FLEN)
NAN_BOXED(1061006474,32,FLEN)
NAN_BOXED(1061006474,32,FLEN)
NAN_BOXED(1060197223,32,FLEN)
NAN_BOXED(1060197223,32,FLEN)
NAN_BOXED(1060197223,32,FLEN)
NAN_BOXED(1060197223,32,FLEN)
NAN_BOXED(1060197223,32,FLEN)
NAN_BOXED(1060197223,32,FLEN)
NAN_BOXED(1060197223,32,FLEN)
NAN_BOXED(1060197223,32,FLEN)
NAN_BOXED(1060197223,32,FLEN)
NAN_BOXED(1060197223,32,FLEN)
NAN_BOXED(1063988074,32,FLEN)
NAN_BOXED(1063988074,32,FLEN)
NAN_BOXED(1063988074,32,FLEN)
NAN_BOXED(1063988074,32,FLEN)
NAN_BOXED(1063988074,32,FLEN)
NAN_BOXED(1063988074,32,FLEN)
NAN_BOXED(1063988074,32,FLEN)
NAN_BOXED(1063988074,32,FLEN)
NAN_BOXED(1063988074,32,FLEN)
NAN_BOXED(1063988074,32,FLEN)
NAN_BOXED(1015557516,32,FLEN)
NAN_BOXED(1015557516,32,FLEN)
NAN_BOXED(1015557516,32,FLEN)
NAN_BOXED(1015557516,32,FLEN)
NAN_BOXED(1015557516,32,FLEN)
NAN_BOXED(1015557516,32,FLEN)
NAN_BOXED(1015557516,32,FLEN)
NAN_BOXED(1015557516,32,FLEN)
NAN_BOXED(1015557516,32,FLEN)
NAN_BOXED(1015557516,32,FLEN)
NAN_BOXED(1051863980,32,FLEN)
NAN_BOXED(1051863980,32,FLEN)
NAN_BOXED(1051863980,32,FLEN)
NAN_BOXED(1051863980,32,FLEN)
NAN_BOXED(1051863980,32,FLEN)
NAN_BOXED(1051863980,32,FLEN)
NAN_BOXED(1051863980,32,FLEN)
NAN_BOXED(1051863980,32,FLEN)
NAN_BOXED(1051863980,32,FLEN)
NAN_BOXED(1051863980,32,FLEN)
NAN_BOXED(1030930523,32,FLEN)
NAN_BOXED(1030930523,32,FLEN)
NAN_BOXED(1030930523,32,FLEN)
NAN_BOXED(1030930523,32,FLEN)
NAN_BOXED(1030930523,32,FLEN)
NAN_BOXED(1030930523,32,FLEN)
NAN_BOXED(1030930523,32,FLEN)
NAN_BOXED(1030930523,32,FLEN)
NAN_BOXED(1030930523,32,FLEN)
NAN_BOXED(1030930523,32,FLEN)
NAN_BOXED(1060206229,32,FLEN)
NAN_BOXED(1060206229,32,FLEN)
NAN_BOXED(1060206229,32,FLEN)
NAN_BOXED(1060206229,32,FLEN)
NAN_BOXED(1060206229,32,FLEN)
NAN_BOXED(1060206229,32,FLEN)
NAN_BOXED(1060206229,32,FLEN)
NAN_BOXED(1060206229,32,FLEN)
NAN_BOXED(1060206229,32,FLEN)
NAN_BOXED(1060206229,32,FLEN)
NAN_BOXED(1060039282,32,FLEN)
NAN_BOXED(1060039282,32,FLEN)
NAN_BOXED(1060039282,32,FLEN)
NAN_BOXED(1060039282,32,FLEN)
NAN_BOXED(1060039282,32,FLEN)
NAN_BOXED(1060039282,32,FLEN)
NAN_BOXED(1060039282,32,FLEN)
NAN_BOXED(1060039282,32,FLEN)
NAN_BOXED(1060039282,32,FLEN)
NAN_BOXED(1060039282,32,FLEN)
NAN_BOXED(1037704331,32,FLEN)
NAN_BOXED(1037704331,32,FLEN)
NAN_BOXED(1037704331,32,FLEN)
NAN_BOXED(1037704331,32,FLEN)
NAN_BOXED(1037704331,32,FLEN)
NAN_BOXED(1037704331,32,FLEN)
NAN_BOXED(1037704331,32,FLEN)
NAN_BOXED(1037704331,32,FLEN)
NAN_BOXED(1037704331,32,FLEN)
NAN_BOXED(1037704331,32,FLEN)
NAN_BOXED(1059744032,32,FLEN)
NAN_BOXED(1059744032,32,FLEN)
NAN_BOXED(1059744032,32,FLEN)
NAN_BOXED(1059744032,32,FLEN)
NAN_BOXED(1059744032,32,FLEN)
NAN_BOXED(1059744032,32,FLEN)
NAN_BOXED(1059744032,32,FLEN)
NAN_BOXED(1059744032,32,FLEN)
NAN_BOXED(1059744032,32,FLEN)
NAN_BOXED(1059744032,32,FLEN)
NAN_BOXED(1054314296,32,FLEN)
NAN_BOXED(1054314296,32,FLEN)
NAN_BOXED(1054314296,32,FLEN)
NAN_BOXED(1054314296,32,FLEN)
NAN_BOXED(1054314296,32,FLEN)
NAN_BOXED(1054314296,32,FLEN)
NAN_BOXED(1054314296,32,FLEN)
NAN_BOXED(1054314296,32,FLEN)
NAN_BOXED(1054314296,32,FLEN)
NAN_BOXED(1054314296,32,FLEN)
NAN_BOXED(1061241153,32,FLEN)
NAN_BOXED(1061241153,32,FLEN)
NAN_BOXED(1061241153,32,FLEN)
NAN_BOXED(1061241153,32,FLEN)
NAN_BOXED(1061241153,32,FLEN)
NAN_BOXED(1061241153,32,FLEN)
NAN_BOXED(1061241153,32,FLEN)
NAN_BOXED(1061241153,32,FLEN)
NAN_BOXED(1061241153,32,FLEN)
NAN_BOXED(1061241153,32,FLEN)
NAN_BOXED(1061263613,32,FLEN)
NAN_BOXED(1061263613,32,FLEN)
NAN_BOXED(1061263613,32,FLEN)
NAN_BOXED(1061263613,32,FLEN)
NAN_BOXED(1061263613,32,FLEN)
NAN_BOXED(1061263613,32,FLEN)
NAN_BOXED(1061263613,32,FLEN)
NAN_BOXED(1061263613,32,FLEN)
NAN_BOXED(1061263613,32,FLEN)
NAN_BOXED(1061263613,32,FLEN)
NAN_BOXED(1055246461,32,FLEN)
NAN_BOXED(1055246461,32,FLEN)
NAN_BOXED(1055246461,32,FLEN)
NAN_BOXED(1055246461,32,FLEN)
NAN_BOXED(1055246461,32,FLEN)
NAN_BOXED(1055246461,32,FLEN)
NAN_BOXED(1055246461,32,FLEN)
NAN_BOXED(1055246461,32,FLEN)
NAN_BOXED(1055246461,32,FLEN)
NAN_BOXED(1055246461,32,FLEN)
NAN_BOXED(1064092747,32,FLEN)
NAN_BOXED(1064092747,32,FLEN)
NAN_BOXED(1064092747,32,FLEN)
NAN_BOXED(1064092747,32,FLEN)
NAN_BOXED(1064092747,32,FLEN)
NAN_BOXED(1064092747,32,FLEN)
NAN_BOXED(1064092747,32,FLEN)
NAN_BOXED(1064092747,32,FLEN)
NAN_BOXED(1064092747,32,FLEN)
NAN_BOXED(1064092747,32,FLEN)
NAN_BOXED(1060474040,32,FLEN)
NAN_BOXED(1060474040,32,FLEN)
NAN_BOXED(1060474040,32,FLEN)
NAN_BOXED(1060474040,32,FLEN)
NAN_BOXED(1060474040,32,FLEN)
NAN_BOXED(1060474040,32,FLEN)
NAN_BOXED(1060474040,32,FLEN)
NAN_BOXED(1060474040,32,FLEN)
NAN_BOXED(1060474040,32,FLEN)
NAN_BOXED(1060474040,32,FLEN)
NAN_BOXED(1057077668,32,FLEN)
NAN_BOXED(1057077668,32,FLEN)
NAN_BOXED(1057077668,32,FLEN)
NAN_BOXED(1057077668,32,FLEN)
NAN_BOXED(1057077668,32,FLEN)
NAN_BOXED(1057077668,32,FLEN)
NAN_BOXED(1057077668,32,FLEN)
NAN_BOXED(1057077668,32,FLEN)
NAN_BOXED(1057077668,32,FLEN)
NAN_BOXED(1057077668,32,FLEN)
NAN_BOXED(1062766511,32,FLEN)
NAN_BOXED(1062766511,32,FLEN)
NAN_BOXED(1062766511,32,FLEN)
NAN_BOXED(1062766511,32,FLEN)
NAN_BOXED(1062766511,32,FLEN)
NAN_BOXED(1062766511,32,FLEN)
NAN_BOXED(1062766511,32,FLEN)
NAN_BOXED(1062766511,32,FLEN)
NAN_BOXED(1062766511,32,FLEN)
NAN_BOXED(1062766511,32,FLEN)
NAN_BOXED(1045557208,32,FLEN)
NAN_BOXED(1045557208,32,FLEN)
NAN_BOXED(1045557208,32,FLEN)
NAN_BOXED(1045557208,32,FLEN)
NAN_BOXED(1045557208,32,FLEN)
NAN_BOXED(1045557208,32,FLEN)
NAN_BOXED(1045557208,32,FLEN)
NAN_BOXED(1045557208,32,FLEN)
NAN_BOXED(1045557208,32,FLEN)
NAN_BOXED(1045557208,32,FLEN)
NAN_BOXED(1028650586,32,FLEN)
NAN_BOXED(1028650586,32,FLEN)
NAN_BOXED(1028650586,32,FLEN)
NAN_BOXED(1028650586,32,FLEN)
NAN_BOXED(1028650586,32,FLEN)
NAN_BOXED(1028650586,32,FLEN)
NAN_BOXED(1028650586,32,FLEN)
NAN_BOXED(1028650586,32,FLEN)
NAN_BOXED(1028650586,32,FLEN)
NAN_BOXED(1028650586,32,FLEN)
NAN_BOXED(1046817144,32,FLEN)
NAN_BOXED(1046817144,32,FLEN)
NAN_BOXED(1046817144,32,FLEN)
NAN_BOXED(1046817144,32,FLEN)
NAN_BOXED(1046817144,32,FLEN)
NAN_BOXED(1046817144,32,FLEN)
NAN_BOXED(1046817144,32,FLEN)
NAN_BOXED(1046817144,32,FLEN)
NAN_BOXED(1046817144,32,FLEN)
NAN_BOXED(1046817144,32,FLEN)
NAN_BOXED(1043774351,32,FLEN)
NAN_BOXED(1043774351,32,FLEN)
NAN_BOXED(1043774351,32,FLEN)
NAN_BOXED(1043774351,32,FLEN)
NAN_BOXED(1043774351,32,FLEN)
NAN_BOXED(1043774351,32,FLEN)
NAN_BOXED(1043774351,32,FLEN)
NAN_BOXED(1043774351,32,FLEN)
NAN_BOXED(1043774351,32,FLEN)
NAN_BOXED(1043774351,32,FLEN)
NAN_BOXED(1063560105,32,FLEN)
NAN_BOXED(1063560105,32,FLEN)
NAN_BOXED(1063560105,32,FLEN)
NAN_BOXED(1063560105,32,FLEN)
NAN_BOXED(1063560105,32,FLEN)
NAN_BOXED(1063560105,32,FLEN)
NAN_BOXED(1063560105,32,FLEN)
NAN_BOXED(1063560105,32,FLEN)
NAN_BOXED(1063560105,32,FLEN)
NAN_BOXED(1063560105,32,FLEN)
NAN_BOXED(1034233904,32,FLEN)
NAN_BOXED(1034233904,32,FLEN)
NAN_BOXED(1034233904,32,FLEN)
NAN_BOXED(1034233904,32,FLEN)
NAN_BOXED(1034233904,32,FLEN)
NAN_BOXED(1034233904,32,FLEN)
NAN_BOXED(1034233904,32,FLEN)
NAN_BOXED(1034233904,32,FLEN)
NAN_BOXED(1034233904,32,FLEN)
NAN_BOXED(1034233904,32,FLEN)
NAN_BOXED(1037669628,32,FLEN)
NAN_BOXED(1037669628,32,FLEN)
NAN_BOXED(1037669628,32,FLEN)
NAN_BOXED(1037669628,32,FLEN)
NAN_BOXED(1037669628,32,FLEN)
NAN_BOXED(1037669628,32,FLEN)
NAN_BOXED(1037669628,32,FLEN)
NAN_BOXED(1037669628,32,FLEN)
NAN_BOXED(1037669628,32,FLEN)
NAN_BOXED(1037669628,32,FLEN)
NAN_BOXED(1035425122,32,FLEN)
NAN_BOXED(1035425122,32,FLEN)
NAN_BOXED(1035425122,32,FLEN)
NAN_BOXED(1035425122,32,FLEN)
NAN_BOXED(1035425122,32,FLEN)
NAN_BOXED(1035425122,32,FLEN)
NAN_BOXED(1035425122,32,FLEN)
NAN_BOXED(1035425122,32,FLEN)
NAN_BOXED(1035425122,32,FLEN)
NAN_BOXED(1035425122,32,FLEN)
NAN_BOXED(1060050463,32,FLEN)
NAN_BOXED(1060050463,32,FLEN)
NAN_BOXED(1060050463,32,FLEN)
NAN_BOXED(1060050463,32,FLEN)
NAN_BOXED(1060050463,32,FLEN)
NAN_BOXED(1060050463,32,FLEN)
NAN_BOXED(1060050463,32,FLEN)
NAN_BOXED(1060050463,32,FLEN)
NAN_BOXED(1060050463,32,FLEN)
NAN_BOXED(1060050463,32,FLEN)
NAN_BOXED(1044961766,32,FLEN)
NAN_BOXED(1044961766,32,FLEN)
NAN_BOXED(1044961766,32,FLEN)
NAN_BOXED(1044961766,32,FLEN)
NAN_BOXED(1044961766,32,FLEN)
NAN_BOXED(1044961766,32,FLEN)
NAN_BOXED(1044961766,32,FLEN)
NAN_BOXED(1044961766,32,FLEN)
NAN_BOXED(1044961766,32,FLEN)
NAN_BOXED(1044961766,32,FLEN)
NAN_BOXED(1042487983,32,FLEN)
NAN_BOXED(1042487983,32,FLEN)
NAN_BOXED(1042487983,32,FLEN)
NAN_BOXED(1042487983,32,FLEN)
NAN_BOXED(1042487983,32,FLEN)
NAN_BOXED(1042487983,32,FLEN)
NAN_BOXED(1042487983,32,FLEN)
NAN_BOXED(1042487983,32,FLEN)
NAN_BOXED(1042487983,32,FLEN)
NAN_BOXED(1042487983,32,FLEN)
NAN_BOXED(1050602849,32,FLEN)
NAN_BOXED(1050602849,32,FLEN)
NAN_BOXED(1050602849,32,FLEN)
NAN_BOXED(1050602849,32,FLEN)
NAN_BOXED(1050602849,32,FLEN)
NAN_BOXED(1050602849,32,FLEN)
NAN_BOXED(1050602849,32,FLEN)
NAN_BOXED(1050602849,32,FLEN)
NAN_BOXED(1050602849,32,FLEN)
NAN_BOXED(1050602849,32,FLEN)
NAN_BOXED(1058094754,32,FLEN)
NAN_BOXED(1058094754,32,FLEN)
NAN_BOXED(1058094754,32,FLEN)
NAN_BOXED(1058094754,32,FLEN)
NAN_BOXED(1058094754,32,FLEN)
NAN_BOXED(1058094754,32,FLEN)
NAN_BOXED(1058094754,32,FLEN)
NAN_BOXED(1058094754,32,FLEN)
NAN_BOXED(1058094754,32,FLEN)
NAN_BOXED(1058094754,32,FLEN)
NAN_BOXED(1049756295,32,FLEN)
NAN_BOXED(1049756295,32,FLEN)
NAN_BOXED(1049756295,32,FLEN)
NAN_BOXED(1049756295,32,FLEN)
NAN_BOXED(1049756295,32,FLEN)
NAN_BOXED(1049756295,32,FLEN)
NAN_BOXED(1049756295,32,FLEN)
NAN_BOXED(1049756295,32,FLEN)
NAN_BOXED(1049756295,32,FLEN)
NAN_BOXED(1049756295,32,FLEN)
NAN_BOXED(1061115519,32,FLEN)
NAN_BOXED(1061115519,32,FLEN)
NAN_BOXED(1061115519,32,FLEN)
NAN_BOXED(1061115519,32,FLEN)
NAN_BOXED(1061115519,32,FLEN)
NAN_BOXED(1061115519,32,FLEN)
NAN_BOXED(1061115519,32,FLEN)
NAN_BOXED(1061115519,32,FLEN)
NAN_BOXED(1061115519,32,FLEN)
NAN_BOXED(1061115519,32,FLEN)
NAN_BOXED(1024850095,32,FLEN)
NAN_BOXED(1024850095,32,FLEN)
NAN_BOXED(1024850095,32,FLEN)
NAN_BOXED(1024850095,32,FLEN)
NAN_BOXED(1024850095,32,FLEN)
NAN_BOXED(1024850095,32,FLEN)
NAN_BOXED(1024850095,32,FLEN)
NAN_BOXED(1024850095,32,FLEN)
NAN_BOXED(1024850095,32,FLEN)
NAN_BOXED(1024850095,32,FLEN)
NAN_BOXED(1055311383,32,FLEN)
NAN_BOXED(1055311383,32,FLEN)
NAN_BOXED(1055311383,32,FLEN)
NAN_BOXED(1055311383,32,FLEN)
NAN_BOXED(1055311383,32,FLEN)
NAN_BOXED(1055311383,32,FLEN)
NAN_BOXED(1055311383,32,FLEN)
NAN_BOXED(1055311383,32,FLEN)
NAN_BOXED(1055311383,32,FLEN)
NAN_BOXED(1055311383,32,FLEN)
NAN_BOXED(1041778364,32,FLEN)
NAN_BOXED(1041778364,32,FLEN)
NAN_BOXED(1041778364,32,FLEN)
NAN_BOXED(1041778364,32,FLEN)
NAN_BOXED(1041778364,32,FLEN)
NAN_BOXED(1041778364,32,FLEN)
NAN_BOXED(1041778364,32,FLEN)
NAN_BOXED(1041778364,32,FLEN)
NAN_BOXED(1041778364,32,FLEN)
NAN_BOXED(1041778364,32,FLEN)
NAN_BOXED(1058714296,32,FLEN)
NAN_BOXED(1058714296,32,FLEN)
NAN_BOXED(1058714296,32,FLEN)
NAN_BOXED(1058714296,32,FLEN)
NAN_BOXED(1058714296,32,FLEN)
NAN_BOXED(1058714296,32,FLEN)
NAN_BOXED(1058714296,32,FLEN)
NAN_BOXED(1058714296,32,FLEN)
NAN_BOXED(1058714296,32,FLEN)
NAN_BOXED(1058714296,32,FLEN)
NAN_BOXED(1061025212,32,FLEN)
NAN_BOXED(1061025212,32,FLEN)
NAN_BOXED(1061025212,32,FLEN)
NAN_BOXED(1061025212,32,FLEN)
NAN_BOXED(1061025212,32,FLEN)
NAN_BOXED(1061025212,32,FLEN)
NAN_BOXED(1061025212,32,FLEN)
NAN_BOXED(1061025212,32,FLEN)
NAN_BOXED(1061025212,32,FLEN)
NAN_BOXED(1061025212,32,FLEN)
NAN_BOXED(1052050935,32,FLEN)
NAN_BOXED(1052050935,32,FLEN)
NAN_BOXED(1052050935,32,FLEN)
NAN_BOXED(1052050935,32,FLEN)
NAN_BOXED(1052050935,32,FLEN)
NAN_BOXED(1052050935,32,FLEN)
NAN_BOXED(1052050935,32,FLEN)
NAN_BOXED(1052050935,32,FLEN)
NAN_BOXED(1052050935,32,FLEN)
NAN_BOXED(1052050935,32,FLEN)
NAN_BOXED(1054595543,32,FLEN)
NAN_BOXED(1054595543,32,FLEN)
NAN_BOXED(1054595543,32,FLEN)
NAN_BOXED(1054595543,32,FLEN)
NAN_BOXED(1054595543,32,FLEN)
NAN_BOXED(1054595543,32,FLEN)
NAN_BOXED(1054595543,32,FLEN)
NAN_BOXED(1054595543,32,FLEN)
NAN_BOXED(1054595543,32,FLEN)
NAN_BOXED(1054595543,32,FLEN)
NAN_BOXED(1059398253,32,FLEN)
NAN_BOXED(1059398253,32,FLEN)
NAN_BOXED(1059398253,32,FLEN)
NAN_BOXED(1059398253,32,FLEN)
NAN_BOXED(1059398253,32,FLEN)
NAN_BOXED(1059398253,32,FLEN)
NAN_BOXED(1059398253,32,FLEN)
NAN_BOXED(1059398253,32,FLEN)
NAN_BOXED(1059398253,32,FLEN)
NAN_BOXED(1059398253,32,FLEN)
NAN_BOXED(1063253899,32,FLEN)
NAN_BOXED(1063253899,32,FLEN)
NAN_BOXED(1063253899,32,FLEN)
NAN_BOXED(1063253899,32,FLEN)
NAN_BOXED(1063253899,32,FLEN)
NAN_BOXED(1063253899,32,FLEN)
NAN_BOXED(1063253899,32,FLEN)
NAN_BOXED(1063253899,32,FLEN)
NAN_BOXED(1063253899,32,FLEN)
NAN_BOXED(1063253899,32,FLEN)
NAN_BOXED(1043278803,32,FLEN)
NAN_BOXED(1043278803,32,FLEN)
NAN_BOXED(1043278803,32,FLEN)
NAN_BOXED(1043278803,32,FLEN)
NAN_BOXED(1043278803,32,FLEN)
NAN_BOXED(1043278803,32,FLEN)
NAN_BOXED(1043278803,32,FLEN)
NAN_BOXED(1043278803,32,FLEN)
NAN_BOXED(1043278803,32,FLEN)
NAN_BOXED(1043278803,32,FLEN)
NAN_BOXED(1058624174,32,FLEN)
NAN_BOXED(1058624174,32,FLEN)
NAN_BOXED(1058624174,32,FLEN)
NAN_BOXED(1058624174,32,FLEN)
NAN_BOXED(1058624174,32,FLEN)
NAN_BOXED(1058624174,32,FLEN)
NAN_BOXED(1058624174,32,FLEN)
NAN_BOXED(1058624174,32,FLEN)
NAN_BOXED(1058624174,32,FLEN)
NAN_BOXED(1058624174,32,FLEN)
NAN_BOXED(1061435238,32,FLEN)
NAN_BOXED(1061435238,32,FLEN)
NAN_BOXED(1061435238,32,FLEN)
NAN_BOXED(1061435238,32,FLEN)
NAN_BOXED(1061435238,32,FLEN)
NAN_BOXED(1061435238,32,FLEN)
NAN_BOXED(1061435238,32,FLEN)
NAN_BOXED(1061435238,32,FLEN)
NAN_BOXED(1061435238,32,FLEN)
NAN_BOXED(1061435238,32,FLEN)
NAN_BOXED(1056001537,32,FLEN)
NAN_BOXED(1056001537,32,FLEN)
NAN_BOXED(1056001537,32,FLEN)
NAN_BOXED(1056001537,32,FLEN)
NAN_BOXED(1056001537,32,FLEN)
NAN_BOXED(1056001537,32,FLEN)
NAN_BOXED(1056001537,32,FLEN)
NAN_BOXED(1056001537,32,FLEN)
NAN_BOXED(1056001537,32,FLEN)
NAN_BOXED(1056001537,32,FLEN)
NAN_BOXED(1051970380,32,FLEN)
NAN_BOXED(1051970380,32,FLEN)
NAN_BOXED(1051970380,32,FLEN)
NAN_BOXED(1051970380,32,FLEN)
NAN_BOXED(1051970380,32,FLEN)
NAN_BOXED(1051970380,32,FLEN)
NAN_BOXED(1051970380,32,FLEN)
NAN_BOXED(1051970380,32,FLEN)
NAN_BOXED(1051970380,32,FLEN)
NAN_BOXED(1051970380,32,FLEN)
NAN_BOXED(1050706265,32,FLEN)
NAN_BOXED(1050706265,32,FLEN)
NAN_BOXED(1050706265,32,FLEN)
NAN_BOXED(1050706265,32,FLEN)
NAN_BOXED(1050706265,32,FLEN)
NAN_BOXED(1050706265,32,FLEN)
NAN_BOXED(1050706265,32,FLEN)
NAN_BOXED(1050706265,32,FLEN)
NAN_BOXED(1050706265,32,FLEN)
NAN_BOXED(1050706265,32,FLEN)
NAN_BOXED(1061353952,32,FLEN)
NAN_BOXED(1061353952,32,FLEN)
NAN_BOXED(1061353952,32,FLEN)
NAN_BOXED(1061353952,32,FLEN)
NAN_BOXED(1061353952,32,FLEN)
NAN_BOXED(1061353952,32,FLEN)
NAN_BOXED(1061353952,32,FLEN)
NAN_BOXED(1061353952,32,FLEN)
NAN_BOXED(1061353952,32,FLEN)
NAN_BOXED(1061353952,32,FLEN)
NAN_BOXED(1057319833,32,FLEN)
NAN_BOXED(1057319833,32,FLEN)
NAN_BOXED(1057319833,32,FLEN)
NAN_BOXED(1057319833,32,FLEN)
NAN_BOXED(1057319833,32,FLEN)
NAN_BOXED(1057319833,32,FLEN)
NAN_BOXED(1057319833,32,FLEN)
NAN_BOXED(1057319833,32,FLEN)
NAN_BOXED(1057319833,32,FLEN)
NAN_BOXED(1057319833,32,FLEN)
NAN_BOXED(1058436873,32,FLEN)
NAN_BOXED(1058436873,32,FLEN)
NAN_BOXED(1058436873,32,FLEN)
NAN_BOXED(1058436873,32,FLEN)
NAN_BOXED(1058436873,32,FLEN)
NAN_BOXED(1058436873,32,FLEN)
NAN_BOXED(1058436873,32,FLEN)
NAN_BOXED(1058436873,32,FLEN)
NAN_BOXED(1058436873,32,FLEN)
NAN_BOXED(1058436873,32,FLEN)
NAN_BOXED(1035900544,32,FLEN)
NAN_BOXED(1035900544,32,FLEN)
NAN_BOXED(1035900544,32,FLEN)
NAN_BOXED(1035900544,32,FLEN)
NAN_BOXED(1035900544,32,FLEN)
NAN_BOXED(1035900544,32,FLEN)
NAN_BOXED(1035900544,32,FLEN)
NAN_BOXED(1035900544,32,FLEN)
NAN_BOXED(1035900544,32,FLEN)
NAN_BOXED(1035900544,32,FLEN)
NAN_BOXED(1060735700,32,FLEN)
NAN_BOXED(1060735700,32,FLEN)
NAN_BOXED(1060735700,32,FLEN)
NAN_BOXED(1060735700,32,FLEN)
NAN_BOXED(1060735700,32,FLEN)
NAN_BOXED(1060735700,32,FLEN)
NAN_BOXED(1060735700,32,FLEN)
NAN_BOXED(1060735700,32,FLEN)
NAN_BOXED(1060735700,32,FLEN)
NAN_BOXED(1060735700,32,FLEN)
NAN_BOXED(1064544598,32,FLEN)
NAN_BOXED(1064544598,32,FLEN)
NAN_BOXED(1064544598,32,FLEN)
NAN_BOXED(1064544598,32,FLEN)
NAN_BOXED(1064544598,32,FLEN)
NAN_BOXED(1064544598,32,FLEN)
NAN_BOXED(1064544598,32,FLEN)
NAN_BOXED(1064544598,32,FLEN)
NAN_BOXED(1064544598,32,FLEN)
NAN_BOXED(1064544598,32,FLEN)
NAN_BOXED(1056572299,32,FLEN)
NAN_BOXED(1056572299,32,FLEN)
NAN_BOXED(1056572299,32,FLEN)
NAN_BOXED(1056572299,32,FLEN)
NAN_BOXED(1056572299,32,FLEN)
NAN_BOXED(1056572299,32,FLEN)
NAN_BOXED(1056572299,32,FLEN)
NAN_BOXED(1056572299,32,FLEN)
NAN_BOXED(1056572299,32,FLEN)
NAN_BOXED(1056572299,32,FLEN)
NAN_BOXED(1062677791,32,FLEN)
NAN_BOXED(1062677791,32,FLEN)
NAN_BOXED(1062677791,32,FLEN)
NAN_BOXED(1062677791,32,FLEN)
NAN_BOXED(1062677791,32,FLEN)
NAN_BOXED(1062677791,32,FLEN)
NAN_BOXED(1062677791,32,FLEN)
NAN_BOXED(1062677791,32,FLEN)
NAN_BOXED(1062677791,32,FLEN)
NAN_BOXED(1062677791,32,FLEN)
NAN_BOXED(1039112365,32,FLEN)
NAN_BOXED(1039112365,32,FLEN)
NAN_BOXED(1039112365,32,FLEN)
NAN_BOXED(1039112365,32,FLEN)
NAN_BOXED(1039112365,32,FLEN)
NAN_BOXED(1039112365,32,FLEN)
NAN_BOXED(1039112365,32,FLEN)
NAN_BOXED(1039112365,32,FLEN)
NAN_BOXED(1039112365,32,FLEN)
NAN_BOXED(1039112365,32,FLEN)
NAN_BOXED(1050503468,32,FLEN)
NAN_BOXED(1050503468,32,FLEN)
NAN_BOXED(1050503468,32,FLEN)
NAN_BOXED(1050503468,32,FLEN)
NAN_BOXED(1050503468,32,FLEN)
NAN_BOXED(1050503468,32,FLEN)
NAN_BOXED(1050503468,32,FLEN)
NAN_BOXED(1050503468,32,FLEN)
NAN_BOXED(1050503468,32,FLEN)
NAN_BOXED(1050503468,32,FLEN)
NAN_BOXED(1059118562,32,FLEN)
NAN_BOXED(1059118562,32,FLEN)
NAN_BOXED(1059118562,32,FLEN)
NAN_BOXED(1059118562,32,FLEN)
NAN_BOXED(1059118562,32,FLEN)
NAN_BOXED(1059118562,32,FLEN)
NAN_BOXED(1059118562,32,FLEN)
NAN_BOXED(1059118562,32,FLEN)
NAN_BOXED(1059118562,32,FLEN)
NAN_BOXED(1059118562,32,FLEN)
NAN_BOXED(1049031732,32,FLEN)
NAN_BOXED(1049031732,32,FLEN)
NAN_BOXED(1049031732,32,FLEN)
NAN_BOXED(1049031732,32,FLEN)
NAN_BOXED(1049031732,32,FLEN)
NAN_BOXED(1049031732,32,FLEN)
NAN_BOXED(1049031732,32,FLEN)
NAN_BOXED(1049031732,32,FLEN)
NAN_BOXED(1049031732,32,FLEN)
NAN_BOXED(1049031732,32,FLEN)
NAN_BOXED(1041443861,32,FLEN)
NAN_BOXED(1041443861,32,FLEN)
NAN_BOXED(1041443861,32,FLEN)
NAN_BOXED(1041443861,32,FLEN)
NAN_BOXED(1041443861,32,FLEN)
NAN_BOXED(1041443861,32,FLEN)
NAN_BOXED(1041443861,32,FLEN)
NAN_BOXED(1041443861,32,FLEN)
NAN_BOXED(1041443861,32,FLEN)
NAN_BOXED(1041443861,32,FLEN)
NAN_BOXED(1025737828,32,FLEN)
NAN_BOXED(1025737828,32,FLEN)
NAN_BOXED(1025737828,32,FLEN)
NAN_BOXED(1025737828,32,FLEN)
NAN_BOXED(1025737828,32,FLEN)
NAN_BOXED(1025737828,32,FLEN)
NAN_BOXED(1025737828,32,FLEN)
NAN_BOXED(1025737828,32,FLEN)
NAN_BOXED(1025737828,32,FLEN)
NAN_BOXED(1025737828,32,FLEN)
NAN_BOXED(1062395797,32,FLEN)
NAN_BOXED(1062395797,32,FLEN)
NAN_BOXED(1062395797,32,FLEN)
NAN_BOXED(1062395797,32,FLEN)
NAN_BOXED(1062395797,32,FLEN)
NAN_BOXED(1062395797,32,FLEN)
NAN_BOXED(1062395797,32,FLEN)
NAN_BOXED(1062395797,32,FLEN)
NAN_BOXED(1062395797,32,FLEN)
NAN_BOXED(1062395797,32,FLEN)
NAN_BOXED(1061702180,32,FLEN)
NAN_BOXED(1061702180,32,FLEN)
NAN_BOXED(1061702180,32,FLEN)
NAN_BOXED(1061702180,32,FLEN)
NAN_BOXED(1061702180,32,FLEN)
NAN_BOXED(1061702180,32,FLEN)
NAN_BOXED(1061702180,32,FLEN)
NAN_BOXED(1061702180,32,FLEN)
NAN_BOXED(1061702180,32,FLEN)
NAN_BOXED(1061702180,32,FLEN)
NAN_BOXED(1048055898,32,FLEN)
NAN_BOXED(1048055898,32,FLEN)
NAN_BOXED(1048055898,32,FLEN)
NAN_BOXED(1048055898,32,FLEN)
NAN_BOXED(1048055898,32,FLEN)
NAN_BOXED(1048055898,32,FLEN)
NAN_BOXED(1048055898,32,FLEN)
NAN_BOXED(1048055898,32,FLEN)
NAN_BOXED(1048055898,32,FLEN)
NAN_BOXED(1048055898,32,FLEN)
NAN_BOXED(1050869899,32,FLEN)
NAN_BOXED(1050869899,32,FLEN)
NAN_BOXED(1050869899,32,FLEN)
NAN_BOXED(1050869899,32,FLEN)
NAN_BOXED(1050869899,32,FLEN)
NAN_BOXED(1050869899,32,FLEN)
NAN_BOXED(1050869899,32,FLEN)
NAN_BOXED(1050869899,32,FLEN)
NAN_BOXED(1050869899,32,FLEN)
NAN_BOXED(1050869899,32,FLEN)
NAN_BOXED(1059515055,32,FLEN)
NAN_BOXED(1059515055,32,FLEN)
NAN_BOXED(1059515055,32,FLEN)
NAN_BOXED(1059515055,32,FLEN)
NAN_BOXED(1059515055,32,FLEN)
NAN_BOXED(1059515055,32,FLEN)
NAN_BOXED(1059515055,32,FLEN)
NAN_BOXED(1059515055,32,FLEN)
NAN_BOXED(1059515055,32,FLEN)
NAN_BOXED(1059515055,32,FLEN)
NAN_BOXED(1062588361,32,FLEN)
NAN_BOXED(1062588361,32,FLEN)
NAN_BOXED(1062588361,32,FLEN)
NAN_BOXED(1062588361,32,FLEN)
NAN_BOXED(1062588361,32,FLEN)
NAN_BOXED(1062588361,32,FLEN)
NAN_BOXED(1062588361,32,FLEN)
NAN_BOXED(1062588361,32,FLEN)
NAN_BOXED(1062588361,32,FLEN)
NAN_BOXED(1062588361,32,FLEN)
NAN_BOXED(1064670237,32,FLEN)
NAN_BOXED(1064670237,32,FLEN)
NAN_BOXED(1064670237,32,FLEN)
NAN_BOXED(1064670237,32,FLEN)
NAN_BOXED(1064670237,32,FLEN)
NAN_BOXED(1064670237,32,FLEN)
NAN_BOXED(1064670237,32,FLEN)
NAN_BOXED(1064670237,32,FLEN)
NAN_BOXED(1064670237,32,FLEN)
NAN_BOXED(1064670237,32,FLEN)
NAN_BOXED(1044687461,32,FLEN)
NAN_BOXED(1044687461,32,FLEN)
NAN_BOXED(1044687461,32,FLEN)
NAN_BOXED(1044687461,32,FLEN)
NAN_BOXED(1044687461,32,FLEN)
NAN_BOXED(1044687461,32,FLEN)
NAN_BOXED(1044687461,32,FLEN)
NAN_BOXED(1044687461,32,FLEN)
NAN_BOXED(1044687461,32,FLEN)
NAN_BOXED(1044687461,32,FLEN)
NAN_BOXED(1060864870,32,FLEN)
NAN_BOXED(1060864870,32,FLEN)
NAN_BOXED(1060864870,32,FLEN)
NAN_BOXED(1060864870,32,FLEN)
NAN_BOXED(1060864870,32,FLEN)
NAN_BOXED(1060864870,32,FLEN)
NAN_BOXED(1060864870,32,FLEN)
NAN_BOXED(1060864870,32,FLEN)
NAN_BOXED(1060864870,32,FLEN)
NAN_BOXED(1060864870,32,FLEN)
NAN_BOXED(1025909622,32,FLEN)
NAN_BOXED(1025909622,32,FLEN)
NAN_BOXED(1025909622,32,FLEN)
NAN_BOXED(1025909622,32,FLEN)
NAN_BOXED(1025909622,32,FLEN)
NAN_BOXED(1025909622,32,FLEN)
NAN_BOXED(1025909622,32,FLEN)
NAN_BOXED(1025909622,32,FLEN)
NAN_BOXED(1025909622,32,FLEN)
NAN_BOXED(1025909622,32,FLEN)
NAN_BOXED(1046847460,32,FLEN)
NAN_BOXED(1046847460,32,FLEN)
NAN_BOXED(1046847460,32,FLEN)
NAN_BOXED(1046847460,32,FLEN)
NAN_BOXED(1046847460,32,FLEN)
NAN_BOXED(1046847460,32,FLEN)
NAN_BOXED(1046847460,32,FLEN)
NAN_BOXED(1046847460,32,FLEN)
NAN_BOXED(1046847460,32,FLEN)
NAN_BOXED(1046847460,32,FLEN)
NAN_BOXED(1051605382,32,FLEN)
NAN_BOXED(1051605382,32,FLEN)
NAN_BOXED(1051605382,32,FLEN)
NAN_BOXED(1051605382,32,FLEN)
NAN_BOXED(1051605382,32,FLEN)
NAN_BOXED(1051605382,32,FLEN)
NAN_BOXED(1051605382,32,FLEN)
NAN_BOXED(1051605382,32,FLEN)
NAN_BOXED(1051605382,32,FLEN)
NAN_BOXED(1051605382,32,FLEN)
NAN_BOXED(1057886369,32,FLEN)
NAN_BOXED(1057886369,32,FLEN)
NAN_BOXED(1057886369,32,FLEN)
NAN_BOXED(1057886369,32,FLEN)
NAN_BOXED(1057886369,32,FLEN)
NAN_BOXED(1057886369,32,FLEN)
NAN_BOXED(1057886369,32,FLEN)
NAN_BOXED(1057886369,32,FLEN)
NAN_BOXED(1057886369,32,FLEN)
NAN_BOXED(1057886369,32,FLEN)
NAN_BOXED(1022090800,32,FLEN)
NAN_BOXED(1022090800,32,FLEN)
NAN_BOXED(1022090800,32,FLEN)
NAN_BOXED(1022090800,32,FLEN)
NAN_BOXED(1022090800,32,FLEN)
NAN_BOXED(1022090800,32,FLEN)
NAN_BOXED(1022090800,32,FLEN)
NAN_BOXED(1022090800,32,FLEN)
NAN_BOXED(1022090800,32,FLEN)
NAN_BOXED(1022090800,32,FLEN)
NAN_BOXED(1045038589,32,FLEN)
NAN_BOXED(1045038589,32,FLEN)
NAN_BOXED(1045038589,32,FLEN)
NAN_BOXED(1045038589,32,FLEN)
NAN_BOXED(1045038589,32,FLEN)
NAN_BOXED(1045038589,32,FLEN)
NAN_BOXED(1045038589,32,FLEN)
NAN_BOXED(1045038589,32,FLEN)
NAN_BOXED(1045038589,32,FLEN)
NAN_BOXED(1045038589,32,FLEN)
NAN_BOXED(1062589098,32,FLEN)
NAN_BOXED(1062589098,32,FLEN)
NAN_BOXED(1062589098,32,FLEN)
NAN_BOXED(1062589098,32,FLEN)
NAN_BOXED(1062589098,32,FLEN)
NAN_BOXED(1062589098,32,FLEN)
NAN_BOXED(1062589098,32,FLEN)
NAN_BOXED(1062589098,32,FLEN)
NAN_BOXED(1062589098,32,FLEN)
NAN_BOXED(1062589098,32,FLEN)
NAN_BOXED(1063233749,32,FLEN)
NAN_BOXED(1063233749,32,FLEN)
NAN_BOXED(1063233749,32,FLEN)
NAN_BOXED(1063233749,32,FLEN)
NAN_BOXED(1063233749,32,FLEN)
NAN_BOXED(1063233749,32,FLEN)
NAN_BOXED(1063233749,32,FLEN)
NAN_BOXED(1063233749,32,FLEN)
NAN_BOXED(1063233749,32,FLEN)
NAN_BOXED(1063233749,32,FLEN)
NAN_BOXED(1025913583,32,FLEN)
NAN_BOXED(1025913583,32,FLEN)
NAN_BOXED(1025913583,32,FLEN)
NAN_BOXED(1025913583,32,FLEN)
NAN_BOXED(1025913583,32,FLEN)
NAN_BOXED(1025913583,32,FLEN)
NAN_BOXED(1025913583,32,FLEN)
NAN_BOXED(1025913583,32,FLEN)
NAN_BOXED(1025913583,32,FLEN)
NAN_BOXED(1025913583,32,FLEN)
NAN_BOXED(1053586378,32,FLEN)
NAN_BOXED(1053586378,32,FLEN)
NAN_BOXED(1053586378,32,FLEN)
NAN_BOXED(1053586378,32,FLEN)
NAN_BOXED(1053586378,32,FLEN)
NAN_BOXED(1053586378,32,FLEN)
NAN_BOXED(1053586378,32,FLEN)
NAN_BOXED(1053586378,32,FLEN)
NAN_BOXED(1053586378,32,FLEN)
NAN_BOXED(1053586378,32,FLEN)
NAN_BOXED(1063371994,32,FLEN)
NAN_BOXED(1063371994,32,FLEN)
NAN_BOXED(1063371994,32,FLEN)
NAN_BOXED(1063371994,32,FLEN)
NAN_BOXED(1063371994,32,FLEN)
NAN_BOXED(1063371994,32,FLEN)
NAN_BOXED(1063371994,32,FLEN)
NAN_BOXED(1063371994,32,FLEN)
NAN_BOXED(1063371994,32,FLEN)
NAN_BOXED(1063371994,32,FLEN)
NAN_BOXED(1061188836,32,FLEN)
NAN_BOXED(1061188836,32,FLEN)
NAN_BOXED(1061188836,32,FLEN)
NAN_BOXED(1061188836,32,FLEN)
NAN_BOXED(1061188836,32,FLEN)
NAN_BOXED(1061188836,32,FLEN)
NAN_BOXED(1061188836,32,FLEN)
NAN_BOXED(1061188836,32,FLEN)
NAN_BOXED(1061188836,32,FLEN)
NAN_BOXED(1061188836,32,FLEN)
NAN_BOXED(1065285956,32,FLEN)
NAN_BOXED(1065285956,32,FLEN)
NAN_BOXED(1065285956,32,FLEN)
NAN_BOXED(1065285956,32,FLEN)
NAN_BOXED(1065285956,32,FLEN)
NAN_BOXED(1065285956,32,FLEN)
NAN_BOXED(1065285956,32,FLEN)
NAN_BOXED(1065285956,32,FLEN)
NAN_BOXED(1065285956,32,FLEN)
NAN_BOXED(1065285956,32,FLEN)
NAN_BOXED(1057991825,32,FLEN)
NAN_BOXED(1057991825,32,FLEN)
NAN_BOXED(1057991825,32,FLEN)
NAN_BOXED(1057991825,32,FLEN)
NAN_BOXED(1057991825,32,FLEN)
NAN_BOXED(1057991825,32,FLEN)
NAN_BOXED(1057991825,32,FLEN)
NAN_BOXED(1057991825,32,FLEN)
NAN_BOXED(1057991825,32,FLEN)
NAN_BOXED(1057991825,32,FLEN)
NAN_BOXED(1052685525,32,FLEN)
NAN_BOXED(1052685525,32,FLEN)
NAN_BOXED(1052685525,32,FLEN)
NAN_BOXED(1052685525,32,FLEN)
NAN_BOXED(1052685525,32,FLEN)
NAN_BOXED(1052685525,32,FLEN)
NAN_BOXED(1052685525,32,FLEN)
NAN_BOXED(1052685525,32,FLEN)
NAN_BOXED(1052685525,32,FLEN)
NAN_BOXED(1052685525,32,FLEN)
NAN_BOXED(1042849442,32,FLEN)
NAN_BOXED(1042849442,32,FLEN)
NAN_BOXED(1042849442,32,FLEN)
NAN_BOXED(1042849442,32,FLEN)
NAN_BOXED(1042849442,32,FLEN)
NAN_BOXED(1042849442,32,FLEN)
NAN_BOXED(1042849442,32,FLEN)
NAN_BOXED(1042849442,32,FLEN)
NAN_BOXED(1042849442,32,FLEN)
NAN_BOXED(1042849442,32,FLEN)
NAN_BOXED(1060575373,32,FLEN)
NAN_BOXED(1060575373,32,FLEN)
NAN_BOXED(1060575373,32,FLEN)
NAN_BOXED(1060575373,32,FLEN)
NAN_BOXED(1060575373,32,FLEN)
NAN_BOXED(1060575373,32,FLEN)
NAN_BOXED(1060575373,32,FLEN)
NAN_BOXED(1060575373,32,FLEN)
NAN_BOXED(1060575373,32,FLEN)
NAN_BOXED(1060575373,32,FLEN)
NAN_BOXED(1060769249,32,FLEN)
NAN_BOXED(1060769249,32,FLEN)
NAN_BOXED(1060769249,32,FLEN)
NAN_BOXED(1060769249,32,FLEN)
NAN_BOXED(1060769249,32,FLEN)
NAN_BOXED(1060769249,32,FLEN)
NAN_BOXED(1060769249,32,FLEN)
NAN_BOXED(1060769249,32,FLEN)
NAN_BOXED(1060769249,32,FLEN)
NAN_BOXED(1060769249,32,FLEN)
NAN_BOXED(1061144110,32,FLEN)
NAN_BOXED(1061144110,32,FLEN)
NAN_BOXED(1061144110,32,FLEN)
NAN_BOXED(1061144110,32,FLEN)
NAN_BOXED(1061144110,32,FLEN)
NAN_BOXED(1061144110,32,FLEN)
NAN_BOXED(1061144110,32,FLEN)
NAN_BOXED(1061144110,32,FLEN)
NAN_BOXED(1061144110,32,FLEN)
NAN_BOXED(1061144110,32,FLEN)
NAN_BOXED(1045818448,32,FLEN)
NAN_BOXED(1045818448,32,FLEN)
NAN_BOXED(1045818448,32,FLEN)
NAN_BOXED(1045818448,32,FLEN)
NAN_BOXED(1045818448,32,FLEN)
NAN_BOXED(1045818448,32,FLEN)
NAN_BOXED(1045818448,32,FLEN)
NAN_BOXED(1045818448,32,FLEN)
NAN_BOXED(1045818448,32,FLEN)
NAN_BOXED(1045818448,32,FLEN)
NAN_BOXED(1020797703,32,FLEN)
NAN_BOXED(1020797703,32,FLEN)
NAN_BOXED(1020797703,32,FLEN)
NAN_BOXED(1020797703,32,FLEN)
NAN_BOXED(1020797703,32,FLEN)
NAN_BOXED(1020797703,32,FLEN)
NAN_BOXED(1020797703,32,FLEN)
NAN_BOXED(1020797703,32,FLEN)
NAN_BOXED(1020797703,32,FLEN)
NAN_BOXED(1020797703,32,FLEN)
NAN_BOXED(1057118802,32,FLEN)
NAN_BOXED(1057118802,32,FLEN)
NAN_BOXED(1057118802,32,FLEN)
NAN_BOXED(1057118802,32,FLEN)
NAN_BOXED(1057118802,32,FLEN)
NAN_BOXED(1057118802,32,FLEN)
NAN_BOXED(1057118802,32,FLEN)
NAN_BOXED(1057118802,32,FLEN)
NAN_BOXED(1057118802,32,FLEN)
NAN_BOXED(1057118802,32,FLEN)
NAN_BOXED(1047296409,32,FLEN)
NAN_BOXED(1047296409,32,FLEN)
NAN_BOXED(1047296409,32,FLEN)
NAN_BOXED(1047296409,32,FLEN)
NAN_BOXED(1047296409,32,FLEN)
NAN_BOXED(1047296409,32,FLEN)
NAN_BOXED(1047296409,32,FLEN)
NAN_BOXED(1047296409,32,FLEN)
NAN_BOXED(1047296409,32,FLEN)
NAN_BOXED(1047296409,32,FLEN)
NAN_BOXED(1058923240,32,FLEN)
NAN_BOXED(1058923240,32,FLEN)
NAN_BOXED(1058923240,32,FLEN)
NAN_BOXED(1058923240,32,FLEN)
NAN_BOXED(1058923240,32,FLEN)
NAN_BOXED(1058923240,32,FLEN)
NAN_BOXED(1058923240,32,FLEN)
NAN_BOXED(1058923240,32,FLEN)
NAN_BOXED(1058923240,32,FLEN)
NAN_BOXED(1058923240,32,FLEN)
NAN_BOXED(1063538941,32,FLEN)
NAN_BOXED(1063538941,32,FLEN)
NAN_BOXED(1063538941,32,FLEN)
NAN_BOXED(1063538941,32,FLEN)
NAN_BOXED(1063538941,32,FLEN)
NAN_BOXED(1063538941,32,FLEN)
NAN_BOXED(1063538941,32,FLEN)
NAN_BOXED(1063538941,32,FLEN)
NAN_BOXED(1063538941,32,FLEN)
NAN_BOXED(1063538941,32,FLEN)
NAN_BOXED(1063372304,32,FLEN)
NAN_BOXED(1063372304,32,FLEN)
NAN_BOXED(1063372304,32,FLEN)
NAN_BOXED(1063372304,32,FLEN)
NAN_BOXED(1063372304,32,FLEN)
NAN_BOXED(1063372304,32,FLEN)
NAN_BOXED(1063372304,32,FLEN)
NAN_BOXED(1063372304,32,FLEN)
NAN_BOXED(1063372304,32,FLEN)
NAN_BOXED(1063372304,32,FLEN)
NAN_BOXED(1055445025,32,FLEN)
NAN_BOXED(1055445025,32,FLEN)
NAN_BOXED(1055445025,32,FLEN)
NAN_BOXED(1055445025,32,FLEN)
NAN_BOXED(1055445025,32,FLEN)
NAN_BOXED(1055445025,32,FLEN)
NAN_BOXED(1055445025,32,FLEN)
NAN_BOXED(1055445025,32,FLEN)
NAN_BOXED(1055445025,32,FLEN)
NAN_BOXED(1055445025,32,FLEN)
NAN_BOXED(1047833396,32,FLEN)
NAN_BOXED(1047833396,32,FLEN)
NAN_BOXED(1047833396,32,FLEN)
NAN_BOXED(1047833396,32,FLEN)
NAN_BOXED(1047833396,32,FLEN)
NAN_BOXED(1047833396,32,FLEN)
NAN_BOXED(1047833396,32,FLEN)
NAN_BOXED(1047833396,32,FLEN)
NAN_BOXED(1047833396,32,FLEN)
NAN_BOXED(1047833396,32,FLEN)
NAN_BOXED(1063061548,32,FLEN)
NAN_BOXED(1063061548,32,FLEN)
NAN_BOXED(1063061548,32,FLEN)
NAN_BOXED(1063061548,32,FLEN)
NAN_BOXED(1063061548,32,FLEN)
NAN_BOXED(1063061548,32,FLEN)
NAN_BOXED(1063061548,32,FLEN)
NAN_BOXED(1063061548,32,FLEN)
NAN_BOXED(1063061548,32,FLEN)
NAN_BOXED(1063061548,32,FLEN)
NAN_BOXED(1054529284,32,FLEN)
NAN_BOXED(1054529284,32,FLEN)
NAN_BOXED(1054529284,32,FLEN)
NAN_BOXED(1054529284,32,FLEN)
NAN_BOXED(1054529284,32,FLEN)
NAN_BOXED(1054529284,32,FLEN)
NAN_BOXED(1054529284,32,FLEN)
NAN_BOXED(1054529284,32,FLEN)
NAN_BOXED(1054529284,32,FLEN)
NAN_BOXED(1054529284,32,FLEN)
NAN_BOXED(1056862854,32,FLEN)
NAN_BOXED(1056862854,32,FLEN)
NAN_BOXED(1056862854,32,FLEN)
NAN_BOXED(1056862854,32,FLEN)
NAN_BOXED(1056862854,32,FLEN)
NAN_BOXED(1056862854,32,FLEN)
NAN_BOXED(1056862854,32,FLEN)
NAN_BOXED(1056862854,32,FLEN)
NAN_BOXED(1056862854,32,FLEN)
NAN_BOXED(1056862854,32,FLEN)
NAN_BOXED(1056011864,32,FLEN)
NAN_BOXED(1056011864,32,FLEN)
NAN_BOXED(1056011864,32,FLEN)
NAN_BOXED(1056011864,32,FLEN)
NAN_BOXED(1056011864,32,FLEN)
NAN_BOXED(1056011864,32,FLEN)
NAN_BOXED(1056011864,32,FLEN)
NAN_BOXED(1056011864,32,FLEN)
NAN_BOXED(1056011864,32,FLEN)
NAN_BOXED(1056011864,32,FLEN)
NAN_BOXED(1415739142,32,FLEN)
NAN_BOXED(3566126204,32,FLEN)
NAN_BOXED(1415739142,32,FLEN)
NAN_BOXED(3566126204,32,FLEN)
NAN_BOXED(1415739142,32,FLEN)
NAN_BOXED(3566126204,32,FLEN)
NAN_BOXED(1415739142,32,FLEN)
NAN_BOXED(3566126204,32,FLEN)
NAN_BOXED(1415739142,32,FLEN)
NAN_BOXED(3566126204,32,FLEN)
NAN_BOXED(1411124899,32,FLEN)
NAN_BOXED(3568433326,32,FLEN)
NAN_BOXED(1411124899,32,FLEN)
NAN_BOXED(3568433326,32,FLEN)
NAN_BOXED(1411124899,32,FLEN)
NAN_BOXED(3568433326,32,FLEN)
NAN_BOXED(1411124899,32,FLEN)
NAN_BOXED(3568433326,32,FLEN)
NAN_BOXED(1411124899,32,FLEN)
NAN_BOXED(3568433326,32,FLEN)
NAN_BOXED(1422424169,32,FLEN)
NAN_BOXED(3554549340,32,FLEN)
NAN_BOXED(1422424169,32,FLEN)
NAN_BOXED(3554549340,32,FLEN)
NAN_BOXED(1422424169,32,FLEN)
NAN_BOXED(3554549340,32,FLEN)
NAN_BOXED(1422424169,32,FLEN)
NAN_BOXED(3554549340,32,FLEN)
NAN_BOXED(1422424169,32,FLEN)
NAN_BOXED(3554549340,32,FLEN)
NAN_BOXED(1417416354,32,FLEN)
NAN_BOXED(3565287599,32,FLEN)
NAN_BOXED(1417416354,32,FLEN)
NAN_BOXED(3565287599,32,FLEN)
NAN_BOXED(1417416354,32,FLEN)
NAN_BOXED(3565287599,32,FLEN)
NAN_BOXED(1417416354,32,FLEN)
NAN_BOXED(3565287599,32,FLEN)
NAN_BOXED(1417416354,32,FLEN)
NAN_BOXED(3565287599,32,FLEN)
NAN_BOXED(1413566287,32,FLEN)
NAN_BOXED(3567212632,32,FLEN)
NAN_BOXED(1413566287,32,FLEN)
NAN_BOXED(3567212632,32,FLEN)
NAN_BOXED(1413566287,32,FLEN)
NAN_BOXED(3567212632,32,FLEN)
NAN_BOXED(1413566287,32,FLEN)
NAN_BOXED(3567212632,32,FLEN)
NAN_BOXED(1413566287,32,FLEN)
NAN_BOXED(3567212632,32,FLEN)
NAN_BOXED(1358823104,32,FLEN)
NAN_BOXED(3573481985,32,FLEN)
NAN_BOXED(1358823104,32,FLEN)
NAN_BOXED(3573481985,32,FLEN)
NAN_BOXED(1358823104,32,FLEN)
NAN_BOXED(3573481985,32,FLEN)
NAN_BOXED(1358823104,32,FLEN)
NAN_BOXED(3573481985,32,FLEN)
NAN_BOXED(1358823104,32,FLEN)
NAN_BOXED(3573481985,32,FLEN)
NAN_BOXED(1419321674,32,FLEN)
NAN_BOXED(3561864556,32,FLEN)
NAN_BOXED(1419321674,32,FLEN)
NAN_BOXED(3561864556,32,FLEN)
NAN_BOXED(1419321674,32,FLEN)
NAN_BOXED(3561864556,32,FLEN)
NAN_BOXED(1419321674,32,FLEN)
NAN_BOXED(3561864556,32,FLEN)
NAN_BOXED(1419321674,32,FLEN)
NAN_BOXED(3561864556,32,FLEN)
NAN_BOXED(1423201523,32,FLEN)
NAN_BOXED(3551439922,32,FLEN)
NAN_BOXED(1423201523,32,FLEN)
NAN_BOXED(3551439922,32,FLEN)
NAN_BOXED(1423201523,32,FLEN)
NAN_BOXED(3551439922,32,FLEN)
NAN_BOXED(1423201523,32,FLEN)
NAN_BOXED(3551439922,32,FLEN)
NAN_BOXED(1423201523,32,FLEN)
NAN_BOXED(3551439922,32,FLEN)
NAN_BOXED(1425845561,32,FLEN)
NAN_BOXED(3520377305,32,FLEN)
NAN_BOXED(1425845561,32,FLEN)
NAN_BOXED(3520377305,32,FLEN)
NAN_BOXED(1425845561,32,FLEN)
NAN_BOXED(3520377305,32,FLEN)
NAN_BOXED(1425845561,32,FLEN)
NAN_BOXED(3520377305,32,FLEN)
NAN_BOXED(1425845561,32,FLEN)
NAN_BOXED(3520377305,32,FLEN)
NAN_BOXED(1423288299,32,FLEN)
NAN_BOXED(3551092819,32,FLEN)
NAN_BOXED(1423288299,32,FLEN)
NAN_BOXED(3551092819,32,FLEN)
NAN_BOXED(1423288299,32,FLEN)
NAN_BOXED(3551092819,32,FLEN)
NAN_BOXED(1423288299,32,FLEN)
NAN_BOXED(3551092819,32,FLEN)
NAN_BOXED(1423288299,32,FLEN)
NAN_BOXED(3551092819,32,FLEN)
NAN_BOXED(1421778973,32,FLEN)
NAN_BOXED(3556949958,32,FLEN)
NAN_BOXED(1421778973,32,FLEN)
NAN_BOXED(3556949958,32,FLEN)
NAN_BOXED(1421778973,32,FLEN)
NAN_BOXED(3556949958,32,FLEN)
NAN_BOXED(1421778973,32,FLEN)
NAN_BOXED(3556949958,32,FLEN)
NAN_BOXED(1421778973,32,FLEN)
NAN_BOXED(3556949958,32,FLEN)
NAN_BOXED(1411142932,32,FLEN)
NAN_BOXED(3568424310,32,FLEN)
NAN_BOXED(1411142932,32,FLEN)
NAN_BOXED(3568424310,32,FLEN)
NAN_BOXED(1411142932,32,FLEN)
NAN_BOXED(3568424310,32,FLEN)
NAN_BOXED(1411142932,32,FLEN)
NAN_BOXED(3568424310,32,FLEN)
NAN_BOXED(1411142932,32,FLEN)
NAN_BOXED(3568424310,32,FLEN)
NAN_BOXED(1419688584,32,FLEN)
NAN_BOXED(3561130737,32,FLEN)
NAN_BOXED(1419688584,32,FLEN)
NAN_BOXED(3561130737,32,FLEN)
NAN_BOXED(1419688584,32,FLEN)
NAN_BOXED(3561130737,32,FLEN)
NAN_BOXED(1419688584,32,FLEN)
NAN_BOXED(3561130737,32,FLEN)
NAN_BOXED(1419688584,32,FLEN)
NAN_BOXED(3561130737,32,FLEN)
NAN_BOXED(1412957738,32,FLEN)
NAN_BOXED(3567516907,32,FLEN)
NAN_BOXED(1412957738,32,FLEN)
NAN_BOXED(3567516907,32,FLEN)
NAN_BOXED(1412957738,32,FLEN)
NAN_BOXED(3567516907,32,FLEN)
NAN_BOXED(1412957738,32,FLEN)
NAN_BOXED(3567516907,32,FLEN)
NAN_BOXED(1412957738,32,FLEN)
NAN_BOXED(3567516907,32,FLEN)
NAN_BOXED(1413955667,32,FLEN)
NAN_BOXED(3567017942,32,FLEN)
NAN_BOXED(1413955667,32,FLEN)
NAN_BOXED(3567017942,32,FLEN)
NAN_BOXED(1413955667,32,FLEN)
NAN_BOXED(3567017942,32,FLEN)
NAN_BOXED(1413955667,32,FLEN)
NAN_BOXED(3567017942,32,FLEN)
NAN_BOXED(1413955667,32,FLEN)
NAN_BOXED(3567017942,32,FLEN)
NAN_BOXED(1414495539,32,FLEN)
NAN_BOXED(3566748006,32,FLEN)
NAN_BOXED(1414495539,32,FLEN)
NAN_BOXED(3566748006,32,FLEN)
NAN_BOXED(1414495539,32,FLEN)
NAN_BOXED(3566748006,32,FLEN)
NAN_BOXED(1414495539,32,FLEN)
NAN_BOXED(3566748006,32,FLEN)
NAN_BOXED(1414495539,32,FLEN)
NAN_BOXED(3566748006,32,FLEN)
NAN_BOXED(1419091219,32,FLEN)
NAN_BOXED(3562325465,32,FLEN)
NAN_BOXED(1419091219,32,FLEN)
NAN_BOXED(3562325465,32,FLEN)
NAN_BOXED(1419091219,32,FLEN)
NAN_BOXED(3562325465,32,FLEN)
NAN_BOXED(1419091219,32,FLEN)
NAN_BOXED(3562325465,32,FLEN)
NAN_BOXED(1419091219,32,FLEN)
NAN_BOXED(3562325465,32,FLEN)
NAN_BOXED(1424350560,32,FLEN)
NAN_BOXED(3545306367,32,FLEN)
NAN_BOXED(1424350560,32,FLEN)
NAN_BOXED(3545306367,32,FLEN)
NAN_BOXED(1424350560,32,FLEN)
NAN_BOXED(3545306367,32,FLEN)
NAN_BOXED(1424350560,32,FLEN)
NAN_BOXED(3545306367,32,FLEN)
NAN_BOXED(1424350560,32,FLEN)
NAN_BOXED(3545306367,32,FLEN)
NAN_BOXED(1417429873,32,FLEN)
NAN_BOXED(3565280839,32,FLEN)
NAN_BOXED(1417429873,32,FLEN)
NAN_BOXED(3565280839,32,FLEN)
NAN_BOXED(1417429873,32,FLEN)
NAN_BOXED(3565280839,32,FLEN)
NAN_BOXED(1417429873,32,FLEN)
NAN_BOXED(3565280839,32,FLEN)
NAN_BOXED(1417429873,32,FLEN)
NAN_BOXED(3565280839,32,FLEN)
NAN_BOXED(1420029525,32,FLEN)
NAN_BOXED(3560448854,32,FLEN)
NAN_BOXED(1420029525,32,FLEN)
NAN_BOXED(3560448854,32,FLEN)
NAN_BOXED(1420029525,32,FLEN)
NAN_BOXED(3560448854,32,FLEN)
NAN_BOXED(1420029525,32,FLEN)
NAN_BOXED(3560448854,32,FLEN)
NAN_BOXED(1420029525,32,FLEN)
NAN_BOXED(3560448854,32,FLEN)
NAN_BOXED(1419850343,32,FLEN)
NAN_BOXED(3560807217,32,FLEN)
NAN_BOXED(1419850343,32,FLEN)
NAN_BOXED(3560807217,32,FLEN)
NAN_BOXED(1419850343,32,FLEN)
NAN_BOXED(3560807217,32,FLEN)
NAN_BOXED(1419850343,32,FLEN)
NAN_BOXED(3560807217,32,FLEN)
NAN_BOXED(1419850343,32,FLEN)
NAN_BOXED(3560807217,32,FLEN)
NAN_BOXED(1419843409,32,FLEN)
NAN_BOXED(3560821086,32,FLEN)
NAN_BOXED(1419843409,32,FLEN)
NAN_BOXED(3560821086,32,FLEN)
NAN_BOXED(1419843409,32,FLEN)
NAN_BOXED(3560821086,32,FLEN)
NAN_BOXED(1419843409,32,FLEN)
NAN_BOXED(3560821086,32,FLEN)
NAN_BOXED(1419843409,32,FLEN)
NAN_BOXED(3560821086,32,FLEN)
NAN_BOXED(1425008375,32,FLEN)
NAN_BOXED(3540043852,32,FLEN)
NAN_BOXED(1425008375,32,FLEN)
NAN_BOXED(3540043852,32,FLEN)
NAN_BOXED(1425008375,32,FLEN)
NAN_BOXED(3540043852,32,FLEN)
NAN_BOXED(1425008375,32,FLEN)
NAN_BOXED(3540043852,32,FLEN)
NAN_BOXED(1425008375,32,FLEN)
NAN_BOXED(3540043852,32,FLEN)
NAN_BOXED(1423484166,32,FLEN)
NAN_BOXED(3550309351,32,FLEN)
NAN_BOXED(1423484166,32,FLEN)
NAN_BOXED(3550309351,32,FLEN)
NAN_BOXED(1423484166,32,FLEN)
NAN_BOXED(3550309351,32,FLEN)
NAN_BOXED(1423484166,32,FLEN)
NAN_BOXED(3550309351,32,FLEN)
NAN_BOXED(1423484166,32,FLEN)
NAN_BOXED(3550309351,32,FLEN)
NAN_BOXED(1422965042,32,FLEN)
NAN_BOXED(3552385848,32,FLEN)
NAN_BOXED(1422965042,32,FLEN)
NAN_BOXED(3552385848,32,FLEN)
NAN_BOXED(1422965042,32,FLEN)
NAN_BOXED(3552385848,32,FLEN)
NAN_BOXED(1422965042,32,FLEN)
NAN_BOXED(3552385848,32,FLEN)
NAN_BOXED(1422965042,32,FLEN)
NAN_BOXED(3552385848,32,FLEN)
NAN_BOXED(1412623135,32,FLEN)
NAN_BOXED(3567684208,32,FLEN)
NAN_BOXED(1412623135,32,FLEN)
NAN_BOXED(3567684208,32,FLEN)
NAN_BOXED(1412623135,32,FLEN)
NAN_BOXED(3567684208,32,FLEN)
NAN_BOXED(1412623135,32,FLEN)
NAN_BOXED(3567684208,32,FLEN)
NAN_BOXED(1412623135,32,FLEN)
NAN_BOXED(3567684208,32,FLEN)
NAN_BOXED(1421164749,32,FLEN)
NAN_BOXED(3558178406,32,FLEN)
NAN_BOXED(1421164749,32,FLEN)
NAN_BOXED(3558178406,32,FLEN)
NAN_BOXED(1421164749,32,FLEN)
NAN_BOXED(3558178406,32,FLEN)
NAN_BOXED(1421164749,32,FLEN)
NAN_BOXED(3558178406,32,FLEN)
NAN_BOXED(1421164749,32,FLEN)
NAN_BOXED(3558178406,32,FLEN)
NAN_BOXED(1418417089,32,FLEN)
NAN_BOXED(3563673726,32,FLEN)
NAN_BOXED(1418417089,32,FLEN)
NAN_BOXED(3563673726,32,FLEN)
NAN_BOXED(1418417089,32,FLEN)
NAN_BOXED(3563673726,32,FLEN)
NAN_BOXED(1418417089,32,FLEN)
NAN_BOXED(3563673726,32,FLEN)
NAN_BOXED(1418417089,32,FLEN)
NAN_BOXED(3563673726,32,FLEN)
NAN_BOXED(1423261150,32,FLEN)
NAN_BOXED(3551201414,32,FLEN)
NAN_BOXED(1423261150,32,FLEN)
NAN_BOXED(3551201414,32,FLEN)
NAN_BOXED(1423261150,32,FLEN)
NAN_BOXED(3551201414,32,FLEN)
NAN_BOXED(1423261150,32,FLEN)
NAN_BOXED(3551201414,32,FLEN)
NAN_BOXED(1423261150,32,FLEN)
NAN_BOXED(3551201414,32,FLEN)
NAN_BOXED(1416570899,32,FLEN)
NAN_BOXED(3565710326,32,FLEN)
NAN_BOXED(1416570899,32,FLEN)
NAN_BOXED(3565710326,32,FLEN)
NAN_BOXED(1416570899,32,FLEN)
NAN_BOXED(3565710326,32,FLEN)
NAN_BOXED(1416570899,32,FLEN)
NAN_BOXED(3565710326,32,FLEN)
NAN_BOXED(1416570899,32,FLEN)
NAN_BOXED(3565710326,32,FLEN)
NAN_BOXED(1417847237,32,FLEN)
NAN_BOXED(3564813429,32,FLEN)
NAN_BOXED(1417847237,32,FLEN)
NAN_BOXED(3564813429,32,FLEN)
NAN_BOXED(1417847237,32,FLEN)
NAN_BOXED(3564813429,32,FLEN)
NAN_BOXED(1417847237,32,FLEN)
NAN_BOXED(3564813429,32,FLEN)
NAN_BOXED(1417847237,32,FLEN)
NAN_BOXED(3564813429,32,FLEN)
NAN_BOXED(1415077565,32,FLEN)
NAN_BOXED(3566456993,32,FLEN)
NAN_BOXED(1415077565,32,FLEN)
NAN_BOXED(3566456993,32,FLEN)
NAN_BOXED(1415077565,32,FLEN)
NAN_BOXED(3566456993,32,FLEN)
NAN_BOXED(1415077565,32,FLEN)
NAN_BOXED(3566456993,32,FLEN)
NAN_BOXED(1415077565,32,FLEN)
NAN_BOXED(3566456993,32,FLEN)
NAN_BOXED(1420306150,32,FLEN)
NAN_BOXED(3559895604,32,FLEN)
NAN_BOXED(1420306150,32,FLEN)
NAN_BOXED(3559895604,32,FLEN)
NAN_BOXED(1420306150,32,FLEN)
NAN_BOXED(3559895604,32,FLEN)
NAN_BOXED(1420306150,32,FLEN)
NAN_BOXED(3559895604,32,FLEN)
NAN_BOXED(1420306150,32,FLEN)
NAN_BOXED(3559895604,32,FLEN)
NAN_BOXED(1417794937,32,FLEN)
NAN_BOXED(3564918030,32,FLEN)
NAN_BOXED(1417794937,32,FLEN)
NAN_BOXED(3564918030,32,FLEN)
NAN_BOXED(1417794937,32,FLEN)
NAN_BOXED(3564918030,32,FLEN)
NAN_BOXED(1417794937,32,FLEN)
NAN_BOXED(3564918030,32,FLEN)
NAN_BOXED(1417794937,32,FLEN)
NAN_BOXED(3564918030,32,FLEN)
NAN_BOXED(1420869932,32,FLEN)
NAN_BOXED(3558768039,32,FLEN)
NAN_BOXED(1420869932,32,FLEN)
NAN_BOXED(3558768039,32,FLEN)
NAN_BOXED(1420869932,32,FLEN)
NAN_BOXED(3558768039,32,FLEN)
NAN_BOXED(1420869932,32,FLEN)
NAN_BOXED(3558768039,32,FLEN)
NAN_BOXED(1420869932,32,FLEN)
NAN_BOXED(3558768039,32,FLEN)
NAN_BOXED(1420844106,32,FLEN)
NAN_BOXED(3558819691,32,FLEN)
NAN_BOXED(1420844106,32,FLEN)
NAN_BOXED(3558819691,32,FLEN)
NAN_BOXED(1420844106,32,FLEN)
NAN_BOXED(3558819691,32,FLEN)
NAN_BOXED(1420844106,32,FLEN)
NAN_BOXED(3558819691,32,FLEN)
NAN_BOXED(1420844106,32,FLEN)
NAN_BOXED(3558819691,32,FLEN)
NAN_BOXED(1406527258,32,FLEN)
NAN_BOXED(3570042426,32,FLEN)
NAN_BOXED(1406527258,32,FLEN)
NAN_BOXED(3570042426,32,FLEN)
NAN_BOXED(1406527258,32,FLEN)
NAN_BOXED(3570042426,32,FLEN)
NAN_BOXED(1406527258,32,FLEN)
NAN_BOXED(3570042426,32,FLEN)
NAN_BOXED(1406527258,32,FLEN)
NAN_BOXED(3570042426,32,FLEN)
NAN_BOXED(1424151182,32,FLEN)
NAN_BOXED(3546901395,32,FLEN)
NAN_BOXED(1424151182,32,FLEN)
NAN_BOXED(3546901395,32,FLEN)
NAN_BOXED(1424151182,32,FLEN)
NAN_BOXED(3546901395,32,FLEN)
NAN_BOXED(1424151182,32,FLEN)
NAN_BOXED(3546901395,32,FLEN)
NAN_BOXED(1424151182,32,FLEN)
NAN_BOXED(3546901395,32,FLEN)
NAN_BOXED(1394171185,32,FLEN)
NAN_BOXED(3572290650,32,FLEN)
NAN_BOXED(1394171185,32,FLEN)
NAN_BOXED(3572290650,32,FLEN)
NAN_BOXED(1394171185,32,FLEN)
NAN_BOXED(3572290650,32,FLEN)
NAN_BOXED(1394171185,32,FLEN)
NAN_BOXED(3572290650,32,FLEN)
NAN_BOXED(1394171185,32,FLEN)
NAN_BOXED(3572290650,32,FLEN)
NAN_BOXED(1418063946,32,FLEN)
NAN_BOXED(3564380012,32,FLEN)
NAN_BOXED(1418063946,32,FLEN)
NAN_BOXED(3564380012,32,FLEN)
NAN_BOXED(1418063946,32,FLEN)
NAN_BOXED(3564380012,32,FLEN)
NAN_BOXED(1418063946,32,FLEN)
NAN_BOXED(3564380012,32,FLEN)
NAN_BOXED(1418063946,32,FLEN)
NAN_BOXED(3564380012,32,FLEN)
NAN_BOXED(1417868007,32,FLEN)
NAN_BOXED(3564771889,32,FLEN)
NAN_BOXED(1417868007,32,FLEN)
NAN_BOXED(3564771889,32,FLEN)
NAN_BOXED(1417868007,32,FLEN)
NAN_BOXED(3564771889,32,FLEN)
NAN_BOXED(1417868007,32,FLEN)
NAN_BOXED(3564771889,32,FLEN)
NAN_BOXED(1417868007,32,FLEN)
NAN_BOXED(3564771889,32,FLEN)
NAN_BOXED(1403820369,32,FLEN)
NAN_BOXED(3570719148,32,FLEN)
NAN_BOXED(1403820369,32,FLEN)
NAN_BOXED(3570719148,32,FLEN)
NAN_BOXED(1403820369,32,FLEN)
NAN_BOXED(3570719148,32,FLEN)
NAN_BOXED(1403820369,32,FLEN)
NAN_BOXED(3570719148,32,FLEN)
NAN_BOXED(1403820369,32,FLEN)
NAN_BOXED(3570719148,32,FLEN)
NAN_BOXED(1049802850,32,FLEN)
NAN_BOXED(1049802850,32,FLEN)
NAN_BOXED(1049802850,32,FLEN)
NAN_BOXED(1049802850,32,FLEN)
NAN_BOXED(1049802850,32,FLEN)
NAN_BOXED(1049802850,32,FLEN)
NAN_BOXED(1049802850,32,FLEN)
NAN_BOXED(1049802850,32,FLEN)
NAN_BOXED(1049802850,32,FLEN)
NAN_BOXED(1049802850,32,FLEN)
NAN_BOXED(1060827383,32,FLEN)
NAN_BOXED(1060827383,32,FLEN)
NAN_BOXED(1060827383,32,FLEN)
NAN_BOXED(1060827383,32,FLEN)
NAN_BOXED(1060827383,32,FLEN)
NAN_BOXED(1060827383,32,FLEN)
NAN_BOXED(1060827383,32,FLEN)
NAN_BOXED(1060827383,32,FLEN)
NAN_BOXED(1060827383,32,FLEN)
NAN_BOXED(1060827383,32,FLEN)
NAN_BOXED(1061458991,32,FLEN)
NAN_BOXED(1061458991,32,FLEN)
NAN_BOXED(1061458991,32,FLEN)
NAN_BOXED(1061458991,32,FLEN)
NAN_BOXED(1061458991,32,FLEN)
NAN_BOXED(1061458991,32,FLEN)
NAN_BOXED(1061458991,32,FLEN)
NAN_BOXED(1061458991,32,FLEN)
NAN_BOXED(1061458991,32,FLEN)
NAN_BOXED(1061458991,32,FLEN)
NAN_BOXED(1062461445,32,FLEN)
NAN_BOXED(1062461445,32,FLEN)
NAN_BOXED(1062461445,32,FLEN)
NAN_BOXED(1062461445,32,FLEN)
NAN_BOXED(1062461445,32,FLEN)
NAN_BOXED(1062461445,32,FLEN)
NAN_BOXED(1062461445,32,FLEN)
NAN_BOXED(1062461445,32,FLEN)
NAN_BOXED(1062461445,32,FLEN)
NAN_BOXED(1062461445,32,FLEN)
NAN_BOXED(1040743196,32,FLEN)
NAN_BOXED(1040743196,32,FLEN)
NAN_BOXED(1040743196,32,FLEN)
NAN_BOXED(1040743196,32,FLEN)
NAN_BOXED(1040743196,32,FLEN)
NAN_BOXED(1040743196,32,FLEN)
NAN_BOXED(1040743196,32,FLEN)
NAN_BOXED(1040743196,32,FLEN)
NAN_BOXED(1040743196,32,FLEN)
NAN_BOXED(1040743196,32,FLEN)
NAN_BOXED(1061623329,32,FLEN)
NAN_BOXED(1061623329,32,FLEN)
NAN_BOXED(1061623329,32,FLEN)
NAN_BOXED(1061623329,32,FLEN)
NAN_BOXED(1061623329,32,FLEN)
NAN_BOXED(1061623329,32,FLEN)
NAN_BOXED(1061623329,32,FLEN)
NAN_BOXED(1061623329,32,FLEN)
NAN_BOXED(1061623329,32,FLEN)
NAN_BOXED(1061623329,32,FLEN)
NAN_BOXED(1050029231,32,FLEN)
NAN_BOXED(1050029231,32,FLEN)
NAN_BOXED(1050029231,32,FLEN)
NAN_BOXED(1050029231,32,FLEN)
NAN_BOXED(1050029231,32,FLEN)
NAN_BOXED(1050029231,32,FLEN)
NAN_BOXED(1050029231,32,FLEN)
NAN_BOXED(1050029231,32,FLEN)
NAN_BOXED(1050029231,32,FLEN)
NAN_BOXED(1050029231,32,FLEN)
NAN_BOXED(1064840932,32,FLEN)
NAN_BOXED(1064840932,32,FLEN)
NAN_BOXED(1064840932,32,FLEN)
NAN_BOXED(1064840932,32,FLEN)
NAN_BOXED(1064840932,32,FLEN)
NAN_BOXED(1064840932,32,FLEN)
NAN_BOXED(1064840932,32,FLEN)
NAN_BOXED(1064840932,32,FLEN)
NAN_BOXED(1064840932,32,FLEN)
NAN_BOXED(1064840932,32,FLEN)
NAN_BOXED(1052855798,32,FLEN)
NAN_BOXED(1052855798,32,FLEN)
NAN_BOXED(1052855798,32,FLEN)
NAN_BOXED(1052855798,32,FLEN)
NAN_BOXED(1052855798,32,FLEN)
NAN_BOXED(1052855798,32,FLEN)
NAN_BOXED(1052855798,32,FLEN)
NAN_BOXED(1052855798,32,FLEN)
NAN_BOXED(1052855798,32,FLEN)
NAN_BOXED(1052855798,32,FLEN)
NAN_BOXED(1058109390,32,FLEN)
NAN_BOXED(1058109390,32,FLEN)
NAN_BOXED(1058109390,32,FLEN)
NAN_BOXED(1058109390,32,FLEN)
NAN_BOXED(1058109390,32,FLEN)
NAN_BOXED(1058109390,32,FLEN)
NAN_BOXED(1058109390,32,FLEN)
NAN_BOXED(1058109390,32,FLEN)
NAN_BOXED(1058109390,32,FLEN)
NAN_BOXED(1058109390,32,FLEN)
NAN_BOXED(1046199543,32,FLEN)
NAN_BOXED(1046199543,32,FLEN)
NAN_BOXED(1046199543,32,FLEN)
NAN_BOXED(1046199543,32,FLEN)
NAN_BOXED(1046199543,32,FLEN)
NAN_BOXED(1046199543,32,FLEN)
NAN_BOXED(1046199543,32,FLEN)
NAN_BOXED(1046199543,32,FLEN)
NAN_BOXED(1046199543,32,FLEN)
NAN_BOXED(1046199543,32,FLEN)
NAN_BOXED(1052740557,32,FLEN)
NAN_BOXED(1052740557,32,FLEN)
NAN_BOXED(1052740557,32,FLEN)
NAN_BOXED(1052740557,32,FLEN)
NAN_BOXED(1052740557,32,FLEN)
NAN_BOXED(1052740557,32,FLEN)
NAN_BOXED(1052740557,32,FLEN)
NAN_BOXED(1052740557,32,FLEN)
NAN_BOXED(1052740557,32,FLEN)
NAN_BOXED(1052740557,32,FLEN)
NAN_BOXED(1021101721,32,FLEN)
NAN_BOXED(1021101721,32,FLEN)
NAN_BOXED(1021101721,32,FLEN)
NAN_BOXED(1021101721,32,FLEN)
NAN_BOXED(1021101721,32,FLEN)
NAN_BOXED(1021101721,32,FLEN)
NAN_BOXED(1021101721,32,FLEN)
NAN_BOXED(1021101721,32,FLEN)
NAN_BOXED(1021101721,32,FLEN)
NAN_BOXED(1021101721,32,FLEN)
NAN_BOXED(1035067656,32,FLEN)
NAN_BOXED(1035067656,32,FLEN)
NAN_BOXED(1035067656,32,FLEN)
NAN_BOXED(1035067656,32,FLEN)
NAN_BOXED(1035067656,32,FLEN)
NAN_BOXED(1035067656,32,FLEN)
NAN_BOXED(1035067656,32,FLEN)
NAN_BOXED(1035067656,32,FLEN)
NAN_BOXED(1035067656,32,FLEN)
NAN_BOXED(1035067656,32,FLEN)
NAN_BOXED(1053399117,32,FLEN)
NAN_BOXED(1053399117,32,FLEN)
NAN_BOXED(1053399117,32,FLEN)
NAN_BOXED(1053399117,32,FLEN)
NAN_BOXED(1053399117,32,FLEN)
NAN_BOXED(1053399117,32,FLEN)
NAN_BOXED(1053399117,32,FLEN)
NAN_BOXED(1053399117,32,FLEN)
NAN_BOXED(1053399117,32,FLEN)
NAN_BOXED(1053399117,32,FLEN)
NAN_BOXED(1056072317,32,FLEN)
NAN_BOXED(1056072317,32,FLEN)
NAN_BOXED(1056072317,32,FLEN)
NAN_BOXED(1056072317,32,FLEN)
NAN_BOXED(1056072317,32,FLEN)
NAN_BOXED(1056072317,32,FLEN)
NAN_BOXED(1056072317,32,FLEN)
NAN_BOXED(1056072317,32,FLEN)
NAN_BOXED(1056072317,32,FLEN)
NAN_BOXED(1056072317,32,FLEN)
NAN_BOXED(1063036316,32,FLEN)
NAN_BOXED(1063036316,32,FLEN)
NAN_BOXED(1063036316,32,FLEN)
NAN_BOXED(1063036316,32,FLEN)
NAN_BOXED(1063036316,32,FLEN)
NAN_BOXED(1063036316,32,FLEN)
NAN_BOXED(1063036316,32,FLEN)
NAN_BOXED(1063036316,32,FLEN)
NAN_BOXED(1063036316,32,FLEN)
NAN_BOXED(1063036316,32,FLEN)
NAN_BOXED(1059295134,32,FLEN)
NAN_BOXED(1059295134,32,FLEN)
NAN_BOXED(1059295134,32,FLEN)
NAN_BOXED(1059295134,32,FLEN)
NAN_BOXED(1059295134,32,FLEN)
NAN_BOXED(1059295134,32,FLEN)
NAN_BOXED(1059295134,32,FLEN)
NAN_BOXED(1059295134,32,FLEN)
NAN_BOXED(1059295134,32,FLEN)
NAN_BOXED(1059295134,32,FLEN)
NAN_BOXED(1061318402,32,FLEN)
NAN_BOXED(1061318402,32,FLEN)
NAN_BOXED(1061318402,32,FLEN)
NAN_BOXED(1061318402,32,FLEN)
NAN_BOXED(1061318402,32,FLEN)
NAN_BOXED(1061318402,32,FLEN)
NAN_BOXED(1061318402,32,FLEN)
NAN_BOXED(1061318402,32,FLEN)
NAN_BOXED(1061318402,32,FLEN)
NAN_BOXED(1061318402,32,FLEN)
NAN_BOXED(1049633738,32,FLEN)
NAN_BOXED(1049633738,32,FLEN)
NAN_BOXED(1049633738,32,FLEN)
NAN_BOXED(1049633738,32,FLEN)
NAN_BOXED(1049633738,32,FLEN)
NAN_BOXED(1049633738,32,FLEN)
NAN_BOXED(1049633738,32,FLEN)
NAN_BOXED(1049633738,32,FLEN)
NAN_BOXED(1049633738,32,FLEN)
NAN_BOXED(1049633738,32,FLEN)
NAN_BOXED(1063568364,32,FLEN)
NAN_BOXED(1063568364,32,FLEN)
NAN_BOXED(1063568364,32,FLEN)
NAN_BOXED(1063568364,32,FLEN)
NAN_BOXED(1063568364,32,FLEN)
NAN_BOXED(1063568364,32,FLEN)
NAN_BOXED(1063568364,32,FLEN)
NAN_BOXED(1063568364,32,FLEN)
NAN_BOXED(1063568364,32,FLEN)
NAN_BOXED(1063568364,32,FLEN)
NAN_BOXED(1057092760,32,FLEN)
NAN_BOXED(1057092760,32,FLEN)
NAN_BOXED(1057092760,32,FLEN)
NAN_BOXED(1057092760,32,FLEN)
NAN_BOXED(1057092760,32,FLEN)
NAN_BOXED(1057092760,32,FLEN)
NAN_BOXED(1057092760,32,FLEN)
NAN_BOXED(1057092760,32,FLEN)
NAN_BOXED(1057092760,32,FLEN)
NAN_BOXED(1057092760,32,FLEN)
NAN_BOXED(1062219881,32,FLEN)
NAN_BOXED(1062219881,32,FLEN)
NAN_BOXED(1062219881,32,FLEN)
NAN_BOXED(1062219881,32,FLEN)
NAN_BOXED(1062219881,32,FLEN)
NAN_BOXED(1062219881,32,FLEN)
NAN_BOXED(1062219881,32,FLEN)
NAN_BOXED(1062219881,32,FLEN)
NAN_BOXED(1062219881,32,FLEN)
NAN_BOXED(1062219881,32,FLEN)
NAN_BOXED(1053692595,32,FLEN)
NAN_BOXED(1053692595,32,FLEN)
NAN_BOXED(1053692595,32,FLEN)
NAN_BOXED(1053692595,32,FLEN)
NAN_BOXED(1053692595,32,FLEN)
NAN_BOXED(1053692595,32,FLEN)
NAN_BOXED(1053692595,32,FLEN)
NAN_BOXED(1053692595,32,FLEN)
NAN_BOXED(1053692595,32,FLEN)
NAN_BOXED(1053692595,32,FLEN)
NAN_BOXED(1061719979,32,FLEN)
NAN_BOXED(1061719979,32,FLEN)
NAN_BOXED(1061719979,32,FLEN)
NAN_BOXED(1061719979,32,FLEN)
NAN_BOXED(1061719979,32,FLEN)
NAN_BOXED(1061719979,32,FLEN)
NAN_BOXED(1061719979,32,FLEN)
NAN_BOXED(1061719979,32,FLEN)
NAN_BOXED(1061719979,32,FLEN)
NAN_BOXED(1061719979,32,FLEN)
NAN_BOXED(1050122067,32,FLEN)
NAN_BOXED(1050122067,32,FLEN)
NAN_BOXED(1050122067,32,FLEN)
NAN_BOXED(1050122067,32,FLEN)
NAN_BOXED(1050122067,32,FLEN)
NAN_BOXED(1050122067,32,FLEN)
NAN_BOXED(1050122067,32,FLEN)
NAN_BOXED(1050122067,32,FLEN)
NAN_BOXED(1050122067,32,FLEN)
NAN_BOXED(1050122067,32,FLEN)
NAN_BOXED(1024652606,32,FLEN)
NAN_BOXED(1024652606,32,FLEN)
NAN_BOXED(1024652606,32,FLEN)
NAN_BOXED(1024652606,32,FLEN)
NAN_BOXED(1024652606,32,FLEN)
NAN_BOXED(1024652606,32,FLEN)
NAN_BOXED(1024652606,32,FLEN)
NAN_BOXED(1024652606,32,FLEN)
NAN_BOXED(1024652606,32,FLEN)
NAN_BOXED(1024652606,32,FLEN)
NAN_BOXED(1059607973,32,FLEN)
NAN_BOXED(1059607973,32,FLEN)
NAN_BOXED(1059607973,32,FLEN)
NAN_BOXED(1059607973,32,FLEN)
NAN_BOXED(1059607973,32,FLEN)
NAN_BOXED(1059607973,32,FLEN)
NAN_BOXED(1059607973,32,FLEN)
NAN_BOXED(1059607973,32,FLEN)
NAN_BOXED(1059607973,32,FLEN)
NAN_BOXED(1059607973,32,FLEN)
NAN_BOXED(1063372378,32,FLEN)
NAN_BOXED(1063372378,32,FLEN)
NAN_BOXED(1063372378,32,FLEN)
NAN_BOXED(1063372378,32,FLEN)
NAN_BOXED(1063372378,32,FLEN)
NAN_BOXED(1063372378,32,FLEN)
NAN_BOXED(1063372378,32,FLEN)
NAN_BOXED(1063372378,32,FLEN)
NAN_BOXED(1063372378,32,FLEN)
NAN_BOXED(1063372378,32,FLEN)
NAN_BOXED(1063755507,32,FLEN)
NAN_BOXED(1063755507,32,FLEN)
NAN_BOXED(1063755507,32,FLEN)
NAN_BOXED(1063755507,32,FLEN)
NAN_BOXED(1063755507,32,FLEN)
NAN_BOXED(1063755507,32,FLEN)
NAN_BOXED(1063755507,32,FLEN)
NAN_BOXED(1063755507,32,FLEN)
NAN_BOXED(1063755507,32,FLEN)
NAN_BOXED(1063755507,32,FLEN)
NAN_BOXED(1057048110,32,FLEN)
NAN_BOXED(1057048110,32,FLEN)
NAN_BOXED(1057048110,32,FLEN)
NAN_BOXED(1057048110,32,FLEN)
NAN_BOXED(1057048110,32,FLEN)
NAN_BOXED(1057048110,32,FLEN)
NAN_BOXED(1057048110,32,FLEN)
NAN_BOXED(1057048110,32,FLEN)
NAN_BOXED(1057048110,32,FLEN)
NAN_BOXED(1057048110,32,FLEN)
NAN_BOXED(1062524618,32,FLEN)
NAN_BOXED(1062524618,32,FLEN)
NAN_BOXED(1062524618,32,FLEN)
NAN_BOXED(1062524618,32,FLEN)
NAN_BOXED(1062524618,32,FLEN)
NAN_BOXED(1062524618,32,FLEN)
NAN_BOXED(1062524618,32,FLEN)
NAN_BOXED(1062524618,32,FLEN)
NAN_BOXED(1062524618,32,FLEN)
NAN_BOXED(1062524618,32,FLEN)
NAN_BOXED(1043868313,32,FLEN)
NAN_BOXED(1043868313,32,FLEN)
NAN_BOXED(1043868313,32,FLEN)
NAN_BOXED(1043868313,32,FLEN)
NAN_BOXED(1043868313,32,FLEN)
NAN_BOXED(1043868313,32,FLEN)
NAN_BOXED(1043868313,32,FLEN)
NAN_BOXED(1043868313,32,FLEN)
NAN_BOXED(1043868313,32,FLEN)
NAN_BOXED(1043868313,32,FLEN)
NAN_BOXED(1054282510,32,FLEN)
NAN_BOXED(1054282510,32,FLEN)
NAN_BOXED(1054282510,32,FLEN)
NAN_BOXED(1054282510,32,FLEN)
NAN_BOXED(1054282510,32,FLEN)
NAN_BOXED(1054282510,32,FLEN)
NAN_BOXED(1054282510,32,FLEN)
NAN_BOXED(1054282510,32,FLEN)
NAN_BOXED(1054282510,32,FLEN)
NAN_BOXED(1054282510,32,FLEN)
NAN_BOXED(1049752584,32,FLEN)
NAN_BOXED(1049752584,32,FLEN)
NAN_BOXED(1049752584,32,FLEN)
NAN_BOXED(1049752584,32,FLEN)
NAN_BOXED(1049752584,32,FLEN)
NAN_BOXED(1049752584,32,FLEN)
NAN_BOXED(1049752584,32,FLEN)
NAN_BOXED(1049752584,32,FLEN)
NAN_BOXED(1049752584,32,FLEN)
NAN_BOXED(1049752584,32,FLEN)
NAN_BOXED(1053823289,32,FLEN)
NAN_BOXED(1053823289,32,FLEN)
NAN_BOXED(1053823289,32,FLEN)
NAN_BOXED(1053823289,32,FLEN)
NAN_BOXED(1053823289,32,FLEN)
NAN_BOXED(1053823289,32,FLEN)
NAN_BOXED(1053823289,32,FLEN)
NAN_BOXED(1053823289,32,FLEN)
NAN_BOXED(1053823289,32,FLEN)
NAN_BOXED(1053823289,32,FLEN)
NAN_BOXED(1001895806,32,FLEN)
NAN_BOXED(1001895806,32,FLEN)
NAN_BOXED(1001895806,32,FLEN)
NAN_BOXED(1001895806,32,FLEN)
NAN_BOXED(1001895806,32,FLEN)
NAN_BOXED(1001895806,32,FLEN)
NAN_BOXED(1001895806,32,FLEN)
NAN_BOXED(1001895806,32,FLEN)
NAN_BOXED(1001895806,32,FLEN)
NAN_BOXED(1001895806,32,FLEN)
NAN_BOXED(1045392173,32,FLEN)
NAN_BOXED(1045392173,32,FLEN)
NAN_BOXED(1045392173,32,FLEN)
NAN_BOXED(1045392173,32,FLEN)
NAN_BOXED(1045392173,32,FLEN)
NAN_BOXED(1045392173,32,FLEN)
NAN_BOXED(1045392173,32,FLEN)
NAN_BOXED(1045392173,32,FLEN)
NAN_BOXED(1045392173,32,FLEN)
NAN_BOXED(1045392173,32,FLEN)
NAN_BOXED(1059991646,32,FLEN)
NAN_BOXED(1059991646,32,FLEN)
NAN_BOXED(1059991646,32,FLEN)
NAN_BOXED(1059991646,32,FLEN)
NAN_BOXED(1059991646,32,FLEN)
NAN_BOXED(1059991646,32,FLEN)
NAN_BOXED(1059991646,32,FLEN)
NAN_BOXED(1059991646,32,FLEN)
NAN_BOXED(1059991646,32,FLEN)
NAN_BOXED(1059991646,32,FLEN)
NAN_BOXED(1054271738,32,FLEN)
NAN_BOXED(1054271738,32,FLEN)
NAN_BOXED(1054271738,32,FLEN)
NAN_BOXED(1054271738,32,FLEN)
NAN_BOXED(1054271738,32,FLEN)
NAN_BOXED(1054271738,32,FLEN)
NAN_BOXED(1054271738,32,FLEN)
NAN_BOXED(1054271738,32,FLEN)
NAN_BOXED(1054271738,32,FLEN)
NAN_BOXED(1054271738,32,FLEN)
NAN_BOXED(1058643527,32,FLEN)
NAN_BOXED(1058643527,32,FLEN)
NAN_BOXED(1058643527,32,FLEN)
NAN_BOXED(1058643527,32,FLEN)
NAN_BOXED(1058643527,32,FLEN)
NAN_BOXED(1058643527,32,FLEN)
NAN_BOXED(1058643527,32,FLEN)
NAN_BOXED(1058643527,32,FLEN)
NAN_BOXED(1058643527,32,FLEN)
NAN_BOXED(1058643527,32,FLEN)
NAN_BOXED(1048001512,32,FLEN)
NAN_BOXED(1048001512,32,FLEN)
NAN_BOXED(1048001512,32,FLEN)
NAN_BOXED(1048001512,32,FLEN)
NAN_BOXED(1048001512,32,FLEN)
NAN_BOXED(1048001512,32,FLEN)
NAN_BOXED(1048001512,32,FLEN)
NAN_BOXED(1048001512,32,FLEN)
NAN_BOXED(1048001512,32,FLEN)
NAN_BOXED(1048001512,32,FLEN)
NAN_BOXED(1063098958,32,FLEN)
NAN_BOXED(1063098958,32,FLEN)
NAN_BOXED(1063098958,32,FLEN)
NAN_BOXED(1063098958,32,FLEN)
NAN_BOXED(1063098958,32,FLEN)
NAN_BOXED(1063098958,32,FLEN)
NAN_BOXED(1063098958,32,FLEN)
NAN_BOXED(1063098958,32,FLEN)
NAN_BOXED(1042820401,32,FLEN)
NAN_BOXED(1042820401,32,FLEN)
NAN_BOXED(1047751897,32,FLEN)
NAN_BOXED(1047751897,32,FLEN)
NAN_BOXED(1047751897,32,FLEN)
NAN_BOXED(1047751897,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 48*((SIGALIGN)/4),4,0xdeadbeef


signature_x9_0:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x9_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x9_2:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x9_3:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x9_4:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x9_5:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x9_6:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x9_7:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x9_8:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x9_9:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x9_10:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x9_11:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x9_12:
    .fill 254*((SIGALIGN)/4),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*XLEN/32,4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

RVMODEL_DATA_END
