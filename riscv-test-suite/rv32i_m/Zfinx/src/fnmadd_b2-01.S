
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.9.0
// timestamp : Fri Oct  7 12:45:21 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /home/reg/tools/riscv-ctg/sample_cgfs/dataset.cgf \
//                  --cgf /home/reg/tools/riscv-ctg/sample_cgfs/sample_cgfs_fext/RV32Zfinx/fnmadd.s.cgf \
 \
//                  -- xlen 32  \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fnmadd.s instruction of the RISC-V RV32_Zfinx,RV32_Zdinx,RV64_Zfinx,RV64_Zdinx extension for the fnmadd_b2 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32I_Zfinx,RV32I_Zdinx,RV64I_Zfinx,RV64I_Zdinx")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*Zfinx.*);def TEST_CASE_1=True;",fnmadd_b2)

RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_0:
// rs1 == rd != rs2 and rs1 == rd != rs3 and rs3 != rs2, rs1==x31, rs2==x30, rs3==x29, rd==x31,fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x85 and fm2 == 0x2dc2d2 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x31; op2:x30; op3:x29; dest:x31; op1val:0x0; op2val:0x42adc2d2;
op3val:0x3f; valaddr_reg:x3; val_offset:0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x31, x30, x29, dyn, 0, 0, x3, 0*FLEN/8, x4, x1, x2)

inst_1:
// rs1 == rs2 != rs3 and rs1 == rs2 != rd and rd != rs3, rs1==x29, rs2==x29, rs3==x31, rd==x30,fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x068650 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000005 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x29; op2:x29; op3:x31; dest:x30; op1val:0x0; op2val:0x0;
op3val:0x5; valaddr_reg:x3; val_offset:3*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x30, x29, x29, x31, dyn, 0, 0, x3, 3*FLEN/8, x4, x1, x2)

inst_2:
// rs1 != rs2 and rs1 != rd and rs1 != rs3 and rs2 != rs3 and rs2 != rd and rs3 != rd, rs1==x30, rs2==x31, rs3==x28, rd==x29,fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x83 and fm2 == 0x2827e4 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000013 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x31; op3:x28; dest:x29; op1val:0x0; op2val:0x41a827e4;
op3val:0x13; valaddr_reg:x3; val_offset:6*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x29, x30, x31, x28, dyn, 0, 0, x3, 6*FLEN/8, x4, x1, x2)

inst_3:
// rs1 == rd == rs3 != rs2, rs1==x27, rs2==x28, rs3==x27, rd==x27,fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x85 and fm2 == 0x7c3bd5 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000062 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x27; op2:x28; op3:x27; dest:x27; op1val:0x0; op2val:0x42fc3bd5;
op3val:0x0; valaddr_reg:x3; val_offset:9*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x27, x27, x28, x27, dyn, 0, 0, x3, 9*FLEN/8, x4, x1, x2)

inst_4:
// rs2 == rd != rs1 and rs2 == rd != rs3 and rs3 != rs1, rs1==x28, rs2==x26, rs3==x30, rd==x26,fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x84 and fm2 == 0x0c213e and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000029 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x28; op2:x26; op3:x30; dest:x26; op1val:0x0; op2val:0x420c213e;
op3val:0x29; valaddr_reg:x3; val_offset:12*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x26, x28, x26, x30, dyn, 0, 0, x3, 12*FLEN/8, x4, x1, x2)

inst_5:
// rs1 == rs2 == rs3 == rd, rs1==x25, rs2==x25, rs3==x25, rd==x25,fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x068650 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000023 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x25; op2:x25; op3:x25; dest:x25; op1val:0x0; op2val:0x0;
op3val:0x0; valaddr_reg:x3; val_offset:15*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x25, x25, x25, x25, dyn, 0, 0, x3, 15*FLEN/8, x4, x1, x2)

inst_6:
// rs1 == rs3 != rs2 and rs1 == rs3 != rd and rd != rs2, rs1==x26, rs2==x27, rs3==x26, rd==x28,fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x84 and fm2 == 0x54ff53 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00001a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x26; op2:x27; op3:x26; dest:x28; op1val:0x0; op2val:0xc254ff53;
op3val:0x0; valaddr_reg:x3; val_offset:18*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x28, x26, x27, x26, dyn, 0, 0, x3, 18*FLEN/8, x4, x1, x2)

inst_7:
// rs2 == rs3 != rs1 and rs2 == rs3 != rd and rd != rs1, rs1==x23, rs2==x22, rs3==x22, rd==x24,fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x85 and fm2 == 0x255a6d and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000045 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x23; op2:x22; op3:x22; dest:x24; op1val:0x0; op2val:0xc2a55a6d;
op3val:0xc2a55a6d; valaddr_reg:x3; val_offset:21*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x24, x23, x22, x22, dyn, 0, 0, x3, 21*FLEN/8, x4, x1, x2)

inst_8:
// rd == rs2 == rs3 != rs1, rs1==x24, rs2==x23, rs3==x23, rd==x23,fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x87 and fm2 == 0x21d998 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000019 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x24; op2:x23; op3:x23; dest:x23; op1val:0x0; op2val:0xc3a1d998;
op3val:0xc3a1d998; valaddr_reg:x3; val_offset:24*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x23, x24, x23, x23, dyn, 0, 0, x3, 24*FLEN/8, x4, x1, x2)

inst_9:
// rs1 == rs2 == rd != rs3, rs1==x21, rs2==x21, rs3==x24, rd==x21,fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x88 and fm2 == 0x1596af and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000055 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x21; op2:x21; op3:x24; dest:x21; op1val:0x0; op2val:0x0;
op3val:0x55; valaddr_reg:x3; val_offset:27*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x21, x21, x21, x24, dyn, 0, 0, x3, 27*FLEN/8, x4, x1, x2)

inst_10:
// rs3 == rd != rs1 and rs3 == rd != rs2 and rs2 != rs1, rs1==x22, rs2==x24, rs3==x20, rd==x20,fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x89 and fm2 == 0x29bb76 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000037 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x22; op2:x24; op3:x20; dest:x20; op1val:0x0; op2val:0xc4a9bb76;
op3val:0x37; valaddr_reg:x3; val_offset:30*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x20, x22, x24, x20, dyn, 0, 0, x3, 30*FLEN/8, x4, x1, x2)

inst_11:
// rs1 == rs2 == rs3 != rd, rs1==x19, rs2==x19, rs3==x19, rd==x22,fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x8a and fm2 == 0x3250b3 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00000c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x19; op2:x19; op3:x19; dest:x22; op1val:0x0; op2val:0x0;
op3val:0x0; valaddr_reg:x3; val_offset:33*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x22, x19, x19, x19, dyn, 0, 0, x3, 33*FLEN/8, x4, x1, x2)

inst_12:
// rs1==x20, rs2==x18, rs3==x21, rd==x19,fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x8b and fm2 == 0x310b99 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000035 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x20; op2:x18; op3:x21; dest:x19; op1val:0x0; op2val:0xc5b10b99;
op3val:0x35; valaddr_reg:x3; val_offset:36*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x19, x20, x18, x21, dyn, 0, 0, x3, 36*FLEN/8, x4, x1, x2)

inst_13:
// rs1==x17, rs2==x20, rs3==x16, rd==x18,fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x8c and fm2 == 0x321e41 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000039 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x17; op2:x20; op3:x16; dest:x18; op1val:0x0; op2val:0xc6321e41;
op3val:0x39; valaddr_reg:x3; val_offset:39*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x18, x17, x20, x16, dyn, 0, 0, x3, 39*FLEN/8, x4, x1, x2)

inst_14:
// rs1==x18, rs2==x16, rs3==x15, rd==x17,fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x8d and fm2 == 0x324de5 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000061 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x18; op2:x16; op3:x15; dest:x17; op1val:0x0; op2val:0xc6b24de5;
op3val:0x61; valaddr_reg:x3; val_offset:42*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x17, x18, x16, x15, dyn, 0, 0, x3, 42*FLEN/8, x4, x1, x2)

inst_15:
// rs1==x15, rs2==x17, rs3==x18, rd==x16,fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x8e and fm2 == 0x32dfa2 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00005a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x15; op2:x17; op3:x18; dest:x16; op1val:0x0; op2val:0xc732dfa2;
op3val:0x5a; valaddr_reg:x3; val_offset:45*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x16, x15, x17, x18, dyn, 0, 0, x3, 45*FLEN/8, x4, x1, x2)

inst_16:
// rs1==x16, rs2==x14, rs3==x17, rd==x15,fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x8f and fm2 == 0x3354a4 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00000d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x16; op2:x14; op3:x17; dest:x15; op1val:0x0; op2val:0xc7b354a4;
op3val:0xd; valaddr_reg:x3; val_offset:48*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x15, x16, x14, x17, dyn, 0, 0, x3, 48*FLEN/8, x4, x1, x2)

inst_17:
// rs1==x13, rs2==x15, rs3==x12, rd==x14,fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x90 and fm2 == 0x334320 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00004c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x13; op2:x15; op3:x12; dest:x14; op1val:0x0; op2val:0xc8334320;
op3val:0x4c; valaddr_reg:x3; val_offset:51*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x14, x13, x15, x12, dyn, 0, 0, x3, 51*FLEN/8, x4, x1, x2)

inst_18:
// rs1==x14, rs2==x12, rs3==x11, rd==x13,fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x91 and fm2 == 0x334f09 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000054 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x14; op2:x12; op3:x11; dest:x13; op1val:0x0; op2val:0xc8b34f09;
op3val:0x54; valaddr_reg:x3; val_offset:54*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x13, x14, x12, x11, dyn, 0, 0, x3, 54*FLEN/8, x4, x1, x2)

inst_19:
// rs1==x11, rs2==x13, rs3==x14, rd==x12,fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x92 and fm2 == 0x33583b and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x11; op2:x13; op3:x14; dest:x12; op1val:0x0; op2val:0xc933583b;
op3val:0x3f; valaddr_reg:x3; val_offset:57*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x12, x11, x13, x14, dyn, 0, 0, x3, 57*FLEN/8, x4, x1, x2)

inst_20:
// rs1==x12, rs2==x10, rs3==x13, rd==x11,fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x93 and fm2 == 0x335adc and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000042 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x12; op2:x10; op3:x13; dest:x11; op1val:0x0; op2val:0xc9b35adc;
op3val:0x42; valaddr_reg:x3; val_offset:60*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x11, x12, x10, x13, dyn, 0, 0, x3, 60*FLEN/8, x4, x1, x2)
RVTEST_VALBASEUPD(x13,test_dataset_1)

inst_21:
// rs1==x9, rs2==x11, rs3==x8, rd==x10,fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x94 and fm2 == 0x335bf4 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000052 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x9; op2:x11; op3:x8; dest:x10; op1val:0x0; op2val:0xca335bf4;
op3val:0x52; valaddr_reg:x13; val_offset:0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x10, x9, x11, x8, dyn, 0, 0, x13, 0*FLEN/8, x14, x1, x2)

inst_22:
// rs1==x10, rs2==x8, rs3==x7, rd==x9,fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x95 and fm2 == 0x335d66 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000020 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x10; op2:x8; op3:x7; dest:x9; op1val:0x0; op2val:0xcab35d66;
op3val:0x20; valaddr_reg:x13; val_offset:3*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x9, x10, x8, x7, dyn, 0, 0, x13, 3*FLEN/8, x14, x1, x12)
RVTEST_SIGBASE(x11,signature_x11_0)

inst_23:
// rs1==x7, rs2==x9, rs3==x10, rd==x8,fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x84 and fm2 == 0x60352f and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000027 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x7; op2:x9; op3:x10; dest:x8; op1val:0x0; op2val:0x4260352f;
op3val:0x27; valaddr_reg:x13; val_offset:6*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x8, x7, x9, x10, dyn, 0, 0, x13, 6*FLEN/8, x14, x11, x12)

inst_24:
// rs1==x8, rs2==x6, rs3==x9, rd==x7,fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x85 and fm2 == 0x5a9a41 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00004c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x8; op2:x6; op3:x9; dest:x7; op1val:0x0; op2val:0x42da9a41;
op3val:0x4c; valaddr_reg:x13; val_offset:9*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x7, x8, x6, x9, dyn, 0, 0, x13, 9*FLEN/8, x14, x11, x12)

inst_25:
// rs1==x5, rs2==x7, rs3==x4, rd==x6,fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x83 and fm2 == 0x335dc0 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00000c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x5; op2:x7; op3:x4; dest:x6; op1val:0x0; op2val:0x41b35dc0;
op3val:0xc; valaddr_reg:x13; val_offset:12*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x6, x5, x7, x4, dyn, 0, 0, x13, 12*FLEN/8, x14, x11, x12)

inst_26:
// rs1==x6, rs2==x4, rs3==x3, rd==x5,fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x84 and fm2 == 0x00eb62 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x6; op2:x4; op3:x3; dest:x5; op1val:0x0; op2val:0x4200eb62;
op3val:0xf; valaddr_reg:x13; val_offset:15*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x5, x6, x4, x3, dyn, 0, 0, x13, 15*FLEN/8, x14, x11, x12)

inst_27:
// rs1==x3, rs2==x5, rs3==x6, rd==x4,fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x85 and fm2 == 0x1cf208 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000028 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x3; op2:x5; op3:x6; dest:x4; op1val:0x0; op2val:0x429cf208;
op3val:0x28; valaddr_reg:x13; val_offset:18*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x4, x3, x5, x6, dyn, 0, 0, x13, 18*FLEN/8, x14, x11, x12)

inst_28:
// rs1==x4, rs2==x2, rs3==x5, rd==x3,fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x85 and fm2 == 0x6302a6 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000031 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x4; op2:x2; op3:x5; dest:x3; op1val:0x0; op2val:0x42e302a6;
op3val:0x31; valaddr_reg:x13; val_offset:21*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x3, x4, x2, x5, dyn, 0, 0, x13, 21*FLEN/8, x14, x11, x12)

inst_29:
// rs1==x1, rs2==x3, rs3==x0, rd==x2,fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x86 and fm2 == 0x02521d and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00001d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x1; op2:x3; op3:x0; dest:x2; op1val:0x0; op2val:0x4302521d;
op3val:0x0; valaddr_reg:x13; val_offset:24*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x2, x1, x3, x0, dyn, 0, 0, x13, 24*FLEN/8, x14, x11, x12)

inst_30:
// rs1==x2,fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x87 and fm2 == 0x0fa212 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00004d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x2; op2:x30; op3:x29; dest:x31; op1val:0x0; op2val:0x438fa212;
op3val:0x4d; valaddr_reg:x13; val_offset:27*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x2, x30, x29, dyn, 0, 0, x13, 27*FLEN/8, x14, x11, x12)

inst_31:
// rs1==x0,fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x87 and fm2 == 0x726cb5 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00005a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x0; op2:x30; op3:x29; dest:x31; op1val:0x0; op2val:0x43f26cb5;
op3val:0x5a; valaddr_reg:x13; val_offset:30*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x0, x30, x29, dyn, 0, 0, x13, 30*FLEN/8, x14, x11, x12)

inst_32:
// rs2==x1,fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x88 and fm2 == 0x3c1fd3 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000019 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x1; op3:x29; dest:x31; op1val:0x0; op2val:0x443c1fd3;
op3val:0x19; valaddr_reg:x13; val_offset:33*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x1, x29, dyn, 0, 0, x13, 33*FLEN/8, x14, x11, x12)

inst_33:
// rs2==x0,fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x89 and fm2 == 0x33e446 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x0; op3:x29; dest:x31; op1val:0x0; op2val:0x0;
op3val:0x3; valaddr_reg:x13; val_offset:36*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x0, x29, dyn, 0, 0, x13, 36*FLEN/8, x14, x11, x12)

inst_34:
// rs3==x2,fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x8a and fm2 == 0x39ac0b and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000048 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x2; dest:x31; op1val:0x0; op2val:0x4539ac0b;
op3val:0x48; valaddr_reg:x13; val_offset:39*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x2, dyn, 0, 0, x13, 39*FLEN/8, x14, x11, x12)

inst_35:
// rs3==x1,fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x8b and fm2 == 0x3577d9 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000030 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x1; dest:x31; op1val:0x0; op2val:0x45b577d9;
op3val:0x30; valaddr_reg:x13; val_offset:42*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x1, dyn, 0, 0, x13, 42*FLEN/8, x14, x11, x12)

inst_36:
// rd==x1,fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x8c and fm2 == 0x34dae7 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000044 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x31; op2:x30; op3:x29; dest:x1; op1val:0x0; op2val:0x4634dae7;
op3val:0x44; valaddr_reg:x13; val_offset:45*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x1, x31, x30, x29, dyn, 0, 0, x13, 45*FLEN/8, x14, x11, x12)

inst_37:
// rd==x0,fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x8d and fm2 == 0x33c83f and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000026 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x31; op2:x30; op3:x29; dest:x0; op1val:0x0; op2val:0x46b3c83f;
op3val:0x26; valaddr_reg:x13; val_offset:48*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x0, x31, x30, x29, dyn, 0, 0, x13, 48*FLEN/8, x14, x11, x12)

inst_38:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x8e and fm2 == 0x33d7a9 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000057 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0x4733d7a9;
op3val:0x57; valaddr_reg:x13; val_offset:51*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 51*FLEN/8, x14, x11, x12)

inst_39:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x8f and fm2 == 0x3362a7 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0x47b362a7;
op3val:0x7; valaddr_reg:x13; val_offset:54*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 54*FLEN/8, x14, x11, x12)

inst_40:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x90 and fm2 == 0x337104 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000037 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0x48337104;
op3val:0x37; valaddr_reg:x13; val_offset:57*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 57*FLEN/8, x14, x11, x12)

inst_41:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x91 and fm2 == 0x336006 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00000d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0x48b36006;
op3val:0xd; valaddr_reg:x13; val_offset:60*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 60*FLEN/8, x14, x11, x12)

inst_42:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x92 and fm2 == 0x33608d and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000020 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0x4933608d;
op3val:0x20; valaddr_reg:x13; val_offset:63*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 63*FLEN/8, x14, x11, x12)

inst_43:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x93 and fm2 == 0x33612a and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00004e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0x49b3612a;
op3val:0x4e; valaddr_reg:x13; val_offset:66*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 66*FLEN/8, x14, x11, x12)

inst_44:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x94 and fm2 == 0x335f05 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00003a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0x4a335f05;
op3val:0x3a; valaddr_reg:x13; val_offset:69*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 69*FLEN/8, x14, x11, x12)

inst_45:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x95 and fm2 == 0x335ddc and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00000a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0x4ab35ddc;
op3val:0xa; valaddr_reg:x13; val_offset:72*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 72*FLEN/8, x14, x11, x12)

inst_46:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x6d and fm2 == 0x700000 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x00003d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x3f800000; op2val:0x36f00000;
op3val:0x3f80003d; valaddr_reg:x13; val_offset:75*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 75*FLEN/8, x14, x11, x12)

inst_47:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x6e and fm2 == 0x320000 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x00005b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x3f800000; op2val:0x37320000;
op3val:0x3f80005b; valaddr_reg:x13; val_offset:78*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 78*FLEN/8, x14, x11, x12)

inst_48:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x6a and fm2 == 0x600000 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x00000b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x3f800000; op2val:0x35600000;
op3val:0x3f80000b; valaddr_reg:x13; val_offset:81*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 81*FLEN/8, x14, x11, x12)

inst_49:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x6e and fm2 == 0x300000 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000060 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x3f800000; op2val:0x37300000;
op3val:0x3f800060; valaddr_reg:x13; val_offset:84*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 84*FLEN/8, x14, x11, x12)

inst_50:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x6d and fm2 == 0x280000 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x00003a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x3f800000; op2val:0x36a80000;
op3val:0x3f80003a; valaddr_reg:x13; val_offset:87*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 87*FLEN/8, x14, x11, x12)

inst_51:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x6d and fm2 == 0x740000 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x00005d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x3f800000; op2val:0x36f40000;
op3val:0x3f80005d; valaddr_reg:x13; val_offset:90*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 90*FLEN/8, x14, x11, x12)

inst_52:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x6d and fm2 == 0x740000 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x3f800000; op2val:0xb6f40000;
op3val:0x3f800003; valaddr_reg:x13; val_offset:93*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 93*FLEN/8, x14, x11, x12)

inst_53:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x6d and fm2 == 0x6c0000 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000045 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x3f800000; op2val:0xb6ec0000;
op3val:0x3f800045; valaddr_reg:x13; val_offset:96*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 96*FLEN/8, x14, x11, x12)

inst_54:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x6f and fm2 == 0x5f0000 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000021 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x3f800000; op2val:0xb7df0000;
op3val:0x3f800021; valaddr_reg:x13; val_offset:99*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 99*FLEN/8, x14, x11, x12)

inst_55:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x70 and fm2 == 0x738000 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000019 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x3f800000; op2val:0xb8738000;
op3val:0x3f800019; valaddr_reg:x13; val_offset:102*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102*FLEN/8, x14, x11, x12)

inst_56:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x71 and fm2 == 0x6fc000 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000041 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x3f800000; op2val:0xb8efc000;
op3val:0x3f800041; valaddr_reg:x13; val_offset:105*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 105*FLEN/8, x14, x11, x12)

inst_57:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x72 and fm2 == 0x7aa000 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x00002b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x3f800000; op2val:0xb97aa000;
op3val:0x3f80002b; valaddr_reg:x13; val_offset:108*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 108*FLEN/8, x14, x11, x12)

inst_58:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x73 and fm2 == 0x7cb000 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000035 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x3f800000; op2val:0xb9fcb000;
op3val:0x3f800035; valaddr_reg:x13; val_offset:111*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 111*FLEN/8, x14, x11, x12)

inst_59:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x74 and fm2 == 0x7d8800 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x00004f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x3f800000; op2val:0xba7d8800;
op3val:0x3f80004f; valaddr_reg:x13; val_offset:114*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 114*FLEN/8, x14, x11, x12)

inst_60:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x75 and fm2 == 0x7f7400 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000023 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x3f800000; op2val:0xbaff7400;
op3val:0x3f800023; valaddr_reg:x13; val_offset:117*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 117*FLEN/8, x14, x11, x12)

inst_61:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x76 and fm2 == 0x7f5600 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000055 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x3f800000; op2val:0xbb7f5600;
op3val:0x3f800055; valaddr_reg:x13; val_offset:120*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 120*FLEN/8, x14, x11, x12)

inst_62:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x77 and fm2 == 0x7fc100 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x3f800000; op2val:0xbbffc100;
op3val:0x3f80003f; valaddr_reg:x13; val_offset:123*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 123*FLEN/8, x14, x11, x12)

inst_63:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x78 and fm2 == 0x7fd180 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x00005d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x3f800000; op2val:0xbc7fd180;
op3val:0x3f80005d; valaddr_reg:x13; val_offset:126*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 126*FLEN/8, x14, x11, x12)

inst_64:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x79 and fm2 == 0x7ff000 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000040 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x3f800000; op2val:0xbcfff000;
op3val:0x3f800040; valaddr_reg:x13; val_offset:129*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 129*FLEN/8, x14, x11, x12)

inst_65:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7a and fm2 == 0x7ff5c0 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000052 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x3f800000; op2val:0xbd7ff5c0;
op3val:0x3f800052; valaddr_reg:x13; val_offset:132*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 132*FLEN/8, x14, x11, x12)

inst_66:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7b and fm2 == 0x7ffd60 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x00002a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x3f800000; op2val:0xbdfffd60;
op3val:0x3f80002a; valaddr_reg:x13; val_offset:135*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 135*FLEN/8, x14, x11, x12)

inst_67:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x7ffd58 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000055 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x3f800000; op2val:0xbe7ffd58;
op3val:0x3f800055; valaddr_reg:x13; val_offset:138*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 138*FLEN/8, x14, x11, x12)

inst_68:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x7ffec0 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000050 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x3f800000; op2val:0xbefffec0;
op3val:0x3f800050; valaddr_reg:x13; val_offset:141*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 141*FLEN/8, x14, x11, x12)

inst_69:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x00002d and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000059 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x3f800000; op2val:0x4000002d;
op3val:0x3f800059; valaddr_reg:x13; val_offset:144*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 144*FLEN/8, x14, x11, x12)

inst_70:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x000016 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000029 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x3f800000; op2val:0x40000016;
op3val:0x3f800029; valaddr_reg:x13; val_offset:147*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 147*FLEN/8, x14, x11, x12)

inst_71:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x000022 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x3f800000; op2val:0x40000022;
op3val:0x3f80003f; valaddr_reg:x13; val_offset:150*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 150*FLEN/8, x14, x11, x12)

inst_72:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x000017 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000026 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x3f800000; op2val:0x40000017;
op3val:0x3f800026; valaddr_reg:x13; val_offset:153*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 153*FLEN/8, x14, x11, x12)

inst_73:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x000030 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000050 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x3f800000; op2val:0x40000030;
op3val:0x3f800050; valaddr_reg:x13; val_offset:156*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 156*FLEN/8, x14, x11, x12)

inst_74:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x000014 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000008 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x3f800000; op2val:0x40000014;
op3val:0x3f800008; valaddr_reg:x13; val_offset:159*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 159*FLEN/8, x14, x11, x12)

inst_75:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x000022 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000004 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x3f800000; op2val:0x40000022;
op3val:0x3f800004; valaddr_reg:x13; val_offset:162*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 162*FLEN/8, x14, x11, x12)

inst_76:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x00006c and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000058 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x3f800000; op2val:0x4000006c;
op3val:0x3f800058; valaddr_reg:x13; val_offset:165*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 165*FLEN/8, x14, x11, x12)

inst_77:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x000098 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x00002f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x3f800000; op2val:0x40000098;
op3val:0x3f80002f; valaddr_reg:x13; val_offset:168*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 168*FLEN/8, x14, x11, x12)

inst_78:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x000126 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x00004c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x3f800000; op2val:0x40000126;
op3val:0x3f80004c; valaddr_reg:x13; val_offset:171*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 171*FLEN/8, x14, x11, x12)

inst_79:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x00020c and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000019 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x3f800000; op2val:0x4000020c;
op3val:0x3f800019; valaddr_reg:x13; val_offset:174*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 174*FLEN/8, x14, x11, x12)

inst_80:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x000412 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000023 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x3f800000; op2val:0x40000412;
op3val:0x3f800023; valaddr_reg:x13; val_offset:177*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 177*FLEN/8, x14, x11, x12)

inst_81:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x00081c and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000037 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x3f800000; op2val:0x4000081c;
op3val:0x3f800037; valaddr_reg:x13; val_offset:180*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 180*FLEN/8, x14, x11, x12)

inst_82:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x001005 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x00000a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x3f800000; op2val:0x40001005;
op3val:0x3f80000a; valaddr_reg:x13; val_offset:183*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 183*FLEN/8, x14, x11, x12)

inst_83:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x00200f and fs3 == 0 and fe3 == 0x7f and fm3 == 0x00001e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x3f800000; op2val:0x4000200f;
op3val:0x3f80001e; valaddr_reg:x13; val_offset:186*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 186*FLEN/8, x14, x11, x12)

inst_84:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x004018 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000030 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x3f800000; op2val:0x40004018;
op3val:0x3f800030; valaddr_reg:x13; val_offset:189*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 189*FLEN/8, x14, x11, x12)

inst_85:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x00800a and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000013 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x3f800000; op2val:0x4000800a;
op3val:0x3f800013; valaddr_reg:x13; val_offset:192*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 192*FLEN/8, x14, x11, x12)

inst_86:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x010027 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x00004e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x3f800000; op2val:0x40010027;
op3val:0x3f80004e; valaddr_reg:x13; val_offset:195*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 195*FLEN/8, x14, x11, x12)

inst_87:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x02000a and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000013 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x3f800000; op2val:0x4002000a;
op3val:0x3f800013; valaddr_reg:x13; val_offset:198*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 198*FLEN/8, x14, x11, x12)

inst_88:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x040028 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000051 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x3f800000; op2val:0x40040028;
op3val:0x3f800051; valaddr_reg:x13; val_offset:201*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 201*FLEN/8, x14, x11, x12)

inst_89:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x08002e and fs3 == 0 and fe3 == 0x7f and fm3 == 0x00005c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x3f800000; op2val:0x4008002e;
op3val:0x3f80005c; valaddr_reg:x13; val_offset:204*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 204*FLEN/8, x14, x11, x12)

inst_90:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x100003 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000006 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x3f800000; op2val:0x40100003;
op3val:0x3f800006; valaddr_reg:x13; val_offset:207*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 207*FLEN/8, x14, x11, x12)

inst_91:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x20001e and fs3 == 0 and fe3 == 0x7f and fm3 == 0x00003c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x3f800000; op2val:0x4020001e;
op3val:0x3f80003c; valaddr_reg:x13; val_offset:210*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 210*FLEN/8, x14, x11, x12)

inst_92:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x85 and fm2 == 0x6102a6 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000051 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0x42e102a6;
op3val:0x51; valaddr_reg:x13; val_offset:213*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 213*FLEN/8, x14, x11, x12)

inst_93:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x85 and fm2 == 0x73d370 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00005a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0x42f3d370;
op3val:0x5a; valaddr_reg:x13; val_offset:216*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 216*FLEN/8, x14, x11, x12)

inst_94:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x85 and fm2 == 0x4f6465 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00004f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0x42cf6465;
op3val:0x4f; valaddr_reg:x13; val_offset:219*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 219*FLEN/8, x14, x11, x12)

inst_95:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x83 and fm2 == 0x068650 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000015 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0x41868650;
op3val:0x15; valaddr_reg:x13; val_offset:222*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 222*FLEN/8, x14, x11, x12)

inst_96:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x85 and fm2 == 0x3bc624 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000054 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0x42bbc624;
op3val:0x54; valaddr_reg:x13; val_offset:225*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 225*FLEN/8, x14, x11, x12)

inst_97:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x84 and fm2 == 0x2dc2d2 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000040 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0x422dc2d2;
op3val:0x40; valaddr_reg:x13; val_offset:228*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 228*FLEN/8, x14, x11, x12)

inst_98:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x83 and fm2 == 0x3e939b and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000052 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0x41be939b;
op3val:0x52; valaddr_reg:x13; val_offset:231*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 231*FLEN/8, x14, x11, x12)

inst_99:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x86 and fm2 == 0x11bc2c and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000019 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0xc311bc2c;
op3val:0x19; valaddr_reg:x13; val_offset:234*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 234*FLEN/8, x14, x11, x12)

inst_100:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x87 and fm2 == 0x08a069 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00003e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0xc388a069;
op3val:0x3e; valaddr_reg:x13; val_offset:237*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 237*FLEN/8, x14, x11, x12)

inst_101:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x88 and fm2 == 0x1f65d0 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00003a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0xc41f65d0;
op3val:0x3a; valaddr_reg:x13; val_offset:240*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 240*FLEN/8, x14, x11, x12)

inst_102:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x89 and fm2 == 0x28ae6a and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00003e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0xc4a8ae6a;
op3val:0x3e; valaddr_reg:x13; val_offset:243*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 243*FLEN/8, x14, x11, x12)

inst_103:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x8a and fm2 == 0x30202e and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000026 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0xc530202e;
op3val:0x26; valaddr_reg:x13; val_offset:246*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 246*FLEN/8, x14, x11, x12)

inst_104:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x8b and fm2 == 0x31ca2d and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000025 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0xc5b1ca2d;
op3val:0x25; valaddr_reg:x13; val_offset:249*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 249*FLEN/8, x14, x11, x12)

inst_105:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x8c and fm2 == 0x334754 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000005 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0xc6334754;
op3val:0x5; valaddr_reg:x13; val_offset:252*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 252*FLEN/8, x14, x11, x12)

inst_106:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x8d and fm2 == 0x32aa62 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000041 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0xc6b2aa62;
op3val:0x41; valaddr_reg:x13; val_offset:255*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 255*FLEN/8, x14, x11, x12)

inst_107:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x8e and fm2 == 0x332cb4 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000024 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0xc7332cb4;
op3val:0x24; valaddr_reg:x13; val_offset:258*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 258*FLEN/8, x14, x11, x12)

inst_108:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x8f and fm2 == 0x3333b6 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00003d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0xc7b333b6;
op3val:0x3d; valaddr_reg:x13; val_offset:261*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 261*FLEN/8, x14, x11, x12)

inst_109:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x90 and fm2 == 0x334a21 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000039 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0xc8334a21;
op3val:0x39; valaddr_reg:x13; val_offset:264*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 264*FLEN/8, x14, x11, x12)

inst_110:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x91 and fm2 == 0x335d0c and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000005 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0xc8b35d0c;
op3val:0x5; valaddr_reg:x13; val_offset:267*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 267*FLEN/8, x14, x11, x12)

inst_111:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x92 and fm2 == 0x335b08 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000020 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0xc9335b08;
op3val:0x20; valaddr_reg:x13; val_offset:270*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 270*FLEN/8, x14, x11, x12)

inst_112:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x93 and fm2 == 0x335ac5 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000045 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0xc9b35ac5;
op3val:0x45; valaddr_reg:x13; val_offset:273*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 273*FLEN/8, x14, x11, x12)

inst_113:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x94 and fm2 == 0x335bb1 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00005f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0xca335bb1;
op3val:0x5f; valaddr_reg:x13; val_offset:276*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 276*FLEN/8, x14, x11, x12)

inst_114:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x95 and fm2 == 0x335d47 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00002c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0xcab35d47;
op3val:0x2c; valaddr_reg:x13; val_offset:279*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 279*FLEN/8, x14, x11, x12)

inst_115:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x001a98 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000005 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0x41001a98;
op3val:0x5; valaddr_reg:x13; val_offset:282*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 282*FLEN/8, x14, x11, x12)

inst_116:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x86 and fm2 == 0x0953c7 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00005f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0x430953c7;
op3val:0x5f; valaddr_reg:x13; val_offset:285*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 285*FLEN/8, x14, x11, x12)

inst_117:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x86 and fm2 == 0x051f94 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00005a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0x43051f94;
op3val:0x5a; valaddr_reg:x13; val_offset:288*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 288*FLEN/8, x14, x11, x12)

inst_118:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x85 and fm2 == 0x1489a3 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00002c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0x429489a3;
op3val:0x2c; valaddr_reg:x13; val_offset:291*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 291*FLEN/8, x14, x11, x12)

inst_119:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x84 and fm2 == 0x54ff53 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000015 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0x4254ff53;
op3val:0x15; valaddr_reg:x13; val_offset:294*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 294*FLEN/8, x14, x11, x12)

inst_120:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x85 and fm2 == 0x6e3882 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000034 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0x42ee3882;
op3val:0x34; valaddr_reg:x13; val_offset:297*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 297*FLEN/8, x14, x11, x12)

inst_121:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x86 and fm2 == 0x2f298d and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00003c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0x432f298d;
op3val:0x3c; valaddr_reg:x13; val_offset:300*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 300*FLEN/8, x14, x11, x12)

inst_122:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x87 and fm2 == 0x13d645 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000052 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0x4393d645;
op3val:0x52; valaddr_reg:x13; val_offset:303*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 303*FLEN/8, x14, x11, x12)

inst_123:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x87 and fm2 == 0x3ffa57 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000011 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0x43bffa57;
op3val:0x11; valaddr_reg:x13; val_offset:306*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 306*FLEN/8, x14, x11, x12)

inst_124:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x88 and fm2 == 0x437b2c and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00002d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0x44437b2c;
op3val:0x2d; valaddr_reg:x13; val_offset:309*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 309*FLEN/8, x14, x11, x12)

inst_125:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x89 and fm2 == 0x37bec9 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000018 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0x44b7bec9;
op3val:0x18; valaddr_reg:x13; val_offset:312*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 312*FLEN/8, x14, x11, x12)

inst_126:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x8a and fm2 == 0x358e44 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000018 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0x45358e44;
op3val:0x18; valaddr_reg:x13; val_offset:315*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 315*FLEN/8, x14, x11, x12)

inst_127:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x8b and fm2 == 0x3791f2 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00005f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0x45b791f2;
op3val:0x5f; valaddr_reg:x13; val_offset:318*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 318*FLEN/8, x14, x11, x12)

inst_128:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x8c and fm2 == 0x34cfb1 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000041 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0x4634cfb1;
op3val:0x41; valaddr_reg:x13; val_offset:321*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 321*FLEN/8, x14, x11, x12)

inst_129:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x8d and fm2 == 0x33b1d3 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00001d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0x46b3b1d3;
op3val:0x1d; valaddr_reg:x13; val_offset:324*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 324*FLEN/8, x14, x11, x12)

inst_130:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x8e and fm2 == 0x33dd44 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00005a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0x4733dd44;
op3val:0x5a; valaddr_reg:x13; val_offset:327*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 327*FLEN/8, x14, x11, x12)

inst_131:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x8f and fm2 == 0x338449 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000036 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0x47b38449;
op3val:0x36; valaddr_reg:x13; val_offset:330*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 330*FLEN/8, x14, x11, x12)

inst_132:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x90 and fm2 == 0x338014 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000061 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0x48338014;
op3val:0x61; valaddr_reg:x13; val_offset:333*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 333*FLEN/8, x14, x11, x12)

inst_133:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x91 and fm2 == 0x33635a and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0x48b3635a;
op3val:0x1f; valaddr_reg:x13; val_offset:336*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 336*FLEN/8, x14, x11, x12)

inst_134:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x92 and fm2 == 0x33643b and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000049 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0x4933643b;
op3val:0x49; valaddr_reg:x13; val_offset:339*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 339*FLEN/8, x14, x11, x12)

inst_135:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x93 and fm2 == 0x335ee3 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000019 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0x49b35ee3;
op3val:0x19; valaddr_reg:x13; val_offset:342*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 342*FLEN/8, x14, x11, x12)

inst_136:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x94 and fm2 == 0x335ed8 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000031 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0x4a335ed8;
op3val:0x31; valaddr_reg:x13; val_offset:345*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 345*FLEN/8, x14, x11, x12)

inst_137:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x95 and fm2 == 0x335dc8 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000002 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0x4ab35dc8;
op3val:0x2; valaddr_reg:x13; val_offset:348*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 348*FLEN/8, x14, x11, x12)

inst_138:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x96 and fm2 == 0x335d5d and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000044 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0xcb335d5d;
op3val:0x44; valaddr_reg:x13; val_offset:351*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 351*FLEN/8, x14, x11, x12)

inst_139:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x96 and fm2 == 0x335d3a and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00005c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0xcb335d3a;
op3val:0x5c; valaddr_reg:x13; val_offset:354*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 354*FLEN/8, x14, x11, x12)

inst_140:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x96 and fm2 == 0x335d44 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000053 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0xcb335d44;
op3val:0x53; valaddr_reg:x13; val_offset:357*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 357*FLEN/8, x14, x11, x12)

inst_141:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x96 and fm2 == 0x335d82 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000023 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0xcb335d82;
op3val:0x23; valaddr_reg:x13; val_offset:360*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 360*FLEN/8, x14, x11, x12)

inst_142:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x96 and fm2 == 0x335d8c and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000014 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0xcb335d8c;
op3val:0x14; valaddr_reg:x13; val_offset:363*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 363*FLEN/8, x14, x11, x12)

inst_143:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x96 and fm2 == 0x335d15 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000059 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0xcb335d15;
op3val:0x59; valaddr_reg:x13; val_offset:366*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 366*FLEN/8, x14, x11, x12)

inst_144:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x96 and fm2 == 0x335d1e and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000032 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0xcb335d1e;
op3val:0x32; valaddr_reg:x13; val_offset:369*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 369*FLEN/8, x14, x11, x12)

inst_145:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x96 and fm2 == 0x335d00 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000008 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0xcb335d00;
op3val:0x8; valaddr_reg:x13; val_offset:372*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 372*FLEN/8, x14, x11, x12)

inst_146:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x96 and fm2 == 0x335c4f and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000006 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0xcb335c4f;
op3val:0x6; valaddr_reg:x13; val_offset:375*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 375*FLEN/8, x14, x11, x12)

inst_147:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x96 and fm2 == 0x335a67 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000062 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0xcb335a67;
op3val:0x62; valaddr_reg:x13; val_offset:378*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 378*FLEN/8, x14, x11, x12)

inst_148:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x96 and fm2 == 0x33580e and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0xcb33580e;
op3val:0xf; valaddr_reg:x13; val_offset:381*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 381*FLEN/8, x14, x11, x12)

inst_149:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x96 and fm2 == 0x33520e and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000057 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0xcb33520e;
op3val:0x57; valaddr_reg:x13; val_offset:384*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 384*FLEN/8, x14, x11, x12)

inst_150:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x96 and fm2 == 0x3346e6 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00004d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0xcb3346e6;
op3val:0x4d; valaddr_reg:x13; val_offset:387*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 387*FLEN/8, x14, x11, x12)
RVTEST_SIGBASE(x11,signature_x11_1)

inst_151:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x96 and fm2 == 0x3330db and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000008 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0xcb3330db;
op3val:0x8; valaddr_reg:x13; val_offset:390*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 390*FLEN/8, x14, x11, x12)

inst_152:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x96 and fm2 == 0x3303c5 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000035 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0xcb3303c5;
op3val:0x35; valaddr_reg:x13; val_offset:393*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 393*FLEN/8, x14, x11, x12)

inst_153:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x96 and fm2 == 0x32a9d7 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000062 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0xcb32a9d7;
op3val:0x62; valaddr_reg:x13; val_offset:396*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 396*FLEN/8, x14, x11, x12)

inst_154:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x96 and fm2 == 0x31f6f2 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00000c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0xcb31f6f2;
op3val:0xc; valaddr_reg:x13; val_offset:399*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 399*FLEN/8, x14, x11, x12)

inst_155:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x96 and fm2 == 0x309039 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00000a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0xcb309039;
op3val:0xa; valaddr_reg:x13; val_offset:402*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 402*FLEN/8, x14, x11, x12)

inst_156:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x96 and fm2 == 0x2dc2b1 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000016 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0xcb2dc2b1;
op3val:0x16; valaddr_reg:x13; val_offset:405*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 405*FLEN/8, x14, x11, x12)

inst_157:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x96 and fm2 == 0x2827cc and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000010 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0xcb2827cc;
op3val:0x10; valaddr_reg:x13; val_offset:408*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 408*FLEN/8, x14, x11, x12)

inst_158:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x96 and fm2 == 0x1cf188 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00005a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0xcb1cf188;
op3val:0x5a; valaddr_reg:x13; val_offset:411*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 411*FLEN/8, x14, x11, x12)

inst_159:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x96 and fm2 == 0x068644 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0xcb068644;
op3val:0x7; valaddr_reg:x13; val_offset:414*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 414*FLEN/8, x14, x11, x12)

inst_160:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x95 and fm2 == 0x335cad and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000061 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0xcab35cad;
op3val:0x61; valaddr_reg:x13; val_offset:417*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 417*FLEN/8, x14, x11, x12)

inst_161:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x96 and fm2 == 0x335e32 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000054 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0x4b335e32;
op3val:0x54; valaddr_reg:x13; val_offset:420*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 420*FLEN/8, x14, x11, x12)

inst_162:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x96 and fm2 == 0x335dea and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000021 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0x4b335dea;
op3val:0x21; valaddr_reg:x13; val_offset:423*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 423*FLEN/8, x14, x11, x12)

inst_163:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x96 and fm2 == 0x335de3 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00001e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0x4b335de3;
op3val:0x1e; valaddr_reg:x13; val_offset:426*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 426*FLEN/8, x14, x11, x12)

inst_164:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x96 and fm2 == 0x335e29 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000054 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0x4b335e29;
op3val:0x54; valaddr_reg:x13; val_offset:429*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 429*FLEN/8, x14, x11, x12)

inst_165:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x96 and fm2 == 0x335dda and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000024 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0x4b335dda;
op3val:0x24; valaddr_reg:x13; val_offset:432*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 432*FLEN/8, x14, x11, x12)

inst_166:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x96 and fm2 == 0x335dc0 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000021 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0x4b335dc0;
op3val:0x21; valaddr_reg:x13; val_offset:435*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 435*FLEN/8, x14, x11, x12)

inst_167:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x96 and fm2 == 0x335dc2 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000043 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0x4b335dc2;
op3val:0x43; valaddr_reg:x13; val_offset:438*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 438*FLEN/8, x14, x11, x12)

inst_168:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x96 and fm2 == 0x335d74 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00004b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0x4b335d74;
op3val:0x4b; valaddr_reg:x13; val_offset:441*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 441*FLEN/8, x14, x11, x12)

inst_169:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x96 and fm2 == 0x335c99 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00002f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0x4b335c99;
op3val:0x2f; valaddr_reg:x13; val_offset:444*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 444*FLEN/8, x14, x11, x12)

inst_170:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x96 and fm2 == 0x335b6d and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000059 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0x4b335b6d;
op3val:0x59; valaddr_reg:x13; val_offset:447*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 447*FLEN/8, x14, x11, x12)

inst_171:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x96 and fm2 == 0x33584c and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00001d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0x4b33584c;
op3val:0x1d; valaddr_reg:x13; val_offset:450*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 450*FLEN/8, x14, x11, x12)

inst_172:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x96 and fm2 == 0x3352ca and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00002f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0x4b3352ca;
op3val:0x2f; valaddr_reg:x13; val_offset:453*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 453*FLEN/8, x14, x11, x12)

inst_173:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x96 and fm2 == 0x3347a1 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000038 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0x4b3347a1;
op3val:0x38; valaddr_reg:x13; val_offset:456*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 456*FLEN/8, x14, x11, x12)

inst_174:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x96 and fm2 == 0x333126 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00002d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0x4b333126;
op3val:0x2d; valaddr_reg:x13; val_offset:459*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 459*FLEN/8, x14, x11, x12)

inst_175:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x96 and fm2 == 0x330415 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000004 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0x4b330415;
op3val:0x4; valaddr_reg:x13; val_offset:462*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 462*FLEN/8, x14, x11, x12)

inst_176:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x96 and fm2 == 0x32aa9e and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00002c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0x4b32aa9e;
op3val:0x2c; valaddr_reg:x13; val_offset:465*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 465*FLEN/8, x14, x11, x12)

inst_177:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x96 and fm2 == 0x31f75b and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0x4b31f75b;
op3val:0x3f; valaddr_reg:x13; val_offset:468*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 468*FLEN/8, x14, x11, x12)

inst_178:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x96 and fm2 == 0x30909b and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00003c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0x4b30909b;
op3val:0x3c; valaddr_reg:x13; val_offset:471*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 471*FLEN/8, x14, x11, x12)

inst_179:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x96 and fm2 == 0x2dc2e1 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00000c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0x4b2dc2e1;
op3val:0xc; valaddr_reg:x13; val_offset:474*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 474*FLEN/8, x14, x11, x12)

inst_180:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x96 and fm2 == 0x28280c and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00001e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0x4b28280c;
op3val:0x1e; valaddr_reg:x13; val_offset:477*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 477*FLEN/8, x14, x11, x12)

inst_181:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x96 and fm2 == 0x1cf21e and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000011 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0x4b1cf21e;
op3val:0x11; valaddr_reg:x13; val_offset:480*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 480*FLEN/8, x14, x11, x12)

inst_182:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x96 and fm2 == 0x0686b0 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000046 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0x4b0686b0;
op3val:0x46; valaddr_reg:x13; val_offset:483*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 483*FLEN/8, x14, x11, x12)

inst_183:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x95 and fm2 == 0x335e16 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000020 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0x4ab35e16;
op3val:0x20; valaddr_reg:x13; val_offset:486*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 486*FLEN/8, x14, x11, x12)

inst_184:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x6e and fm2 == 0x180000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x00004d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x800000; op2val:0x37180000;
op3val:0x80004d; valaddr_reg:x13; val_offset:489*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 489*FLEN/8, x14, x11, x12)

inst_185:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x6e and fm2 == 0x0e0000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000049 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x800000; op2val:0x370e0000;
op3val:0x800049; valaddr_reg:x13; val_offset:492*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 492*FLEN/8, x14, x11, x12)

inst_186:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x6c and fm2 == 0x780000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000023 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x800000; op2val:0x36780000;
op3val:0x800023; valaddr_reg:x13; val_offset:495*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 495*FLEN/8, x14, x11, x12)

inst_187:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x6b and fm2 == 0x200000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000012 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x800000; op2val:0x35a00000;
op3val:0x800012; valaddr_reg:x13; val_offset:498*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 498*FLEN/8, x14, x11, x12)

inst_188:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x6b and fm2 == 0x300000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000005 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x800000; op2val:0xb5b00000;
op3val:0x800005; valaddr_reg:x13; val_offset:501*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 501*FLEN/8, x14, x11, x12)

inst_189:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x6e and fm2 == 0x040000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000062 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x800000; op2val:0x37040000;
op3val:0x800062; valaddr_reg:x13; val_offset:504*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 504*FLEN/8, x14, x11, x12)

inst_190:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x6d and fm2 == 0x480000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x00000e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x800000; op2val:0xb6c80000;
op3val:0x80000e; valaddr_reg:x13; val_offset:507*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 507*FLEN/8, x14, x11, x12)

inst_191:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x6d and fm2 == 0x580000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x00004a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x800000; op2val:0xb6d80000;
op3val:0x80004a; valaddr_reg:x13; val_offset:510*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 510*FLEN/8, x14, x11, x12)

inst_192:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x6f and fm2 == 0x7f0000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x800000; op2val:0xb7ff0000;
op3val:0x800001; valaddr_reg:x13; val_offset:513*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 513*FLEN/8, x14, x11, x12)

inst_193:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x70 and fm2 == 0x780000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000010 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x800000; op2val:0xb8780000;
op3val:0x800010; valaddr_reg:x13; val_offset:516*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 516*FLEN/8, x14, x11, x12)

inst_194:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x71 and fm2 == 0x6d0000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x00004c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x800000; op2val:0xb8ed0000;
op3val:0x80004c; valaddr_reg:x13; val_offset:519*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 519*FLEN/8, x14, x11, x12)

inst_195:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x72 and fm2 == 0x786000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x00003d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x800000; op2val:0xb9786000;
op3val:0x80003d; valaddr_reg:x13; val_offset:522*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 522*FLEN/8, x14, x11, x12)

inst_196:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x73 and fm2 == 0x7bc000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000044 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x800000; op2val:0xb9fbc000;
op3val:0x800044; valaddr_reg:x13; val_offset:525*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 525*FLEN/8, x14, x11, x12)

inst_197:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x74 and fm2 == 0x7f2000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x00001c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x800000; op2val:0xba7f2000;
op3val:0x80001c; valaddr_reg:x13; val_offset:528*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 528*FLEN/8, x14, x11, x12)

inst_198:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x75 and fm2 == 0x7fb000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000014 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x800000; op2val:0xbaffb000;
op3val:0x800014; valaddr_reg:x13; val_offset:531*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 531*FLEN/8, x14, x11, x12)

inst_199:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x76 and fm2 == 0x7ffc00 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000002 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x800000; op2val:0xbb7ffc00;
op3val:0x800002; valaddr_reg:x13; val_offset:534*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 534*FLEN/8, x14, x11, x12)

inst_200:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x77 and fm2 == 0x7fca00 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000036 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x800000; op2val:0xbbffca00;
op3val:0x800036; valaddr_reg:x13; val_offset:537*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 537*FLEN/8, x14, x11, x12)

inst_201:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x78 and fm2 == 0x7feb80 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000029 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x800000; op2val:0xbc7feb80;
op3val:0x800029; valaddr_reg:x13; val_offset:540*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 540*FLEN/8, x14, x11, x12)

inst_202:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x79 and fm2 == 0x7ff6c0 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000025 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x800000; op2val:0xbcfff6c0;
op3val:0x800025; valaddr_reg:x13; val_offset:543*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 543*FLEN/8, x14, x11, x12)

inst_203:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7a and fm2 == 0x7ff680 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x00004c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x800000; op2val:0xbd7ff680;
op3val:0x80004c; valaddr_reg:x13; val_offset:546*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 546*FLEN/8, x14, x11, x12)

inst_204:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7b and fm2 == 0x7ffe30 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x00001d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x800000; op2val:0xbdfffe30;
op3val:0x80001d; valaddr_reg:x13; val_offset:549*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 549*FLEN/8, x14, x11, x12)

inst_205:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x7ffec0 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000028 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x800000; op2val:0xbe7ffec0;
op3val:0x800028; valaddr_reg:x13; val_offset:552*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 552*FLEN/8, x14, x11, x12)

inst_206:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x7fffd4 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x00000b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x800000; op2val:0xbeffffd4;
op3val:0x80000b; valaddr_reg:x13; val_offset:555*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 555*FLEN/8, x14, x11, x12)

inst_207:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x000028 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000050 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x800000; op2val:0x40000028;
op3val:0x800050; valaddr_reg:x13; val_offset:558*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 558*FLEN/8, x14, x11, x12)

inst_208:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x00002a and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000053 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x800000; op2val:0x4000002a;
op3val:0x800053; valaddr_reg:x13; val_offset:561*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 561*FLEN/8, x14, x11, x12)

inst_209:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x00000e and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000019 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x800000; op2val:0x4000000e;
op3val:0x800019; valaddr_reg:x13; val_offset:564*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 564*FLEN/8, x14, x11, x12)

inst_210:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x00001e and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000035 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x800000; op2val:0x4000001e;
op3val:0x800035; valaddr_reg:x13; val_offset:567*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 567*FLEN/8, x14, x11, x12)

inst_211:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x000038 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000061 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x800000; op2val:0x40000038;
op3val:0x800061; valaddr_reg:x13; val_offset:570*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 570*FLEN/8, x14, x11, x12)

inst_212:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x000032 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000043 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x800000; op2val:0x40000032;
op3val:0x800043; valaddr_reg:x13; val_offset:573*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 573*FLEN/8, x14, x11, x12)

inst_213:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x000042 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000043 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x800000; op2val:0x40000042;
op3val:0x800043; valaddr_reg:x13; val_offset:576*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 576*FLEN/8, x14, x11, x12)

inst_214:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x000058 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x00002f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x800000; op2val:0x40000058;
op3val:0x80002f; valaddr_reg:x13; val_offset:579*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 579*FLEN/8, x14, x11, x12)

inst_215:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x0000ae and fs3 == 0 and fe3 == 0x01 and fm3 == 0x00005c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x800000; op2val:0x400000ae;
op3val:0x80005c; valaddr_reg:x13; val_offset:582*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 582*FLEN/8, x14, x11, x12)

inst_216:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x000112 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000023 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x800000; op2val:0x40000112;
op3val:0x800023; valaddr_reg:x13; val_offset:585*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 585*FLEN/8, x14, x11, x12)

inst_217:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x000211 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000022 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x800000; op2val:0x40000211;
op3val:0x800022; valaddr_reg:x13; val_offset:588*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 588*FLEN/8, x14, x11, x12)

inst_218:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x000403 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000006 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x800000; op2val:0x40000403;
op3val:0x800006; valaddr_reg:x13; val_offset:591*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 591*FLEN/8, x14, x11, x12)

inst_219:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x000826 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x00004c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x800000; op2val:0x40000826;
op3val:0x80004c; valaddr_reg:x13; val_offset:594*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 594*FLEN/8, x14, x11, x12)

inst_220:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x001020 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000041 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x800000; op2val:0x40001020;
op3val:0x800041; valaddr_reg:x13; val_offset:597*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 597*FLEN/8, x14, x11, x12)

inst_221:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x00202c and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000059 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x800000; op2val:0x4000202c;
op3val:0x800059; valaddr_reg:x13; val_offset:600*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 600*FLEN/8, x14, x11, x12)

inst_222:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x004006 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x00000c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x800000; op2val:0x40004006;
op3val:0x80000c; valaddr_reg:x13; val_offset:603*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 603*FLEN/8, x14, x11, x12)

inst_223:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x00800e and fs3 == 0 and fe3 == 0x01 and fm3 == 0x00001c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x800000; op2val:0x4000800e;
op3val:0x80001c; valaddr_reg:x13; val_offset:606*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 606*FLEN/8, x14, x11, x12)

inst_224:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x010016 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x00002c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x800000; op2val:0x40010016;
op3val:0x80002c; valaddr_reg:x13; val_offset:609*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 609*FLEN/8, x14, x11, x12)

inst_225:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x02002f and fs3 == 0 and fe3 == 0x01 and fm3 == 0x00005e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x800000; op2val:0x4002002f;
op3val:0x80005e; valaddr_reg:x13; val_offset:612*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 612*FLEN/8, x14, x11, x12)

inst_226:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x04000c and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000017 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x800000; op2val:0x4004000c;
op3val:0x800017; valaddr_reg:x13; val_offset:615*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 615*FLEN/8, x14, x11, x12)

inst_227:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x08000e and fs3 == 0 and fe3 == 0x01 and fm3 == 0x00001d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x800000; op2val:0x4008000e;
op3val:0x80001d; valaddr_reg:x13; val_offset:618*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 618*FLEN/8, x14, x11, x12)

inst_228:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x10001f and fs3 == 0 and fe3 == 0x01 and fm3 == 0x00003e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x800000; op2val:0x4010001f;
op3val:0x80003e; valaddr_reg:x13; val_offset:621*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 621*FLEN/8, x14, x11, x12)

inst_229:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x200028 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000050 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x800000; op2val:0x40200028;
op3val:0x800050; valaddr_reg:x13; val_offset:624*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 624*FLEN/8, x14, x11, x12)

inst_230:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x7fff42 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x00005d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f000000; op2val:0xbf7fff42;
op3val:0x7f00005d; valaddr_reg:x13; val_offset:627*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 627*FLEN/8, x14, x11, x12)

inst_231:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x7fff84 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x00003b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f000000; op2val:0xbf7fff84;
op3val:0x7f00003b; valaddr_reg:x13; val_offset:630*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 630*FLEN/8, x14, x11, x12)

inst_232:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x7fff62 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x00004a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f000000; op2val:0xbf7fff62;
op3val:0x7f00004a; valaddr_reg:x13; val_offset:633*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 633*FLEN/8, x14, x11, x12)

inst_233:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x7fff32 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x00005e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f000000; op2val:0xbf7fff32;
op3val:0x7f00005e; valaddr_reg:x13; val_offset:636*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 636*FLEN/8, x14, x11, x12)

inst_234:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x7fff88 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x00002b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f000000; op2val:0xbf7fff88;
op3val:0x7f00002b; valaddr_reg:x13; val_offset:639*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 639*FLEN/8, x14, x11, x12)

inst_235:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x7fffac and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000009 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f000000; op2val:0xbf7fffac;
op3val:0x7f000009; valaddr_reg:x13; val_offset:642*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 642*FLEN/8, x14, x11, x12)

inst_236:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x7ffebc and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000061 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f000000; op2val:0xbf7ffebc;
op3val:0x7f000061; valaddr_reg:x13; val_offset:645*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 645*FLEN/8, x14, x11, x12)

inst_237:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x7ffeee and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000008 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f000000; op2val:0xbf7ffeee;
op3val:0x7f000008; valaddr_reg:x13; val_offset:648*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 648*FLEN/8, x14, x11, x12)

inst_238:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x7ffd82 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x00003e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f000000; op2val:0xbf7ffd82;
op3val:0x7f00003e; valaddr_reg:x13; val_offset:651*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 651*FLEN/8, x14, x11, x12)

inst_239:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x7ffbac and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000029 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f000000; op2val:0xbf7ffbac;
op3val:0x7f000029; valaddr_reg:x13; val_offset:654*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 654*FLEN/8, x14, x11, x12)

inst_240:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x7ff7fa and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000002 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f000000; op2val:0xbf7ff7fa;
op3val:0x7f000002; valaddr_reg:x13; val_offset:657*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 657*FLEN/8, x14, x11, x12)

inst_241:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x7fef44 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x00005d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f000000; op2val:0xbf7fef44;
op3val:0x7f00005d; valaddr_reg:x13; val_offset:660*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 660*FLEN/8, x14, x11, x12)

inst_242:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x7fdf9a and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000032 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f000000; op2val:0xbf7fdf9a;
op3val:0x7f000032; valaddr_reg:x13; val_offset:663*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 663*FLEN/8, x14, x11, x12)

inst_243:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x7fbfe2 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x00000e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f000000; op2val:0xbf7fbfe2;
op3val:0x7f00000e; valaddr_reg:x13; val_offset:666*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 666*FLEN/8, x14, x11, x12)

inst_244:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x7f7fd8 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000013 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f000000; op2val:0xbf7f7fd8;
op3val:0x7f000013; valaddr_reg:x13; val_offset:669*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 669*FLEN/8, x14, x11, x12)

inst_245:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x7eff9e and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000030 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f000000; op2val:0xbf7eff9e;
op3val:0x7f000030; valaddr_reg:x13; val_offset:672*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 672*FLEN/8, x14, x11, x12)

inst_246:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x7dff3e and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000060 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f000000; op2val:0xbf7dff3e;
op3val:0x7f000060; valaddr_reg:x13; val_offset:675*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 675*FLEN/8, x14, x11, x12)

inst_247:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x7bfff8 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f000000; op2val:0xbf7bfff8;
op3val:0x7f000003; valaddr_reg:x13; val_offset:678*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 678*FLEN/8, x14, x11, x12)

inst_248:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x77ffe2 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x00000e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f000000; op2val:0xbf77ffe2;
op3val:0x7f00000e; valaddr_reg:x13; val_offset:681*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 681*FLEN/8, x14, x11, x12)

inst_249:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x6fff9e and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000030 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f000000; op2val:0xbf6fff9e;
op3val:0x7f000030; valaddr_reg:x13; val_offset:684*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 684*FLEN/8, x14, x11, x12)

inst_250:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x5fffdc and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000011 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f000000; op2val:0xbf5fffdc;
op3val:0x7f000011; valaddr_reg:x13; val_offset:687*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 687*FLEN/8, x14, x11, x12)

inst_251:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x3fffba and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000022 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f000000; op2val:0xbf3fffba;
op3val:0x7f000022; valaddr_reg:x13; val_offset:690*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 690*FLEN/8, x14, x11, x12)

inst_252:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x7fff04 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x00003e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f000000; op2val:0xbeffff04;
op3val:0x7f00003e; valaddr_reg:x13; val_offset:693*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 693*FLEN/8, x14, x11, x12)

inst_253:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x400019 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000034 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f000000; op2val:0x40400019;
op3val:0x7f000034; valaddr_reg:x13; val_offset:696*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 696*FLEN/8, x14, x11, x12)

inst_254:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x400022 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000046 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f000000; op2val:0x40400022;
op3val:0x7f000046; valaddr_reg:x13; val_offset:699*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 699*FLEN/8, x14, x11, x12)

inst_255:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x40001a and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000039 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f000000; op2val:0x4040001a;
op3val:0x7f000039; valaddr_reg:x13; val_offset:702*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 702*FLEN/8, x14, x11, x12)

inst_256:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x40000c and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000021 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f000000; op2val:0x4040000c;
op3val:0x7f000021; valaddr_reg:x13; val_offset:705*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 705*FLEN/8, x14, x11, x12)

inst_257:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x40000a and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000026 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f000000; op2val:0x4040000a;
op3val:0x7f000026; valaddr_reg:x13; val_offset:708*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 708*FLEN/8, x14, x11, x12)

inst_258:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x40000c and fs3 == 0 and fe3 == 0xfe and fm3 == 0x00003a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f000000; op2val:0x4040000c;
op3val:0x7f00003a; valaddr_reg:x13; val_offset:711*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 711*FLEN/8, x14, x11, x12)

inst_259:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x400000 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000041 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f000000; op2val:0x40400000;
op3val:0x7f000041; valaddr_reg:x13; val_offset:714*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 714*FLEN/8, x14, x11, x12)

inst_260:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x3fffea and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000055 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f000000; op2val:0x403fffea;
op3val:0x7f000055; valaddr_reg:x13; val_offset:717*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 717*FLEN/8, x14, x11, x12)

inst_261:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x3fffa2 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000044 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f000000; op2val:0x403fffa2;
op3val:0x7f000044; valaddr_reg:x13; val_offset:720*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 720*FLEN/8, x14, x11, x12)

inst_262:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x3fff24 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000048 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f000000; op2val:0x403fff24;
op3val:0x7f000048; valaddr_reg:x13; val_offset:723*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 723*FLEN/8, x14, x11, x12)

inst_263:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x3ffe0a and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000016 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f000000; op2val:0x403ffe0a;
op3val:0x7f000016; valaddr_reg:x13; val_offset:726*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 726*FLEN/8, x14, x11, x12)

inst_264:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x3ffc14 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x00002a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f000000; op2val:0x403ffc14;
op3val:0x7f00002a; valaddr_reg:x13; val_offset:729*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 729*FLEN/8, x14, x11, x12)

inst_265:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x3ff80d and fs3 == 0 and fe3 == 0xfe and fm3 == 0x00001b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f000000; op2val:0x403ff80d;
op3val:0x7f00001b; valaddr_reg:x13; val_offset:732*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 732*FLEN/8, x14, x11, x12)

inst_266:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x3ff00c and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000019 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f000000; op2val:0x403ff00c;
op3val:0x7f000019; valaddr_reg:x13; val_offset:735*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 735*FLEN/8, x14, x11, x12)

inst_267:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x3fe012 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000024 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f000000; op2val:0x403fe012;
op3val:0x7f000024; valaddr_reg:x13; val_offset:738*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 738*FLEN/8, x14, x11, x12)

inst_268:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x3fc011 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000023 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f000000; op2val:0x403fc011;
op3val:0x7f000023; valaddr_reg:x13; val_offset:741*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 741*FLEN/8, x14, x11, x12)

inst_269:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x3f802c and fs3 == 0 and fe3 == 0xfe and fm3 == 0x00005a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f000000; op2val:0x403f802c;
op3val:0x7f00005a; valaddr_reg:x13; val_offset:744*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 744*FLEN/8, x14, x11, x12)

inst_270:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x3f000e and fs3 == 0 and fe3 == 0xfe and fm3 == 0x00001c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f000000; op2val:0x403f000e;
op3val:0x7f00001c; valaddr_reg:x13; val_offset:747*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 747*FLEN/8, x14, x11, x12)

inst_271:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x3e0026 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x00004d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f000000; op2val:0x403e0026;
op3val:0x7f00004d; valaddr_reg:x13; val_offset:750*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 750*FLEN/8, x14, x11, x12)

inst_272:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x3c0006 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x00000c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f000000; op2val:0x403c0006;
op3val:0x7f00000c; valaddr_reg:x13; val_offset:753*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 753*FLEN/8, x14, x11, x12)

inst_273:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x380024 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x00004a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f000000; op2val:0x40380024;
op3val:0x7f00004a; valaddr_reg:x13; val_offset:756*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 756*FLEN/8, x14, x11, x12)

inst_274:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x300016 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x00002d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f000000; op2val:0x40300016;
op3val:0x7f00002d; valaddr_reg:x13; val_offset:759*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 759*FLEN/8, x14, x11, x12)

inst_275:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x20001e and fs3 == 0 and fe3 == 0xfe and fm3 == 0x00003e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f000000; op2val:0x4020001e;
op3val:0x7f00003e; valaddr_reg:x13; val_offset:762*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 762*FLEN/8, x14, x11, x12)

inst_276:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x85 and fm2 == 0x2dc2d2 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0x42adc2d2;
op3val:0x3f; valaddr_reg:x13; val_offset:765*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 765*FLEN/8, x14, x11, x12)

inst_277:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x068650 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000005 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0x40868650;
op3val:0x5; valaddr_reg:x13; val_offset:768*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 768*FLEN/8, x14, x11, x12)

inst_278:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x85 and fm2 == 0x7c3bd5 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000062 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0x42fc3bd5;
op3val:0x62; valaddr_reg:x13; val_offset:771*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 771*FLEN/8, x14, x11, x12)
RVTEST_SIGBASE(x11,signature_x11_2)

inst_279:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x84 and fm2 == 0x0c213e and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000029 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0x420c213e;
op3val:0x29; valaddr_reg:x13; val_offset:774*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 774*FLEN/8, x14, x11, x12)

inst_280:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x068650 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000023 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0x40868650;
op3val:0x23; valaddr_reg:x13; val_offset:777*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 777*FLEN/8, x14, x11, x12)

inst_281:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x84 and fm2 == 0x54ff53 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00001a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0xc254ff53;
op3val:0x1a; valaddr_reg:x13; val_offset:780*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 780*FLEN/8, x14, x11, x12)

inst_282:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x85 and fm2 == 0x255a6d and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000045 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0xc2a55a6d;
op3val:0x45; valaddr_reg:x13; val_offset:783*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 783*FLEN/8, x14, x11, x12)

inst_283:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x87 and fm2 == 0x21d998 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000019 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0xc3a1d998;
op3val:0x19; valaddr_reg:x13; val_offset:786*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 786*FLEN/8, x14, x11, x12)

inst_284:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x88 and fm2 == 0x1596af and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000055 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0xc41596af;
op3val:0x55; valaddr_reg:x13; val_offset:789*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 789*FLEN/8, x14, x11, x12)

inst_285:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x89 and fm2 == 0x29bb76 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000037 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0xc4a9bb76;
op3val:0x37; valaddr_reg:x13; val_offset:792*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 792*FLEN/8, x14, x11, x12)

inst_286:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x8a and fm2 == 0x3250b3 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00000c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0xc53250b3;
op3val:0xc; valaddr_reg:x13; val_offset:795*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 795*FLEN/8, x14, x11, x12)

inst_287:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x86 and fm2 == 0x02521d and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00001d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0x4302521d;
op3val:0x1d; valaddr_reg:x13; val_offset:798*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 798*FLEN/8, x14, x11, x12)

inst_288:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x87 and fm2 == 0x726cb5 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00005a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0x43f26cb5;
op3val:0x5a; valaddr_reg:x13; val_offset:801*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 801*FLEN/8, x14, x11, x12)

inst_289:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x89 and fm2 == 0x33e446 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0x44b3e446;
op3val:0x3; valaddr_reg:x13; val_offset:804*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 804*FLEN/8, x14, x11, x12)

inst_290:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x8d and fm2 == 0x33c83f and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000026 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0x46b3c83f;
op3val:0x26; valaddr_reg:x13; val_offset:807*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 807*FLEN/8, x14, x11, x12)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1118683858,32,FLEN)
NAN_BOXED(63,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(5,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1101539300,32,FLEN)
NAN_BOXED(19,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1123826645,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1108091198,32,FLEN)
NAN_BOXED(41,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3260350291,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3265616493,32,FLEN)
NAN_BOXED(3265616493,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3282164120,32,FLEN)
NAN_BOXED(3282164120,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(85,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3299457910,32,FLEN)
NAN_BOXED(55,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3316714393,32,FLEN)
NAN_BOXED(53,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3325173313,32,FLEN)
NAN_BOXED(57,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3333574117,32,FLEN)
NAN_BOXED(97,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3342000034,32,FLEN)
NAN_BOXED(90,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3350418596,32,FLEN)
NAN_BOXED(13,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3358802720,32,FLEN)
NAN_BOXED(76,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3367194377,32,FLEN)
NAN_BOXED(84,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3375585339,32,FLEN)
NAN_BOXED(63,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3383974620,32,FLEN)
NAN_BOXED(66,32,FLEN)
test_dataset_1:
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3392363508,32,FLEN)
NAN_BOXED(82,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3400752486,32,FLEN)
NAN_BOXED(32,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1113601327,32,FLEN)
NAN_BOXED(39,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1121622593,32,FLEN)
NAN_BOXED(76,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1102273984,32,FLEN)
NAN_BOXED(12,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1107356514,32,FLEN)
NAN_BOXED(15,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1117581832,32,FLEN)
NAN_BOXED(40,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1122173606,32,FLEN)
NAN_BOXED(49,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1124225565,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1133486610,32,FLEN)
NAN_BOXED(77,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1139961013,32,FLEN)
NAN_BOXED(90,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1144790995,32,FLEN)
NAN_BOXED(25,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1161407499,32,FLEN)
NAN_BOXED(72,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1169520601,32,FLEN)
NAN_BOXED(48,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1177869031,32,FLEN)
NAN_BOXED(68,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1186187327,32,FLEN)
NAN_BOXED(38,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1194579881,32,FLEN)
NAN_BOXED(87,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1202938535,32,FLEN)
NAN_BOXED(7,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1211330820,32,FLEN)
NAN_BOXED(55,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1219715078,32,FLEN)
NAN_BOXED(13,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1228103821,32,FLEN)
NAN_BOXED(32,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1236492586,32,FLEN)
NAN_BOXED(78,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1244880645,32,FLEN)
NAN_BOXED(58,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1253268956,32,FLEN)
NAN_BOXED(10,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(921698304,32,FLEN)
NAN_BOXED(1065353277,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(926023680,32,FLEN)
NAN_BOXED(1065353307,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(895483904,32,FLEN)
NAN_BOXED(1065353227,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(925892608,32,FLEN)
NAN_BOXED(1065353312,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(916979712,32,FLEN)
NAN_BOXED(1065353274,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(921960448,32,FLEN)
NAN_BOXED(1065353309,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(3069444096,32,FLEN)
NAN_BOXED(1065353219,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(3068919808,32,FLEN)
NAN_BOXED(1065353285,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(3084845056,32,FLEN)
NAN_BOXED(1065353249,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(3094577152,32,FLEN)
NAN_BOXED(1065353241,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(3102720000,32,FLEN)
NAN_BOXED(1065353281,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(3111821312,32,FLEN)
NAN_BOXED(1065353259,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(3120345088,32,FLEN)
NAN_BOXED(1065353269,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(3128788992,32,FLEN)
NAN_BOXED(1065353295,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(3137303552,32,FLEN)
NAN_BOXED(1065353251,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(3145684480,32,FLEN)
NAN_BOXED(1065353301,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(3154100480,32,FLEN)
NAN_BOXED(1065353279,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(3162493312,32,FLEN)
NAN_BOXED(1065353309,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(3170889728,32,FLEN)
NAN_BOXED(1065353280,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(3179279808,32,FLEN)
NAN_BOXED(1065353298,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(3187670368,32,FLEN)
NAN_BOXED(1065353258,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(3196058968,32,FLEN)
NAN_BOXED(1065353301,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(3204447936,32,FLEN)
NAN_BOXED(1065353296,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(1073741869,32,FLEN)
NAN_BOXED(1065353305,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(1073741846,32,FLEN)
NAN_BOXED(1065353257,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(1073741858,32,FLEN)
NAN_BOXED(1065353279,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(1073741847,32,FLEN)
NAN_BOXED(1065353254,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(1073741872,32,FLEN)
NAN_BOXED(1065353296,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(1073741844,32,FLEN)
NAN_BOXED(1065353224,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(1073741858,32,FLEN)
NAN_BOXED(1065353220,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(1073741932,32,FLEN)
NAN_BOXED(1065353304,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(1073741976,32,FLEN)
NAN_BOXED(1065353263,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(1073742118,32,FLEN)
NAN_BOXED(1065353292,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(1073742348,32,FLEN)
NAN_BOXED(1065353241,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(1073742866,32,FLEN)
NAN_BOXED(1065353251,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(1073743900,32,FLEN)
NAN_BOXED(1065353271,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(1073745925,32,FLEN)
NAN_BOXED(1065353226,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(1073750031,32,FLEN)
NAN_BOXED(1065353246,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(1073758232,32,FLEN)
NAN_BOXED(1065353264,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(1073774602,32,FLEN)
NAN_BOXED(1065353235,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(1073807399,32,FLEN)
NAN_BOXED(1065353294,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(1073872906,32,FLEN)
NAN_BOXED(1065353235,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(1074004008,32,FLEN)
NAN_BOXED(1065353297,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(1074266158,32,FLEN)
NAN_BOXED(1065353308,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(1074790403,32,FLEN)
NAN_BOXED(1065353222,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(1075839006,32,FLEN)
NAN_BOXED(1065353276,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1122042534,32,FLEN)
NAN_BOXED(81,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1123275632,32,FLEN)
NAN_BOXED(90,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1120887909,32,FLEN)
NAN_BOXED(79,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1099335248,32,FLEN)
NAN_BOXED(21,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1119602212,32,FLEN)
NAN_BOXED(84,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1110295250,32,FLEN)
NAN_BOXED(64,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1103008667,32,FLEN)
NAN_BOXED(82,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3272719404,32,FLEN)
NAN_BOXED(25,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3280511081,32,FLEN)
NAN_BOXED(62,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3290392016,32,FLEN)
NAN_BOXED(58,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3299389034,32,FLEN)
NAN_BOXED(62,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3308265518,32,FLEN)
NAN_BOXED(38,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3316763181,32,FLEN)
NAN_BOXED(37,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3325249364,32,FLEN)
NAN_BOXED(5,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3333597794,32,FLEN)
NAN_BOXED(65,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3342019764,32,FLEN)
NAN_BOXED(36,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3350410166,32,FLEN)
NAN_BOXED(61,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3358804513,32,FLEN)
NAN_BOXED(57,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3367197964,32,FLEN)
NAN_BOXED(5,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3375586056,32,FLEN)
NAN_BOXED(32,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3383974597,32,FLEN)
NAN_BOXED(69,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3392363441,32,FLEN)
NAN_BOXED(95,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3400752455,32,FLEN)
NAN_BOXED(44,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1090525848,32,FLEN)
NAN_BOXED(5,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1124684743,32,FLEN)
NAN_BOXED(95,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1124409236,32,FLEN)
NAN_BOXED(90,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1117030819,32,FLEN)
NAN_BOXED(44,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1112866643,32,FLEN)
NAN_BOXED(21,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1122908290,32,FLEN)
NAN_BOXED(52,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1127164301,32,FLEN)
NAN_BOXED(60,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1133762117,32,FLEN)
NAN_BOXED(82,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1136654935,32,FLEN)
NAN_BOXED(17,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1145273132,32,FLEN)
NAN_BOXED(45,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1152892617,32,FLEN)
NAN_BOXED(24,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1161137732,32,FLEN)
NAN_BOXED(24,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1169658354,32,FLEN)
NAN_BOXED(95,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1177866161,32,FLEN)
NAN_BOXED(65,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1186181587,32,FLEN)
NAN_BOXED(29,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1194581316,32,FLEN)
NAN_BOXED(90,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1202947145,32,FLEN)
NAN_BOXED(54,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1211334676,32,FLEN)
NAN_BOXED(97,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1219715930,32,FLEN)
NAN_BOXED(31,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1228104763,32,FLEN)
NAN_BOXED(73,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1236492003,32,FLEN)
NAN_BOXED(25,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1244880600,32,FLEN)
NAN_BOXED(49,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1253268936,32,FLEN)
NAN_BOXED(2,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3409141085,32,FLEN)
NAN_BOXED(68,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3409141050,32,FLEN)
NAN_BOXED(92,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3409141060,32,FLEN)
NAN_BOXED(83,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3409141122,32,FLEN)
NAN_BOXED(35,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3409141132,32,FLEN)
NAN_BOXED(20,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3409141013,32,FLEN)
NAN_BOXED(89,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3409141022,32,FLEN)
NAN_BOXED(50,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3409140992,32,FLEN)
NAN_BOXED(8,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3409140815,32,FLEN)
NAN_BOXED(6,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3409140327,32,FLEN)
NAN_BOXED(98,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3409139726,32,FLEN)
NAN_BOXED(15,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3409138190,32,FLEN)
NAN_BOXED(87,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3409135334,32,FLEN)
NAN_BOXED(77,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3409129691,32,FLEN)
NAN_BOXED(8,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3409118149,32,FLEN)
NAN_BOXED(53,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3409095127,32,FLEN)
NAN_BOXED(98,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3409049330,32,FLEN)
NAN_BOXED(12,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3408957497,32,FLEN)
NAN_BOXED(10,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3408773809,32,FLEN)
NAN_BOXED(22,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3408406476,32,FLEN)
NAN_BOXED(16,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3407671688,32,FLEN)
NAN_BOXED(90,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3406202436,32,FLEN)
NAN_BOXED(7,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3400752301,32,FLEN)
NAN_BOXED(97,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1261657650,32,FLEN)
NAN_BOXED(84,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1261657578,32,FLEN)
NAN_BOXED(33,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1261657571,32,FLEN)
NAN_BOXED(30,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1261657641,32,FLEN)
NAN_BOXED(84,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1261657562,32,FLEN)
NAN_BOXED(36,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1261657536,32,FLEN)
NAN_BOXED(33,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1261657538,32,FLEN)
NAN_BOXED(67,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1261657460,32,FLEN)
NAN_BOXED(75,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1261657241,32,FLEN)
NAN_BOXED(47,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1261656941,32,FLEN)
NAN_BOXED(89,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1261656140,32,FLEN)
NAN_BOXED(29,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1261654730,32,FLEN)
NAN_BOXED(47,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1261651873,32,FLEN)
NAN_BOXED(56,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1261646118,32,FLEN)
NAN_BOXED(45,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1261634581,32,FLEN)
NAN_BOXED(4,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1261611678,32,FLEN)
NAN_BOXED(44,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1261565787,32,FLEN)
NAN_BOXED(63,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1261473947,32,FLEN)
NAN_BOXED(60,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1261290209,32,FLEN)
NAN_BOXED(12,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1260922892,32,FLEN)
NAN_BOXED(30,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1260188190,32,FLEN)
NAN_BOXED(17,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1258718896,32,FLEN)
NAN_BOXED(70,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1253269014,32,FLEN)
NAN_BOXED(32,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(924319744,32,FLEN)
NAN_BOXED(8388685,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(923664384,32,FLEN)
NAN_BOXED(8388681,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(913833984,32,FLEN)
NAN_BOXED(8388643,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(899678208,32,FLEN)
NAN_BOXED(8388626,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(3048210432,32,FLEN)
NAN_BOXED(8388613,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(923009024,32,FLEN)
NAN_BOXED(8388706,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(3066560512,32,FLEN)
NAN_BOXED(8388622,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(3067609088,32,FLEN)
NAN_BOXED(8388682,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(3086942208,32,FLEN)
NAN_BOXED(8388609,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(3094872064,32,FLEN)
NAN_BOXED(8388624,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(3102539776,32,FLEN)
NAN_BOXED(8388684,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(3111673856,32,FLEN)
NAN_BOXED(8388669,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(3120283648,32,FLEN)
NAN_BOXED(8388676,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(3128893440,32,FLEN)
NAN_BOXED(8388636,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(3137318912,32,FLEN)
NAN_BOXED(8388628,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(3145726976,32,FLEN)
NAN_BOXED(8388610,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(3154102784,32,FLEN)
NAN_BOXED(8388662,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(3162499968,32,FLEN)
NAN_BOXED(8388649,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(3170891456,32,FLEN)
NAN_BOXED(8388645,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(3179280000,32,FLEN)
NAN_BOXED(8388684,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(3187670576,32,FLEN)
NAN_BOXED(8388637,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(3196059328,32,FLEN)
NAN_BOXED(8388648,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(3204448212,32,FLEN)
NAN_BOXED(8388619,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(1073741864,32,FLEN)
NAN_BOXED(8388688,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(1073741866,32,FLEN)
NAN_BOXED(8388691,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(1073741838,32,FLEN)
NAN_BOXED(8388633,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(1073741854,32,FLEN)
NAN_BOXED(8388661,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(1073741880,32,FLEN)
NAN_BOXED(8388705,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(1073741874,32,FLEN)
NAN_BOXED(8388675,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(1073741890,32,FLEN)
NAN_BOXED(8388675,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(1073741912,32,FLEN)
NAN_BOXED(8388655,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(1073741998,32,FLEN)
NAN_BOXED(8388700,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(1073742098,32,FLEN)
NAN_BOXED(8388643,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(1073742353,32,FLEN)
NAN_BOXED(8388642,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(1073742851,32,FLEN)
NAN_BOXED(8388614,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(1073743910,32,FLEN)
NAN_BOXED(8388684,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(1073745952,32,FLEN)
NAN_BOXED(8388673,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(1073750060,32,FLEN)
NAN_BOXED(8388697,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(1073758214,32,FLEN)
NAN_BOXED(8388620,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(1073774606,32,FLEN)
NAN_BOXED(8388636,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(1073807382,32,FLEN)
NAN_BOXED(8388652,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(1073872943,32,FLEN)
NAN_BOXED(8388702,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(1074003980,32,FLEN)
NAN_BOXED(8388631,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(1074266126,32,FLEN)
NAN_BOXED(8388637,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(1074790431,32,FLEN)
NAN_BOXED(8388670,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(1075839016,32,FLEN)
NAN_BOXED(8388688,32,FLEN)
NAN_BOXED(2130706432,32,FLEN)
NAN_BOXED(3212836674,32,FLEN)
NAN_BOXED(2130706525,32,FLEN)
NAN_BOXED(2130706432,32,FLEN)
NAN_BOXED(3212836740,32,FLEN)
NAN_BOXED(2130706491,32,FLEN)
NAN_BOXED(2130706432,32,FLEN)
NAN_BOXED(3212836706,32,FLEN)
NAN_BOXED(2130706506,32,FLEN)
NAN_BOXED(2130706432,32,FLEN)
NAN_BOXED(3212836658,32,FLEN)
NAN_BOXED(2130706526,32,FLEN)
NAN_BOXED(2130706432,32,FLEN)
NAN_BOXED(3212836744,32,FLEN)
NAN_BOXED(2130706475,32,FLEN)
NAN_BOXED(2130706432,32,FLEN)
NAN_BOXED(3212836780,32,FLEN)
NAN_BOXED(2130706441,32,FLEN)
NAN_BOXED(2130706432,32,FLEN)
NAN_BOXED(3212836540,32,FLEN)
NAN_BOXED(2130706529,32,FLEN)
NAN_BOXED(2130706432,32,FLEN)
NAN_BOXED(3212836590,32,FLEN)
NAN_BOXED(2130706440,32,FLEN)
NAN_BOXED(2130706432,32,FLEN)
NAN_BOXED(3212836226,32,FLEN)
NAN_BOXED(2130706494,32,FLEN)
NAN_BOXED(2130706432,32,FLEN)
NAN_BOXED(3212835756,32,FLEN)
NAN_BOXED(2130706473,32,FLEN)
NAN_BOXED(2130706432,32,FLEN)
NAN_BOXED(3212834810,32,FLEN)
NAN_BOXED(2130706434,32,FLEN)
NAN_BOXED(2130706432,32,FLEN)
NAN_BOXED(3212832580,32,FLEN)
NAN_BOXED(2130706525,32,FLEN)
NAN_BOXED(2130706432,32,FLEN)
NAN_BOXED(3212828570,32,FLEN)
NAN_BOXED(2130706482,32,FLEN)
NAN_BOXED(2130706432,32,FLEN)
NAN_BOXED(3212820450,32,FLEN)
NAN_BOXED(2130706446,32,FLEN)
NAN_BOXED(2130706432,32,FLEN)
NAN_BOXED(3212804056,32,FLEN)
NAN_BOXED(2130706451,32,FLEN)
NAN_BOXED(2130706432,32,FLEN)
NAN_BOXED(3212771230,32,FLEN)
NAN_BOXED(2130706480,32,FLEN)
NAN_BOXED(2130706432,32,FLEN)
NAN_BOXED(3212705598,32,FLEN)
NAN_BOXED(2130706528,32,FLEN)
NAN_BOXED(2130706432,32,FLEN)
NAN_BOXED(3212574712,32,FLEN)
NAN_BOXED(2130706435,32,FLEN)
NAN_BOXED(2130706432,32,FLEN)
NAN_BOXED(3212312546,32,FLEN)
NAN_BOXED(2130706446,32,FLEN)
NAN_BOXED(2130706432,32,FLEN)
NAN_BOXED(3211788190,32,FLEN)
NAN_BOXED(2130706480,32,FLEN)
NAN_BOXED(2130706432,32,FLEN)
NAN_BOXED(3210739676,32,FLEN)
NAN_BOXED(2130706449,32,FLEN)
NAN_BOXED(2130706432,32,FLEN)
NAN_BOXED(3208642490,32,FLEN)
NAN_BOXED(2130706466,32,FLEN)
NAN_BOXED(2130706432,32,FLEN)
NAN_BOXED(3204448004,32,FLEN)
NAN_BOXED(2130706494,32,FLEN)
NAN_BOXED(2130706432,32,FLEN)
NAN_BOXED(1077936153,32,FLEN)
NAN_BOXED(2130706484,32,FLEN)
NAN_BOXED(2130706432,32,FLEN)
NAN_BOXED(1077936162,32,FLEN)
NAN_BOXED(2130706502,32,FLEN)
NAN_BOXED(2130706432,32,FLEN)
NAN_BOXED(1077936154,32,FLEN)
NAN_BOXED(2130706489,32,FLEN)
NAN_BOXED(2130706432,32,FLEN)
NAN_BOXED(1077936140,32,FLEN)
NAN_BOXED(2130706465,32,FLEN)
NAN_BOXED(2130706432,32,FLEN)
NAN_BOXED(1077936138,32,FLEN)
NAN_BOXED(2130706470,32,FLEN)
NAN_BOXED(2130706432,32,FLEN)
NAN_BOXED(1077936140,32,FLEN)
NAN_BOXED(2130706490,32,FLEN)
NAN_BOXED(2130706432,32,FLEN)
NAN_BOXED(1077936128,32,FLEN)
NAN_BOXED(2130706497,32,FLEN)
NAN_BOXED(2130706432,32,FLEN)
NAN_BOXED(1077936106,32,FLEN)
NAN_BOXED(2130706517,32,FLEN)
NAN_BOXED(2130706432,32,FLEN)
NAN_BOXED(1077936034,32,FLEN)
NAN_BOXED(2130706500,32,FLEN)
NAN_BOXED(2130706432,32,FLEN)
NAN_BOXED(1077935908,32,FLEN)
NAN_BOXED(2130706504,32,FLEN)
NAN_BOXED(2130706432,32,FLEN)
NAN_BOXED(1077935626,32,FLEN)
NAN_BOXED(2130706454,32,FLEN)
NAN_BOXED(2130706432,32,FLEN)
NAN_BOXED(1077935124,32,FLEN)
NAN_BOXED(2130706474,32,FLEN)
NAN_BOXED(2130706432,32,FLEN)
NAN_BOXED(1077934093,32,FLEN)
NAN_BOXED(2130706459,32,FLEN)
NAN_BOXED(2130706432,32,FLEN)
NAN_BOXED(1077932044,32,FLEN)
NAN_BOXED(2130706457,32,FLEN)
NAN_BOXED(2130706432,32,FLEN)
NAN_BOXED(1077927954,32,FLEN)
NAN_BOXED(2130706468,32,FLEN)
NAN_BOXED(2130706432,32,FLEN)
NAN_BOXED(1077919761,32,FLEN)
NAN_BOXED(2130706467,32,FLEN)
NAN_BOXED(2130706432,32,FLEN)
NAN_BOXED(1077903404,32,FLEN)
NAN_BOXED(2130706522,32,FLEN)
NAN_BOXED(2130706432,32,FLEN)
NAN_BOXED(1077870606,32,FLEN)
NAN_BOXED(2130706460,32,FLEN)
NAN_BOXED(2130706432,32,FLEN)
NAN_BOXED(1077805094,32,FLEN)
NAN_BOXED(2130706509,32,FLEN)
NAN_BOXED(2130706432,32,FLEN)
NAN_BOXED(1077673990,32,FLEN)
NAN_BOXED(2130706444,32,FLEN)
NAN_BOXED(2130706432,32,FLEN)
NAN_BOXED(1077411876,32,FLEN)
NAN_BOXED(2130706506,32,FLEN)
NAN_BOXED(2130706432,32,FLEN)
NAN_BOXED(1076887574,32,FLEN)
NAN_BOXED(2130706477,32,FLEN)
NAN_BOXED(2130706432,32,FLEN)
NAN_BOXED(1075839006,32,FLEN)
NAN_BOXED(2130706494,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1118683858,32,FLEN)
NAN_BOXED(63,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1082558032,32,FLEN)
NAN_BOXED(5,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1123826645,32,FLEN)
NAN_BOXED(98,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1108091198,32,FLEN)
NAN_BOXED(41,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1082558032,32,FLEN)
NAN_BOXED(35,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3260350291,32,FLEN)
NAN_BOXED(26,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3265616493,32,FLEN)
NAN_BOXED(69,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3282164120,32,FLEN)
NAN_BOXED(25,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3289749167,32,FLEN)
NAN_BOXED(85,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3299457910,32,FLEN)
NAN_BOXED(55,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3308409011,32,FLEN)
NAN_BOXED(12,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1124225565,32,FLEN)
NAN_BOXED(29,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1139961013,32,FLEN)
NAN_BOXED(90,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1152640070,32,FLEN)
NAN_BOXED(3,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1186187327,32,FLEN)
NAN_BOXED(38,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 46*((SIGALIGN)/4),4,0xdeadbeef


signature_x11_0:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x11_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x11_2:
    .fill 24*((SIGALIGN)/4),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*XLEN/32,4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

RVMODEL_DATA_END
