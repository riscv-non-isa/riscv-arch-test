
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.9.0
// timestamp : Fri Oct  7 11:55:36 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /home/reg/tools/riscv-ctg/sample_cgfs/dataset.cgf \
//                  --cgf /home/reg/tools/riscv-ctg/sample_cgfs/sample_cgfs_fext/RV32Zfinx/fmadd.s.cgf \
 \
//                  -- xlen 32  \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fmadd.s instruction of the RISC-V RV32_Zfinx,RV32_Zdinx,RV64_Zfinx,RV64_Zdinx extension for the fmadd_b2 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32I_Zfinx,RV32I_Zdinx,RV64I_Zfinx,RV64I_Zdinx")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*Zfinx.*);def TEST_CASE_1=True;",fmadd_b2)

RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_0:
// rs1 == rs2 != rs3 and rs1 == rs2 != rd and rd != rs3, rs1==x30, rs2==x30, rs3==x29, rd==x31,fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x86 and fm2 == 0x03b8d9 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00005f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x30; op3:x29; dest:x31; op1val:0x0; op2val:0x0;
op3val:0x5f; valaddr_reg:x3; val_offset:0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x30, x29, dyn, 0, 0, x3, 0*FLEN/8, x4, x1, x2)

inst_1:
// rs1 != rs2 and rs1 != rd and rs1 != rs3 and rs2 != rs3 and rs2 != rd and rs3 != rd, rs1==x31, rs2==x29, rs3==x28, rd==x30,fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x85 and fm2 == 0x73d370 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000059 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x31; op2:x29; op3:x28; dest:x30; op1val:0x0; op2val:0xc2f3d370;
op3val:0x59; valaddr_reg:x3; val_offset:3*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x30, x31, x29, x28, dyn, 0, 0, x3, 3*FLEN/8, x4, x1, x2)

inst_2:
// rs1 == rs2 == rd != rs3, rs1==x28, rs2==x28, rs3==x31, rd==x28,fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x85 and fm2 == 0x1cf208 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00003c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x28; op2:x28; op3:x31; dest:x28; op1val:0x0; op2val:0x0;
op3val:0x3c; valaddr_reg:x3; val_offset:6*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x28, x28, x28, x31, dyn, 0, 0, x3, 6*FLEN/8, x4, x1, x2)

inst_3:
// rd == rs2 == rs3 != rs1, rs1==x29, rs2==x27, rs3==x27, rd==x27,fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x85 and fm2 == 0x54ff53 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000054 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x29; op2:x27; op3:x27; dest:x27; op1val:0x0; op2val:0xc2d4ff53;
op3val:0xc2d4ff53; valaddr_reg:x3; val_offset:9*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x27, x29, x27, x27, dyn, 0, 0, x3, 9*FLEN/8, x4, x1, x2)

inst_4:
// rs2 == rs3 != rs1 and rs2 == rs3 != rd and rd != rs1, rs1==x27, rs2==x26, rs3==x26, rd==x29,fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x60352f and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000015 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x27; op2:x26; op3:x26; dest:x29; op1val:0x0; op2val:0xc0e0352f;
op3val:0xc0e0352f; valaddr_reg:x3; val_offset:12*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x29, x27, x26, x26, dyn, 0, 0, x3, 12*FLEN/8, x4, x1, x2)

inst_5:
// rs1 == rs2 == rs3 != rd, rs1==x25, rs2==x25, rs3==x25, rd==x26,fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x335dc0 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000030 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x25; op2:x25; op3:x25; dest:x26; op1val:0x0; op2val:0x0;
op3val:0x0; valaddr_reg:x3; val_offset:15*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x26, x25, x25, x25, dyn, 0, 0, x3, 15*FLEN/8, x4, x1, x2)

inst_6:
// rs1 == rs2 == rs3 == rd, rs1==x24, rs2==x24, rs3==x24, rd==x24,fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x84 and fm2 == 0x335dc0 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000020 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x24; op2:x24; op3:x24; dest:x24; op1val:0x0; op2val:0x0;
op3val:0x0; valaddr_reg:x3; val_offset:18*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x24, x24, x24, x24, dyn, 0, 0, x3, 18*FLEN/8, x4, x1, x2)

inst_7:
// rs1 == rs3 != rs2 and rs1 == rs3 != rd and rd != rs2, rs1==x23, rs2==x31, rs3==x23, rd==x25,fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x85 and fm2 == 0x228cf6 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000046 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x23; op2:x31; op3:x23; dest:x25; op1val:0x0; op2val:0x42a28cf6;
op3val:0x0; valaddr_reg:x3; val_offset:21*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x25, x23, x31, x23, dyn, 0, 0, x3, 21*FLEN/8, x4, x1, x2)

inst_8:
// rs1 == rd != rs2 and rs1 == rd != rs3 and rs3 != rs2, rs1==x22, rs2==x23, rs3==x30, rd==x22,fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x86 and fm2 == 0x7f094c and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00004a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x22; op2:x23; op3:x30; dest:x22; op1val:0x0; op2val:0x437f094c;
op3val:0x4a; valaddr_reg:x3; val_offset:24*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x22, x22, x23, x30, dyn, 0, 0, x3, 24*FLEN/8, x4, x1, x2)

inst_9:
// rs2 == rd != rs1 and rs2 == rd != rs3 and rs3 != rs1, rs1==x26, rs2==x21, rs3==x22, rd==x21,fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x88 and fm2 == 0x32aa62 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000002 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x26; op2:x21; op3:x22; dest:x21; op1val:0x0; op2val:0x4432aa62;
op3val:0x2; valaddr_reg:x3; val_offset:27*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x21, x26, x21, x22, dyn, 0, 0, x3, 27*FLEN/8, x4, x1, x2)

inst_10:
// rs3 == rd != rs1 and rs3 == rd != rs2 and rs2 != rs1, rs1==x21, rs2==x22, rs3==x20, rd==x20,fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x89 and fm2 == 0x2a1525 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000035 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x21; op2:x22; op3:x20; dest:x20; op1val:0x0; op2val:0x44aa1525;
op3val:0x35; valaddr_reg:x3; val_offset:30*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x20, x21, x22, x20, dyn, 0, 0, x3, 30*FLEN/8, x4, x1, x2)

inst_11:
// rs1 == rd == rs3 != rs2, rs1==x19, rs2==x20, rs3==x19, rd==x19,fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x8a and fm2 == 0x3143a6 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000018 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x19; op2:x20; op3:x19; dest:x19; op1val:0x0; op2val:0x453143a6;
op3val:0x0; valaddr_reg:x3; val_offset:33*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x19, x19, x20, x19, dyn, 0, 0, x3, 33*FLEN/8, x4, x1, x2)

inst_12:
// rs1==x20, rs2==x19, rs3==x21, rd==x23,fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x8b and fm2 == 0x327254 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000015 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x20; op2:x19; op3:x21; dest:x23; op1val:0x0; op2val:0x45b27254;
op3val:0x15; valaddr_reg:x3; val_offset:36*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x23, x20, x19, x21, dyn, 0, 0, x3, 36*FLEN/8, x4, x1, x2)

inst_13:
// rs1==x17, rs2==x16, rs3==x15, rd==x18,fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x8c and fm2 == 0x32f8db and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000012 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x17; op2:x16; op3:x15; dest:x18; op1val:0x0; op2val:0x4632f8db;
op3val:0x12; valaddr_reg:x3; val_offset:39*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x18, x17, x16, x15, dyn, 0, 0, x3, 39*FLEN/8, x4, x1, x2)

inst_14:
// rs1==x15, rs2==x18, rs3==x16, rd==x17,fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x8d and fm2 == 0x332e1b and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000011 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x15; op2:x18; op3:x16; dest:x17; op1val:0x0; op2val:0x46b32e1b;
op3val:0x11; valaddr_reg:x3; val_offset:42*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x17, x15, x18, x16, dyn, 0, 0, x3, 42*FLEN/8, x4, x1, x2)

inst_15:
// rs1==x18, rs2==x15, rs3==x17, rd==x16,fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x8e and fm2 == 0x335c59 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x18; op2:x15; op3:x17; dest:x16; op1val:0x0; op2val:0x47335c59;
op3val:0x1; valaddr_reg:x3; val_offset:45*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x16, x18, x15, x17, dyn, 0, 0, x3, 45*FLEN/8, x4, x1, x2)

inst_16:
// rs1==x16, rs2==x17, rs3==x18, rd==x15,fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x8f and fm2 == 0x334ad5 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00001b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x16; op2:x17; op3:x18; dest:x15; op1val:0x0; op2val:0x47b34ad5;
op3val:0x1b; valaddr_reg:x3; val_offset:48*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x15, x16, x17, x18, dyn, 0, 0, x3, 48*FLEN/8, x4, x1, x2)

inst_17:
// rs1==x13, rs2==x12, rs3==x11, rd==x14,fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x90 and fm2 == 0x33560a and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000016 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x13; op2:x12; op3:x11; dest:x14; op1val:0x0; op2val:0x4833560a;
op3val:0x16; valaddr_reg:x3; val_offset:51*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x14, x13, x12, x11, dyn, 0, 0, x3, 51*FLEN/8, x4, x1, x2)

inst_18:
// rs1==x11, rs2==x14, rs3==x12, rd==x13,fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x91 and fm2 == 0x335718 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000026 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x11; op2:x14; op3:x12; dest:x13; op1val:0x0; op2val:0x48b35718;
op3val:0x26; valaddr_reg:x3; val_offset:54*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x13, x11, x14, x12, dyn, 0, 0, x3, 54*FLEN/8, x4, x1, x2)

inst_19:
// rs1==x14, rs2==x11, rs3==x13, rd==x12,fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x92 and fm2 == 0x335b79 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00001a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x14; op2:x11; op3:x13; dest:x12; op1val:0x0; op2val:0x49335b79;
op3val:0x1a; valaddr_reg:x3; val_offset:57*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x12, x14, x11, x13, dyn, 0, 0, x3, 57*FLEN/8, x4, x1, x2)

inst_20:
// rs1==x12, rs2==x13, rs3==x14, rd==x11,fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x93 and fm2 == 0x335cb2 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000018 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x12; op2:x13; op3:x14; dest:x11; op1val:0x0; op2val:0x49b35cb2;
op3val:0x18; valaddr_reg:x3; val_offset:60*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x11, x12, x13, x14, dyn, 0, 0, x3, 60*FLEN/8, x4, x1, x2)

inst_21:
// rs1==x9, rs2==x8, rs3==x7, rd==x10,fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x94 and fm2 == 0x335ca7 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000032 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x9; op2:x8; op3:x7; dest:x10; op1val:0x0; op2val:0x4a335ca7;
op3val:0x32; valaddr_reg:x3; val_offset:63*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x10, x9, x8, x7, dyn, 0, 0, x3, 63*FLEN/8, x4, x1, x2)
RVTEST_VALBASEUPD(x13,test_dataset_1)
RVTEST_SIGBASE(x11,signature_x11_0)

inst_22:
// rs1==x7, rs2==x10, rs3==x8, rd==x9,fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x95 and fm2 == 0x335db7 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x7; op2:x10; op3:x8; dest:x9; op1val:0x0; op2val:0x4ab35db7;
op3val:0x3; valaddr_reg:x13; val_offset:0*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x9, x7, x10, x8, dyn, 0, 0, x13, 0*FLEN/8, x14, x11, x12)

inst_23:
// rs1==x10, rs2==x7, rs3==x9, rd==x8,fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x85 and fm2 == 0x1a2491 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000036 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x10; op2:x7; op3:x9; dest:x8; op1val:0x0; op2val:0xc29a2491;
op3val:0x36; valaddr_reg:x13; val_offset:3*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x8, x10, x7, x9, dyn, 0, 0, x13, 3*FLEN/8, x14, x11, x12)

inst_24:
// rs1==x8, rs2==x9, rs3==x10, rd==x7,fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x6b6b0b and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000013 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x8; op2:x9; op3:x10; dest:x7; op1val:0x0; op2val:0xc1eb6b0b;
op3val:0x13; valaddr_reg:x13; val_offset:6*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x7, x8, x9, x10, dyn, 0, 0, x13, 6*FLEN/8, x14, x11, x12)

inst_25:
// rs1==x5, rs2==x4, rs3==x3, rd==x6,fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x11bc2c and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000009 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x5; op2:x4; op3:x3; dest:x6; op1val:0x0; op2val:0xc191bc2c;
op3val:0x9; valaddr_reg:x13; val_offset:9*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x6, x5, x4, x3, dyn, 0, 0, x13, 9*FLEN/8, x14, x11, x12)

inst_26:
// rs1==x3, rs2==x6, rs3==x4, rd==x5,fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x85 and fm2 == 0x03b8d9 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000027 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x3; op2:x6; op3:x4; dest:x5; op1val:0x0; op2val:0xc283b8d9;
op3val:0x27; valaddr_reg:x13; val_offset:12*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x5, x3, x6, x4, dyn, 0, 0, x13, 12*FLEN/8, x14, x11, x12)

inst_27:
// rs1==x6, rs2==x3, rs3==x5, rd==x4,fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x86 and fm2 == 0x02521d and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00004d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x6; op2:x3; op3:x5; dest:x4; op1val:0x0; op2val:0xc302521d;
op3val:0x4d; valaddr_reg:x13; val_offset:15*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x4, x6, x3, x5, dyn, 0, 0, x13, 15*FLEN/8, x14, x11, x12)

inst_28:
// rs1==x4, rs2==x5, rs3==x6, rd==x3,fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x84 and fm2 == 0x65d01d and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000009 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x4; op2:x5; op3:x6; dest:x3; op1val:0x0; op2val:0xc265d01d;
op3val:0x9; valaddr_reg:x13; val_offset:18*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x3, x4, x5, x6, dyn, 0, 0, x13, 18*FLEN/8, x14, x11, x12)

inst_29:
// rs1==x2,fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x86 and fm2 == 0x1a2491 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00002e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x2; op2:x30; op3:x29; dest:x31; op1val:0x0; op2val:0xc31a2491;
op3val:0x2e; valaddr_reg:x13; val_offset:21*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x2, x30, x29, dyn, 0, 0, x13, 21*FLEN/8, x14, x11, x12)

inst_30:
// rs1==x1,fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x87 and fm2 == 0x051f94 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00003e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x1; op2:x30; op3:x29; dest:x31; op1val:0x0; op2val:0xc3851f94;
op3val:0x3e; valaddr_reg:x13; val_offset:24*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x1, x30, x29, dyn, 0, 0, x13, 24*FLEN/8, x14, x11, x12)

inst_31:
// rs1==x0,fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x87 and fm2 == 0x442e89 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000018 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x0; op2:x30; op3:x29; dest:x31; op1val:0x0; op2val:0xc3c42e89;
op3val:0x18; valaddr_reg:x13; val_offset:27*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x0, x30, x29, dyn, 0, 0, x13, 27*FLEN/8, x14, x11, x12)

inst_32:
// rs2==x2,fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x88 and fm2 == 0x48bc6b and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00003d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x2; op3:x29; dest:x31; op1val:0x0; op2val:0xc448bc6b;
op3val:0x3d; valaddr_reg:x13; val_offset:30*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x2, x29, dyn, 0, 0, x13, 30*FLEN/8, x14, x11, x12)

inst_33:
// rs2==x1,fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x89 and fm2 == 0x34c47b and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000008 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x1; op3:x29; dest:x31; op1val:0x0; op2val:0xc4b4c47b;
op3val:0x8; valaddr_reg:x13; val_offset:33*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x1, x29, dyn, 0, 0, x13, 33*FLEN/8, x14, x11, x12)

inst_34:
// rs2==x0,fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x8a and fm2 == 0x33a103 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x0; op3:x29; dest:x31; op1val:0x0; op2val:0x0;
op3val:0x3; valaddr_reg:x13; val_offset:36*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x0, x29, dyn, 0, 0, x13, 36*FLEN/8, x14, x11, x12)

inst_35:
// rs3==x2,fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x8b and fm2 == 0x35a4b0 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000034 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x2; dest:x31; op1val:0x0; op2val:0xc5b5a4b0;
op3val:0x34; valaddr_reg:x13; val_offset:39*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x2, dyn, 0, 0, x13, 39*FLEN/8, x14, x11, x12)

inst_36:
// rs3==x1,fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x8c and fm2 == 0x34ebb8 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000047 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x1; dest:x31; op1val:0x0; op2val:0xc634ebb8;
op3val:0x47; valaddr_reg:x13; val_offset:42*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x1, dyn, 0, 0, x13, 42*FLEN/8, x14, x11, x12)

inst_37:
// rs3==x0,fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x8d and fm2 == 0x33e178 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00002f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x0; dest:x31; op1val:0x0; op2val:0xc6b3e178;
op3val:0x0; valaddr_reg:x13; val_offset:45*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x0, dyn, 0, 0, x13, 45*FLEN/8, x14, x11, x12)

inst_38:
// rd==x2,fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x8e and fm2 == 0x33c6d8 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00004b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x31; op2:x30; op3:x29; dest:x2; op1val:0x0; op2val:0xc733c6d8;
op3val:0x4b; valaddr_reg:x13; val_offset:48*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x2, x31, x30, x29, dyn, 0, 0, x13, 48*FLEN/8, x14, x11, x12)

inst_39:
// rd==x1,fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x8f and fm2 == 0x338663 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00003a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x31; op2:x30; op3:x29; dest:x1; op1val:0x0; op2val:0xc7b38663;
op3val:0x3a; valaddr_reg:x13; val_offset:51*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x1, x31, x30, x29, dyn, 0, 0, x13, 51*FLEN/8, x14, x11, x12)

inst_40:
// rd==x0,fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x90 and fm2 == 0x337da1 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00005b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x31; op2:x30; op3:x29; dest:x0; op1val:0x0; op2val:0xc8337da1;
op3val:0x5b; valaddr_reg:x13; val_offset:54*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x0, x31, x30, x29, dyn, 0, 0, x13, 54*FLEN/8, x14, x11, x12)

inst_41:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x91 and fm2 == 0x336bc3 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000050 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0xc8b36bc3;
op3val:0x50; valaddr_reg:x13; val_offset:57*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 57*FLEN/8, x14, x11, x12)

inst_42:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x92 and fm2 == 0x335f26 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000010 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0xc9335f26;
op3val:0x10; valaddr_reg:x13; val_offset:60*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 60*FLEN/8, x14, x11, x12)

inst_43:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x93 and fm2 == 0x336060 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00003c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0xc9b36060;
op3val:0x3c; valaddr_reg:x13; val_offset:63*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 63*FLEN/8, x14, x11, x12)

inst_44:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x94 and fm2 == 0x335f31 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000042 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0xca335f31;
op3val:0x42; valaddr_reg:x13; val_offset:66*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 66*FLEN/8, x14, x11, x12)

inst_45:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x95 and fm2 == 0x335e7e and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000044 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0xcab35e7e;
op3val:0x44; valaddr_reg:x13; val_offset:69*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 69*FLEN/8, x14, x11, x12)

inst_46:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x6d and fm2 == 0x6c0000 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x00003c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x3f800000; op2val:0xb6ec0000;
op3val:0x3f80003c; valaddr_reg:x13; val_offset:72*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 72*FLEN/8, x14, x11, x12)

inst_47:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x6e and fm2 == 0x140000 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x00004c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x3f800000; op2val:0xb7140000;
op3val:0x3f80004c; valaddr_reg:x13; val_offset:75*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 75*FLEN/8, x14, x11, x12)

inst_48:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x6d and fm2 == 0x080000 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000026 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x3f800000; op2val:0xb6880000;
op3val:0x3f800026; valaddr_reg:x13; val_offset:78*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 78*FLEN/8, x14, x11, x12)

inst_49:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x6d and fm2 == 0x400000 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000038 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x3f800000; op2val:0xb6c00000;
op3val:0x3f800038; valaddr_reg:x13; val_offset:81*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 81*FLEN/8, x14, x11, x12)

inst_50:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x6b and fm2 == 0x300000 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x00001b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x3f800000; op2val:0xb5b00000;
op3val:0x3f80001b; valaddr_reg:x13; val_offset:84*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 84*FLEN/8, x14, x11, x12)

inst_51:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x6d and fm2 == 0x080000 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000042 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x3f800000; op2val:0xb6880000;
op3val:0x3f800042; valaddr_reg:x13; val_offset:87*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 87*FLEN/8, x14, x11, x12)

inst_52:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x6d and fm2 == 0x340000 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000013 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x3f800000; op2val:0x36b40000;
op3val:0x3f800013; valaddr_reg:x13; val_offset:90*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 90*FLEN/8, x14, x11, x12)

inst_53:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x6e and fm2 == 0x380000 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000024 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x3f800000; op2val:0x37380000;
op3val:0x3f800024; valaddr_reg:x13; val_offset:93*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 93*FLEN/8, x14, x11, x12)

inst_54:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x6f and fm2 == 0x580000 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000028 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x3f800000; op2val:0x37d80000;
op3val:0x3f800028; valaddr_reg:x13; val_offset:96*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 96*FLEN/8, x14, x11, x12)

inst_55:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x70 and fm2 == 0x6c0000 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000028 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x3f800000; op2val:0x386c0000;
op3val:0x3f800028; valaddr_reg:x13; val_offset:99*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 99*FLEN/8, x14, x11, x12)

inst_56:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x71 and fm2 == 0x7d4000 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x00000b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x3f800000; op2val:0x38fd4000;
op3val:0x3f80000b; valaddr_reg:x13; val_offset:102*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102*FLEN/8, x14, x11, x12)

inst_57:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x72 and fm2 == 0x746000 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x00005d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x3f800000; op2val:0x39746000;
op3val:0x3f80005d; valaddr_reg:x13; val_offset:105*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 105*FLEN/8, x14, x11, x12)

inst_58:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x73 and fm2 == 0x7c2000 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x00003e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x3f800000; op2val:0x39fc2000;
op3val:0x3f80003e; valaddr_reg:x13; val_offset:108*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 108*FLEN/8, x14, x11, x12)

inst_59:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x74 and fm2 == 0x7d1800 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x00005d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x3f800000; op2val:0x3a7d1800;
op3val:0x3f80005d; valaddr_reg:x13; val_offset:111*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 111*FLEN/8, x14, x11, x12)

inst_60:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x75 and fm2 == 0x7fd400 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x00000b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x3f800000; op2val:0x3affd400;
op3val:0x3f80000b; valaddr_reg:x13; val_offset:114*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 114*FLEN/8, x14, x11, x12)

inst_61:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x76 and fm2 == 0x7ff600 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000005 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x3f800000; op2val:0x3b7ff600;
op3val:0x3f800005; valaddr_reg:x13; val_offset:117*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 117*FLEN/8, x14, x11, x12)

inst_62:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x77 and fm2 == 0x7fa100 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x00005f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x3f800000; op2val:0x3bffa100;
op3val:0x3f80005f; valaddr_reg:x13; val_offset:120*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 120*FLEN/8, x14, x11, x12)

inst_63:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x78 and fm2 == 0x7fef80 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000021 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x3f800000; op2val:0x3c7fef80;
op3val:0x3f800021; valaddr_reg:x13; val_offset:123*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 123*FLEN/8, x14, x11, x12)

inst_64:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x79 and fm2 == 0x7feb00 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000054 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x3f800000; op2val:0x3cffeb00;
op3val:0x3f800054; valaddr_reg:x13; val_offset:126*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 126*FLEN/8, x14, x11, x12)

inst_65:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7a and fm2 == 0x7ffda0 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000013 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x3f800000; op2val:0x3d7ffda0;
op3val:0x3f800013; valaddr_reg:x13; val_offset:129*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 129*FLEN/8, x14, x11, x12)

inst_66:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7b and fm2 == 0x7ffae0 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000052 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x3f800000; op2val:0x3dfffae0;
op3val:0x3f800052; valaddr_reg:x13; val_offset:132*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 132*FLEN/8, x14, x11, x12)

inst_67:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x7ffe00 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000040 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x3f800000; op2val:0x3e7ffe00;
op3val:0x3f800040; valaddr_reg:x13; val_offset:135*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 135*FLEN/8, x14, x11, x12)

inst_68:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x7fff94 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x00001b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x3f800000; op2val:0x3effff94;
op3val:0x3f80001b; valaddr_reg:x13; val_offset:138*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 138*FLEN/8, x14, x11, x12)

inst_69:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x000030 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x00005e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x3f800000; op2val:0xc0000030;
op3val:0x3f80005e; valaddr_reg:x13; val_offset:141*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 141*FLEN/8, x14, x11, x12)

inst_70:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x00002a and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000051 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x3f800000; op2val:0xc000002a;
op3val:0x3f800051; valaddr_reg:x13; val_offset:144*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 144*FLEN/8, x14, x11, x12)

inst_71:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x000009 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x00000e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x3f800000; op2val:0xc0000009;
op3val:0x3f80000e; valaddr_reg:x13; val_offset:147*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 147*FLEN/8, x14, x11, x12)

inst_72:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x000020 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000038 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x3f800000; op2val:0xc0000020;
op3val:0x3f800038; valaddr_reg:x13; val_offset:150*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 150*FLEN/8, x14, x11, x12)

inst_73:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x000012 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000014 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x3f800000; op2val:0xc0000012;
op3val:0x3f800014; valaddr_reg:x13; val_offset:153*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 153*FLEN/8, x14, x11, x12)

inst_74:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x00002b and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000036 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x3f800000; op2val:0xc000002b;
op3val:0x3f800036; valaddr_reg:x13; val_offset:156*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 156*FLEN/8, x14, x11, x12)

inst_75:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x00002a and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000013 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x3f800000; op2val:0xc000002a;
op3val:0x3f800013; valaddr_reg:x13; val_offset:159*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 159*FLEN/8, x14, x11, x12)

inst_76:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x000068 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000050 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x3f800000; op2val:0xc0000068;
op3val:0x3f800050; valaddr_reg:x13; val_offset:162*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 162*FLEN/8, x14, x11, x12)

inst_77:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x0000a2 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000043 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x3f800000; op2val:0xc00000a2;
op3val:0x3f800043; valaddr_reg:x13; val_offset:165*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 165*FLEN/8, x14, x11, x12)

inst_78:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x000120 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x3f800000; op2val:0xc0000120;
op3val:0x3f80003f; valaddr_reg:x13; val_offset:168*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 168*FLEN/8, x14, x11, x12)

inst_79:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x00021f and fs3 == 0 and fe3 == 0x7f and fm3 == 0x00003e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x3f800000; op2val:0xc000021f;
op3val:0x3f80003e; valaddr_reg:x13; val_offset:171*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 171*FLEN/8, x14, x11, x12)

inst_80:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x000413 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000026 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x3f800000; op2val:0xc0000413;
op3val:0x3f800026; valaddr_reg:x13; val_offset:174*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 174*FLEN/8, x14, x11, x12)

inst_81:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x00081a and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000034 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x3f800000; op2val:0xc000081a;
op3val:0x3f800034; valaddr_reg:x13; val_offset:177*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 177*FLEN/8, x14, x11, x12)

inst_82:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x001008 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x3f800000; op2val:0xc0001008;
op3val:0x3f80000f; valaddr_reg:x13; val_offset:180*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 180*FLEN/8, x14, x11, x12)

inst_83:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x002022 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000045 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x3f800000; op2val:0xc0002022;
op3val:0x3f800045; valaddr_reg:x13; val_offset:183*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 183*FLEN/8, x14, x11, x12)

inst_84:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x004028 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000051 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x3f800000; op2val:0xc0004028;
op3val:0x3f800051; valaddr_reg:x13; val_offset:186*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 186*FLEN/8, x14, x11, x12)

inst_85:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x008016 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x00002c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x3f800000; op2val:0xc0008016;
op3val:0x3f80002c; valaddr_reg:x13; val_offset:189*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 189*FLEN/8, x14, x11, x12)

inst_86:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x010006 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x00000c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x3f800000; op2val:0xc0010006;
op3val:0x3f80000c; valaddr_reg:x13; val_offset:192*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 192*FLEN/8, x14, x11, x12)

inst_87:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x020012 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000023 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x3f800000; op2val:0xc0020012;
op3val:0x3f800023; valaddr_reg:x13; val_offset:195*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 195*FLEN/8, x14, x11, x12)

inst_88:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x040004 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000009 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x3f800000; op2val:0xc0040004;
op3val:0x3f800009; valaddr_reg:x13; val_offset:198*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 198*FLEN/8, x14, x11, x12)

inst_89:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x08002c and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000059 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x3f800000; op2val:0xc008002c;
op3val:0x3f800059; valaddr_reg:x13; val_offset:201*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 201*FLEN/8, x14, x11, x12)

inst_90:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x100031 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000062 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x3f800000; op2val:0xc0100031;
op3val:0x3f800062; valaddr_reg:x13; val_offset:204*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 204*FLEN/8, x14, x11, x12)

inst_91:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x200018 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x00002f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x3f800000; op2val:0xc0200018;
op3val:0x3f80002f; valaddr_reg:x13; val_offset:207*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 207*FLEN/8, x14, x11, x12)

inst_92:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x85 and fm2 == 0x2e9049 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0xc2ae9049;
op3val:0x3f; valaddr_reg:x13; val_offset:210*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 210*FLEN/8, x14, x11, x12)

inst_93:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x86 and fm2 == 0x068650 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000063 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0xc3068650;
op3val:0x63; valaddr_reg:x13; val_offset:213*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 213*FLEN/8, x14, x11, x12)

inst_94:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x84 and fm2 == 0x5a9a41 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00002c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0xc25a9a41;
op3val:0x2c; valaddr_reg:x13; val_offset:216*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 216*FLEN/8, x14, x11, x12)

inst_95:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x85 and fm2 == 0x38f8ad and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00004b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0xc2b8f8ad;
op3val:0x4b; valaddr_reg:x13; val_offset:219*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 219*FLEN/8, x14, x11, x12)

inst_96:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x84 and fm2 == 0x76a0e7 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00003d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0xc276a0e7;
op3val:0x3d; valaddr_reg:x13; val_offset:222*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 222*FLEN/8, x14, x11, x12)

inst_97:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x49c977 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00002a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0xc149c977;
op3val:0x2a; valaddr_reg:x13; val_offset:225*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 225*FLEN/8, x14, x11, x12)

inst_98:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x60352f and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00003c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0x40e0352f;
op3val:0x3c; valaddr_reg:x13; val_offset:228*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 228*FLEN/8, x14, x11, x12)

inst_99:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x85 and fm2 == 0x335dc0 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000041 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0x42b35dc0;
op3val:0x41; valaddr_reg:x13; val_offset:231*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 231*FLEN/8, x14, x11, x12)

inst_100:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x87 and fm2 == 0x1489a3 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00002d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0x439489a3;
op3val:0x2d; valaddr_reg:x13; val_offset:234*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 234*FLEN/8, x14, x11, x12)

inst_101:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x88 and fm2 == 0x16a3bc and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000053 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0x4416a3bc;
op3val:0x53; valaddr_reg:x13; val_offset:237*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 237*FLEN/8, x14, x11, x12)

inst_102:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x89 and fm2 == 0x22e6a4 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00005f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0x44a2e6a4;
op3val:0x5f; valaddr_reg:x13; val_offset:240*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 240*FLEN/8, x14, x11, x12)

inst_103:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x8a and fm2 == 0x2f833c and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00002d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0x452f833c;
op3val:0x2d; valaddr_reg:x13; val_offset:243*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 243*FLEN/8, x14, x11, x12)

inst_104:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x8b and fm2 == 0x2f833c and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000059 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0x45af833c;
op3val:0x59; valaddr_reg:x13; val_offset:246*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 246*FLEN/8, x14, x11, x12)

inst_105:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x8c and fm2 == 0x325be9 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00002f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0x46325be9;
op3val:0x2f; valaddr_reg:x13; val_offset:249*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 249*FLEN/8, x14, x11, x12)

inst_106:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x8d and fm2 == 0x32a4c7 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000043 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0x46b2a4c7;
op3val:0x43; valaddr_reg:x13; val_offset:252*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 252*FLEN/8, x14, x11, x12)

inst_107:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x8e and fm2 == 0x32ffdc and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000044 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0x4732ffdc;
op3val:0x44; valaddr_reg:x13; val_offset:255*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 255*FLEN/8, x14, x11, x12)

inst_108:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x8f and fm2 == 0x334c3b and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00001a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0x47b34c3b;
op3val:0x1a; valaddr_reg:x13; val_offset:258*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 258*FLEN/8, x14, x11, x12)

inst_109:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x90 and fm2 == 0x334861 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00003e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0x48334861;
op3val:0x3e; valaddr_reg:x13; val_offset:261*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 261*FLEN/8, x14, x11, x12)

inst_110:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x91 and fm2 == 0x334e55 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000059 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0x48b34e55;
op3val:0x59; valaddr_reg:x13; val_offset:264*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 264*FLEN/8, x14, x11, x12)

inst_111:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x92 and fm2 == 0x3355b1 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00005d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0x493355b1;
op3val:0x5d; valaddr_reg:x13; val_offset:267*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 267*FLEN/8, x14, x11, x12)

inst_112:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x93 and fm2 == 0x335cd4 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000016 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0x49b35cd4;
op3val:0x16; valaddr_reg:x13; val_offset:270*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 270*FLEN/8, x14, x11, x12)

inst_113:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x94 and fm2 == 0x335ceb and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000027 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0x4a335ceb;
op3val:0x27; valaddr_reg:x13; val_offset:273*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 273*FLEN/8, x14, x11, x12)

inst_114:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x95 and fm2 == 0x335cbe and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00005d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0x4ab35cbe;
op3val:0x5d; valaddr_reg:x13; val_offset:276*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 276*FLEN/8, x14, x11, x12)

inst_115:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x84 and fm2 == 0x15bc2c and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00001a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0xc215bc2c;
op3val:0x1a; valaddr_reg:x13; val_offset:279*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 279*FLEN/8, x14, x11, x12)

inst_116:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x85 and fm2 == 0x5d67b8 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00004c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0xc2dd67b8;
op3val:0x4c; valaddr_reg:x13; val_offset:282*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 282*FLEN/8, x14, x11, x12)

inst_117:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x85 and fm2 == 0x6e3882 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000050 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0xc2ee3882;
op3val:0x50; valaddr_reg:x13; val_offset:285*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 285*FLEN/8, x14, x11, x12)

inst_118:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x84 and fm2 == 0x54ff53 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00001d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0xc254ff53;
op3val:0x1d; valaddr_reg:x13; val_offset:288*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 288*FLEN/8, x14, x11, x12)

inst_119:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x86 and fm2 == 0x0953c7 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000051 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0xc30953c7;
op3val:0x51; valaddr_reg:x13; val_offset:291*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 291*FLEN/8, x14, x11, x12)

inst_120:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x86 and fm2 == 0x03b8d9 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00003d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0xc303b8d9;
op3val:0x3d; valaddr_reg:x13; val_offset:294*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 294*FLEN/8, x14, x11, x12)

inst_121:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x85 and fm2 == 0x73d370 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000016 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0xc2f3d370;
op3val:0x16; valaddr_reg:x13; val_offset:297*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 297*FLEN/8, x14, x11, x12)

inst_122:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x86 and fm2 == 0x4dfdaa and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000012 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0xc34dfdaa;
op3val:0x12; valaddr_reg:x13; val_offset:300*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 300*FLEN/8, x14, x11, x12)

inst_123:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x87 and fm2 == 0x50cb21 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000029 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0xc3d0cb21;
op3val:0x29; valaddr_reg:x13; val_offset:303*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 303*FLEN/8, x14, x11, x12)

inst_124:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x88 and fm2 == 0x496fc9 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00003e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0xc4496fc9;
op3val:0x3e; valaddr_reg:x13; val_offset:306*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 306*FLEN/8, x14, x11, x12)

inst_125:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x89 and fm2 == 0x3ffa57 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000047 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0xc4bffa57;
op3val:0x47; valaddr_reg:x13; val_offset:309*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 309*FLEN/8, x14, x11, x12)

inst_126:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x8a and fm2 == 0x382ee4 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000036 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0xc5382ee4;
op3val:0x36; valaddr_reg:x13; val_offset:312*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 312*FLEN/8, x14, x11, x12)

inst_127:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x8b and fm2 == 0x35616d and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00002d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0xc5b5616d;
op3val:0x2d; valaddr_reg:x13; val_offset:315*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 315*FLEN/8, x14, x11, x12)

inst_128:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x8c and fm2 == 0x353fcb and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000055 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0xc6353fcb;
op3val:0x55; valaddr_reg:x13; val_offset:318*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 318*FLEN/8, x14, x11, x12)

inst_129:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x8d and fm2 == 0x34358c and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00004c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0xc6b4358c;
op3val:0x4c; valaddr_reg:x13; val_offset:321*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 321*FLEN/8, x14, x11, x12)

inst_130:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x8e and fm2 == 0x338a97 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0xc7338a97;
op3val:0x1f; valaddr_reg:x13; val_offset:324*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 324*FLEN/8, x14, x11, x12)

inst_131:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x8f and fm2 == 0x335f26 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0xc7b35f26;
op3val:0x1; valaddr_reg:x13; val_offset:327*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 327*FLEN/8, x14, x11, x12)

inst_132:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x90 and fm2 == 0x337051 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000034 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0xc8337051;
op3val:0x34; valaddr_reg:x13; val_offset:330*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 330*FLEN/8, x14, x11, x12)

inst_133:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x91 and fm2 == 0x336735 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000035 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0xc8b36735;
op3val:0x35; valaddr_reg:x13; val_offset:333*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 333*FLEN/8, x14, x11, x12)

inst_134:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x92 and fm2 == 0x3365a1 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000059 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0xc93365a1;
op3val:0x59; valaddr_reg:x13; val_offset:336*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 336*FLEN/8, x14, x11, x12)

inst_135:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x93 and fm2 == 0x335e03 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000005 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0xc9b35e03;
op3val:0x5; valaddr_reg:x13; val_offset:339*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 339*FLEN/8, x14, x11, x12)

inst_136:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x94 and fm2 == 0x335e0e and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00000d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0xca335e0e;
op3val:0xd; valaddr_reg:x13; val_offset:342*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 342*FLEN/8, x14, x11, x12)

inst_137:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x95 and fm2 == 0x335e86 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000046 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0xcab35e86;
op3val:0x46; valaddr_reg:x13; val_offset:345*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 345*FLEN/8, x14, x11, x12)

inst_138:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x96 and fm2 == 0x335d54 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00004b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0x4b335d54;
op3val:0x4b; valaddr_reg:x13; val_offset:348*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 348*FLEN/8, x14, x11, x12)

inst_139:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x96 and fm2 == 0x335d7b and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00002e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0x4b335d7b;
op3val:0x2e; valaddr_reg:x13; val_offset:351*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 351*FLEN/8, x14, x11, x12)

inst_140:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x96 and fm2 == 0x335d6d and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000036 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0x4b335d6d;
op3val:0x36; valaddr_reg:x13; val_offset:354*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 354*FLEN/8, x14, x11, x12)

inst_141:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x96 and fm2 == 0x335d4d and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000049 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0x4b335d4d;
op3val:0x49; valaddr_reg:x13; val_offset:357*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 357*FLEN/8, x14, x11, x12)

inst_142:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x96 and fm2 == 0x335d54 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00003c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0x4b335d54;
op3val:0x3c; valaddr_reg:x13; val_offset:360*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 360*FLEN/8, x14, x11, x12)

inst_143:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x96 and fm2 == 0x335d74 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000015 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0x4b335d74;
op3val:0x15; valaddr_reg:x13; val_offset:363*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 363*FLEN/8, x14, x11, x12)

inst_144:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x96 and fm2 == 0x335cfe and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000049 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0x4b335cfe;
op3val:0x49; valaddr_reg:x13; val_offset:366*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 366*FLEN/8, x14, x11, x12)

inst_145:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x96 and fm2 == 0x335ce6 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00001a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0x4b335ce6;
op3val:0x1a; valaddr_reg:x13; val_offset:369*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 369*FLEN/8, x14, x11, x12)

inst_146:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x96 and fm2 == 0x335bea and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00004e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0x4b335bea;
op3val:0x4e; valaddr_reg:x13; val_offset:372*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 372*FLEN/8, x14, x11, x12)

inst_147:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x96 and fm2 == 0x335ab2 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00002d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0x4b335ab2;
op3val:0x2d; valaddr_reg:x13; val_offset:375*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 375*FLEN/8, x14, x11, x12)

inst_148:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x96 and fm2 == 0x3357df and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000031 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0x4b3357df;
op3val:0x31; valaddr_reg:x13; val_offset:378*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 378*FLEN/8, x14, x11, x12)

inst_149:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x96 and fm2 == 0x33524d and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00002a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0x4b33524d;
op3val:0x2a; valaddr_reg:x13; val_offset:381*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 381*FLEN/8, x14, x11, x12)
RVTEST_SIGBASE(x11,signature_x11_1)

inst_150:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x96 and fm2 == 0x334718 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00002a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0x4b334718;
op3val:0x2a; valaddr_reg:x13; val_offset:384*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 384*FLEN/8, x14, x11, x12)

inst_151:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x96 and fm2 == 0x33309a and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000037 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0x4b33309a;
op3val:0x37; valaddr_reg:x13; val_offset:387*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 387*FLEN/8, x14, x11, x12)

inst_152:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x96 and fm2 == 0x3303e7 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00001d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0x4b3303e7;
op3val:0x1d; valaddr_reg:x13; val_offset:390*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 390*FLEN/8, x14, x11, x12)

inst_153:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x96 and fm2 == 0x32aa2b and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000026 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0x4b32aa2b;
op3val:0x26; valaddr_reg:x13; val_offset:393*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 393*FLEN/8, x14, x11, x12)

inst_154:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x96 and fm2 == 0x31f683 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00005b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0x4b31f683;
op3val:0x5b; valaddr_reg:x13; val_offset:396*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 396*FLEN/8, x14, x11, x12)

inst_155:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x96 and fm2 == 0x309001 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000032 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0x4b309001;
op3val:0x32; valaddr_reg:x13; val_offset:399*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 399*FLEN/8, x14, x11, x12)

inst_156:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x96 and fm2 == 0x2dc264 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00004d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0x4b2dc264;
op3val:0x4d; valaddr_reg:x13; val_offset:402*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 402*FLEN/8, x14, x11, x12)

inst_157:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x96 and fm2 == 0x28275d and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00005f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0x4b28275d;
op3val:0x5f; valaddr_reg:x13; val_offset:405*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 405*FLEN/8, x14, x11, x12)

inst_158:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x96 and fm2 == 0x1cf1ac and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000040 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0x4b1cf1ac;
op3val:0x40; valaddr_reg:x13; val_offset:408*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 408*FLEN/8, x14, x11, x12)

inst_159:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x96 and fm2 == 0x068603 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000036 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0x4b068603;
op3val:0x36; valaddr_reg:x13; val_offset:411*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 411*FLEN/8, x14, x11, x12)

inst_160:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x95 and fm2 == 0x335d4a and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000029 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0x4ab35d4a;
op3val:0x29; valaddr_reg:x13; val_offset:414*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 414*FLEN/8, x14, x11, x12)

inst_161:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x96 and fm2 == 0x335e15 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0xcb335e15;
op3val:0x3f; valaddr_reg:x13; val_offset:417*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 417*FLEN/8, x14, x11, x12)

inst_162:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x96 and fm2 == 0x335dd6 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000013 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0xcb335dd6;
op3val:0x13; valaddr_reg:x13; val_offset:420*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 420*FLEN/8, x14, x11, x12)

inst_163:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x96 and fm2 == 0x335dbe and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000004 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0xcb335dbe;
op3val:0x4; valaddr_reg:x13; val_offset:423*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 423*FLEN/8, x14, x11, x12)

inst_164:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x96 and fm2 == 0x335e2a and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000055 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0xcb335e2a;
op3val:0x55; valaddr_reg:x13; val_offset:426*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 426*FLEN/8, x14, x11, x12)

inst_165:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x96 and fm2 == 0x335dd5 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000020 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0xcb335dd5;
op3val:0x20; valaddr_reg:x13; val_offset:429*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 429*FLEN/8, x14, x11, x12)

inst_166:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x96 and fm2 == 0x335d9a and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000006 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0xcb335d9a;
op3val:0x6; valaddr_reg:x13; val_offset:432*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 432*FLEN/8, x14, x11, x12)

inst_167:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x96 and fm2 == 0x335dac and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000033 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0xcb335dac;
op3val:0x33; valaddr_reg:x13; val_offset:435*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 435*FLEN/8, x14, x11, x12)

inst_168:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x96 and fm2 == 0x335d62 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00003e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0xcb335d62;
op3val:0x3e; valaddr_reg:x13; val_offset:438*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 438*FLEN/8, x14, x11, x12)

inst_169:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x96 and fm2 == 0x335c84 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000020 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0xcb335c84;
op3val:0x20; valaddr_reg:x13; val_offset:441*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 441*FLEN/8, x14, x11, x12)

inst_170:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x96 and fm2 == 0x335af8 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000005 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0xcb335af8;
op3val:0x5; valaddr_reg:x13; val_offset:444*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 444*FLEN/8, x14, x11, x12)

inst_171:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x96 and fm2 == 0x33587b and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0xcb33587b;
op3val:0x3f; valaddr_reg:x13; val_offset:447*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 447*FLEN/8, x14, x11, x12)

inst_172:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x96 and fm2 == 0x3352a4 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000014 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0xcb3352a4;
op3val:0x14; valaddr_reg:x13; val_offset:450*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 450*FLEN/8, x14, x11, x12)

inst_173:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x96 and fm2 == 0x334788 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000026 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0xcb334788;
op3val:0x26; valaddr_reg:x13; val_offset:453*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 453*FLEN/8, x14, x11, x12)

inst_174:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x96 and fm2 == 0x333154 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00004e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0xcb333154;
op3val:0x4e; valaddr_reg:x13; val_offset:456*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 456*FLEN/8, x14, x11, x12)

inst_175:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x96 and fm2 == 0x33046d and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000043 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0xcb33046d;
op3val:0x43; valaddr_reg:x13; val_offset:459*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 459*FLEN/8, x14, x11, x12)

inst_176:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x96 and fm2 == 0x32aa65 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0xcb32aa65;
op3val:0x3; valaddr_reg:x13; val_offset:462*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 462*FLEN/8, x14, x11, x12)

inst_177:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x96 and fm2 == 0x31f739 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000027 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0xcb31f739;
op3val:0x27; valaddr_reg:x13; val_offset:465*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 465*FLEN/8, x14, x11, x12)

inst_178:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x96 and fm2 == 0x3090a8 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000045 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0xcb3090a8;
op3val:0x45; valaddr_reg:x13; val_offset:468*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 468*FLEN/8, x14, x11, x12)

inst_179:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x96 and fm2 == 0x2dc33f and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00004f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0xcb2dc33f;
op3val:0x4f; valaddr_reg:x13; val_offset:471*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 471*FLEN/8, x14, x11, x12)

inst_180:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x96 and fm2 == 0x282866 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00005e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0xcb282866;
op3val:0x5e; valaddr_reg:x13; val_offset:474*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 474*FLEN/8, x14, x11, x12)

inst_181:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x96 and fm2 == 0x1cf25a and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00003c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0xcb1cf25a;
op3val:0x3c; valaddr_reg:x13; val_offset:477*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 477*FLEN/8, x14, x11, x12)

inst_182:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x96 and fm2 == 0x068690 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00002f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0xcb068690;
op3val:0x2f; valaddr_reg:x13; val_offset:480*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 480*FLEN/8, x14, x11, x12)

inst_183:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x95 and fm2 == 0x335dcb and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000005 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0xcab35dcb;
op3val:0x5; valaddr_reg:x13; val_offset:483*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 483*FLEN/8, x14, x11, x12)

inst_184:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x6d and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000021 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x800000; op2val:0xb6800000;
op3val:0x800021; valaddr_reg:x13; val_offset:486*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 486*FLEN/8, x14, x11, x12)

inst_185:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x6e and fm2 == 0x2c0000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000058 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x800000; op2val:0xb72c0000;
op3val:0x800058; valaddr_reg:x13; val_offset:489*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 489*FLEN/8, x14, x11, x12)

inst_186:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x6e and fm2 == 0x280000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000058 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x800000; op2val:0xb7280000;
op3val:0x800058; valaddr_reg:x13; val_offset:492*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 492*FLEN/8, x14, x11, x12)

inst_187:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x6a and fm2 == 0x400000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000002 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x800000; op2val:0x35400000;
op3val:0x800002; valaddr_reg:x13; val_offset:495*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 495*FLEN/8, x14, x11, x12)

inst_188:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x6d and fm2 == 0x1c0000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000037 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x800000; op2val:0xb69c0000;
op3val:0x800037; valaddr_reg:x13; val_offset:498*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 498*FLEN/8, x14, x11, x12)

inst_189:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x6c and fm2 == 0x100000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000032 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x800000; op2val:0xb6100000;
op3val:0x800032; valaddr_reg:x13; val_offset:501*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 501*FLEN/8, x14, x11, x12)

inst_190:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x6b and fm2 == 0x500000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000033 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x800000; op2val:0x35d00000;
op3val:0x800033; valaddr_reg:x13; val_offset:504*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 504*FLEN/8, x14, x11, x12)

inst_191:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x6e and fm2 == 0x340000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000026 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x800000; op2val:0x37340000;
op3val:0x800026; valaddr_reg:x13; val_offset:507*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 507*FLEN/8, x14, x11, x12)

inst_192:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x6f and fm2 == 0x1e0000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000062 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x800000; op2val:0x379e0000;
op3val:0x800062; valaddr_reg:x13; val_offset:510*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 510*FLEN/8, x14, x11, x12)

inst_193:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x70 and fm2 == 0x6c8000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000027 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x800000; op2val:0x386c8000;
op3val:0x800027; valaddr_reg:x13; val_offset:513*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 513*FLEN/8, x14, x11, x12)

inst_194:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x71 and fm2 == 0x69c000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000059 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x800000; op2val:0x38e9c000;
op3val:0x800059; valaddr_reg:x13; val_offset:516*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 516*FLEN/8, x14, x11, x12)

inst_195:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x72 and fm2 == 0x76a000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x00004b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x800000; op2val:0x3976a000;
op3val:0x80004b; valaddr_reg:x13; val_offset:519*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 519*FLEN/8, x14, x11, x12)

inst_196:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x73 and fm2 == 0x7ad000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000053 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x800000; op2val:0x39fad000;
op3val:0x800053; valaddr_reg:x13; val_offset:522*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 522*FLEN/8, x14, x11, x12)

inst_197:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x74 and fm2 == 0x7ec000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000028 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x800000; op2val:0x3a7ec000;
op3val:0x800028; valaddr_reg:x13; val_offset:525*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 525*FLEN/8, x14, x11, x12)

inst_198:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x75 and fm2 == 0x7fa800 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000016 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x800000; op2val:0x3affa800;
op3val:0x800016; valaddr_reg:x13; val_offset:528*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 528*FLEN/8, x14, x11, x12)

inst_199:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x76 and fm2 == 0x7f4e00 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000059 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x800000; op2val:0x3b7f4e00;
op3val:0x800059; valaddr_reg:x13; val_offset:531*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 531*FLEN/8, x14, x11, x12)

inst_200:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x77 and fm2 == 0x7fd500 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x00002b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x800000; op2val:0x3bffd500;
op3val:0x80002b; valaddr_reg:x13; val_offset:534*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 534*FLEN/8, x14, x11, x12)

inst_201:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x78 and fm2 == 0x7fe480 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000037 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x800000; op2val:0x3c7fe480;
op3val:0x800037; valaddr_reg:x13; val_offset:537*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 537*FLEN/8, x14, x11, x12)

inst_202:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x79 and fm2 == 0x7ffdc0 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000009 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x800000; op2val:0x3cfffdc0;
op3val:0x800009; valaddr_reg:x13; val_offset:540*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 540*FLEN/8, x14, x11, x12)

inst_203:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7a and fm2 == 0x7ffba0 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000023 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x800000; op2val:0x3d7ffba0;
op3val:0x800023; valaddr_reg:x13; val_offset:543*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 543*FLEN/8, x14, x11, x12)

inst_204:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7b and fm2 == 0x7fff70 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000009 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x800000; op2val:0x3dffff70;
op3val:0x800009; valaddr_reg:x13; val_offset:546*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 546*FLEN/8, x14, x11, x12)

inst_205:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7c and fm2 == 0x7ffea8 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x00002b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x800000; op2val:0x3e7ffea8;
op3val:0x80002b; valaddr_reg:x13; val_offset:549*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 549*FLEN/8, x14, x11, x12)

inst_206:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x7fffdc and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000009 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x800000; op2val:0x3effffdc;
op3val:0x800009; valaddr_reg:x13; val_offset:552*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 552*FLEN/8, x14, x11, x12)

inst_207:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x00002e and fs3 == 0 and fe3 == 0x01 and fm3 == 0x00005a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x800000; op2val:0xc000002e;
op3val:0x80005a; valaddr_reg:x13; val_offset:555*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 555*FLEN/8, x14, x11, x12)

inst_208:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x000004 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x800000; op2val:0xc0000004;
op3val:0x800007; valaddr_reg:x13; val_offset:558*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 558*FLEN/8, x14, x11, x12)

inst_209:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x00000a and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000010 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x800000; op2val:0xc000000a;
op3val:0x800010; valaddr_reg:x13; val_offset:561*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 561*FLEN/8, x14, x11, x12)

inst_210:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x00002c and fs3 == 0 and fe3 == 0x01 and fm3 == 0x00004f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x800000; op2val:0xc000002c;
op3val:0x80004f; valaddr_reg:x13; val_offset:564*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 564*FLEN/8, x14, x11, x12)

inst_211:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x000036 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x00005c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x800000; op2val:0xc0000036;
op3val:0x80005c; valaddr_reg:x13; val_offset:567*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 567*FLEN/8, x14, x11, x12)

inst_212:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x000023 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000026 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x800000; op2val:0xc0000023;
op3val:0x800026; valaddr_reg:x13; val_offset:570*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 570*FLEN/8, x14, x11, x12)

inst_213:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x00002a and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000014 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x800000; op2val:0xc000002a;
op3val:0x800014; valaddr_reg:x13; val_offset:573*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 573*FLEN/8, x14, x11, x12)

inst_214:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x000068 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x00004f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x800000; op2val:0xc0000068;
op3val:0x80004f; valaddr_reg:x13; val_offset:576*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 576*FLEN/8, x14, x11, x12)

inst_215:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x00009a and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000035 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x800000; op2val:0xc000009a;
op3val:0x800035; valaddr_reg:x13; val_offset:579*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 579*FLEN/8, x14, x11, x12)

inst_216:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x000104 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000009 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x800000; op2val:0xc0000104;
op3val:0x800009; valaddr_reg:x13; val_offset:582*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 582*FLEN/8, x14, x11, x12)

inst_217:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x000203 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000006 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x800000; op2val:0xc0000203;
op3val:0x800006; valaddr_reg:x13; val_offset:585*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 585*FLEN/8, x14, x11, x12)

inst_218:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x00042a and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000055 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x800000; op2val:0xc000042a;
op3val:0x800055; valaddr_reg:x13; val_offset:588*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 588*FLEN/8, x14, x11, x12)

inst_219:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x000830 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000060 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x800000; op2val:0xc0000830;
op3val:0x800060; valaddr_reg:x13; val_offset:591*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 591*FLEN/8, x14, x11, x12)

inst_220:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x001012 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000024 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x800000; op2val:0xc0001012;
op3val:0x800024; valaddr_reg:x13; val_offset:594*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 594*FLEN/8, x14, x11, x12)

inst_221:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x002025 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x00004a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x800000; op2val:0xc0002025;
op3val:0x80004a; valaddr_reg:x13; val_offset:597*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 597*FLEN/8, x14, x11, x12)

inst_222:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x004030 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000060 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x800000; op2val:0xc0004030;
op3val:0x800060; valaddr_reg:x13; val_offset:600*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 600*FLEN/8, x14, x11, x12)

inst_223:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x008028 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000050 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x800000; op2val:0xc0008028;
op3val:0x800050; valaddr_reg:x13; val_offset:603*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 603*FLEN/8, x14, x11, x12)

inst_224:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x010001 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000002 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x800000; op2val:0xc0010001;
op3val:0x800002; valaddr_reg:x13; val_offset:606*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 606*FLEN/8, x14, x11, x12)

inst_225:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x020006 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x00000c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x800000; op2val:0xc0020006;
op3val:0x80000c; valaddr_reg:x13; val_offset:609*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 609*FLEN/8, x14, x11, x12)

inst_226:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x04002c and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000058 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x800000; op2val:0xc004002c;
op3val:0x800058; valaddr_reg:x13; val_offset:612*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 612*FLEN/8, x14, x11, x12)

inst_227:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x080020 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x800000; op2val:0xc0080020;
op3val:0x80003f; valaddr_reg:x13; val_offset:615*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 615*FLEN/8, x14, x11, x12)

inst_228:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x10002a and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000054 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x800000; op2val:0xc010002a;
op3val:0x800054; valaddr_reg:x13; val_offset:618*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 618*FLEN/8, x14, x11, x12)

inst_229:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x200004 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000008 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x800000; op2val:0xc0200004;
op3val:0x800008; valaddr_reg:x13; val_offset:621*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 621*FLEN/8, x14, x11, x12)

inst_230:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x7fff48 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x00005a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f000000; op2val:0x3f7fff48;
op3val:0x7f00005a; valaddr_reg:x13; val_offset:624*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 624*FLEN/8, x14, x11, x12)

inst_231:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x7fffd2 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000014 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f000000; op2val:0x3f7fffd2;
op3val:0x7f000014; valaddr_reg:x13; val_offset:627*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 627*FLEN/8, x14, x11, x12)

inst_232:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x7fff66 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000048 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f000000; op2val:0x3f7fff66;
op3val:0x7f000048; valaddr_reg:x13; val_offset:630*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 630*FLEN/8, x14, x11, x12)

inst_233:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x7fffaa and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000022 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f000000; op2val:0x3f7fffaa;
op3val:0x7f000022; valaddr_reg:x13; val_offset:633*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 633*FLEN/8, x14, x11, x12)

inst_234:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x7fff50 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000047 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f000000; op2val:0x3f7fff50;
op3val:0x7f000047; valaddr_reg:x13; val_offset:636*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 636*FLEN/8, x14, x11, x12)

inst_235:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x7fff7c and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000021 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f000000; op2val:0x3f7fff7c;
op3val:0x7f000021; valaddr_reg:x13; val_offset:639*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 639*FLEN/8, x14, x11, x12)

inst_236:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x7ffef8 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000043 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f000000; op2val:0x3f7ffef8;
op3val:0x7f000043; valaddr_reg:x13; val_offset:642*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 642*FLEN/8, x14, x11, x12)

inst_237:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x7ffec0 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f000000; op2val:0x3f7ffec0;
op3val:0x7f00001f; valaddr_reg:x13; val_offset:645*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 645*FLEN/8, x14, x11, x12)

inst_238:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x7ffd88 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x00003b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f000000; op2val:0x3f7ffd88;
op3val:0x7f00003b; valaddr_reg:x13; val_offset:648*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 648*FLEN/8, x14, x11, x12)

inst_239:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x7ffbd0 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000017 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f000000; op2val:0x3f7ffbd0;
op3val:0x7f000017; valaddr_reg:x13; val_offset:651*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 651*FLEN/8, x14, x11, x12)

inst_240:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x7ff746 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x00005c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f000000; op2val:0x3f7ff746;
op3val:0x7f00005c; valaddr_reg:x13; val_offset:654*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 654*FLEN/8, x14, x11, x12)

inst_241:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x7fef56 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000054 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f000000; op2val:0x3f7fef56;
op3val:0x7f000054; valaddr_reg:x13; val_offset:657*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 657*FLEN/8, x14, x11, x12)

inst_242:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x7fdfe8 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x00000b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f000000; op2val:0x3f7fdfe8;
op3val:0x7f00000b; valaddr_reg:x13; val_offset:660*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 660*FLEN/8, x14, x11, x12)

inst_243:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x7fbfe6 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x00000c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f000000; op2val:0x3f7fbfe6;
op3val:0x7f00000c; valaddr_reg:x13; val_offset:663*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 663*FLEN/8, x14, x11, x12)

inst_244:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x7f7f7c and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000041 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f000000; op2val:0x3f7f7f7c;
op3val:0x7f000041; valaddr_reg:x13; val_offset:666*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 666*FLEN/8, x14, x11, x12)

inst_245:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x7effc0 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f000000; op2val:0x3f7effc0;
op3val:0x7f00001f; valaddr_reg:x13; val_offset:669*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 669*FLEN/8, x14, x11, x12)

inst_246:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x7dff86 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x00003c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f000000; op2val:0x3f7dff86;
op3val:0x7f00003c; valaddr_reg:x13; val_offset:672*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 672*FLEN/8, x14, x11, x12)

inst_247:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x7bffaa and fs3 == 0 and fe3 == 0xfe and fm3 == 0x00002a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f000000; op2val:0x3f7bffaa;
op3val:0x7f00002a; valaddr_reg:x13; val_offset:675*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 675*FLEN/8, x14, x11, x12)

inst_248:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x77ff76 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000044 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f000000; op2val:0x3f77ff76;
op3val:0x7f000044; valaddr_reg:x13; val_offset:678*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 678*FLEN/8, x14, x11, x12)

inst_249:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x6fff72 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000046 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f000000; op2val:0x3f6fff72;
op3val:0x7f000046; valaddr_reg:x13; val_offset:681*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 681*FLEN/8, x14, x11, x12)

inst_250:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x5ffff0 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f000000; op2val:0x3f5ffff0;
op3val:0x7f000007; valaddr_reg:x13; val_offset:684*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 684*FLEN/8, x14, x11, x12)

inst_251:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7e and fm2 == 0x3fff90 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000037 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f000000; op2val:0x3f3fff90;
op3val:0x7f000037; valaddr_reg:x13; val_offset:687*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 687*FLEN/8, x14, x11, x12)

inst_252:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7d and fm2 == 0x7ffe7c and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000060 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f000000; op2val:0x3efffe7c;
op3val:0x7f000060; valaddr_reg:x13; val_offset:690*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 690*FLEN/8, x14, x11, x12)

inst_253:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x400004 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x00000b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f000000; op2val:0xc0400004;
op3val:0x7f00000b; valaddr_reg:x13; val_offset:693*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 693*FLEN/8, x14, x11, x12)

inst_254:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x40000c and fs3 == 0 and fe3 == 0xfe and fm3 == 0x00001c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f000000; op2val:0xc040000c;
op3val:0x7f00001c; valaddr_reg:x13; val_offset:696*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 696*FLEN/8, x14, x11, x12)

inst_255:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x40002a and fs3 == 0 and fe3 == 0xfe and fm3 == 0x00005a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f000000; op2val:0xc040002a;
op3val:0x7f00005a; valaddr_reg:x13; val_offset:699*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 699*FLEN/8, x14, x11, x12)

inst_256:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x400012 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x00002e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f000000; op2val:0xc0400012;
op3val:0x7f00002e; valaddr_reg:x13; val_offset:702*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 702*FLEN/8, x14, x11, x12)

inst_257:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x40000a and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000026 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f000000; op2val:0xc040000a;
op3val:0x7f000026; valaddr_reg:x13; val_offset:705*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 705*FLEN/8, x14, x11, x12)

inst_258:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x400017 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x00004f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f000000; op2val:0xc0400017;
op3val:0x7f00004f; valaddr_reg:x13; val_offset:708*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 708*FLEN/8, x14, x11, x12)

inst_259:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x3ffff8 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000032 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f000000; op2val:0xc03ffff8;
op3val:0x7f000032; valaddr_reg:x13; val_offset:711*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 711*FLEN/8, x14, x11, x12)

inst_260:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x3fffc8 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000012 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f000000; op2val:0xc03fffc8;
op3val:0x7f000012; valaddr_reg:x13; val_offset:714*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 714*FLEN/8, x14, x11, x12)

inst_261:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x3fffa9 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000053 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f000000; op2val:0xc03fffa9;
op3val:0x7f000053; valaddr_reg:x13; val_offset:717*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 717*FLEN/8, x14, x11, x12)

inst_262:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x3fff28 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000051 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f000000; op2val:0xc03fff28;
op3val:0x7f000051; valaddr_reg:x13; val_offset:720*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 720*FLEN/8, x14, x11, x12)

inst_263:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x3ffe17 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x00002f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f000000; op2val:0xc03ffe17;
op3val:0x7f00002f; valaddr_reg:x13; val_offset:723*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 723*FLEN/8, x14, x11, x12)

inst_264:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x3ffc26 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x00004c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f000000; op2val:0xc03ffc26;
op3val:0x7f00004c; valaddr_reg:x13; val_offset:726*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 726*FLEN/8, x14, x11, x12)

inst_265:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x3ff82f and fs3 == 0 and fe3 == 0xfe and fm3 == 0x00005f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f000000; op2val:0xc03ff82f;
op3val:0x7f00005f; valaddr_reg:x13; val_offset:729*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 729*FLEN/8, x14, x11, x12)

inst_266:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x3ff019 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000033 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f000000; op2val:0xc03ff019;
op3val:0x7f000033; valaddr_reg:x13; val_offset:732*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 732*FLEN/8, x14, x11, x12)

inst_267:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x3fe006 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x00000d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f000000; op2val:0xc03fe006;
op3val:0x7f00000d; valaddr_reg:x13; val_offset:735*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 735*FLEN/8, x14, x11, x12)

inst_268:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x3fc002 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000005 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f000000; op2val:0xc03fc002;
op3val:0x7f000005; valaddr_reg:x13; val_offset:738*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 738*FLEN/8, x14, x11, x12)

inst_269:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x3f800c and fs3 == 0 and fe3 == 0xfe and fm3 == 0x00001a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f000000; op2val:0xc03f800c;
op3val:0x7f00001a; valaddr_reg:x13; val_offset:741*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 741*FLEN/8, x14, x11, x12)

inst_270:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x3f0002 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000006 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f000000; op2val:0xc03f0002;
op3val:0x7f000006; valaddr_reg:x13; val_offset:744*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 744*FLEN/8, x14, x11, x12)

inst_271:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x3e001e and fs3 == 0 and fe3 == 0xfe and fm3 == 0x00003e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f000000; op2val:0xc03e001e;
op3val:0x7f00003e; valaddr_reg:x13; val_offset:747*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 747*FLEN/8, x14, x11, x12)

inst_272:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x3c0000 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f000000; op2val:0xc03c0000;
op3val:0x7f000001; valaddr_reg:x13; val_offset:750*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 750*FLEN/8, x14, x11, x12)

inst_273:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x38001e and fs3 == 0 and fe3 == 0xfe and fm3 == 0x00003d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f000000; op2val:0xc038001e;
op3val:0x7f00003d; valaddr_reg:x13; val_offset:753*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 753*FLEN/8, x14, x11, x12)

inst_274:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x300028 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000050 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f000000; op2val:0xc0300028;
op3val:0x7f000050; valaddr_reg:x13; val_offset:756*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 756*FLEN/8, x14, x11, x12)

inst_275:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x200014 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x00002a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f000000; op2val:0xc0200014;
op3val:0x7f00002a; valaddr_reg:x13; val_offset:759*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 759*FLEN/8, x14, x11, x12)

inst_276:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x86 and fm2 == 0x03b8d9 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00005f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0xc303b8d9;
op3val:0x5f; valaddr_reg:x13; val_offset:762*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 762*FLEN/8, x14, x11, x12)

inst_277:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x85 and fm2 == 0x1cf208 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00003c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0xc29cf208;
op3val:0x3c; valaddr_reg:x13; val_offset:765*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 765*FLEN/8, x14, x11, x12)
RVTEST_SIGBASE(x11,signature_x11_2)

inst_278:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x85 and fm2 == 0x54ff53 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000054 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0xc2d4ff53;
op3val:0x54; valaddr_reg:x13; val_offset:768*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 768*FLEN/8, x14, x11, x12)

inst_279:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x60352f and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000015 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0xc0e0352f;
op3val:0x15; valaddr_reg:x13; val_offset:771*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 771*FLEN/8, x14, x11, x12)

inst_280:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x335dc0 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000030 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0xc1b35dc0;
op3val:0x30; valaddr_reg:x13; val_offset:774*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 774*FLEN/8, x14, x11, x12)

inst_281:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x84 and fm2 == 0x335dc0 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000020 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0x42335dc0;
op3val:0x20; valaddr_reg:x13; val_offset:777*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 777*FLEN/8, x14, x11, x12)

inst_282:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x85 and fm2 == 0x228cf6 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000046 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0x42a28cf6;
op3val:0x46; valaddr_reg:x13; val_offset:780*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 780*FLEN/8, x14, x11, x12)

inst_283:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x86 and fm2 == 0x7f094c and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00004a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0x437f094c;
op3val:0x4a; valaddr_reg:x13; val_offset:783*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 783*FLEN/8, x14, x11, x12)

inst_284:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x88 and fm2 == 0x32aa62 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000002 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0x4432aa62;
op3val:0x2; valaddr_reg:x13; val_offset:786*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 786*FLEN/8, x14, x11, x12)

inst_285:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x89 and fm2 == 0x2a1525 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000035 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0x44aa1525;
op3val:0x35; valaddr_reg:x13; val_offset:789*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 789*FLEN/8, x14, x11, x12)

inst_286:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x8a and fm2 == 0x3143a6 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000018 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0x453143a6;
op3val:0x18; valaddr_reg:x13; val_offset:792*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 792*FLEN/8, x14, x11, x12)

inst_287:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x87 and fm2 == 0x442e89 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000018 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0xc3c42e89;
op3val:0x18; valaddr_reg:x13; val_offset:795*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 795*FLEN/8, x14, x11, x12)

inst_288:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x8a and fm2 == 0x33a103 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0xc533a103;
op3val:0x3; valaddr_reg:x13; val_offset:798*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 798*FLEN/8, x14, x11, x12)

inst_289:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x8d and fm2 == 0x33e178 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00002f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0xc6b3e178;
op3val:0x2f; valaddr_reg:x13; val_offset:801*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 801*FLEN/8, x14, x11, x12)

inst_290:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x90 and fm2 == 0x337da1 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00005b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0xc8337da1;
op3val:0x5b; valaddr_reg:x13; val_offset:804*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, x31, x30, x29, x28, dyn, 0, 0, x13, 804*FLEN/8, x14, x11, x12)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(0,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(95,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3270759280,32,FLEN)
NAN_BOXED(89,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(60,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3268738899,32,FLEN)
NAN_BOXED(3268738899,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3235919151,32,FLEN)
NAN_BOXED(3235919151,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1117949174,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1132398924,32,FLEN)
NAN_BOXED(74,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1144171106,32,FLEN)
NAN_BOXED(2,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1151997221,32,FLEN)
NAN_BOXED(53,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1160856486,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1169322580,32,FLEN)
NAN_BOXED(21,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1177745627,32,FLEN)
NAN_BOXED(18,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1186147867,32,FLEN)
NAN_BOXED(17,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1194548313,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1202932437,32,FLEN)
NAN_BOXED(27,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1211323914,32,FLEN)
NAN_BOXED(22,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1219712792,32,FLEN)
NAN_BOXED(38,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1228102521,32,FLEN)
NAN_BOXED(26,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1236491442,32,FLEN)
NAN_BOXED(24,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1244880039,32,FLEN)
NAN_BOXED(50,32,FLEN)
test_dataset_1:
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1253268919,32,FLEN)
NAN_BOXED(3,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3264881809,32,FLEN)
NAN_BOXED(54,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3253431051,32,FLEN)
NAN_BOXED(19,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3247553580,32,FLEN)
NAN_BOXED(9,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3263412441,32,FLEN)
NAN_BOXED(39,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3271709213,32,FLEN)
NAN_BOXED(77,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3261452317,32,FLEN)
NAN_BOXED(9,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3273270417,32,FLEN)
NAN_BOXED(46,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3280281492,32,FLEN)
NAN_BOXED(62,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3284414089,32,FLEN)
NAN_BOXED(24,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3293101163,32,FLEN)
NAN_BOXED(61,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3300181115,32,FLEN)
NAN_BOXED(8,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3317015728,32,FLEN)
NAN_BOXED(52,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3325356984,32,FLEN)
NAN_BOXED(71,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3333677432,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3342059224,32,FLEN)
NAN_BOXED(75,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3350431331,32,FLEN)
NAN_BOXED(58,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3358817697,32,FLEN)
NAN_BOXED(91,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3367201731,32,FLEN)
NAN_BOXED(80,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3375587110,32,FLEN)
NAN_BOXED(16,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3383976032,32,FLEN)
NAN_BOXED(60,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3392364337,32,FLEN)
NAN_BOXED(66,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3400752766,32,FLEN)
NAN_BOXED(68,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(3068919808,32,FLEN)
NAN_BOXED(1065353276,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(3071541248,32,FLEN)
NAN_BOXED(1065353292,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(3062366208,32,FLEN)
NAN_BOXED(1065353254,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(3066036224,32,FLEN)
NAN_BOXED(1065353272,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(3048210432,32,FLEN)
NAN_BOXED(1065353243,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(3062366208,32,FLEN)
NAN_BOXED(1065353282,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(917766144,32,FLEN)
NAN_BOXED(1065353235,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(926416896,32,FLEN)
NAN_BOXED(1065353252,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(936902656,32,FLEN)
NAN_BOXED(1065353256,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(946601984,32,FLEN)
NAN_BOXED(1065353256,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(956121088,32,FLEN)
NAN_BOXED(1065353227,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(963928064,32,FLEN)
NAN_BOXED(1065353309,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(972824576,32,FLEN)
NAN_BOXED(1065353278,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(981276672,32,FLEN)
NAN_BOXED(1065353309,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(989844480,32,FLEN)
NAN_BOXED(1065353227,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(998241792,32,FLEN)
NAN_BOXED(1065353221,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(1006608640,32,FLEN)
NAN_BOXED(1065353311,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(1015017344,32,FLEN)
NAN_BOXED(1065353249,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(1023404800,32,FLEN)
NAN_BOXED(1065353300,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(1031798176,32,FLEN)
NAN_BOXED(1065353235,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(1040186080,32,FLEN)
NAN_BOXED(1065353298,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(1048575488,32,FLEN)
NAN_BOXED(1065353280,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(1056964500,32,FLEN)
NAN_BOXED(1065353243,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(3221225520,32,FLEN)
NAN_BOXED(1065353310,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(3221225514,32,FLEN)
NAN_BOXED(1065353297,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(3221225481,32,FLEN)
NAN_BOXED(1065353230,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(3221225504,32,FLEN)
NAN_BOXED(1065353272,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(3221225490,32,FLEN)
NAN_BOXED(1065353236,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(3221225515,32,FLEN)
NAN_BOXED(1065353270,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(3221225514,32,FLEN)
NAN_BOXED(1065353235,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(3221225576,32,FLEN)
NAN_BOXED(1065353296,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(3221225634,32,FLEN)
NAN_BOXED(1065353283,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(3221225760,32,FLEN)
NAN_BOXED(1065353279,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(3221226015,32,FLEN)
NAN_BOXED(1065353278,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(3221226515,32,FLEN)
NAN_BOXED(1065353254,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(3221227546,32,FLEN)
NAN_BOXED(1065353268,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(3221229576,32,FLEN)
NAN_BOXED(1065353231,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(3221233698,32,FLEN)
NAN_BOXED(1065353285,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(3221241896,32,FLEN)
NAN_BOXED(1065353297,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(3221258262,32,FLEN)
NAN_BOXED(1065353260,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(3221291014,32,FLEN)
NAN_BOXED(1065353228,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(3221356562,32,FLEN)
NAN_BOXED(1065353251,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(3221487620,32,FLEN)
NAN_BOXED(1065353225,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(3221749804,32,FLEN)
NAN_BOXED(1065353305,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(3222274097,32,FLEN)
NAN_BOXED(1065353314,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(3223322648,32,FLEN)
NAN_BOXED(1065353263,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3266220105,32,FLEN)
NAN_BOXED(63,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3271984720,32,FLEN)
NAN_BOXED(99,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3260717633,32,FLEN)
NAN_BOXED(44,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3266902189,32,FLEN)
NAN_BOXED(75,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3262554343,32,FLEN)
NAN_BOXED(61,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3242838391,32,FLEN)
NAN_BOXED(42,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1088435503,32,FLEN)
NAN_BOXED(60,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1119051200,32,FLEN)
NAN_BOXED(65,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1133808035,32,FLEN)
NAN_BOXED(45,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1142334396,32,FLEN)
NAN_BOXED(83,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1151526564,32,FLEN)
NAN_BOXED(95,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1160741692,32,FLEN)
NAN_BOXED(45,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1169130300,32,FLEN)
NAN_BOXED(89,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1177705449,32,FLEN)
NAN_BOXED(47,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1186112711,32,FLEN)
NAN_BOXED(67,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1194524636,32,FLEN)
NAN_BOXED(68,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1202932795,32,FLEN)
NAN_BOXED(26,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1211320417,32,FLEN)
NAN_BOXED(62,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1219710549,32,FLEN)
NAN_BOXED(89,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1228101041,32,FLEN)
NAN_BOXED(93,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1236491476,32,FLEN)
NAN_BOXED(22,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1244880107,32,FLEN)
NAN_BOXED(39,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1253268670,32,FLEN)
NAN_BOXED(93,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3256204332,32,FLEN)
NAN_BOXED(26,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3269289912,32,FLEN)
NAN_BOXED(76,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3270391938,32,FLEN)
NAN_BOXED(80,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3260350291,32,FLEN)
NAN_BOXED(29,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3272168391,32,FLEN)
NAN_BOXED(81,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3271801049,32,FLEN)
NAN_BOXED(61,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3270759280,32,FLEN)
NAN_BOXED(22,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3276668330,32,FLEN)
NAN_BOXED(18,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3285240609,32,FLEN)
NAN_BOXED(41,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3293147081,32,FLEN)
NAN_BOXED(62,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3300915799,32,FLEN)
NAN_BOXED(71,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3308793572,32,FLEN)
NAN_BOXED(54,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3316998509,32,FLEN)
NAN_BOXED(45,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3325378507,32,FLEN)
NAN_BOXED(85,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3333698956,32,FLEN)
NAN_BOXED(76,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3342043799,32,FLEN)
NAN_BOXED(31,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3350421286,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3358814289,32,FLEN)
NAN_BOXED(52,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3367200565,32,FLEN)
NAN_BOXED(53,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3375588769,32,FLEN)
NAN_BOXED(89,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3383975427,32,FLEN)
NAN_BOXED(5,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3392364046,32,FLEN)
NAN_BOXED(13,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3400752774,32,FLEN)
NAN_BOXED(70,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1261657428,32,FLEN)
NAN_BOXED(75,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1261657467,32,FLEN)
NAN_BOXED(46,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1261657453,32,FLEN)
NAN_BOXED(54,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1261657421,32,FLEN)
NAN_BOXED(73,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1261657428,32,FLEN)
NAN_BOXED(60,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1261657460,32,FLEN)
NAN_BOXED(21,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1261657342,32,FLEN)
NAN_BOXED(73,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1261657318,32,FLEN)
NAN_BOXED(26,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1261657066,32,FLEN)
NAN_BOXED(78,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1261656754,32,FLEN)
NAN_BOXED(45,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1261656031,32,FLEN)
NAN_BOXED(49,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1261654605,32,FLEN)
NAN_BOXED(42,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1261651736,32,FLEN)
NAN_BOXED(42,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1261645978,32,FLEN)
NAN_BOXED(55,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1261634535,32,FLEN)
NAN_BOXED(29,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1261611563,32,FLEN)
NAN_BOXED(38,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1261565571,32,FLEN)
NAN_BOXED(91,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1261473793,32,FLEN)
NAN_BOXED(50,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1261290084,32,FLEN)
NAN_BOXED(77,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1260922717,32,FLEN)
NAN_BOXED(95,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1260188076,32,FLEN)
NAN_BOXED(64,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1258718723,32,FLEN)
NAN_BOXED(54,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1253268810,32,FLEN)
NAN_BOXED(41,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3409141269,32,FLEN)
NAN_BOXED(63,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3409141206,32,FLEN)
NAN_BOXED(19,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3409141182,32,FLEN)
NAN_BOXED(4,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3409141290,32,FLEN)
NAN_BOXED(85,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3409141205,32,FLEN)
NAN_BOXED(32,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3409141146,32,FLEN)
NAN_BOXED(6,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3409141164,32,FLEN)
NAN_BOXED(51,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3409141090,32,FLEN)
NAN_BOXED(62,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3409140868,32,FLEN)
NAN_BOXED(32,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3409140472,32,FLEN)
NAN_BOXED(5,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3409139835,32,FLEN)
NAN_BOXED(63,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3409138340,32,FLEN)
NAN_BOXED(20,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3409135496,32,FLEN)
NAN_BOXED(38,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3409129812,32,FLEN)
NAN_BOXED(78,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3409118317,32,FLEN)
NAN_BOXED(67,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3409095269,32,FLEN)
NAN_BOXED(3,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3409049401,32,FLEN)
NAN_BOXED(39,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3408957608,32,FLEN)
NAN_BOXED(69,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3408773951,32,FLEN)
NAN_BOXED(79,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3408406630,32,FLEN)
NAN_BOXED(94,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3407671898,32,FLEN)
NAN_BOXED(60,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3406202512,32,FLEN)
NAN_BOXED(47,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3400752587,32,FLEN)
NAN_BOXED(5,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(3061841920,32,FLEN)
NAN_BOXED(8388641,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(3073114112,32,FLEN)
NAN_BOXED(8388696,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(3072851968,32,FLEN)
NAN_BOXED(8388696,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(893386752,32,FLEN)
NAN_BOXED(8388610,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(3063676928,32,FLEN)
NAN_BOXED(8388663,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(3054501888,32,FLEN)
NAN_BOXED(8388658,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(902823936,32,FLEN)
NAN_BOXED(8388659,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(926154752,32,FLEN)
NAN_BOXED(8388646,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(933101568,32,FLEN)
NAN_BOXED(8388706,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(946634752,32,FLEN)
NAN_BOXED(8388647,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(954843136,32,FLEN)
NAN_BOXED(8388697,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(964075520,32,FLEN)
NAN_BOXED(8388683,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(972738560,32,FLEN)
NAN_BOXED(8388691,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(981385216,32,FLEN)
NAN_BOXED(8388648,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(989833216,32,FLEN)
NAN_BOXED(8388630,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(998198784,32,FLEN)
NAN_BOXED(8388697,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(1006621952,32,FLEN)
NAN_BOXED(8388651,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(1015014528,32,FLEN)
NAN_BOXED(8388663,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(1023409600,32,FLEN)
NAN_BOXED(8388617,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(1031797664,32,FLEN)
NAN_BOXED(8388643,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(1040187248,32,FLEN)
NAN_BOXED(8388617,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(1048575656,32,FLEN)
NAN_BOXED(8388651,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(1056964572,32,FLEN)
NAN_BOXED(8388617,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(3221225518,32,FLEN)
NAN_BOXED(8388698,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(3221225476,32,FLEN)
NAN_BOXED(8388615,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(3221225482,32,FLEN)
NAN_BOXED(8388624,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(3221225516,32,FLEN)
NAN_BOXED(8388687,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(3221225526,32,FLEN)
NAN_BOXED(8388700,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(3221225507,32,FLEN)
NAN_BOXED(8388646,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(3221225514,32,FLEN)
NAN_BOXED(8388628,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(3221225576,32,FLEN)
NAN_BOXED(8388687,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(3221225626,32,FLEN)
NAN_BOXED(8388661,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(3221225732,32,FLEN)
NAN_BOXED(8388617,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(3221225987,32,FLEN)
NAN_BOXED(8388614,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(3221226538,32,FLEN)
NAN_BOXED(8388693,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(3221227568,32,FLEN)
NAN_BOXED(8388704,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(3221229586,32,FLEN)
NAN_BOXED(8388644,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(3221233701,32,FLEN)
NAN_BOXED(8388682,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(3221241904,32,FLEN)
NAN_BOXED(8388704,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(3221258280,32,FLEN)
NAN_BOXED(8388688,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(3221291009,32,FLEN)
NAN_BOXED(8388610,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(3221356550,32,FLEN)
NAN_BOXED(8388620,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(3221487660,32,FLEN)
NAN_BOXED(8388696,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(3221749792,32,FLEN)
NAN_BOXED(8388671,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(3222274090,32,FLEN)
NAN_BOXED(8388692,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(3223322628,32,FLEN)
NAN_BOXED(8388616,32,FLEN)
NAN_BOXED(2130706432,32,FLEN)
NAN_BOXED(1065353032,32,FLEN)
NAN_BOXED(2130706522,32,FLEN)
NAN_BOXED(2130706432,32,FLEN)
NAN_BOXED(1065353170,32,FLEN)
NAN_BOXED(2130706452,32,FLEN)
NAN_BOXED(2130706432,32,FLEN)
NAN_BOXED(1065353062,32,FLEN)
NAN_BOXED(2130706504,32,FLEN)
NAN_BOXED(2130706432,32,FLEN)
NAN_BOXED(1065353130,32,FLEN)
NAN_BOXED(2130706466,32,FLEN)
NAN_BOXED(2130706432,32,FLEN)
NAN_BOXED(1065353040,32,FLEN)
NAN_BOXED(2130706503,32,FLEN)
NAN_BOXED(2130706432,32,FLEN)
NAN_BOXED(1065353084,32,FLEN)
NAN_BOXED(2130706465,32,FLEN)
NAN_BOXED(2130706432,32,FLEN)
NAN_BOXED(1065352952,32,FLEN)
NAN_BOXED(2130706499,32,FLEN)
NAN_BOXED(2130706432,32,FLEN)
NAN_BOXED(1065352896,32,FLEN)
NAN_BOXED(2130706463,32,FLEN)
NAN_BOXED(2130706432,32,FLEN)
NAN_BOXED(1065352584,32,FLEN)
NAN_BOXED(2130706491,32,FLEN)
NAN_BOXED(2130706432,32,FLEN)
NAN_BOXED(1065352144,32,FLEN)
NAN_BOXED(2130706455,32,FLEN)
NAN_BOXED(2130706432,32,FLEN)
NAN_BOXED(1065350982,32,FLEN)
NAN_BOXED(2130706524,32,FLEN)
NAN_BOXED(2130706432,32,FLEN)
NAN_BOXED(1065348950,32,FLEN)
NAN_BOXED(2130706516,32,FLEN)
NAN_BOXED(2130706432,32,FLEN)
NAN_BOXED(1065345000,32,FLEN)
NAN_BOXED(2130706443,32,FLEN)
NAN_BOXED(2130706432,32,FLEN)
NAN_BOXED(1065336806,32,FLEN)
NAN_BOXED(2130706444,32,FLEN)
NAN_BOXED(2130706432,32,FLEN)
NAN_BOXED(1065320316,32,FLEN)
NAN_BOXED(2130706497,32,FLEN)
NAN_BOXED(2130706432,32,FLEN)
NAN_BOXED(1065287616,32,FLEN)
NAN_BOXED(2130706463,32,FLEN)
NAN_BOXED(2130706432,32,FLEN)
NAN_BOXED(1065222022,32,FLEN)
NAN_BOXED(2130706492,32,FLEN)
NAN_BOXED(2130706432,32,FLEN)
NAN_BOXED(1065090986,32,FLEN)
NAN_BOXED(2130706474,32,FLEN)
NAN_BOXED(2130706432,32,FLEN)
NAN_BOXED(1064828790,32,FLEN)
NAN_BOXED(2130706500,32,FLEN)
NAN_BOXED(2130706432,32,FLEN)
NAN_BOXED(1064304498,32,FLEN)
NAN_BOXED(2130706502,32,FLEN)
NAN_BOXED(2130706432,32,FLEN)
NAN_BOXED(1063256048,32,FLEN)
NAN_BOXED(2130706439,32,FLEN)
NAN_BOXED(2130706432,32,FLEN)
NAN_BOXED(1061158800,32,FLEN)
NAN_BOXED(2130706487,32,FLEN)
NAN_BOXED(2130706432,32,FLEN)
NAN_BOXED(1056964220,32,FLEN)
NAN_BOXED(2130706528,32,FLEN)
NAN_BOXED(2130706432,32,FLEN)
NAN_BOXED(3225419780,32,FLEN)
NAN_BOXED(2130706443,32,FLEN)
NAN_BOXED(2130706432,32,FLEN)
NAN_BOXED(3225419788,32,FLEN)
NAN_BOXED(2130706460,32,FLEN)
NAN_BOXED(2130706432,32,FLEN)
NAN_BOXED(3225419818,32,FLEN)
NAN_BOXED(2130706522,32,FLEN)
NAN_BOXED(2130706432,32,FLEN)
NAN_BOXED(3225419794,32,FLEN)
NAN_BOXED(2130706478,32,FLEN)
NAN_BOXED(2130706432,32,FLEN)
NAN_BOXED(3225419786,32,FLEN)
NAN_BOXED(2130706470,32,FLEN)
NAN_BOXED(2130706432,32,FLEN)
NAN_BOXED(3225419799,32,FLEN)
NAN_BOXED(2130706511,32,FLEN)
NAN_BOXED(2130706432,32,FLEN)
NAN_BOXED(3225419768,32,FLEN)
NAN_BOXED(2130706482,32,FLEN)
NAN_BOXED(2130706432,32,FLEN)
NAN_BOXED(3225419720,32,FLEN)
NAN_BOXED(2130706450,32,FLEN)
NAN_BOXED(2130706432,32,FLEN)
NAN_BOXED(3225419689,32,FLEN)
NAN_BOXED(2130706515,32,FLEN)
NAN_BOXED(2130706432,32,FLEN)
NAN_BOXED(3225419560,32,FLEN)
NAN_BOXED(2130706513,32,FLEN)
NAN_BOXED(2130706432,32,FLEN)
NAN_BOXED(3225419287,32,FLEN)
NAN_BOXED(2130706479,32,FLEN)
NAN_BOXED(2130706432,32,FLEN)
NAN_BOXED(3225418790,32,FLEN)
NAN_BOXED(2130706508,32,FLEN)
NAN_BOXED(2130706432,32,FLEN)
NAN_BOXED(3225417775,32,FLEN)
NAN_BOXED(2130706527,32,FLEN)
NAN_BOXED(2130706432,32,FLEN)
NAN_BOXED(3225415705,32,FLEN)
NAN_BOXED(2130706483,32,FLEN)
NAN_BOXED(2130706432,32,FLEN)
NAN_BOXED(3225411590,32,FLEN)
NAN_BOXED(2130706445,32,FLEN)
NAN_BOXED(2130706432,32,FLEN)
NAN_BOXED(3225403394,32,FLEN)
NAN_BOXED(2130706437,32,FLEN)
NAN_BOXED(2130706432,32,FLEN)
NAN_BOXED(3225387020,32,FLEN)
NAN_BOXED(2130706458,32,FLEN)
NAN_BOXED(2130706432,32,FLEN)
NAN_BOXED(3225354242,32,FLEN)
NAN_BOXED(2130706438,32,FLEN)
NAN_BOXED(2130706432,32,FLEN)
NAN_BOXED(3225288734,32,FLEN)
NAN_BOXED(2130706494,32,FLEN)
NAN_BOXED(2130706432,32,FLEN)
NAN_BOXED(3225157632,32,FLEN)
NAN_BOXED(2130706433,32,FLEN)
NAN_BOXED(2130706432,32,FLEN)
NAN_BOXED(3224895518,32,FLEN)
NAN_BOXED(2130706493,32,FLEN)
NAN_BOXED(2130706432,32,FLEN)
NAN_BOXED(3224371240,32,FLEN)
NAN_BOXED(2130706512,32,FLEN)
NAN_BOXED(2130706432,32,FLEN)
NAN_BOXED(3223322644,32,FLEN)
NAN_BOXED(2130706474,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3271801049,32,FLEN)
NAN_BOXED(95,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3265065480,32,FLEN)
NAN_BOXED(60,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3268738899,32,FLEN)
NAN_BOXED(84,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3235919151,32,FLEN)
NAN_BOXED(21,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3249757632,32,FLEN)
NAN_BOXED(48,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1110662592,32,FLEN)
NAN_BOXED(32,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1117949174,32,FLEN)
NAN_BOXED(70,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1132398924,32,FLEN)
NAN_BOXED(74,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1144171106,32,FLEN)
NAN_BOXED(2,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1151997221,32,FLEN)
NAN_BOXED(53,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1160856486,32,FLEN)
NAN_BOXED(24,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3284414089,32,FLEN)
NAN_BOXED(24,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3308495107,32,FLEN)
NAN_BOXED(3,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3333677432,32,FLEN)
NAN_BOXED(47,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3358817697,32,FLEN)
NAN_BOXED(91,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 44*((SIGALIGN)/4),4,0xdeadbeef


signature_x11_0:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x11_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x11_2:
    .fill 26*((SIGALIGN)/4),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*XLEN/32,4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

RVMODEL_DATA_END
