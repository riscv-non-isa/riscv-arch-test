
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.9.0
// timestamp : Fri Oct  7 12:39:16 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /home/reg/tools/riscv-ctg/sample_cgfs/dataset.cgf \
//                  --cgf /home/reg/tools/riscv-ctg/sample_cgfs/sample_cgfs_fext/RV32Zfinx/fmsub.s.cgf \
 \
//                  -- xlen 32  \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fmsub.s instruction of the RISC-V RV32_Zfinx,RV32_Zdinx,RV64_Zfinx,RV64_Zdinx extension for the fmsub_b2 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32I_Zfinx,RV32I_Zdinx,RV64I_Zfinx,RV64I_Zdinx")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*Zfinx.*);def TEST_CASE_1=True;",fmsub_b2)

RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_0:
// rs1 == rd == rs3 != rs2, rs1==x31, rs2==x30, rs3==x31, rd==x31,fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x83 and fm2 == 0x6b6b0b and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000014 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x31; op2:x30; op3:x31; dest:x31; op1val:0x0; op2val:0x41eb6b0b;
op3val:0x0; valaddr_reg:x3; val_offset:0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x31, x30, x31, dyn, 0, 0, x3, 0*FLEN/8, x4, x1, x2)

inst_1:
// rs1 == rs2 != rs3 and rs1 == rs2 != rd and rd != rs3, rs1==x29, rs2==x29, rs3==x28, rd==x30,fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x85 and fm2 == 0x7105f9 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000054 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x29; op2:x29; op3:x28; dest:x30; op1val:0x0; op2val:0x0;
op3val:0x54; valaddr_reg:x3; val_offset:3*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x30, x29, x29, x28, dyn, 0, 0, x3, 3*FLEN/8, x4, x1, x2)

inst_2:
// rs1 == rd != rs2 and rs1 == rd != rs3 and rs3 != rs2, rs1==x28, rs2==x31, rs3==x30, rd==x28,fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x83 and fm2 == 0x1cf208 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00000a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x28; op2:x31; op3:x30; dest:x28; op1val:0x0; op2val:0x419cf208;
op3val:0xa; valaddr_reg:x3; val_offset:6*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x28, x28, x31, x30, dyn, 0, 0, x3, 6*FLEN/8, x4, x1, x2)

inst_3:
// rd == rs2 == rs3 != rs1, rs1==x30, rs2==x27, rs3==x27, rd==x27,fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x85 and fm2 == 0x1a2491 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00002f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x27; op3:x27; dest:x27; op1val:0x0; op2val:0x429a2491;
op3val:0x429a2491; valaddr_reg:x3; val_offset:9*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x27, x30, x27, x27, dyn, 0, 0, x3, 9*FLEN/8, x4, x1, x2)

inst_4:
// rs3 == rd != rs1 and rs3 == rd != rs2 and rs2 != rs1, rs1==x27, rs2==x28, rs3==x29, rd==x29,fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x85 and fm2 == 0x6302a6 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000041 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x27; op2:x28; op3:x29; dest:x29; op1val:0x0; op2val:0x42e302a6;
op3val:0x41; valaddr_reg:x3; val_offset:12*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x29, x27, x28, x29, dyn, 0, 0, x3, 12*FLEN/8, x4, x1, x2)

inst_5:
// rs1 == rs2 == rd != rs3, rs1==x26, rs2==x26, rs3==x25, rd==x26,fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x84 and fm2 == 0x4f6465 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000005 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x26; op2:x26; op3:x25; dest:x26; op1val:0x0; op2val:0x0;
op3val:0x5; valaddr_reg:x3; val_offset:15*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x26, x26, x26, x25, dyn, 0, 0, x3, 15*FLEN/8, x4, x1, x2)

inst_6:
// rs1 == rs2 == rs3 == rd, rs1==x24, rs2==x24, rs3==x24, rd==x24,fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x86 and fm2 == 0x2827e4 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000038 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x24; op2:x24; op3:x24; dest:x24; op1val:0x0; op2val:0x0;
op3val:0x0; valaddr_reg:x3; val_offset:18*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x24, x24, x24, x24, dyn, 0, 0, x3, 18*FLEN/8, x4, x1, x2)

inst_7:
// rs2 == rs3 != rs1 and rs2 == rs3 != rd and rd != rs1, rs1==x23, rs2==x22, rs3==x22, rd==x25,fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x86 and fm2 == 0x3ffa57 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000009 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x23; op2:x22; op3:x22; dest:x25; op1val:0x0; op2val:0x433ffa57;
op3val:0x433ffa57; valaddr_reg:x3; val_offset:21*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x25, x23, x22, x22, dyn, 0, 0, x3, 21*FLEN/8, x4, x1, x2)

inst_8:
// rs1 == rs2 == rs3 != rd, rs1==x21, rs2==x21, rs3==x21, rd==x23,fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x87 and fm2 == 0x3bc624 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00000c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x21; op2:x21; op3:x21; dest:x23; op1val:0x0; op2val:0x0;
op3val:0x0; valaddr_reg:x3; val_offset:24*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x23, x21, x21, x21, dyn, 0, 0, x3, 24*FLEN/8, x4, x1, x2)

inst_9:
// rs2 == rd != rs1 and rs2 == rd != rs3 and rs3 != rs1, rs1==x25, rs2==x20, rs3==x26, rd==x20,fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x88 and fm2 == 0x362b37 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000008 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x25; op2:x20; op3:x26; dest:x20; op1val:0x0; op2val:0x44362b37;
op3val:0x8; valaddr_reg:x3; val_offset:27*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x20, x25, x20, x26, dyn, 0, 0, x3, 27*FLEN/8, x4, x1, x2)

inst_10:
// rs1 == rs3 != rs2 and rs1 == rs3 != rd and rd != rs2, rs1==x20, rs2==x25, rs3==x20, rd==x22,fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x89 and fm2 == 0x387227 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00001d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x20; op2:x25; op3:x20; dest:x22; op1val:0x0; op2val:0x44b87227;
op3val:0x0; valaddr_reg:x3; val_offset:30*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x22, x20, x25, x20, dyn, 0, 0, x3, 30*FLEN/8, x4, x1, x2)

inst_11:
// rs1 != rs2 and rs1 != rd and rs1 != rs3 and rs2 != rs3 and rs2 != rd and rs3 != rd, rs1==x22, rs2==x23, rs3==x19, rd==x21,fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x8a and fm2 == 0x39d8e3 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00004a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x22; op2:x23; op3:x19; dest:x21; op1val:0x0; op2val:0x4539d8e3;
op3val:0x4a; valaddr_reg:x3; val_offset:33*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x21, x22, x23, x19, dyn, 0, 0, x3, 33*FLEN/8, x4, x1, x2)

inst_12:
// rs1==x18, rs2==x17, rs3==x23, rd==x19,fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x8b and fm2 == 0x33ac39 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x18; op2:x17; op3:x23; dest:x19; op1val:0x0; op2val:0x45b3ac39;
op3val:0x7; valaddr_reg:x3; val_offset:36*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x19, x18, x17, x23, dyn, 0, 0, x3, 36*FLEN/8, x4, x1, x2)

inst_13:
// rs1==x17, rs2==x19, rs3==x16, rd==x18,fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x8c and fm2 == 0x337f61 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000006 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x17; op2:x19; op3:x16; dest:x18; op1val:0x0; op2val:0x46337f61;
op3val:0x6; valaddr_reg:x3; val_offset:39*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x18, x17, x19, x16, dyn, 0, 0, x3, 39*FLEN/8, x4, x1, x2)

inst_14:
// rs1==x19, rs2==x16, rs3==x18, rd==x17,fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x8d and fm2 == 0x33c83f and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000026 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x19; op2:x16; op3:x18; dest:x17; op1val:0x0; op2val:0x46b3c83f;
op3val:0x26; valaddr_reg:x3; val_offset:42*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x17, x19, x16, x18, dyn, 0, 0, x3, 42*FLEN/8, x4, x1, x2)

inst_15:
// rs1==x15, rs2==x18, rs3==x17, rd==x16,fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x8e and fm2 == 0x33785f and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000013 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x15; op2:x18; op3:x17; dest:x16; op1val:0x0; op2val:0x4733785f;
op3val:0x13; valaddr_reg:x3; val_offset:45*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x16, x15, x18, x17, dyn, 0, 0, x3, 45*FLEN/8, x4, x1, x2)

inst_16:
// rs1==x16, rs2==x14, rs3==x13, rd==x15,fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x8f and fm2 == 0x339199 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00004a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x16; op2:x14; op3:x13; dest:x15; op1val:0x0; op2val:0x47b39199;
op3val:0x4a; valaddr_reg:x3; val_offset:48*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x15, x16, x14, x13, dyn, 0, 0, x3, 48*FLEN/8, x4, x1, x2)

inst_17:
// rs1==x13, rs2==x15, rs3==x12, rd==x14,fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x90 and fm2 == 0x3376f9 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000048 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x13; op2:x15; op3:x12; dest:x14; op1val:0x0; op2val:0x483376f9;
op3val:0x48; valaddr_reg:x3; val_offset:51*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x14, x13, x15, x12, dyn, 0, 0, x3, 51*FLEN/8, x4, x1, x2)

inst_18:
// rs1==x14, rs2==x12, rs3==x15, rd==x13,fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x91 and fm2 == 0x336033 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00000e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x14; op2:x12; op3:x15; dest:x13; op1val:0x0; op2val:0x48b36033;
op3val:0xe; valaddr_reg:x3; val_offset:54*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x13, x14, x12, x15, dyn, 0, 0, x3, 54*FLEN/8, x4, x1, x2)

inst_19:
// rs1==x11, rs2==x13, rs3==x14, rd==x12,fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x92 and fm2 == 0x3361f4 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000030 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x11; op2:x13; op3:x14; dest:x12; op1val:0x0; op2val:0x493361f4;
op3val:0x30; valaddr_reg:x3; val_offset:57*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x12, x11, x13, x14, dyn, 0, 0, x3, 57*FLEN/8, x4, x1, x2)

inst_20:
// rs1==x12, rs2==x10, rs3==x9, rd==x11,fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x93 and fm2 == 0x3360db and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000047 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x12; op2:x10; op3:x9; dest:x11; op1val:0x0; op2val:0x49b360db;
op3val:0x47; valaddr_reg:x3; val_offset:60*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x11, x12, x10, x9, dyn, 0, 0, x3, 60*FLEN/8, x4, x1, x2)
RVTEST_VALBASEUPD(x13,test_dataset_1)

inst_21:
// rs1==x9, rs2==x11, rs3==x8, rd==x10,fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x94 and fm2 == 0x335f59 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000049 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x9; op2:x11; op3:x8; dest:x10; op1val:0x0; op2val:0x4a335f59;
op3val:0x49; valaddr_reg:x13; val_offset:0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x10, x9, x11, x8, dyn, 0, 0, x13, 0*FLEN/8, x14, x1, x2)

inst_22:
// rs1==x10, rs2==x8, rs3==x11, rd==x9,fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x95 and fm2 == 0x335ea0 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000050 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x10; op2:x8; op3:x11; dest:x9; op1val:0x0; op2val:0x4ab35ea0;
op3val:0x50; valaddr_reg:x13; val_offset:3*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x9, x10, x8, x11, dyn, 0, 0, x13, 3*FLEN/8, x14, x1, x12)

inst_23:
// rs1==x7, rs2==x9, rs3==x10, rd==x8,fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x85 and fm2 == 0x309049 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000040 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x7; op2:x9; op3:x10; dest:x8; op1val:0x0; op2val:0x42b09049;
op3val:0x40; valaddr_reg:x13; val_offset:6*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x8, x7, x9, x10, dyn, 0, 0, x13, 6*FLEN/8, x14, x1, x12)
RVTEST_SIGBASE(x9,signature_x9_0)

inst_24:
// rs1==x8, rs2==x6, rs3==x5, rd==x7,fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x84 and fm2 == 0x5a9a41 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000029 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x8; op2:x6; op3:x5; dest:x7; op1val:0x0; op2val:0x425a9a41;
op3val:0x29; valaddr_reg:x13; val_offset:9*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x7, x8, x6, x5, dyn, 0, 0, x13, 9*FLEN/8, x14, x9, x12)

inst_25:
// rs1==x5, rs2==x7, rs3==x4, rd==x6,fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x85 and fm2 == 0x46fc00 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00004b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x5; op2:x7; op3:x4; dest:x6; op1val:0x0; op2val:0x42c6fc00;
op3val:0x4b; valaddr_reg:x13; val_offset:12*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x6, x5, x7, x4, dyn, 0, 0, x13, 12*FLEN/8, x14, x9, x12)

inst_26:
// rs1==x6, rs2==x4, rs3==x7, rd==x5,fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x84 and fm2 == 0x5a9a41 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00002f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x6; op2:x4; op3:x7; dest:x5; op1val:0x0; op2val:0x425a9a41;
op3val:0x2f; valaddr_reg:x13; val_offset:15*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x5, x6, x4, x7, dyn, 0, 0, x13, 15*FLEN/8, x14, x9, x12)

inst_27:
// rs1==x3, rs2==x5, rs3==x6, rd==x4,fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x83 and fm2 == 0x335dc0 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000020 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x3; op2:x5; op3:x6; dest:x4; op1val:0x0; op2val:0x41b35dc0;
op3val:0x20; valaddr_reg:x13; val_offset:18*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x4, x3, x5, x6, dyn, 0, 0, x13, 18*FLEN/8, x14, x9, x12)

inst_28:
// rs1==x4, rs2==x2, rs3==x1, rd==x3,fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x85 and fm2 == 0x228cf6 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00005a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x4; op2:x2; op3:x1; dest:x3; op1val:0x0; op2val:0x42a28cf6;
op3val:0x5a; valaddr_reg:x13; val_offset:21*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x3, x4, x2, x1, dyn, 0, 0, x13, 21*FLEN/8, x14, x9, x12)

inst_29:
// rs1==x1, rs2==x3, rs3==x0, rd==x2,fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x85 and fm2 == 0x1489a3 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00000b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x1; op2:x3; op3:x0; dest:x2; op1val:0x0; op2val:0xc29489a3;
op3val:0x0; valaddr_reg:x13; val_offset:24*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x2, x1, x3, x0, dyn, 0, 0, x13, 24*FLEN/8, x14, x9, x12)

inst_30:
// rs1==x2, rs2==x0, rs3==x3, rd==x1,fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x85 and fm2 == 0x2827e4 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000044 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x2; op2:x0; op3:x3; dest:x1; op1val:0x0; op2val:0x0;
op3val:0x44; valaddr_reg:x13; val_offset:27*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x1, x2, x0, x3, dyn, 0, 0, x13, 27*FLEN/8, x14, x9, x12)

inst_31:
// rs1==x0,fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x87 and fm2 == 0x1489a3 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00002c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x0; op2:x30; op3:x29; dest:x31; op1val:0x0; op2val:0xc39489a3;
op3val:0x2c; valaddr_reg:x13; val_offset:30*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x0, x30, x29, dyn, 0, 0, x13, 30*FLEN/8, x14, x9, x12)

inst_32:
// rs2==x1,fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x88 and fm2 == 0x266779 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000025 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x1; op3:x29; dest:x31; op1val:0x0; op2val:0xc4266779;
op3val:0x25; valaddr_reg:x13; val_offset:33*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x1, x29, dyn, 0, 0, x13, 33*FLEN/8, x14, x9, x12)

inst_33:
// rs3==x2,fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x89 and fm2 == 0x309049 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000010 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x2; dest:x31; op1val:0x0; op2val:0xc4b09049;
op3val:0x10; valaddr_reg:x13; val_offset:36*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x2, dyn, 0, 0, x13, 36*FLEN/8, x14, x9, x12)

inst_34:
// rd==x0,fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x8a and fm2 == 0x31707e and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000016 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x31; op2:x30; op3:x29; dest:x0; op1val:0x0; op2val:0xc531707e;
op3val:0x16; valaddr_reg:x13; val_offset:39*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x0, x31, x30, x29, dyn, 0, 0, x13, 39*FLEN/8, x14, x9, x12)

inst_35:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x8b and fm2 == 0x327d8a and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000014 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0xc5b27d8a;
op3val:0x14; valaddr_reg:x13; val_offset:42*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 42*FLEN/8, x14, x9, x12)

inst_36:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x8c and fm2 == 0x322f11 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000036 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0xc6322f11;
op3val:0x36; valaddr_reg:x13; val_offset:45*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 45*FLEN/8, x14, x9, x12)

inst_37:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x8d and fm2 == 0x326cba and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000056 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0xc6b26cba;
op3val:0x56; valaddr_reg:x13; val_offset:48*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 48*FLEN/8, x14, x9, x12)

inst_38:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x8e and fm2 == 0x32d46c and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000062 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0xc732d46c;
op3val:0x62; valaddr_reg:x13; val_offset:51*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 51*FLEN/8, x14, x9, x12)

inst_39:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x8f and fm2 == 0x333eeb and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00002c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0xc7b33eeb;
op3val:0x2c; valaddr_reg:x13; val_offset:54*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 54*FLEN/8, x14, x9, x12)

inst_40:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x90 and fm2 == 0x3342c6 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00004d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0xc83342c6;
op3val:0x4d; valaddr_reg:x13; val_offset:57*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 57*FLEN/8, x14, x9, x12)

inst_41:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x91 and fm2 == 0x33509c and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00004b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0xc8b3509c;
op3val:0x4b; valaddr_reg:x13; val_offset:60*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 60*FLEN/8, x14, x9, x12)

inst_42:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x92 and fm2 == 0x335cf6 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000009 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0xc9335cf6;
op3val:0x9; valaddr_reg:x13; val_offset:63*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 63*FLEN/8, x14, x9, x12)

inst_43:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x93 and fm2 == 0x335c37 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000023 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0xc9b35c37;
op3val:0x23; valaddr_reg:x13; val_offset:66*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 66*FLEN/8, x14, x9, x12)

inst_44:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x94 and fm2 == 0x335bc7 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00005a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0xca335bc7;
op3val:0x5a; valaddr_reg:x13; val_offset:69*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 69*FLEN/8, x14, x9, x12)

inst_45:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x95 and fm2 == 0x335da9 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000008 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0xcab35da9;
op3val:0x8; valaddr_reg:x13; val_offset:72*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 72*FLEN/8, x14, x9, x12)

inst_46:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x00002a and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000053 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x3f800000; op2val:0x4000002a;
op3val:0x3f800053; valaddr_reg:x13; val_offset:75*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 75*FLEN/8, x14, x9, x12)

inst_47:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x000014 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000025 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x3f800000; op2val:0x40000014;
op3val:0x3f800025; valaddr_reg:x13; val_offset:78*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 78*FLEN/8, x14, x9, x12)

inst_48:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x00002d and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000056 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x3f800000; op2val:0x4000002d;
op3val:0x3f800056; valaddr_reg:x13; val_offset:81*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 81*FLEN/8, x14, x9, x12)

inst_49:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x000006 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x3f800000; op2val:0x40000006;
op3val:0x3f800003; valaddr_reg:x13; val_offset:84*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 84*FLEN/8, x14, x9, x12)

inst_50:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x00001f and fs3 == 0 and fe3 == 0x7f and fm3 == 0x00002e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x3f800000; op2val:0x4000001f;
op3val:0x3f80002e; valaddr_reg:x13; val_offset:87*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 87*FLEN/8, x14, x9, x12)

inst_51:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x000038 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x00004f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x3f800000; op2val:0x40000038;
op3val:0x3f80004f; valaddr_reg:x13; val_offset:90*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 90*FLEN/8, x14, x9, x12)

inst_52:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x000040 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000040 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x3f800000; op2val:0x40000040;
op3val:0x3f800040; valaddr_reg:x13; val_offset:93*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 93*FLEN/8, x14, x9, x12)

inst_53:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x00004e and fs3 == 0 and fe3 == 0x7f and fm3 == 0x00001c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x3f800000; op2val:0x4000004e;
op3val:0x3f80001c; valaddr_reg:x13; val_offset:96*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 96*FLEN/8, x14, x9, x12)

inst_54:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x000088 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000011 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x3f800000; op2val:0x40000088;
op3val:0x3f800011; valaddr_reg:x13; val_offset:99*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 99*FLEN/8, x14, x9, x12)

inst_55:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x00011a and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000033 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x3f800000; op2val:0x4000011a;
op3val:0x3f800033; valaddr_reg:x13; val_offset:102*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 102*FLEN/8, x14, x9, x12)

inst_56:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x000220 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000040 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x3f800000; op2val:0x40000220;
op3val:0x3f800040; valaddr_reg:x13; val_offset:105*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 105*FLEN/8, x14, x9, x12)

inst_57:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x00040b and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000016 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x3f800000; op2val:0x4000040b;
op3val:0x3f800016; valaddr_reg:x13; val_offset:108*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 108*FLEN/8, x14, x9, x12)

inst_58:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x00081a and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000034 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x3f800000; op2val:0x4000081a;
op3val:0x3f800034; valaddr_reg:x13; val_offset:111*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 111*FLEN/8, x14, x9, x12)

inst_59:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x001009 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000012 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x3f800000; op2val:0x40001009;
op3val:0x3f800012; valaddr_reg:x13; val_offset:114*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 114*FLEN/8, x14, x9, x12)

inst_60:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x002024 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000047 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x3f800000; op2val:0x40002024;
op3val:0x3f800047; valaddr_reg:x13; val_offset:117*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 117*FLEN/8, x14, x9, x12)

inst_61:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x00402e and fs3 == 0 and fe3 == 0x7f and fm3 == 0x00005b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x3f800000; op2val:0x4000402e;
op3val:0x3f80005b; valaddr_reg:x13; val_offset:120*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 120*FLEN/8, x14, x9, x12)

inst_62:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x008017 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x00002e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x3f800000; op2val:0x40008017;
op3val:0x3f80002e; valaddr_reg:x13; val_offset:123*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 123*FLEN/8, x14, x9, x12)

inst_63:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x01000f and fs3 == 0 and fe3 == 0x7f and fm3 == 0x00001e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x3f800000; op2val:0x4001000f;
op3val:0x3f80001e; valaddr_reg:x13; val_offset:126*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 126*FLEN/8, x14, x9, x12)

inst_64:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x020006 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x00000b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x3f800000; op2val:0x40020006;
op3val:0x3f80000b; valaddr_reg:x13; val_offset:129*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 129*FLEN/8, x14, x9, x12)

inst_65:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x04000a and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000014 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x3f800000; op2val:0x4004000a;
op3val:0x3f800014; valaddr_reg:x13; val_offset:132*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 132*FLEN/8, x14, x9, x12)

inst_66:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x08002a and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000055 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x3f800000; op2val:0x4008002a;
op3val:0x3f800055; valaddr_reg:x13; val_offset:135*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 135*FLEN/8, x14, x9, x12)

inst_67:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x100001 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000002 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x3f800000; op2val:0x40100001;
op3val:0x3f800002; valaddr_reg:x13; val_offset:138*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 138*FLEN/8, x14, x9, x12)

inst_68:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x200026 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x00004c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x3f800000; op2val:0x40200026;
op3val:0x3f80004c; valaddr_reg:x13; val_offset:141*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 141*FLEN/8, x14, x9, x12)

inst_69:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x6d and fm2 == 0x040000 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000022 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x3f800000; op2val:0x36840000;
op3val:0x3f800022; valaddr_reg:x13; val_offset:144*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 144*FLEN/8, x14, x9, x12)

inst_70:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x68 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x3f800000; op2val:0xb4000000;
op3val:0x3f800001; valaddr_reg:x13; val_offset:147*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 147*FLEN/8, x14, x9, x12)

inst_71:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x6d and fm2 == 0x480000 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000036 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x3f800000; op2val:0x36c80000;
op3val:0x3f800036; valaddr_reg:x13; val_offset:150*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 150*FLEN/8, x14, x9, x12)

inst_72:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x6e and fm2 == 0x0e0000 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x00004f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x3f800000; op2val:0x370e0000;
op3val:0x3f80004f; valaddr_reg:x13; val_offset:153*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 153*FLEN/8, x14, x9, x12)

inst_73:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x68 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000011 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x3f800000; op2val:0x34000000;
op3val:0x3f800011; valaddr_reg:x13; val_offset:156*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 156*FLEN/8, x14, x9, x12)

inst_74:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x6c and fm2 == 0x580000 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x00003b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x3f800000; op2val:0x36580000;
op3val:0x3f80003b; valaddr_reg:x13; val_offset:159*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 159*FLEN/8, x14, x9, x12)

inst_75:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x6b and fm2 == 0x500000 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000033 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x3f800000; op2val:0xb5d00000;
op3val:0x3f800033; valaddr_reg:x13; val_offset:162*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 162*FLEN/8, x14, x9, x12)

inst_76:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x6e and fm2 == 0x1a0000 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000033 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x3f800000; op2val:0xb71a0000;
op3val:0x3f800033; valaddr_reg:x13; val_offset:165*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 165*FLEN/8, x14, x9, x12)

inst_77:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x6f and fm2 == 0x420000 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x00003e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x3f800000; op2val:0xb7c20000;
op3val:0x3f80003e; valaddr_reg:x13; val_offset:168*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 168*FLEN/8, x14, x9, x12)

inst_78:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x70 and fm2 == 0x7c0000 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000008 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x3f800000; op2val:0xb87c0000;
op3val:0x3f800008; valaddr_reg:x13; val_offset:171*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 171*FLEN/8, x14, x9, x12)

inst_79:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x71 and fm2 == 0x7dc000 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000009 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x3f800000; op2val:0xb8fdc000;
op3val:0x3f800009; valaddr_reg:x13; val_offset:174*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 174*FLEN/8, x14, x9, x12)

inst_80:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x72 and fm2 == 0x78e000 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000039 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x3f800000; op2val:0xb978e000;
op3val:0x3f800039; valaddr_reg:x13; val_offset:177*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 177*FLEN/8, x14, x9, x12)

inst_81:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x73 and fm2 == 0x7f1000 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x3f800000; op2val:0xb9ff1000;
op3val:0x3f80000f; valaddr_reg:x13; val_offset:180*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 180*FLEN/8, x14, x9, x12)

inst_82:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x74 and fm2 == 0x7d9800 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x00004d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x3f800000; op2val:0xba7d9800;
op3val:0x3f80004d; valaddr_reg:x13; val_offset:183*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 183*FLEN/8, x14, x9, x12)

inst_83:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x75 and fm2 == 0x7fc800 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x00000e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x3f800000; op2val:0xbaffc800;
op3val:0x3f80000e; valaddr_reg:x13; val_offset:186*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 186*FLEN/8, x14, x9, x12)

inst_84:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x76 and fm2 == 0x7f6e00 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000049 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x3f800000; op2val:0xbb7f6e00;
op3val:0x3f800049; valaddr_reg:x13; val_offset:189*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 189*FLEN/8, x14, x9, x12)

inst_85:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x77 and fm2 == 0x7fbb00 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000045 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x3f800000; op2val:0xbbffbb00;
op3val:0x3f800045; valaddr_reg:x13; val_offset:192*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 192*FLEN/8, x14, x9, x12)

inst_86:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x78 and fm2 == 0x7fe880 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x00002f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x3f800000; op2val:0xbc7fe880;
op3val:0x3f80002f; valaddr_reg:x13; val_offset:195*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 195*FLEN/8, x14, x9, x12)

inst_87:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x79 and fm2 == 0x7ffd80 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x00000a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x3f800000; op2val:0xbcfffd80;
op3val:0x3f80000a; valaddr_reg:x13; val_offset:198*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 198*FLEN/8, x14, x9, x12)

inst_88:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7a and fm2 == 0x7ff620 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x00004f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x3f800000; op2val:0xbd7ff620;
op3val:0x3f80004f; valaddr_reg:x13; val_offset:201*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 201*FLEN/8, x14, x9, x12)

inst_89:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7b and fm2 == 0x7ffec0 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000014 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x3f800000; op2val:0xbdfffec0;
op3val:0x3f800014; valaddr_reg:x13; val_offset:204*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 204*FLEN/8, x14, x9, x12)

inst_90:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x7ffe98 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x00002d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x3f800000; op2val:0xbe7ffe98;
op3val:0x3f80002d; valaddr_reg:x13; val_offset:207*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 207*FLEN/8, x14, x9, x12)

inst_91:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x7fff0c and fs3 == 0 and fe3 == 0x7f and fm3 == 0x00003d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x3f800000; op2val:0xbeffff0c;
op3val:0x3f80003d; valaddr_reg:x13; val_offset:210*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 210*FLEN/8, x14, x9, x12)

inst_92:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x83 and fm2 == 0x3027e4 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0x41b027e4;
op3val:0xf; valaddr_reg:x13; val_offset:213*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 213*FLEN/8, x14, x9, x12)

inst_93:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x85 and fm2 == 0x309049 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00003c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0x42b09049;
op3val:0x3c; valaddr_reg:x13; val_offset:216*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 216*FLEN/8, x14, x9, x12)

inst_94:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x85 and fm2 == 0x3bc624 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00003e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0x42bbc624;
op3val:0x3e; valaddr_reg:x13; val_offset:219*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 219*FLEN/8, x14, x9, x12)

inst_95:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x83 and fm2 == 0x60352f and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00000b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0x41e0352f;
op3val:0xb; valaddr_reg:x13; val_offset:222*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 222*FLEN/8, x14, x9, x12)

inst_96:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x84 and fm2 == 0x2dc2d2 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00000e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0x422dc2d2;
op3val:0xe; valaddr_reg:x13; val_offset:225*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 225*FLEN/8, x14, x9, x12)

inst_97:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x86 and fm2 == 0x335dc0 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00005f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0x43335dc0;
op3val:0x5f; valaddr_reg:x13; val_offset:228*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 228*FLEN/8, x14, x9, x12)

inst_98:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x86 and fm2 == 0x31f704 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00003e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0x4331f704;
op3val:0x3e; valaddr_reg:x13; val_offset:231*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 231*FLEN/8, x14, x9, x12)

inst_99:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x87 and fm2 == 0x0953c7 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000043 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0x438953c7;
op3val:0x43; valaddr_reg:x13; val_offset:234*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 234*FLEN/8, x14, x9, x12)

inst_100:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x87 and fm2 == 0x46fc00 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00001b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0x43c6fc00;
op3val:0x1b; valaddr_reg:x13; val_offset:237*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 237*FLEN/8, x14, x9, x12)

inst_101:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x88 and fm2 == 0x3a5f69 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000013 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0x443a5f69;
op3val:0x13; valaddr_reg:x13; val_offset:240*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 240*FLEN/8, x14, x9, x12)

inst_102:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x89 and fm2 == 0x44b510 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000062 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0x44c4b510;
op3val:0x62; valaddr_reg:x13; val_offset:243*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 243*FLEN/8, x14, x9, x12)

inst_103:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x8a and fm2 == 0x3ab918 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000053 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0x453ab918;
op3val:0x53; valaddr_reg:x13; val_offset:246*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 246*FLEN/8, x14, x9, x12)

inst_104:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x8b and fm2 == 0x3759e5 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00005a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0x45b759e5;
op3val:0x5a; valaddr_reg:x13; val_offset:249*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 249*FLEN/8, x14, x9, x12)

inst_105:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x8c and fm2 == 0x34dae7 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000043 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0x4634dae7;
op3val:0x43; valaddr_reg:x13; val_offset:252*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 252*FLEN/8, x14, x9, x12)

inst_106:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x8d and fm2 == 0x339e35 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000016 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0x46b39e35;
op3val:0x16; valaddr_reg:x13; val_offset:255*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 255*FLEN/8, x14, x9, x12)

inst_107:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x8e and fm2 == 0x33e9e1 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000063 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0x4733e9e1;
op3val:0x63; valaddr_reg:x13; val_offset:258*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 258*FLEN/8, x14, x9, x12)

inst_108:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x8f and fm2 == 0x338ecb and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000045 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0x47b38ecb;
op3val:0x45; valaddr_reg:x13; val_offset:261*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 261*FLEN/8, x14, x9, x12)

inst_109:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x90 and fm2 == 0x337ad3 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000052 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0x48337ad3;
op3val:0x52; valaddr_reg:x13; val_offset:264*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 264*FLEN/8, x14, x9, x12)

inst_110:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x91 and fm2 == 0x336bc3 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00004f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0x48b36bc3;
op3val:0x4f; valaddr_reg:x13; val_offset:267*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 267*FLEN/8, x14, x9, x12)

inst_111:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x92 and fm2 == 0x33608d and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0x4933608d;
op3val:0x1f; valaddr_reg:x13; val_offset:270*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 270*FLEN/8, x14, x9, x12)

inst_112:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x93 and fm2 == 0x3361f4 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00005f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0x49b361f4;
op3val:0x5f; valaddr_reg:x13; val_offset:273*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 273*FLEN/8, x14, x9, x12)

inst_113:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x94 and fm2 == 0x335e57 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00001a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0x4a335e57;
op3val:0x1a; valaddr_reg:x13; val_offset:276*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 276*FLEN/8, x14, x9, x12)

inst_114:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x95 and fm2 == 0x335e43 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00002e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0x4ab35e43;
op3val:0x2e; valaddr_reg:x13; val_offset:279*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 279*FLEN/8, x14, x9, x12)

inst_115:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x135dc0 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000004 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0x40935dc0;
op3val:0x4; valaddr_reg:x13; val_offset:282*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 282*FLEN/8, x14, x9, x12)

inst_116:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x85 and fm2 == 0x228cf6 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00003d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0x42a28cf6;
op3val:0x3d; valaddr_reg:x13; val_offset:285*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 285*FLEN/8, x14, x9, x12)

inst_117:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x83 and fm2 == 0x60352f and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000019 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0x41e0352f;
op3val:0x19; valaddr_reg:x13; val_offset:288*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 288*FLEN/8, x14, x9, x12)

inst_118:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x85 and fm2 == 0x0953c7 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00003a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0x428953c7;
op3val:0x3a; valaddr_reg:x13; val_offset:291*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 291*FLEN/8, x14, x9, x12)

inst_119:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x84 and fm2 == 0x2827e4 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00002f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0x422827e4;
op3val:0x2f; valaddr_reg:x13; val_offset:294*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 294*FLEN/8, x14, x9, x12)

inst_120:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x335dc0 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00001d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0xc0b35dc0;
op3val:0x1d; valaddr_reg:x13; val_offset:297*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 297*FLEN/8, x14, x9, x12)

inst_121:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x84 and fm2 == 0x442e89 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00001e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0xc2442e89;
op3val:0x1e; valaddr_reg:x13; val_offset:300*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 300*FLEN/8, x14, x9, x12)

inst_122:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x86 and fm2 == 0x105570 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00001a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0xc3105570;
op3val:0x1a; valaddr_reg:x13; val_offset:303*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 303*FLEN/8, x14, x9, x12)

inst_123:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x87 and fm2 == 0x21263a and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00001b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0xc3a1263a;
op3val:0x1b; valaddr_reg:x13; val_offset:306*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 306*FLEN/8, x14, x9, x12)

inst_124:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x88 and fm2 == 0x17b0c8 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000050 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0xc417b0c8;
op3val:0x50; valaddr_reg:x13; val_offset:309*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 309*FLEN/8, x14, x9, x12)

inst_125:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x89 and fm2 == 0x28ae6a and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00003e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0xc4a8ae6a;
op3val:0x3e; valaddr_reg:x13; val_offset:312*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 312*FLEN/8, x14, x9, x12)

inst_126:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x8a and fm2 == 0x2c2f3f and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000053 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0xc52c2f3f;
op3val:0x53; valaddr_reg:x13; val_offset:315*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 315*FLEN/8, x14, x9, x12)

inst_127:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x8b and fm2 == 0x2fb013 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000055 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0xc5afb013;
op3val:0x55; valaddr_reg:x13; val_offset:318*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 318*FLEN/8, x14, x9, x12)

inst_128:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x8c and fm2 == 0x324b18 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000032 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0xc6324b18;
op3val:0x32; valaddr_reg:x13; val_offset:321*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 321*FLEN/8, x14, x9, x12)

inst_129:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x8d and fm2 == 0x32b2ca and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00003e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0xc6b2b2ca;
op3val:0x3e; valaddr_reg:x13; val_offset:324*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 324*FLEN/8, x14, x9, x12)

inst_130:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x8e and fm2 == 0x3310ad and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000038 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0xc73310ad;
op3val:0x38; valaddr_reg:x13; val_offset:327*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 327*FLEN/8, x14, x9, x12)

inst_131:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x8f and fm2 == 0x33560a and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00000c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0xc7b3560a;
op3val:0xc; valaddr_reg:x13; val_offset:330*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 330*FLEN/8, x14, x9, x12)

inst_132:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x90 and fm2 == 0x334914 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00003c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0xc8334914;
op3val:0x3c; valaddr_reg:x13; val_offset:333*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 333*FLEN/8, x14, x9, x12)

inst_133:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x91 and fm2 == 0x334d1c and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000060 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0xc8b34d1c;
op3val:0x60; valaddr_reg:x13; val_offset:336*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 336*FLEN/8, x14, x9, x12)

inst_134:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x92 and fm2 == 0x3355b1 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00005d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0xc93355b1;
op3val:0x5d; valaddr_reg:x13; val_offset:339*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 339*FLEN/8, x14, x9, x12)

inst_135:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x93 and fm2 == 0x335cd4 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000016 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0xc9b35cd4;
op3val:0x16; valaddr_reg:x13; val_offset:342*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 342*FLEN/8, x14, x9, x12)

inst_136:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x94 and fm2 == 0x335daf and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000004 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0xca335daf;
op3val:0x4; valaddr_reg:x13; val_offset:345*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 345*FLEN/8, x14, x9, x12)

inst_137:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x95 and fm2 == 0x335ced and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00004c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0xcab35ced;
op3val:0x4c; valaddr_reg:x13; val_offset:348*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 348*FLEN/8, x14, x9, x12)

inst_138:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x96 and fm2 == 0x335e32 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000054 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0x4b335e32;
op3val:0x54; valaddr_reg:x13; val_offset:351*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 351*FLEN/8, x14, x9, x12)

inst_139:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x96 and fm2 == 0x335e2a and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00004f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0x4b335e2a;
op3val:0x4f; valaddr_reg:x13; val_offset:354*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 354*FLEN/8, x14, x9, x12)

inst_140:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x96 and fm2 == 0x335e30 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000055 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0x4b335e30;
op3val:0x55; valaddr_reg:x13; val_offset:357*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 357*FLEN/8, x14, x9, x12)

inst_141:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x96 and fm2 == 0x335dcf and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000014 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0x4b335dcf;
op3val:0x14; valaddr_reg:x13; val_offset:360*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 360*FLEN/8, x14, x9, x12)

inst_142:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x96 and fm2 == 0x335dac and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0x4b335dac;
op3val:0x3; valaddr_reg:x13; val_offset:363*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 363*FLEN/8, x14, x9, x12)

inst_143:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x96 and fm2 == 0x335e14 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00005d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0x4b335e14;
op3val:0x5d; valaddr_reg:x13; val_offset:366*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 366*FLEN/8, x14, x9, x12)

inst_144:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x96 and fm2 == 0x335dc4 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000044 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0x4b335dc4;
op3val:0x44; valaddr_reg:x13; val_offset:369*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 369*FLEN/8, x14, x9, x12)

inst_145:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x96 and fm2 == 0x335d59 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000038 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0x4b335d59;
op3val:0x38; valaddr_reg:x13; val_offset:372*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 372*FLEN/8, x14, x9, x12)

inst_146:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x96 and fm2 == 0x335c7f and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00001c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0x4b335c7f;
op3val:0x1c; valaddr_reg:x13; val_offset:375*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 375*FLEN/8, x14, x9, x12)

inst_147:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x96 and fm2 == 0x335b1f and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000021 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0x4b335b1f;
op3val:0x21; valaddr_reg:x13; val_offset:378*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 378*FLEN/8, x14, x9, x12)

inst_148:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x96 and fm2 == 0x335858 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000026 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0x4b335858;
op3val:0x26; valaddr_reg:x13; val_offset:381*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 381*FLEN/8, x14, x9, x12)

inst_149:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x96 and fm2 == 0x335312 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000062 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0x4b335312;
op3val:0x62; valaddr_reg:x13; val_offset:384*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 384*FLEN/8, x14, x9, x12)

inst_150:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x96 and fm2 == 0x334782 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000022 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0x4b334782;
op3val:0x22; valaddr_reg:x13; val_offset:387*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 387*FLEN/8, x14, x9, x12)

inst_151:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x96 and fm2 == 0x3330fe and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000011 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0x4b3330fe;
op3val:0x11; valaddr_reg:x13; val_offset:390*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 390*FLEN/8, x14, x9, x12)
RVTEST_SIGBASE(x9,signature_x9_1)

inst_152:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x96 and fm2 == 0x330494 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00005f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0x4b330494;
op3val:0x5f; valaddr_reg:x13; val_offset:393*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 393*FLEN/8, x14, x9, x12)

inst_153:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x96 and fm2 == 0x32aab3 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00003b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0x4b32aab3;
op3val:0x3b; valaddr_reg:x13; val_offset:396*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 396*FLEN/8, x14, x9, x12)

inst_154:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x96 and fm2 == 0x31f75e and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000041 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0x4b31f75e;
op3val:0x41; valaddr_reg:x13; val_offset:399*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 399*FLEN/8, x14, x9, x12)

inst_155:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x96 and fm2 == 0x3090a8 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000045 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0x4b3090a8;
op3val:0x45; valaddr_reg:x13; val_offset:402*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 402*FLEN/8, x14, x9, x12)

inst_156:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x96 and fm2 == 0x2dc32f and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000044 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0x4b2dc32f;
op3val:0x44; valaddr_reg:x13; val_offset:405*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 405*FLEN/8, x14, x9, x12)

inst_157:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x96 and fm2 == 0x282832 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000039 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0x4b282832;
op3val:0x39; valaddr_reg:x13; val_offset:408*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 408*FLEN/8, x14, x9, x12)

inst_158:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x96 and fm2 == 0x1cf273 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00004e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0x4b1cf273;
op3val:0x4e; valaddr_reg:x13; val_offset:411*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 411*FLEN/8, x14, x9, x12)

inst_159:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x96 and fm2 == 0x06866a and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000014 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0x4b06866a;
op3val:0x14; valaddr_reg:x13; val_offset:414*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 414*FLEN/8, x14, x9, x12)

inst_160:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x95 and fm2 == 0x335df2 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000013 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0x4ab35df2;
op3val:0x13; valaddr_reg:x13; val_offset:417*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 417*FLEN/8, x14, x9, x12)

inst_161:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x96 and fm2 == 0x335d4d and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000050 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0xcb335d4d;
op3val:0x50; valaddr_reg:x13; val_offset:420*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 420*FLEN/8, x14, x9, x12)

inst_162:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x96 and fm2 == 0x335d56 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000048 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0xcb335d56;
op3val:0x48; valaddr_reg:x13; val_offset:423*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 423*FLEN/8, x14, x9, x12)

inst_163:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x96 and fm2 == 0x335d7e and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00002a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0xcb335d7e;
op3val:0x2a; valaddr_reg:x13; val_offset:426*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 426*FLEN/8, x14, x9, x12)

inst_164:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x96 and fm2 == 0x335d9f and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00000e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0xcb335d9f;
op3val:0xe; valaddr_reg:x13; val_offset:429*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 429*FLEN/8, x14, x9, x12)

inst_165:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x96 and fm2 == 0x335d7b and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000020 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0xcb335d7b;
op3val:0x20; valaddr_reg:x13; val_offset:432*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 432*FLEN/8, x14, x9, x12)

inst_166:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x96 and fm2 == 0x335d5f and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000024 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0xcb335d5f;
op3val:0x24; valaddr_reg:x13; val_offset:435*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 435*FLEN/8, x14, x9, x12)

inst_167:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x96 and fm2 == 0x335cda and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000063 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0xcb335cda;
op3val:0x63; valaddr_reg:x13; val_offset:438*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 438*FLEN/8, x14, x9, x12)

inst_168:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x96 and fm2 == 0x335cb0 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000041 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0xcb335cb0;
op3val:0x41; valaddr_reg:x13; val_offset:441*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 441*FLEN/8, x14, x9, x12)

inst_169:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x96 and fm2 == 0x335bf2 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000048 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0xcb335bf2;
op3val:0x48; valaddr_reg:x13; val_offset:444*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 444*FLEN/8, x14, x9, x12)

inst_170:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x96 and fm2 == 0x335a67 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000062 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0xcb335a67;
op3val:0x62; valaddr_reg:x13; val_offset:447*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 447*FLEN/8, x14, x9, x12)

inst_171:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x96 and fm2 == 0x3357d3 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000039 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0xcb3357d3;
op3val:0x39; valaddr_reg:x13; val_offset:450*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 450*FLEN/8, x14, x9, x12)

inst_172:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x96 and fm2 == 0x33521a and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00004f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0xcb33521a;
op3val:0x4f; valaddr_reg:x13; val_offset:453*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 453*FLEN/8, x14, x9, x12)

inst_173:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x96 and fm2 == 0x3346d6 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000059 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0xcb3346d6;
op3val:0x59; valaddr_reg:x13; val_offset:456*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 456*FLEN/8, x14, x9, x12)

inst_174:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x96 and fm2 == 0x333095 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00003a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0xcb333095;
op3val:0x3a; valaddr_reg:x13; val_offset:459*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 459*FLEN/8, x14, x9, x12)

inst_175:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x96 and fm2 == 0x3303b4 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000041 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0xcb3303b4;
op3val:0x41; valaddr_reg:x13; val_offset:462*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 462*FLEN/8, x14, x9, x12)

inst_176:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x96 and fm2 == 0x32a9e2 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00005a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0xcb32a9e2;
op3val:0x5a; valaddr_reg:x13; val_offset:465*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 465*FLEN/8, x14, x9, x12)

inst_177:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x96 and fm2 == 0x31f69e and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000048 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0xcb31f69e;
op3val:0x48; valaddr_reg:x13; val_offset:468*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 468*FLEN/8, x14, x9, x12)

inst_178:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x96 and fm2 == 0x308ff6 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00003a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0xcb308ff6;
op3val:0x3a; valaddr_reg:x13; val_offset:471*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 471*FLEN/8, x14, x9, x12)

inst_179:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x96 and fm2 == 0x2dc284 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000036 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0xcb2dc284;
op3val:0x36; valaddr_reg:x13; val_offset:474*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 474*FLEN/8, x14, x9, x12)

inst_180:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x96 and fm2 == 0x28279b and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000033 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0xcb28279b;
op3val:0x33; valaddr_reg:x13; val_offset:477*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 477*FLEN/8, x14, x9, x12)

inst_181:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x96 and fm2 == 0x1cf1cd and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000029 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0xcb1cf1cd;
op3val:0x29; valaddr_reg:x13; val_offset:480*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 480*FLEN/8, x14, x9, x12)

inst_182:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x96 and fm2 == 0x0685d6 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000056 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0xcb0685d6;
op3val:0x56; valaddr_reg:x13; val_offset:483*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 483*FLEN/8, x14, x9, x12)

inst_183:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x95 and fm2 == 0x335d23 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000037 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0xcab35d23;
op3val:0x37; valaddr_reg:x13; val_offset:486*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 486*FLEN/8, x14, x9, x12)

inst_184:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x00000e and fs3 == 0 and fe3 == 0x01 and fm3 == 0x00001c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x800000; op2val:0x4000000e;
op3val:0x80001c; valaddr_reg:x13; val_offset:489*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 489*FLEN/8, x14, x9, x12)

inst_185:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x000009 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000010 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x800000; op2val:0x40000009;
op3val:0x800010; valaddr_reg:x13; val_offset:492*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 492*FLEN/8, x14, x9, x12)

inst_186:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x000030 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x00005c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x800000; op2val:0x40000030;
op3val:0x80005c; valaddr_reg:x13; val_offset:495*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 495*FLEN/8, x14, x9, x12)

inst_187:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x00000e and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000013 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x800000; op2val:0x4000000e;
op3val:0x800013; valaddr_reg:x13; val_offset:498*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 498*FLEN/8, x14, x9, x12)

inst_188:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x000011 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000012 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x800000; op2val:0x40000011;
op3val:0x800012; valaddr_reg:x13; val_offset:501*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 501*FLEN/8, x14, x9, x12)

inst_189:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x00001e and fs3 == 0 and fe3 == 0x01 and fm3 == 0x00001d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x800000; op2val:0x4000001e;
op3val:0x80001d; valaddr_reg:x13; val_offset:504*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 504*FLEN/8, x14, x9, x12)

inst_190:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x00003a and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000033 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x800000; op2val:0x4000003a;
op3val:0x800033; valaddr_reg:x13; val_offset:507*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 507*FLEN/8, x14, x9, x12)

inst_191:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x00004a and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000015 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x800000; op2val:0x4000004a;
op3val:0x800015; valaddr_reg:x13; val_offset:510*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 510*FLEN/8, x14, x9, x12)

inst_192:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x00008a and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000015 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x800000; op2val:0x4000008a;
op3val:0x800015; valaddr_reg:x13; val_offset:513*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 513*FLEN/8, x14, x9, x12)

inst_193:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x000121 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000042 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x800000; op2val:0x40000121;
op3val:0x800042; valaddr_reg:x13; val_offset:516*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 516*FLEN/8, x14, x9, x12)

inst_194:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x000216 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x00002c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x800000; op2val:0x40000216;
op3val:0x80002c; valaddr_reg:x13; val_offset:519*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 519*FLEN/8, x14, x9, x12)

inst_195:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x00040d and fs3 == 0 and fe3 == 0x01 and fm3 == 0x00001a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x800000; op2val:0x4000040d;
op3val:0x80001a; valaddr_reg:x13; val_offset:522*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 522*FLEN/8, x14, x9, x12)

inst_196:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x000814 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000029 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x800000; op2val:0x40000814;
op3val:0x800029; valaddr_reg:x13; val_offset:525*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 525*FLEN/8, x14, x9, x12)

inst_197:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x00102e and fs3 == 0 and fe3 == 0x01 and fm3 == 0x00005d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x800000; op2val:0x4000102e;
op3val:0x80005d; valaddr_reg:x13; val_offset:528*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 528*FLEN/8, x14, x9, x12)

inst_198:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x002002 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x800000; op2val:0x40002002;
op3val:0x800003; valaddr_reg:x13; val_offset:531*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 531*FLEN/8, x14, x9, x12)

inst_199:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x004024 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000047 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x800000; op2val:0x40004024;
op3val:0x800047; valaddr_reg:x13; val_offset:534*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 534*FLEN/8, x14, x9, x12)

inst_200:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x00801c and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000039 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x800000; op2val:0x4000801c;
op3val:0x800039; valaddr_reg:x13; val_offset:537*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 537*FLEN/8, x14, x9, x12)

inst_201:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x010019 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000032 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x800000; op2val:0x40010019;
op3val:0x800032; valaddr_reg:x13; val_offset:540*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 540*FLEN/8, x14, x9, x12)

inst_202:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x020022 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000043 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x800000; op2val:0x40020022;
op3val:0x800043; valaddr_reg:x13; val_offset:543*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 543*FLEN/8, x14, x9, x12)

inst_203:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x040021 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000042 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x800000; op2val:0x40040021;
op3val:0x800042; valaddr_reg:x13; val_offset:546*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 546*FLEN/8, x14, x9, x12)

inst_204:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x080008 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x800000; op2val:0x40080008;
op3val:0x80000f; valaddr_reg:x13; val_offset:549*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 549*FLEN/8, x14, x9, x12)

inst_205:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x100007 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x00000e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x800000; op2val:0x40100007;
op3val:0x80000e; valaddr_reg:x13; val_offset:552*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 552*FLEN/8, x14, x9, x12)

inst_206:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x200011 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000022 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x800000; op2val:0x40200011;
op3val:0x800022; valaddr_reg:x13; val_offset:555*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 555*FLEN/8, x14, x9, x12)

inst_207:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x6a and fm2 == 0x200000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000006 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x800000; op2val:0x35200000;
op3val:0x800006; valaddr_reg:x13; val_offset:558*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 558*FLEN/8, x14, x9, x12)

inst_208:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x6d and fm2 == 0x040000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000023 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x800000; op2val:0x36840000;
op3val:0x800023; valaddr_reg:x13; val_offset:561*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 561*FLEN/8, x14, x9, x12)

inst_209:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x6d and fm2 == 0x4c0000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000037 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x800000; op2val:0x36cc0000;
op3val:0x800037; valaddr_reg:x13; val_offset:564*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 564*FLEN/8, x14, x9, x12)

inst_210:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x6d and fm2 == 0x300000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000034 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x800000; op2val:0x36b00000;
op3val:0x800034; valaddr_reg:x13; val_offset:567*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 567*FLEN/8, x14, x9, x12)

inst_211:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x6d and fm2 == 0x540000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000045 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x800000; op2val:0x36d40000;
op3val:0x800045; valaddr_reg:x13; val_offset:570*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 570*FLEN/8, x14, x9, x12)

inst_212:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x6d and fm2 == 0x680000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x00005a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x800000; op2val:0x36e80000;
op3val:0x80005a; valaddr_reg:x13; val_offset:573*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 573*FLEN/8, x14, x9, x12)

inst_213:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x6d and fm2 == 0x500000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x00000c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x800000; op2val:0xb6d00000;
op3val:0x80000c; valaddr_reg:x13; val_offset:576*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 576*FLEN/8, x14, x9, x12)

inst_214:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x6e and fm2 == 0x700000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000008 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x800000; op2val:0xb7700000;
op3val:0x800008; valaddr_reg:x13; val_offset:579*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 579*FLEN/8, x14, x9, x12)

inst_215:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x6f and fm2 == 0x490000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000037 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x800000; op2val:0xb7c90000;
op3val:0x800037; valaddr_reg:x13; val_offset:582*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 582*FLEN/8, x14, x9, x12)

inst_216:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x70 and fm2 == 0x6e8000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000023 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x800000; op2val:0xb86e8000;
op3val:0x800023; valaddr_reg:x13; val_offset:585*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 585*FLEN/8, x14, x9, x12)

inst_217:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x71 and fm2 == 0x6b8000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000052 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x800000; op2val:0xb8eb8000;
op3val:0x800052; valaddr_reg:x13; val_offset:588*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 588*FLEN/8, x14, x9, x12)

inst_218:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x72 and fm2 == 0x7bc000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000022 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x800000; op2val:0xb97bc000;
op3val:0x800022; valaddr_reg:x13; val_offset:591*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 591*FLEN/8, x14, x9, x12)

inst_219:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x73 and fm2 == 0x7b2000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x00004e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x800000; op2val:0xb9fb2000;
op3val:0x80004e; valaddr_reg:x13; val_offset:594*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 594*FLEN/8, x14, x9, x12)

inst_220:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x74 and fm2 == 0x7fb800 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000009 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x800000; op2val:0xba7fb800;
op3val:0x800009; valaddr_reg:x13; val_offset:597*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 597*FLEN/8, x14, x9, x12)

inst_221:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x75 and fm2 == 0x7fc000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000010 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x800000; op2val:0xbaffc000;
op3val:0x800010; valaddr_reg:x13; val_offset:600*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 600*FLEN/8, x14, x9, x12)

inst_222:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x76 and fm2 == 0x7ffc00 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000002 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x800000; op2val:0xbb7ffc00;
op3val:0x800002; valaddr_reg:x13; val_offset:603*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 603*FLEN/8, x14, x9, x12)

inst_223:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x77 and fm2 == 0x7fb900 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000047 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x800000; op2val:0xbbffb900;
op3val:0x800047; valaddr_reg:x13; val_offset:606*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 606*FLEN/8, x14, x9, x12)

inst_224:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x78 and fm2 == 0x7fee80 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000023 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x800000; op2val:0xbc7fee80;
op3val:0x800023; valaddr_reg:x13; val_offset:609*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 609*FLEN/8, x14, x9, x12)

inst_225:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x79 and fm2 == 0x7ffe80 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000006 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x800000; op2val:0xbcfffe80;
op3val:0x800006; valaddr_reg:x13; val_offset:612*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 612*FLEN/8, x14, x9, x12)

inst_226:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7a and fm2 == 0x7ffe20 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x800000; op2val:0xbd7ffe20;
op3val:0x80000f; valaddr_reg:x13; val_offset:615*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 615*FLEN/8, x14, x9, x12)

inst_227:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7b and fm2 == 0x7ffde0 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000022 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x800000; op2val:0xbdfffde0;
op3val:0x800022; valaddr_reg:x13; val_offset:618*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 618*FLEN/8, x14, x9, x12)

inst_228:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7c and fm2 == 0x7fff40 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000018 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x800000; op2val:0xbe7fff40;
op3val:0x800018; valaddr_reg:x13; val_offset:621*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 621*FLEN/8, x14, x9, x12)

inst_229:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x7fff60 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000028 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x800000; op2val:0xbeffff60;
op3val:0x800028; valaddr_reg:x13; val_offset:624*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 624*FLEN/8, x14, x9, x12)

inst_230:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x400021 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000044 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f000000; op2val:0x40400021;
op3val:0x7f000044; valaddr_reg:x13; val_offset:627*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 627*FLEN/8, x14, x9, x12)

inst_231:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x400012 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000026 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f000000; op2val:0x40400012;
op3val:0x7f000026; valaddr_reg:x13; val_offset:630*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 630*FLEN/8, x14, x9, x12)

inst_232:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x40001e and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000041 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f000000; op2val:0x4040001e;
op3val:0x7f000041; valaddr_reg:x13; val_offset:633*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 633*FLEN/8, x14, x9, x12)

inst_233:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x40000d and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000023 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f000000; op2val:0x4040000d;
op3val:0x7f000023; valaddr_reg:x13; val_offset:636*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 636*FLEN/8, x14, x9, x12)

inst_234:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x3ffff9 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f000000; op2val:0x403ffff9;
op3val:0x7f000003; valaddr_reg:x13; val_offset:639*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 639*FLEN/8, x14, x9, x12)

inst_235:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x3ffff2 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000005 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f000000; op2val:0x403ffff2;
op3val:0x7f000005; valaddr_reg:x13; val_offset:642*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 642*FLEN/8, x14, x9, x12)

inst_236:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x3fffe1 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f000000; op2val:0x403fffe1;
op3val:0x7f000003; valaddr_reg:x13; val_offset:645*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 645*FLEN/8, x14, x9, x12)

inst_237:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x3fffe0 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000042 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f000000; op2val:0x403fffe0;
op3val:0x7f000042; valaddr_reg:x13; val_offset:648*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 648*FLEN/8, x14, x9, x12)

inst_238:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x3fff90 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000020 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f000000; op2val:0x403fff90;
op3val:0x7f000020; valaddr_reg:x13; val_offset:651*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 651*FLEN/8, x14, x9, x12)

inst_239:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x3fff06 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x00000e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f000000; op2val:0x403fff06;
op3val:0x7f00000e; valaddr_reg:x13; val_offset:654*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 654*FLEN/8, x14, x9, x12)

inst_240:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x3ffe2a and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000055 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f000000; op2val:0x403ffe2a;
op3val:0x7f000055; valaddr_reg:x13; val_offset:657*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 657*FLEN/8, x14, x9, x12)

inst_241:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x3ffc22 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000046 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f000000; op2val:0x403ffc22;
op3val:0x7f000046; valaddr_reg:x13; val_offset:660*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 660*FLEN/8, x14, x9, x12)

inst_242:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x3ff820 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000041 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f000000; op2val:0x403ff820;
op3val:0x7f000041; valaddr_reg:x13; val_offset:663*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 663*FLEN/8, x14, x9, x12)

inst_243:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x3ff02c and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000059 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f000000; op2val:0x403ff02c;
op3val:0x7f000059; valaddr_reg:x13; val_offset:666*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 666*FLEN/8, x14, x9, x12)

inst_244:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x3fe00e and fs3 == 0 and fe3 == 0xfe and fm3 == 0x00001e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f000000; op2val:0x403fe00e;
op3val:0x7f00001e; valaddr_reg:x13; val_offset:669*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 669*FLEN/8, x14, x9, x12)

inst_245:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x3fc00c and fs3 == 0 and fe3 == 0xfe and fm3 == 0x00001a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f000000; op2val:0x403fc00c;
op3val:0x7f00001a; valaddr_reg:x13; val_offset:672*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 672*FLEN/8, x14, x9, x12)

inst_246:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x3f801a and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000034 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f000000; op2val:0x403f801a;
op3val:0x7f000034; valaddr_reg:x13; val_offset:675*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 675*FLEN/8, x14, x9, x12)

inst_247:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x3f0003 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f000000; op2val:0x403f0003;
op3val:0x7f000007; valaddr_reg:x13; val_offset:678*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 678*FLEN/8, x14, x9, x12)

inst_248:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x3e0000 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000002 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f000000; op2val:0x403e0000;
op3val:0x7f000002; valaddr_reg:x13; val_offset:681*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 681*FLEN/8, x14, x9, x12)

inst_249:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x3c0028 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000051 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f000000; op2val:0x403c0028;
op3val:0x7f000051; valaddr_reg:x13; val_offset:684*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 684*FLEN/8, x14, x9, x12)

inst_250:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x38001c and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000038 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f000000; op2val:0x4038001c;
op3val:0x7f000038; valaddr_reg:x13; val_offset:687*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 687*FLEN/8, x14, x9, x12)

inst_251:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x300004 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000008 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f000000; op2val:0x40300004;
op3val:0x7f000008; valaddr_reg:x13; val_offset:690*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 690*FLEN/8, x14, x9, x12)

inst_252:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x20002a and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000056 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f000000; op2val:0x4020002a;
op3val:0x7f000056; valaddr_reg:x13; val_offset:693*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 693*FLEN/8, x14, x9, x12)

inst_253:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x7fff7a and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000041 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f000000; op2val:0xbf7fff7a;
op3val:0x7f000041; valaddr_reg:x13; val_offset:696*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 696*FLEN/8, x14, x9, x12)

inst_254:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x7fff60 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x00004d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f000000; op2val:0xbf7fff60;
op3val:0x7f00004d; valaddr_reg:x13; val_offset:699*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 699*FLEN/8, x14, x9, x12)

inst_255:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x7fff44 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000059 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f000000; op2val:0xbf7fff44;
op3val:0x7f000059; valaddr_reg:x13; val_offset:702*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 702*FLEN/8, x14, x9, x12)

inst_256:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x7fffe2 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000006 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f000000; op2val:0xbf7fffe2;
op3val:0x7f000006; valaddr_reg:x13; val_offset:705*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 705*FLEN/8, x14, x9, x12)

inst_257:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x7fffae and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000018 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f000000; op2val:0xbf7fffae;
op3val:0x7f000018; valaddr_reg:x13; val_offset:708*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 708*FLEN/8, x14, x9, x12)

inst_258:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x7fff78 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000023 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f000000; op2val:0xbf7fff78;
op3val:0x7f000023; valaddr_reg:x13; val_offset:711*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 711*FLEN/8, x14, x9, x12)

inst_259:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x7fff7c and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f000000; op2val:0xbf7fff7c;
op3val:0x7f000001; valaddr_reg:x13; val_offset:714*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 714*FLEN/8, x14, x9, x12)

inst_260:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x7ffea0 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x00002f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f000000; op2val:0xbf7ffea0;
op3val:0x7f00002f; valaddr_reg:x13; val_offset:717*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 717*FLEN/8, x14, x9, x12)

inst_261:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x7ffd70 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000047 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f000000; op2val:0xbf7ffd70;
op3val:0x7f000047; valaddr_reg:x13; val_offset:720*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 720*FLEN/8, x14, x9, x12)

inst_262:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x7ffbbe and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000020 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f000000; op2val:0xbf7ffbbe;
op3val:0x7f000020; valaddr_reg:x13; val_offset:723*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 723*FLEN/8, x14, x9, x12)

inst_263:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x7ff7ae and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000028 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f000000; op2val:0xbf7ff7ae;
op3val:0x7f000028; valaddr_reg:x13; val_offset:726*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 726*FLEN/8, x14, x9, x12)

inst_264:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x7fefa2 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x00002e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f000000; op2val:0xbf7fefa2;
op3val:0x7f00002e; valaddr_reg:x13; val_offset:729*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 729*FLEN/8, x14, x9, x12)

inst_265:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x7fdffc and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f000000; op2val:0xbf7fdffc;
op3val:0x7f000001; valaddr_reg:x13; val_offset:732*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 732*FLEN/8, x14, x9, x12)

inst_266:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x7fbf9c and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000031 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f000000; op2val:0xbf7fbf9c;
op3val:0x7f000031; valaddr_reg:x13; val_offset:735*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 735*FLEN/8, x14, x9, x12)

inst_267:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x7f7f84 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x00003d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f000000; op2val:0xbf7f7f84;
op3val:0x7f00003d; valaddr_reg:x13; val_offset:738*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 738*FLEN/8, x14, x9, x12)

inst_268:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x7eff7c and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000041 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f000000; op2val:0xbf7eff7c;
op3val:0x7f000041; valaddr_reg:x13; val_offset:741*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 741*FLEN/8, x14, x9, x12)

inst_269:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x7dffbe and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000020 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f000000; op2val:0xbf7dffbe;
op3val:0x7f000020; valaddr_reg:x13; val_offset:744*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 744*FLEN/8, x14, x9, x12)

inst_270:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x7bffe6 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x00000c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f000000; op2val:0xbf7bffe6;
op3val:0x7f00000c; valaddr_reg:x13; val_offset:747*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 747*FLEN/8, x14, x9, x12)

inst_271:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x77ffe6 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x00000c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f000000; op2val:0xbf77ffe6;
op3val:0x7f00000c; valaddr_reg:x13; val_offset:750*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 750*FLEN/8, x14, x9, x12)

inst_272:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x6fff96 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000034 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f000000; op2val:0xbf6fff96;
op3val:0x7f000034; valaddr_reg:x13; val_offset:753*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 753*FLEN/8, x14, x9, x12)

inst_273:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x5fff98 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000033 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f000000; op2val:0xbf5fff98;
op3val:0x7f000033; valaddr_reg:x13; val_offset:756*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 756*FLEN/8, x14, x9, x12)

inst_274:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7e and fm2 == 0x3fffb0 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000027 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f000000; op2val:0xbf3fffb0;
op3val:0x7f000027; valaddr_reg:x13; val_offset:759*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 759*FLEN/8, x14, x9, x12)

inst_275:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7d and fm2 == 0x7ffeb8 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000051 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7f000000; op2val:0xbefffeb8;
op3val:0x7f000051; valaddr_reg:x13; val_offset:762*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 762*FLEN/8, x14, x9, x12)

inst_276:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x83 and fm2 == 0x6b6b0b and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000014 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0x41eb6b0b;
op3val:0x14; valaddr_reg:x13; val_offset:765*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 765*FLEN/8, x14, x9, x12)

inst_277:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x85 and fm2 == 0x7105f9 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000054 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0x42f105f9;
op3val:0x54; valaddr_reg:x13; val_offset:768*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 768*FLEN/8, x14, x9, x12)

inst_278:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x83 and fm2 == 0x1cf208 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00000a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0x419cf208;
op3val:0xa; valaddr_reg:x13; val_offset:771*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 771*FLEN/8, x14, x9, x12)

inst_279:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x85 and fm2 == 0x1a2491 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00002f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0x429a2491;
op3val:0x2f; valaddr_reg:x13; val_offset:774*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 774*FLEN/8, x14, x9, x12)
RVTEST_SIGBASE(x9,signature_x9_2)

inst_280:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x85 and fm2 == 0x6302a6 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000041 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0x42e302a6;
op3val:0x41; valaddr_reg:x13; val_offset:777*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 777*FLEN/8, x14, x9, x12)

inst_281:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x84 and fm2 == 0x4f6465 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000005 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0x424f6465;
op3val:0x5; valaddr_reg:x13; val_offset:780*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 780*FLEN/8, x14, x9, x12)

inst_282:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x86 and fm2 == 0x2827e4 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000038 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0x432827e4;
op3val:0x38; valaddr_reg:x13; val_offset:783*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 783*FLEN/8, x14, x9, x12)

inst_283:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x86 and fm2 == 0x3ffa57 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000009 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0x433ffa57;
op3val:0x9; valaddr_reg:x13; val_offset:786*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 786*FLEN/8, x14, x9, x12)

inst_284:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x87 and fm2 == 0x3bc624 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00000c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0x43bbc624;
op3val:0xc; valaddr_reg:x13; val_offset:789*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 789*FLEN/8, x14, x9, x12)

inst_285:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x88 and fm2 == 0x362b37 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000008 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0x44362b37;
op3val:0x8; valaddr_reg:x13; val_offset:792*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 792*FLEN/8, x14, x9, x12)

inst_286:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x89 and fm2 == 0x387227 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00001d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0x44b87227;
op3val:0x1d; valaddr_reg:x13; val_offset:795*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 795*FLEN/8, x14, x9, x12)

inst_287:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x85 and fm2 == 0x1489a3 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00000b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0xc29489a3;
op3val:0xb; valaddr_reg:x13; val_offset:798*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 798*FLEN/8, x14, x9, x12)

inst_288:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x85 and fm2 == 0x2827e4 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000044 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0xc2a827e4;
op3val:0x44; valaddr_reg:x13; val_offset:801*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 801*FLEN/8, x14, x9, x12)

inst_289:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x87 and fm2 == 0x1489a3 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00002c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0xc39489a3;
op3val:0x2c; valaddr_reg:x13; val_offset:804*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 804*FLEN/8, x14, x9, x12)

inst_290:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x8a and fm2 == 0x31707e and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000016 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmsub.s ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x0; op2val:0xc531707e;
op3val:0x16; valaddr_reg:x13; val_offset:807*FLEN/8; rmval:dyn;
testreg:x12; fcsr_val:0 */
TEST_FPR4_OP(fmsub.s, x31, x30, x29, x28, dyn, 0, 0, x13, 807*FLEN/8, x14, x9, x12)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1105947403,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(84,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1100804616,32,FLEN)
NAN_BOXED(10,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1117398161,32,FLEN)
NAN_BOXED(1117398161,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1122173606,32,FLEN)
NAN_BOXED(65,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(5,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1128266327,32,FLEN)
NAN_BOXED(1128266327,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1144400695,32,FLEN)
NAN_BOXED(8,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1152938535,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1161418979,32,FLEN)
NAN_BOXED(74,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1169402937,32,FLEN)
NAN_BOXED(7,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1177780065,32,FLEN)
NAN_BOXED(6,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1186187327,32,FLEN)
NAN_BOXED(38,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1194555487,32,FLEN)
NAN_BOXED(19,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1202950553,32,FLEN)
NAN_BOXED(74,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1211332345,32,FLEN)
NAN_BOXED(72,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1219715123,32,FLEN)
NAN_BOXED(14,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1228104180,32,FLEN)
NAN_BOXED(48,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1236492507,32,FLEN)
NAN_BOXED(71,32,FLEN)
test_dataset_1:
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1244880729,32,FLEN)
NAN_BOXED(73,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1253269152,32,FLEN)
NAN_BOXED(80,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1118867529,32,FLEN)
NAN_BOXED(64,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1113233985,32,FLEN)
NAN_BOXED(41,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1120336896,32,FLEN)
NAN_BOXED(75,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1113233985,32,FLEN)
NAN_BOXED(47,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1102273984,32,FLEN)
NAN_BOXED(32,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1117949174,32,FLEN)
NAN_BOXED(90,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3264514467,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(68,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3281291683,32,FLEN)
NAN_BOXED(44,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3290851193,32,FLEN)
NAN_BOXED(37,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3299905609,32,FLEN)
NAN_BOXED(16,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3308351614,32,FLEN)
NAN_BOXED(22,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3316809098,32,FLEN)
NAN_BOXED(20,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3325177617,32,FLEN)
NAN_BOXED(54,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3333582010,32,FLEN)
NAN_BOXED(86,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3341997164,32,FLEN)
NAN_BOXED(98,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3350413035,32,FLEN)
NAN_BOXED(44,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3358802630,32,FLEN)
NAN_BOXED(77,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3367194780,32,FLEN)
NAN_BOXED(75,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3375586550,32,FLEN)
NAN_BOXED(9,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3383974967,32,FLEN)
NAN_BOXED(35,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3392363463,32,FLEN)
NAN_BOXED(90,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3400752553,32,FLEN)
NAN_BOXED(8,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(1073741866,32,FLEN)
NAN_BOXED(1065353299,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(1073741844,32,FLEN)
NAN_BOXED(1065353253,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(1073741869,32,FLEN)
NAN_BOXED(1065353302,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(1073741830,32,FLEN)
NAN_BOXED(1065353219,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(1073741855,32,FLEN)
NAN_BOXED(1065353262,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(1073741880,32,FLEN)
NAN_BOXED(1065353295,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(1073741888,32,FLEN)
NAN_BOXED(1065353280,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(1073741902,32,FLEN)
NAN_BOXED(1065353244,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(1073741960,32,FLEN)
NAN_BOXED(1065353233,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(1073742106,32,FLEN)
NAN_BOXED(1065353267,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(1073742368,32,FLEN)
NAN_BOXED(1065353280,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(1073742859,32,FLEN)
NAN_BOXED(1065353238,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(1073743898,32,FLEN)
NAN_BOXED(1065353268,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(1073745929,32,FLEN)
NAN_BOXED(1065353234,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(1073750052,32,FLEN)
NAN_BOXED(1065353287,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(1073758254,32,FLEN)
NAN_BOXED(1065353307,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(1073774615,32,FLEN)
NAN_BOXED(1065353262,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(1073807375,32,FLEN)
NAN_BOXED(1065353246,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(1073872902,32,FLEN)
NAN_BOXED(1065353227,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(1074003978,32,FLEN)
NAN_BOXED(1065353236,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(1074266154,32,FLEN)
NAN_BOXED(1065353301,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(1074790401,32,FLEN)
NAN_BOXED(1065353218,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(1075839014,32,FLEN)
NAN_BOXED(1065353292,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(914620416,32,FLEN)
NAN_BOXED(1065353250,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(3019898880,32,FLEN)
NAN_BOXED(1065353217,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(919076864,32,FLEN)
NAN_BOXED(1065353270,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(923664384,32,FLEN)
NAN_BOXED(1065353295,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(872415232,32,FLEN)
NAN_BOXED(1065353233,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(911736832,32,FLEN)
NAN_BOXED(1065353275,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(3050307584,32,FLEN)
NAN_BOXED(1065353267,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(3071934464,32,FLEN)
NAN_BOXED(1065353267,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(3082944512,32,FLEN)
NAN_BOXED(1065353278,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(3095134208,32,FLEN)
NAN_BOXED(1065353224,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(3103637504,32,FLEN)
NAN_BOXED(1065353225,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(3111706624,32,FLEN)
NAN_BOXED(1065353273,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(3120500736,32,FLEN)
NAN_BOXED(1065353231,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(3128793088,32,FLEN)
NAN_BOXED(1065353293,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(3137325056,32,FLEN)
NAN_BOXED(1065353230,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(3145690624,32,FLEN)
NAN_BOXED(1065353289,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(3154098944,32,FLEN)
NAN_BOXED(1065353285,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(3162499200,32,FLEN)
NAN_BOXED(1065353263,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(3170893184,32,FLEN)
NAN_BOXED(1065353226,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(3179279904,32,FLEN)
NAN_BOXED(1065353295,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(3187670720,32,FLEN)
NAN_BOXED(1065353236,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(3196059288,32,FLEN)
NAN_BOXED(1065353261,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(3204448012,32,FLEN)
NAN_BOXED(1065353277,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1102063588,32,FLEN)
NAN_BOXED(15,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1118867529,32,FLEN)
NAN_BOXED(60,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1119602212,32,FLEN)
NAN_BOXED(62,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1105212719,32,FLEN)
NAN_BOXED(11,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1110295250,32,FLEN)
NAN_BOXED(14,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1127439808,32,FLEN)
NAN_BOXED(95,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1127347972,32,FLEN)
NAN_BOXED(62,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1133073351,32,FLEN)
NAN_BOXED(67,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1137114112,32,FLEN)
NAN_BOXED(27,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1144676201,32,FLEN)
NAN_BOXED(19,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1153742096,32,FLEN)
NAN_BOXED(98,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1161476376,32,FLEN)
NAN_BOXED(83,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1169644005,32,FLEN)
NAN_BOXED(90,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1177869031,32,FLEN)
NAN_BOXED(67,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1186176565,32,FLEN)
NAN_BOXED(22,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1194584545,32,FLEN)
NAN_BOXED(99,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1202949835,32,FLEN)
NAN_BOXED(69,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1211333331,32,FLEN)
NAN_BOXED(82,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1219718083,32,FLEN)
NAN_BOXED(79,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1228103821,32,FLEN)
NAN_BOXED(31,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1236492788,32,FLEN)
NAN_BOXED(95,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1244880471,32,FLEN)
NAN_BOXED(26,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1253269059,32,FLEN)
NAN_BOXED(46,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1083399616,32,FLEN)
NAN_BOXED(4,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1117949174,32,FLEN)
NAN_BOXED(61,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1105212719,32,FLEN)
NAN_BOXED(25,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1116296135,32,FLEN)
NAN_BOXED(58,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1109927908,32,FLEN)
NAN_BOXED(47,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3232980416,32,FLEN)
NAN_BOXED(29,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3259248265,32,FLEN)
NAN_BOXED(30,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3272627568,32,FLEN)
NAN_BOXED(26,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3282118202,32,FLEN)
NAN_BOXED(27,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3289886920,32,FLEN)
NAN_BOXED(80,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3299389034,32,FLEN)
NAN_BOXED(62,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3308007231,32,FLEN)
NAN_BOXED(83,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3316625427,32,FLEN)
NAN_BOXED(85,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3325184792,32,FLEN)
NAN_BOXED(50,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3333599946,32,FLEN)
NAN_BOXED(62,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3342012589,32,FLEN)
NAN_BOXED(56,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3350418954,32,FLEN)
NAN_BOXED(12,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3358804244,32,FLEN)
NAN_BOXED(60,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3367193884,32,FLEN)
NAN_BOXED(96,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3375584689,32,FLEN)
NAN_BOXED(93,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3383975124,32,FLEN)
NAN_BOXED(22,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3392363951,32,FLEN)
NAN_BOXED(4,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3400752365,32,FLEN)
NAN_BOXED(76,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1261657650,32,FLEN)
NAN_BOXED(84,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1261657642,32,FLEN)
NAN_BOXED(79,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1261657648,32,FLEN)
NAN_BOXED(85,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1261657551,32,FLEN)
NAN_BOXED(20,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1261657516,32,FLEN)
NAN_BOXED(3,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1261657620,32,FLEN)
NAN_BOXED(93,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1261657540,32,FLEN)
NAN_BOXED(68,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1261657433,32,FLEN)
NAN_BOXED(56,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1261657215,32,FLEN)
NAN_BOXED(28,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1261656863,32,FLEN)
NAN_BOXED(33,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1261656152,32,FLEN)
NAN_BOXED(38,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1261654802,32,FLEN)
NAN_BOXED(98,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1261651842,32,FLEN)
NAN_BOXED(34,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1261646078,32,FLEN)
NAN_BOXED(17,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1261634708,32,FLEN)
NAN_BOXED(95,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1261611699,32,FLEN)
NAN_BOXED(59,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1261565790,32,FLEN)
NAN_BOXED(65,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1261473960,32,FLEN)
NAN_BOXED(69,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1261290287,32,FLEN)
NAN_BOXED(68,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1260922930,32,FLEN)
NAN_BOXED(57,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1260188275,32,FLEN)
NAN_BOXED(78,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1258718826,32,FLEN)
NAN_BOXED(20,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1253268978,32,FLEN)
NAN_BOXED(19,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3409141069,32,FLEN)
NAN_BOXED(80,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3409141078,32,FLEN)
NAN_BOXED(72,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3409141118,32,FLEN)
NAN_BOXED(42,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3409141151,32,FLEN)
NAN_BOXED(14,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3409141115,32,FLEN)
NAN_BOXED(32,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3409141087,32,FLEN)
NAN_BOXED(36,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3409140954,32,FLEN)
NAN_BOXED(99,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3409140912,32,FLEN)
NAN_BOXED(65,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3409140722,32,FLEN)
NAN_BOXED(72,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3409140327,32,FLEN)
NAN_BOXED(98,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3409139667,32,FLEN)
NAN_BOXED(57,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3409138202,32,FLEN)
NAN_BOXED(79,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3409135318,32,FLEN)
NAN_BOXED(89,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3409129621,32,FLEN)
NAN_BOXED(58,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3409118132,32,FLEN)
NAN_BOXED(65,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3409095138,32,FLEN)
NAN_BOXED(90,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3409049246,32,FLEN)
NAN_BOXED(72,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3408957430,32,FLEN)
NAN_BOXED(58,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3408773764,32,FLEN)
NAN_BOXED(54,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3408406427,32,FLEN)
NAN_BOXED(51,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3407671757,32,FLEN)
NAN_BOXED(41,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3406202326,32,FLEN)
NAN_BOXED(86,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3400752419,32,FLEN)
NAN_BOXED(55,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(1073741838,32,FLEN)
NAN_BOXED(8388636,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(1073741833,32,FLEN)
NAN_BOXED(8388624,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(1073741872,32,FLEN)
NAN_BOXED(8388700,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(1073741838,32,FLEN)
NAN_BOXED(8388627,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(1073741841,32,FLEN)
NAN_BOXED(8388626,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(1073741854,32,FLEN)
NAN_BOXED(8388637,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(1073741882,32,FLEN)
NAN_BOXED(8388659,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(1073741898,32,FLEN)
NAN_BOXED(8388629,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(1073741962,32,FLEN)
NAN_BOXED(8388629,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(1073742113,32,FLEN)
NAN_BOXED(8388674,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(1073742358,32,FLEN)
NAN_BOXED(8388652,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(1073742861,32,FLEN)
NAN_BOXED(8388634,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(1073743892,32,FLEN)
NAN_BOXED(8388649,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(1073745966,32,FLEN)
NAN_BOXED(8388701,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(1073750018,32,FLEN)
NAN_BOXED(8388611,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(1073758244,32,FLEN)
NAN_BOXED(8388679,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(1073774620,32,FLEN)
NAN_BOXED(8388665,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(1073807385,32,FLEN)
NAN_BOXED(8388658,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(1073872930,32,FLEN)
NAN_BOXED(8388675,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(1074004001,32,FLEN)
NAN_BOXED(8388674,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(1074266120,32,FLEN)
NAN_BOXED(8388623,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(1074790407,32,FLEN)
NAN_BOXED(8388622,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(1075838993,32,FLEN)
NAN_BOXED(8388642,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(891289600,32,FLEN)
NAN_BOXED(8388614,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(914620416,32,FLEN)
NAN_BOXED(8388643,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(919339008,32,FLEN)
NAN_BOXED(8388663,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(917504000,32,FLEN)
NAN_BOXED(8388660,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(919863296,32,FLEN)
NAN_BOXED(8388677,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(921174016,32,FLEN)
NAN_BOXED(8388698,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(3067084800,32,FLEN)
NAN_BOXED(8388620,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(3077570560,32,FLEN)
NAN_BOXED(8388616,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(3083403264,32,FLEN)
NAN_BOXED(8388663,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(3094249472,32,FLEN)
NAN_BOXED(8388643,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(3102441472,32,FLEN)
NAN_BOXED(8388690,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(3111895040,32,FLEN)
NAN_BOXED(8388642,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(3120242688,32,FLEN)
NAN_BOXED(8388686,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(3128932352,32,FLEN)
NAN_BOXED(8388617,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(3137323008,32,FLEN)
NAN_BOXED(8388624,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(3145726976,32,FLEN)
NAN_BOXED(8388610,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(3154098432,32,FLEN)
NAN_BOXED(8388679,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(3162500736,32,FLEN)
NAN_BOXED(8388643,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(3170893440,32,FLEN)
NAN_BOXED(8388614,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(3179281952,32,FLEN)
NAN_BOXED(8388623,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(3187670496,32,FLEN)
NAN_BOXED(8388642,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(3196059456,32,FLEN)
NAN_BOXED(8388632,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(3204448096,32,FLEN)
NAN_BOXED(8388648,32,FLEN)
NAN_BOXED(2130706432,32,FLEN)
NAN_BOXED(1077936161,32,FLEN)
NAN_BOXED(2130706500,32,FLEN)
NAN_BOXED(2130706432,32,FLEN)
NAN_BOXED(1077936146,32,FLEN)
NAN_BOXED(2130706470,32,FLEN)
NAN_BOXED(2130706432,32,FLEN)
NAN_BOXED(1077936158,32,FLEN)
NAN_BOXED(2130706497,32,FLEN)
NAN_BOXED(2130706432,32,FLEN)
NAN_BOXED(1077936141,32,FLEN)
NAN_BOXED(2130706467,32,FLEN)
NAN_BOXED(2130706432,32,FLEN)
NAN_BOXED(1077936121,32,FLEN)
NAN_BOXED(2130706435,32,FLEN)
NAN_BOXED(2130706432,32,FLEN)
NAN_BOXED(1077936114,32,FLEN)
NAN_BOXED(2130706437,32,FLEN)
NAN_BOXED(2130706432,32,FLEN)
NAN_BOXED(1077936097,32,FLEN)
NAN_BOXED(2130706435,32,FLEN)
NAN_BOXED(2130706432,32,FLEN)
NAN_BOXED(1077936096,32,FLEN)
NAN_BOXED(2130706498,32,FLEN)
NAN_BOXED(2130706432,32,FLEN)
NAN_BOXED(1077936016,32,FLEN)
NAN_BOXED(2130706464,32,FLEN)
NAN_BOXED(2130706432,32,FLEN)
NAN_BOXED(1077935878,32,FLEN)
NAN_BOXED(2130706446,32,FLEN)
NAN_BOXED(2130706432,32,FLEN)
NAN_BOXED(1077935658,32,FLEN)
NAN_BOXED(2130706517,32,FLEN)
NAN_BOXED(2130706432,32,FLEN)
NAN_BOXED(1077935138,32,FLEN)
NAN_BOXED(2130706502,32,FLEN)
NAN_BOXED(2130706432,32,FLEN)
NAN_BOXED(1077934112,32,FLEN)
NAN_BOXED(2130706497,32,FLEN)
NAN_BOXED(2130706432,32,FLEN)
NAN_BOXED(1077932076,32,FLEN)
NAN_BOXED(2130706521,32,FLEN)
NAN_BOXED(2130706432,32,FLEN)
NAN_BOXED(1077927950,32,FLEN)
NAN_BOXED(2130706462,32,FLEN)
NAN_BOXED(2130706432,32,FLEN)
NAN_BOXED(1077919756,32,FLEN)
NAN_BOXED(2130706458,32,FLEN)
NAN_BOXED(2130706432,32,FLEN)
NAN_BOXED(1077903386,32,FLEN)
NAN_BOXED(2130706484,32,FLEN)
NAN_BOXED(2130706432,32,FLEN)
NAN_BOXED(1077870595,32,FLEN)
NAN_BOXED(2130706439,32,FLEN)
NAN_BOXED(2130706432,32,FLEN)
NAN_BOXED(1077805056,32,FLEN)
NAN_BOXED(2130706434,32,FLEN)
NAN_BOXED(2130706432,32,FLEN)
NAN_BOXED(1077674024,32,FLEN)
NAN_BOXED(2130706513,32,FLEN)
NAN_BOXED(2130706432,32,FLEN)
NAN_BOXED(1077411868,32,FLEN)
NAN_BOXED(2130706488,32,FLEN)
NAN_BOXED(2130706432,32,FLEN)
NAN_BOXED(1076887556,32,FLEN)
NAN_BOXED(2130706440,32,FLEN)
NAN_BOXED(2130706432,32,FLEN)
NAN_BOXED(1075839018,32,FLEN)
NAN_BOXED(2130706518,32,FLEN)
NAN_BOXED(2130706432,32,FLEN)
NAN_BOXED(3212836730,32,FLEN)
NAN_BOXED(2130706497,32,FLEN)
NAN_BOXED(2130706432,32,FLEN)
NAN_BOXED(3212836704,32,FLEN)
NAN_BOXED(2130706509,32,FLEN)
NAN_BOXED(2130706432,32,FLEN)
NAN_BOXED(3212836676,32,FLEN)
NAN_BOXED(2130706521,32,FLEN)
NAN_BOXED(2130706432,32,FLEN)
NAN_BOXED(3212836834,32,FLEN)
NAN_BOXED(2130706438,32,FLEN)
NAN_BOXED(2130706432,32,FLEN)
NAN_BOXED(3212836782,32,FLEN)
NAN_BOXED(2130706456,32,FLEN)
NAN_BOXED(2130706432,32,FLEN)
NAN_BOXED(3212836728,32,FLEN)
NAN_BOXED(2130706467,32,FLEN)
NAN_BOXED(2130706432,32,FLEN)
NAN_BOXED(3212836732,32,FLEN)
NAN_BOXED(2130706433,32,FLEN)
NAN_BOXED(2130706432,32,FLEN)
NAN_BOXED(3212836512,32,FLEN)
NAN_BOXED(2130706479,32,FLEN)
NAN_BOXED(2130706432,32,FLEN)
NAN_BOXED(3212836208,32,FLEN)
NAN_BOXED(2130706503,32,FLEN)
NAN_BOXED(2130706432,32,FLEN)
NAN_BOXED(3212835774,32,FLEN)
NAN_BOXED(2130706464,32,FLEN)
NAN_BOXED(2130706432,32,FLEN)
NAN_BOXED(3212834734,32,FLEN)
NAN_BOXED(2130706472,32,FLEN)
NAN_BOXED(2130706432,32,FLEN)
NAN_BOXED(3212832674,32,FLEN)
NAN_BOXED(2130706478,32,FLEN)
NAN_BOXED(2130706432,32,FLEN)
NAN_BOXED(3212828668,32,FLEN)
NAN_BOXED(2130706433,32,FLEN)
NAN_BOXED(2130706432,32,FLEN)
NAN_BOXED(3212820380,32,FLEN)
NAN_BOXED(2130706481,32,FLEN)
NAN_BOXED(2130706432,32,FLEN)
NAN_BOXED(3212803972,32,FLEN)
NAN_BOXED(2130706493,32,FLEN)
NAN_BOXED(2130706432,32,FLEN)
NAN_BOXED(3212771196,32,FLEN)
NAN_BOXED(2130706497,32,FLEN)
NAN_BOXED(2130706432,32,FLEN)
NAN_BOXED(3212705726,32,FLEN)
NAN_BOXED(2130706464,32,FLEN)
NAN_BOXED(2130706432,32,FLEN)
NAN_BOXED(3212574694,32,FLEN)
NAN_BOXED(2130706444,32,FLEN)
NAN_BOXED(2130706432,32,FLEN)
NAN_BOXED(3212312550,32,FLEN)
NAN_BOXED(2130706444,32,FLEN)
NAN_BOXED(2130706432,32,FLEN)
NAN_BOXED(3211788182,32,FLEN)
NAN_BOXED(2130706484,32,FLEN)
NAN_BOXED(2130706432,32,FLEN)
NAN_BOXED(3210739608,32,FLEN)
NAN_BOXED(2130706483,32,FLEN)
NAN_BOXED(2130706432,32,FLEN)
NAN_BOXED(3208642480,32,FLEN)
NAN_BOXED(2130706471,32,FLEN)
NAN_BOXED(2130706432,32,FLEN)
NAN_BOXED(3204447928,32,FLEN)
NAN_BOXED(2130706513,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1105947403,32,FLEN)
NAN_BOXED(20,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1123091961,32,FLEN)
NAN_BOXED(84,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1100804616,32,FLEN)
NAN_BOXED(10,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1117398161,32,FLEN)
NAN_BOXED(47,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1122173606,32,FLEN)
NAN_BOXED(65,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1112499301,32,FLEN)
NAN_BOXED(5,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1126705124,32,FLEN)
NAN_BOXED(56,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1128266327,32,FLEN)
NAN_BOXED(9,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1136379428,32,FLEN)
NAN_BOXED(12,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1144400695,32,FLEN)
NAN_BOXED(8,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1152938535,32,FLEN)
NAN_BOXED(29,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3264514467,32,FLEN)
NAN_BOXED(11,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3265800164,32,FLEN)
NAN_BOXED(68,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3281291683,32,FLEN)
NAN_BOXED(44,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3308351614,32,FLEN)
NAN_BOXED(22,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 48*((SIGALIGN)/4),4,0xdeadbeef


signature_x9_0:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x9_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x9_2:
    .fill 22*((SIGALIGN)/4),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*XLEN/32,4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

RVMODEL_DATA_END
