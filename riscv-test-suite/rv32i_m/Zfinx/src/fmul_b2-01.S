
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.9.0
// timestamp : Mon Oct  3 07:42:59 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /home/reg/tools/riscv-ctg/sample_cgfs/dataset.cgf \
//                  --cgf /home/reg/tools/riscv-ctg/sample_cgfs/sample_cgfs_fext/RV32Zfinx/fmul.s.cgf \
 \
//                  -- xlen 32  \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fmul.s instruction of the RISC-V RV32_Zfinx,RV32_Zdinx,RV64_Zfinx,RV64_Zdinx extension for the fmul_b2 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32I_Zfinx,RV32I_Zdinx,RV64I_Zfinx,RV64I_Zdinx")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*Zfinx.*);def TEST_CASE_1=True;",fmul_b2)

RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_0:
// rs2 == rd != rs1, rs1==x30, rs2==x31, rd==x31,fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x335dc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.s ; op1:x30; op2:x31; dest:x31; op1val:0x0; op2val:0x3fb35dc0;
   valaddr_reg:x3; val_offset:0*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.s, x31, x30, x31, dyn, 0, 0, x3, 0*FLEN/8, x4, x1, x2)

inst_1:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x31, rs2==x29, rd==x30,fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x335dc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.s ; op1:x31; op2:x29; dest:x30; op1val:0x0; op2val:0x40335dc0;
   valaddr_reg:x3; val_offset:2*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.s, x30, x31, x29, dyn, 0, 0, x3, 2*FLEN/8, x4, x1, x2)

inst_2:
// rs1 == rs2 == rd, rs1==x28, rs2==x28, rd==x28,fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x335dc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.s ; op1:x28; op2:x28; dest:x28; op1val:0x0; op2val:0x0;
   valaddr_reg:x3; val_offset:4*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.s, x28, x28, x28, dyn, 0, 0, x3, 4*FLEN/8, x4, x1, x2)

inst_3:
// rs1 == rs2 != rd, rs1==x27, rs2==x27, rd==x29,fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x335dc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.s ; op1:x27; op2:x27; dest:x29; op1val:0x0; op2val:0x0;
   valaddr_reg:x3; val_offset:6*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.s, x29, x27, x27, dyn, 0, 0, x3, 6*FLEN/8, x4, x1, x2)

inst_4:
// rs1 == rd != rs2, rs1==x26, rs2==x30, rd==x26,fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x83 and fm2 == 0x335dc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.s ; op1:x26; op2:x30; dest:x26; op1val:0x0; op2val:0x41b35dc0;
   valaddr_reg:x3; val_offset:8*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.s, x26, x26, x30, dyn, 0, 0, x3, 8*FLEN/8, x4, x1, x2)

inst_5:
// rs1==x29, rs2==x26, rd==x27,fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x84 and fm2 == 0x335dc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.s ; op1:x29; op2:x26; dest:x27; op1val:0x0; op2val:0x42335dc0;
   valaddr_reg:x3; val_offset:10*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.s, x27, x29, x26, dyn, 0, 0, x3, 10*FLEN/8, x4, x1, x2)

inst_6:
// rs1==x24, rs2==x23, rd==x25,fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x85 and fm2 == 0x335dc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.s ; op1:x24; op2:x23; dest:x25; op1val:0x0; op2val:0x42b35dc0;
   valaddr_reg:x3; val_offset:12*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.s, x25, x24, x23, dyn, 0, 0, x3, 12*FLEN/8, x4, x1, x2)

inst_7:
// rs1==x23, rs2==x25, rd==x24,fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x86 and fm2 == 0x335dc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.s ; op1:x23; op2:x25; dest:x24; op1val:0x0; op2val:0x43335dc0;
   valaddr_reg:x3; val_offset:14*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.s, x24, x23, x25, dyn, 0, 0, x3, 14*FLEN/8, x4, x1, x2)

inst_8:
// rs1==x25, rs2==x24, rd==x23,fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x87 and fm2 == 0x335dc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.s ; op1:x25; op2:x24; dest:x23; op1val:0x0; op2val:0x43b35dc0;
   valaddr_reg:x3; val_offset:16*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.s, x23, x25, x24, dyn, 0, 0, x3, 16*FLEN/8, x4, x1, x2)

inst_9:
// rs1==x21, rs2==x20, rd==x22,fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x88 and fm2 == 0x335dc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.s ; op1:x21; op2:x20; dest:x22; op1val:0x0; op2val:0x44335dc0;
   valaddr_reg:x3; val_offset:18*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.s, x22, x21, x20, dyn, 0, 0, x3, 18*FLEN/8, x4, x1, x2)

inst_10:
// rs1==x20, rs2==x22, rd==x21,fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x89 and fm2 == 0x335dc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.s ; op1:x20; op2:x22; dest:x21; op1val:0x0; op2val:0x44b35dc0;
   valaddr_reg:x3; val_offset:20*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.s, x21, x20, x22, dyn, 0, 0, x3, 20*FLEN/8, x4, x1, x2)

inst_11:
// rs1==x22, rs2==x21, rd==x20,fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x8a and fm2 == 0x335dc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.s ; op1:x22; op2:x21; dest:x20; op1val:0x0; op2val:0x45335dc0;
   valaddr_reg:x3; val_offset:22*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.s, x20, x22, x21, dyn, 0, 0, x3, 22*FLEN/8, x4, x1, x2)

inst_12:
// rs1==x18, rs2==x17, rd==x19,fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x8b and fm2 == 0x335dc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.s ; op1:x18; op2:x17; dest:x19; op1val:0x0; op2val:0x45b35dc0;
   valaddr_reg:x3; val_offset:24*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.s, x19, x18, x17, dyn, 0, 0, x3, 24*FLEN/8, x4, x1, x2)

inst_13:
// rs1==x17, rs2==x19, rd==x18,fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x8c and fm2 == 0x335dc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.s ; op1:x17; op2:x19; dest:x18; op1val:0x0; op2val:0x46335dc0;
   valaddr_reg:x3; val_offset:26*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.s, x18, x17, x19, dyn, 0, 0, x3, 26*FLEN/8, x4, x1, x2)

inst_14:
// rs1==x19, rs2==x18, rd==x17,fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x8d and fm2 == 0x335dc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.s ; op1:x19; op2:x18; dest:x17; op1val:0x0; op2val:0x46b35dc0;
   valaddr_reg:x3; val_offset:28*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.s, x17, x19, x18, dyn, 0, 0, x3, 28*FLEN/8, x4, x1, x2)

inst_15:
// rs1==x15, rs2==x14, rd==x16,fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x8e and fm2 == 0x335dc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.s ; op1:x15; op2:x14; dest:x16; op1val:0x0; op2val:0x47335dc0;
   valaddr_reg:x3; val_offset:30*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.s, x16, x15, x14, dyn, 0, 0, x3, 30*FLEN/8, x4, x1, x2)

inst_16:
// rs1==x14, rs2==x16, rd==x15,fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x8f and fm2 == 0x335dc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.s ; op1:x14; op2:x16; dest:x15; op1val:0x0; op2val:0x47b35dc0;
   valaddr_reg:x3; val_offset:32*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.s, x15, x14, x16, dyn, 0, 0, x3, 32*FLEN/8, x4, x1, x2)

inst_17:
// rs1==x16, rs2==x15, rd==x14,fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x90 and fm2 == 0x335dc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.s ; op1:x16; op2:x15; dest:x14; op1val:0x0; op2val:0x48335dc0;
   valaddr_reg:x3; val_offset:34*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.s, x14, x16, x15, dyn, 0, 0, x3, 34*FLEN/8, x4, x1, x2)

inst_18:
// rs1==x12, rs2==x11, rd==x13,fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x91 and fm2 == 0x335dc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.s ; op1:x12; op2:x11; dest:x13; op1val:0x0; op2val:0x48b35dc0;
   valaddr_reg:x3; val_offset:36*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.s, x13, x12, x11, dyn, 0, 0, x3, 36*FLEN/8, x4, x1, x2)

inst_19:
// rs1==x11, rs2==x13, rd==x12,fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x92 and fm2 == 0x335dc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.s ; op1:x11; op2:x13; dest:x12; op1val:0x0; op2val:0x49335dc0;
   valaddr_reg:x3; val_offset:38*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.s, x12, x11, x13, dyn, 0, 0, x3, 38*FLEN/8, x4, x1, x2)

inst_20:
// rs1==x13, rs2==x12, rd==x11,fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x93 and fm2 == 0x335dc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.s ; op1:x13; op2:x12; dest:x11; op1val:0x0; op2val:0x49b35dc0;
   valaddr_reg:x3; val_offset:40*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.s, x11, x13, x12, dyn, 0, 0, x3, 40*FLEN/8, x4, x1, x2)

inst_21:
// rs1==x9, rs2==x8, rd==x10,fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x94 and fm2 == 0x335dc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.s ; op1:x9; op2:x8; dest:x10; op1val:0x0; op2val:0x4a335dc0;
   valaddr_reg:x3; val_offset:42*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.s, x10, x9, x8, dyn, 0, 0, x3, 42*FLEN/8, x4, x1, x2)
RVTEST_VALBASEUPD(x11,test_dataset_1)

inst_22:
// rs1==x8, rs2==x10, rd==x9,fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x95 and fm2 == 0x335dc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.s ; op1:x8; op2:x10; dest:x9; op1val:0x0; op2val:0x4ab35dc0;
   valaddr_reg:x11; val_offset:0*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.s, x9, x8, x10, dyn, 0, 0, x11, 0*FLEN/8, x12, x1, x2)

inst_23:
// rs1==x10, rs2==x9, rd==x8,fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x335dc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.s ; op1:x10; op2:x9; dest:x8; op1val:0x0; op2val:0xbfb35dc0;
   valaddr_reg:x11; val_offset:2*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.s, x8, x10, x9, dyn, 0, 0, x11, 2*FLEN/8, x12, x1, x2)

inst_24:
// rs1==x6, rs2==x5, rd==x7,fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x335dc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.s ; op1:x6; op2:x5; dest:x7; op1val:0x0; op2val:0xc0335dc0;
   valaddr_reg:x11; val_offset:4*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2
*/
TEST_FPRR_OP(fmul.s, x7, x6, x5, dyn, 0, 0, x11, 4*FLEN/8, x12, x1, x2)
RVTEST_SIGBASE(x8,signature_x8_0)

inst_25:
// rs1==x5, rs2==x7, rd==x6,fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x335dc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.s ; op1:x5; op2:x7; dest:x6; op1val:0x0; op2val:0xc0b35dc0;
   valaddr_reg:x11; val_offset:6*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x6, x5, x7, dyn, 0, 0, x11, 6*FLEN/8, x12, x8, x9)

inst_26:
// rs1==x7, rs2==x6, rd==x5,fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x335dc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.s ; op1:x7; op2:x6; dest:x5; op1val:0x0; op2val:0xc1335dc0;
   valaddr_reg:x11; val_offset:8*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x5, x7, x6, dyn, 0, 0, x11, 8*FLEN/8, x12, x8, x9)

inst_27:
// rs1==x3, rs2==x2, rd==x4,fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x335dc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.s ; op1:x3; op2:x2; dest:x4; op1val:0x0; op2val:0xc1b35dc0;
   valaddr_reg:x11; val_offset:10*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x4, x3, x2, dyn, 0, 0, x11, 10*FLEN/8, x12, x8, x9)

inst_28:
// rs1==x2, rs2==x4, rd==x3,fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x84 and fm2 == 0x335dc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.s ; op1:x2; op2:x4; dest:x3; op1val:0x0; op2val:0xc2335dc0;
   valaddr_reg:x11; val_offset:12*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x3, x2, x4, dyn, 0, 0, x11, 12*FLEN/8, x12, x8, x9)

inst_29:
// rs1==x4, rs2==x3, rd==x2,fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x85 and fm2 == 0x335dc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.s ; op1:x4; op2:x3; dest:x2; op1val:0x0; op2val:0xc2b35dc0;
   valaddr_reg:x11; val_offset:14*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x2, x4, x3, dyn, 0, 0, x11, 14*FLEN/8, x12, x8, x9)

inst_30:
// rs1==x1,fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x86 and fm2 == 0x335dc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.s ; op1:x1; op2:x30; dest:x31; op1val:0x0; op2val:0xc3335dc0;
   valaddr_reg:x11; val_offset:16*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x1, x30, dyn, 0, 0, x11, 16*FLEN/8, x12, x8, x9)

inst_31:
// rs1==x0,fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x87 and fm2 == 0x335dc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.s ; op1:x0; op2:x30; dest:x31; op1val:0x0; op2val:0xc3b35dc0;
   valaddr_reg:x11; val_offset:18*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x0, x30, dyn, 0, 0, x11, 18*FLEN/8, x12, x8, x9)

inst_32:
// rs2==x1,fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x88 and fm2 == 0x335dc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.s ; op1:x30; op2:x1; dest:x31; op1val:0x0; op2val:0xc4335dc0;
   valaddr_reg:x11; val_offset:20*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x1, dyn, 0, 0, x11, 20*FLEN/8, x12, x8, x9)

inst_33:
// rs2==x0,fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x89 and fm2 == 0x335dc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.s ; op1:x30; op2:x0; dest:x31; op1val:0x0; op2val:0x0;
   valaddr_reg:x11; val_offset:22*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x0, dyn, 0, 0, x11, 22*FLEN/8, x12, x8, x9)

inst_34:
// rd==x1,fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x8a and fm2 == 0x335dc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.s ; op1:x31; op2:x30; dest:x1; op1val:0x0; op2val:0xc5335dc0;
   valaddr_reg:x11; val_offset:24*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x1, x31, x30, dyn, 0, 0, x11, 24*FLEN/8, x12, x8, x9)

inst_35:
// rd==x0,fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x8b and fm2 == 0x335dc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.s ; op1:x31; op2:x30; dest:x0; op1val:0x0; op2val:0xc5b35dc0;
   valaddr_reg:x11; val_offset:26*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x0, x31, x30, dyn, 0, 0, x11, 26*FLEN/8, x12, x8, x9)

inst_36:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x8c and fm2 == 0x335dc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x0; op2val:0xc6335dc0;
   valaddr_reg:x11; val_offset:28*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 28*FLEN/8, x12, x8, x9)

inst_37:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x8d and fm2 == 0x335dc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x0; op2val:0xc6b35dc0;
   valaddr_reg:x11; val_offset:30*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 30*FLEN/8, x12, x8, x9)

inst_38:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x8e and fm2 == 0x335dc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x0; op2val:0xc7335dc0;
   valaddr_reg:x11; val_offset:32*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 32*FLEN/8, x12, x8, x9)

inst_39:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x8f and fm2 == 0x335dc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x0; op2val:0xc7b35dc0;
   valaddr_reg:x11; val_offset:34*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 34*FLEN/8, x12, x8, x9)

inst_40:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x90 and fm2 == 0x335dc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x0; op2val:0xc8335dc0;
   valaddr_reg:x11; val_offset:36*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 36*FLEN/8, x12, x8, x9)

inst_41:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x91 and fm2 == 0x335dc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x0; op2val:0xc8b35dc0;
   valaddr_reg:x11; val_offset:38*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 38*FLEN/8, x12, x8, x9)

inst_42:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x92 and fm2 == 0x335dc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x0; op2val:0xc9335dc0;
   valaddr_reg:x11; val_offset:40*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 40*FLEN/8, x12, x8, x9)

inst_43:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x93 and fm2 == 0x335dc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x0; op2val:0xc9b35dc0;
   valaddr_reg:x11; val_offset:42*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 42*FLEN/8, x12, x8, x9)

inst_44:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x94 and fm2 == 0x335dc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x0; op2val:0xca335dc0;
   valaddr_reg:x11; val_offset:44*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 44*FLEN/8, x12, x8, x9)

inst_45:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x95 and fm2 == 0x335dc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x0; op2val:0xcab35dc0;
   valaddr_reg:x11; val_offset:46*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 46*FLEN/8, x12, x8, x9)

inst_46:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f800000; op2val:0x3f800001;
   valaddr_reg:x11; val_offset:48*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 48*FLEN/8, x12, x8, x9)

inst_47:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000002 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f800000; op2val:0x3f800002;
   valaddr_reg:x11; val_offset:50*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 50*FLEN/8, x12, x8, x9)

inst_48:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000004 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f800000; op2val:0x3f800004;
   valaddr_reg:x11; val_offset:52*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 52*FLEN/8, x12, x8, x9)

inst_49:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000008 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f800000; op2val:0x3f800008;
   valaddr_reg:x11; val_offset:54*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 54*FLEN/8, x12, x8, x9)

inst_50:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000010 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f800000; op2val:0x3f800010;
   valaddr_reg:x11; val_offset:56*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 56*FLEN/8, x12, x8, x9)

inst_51:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000020 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f800000; op2val:0x3f800020;
   valaddr_reg:x11; val_offset:58*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 58*FLEN/8, x12, x8, x9)

inst_52:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000040 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f800000; op2val:0x3f800040;
   valaddr_reg:x11; val_offset:60*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 60*FLEN/8, x12, x8, x9)

inst_53:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000080 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f800000; op2val:0x3f800080;
   valaddr_reg:x11; val_offset:62*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 62*FLEN/8, x12, x8, x9)

inst_54:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000100 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f800000; op2val:0x3f800100;
   valaddr_reg:x11; val_offset:64*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 64*FLEN/8, x12, x8, x9)

inst_55:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000200 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f800000; op2val:0x3f800200;
   valaddr_reg:x11; val_offset:66*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 66*FLEN/8, x12, x8, x9)

inst_56:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000400 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f800000; op2val:0x3f800400;
   valaddr_reg:x11; val_offset:68*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 68*FLEN/8, x12, x8, x9)

inst_57:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f800000; op2val:0x3f800800;
   valaddr_reg:x11; val_offset:70*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 70*FLEN/8, x12, x8, x9)

inst_58:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x001000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f800000; op2val:0x3f801000;
   valaddr_reg:x11; val_offset:72*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 72*FLEN/8, x12, x8, x9)

inst_59:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x002000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f800000; op2val:0x3f802000;
   valaddr_reg:x11; val_offset:74*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 74*FLEN/8, x12, x8, x9)

inst_60:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x004000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f800000; op2val:0x3f804000;
   valaddr_reg:x11; val_offset:76*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 76*FLEN/8, x12, x8, x9)

inst_61:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x008000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f800000; op2val:0x3f808000;
   valaddr_reg:x11; val_offset:78*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 78*FLEN/8, x12, x8, x9)

inst_62:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x010000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f800000; op2val:0x3f810000;
   valaddr_reg:x11; val_offset:80*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 80*FLEN/8, x12, x8, x9)

inst_63:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x020000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f800000; op2val:0x3f820000;
   valaddr_reg:x11; val_offset:82*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 82*FLEN/8, x12, x8, x9)

inst_64:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x040000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f800000; op2val:0x3f840000;
   valaddr_reg:x11; val_offset:84*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 84*FLEN/8, x12, x8, x9)

inst_65:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x080000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f800000; op2val:0x3f880000;
   valaddr_reg:x11; val_offset:86*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 86*FLEN/8, x12, x8, x9)

inst_66:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x100000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f800000; op2val:0x3f900000;
   valaddr_reg:x11; val_offset:88*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 88*FLEN/8, x12, x8, x9)

inst_67:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x200000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f800000; op2val:0x3fa00000;
   valaddr_reg:x11; val_offset:90*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 90*FLEN/8, x12, x8, x9)

inst_68:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f800000; op2val:0x3fc00000;
   valaddr_reg:x11; val_offset:92*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 92*FLEN/8, x12, x8, x9)

inst_69:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f800000; op2val:0xbf800001;
   valaddr_reg:x11; val_offset:94*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 94*FLEN/8, x12, x8, x9)

inst_70:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000002 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f800000; op2val:0xbf800002;
   valaddr_reg:x11; val_offset:96*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 96*FLEN/8, x12, x8, x9)

inst_71:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000004 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f800000; op2val:0xbf800004;
   valaddr_reg:x11; val_offset:98*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 98*FLEN/8, x12, x8, x9)

inst_72:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000008 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f800000; op2val:0xbf800008;
   valaddr_reg:x11; val_offset:100*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 100*FLEN/8, x12, x8, x9)

inst_73:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000010 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f800000; op2val:0xbf800010;
   valaddr_reg:x11; val_offset:102*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 102*FLEN/8, x12, x8, x9)

inst_74:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000020 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f800000; op2val:0xbf800020;
   valaddr_reg:x11; val_offset:104*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 104*FLEN/8, x12, x8, x9)

inst_75:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000040 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f800000; op2val:0xbf800040;
   valaddr_reg:x11; val_offset:106*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 106*FLEN/8, x12, x8, x9)

inst_76:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000080 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f800000; op2val:0xbf800080;
   valaddr_reg:x11; val_offset:108*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 108*FLEN/8, x12, x8, x9)

inst_77:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000100 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f800000; op2val:0xbf800100;
   valaddr_reg:x11; val_offset:110*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 110*FLEN/8, x12, x8, x9)

inst_78:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000200 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f800000; op2val:0xbf800200;
   valaddr_reg:x11; val_offset:112*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 112*FLEN/8, x12, x8, x9)

inst_79:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000400 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f800000; op2val:0xbf800400;
   valaddr_reg:x11; val_offset:114*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 114*FLEN/8, x12, x8, x9)

inst_80:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f800000; op2val:0xbf800800;
   valaddr_reg:x11; val_offset:116*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 116*FLEN/8, x12, x8, x9)

inst_81:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x001000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f800000; op2val:0xbf801000;
   valaddr_reg:x11; val_offset:118*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 118*FLEN/8, x12, x8, x9)

inst_82:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x002000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f800000; op2val:0xbf802000;
   valaddr_reg:x11; val_offset:120*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 120*FLEN/8, x12, x8, x9)

inst_83:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x004000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f800000; op2val:0xbf804000;
   valaddr_reg:x11; val_offset:122*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 122*FLEN/8, x12, x8, x9)

inst_84:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x008000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f800000; op2val:0xbf808000;
   valaddr_reg:x11; val_offset:124*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 124*FLEN/8, x12, x8, x9)

inst_85:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x010000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f800000; op2val:0xbf810000;
   valaddr_reg:x11; val_offset:126*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 126*FLEN/8, x12, x8, x9)

inst_86:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x020000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f800000; op2val:0xbf820000;
   valaddr_reg:x11; val_offset:128*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 128*FLEN/8, x12, x8, x9)

inst_87:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x040000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f800000; op2val:0xbf840000;
   valaddr_reg:x11; val_offset:130*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 130*FLEN/8, x12, x8, x9)

inst_88:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x080000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f800000; op2val:0xbf880000;
   valaddr_reg:x11; val_offset:132*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 132*FLEN/8, x12, x8, x9)

inst_89:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x100000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f800000; op2val:0xbf900000;
   valaddr_reg:x11; val_offset:134*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 134*FLEN/8, x12, x8, x9)

inst_90:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x200000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f800000; op2val:0xbfa00000;
   valaddr_reg:x11; val_offset:136*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 136*FLEN/8, x12, x8, x9)

inst_91:
// fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x3f800000; op2val:0xbfc00000;
   valaddr_reg:x11; val_offset:138*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 138*FLEN/8, x12, x8, x9)

inst_92:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x0; op2val:0x3f800000;
   valaddr_reg:x11; val_offset:140*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 140*FLEN/8, x12, x8, x9)

inst_93:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x068650 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x0; op2val:0x40868650;
   valaddr_reg:x11; val_offset:142*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 142*FLEN/8, x12, x8, x9)

inst_94:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x60352f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x0; op2val:0x40e0352f;
   valaddr_reg:x11; val_offset:144*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 144*FLEN/8, x12, x8, x9)

inst_95:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x49c977 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x0; op2val:0x4149c977;
   valaddr_reg:x11; val_offset:146*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 146*FLEN/8, x12, x8, x9)

inst_96:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x83 and fm2 == 0x3e939b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x0; op2val:0x41be939b;
   valaddr_reg:x11; val_offset:148*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 148*FLEN/8, x12, x8, x9)

inst_97:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x84 and fm2 == 0x38f8ad and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x0; op2val:0x4238f8ad;
   valaddr_reg:x11; val_offset:150*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 150*FLEN/8, x12, x8, x9)

inst_98:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x85 and fm2 == 0x362b37 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x0; op2val:0x42b62b37;
   valaddr_reg:x11; val_offset:152*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 152*FLEN/8, x12, x8, x9)

inst_99:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x86 and fm2 == 0x34c47b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x0; op2val:0x4334c47b;
   valaddr_reg:x11; val_offset:154*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 154*FLEN/8, x12, x8, x9)

inst_100:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x87 and fm2 == 0x34111d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x0; op2val:0x43b4111d;
   valaddr_reg:x11; val_offset:156*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 156*FLEN/8, x12, x8, x9)

inst_101:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x88 and fm2 == 0x33b76e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x0; op2val:0x4433b76e;
   valaddr_reg:x11; val_offset:158*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 158*FLEN/8, x12, x8, x9)

inst_102:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x89 and fm2 == 0x338a97 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x0; op2val:0x44b38a97;
   valaddr_reg:x11; val_offset:160*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 160*FLEN/8, x12, x8, x9)

inst_103:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x8a and fm2 == 0x33742b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x0; op2val:0x4533742b;
   valaddr_reg:x11; val_offset:162*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 162*FLEN/8, x12, x8, x9)

inst_104:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x8b and fm2 == 0x3368f5 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x0; op2val:0x45b368f5;
   valaddr_reg:x11; val_offset:164*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 164*FLEN/8, x12, x8, x9)

inst_105:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x8c and fm2 == 0x33635a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x0; op2val:0x4633635a;
   valaddr_reg:x11; val_offset:166*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 166*FLEN/8, x12, x8, x9)

inst_106:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x8d and fm2 == 0x33608d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x0; op2val:0x46b3608d;
   valaddr_reg:x11; val_offset:168*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 168*FLEN/8, x12, x8, x9)

inst_107:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x8e and fm2 == 0x335f26 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x0; op2val:0x47335f26;
   valaddr_reg:x11; val_offset:170*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 170*FLEN/8, x12, x8, x9)

inst_108:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x8f and fm2 == 0x335e73 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x0; op2val:0x47b35e73;
   valaddr_reg:x11; val_offset:172*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 172*FLEN/8, x12, x8, x9)

inst_109:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x90 and fm2 == 0x335e19 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x0; op2val:0x48335e19;
   valaddr_reg:x11; val_offset:174*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 174*FLEN/8, x12, x8, x9)

inst_110:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x91 and fm2 == 0x335dec and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x0; op2val:0x48b35dec;
   valaddr_reg:x11; val_offset:176*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 176*FLEN/8, x12, x8, x9)

inst_111:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x92 and fm2 == 0x335dd6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x0; op2val:0x49335dd6;
   valaddr_reg:x11; val_offset:178*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 178*FLEN/8, x12, x8, x9)

inst_112:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x93 and fm2 == 0x335dcb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x0; op2val:0x49b35dcb;
   valaddr_reg:x11; val_offset:180*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 180*FLEN/8, x12, x8, x9)

inst_113:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x94 and fm2 == 0x335dc5 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x0; op2val:0x4a335dc5;
   valaddr_reg:x11; val_offset:182*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 182*FLEN/8, x12, x8, x9)

inst_114:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x95 and fm2 == 0x335dc2 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x0; op2val:0x4ab35dc2;
   valaddr_reg:x11; val_offset:184*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 184*FLEN/8, x12, x8, x9)

inst_115:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x0; op2val:0xbf800000;
   valaddr_reg:x11; val_offset:186*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 186*FLEN/8, x12, x8, x9)

inst_116:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x068650 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x0; op2val:0xc0868650;
   valaddr_reg:x11; val_offset:188*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 188*FLEN/8, x12, x8, x9)

inst_117:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x60352f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x0; op2val:0xc0e0352f;
   valaddr_reg:x11; val_offset:190*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 190*FLEN/8, x12, x8, x9)

inst_118:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x49c977 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x0; op2val:0xc149c977;
   valaddr_reg:x11; val_offset:192*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 192*FLEN/8, x12, x8, x9)

inst_119:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x3e939b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x0; op2val:0xc1be939b;
   valaddr_reg:x11; val_offset:194*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 194*FLEN/8, x12, x8, x9)

inst_120:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x84 and fm2 == 0x38f8ad and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x0; op2val:0xc238f8ad;
   valaddr_reg:x11; val_offset:196*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 196*FLEN/8, x12, x8, x9)

inst_121:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x85 and fm2 == 0x362b37 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x0; op2val:0xc2b62b37;
   valaddr_reg:x11; val_offset:198*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 198*FLEN/8, x12, x8, x9)

inst_122:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x86 and fm2 == 0x34c47b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x0; op2val:0xc334c47b;
   valaddr_reg:x11; val_offset:200*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 200*FLEN/8, x12, x8, x9)

inst_123:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x87 and fm2 == 0x34111d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x0; op2val:0xc3b4111d;
   valaddr_reg:x11; val_offset:202*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 202*FLEN/8, x12, x8, x9)

inst_124:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x88 and fm2 == 0x33b76e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x0; op2val:0xc433b76e;
   valaddr_reg:x11; val_offset:204*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 204*FLEN/8, x12, x8, x9)

inst_125:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x89 and fm2 == 0x338a97 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x0; op2val:0xc4b38a97;
   valaddr_reg:x11; val_offset:206*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 206*FLEN/8, x12, x8, x9)

inst_126:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x8a and fm2 == 0x33742b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x0; op2val:0xc533742b;
   valaddr_reg:x11; val_offset:208*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 208*FLEN/8, x12, x8, x9)

inst_127:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x8b and fm2 == 0x3368f5 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x0; op2val:0xc5b368f5;
   valaddr_reg:x11; val_offset:210*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 210*FLEN/8, x12, x8, x9)

inst_128:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x8c and fm2 == 0x33635a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x0; op2val:0xc633635a;
   valaddr_reg:x11; val_offset:212*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 212*FLEN/8, x12, x8, x9)

inst_129:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x8d and fm2 == 0x33608d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x0; op2val:0xc6b3608d;
   valaddr_reg:x11; val_offset:214*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 214*FLEN/8, x12, x8, x9)

inst_130:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x8e and fm2 == 0x335f26 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x0; op2val:0xc7335f26;
   valaddr_reg:x11; val_offset:216*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 216*FLEN/8, x12, x8, x9)

inst_131:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x8f and fm2 == 0x335e73 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x0; op2val:0xc7b35e73;
   valaddr_reg:x11; val_offset:218*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 218*FLEN/8, x12, x8, x9)

inst_132:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x90 and fm2 == 0x335e19 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x0; op2val:0xc8335e19;
   valaddr_reg:x11; val_offset:220*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 220*FLEN/8, x12, x8, x9)

inst_133:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x91 and fm2 == 0x335dec and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x0; op2val:0xc8b35dec;
   valaddr_reg:x11; val_offset:222*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 222*FLEN/8, x12, x8, x9)

inst_134:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x92 and fm2 == 0x335dd6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x0; op2val:0xc9335dd6;
   valaddr_reg:x11; val_offset:224*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 224*FLEN/8, x12, x8, x9)

inst_135:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x93 and fm2 == 0x335dcb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x0; op2val:0xc9b35dcb;
   valaddr_reg:x11; val_offset:226*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 226*FLEN/8, x12, x8, x9)

inst_136:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x94 and fm2 == 0x335dc5 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x0; op2val:0xca335dc5;
   valaddr_reg:x11; val_offset:228*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 228*FLEN/8, x12, x8, x9)

inst_137:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x95 and fm2 == 0x335dc2 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x0; op2val:0xcab35dc2;
   valaddr_reg:x11; val_offset:230*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 230*FLEN/8, x12, x8, x9)

inst_138:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x96 and fm2 == 0x335dbd and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x0; op2val:0x4b335dbd;
   valaddr_reg:x11; val_offset:232*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 232*FLEN/8, x12, x8, x9)

inst_139:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x96 and fm2 == 0x335dbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x0; op2val:0x4b335dbb;
   valaddr_reg:x11; val_offset:234*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 234*FLEN/8, x12, x8, x9)

inst_140:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x96 and fm2 == 0x335db9 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x0; op2val:0x4b335db9;
   valaddr_reg:x11; val_offset:236*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 236*FLEN/8, x12, x8, x9)

inst_141:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x96 and fm2 == 0x335db3 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x0; op2val:0x4b335db3;
   valaddr_reg:x11; val_offset:238*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 238*FLEN/8, x12, x8, x9)

inst_142:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x96 and fm2 == 0x335da8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x0; op2val:0x4b335da8;
   valaddr_reg:x11; val_offset:240*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 240*FLEN/8, x12, x8, x9)

inst_143:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x96 and fm2 == 0x335d91 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x0; op2val:0x4b335d91;
   valaddr_reg:x11; val_offset:242*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 242*FLEN/8, x12, x8, x9)

inst_144:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x96 and fm2 == 0x335d64 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x0; op2val:0x4b335d64;
   valaddr_reg:x11; val_offset:244*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 244*FLEN/8, x12, x8, x9)

inst_145:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x96 and fm2 == 0x335d0b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x0; op2val:0x4b335d0b;
   valaddr_reg:x11; val_offset:246*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 246*FLEN/8, x12, x8, x9)

inst_146:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x96 and fm2 == 0x335c57 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x0; op2val:0x4b335c57;
   valaddr_reg:x11; val_offset:248*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 248*FLEN/8, x12, x8, x9)

inst_147:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x96 and fm2 == 0x335af1 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x0; op2val:0x4b335af1;
   valaddr_reg:x11; val_offset:250*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 250*FLEN/8, x12, x8, x9)

inst_148:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x96 and fm2 == 0x335823 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x0; op2val:0x4b335823;
   valaddr_reg:x11; val_offset:252*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 252*FLEN/8, x12, x8, x9)

inst_149:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x96 and fm2 == 0x335288 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x0; op2val:0x4b335288;
   valaddr_reg:x11; val_offset:254*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 254*FLEN/8, x12, x8, x9)

inst_150:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x96 and fm2 == 0x334752 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x0; op2val:0x4b334752;
   valaddr_reg:x11; val_offset:256*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 256*FLEN/8, x12, x8, x9)

inst_151:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x96 and fm2 == 0x3330e7 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x0; op2val:0x4b3330e7;
   valaddr_reg:x11; val_offset:258*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 258*FLEN/8, x12, x8, x9)

inst_152:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x96 and fm2 == 0x33040f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x0; op2val:0x4b33040f;
   valaddr_reg:x11; val_offset:260*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 260*FLEN/8, x12, x8, x9)
RVTEST_SIGBASE(x8,signature_x8_1)

inst_153:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x96 and fm2 == 0x32aa60 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x0; op2val:0x4b32aa60;
   valaddr_reg:x11; val_offset:262*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 262*FLEN/8, x12, x8, x9)

inst_154:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x96 and fm2 == 0x31f703 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x0; op2val:0x4b31f703;
   valaddr_reg:x11; val_offset:264*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 264*FLEN/8, x12, x8, x9)

inst_155:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x96 and fm2 == 0x309047 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x0; op2val:0x4b309047;
   valaddr_reg:x11; val_offset:266*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 266*FLEN/8, x12, x8, x9)

inst_156:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x96 and fm2 == 0x2dc2d0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x0; op2val:0x4b2dc2d0;
   valaddr_reg:x11; val_offset:268*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 268*FLEN/8, x12, x8, x9)

inst_157:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x96 and fm2 == 0x2827e2 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x0; op2val:0x4b2827e2;
   valaddr_reg:x11; val_offset:270*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 270*FLEN/8, x12, x8, x9)

inst_158:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x96 and fm2 == 0x1cf206 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x0; op2val:0x4b1cf206;
   valaddr_reg:x11; val_offset:272*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 272*FLEN/8, x12, x8, x9)

inst_159:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x96 and fm2 == 0x06864e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x0; op2val:0x4b06864e;
   valaddr_reg:x11; val_offset:274*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 274*FLEN/8, x12, x8, x9)

inst_160:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x95 and fm2 == 0x335dbd and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x0; op2val:0x4ab35dbd;
   valaddr_reg:x11; val_offset:276*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 276*FLEN/8, x12, x8, x9)

inst_161:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x96 and fm2 == 0x335dbd and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x0; op2val:0xcb335dbd;
   valaddr_reg:x11; val_offset:278*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 278*FLEN/8, x12, x8, x9)

inst_162:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x96 and fm2 == 0x335dbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x0; op2val:0xcb335dbb;
   valaddr_reg:x11; val_offset:280*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 280*FLEN/8, x12, x8, x9)

inst_163:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x96 and fm2 == 0x335db9 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x0; op2val:0xcb335db9;
   valaddr_reg:x11; val_offset:282*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 282*FLEN/8, x12, x8, x9)

inst_164:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x96 and fm2 == 0x335db3 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x0; op2val:0xcb335db3;
   valaddr_reg:x11; val_offset:284*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 284*FLEN/8, x12, x8, x9)

inst_165:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x96 and fm2 == 0x335da8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x0; op2val:0xcb335da8;
   valaddr_reg:x11; val_offset:286*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 286*FLEN/8, x12, x8, x9)

inst_166:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x96 and fm2 == 0x335d91 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x0; op2val:0xcb335d91;
   valaddr_reg:x11; val_offset:288*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 288*FLEN/8, x12, x8, x9)

inst_167:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x96 and fm2 == 0x335d64 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x0; op2val:0xcb335d64;
   valaddr_reg:x11; val_offset:290*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 290*FLEN/8, x12, x8, x9)

inst_168:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x96 and fm2 == 0x335d0b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x0; op2val:0xcb335d0b;
   valaddr_reg:x11; val_offset:292*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 292*FLEN/8, x12, x8, x9)

inst_169:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x96 and fm2 == 0x335c57 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x0; op2val:0xcb335c57;
   valaddr_reg:x11; val_offset:294*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 294*FLEN/8, x12, x8, x9)

inst_170:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x96 and fm2 == 0x335af1 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x0; op2val:0xcb335af1;
   valaddr_reg:x11; val_offset:296*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 296*FLEN/8, x12, x8, x9)

inst_171:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x96 and fm2 == 0x335823 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x0; op2val:0xcb335823;
   valaddr_reg:x11; val_offset:298*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 298*FLEN/8, x12, x8, x9)

inst_172:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x96 and fm2 == 0x335288 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x0; op2val:0xcb335288;
   valaddr_reg:x11; val_offset:300*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 300*FLEN/8, x12, x8, x9)

inst_173:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x96 and fm2 == 0x334752 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x0; op2val:0xcb334752;
   valaddr_reg:x11; val_offset:302*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 302*FLEN/8, x12, x8, x9)

inst_174:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x96 and fm2 == 0x3330e7 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x0; op2val:0xcb3330e7;
   valaddr_reg:x11; val_offset:304*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 304*FLEN/8, x12, x8, x9)

inst_175:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x96 and fm2 == 0x33040f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x0; op2val:0xcb33040f;
   valaddr_reg:x11; val_offset:306*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 306*FLEN/8, x12, x8, x9)

inst_176:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x96 and fm2 == 0x32aa60 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x0; op2val:0xcb32aa60;
   valaddr_reg:x11; val_offset:308*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 308*FLEN/8, x12, x8, x9)

inst_177:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x96 and fm2 == 0x31f703 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x0; op2val:0xcb31f703;
   valaddr_reg:x11; val_offset:310*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 310*FLEN/8, x12, x8, x9)

inst_178:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x96 and fm2 == 0x309047 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x0; op2val:0xcb309047;
   valaddr_reg:x11; val_offset:312*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 312*FLEN/8, x12, x8, x9)

inst_179:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x96 and fm2 == 0x2dc2d0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x0; op2val:0xcb2dc2d0;
   valaddr_reg:x11; val_offset:314*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 314*FLEN/8, x12, x8, x9)

inst_180:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x96 and fm2 == 0x2827e2 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x0; op2val:0xcb2827e2;
   valaddr_reg:x11; val_offset:316*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 316*FLEN/8, x12, x8, x9)

inst_181:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x96 and fm2 == 0x1cf206 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x0; op2val:0xcb1cf206;
   valaddr_reg:x11; val_offset:318*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 318*FLEN/8, x12, x8, x9)

inst_182:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x96 and fm2 == 0x06864e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x0; op2val:0xcb06864e;
   valaddr_reg:x11; val_offset:320*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 320*FLEN/8, x12, x8, x9)

inst_183:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x95 and fm2 == 0x335dbd and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x0; op2val:0xcab35dbd;
   valaddr_reg:x11; val_offset:322*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 322*FLEN/8, x12, x8, x9)

inst_184:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x800000; op2val:0x3f800001;
   valaddr_reg:x11; val_offset:324*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 324*FLEN/8, x12, x8, x9)

inst_185:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000002 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x800000; op2val:0x3f800002;
   valaddr_reg:x11; val_offset:326*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 326*FLEN/8, x12, x8, x9)

inst_186:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000004 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x800000; op2val:0x3f800004;
   valaddr_reg:x11; val_offset:328*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 328*FLEN/8, x12, x8, x9)

inst_187:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000008 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x800000; op2val:0x3f800008;
   valaddr_reg:x11; val_offset:330*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 330*FLEN/8, x12, x8, x9)

inst_188:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000010 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x800000; op2val:0x3f800010;
   valaddr_reg:x11; val_offset:332*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 332*FLEN/8, x12, x8, x9)

inst_189:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000020 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x800000; op2val:0x3f800020;
   valaddr_reg:x11; val_offset:334*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 334*FLEN/8, x12, x8, x9)

inst_190:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000040 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x800000; op2val:0x3f800040;
   valaddr_reg:x11; val_offset:336*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 336*FLEN/8, x12, x8, x9)

inst_191:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000080 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x800000; op2val:0x3f800080;
   valaddr_reg:x11; val_offset:338*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 338*FLEN/8, x12, x8, x9)

inst_192:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000100 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x800000; op2val:0x3f800100;
   valaddr_reg:x11; val_offset:340*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 340*FLEN/8, x12, x8, x9)

inst_193:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000200 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x800000; op2val:0x3f800200;
   valaddr_reg:x11; val_offset:342*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 342*FLEN/8, x12, x8, x9)

inst_194:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000400 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x800000; op2val:0x3f800400;
   valaddr_reg:x11; val_offset:344*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 344*FLEN/8, x12, x8, x9)

inst_195:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x000800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x800000; op2val:0x3f800800;
   valaddr_reg:x11; val_offset:346*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 346*FLEN/8, x12, x8, x9)

inst_196:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x001000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x800000; op2val:0x3f801000;
   valaddr_reg:x11; val_offset:348*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 348*FLEN/8, x12, x8, x9)

inst_197:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x002000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x800000; op2val:0x3f802000;
   valaddr_reg:x11; val_offset:350*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 350*FLEN/8, x12, x8, x9)

inst_198:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x004000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x800000; op2val:0x3f804000;
   valaddr_reg:x11; val_offset:352*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 352*FLEN/8, x12, x8, x9)

inst_199:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x008000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x800000; op2val:0x3f808000;
   valaddr_reg:x11; val_offset:354*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 354*FLEN/8, x12, x8, x9)

inst_200:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x010000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x800000; op2val:0x3f810000;
   valaddr_reg:x11; val_offset:356*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 356*FLEN/8, x12, x8, x9)

inst_201:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x020000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x800000; op2val:0x3f820000;
   valaddr_reg:x11; val_offset:358*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 358*FLEN/8, x12, x8, x9)

inst_202:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x040000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x800000; op2val:0x3f840000;
   valaddr_reg:x11; val_offset:360*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 360*FLEN/8, x12, x8, x9)

inst_203:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x080000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x800000; op2val:0x3f880000;
   valaddr_reg:x11; val_offset:362*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 362*FLEN/8, x12, x8, x9)

inst_204:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x100000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x800000; op2val:0x3f900000;
   valaddr_reg:x11; val_offset:364*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 364*FLEN/8, x12, x8, x9)

inst_205:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x200000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x800000; op2val:0x3fa00000;
   valaddr_reg:x11; val_offset:366*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 366*FLEN/8, x12, x8, x9)

inst_206:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x800000; op2val:0x3fc00000;
   valaddr_reg:x11; val_offset:368*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 368*FLEN/8, x12, x8, x9)

inst_207:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x800000; op2val:0xbf800001;
   valaddr_reg:x11; val_offset:370*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 370*FLEN/8, x12, x8, x9)

inst_208:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000002 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x800000; op2val:0xbf800002;
   valaddr_reg:x11; val_offset:372*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 372*FLEN/8, x12, x8, x9)

inst_209:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000004 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x800000; op2val:0xbf800004;
   valaddr_reg:x11; val_offset:374*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 374*FLEN/8, x12, x8, x9)

inst_210:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000008 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x800000; op2val:0xbf800008;
   valaddr_reg:x11; val_offset:376*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 376*FLEN/8, x12, x8, x9)

inst_211:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000010 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x800000; op2val:0xbf800010;
   valaddr_reg:x11; val_offset:378*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 378*FLEN/8, x12, x8, x9)

inst_212:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000020 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x800000; op2val:0xbf800020;
   valaddr_reg:x11; val_offset:380*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 380*FLEN/8, x12, x8, x9)

inst_213:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000040 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x800000; op2val:0xbf800040;
   valaddr_reg:x11; val_offset:382*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 382*FLEN/8, x12, x8, x9)

inst_214:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000080 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x800000; op2val:0xbf800080;
   valaddr_reg:x11; val_offset:384*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 384*FLEN/8, x12, x8, x9)

inst_215:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000100 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x800000; op2val:0xbf800100;
   valaddr_reg:x11; val_offset:386*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 386*FLEN/8, x12, x8, x9)

inst_216:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000200 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x800000; op2val:0xbf800200;
   valaddr_reg:x11; val_offset:388*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 388*FLEN/8, x12, x8, x9)

inst_217:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000400 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x800000; op2val:0xbf800400;
   valaddr_reg:x11; val_offset:390*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 390*FLEN/8, x12, x8, x9)

inst_218:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x000800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x800000; op2val:0xbf800800;
   valaddr_reg:x11; val_offset:392*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 392*FLEN/8, x12, x8, x9)

inst_219:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x001000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x800000; op2val:0xbf801000;
   valaddr_reg:x11; val_offset:394*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 394*FLEN/8, x12, x8, x9)

inst_220:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x002000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x800000; op2val:0xbf802000;
   valaddr_reg:x11; val_offset:396*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 396*FLEN/8, x12, x8, x9)

inst_221:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x004000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x800000; op2val:0xbf804000;
   valaddr_reg:x11; val_offset:398*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 398*FLEN/8, x12, x8, x9)

inst_222:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x008000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x800000; op2val:0xbf808000;
   valaddr_reg:x11; val_offset:400*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 400*FLEN/8, x12, x8, x9)

inst_223:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x010000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x800000; op2val:0xbf810000;
   valaddr_reg:x11; val_offset:402*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 402*FLEN/8, x12, x8, x9)

inst_224:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x020000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x800000; op2val:0xbf820000;
   valaddr_reg:x11; val_offset:404*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 404*FLEN/8, x12, x8, x9)

inst_225:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x040000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x800000; op2val:0xbf840000;
   valaddr_reg:x11; val_offset:406*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 406*FLEN/8, x12, x8, x9)

inst_226:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x080000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x800000; op2val:0xbf880000;
   valaddr_reg:x11; val_offset:408*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 408*FLEN/8, x12, x8, x9)

inst_227:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x100000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x800000; op2val:0xbf900000;
   valaddr_reg:x11; val_offset:410*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 410*FLEN/8, x12, x8, x9)

inst_228:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x200000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x800000; op2val:0xbfa00000;
   valaddr_reg:x11; val_offset:412*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 412*FLEN/8, x12, x8, x9)

inst_229:
// fs1 == 0 and fe1 == 0x01 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x800000; op2val:0xbfc00000;
   valaddr_reg:x11; val_offset:414*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 414*FLEN/8, x12, x8, x9)

inst_230:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f000000; op2val:0x3ffffffe;
   valaddr_reg:x11; val_offset:416*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 416*FLEN/8, x12, x8, x9)

inst_231:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7ffffd and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f000000; op2val:0x3ffffffd;
   valaddr_reg:x11; val_offset:418*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 418*FLEN/8, x12, x8, x9)

inst_232:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7ffffb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f000000; op2val:0x3ffffffb;
   valaddr_reg:x11; val_offset:420*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 420*FLEN/8, x12, x8, x9)

inst_233:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7ffff7 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f000000; op2val:0x3ffffff7;
   valaddr_reg:x11; val_offset:422*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 422*FLEN/8, x12, x8, x9)

inst_234:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7fffef and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f000000; op2val:0x3fffffef;
   valaddr_reg:x11; val_offset:424*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 424*FLEN/8, x12, x8, x9)

inst_235:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7fffdf and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f000000; op2val:0x3fffffdf;
   valaddr_reg:x11; val_offset:426*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 426*FLEN/8, x12, x8, x9)

inst_236:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7fffbf and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f000000; op2val:0x3fffffbf;
   valaddr_reg:x11; val_offset:428*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 428*FLEN/8, x12, x8, x9)

inst_237:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7fff7f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f000000; op2val:0x3fffff7f;
   valaddr_reg:x11; val_offset:430*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 430*FLEN/8, x12, x8, x9)

inst_238:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7ffeff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f000000; op2val:0x3ffffeff;
   valaddr_reg:x11; val_offset:432*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 432*FLEN/8, x12, x8, x9)

inst_239:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7ffdff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f000000; op2val:0x3ffffdff;
   valaddr_reg:x11; val_offset:434*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 434*FLEN/8, x12, x8, x9)

inst_240:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7ffbff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f000000; op2val:0x3ffffbff;
   valaddr_reg:x11; val_offset:436*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 436*FLEN/8, x12, x8, x9)

inst_241:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7ff7ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f000000; op2val:0x3ffff7ff;
   valaddr_reg:x11; val_offset:438*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 438*FLEN/8, x12, x8, x9)

inst_242:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7fefff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f000000; op2val:0x3fffefff;
   valaddr_reg:x11; val_offset:440*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 440*FLEN/8, x12, x8, x9)

inst_243:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7fdfff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f000000; op2val:0x3fffdfff;
   valaddr_reg:x11; val_offset:442*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 442*FLEN/8, x12, x8, x9)

inst_244:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7fbfff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f000000; op2val:0x3fffbfff;
   valaddr_reg:x11; val_offset:444*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 444*FLEN/8, x12, x8, x9)

inst_245:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7f7fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f000000; op2val:0x3fff7fff;
   valaddr_reg:x11; val_offset:446*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 446*FLEN/8, x12, x8, x9)

inst_246:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7effff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f000000; op2val:0x3ffeffff;
   valaddr_reg:x11; val_offset:448*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 448*FLEN/8, x12, x8, x9)

inst_247:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7dffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f000000; op2val:0x3ffdffff;
   valaddr_reg:x11; val_offset:450*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 450*FLEN/8, x12, x8, x9)

inst_248:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7bffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f000000; op2val:0x3ffbffff;
   valaddr_reg:x11; val_offset:452*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 452*FLEN/8, x12, x8, x9)

inst_249:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x77ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f000000; op2val:0x3ff7ffff;
   valaddr_reg:x11; val_offset:454*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 454*FLEN/8, x12, x8, x9)

inst_250:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x6fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f000000; op2val:0x3fefffff;
   valaddr_reg:x11; val_offset:456*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 456*FLEN/8, x12, x8, x9)

inst_251:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x5fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f000000; op2val:0x3fdfffff;
   valaddr_reg:x11; val_offset:458*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 458*FLEN/8, x12, x8, x9)

inst_252:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f000000; op2val:0x3fbfffff;
   valaddr_reg:x11; val_offset:460*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 460*FLEN/8, x12, x8, x9)

inst_253:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f000000; op2val:0xbffffffe;
   valaddr_reg:x11; val_offset:462*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 462*FLEN/8, x12, x8, x9)

inst_254:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x7ffffd and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f000000; op2val:0xbffffffd;
   valaddr_reg:x11; val_offset:464*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 464*FLEN/8, x12, x8, x9)

inst_255:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x7ffffb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f000000; op2val:0xbffffffb;
   valaddr_reg:x11; val_offset:466*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 466*FLEN/8, x12, x8, x9)

inst_256:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x7ffff7 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f000000; op2val:0xbffffff7;
   valaddr_reg:x11; val_offset:468*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 468*FLEN/8, x12, x8, x9)

inst_257:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x7fffef and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f000000; op2val:0xbfffffef;
   valaddr_reg:x11; val_offset:470*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 470*FLEN/8, x12, x8, x9)

inst_258:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x7fffdf and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f000000; op2val:0xbfffffdf;
   valaddr_reg:x11; val_offset:472*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 472*FLEN/8, x12, x8, x9)

inst_259:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x7fffbf and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f000000; op2val:0xbfffffbf;
   valaddr_reg:x11; val_offset:474*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 474*FLEN/8, x12, x8, x9)

inst_260:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x7fff7f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f000000; op2val:0xbfffff7f;
   valaddr_reg:x11; val_offset:476*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 476*FLEN/8, x12, x8, x9)

inst_261:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x7ffeff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f000000; op2val:0xbffffeff;
   valaddr_reg:x11; val_offset:478*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 478*FLEN/8, x12, x8, x9)

inst_262:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x7ffdff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f000000; op2val:0xbffffdff;
   valaddr_reg:x11; val_offset:480*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 480*FLEN/8, x12, x8, x9)

inst_263:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x7ffbff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f000000; op2val:0xbffffbff;
   valaddr_reg:x11; val_offset:482*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 482*FLEN/8, x12, x8, x9)

inst_264:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x7ff7ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f000000; op2val:0xbffff7ff;
   valaddr_reg:x11; val_offset:484*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 484*FLEN/8, x12, x8, x9)

inst_265:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x7fefff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f000000; op2val:0xbfffefff;
   valaddr_reg:x11; val_offset:486*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 486*FLEN/8, x12, x8, x9)

inst_266:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x7fdfff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f000000; op2val:0xbfffdfff;
   valaddr_reg:x11; val_offset:488*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 488*FLEN/8, x12, x8, x9)

inst_267:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x7fbfff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f000000; op2val:0xbfffbfff;
   valaddr_reg:x11; val_offset:490*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 490*FLEN/8, x12, x8, x9)

inst_268:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x7f7fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f000000; op2val:0xbfff7fff;
   valaddr_reg:x11; val_offset:492*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 492*FLEN/8, x12, x8, x9)

inst_269:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x7effff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f000000; op2val:0xbffeffff;
   valaddr_reg:x11; val_offset:494*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 494*FLEN/8, x12, x8, x9)

inst_270:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x7dffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f000000; op2val:0xbffdffff;
   valaddr_reg:x11; val_offset:496*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 496*FLEN/8, x12, x8, x9)

inst_271:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x7bffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f000000; op2val:0xbffbffff;
   valaddr_reg:x11; val_offset:498*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 498*FLEN/8, x12, x8, x9)

inst_272:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x77ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f000000; op2val:0xbff7ffff;
   valaddr_reg:x11; val_offset:500*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 500*FLEN/8, x12, x8, x9)

inst_273:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x6fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f000000; op2val:0xbfefffff;
   valaddr_reg:x11; val_offset:502*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 502*FLEN/8, x12, x8, x9)

inst_274:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x5fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f000000; op2val:0xbfdfffff;
   valaddr_reg:x11; val_offset:504*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 504*FLEN/8, x12, x8, x9)

inst_275:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f000000; op2val:0xbfbfffff;
   valaddr_reg:x11; val_offset:506*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 506*FLEN/8, x12, x8, x9)

inst_276:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x335dc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x0; op2val:0x3fb35dc0;
   valaddr_reg:x11; val_offset:508*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 508*FLEN/8, x12, x8, x9)

inst_277:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x335dc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x0; op2val:0x40b35dc0;
   valaddr_reg:x11; val_offset:510*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 510*FLEN/8, x12, x8, x9)

inst_278:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x335dc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x0; op2val:0x41335dc0;
   valaddr_reg:x11; val_offset:512*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 512*FLEN/8, x12, x8, x9)

inst_279:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 0 and fe2 == 0x83 and fm2 == 0x335dc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x0; op2val:0x41b35dc0;
   valaddr_reg:x11; val_offset:514*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 514*FLEN/8, x12, x8, x9)

inst_280:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x87 and fm2 == 0x335dc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x0; op2val:0xc3b35dc0;
   valaddr_reg:x11; val_offset:516*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 516*FLEN/8, x12, x8, x9)
RVTEST_SIGBASE(x8,signature_x8_2)

inst_281:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x89 and fm2 == 0x335dc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x0; op2val:0xc4b35dc0;
   valaddr_reg:x11; val_offset:518*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 518*FLEN/8, x12, x8, x9)

inst_282:
// fs1 == 0 and fe1 == 0x00 and fm1 == 0x000000 and fs2 == 1 and fe2 == 0x8b and fm2 == 0x335dc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmul.s ; op1:x30; op2:x29; dest:x31; op1val:0x0; op2val:0xc5b35dc0;
   valaddr_reg:x11; val_offset:520*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x9
*/
TEST_FPRR_OP(fmul.s, x31, x30, x29, dyn, 0, 0, x11, 520*FLEN/8, x12, x8, x9)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1068719552,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1077108160,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1102273984,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1110662592,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1119051200,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1127439808,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1135828416,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1144217024,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1152605632,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1160994240,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1169382848,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1177771456,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1186160064,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1194548672,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1202937280,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1211325888,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1219714496,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1228103104,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1236491712,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1244880320,32,FLEN)
test_dataset_1:
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1253268928,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3216203200,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3224591808,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3232980416,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3241369024,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3249757632,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3258146240,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3266534848,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3274923456,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3283312064,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3291700672,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3308477888,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3316866496,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3325255104,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3333643712,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3342032320,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3350420928,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3358809536,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3367198144,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3375586752,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3383975360,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3392363968,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3400752576,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(1065353217,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(1065353218,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(1065353220,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(1065353224,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(1065353232,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(1065353248,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(1065353280,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(1065353344,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(1065353472,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(1065353728,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(1065354240,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(1065355264,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(1065357312,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(1065361408,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(1065369600,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(1065385984,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(1065418752,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(1065484288,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(1065615360,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(1065877504,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(1066401792,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(1067450368,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(1069547520,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(3212836865,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(3212836866,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(3212836868,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(3212836872,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(3212836880,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(3212836896,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(3212836928,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(3212836992,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(3212837120,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(3212837376,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(3212837888,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(3212838912,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(3212840960,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(3212845056,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(3212853248,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(3212869632,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(3212902400,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(3212967936,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(3213099008,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(3213361152,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(3213885440,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(3214934016,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(3217031168,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1065353216,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1082558032,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1088435503,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1095354743,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1103008667,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1111029933,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1119234871,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1127531643,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1135874333,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1144239982,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1152617111,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1160999979,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1169385717,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1177772890,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1186160781,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1194549030,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1202937459,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1211325977,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1219714540,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1228103126,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1236491723,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1244880325,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1253268930,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3212836864,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3230041680,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3235919151,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3242838391,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3250492315,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3258513581,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3266718519,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3275015291,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3283357981,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3291723630,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3300100759,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3308483627,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3316869365,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3325256538,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3333644429,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3342032678,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3350421107,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3358809625,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3367198188,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3375586774,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3383975371,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3392363973,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3400752578,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1261657533,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1261657531,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1261657529,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1261657523,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1261657512,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1261657489,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1261657444,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1261657355,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1261657175,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1261656817,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1261656099,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1261654664,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1261651794,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1261646055,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1261634575,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1261611616,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1261565699,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1261473863,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1261290192,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1260922850,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1260188166,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1258718798,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1253268925,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3409141181,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3409141179,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3409141177,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3409141171,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3409141160,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3409141137,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3409141092,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3409141003,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3409140823,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3409140465,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3409139747,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3409138312,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3409135442,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3409129703,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3409118223,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3409095264,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3409049347,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3408957511,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3408773840,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3408406498,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3407671814,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3406202446,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3400752573,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(1065353217,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(1065353218,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(1065353220,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(1065353224,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(1065353232,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(1065353248,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(1065353280,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(1065353344,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(1065353472,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(1065353728,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(1065354240,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(1065355264,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(1065357312,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(1065361408,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(1065369600,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(1065385984,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(1065418752,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(1065484288,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(1065615360,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(1065877504,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(1066401792,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(1067450368,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(1069547520,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(3212836865,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(3212836866,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(3212836868,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(3212836872,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(3212836880,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(3212836896,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(3212836928,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(3212836992,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(3212837120,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(3212837376,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(3212837888,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(3212838912,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(3212840960,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(3212845056,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(3212853248,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(3212869632,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(3212902400,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(3212967936,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(3213099008,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(3213361152,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(3213885440,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(3214934016,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(3217031168,32,FLEN)
NAN_BOXED(2130706432,32,FLEN)
NAN_BOXED(1073741822,32,FLEN)
NAN_BOXED(2130706432,32,FLEN)
NAN_BOXED(1073741821,32,FLEN)
NAN_BOXED(2130706432,32,FLEN)
NAN_BOXED(1073741819,32,FLEN)
NAN_BOXED(2130706432,32,FLEN)
NAN_BOXED(1073741815,32,FLEN)
NAN_BOXED(2130706432,32,FLEN)
NAN_BOXED(1073741807,32,FLEN)
NAN_BOXED(2130706432,32,FLEN)
NAN_BOXED(1073741791,32,FLEN)
NAN_BOXED(2130706432,32,FLEN)
NAN_BOXED(1073741759,32,FLEN)
NAN_BOXED(2130706432,32,FLEN)
NAN_BOXED(1073741695,32,FLEN)
NAN_BOXED(2130706432,32,FLEN)
NAN_BOXED(1073741567,32,FLEN)
NAN_BOXED(2130706432,32,FLEN)
NAN_BOXED(1073741311,32,FLEN)
NAN_BOXED(2130706432,32,FLEN)
NAN_BOXED(1073740799,32,FLEN)
NAN_BOXED(2130706432,32,FLEN)
NAN_BOXED(1073739775,32,FLEN)
NAN_BOXED(2130706432,32,FLEN)
NAN_BOXED(1073737727,32,FLEN)
NAN_BOXED(2130706432,32,FLEN)
NAN_BOXED(1073733631,32,FLEN)
NAN_BOXED(2130706432,32,FLEN)
NAN_BOXED(1073725439,32,FLEN)
NAN_BOXED(2130706432,32,FLEN)
NAN_BOXED(1073709055,32,FLEN)
NAN_BOXED(2130706432,32,FLEN)
NAN_BOXED(1073676287,32,FLEN)
NAN_BOXED(2130706432,32,FLEN)
NAN_BOXED(1073610751,32,FLEN)
NAN_BOXED(2130706432,32,FLEN)
NAN_BOXED(1073479679,32,FLEN)
NAN_BOXED(2130706432,32,FLEN)
NAN_BOXED(1073217535,32,FLEN)
NAN_BOXED(2130706432,32,FLEN)
NAN_BOXED(1072693247,32,FLEN)
NAN_BOXED(2130706432,32,FLEN)
NAN_BOXED(1071644671,32,FLEN)
NAN_BOXED(2130706432,32,FLEN)
NAN_BOXED(1069547519,32,FLEN)
NAN_BOXED(2130706432,32,FLEN)
NAN_BOXED(3221225470,32,FLEN)
NAN_BOXED(2130706432,32,FLEN)
NAN_BOXED(3221225469,32,FLEN)
NAN_BOXED(2130706432,32,FLEN)
NAN_BOXED(3221225467,32,FLEN)
NAN_BOXED(2130706432,32,FLEN)
NAN_BOXED(3221225463,32,FLEN)
NAN_BOXED(2130706432,32,FLEN)
NAN_BOXED(3221225455,32,FLEN)
NAN_BOXED(2130706432,32,FLEN)
NAN_BOXED(3221225439,32,FLEN)
NAN_BOXED(2130706432,32,FLEN)
NAN_BOXED(3221225407,32,FLEN)
NAN_BOXED(2130706432,32,FLEN)
NAN_BOXED(3221225343,32,FLEN)
NAN_BOXED(2130706432,32,FLEN)
NAN_BOXED(3221225215,32,FLEN)
NAN_BOXED(2130706432,32,FLEN)
NAN_BOXED(3221224959,32,FLEN)
NAN_BOXED(2130706432,32,FLEN)
NAN_BOXED(3221224447,32,FLEN)
NAN_BOXED(2130706432,32,FLEN)
NAN_BOXED(3221223423,32,FLEN)
NAN_BOXED(2130706432,32,FLEN)
NAN_BOXED(3221221375,32,FLEN)
NAN_BOXED(2130706432,32,FLEN)
NAN_BOXED(3221217279,32,FLEN)
NAN_BOXED(2130706432,32,FLEN)
NAN_BOXED(3221209087,32,FLEN)
NAN_BOXED(2130706432,32,FLEN)
NAN_BOXED(3221192703,32,FLEN)
NAN_BOXED(2130706432,32,FLEN)
NAN_BOXED(3221159935,32,FLEN)
NAN_BOXED(2130706432,32,FLEN)
NAN_BOXED(3221094399,32,FLEN)
NAN_BOXED(2130706432,32,FLEN)
NAN_BOXED(3220963327,32,FLEN)
NAN_BOXED(2130706432,32,FLEN)
NAN_BOXED(3220701183,32,FLEN)
NAN_BOXED(2130706432,32,FLEN)
NAN_BOXED(3220176895,32,FLEN)
NAN_BOXED(2130706432,32,FLEN)
NAN_BOXED(3219128319,32,FLEN)
NAN_BOXED(2130706432,32,FLEN)
NAN_BOXED(3217031167,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1068719552,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1085496768,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1093885376,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1102273984,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3283312064,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3300089280,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3316866496,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 50*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_0:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_2:
    .fill 4*((SIGALIGN)/4),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*XLEN/32,4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

RVMODEL_DATA_END
