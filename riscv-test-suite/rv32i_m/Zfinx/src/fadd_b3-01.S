
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.9.0
// timestamp : Fri Sep 30 04:41:15 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /home/reg/tools/riscv-ctg/sample_cgfs/dataset.cgf \
//                  --cgf /home/reg/tools/riscv-ctg/sample_cgfs/sample_cgfs_fext/RV32Zfinx/fadd.s.cgf \
 \
//                  -- xlen 32  \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fadd.s instruction of the RISC-V RV32_Zfinx,RV32_Zdinx,RV64_Zfinx,RV64_Zdinx extension for the fadd_b3 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32I_Zfinx,RV32I_Zdinx,RV64I_Zfinx,RV64I_Zdinx")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*Zfinx.*);def TEST_CASE_1=True;",fadd_b3)

RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_0:
// rs1 == rs2 != rd, rs1==x30, rs2==x30, rd==x31,fs1 == 0 and fe1 == 0xfe and fm1 == 0x222105 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x222105 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x30; dest:x31; op1val:0x7f222105; op2val:0x7f222105; 
   valaddr_reg:x3; val_offset:0*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x30, dyn, 0, 0, x3, 0*FLEN/8, x4, x1, x2)

inst_1:
// rs2 == rd != rs1, rs1==x31, rs2==x29, rd==x29,fs1 == 0 and fe1 == 0xfe and fm1 == 0x222105 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x222105 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.s ; op1:x31; op2:x29; dest:x29; op1val:0x7f222105; op2val:0xff222105; 
   valaddr_reg:x3; val_offset:2*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.s, x29, x31, x29, dyn, 32, 0, x3, 2*FLEN/8, x4, x1, x2)

inst_2:
// rs1 == rd != rs2, rs1==x28, rs2==x31, rd==x28,fs1 == 0 and fe1 == 0xfe and fm1 == 0x222105 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x222105 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.s ; op1:x28; op2:x31; dest:x28; op1val:0x7f222105; op2val:0xff222105; 
   valaddr_reg:x3; val_offset:4*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.s, x28, x28, x31, dyn, 64, 0, x3, 4*FLEN/8, x4, x1, x2)

inst_3:
// rs1 == rs2 == rd, rs1==x27, rs2==x27, rd==x27,fs1 == 0 and fe1 == 0xfe and fm1 == 0x222105 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x222105 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.s ; op1:x27; op2:x27; dest:x27; op1val:0x7f222105; op2val:0x7f222105; 
   valaddr_reg:x3; val_offset:6*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.s, x27, x27, x27, dyn, 96, 0, x3, 6*FLEN/8, x4, x1, x2)

inst_4:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x29, rs2==x28, rd==x30,fs1 == 0 and fe1 == 0xfe and fm1 == 0x222105 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x222105 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.s ; op1:x29; op2:x28; dest:x30; op1val:0x7f222105; op2val:0xff222105; 
   valaddr_reg:x3; val_offset:8*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.s, x30, x29, x28, dyn, 128, 0, x3, 8*FLEN/8, x4, x1, x2)

inst_5:
// rs1==x25, rs2==x24, rd==x26,fs1 == 0 and fe1 == 0xfd and fm1 == 0x217fdd and fs2 == 1 and fe2 == 0xfd and fm2 == 0x217fdd and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.s ; op1:x25; op2:x24; dest:x26; op1val:0x7ea17fdd; op2val:0xfea17fdd; 
   valaddr_reg:x3; val_offset:10*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.s, x26, x25, x24, dyn, 0, 0, x3, 10*FLEN/8, x4, x1, x2)

inst_6:
// rs1==x24, rs2==x26, rd==x25,fs1 == 0 and fe1 == 0xfd and fm1 == 0x217fdd and fs2 == 1 and fe2 == 0xfd and fm2 == 0x217fdd and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.s ; op1:x24; op2:x26; dest:x25; op1val:0x7ea17fdd; op2val:0xfea17fdd; 
   valaddr_reg:x3; val_offset:12*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.s, x25, x24, x26, dyn, 32, 0, x3, 12*FLEN/8, x4, x1, x2)

inst_7:
// rs1==x26, rs2==x25, rd==x24,fs1 == 0 and fe1 == 0xfd and fm1 == 0x217fdd and fs2 == 1 and fe2 == 0xfd and fm2 == 0x217fdd and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.s ; op1:x26; op2:x25; dest:x24; op1val:0x7ea17fdd; op2val:0xfea17fdd; 
   valaddr_reg:x3; val_offset:14*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.s, x24, x26, x25, dyn, 64, 0, x3, 14*FLEN/8, x4, x1, x2)

inst_8:
// rs1==x22, rs2==x21, rd==x23,fs1 == 0 and fe1 == 0xfd and fm1 == 0x217fdd and fs2 == 1 and fe2 == 0xfd and fm2 == 0x217fdd and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.s ; op1:x22; op2:x21; dest:x23; op1val:0x7ea17fdd; op2val:0xfea17fdd; 
   valaddr_reg:x3; val_offset:16*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.s, x23, x22, x21, dyn, 96, 0, x3, 16*FLEN/8, x4, x1, x2)

inst_9:
// rs1==x21, rs2==x23, rd==x22,fs1 == 0 and fe1 == 0xfd and fm1 == 0x217fdd and fs2 == 1 and fe2 == 0xfd and fm2 == 0x217fdd and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.s ; op1:x21; op2:x23; dest:x22; op1val:0x7ea17fdd; op2val:0xfea17fdd; 
   valaddr_reg:x3; val_offset:18*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.s, x22, x21, x23, dyn, 128, 0, x3, 18*FLEN/8, x4, x1, x2)

inst_10:
// rs1==x23, rs2==x22, rd==x21,fs1 == 0 and fe1 == 0xfd and fm1 == 0x445459 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x445459 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.s ; op1:x23; op2:x22; dest:x21; op1val:0x7ec45459; op2val:0xfec45459; 
   valaddr_reg:x3; val_offset:20*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.s, x21, x23, x22, dyn, 0, 0, x3, 20*FLEN/8, x4, x1, x2)

inst_11:
// rs1==x19, rs2==x18, rd==x20,fs1 == 0 and fe1 == 0xfd and fm1 == 0x445459 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x445459 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.s ; op1:x19; op2:x18; dest:x20; op1val:0x7ec45459; op2val:0xfec45459; 
   valaddr_reg:x3; val_offset:22*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.s, x20, x19, x18, dyn, 32, 0, x3, 22*FLEN/8, x4, x1, x2)

inst_12:
// rs1==x18, rs2==x20, rd==x19,fs1 == 0 and fe1 == 0xfd and fm1 == 0x445459 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x445459 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.s ; op1:x18; op2:x20; dest:x19; op1val:0x7ec45459; op2val:0xfec45459; 
   valaddr_reg:x3; val_offset:24*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.s, x19, x18, x20, dyn, 64, 0, x3, 24*FLEN/8, x4, x1, x2)

inst_13:
// rs1==x20, rs2==x19, rd==x18,fs1 == 0 and fe1 == 0xfd and fm1 == 0x445459 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x445459 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.s ; op1:x20; op2:x19; dest:x18; op1val:0x7ec45459; op2val:0xfec45459; 
   valaddr_reg:x3; val_offset:26*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.s, x18, x20, x19, dyn, 96, 0, x3, 26*FLEN/8, x4, x1, x2)

inst_14:
// rs1==x16, rs2==x15, rd==x17,fs1 == 0 and fe1 == 0xfd and fm1 == 0x445459 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x445459 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.s ; op1:x16; op2:x15; dest:x17; op1val:0x7ec45459; op2val:0xfec45459; 
   valaddr_reg:x3; val_offset:28*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.s, x17, x16, x15, dyn, 128, 0, x3, 28*FLEN/8, x4, x1, x2)

inst_15:
// rs1==x15, rs2==x17, rd==x16,fs1 == 0 and fe1 == 0xfe and fm1 == 0x167d44 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x167d44 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.s ; op1:x15; op2:x17; dest:x16; op1val:0x7f167d44; op2val:0xff167d44; 
   valaddr_reg:x3; val_offset:30*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.s, x16, x15, x17, dyn, 0, 0, x3, 30*FLEN/8, x4, x1, x2)

inst_16:
// rs1==x17, rs2==x16, rd==x15,fs1 == 0 and fe1 == 0xfe and fm1 == 0x167d44 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x167d44 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.s ; op1:x17; op2:x16; dest:x15; op1val:0x7f167d44; op2val:0xff167d44; 
   valaddr_reg:x3; val_offset:32*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.s, x15, x17, x16, dyn, 32, 0, x3, 32*FLEN/8, x4, x1, x2)

inst_17:
// rs1==x13, rs2==x12, rd==x14,fs1 == 0 and fe1 == 0xfe and fm1 == 0x167d44 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x167d44 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.s ; op1:x13; op2:x12; dest:x14; op1val:0x7f167d44; op2val:0xff167d44; 
   valaddr_reg:x3; val_offset:34*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.s, x14, x13, x12, dyn, 64, 0, x3, 34*FLEN/8, x4, x1, x2)

inst_18:
// rs1==x12, rs2==x14, rd==x13,fs1 == 0 and fe1 == 0xfe and fm1 == 0x167d44 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x167d44 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.s ; op1:x12; op2:x14; dest:x13; op1val:0x7f167d44; op2val:0xff167d44; 
   valaddr_reg:x3; val_offset:36*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.s, x13, x12, x14, dyn, 96, 0, x3, 36*FLEN/8, x4, x1, x2)

inst_19:
// rs1==x14, rs2==x13, rd==x12,fs1 == 0 and fe1 == 0xfe and fm1 == 0x167d44 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x167d44 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.s ; op1:x14; op2:x13; dest:x12; op1val:0x7f167d44; op2val:0xff167d44; 
   valaddr_reg:x3; val_offset:38*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.s, x12, x14, x13, dyn, 128, 0, x3, 38*FLEN/8, x4, x1, x2)

inst_20:
// rs1==x10, rs2==x9, rd==x11,fs1 == 0 and fe1 == 0xfd and fm1 == 0x370362 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x370362 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.s ; op1:x10; op2:x9; dest:x11; op1val:0x7eb70362; op2val:0xfeb70362; 
   valaddr_reg:x3; val_offset:40*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.s, x11, x10, x9, dyn, 0, 0, x3, 40*FLEN/8, x4, x1, x2)
RVTEST_VALBASEUPD(x12,test_dataset_1)

inst_21:
// rs1==x9, rs2==x11, rd==x10,fs1 == 0 and fe1 == 0xfd and fm1 == 0x370362 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x370362 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.s ; op1:x9; op2:x11; dest:x10; op1val:0x7eb70362; op2val:0xfeb70362; 
   valaddr_reg:x12; val_offset:0*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.s, x10, x9, x11, dyn, 32, 0, x12, 0*FLEN/8, x13, x1, x2)

inst_22:
// rs1==x11, rs2==x10, rd==x9,fs1 == 0 and fe1 == 0xfd and fm1 == 0x370362 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x370362 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.s ; op1:x11; op2:x10; dest:x9; op1val:0x7eb70362; op2val:0xfeb70362; 
   valaddr_reg:x12; val_offset:2*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.s, x9, x11, x10, dyn, 64, 0, x12, 2*FLEN/8, x13, x1, x2)

inst_23:
// rs1==x7, rs2==x6, rd==x8,fs1 == 0 and fe1 == 0xfd and fm1 == 0x370362 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x370362 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.s ; op1:x7; op2:x6; dest:x8; op1val:0x7eb70362; op2val:0xfeb70362; 
   valaddr_reg:x12; val_offset:4*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x2 
*/
TEST_FPRR_OP(fadd.s, x8, x7, x6, dyn, 96, 0, x12, 4*FLEN/8, x13, x1, x2)
RVTEST_SIGBASE(x9,signature_x9_0)

inst_24:
// rs1==x6, rs2==x8, rd==x7,fs1 == 0 and fe1 == 0xfd and fm1 == 0x370362 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x370362 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.s ; op1:x6; op2:x8; dest:x7; op1val:0x7eb70362; op2val:0xfeb70362; 
   valaddr_reg:x12; val_offset:6*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x7, x6, x8, dyn, 128, 0, x12, 6*FLEN/8, x13, x9, x10)

inst_25:
// rs1==x8, rs2==x7, rd==x6,fs1 == 0 and fe1 == 0xfe and fm1 == 0x2e5b90 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x2e5b90 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.s ; op1:x8; op2:x7; dest:x6; op1val:0x7f2e5b90; op2val:0xff2e5b90; 
   valaddr_reg:x12; val_offset:8*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x6, x8, x7, dyn, 0, 0, x12, 8*FLEN/8, x13, x9, x10)

inst_26:
// rs1==x4, rs2==x3, rd==x5,fs1 == 0 and fe1 == 0xfe and fm1 == 0x2e5b90 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x2e5b90 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.s ; op1:x4; op2:x3; dest:x5; op1val:0x7f2e5b90; op2val:0xff2e5b90; 
   valaddr_reg:x12; val_offset:10*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x5, x4, x3, dyn, 32, 0, x12, 10*FLEN/8, x13, x9, x10)

inst_27:
// rs1==x3, rs2==x5, rd==x4,fs1 == 0 and fe1 == 0xfe and fm1 == 0x2e5b90 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x2e5b90 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.s ; op1:x3; op2:x5; dest:x4; op1val:0x7f2e5b90; op2val:0xff2e5b90; 
   valaddr_reg:x12; val_offset:12*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x4, x3, x5, dyn, 64, 0, x12, 12*FLEN/8, x13, x9, x10)

inst_28:
// rs1==x5, rs2==x4, rd==x3,fs1 == 0 and fe1 == 0xfe and fm1 == 0x2e5b90 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x2e5b90 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.s ; op1:x5; op2:x4; dest:x3; op1val:0x7f2e5b90; op2val:0xff2e5b90; 
   valaddr_reg:x12; val_offset:14*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x3, x5, x4, dyn, 96, 0, x12, 14*FLEN/8, x13, x9, x10)

inst_29:
// rs1==x1, rs2==x0, rd==x2,fs1 == 0 and fe1 == 0xfe and fm1 == 0x2e5b90 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x2e5b90 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.s ; op1:x1; op2:x0; dest:x2; op1val:0x7f2e5b90; op2val:0x0; 
   valaddr_reg:x12; val_offset:16*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x2, x1, x0, dyn, 128, 0, x12, 16*FLEN/8, x13, x9, x10)

inst_30:
// rs1==x0, rs2==x2, rd==x1,fs1 == 0 and fe1 == 0xfc and fm1 == 0x587392 and fs2 == 1 and fe2 == 0xfc and fm2 == 0x587392 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.s ; op1:x0; op2:x2; dest:x1; op1val:0x0; op2val:0xfe587392; 
   valaddr_reg:x12; val_offset:18*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x1, x0, x2, dyn, 0, 0, x12, 18*FLEN/8, x13, x9, x10)

inst_31:
// rs1==x2, rs2==x1, rd==x0,fs1 == 0 and fe1 == 0xfc and fm1 == 0x587392 and fs2 == 1 and fe2 == 0xfc and fm2 == 0x587392 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.s ; op1:x2; op2:x1; dest:x0; op1val:0x7e587392; op2val:0xfe587392; 
   valaddr_reg:x12; val_offset:20*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x0, x2, x1, dyn, 32, 0, x12, 20*FLEN/8, x13, x9, x10)

inst_32:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x587392 and fs2 == 1 and fe2 == 0xfc and fm2 == 0x587392 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7e587392; op2val:0xfe587392; 
   valaddr_reg:x12; val_offset:22*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x12, 22*FLEN/8, x13, x9, x10)

inst_33:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x587392 and fs2 == 1 and fe2 == 0xfc and fm2 == 0x587392 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7e587392; op2val:0xfe587392; 
   valaddr_reg:x12; val_offset:24*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x12, 24*FLEN/8, x13, x9, x10)

inst_34:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x587392 and fs2 == 1 and fe2 == 0xfc and fm2 == 0x587392 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7e587392; op2val:0xfe587392; 
   valaddr_reg:x12; val_offset:26*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x12, 26*FLEN/8, x13, x9, x10)

inst_35:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6d7424 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x6d7424 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7eed7424; op2val:0xfeed7424; 
   valaddr_reg:x12; val_offset:28*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x12, 28*FLEN/8, x13, x9, x10)

inst_36:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6d7424 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x6d7424 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7eed7424; op2val:0xfeed7424; 
   valaddr_reg:x12; val_offset:30*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x12, 30*FLEN/8, x13, x9, x10)

inst_37:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6d7424 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x6d7424 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7eed7424; op2val:0xfeed7424; 
   valaddr_reg:x12; val_offset:32*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x12, 32*FLEN/8, x13, x9, x10)

inst_38:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6d7424 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x6d7424 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7eed7424; op2val:0xfeed7424; 
   valaddr_reg:x12; val_offset:34*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x12, 34*FLEN/8, x13, x9, x10)

inst_39:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6d7424 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x6d7424 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7eed7424; op2val:0xfeed7424; 
   valaddr_reg:x12; val_offset:36*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x12, 36*FLEN/8, x13, x9, x10)

inst_40:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2eabd8 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x2eabd8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f2eabd8; op2val:0xff2eabd8; 
   valaddr_reg:x12; val_offset:38*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x12, 38*FLEN/8, x13, x9, x10)

inst_41:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2eabd8 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x2eabd8 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f2eabd8; op2val:0xff2eabd8; 
   valaddr_reg:x12; val_offset:40*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x12, 40*FLEN/8, x13, x9, x10)

inst_42:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2eabd8 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x2eabd8 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f2eabd8; op2val:0xff2eabd8; 
   valaddr_reg:x12; val_offset:42*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x12, 42*FLEN/8, x13, x9, x10)

inst_43:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2eabd8 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x2eabd8 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f2eabd8; op2val:0xff2eabd8; 
   valaddr_reg:x12; val_offset:44*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x12, 44*FLEN/8, x13, x9, x10)

inst_44:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2eabd8 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x2eabd8 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f2eabd8; op2val:0xff2eabd8; 
   valaddr_reg:x12; val_offset:46*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x12, 46*FLEN/8, x13, x9, x10)

inst_45:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1b8fcb and fs2 == 1 and fe2 == 0xfe and fm2 == 0x1b8fcb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f1b8fcb; op2val:0xff1b8fcb; 
   valaddr_reg:x12; val_offset:48*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x12, 48*FLEN/8, x13, x9, x10)

inst_46:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1b8fcb and fs2 == 1 and fe2 == 0xfe and fm2 == 0x1b8fcb and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f1b8fcb; op2val:0xff1b8fcb; 
   valaddr_reg:x12; val_offset:50*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x12, 50*FLEN/8, x13, x9, x10)

inst_47:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1b8fcb and fs2 == 1 and fe2 == 0xfe and fm2 == 0x1b8fcb and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f1b8fcb; op2val:0xff1b8fcb; 
   valaddr_reg:x12; val_offset:52*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x12, 52*FLEN/8, x13, x9, x10)

inst_48:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1b8fcb and fs2 == 1 and fe2 == 0xfe and fm2 == 0x1b8fcb and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f1b8fcb; op2val:0xff1b8fcb; 
   valaddr_reg:x12; val_offset:54*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x12, 54*FLEN/8, x13, x9, x10)

inst_49:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1b8fcb and fs2 == 1 and fe2 == 0xfe and fm2 == 0x1b8fcb and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f1b8fcb; op2val:0xff1b8fcb; 
   valaddr_reg:x12; val_offset:56*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x12, 56*FLEN/8, x13, x9, x10)

inst_50:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6e317d and fs2 == 1 and fe2 == 0xfc and fm2 == 0x6e317d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7e6e317d; op2val:0xfe6e317d; 
   valaddr_reg:x12; val_offset:58*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x12, 58*FLEN/8, x13, x9, x10)

inst_51:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6e317d and fs2 == 1 and fe2 == 0xfc and fm2 == 0x6e317d and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7e6e317d; op2val:0xfe6e317d; 
   valaddr_reg:x12; val_offset:60*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x12, 60*FLEN/8, x13, x9, x10)

inst_52:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6e317d and fs2 == 1 and fe2 == 0xfc and fm2 == 0x6e317d and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7e6e317d; op2val:0xfe6e317d; 
   valaddr_reg:x12; val_offset:62*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x12, 62*FLEN/8, x13, x9, x10)

inst_53:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6e317d and fs2 == 1 and fe2 == 0xfc and fm2 == 0x6e317d and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7e6e317d; op2val:0xfe6e317d; 
   valaddr_reg:x12; val_offset:64*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x12, 64*FLEN/8, x13, x9, x10)

inst_54:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6e317d and fs2 == 1 and fe2 == 0xfc and fm2 == 0x6e317d and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7e6e317d; op2val:0xfe6e317d; 
   valaddr_reg:x12; val_offset:66*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x12, 66*FLEN/8, x13, x9, x10)

inst_55:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c93b2 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x2c93b2 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f2c93b2; op2val:0xff2c93b2; 
   valaddr_reg:x12; val_offset:68*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x12, 68*FLEN/8, x13, x9, x10)

inst_56:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c93b2 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x2c93b2 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f2c93b2; op2val:0xff2c93b2; 
   valaddr_reg:x12; val_offset:70*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x12, 70*FLEN/8, x13, x9, x10)

inst_57:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c93b2 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x2c93b2 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f2c93b2; op2val:0xff2c93b2; 
   valaddr_reg:x12; val_offset:72*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x12, 72*FLEN/8, x13, x9, x10)

inst_58:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c93b2 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x2c93b2 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f2c93b2; op2val:0xff2c93b2; 
   valaddr_reg:x12; val_offset:74*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x12, 74*FLEN/8, x13, x9, x10)

inst_59:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c93b2 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x2c93b2 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f2c93b2; op2val:0xff2c93b2; 
   valaddr_reg:x12; val_offset:76*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x12, 76*FLEN/8, x13, x9, x10)

inst_60:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x354d84 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x354d84 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7eb54d84; op2val:0xfeb54d84; 
   valaddr_reg:x12; val_offset:78*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x12, 78*FLEN/8, x13, x9, x10)

inst_61:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x354d84 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x354d84 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7eb54d84; op2val:0xfeb54d84; 
   valaddr_reg:x12; val_offset:80*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x12, 80*FLEN/8, x13, x9, x10)

inst_62:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x354d84 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x354d84 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7eb54d84; op2val:0xfeb54d84; 
   valaddr_reg:x12; val_offset:82*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x12, 82*FLEN/8, x13, x9, x10)

inst_63:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x354d84 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x354d84 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7eb54d84; op2val:0xfeb54d84; 
   valaddr_reg:x12; val_offset:84*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x12, 84*FLEN/8, x13, x9, x10)

inst_64:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x354d84 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x354d84 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7eb54d84; op2val:0xfeb54d84; 
   valaddr_reg:x12; val_offset:86*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x12, 86*FLEN/8, x13, x9, x10)

inst_65:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x26b8d3 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x26b8d3 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7ea6b8d3; op2val:0xfea6b8d3; 
   valaddr_reg:x12; val_offset:88*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x12, 88*FLEN/8, x13, x9, x10)

inst_66:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x26b8d3 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x26b8d3 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7ea6b8d3; op2val:0xfea6b8d3; 
   valaddr_reg:x12; val_offset:90*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x12, 90*FLEN/8, x13, x9, x10)

inst_67:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x26b8d3 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x26b8d3 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7ea6b8d3; op2val:0xfea6b8d3; 
   valaddr_reg:x12; val_offset:92*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x12, 92*FLEN/8, x13, x9, x10)

inst_68:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x26b8d3 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x26b8d3 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7ea6b8d3; op2val:0xfea6b8d3; 
   valaddr_reg:x12; val_offset:94*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x12, 94*FLEN/8, x13, x9, x10)

inst_69:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x26b8d3 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x26b8d3 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7ea6b8d3; op2val:0xfea6b8d3; 
   valaddr_reg:x12; val_offset:96*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x12, 96*FLEN/8, x13, x9, x10)

inst_70:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2f4c51 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x2f4c51 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f2f4c51; op2val:0xff2f4c51; 
   valaddr_reg:x12; val_offset:98*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x12, 98*FLEN/8, x13, x9, x10)

inst_71:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2f4c51 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x2f4c51 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f2f4c51; op2val:0xff2f4c51; 
   valaddr_reg:x12; val_offset:100*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x12, 100*FLEN/8, x13, x9, x10)

inst_72:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2f4c51 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x2f4c51 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f2f4c51; op2val:0xff2f4c51; 
   valaddr_reg:x12; val_offset:102*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x12, 102*FLEN/8, x13, x9, x10)

inst_73:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2f4c51 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x2f4c51 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f2f4c51; op2val:0xff2f4c51; 
   valaddr_reg:x12; val_offset:104*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x12, 104*FLEN/8, x13, x9, x10)

inst_74:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2f4c51 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x2f4c51 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f2f4c51; op2val:0xff2f4c51; 
   valaddr_reg:x12; val_offset:106*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x12, 106*FLEN/8, x13, x9, x10)

inst_75:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x372bf7 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x372bf7 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7eb72bf7; op2val:0xfeb72bf7; 
   valaddr_reg:x12; val_offset:108*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x12, 108*FLEN/8, x13, x9, x10)

inst_76:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x372bf7 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x372bf7 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7eb72bf7; op2val:0xfeb72bf7; 
   valaddr_reg:x12; val_offset:110*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x12, 110*FLEN/8, x13, x9, x10)

inst_77:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x372bf7 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x372bf7 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7eb72bf7; op2val:0xfeb72bf7; 
   valaddr_reg:x12; val_offset:112*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x12, 112*FLEN/8, x13, x9, x10)

inst_78:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x372bf7 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x372bf7 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7eb72bf7; op2val:0xfeb72bf7; 
   valaddr_reg:x12; val_offset:114*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x12, 114*FLEN/8, x13, x9, x10)

inst_79:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x372bf7 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x372bf7 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7eb72bf7; op2val:0xfeb72bf7; 
   valaddr_reg:x12; val_offset:116*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x12, 116*FLEN/8, x13, x9, x10)

inst_80:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x480ede and fs2 == 1 and fe2 == 0xfc and fm2 == 0x480ede and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7e480ede; op2val:0xfe480ede; 
   valaddr_reg:x12; val_offset:118*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x12, 118*FLEN/8, x13, x9, x10)

inst_81:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x480ede and fs2 == 1 and fe2 == 0xfc and fm2 == 0x480ede and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7e480ede; op2val:0xfe480ede; 
   valaddr_reg:x12; val_offset:120*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x12, 120*FLEN/8, x13, x9, x10)

inst_82:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x480ede and fs2 == 1 and fe2 == 0xfc and fm2 == 0x480ede and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7e480ede; op2val:0xfe480ede; 
   valaddr_reg:x12; val_offset:122*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x12, 122*FLEN/8, x13, x9, x10)

inst_83:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x480ede and fs2 == 1 and fe2 == 0xfc and fm2 == 0x480ede and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7e480ede; op2val:0xfe480ede; 
   valaddr_reg:x12; val_offset:124*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x12, 124*FLEN/8, x13, x9, x10)

inst_84:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x480ede and fs2 == 1 and fe2 == 0xfc and fm2 == 0x480ede and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7e480ede; op2val:0xfe480ede; 
   valaddr_reg:x12; val_offset:126*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x12, 126*FLEN/8, x13, x9, x10)

inst_85:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x52b355 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x52b355 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7ed2b355; op2val:0xfed2b355; 
   valaddr_reg:x12; val_offset:128*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x12, 128*FLEN/8, x13, x9, x10)

inst_86:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x52b355 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x52b355 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7ed2b355; op2val:0xfed2b355; 
   valaddr_reg:x12; val_offset:130*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x12, 130*FLEN/8, x13, x9, x10)

inst_87:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x52b355 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x52b355 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7ed2b355; op2val:0xfed2b355; 
   valaddr_reg:x12; val_offset:132*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x12, 132*FLEN/8, x13, x9, x10)

inst_88:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x52b355 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x52b355 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7ed2b355; op2val:0xfed2b355; 
   valaddr_reg:x12; val_offset:134*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x12, 134*FLEN/8, x13, x9, x10)

inst_89:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x52b355 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x52b355 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7ed2b355; op2val:0xfed2b355; 
   valaddr_reg:x12; val_offset:136*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x12, 136*FLEN/8, x13, x9, x10)

inst_90:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0a2eec and fs2 == 1 and fe2 == 0xfe and fm2 == 0x0a2eec and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f0a2eec; op2val:0xff0a2eec; 
   valaddr_reg:x12; val_offset:138*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x12, 138*FLEN/8, x13, x9, x10)

inst_91:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0a2eec and fs2 == 1 and fe2 == 0xfe and fm2 == 0x0a2eec and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f0a2eec; op2val:0xff0a2eec; 
   valaddr_reg:x12; val_offset:140*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x12, 140*FLEN/8, x13, x9, x10)

inst_92:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0a2eec and fs2 == 1 and fe2 == 0xfe and fm2 == 0x0a2eec and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f0a2eec; op2val:0xff0a2eec; 
   valaddr_reg:x12; val_offset:142*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x12, 142*FLEN/8, x13, x9, x10)

inst_93:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0a2eec and fs2 == 1 and fe2 == 0xfe and fm2 == 0x0a2eec and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f0a2eec; op2val:0xff0a2eec; 
   valaddr_reg:x12; val_offset:144*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x12, 144*FLEN/8, x13, x9, x10)

inst_94:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0a2eec and fs2 == 1 and fe2 == 0xfe and fm2 == 0x0a2eec and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f0a2eec; op2val:0xff0a2eec; 
   valaddr_reg:x12; val_offset:146*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x12, 146*FLEN/8, x13, x9, x10)

inst_95:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1e5ec7 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x1e5ec7 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f1e5ec7; op2val:0xff1e5ec7; 
   valaddr_reg:x12; val_offset:148*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x12, 148*FLEN/8, x13, x9, x10)

inst_96:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1e5ec7 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x1e5ec7 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f1e5ec7; op2val:0xff1e5ec7; 
   valaddr_reg:x12; val_offset:150*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x12, 150*FLEN/8, x13, x9, x10)

inst_97:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1e5ec7 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x1e5ec7 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f1e5ec7; op2val:0xff1e5ec7; 
   valaddr_reg:x12; val_offset:152*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x12, 152*FLEN/8, x13, x9, x10)

inst_98:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1e5ec7 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x1e5ec7 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f1e5ec7; op2val:0xff1e5ec7; 
   valaddr_reg:x12; val_offset:154*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x12, 154*FLEN/8, x13, x9, x10)

inst_99:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1e5ec7 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x1e5ec7 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f1e5ec7; op2val:0xff1e5ec7; 
   valaddr_reg:x12; val_offset:156*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x12, 156*FLEN/8, x13, x9, x10)

inst_100:
// fs1 == 0 and fe1 == 0xf4 and fm1 == 0x60affa and fs2 == 1 and fe2 == 0xf4 and fm2 == 0x60affa and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7a60affa; op2val:0xfa60affa; 
   valaddr_reg:x12; val_offset:158*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x12, 158*FLEN/8, x13, x9, x10)

inst_101:
// fs1 == 0 and fe1 == 0xf4 and fm1 == 0x60affa and fs2 == 1 and fe2 == 0xf4 and fm2 == 0x60affa and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7a60affa; op2val:0xfa60affa; 
   valaddr_reg:x12; val_offset:160*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x12, 160*FLEN/8, x13, x9, x10)

inst_102:
// fs1 == 0 and fe1 == 0xf4 and fm1 == 0x60affa and fs2 == 1 and fe2 == 0xf4 and fm2 == 0x60affa and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7a60affa; op2val:0xfa60affa; 
   valaddr_reg:x12; val_offset:162*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x12, 162*FLEN/8, x13, x9, x10)

inst_103:
// fs1 == 0 and fe1 == 0xf4 and fm1 == 0x60affa and fs2 == 1 and fe2 == 0xf4 and fm2 == 0x60affa and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7a60affa; op2val:0xfa60affa; 
   valaddr_reg:x12; val_offset:164*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x12, 164*FLEN/8, x13, x9, x10)

inst_104:
// fs1 == 0 and fe1 == 0xf4 and fm1 == 0x60affa and fs2 == 1 and fe2 == 0xf4 and fm2 == 0x60affa and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7a60affa; op2val:0xfa60affa; 
   valaddr_reg:x12; val_offset:166*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x12, 166*FLEN/8, x13, x9, x10)

inst_105:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x269468 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x269468 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f269468; op2val:0xff269468; 
   valaddr_reg:x12; val_offset:168*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x12, 168*FLEN/8, x13, x9, x10)

inst_106:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x269468 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x269468 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f269468; op2val:0xff269468; 
   valaddr_reg:x12; val_offset:170*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x12, 170*FLEN/8, x13, x9, x10)

inst_107:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x269468 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x269468 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f269468; op2val:0xff269468; 
   valaddr_reg:x12; val_offset:172*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x12, 172*FLEN/8, x13, x9, x10)

inst_108:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x269468 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x269468 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f269468; op2val:0xff269468; 
   valaddr_reg:x12; val_offset:174*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x12, 174*FLEN/8, x13, x9, x10)

inst_109:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x269468 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x269468 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f269468; op2val:0xff269468; 
   valaddr_reg:x12; val_offset:176*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x12, 176*FLEN/8, x13, x9, x10)

inst_110:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x79c1c6 and fs2 == 1 and fe2 == 0xfc and fm2 == 0x79c1c6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7e79c1c6; op2val:0xfe79c1c6; 
   valaddr_reg:x12; val_offset:178*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x12, 178*FLEN/8, x13, x9, x10)

inst_111:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x79c1c6 and fs2 == 1 and fe2 == 0xfc and fm2 == 0x79c1c6 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7e79c1c6; op2val:0xfe79c1c6; 
   valaddr_reg:x12; val_offset:180*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x12, 180*FLEN/8, x13, x9, x10)

inst_112:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x79c1c6 and fs2 == 1 and fe2 == 0xfc and fm2 == 0x79c1c6 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7e79c1c6; op2val:0xfe79c1c6; 
   valaddr_reg:x12; val_offset:182*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x12, 182*FLEN/8, x13, x9, x10)

inst_113:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x79c1c6 and fs2 == 1 and fe2 == 0xfc and fm2 == 0x79c1c6 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7e79c1c6; op2val:0xfe79c1c6; 
   valaddr_reg:x12; val_offset:184*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x12, 184*FLEN/8, x13, x9, x10)

inst_114:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x79c1c6 and fs2 == 1 and fe2 == 0xfc and fm2 == 0x79c1c6 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7e79c1c6; op2val:0xfe79c1c6; 
   valaddr_reg:x12; val_offset:186*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x12, 186*FLEN/8, x13, x9, x10)

inst_115:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x12bd51 and fs2 == 1 and fe2 == 0xfc and fm2 == 0x12bd51 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7e12bd51; op2val:0xfe12bd51; 
   valaddr_reg:x12; val_offset:188*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x12, 188*FLEN/8, x13, x9, x10)

inst_116:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x12bd51 and fs2 == 1 and fe2 == 0xfc and fm2 == 0x12bd51 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7e12bd51; op2val:0xfe12bd51; 
   valaddr_reg:x12; val_offset:190*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x12, 190*FLEN/8, x13, x9, x10)

inst_117:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x12bd51 and fs2 == 1 and fe2 == 0xfc and fm2 == 0x12bd51 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7e12bd51; op2val:0xfe12bd51; 
   valaddr_reg:x12; val_offset:192*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x12, 192*FLEN/8, x13, x9, x10)

inst_118:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x12bd51 and fs2 == 1 and fe2 == 0xfc and fm2 == 0x12bd51 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7e12bd51; op2val:0xfe12bd51; 
   valaddr_reg:x12; val_offset:194*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x12, 194*FLEN/8, x13, x9, x10)

inst_119:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x12bd51 and fs2 == 1 and fe2 == 0xfc and fm2 == 0x12bd51 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7e12bd51; op2val:0xfe12bd51; 
   valaddr_reg:x12; val_offset:196*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x12, 196*FLEN/8, x13, x9, x10)

inst_120:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3741cc and fs2 == 1 and fe2 == 0xfc and fm2 == 0x3741cc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7e3741cc; op2val:0xfe3741cc; 
   valaddr_reg:x12; val_offset:198*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x12, 198*FLEN/8, x13, x9, x10)

inst_121:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3741cc and fs2 == 1 and fe2 == 0xfc and fm2 == 0x3741cc and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7e3741cc; op2val:0xfe3741cc; 
   valaddr_reg:x12; val_offset:200*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x12, 200*FLEN/8, x13, x9, x10)

inst_122:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3741cc and fs2 == 1 and fe2 == 0xfc and fm2 == 0x3741cc and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7e3741cc; op2val:0xfe3741cc; 
   valaddr_reg:x12; val_offset:202*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x12, 202*FLEN/8, x13, x9, x10)

inst_123:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3741cc and fs2 == 1 and fe2 == 0xfc and fm2 == 0x3741cc and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7e3741cc; op2val:0xfe3741cc; 
   valaddr_reg:x12; val_offset:204*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x12, 204*FLEN/8, x13, x9, x10)

inst_124:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3741cc and fs2 == 1 and fe2 == 0xfc and fm2 == 0x3741cc and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7e3741cc; op2val:0xfe3741cc; 
   valaddr_reg:x12; val_offset:206*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x12, 206*FLEN/8, x13, x9, x10)

inst_125:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1a35e0 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x1a35e0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f1a35e0; op2val:0xff1a35e0; 
   valaddr_reg:x12; val_offset:208*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x12, 208*FLEN/8, x13, x9, x10)

inst_126:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1a35e0 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x1a35e0 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f1a35e0; op2val:0xff1a35e0; 
   valaddr_reg:x12; val_offset:210*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x12, 210*FLEN/8, x13, x9, x10)

inst_127:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1a35e0 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x1a35e0 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f1a35e0; op2val:0xff1a35e0; 
   valaddr_reg:x12; val_offset:212*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x12, 212*FLEN/8, x13, x9, x10)

inst_128:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1a35e0 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x1a35e0 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f1a35e0; op2val:0xff1a35e0; 
   valaddr_reg:x12; val_offset:214*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x12, 214*FLEN/8, x13, x9, x10)

inst_129:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1a35e0 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x1a35e0 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f1a35e0; op2val:0xff1a35e0; 
   valaddr_reg:x12; val_offset:216*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x12, 216*FLEN/8, x13, x9, x10)

inst_130:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x772129 and fs2 == 1 and fe2 == 0xfa and fm2 == 0x772129 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7d772129; op2val:0xfd772129; 
   valaddr_reg:x12; val_offset:218*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x12, 218*FLEN/8, x13, x9, x10)

inst_131:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x772129 and fs2 == 1 and fe2 == 0xfa and fm2 == 0x772129 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7d772129; op2val:0xfd772129; 
   valaddr_reg:x12; val_offset:220*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x12, 220*FLEN/8, x13, x9, x10)

inst_132:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x772129 and fs2 == 1 and fe2 == 0xfa and fm2 == 0x772129 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7d772129; op2val:0xfd772129; 
   valaddr_reg:x12; val_offset:222*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x12, 222*FLEN/8, x13, x9, x10)

inst_133:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x772129 and fs2 == 1 and fe2 == 0xfa and fm2 == 0x772129 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7d772129; op2val:0xfd772129; 
   valaddr_reg:x12; val_offset:224*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x12, 224*FLEN/8, x13, x9, x10)

inst_134:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x772129 and fs2 == 1 and fe2 == 0xfa and fm2 == 0x772129 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7d772129; op2val:0xfd772129; 
   valaddr_reg:x12; val_offset:226*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x12, 226*FLEN/8, x13, x9, x10)

inst_135:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x430c98 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x430c98 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7ec30c98; op2val:0xfec30c98; 
   valaddr_reg:x12; val_offset:228*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x12, 228*FLEN/8, x13, x9, x10)

inst_136:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x430c98 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x430c98 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7ec30c98; op2val:0xfec30c98; 
   valaddr_reg:x12; val_offset:230*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x12, 230*FLEN/8, x13, x9, x10)

inst_137:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x430c98 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x430c98 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7ec30c98; op2val:0xfec30c98; 
   valaddr_reg:x12; val_offset:232*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x12, 232*FLEN/8, x13, x9, x10)

inst_138:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x430c98 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x430c98 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7ec30c98; op2val:0xfec30c98; 
   valaddr_reg:x12; val_offset:234*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x12, 234*FLEN/8, x13, x9, x10)

inst_139:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x430c98 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x430c98 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7ec30c98; op2val:0xfec30c98; 
   valaddr_reg:x12; val_offset:236*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x12, 236*FLEN/8, x13, x9, x10)

inst_140:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x278349 and fs2 == 1 and fe2 == 0xfb and fm2 == 0x278349 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7da78349; op2val:0xfda78349; 
   valaddr_reg:x12; val_offset:238*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x12, 238*FLEN/8, x13, x9, x10)

inst_141:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x278349 and fs2 == 1 and fe2 == 0xfb and fm2 == 0x278349 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7da78349; op2val:0xfda78349; 
   valaddr_reg:x12; val_offset:240*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x12, 240*FLEN/8, x13, x9, x10)

inst_142:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x278349 and fs2 == 1 and fe2 == 0xfb and fm2 == 0x278349 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7da78349; op2val:0xfda78349; 
   valaddr_reg:x12; val_offset:242*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x12, 242*FLEN/8, x13, x9, x10)

inst_143:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x278349 and fs2 == 1 and fe2 == 0xfb and fm2 == 0x278349 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7da78349; op2val:0xfda78349; 
   valaddr_reg:x12; val_offset:244*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x12, 244*FLEN/8, x13, x9, x10)

inst_144:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x278349 and fs2 == 1 and fe2 == 0xfb and fm2 == 0x278349 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7da78349; op2val:0xfda78349; 
   valaddr_reg:x12; val_offset:246*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x12, 246*FLEN/8, x13, x9, x10)

inst_145:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x07a8e7 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x07a8e7 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f07a8e7; op2val:0xff07a8e7; 
   valaddr_reg:x12; val_offset:248*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x12, 248*FLEN/8, x13, x9, x10)

inst_146:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x07a8e7 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x07a8e7 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f07a8e7; op2val:0xff07a8e7; 
   valaddr_reg:x12; val_offset:250*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x12, 250*FLEN/8, x13, x9, x10)

inst_147:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x07a8e7 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x07a8e7 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f07a8e7; op2val:0xff07a8e7; 
   valaddr_reg:x12; val_offset:252*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x12, 252*FLEN/8, x13, x9, x10)

inst_148:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x07a8e7 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x07a8e7 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f07a8e7; op2val:0xff07a8e7; 
   valaddr_reg:x12; val_offset:254*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x12, 254*FLEN/8, x13, x9, x10)

inst_149:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x07a8e7 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x07a8e7 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f07a8e7; op2val:0xff07a8e7; 
   valaddr_reg:x12; val_offset:256*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x12, 256*FLEN/8, x13, x9, x10)

inst_150:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c60ac and fs2 == 1 and fe2 == 0xfe and fm2 == 0x1c60ac and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f1c60ac; op2val:0xff1c60ac; 
   valaddr_reg:x12; val_offset:258*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x12, 258*FLEN/8, x13, x9, x10)

inst_151:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c60ac and fs2 == 1 and fe2 == 0xfe and fm2 == 0x1c60ac and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f1c60ac; op2val:0xff1c60ac; 
   valaddr_reg:x12; val_offset:260*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x12, 260*FLEN/8, x13, x9, x10)
RVTEST_SIGBASE(x9,signature_x9_1)

inst_152:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c60ac and fs2 == 1 and fe2 == 0xfe and fm2 == 0x1c60ac and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f1c60ac; op2val:0xff1c60ac; 
   valaddr_reg:x12; val_offset:262*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x12, 262*FLEN/8, x13, x9, x10)

inst_153:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c60ac and fs2 == 1 and fe2 == 0xfe and fm2 == 0x1c60ac and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f1c60ac; op2val:0xff1c60ac; 
   valaddr_reg:x12; val_offset:264*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x12, 264*FLEN/8, x13, x9, x10)

inst_154:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c60ac and fs2 == 1 and fe2 == 0xfe and fm2 == 0x1c60ac and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f1c60ac; op2val:0xff1c60ac; 
   valaddr_reg:x12; val_offset:266*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x12, 266*FLEN/8, x13, x9, x10)

inst_155:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x390e97 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x390e97 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f390e97; op2val:0xff390e97; 
   valaddr_reg:x12; val_offset:268*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x12, 268*FLEN/8, x13, x9, x10)

inst_156:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x390e97 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x390e97 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f390e97; op2val:0xff390e97; 
   valaddr_reg:x12; val_offset:270*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x12, 270*FLEN/8, x13, x9, x10)

inst_157:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x390e97 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x390e97 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f390e97; op2val:0xff390e97; 
   valaddr_reg:x12; val_offset:272*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x12, 272*FLEN/8, x13, x9, x10)

inst_158:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x390e97 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x390e97 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f390e97; op2val:0xff390e97; 
   valaddr_reg:x12; val_offset:274*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x12, 274*FLEN/8, x13, x9, x10)

inst_159:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x390e97 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x390e97 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f390e97; op2val:0xff390e97; 
   valaddr_reg:x12; val_offset:276*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x12, 276*FLEN/8, x13, x9, x10)

inst_160:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x61a51b and fs2 == 1 and fe2 == 0xfd and fm2 == 0x61a51b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7ee1a51b; op2val:0xfee1a51b; 
   valaddr_reg:x12; val_offset:278*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x12, 278*FLEN/8, x13, x9, x10)

inst_161:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x61a51b and fs2 == 1 and fe2 == 0xfd and fm2 == 0x61a51b and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7ee1a51b; op2val:0xfee1a51b; 
   valaddr_reg:x12; val_offset:280*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x12, 280*FLEN/8, x13, x9, x10)

inst_162:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x61a51b and fs2 == 1 and fe2 == 0xfd and fm2 == 0x61a51b and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7ee1a51b; op2val:0xfee1a51b; 
   valaddr_reg:x12; val_offset:282*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x12, 282*FLEN/8, x13, x9, x10)

inst_163:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x61a51b and fs2 == 1 and fe2 == 0xfd and fm2 == 0x61a51b and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7ee1a51b; op2val:0xfee1a51b; 
   valaddr_reg:x12; val_offset:284*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x12, 284*FLEN/8, x13, x9, x10)

inst_164:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x61a51b and fs2 == 1 and fe2 == 0xfd and fm2 == 0x61a51b and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7ee1a51b; op2val:0xfee1a51b; 
   valaddr_reg:x12; val_offset:286*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x12, 286*FLEN/8, x13, x9, x10)

inst_165:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x64f961 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x64f961 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7ee4f961; op2val:0xfee4f961; 
   valaddr_reg:x12; val_offset:288*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x12, 288*FLEN/8, x13, x9, x10)

inst_166:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x64f961 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x64f961 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7ee4f961; op2val:0xfee4f961; 
   valaddr_reg:x12; val_offset:290*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x12, 290*FLEN/8, x13, x9, x10)

inst_167:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x64f961 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x64f961 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7ee4f961; op2val:0xfee4f961; 
   valaddr_reg:x12; val_offset:292*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x12, 292*FLEN/8, x13, x9, x10)

inst_168:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x64f961 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x64f961 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7ee4f961; op2val:0xfee4f961; 
   valaddr_reg:x12; val_offset:294*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x12, 294*FLEN/8, x13, x9, x10)

inst_169:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x64f961 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x64f961 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7ee4f961; op2val:0xfee4f961; 
   valaddr_reg:x12; val_offset:296*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x12, 296*FLEN/8, x13, x9, x10)

inst_170:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5d0ccb and fs2 == 1 and fe2 == 0xfd and fm2 == 0x5d0ccb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7edd0ccb; op2val:0xfedd0ccb; 
   valaddr_reg:x12; val_offset:298*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x12, 298*FLEN/8, x13, x9, x10)

inst_171:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5d0ccb and fs2 == 1 and fe2 == 0xfd and fm2 == 0x5d0ccb and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7edd0ccb; op2val:0xfedd0ccb; 
   valaddr_reg:x12; val_offset:300*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x12, 300*FLEN/8, x13, x9, x10)

inst_172:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5d0ccb and fs2 == 1 and fe2 == 0xfd and fm2 == 0x5d0ccb and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7edd0ccb; op2val:0xfedd0ccb; 
   valaddr_reg:x12; val_offset:302*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x12, 302*FLEN/8, x13, x9, x10)

inst_173:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5d0ccb and fs2 == 1 and fe2 == 0xfd and fm2 == 0x5d0ccb and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7edd0ccb; op2val:0xfedd0ccb; 
   valaddr_reg:x12; val_offset:304*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x12, 304*FLEN/8, x13, x9, x10)

inst_174:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5d0ccb and fs2 == 1 and fe2 == 0xfd and fm2 == 0x5d0ccb and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7edd0ccb; op2val:0xfedd0ccb; 
   valaddr_reg:x12; val_offset:306*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x12, 306*FLEN/8, x13, x9, x10)

inst_175:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1173d9 and fs2 == 1 and fe2 == 0xfc and fm2 == 0x1173d9 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7e1173d9; op2val:0xfe1173d9; 
   valaddr_reg:x12; val_offset:308*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x12, 308*FLEN/8, x13, x9, x10)

inst_176:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1173d9 and fs2 == 1 and fe2 == 0xfc and fm2 == 0x1173d9 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7e1173d9; op2val:0xfe1173d9; 
   valaddr_reg:x12; val_offset:310*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x12, 310*FLEN/8, x13, x9, x10)

inst_177:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1173d9 and fs2 == 1 and fe2 == 0xfc and fm2 == 0x1173d9 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7e1173d9; op2val:0xfe1173d9; 
   valaddr_reg:x12; val_offset:312*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x12, 312*FLEN/8, x13, x9, x10)

inst_178:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1173d9 and fs2 == 1 and fe2 == 0xfc and fm2 == 0x1173d9 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7e1173d9; op2val:0xfe1173d9; 
   valaddr_reg:x12; val_offset:314*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x12, 314*FLEN/8, x13, x9, x10)

inst_179:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1173d9 and fs2 == 1 and fe2 == 0xfc and fm2 == 0x1173d9 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7e1173d9; op2val:0xfe1173d9; 
   valaddr_reg:x12; val_offset:316*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x12, 316*FLEN/8, x13, x9, x10)

inst_180:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6b4e0d and fs2 == 1 and fe2 == 0xfd and fm2 == 0x6b4e0d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7eeb4e0d; op2val:0xfeeb4e0d; 
   valaddr_reg:x12; val_offset:318*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x12, 318*FLEN/8, x13, x9, x10)

inst_181:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6b4e0d and fs2 == 1 and fe2 == 0xfd and fm2 == 0x6b4e0d and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7eeb4e0d; op2val:0xfeeb4e0d; 
   valaddr_reg:x12; val_offset:320*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x12, 320*FLEN/8, x13, x9, x10)

inst_182:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6b4e0d and fs2 == 1 and fe2 == 0xfd and fm2 == 0x6b4e0d and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7eeb4e0d; op2val:0xfeeb4e0d; 
   valaddr_reg:x12; val_offset:322*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x12, 322*FLEN/8, x13, x9, x10)

inst_183:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6b4e0d and fs2 == 1 and fe2 == 0xfd and fm2 == 0x6b4e0d and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7eeb4e0d; op2val:0xfeeb4e0d; 
   valaddr_reg:x12; val_offset:324*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x12, 324*FLEN/8, x13, x9, x10)

inst_184:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6b4e0d and fs2 == 1 and fe2 == 0xfd and fm2 == 0x6b4e0d and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7eeb4e0d; op2val:0xfeeb4e0d; 
   valaddr_reg:x12; val_offset:326*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x12, 326*FLEN/8, x13, x9, x10)

inst_185:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x36fce6 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x36fce6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7eb6fce6; op2val:0xfeb6fce6; 
   valaddr_reg:x12; val_offset:328*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x12, 328*FLEN/8, x13, x9, x10)

inst_186:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x36fce6 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x36fce6 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7eb6fce6; op2val:0xfeb6fce6; 
   valaddr_reg:x12; val_offset:330*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x12, 330*FLEN/8, x13, x9, x10)

inst_187:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x36fce6 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x36fce6 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7eb6fce6; op2val:0xfeb6fce6; 
   valaddr_reg:x12; val_offset:332*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x12, 332*FLEN/8, x13, x9, x10)

inst_188:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x36fce6 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x36fce6 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7eb6fce6; op2val:0xfeb6fce6; 
   valaddr_reg:x12; val_offset:334*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x12, 334*FLEN/8, x13, x9, x10)

inst_189:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x36fce6 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x36fce6 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7eb6fce6; op2val:0xfeb6fce6; 
   valaddr_reg:x12; val_offset:336*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x12, 336*FLEN/8, x13, x9, x10)

inst_190:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1175bf and fs2 == 1 and fe2 == 0xfe and fm2 == 0x1175bf and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f1175bf; op2val:0xff1175bf; 
   valaddr_reg:x12; val_offset:338*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x12, 338*FLEN/8, x13, x9, x10)

inst_191:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1175bf and fs2 == 1 and fe2 == 0xfe and fm2 == 0x1175bf and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f1175bf; op2val:0xff1175bf; 
   valaddr_reg:x12; val_offset:340*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x12, 340*FLEN/8, x13, x9, x10)

inst_192:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1175bf and fs2 == 1 and fe2 == 0xfe and fm2 == 0x1175bf and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f1175bf; op2val:0xff1175bf; 
   valaddr_reg:x12; val_offset:342*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x12, 342*FLEN/8, x13, x9, x10)

inst_193:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1175bf and fs2 == 1 and fe2 == 0xfe and fm2 == 0x1175bf and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f1175bf; op2val:0xff1175bf; 
   valaddr_reg:x12; val_offset:344*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x12, 344*FLEN/8, x13, x9, x10)

inst_194:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1175bf and fs2 == 1 and fe2 == 0xfe and fm2 == 0x1175bf and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f1175bf; op2val:0xff1175bf; 
   valaddr_reg:x12; val_offset:346*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x12, 346*FLEN/8, x13, x9, x10)

inst_195:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x314a05 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x314a05 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f314a05; op2val:0xff314a05; 
   valaddr_reg:x12; val_offset:348*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x12, 348*FLEN/8, x13, x9, x10)

inst_196:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x314a05 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x314a05 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f314a05; op2val:0xff314a05; 
   valaddr_reg:x12; val_offset:350*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x12, 350*FLEN/8, x13, x9, x10)

inst_197:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x314a05 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x314a05 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f314a05; op2val:0xff314a05; 
   valaddr_reg:x12; val_offset:352*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x12, 352*FLEN/8, x13, x9, x10)

inst_198:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x314a05 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x314a05 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f314a05; op2val:0xff314a05; 
   valaddr_reg:x12; val_offset:354*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x12, 354*FLEN/8, x13, x9, x10)

inst_199:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x314a05 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x314a05 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f314a05; op2val:0xff314a05; 
   valaddr_reg:x12; val_offset:356*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x12, 356*FLEN/8, x13, x9, x10)

inst_200:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c7300 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x2c7300 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f2c7300; op2val:0xff2c7300; 
   valaddr_reg:x12; val_offset:358*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x12, 358*FLEN/8, x13, x9, x10)

inst_201:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c7300 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x2c7300 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f2c7300; op2val:0xff2c7300; 
   valaddr_reg:x12; val_offset:360*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x12, 360*FLEN/8, x13, x9, x10)

inst_202:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c7300 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x2c7300 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f2c7300; op2val:0xff2c7300; 
   valaddr_reg:x12; val_offset:362*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x12, 362*FLEN/8, x13, x9, x10)

inst_203:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c7300 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x2c7300 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f2c7300; op2val:0xff2c7300; 
   valaddr_reg:x12; val_offset:364*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x12, 364*FLEN/8, x13, x9, x10)

inst_204:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c7300 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x2c7300 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f2c7300; op2val:0xff2c7300; 
   valaddr_reg:x12; val_offset:366*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x12, 366*FLEN/8, x13, x9, x10)

inst_205:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4f9722 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x4f9722 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7ecf9722; op2val:0xfecf9722; 
   valaddr_reg:x12; val_offset:368*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x12, 368*FLEN/8, x13, x9, x10)

inst_206:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4f9722 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x4f9722 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7ecf9722; op2val:0xfecf9722; 
   valaddr_reg:x12; val_offset:370*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x12, 370*FLEN/8, x13, x9, x10)

inst_207:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4f9722 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x4f9722 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7ecf9722; op2val:0xfecf9722; 
   valaddr_reg:x12; val_offset:372*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x12, 372*FLEN/8, x13, x9, x10)

inst_208:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4f9722 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x4f9722 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7ecf9722; op2val:0xfecf9722; 
   valaddr_reg:x12; val_offset:374*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x12, 374*FLEN/8, x13, x9, x10)

inst_209:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4f9722 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x4f9722 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7ecf9722; op2val:0xfecf9722; 
   valaddr_reg:x12; val_offset:376*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x12, 376*FLEN/8, x13, x9, x10)

inst_210:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x076a16 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x076a16 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f076a16; op2val:0xff076a16; 
   valaddr_reg:x12; val_offset:378*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x12, 378*FLEN/8, x13, x9, x10)

inst_211:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x076a16 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x076a16 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f076a16; op2val:0xff076a16; 
   valaddr_reg:x12; val_offset:380*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x12, 380*FLEN/8, x13, x9, x10)

inst_212:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x076a16 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x076a16 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f076a16; op2val:0xff076a16; 
   valaddr_reg:x12; val_offset:382*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x12, 382*FLEN/8, x13, x9, x10)

inst_213:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x076a16 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x076a16 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f076a16; op2val:0xff076a16; 
   valaddr_reg:x12; val_offset:384*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x12, 384*FLEN/8, x13, x9, x10)

inst_214:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x076a16 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x076a16 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f076a16; op2val:0xff076a16; 
   valaddr_reg:x12; val_offset:386*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x12, 386*FLEN/8, x13, x9, x10)

inst_215:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1bd52c and fs2 == 1 and fe2 == 0xfe and fm2 == 0x1bd52c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f1bd52c; op2val:0xff1bd52c; 
   valaddr_reg:x12; val_offset:388*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x12, 388*FLEN/8, x13, x9, x10)

inst_216:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1bd52c and fs2 == 1 and fe2 == 0xfe and fm2 == 0x1bd52c and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f1bd52c; op2val:0xff1bd52c; 
   valaddr_reg:x12; val_offset:390*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x12, 390*FLEN/8, x13, x9, x10)

inst_217:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1bd52c and fs2 == 1 and fe2 == 0xfe and fm2 == 0x1bd52c and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f1bd52c; op2val:0xff1bd52c; 
   valaddr_reg:x12; val_offset:392*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x12, 392*FLEN/8, x13, x9, x10)

inst_218:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1bd52c and fs2 == 1 and fe2 == 0xfe and fm2 == 0x1bd52c and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f1bd52c; op2val:0xff1bd52c; 
   valaddr_reg:x12; val_offset:394*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x12, 394*FLEN/8, x13, x9, x10)

inst_219:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1bd52c and fs2 == 1 and fe2 == 0xfe and fm2 == 0x1bd52c and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f1bd52c; op2val:0xff1bd52c; 
   valaddr_reg:x12; val_offset:396*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x12, 396*FLEN/8, x13, x9, x10)

inst_220:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2bd8f4 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x2bd8f4 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f2bd8f4; op2val:0xff2bd8f4; 
   valaddr_reg:x12; val_offset:398*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x12, 398*FLEN/8, x13, x9, x10)

inst_221:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2bd8f4 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x2bd8f4 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f2bd8f4; op2val:0xff2bd8f4; 
   valaddr_reg:x12; val_offset:400*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x12, 400*FLEN/8, x13, x9, x10)

inst_222:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2bd8f4 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x2bd8f4 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f2bd8f4; op2val:0xff2bd8f4; 
   valaddr_reg:x12; val_offset:402*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x12, 402*FLEN/8, x13, x9, x10)

inst_223:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2bd8f4 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x2bd8f4 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f2bd8f4; op2val:0xff2bd8f4; 
   valaddr_reg:x12; val_offset:404*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x12, 404*FLEN/8, x13, x9, x10)

inst_224:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2bd8f4 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x2bd8f4 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f2bd8f4; op2val:0xff2bd8f4; 
   valaddr_reg:x12; val_offset:406*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x12, 406*FLEN/8, x13, x9, x10)

inst_225:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x365ad7 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x365ad7 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f365ad7; op2val:0xff365ad7; 
   valaddr_reg:x12; val_offset:408*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x12, 408*FLEN/8, x13, x9, x10)

inst_226:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x365ad7 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x365ad7 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f365ad7; op2val:0xff365ad7; 
   valaddr_reg:x12; val_offset:410*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x12, 410*FLEN/8, x13, x9, x10)

inst_227:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x365ad7 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x365ad7 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f365ad7; op2val:0xff365ad7; 
   valaddr_reg:x12; val_offset:412*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x12, 412*FLEN/8, x13, x9, x10)

inst_228:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x365ad7 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x365ad7 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f365ad7; op2val:0xff365ad7; 
   valaddr_reg:x12; val_offset:414*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x12, 414*FLEN/8, x13, x9, x10)

inst_229:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x365ad7 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x365ad7 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f365ad7; op2val:0xff365ad7; 
   valaddr_reg:x12; val_offset:416*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x12, 416*FLEN/8, x13, x9, x10)

inst_230:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2d0427 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x2d0427 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7ead0427; op2val:0xfead0427; 
   valaddr_reg:x12; val_offset:418*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x12, 418*FLEN/8, x13, x9, x10)

inst_231:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2d0427 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x2d0427 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7ead0427; op2val:0xfead0427; 
   valaddr_reg:x12; val_offset:420*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x12, 420*FLEN/8, x13, x9, x10)

inst_232:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2d0427 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x2d0427 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7ead0427; op2val:0xfead0427; 
   valaddr_reg:x12; val_offset:422*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x12, 422*FLEN/8, x13, x9, x10)

inst_233:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2d0427 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x2d0427 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7ead0427; op2val:0xfead0427; 
   valaddr_reg:x12; val_offset:424*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x12, 424*FLEN/8, x13, x9, x10)

inst_234:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2d0427 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x2d0427 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7ead0427; op2val:0xfead0427; 
   valaddr_reg:x12; val_offset:426*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x12, 426*FLEN/8, x13, x9, x10)

inst_235:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3f4810 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x3f4810 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f3f4810; op2val:0xff3f4810; 
   valaddr_reg:x12; val_offset:428*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x12, 428*FLEN/8, x13, x9, x10)

inst_236:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3f4810 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x3f4810 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f3f4810; op2val:0xff3f4810; 
   valaddr_reg:x12; val_offset:430*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x12, 430*FLEN/8, x13, x9, x10)

inst_237:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3f4810 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x3f4810 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f3f4810; op2val:0xff3f4810; 
   valaddr_reg:x12; val_offset:432*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x12, 432*FLEN/8, x13, x9, x10)

inst_238:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3f4810 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x3f4810 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f3f4810; op2val:0xff3f4810; 
   valaddr_reg:x12; val_offset:434*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x12, 434*FLEN/8, x13, x9, x10)

inst_239:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3f4810 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x3f4810 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f3f4810; op2val:0xff3f4810; 
   valaddr_reg:x12; val_offset:436*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x12, 436*FLEN/8, x13, x9, x10)

inst_240:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x185183 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x185183 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f185183; op2val:0xff185183; 
   valaddr_reg:x12; val_offset:438*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x12, 438*FLEN/8, x13, x9, x10)

inst_241:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x185183 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x185183 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f185183; op2val:0xff185183; 
   valaddr_reg:x12; val_offset:440*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x12, 440*FLEN/8, x13, x9, x10)

inst_242:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x185183 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x185183 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f185183; op2val:0xff185183; 
   valaddr_reg:x12; val_offset:442*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x12, 442*FLEN/8, x13, x9, x10)

inst_243:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x185183 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x185183 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f185183; op2val:0xff185183; 
   valaddr_reg:x12; val_offset:444*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x12, 444*FLEN/8, x13, x9, x10)

inst_244:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x185183 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x185183 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f185183; op2val:0xff185183; 
   valaddr_reg:x12; val_offset:446*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x12, 446*FLEN/8, x13, x9, x10)

inst_245:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6b4f07 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x6b4f07 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7eeb4f07; op2val:0xfeeb4f07; 
   valaddr_reg:x12; val_offset:448*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x12, 448*FLEN/8, x13, x9, x10)

inst_246:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6b4f07 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x6b4f07 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7eeb4f07; op2val:0xfeeb4f07; 
   valaddr_reg:x12; val_offset:450*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x12, 450*FLEN/8, x13, x9, x10)

inst_247:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6b4f07 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x6b4f07 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7eeb4f07; op2val:0xfeeb4f07; 
   valaddr_reg:x12; val_offset:452*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x12, 452*FLEN/8, x13, x9, x10)

inst_248:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6b4f07 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x6b4f07 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7eeb4f07; op2val:0xfeeb4f07; 
   valaddr_reg:x12; val_offset:454*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x12, 454*FLEN/8, x13, x9, x10)

inst_249:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6b4f07 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x6b4f07 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7eeb4f07; op2val:0xfeeb4f07; 
   valaddr_reg:x12; val_offset:456*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x12, 456*FLEN/8, x13, x9, x10)

inst_250:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x71fa00 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x71fa00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7ef1fa00; op2val:0xfef1fa00; 
   valaddr_reg:x12; val_offset:458*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x12, 458*FLEN/8, x13, x9, x10)

inst_251:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x71fa00 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x71fa00 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7ef1fa00; op2val:0xfef1fa00; 
   valaddr_reg:x12; val_offset:460*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x12, 460*FLEN/8, x13, x9, x10)

inst_252:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x71fa00 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x71fa00 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7ef1fa00; op2val:0xfef1fa00; 
   valaddr_reg:x12; val_offset:462*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x12, 462*FLEN/8, x13, x9, x10)

inst_253:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x71fa00 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x71fa00 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7ef1fa00; op2val:0xfef1fa00; 
   valaddr_reg:x12; val_offset:464*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x12, 464*FLEN/8, x13, x9, x10)

inst_254:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x71fa00 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x71fa00 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7ef1fa00; op2val:0xfef1fa00; 
   valaddr_reg:x12; val_offset:466*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x12, 466*FLEN/8, x13, x9, x10)

inst_255:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3aa6be and fs2 == 1 and fe2 == 0xfc and fm2 == 0x3aa6be and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7e3aa6be; op2val:0xfe3aa6be; 
   valaddr_reg:x12; val_offset:468*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x12, 468*FLEN/8, x13, x9, x10)

inst_256:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3aa6be and fs2 == 1 and fe2 == 0xfc and fm2 == 0x3aa6be and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7e3aa6be; op2val:0xfe3aa6be; 
   valaddr_reg:x12; val_offset:470*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x12, 470*FLEN/8, x13, x9, x10)

inst_257:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3aa6be and fs2 == 1 and fe2 == 0xfc and fm2 == 0x3aa6be and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7e3aa6be; op2val:0xfe3aa6be; 
   valaddr_reg:x12; val_offset:472*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x12, 472*FLEN/8, x13, x9, x10)

inst_258:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3aa6be and fs2 == 1 and fe2 == 0xfc and fm2 == 0x3aa6be and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7e3aa6be; op2val:0xfe3aa6be; 
   valaddr_reg:x12; val_offset:474*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x12, 474*FLEN/8, x13, x9, x10)

inst_259:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3aa6be and fs2 == 1 and fe2 == 0xfc and fm2 == 0x3aa6be and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7e3aa6be; op2val:0xfe3aa6be; 
   valaddr_reg:x12; val_offset:476*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x12, 476*FLEN/8, x13, x9, x10)

inst_260:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x33eb13 and fs2 == 1 and fe2 == 0xfb and fm2 == 0x33eb13 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7db3eb13; op2val:0xfdb3eb13; 
   valaddr_reg:x12; val_offset:478*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x12, 478*FLEN/8, x13, x9, x10)

inst_261:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x33eb13 and fs2 == 1 and fe2 == 0xfb and fm2 == 0x33eb13 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7db3eb13; op2val:0xfdb3eb13; 
   valaddr_reg:x12; val_offset:480*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x12, 480*FLEN/8, x13, x9, x10)

inst_262:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x33eb13 and fs2 == 1 and fe2 == 0xfb and fm2 == 0x33eb13 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7db3eb13; op2val:0xfdb3eb13; 
   valaddr_reg:x12; val_offset:482*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x12, 482*FLEN/8, x13, x9, x10)

inst_263:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x33eb13 and fs2 == 1 and fe2 == 0xfb and fm2 == 0x33eb13 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7db3eb13; op2val:0xfdb3eb13; 
   valaddr_reg:x12; val_offset:484*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x12, 484*FLEN/8, x13, x9, x10)

inst_264:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x33eb13 and fs2 == 1 and fe2 == 0xfb and fm2 == 0x33eb13 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7db3eb13; op2val:0xfdb3eb13; 
   valaddr_reg:x12; val_offset:486*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x12, 486*FLEN/8, x13, x9, x10)

inst_265:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x188f57 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x188f57 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f188f57; op2val:0xff188f57; 
   valaddr_reg:x12; val_offset:488*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x12, 488*FLEN/8, x13, x9, x10)

inst_266:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x188f57 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x188f57 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f188f57; op2val:0xff188f57; 
   valaddr_reg:x12; val_offset:490*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x12, 490*FLEN/8, x13, x9, x10)

inst_267:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x188f57 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x188f57 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f188f57; op2val:0xff188f57; 
   valaddr_reg:x12; val_offset:492*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x12, 492*FLEN/8, x13, x9, x10)

inst_268:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x188f57 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x188f57 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f188f57; op2val:0xff188f57; 
   valaddr_reg:x12; val_offset:494*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x12, 494*FLEN/8, x13, x9, x10)

inst_269:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x188f57 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x188f57 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f188f57; op2val:0xff188f57; 
   valaddr_reg:x12; val_offset:496*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x12, 496*FLEN/8, x13, x9, x10)

inst_270:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ca7c2 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x1ca7c2 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f1ca7c2; op2val:0xff1ca7c2; 
   valaddr_reg:x12; val_offset:498*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x12, 498*FLEN/8, x13, x9, x10)

inst_271:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ca7c2 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x1ca7c2 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f1ca7c2; op2val:0xff1ca7c2; 
   valaddr_reg:x12; val_offset:500*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x12, 500*FLEN/8, x13, x9, x10)

inst_272:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ca7c2 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x1ca7c2 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f1ca7c2; op2val:0xff1ca7c2; 
   valaddr_reg:x12; val_offset:502*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x12, 502*FLEN/8, x13, x9, x10)

inst_273:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ca7c2 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x1ca7c2 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f1ca7c2; op2val:0xff1ca7c2; 
   valaddr_reg:x12; val_offset:504*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x12, 504*FLEN/8, x13, x9, x10)

inst_274:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ca7c2 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x1ca7c2 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f1ca7c2; op2val:0xff1ca7c2; 
   valaddr_reg:x12; val_offset:506*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x12, 506*FLEN/8, x13, x9, x10)

inst_275:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x60ce7f and fs2 == 1 and fe2 == 0xfb and fm2 == 0x60ce7f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7de0ce7f; op2val:0xfde0ce7f; 
   valaddr_reg:x12; val_offset:508*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x12, 508*FLEN/8, x13, x9, x10)

inst_276:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x60ce7f and fs2 == 1 and fe2 == 0xfb and fm2 == 0x60ce7f and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7de0ce7f; op2val:0xfde0ce7f; 
   valaddr_reg:x12; val_offset:510*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x12, 510*FLEN/8, x13, x9, x10)

inst_277:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x60ce7f and fs2 == 1 and fe2 == 0xfb and fm2 == 0x60ce7f and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7de0ce7f; op2val:0xfde0ce7f; 
   valaddr_reg:x12; val_offset:512*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x12, 512*FLEN/8, x13, x9, x10)

inst_278:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x60ce7f and fs2 == 1 and fe2 == 0xfb and fm2 == 0x60ce7f and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7de0ce7f; op2val:0xfde0ce7f; 
   valaddr_reg:x12; val_offset:514*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x12, 514*FLEN/8, x13, x9, x10)

inst_279:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x60ce7f and fs2 == 1 and fe2 == 0xfb and fm2 == 0x60ce7f and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7de0ce7f; op2val:0xfde0ce7f; 
   valaddr_reg:x12; val_offset:516*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x12, 516*FLEN/8, x13, x9, x10)
RVTEST_SIGBASE(x9,signature_x9_2)

inst_280:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0af584 and fs2 == 1 and fe2 == 0xfa and fm2 == 0x0af584 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7d0af584; op2val:0xfd0af584; 
   valaddr_reg:x12; val_offset:518*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x12, 518*FLEN/8, x13, x9, x10)

inst_281:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0af584 and fs2 == 1 and fe2 == 0xfa and fm2 == 0x0af584 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7d0af584; op2val:0xfd0af584; 
   valaddr_reg:x12; val_offset:520*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x12, 520*FLEN/8, x13, x9, x10)

inst_282:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0af584 and fs2 == 1 and fe2 == 0xfa and fm2 == 0x0af584 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7d0af584; op2val:0xfd0af584; 
   valaddr_reg:x12; val_offset:522*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x12, 522*FLEN/8, x13, x9, x10)

inst_283:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0af584 and fs2 == 1 and fe2 == 0xfa and fm2 == 0x0af584 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7d0af584; op2val:0xfd0af584; 
   valaddr_reg:x12; val_offset:524*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x12, 524*FLEN/8, x13, x9, x10)

inst_284:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0af584 and fs2 == 1 and fe2 == 0xfa and fm2 == 0x0af584 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7d0af584; op2val:0xfd0af584; 
   valaddr_reg:x12; val_offset:526*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x12, 526*FLEN/8, x13, x9, x10)

inst_285:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2eb91a and fs2 == 1 and fe2 == 0xfe and fm2 == 0x2eb91a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f2eb91a; op2val:0xff2eb91a; 
   valaddr_reg:x12; val_offset:528*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x12, 528*FLEN/8, x13, x9, x10)

inst_286:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2eb91a and fs2 == 1 and fe2 == 0xfe and fm2 == 0x2eb91a and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f2eb91a; op2val:0xff2eb91a; 
   valaddr_reg:x12; val_offset:530*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x12, 530*FLEN/8, x13, x9, x10)

inst_287:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2eb91a and fs2 == 1 and fe2 == 0xfe and fm2 == 0x2eb91a and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f2eb91a; op2val:0xff2eb91a; 
   valaddr_reg:x12; val_offset:532*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x12, 532*FLEN/8, x13, x9, x10)

inst_288:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2eb91a and fs2 == 1 and fe2 == 0xfe and fm2 == 0x2eb91a and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f2eb91a; op2val:0xff2eb91a; 
   valaddr_reg:x12; val_offset:534*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x12, 534*FLEN/8, x13, x9, x10)

inst_289:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2eb91a and fs2 == 1 and fe2 == 0xfe and fm2 == 0x2eb91a and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f2eb91a; op2val:0xff2eb91a; 
   valaddr_reg:x12; val_offset:536*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x12, 536*FLEN/8, x13, x9, x10)

inst_290:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02ac50 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x02ac50 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f02ac50; op2val:0xff02ac50; 
   valaddr_reg:x12; val_offset:538*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x12, 538*FLEN/8, x13, x9, x10)

inst_291:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02ac50 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x02ac50 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f02ac50; op2val:0xff02ac50; 
   valaddr_reg:x12; val_offset:540*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x12, 540*FLEN/8, x13, x9, x10)

inst_292:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02ac50 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x02ac50 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f02ac50; op2val:0xff02ac50; 
   valaddr_reg:x12; val_offset:542*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x12, 542*FLEN/8, x13, x9, x10)

inst_293:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02ac50 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x02ac50 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f02ac50; op2val:0xff02ac50; 
   valaddr_reg:x12; val_offset:544*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x12, 544*FLEN/8, x13, x9, x10)

inst_294:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02ac50 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x02ac50 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f02ac50; op2val:0xff02ac50; 
   valaddr_reg:x12; val_offset:546*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x12, 546*FLEN/8, x13, x9, x10)

inst_295:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x73d707 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x73d707 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7ef3d707; op2val:0xfef3d707; 
   valaddr_reg:x12; val_offset:548*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x12, 548*FLEN/8, x13, x9, x10)

inst_296:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x73d707 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x73d707 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7ef3d707; op2val:0xfef3d707; 
   valaddr_reg:x12; val_offset:550*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x12, 550*FLEN/8, x13, x9, x10)

inst_297:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x73d707 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x73d707 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7ef3d707; op2val:0xfef3d707; 
   valaddr_reg:x12; val_offset:552*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x12, 552*FLEN/8, x13, x9, x10)

inst_298:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x73d707 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x73d707 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7ef3d707; op2val:0xfef3d707; 
   valaddr_reg:x12; val_offset:554*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x12, 554*FLEN/8, x13, x9, x10)

inst_299:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x73d707 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x73d707 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7ef3d707; op2val:0xfef3d707; 
   valaddr_reg:x12; val_offset:556*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x12, 556*FLEN/8, x13, x9, x10)

inst_300:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5d2a79 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x5d2a79 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7edd2a79; op2val:0xfedd2a79; 
   valaddr_reg:x12; val_offset:558*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x12, 558*FLEN/8, x13, x9, x10)

inst_301:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5d2a79 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x5d2a79 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7edd2a79; op2val:0xfedd2a79; 
   valaddr_reg:x12; val_offset:560*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x12, 560*FLEN/8, x13, x9, x10)

inst_302:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5d2a79 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x5d2a79 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7edd2a79; op2val:0xfedd2a79; 
   valaddr_reg:x12; val_offset:562*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x12, 562*FLEN/8, x13, x9, x10)

inst_303:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5d2a79 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x5d2a79 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7edd2a79; op2val:0xfedd2a79; 
   valaddr_reg:x12; val_offset:564*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x12, 564*FLEN/8, x13, x9, x10)

inst_304:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5d2a79 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x5d2a79 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7edd2a79; op2val:0xfedd2a79; 
   valaddr_reg:x12; val_offset:566*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x12, 566*FLEN/8, x13, x9, x10)

inst_305:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0e223c and fs2 == 1 and fe2 == 0xfd and fm2 == 0x0e223c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7e8e223c; op2val:0xfe8e223c; 
   valaddr_reg:x12; val_offset:568*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x12, 568*FLEN/8, x13, x9, x10)

inst_306:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0e223c and fs2 == 1 and fe2 == 0xfd and fm2 == 0x0e223c and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7e8e223c; op2val:0xfe8e223c; 
   valaddr_reg:x12; val_offset:570*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x12, 570*FLEN/8, x13, x9, x10)

inst_307:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0e223c and fs2 == 1 and fe2 == 0xfd and fm2 == 0x0e223c and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7e8e223c; op2val:0xfe8e223c; 
   valaddr_reg:x12; val_offset:572*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x12, 572*FLEN/8, x13, x9, x10)

inst_308:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0e223c and fs2 == 1 and fe2 == 0xfd and fm2 == 0x0e223c and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7e8e223c; op2val:0xfe8e223c; 
   valaddr_reg:x12; val_offset:574*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x12, 574*FLEN/8, x13, x9, x10)

inst_309:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0e223c and fs2 == 1 and fe2 == 0xfd and fm2 == 0x0e223c and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7e8e223c; op2val:0xfe8e223c; 
   valaddr_reg:x12; val_offset:576*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x12, 576*FLEN/8, x13, x9, x10)

inst_310:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x5f97b9 and fs2 == 1 and fe2 == 0xf9 and fm2 == 0x5f97b9 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7cdf97b9; op2val:0xfcdf97b9; 
   valaddr_reg:x12; val_offset:578*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x12, 578*FLEN/8, x13, x9, x10)

inst_311:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x5f97b9 and fs2 == 1 and fe2 == 0xf9 and fm2 == 0x5f97b9 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7cdf97b9; op2val:0xfcdf97b9; 
   valaddr_reg:x12; val_offset:580*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x12, 580*FLEN/8, x13, x9, x10)

inst_312:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x5f97b9 and fs2 == 1 and fe2 == 0xf9 and fm2 == 0x5f97b9 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7cdf97b9; op2val:0xfcdf97b9; 
   valaddr_reg:x12; val_offset:582*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x12, 582*FLEN/8, x13, x9, x10)

inst_313:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x5f97b9 and fs2 == 1 and fe2 == 0xf9 and fm2 == 0x5f97b9 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7cdf97b9; op2val:0xfcdf97b9; 
   valaddr_reg:x12; val_offset:584*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x12, 584*FLEN/8, x13, x9, x10)

inst_314:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x5f97b9 and fs2 == 1 and fe2 == 0xf9 and fm2 == 0x5f97b9 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7cdf97b9; op2val:0xfcdf97b9; 
   valaddr_reg:x12; val_offset:586*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x12, 586*FLEN/8, x13, x9, x10)

inst_315:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x38849b and fs2 == 1 and fe2 == 0xfe and fm2 == 0x38849b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f38849b; op2val:0xff38849b; 
   valaddr_reg:x12; val_offset:588*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x12, 588*FLEN/8, x13, x9, x10)

inst_316:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x38849b and fs2 == 1 and fe2 == 0xfe and fm2 == 0x38849b and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f38849b; op2val:0xff38849b; 
   valaddr_reg:x12; val_offset:590*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x12, 590*FLEN/8, x13, x9, x10)

inst_317:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x38849b and fs2 == 1 and fe2 == 0xfe and fm2 == 0x38849b and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f38849b; op2val:0xff38849b; 
   valaddr_reg:x12; val_offset:592*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x12, 592*FLEN/8, x13, x9, x10)

inst_318:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x38849b and fs2 == 1 and fe2 == 0xfe and fm2 == 0x38849b and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f38849b; op2val:0xff38849b; 
   valaddr_reg:x12; val_offset:594*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x12, 594*FLEN/8, x13, x9, x10)

inst_319:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x38849b and fs2 == 1 and fe2 == 0xfe and fm2 == 0x38849b and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f38849b; op2val:0xff38849b; 
   valaddr_reg:x12; val_offset:596*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x12, 596*FLEN/8, x13, x9, x10)

inst_320:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3e4d8f and fs2 == 1 and fe2 == 0xfb and fm2 == 0x3e4d8f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7dbe4d8f; op2val:0xfdbe4d8f; 
   valaddr_reg:x12; val_offset:598*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x12, 598*FLEN/8, x13, x9, x10)

inst_321:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3e4d8f and fs2 == 1 and fe2 == 0xfb and fm2 == 0x3e4d8f and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7dbe4d8f; op2val:0xfdbe4d8f; 
   valaddr_reg:x12; val_offset:600*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x12, 600*FLEN/8, x13, x9, x10)

inst_322:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3e4d8f and fs2 == 1 and fe2 == 0xfb and fm2 == 0x3e4d8f and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7dbe4d8f; op2val:0xfdbe4d8f; 
   valaddr_reg:x12; val_offset:602*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x12, 602*FLEN/8, x13, x9, x10)

inst_323:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3e4d8f and fs2 == 1 and fe2 == 0xfb and fm2 == 0x3e4d8f and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7dbe4d8f; op2val:0xfdbe4d8f; 
   valaddr_reg:x12; val_offset:604*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x12, 604*FLEN/8, x13, x9, x10)

inst_324:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3e4d8f and fs2 == 1 and fe2 == 0xfb and fm2 == 0x3e4d8f and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7dbe4d8f; op2val:0xfdbe4d8f; 
   valaddr_reg:x12; val_offset:606*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x12, 606*FLEN/8, x13, x9, x10)

inst_325:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x19be4b and fs2 == 1 and fe2 == 0xfe and fm2 == 0x19be4b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f19be4b; op2val:0xff19be4b; 
   valaddr_reg:x12; val_offset:608*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x12, 608*FLEN/8, x13, x9, x10)

inst_326:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x19be4b and fs2 == 1 and fe2 == 0xfe and fm2 == 0x19be4b and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f19be4b; op2val:0xff19be4b; 
   valaddr_reg:x12; val_offset:610*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x12, 610*FLEN/8, x13, x9, x10)

inst_327:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x19be4b and fs2 == 1 and fe2 == 0xfe and fm2 == 0x19be4b and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f19be4b; op2val:0xff19be4b; 
   valaddr_reg:x12; val_offset:612*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x12, 612*FLEN/8, x13, x9, x10)

inst_328:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x19be4b and fs2 == 1 and fe2 == 0xfe and fm2 == 0x19be4b and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f19be4b; op2val:0xff19be4b; 
   valaddr_reg:x12; val_offset:614*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x12, 614*FLEN/8, x13, x9, x10)

inst_329:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x19be4b and fs2 == 1 and fe2 == 0xfe and fm2 == 0x19be4b and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f19be4b; op2val:0xff19be4b; 
   valaddr_reg:x12; val_offset:616*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x12, 616*FLEN/8, x13, x9, x10)

inst_330:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x0bf9e4 and fs2 == 1 and fe2 == 0xf9 and fm2 == 0x0bf9e4 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7c8bf9e4; op2val:0xfc8bf9e4; 
   valaddr_reg:x12; val_offset:618*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x12, 618*FLEN/8, x13, x9, x10)

inst_331:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x0bf9e4 and fs2 == 1 and fe2 == 0xf9 and fm2 == 0x0bf9e4 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7c8bf9e4; op2val:0xfc8bf9e4; 
   valaddr_reg:x12; val_offset:620*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x12, 620*FLEN/8, x13, x9, x10)

inst_332:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x0bf9e4 and fs2 == 1 and fe2 == 0xf9 and fm2 == 0x0bf9e4 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7c8bf9e4; op2val:0xfc8bf9e4; 
   valaddr_reg:x12; val_offset:622*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x12, 622*FLEN/8, x13, x9, x10)

inst_333:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x0bf9e4 and fs2 == 1 and fe2 == 0xf9 and fm2 == 0x0bf9e4 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7c8bf9e4; op2val:0xfc8bf9e4; 
   valaddr_reg:x12; val_offset:624*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x12, 624*FLEN/8, x13, x9, x10)

inst_334:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x0bf9e4 and fs2 == 1 and fe2 == 0xf9 and fm2 == 0x0bf9e4 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7c8bf9e4; op2val:0xfc8bf9e4; 
   valaddr_reg:x12; val_offset:626*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x12, 626*FLEN/8, x13, x9, x10)

inst_335:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x1be782 and fs2 == 1 and fe2 == 0xfb and fm2 == 0x1be782 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7d9be782; op2val:0xfd9be782; 
   valaddr_reg:x12; val_offset:628*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x12, 628*FLEN/8, x13, x9, x10)

inst_336:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x1be782 and fs2 == 1 and fe2 == 0xfb and fm2 == 0x1be782 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7d9be782; op2val:0xfd9be782; 
   valaddr_reg:x12; val_offset:630*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x12, 630*FLEN/8, x13, x9, x10)

inst_337:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x1be782 and fs2 == 1 and fe2 == 0xfb and fm2 == 0x1be782 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7d9be782; op2val:0xfd9be782; 
   valaddr_reg:x12; val_offset:632*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x12, 632*FLEN/8, x13, x9, x10)

inst_338:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x1be782 and fs2 == 1 and fe2 == 0xfb and fm2 == 0x1be782 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7d9be782; op2val:0xfd9be782; 
   valaddr_reg:x12; val_offset:634*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x12, 634*FLEN/8, x13, x9, x10)

inst_339:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x1be782 and fs2 == 1 and fe2 == 0xfb and fm2 == 0x1be782 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7d9be782; op2val:0xfd9be782; 
   valaddr_reg:x12; val_offset:636*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x12, 636*FLEN/8, x13, x9, x10)

inst_340:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2998cc and fs2 == 1 and fe2 == 0xfc and fm2 == 0x2998cc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7e2998cc; op2val:0xfe2998cc; 
   valaddr_reg:x12; val_offset:638*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x12, 638*FLEN/8, x13, x9, x10)

inst_341:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2998cc and fs2 == 1 and fe2 == 0xfc and fm2 == 0x2998cc and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7e2998cc; op2val:0xfe2998cc; 
   valaddr_reg:x12; val_offset:640*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x12, 640*FLEN/8, x13, x9, x10)

inst_342:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2998cc and fs2 == 1 and fe2 == 0xfc and fm2 == 0x2998cc and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7e2998cc; op2val:0xfe2998cc; 
   valaddr_reg:x12; val_offset:642*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x12, 642*FLEN/8, x13, x9, x10)

inst_343:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2998cc and fs2 == 1 and fe2 == 0xfc and fm2 == 0x2998cc and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7e2998cc; op2val:0xfe2998cc; 
   valaddr_reg:x12; val_offset:644*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x12, 644*FLEN/8, x13, x9, x10)

inst_344:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2998cc and fs2 == 1 and fe2 == 0xfc and fm2 == 0x2998cc and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7e2998cc; op2val:0xfe2998cc; 
   valaddr_reg:x12; val_offset:646*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x12, 646*FLEN/8, x13, x9, x10)

inst_345:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x06834b and fs2 == 1 and fe2 == 0xfd and fm2 == 0x06834b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7e86834b; op2val:0xfe86834b; 
   valaddr_reg:x12; val_offset:648*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x12, 648*FLEN/8, x13, x9, x10)

inst_346:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x06834b and fs2 == 1 and fe2 == 0xfd and fm2 == 0x06834b and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7e86834b; op2val:0xfe86834b; 
   valaddr_reg:x12; val_offset:650*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x12, 650*FLEN/8, x13, x9, x10)

inst_347:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x06834b and fs2 == 1 and fe2 == 0xfd and fm2 == 0x06834b and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7e86834b; op2val:0xfe86834b; 
   valaddr_reg:x12; val_offset:652*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x12, 652*FLEN/8, x13, x9, x10)

inst_348:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x06834b and fs2 == 1 and fe2 == 0xfd and fm2 == 0x06834b and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7e86834b; op2val:0xfe86834b; 
   valaddr_reg:x12; val_offset:654*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x12, 654*FLEN/8, x13, x9, x10)

inst_349:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x06834b and fs2 == 1 and fe2 == 0xfd and fm2 == 0x06834b and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7e86834b; op2val:0xfe86834b; 
   valaddr_reg:x12; val_offset:656*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x12, 656*FLEN/8, x13, x9, x10)

inst_350:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x41657b and fs2 == 1 and fe2 == 0xfd and fm2 == 0x41657b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7ec1657b; op2val:0xfec1657b; 
   valaddr_reg:x12; val_offset:658*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x12, 658*FLEN/8, x13, x9, x10)

inst_351:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x41657b and fs2 == 1 and fe2 == 0xfd and fm2 == 0x41657b and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7ec1657b; op2val:0xfec1657b; 
   valaddr_reg:x12; val_offset:660*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x12, 660*FLEN/8, x13, x9, x10)

inst_352:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x41657b and fs2 == 1 and fe2 == 0xfd and fm2 == 0x41657b and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7ec1657b; op2val:0xfec1657b; 
   valaddr_reg:x12; val_offset:662*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x12, 662*FLEN/8, x13, x9, x10)

inst_353:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x41657b and fs2 == 1 and fe2 == 0xfd and fm2 == 0x41657b and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7ec1657b; op2val:0xfec1657b; 
   valaddr_reg:x12; val_offset:664*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x12, 664*FLEN/8, x13, x9, x10)

inst_354:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x41657b and fs2 == 1 and fe2 == 0xfd and fm2 == 0x41657b and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7ec1657b; op2val:0xfec1657b; 
   valaddr_reg:x12; val_offset:666*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x12, 666*FLEN/8, x13, x9, x10)

inst_355:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x1b03d8 and fs2 == 1 and fe2 == 0xfb and fm2 == 0x1b03d8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7d9b03d8; op2val:0xfd9b03d8; 
   valaddr_reg:x12; val_offset:668*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x12, 668*FLEN/8, x13, x9, x10)

inst_356:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x1b03d8 and fs2 == 1 and fe2 == 0xfb and fm2 == 0x1b03d8 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7d9b03d8; op2val:0xfd9b03d8; 
   valaddr_reg:x12; val_offset:670*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x12, 670*FLEN/8, x13, x9, x10)

inst_357:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x1b03d8 and fs2 == 1 and fe2 == 0xfb and fm2 == 0x1b03d8 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7d9b03d8; op2val:0xfd9b03d8; 
   valaddr_reg:x12; val_offset:672*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x12, 672*FLEN/8, x13, x9, x10)

inst_358:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x1b03d8 and fs2 == 1 and fe2 == 0xfb and fm2 == 0x1b03d8 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7d9b03d8; op2val:0xfd9b03d8; 
   valaddr_reg:x12; val_offset:674*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x12, 674*FLEN/8, x13, x9, x10)

inst_359:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x1b03d8 and fs2 == 1 and fe2 == 0xfb and fm2 == 0x1b03d8 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7d9b03d8; op2val:0xfd9b03d8; 
   valaddr_reg:x12; val_offset:676*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x12, 676*FLEN/8, x13, x9, x10)

inst_360:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x191af1 and fs2 == 1 and fe2 == 0xfc and fm2 == 0x191af1 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7e191af1; op2val:0xfe191af1; 
   valaddr_reg:x12; val_offset:678*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x12, 678*FLEN/8, x13, x9, x10)

inst_361:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x191af1 and fs2 == 1 and fe2 == 0xfc and fm2 == 0x191af1 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7e191af1; op2val:0xfe191af1; 
   valaddr_reg:x12; val_offset:680*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x12, 680*FLEN/8, x13, x9, x10)

inst_362:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x191af1 and fs2 == 1 and fe2 == 0xfc and fm2 == 0x191af1 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7e191af1; op2val:0xfe191af1; 
   valaddr_reg:x12; val_offset:682*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x12, 682*FLEN/8, x13, x9, x10)

inst_363:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x191af1 and fs2 == 1 and fe2 == 0xfc and fm2 == 0x191af1 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7e191af1; op2val:0xfe191af1; 
   valaddr_reg:x12; val_offset:684*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x12, 684*FLEN/8, x13, x9, x10)

inst_364:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x191af1 and fs2 == 1 and fe2 == 0xfc and fm2 == 0x191af1 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7e191af1; op2val:0xfe191af1; 
   valaddr_reg:x12; val_offset:686*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x12, 686*FLEN/8, x13, x9, x10)

inst_365:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0c7784 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x0c7784 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f0c7784; op2val:0xff0c7784; 
   valaddr_reg:x12; val_offset:688*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x12, 688*FLEN/8, x13, x9, x10)

inst_366:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0c7784 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x0c7784 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f0c7784; op2val:0xff0c7784; 
   valaddr_reg:x12; val_offset:690*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x12, 690*FLEN/8, x13, x9, x10)

inst_367:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0c7784 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x0c7784 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f0c7784; op2val:0xff0c7784; 
   valaddr_reg:x12; val_offset:692*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x12, 692*FLEN/8, x13, x9, x10)

inst_368:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0c7784 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x0c7784 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f0c7784; op2val:0xff0c7784; 
   valaddr_reg:x12; val_offset:694*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x12, 694*FLEN/8, x13, x9, x10)

inst_369:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0c7784 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x0c7784 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f0c7784; op2val:0xff0c7784; 
   valaddr_reg:x12; val_offset:696*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x12, 696*FLEN/8, x13, x9, x10)

inst_370:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30593a and fs2 == 1 and fe2 == 0xfe and fm2 == 0x30593a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f30593a; op2val:0xff30593a; 
   valaddr_reg:x12; val_offset:698*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x12, 698*FLEN/8, x13, x9, x10)

inst_371:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30593a and fs2 == 1 and fe2 == 0xfe and fm2 == 0x30593a and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f30593a; op2val:0xff30593a; 
   valaddr_reg:x12; val_offset:700*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x12, 700*FLEN/8, x13, x9, x10)

inst_372:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30593a and fs2 == 1 and fe2 == 0xfe and fm2 == 0x30593a and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f30593a; op2val:0xff30593a; 
   valaddr_reg:x12; val_offset:702*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x12, 702*FLEN/8, x13, x9, x10)

inst_373:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30593a and fs2 == 1 and fe2 == 0xfe and fm2 == 0x30593a and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f30593a; op2val:0xff30593a; 
   valaddr_reg:x12; val_offset:704*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x12, 704*FLEN/8, x13, x9, x10)

inst_374:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30593a and fs2 == 1 and fe2 == 0xfe and fm2 == 0x30593a and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f30593a; op2val:0xff30593a; 
   valaddr_reg:x12; val_offset:706*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x12, 706*FLEN/8, x13, x9, x10)

inst_375:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0125a0 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x0125a0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f0125a0; op2val:0xff0125a0; 
   valaddr_reg:x12; val_offset:708*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x12, 708*FLEN/8, x13, x9, x10)

inst_376:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0125a0 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x0125a0 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f0125a0; op2val:0xff0125a0; 
   valaddr_reg:x12; val_offset:710*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x12, 710*FLEN/8, x13, x9, x10)

inst_377:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0125a0 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x0125a0 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f0125a0; op2val:0xff0125a0; 
   valaddr_reg:x12; val_offset:712*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x12, 712*FLEN/8, x13, x9, x10)

inst_378:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0125a0 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x0125a0 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f0125a0; op2val:0xff0125a0; 
   valaddr_reg:x12; val_offset:714*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x12, 714*FLEN/8, x13, x9, x10)

inst_379:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0125a0 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x0125a0 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f0125a0; op2val:0xff0125a0; 
   valaddr_reg:x12; val_offset:716*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x12, 716*FLEN/8, x13, x9, x10)

inst_380:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x32551e and fs2 == 1 and fe2 == 0xfa and fm2 == 0x32551e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7d32551e; op2val:0xfd32551e; 
   valaddr_reg:x12; val_offset:718*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x12, 718*FLEN/8, x13, x9, x10)

inst_381:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x32551e and fs2 == 1 and fe2 == 0xfa and fm2 == 0x32551e and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7d32551e; op2val:0xfd32551e; 
   valaddr_reg:x12; val_offset:720*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x12, 720*FLEN/8, x13, x9, x10)

inst_382:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x32551e and fs2 == 1 and fe2 == 0xfa and fm2 == 0x32551e and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7d32551e; op2val:0xfd32551e; 
   valaddr_reg:x12; val_offset:722*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x12, 722*FLEN/8, x13, x9, x10)

inst_383:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x32551e and fs2 == 1 and fe2 == 0xfa and fm2 == 0x32551e and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7d32551e; op2val:0xfd32551e; 
   valaddr_reg:x12; val_offset:724*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x12, 724*FLEN/8, x13, x9, x10)

inst_384:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x32551e and fs2 == 1 and fe2 == 0xfa and fm2 == 0x32551e and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7d32551e; op2val:0xfd32551e; 
   valaddr_reg:x12; val_offset:726*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x12, 726*FLEN/8, x13, x9, x10)

inst_385:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x22524e and fs2 == 1 and fe2 == 0xfe and fm2 == 0x22524e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f22524e; op2val:0xff22524e; 
   valaddr_reg:x12; val_offset:728*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x12, 728*FLEN/8, x13, x9, x10)

inst_386:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x22524e and fs2 == 1 and fe2 == 0xfe and fm2 == 0x22524e and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f22524e; op2val:0xff22524e; 
   valaddr_reg:x12; val_offset:730*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x12, 730*FLEN/8, x13, x9, x10)

inst_387:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x22524e and fs2 == 1 and fe2 == 0xfe and fm2 == 0x22524e and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f22524e; op2val:0xff22524e; 
   valaddr_reg:x12; val_offset:732*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x12, 732*FLEN/8, x13, x9, x10)

inst_388:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x22524e and fs2 == 1 and fe2 == 0xfe and fm2 == 0x22524e and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f22524e; op2val:0xff22524e; 
   valaddr_reg:x12; val_offset:734*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x12, 734*FLEN/8, x13, x9, x10)

inst_389:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x22524e and fs2 == 1 and fe2 == 0xfe and fm2 == 0x22524e and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f22524e; op2val:0xff22524e; 
   valaddr_reg:x12; val_offset:736*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x12, 736*FLEN/8, x13, x9, x10)

inst_390:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x408722 and fs2 == 1 and fe2 == 0xfc and fm2 == 0x408722 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7e408722; op2val:0xfe408722; 
   valaddr_reg:x12; val_offset:738*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x12, 738*FLEN/8, x13, x9, x10)

inst_391:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x408722 and fs2 == 1 and fe2 == 0xfc and fm2 == 0x408722 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7e408722; op2val:0xfe408722; 
   valaddr_reg:x12; val_offset:740*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x12, 740*FLEN/8, x13, x9, x10)

inst_392:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x408722 and fs2 == 1 and fe2 == 0xfc and fm2 == 0x408722 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7e408722; op2val:0xfe408722; 
   valaddr_reg:x12; val_offset:742*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x12, 742*FLEN/8, x13, x9, x10)

inst_393:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x408722 and fs2 == 1 and fe2 == 0xfc and fm2 == 0x408722 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7e408722; op2val:0xfe408722; 
   valaddr_reg:x12; val_offset:744*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x12, 744*FLEN/8, x13, x9, x10)

inst_394:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x408722 and fs2 == 1 and fe2 == 0xfc and fm2 == 0x408722 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7e408722; op2val:0xfe408722; 
   valaddr_reg:x12; val_offset:746*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x12, 746*FLEN/8, x13, x9, x10)

inst_395:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x29d93c and fs2 == 1 and fe2 == 0xfd and fm2 == 0x29d93c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7ea9d93c; op2val:0xfea9d93c; 
   valaddr_reg:x12; val_offset:748*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x12, 748*FLEN/8, x13, x9, x10)

inst_396:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x29d93c and fs2 == 1 and fe2 == 0xfd and fm2 == 0x29d93c and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7ea9d93c; op2val:0xfea9d93c; 
   valaddr_reg:x12; val_offset:750*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x12, 750*FLEN/8, x13, x9, x10)

inst_397:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x29d93c and fs2 == 1 and fe2 == 0xfd and fm2 == 0x29d93c and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7ea9d93c; op2val:0xfea9d93c; 
   valaddr_reg:x12; val_offset:752*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x12, 752*FLEN/8, x13, x9, x10)

inst_398:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x29d93c and fs2 == 1 and fe2 == 0xfd and fm2 == 0x29d93c and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7ea9d93c; op2val:0xfea9d93c; 
   valaddr_reg:x12; val_offset:754*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x12, 754*FLEN/8, x13, x9, x10)

inst_399:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x29d93c and fs2 == 1 and fe2 == 0xfd and fm2 == 0x29d93c and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7ea9d93c; op2val:0xfea9d93c; 
   valaddr_reg:x12; val_offset:756*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x12, 756*FLEN/8, x13, x9, x10)

inst_400:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x351aa9 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x351aa9 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7eb51aa9; op2val:0xfeb51aa9; 
   valaddr_reg:x12; val_offset:758*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x12, 758*FLEN/8, x13, x9, x10)

inst_401:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x351aa9 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x351aa9 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7eb51aa9; op2val:0xfeb51aa9; 
   valaddr_reg:x12; val_offset:760*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x12, 760*FLEN/8, x13, x9, x10)

inst_402:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x351aa9 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x351aa9 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7eb51aa9; op2val:0xfeb51aa9; 
   valaddr_reg:x12; val_offset:762*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x12, 762*FLEN/8, x13, x9, x10)

inst_403:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x351aa9 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x351aa9 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7eb51aa9; op2val:0xfeb51aa9; 
   valaddr_reg:x12; val_offset:764*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x12, 764*FLEN/8, x13, x9, x10)

inst_404:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x351aa9 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x351aa9 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7eb51aa9; op2val:0xfeb51aa9; 
   valaddr_reg:x12; val_offset:766*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x12, 766*FLEN/8, x13, x9, x10)

inst_405:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5a8a0e and fs2 == 1 and fe2 == 0xfd and fm2 == 0x5a8a0e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7eda8a0e; op2val:0xfeda8a0e; 
   valaddr_reg:x12; val_offset:768*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x12, 768*FLEN/8, x13, x9, x10)

inst_406:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5a8a0e and fs2 == 1 and fe2 == 0xfd and fm2 == 0x5a8a0e and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7eda8a0e; op2val:0xfeda8a0e; 
   valaddr_reg:x12; val_offset:770*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x12, 770*FLEN/8, x13, x9, x10)

inst_407:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5a8a0e and fs2 == 1 and fe2 == 0xfd and fm2 == 0x5a8a0e and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7eda8a0e; op2val:0xfeda8a0e; 
   valaddr_reg:x12; val_offset:772*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x12, 772*FLEN/8, x13, x9, x10)
RVTEST_SIGBASE(x9,signature_x9_3)

inst_408:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5a8a0e and fs2 == 1 and fe2 == 0xfd and fm2 == 0x5a8a0e and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7eda8a0e; op2val:0xfeda8a0e; 
   valaddr_reg:x12; val_offset:774*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x12, 774*FLEN/8, x13, x9, x10)

inst_409:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5a8a0e and fs2 == 1 and fe2 == 0xfd and fm2 == 0x5a8a0e and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7eda8a0e; op2val:0xfeda8a0e; 
   valaddr_reg:x12; val_offset:776*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x12, 776*FLEN/8, x13, x9, x10)

inst_410:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6f30c5 and fs2 == 1 and fe2 == 0xfc and fm2 == 0x6f30c5 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7e6f30c5; op2val:0xfe6f30c5; 
   valaddr_reg:x12; val_offset:778*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x12, 778*FLEN/8, x13, x9, x10)

inst_411:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6f30c5 and fs2 == 1 and fe2 == 0xfc and fm2 == 0x6f30c5 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7e6f30c5; op2val:0xfe6f30c5; 
   valaddr_reg:x12; val_offset:780*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x12, 780*FLEN/8, x13, x9, x10)

inst_412:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6f30c5 and fs2 == 1 and fe2 == 0xfc and fm2 == 0x6f30c5 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7e6f30c5; op2val:0xfe6f30c5; 
   valaddr_reg:x12; val_offset:782*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x12, 782*FLEN/8, x13, x9, x10)

inst_413:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6f30c5 and fs2 == 1 and fe2 == 0xfc and fm2 == 0x6f30c5 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7e6f30c5; op2val:0xfe6f30c5; 
   valaddr_reg:x12; val_offset:784*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x12, 784*FLEN/8, x13, x9, x10)

inst_414:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6f30c5 and fs2 == 1 and fe2 == 0xfc and fm2 == 0x6f30c5 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7e6f30c5; op2val:0xfe6f30c5; 
   valaddr_reg:x12; val_offset:786*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x12, 786*FLEN/8, x13, x9, x10)

inst_415:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20d4b8 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x20d4b8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f20d4b8; op2val:0xff20d4b8; 
   valaddr_reg:x12; val_offset:788*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x12, 788*FLEN/8, x13, x9, x10)

inst_416:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20d4b8 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x20d4b8 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f20d4b8; op2val:0xff20d4b8; 
   valaddr_reg:x12; val_offset:790*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x12, 790*FLEN/8, x13, x9, x10)

inst_417:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20d4b8 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x20d4b8 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f20d4b8; op2val:0xff20d4b8; 
   valaddr_reg:x12; val_offset:792*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x12, 792*FLEN/8, x13, x9, x10)

inst_418:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20d4b8 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x20d4b8 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f20d4b8; op2val:0xff20d4b8; 
   valaddr_reg:x12; val_offset:794*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x12, 794*FLEN/8, x13, x9, x10)

inst_419:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20d4b8 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x20d4b8 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f20d4b8; op2val:0xff20d4b8; 
   valaddr_reg:x12; val_offset:796*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x12, 796*FLEN/8, x13, x9, x10)

inst_420:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x57453d and fs2 == 1 and fe2 == 0xfd and fm2 == 0x57453d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7ed7453d; op2val:0xfed7453d; 
   valaddr_reg:x12; val_offset:798*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x12, 798*FLEN/8, x13, x9, x10)

inst_421:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x57453d and fs2 == 1 and fe2 == 0xfd and fm2 == 0x57453d and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7ed7453d; op2val:0xfed7453d; 
   valaddr_reg:x12; val_offset:800*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x12, 800*FLEN/8, x13, x9, x10)

inst_422:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x57453d and fs2 == 1 and fe2 == 0xfd and fm2 == 0x57453d and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7ed7453d; op2val:0xfed7453d; 
   valaddr_reg:x12; val_offset:802*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x12, 802*FLEN/8, x13, x9, x10)

inst_423:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x57453d and fs2 == 1 and fe2 == 0xfd and fm2 == 0x57453d and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7ed7453d; op2val:0xfed7453d; 
   valaddr_reg:x12; val_offset:804*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x12, 804*FLEN/8, x13, x9, x10)

inst_424:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x57453d and fs2 == 1 and fe2 == 0xfd and fm2 == 0x57453d and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7ed7453d; op2val:0xfed7453d; 
   valaddr_reg:x12; val_offset:806*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x12, 806*FLEN/8, x13, x9, x10)

inst_425:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0e61dc and fs2 == 1 and fe2 == 0xfe and fm2 == 0x0e61dc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f0e61dc; op2val:0xff0e61dc; 
   valaddr_reg:x12; val_offset:808*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x12, 808*FLEN/8, x13, x9, x10)

inst_426:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0e61dc and fs2 == 1 and fe2 == 0xfe and fm2 == 0x0e61dc and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f0e61dc; op2val:0xff0e61dc; 
   valaddr_reg:x12; val_offset:810*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x12, 810*FLEN/8, x13, x9, x10)

inst_427:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0e61dc and fs2 == 1 and fe2 == 0xfe and fm2 == 0x0e61dc and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f0e61dc; op2val:0xff0e61dc; 
   valaddr_reg:x12; val_offset:812*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x12, 812*FLEN/8, x13, x9, x10)

inst_428:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0e61dc and fs2 == 1 and fe2 == 0xfe and fm2 == 0x0e61dc and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f0e61dc; op2val:0xff0e61dc; 
   valaddr_reg:x12; val_offset:814*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x12, 814*FLEN/8, x13, x9, x10)

inst_429:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0e61dc and fs2 == 1 and fe2 == 0xfe and fm2 == 0x0e61dc and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f0e61dc; op2val:0xff0e61dc; 
   valaddr_reg:x12; val_offset:816*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x12, 816*FLEN/8, x13, x9, x10)

inst_430:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0c612e and fs2 == 1 and fe2 == 0xfa and fm2 == 0x0c612e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7d0c612e; op2val:0xfd0c612e; 
   valaddr_reg:x12; val_offset:818*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x12, 818*FLEN/8, x13, x9, x10)

inst_431:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0c612e and fs2 == 1 and fe2 == 0xfa and fm2 == 0x0c612e and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7d0c612e; op2val:0xfd0c612e; 
   valaddr_reg:x12; val_offset:820*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x12, 820*FLEN/8, x13, x9, x10)

inst_432:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0c612e and fs2 == 1 and fe2 == 0xfa and fm2 == 0x0c612e and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7d0c612e; op2val:0xfd0c612e; 
   valaddr_reg:x12; val_offset:822*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x12, 822*FLEN/8, x13, x9, x10)

inst_433:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0c612e and fs2 == 1 and fe2 == 0xfa and fm2 == 0x0c612e and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7d0c612e; op2val:0xfd0c612e; 
   valaddr_reg:x12; val_offset:824*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x12, 824*FLEN/8, x13, x9, x10)

inst_434:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0c612e and fs2 == 1 and fe2 == 0xfa and fm2 == 0x0c612e and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7d0c612e; op2val:0xfd0c612e; 
   valaddr_reg:x12; val_offset:826*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x12, 826*FLEN/8, x13, x9, x10)

inst_435:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x386b8e and fs2 == 1 and fe2 == 0xfc and fm2 == 0x386b8e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7e386b8e; op2val:0xfe386b8e; 
   valaddr_reg:x12; val_offset:828*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x12, 828*FLEN/8, x13, x9, x10)

inst_436:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x386b8e and fs2 == 1 and fe2 == 0xfc and fm2 == 0x386b8e and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7e386b8e; op2val:0xfe386b8e; 
   valaddr_reg:x12; val_offset:830*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x12, 830*FLEN/8, x13, x9, x10)

inst_437:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x386b8e and fs2 == 1 and fe2 == 0xfc and fm2 == 0x386b8e and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7e386b8e; op2val:0xfe386b8e; 
   valaddr_reg:x12; val_offset:832*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x12, 832*FLEN/8, x13, x9, x10)

inst_438:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x386b8e and fs2 == 1 and fe2 == 0xfc and fm2 == 0x386b8e and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7e386b8e; op2val:0xfe386b8e; 
   valaddr_reg:x12; val_offset:834*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x12, 834*FLEN/8, x13, x9, x10)

inst_439:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x386b8e and fs2 == 1 and fe2 == 0xfc and fm2 == 0x386b8e and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7e386b8e; op2val:0xfe386b8e; 
   valaddr_reg:x12; val_offset:836*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x12, 836*FLEN/8, x13, x9, x10)

inst_440:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x07412e and fs2 == 1 and fe2 == 0xfd and fm2 == 0x07412e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7e87412e; op2val:0xfe87412e; 
   valaddr_reg:x12; val_offset:838*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x12, 838*FLEN/8, x13, x9, x10)

inst_441:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x07412e and fs2 == 1 and fe2 == 0xfd and fm2 == 0x07412e and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7e87412e; op2val:0xfe87412e; 
   valaddr_reg:x12; val_offset:840*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x12, 840*FLEN/8, x13, x9, x10)

inst_442:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x07412e and fs2 == 1 and fe2 == 0xfd and fm2 == 0x07412e and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7e87412e; op2val:0xfe87412e; 
   valaddr_reg:x12; val_offset:842*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x12, 842*FLEN/8, x13, x9, x10)

inst_443:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x07412e and fs2 == 1 and fe2 == 0xfd and fm2 == 0x07412e and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7e87412e; op2val:0xfe87412e; 
   valaddr_reg:x12; val_offset:844*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x12, 844*FLEN/8, x13, x9, x10)

inst_444:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x07412e and fs2 == 1 and fe2 == 0xfd and fm2 == 0x07412e and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7e87412e; op2val:0xfe87412e; 
   valaddr_reg:x12; val_offset:846*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x12, 846*FLEN/8, x13, x9, x10)

inst_445:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x09eee9 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x09eee9 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7e89eee9; op2val:0xfe89eee9; 
   valaddr_reg:x12; val_offset:848*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x12, 848*FLEN/8, x13, x9, x10)

inst_446:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x09eee9 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x09eee9 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7e89eee9; op2val:0xfe89eee9; 
   valaddr_reg:x12; val_offset:850*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x12, 850*FLEN/8, x13, x9, x10)

inst_447:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x09eee9 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x09eee9 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7e89eee9; op2val:0xfe89eee9; 
   valaddr_reg:x12; val_offset:852*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x12, 852*FLEN/8, x13, x9, x10)

inst_448:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x09eee9 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x09eee9 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7e89eee9; op2val:0xfe89eee9; 
   valaddr_reg:x12; val_offset:854*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x12, 854*FLEN/8, x13, x9, x10)

inst_449:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x09eee9 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x09eee9 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7e89eee9; op2val:0xfe89eee9; 
   valaddr_reg:x12; val_offset:856*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x12, 856*FLEN/8, x13, x9, x10)

inst_450:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x735bf2 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x735bf2 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7ef35bf2; op2val:0xfef35bf2; 
   valaddr_reg:x12; val_offset:858*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x12, 858*FLEN/8, x13, x9, x10)

inst_451:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x735bf2 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x735bf2 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7ef35bf2; op2val:0xfef35bf2; 
   valaddr_reg:x12; val_offset:860*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x12, 860*FLEN/8, x13, x9, x10)

inst_452:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x735bf2 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x735bf2 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7ef35bf2; op2val:0xfef35bf2; 
   valaddr_reg:x12; val_offset:862*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x12, 862*FLEN/8, x13, x9, x10)

inst_453:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x735bf2 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x735bf2 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7ef35bf2; op2val:0xfef35bf2; 
   valaddr_reg:x12; val_offset:864*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x12, 864*FLEN/8, x13, x9, x10)

inst_454:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x735bf2 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x735bf2 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7ef35bf2; op2val:0xfef35bf2; 
   valaddr_reg:x12; val_offset:866*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x12, 866*FLEN/8, x13, x9, x10)

inst_455:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09661e and fs2 == 1 and fe2 == 0xfe and fm2 == 0x09661e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f09661e; op2val:0xff09661e; 
   valaddr_reg:x12; val_offset:868*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x12, 868*FLEN/8, x13, x9, x10)

inst_456:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09661e and fs2 == 1 and fe2 == 0xfe and fm2 == 0x09661e and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f09661e; op2val:0xff09661e; 
   valaddr_reg:x12; val_offset:870*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x12, 870*FLEN/8, x13, x9, x10)

inst_457:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09661e and fs2 == 1 and fe2 == 0xfe and fm2 == 0x09661e and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f09661e; op2val:0xff09661e; 
   valaddr_reg:x12; val_offset:872*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x12, 872*FLEN/8, x13, x9, x10)

inst_458:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09661e and fs2 == 1 and fe2 == 0xfe and fm2 == 0x09661e and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f09661e; op2val:0xff09661e; 
   valaddr_reg:x12; val_offset:874*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x12, 874*FLEN/8, x13, x9, x10)

inst_459:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09661e and fs2 == 1 and fe2 == 0xfe and fm2 == 0x09661e and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f09661e; op2val:0xff09661e; 
   valaddr_reg:x12; val_offset:876*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x12, 876*FLEN/8, x13, x9, x10)

inst_460:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1f22f1 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x1f22f1 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7e9f22f1; op2val:0xfe9f22f1; 
   valaddr_reg:x12; val_offset:878*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x12, 878*FLEN/8, x13, x9, x10)

inst_461:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1f22f1 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x1f22f1 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7e9f22f1; op2val:0xfe9f22f1; 
   valaddr_reg:x12; val_offset:880*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x12, 880*FLEN/8, x13, x9, x10)

inst_462:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1f22f1 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x1f22f1 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7e9f22f1; op2val:0xfe9f22f1; 
   valaddr_reg:x12; val_offset:882*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x12, 882*FLEN/8, x13, x9, x10)

inst_463:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1f22f1 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x1f22f1 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7e9f22f1; op2val:0xfe9f22f1; 
   valaddr_reg:x12; val_offset:884*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x12, 884*FLEN/8, x13, x9, x10)

inst_464:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1f22f1 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x1f22f1 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7e9f22f1; op2val:0xfe9f22f1; 
   valaddr_reg:x12; val_offset:886*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x12, 886*FLEN/8, x13, x9, x10)

inst_465:
// fs1 == 0 and fe1 == 0xf5 and fm1 == 0x15d64c and fs2 == 1 and fe2 == 0xf5 and fm2 == 0x15d64c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7a95d64c; op2val:0xfa95d64c; 
   valaddr_reg:x12; val_offset:888*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x12, 888*FLEN/8, x13, x9, x10)

inst_466:
// fs1 == 0 and fe1 == 0xf5 and fm1 == 0x15d64c and fs2 == 1 and fe2 == 0xf5 and fm2 == 0x15d64c and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7a95d64c; op2val:0xfa95d64c; 
   valaddr_reg:x12; val_offset:890*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x12, 890*FLEN/8, x13, x9, x10)

inst_467:
// fs1 == 0 and fe1 == 0xf5 and fm1 == 0x15d64c and fs2 == 1 and fe2 == 0xf5 and fm2 == 0x15d64c and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7a95d64c; op2val:0xfa95d64c; 
   valaddr_reg:x12; val_offset:892*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x12, 892*FLEN/8, x13, x9, x10)

inst_468:
// fs1 == 0 and fe1 == 0xf5 and fm1 == 0x15d64c and fs2 == 1 and fe2 == 0xf5 and fm2 == 0x15d64c and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7a95d64c; op2val:0xfa95d64c; 
   valaddr_reg:x12; val_offset:894*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x12, 894*FLEN/8, x13, x9, x10)

inst_469:
// fs1 == 0 and fe1 == 0xf5 and fm1 == 0x15d64c and fs2 == 1 and fe2 == 0xf5 and fm2 == 0x15d64c and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7a95d64c; op2val:0xfa95d64c; 
   valaddr_reg:x12; val_offset:896*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x12, 896*FLEN/8, x13, x9, x10)

inst_470:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x006905 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x006905 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7e806905; op2val:0xfe806905; 
   valaddr_reg:x12; val_offset:898*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x12, 898*FLEN/8, x13, x9, x10)

inst_471:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x006905 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x006905 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7e806905; op2val:0xfe806905; 
   valaddr_reg:x12; val_offset:900*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x12, 900*FLEN/8, x13, x9, x10)

inst_472:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x006905 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x006905 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7e806905; op2val:0xfe806905; 
   valaddr_reg:x12; val_offset:902*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x12, 902*FLEN/8, x13, x9, x10)

inst_473:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x006905 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x006905 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7e806905; op2val:0xfe806905; 
   valaddr_reg:x12; val_offset:904*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x12, 904*FLEN/8, x13, x9, x10)

inst_474:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x006905 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x006905 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7e806905; op2val:0xfe806905; 
   valaddr_reg:x12; val_offset:906*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x12, 906*FLEN/8, x13, x9, x10)

inst_475:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x74c2e8 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x74c2e8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7ef4c2e8; op2val:0xfef4c2e8; 
   valaddr_reg:x12; val_offset:908*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x12, 908*FLEN/8, x13, x9, x10)

inst_476:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x74c2e8 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x74c2e8 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7ef4c2e8; op2val:0xfef4c2e8; 
   valaddr_reg:x12; val_offset:910*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x12, 910*FLEN/8, x13, x9, x10)

inst_477:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x74c2e8 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x74c2e8 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7ef4c2e8; op2val:0xfef4c2e8; 
   valaddr_reg:x12; val_offset:912*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x12, 912*FLEN/8, x13, x9, x10)

inst_478:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x74c2e8 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x74c2e8 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7ef4c2e8; op2val:0xfef4c2e8; 
   valaddr_reg:x12; val_offset:914*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x12, 914*FLEN/8, x13, x9, x10)

inst_479:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x74c2e8 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x74c2e8 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7ef4c2e8; op2val:0xfef4c2e8; 
   valaddr_reg:x12; val_offset:916*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x12, 916*FLEN/8, x13, x9, x10)

inst_480:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2814cf and fs2 == 1 and fe2 == 0xfe and fm2 == 0x2814cf and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f2814cf; op2val:0xff2814cf; 
   valaddr_reg:x12; val_offset:918*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x12, 918*FLEN/8, x13, x9, x10)

inst_481:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2814cf and fs2 == 1 and fe2 == 0xfe and fm2 == 0x2814cf and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f2814cf; op2val:0xff2814cf; 
   valaddr_reg:x12; val_offset:920*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x12, 920*FLEN/8, x13, x9, x10)

inst_482:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2814cf and fs2 == 1 and fe2 == 0xfe and fm2 == 0x2814cf and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f2814cf; op2val:0xff2814cf; 
   valaddr_reg:x12; val_offset:922*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x12, 922*FLEN/8, x13, x9, x10)

inst_483:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2814cf and fs2 == 1 and fe2 == 0xfe and fm2 == 0x2814cf and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f2814cf; op2val:0xff2814cf; 
   valaddr_reg:x12; val_offset:924*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x12, 924*FLEN/8, x13, x9, x10)

inst_484:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2814cf and fs2 == 1 and fe2 == 0xfe and fm2 == 0x2814cf and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f2814cf; op2val:0xff2814cf; 
   valaddr_reg:x12; val_offset:926*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x12, 926*FLEN/8, x13, x9, x10)

inst_485:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1f21ce and fs2 == 1 and fe2 == 0xfd and fm2 == 0x1f21ce and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7e9f21ce; op2val:0xfe9f21ce; 
   valaddr_reg:x12; val_offset:928*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x12, 928*FLEN/8, x13, x9, x10)

inst_486:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1f21ce and fs2 == 1 and fe2 == 0xfd and fm2 == 0x1f21ce and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7e9f21ce; op2val:0xfe9f21ce; 
   valaddr_reg:x12; val_offset:930*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x12, 930*FLEN/8, x13, x9, x10)

inst_487:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1f21ce and fs2 == 1 and fe2 == 0xfd and fm2 == 0x1f21ce and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7e9f21ce; op2val:0xfe9f21ce; 
   valaddr_reg:x12; val_offset:932*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x12, 932*FLEN/8, x13, x9, x10)

inst_488:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1f21ce and fs2 == 1 and fe2 == 0xfd and fm2 == 0x1f21ce and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7e9f21ce; op2val:0xfe9f21ce; 
   valaddr_reg:x12; val_offset:934*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x12, 934*FLEN/8, x13, x9, x10)

inst_489:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1f21ce and fs2 == 1 and fe2 == 0xfd and fm2 == 0x1f21ce and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7e9f21ce; op2val:0xfe9f21ce; 
   valaddr_reg:x12; val_offset:936*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x12, 936*FLEN/8, x13, x9, x10)

inst_490:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x06c054 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x06c054 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f06c054; op2val:0xff06c054; 
   valaddr_reg:x12; val_offset:938*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x12, 938*FLEN/8, x13, x9, x10)

inst_491:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x06c054 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x06c054 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f06c054; op2val:0xff06c054; 
   valaddr_reg:x12; val_offset:940*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x12, 940*FLEN/8, x13, x9, x10)

inst_492:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x06c054 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x06c054 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f06c054; op2val:0xff06c054; 
   valaddr_reg:x12; val_offset:942*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x12, 942*FLEN/8, x13, x9, x10)

inst_493:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x06c054 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x06c054 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f06c054; op2val:0xff06c054; 
   valaddr_reg:x12; val_offset:944*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x12, 944*FLEN/8, x13, x9, x10)

inst_494:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x06c054 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x06c054 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f06c054; op2val:0xff06c054; 
   valaddr_reg:x12; val_offset:946*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x12, 946*FLEN/8, x13, x9, x10)

inst_495:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7e4880 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x7e4880 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7efe4880; op2val:0xfefe4880; 
   valaddr_reg:x12; val_offset:948*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x12, 948*FLEN/8, x13, x9, x10)

inst_496:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7e4880 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x7e4880 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7efe4880; op2val:0xfefe4880; 
   valaddr_reg:x12; val_offset:950*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x12, 950*FLEN/8, x13, x9, x10)

inst_497:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7e4880 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x7e4880 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7efe4880; op2val:0xfefe4880; 
   valaddr_reg:x12; val_offset:952*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x12, 952*FLEN/8, x13, x9, x10)

inst_498:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7e4880 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x7e4880 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7efe4880; op2val:0xfefe4880; 
   valaddr_reg:x12; val_offset:954*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x12, 954*FLEN/8, x13, x9, x10)

inst_499:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7e4880 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x7e4880 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7efe4880; op2val:0xfefe4880; 
   valaddr_reg:x12; val_offset:956*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x12, 956*FLEN/8, x13, x9, x10)

inst_500:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2b03e6 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x2b03e6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7eab03e6; op2val:0xfeab03e6; 
   valaddr_reg:x12; val_offset:958*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x12, 958*FLEN/8, x13, x9, x10)

inst_501:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2b03e6 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x2b03e6 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7eab03e6; op2val:0xfeab03e6; 
   valaddr_reg:x12; val_offset:960*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x12, 960*FLEN/8, x13, x9, x10)

inst_502:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2b03e6 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x2b03e6 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7eab03e6; op2val:0xfeab03e6; 
   valaddr_reg:x12; val_offset:962*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x12, 962*FLEN/8, x13, x9, x10)

inst_503:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2b03e6 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x2b03e6 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7eab03e6; op2val:0xfeab03e6; 
   valaddr_reg:x12; val_offset:964*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x12, 964*FLEN/8, x13, x9, x10)

inst_504:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2b03e6 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x2b03e6 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7eab03e6; op2val:0xfeab03e6; 
   valaddr_reg:x12; val_offset:966*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x12, 966*FLEN/8, x13, x9, x10)

inst_505:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7234e1 and fs2 == 1 and fe2 == 0xfb and fm2 == 0x7234e1 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7df234e1; op2val:0xfdf234e1; 
   valaddr_reg:x12; val_offset:968*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x12, 968*FLEN/8, x13, x9, x10)

inst_506:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7234e1 and fs2 == 1 and fe2 == 0xfb and fm2 == 0x7234e1 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7df234e1; op2val:0xfdf234e1; 
   valaddr_reg:x12; val_offset:970*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x12, 970*FLEN/8, x13, x9, x10)

inst_507:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7234e1 and fs2 == 1 and fe2 == 0xfb and fm2 == 0x7234e1 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7df234e1; op2val:0xfdf234e1; 
   valaddr_reg:x12; val_offset:972*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x12, 972*FLEN/8, x13, x9, x10)

inst_508:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7234e1 and fs2 == 1 and fe2 == 0xfb and fm2 == 0x7234e1 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7df234e1; op2val:0xfdf234e1; 
   valaddr_reg:x12; val_offset:974*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x12, 974*FLEN/8, x13, x9, x10)

inst_509:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7234e1 and fs2 == 1 and fe2 == 0xfb and fm2 == 0x7234e1 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7df234e1; op2val:0xfdf234e1; 
   valaddr_reg:x12; val_offset:976*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x12, 976*FLEN/8, x13, x9, x10)

inst_510:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3b1c27 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x3b1c27 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7ebb1c27; op2val:0xfebb1c27; 
   valaddr_reg:x12; val_offset:978*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x12, 978*FLEN/8, x13, x9, x10)

inst_511:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3b1c27 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x3b1c27 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7ebb1c27; op2val:0xfebb1c27; 
   valaddr_reg:x12; val_offset:980*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x12, 980*FLEN/8, x13, x9, x10)

inst_512:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3b1c27 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x3b1c27 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7ebb1c27; op2val:0xfebb1c27; 
   valaddr_reg:x12; val_offset:982*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x12, 982*FLEN/8, x13, x9, x10)

inst_513:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3b1c27 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x3b1c27 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7ebb1c27; op2val:0xfebb1c27; 
   valaddr_reg:x12; val_offset:984*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x12, 984*FLEN/8, x13, x9, x10)

inst_514:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3b1c27 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x3b1c27 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7ebb1c27; op2val:0xfebb1c27; 
   valaddr_reg:x12; val_offset:986*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x12, 986*FLEN/8, x13, x9, x10)

inst_515:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x110d95 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x110d95 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f110d95; op2val:0xff110d95; 
   valaddr_reg:x12; val_offset:988*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x12, 988*FLEN/8, x13, x9, x10)

inst_516:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x110d95 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x110d95 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f110d95; op2val:0xff110d95; 
   valaddr_reg:x12; val_offset:990*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x12, 990*FLEN/8, x13, x9, x10)

inst_517:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x110d95 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x110d95 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f110d95; op2val:0xff110d95; 
   valaddr_reg:x12; val_offset:992*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x12, 992*FLEN/8, x13, x9, x10)

inst_518:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x110d95 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x110d95 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f110d95; op2val:0xff110d95; 
   valaddr_reg:x12; val_offset:994*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x12, 994*FLEN/8, x13, x9, x10)

inst_519:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x110d95 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x110d95 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f110d95; op2val:0xff110d95; 
   valaddr_reg:x12; val_offset:996*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x12, 996*FLEN/8, x13, x9, x10)

inst_520:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3deb73 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x3deb73 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7ebdeb73; op2val:0xfebdeb73; 
   valaddr_reg:x12; val_offset:998*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x12, 998*FLEN/8, x13, x9, x10)

inst_521:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3deb73 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x3deb73 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7ebdeb73; op2val:0xfebdeb73; 
   valaddr_reg:x12; val_offset:1000*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x12, 1000*FLEN/8, x13, x9, x10)

inst_522:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3deb73 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x3deb73 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7ebdeb73; op2val:0xfebdeb73; 
   valaddr_reg:x12; val_offset:1002*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x12, 1002*FLEN/8, x13, x9, x10)

inst_523:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3deb73 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x3deb73 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7ebdeb73; op2val:0xfebdeb73; 
   valaddr_reg:x12; val_offset:1004*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x12, 1004*FLEN/8, x13, x9, x10)

inst_524:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3deb73 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x3deb73 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7ebdeb73; op2val:0xfebdeb73; 
   valaddr_reg:x12; val_offset:1006*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x12, 1006*FLEN/8, x13, x9, x10)

inst_525:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x33495f and fs2 == 1 and fe2 == 0xfd and fm2 == 0x33495f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7eb3495f; op2val:0xfeb3495f; 
   valaddr_reg:x12; val_offset:1008*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x12, 1008*FLEN/8, x13, x9, x10)

inst_526:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x33495f and fs2 == 1 and fe2 == 0xfd and fm2 == 0x33495f and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7eb3495f; op2val:0xfeb3495f; 
   valaddr_reg:x12; val_offset:1010*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x12, 1010*FLEN/8, x13, x9, x10)

inst_527:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x33495f and fs2 == 1 and fe2 == 0xfd and fm2 == 0x33495f and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7eb3495f; op2val:0xfeb3495f; 
   valaddr_reg:x12; val_offset:1012*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x12, 1012*FLEN/8, x13, x9, x10)

inst_528:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x33495f and fs2 == 1 and fe2 == 0xfd and fm2 == 0x33495f and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7eb3495f; op2val:0xfeb3495f; 
   valaddr_reg:x12; val_offset:1014*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x12, 1014*FLEN/8, x13, x9, x10)

inst_529:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x33495f and fs2 == 1 and fe2 == 0xfd and fm2 == 0x33495f and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7eb3495f; op2val:0xfeb3495f; 
   valaddr_reg:x12; val_offset:1016*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x12, 1016*FLEN/8, x13, x9, x10)

inst_530:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2800cd and fs2 == 1 and fe2 == 0xfe and fm2 == 0x2800cd and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f2800cd; op2val:0xff2800cd; 
   valaddr_reg:x12; val_offset:1018*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x12, 1018*FLEN/8, x13, x9, x10)

inst_531:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2800cd and fs2 == 1 and fe2 == 0xfe and fm2 == 0x2800cd and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f2800cd; op2val:0xff2800cd; 
   valaddr_reg:x12; val_offset:1020*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x12, 1020*FLEN/8, x13, x9, x10)

inst_532:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2800cd and fs2 == 1 and fe2 == 0xfe and fm2 == 0x2800cd and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f2800cd; op2val:0xff2800cd; 
   valaddr_reg:x12; val_offset:1022*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x12, 1022*FLEN/8, x13, x9, x10)

inst_533:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2800cd and fs2 == 1 and fe2 == 0xfe and fm2 == 0x2800cd and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f2800cd; op2val:0xff2800cd; 
   valaddr_reg:x12; val_offset:1024*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x12, 1024*FLEN/8, x13, x9, x10)

inst_534:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2800cd and fs2 == 1 and fe2 == 0xfe and fm2 == 0x2800cd and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f2800cd; op2val:0xff2800cd; 
   valaddr_reg:x12; val_offset:1026*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x12, 1026*FLEN/8, x13, x9, x10)

inst_535:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x10628e and fs2 == 1 and fe2 == 0xfc and fm2 == 0x10628e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7e10628e; op2val:0xfe10628e; 
   valaddr_reg:x12; val_offset:1028*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x12, 1028*FLEN/8, x13, x9, x10)
RVTEST_SIGBASE(x9,signature_x9_4)

inst_536:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x10628e and fs2 == 1 and fe2 == 0xfc and fm2 == 0x10628e and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7e10628e; op2val:0xfe10628e; 
   valaddr_reg:x12; val_offset:1030*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x12, 1030*FLEN/8, x13, x9, x10)

inst_537:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x10628e and fs2 == 1 and fe2 == 0xfc and fm2 == 0x10628e and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7e10628e; op2val:0xfe10628e; 
   valaddr_reg:x12; val_offset:1032*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x12, 1032*FLEN/8, x13, x9, x10)

inst_538:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x10628e and fs2 == 1 and fe2 == 0xfc and fm2 == 0x10628e and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7e10628e; op2val:0xfe10628e; 
   valaddr_reg:x12; val_offset:1034*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x12, 1034*FLEN/8, x13, x9, x10)

inst_539:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x10628e and fs2 == 1 and fe2 == 0xfc and fm2 == 0x10628e and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7e10628e; op2val:0xfe10628e; 
   valaddr_reg:x12; val_offset:1036*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x12, 1036*FLEN/8, x13, x9, x10)

inst_540:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x731b27 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x731b27 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7ef31b27; op2val:0xfef31b27; 
   valaddr_reg:x12; val_offset:1038*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x12, 1038*FLEN/8, x13, x9, x10)

inst_541:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x731b27 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x731b27 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7ef31b27; op2val:0xfef31b27; 
   valaddr_reg:x12; val_offset:1040*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x12, 1040*FLEN/8, x13, x9, x10)

inst_542:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x731b27 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x731b27 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7ef31b27; op2val:0xfef31b27; 
   valaddr_reg:x12; val_offset:1042*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x12, 1042*FLEN/8, x13, x9, x10)

inst_543:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x731b27 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x731b27 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7ef31b27; op2val:0xfef31b27; 
   valaddr_reg:x12; val_offset:1044*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x12, 1044*FLEN/8, x13, x9, x10)

inst_544:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x731b27 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x731b27 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7ef31b27; op2val:0xfef31b27; 
   valaddr_reg:x12; val_offset:1046*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x12, 1046*FLEN/8, x13, x9, x10)

inst_545:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0b4e72 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x0b4e72 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f0b4e72; op2val:0xff0b4e72; 
   valaddr_reg:x12; val_offset:1048*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x12, 1048*FLEN/8, x13, x9, x10)

inst_546:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0b4e72 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x0b4e72 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f0b4e72; op2val:0xff0b4e72; 
   valaddr_reg:x12; val_offset:1050*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x12, 1050*FLEN/8, x13, x9, x10)

inst_547:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0b4e72 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x0b4e72 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f0b4e72; op2val:0xff0b4e72; 
   valaddr_reg:x12; val_offset:1052*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x12, 1052*FLEN/8, x13, x9, x10)

inst_548:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0b4e72 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x0b4e72 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f0b4e72; op2val:0xff0b4e72; 
   valaddr_reg:x12; val_offset:1054*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x12, 1054*FLEN/8, x13, x9, x10)

inst_549:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0b4e72 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x0b4e72 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f0b4e72; op2val:0xff0b4e72; 
   valaddr_reg:x12; val_offset:1056*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x12, 1056*FLEN/8, x13, x9, x10)

inst_550:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1a4c33 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x1a4c33 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7e9a4c33; op2val:0xfe9a4c33; 
   valaddr_reg:x12; val_offset:1058*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x12, 1058*FLEN/8, x13, x9, x10)

inst_551:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1a4c33 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x1a4c33 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7e9a4c33; op2val:0xfe9a4c33; 
   valaddr_reg:x12; val_offset:1060*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x12, 1060*FLEN/8, x13, x9, x10)

inst_552:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1a4c33 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x1a4c33 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7e9a4c33; op2val:0xfe9a4c33; 
   valaddr_reg:x12; val_offset:1062*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x12, 1062*FLEN/8, x13, x9, x10)

inst_553:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1a4c33 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x1a4c33 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7e9a4c33; op2val:0xfe9a4c33; 
   valaddr_reg:x12; val_offset:1064*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x12, 1064*FLEN/8, x13, x9, x10)

inst_554:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1a4c33 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x1a4c33 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7e9a4c33; op2val:0xfe9a4c33; 
   valaddr_reg:x12; val_offset:1066*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x12, 1066*FLEN/8, x13, x9, x10)

inst_555:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x72d2f3 and fs2 == 1 and fe2 == 0xfc and fm2 == 0x72d2f3 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7e72d2f3; op2val:0xfe72d2f3; 
   valaddr_reg:x12; val_offset:1068*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x12, 1068*FLEN/8, x13, x9, x10)

inst_556:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x72d2f3 and fs2 == 1 and fe2 == 0xfc and fm2 == 0x72d2f3 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7e72d2f3; op2val:0xfe72d2f3; 
   valaddr_reg:x12; val_offset:1070*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x12, 1070*FLEN/8, x13, x9, x10)

inst_557:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x72d2f3 and fs2 == 1 and fe2 == 0xfc and fm2 == 0x72d2f3 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7e72d2f3; op2val:0xfe72d2f3; 
   valaddr_reg:x12; val_offset:1072*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x12, 1072*FLEN/8, x13, x9, x10)

inst_558:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x72d2f3 and fs2 == 1 and fe2 == 0xfc and fm2 == 0x72d2f3 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7e72d2f3; op2val:0xfe72d2f3; 
   valaddr_reg:x12; val_offset:1074*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x12, 1074*FLEN/8, x13, x9, x10)

inst_559:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x72d2f3 and fs2 == 1 and fe2 == 0xfc and fm2 == 0x72d2f3 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7e72d2f3; op2val:0xfe72d2f3; 
   valaddr_reg:x12; val_offset:1076*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x12, 1076*FLEN/8, x13, x9, x10)

inst_560:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09b9ea and fs2 == 1 and fe2 == 0xfe and fm2 == 0x09b9ea and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f09b9ea; op2val:0xff09b9ea; 
   valaddr_reg:x12; val_offset:1078*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x12, 1078*FLEN/8, x13, x9, x10)

inst_561:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09b9ea and fs2 == 1 and fe2 == 0xfe and fm2 == 0x09b9ea and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f09b9ea; op2val:0xff09b9ea; 
   valaddr_reg:x12; val_offset:1080*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x12, 1080*FLEN/8, x13, x9, x10)

inst_562:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09b9ea and fs2 == 1 and fe2 == 0xfe and fm2 == 0x09b9ea and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f09b9ea; op2val:0xff09b9ea; 
   valaddr_reg:x12; val_offset:1082*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x12, 1082*FLEN/8, x13, x9, x10)

inst_563:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09b9ea and fs2 == 1 and fe2 == 0xfe and fm2 == 0x09b9ea and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f09b9ea; op2val:0xff09b9ea; 
   valaddr_reg:x12; val_offset:1084*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x12, 1084*FLEN/8, x13, x9, x10)

inst_564:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09b9ea and fs2 == 1 and fe2 == 0xfe and fm2 == 0x09b9ea and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f09b9ea; op2val:0xff09b9ea; 
   valaddr_reg:x12; val_offset:1086*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x12, 1086*FLEN/8, x13, x9, x10)

inst_565:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1df6e4 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x1df6e4 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f1df6e4; op2val:0xff1df6e4; 
   valaddr_reg:x12; val_offset:1088*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x12, 1088*FLEN/8, x13, x9, x10)

inst_566:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1df6e4 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x1df6e4 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f1df6e4; op2val:0xff1df6e4; 
   valaddr_reg:x12; val_offset:1090*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x12, 1090*FLEN/8, x13, x9, x10)

inst_567:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1df6e4 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x1df6e4 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f1df6e4; op2val:0xff1df6e4; 
   valaddr_reg:x12; val_offset:1092*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x12, 1092*FLEN/8, x13, x9, x10)

inst_568:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1df6e4 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x1df6e4 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f1df6e4; op2val:0xff1df6e4; 
   valaddr_reg:x12; val_offset:1094*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x12, 1094*FLEN/8, x13, x9, x10)

inst_569:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1df6e4 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x1df6e4 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f1df6e4; op2val:0xff1df6e4; 
   valaddr_reg:x12; val_offset:1096*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x12, 1096*FLEN/8, x13, x9, x10)

inst_570:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x16325d and fs2 == 1 and fe2 == 0xfb and fm2 == 0x16325d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7d96325d; op2val:0xfd96325d; 
   valaddr_reg:x12; val_offset:1098*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x12, 1098*FLEN/8, x13, x9, x10)

inst_571:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x16325d and fs2 == 1 and fe2 == 0xfb and fm2 == 0x16325d and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7d96325d; op2val:0xfd96325d; 
   valaddr_reg:x12; val_offset:1100*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x12, 1100*FLEN/8, x13, x9, x10)

inst_572:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x16325d and fs2 == 1 and fe2 == 0xfb and fm2 == 0x16325d and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7d96325d; op2val:0xfd96325d; 
   valaddr_reg:x12; val_offset:1102*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x12, 1102*FLEN/8, x13, x9, x10)

inst_573:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x16325d and fs2 == 1 and fe2 == 0xfb and fm2 == 0x16325d and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7d96325d; op2val:0xfd96325d; 
   valaddr_reg:x12; val_offset:1104*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x12, 1104*FLEN/8, x13, x9, x10)

inst_574:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x16325d and fs2 == 1 and fe2 == 0xfb and fm2 == 0x16325d and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7d96325d; op2val:0xfd96325d; 
   valaddr_reg:x12; val_offset:1106*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x12, 1106*FLEN/8, x13, x9, x10)

inst_575:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x795162 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x795162 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7ef95162; op2val:0xfef95162; 
   valaddr_reg:x12; val_offset:1108*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x12, 1108*FLEN/8, x13, x9, x10)

inst_576:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x795162 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x795162 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7ef95162; op2val:0xfef95162; 
   valaddr_reg:x12; val_offset:1110*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x12, 1110*FLEN/8, x13, x9, x10)

inst_577:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x795162 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x795162 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7ef95162; op2val:0xfef95162; 
   valaddr_reg:x12; val_offset:1112*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x12, 1112*FLEN/8, x13, x9, x10)

inst_578:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x795162 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x795162 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7ef95162; op2val:0xfef95162; 
   valaddr_reg:x12; val_offset:1114*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x12, 1114*FLEN/8, x13, x9, x10)

inst_579:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x795162 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x795162 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7ef95162; op2val:0xfef95162; 
   valaddr_reg:x12; val_offset:1116*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x12, 1116*FLEN/8, x13, x9, x10)

inst_580:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x5706d8 and fs2 == 1 and fe2 == 0xfc and fm2 == 0x5706d8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7e5706d8; op2val:0xfe5706d8; 
   valaddr_reg:x12; val_offset:1118*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x12, 1118*FLEN/8, x13, x9, x10)

inst_581:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x5706d8 and fs2 == 1 and fe2 == 0xfc and fm2 == 0x5706d8 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7e5706d8; op2val:0xfe5706d8; 
   valaddr_reg:x12; val_offset:1120*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x12, 1120*FLEN/8, x13, x9, x10)

inst_582:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x5706d8 and fs2 == 1 and fe2 == 0xfc and fm2 == 0x5706d8 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7e5706d8; op2val:0xfe5706d8; 
   valaddr_reg:x12; val_offset:1122*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x12, 1122*FLEN/8, x13, x9, x10)

inst_583:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x5706d8 and fs2 == 1 and fe2 == 0xfc and fm2 == 0x5706d8 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7e5706d8; op2val:0xfe5706d8; 
   valaddr_reg:x12; val_offset:1124*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x12, 1124*FLEN/8, x13, x9, x10)

inst_584:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x5706d8 and fs2 == 1 and fe2 == 0xfc and fm2 == 0x5706d8 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7e5706d8; op2val:0xfe5706d8; 
   valaddr_reg:x12; val_offset:1126*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x12, 1126*FLEN/8, x13, x9, x10)

inst_585:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x19e0a5 and fs2 == 1 and fe2 == 0xfb and fm2 == 0x19e0a5 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7d99e0a5; op2val:0xfd99e0a5; 
   valaddr_reg:x12; val_offset:1128*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x12, 1128*FLEN/8, x13, x9, x10)

inst_586:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x19e0a5 and fs2 == 1 and fe2 == 0xfb and fm2 == 0x19e0a5 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7d99e0a5; op2val:0xfd99e0a5; 
   valaddr_reg:x12; val_offset:1130*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x12, 1130*FLEN/8, x13, x9, x10)

inst_587:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x19e0a5 and fs2 == 1 and fe2 == 0xfb and fm2 == 0x19e0a5 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7d99e0a5; op2val:0xfd99e0a5; 
   valaddr_reg:x12; val_offset:1132*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x12, 1132*FLEN/8, x13, x9, x10)

inst_588:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x19e0a5 and fs2 == 1 and fe2 == 0xfb and fm2 == 0x19e0a5 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7d99e0a5; op2val:0xfd99e0a5; 
   valaddr_reg:x12; val_offset:1134*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x12, 1134*FLEN/8, x13, x9, x10)

inst_589:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x19e0a5 and fs2 == 1 and fe2 == 0xfb and fm2 == 0x19e0a5 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7d99e0a5; op2val:0xfd99e0a5; 
   valaddr_reg:x12; val_offset:1136*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x12, 1136*FLEN/8, x13, x9, x10)

inst_590:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1854d1 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x1854d1 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7e9854d1; op2val:0xfe9854d1; 
   valaddr_reg:x12; val_offset:1138*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x12, 1138*FLEN/8, x13, x9, x10)

inst_591:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1854d1 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x1854d1 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7e9854d1; op2val:0xfe9854d1; 
   valaddr_reg:x12; val_offset:1140*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x12, 1140*FLEN/8, x13, x9, x10)

inst_592:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1854d1 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x1854d1 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7e9854d1; op2val:0xfe9854d1; 
   valaddr_reg:x12; val_offset:1142*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x12, 1142*FLEN/8, x13, x9, x10)

inst_593:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1854d1 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x1854d1 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7e9854d1; op2val:0xfe9854d1; 
   valaddr_reg:x12; val_offset:1144*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x12, 1144*FLEN/8, x13, x9, x10)

inst_594:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1854d1 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x1854d1 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7e9854d1; op2val:0xfe9854d1; 
   valaddr_reg:x12; val_offset:1146*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x12, 1146*FLEN/8, x13, x9, x10)

inst_595:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x52faef and fs2 == 1 and fe2 == 0xfc and fm2 == 0x52faef and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7e52faef; op2val:0xfe52faef; 
   valaddr_reg:x12; val_offset:1148*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x12, 1148*FLEN/8, x13, x9, x10)

inst_596:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x52faef and fs2 == 1 and fe2 == 0xfc and fm2 == 0x52faef and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7e52faef; op2val:0xfe52faef; 
   valaddr_reg:x12; val_offset:1150*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x12, 1150*FLEN/8, x13, x9, x10)

inst_597:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x52faef and fs2 == 1 and fe2 == 0xfc and fm2 == 0x52faef and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7e52faef; op2val:0xfe52faef; 
   valaddr_reg:x12; val_offset:1152*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x12, 1152*FLEN/8, x13, x9, x10)

inst_598:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x52faef and fs2 == 1 and fe2 == 0xfc and fm2 == 0x52faef and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7e52faef; op2val:0xfe52faef; 
   valaddr_reg:x12; val_offset:1154*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x12, 1154*FLEN/8, x13, x9, x10)

inst_599:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x52faef and fs2 == 1 and fe2 == 0xfc and fm2 == 0x52faef and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7e52faef; op2val:0xfe52faef; 
   valaddr_reg:x12; val_offset:1156*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x12, 1156*FLEN/8, x13, x9, x10)

inst_600:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x18212b and fs2 == 1 and fe2 == 0xfe and fm2 == 0x18212b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f18212b; op2val:0xff18212b; 
   valaddr_reg:x12; val_offset:1158*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x12, 1158*FLEN/8, x13, x9, x10)

inst_601:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x18212b and fs2 == 1 and fe2 == 0xfe and fm2 == 0x18212b and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f18212b; op2val:0xff18212b; 
   valaddr_reg:x12; val_offset:1160*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x12, 1160*FLEN/8, x13, x9, x10)

inst_602:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x18212b and fs2 == 1 and fe2 == 0xfe and fm2 == 0x18212b and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f18212b; op2val:0xff18212b; 
   valaddr_reg:x12; val_offset:1162*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x12, 1162*FLEN/8, x13, x9, x10)

inst_603:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x18212b and fs2 == 1 and fe2 == 0xfe and fm2 == 0x18212b and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f18212b; op2val:0xff18212b; 
   valaddr_reg:x12; val_offset:1164*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x12, 1164*FLEN/8, x13, x9, x10)

inst_604:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x18212b and fs2 == 1 and fe2 == 0xfe and fm2 == 0x18212b and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f18212b; op2val:0xff18212b; 
   valaddr_reg:x12; val_offset:1166*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x12, 1166*FLEN/8, x13, x9, x10)

inst_605:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4cef18 and fs2 == 1 and fe2 == 0xfb and fm2 == 0x4cef18 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7dccef18; op2val:0xfdccef18; 
   valaddr_reg:x12; val_offset:1168*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x12, 1168*FLEN/8, x13, x9, x10)

inst_606:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4cef18 and fs2 == 1 and fe2 == 0xfb and fm2 == 0x4cef18 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7dccef18; op2val:0xfdccef18; 
   valaddr_reg:x12; val_offset:1170*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x12, 1170*FLEN/8, x13, x9, x10)

inst_607:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4cef18 and fs2 == 1 and fe2 == 0xfb and fm2 == 0x4cef18 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7dccef18; op2val:0xfdccef18; 
   valaddr_reg:x12; val_offset:1172*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x12, 1172*FLEN/8, x13, x9, x10)

inst_608:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4cef18 and fs2 == 1 and fe2 == 0xfb and fm2 == 0x4cef18 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7dccef18; op2val:0xfdccef18; 
   valaddr_reg:x12; val_offset:1174*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x12, 1174*FLEN/8, x13, x9, x10)

inst_609:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4cef18 and fs2 == 1 and fe2 == 0xfb and fm2 == 0x4cef18 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7dccef18; op2val:0xfdccef18; 
   valaddr_reg:x12; val_offset:1176*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x12, 1176*FLEN/8, x13, x9, x10)

inst_610:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x79e697 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x79e697 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7ef9e697; op2val:0xfef9e697; 
   valaddr_reg:x12; val_offset:1178*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x12, 1178*FLEN/8, x13, x9, x10)

inst_611:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x79e697 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x79e697 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7ef9e697; op2val:0xfef9e697; 
   valaddr_reg:x12; val_offset:1180*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x12, 1180*FLEN/8, x13, x9, x10)

inst_612:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x79e697 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x79e697 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7ef9e697; op2val:0xfef9e697; 
   valaddr_reg:x12; val_offset:1182*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x12, 1182*FLEN/8, x13, x9, x10)

inst_613:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x79e697 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x79e697 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7ef9e697; op2val:0xfef9e697; 
   valaddr_reg:x12; val_offset:1184*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x12, 1184*FLEN/8, x13, x9, x10)

inst_614:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x79e697 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x79e697 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7ef9e697; op2val:0xfef9e697; 
   valaddr_reg:x12; val_offset:1186*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x12, 1186*FLEN/8, x13, x9, x10)

inst_615:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2765d9 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x2765d9 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f2765d9; op2val:0xff2765d9; 
   valaddr_reg:x12; val_offset:1188*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x12, 1188*FLEN/8, x13, x9, x10)

inst_616:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2765d9 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x2765d9 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f2765d9; op2val:0xff2765d9; 
   valaddr_reg:x12; val_offset:1190*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x12, 1190*FLEN/8, x13, x9, x10)

inst_617:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2765d9 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x2765d9 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f2765d9; op2val:0xff2765d9; 
   valaddr_reg:x12; val_offset:1192*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x12, 1192*FLEN/8, x13, x9, x10)

inst_618:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2765d9 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x2765d9 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f2765d9; op2val:0xff2765d9; 
   valaddr_reg:x12; val_offset:1194*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x12, 1194*FLEN/8, x13, x9, x10)

inst_619:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2765d9 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x2765d9 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f2765d9; op2val:0xff2765d9; 
   valaddr_reg:x12; val_offset:1196*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x12, 1196*FLEN/8, x13, x9, x10)

inst_620:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x643dc7 and fs2 == 1 and fe2 == 0xf8 and fm2 == 0x643dc7 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7c643dc7; op2val:0xfc643dc7; 
   valaddr_reg:x12; val_offset:1198*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x12, 1198*FLEN/8, x13, x9, x10)

inst_621:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x643dc7 and fs2 == 1 and fe2 == 0xf8 and fm2 == 0x643dc7 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7c643dc7; op2val:0xfc643dc7; 
   valaddr_reg:x12; val_offset:1200*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x12, 1200*FLEN/8, x13, x9, x10)

inst_622:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x643dc7 and fs2 == 1 and fe2 == 0xf8 and fm2 == 0x643dc7 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7c643dc7; op2val:0xfc643dc7; 
   valaddr_reg:x12; val_offset:1202*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x12, 1202*FLEN/8, x13, x9, x10)

inst_623:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x643dc7 and fs2 == 1 and fe2 == 0xf8 and fm2 == 0x643dc7 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7c643dc7; op2val:0xfc643dc7; 
   valaddr_reg:x12; val_offset:1204*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x12, 1204*FLEN/8, x13, x9, x10)

inst_624:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x643dc7 and fs2 == 1 and fe2 == 0xf8 and fm2 == 0x643dc7 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7c643dc7; op2val:0xfc643dc7; 
   valaddr_reg:x12; val_offset:1206*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x12, 1206*FLEN/8, x13, x9, x10)

inst_625:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02c05a and fs2 == 1 and fe2 == 0xfe and fm2 == 0x02c05a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f02c05a; op2val:0xff02c05a; 
   valaddr_reg:x12; val_offset:1208*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x12, 1208*FLEN/8, x13, x9, x10)

inst_626:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02c05a and fs2 == 1 and fe2 == 0xfe and fm2 == 0x02c05a and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f02c05a; op2val:0xff02c05a; 
   valaddr_reg:x12; val_offset:1210*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x12, 1210*FLEN/8, x13, x9, x10)

inst_627:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02c05a and fs2 == 1 and fe2 == 0xfe and fm2 == 0x02c05a and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f02c05a; op2val:0xff02c05a; 
   valaddr_reg:x12; val_offset:1212*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x12, 1212*FLEN/8, x13, x9, x10)

inst_628:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02c05a and fs2 == 1 and fe2 == 0xfe and fm2 == 0x02c05a and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f02c05a; op2val:0xff02c05a; 
   valaddr_reg:x12; val_offset:1214*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x12, 1214*FLEN/8, x13, x9, x10)

inst_629:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02c05a and fs2 == 1 and fe2 == 0xfe and fm2 == 0x02c05a and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f02c05a; op2val:0xff02c05a; 
   valaddr_reg:x12; val_offset:1216*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x12, 1216*FLEN/8, x13, x9, x10)

inst_630:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x35ba7d and fs2 == 1 and fe2 == 0xfe and fm2 == 0x35ba7d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f35ba7d; op2val:0xff35ba7d; 
   valaddr_reg:x12; val_offset:1218*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x12, 1218*FLEN/8, x13, x9, x10)

inst_631:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x35ba7d and fs2 == 1 and fe2 == 0xfe and fm2 == 0x35ba7d and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f35ba7d; op2val:0xff35ba7d; 
   valaddr_reg:x12; val_offset:1220*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x12, 1220*FLEN/8, x13, x9, x10)

inst_632:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x35ba7d and fs2 == 1 and fe2 == 0xfe and fm2 == 0x35ba7d and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f35ba7d; op2val:0xff35ba7d; 
   valaddr_reg:x12; val_offset:1222*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x12, 1222*FLEN/8, x13, x9, x10)

inst_633:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x35ba7d and fs2 == 1 and fe2 == 0xfe and fm2 == 0x35ba7d and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f35ba7d; op2val:0xff35ba7d; 
   valaddr_reg:x12; val_offset:1224*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x12, 1224*FLEN/8, x13, x9, x10)

inst_634:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x35ba7d and fs2 == 1 and fe2 == 0xfe and fm2 == 0x35ba7d and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f35ba7d; op2val:0xff35ba7d; 
   valaddr_reg:x12; val_offset:1226*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x12, 1226*FLEN/8, x13, x9, x10)

inst_635:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2eb100 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x2eb100 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f2eb100; op2val:0xff2eb100; 
   valaddr_reg:x12; val_offset:1228*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x12, 1228*FLEN/8, x13, x9, x10)

inst_636:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2eb100 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x2eb100 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f2eb100; op2val:0xff2eb100; 
   valaddr_reg:x12; val_offset:1230*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x12, 1230*FLEN/8, x13, x9, x10)

inst_637:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2eb100 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x2eb100 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f2eb100; op2val:0xff2eb100; 
   valaddr_reg:x12; val_offset:1232*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x12, 1232*FLEN/8, x13, x9, x10)

inst_638:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2eb100 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x2eb100 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f2eb100; op2val:0xff2eb100; 
   valaddr_reg:x12; val_offset:1234*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x12, 1234*FLEN/8, x13, x9, x10)

inst_639:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2eb100 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x2eb100 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f2eb100; op2val:0xff2eb100; 
   valaddr_reg:x12; val_offset:1236*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x12, 1236*FLEN/8, x13, x9, x10)

inst_640:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0fd579 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x0fd579 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f0fd579; op2val:0xff0fd579; 
   valaddr_reg:x12; val_offset:1238*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x12, 1238*FLEN/8, x13, x9, x10)

inst_641:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0fd579 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x0fd579 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f0fd579; op2val:0xff0fd579; 
   valaddr_reg:x12; val_offset:1240*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x12, 1240*FLEN/8, x13, x9, x10)

inst_642:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0fd579 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x0fd579 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f0fd579; op2val:0xff0fd579; 
   valaddr_reg:x12; val_offset:1242*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x12, 1242*FLEN/8, x13, x9, x10)

inst_643:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0fd579 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x0fd579 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f0fd579; op2val:0xff0fd579; 
   valaddr_reg:x12; val_offset:1244*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x12, 1244*FLEN/8, x13, x9, x10)

inst_644:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0fd579 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x0fd579 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f0fd579; op2val:0xff0fd579; 
   valaddr_reg:x12; val_offset:1246*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x12, 1246*FLEN/8, x13, x9, x10)

inst_645:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7ba8b0 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x7ba8b0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7efba8b0; op2val:0xfefba8b0; 
   valaddr_reg:x12; val_offset:1248*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x12, 1248*FLEN/8, x13, x9, x10)

inst_646:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7ba8b0 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x7ba8b0 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7efba8b0; op2val:0xfefba8b0; 
   valaddr_reg:x12; val_offset:1250*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x12, 1250*FLEN/8, x13, x9, x10)

inst_647:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7ba8b0 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x7ba8b0 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7efba8b0; op2val:0xfefba8b0; 
   valaddr_reg:x12; val_offset:1252*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x12, 1252*FLEN/8, x13, x9, x10)

inst_648:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7ba8b0 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x7ba8b0 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7efba8b0; op2val:0xfefba8b0; 
   valaddr_reg:x12; val_offset:1254*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x12, 1254*FLEN/8, x13, x9, x10)

inst_649:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7ba8b0 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x7ba8b0 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7efba8b0; op2val:0xfefba8b0; 
   valaddr_reg:x12; val_offset:1256*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x12, 1256*FLEN/8, x13, x9, x10)

inst_650:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d5201 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x2d5201 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f2d5201; op2val:0xff2d5201; 
   valaddr_reg:x12; val_offset:1258*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x12, 1258*FLEN/8, x13, x9, x10)

inst_651:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d5201 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x2d5201 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f2d5201; op2val:0xff2d5201; 
   valaddr_reg:x12; val_offset:1260*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x12, 1260*FLEN/8, x13, x9, x10)

inst_652:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d5201 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x2d5201 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f2d5201; op2val:0xff2d5201; 
   valaddr_reg:x12; val_offset:1262*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x12, 1262*FLEN/8, x13, x9, x10)

inst_653:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d5201 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x2d5201 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f2d5201; op2val:0xff2d5201; 
   valaddr_reg:x12; val_offset:1264*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x12, 1264*FLEN/8, x13, x9, x10)

inst_654:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d5201 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x2d5201 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f2d5201; op2val:0xff2d5201; 
   valaddr_reg:x12; val_offset:1266*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x12, 1266*FLEN/8, x13, x9, x10)

inst_655:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0f0540 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x0f0540 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7e8f0540; op2val:0xfe8f0540; 
   valaddr_reg:x12; val_offset:1268*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x12, 1268*FLEN/8, x13, x9, x10)

inst_656:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0f0540 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x0f0540 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7e8f0540; op2val:0xfe8f0540; 
   valaddr_reg:x12; val_offset:1270*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x12, 1270*FLEN/8, x13, x9, x10)

inst_657:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0f0540 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x0f0540 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7e8f0540; op2val:0xfe8f0540; 
   valaddr_reg:x12; val_offset:1272*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x12, 1272*FLEN/8, x13, x9, x10)

inst_658:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0f0540 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x0f0540 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7e8f0540; op2val:0xfe8f0540; 
   valaddr_reg:x12; val_offset:1274*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x12, 1274*FLEN/8, x13, x9, x10)

inst_659:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0f0540 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x0f0540 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7e8f0540; op2val:0xfe8f0540; 
   valaddr_reg:x12; val_offset:1276*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x12, 1276*FLEN/8, x13, x9, x10)

inst_660:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1f9fcf and fs2 == 1 and fe2 == 0xfc and fm2 == 0x1f9fcf and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7e1f9fcf; op2val:0xfe1f9fcf; 
   valaddr_reg:x12; val_offset:1278*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x12, 1278*FLEN/8, x13, x9, x10)

inst_661:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1f9fcf and fs2 == 1 and fe2 == 0xfc and fm2 == 0x1f9fcf and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7e1f9fcf; op2val:0xfe1f9fcf; 
   valaddr_reg:x12; val_offset:1280*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x12, 1280*FLEN/8, x13, x9, x10)

inst_662:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1f9fcf and fs2 == 1 and fe2 == 0xfc and fm2 == 0x1f9fcf and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7e1f9fcf; op2val:0xfe1f9fcf; 
   valaddr_reg:x12; val_offset:1282*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x12, 1282*FLEN/8, x13, x9, x10)

inst_663:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1f9fcf and fs2 == 1 and fe2 == 0xfc and fm2 == 0x1f9fcf and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7e1f9fcf; op2val:0xfe1f9fcf; 
   valaddr_reg:x12; val_offset:1284*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x12, 1284*FLEN/8, x13, x9, x10)
RVTEST_SIGBASE(x9,signature_x9_5)

inst_664:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1f9fcf and fs2 == 1 and fe2 == 0xfc and fm2 == 0x1f9fcf and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7e1f9fcf; op2val:0xfe1f9fcf; 
   valaddr_reg:x12; val_offset:1286*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x12, 1286*FLEN/8, x13, x9, x10)

inst_665:
// fs1 == 0 and fe1 == 0xf7 and fm1 == 0x5aa799 and fs2 == 1 and fe2 == 0xf7 and fm2 == 0x5aa799 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7bdaa799; op2val:0xfbdaa799; 
   valaddr_reg:x12; val_offset:1288*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x12, 1288*FLEN/8, x13, x9, x10)

inst_666:
// fs1 == 0 and fe1 == 0xf7 and fm1 == 0x5aa799 and fs2 == 1 and fe2 == 0xf7 and fm2 == 0x5aa799 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7bdaa799; op2val:0xfbdaa799; 
   valaddr_reg:x12; val_offset:1290*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x12, 1290*FLEN/8, x13, x9, x10)

inst_667:
// fs1 == 0 and fe1 == 0xf7 and fm1 == 0x5aa799 and fs2 == 1 and fe2 == 0xf7 and fm2 == 0x5aa799 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7bdaa799; op2val:0xfbdaa799; 
   valaddr_reg:x12; val_offset:1292*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x12, 1292*FLEN/8, x13, x9, x10)

inst_668:
// fs1 == 0 and fe1 == 0xf7 and fm1 == 0x5aa799 and fs2 == 1 and fe2 == 0xf7 and fm2 == 0x5aa799 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7bdaa799; op2val:0xfbdaa799; 
   valaddr_reg:x12; val_offset:1294*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x12, 1294*FLEN/8, x13, x9, x10)

inst_669:
// fs1 == 0 and fe1 == 0xf7 and fm1 == 0x5aa799 and fs2 == 1 and fe2 == 0xf7 and fm2 == 0x5aa799 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7bdaa799; op2val:0xfbdaa799; 
   valaddr_reg:x12; val_offset:1296*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x12, 1296*FLEN/8, x13, x9, x10)

inst_670:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x000760 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x000760 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7e800760; op2val:0xfe800760; 
   valaddr_reg:x12; val_offset:1298*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x12, 1298*FLEN/8, x13, x9, x10)

inst_671:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x000760 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x000760 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7e800760; op2val:0xfe800760; 
   valaddr_reg:x12; val_offset:1300*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x12, 1300*FLEN/8, x13, x9, x10)

inst_672:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x000760 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x000760 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7e800760; op2val:0xfe800760; 
   valaddr_reg:x12; val_offset:1302*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x12, 1302*FLEN/8, x13, x9, x10)

inst_673:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x000760 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x000760 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7e800760; op2val:0xfe800760; 
   valaddr_reg:x12; val_offset:1304*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x12, 1304*FLEN/8, x13, x9, x10)

inst_674:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x000760 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x000760 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7e800760; op2val:0xfe800760; 
   valaddr_reg:x12; val_offset:1306*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x12, 1306*FLEN/8, x13, x9, x10)

inst_675:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09f3ae and fs2 == 1 and fe2 == 0xfe and fm2 == 0x09f3ae and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f09f3ae; op2val:0xff09f3ae; 
   valaddr_reg:x12; val_offset:1308*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x12, 1308*FLEN/8, x13, x9, x10)

inst_676:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09f3ae and fs2 == 1 and fe2 == 0xfe and fm2 == 0x09f3ae and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f09f3ae; op2val:0xff09f3ae; 
   valaddr_reg:x12; val_offset:1310*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x12, 1310*FLEN/8, x13, x9, x10)

inst_677:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09f3ae and fs2 == 1 and fe2 == 0xfe and fm2 == 0x09f3ae and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f09f3ae; op2val:0xff09f3ae; 
   valaddr_reg:x12; val_offset:1312*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x12, 1312*FLEN/8, x13, x9, x10)

inst_678:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09f3ae and fs2 == 1 and fe2 == 0xfe and fm2 == 0x09f3ae and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f09f3ae; op2val:0xff09f3ae; 
   valaddr_reg:x12; val_offset:1314*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x12, 1314*FLEN/8, x13, x9, x10)

inst_679:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09f3ae and fs2 == 1 and fe2 == 0xfe and fm2 == 0x09f3ae and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f09f3ae; op2val:0xff09f3ae; 
   valaddr_reg:x12; val_offset:1316*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x12, 1316*FLEN/8, x13, x9, x10)

inst_680:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6e4960 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x6e4960 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7eee4960; op2val:0xfeee4960; 
   valaddr_reg:x12; val_offset:1318*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x12, 1318*FLEN/8, x13, x9, x10)

inst_681:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6e4960 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x6e4960 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7eee4960; op2val:0xfeee4960; 
   valaddr_reg:x12; val_offset:1320*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x12, 1320*FLEN/8, x13, x9, x10)

inst_682:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6e4960 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x6e4960 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7eee4960; op2val:0xfeee4960; 
   valaddr_reg:x12; val_offset:1322*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x12, 1322*FLEN/8, x13, x9, x10)

inst_683:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6e4960 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x6e4960 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7eee4960; op2val:0xfeee4960; 
   valaddr_reg:x12; val_offset:1324*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x12, 1324*FLEN/8, x13, x9, x10)

inst_684:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6e4960 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x6e4960 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7eee4960; op2val:0xfeee4960; 
   valaddr_reg:x12; val_offset:1326*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x12, 1326*FLEN/8, x13, x9, x10)

inst_685:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7bb095 and fs2 == 1 and fe2 == 0xfb and fm2 == 0x7bb095 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7dfbb095; op2val:0xfdfbb095; 
   valaddr_reg:x12; val_offset:1328*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x12, 1328*FLEN/8, x13, x9, x10)

inst_686:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7bb095 and fs2 == 1 and fe2 == 0xfb and fm2 == 0x7bb095 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7dfbb095; op2val:0xfdfbb095; 
   valaddr_reg:x12; val_offset:1330*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x12, 1330*FLEN/8, x13, x9, x10)

inst_687:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7bb095 and fs2 == 1 and fe2 == 0xfb and fm2 == 0x7bb095 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7dfbb095; op2val:0xfdfbb095; 
   valaddr_reg:x12; val_offset:1332*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x12, 1332*FLEN/8, x13, x9, x10)

inst_688:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7bb095 and fs2 == 1 and fe2 == 0xfb and fm2 == 0x7bb095 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7dfbb095; op2val:0xfdfbb095; 
   valaddr_reg:x12; val_offset:1334*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x12, 1334*FLEN/8, x13, x9, x10)

inst_689:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7bb095 and fs2 == 1 and fe2 == 0xfb and fm2 == 0x7bb095 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7dfbb095; op2val:0xfdfbb095; 
   valaddr_reg:x12; val_offset:1336*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x12, 1336*FLEN/8, x13, x9, x10)

inst_690:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x5e5c14 and fs2 == 1 and fe2 == 0xfc and fm2 == 0x5e5c14 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7e5e5c14; op2val:0xfe5e5c14; 
   valaddr_reg:x12; val_offset:1338*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x12, 1338*FLEN/8, x13, x9, x10)

inst_691:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x5e5c14 and fs2 == 1 and fe2 == 0xfc and fm2 == 0x5e5c14 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7e5e5c14; op2val:0xfe5e5c14; 
   valaddr_reg:x12; val_offset:1340*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x12, 1340*FLEN/8, x13, x9, x10)

inst_692:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x5e5c14 and fs2 == 1 and fe2 == 0xfc and fm2 == 0x5e5c14 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7e5e5c14; op2val:0xfe5e5c14; 
   valaddr_reg:x12; val_offset:1342*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x12, 1342*FLEN/8, x13, x9, x10)

inst_693:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x5e5c14 and fs2 == 1 and fe2 == 0xfc and fm2 == 0x5e5c14 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7e5e5c14; op2val:0xfe5e5c14; 
   valaddr_reg:x12; val_offset:1344*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x12, 1344*FLEN/8, x13, x9, x10)

inst_694:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x5e5c14 and fs2 == 1 and fe2 == 0xfc and fm2 == 0x5e5c14 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7e5e5c14; op2val:0xfe5e5c14; 
   valaddr_reg:x12; val_offset:1346*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x12, 1346*FLEN/8, x13, x9, x10)

inst_695:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x529e32 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x529e32 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7ed29e32; op2val:0xfed29e32; 
   valaddr_reg:x12; val_offset:1348*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x12, 1348*FLEN/8, x13, x9, x10)

inst_696:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x529e32 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x529e32 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7ed29e32; op2val:0xfed29e32; 
   valaddr_reg:x12; val_offset:1350*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x12, 1350*FLEN/8, x13, x9, x10)

inst_697:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x529e32 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x529e32 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7ed29e32; op2val:0xfed29e32; 
   valaddr_reg:x12; val_offset:1352*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x12, 1352*FLEN/8, x13, x9, x10)

inst_698:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x529e32 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x529e32 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7ed29e32; op2val:0xfed29e32; 
   valaddr_reg:x12; val_offset:1354*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x12, 1354*FLEN/8, x13, x9, x10)

inst_699:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x529e32 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x529e32 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7ed29e32; op2val:0xfed29e32; 
   valaddr_reg:x12; val_offset:1356*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x12, 1356*FLEN/8, x13, x9, x10)

inst_700:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3793aa and fs2 == 1 and fe2 == 0xfd and fm2 == 0x3793aa and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7eb793aa; op2val:0xfeb793aa; 
   valaddr_reg:x12; val_offset:1358*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x12, 1358*FLEN/8, x13, x9, x10)

inst_701:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3793aa and fs2 == 1 and fe2 == 0xfd and fm2 == 0x3793aa and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7eb793aa; op2val:0xfeb793aa; 
   valaddr_reg:x12; val_offset:1360*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x12, 1360*FLEN/8, x13, x9, x10)

inst_702:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3793aa and fs2 == 1 and fe2 == 0xfd and fm2 == 0x3793aa and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7eb793aa; op2val:0xfeb793aa; 
   valaddr_reg:x12; val_offset:1362*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x12, 1362*FLEN/8, x13, x9, x10)

inst_703:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3793aa and fs2 == 1 and fe2 == 0xfd and fm2 == 0x3793aa and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7eb793aa; op2val:0xfeb793aa; 
   valaddr_reg:x12; val_offset:1364*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x12, 1364*FLEN/8, x13, x9, x10)

inst_704:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3793aa and fs2 == 1 and fe2 == 0xfd and fm2 == 0x3793aa and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7eb793aa; op2val:0xfeb793aa; 
   valaddr_reg:x12; val_offset:1366*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x12, 1366*FLEN/8, x13, x9, x10)

inst_705:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x143e58 and fs2 == 1 and fe2 == 0xfa and fm2 == 0x143e58 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7d143e58; op2val:0xfd143e58; 
   valaddr_reg:x12; val_offset:1368*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x12, 1368*FLEN/8, x13, x9, x10)

inst_706:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x143e58 and fs2 == 1 and fe2 == 0xfa and fm2 == 0x143e58 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7d143e58; op2val:0xfd143e58; 
   valaddr_reg:x12; val_offset:1370*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x12, 1370*FLEN/8, x13, x9, x10)

inst_707:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x143e58 and fs2 == 1 and fe2 == 0xfa and fm2 == 0x143e58 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7d143e58; op2val:0xfd143e58; 
   valaddr_reg:x12; val_offset:1372*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x12, 1372*FLEN/8, x13, x9, x10)

inst_708:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x143e58 and fs2 == 1 and fe2 == 0xfa and fm2 == 0x143e58 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7d143e58; op2val:0xfd143e58; 
   valaddr_reg:x12; val_offset:1374*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x12, 1374*FLEN/8, x13, x9, x10)

inst_709:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x143e58 and fs2 == 1 and fe2 == 0xfa and fm2 == 0x143e58 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7d143e58; op2val:0xfd143e58; 
   valaddr_reg:x12; val_offset:1376*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x12, 1376*FLEN/8, x13, x9, x10)

inst_710:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x48d9ed and fs2 == 1 and fe2 == 0xfd and fm2 == 0x48d9ed and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7ec8d9ed; op2val:0xfec8d9ed; 
   valaddr_reg:x12; val_offset:1378*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x12, 1378*FLEN/8, x13, x9, x10)

inst_711:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x48d9ed and fs2 == 1 and fe2 == 0xfd and fm2 == 0x48d9ed and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7ec8d9ed; op2val:0xfec8d9ed; 
   valaddr_reg:x12; val_offset:1380*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x12, 1380*FLEN/8, x13, x9, x10)

inst_712:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x48d9ed and fs2 == 1 and fe2 == 0xfd and fm2 == 0x48d9ed and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7ec8d9ed; op2val:0xfec8d9ed; 
   valaddr_reg:x12; val_offset:1382*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x12, 1382*FLEN/8, x13, x9, x10)

inst_713:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x48d9ed and fs2 == 1 and fe2 == 0xfd and fm2 == 0x48d9ed and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7ec8d9ed; op2val:0xfec8d9ed; 
   valaddr_reg:x12; val_offset:1384*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x12, 1384*FLEN/8, x13, x9, x10)

inst_714:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x48d9ed and fs2 == 1 and fe2 == 0xfd and fm2 == 0x48d9ed and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7ec8d9ed; op2val:0xfec8d9ed; 
   valaddr_reg:x12; val_offset:1386*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x12, 1386*FLEN/8, x13, x9, x10)

inst_715:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1ad123 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x1ad123 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7e9ad123; op2val:0xfe9ad123; 
   valaddr_reg:x12; val_offset:1388*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x12, 1388*FLEN/8, x13, x9, x10)

inst_716:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1ad123 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x1ad123 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7e9ad123; op2val:0xfe9ad123; 
   valaddr_reg:x12; val_offset:1390*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x12, 1390*FLEN/8, x13, x9, x10)

inst_717:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1ad123 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x1ad123 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7e9ad123; op2val:0xfe9ad123; 
   valaddr_reg:x12; val_offset:1392*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x12, 1392*FLEN/8, x13, x9, x10)

inst_718:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1ad123 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x1ad123 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7e9ad123; op2val:0xfe9ad123; 
   valaddr_reg:x12; val_offset:1394*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x12, 1394*FLEN/8, x13, x9, x10)

inst_719:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1ad123 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x1ad123 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7e9ad123; op2val:0xfe9ad123; 
   valaddr_reg:x12; val_offset:1396*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x12, 1396*FLEN/8, x13, x9, x10)

inst_720:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1f40ca and fs2 == 1 and fe2 == 0xfd and fm2 == 0x1f40ca and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7e9f40ca; op2val:0xfe9f40ca; 
   valaddr_reg:x12; val_offset:1398*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x12, 1398*FLEN/8, x13, x9, x10)

inst_721:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1f40ca and fs2 == 1 and fe2 == 0xfd and fm2 == 0x1f40ca and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7e9f40ca; op2val:0xfe9f40ca; 
   valaddr_reg:x12; val_offset:1400*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x12, 1400*FLEN/8, x13, x9, x10)

inst_722:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1f40ca and fs2 == 1 and fe2 == 0xfd and fm2 == 0x1f40ca and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7e9f40ca; op2val:0xfe9f40ca; 
   valaddr_reg:x12; val_offset:1402*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x12, 1402*FLEN/8, x13, x9, x10)

inst_723:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1f40ca and fs2 == 1 and fe2 == 0xfd and fm2 == 0x1f40ca and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7e9f40ca; op2val:0xfe9f40ca; 
   valaddr_reg:x12; val_offset:1404*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x12, 1404*FLEN/8, x13, x9, x10)

inst_724:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1f40ca and fs2 == 1 and fe2 == 0xfd and fm2 == 0x1f40ca and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7e9f40ca; op2val:0xfe9f40ca; 
   valaddr_reg:x12; val_offset:1406*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x12, 1406*FLEN/8, x13, x9, x10)

inst_725:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2e7655 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x2e7655 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f2e7655; op2val:0xff2e7655; 
   valaddr_reg:x12; val_offset:1408*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x12, 1408*FLEN/8, x13, x9, x10)

inst_726:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2e7655 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x2e7655 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f2e7655; op2val:0xff2e7655; 
   valaddr_reg:x12; val_offset:1410*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x12, 1410*FLEN/8, x13, x9, x10)

inst_727:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2e7655 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x2e7655 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f2e7655; op2val:0xff2e7655; 
   valaddr_reg:x12; val_offset:1412*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x12, 1412*FLEN/8, x13, x9, x10)

inst_728:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2e7655 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x2e7655 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f2e7655; op2val:0xff2e7655; 
   valaddr_reg:x12; val_offset:1414*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x12, 1414*FLEN/8, x13, x9, x10)

inst_729:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2e7655 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x2e7655 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f2e7655; op2val:0xff2e7655; 
   valaddr_reg:x12; val_offset:1416*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x12, 1416*FLEN/8, x13, x9, x10)

inst_730:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x217160 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x217160 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f217160; op2val:0xff217160; 
   valaddr_reg:x12; val_offset:1418*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x12, 1418*FLEN/8, x13, x9, x10)

inst_731:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x217160 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x217160 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f217160; op2val:0xff217160; 
   valaddr_reg:x12; val_offset:1420*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x12, 1420*FLEN/8, x13, x9, x10)

inst_732:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x217160 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x217160 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f217160; op2val:0xff217160; 
   valaddr_reg:x12; val_offset:1422*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x12, 1422*FLEN/8, x13, x9, x10)

inst_733:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x217160 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x217160 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f217160; op2val:0xff217160; 
   valaddr_reg:x12; val_offset:1424*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x12, 1424*FLEN/8, x13, x9, x10)

inst_734:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x217160 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x217160 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f217160; op2val:0xff217160; 
   valaddr_reg:x12; val_offset:1426*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x12, 1426*FLEN/8, x13, x9, x10)

inst_735:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x03f653 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x03f653 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7e83f653; op2val:0xfe83f653; 
   valaddr_reg:x12; val_offset:1428*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x12, 1428*FLEN/8, x13, x9, x10)

inst_736:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x03f653 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x03f653 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7e83f653; op2val:0xfe83f653; 
   valaddr_reg:x12; val_offset:1430*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x12, 1430*FLEN/8, x13, x9, x10)

inst_737:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x03f653 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x03f653 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7e83f653; op2val:0xfe83f653; 
   valaddr_reg:x12; val_offset:1432*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x12, 1432*FLEN/8, x13, x9, x10)

inst_738:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x03f653 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x03f653 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7e83f653; op2val:0xfe83f653; 
   valaddr_reg:x12; val_offset:1434*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x12, 1434*FLEN/8, x13, x9, x10)

inst_739:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x03f653 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x03f653 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7e83f653; op2val:0xfe83f653; 
   valaddr_reg:x12; val_offset:1436*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x12, 1436*FLEN/8, x13, x9, x10)

inst_740:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x065281 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x065281 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f065281; op2val:0xff065281; 
   valaddr_reg:x12; val_offset:1438*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x12, 1438*FLEN/8, x13, x9, x10)

inst_741:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x065281 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x065281 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f065281; op2val:0xff065281; 
   valaddr_reg:x12; val_offset:1440*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x12, 1440*FLEN/8, x13, x9, x10)

inst_742:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x065281 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x065281 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f065281; op2val:0xff065281; 
   valaddr_reg:x12; val_offset:1442*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x12, 1442*FLEN/8, x13, x9, x10)

inst_743:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x065281 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x065281 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f065281; op2val:0xff065281; 
   valaddr_reg:x12; val_offset:1444*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x12, 1444*FLEN/8, x13, x9, x10)

inst_744:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x065281 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x065281 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f065281; op2val:0xff065281; 
   valaddr_reg:x12; val_offset:1446*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x12, 1446*FLEN/8, x13, x9, x10)

inst_745:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x67dc90 and fs2 == 1 and fe2 == 0xfc and fm2 == 0x67dc90 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7e67dc90; op2val:0xfe67dc90; 
   valaddr_reg:x12; val_offset:1448*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x12, 1448*FLEN/8, x13, x9, x10)

inst_746:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x67dc90 and fs2 == 1 and fe2 == 0xfc and fm2 == 0x67dc90 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7e67dc90; op2val:0xfe67dc90; 
   valaddr_reg:x12; val_offset:1450*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x12, 1450*FLEN/8, x13, x9, x10)

inst_747:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x67dc90 and fs2 == 1 and fe2 == 0xfc and fm2 == 0x67dc90 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7e67dc90; op2val:0xfe67dc90; 
   valaddr_reg:x12; val_offset:1452*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x12, 1452*FLEN/8, x13, x9, x10)

inst_748:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x67dc90 and fs2 == 1 and fe2 == 0xfc and fm2 == 0x67dc90 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7e67dc90; op2val:0xfe67dc90; 
   valaddr_reg:x12; val_offset:1454*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x12, 1454*FLEN/8, x13, x9, x10)

inst_749:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x67dc90 and fs2 == 1 and fe2 == 0xfc and fm2 == 0x67dc90 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7e67dc90; op2val:0xfe67dc90; 
   valaddr_reg:x12; val_offset:1456*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x12, 1456*FLEN/8, x13, x9, x10)

inst_750:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2bb989 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x2bb989 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f2bb989; op2val:0xff2bb989; 
   valaddr_reg:x12; val_offset:1458*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x12, 1458*FLEN/8, x13, x9, x10)

inst_751:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2bb989 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x2bb989 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f2bb989; op2val:0xff2bb989; 
   valaddr_reg:x12; val_offset:1460*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x12, 1460*FLEN/8, x13, x9, x10)

inst_752:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2bb989 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x2bb989 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f2bb989; op2val:0xff2bb989; 
   valaddr_reg:x12; val_offset:1462*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x12, 1462*FLEN/8, x13, x9, x10)

inst_753:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2bb989 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x2bb989 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f2bb989; op2val:0xff2bb989; 
   valaddr_reg:x12; val_offset:1464*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x12, 1464*FLEN/8, x13, x9, x10)

inst_754:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2bb989 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x2bb989 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f2bb989; op2val:0xff2bb989; 
   valaddr_reg:x12; val_offset:1466*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x12, 1466*FLEN/8, x13, x9, x10)

inst_755:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x70ab3f and fs2 == 1 and fe2 == 0xfd and fm2 == 0x70ab3f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7ef0ab3f; op2val:0xfef0ab3f; 
   valaddr_reg:x12; val_offset:1468*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x12, 1468*FLEN/8, x13, x9, x10)

inst_756:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x70ab3f and fs2 == 1 and fe2 == 0xfd and fm2 == 0x70ab3f and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7ef0ab3f; op2val:0xfef0ab3f; 
   valaddr_reg:x12; val_offset:1470*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x12, 1470*FLEN/8, x13, x9, x10)

inst_757:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x70ab3f and fs2 == 1 and fe2 == 0xfd and fm2 == 0x70ab3f and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7ef0ab3f; op2val:0xfef0ab3f; 
   valaddr_reg:x12; val_offset:1472*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x12, 1472*FLEN/8, x13, x9, x10)

inst_758:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x70ab3f and fs2 == 1 and fe2 == 0xfd and fm2 == 0x70ab3f and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7ef0ab3f; op2val:0xfef0ab3f; 
   valaddr_reg:x12; val_offset:1474*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x12, 1474*FLEN/8, x13, x9, x10)

inst_759:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x70ab3f and fs2 == 1 and fe2 == 0xfd and fm2 == 0x70ab3f and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7ef0ab3f; op2val:0xfef0ab3f; 
   valaddr_reg:x12; val_offset:1476*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x12, 1476*FLEN/8, x13, x9, x10)

inst_760:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3b1d98 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x3b1d98 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f3b1d98; op2val:0xff3b1d98; 
   valaddr_reg:x12; val_offset:1478*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x12, 1478*FLEN/8, x13, x9, x10)

inst_761:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3b1d98 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x3b1d98 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f3b1d98; op2val:0xff3b1d98; 
   valaddr_reg:x12; val_offset:1480*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x12, 1480*FLEN/8, x13, x9, x10)

inst_762:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3b1d98 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x3b1d98 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f3b1d98; op2val:0xff3b1d98; 
   valaddr_reg:x12; val_offset:1482*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x12, 1482*FLEN/8, x13, x9, x10)

inst_763:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3b1d98 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x3b1d98 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f3b1d98; op2val:0xff3b1d98; 
   valaddr_reg:x12; val_offset:1484*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x12, 1484*FLEN/8, x13, x9, x10)

inst_764:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3b1d98 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x3b1d98 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f3b1d98; op2val:0xff3b1d98; 
   valaddr_reg:x12; val_offset:1486*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x12, 1486*FLEN/8, x13, x9, x10)

inst_765:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x4a3e7e and fs2 == 1 and fe2 == 0xfa and fm2 == 0x4a3e7e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7d4a3e7e; op2val:0xfd4a3e7e; 
   valaddr_reg:x12; val_offset:1488*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x12, 1488*FLEN/8, x13, x9, x10)

inst_766:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x4a3e7e and fs2 == 1 and fe2 == 0xfa and fm2 == 0x4a3e7e and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7d4a3e7e; op2val:0xfd4a3e7e; 
   valaddr_reg:x12; val_offset:1490*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x12, 1490*FLEN/8, x13, x9, x10)

inst_767:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x4a3e7e and fs2 == 1 and fe2 == 0xfa and fm2 == 0x4a3e7e and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7d4a3e7e; op2val:0xfd4a3e7e; 
   valaddr_reg:x12; val_offset:1492*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x12, 1492*FLEN/8, x13, x9, x10)

inst_768:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x4a3e7e and fs2 == 1 and fe2 == 0xfa and fm2 == 0x4a3e7e and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7d4a3e7e; op2val:0xfd4a3e7e; 
   valaddr_reg:x12; val_offset:1494*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x12, 1494*FLEN/8, x13, x9, x10)

inst_769:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x4a3e7e and fs2 == 1 and fe2 == 0xfa and fm2 == 0x4a3e7e and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7d4a3e7e; op2val:0xfd4a3e7e; 
   valaddr_reg:x12; val_offset:1496*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x12, 1496*FLEN/8, x13, x9, x10)

inst_770:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0ff996 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x0ff996 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f0ff996; op2val:0xff0ff996; 
   valaddr_reg:x12; val_offset:1498*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x12, 1498*FLEN/8, x13, x9, x10)

inst_771:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0ff996 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x0ff996 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f0ff996; op2val:0xff0ff996; 
   valaddr_reg:x12; val_offset:1500*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x12, 1500*FLEN/8, x13, x9, x10)

inst_772:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0ff996 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x0ff996 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f0ff996; op2val:0xff0ff996; 
   valaddr_reg:x12; val_offset:1502*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x12, 1502*FLEN/8, x13, x9, x10)

inst_773:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0ff996 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x0ff996 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f0ff996; op2val:0xff0ff996; 
   valaddr_reg:x12; val_offset:1504*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x12, 1504*FLEN/8, x13, x9, x10)

inst_774:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0ff996 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x0ff996 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f0ff996; op2val:0xff0ff996; 
   valaddr_reg:x12; val_offset:1506*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x12, 1506*FLEN/8, x13, x9, x10)

inst_775:
// fs1 == 0 and fe1 == 0xf7 and fm1 == 0x40f240 and fs2 == 1 and fe2 == 0xf7 and fm2 == 0x40f240 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7bc0f240; op2val:0xfbc0f240; 
   valaddr_reg:x12; val_offset:1508*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x12, 1508*FLEN/8, x13, x9, x10)

inst_776:
// fs1 == 0 and fe1 == 0xf7 and fm1 == 0x40f240 and fs2 == 1 and fe2 == 0xf7 and fm2 == 0x40f240 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7bc0f240; op2val:0xfbc0f240; 
   valaddr_reg:x12; val_offset:1510*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x12, 1510*FLEN/8, x13, x9, x10)

inst_777:
// fs1 == 0 and fe1 == 0xf7 and fm1 == 0x40f240 and fs2 == 1 and fe2 == 0xf7 and fm2 == 0x40f240 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7bc0f240; op2val:0xfbc0f240; 
   valaddr_reg:x12; val_offset:1512*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x12, 1512*FLEN/8, x13, x9, x10)

inst_778:
// fs1 == 0 and fe1 == 0xf7 and fm1 == 0x40f240 and fs2 == 1 and fe2 == 0xf7 and fm2 == 0x40f240 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7bc0f240; op2val:0xfbc0f240; 
   valaddr_reg:x12; val_offset:1514*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x12, 1514*FLEN/8, x13, x9, x10)

inst_779:
// fs1 == 0 and fe1 == 0xf7 and fm1 == 0x40f240 and fs2 == 1 and fe2 == 0xf7 and fm2 == 0x40f240 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7bc0f240; op2val:0xfbc0f240; 
   valaddr_reg:x12; val_offset:1516*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x12, 1516*FLEN/8, x13, x9, x10)

inst_780:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x474c23 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x474c23 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7ec74c23; op2val:0xfec74c23; 
   valaddr_reg:x12; val_offset:1518*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x12, 1518*FLEN/8, x13, x9, x10)

inst_781:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x474c23 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x474c23 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7ec74c23; op2val:0xfec74c23; 
   valaddr_reg:x12; val_offset:1520*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x12, 1520*FLEN/8, x13, x9, x10)

inst_782:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x474c23 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x474c23 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7ec74c23; op2val:0xfec74c23; 
   valaddr_reg:x12; val_offset:1522*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x12, 1522*FLEN/8, x13, x9, x10)

inst_783:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x474c23 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x474c23 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7ec74c23; op2val:0xfec74c23; 
   valaddr_reg:x12; val_offset:1524*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x12, 1524*FLEN/8, x13, x9, x10)

inst_784:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x474c23 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x474c23 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7ec74c23; op2val:0xfec74c23; 
   valaddr_reg:x12; val_offset:1526*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x12, 1526*FLEN/8, x13, x9, x10)

inst_785:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3ba12e and fs2 == 1 and fe2 == 0xfd and fm2 == 0x3ba12e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7ebba12e; op2val:0xfebba12e; 
   valaddr_reg:x12; val_offset:1528*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x12, 1528*FLEN/8, x13, x9, x10)

inst_786:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3ba12e and fs2 == 1 and fe2 == 0xfd and fm2 == 0x3ba12e and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7ebba12e; op2val:0xfebba12e; 
   valaddr_reg:x12; val_offset:1530*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x12, 1530*FLEN/8, x13, x9, x10)

inst_787:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3ba12e and fs2 == 1 and fe2 == 0xfd and fm2 == 0x3ba12e and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7ebba12e; op2val:0xfebba12e; 
   valaddr_reg:x12; val_offset:1532*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x12, 1532*FLEN/8, x13, x9, x10)

inst_788:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3ba12e and fs2 == 1 and fe2 == 0xfd and fm2 == 0x3ba12e and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7ebba12e; op2val:0xfebba12e; 
   valaddr_reg:x12; val_offset:1534*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x12, 1534*FLEN/8, x13, x9, x10)

inst_789:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3ba12e and fs2 == 1 and fe2 == 0xfd and fm2 == 0x3ba12e and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7ebba12e; op2val:0xfebba12e; 
   valaddr_reg:x12; val_offset:1536*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x12, 1536*FLEN/8, x13, x9, x10)

inst_790:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x026d14 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x026d14 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f026d14; op2val:0xff026d14; 
   valaddr_reg:x12; val_offset:1538*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x12, 1538*FLEN/8, x13, x9, x10)

inst_791:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x026d14 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x026d14 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f026d14; op2val:0xff026d14; 
   valaddr_reg:x12; val_offset:1540*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x12, 1540*FLEN/8, x13, x9, x10)
RVTEST_SIGBASE(x9,signature_x9_6)

inst_792:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x026d14 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x026d14 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f026d14; op2val:0xff026d14; 
   valaddr_reg:x12; val_offset:1542*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x12, 1542*FLEN/8, x13, x9, x10)

inst_793:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x026d14 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x026d14 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f026d14; op2val:0xff026d14; 
   valaddr_reg:x12; val_offset:1544*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x12, 1544*FLEN/8, x13, x9, x10)

inst_794:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x026d14 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x026d14 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f026d14; op2val:0xff026d14; 
   valaddr_reg:x12; val_offset:1546*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x12, 1546*FLEN/8, x13, x9, x10)

inst_795:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0d7074 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x0d7074 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7e8d7074; op2val:0xfe8d7074; 
   valaddr_reg:x12; val_offset:1548*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x12, 1548*FLEN/8, x13, x9, x10)

inst_796:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0d7074 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x0d7074 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7e8d7074; op2val:0xfe8d7074; 
   valaddr_reg:x12; val_offset:1550*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x12, 1550*FLEN/8, x13, x9, x10)

inst_797:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0d7074 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x0d7074 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7e8d7074; op2val:0xfe8d7074; 
   valaddr_reg:x12; val_offset:1552*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x12, 1552*FLEN/8, x13, x9, x10)

inst_798:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0d7074 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x0d7074 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7e8d7074; op2val:0xfe8d7074; 
   valaddr_reg:x12; val_offset:1554*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x12, 1554*FLEN/8, x13, x9, x10)

inst_799:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0d7074 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x0d7074 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7e8d7074; op2val:0xfe8d7074; 
   valaddr_reg:x12; val_offset:1556*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x12, 1556*FLEN/8, x13, x9, x10)

inst_800:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x486246 and fs2 == 1 and fe2 == 0xfc and fm2 == 0x486246 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7e486246; op2val:0xfe486246; 
   valaddr_reg:x12; val_offset:1558*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x12, 1558*FLEN/8, x13, x9, x10)

inst_801:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x486246 and fs2 == 1 and fe2 == 0xfc and fm2 == 0x486246 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7e486246; op2val:0xfe486246; 
   valaddr_reg:x12; val_offset:1560*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x12, 1560*FLEN/8, x13, x9, x10)

inst_802:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x486246 and fs2 == 1 and fe2 == 0xfc and fm2 == 0x486246 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7e486246; op2val:0xfe486246; 
   valaddr_reg:x12; val_offset:1562*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x12, 1562*FLEN/8, x13, x9, x10)

inst_803:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x486246 and fs2 == 1 and fe2 == 0xfc and fm2 == 0x486246 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7e486246; op2val:0xfe486246; 
   valaddr_reg:x12; val_offset:1564*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x12, 1564*FLEN/8, x13, x9, x10)

inst_804:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x486246 and fs2 == 1 and fe2 == 0xfc and fm2 == 0x486246 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7e486246; op2val:0xfe486246; 
   valaddr_reg:x12; val_offset:1566*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x12, 1566*FLEN/8, x13, x9, x10)

inst_805:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2596bf and fs2 == 1 and fe2 == 0xfd and fm2 == 0x2596bf and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7ea596bf; op2val:0xfea596bf; 
   valaddr_reg:x12; val_offset:1568*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x12, 1568*FLEN/8, x13, x9, x10)

inst_806:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2596bf and fs2 == 1 and fe2 == 0xfd and fm2 == 0x2596bf and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7ea596bf; op2val:0xfea596bf; 
   valaddr_reg:x12; val_offset:1570*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x12, 1570*FLEN/8, x13, x9, x10)

inst_807:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2596bf and fs2 == 1 and fe2 == 0xfd and fm2 == 0x2596bf and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7ea596bf; op2val:0xfea596bf; 
   valaddr_reg:x12; val_offset:1572*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x12, 1572*FLEN/8, x13, x9, x10)

inst_808:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2596bf and fs2 == 1 and fe2 == 0xfd and fm2 == 0x2596bf and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7ea596bf; op2val:0xfea596bf; 
   valaddr_reg:x12; val_offset:1574*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x12, 1574*FLEN/8, x13, x9, x10)

inst_809:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2596bf and fs2 == 1 and fe2 == 0xfd and fm2 == 0x2596bf and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7ea596bf; op2val:0xfea596bf; 
   valaddr_reg:x12; val_offset:1576*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x12, 1576*FLEN/8, x13, x9, x10)

inst_810:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x442bee and fs2 == 1 and fe2 == 0xfa and fm2 == 0x442bee and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7d442bee; op2val:0xfd442bee; 
   valaddr_reg:x12; val_offset:1578*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x12, 1578*FLEN/8, x13, x9, x10)

inst_811:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x442bee and fs2 == 1 and fe2 == 0xfa and fm2 == 0x442bee and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7d442bee; op2val:0xfd442bee; 
   valaddr_reg:x12; val_offset:1580*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x12, 1580*FLEN/8, x13, x9, x10)

inst_812:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x442bee and fs2 == 1 and fe2 == 0xfa and fm2 == 0x442bee and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7d442bee; op2val:0xfd442bee; 
   valaddr_reg:x12; val_offset:1582*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x12, 1582*FLEN/8, x13, x9, x10)

inst_813:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x442bee and fs2 == 1 and fe2 == 0xfa and fm2 == 0x442bee and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7d442bee; op2val:0xfd442bee; 
   valaddr_reg:x12; val_offset:1584*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x12, 1584*FLEN/8, x13, x9, x10)

inst_814:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x442bee and fs2 == 1 and fe2 == 0xfa and fm2 == 0x442bee and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7d442bee; op2val:0xfd442bee; 
   valaddr_reg:x12; val_offset:1586*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x12, 1586*FLEN/8, x13, x9, x10)

inst_815:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x06c8e8 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x06c8e8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f06c8e8; op2val:0xff06c8e8; 
   valaddr_reg:x12; val_offset:1588*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x12, 1588*FLEN/8, x13, x9, x10)

inst_816:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x06c8e8 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x06c8e8 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f06c8e8; op2val:0xff06c8e8; 
   valaddr_reg:x12; val_offset:1590*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x12, 1590*FLEN/8, x13, x9, x10)

inst_817:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x06c8e8 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x06c8e8 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f06c8e8; op2val:0xff06c8e8; 
   valaddr_reg:x12; val_offset:1592*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x12, 1592*FLEN/8, x13, x9, x10)

inst_818:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x06c8e8 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x06c8e8 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f06c8e8; op2val:0xff06c8e8; 
   valaddr_reg:x12; val_offset:1594*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x12, 1594*FLEN/8, x13, x9, x10)

inst_819:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x06c8e8 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x06c8e8 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f06c8e8; op2val:0xff06c8e8; 
   valaddr_reg:x12; val_offset:1596*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x12, 1596*FLEN/8, x13, x9, x10)

inst_820:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2d6b3e and fs2 == 1 and fe2 == 0xfd and fm2 == 0x2d6b3e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7ead6b3e; op2val:0xfead6b3e; 
   valaddr_reg:x12; val_offset:1598*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x12, 1598*FLEN/8, x13, x9, x10)

inst_821:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2d6b3e and fs2 == 1 and fe2 == 0xfd and fm2 == 0x2d6b3e and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7ead6b3e; op2val:0xfead6b3e; 
   valaddr_reg:x12; val_offset:1600*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x12, 1600*FLEN/8, x13, x9, x10)

inst_822:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2d6b3e and fs2 == 1 and fe2 == 0xfd and fm2 == 0x2d6b3e and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7ead6b3e; op2val:0xfead6b3e; 
   valaddr_reg:x12; val_offset:1602*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x12, 1602*FLEN/8, x13, x9, x10)

inst_823:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2d6b3e and fs2 == 1 and fe2 == 0xfd and fm2 == 0x2d6b3e and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7ead6b3e; op2val:0xfead6b3e; 
   valaddr_reg:x12; val_offset:1604*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x12, 1604*FLEN/8, x13, x9, x10)

inst_824:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2d6b3e and fs2 == 1 and fe2 == 0xfd and fm2 == 0x2d6b3e and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7ead6b3e; op2val:0xfead6b3e; 
   valaddr_reg:x12; val_offset:1606*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x12, 1606*FLEN/8, x13, x9, x10)

inst_825:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x36a56c and fs2 == 1 and fe2 == 0xfb and fm2 == 0x36a56c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7db6a56c; op2val:0xfdb6a56c; 
   valaddr_reg:x12; val_offset:1608*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x12, 1608*FLEN/8, x13, x9, x10)

inst_826:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x36a56c and fs2 == 1 and fe2 == 0xfb and fm2 == 0x36a56c and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7db6a56c; op2val:0xfdb6a56c; 
   valaddr_reg:x12; val_offset:1610*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x12, 1610*FLEN/8, x13, x9, x10)

inst_827:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x36a56c and fs2 == 1 and fe2 == 0xfb and fm2 == 0x36a56c and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7db6a56c; op2val:0xfdb6a56c; 
   valaddr_reg:x12; val_offset:1612*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x12, 1612*FLEN/8, x13, x9, x10)

inst_828:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x36a56c and fs2 == 1 and fe2 == 0xfb and fm2 == 0x36a56c and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7db6a56c; op2val:0xfdb6a56c; 
   valaddr_reg:x12; val_offset:1614*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x12, 1614*FLEN/8, x13, x9, x10)

inst_829:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x36a56c and fs2 == 1 and fe2 == 0xfb and fm2 == 0x36a56c and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7db6a56c; op2val:0xfdb6a56c; 
   valaddr_reg:x12; val_offset:1616*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x12, 1616*FLEN/8, x13, x9, x10)

inst_830:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1f2776 and fs2 == 1 and fe2 == 0xfc and fm2 == 0x1f2776 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7e1f2776; op2val:0xfe1f2776; 
   valaddr_reg:x12; val_offset:1618*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x12, 1618*FLEN/8, x13, x9, x10)

inst_831:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1f2776 and fs2 == 1 and fe2 == 0xfc and fm2 == 0x1f2776 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7e1f2776; op2val:0xfe1f2776; 
   valaddr_reg:x12; val_offset:1620*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x12, 1620*FLEN/8, x13, x9, x10)

inst_832:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1f2776 and fs2 == 1 and fe2 == 0xfc and fm2 == 0x1f2776 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7e1f2776; op2val:0xfe1f2776; 
   valaddr_reg:x12; val_offset:1622*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x12, 1622*FLEN/8, x13, x9, x10)

inst_833:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1f2776 and fs2 == 1 and fe2 == 0xfc and fm2 == 0x1f2776 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7e1f2776; op2val:0xfe1f2776; 
   valaddr_reg:x12; val_offset:1624*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x12, 1624*FLEN/8, x13, x9, x10)

inst_834:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1f2776 and fs2 == 1 and fe2 == 0xfc and fm2 == 0x1f2776 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7e1f2776; op2val:0xfe1f2776; 
   valaddr_reg:x12; val_offset:1626*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x12, 1626*FLEN/8, x13, x9, x10)

inst_835:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x360231 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x360231 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f360231; op2val:0xff360231; 
   valaddr_reg:x12; val_offset:1628*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x12, 1628*FLEN/8, x13, x9, x10)

inst_836:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x360231 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x360231 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f360231; op2val:0xff360231; 
   valaddr_reg:x12; val_offset:1630*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x12, 1630*FLEN/8, x13, x9, x10)

inst_837:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x360231 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x360231 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f360231; op2val:0xff360231; 
   valaddr_reg:x12; val_offset:1632*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x12, 1632*FLEN/8, x13, x9, x10)

inst_838:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x360231 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x360231 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f360231; op2val:0xff360231; 
   valaddr_reg:x12; val_offset:1634*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x12, 1634*FLEN/8, x13, x9, x10)

inst_839:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x360231 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x360231 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f360231; op2val:0xff360231; 
   valaddr_reg:x12; val_offset:1636*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x12, 1636*FLEN/8, x13, x9, x10)

inst_840:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x60ccec and fs2 == 1 and fe2 == 0xfb and fm2 == 0x60ccec and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7de0ccec; op2val:0xfde0ccec; 
   valaddr_reg:x12; val_offset:1638*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x12, 1638*FLEN/8, x13, x9, x10)

inst_841:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x60ccec and fs2 == 1 and fe2 == 0xfb and fm2 == 0x60ccec and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7de0ccec; op2val:0xfde0ccec; 
   valaddr_reg:x12; val_offset:1640*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x12, 1640*FLEN/8, x13, x9, x10)

inst_842:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x60ccec and fs2 == 1 and fe2 == 0xfb and fm2 == 0x60ccec and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7de0ccec; op2val:0xfde0ccec; 
   valaddr_reg:x12; val_offset:1642*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x12, 1642*FLEN/8, x13, x9, x10)

inst_843:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x60ccec and fs2 == 1 and fe2 == 0xfb and fm2 == 0x60ccec and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7de0ccec; op2val:0xfde0ccec; 
   valaddr_reg:x12; val_offset:1644*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x12, 1644*FLEN/8, x13, x9, x10)

inst_844:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x60ccec and fs2 == 1 and fe2 == 0xfb and fm2 == 0x60ccec and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7de0ccec; op2val:0xfde0ccec; 
   valaddr_reg:x12; val_offset:1646*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x12, 1646*FLEN/8, x13, x9, x10)

inst_845:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x112a0d and fs2 == 1 and fe2 == 0xfd and fm2 == 0x112a0d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7e912a0d; op2val:0xfe912a0d; 
   valaddr_reg:x12; val_offset:1648*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x12, 1648*FLEN/8, x13, x9, x10)

inst_846:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x112a0d and fs2 == 1 and fe2 == 0xfd and fm2 == 0x112a0d and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7e912a0d; op2val:0xfe912a0d; 
   valaddr_reg:x12; val_offset:1650*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x12, 1650*FLEN/8, x13, x9, x10)

inst_847:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x112a0d and fs2 == 1 and fe2 == 0xfd and fm2 == 0x112a0d and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7e912a0d; op2val:0xfe912a0d; 
   valaddr_reg:x12; val_offset:1652*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x12, 1652*FLEN/8, x13, x9, x10)

inst_848:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x112a0d and fs2 == 1 and fe2 == 0xfd and fm2 == 0x112a0d and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7e912a0d; op2val:0xfe912a0d; 
   valaddr_reg:x12; val_offset:1654*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x12, 1654*FLEN/8, x13, x9, x10)

inst_849:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x112a0d and fs2 == 1 and fe2 == 0xfd and fm2 == 0x112a0d and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7e912a0d; op2val:0xfe912a0d; 
   valaddr_reg:x12; val_offset:1656*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x12, 1656*FLEN/8, x13, x9, x10)

inst_850:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x687317 and fs2 == 1 and fe2 == 0xfb and fm2 == 0x687317 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7de87317; op2val:0xfde87317; 
   valaddr_reg:x12; val_offset:1658*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x12, 1658*FLEN/8, x13, x9, x10)

inst_851:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x687317 and fs2 == 1 and fe2 == 0xfb and fm2 == 0x687317 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7de87317; op2val:0xfde87317; 
   valaddr_reg:x12; val_offset:1660*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x12, 1660*FLEN/8, x13, x9, x10)

inst_852:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x687317 and fs2 == 1 and fe2 == 0xfb and fm2 == 0x687317 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7de87317; op2val:0xfde87317; 
   valaddr_reg:x12; val_offset:1662*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x12, 1662*FLEN/8, x13, x9, x10)

inst_853:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x687317 and fs2 == 1 and fe2 == 0xfb and fm2 == 0x687317 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7de87317; op2val:0xfde87317; 
   valaddr_reg:x12; val_offset:1664*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x12, 1664*FLEN/8, x13, x9, x10)

inst_854:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x687317 and fs2 == 1 and fe2 == 0xfb and fm2 == 0x687317 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7de87317; op2val:0xfde87317; 
   valaddr_reg:x12; val_offset:1666*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x12, 1666*FLEN/8, x13, x9, x10)

inst_855:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3cbbe2 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x3cbbe2 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f3cbbe2; op2val:0xff3cbbe2; 
   valaddr_reg:x12; val_offset:1668*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x12, 1668*FLEN/8, x13, x9, x10)

inst_856:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3cbbe2 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x3cbbe2 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f3cbbe2; op2val:0xff3cbbe2; 
   valaddr_reg:x12; val_offset:1670*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x12, 1670*FLEN/8, x13, x9, x10)

inst_857:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3cbbe2 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x3cbbe2 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f3cbbe2; op2val:0xff3cbbe2; 
   valaddr_reg:x12; val_offset:1672*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x12, 1672*FLEN/8, x13, x9, x10)

inst_858:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3cbbe2 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x3cbbe2 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f3cbbe2; op2val:0xff3cbbe2; 
   valaddr_reg:x12; val_offset:1674*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x12, 1674*FLEN/8, x13, x9, x10)

inst_859:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3cbbe2 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x3cbbe2 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f3cbbe2; op2val:0xff3cbbe2; 
   valaddr_reg:x12; val_offset:1676*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x12, 1676*FLEN/8, x13, x9, x10)

inst_860:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1bde44 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x1bde44 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7e9bde44; op2val:0xfe9bde44; 
   valaddr_reg:x12; val_offset:1678*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x12, 1678*FLEN/8, x13, x9, x10)

inst_861:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1bde44 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x1bde44 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7e9bde44; op2val:0xfe9bde44; 
   valaddr_reg:x12; val_offset:1680*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x12, 1680*FLEN/8, x13, x9, x10)

inst_862:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1bde44 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x1bde44 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7e9bde44; op2val:0xfe9bde44; 
   valaddr_reg:x12; val_offset:1682*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x12, 1682*FLEN/8, x13, x9, x10)

inst_863:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1bde44 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x1bde44 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7e9bde44; op2val:0xfe9bde44; 
   valaddr_reg:x12; val_offset:1684*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x12, 1684*FLEN/8, x13, x9, x10)

inst_864:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1bde44 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x1bde44 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7e9bde44; op2val:0xfe9bde44; 
   valaddr_reg:x12; val_offset:1686*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x12, 1686*FLEN/8, x13, x9, x10)

inst_865:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x288293 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x288293 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f288293; op2val:0xff288293; 
   valaddr_reg:x12; val_offset:1688*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x12, 1688*FLEN/8, x13, x9, x10)

inst_866:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x288293 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x288293 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f288293; op2val:0xff288293; 
   valaddr_reg:x12; val_offset:1690*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x12, 1690*FLEN/8, x13, x9, x10)

inst_867:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x288293 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x288293 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f288293; op2val:0xff288293; 
   valaddr_reg:x12; val_offset:1692*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x12, 1692*FLEN/8, x13, x9, x10)

inst_868:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x288293 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x288293 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f288293; op2val:0xff288293; 
   valaddr_reg:x12; val_offset:1694*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x12, 1694*FLEN/8, x13, x9, x10)

inst_869:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x288293 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x288293 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f288293; op2val:0xff288293; 
   valaddr_reg:x12; val_offset:1696*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x12, 1696*FLEN/8, x13, x9, x10)

inst_870:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3012ad and fs2 == 1 and fe2 == 0xfe and fm2 == 0x3012ad and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f3012ad; op2val:0xff3012ad; 
   valaddr_reg:x12; val_offset:1698*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x12, 1698*FLEN/8, x13, x9, x10)

inst_871:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3012ad and fs2 == 1 and fe2 == 0xfe and fm2 == 0x3012ad and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f3012ad; op2val:0xff3012ad; 
   valaddr_reg:x12; val_offset:1700*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x12, 1700*FLEN/8, x13, x9, x10)

inst_872:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3012ad and fs2 == 1 and fe2 == 0xfe and fm2 == 0x3012ad and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f3012ad; op2val:0xff3012ad; 
   valaddr_reg:x12; val_offset:1702*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x12, 1702*FLEN/8, x13, x9, x10)

inst_873:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3012ad and fs2 == 1 and fe2 == 0xfe and fm2 == 0x3012ad and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f3012ad; op2val:0xff3012ad; 
   valaddr_reg:x12; val_offset:1704*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x12, 1704*FLEN/8, x13, x9, x10)

inst_874:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3012ad and fs2 == 1 and fe2 == 0xfe and fm2 == 0x3012ad and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f3012ad; op2val:0xff3012ad; 
   valaddr_reg:x12; val_offset:1706*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x12, 1706*FLEN/8, x13, x9, x10)

inst_875:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3f66bb and fs2 == 1 and fe2 == 0xfd and fm2 == 0x3f66bb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7ebf66bb; op2val:0xfebf66bb; 
   valaddr_reg:x12; val_offset:1708*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x12, 1708*FLEN/8, x13, x9, x10)

inst_876:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3f66bb and fs2 == 1 and fe2 == 0xfd and fm2 == 0x3f66bb and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7ebf66bb; op2val:0xfebf66bb; 
   valaddr_reg:x12; val_offset:1710*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x12, 1710*FLEN/8, x13, x9, x10)

inst_877:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3f66bb and fs2 == 1 and fe2 == 0xfd and fm2 == 0x3f66bb and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7ebf66bb; op2val:0xfebf66bb; 
   valaddr_reg:x12; val_offset:1712*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x12, 1712*FLEN/8, x13, x9, x10)

inst_878:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3f66bb and fs2 == 1 and fe2 == 0xfd and fm2 == 0x3f66bb and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7ebf66bb; op2val:0xfebf66bb; 
   valaddr_reg:x12; val_offset:1714*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x12, 1714*FLEN/8, x13, x9, x10)

inst_879:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3f66bb and fs2 == 1 and fe2 == 0xfd and fm2 == 0x3f66bb and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7ebf66bb; op2val:0xfebf66bb; 
   valaddr_reg:x12; val_offset:1716*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x12, 1716*FLEN/8, x13, x9, x10)

inst_880:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00a730 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x00a730 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f00a730; op2val:0xff00a730; 
   valaddr_reg:x12; val_offset:1718*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x12, 1718*FLEN/8, x13, x9, x10)

inst_881:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00a730 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x00a730 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f00a730; op2val:0xff00a730; 
   valaddr_reg:x12; val_offset:1720*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x12, 1720*FLEN/8, x13, x9, x10)

inst_882:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00a730 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x00a730 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f00a730; op2val:0xff00a730; 
   valaddr_reg:x12; val_offset:1722*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x12, 1722*FLEN/8, x13, x9, x10)

inst_883:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00a730 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x00a730 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f00a730; op2val:0xff00a730; 
   valaddr_reg:x12; val_offset:1724*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x12, 1724*FLEN/8, x13, x9, x10)

inst_884:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00a730 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x00a730 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f00a730; op2val:0xff00a730; 
   valaddr_reg:x12; val_offset:1726*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x12, 1726*FLEN/8, x13, x9, x10)

inst_885:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6a26e3 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x6a26e3 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7eea26e3; op2val:0xfeea26e3; 
   valaddr_reg:x12; val_offset:1728*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x12, 1728*FLEN/8, x13, x9, x10)

inst_886:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6a26e3 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x6a26e3 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7eea26e3; op2val:0xfeea26e3; 
   valaddr_reg:x12; val_offset:1730*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x12, 1730*FLEN/8, x13, x9, x10)

inst_887:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6a26e3 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x6a26e3 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7eea26e3; op2val:0xfeea26e3; 
   valaddr_reg:x12; val_offset:1732*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x12, 1732*FLEN/8, x13, x9, x10)

inst_888:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6a26e3 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x6a26e3 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7eea26e3; op2val:0xfeea26e3; 
   valaddr_reg:x12; val_offset:1734*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x12, 1734*FLEN/8, x13, x9, x10)

inst_889:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6a26e3 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x6a26e3 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7eea26e3; op2val:0xfeea26e3; 
   valaddr_reg:x12; val_offset:1736*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x12, 1736*FLEN/8, x13, x9, x10)

inst_890:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x02a504 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x02a504 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7e82a504; op2val:0xfe82a504; 
   valaddr_reg:x12; val_offset:1738*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x12, 1738*FLEN/8, x13, x9, x10)

inst_891:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x02a504 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x02a504 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7e82a504; op2val:0xfe82a504; 
   valaddr_reg:x12; val_offset:1740*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x12, 1740*FLEN/8, x13, x9, x10)

inst_892:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x02a504 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x02a504 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7e82a504; op2val:0xfe82a504; 
   valaddr_reg:x12; val_offset:1742*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x12, 1742*FLEN/8, x13, x9, x10)

inst_893:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x02a504 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x02a504 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7e82a504; op2val:0xfe82a504; 
   valaddr_reg:x12; val_offset:1744*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x12, 1744*FLEN/8, x13, x9, x10)

inst_894:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x02a504 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x02a504 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7e82a504; op2val:0xfe82a504; 
   valaddr_reg:x12; val_offset:1746*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x12, 1746*FLEN/8, x13, x9, x10)

inst_895:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c9c0a and fs2 == 1 and fe2 == 0xfe and fm2 == 0x2c9c0a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f2c9c0a; op2val:0xff2c9c0a; 
   valaddr_reg:x12; val_offset:1748*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x12, 1748*FLEN/8, x13, x9, x10)

inst_896:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c9c0a and fs2 == 1 and fe2 == 0xfe and fm2 == 0x2c9c0a and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f2c9c0a; op2val:0xff2c9c0a; 
   valaddr_reg:x12; val_offset:1750*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x12, 1750*FLEN/8, x13, x9, x10)

inst_897:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c9c0a and fs2 == 1 and fe2 == 0xfe and fm2 == 0x2c9c0a and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f2c9c0a; op2val:0xff2c9c0a; 
   valaddr_reg:x12; val_offset:1752*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x12, 1752*FLEN/8, x13, x9, x10)

inst_898:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c9c0a and fs2 == 1 and fe2 == 0xfe and fm2 == 0x2c9c0a and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f2c9c0a; op2val:0xff2c9c0a; 
   valaddr_reg:x12; val_offset:1754*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x12, 1754*FLEN/8, x13, x9, x10)

inst_899:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c9c0a and fs2 == 1 and fe2 == 0xfe and fm2 == 0x2c9c0a and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f2c9c0a; op2val:0xff2c9c0a; 
   valaddr_reg:x12; val_offset:1756*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x12, 1756*FLEN/8, x13, x9, x10)

inst_900:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x59eac0 and fs2 == 1 and fe2 == 0xf9 and fm2 == 0x59eac0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7cd9eac0; op2val:0xfcd9eac0; 
   valaddr_reg:x12; val_offset:1758*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x12, 1758*FLEN/8, x13, x9, x10)

inst_901:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x59eac0 and fs2 == 1 and fe2 == 0xf9 and fm2 == 0x59eac0 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7cd9eac0; op2val:0xfcd9eac0; 
   valaddr_reg:x12; val_offset:1760*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x12, 1760*FLEN/8, x13, x9, x10)

inst_902:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x59eac0 and fs2 == 1 and fe2 == 0xf9 and fm2 == 0x59eac0 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7cd9eac0; op2val:0xfcd9eac0; 
   valaddr_reg:x12; val_offset:1762*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x12, 1762*FLEN/8, x13, x9, x10)

inst_903:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x59eac0 and fs2 == 1 and fe2 == 0xf9 and fm2 == 0x59eac0 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7cd9eac0; op2val:0xfcd9eac0; 
   valaddr_reg:x12; val_offset:1764*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x12, 1764*FLEN/8, x13, x9, x10)

inst_904:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x59eac0 and fs2 == 1 and fe2 == 0xf9 and fm2 == 0x59eac0 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7cd9eac0; op2val:0xfcd9eac0; 
   valaddr_reg:x12; val_offset:1766*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x12, 1766*FLEN/8, x13, x9, x10)

inst_905:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x454909 and fs2 == 1 and fe2 == 0xfc and fm2 == 0x454909 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7e454909; op2val:0xfe454909; 
   valaddr_reg:x12; val_offset:1768*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x12, 1768*FLEN/8, x13, x9, x10)

inst_906:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x454909 and fs2 == 1 and fe2 == 0xfc and fm2 == 0x454909 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7e454909; op2val:0xfe454909; 
   valaddr_reg:x12; val_offset:1770*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x12, 1770*FLEN/8, x13, x9, x10)

inst_907:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x454909 and fs2 == 1 and fe2 == 0xfc and fm2 == 0x454909 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7e454909; op2val:0xfe454909; 
   valaddr_reg:x12; val_offset:1772*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x12, 1772*FLEN/8, x13, x9, x10)

inst_908:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x454909 and fs2 == 1 and fe2 == 0xfc and fm2 == 0x454909 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7e454909; op2val:0xfe454909; 
   valaddr_reg:x12; val_offset:1774*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x12, 1774*FLEN/8, x13, x9, x10)

inst_909:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x454909 and fs2 == 1 and fe2 == 0xfc and fm2 == 0x454909 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7e454909; op2val:0xfe454909; 
   valaddr_reg:x12; val_offset:1776*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x12, 1776*FLEN/8, x13, x9, x10)

inst_910:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x21ba5d and fs2 == 1 and fe2 == 0xfe and fm2 == 0x21ba5d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f21ba5d; op2val:0xff21ba5d; 
   valaddr_reg:x12; val_offset:1778*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x12, 1778*FLEN/8, x13, x9, x10)

inst_911:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x21ba5d and fs2 == 1 and fe2 == 0xfe and fm2 == 0x21ba5d and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f21ba5d; op2val:0xff21ba5d; 
   valaddr_reg:x12; val_offset:1780*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x12, 1780*FLEN/8, x13, x9, x10)

inst_912:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x21ba5d and fs2 == 1 and fe2 == 0xfe and fm2 == 0x21ba5d and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f21ba5d; op2val:0xff21ba5d; 
   valaddr_reg:x12; val_offset:1782*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x12, 1782*FLEN/8, x13, x9, x10)

inst_913:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x21ba5d and fs2 == 1 and fe2 == 0xfe and fm2 == 0x21ba5d and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f21ba5d; op2val:0xff21ba5d; 
   valaddr_reg:x12; val_offset:1784*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x12, 1784*FLEN/8, x13, x9, x10)

inst_914:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x21ba5d and fs2 == 1 and fe2 == 0xfe and fm2 == 0x21ba5d and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f21ba5d; op2val:0xff21ba5d; 
   valaddr_reg:x12; val_offset:1786*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x12, 1786*FLEN/8, x13, x9, x10)

inst_915:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09e19b and fs2 == 1 and fe2 == 0xfe and fm2 == 0x09e19b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f09e19b; op2val:0xff09e19b; 
   valaddr_reg:x12; val_offset:1788*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x12, 1788*FLEN/8, x13, x9, x10)

inst_916:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09e19b and fs2 == 1 and fe2 == 0xfe and fm2 == 0x09e19b and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f09e19b; op2val:0xff09e19b; 
   valaddr_reg:x12; val_offset:1790*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x12, 1790*FLEN/8, x13, x9, x10)

inst_917:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09e19b and fs2 == 1 and fe2 == 0xfe and fm2 == 0x09e19b and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f09e19b; op2val:0xff09e19b; 
   valaddr_reg:x12; val_offset:1792*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x12, 1792*FLEN/8, x13, x9, x10)

inst_918:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09e19b and fs2 == 1 and fe2 == 0xfe and fm2 == 0x09e19b and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f09e19b; op2val:0xff09e19b; 
   valaddr_reg:x12; val_offset:1794*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x12, 1794*FLEN/8, x13, x9, x10)

inst_919:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09e19b and fs2 == 1 and fe2 == 0xfe and fm2 == 0x09e19b and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f09e19b; op2val:0xff09e19b; 
   valaddr_reg:x12; val_offset:1796*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x12, 1796*FLEN/8, x13, x9, x10)
RVTEST_SIGBASE(x9,signature_x9_7)

inst_920:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x4bdaf1 and fs2 == 1 and fe2 == 0xfa and fm2 == 0x4bdaf1 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7d4bdaf1; op2val:0xfd4bdaf1; 
   valaddr_reg:x12; val_offset:1798*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x12, 1798*FLEN/8, x13, x9, x10)

inst_921:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x4bdaf1 and fs2 == 1 and fe2 == 0xfa and fm2 == 0x4bdaf1 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7d4bdaf1; op2val:0xfd4bdaf1; 
   valaddr_reg:x12; val_offset:1800*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x12, 1800*FLEN/8, x13, x9, x10)

inst_922:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x4bdaf1 and fs2 == 1 and fe2 == 0xfa and fm2 == 0x4bdaf1 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7d4bdaf1; op2val:0xfd4bdaf1; 
   valaddr_reg:x12; val_offset:1802*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x12, 1802*FLEN/8, x13, x9, x10)

inst_923:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x4bdaf1 and fs2 == 1 and fe2 == 0xfa and fm2 == 0x4bdaf1 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7d4bdaf1; op2val:0xfd4bdaf1; 
   valaddr_reg:x12; val_offset:1804*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x12, 1804*FLEN/8, x13, x9, x10)

inst_924:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x4bdaf1 and fs2 == 1 and fe2 == 0xfa and fm2 == 0x4bdaf1 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7d4bdaf1; op2val:0xfd4bdaf1; 
   valaddr_reg:x12; val_offset:1806*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x12, 1806*FLEN/8, x13, x9, x10)

inst_925:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x26d3f0 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x26d3f0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f26d3f0; op2val:0xff26d3f0; 
   valaddr_reg:x12; val_offset:1808*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x12, 1808*FLEN/8, x13, x9, x10)

inst_926:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x26d3f0 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x26d3f0 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f26d3f0; op2val:0xff26d3f0; 
   valaddr_reg:x12; val_offset:1810*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x12, 1810*FLEN/8, x13, x9, x10)

inst_927:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x26d3f0 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x26d3f0 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f26d3f0; op2val:0xff26d3f0; 
   valaddr_reg:x12; val_offset:1812*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x12, 1812*FLEN/8, x13, x9, x10)

inst_928:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x26d3f0 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x26d3f0 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f26d3f0; op2val:0xff26d3f0; 
   valaddr_reg:x12; val_offset:1814*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x12, 1814*FLEN/8, x13, x9, x10)

inst_929:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x26d3f0 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x26d3f0 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f26d3f0; op2val:0xff26d3f0; 
   valaddr_reg:x12; val_offset:1816*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x12, 1816*FLEN/8, x13, x9, x10)

inst_930:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2cde9f and fs2 == 1 and fe2 == 0xfc and fm2 == 0x2cde9f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7e2cde9f; op2val:0xfe2cde9f; 
   valaddr_reg:x12; val_offset:1818*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x12, 1818*FLEN/8, x13, x9, x10)

inst_931:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2cde9f and fs2 == 1 and fe2 == 0xfc and fm2 == 0x2cde9f and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7e2cde9f; op2val:0xfe2cde9f; 
   valaddr_reg:x12; val_offset:1820*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x12, 1820*FLEN/8, x13, x9, x10)

inst_932:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2cde9f and fs2 == 1 and fe2 == 0xfc and fm2 == 0x2cde9f and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7e2cde9f; op2val:0xfe2cde9f; 
   valaddr_reg:x12; val_offset:1822*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x12, 1822*FLEN/8, x13, x9, x10)

inst_933:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2cde9f and fs2 == 1 and fe2 == 0xfc and fm2 == 0x2cde9f and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7e2cde9f; op2val:0xfe2cde9f; 
   valaddr_reg:x12; val_offset:1824*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x12, 1824*FLEN/8, x13, x9, x10)

inst_934:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2cde9f and fs2 == 1 and fe2 == 0xfc and fm2 == 0x2cde9f and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7e2cde9f; op2val:0xfe2cde9f; 
   valaddr_reg:x12; val_offset:1826*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x12, 1826*FLEN/8, x13, x9, x10)

inst_935:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x3bd2e4 and fs2 == 1 and fe2 == 0xf8 and fm2 == 0x3bd2e4 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7c3bd2e4; op2val:0xfc3bd2e4; 
   valaddr_reg:x12; val_offset:1828*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x12, 1828*FLEN/8, x13, x9, x10)

inst_936:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x3bd2e4 and fs2 == 1 and fe2 == 0xf8 and fm2 == 0x3bd2e4 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7c3bd2e4; op2val:0xfc3bd2e4; 
   valaddr_reg:x12; val_offset:1830*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x12, 1830*FLEN/8, x13, x9, x10)

inst_937:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x3bd2e4 and fs2 == 1 and fe2 == 0xf8 and fm2 == 0x3bd2e4 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7c3bd2e4; op2val:0xfc3bd2e4; 
   valaddr_reg:x12; val_offset:1832*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x12, 1832*FLEN/8, x13, x9, x10)

inst_938:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x3bd2e4 and fs2 == 1 and fe2 == 0xf8 and fm2 == 0x3bd2e4 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7c3bd2e4; op2val:0xfc3bd2e4; 
   valaddr_reg:x12; val_offset:1834*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x12, 1834*FLEN/8, x13, x9, x10)

inst_939:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x3bd2e4 and fs2 == 1 and fe2 == 0xf8 and fm2 == 0x3bd2e4 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7c3bd2e4; op2val:0xfc3bd2e4; 
   valaddr_reg:x12; val_offset:1836*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x12, 1836*FLEN/8, x13, x9, x10)

inst_940:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7de57e and fs2 == 1 and fe2 == 0xfc and fm2 == 0x7de57e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7e7de57e; op2val:0xfe7de57e; 
   valaddr_reg:x12; val_offset:1838*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x12, 1838*FLEN/8, x13, x9, x10)

inst_941:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7de57e and fs2 == 1 and fe2 == 0xfc and fm2 == 0x7de57e and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7e7de57e; op2val:0xfe7de57e; 
   valaddr_reg:x12; val_offset:1840*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x12, 1840*FLEN/8, x13, x9, x10)

inst_942:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7de57e and fs2 == 1 and fe2 == 0xfc and fm2 == 0x7de57e and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7e7de57e; op2val:0xfe7de57e; 
   valaddr_reg:x12; val_offset:1842*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x12, 1842*FLEN/8, x13, x9, x10)

inst_943:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7de57e and fs2 == 1 and fe2 == 0xfc and fm2 == 0x7de57e and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7e7de57e; op2val:0xfe7de57e; 
   valaddr_reg:x12; val_offset:1844*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x12, 1844*FLEN/8, x13, x9, x10)

inst_944:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7de57e and fs2 == 1 and fe2 == 0xfc and fm2 == 0x7de57e and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7e7de57e; op2val:0xfe7de57e; 
   valaddr_reg:x12; val_offset:1846*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x12, 1846*FLEN/8, x13, x9, x10)

inst_945:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x649633 and fs2 == 1 and fe2 == 0xfb and fm2 == 0x649633 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7de49633; op2val:0xfde49633; 
   valaddr_reg:x12; val_offset:1848*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x12, 1848*FLEN/8, x13, x9, x10)

inst_946:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x649633 and fs2 == 1 and fe2 == 0xfb and fm2 == 0x649633 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7de49633; op2val:0xfde49633; 
   valaddr_reg:x12; val_offset:1850*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x12, 1850*FLEN/8, x13, x9, x10)

inst_947:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x649633 and fs2 == 1 and fe2 == 0xfb and fm2 == 0x649633 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7de49633; op2val:0xfde49633; 
   valaddr_reg:x12; val_offset:1852*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x12, 1852*FLEN/8, x13, x9, x10)

inst_948:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x649633 and fs2 == 1 and fe2 == 0xfb and fm2 == 0x649633 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7de49633; op2val:0xfde49633; 
   valaddr_reg:x12; val_offset:1854*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x12, 1854*FLEN/8, x13, x9, x10)

inst_949:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x649633 and fs2 == 1 and fe2 == 0xfb and fm2 == 0x649633 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7de49633; op2val:0xfde49633; 
   valaddr_reg:x12; val_offset:1856*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x12, 1856*FLEN/8, x13, x9, x10)

inst_950:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x39f88a and fs2 == 1 and fe2 == 0xfe and fm2 == 0x39f88a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f39f88a; op2val:0xff39f88a; 
   valaddr_reg:x12; val_offset:1858*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x12, 1858*FLEN/8, x13, x9, x10)

inst_951:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x39f88a and fs2 == 1 and fe2 == 0xfe and fm2 == 0x39f88a and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f39f88a; op2val:0xff39f88a; 
   valaddr_reg:x12; val_offset:1860*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x12, 1860*FLEN/8, x13, x9, x10)

inst_952:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x39f88a and fs2 == 1 and fe2 == 0xfe and fm2 == 0x39f88a and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f39f88a; op2val:0xff39f88a; 
   valaddr_reg:x12; val_offset:1862*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x12, 1862*FLEN/8, x13, x9, x10)

inst_953:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x39f88a and fs2 == 1 and fe2 == 0xfe and fm2 == 0x39f88a and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f39f88a; op2val:0xff39f88a; 
   valaddr_reg:x12; val_offset:1864*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x12, 1864*FLEN/8, x13, x9, x10)

inst_954:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x39f88a and fs2 == 1 and fe2 == 0xfe and fm2 == 0x39f88a and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f39f88a; op2val:0xff39f88a; 
   valaddr_reg:x12; val_offset:1866*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x12, 1866*FLEN/8, x13, x9, x10)

inst_955:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d0265 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x2d0265 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f2d0265; op2val:0xff2d0265; 
   valaddr_reg:x12; val_offset:1868*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x12, 1868*FLEN/8, x13, x9, x10)

inst_956:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d0265 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x2d0265 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f2d0265; op2val:0xff2d0265; 
   valaddr_reg:x12; val_offset:1870*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x12, 1870*FLEN/8, x13, x9, x10)

inst_957:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d0265 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x2d0265 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f2d0265; op2val:0xff2d0265; 
   valaddr_reg:x12; val_offset:1872*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x12, 1872*FLEN/8, x13, x9, x10)

inst_958:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d0265 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x2d0265 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f2d0265; op2val:0xff2d0265; 
   valaddr_reg:x12; val_offset:1874*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x12, 1874*FLEN/8, x13, x9, x10)

inst_959:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d0265 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x2d0265 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f2d0265; op2val:0xff2d0265; 
   valaddr_reg:x12; val_offset:1876*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x12, 1876*FLEN/8, x13, x9, x10)

inst_960:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5c5df5 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x5c5df5 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7edc5df5; op2val:0xfedc5df5; 
   valaddr_reg:x12; val_offset:1878*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x12, 1878*FLEN/8, x13, x9, x10)

inst_961:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5c5df5 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x5c5df5 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7edc5df5; op2val:0xfedc5df5; 
   valaddr_reg:x12; val_offset:1880*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x12, 1880*FLEN/8, x13, x9, x10)

inst_962:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5c5df5 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x5c5df5 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7edc5df5; op2val:0xfedc5df5; 
   valaddr_reg:x12; val_offset:1882*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x12, 1882*FLEN/8, x13, x9, x10)

inst_963:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5c5df5 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x5c5df5 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7edc5df5; op2val:0xfedc5df5; 
   valaddr_reg:x12; val_offset:1884*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x12, 1884*FLEN/8, x13, x9, x10)

inst_964:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5c5df5 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x5c5df5 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7edc5df5; op2val:0xfedc5df5; 
   valaddr_reg:x12; val_offset:1886*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x12, 1886*FLEN/8, x13, x9, x10)

inst_965:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1a94c3 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x1a94c3 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f1a94c3; op2val:0xff1a94c3; 
   valaddr_reg:x12; val_offset:1888*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x12, 1888*FLEN/8, x13, x9, x10)

inst_966:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1a94c3 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x1a94c3 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f1a94c3; op2val:0xff1a94c3; 
   valaddr_reg:x12; val_offset:1890*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x12, 1890*FLEN/8, x13, x9, x10)

inst_967:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1a94c3 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x1a94c3 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f1a94c3; op2val:0xff1a94c3; 
   valaddr_reg:x12; val_offset:1892*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x12, 1892*FLEN/8, x13, x9, x10)

inst_968:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1a94c3 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x1a94c3 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f1a94c3; op2val:0xff1a94c3; 
   valaddr_reg:x12; val_offset:1894*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x12, 1894*FLEN/8, x13, x9, x10)

inst_969:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1a94c3 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x1a94c3 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f1a94c3; op2val:0xff1a94c3; 
   valaddr_reg:x12; val_offset:1896*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x12, 1896*FLEN/8, x13, x9, x10)

inst_970:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3e2ea7 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x3e2ea7 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f3e2ea7; op2val:0xff3e2ea7; 
   valaddr_reg:x12; val_offset:1898*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x12, 1898*FLEN/8, x13, x9, x10)

inst_971:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3e2ea7 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x3e2ea7 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f3e2ea7; op2val:0xff3e2ea7; 
   valaddr_reg:x12; val_offset:1900*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x12, 1900*FLEN/8, x13, x9, x10)

inst_972:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3e2ea7 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x3e2ea7 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f3e2ea7; op2val:0xff3e2ea7; 
   valaddr_reg:x12; val_offset:1902*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x12, 1902*FLEN/8, x13, x9, x10)

inst_973:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3e2ea7 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x3e2ea7 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f3e2ea7; op2val:0xff3e2ea7; 
   valaddr_reg:x12; val_offset:1904*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x12, 1904*FLEN/8, x13, x9, x10)

inst_974:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3e2ea7 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x3e2ea7 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f3e2ea7; op2val:0xff3e2ea7; 
   valaddr_reg:x12; val_offset:1906*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x12, 1906*FLEN/8, x13, x9, x10)

inst_975:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2de8ee and fs2 == 1 and fe2 == 0xfe and fm2 == 0x2de8ee and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f2de8ee; op2val:0xff2de8ee; 
   valaddr_reg:x12; val_offset:1908*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x12, 1908*FLEN/8, x13, x9, x10)

inst_976:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2de8ee and fs2 == 1 and fe2 == 0xfe and fm2 == 0x2de8ee and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f2de8ee; op2val:0xff2de8ee; 
   valaddr_reg:x12; val_offset:1910*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x12, 1910*FLEN/8, x13, x9, x10)

inst_977:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2de8ee and fs2 == 1 and fe2 == 0xfe and fm2 == 0x2de8ee and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f2de8ee; op2val:0xff2de8ee; 
   valaddr_reg:x12; val_offset:1912*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x12, 1912*FLEN/8, x13, x9, x10)

inst_978:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2de8ee and fs2 == 1 and fe2 == 0xfe and fm2 == 0x2de8ee and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f2de8ee; op2val:0xff2de8ee; 
   valaddr_reg:x12; val_offset:1914*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x12, 1914*FLEN/8, x13, x9, x10)

inst_979:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2de8ee and fs2 == 1 and fe2 == 0xfe and fm2 == 0x2de8ee and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f2de8ee; op2val:0xff2de8ee; 
   valaddr_reg:x12; val_offset:1916*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x12, 1916*FLEN/8, x13, x9, x10)

inst_980:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4d998f and fs2 == 1 and fe2 == 0xfd and fm2 == 0x4d998f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7ecd998f; op2val:0xfecd998f; 
   valaddr_reg:x12; val_offset:1918*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x12, 1918*FLEN/8, x13, x9, x10)

inst_981:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4d998f and fs2 == 1 and fe2 == 0xfd and fm2 == 0x4d998f and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7ecd998f; op2val:0xfecd998f; 
   valaddr_reg:x12; val_offset:1920*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x12, 1920*FLEN/8, x13, x9, x10)

inst_982:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4d998f and fs2 == 1 and fe2 == 0xfd and fm2 == 0x4d998f and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7ecd998f; op2val:0xfecd998f; 
   valaddr_reg:x12; val_offset:1922*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x12, 1922*FLEN/8, x13, x9, x10)

inst_983:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4d998f and fs2 == 1 and fe2 == 0xfd and fm2 == 0x4d998f and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7ecd998f; op2val:0xfecd998f; 
   valaddr_reg:x12; val_offset:1924*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x12, 1924*FLEN/8, x13, x9, x10)

inst_984:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4d998f and fs2 == 1 and fe2 == 0xfd and fm2 == 0x4d998f and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7ecd998f; op2val:0xfecd998f; 
   valaddr_reg:x12; val_offset:1926*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x12, 1926*FLEN/8, x13, x9, x10)

inst_985:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1e88a3 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x1e88a3 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f1e88a3; op2val:0xff1e88a3; 
   valaddr_reg:x12; val_offset:1928*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x12, 1928*FLEN/8, x13, x9, x10)

inst_986:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1e88a3 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x1e88a3 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f1e88a3; op2val:0xff1e88a3; 
   valaddr_reg:x12; val_offset:1930*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x12, 1930*FLEN/8, x13, x9, x10)

inst_987:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1e88a3 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x1e88a3 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f1e88a3; op2val:0xff1e88a3; 
   valaddr_reg:x12; val_offset:1932*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x12, 1932*FLEN/8, x13, x9, x10)

inst_988:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1e88a3 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x1e88a3 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f1e88a3; op2val:0xff1e88a3; 
   valaddr_reg:x12; val_offset:1934*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x12, 1934*FLEN/8, x13, x9, x10)

inst_989:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1e88a3 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x1e88a3 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f1e88a3; op2val:0xff1e88a3; 
   valaddr_reg:x12; val_offset:1936*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x12, 1936*FLEN/8, x13, x9, x10)

inst_990:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x17e134 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x17e134 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f17e134; op2val:0xff17e134; 
   valaddr_reg:x12; val_offset:1938*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x12, 1938*FLEN/8, x13, x9, x10)

inst_991:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x17e134 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x17e134 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f17e134; op2val:0xff17e134; 
   valaddr_reg:x12; val_offset:1940*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x12, 1940*FLEN/8, x13, x9, x10)

inst_992:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x17e134 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x17e134 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f17e134; op2val:0xff17e134; 
   valaddr_reg:x12; val_offset:1942*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x12, 1942*FLEN/8, x13, x9, x10)

inst_993:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x17e134 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x17e134 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f17e134; op2val:0xff17e134; 
   valaddr_reg:x12; val_offset:1944*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x12, 1944*FLEN/8, x13, x9, x10)

inst_994:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x17e134 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x17e134 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f17e134; op2val:0xff17e134; 
   valaddr_reg:x12; val_offset:1946*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x12, 1946*FLEN/8, x13, x9, x10)

inst_995:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x612c54 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x612c54 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7ee12c54; op2val:0xfee12c54; 
   valaddr_reg:x12; val_offset:1948*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x12, 1948*FLEN/8, x13, x9, x10)

inst_996:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x612c54 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x612c54 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7ee12c54; op2val:0xfee12c54; 
   valaddr_reg:x12; val_offset:1950*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x12, 1950*FLEN/8, x13, x9, x10)

inst_997:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x612c54 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x612c54 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7ee12c54; op2val:0xfee12c54; 
   valaddr_reg:x12; val_offset:1952*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x12, 1952*FLEN/8, x13, x9, x10)

inst_998:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x612c54 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x612c54 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7ee12c54; op2val:0xfee12c54; 
   valaddr_reg:x12; val_offset:1954*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x12, 1954*FLEN/8, x13, x9, x10)

inst_999:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x612c54 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x612c54 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7ee12c54; op2val:0xfee12c54; 
   valaddr_reg:x12; val_offset:1956*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x12, 1956*FLEN/8, x13, x9, x10)

inst_1000:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x193a37 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x193a37 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f193a37; op2val:0xff193a37; 
   valaddr_reg:x12; val_offset:1958*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x12, 1958*FLEN/8, x13, x9, x10)

inst_1001:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x193a37 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x193a37 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f193a37; op2val:0xff193a37; 
   valaddr_reg:x12; val_offset:1960*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x12, 1960*FLEN/8, x13, x9, x10)

inst_1002:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x193a37 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x193a37 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f193a37; op2val:0xff193a37; 
   valaddr_reg:x12; val_offset:1962*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x12, 1962*FLEN/8, x13, x9, x10)

inst_1003:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x193a37 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x193a37 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f193a37; op2val:0xff193a37; 
   valaddr_reg:x12; val_offset:1964*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x12, 1964*FLEN/8, x13, x9, x10)

inst_1004:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x193a37 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x193a37 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f193a37; op2val:0xff193a37; 
   valaddr_reg:x12; val_offset:1966*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x12, 1966*FLEN/8, x13, x9, x10)

inst_1005:
// fs1 == 0 and fe1 == 0xf2 and fm1 == 0x3d4a9b and fs2 == 1 and fe2 == 0xf2 and fm2 == 0x3d4a9b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x793d4a9b; op2val:0xf93d4a9b; 
   valaddr_reg:x12; val_offset:1968*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x12, 1968*FLEN/8, x13, x9, x10)

inst_1006:
// fs1 == 0 and fe1 == 0xf2 and fm1 == 0x3d4a9b and fs2 == 1 and fe2 == 0xf2 and fm2 == 0x3d4a9b and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x793d4a9b; op2val:0xf93d4a9b; 
   valaddr_reg:x12; val_offset:1970*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x12, 1970*FLEN/8, x13, x9, x10)

inst_1007:
// fs1 == 0 and fe1 == 0xf2 and fm1 == 0x3d4a9b and fs2 == 1 and fe2 == 0xf2 and fm2 == 0x3d4a9b and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x793d4a9b; op2val:0xf93d4a9b; 
   valaddr_reg:x12; val_offset:1972*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x12, 1972*FLEN/8, x13, x9, x10)

inst_1008:
// fs1 == 0 and fe1 == 0xf2 and fm1 == 0x3d4a9b and fs2 == 1 and fe2 == 0xf2 and fm2 == 0x3d4a9b and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x793d4a9b; op2val:0xf93d4a9b; 
   valaddr_reg:x12; val_offset:1974*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x12, 1974*FLEN/8, x13, x9, x10)

inst_1009:
// fs1 == 0 and fe1 == 0xf2 and fm1 == 0x3d4a9b and fs2 == 1 and fe2 == 0xf2 and fm2 == 0x3d4a9b and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x793d4a9b; op2val:0xf93d4a9b; 
   valaddr_reg:x12; val_offset:1976*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x12, 1976*FLEN/8, x13, x9, x10)

inst_1010:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x42a225 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x42a225 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7ec2a225; op2val:0xfec2a225; 
   valaddr_reg:x12; val_offset:1978*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x12, 1978*FLEN/8, x13, x9, x10)

inst_1011:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x42a225 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x42a225 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7ec2a225; op2val:0xfec2a225; 
   valaddr_reg:x12; val_offset:1980*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x12, 1980*FLEN/8, x13, x9, x10)

inst_1012:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x42a225 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x42a225 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7ec2a225; op2val:0xfec2a225; 
   valaddr_reg:x12; val_offset:1982*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x12, 1982*FLEN/8, x13, x9, x10)

inst_1013:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x42a225 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x42a225 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7ec2a225; op2val:0xfec2a225; 
   valaddr_reg:x12; val_offset:1984*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x12, 1984*FLEN/8, x13, x9, x10)

inst_1014:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x42a225 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x42a225 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7ec2a225; op2val:0xfec2a225; 
   valaddr_reg:x12; val_offset:1986*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x12, 1986*FLEN/8, x13, x9, x10)

inst_1015:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x499654 and fs2 == 1 and fe2 == 0xfa and fm2 == 0x499654 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7d499654; op2val:0xfd499654; 
   valaddr_reg:x12; val_offset:1988*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x12, 1988*FLEN/8, x13, x9, x10)

inst_1016:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x499654 and fs2 == 1 and fe2 == 0xfa and fm2 == 0x499654 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7d499654; op2val:0xfd499654; 
   valaddr_reg:x12; val_offset:1990*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x12, 1990*FLEN/8, x13, x9, x10)

inst_1017:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x499654 and fs2 == 1 and fe2 == 0xfa and fm2 == 0x499654 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7d499654; op2val:0xfd499654; 
   valaddr_reg:x12; val_offset:1992*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x12, 1992*FLEN/8, x13, x9, x10)

inst_1018:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x499654 and fs2 == 1 and fe2 == 0xfa and fm2 == 0x499654 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7d499654; op2val:0xfd499654; 
   valaddr_reg:x12; val_offset:1994*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x12, 1994*FLEN/8, x13, x9, x10)

inst_1019:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x499654 and fs2 == 1 and fe2 == 0xfa and fm2 == 0x499654 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7d499654; op2val:0xfd499654; 
   valaddr_reg:x12; val_offset:1996*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x12, 1996*FLEN/8, x13, x9, x10)

inst_1020:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x350bba and fs2 == 1 and fe2 == 0xfe and fm2 == 0x350bba and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f350bba; op2val:0xff350bba; 
   valaddr_reg:x12; val_offset:1998*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x12, 1998*FLEN/8, x13, x9, x10)

inst_1021:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x350bba and fs2 == 1 and fe2 == 0xfe and fm2 == 0x350bba and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f350bba; op2val:0xff350bba; 
   valaddr_reg:x12; val_offset:2000*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x12, 2000*FLEN/8, x13, x9, x10)

inst_1022:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x350bba and fs2 == 1 and fe2 == 0xfe and fm2 == 0x350bba and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f350bba; op2val:0xff350bba; 
   valaddr_reg:x12; val_offset:2002*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x12, 2002*FLEN/8, x13, x9, x10)

inst_1023:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x350bba and fs2 == 1 and fe2 == 0xfe and fm2 == 0x350bba and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f350bba; op2val:0xff350bba; 
   valaddr_reg:x12; val_offset:2004*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x12, 2004*FLEN/8, x13, x9, x10)

inst_1024:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x350bba and fs2 == 1 and fe2 == 0xfe and fm2 == 0x350bba and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f350bba; op2val:0xff350bba; 
   valaddr_reg:x12; val_offset:2006*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x12, 2006*FLEN/8, x13, x9, x10)

inst_1025:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1cb339 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x1cb339 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7e9cb339; op2val:0xfe9cb339; 
   valaddr_reg:x12; val_offset:2008*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x12, 2008*FLEN/8, x13, x9, x10)

inst_1026:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1cb339 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x1cb339 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7e9cb339; op2val:0xfe9cb339; 
   valaddr_reg:x12; val_offset:2010*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x12, 2010*FLEN/8, x13, x9, x10)

inst_1027:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1cb339 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x1cb339 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7e9cb339; op2val:0xfe9cb339; 
   valaddr_reg:x12; val_offset:2012*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x12, 2012*FLEN/8, x13, x9, x10)

inst_1028:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1cb339 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x1cb339 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7e9cb339; op2val:0xfe9cb339; 
   valaddr_reg:x12; val_offset:2014*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x12, 2014*FLEN/8, x13, x9, x10)

inst_1029:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1cb339 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x1cb339 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7e9cb339; op2val:0xfe9cb339; 
   valaddr_reg:x12; val_offset:2016*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x12, 2016*FLEN/8, x13, x9, x10)

inst_1030:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x3f4247 and fs2 == 1 and fe2 == 0xfa and fm2 == 0x3f4247 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7d3f4247; op2val:0xfd3f4247; 
   valaddr_reg:x12; val_offset:2018*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x12, 2018*FLEN/8, x13, x9, x10)

inst_1031:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x3f4247 and fs2 == 1 and fe2 == 0xfa and fm2 == 0x3f4247 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7d3f4247; op2val:0xfd3f4247; 
   valaddr_reg:x12; val_offset:2020*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x12, 2020*FLEN/8, x13, x9, x10)

inst_1032:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x3f4247 and fs2 == 1 and fe2 == 0xfa and fm2 == 0x3f4247 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7d3f4247; op2val:0xfd3f4247; 
   valaddr_reg:x12; val_offset:2022*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x12, 2022*FLEN/8, x13, x9, x10)

inst_1033:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x3f4247 and fs2 == 1 and fe2 == 0xfa and fm2 == 0x3f4247 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7d3f4247; op2val:0xfd3f4247; 
   valaddr_reg:x12; val_offset:2024*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x12, 2024*FLEN/8, x13, x9, x10)

inst_1034:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x3f4247 and fs2 == 1 and fe2 == 0xfa and fm2 == 0x3f4247 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7d3f4247; op2val:0xfd3f4247; 
   valaddr_reg:x12; val_offset:2026*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x12, 2026*FLEN/8, x13, x9, x10)

inst_1035:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x439094 and fs2 == 1 and fe2 == 0xfb and fm2 == 0x439094 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7dc39094; op2val:0xfdc39094; 
   valaddr_reg:x12; val_offset:2028*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x12, 2028*FLEN/8, x13, x9, x10)

inst_1036:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x439094 and fs2 == 1 and fe2 == 0xfb and fm2 == 0x439094 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7dc39094; op2val:0xfdc39094; 
   valaddr_reg:x12; val_offset:2030*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x12, 2030*FLEN/8, x13, x9, x10)

inst_1037:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x439094 and fs2 == 1 and fe2 == 0xfb and fm2 == 0x439094 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7dc39094; op2val:0xfdc39094; 
   valaddr_reg:x12; val_offset:2032*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x12, 2032*FLEN/8, x13, x9, x10)

inst_1038:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x439094 and fs2 == 1 and fe2 == 0xfb and fm2 == 0x439094 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7dc39094; op2val:0xfdc39094; 
   valaddr_reg:x12; val_offset:2034*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x12, 2034*FLEN/8, x13, x9, x10)

inst_1039:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x439094 and fs2 == 1 and fe2 == 0xfb and fm2 == 0x439094 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7dc39094; op2val:0xfdc39094; 
   valaddr_reg:x12; val_offset:2036*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x12, 2036*FLEN/8, x13, x9, x10)

inst_1040:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1f593e and fs2 == 1 and fe2 == 0xfe and fm2 == 0x1f593e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f1f593e; op2val:0xff1f593e; 
   valaddr_reg:x12; val_offset:2038*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x12, 2038*FLEN/8, x13, x9, x10)

inst_1041:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1f593e and fs2 == 1 and fe2 == 0xfe and fm2 == 0x1f593e and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f1f593e; op2val:0xff1f593e; 
   valaddr_reg:x12; val_offset:2040*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x12, 2040*FLEN/8, x13, x9, x10)

inst_1042:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1f593e and fs2 == 1 and fe2 == 0xfe and fm2 == 0x1f593e and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f1f593e; op2val:0xff1f593e; 
   valaddr_reg:x12; val_offset:2042*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x12, 2042*FLEN/8, x13, x9, x10)

inst_1043:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1f593e and fs2 == 1 and fe2 == 0xfe and fm2 == 0x1f593e and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f1f593e; op2val:0xff1f593e; 
   valaddr_reg:x12; val_offset:2044*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x12, 2044*FLEN/8, x13, x9, x10)

inst_1044:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1f593e and fs2 == 1 and fe2 == 0xfe and fm2 == 0x1f593e and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f1f593e; op2val:0xff1f593e; 
   valaddr_reg:x12; val_offset:2046*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x12, 2046*FLEN/8, x13, x9, x10)

inst_1045:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x5cc707 and fs2 == 1 and fe2 == 0xf9 and fm2 == 0x5cc707 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7cdcc707; op2val:0xfcdcc707; 
   valaddr_reg:x12; val_offset:2048*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x12, 2048*FLEN/8, x13, x9, x10)

inst_1046:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x5cc707 and fs2 == 1 and fe2 == 0xf9 and fm2 == 0x5cc707 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7cdcc707; op2val:0xfcdcc707; 
   valaddr_reg:x12; val_offset:2050*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x12, 2050*FLEN/8, x13, x9, x10)

inst_1047:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x5cc707 and fs2 == 1 and fe2 == 0xf9 and fm2 == 0x5cc707 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7cdcc707; op2val:0xfcdcc707; 
   valaddr_reg:x12; val_offset:2052*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x12, 2052*FLEN/8, x13, x9, x10)
RVTEST_SIGBASE(x9,signature_x9_8)

inst_1048:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x5cc707 and fs2 == 1 and fe2 == 0xf9 and fm2 == 0x5cc707 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7cdcc707; op2val:0xfcdcc707; 
   valaddr_reg:x12; val_offset:2054*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x12, 2054*FLEN/8, x13, x9, x10)

inst_1049:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x5cc707 and fs2 == 1 and fe2 == 0xf9 and fm2 == 0x5cc707 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7cdcc707; op2val:0xfcdcc707; 
   valaddr_reg:x12; val_offset:2056*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x12, 2056*FLEN/8, x13, x9, x10)

inst_1050:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3cdcf2 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x3cdcf2 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7ebcdcf2; op2val:0xfebcdcf2; 
   valaddr_reg:x12; val_offset:2058*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x12, 2058*FLEN/8, x13, x9, x10)

inst_1051:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3cdcf2 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x3cdcf2 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7ebcdcf2; op2val:0xfebcdcf2; 
   valaddr_reg:x12; val_offset:2060*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x12, 2060*FLEN/8, x13, x9, x10)

inst_1052:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3cdcf2 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x3cdcf2 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7ebcdcf2; op2val:0xfebcdcf2; 
   valaddr_reg:x12; val_offset:2062*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x12, 2062*FLEN/8, x13, x9, x10)

inst_1053:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3cdcf2 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x3cdcf2 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7ebcdcf2; op2val:0xfebcdcf2; 
   valaddr_reg:x12; val_offset:2064*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x12, 2064*FLEN/8, x13, x9, x10)

inst_1054:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3cdcf2 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x3cdcf2 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7ebcdcf2; op2val:0xfebcdcf2; 
   valaddr_reg:x12; val_offset:2066*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x12, 2066*FLEN/8, x13, x9, x10)

inst_1055:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09b342 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x09b342 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f09b342; op2val:0xff09b342; 
   valaddr_reg:x12; val_offset:2068*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x12, 2068*FLEN/8, x13, x9, x10)

inst_1056:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09b342 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x09b342 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f09b342; op2val:0xff09b342; 
   valaddr_reg:x12; val_offset:2070*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x12, 2070*FLEN/8, x13, x9, x10)

inst_1057:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09b342 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x09b342 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f09b342; op2val:0xff09b342; 
   valaddr_reg:x12; val_offset:2072*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x12, 2072*FLEN/8, x13, x9, x10)

inst_1058:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09b342 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x09b342 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f09b342; op2val:0xff09b342; 
   valaddr_reg:x12; val_offset:2074*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x12, 2074*FLEN/8, x13, x9, x10)

inst_1059:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09b342 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x09b342 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f09b342; op2val:0xff09b342; 
   valaddr_reg:x12; val_offset:2076*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x12, 2076*FLEN/8, x13, x9, x10)

inst_1060:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x688296 and fs2 == 1 and fe2 == 0xfb and fm2 == 0x688296 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7de88296; op2val:0xfde88296; 
   valaddr_reg:x12; val_offset:2078*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x12, 2078*FLEN/8, x13, x9, x10)

inst_1061:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x688296 and fs2 == 1 and fe2 == 0xfb and fm2 == 0x688296 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7de88296; op2val:0xfde88296; 
   valaddr_reg:x12; val_offset:2080*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x12, 2080*FLEN/8, x13, x9, x10)

inst_1062:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x688296 and fs2 == 1 and fe2 == 0xfb and fm2 == 0x688296 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7de88296; op2val:0xfde88296; 
   valaddr_reg:x12; val_offset:2082*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x12, 2082*FLEN/8, x13, x9, x10)

inst_1063:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x688296 and fs2 == 1 and fe2 == 0xfb and fm2 == 0x688296 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7de88296; op2val:0xfde88296; 
   valaddr_reg:x12; val_offset:2084*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x12, 2084*FLEN/8, x13, x9, x10)

inst_1064:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x688296 and fs2 == 1 and fe2 == 0xfb and fm2 == 0x688296 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7de88296; op2val:0xfde88296; 
   valaddr_reg:x12; val_offset:2086*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x12, 2086*FLEN/8, x13, x9, x10)

inst_1065:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1de0b9 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x1de0b9 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7e9de0b9; op2val:0xfe9de0b9; 
   valaddr_reg:x12; val_offset:2088*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x12, 2088*FLEN/8, x13, x9, x10)

inst_1066:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1de0b9 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x1de0b9 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7e9de0b9; op2val:0xfe9de0b9; 
   valaddr_reg:x12; val_offset:2090*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x12, 2090*FLEN/8, x13, x9, x10)

inst_1067:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1de0b9 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x1de0b9 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7e9de0b9; op2val:0xfe9de0b9; 
   valaddr_reg:x12; val_offset:2092*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x12, 2092*FLEN/8, x13, x9, x10)

inst_1068:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1de0b9 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x1de0b9 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7e9de0b9; op2val:0xfe9de0b9; 
   valaddr_reg:x12; val_offset:2094*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x12, 2094*FLEN/8, x13, x9, x10)

inst_1069:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1de0b9 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x1de0b9 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7e9de0b9; op2val:0xfe9de0b9; 
   valaddr_reg:x12; val_offset:2096*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x12, 2096*FLEN/8, x13, x9, x10)

inst_1070:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x147c7c and fs2 == 1 and fe2 == 0xfd and fm2 == 0x147c7c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7e947c7c; op2val:0xfe947c7c; 
   valaddr_reg:x12; val_offset:2098*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x12, 2098*FLEN/8, x13, x9, x10)

inst_1071:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x147c7c and fs2 == 1 and fe2 == 0xfd and fm2 == 0x147c7c and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7e947c7c; op2val:0xfe947c7c; 
   valaddr_reg:x12; val_offset:2100*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x12, 2100*FLEN/8, x13, x9, x10)

inst_1072:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x147c7c and fs2 == 1 and fe2 == 0xfd and fm2 == 0x147c7c and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7e947c7c; op2val:0xfe947c7c; 
   valaddr_reg:x12; val_offset:2102*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x12, 2102*FLEN/8, x13, x9, x10)

inst_1073:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x147c7c and fs2 == 1 and fe2 == 0xfd and fm2 == 0x147c7c and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7e947c7c; op2val:0xfe947c7c; 
   valaddr_reg:x12; val_offset:2104*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x12, 2104*FLEN/8, x13, x9, x10)

inst_1074:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x147c7c and fs2 == 1 and fe2 == 0xfd and fm2 == 0x147c7c and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7e947c7c; op2val:0xfe947c7c; 
   valaddr_reg:x12; val_offset:2106*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x12, 2106*FLEN/8, x13, x9, x10)

inst_1075:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x34d24a and fs2 == 1 and fe2 == 0xfd and fm2 == 0x34d24a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7eb4d24a; op2val:0xfeb4d24a; 
   valaddr_reg:x12; val_offset:2108*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x12, 2108*FLEN/8, x13, x9, x10)

inst_1076:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x34d24a and fs2 == 1 and fe2 == 0xfd and fm2 == 0x34d24a and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7eb4d24a; op2val:0xfeb4d24a; 
   valaddr_reg:x12; val_offset:2110*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x12, 2110*FLEN/8, x13, x9, x10)

inst_1077:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x34d24a and fs2 == 1 and fe2 == 0xfd and fm2 == 0x34d24a and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7eb4d24a; op2val:0xfeb4d24a; 
   valaddr_reg:x12; val_offset:2112*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x12, 2112*FLEN/8, x13, x9, x10)

inst_1078:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x34d24a and fs2 == 1 and fe2 == 0xfd and fm2 == 0x34d24a and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7eb4d24a; op2val:0xfeb4d24a; 
   valaddr_reg:x12; val_offset:2114*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x12, 2114*FLEN/8, x13, x9, x10)

inst_1079:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x34d24a and fs2 == 1 and fe2 == 0xfd and fm2 == 0x34d24a and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7eb4d24a; op2val:0xfeb4d24a; 
   valaddr_reg:x12; val_offset:2116*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x12, 2116*FLEN/8, x13, x9, x10)

inst_1080:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x4777c1 and fs2 == 1 and fe2 == 0xf9 and fm2 == 0x4777c1 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7cc777c1; op2val:0xfcc777c1; 
   valaddr_reg:x12; val_offset:2118*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x12, 2118*FLEN/8, x13, x9, x10)

inst_1081:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x4777c1 and fs2 == 1 and fe2 == 0xf9 and fm2 == 0x4777c1 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7cc777c1; op2val:0xfcc777c1; 
   valaddr_reg:x12; val_offset:2120*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x12, 2120*FLEN/8, x13, x9, x10)

inst_1082:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x4777c1 and fs2 == 1 and fe2 == 0xf9 and fm2 == 0x4777c1 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7cc777c1; op2val:0xfcc777c1; 
   valaddr_reg:x12; val_offset:2122*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x12, 2122*FLEN/8, x13, x9, x10)

inst_1083:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x4777c1 and fs2 == 1 and fe2 == 0xf9 and fm2 == 0x4777c1 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7cc777c1; op2val:0xfcc777c1; 
   valaddr_reg:x12; val_offset:2124*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x12, 2124*FLEN/8, x13, x9, x10)

inst_1084:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x4777c1 and fs2 == 1 and fe2 == 0xf9 and fm2 == 0x4777c1 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7cc777c1; op2val:0xfcc777c1; 
   valaddr_reg:x12; val_offset:2126*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x12, 2126*FLEN/8, x13, x9, x10)

inst_1085:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x71e834 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x71e834 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7ef1e834; op2val:0xfef1e834; 
   valaddr_reg:x12; val_offset:2128*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x12, 2128*FLEN/8, x13, x9, x10)

inst_1086:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x71e834 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x71e834 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7ef1e834; op2val:0xfef1e834; 
   valaddr_reg:x12; val_offset:2130*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x12, 2130*FLEN/8, x13, x9, x10)

inst_1087:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x71e834 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x71e834 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7ef1e834; op2val:0xfef1e834; 
   valaddr_reg:x12; val_offset:2132*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x12, 2132*FLEN/8, x13, x9, x10)

inst_1088:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x71e834 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x71e834 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7ef1e834; op2val:0xfef1e834; 
   valaddr_reg:x12; val_offset:2134*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x12, 2134*FLEN/8, x13, x9, x10)

inst_1089:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x71e834 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x71e834 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7ef1e834; op2val:0xfef1e834; 
   valaddr_reg:x12; val_offset:2136*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x12, 2136*FLEN/8, x13, x9, x10)

inst_1090:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x52df06 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x52df06 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7ed2df06; op2val:0xfed2df06; 
   valaddr_reg:x12; val_offset:2138*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x12, 2138*FLEN/8, x13, x9, x10)

inst_1091:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x52df06 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x52df06 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7ed2df06; op2val:0xfed2df06; 
   valaddr_reg:x12; val_offset:2140*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x12, 2140*FLEN/8, x13, x9, x10)

inst_1092:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x52df06 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x52df06 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7ed2df06; op2val:0xfed2df06; 
   valaddr_reg:x12; val_offset:2142*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x12, 2142*FLEN/8, x13, x9, x10)

inst_1093:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x52df06 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x52df06 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7ed2df06; op2val:0xfed2df06; 
   valaddr_reg:x12; val_offset:2144*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x12, 2144*FLEN/8, x13, x9, x10)

inst_1094:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x52df06 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x52df06 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7ed2df06; op2val:0xfed2df06; 
   valaddr_reg:x12; val_offset:2146*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x12, 2146*FLEN/8, x13, x9, x10)

inst_1095:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x133b22 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x133b22 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7e933b22; op2val:0xfe933b22; 
   valaddr_reg:x12; val_offset:2148*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x12, 2148*FLEN/8, x13, x9, x10)

inst_1096:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x133b22 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x133b22 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7e933b22; op2val:0xfe933b22; 
   valaddr_reg:x12; val_offset:2150*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x12, 2150*FLEN/8, x13, x9, x10)

inst_1097:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x133b22 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x133b22 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7e933b22; op2val:0xfe933b22; 
   valaddr_reg:x12; val_offset:2152*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x12, 2152*FLEN/8, x13, x9, x10)

inst_1098:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x133b22 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x133b22 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7e933b22; op2val:0xfe933b22; 
   valaddr_reg:x12; val_offset:2154*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x12, 2154*FLEN/8, x13, x9, x10)

inst_1099:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x133b22 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x133b22 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7e933b22; op2val:0xfe933b22; 
   valaddr_reg:x12; val_offset:2156*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x12, 2156*FLEN/8, x13, x9, x10)

inst_1100:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3c4862 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x3c4862 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7ebc4862; op2val:0xfebc4862; 
   valaddr_reg:x12; val_offset:2158*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x12, 2158*FLEN/8, x13, x9, x10)

inst_1101:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3c4862 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x3c4862 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7ebc4862; op2val:0xfebc4862; 
   valaddr_reg:x12; val_offset:2160*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x12, 2160*FLEN/8, x13, x9, x10)

inst_1102:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3c4862 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x3c4862 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7ebc4862; op2val:0xfebc4862; 
   valaddr_reg:x12; val_offset:2162*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x12, 2162*FLEN/8, x13, x9, x10)

inst_1103:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3c4862 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x3c4862 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7ebc4862; op2val:0xfebc4862; 
   valaddr_reg:x12; val_offset:2164*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x12, 2164*FLEN/8, x13, x9, x10)

inst_1104:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3c4862 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x3c4862 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7ebc4862; op2val:0xfebc4862; 
   valaddr_reg:x12; val_offset:2166*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x12, 2166*FLEN/8, x13, x9, x10)

inst_1105:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6a4935 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x6a4935 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7eea4935; op2val:0xfeea4935; 
   valaddr_reg:x12; val_offset:2168*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x12, 2168*FLEN/8, x13, x9, x10)

inst_1106:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6a4935 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x6a4935 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7eea4935; op2val:0xfeea4935; 
   valaddr_reg:x12; val_offset:2170*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x12, 2170*FLEN/8, x13, x9, x10)

inst_1107:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6a4935 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x6a4935 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7eea4935; op2val:0xfeea4935; 
   valaddr_reg:x12; val_offset:2172*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x12, 2172*FLEN/8, x13, x9, x10)

inst_1108:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6a4935 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x6a4935 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7eea4935; op2val:0xfeea4935; 
   valaddr_reg:x12; val_offset:2174*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x12, 2174*FLEN/8, x13, x9, x10)

inst_1109:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6a4935 and fs2 == 1 and fe2 == 0xfd and fm2 == 0x6a4935 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7eea4935; op2val:0xfeea4935; 
   valaddr_reg:x12; val_offset:2176*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x12, 2176*FLEN/8, x13, x9, x10)

inst_1110:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x72cedb and fs2 == 1 and fe2 == 0xfd and fm2 == 0x72cedb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7ef2cedb; op2val:0xfef2cedb; 
   valaddr_reg:x12; val_offset:2178*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x12, 2178*FLEN/8, x13, x9, x10)

inst_1111:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x72cedb and fs2 == 1 and fe2 == 0xfd and fm2 == 0x72cedb and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7ef2cedb; op2val:0xfef2cedb; 
   valaddr_reg:x12; val_offset:2180*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x12, 2180*FLEN/8, x13, x9, x10)

inst_1112:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x72cedb and fs2 == 1 and fe2 == 0xfd and fm2 == 0x72cedb and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7ef2cedb; op2val:0xfef2cedb; 
   valaddr_reg:x12; val_offset:2182*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x12, 2182*FLEN/8, x13, x9, x10)

inst_1113:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x72cedb and fs2 == 1 and fe2 == 0xfd and fm2 == 0x72cedb and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7ef2cedb; op2val:0xfef2cedb; 
   valaddr_reg:x12; val_offset:2184*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x12, 2184*FLEN/8, x13, x9, x10)

inst_1114:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x72cedb and fs2 == 1 and fe2 == 0xfd and fm2 == 0x72cedb and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7ef2cedb; op2val:0xfef2cedb; 
   valaddr_reg:x12; val_offset:2186*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x12, 2186*FLEN/8, x13, x9, x10)

inst_1115:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3ef61a and fs2 == 1 and fe2 == 0xfb and fm2 == 0x3ef61a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7dbef61a; op2val:0xfdbef61a; 
   valaddr_reg:x12; val_offset:2188*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x12, 2188*FLEN/8, x13, x9, x10)

inst_1116:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3ef61a and fs2 == 1 and fe2 == 0xfb and fm2 == 0x3ef61a and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7dbef61a; op2val:0xfdbef61a; 
   valaddr_reg:x12; val_offset:2190*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x12, 2190*FLEN/8, x13, x9, x10)

inst_1117:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3ef61a and fs2 == 1 and fe2 == 0xfb and fm2 == 0x3ef61a and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7dbef61a; op2val:0xfdbef61a; 
   valaddr_reg:x12; val_offset:2192*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x12, 2192*FLEN/8, x13, x9, x10)

inst_1118:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3ef61a and fs2 == 1 and fe2 == 0xfb and fm2 == 0x3ef61a and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7dbef61a; op2val:0xfdbef61a; 
   valaddr_reg:x12; val_offset:2194*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x12, 2194*FLEN/8, x13, x9, x10)

inst_1119:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3ef61a and fs2 == 1 and fe2 == 0xfb and fm2 == 0x3ef61a and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7dbef61a; op2val:0xfdbef61a; 
   valaddr_reg:x12; val_offset:2196*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x12, 2196*FLEN/8, x13, x9, x10)

inst_1120:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x222105 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x222105 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f222105; op2val:0xff222105; 
   valaddr_reg:x12; val_offset:2198*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x12, 2198*FLEN/8, x13, x9, x10)

inst_1121:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x222105 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x222105 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f222105; op2val:0xff222105; 
   valaddr_reg:x12; val_offset:2200*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x12, 2200*FLEN/8, x13, x9, x10)

inst_1122:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x222105 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x222105 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f222105; op2val:0xff222105; 
   valaddr_reg:x12; val_offset:2202*FLEN/8; rmval:dyn; fcsr: 64;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 64, 0, x12, 2202*FLEN/8, x13, x9, x10)

inst_1123:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x222105 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x222105 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f222105; op2val:0xff222105; 
   valaddr_reg:x12; val_offset:2204*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 96, 0, x12, 2204*FLEN/8, x13, x9, x10)

inst_1124:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2e5b90 and fs2 == 1 and fe2 == 0xfe and fm2 == 0x2e5b90 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7f2e5b90; op2val:0xff2e5b90; 
   valaddr_reg:x12; val_offset:2206*FLEN/8; rmval:dyn; fcsr: 128;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 128, 0, x12, 2206*FLEN/8, x13, x9, x10)

inst_1125:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x587392 and fs2 == 1 and fe2 == 0xfc and fm2 == 0x587392 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7e587392; op2val:0xfe587392; 
   valaddr_reg:x12; val_offset:2208*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 0, 0, x12, 2208*FLEN/8, x13, x9, x10)

inst_1126:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x587392 and fs2 == 1 and fe2 == 0xfc and fm2 == 0x587392 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fadd.s ; op1:x30; op2:x29; dest:x31; op1val:0x7e587392; op2val:0xfe587392; 
   valaddr_reg:x12; val_offset:2210*FLEN/8; rmval:dyn; fcsr: 32;
   correctval:0; testreg:x10 
*/
TEST_FPRR_OP(fadd.s, x31, x30, x29, dyn, 32, 0, x12, 2210*FLEN/8, x13, x9, x10)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2132943109,32,FLEN)
NAN_BOXED(2132943109,32,FLEN)
NAN_BOXED(2132943109,32,FLEN)
NAN_BOXED(4280426757,32,FLEN)
NAN_BOXED(2132943109,32,FLEN)
NAN_BOXED(4280426757,32,FLEN)
NAN_BOXED(2132943109,32,FLEN)
NAN_BOXED(2132943109,32,FLEN)
NAN_BOXED(2132943109,32,FLEN)
NAN_BOXED(4280426757,32,FLEN)
NAN_BOXED(2124513245,32,FLEN)
NAN_BOXED(4271996893,32,FLEN)
NAN_BOXED(2124513245,32,FLEN)
NAN_BOXED(4271996893,32,FLEN)
NAN_BOXED(2124513245,32,FLEN)
NAN_BOXED(4271996893,32,FLEN)
NAN_BOXED(2124513245,32,FLEN)
NAN_BOXED(4271996893,32,FLEN)
NAN_BOXED(2124513245,32,FLEN)
NAN_BOXED(4271996893,32,FLEN)
NAN_BOXED(2126795865,32,FLEN)
NAN_BOXED(4274279513,32,FLEN)
NAN_BOXED(2126795865,32,FLEN)
NAN_BOXED(4274279513,32,FLEN)
NAN_BOXED(2126795865,32,FLEN)
NAN_BOXED(4274279513,32,FLEN)
NAN_BOXED(2126795865,32,FLEN)
NAN_BOXED(4274279513,32,FLEN)
NAN_BOXED(2126795865,32,FLEN)
NAN_BOXED(4274279513,32,FLEN)
NAN_BOXED(2132180292,32,FLEN)
NAN_BOXED(4279663940,32,FLEN)
NAN_BOXED(2132180292,32,FLEN)
NAN_BOXED(4279663940,32,FLEN)
NAN_BOXED(2132180292,32,FLEN)
NAN_BOXED(4279663940,32,FLEN)
NAN_BOXED(2132180292,32,FLEN)
NAN_BOXED(4279663940,32,FLEN)
NAN_BOXED(2132180292,32,FLEN)
NAN_BOXED(4279663940,32,FLEN)
NAN_BOXED(2125923170,32,FLEN)
NAN_BOXED(4273406818,32,FLEN)
test_dataset_1:
NAN_BOXED(2125923170,32,FLEN)
NAN_BOXED(4273406818,32,FLEN)
NAN_BOXED(2125923170,32,FLEN)
NAN_BOXED(4273406818,32,FLEN)
NAN_BOXED(2125923170,32,FLEN)
NAN_BOXED(4273406818,32,FLEN)
NAN_BOXED(2125923170,32,FLEN)
NAN_BOXED(4273406818,32,FLEN)
NAN_BOXED(2133744528,32,FLEN)
NAN_BOXED(4281228176,32,FLEN)
NAN_BOXED(2133744528,32,FLEN)
NAN_BOXED(4281228176,32,FLEN)
NAN_BOXED(2133744528,32,FLEN)
NAN_BOXED(4281228176,32,FLEN)
NAN_BOXED(2133744528,32,FLEN)
NAN_BOXED(4281228176,32,FLEN)
NAN_BOXED(2133744528,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(4267209618,32,FLEN)
NAN_BOXED(2119725970,32,FLEN)
NAN_BOXED(4267209618,32,FLEN)
NAN_BOXED(2119725970,32,FLEN)
NAN_BOXED(4267209618,32,FLEN)
NAN_BOXED(2119725970,32,FLEN)
NAN_BOXED(4267209618,32,FLEN)
NAN_BOXED(2119725970,32,FLEN)
NAN_BOXED(4267209618,32,FLEN)
NAN_BOXED(2129490980,32,FLEN)
NAN_BOXED(4276974628,32,FLEN)
NAN_BOXED(2129490980,32,FLEN)
NAN_BOXED(4276974628,32,FLEN)
NAN_BOXED(2129490980,32,FLEN)
NAN_BOXED(4276974628,32,FLEN)
NAN_BOXED(2129490980,32,FLEN)
NAN_BOXED(4276974628,32,FLEN)
NAN_BOXED(2129490980,32,FLEN)
NAN_BOXED(4276974628,32,FLEN)
NAN_BOXED(2133765080,32,FLEN)
NAN_BOXED(4281248728,32,FLEN)
NAN_BOXED(2133765080,32,FLEN)
NAN_BOXED(4281248728,32,FLEN)
NAN_BOXED(2133765080,32,FLEN)
NAN_BOXED(4281248728,32,FLEN)
NAN_BOXED(2133765080,32,FLEN)
NAN_BOXED(4281248728,32,FLEN)
NAN_BOXED(2133765080,32,FLEN)
NAN_BOXED(4281248728,32,FLEN)
NAN_BOXED(2132512715,32,FLEN)
NAN_BOXED(4279996363,32,FLEN)
NAN_BOXED(2132512715,32,FLEN)
NAN_BOXED(4279996363,32,FLEN)
NAN_BOXED(2132512715,32,FLEN)
NAN_BOXED(4279996363,32,FLEN)
NAN_BOXED(2132512715,32,FLEN)
NAN_BOXED(4279996363,32,FLEN)
NAN_BOXED(2132512715,32,FLEN)
NAN_BOXED(4279996363,32,FLEN)
NAN_BOXED(2121150845,32,FLEN)
NAN_BOXED(4268634493,32,FLEN)
NAN_BOXED(2121150845,32,FLEN)
NAN_BOXED(4268634493,32,FLEN)
NAN_BOXED(2121150845,32,FLEN)
NAN_BOXED(4268634493,32,FLEN)
NAN_BOXED(2121150845,32,FLEN)
NAN_BOXED(4268634493,32,FLEN)
NAN_BOXED(2121150845,32,FLEN)
NAN_BOXED(4268634493,32,FLEN)
NAN_BOXED(2133627826,32,FLEN)
NAN_BOXED(4281111474,32,FLEN)
NAN_BOXED(2133627826,32,FLEN)
NAN_BOXED(4281111474,32,FLEN)
NAN_BOXED(2133627826,32,FLEN)
NAN_BOXED(4281111474,32,FLEN)
NAN_BOXED(2133627826,32,FLEN)
NAN_BOXED(4281111474,32,FLEN)
NAN_BOXED(2133627826,32,FLEN)
NAN_BOXED(4281111474,32,FLEN)
NAN_BOXED(2125811076,32,FLEN)
NAN_BOXED(4273294724,32,FLEN)
NAN_BOXED(2125811076,32,FLEN)
NAN_BOXED(4273294724,32,FLEN)
NAN_BOXED(2125811076,32,FLEN)
NAN_BOXED(4273294724,32,FLEN)
NAN_BOXED(2125811076,32,FLEN)
NAN_BOXED(4273294724,32,FLEN)
NAN_BOXED(2125811076,32,FLEN)
NAN_BOXED(4273294724,32,FLEN)
NAN_BOXED(2124855507,32,FLEN)
NAN_BOXED(4272339155,32,FLEN)
NAN_BOXED(2124855507,32,FLEN)
NAN_BOXED(4272339155,32,FLEN)
NAN_BOXED(2124855507,32,FLEN)
NAN_BOXED(4272339155,32,FLEN)
NAN_BOXED(2124855507,32,FLEN)
NAN_BOXED(4272339155,32,FLEN)
NAN_BOXED(2124855507,32,FLEN)
NAN_BOXED(4272339155,32,FLEN)
NAN_BOXED(2133806161,32,FLEN)
NAN_BOXED(4281289809,32,FLEN)
NAN_BOXED(2133806161,32,FLEN)
NAN_BOXED(4281289809,32,FLEN)
NAN_BOXED(2133806161,32,FLEN)
NAN_BOXED(4281289809,32,FLEN)
NAN_BOXED(2133806161,32,FLEN)
NAN_BOXED(4281289809,32,FLEN)
NAN_BOXED(2133806161,32,FLEN)
NAN_BOXED(4281289809,32,FLEN)
NAN_BOXED(2125933559,32,FLEN)
NAN_BOXED(4273417207,32,FLEN)
NAN_BOXED(2125933559,32,FLEN)
NAN_BOXED(4273417207,32,FLEN)
NAN_BOXED(2125933559,32,FLEN)
NAN_BOXED(4273417207,32,FLEN)
NAN_BOXED(2125933559,32,FLEN)
NAN_BOXED(4273417207,32,FLEN)
NAN_BOXED(2125933559,32,FLEN)
NAN_BOXED(4273417207,32,FLEN)
NAN_BOXED(2118651614,32,FLEN)
NAN_BOXED(4266135262,32,FLEN)
NAN_BOXED(2118651614,32,FLEN)
NAN_BOXED(4266135262,32,FLEN)
NAN_BOXED(2118651614,32,FLEN)
NAN_BOXED(4266135262,32,FLEN)
NAN_BOXED(2118651614,32,FLEN)
NAN_BOXED(4266135262,32,FLEN)
NAN_BOXED(2118651614,32,FLEN)
NAN_BOXED(4266135262,32,FLEN)
NAN_BOXED(2127737685,32,FLEN)
NAN_BOXED(4275221333,32,FLEN)
NAN_BOXED(2127737685,32,FLEN)
NAN_BOXED(4275221333,32,FLEN)
NAN_BOXED(2127737685,32,FLEN)
NAN_BOXED(4275221333,32,FLEN)
NAN_BOXED(2127737685,32,FLEN)
NAN_BOXED(4275221333,32,FLEN)
NAN_BOXED(2127737685,32,FLEN)
NAN_BOXED(4275221333,32,FLEN)
NAN_BOXED(2131373804,32,FLEN)
NAN_BOXED(4278857452,32,FLEN)
NAN_BOXED(2131373804,32,FLEN)
NAN_BOXED(4278857452,32,FLEN)
NAN_BOXED(2131373804,32,FLEN)
NAN_BOXED(4278857452,32,FLEN)
NAN_BOXED(2131373804,32,FLEN)
NAN_BOXED(4278857452,32,FLEN)
NAN_BOXED(2131373804,32,FLEN)
NAN_BOXED(4278857452,32,FLEN)
NAN_BOXED(2132696775,32,FLEN)
NAN_BOXED(4280180423,32,FLEN)
NAN_BOXED(2132696775,32,FLEN)
NAN_BOXED(4280180423,32,FLEN)
NAN_BOXED(2132696775,32,FLEN)
NAN_BOXED(4280180423,32,FLEN)
NAN_BOXED(2132696775,32,FLEN)
NAN_BOXED(4280180423,32,FLEN)
NAN_BOXED(2132696775,32,FLEN)
NAN_BOXED(4280180423,32,FLEN)
NAN_BOXED(2053156858,32,FLEN)
NAN_BOXED(4200640506,32,FLEN)
NAN_BOXED(2053156858,32,FLEN)
NAN_BOXED(4200640506,32,FLEN)
NAN_BOXED(2053156858,32,FLEN)
NAN_BOXED(4200640506,32,FLEN)
NAN_BOXED(2053156858,32,FLEN)
NAN_BOXED(4200640506,32,FLEN)
NAN_BOXED(2053156858,32,FLEN)
NAN_BOXED(4200640506,32,FLEN)
NAN_BOXED(2133234792,32,FLEN)
NAN_BOXED(4280718440,32,FLEN)
NAN_BOXED(2133234792,32,FLEN)
NAN_BOXED(4280718440,32,FLEN)
NAN_BOXED(2133234792,32,FLEN)
NAN_BOXED(4280718440,32,FLEN)
NAN_BOXED(2133234792,32,FLEN)
NAN_BOXED(4280718440,32,FLEN)
NAN_BOXED(2133234792,32,FLEN)
NAN_BOXED(4280718440,32,FLEN)
NAN_BOXED(2121908678,32,FLEN)
NAN_BOXED(4269392326,32,FLEN)
NAN_BOXED(2121908678,32,FLEN)
NAN_BOXED(4269392326,32,FLEN)
NAN_BOXED(2121908678,32,FLEN)
NAN_BOXED(4269392326,32,FLEN)
NAN_BOXED(2121908678,32,FLEN)
NAN_BOXED(4269392326,32,FLEN)
NAN_BOXED(2121908678,32,FLEN)
NAN_BOXED(4269392326,32,FLEN)
NAN_BOXED(2115157329,32,FLEN)
NAN_BOXED(4262640977,32,FLEN)
NAN_BOXED(2115157329,32,FLEN)
NAN_BOXED(4262640977,32,FLEN)
NAN_BOXED(2115157329,32,FLEN)
NAN_BOXED(4262640977,32,FLEN)
NAN_BOXED(2115157329,32,FLEN)
NAN_BOXED(4262640977,32,FLEN)
NAN_BOXED(2115157329,32,FLEN)
NAN_BOXED(4262640977,32,FLEN)
NAN_BOXED(2117550540,32,FLEN)
NAN_BOXED(4265034188,32,FLEN)
NAN_BOXED(2117550540,32,FLEN)
NAN_BOXED(4265034188,32,FLEN)
NAN_BOXED(2117550540,32,FLEN)
NAN_BOXED(4265034188,32,FLEN)
NAN_BOXED(2117550540,32,FLEN)
NAN_BOXED(4265034188,32,FLEN)
NAN_BOXED(2117550540,32,FLEN)
NAN_BOXED(4265034188,32,FLEN)
NAN_BOXED(2132424160,32,FLEN)
NAN_BOXED(4279907808,32,FLEN)
NAN_BOXED(2132424160,32,FLEN)
NAN_BOXED(4279907808,32,FLEN)
NAN_BOXED(2132424160,32,FLEN)
NAN_BOXED(4279907808,32,FLEN)
NAN_BOXED(2132424160,32,FLEN)
NAN_BOXED(4279907808,32,FLEN)
NAN_BOXED(2132424160,32,FLEN)
NAN_BOXED(4279907808,32,FLEN)
NAN_BOXED(2104959273,32,FLEN)
NAN_BOXED(4252442921,32,FLEN)
NAN_BOXED(2104959273,32,FLEN)
NAN_BOXED(4252442921,32,FLEN)
NAN_BOXED(2104959273,32,FLEN)
NAN_BOXED(4252442921,32,FLEN)
NAN_BOXED(2104959273,32,FLEN)
NAN_BOXED(4252442921,32,FLEN)
NAN_BOXED(2104959273,32,FLEN)
NAN_BOXED(4252442921,32,FLEN)
NAN_BOXED(2126711960,32,FLEN)
NAN_BOXED(4274195608,32,FLEN)
NAN_BOXED(2126711960,32,FLEN)
NAN_BOXED(4274195608,32,FLEN)
NAN_BOXED(2126711960,32,FLEN)
NAN_BOXED(4274195608,32,FLEN)
NAN_BOXED(2126711960,32,FLEN)
NAN_BOXED(4274195608,32,FLEN)
NAN_BOXED(2126711960,32,FLEN)
NAN_BOXED(4274195608,32,FLEN)
NAN_BOXED(2108130121,32,FLEN)
NAN_BOXED(4255613769,32,FLEN)
NAN_BOXED(2108130121,32,FLEN)
NAN_BOXED(4255613769,32,FLEN)
NAN_BOXED(2108130121,32,FLEN)
NAN_BOXED(4255613769,32,FLEN)
NAN_BOXED(2108130121,32,FLEN)
NAN_BOXED(4255613769,32,FLEN)
NAN_BOXED(2108130121,32,FLEN)
NAN_BOXED(4255613769,32,FLEN)
NAN_BOXED(2131208423,32,FLEN)
NAN_BOXED(4278692071,32,FLEN)
NAN_BOXED(2131208423,32,FLEN)
NAN_BOXED(4278692071,32,FLEN)
NAN_BOXED(2131208423,32,FLEN)
NAN_BOXED(4278692071,32,FLEN)
NAN_BOXED(2131208423,32,FLEN)
NAN_BOXED(4278692071,32,FLEN)
NAN_BOXED(2131208423,32,FLEN)
NAN_BOXED(4278692071,32,FLEN)
NAN_BOXED(2132566188,32,FLEN)
NAN_BOXED(4280049836,32,FLEN)
NAN_BOXED(2132566188,32,FLEN)
NAN_BOXED(4280049836,32,FLEN)
NAN_BOXED(2132566188,32,FLEN)
NAN_BOXED(4280049836,32,FLEN)
NAN_BOXED(2132566188,32,FLEN)
NAN_BOXED(4280049836,32,FLEN)
NAN_BOXED(2132566188,32,FLEN)
NAN_BOXED(4280049836,32,FLEN)
NAN_BOXED(2134445719,32,FLEN)
NAN_BOXED(4281929367,32,FLEN)
NAN_BOXED(2134445719,32,FLEN)
NAN_BOXED(4281929367,32,FLEN)
NAN_BOXED(2134445719,32,FLEN)
NAN_BOXED(4281929367,32,FLEN)
NAN_BOXED(2134445719,32,FLEN)
NAN_BOXED(4281929367,32,FLEN)
NAN_BOXED(2134445719,32,FLEN)
NAN_BOXED(4281929367,32,FLEN)
NAN_BOXED(2128717083,32,FLEN)
NAN_BOXED(4276200731,32,FLEN)
NAN_BOXED(2128717083,32,FLEN)
NAN_BOXED(4276200731,32,FLEN)
NAN_BOXED(2128717083,32,FLEN)
NAN_BOXED(4276200731,32,FLEN)
NAN_BOXED(2128717083,32,FLEN)
NAN_BOXED(4276200731,32,FLEN)
NAN_BOXED(2128717083,32,FLEN)
NAN_BOXED(4276200731,32,FLEN)
NAN_BOXED(2128935265,32,FLEN)
NAN_BOXED(4276418913,32,FLEN)
NAN_BOXED(2128935265,32,FLEN)
NAN_BOXED(4276418913,32,FLEN)
NAN_BOXED(2128935265,32,FLEN)
NAN_BOXED(4276418913,32,FLEN)
NAN_BOXED(2128935265,32,FLEN)
NAN_BOXED(4276418913,32,FLEN)
NAN_BOXED(2128935265,32,FLEN)
NAN_BOXED(4276418913,32,FLEN)
NAN_BOXED(2128415947,32,FLEN)
NAN_BOXED(4275899595,32,FLEN)
NAN_BOXED(2128415947,32,FLEN)
NAN_BOXED(4275899595,32,FLEN)
NAN_BOXED(2128415947,32,FLEN)
NAN_BOXED(4275899595,32,FLEN)
NAN_BOXED(2128415947,32,FLEN)
NAN_BOXED(4275899595,32,FLEN)
NAN_BOXED(2128415947,32,FLEN)
NAN_BOXED(4275899595,32,FLEN)
NAN_BOXED(2115072985,32,FLEN)
NAN_BOXED(4262556633,32,FLEN)
NAN_BOXED(2115072985,32,FLEN)
NAN_BOXED(4262556633,32,FLEN)
NAN_BOXED(2115072985,32,FLEN)
NAN_BOXED(4262556633,32,FLEN)
NAN_BOXED(2115072985,32,FLEN)
NAN_BOXED(4262556633,32,FLEN)
NAN_BOXED(2115072985,32,FLEN)
NAN_BOXED(4262556633,32,FLEN)
NAN_BOXED(2129350157,32,FLEN)
NAN_BOXED(4276833805,32,FLEN)
NAN_BOXED(2129350157,32,FLEN)
NAN_BOXED(4276833805,32,FLEN)
NAN_BOXED(2129350157,32,FLEN)
NAN_BOXED(4276833805,32,FLEN)
NAN_BOXED(2129350157,32,FLEN)
NAN_BOXED(4276833805,32,FLEN)
NAN_BOXED(2129350157,32,FLEN)
NAN_BOXED(4276833805,32,FLEN)
NAN_BOXED(2125921510,32,FLEN)
NAN_BOXED(4273405158,32,FLEN)
NAN_BOXED(2125921510,32,FLEN)
NAN_BOXED(4273405158,32,FLEN)
NAN_BOXED(2125921510,32,FLEN)
NAN_BOXED(4273405158,32,FLEN)
NAN_BOXED(2125921510,32,FLEN)
NAN_BOXED(4273405158,32,FLEN)
NAN_BOXED(2125921510,32,FLEN)
NAN_BOXED(4273405158,32,FLEN)
NAN_BOXED(2131850687,32,FLEN)
NAN_BOXED(4279334335,32,FLEN)
NAN_BOXED(2131850687,32,FLEN)
NAN_BOXED(4279334335,32,FLEN)
NAN_BOXED(2131850687,32,FLEN)
NAN_BOXED(4279334335,32,FLEN)
NAN_BOXED(2131850687,32,FLEN)
NAN_BOXED(4279334335,32,FLEN)
NAN_BOXED(2131850687,32,FLEN)
NAN_BOXED(4279334335,32,FLEN)
NAN_BOXED(2133936645,32,FLEN)
NAN_BOXED(4281420293,32,FLEN)
NAN_BOXED(2133936645,32,FLEN)
NAN_BOXED(4281420293,32,FLEN)
NAN_BOXED(2133936645,32,FLEN)
NAN_BOXED(4281420293,32,FLEN)
NAN_BOXED(2133936645,32,FLEN)
NAN_BOXED(4281420293,32,FLEN)
NAN_BOXED(2133936645,32,FLEN)
NAN_BOXED(4281420293,32,FLEN)
NAN_BOXED(2133619456,32,FLEN)
NAN_BOXED(4281103104,32,FLEN)
NAN_BOXED(2133619456,32,FLEN)
NAN_BOXED(4281103104,32,FLEN)
NAN_BOXED(2133619456,32,FLEN)
NAN_BOXED(4281103104,32,FLEN)
NAN_BOXED(2133619456,32,FLEN)
NAN_BOXED(4281103104,32,FLEN)
NAN_BOXED(2133619456,32,FLEN)
NAN_BOXED(4281103104,32,FLEN)
NAN_BOXED(2127533858,32,FLEN)
NAN_BOXED(4275017506,32,FLEN)
NAN_BOXED(2127533858,32,FLEN)
NAN_BOXED(4275017506,32,FLEN)
NAN_BOXED(2127533858,32,FLEN)
NAN_BOXED(4275017506,32,FLEN)
NAN_BOXED(2127533858,32,FLEN)
NAN_BOXED(4275017506,32,FLEN)
NAN_BOXED(2127533858,32,FLEN)
NAN_BOXED(4275017506,32,FLEN)
NAN_BOXED(2131192342,32,FLEN)
NAN_BOXED(4278675990,32,FLEN)
NAN_BOXED(2131192342,32,FLEN)
NAN_BOXED(4278675990,32,FLEN)
NAN_BOXED(2131192342,32,FLEN)
NAN_BOXED(4278675990,32,FLEN)
NAN_BOXED(2131192342,32,FLEN)
NAN_BOXED(4278675990,32,FLEN)
NAN_BOXED(2131192342,32,FLEN)
NAN_BOXED(4278675990,32,FLEN)
NAN_BOXED(2132530476,32,FLEN)
NAN_BOXED(4280014124,32,FLEN)
NAN_BOXED(2132530476,32,FLEN)
NAN_BOXED(4280014124,32,FLEN)
NAN_BOXED(2132530476,32,FLEN)
NAN_BOXED(4280014124,32,FLEN)
NAN_BOXED(2132530476,32,FLEN)
NAN_BOXED(4280014124,32,FLEN)
NAN_BOXED(2132530476,32,FLEN)
NAN_BOXED(4280014124,32,FLEN)
NAN_BOXED(2133580020,32,FLEN)
NAN_BOXED(4281063668,32,FLEN)
NAN_BOXED(2133580020,32,FLEN)
NAN_BOXED(4281063668,32,FLEN)
NAN_BOXED(2133580020,32,FLEN)
NAN_BOXED(4281063668,32,FLEN)
NAN_BOXED(2133580020,32,FLEN)
NAN_BOXED(4281063668,32,FLEN)
NAN_BOXED(2133580020,32,FLEN)
NAN_BOXED(4281063668,32,FLEN)
NAN_BOXED(2134268631,32,FLEN)
NAN_BOXED(4281752279,32,FLEN)
NAN_BOXED(2134268631,32,FLEN)
NAN_BOXED(4281752279,32,FLEN)
NAN_BOXED(2134268631,32,FLEN)
NAN_BOXED(4281752279,32,FLEN)
NAN_BOXED(2134268631,32,FLEN)
NAN_BOXED(4281752279,32,FLEN)
NAN_BOXED(2134268631,32,FLEN)
NAN_BOXED(4281752279,32,FLEN)
NAN_BOXED(2125268007,32,FLEN)
NAN_BOXED(4272751655,32,FLEN)
NAN_BOXED(2125268007,32,FLEN)
NAN_BOXED(4272751655,32,FLEN)
NAN_BOXED(2125268007,32,FLEN)
NAN_BOXED(4272751655,32,FLEN)
NAN_BOXED(2125268007,32,FLEN)
NAN_BOXED(4272751655,32,FLEN)
NAN_BOXED(2125268007,32,FLEN)
NAN_BOXED(4272751655,32,FLEN)
NAN_BOXED(2134853648,32,FLEN)
NAN_BOXED(4282337296,32,FLEN)
NAN_BOXED(2134853648,32,FLEN)
NAN_BOXED(4282337296,32,FLEN)
NAN_BOXED(2134853648,32,FLEN)
NAN_BOXED(4282337296,32,FLEN)
NAN_BOXED(2134853648,32,FLEN)
NAN_BOXED(4282337296,32,FLEN)
NAN_BOXED(2134853648,32,FLEN)
NAN_BOXED(4282337296,32,FLEN)
NAN_BOXED(2132300163,32,FLEN)
NAN_BOXED(4279783811,32,FLEN)
NAN_BOXED(2132300163,32,FLEN)
NAN_BOXED(4279783811,32,FLEN)
NAN_BOXED(2132300163,32,FLEN)
NAN_BOXED(4279783811,32,FLEN)
NAN_BOXED(2132300163,32,FLEN)
NAN_BOXED(4279783811,32,FLEN)
NAN_BOXED(2132300163,32,FLEN)
NAN_BOXED(4279783811,32,FLEN)
NAN_BOXED(2129350407,32,FLEN)
NAN_BOXED(4276834055,32,FLEN)
NAN_BOXED(2129350407,32,FLEN)
NAN_BOXED(4276834055,32,FLEN)
NAN_BOXED(2129350407,32,FLEN)
NAN_BOXED(4276834055,32,FLEN)
NAN_BOXED(2129350407,32,FLEN)
NAN_BOXED(4276834055,32,FLEN)
NAN_BOXED(2129350407,32,FLEN)
NAN_BOXED(4276834055,32,FLEN)
NAN_BOXED(2129787392,32,FLEN)
NAN_BOXED(4277271040,32,FLEN)
NAN_BOXED(2129787392,32,FLEN)
NAN_BOXED(4277271040,32,FLEN)
NAN_BOXED(2129787392,32,FLEN)
NAN_BOXED(4277271040,32,FLEN)
NAN_BOXED(2129787392,32,FLEN)
NAN_BOXED(4277271040,32,FLEN)
NAN_BOXED(2129787392,32,FLEN)
NAN_BOXED(4277271040,32,FLEN)
NAN_BOXED(2117772990,32,FLEN)
NAN_BOXED(4265256638,32,FLEN)
NAN_BOXED(2117772990,32,FLEN)
NAN_BOXED(4265256638,32,FLEN)
NAN_BOXED(2117772990,32,FLEN)
NAN_BOXED(4265256638,32,FLEN)
NAN_BOXED(2117772990,32,FLEN)
NAN_BOXED(4265256638,32,FLEN)
NAN_BOXED(2117772990,32,FLEN)
NAN_BOXED(4265256638,32,FLEN)
NAN_BOXED(2108943123,32,FLEN)
NAN_BOXED(4256426771,32,FLEN)
NAN_BOXED(2108943123,32,FLEN)
NAN_BOXED(4256426771,32,FLEN)
NAN_BOXED(2108943123,32,FLEN)
NAN_BOXED(4256426771,32,FLEN)
NAN_BOXED(2108943123,32,FLEN)
NAN_BOXED(4256426771,32,FLEN)
NAN_BOXED(2108943123,32,FLEN)
NAN_BOXED(4256426771,32,FLEN)
NAN_BOXED(2132315991,32,FLEN)
NAN_BOXED(4279799639,32,FLEN)
NAN_BOXED(2132315991,32,FLEN)
NAN_BOXED(4279799639,32,FLEN)
NAN_BOXED(2132315991,32,FLEN)
NAN_BOXED(4279799639,32,FLEN)
NAN_BOXED(2132315991,32,FLEN)
NAN_BOXED(4279799639,32,FLEN)
NAN_BOXED(2132315991,32,FLEN)
NAN_BOXED(4279799639,32,FLEN)
NAN_BOXED(2132584386,32,FLEN)
NAN_BOXED(4280068034,32,FLEN)
NAN_BOXED(2132584386,32,FLEN)
NAN_BOXED(4280068034,32,FLEN)
NAN_BOXED(2132584386,32,FLEN)
NAN_BOXED(4280068034,32,FLEN)
NAN_BOXED(2132584386,32,FLEN)
NAN_BOXED(4280068034,32,FLEN)
NAN_BOXED(2132584386,32,FLEN)
NAN_BOXED(4280068034,32,FLEN)
NAN_BOXED(2111884927,32,FLEN)
NAN_BOXED(4259368575,32,FLEN)
NAN_BOXED(2111884927,32,FLEN)
NAN_BOXED(4259368575,32,FLEN)
NAN_BOXED(2111884927,32,FLEN)
NAN_BOXED(4259368575,32,FLEN)
NAN_BOXED(2111884927,32,FLEN)
NAN_BOXED(4259368575,32,FLEN)
NAN_BOXED(2111884927,32,FLEN)
NAN_BOXED(4259368575,32,FLEN)
NAN_BOXED(2097870212,32,FLEN)
NAN_BOXED(4245353860,32,FLEN)
NAN_BOXED(2097870212,32,FLEN)
NAN_BOXED(4245353860,32,FLEN)
NAN_BOXED(2097870212,32,FLEN)
NAN_BOXED(4245353860,32,FLEN)
NAN_BOXED(2097870212,32,FLEN)
NAN_BOXED(4245353860,32,FLEN)
NAN_BOXED(2097870212,32,FLEN)
NAN_BOXED(4245353860,32,FLEN)
NAN_BOXED(2133768474,32,FLEN)
NAN_BOXED(4281252122,32,FLEN)
NAN_BOXED(2133768474,32,FLEN)
NAN_BOXED(4281252122,32,FLEN)
NAN_BOXED(2133768474,32,FLEN)
NAN_BOXED(4281252122,32,FLEN)
NAN_BOXED(2133768474,32,FLEN)
NAN_BOXED(4281252122,32,FLEN)
NAN_BOXED(2133768474,32,FLEN)
NAN_BOXED(4281252122,32,FLEN)
NAN_BOXED(2130881616,32,FLEN)
NAN_BOXED(4278365264,32,FLEN)
NAN_BOXED(2130881616,32,FLEN)
NAN_BOXED(4278365264,32,FLEN)
NAN_BOXED(2130881616,32,FLEN)
NAN_BOXED(4278365264,32,FLEN)
NAN_BOXED(2130881616,32,FLEN)
NAN_BOXED(4278365264,32,FLEN)
NAN_BOXED(2130881616,32,FLEN)
NAN_BOXED(4278365264,32,FLEN)
NAN_BOXED(2129909511,32,FLEN)
NAN_BOXED(4277393159,32,FLEN)
NAN_BOXED(2129909511,32,FLEN)
NAN_BOXED(4277393159,32,FLEN)
NAN_BOXED(2129909511,32,FLEN)
NAN_BOXED(4277393159,32,FLEN)
NAN_BOXED(2129909511,32,FLEN)
NAN_BOXED(4277393159,32,FLEN)
NAN_BOXED(2129909511,32,FLEN)
NAN_BOXED(4277393159,32,FLEN)
NAN_BOXED(2128423545,32,FLEN)
NAN_BOXED(4275907193,32,FLEN)
NAN_BOXED(2128423545,32,FLEN)
NAN_BOXED(4275907193,32,FLEN)
NAN_BOXED(2128423545,32,FLEN)
NAN_BOXED(4275907193,32,FLEN)
NAN_BOXED(2128423545,32,FLEN)
NAN_BOXED(4275907193,32,FLEN)
NAN_BOXED(2128423545,32,FLEN)
NAN_BOXED(4275907193,32,FLEN)
NAN_BOXED(2123244092,32,FLEN)
NAN_BOXED(4270727740,32,FLEN)
NAN_BOXED(2123244092,32,FLEN)
NAN_BOXED(4270727740,32,FLEN)
NAN_BOXED(2123244092,32,FLEN)
NAN_BOXED(4270727740,32,FLEN)
NAN_BOXED(2123244092,32,FLEN)
NAN_BOXED(4270727740,32,FLEN)
NAN_BOXED(2123244092,32,FLEN)
NAN_BOXED(4270727740,32,FLEN)
NAN_BOXED(2095028153,32,FLEN)
NAN_BOXED(4242511801,32,FLEN)
NAN_BOXED(2095028153,32,FLEN)
NAN_BOXED(4242511801,32,FLEN)
NAN_BOXED(2095028153,32,FLEN)
NAN_BOXED(4242511801,32,FLEN)
NAN_BOXED(2095028153,32,FLEN)
NAN_BOXED(4242511801,32,FLEN)
NAN_BOXED(2095028153,32,FLEN)
NAN_BOXED(4242511801,32,FLEN)
NAN_BOXED(2134410395,32,FLEN)
NAN_BOXED(4281894043,32,FLEN)
NAN_BOXED(2134410395,32,FLEN)
NAN_BOXED(4281894043,32,FLEN)
NAN_BOXED(2134410395,32,FLEN)
NAN_BOXED(4281894043,32,FLEN)
NAN_BOXED(2134410395,32,FLEN)
NAN_BOXED(4281894043,32,FLEN)
NAN_BOXED(2134410395,32,FLEN)
NAN_BOXED(4281894043,32,FLEN)
NAN_BOXED(2109623695,32,FLEN)
NAN_BOXED(4257107343,32,FLEN)
NAN_BOXED(2109623695,32,FLEN)
NAN_BOXED(4257107343,32,FLEN)
NAN_BOXED(2109623695,32,FLEN)
NAN_BOXED(4257107343,32,FLEN)
NAN_BOXED(2109623695,32,FLEN)
NAN_BOXED(4257107343,32,FLEN)
NAN_BOXED(2109623695,32,FLEN)
NAN_BOXED(4257107343,32,FLEN)
NAN_BOXED(2132393547,32,FLEN)
NAN_BOXED(4279877195,32,FLEN)
NAN_BOXED(2132393547,32,FLEN)
NAN_BOXED(4279877195,32,FLEN)
NAN_BOXED(2132393547,32,FLEN)
NAN_BOXED(4279877195,32,FLEN)
NAN_BOXED(2132393547,32,FLEN)
NAN_BOXED(4279877195,32,FLEN)
NAN_BOXED(2132393547,32,FLEN)
NAN_BOXED(4279877195,32,FLEN)
NAN_BOXED(2089548260,32,FLEN)
NAN_BOXED(4237031908,32,FLEN)
NAN_BOXED(2089548260,32,FLEN)
NAN_BOXED(4237031908,32,FLEN)
NAN_BOXED(2089548260,32,FLEN)
NAN_BOXED(4237031908,32,FLEN)
NAN_BOXED(2089548260,32,FLEN)
NAN_BOXED(4237031908,32,FLEN)
NAN_BOXED(2089548260,32,FLEN)
NAN_BOXED(4237031908,32,FLEN)
NAN_BOXED(2107369346,32,FLEN)
NAN_BOXED(4254852994,32,FLEN)
NAN_BOXED(2107369346,32,FLEN)
NAN_BOXED(4254852994,32,FLEN)
NAN_BOXED(2107369346,32,FLEN)
NAN_BOXED(4254852994,32,FLEN)
NAN_BOXED(2107369346,32,FLEN)
NAN_BOXED(4254852994,32,FLEN)
NAN_BOXED(2107369346,32,FLEN)
NAN_BOXED(4254852994,32,FLEN)
NAN_BOXED(2116655308,32,FLEN)
NAN_BOXED(4264138956,32,FLEN)
NAN_BOXED(2116655308,32,FLEN)
NAN_BOXED(4264138956,32,FLEN)
NAN_BOXED(2116655308,32,FLEN)
NAN_BOXED(4264138956,32,FLEN)
NAN_BOXED(2116655308,32,FLEN)
NAN_BOXED(4264138956,32,FLEN)
NAN_BOXED(2116655308,32,FLEN)
NAN_BOXED(4264138956,32,FLEN)
NAN_BOXED(2122744651,32,FLEN)
NAN_BOXED(4270228299,32,FLEN)
NAN_BOXED(2122744651,32,FLEN)
NAN_BOXED(4270228299,32,FLEN)
NAN_BOXED(2122744651,32,FLEN)
NAN_BOXED(4270228299,32,FLEN)
NAN_BOXED(2122744651,32,FLEN)
NAN_BOXED(4270228299,32,FLEN)
NAN_BOXED(2122744651,32,FLEN)
NAN_BOXED(4270228299,32,FLEN)
NAN_BOXED(2126603643,32,FLEN)
NAN_BOXED(4274087291,32,FLEN)
NAN_BOXED(2126603643,32,FLEN)
NAN_BOXED(4274087291,32,FLEN)
NAN_BOXED(2126603643,32,FLEN)
NAN_BOXED(4274087291,32,FLEN)
NAN_BOXED(2126603643,32,FLEN)
NAN_BOXED(4274087291,32,FLEN)
NAN_BOXED(2126603643,32,FLEN)
NAN_BOXED(4274087291,32,FLEN)
NAN_BOXED(2107311064,32,FLEN)
NAN_BOXED(4254794712,32,FLEN)
NAN_BOXED(2107311064,32,FLEN)
NAN_BOXED(4254794712,32,FLEN)
NAN_BOXED(2107311064,32,FLEN)
NAN_BOXED(4254794712,32,FLEN)
NAN_BOXED(2107311064,32,FLEN)
NAN_BOXED(4254794712,32,FLEN)
NAN_BOXED(2107311064,32,FLEN)
NAN_BOXED(4254794712,32,FLEN)
NAN_BOXED(2115574513,32,FLEN)
NAN_BOXED(4263058161,32,FLEN)
NAN_BOXED(2115574513,32,FLEN)
NAN_BOXED(4263058161,32,FLEN)
NAN_BOXED(2115574513,32,FLEN)
NAN_BOXED(4263058161,32,FLEN)
NAN_BOXED(2115574513,32,FLEN)
NAN_BOXED(4263058161,32,FLEN)
NAN_BOXED(2115574513,32,FLEN)
NAN_BOXED(4263058161,32,FLEN)
NAN_BOXED(2131523460,32,FLEN)
NAN_BOXED(4279007108,32,FLEN)
NAN_BOXED(2131523460,32,FLEN)
NAN_BOXED(4279007108,32,FLEN)
NAN_BOXED(2131523460,32,FLEN)
NAN_BOXED(4279007108,32,FLEN)
NAN_BOXED(2131523460,32,FLEN)
NAN_BOXED(4279007108,32,FLEN)
NAN_BOXED(2131523460,32,FLEN)
NAN_BOXED(4279007108,32,FLEN)
NAN_BOXED(2133875002,32,FLEN)
NAN_BOXED(4281358650,32,FLEN)
NAN_BOXED(2133875002,32,FLEN)
NAN_BOXED(4281358650,32,FLEN)
NAN_BOXED(2133875002,32,FLEN)
NAN_BOXED(4281358650,32,FLEN)
NAN_BOXED(2133875002,32,FLEN)
NAN_BOXED(4281358650,32,FLEN)
NAN_BOXED(2133875002,32,FLEN)
NAN_BOXED(4281358650,32,FLEN)
NAN_BOXED(2130781600,32,FLEN)
NAN_BOXED(4278265248,32,FLEN)
NAN_BOXED(2130781600,32,FLEN)
NAN_BOXED(4278265248,32,FLEN)
NAN_BOXED(2130781600,32,FLEN)
NAN_BOXED(4278265248,32,FLEN)
NAN_BOXED(2130781600,32,FLEN)
NAN_BOXED(4278265248,32,FLEN)
NAN_BOXED(2130781600,32,FLEN)
NAN_BOXED(4278265248,32,FLEN)
NAN_BOXED(2100450590,32,FLEN)
NAN_BOXED(4247934238,32,FLEN)
NAN_BOXED(2100450590,32,FLEN)
NAN_BOXED(4247934238,32,FLEN)
NAN_BOXED(2100450590,32,FLEN)
NAN_BOXED(4247934238,32,FLEN)
NAN_BOXED(2100450590,32,FLEN)
NAN_BOXED(4247934238,32,FLEN)
NAN_BOXED(2100450590,32,FLEN)
NAN_BOXED(4247934238,32,FLEN)
NAN_BOXED(2132955726,32,FLEN)
NAN_BOXED(4280439374,32,FLEN)
NAN_BOXED(2132955726,32,FLEN)
NAN_BOXED(4280439374,32,FLEN)
NAN_BOXED(2132955726,32,FLEN)
NAN_BOXED(4280439374,32,FLEN)
NAN_BOXED(2132955726,32,FLEN)
NAN_BOXED(4280439374,32,FLEN)
NAN_BOXED(2132955726,32,FLEN)
NAN_BOXED(4280439374,32,FLEN)
NAN_BOXED(2118158114,32,FLEN)
NAN_BOXED(4265641762,32,FLEN)
NAN_BOXED(2118158114,32,FLEN)
NAN_BOXED(4265641762,32,FLEN)
NAN_BOXED(2118158114,32,FLEN)
NAN_BOXED(4265641762,32,FLEN)
NAN_BOXED(2118158114,32,FLEN)
NAN_BOXED(4265641762,32,FLEN)
NAN_BOXED(2118158114,32,FLEN)
NAN_BOXED(4265641762,32,FLEN)
NAN_BOXED(2125060412,32,FLEN)
NAN_BOXED(4272544060,32,FLEN)
NAN_BOXED(2125060412,32,FLEN)
NAN_BOXED(4272544060,32,FLEN)
NAN_BOXED(2125060412,32,FLEN)
NAN_BOXED(4272544060,32,FLEN)
NAN_BOXED(2125060412,32,FLEN)
NAN_BOXED(4272544060,32,FLEN)
NAN_BOXED(2125060412,32,FLEN)
NAN_BOXED(4272544060,32,FLEN)
NAN_BOXED(2125798057,32,FLEN)
NAN_BOXED(4273281705,32,FLEN)
NAN_BOXED(2125798057,32,FLEN)
NAN_BOXED(4273281705,32,FLEN)
NAN_BOXED(2125798057,32,FLEN)
NAN_BOXED(4273281705,32,FLEN)
NAN_BOXED(2125798057,32,FLEN)
NAN_BOXED(4273281705,32,FLEN)
NAN_BOXED(2125798057,32,FLEN)
NAN_BOXED(4273281705,32,FLEN)
NAN_BOXED(2128251406,32,FLEN)
NAN_BOXED(4275735054,32,FLEN)
NAN_BOXED(2128251406,32,FLEN)
NAN_BOXED(4275735054,32,FLEN)
NAN_BOXED(2128251406,32,FLEN)
NAN_BOXED(4275735054,32,FLEN)
NAN_BOXED(2128251406,32,FLEN)
NAN_BOXED(4275735054,32,FLEN)
NAN_BOXED(2128251406,32,FLEN)
NAN_BOXED(4275735054,32,FLEN)
NAN_BOXED(2121216197,32,FLEN)
NAN_BOXED(4268699845,32,FLEN)
NAN_BOXED(2121216197,32,FLEN)
NAN_BOXED(4268699845,32,FLEN)
NAN_BOXED(2121216197,32,FLEN)
NAN_BOXED(4268699845,32,FLEN)
NAN_BOXED(2121216197,32,FLEN)
NAN_BOXED(4268699845,32,FLEN)
NAN_BOXED(2121216197,32,FLEN)
NAN_BOXED(4268699845,32,FLEN)
NAN_BOXED(2132858040,32,FLEN)
NAN_BOXED(4280341688,32,FLEN)
NAN_BOXED(2132858040,32,FLEN)
NAN_BOXED(4280341688,32,FLEN)
NAN_BOXED(2132858040,32,FLEN)
NAN_BOXED(4280341688,32,FLEN)
NAN_BOXED(2132858040,32,FLEN)
NAN_BOXED(4280341688,32,FLEN)
NAN_BOXED(2132858040,32,FLEN)
NAN_BOXED(4280341688,32,FLEN)
NAN_BOXED(2128037181,32,FLEN)
NAN_BOXED(4275520829,32,FLEN)
NAN_BOXED(2128037181,32,FLEN)
NAN_BOXED(4275520829,32,FLEN)
NAN_BOXED(2128037181,32,FLEN)
NAN_BOXED(4275520829,32,FLEN)
NAN_BOXED(2128037181,32,FLEN)
NAN_BOXED(4275520829,32,FLEN)
NAN_BOXED(2128037181,32,FLEN)
NAN_BOXED(4275520829,32,FLEN)
NAN_BOXED(2131648988,32,FLEN)
NAN_BOXED(4279132636,32,FLEN)
NAN_BOXED(2131648988,32,FLEN)
NAN_BOXED(4279132636,32,FLEN)
NAN_BOXED(2131648988,32,FLEN)
NAN_BOXED(4279132636,32,FLEN)
NAN_BOXED(2131648988,32,FLEN)
NAN_BOXED(4279132636,32,FLEN)
NAN_BOXED(2131648988,32,FLEN)
NAN_BOXED(4279132636,32,FLEN)
NAN_BOXED(2097963310,32,FLEN)
NAN_BOXED(4245446958,32,FLEN)
NAN_BOXED(2097963310,32,FLEN)
NAN_BOXED(4245446958,32,FLEN)
NAN_BOXED(2097963310,32,FLEN)
NAN_BOXED(4245446958,32,FLEN)
NAN_BOXED(2097963310,32,FLEN)
NAN_BOXED(4245446958,32,FLEN)
NAN_BOXED(2097963310,32,FLEN)
NAN_BOXED(4245446958,32,FLEN)
NAN_BOXED(2117626766,32,FLEN)
NAN_BOXED(4265110414,32,FLEN)
NAN_BOXED(2117626766,32,FLEN)
NAN_BOXED(4265110414,32,FLEN)
NAN_BOXED(2117626766,32,FLEN)
NAN_BOXED(4265110414,32,FLEN)
NAN_BOXED(2117626766,32,FLEN)
NAN_BOXED(4265110414,32,FLEN)
NAN_BOXED(2117626766,32,FLEN)
NAN_BOXED(4265110414,32,FLEN)
NAN_BOXED(2122793262,32,FLEN)
NAN_BOXED(4270276910,32,FLEN)
NAN_BOXED(2122793262,32,FLEN)
NAN_BOXED(4270276910,32,FLEN)
NAN_BOXED(2122793262,32,FLEN)
NAN_BOXED(4270276910,32,FLEN)
NAN_BOXED(2122793262,32,FLEN)
NAN_BOXED(4270276910,32,FLEN)
NAN_BOXED(2122793262,32,FLEN)
NAN_BOXED(4270276910,32,FLEN)
NAN_BOXED(2122968809,32,FLEN)
NAN_BOXED(4270452457,32,FLEN)
NAN_BOXED(2122968809,32,FLEN)
NAN_BOXED(4270452457,32,FLEN)
NAN_BOXED(2122968809,32,FLEN)
NAN_BOXED(4270452457,32,FLEN)
NAN_BOXED(2122968809,32,FLEN)
NAN_BOXED(4270452457,32,FLEN)
NAN_BOXED(2122968809,32,FLEN)
NAN_BOXED(4270452457,32,FLEN)
NAN_BOXED(2129878002,32,FLEN)
NAN_BOXED(4277361650,32,FLEN)
NAN_BOXED(2129878002,32,FLEN)
NAN_BOXED(4277361650,32,FLEN)
NAN_BOXED(2129878002,32,FLEN)
NAN_BOXED(4277361650,32,FLEN)
NAN_BOXED(2129878002,32,FLEN)
NAN_BOXED(4277361650,32,FLEN)
NAN_BOXED(2129878002,32,FLEN)
NAN_BOXED(4277361650,32,FLEN)
NAN_BOXED(2131322398,32,FLEN)
NAN_BOXED(4278806046,32,FLEN)
NAN_BOXED(2131322398,32,FLEN)
NAN_BOXED(4278806046,32,FLEN)
NAN_BOXED(2131322398,32,FLEN)
NAN_BOXED(4278806046,32,FLEN)
NAN_BOXED(2131322398,32,FLEN)
NAN_BOXED(4278806046,32,FLEN)
NAN_BOXED(2131322398,32,FLEN)
NAN_BOXED(4278806046,32,FLEN)
NAN_BOXED(2124358385,32,FLEN)
NAN_BOXED(4271842033,32,FLEN)
NAN_BOXED(2124358385,32,FLEN)
NAN_BOXED(4271842033,32,FLEN)
NAN_BOXED(2124358385,32,FLEN)
NAN_BOXED(4271842033,32,FLEN)
NAN_BOXED(2124358385,32,FLEN)
NAN_BOXED(4271842033,32,FLEN)
NAN_BOXED(2124358385,32,FLEN)
NAN_BOXED(4271842033,32,FLEN)
NAN_BOXED(2056640076,32,FLEN)
NAN_BOXED(4204123724,32,FLEN)
NAN_BOXED(2056640076,32,FLEN)
NAN_BOXED(4204123724,32,FLEN)
NAN_BOXED(2056640076,32,FLEN)
NAN_BOXED(4204123724,32,FLEN)
NAN_BOXED(2056640076,32,FLEN)
NAN_BOXED(4204123724,32,FLEN)
NAN_BOXED(2056640076,32,FLEN)
NAN_BOXED(4204123724,32,FLEN)
NAN_BOXED(2122344709,32,FLEN)
NAN_BOXED(4269828357,32,FLEN)
NAN_BOXED(2122344709,32,FLEN)
NAN_BOXED(4269828357,32,FLEN)
NAN_BOXED(2122344709,32,FLEN)
NAN_BOXED(4269828357,32,FLEN)
NAN_BOXED(2122344709,32,FLEN)
NAN_BOXED(4269828357,32,FLEN)
NAN_BOXED(2122344709,32,FLEN)
NAN_BOXED(4269828357,32,FLEN)
NAN_BOXED(2129969896,32,FLEN)
NAN_BOXED(4277453544,32,FLEN)
NAN_BOXED(2129969896,32,FLEN)
NAN_BOXED(4277453544,32,FLEN)
NAN_BOXED(2129969896,32,FLEN)
NAN_BOXED(4277453544,32,FLEN)
NAN_BOXED(2129969896,32,FLEN)
NAN_BOXED(4277453544,32,FLEN)
NAN_BOXED(2129969896,32,FLEN)
NAN_BOXED(4277453544,32,FLEN)
NAN_BOXED(2133333199,32,FLEN)
NAN_BOXED(4280816847,32,FLEN)
NAN_BOXED(2133333199,32,FLEN)
NAN_BOXED(4280816847,32,FLEN)
NAN_BOXED(2133333199,32,FLEN)
NAN_BOXED(4280816847,32,FLEN)
NAN_BOXED(2133333199,32,FLEN)
NAN_BOXED(4280816847,32,FLEN)
NAN_BOXED(2133333199,32,FLEN)
NAN_BOXED(4280816847,32,FLEN)
NAN_BOXED(2124358094,32,FLEN)
NAN_BOXED(4271841742,32,FLEN)
NAN_BOXED(2124358094,32,FLEN)
NAN_BOXED(4271841742,32,FLEN)
NAN_BOXED(2124358094,32,FLEN)
NAN_BOXED(4271841742,32,FLEN)
NAN_BOXED(2124358094,32,FLEN)
NAN_BOXED(4271841742,32,FLEN)
NAN_BOXED(2124358094,32,FLEN)
NAN_BOXED(4271841742,32,FLEN)
NAN_BOXED(2131148884,32,FLEN)
NAN_BOXED(4278632532,32,FLEN)
NAN_BOXED(2131148884,32,FLEN)
NAN_BOXED(4278632532,32,FLEN)
NAN_BOXED(2131148884,32,FLEN)
NAN_BOXED(4278632532,32,FLEN)
NAN_BOXED(2131148884,32,FLEN)
NAN_BOXED(4278632532,32,FLEN)
NAN_BOXED(2131148884,32,FLEN)
NAN_BOXED(4278632532,32,FLEN)
NAN_BOXED(2130593920,32,FLEN)
NAN_BOXED(4278077568,32,FLEN)
NAN_BOXED(2130593920,32,FLEN)
NAN_BOXED(4278077568,32,FLEN)
NAN_BOXED(2130593920,32,FLEN)
NAN_BOXED(4278077568,32,FLEN)
NAN_BOXED(2130593920,32,FLEN)
NAN_BOXED(4278077568,32,FLEN)
NAN_BOXED(2130593920,32,FLEN)
NAN_BOXED(4278077568,32,FLEN)
NAN_BOXED(2125136870,32,FLEN)
NAN_BOXED(4272620518,32,FLEN)
NAN_BOXED(2125136870,32,FLEN)
NAN_BOXED(4272620518,32,FLEN)
NAN_BOXED(2125136870,32,FLEN)
NAN_BOXED(4272620518,32,FLEN)
NAN_BOXED(2125136870,32,FLEN)
NAN_BOXED(4272620518,32,FLEN)
NAN_BOXED(2125136870,32,FLEN)
NAN_BOXED(4272620518,32,FLEN)
NAN_BOXED(2113025249,32,FLEN)
NAN_BOXED(4260508897,32,FLEN)
NAN_BOXED(2113025249,32,FLEN)
NAN_BOXED(4260508897,32,FLEN)
NAN_BOXED(2113025249,32,FLEN)
NAN_BOXED(4260508897,32,FLEN)
NAN_BOXED(2113025249,32,FLEN)
NAN_BOXED(4260508897,32,FLEN)
NAN_BOXED(2113025249,32,FLEN)
NAN_BOXED(4260508897,32,FLEN)
NAN_BOXED(2126191655,32,FLEN)
NAN_BOXED(4273675303,32,FLEN)
NAN_BOXED(2126191655,32,FLEN)
NAN_BOXED(4273675303,32,FLEN)
NAN_BOXED(2126191655,32,FLEN)
NAN_BOXED(4273675303,32,FLEN)
NAN_BOXED(2126191655,32,FLEN)
NAN_BOXED(4273675303,32,FLEN)
NAN_BOXED(2126191655,32,FLEN)
NAN_BOXED(4273675303,32,FLEN)
NAN_BOXED(2131824021,32,FLEN)
NAN_BOXED(4279307669,32,FLEN)
NAN_BOXED(2131824021,32,FLEN)
NAN_BOXED(4279307669,32,FLEN)
NAN_BOXED(2131824021,32,FLEN)
NAN_BOXED(4279307669,32,FLEN)
NAN_BOXED(2131824021,32,FLEN)
NAN_BOXED(4279307669,32,FLEN)
NAN_BOXED(2131824021,32,FLEN)
NAN_BOXED(4279307669,32,FLEN)
NAN_BOXED(2126375795,32,FLEN)
NAN_BOXED(4273859443,32,FLEN)
NAN_BOXED(2126375795,32,FLEN)
NAN_BOXED(4273859443,32,FLEN)
NAN_BOXED(2126375795,32,FLEN)
NAN_BOXED(4273859443,32,FLEN)
NAN_BOXED(2126375795,32,FLEN)
NAN_BOXED(4273859443,32,FLEN)
NAN_BOXED(2126375795,32,FLEN)
NAN_BOXED(4273859443,32,FLEN)
NAN_BOXED(2125678943,32,FLEN)
NAN_BOXED(4273162591,32,FLEN)
NAN_BOXED(2125678943,32,FLEN)
NAN_BOXED(4273162591,32,FLEN)
NAN_BOXED(2125678943,32,FLEN)
NAN_BOXED(4273162591,32,FLEN)
NAN_BOXED(2125678943,32,FLEN)
NAN_BOXED(4273162591,32,FLEN)
NAN_BOXED(2125678943,32,FLEN)
NAN_BOXED(4273162591,32,FLEN)
NAN_BOXED(2133328077,32,FLEN)
NAN_BOXED(4280811725,32,FLEN)
NAN_BOXED(2133328077,32,FLEN)
NAN_BOXED(4280811725,32,FLEN)
NAN_BOXED(2133328077,32,FLEN)
NAN_BOXED(4280811725,32,FLEN)
NAN_BOXED(2133328077,32,FLEN)
NAN_BOXED(4280811725,32,FLEN)
NAN_BOXED(2133328077,32,FLEN)
NAN_BOXED(4280811725,32,FLEN)
NAN_BOXED(2115003022,32,FLEN)
NAN_BOXED(4262486670,32,FLEN)
NAN_BOXED(2115003022,32,FLEN)
NAN_BOXED(4262486670,32,FLEN)
NAN_BOXED(2115003022,32,FLEN)
NAN_BOXED(4262486670,32,FLEN)
NAN_BOXED(2115003022,32,FLEN)
NAN_BOXED(4262486670,32,FLEN)
NAN_BOXED(2115003022,32,FLEN)
NAN_BOXED(4262486670,32,FLEN)
NAN_BOXED(2129861415,32,FLEN)
NAN_BOXED(4277345063,32,FLEN)
NAN_BOXED(2129861415,32,FLEN)
NAN_BOXED(4277345063,32,FLEN)
NAN_BOXED(2129861415,32,FLEN)
NAN_BOXED(4277345063,32,FLEN)
NAN_BOXED(2129861415,32,FLEN)
NAN_BOXED(4277345063,32,FLEN)
NAN_BOXED(2129861415,32,FLEN)
NAN_BOXED(4277345063,32,FLEN)
NAN_BOXED(2131447410,32,FLEN)
NAN_BOXED(4278931058,32,FLEN)
NAN_BOXED(2131447410,32,FLEN)
NAN_BOXED(4278931058,32,FLEN)
NAN_BOXED(2131447410,32,FLEN)
NAN_BOXED(4278931058,32,FLEN)
NAN_BOXED(2131447410,32,FLEN)
NAN_BOXED(4278931058,32,FLEN)
NAN_BOXED(2131447410,32,FLEN)
NAN_BOXED(4278931058,32,FLEN)
NAN_BOXED(2124041267,32,FLEN)
NAN_BOXED(4271524915,32,FLEN)
NAN_BOXED(2124041267,32,FLEN)
NAN_BOXED(4271524915,32,FLEN)
NAN_BOXED(2124041267,32,FLEN)
NAN_BOXED(4271524915,32,FLEN)
NAN_BOXED(2124041267,32,FLEN)
NAN_BOXED(4271524915,32,FLEN)
NAN_BOXED(2124041267,32,FLEN)
NAN_BOXED(4271524915,32,FLEN)
NAN_BOXED(2121454323,32,FLEN)
NAN_BOXED(4268937971,32,FLEN)
NAN_BOXED(2121454323,32,FLEN)
NAN_BOXED(4268937971,32,FLEN)
NAN_BOXED(2121454323,32,FLEN)
NAN_BOXED(4268937971,32,FLEN)
NAN_BOXED(2121454323,32,FLEN)
NAN_BOXED(4268937971,32,FLEN)
NAN_BOXED(2121454323,32,FLEN)
NAN_BOXED(4268937971,32,FLEN)
NAN_BOXED(2131343850,32,FLEN)
NAN_BOXED(4278827498,32,FLEN)
NAN_BOXED(2131343850,32,FLEN)
NAN_BOXED(4278827498,32,FLEN)
NAN_BOXED(2131343850,32,FLEN)
NAN_BOXED(4278827498,32,FLEN)
NAN_BOXED(2131343850,32,FLEN)
NAN_BOXED(4278827498,32,FLEN)
NAN_BOXED(2131343850,32,FLEN)
NAN_BOXED(4278827498,32,FLEN)
NAN_BOXED(2132670180,32,FLEN)
NAN_BOXED(4280153828,32,FLEN)
NAN_BOXED(2132670180,32,FLEN)
NAN_BOXED(4280153828,32,FLEN)
NAN_BOXED(2132670180,32,FLEN)
NAN_BOXED(4280153828,32,FLEN)
NAN_BOXED(2132670180,32,FLEN)
NAN_BOXED(4280153828,32,FLEN)
NAN_BOXED(2132670180,32,FLEN)
NAN_BOXED(4280153828,32,FLEN)
NAN_BOXED(2106995293,32,FLEN)
NAN_BOXED(4254478941,32,FLEN)
NAN_BOXED(2106995293,32,FLEN)
NAN_BOXED(4254478941,32,FLEN)
NAN_BOXED(2106995293,32,FLEN)
NAN_BOXED(4254478941,32,FLEN)
NAN_BOXED(2106995293,32,FLEN)
NAN_BOXED(4254478941,32,FLEN)
NAN_BOXED(2106995293,32,FLEN)
NAN_BOXED(4254478941,32,FLEN)
NAN_BOXED(2130268514,32,FLEN)
NAN_BOXED(4277752162,32,FLEN)
NAN_BOXED(2130268514,32,FLEN)
NAN_BOXED(4277752162,32,FLEN)
NAN_BOXED(2130268514,32,FLEN)
NAN_BOXED(4277752162,32,FLEN)
NAN_BOXED(2130268514,32,FLEN)
NAN_BOXED(4277752162,32,FLEN)
NAN_BOXED(2130268514,32,FLEN)
NAN_BOXED(4277752162,32,FLEN)
NAN_BOXED(2119632600,32,FLEN)
NAN_BOXED(4267116248,32,FLEN)
NAN_BOXED(2119632600,32,FLEN)
NAN_BOXED(4267116248,32,FLEN)
NAN_BOXED(2119632600,32,FLEN)
NAN_BOXED(4267116248,32,FLEN)
NAN_BOXED(2119632600,32,FLEN)
NAN_BOXED(4267116248,32,FLEN)
NAN_BOXED(2119632600,32,FLEN)
NAN_BOXED(4267116248,32,FLEN)
NAN_BOXED(2107236517,32,FLEN)
NAN_BOXED(4254720165,32,FLEN)
NAN_BOXED(2107236517,32,FLEN)
NAN_BOXED(4254720165,32,FLEN)
NAN_BOXED(2107236517,32,FLEN)
NAN_BOXED(4254720165,32,FLEN)
NAN_BOXED(2107236517,32,FLEN)
NAN_BOXED(4254720165,32,FLEN)
NAN_BOXED(2107236517,32,FLEN)
NAN_BOXED(4254720165,32,FLEN)
NAN_BOXED(2123912401,32,FLEN)
NAN_BOXED(4271396049,32,FLEN)
NAN_BOXED(2123912401,32,FLEN)
NAN_BOXED(4271396049,32,FLEN)
NAN_BOXED(2123912401,32,FLEN)
NAN_BOXED(4271396049,32,FLEN)
NAN_BOXED(2123912401,32,FLEN)
NAN_BOXED(4271396049,32,FLEN)
NAN_BOXED(2123912401,32,FLEN)
NAN_BOXED(4271396049,32,FLEN)
NAN_BOXED(2119367407,32,FLEN)
NAN_BOXED(4266851055,32,FLEN)
NAN_BOXED(2119367407,32,FLEN)
NAN_BOXED(4266851055,32,FLEN)
NAN_BOXED(2119367407,32,FLEN)
NAN_BOXED(4266851055,32,FLEN)
NAN_BOXED(2119367407,32,FLEN)
NAN_BOXED(4266851055,32,FLEN)
NAN_BOXED(2119367407,32,FLEN)
NAN_BOXED(4266851055,32,FLEN)
NAN_BOXED(2132287787,32,FLEN)
NAN_BOXED(4279771435,32,FLEN)
NAN_BOXED(2132287787,32,FLEN)
NAN_BOXED(4279771435,32,FLEN)
NAN_BOXED(2132287787,32,FLEN)
NAN_BOXED(4279771435,32,FLEN)
NAN_BOXED(2132287787,32,FLEN)
NAN_BOXED(4279771435,32,FLEN)
NAN_BOXED(2132287787,32,FLEN)
NAN_BOXED(4279771435,32,FLEN)
NAN_BOXED(2110582552,32,FLEN)
NAN_BOXED(4258066200,32,FLEN)
NAN_BOXED(2110582552,32,FLEN)
NAN_BOXED(4258066200,32,FLEN)
NAN_BOXED(2110582552,32,FLEN)
NAN_BOXED(4258066200,32,FLEN)
NAN_BOXED(2110582552,32,FLEN)
NAN_BOXED(4258066200,32,FLEN)
NAN_BOXED(2110582552,32,FLEN)
NAN_BOXED(4258066200,32,FLEN)
NAN_BOXED(2130306711,32,FLEN)
NAN_BOXED(4277790359,32,FLEN)
NAN_BOXED(2130306711,32,FLEN)
NAN_BOXED(4277790359,32,FLEN)
NAN_BOXED(2130306711,32,FLEN)
NAN_BOXED(4277790359,32,FLEN)
NAN_BOXED(2130306711,32,FLEN)
NAN_BOXED(4277790359,32,FLEN)
NAN_BOXED(2130306711,32,FLEN)
NAN_BOXED(4277790359,32,FLEN)
NAN_BOXED(2133288409,32,FLEN)
NAN_BOXED(4280772057,32,FLEN)
NAN_BOXED(2133288409,32,FLEN)
NAN_BOXED(4280772057,32,FLEN)
NAN_BOXED(2133288409,32,FLEN)
NAN_BOXED(4280772057,32,FLEN)
NAN_BOXED(2133288409,32,FLEN)
NAN_BOXED(4280772057,32,FLEN)
NAN_BOXED(2133288409,32,FLEN)
NAN_BOXED(4280772057,32,FLEN)
NAN_BOXED(2086944199,32,FLEN)
NAN_BOXED(4234427847,32,FLEN)
NAN_BOXED(2086944199,32,FLEN)
NAN_BOXED(4234427847,32,FLEN)
NAN_BOXED(2086944199,32,FLEN)
NAN_BOXED(4234427847,32,FLEN)
NAN_BOXED(2086944199,32,FLEN)
NAN_BOXED(4234427847,32,FLEN)
NAN_BOXED(2086944199,32,FLEN)
NAN_BOXED(4234427847,32,FLEN)
NAN_BOXED(2130886746,32,FLEN)
NAN_BOXED(4278370394,32,FLEN)
NAN_BOXED(2130886746,32,FLEN)
NAN_BOXED(4278370394,32,FLEN)
NAN_BOXED(2130886746,32,FLEN)
NAN_BOXED(4278370394,32,FLEN)
NAN_BOXED(2130886746,32,FLEN)
NAN_BOXED(4278370394,32,FLEN)
NAN_BOXED(2130886746,32,FLEN)
NAN_BOXED(4278370394,32,FLEN)
NAN_BOXED(2134227581,32,FLEN)
NAN_BOXED(4281711229,32,FLEN)
NAN_BOXED(2134227581,32,FLEN)
NAN_BOXED(4281711229,32,FLEN)
NAN_BOXED(2134227581,32,FLEN)
NAN_BOXED(4281711229,32,FLEN)
NAN_BOXED(2134227581,32,FLEN)
NAN_BOXED(4281711229,32,FLEN)
NAN_BOXED(2134227581,32,FLEN)
NAN_BOXED(4281711229,32,FLEN)
NAN_BOXED(2133766400,32,FLEN)
NAN_BOXED(4281250048,32,FLEN)
NAN_BOXED(2133766400,32,FLEN)
NAN_BOXED(4281250048,32,FLEN)
NAN_BOXED(2133766400,32,FLEN)
NAN_BOXED(4281250048,32,FLEN)
NAN_BOXED(2133766400,32,FLEN)
NAN_BOXED(4281250048,32,FLEN)
NAN_BOXED(2133766400,32,FLEN)
NAN_BOXED(4281250048,32,FLEN)
NAN_BOXED(2131744121,32,FLEN)
NAN_BOXED(4279227769,32,FLEN)
NAN_BOXED(2131744121,32,FLEN)
NAN_BOXED(4279227769,32,FLEN)
NAN_BOXED(2131744121,32,FLEN)
NAN_BOXED(4279227769,32,FLEN)
NAN_BOXED(2131744121,32,FLEN)
NAN_BOXED(4279227769,32,FLEN)
NAN_BOXED(2131744121,32,FLEN)
NAN_BOXED(4279227769,32,FLEN)
NAN_BOXED(2130421936,32,FLEN)
NAN_BOXED(4277905584,32,FLEN)
NAN_BOXED(2130421936,32,FLEN)
NAN_BOXED(4277905584,32,FLEN)
NAN_BOXED(2130421936,32,FLEN)
NAN_BOXED(4277905584,32,FLEN)
NAN_BOXED(2130421936,32,FLEN)
NAN_BOXED(4277905584,32,FLEN)
NAN_BOXED(2130421936,32,FLEN)
NAN_BOXED(4277905584,32,FLEN)
NAN_BOXED(2133676545,32,FLEN)
NAN_BOXED(4281160193,32,FLEN)
NAN_BOXED(2133676545,32,FLEN)
NAN_BOXED(4281160193,32,FLEN)
NAN_BOXED(2133676545,32,FLEN)
NAN_BOXED(4281160193,32,FLEN)
NAN_BOXED(2133676545,32,FLEN)
NAN_BOXED(4281160193,32,FLEN)
NAN_BOXED(2133676545,32,FLEN)
NAN_BOXED(4281160193,32,FLEN)
NAN_BOXED(2123302208,32,FLEN)
NAN_BOXED(4270785856,32,FLEN)
NAN_BOXED(2123302208,32,FLEN)
NAN_BOXED(4270785856,32,FLEN)
NAN_BOXED(2123302208,32,FLEN)
NAN_BOXED(4270785856,32,FLEN)
NAN_BOXED(2123302208,32,FLEN)
NAN_BOXED(4270785856,32,FLEN)
NAN_BOXED(2123302208,32,FLEN)
NAN_BOXED(4270785856,32,FLEN)
NAN_BOXED(2116001743,32,FLEN)
NAN_BOXED(4263485391,32,FLEN)
NAN_BOXED(2116001743,32,FLEN)
NAN_BOXED(4263485391,32,FLEN)
NAN_BOXED(2116001743,32,FLEN)
NAN_BOXED(4263485391,32,FLEN)
NAN_BOXED(2116001743,32,FLEN)
NAN_BOXED(4263485391,32,FLEN)
NAN_BOXED(2116001743,32,FLEN)
NAN_BOXED(4263485391,32,FLEN)
NAN_BOXED(2077927321,32,FLEN)
NAN_BOXED(4225410969,32,FLEN)
NAN_BOXED(2077927321,32,FLEN)
NAN_BOXED(4225410969,32,FLEN)
NAN_BOXED(2077927321,32,FLEN)
NAN_BOXED(4225410969,32,FLEN)
NAN_BOXED(2077927321,32,FLEN)
NAN_BOXED(4225410969,32,FLEN)
NAN_BOXED(2077927321,32,FLEN)
NAN_BOXED(4225410969,32,FLEN)
NAN_BOXED(2122319712,32,FLEN)
NAN_BOXED(4269803360,32,FLEN)
NAN_BOXED(2122319712,32,FLEN)
NAN_BOXED(4269803360,32,FLEN)
NAN_BOXED(2122319712,32,FLEN)
NAN_BOXED(4269803360,32,FLEN)
NAN_BOXED(2122319712,32,FLEN)
NAN_BOXED(4269803360,32,FLEN)
NAN_BOXED(2122319712,32,FLEN)
NAN_BOXED(4269803360,32,FLEN)
NAN_BOXED(2131358638,32,FLEN)
NAN_BOXED(4278842286,32,FLEN)
NAN_BOXED(2131358638,32,FLEN)
NAN_BOXED(4278842286,32,FLEN)
NAN_BOXED(2131358638,32,FLEN)
NAN_BOXED(4278842286,32,FLEN)
NAN_BOXED(2131358638,32,FLEN)
NAN_BOXED(4278842286,32,FLEN)
NAN_BOXED(2131358638,32,FLEN)
NAN_BOXED(4278842286,32,FLEN)
NAN_BOXED(2129545568,32,FLEN)
NAN_BOXED(4277029216,32,FLEN)
NAN_BOXED(2129545568,32,FLEN)
NAN_BOXED(4277029216,32,FLEN)
NAN_BOXED(2129545568,32,FLEN)
NAN_BOXED(4277029216,32,FLEN)
NAN_BOXED(2129545568,32,FLEN)
NAN_BOXED(4277029216,32,FLEN)
NAN_BOXED(2129545568,32,FLEN)
NAN_BOXED(4277029216,32,FLEN)
NAN_BOXED(2113646741,32,FLEN)
NAN_BOXED(4261130389,32,FLEN)
NAN_BOXED(2113646741,32,FLEN)
NAN_BOXED(4261130389,32,FLEN)
NAN_BOXED(2113646741,32,FLEN)
NAN_BOXED(4261130389,32,FLEN)
NAN_BOXED(2113646741,32,FLEN)
NAN_BOXED(4261130389,32,FLEN)
NAN_BOXED(2113646741,32,FLEN)
NAN_BOXED(4261130389,32,FLEN)
NAN_BOXED(2120113172,32,FLEN)
NAN_BOXED(4267596820,32,FLEN)
NAN_BOXED(2120113172,32,FLEN)
NAN_BOXED(4267596820,32,FLEN)
NAN_BOXED(2120113172,32,FLEN)
NAN_BOXED(4267596820,32,FLEN)
NAN_BOXED(2120113172,32,FLEN)
NAN_BOXED(4267596820,32,FLEN)
NAN_BOXED(2120113172,32,FLEN)
NAN_BOXED(4267596820,32,FLEN)
NAN_BOXED(2127732274,32,FLEN)
NAN_BOXED(4275215922,32,FLEN)
NAN_BOXED(2127732274,32,FLEN)
NAN_BOXED(4275215922,32,FLEN)
NAN_BOXED(2127732274,32,FLEN)
NAN_BOXED(4275215922,32,FLEN)
NAN_BOXED(2127732274,32,FLEN)
NAN_BOXED(4275215922,32,FLEN)
NAN_BOXED(2127732274,32,FLEN)
NAN_BOXED(4275215922,32,FLEN)
NAN_BOXED(2125960106,32,FLEN)
NAN_BOXED(4273443754,32,FLEN)
NAN_BOXED(2125960106,32,FLEN)
NAN_BOXED(4273443754,32,FLEN)
NAN_BOXED(2125960106,32,FLEN)
NAN_BOXED(4273443754,32,FLEN)
NAN_BOXED(2125960106,32,FLEN)
NAN_BOXED(4273443754,32,FLEN)
NAN_BOXED(2125960106,32,FLEN)
NAN_BOXED(4273443754,32,FLEN)
NAN_BOXED(2098478680,32,FLEN)
NAN_BOXED(4245962328,32,FLEN)
NAN_BOXED(2098478680,32,FLEN)
NAN_BOXED(4245962328,32,FLEN)
NAN_BOXED(2098478680,32,FLEN)
NAN_BOXED(4245962328,32,FLEN)
NAN_BOXED(2098478680,32,FLEN)
NAN_BOXED(4245962328,32,FLEN)
NAN_BOXED(2098478680,32,FLEN)
NAN_BOXED(4245962328,32,FLEN)
NAN_BOXED(2127092205,32,FLEN)
NAN_BOXED(4274575853,32,FLEN)
NAN_BOXED(2127092205,32,FLEN)
NAN_BOXED(4274575853,32,FLEN)
NAN_BOXED(2127092205,32,FLEN)
NAN_BOXED(4274575853,32,FLEN)
NAN_BOXED(2127092205,32,FLEN)
NAN_BOXED(4274575853,32,FLEN)
NAN_BOXED(2127092205,32,FLEN)
NAN_BOXED(4274575853,32,FLEN)
NAN_BOXED(2124075299,32,FLEN)
NAN_BOXED(4271558947,32,FLEN)
NAN_BOXED(2124075299,32,FLEN)
NAN_BOXED(4271558947,32,FLEN)
NAN_BOXED(2124075299,32,FLEN)
NAN_BOXED(4271558947,32,FLEN)
NAN_BOXED(2124075299,32,FLEN)
NAN_BOXED(4271558947,32,FLEN)
NAN_BOXED(2124075299,32,FLEN)
NAN_BOXED(4271558947,32,FLEN)
NAN_BOXED(2124366026,32,FLEN)
NAN_BOXED(4271849674,32,FLEN)
NAN_BOXED(2124366026,32,FLEN)
NAN_BOXED(4271849674,32,FLEN)
NAN_BOXED(2124366026,32,FLEN)
NAN_BOXED(4271849674,32,FLEN)
NAN_BOXED(2124366026,32,FLEN)
NAN_BOXED(4271849674,32,FLEN)
NAN_BOXED(2124366026,32,FLEN)
NAN_BOXED(4271849674,32,FLEN)
NAN_BOXED(2133751381,32,FLEN)
NAN_BOXED(4281235029,32,FLEN)
NAN_BOXED(2133751381,32,FLEN)
NAN_BOXED(4281235029,32,FLEN)
NAN_BOXED(2133751381,32,FLEN)
NAN_BOXED(4281235029,32,FLEN)
NAN_BOXED(2133751381,32,FLEN)
NAN_BOXED(4281235029,32,FLEN)
NAN_BOXED(2133751381,32,FLEN)
NAN_BOXED(4281235029,32,FLEN)
NAN_BOXED(2132898144,32,FLEN)
NAN_BOXED(4280381792,32,FLEN)
NAN_BOXED(2132898144,32,FLEN)
NAN_BOXED(4280381792,32,FLEN)
NAN_BOXED(2132898144,32,FLEN)
NAN_BOXED(4280381792,32,FLEN)
NAN_BOXED(2132898144,32,FLEN)
NAN_BOXED(4280381792,32,FLEN)
NAN_BOXED(2132898144,32,FLEN)
NAN_BOXED(4280381792,32,FLEN)
NAN_BOXED(2122577491,32,FLEN)
NAN_BOXED(4270061139,32,FLEN)
NAN_BOXED(2122577491,32,FLEN)
NAN_BOXED(4270061139,32,FLEN)
NAN_BOXED(2122577491,32,FLEN)
NAN_BOXED(4270061139,32,FLEN)
NAN_BOXED(2122577491,32,FLEN)
NAN_BOXED(4270061139,32,FLEN)
NAN_BOXED(2122577491,32,FLEN)
NAN_BOXED(4270061139,32,FLEN)
NAN_BOXED(2131120769,32,FLEN)
NAN_BOXED(4278604417,32,FLEN)
NAN_BOXED(2131120769,32,FLEN)
NAN_BOXED(4278604417,32,FLEN)
NAN_BOXED(2131120769,32,FLEN)
NAN_BOXED(4278604417,32,FLEN)
NAN_BOXED(2131120769,32,FLEN)
NAN_BOXED(4278604417,32,FLEN)
NAN_BOXED(2131120769,32,FLEN)
NAN_BOXED(4278604417,32,FLEN)
NAN_BOXED(2120735888,32,FLEN)
NAN_BOXED(4268219536,32,FLEN)
NAN_BOXED(2120735888,32,FLEN)
NAN_BOXED(4268219536,32,FLEN)
NAN_BOXED(2120735888,32,FLEN)
NAN_BOXED(4268219536,32,FLEN)
NAN_BOXED(2120735888,32,FLEN)
NAN_BOXED(4268219536,32,FLEN)
NAN_BOXED(2120735888,32,FLEN)
NAN_BOXED(4268219536,32,FLEN)
NAN_BOXED(2133571977,32,FLEN)
NAN_BOXED(4281055625,32,FLEN)
NAN_BOXED(2133571977,32,FLEN)
NAN_BOXED(4281055625,32,FLEN)
NAN_BOXED(2133571977,32,FLEN)
NAN_BOXED(4281055625,32,FLEN)
NAN_BOXED(2133571977,32,FLEN)
NAN_BOXED(4281055625,32,FLEN)
NAN_BOXED(2133571977,32,FLEN)
NAN_BOXED(4281055625,32,FLEN)
NAN_BOXED(2129701695,32,FLEN)
NAN_BOXED(4277185343,32,FLEN)
NAN_BOXED(2129701695,32,FLEN)
NAN_BOXED(4277185343,32,FLEN)
NAN_BOXED(2129701695,32,FLEN)
NAN_BOXED(4277185343,32,FLEN)
NAN_BOXED(2129701695,32,FLEN)
NAN_BOXED(4277185343,32,FLEN)
NAN_BOXED(2129701695,32,FLEN)
NAN_BOXED(4277185343,32,FLEN)
NAN_BOXED(2134580632,32,FLEN)
NAN_BOXED(4282064280,32,FLEN)
NAN_BOXED(2134580632,32,FLEN)
NAN_BOXED(4282064280,32,FLEN)
NAN_BOXED(2134580632,32,FLEN)
NAN_BOXED(4282064280,32,FLEN)
NAN_BOXED(2134580632,32,FLEN)
NAN_BOXED(4282064280,32,FLEN)
NAN_BOXED(2134580632,32,FLEN)
NAN_BOXED(4282064280,32,FLEN)
NAN_BOXED(2102017662,32,FLEN)
NAN_BOXED(4249501310,32,FLEN)
NAN_BOXED(2102017662,32,FLEN)
NAN_BOXED(4249501310,32,FLEN)
NAN_BOXED(2102017662,32,FLEN)
NAN_BOXED(4249501310,32,FLEN)
NAN_BOXED(2102017662,32,FLEN)
NAN_BOXED(4249501310,32,FLEN)
NAN_BOXED(2102017662,32,FLEN)
NAN_BOXED(4249501310,32,FLEN)
NAN_BOXED(2131753366,32,FLEN)
NAN_BOXED(4279237014,32,FLEN)
NAN_BOXED(2131753366,32,FLEN)
NAN_BOXED(4279237014,32,FLEN)
NAN_BOXED(2131753366,32,FLEN)
NAN_BOXED(4279237014,32,FLEN)
NAN_BOXED(2131753366,32,FLEN)
NAN_BOXED(4279237014,32,FLEN)
NAN_BOXED(2131753366,32,FLEN)
NAN_BOXED(4279237014,32,FLEN)
NAN_BOXED(2076242496,32,FLEN)
NAN_BOXED(4223726144,32,FLEN)
NAN_BOXED(2076242496,32,FLEN)
NAN_BOXED(4223726144,32,FLEN)
NAN_BOXED(2076242496,32,FLEN)
NAN_BOXED(4223726144,32,FLEN)
NAN_BOXED(2076242496,32,FLEN)
NAN_BOXED(4223726144,32,FLEN)
NAN_BOXED(2076242496,32,FLEN)
NAN_BOXED(4223726144,32,FLEN)
NAN_BOXED(2126990371,32,FLEN)
NAN_BOXED(4274474019,32,FLEN)
NAN_BOXED(2126990371,32,FLEN)
NAN_BOXED(4274474019,32,FLEN)
NAN_BOXED(2126990371,32,FLEN)
NAN_BOXED(4274474019,32,FLEN)
NAN_BOXED(2126990371,32,FLEN)
NAN_BOXED(4274474019,32,FLEN)
NAN_BOXED(2126990371,32,FLEN)
NAN_BOXED(4274474019,32,FLEN)
NAN_BOXED(2126225710,32,FLEN)
NAN_BOXED(4273709358,32,FLEN)
NAN_BOXED(2126225710,32,FLEN)
NAN_BOXED(4273709358,32,FLEN)
NAN_BOXED(2126225710,32,FLEN)
NAN_BOXED(4273709358,32,FLEN)
NAN_BOXED(2126225710,32,FLEN)
NAN_BOXED(4273709358,32,FLEN)
NAN_BOXED(2126225710,32,FLEN)
NAN_BOXED(4273709358,32,FLEN)
NAN_BOXED(2130865428,32,FLEN)
NAN_BOXED(4278349076,32,FLEN)
NAN_BOXED(2130865428,32,FLEN)
NAN_BOXED(4278349076,32,FLEN)
NAN_BOXED(2130865428,32,FLEN)
NAN_BOXED(4278349076,32,FLEN)
NAN_BOXED(2130865428,32,FLEN)
NAN_BOXED(4278349076,32,FLEN)
NAN_BOXED(2130865428,32,FLEN)
NAN_BOXED(4278349076,32,FLEN)
NAN_BOXED(2123198580,32,FLEN)
NAN_BOXED(4270682228,32,FLEN)
NAN_BOXED(2123198580,32,FLEN)
NAN_BOXED(4270682228,32,FLEN)
NAN_BOXED(2123198580,32,FLEN)
NAN_BOXED(4270682228,32,FLEN)
NAN_BOXED(2123198580,32,FLEN)
NAN_BOXED(4270682228,32,FLEN)
NAN_BOXED(2123198580,32,FLEN)
NAN_BOXED(4270682228,32,FLEN)
NAN_BOXED(2118672966,32,FLEN)
NAN_BOXED(4266156614,32,FLEN)
NAN_BOXED(2118672966,32,FLEN)
NAN_BOXED(4266156614,32,FLEN)
NAN_BOXED(2118672966,32,FLEN)
NAN_BOXED(4266156614,32,FLEN)
NAN_BOXED(2118672966,32,FLEN)
NAN_BOXED(4266156614,32,FLEN)
NAN_BOXED(2118672966,32,FLEN)
NAN_BOXED(4266156614,32,FLEN)
NAN_BOXED(2124781247,32,FLEN)
NAN_BOXED(4272264895,32,FLEN)
NAN_BOXED(2124781247,32,FLEN)
NAN_BOXED(4272264895,32,FLEN)
NAN_BOXED(2124781247,32,FLEN)
NAN_BOXED(4272264895,32,FLEN)
NAN_BOXED(2124781247,32,FLEN)
NAN_BOXED(4272264895,32,FLEN)
NAN_BOXED(2124781247,32,FLEN)
NAN_BOXED(4272264895,32,FLEN)
NAN_BOXED(2101619694,32,FLEN)
NAN_BOXED(4249103342,32,FLEN)
NAN_BOXED(2101619694,32,FLEN)
NAN_BOXED(4249103342,32,FLEN)
NAN_BOXED(2101619694,32,FLEN)
NAN_BOXED(4249103342,32,FLEN)
NAN_BOXED(2101619694,32,FLEN)
NAN_BOXED(4249103342,32,FLEN)
NAN_BOXED(2101619694,32,FLEN)
NAN_BOXED(4249103342,32,FLEN)
NAN_BOXED(2131151080,32,FLEN)
NAN_BOXED(4278634728,32,FLEN)
NAN_BOXED(2131151080,32,FLEN)
NAN_BOXED(4278634728,32,FLEN)
NAN_BOXED(2131151080,32,FLEN)
NAN_BOXED(4278634728,32,FLEN)
NAN_BOXED(2131151080,32,FLEN)
NAN_BOXED(4278634728,32,FLEN)
NAN_BOXED(2131151080,32,FLEN)
NAN_BOXED(4278634728,32,FLEN)
NAN_BOXED(2125294398,32,FLEN)
NAN_BOXED(4272778046,32,FLEN)
NAN_BOXED(2125294398,32,FLEN)
NAN_BOXED(4272778046,32,FLEN)
NAN_BOXED(2125294398,32,FLEN)
NAN_BOXED(4272778046,32,FLEN)
NAN_BOXED(2125294398,32,FLEN)
NAN_BOXED(4272778046,32,FLEN)
NAN_BOXED(2125294398,32,FLEN)
NAN_BOXED(4272778046,32,FLEN)
NAN_BOXED(2109121900,32,FLEN)
NAN_BOXED(4256605548,32,FLEN)
NAN_BOXED(2109121900,32,FLEN)
NAN_BOXED(4256605548,32,FLEN)
NAN_BOXED(2109121900,32,FLEN)
NAN_BOXED(4256605548,32,FLEN)
NAN_BOXED(2109121900,32,FLEN)
NAN_BOXED(4256605548,32,FLEN)
NAN_BOXED(2109121900,32,FLEN)
NAN_BOXED(4256605548,32,FLEN)
NAN_BOXED(2115970934,32,FLEN)
NAN_BOXED(4263454582,32,FLEN)
NAN_BOXED(2115970934,32,FLEN)
NAN_BOXED(4263454582,32,FLEN)
NAN_BOXED(2115970934,32,FLEN)
NAN_BOXED(4263454582,32,FLEN)
NAN_BOXED(2115970934,32,FLEN)
NAN_BOXED(4263454582,32,FLEN)
NAN_BOXED(2115970934,32,FLEN)
NAN_BOXED(4263454582,32,FLEN)
NAN_BOXED(2134245937,32,FLEN)
NAN_BOXED(4281729585,32,FLEN)
NAN_BOXED(2134245937,32,FLEN)
NAN_BOXED(4281729585,32,FLEN)
NAN_BOXED(2134245937,32,FLEN)
NAN_BOXED(4281729585,32,FLEN)
NAN_BOXED(2134245937,32,FLEN)
NAN_BOXED(4281729585,32,FLEN)
NAN_BOXED(2134245937,32,FLEN)
NAN_BOXED(4281729585,32,FLEN)
NAN_BOXED(2111884524,32,FLEN)
NAN_BOXED(4259368172,32,FLEN)
NAN_BOXED(2111884524,32,FLEN)
NAN_BOXED(4259368172,32,FLEN)
NAN_BOXED(2111884524,32,FLEN)
NAN_BOXED(4259368172,32,FLEN)
NAN_BOXED(2111884524,32,FLEN)
NAN_BOXED(4259368172,32,FLEN)
NAN_BOXED(2111884524,32,FLEN)
NAN_BOXED(4259368172,32,FLEN)
NAN_BOXED(2123442701,32,FLEN)
NAN_BOXED(4270926349,32,FLEN)
NAN_BOXED(2123442701,32,FLEN)
NAN_BOXED(4270926349,32,FLEN)
NAN_BOXED(2123442701,32,FLEN)
NAN_BOXED(4270926349,32,FLEN)
NAN_BOXED(2123442701,32,FLEN)
NAN_BOXED(4270926349,32,FLEN)
NAN_BOXED(2123442701,32,FLEN)
NAN_BOXED(4270926349,32,FLEN)
NAN_BOXED(2112385815,32,FLEN)
NAN_BOXED(4259869463,32,FLEN)
NAN_BOXED(2112385815,32,FLEN)
NAN_BOXED(4259869463,32,FLEN)
NAN_BOXED(2112385815,32,FLEN)
NAN_BOXED(4259869463,32,FLEN)
NAN_BOXED(2112385815,32,FLEN)
NAN_BOXED(4259869463,32,FLEN)
NAN_BOXED(2112385815,32,FLEN)
NAN_BOXED(4259869463,32,FLEN)
NAN_BOXED(2134686690,32,FLEN)
NAN_BOXED(4282170338,32,FLEN)
NAN_BOXED(2134686690,32,FLEN)
NAN_BOXED(4282170338,32,FLEN)
NAN_BOXED(2134686690,32,FLEN)
NAN_BOXED(4282170338,32,FLEN)
NAN_BOXED(2134686690,32,FLEN)
NAN_BOXED(4282170338,32,FLEN)
NAN_BOXED(2134686690,32,FLEN)
NAN_BOXED(4282170338,32,FLEN)
NAN_BOXED(2124144196,32,FLEN)
NAN_BOXED(4271627844,32,FLEN)
NAN_BOXED(2124144196,32,FLEN)
NAN_BOXED(4271627844,32,FLEN)
NAN_BOXED(2124144196,32,FLEN)
NAN_BOXED(4271627844,32,FLEN)
NAN_BOXED(2124144196,32,FLEN)
NAN_BOXED(4271627844,32,FLEN)
NAN_BOXED(2124144196,32,FLEN)
NAN_BOXED(4271627844,32,FLEN)
NAN_BOXED(2133361299,32,FLEN)
NAN_BOXED(4280844947,32,FLEN)
NAN_BOXED(2133361299,32,FLEN)
NAN_BOXED(4280844947,32,FLEN)
NAN_BOXED(2133361299,32,FLEN)
NAN_BOXED(4280844947,32,FLEN)
NAN_BOXED(2133361299,32,FLEN)
NAN_BOXED(4280844947,32,FLEN)
NAN_BOXED(2133361299,32,FLEN)
NAN_BOXED(4280844947,32,FLEN)
NAN_BOXED(2133856941,32,FLEN)
NAN_BOXED(4281340589,32,FLEN)
NAN_BOXED(2133856941,32,FLEN)
NAN_BOXED(4281340589,32,FLEN)
NAN_BOXED(2133856941,32,FLEN)
NAN_BOXED(4281340589,32,FLEN)
NAN_BOXED(2133856941,32,FLEN)
NAN_BOXED(4281340589,32,FLEN)
NAN_BOXED(2133856941,32,FLEN)
NAN_BOXED(4281340589,32,FLEN)
NAN_BOXED(2126472891,32,FLEN)
NAN_BOXED(4273956539,32,FLEN)
NAN_BOXED(2126472891,32,FLEN)
NAN_BOXED(4273956539,32,FLEN)
NAN_BOXED(2126472891,32,FLEN)
NAN_BOXED(4273956539,32,FLEN)
NAN_BOXED(2126472891,32,FLEN)
NAN_BOXED(4273956539,32,FLEN)
NAN_BOXED(2126472891,32,FLEN)
NAN_BOXED(4273956539,32,FLEN)
NAN_BOXED(2130749232,32,FLEN)
NAN_BOXED(4278232880,32,FLEN)
NAN_BOXED(2130749232,32,FLEN)
NAN_BOXED(4278232880,32,FLEN)
NAN_BOXED(2130749232,32,FLEN)
NAN_BOXED(4278232880,32,FLEN)
NAN_BOXED(2130749232,32,FLEN)
NAN_BOXED(4278232880,32,FLEN)
NAN_BOXED(2130749232,32,FLEN)
NAN_BOXED(4278232880,32,FLEN)
NAN_BOXED(2129274595,32,FLEN)
NAN_BOXED(4276758243,32,FLEN)
NAN_BOXED(2129274595,32,FLEN)
NAN_BOXED(4276758243,32,FLEN)
NAN_BOXED(2129274595,32,FLEN)
NAN_BOXED(4276758243,32,FLEN)
NAN_BOXED(2129274595,32,FLEN)
NAN_BOXED(4276758243,32,FLEN)
NAN_BOXED(2129274595,32,FLEN)
NAN_BOXED(4276758243,32,FLEN)
NAN_BOXED(2122491140,32,FLEN)
NAN_BOXED(4269974788,32,FLEN)
NAN_BOXED(2122491140,32,FLEN)
NAN_BOXED(4269974788,32,FLEN)
NAN_BOXED(2122491140,32,FLEN)
NAN_BOXED(4269974788,32,FLEN)
NAN_BOXED(2122491140,32,FLEN)
NAN_BOXED(4269974788,32,FLEN)
NAN_BOXED(2122491140,32,FLEN)
NAN_BOXED(4269974788,32,FLEN)
NAN_BOXED(2133629962,32,FLEN)
NAN_BOXED(4281113610,32,FLEN)
NAN_BOXED(2133629962,32,FLEN)
NAN_BOXED(4281113610,32,FLEN)
NAN_BOXED(2133629962,32,FLEN)
NAN_BOXED(4281113610,32,FLEN)
NAN_BOXED(2133629962,32,FLEN)
NAN_BOXED(4281113610,32,FLEN)
NAN_BOXED(2133629962,32,FLEN)
NAN_BOXED(4281113610,32,FLEN)
NAN_BOXED(2094656192,32,FLEN)
NAN_BOXED(4242139840,32,FLEN)
NAN_BOXED(2094656192,32,FLEN)
NAN_BOXED(4242139840,32,FLEN)
NAN_BOXED(2094656192,32,FLEN)
NAN_BOXED(4242139840,32,FLEN)
NAN_BOXED(2094656192,32,FLEN)
NAN_BOXED(4242139840,32,FLEN)
NAN_BOXED(2094656192,32,FLEN)
NAN_BOXED(4242139840,32,FLEN)
NAN_BOXED(2118469897,32,FLEN)
NAN_BOXED(4265953545,32,FLEN)
NAN_BOXED(2118469897,32,FLEN)
NAN_BOXED(4265953545,32,FLEN)
NAN_BOXED(2118469897,32,FLEN)
NAN_BOXED(4265953545,32,FLEN)
NAN_BOXED(2118469897,32,FLEN)
NAN_BOXED(4265953545,32,FLEN)
NAN_BOXED(2118469897,32,FLEN)
NAN_BOXED(4265953545,32,FLEN)
NAN_BOXED(2132916829,32,FLEN)
NAN_BOXED(4280400477,32,FLEN)
NAN_BOXED(2132916829,32,FLEN)
NAN_BOXED(4280400477,32,FLEN)
NAN_BOXED(2132916829,32,FLEN)
NAN_BOXED(4280400477,32,FLEN)
NAN_BOXED(2132916829,32,FLEN)
NAN_BOXED(4280400477,32,FLEN)
NAN_BOXED(2132916829,32,FLEN)
NAN_BOXED(4280400477,32,FLEN)
NAN_BOXED(2131354011,32,FLEN)
NAN_BOXED(4278837659,32,FLEN)
NAN_BOXED(2131354011,32,FLEN)
NAN_BOXED(4278837659,32,FLEN)
NAN_BOXED(2131354011,32,FLEN)
NAN_BOXED(4278837659,32,FLEN)
NAN_BOXED(2131354011,32,FLEN)
NAN_BOXED(4278837659,32,FLEN)
NAN_BOXED(2131354011,32,FLEN)
NAN_BOXED(4278837659,32,FLEN)
NAN_BOXED(2102123249,32,FLEN)
NAN_BOXED(4249606897,32,FLEN)
NAN_BOXED(2102123249,32,FLEN)
NAN_BOXED(4249606897,32,FLEN)
NAN_BOXED(2102123249,32,FLEN)
NAN_BOXED(4249606897,32,FLEN)
NAN_BOXED(2102123249,32,FLEN)
NAN_BOXED(4249606897,32,FLEN)
NAN_BOXED(2102123249,32,FLEN)
NAN_BOXED(4249606897,32,FLEN)
NAN_BOXED(2133251056,32,FLEN)
NAN_BOXED(4280734704,32,FLEN)
NAN_BOXED(2133251056,32,FLEN)
NAN_BOXED(4280734704,32,FLEN)
NAN_BOXED(2133251056,32,FLEN)
NAN_BOXED(4280734704,32,FLEN)
NAN_BOXED(2133251056,32,FLEN)
NAN_BOXED(4280734704,32,FLEN)
NAN_BOXED(2133251056,32,FLEN)
NAN_BOXED(4280734704,32,FLEN)
NAN_BOXED(2116869791,32,FLEN)
NAN_BOXED(4264353439,32,FLEN)
NAN_BOXED(2116869791,32,FLEN)
NAN_BOXED(4264353439,32,FLEN)
NAN_BOXED(2116869791,32,FLEN)
NAN_BOXED(4264353439,32,FLEN)
NAN_BOXED(2116869791,32,FLEN)
NAN_BOXED(4264353439,32,FLEN)
NAN_BOXED(2116869791,32,FLEN)
NAN_BOXED(4264353439,32,FLEN)
NAN_BOXED(2084295396,32,FLEN)
NAN_BOXED(4231779044,32,FLEN)
NAN_BOXED(2084295396,32,FLEN)
NAN_BOXED(4231779044,32,FLEN)
NAN_BOXED(2084295396,32,FLEN)
NAN_BOXED(4231779044,32,FLEN)
NAN_BOXED(2084295396,32,FLEN)
NAN_BOXED(4231779044,32,FLEN)
NAN_BOXED(2084295396,32,FLEN)
NAN_BOXED(4231779044,32,FLEN)
NAN_BOXED(2122179966,32,FLEN)
NAN_BOXED(4269663614,32,FLEN)
NAN_BOXED(2122179966,32,FLEN)
NAN_BOXED(4269663614,32,FLEN)
NAN_BOXED(2122179966,32,FLEN)
NAN_BOXED(4269663614,32,FLEN)
NAN_BOXED(2122179966,32,FLEN)
NAN_BOXED(4269663614,32,FLEN)
NAN_BOXED(2122179966,32,FLEN)
NAN_BOXED(4269663614,32,FLEN)
NAN_BOXED(2112132659,32,FLEN)
NAN_BOXED(4259616307,32,FLEN)
NAN_BOXED(2112132659,32,FLEN)
NAN_BOXED(4259616307,32,FLEN)
NAN_BOXED(2112132659,32,FLEN)
NAN_BOXED(4259616307,32,FLEN)
NAN_BOXED(2112132659,32,FLEN)
NAN_BOXED(4259616307,32,FLEN)
NAN_BOXED(2112132659,32,FLEN)
NAN_BOXED(4259616307,32,FLEN)
NAN_BOXED(2134505610,32,FLEN)
NAN_BOXED(4281989258,32,FLEN)
NAN_BOXED(2134505610,32,FLEN)
NAN_BOXED(4281989258,32,FLEN)
NAN_BOXED(2134505610,32,FLEN)
NAN_BOXED(4281989258,32,FLEN)
NAN_BOXED(2134505610,32,FLEN)
NAN_BOXED(4281989258,32,FLEN)
NAN_BOXED(2134505610,32,FLEN)
NAN_BOXED(4281989258,32,FLEN)
NAN_BOXED(2133656165,32,FLEN)
NAN_BOXED(4281139813,32,FLEN)
NAN_BOXED(2133656165,32,FLEN)
NAN_BOXED(4281139813,32,FLEN)
NAN_BOXED(2133656165,32,FLEN)
NAN_BOXED(4281139813,32,FLEN)
NAN_BOXED(2133656165,32,FLEN)
NAN_BOXED(4281139813,32,FLEN)
NAN_BOXED(2133656165,32,FLEN)
NAN_BOXED(4281139813,32,FLEN)
NAN_BOXED(2128371189,32,FLEN)
NAN_BOXED(4275854837,32,FLEN)
NAN_BOXED(2128371189,32,FLEN)
NAN_BOXED(4275854837,32,FLEN)
NAN_BOXED(2128371189,32,FLEN)
NAN_BOXED(4275854837,32,FLEN)
NAN_BOXED(2128371189,32,FLEN)
NAN_BOXED(4275854837,32,FLEN)
NAN_BOXED(2128371189,32,FLEN)
NAN_BOXED(4275854837,32,FLEN)
NAN_BOXED(2132448451,32,FLEN)
NAN_BOXED(4279932099,32,FLEN)
NAN_BOXED(2132448451,32,FLEN)
NAN_BOXED(4279932099,32,FLEN)
NAN_BOXED(2132448451,32,FLEN)
NAN_BOXED(4279932099,32,FLEN)
NAN_BOXED(2132448451,32,FLEN)
NAN_BOXED(4279932099,32,FLEN)
NAN_BOXED(2132448451,32,FLEN)
NAN_BOXED(4279932099,32,FLEN)
NAN_BOXED(2134781607,32,FLEN)
NAN_BOXED(4282265255,32,FLEN)
NAN_BOXED(2134781607,32,FLEN)
NAN_BOXED(4282265255,32,FLEN)
NAN_BOXED(2134781607,32,FLEN)
NAN_BOXED(4282265255,32,FLEN)
NAN_BOXED(2134781607,32,FLEN)
NAN_BOXED(4282265255,32,FLEN)
NAN_BOXED(2134781607,32,FLEN)
NAN_BOXED(4282265255,32,FLEN)
NAN_BOXED(2133715182,32,FLEN)
NAN_BOXED(4281198830,32,FLEN)
NAN_BOXED(2133715182,32,FLEN)
NAN_BOXED(4281198830,32,FLEN)
NAN_BOXED(2133715182,32,FLEN)
NAN_BOXED(4281198830,32,FLEN)
NAN_BOXED(2133715182,32,FLEN)
NAN_BOXED(4281198830,32,FLEN)
NAN_BOXED(2133715182,32,FLEN)
NAN_BOXED(4281198830,32,FLEN)
NAN_BOXED(2127403407,32,FLEN)
NAN_BOXED(4274887055,32,FLEN)
NAN_BOXED(2127403407,32,FLEN)
NAN_BOXED(4274887055,32,FLEN)
NAN_BOXED(2127403407,32,FLEN)
NAN_BOXED(4274887055,32,FLEN)
NAN_BOXED(2127403407,32,FLEN)
NAN_BOXED(4274887055,32,FLEN)
NAN_BOXED(2127403407,32,FLEN)
NAN_BOXED(4274887055,32,FLEN)
NAN_BOXED(2132707491,32,FLEN)
NAN_BOXED(4280191139,32,FLEN)
NAN_BOXED(2132707491,32,FLEN)
NAN_BOXED(4280191139,32,FLEN)
NAN_BOXED(2132707491,32,FLEN)
NAN_BOXED(4280191139,32,FLEN)
NAN_BOXED(2132707491,32,FLEN)
NAN_BOXED(4280191139,32,FLEN)
NAN_BOXED(2132707491,32,FLEN)
NAN_BOXED(4280191139,32,FLEN)
NAN_BOXED(2132271412,32,FLEN)
NAN_BOXED(4279755060,32,FLEN)
NAN_BOXED(2132271412,32,FLEN)
NAN_BOXED(4279755060,32,FLEN)
NAN_BOXED(2132271412,32,FLEN)
NAN_BOXED(4279755060,32,FLEN)
NAN_BOXED(2132271412,32,FLEN)
NAN_BOXED(4279755060,32,FLEN)
NAN_BOXED(2132271412,32,FLEN)
NAN_BOXED(4279755060,32,FLEN)
NAN_BOXED(2128686164,32,FLEN)
NAN_BOXED(4276169812,32,FLEN)
NAN_BOXED(2128686164,32,FLEN)
NAN_BOXED(4276169812,32,FLEN)
NAN_BOXED(2128686164,32,FLEN)
NAN_BOXED(4276169812,32,FLEN)
NAN_BOXED(2128686164,32,FLEN)
NAN_BOXED(4276169812,32,FLEN)
NAN_BOXED(2128686164,32,FLEN)
NAN_BOXED(4276169812,32,FLEN)
NAN_BOXED(2132359735,32,FLEN)
NAN_BOXED(4279843383,32,FLEN)
NAN_BOXED(2132359735,32,FLEN)
NAN_BOXED(4279843383,32,FLEN)
NAN_BOXED(2132359735,32,FLEN)
NAN_BOXED(4279843383,32,FLEN)
NAN_BOXED(2132359735,32,FLEN)
NAN_BOXED(4279843383,32,FLEN)
NAN_BOXED(2132359735,32,FLEN)
NAN_BOXED(4279843383,32,FLEN)
NAN_BOXED(2034059931,32,FLEN)
NAN_BOXED(4181543579,32,FLEN)
NAN_BOXED(2034059931,32,FLEN)
NAN_BOXED(4181543579,32,FLEN)
NAN_BOXED(2034059931,32,FLEN)
NAN_BOXED(4181543579,32,FLEN)
NAN_BOXED(2034059931,32,FLEN)
NAN_BOXED(4181543579,32,FLEN)
NAN_BOXED(2034059931,32,FLEN)
NAN_BOXED(4181543579,32,FLEN)
NAN_BOXED(2126684709,32,FLEN)
NAN_BOXED(4274168357,32,FLEN)
NAN_BOXED(2126684709,32,FLEN)
NAN_BOXED(4274168357,32,FLEN)
NAN_BOXED(2126684709,32,FLEN)
NAN_BOXED(4274168357,32,FLEN)
NAN_BOXED(2126684709,32,FLEN)
NAN_BOXED(4274168357,32,FLEN)
NAN_BOXED(2126684709,32,FLEN)
NAN_BOXED(4274168357,32,FLEN)
NAN_BOXED(2101974612,32,FLEN)
NAN_BOXED(4249458260,32,FLEN)
NAN_BOXED(2101974612,32,FLEN)
NAN_BOXED(4249458260,32,FLEN)
NAN_BOXED(2101974612,32,FLEN)
NAN_BOXED(4249458260,32,FLEN)
NAN_BOXED(2101974612,32,FLEN)
NAN_BOXED(4249458260,32,FLEN)
NAN_BOXED(2101974612,32,FLEN)
NAN_BOXED(4249458260,32,FLEN)
NAN_BOXED(2134182842,32,FLEN)
NAN_BOXED(4281666490,32,FLEN)
NAN_BOXED(2134182842,32,FLEN)
NAN_BOXED(4281666490,32,FLEN)
NAN_BOXED(2134182842,32,FLEN)
NAN_BOXED(4281666490,32,FLEN)
NAN_BOXED(2134182842,32,FLEN)
NAN_BOXED(4281666490,32,FLEN)
NAN_BOXED(2134182842,32,FLEN)
NAN_BOXED(4281666490,32,FLEN)
NAN_BOXED(2124198713,32,FLEN)
NAN_BOXED(4271682361,32,FLEN)
NAN_BOXED(2124198713,32,FLEN)
NAN_BOXED(4271682361,32,FLEN)
NAN_BOXED(2124198713,32,FLEN)
NAN_BOXED(4271682361,32,FLEN)
NAN_BOXED(2124198713,32,FLEN)
NAN_BOXED(4271682361,32,FLEN)
NAN_BOXED(2124198713,32,FLEN)
NAN_BOXED(4271682361,32,FLEN)
NAN_BOXED(2101297735,32,FLEN)
NAN_BOXED(4248781383,32,FLEN)
NAN_BOXED(2101297735,32,FLEN)
NAN_BOXED(4248781383,32,FLEN)
NAN_BOXED(2101297735,32,FLEN)
NAN_BOXED(4248781383,32,FLEN)
NAN_BOXED(2101297735,32,FLEN)
NAN_BOXED(4248781383,32,FLEN)
NAN_BOXED(2101297735,32,FLEN)
NAN_BOXED(4248781383,32,FLEN)
NAN_BOXED(2109968532,32,FLEN)
NAN_BOXED(4257452180,32,FLEN)
NAN_BOXED(2109968532,32,FLEN)
NAN_BOXED(4257452180,32,FLEN)
NAN_BOXED(2109968532,32,FLEN)
NAN_BOXED(4257452180,32,FLEN)
NAN_BOXED(2109968532,32,FLEN)
NAN_BOXED(4257452180,32,FLEN)
NAN_BOXED(2109968532,32,FLEN)
NAN_BOXED(4257452180,32,FLEN)
NAN_BOXED(2132760894,32,FLEN)
NAN_BOXED(4280244542,32,FLEN)
NAN_BOXED(2132760894,32,FLEN)
NAN_BOXED(4280244542,32,FLEN)
NAN_BOXED(2132760894,32,FLEN)
NAN_BOXED(4280244542,32,FLEN)
NAN_BOXED(2132760894,32,FLEN)
NAN_BOXED(4280244542,32,FLEN)
NAN_BOXED(2132760894,32,FLEN)
NAN_BOXED(4280244542,32,FLEN)
NAN_BOXED(2094843655,32,FLEN)
NAN_BOXED(4242327303,32,FLEN)
NAN_BOXED(2094843655,32,FLEN)
NAN_BOXED(4242327303,32,FLEN)
NAN_BOXED(2094843655,32,FLEN)
NAN_BOXED(4242327303,32,FLEN)
NAN_BOXED(2094843655,32,FLEN)
NAN_BOXED(4242327303,32,FLEN)
NAN_BOXED(2094843655,32,FLEN)
NAN_BOXED(4242327303,32,FLEN)
NAN_BOXED(2126306546,32,FLEN)
NAN_BOXED(4273790194,32,FLEN)
NAN_BOXED(2126306546,32,FLEN)
NAN_BOXED(4273790194,32,FLEN)
NAN_BOXED(2126306546,32,FLEN)
NAN_BOXED(4273790194,32,FLEN)
NAN_BOXED(2126306546,32,FLEN)
NAN_BOXED(4273790194,32,FLEN)
NAN_BOXED(2126306546,32,FLEN)
NAN_BOXED(4273790194,32,FLEN)
NAN_BOXED(2131342146,32,FLEN)
NAN_BOXED(4278825794,32,FLEN)
NAN_BOXED(2131342146,32,FLEN)
NAN_BOXED(4278825794,32,FLEN)
NAN_BOXED(2131342146,32,FLEN)
NAN_BOXED(4278825794,32,FLEN)
NAN_BOXED(2131342146,32,FLEN)
NAN_BOXED(4278825794,32,FLEN)
NAN_BOXED(2131342146,32,FLEN)
NAN_BOXED(4278825794,32,FLEN)
NAN_BOXED(2112389782,32,FLEN)
NAN_BOXED(4259873430,32,FLEN)
NAN_BOXED(2112389782,32,FLEN)
NAN_BOXED(4259873430,32,FLEN)
NAN_BOXED(2112389782,32,FLEN)
NAN_BOXED(4259873430,32,FLEN)
NAN_BOXED(2112389782,32,FLEN)
NAN_BOXED(4259873430,32,FLEN)
NAN_BOXED(2112389782,32,FLEN)
NAN_BOXED(4259873430,32,FLEN)
NAN_BOXED(2124275897,32,FLEN)
NAN_BOXED(4271759545,32,FLEN)
NAN_BOXED(2124275897,32,FLEN)
NAN_BOXED(4271759545,32,FLEN)
NAN_BOXED(2124275897,32,FLEN)
NAN_BOXED(4271759545,32,FLEN)
NAN_BOXED(2124275897,32,FLEN)
NAN_BOXED(4271759545,32,FLEN)
NAN_BOXED(2124275897,32,FLEN)
NAN_BOXED(4271759545,32,FLEN)
NAN_BOXED(2123660412,32,FLEN)
NAN_BOXED(4271144060,32,FLEN)
NAN_BOXED(2123660412,32,FLEN)
NAN_BOXED(4271144060,32,FLEN)
NAN_BOXED(2123660412,32,FLEN)
NAN_BOXED(4271144060,32,FLEN)
NAN_BOXED(2123660412,32,FLEN)
NAN_BOXED(4271144060,32,FLEN)
NAN_BOXED(2123660412,32,FLEN)
NAN_BOXED(4271144060,32,FLEN)
NAN_BOXED(2125779530,32,FLEN)
NAN_BOXED(4273263178,32,FLEN)
NAN_BOXED(2125779530,32,FLEN)
NAN_BOXED(4273263178,32,FLEN)
NAN_BOXED(2125779530,32,FLEN)
NAN_BOXED(4273263178,32,FLEN)
NAN_BOXED(2125779530,32,FLEN)
NAN_BOXED(4273263178,32,FLEN)
NAN_BOXED(2125779530,32,FLEN)
NAN_BOXED(4273263178,32,FLEN)
NAN_BOXED(2093447105,32,FLEN)
NAN_BOXED(4240930753,32,FLEN)
NAN_BOXED(2093447105,32,FLEN)
NAN_BOXED(4240930753,32,FLEN)
NAN_BOXED(2093447105,32,FLEN)
NAN_BOXED(4240930753,32,FLEN)
NAN_BOXED(2093447105,32,FLEN)
NAN_BOXED(4240930753,32,FLEN)
NAN_BOXED(2093447105,32,FLEN)
NAN_BOXED(4240930753,32,FLEN)
NAN_BOXED(2129782836,32,FLEN)
NAN_BOXED(4277266484,32,FLEN)
NAN_BOXED(2129782836,32,FLEN)
NAN_BOXED(4277266484,32,FLEN)
NAN_BOXED(2129782836,32,FLEN)
NAN_BOXED(4277266484,32,FLEN)
NAN_BOXED(2129782836,32,FLEN)
NAN_BOXED(4277266484,32,FLEN)
NAN_BOXED(2129782836,32,FLEN)
NAN_BOXED(4277266484,32,FLEN)
NAN_BOXED(2127748870,32,FLEN)
NAN_BOXED(4275232518,32,FLEN)
NAN_BOXED(2127748870,32,FLEN)
NAN_BOXED(4275232518,32,FLEN)
NAN_BOXED(2127748870,32,FLEN)
NAN_BOXED(4275232518,32,FLEN)
NAN_BOXED(2127748870,32,FLEN)
NAN_BOXED(4275232518,32,FLEN)
NAN_BOXED(2127748870,32,FLEN)
NAN_BOXED(4275232518,32,FLEN)
NAN_BOXED(2123578146,32,FLEN)
NAN_BOXED(4271061794,32,FLEN)
NAN_BOXED(2123578146,32,FLEN)
NAN_BOXED(4271061794,32,FLEN)
NAN_BOXED(2123578146,32,FLEN)
NAN_BOXED(4271061794,32,FLEN)
NAN_BOXED(2123578146,32,FLEN)
NAN_BOXED(4271061794,32,FLEN)
NAN_BOXED(2123578146,32,FLEN)
NAN_BOXED(4271061794,32,FLEN)
NAN_BOXED(2126268514,32,FLEN)
NAN_BOXED(4273752162,32,FLEN)
NAN_BOXED(2126268514,32,FLEN)
NAN_BOXED(4273752162,32,FLEN)
NAN_BOXED(2126268514,32,FLEN)
NAN_BOXED(4273752162,32,FLEN)
NAN_BOXED(2126268514,32,FLEN)
NAN_BOXED(4273752162,32,FLEN)
NAN_BOXED(2126268514,32,FLEN)
NAN_BOXED(4273752162,32,FLEN)
NAN_BOXED(2129283381,32,FLEN)
NAN_BOXED(4276767029,32,FLEN)
NAN_BOXED(2129283381,32,FLEN)
NAN_BOXED(4276767029,32,FLEN)
NAN_BOXED(2129283381,32,FLEN)
NAN_BOXED(4276767029,32,FLEN)
NAN_BOXED(2129283381,32,FLEN)
NAN_BOXED(4276767029,32,FLEN)
NAN_BOXED(2129283381,32,FLEN)
NAN_BOXED(4276767029,32,FLEN)
NAN_BOXED(2129841883,32,FLEN)
NAN_BOXED(4277325531,32,FLEN)
NAN_BOXED(2129841883,32,FLEN)
NAN_BOXED(4277325531,32,FLEN)
NAN_BOXED(2129841883,32,FLEN)
NAN_BOXED(4277325531,32,FLEN)
NAN_BOXED(2129841883,32,FLEN)
NAN_BOXED(4277325531,32,FLEN)
NAN_BOXED(2129841883,32,FLEN)
NAN_BOXED(4277325531,32,FLEN)
NAN_BOXED(2109666842,32,FLEN)
NAN_BOXED(4257150490,32,FLEN)
NAN_BOXED(2109666842,32,FLEN)
NAN_BOXED(4257150490,32,FLEN)
NAN_BOXED(2109666842,32,FLEN)
NAN_BOXED(4257150490,32,FLEN)
NAN_BOXED(2109666842,32,FLEN)
NAN_BOXED(4257150490,32,FLEN)
NAN_BOXED(2109666842,32,FLEN)
NAN_BOXED(4257150490,32,FLEN)
NAN_BOXED(2132943109,32,FLEN)
NAN_BOXED(4280426757,32,FLEN)
NAN_BOXED(2132943109,32,FLEN)
NAN_BOXED(4280426757,32,FLEN)
NAN_BOXED(2132943109,32,FLEN)
NAN_BOXED(4280426757,32,FLEN)
NAN_BOXED(2132943109,32,FLEN)
NAN_BOXED(4280426757,32,FLEN)
NAN_BOXED(2133744528,32,FLEN)
NAN_BOXED(4281228176,32,FLEN)
NAN_BOXED(2119725970,32,FLEN)
NAN_BOXED(4267209618,32,FLEN)
NAN_BOXED(2119725970,32,FLEN)
NAN_BOXED(4267209618,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 48*((SIGALIGN)/4),4,0xdeadbeef


signature_x9_0:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x9_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x9_2:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x9_3:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x9_4:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x9_5:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x9_6:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x9_7:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x9_8:
    .fill 158*((SIGALIGN)/4),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*XLEN/32,4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

RVMODEL_DATA_END
