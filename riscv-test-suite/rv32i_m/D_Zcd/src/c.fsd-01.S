
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.11.0
// timestamp : Fri Aug  4 07:31:35 2023 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /home/riscv/riscv-ctg/sample_cgfs/dataset.cgf \
//                  --cgf /home/riscv/riscv-ctg/sample_cgfs/RV32C/fld.cgf \
 \
//                  -- xlen 32  \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the c.fsd instruction of the RISC-V RV32FDC_Zcd,RV64FDC_Zcd extension for the c.fsd covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IFDC")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*D.*C.*);def TEST_CASE_1=True;",c.fsd)

RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_0:// rs1 != rs2, rs1==x15, rs2==f15,imm_val == 0, 
// opcode: c.fsd; op1:x15; op2:f15; op2val:-0x1000001; immval:0x0; align:$ea_align; flagreg:x4;
// valreg: x3; valoffset: 0*FLEN/8;
TEST_STORE_F(x1,x2,0,x15,f15,0x0,0*SIGALIGN,c.fsd,0,x4,x3, 0*FLEN/8)
RVTEST_VALBASEUPD(x3,test_dataset_1)

inst_1:// rs1==x14, rs2==f14,imm_val > 0, 
// opcode: c.fsd; op1:x14; op2:f14; op2val:-0x1000001; immval:0xf8; align:$ea_align; flagreg:x4;
// valreg: x3; valoffset: 1*FLEN/8;
TEST_STORE_F(x1,x2,0,x14,f14,0xf8,2*SIGALIGN,c.fsd,0,x4,x3, 1*FLEN/8)
RVTEST_VALBASEUPD(x3,test_dataset_2)

inst_2:// rs1==x13, rs2==f13,imm_val == 168, 
// opcode: c.fsd; op1:x13; op2:f13; op2val:-0x1000001; immval:0xa8; align:$ea_align; flagreg:x4;
// valreg: x3; valoffset: 2*FLEN/8;
TEST_STORE_F(x1,x2,0,x13,f13,0xa8,4*SIGALIGN,c.fsd,0,x4,x3, 2*FLEN/8)
RVTEST_VALBASEUPD(x3,test_dataset_3)

inst_3:// rs1==x12, rs2==f12,imm_val == 80, 
// opcode: c.fsd; op1:x12; op2:f12; op2val:-0x1000001; immval:0x50; align:$ea_align; flagreg:x4;
// valreg: x3; valoffset: 3*FLEN/8;
TEST_STORE_F(x1,x2,0,x12,f12,0x50,6*SIGALIGN,c.fsd,0,x4,x3, 3*FLEN/8)
RVTEST_VALBASEUPD(x3,test_dataset_4)

inst_4:// rs1==x11, rs2==f11,imm_val == 8, 
// opcode: c.fsd; op1:x11; op2:f11; op2val:-0x1000001; immval:0x8; align:$ea_align; flagreg:x4;
// valreg: x3; valoffset: 4*FLEN/8;
TEST_STORE_F(x1,x2,0,x11,f11,0x8,8*SIGALIGN,c.fsd,0,x4,x3, 4*FLEN/8)
RVTEST_VALBASEUPD(x3,test_dataset_5)

inst_5:// rs1==x10, rs2==f10,imm_val == 16, 
// opcode: c.fsd; op1:x10; op2:f10; op2val:-0x1000001; immval:0x10; align:$ea_align; flagreg:x4;
// valreg: x3; valoffset: 5*FLEN/8;
TEST_STORE_F(x1,x2,0,x10,f10,0x10,10*SIGALIGN,c.fsd,0,x4,x3, 5*FLEN/8)
RVTEST_VALBASEUPD(x3,test_dataset_6)

inst_6:// rs1==x9, rs2==f9,imm_val == 240, 
// opcode: c.fsd; op1:x9; op2:f9; op2val:-0x1000001; immval:0xf0; align:$ea_align; flagreg:x4;
// valreg: x3; valoffset: 6*FLEN/8;
TEST_STORE_F(x1,x2,0,x9,f9,0xf0,12*SIGALIGN,c.fsd,0,x4,x3, 6*FLEN/8)
RVTEST_VALBASEUPD(x3,test_dataset_7)

inst_7:// rs1==x8, rs2==f8,imm_val == 232, 
// opcode: c.fsd; op1:x8; op2:f8; op2val:-0x1000001; immval:0xe8; align:$ea_align; flagreg:x4;
// valreg: x3; valoffset: 7*FLEN/8;
TEST_STORE_F(x1,x2,0,x8,f8,0xe8,14*SIGALIGN,c.fsd,0,x4,x3, 7*FLEN/8)
RVTEST_VALBASEUPD(x3,test_dataset_8)

inst_8:// imm_val == 216, 
// opcode: c.fsd; op1:x15; op2:f15; op2val:-0x1000001; immval:0xd8; align:$ea_align; flagreg:x4;
// valreg: x3; valoffset: 8*FLEN/8;
TEST_STORE_F(x1,x2,0,x15,f15,0xd8,16*SIGALIGN,c.fsd,0,x4,x3, 8*FLEN/8)
RVTEST_VALBASEUPD(x3,test_dataset_9)

inst_9:// imm_val == 184, 
// opcode: c.fsd; op1:x15; op2:f15; op2val:-0x1000001; immval:0xb8; align:$ea_align; flagreg:x4;
// valreg: x3; valoffset: 9*FLEN/8;
TEST_STORE_F(x1,x2,0,x15,f15,0xb8,18*SIGALIGN,c.fsd,0,x4,x3, 9*FLEN/8)
RVTEST_VALBASEUPD(x3,test_dataset_10)

inst_10:// imm_val == 120, 
// opcode: c.fsd; op1:x15; op2:f15; op2val:-0x1000001; immval:0x78; align:$ea_align; flagreg:x4;
// valreg: x3; valoffset: 10*FLEN/8;
TEST_STORE_F(x1,x2,0,x15,f15,0x78,20*SIGALIGN,c.fsd,0,x4,x3, 10*FLEN/8)
RVTEST_VALBASEUPD(x3,test_dataset_11)

inst_11:// imm_val == 32, 
// opcode: c.fsd; op1:x15; op2:f15; op2val:-0x1000001; immval:0x20; align:$ea_align; flagreg:x4;
// valreg: x3; valoffset: 11*FLEN/8;
TEST_STORE_F(x1,x2,0,x15,f15,0x20,22*SIGALIGN,c.fsd,0,x4,x3, 11*FLEN/8)
RVTEST_VALBASEUPD(x3,test_dataset_12)

inst_12:// imm_val == 64, 
// opcode: c.fsd; op1:x15; op2:f15; op2val:-0x1000001; immval:0x40; align:$ea_align; flagreg:x4;
// valreg: x3; valoffset: 12*FLEN/8;
TEST_STORE_F(x1,x2,0,x15,f15,0x40,24*SIGALIGN,c.fsd,0,x4,x3, 12*FLEN/8)
RVTEST_VALBASEUPD(x3,test_dataset_13)

inst_13:// imm_val == 128, 
// opcode: c.fsd; op1:x15; op2:f15; op2val:-0x1000001; immval:0x80; align:$ea_align; flagreg:x4;
// valreg: x3; valoffset: 13*FLEN/8;
TEST_STORE_F(x1,x2,0,x15,f15,0x80,26*SIGALIGN,c.fsd,0,x4,x3, 13*FLEN/8)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:


test_dataset_1:


test_dataset_2:


test_dataset_3:


test_dataset_4:


test_dataset_5:


test_dataset_6:


test_dataset_7:


test_dataset_8:


test_dataset_9:


test_dataset_10:


test_dataset_11:


test_dataset_12:


test_dataset_13:


RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;



signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 28*((SIGALIGN)/4),4,0xdeadbeef

#ifdef rvtest_mtrap_routine
tsig_begin_canary:
CANARY;

mtrap_sigptr:
    .fill 64*XLEN/32,4,0xdeadbeef

tsig_end_canary:
CANARY;
#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif


sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
