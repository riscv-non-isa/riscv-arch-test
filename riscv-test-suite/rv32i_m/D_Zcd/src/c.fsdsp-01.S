
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.11.0
// timestamp : Wed Aug 16 04:41:22 2023 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /home/riscv/riscv-ctg/sample_cgfs/dataset.cgf \
//                  --cgf /home/riscv/riscv-ctg/sample_cgfs/RV32C/fsdsp.cgf \
 \
//                  -- xlen 32  \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the c.fsdsp instruction of the RISC-V RV32FDC,RV64FDC extension for the c.fsdsp covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IFDC,RV64IFDC")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*D.*C.*);def TEST_CASE_1=True;",c.fsdsp)

RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x4,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_0:// rs2==f31, imm_val == 0, 
// opcode: c.fsdsp; op1:x2; op2:f31; op2val:-0x1000001; immval:0x0; align:0; flagreg:x5;
// valreg: x4 ; valoffset: 0*FLEN/8
TEST_STORE_F(x1,x3,159,x2,f31,0x0,0*SIGALIGN,c.fsdsp,0,x5,x4,0*FLEN/8)
RVTEST_VALBASEUPD(x4,test_dataset_1)

inst_1:// rs2==f30, imm_val > 0, 
// opcode: c.fsdsp; op1:x2; op2:f30; op2val:-0x1000001; immval:0x1f8; align:0; flagreg:x5;
// valreg: x4 ; valoffset: 1*FLEN/8
TEST_STORE_F(x1,x3,159,x2,f30,0x1f8,2*SIGALIGN,c.fsdsp,0,x5,x4,1*FLEN/8)
RVTEST_VALBASEUPD(x4,test_dataset_2)

inst_2:// rs2==f29, imm_val == 168, 
// opcode: c.fsdsp; op1:x2; op2:f29; op2val:-0x1000001; immval:0xa8; align:0; flagreg:x5;
// valreg: x4 ; valoffset: 2*FLEN/8
TEST_STORE_F(x1,x3,159,x2,f29,0xa8,4*SIGALIGN,c.fsdsp,0,x5,x4,2*FLEN/8)
RVTEST_VALBASEUPD(x4,test_dataset_3)

inst_3:// rs2==f28, imm_val == 336, 
// opcode: c.fsdsp; op1:x2; op2:f28; op2val:-0x1000001; immval:0x150; align:0; flagreg:x5;
// valreg: x4 ; valoffset: 3*FLEN/8
TEST_STORE_F(x1,x3,159,x2,f28,0x150,6*SIGALIGN,c.fsdsp,0,x5,x4,3*FLEN/8)
RVTEST_VALBASEUPD(x4,test_dataset_4)

inst_4:// rs2==f27, imm_val == 496, 
// opcode: c.fsdsp; op1:x2; op2:f27; op2val:-0x1000001; immval:0x1f0; align:0; flagreg:x5;
// valreg: x4 ; valoffset: 4*FLEN/8
TEST_STORE_F(x1,x3,159,x2,f27,0x1f0,8*SIGALIGN,c.fsdsp,0,x5,x4,4*FLEN/8)
RVTEST_VALBASEUPD(x4,test_dataset_5)

inst_5:// rs2==f26, imm_val == 488, 
// opcode: c.fsdsp; op1:x2; op2:f26; op2val:-0x1000001; immval:0x1e8; align:0; flagreg:x5;
// valreg: x4 ; valoffset: 5*FLEN/8
TEST_STORE_F(x1,x3,159,x2,f26,0x1e8,10*SIGALIGN,c.fsdsp,0,x5,x4,5*FLEN/8)
RVTEST_VALBASEUPD(x4,test_dataset_6)

inst_6:// rs2==f25, imm_val == 472, 
// opcode: c.fsdsp; op1:x2; op2:f25; op2val:-0x1000001; immval:0x1d8; align:0; flagreg:x5;
// valreg: x4 ; valoffset: 6*FLEN/8
TEST_STORE_F(x1,x3,159,x2,f25,0x1d8,12*SIGALIGN,c.fsdsp,0,x5,x4,6*FLEN/8)
RVTEST_VALBASEUPD(x4,test_dataset_7)

inst_7:// rs2==f24, imm_val == 440, 
// opcode: c.fsdsp; op1:x2; op2:f24; op2val:-0x1000001; immval:0x1b8; align:0; flagreg:x5;
// valreg: x4 ; valoffset: 7*FLEN/8
TEST_STORE_F(x1,x3,159,x2,f24,0x1b8,14*SIGALIGN,c.fsdsp,0,x5,x4,7*FLEN/8)
RVTEST_VALBASEUPD(x4,test_dataset_8)

inst_8:// rs2==f23, imm_val == 376, 
// opcode: c.fsdsp; op1:x2; op2:f23; op2val:-0x1000001; immval:0x178; align:0; flagreg:x5;
// valreg: x4 ; valoffset: 8*FLEN/8
TEST_STORE_F(x1,x3,159,x2,f23,0x178,16*SIGALIGN,c.fsdsp,0,x5,x4,8*FLEN/8)
RVTEST_VALBASEUPD(x4,test_dataset_9)

inst_9:// rs2==f22, imm_val == 248, 
// opcode: c.fsdsp; op1:x2; op2:f22; op2val:-0x1000001; immval:0xf8; align:0; flagreg:x5;
// valreg: x4 ; valoffset: 9*FLEN/8
TEST_STORE_F(x1,x3,159,x2,f22,0xf8,18*SIGALIGN,c.fsdsp,0,x5,x4,9*FLEN/8)
RVTEST_VALBASEUPD(x4,test_dataset_10)

inst_10:// rs2==f21, imm_val == 8, 
// opcode: c.fsdsp; op1:x2; op2:f21; op2val:-0x1000001; immval:0x8; align:0; flagreg:x5;
// valreg: x4 ; valoffset: 10*FLEN/8
TEST_STORE_F(x1,x3,159,x2,f21,0x8,20*SIGALIGN,c.fsdsp,0,x5,x4,10*FLEN/8)
RVTEST_VALBASEUPD(x4,test_dataset_11)

inst_11:// rs2==f20, imm_val == 16, 
// opcode: c.fsdsp; op1:x2; op2:f20; op2val:-0x1000001; immval:0x10; align:0; flagreg:x5;
// valreg: x4 ; valoffset: 11*FLEN/8
TEST_STORE_F(x1,x3,159,x2,f20,0x10,22*SIGALIGN,c.fsdsp,0,x5,x4,11*FLEN/8)
RVTEST_VALBASEUPD(x4,test_dataset_12)

inst_12:// rs2==f19, imm_val == 32, 
// opcode: c.fsdsp; op1:x2; op2:f19; op2val:-0x1000001; immval:0x20; align:0; flagreg:x5;
// valreg: x4 ; valoffset: 12*FLEN/8
TEST_STORE_F(x1,x3,159,x2,f19,0x20,24*SIGALIGN,c.fsdsp,0,x5,x4,12*FLEN/8)
RVTEST_VALBASEUPD(x4,test_dataset_13)

inst_13:// rs2==f18, imm_val == 64, 
// opcode: c.fsdsp; op1:x2; op2:f18; op2val:-0x1000001; immval:0x40; align:0; flagreg:x5;
// valreg: x4 ; valoffset: 13*FLEN/8
TEST_STORE_F(x1,x3,159,x2,f18,0x40,26*SIGALIGN,c.fsdsp,0,x5,x4,13*FLEN/8)
RVTEST_VALBASEUPD(x4,test_dataset_14)

inst_14:// rs2==f17, imm_val == 128, 
// opcode: c.fsdsp; op1:x2; op2:f17; op2val:-0x1000001; immval:0x80; align:0; flagreg:x5;
// valreg: x4 ; valoffset: 14*FLEN/8
TEST_STORE_F(x1,x3,159,x2,f17,0x80,28*SIGALIGN,c.fsdsp,0,x5,x4,14*FLEN/8)
RVTEST_VALBASEUPD(x4,test_dataset_15)

inst_15:// rs2==f16, imm_val == 256, 
// opcode: c.fsdsp; op1:x2; op2:f16; op2val:-0x1000001; immval:0x100; align:0; flagreg:x5;
// valreg: x4 ; valoffset: 15*FLEN/8
TEST_STORE_F(x1,x3,159,x2,f16,0x100,30*SIGALIGN,c.fsdsp,0,x5,x4,15*FLEN/8)
RVTEST_VALBASEUPD(x4,test_dataset_16)

inst_16:// rs2==f15, 
// opcode: c.fsdsp; op1:x2; op2:f15; op2val:-0x80000000; immval:0x0; align:0; flagreg:x5;
// valreg: x4 ; valoffset: 16*FLEN/8
TEST_STORE_F(x1,x3,0,x2,f15,0x0,32*SIGALIGN,c.fsdsp,0,x5,x4,16*FLEN/8)
RVTEST_VALBASEUPD(x4,test_dataset_17)

inst_17:// rs2==f14, 
// opcode: c.fsdsp; op1:x2; op2:f14; op2val:-0x80000000; immval:0x0; align:0; flagreg:x5;
// valreg: x4 ; valoffset: 17*FLEN/8
TEST_STORE_F(x1,x3,0,x2,f14,0x0,34*SIGALIGN,c.fsdsp,0,x5,x4,17*FLEN/8)
RVTEST_VALBASEUPD(x4,test_dataset_18)

inst_18:// rs2==f13, 
// opcode: c.fsdsp; op1:x2; op2:f13; op2val:-0x80000000; immval:0x0; align:0; flagreg:x5;
// valreg: x4 ; valoffset: 18*FLEN/8
TEST_STORE_F(x1,x3,0,x2,f13,0x0,36*SIGALIGN,c.fsdsp,0,x5,x4,18*FLEN/8)
RVTEST_VALBASEUPD(x4,test_dataset_19)

inst_19:// rs2==f12, 
// opcode: c.fsdsp; op1:x2; op2:f12; op2val:-0x80000000; immval:0x0; align:0; flagreg:x5;
// valreg: x4 ; valoffset: 19*FLEN/8
TEST_STORE_F(x1,x3,0,x2,f12,0x0,38*SIGALIGN,c.fsdsp,0,x5,x4,19*FLEN/8)
RVTEST_VALBASEUPD(x4,test_dataset_20)

inst_20:// rs2==f11, 
// opcode: c.fsdsp; op1:x2; op2:f11; op2val:-0x80000000; immval:0x0; align:0; flagreg:x5;
// valreg: x4 ; valoffset: 20*FLEN/8
TEST_STORE_F(x1,x3,0,x2,f11,0x0,40*SIGALIGN,c.fsdsp,0,x5,x4,20*FLEN/8)
RVTEST_VALBASEUPD(x4,test_dataset_21)

inst_21:// rs2==f10, 
// opcode: c.fsdsp; op1:x2; op2:f10; op2val:-0x80000000; immval:0x0; align:0; flagreg:x5;
// valreg: x4 ; valoffset: 21*FLEN/8
TEST_STORE_F(x1,x3,0,x2,f10,0x0,42*SIGALIGN,c.fsdsp,0,x5,x4,21*FLEN/8)
RVTEST_VALBASEUPD(x4,test_dataset_22)

inst_22:// rs2==f9, 
// opcode: c.fsdsp; op1:x2; op2:f9; op2val:-0x80000000; immval:0x0; align:0; flagreg:x5;
// valreg: x4 ; valoffset: 22*FLEN/8
TEST_STORE_F(x1,x3,0,x2,f9,0x0,44*SIGALIGN,c.fsdsp,0,x5,x4,22*FLEN/8)
RVTEST_VALBASEUPD(x4,test_dataset_23)

inst_23:// rs2==f8, 
// opcode: c.fsdsp; op1:x2; op2:f8; op2val:-0x80000000; immval:0x0; align:0; flagreg:x5;
// valreg: x4 ; valoffset: 23*FLEN/8
TEST_STORE_F(x1,x3,0,x2,f8,0x0,46*SIGALIGN,c.fsdsp,0,x5,x4,23*FLEN/8)
RVTEST_VALBASEUPD(x4,test_dataset_24)

inst_24:// rs2==f7, 
// opcode: c.fsdsp; op1:x2; op2:f7; op2val:-0x80000000; immval:0x0; align:0; flagreg:x5;
// valreg: x4 ; valoffset: 24*FLEN/8
TEST_STORE_F(x1,x3,0,x2,f7,0x0,48*SIGALIGN,c.fsdsp,0,x5,x4,24*FLEN/8)
RVTEST_VALBASEUPD(x4,test_dataset_25)

inst_25:// rs2==f6, 
// opcode: c.fsdsp; op1:x2; op2:f6; op2val:-0x80000000; immval:0x0; align:0; flagreg:x5;
// valreg: x4 ; valoffset: 25*FLEN/8
TEST_STORE_F(x1,x3,0,x2,f6,0x0,50*SIGALIGN,c.fsdsp,0,x5,x4,25*FLEN/8)
RVTEST_VALBASEUPD(x4,test_dataset_26)

inst_26:// rs2==f5, 
// opcode: c.fsdsp; op1:x2; op2:f5; op2val:-0x80000000; immval:0x0; align:0; flagreg:x5;
// valreg: x4 ; valoffset: 26*FLEN/8
TEST_STORE_F(x1,x3,0,x2,f5,0x0,52*SIGALIGN,c.fsdsp,0,x5,x4,26*FLEN/8)
RVTEST_VALBASEUPD(x4,test_dataset_27)

inst_27:// rs2==f4, 
// opcode: c.fsdsp; op1:x2; op2:f4; op2val:-0x80000000; immval:0x0; align:0; flagreg:x5;
// valreg: x4 ; valoffset: 27*FLEN/8
TEST_STORE_F(x1,x3,0,x2,f4,0x0,54*SIGALIGN,c.fsdsp,0,x5,x4,27*FLEN/8)
RVTEST_VALBASEUPD(x4,test_dataset_28)

inst_28:// rs2==f3, 
// opcode: c.fsdsp; op1:x2; op2:f3; op2val:-0x80000000; immval:0x0; align:0; flagreg:x5;
// valreg: x4 ; valoffset: 28*FLEN/8
TEST_STORE_F(x1,x3,0,x2,f3,0x0,56*SIGALIGN,c.fsdsp,0,x5,x4,28*FLEN/8)
RVTEST_VALBASEUPD(x4,test_dataset_29)

inst_29:// rs2==f2, 
// opcode: c.fsdsp; op1:x2; op2:f2; op2val:-0x80000000; immval:0x0; align:0; flagreg:x5;
// valreg: x4 ; valoffset: 29*FLEN/8
TEST_STORE_F(x1,x3,0,x2,f2,0x0,58*SIGALIGN,c.fsdsp,0,x5,x4,29*FLEN/8)
RVTEST_VALBASEUPD(x4,test_dataset_30)

inst_30:// rs2==f1, 
// opcode: c.fsdsp; op1:x2; op2:f1; op2val:-0x80000000; immval:0x0; align:0; flagreg:x5;
// valreg: x4 ; valoffset: 30*FLEN/8
TEST_STORE_F(x1,x3,0,x2,f1,0x0,60*SIGALIGN,c.fsdsp,0,x5,x4,30*FLEN/8)
RVTEST_VALBASEUPD(x4,test_dataset_31)

inst_31:// rs2==f0, 
// opcode: c.fsdsp; op1:x2; op2:f0; op2val:-0x80000000; immval:0x0; align:0; flagreg:x5;
// valreg: x4 ; valoffset: 31*FLEN/8
TEST_STORE_F(x1,x3,0,x2,f0,0x0,62*SIGALIGN,c.fsdsp,0,x5,x4,31*FLEN/8)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:

test_dataset_1:

test_dataset_2:

test_dataset_3:

test_dataset_4:

test_dataset_5:

test_dataset_6:

test_dataset_7:

test_dataset_8:

test_dataset_9:

test_dataset_10:

test_dataset_11:

test_dataset_12:

test_dataset_13:

test_dataset_14:

test_dataset_15:

test_dataset_16:

test_dataset_17:

test_dataset_18:

test_dataset_19:

test_dataset_20:

test_dataset_21:

test_dataset_22:

test_dataset_23:

test_dataset_24:

test_dataset_25:

test_dataset_26:

test_dataset_27:

test_dataset_28:

test_dataset_29:

test_dataset_30:

test_dataset_31:

RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;



signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 64*((SIGALIGN)/4),4,0xdeadbeef

#ifdef rvtest_mtrap_routine
tsig_begin_canary:
CANARY;

mtrap_sigptr:
    .fill 64*XLEN/32,4,0xdeadbeef

tsig_end_canary:
CANARY;
#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif


sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
