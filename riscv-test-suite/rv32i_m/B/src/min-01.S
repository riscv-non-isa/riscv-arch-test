
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.11.1
// timestamp : Sun Jan 14 18:03:15 2024 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /home/vedvyas/rvi-code-forks/riscv-ctg/sample_cgfs/dataset.cgf \
//                  --cgf /home/vedvyas/rvi-code-forks/riscv-ctg/sample_cgfs/rv32i_b.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the min instruction of the RISC-V RV32Zbb,RV32B extension for the min covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IZbb,RV32IB")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*B.*);def TEST_CASE_1=True;",min)

RVTEST_CASE(1,"//check ISA:=regex(.*I.*Zbb.*);def TEST_CASE_1=True;",min)

RVTEST_SIGBASE(x8,signature_x8_1)

inst_0:// rs1 == rs2 != rd, rs1==x16, rs2==x16, rd==x23, rs1_val != rs2_val, rs1_val < 0 and rs2_val < 0, rs2_val == -17, rs1_val == -32769
// opcode: min ; op1:x16; op2:x16; dest:x23; op1val:-0x8001;  op2val:-0x8001
TEST_RR_OP(min, x23, x16, x16, 0x00000000, -0x8001, -0x8001, x8, 0*XLEN/8, x9)

inst_1:// rs2 == rd != rs1, rs1==x1, rs2==x3, rd==x3, rs1_val < 0 and rs2_val > 0, rs1_val==-1717986919 and rs2_val==1431655764
// opcode: min ; op1:x1; op2:x3; dest:x3; op1val:-0x66666667;  op2val:0x55555554
TEST_RR_OP(min, x3, x1, x3, 0x00000000, -0x66666667, 0x55555554, x8, 1*XLEN/8, x9)

inst_2:// rs1 == rs2 == rd, rs1==x28, rs2==x28, rd==x28, rs1_val == (-2**(xlen-1)), rs1_val == -2147483648
// opcode: min ; op1:x28; op2:x28; dest:x28; op1val:-0x80000000;  op2val:-0x80000000
TEST_RR_OP(min, x28, x28, x28, 0x00000000, -0x80000000, -0x80000000, x8, 2*XLEN/8, x9)

inst_3:// rs1 == rd != rs2, rs1==x2, rs2==x5, rd==x2, rs1_val == (2**(xlen-1)-1), rs1_val > 0 and rs2_val > 0, rs1_val == 2147483647
// opcode: min ; op1:x2; op2:x5; dest:x2; op1val:0x7fffffff;  op2val:0x33333332
TEST_RR_OP(min, x2, x2, x5, 0x00000000, 0x7fffffff, 0x33333332, x8, 3*XLEN/8, x9)

inst_4:// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x29, rs2==x6, rd==x27, rs1_val == 0, rs2_val == 16384
// opcode: min ; op1:x29; op2:x6; dest:x27; op1val:0x0;  op2val:0x4000
TEST_RR_OP(min, x27, x29, x6, 0x00000000, 0x0, 0x4000, x8, 4*XLEN/8, x9)

inst_5:// rs1==x12, rs2==x17, rd==x22, rs2_val == -2, rs1_val == 131072, rs1_val > 0 and rs2_val < 0
// opcode: min ; op1:x12; op2:x17; dest:x22; op1val:0x20000;  op2val:-0x2
TEST_RR_OP(min, x22, x12, x17, 0x00000000, 0x20000, -0x2, x8, 5*XLEN/8, x9)

inst_6:// rs1==x21, rs2==x24, rd==x5, rs2_val == -3, rs1_val == 1431655765
// opcode: min ; op1:x21; op2:x24; dest:x5; op1val:0x55555555;  op2val:-0x3
TEST_RR_OP(min, x5, x21, x24, 0x00000000, 0x55555555, -0x3, x8, 6*XLEN/8, x9)

inst_7:// rs1==x27, rs2==x19, rd==x15, rs2_val == -5, rs1_val == -9
// opcode: min ; op1:x27; op2:x19; dest:x15; op1val:-0x9;  op2val:-0x5
TEST_RR_OP(min, x15, x27, x19, 0x00000000, -0x9, -0x5, x8, 7*XLEN/8, x9)

inst_8:// rs1==x10, rs2==x20, rd==x6, rs2_val == -9, rs1_val == -1073741825
// opcode: min ; op1:x10; op2:x20; dest:x6; op1val:-0x40000001;  op2val:-0x9
TEST_RR_OP(min, x6, x10, x20, 0x00000000, -0x40000001, -0x9, x8, 8*XLEN/8, x9)

inst_9:// rs1==x13, rs2==x4, rd==x26, rs2_val == -33, rs1_val == -1025
// opcode: min ; op1:x13; op2:x4; dest:x26; op1val:-0x401;  op2val:-0x21
TEST_RR_OP(min, x26, x13, x4, 0x00000000, -0x401, -0x21, x8, 9*XLEN/8, x9)

inst_10:// rs1==x6, rs2==x0, rd==x24, rs2_val == -65, rs1_val == 1
// opcode: min ; op1:x6; op2:x0; dest:x24; op1val:0x1;  op2val:0x0
TEST_RR_OP(min, x24, x6, x0, 0x00000000, 0x1, 0x0, x8, 10*XLEN/8, x9)

inst_11:// rs1==x26, rs2==x1, rd==x20, rs2_val == -129, 
// opcode: min ; op1:x26; op2:x1; dest:x20; op1val:0x55555555;  op2val:-0x81
TEST_RR_OP(min, x20, x26, x1, 0x00000000, 0x55555555, -0x81, x8, 11*XLEN/8, x9)

inst_12:// rs1==x20, rs2==x11, rd==x21, rs2_val == -257, rs1_val == -2049
// opcode: min ; op1:x20; op2:x11; dest:x21; op1val:-0x801;  op2val:-0x101
TEST_RR_OP(min, x21, x20, x11, 0x00000000, -0x801, -0x101, x8, 12*XLEN/8, x9)

inst_13:// rs1==x19, rs2==x2, rd==x7, rs2_val == -513, rs1_val == -524289
// opcode: min ; op1:x19; op2:x2; dest:x7; op1val:-0x80001;  op2val:-0x201
TEST_RR_OP(min, x7, x19, x2, 0x00000000, -0x80001, -0x201, x8, 13*XLEN/8, x9)

inst_14:// rs1==x3, rs2==x14, rd==x19, rs2_val == -1025, rs1_val == -536870913
// opcode: min ; op1:x3; op2:x14; dest:x19; op1val:-0x20000001;  op2val:-0x401
TEST_RR_OP(min, x19, x3, x14, 0x00000000, -0x20000001, -0x401, x8, 14*XLEN/8, x9)

inst_15:// rs1==x23, rs2==x29, rd==x13, rs2_val == -2049, rs1_val == 4194304
// opcode: min ; op1:x23; op2:x29; dest:x13; op1val:0x400000;  op2val:-0x801
TEST_RR_OP(min, x13, x23, x29, 0x00000000, 0x400000, -0x801, x8, 15*XLEN/8, x3)

inst_16:// rs1==x24, rs2==x26, rd==x25, rs2_val == -4097, rs1_val == -268435457
// opcode: min ; op1:x24; op2:x26; dest:x25; op1val:-0x10000001;  op2val:-0x1001
TEST_RR_OP(min, x25, x24, x26, 0x00000000, -0x10000001, -0x1001, x8, 16*XLEN/8, x3)
RVTEST_SIGBASE(x2,signature_x2_0)

inst_17:// rs1==x0, rs2==x30, rd==x29, rs2_val == -8193, rs1_val == 536870912
// opcode: min ; op1:x0; op2:x30; dest:x29; op1val:0x0;  op2val:-0x2001
TEST_RR_OP(min, x29, x0, x30, 0x00000000, 0x0, -0x2001, x2, 0*XLEN/8, x3)

inst_18:// rs1==x17, rs2==x22, rd==x12, rs2_val == -16385, 
// opcode: min ; op1:x17; op2:x22; dest:x12; op1val:0x66666667;  op2val:-0x4001
TEST_RR_OP(min, x12, x17, x22, 0x00000000, 0x66666667, -0x4001, x2, 1*XLEN/8, x3)

inst_19:// rs1==x8, rs2==x25, rd==x10, rs2_val == -32769, rs1_val == 8
// opcode: min ; op1:x8; op2:x25; dest:x10; op1val:0x8;  op2val:-0x8001
TEST_RR_OP(min, x10, x8, x25, 0x00000000, 0x8, -0x8001, x2, 2*XLEN/8, x3)

inst_20:// rs1==x18, rs2==x10, rd==x8, rs2_val == -65537, 
// opcode: min ; op1:x18; op2:x10; dest:x8; op1val:-0x401;  op2val:-0x10001
TEST_RR_OP(min, x8, x18, x10, 0x00000000, -0x401, -0x10001, x2, 3*XLEN/8, x3)

inst_21:// rs1==x9, rs2==x23, rd==x17, rs2_val == -131073, 
// opcode: min ; op1:x9; op2:x23; dest:x17; op1val:0x20000;  op2val:-0x20001
TEST_RR_OP(min, x17, x9, x23, 0x00000000, 0x20000, -0x20001, x2, 4*XLEN/8, x3)

inst_22:// rs1==x22, rs2==x13, rd==x18, rs2_val == -262145, rs1_val == -65537
// opcode: min ; op1:x22; op2:x13; dest:x18; op1val:-0x10001;  op2val:-0x40001
TEST_RR_OP(min, x18, x22, x13, 0x00000000, -0x10001, -0x40001, x2, 5*XLEN/8, x3)

inst_23:// rs1==x14, rs2==x12, rd==x16, rs2_val == -524289, 
// opcode: min ; op1:x14; op2:x12; dest:x16; op1val:0x55555554;  op2val:-0x80001
TEST_RR_OP(min, x16, x14, x12, 0x00000000, 0x55555554, -0x80001, x2, 6*XLEN/8, x3)

inst_24:// rs1==x30, rs2==x9, rd==x1, rs2_val == -1048577, 
// opcode: min ; op1:x30; op2:x9; dest:x1; op1val:0x5;  op2val:-0x100001
TEST_RR_OP(min, x1, x30, x9, 0x00000000, 0x5, -0x100001, x2, 7*XLEN/8, x3)

inst_25:// rs1==x5, rs2==x7, rd==x9, rs2_val == -2097153, rs1_val == 2048
// opcode: min ; op1:x5; op2:x7; dest:x9; op1val:0x800;  op2val:-0x200001
TEST_RR_OP(min, x9, x5, x7, 0x00000000, 0x800, -0x200001, x2, 8*XLEN/8, x3)

inst_26:// rs1==x7, rs2==x27, rd==x4, rs2_val == -4194305, 
// opcode: min ; op1:x7; op2:x27; dest:x4; op1val:0x8;  op2val:-0x400001
TEST_RR_OP(min, x4, x7, x27, 0x00000000, 0x8, -0x400001, x2, 9*XLEN/8, x3)

inst_27:// rs1==x15, rs2==x31, rd==x30, rs2_val == -8388609, rs1_val == -8193
// opcode: min ; op1:x15; op2:x31; dest:x30; op1val:-0x2001;  op2val:-0x800001
TEST_RR_OP(min, x30, x15, x31, 0x00000000, -0x2001, -0x800001, x2, 10*XLEN/8, x3)

inst_28:// rs1==x25, rs2==x8, rd==x0, rs2_val == -16777217, rs1_val == 64
// opcode: min ; op1:x25; op2:x8; dest:x0; op1val:0x40;  op2val:-0x1000001
TEST_RR_OP(min, x0, x25, x8, 0x00000000, 0x40, -0x1000001, x2, 11*XLEN/8, x3)

inst_29:// rs1==x31, rs2==x21, rd==x11, rs2_val == -33554433, rs1_val == -4194305
// opcode: min ; op1:x31; op2:x21; dest:x11; op1val:-0x400001;  op2val:-0x2000001
TEST_RR_OP(min, x11, x31, x21, 0x00000000, -0x400001, -0x2000001, x2, 12*XLEN/8, x3)

inst_30:// rs1==x11, rs2==x18, rd==x14, rs2_val == -67108865, 
// opcode: min ; op1:x11; op2:x18; dest:x14; op1val:-0x40000000;  op2val:-0x4000001
TEST_RR_OP(min, x14, x11, x18, 0x00000000, -0x40000000, -0x4000001, x2, 13*XLEN/8, x1)

inst_31:// rs1==x4, rs2==x15, rd==x31, rs2_val == -134217729, 
// opcode: min ; op1:x4; op2:x15; dest:x31; op1val:-0x1;  op2val:-0x8000001
TEST_RR_OP(min, x31, x4, x15, 0x00000000, -0x1, -0x8000001, x2, 14*XLEN/8, x1)

inst_32:// rs2_val == -268435457, rs1_val == 65536
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x10000;  op2val:-0x10000001
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x10000, -0x10000001, x2, 15*XLEN/8, x1)

inst_33:// rs2_val == -536870913, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:-0x8;  op2val:-0x20000001
TEST_RR_OP(min, x31, x30, x29, 0x00000000, -0x8, -0x20000001, x2, 16*XLEN/8, x1)

inst_34:// rs2_val == -1073741825, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:-0x400001;  op2val:-0x40000001
TEST_RR_OP(min, x31, x30, x29, 0x00000000, -0x400001, -0x40000001, x2, 17*XLEN/8, x1)

inst_35:// rs2_val == 2147483647, rs2_val == (2**(xlen-1)-1)
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x66666665;  op2val:0x7fffffff
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x66666665, 0x7fffffff, x2, 18*XLEN/8, x1)

inst_36:// rs1_val == -2, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:-0x2;  op2val:-0xa
TEST_RR_OP(min, x31, x30, x29, 0x00000000, -0x2, -0xa, x2, 19*XLEN/8, x1)

inst_37:// rs1_val == -3, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:-0x3;  op2val:-0x4000001
TEST_RR_OP(min, x31, x30, x29, 0x00000000, -0x3, -0x4000001, x2, 20*XLEN/8, x1)

inst_38:// rs1_val == -5, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:-0x5;  op2val:-0x40001
TEST_RR_OP(min, x31, x30, x29, 0x00000000, -0x5, -0x40001, x2, 21*XLEN/8, x1)

inst_39:// rs1_val == -17, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:-0x11;  op2val:-0x1000001
TEST_RR_OP(min, x31, x30, x29, 0x00000000, -0x11, -0x1000001, x2, 22*XLEN/8, x1)

inst_40:// rs1_val == -33, rs2_val == 536870912
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:-0x21;  op2val:0x20000000
TEST_RR_OP(min, x31, x30, x29, 0x00000000, -0x21, 0x20000000, x2, 23*XLEN/8, x1)

inst_41:// rs1_val == -65, rs2_val == 2048
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:-0x41;  op2val:0x800
TEST_RR_OP(min, x31, x30, x29, 0x00000000, -0x41, 0x800, x2, 24*XLEN/8, x1)

inst_42:// rs1_val == -129, rs2_val == 4
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:-0x81;  op2val:0x4
TEST_RR_OP(min, x31, x30, x29, 0x00000000, -0x81, 0x4, x2, 25*XLEN/8, x1)

inst_43:// rs1_val == -257, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:-0x101;  op2val:0x33333334
TEST_RR_OP(min, x31, x30, x29, 0x00000000, -0x101, 0x33333334, x2, 26*XLEN/8, x1)

inst_44:// rs1_val == -513, rs2_val == 1431655765
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:-0x201;  op2val:0x55555555
TEST_RR_OP(min, x31, x30, x29, 0x00000000, -0x201, 0x55555555, x2, 27*XLEN/8, x1)

inst_45:// rs1_val == -4097, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:-0x1001;  op2val:-0xa
TEST_RR_OP(min, x31, x30, x29, 0x00000000, -0x1001, -0xa, x2, 28*XLEN/8, x1)

inst_46:// rs1_val == -16385, rs2_val == 262144
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:-0x4001;  op2val:0x40000
TEST_RR_OP(min, x31, x30, x29, 0x00000000, -0x4001, 0x40000, x2, 29*XLEN/8, x1)

inst_47:// rs1_val == -131073, rs2_val == 1048576
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:-0x20001;  op2val:0x100000
TEST_RR_OP(min, x31, x30, x29, 0x00000000, -0x20001, 0x100000, x2, 30*XLEN/8, x1)

inst_48:// rs1_val == -262145, rs2_val == 16
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:-0x40001;  op2val:0x10
TEST_RR_OP(min, x31, x30, x29, 0x00000000, -0x40001, 0x10, x2, 31*XLEN/8, x1)

inst_49:// rs1_val == -1048577, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:-0x100001;  op2val:-0x2000001
TEST_RR_OP(min, x31, x30, x29, 0x00000000, -0x100001, -0x2000001, x2, 32*XLEN/8, x1)

inst_50:// rs1_val == -2097153, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:-0x200001;  op2val:0x6
TEST_RR_OP(min, x31, x30, x29, 0x00000000, -0x200001, 0x6, x2, 33*XLEN/8, x1)

inst_51:// rs1_val == -8388609, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:-0x800001;  op2val:0x33333332
TEST_RR_OP(min, x31, x30, x29, 0x00000000, -0x800001, 0x33333332, x2, 34*XLEN/8, x1)

inst_52:// rs1_val == -16777217, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:-0x1000001;  op2val:0x100000
TEST_RR_OP(min, x31, x30, x29, 0x00000000, -0x1000001, 0x100000, x2, 35*XLEN/8, x1)

inst_53:// rs1_val == -33554433, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:-0x2000001;  op2val:-0x55555557
TEST_RR_OP(min, x31, x30, x29, 0x00000000, -0x2000001, -0x55555557, x2, 36*XLEN/8, x1)

inst_54:// rs1_val == -67108865, rs2_val == 0
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:-0x4000001;  op2val:0x0
TEST_RR_OP(min, x31, x30, x29, 0x00000000, -0x4000001, 0x0, x2, 37*XLEN/8, x1)

inst_55:// rs1_val == -134217729, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:-0x8000001;  op2val:-0x20000001
TEST_RR_OP(min, x31, x30, x29, 0x00000000, -0x8000001, -0x20000001, x2, 38*XLEN/8, x1)

inst_56:// rs2_val == 1, rs1_val == 2
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x2;  op2val:0x1
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x2, 0x1, x2, 39*XLEN/8, x1)

inst_57:// rs2_val == 2, rs1_val == 16384
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x4000;  op2val:0x2
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x4000, 0x2, x2, 40*XLEN/8, x1)

inst_58:// rs2_val == 8, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:-0x66666666;  op2val:0x8
TEST_RR_OP(min, x31, x30, x29, 0x00000000, -0x66666666, 0x8, x2, 41*XLEN/8, x1)

inst_59:// rs2_val == 32, rs1_val == 512
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x200;  op2val:0x20
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x200, 0x20, x2, 42*XLEN/8, x1)

inst_60:// rs2_val == 64, rs1_val == 262144
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x40000;  op2val:0x40
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x40000, 0x40, x2, 43*XLEN/8, x1)

inst_61:// rs2_val == 128, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:-0x800001;  op2val:0x80
TEST_RR_OP(min, x31, x30, x29, 0x00000000, -0x800001, 0x80, x2, 44*XLEN/8, x1)

inst_62:// rs2_val == 256, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:-0x8001;  op2val:0x100
TEST_RR_OP(min, x31, x30, x29, 0x00000000, -0x8001, 0x100, x2, 45*XLEN/8, x1)

inst_63:// rs2_val == 512, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x33333332;  op2val:0x200
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x33333332, 0x200, x2, 46*XLEN/8, x1)

inst_64:// rs2_val == 1024, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:-0x2001;  op2val:0x400
TEST_RR_OP(min, x31, x30, x29, 0x00000000, -0x2001, 0x400, x2, 47*XLEN/8, x1)

inst_65:// rs2_val == 4096, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x200;  op2val:0x1000
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x200, 0x1000, x2, 48*XLEN/8, x1)

inst_66:// rs2_val == 8192, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x2;  op2val:0x2000
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x2, 0x2000, x2, 49*XLEN/8, x1)

inst_67:// rs2_val == 32768, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:-0x80000000;  op2val:0x8000
TEST_RR_OP(min, x31, x30, x29, 0x00000000, -0x80000000, 0x8000, x2, 50*XLEN/8, x1)

inst_68:// rs2_val == 65536, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x800;  op2val:0x10000
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x800, 0x10000, x2, 51*XLEN/8, x1)

inst_69:// rs2_val == 131072, rs1_val == 256
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x100;  op2val:0x20000
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x100, 0x20000, x2, 52*XLEN/8, x1)

inst_70:// rs2_val == 524288, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:-0x4;  op2val:0x80000
TEST_RR_OP(min, x31, x30, x29, 0x00000000, -0x4, 0x80000, x2, 53*XLEN/8, x1)

inst_71:// rs2_val == 2097152, rs1_val == 32
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x20;  op2val:0x200000
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x20, 0x200000, x2, 54*XLEN/8, x1)

inst_72:// rs2_val == 4194304, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:-0x33333334;  op2val:0x400000
TEST_RR_OP(min, x31, x30, x29, 0x00000000, -0x33333334, 0x400000, x2, 55*XLEN/8, x1)

inst_73:// rs2_val == 8388608, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:-0x11;  op2val:0x800000
TEST_RR_OP(min, x31, x30, x29, 0x00000000, -0x11, 0x800000, x2, 56*XLEN/8, x1)

inst_74:// rs2_val == 16777216, rs1_val == 16
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x10;  op2val:0x1000000
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x10, 0x1000000, x2, 57*XLEN/8, x1)

inst_75:// rs2_val == 33554432, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x7;  op2val:0x2000000
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x7, 0x2000000, x2, 58*XLEN/8, x1)

inst_76:// rs2_val == 67108864, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x7;  op2val:0x4000000
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x7, 0x4000000, x2, 59*XLEN/8, x1)

inst_77:// rs2_val == 134217728, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x7;  op2val:0x8000000
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x7, 0x8000000, x2, 60*XLEN/8, x1)

inst_78:// rs2_val == 268435456, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:-0x101;  op2val:0x10000000
TEST_RR_OP(min, x31, x30, x29, 0x00000000, -0x101, 0x10000000, x2, 61*XLEN/8, x1)

inst_79:// rs2_val == 1073741824, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:-0x66666666;  op2val:0x40000000
TEST_RR_OP(min, x31, x30, x29, 0x00000000, -0x66666666, 0x40000000, x2, 62*XLEN/8, x1)

inst_80:// rs2_val == -2147483648, rs1_val == 67108864, rs2_val == (-2**(xlen-1))
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x4000000;  op2val:-0x80000000
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x4000000, -0x80000000, x2, 63*XLEN/8, x1)

inst_81:// rs1_val == 4, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x4;  op2val:0x1
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x4, 0x1, x2, 64*XLEN/8, x1)

inst_82:// rs1_val == 128, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x80;  op2val:0x8000000
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x80, 0x8000000, x2, 65*XLEN/8, x1)

inst_83:// rs1_val == 1024, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x400;  op2val:-0x80001
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x400, -0x80001, x2, 66*XLEN/8, x1)

inst_84:// rs1_val == 4096, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x1000;  op2val:-0x5
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x1000, -0x5, x2, 67*XLEN/8, x1)

inst_85:// rs1_val == 8192, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x2000;  op2val:-0x40000001
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x2000, -0x40000001, x2, 68*XLEN/8, x1)

inst_86:// rs1_val == 32768, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x8000;  op2val:0x33333332
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x8000, 0x33333332, x2, 69*XLEN/8, x1)

inst_87:// rs1_val == 524288, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x80000;  op2val:0x800
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x80000, 0x800, x2, 70*XLEN/8, x1)

inst_88:// rs1_val == 1048576, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x100000;  op2val:-0x201
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x100000, -0x201, x2, 71*XLEN/8, x1)

inst_89:// rs1_val == 2097152, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x200000;  op2val:-0x5
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x200000, -0x5, x2, 72*XLEN/8, x1)

inst_90:// rs1_val == 8388608, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x800000;  op2val:0x66666666
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x800000, 0x66666666, x2, 73*XLEN/8, x1)

inst_91:// rs1_val == 16777216, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x1000000;  op2val:0x400000
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x1000000, 0x400000, x2, 74*XLEN/8, x1)

inst_92:// rs1_val == 33554432, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x2000000;  op2val:0x10000
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x2000000, 0x10000, x2, 75*XLEN/8, x1)

inst_93:// rs1_val == 134217728, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x8000000;  op2val:-0x1
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x8000000, -0x1, x2, 76*XLEN/8, x1)

inst_94:// rs1_val == 268435456, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x10000000;  op2val:-0x200001
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x10000000, -0x200001, x2, 77*XLEN/8, x1)

inst_95:// rs1_val == 1073741824, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x40000000;  op2val:-0x41
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x40000000, -0x41, x2, 78*XLEN/8, x1)

inst_96:// rs1_val==1431655765 and rs2_val==1431655765, rs1_val == rs2_val
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x55555555;  op2val:0x55555555
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x55555555, 0x55555555, x2, 79*XLEN/8, x1)

inst_97:// rs1_val==1431655765 and rs2_val==-1431655766, rs2_val == -1431655766
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x55555555;  op2val:-0x55555556
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x55555555, -0x55555556, x2, 80*XLEN/8, x1)

inst_98:// rs1_val==1431655765 and rs2_val==858993459, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x55555555;  op2val:0x33333333
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x55555555, 0x33333333, x2, 81*XLEN/8, x1)

inst_99:// rs1_val==1431655765 and rs2_val==-858993460, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x55555555;  op2val:-0x33333334
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x55555555, -0x33333334, x2, 82*XLEN/8, x1)

inst_100:// rs1_val==1431655765 and rs2_val==1717986918, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x55555555;  op2val:0x66666666
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x55555555, 0x66666666, x2, 83*XLEN/8, x1)

inst_101:// rs1_val==1431655765 and rs2_val==-1717986919, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x55555555;  op2val:-0x66666667
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x55555555, -0x66666667, x2, 84*XLEN/8, x1)

inst_102:// rs1_val==1431655765 and rs2_val==1431655764, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x55555555;  op2val:0x55555554
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x55555555, 0x55555554, x2, 85*XLEN/8, x1)

inst_103:// rs1_val==1431655765 and rs2_val==-1431655767, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x55555555;  op2val:-0x55555557
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x55555555, -0x55555557, x2, 86*XLEN/8, x1)

inst_104:// rs1_val==1431655765 and rs2_val==858993458, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x55555555;  op2val:0x33333332
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x55555555, 0x33333332, x2, 87*XLEN/8, x1)

inst_105:// rs1_val==1431655765 and rs2_val==-858993461, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x55555555;  op2val:-0x33333335
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x55555555, -0x33333335, x2, 88*XLEN/8, x1)

inst_106:// rs1_val==1431655765 and rs2_val==1717986917, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x55555555;  op2val:0x66666665
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x55555555, 0x66666665, x2, 89*XLEN/8, x1)

inst_107:// rs1_val==1431655765 and rs2_val==-1717986920, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x55555555;  op2val:-0x66666668
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x55555555, -0x66666668, x2, 90*XLEN/8, x1)

inst_108:// rs1_val==1431655765 and rs2_val==1431655766, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x55555555;  op2val:0x55555556
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x55555555, 0x55555556, x2, 91*XLEN/8, x1)

inst_109:// rs1_val==1431655765 and rs2_val==-1431655765, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x55555555;  op2val:-0x55555555
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x55555555, -0x55555555, x2, 92*XLEN/8, x1)

inst_110:// rs1_val==1431655765 and rs2_val==858993460, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x55555555;  op2val:0x33333334
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x55555555, 0x33333334, x2, 93*XLEN/8, x1)

inst_111:// rs1_val==1431655765 and rs2_val==-858993459, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x55555555;  op2val:-0x33333333
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x55555555, -0x33333333, x2, 94*XLEN/8, x1)

inst_112:// rs1_val==1431655765 and rs2_val==1717986919, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x55555555;  op2val:0x66666667
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x55555555, 0x66666667, x2, 95*XLEN/8, x1)

inst_113:// rs1_val==1431655765 and rs2_val==-1717986918, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x55555555;  op2val:-0x66666666
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x55555555, -0x66666666, x2, 96*XLEN/8, x1)

inst_114:// rs1_val==1431655765 and rs2_val==0, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x55555555;  op2val:0x0
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x55555555, 0x0, x2, 97*XLEN/8, x1)

inst_115:// rs1_val==1431655765 and rs2_val==1, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x55555555;  op2val:0x1
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x55555555, 0x1, x2, 98*XLEN/8, x1)

inst_116:// rs1_val==1431655765 and rs2_val==-1, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x55555555;  op2val:-0x1
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x55555555, -0x1, x2, 99*XLEN/8, x1)

inst_117:// rs1_val==-1431655766 and rs2_val==1431655765, rs1_val == -1431655766
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:-0x55555556;  op2val:0x55555555
TEST_RR_OP(min, x31, x30, x29, 0x00000000, -0x55555556, 0x55555555, x2, 100*XLEN/8, x1)

inst_118:// rs1_val==-1431655766 and rs2_val==-1431655766, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:-0x55555556;  op2val:-0x55555556
TEST_RR_OP(min, x31, x30, x29, 0x00000000, -0x55555556, -0x55555556, x2, 101*XLEN/8, x1)

inst_119:// rs1_val==-1431655766 and rs2_val==858993459, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:-0x55555556;  op2val:0x33333333
TEST_RR_OP(min, x31, x30, x29, 0x00000000, -0x55555556, 0x33333333, x2, 102*XLEN/8, x1)

inst_120:// rs1_val==-1431655766 and rs2_val==-858993460, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:-0x55555556;  op2val:-0x33333334
TEST_RR_OP(min, x31, x30, x29, 0x00000000, -0x55555556, -0x33333334, x2, 103*XLEN/8, x1)

inst_121:// rs1_val==-1431655766 and rs2_val==1717986918, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:-0x55555556;  op2val:0x66666666
TEST_RR_OP(min, x31, x30, x29, 0x00000000, -0x55555556, 0x66666666, x2, 104*XLEN/8, x1)

inst_122:// rs1_val==-1431655766 and rs2_val==-1717986919, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:-0x55555556;  op2val:-0x66666667
TEST_RR_OP(min, x31, x30, x29, 0x00000000, -0x55555556, -0x66666667, x2, 105*XLEN/8, x1)

inst_123:// rs1_val==-1431655766 and rs2_val==1431655764, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:-0x55555556;  op2val:0x55555554
TEST_RR_OP(min, x31, x30, x29, 0x00000000, -0x55555556, 0x55555554, x2, 106*XLEN/8, x1)

inst_124:// rs1_val==-1431655766 and rs2_val==-1431655767, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:-0x55555556;  op2val:-0x55555557
TEST_RR_OP(min, x31, x30, x29, 0x00000000, -0x55555556, -0x55555557, x2, 107*XLEN/8, x1)

inst_125:// rs1_val==-1431655766 and rs2_val==858993458, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:-0x55555556;  op2val:0x33333332
TEST_RR_OP(min, x31, x30, x29, 0x00000000, -0x55555556, 0x33333332, x2, 108*XLEN/8, x1)

inst_126:// rs1_val==-1431655766 and rs2_val==-858993461, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:-0x55555556;  op2val:-0x33333335
TEST_RR_OP(min, x31, x30, x29, 0x00000000, -0x55555556, -0x33333335, x2, 109*XLEN/8, x1)

inst_127:// rs1_val==-1431655766 and rs2_val==1717986917, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:-0x55555556;  op2val:0x66666665
TEST_RR_OP(min, x31, x30, x29, 0x00000000, -0x55555556, 0x66666665, x2, 110*XLEN/8, x1)

inst_128:// rs1_val==-1431655766 and rs2_val==-1717986920, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:-0x55555556;  op2val:-0x66666668
TEST_RR_OP(min, x31, x30, x29, 0x00000000, -0x55555556, -0x66666668, x2, 111*XLEN/8, x1)

inst_129:// rs1_val==-1431655766 and rs2_val==1431655766, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:-0x55555556;  op2val:0x55555556
TEST_RR_OP(min, x31, x30, x29, 0x00000000, -0x55555556, 0x55555556, x2, 112*XLEN/8, x1)

inst_130:// rs1_val==-1431655766 and rs2_val==-1431655765, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:-0x55555556;  op2val:-0x55555555
TEST_RR_OP(min, x31, x30, x29, 0x00000000, -0x55555556, -0x55555555, x2, 113*XLEN/8, x1)

inst_131:// rs1_val==-1431655766 and rs2_val==858993460, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:-0x55555556;  op2val:0x33333334
TEST_RR_OP(min, x31, x30, x29, 0x00000000, -0x55555556, 0x33333334, x2, 114*XLEN/8, x1)

inst_132:// rs1_val==-1431655766 and rs2_val==-858993459, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:-0x55555556;  op2val:-0x33333333
TEST_RR_OP(min, x31, x30, x29, 0x00000000, -0x55555556, -0x33333333, x2, 115*XLEN/8, x1)

inst_133:// rs1_val==-1431655766 and rs2_val==1717986919, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:-0x55555556;  op2val:0x66666667
TEST_RR_OP(min, x31, x30, x29, 0x00000000, -0x55555556, 0x66666667, x2, 116*XLEN/8, x1)

inst_134:// rs1_val==-1431655766 and rs2_val==-1717986918, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:-0x55555556;  op2val:-0x66666666
TEST_RR_OP(min, x31, x30, x29, 0x00000000, -0x55555556, -0x66666666, x2, 117*XLEN/8, x1)

inst_135:// rs1_val==-1431655766 and rs2_val==0, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:-0x55555556;  op2val:0x0
TEST_RR_OP(min, x31, x30, x29, 0x00000000, -0x55555556, 0x0, x2, 118*XLEN/8, x1)

inst_136:// rs1_val==-1431655766 and rs2_val==1, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:-0x55555556;  op2val:0x1
TEST_RR_OP(min, x31, x30, x29, 0x00000000, -0x55555556, 0x1, x2, 119*XLEN/8, x1)

inst_137:// rs1_val==-1431655766 and rs2_val==-1, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:-0x55555556;  op2val:-0x1
TEST_RR_OP(min, x31, x30, x29, 0x00000000, -0x55555556, -0x1, x2, 120*XLEN/8, x1)

inst_138:// rs1_val==858993459 and rs2_val==1431655765, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x33333333;  op2val:0x55555555
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x33333333, 0x55555555, x2, 121*XLEN/8, x1)

inst_139:// rs1_val==858993459 and rs2_val==-1431655766, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x33333333;  op2val:-0x55555556
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x33333333, -0x55555556, x2, 122*XLEN/8, x1)

inst_140:// rs1_val==858993459 and rs2_val==858993459, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x33333333;  op2val:0x33333333
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x33333333, 0x33333333, x2, 123*XLEN/8, x1)

inst_141:// rs1_val==858993459 and rs2_val==-858993460, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x33333333;  op2val:-0x33333334
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x33333333, -0x33333334, x2, 124*XLEN/8, x1)

inst_142:// rs1_val==858993459 and rs2_val==1717986918, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x33333333;  op2val:0x66666666
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x33333333, 0x66666666, x2, 125*XLEN/8, x1)

inst_143:// rs1_val==858993459 and rs2_val==-1717986919, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x33333333;  op2val:-0x66666667
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x33333333, -0x66666667, x2, 126*XLEN/8, x1)

inst_144:// rs1_val==858993459 and rs2_val==1431655764, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x33333333;  op2val:0x55555554
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x33333333, 0x55555554, x2, 127*XLEN/8, x1)

inst_145:// rs1_val==858993459 and rs2_val==-1431655767, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x33333333;  op2val:-0x55555557
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x33333333, -0x55555557, x2, 128*XLEN/8, x1)

inst_146:// rs1_val==858993459 and rs2_val==858993458, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x33333333;  op2val:0x33333332
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x33333333, 0x33333332, x2, 129*XLEN/8, x1)

inst_147:// rs1_val==858993459 and rs2_val==-858993461, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x33333333;  op2val:-0x33333335
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x33333333, -0x33333335, x2, 130*XLEN/8, x1)

inst_148:// rs1_val==858993459 and rs2_val==1717986917, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x33333333;  op2val:0x66666665
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x33333333, 0x66666665, x2, 131*XLEN/8, x1)

inst_149:// rs1_val==858993459 and rs2_val==-1717986920, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x33333333;  op2val:-0x66666668
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x33333333, -0x66666668, x2, 132*XLEN/8, x1)

inst_150:// rs1_val==858993459 and rs2_val==1431655766, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x33333333;  op2val:0x55555556
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x33333333, 0x55555556, x2, 133*XLEN/8, x1)

inst_151:// rs1_val==858993459 and rs2_val==-1431655765, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x33333333;  op2val:-0x55555555
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x33333333, -0x55555555, x2, 134*XLEN/8, x1)

inst_152:// rs1_val==858993459 and rs2_val==858993460, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x33333333;  op2val:0x33333334
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x33333333, 0x33333334, x2, 135*XLEN/8, x1)

inst_153:// rs1_val==858993459 and rs2_val==-858993459, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x33333333;  op2val:-0x33333333
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x33333333, -0x33333333, x2, 136*XLEN/8, x1)

inst_154:// rs1_val==858993459 and rs2_val==1717986919, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x33333333;  op2val:0x66666667
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x33333333, 0x66666667, x2, 137*XLEN/8, x1)

inst_155:// rs1_val==858993459 and rs2_val==-1717986918, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x33333333;  op2val:-0x66666666
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x33333333, -0x66666666, x2, 138*XLEN/8, x1)

inst_156:// rs1_val==858993459 and rs2_val==0, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x33333333;  op2val:0x0
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x33333333, 0x0, x2, 139*XLEN/8, x1)

inst_157:// rs1_val==858993459 and rs2_val==1, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x33333333;  op2val:0x1
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x33333333, 0x1, x2, 140*XLEN/8, x1)

inst_158:// rs1_val==858993459 and rs2_val==-1, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x33333333;  op2val:-0x1
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x33333333, -0x1, x2, 141*XLEN/8, x1)

inst_159:// rs1_val==-858993460 and rs2_val==1431655765, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:-0x33333334;  op2val:0x55555555
TEST_RR_OP(min, x31, x30, x29, 0x00000000, -0x33333334, 0x55555555, x2, 142*XLEN/8, x1)

inst_160:// rs1_val==-858993460 and rs2_val==-1431655766, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:-0x33333334;  op2val:-0x55555556
TEST_RR_OP(min, x31, x30, x29, 0x00000000, -0x33333334, -0x55555556, x2, 143*XLEN/8, x1)

inst_161:// rs1_val==-858993460 and rs2_val==858993459, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:-0x33333334;  op2val:0x33333333
TEST_RR_OP(min, x31, x30, x29, 0x00000000, -0x33333334, 0x33333333, x2, 144*XLEN/8, x1)

inst_162:// rs1_val==-858993460 and rs2_val==-858993460, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:-0x33333334;  op2val:-0x33333334
TEST_RR_OP(min, x31, x30, x29, 0x00000000, -0x33333334, -0x33333334, x2, 145*XLEN/8, x1)

inst_163:// rs1_val==-858993460 and rs2_val==1717986918, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:-0x33333334;  op2val:0x66666666
TEST_RR_OP(min, x31, x30, x29, 0x00000000, -0x33333334, 0x66666666, x2, 146*XLEN/8, x1)

inst_164:// rs1_val==-858993460 and rs2_val==-1717986919, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:-0x33333334;  op2val:-0x66666667
TEST_RR_OP(min, x31, x30, x29, 0x00000000, -0x33333334, -0x66666667, x2, 147*XLEN/8, x1)

inst_165:// rs1_val==-858993460 and rs2_val==1431655764, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:-0x33333334;  op2val:0x55555554
TEST_RR_OP(min, x31, x30, x29, 0x00000000, -0x33333334, 0x55555554, x2, 148*XLEN/8, x1)

inst_166:// rs1_val==-858993460 and rs2_val==-1431655767, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:-0x33333334;  op2val:-0x55555557
TEST_RR_OP(min, x31, x30, x29, 0x00000000, -0x33333334, -0x55555557, x2, 149*XLEN/8, x1)

inst_167:// rs1_val==-858993460 and rs2_val==858993458, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:-0x33333334;  op2val:0x33333332
TEST_RR_OP(min, x31, x30, x29, 0x00000000, -0x33333334, 0x33333332, x2, 150*XLEN/8, x1)

inst_168:// rs1_val==-858993460 and rs2_val==-858993461, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:-0x33333334;  op2val:-0x33333335
TEST_RR_OP(min, x31, x30, x29, 0x00000000, -0x33333334, -0x33333335, x2, 151*XLEN/8, x1)

inst_169:// rs1_val==-858993460 and rs2_val==1717986917, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:-0x33333334;  op2val:0x66666665
TEST_RR_OP(min, x31, x30, x29, 0x00000000, -0x33333334, 0x66666665, x2, 152*XLEN/8, x1)

inst_170:// rs1_val==-858993460 and rs2_val==-1717986920, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:-0x33333334;  op2val:-0x66666668
TEST_RR_OP(min, x31, x30, x29, 0x00000000, -0x33333334, -0x66666668, x2, 153*XLEN/8, x1)

inst_171:// rs1_val==-858993460 and rs2_val==1431655766, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:-0x33333334;  op2val:0x55555556
TEST_RR_OP(min, x31, x30, x29, 0x00000000, -0x33333334, 0x55555556, x2, 154*XLEN/8, x1)

inst_172:// rs1_val==-858993460 and rs2_val==-1431655765, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:-0x33333334;  op2val:-0x55555555
TEST_RR_OP(min, x31, x30, x29, 0x00000000, -0x33333334, -0x55555555, x2, 155*XLEN/8, x1)

inst_173:// rs1_val==-858993460 and rs2_val==858993460, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:-0x33333334;  op2val:0x33333334
TEST_RR_OP(min, x31, x30, x29, 0x00000000, -0x33333334, 0x33333334, x2, 156*XLEN/8, x1)

inst_174:// rs1_val==-858993460 and rs2_val==-858993459, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:-0x33333334;  op2val:-0x33333333
TEST_RR_OP(min, x31, x30, x29, 0x00000000, -0x33333334, -0x33333333, x2, 157*XLEN/8, x1)

inst_175:// rs1_val==-858993460 and rs2_val==1717986919, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:-0x33333334;  op2val:0x66666667
TEST_RR_OP(min, x31, x30, x29, 0x00000000, -0x33333334, 0x66666667, x2, 158*XLEN/8, x1)

inst_176:// rs1_val==-858993460 and rs2_val==-1717986918, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:-0x33333334;  op2val:-0x66666666
TEST_RR_OP(min, x31, x30, x29, 0x00000000, -0x33333334, -0x66666666, x2, 159*XLEN/8, x1)

inst_177:// rs1_val==-858993460 and rs2_val==0, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:-0x33333334;  op2val:0x0
TEST_RR_OP(min, x31, x30, x29, 0x00000000, -0x33333334, 0x0, x2, 160*XLEN/8, x1)

inst_178:// rs1_val==-858993460 and rs2_val==1, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:-0x33333334;  op2val:0x1
TEST_RR_OP(min, x31, x30, x29, 0x00000000, -0x33333334, 0x1, x2, 161*XLEN/8, x1)

inst_179:// rs1_val==-858993460 and rs2_val==-1, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:-0x33333334;  op2val:-0x1
TEST_RR_OP(min, x31, x30, x29, 0x00000000, -0x33333334, -0x1, x2, 162*XLEN/8, x1)

inst_180:// rs1_val==1717986918 and rs2_val==1431655765, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x66666666;  op2val:0x55555555
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x66666666, 0x55555555, x2, 163*XLEN/8, x1)

inst_181:// rs1_val==1717986918 and rs2_val==-1431655766, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x66666666;  op2val:-0x55555556
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x66666666, -0x55555556, x2, 164*XLEN/8, x1)

inst_182:// rs1_val==1717986918 and rs2_val==858993459, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x66666666;  op2val:0x33333333
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x66666666, 0x33333333, x2, 165*XLEN/8, x1)

inst_183:// rs1_val==1717986918 and rs2_val==-858993460, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x66666666;  op2val:-0x33333334
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x66666666, -0x33333334, x2, 166*XLEN/8, x1)

inst_184:// rs1_val==1717986918 and rs2_val==1717986918, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x66666666;  op2val:0x66666666
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x66666666, 0x66666666, x2, 167*XLEN/8, x1)

inst_185:// rs1_val==1717986918 and rs2_val==-1717986919, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x66666666;  op2val:-0x66666667
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x66666666, -0x66666667, x2, 168*XLEN/8, x1)

inst_186:// rs1_val==1717986918 and rs2_val==1431655764, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x66666666;  op2val:0x55555554
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x66666666, 0x55555554, x2, 169*XLEN/8, x1)

inst_187:// rs1_val==1717986918 and rs2_val==-1431655767, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x66666666;  op2val:-0x55555557
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x66666666, -0x55555557, x2, 170*XLEN/8, x1)

inst_188:// rs1_val==1717986918 and rs2_val==858993458, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x66666666;  op2val:0x33333332
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x66666666, 0x33333332, x2, 171*XLEN/8, x1)

inst_189:// rs1_val==1717986918 and rs2_val==-858993461, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x66666666;  op2val:-0x33333335
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x66666666, -0x33333335, x2, 172*XLEN/8, x1)

inst_190:// rs1_val==1717986918 and rs2_val==1717986917, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x66666666;  op2val:0x66666665
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x66666666, 0x66666665, x2, 173*XLEN/8, x1)

inst_191:// rs1_val==1717986918 and rs2_val==-1717986920, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x66666666;  op2val:-0x66666668
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x66666666, -0x66666668, x2, 174*XLEN/8, x1)

inst_192:// rs1_val==1717986918 and rs2_val==1431655766, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x66666666;  op2val:0x55555556
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x66666666, 0x55555556, x2, 175*XLEN/8, x1)

inst_193:// rs1_val==1717986918 and rs2_val==-1431655765, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x66666666;  op2val:-0x55555555
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x66666666, -0x55555555, x2, 176*XLEN/8, x1)

inst_194:// rs1_val==1717986918 and rs2_val==858993460, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x66666666;  op2val:0x33333334
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x66666666, 0x33333334, x2, 177*XLEN/8, x1)

inst_195:// rs1_val==1717986918 and rs2_val==-858993459, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x66666666;  op2val:-0x33333333
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x66666666, -0x33333333, x2, 178*XLEN/8, x1)

inst_196:// rs1_val==1717986918 and rs2_val==1717986919, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x66666666;  op2val:0x66666667
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x66666666, 0x66666667, x2, 179*XLEN/8, x1)

inst_197:// rs1_val==1717986918 and rs2_val==-1717986918, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x66666666;  op2val:-0x66666666
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x66666666, -0x66666666, x2, 180*XLEN/8, x1)

inst_198:// rs1_val==1717986918 and rs2_val==0, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x66666666;  op2val:0x0
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x66666666, 0x0, x2, 181*XLEN/8, x1)

inst_199:// rs1_val==1717986918 and rs2_val==1, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x66666666;  op2val:0x1
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x66666666, 0x1, x2, 182*XLEN/8, x1)

inst_200:// rs1_val==1717986918 and rs2_val==-1, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x66666666;  op2val:-0x1
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x66666666, -0x1, x2, 183*XLEN/8, x1)

inst_201:// rs1_val==-1717986919 and rs2_val==1431655765, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:-0x66666667;  op2val:0x55555555
TEST_RR_OP(min, x31, x30, x29, 0x00000000, -0x66666667, 0x55555555, x2, 184*XLEN/8, x1)

inst_202:// rs1_val==-1717986919 and rs2_val==-1431655766, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:-0x66666667;  op2val:-0x55555556
TEST_RR_OP(min, x31, x30, x29, 0x00000000, -0x66666667, -0x55555556, x2, 185*XLEN/8, x1)

inst_203:// rs1_val==-1717986919 and rs2_val==858993459, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:-0x66666667;  op2val:0x33333333
TEST_RR_OP(min, x31, x30, x29, 0x00000000, -0x66666667, 0x33333333, x2, 186*XLEN/8, x1)

inst_204:// rs1_val==-1717986919 and rs2_val==-858993460, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:-0x66666667;  op2val:-0x33333334
TEST_RR_OP(min, x31, x30, x29, 0x00000000, -0x66666667, -0x33333334, x2, 187*XLEN/8, x1)

inst_205:// rs1_val==-1717986919 and rs2_val==1717986918, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:-0x66666667;  op2val:0x66666666
TEST_RR_OP(min, x31, x30, x29, 0x00000000, -0x66666667, 0x66666666, x2, 188*XLEN/8, x1)

inst_206:// rs1_val==-1717986919 and rs2_val==-1717986919, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:-0x66666667;  op2val:-0x66666667
TEST_RR_OP(min, x31, x30, x29, 0x00000000, -0x66666667, -0x66666667, x2, 189*XLEN/8, x1)

inst_207:// rs1_val==-1717986919 and rs2_val==-1431655767, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:-0x66666667;  op2val:-0x55555557
TEST_RR_OP(min, x31, x30, x29, 0x00000000, -0x66666667, -0x55555557, x2, 190*XLEN/8, x1)

inst_208:// rs1_val==-1717986919 and rs2_val==858993458, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:-0x66666667;  op2val:0x33333332
TEST_RR_OP(min, x31, x30, x29, 0x00000000, -0x66666667, 0x33333332, x2, 191*XLEN/8, x1)

inst_209:// rs1_val==-1717986919 and rs2_val==-858993461, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:-0x66666667;  op2val:-0x33333335
TEST_RR_OP(min, x31, x30, x29, 0x00000000, -0x66666667, -0x33333335, x2, 192*XLEN/8, x1)

inst_210:// rs1_val==-1717986919 and rs2_val==1717986917, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:-0x66666667;  op2val:0x66666665
TEST_RR_OP(min, x31, x30, x29, 0x00000000, -0x66666667, 0x66666665, x2, 193*XLEN/8, x1)

inst_211:// rs1_val==-1717986919 and rs2_val==-1717986920, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:-0x66666667;  op2val:-0x66666668
TEST_RR_OP(min, x31, x30, x29, 0x00000000, -0x66666667, -0x66666668, x2, 194*XLEN/8, x1)

inst_212:// rs1_val==-1717986919 and rs2_val==1431655766, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:-0x66666667;  op2val:0x55555556
TEST_RR_OP(min, x31, x30, x29, 0x00000000, -0x66666667, 0x55555556, x2, 195*XLEN/8, x1)

inst_213:// rs1_val==-1717986919 and rs2_val==-1431655765, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:-0x66666667;  op2val:-0x55555555
TEST_RR_OP(min, x31, x30, x29, 0x00000000, -0x66666667, -0x55555555, x2, 196*XLEN/8, x1)

inst_214:// rs1_val==-1717986919 and rs2_val==858993460, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:-0x66666667;  op2val:0x33333334
TEST_RR_OP(min, x31, x30, x29, 0x00000000, -0x66666667, 0x33333334, x2, 197*XLEN/8, x1)

inst_215:// rs1_val==-1717986919 and rs2_val==-858993459, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:-0x66666667;  op2val:-0x33333333
TEST_RR_OP(min, x31, x30, x29, 0x00000000, -0x66666667, -0x33333333, x2, 198*XLEN/8, x1)

inst_216:// rs1_val==-1717986919 and rs2_val==1717986919, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:-0x66666667;  op2val:0x66666667
TEST_RR_OP(min, x31, x30, x29, 0x00000000, -0x66666667, 0x66666667, x2, 199*XLEN/8, x1)

inst_217:// rs1_val==-1717986919 and rs2_val==-1717986918, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:-0x66666667;  op2val:-0x66666666
TEST_RR_OP(min, x31, x30, x29, 0x00000000, -0x66666667, -0x66666666, x2, 200*XLEN/8, x1)

inst_218:// rs1_val==-1717986919 and rs2_val==0, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:-0x66666667;  op2val:0x0
TEST_RR_OP(min, x31, x30, x29, 0x00000000, -0x66666667, 0x0, x2, 201*XLEN/8, x1)

inst_219:// rs1_val==-1717986919 and rs2_val==1, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:-0x66666667;  op2val:0x1
TEST_RR_OP(min, x31, x30, x29, 0x00000000, -0x66666667, 0x1, x2, 202*XLEN/8, x1)

inst_220:// rs1_val==-1717986919 and rs2_val==-1, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:-0x66666667;  op2val:-0x1
TEST_RR_OP(min, x31, x30, x29, 0x00000000, -0x66666667, -0x1, x2, 203*XLEN/8, x1)

inst_221:// rs1_val==1431655764 and rs2_val==1431655765, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x55555554;  op2val:0x55555555
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x55555554, 0x55555555, x2, 204*XLEN/8, x1)

inst_222:// rs1_val==1431655764 and rs2_val==-1431655766, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x55555554;  op2val:-0x55555556
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x55555554, -0x55555556, x2, 205*XLEN/8, x1)

inst_223:// rs1_val==1431655764 and rs2_val==858993459, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x55555554;  op2val:0x33333333
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x55555554, 0x33333333, x2, 206*XLEN/8, x1)

inst_224:// rs1_val==1431655764 and rs2_val==-858993460, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x55555554;  op2val:-0x33333334
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x55555554, -0x33333334, x2, 207*XLEN/8, x1)

inst_225:// rs1_val==1431655764 and rs2_val==1717986918, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x55555554;  op2val:0x66666666
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x55555554, 0x66666666, x2, 208*XLEN/8, x1)

inst_226:// rs1_val==1431655764 and rs2_val==-1717986919, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x55555554;  op2val:-0x66666667
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x55555554, -0x66666667, x2, 209*XLEN/8, x1)

inst_227:// rs1_val==1431655764 and rs2_val==1431655764, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x55555554;  op2val:0x55555554
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x55555554, 0x55555554, x2, 210*XLEN/8, x1)

inst_228:// rs1_val==1431655764 and rs2_val==-1431655767, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x55555554;  op2val:-0x55555557
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x55555554, -0x55555557, x2, 211*XLEN/8, x1)

inst_229:// rs1_val==1431655764 and rs2_val==858993458, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x55555554;  op2val:0x33333332
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x55555554, 0x33333332, x2, 212*XLEN/8, x1)

inst_230:// rs1_val==1431655764 and rs2_val==-858993461, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x55555554;  op2val:-0x33333335
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x55555554, -0x33333335, x2, 213*XLEN/8, x1)

inst_231:// rs1_val==1431655764 and rs2_val==1717986917, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x55555554;  op2val:0x66666665
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x55555554, 0x66666665, x2, 214*XLEN/8, x1)

inst_232:// rs1_val==1431655764 and rs2_val==-1717986920, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x55555554;  op2val:-0x66666668
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x55555554, -0x66666668, x2, 215*XLEN/8, x1)

inst_233:// rs1_val==1431655764 and rs2_val==1431655766, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x55555554;  op2val:0x55555556
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x55555554, 0x55555556, x2, 216*XLEN/8, x1)

inst_234:// rs1_val==1431655764 and rs2_val==-1431655765, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x55555554;  op2val:-0x55555555
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x55555554, -0x55555555, x2, 217*XLEN/8, x1)

inst_235:// rs1_val==1431655764 and rs2_val==858993460, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x55555554;  op2val:0x33333334
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x55555554, 0x33333334, x2, 218*XLEN/8, x1)

inst_236:// rs1_val==1431655764 and rs2_val==-858993459, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x55555554;  op2val:-0x33333333
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x55555554, -0x33333333, x2, 219*XLEN/8, x1)

inst_237:// rs1_val==1431655764 and rs2_val==1717986919, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x55555554;  op2val:0x66666667
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x55555554, 0x66666667, x2, 220*XLEN/8, x1)

inst_238:// rs1_val==1431655764 and rs2_val==-1717986918, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x55555554;  op2val:-0x66666666
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x55555554, -0x66666666, x2, 221*XLEN/8, x1)

inst_239:// rs1_val==1431655764 and rs2_val==0, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x55555554;  op2val:0x0
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x55555554, 0x0, x2, 222*XLEN/8, x1)

inst_240:// rs1_val==1431655764 and rs2_val==1, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x55555554;  op2val:0x1
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x55555554, 0x1, x2, 223*XLEN/8, x1)

inst_241:// rs1_val==1431655764 and rs2_val==-1, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x55555554;  op2val:-0x1
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x55555554, -0x1, x2, 224*XLEN/8, x1)

inst_242:// rs1_val==-1431655767 and rs2_val==1431655765, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:-0x55555557;  op2val:0x55555555
TEST_RR_OP(min, x31, x30, x29, 0x00000000, -0x55555557, 0x55555555, x2, 225*XLEN/8, x1)

inst_243:// rs1_val==-1431655767 and rs2_val==-1431655766, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:-0x55555557;  op2val:-0x55555556
TEST_RR_OP(min, x31, x30, x29, 0x00000000, -0x55555557, -0x55555556, x2, 226*XLEN/8, x1)

inst_244:// rs1_val==-1431655767 and rs2_val==858993459, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:-0x55555557;  op2val:0x33333333
TEST_RR_OP(min, x31, x30, x29, 0x00000000, -0x55555557, 0x33333333, x2, 227*XLEN/8, x1)

inst_245:// rs1_val==-1431655767 and rs2_val==-858993460, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:-0x55555557;  op2val:-0x33333334
TEST_RR_OP(min, x31, x30, x29, 0x00000000, -0x55555557, -0x33333334, x2, 228*XLEN/8, x1)

inst_246:// rs1_val==-1431655767 and rs2_val==1717986918, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:-0x55555557;  op2val:0x66666666
TEST_RR_OP(min, x31, x30, x29, 0x00000000, -0x55555557, 0x66666666, x2, 229*XLEN/8, x1)

inst_247:// rs1_val==-1431655767 and rs2_val==-1717986919, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:-0x55555557;  op2val:-0x66666667
TEST_RR_OP(min, x31, x30, x29, 0x00000000, -0x55555557, -0x66666667, x2, 230*XLEN/8, x1)

inst_248:// rs1_val==-1431655767 and rs2_val==1431655764, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:-0x55555557;  op2val:0x55555554
TEST_RR_OP(min, x31, x30, x29, 0x00000000, -0x55555557, 0x55555554, x2, 231*XLEN/8, x1)

inst_249:// rs1_val==-1431655767 and rs2_val==-1431655767, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:-0x55555557;  op2val:-0x55555557
TEST_RR_OP(min, x31, x30, x29, 0x00000000, -0x55555557, -0x55555557, x2, 232*XLEN/8, x1)

inst_250:// rs1_val==-1431655767 and rs2_val==858993458, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:-0x55555557;  op2val:0x33333332
TEST_RR_OP(min, x31, x30, x29, 0x00000000, -0x55555557, 0x33333332, x2, 233*XLEN/8, x1)

inst_251:// rs1_val==-1431655767 and rs2_val==-858993461, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:-0x55555557;  op2val:-0x33333335
TEST_RR_OP(min, x31, x30, x29, 0x00000000, -0x55555557, -0x33333335, x2, 234*XLEN/8, x1)

inst_252:// rs1_val==-1431655767 and rs2_val==1717986917, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:-0x55555557;  op2val:0x66666665
TEST_RR_OP(min, x31, x30, x29, 0x00000000, -0x55555557, 0x66666665, x2, 235*XLEN/8, x1)

inst_253:// rs1_val==-1431655767 and rs2_val==-1717986920, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:-0x55555557;  op2val:-0x66666668
TEST_RR_OP(min, x31, x30, x29, 0x00000000, -0x55555557, -0x66666668, x2, 236*XLEN/8, x1)

inst_254:// rs1_val==-1431655767 and rs2_val==1431655766, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:-0x55555557;  op2val:0x55555556
TEST_RR_OP(min, x31, x30, x29, 0x00000000, -0x55555557, 0x55555556, x2, 237*XLEN/8, x1)

inst_255:// rs1_val==-1431655767 and rs2_val==-1431655765, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:-0x55555557;  op2val:-0x55555555
TEST_RR_OP(min, x31, x30, x29, 0x00000000, -0x55555557, -0x55555555, x2, 238*XLEN/8, x1)

inst_256:// rs1_val==-1431655767 and rs2_val==858993460, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:-0x55555557;  op2val:0x33333334
TEST_RR_OP(min, x31, x30, x29, 0x00000000, -0x55555557, 0x33333334, x2, 239*XLEN/8, x1)

inst_257:// rs1_val==-1431655767 and rs2_val==-858993459, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:-0x55555557;  op2val:-0x33333333
TEST_RR_OP(min, x31, x30, x29, 0x00000000, -0x55555557, -0x33333333, x2, 240*XLEN/8, x1)

inst_258:// rs1_val==-1431655767 and rs2_val==1717986919, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:-0x55555557;  op2val:0x66666667
TEST_RR_OP(min, x31, x30, x29, 0x00000000, -0x55555557, 0x66666667, x2, 241*XLEN/8, x1)

inst_259:// rs1_val==-1431655767 and rs2_val==-1717986918, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:-0x55555557;  op2val:-0x66666666
TEST_RR_OP(min, x31, x30, x29, 0x00000000, -0x55555557, -0x66666666, x2, 242*XLEN/8, x1)

inst_260:// rs1_val==-1431655767 and rs2_val==0, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:-0x55555557;  op2val:0x0
TEST_RR_OP(min, x31, x30, x29, 0x00000000, -0x55555557, 0x0, x2, 243*XLEN/8, x1)

inst_261:// rs1_val==-1431655767 and rs2_val==1, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:-0x55555557;  op2val:0x1
TEST_RR_OP(min, x31, x30, x29, 0x00000000, -0x55555557, 0x1, x2, 244*XLEN/8, x1)

inst_262:// rs1_val==-1431655767 and rs2_val==-1, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:-0x55555557;  op2val:-0x1
TEST_RR_OP(min, x31, x30, x29, 0x00000000, -0x55555557, -0x1, x2, 245*XLEN/8, x1)

inst_263:// rs1_val==858993458 and rs2_val==1431655765, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x33333332;  op2val:0x55555555
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x33333332, 0x55555555, x2, 246*XLEN/8, x1)

inst_264:// rs1_val==858993458 and rs2_val==-1431655766, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x33333332;  op2val:-0x55555556
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x33333332, -0x55555556, x2, 247*XLEN/8, x1)

inst_265:// rs1_val==858993458 and rs2_val==858993459, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x33333332;  op2val:0x33333333
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x33333332, 0x33333333, x2, 248*XLEN/8, x1)

inst_266:// rs1_val==858993458 and rs2_val==-858993460, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x33333332;  op2val:-0x33333334
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x33333332, -0x33333334, x2, 249*XLEN/8, x1)

inst_267:// rs1_val==858993458 and rs2_val==1717986918, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x33333332;  op2val:0x66666666
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x33333332, 0x66666666, x2, 250*XLEN/8, x1)

inst_268:// rs1_val==858993458 and rs2_val==-1717986919, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x33333332;  op2val:-0x66666667
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x33333332, -0x66666667, x2, 251*XLEN/8, x1)

inst_269:// rs1_val==858993458 and rs2_val==1431655764, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x33333332;  op2val:0x55555554
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x33333332, 0x55555554, x2, 252*XLEN/8, x1)

inst_270:// rs1_val==858993458 and rs2_val==-1431655767, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x33333332;  op2val:-0x55555557
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x33333332, -0x55555557, x2, 253*XLEN/8, x1)

inst_271:// rs1_val==858993458 and rs2_val==858993458, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x33333332;  op2val:0x33333332
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x33333332, 0x33333332, x2, 254*XLEN/8, x1)

inst_272:// rs1_val==858993458 and rs2_val==-858993461, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x33333332;  op2val:-0x33333335
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x33333332, -0x33333335, x2, 255*XLEN/8, x1)
RVTEST_SIGBASE(x2,signature_x2_1)

inst_273:// rs1_val==858993458 and rs2_val==1717986917, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x33333332;  op2val:0x66666665
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x33333332, 0x66666665, x2, 0*XLEN/8, x1)

inst_274:// rs1_val==858993458 and rs2_val==-1717986920, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x33333332;  op2val:-0x66666668
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x33333332, -0x66666668, x2, 1*XLEN/8, x1)

inst_275:// rs1_val==858993458 and rs2_val==1431655766, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x33333332;  op2val:0x55555556
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x33333332, 0x55555556, x2, 2*XLEN/8, x1)

inst_276:// rs1_val==858993458 and rs2_val==-1431655765, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x33333332;  op2val:-0x55555555
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x33333332, -0x55555555, x2, 3*XLEN/8, x1)

inst_277:// rs1_val==858993458 and rs2_val==858993460, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x33333332;  op2val:0x33333334
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x33333332, 0x33333334, x2, 4*XLEN/8, x1)

inst_278:// rs1_val==858993458 and rs2_val==-858993459, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x33333332;  op2val:-0x33333333
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x33333332, -0x33333333, x2, 5*XLEN/8, x1)

inst_279:// rs1_val==858993458 and rs2_val==1717986919, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x33333332;  op2val:0x66666667
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x33333332, 0x66666667, x2, 6*XLEN/8, x1)

inst_280:// rs1_val==858993458 and rs2_val==-1717986918, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x33333332;  op2val:-0x66666666
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x33333332, -0x66666666, x2, 7*XLEN/8, x1)

inst_281:// rs1_val==-1717986918 and rs2_val==-1, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:-0x66666666;  op2val:-0x1
TEST_RR_OP(min, x31, x30, x29, 0x00000000, -0x66666666, -0x1, x2, 8*XLEN/8, x1)

inst_282:// rs1_val==0 and rs2_val==1431655765, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x0;  op2val:0x55555555
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x0, 0x55555555, x2, 9*XLEN/8, x1)

inst_283:// rs1_val==0 and rs2_val==-1431655766, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x0;  op2val:-0x55555556
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x0, -0x55555556, x2, 10*XLEN/8, x1)

inst_284:// rs1_val==0 and rs2_val==858993459, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x0;  op2val:0x33333333
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x0, 0x33333333, x2, 11*XLEN/8, x1)

inst_285:// rs1_val==0 and rs2_val==-858993460, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x0;  op2val:-0x33333334
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x0, -0x33333334, x2, 12*XLEN/8, x1)

inst_286:// rs1_val==0 and rs2_val==1717986918, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x0;  op2val:0x66666666
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x0, 0x66666666, x2, 13*XLEN/8, x1)

inst_287:// rs1_val==0 and rs2_val==-1717986919, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x0;  op2val:-0x66666667
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x0, -0x66666667, x2, 14*XLEN/8, x1)

inst_288:// rs1_val==0 and rs2_val==1431655764, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x0;  op2val:0x55555554
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x0, 0x55555554, x2, 15*XLEN/8, x1)

inst_289:// rs1_val==0 and rs2_val==-1431655767, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x0;  op2val:-0x55555557
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x0, -0x55555557, x2, 16*XLEN/8, x1)

inst_290:// rs1_val==0 and rs2_val==858993458, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x0;  op2val:0x33333332
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x0, 0x33333332, x2, 17*XLEN/8, x1)

inst_291:// rs1_val==0 and rs2_val==-858993461, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x0;  op2val:-0x33333335
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x0, -0x33333335, x2, 18*XLEN/8, x1)

inst_292:// rs1_val==0 and rs2_val==1717986917, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x0;  op2val:0x66666665
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x0, 0x66666665, x2, 19*XLEN/8, x1)

inst_293:// rs1_val==0 and rs2_val==-1717986920, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x0;  op2val:-0x66666668
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x0, -0x66666668, x2, 20*XLEN/8, x1)

inst_294:// rs1_val==0 and rs2_val==1431655766, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x0;  op2val:0x55555556
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x0, 0x55555556, x2, 21*XLEN/8, x1)

inst_295:// rs1_val==0 and rs2_val==-1431655765, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x0;  op2val:-0x55555555
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x0, -0x55555555, x2, 22*XLEN/8, x1)

inst_296:// rs1_val==0 and rs2_val==858993460, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x0;  op2val:0x33333334
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x0, 0x33333334, x2, 23*XLEN/8, x1)

inst_297:// rs1_val==0 and rs2_val==-858993459, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x0;  op2val:-0x33333333
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x0, -0x33333333, x2, 24*XLEN/8, x1)

inst_298:// rs1_val==0 and rs2_val==1717986919, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x0;  op2val:0x66666667
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x0, 0x66666667, x2, 25*XLEN/8, x1)

inst_299:// rs1_val==0 and rs2_val==-1717986918, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x0;  op2val:-0x66666666
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x0, -0x66666666, x2, 26*XLEN/8, x1)

inst_300:// rs1_val==0 and rs2_val==0, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x0;  op2val:0x0
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x0, 0x0, x2, 27*XLEN/8, x1)

inst_301:// rs1_val==0 and rs2_val==1, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x0;  op2val:0x1
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x0, 0x1, x2, 28*XLEN/8, x1)

inst_302:// rs1_val==0 and rs2_val==-1, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x0;  op2val:-0x1
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x0, -0x1, x2, 29*XLEN/8, x1)

inst_303:// rs1_val==1 and rs2_val==1431655765, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x1;  op2val:0x55555555
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x1, 0x55555555, x2, 30*XLEN/8, x1)

inst_304:// rs1_val==1 and rs2_val==-1431655766, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x1;  op2val:-0x55555556
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x1, -0x55555556, x2, 31*XLEN/8, x1)

inst_305:// rs1_val==1 and rs2_val==858993459, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x1;  op2val:0x33333333
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x1, 0x33333333, x2, 32*XLEN/8, x1)

inst_306:// rs1_val==1 and rs2_val==-858993460, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x1;  op2val:-0x33333334
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x1, -0x33333334, x2, 33*XLEN/8, x1)

inst_307:// rs1_val==1 and rs2_val==1717986918, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x1;  op2val:0x66666666
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x1, 0x66666666, x2, 34*XLEN/8, x1)

inst_308:// rs1_val==1 and rs2_val==-1717986919, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x1;  op2val:-0x66666667
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x1, -0x66666667, x2, 35*XLEN/8, x1)

inst_309:// rs1_val==1 and rs2_val==1431655764, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x1;  op2val:0x55555554
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x1, 0x55555554, x2, 36*XLEN/8, x1)

inst_310:// rs1_val==1 and rs2_val==-1431655767, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x1;  op2val:-0x55555557
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x1, -0x55555557, x2, 37*XLEN/8, x1)

inst_311:// rs1_val==1 and rs2_val==858993458, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x1;  op2val:0x33333332
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x1, 0x33333332, x2, 38*XLEN/8, x1)

inst_312:// rs1_val==1 and rs2_val==-858993461, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x1;  op2val:-0x33333335
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x1, -0x33333335, x2, 39*XLEN/8, x1)

inst_313:// rs1_val==1 and rs2_val==1717986917, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x1;  op2val:0x66666665
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x1, 0x66666665, x2, 40*XLEN/8, x1)

inst_314:// rs1_val==1 and rs2_val==-1717986920, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x1;  op2val:-0x66666668
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x1, -0x66666668, x2, 41*XLEN/8, x1)

inst_315:// rs1_val==1 and rs2_val==1431655766, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x1;  op2val:0x55555556
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x1, 0x55555556, x2, 42*XLEN/8, x1)

inst_316:// rs1_val==1 and rs2_val==-1431655765, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x1;  op2val:-0x55555555
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x1, -0x55555555, x2, 43*XLEN/8, x1)

inst_317:// rs1_val==1 and rs2_val==858993460, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x1;  op2val:0x33333334
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x1, 0x33333334, x2, 44*XLEN/8, x1)

inst_318:// rs1_val==1 and rs2_val==-858993459, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x1;  op2val:-0x33333333
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x1, -0x33333333, x2, 45*XLEN/8, x1)

inst_319:// rs1_val==1 and rs2_val==1717986919, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x1;  op2val:0x66666667
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x1, 0x66666667, x2, 46*XLEN/8, x1)

inst_320:// rs1_val==1 and rs2_val==-1717986918, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x1;  op2val:-0x66666666
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x1, -0x66666666, x2, 47*XLEN/8, x1)

inst_321:// rs1_val==1 and rs2_val==0, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x1;  op2val:0x0
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x1, 0x0, x2, 48*XLEN/8, x1)

inst_322:// rs1_val==1 and rs2_val==1, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x1;  op2val:0x1
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x1, 0x1, x2, 49*XLEN/8, x1)

inst_323:// rs1_val==1 and rs2_val==-1, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x1;  op2val:-0x1
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x1, -0x1, x2, 50*XLEN/8, x1)

inst_324:// rs1_val==-1 and rs2_val==1431655765, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:-0x1;  op2val:0x55555555
TEST_RR_OP(min, x31, x30, x29, 0x00000000, -0x1, 0x55555555, x2, 51*XLEN/8, x1)

inst_325:// rs1_val==-1 and rs2_val==-1431655766, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:-0x1;  op2val:-0x55555556
TEST_RR_OP(min, x31, x30, x29, 0x00000000, -0x1, -0x55555556, x2, 52*XLEN/8, x1)

inst_326:// rs1_val==-1 and rs2_val==858993459, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:-0x1;  op2val:0x33333333
TEST_RR_OP(min, x31, x30, x29, 0x00000000, -0x1, 0x33333333, x2, 53*XLEN/8, x1)

inst_327:// rs1_val==-1 and rs2_val==-858993460, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:-0x1;  op2val:-0x33333334
TEST_RR_OP(min, x31, x30, x29, 0x00000000, -0x1, -0x33333334, x2, 54*XLEN/8, x1)

inst_328:// rs1_val==-1 and rs2_val==1717986918, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:-0x1;  op2val:0x66666666
TEST_RR_OP(min, x31, x30, x29, 0x00000000, -0x1, 0x66666666, x2, 55*XLEN/8, x1)

inst_329:// rs1_val==-1 and rs2_val==-1717986919, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:-0x1;  op2val:-0x66666667
TEST_RR_OP(min, x31, x30, x29, 0x00000000, -0x1, -0x66666667, x2, 56*XLEN/8, x1)

inst_330:// rs1_val==-1 and rs2_val==1431655764, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:-0x1;  op2val:0x55555554
TEST_RR_OP(min, x31, x30, x29, 0x00000000, -0x1, 0x55555554, x2, 57*XLEN/8, x1)

inst_331:// rs1_val==-1 and rs2_val==-1431655767, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:-0x1;  op2val:-0x55555557
TEST_RR_OP(min, x31, x30, x29, 0x00000000, -0x1, -0x55555557, x2, 58*XLEN/8, x1)

inst_332:// rs1_val==-1 and rs2_val==858993458, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:-0x1;  op2val:0x33333332
TEST_RR_OP(min, x31, x30, x29, 0x00000000, -0x1, 0x33333332, x2, 59*XLEN/8, x1)

inst_333:// rs1_val==-1 and rs2_val==-858993461, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:-0x1;  op2val:-0x33333335
TEST_RR_OP(min, x31, x30, x29, 0x00000000, -0x1, -0x33333335, x2, 60*XLEN/8, x1)

inst_334:// rs1_val==-1 and rs2_val==1717986917, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:-0x1;  op2val:0x66666665
TEST_RR_OP(min, x31, x30, x29, 0x00000000, -0x1, 0x66666665, x2, 61*XLEN/8, x1)

inst_335:// rs1_val==-1 and rs2_val==-1717986920, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:-0x1;  op2val:-0x66666668
TEST_RR_OP(min, x31, x30, x29, 0x00000000, -0x1, -0x66666668, x2, 62*XLEN/8, x1)

inst_336:// rs1_val==-1 and rs2_val==1431655766, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:-0x1;  op2val:0x55555556
TEST_RR_OP(min, x31, x30, x29, 0x00000000, -0x1, 0x55555556, x2, 63*XLEN/8, x1)

inst_337:// rs1_val==-1 and rs2_val==-1431655765, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:-0x1;  op2val:-0x55555555
TEST_RR_OP(min, x31, x30, x29, 0x00000000, -0x1, -0x55555555, x2, 64*XLEN/8, x1)

inst_338:// rs1_val==-1 and rs2_val==858993460, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:-0x1;  op2val:0x33333334
TEST_RR_OP(min, x31, x30, x29, 0x00000000, -0x1, 0x33333334, x2, 65*XLEN/8, x1)

inst_339:// rs1_val==-1 and rs2_val==-858993459, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:-0x1;  op2val:-0x33333333
TEST_RR_OP(min, x31, x30, x29, 0x00000000, -0x1, -0x33333333, x2, 66*XLEN/8, x1)

inst_340:// rs1_val==-1 and rs2_val==1717986919, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:-0x1;  op2val:0x66666667
TEST_RR_OP(min, x31, x30, x29, 0x00000000, -0x1, 0x66666667, x2, 67*XLEN/8, x1)

inst_341:// rs1_val==-1 and rs2_val==-1717986918, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:-0x1;  op2val:-0x66666666
TEST_RR_OP(min, x31, x30, x29, 0x00000000, -0x1, -0x66666666, x2, 68*XLEN/8, x1)

inst_342:// rs1_val==-1 and rs2_val==0, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:-0x1;  op2val:0x0
TEST_RR_OP(min, x31, x30, x29, 0x00000000, -0x1, 0x0, x2, 69*XLEN/8, x1)

inst_343:// rs1_val==-1 and rs2_val==1, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:-0x1;  op2val:0x1
TEST_RR_OP(min, x31, x30, x29, 0x00000000, -0x1, 0x1, x2, 70*XLEN/8, x1)

inst_344:// rs1_val==-1 and rs2_val==-1, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:-0x1;  op2val:-0x1
TEST_RR_OP(min, x31, x30, x29, 0x00000000, -0x1, -0x1, x2, 71*XLEN/8, x1)

inst_345:// rs1_val==858993458 and rs2_val==0, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x33333332;  op2val:0x0
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x33333332, 0x0, x2, 72*XLEN/8, x1)

inst_346:// rs1_val==858993458 and rs2_val==1, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x33333332;  op2val:0x1
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x33333332, 0x1, x2, 73*XLEN/8, x1)

inst_347:// rs1_val==858993458 and rs2_val==-1, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x33333332;  op2val:-0x1
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x33333332, -0x1, x2, 74*XLEN/8, x1)

inst_348:// rs1_val==-858993461 and rs2_val==1431655765, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:-0x33333335;  op2val:0x55555555
TEST_RR_OP(min, x31, x30, x29, 0x00000000, -0x33333335, 0x55555555, x2, 75*XLEN/8, x1)

inst_349:// rs1_val==-858993461 and rs2_val==-1431655766, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:-0x33333335;  op2val:-0x55555556
TEST_RR_OP(min, x31, x30, x29, 0x00000000, -0x33333335, -0x55555556, x2, 76*XLEN/8, x1)

inst_350:// rs1_val==-858993461 and rs2_val==858993459, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:-0x33333335;  op2val:0x33333333
TEST_RR_OP(min, x31, x30, x29, 0x00000000, -0x33333335, 0x33333333, x2, 77*XLEN/8, x1)

inst_351:// rs1_val==-858993461 and rs2_val==-858993460, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:-0x33333335;  op2val:-0x33333334
TEST_RR_OP(min, x31, x30, x29, 0x00000000, -0x33333335, -0x33333334, x2, 78*XLEN/8, x1)

inst_352:// rs1_val==-858993461 and rs2_val==1717986918, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:-0x33333335;  op2val:0x66666666
TEST_RR_OP(min, x31, x30, x29, 0x00000000, -0x33333335, 0x66666666, x2, 79*XLEN/8, x1)

inst_353:// rs1_val==-858993461 and rs2_val==-1717986919, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:-0x33333335;  op2val:-0x66666667
TEST_RR_OP(min, x31, x30, x29, 0x00000000, -0x33333335, -0x66666667, x2, 80*XLEN/8, x1)

inst_354:// rs1_val==-858993461 and rs2_val==1431655764, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:-0x33333335;  op2val:0x55555554
TEST_RR_OP(min, x31, x30, x29, 0x00000000, -0x33333335, 0x55555554, x2, 81*XLEN/8, x1)

inst_355:// rs1_val==-858993461 and rs2_val==-1431655767, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:-0x33333335;  op2val:-0x55555557
TEST_RR_OP(min, x31, x30, x29, 0x00000000, -0x33333335, -0x55555557, x2, 82*XLEN/8, x1)

inst_356:// rs1_val==-858993461 and rs2_val==858993458, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:-0x33333335;  op2val:0x33333332
TEST_RR_OP(min, x31, x30, x29, 0x00000000, -0x33333335, 0x33333332, x2, 83*XLEN/8, x1)

inst_357:// rs1_val==-858993461 and rs2_val==-858993461, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:-0x33333335;  op2val:-0x33333335
TEST_RR_OP(min, x31, x30, x29, 0x00000000, -0x33333335, -0x33333335, x2, 84*XLEN/8, x1)

inst_358:// rs1_val==-858993461 and rs2_val==1717986917, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:-0x33333335;  op2val:0x66666665
TEST_RR_OP(min, x31, x30, x29, 0x00000000, -0x33333335, 0x66666665, x2, 85*XLEN/8, x1)

inst_359:// rs1_val==-858993461 and rs2_val==-1717986920, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:-0x33333335;  op2val:-0x66666668
TEST_RR_OP(min, x31, x30, x29, 0x00000000, -0x33333335, -0x66666668, x2, 86*XLEN/8, x1)

inst_360:// rs1_val==-858993461 and rs2_val==1431655766, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:-0x33333335;  op2val:0x55555556
TEST_RR_OP(min, x31, x30, x29, 0x00000000, -0x33333335, 0x55555556, x2, 87*XLEN/8, x1)

inst_361:// rs1_val==-858993461 and rs2_val==-1431655765, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:-0x33333335;  op2val:-0x55555555
TEST_RR_OP(min, x31, x30, x29, 0x00000000, -0x33333335, -0x55555555, x2, 88*XLEN/8, x1)

inst_362:// rs1_val==-858993461 and rs2_val==858993460, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:-0x33333335;  op2val:0x33333334
TEST_RR_OP(min, x31, x30, x29, 0x00000000, -0x33333335, 0x33333334, x2, 89*XLEN/8, x1)

inst_363:// rs1_val==-858993461 and rs2_val==-858993459, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:-0x33333335;  op2val:-0x33333333
TEST_RR_OP(min, x31, x30, x29, 0x00000000, -0x33333335, -0x33333333, x2, 90*XLEN/8, x1)

inst_364:// rs1_val==-858993461 and rs2_val==1717986919, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:-0x33333335;  op2val:0x66666667
TEST_RR_OP(min, x31, x30, x29, 0x00000000, -0x33333335, 0x66666667, x2, 91*XLEN/8, x1)

inst_365:// rs1_val==-858993461 and rs2_val==-1717986918, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:-0x33333335;  op2val:-0x66666666
TEST_RR_OP(min, x31, x30, x29, 0x00000000, -0x33333335, -0x66666666, x2, 92*XLEN/8, x1)

inst_366:// rs1_val==-858993461 and rs2_val==0, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:-0x33333335;  op2val:0x0
TEST_RR_OP(min, x31, x30, x29, 0x00000000, -0x33333335, 0x0, x2, 93*XLEN/8, x1)

inst_367:// rs1_val==-858993461 and rs2_val==1, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:-0x33333335;  op2val:0x1
TEST_RR_OP(min, x31, x30, x29, 0x00000000, -0x33333335, 0x1, x2, 94*XLEN/8, x1)

inst_368:// rs1_val==-858993461 and rs2_val==-1, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:-0x33333335;  op2val:-0x1
TEST_RR_OP(min, x31, x30, x29, 0x00000000, -0x33333335, -0x1, x2, 95*XLEN/8, x1)

inst_369:// rs1_val==1717986917 and rs2_val==1431655765, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x66666665;  op2val:0x55555555
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x66666665, 0x55555555, x2, 96*XLEN/8, x1)

inst_370:// rs1_val==1717986917 and rs2_val==-1431655766, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x66666665;  op2val:-0x55555556
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x66666665, -0x55555556, x2, 97*XLEN/8, x1)

inst_371:// rs1_val==1717986917 and rs2_val==858993459, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x66666665;  op2val:0x33333333
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x66666665, 0x33333333, x2, 98*XLEN/8, x1)

inst_372:// rs1_val==1717986917 and rs2_val==-858993460, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x66666665;  op2val:-0x33333334
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x66666665, -0x33333334, x2, 99*XLEN/8, x1)

inst_373:// rs1_val==1717986917 and rs2_val==1717986918, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x66666665;  op2val:0x66666666
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x66666665, 0x66666666, x2, 100*XLEN/8, x1)

inst_374:// rs1_val==1717986917 and rs2_val==-1717986919, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x66666665;  op2val:-0x66666667
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x66666665, -0x66666667, x2, 101*XLEN/8, x1)

inst_375:// rs1_val==1717986917 and rs2_val==1431655764, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x66666665;  op2val:0x55555554
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x66666665, 0x55555554, x2, 102*XLEN/8, x1)

inst_376:// rs1_val==1717986917 and rs2_val==-1431655767, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x66666665;  op2val:-0x55555557
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x66666665, -0x55555557, x2, 103*XLEN/8, x1)

inst_377:// rs1_val==1717986917 and rs2_val==858993458, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x66666665;  op2val:0x33333332
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x66666665, 0x33333332, x2, 104*XLEN/8, x1)

inst_378:// rs1_val==1717986917 and rs2_val==-858993461, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x66666665;  op2val:-0x33333335
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x66666665, -0x33333335, x2, 105*XLEN/8, x1)

inst_379:// rs1_val==1717986917 and rs2_val==1717986917, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x66666665;  op2val:0x66666665
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x66666665, 0x66666665, x2, 106*XLEN/8, x1)

inst_380:// rs1_val==1717986917 and rs2_val==-1717986920, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x66666665;  op2val:-0x66666668
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x66666665, -0x66666668, x2, 107*XLEN/8, x1)

inst_381:// rs1_val==1717986917 and rs2_val==1431655766, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x66666665;  op2val:0x55555556
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x66666665, 0x55555556, x2, 108*XLEN/8, x1)

inst_382:// rs1_val==1717986917 and rs2_val==-1431655765, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x66666665;  op2val:-0x55555555
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x66666665, -0x55555555, x2, 109*XLEN/8, x1)

inst_383:// rs1_val==1717986917 and rs2_val==858993460, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x66666665;  op2val:0x33333334
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x66666665, 0x33333334, x2, 110*XLEN/8, x1)

inst_384:// rs1_val==1717986917 and rs2_val==-858993459, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x66666665;  op2val:-0x33333333
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x66666665, -0x33333333, x2, 111*XLEN/8, x1)

inst_385:// rs1_val==1717986917 and rs2_val==1717986919, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x66666665;  op2val:0x66666667
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x66666665, 0x66666667, x2, 112*XLEN/8, x1)

inst_386:// rs1_val==1717986917 and rs2_val==-1717986918, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x66666665;  op2val:-0x66666666
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x66666665, -0x66666666, x2, 113*XLEN/8, x1)

inst_387:// rs1_val==1717986917 and rs2_val==0, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x66666665;  op2val:0x0
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x66666665, 0x0, x2, 114*XLEN/8, x1)

inst_388:// rs1_val==1717986917 and rs2_val==1, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x66666665;  op2val:0x1
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x66666665, 0x1, x2, 115*XLEN/8, x1)

inst_389:// rs1_val==1717986917 and rs2_val==-1, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x66666665;  op2val:-0x1
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x66666665, -0x1, x2, 116*XLEN/8, x1)

inst_390:// rs1_val==-1717986920 and rs2_val==1431655765, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:-0x66666668;  op2val:0x55555555
TEST_RR_OP(min, x31, x30, x29, 0x00000000, -0x66666668, 0x55555555, x2, 117*XLEN/8, x1)

inst_391:// rs1_val==-1717986920 and rs2_val==-1431655766, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:-0x66666668;  op2val:-0x55555556
TEST_RR_OP(min, x31, x30, x29, 0x00000000, -0x66666668, -0x55555556, x2, 118*XLEN/8, x1)

inst_392:// rs1_val==-1717986920 and rs2_val==858993459, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:-0x66666668;  op2val:0x33333333
TEST_RR_OP(min, x31, x30, x29, 0x00000000, -0x66666668, 0x33333333, x2, 119*XLEN/8, x1)

inst_393:// rs1_val==-1717986920 and rs2_val==-858993460, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:-0x66666668;  op2val:-0x33333334
TEST_RR_OP(min, x31, x30, x29, 0x00000000, -0x66666668, -0x33333334, x2, 120*XLEN/8, x1)

inst_394:// rs1_val==-1717986920 and rs2_val==1717986918, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:-0x66666668;  op2val:0x66666666
TEST_RR_OP(min, x31, x30, x29, 0x00000000, -0x66666668, 0x66666666, x2, 121*XLEN/8, x1)

inst_395:// rs1_val==-1717986920 and rs2_val==-1717986919, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:-0x66666668;  op2val:-0x66666667
TEST_RR_OP(min, x31, x30, x29, 0x00000000, -0x66666668, -0x66666667, x2, 122*XLEN/8, x1)

inst_396:// rs1_val==-1717986920 and rs2_val==1431655764, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:-0x66666668;  op2val:0x55555554
TEST_RR_OP(min, x31, x30, x29, 0x00000000, -0x66666668, 0x55555554, x2, 123*XLEN/8, x1)

inst_397:// rs1_val==-1717986920 and rs2_val==-1431655767, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:-0x66666668;  op2val:-0x55555557
TEST_RR_OP(min, x31, x30, x29, 0x00000000, -0x66666668, -0x55555557, x2, 124*XLEN/8, x1)

inst_398:// rs1_val==-1717986920 and rs2_val==858993458, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:-0x66666668;  op2val:0x33333332
TEST_RR_OP(min, x31, x30, x29, 0x00000000, -0x66666668, 0x33333332, x2, 125*XLEN/8, x1)

inst_399:// rs1_val==-1717986920 and rs2_val==-858993461, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:-0x66666668;  op2val:-0x33333335
TEST_RR_OP(min, x31, x30, x29, 0x00000000, -0x66666668, -0x33333335, x2, 126*XLEN/8, x1)

inst_400:// rs1_val==-1717986920 and rs2_val==1717986917, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:-0x66666668;  op2val:0x66666665
TEST_RR_OP(min, x31, x30, x29, 0x00000000, -0x66666668, 0x66666665, x2, 127*XLEN/8, x1)

inst_401:// rs1_val==-1717986920 and rs2_val==-1717986920, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:-0x66666668;  op2val:-0x66666668
TEST_RR_OP(min, x31, x30, x29, 0x00000000, -0x66666668, -0x66666668, x2, 128*XLEN/8, x1)

inst_402:// rs1_val==-1717986920 and rs2_val==1431655766, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:-0x66666668;  op2val:0x55555556
TEST_RR_OP(min, x31, x30, x29, 0x00000000, -0x66666668, 0x55555556, x2, 129*XLEN/8, x1)

inst_403:// rs1_val==-1717986920 and rs2_val==-1431655765, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:-0x66666668;  op2val:-0x55555555
TEST_RR_OP(min, x31, x30, x29, 0x00000000, -0x66666668, -0x55555555, x2, 130*XLEN/8, x1)

inst_404:// rs1_val==-1717986920 and rs2_val==858993460, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:-0x66666668;  op2val:0x33333334
TEST_RR_OP(min, x31, x30, x29, 0x00000000, -0x66666668, 0x33333334, x2, 131*XLEN/8, x1)

inst_405:// rs1_val==-1717986920 and rs2_val==-858993459, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:-0x66666668;  op2val:-0x33333333
TEST_RR_OP(min, x31, x30, x29, 0x00000000, -0x66666668, -0x33333333, x2, 132*XLEN/8, x1)

inst_406:// rs1_val==-1717986920 and rs2_val==1717986919, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:-0x66666668;  op2val:0x66666667
TEST_RR_OP(min, x31, x30, x29, 0x00000000, -0x66666668, 0x66666667, x2, 133*XLEN/8, x1)

inst_407:// rs1_val==-1717986920 and rs2_val==-1717986918, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:-0x66666668;  op2val:-0x66666666
TEST_RR_OP(min, x31, x30, x29, 0x00000000, -0x66666668, -0x66666666, x2, 134*XLEN/8, x1)

inst_408:// rs1_val==-1717986920 and rs2_val==0, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:-0x66666668;  op2val:0x0
TEST_RR_OP(min, x31, x30, x29, 0x00000000, -0x66666668, 0x0, x2, 135*XLEN/8, x1)

inst_409:// rs1_val==-1717986920 and rs2_val==1, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:-0x66666668;  op2val:0x1
TEST_RR_OP(min, x31, x30, x29, 0x00000000, -0x66666668, 0x1, x2, 136*XLEN/8, x1)

inst_410:// rs1_val==-1717986920 and rs2_val==-1, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:-0x66666668;  op2val:-0x1
TEST_RR_OP(min, x31, x30, x29, 0x00000000, -0x66666668, -0x1, x2, 137*XLEN/8, x1)

inst_411:// rs1_val==1431655766 and rs2_val==1431655765, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x55555556;  op2val:0x55555555
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x55555556, 0x55555555, x2, 138*XLEN/8, x1)

inst_412:// rs1_val==1431655766 and rs2_val==-1431655766, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x55555556;  op2val:-0x55555556
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x55555556, -0x55555556, x2, 139*XLEN/8, x1)

inst_413:// rs1_val==1431655766 and rs2_val==858993459, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x55555556;  op2val:0x33333333
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x55555556, 0x33333333, x2, 140*XLEN/8, x1)

inst_414:// rs1_val==1431655766 and rs2_val==-858993460, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x55555556;  op2val:-0x33333334
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x55555556, -0x33333334, x2, 141*XLEN/8, x1)

inst_415:// rs1_val==1431655766 and rs2_val==1717986918, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x55555556;  op2val:0x66666666
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x55555556, 0x66666666, x2, 142*XLEN/8, x1)

inst_416:// rs1_val==1431655766 and rs2_val==-1717986919, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x55555556;  op2val:-0x66666667
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x55555556, -0x66666667, x2, 143*XLEN/8, x1)

inst_417:// rs1_val==1431655766 and rs2_val==1431655764, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x55555556;  op2val:0x55555554
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x55555556, 0x55555554, x2, 144*XLEN/8, x1)

inst_418:// rs1_val==1431655766 and rs2_val==-1431655767, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x55555556;  op2val:-0x55555557
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x55555556, -0x55555557, x2, 145*XLEN/8, x1)

inst_419:// rs1_val==1431655766 and rs2_val==858993458, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x55555556;  op2val:0x33333332
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x55555556, 0x33333332, x2, 146*XLEN/8, x1)

inst_420:// rs1_val==1431655766 and rs2_val==-858993461, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x55555556;  op2val:-0x33333335
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x55555556, -0x33333335, x2, 147*XLEN/8, x1)

inst_421:// rs1_val==1431655766 and rs2_val==1717986917, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x55555556;  op2val:0x66666665
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x55555556, 0x66666665, x2, 148*XLEN/8, x1)

inst_422:// rs1_val==1431655766 and rs2_val==-1717986920, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x55555556;  op2val:-0x66666668
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x55555556, -0x66666668, x2, 149*XLEN/8, x1)

inst_423:// rs1_val==1431655766 and rs2_val==1431655766, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x55555556;  op2val:0x55555556
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x55555556, 0x55555556, x2, 150*XLEN/8, x1)

inst_424:// rs1_val==1431655766 and rs2_val==-1431655765, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x55555556;  op2val:-0x55555555
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x55555556, -0x55555555, x2, 151*XLEN/8, x1)

inst_425:// rs1_val==1431655766 and rs2_val==858993460, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x55555556;  op2val:0x33333334
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x55555556, 0x33333334, x2, 152*XLEN/8, x1)

inst_426:// rs1_val==1431655766 and rs2_val==-858993459, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x55555556;  op2val:-0x33333333
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x55555556, -0x33333333, x2, 153*XLEN/8, x1)

inst_427:// rs1_val==1431655766 and rs2_val==1717986919, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x55555556;  op2val:0x66666667
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x55555556, 0x66666667, x2, 154*XLEN/8, x1)

inst_428:// rs1_val==1431655766 and rs2_val==-1717986918, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x55555556;  op2val:-0x66666666
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x55555556, -0x66666666, x2, 155*XLEN/8, x1)

inst_429:// rs1_val==1431655766 and rs2_val==0, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x55555556;  op2val:0x0
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x55555556, 0x0, x2, 156*XLEN/8, x1)

inst_430:// rs1_val==1431655766 and rs2_val==1, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x55555556;  op2val:0x1
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x55555556, 0x1, x2, 157*XLEN/8, x1)

inst_431:// rs1_val==1431655766 and rs2_val==-1, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x55555556;  op2val:-0x1
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x55555556, -0x1, x2, 158*XLEN/8, x1)

inst_432:// rs1_val==-1431655765 and rs2_val==1431655765, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:-0x55555555;  op2val:0x55555555
TEST_RR_OP(min, x31, x30, x29, 0x00000000, -0x55555555, 0x55555555, x2, 159*XLEN/8, x1)

inst_433:// rs1_val==-1431655765 and rs2_val==-1431655766, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:-0x55555555;  op2val:-0x55555556
TEST_RR_OP(min, x31, x30, x29, 0x00000000, -0x55555555, -0x55555556, x2, 160*XLEN/8, x1)

inst_434:// rs1_val==-1431655765 and rs2_val==858993459, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:-0x55555555;  op2val:0x33333333
TEST_RR_OP(min, x31, x30, x29, 0x00000000, -0x55555555, 0x33333333, x2, 161*XLEN/8, x1)

inst_435:// rs1_val==-1431655765 and rs2_val==-858993460, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:-0x55555555;  op2val:-0x33333334
TEST_RR_OP(min, x31, x30, x29, 0x00000000, -0x55555555, -0x33333334, x2, 162*XLEN/8, x1)

inst_436:// rs1_val==-1431655765 and rs2_val==1717986918, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:-0x55555555;  op2val:0x66666666
TEST_RR_OP(min, x31, x30, x29, 0x00000000, -0x55555555, 0x66666666, x2, 163*XLEN/8, x1)

inst_437:// rs1_val==-1431655765 and rs2_val==-1717986919, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:-0x55555555;  op2val:-0x66666667
TEST_RR_OP(min, x31, x30, x29, 0x00000000, -0x55555555, -0x66666667, x2, 164*XLEN/8, x1)

inst_438:// rs1_val==-1431655765 and rs2_val==1431655764, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:-0x55555555;  op2val:0x55555554
TEST_RR_OP(min, x31, x30, x29, 0x00000000, -0x55555555, 0x55555554, x2, 165*XLEN/8, x1)

inst_439:// rs1_val==-1431655765 and rs2_val==-1431655767, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:-0x55555555;  op2val:-0x55555557
TEST_RR_OP(min, x31, x30, x29, 0x00000000, -0x55555555, -0x55555557, x2, 166*XLEN/8, x1)

inst_440:// rs1_val==-1431655765 and rs2_val==858993458, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:-0x55555555;  op2val:0x33333332
TEST_RR_OP(min, x31, x30, x29, 0x00000000, -0x55555555, 0x33333332, x2, 167*XLEN/8, x1)

inst_441:// rs1_val==-1431655765 and rs2_val==-858993461, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:-0x55555555;  op2val:-0x33333335
TEST_RR_OP(min, x31, x30, x29, 0x00000000, -0x55555555, -0x33333335, x2, 168*XLEN/8, x1)

inst_442:// rs1_val==-1431655765 and rs2_val==1717986917, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:-0x55555555;  op2val:0x66666665
TEST_RR_OP(min, x31, x30, x29, 0x00000000, -0x55555555, 0x66666665, x2, 169*XLEN/8, x1)

inst_443:// rs1_val==-1431655765 and rs2_val==-1717986920, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:-0x55555555;  op2val:-0x66666668
TEST_RR_OP(min, x31, x30, x29, 0x00000000, -0x55555555, -0x66666668, x2, 170*XLEN/8, x1)

inst_444:// rs1_val==-1431655765 and rs2_val==1431655766, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:-0x55555555;  op2val:0x55555556
TEST_RR_OP(min, x31, x30, x29, 0x00000000, -0x55555555, 0x55555556, x2, 171*XLEN/8, x1)

inst_445:// rs1_val==-1431655765 and rs2_val==-1431655765, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:-0x55555555;  op2val:-0x55555555
TEST_RR_OP(min, x31, x30, x29, 0x00000000, -0x55555555, -0x55555555, x2, 172*XLEN/8, x1)

inst_446:// rs1_val==-1431655765 and rs2_val==858993460, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:-0x55555555;  op2val:0x33333334
TEST_RR_OP(min, x31, x30, x29, 0x00000000, -0x55555555, 0x33333334, x2, 173*XLEN/8, x1)

inst_447:// rs1_val==-1431655765 and rs2_val==-858993459, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:-0x55555555;  op2val:-0x33333333
TEST_RR_OP(min, x31, x30, x29, 0x00000000, -0x55555555, -0x33333333, x2, 174*XLEN/8, x1)

inst_448:// rs1_val==-1431655765 and rs2_val==1717986919, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:-0x55555555;  op2val:0x66666667
TEST_RR_OP(min, x31, x30, x29, 0x00000000, -0x55555555, 0x66666667, x2, 175*XLEN/8, x1)

inst_449:// rs1_val==-1431655765 and rs2_val==-1717986918, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:-0x55555555;  op2val:-0x66666666
TEST_RR_OP(min, x31, x30, x29, 0x00000000, -0x55555555, -0x66666666, x2, 176*XLEN/8, x1)

inst_450:// rs1_val==-1431655765 and rs2_val==0, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:-0x55555555;  op2val:0x0
TEST_RR_OP(min, x31, x30, x29, 0x00000000, -0x55555555, 0x0, x2, 177*XLEN/8, x1)

inst_451:// rs1_val==-1431655765 and rs2_val==1, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:-0x55555555;  op2val:0x1
TEST_RR_OP(min, x31, x30, x29, 0x00000000, -0x55555555, 0x1, x2, 178*XLEN/8, x1)

inst_452:// rs1_val==-1431655765 and rs2_val==-1, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:-0x55555555;  op2val:-0x1
TEST_RR_OP(min, x31, x30, x29, 0x00000000, -0x55555555, -0x1, x2, 179*XLEN/8, x1)

inst_453:// rs1_val==858993460 and rs2_val==1431655765, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x33333334;  op2val:0x55555555
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x33333334, 0x55555555, x2, 180*XLEN/8, x1)

inst_454:// rs1_val==858993460 and rs2_val==-1431655766, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x33333334;  op2val:-0x55555556
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x33333334, -0x55555556, x2, 181*XLEN/8, x1)

inst_455:// rs1_val==858993460 and rs2_val==858993459, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x33333334;  op2val:0x33333333
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x33333334, 0x33333333, x2, 182*XLEN/8, x1)

inst_456:// rs1_val==858993460 and rs2_val==-858993460, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x33333334;  op2val:-0x33333334
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x33333334, -0x33333334, x2, 183*XLEN/8, x1)

inst_457:// rs1_val==858993460 and rs2_val==1717986918, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x33333334;  op2val:0x66666666
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x33333334, 0x66666666, x2, 184*XLEN/8, x1)

inst_458:// rs1_val==858993460 and rs2_val==-1717986919, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x33333334;  op2val:-0x66666667
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x33333334, -0x66666667, x2, 185*XLEN/8, x1)

inst_459:// rs1_val==858993460 and rs2_val==1431655764, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x33333334;  op2val:0x55555554
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x33333334, 0x55555554, x2, 186*XLEN/8, x1)

inst_460:// rs1_val==858993460 and rs2_val==-1431655767, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x33333334;  op2val:-0x55555557
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x33333334, -0x55555557, x2, 187*XLEN/8, x1)

inst_461:// rs1_val==858993460 and rs2_val==858993458, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x33333334;  op2val:0x33333332
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x33333334, 0x33333332, x2, 188*XLEN/8, x1)

inst_462:// rs1_val==858993460 and rs2_val==-858993461, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x33333334;  op2val:-0x33333335
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x33333334, -0x33333335, x2, 189*XLEN/8, x1)

inst_463:// rs1_val==858993460 and rs2_val==1717986917, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x33333334;  op2val:0x66666665
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x33333334, 0x66666665, x2, 190*XLEN/8, x1)

inst_464:// rs1_val==858993460 and rs2_val==-1717986920, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x33333334;  op2val:-0x66666668
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x33333334, -0x66666668, x2, 191*XLEN/8, x1)

inst_465:// rs1_val==858993460 and rs2_val==1431655766, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x33333334;  op2val:0x55555556
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x33333334, 0x55555556, x2, 192*XLEN/8, x1)

inst_466:// rs1_val==858993460 and rs2_val==-1431655765, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x33333334;  op2val:-0x55555555
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x33333334, -0x55555555, x2, 193*XLEN/8, x1)

inst_467:// rs1_val==858993460 and rs2_val==858993460, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x33333334;  op2val:0x33333334
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x33333334, 0x33333334, x2, 194*XLEN/8, x1)

inst_468:// rs1_val==858993460 and rs2_val==-858993459, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x33333334;  op2val:-0x33333333
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x33333334, -0x33333333, x2, 195*XLEN/8, x1)

inst_469:// rs1_val==858993460 and rs2_val==1717986919, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x33333334;  op2val:0x66666667
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x33333334, 0x66666667, x2, 196*XLEN/8, x1)

inst_470:// rs1_val==858993460 and rs2_val==-1717986918, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x33333334;  op2val:-0x66666666
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x33333334, -0x66666666, x2, 197*XLEN/8, x1)

inst_471:// rs1_val==858993460 and rs2_val==0, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x33333334;  op2val:0x0
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x33333334, 0x0, x2, 198*XLEN/8, x1)

inst_472:// rs1_val==858993460 and rs2_val==1, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x33333334;  op2val:0x1
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x33333334, 0x1, x2, 199*XLEN/8, x1)

inst_473:// rs1_val==858993460 and rs2_val==-1, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x33333334;  op2val:-0x1
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x33333334, -0x1, x2, 200*XLEN/8, x1)

inst_474:// rs1_val==-858993459 and rs2_val==1431655765, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:-0x33333333;  op2val:0x55555555
TEST_RR_OP(min, x31, x30, x29, 0x00000000, -0x33333333, 0x55555555, x2, 201*XLEN/8, x1)

inst_475:// rs1_val==-858993459 and rs2_val==-1431655766, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:-0x33333333;  op2val:-0x55555556
TEST_RR_OP(min, x31, x30, x29, 0x00000000, -0x33333333, -0x55555556, x2, 202*XLEN/8, x1)

inst_476:// rs1_val==-858993459 and rs2_val==858993459, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:-0x33333333;  op2val:0x33333333
TEST_RR_OP(min, x31, x30, x29, 0x00000000, -0x33333333, 0x33333333, x2, 203*XLEN/8, x1)

inst_477:// rs1_val==-858993459 and rs2_val==-858993460, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:-0x33333333;  op2val:-0x33333334
TEST_RR_OP(min, x31, x30, x29, 0x00000000, -0x33333333, -0x33333334, x2, 204*XLEN/8, x1)

inst_478:// rs1_val==-858993459 and rs2_val==1717986918, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:-0x33333333;  op2val:0x66666666
TEST_RR_OP(min, x31, x30, x29, 0x00000000, -0x33333333, 0x66666666, x2, 205*XLEN/8, x1)

inst_479:// rs1_val==-858993459 and rs2_val==-1717986919, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:-0x33333333;  op2val:-0x66666667
TEST_RR_OP(min, x31, x30, x29, 0x00000000, -0x33333333, -0x66666667, x2, 206*XLEN/8, x1)

inst_480:// rs1_val==-858993459 and rs2_val==1431655764, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:-0x33333333;  op2val:0x55555554
TEST_RR_OP(min, x31, x30, x29, 0x00000000, -0x33333333, 0x55555554, x2, 207*XLEN/8, x1)

inst_481:// rs1_val==-858993459 and rs2_val==-1431655767, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:-0x33333333;  op2val:-0x55555557
TEST_RR_OP(min, x31, x30, x29, 0x00000000, -0x33333333, -0x55555557, x2, 208*XLEN/8, x1)

inst_482:// rs1_val==-858993459 and rs2_val==858993458, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:-0x33333333;  op2val:0x33333332
TEST_RR_OP(min, x31, x30, x29, 0x00000000, -0x33333333, 0x33333332, x2, 209*XLEN/8, x1)

inst_483:// rs1_val==-858993459 and rs2_val==-858993461, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:-0x33333333;  op2val:-0x33333335
TEST_RR_OP(min, x31, x30, x29, 0x00000000, -0x33333333, -0x33333335, x2, 210*XLEN/8, x1)

inst_484:// rs1_val==-858993459 and rs2_val==1717986917, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:-0x33333333;  op2val:0x66666665
TEST_RR_OP(min, x31, x30, x29, 0x00000000, -0x33333333, 0x66666665, x2, 211*XLEN/8, x1)

inst_485:// rs1_val==-858993459 and rs2_val==-1717986920, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:-0x33333333;  op2val:-0x66666668
TEST_RR_OP(min, x31, x30, x29, 0x00000000, -0x33333333, -0x66666668, x2, 212*XLEN/8, x1)

inst_486:// rs1_val==-858993459 and rs2_val==1431655766, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:-0x33333333;  op2val:0x55555556
TEST_RR_OP(min, x31, x30, x29, 0x00000000, -0x33333333, 0x55555556, x2, 213*XLEN/8, x1)

inst_487:// rs1_val==-858993459 and rs2_val==-1431655765, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:-0x33333333;  op2val:-0x55555555
TEST_RR_OP(min, x31, x30, x29, 0x00000000, -0x33333333, -0x55555555, x2, 214*XLEN/8, x1)

inst_488:// rs1_val==-858993459 and rs2_val==858993460, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:-0x33333333;  op2val:0x33333334
TEST_RR_OP(min, x31, x30, x29, 0x00000000, -0x33333333, 0x33333334, x2, 215*XLEN/8, x1)

inst_489:// rs1_val==-858993459 and rs2_val==-858993459, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:-0x33333333;  op2val:-0x33333333
TEST_RR_OP(min, x31, x30, x29, 0x00000000, -0x33333333, -0x33333333, x2, 216*XLEN/8, x1)

inst_490:// rs1_val==-858993459 and rs2_val==1717986919, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:-0x33333333;  op2val:0x66666667
TEST_RR_OP(min, x31, x30, x29, 0x00000000, -0x33333333, 0x66666667, x2, 217*XLEN/8, x1)

inst_491:// rs1_val==-858993459 and rs2_val==-1717986918, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:-0x33333333;  op2val:-0x66666666
TEST_RR_OP(min, x31, x30, x29, 0x00000000, -0x33333333, -0x66666666, x2, 218*XLEN/8, x1)

inst_492:// rs1_val==-858993459 and rs2_val==0, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:-0x33333333;  op2val:0x0
TEST_RR_OP(min, x31, x30, x29, 0x00000000, -0x33333333, 0x0, x2, 219*XLEN/8, x1)

inst_493:// rs1_val==-858993459 and rs2_val==1, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:-0x33333333;  op2val:0x1
TEST_RR_OP(min, x31, x30, x29, 0x00000000, -0x33333333, 0x1, x2, 220*XLEN/8, x1)

inst_494:// rs1_val==-858993459 and rs2_val==-1, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:-0x33333333;  op2val:-0x1
TEST_RR_OP(min, x31, x30, x29, 0x00000000, -0x33333333, -0x1, x2, 221*XLEN/8, x1)

inst_495:// rs1_val==1717986919 and rs2_val==1431655765, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x66666667;  op2val:0x55555555
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x66666667, 0x55555555, x2, 222*XLEN/8, x1)

inst_496:// rs1_val==1717986919 and rs2_val==-1431655766, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x66666667;  op2val:-0x55555556
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x66666667, -0x55555556, x2, 223*XLEN/8, x1)

inst_497:// rs1_val==1717986919 and rs2_val==858993459, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x66666667;  op2val:0x33333333
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x66666667, 0x33333333, x2, 224*XLEN/8, x1)

inst_498:// rs1_val==1717986919 and rs2_val==-858993460, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x66666667;  op2val:-0x33333334
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x66666667, -0x33333334, x2, 225*XLEN/8, x1)

inst_499:// rs1_val==1717986919 and rs2_val==1717986918, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x66666667;  op2val:0x66666666
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x66666667, 0x66666666, x2, 226*XLEN/8, x1)

inst_500:// rs1_val==1717986919 and rs2_val==-1717986919, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x66666667;  op2val:-0x66666667
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x66666667, -0x66666667, x2, 227*XLEN/8, x1)

inst_501:// rs1_val==1717986919 and rs2_val==1431655764, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x66666667;  op2val:0x55555554
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x66666667, 0x55555554, x2, 228*XLEN/8, x1)

inst_502:// rs1_val==1717986919 and rs2_val==-1431655767, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x66666667;  op2val:-0x55555557
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x66666667, -0x55555557, x2, 229*XLEN/8, x1)

inst_503:// rs1_val==1717986919 and rs2_val==858993458, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x66666667;  op2val:0x33333332
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x66666667, 0x33333332, x2, 230*XLEN/8, x1)

inst_504:// rs1_val==1717986919 and rs2_val==-858993461, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x66666667;  op2val:-0x33333335
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x66666667, -0x33333335, x2, 231*XLEN/8, x1)

inst_505:// rs1_val==1717986919 and rs2_val==1717986917, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x66666667;  op2val:0x66666665
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x66666667, 0x66666665, x2, 232*XLEN/8, x1)

inst_506:// rs1_val==1717986919 and rs2_val==-1717986920, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x66666667;  op2val:-0x66666668
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x66666667, -0x66666668, x2, 233*XLEN/8, x1)

inst_507:// rs1_val==1717986919 and rs2_val==1431655766, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x66666667;  op2val:0x55555556
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x66666667, 0x55555556, x2, 234*XLEN/8, x1)

inst_508:// rs1_val==1717986919 and rs2_val==-1431655765, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x66666667;  op2val:-0x55555555
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x66666667, -0x55555555, x2, 235*XLEN/8, x1)

inst_509:// rs1_val==1717986919 and rs2_val==858993460, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x66666667;  op2val:0x33333334
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x66666667, 0x33333334, x2, 236*XLEN/8, x1)

inst_510:// rs1_val==1717986919 and rs2_val==-858993459, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x66666667;  op2val:-0x33333333
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x66666667, -0x33333333, x2, 237*XLEN/8, x1)

inst_511:// rs1_val==1717986919 and rs2_val==1717986919, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x66666667;  op2val:0x66666667
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x66666667, 0x66666667, x2, 238*XLEN/8, x1)

inst_512:// rs1_val==1717986919 and rs2_val==-1717986918, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x66666667;  op2val:-0x66666666
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x66666667, -0x66666666, x2, 239*XLEN/8, x1)

inst_513:// rs1_val==1717986919 and rs2_val==0, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x66666667;  op2val:0x0
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x66666667, 0x0, x2, 240*XLEN/8, x1)

inst_514:// rs1_val==1717986919 and rs2_val==1, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x66666667;  op2val:0x1
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x66666667, 0x1, x2, 241*XLEN/8, x1)

inst_515:// rs1_val==1717986919 and rs2_val==-1, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x66666667;  op2val:-0x1
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x66666667, -0x1, x2, 242*XLEN/8, x1)

inst_516:// rs1_val==-1717986918 and rs2_val==1431655765, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:-0x66666666;  op2val:0x55555555
TEST_RR_OP(min, x31, x30, x29, 0x00000000, -0x66666666, 0x55555555, x2, 243*XLEN/8, x1)

inst_517:// rs1_val==-1717986918 and rs2_val==-1431655766, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:-0x66666666;  op2val:-0x55555556
TEST_RR_OP(min, x31, x30, x29, 0x00000000, -0x66666666, -0x55555556, x2, 244*XLEN/8, x1)

inst_518:// rs1_val==-1717986918 and rs2_val==858993459, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:-0x66666666;  op2val:0x33333333
TEST_RR_OP(min, x31, x30, x29, 0x00000000, -0x66666666, 0x33333333, x2, 245*XLEN/8, x1)

inst_519:// rs1_val==-1717986918 and rs2_val==-858993460, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:-0x66666666;  op2val:-0x33333334
TEST_RR_OP(min, x31, x30, x29, 0x00000000, -0x66666666, -0x33333334, x2, 246*XLEN/8, x1)

inst_520:// rs1_val==-1717986918 and rs2_val==1717986918, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:-0x66666666;  op2val:0x66666666
TEST_RR_OP(min, x31, x30, x29, 0x00000000, -0x66666666, 0x66666666, x2, 247*XLEN/8, x1)

inst_521:// rs1_val==-1717986918 and rs2_val==-1717986919, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:-0x66666666;  op2val:-0x66666667
TEST_RR_OP(min, x31, x30, x29, 0x00000000, -0x66666666, -0x66666667, x2, 248*XLEN/8, x1)

inst_522:// rs1_val==-1717986918 and rs2_val==1431655764, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:-0x66666666;  op2val:0x55555554
TEST_RR_OP(min, x31, x30, x29, 0x00000000, -0x66666666, 0x55555554, x2, 249*XLEN/8, x1)

inst_523:// rs1_val==-1717986918 and rs2_val==-1431655767, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:-0x66666666;  op2val:-0x55555557
TEST_RR_OP(min, x31, x30, x29, 0x00000000, -0x66666666, -0x55555557, x2, 250*XLEN/8, x1)

inst_524:// rs1_val==-1717986918 and rs2_val==858993458, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:-0x66666666;  op2val:0x33333332
TEST_RR_OP(min, x31, x30, x29, 0x00000000, -0x66666666, 0x33333332, x2, 251*XLEN/8, x1)

inst_525:// rs1_val==-1717986918 and rs2_val==-858993461, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:-0x66666666;  op2val:-0x33333335
TEST_RR_OP(min, x31, x30, x29, 0x00000000, -0x66666666, -0x33333335, x2, 252*XLEN/8, x1)

inst_526:// rs1_val==-1717986918 and rs2_val==1717986917, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:-0x66666666;  op2val:0x66666665
TEST_RR_OP(min, x31, x30, x29, 0x00000000, -0x66666666, 0x66666665, x2, 253*XLEN/8, x1)

inst_527:// rs1_val==-1717986918 and rs2_val==-1717986920, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:-0x66666666;  op2val:-0x66666668
TEST_RR_OP(min, x31, x30, x29, 0x00000000, -0x66666666, -0x66666668, x2, 254*XLEN/8, x1)

inst_528:// rs1_val==-1717986918 and rs2_val==1431655766, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:-0x66666666;  op2val:0x55555556
TEST_RR_OP(min, x31, x30, x29, 0x00000000, -0x66666666, 0x55555556, x2, 255*XLEN/8, x1)
RVTEST_SIGBASE(x2,signature_x2_2)

inst_529:// rs1_val==-1717986918 and rs2_val==-1431655765, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:-0x66666666;  op2val:-0x55555555
TEST_RR_OP(min, x31, x30, x29, 0x00000000, -0x66666666, -0x55555555, x2, 0*XLEN/8, x1)

inst_530:// rs1_val==-1717986918 and rs2_val==858993460, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:-0x66666666;  op2val:0x33333334
TEST_RR_OP(min, x31, x30, x29, 0x00000000, -0x66666666, 0x33333334, x2, 1*XLEN/8, x1)

inst_531:// rs1_val==-1717986918 and rs2_val==-858993459, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:-0x66666666;  op2val:-0x33333333
TEST_RR_OP(min, x31, x30, x29, 0x00000000, -0x66666666, -0x33333333, x2, 2*XLEN/8, x1)

inst_532:// rs1_val==-1717986918 and rs2_val==1717986919, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:-0x66666666;  op2val:0x66666667
TEST_RR_OP(min, x31, x30, x29, 0x00000000, -0x66666666, 0x66666667, x2, 3*XLEN/8, x1)

inst_533:// rs1_val==-1717986918 and rs2_val==-1717986918, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:-0x66666666;  op2val:-0x66666666
TEST_RR_OP(min, x31, x30, x29, 0x00000000, -0x66666666, -0x66666666, x2, 4*XLEN/8, x1)

inst_534:// rs1_val==-1717986918 and rs2_val==0, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:-0x66666666;  op2val:0x0
TEST_RR_OP(min, x31, x30, x29, 0x00000000, -0x66666666, 0x0, x2, 5*XLEN/8, x1)

inst_535:// rs1_val==-1717986918 and rs2_val==1, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:-0x66666666;  op2val:0x1
TEST_RR_OP(min, x31, x30, x29, 0x00000000, -0x66666666, 0x1, x2, 6*XLEN/8, x1)

inst_536:// rs1_val != rs2_val, rs1_val < 0 and rs2_val < 0, rs2_val == -17, rs1_val == -32769
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:-0x8001;  op2val:-0x11
TEST_RR_OP(min, x31, x30, x29, 0x00000000, -0x8001, -0x11, x2, 7*XLEN/8, x1)

inst_537:// rs2_val == -8193, rs1_val == 536870912
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x20000000;  op2val:-0x2001
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x20000000, -0x2001, x2, 8*XLEN/8, x1)

inst_538:// rs2_val == -16777217, rs1_val == 64
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x40;  op2val:-0x1000001
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x40, -0x1000001, x2, 9*XLEN/8, x1)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;



signature_x8_0:
    .fill 0*((XLEN/8)/4),4,0xdeadbeef


signature_x8_1:
    .fill 17*((XLEN/8)/4),4,0xdeadbeef


signature_x2_0:
    .fill 256*((XLEN/8)/4),4,0xdeadbeef


signature_x2_1:
    .fill 256*((XLEN/8)/4),4,0xdeadbeef


signature_x2_2:
    .fill 10*((XLEN/8)/4),4,0xdeadbeef

#ifdef rvtest_mtrap_routine
tsig_begin_canary:
CANARY;

mtrap_sigptr:
    .fill 64*XLEN/32,4,0xdeadbeef

tsig_end_canary:
CANARY;
#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif


sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
