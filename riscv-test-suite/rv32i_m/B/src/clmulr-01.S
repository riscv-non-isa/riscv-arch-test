
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.11.1
// timestamp : Sun Jan 14 18:03:15 2024 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /home/vedvyas/rvi-code-forks/riscv-ctg/sample_cgfs/dataset.cgf \
//                  --cgf /home/vedvyas/rvi-code-forks/riscv-ctg/sample_cgfs/rv32i_b.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the clmulr instruction of the RISC-V RV32Zbc extension for the clmulr covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IZbc")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*Zbc.*);def TEST_CASE_1=True;",clmulr)

RVTEST_SIGBASE(x7,signature_x7_1)

inst_0:
// rs1 == rs2 != rd, rs1==x12, rs2==x12, rd==x5, rs1_val==0 and rs2_val==0, 
// opcode: clmulr ; op1:x12; op2:x12; dest:x5; op1val:0x0;  op2val:0x0
TEST_RR_OP(clmulr, x5, x12, x12, 0x00000000, 0x0, 0x0, x7, 0*XLEN/8, x9)

inst_1:
// rs2 == rd != rs1, rs1==x19, rs2==x20, rd==x20, rs1_val==0 and rs2_val==0x1000, rs2_val == 4096
// opcode: clmulr ; op1:x19; op2:x20; dest:x20; op1val:0x0;  op2val:0x1000
TEST_RR_OP(clmulr, x20, x19, x20, 0x00000000, 0x0, 0x1000, x7, 1*XLEN/8, x9)

inst_2:
// rs1 == rs2 == rd, rs1==x2, rs2==x2, rd==x2, rs1_val==0 and rs2_val==1, rs2_val == 1
// opcode: clmulr ; op1:x2; op2:x2; dest:x2; op1val:0x0;  op2val:0x0
TEST_RR_OP(clmulr, x2, x2, x2, 0x00000000, 0x0, 0x0, x7, 2*XLEN/8, x9)

inst_3:
// rs1 == rd != rs2, rs1==x18, rs2==x8, rd==x18, rs1_val==1 and rs2_val==0, rs1_val == 1
// opcode: clmulr ; op1:x18; op2:x8; dest:x18; op1val:0x1;  op2val:0x0
TEST_RR_OP(clmulr, x18, x18, x8, 0x00000000, 0x1, 0x0, x7, 3*XLEN/8, x9)

inst_4:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x30, rs2==x14, rd==x8, rs1_val==1 and rs2_val==0x1000, 
// opcode: clmulr ; op1:x30; op2:x14; dest:x8; op1val:0x1;  op2val:0x1000
TEST_RR_OP(clmulr, x8, x30, x14, 0x00000000, 0x1, 0x1000, x7, 4*XLEN/8, x9)

inst_5:
// rs1==x26, rs2==x10, rd==x4, rs1_val==1 and rs2_val==1, 
// opcode: clmulr ; op1:x26; op2:x10; dest:x4; op1val:0x1;  op2val:0x1
TEST_RR_OP(clmulr, x4, x26, x10, 0x00000000, 0x1, 0x1, x7, 5*XLEN/8, x9)

inst_6:
// rs1==x27, rs2==x31, rd==x29, rs1_val == 1431655765, 
// opcode: clmulr ; op1:x27; op2:x31; dest:x29; op1val:0x55555555;  op2val:-0x9
TEST_RR_OP(clmulr, x29, x27, x31, 0x00000000, 0x55555555, -0x9, x7, 6*XLEN/8, x9)

inst_7:
// rs1==x31, rs2==x11, rd==x23, rs2_val == 4294967294, 
// opcode: clmulr ; op1:x31; op2:x11; dest:x23; op1val:0xc;  op2val:0xfffffffe
TEST_RR_OP(clmulr, x23, x31, x11, 0x00000000, 0xc, 0xfffffffe, x7, 7*XLEN/8, x9)

inst_8:
// rs1==x6, rs2==x3, rd==x14, rs2_val == 4294967293, 
// opcode: clmulr ; op1:x6; op2:x3; dest:x14; op1val:-0x400001;  op2val:0xfffffffd
TEST_RR_OP(clmulr, x14, x6, x3, 0x00000000, -0x400001, 0xfffffffd, x7, 8*XLEN/8, x9)

inst_9:
// rs1==x11, rs2==x21, rd==x15, rs2_val == 4294967291, 
// opcode: clmulr ; op1:x11; op2:x21; dest:x15; op1val:-0x800001;  op2val:0xfffffffb
TEST_RR_OP(clmulr, x15, x11, x21, 0x00000000, -0x800001, 0xfffffffb, x7, 9*XLEN/8, x9)

inst_10:
// rs1==x20, rs2==x15, rd==x22, rs2_val == 4294967287, 
// opcode: clmulr ; op1:x20; op2:x15; dest:x22; op1val:-0x20000001;  op2val:0xfffffff7
TEST_RR_OP(clmulr, x22, x20, x15, 0x00000000, -0x20000001, 0xfffffff7, x7, 10*XLEN/8, x9)

inst_11:
// rs1==x0, rs2==x1, rd==x24, rs2_val == 4294967279, rs1_val == 67108864
// opcode: clmulr ; op1:x0; op2:x1; dest:x24; op1val:0x0;  op2val:0xffffffef
TEST_RR_OP(clmulr, x24, x0, x1, 0x00000000, 0x0, 0xffffffef, x7, 11*XLEN/8, x9)

inst_12:
// rs1==x24, rs2==x16, rd==x10, rs2_val == 4294967263, 
// opcode: clmulr ; op1:x24; op2:x16; dest:x10; op1val:-0x1;  op2val:0xffffffdf
TEST_RR_OP(clmulr, x10, x24, x16, 0x00000000, -0x1, 0xffffffdf, x7, 12*XLEN/8, x9)

inst_13:
// rs1==x13, rs2==x4, rd==x3, rs2_val == 4294967231, rs1_val == 256
// opcode: clmulr ; op1:x13; op2:x4; dest:x3; op1val:0x100;  op2val:0xffffffbf
TEST_RR_OP(clmulr, x3, x13, x4, 0x00000000, 0x100, 0xffffffbf, x7, 13*XLEN/8, x14)
RVTEST_SIGBASE(x2,signature_x2_0)

inst_14:
// rs1==x25, rs2==x30, rd==x1, rs2_val == 4294967167, rs1_val == 4294963199
// opcode: clmulr ; op1:x25; op2:x30; dest:x1; op1val:0xffffefff;  op2val:0xffffff7f
TEST_RR_OP(clmulr, x1, x25, x30, 0x00000000, 0xffffefff, 0xffffff7f, x2, 0*XLEN/8, x14)

inst_15:
// rs1==x10, rs2==x17, rd==x12, rs2_val == 4294967039, 
// opcode: clmulr ; op1:x10; op2:x17; dest:x12; op1val:-0x80000000;  op2val:0xfffffeff
TEST_RR_OP(clmulr, x12, x10, x17, 0x00000000, -0x80000000, 0xfffffeff, x2, 1*XLEN/8, x14)

inst_16:
// rs1==x22, rs2==x6, rd==x30, rs2_val == 4294966783, 
// opcode: clmulr ; op1:x22; op2:x6; dest:x30; op1val:-0xa;  op2val:0xfffffdff
TEST_RR_OP(clmulr, x30, x22, x6, 0x00000000, -0xa, 0xfffffdff, x2, 2*XLEN/8, x14)

inst_17:
// rs1==x21, rs2==x24, rd==x0, rs2_val == 4294966271, rs1_val == 4
// opcode: clmulr ; op1:x21; op2:x24; dest:x0; op1val:0x4;  op2val:0xfffffbff
TEST_RR_OP(clmulr, x0, x21, x24, 0x00000000, 0x4, 0xfffffbff, x2, 3*XLEN/8, x14)

inst_18:
// rs1==x9, rs2==x5, rd==x28, rs2_val == 4294965247, 
// opcode: clmulr ; op1:x9; op2:x5; dest:x28; op1val:-0x2000001;  op2val:0xfffff7ff
TEST_RR_OP(clmulr, x28, x9, x5, 0x00000000, -0x2000001, 0xfffff7ff, x2, 4*XLEN/8, x14)

inst_19:
// rs1==x1, rs2==x22, rd==x9, rs2_val == 4294963199, 
// opcode: clmulr ; op1:x1; op2:x22; dest:x9; op1val:0x5;  op2val:0xffffefff
TEST_RR_OP(clmulr, x9, x1, x22, 0x00000000, 0x5, 0xffffefff, x2, 5*XLEN/8, x14)

inst_20:
// rs1==x8, rs2==x27, rd==x11, rs2_val == 4294959103, rs1_val == 4294967293
// opcode: clmulr ; op1:x8; op2:x27; dest:x11; op1val:0xfffffffd;  op2val:0xffffdfff
TEST_RR_OP(clmulr, x11, x8, x27, 0x00000000, 0xfffffffd, 0xffffdfff, x2, 6*XLEN/8, x14)

inst_21:
// rs1==x29, rs2==x26, rd==x17, rs2_val == 4294950911, 
// opcode: clmulr ; op1:x29; op2:x26; dest:x17; op1val:-0x40000000;  op2val:0xffffbfff
TEST_RR_OP(clmulr, x17, x29, x26, 0x00000000, -0x40000000, 0xffffbfff, x2, 7*XLEN/8, x14)

inst_22:
// rs1==x3, rs2==x28, rd==x16, rs2_val == 4294934527, 
// opcode: clmulr ; op1:x3; op2:x28; dest:x16; op1val:0x9;  op2val:0xffff7fff
TEST_RR_OP(clmulr, x16, x3, x28, 0x00000000, 0x9, 0xffff7fff, x2, 8*XLEN/8, x14)

inst_23:
// rs1==x15, rs2==x19, rd==x31, rs2_val == 4294901759, 
// opcode: clmulr ; op1:x15; op2:x19; dest:x31; op1val:-0x10000001;  op2val:0xfffeffff
TEST_RR_OP(clmulr, x31, x15, x19, 0x00000000, -0x10000001, 0xfffeffff, x2, 9*XLEN/8, x14)

inst_24:
// rs1==x7, rs2==x25, rd==x19, rs2_val == 4294836223, 
// opcode: clmulr ; op1:x7; op2:x25; dest:x19; op1val:-0x100001;  op2val:0xfffdffff
TEST_RR_OP(clmulr, x19, x7, x25, 0x00000000, -0x100001, 0xfffdffff, x2, 10*XLEN/8, x3)

inst_25:
// rs1==x4, rs2==x29, rd==x21, rs2_val == 4294705151, 
// opcode: clmulr ; op1:x4; op2:x29; dest:x21; op1val:-0x1000001;  op2val:0xfffbffff
TEST_RR_OP(clmulr, x21, x4, x29, 0x00000000, -0x1000001, 0xfffbffff, x2, 11*XLEN/8, x3)

inst_26:
// rs1==x28, rs2==x9, rd==x13, rs2_val == 4294443007, rs1_val == 65536
// opcode: clmulr ; op1:x28; op2:x9; dest:x13; op1val:0x10000;  op2val:0xfff7ffff
TEST_RR_OP(clmulr, x13, x28, x9, 0x00000000, 0x10000, 0xfff7ffff, x2, 12*XLEN/8, x3)
RVTEST_SIGBASE(x1,signature_x1_0)

inst_27:
// rs1==x23, rs2==x0, rd==x27, rs2_val == 4293918719, rs1_val == 4160749567
// opcode: clmulr ; op1:x23; op2:x0; dest:x27; op1val:0xf7ffffff;  op2val:0x0
TEST_RR_OP(clmulr, x27, x23, x0, 0x00000000, 0xf7ffffff, 0x0, x1, 0*XLEN/8, x3)

inst_28:
// rs1==x16, rs2==x18, rd==x6, rs2_val == 4292870143, 
// opcode: clmulr ; op1:x16; op2:x18; dest:x6; op1val:-0x4001;  op2val:0xffdfffff
TEST_RR_OP(clmulr, x6, x16, x18, 0x00000000, -0x4001, 0xffdfffff, x1, 1*XLEN/8, x3)

inst_29:
// rs1==x5, rs2==x13, rd==x26, rs2_val == 4290772991, rs1_val == 4294966271
// opcode: clmulr ; op1:x5; op2:x13; dest:x26; op1val:0xfffffbff;  op2val:0xffbfffff
TEST_RR_OP(clmulr, x26, x5, x13, 0x00000000, 0xfffffbff, 0xffbfffff, x1, 2*XLEN/8, x3)

inst_30:
// rs1==x17, rs2==x23, rd==x25, rs2_val == 4286578687, rs1_val == 32
// opcode: clmulr ; op1:x17; op2:x23; dest:x25; op1val:0x20;  op2val:0xff7fffff
TEST_RR_OP(clmulr, x25, x17, x23, 0x00000000, 0x20, 0xff7fffff, x1, 3*XLEN/8, x3)

inst_31:
// rs1==x14, rs2_val == 4278190079, rs1_val == 131072
// opcode: clmulr ; op1:x14; op2:x2; dest:x26; op1val:0x20000;  op2val:0xfeffffff
TEST_RR_OP(clmulr, x26, x14, x2, 0x00000000, 0x20000, 0xfeffffff, x1, 4*XLEN/8, x3)

inst_32:
// rs2==x7, rs2_val == 4261412863, rs1_val == 2048
// opcode: clmulr ; op1:x20; op2:x7; dest:x13; op1val:0x800;  op2val:0xfdffffff
TEST_RR_OP(clmulr, x13, x20, x7, 0x00000000, 0x800, 0xfdffffff, x1, 5*XLEN/8, x3)

inst_33:
// rd==x7, rs2_val == 4227858431, rs1_val == 2097152
// opcode: clmulr ; op1:x12; op2:x13; dest:x7; op1val:0x200000;  op2val:0xfbffffff
TEST_RR_OP(clmulr, x7, x12, x13, 0x00000000, 0x200000, 0xfbffffff, x1, 6*XLEN/8, x3)

inst_34:
// rs2_val == 4160749567, 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0xffffffff;  op2val:0xf7ffffff
TEST_RR_OP(clmulr, x31, x30, x29, 0x00000000, 0xffffffff, 0xf7ffffff, x1, 7*XLEN/8, x3)

inst_35:
// rs2_val == 4026531839, rs1_val == 16777216
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0x1000000;  op2val:0xefffffff
TEST_RR_OP(clmulr, x31, x30, x29, 0x00000000, 0x1000000, 0xefffffff, x1, 8*XLEN/8, x3)

inst_36:
// rs2_val == 3758096383, 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:-0x20000001;  op2val:0xdfffffff
TEST_RR_OP(clmulr, x31, x30, x29, 0x00000000, -0x20000001, 0xdfffffff, x1, 9*XLEN/8, x3)

inst_37:
// rs2_val == 3221225471, rs1_val == 1024
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0x400;  op2val:0xbfffffff
TEST_RR_OP(clmulr, x31, x30, x29, 0x00000000, 0x400, 0xbfffffff, x1, 10*XLEN/8, x3)

inst_38:
// rs2_val == 2147483647, rs1_val == 16384
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0x4000;  op2val:0x7fffffff
TEST_RR_OP(clmulr, x31, x30, x29, 0x00000000, 0x4000, 0x7fffffff, x1, 11*XLEN/8, x3)

inst_39:
// rs1_val == 4294967294, 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffe;  op2val:0xe
TEST_RR_OP(clmulr, x31, x30, x29, 0x00000000, 0xfffffffe, 0xe, x1, 12*XLEN/8, x3)

inst_40:
// rs1_val == 4294967291, rs2_val == 8192
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffb;  op2val:0x2000
TEST_RR_OP(clmulr, x31, x30, x29, 0x00000000, 0xfffffffb, 0x2000, x1, 13*XLEN/8, x3)

inst_41:
// rs1_val == 4294967287, 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff7;  op2val:0xfffeffff
TEST_RR_OP(clmulr, x31, x30, x29, 0x00000000, 0xfffffff7, 0xfffeffff, x1, 14*XLEN/8, x3)

inst_42:
// rs1_val == 4294967279, 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0xffffffef;  op2val:0xc
TEST_RR_OP(clmulr, x31, x30, x29, 0x00000000, 0xffffffef, 0xc, x1, 15*XLEN/8, x3)

inst_43:
// rs1_val == 4294967263, rs2_val == 8388608
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0xffffffdf;  op2val:0x800000
TEST_RR_OP(clmulr, x31, x30, x29, 0x00000000, 0xffffffdf, 0x800000, x1, 16*XLEN/8, x3)

inst_44:
// rs1_val == 4294967231, 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0xffffffbf;  op2val:-0x21
TEST_RR_OP(clmulr, x31, x30, x29, 0x00000000, 0xffffffbf, -0x21, x1, 17*XLEN/8, x3)

inst_45:
// rs1_val == 4294967167, rs2_val == 1073741824
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0xffffff7f;  op2val:0x40000000
TEST_RR_OP(clmulr, x31, x30, x29, 0x00000000, 0xffffff7f, 0x40000000, x1, 18*XLEN/8, x3)

inst_46:
// rs1_val == 4294967039, 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0xfffffeff;  op2val:-0x4001
TEST_RR_OP(clmulr, x31, x30, x29, 0x00000000, 0xfffffeff, -0x4001, x1, 19*XLEN/8, x3)

inst_47:
// rs1_val == 4294966783, 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0xfffffdff;  op2val:-0x101
TEST_RR_OP(clmulr, x31, x30, x29, 0x00000000, 0xfffffdff, -0x101, x1, 20*XLEN/8, x3)

inst_48:
// rs1_val == 4294965247, 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0xfffff7ff;  op2val:-0x801
TEST_RR_OP(clmulr, x31, x30, x29, 0x00000000, 0xfffff7ff, -0x801, x1, 21*XLEN/8, x3)

inst_49:
// rs1_val == 4294959103, 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0xffffdfff;  op2val:0x1
TEST_RR_OP(clmulr, x31, x30, x29, 0x00000000, 0xffffdfff, 0x1, x1, 22*XLEN/8, x3)

inst_50:
// rs1_val == 4294950911, rs2_val == 4194304
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0xffffbfff;  op2val:0x400000
TEST_RR_OP(clmulr, x31, x30, x29, 0x00000000, 0xffffbfff, 0x400000, x1, 23*XLEN/8, x3)

inst_51:
// rs1_val == 4294934527, 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0xffff7fff;  op2val:0x800000
TEST_RR_OP(clmulr, x31, x30, x29, 0x00000000, 0xffff7fff, 0x800000, x1, 24*XLEN/8, x3)

inst_52:
// rs1_val == 4294901759, 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0xfffeffff;  op2val:0xfffffdff
TEST_RR_OP(clmulr, x31, x30, x29, 0x00000000, 0xfffeffff, 0xfffffdff, x1, 25*XLEN/8, x3)

inst_53:
// rs1_val == 4294836223, 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0xfffdffff;  op2val:-0x80000000
TEST_RR_OP(clmulr, x31, x30, x29, 0x00000000, 0xfffdffff, -0x80000000, x1, 26*XLEN/8, x3)

inst_54:
// rs1_val == 4294705151, 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0xfffbffff;  op2val:0x7fffffff
TEST_RR_OP(clmulr, x31, x30, x29, 0x00000000, 0xfffbffff, 0x7fffffff, x1, 27*XLEN/8, x3)

inst_55:
// rs1_val == 4294443007, 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0xfff7ffff;  op2val:-0xa
TEST_RR_OP(clmulr, x31, x30, x29, 0x00000000, 0xfff7ffff, -0xa, x1, 28*XLEN/8, x3)

inst_56:
// rs1_val == 4293918719, rs2_val == 33554432
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0xffefffff;  op2val:0x2000000
TEST_RR_OP(clmulr, x31, x30, x29, 0x00000000, 0xffefffff, 0x2000000, x1, 29*XLEN/8, x3)

inst_57:
// rs1_val == 4292870143, 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0xffdfffff;  op2val:0xfffffff7
TEST_RR_OP(clmulr, x31, x30, x29, 0x00000000, 0xffdfffff, 0xfffffff7, x1, 30*XLEN/8, x3)

inst_58:
// rs1_val == 4290772991, rs2_val == 512
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0xffbfffff;  op2val:0x200
TEST_RR_OP(clmulr, x31, x30, x29, 0x00000000, 0xffbfffff, 0x200, x1, 31*XLEN/8, x3)

inst_59:
// rs1_val == 4286578687, 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0xff7fffff;  op2val:0x2000
TEST_RR_OP(clmulr, x31, x30, x29, 0x00000000, 0xff7fffff, 0x2000, x1, 32*XLEN/8, x3)

inst_60:
// rs1_val == 4278190079, 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0xfeffffff;  op2val:0xffffbfff
TEST_RR_OP(clmulr, x31, x30, x29, 0x00000000, 0xfeffffff, 0xffffbfff, x1, 33*XLEN/8, x3)

inst_61:
// rs1_val == 4261412863, 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0xfdffffff;  op2val:0xffffffff
TEST_RR_OP(clmulr, x31, x30, x29, 0x00000000, 0xfdffffff, 0xffffffff, x1, 34*XLEN/8, x3)

inst_62:
// rs1_val == 4227858431, rs2_val == 134217728
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0xfbffffff;  op2val:0x8000000
TEST_RR_OP(clmulr, x31, x30, x29, 0x00000000, 0xfbffffff, 0x8000000, x1, 35*XLEN/8, x3)

inst_63:
// rs1_val == 4026531839, 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0xefffffff;  op2val:0x800000
TEST_RR_OP(clmulr, x31, x30, x29, 0x00000000, 0xefffffff, 0x800000, x1, 36*XLEN/8, x3)

inst_64:
// rs1_val == 3758096383, rs2_val == 16777216
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0xdfffffff;  op2val:0x1000000
TEST_RR_OP(clmulr, x31, x30, x29, 0x00000000, 0xdfffffff, 0x1000000, x1, 37*XLEN/8, x3)

inst_65:
// rs1_val == 3221225471, 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0xbfffffff;  op2val:-0x8000001
TEST_RR_OP(clmulr, x31, x30, x29, 0x00000000, 0xbfffffff, -0x8000001, x1, 38*XLEN/8, x3)

inst_66:
// rs1_val == 2147483647, 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0x7fffffff;  op2val:0xffffff7f
TEST_RR_OP(clmulr, x31, x30, x29, 0x00000000, 0x7fffffff, 0xffffff7f, x1, 39*XLEN/8, x3)

inst_67:
// rs2_val == 2, 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0x4000;  op2val:0x2
TEST_RR_OP(clmulr, x31, x30, x29, 0x00000000, 0x4000, 0x2, x1, 40*XLEN/8, x3)

inst_68:
// rs2_val == 4, 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:-0x10001;  op2val:0x4
TEST_RR_OP(clmulr, x31, x30, x29, 0x00000000, -0x10001, 0x4, x1, 41*XLEN/8, x3)

inst_69:
// rs1_val == 33554432, 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0x2000000;  op2val:-0x1000001
TEST_RR_OP(clmulr, x31, x30, x29, 0x00000000, 0x2000000, -0x1000001, x1, 42*XLEN/8, x3)

inst_70:
// rs1_val == 134217728, 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0x8000000;  op2val:0xffffffff
TEST_RR_OP(clmulr, x31, x30, x29, 0x00000000, 0x8000000, 0xffffffff, x1, 43*XLEN/8, x3)

inst_71:
// rs1_val == 268435456, rs2_val == 16
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0x10000000;  op2val:0x10
TEST_RR_OP(clmulr, x31, x30, x29, 0x00000000, 0x10000000, 0x10, x1, 44*XLEN/8, x3)

inst_72:
// rs1_val == 536870912, rs2_val == 2863311530
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0x20000000;  op2val:0xaaaaaaaa
TEST_RR_OP(clmulr, x31, x30, x29, 0x00000000, 0x20000000, 0xaaaaaaaa, x1, 45*XLEN/8, x3)

inst_73:
// rs1_val == 1073741824, 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0x40000000;  op2val:0x400000
TEST_RR_OP(clmulr, x31, x30, x29, 0x00000000, 0x40000000, 0x400000, x1, 46*XLEN/8, x3)

inst_74:
// rs1_val == 2147483648, 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0x80000000;  op2val:-0x80000000
TEST_RR_OP(clmulr, x31, x30, x29, 0x00000000, 0x80000000, -0x80000000, x1, 47*XLEN/8, x3)

inst_75:
// rs1_val == 0x254a9493 and rs2_val == 0xc5521660 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0x254a9493;  op2val:-0x3aade9a0
TEST_RR_OP(clmulr, x31, x30, x29, 0x00000000, 0x254a9493, -0x3aade9a0, x1, 48*XLEN/8, x3)

inst_76:
// rs1_val == 0xb49c83dc and rs2_val == 0xbb61a9cd 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:-0x4b637c24;  op2val:-0x449e5633
TEST_RR_OP(clmulr, x31, x30, x29, 0x00000000, -0x4b637c24, -0x449e5633, x1, 49*XLEN/8, x3)

inst_77:
// rs1_val == 0xccce240c and rs2_val == 0x886c3a30 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:-0x3331dbf4;  op2val:-0x7793c5d0
TEST_RR_OP(clmulr, x31, x30, x29, 0x00000000, -0x3331dbf4, -0x7793c5d0, x1, 50*XLEN/8, x3)

inst_78:
// rs1_val == 0x74b8de87 and rs2_val == 0xf273b44c 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0x74b8de87;  op2val:-0xd8c4bb4
TEST_RR_OP(clmulr, x31, x30, x29, 0x00000000, 0x74b8de87, -0xd8c4bb4, x1, 51*XLEN/8, x3)

inst_79:
// rs1_val == 0x55d98c6e and rs2_val == 0x2daf9ac7 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0x55d98c6e;  op2val:0x2daf9ac7
TEST_RR_OP(clmulr, x31, x30, x29, 0x00000000, 0x55d98c6e, 0x2daf9ac7, x1, 52*XLEN/8, x3)

inst_80:
// rs1_val == 0x58d548aa and rs2_val == 0xa0569d76 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0x58d548aa;  op2val:-0x5fa9628a
TEST_RR_OP(clmulr, x31, x30, x29, 0x00000000, 0x58d548aa, -0x5fa9628a, x1, 53*XLEN/8, x3)

inst_81:
// rs1_val == 0x35f9377f and rs2_val == 0xf4c30307 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0x35f9377f;  op2val:-0xb3cfcf9
TEST_RR_OP(clmulr, x31, x30, x29, 0x00000000, 0x35f9377f, -0xb3cfcf9, x1, 54*XLEN/8, x3)

inst_82:
// rs1_val == 0x8e2eac2a and rs2_val == 0xd169a3f8 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:-0x71d153d6;  op2val:-0x2e965c08
TEST_RR_OP(clmulr, x31, x30, x29, 0x00000000, -0x71d153d6, -0x2e965c08, x1, 55*XLEN/8, x3)

inst_83:
// rs1_val == 0x1fc493ca and rs2_val == 0x65408c73 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0x1fc493ca;  op2val:0x65408c73
TEST_RR_OP(clmulr, x31, x30, x29, 0x00000000, 0x1fc493ca, 0x65408c73, x1, 56*XLEN/8, x3)

inst_84:
// rs1_val == 0x90efb625 and rs2_val == 0x3150e5fa 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:-0x6f1049db;  op2val:0x3150e5fa
TEST_RR_OP(clmulr, x31, x30, x29, 0x00000000, -0x6f1049db, 0x3150e5fa, x1, 57*XLEN/8, x3)

inst_85:
// rs1_val == 0xd75739f8 and rs2_val == 0xe6fff3d9 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:-0x28a8c608;  op2val:-0x19000c27
TEST_RR_OP(clmulr, x31, x30, x29, 0x00000000, -0x28a8c608, -0x19000c27, x1, 58*XLEN/8, x3)

inst_86:
// rs1_val == 0xf7f1305a and rs2_val == 0x9bedfe39 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:-0x80ecfa6;  op2val:-0x641201c7
TEST_RR_OP(clmulr, x31, x30, x29, 0x00000000, -0x80ecfa6, -0x641201c7, x1, 59*XLEN/8, x3)

inst_87:
// rs1_val == 0x9722c9a6 and rs2_val == 0x7bcad7c4 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:-0x68dd365a;  op2val:0x7bcad7c4
TEST_RR_OP(clmulr, x31, x30, x29, 0x00000000, -0x68dd365a, 0x7bcad7c4, x1, 60*XLEN/8, x3)

inst_88:
// rs1_val == 0xc2f1c53e and rs2_val == 0xd05668ae 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:-0x3d0e3ac2;  op2val:-0x2fa99752
TEST_RR_OP(clmulr, x31, x30, x29, 0x00000000, -0x3d0e3ac2, -0x2fa99752, x1, 61*XLEN/8, x3)

inst_89:
// rs1_val == 0xe3f4fca3 and rs2_val == 0xa6c9253a 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:-0x1c0b035d;  op2val:-0x5936dac6
TEST_RR_OP(clmulr, x31, x30, x29, 0x00000000, -0x1c0b035d, -0x5936dac6, x1, 62*XLEN/8, x3)

inst_90:
// rs1_val == 0x40a5ff52 and rs2_val == 0xb6f9706f 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0x40a5ff52;  op2val:-0x49068f91
TEST_RR_OP(clmulr, x31, x30, x29, 0x00000000, 0x40a5ff52, -0x49068f91, x1, 63*XLEN/8, x3)

inst_91:
// rs1_val == 0x952acffe and rs2_val == 0x25ae27ee 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:-0x6ad53002;  op2val:0x25ae27ee
TEST_RR_OP(clmulr, x31, x30, x29, 0x00000000, -0x6ad53002, 0x25ae27ee, x1, 64*XLEN/8, x3)

inst_92:
// rs1_val == 0xdc80d916 and rs2_val == 0x2a2a146d 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:-0x237f26ea;  op2val:0x2a2a146d
TEST_RR_OP(clmulr, x31, x30, x29, 0x00000000, -0x237f26ea, 0x2a2a146d, x1, 65*XLEN/8, x3)

inst_93:
// rs1_val == 0xc0fe15dd and rs2_val == 0x9f053821 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:-0x3f01ea23;  op2val:-0x60fac7df
TEST_RR_OP(clmulr, x31, x30, x29, 0x00000000, -0x3f01ea23, -0x60fac7df, x1, 66*XLEN/8, x3)

inst_94:
// rs1_val == 0x91766f62 and rs2_val == 0x5570084b 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:-0x6e89909e;  op2val:0x5570084b
TEST_RR_OP(clmulr, x31, x30, x29, 0x00000000, -0x6e89909e, 0x5570084b, x1, 67*XLEN/8, x3)

inst_95:
// rs2_val == 1431655765, rs1_val == 8
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0x8;  op2val:0x55555555
TEST_RR_OP(clmulr, x31, x30, x29, 0x00000000, 0x8, 0x55555555, x1, 68*XLEN/8, x3)

inst_96:
// rs1_val == 2863311530, 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaaa;  op2val:-0x4
TEST_RR_OP(clmulr, x31, x30, x29, 0x00000000, 0xaaaaaaaa, -0x4, x1, 69*XLEN/8, x3)

inst_97:
// rs2_val == 8, 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:-0x4001;  op2val:0x8
TEST_RR_OP(clmulr, x31, x30, x29, 0x00000000, -0x4001, 0x8, x1, 70*XLEN/8, x3)

inst_98:
// rs2_val == 32, 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0xfffffeff;  op2val:0x20
TEST_RR_OP(clmulr, x31, x30, x29, 0x00000000, 0xfffffeff, 0x20, x1, 71*XLEN/8, x3)

inst_99:
// rs2_val == 64, 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:-0x10000001;  op2val:0x40
TEST_RR_OP(clmulr, x31, x30, x29, 0x00000000, -0x10000001, 0x40, x1, 72*XLEN/8, x3)

inst_100:
// rs2_val == 128, 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:-0x1000001;  op2val:0x80
TEST_RR_OP(clmulr, x31, x30, x29, 0x00000000, -0x1000001, 0x80, x1, 73*XLEN/8, x3)

inst_101:
// rs2_val == 256, 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0x55555555;  op2val:0x100
TEST_RR_OP(clmulr, x31, x30, x29, 0x00000000, 0x55555555, 0x100, x1, 74*XLEN/8, x3)

inst_102:
// rs2_val == 1024, 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0x4;  op2val:0x400
TEST_RR_OP(clmulr, x31, x30, x29, 0x00000000, 0x4, 0x400, x1, 75*XLEN/8, x3)

inst_103:
// rs2_val == 2048, 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:-0x5;  op2val:0x800
TEST_RR_OP(clmulr, x31, x30, x29, 0x00000000, -0x5, 0x800, x1, 76*XLEN/8, x3)

inst_104:
// rs2_val == 16384, 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:-0x40000000;  op2val:0x4000
TEST_RR_OP(clmulr, x31, x30, x29, 0x00000000, -0x40000000, 0x4000, x1, 77*XLEN/8, x3)

inst_105:
// rs2_val == 32768, 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:-0x8000001;  op2val:0x8000
TEST_RR_OP(clmulr, x31, x30, x29, 0x00000000, -0x8000001, 0x8000, x1, 78*XLEN/8, x3)

inst_106:
// rs2_val == 65536, 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0xffdfffff;  op2val:0x10000
TEST_RR_OP(clmulr, x31, x30, x29, 0x00000000, 0xffdfffff, 0x10000, x1, 79*XLEN/8, x3)

inst_107:
// rs2_val == 131072, 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0x100;  op2val:0x20000
TEST_RR_OP(clmulr, x31, x30, x29, 0x00000000, 0x100, 0x20000, x1, 80*XLEN/8, x3)

inst_108:
// rs2_val == 262144, 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:-0x20001;  op2val:0x40000
TEST_RR_OP(clmulr, x31, x30, x29, 0x00000000, -0x20001, 0x40000, x1, 81*XLEN/8, x3)

inst_109:
// rs2_val == 524288, 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0x55555555;  op2val:0x80000
TEST_RR_OP(clmulr, x31, x30, x29, 0x00000000, 0x55555555, 0x80000, x1, 82*XLEN/8, x3)

inst_110:
// rs2_val == 1048576, 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0x12;  op2val:0x100000
TEST_RR_OP(clmulr, x31, x30, x29, 0x00000000, 0x12, 0x100000, x1, 83*XLEN/8, x3)

inst_111:
// rs2_val == 2097152, rs1_val == 524288
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0x80000;  op2val:0x200000
TEST_RR_OP(clmulr, x31, x30, x29, 0x00000000, 0x80000, 0x200000, x1, 84*XLEN/8, x3)

inst_112:
// rs2_val == 67108864, 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0xa;  op2val:0x4000000
TEST_RR_OP(clmulr, x31, x30, x29, 0x00000000, 0xa, 0x4000000, x1, 85*XLEN/8, x3)

inst_113:
// rs2_val == 268435456, 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffb;  op2val:0x10000000
TEST_RR_OP(clmulr, x31, x30, x29, 0x00000000, 0xfffffffb, 0x10000000, x1, 86*XLEN/8, x3)

inst_114:
// rs2_val == 536870912, 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0xfffffeff;  op2val:0x20000000
TEST_RR_OP(clmulr, x31, x30, x29, 0x00000000, 0xfffffeff, 0x20000000, x1, 87*XLEN/8, x3)

inst_115:
// rs2_val == 2147483648, 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0x3fffffff;  op2val:0x80000000
TEST_RR_OP(clmulr, x31, x30, x29, 0x00000000, 0x3fffffff, 0x80000000, x1, 88*XLEN/8, x3)

inst_116:
// rs1_val == 2, 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0x2;  op2val:0x4
TEST_RR_OP(clmulr, x31, x30, x29, 0x00000000, 0x2, 0x4, x1, 89*XLEN/8, x3)

inst_117:
// rs1_val == 16, 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0x10;  op2val:0x100
TEST_RR_OP(clmulr, x31, x30, x29, 0x00000000, 0x10, 0x100, x1, 90*XLEN/8, x3)

inst_118:
// rs1_val == 64, 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0x40;  op2val:0xfdffffff
TEST_RR_OP(clmulr, x31, x30, x29, 0x00000000, 0x40, 0xfdffffff, x1, 91*XLEN/8, x3)

inst_119:
// rs1_val == 128, 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0x80;  op2val:0x7fffffff
TEST_RR_OP(clmulr, x31, x30, x29, 0x00000000, 0x80, 0x7fffffff, x1, 92*XLEN/8, x3)

inst_120:
// rs1_val == 512, 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0x200;  op2val:0x200
TEST_RR_OP(clmulr, x31, x30, x29, 0x00000000, 0x200, 0x200, x1, 93*XLEN/8, x3)

inst_121:
// rs1_val == 4096, 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0x1000;  op2val:-0x801
TEST_RR_OP(clmulr, x31, x30, x29, 0x00000000, 0x1000, -0x801, x1, 94*XLEN/8, x3)

inst_122:
// rs1_val == 8192, 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0x2000;  op2val:0xffffefff
TEST_RR_OP(clmulr, x31, x30, x29, 0x00000000, 0x2000, 0xffffefff, x1, 95*XLEN/8, x3)

inst_123:
// rs1_val == 32768, 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0x8000;  op2val:0xc
TEST_RR_OP(clmulr, x31, x30, x29, 0x00000000, 0x8000, 0xc, x1, 96*XLEN/8, x3)

inst_124:
// rs1_val == 262144, 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0x40000;  op2val:0x8
TEST_RR_OP(clmulr, x31, x30, x29, 0x00000000, 0x40000, 0x8, x1, 97*XLEN/8, x3)

inst_125:
// rs1_val == 1048576, 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0x100000;  op2val:-0x801
TEST_RR_OP(clmulr, x31, x30, x29, 0x00000000, 0x100000, -0x801, x1, 98*XLEN/8, x3)

inst_126:
// rs1_val == 4194304, 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0x400000;  op2val:0xfffffffe
TEST_RR_OP(clmulr, x31, x30, x29, 0x00000000, 0x400000, 0xfffffffe, x1, 99*XLEN/8, x3)

inst_127:
// rs1_val == 8388608, 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0x800000;  op2val:-0x201
TEST_RR_OP(clmulr, x31, x30, x29, 0x00000000, 0x800000, -0x201, x1, 100*XLEN/8, x3)

inst_128:
// rs1_val==0 and rs2_val==0, 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0x0;  op2val:0x0
TEST_RR_OP(clmulr, x31, x30, x29, 0x00000000, 0x0, 0x0, x1, 101*XLEN/8, x3)

inst_129:
// rs1_val==0 and rs2_val==1, rs2_val == 1
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0x0;  op2val:0x1
TEST_RR_OP(clmulr, x31, x30, x29, 0x00000000, 0x0, 0x1, x1, 102*XLEN/8, x3)

inst_130:
// rs2_val == 4294967279, rs1_val == 67108864
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0x4000000;  op2val:0xffffffef
TEST_RR_OP(clmulr, x31, x30, x29, 0x00000000, 0x4000000, 0xffffffef, x1, 103*XLEN/8, x3)

inst_131:
// rs2_val == 4294966271, rs1_val == 4
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0x4;  op2val:0xfffffbff
TEST_RR_OP(clmulr, x31, x30, x29, 0x00000000, 0x4, 0xfffffbff, x1, 104*XLEN/8, x3)

inst_132:
// rs2_val == 4293918719, rs1_val == 4160749567
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0xf7ffffff;  op2val:0xffefffff
TEST_RR_OP(clmulr, x31, x30, x29, 0x00000000, 0xf7ffffff, 0xffefffff, x1, 105*XLEN/8, x3)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;



signature_x7_0:
    .fill 0*((XLEN/8)/4),4,0xdeadbeef


signature_x7_1:
    .fill 14*((XLEN/8)/4),4,0xdeadbeef


signature_x2_0:
    .fill 13*((XLEN/8)/4),4,0xdeadbeef


signature_x1_0:
    .fill 106*((XLEN/8)/4),4,0xdeadbeef

#ifdef rvtest_mtrap_routine
tsig_begin_canary:
CANARY;

mtrap_sigptr:
    .fill 64*XLEN/32,4,0xdeadbeef

tsig_end_canary:
CANARY;
#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif


sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
