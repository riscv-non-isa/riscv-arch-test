
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.12.2
// timestamp : Wed Sep 25 06:02:02 2024 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /home/riscv/testing/riscv-ctg/sample_cgfs/dataset.cgf \
//                  --cgf /home/riscv/testing/riscv-ctg/sample_cgfs/sample_cgfs_fext/RV32Zhinx/rv32h_fsub.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fsub.h instruction of the RISC-V RV32_Zfinx_Zhinx,RV64_Zfinx_Zhinx extension for the fsub_b12 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32I_Zfinx_Zhinx,RV64I_Zfinx_Zhinx")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*Zfinx.*Zhinx.*);def TEST_CASE_1=True;",fsub_b12)

RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x10,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_0:
// rs1 == rs2 == rd, rs1==x18, rs2==x18, rd==x18,fs1 == 0 and fe1 == 0x1c and fm1 == 0x04c and fs2 == 1 and fe2 == 0x1e and fm2 == 0x1b3 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x0000 and rs2_sgn_prefix == 0xffff  
/* opcode: fsub.h ; op1:x18; op2:x18; dest:x18; op1val:0x704c; op2val:0x704c;
   valaddr_reg:x10; val_offset:0*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:??; testreg:x9*/
TEST_FPRR_OP(fsub.h, x18, x18, x18, dyn, 0, 0, x10, 0*FLEN/8, x22, x1, x9)

inst_1:
// rs2 == rd != rs1, rs1==x14, rs2==x3, rd==x3,fs1 == 0 and fe1 == 0x1e and fm1 == 0x21b and fs2 == 0 and fe2 == 0x1e and fm2 == 0x011 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x0000 and rs2_sgn_prefix == 0x0000  
/* opcode: fsub.h ; op1:x14; op2:x3; dest:x3; op1val:0x7a1b; op2val:0x7811;
   valaddr_reg:x10; val_offset:2*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:??; testreg:x9*/
TEST_FPRR_OP(fsub.h, x3, x14, x3, dyn, 0, 0, x10, 2*FLEN/8, x22, x1, x9)

inst_2:
// rs1 == rd != rs2, rs1==x12, rs2==x17, rd==x12,fs1 == 0 and fe1 == 0x1d and fm1 == 0x3ec and fs2 == 0 and fe2 == 0x1a and fm2 == 0x1e0 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x0000 and rs2_sgn_prefix == 0x0000  
/* opcode: fsub.h ; op1:x12; op2:x17; dest:x12; op1val:0x77ec; op2val:0x69e0;
   valaddr_reg:x10; val_offset:4*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:??; testreg:x9*/
TEST_FPRR_OP(fsub.h, x12, x12, x17, dyn, 0, 0, x10, 4*FLEN/8, x22, x1, x9)

inst_3:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x17, rs2==x15, rd==x2,fs1 == 0 and fe1 == 0x1e and fm1 == 0x135 and fs2 == 1 and fe2 == 0x1c and fm2 == 0x062 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x0000 and rs2_sgn_prefix == 0xffff  
/* opcode: fsub.h ; op1:x17; op2:x15; dest:x2; op1val:0x7935; op2val:0xf062;
   valaddr_reg:x10; val_offset:6*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:??; testreg:x9*/
TEST_FPRR_OP(fsub.h, x2, x17, x15, dyn, 0, 0, x10, 6*FLEN/8, x22, x1, x9)

inst_4:
// rs1 == rs2 != rd, rs1==x29, rs2==x29, rd==x6,fs1 == 0 and fe1 == 0x1b and fm1 == 0x201 and fs2 == 0 and fe2 == 0x1b and fm2 == 0x030 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x0000 and rs2_sgn_prefix == 0x0000  
/* opcode: fsub.h ; op1:x29; op2:x29; dest:x6; op1val:0x6e01; op2val:0x6e01;
   valaddr_reg:x10; val_offset:8*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:??; testreg:x9*/
TEST_FPRR_OP(fsub.h, x6, x29, x29, dyn, 0, 0, x10, 8*FLEN/8, x22, x1, x9)

inst_5:
// rs1==x13, rs2==x8, rd==x5,fs1 == 0 and fe1 == 0x1e and fm1 == 0x2ae and fs2 == 0 and fe2 == 0x1d and fm2 == 0x271 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x0000 and rs2_sgn_prefix == 0x0000  
/* opcode: fsub.h ; op1:x13; op2:x8; dest:x5; op1val:0x7aae; op2val:0x7671;
   valaddr_reg:x10; val_offset:10*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:??; testreg:x9*/
TEST_FPRR_OP(fsub.h, x5, x13, x8, dyn, 0, 0, x10, 10*FLEN/8, x22, x1, x9)

inst_6:
// rs1==x20, rs2==x6, rd==x29,fs1 == 0 and fe1 == 0x1e and fm1 == 0x218 and fs2 == 0 and fe2 == 0x1e and fm2 == 0x214 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x0000 and rs2_sgn_prefix == 0x0000  
/* opcode: fsub.h ; op1:x20; op2:x6; dest:x29; op1val:0x7a18; op2val:0x7a14;
   valaddr_reg:x10; val_offset:12*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:??; testreg:x9*/
TEST_FPRR_OP(fsub.h, x29, x20, x6, dyn, 0, 0, x10, 12*FLEN/8, x22, x1, x9)

inst_7:
// rs1==x2, rs2==x13, rd==x27,fs1 == 0 and fe1 == 0x1d and fm1 == 0x31f and fs2 == 1 and fe2 == 0x1d and fm2 == 0x06a and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x0000 and rs2_sgn_prefix == 0xffff  
/* opcode: fsub.h ; op1:x2; op2:x13; dest:x27; op1val:0x771f; op2val:0xf46a;
   valaddr_reg:x10; val_offset:14*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:??; testreg:x9*/
TEST_FPRR_OP(fsub.h, x27, x2, x13, dyn, 0, 0, x10, 14*FLEN/8, x22, x1, x9)

inst_8:
// rs1==x8, rs2==x27, rd==x14,fs1 == 0 and fe1 == 0x1c and fm1 == 0x351 and fs2 == 1 and fe2 == 0x1e and fm2 == 0x1ba and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x0000 and rs2_sgn_prefix == 0xffff  
/* opcode: fsub.h ; op1:x8; op2:x27; dest:x14; op1val:0x7351; op2val:0xf9ba;
   valaddr_reg:x10; val_offset:16*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:??; testreg:x9*/
TEST_FPRR_OP(fsub.h, x14, x8, x27, dyn, 0, 0, x10, 16*FLEN/8, x22, x1, x9)

inst_9:
// rs1==x11, rs2==x23, rd==x4,fs1 == 0 and fe1 == 0x1e and fm1 == 0x335 and fs2 == 0 and fe2 == 0x1e and fm2 == 0x2f6 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x0000 and rs2_sgn_prefix == 0x0000  
/* opcode: fsub.h ; op1:x11; op2:x23; dest:x4; op1val:0x7b35; op2val:0x7af6;
   valaddr_reg:x10; val_offset:18*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:??; testreg:x9*/
TEST_FPRR_OP(fsub.h, x4, x11, x23, dyn, 0, 0, x10, 18*FLEN/8, x22, x1, x9)

inst_10:
// rs1==x21, rs2==x12, rd==x13,fs1 == 0 and fe1 == 0x19 and fm1 == 0x282 and fs2 == 1 and fe2 == 0x1e and fm2 == 0x020 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x0000 and rs2_sgn_prefix == 0xffff  
/* opcode: fsub.h ; op1:x21; op2:x12; dest:x13; op1val:0x6682; op2val:0xf820;
   valaddr_reg:x10; val_offset:20*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:??; testreg:x9*/
TEST_FPRR_OP(fsub.h, x13, x21, x12, dyn, 0, 0, x10, 20*FLEN/8, x22, x1, x9)

inst_11:
// rs1==x15, rs2==x7, rd==x31,fs1 == 0 and fe1 == 0x1e and fm1 == 0x382 and fs2 == 0 and fe2 == 0x1e and fm2 == 0x076 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x0000 and rs2_sgn_prefix == 0x0000  
/* opcode: fsub.h ; op1:x15; op2:x7; dest:x31; op1val:0x7b82; op2val:0x7876;
   valaddr_reg:x10; val_offset:22*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:??; testreg:x9*/
TEST_FPRR_OP(fsub.h, x31, x15, x7, dyn, 0, 0, x10, 22*FLEN/8, x22, x1, x9)

inst_12:
// rs1==x26, rs2==x19, rd==x16,fs1 == 0 and fe1 == 0x1c and fm1 == 0x2ed and fs2 == 1 and fe2 == 0x1c and fm2 == 0x292 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x0000 and rs2_sgn_prefix == 0xffff  
/* opcode: fsub.h ; op1:x26; op2:x19; dest:x16; op1val:0x72ed; op2val:0xf292;
   valaddr_reg:x10; val_offset:24*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:??; testreg:x9*/
TEST_FPRR_OP(fsub.h, x16, x26, x19, dyn, 0, 0, x10, 24*FLEN/8, x22, x1, x9)
RVTEST_VALBASEUPD(x13,test_dataset_1)

inst_13:
// rs1==x22, rs2==x14, rd==x8,fs1 == 0 and fe1 == 0x19 and fm1 == 0x36e and fs2 == 1 and fe2 == 0x1c and fm2 == 0x229 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x0000 and rs2_sgn_prefix == 0xffff  
/* opcode: fsub.h ; op1:x22; op2:x14; dest:x8; op1val:0x676e; op2val:0xf229;
   valaddr_reg:x13; val_offset:0*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:??; testreg:x9*/
TEST_FPRR_OP(fsub.h, x8, x22, x14, dyn, 0, 0, x13, 0*FLEN/8, x16, x1, x9)

inst_14:
// rs1==x31, rs2==x4, rd==x10,fs1 == 0 and fe1 == 0x1d and fm1 == 0x300 and fs2 == 1 and fe2 == 0x1a and fm2 == 0x369 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x0000 and rs2_sgn_prefix == 0xffff  
/* opcode: fsub.h ; op1:x31; op2:x4; dest:x10; op1val:0x7700; op2val:0xeb69;
   valaddr_reg:x13; val_offset:2*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:??; testreg:x9*/
TEST_FPRR_OP(fsub.h, x10, x31, x4, dyn, 0, 0, x13, 2*FLEN/8, x16, x1, x9)

inst_15:
// rs1==x0, rs2==x20, rd==x15,fs1 == 0 and fe1 == 0x1c and fm1 == 0x374 and fs2 == 0 and fe2 == 0x16 and fm2 == 0x084 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x0000 and rs2_sgn_prefix == 0x0000  
/* opcode: fsub.h ; op1:x0; op2:x20; dest:x15; op1val:0x0; op2val:0x5884;
   valaddr_reg:x13; val_offset:4*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:??; testreg:x12*/
TEST_FPRR_OP(fsub.h, x15, x0, x20, dyn, 0, 0, x13, 4*FLEN/8, x16, x1, x12)

inst_16:
// rs1==x30, rs2==x5, rd==x11,fs1 == 0 and fe1 == 0x1c and fm1 == 0x2ff and fs2 == 1 and fe2 == 0x1c and fm2 == 0x3b3 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x0000 and rs2_sgn_prefix == 0xffff  
/* opcode: fsub.h ; op1:x30; op2:x5; dest:x11; op1val:0x72ff; op2val:0xf3b3;
   valaddr_reg:x13; val_offset:6*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:??; testreg:x12*/
TEST_FPRR_OP(fsub.h, x11, x30, x5, dyn, 0, 0, x13, 6*FLEN/8, x16, x1, x12)
RVTEST_SIGBASE(x8,signature_x8_0)

inst_17:
// rs1==x6, rs2==x25, rd==x9,fs1 == 0 and fe1 == 0x1d and fm1 == 0x0a2 and fs2 == 0 and fe2 == 0x1d and fm2 == 0x04a and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x0000 and rs2_sgn_prefix == 0x0000  
/* opcode: fsub.h ; op1:x6; op2:x25; dest:x9; op1val:0x74a2; op2val:0x744a;
   valaddr_reg:x13; val_offset:8*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:??; testreg:x12*/
TEST_FPRR_OP(fsub.h, x9, x6, x25, dyn, 0, 0, x13, 8*FLEN/8, x16, x8, x12)

inst_18:
// rs1==x9, rs2==x31, rd==x21,fs1 == 0 and fe1 == 0x1e and fm1 == 0x2b2 and fs2 == 0 and fe2 == 0x1d and fm2 == 0x07e and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x0000 and rs2_sgn_prefix == 0x0000  
/* opcode: fsub.h ; op1:x9; op2:x31; dest:x21; op1val:0x7ab2; op2val:0x747e;
   valaddr_reg:x13; val_offset:10*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:??; testreg:x12*/
TEST_FPRR_OP(fsub.h, x21, x9, x31, dyn, 0, 0, x13, 10*FLEN/8, x16, x8, x12)

inst_19:
// rs1==x27, rs2==x2, rd==x0,fs1 == 0 and fe1 == 0x1e and fm1 == 0x122 and fs2 == 0 and fe2 == 0x1d and fm2 == 0x34c and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x0000 and rs2_sgn_prefix == 0x0000  
/* opcode: fsub.h ; op1:x27; op2:x2; dest:x0; op1val:0x7922; op2val:0x774c;
   valaddr_reg:x13; val_offset:12*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:??; testreg:x12*/
TEST_FPRR_OP(fsub.h, x0, x27, x2, dyn, 0, 0, x13, 12*FLEN/8, x16, x8, x12)

inst_20:
// rs1==x28, rs2==x0, rd==x23,fs1 == 0 and fe1 == 0x1e and fm1 == 0x3ef and fs2 == 0 and fe2 == 0x1c and fm2 == 0x03d and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x0000 and rs2_sgn_prefix == 0x0000  
/* opcode: fsub.h ; op1:x28; op2:x0; dest:x23; op1val:0x7bef; op2val:0x0;
   valaddr_reg:x13; val_offset:14*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:??; testreg:x12*/
TEST_FPRR_OP(fsub.h, x23, x28, x0, dyn, 0, 0, x13, 14*FLEN/8, x16, x8, x12)

inst_21:
// rs1==x7, rs2==x9, rd==x24,fs1 == 0 and fe1 == 0x1b and fm1 == 0x3bb and fs2 == 1 and fe2 == 0x1c and fm2 == 0x2c6 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x0000 and rs2_sgn_prefix == 0xffff  
/* opcode: fsub.h ; op1:x7; op2:x9; dest:x24; op1val:0x6fbb; op2val:0xf2c6;
   valaddr_reg:x13; val_offset:16*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:??; testreg:x12*/
TEST_FPRR_OP(fsub.h, x24, x7, x9, dyn, 0, 0, x13, 16*FLEN/8, x16, x8, x12)

inst_22:
// rs1==x3, rs2==x10, rd==x30,fs1 == 0 and fe1 == 0x1e and fm1 == 0x1c4 and fs2 == 0 and fe2 == 0x18 and fm2 == 0x143 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x0000 and rs2_sgn_prefix == 0x0000  
/* opcode: fsub.h ; op1:x3; op2:x10; dest:x30; op1val:0x79c4; op2val:0x6143;
   valaddr_reg:x13; val_offset:18*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:??; testreg:x12*/
TEST_FPRR_OP(fsub.h, x30, x3, x10, dyn, 0, 0, x13, 18*FLEN/8, x16, x8, x12)

inst_23:
// rs1==x5, rs2==x11, rd==x17,fs1 == 0 and fe1 == 0x1e and fm1 == 0x37c and fs2 == 0 and fe2 == 0x1e and fm2 == 0x01c and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x0000 and rs2_sgn_prefix == 0x0000  
/* opcode: fsub.h ; op1:x5; op2:x11; dest:x17; op1val:0x7b7c; op2val:0x781c;
   valaddr_reg:x13; val_offset:20*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:??; testreg:x12*/
TEST_FPRR_OP(fsub.h, x17, x5, x11, dyn, 0, 0, x13, 20*FLEN/8, x16, x8, x12)
RVTEST_VALBASEUPD(x3,test_dataset_2)

inst_24:
// rs1==x10, rs2==x26, rd==x25,fs1 == 0 and fe1 == 0x1e and fm1 == 0x2a3 and fs2 == 0 and fe2 == 0x1c and fm2 == 0x11b and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x0000 and rs2_sgn_prefix == 0x0000  
/* opcode: fsub.h ; op1:x10; op2:x26; dest:x25; op1val:0x7aa3; op2val:0x711b;
   valaddr_reg:x3; val_offset:0*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:??; testreg:x12*/
TEST_FPRR_OP(fsub.h, x25, x10, x26, dyn, 0, 0, x3, 0*FLEN/8, x6, x8, x12)

inst_25:
// rs1==x1, rs2==x28, rd==x26,fs1 == 0 and fe1 == 0x1d and fm1 == 0x0d9 and fs2 == 1 and fe2 == 0x1d and fm2 == 0x08b and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x0000 and rs2_sgn_prefix == 0xffff  
/* opcode: fsub.h ; op1:x1; op2:x28; dest:x26; op1val:0x74d9; op2val:0xf48b;
   valaddr_reg:x3; val_offset:2*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:??; testreg:x12*/
TEST_FPRR_OP(fsub.h, x26, x1, x28, dyn, 0, 0, x3, 2*FLEN/8, x6, x8, x12)

inst_26:
// rs1==x16, rs2==x22, rd==x28,fs1 == 0 and fe1 == 0x1e and fm1 == 0x30e and fs2 == 0 and fe2 == 0x1a and fm2 == 0x0a4 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x0000 and rs2_sgn_prefix == 0x0000  
/* opcode: fsub.h ; op1:x16; op2:x22; dest:x28; op1val:0x7b0e; op2val:0x68a4;
   valaddr_reg:x3; val_offset:4*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:??; testreg:x12*/
TEST_FPRR_OP(fsub.h, x28, x16, x22, dyn, 0, 0, x3, 4*FLEN/8, x6, x8, x12)

inst_27:
// rs1==x25, rs2==x16, rd==x19,fs1 == 0 and fe1 == 0x1e and fm1 == 0x00a and fs2 == 1 and fe2 == 0x1b and fm2 == 0x15b and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x0000 and rs2_sgn_prefix == 0xffff  
/* opcode: fsub.h ; op1:x25; op2:x16; dest:x19; op1val:0x780a; op2val:0xed5b;
   valaddr_reg:x3; val_offset:6*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:??; testreg:x12*/
TEST_FPRR_OP(fsub.h, x19, x25, x16, dyn, 0, 0, x3, 6*FLEN/8, x6, x8, x12)

inst_28:
// rs1==x19, rs2==x30, rd==x20,fs1 == 0 and fe1 == 0x1a and fm1 == 0x06a and fs2 == 1 and fe2 == 0x1c and fm2 == 0x2a8 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x0000 and rs2_sgn_prefix == 0xffff  
/* opcode: fsub.h ; op1:x19; op2:x30; dest:x20; op1val:0x686a; op2val:0xf2a8;
   valaddr_reg:x3; val_offset:8*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:??; testreg:x12*/
TEST_FPRR_OP(fsub.h, x20, x19, x30, dyn, 0, 0, x3, 8*FLEN/8, x6, x8, x12)

inst_29:
// rs1==x24, rs2==x21, rd==x7,fs1 == 0 and fe1 == 0x1e and fm1 == 0x260 and fs2 == 0 and fe2 == 0x1d and fm2 == 0x220 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x0000 and rs2_sgn_prefix == 0x0000  
/* opcode: fsub.h ; op1:x24; op2:x21; dest:x7; op1val:0x7a60; op2val:0x7620;
   valaddr_reg:x3; val_offset:10*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:??; testreg:x12*/
TEST_FPRR_OP(fsub.h, x7, x24, x21, dyn, 0, 0, x3, 10*FLEN/8, x6, x8, x12)

inst_30:
// rs1==x4, rs2==x24, rd==x22,fs1 == 0 and fe1 == 0x1c and fm1 == 0x188 and fs2 == 1 and fe2 == 0x1d and fm2 == 0x202 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x0000 and rs2_sgn_prefix == 0xffff  
/* opcode: fsub.h ; op1:x4; op2:x24; dest:x22; op1val:0x7188; op2val:0xf602;
   valaddr_reg:x3; val_offset:12*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:??; testreg:x12*/
TEST_FPRR_OP(fsub.h, x22, x4, x24, dyn, 0, 0, x3, 12*FLEN/8, x6, x8, x12)

inst_31:
// rs1==x23,fs1 == 0 and fe1 == 0x1e and fm1 == 0x19f and fs2 == 0 and fe2 == 0x19 and fm2 == 0x34e and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x0000 and rs2_sgn_prefix == 0x0000  
/* opcode: fsub.h ; op1:x23; op2:x22; dest:x0; op1val:0x799f; op2val:0x674e;
   valaddr_reg:x3; val_offset:14*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:??; testreg:x2*/
TEST_FPRR_OP(fsub.h, x0, x23, x22, dyn, 0, 0, x3, 14*FLEN/8, x6, x8, x2)

inst_32:
// rs2==x1,fs1 == 0 and fe1 == 0x1d and fm1 == 0x1fe and fs2 == 1 and fe2 == 0x1b and fm2 == 0x01c and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x0000 and rs2_sgn_prefix == 0xffff  
/* opcode: fsub.h ; op1:x26; op2:x1; dest:x31; op1val:0x75fe; op2val:0xec1c;
   valaddr_reg:x3; val_offset:16*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:??; testreg:x2*/
TEST_FPRR_OP(fsub.h, x31, x26, x1, dyn, 0, 0, x3, 16*FLEN/8, x6, x8, x2)

inst_33:
// rd==x1,fs1 == 0 and fe1 == 0x1e and fm1 == 0x010 and fs2 == 1 and fe2 == 0x1d and fm2 == 0x051 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x0000 and rs2_sgn_prefix == 0xffff  
/* opcode: fsub.h ; op1:x5; op2:x21; dest:x1; op1val:0x7810; op2val:0xf451;
   valaddr_reg:x3; val_offset:18*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:??; testreg:x2*/
TEST_FPRR_OP(fsub.h, x1, x5, x21, dyn, 0, 0, x3, 18*FLEN/8, x6, x8, x2)

inst_34:
// fs1 == 0 and fe1 == 0x1e and fm1 == 0x02a and fs2 == 0 and fe2 == 0x1c and fm2 == 0x015 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x0000 and rs2_sgn_prefix == 0x0000  
/* opcode: fsub.h ; op1:x30; op2:x29; dest:x31; op1val:0x782a; op2val:0x7015;
   valaddr_reg:x3; val_offset:20*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:??; testreg:x2*/
TEST_FPRR_OP(fsub.h, x31, x30, x29, dyn, 0, 0, x3, 20*FLEN/8, x6, x8, x2)

inst_35:
// fs1 == 0 and fe1 == 0x1d and fm1 == 0x3d4 and fs2 == 0 and fe2 == 0x1d and fm2 == 0x35b and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x0000 and rs2_sgn_prefix == 0x0000  
/* opcode: fsub.h ; op1:x30; op2:x29; dest:x31; op1val:0x77d4; op2val:0x775b;
   valaddr_reg:x3; val_offset:22*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:??; testreg:x2*/
TEST_FPRR_OP(fsub.h, x31, x30, x29, dyn, 0, 0, x3, 22*FLEN/8, x6, x8, x2)

inst_36:
// fs1 == 0 and fe1 == 0x1a and fm1 == 0x190 and fs2 == 1 and fe2 == 0x1e and fm2 == 0x146 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x0000 and rs2_sgn_prefix == 0xffff  
/* opcode: fsub.h ; op1:x30; op2:x29; dest:x31; op1val:0x6990; op2val:0xf946;
   valaddr_reg:x3; val_offset:24*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:??; testreg:x2*/
TEST_FPRR_OP(fsub.h, x31, x30, x29, dyn, 0, 0, x3, 24*FLEN/8, x6, x8, x2)

inst_37:
// fs1 == 0 and fe1 == 0x1e and fm1 == 0x3dc and fs2 == 0 and fe2 == 0x1d and fm2 == 0x23c and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x0000 and rs2_sgn_prefix == 0x0000  
/* opcode: fsub.h ; op1:x30; op2:x29; dest:x31; op1val:0x7bdc; op2val:0x763c;
   valaddr_reg:x3; val_offset:26*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:??; testreg:x2*/
TEST_FPRR_OP(fsub.h, x31, x30, x29, dyn, 0, 0, x3, 26*FLEN/8, x6, x8, x2)

inst_38:
// fs1 == 0 and fe1 == 0x1d and fm1 == 0x24b and fs2 == 0 and fe2 == 0x1c and fm2 == 0x323 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x0000 and rs2_sgn_prefix == 0x0000  
/* opcode: fsub.h ; op1:x30; op2:x29; dest:x31; op1val:0x764b; op2val:0x7323;
   valaddr_reg:x3; val_offset:28*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:??; testreg:x2*/
TEST_FPRR_OP(fsub.h, x31, x30, x29, dyn, 0, 0, x3, 28*FLEN/8, x6, x8, x2)

inst_39:
// fs1 == 0 and fe1 == 0x1e and fm1 == 0x004 and fs2 == 1 and fe2 == 0x1d and fm2 == 0x3ac and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x0000 and rs2_sgn_prefix == 0xffff  
/* opcode: fsub.h ; op1:x30; op2:x29; dest:x31; op1val:0x7804; op2val:0xf7ac;
   valaddr_reg:x3; val_offset:30*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:??; testreg:x2*/
TEST_FPRR_OP(fsub.h, x31, x30, x29, dyn, 0, 0, x3, 30*FLEN/8, x6, x8, x2)

inst_40:
// fs1 == 0 and fe1 == 0x1e and fm1 == 0x229 and fs2 == 0 and fe2 == 0x1c and fm2 == 0x362 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x0000 and rs2_sgn_prefix == 0x0000  
/* opcode: fsub.h ; op1:x30; op2:x29; dest:x31; op1val:0x7a29; op2val:0x7362;
   valaddr_reg:x3; val_offset:32*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:??; testreg:x2*/
TEST_FPRR_OP(fsub.h, x31, x30, x29, dyn, 0, 0, x3, 32*FLEN/8, x6, x8, x2)

inst_41:
// fs1 == 0 and fe1 == 0x1e and fm1 == 0x2e1 and fs2 == 0 and fe2 == 0x1e and fm2 == 0x105 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x0000 and rs2_sgn_prefix == 0x0000  
/* opcode: fsub.h ; op1:x30; op2:x29; dest:x31; op1val:0x7ae1; op2val:0x7905;
   valaddr_reg:x3; val_offset:34*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:??; testreg:x2*/
TEST_FPRR_OP(fsub.h, x31, x30, x29, dyn, 0, 0, x3, 34*FLEN/8, x6, x8, x2)

inst_42:
// fs1 == 0 and fe1 == 0x1e and fm1 == 0x01b and fs2 == 1 and fe2 == 0x1d and fm2 == 0x304 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x0000 and rs2_sgn_prefix == 0xffff  
/* opcode: fsub.h ; op1:x30; op2:x29; dest:x31; op1val:0x781b; op2val:0xf704;
   valaddr_reg:x3; val_offset:36*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:??; testreg:x2*/
TEST_FPRR_OP(fsub.h, x31, x30, x29, dyn, 0, 0, x3, 36*FLEN/8, x6, x8, x2)

inst_43:
// fs1 == 0 and fe1 == 0x1e and fm1 == 0x09e and fs2 == 0 and fe2 == 0x1b and fm2 == 0x397 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x0000 and rs2_sgn_prefix == 0x0000  
/* opcode: fsub.h ; op1:x30; op2:x29; dest:x31; op1val:0x789e; op2val:0x6f97;
   valaddr_reg:x3; val_offset:38*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:??; testreg:x2*/
TEST_FPRR_OP(fsub.h, x31, x30, x29, dyn, 0, 0, x3, 38*FLEN/8, x6, x8, x2)

inst_44:
// fs1 == 0 and fe1 == 0x1d and fm1 == 0x04e and fs2 == 1 and fe2 == 0x1d and fm2 == 0x075 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x0000 and rs2_sgn_prefix == 0xffff  
/* opcode: fsub.h ; op1:x30; op2:x29; dest:x31; op1val:0x744e; op2val:0xf475;
   valaddr_reg:x3; val_offset:40*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:??; testreg:x2*/
TEST_FPRR_OP(fsub.h, x31, x30, x29, dyn, 0, 0, x3, 40*FLEN/8, x6, x8, x2)

inst_45:
// fs1 == 0 and fe1 == 0x1e and fm1 == 0x3a7 and fs2 == 0 and fe2 == 0x1e and fm2 == 0x39b and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x0000 and rs2_sgn_prefix == 0x0000  
/* opcode: fsub.h ; op1:x30; op2:x29; dest:x31; op1val:0x7ba7; op2val:0x7b9b;
   valaddr_reg:x3; val_offset:42*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:??; testreg:x2*/
TEST_FPRR_OP(fsub.h, x31, x30, x29, dyn, 0, 0, x3, 42*FLEN/8, x6, x8, x2)

inst_46:
// fs1 == 0 and fe1 == 0x1e and fm1 == 0x244 and fs2 == 1 and fe2 == 0x1a and fm2 == 0x0b6 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x0000 and rs2_sgn_prefix == 0xffff  
/* opcode: fsub.h ; op1:x30; op2:x29; dest:x31; op1val:0x7a44; op2val:0xe8b6;
   valaddr_reg:x3; val_offset:44*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:??; testreg:x2*/
TEST_FPRR_OP(fsub.h, x31, x30, x29, dyn, 0, 0, x3, 44*FLEN/8, x6, x8, x2)

inst_47:
// fs1 == 0 and fe1 == 0x1e and fm1 == 0x316 and fs2 == 0 and fe2 == 0x1c and fm2 == 0x0a8 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x0000 and rs2_sgn_prefix == 0x0000  
/* opcode: fsub.h ; op1:x30; op2:x29; dest:x31; op1val:0x7b16; op2val:0x70a8;
   valaddr_reg:x3; val_offset:46*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:??; testreg:x2*/
TEST_FPRR_OP(fsub.h, x31, x30, x29, dyn, 0, 0, x3, 46*FLEN/8, x6, x8, x2)

inst_48:
// fs1 == 0 and fe1 == 0x1e and fm1 == 0x278 and fs2 == 0 and fe2 == 0x1d and fm2 == 0x0a5 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x0000 and rs2_sgn_prefix == 0x0000  
/* opcode: fsub.h ; op1:x30; op2:x29; dest:x31; op1val:0x7a78; op2val:0x74a5;
   valaddr_reg:x3; val_offset:48*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:??; testreg:x2*/
TEST_FPRR_OP(fsub.h, x31, x30, x29, dyn, 0, 0, x3, 48*FLEN/8, x6, x8, x2)

inst_49:
// fs1 == 0 and fe1 == 0x1e and fm1 == 0x07d and fs2 == 0 and fe2 == 0x1c and fm2 == 0x053 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x0000 and rs2_sgn_prefix == 0x0000  
/* opcode: fsub.h ; op1:x30; op2:x29; dest:x31; op1val:0x787d; op2val:0x7053;
   valaddr_reg:x3; val_offset:50*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:??; testreg:x2*/
TEST_FPRR_OP(fsub.h, x31, x30, x29, dyn, 0, 0, x3, 50*FLEN/8, x6, x8, x2)

inst_50:
// fs1 == 0 and fe1 == 0x1c and fm1 == 0x04c and fs2 == 1 and fe2 == 0x1e and fm2 == 0x1b3 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x0000 and rs2_sgn_prefix == 0xffff  
/* opcode: fsub.h ; op1:x30; op2:x29; dest:x31; op1val:0x704c; op2val:0xf9b3;
   valaddr_reg:x3; val_offset:52*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:??; testreg:x2*/
TEST_FPRR_OP(fsub.h, x31, x30, x29, dyn, 0, 0, x3, 52*FLEN/8, x6, x8, x2)

inst_51:
// fs1 == 0 and fe1 == 0x1b and fm1 == 0x201 and fs2 == 0 and fe2 == 0x1b and fm2 == 0x030 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x0000 and rs2_sgn_prefix == 0x0000  
/* opcode: fsub.h ; op1:x30; op2:x29; dest:x31; op1val:0x6e01; op2val:0x6c30;
   valaddr_reg:x3; val_offset:54*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:??; testreg:x2*/
TEST_FPRR_OP(fsub.h, x31, x30, x29, dyn, 0, 0, x3, 54*FLEN/8, x6, x8, x2)

inst_52:
// fs1 == 0 and fe1 == 0x1c and fm1 == 0x374 and fs2 == 0 and fe2 == 0x16 and fm2 == 0x084 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x0000 and rs2_sgn_prefix == 0x0000  
/* opcode: fsub.h ; op1:x30; op2:x29; dest:x31; op1val:0x7374; op2val:0x5884;
   valaddr_reg:x3; val_offset:56*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:??; testreg:x2*/
TEST_FPRR_OP(fsub.h, x31, x30, x29, dyn, 0, 0, x3, 56*FLEN/8, x6, x8, x2)

inst_53:
// fs1 == 0 and fe1 == 0x1e and fm1 == 0x122 and fs2 == 0 and fe2 == 0x1d and fm2 == 0x34c and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x0000 and rs2_sgn_prefix == 0x0000  
/* opcode: fsub.h ; op1:x30; op2:x29; dest:x31; op1val:0x7922; op2val:0x774c;
   valaddr_reg:x3; val_offset:58*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:??; testreg:x2*/
TEST_FPRR_OP(fsub.h, x31, x30, x29, dyn, 0, 0, x3, 58*FLEN/8, x6, x8, x2)

inst_54:
// fs1 == 0 and fe1 == 0x1e and fm1 == 0x3ef and fs2 == 0 and fe2 == 0x1c and fm2 == 0x03d and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x0000 and rs2_sgn_prefix == 0x0000  
/* opcode: fsub.h ; op1:x30; op2:x29; dest:x31; op1val:0x7bef; op2val:0x703d;
   valaddr_reg:x3; val_offset:60*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:??; testreg:x2*/
TEST_FPRR_OP(fsub.h, x31, x30, x29, dyn, 0, 0, x3, 60*FLEN/8, x6, x8, x2)

inst_55:
// fs1 == 0 and fe1 == 0x1e and fm1 == 0x19f and fs2 == 0 and fe2 == 0x19 and fm2 == 0x34e and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x0000 and rs2_sgn_prefix == 0x0000  
/* opcode: fsub.h ; op1:x30; op2:x29; dest:x31; op1val:0x799f; op2val:0x674e;
   valaddr_reg:x3; val_offset:62*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:??; testreg:x2*/
TEST_FPRR_OP(fsub.h, x31, x30, x29, dyn, 0, 0, x3, 62*FLEN/8, x6, x8, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(28748,32,FLEN)
NAN_BOXED(28748,16,FLEN)
NAN_BOXED(31259,32,FLEN)
NAN_BOXED(30737,32,FLEN)
NAN_BOXED(30700,32,FLEN)
NAN_BOXED(27104,32,FLEN)
NAN_BOXED(31029,32,FLEN)
NAN_BOXED(61538,16,FLEN)
NAN_BOXED(28161,32,FLEN)
NAN_BOXED(28161,32,FLEN)
NAN_BOXED(31406,32,FLEN)
NAN_BOXED(30321,32,FLEN)
NAN_BOXED(31256,32,FLEN)
NAN_BOXED(31252,32,FLEN)
NAN_BOXED(30495,32,FLEN)
NAN_BOXED(62570,16,FLEN)
NAN_BOXED(29521,32,FLEN)
NAN_BOXED(63930,16,FLEN)
NAN_BOXED(31541,32,FLEN)
NAN_BOXED(31478,32,FLEN)
NAN_BOXED(26242,32,FLEN)
NAN_BOXED(63520,16,FLEN)
NAN_BOXED(31618,32,FLEN)
NAN_BOXED(30838,32,FLEN)
NAN_BOXED(29421,32,FLEN)
NAN_BOXED(62098,16,FLEN)
test_dataset_1:
NAN_BOXED(26478,32,FLEN)
NAN_BOXED(61993,16,FLEN)
NAN_BOXED(30464,32,FLEN)
NAN_BOXED(60265,16,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(22660,32,FLEN)
NAN_BOXED(29439,32,FLEN)
NAN_BOXED(62387,16,FLEN)
NAN_BOXED(29858,32,FLEN)
NAN_BOXED(29770,32,FLEN)
NAN_BOXED(31410,32,FLEN)
NAN_BOXED(29822,32,FLEN)
NAN_BOXED(31010,32,FLEN)
NAN_BOXED(30540,32,FLEN)
NAN_BOXED(31727,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(28603,32,FLEN)
NAN_BOXED(62150,16,FLEN)
NAN_BOXED(31172,32,FLEN)
NAN_BOXED(24899,32,FLEN)
NAN_BOXED(31612,32,FLEN)
NAN_BOXED(30748,32,FLEN)
test_dataset_2:
NAN_BOXED(31395,16,FLEN)
NAN_BOXED(28955,16,FLEN)
NAN_BOXED(29913,16,FLEN)
NAN_BOXED(62603,16,FLEN)
NAN_BOXED(31502,16,FLEN)
NAN_BOXED(26788,16,FLEN)
NAN_BOXED(30730,16,FLEN)
NAN_BOXED(60763,16,FLEN)
NAN_BOXED(26730,16,FLEN)
NAN_BOXED(62120,16,FLEN)
NAN_BOXED(31328,16,FLEN)
NAN_BOXED(30240,16,FLEN)
NAN_BOXED(29064,16,FLEN)
NAN_BOXED(62978,16,FLEN)
NAN_BOXED(31135,16,FLEN)
NAN_BOXED(26446,16,FLEN)
NAN_BOXED(30206,16,FLEN)
NAN_BOXED(60444,16,FLEN)
NAN_BOXED(30736,16,FLEN)
NAN_BOXED(62545,16,FLEN)
NAN_BOXED(30762,16,FLEN)
NAN_BOXED(28693,16,FLEN)
NAN_BOXED(30676,16,FLEN)
NAN_BOXED(30555,16,FLEN)
NAN_BOXED(27024,16,FLEN)
NAN_BOXED(63814,16,FLEN)
NAN_BOXED(31708,16,FLEN)
NAN_BOXED(30268,16,FLEN)
NAN_BOXED(30283,16,FLEN)
NAN_BOXED(29475,16,FLEN)
NAN_BOXED(30724,16,FLEN)
NAN_BOXED(63404,16,FLEN)
NAN_BOXED(31273,16,FLEN)
NAN_BOXED(29538,16,FLEN)
NAN_BOXED(31457,16,FLEN)
NAN_BOXED(30981,16,FLEN)
NAN_BOXED(30747,16,FLEN)
NAN_BOXED(63236,16,FLEN)
NAN_BOXED(30878,16,FLEN)
NAN_BOXED(28567,16,FLEN)
NAN_BOXED(29774,16,FLEN)
NAN_BOXED(62581,16,FLEN)
NAN_BOXED(31655,16,FLEN)
NAN_BOXED(31643,16,FLEN)
NAN_BOXED(31300,16,FLEN)
NAN_BOXED(59574,16,FLEN)
NAN_BOXED(31510,16,FLEN)
NAN_BOXED(28840,16,FLEN)
NAN_BOXED(31352,16,FLEN)
NAN_BOXED(29861,16,FLEN)
NAN_BOXED(30845,16,FLEN)
NAN_BOXED(28755,16,FLEN)
NAN_BOXED(28748,16,FLEN)
NAN_BOXED(63923,16,FLEN)
NAN_BOXED(28161,16,FLEN)
NAN_BOXED(27696,16,FLEN)
NAN_BOXED(29556,16,FLEN)
NAN_BOXED(22660,16,FLEN)
NAN_BOXED(31010,16,FLEN)
NAN_BOXED(30540,16,FLEN)
NAN_BOXED(31727,16,FLEN)
NAN_BOXED(28733,16,FLEN)
NAN_BOXED(31135,16,FLEN)
NAN_BOXED(26446,16,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;



signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 34*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_0:
    .fill 78*((SIGALIGN)/4),4,0xdeadbeef

#ifdef rvtest_mtrap_routine
tsig_begin_canary:
CANARY;

mtrap_sigptr:
    .fill 64*XLEN/32,4,0xdeadbeef

tsig_end_canary:
CANARY;
#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif


sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
