
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.12.2
// timestamp : Wed Sep 25 05:22:24 2024 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /home/riscv/testing/riscv-ctg/sample_cgfs/dataset.cgf \
//                  --cgf /home/riscv/testing/riscv-ctg/sample_cgfs/sample_cgfs_fext/RV32Zhinx/rv32h_fdiv.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fdiv.h instruction of the RISC-V RV32_Zfinx_Zhinx,RV64_Zfinx_Zhinx extension for the fdiv_b7 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32I_Zfinx_Zhinx,RV64I_Zfinx_Zhinx")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*Zfinx.*Zhinx.*);def TEST_CASE_1=True;",fdiv_b7)

RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x6,test_dataset_0)
RVTEST_SIGBASE(x2,signature_x2_1)

inst_0:
// rs1 == rd != rs2, rs1==x18, rs2==x4, rd==x18,fs1 == 0 and fe1 == 0x1c and fm1 == 0x39c and fs2 == 0 and fe2 == 0x1e and fm2 == 0x3ff and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x0000 and rs2_sgn_prefix == 0x0000  
/* opcode: fdiv.h ; op1:x18; op2:x4; dest:x18; op1val:0x739c; op2val:0x7bff;
   valaddr_reg:x6; val_offset:0*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:??; testreg:x5
*/
TEST_FPRR_OP(fdiv.h, x18, x18, x4, dyn, 96, 0, x6, 0*FLEN/8, x14, x2, x5)

inst_1:
// rs1 == rs2 != rd, rs1==x15, rs2==x15, rd==x23,fs1 == 0 and fe1 == 0x1d and fm1 == 0x1ea and fs2 == 0 and fe2 == 0x1e and fm2 == 0x3ff and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x0000 and rs2_sgn_prefix == 0x0000  
/* opcode: fdiv.h ; op1:x15; op2:x15; dest:x23; op1val:0x75ea; op2val:0x75ea;
   valaddr_reg:x6; val_offset:2*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:??; testreg:x5
*/
TEST_FPRR_OP(fdiv.h, x23, x15, x15, dyn, 96, 0, x6, 2*FLEN/8, x14, x2, x5)

inst_2:
// rs1 == rs2 == rd, rs1==x9, rs2==x9, rd==x9,fs1 == 0 and fe1 == 0x1e and fm1 == 0x100 and fs2 == 0 and fe2 == 0x1e and fm2 == 0x3ff and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x0000 and rs2_sgn_prefix == 0x0000  
/* opcode: fdiv.h ; op1:x9; op2:x9; dest:x9; op1val:0x7900; op2val:0x7900;
   valaddr_reg:x6; val_offset:4*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:??; testreg:x5
*/
TEST_FPRR_OP(fdiv.h, x9, x9, x9, dyn, 96, 0, x6, 4*FLEN/8, x14, x2, x5)

inst_3:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x0, rs2==x24, rd==x22,fs1 == 0 and fe1 == 0x18 and fm1 == 0x2bf and fs2 == 0 and fe2 == 0x1e and fm2 == 0x3ff and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x0000 and rs2_sgn_prefix == 0x0000  
/* opcode: fdiv.h ; op1:x0; op2:x24; dest:x22; op1val:0x0; op2val:0x7bff;
   valaddr_reg:x6; val_offset:6*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:??; testreg:x5
*/
TEST_FPRR_OP(fdiv.h, x22, x0, x24, dyn, 96, 0, x6, 6*FLEN/8, x14, x2, x5)

inst_4:
// rs2 == rd != rs1, rs1==x1, rs2==x8, rd==x8,fs1 == 0 and fe1 == 0x1d and fm1 == 0x025 and fs2 == 0 and fe2 == 0x1e and fm2 == 0x3ff and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x0000 and rs2_sgn_prefix == 0x0000  
/* opcode: fdiv.h ; op1:x1; op2:x8; dest:x8; op1val:0x7425; op2val:0x7bff;
   valaddr_reg:x6; val_offset:8*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:??; testreg:x5
*/
TEST_FPRR_OP(fdiv.h, x8, x1, x8, dyn, 96, 0, x6, 8*FLEN/8, x14, x2, x5)

inst_5:
// rs1==x22, rs2==x10, rd==x19,fs1 == 0 and fe1 == 0x1e and fm1 == 0x3f6 and fs2 == 0 and fe2 == 0x1e and fm2 == 0x3ff and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x0000 and rs2_sgn_prefix == 0x0000  
/* opcode: fdiv.h ; op1:x22; op2:x10; dest:x19; op1val:0x7bf6; op2val:0x7bff;
   valaddr_reg:x6; val_offset:10*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:??; testreg:x5
*/
TEST_FPRR_OP(fdiv.h, x19, x22, x10, dyn, 96, 0, x6, 10*FLEN/8, x14, x2, x5)

inst_6:
// rs1==x29, rs2==x12, rd==x26,fs1 == 0 and fe1 == 0x1e and fm1 == 0x2b0 and fs2 == 0 and fe2 == 0x1e and fm2 == 0x3ff and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x0000 and rs2_sgn_prefix == 0x0000  
/* opcode: fdiv.h ; op1:x29; op2:x12; dest:x26; op1val:0x7ab0; op2val:0x7bff;
   valaddr_reg:x6; val_offset:12*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:??; testreg:x5
*/
TEST_FPRR_OP(fdiv.h, x26, x29, x12, dyn, 96, 0, x6, 12*FLEN/8, x14, x2, x5)

inst_7:
// rs1==x20, rs2==x30, rd==x16,fs1 == 0 and fe1 == 0x1e and fm1 == 0x11c and fs2 == 0 and fe2 == 0x1e and fm2 == 0x3ff and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x0000 and rs2_sgn_prefix == 0x0000  
/* opcode: fdiv.h ; op1:x20; op2:x30; dest:x16; op1val:0x791c; op2val:0x7bff;
   valaddr_reg:x6; val_offset:14*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:??; testreg:x5
*/
TEST_FPRR_OP(fdiv.h, x16, x20, x30, dyn, 96, 0, x6, 14*FLEN/8, x14, x2, x5)

inst_8:
// rs1==x3, rs2==x29, rd==x24,fs1 == 0 and fe1 == 0x1e and fm1 == 0x113 and fs2 == 0 and fe2 == 0x1e and fm2 == 0x3ff and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x0000 and rs2_sgn_prefix == 0x0000  
/* opcode: fdiv.h ; op1:x3; op2:x29; dest:x24; op1val:0x7913; op2val:0x7bff;
   valaddr_reg:x6; val_offset:16*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:??; testreg:x5
*/
TEST_FPRR_OP(fdiv.h, x24, x3, x29, dyn, 96, 0, x6, 16*FLEN/8, x14, x2, x5)

inst_9:
// rs1==x7, rs2==x21, rd==x13,fs1 == 0 and fe1 == 0x1e and fm1 == 0x02e and fs2 == 0 and fe2 == 0x1e and fm2 == 0x3ff and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x0000 and rs2_sgn_prefix == 0x0000  
/* opcode: fdiv.h ; op1:x7; op2:x21; dest:x13; op1val:0x782e; op2val:0x7bff;
   valaddr_reg:x6; val_offset:18*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:??; testreg:x5
*/
TEST_FPRR_OP(fdiv.h, x13, x7, x21, dyn, 96, 0, x6, 18*FLEN/8, x14, x2, x5)

inst_10:
// rs1==x25, rs2==x19, rd==x20,fs1 == 0 and fe1 == 0x1e and fm1 == 0x15e and fs2 == 0 and fe2 == 0x1e and fm2 == 0x3ff and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x0000 and rs2_sgn_prefix == 0x0000  
/* opcode: fdiv.h ; op1:x25; op2:x19; dest:x20; op1val:0x795e; op2val:0x7bff;
   valaddr_reg:x6; val_offset:20*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:??; testreg:x5
*/
TEST_FPRR_OP(fdiv.h, x20, x25, x19, dyn, 96, 0, x6, 20*FLEN/8, x14, x2, x5)

inst_11:
// rs1==x10, rs2==x11, rd==x7,fs1 == 0 and fe1 == 0x1e and fm1 == 0x210 and fs2 == 0 and fe2 == 0x1e and fm2 == 0x3ff and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x0000 and rs2_sgn_prefix == 0x0000  
/* opcode: fdiv.h ; op1:x10; op2:x11; dest:x7; op1val:0x7a10; op2val:0x7bff;
   valaddr_reg:x6; val_offset:22*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:??; testreg:x5
*/
TEST_FPRR_OP(fdiv.h, x7, x10, x11, dyn, 96, 0, x6, 22*FLEN/8, x14, x2, x5)
RVTEST_VALBASEUPD(x7,test_dataset_1)

inst_12:
// rs1==x13, rs2==x0, rd==x12,fs1 == 0 and fe1 == 0x1d and fm1 == 0x0d1 and fs2 == 0 and fe2 == 0x1e and fm2 == 0x3ff and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x0000 and rs2_sgn_prefix == 0x0000  
/* opcode: fdiv.h ; op1:x13; op2:x0; dest:x12; op1val:0x74d1; op2val:0x0;
   valaddr_reg:x7; val_offset:0*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:??; testreg:x5
*/
TEST_FPRR_OP(fdiv.h, x12, x13, x0, dyn, 96, 0, x7, 0*FLEN/8, x10, x2, x5)

inst_13:
// rs1==x11, rs2==x3, rd==x28,fs1 == 0 and fe1 == 0x1e and fm1 == 0x2eb and fs2 == 0 and fe2 == 0x1e and fm2 == 0x3ff and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x0000 and rs2_sgn_prefix == 0x0000  
/* opcode: fdiv.h ; op1:x11; op2:x3; dest:x28; op1val:0x7aeb; op2val:0x7bff;
   valaddr_reg:x7; val_offset:2*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:??; testreg:x5
*/
TEST_FPRR_OP(fdiv.h, x28, x11, x3, dyn, 96, 0, x7, 2*FLEN/8, x10, x2, x5)

inst_14:
// rs1==x4, rs2==x22, rd==x27,fs1 == 0 and fe1 == 0x1e and fm1 == 0x1bf and fs2 == 0 and fe2 == 0x1e and fm2 == 0x3ff and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x0000 and rs2_sgn_prefix == 0x0000  
/* opcode: fdiv.h ; op1:x4; op2:x22; dest:x27; op1val:0x79bf; op2val:0x7bff;
   valaddr_reg:x7; val_offset:4*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:??; testreg:x5
*/
TEST_FPRR_OP(fdiv.h, x27, x4, x22, dyn, 96, 0, x7, 4*FLEN/8, x10, x2, x5)

inst_15:
// rs1==x30, rs2==x6, rd==x15,fs1 == 0 and fe1 == 0x1e and fm1 == 0x1b5 and fs2 == 0 and fe2 == 0x1e and fm2 == 0x3ff and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x0000 and rs2_sgn_prefix == 0x0000  
/* opcode: fdiv.h ; op1:x30; op2:x6; dest:x15; op1val:0x79b5; op2val:0x7bff;
   valaddr_reg:x7; val_offset:6*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:??; testreg:x8
*/
TEST_FPRR_OP(fdiv.h, x15, x30, x6, dyn, 96, 0, x7, 6*FLEN/8, x10, x2, x8)
RVTEST_SIGBASE(x9,signature_x9_0)

inst_16:
// rs1==x26, rs2==x27, rd==x1,fs1 == 0 and fe1 == 0x1d and fm1 == 0x251 and fs2 == 0 and fe2 == 0x1e and fm2 == 0x3ff and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x0000 and rs2_sgn_prefix == 0x0000  
/* opcode: fdiv.h ; op1:x26; op2:x27; dest:x1; op1val:0x7651; op2val:0x7bff;
   valaddr_reg:x7; val_offset:8*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:??; testreg:x8
*/
TEST_FPRR_OP(fdiv.h, x1, x26, x27, dyn, 96, 0, x7, 8*FLEN/8, x10, x9, x8)

inst_17:
// rs1==x6, rs2==x17, rd==x2,fs1 == 0 and fe1 == 0x1d and fm1 == 0x31c and fs2 == 0 and fe2 == 0x1e and fm2 == 0x3ff and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x0000 and rs2_sgn_prefix == 0x0000  
/* opcode: fdiv.h ; op1:x6; op2:x17; dest:x2; op1val:0x771c; op2val:0x7bff;
   valaddr_reg:x7; val_offset:10*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:??; testreg:x8
*/
TEST_FPRR_OP(fdiv.h, x2, x6, x17, dyn, 96, 0, x7, 10*FLEN/8, x10, x9, x8)

inst_18:
// rs1==x17, rs2==x14, rd==x0,fs1 == 0 and fe1 == 0x1e and fm1 == 0x307 and fs2 == 0 and fe2 == 0x1e and fm2 == 0x3ff and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x0000 and rs2_sgn_prefix == 0x0000  
/* opcode: fdiv.h ; op1:x17; op2:x14; dest:x0; op1val:0x7b07; op2val:0x7bff;
   valaddr_reg:x7; val_offset:12*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:??; testreg:x8
*/
TEST_FPRR_OP(fdiv.h, x0, x17, x14, dyn, 96, 0, x7, 12*FLEN/8, x10, x9, x8)

inst_19:
// rs1==x5, rs2==x20, rd==x4,fs1 == 0 and fe1 == 0x1c and fm1 == 0x059 and fs2 == 0 and fe2 == 0x1e and fm2 == 0x3ff and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x0000 and rs2_sgn_prefix == 0x0000  
/* opcode: fdiv.h ; op1:x5; op2:x20; dest:x4; op1val:0x7059; op2val:0x7bff;
   valaddr_reg:x7; val_offset:14*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:??; testreg:x8
*/
TEST_FPRR_OP(fdiv.h, x4, x5, x20, dyn, 96, 0, x7, 14*FLEN/8, x10, x9, x8)

inst_20:
// rs1==x31, rs2==x28, rd==x11,fs1 == 0 and fe1 == 0x1e and fm1 == 0x3b8 and fs2 == 0 and fe2 == 0x1e and fm2 == 0x3ff and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x0000 and rs2_sgn_prefix == 0x0000  
/* opcode: fdiv.h ; op1:x31; op2:x28; dest:x11; op1val:0x7bb8; op2val:0x7bff;
   valaddr_reg:x7; val_offset:16*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:??; testreg:x8
*/
TEST_FPRR_OP(fdiv.h, x11, x31, x28, dyn, 96, 0, x7, 16*FLEN/8, x10, x9, x8)

inst_21:
// rs1==x27, rs2==x23, rd==x14,fs1 == 0 and fe1 == 0x1e and fm1 == 0x102 and fs2 == 0 and fe2 == 0x1e and fm2 == 0x3ff and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x0000 and rs2_sgn_prefix == 0x0000  
/* opcode: fdiv.h ; op1:x27; op2:x23; dest:x14; op1val:0x7902; op2val:0x7bff;
   valaddr_reg:x7; val_offset:18*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:??; testreg:x8
*/
TEST_FPRR_OP(fdiv.h, x14, x27, x23, dyn, 96, 0, x7, 18*FLEN/8, x10, x9, x8)

inst_22:
// rs1==x24, rs2==x5, rd==x29,fs1 == 0 and fe1 == 0x1e and fm1 == 0x00e and fs2 == 0 and fe2 == 0x1e and fm2 == 0x3ff and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x0000 and rs2_sgn_prefix == 0x0000  
/* opcode: fdiv.h ; op1:x24; op2:x5; dest:x29; op1val:0x780e; op2val:0x7bff;
   valaddr_reg:x7; val_offset:20*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:??; testreg:x8
*/
TEST_FPRR_OP(fdiv.h, x29, x24, x5, dyn, 96, 0, x7, 20*FLEN/8, x10, x9, x8)

inst_23:
// rs1==x21, rs2==x18, rd==x17,fs1 == 0 and fe1 == 0x1d and fm1 == 0x19c and fs2 == 0 and fe2 == 0x1e and fm2 == 0x3ff and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x0000 and rs2_sgn_prefix == 0x0000  
/* opcode: fdiv.h ; op1:x21; op2:x18; dest:x17; op1val:0x759c; op2val:0x7bff;
   valaddr_reg:x7; val_offset:22*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:??; testreg:x8
*/
TEST_FPRR_OP(fdiv.h, x17, x21, x18, dyn, 96, 0, x7, 22*FLEN/8, x10, x9, x8)
RVTEST_VALBASEUPD(x4,test_dataset_2)

inst_24:
// rs1==x28, rs2==x16, rd==x25,fs1 == 0 and fe1 == 0x1e and fm1 == 0x0ab and fs2 == 0 and fe2 == 0x1e and fm2 == 0x3ff and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x0000 and rs2_sgn_prefix == 0x0000  
/* opcode: fdiv.h ; op1:x28; op2:x16; dest:x25; op1val:0x78ab; op2val:0x7bff;
   valaddr_reg:x4; val_offset:0*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:??; testreg:x8
*/
TEST_FPRR_OP(fdiv.h, x25, x28, x16, dyn, 96, 0, x4, 0*FLEN/8, x11, x9, x8)

inst_25:
// rs1==x16, rs2==x7, rd==x5,fs1 == 0 and fe1 == 0x1e and fm1 == 0x174 and fs2 == 0 and fe2 == 0x1e and fm2 == 0x3ff and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x0000 and rs2_sgn_prefix == 0x0000  
/* opcode: fdiv.h ; op1:x16; op2:x7; dest:x5; op1val:0x7974; op2val:0x7bff;
   valaddr_reg:x4; val_offset:2*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:??; testreg:x8
*/
TEST_FPRR_OP(fdiv.h, x5, x16, x7, dyn, 96, 0, x4, 2*FLEN/8, x11, x9, x8)

inst_26:
// rs1==x12, rs2==x1, rd==x6,fs1 == 0 and fe1 == 0x1e and fm1 == 0x2d9 and fs2 == 0 and fe2 == 0x1e and fm2 == 0x3ff and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x0000 and rs2_sgn_prefix == 0x0000  
/* opcode: fdiv.h ; op1:x12; op2:x1; dest:x6; op1val:0x7ad9; op2val:0x7bff;
   valaddr_reg:x4; val_offset:4*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:??; testreg:x8
*/
TEST_FPRR_OP(fdiv.h, x6, x12, x1, dyn, 96, 0, x4, 4*FLEN/8, x11, x9, x8)

inst_27:
// rs1==x14, rs2==x2, rd==x3,fs1 == 0 and fe1 == 0x1e and fm1 == 0x2e1 and fs2 == 0 and fe2 == 0x1e and fm2 == 0x3ff and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x0000 and rs2_sgn_prefix == 0x0000  
/* opcode: fdiv.h ; op1:x14; op2:x2; dest:x3; op1val:0x7ae1; op2val:0x7bff;
   valaddr_reg:x4; val_offset:6*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:??; testreg:x8
*/
TEST_FPRR_OP(fdiv.h, x3, x14, x2, dyn, 96, 0, x4, 6*FLEN/8, x11, x9, x8)

inst_28:
// rs1==x23, rs2==x31, rd==x10,fs1 == 0 and fe1 == 0x1e and fm1 == 0x33b and fs2 == 0 and fe2 == 0x1e and fm2 == 0x3ff and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x0000 and rs2_sgn_prefix == 0x0000  
/* opcode: fdiv.h ; op1:x23; op2:x31; dest:x10; op1val:0x7b3b; op2val:0x7bff;
   valaddr_reg:x4; val_offset:8*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:??; testreg:x3
*/
TEST_FPRR_OP(fdiv.h, x10, x23, x31, dyn, 96, 0, x4, 8*FLEN/8, x11, x9, x3)

inst_29:
// rs1==x8, rs2==x25, rd==x30,fs1 == 0 and fe1 == 0x1e and fm1 == 0x2a6 and fs2 == 0 and fe2 == 0x1e and fm2 == 0x3ff and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x0000 and rs2_sgn_prefix == 0x0000  
/* opcode: fdiv.h ; op1:x8; op2:x25; dest:x30; op1val:0x7aa6; op2val:0x7bff;
   valaddr_reg:x4; val_offset:10*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:??; testreg:x3
*/
TEST_FPRR_OP(fdiv.h, x30, x8, x25, dyn, 96, 0, x4, 10*FLEN/8, x11, x9, x3)
RVTEST_SIGBASE(x1,signature_x1_0)

inst_30:
// rs1==x19, rs2==x13, rd==x21,fs1 == 0 and fe1 == 0x1d and fm1 == 0x08e and fs2 == 0 and fe2 == 0x1e and fm2 == 0x3ff and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x0000 and rs2_sgn_prefix == 0x0000  
/* opcode: fdiv.h ; op1:x19; op2:x13; dest:x21; op1val:0x748e; op2val:0x7bff;
   valaddr_reg:x4; val_offset:12*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:??; testreg:x3
*/
TEST_FPRR_OP(fdiv.h, x21, x19, x13, dyn, 96, 0, x4, 12*FLEN/8, x11, x1, x3)

inst_31:
// rs1==x2, rs2==x26, rd==x31,fs1 == 0 and fe1 == 0x1e and fm1 == 0x2d4 and fs2 == 0 and fe2 == 0x1e and fm2 == 0x3ff and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x0000 and rs2_sgn_prefix == 0x0000  
/* opcode: fdiv.h ; op1:x2; op2:x26; dest:x31; op1val:0x7ad4; op2val:0x7bff;
   valaddr_reg:x4; val_offset:14*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:??; testreg:x3
*/
TEST_FPRR_OP(fdiv.h, x31, x2, x26, dyn, 96, 0, x4, 14*FLEN/8, x11, x1, x3)

inst_32:
// fs1 == 0 and fe1 == 0x1b and fm1 == 0x1a9 and fs2 == 0 and fe2 == 0x1e and fm2 == 0x3ff and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x0000 and rs2_sgn_prefix == 0x0000  
/* opcode: fdiv.h ; op1:x30; op2:x29; dest:x31; op1val:0x6da9; op2val:0x7bff;
   valaddr_reg:x4; val_offset:16*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:??; testreg:x3
*/
TEST_FPRR_OP(fdiv.h, x31, x30, x29, dyn, 96, 0, x4, 16*FLEN/8, x11, x1, x3)

inst_33:
// fs1 == 0 and fe1 == 0x1d and fm1 == 0x290 and fs2 == 0 and fe2 == 0x1e and fm2 == 0x3ff and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x0000 and rs2_sgn_prefix == 0x0000  
/* opcode: fdiv.h ; op1:x30; op2:x29; dest:x31; op1val:0x7690; op2val:0x7bff;
   valaddr_reg:x4; val_offset:18*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:??; testreg:x3
*/
TEST_FPRR_OP(fdiv.h, x31, x30, x29, dyn, 96, 0, x4, 18*FLEN/8, x11, x1, x3)

inst_34:
// fs1 == 0 and fe1 == 0x1d and fm1 == 0x0b3 and fs2 == 0 and fe2 == 0x1e and fm2 == 0x3ff and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x0000 and rs2_sgn_prefix == 0x0000  
/* opcode: fdiv.h ; op1:x30; op2:x29; dest:x31; op1val:0x74b3; op2val:0x7bff;
   valaddr_reg:x4; val_offset:20*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:??; testreg:x3
*/
TEST_FPRR_OP(fdiv.h, x31, x30, x29, dyn, 96, 0, x4, 20*FLEN/8, x11, x1, x3)

inst_35:
// fs1 == 0 and fe1 == 0x1e and fm1 == 0x2fa and fs2 == 0 and fe2 == 0x1e and fm2 == 0x3ff and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x0000 and rs2_sgn_prefix == 0x0000  
/* opcode: fdiv.h ; op1:x30; op2:x29; dest:x31; op1val:0x7afa; op2val:0x7bff;
   valaddr_reg:x4; val_offset:22*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:??; testreg:x3
*/
TEST_FPRR_OP(fdiv.h, x31, x30, x29, dyn, 96, 0, x4, 22*FLEN/8, x11, x1, x3)

inst_36:
// fs1 == 0 and fe1 == 0x1e and fm1 == 0x0e9 and fs2 == 0 and fe2 == 0x1e and fm2 == 0x3ff and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x0000 and rs2_sgn_prefix == 0x0000  
/* opcode: fdiv.h ; op1:x30; op2:x29; dest:x31; op1val:0x78e9; op2val:0x7bff;
   valaddr_reg:x4; val_offset:24*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:??; testreg:x3
*/
TEST_FPRR_OP(fdiv.h, x31, x30, x29, dyn, 96, 0, x4, 24*FLEN/8, x11, x1, x3)

inst_37:
// fs1 == 0 and fe1 == 0x1e and fm1 == 0x1be and fs2 == 0 and fe2 == 0x1e and fm2 == 0x3ff and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x0000 and rs2_sgn_prefix == 0x0000  
/* opcode: fdiv.h ; op1:x30; op2:x29; dest:x31; op1val:0x79be; op2val:0x7bff;
   valaddr_reg:x4; val_offset:26*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:??; testreg:x3
*/
TEST_FPRR_OP(fdiv.h, x31, x30, x29, dyn, 96, 0, x4, 26*FLEN/8, x11, x1, x3)

inst_38:
// fs1 == 0 and fe1 == 0x1e and fm1 == 0x30b and fs2 == 0 and fe2 == 0x1e and fm2 == 0x3ff and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x0000 and rs2_sgn_prefix == 0x0000  
/* opcode: fdiv.h ; op1:x30; op2:x29; dest:x31; op1val:0x7b0b; op2val:0x7bff;
   valaddr_reg:x4; val_offset:28*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:??; testreg:x3
*/
TEST_FPRR_OP(fdiv.h, x31, x30, x29, dyn, 96, 0, x4, 28*FLEN/8, x11, x1, x3)

inst_39:
// fs1 == 0 and fe1 == 0x1e and fm1 == 0x00a and fs2 == 0 and fe2 == 0x1e and fm2 == 0x3ff and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x0000 and rs2_sgn_prefix == 0x0000  
/* opcode: fdiv.h ; op1:x30; op2:x29; dest:x31; op1val:0x780a; op2val:0x7bff;
   valaddr_reg:x4; val_offset:30*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:??; testreg:x3
*/
TEST_FPRR_OP(fdiv.h, x31, x30, x29, dyn, 96, 0, x4, 30*FLEN/8, x11, x1, x3)

inst_40:
// fs1 == 0 and fe1 == 0x1d and fm1 == 0x0f3 and fs2 == 0 and fe2 == 0x17 and fm2 == 0x0f3 and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x0000 and rs2_sgn_prefix == 0x0000  
/* opcode: fdiv.h ; op1:x30; op2:x29; dest:x31; op1val:0x74f3; op2val:0x5cf3;
   valaddr_reg:x4; val_offset:32*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:??; testreg:x3
*/
TEST_FPRR_OP(fdiv.h, x31, x30, x29, dyn, 96, 0, x4, 32*FLEN/8, x11, x1, x3)

inst_41:
// fs1 == 0 and fe1 == 0x1e and fm1 == 0x0cb and fs2 == 0 and fe2 == 0x18 and fm2 == 0x0cb and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x0000 and rs2_sgn_prefix == 0x0000  
/* opcode: fdiv.h ; op1:x30; op2:x29; dest:x31; op1val:0x78cb; op2val:0x60cb;
   valaddr_reg:x4; val_offset:34*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:??; testreg:x3
*/
TEST_FPRR_OP(fdiv.h, x31, x30, x29, dyn, 96, 0, x4, 34*FLEN/8, x11, x1, x3)

inst_42:
// fs1 == 0 and fe1 == 0x1c and fm1 == 0x250 and fs2 == 0 and fe2 == 0x16 and fm2 == 0x250 and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x0000 and rs2_sgn_prefix == 0x0000  
/* opcode: fdiv.h ; op1:x30; op2:x29; dest:x31; op1val:0x7250; op2val:0x5a50;
   valaddr_reg:x4; val_offset:36*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:??; testreg:x3
*/
TEST_FPRR_OP(fdiv.h, x31, x30, x29, dyn, 96, 0, x4, 36*FLEN/8, x11, x1, x3)

inst_43:
// fs1 == 0 and fe1 == 0x1e and fm1 == 0x0e1 and fs2 == 0 and fe2 == 0x18 and fm2 == 0x0e1 and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x0000 and rs2_sgn_prefix == 0x0000  
/* opcode: fdiv.h ; op1:x30; op2:x29; dest:x31; op1val:0x78e1; op2val:0x60e1;
   valaddr_reg:x4; val_offset:38*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:??; testreg:x3
*/
TEST_FPRR_OP(fdiv.h, x31, x30, x29, dyn, 96, 0, x4, 38*FLEN/8, x11, x1, x3)

inst_44:
// fs1 == 0 and fe1 == 0x1a and fm1 == 0x16e and fs2 == 0 and fe2 == 0x14 and fm2 == 0x16e and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x0000 and rs2_sgn_prefix == 0x0000  
/* opcode: fdiv.h ; op1:x30; op2:x29; dest:x31; op1val:0x696e; op2val:0x516e;
   valaddr_reg:x4; val_offset:40*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:??; testreg:x3
*/
TEST_FPRR_OP(fdiv.h, x31, x30, x29, dyn, 96, 0, x4, 40*FLEN/8, x11, x1, x3)

inst_45:
// fs1 == 0 and fe1 == 0x1d and fm1 == 0x104 and fs2 == 0 and fe2 == 0x17 and fm2 == 0x104 and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x0000 and rs2_sgn_prefix == 0x0000  
/* opcode: fdiv.h ; op1:x30; op2:x29; dest:x31; op1val:0x7504; op2val:0x5d04;
   valaddr_reg:x4; val_offset:42*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:??; testreg:x3
*/
TEST_FPRR_OP(fdiv.h, x31, x30, x29, dyn, 96, 0, x4, 42*FLEN/8, x11, x1, x3)

inst_46:
// fs1 == 0 and fe1 == 0x1e and fm1 == 0x32b and fs2 == 0 and fe2 == 0x18 and fm2 == 0x32b and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x0000 and rs2_sgn_prefix == 0x0000  
/* opcode: fdiv.h ; op1:x30; op2:x29; dest:x31; op1val:0x7b2b; op2val:0x632b;
   valaddr_reg:x4; val_offset:44*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:??; testreg:x3
*/
TEST_FPRR_OP(fdiv.h, x31, x30, x29, dyn, 96, 0, x4, 44*FLEN/8, x11, x1, x3)

inst_47:
// fs1 == 0 and fe1 == 0x1d and fm1 == 0x35c and fs2 == 0 and fe2 == 0x1e and fm2 == 0x3ff and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x0000 and rs2_sgn_prefix == 0x0000  
/* opcode: fdiv.h ; op1:x30; op2:x29; dest:x31; op1val:0x775c; op2val:0x7bff;
   valaddr_reg:x4; val_offset:46*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:??; testreg:x3
*/
TEST_FPRR_OP(fdiv.h, x31, x30, x29, dyn, 96, 0, x4, 46*FLEN/8, x11, x1, x3)

inst_48:
// fs1 == 0 and fe1 == 0x1e and fm1 == 0x126 and fs2 == 0 and fe2 == 0x1e and fm2 == 0x3ff and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x0000 and rs2_sgn_prefix == 0x0000  
/* opcode: fdiv.h ; op1:x30; op2:x29; dest:x31; op1val:0x7926; op2val:0x7bff;
   valaddr_reg:x4; val_offset:48*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:??; testreg:x3
*/
TEST_FPRR_OP(fdiv.h, x31, x30, x29, dyn, 96, 0, x4, 48*FLEN/8, x11, x1, x3)

inst_49:
// fs1 == 0 and fe1 == 0x1e and fm1 == 0x078 and fs2 == 0 and fe2 == 0x1e and fm2 == 0x3ff and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x0000 and rs2_sgn_prefix == 0x0000  
/* opcode: fdiv.h ; op1:x30; op2:x29; dest:x31; op1val:0x7878; op2val:0x7bff;
   valaddr_reg:x4; val_offset:50*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:??; testreg:x3
*/
TEST_FPRR_OP(fdiv.h, x31, x30, x29, dyn, 96, 0, x4, 50*FLEN/8, x11, x1, x3)

inst_50:
// fs1 == 0 and fe1 == 0x1e and fm1 == 0x385 and fs2 == 0 and fe2 == 0x1e and fm2 == 0x3ff and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x0000 and rs2_sgn_prefix == 0x0000  
/* opcode: fdiv.h ; op1:x30; op2:x29; dest:x31; op1val:0x7b85; op2val:0x7bff;
   valaddr_reg:x4; val_offset:52*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:??; testreg:x3
*/
TEST_FPRR_OP(fdiv.h, x31, x30, x29, dyn, 96, 0, x4, 52*FLEN/8, x11, x1, x3)

inst_51:
// fs1 == 0 and fe1 == 0x1d and fm1 == 0x2e5 and fs2 == 0 and fe2 == 0x1e and fm2 == 0x3ff and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x0000 and rs2_sgn_prefix == 0x0000  
/* opcode: fdiv.h ; op1:x30; op2:x29; dest:x31; op1val:0x76e5; op2val:0x7bff;
   valaddr_reg:x4; val_offset:54*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:??; testreg:x3
*/
TEST_FPRR_OP(fdiv.h, x31, x30, x29, dyn, 96, 0, x4, 54*FLEN/8, x11, x1, x3)

inst_52:
// fs1 == 0 and fe1 == 0x1c and fm1 == 0x399 and fs2 == 0 and fe2 == 0x1e and fm2 == 0x3ff and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x0000 and rs2_sgn_prefix == 0x0000  
/* opcode: fdiv.h ; op1:x30; op2:x29; dest:x31; op1val:0x7399; op2val:0x7bff;
   valaddr_reg:x4; val_offset:56*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:??; testreg:x3
*/
TEST_FPRR_OP(fdiv.h, x31, x30, x29, dyn, 96, 0, x4, 56*FLEN/8, x11, x1, x3)

inst_53:
// fs1 == 0 and fe1 == 0x1e and fm1 == 0x3d1 and fs2 == 0 and fe2 == 0x1e and fm2 == 0x3ff and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x0000 and rs2_sgn_prefix == 0x0000  
/* opcode: fdiv.h ; op1:x30; op2:x29; dest:x31; op1val:0x7bd1; op2val:0x7bff;
   valaddr_reg:x4; val_offset:58*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:??; testreg:x3
*/
TEST_FPRR_OP(fdiv.h, x31, x30, x29, dyn, 96, 0, x4, 58*FLEN/8, x11, x1, x3)

inst_54:
// fs1 == 0 and fe1 == 0x1d and fm1 == 0x1ea and fs2 == 0 and fe2 == 0x1e and fm2 == 0x3ff and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x0000 and rs2_sgn_prefix == 0x0000  
/* opcode: fdiv.h ; op1:x30; op2:x29; dest:x31; op1val:0x75ea; op2val:0x7bff;
   valaddr_reg:x4; val_offset:60*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:??; testreg:x3
*/
TEST_FPRR_OP(fdiv.h, x31, x30, x29, dyn, 96, 0, x4, 60*FLEN/8, x11, x1, x3)

inst_55:
// fs1 == 0 and fe1 == 0x1e and fm1 == 0x100 and fs2 == 0 and fe2 == 0x1e and fm2 == 0x3ff and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x0000 and rs2_sgn_prefix == 0x0000  
/* opcode: fdiv.h ; op1:x30; op2:x29; dest:x31; op1val:0x7900; op2val:0x7bff;
   valaddr_reg:x4; val_offset:62*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:??; testreg:x3
*/
TEST_FPRR_OP(fdiv.h, x31, x30, x29, dyn, 96, 0, x4, 62*FLEN/8, x11, x1, x3)

inst_56:
// fs1 == 0 and fe1 == 0x18 and fm1 == 0x2bf and fs2 == 0 and fe2 == 0x1e and fm2 == 0x3ff and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x0000 and rs2_sgn_prefix == 0x0000  
/* opcode: fdiv.h ; op1:x30; op2:x29; dest:x31; op1val:0x62bf; op2val:0x7bff;
   valaddr_reg:x4; val_offset:64*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:??; testreg:x3
*/
TEST_FPRR_OP(fdiv.h, x31, x30, x29, dyn, 96, 0, x4, 64*FLEN/8, x11, x1, x3)

inst_57:
// fs1 == 0 and fe1 == 0x1d and fm1 == 0x0d1 and fs2 == 0 and fe2 == 0x1e and fm2 == 0x3ff and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x0000 and rs2_sgn_prefix == 0x0000  
/* opcode: fdiv.h ; op1:x30; op2:x29; dest:x31; op1val:0x74d1; op2val:0x7bff;
   valaddr_reg:x4; val_offset:66*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:??; testreg:x3
*/
TEST_FPRR_OP(fdiv.h, x31, x30, x29, dyn, 96, 0, x4, 66*FLEN/8, x11, x1, x3)

inst_58:
// fs1 == 0 and fe1 == 0x1e and fm1 == 0x307 and fs2 == 0 and fe2 == 0x1e and fm2 == 0x3ff and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x0000 and rs2_sgn_prefix == 0x0000  
/* opcode: fdiv.h ; op1:x30; op2:x29; dest:x31; op1val:0x7b07; op2val:0x7bff;
   valaddr_reg:x4; val_offset:68*FLEN/8; rmval:dyn; fcsr: 96;
   correctval:??; testreg:x3
*/
TEST_FPRR_OP(fdiv.h, x31, x30, x29, dyn, 96, 0, x4, 68*FLEN/8, x11, x1, x3)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(29596,32,FLEN)
NAN_BOXED(31743,32,FLEN)
NAN_BOXED(30186,32,FLEN)
NAN_BOXED(30186,32,FLEN)
NAN_BOXED(30976,32,FLEN)
NAN_BOXED(30976,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(31743,32,FLEN)
NAN_BOXED(29733,32,FLEN)
NAN_BOXED(31743,32,FLEN)
NAN_BOXED(31734,32,FLEN)
NAN_BOXED(31743,32,FLEN)
NAN_BOXED(31408,32,FLEN)
NAN_BOXED(31743,32,FLEN)
NAN_BOXED(31004,32,FLEN)
NAN_BOXED(31743,32,FLEN)
NAN_BOXED(30995,32,FLEN)
NAN_BOXED(31743,32,FLEN)
NAN_BOXED(30766,32,FLEN)
NAN_BOXED(31743,32,FLEN)
NAN_BOXED(31070,32,FLEN)
NAN_BOXED(31743,32,FLEN)
NAN_BOXED(31248,32,FLEN)
NAN_BOXED(31743,32,FLEN)
test_dataset_1:
NAN_BOXED(29905,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(31467,32,FLEN)
NAN_BOXED(31743,32,FLEN)
NAN_BOXED(31167,32,FLEN)
NAN_BOXED(31743,32,FLEN)
NAN_BOXED(31157,32,FLEN)
NAN_BOXED(31743,32,FLEN)
NAN_BOXED(30289,32,FLEN)
NAN_BOXED(31743,32,FLEN)
NAN_BOXED(30492,32,FLEN)
NAN_BOXED(31743,32,FLEN)
NAN_BOXED(31495,32,FLEN)
NAN_BOXED(31743,32,FLEN)
NAN_BOXED(28761,32,FLEN)
NAN_BOXED(31743,32,FLEN)
NAN_BOXED(31672,32,FLEN)
NAN_BOXED(31743,32,FLEN)
NAN_BOXED(30978,32,FLEN)
NAN_BOXED(31743,32,FLEN)
NAN_BOXED(30734,32,FLEN)
NAN_BOXED(31743,32,FLEN)
NAN_BOXED(30108,32,FLEN)
NAN_BOXED(31743,32,FLEN)
test_dataset_2:
NAN_BOXED(30891,16,FLEN)
NAN_BOXED(31743,16,FLEN)
NAN_BOXED(31092,16,FLEN)
NAN_BOXED(31743,16,FLEN)
NAN_BOXED(31449,16,FLEN)
NAN_BOXED(31743,16,FLEN)
NAN_BOXED(31457,16,FLEN)
NAN_BOXED(31743,16,FLEN)
NAN_BOXED(31547,16,FLEN)
NAN_BOXED(31743,16,FLEN)
NAN_BOXED(31398,16,FLEN)
NAN_BOXED(31743,16,FLEN)
NAN_BOXED(29838,16,FLEN)
NAN_BOXED(31743,16,FLEN)
NAN_BOXED(31444,16,FLEN)
NAN_BOXED(31743,16,FLEN)
NAN_BOXED(28073,16,FLEN)
NAN_BOXED(31743,16,FLEN)
NAN_BOXED(30352,16,FLEN)
NAN_BOXED(31743,16,FLEN)
NAN_BOXED(29875,16,FLEN)
NAN_BOXED(31743,16,FLEN)
NAN_BOXED(31482,16,FLEN)
NAN_BOXED(31743,16,FLEN)
NAN_BOXED(30953,16,FLEN)
NAN_BOXED(31743,16,FLEN)
NAN_BOXED(31166,16,FLEN)
NAN_BOXED(31743,16,FLEN)
NAN_BOXED(31499,16,FLEN)
NAN_BOXED(31743,16,FLEN)
NAN_BOXED(30730,16,FLEN)
NAN_BOXED(31743,16,FLEN)
NAN_BOXED(29939,16,FLEN)
NAN_BOXED(23795,16,FLEN)
NAN_BOXED(30923,16,FLEN)
NAN_BOXED(24779,16,FLEN)
NAN_BOXED(29264,16,FLEN)
NAN_BOXED(23120,16,FLEN)
NAN_BOXED(30945,16,FLEN)
NAN_BOXED(24801,16,FLEN)
NAN_BOXED(26990,16,FLEN)
NAN_BOXED(20846,16,FLEN)
NAN_BOXED(29956,16,FLEN)
NAN_BOXED(23812,16,FLEN)
NAN_BOXED(31531,16,FLEN)
NAN_BOXED(25387,16,FLEN)
NAN_BOXED(30556,16,FLEN)
NAN_BOXED(31743,16,FLEN)
NAN_BOXED(31014,16,FLEN)
NAN_BOXED(31743,16,FLEN)
NAN_BOXED(30840,16,FLEN)
NAN_BOXED(31743,16,FLEN)
NAN_BOXED(31621,16,FLEN)
NAN_BOXED(31743,16,FLEN)
NAN_BOXED(30437,16,FLEN)
NAN_BOXED(31743,16,FLEN)
NAN_BOXED(29593,16,FLEN)
NAN_BOXED(31743,16,FLEN)
NAN_BOXED(31697,16,FLEN)
NAN_BOXED(31743,16,FLEN)
NAN_BOXED(30186,16,FLEN)
NAN_BOXED(31743,16,FLEN)
NAN_BOXED(30976,16,FLEN)
NAN_BOXED(31743,16,FLEN)
NAN_BOXED(25279,16,FLEN)
NAN_BOXED(31743,16,FLEN)
NAN_BOXED(29905,16,FLEN)
NAN_BOXED(31743,16,FLEN)
NAN_BOXED(31495,16,FLEN)
NAN_BOXED(31743,16,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;



signature_x2_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x2_1:
    .fill 32*((SIGALIGN)/4),4,0xdeadbeef


signature_x9_0:
    .fill 28*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_0:
    .fill 58*((SIGALIGN)/4),4,0xdeadbeef

#ifdef rvtest_mtrap_routine
tsig_begin_canary:
CANARY;

mtrap_sigptr:
    .fill 64*XLEN/32,4,0xdeadbeef

tsig_end_canary:
CANARY;
#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif


sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
