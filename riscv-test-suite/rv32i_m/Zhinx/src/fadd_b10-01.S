
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.12.2
// timestamp : Wed Sep 25 05:45:15 2024 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /home/riscv/testing/riscv-ctg/sample_cgfs/dataset.cgf \
//                  --cgf /home/riscv/testing/riscv-ctg/sample_cgfs/sample_cgfs_fext/RV32Zhinx/rv32h_fadd.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fadd.h instruction of the RISC-V RV32_Zfinx_Zhinx,RV64_Zfinx_Zhinx extension for the fadd_b10 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32I_Zfinx_Zhinx,RV64I_Zfinx_Zhinx")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*Zfinx.*Zhinx.*);def TEST_CASE_1=True;",fadd_b10)

RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x7,test_dataset_0)
RVTEST_SIGBASE(x11,signature_x11_1)

inst_0:
// rs1 == rs2 != rd, rs1==x25, rs2==x25, rd==x23,fs1 == 0 and fe1 == 0x14 and fm1 == 0x2ee and fs2 == 0 and fe2 == 0x00 and fm2 == 0x053 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x0000 and rs2_sgn_prefix == 0x0000  
/* opcode: fadd.h ; op1:x25; op2:x25; dest:x23; op1val:0x52ee; op2val:0x52ee; 
   valaddr_reg:x7; val_offset:0*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:??; testreg:x15 
*/
TEST_FPRR_OP(fadd.h, x23, x25, x25, dyn, 0, 0, x7, 0*FLEN/8, x18, x11, x15)

inst_1:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x4, rs2==x3, rd==x28,fs1 == 0 and fe1 == 0x14 and fm1 == 0x2ee and fs2 == 0 and fe2 == 0x0a and fm2 == 0x262 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x0000 and rs2_sgn_prefix == 0x0000  
/* opcode: fadd.h ; op1:x4; op2:x3; dest:x28; op1val:0x52ee; op2val:0x2a62; 
   valaddr_reg:x7; val_offset:2*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:??; testreg:x15 
*/
TEST_FPRR_OP(fadd.h, x28, x4, x3, dyn, 0, 0, x7, 2*FLEN/8, x18, x11, x15)

inst_2:
// rs1 == rs2 == rd, rs1==x19, rs2==x19, rd==x19,fs1 == 0 and fe1 == 0x14 and fm1 == 0x2ee and fs2 == 0 and fe2 == 0x0d and fm2 == 0x3fb and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x0000 and rs2_sgn_prefix == 0x0000  
/* opcode: fadd.h ; op1:x19; op2:x19; dest:x19; op1val:0x52ee; op2val:0x52ee; 
   valaddr_reg:x7; val_offset:4*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:??; testreg:x15 
*/
TEST_FPRR_OP(fadd.h, x19, x19, x19, dyn, 0, 0, x7, 4*FLEN/8, x18, x11, x15)

inst_3:
// rs2 == rd != rs1, rs1==x1, rs2==x27, rd==x27,fs1 == 0 and fe1 == 0x14 and fm1 == 0x2ee and fs2 == 0 and fe2 == 0x11 and fm2 == 0x0fd and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x0000 and rs2_sgn_prefix == 0x0000  
/* opcode: fadd.h ; op1:x1; op2:x27; dest:x27; op1val:0x52ee; op2val:0x44fd; 
   valaddr_reg:x7; val_offset:6*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:??; testreg:x15 
*/
TEST_FPRR_OP(fadd.h, x27, x1, x27, dyn, 0, 0, x7, 6*FLEN/8, x18, x11, x15)

inst_4:
// rs1 == rd != rs2, rs1==x8, rs2==x26, rd==x8,fs1 == 0 and fe1 == 0x14 and fm1 == 0x2ee and fs2 == 0 and fe2 == 0x14 and fm2 == 0x23c and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x0000 and rs2_sgn_prefix == 0x0000  
/* opcode: fadd.h ; op1:x8; op2:x26; dest:x8; op1val:0x52ee; op2val:0x523c; 
   valaddr_reg:x7; val_offset:8*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:??; testreg:x15 
*/
TEST_FPRR_OP(fadd.h, x8, x8, x26, dyn, 0, 0, x7, 8*FLEN/8, x18, x11, x15)

inst_5:
// rs1==x6, rs2==x22, rd==x3,fs1 == 0 and fe1 == 0x14 and fm1 == 0x2ee and fs2 == 0 and fe2 == 0x17 and fm2 == 0x3cb and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x0000 and rs2_sgn_prefix == 0x0000  
/* opcode: fadd.h ; op1:x6; op2:x22; dest:x3; op1val:0x52ee; op2val:0x5fcb; 
   valaddr_reg:x7; val_offset:10*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:??; testreg:x15 
*/
TEST_FPRR_OP(fadd.h, x3, x6, x22, dyn, 0, 0, x7, 10*FLEN/8, x18, x11, x15)

inst_6:
// rs1==x17, rs2==x2, rd==x9,
/* opcode: fadd.h ; op1:x17; op2:x2; dest:x9; op1val:0x0; op2val:0x0; 
   valaddr_reg:x7; val_offset:12*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:??; testreg:x15 
*/
TEST_FPRR_OP(fadd.h, x9, x17, x2, dyn, 0, 0, x7, 12*FLEN/8, x18, x11, x15)

inst_7:
// rs1==x29, rs2==x5, rd==x17,
/* opcode: fadd.h ; op1:x29; op2:x5; dest:x17; op1val:0x0; op2val:0x0; 
   valaddr_reg:x7; val_offset:14*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:??; testreg:x15 
*/
TEST_FPRR_OP(fadd.h, x17, x29, x5, dyn, 0, 0, x7, 14*FLEN/8, x18, x11, x15)

inst_8:
// rs1==x3, rs2==x14, rd==x22,
/* opcode: fadd.h ; op1:x3; op2:x14; dest:x22; op1val:0x0; op2val:0x0; 
   valaddr_reg:x7; val_offset:16*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:??; testreg:x15 
*/
TEST_FPRR_OP(fadd.h, x22, x3, x14, dyn, 0, 0, x7, 16*FLEN/8, x18, x11, x15)

inst_9:
// rs1==x14, rs2==x12, rd==x4,
/* opcode: fadd.h ; op1:x14; op2:x12; dest:x4; op1val:0x0; op2val:0x0; 
   valaddr_reg:x7; val_offset:18*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:??; testreg:x15 
*/
TEST_FPRR_OP(fadd.h, x4, x14, x12, dyn, 0, 0, x7, 18*FLEN/8, x18, x11, x15)

inst_10:
// rs1==x30, rs2==x0, rd==x16,
/* opcode: fadd.h ; op1:x30; op2:x0; dest:x16; op1val:0x0; op2val:0x0; 
   valaddr_reg:x7; val_offset:20*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:??; testreg:x15 
*/
TEST_FPRR_OP(fadd.h, x16, x30, x0, dyn, 0, 0, x7, 20*FLEN/8, x18, x11, x15)

inst_11:
// rs1==x16, rs2==x13, rd==x10,
/* opcode: fadd.h ; op1:x16; op2:x13; dest:x10; op1val:0x0; op2val:0x0; 
   valaddr_reg:x7; val_offset:22*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:??; testreg:x15 
*/
TEST_FPRR_OP(fadd.h, x10, x16, x13, dyn, 0, 0, x7, 22*FLEN/8, x18, x11, x15)
RVTEST_VALBASEUPD(x17,test_dataset_1)

inst_12:
// rs1==x31, rs2==x8, rd==x29,
/* opcode: fadd.h ; op1:x31; op2:x8; dest:x29; op1val:0x0; op2val:0x0; 
   valaddr_reg:x17; val_offset:0*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:??; testreg:x15 
*/
TEST_FPRR_OP(fadd.h, x29, x31, x8, dyn, 0, 0, x17, 0*FLEN/8, x19, x11, x15)

inst_13:
// rs1==x2, rs2==x7, rd==x26,
/* opcode: fadd.h ; op1:x2; op2:x7; dest:x26; op1val:0x0; op2val:0x0; 
   valaddr_reg:x17; val_offset:2*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:??; testreg:x15 
*/
TEST_FPRR_OP(fadd.h, x26, x2, x7, dyn, 0, 0, x17, 2*FLEN/8, x19, x11, x15)

inst_14:
// rs1==x7, rs2==x29, rd==x0,
/* opcode: fadd.h ; op1:x7; op2:x29; dest:x0; op1val:0x0; op2val:0x0; 
   valaddr_reg:x17; val_offset:4*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:??; testreg:x8 
*/
TEST_FPRR_OP(fadd.h, x0, x7, x29, dyn, 0, 0, x17, 4*FLEN/8, x19, x11, x8)

inst_15:
// rs1==x15, rs2==x23, rd==x7,
/* opcode: fadd.h ; op1:x15; op2:x23; dest:x7; op1val:0x0; op2val:0x0; 
   valaddr_reg:x17; val_offset:6*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:??; testreg:x8 
*/
TEST_FPRR_OP(fadd.h, x7, x15, x23, dyn, 0, 0, x17, 6*FLEN/8, x19, x11, x8)
RVTEST_SIGBASE(x3,signature_x3_0)

inst_16:
// rs1==x13, rs2==x11, rd==x14,
/* opcode: fadd.h ; op1:x13; op2:x11; dest:x14; op1val:0x0; op2val:0x0; 
   valaddr_reg:x17; val_offset:8*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:??; testreg:x8 
*/
TEST_FPRR_OP(fadd.h, x14, x13, x11, dyn, 0, 0, x17, 8*FLEN/8, x19, x3, x8)

inst_17:
// rs1==x24, rs2==x15, rd==x13,
/* opcode: fadd.h ; op1:x24; op2:x15; dest:x13; op1val:0x0; op2val:0x0; 
   valaddr_reg:x17; val_offset:10*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:??; testreg:x8 
*/
TEST_FPRR_OP(fadd.h, x13, x24, x15, dyn, 0, 0, x17, 10*FLEN/8, x19, x3, x8)

inst_18:
// rs1==x10, rs2==x28, rd==x24,
/* opcode: fadd.h ; op1:x10; op2:x28; dest:x24; op1val:0x0; op2val:0x0; 
   valaddr_reg:x17; val_offset:12*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:??; testreg:x8 
*/
TEST_FPRR_OP(fadd.h, x24, x10, x28, dyn, 0, 0, x17, 12*FLEN/8, x19, x3, x8)

inst_19:
// rs1==x18, rs2==x4, rd==x11,
/* opcode: fadd.h ; op1:x18; op2:x4; dest:x11; op1val:0x0; op2val:0x0; 
   valaddr_reg:x17; val_offset:14*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:??; testreg:x8 
*/
TEST_FPRR_OP(fadd.h, x11, x18, x4, dyn, 0, 0, x17, 14*FLEN/8, x19, x3, x8)

inst_20:
// rs1==x28, rs2==x31, rd==x21,
/* opcode: fadd.h ; op1:x28; op2:x31; dest:x21; op1val:0x0; op2val:0x0; 
   valaddr_reg:x17; val_offset:16*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:??; testreg:x8 
*/
TEST_FPRR_OP(fadd.h, x21, x28, x31, dyn, 0, 0, x17, 16*FLEN/8, x19, x3, x8)

inst_21:
// rs1==x22, rs2==x21, rd==x18,
/* opcode: fadd.h ; op1:x22; op2:x21; dest:x18; op1val:0x0; op2val:0x0; 
   valaddr_reg:x17; val_offset:18*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:??; testreg:x8 
*/
TEST_FPRR_OP(fadd.h, x18, x22, x21, dyn, 0, 0, x17, 18*FLEN/8, x19, x3, x8)

inst_22:
// rs1==x12, rs2==x16, rd==x2,
/* opcode: fadd.h ; op1:x12; op2:x16; dest:x2; op1val:0x0; op2val:0x0; 
   valaddr_reg:x17; val_offset:20*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:??; testreg:x8 
*/
TEST_FPRR_OP(fadd.h, x2, x12, x16, dyn, 0, 0, x17, 20*FLEN/8, x19, x3, x8)

inst_23:
// rs1==x9, rs2==x1, rd==x6,
/* opcode: fadd.h ; op1:x9; op2:x1; dest:x6; op1val:0x0; op2val:0x0; 
   valaddr_reg:x17; val_offset:22*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:??; testreg:x8 
*/
TEST_FPRR_OP(fadd.h, x6, x9, x1, dyn, 0, 0, x17, 22*FLEN/8, x19, x3, x8)

inst_24:
// rs1==x5, rs2==x24, rd==x15,
/* opcode: fadd.h ; op1:x5; op2:x24; dest:x15; op1val:0x0; op2val:0x0; 
   valaddr_reg:x17; val_offset:24*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:??; testreg:x8 
*/
TEST_FPRR_OP(fadd.h, x15, x5, x24, dyn, 0, 0, x17, 24*FLEN/8, x19, x3, x8)
RVTEST_VALBASEUPD(x7,test_dataset_2)

inst_25:
// rs1==x27, rs2==x6, rd==x1,
/* opcode: fadd.h ; op1:x27; op2:x6; dest:x1; op1val:0x0; op2val:0x0; 
   valaddr_reg:x7; val_offset:0*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:??; testreg:x8 
*/
TEST_FPRR_OP(fadd.h, x1, x27, x6, dyn, 0, 0, x7, 0*FLEN/8, x13, x3, x8)

inst_26:
// rs1==x21, rs2==x30, rd==x25,
/* opcode: fadd.h ; op1:x21; op2:x30; dest:x25; op1val:0x0; op2val:0x0; 
   valaddr_reg:x7; val_offset:2*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:??; testreg:x8 
*/
TEST_FPRR_OP(fadd.h, x25, x21, x30, dyn, 0, 0, x7, 2*FLEN/8, x13, x3, x8)

inst_27:
// rs1==x23, rs2==x10, rd==x5,
/* opcode: fadd.h ; op1:x23; op2:x10; dest:x5; op1val:0x0; op2val:0x0; 
   valaddr_reg:x7; val_offset:4*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:??; testreg:x4 
*/
TEST_FPRR_OP(fadd.h, x5, x23, x10, dyn, 0, 0, x7, 4*FLEN/8, x13, x3, x4)

inst_28:
// rs1==x26, rs2==x18, rd==x30,
/* opcode: fadd.h ; op1:x26; op2:x18; dest:x30; op1val:0x0; op2val:0x0; 
   valaddr_reg:x7; val_offset:6*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:??; testreg:x4 
*/
TEST_FPRR_OP(fadd.h, x30, x26, x18, dyn, 0, 0, x7, 6*FLEN/8, x13, x3, x4)

inst_29:
// rs1==x11, rs2==x9, rd==x12,
/* opcode: fadd.h ; op1:x11; op2:x9; dest:x12; op1val:0x0; op2val:0x0; 
   valaddr_reg:x7; val_offset:8*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:??; testreg:x4 
*/
TEST_FPRR_OP(fadd.h, x12, x11, x9, dyn, 0, 0, x7, 8*FLEN/8, x13, x3, x4)

inst_30:
// rs1==x0, rs2==x17, rd==x31,
/* opcode: fadd.h ; op1:x0; op2:x17; dest:x31; op1val:0x0; op2val:0x0; 
   valaddr_reg:x7; val_offset:10*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:??; testreg:x4 
*/
TEST_FPRR_OP(fadd.h, x31, x0, x17, dyn, 0, 0, x7, 10*FLEN/8, x13, x3, x4)

inst_31:
// rs1==x20,
/* opcode: fadd.h ; op1:x20; op2:x16; dest:x6; op1val:0x0; op2val:0x0; 
   valaddr_reg:x7; val_offset:12*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:??; testreg:x4 
*/
TEST_FPRR_OP(fadd.h, x6, x20, x16, dyn, 0, 0, x7, 12*FLEN/8, x13, x3, x4)
RVTEST_SIGBASE(x2,signature_x2_0)

inst_32:
// rs2==x20,
/* opcode: fadd.h ; op1:x1; op2:x20; dest:x10; op1val:0x0; op2val:0x0; 
   valaddr_reg:x7; val_offset:14*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:??; testreg:x4 
*/
TEST_FPRR_OP(fadd.h, x10, x1, x20, dyn, 0, 0, x7, 14*FLEN/8, x13, x2, x4)

inst_33:
// rd==x20,
/* opcode: fadd.h ; op1:x28; op2:x17; dest:x20; op1val:0x0; op2val:0x0; 
   valaddr_reg:x7; val_offset:16*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:??; testreg:x4 
*/
TEST_FPRR_OP(fadd.h, x20, x28, x17, dyn, 0, 0, x7, 16*FLEN/8, x13, x2, x4)

inst_34:
// fs1 == 0 and fe1 == 0x14 and fm1 == 0x2ee and fs2 == 0 and fe2 == 0x00 and fm2 == 0x053 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x0000 and rs2_sgn_prefix == 0x0000  
/* opcode: fadd.h ; op1:x30; op2:x29; dest:x31; op1val:0x52ee; op2val:0x53; 
   valaddr_reg:x7; val_offset:18*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:??; testreg:x4 
*/
TEST_FPRR_OP(fadd.h, x31, x30, x29, dyn, 0, 0, x7, 18*FLEN/8, x13, x2, x4)

inst_35:
// fs1 == 0 and fe1 == 0x14 and fm1 == 0x2ee and fs2 == 0 and fe2 == 0x0d and fm2 == 0x3fb and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x0000 and rs2_sgn_prefix == 0x0000  
/* opcode: fadd.h ; op1:x30; op2:x29; dest:x31; op1val:0x52ee; op2val:0x37fb; 
   valaddr_reg:x7; val_offset:20*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:??; testreg:x4 
*/
TEST_FPRR_OP(fadd.h, x31, x30, x29, dyn, 0, 0, x7, 20*FLEN/8, x13, x2, x4)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(21230,32,FLEN)
NAN_BOXED(21230,32,FLEN)
NAN_BOXED(21230,32,FLEN)
NAN_BOXED(10850,32,FLEN)
NAN_BOXED(21230,32,FLEN)
NAN_BOXED(21230,32,FLEN)
NAN_BOXED(21230,32,FLEN)
NAN_BOXED(17661,32,FLEN)
NAN_BOXED(21230,32,FLEN)
NAN_BOXED(21052,32,FLEN)
NAN_BOXED(21230,32,FLEN)
NAN_BOXED(24523,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(0,32,FLEN)
test_dataset_1:
NAN_BOXED(0,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(0,32,FLEN)
test_dataset_2:
NAN_BOXED(0,16,FLEN)
NAN_BOXED(0,16,FLEN)
NAN_BOXED(0,16,FLEN)
NAN_BOXED(0,16,FLEN)
NAN_BOXED(0,16,FLEN)
NAN_BOXED(0,16,FLEN)
NAN_BOXED(0,16,FLEN)
NAN_BOXED(0,16,FLEN)
NAN_BOXED(0,16,FLEN)
NAN_BOXED(0,16,FLEN)
NAN_BOXED(0,16,FLEN)
NAN_BOXED(0,16,FLEN)
NAN_BOXED(0,16,FLEN)
NAN_BOXED(0,16,FLEN)
NAN_BOXED(0,16,FLEN)
NAN_BOXED(0,16,FLEN)
NAN_BOXED(0,16,FLEN)
NAN_BOXED(0,16,FLEN)
NAN_BOXED(21230,16,FLEN)
NAN_BOXED(83,16,FLEN)
NAN_BOXED(21230,16,FLEN)
NAN_BOXED(14331,16,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;



signature_x11_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x11_1:
    .fill 32*((SIGALIGN)/4),4,0xdeadbeef


signature_x3_0:
    .fill 32*((SIGALIGN)/4),4,0xdeadbeef


signature_x2_0:
    .fill 8*((SIGALIGN)/4),4,0xdeadbeef

#ifdef rvtest_mtrap_routine
tsig_begin_canary:
CANARY;

mtrap_sigptr:
    .fill 64*XLEN/32,4,0xdeadbeef

tsig_end_canary:
CANARY;
#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif


sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
