
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.12.2
// timestamp : Wed Sep 25 06:03:37 2024 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /home/riscv/testing/riscv-ctg/sample_cgfs/dataset.cgf \
//                  --cgf /home/riscv/testing/riscv-ctg/sample_cgfs/sample_cgfs_fext/RV32Zhinx/rv32h_fnmadd.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fnmadd.h instruction of the RISC-V RV32_Zfinx_Zhinx,RV64_Zfinx_Zhinx extension for the fnmadd_b7 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32I_Zfinx_Zhinx,RV64I_Zfinx_Zhinx")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*Zfinx.*Zhinx.*);def TEST_CASE_1=True;",fnmadd_b7)

RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x2,test_dataset_0)
RVTEST_SIGBASE(x8,signature_x8_1)

inst_0:
// rs1 == rs3 != rs2 and rs1 == rs3 != rd and rd != rs2, rs1==x16, rs2==x4, rs3==x16, rd==x23,fs1 == 0 and fe1 == 0x1e and fm1 == 0x257 and fs2 == 0 and fe2 == 0x0f and fm2 == 0x024 and fs3 == 0 and fe3 == 0x1e and fm3 == 0x292 and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x0000 and rs2_sgn_prefix == 0x0000 and rs3_sgn_prefix == 0x0000  
/* opcode: fnmadd.h ; op1:x16; op2:x4; op3:x16; dest:x23; op1val:0x7a57; op2val:0x3c24;
op3val:0x7a57; valaddr_reg:x2; val_offset:0*FLEN/8; rmval:dyn;
testreg:x6; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.h, x23, x16, x4, x16, dyn, 96, 0, x2, 0*FLEN/8, x7, x8, x6)

inst_1:
// rs2 == rs3 != rs1 and rs2 == rs3 != rd and rd != rs1, rs1==x22, rs2==x26, rs3==x26, rd==x15,fs1 == 0 and fe1 == 0x1d and fm1 == 0x3c1 and fs2 == 0 and fe2 == 0x0e and fm2 == 0x050 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x02f and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x0000 and rs2_sgn_prefix == 0x0000 and rs3_sgn_prefix == 0x0000  
/* opcode: fnmadd.h ; op1:x22; op2:x26; op3:x26; dest:x15; op1val:0x77c1; op2val:0x3850;
op3val:0x3850; valaddr_reg:x2; val_offset:3*FLEN/8; rmval:dyn;
testreg:x6; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.h, x15, x22, x26, x26, dyn, 96, 0, x2, 3*FLEN/8, x7, x8, x6)

inst_2:
// rs1 != rs2 and rs1 != rd and rs1 != rs3 and rs2 != rs3 and rs2 != rd and rs3 != rd, rs1==x4, rs2==x20, rs3==x17, rd==x29,fs1 == 0 and fe1 == 0x13 and fm1 == 0x3a5 and fs2 == 0 and fe2 == 0x19 and fm2 == 0x18b and fs3 == 0 and fe3 == 0x1e and fm3 == 0x14c and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x0000 and rs2_sgn_prefix == 0x0000 and rs3_sgn_prefix == 0x0000  
/* opcode: fnmadd.h ; op1:x4; op2:x20; op3:x17; dest:x29; op1val:0x4fa5; op2val:0x658b;
op3val:0x794c; valaddr_reg:x2; val_offset:6*FLEN/8; rmval:dyn;
testreg:x6; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.h, x29, x4, x20, x17, dyn, 96, 0, x2, 6*FLEN/8, x7, x8, x6)

inst_3:
// rs2 == rd != rs1 and rs2 == rd != rs3 and rs3 != rs1, rs1==x0, rs2==x1, rs3==x8, rd==x1,fs1 == 0 and fe1 == 0x1d and fm1 == 0x385 and fs2 == 0 and fe2 == 0x0f and fm2 == 0x276 and fs3 == 0 and fe3 == 0x1e and fm3 == 0x213 and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x0000 and rs2_sgn_prefix == 0x0000 and rs3_sgn_prefix == 0x0000  
/* opcode: fnmadd.h ; op1:x0; op2:x1; op3:x8; dest:x1; op1val:0x0; op2val:0x3e76;
op3val:0x7a13; valaddr_reg:x2; val_offset:9*FLEN/8; rmval:dyn;
testreg:x6; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.h, x1, x0, x1, x8, dyn, 96, 0, x2, 9*FLEN/8, x7, x8, x6)

inst_4:
// rs1 == rd == rs3 != rs2, rs1==x13, rs2==x12, rs3==x13, rd==x13,fs1 == 0 and fe1 == 0x1d and fm1 == 0x1f7 and fs2 == 0 and fe2 == 0x10 and fm2 == 0x020 and fs3 == 0 and fe3 == 0x1e and fm3 == 0x228 and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x0000 and rs2_sgn_prefix == 0x0000 and rs3_sgn_prefix == 0x0000  
/* opcode: fnmadd.h ; op1:x13; op2:x12; op3:x13; dest:x13; op1val:0x75f7; op2val:0x4020;
op3val:0x75f7; valaddr_reg:x2; val_offset:12*FLEN/8; rmval:dyn;
testreg:x6; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.h, x13, x13, x12, x13, dyn, 96, 0, x2, 12*FLEN/8, x7, x8, x6)

inst_5:
// rs1 == rs2 == rs3 != rd, rs1==x30, rs2==x30, rs3==x30, rd==x19,fs1 == 0 and fe1 == 0x1d and fm1 == 0x05c and fs2 == 0 and fe2 == 0x10 and fm2 == 0x1e1 and fs3 == 0 and fe3 == 0x1e and fm3 == 0x269 and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x0000 and rs2_sgn_prefix == 0x0000 and rs3_sgn_prefix == 0x0000  
/* opcode: fnmadd.h ; op1:x30; op2:x30; op3:x30; dest:x19; op1val:0x745c; op2val:0x745c;
op3val:0x745c; valaddr_reg:x2; val_offset:15*FLEN/8; rmval:dyn;
testreg:x6; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.h, x19, x30, x30, x30, dyn, 96, 0, x2, 15*FLEN/8, x7, x8, x6)

inst_6:
// rs1 == rs2 != rs3 and rs1 == rs2 != rd and rd != rs3, rs1==x25, rs2==x25, rs3==x12, rd==x27,fs1 == 0 and fe1 == 0x1e and fm1 == 0x1d5 and fs2 == 0 and fe2 == 0x0e and fm2 == 0x089 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x29e and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x0000 and rs2_sgn_prefix == 0x0000 and rs3_sgn_prefix == 0x0000  
/* opcode: fnmadd.h ; op1:x25; op2:x25; op3:x12; dest:x27; op1val:0x79d5; op2val:0x79d5;
op3val:0x769e; valaddr_reg:x2; val_offset:18*FLEN/8; rmval:dyn;
testreg:x6; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.h, x27, x25, x25, x12, dyn, 96, 0, x2, 18*FLEN/8, x7, x8, x6)

inst_7:
// rd == rs2 == rs3 != rs1, rs1==x11, rs2==x18, rs3==x18, rd==x18,fs1 == 0 and fe1 == 0x1e and fm1 == 0x04d and fs2 == 0 and fe2 == 0x0f and fm2 == 0x111 and fs3 == 0 and fe3 == 0x1e and fm3 == 0x174 and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x0000 and rs2_sgn_prefix == 0x0000 and rs3_sgn_prefix == 0x0000  
/* opcode: fnmadd.h ; op1:x11; op2:x18; op3:x18; dest:x18; op1val:0x784d; op2val:0x3d11;
op3val:0x3d11; valaddr_reg:x2; val_offset:21*FLEN/8; rmval:dyn;
testreg:x6; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.h, x18, x11, x18, x18, dyn, 96, 0, x2, 21*FLEN/8, x7, x8, x6)

inst_8:
// rs1 == rd != rs2 and rs1 == rd != rs3 and rs3 != rs2, rs1==x3, rs2==x10, rs3==x4, rd==x3,fs1 == 0 and fe1 == 0x1c and fm1 == 0x22c and fs2 == 0 and fe2 == 0x10 and fm2 == 0x1bc and fs3 == 0 and fe3 == 0x1e and fm3 == 0x06d and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x0000 and rs2_sgn_prefix == 0x0000 and rs3_sgn_prefix == 0x0000  
/* opcode: fnmadd.h ; op1:x3; op2:x10; op3:x4; dest:x3; op1val:0x722c; op2val:0x41bc;
op3val:0x786d; valaddr_reg:x2; val_offset:24*FLEN/8; rmval:dyn;
testreg:x6; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.h, x3, x3, x10, x4, dyn, 96, 0, x2, 24*FLEN/8, x7, x8, x6)

inst_9:
// rs1 == rs2 == rs3 == rd, rs1==x21, rs2==x21, rs3==x21, rd==x21,fs1 == 0 and fe1 == 0x1e and fm1 == 0x270 and fs2 == 0 and fe2 == 0x0d and fm2 == 0x146 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x03f and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x0000 and rs2_sgn_prefix == 0x0000 and rs3_sgn_prefix == 0x0000  
/* opcode: fnmadd.h ; op1:x21; op2:x21; op3:x21; dest:x21; op1val:0x7a70; op2val:0x7a70;
op3val:0x7a70; valaddr_reg:x2; val_offset:27*FLEN/8; rmval:dyn;
testreg:x6; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.h, x21, x21, x21, x21, dyn, 96, 0, x2, 27*FLEN/8, x7, x8, x6)

inst_10:
// rs3 == rd != rs1 and rs3 == rd != rs2 and rs2 != rs1, rs1==x28, rs2==x5, rs3==x24, rd==x24,fs1 == 0 and fe1 == 0x1e and fm1 == 0x26c and fs2 == 0 and fe2 == 0x0e and fm2 == 0x2d4 and fs3 == 0 and fe3 == 0x1e and fm3 == 0x17b and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x0000 and rs2_sgn_prefix == 0x0000 and rs3_sgn_prefix == 0x0000  
/* opcode: fnmadd.h ; op1:x28; op2:x5; op3:x24; dest:x24; op1val:0x7a6c; op2val:0x3ad4;
op3val:0x797b; valaddr_reg:x2; val_offset:30*FLEN/8; rmval:dyn;
testreg:x6; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.h, x24, x28, x5, x24, dyn, 96, 0, x2, 30*FLEN/8, x7, x8, x6)
RVTEST_VALBASEUPD(x18,test_dataset_1)

inst_11:
// rs1 == rs2 == rd != rs3, rs1==x2, rs2==x2, rs3==x1, rd==x2,fs1 == 0 and fe1 == 0x1e and fm1 == 0x2c0 and fs2 == 0 and fe2 == 0x0d and fm2 == 0x25c and fs3 == 0 and fe3 == 0x1d and fm3 == 0x15d and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x0000 and rs2_sgn_prefix == 0x0000 and rs3_sgn_prefix == 0x0000  
/* opcode: fnmadd.h ; op1:x2; op2:x2; op3:x1; dest:x2; op1val:0x7ac0; op2val:0x7ac0;
op3val:0x755d; valaddr_reg:x18; val_offset:0*FLEN/8; rmval:dyn;
testreg:x6; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.h, x2, x2, x2, x1, dyn, 96, 0, x18, 0*FLEN/8, x20, x8, x6)

inst_12:
// rs1==x6, rs2==x7, rs3==x19, rd==x16,fs1 == 0 and fe1 == 0x1b and fm1 == 0x1f5 and fs2 == 0 and fe2 == 0x12 and fm2 == 0x04b and fs3 == 0 and fe3 == 0x1e and fm3 == 0x266 and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x0000 and rs2_sgn_prefix == 0x0000 and rs3_sgn_prefix == 0x0000  
/* opcode: fnmadd.h ; op1:x6; op2:x7; op3:x19; dest:x16; op1val:0x6df5; op2val:0x484b;
op3val:0x7a66; valaddr_reg:x18; val_offset:3*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.h, x16, x6, x7, x19, dyn, 96, 0, x18, 3*FLEN/8, x20, x8, x10)
RVTEST_SIGBASE(x2,signature_x2_0)

inst_13:
// rs1==x9, rs2==x3, rs3==x11, rd==x12,fs1 == 0 and fe1 == 0x1e and fm1 == 0x26f and fs2 == 0 and fe2 == 0x0e and fm2 == 0x06c and fs3 == 0 and fe3 == 0x1d and fm3 == 0x31e and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x0000 and rs2_sgn_prefix == 0x0000 and rs3_sgn_prefix == 0x0000  
/* opcode: fnmadd.h ; op1:x9; op2:x3; op3:x11; dest:x12; op1val:0x7a6f; op2val:0x386c;
op3val:0x771e; valaddr_reg:x18; val_offset:6*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.h, x12, x9, x3, x11, dyn, 96, 0, x18, 6*FLEN/8, x20, x2, x10)

inst_14:
// rs1==x8, rs2==x16, rs3==x14, rd==x22,fs1 == 0 and fe1 == 0x1b and fm1 == 0x1ff and fs2 == 0 and fe2 == 0x10 and fm2 == 0x034 and fs3 == 0 and fe3 == 0x1c and fm3 == 0x24e and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x0000 and rs2_sgn_prefix == 0x0000 and rs3_sgn_prefix == 0x0000  
/* opcode: fnmadd.h ; op1:x8; op2:x16; op3:x14; dest:x22; op1val:0x6dff; op2val:0x4034;
op3val:0x724e; valaddr_reg:x18; val_offset:9*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.h, x22, x8, x16, x14, dyn, 96, 0, x18, 9*FLEN/8, x20, x2, x10)

inst_15:
// rs1==x1, rs2==x29, rs3==x23, rd==x8,fs1 == 0 and fe1 == 0x1e and fm1 == 0x113 and fs2 == 0 and fe2 == 0x0d and fm2 == 0x356 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x0a8 and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x0000 and rs2_sgn_prefix == 0x0000 and rs3_sgn_prefix == 0x0000  
/* opcode: fnmadd.h ; op1:x1; op2:x29; op3:x23; dest:x8; op1val:0x7913; op2val:0x3756;
op3val:0x74a8; valaddr_reg:x18; val_offset:12*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.h, x8, x1, x29, x23, dyn, 96, 0, x18, 12*FLEN/8, x20, x2, x10)

inst_16:
// rs1==x14, rs2==x8, rs3==x5, rd==x11,fs1 == 0 and fe1 == 0x1e and fm1 == 0x39b and fs2 == 0 and fe2 == 0x0e and fm2 == 0x0f3 and fs3 == 0 and fe3 == 0x1e and fm3 == 0x0b4 and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x0000 and rs2_sgn_prefix == 0x0000 and rs3_sgn_prefix == 0x0000  
/* opcode: fnmadd.h ; op1:x14; op2:x8; op3:x5; dest:x11; op1val:0x7b9b; op2val:0x38f3;
op3val:0x78b4; valaddr_reg:x18; val_offset:15*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.h, x11, x14, x8, x5, dyn, 96, 0, x18, 15*FLEN/8, x20, x2, x10)

inst_17:
// rs1==x7, rs2==x13, rs3==x10, rd==x5,fs1 == 0 and fe1 == 0x1c and fm1 == 0x26c and fs2 == 0 and fe2 == 0x10 and fm2 == 0x286 and fs3 == 0 and fe3 == 0x1e and fm3 == 0x13d and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x0000 and rs2_sgn_prefix == 0x0000 and rs3_sgn_prefix == 0x0000  
/* opcode: fnmadd.h ; op1:x7; op2:x13; op3:x10; dest:x5; op1val:0x726c; op2val:0x4286;
op3val:0x793d; valaddr_reg:x18; val_offset:18*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.h, x5, x7, x13, x10, dyn, 96, 0, x18, 18*FLEN/8, x20, x2, x10)

inst_18:
// rs1==x19, rs2==x23, rs3==x6, rd==x0,fs1 == 0 and fe1 == 0x1d and fm1 == 0x1c3 and fs2 == 0 and fe2 == 0x10 and fm2 == 0x12d and fs3 == 0 and fe3 == 0x1e and fm3 == 0x375 and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x0000 and rs2_sgn_prefix == 0x0000 and rs3_sgn_prefix == 0x0000  
/* opcode: fnmadd.h ; op1:x19; op2:x23; op3:x6; dest:x0; op1val:0x75c3; op2val:0x412d;
op3val:0x7b75; valaddr_reg:x18; val_offset:21*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.h, x0, x19, x23, x6, dyn, 96, 0, x18, 21*FLEN/8, x20, x2, x10)

inst_19:
// rs1==x12, rs2==x9, rs3==x27, rd==x31,fs1 == 0 and fe1 == 0x1e and fm1 == 0x345 and fs2 == 0 and fe2 == 0x0e and fm2 == 0x086 and fs3 == 0 and fe3 == 0x1e and fm3 == 0x01d and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x0000 and rs2_sgn_prefix == 0x0000 and rs3_sgn_prefix == 0x0000  
/* opcode: fnmadd.h ; op1:x12; op2:x9; op3:x27; dest:x31; op1val:0x7b45; op2val:0x3886;
op3val:0x781d; valaddr_reg:x18; val_offset:24*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.h, x31, x12, x9, x27, dyn, 96, 0, x18, 24*FLEN/8, x20, x2, x10)

inst_20:
// rs1==x29, rs2==x15, rs3==x28, rd==x4,fs1 == 0 and fe1 == 0x1e and fm1 == 0x127 and fs2 == 0 and fe2 == 0x0f and fm2 == 0x054 and fs3 == 0 and fe3 == 0x1e and fm3 == 0x194 and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x0000 and rs2_sgn_prefix == 0x0000 and rs3_sgn_prefix == 0x0000  
/* opcode: fnmadd.h ; op1:x29; op2:x15; op3:x28; dest:x4; op1val:0x7927; op2val:0x3c54;
op3val:0x7994; valaddr_reg:x18; val_offset:27*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.h, x4, x29, x15, x28, dyn, 96, 0, x18, 27*FLEN/8, x20, x2, x10)

inst_21:
// rs1==x17, rs2==x6, rs3==x9, rd==x14,fs1 == 0 and fe1 == 0x1e and fm1 == 0x270 and fs2 == 0 and fe2 == 0x0f and fm2 == 0x0d9 and fs3 == 0 and fe3 == 0x1e and fm3 == 0x3ce and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x0000 and rs2_sgn_prefix == 0x0000 and rs3_sgn_prefix == 0x0000  
/* opcode: fnmadd.h ; op1:x17; op2:x6; op3:x9; dest:x14; op1val:0x7a70; op2val:0x3cd9;
op3val:0x7bce; valaddr_reg:x18; val_offset:30*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.h, x14, x17, x6, x9, dyn, 96, 0, x18, 30*FLEN/8, x20, x2, x10)

inst_22:
// rs1==x31, rs2==x24, rs3==x29, rd==x26,fs1 == 0 and fe1 == 0x19 and fm1 == 0x346 and fs2 == 0 and fe2 == 0x12 and fm2 == 0x25a and fs3 == 0 and fe3 == 0x1d and fm3 == 0x1c7 and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x0000 and rs2_sgn_prefix == 0x0000 and rs3_sgn_prefix == 0x0000  
/* opcode: fnmadd.h ; op1:x31; op2:x24; op3:x29; dest:x26; op1val:0x6746; op2val:0x4a5a;
op3val:0x75c7; valaddr_reg:x18; val_offset:33*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.h, x26, x31, x24, x29, dyn, 96, 0, x18, 33*FLEN/8, x20, x2, x10)
RVTEST_VALBASEUPD(x4,test_dataset_2)

inst_23:
// rs1==x18, rs2==x28, rs3==x15, rd==x7,fs1 == 0 and fe1 == 0x1e and fm1 == 0x0cf and fs2 == 0 and fe2 == 0x0e and fm2 == 0x00b and fs3 == 0 and fe3 == 0x1d and fm3 == 0x0dd and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x0000 and rs2_sgn_prefix == 0x0000 and rs3_sgn_prefix == 0x0000  
/* opcode: fnmadd.h ; op1:x18; op2:x28; op3:x15; dest:x7; op1val:0x78cf; op2val:0x380b;
op3val:0x74dd; valaddr_reg:x4; val_offset:0*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.h, x7, x18, x28, x15, dyn, 96, 0, x4, 0*FLEN/8, x8, x2, x10)

inst_24:
// rs1==x15, rs2==x19, rs3==x0, rd==x28,fs1 == 0 and fe1 == 0x1e and fm1 == 0x0b6 and fs2 == 0 and fe2 == 0x0c and fm2 == 0x0df and fs3 == 0 and fe3 == 0x1b and fm3 == 0x1bc and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x0000 and rs2_sgn_prefix == 0x0000 and rs3_sgn_prefix == 0x0000  
/* opcode: fnmadd.h ; op1:x15; op2:x19; op3:x0; dest:x28; op1val:0x78b6; op2val:0x30df;
op3val:0x0; valaddr_reg:x4; val_offset:3*FLEN/8; rmval:dyn;
testreg:x3; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.h, x28, x15, x19, x0, dyn, 96, 0, x4, 3*FLEN/8, x8, x2, x3)

inst_25:
// rs1==x24, rs2==x31, rs3==x25, rd==x6,fs1 == 0 and fe1 == 0x1e and fm1 == 0x309 and fs2 == 0 and fe2 == 0x0e and fm2 == 0x0c6 and fs3 == 0 and fe3 == 0x1e and fm3 == 0x033 and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x0000 and rs2_sgn_prefix == 0x0000 and rs3_sgn_prefix == 0x0000  
/* opcode: fnmadd.h ; op1:x24; op2:x31; op3:x25; dest:x6; op1val:0x7b09; op2val:0x38c6;
op3val:0x7833; valaddr_reg:x4; val_offset:6*FLEN/8; rmval:dyn;
testreg:x3; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.h, x6, x24, x31, x25, dyn, 96, 0, x4, 6*FLEN/8, x8, x2, x3)

inst_26:
// rs1==x23, rs2==x14, rs3==x22, rd==x30,fs1 == 0 and fe1 == 0x1b and fm1 == 0x379 and fs2 == 0 and fe2 == 0x11 and fm2 == 0x1ac and fs3 == 0 and fe3 == 0x1e and fm3 == 0x14c and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x0000 and rs2_sgn_prefix == 0x0000 and rs3_sgn_prefix == 0x0000  
/* opcode: fnmadd.h ; op1:x23; op2:x14; op3:x22; dest:x30; op1val:0x6f79; op2val:0x45ac;
op3val:0x794c; valaddr_reg:x4; val_offset:9*FLEN/8; rmval:dyn;
testreg:x3; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.h, x30, x23, x14, x22, dyn, 96, 0, x4, 9*FLEN/8, x8, x2, x3)
RVTEST_SIGBASE(x1,signature_x1_0)

inst_27:
// rs1==x10, rs2==x17, rs3==x3, rd==x9,fs1 == 0 and fe1 == 0x1d and fm1 == 0x0fe and fs2 == 0 and fe2 == 0x0e and fm2 == 0x106 and fs3 == 0 and fe3 == 0x1c and fm3 == 0x246 and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x0000 and rs2_sgn_prefix == 0x0000 and rs3_sgn_prefix == 0x0000  
/* opcode: fnmadd.h ; op1:x10; op2:x17; op3:x3; dest:x9; op1val:0x74fe; op2val:0x3906;
op3val:0x7246; valaddr_reg:x4; val_offset:12*FLEN/8; rmval:dyn;
testreg:x3; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.h, x9, x10, x17, x3, dyn, 96, 0, x4, 12*FLEN/8, x8, x1, x3)

inst_28:
// rs1==x26, rs2==x27, rs3==x2, rd==x20,fs1 == 0 and fe1 == 0x1d and fm1 == 0x3bc and fs2 == 0 and fe2 == 0x0d and fm2 == 0x091 and fs3 == 0 and fe3 == 0x1c and fm3 == 0x06a and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x0000 and rs2_sgn_prefix == 0x0000 and rs3_sgn_prefix == 0x0000  
/* opcode: fnmadd.h ; op1:x26; op2:x27; op3:x2; dest:x20; op1val:0x77bc; op2val:0x3491;
op3val:0x706a; valaddr_reg:x4; val_offset:15*FLEN/8; rmval:dyn;
testreg:x3; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.h, x20, x26, x27, x2, dyn, 96, 0, x4, 15*FLEN/8, x8, x1, x3)

inst_29:
// rs1==x20, rs2==x22, rs3==x7, rd==x17,fs1 == 0 and fe1 == 0x1c and fm1 == 0x2b6 and fs2 == 0 and fe2 == 0x11 and fm2 == 0x01f and fs3 == 0 and fe3 == 0x1e and fm3 == 0x2eb and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x0000 and rs2_sgn_prefix == 0x0000 and rs3_sgn_prefix == 0x0000  
/* opcode: fnmadd.h ; op1:x20; op2:x22; op3:x7; dest:x17; op1val:0x72b6; op2val:0x441f;
op3val:0x7aeb; valaddr_reg:x4; val_offset:18*FLEN/8; rmval:dyn;
testreg:x3; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.h, x17, x20, x22, x7, dyn, 96, 0, x4, 18*FLEN/8, x8, x1, x3)

inst_30:
// rs1==x5, rs2==x11, rs3==x31, rd==x25,fs1 == 0 and fe1 == 0x1e and fm1 == 0x195 and fs2 == 0 and fe2 == 0x09 and fm2 == 0x098 and fs3 == 0 and fe3 == 0x18 and fm3 == 0x26a and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x0000 and rs2_sgn_prefix == 0x0000 and rs3_sgn_prefix == 0x0000  
/* opcode: fnmadd.h ; op1:x5; op2:x11; op3:x31; dest:x25; op1val:0x7995; op2val:0x2498;
op3val:0x626a; valaddr_reg:x4; val_offset:21*FLEN/8; rmval:dyn;
testreg:x3; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.h, x25, x5, x11, x31, dyn, 96, 0, x4, 21*FLEN/8, x8, x1, x3)
RVTEST_VALBASEUPD(x2,test_dataset_3)

inst_31:
// rs1==x27, rs2==x0, rs3==x20, rd==x10,fs1 == 0 and fe1 == 0x1e and fm1 == 0x238 and fs2 == 0 and fe2 == 0x09 and fm2 == 0x19e and fs3 == 0 and fe3 == 0x19 and fm3 == 0x05e and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x0000 and rs2_sgn_prefix == 0x0000 and rs3_sgn_prefix == 0x0000  
/* opcode: fnmadd.h ; op1:x27; op2:x0; op3:x20; dest:x10; op1val:0x7a38; op2val:0x0;
op3val:0x645e; valaddr_reg:x2; val_offset:0*FLEN/8; rmval:dyn;
testreg:x3; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.h, x10, x27, x0, x20, dyn, 96, 0, x2, 0*FLEN/8, x4, x1, x3)

inst_32:
// fs1 == 0 and fe1 == 0x1d and fm1 == 0x152 and fs2 == 0 and fe2 == 0x10 and fm2 == 0x16e and fs3 == 0 and fe3 == 0x1e and fm3 == 0x33b and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x0000 and rs2_sgn_prefix == 0x0000 and rs3_sgn_prefix == 0x0000  
/* opcode: fnmadd.h ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7552; op2val:0x416e;
op3val:0x7b3b; valaddr_reg:x2; val_offset:3*FLEN/8; rmval:dyn;
testreg:x3; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.h, x31, x30, x29, x28, dyn, 96, 0, x2, 3*FLEN/8, x4, x1, x3)

inst_33:
// fs1 == 0 and fe1 == 0x1e and fm1 == 0x0f5 and fs2 == 0 and fe2 == 0x0d and fm2 == 0x3e5 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x0e5 and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x0000 and rs2_sgn_prefix == 0x0000 and rs3_sgn_prefix == 0x0000  
/* opcode: fnmadd.h ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x78f5; op2val:0x37e5;
op3val:0x74e5; valaddr_reg:x2; val_offset:6*FLEN/8; rmval:dyn;
testreg:x3; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.h, x31, x30, x29, x28, dyn, 96, 0, x2, 6*FLEN/8, x4, x1, x3)

inst_34:
// fs1 == 0 and fe1 == 0x1d and fm1 == 0x209 and fs2 == 0 and fe2 == 0x0f and fm2 == 0x01f and fs3 == 0 and fe3 == 0x1d and fm3 == 0x239 and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x0000 and rs2_sgn_prefix == 0x0000 and rs3_sgn_prefix == 0x0000  
/* opcode: fnmadd.h ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7609; op2val:0x3c1f;
op3val:0x7639; valaddr_reg:x2; val_offset:9*FLEN/8; rmval:dyn;
testreg:x3; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.h, x31, x30, x29, x28, dyn, 96, 0, x2, 9*FLEN/8, x4, x1, x3)

inst_35:
// fs1 == 0 and fe1 == 0x1c and fm1 == 0x00e and fs2 == 0 and fe2 == 0x11 and fm2 == 0x3e1 and fs3 == 0 and fe3 == 0x1e and fm3 == 0x3fe and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x0000 and rs2_sgn_prefix == 0x0000 and rs3_sgn_prefix == 0x0000  
/* opcode: fnmadd.h ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x700e; op2val:0x47e1;
op3val:0x7bfe; valaddr_reg:x2; val_offset:12*FLEN/8; rmval:dyn;
testreg:x3; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.h, x31, x30, x29, x28, dyn, 96, 0, x2, 12*FLEN/8, x4, x1, x3)

inst_36:
// fs1 == 0 and fe1 == 0x1a and fm1 == 0x2e3 and fs2 == 0 and fe2 == 0x11 and fm2 == 0x3da and fs3 == 0 and fe3 == 0x1d and fm3 == 0x2c3 and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x0000 and rs2_sgn_prefix == 0x0000 and rs3_sgn_prefix == 0x0000  
/* opcode: fnmadd.h ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x6ae3; op2val:0x47da;
op3val:0x76c3; valaddr_reg:x2; val_offset:15*FLEN/8; rmval:dyn;
testreg:x3; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.h, x31, x30, x29, x28, dyn, 96, 0, x2, 15*FLEN/8, x4, x1, x3)

inst_37:
// fs1 == 0 and fe1 == 0x1e and fm1 == 0x1f7 and fs2 == 0 and fe2 == 0x0e and fm2 == 0x043 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x25c and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x0000 and rs2_sgn_prefix == 0x0000 and rs3_sgn_prefix == 0x0000  
/* opcode: fnmadd.h ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x79f7; op2val:0x3843;
op3val:0x765c; valaddr_reg:x2; val_offset:18*FLEN/8; rmval:dyn;
testreg:x3; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.h, x31, x30, x29, x28, dyn, 96, 0, x2, 18*FLEN/8, x4, x1, x3)

inst_38:
// fs1 == 0 and fe1 == 0x1e and fm1 == 0x3d8 and fs2 == 0 and fe2 == 0x0d and fm2 == 0x000 and fs3 == 0 and fe3 == 0x1c and fm3 == 0x3d8 and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x0000 and rs2_sgn_prefix == 0x0000 and rs3_sgn_prefix == 0x0000  
/* opcode: fnmadd.h ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7bd8; op2val:0x3400;
op3val:0x73d8; valaddr_reg:x2; val_offset:21*FLEN/8; rmval:dyn;
testreg:x3; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.h, x31, x30, x29, x28, dyn, 96, 0, x2, 21*FLEN/8, x4, x1, x3)

inst_39:
// fs1 == 0 and fe1 == 0x1e and fm1 == 0x3d4 and fs2 == 0 and fe2 == 0x0e and fm2 == 0x34a and fs3 == 0 and fe3 == 0x1e and fm3 == 0x322 and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x0000 and rs2_sgn_prefix == 0x0000 and rs3_sgn_prefix == 0x0000  
/* opcode: fnmadd.h ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7bd4; op2val:0x3b4a;
op3val:0x7b22; valaddr_reg:x2; val_offset:24*FLEN/8; rmval:dyn;
testreg:x3; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.h, x31, x30, x29, x28, dyn, 96, 0, x2, 24*FLEN/8, x4, x1, x3)

inst_40:
// fs1 == 0 and fe1 == 0x1e and fm1 == 0x15b and fs2 == 0 and fe2 == 0x0f and fm2 == 0x14f and fs3 == 0 and fe3 == 0x1e and fm3 == 0x31c and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x0000 and rs2_sgn_prefix == 0x0000 and rs3_sgn_prefix == 0x0000  
/* opcode: fnmadd.h ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x795b; op2val:0x3d4f;
op3val:0x7b1c; valaddr_reg:x2; val_offset:27*FLEN/8; rmval:dyn;
testreg:x3; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.h, x31, x30, x29, x28, dyn, 96, 0, x2, 27*FLEN/8, x4, x1, x3)

inst_41:
// fs1 == 0 and fe1 == 0x1d and fm1 == 0x326 and fs2 == 0 and fe2 == 0x0f and fm2 == 0x36f and fs3 == 0 and fe3 == 0x1e and fm3 == 0x2a5 and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x0000 and rs2_sgn_prefix == 0x0000 and rs3_sgn_prefix == 0x0000  
/* opcode: fnmadd.h ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7726; op2val:0x3f6f;
op3val:0x7aa5; valaddr_reg:x2; val_offset:30*FLEN/8; rmval:dyn;
testreg:x3; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.h, x31, x30, x29, x28, dyn, 96, 0, x2, 30*FLEN/8, x4, x1, x3)

inst_42:
// fs1 == 0 and fe1 == 0x1e and fm1 == 0x25d and fs2 == 0 and fe2 == 0x0e and fm2 == 0x12e and fs3 == 0 and fe3 == 0x1e and fm3 == 0x021 and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x0000 and rs2_sgn_prefix == 0x0000 and rs3_sgn_prefix == 0x0000  
/* opcode: fnmadd.h ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7a5d; op2val:0x392e;
op3val:0x7821; valaddr_reg:x2; val_offset:33*FLEN/8; rmval:dyn;
testreg:x3; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.h, x31, x30, x29, x28, dyn, 96, 0, x2, 33*FLEN/8, x4, x1, x3)

inst_43:
// fs1 == 0 and fe1 == 0x1d and fm1 == 0x388 and fs2 == 0 and fe2 == 0x0f and fm2 == 0x1fc and fs3 == 0 and fe3 == 0x1e and fm3 == 0x1a4 and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x0000 and rs2_sgn_prefix == 0x0000 and rs3_sgn_prefix == 0x0000  
/* opcode: fnmadd.h ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7788; op2val:0x3dfc;
op3val:0x79a4; valaddr_reg:x2; val_offset:36*FLEN/8; rmval:dyn;
testreg:x3; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.h, x31, x30, x29, x28, dyn, 96, 0, x2, 36*FLEN/8, x4, x1, x3)

inst_44:
// fs1 == 0 and fe1 == 0x1d and fm1 == 0x28a and fs2 == 0 and fe2 == 0x0c and fm2 == 0x2a5 and fs3 == 0 and fe3 == 0x1b and fm3 == 0x17f and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x0000 and rs2_sgn_prefix == 0x0000 and rs3_sgn_prefix == 0x0000  
/* opcode: fnmadd.h ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x768a; op2val:0x32a5;
op3val:0x6d7f; valaddr_reg:x2; val_offset:39*FLEN/8; rmval:dyn;
testreg:x3; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.h, x31, x30, x29, x28, dyn, 96, 0, x2, 39*FLEN/8, x4, x1, x3)

inst_45:
// fs1 == 0 and fe1 == 0x1e and fm1 == 0x1f8 and fs2 == 0 and fe2 == 0x0d and fm2 == 0x1ad and fs3 == 0 and fe3 == 0x1d and fm3 == 0x040 and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x0000 and rs2_sgn_prefix == 0x0000 and rs3_sgn_prefix == 0x0000  
/* opcode: fnmadd.h ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x79f8; op2val:0x35ad;
op3val:0x7440; valaddr_reg:x2; val_offset:42*FLEN/8; rmval:dyn;
testreg:x3; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.h, x31, x30, x29, x28, dyn, 96, 0, x2, 42*FLEN/8, x4, x1, x3)

inst_46:
// fs1 == 0 and fe1 == 0x1d and fm1 == 0x3cc and fs2 == 0 and fe2 == 0x0f and fm2 == 0x26c and fs3 == 0 and fe3 == 0x1e and fm3 == 0x244 and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x0000 and rs2_sgn_prefix == 0x0000 and rs3_sgn_prefix == 0x0000  
/* opcode: fnmadd.h ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x77cc; op2val:0x3e6c;
op3val:0x7a44; valaddr_reg:x2; val_offset:45*FLEN/8; rmval:dyn;
testreg:x3; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.h, x31, x30, x29, x28, dyn, 96, 0, x2, 45*FLEN/8, x4, x1, x3)

inst_47:
// fs1 == 0 and fe1 == 0x1c and fm1 == 0x181 and fs2 == 0 and fe2 == 0x0b and fm2 == 0x3c6 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x199 and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x0000 and rs2_sgn_prefix == 0x0000 and rs3_sgn_prefix == 0x0000  
/* opcode: fnmadd.h ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7181; op2val:0x2fc6;
op3val:0x6599; valaddr_reg:x2; val_offset:48*FLEN/8; rmval:dyn;
testreg:x3; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.h, x31, x30, x29, x28, dyn, 96, 0, x2, 48*FLEN/8, x4, x1, x3)

inst_48:
// fs1 == 0 and fe1 == 0x1b and fm1 == 0x3e6 and fs2 == 0 and fe2 == 0x11 and fm2 == 0x0c3 and fs3 == 0 and fe3 == 0x1e and fm3 == 0x0b6 and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x0000 and rs2_sgn_prefix == 0x0000 and rs3_sgn_prefix == 0x0000  
/* opcode: fnmadd.h ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x6fe6; op2val:0x44c3;
op3val:0x78b6; valaddr_reg:x2; val_offset:51*FLEN/8; rmval:dyn;
testreg:x3; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.h, x31, x30, x29, x28, dyn, 96, 0, x2, 51*FLEN/8, x4, x1, x3)

inst_49:
// fs1 == 0 and fe1 == 0x1d and fm1 == 0x1c6 and fs2 == 0 and fe2 == 0x0e and fm2 == 0x1ad and fs3 == 0 and fe3 == 0x1d and fm3 == 0x019 and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x0000 and rs2_sgn_prefix == 0x0000 and rs3_sgn_prefix == 0x0000  
/* opcode: fnmadd.h ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x75c6; op2val:0x39ad;
op3val:0x7419; valaddr_reg:x2; val_offset:54*FLEN/8; rmval:dyn;
testreg:x3; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.h, x31, x30, x29, x28, dyn, 96, 0, x2, 54*FLEN/8, x4, x1, x3)

inst_50:
// fs1 == 0 and fe1 == 0x1d and fm1 == 0x338 and fs2 == 0 and fe2 == 0x10 and fm2 == 0x01b and fs3 == 0 and fe3 == 0x1e and fm3 == 0x36a and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x0000 and rs2_sgn_prefix == 0x0000 and rs3_sgn_prefix == 0x0000  
/* opcode: fnmadd.h ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7738; op2val:0x401b;
op3val:0x7b6a; valaddr_reg:x2; val_offset:57*FLEN/8; rmval:dyn;
testreg:x3; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.h, x31, x30, x29, x28, dyn, 96, 0, x2, 57*FLEN/8, x4, x1, x3)

inst_51:
// fs1 == 0 and fe1 == 0x1d and fm1 == 0x013 and fs2 == 0 and fe2 == 0x0f and fm2 == 0x272 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x290 and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x0000 and rs2_sgn_prefix == 0x0000 and rs3_sgn_prefix == 0x0000  
/* opcode: fnmadd.h ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7413; op2val:0x3e72;
op3val:0x7690; valaddr_reg:x2; val_offset:60*FLEN/8; rmval:dyn;
testreg:x3; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.h, x31, x30, x29, x28, dyn, 96, 0, x2, 60*FLEN/8, x4, x1, x3)

inst_52:
// fs1 == 0 and fe1 == 0x1e and fm1 == 0x307 and fs2 == 0 and fe2 == 0x0e and fm2 == 0x191 and fs3 == 0 and fe3 == 0x1e and fm3 == 0x0e5 and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x0000 and rs2_sgn_prefix == 0x0000 and rs3_sgn_prefix == 0x0000  
/* opcode: fnmadd.h ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7b07; op2val:0x3991;
op3val:0x78e5; valaddr_reg:x2; val_offset:63*FLEN/8; rmval:dyn;
testreg:x3; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.h, x31, x30, x29, x28, dyn, 96, 0, x2, 63*FLEN/8, x4, x1, x3)

inst_53:
// fs1 == 0 and fe1 == 0x1d and fm1 == 0x048 and fs2 == 0 and fe2 == 0x0f and fm2 == 0x316 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x397 and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x0000 and rs2_sgn_prefix == 0x0000 and rs3_sgn_prefix == 0x0000  
/* opcode: fnmadd.h ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7448; op2val:0x3f16;
op3val:0x7797; valaddr_reg:x2; val_offset:66*FLEN/8; rmval:dyn;
testreg:x3; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.h, x31, x30, x29, x28, dyn, 96, 0, x2, 66*FLEN/8, x4, x1, x3)

inst_54:
// fs1 == 0 and fe1 == 0x1d and fm1 == 0x3a7 and fs2 == 0 and fe2 == 0x0d and fm2 == 0x0c1 and fs3 == 0 and fe3 == 0x1c and fm3 == 0x08c and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x0000 and rs2_sgn_prefix == 0x0000 and rs3_sgn_prefix == 0x0000  
/* opcode: fnmadd.h ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x77a7; op2val:0x34c1;
op3val:0x708c; valaddr_reg:x2; val_offset:69*FLEN/8; rmval:dyn;
testreg:x3; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.h, x31, x30, x29, x28, dyn, 96, 0, x2, 69*FLEN/8, x4, x1, x3)

inst_55:
// fs1 == 0 and fe1 == 0x1d and fm1 == 0x209 and fs2 == 0 and fe2 == 0x0e and fm2 == 0x27a and fs3 == 0 and fe3 == 0x1d and fm3 == 0x0e3 and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x0000 and rs2_sgn_prefix == 0x0000 and rs3_sgn_prefix == 0x0000  
/* opcode: fnmadd.h ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7609; op2val:0x3a7a;
op3val:0x74e3; valaddr_reg:x2; val_offset:72*FLEN/8; rmval:dyn;
testreg:x3; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.h, x31, x30, x29, x28, dyn, 96, 0, x2, 72*FLEN/8, x4, x1, x3)

inst_56:
// fs1 == 0 and fe1 == 0x1e and fm1 == 0x257 and fs2 == 0 and fe2 == 0x0f and fm2 == 0x024 and fs3 == 0 and fe3 == 0x1e and fm3 == 0x292 and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x0000 and rs2_sgn_prefix == 0x0000 and rs3_sgn_prefix == 0x0000  
/* opcode: fnmadd.h ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7a57; op2val:0x3c24;
op3val:0x7a92; valaddr_reg:x2; val_offset:75*FLEN/8; rmval:dyn;
testreg:x3; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.h, x31, x30, x29, x28, dyn, 96, 0, x2, 75*FLEN/8, x4, x1, x3)

inst_57:
// fs1 == 0 and fe1 == 0x1d and fm1 == 0x3c1 and fs2 == 0 and fe2 == 0x0e and fm2 == 0x050 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x02f and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x0000 and rs2_sgn_prefix == 0x0000 and rs3_sgn_prefix == 0x0000  
/* opcode: fnmadd.h ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x77c1; op2val:0x3850;
op3val:0x742f; valaddr_reg:x2; val_offset:78*FLEN/8; rmval:dyn;
testreg:x3; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.h, x31, x30, x29, x28, dyn, 96, 0, x2, 78*FLEN/8, x4, x1, x3)

inst_58:
// fs1 == 0 and fe1 == 0x1d and fm1 == 0x385 and fs2 == 0 and fe2 == 0x0f and fm2 == 0x276 and fs3 == 0 and fe3 == 0x1e and fm3 == 0x213 and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x0000 and rs2_sgn_prefix == 0x0000 and rs3_sgn_prefix == 0x0000  
/* opcode: fnmadd.h ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7785; op2val:0x3e76;
op3val:0x7a13; valaddr_reg:x2; val_offset:81*FLEN/8; rmval:dyn;
testreg:x3; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.h, x31, x30, x29, x28, dyn, 96, 0, x2, 81*FLEN/8, x4, x1, x3)

inst_59:
// fs1 == 0 and fe1 == 0x1d and fm1 == 0x1f7 and fs2 == 0 and fe2 == 0x10 and fm2 == 0x020 and fs3 == 0 and fe3 == 0x1e and fm3 == 0x228 and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x0000 and rs2_sgn_prefix == 0x0000 and rs3_sgn_prefix == 0x0000  
/* opcode: fnmadd.h ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x75f7; op2val:0x4020;
op3val:0x7a28; valaddr_reg:x2; val_offset:84*FLEN/8; rmval:dyn;
testreg:x3; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.h, x31, x30, x29, x28, dyn, 96, 0, x2, 84*FLEN/8, x4, x1, x3)

inst_60:
// fs1 == 0 and fe1 == 0x1d and fm1 == 0x05c and fs2 == 0 and fe2 == 0x10 and fm2 == 0x1e1 and fs3 == 0 and fe3 == 0x1e and fm3 == 0x269 and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x0000 and rs2_sgn_prefix == 0x0000 and rs3_sgn_prefix == 0x0000  
/* opcode: fnmadd.h ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x745c; op2val:0x41e1;
op3val:0x7a69; valaddr_reg:x2; val_offset:87*FLEN/8; rmval:dyn;
testreg:x3; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.h, x31, x30, x29, x28, dyn, 96, 0, x2, 87*FLEN/8, x4, x1, x3)

inst_61:
// fs1 == 0 and fe1 == 0x1e and fm1 == 0x1d5 and fs2 == 0 and fe2 == 0x0e and fm2 == 0x089 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x29e and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x0000 and rs2_sgn_prefix == 0x0000 and rs3_sgn_prefix == 0x0000  
/* opcode: fnmadd.h ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x79d5; op2val:0x3889;
op3val:0x769e; valaddr_reg:x2; val_offset:90*FLEN/8; rmval:dyn;
testreg:x3; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.h, x31, x30, x29, x28, dyn, 96, 0, x2, 90*FLEN/8, x4, x1, x3)

inst_62:
// fs1 == 0 and fe1 == 0x1e and fm1 == 0x04d and fs2 == 0 and fe2 == 0x0f and fm2 == 0x111 and fs3 == 0 and fe3 == 0x1e and fm3 == 0x174 and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x0000 and rs2_sgn_prefix == 0x0000 and rs3_sgn_prefix == 0x0000  
/* opcode: fnmadd.h ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x784d; op2val:0x3d11;
op3val:0x7974; valaddr_reg:x2; val_offset:93*FLEN/8; rmval:dyn;
testreg:x3; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.h, x31, x30, x29, x28, dyn, 96, 0, x2, 93*FLEN/8, x4, x1, x3)

inst_63:
// fs1 == 0 and fe1 == 0x1e and fm1 == 0x270 and fs2 == 0 and fe2 == 0x0d and fm2 == 0x146 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x03f and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x0000 and rs2_sgn_prefix == 0x0000 and rs3_sgn_prefix == 0x0000  
/* opcode: fnmadd.h ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7a70; op2val:0x3546;
op3val:0x743f; valaddr_reg:x2; val_offset:96*FLEN/8; rmval:dyn;
testreg:x3; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.h, x31, x30, x29, x28, dyn, 96, 0, x2, 96*FLEN/8, x4, x1, x3)

inst_64:
// fs1 == 0 and fe1 == 0x1e and fm1 == 0x2c0 and fs2 == 0 and fe2 == 0x0d and fm2 == 0x25c and fs3 == 0 and fe3 == 0x1d and fm3 == 0x15d and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x0000 and rs2_sgn_prefix == 0x0000 and rs3_sgn_prefix == 0x0000  
/* opcode: fnmadd.h ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7ac0; op2val:0x365c;
op3val:0x755d; valaddr_reg:x2; val_offset:99*FLEN/8; rmval:dyn;
testreg:x3; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.h, x31, x30, x29, x28, dyn, 96, 0, x2, 99*FLEN/8, x4, x1, x3)

inst_65:
// fs1 == 0 and fe1 == 0x1d and fm1 == 0x1c3 and fs2 == 0 and fe2 == 0x10 and fm2 == 0x12d and fs3 == 0 and fe3 == 0x1e and fm3 == 0x375 and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x0000 and rs2_sgn_prefix == 0x0000 and rs3_sgn_prefix == 0x0000  
/* opcode: fnmadd.h ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x75c3; op2val:0x412d;
op3val:0x7b75; valaddr_reg:x2; val_offset:102*FLEN/8; rmval:dyn;
testreg:x3; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.h, x31, x30, x29, x28, dyn, 96, 0, x2, 102*FLEN/8, x4, x1, x3)

inst_66:
// fs1 == 0 and fe1 == 0x1e and fm1 == 0x0b6 and fs2 == 0 and fe2 == 0x0c and fm2 == 0x0df and fs3 == 0 and fe3 == 0x1b and fm3 == 0x1bc and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x0000 and rs2_sgn_prefix == 0x0000 and rs3_sgn_prefix == 0x0000  
/* opcode: fnmadd.h ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x78b6; op2val:0x30df;
op3val:0x6dbc; valaddr_reg:x2; val_offset:105*FLEN/8; rmval:dyn;
testreg:x3; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.h, x31, x30, x29, x28, dyn, 96, 0, x2, 105*FLEN/8, x4, x1, x3)

inst_67:
// fs1 == 0 and fe1 == 0x1e and fm1 == 0x238 and fs2 == 0 and fe2 == 0x09 and fm2 == 0x19e and fs3 == 0 and fe3 == 0x19 and fm3 == 0x05e and  fcsr == 0x60 and rm_val == 7  and rs1_sgn_prefix == 0x0000 and rs2_sgn_prefix == 0x0000 and rs3_sgn_prefix == 0x0000  
/* opcode: fnmadd.h ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7a38; op2val:0x259e;
op3val:0x645e; valaddr_reg:x2; val_offset:108*FLEN/8; rmval:dyn;
testreg:x3; fcsr_val:96 */
TEST_FPR4_OP(fnmadd.h, x31, x30, x29, x28, dyn, 96, 0, x2, 108*FLEN/8, x4, x1, x3)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(31319,32,FLEN)
NAN_BOXED(15396,32,FLEN)
NAN_BOXED(31319,32,FLEN)
NAN_BOXED(30657,32,FLEN)
NAN_BOXED(14416,32,FLEN)
NAN_BOXED(14416,32,FLEN)
NAN_BOXED(20389,32,FLEN)
NAN_BOXED(25995,32,FLEN)
NAN_BOXED(31052,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(15990,32,FLEN)
NAN_BOXED(31251,32,FLEN)
NAN_BOXED(30199,32,FLEN)
NAN_BOXED(16416,32,FLEN)
NAN_BOXED(30199,32,FLEN)
NAN_BOXED(29788,32,FLEN)
NAN_BOXED(29788,32,FLEN)
NAN_BOXED(29788,32,FLEN)
NAN_BOXED(31189,32,FLEN)
NAN_BOXED(31189,32,FLEN)
NAN_BOXED(30366,32,FLEN)
NAN_BOXED(30797,32,FLEN)
NAN_BOXED(15633,32,FLEN)
NAN_BOXED(15633,32,FLEN)
NAN_BOXED(29228,32,FLEN)
NAN_BOXED(16828,32,FLEN)
NAN_BOXED(30829,32,FLEN)
NAN_BOXED(31344,32,FLEN)
NAN_BOXED(31344,32,FLEN)
NAN_BOXED(31344,32,FLEN)
NAN_BOXED(31340,32,FLEN)
NAN_BOXED(15060,32,FLEN)
NAN_BOXED(31099,32,FLEN)
test_dataset_1:
NAN_BOXED(31424,32,FLEN)
NAN_BOXED(31424,32,FLEN)
NAN_BOXED(30045,32,FLEN)
NAN_BOXED(28149,32,FLEN)
NAN_BOXED(18507,32,FLEN)
NAN_BOXED(31334,32,FLEN)
NAN_BOXED(31343,32,FLEN)
NAN_BOXED(14444,32,FLEN)
NAN_BOXED(30494,32,FLEN)
NAN_BOXED(28159,32,FLEN)
NAN_BOXED(16436,32,FLEN)
NAN_BOXED(29262,32,FLEN)
NAN_BOXED(30995,32,FLEN)
NAN_BOXED(14166,32,FLEN)
NAN_BOXED(29864,32,FLEN)
NAN_BOXED(31643,32,FLEN)
NAN_BOXED(14579,32,FLEN)
NAN_BOXED(30900,32,FLEN)
NAN_BOXED(29292,32,FLEN)
NAN_BOXED(17030,32,FLEN)
NAN_BOXED(31037,32,FLEN)
NAN_BOXED(30147,32,FLEN)
NAN_BOXED(16685,32,FLEN)
NAN_BOXED(31605,32,FLEN)
NAN_BOXED(31557,32,FLEN)
NAN_BOXED(14470,32,FLEN)
NAN_BOXED(30749,32,FLEN)
NAN_BOXED(31015,32,FLEN)
NAN_BOXED(15444,32,FLEN)
NAN_BOXED(31124,32,FLEN)
NAN_BOXED(31344,32,FLEN)
NAN_BOXED(15577,32,FLEN)
NAN_BOXED(31694,32,FLEN)
NAN_BOXED(26438,32,FLEN)
NAN_BOXED(19034,32,FLEN)
NAN_BOXED(30151,32,FLEN)
test_dataset_2:
NAN_BOXED(30927,32,FLEN)
NAN_BOXED(14347,32,FLEN)
NAN_BOXED(29917,32,FLEN)
NAN_BOXED(30902,32,FLEN)
NAN_BOXED(12511,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(31497,32,FLEN)
NAN_BOXED(14534,32,FLEN)
NAN_BOXED(30771,32,FLEN)
NAN_BOXED(28537,32,FLEN)
NAN_BOXED(17836,32,FLEN)
NAN_BOXED(31052,32,FLEN)
NAN_BOXED(29950,32,FLEN)
NAN_BOXED(14598,32,FLEN)
NAN_BOXED(29254,32,FLEN)
NAN_BOXED(30652,32,FLEN)
NAN_BOXED(13457,32,FLEN)
NAN_BOXED(28778,32,FLEN)
NAN_BOXED(29366,32,FLEN)
NAN_BOXED(17439,32,FLEN)
NAN_BOXED(31467,32,FLEN)
NAN_BOXED(31125,32,FLEN)
NAN_BOXED(9368,32,FLEN)
NAN_BOXED(25194,32,FLEN)
test_dataset_3:
NAN_BOXED(31288,16,FLEN)
NAN_BOXED(0,16,FLEN)
NAN_BOXED(25694,16,FLEN)
NAN_BOXED(30034,16,FLEN)
NAN_BOXED(16750,16,FLEN)
NAN_BOXED(31547,16,FLEN)
NAN_BOXED(30965,16,FLEN)
NAN_BOXED(14309,16,FLEN)
NAN_BOXED(29925,16,FLEN)
NAN_BOXED(30217,16,FLEN)
NAN_BOXED(15391,16,FLEN)
NAN_BOXED(30265,16,FLEN)
NAN_BOXED(28686,16,FLEN)
NAN_BOXED(18401,16,FLEN)
NAN_BOXED(31742,16,FLEN)
NAN_BOXED(27363,16,FLEN)
NAN_BOXED(18394,16,FLEN)
NAN_BOXED(30403,16,FLEN)
NAN_BOXED(31223,16,FLEN)
NAN_BOXED(14403,16,FLEN)
NAN_BOXED(30300,16,FLEN)
NAN_BOXED(31704,16,FLEN)
NAN_BOXED(13312,16,FLEN)
NAN_BOXED(29656,16,FLEN)
NAN_BOXED(31700,16,FLEN)
NAN_BOXED(15178,16,FLEN)
NAN_BOXED(31522,16,FLEN)
NAN_BOXED(31067,16,FLEN)
NAN_BOXED(15695,16,FLEN)
NAN_BOXED(31516,16,FLEN)
NAN_BOXED(30502,16,FLEN)
NAN_BOXED(16239,16,FLEN)
NAN_BOXED(31397,16,FLEN)
NAN_BOXED(31325,16,FLEN)
NAN_BOXED(14638,16,FLEN)
NAN_BOXED(30753,16,FLEN)
NAN_BOXED(30600,16,FLEN)
NAN_BOXED(15868,16,FLEN)
NAN_BOXED(31140,16,FLEN)
NAN_BOXED(30346,16,FLEN)
NAN_BOXED(12965,16,FLEN)
NAN_BOXED(28031,16,FLEN)
NAN_BOXED(31224,16,FLEN)
NAN_BOXED(13741,16,FLEN)
NAN_BOXED(29760,16,FLEN)
NAN_BOXED(30668,16,FLEN)
NAN_BOXED(15980,16,FLEN)
NAN_BOXED(31300,16,FLEN)
NAN_BOXED(29057,16,FLEN)
NAN_BOXED(12230,16,FLEN)
NAN_BOXED(26009,16,FLEN)
NAN_BOXED(28646,16,FLEN)
NAN_BOXED(17603,16,FLEN)
NAN_BOXED(30902,16,FLEN)
NAN_BOXED(30150,16,FLEN)
NAN_BOXED(14765,16,FLEN)
NAN_BOXED(29721,16,FLEN)
NAN_BOXED(30520,16,FLEN)
NAN_BOXED(16411,16,FLEN)
NAN_BOXED(31594,16,FLEN)
NAN_BOXED(29715,16,FLEN)
NAN_BOXED(15986,16,FLEN)
NAN_BOXED(30352,16,FLEN)
NAN_BOXED(31495,16,FLEN)
NAN_BOXED(14737,16,FLEN)
NAN_BOXED(30949,16,FLEN)
NAN_BOXED(29768,16,FLEN)
NAN_BOXED(16150,16,FLEN)
NAN_BOXED(30615,16,FLEN)
NAN_BOXED(30631,16,FLEN)
NAN_BOXED(13505,16,FLEN)
NAN_BOXED(28812,16,FLEN)
NAN_BOXED(30217,16,FLEN)
NAN_BOXED(14970,16,FLEN)
NAN_BOXED(29923,16,FLEN)
NAN_BOXED(31319,16,FLEN)
NAN_BOXED(15396,16,FLEN)
NAN_BOXED(31378,16,FLEN)
NAN_BOXED(30657,16,FLEN)
NAN_BOXED(14416,16,FLEN)
NAN_BOXED(29743,16,FLEN)
NAN_BOXED(30597,16,FLEN)
NAN_BOXED(15990,16,FLEN)
NAN_BOXED(31251,16,FLEN)
NAN_BOXED(30199,16,FLEN)
NAN_BOXED(16416,16,FLEN)
NAN_BOXED(31272,16,FLEN)
NAN_BOXED(29788,16,FLEN)
NAN_BOXED(16865,16,FLEN)
NAN_BOXED(31337,16,FLEN)
NAN_BOXED(31189,16,FLEN)
NAN_BOXED(14473,16,FLEN)
NAN_BOXED(30366,16,FLEN)
NAN_BOXED(30797,16,FLEN)
NAN_BOXED(15633,16,FLEN)
NAN_BOXED(31092,16,FLEN)
NAN_BOXED(31344,16,FLEN)
NAN_BOXED(13638,16,FLEN)
NAN_BOXED(29759,16,FLEN)
NAN_BOXED(31424,16,FLEN)
NAN_BOXED(13916,16,FLEN)
NAN_BOXED(30045,16,FLEN)
NAN_BOXED(30147,16,FLEN)
NAN_BOXED(16685,16,FLEN)
NAN_BOXED(31605,16,FLEN)
NAN_BOXED(30902,16,FLEN)
NAN_BOXED(12511,16,FLEN)
NAN_BOXED(28092,16,FLEN)
NAN_BOXED(31288,16,FLEN)
NAN_BOXED(9630,16,FLEN)
NAN_BOXED(25694,16,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;



signature_x8_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x8_1:
    .fill 26*((SIGALIGN)/4),4,0xdeadbeef


signature_x2_0:
    .fill 28*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_0:
    .fill 82*((SIGALIGN)/4),4,0xdeadbeef

#ifdef rvtest_mtrap_routine
tsig_begin_canary:
CANARY;

mtrap_sigptr:
    .fill 64*XLEN/32,4,0xdeadbeef

tsig_end_canary:
CANARY;
#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif


sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
