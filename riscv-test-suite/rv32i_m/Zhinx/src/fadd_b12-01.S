
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.12.2
// timestamp : Wed Sep 25 05:45:15 2024 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /home/riscv/testing/riscv-ctg/sample_cgfs/dataset.cgf \
//                  --cgf /home/riscv/testing/riscv-ctg/sample_cgfs/sample_cgfs_fext/RV32Zhinx/rv32h_fadd.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fadd.h instruction of the RISC-V RV32_Zfinx_Zhinx,RV64_Zfinx_Zhinx extension for the fadd_b12 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32I_Zfinx_Zhinx,RV64I_Zfinx_Zhinx")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*Zfinx.*Zhinx.*);def TEST_CASE_1=True;",fadd_b12)

RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x5,test_dataset_0)
RVTEST_SIGBASE(x3,signature_x3_1)

inst_0:
// rs1 == rs2 != rd, rs1==x17, rs2==x17, rd==x22,fs1 == 1 and fe1 == 0x1e and fm1 == 0x2c0 and fs2 == 0 and fe2 == 0x1e and fm2 == 0x3ff and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0xffff and rs2_sgn_prefix == 0x0000  
/* opcode: fadd.h ; op1:x17; op2:x17; dest:x22; op1val:0xfac0; op2val:0xfac0; 
   valaddr_reg:x5; val_offset:0*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:??; testreg:x2 
*/
TEST_FPRR_OP(fadd.h, x22, x17, x17, dyn, 0, 0, x5, 0*FLEN/8, x6, x3, x2)

inst_1:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x16, rs2==x29, rd==x27,fs1 == 1 and fe1 == 0x1d and fm1 == 0x2b9 and fs2 == 0 and fe2 == 0x1e and fm2 == 0x16e and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0xffff and rs2_sgn_prefix == 0x0000  
/* opcode: fadd.h ; op1:x16; op2:x29; dest:x27; op1val:0xf6b9; op2val:0x796e; 
   valaddr_reg:x5; val_offset:2*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:??; testreg:x2 
*/
TEST_FPRR_OP(fadd.h, x27, x16, x29, dyn, 0, 0, x5, 2*FLEN/8, x6, x3, x2)

inst_2:
// rs1 == rs2 == rd, rs1==x24, rs2==x24, rd==x24,fs1 == 1 and fe1 == 0x1e and fm1 == 0x016 and fs2 == 0 and fe2 == 0x1e and fm2 == 0x353 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0xffff and rs2_sgn_prefix == 0x0000  
/* opcode: fadd.h ; op1:x24; op2:x24; dest:x24; op1val:0xf816; op2val:0xf816; 
   valaddr_reg:x5; val_offset:4*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:??; testreg:x2 
*/
TEST_FPRR_OP(fadd.h, x24, x24, x24, dyn, 0, 0, x5, 4*FLEN/8, x6, x3, x2)

inst_3:
// rs2 == rd != rs1, rs1==x14, rs2==x9, rd==x9,fs1 == 1 and fe1 == 0x1e and fm1 == 0x244 and fs2 == 0 and fe2 == 0x1e and fm2 == 0x3ff and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0xffff and rs2_sgn_prefix == 0x0000  
/* opcode: fadd.h ; op1:x14; op2:x9; dest:x9; op1val:0xfa44; op2val:0x7bff; 
   valaddr_reg:x5; val_offset:6*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:??; testreg:x2 
*/
TEST_FPRR_OP(fadd.h, x9, x14, x9, dyn, 0, 0, x5, 6*FLEN/8, x6, x3, x2)

inst_4:
// rs1 == rd != rs2, rs1==x1, rs2==x16, rd==x1,fs1 == 1 and fe1 == 0x1d and fm1 == 0x39f and fs2 == 0 and fe2 == 0x1e and fm2 == 0x3ff and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0xffff and rs2_sgn_prefix == 0x0000  
/* opcode: fadd.h ; op1:x1; op2:x16; dest:x1; op1val:0xf79f; op2val:0x7bff; 
   valaddr_reg:x5; val_offset:8*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:??; testreg:x2 
*/
TEST_FPRR_OP(fadd.h, x1, x1, x16, dyn, 0, 0, x5, 8*FLEN/8, x6, x3, x2)

inst_5:
// rs1==x30, rs2==x4, rd==x31,fs1 == 1 and fe1 == 0x1e and fm1 == 0x342 and fs2 == 0 and fe2 == 0x1e and fm2 == 0x3ff and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0xffff and rs2_sgn_prefix == 0x0000  
/* opcode: fadd.h ; op1:x30; op2:x4; dest:x31; op1val:0xfb42; op2val:0x7bff; 
   valaddr_reg:x5; val_offset:10*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:??; testreg:x2 
*/
TEST_FPRR_OP(fadd.h, x31, x30, x4, dyn, 0, 0, x5, 10*FLEN/8, x6, x3, x2)

inst_6:
// rs1==x27, rs2==x30, rd==x13,fs1 == 1 and fe1 == 0x1d and fm1 == 0x081 and fs2 == 0 and fe2 == 0x1e and fm2 == 0x3ff and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0xffff and rs2_sgn_prefix == 0x0000  
/* opcode: fadd.h ; op1:x27; op2:x30; dest:x13; op1val:0xf481; op2val:0x7bff; 
   valaddr_reg:x5; val_offset:12*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:??; testreg:x2 
*/
TEST_FPRR_OP(fadd.h, x13, x27, x30, dyn, 0, 0, x5, 12*FLEN/8, x6, x3, x2)

inst_7:
// rs1==x18, rs2==x20, rd==x15,fs1 == 1 and fe1 == 0x1e and fm1 == 0x0f1 and fs2 == 0 and fe2 == 0x1e and fm2 == 0x2f2 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0xffff and rs2_sgn_prefix == 0x0000  
/* opcode: fadd.h ; op1:x18; op2:x20; dest:x15; op1val:0xf8f1; op2val:0x7af2; 
   valaddr_reg:x5; val_offset:14*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:??; testreg:x2 
*/
TEST_FPRR_OP(fadd.h, x15, x18, x20, dyn, 0, 0, x5, 14*FLEN/8, x6, x3, x2)

inst_8:
// rs1==x21, rs2==x22, rd==x26,fs1 == 1 and fe1 == 0x1e and fm1 == 0x346 and fs2 == 0 and fe2 == 0x1e and fm2 == 0x3ff and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0xffff and rs2_sgn_prefix == 0x0000  
/* opcode: fadd.h ; op1:x21; op2:x22; dest:x26; op1val:0xfb46; op2val:0x7bff; 
   valaddr_reg:x5; val_offset:16*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:??; testreg:x2 
*/
TEST_FPRR_OP(fadd.h, x26, x21, x22, dyn, 0, 0, x5, 16*FLEN/8, x6, x3, x2)

inst_9:
// rs1==x29, rs2==x13, rd==x8,fs1 == 1 and fe1 == 0x1e and fm1 == 0x27a and fs2 == 0 and fe2 == 0x1e and fm2 == 0x3ff and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0xffff and rs2_sgn_prefix == 0x0000  
/* opcode: fadd.h ; op1:x29; op2:x13; dest:x8; op1val:0xfa7a; op2val:0x7bff; 
   valaddr_reg:x5; val_offset:18*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:??; testreg:x2 
*/
TEST_FPRR_OP(fadd.h, x8, x29, x13, dyn, 0, 0, x5, 18*FLEN/8, x6, x3, x2)

inst_10:
// rs1==x26, rs2==x14, rd==x25,fs1 == 1 and fe1 == 0x1d and fm1 == 0x0f5 and fs2 == 0 and fe2 == 0x1e and fm2 == 0x3ff and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0xffff and rs2_sgn_prefix == 0x0000  
/* opcode: fadd.h ; op1:x26; op2:x14; dest:x25; op1val:0xf4f5; op2val:0x7bff; 
   valaddr_reg:x5; val_offset:20*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:??; testreg:x2 
*/
TEST_FPRR_OP(fadd.h, x25, x26, x14, dyn, 0, 0, x5, 20*FLEN/8, x6, x3, x2)

inst_11:
// rs1==x9, rs2==x27, rd==x12,fs1 == 1 and fe1 == 0x1e and fm1 == 0x32f and fs2 == 0 and fe2 == 0x1e and fm2 == 0x3ff and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0xffff and rs2_sgn_prefix == 0x0000  
/* opcode: fadd.h ; op1:x9; op2:x27; dest:x12; op1val:0xfb2f; op2val:0x7bff; 
   valaddr_reg:x5; val_offset:22*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:??; testreg:x2 
*/
TEST_FPRR_OP(fadd.h, x12, x9, x27, dyn, 0, 0, x5, 22*FLEN/8, x6, x3, x2)

inst_12:
// rs1==x7, rs2==x26, rd==x19,fs1 == 1 and fe1 == 0x1d and fm1 == 0x38c and fs2 == 0 and fe2 == 0x1e and fm2 == 0x094 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0xffff and rs2_sgn_prefix == 0x0000  
/* opcode: fadd.h ; op1:x7; op2:x26; dest:x19; op1val:0xf78c; op2val:0x7894; 
   valaddr_reg:x5; val_offset:24*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:??; testreg:x2 
*/
TEST_FPRR_OP(fadd.h, x19, x7, x26, dyn, 0, 0, x5, 24*FLEN/8, x6, x3, x2)
RVTEST_VALBASEUPD(x13,test_dataset_1)

inst_13:
// rs1==x4, rs2==x8, rd==x17,fs1 == 1 and fe1 == 0x1d and fm1 == 0x2f1 and fs2 == 0 and fe2 == 0x1e and fm2 == 0x3ff and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0xffff and rs2_sgn_prefix == 0x0000  
/* opcode: fadd.h ; op1:x4; op2:x8; dest:x17; op1val:0xf6f1; op2val:0x7bff; 
   valaddr_reg:x13; val_offset:0*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:??; testreg:x2 
*/
TEST_FPRR_OP(fadd.h, x17, x4, x8, dyn, 0, 0, x13, 0*FLEN/8, x15, x3, x2)

inst_14:
// rs1==x6, rs2==x12, rd==x18,fs1 == 1 and fe1 == 0x1e and fm1 == 0x34c and fs2 == 0 and fe2 == 0x1e and fm2 == 0x3ff and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0xffff and rs2_sgn_prefix == 0x0000  
/* opcode: fadd.h ; op1:x6; op2:x12; dest:x18; op1val:0xfb4c; op2val:0x7bff; 
   valaddr_reg:x13; val_offset:2*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:??; testreg:x2 
*/
TEST_FPRR_OP(fadd.h, x18, x6, x12, dyn, 0, 0, x13, 2*FLEN/8, x15, x3, x2)

inst_15:
// rs1==x19, rs2==x31, rd==x5,fs1 == 1 and fe1 == 0x1d and fm1 == 0x3a0 and fs2 == 0 and fe2 == 0x1e and fm2 == 0x3ff and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0xffff and rs2_sgn_prefix == 0x0000  
/* opcode: fadd.h ; op1:x19; op2:x31; dest:x5; op1val:0xf7a0; op2val:0x7bff; 
   valaddr_reg:x13; val_offset:4*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:??; testreg:x2 
*/
TEST_FPRR_OP(fadd.h, x5, x19, x31, dyn, 0, 0, x13, 4*FLEN/8, x15, x3, x2)

inst_16:
// rs1==x28, rs2==x2, rd==x7,fs1 == 1 and fe1 == 0x1d and fm1 == 0x02a and fs2 == 0 and fe2 == 0x1e and fm2 == 0x3ff and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0xffff and rs2_sgn_prefix == 0x0000  
/* opcode: fadd.h ; op1:x28; op2:x2; dest:x7; op1val:0xf42a; op2val:0x7bff; 
   valaddr_reg:x13; val_offset:6*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:??; testreg:x11 
*/
TEST_FPRR_OP(fadd.h, x7, x28, x2, dyn, 0, 0, x13, 6*FLEN/8, x15, x3, x11)
RVTEST_SIGBASE(x9,signature_x9_0)

inst_17:
// rs1==x0, rs2==x5, rd==x30,fs1 == 1 and fe1 == 0x1e and fm1 == 0x063 and fs2 == 0 and fe2 == 0x1e and fm2 == 0x07f and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0xffff and rs2_sgn_prefix == 0x0000  
/* opcode: fadd.h ; op1:x0; op2:x5; dest:x30; op1val:0x0; op2val:0x787f; 
   valaddr_reg:x13; val_offset:8*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:??; testreg:x11 
*/
TEST_FPRR_OP(fadd.h, x30, x0, x5, dyn, 0, 0, x13, 8*FLEN/8, x15, x9, x11)

inst_18:
// rs1==x31, rs2==x21, rd==x20,fs1 == 1 and fe1 == 0x1e and fm1 == 0x1c1 and fs2 == 0 and fe2 == 0x1e and fm2 == 0x3ff and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0xffff and rs2_sgn_prefix == 0x0000  
/* opcode: fadd.h ; op1:x31; op2:x21; dest:x20; op1val:0xf9c1; op2val:0x7bff; 
   valaddr_reg:x13; val_offset:10*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:??; testreg:x11 
*/
TEST_FPRR_OP(fadd.h, x20, x31, x21, dyn, 0, 0, x13, 10*FLEN/8, x15, x9, x11)

inst_19:
// rs1==x8, rs2==x1, rd==x4,fs1 == 1 and fe1 == 0x1e and fm1 == 0x298 and fs2 == 0 and fe2 == 0x1e and fm2 == 0x3ff and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0xffff and rs2_sgn_prefix == 0x0000  
/* opcode: fadd.h ; op1:x8; op2:x1; dest:x4; op1val:0xfa98; op2val:0x7bff; 
   valaddr_reg:x13; val_offset:12*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:??; testreg:x11 
*/
TEST_FPRR_OP(fadd.h, x4, x8, x1, dyn, 0, 0, x13, 12*FLEN/8, x15, x9, x11)

inst_20:
// rs1==x5, rs2==x6, rd==x0,fs1 == 1 and fe1 == 0x15 and fm1 == 0x0ad and fs2 == 0 and fe2 == 0x1d and fm2 == 0x3e9 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0xffff and rs2_sgn_prefix == 0x0000  
/* opcode: fadd.h ; op1:x5; op2:x6; dest:x0; op1val:0xd4ad; op2val:0x77e9; 
   valaddr_reg:x13; val_offset:14*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:??; testreg:x11 
*/
TEST_FPRR_OP(fadd.h, x0, x5, x6, dyn, 0, 0, x13, 14*FLEN/8, x15, x9, x11)

inst_21:
// rs1==x3, rs2==x19, rd==x29,fs1 == 1 and fe1 == 0x1e and fm1 == 0x2ef and fs2 == 0 and fe2 == 0x1e and fm2 == 0x3ff and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0xffff and rs2_sgn_prefix == 0x0000  
/* opcode: fadd.h ; op1:x3; op2:x19; dest:x29; op1val:0xfaef; op2val:0x7bff; 
   valaddr_reg:x13; val_offset:16*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:??; testreg:x11 
*/
TEST_FPRR_OP(fadd.h, x29, x3, x19, dyn, 0, 0, x13, 16*FLEN/8, x15, x9, x11)

inst_22:
// rs1==x22, rs2==x0, rd==x14,fs1 == 1 and fe1 == 0x1d and fm1 == 0x133 and fs2 == 0 and fe2 == 0x1e and fm2 == 0x3ff and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0xffff and rs2_sgn_prefix == 0x0000  
/* opcode: fadd.h ; op1:x22; op2:x0; dest:x14; op1val:0xf533; op2val:0x0; 
   valaddr_reg:x13; val_offset:18*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:??; testreg:x11 
*/
TEST_FPRR_OP(fadd.h, x14, x22, x0, dyn, 0, 0, x13, 18*FLEN/8, x15, x9, x11)

inst_23:
// rs1==x20, rs2==x25, rd==x16,fs1 == 1 and fe1 == 0x1c and fm1 == 0x21c and fs2 == 0 and fe2 == 0x1e and fm2 == 0x210 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0xffff and rs2_sgn_prefix == 0x0000  
/* opcode: fadd.h ; op1:x20; op2:x25; dest:x16; op1val:0xf21c; op2val:0x7a10; 
   valaddr_reg:x13; val_offset:20*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:??; testreg:x11 
*/
TEST_FPRR_OP(fadd.h, x16, x20, x25, dyn, 0, 0, x13, 20*FLEN/8, x15, x9, x11)

inst_24:
// rs1==x23, rs2==x10, rd==x28,fs1 == 1 and fe1 == 0x1c and fm1 == 0x3a1 and fs2 == 0 and fe2 == 0x1e and fm2 == 0x3ff and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0xffff and rs2_sgn_prefix == 0x0000  
/* opcode: fadd.h ; op1:x23; op2:x10; dest:x28; op1val:0xf3a1; op2val:0x7bff; 
   valaddr_reg:x13; val_offset:22*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:??; testreg:x11 
*/
TEST_FPRR_OP(fadd.h, x28, x23, x10, dyn, 0, 0, x13, 22*FLEN/8, x15, x9, x11)
RVTEST_VALBASEUPD(x5,test_dataset_2)

inst_25:
// rs1==x13, rs2==x7, rd==x21,fs1 == 1 and fe1 == 0x1e and fm1 == 0x26c and fs2 == 0 and fe2 == 0x1e and fm2 == 0x3ff and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0xffff and rs2_sgn_prefix == 0x0000  
/* opcode: fadd.h ; op1:x13; op2:x7; dest:x21; op1val:0xfa6c; op2val:0x7bff; 
   valaddr_reg:x5; val_offset:0*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:??; testreg:x11 
*/
TEST_FPRR_OP(fadd.h, x21, x13, x7, dyn, 0, 0, x5, 0*FLEN/8, x8, x9, x11)

inst_26:
// rs1==x15, rs2==x18, rd==x10,fs1 == 1 and fe1 == 0x1b and fm1 == 0x125 and fs2 == 0 and fe2 == 0x1d and fm2 == 0x267 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0xffff and rs2_sgn_prefix == 0x0000  
/* opcode: fadd.h ; op1:x15; op2:x18; dest:x10; op1val:0xed25; op2val:0x7667; 
   valaddr_reg:x5; val_offset:2*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:??; testreg:x11 
*/
TEST_FPRR_OP(fadd.h, x10, x15, x18, dyn, 0, 0, x5, 2*FLEN/8, x8, x9, x11)

inst_27:
// rs1==x12, rs2==x3, rd==x2,fs1 == 1 and fe1 == 0x1e and fm1 == 0x00f and fs2 == 0 and fe2 == 0x1e and fm2 == 0x3ff and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0xffff and rs2_sgn_prefix == 0x0000  
/* opcode: fadd.h ; op1:x12; op2:x3; dest:x2; op1val:0xf80f; op2val:0x7bff; 
   valaddr_reg:x5; val_offset:4*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:??; testreg:x11 
*/
TEST_FPRR_OP(fadd.h, x2, x12, x3, dyn, 0, 0, x5, 4*FLEN/8, x8, x9, x11)

inst_28:
// rs1==x25, rs2==x11, rd==x3,fs1 == 1 and fe1 == 0x1b and fm1 == 0x2f9 and fs2 == 0 and fe2 == 0x1e and fm2 == 0x147 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0xffff and rs2_sgn_prefix == 0x0000  
/* opcode: fadd.h ; op1:x25; op2:x11; dest:x3; op1val:0xeef9; op2val:0x7947; 
   valaddr_reg:x5; val_offset:6*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:??; testreg:x4 
*/
TEST_FPRR_OP(fadd.h, x3, x25, x11, dyn, 0, 0, x5, 6*FLEN/8, x8, x9, x4)
RVTEST_SIGBASE(x1,signature_x1_0)

inst_29:
// rs1==x10, rs2==x23, rd==x6,fs1 == 1 and fe1 == 0x1e and fm1 == 0x1a6 and fs2 == 0 and fe2 == 0x1e and fm2 == 0x3ff and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0xffff and rs2_sgn_prefix == 0x0000  
/* opcode: fadd.h ; op1:x10; op2:x23; dest:x6; op1val:0xf9a6; op2val:0x7bff; 
   valaddr_reg:x5; val_offset:8*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:??; testreg:x4 
*/
TEST_FPRR_OP(fadd.h, x6, x10, x23, dyn, 0, 0, x5, 8*FLEN/8, x8, x1, x4)

inst_30:
// rs1==x2, rs2==x28, rd==x11,fs1 == 1 and fe1 == 0x1e and fm1 == 0x283 and fs2 == 0 and fe2 == 0x1e and fm2 == 0x3ff and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0xffff and rs2_sgn_prefix == 0x0000  
/* opcode: fadd.h ; op1:x2; op2:x28; dest:x11; op1val:0xfa83; op2val:0x7bff; 
   valaddr_reg:x5; val_offset:10*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:??; testreg:x4 
*/
TEST_FPRR_OP(fadd.h, x11, x2, x28, dyn, 0, 0, x5, 10*FLEN/8, x8, x1, x4)

inst_31:
// rs1==x11, rs2==x15, rd==x23,fs1 == 1 and fe1 == 0x1e and fm1 == 0x3b4 and fs2 == 0 and fe2 == 0x1e and fm2 == 0x3ff and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0xffff and rs2_sgn_prefix == 0x0000  
/* opcode: fadd.h ; op1:x11; op2:x15; dest:x23; op1val:0xfbb4; op2val:0x7bff; 
   valaddr_reg:x5; val_offset:12*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:??; testreg:x4 
*/
TEST_FPRR_OP(fadd.h, x23, x11, x15, dyn, 0, 0, x5, 12*FLEN/8, x8, x1, x4)

inst_32:
// fs1 == 1 and fe1 == 0x1e and fm1 == 0x0b2 and fs2 == 0 and fe2 == 0x1e and fm2 == 0x3ff and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0xffff and rs2_sgn_prefix == 0x0000  
/* opcode: fadd.h ; op1:x30; op2:x29; dest:x31; op1val:0xf8b2; op2val:0x7bff; 
   valaddr_reg:x5; val_offset:14*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:??; testreg:x4 
*/
TEST_FPRR_OP(fadd.h, x31, x30, x29, dyn, 0, 0, x5, 14*FLEN/8, x8, x1, x4)

inst_33:
// fs1 == 1 and fe1 == 0x1e and fm1 == 0x0c4 and fs2 == 0 and fe2 == 0x1e and fm2 == 0x3d8 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0xffff and rs2_sgn_prefix == 0x0000  
/* opcode: fadd.h ; op1:x30; op2:x29; dest:x31; op1val:0xf8c4; op2val:0x7bd8; 
   valaddr_reg:x5; val_offset:16*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:??; testreg:x4 
*/
TEST_FPRR_OP(fadd.h, x31, x30, x29, dyn, 0, 0, x5, 16*FLEN/8, x8, x1, x4)

inst_34:
// fs1 == 1 and fe1 == 0x1e and fm1 == 0x09a and fs2 == 0 and fe2 == 0x1e and fm2 == 0x2ec and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0xffff and rs2_sgn_prefix == 0x0000  
/* opcode: fadd.h ; op1:x30; op2:x29; dest:x31; op1val:0xf89a; op2val:0x7aec; 
   valaddr_reg:x5; val_offset:18*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:??; testreg:x4 
*/
TEST_FPRR_OP(fadd.h, x31, x30, x29, dyn, 0, 0, x5, 18*FLEN/8, x8, x1, x4)

inst_35:
// fs1 == 1 and fe1 == 0x1c and fm1 == 0x20e and fs2 == 0 and fe2 == 0x1d and fm2 == 0x203 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0xffff and rs2_sgn_prefix == 0x0000  
/* opcode: fadd.h ; op1:x30; op2:x29; dest:x31; op1val:0xf20e; op2val:0x7603; 
   valaddr_reg:x5; val_offset:20*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:??; testreg:x4 
*/
TEST_FPRR_OP(fadd.h, x31, x30, x29, dyn, 0, 0, x5, 20*FLEN/8, x8, x1, x4)

inst_36:
// fs1 == 1 and fe1 == 0x1e and fm1 == 0x0e6 and fs2 == 0 and fe2 == 0x1e and fm2 == 0x3ff and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0xffff and rs2_sgn_prefix == 0x0000  
/* opcode: fadd.h ; op1:x30; op2:x29; dest:x31; op1val:0xf8e6; op2val:0x7bff; 
   valaddr_reg:x5; val_offset:22*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:??; testreg:x4 
*/
TEST_FPRR_OP(fadd.h, x31, x30, x29, dyn, 0, 0, x5, 22*FLEN/8, x8, x1, x4)

inst_37:
// fs1 == 1 and fe1 == 0x1d and fm1 == 0x39e and fs2 == 0 and fe2 == 0x1e and fm2 == 0x087 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0xffff and rs2_sgn_prefix == 0x0000  
/* opcode: fadd.h ; op1:x30; op2:x29; dest:x31; op1val:0xf79e; op2val:0x7887; 
   valaddr_reg:x5; val_offset:24*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:??; testreg:x4 
*/
TEST_FPRR_OP(fadd.h, x31, x30, x29, dyn, 0, 0, x5, 24*FLEN/8, x8, x1, x4)

inst_38:
// fs1 == 1 and fe1 == 0x1e and fm1 == 0x20e and fs2 == 0 and fe2 == 0x1e and fm2 == 0x3ff and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0xffff and rs2_sgn_prefix == 0x0000  
/* opcode: fadd.h ; op1:x30; op2:x29; dest:x31; op1val:0xfa0e; op2val:0x7bff; 
   valaddr_reg:x5; val_offset:26*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:??; testreg:x4 
*/
TEST_FPRR_OP(fadd.h, x31, x30, x29, dyn, 0, 0, x5, 26*FLEN/8, x8, x1, x4)

inst_39:
// fs1 == 1 and fe1 == 0x1e and fm1 == 0x362 and fs2 == 0 and fe2 == 0x1e and fm2 == 0x3ff and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0xffff and rs2_sgn_prefix == 0x0000  
/* opcode: fadd.h ; op1:x30; op2:x29; dest:x31; op1val:0xfb62; op2val:0x7bff; 
   valaddr_reg:x5; val_offset:28*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:??; testreg:x4 
*/
TEST_FPRR_OP(fadd.h, x31, x30, x29, dyn, 0, 0, x5, 28*FLEN/8, x8, x1, x4)

inst_40:
// fs1 == 1 and fe1 == 0x1e and fm1 == 0x32e and fs2 == 0 and fe2 == 0x1e and fm2 == 0x3ff and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0xffff and rs2_sgn_prefix == 0x0000  
/* opcode: fadd.h ; op1:x30; op2:x29; dest:x31; op1val:0xfb2e; op2val:0x7bff; 
   valaddr_reg:x5; val_offset:30*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:??; testreg:x4 
*/
TEST_FPRR_OP(fadd.h, x31, x30, x29, dyn, 0, 0, x5, 30*FLEN/8, x8, x1, x4)

inst_41:
// fs1 == 1 and fe1 == 0x1e and fm1 == 0x052 and fs2 == 0 and fe2 == 0x1e and fm2 == 0x373 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0xffff and rs2_sgn_prefix == 0x0000  
/* opcode: fadd.h ; op1:x30; op2:x29; dest:x31; op1val:0xf852; op2val:0x7b73; 
   valaddr_reg:x5; val_offset:32*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:??; testreg:x4 
*/
TEST_FPRR_OP(fadd.h, x31, x30, x29, dyn, 0, 0, x5, 32*FLEN/8, x8, x1, x4)

inst_42:
// fs1 == 1 and fe1 == 0x1e and fm1 == 0x1a3 and fs2 == 0 and fe2 == 0x1e and fm2 == 0x3d7 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0xffff and rs2_sgn_prefix == 0x0000  
/* opcode: fadd.h ; op1:x30; op2:x29; dest:x31; op1val:0xf9a3; op2val:0x7bd7; 
   valaddr_reg:x5; val_offset:34*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:??; testreg:x4 
*/
TEST_FPRR_OP(fadd.h, x31, x30, x29, dyn, 0, 0, x5, 34*FLEN/8, x8, x1, x4)

inst_43:
// fs1 == 1 and fe1 == 0x1e and fm1 == 0x27d and fs2 == 0 and fe2 == 0x1e and fm2 == 0x3ff and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0xffff and rs2_sgn_prefix == 0x0000  
/* opcode: fadd.h ; op1:x30; op2:x29; dest:x31; op1val:0xfa7d; op2val:0x7bff; 
   valaddr_reg:x5; val_offset:36*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:??; testreg:x4 
*/
TEST_FPRR_OP(fadd.h, x31, x30, x29, dyn, 0, 0, x5, 36*FLEN/8, x8, x1, x4)

inst_44:
// fs1 == 1 and fe1 == 0x1e and fm1 == 0x328 and fs2 == 0 and fe2 == 0x1e and fm2 == 0x3ff and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0xffff and rs2_sgn_prefix == 0x0000  
/* opcode: fadd.h ; op1:x30; op2:x29; dest:x31; op1val:0xfb28; op2val:0x7bff; 
   valaddr_reg:x5; val_offset:38*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:??; testreg:x4 
*/
TEST_FPRR_OP(fadd.h, x31, x30, x29, dyn, 0, 0, x5, 38*FLEN/8, x8, x1, x4)

inst_45:
// fs1 == 1 and fe1 == 0x1e and fm1 == 0x398 and fs2 == 0 and fe2 == 0x1e and fm2 == 0x3ff and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0xffff and rs2_sgn_prefix == 0x0000  
/* opcode: fadd.h ; op1:x30; op2:x29; dest:x31; op1val:0xfb98; op2val:0x7bff; 
   valaddr_reg:x5; val_offset:40*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:??; testreg:x4 
*/
TEST_FPRR_OP(fadd.h, x31, x30, x29, dyn, 0, 0, x5, 40*FLEN/8, x8, x1, x4)

inst_46:
// fs1 == 1 and fe1 == 0x1d and fm1 == 0x334 and fs2 == 0 and fe2 == 0x1e and fm2 == 0x3ff and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0xffff and rs2_sgn_prefix == 0x0000  
/* opcode: fadd.h ; op1:x30; op2:x29; dest:x31; op1val:0xf734; op2val:0x7bff; 
   valaddr_reg:x5; val_offset:42*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:??; testreg:x4 
*/
TEST_FPRR_OP(fadd.h, x31, x30, x29, dyn, 0, 0, x5, 42*FLEN/8, x8, x1, x4)

inst_47:
// fs1 == 1 and fe1 == 0x1e and fm1 == 0x3f7 and fs2 == 0 and fe2 == 0x1e and fm2 == 0x3ff and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0xffff and rs2_sgn_prefix == 0x0000  
/* opcode: fadd.h ; op1:x30; op2:x29; dest:x31; op1val:0xfbf7; op2val:0x7bff; 
   valaddr_reg:x5; val_offset:44*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:??; testreg:x4 
*/
TEST_FPRR_OP(fadd.h, x31, x30, x29, dyn, 0, 0, x5, 44*FLEN/8, x8, x1, x4)

inst_48:
// fs1 == 1 and fe1 == 0x1e and fm1 == 0x257 and fs2 == 0 and fe2 == 0x1e and fm2 == 0x300 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0xffff and rs2_sgn_prefix == 0x0000  
/* opcode: fadd.h ; op1:x30; op2:x29; dest:x31; op1val:0xfa57; op2val:0x7b00; 
   valaddr_reg:x5; val_offset:46*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:??; testreg:x4 
*/
TEST_FPRR_OP(fadd.h, x31, x30, x29, dyn, 0, 0, x5, 46*FLEN/8, x8, x1, x4)

inst_49:
// fs1 == 1 and fe1 == 0x1e and fm1 == 0x2c0 and fs2 == 0 and fe2 == 0x1e and fm2 == 0x3ff and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0xffff and rs2_sgn_prefix == 0x0000  
/* opcode: fadd.h ; op1:x30; op2:x29; dest:x31; op1val:0xfac0; op2val:0x7bff; 
   valaddr_reg:x5; val_offset:48*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:??; testreg:x4 
*/
TEST_FPRR_OP(fadd.h, x31, x30, x29, dyn, 0, 0, x5, 48*FLEN/8, x8, x1, x4)

inst_50:
// fs1 == 1 and fe1 == 0x1e and fm1 == 0x016 and fs2 == 0 and fe2 == 0x1e and fm2 == 0x353 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0xffff and rs2_sgn_prefix == 0x0000  
/* opcode: fadd.h ; op1:x30; op2:x29; dest:x31; op1val:0xf816; op2val:0x7b53; 
   valaddr_reg:x5; val_offset:50*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:??; testreg:x4 
*/
TEST_FPRR_OP(fadd.h, x31, x30, x29, dyn, 0, 0, x5, 50*FLEN/8, x8, x1, x4)

inst_51:
// fs1 == 1 and fe1 == 0x1e and fm1 == 0x063 and fs2 == 0 and fe2 == 0x1e and fm2 == 0x07f and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0xffff and rs2_sgn_prefix == 0x0000  
/* opcode: fadd.h ; op1:x30; op2:x29; dest:x31; op1val:0xf863; op2val:0x787f; 
   valaddr_reg:x5; val_offset:52*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:??; testreg:x4 
*/
TEST_FPRR_OP(fadd.h, x31, x30, x29, dyn, 0, 0, x5, 52*FLEN/8, x8, x1, x4)

inst_52:
// fs1 == 1 and fe1 == 0x15 and fm1 == 0x0ad and fs2 == 0 and fe2 == 0x1d and fm2 == 0x3e9 and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0xffff and rs2_sgn_prefix == 0x0000  
/* opcode: fadd.h ; op1:x30; op2:x29; dest:x31; op1val:0xd4ad; op2val:0x77e9; 
   valaddr_reg:x5; val_offset:54*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:??; testreg:x4 
*/
TEST_FPRR_OP(fadd.h, x31, x30, x29, dyn, 0, 0, x5, 54*FLEN/8, x8, x1, x4)

inst_53:
// fs1 == 1 and fe1 == 0x1d and fm1 == 0x133 and fs2 == 0 and fe2 == 0x1e and fm2 == 0x3ff and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0xffff and rs2_sgn_prefix == 0x0000  
/* opcode: fadd.h ; op1:x30; op2:x29; dest:x31; op1val:0xf533; op2val:0x7bff; 
   valaddr_reg:x5; val_offset:56*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:??; testreg:x4 
*/
TEST_FPRR_OP(fadd.h, x31, x30, x29, dyn, 0, 0, x5, 56*FLEN/8, x8, x1, x4)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(64192,16,FLEN)
NAN_BOXED(64192,32,FLEN)
NAN_BOXED(63161,16,FLEN)
NAN_BOXED(31086,32,FLEN)
NAN_BOXED(63510,16,FLEN)
NAN_BOXED(63510,32,FLEN)
NAN_BOXED(64068,16,FLEN)
NAN_BOXED(31743,32,FLEN)
NAN_BOXED(63391,16,FLEN)
NAN_BOXED(31743,32,FLEN)
NAN_BOXED(64322,16,FLEN)
NAN_BOXED(31743,32,FLEN)
NAN_BOXED(62593,16,FLEN)
NAN_BOXED(31743,32,FLEN)
NAN_BOXED(63729,16,FLEN)
NAN_BOXED(31474,32,FLEN)
NAN_BOXED(64326,16,FLEN)
NAN_BOXED(31743,32,FLEN)
NAN_BOXED(64122,16,FLEN)
NAN_BOXED(31743,32,FLEN)
NAN_BOXED(62709,16,FLEN)
NAN_BOXED(31743,32,FLEN)
NAN_BOXED(64303,16,FLEN)
NAN_BOXED(31743,32,FLEN)
NAN_BOXED(63372,16,FLEN)
NAN_BOXED(30868,32,FLEN)
test_dataset_1:
NAN_BOXED(63217,16,FLEN)
NAN_BOXED(31743,32,FLEN)
NAN_BOXED(64332,16,FLEN)
NAN_BOXED(31743,32,FLEN)
NAN_BOXED(63392,16,FLEN)
NAN_BOXED(31743,32,FLEN)
NAN_BOXED(62506,16,FLEN)
NAN_BOXED(31743,32,FLEN)
NAN_BOXED(0,16,FLEN)
NAN_BOXED(30847,32,FLEN)
NAN_BOXED(63937,16,FLEN)
NAN_BOXED(31743,32,FLEN)
NAN_BOXED(64152,16,FLEN)
NAN_BOXED(31743,32,FLEN)
NAN_BOXED(54445,16,FLEN)
NAN_BOXED(30697,32,FLEN)
NAN_BOXED(64239,16,FLEN)
NAN_BOXED(31743,32,FLEN)
NAN_BOXED(62771,16,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(61980,16,FLEN)
NAN_BOXED(31248,32,FLEN)
NAN_BOXED(62369,16,FLEN)
NAN_BOXED(31743,32,FLEN)
test_dataset_2:
NAN_BOXED(64108,16,FLEN)
NAN_BOXED(31743,16,FLEN)
NAN_BOXED(60709,16,FLEN)
NAN_BOXED(30311,16,FLEN)
NAN_BOXED(63503,16,FLEN)
NAN_BOXED(31743,16,FLEN)
NAN_BOXED(61177,16,FLEN)
NAN_BOXED(31047,16,FLEN)
NAN_BOXED(63910,16,FLEN)
NAN_BOXED(31743,16,FLEN)
NAN_BOXED(64131,16,FLEN)
NAN_BOXED(31743,16,FLEN)
NAN_BOXED(64436,16,FLEN)
NAN_BOXED(31743,16,FLEN)
NAN_BOXED(63666,16,FLEN)
NAN_BOXED(31743,16,FLEN)
NAN_BOXED(63684,16,FLEN)
NAN_BOXED(31704,16,FLEN)
NAN_BOXED(63642,16,FLEN)
NAN_BOXED(31468,16,FLEN)
NAN_BOXED(61966,16,FLEN)
NAN_BOXED(30211,16,FLEN)
NAN_BOXED(63718,16,FLEN)
NAN_BOXED(31743,16,FLEN)
NAN_BOXED(63390,16,FLEN)
NAN_BOXED(30855,16,FLEN)
NAN_BOXED(64014,16,FLEN)
NAN_BOXED(31743,16,FLEN)
NAN_BOXED(64354,16,FLEN)
NAN_BOXED(31743,16,FLEN)
NAN_BOXED(64302,16,FLEN)
NAN_BOXED(31743,16,FLEN)
NAN_BOXED(63570,16,FLEN)
NAN_BOXED(31603,16,FLEN)
NAN_BOXED(63907,16,FLEN)
NAN_BOXED(31703,16,FLEN)
NAN_BOXED(64125,16,FLEN)
NAN_BOXED(31743,16,FLEN)
NAN_BOXED(64296,16,FLEN)
NAN_BOXED(31743,16,FLEN)
NAN_BOXED(64408,16,FLEN)
NAN_BOXED(31743,16,FLEN)
NAN_BOXED(63284,16,FLEN)
NAN_BOXED(31743,16,FLEN)
NAN_BOXED(64503,16,FLEN)
NAN_BOXED(31743,16,FLEN)
NAN_BOXED(64087,16,FLEN)
NAN_BOXED(31488,16,FLEN)
NAN_BOXED(64192,16,FLEN)
NAN_BOXED(31743,16,FLEN)
NAN_BOXED(63510,16,FLEN)
NAN_BOXED(31571,16,FLEN)
NAN_BOXED(63587,16,FLEN)
NAN_BOXED(30847,16,FLEN)
NAN_BOXED(54445,16,FLEN)
NAN_BOXED(30697,16,FLEN)
NAN_BOXED(62771,16,FLEN)
NAN_BOXED(31743,16,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;



signature_x3_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x3_1:
    .fill 34*((SIGALIGN)/4),4,0xdeadbeef


signature_x9_0:
    .fill 24*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_0:
    .fill 50*((SIGALIGN)/4),4,0xdeadbeef

#ifdef rvtest_mtrap_routine
tsig_begin_canary:
CANARY;

mtrap_sigptr:
    .fill 64*XLEN/32,4,0xdeadbeef

tsig_end_canary:
CANARY;
#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif


sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
