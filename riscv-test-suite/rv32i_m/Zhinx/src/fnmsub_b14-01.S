
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.12.2
// timestamp : Wed Sep 25 06:07:02 2024 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /home/riscv/testing/riscv-ctg/sample_cgfs/dataset.cgf \
//                  --cgf /home/riscv/testing/riscv-ctg/sample_cgfs/sample_cgfs_fext/RV32Zhinx/rv32h_fnmsub.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fnmsub.h instruction of the RISC-V RV32_Zfinx_Zhinx,RV64_Zfinx_Zhinx extension for the fnmsub_b14 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32I_Zfinx_Zhinx,RV64I_Zfinx_Zhinx")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*Zfinx.*Zhinx.*);def TEST_CASE_1=True;",fnmsub_b14)

RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x2,test_dataset_0)
RVTEST_SIGBASE(x7,signature_x7_1)

inst_0:
// rs1 == rs2 != rs3 and rs1 == rs2 != rd and rd != rs3, rs1==x29, rs2==x29, rs3==x0, rd==x26,fs1 == 0 and fe1 == 0x1c and fm1 == 0x39c and fs2 == 0 and fe2 == 0x1e and fm2 == 0x05a and fs3 == 0 and fe3 == 0x0e and fm3 == 0x1ea and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x0000 and rs2_sgn_prefix == 0x0000 and rs3_sgn_prefix == 0x0000  
/* opcode: fnmsub.h ; op1:x29; op2:x29; op3:x0; dest:x26; op1val:0x739c; op2val:0x739c;
op3val:0x0; valaddr_reg:x2; val_offset:0*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.h, x26, x29, x29, x0, dyn, 0, 0, x2, 0*FLEN/8, x9, x7, x10)

inst_1:
// rs1 == rd != rs2 and rs1 == rd != rs3 and rs3 != rs2, rs1==x6, rs2==x21, rs3==x30, rd==x6,fs1 == 0 and fe1 == 0x1c and fm1 == 0x39c and fs2 == 0 and fe2 == 0x1e and fm2 == 0x05a and fs3 == 0 and fe3 == 0x0f and fm3 == 0x1ea and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x0000 and rs2_sgn_prefix == 0x0000 and rs3_sgn_prefix == 0x0000  
/* opcode: fnmsub.h ; op1:x6; op2:x21; op3:x30; dest:x6; op1val:0x739c; op2val:0x785a;
op3val:0x3dea; valaddr_reg:x2; val_offset:3*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.h, x6, x6, x21, x30, dyn, 0, 0, x2, 3*FLEN/8, x9, x7, x10)

inst_2:
// rs1 != rs2 and rs1 != rd and rs1 != rs3 and rs2 != rs3 and rs2 != rd and rs3 != rd, rs1==x27, rs2==x6, rs3==x26, rd==x8,fs1 == 0 and fe1 == 0x1c and fm1 == 0x39c and fs2 == 0 and fe2 == 0x1e and fm2 == 0x05a and fs3 == 0 and fe3 == 0x10 and fm3 == 0x1ea and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x0000 and rs2_sgn_prefix == 0x0000 and rs3_sgn_prefix == 0x0000  
/* opcode: fnmsub.h ; op1:x27; op2:x6; op3:x26; dest:x8; op1val:0x739c; op2val:0x785a;
op3val:0x41ea; valaddr_reg:x2; val_offset:6*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.h, x8, x27, x6, x26, dyn, 0, 0, x2, 6*FLEN/8, x9, x7, x10)

inst_3:
// rs1 == rs3 != rs2 and rs1 == rs3 != rd and rd != rs2, rs1==x17, rs2==x4, rs3==x17, rd==x22,fs1 == 0 and fe1 == 0x1c and fm1 == 0x39c and fs2 == 0 and fe2 == 0x1e and fm2 == 0x05a and fs3 == 0 and fe3 == 0x11 and fm3 == 0x1ea and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x0000 and rs2_sgn_prefix == 0x0000 and rs3_sgn_prefix == 0x0000  
/* opcode: fnmsub.h ; op1:x17; op2:x4; op3:x17; dest:x22; op1val:0x739c; op2val:0x785a;
op3val:0x739c; valaddr_reg:x2; val_offset:9*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.h, x22, x17, x4, x17, dyn, 0, 0, x2, 9*FLEN/8, x9, x7, x10)

inst_4:
// rs1 == rs2 == rs3 != rd, rs1==x1, rs2==x1, rs3==x1, rd==x21,fs1 == 0 and fe1 == 0x1c and fm1 == 0x39c and fs2 == 0 and fe2 == 0x1e and fm2 == 0x05a and fs3 == 0 and fe3 == 0x12 and fm3 == 0x1ea and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x0000 and rs2_sgn_prefix == 0x0000 and rs3_sgn_prefix == 0x0000  
/* opcode: fnmsub.h ; op1:x1; op2:x1; op3:x1; dest:x21; op1val:0x739c; op2val:0x739c;
op3val:0x739c; valaddr_reg:x2; val_offset:12*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.h, x21, x1, x1, x1, dyn, 0, 0, x2, 12*FLEN/8, x9, x7, x10)

inst_5:
// rs3 == rd != rs1 and rs3 == rd != rs2 and rs2 != rs1, rs1==x5, rs2==x3, rs3==x15, rd==x15,fs1 == 0 and fe1 == 0x1c and fm1 == 0x39c and fs2 == 0 and fe2 == 0x1e and fm2 == 0x05a and fs3 == 0 and fe3 == 0x13 and fm3 == 0x1ea and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x0000 and rs2_sgn_prefix == 0x0000 and rs3_sgn_prefix == 0x0000  
/* opcode: fnmsub.h ; op1:x5; op2:x3; op3:x15; dest:x15; op1val:0x739c; op2val:0x785a;
op3val:0x4dea; valaddr_reg:x2; val_offset:15*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.h, x15, x5, x3, x15, dyn, 0, 0, x2, 15*FLEN/8, x9, x7, x10)

inst_6:
// rd == rs2 == rs3 != rs1, rs1==x30, rs2==x14, rs3==x14, rd==x14,fs1 == 0 and fe1 == 0x1c and fm1 == 0x39c and fs2 == 0 and fe2 == 0x1e and fm2 == 0x05a and fs3 == 0 and fe3 == 0x14 and fm3 == 0x1ea and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x0000 and rs2_sgn_prefix == 0x0000 and rs3_sgn_prefix == 0x0000  
/* opcode: fnmsub.h ; op1:x30; op2:x14; op3:x14; dest:x14; op1val:0x739c; op2val:0x785a;
op3val:0x785a; valaddr_reg:x2; val_offset:18*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.h, x14, x30, x14, x14, dyn, 0, 0, x2, 18*FLEN/8, x9, x7, x10)

inst_7:
// rs1 == rd == rs3 != rs2, rs1==x31, rs2==x8, rs3==x31, rd==x31,fs1 == 0 and fe1 == 0x1c and fm1 == 0x39c and fs2 == 0 and fe2 == 0x1e and fm2 == 0x05a and fs3 == 0 and fe3 == 0x15 and fm3 == 0x1ea and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x0000 and rs2_sgn_prefix == 0x0000 and rs3_sgn_prefix == 0x0000  
/* opcode: fnmsub.h ; op1:x31; op2:x8; op3:x31; dest:x31; op1val:0x739c; op2val:0x785a;
op3val:0x739c; valaddr_reg:x2; val_offset:21*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.h, x31, x31, x8, x31, dyn, 0, 0, x2, 21*FLEN/8, x9, x7, x10)

inst_8:
// rs1 == rs2 == rs3 == rd, rs1==x28, rs2==x28, rs3==x28, rd==x28,fs1 == 0 and fe1 == 0x1c and fm1 == 0x39c and fs2 == 0 and fe2 == 0x1e and fm2 == 0x05a and fs3 == 0 and fe3 == 0x16 and fm3 == 0x1ea and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x0000 and rs2_sgn_prefix == 0x0000 and rs3_sgn_prefix == 0x0000  
/* opcode: fnmsub.h ; op1:x28; op2:x28; op3:x28; dest:x28; op1val:0x739c; op2val:0x739c;
op3val:0x739c; valaddr_reg:x2; val_offset:24*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.h, x28, x28, x28, x28, dyn, 0, 0, x2, 24*FLEN/8, x9, x7, x10)

inst_9:
// rs1 == rs2 == rd != rs3, rs1==x25, rs2==x25, rs3==x12, rd==x25,fs1 == 0 and fe1 == 0x1c and fm1 == 0x39c and fs2 == 0 and fe2 == 0x1e and fm2 == 0x05a and fs3 == 0 and fe3 == 0x17 and fm3 == 0x1ea and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x0000 and rs2_sgn_prefix == 0x0000 and rs3_sgn_prefix == 0x0000  
/* opcode: fnmsub.h ; op1:x25; op2:x25; op3:x12; dest:x25; op1val:0x739c; op2val:0x739c;
op3val:0x5dea; valaddr_reg:x2; val_offset:27*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.h, x25, x25, x25, x12, dyn, 0, 0, x2, 27*FLEN/8, x9, x7, x10)

inst_10:
// rs2 == rd != rs1 and rs2 == rd != rs3 and rs3 != rs1, rs1==x23, rs2==x19, rs3==x6, rd==x19,fs1 == 0 and fe1 == 0x1c and fm1 == 0x39c and fs2 == 0 and fe2 == 0x1e and fm2 == 0x05a and fs3 == 0 and fe3 == 0x18 and fm3 == 0x1ea and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x0000 and rs2_sgn_prefix == 0x0000 and rs3_sgn_prefix == 0x0000  
/* opcode: fnmsub.h ; op1:x23; op2:x19; op3:x6; dest:x19; op1val:0x739c; op2val:0x785a;
op3val:0x61ea; valaddr_reg:x2; val_offset:30*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.h, x19, x23, x19, x6, dyn, 0, 0, x2, 30*FLEN/8, x9, x7, x10)

inst_11:
// rs2 == rs3 != rs1 and rs2 == rs3 != rd and rd != rs1, rs1==x22, rs2==x13, rs3==x13, rd==x16,fs1 == 0 and fe1 == 0x1c and fm1 == 0x39c and fs2 == 0 and fe2 == 0x1e and fm2 == 0x05a and fs3 == 0 and fe3 == 0x19 and fm3 == 0x1ea and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x0000 and rs2_sgn_prefix == 0x0000 and rs3_sgn_prefix == 0x0000  
/* opcode: fnmsub.h ; op1:x22; op2:x13; op3:x13; dest:x16; op1val:0x739c; op2val:0x785a;
op3val:0x785a; valaddr_reg:x2; val_offset:33*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.h, x16, x22, x13, x13, dyn, 0, 0, x2, 33*FLEN/8, x9, x7, x10)
RVTEST_VALBASEUPD(x6,test_dataset_1)

inst_12:
// rs1==x0, rs2==x30, rs3==x4, rd==x23,fs1 == 0 and fe1 == 0x1c and fm1 == 0x39c and fs2 == 0 and fe2 == 0x1e and fm2 == 0x05a and fs3 == 0 and fe3 == 0x1a and fm3 == 0x1ea and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x0000 and rs2_sgn_prefix == 0x0000 and rs3_sgn_prefix == 0x0000  
/* opcode: fnmsub.h ; op1:x0; op2:x30; op3:x4; dest:x23; op1val:0x0; op2val:0x785a;
op3val:0x69ea; valaddr_reg:x6; val_offset:0*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.h, x23, x0, x30, x4, dyn, 0, 0, x6, 0*FLEN/8, x12, x7, x10)

inst_13:
// rs1==x13, rs2==x9, rs3==x22, rd==x3,fs1 == 0 and fe1 == 0x1c and fm1 == 0x39c and fs2 == 0 and fe2 == 0x1e and fm2 == 0x05a and fs3 == 0 and fe3 == 0x1b and fm3 == 0x1ea and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x0000 and rs2_sgn_prefix == 0x0000 and rs3_sgn_prefix == 0x0000  
/* opcode: fnmsub.h ; op1:x13; op2:x9; op3:x22; dest:x3; op1val:0x739c; op2val:0x785a;
op3val:0x6dea; valaddr_reg:x6; val_offset:3*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.h, x3, x13, x9, x22, dyn, 0, 0, x6, 3*FLEN/8, x12, x7, x10)

inst_14:
// rs1==x14, rs2==x27, rs3==x29, rd==x2,fs1 == 0 and fe1 == 0x1c and fm1 == 0x39c and fs2 == 0 and fe2 == 0x1e and fm2 == 0x05a and fs3 == 0 and fe3 == 0x1c and fm3 == 0x1ea and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x0000 and rs2_sgn_prefix == 0x0000 and rs3_sgn_prefix == 0x0000  
/* opcode: fnmsub.h ; op1:x14; op2:x27; op3:x29; dest:x2; op1val:0x739c; op2val:0x785a;
op3val:0x71ea; valaddr_reg:x6; val_offset:6*FLEN/8; rmval:dyn;
testreg:x10; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.h, x2, x14, x27, x29, dyn, 0, 0, x6, 6*FLEN/8, x12, x7, x10)

inst_15:
// rs1==x10, rs2==x17, rs3==x9, rd==x18,fs1 == 0 and fe1 == 0x1c and fm1 == 0x39c and fs2 == 0 and fe2 == 0x1e and fm2 == 0x05a and fs3 == 0 and fe3 == 0x1d and fm3 == 0x1ea and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x0000 and rs2_sgn_prefix == 0x0000 and rs3_sgn_prefix == 0x0000  
/* opcode: fnmsub.h ; op1:x10; op2:x17; op3:x9; dest:x18; op1val:0x739c; op2val:0x785a;
op3val:0x75ea; valaddr_reg:x6; val_offset:9*FLEN/8; rmval:dyn;
testreg:x3; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.h, x18, x10, x17, x9, dyn, 0, 0, x6, 9*FLEN/8, x12, x7, x3)
RVTEST_SIGBASE(x1,signature_x1_0)

inst_16:
// rs1==x7, rs2==x15, rs3==x23, rd==x17,fs1 == 0 and fe1 == 0x1c and fm1 == 0x39c and fs2 == 0 and fe2 == 0x1e and fm2 == 0x05a and fs3 == 0 and fe3 == 0x1e and fm3 == 0x1ea and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x0000 and rs2_sgn_prefix == 0x0000 and rs3_sgn_prefix == 0x0000  
/* opcode: fnmsub.h ; op1:x7; op2:x15; op3:x23; dest:x17; op1val:0x739c; op2val:0x785a;
op3val:0x79ea; valaddr_reg:x6; val_offset:12*FLEN/8; rmval:dyn;
testreg:x3; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.h, x17, x7, x15, x23, dyn, 0, 0, x6, 12*FLEN/8, x12, x1, x3)

inst_17:
// rs1==x21, rs2==x18, rs3==x5, rd==x20,fs1 == 0 and fe1 == 0x1c and fm1 == 0x39c and fs2 == 0 and fe2 == 0x1e and fm2 == 0x05a and fs3 == 0 and fe3 == 0x1e and fm3 == 0x3ff and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x0000 and rs2_sgn_prefix == 0x0000 and rs3_sgn_prefix == 0x0000  
/* opcode: fnmsub.h ; op1:x21; op2:x18; op3:x5; dest:x20; op1val:0x739c; op2val:0x785a;
op3val:0x7bff; valaddr_reg:x6; val_offset:15*FLEN/8; rmval:dyn;
testreg:x3; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.h, x20, x21, x18, x5, dyn, 0, 0, x6, 15*FLEN/8, x12, x1, x3)

inst_18:
// rs1==x4, rs2==x26, rs3==x21, rd==x5,
/* opcode: fnmsub.h ; op1:x4; op2:x26; op3:x21; dest:x5; op1val:0x0; op2val:0x0;
op3val:0x0; valaddr_reg:x6; val_offset:18*FLEN/8; rmval:dyn;
testreg:x3; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.h, x5, x4, x26, x21, dyn, 0, 0, x6, 18*FLEN/8, x12, x1, x3)

inst_19:
// rs1==x8, rs2==x7, rs3==x19, rd==x10,
/* opcode: fnmsub.h ; op1:x8; op2:x7; op3:x19; dest:x10; op1val:0x0; op2val:0x0;
op3val:0x0; valaddr_reg:x6; val_offset:21*FLEN/8; rmval:dyn;
testreg:x3; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.h, x10, x8, x7, x19, dyn, 0, 0, x6, 21*FLEN/8, x12, x1, x3)

inst_20:
// rs1==x19, rs2==x2, rs3==x11, rd==x30,
/* opcode: fnmsub.h ; op1:x19; op2:x2; op3:x11; dest:x30; op1val:0x0; op2val:0x0;
op3val:0x0; valaddr_reg:x6; val_offset:24*FLEN/8; rmval:dyn;
testreg:x3; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.h, x30, x19, x2, x11, dyn, 0, 0, x6, 24*FLEN/8, x12, x1, x3)

inst_21:
// rs1==x9, rs2==x22, rs3==x25, rd==x11,
/* opcode: fnmsub.h ; op1:x9; op2:x22; op3:x25; dest:x11; op1val:0x0; op2val:0x0;
op3val:0x0; valaddr_reg:x6; val_offset:27*FLEN/8; rmval:dyn;
testreg:x3; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.h, x11, x9, x22, x25, dyn, 0, 0, x6, 27*FLEN/8, x12, x1, x3)

inst_22:
// rs1==x16, rs2==x5, rs3==x10, rd==x29,
/* opcode: fnmsub.h ; op1:x16; op2:x5; op3:x10; dest:x29; op1val:0x0; op2val:0x0;
op3val:0x0; valaddr_reg:x6; val_offset:30*FLEN/8; rmval:dyn;
testreg:x3; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.h, x29, x16, x5, x10, dyn, 0, 0, x6, 30*FLEN/8, x12, x1, x3)
RVTEST_VALBASEUPD(x6,test_dataset_2)

inst_23:
// rs1==x12, rs2==x31, rs3==x18, rd==x9,
/* opcode: fnmsub.h ; op1:x12; op2:x31; op3:x18; dest:x9; op1val:0x0; op2val:0x0;
op3val:0x0; valaddr_reg:x6; val_offset:0*FLEN/8; rmval:dyn;
testreg:x3; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.h, x9, x12, x31, x18, dyn, 0, 0, x6, 0*FLEN/8, x8, x1, x3)

inst_24:
// rs1==x26, rs2==x23, rs3==x3, rd==x27,
/* opcode: fnmsub.h ; op1:x26; op2:x23; op3:x3; dest:x27; op1val:0x0; op2val:0x0;
op3val:0x0; valaddr_reg:x6; val_offset:3*FLEN/8; rmval:dyn;
testreg:x3; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.h, x27, x26, x23, x3, dyn, 0, 0, x6, 3*FLEN/8, x8, x1, x3)

inst_25:
// rs1==x18, rs2==x11, rs3==x20, rd==x24,
/* opcode: fnmsub.h ; op1:x18; op2:x11; op3:x20; dest:x24; op1val:0x0; op2val:0x0;
op3val:0x0; valaddr_reg:x6; val_offset:6*FLEN/8; rmval:dyn;
testreg:x3; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.h, x24, x18, x11, x20, dyn, 0, 0, x6, 6*FLEN/8, x8, x1, x3)

inst_26:
// rs1==x3, rs2==x20, rs3==x7, rd==x13,
/* opcode: fnmsub.h ; op1:x3; op2:x20; op3:x7; dest:x13; op1val:0x0; op2val:0x0;
op3val:0x0; valaddr_reg:x6; val_offset:9*FLEN/8; rmval:dyn;
testreg:x5; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.h, x13, x3, x20, x7, dyn, 0, 0, x6, 9*FLEN/8, x8, x1, x5)
RVTEST_SIGBASE(x3,signature_x3_0)

inst_27:
// rs1==x11, rs2==x12, rs3==x2, rd==x7,
/* opcode: fnmsub.h ; op1:x11; op2:x12; op3:x2; dest:x7; op1val:0x0; op2val:0x0;
op3val:0x0; valaddr_reg:x6; val_offset:12*FLEN/8; rmval:dyn;
testreg:x5; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.h, x7, x11, x12, x2, dyn, 0, 0, x6, 12*FLEN/8, x8, x3, x5)

inst_28:
// rs1==x24, rs2==x16, rs3==x8, rd==x0,
/* opcode: fnmsub.h ; op1:x24; op2:x16; op3:x8; dest:x0; op1val:0x0; op2val:0x0;
op3val:0x0; valaddr_reg:x6; val_offset:15*FLEN/8; rmval:dyn;
testreg:x5; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.h, x0, x24, x16, x8, dyn, 0, 0, x6, 15*FLEN/8, x8, x3, x5)

inst_29:
// rs1==x20, rs2==x24, rs3==x27, rd==x12,
/* opcode: fnmsub.h ; op1:x20; op2:x24; op3:x27; dest:x12; op1val:0x0; op2val:0x0;
op3val:0x0; valaddr_reg:x6; val_offset:18*FLEN/8; rmval:dyn;
testreg:x5; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.h, x12, x20, x24, x27, dyn, 0, 0, x6, 18*FLEN/8, x8, x3, x5)

inst_30:
// rs1==x15, rs2==x0, rs3==x16, rd==x4,
/* opcode: fnmsub.h ; op1:x15; op2:x0; op3:x16; dest:x4; op1val:0x0; op2val:0x0;
op3val:0x0; valaddr_reg:x6; val_offset:21*FLEN/8; rmval:dyn;
testreg:x5; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.h, x4, x15, x0, x16, dyn, 0, 0, x6, 21*FLEN/8, x8, x3, x5)

inst_31:
// rs1==x2, rs2==x10, rs3==x24, rd==x1,
/* opcode: fnmsub.h ; op1:x2; op2:x10; op3:x24; dest:x1; op1val:0x0; op2val:0x0;
op3val:0x0; valaddr_reg:x6; val_offset:24*FLEN/8; rmval:dyn;
testreg:x5; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.h, x1, x2, x10, x24, dyn, 0, 0, x6, 24*FLEN/8, x8, x3, x5)

inst_32:
// fs1 == 0 and fe1 == 0x1c and fm1 == 0x39c and fs2 == 0 and fe2 == 0x1e and fm2 == 0x05a and fs3 == 0 and fe3 == 0x0e and fm3 == 0x1ea and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x0000 and rs2_sgn_prefix == 0x0000 and rs3_sgn_prefix == 0x0000  
/* opcode: fnmsub.h ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x739c; op2val:0x785a;
op3val:0x39ea; valaddr_reg:x6; val_offset:27*FLEN/8; rmval:dyn;
testreg:x5; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.h, x31, x30, x29, x28, dyn, 0, 0, x6, 27*FLEN/8, x8, x3, x5)

inst_33:
// fs1 == 0 and fe1 == 0x1c and fm1 == 0x39c and fs2 == 0 and fe2 == 0x1e and fm2 == 0x05a and fs3 == 0 and fe3 == 0x11 and fm3 == 0x1ea and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x0000 and rs2_sgn_prefix == 0x0000 and rs3_sgn_prefix == 0x0000  
/* opcode: fnmsub.h ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x739c; op2val:0x785a;
op3val:0x45ea; valaddr_reg:x6; val_offset:30*FLEN/8; rmval:dyn;
testreg:x5; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.h, x31, x30, x29, x28, dyn, 0, 0, x6, 30*FLEN/8, x8, x3, x5)

inst_34:
// fs1 == 0 and fe1 == 0x1c and fm1 == 0x39c and fs2 == 0 and fe2 == 0x1e and fm2 == 0x05a and fs3 == 0 and fe3 == 0x12 and fm3 == 0x1ea and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x0000 and rs2_sgn_prefix == 0x0000 and rs3_sgn_prefix == 0x0000  
/* opcode: fnmsub.h ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x739c; op2val:0x785a;
op3val:0x49ea; valaddr_reg:x6; val_offset:33*FLEN/8; rmval:dyn;
testreg:x5; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.h, x31, x30, x29, x28, dyn, 0, 0, x6, 33*FLEN/8, x8, x3, x5)

inst_35:
// fs1 == 0 and fe1 == 0x1c and fm1 == 0x39c and fs2 == 0 and fe2 == 0x1e and fm2 == 0x05a and fs3 == 0 and fe3 == 0x14 and fm3 == 0x1ea and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x0000 and rs2_sgn_prefix == 0x0000 and rs3_sgn_prefix == 0x0000  
/* opcode: fnmsub.h ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x739c; op2val:0x785a;
op3val:0x51ea; valaddr_reg:x6; val_offset:36*FLEN/8; rmval:dyn;
testreg:x5; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.h, x31, x30, x29, x28, dyn, 0, 0, x6, 36*FLEN/8, x8, x3, x5)

inst_36:
// fs1 == 0 and fe1 == 0x1c and fm1 == 0x39c and fs2 == 0 and fe2 == 0x1e and fm2 == 0x05a and fs3 == 0 and fe3 == 0x15 and fm3 == 0x1ea and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x0000 and rs2_sgn_prefix == 0x0000 and rs3_sgn_prefix == 0x0000  
/* opcode: fnmsub.h ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x739c; op2val:0x785a;
op3val:0x55ea; valaddr_reg:x6; val_offset:39*FLEN/8; rmval:dyn;
testreg:x5; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.h, x31, x30, x29, x28, dyn, 0, 0, x6, 39*FLEN/8, x8, x3, x5)

inst_37:
// fs1 == 0 and fe1 == 0x1c and fm1 == 0x39c and fs2 == 0 and fe2 == 0x1e and fm2 == 0x05a and fs3 == 0 and fe3 == 0x16 and fm3 == 0x1ea and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x0000 and rs2_sgn_prefix == 0x0000 and rs3_sgn_prefix == 0x0000  
/* opcode: fnmsub.h ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x739c; op2val:0x785a;
op3val:0x59ea; valaddr_reg:x6; val_offset:42*FLEN/8; rmval:dyn;
testreg:x5; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.h, x31, x30, x29, x28, dyn, 0, 0, x6, 42*FLEN/8, x8, x3, x5)

inst_38:
// fs1 == 0 and fe1 == 0x1c and fm1 == 0x39c and fs2 == 0 and fe2 == 0x1e and fm2 == 0x05a and fs3 == 0 and fe3 == 0x17 and fm3 == 0x1ea and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x0000 and rs2_sgn_prefix == 0x0000 and rs3_sgn_prefix == 0x0000  
/* opcode: fnmsub.h ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x739c; op2val:0x785a;
op3val:0x5dea; valaddr_reg:x6; val_offset:45*FLEN/8; rmval:dyn;
testreg:x5; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.h, x31, x30, x29, x28, dyn, 0, 0, x6, 45*FLEN/8, x8, x3, x5)

inst_39:
// fs1 == 0 and fe1 == 0x1c and fm1 == 0x39c and fs2 == 0 and fe2 == 0x1e and fm2 == 0x05a and fs3 == 0 and fe3 == 0x19 and fm3 == 0x1ea and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x0000 and rs2_sgn_prefix == 0x0000 and rs3_sgn_prefix == 0x0000  
/* opcode: fnmsub.h ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x739c; op2val:0x785a;
op3val:0x65ea; valaddr_reg:x6; val_offset:48*FLEN/8; rmval:dyn;
testreg:x5; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.h, x31, x30, x29, x28, dyn, 0, 0, x6, 48*FLEN/8, x8, x3, x5)

inst_40:
// fs1 == 0 and fe1 == 0x1c and fm1 == 0x39c and fs2 == 0 and fe2 == 0x1e and fm2 == 0x05a and fs3 == 0 and fe3 == 0x1a and fm3 == 0x1ea and  fcsr == 0x0 and rm_val == 7  and rs1_sgn_prefix == 0x0000 and rs2_sgn_prefix == 0x0000 and rs3_sgn_prefix == 0x0000  
/* opcode: fnmsub.h ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x739c; op2val:0x785a;
op3val:0x69ea; valaddr_reg:x6; val_offset:51*FLEN/8; rmval:dyn;
testreg:x5; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.h, x31, x30, x29, x28, dyn, 0, 0, x6, 51*FLEN/8, x8, x3, x5)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(29596,32,FLEN)
NAN_BOXED(29596,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(29596,32,FLEN)
NAN_BOXED(30810,32,FLEN)
NAN_BOXED(15850,32,FLEN)
NAN_BOXED(29596,32,FLEN)
NAN_BOXED(30810,32,FLEN)
NAN_BOXED(16874,32,FLEN)
NAN_BOXED(29596,32,FLEN)
NAN_BOXED(30810,32,FLEN)
NAN_BOXED(29596,32,FLEN)
NAN_BOXED(29596,32,FLEN)
NAN_BOXED(29596,32,FLEN)
NAN_BOXED(29596,32,FLEN)
NAN_BOXED(29596,32,FLEN)
NAN_BOXED(30810,32,FLEN)
NAN_BOXED(19946,32,FLEN)
NAN_BOXED(29596,32,FLEN)
NAN_BOXED(30810,32,FLEN)
NAN_BOXED(30810,32,FLEN)
NAN_BOXED(29596,32,FLEN)
NAN_BOXED(30810,32,FLEN)
NAN_BOXED(29596,32,FLEN)
NAN_BOXED(29596,32,FLEN)
NAN_BOXED(29596,32,FLEN)
NAN_BOXED(29596,32,FLEN)
NAN_BOXED(29596,32,FLEN)
NAN_BOXED(29596,32,FLEN)
NAN_BOXED(24042,32,FLEN)
NAN_BOXED(29596,32,FLEN)
NAN_BOXED(30810,32,FLEN)
NAN_BOXED(25066,32,FLEN)
NAN_BOXED(29596,32,FLEN)
NAN_BOXED(30810,32,FLEN)
NAN_BOXED(30810,32,FLEN)
test_dataset_1:
NAN_BOXED(0,32,FLEN)
NAN_BOXED(30810,32,FLEN)
NAN_BOXED(27114,32,FLEN)
NAN_BOXED(29596,32,FLEN)
NAN_BOXED(30810,32,FLEN)
NAN_BOXED(28138,32,FLEN)
NAN_BOXED(29596,32,FLEN)
NAN_BOXED(30810,32,FLEN)
NAN_BOXED(29162,32,FLEN)
NAN_BOXED(29596,32,FLEN)
NAN_BOXED(30810,32,FLEN)
NAN_BOXED(30186,32,FLEN)
NAN_BOXED(29596,32,FLEN)
NAN_BOXED(30810,32,FLEN)
NAN_BOXED(31210,32,FLEN)
NAN_BOXED(29596,32,FLEN)
NAN_BOXED(30810,32,FLEN)
NAN_BOXED(31743,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(0,32,FLEN)
test_dataset_2:
NAN_BOXED(0,16,FLEN)
NAN_BOXED(0,16,FLEN)
NAN_BOXED(0,16,FLEN)
NAN_BOXED(0,16,FLEN)
NAN_BOXED(0,16,FLEN)
NAN_BOXED(0,16,FLEN)
NAN_BOXED(0,16,FLEN)
NAN_BOXED(0,16,FLEN)
NAN_BOXED(0,16,FLEN)
NAN_BOXED(0,16,FLEN)
NAN_BOXED(0,16,FLEN)
NAN_BOXED(0,16,FLEN)
NAN_BOXED(0,16,FLEN)
NAN_BOXED(0,16,FLEN)
NAN_BOXED(0,16,FLEN)
NAN_BOXED(0,16,FLEN)
NAN_BOXED(0,16,FLEN)
NAN_BOXED(0,16,FLEN)
NAN_BOXED(0,16,FLEN)
NAN_BOXED(0,16,FLEN)
NAN_BOXED(0,16,FLEN)
NAN_BOXED(0,16,FLEN)
NAN_BOXED(0,16,FLEN)
NAN_BOXED(0,16,FLEN)
NAN_BOXED(0,16,FLEN)
NAN_BOXED(0,16,FLEN)
NAN_BOXED(0,16,FLEN)
NAN_BOXED(29596,16,FLEN)
NAN_BOXED(30810,16,FLEN)
NAN_BOXED(14826,16,FLEN)
NAN_BOXED(29596,16,FLEN)
NAN_BOXED(30810,16,FLEN)
NAN_BOXED(17898,16,FLEN)
NAN_BOXED(29596,16,FLEN)
NAN_BOXED(30810,16,FLEN)
NAN_BOXED(18922,16,FLEN)
NAN_BOXED(29596,16,FLEN)
NAN_BOXED(30810,16,FLEN)
NAN_BOXED(20970,16,FLEN)
NAN_BOXED(29596,16,FLEN)
NAN_BOXED(30810,16,FLEN)
NAN_BOXED(21994,16,FLEN)
NAN_BOXED(29596,16,FLEN)
NAN_BOXED(30810,16,FLEN)
NAN_BOXED(23018,16,FLEN)
NAN_BOXED(29596,16,FLEN)
NAN_BOXED(30810,16,FLEN)
NAN_BOXED(24042,16,FLEN)
NAN_BOXED(29596,16,FLEN)
NAN_BOXED(30810,16,FLEN)
NAN_BOXED(26090,16,FLEN)
NAN_BOXED(29596,16,FLEN)
NAN_BOXED(30810,16,FLEN)
NAN_BOXED(27114,16,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;



signature_x7_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x7_1:
    .fill 32*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_0:
    .fill 22*((SIGALIGN)/4),4,0xdeadbeef


signature_x3_0:
    .fill 28*((SIGALIGN)/4),4,0xdeadbeef

#ifdef rvtest_mtrap_routine
tsig_begin_canary:
CANARY;

mtrap_sigptr:
    .fill 64*XLEN/32,4,0xdeadbeef

tsig_end_canary:
CANARY;
#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif


sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
