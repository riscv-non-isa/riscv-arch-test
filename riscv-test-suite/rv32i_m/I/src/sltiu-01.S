 
// -----------
// This file was generated by riscv_ctg (https://gitlab.com/incoresemi/riscv-compliance/riscv_ctg)
// version   : 0.1.0
// timestamp : Thu Nov  5 11:18:24 2020 GMT
// usage     : riscv_ctg \
//                  -- cgf /scratch/git-repo/incoresemi/riscv-compliance/riscv_ctg/sample_cgfs/rv32i.cgf \
//                  -- xlen 32 \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the sltiu instruction of the RISC-V I extension for the sltiu covergroup.
// 
#include "compliance_model.h"
#include "compliance_test.h"
RVTEST_ISA("RV32I")

RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*);def TEST_CASE_1=True;",sltiu)

RVTEST_SIGBASE( x9,signature_x9_1)

// rs1 != rd, rs1==x12, rd==x1, rs1_val == imm_val and rs1_val > 0 and imm_val > 0, 
// opcode: sltiu ; op1:x12; dest:x1; op1val:0x0000000d;  immval:13
TEST_IMM_OP( sltiu, x1, x12, 0x0, 0x0000000d, 13, x9, 0, x21)

// rs1 == rd, rs1==x19, rd==x19, rs1_val != imm_val and rs1_val > 0 and imm_val > 0, 
// opcode: sltiu ; op1:x19; dest:x19; op1val:0x00000003;  immval:12
TEST_IMM_OP( sltiu, x19, x19, 0x1, 0x00000003, 12, x9, 4, x21)

// rs1==x20, rd==x5, rs1_val == 0, imm_val == 256
// opcode: sltiu ; op1:x20; dest:x5; op1val:0x00000000;  immval:256
TEST_IMM_OP( sltiu, x5, x20, 0x1, 0x00000000, 256, x9, 8, x21)

// rs1==x29, rd==x23, rs1_val == (2**(xlen)-1), 
// opcode: sltiu ; op1:x29; dest:x23; op1val:0xffffffff;  immval:5
TEST_IMM_OP( sltiu, x23, x29, 0x0, 0xffffffff, 5, x9, 12, x21)

// rs1==x17, rd==x4, rs1_val == 1, 
// opcode: sltiu ; op1:x17; dest:x4; op1val:0x00000001;  immval:7
TEST_IMM_OP( sltiu, x4, x17, 0x1, 0x00000001, 7, x9, 16, x21)

// rs1==x3, rd==x15, imm_val == 0, rs1_val == 4194304
// opcode: sltiu ; op1:x3; dest:x15; op1val:0x00400000;  immval:0
TEST_IMM_OP( sltiu, x15, x3, 0x0, 0x00400000, 0, x9, 20, x21)

// rs1==x25, rd==x8, imm_val == (2**(12)-1), rs1_val == 3758096383
// opcode: sltiu ; op1:x25; dest:x8; op1val:0xdfffffff;  immval:4095
TEST_IMM_OP( sltiu, x8, x25, 0x0, 0xdfffffff, 4095, x9, 24, x21)

// rs1==x8, rd==x24, imm_val == 1, rs1_val == 4294705151
// opcode: sltiu ; op1:x8; dest:x24; op1val:0xfffbffff;  immval:1
TEST_IMM_OP( sltiu, x24, x8, 0x0, 0xfffbffff, 1, x9, 28, x21)

// rs1==x24, rd==x14, rs1_val == 2, imm_val == 4094
// opcode: sltiu ; op1:x24; dest:x14; op1val:0x00000002;  immval:4094
TEST_IMM_OP( sltiu, x14, x24, 0x1, 0x00000002, 4094, x9, 32, x21)

// rs1==x10, rd==x29, rs1_val == 4, 
// opcode: sltiu ; op1:x10; dest:x29; op1val:0x00000004;  immval:1
TEST_IMM_OP( sltiu, x29, x10, 0x0, 0x00000004, 1, x9, 36, x21)

// rs1==x30, rd==x7, rs1_val == 8, imm_val == 64
// opcode: sltiu ; op1:x30; dest:x7; op1val:0x00000008;  immval:64
TEST_IMM_OP( sltiu, x7, x30, 0x1, 0x00000008, 64, x9, 40, x21)

// rs1==x18, rd==x3, rs1_val == 16, 
// opcode: sltiu ; op1:x18; dest:x3; op1val:0x00000010;  immval:11
TEST_IMM_OP( sltiu, x3, x18, 0x0, 0x00000010, 11, x9, 44, x21)

// rs1==x26, rd==x0, rs1_val == 32, 
// opcode: sltiu ; op1:x26; dest:x0; op1val:0x00000020;  immval:9
TEST_IMM_OP( sltiu, x0, x26, 0x0, 0x00000020, 9, x9, 48, x21)

// rs1==x4, rd==x31, rs1_val == 64, imm_val == 16
// opcode: sltiu ; op1:x4; dest:x31; op1val:0x00000040;  immval:16
TEST_IMM_OP( sltiu, x31, x4, 0x0, 0x00000040, 16, x9, 52, x21)

// rs1==x7, rd==x30, rs1_val == 128, imm_val == 3967
// opcode: sltiu ; op1:x7; dest:x30; op1val:0x00000080;  immval:3967
TEST_IMM_OP( sltiu, x30, x7, 0x1, 0x00000080, 3967, x9, 56, x21)

// rs1==x13, rd==x25, rs1_val == 256, imm_val == 4079
// opcode: sltiu ; op1:x13; dest:x25; op1val:0x00000100;  immval:4079
TEST_IMM_OP( sltiu, x25, x13, 0x1, 0x00000100, 4079, x9, 60, x21)

// rs1==x16, rd==x2, rs1_val == 512, 
// opcode: sltiu ; op1:x16; dest:x2; op1val:0x00000200;  immval:9
TEST_IMM_OP( sltiu, x2, x16, 0x0, 0x00000200, 9, x9, 64, x21)

// rs1==x1, rd==x6, rs1_val == 1024, imm_val == 3839
// opcode: sltiu ; op1:x1; dest:x6; op1val:0x00000400;  immval:3839
TEST_IMM_OP( sltiu, x6, x1, 0x1, 0x00000400, 3839, x9, 68, x21)

// rs1==x23, rd==x26, rs1_val == 2048, imm_val == 4093
// opcode: sltiu ; op1:x23; dest:x26; op1val:0x00000800;  immval:4093
TEST_IMM_OP( sltiu, x26, x23, 0x1, 0x00000800, 4093, x9, 72, x21)

// rs1==x14, rd==x27, rs1_val == 4096, 
// opcode: sltiu ; op1:x14; dest:x27; op1val:0x00001000;  immval:6
TEST_IMM_OP( sltiu, x27, x14, 0x0, 0x00001000, 6, x9, 76, x21)

// rs1==x22, rd==x11, rs1_val == 8192, 
// opcode: sltiu ; op1:x22; dest:x11; op1val:0x00002000;  immval:11
TEST_IMM_OP( sltiu, x11, x22, 0x0, 0x00002000, 11, x9, 80, x21)
RVTEST_SIGBASE( x1,signature_x1_0)

// rs1==x21, rd==x28, rs1_val == 16384, 
// opcode: sltiu ; op1:x21; dest:x28; op1val:0x00004000;  immval:18
TEST_IMM_OP( sltiu, x28, x21, 0x0, 0x00004000, 18, x1, 0, x3)

// rs1==x31, rd==x13, rs1_val == 32768, imm_val == 512
// opcode: sltiu ; op1:x31; dest:x13; op1val:0x00008000;  immval:512
TEST_IMM_OP( sltiu, x13, x31, 0x0, 0x00008000, 512, x1, 4, x3)

// rs1==x28, rd==x20, rs1_val == 65536, 
// opcode: sltiu ; op1:x28; dest:x20; op1val:0x00010000;  immval:3967
TEST_IMM_OP( sltiu, x20, x28, 0x0, 0x00010000, 3967, x1, 8, x3)

// rs1==x6, rd==x22, rs1_val == 131072, 
// opcode: sltiu ; op1:x6; dest:x22; op1val:0x00020000;  immval:1
TEST_IMM_OP( sltiu, x22, x6, 0x0, 0x00020000, 1, x1, 12, x3)

// rs1==x15, rd==x17, rs1_val == 262144, imm_val == 2047
// opcode: sltiu ; op1:x15; dest:x17; op1val:0x00040000;  immval:2047
TEST_IMM_OP( sltiu, x17, x15, 0x0, 0x00040000, 2047, x1, 16, x3)

// rs1==x9, rd==x12, rs1_val == 524288, 
// opcode: sltiu ; op1:x9; dest:x12; op1val:0x00080000;  immval:13
TEST_IMM_OP( sltiu, x12, x9, 0x0, 0x00080000, 13, x1, 20, x3)

// rs1==x2, rd==x9, rs1_val == 1048576, imm_val == 2
// opcode: sltiu ; op1:x2; dest:x9; op1val:0x00100000;  immval:2
TEST_IMM_OP( sltiu, x9, x2, 0x0, 0x00100000, 2, x1, 24, x3)

// rs1==x5, rd==x10, rs1_val == 2097152, imm_val == 4091
// opcode: sltiu ; op1:x5; dest:x10; op1val:0x00200000;  immval:4091
TEST_IMM_OP( sltiu, x10, x5, 0x0, 0x00200000, 4091, x1, 28, x3)

// rs1==x0, rd==x21, rs1_val == 8388608, 
// opcode: sltiu ; op1:x0; dest:x21; op1val:0x00800000;  immval:4093
TEST_IMM_OP( sltiu, x21, x0, 0x0, 0x00800000, 4093, x1, 32, x3)

// rs1==x27, rd==x16, rs1_val == 16777216, 
// opcode: sltiu ; op1:x27; dest:x16; op1val:0x01000000;  immval:4093
TEST_IMM_OP( sltiu, x16, x27, 0x0, 0x01000000, 4093, x1, 36, x3)

// rs1==x11, rd==x18, rs1_val == 33554432, imm_val == 3071
// opcode: sltiu ; op1:x11; dest:x18; op1val:0x02000000;  immval:3071
TEST_IMM_OP( sltiu, x18, x11, 0x0, 0x02000000, 3071, x1, 40, x3)

// rs1_val == 67108864, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:0x04000000;  immval:5
TEST_IMM_OP( sltiu, x11, x10, 0x0, 0x04000000, 5, x1, 44, x3)

// rs1_val == 134217728, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:0x08000000;  immval:5
TEST_IMM_OP( sltiu, x11, x10, 0x0, 0x08000000, 5, x1, 48, x3)

// rs1_val == 268435456, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:0x10000000;  immval:64
TEST_IMM_OP( sltiu, x11, x10, 0x0, 0x10000000, 64, x1, 52, x3)

// rs1_val == 536870912, imm_val == 1024
// opcode: sltiu ; op1:x10; dest:x11; op1val:0x20000000;  immval:1024
TEST_IMM_OP( sltiu, x11, x10, 0x0, 0x20000000, 1024, x1, 56, x3)

// rs1_val == 1073741824, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:0x40000000;  immval:16
TEST_IMM_OP( sltiu, x11, x10, 0x0, 0x40000000, 16, x1, 60, x3)

// rs1_val == 2147483648, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:0x80000000;  immval:3967
TEST_IMM_OP( sltiu, x11, x10, 0x0, 0x80000000, 3967, x1, 64, x3)

// rs1_val == 4294967294, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:0xfffffffe;  immval:15
TEST_IMM_OP( sltiu, x11, x10, 0x0, 0xfffffffe, 15, x1, 68, x3)

// rs1_val == 4294967293, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:0xfffffffd;  immval:17
TEST_IMM_OP( sltiu, x11, x10, 0x0, 0xfffffffd, 17, x1, 72, x3)

// rs1_val == 4294967291, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:0xfffffffb;  immval:13
TEST_IMM_OP( sltiu, x11, x10, 0x0, 0xfffffffb, 13, x1, 76, x3)

// rs1_val == 4294967287, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:0xfffffff7;  immval:12
TEST_IMM_OP( sltiu, x11, x10, 0x0, 0xfffffff7, 12, x1, 80, x3)

// rs1_val == 4294967279, imm_val == 2048
// opcode: sltiu ; op1:x10; dest:x11; op1val:0xffffffef;  immval:2048
TEST_IMM_OP( sltiu, x11, x10, 0x0, 0xffffffef, 2048, x1, 84, x3)

// rs1_val == 4294967263, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:0xffffffdf;  immval:2
TEST_IMM_OP( sltiu, x11, x10, 0x0, 0xffffffdf, 2, x1, 88, x3)

// rs1_val == 4294967231, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:0xffffffbf;  immval:2047
TEST_IMM_OP( sltiu, x11, x10, 0x0, 0xffffffbf, 2047, x1, 92, x3)

// rs1_val == 4294967167, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:0xffffff7f;  immval:4079
TEST_IMM_OP( sltiu, x11, x10, 0x0, 0xffffff7f, 4079, x1, 96, x3)

// rs1_val == 4294967039, imm_val == 3583
// opcode: sltiu ; op1:x10; dest:x11; op1val:0xfffffeff;  immval:3583
TEST_IMM_OP( sltiu, x11, x10, 0x0, 0xfffffeff, 3583, x1, 100, x3)

// rs1_val == 4294966783, imm_val == 128
// opcode: sltiu ; op1:x10; dest:x11; op1val:0xfffffdff;  immval:128
TEST_IMM_OP( sltiu, x11, x10, 0x0, 0xfffffdff, 128, x1, 104, x3)

// rs1_val == 4261412863, imm_val == 2730
// opcode: sltiu ; op1:x10; dest:x11; op1val:0xfdffffff;  immval:2730
TEST_IMM_OP( sltiu, x11, x10, 0x0, 0xfdffffff, 2730, x1, 108, x3)

// rs1_val == 4227858431, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:0xfbffffff;  immval:9
TEST_IMM_OP( sltiu, x11, x10, 0x0, 0xfbffffff, 9, x1, 112, x3)

// rs1_val == 4160749567, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:0xf7ffffff;  immval:10
TEST_IMM_OP( sltiu, x11, x10, 0x0, 0xf7ffffff, 10, x1, 116, x3)

// rs1_val == 4026531839, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:0xefffffff;  immval:256
TEST_IMM_OP( sltiu, x11, x10, 0x0, 0xefffffff, 256, x1, 120, x3)

// rs1_val == 3221225471, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:0xbfffffff;  immval:4095
TEST_IMM_OP( sltiu, x11, x10, 0x0, 0xbfffffff, 4095, x1, 124, x3)

// rs1_val == 2147483647, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:0x7fffffff;  immval:16
TEST_IMM_OP( sltiu, x11, x10, 0x0, 0x7fffffff, 16, x1, 128, x3)

// rs1_val == 1431655765, imm_val == 4031
// opcode: sltiu ; op1:x10; dest:x11; op1val:0x55555555;  immval:4031
TEST_IMM_OP( sltiu, x11, x10, 0x0, 0x55555555, 4031, x1, 132, x3)

// rs1_val == 2863311530, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:0xaaaaaaaa;  immval:16
TEST_IMM_OP( sltiu, x11, x10, 0x0, 0xaaaaaaaa, 16, x1, 136, x3)

// imm_val == 4, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:0x00040000;  immval:4
TEST_IMM_OP( sltiu, x11, x10, 0x0, 0x00040000, 4, x1, 140, x3)

// imm_val == 8, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:0x00080000;  immval:8
TEST_IMM_OP( sltiu, x11, x10, 0x0, 0x00080000, 8, x1, 144, x3)

// imm_val == 32, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:0x7fffffff;  immval:32
TEST_IMM_OP( sltiu, x11, x10, 0x0, 0x7fffffff, 32, x1, 148, x3)

// imm_val == 4087, rs1_val == 4294959103
// opcode: sltiu ; op1:x10; dest:x11; op1val:0xffffdfff;  immval:4087
TEST_IMM_OP( sltiu, x11, x10, 0x0, 0xffffdfff, 4087, x1, 152, x3)

// imm_val == 4063, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:0x0000000e;  immval:4063
TEST_IMM_OP( sltiu, x11, x10, 0x1, 0x0000000e, 4063, x1, 156, x3)

// imm_val == 1365, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:0x00002000;  immval:1365
TEST_IMM_OP( sltiu, x11, x10, 0x0, 0x00002000, 1365, x1, 160, x3)

// rs1_val == 4294966271, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:0xfffffbff;  immval:64
TEST_IMM_OP( sltiu, x11, x10, 0x0, 0xfffffbff, 64, x1, 164, x3)

// rs1_val == 4294965247, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:0xfffff7ff;  immval:8
TEST_IMM_OP( sltiu, x11, x10, 0x0, 0xfffff7ff, 8, x1, 168, x3)

// rs1_val == 4294963199, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:0xffffefff;  immval:9
TEST_IMM_OP( sltiu, x11, x10, 0x0, 0xffffefff, 9, x1, 172, x3)

// rs1_val == 4294950911, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:0xffffbfff;  immval:6
TEST_IMM_OP( sltiu, x11, x10, 0x0, 0xffffbfff, 6, x1, 176, x3)

// rs1_val == 4294934527, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:0xffff7fff;  immval:4095
TEST_IMM_OP( sltiu, x11, x10, 0x0, 0xffff7fff, 4095, x1, 180, x3)

// rs1_val == 4294901759, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:0xfffeffff;  immval:10
TEST_IMM_OP( sltiu, x11, x10, 0x0, 0xfffeffff, 10, x1, 184, x3)

// rs1_val == 4294836223, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:0xfffdffff;  immval:4063
TEST_IMM_OP( sltiu, x11, x10, 0x0, 0xfffdffff, 4063, x1, 188, x3)

// rs1_val == 4294443007, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:0xfff7ffff;  immval:4094
TEST_IMM_OP( sltiu, x11, x10, 0x0, 0xfff7ffff, 4094, x1, 192, x3)

// rs1_val == 4293918719, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:0xffefffff;  immval:10
TEST_IMM_OP( sltiu, x11, x10, 0x0, 0xffefffff, 10, x1, 196, x3)

// rs1_val == 4292870143, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:0xffdfffff;  immval:3
TEST_IMM_OP( sltiu, x11, x10, 0x0, 0xffdfffff, 3, x1, 200, x3)

// rs1_val == 4290772991, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:0xffbfffff;  immval:128
TEST_IMM_OP( sltiu, x11, x10, 0x0, 0xffbfffff, 128, x1, 204, x3)

// rs1_val == 4286578687, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:0xff7fffff;  immval:2047
TEST_IMM_OP( sltiu, x11, x10, 0x0, 0xff7fffff, 2047, x1, 208, x3)

// rs1_val == 4278190079, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:0xfeffffff;  immval:512
TEST_IMM_OP( sltiu, x11, x10, 0x0, 0xfeffffff, 512, x1, 212, x3)

// rs1_val == 32, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:0x00000020;  immval:9
TEST_IMM_OP( sltiu, x11, x10, 0x0, 0x00000020, 9, x1, 216, x3)

// rs1_val == 8388608, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:0x00800000;  immval:4093
TEST_IMM_OP( sltiu, x11, x10, 0x0, 0x00800000, 4093, x1, 220, x3)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
.align 4

signature_x9_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x9_1:
    .fill 21*(XLEN/32),4,0xdeadbeef


signature_x1_0:
    .fill 56*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
