 
// -----------
// This file was generated by riscv_ctg (https://gitlab.com/incoresemi/riscv-compliance/riscv_ctg)
// version   : 0.1.0
// timestamp : Fri Nov  6 10:29:11 2020 GMT
// usage     : riscv_ctg \
//                  -- cgf /scratch/git-repo/incoresemi/riscv-compliance/riscv_ctg/sample_cgfs/rv32i.cgf \
//                  -- xlen 32 \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the sltiu instruction of the RISC-V I extension for the sltiu covergroup.
// 
#include "compliance_model.h"
#include "compliance_test.h"
RVTEST_ISA("RV32I")

.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*);def TEST_CASE_1=True;",sltiu)

RVTEST_SIGBASE( x5,signature_x5_1)

inst_0:
// rs1 != rd, rs1==x4, rd==x12, rs1_val == imm_val and rs1_val > 0 and imm_val > 0, 
// opcode: sltiu ; op1:x4; dest:x12; op1val:10;  immval:10
TEST_IMM_OP( sltiu, x12, x4, 0x0, 10, 10, x5, 0, x15)

inst_1:
// rs1 == rd, rs1==x13, rd==x13, rs1_val != imm_val and rs1_val > 0 and imm_val > 0, 
// opcode: sltiu ; op1:x13; dest:x13; op1val:11;  immval:17
TEST_IMM_OP( sltiu, x13, x13, 0x1, 11, 17, x5, 4, x15)

inst_2:
// rs1==x18, rd==x2, rs1_val == 0, imm_val == 32
// opcode: sltiu ; op1:x18; dest:x2; op1val:0;  immval:32
TEST_IMM_OP( sltiu, x2, x18, 0x1, 0, 32, x5, 8, x15)

inst_3:
// rs1==x9, rd==x21, rs1_val == (2**(xlen)-1), 
// opcode: sltiu ; op1:x9; dest:x21; op1val:4294967295;  immval:7
TEST_IMM_OP( sltiu, x21, x9, 0x0, 4294967295, 7, x5, 12, x15)

inst_4:
// rs1==x8, rd==x31, rs1_val == 1, imm_val == 2
// opcode: sltiu ; op1:x8; dest:x31; op1val:1;  immval:2
TEST_IMM_OP( sltiu, x31, x8, 0x1, 1, 2, x5, 16, x15)

inst_5:
// rs1==x23, rd==x10, imm_val == 0, rs1_val == 4294836223
// opcode: sltiu ; op1:x23; dest:x10; op1val:4294836223;  immval:0
TEST_IMM_OP( sltiu, x10, x23, 0x0, 4294836223, 0, x5, 20, x15)

inst_6:
// rs1==x12, rd==x27, imm_val == (2**(12)-1), rs1_val == 4
// opcode: sltiu ; op1:x12; dest:x27; op1val:4;  immval:4095
TEST_IMM_OP( sltiu, x27, x12, 0x1, 4, 4095, x5, 24, x15)

inst_7:
// rs1==x25, rd==x16, imm_val == 1, rs1_val == 2048
// opcode: sltiu ; op1:x25; dest:x16; op1val:2048;  immval:1
TEST_IMM_OP( sltiu, x16, x25, 0x0, 2048, 1, x5, 28, x15)

inst_8:
// rs1==x6, rd==x24, rs1_val == 2, 
// opcode: sltiu ; op1:x6; dest:x24; op1val:2;  immval:9
TEST_IMM_OP( sltiu, x24, x6, 0x1, 2, 9, x5, 32, x15)

inst_9:
// rs1==x29, rd==x1, rs1_val == 8, 
// opcode: sltiu ; op1:x29; dest:x1; op1val:8;  immval:2
TEST_IMM_OP( sltiu, x1, x29, 0x0, 8, 2, x5, 36, x15)

inst_10:
// rs1==x21, rd==x25, rs1_val == 16, imm_val == 64
// opcode: sltiu ; op1:x21; dest:x25; op1val:16;  immval:64
TEST_IMM_OP( sltiu, x25, x21, 0x1, 16, 64, x5, 40, x15)

inst_11:
// rs1==x14, rd==x18, rs1_val == 32, 
// opcode: sltiu ; op1:x14; dest:x18; op1val:32;  immval:32
TEST_IMM_OP( sltiu, x18, x14, 0x0, 32, 32, x5, 44, x15)

inst_12:
// rs1==x3, rd==x20, rs1_val == 64, imm_val == 2048
// opcode: sltiu ; op1:x3; dest:x20; op1val:64;  immval:2048
TEST_IMM_OP( sltiu, x20, x3, 0x1, 64, 2048, x5, 48, x15)

inst_13:
// rs1==x0, rd==x9, rs1_val == 128, imm_val == 3583
// opcode: sltiu ; op1:x0; dest:x9; op1val:128;  immval:3583
TEST_IMM_OP( sltiu, x9, x0, 0x1, 128, 3583, x5, 52, x15)

inst_14:
// rs1==x27, rd==x22, rs1_val == 256, 
// opcode: sltiu ; op1:x27; dest:x22; op1val:256;  immval:11
TEST_IMM_OP( sltiu, x22, x27, 0x0, 256, 11, x5, 56, x15)

inst_15:
// rs1==x7, rd==x29, rs1_val == 512, 
// opcode: sltiu ; op1:x7; dest:x29; op1val:512;  immval:1
TEST_IMM_OP( sltiu, x29, x7, 0x0, 512, 1, x5, 60, x15)

inst_16:
// rs1==x22, rd==x0, rs1_val == 1024, imm_val == 4079
// opcode: sltiu ; op1:x22; dest:x0; op1val:1024;  immval:4079
TEST_IMM_OP( sltiu, x0, x22, 0x1, 1024, 4079, x5, 64, x15)

inst_17:
// rs1==x17, rd==x30, rs1_val == 4096, imm_val == 256
// opcode: sltiu ; op1:x17; dest:x30; op1val:4096;  immval:256
TEST_IMM_OP( sltiu, x30, x17, 0x0, 4096, 256, x5, 68, x15)

inst_18:
// rs1==x30, rd==x7, rs1_val == 8192, 
// opcode: sltiu ; op1:x30; dest:x7; op1val:8192;  immval:14
TEST_IMM_OP( sltiu, x7, x30, 0x0, 8192, 14, x5, 72, x15)

inst_19:
// rs1==x1, rd==x14, rs1_val == 16384, 
// opcode: sltiu ; op1:x1; dest:x14; op1val:16384;  immval:4095
TEST_IMM_OP( sltiu, x14, x1, 0x0, 16384, 4095, x5, 76, x15)

inst_20:
// rs1==x11, rd==x8, rs1_val == 32768, imm_val == 3967
// opcode: sltiu ; op1:x11; dest:x8; op1val:32768;  immval:3967
TEST_IMM_OP( sltiu, x8, x11, 0x0, 32768, 3967, x5, 80, x15)

inst_21:
// rs1==x31, rd==x26, rs1_val == 65536, imm_val == 4094
// opcode: sltiu ; op1:x31; dest:x26; op1val:65536;  immval:4094
TEST_IMM_OP( sltiu, x26, x31, 0x0, 65536, 4094, x5, 84, x15)

inst_22:
// rs1==x15, rd==x28, rs1_val == 131072, imm_val == 4031
// opcode: sltiu ; op1:x15; dest:x28; op1val:131072;  immval:4031
TEST_IMM_OP( sltiu, x28, x15, 0x0, 131072, 4031, x5, 88, x7)
RVTEST_SIGBASE( x1,signature_x1_0)

inst_23:
// rs1==x16, rd==x4, rs1_val == 262144, 
// opcode: sltiu ; op1:x16; dest:x4; op1val:262144;  immval:32
TEST_IMM_OP( sltiu, x4, x16, 0x0, 262144, 32, x1, 0, x7)

inst_24:
// rs1==x26, rd==x11, rs1_val == 524288, imm_val == 4091
// opcode: sltiu ; op1:x26; dest:x11; op1val:524288;  immval:4091
TEST_IMM_OP( sltiu, x11, x26, 0x0, 524288, 4091, x1, 4, x7)

inst_25:
// rs1==x10, rd==x5, rs1_val == 1048576, imm_val == 1024
// opcode: sltiu ; op1:x10; dest:x5; op1val:1048576;  immval:1024
TEST_IMM_OP( sltiu, x5, x10, 0x0, 1048576, 1024, x1, 8, x7)

inst_26:
// rs1==x20, rd==x6, rs1_val == 2097152, 
// opcode: sltiu ; op1:x20; dest:x6; op1val:2097152;  immval:4079
TEST_IMM_OP( sltiu, x6, x20, 0x0, 2097152, 4079, x1, 12, x7)

inst_27:
// rs1==x19, rd==x15, rs1_val == 4194304, imm_val == 4093
// opcode: sltiu ; op1:x19; dest:x15; op1val:4194304;  immval:4093
TEST_IMM_OP( sltiu, x15, x19, 0x0, 4194304, 4093, x1, 16, x7)

inst_28:
// rs1==x24, rd==x23, rs1_val == 8388608, imm_val == 2730
// opcode: sltiu ; op1:x24; dest:x23; op1val:8388608;  immval:2730
TEST_IMM_OP( sltiu, x23, x24, 0x0, 8388608, 2730, x1, 20, x7)

inst_29:
// rs1==x28, rd==x3, rs1_val == 16777216, 
// opcode: sltiu ; op1:x28; dest:x3; op1val:16777216;  immval:12
TEST_IMM_OP( sltiu, x3, x28, 0x0, 16777216, 12, x1, 24, x7)

inst_30:
// rs1==x5, rd==x17, rs1_val == 33554432, 
// opcode: sltiu ; op1:x5; dest:x17; op1val:33554432;  immval:4091
TEST_IMM_OP( sltiu, x17, x5, 0x0, 33554432, 4091, x1, 28, x7)

inst_31:
// rs1==x2, rd==x19, rs1_val == 67108864, 
// opcode: sltiu ; op1:x2; dest:x19; op1val:67108864;  immval:13
TEST_IMM_OP( sltiu, x19, x2, 0x0, 67108864, 13, x1, 32, x7)

inst_32:
// rs1_val == 134217728, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:134217728;  immval:11
TEST_IMM_OP( sltiu, x11, x10, 0x0, 134217728, 11, x1, 36, x7)

inst_33:
// rs1_val == 268435456, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:268435456;  immval:2730
TEST_IMM_OP( sltiu, x11, x10, 0x0, 268435456, 2730, x1, 40, x7)

inst_34:
// rs1_val == 536870912, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:536870912;  immval:3583
TEST_IMM_OP( sltiu, x11, x10, 0x0, 536870912, 3583, x1, 44, x7)

inst_35:
// rs1_val == 1073741824, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:1073741824;  immval:4091
TEST_IMM_OP( sltiu, x11, x10, 0x0, 1073741824, 4091, x1, 48, x7)

inst_36:
// rs1_val == 2147483648, imm_val == 3839
// opcode: sltiu ; op1:x10; dest:x11; op1val:2147483648;  immval:3839
TEST_IMM_OP( sltiu, x11, x10, 0x0, 2147483648, 3839, x1, 52, x7)

inst_37:
// rs1_val == 4294967294, imm_val == 128
// opcode: sltiu ; op1:x10; dest:x11; op1val:4294967294;  immval:128
TEST_IMM_OP( sltiu, x11, x10, 0x0, 4294967294, 128, x1, 56, x7)

inst_38:
// rs1_val == 4294967293, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:4294967293;  immval:17
TEST_IMM_OP( sltiu, x11, x10, 0x0, 4294967293, 17, x1, 60, x7)

inst_39:
// rs1_val == 4294967291, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:4294967291;  immval:4093
TEST_IMM_OP( sltiu, x11, x10, 0x0, 4294967291, 4093, x1, 64, x7)

inst_40:
// rs1_val == 4294967287, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:4294967287;  immval:4091
TEST_IMM_OP( sltiu, x11, x10, 0x0, 4294967287, 4091, x1, 68, x7)

inst_41:
// rs1_val == 4294967279, imm_val == 3071
// opcode: sltiu ; op1:x10; dest:x11; op1val:4294967279;  immval:3071
TEST_IMM_OP( sltiu, x11, x10, 0x0, 4294967279, 3071, x1, 72, x7)

inst_42:
// rs1_val == 4294967263, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:4294967263;  immval:9
TEST_IMM_OP( sltiu, x11, x10, 0x0, 4294967263, 9, x1, 76, x7)

inst_43:
// rs1_val == 4294967231, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:4294967231;  immval:12
TEST_IMM_OP( sltiu, x11, x10, 0x0, 4294967231, 12, x1, 80, x7)

inst_44:
// rs1_val == 4294967167, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:4294967167;  immval:1
TEST_IMM_OP( sltiu, x11, x10, 0x0, 4294967167, 1, x1, 84, x7)

inst_45:
// rs1_val == 4294967039, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:4294967039;  immval:4031
TEST_IMM_OP( sltiu, x11, x10, 0x0, 4294967039, 4031, x1, 88, x7)

inst_46:
// rs1_val == 4294966783, imm_val == 8
// opcode: sltiu ; op1:x10; dest:x11; op1val:4294966783;  immval:8
TEST_IMM_OP( sltiu, x11, x10, 0x0, 4294966783, 8, x1, 92, x7)

inst_47:
// rs1_val == 4261412863, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:4261412863;  immval:3
TEST_IMM_OP( sltiu, x11, x10, 0x0, 4261412863, 3, x1, 96, x7)

inst_48:
// rs1_val == 4227858431, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:4227858431;  immval:2730
TEST_IMM_OP( sltiu, x11, x10, 0x0, 4227858431, 2730, x1, 100, x7)

inst_49:
// rs1_val == 4160749567, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:4160749567;  immval:15
TEST_IMM_OP( sltiu, x11, x10, 0x0, 4160749567, 15, x1, 104, x7)

inst_50:
// rs1_val == 4026531839, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:4026531839;  immval:3583
TEST_IMM_OP( sltiu, x11, x10, 0x0, 4026531839, 3583, x1, 108, x7)

inst_51:
// rs1_val == 3758096383, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:3758096383;  immval:64
TEST_IMM_OP( sltiu, x11, x10, 0x0, 3758096383, 64, x1, 112, x7)

inst_52:
// rs1_val == 3221225471, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:3221225471;  immval:2
TEST_IMM_OP( sltiu, x11, x10, 0x0, 3221225471, 2, x1, 116, x7)

inst_53:
// rs1_val == 2147483647, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:2147483647;  immval:15
TEST_IMM_OP( sltiu, x11, x10, 0x0, 2147483647, 15, x1, 120, x7)

inst_54:
// rs1_val == 1431655765, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:1431655765;  immval:14
TEST_IMM_OP( sltiu, x11, x10, 0x0, 1431655765, 14, x1, 124, x7)

inst_55:
// rs1_val == 2863311530, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:2863311530;  immval:10
TEST_IMM_OP( sltiu, x11, x10, 0x0, 2863311530, 10, x1, 128, x7)

inst_56:
// imm_val == 4, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:4227858431;  immval:4
TEST_IMM_OP( sltiu, x11, x10, 0x0, 4227858431, 4, x1, 132, x7)

inst_57:
// imm_val == 16, rs1_val == 4292870143
// opcode: sltiu ; op1:x10; dest:x11; op1val:4292870143;  immval:16
TEST_IMM_OP( sltiu, x11, x10, 0x0, 4292870143, 16, x1, 136, x7)

inst_58:
// imm_val == 512, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:2097152;  immval:512
TEST_IMM_OP( sltiu, x11, x10, 0x0, 2097152, 512, x1, 140, x7)

inst_59:
// imm_val == 4087, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:1073741824;  immval:4087
TEST_IMM_OP( sltiu, x11, x10, 0x0, 1073741824, 4087, x1, 144, x7)

inst_60:
// imm_val == 4063, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:4227858431;  immval:4063
TEST_IMM_OP( sltiu, x11, x10, 0x0, 4227858431, 4063, x1, 148, x7)

inst_61:
// imm_val == 1365, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:8192;  immval:1365
TEST_IMM_OP( sltiu, x11, x10, 0x0, 8192, 1365, x1, 152, x7)

inst_62:
// rs1_val == 4294966271, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:4294966271;  immval:4031
TEST_IMM_OP( sltiu, x11, x10, 0x0, 4294966271, 4031, x1, 156, x7)

inst_63:
// rs1_val == 4294965247, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:4294965247;  immval:4091
TEST_IMM_OP( sltiu, x11, x10, 0x0, 4294965247, 4091, x1, 160, x7)

inst_64:
// rs1_val == 4294963199, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:4294963199;  immval:64
TEST_IMM_OP( sltiu, x11, x10, 0x0, 4294963199, 64, x1, 164, x7)

inst_65:
// rs1_val == 4278190079, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:4278190079;  immval:17
TEST_IMM_OP( sltiu, x11, x10, 0x0, 4278190079, 17, x1, 168, x7)

inst_66:
// rs1_val == 4294959103, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:4294959103;  immval:2730
TEST_IMM_OP( sltiu, x11, x10, 0x0, 4294959103, 2730, x1, 172, x7)

inst_67:
// rs1_val == 4294950911, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:4294950911;  immval:18
TEST_IMM_OP( sltiu, x11, x10, 0x0, 4294950911, 18, x1, 176, x7)

inst_68:
// rs1_val == 4294934527, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:4294934527;  immval:8
TEST_IMM_OP( sltiu, x11, x10, 0x0, 4294934527, 8, x1, 180, x7)

inst_69:
// rs1_val == 4294901759, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:4294901759;  immval:12
TEST_IMM_OP( sltiu, x11, x10, 0x0, 4294901759, 12, x1, 184, x7)

inst_70:
// rs1_val == 4294705151, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:4294705151;  immval:12
TEST_IMM_OP( sltiu, x11, x10, 0x0, 4294705151, 12, x1, 188, x7)

inst_71:
// rs1_val == 4294443007, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:4294443007;  immval:18
TEST_IMM_OP( sltiu, x11, x10, 0x0, 4294443007, 18, x1, 192, x7)

inst_72:
// rs1_val == 4293918719, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:4293918719;  immval:19
TEST_IMM_OP( sltiu, x11, x10, 0x0, 4293918719, 19, x1, 196, x7)

inst_73:
// rs1_val == 4290772991, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:4290772991;  immval:4094
TEST_IMM_OP( sltiu, x11, x10, 0x0, 4290772991, 4094, x1, 200, x7)

inst_74:
// rs1_val == 4286578687, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:4286578687;  immval:2
TEST_IMM_OP( sltiu, x11, x10, 0x0, 4286578687, 2, x1, 204, x7)

inst_75:
// imm_val == 2047, 
// opcode: sltiu ; op1:x10; dest:x11; op1val:131072;  immval:2047
TEST_IMM_OP( sltiu, x11, x10, 0x0, 131072, 2047, x1, 208, x7)

inst_76:
// rs1_val == 128, imm_val == 3583
// opcode: sltiu ; op1:x10; dest:x11; op1val:128;  immval:3583
TEST_IMM_OP( sltiu, x11, x10, 0x1, 128, 3583, x1, 212, x7)

inst_77:
// rs1_val == 1024, imm_val == 4079
// opcode: sltiu ; op1:x10; dest:x11; op1val:1024;  immval:4079
TEST_IMM_OP( sltiu, x11, x10, 0x1, 1024, 4079, x1, 216, x7)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x5_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x5_1:
    .fill 23*(XLEN/32),4,0xdeadbeef


signature_x1_0:
    .fill 55*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
