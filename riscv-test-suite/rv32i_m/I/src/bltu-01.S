 
// -----------
// This file was generated by riscv_ctg (https://gitlab.com/incoresemi/riscv-compliance/riscv_ctg)
// version   : 0.1.0
// timestamp : Fri Nov  6 10:29:11 2020 GMT
// usage     : riscv_ctg \
//                  -- cgf /scratch/git-repo/incoresemi/riscv-compliance/riscv_ctg/sample_cgfs/rv32i.cgf \
//                  -- xlen 32 \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the bltu instruction of the RISC-V I extension for the bltu covergroup.
// 
#include "compliance_model.h"
#include "compliance_test.h"
RVTEST_ISA("RV32I")

RVMODEL_BOOT
RVTEST_CODE_BEGIN
RVMODEL_TARGET_INIT

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*);def TEST_CASE_1=True;",bltu)

RVTEST_SIGBASE( x13,signature_x13_1)

inst_0:
// rs1 == rs2, rs1==x11, rs2==x11, rs1_val > 0 and rs2_val > 0, rs1_val == 134217728, rs1_val > 0 and rs2_val > 0 and rs1_val > rs2_val and imm_val > 0 , rs2_val == 33554432
// opcode: bltu, op1:x11; op2:x11; op1val:134217728; op2val:33554432; immval:6; align:0
TEST_BRANCH_OP(bltu, x5, x11, x11, 134217728, 33554432, 6, 3f, x13, 0,0)

inst_1:
// rs1 != rs2, rs1==x29, rs2==x1, rs1_val > 0 and rs2_val > 0 and rs1_val == rs2_val and imm_val > 0, rs1_val == 1048576, rs2_val == 1048576
// opcode: bltu, op1:x29; op2:x1; op1val:1048576; op2val:1048576; immval:6; align:0
TEST_BRANCH_OP(bltu, x5, x29, x1, 1048576, 1048576, 6, 3f, x13, 4,0)

inst_2:
// rs1==x3, rs2==x31, rs1_val > 0 and rs2_val > 0 and rs1_val == rs2_val and imm_val < 0, rs1_val == 3221225471, rs2_val == 3221225471
// opcode: bltu, op1:x3; op2:x31; op1val:3221225471; op2val:3221225471; immval:1024; align:0
TEST_BRANCH_OP(bltu, x5, x3, x31, 3221225471, 3221225471, 1024, 1b, x13, 8,0)

inst_3:
// rs1==x20, rs2==x9, rs1_val > 0 and rs2_val > 0 and rs1_val > rs2_val and imm_val < 0 , 
// opcode: bltu, op1:x20; op2:x9; op1val:14; op2val:13; immval:2; align:0
TEST_BRANCH_OP(bltu, x5, x20, x9, 14, 13, 2, 1b, x13, 12,0)

inst_4:
// rs1==x31, rs2==x17, rs1_val > 0 and rs2_val > 0 and rs1_val < rs2_val and imm_val > 0 , rs1_val == 4227858431, rs2_val == 4294967293
// opcode: bltu, op1:x31; op2:x17; op1val:4227858431; op2val:4294967293; immval:32; align:0
TEST_BRANCH_OP(bltu, x5, x31, x17, 4227858431, 4294967293, 32, 3f, x13, 16,0)

inst_5:
// rs1==x14, rs2==x20, rs1_val > 0 and rs2_val > 0 and rs1_val < rs2_val and imm_val < 0 , 
// opcode: bltu, op1:x14; op2:x20; op1val:15; op2val:1048576; immval:2; align:0
TEST_BRANCH_OP(bltu, x5, x14, x20, 15, 1048576, 2, 1b, x13, 20,0)

inst_6:
// rs1==x4, rs2==x18, rs1_val == 1, 
// opcode: bltu, op1:x4; op2:x18; op1val:1; op2val:4294967293; immval:2; align:0
TEST_BRANCH_OP(bltu, x5, x4, x18, 1, 4294967293, 2, 3f, x13, 24,0)

inst_7:
// rs1==x26, rs2==x4, rs1_val == 2, rs2_val == 512
// opcode: bltu, op1:x26; op2:x4; op1val:2; op2val:512; immval:16; align:0
TEST_BRANCH_OP(bltu, x5, x26, x4, 2, 512, 16, 3f, x13, 28,0)

inst_8:
// rs1==x23, rs2==x29, rs1_val == 4, 
// opcode: bltu, op1:x23; op2:x29; op1val:4; op2val:10; immval:128; align:0
TEST_BRANCH_OP(bltu, x5, x23, x29, 4, 10, 128, 3f, x13, 32,0)

inst_9:
// rs1==x15, rs2==x10, rs1_val == 8, 
// opcode: bltu, op1:x15; op2:x10; op1val:8; op2val:19; immval:4; align:0
TEST_BRANCH_OP(bltu, x5, x15, x10, 8, 19, 4, 1b, x13, 36,0)

inst_10:
// rs1==x16, rs2==x25, rs1_val == 16, 
// opcode: bltu, op1:x16; op2:x25; op1val:16; op2val:12; immval:4; align:0
TEST_BRANCH_OP(bltu, x5, x16, x25, 16, 12, 4, 3f, x13, 40,0)

inst_11:
// rs1==x2, rs2==x6, rs1_val == 32, 
// opcode: bltu, op1:x2; op2:x6; op1val:32; op2val:11; immval:2; align:0
TEST_BRANCH_OP(bltu, x5, x2, x6, 32, 11, 2, 1b, x13, 44,0)

inst_12:
// rs1==x19, rs2==x26, rs1_val == 64, 
// opcode: bltu, op1:x19; op2:x26; op1val:64; op2val:4294967295; immval:6; align:0
TEST_BRANCH_OP(bltu, x5, x19, x26, 64, 4294967295, 6, 1b, x13, 48,0)

inst_13:
// rs1==x17, rs2==x3, rs1_val == 128, 
// opcode: bltu, op1:x17; op2:x3; op1val:128; op2val:33554432; immval:6; align:0
TEST_BRANCH_OP(bltu, x5, x17, x3, 128, 33554432, 6, 1b, x13, 52,0)

inst_14:
// rs1==x25, rs2==x2, rs1_val == 256, rs2_val == 4294967279
// opcode: bltu, op1:x25; op2:x2; op1val:256; op2val:4294967279; immval:2; align:0
TEST_BRANCH_OP(bltu, x5, x25, x2, 256, 4294967279, 2, 1b, x13, 56,0)

inst_15:
// rs1==x7, rs2==x0, rs1_val == 512, 
// opcode: bltu, op1:x7; op2:x0; op1val:512; op2val:4294967293; immval:4; align:0
TEST_BRANCH_OP(bltu, x5, x7, x0, 512, 4294967293, 4, 1b, x13, 60,0)

inst_16:
// rs1==x9, rs2==x14, rs1_val == 1024, 
// opcode: bltu, op1:x9; op2:x14; op1val:1024; op2val:7; immval:1024; align:0
TEST_BRANCH_OP(bltu, x5, x9, x14, 1024, 7, 1024, 3f, x13, 64,0)

inst_17:
// rs1==x30, rs2==x19, rs1_val == 2048, rs2_val == 1024
// opcode: bltu, op1:x30; op2:x19; op1val:2048; op2val:1024; immval:2; align:0
TEST_BRANCH_OP(bltu, x5, x30, x19, 2048, 1024, 2, 3f, x13, 68,0)

inst_18:
// rs1==x28, rs2==x23, rs1_val == 4096, rs2_val == 16777216
// opcode: bltu, op1:x28; op2:x23; op1val:4096; op2val:16777216; immval:32; align:0
TEST_BRANCH_OP(bltu, x5, x28, x23, 4096, 16777216, 32, 3f, x13, 72,0)

inst_19:
// rs1==x12, rs2==x24, rs1_val == 8192, 
// opcode: bltu, op1:x12; op2:x24; op1val:8192; op2val:11; immval:0; align:0
TEST_BRANCH_OP(bltu, x5, x12, x24, 8192, 11, 0, 1b, x13, 76,0)

inst_20:
// rs1==x24, rs2==x21, rs1_val == 16384, 
// opcode: bltu, op1:x24; op2:x21; op1val:16384; op2val:4294967295; immval:1024; align:0
TEST_BRANCH_OP(bltu, x5, x24, x21, 16384, 4294967295, 1024, 3f, x13, 80,0)

inst_21:
// rs1==x8, rs2==x30, rs1_val == 32768, rs2_val == 4294967294
// opcode: bltu, op1:x8; op2:x30; op1val:32768; op2val:4294967294; immval:10; align:0
TEST_BRANCH_OP(bltu, x5, x8, x30, 32768, 4294967294, 10, 1b, x13, 84,0)

inst_22:
// rs1==x6, rs2==x7, rs1_val == 65536, rs2_val == 2048
// opcode: bltu, op1:x6; op2:x7; op1val:65536; op2val:2048; immval:0; align:0
TEST_BRANCH_OP(bltu, x3, x6, x7, 65536, 2048, 0, 1b, x13, 88,0)

inst_23:
// rs1==x10, rs2==x28, rs1_val == 131072, rs2_val == 4286578687
// opcode: bltu, op1:x10; op2:x28; op1val:131072; op2val:4286578687; immval:512; align:0
TEST_BRANCH_OP(bltu, x3, x10, x28, 131072, 4286578687, 512, 3f, x13, 92,0)

inst_24:
// rs1==x5, rs2==x16, rs1_val == 262144, 
// opcode: bltu, op1:x5; op2:x16; op1val:262144; op2val:17; immval:2; align:0
TEST_BRANCH_OP(bltu, x3, x5, x16, 262144, 17, 2, 3f, x13, 96,0)
RVTEST_SIGBASE( x2,signature_x2_0)

inst_25:
// rs1==x27, rs2==x8, rs1_val == 524288, rs2_val == 4294443007
// opcode: bltu, op1:x27; op2:x8; op1val:524288; op2val:4294443007; immval:0; align:0
TEST_BRANCH_OP(bltu, x3, x27, x8, 524288, 4294443007, 0, 1b, x2, 0,0)

inst_26:
// rs1==x22, rs2==x12, rs1_val == 2097152, rs2_val == 4294934527
// opcode: bltu, op1:x22; op2:x12; op1val:2097152; op2val:4294934527; immval:1024; align:0
TEST_BRANCH_OP(bltu, x3, x22, x12, 2097152, 4294934527, 1024, 1b, x2, 4,0)

inst_27:
// rs1==x1, rs2==x5, rs1_val == 4194304, rs2_val == 4290772991
// opcode: bltu, op1:x1; op2:x5; op1val:4194304; op2val:4290772991; immval:64; align:0
TEST_BRANCH_OP(bltu, x3, x1, x5, 4194304, 4290772991, 64, 3f, x2, 8,0)

inst_28:
// rs1==x21, rs2==x13, rs1_val == 8388608, 
// opcode: bltu, op1:x21; op2:x13; op1val:8388608; op2val:4294967279; immval:1024; align:0
TEST_BRANCH_OP(bltu, x3, x21, x13, 8388608, 4294967279, 1024, 3f, x2, 12,0)

inst_29:
// rs1==x0, rs2==x27, rs1_val == 16777216, 
// opcode: bltu, op1:x0; op2:x27; op1val:16777216; op2val:0; immval:0; align:0
TEST_BRANCH_OP(bltu, x3, x0, x27, 16777216, 0, 0, 1b, x2, 16,0)

inst_30:
// rs1==x18, rs2==x15, rs1_val == 33554432, 
// opcode: bltu, op1:x18; op2:x15; op1val:33554432; op2val:17; immval:16; align:0
TEST_BRANCH_OP(bltu, x3, x18, x15, 33554432, 17, 16, 3f, x2, 20,0)

inst_31:
// rs1==x13, rs2==x22, rs1_val == 67108864, rs2_val == 4293918719
// opcode: bltu, op1:x13; op2:x22; op1val:67108864; op2val:4293918719; immval:1366; align:0
TEST_BRANCH_OP(bltu, x3, x13, x22, 67108864, 4293918719, 1366, 1b, x2, 24,0)

inst_32:
// rs1_val == 268435456, rs2_val == 8
// opcode: bltu, op1:x10; op2:x11; op1val:268435456; op2val:8; immval:4; align:0
TEST_BRANCH_OP(bltu, x3, x10, x11, 268435456, 8, 4, 3f, x2, 28,0)

inst_33:
// rs1_val == 536870912, 
// opcode: bltu, op1:x10; op2:x11; op1val:536870912; op2val:8; immval:512; align:0
TEST_BRANCH_OP(bltu, x3, x10, x11, 536870912, 8, 512, 3f, x2, 32,0)

inst_34:
// rs1_val == 1073741824, rs2_val == 128
// opcode: bltu, op1:x10; op2:x11; op1val:1073741824; op2val:128; immval:4; align:0
TEST_BRANCH_OP(bltu, x3, x10, x11, 1073741824, 128, 4, 1b, x2, 36,0)

inst_35:
// rs1_val == 2147483648, 
// opcode: bltu, op1:x10; op2:x11; op1val:2147483648; op2val:11; immval:4; align:0
TEST_BRANCH_OP(bltu, x3, x10, x11, 2147483648, 11, 4, 3f, x2, 40,0)

inst_36:
// rs1_val == 4294967294, rs2_val == 1
// opcode: bltu, op1:x10; op2:x11; op1val:4294967294; op2val:1; immval:2; align:0
TEST_BRANCH_OP(bltu, x3, x10, x11, 4294967294, 1, 2, 1b, x2, 44,0)

inst_37:
// rs1_val == 4294967293, rs2_val == 64
// opcode: bltu, op1:x10; op2:x11; op1val:4294967293; op2val:64; immval:8; align:0
TEST_BRANCH_OP(bltu, x3, x10, x11, 4294967293, 64, 8, 3f, x2, 48,0)

inst_38:
// rs1_val == 4294967291, 
// opcode: bltu, op1:x10; op2:x11; op1val:4294967291; op2val:4294967295; immval:128; align:0
TEST_BRANCH_OP(bltu, x3, x10, x11, 4294967291, 4294967295, 128, 3f, x2, 52,0)

inst_39:
// rs1_val == 4294967287, 
// opcode: bltu, op1:x10; op2:x11; op1val:4294967287; op2val:4294934527; immval:64; align:0
TEST_BRANCH_OP(bltu, x3, x10, x11, 4294967287, 4294934527, 64, 3f, x2, 56,0)

inst_40:
// rs1_val == 4294967279, 
// opcode: bltu, op1:x10; op2:x11; op1val:4294967279; op2val:3; immval:1024; align:0
TEST_BRANCH_OP(bltu, x3, x10, x11, 4294967279, 3, 1024, 1b, x2, 60,0)

inst_41:
// rs1_val == 4294967263, 
// opcode: bltu, op1:x10; op2:x11; op1val:4294967263; op2val:18; immval:4; align:0
TEST_BRANCH_OP(bltu, x3, x10, x11, 4294967263, 18, 4, 3f, x2, 64,0)

inst_42:
// rs1_val == 4294967231, 
// opcode: bltu, op1:x10; op2:x11; op1val:4294967231; op2val:1024; immval:4; align:0
TEST_BRANCH_OP(bltu, x3, x10, x11, 4294967231, 1024, 4, 1b, x2, 68,0)

inst_43:
// rs1_val == 4294967167, 
// opcode: bltu, op1:x10; op2:x11; op1val:4294967167; op2val:12; immval:64; align:0
TEST_BRANCH_OP(bltu, x3, x10, x11, 4294967167, 12, 64, 3f, x2, 72,0)

inst_44:
// rs1_val == 4294967039, rs2_val == 32
// opcode: bltu, op1:x10; op2:x11; op1val:4294967039; op2val:32; immval:64; align:0
TEST_BRANCH_OP(bltu, x3, x10, x11, 4294967039, 32, 64, 3f, x2, 76,0)

inst_45:
// rs1_val == 4294966783, rs2_val == 4294966783
// opcode: bltu, op1:x10; op2:x11; op1val:4294966783; op2val:4294966783; immval:1024; align:0
TEST_BRANCH_OP(bltu, x3, x10, x11, 4294966783, 4294966783, 1024, 3f, x2, 80,0)

inst_46:
// rs1_val == 4294966271, rs2_val == 16
// opcode: bltu, op1:x10; op2:x11; op1val:4294966271; op2val:16; immval:2; align:0
TEST_BRANCH_OP(bltu, x3, x10, x11, 4294966271, 16, 2, 3f, x2, 84,0)

inst_47:
// rs1_val == 4294965247, 
// opcode: bltu, op1:x10; op2:x11; op1val:4294965247; op2val:33554432; immval:1024; align:0
TEST_BRANCH_OP(bltu, x3, x10, x11, 4294965247, 33554432, 1024, 1b, x2, 88,0)

inst_48:
// rs1_val == 4294963199, 
// opcode: bltu, op1:x10; op2:x11; op1val:4294963199; op2val:4286578687; immval:32; align:0
TEST_BRANCH_OP(bltu, x3, x10, x11, 4294963199, 4286578687, 32, 3f, x2, 92,0)

inst_49:
// rs2_val == 4278190079, 
// opcode: bltu, op1:x10; op2:x11; op1val:2147483648; op2val:4278190079; immval:512; align:0
TEST_BRANCH_OP(bltu, x3, x10, x11, 2147483648, 4278190079, 512, 3f, x2, 96,0)

inst_50:
// rs2_val == 4261412863, 
// opcode: bltu, op1:x10; op2:x11; op1val:4294967293; op2val:4261412863; immval:6; align:0
TEST_BRANCH_OP(bltu, x3, x10, x11, 4294967293, 4261412863, 6, 1b, x2, 100,0)

inst_51:
// rs2_val == 4227858431, 
// opcode: bltu, op1:x10; op2:x11; op1val:8192; op2val:4227858431; immval:4; align:0
TEST_BRANCH_OP(bltu, x3, x10, x11, 8192, 4227858431, 4, 3f, x2, 104,0)

inst_52:
// rs2_val == 4160749567, 
// opcode: bltu, op1:x10; op2:x11; op1val:0; op2val:4160749567; immval:0; align:0
TEST_BRANCH_OP(bltu, x3, x10, x11, 0, 4160749567, 0, 1b, x2, 108,0)

inst_53:
// rs2_val == 4026531839, 
// opcode: bltu, op1:x10; op2:x11; op1val:4294966783; op2val:4026531839; immval:8; align:0
TEST_BRANCH_OP(bltu, x3, x10, x11, 4294966783, 4026531839, 8, 1b, x2, 112,0)

inst_54:
// rs2_val == 3758096383, 
// opcode: bltu, op1:x10; op2:x11; op1val:16777216; op2val:3758096383; immval:2; align:0
TEST_BRANCH_OP(bltu, x3, x10, x11, 16777216, 3758096383, 2, 1b, x2, 116,0)

inst_55:
// rs2_val == 2147483647, 
// opcode: bltu, op1:x10; op2:x11; op1val:256; op2val:2147483647; immval:512; align:0
TEST_BRANCH_OP(bltu, x3, x10, x11, 256, 2147483647, 512, 3f, x2, 120,0)

inst_56:
// rs2_val == 1431655765, 
// opcode: bltu, op1:x10; op2:x11; op1val:131072; op2val:1431655765; immval:0; align:0
TEST_BRANCH_OP(bltu, x3, x10, x11, 131072, 1431655765, 0, 3f, x2, 124,0)

inst_57:
// rs2_val == 2863311530, 
// opcode: bltu, op1:x10; op2:x11; op1val:67108864; op2val:2863311530; immval:8; align:0
TEST_BRANCH_OP(bltu, x3, x10, x11, 67108864, 2863311530, 8, 3f, x2, 128,0)

inst_58:
// rs1_val == 4294959103, rs2_val == 4294967263
// opcode: bltu, op1:x10; op2:x11; op1val:4294959103; op2val:4294967263; immval:64; align:0
TEST_BRANCH_OP(bltu, x3, x10, x11, 4294959103, 4294967263, 64, 3f, x2, 132,0)

inst_59:
// rs1_val == 4294950911, 
// opcode: bltu, op1:x10; op2:x11; op1val:4294950911; op2val:4160749567; immval:0; align:0
TEST_BRANCH_OP(bltu, x3, x10, x11, 4294950911, 4160749567, 0, 3f, x2, 136,0)

inst_60:
// rs1_val == 4294934527, 
// opcode: bltu, op1:x10; op2:x11; op1val:4294934527; op2val:10; immval:8; align:0
TEST_BRANCH_OP(bltu, x3, x10, x11, 4294934527, 10, 8, 3f, x2, 140,0)

inst_61:
// rs1_val == 4294901759, 
// opcode: bltu, op1:x10; op2:x11; op1val:4294901759; op2val:1; immval:1024; align:0
TEST_BRANCH_OP(bltu, x3, x10, x11, 4294901759, 1, 1024, 1b, x2, 144,0)

inst_62:
// rs1_val == 4294836223, 
// opcode: bltu, op1:x10; op2:x11; op1val:4294836223; op2val:17; immval:1024; align:0
TEST_BRANCH_OP(bltu, x3, x10, x11, 4294836223, 17, 1024, 3f, x2, 148,0)

inst_63:
// rs1_val == 4294705151, 
// opcode: bltu, op1:x10; op2:x11; op1val:4294705151; op2val:16; immval:4; align:0
TEST_BRANCH_OP(bltu, x3, x10, x11, 4294705151, 16, 4, 1b, x2, 152,0)

inst_64:
// rs1_val == 4294443007, rs2_val == 2147483648
// opcode: bltu, op1:x10; op2:x11; op1val:4294443007; op2val:2147483648; immval:4; align:0
TEST_BRANCH_OP(bltu, x3, x10, x11, 4294443007, 2147483648, 4, 3f, x2, 156,0)

inst_65:
// rs1_val == 4293918719, 
// opcode: bltu, op1:x10; op2:x11; op1val:4293918719; op2val:13; immval:4; align:0
TEST_BRANCH_OP(bltu, x3, x10, x11, 4293918719, 13, 4, 3f, x2, 160,0)

inst_66:
// rs1_val == 4292870143, 
// opcode: bltu, op1:x10; op2:x11; op1val:4292870143; op2val:32; immval:8; align:0
TEST_BRANCH_OP(bltu, x3, x10, x11, 4292870143, 32, 8, 3f, x2, 164,0)

inst_67:
// rs1_val == 4290772991, 
// opcode: bltu, op1:x10; op2:x11; op1val:4290772991; op2val:4278190079; immval:512; align:0
TEST_BRANCH_OP(bltu, x3, x10, x11, 4290772991, 4278190079, 512, 3f, x2, 168,0)

inst_68:
// rs1_val == 4286578687, 
// opcode: bltu, op1:x10; op2:x11; op1val:4286578687; op2val:4294967295; immval:32; align:0
TEST_BRANCH_OP(bltu, x3, x10, x11, 4286578687, 4294967295, 32, 3f, x2, 172,0)

inst_69:
// rs1_val == 4278190079, 
// opcode: bltu, op1:x10; op2:x11; op1val:4278190079; op2val:4294966783; immval:16; align:0
TEST_BRANCH_OP(bltu, x3, x10, x11, 4278190079, 4294966783, 16, 3f, x2, 176,0)

inst_70:
// rs1_val == 4261412863, rs2_val == 4294967291
// opcode: bltu, op1:x10; op2:x11; op1val:4261412863; op2val:4294967291; immval:4; align:0
TEST_BRANCH_OP(bltu, x3, x10, x11, 4261412863, 4294967291, 4, 1b, x2, 180,0)

inst_71:
// rs1_val == 4160749567, 
// opcode: bltu, op1:x10; op2:x11; op1val:4160749567; op2val:4294967294; immval:512; align:0
TEST_BRANCH_OP(bltu, x3, x10, x11, 4160749567, 4294967294, 512, 3f, x2, 184,0)

inst_72:
// rs1_val == 4026531839, rs2_val == 4294901759
// opcode: bltu, op1:x10; op2:x11; op1val:4026531839; op2val:4294901759; immval:0; align:0
TEST_BRANCH_OP(bltu, x3, x10, x11, 4026531839, 4294901759, 0, 3f, x2, 188,0)

inst_73:
// rs1_val == 3758096383, 
// opcode: bltu, op1:x10; op2:x11; op1val:3758096383; op2val:16777216; immval:16; align:0
TEST_BRANCH_OP(bltu, x3, x10, x11, 3758096383, 16777216, 16, 3f, x2, 192,0)

inst_74:
// rs1_val == 2147483647, 
// opcode: bltu, op1:x10; op2:x11; op1val:2147483647; op2val:17; immval:0; align:0
TEST_BRANCH_OP(bltu, x3, x10, x11, 2147483647, 17, 0, 3f, x2, 196,0)

inst_75:
// rs1_val == 1431655765, 
// opcode: bltu, op1:x10; op2:x11; op1val:1431655765; op2val:1048576; immval:512; align:0
TEST_BRANCH_OP(bltu, x3, x10, x11, 1431655765, 1048576, 512, 3f, x2, 200,0)

inst_76:
// rs1_val == 2863311530, 
// opcode: bltu, op1:x10; op2:x11; op1val:2863311530; op2val:15; immval:2; align:0
TEST_BRANCH_OP(bltu, x3, x10, x11, 2863311530, 15, 2, 3f, x2, 204,0)

inst_77:
// rs2_val == 2, 
// opcode: bltu, op1:x10; op2:x11; op1val:4294967287; op2val:2; immval:1024; align:0
TEST_BRANCH_OP(bltu, x3, x10, x11, 4294967287, 2, 1024, 1b, x2, 208,0)

inst_78:
// rs2_val == 4, 
// opcode: bltu, op1:x10; op2:x11; op1val:4294966271; op2val:4; immval:128; align:0
TEST_BRANCH_OP(bltu, x3, x10, x11, 4294966271, 4, 128, 3f, x2, 212,0)

inst_79:
// rs2_val == 256, 
// opcode: bltu, op1:x10; op2:x11; op1val:4292870143; op2val:256; immval:16; align:0
TEST_BRANCH_OP(bltu, x3, x10, x11, 4292870143, 256, 16, 3f, x2, 216,0)

inst_80:
// rs2_val == 4096, 
// opcode: bltu, op1:x10; op2:x11; op1val:256; op2val:4096; immval:1024; align:0
TEST_BRANCH_OP(bltu, x3, x10, x11, 256, 4096, 1024, 3f, x2, 220,0)

inst_81:
// rs2_val == 8192, 
// opcode: bltu, op1:x10; op2:x11; op1val:4294836223; op2val:8192; immval:6; align:0
TEST_BRANCH_OP(bltu, x3, x10, x11, 4294836223, 8192, 6, 3f, x2, 224,0)

inst_82:
// rs2_val == 16384, 
// opcode: bltu, op1:x10; op2:x11; op1val:3758096383; op2val:16384; immval:8; align:0
TEST_BRANCH_OP(bltu, x3, x10, x11, 3758096383, 16384, 8, 3f, x2, 228,0)

inst_83:
// rs2_val == 32768, 
// opcode: bltu, op1:x10; op2:x11; op1val:4294967294; op2val:32768; immval:2; align:0
TEST_BRANCH_OP(bltu, x3, x10, x11, 4294967294, 32768, 2, 3f, x2, 232,0)

inst_84:
// rs2_val == 65536, 
// opcode: bltu, op1:x10; op2:x11; op1val:4294965247; op2val:65536; immval:512; align:0
TEST_BRANCH_OP(bltu, x3, x10, x11, 4294965247, 65536, 512, 3f, x2, 236,0)

inst_85:
// rs2_val == 131072, 
// opcode: bltu, op1:x10; op2:x11; op1val:7; op2val:131072; immval:4; align:0
TEST_BRANCH_OP(bltu, x3, x10, x11, 7, 131072, 4, 1b, x2, 240,0)

inst_86:
// rs2_val == 262144, 
// opcode: bltu, op1:x10; op2:x11; op1val:4294959103; op2val:262144; immval:6; align:0
TEST_BRANCH_OP(bltu, x3, x10, x11, 4294959103, 262144, 6, 1b, x2, 244,0)

inst_87:
// rs2_val == 524288, 
// opcode: bltu, op1:x10; op2:x11; op1val:4; op2val:524288; immval:10; align:0
TEST_BRANCH_OP(bltu, x3, x10, x11, 4, 524288, 10, 1b, x2, 248,0)

inst_88:
// rs2_val == 2097152, 
// opcode: bltu, op1:x10; op2:x11; op1val:0; op2val:2097152; immval:128; align:0
TEST_BRANCH_OP(bltu, x3, x10, x11, 0, 2097152, 128, 3f, x2, 252,0)

inst_89:
// rs2_val == 4194304, 
// opcode: bltu, op1:x10; op2:x11; op1val:2048; op2val:4194304; immval:64; align:0
TEST_BRANCH_OP(bltu, x3, x10, x11, 2048, 4194304, 64, 3f, x2, 256,0)

inst_90:
// rs2_val == 8388608, 
// opcode: bltu, op1:x10; op2:x11; op1val:2147483647; op2val:8388608; immval:8; align:0
TEST_BRANCH_OP(bltu, x3, x10, x11, 2147483647, 8388608, 8, 3f, x2, 260,0)

inst_91:
// rs2_val == 67108864, 
// opcode: bltu, op1:x10; op2:x11; op1val:134217728; op2val:67108864; immval:16; align:0
TEST_BRANCH_OP(bltu, x3, x10, x11, 134217728, 67108864, 16, 3f, x2, 264,0)

inst_92:
// rs2_val == 134217728, 
// opcode: bltu, op1:x10; op2:x11; op1val:2; op2val:134217728; immval:64; align:0
TEST_BRANCH_OP(bltu, x3, x10, x11, 2, 134217728, 64, 3f, x2, 268,0)

inst_93:
// rs2_val == 268435456, 
// opcode: bltu, op1:x10; op2:x11; op1val:4294836223; op2val:268435456; immval:10; align:0
TEST_BRANCH_OP(bltu, x3, x10, x11, 4294836223, 268435456, 10, 1b, x2, 272,0)

inst_94:
// rs2_val == 536870912, 
// opcode: bltu, op1:x10; op2:x11; op1val:4294443007; op2val:536870912; immval:1024; align:0
TEST_BRANCH_OP(bltu, x3, x10, x11, 4294443007, 536870912, 1024, 3f, x2, 276,0)

inst_95:
// rs2_val == 1073741824, 
// opcode: bltu, op1:x10; op2:x11; op1val:1; op2val:1073741824; immval:512; align:0
TEST_BRANCH_OP(bltu, x3, x10, x11, 1, 1073741824, 512, 3f, x2, 280,0)

inst_96:
// rs2_val == 4294967287, 
// opcode: bltu, op1:x10; op2:x11; op1val:1073741824; op2val:4294967287; immval:8; align:0
TEST_BRANCH_OP(bltu, x3, x10, x11, 1073741824, 4294967287, 8, 3f, x2, 284,0)

inst_97:
// rs2_val == 4294967231, 
// opcode: bltu, op1:x10; op2:x11; op1val:67108864; op2val:4294967231; immval:2; align:0
TEST_BRANCH_OP(bltu, x3, x10, x11, 67108864, 4294967231, 2, 1b, x2, 288,0)

inst_98:
// rs2_val == 4294967167, 
// opcode: bltu, op1:x10; op2:x11; op1val:4294836223; op2val:4294967167; immval:1024; align:0
TEST_BRANCH_OP(bltu, x3, x10, x11, 4294836223, 4294967167, 1024, 3f, x2, 292,0)

inst_99:
// rs2_val == 4294967039, 
// opcode: bltu, op1:x10; op2:x11; op1val:4294836223; op2val:4294967039; immval:2; align:0
TEST_BRANCH_OP(bltu, x3, x10, x11, 4294836223, 4294967039, 2, 1b, x2, 296,0)

inst_100:
// rs2_val == 4294966271, 
// opcode: bltu, op1:x10; op2:x11; op1val:4294967039; op2val:4294966271; immval:6; align:0
TEST_BRANCH_OP(bltu, x3, x10, x11, 4294967039, 4294966271, 6, 1b, x2, 300,0)

inst_101:
// rs2_val == 4294965247, 
// opcode: bltu, op1:x10; op2:x11; op1val:4294967294; op2val:4294965247; immval:64; align:0
TEST_BRANCH_OP(bltu, x3, x10, x11, 4294967294, 4294965247, 64, 3f, x2, 304,0)

inst_102:
// rs2_val == 4294963199, 
// opcode: bltu, op1:x10; op2:x11; op1val:4294967293; op2val:4294963199; immval:1024; align:0
TEST_BRANCH_OP(bltu, x3, x10, x11, 4294967293, 4294963199, 1024, 3f, x2, 308,0)

inst_103:
// rs2_val == 4294959103, 
// opcode: bltu, op1:x10; op2:x11; op1val:64; op2val:4294959103; immval:0; align:0
TEST_BRANCH_OP(bltu, x3, x10, x11, 64, 4294959103, 0, 1b, x2, 312,0)

inst_104:
// rs2_val == 4294836223, 
// opcode: bltu, op1:x10; op2:x11; op1val:4294966271; op2val:4294836223; immval:8; align:0
TEST_BRANCH_OP(bltu, x3, x10, x11, 4294966271, 4294836223, 8, 1b, x2, 316,0)

inst_105:
// rs2_val == 4294705151, 
// opcode: bltu, op1:x10; op2:x11; op1val:19; op2val:4294705151; immval:1366; align:0
TEST_BRANCH_OP(bltu, x3, x10, x11, 19, 4294705151, 1366, 1b, x2, 320,0)

inst_106:
// rs2_val == 4292870143, 
// opcode: bltu, op1:x10; op2:x11; op1val:4294963199; op2val:4292870143; immval:1024; align:0
TEST_BRANCH_OP(bltu, x3, x10, x11, 4294963199, 4292870143, 1024, 1b, x2, 324,0)

inst_107:
// rs2_val == 4294950911, 
// opcode: bltu, op1:x10; op2:x11; op1val:15; op2val:4294950911; immval:8; align:0
TEST_BRANCH_OP(bltu, x3, x10, x11, 15, 4294950911, 8, 3f, x2, 328,0)

inst_108:
// rs1_val == 512, 
// opcode: bltu, op1:x10; op2:x11; op1val:512; op2val:4294967293; immval:4; align:0
TEST_BRANCH_OP(bltu, x3, x10, x11, 512, 4294967293, 4, 1b, x2, 332,0)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x13_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x13_1:
    .fill 25*(XLEN/32),4,0xdeadbeef


signature_x2_0:
    .fill 84*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
