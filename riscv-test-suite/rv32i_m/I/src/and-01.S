 
// -----------
// This file was generated by riscv_ctg (https://gitlab.com/incoresemi/riscv-compliance/riscv_ctg)
// version   : 0.1.0
// timestamp : Thu Nov  5 11:18:24 2020 GMT
// usage     : riscv_ctg \
//                  -- cgf /scratch/git-repo/incoresemi/riscv-compliance/riscv_ctg/sample_cgfs/rv32i.cgf \
//                  -- xlen 32 \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the and instruction of the RISC-V I extension for the and covergroup.
// 
#include "compliance_model.h"
#include "compliance_test.h"
RVTEST_ISA("RV32I")

RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*);def TEST_CASE_1=True;",and)

RVTEST_SIGBASE( x14,signature_x14_1)

// rs1 == rd != rs2, rs1==x19, rs2==x16, rd==x19, rs1_val == (-2**(xlen-1)), rs1_val < 0 and rs2_val < 0, rs1_val == -2147483648, rs1_val != rs2_val, rs2_val == -33554433
// opcode: and ; op1:x19; op2:x16; dest:x19; op1val:0x80000000;  op2val:0xfdffffff
TEST_RR_OP(and, x19, x19, x16, 0x80000000, 0x80000000, 0xfdffffff, x14, 0, x20)

// rs1 == rs2 != rd, rs1==x6, rs2==x6, rd==x10, rs1_val == 0, 
// opcode: and ; op1:x6; op2:x6; dest:x10; op1val:0x00000000;  op2val:0xfffffff8
TEST_RR_OP(and, x10, x6, x6, 0x0, 0x00000000, 0xfffffff8, x14, 4, x20)

// rs1 == rs2 == rd, rs1==x25, rs2==x25, rd==x25, rs1_val == (2**(xlen-1)-1), rs1_val > 0 and rs2_val > 0, rs2_val == 134217728, rs1_val == 2147483647
// opcode: and ; op1:x25; op2:x25; dest:x25; op1val:0x7fffffff;  op2val:0x08000000
TEST_RR_OP(and, x25, x25, x25, 0x8000000, 0x7fffffff, 0x08000000, x14, 8, x20)

// rs2 == rd != rs1, rs1==x15, rs2==x22, rd==x22, rs1_val == 1, rs2_val == 256
// opcode: and ; op1:x15; op2:x22; dest:x22; op1val:0x00000001;  op2val:0x00000100
TEST_RR_OP(and, x22, x15, x22, 0x0, 0x00000001, 0x00000100, x14, 12, x20)

// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x28, rs2==x10, rd==x23, rs2_val == (-2**(xlen-1)), rs1_val == -129, rs2_val == -2147483648
// opcode: and ; op1:x28; op2:x10; dest:x23; op1val:0xffffff7f;  op2val:0x80000000
TEST_RR_OP(and, x23, x28, x10, 0x80000000, 0xffffff7f, 0x80000000, x14, 16, x20)

// rs1==x22, rs2==x2, rd==x5, rs2_val == 0, rs1_val == -1025
// opcode: and ; op1:x22; op2:x2; dest:x5; op1val:0xfffffbff;  op2val:0x00000000
TEST_RR_OP(and, x5, x22, x2, 0x0, 0xfffffbff, 0x00000000, x14, 20, x20)

// rs1==x17, rs2==x4, rd==x26, rs2_val == (2**(xlen-1)-1), rs1_val == -65, rs1_val < 0 and rs2_val > 0, rs2_val == 2147483647
// opcode: and ; op1:x17; op2:x4; dest:x26; op1val:0xffffffbf;  op2val:0x7fffffff
TEST_RR_OP(and, x26, x17, x4, 0x7fffffbf, 0xffffffbf, 0x7fffffff, x14, 24, x20)

// rs1==x9, rs2==x3, rd==x21, rs2_val == 1, rs1_val == -268435457
// opcode: and ; op1:x9; op2:x3; dest:x21; op1val:0xefffffff;  op2val:0x00000001
TEST_RR_OP(and, x21, x9, x3, 0x1, 0xefffffff, 0x00000001, x14, 28, x20)

// rs1==x11, rs2==x8, rd==x2, rs1_val > 0 and rs2_val < 0, rs2_val == -4194305
// opcode: and ; op1:x11; op2:x8; dest:x2; op1val:0x00000003;  op2val:0xffbfffff
TEST_RR_OP(and, x2, x11, x8, 0x3, 0x00000003, 0xffbfffff, x14, 32, x20)

// rs1==x18, rs2==x24, rd==x29, rs1_val == rs2_val, 
// opcode: and ; op1:x18; op2:x24; dest:x29; op1val:0xffffffff;  op2val:0xffffffff
TEST_RR_OP(and, x29, x18, x24, 0xffffffff, 0xffffffff, 0xffffffff, x14, 36, x20)

// rs1==x7, rs2==x1, rd==x3, rs1_val == 2, rs2_val == 2048
// opcode: and ; op1:x7; op2:x1; dest:x3; op1val:0x00000002;  op2val:0x00000800
TEST_RR_OP(and, x3, x7, x1, 0x0, 0x00000002, 0x00000800, x14, 40, x20)

// rs1==x5, rs2==x7, rd==x31, rs1_val == 4, rs2_val == 4
// opcode: and ; op1:x5; op2:x7; dest:x31; op1val:0x00000004;  op2val:0x00000004
TEST_RR_OP(and, x31, x5, x7, 0x4, 0x00000004, 0x00000004, x14, 44, x20)

// rs1==x26, rs2==x12, rd==x24, rs1_val == 8, rs2_val == -16385
// opcode: and ; op1:x26; op2:x12; dest:x24; op1val:0x00000008;  op2val:0xffffbfff
TEST_RR_OP(and, x24, x26, x12, 0x8, 0x00000008, 0xffffbfff, x14, 48, x20)

// rs1==x13, rs2==x29, rd==x30, rs1_val == 16, rs2_val == -268435457
// opcode: and ; op1:x13; op2:x29; dest:x30; op1val:0x00000010;  op2val:0xefffffff
TEST_RR_OP(and, x30, x13, x29, 0x10, 0x00000010, 0xefffffff, x14, 52, x20)
RVTEST_SIGBASE( x10,signature_x10_0)

// rs1==x14, rs2==x31, rd==x11, rs1_val == 32, 
// opcode: and ; op1:x14; op2:x31; dest:x11; op1val:0x00000020;  op2val:0x00000004
TEST_RR_OP(and, x11, x14, x31, 0x0, 0x00000020, 0x00000004, x10, 0, x22)

// rs1==x23, rs2==x26, rd==x17, rs1_val == 64, rs2_val == 4194304
// opcode: and ; op1:x23; op2:x26; dest:x17; op1val:0x00000040;  op2val:0x00400000
TEST_RR_OP(and, x17, x23, x26, 0x0, 0x00000040, 0x00400000, x10, 4, x22)

// rs1==x21, rs2==x13, rd==x0, rs1_val == 128, rs2_val == -16777217
// opcode: and ; op1:x21; op2:x13; dest:x0; op1val:0x00000080;  op2val:0xfeffffff
TEST_RR_OP(and, x0, x21, x13, 0x80, 0x00000080, 0xfeffffff, x10, 8, x22)

// rs1==x0, rs2==x28, rd==x6, rs1_val == 256, 
// opcode: and ; op1:x0; op2:x28; dest:x6; op1val:0x00000100;  op2val:0xffbfffff
TEST_RR_OP(and, x6, x0, x28, 0x100, 0x00000100, 0xffbfffff, x10, 12, x22)

// rs1==x30, rs2==x0, rd==x8, rs1_val == 512, rs2_val == -65
// opcode: and ; op1:x30; op2:x0; dest:x8; op1val:0x00000200;  op2val:0xffffffbf
TEST_RR_OP(and, x8, x30, x0, 0x200, 0x00000200, 0xffffffbf, x10, 16, x22)

// rs1==x24, rs2==x15, rd==x16, rs1_val == 1024, rs2_val == 2
// opcode: and ; op1:x24; op2:x15; dest:x16; op1val:0x00000400;  op2val:0x00000002
TEST_RR_OP(and, x16, x24, x15, 0x0, 0x00000400, 0x00000002, x10, 20, x22)

// rs1==x20, rs2==x23, rd==x18, rs1_val == 2048, 
// opcode: and ; op1:x20; op2:x23; dest:x18; op1val:0x00000800;  op2val:0x00400000
TEST_RR_OP(and, x18, x20, x23, 0x0, 0x00000800, 0x00400000, x10, 24, x22)

// rs1==x8, rs2==x11, rd==x12, rs1_val == 4096, rs2_val == -65537
// opcode: and ; op1:x8; op2:x11; dest:x12; op1val:0x00001000;  op2val:0xfffeffff
TEST_RR_OP(and, x12, x8, x11, 0x1000, 0x00001000, 0xfffeffff, x10, 28, x22)

// rs1==x2, rs2==x17, rd==x14, rs1_val == 8192, rs2_val == -2049
// opcode: and ; op1:x2; op2:x17; dest:x14; op1val:0x00002000;  op2val:0xfffff7ff
TEST_RR_OP(and, x14, x2, x17, 0x2000, 0x00002000, 0xfffff7ff, x10, 32, x22)

// rs1==x3, rs2==x5, rd==x13, rs1_val == 16384, 
// opcode: and ; op1:x3; op2:x5; dest:x13; op1val:0x00004000;  op2val:0x00000004
TEST_RR_OP(and, x13, x3, x5, 0x0, 0x00004000, 0x00000004, x10, 36, x22)

// rs1==x31, rs2==x30, rd==x1, rs1_val == 32768, 
// opcode: and ; op1:x31; op2:x30; dest:x1; op1val:0x00008000;  op2val:0xfffffff8
TEST_RR_OP(and, x1, x31, x30, 0x8000, 0x00008000, 0xfffffff8, x10, 40, x22)

// rs1==x16, rs2==x19, rd==x9, rs1_val == 65536, 
// opcode: and ; op1:x16; op2:x19; dest:x9; op1val:0x00010000;  op2val:0x00000004
TEST_RR_OP(and, x9, x16, x19, 0x0, 0x00010000, 0x00000004, x10, 44, x22)

// rs1==x12, rs2==x27, rd==x4, rs1_val == 131072, rs2_val == 33554432
// opcode: and ; op1:x12; op2:x27; dest:x4; op1val:0x00020000;  op2val:0x02000000
TEST_RR_OP(and, x4, x12, x27, 0x0, 0x00020000, 0x02000000, x10, 48, x22)

// rs1==x4, rs2==x18, rd==x20, rs1_val == 262144, rs2_val == 131072
// opcode: and ; op1:x4; op2:x18; dest:x20; op1val:0x00040000;  op2val:0x00020000
TEST_RR_OP(and, x20, x4, x18, 0x0, 0x00040000, 0x00020000, x10, 52, x22)

// rs1==x29, rs2==x14, rd==x7, rs1_val == 524288, rs2_val == -8388609
// opcode: and ; op1:x29; op2:x14; dest:x7; op1val:0x00080000;  op2val:0xff7fffff
TEST_RR_OP(and, x7, x29, x14, 0x80000, 0x00080000, 0xff7fffff, x10, 56, x22)
RVTEST_SIGBASE( x2,signature_x2_0)

// rs1==x27, rs2==x21, rd==x28, rs1_val == 1048576, rs2_val == 16777216
// opcode: and ; op1:x27; op2:x21; dest:x28; op1val:0x00100000;  op2val:0x01000000
TEST_RR_OP(and, x28, x27, x21, 0x0, 0x00100000, 0x01000000, x2, 0, x3)

// rs1==x10, rs2==x9, rd==x27, rs1_val == 2097152, 
// opcode: and ; op1:x10; op2:x9; dest:x27; op1val:0x00200000;  op2val:0x01000000
TEST_RR_OP(and, x27, x10, x9, 0x0, 0x00200000, 0x01000000, x2, 4, x3)

// rs1==x1, rs2==x20, rd==x15, rs1_val == 4194304, rs2_val == 32
// opcode: and ; op1:x1; op2:x20; dest:x15; op1val:0x00400000;  op2val:0x00000020
TEST_RR_OP(and, x15, x1, x20, 0x0, 0x00400000, 0x00000020, x2, 8, x3)

// rs1_val == 8388608, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x00800000;  op2val:0xffffffff
TEST_RR_OP(and, x12, x10, x11, 0x800000, 0x00800000, 0xffffffff, x2, 12, x3)

// rs1_val == 16777216, rs2_val == -67108865
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x01000000;  op2val:0xfbffffff
TEST_RR_OP(and, x12, x10, x11, 0x1000000, 0x01000000, 0xfbffffff, x2, 16, x3)

// rs1_val == 33554432, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x02000000;  op2val:0x02000000
TEST_RR_OP(and, x12, x10, x11, 0x2000000, 0x02000000, 0x02000000, x2, 20, x3)

// rs1_val == 67108864, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x04000000;  op2val:0xc0000000
TEST_RR_OP(and, x12, x10, x11, 0x0, 0x04000000, 0xc0000000, x2, 24, x3)

// rs1_val == 134217728, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x08000000;  op2val:0x80000000
TEST_RR_OP(and, x12, x10, x11, 0x0, 0x08000000, 0x80000000, x2, 28, x3)

// rs1_val == 268435456, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x10000000;  op2val:0x08000000
TEST_RR_OP(and, x12, x10, x11, 0x0, 0x10000000, 0x08000000, x2, 32, x3)

// rs1_val == 536870912, rs2_val == 268435456
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x20000000;  op2val:0x10000000
TEST_RR_OP(and, x12, x10, x11, 0x0, 0x20000000, 0x10000000, x2, 36, x3)

// rs1_val == 1073741824, rs2_val == -257
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x40000000;  op2val:0xfffffeff
TEST_RR_OP(and, x12, x10, x11, 0x40000000, 0x40000000, 0xfffffeff, x2, 40, x3)

// rs1_val == -2, rs2_val == -262145
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0xfffffffe;  op2val:0xfffbffff
TEST_RR_OP(and, x12, x10, x11, 0xfffbfffe, 0xfffffffe, 0xfffbffff, x2, 44, x3)

// rs1_val == -3, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0xfffffffd;  op2val:0xffffffbf
TEST_RR_OP(and, x12, x10, x11, 0xffffffbd, 0xfffffffd, 0xffffffbf, x2, 48, x3)

// rs1_val == -5, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0xfffffffb;  op2val:0xfffffff8
TEST_RR_OP(and, x12, x10, x11, 0xfffffff8, 0xfffffffb, 0xfffffff8, x2, 52, x3)

// rs1_val == -9, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0xfffffff7;  op2val:0x00000003
TEST_RR_OP(and, x12, x10, x11, 0x3, 0xfffffff7, 0x00000003, x2, 56, x3)

// rs1_val == -17, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0xffffffef;  op2val:0xfffffeff
TEST_RR_OP(and, x12, x10, x11, 0xfffffeef, 0xffffffef, 0xfffffeff, x2, 60, x3)

// rs1_val == -33, rs2_val == -3
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0xffffffdf;  op2val:0xfffffffd
TEST_RR_OP(and, x12, x10, x11, 0xffffffdd, 0xffffffdf, 0xfffffffd, x2, 64, x3)

// rs2_val == -524289, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x20000000;  op2val:0xfff7ffff
TEST_RR_OP(and, x12, x10, x11, 0x20000000, 0x20000000, 0xfff7ffff, x2, 68, x3)

// rs2_val == -1048577, rs1_val == -524289
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0xfff7ffff;  op2val:0xffefffff
TEST_RR_OP(and, x12, x10, x11, 0xffe7ffff, 0xfff7ffff, 0xffefffff, x2, 72, x3)

// rs2_val == -2097153, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x00800000;  op2val:0xffdfffff
TEST_RR_OP(and, x12, x10, x11, 0x800000, 0x00800000, 0xffdfffff, x2, 76, x3)

// rs2_val == -134217729, rs1_val == -2097153
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0xffdfffff;  op2val:0xf7ffffff
TEST_RR_OP(and, x12, x10, x11, 0xf7dfffff, 0xffdfffff, 0xf7ffffff, x2, 80, x3)

// rs2_val == -536870913, rs1_val == -536870913
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0xdfffffff;  op2val:0xdfffffff
TEST_RR_OP(and, x12, x10, x11, 0xdfffffff, 0xdfffffff, 0xdfffffff, x2, 84, x3)

// rs2_val == -1073741825, rs1_val == -257
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0xfffffeff;  op2val:0xbfffffff
TEST_RR_OP(and, x12, x10, x11, 0xbffffeff, 0xfffffeff, 0xbfffffff, x2, 88, x3)

// rs2_val == 1431655765, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x00004000;  op2val:0x55555555
TEST_RR_OP(and, x12, x10, x11, 0x4000, 0x00004000, 0x55555555, x2, 92, x3)

// rs2_val == -1431655766, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x00000000;  op2val:0xaaaaaaaa
TEST_RR_OP(and, x12, x10, x11, 0x0, 0x00000000, 0xaaaaaaaa, x2, 96, x3)

// rs1_val == -513, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0xfffffdff;  op2val:0x55555555
TEST_RR_OP(and, x12, x10, x11, 0x55555555, 0xfffffdff, 0x55555555, x2, 100, x3)

// rs1_val == -2049, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0xfffff7ff;  op2val:0xaaaaaaaa
TEST_RR_OP(and, x12, x10, x11, 0xaaaaa2aa, 0xfffff7ff, 0xaaaaaaaa, x2, 104, x3)

// rs1_val == -4097, rs2_val == 1024
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0xffffefff;  op2val:0x00000400
TEST_RR_OP(and, x12, x10, x11, 0x400, 0xffffefff, 0x00000400, x2, 108, x3)

// rs1_val == -8193, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0xffffdfff;  op2val:0xffffffbf
TEST_RR_OP(and, x12, x10, x11, 0xffffdfbf, 0xffffdfff, 0xffffffbf, x2, 112, x3)

// rs1_val == -16385, rs2_val == -131073
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0xffffbfff;  op2val:0xfffdffff
TEST_RR_OP(and, x12, x10, x11, 0xfffdbfff, 0xffffbfff, 0xfffdffff, x2, 116, x3)

// rs1_val == -32769, rs2_val == 32768
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0xffff7fff;  op2val:0x00008000
TEST_RR_OP(and, x12, x10, x11, 0x0, 0xffff7fff, 0x00008000, x2, 120, x3)

// rs1_val == -65537, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0xfffeffff;  op2val:0x00000100
TEST_RR_OP(and, x12, x10, x11, 0x100, 0xfffeffff, 0x00000100, x2, 124, x3)

// rs1_val == -131073, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0xfffdffff;  op2val:0x00000400
TEST_RR_OP(and, x12, x10, x11, 0x400, 0xfffdffff, 0x00000400, x2, 128, x3)

// rs1_val == -262145, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0xfffbffff;  op2val:0xffffffbf
TEST_RR_OP(and, x12, x10, x11, 0xfffbffbf, 0xfffbffff, 0xffffffbf, x2, 132, x3)

// rs1_val == -1048577, rs2_val == -4097
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0xffefffff;  op2val:0xffffefff
TEST_RR_OP(and, x12, x10, x11, 0xffefefff, 0xffefffff, 0xffffefff, x2, 136, x3)

// rs1_val == -4194305, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0xffbfffff;  op2val:0x08000000
TEST_RR_OP(and, x12, x10, x11, 0x8000000, 0xffbfffff, 0x08000000, x2, 140, x3)

// rs1_val == -8388609, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0xff7fffff;  op2val:0x3fffffff
TEST_RR_OP(and, x12, x10, x11, 0x3f7fffff, 0xff7fffff, 0x3fffffff, x2, 144, x3)

// rs1_val == -16777217, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0xfeffffff;  op2val:0xfffff7ff
TEST_RR_OP(and, x12, x10, x11, 0xfefff7ff, 0xfeffffff, 0xfffff7ff, x2, 148, x3)

// rs1_val == -33554433, rs2_val == 536870912
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0xfdffffff;  op2val:0x20000000
TEST_RR_OP(and, x12, x10, x11, 0x20000000, 0xfdffffff, 0x20000000, x2, 152, x3)

// rs1_val == -67108865, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0xfbffffff;  op2val:0x00000006
TEST_RR_OP(and, x12, x10, x11, 0x6, 0xfbffffff, 0x00000006, x2, 156, x3)

// rs1_val == -134217729, rs2_val == 67108864
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0xf7ffffff;  op2val:0x04000000
TEST_RR_OP(and, x12, x10, x11, 0x4000000, 0xf7ffffff, 0x04000000, x2, 160, x3)

// rs1_val == -1073741825, rs2_val == 128
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0xbfffffff;  op2val:0x00000080
TEST_RR_OP(and, x12, x10, x11, 0x80, 0xbfffffff, 0x00000080, x2, 164, x3)

// rs1_val == 1431655765, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x55555555;  op2val:0x00000003
TEST_RR_OP(and, x12, x10, x11, 0x1, 0x55555555, 0x00000003, x2, 168, x3)

// rs1_val == -1431655766, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0xaaaaaaaa;  op2val:0x20000000
TEST_RR_OP(and, x12, x10, x11, 0x20000000, 0xaaaaaaaa, 0x20000000, x2, 172, x3)

// rs2_val == 8, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0xfffeffff;  op2val:0x00000008
TEST_RR_OP(and, x12, x10, x11, 0x8, 0xfffeffff, 0x00000008, x2, 176, x3)

// rs2_val == 16, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x04000000;  op2val:0x00000010
TEST_RR_OP(and, x12, x10, x11, 0x0, 0x04000000, 0x00000010, x2, 180, x3)

// rs2_val == 64, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x00000007;  op2val:0x00000040
TEST_RR_OP(and, x12, x10, x11, 0x0, 0x00000007, 0x00000040, x2, 184, x3)

// rs2_val == 512, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x3fffffff;  op2val:0x00000200
TEST_RR_OP(and, x12, x10, x11, 0x200, 0x3fffffff, 0x00000200, x2, 188, x3)

// rs2_val == 4096, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0xfffffffa;  op2val:0x00001000
TEST_RR_OP(and, x12, x10, x11, 0x1000, 0xfffffffa, 0x00001000, x2, 192, x3)

// rs2_val == 8192, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0xfffff7ff;  op2val:0x00002000
TEST_RR_OP(and, x12, x10, x11, 0x2000, 0xfffff7ff, 0x00002000, x2, 196, x3)

// rs2_val == 16384, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x00100000;  op2val:0x00004000
TEST_RR_OP(and, x12, x10, x11, 0x0, 0x00100000, 0x00004000, x2, 200, x3)

// rs2_val == 65536, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x00000080;  op2val:0x00010000
TEST_RR_OP(and, x12, x10, x11, 0x0, 0x00000080, 0x00010000, x2, 204, x3)

// rs2_val == 262144, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x00400000;  op2val:0x00040000
TEST_RR_OP(and, x12, x10, x11, 0x0, 0x00400000, 0x00040000, x2, 208, x3)

// rs2_val == 524288, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x80000000;  op2val:0x00080000
TEST_RR_OP(and, x12, x10, x11, 0x0, 0x80000000, 0x00080000, x2, 212, x3)

// rs2_val == 1048576, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0xfffff7ff;  op2val:0x00100000
TEST_RR_OP(and, x12, x10, x11, 0x100000, 0xfffff7ff, 0x00100000, x2, 216, x3)

// rs2_val == 2097152, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0xfffffff8;  op2val:0x00200000
TEST_RR_OP(and, x12, x10, x11, 0x200000, 0xfffffff8, 0x00200000, x2, 220, x3)

// rs2_val == 8388608, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0xfffffbff;  op2val:0x00800000
TEST_RR_OP(and, x12, x10, x11, 0x800000, 0xfffffbff, 0x00800000, x2, 224, x3)

// rs2_val == 1073741824, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0xaaaaaaaa;  op2val:0x40000000
TEST_RR_OP(and, x12, x10, x11, 0x0, 0xaaaaaaaa, 0x40000000, x2, 228, x3)

// rs2_val == -2, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0xffffffff;  op2val:0xfffffffe
TEST_RR_OP(and, x12, x10, x11, 0xfffffffe, 0xffffffff, 0xfffffffe, x2, 232, x3)

// rs2_val == -5, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0xfffffff8;  op2val:0xfffffffb
TEST_RR_OP(and, x12, x10, x11, 0xfffffff8, 0xfffffff8, 0xfffffffb, x2, 236, x3)

// rs2_val == -9, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0xffffffef;  op2val:0xfffffff7
TEST_RR_OP(and, x12, x10, x11, 0xffffffe7, 0xffffffef, 0xfffffff7, x2, 240, x3)

// rs2_val == -17, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0xfffffffb;  op2val:0xffffffef
TEST_RR_OP(and, x12, x10, x11, 0xffffffeb, 0xfffffffb, 0xffffffef, x2, 244, x3)

// rs2_val == -33, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0xffffffff;  op2val:0xffffffdf
TEST_RR_OP(and, x12, x10, x11, 0xffffffdf, 0xffffffff, 0xffffffdf, x2, 248, x3)

// rs2_val == -129, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x00000100;  op2val:0xffffff7f
TEST_RR_OP(and, x12, x10, x11, 0x100, 0x00000100, 0xffffff7f, x2, 252, x3)

// rs2_val == -1025, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x00400000;  op2val:0xfffffbff
TEST_RR_OP(and, x12, x10, x11, 0x400000, 0x00400000, 0xfffffbff, x2, 256, x3)

// rs2_val == -8193, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0xfff7ffff;  op2val:0xffffdfff
TEST_RR_OP(and, x12, x10, x11, 0xfff7dfff, 0xfff7ffff, 0xffffdfff, x2, 260, x3)

// rs2_val == -32769, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0xffbfffff;  op2val:0xffff7fff
TEST_RR_OP(and, x12, x10, x11, 0xffbf7fff, 0xffbfffff, 0xffff7fff, x2, 264, x3)

// rs2_val == -513, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0xffffffff;  op2val:0xfffffdff
TEST_RR_OP(and, x12, x10, x11, 0xfffffdff, 0xffffffff, 0xfffffdff, x2, 268, x3)

// rs1_val == (2**(xlen-1)-1), rs1_val > 0 and rs2_val > 0, rs2_val == 134217728, rs1_val == 2147483647
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x7fffffff;  op2val:0x08000000
TEST_RR_OP(and, x12, x10, x11, 0x8000000, 0x7fffffff, 0x08000000, x2, 272, x3)

// rs1_val == 128, rs2_val == -16777217
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x00000080;  op2val:0xfeffffff
TEST_RR_OP(and, x12, x10, x11, 0x80, 0x00000080, 0xfeffffff, x2, 276, x3)

// rs1_val == 512, rs2_val == -65
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x00000200;  op2val:0xffffffbf
TEST_RR_OP(and, x12, x10, x11, 0x200, 0x00000200, 0xffffffbf, x2, 280, x3)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
.align 4

signature_x14_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x14_1:
    .fill 14*(XLEN/32),4,0xdeadbeef


signature_x10_0:
    .fill 15*(XLEN/32),4,0xdeadbeef


signature_x2_0:
    .fill 71*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
