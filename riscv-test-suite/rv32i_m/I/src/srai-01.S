 
// -----------
// This file was generated by riscv_ctg (https://gitlab.com/incoresemi/riscv-compliance/riscv_ctg)
// version   : 0.1.0
// timestamp : Fri Nov  6 10:29:11 2020 GMT
// usage     : riscv_ctg \
//                  -- cgf /scratch/git-repo/incoresemi/riscv-compliance/riscv_ctg/sample_cgfs/rv32i.cgf \
//                  -- xlen 32 \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the srai instruction of the RISC-V I extension for the srai covergroup.
// 
#include "compliance_model.h"
#include "compliance_test.h"
RVTEST_ISA("RV32I")

RVMODEL_BOOT
RVTEST_CODE_BEGIN
RVMODEL_TARGET_INIT

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*);def TEST_CASE_1=True;",srai)

RVTEST_SIGBASE( x1,signature_x1_1)

inst_0:
// rs1 != rd, rs1==x19, rd==x26, rs1_val < 0 and imm_val > 0 and imm_val < xlen, rs1_val == -17
// opcode: srai ; op1:x19; dest:x26; op1val:-17;  immval:17
TEST_IMM_OP( srai, x26, x19, 0x7fff, -17, 17, x1, 0, x5)

inst_1:
// rs1 == rd, rs1==x3, rd==x3, rs1_val > 0 and imm_val > 0 and imm_val < xlen, imm_val == 23
// opcode: srai ; op1:x3; dest:x3; op1val:5;  immval:23
TEST_IMM_OP( srai, x3, x3, 0x0, 5, 23, x1, 4, x5)

inst_2:
// rs1==x9, rd==x29, rs1_val < 0 and imm_val == 0, rs1_val == -65537
// opcode: srai ; op1:x9; dest:x29; op1val:-65537;  immval:0
TEST_IMM_OP( srai, x29, x9, 0xfffeffff, -65537, 0, x1, 8, x5)

inst_3:
// rs1==x17, rd==x24, rs1_val > 0 and imm_val == 0, rs1_val == 1024
// opcode: srai ; op1:x17; dest:x24; op1val:1024;  immval:0
TEST_IMM_OP( srai, x24, x17, 0x400, 1024, 0, x1, 12, x5)

inst_4:
// rs1==x14, rd==x4, rs1_val < 0 and imm_val == (xlen-1), rs1_val == -134217729
// opcode: srai ; op1:x14; dest:x4; op1val:-134217729;  immval:31
TEST_IMM_OP( srai, x4, x14, 0x1, -134217729, 31, x1, 16, x5)

inst_5:
// rs1==x7, rd==x20, rs1_val > 0 and imm_val == (xlen-1), rs1_val == 16384
// opcode: srai ; op1:x7; dest:x20; op1val:16384;  immval:31
TEST_IMM_OP( srai, x20, x7, 0x0, 16384, 31, x1, 20, x5)

inst_6:
// rs1==x21, rd==x25, rs1_val == imm_val and imm_val > 0 and imm_val < xlen, rs1_val == 1 and imm_val >= 0 and imm_val < xlen, imm_val == 1, rs1_val == 1
// opcode: srai ; op1:x21; dest:x25; op1val:1;  immval:1
TEST_IMM_OP( srai, x25, x21, 0x0, 1, 1, x1, 24, x5)

inst_7:
// rs1==x27, rd==x21, rs1_val == (-2**(xlen-1)) and imm_val >= 0 and imm_val < xlen, rs1_val == -2147483648
// opcode: srai ; op1:x27; dest:x21; op1val:-2147483648;  immval:17
TEST_IMM_OP( srai, x21, x27, 0x4000, -2147483648, 17, x1, 28, x5)

inst_8:
// rs1==x22, rd==x18, rs1_val == 0 and imm_val >= 0 and imm_val < xlen, 
// opcode: srai ; op1:x22; dest:x18; op1val:0;  immval:18
TEST_IMM_OP( srai, x18, x22, 0x0, 0, 18, x1, 32, x5)

inst_9:
// rs1==x16, rd==x31, rs1_val == (2**(xlen-1)-1) and imm_val >= 0 and imm_val < xlen, rs1_val == 2147483647
// opcode: srai ; op1:x16; dest:x31; op1val:2147483647;  immval:9
TEST_IMM_OP( srai, x31, x16, 0x3fffff, 2147483647, 9, x1, 36, x5)

inst_10:
// rs1==x2, rd==x17, imm_val == 2, 
// opcode: srai ; op1:x2; dest:x17; op1val:-10;  immval:2
TEST_IMM_OP( srai, x17, x2, 0x3ffffffd, -10, 2, x1, 40, x5)

inst_11:
// rs1==x30, rd==x19, imm_val == 4, rs1_val == -536870913
// opcode: srai ; op1:x30; dest:x19; op1val:-536870913;  immval:4
TEST_IMM_OP( srai, x19, x30, 0xdffffff, -536870913, 4, x1, 44, x5)

inst_12:
// rs1==x24, rd==x7, imm_val == 8, rs1_val == -4194305
// opcode: srai ; op1:x24; dest:x7; op1val:-4194305;  immval:8
TEST_IMM_OP( srai, x7, x24, 0xffbfff, -4194305, 8, x1, 48, x5)

inst_13:
// rs1==x12, rd==x13, imm_val == 16, rs1_val == -262145
// opcode: srai ; op1:x12; dest:x13; op1val:-262145;  immval:16
TEST_IMM_OP( srai, x13, x12, 0xfffb, -262145, 16, x1, 52, x5)

inst_14:
// rs1==x31, rd==x11, imm_val == 30, rs1_val == -2049
// opcode: srai ; op1:x31; dest:x11; op1val:-2049;  immval:30
TEST_IMM_OP( srai, x11, x31, 0x3, -2049, 30, x1, 56, x5)

inst_15:
// rs1==x29, rd==x16, imm_val == 29, 
// opcode: srai ; op1:x29; dest:x16; op1val:5;  immval:29
TEST_IMM_OP( srai, x16, x29, 0x0, 5, 29, x1, 60, x5)

inst_16:
// rs1==x10, rd==x15, imm_val == 27, rs1_val == 1048576
// opcode: srai ; op1:x10; dest:x15; op1val:1048576;  immval:27
TEST_IMM_OP( srai, x15, x10, 0x0, 1048576, 27, x1, 64, x5)

inst_17:
// rs1==x26, rd==x10, imm_val == 15, rs1_val == 64
// opcode: srai ; op1:x26; dest:x10; op1val:64;  immval:15
TEST_IMM_OP( srai, x10, x26, 0x0, 64, 15, x1, 68, x5)

inst_18:
// rs1==x25, rd==x8, imm_val == 21, rs1_val == 8
// opcode: srai ; op1:x25; dest:x8; op1val:8;  immval:21
TEST_IMM_OP( srai, x8, x25, 0x0, 8, 21, x1, 72, x5)

inst_19:
// rs1==x15, rd==x23, imm_val == 10, rs1_val == 8388608
// opcode: srai ; op1:x15; dest:x23; op1val:8388608;  immval:10
TEST_IMM_OP( srai, x23, x15, 0x2000, 8388608, 10, x1, 76, x5)

inst_20:
// rs1==x20, rd==x6, rs1_val == 2, 
// opcode: srai ; op1:x20; dest:x6; op1val:2;  immval:21
TEST_IMM_OP( srai, x6, x20, 0x0, 2, 21, x1, 80, x7)
RVTEST_SIGBASE( x3,signature_x3_0)

inst_21:
// rs1==x6, rd==x30, rs1_val == 4, 
// opcode: srai ; op1:x6; dest:x30; op1val:4;  immval:3
TEST_IMM_OP( srai, x30, x6, 0x0, 4, 3, x3, 0, x7)

inst_22:
// rs1==x4, rd==x12, rs1_val == 16, 
// opcode: srai ; op1:x4; dest:x12; op1val:16;  immval:13
TEST_IMM_OP( srai, x12, x4, 0x0, 16, 13, x3, 4, x7)

inst_23:
// rs1==x28, rd==x22, rs1_val == 32, 
// opcode: srai ; op1:x28; dest:x22; op1val:32;  immval:8
TEST_IMM_OP( srai, x22, x28, 0x0, 32, 8, x3, 8, x7)

inst_24:
// rs1==x8, rd==x28, rs1_val == 128, 
// opcode: srai ; op1:x8; dest:x28; op1val:128;  immval:2
TEST_IMM_OP( srai, x28, x8, 0x20, 128, 2, x3, 12, x7)

inst_25:
// rs1==x23, rd==x5, rs1_val == 256, 
// opcode: srai ; op1:x23; dest:x5; op1val:256;  immval:1
TEST_IMM_OP( srai, x5, x23, 0x80, 256, 1, x3, 16, x7)

inst_26:
// rs1==x0, rd==x14, rs1_val == 512, 
// opcode: srai ; op1:x0; dest:x14; op1val:512;  immval:7
TEST_IMM_OP( srai, x14, x0, 0x4, 512, 7, x3, 20, x7)

inst_27:
// rs1==x5, rd==x1, rs1_val == 2048, 
// opcode: srai ; op1:x5; dest:x1; op1val:2048;  immval:10
TEST_IMM_OP( srai, x1, x5, 0x2, 2048, 10, x3, 24, x7)

inst_28:
// rs1==x1, rd==x9, rs1_val == 4096, 
// opcode: srai ; op1:x1; dest:x9; op1val:4096;  immval:3
TEST_IMM_OP( srai, x9, x1, 0x200, 4096, 3, x3, 28, x7)

inst_29:
// rs1==x13, rd==x0, rs1_val == 8192, 
// opcode: srai ; op1:x13; dest:x0; op1val:8192;  immval:27
TEST_IMM_OP( srai, x0, x13, 0x0, 8192, 27, x3, 32, x7)

inst_30:
// rs1==x11, rd==x2, rs1_val == 32768, 
// opcode: srai ; op1:x11; dest:x2; op1val:32768;  immval:15
TEST_IMM_OP( srai, x2, x11, 0x1, 32768, 15, x3, 36, x7)

inst_31:
// rs1==x18, rd==x27, rs1_val == 65536, 
// opcode: srai ; op1:x18; dest:x27; op1val:65536;  immval:21
TEST_IMM_OP( srai, x27, x18, 0x0, 65536, 21, x3, 40, x7)

inst_32:
// rs1_val == 131072, 
// opcode: srai ; op1:x10; dest:x11; op1val:131072;  immval:23
TEST_IMM_OP( srai, x11, x10, 0x0, 131072, 23, x3, 44, x7)

inst_33:
// rs1_val == 262144, 
// opcode: srai ; op1:x10; dest:x11; op1val:262144;  immval:19
TEST_IMM_OP( srai, x11, x10, 0x0, 262144, 19, x3, 48, x7)

inst_34:
// rs1_val == 524288, 
// opcode: srai ; op1:x10; dest:x11; op1val:524288;  immval:0
TEST_IMM_OP( srai, x11, x10, 0x80000, 524288, 0, x3, 52, x7)

inst_35:
// rs1_val == 2097152, 
// opcode: srai ; op1:x10; dest:x11; op1val:2097152;  immval:18
TEST_IMM_OP( srai, x11, x10, 0x8, 2097152, 18, x3, 56, x7)

inst_36:
// rs1_val == 4194304, 
// opcode: srai ; op1:x10; dest:x11; op1val:4194304;  immval:29
TEST_IMM_OP( srai, x11, x10, 0x0, 4194304, 29, x3, 60, x7)

inst_37:
// rs1_val == 16777216, 
// opcode: srai ; op1:x10; dest:x11; op1val:16777216;  immval:8
TEST_IMM_OP( srai, x11, x10, 0x10000, 16777216, 8, x3, 64, x7)

inst_38:
// rs1_val == 33554432, 
// opcode: srai ; op1:x10; dest:x11; op1val:33554432;  immval:10
TEST_IMM_OP( srai, x11, x10, 0x8000, 33554432, 10, x3, 68, x7)

inst_39:
// rs1_val == -513, 
// opcode: srai ; op1:x10; dest:x11; op1val:-513;  immval:31
TEST_IMM_OP( srai, x11, x10, 0x1, -513, 31, x3, 72, x7)

inst_40:
// rs1_val == -1025, 
// opcode: srai ; op1:x10; dest:x11; op1val:-1025;  immval:14
TEST_IMM_OP( srai, x11, x10, 0x3ffff, -1025, 14, x3, 76, x7)

inst_41:
// rs1_val == -4097, 
// opcode: srai ; op1:x10; dest:x11; op1val:-4097;  immval:10
TEST_IMM_OP( srai, x11, x10, 0x3ffffb, -4097, 10, x3, 80, x7)

inst_42:
// rs1_val == -8193, 
// opcode: srai ; op1:x10; dest:x11; op1val:-8193;  immval:4
TEST_IMM_OP( srai, x11, x10, 0xffffdff, -8193, 4, x3, 84, x7)

inst_43:
// rs1_val == -16385, 
// opcode: srai ; op1:x10; dest:x11; op1val:-16385;  immval:9
TEST_IMM_OP( srai, x11, x10, 0x7fffdf, -16385, 9, x3, 88, x7)

inst_44:
// rs1_val == -32769, 
// opcode: srai ; op1:x10; dest:x11; op1val:-32769;  immval:15
TEST_IMM_OP( srai, x11, x10, 0x1fffe, -32769, 15, x3, 92, x7)

inst_45:
// rs1_val == -131073, 
// opcode: srai ; op1:x10; dest:x11; op1val:-131073;  immval:9
TEST_IMM_OP( srai, x11, x10, 0x7ffeff, -131073, 9, x3, 96, x7)

inst_46:
// rs1_val == -524289, 
// opcode: srai ; op1:x10; dest:x11; op1val:-524289;  immval:27
TEST_IMM_OP( srai, x11, x10, 0x1f, -524289, 27, x3, 100, x7)

inst_47:
// rs1_val == -1048577, 
// opcode: srai ; op1:x10; dest:x11; op1val:-1048577;  immval:11
TEST_IMM_OP( srai, x11, x10, 0x1ffdff, -1048577, 11, x3, 104, x7)

inst_48:
// rs1_val == -2097153, 
// opcode: srai ; op1:x10; dest:x11; op1val:-2097153;  immval:12
TEST_IMM_OP( srai, x11, x10, 0xffdff, -2097153, 12, x3, 108, x7)

inst_49:
// rs1_val == -8388609, 
// opcode: srai ; op1:x10; dest:x11; op1val:-8388609;  immval:13
TEST_IMM_OP( srai, x11, x10, 0x7fbff, -8388609, 13, x3, 112, x7)

inst_50:
// rs1_val == -16777217, 
// opcode: srai ; op1:x10; dest:x11; op1val:-16777217;  immval:29
TEST_IMM_OP( srai, x11, x10, 0x7, -16777217, 29, x3, 116, x7)

inst_51:
// rs1_val == -33554433, 
// opcode: srai ; op1:x10; dest:x11; op1val:-33554433;  immval:13
TEST_IMM_OP( srai, x11, x10, 0x7efff, -33554433, 13, x3, 120, x7)

inst_52:
// rs1_val == -67108865, 
// opcode: srai ; op1:x10; dest:x11; op1val:-67108865;  immval:27
TEST_IMM_OP( srai, x11, x10, 0x1f, -67108865, 27, x3, 124, x7)

inst_53:
// rs1_val == -268435457, 
// opcode: srai ; op1:x10; dest:x11; op1val:-268435457;  immval:27
TEST_IMM_OP( srai, x11, x10, 0x1d, -268435457, 27, x3, 128, x7)

inst_54:
// rs1_val == -1073741825, 
// opcode: srai ; op1:x10; dest:x11; op1val:-1073741825;  immval:11
TEST_IMM_OP( srai, x11, x10, 0x17ffff, -1073741825, 11, x3, 132, x7)

inst_55:
// rs1_val == -9, 
// opcode: srai ; op1:x10; dest:x11; op1val:-9;  immval:6
TEST_IMM_OP( srai, x11, x10, 0x3ffffff, -9, 6, x3, 136, x7)

inst_56:
// rs1_val == 67108864, 
// opcode: srai ; op1:x10; dest:x11; op1val:67108864;  immval:11
TEST_IMM_OP( srai, x11, x10, 0x8000, 67108864, 11, x3, 140, x7)

inst_57:
// rs1_val == 134217728, 
// opcode: srai ; op1:x10; dest:x11; op1val:134217728;  immval:19
TEST_IMM_OP( srai, x11, x10, 0x100, 134217728, 19, x3, 144, x7)

inst_58:
// rs1_val == 268435456, 
// opcode: srai ; op1:x10; dest:x11; op1val:268435456;  immval:12
TEST_IMM_OP( srai, x11, x10, 0x10000, 268435456, 12, x3, 148, x7)

inst_59:
// rs1_val == 536870912, 
// opcode: srai ; op1:x10; dest:x11; op1val:536870912;  immval:15
TEST_IMM_OP( srai, x11, x10, 0x4000, 536870912, 15, x3, 152, x7)

inst_60:
// rs1_val == 1073741824, 
// opcode: srai ; op1:x10; dest:x11; op1val:1073741824;  immval:29
TEST_IMM_OP( srai, x11, x10, 0x2, 1073741824, 29, x3, 156, x7)

inst_61:
// rs1_val == -2, 
// opcode: srai ; op1:x10; dest:x11; op1val:-2;  immval:11
TEST_IMM_OP( srai, x11, x10, 0x1fffff, -2, 11, x3, 160, x7)

inst_62:
// rs1_val == 1431655765, 
// opcode: srai ; op1:x10; dest:x11; op1val:1431655765;  immval:11
TEST_IMM_OP( srai, x11, x10, 0xaaaaa, 1431655765, 11, x3, 164, x7)

inst_63:
// rs1_val == -1431655766, 
// opcode: srai ; op1:x10; dest:x11; op1val:-1431655766;  immval:11
TEST_IMM_OP( srai, x11, x10, 0x155555, -1431655766, 11, x3, 168, x7)

inst_64:
// rs1_val == -3, 
// opcode: srai ; op1:x10; dest:x11; op1val:-3;  immval:12
TEST_IMM_OP( srai, x11, x10, 0xfffff, -3, 12, x3, 172, x7)

inst_65:
// rs1_val == -5, 
// opcode: srai ; op1:x10; dest:x11; op1val:-5;  immval:10
TEST_IMM_OP( srai, x11, x10, 0x3fffff, -5, 10, x3, 176, x7)

inst_66:
// rs1_val == -33, 
// opcode: srai ; op1:x10; dest:x11; op1val:-33;  immval:18
TEST_IMM_OP( srai, x11, x10, 0x3fff, -33, 18, x3, 180, x7)

inst_67:
// rs1_val == -65, 
// opcode: srai ; op1:x10; dest:x11; op1val:-65;  immval:12
TEST_IMM_OP( srai, x11, x10, 0xfffff, -65, 12, x3, 184, x7)

inst_68:
// rs1_val == -129, 
// opcode: srai ; op1:x10; dest:x11; op1val:-129;  immval:9
TEST_IMM_OP( srai, x11, x10, 0x7fffff, -129, 9, x3, 188, x7)

inst_69:
// rs1_val == -257, 
// opcode: srai ; op1:x10; dest:x11; op1val:-257;  immval:17
TEST_IMM_OP( srai, x11, x10, 0x7fff, -257, 17, x3, 192, x7)

inst_70:
// rs1_val == 512, 
// opcode: srai ; op1:x10; dest:x11; op1val:512;  immval:7
TEST_IMM_OP( srai, x11, x10, 0x4, 512, 7, x3, 196, x7)

inst_71:
// rs1_val == 8192, 
// opcode: srai ; op1:x10; dest:x11; op1val:8192;  immval:27
TEST_IMM_OP( srai, x11, x10, 0x0, 8192, 27, x3, 200, x7)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x1_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x1_1:
    .fill 21*(XLEN/32),4,0xdeadbeef


signature_x3_0:
    .fill 51*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
