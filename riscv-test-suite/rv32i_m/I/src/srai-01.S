 
// -----------
// This file was generated by riscv_ctg (https://gitlab.com/incoresemi/riscv-compliance/riscv_ctg)
// version   : 0.1.0
// timestamp : Thu Nov  5 12:29:34 2020 GMT
// usage     : riscv_ctg \
//                  -- cgf /scratch/git-repo/incoresemi/riscv-compliance/riscv_ctg/sample_cgfs/rv32i.cgf \
//                  -- xlen 32 \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the srai instruction of the RISC-V I extension for the srai covergroup.
// 
#include "compliance_model.h"
#include "compliance_test.h"
RVTEST_ISA("RV32I")

RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*);def TEST_CASE_1=True;",srai)

RVTEST_SIGBASE( x13,signature_x13_1)

// rs1 == rd, rs1==x15, rd==x15, rs1_val < 0 and imm_val > 0 and imm_val < xlen, imm_val == 30, rs1_val == -5
// opcode: srai ; op1:x15; dest:x15; op1val:0xfffffffb;  immval:30
TEST_IMM_OP( srai, x15, x15, 0x3, 0xfffffffb, 30, x13, 0, x11)

// rs1 != rd, rs1==x19, rd==x12, rs1_val > 0 and imm_val > 0 and imm_val < xlen, rs1_val == 67108864, imm_val == 4
// opcode: srai ; op1:x19; dest:x12; op1val:0x04000000;  immval:4
TEST_IMM_OP( srai, x12, x19, 0x400000, 0x04000000, 4, x13, 4, x11)

// rs1==x14, rd==x4, rs1_val < 0 and imm_val == 0, 
// opcode: srai ; op1:x14; dest:x4; op1val:0xfffffffc;  immval:0
TEST_IMM_OP( srai, x4, x14, 0xfffffffc, 0xfffffffc, 0, x13, 8, x11)

// rs1==x9, rd==x29, rs1_val > 0 and imm_val == 0, rs1_val == 8
// opcode: srai ; op1:x9; dest:x29; op1val:0x00000008;  immval:0
TEST_IMM_OP( srai, x29, x9, 0x8, 0x00000008, 0, x13, 12, x11)

// rs1==x2, rd==x10, rs1_val < 0 and imm_val == (xlen-1), rs1_val == -2
// opcode: srai ; op1:x2; dest:x10; op1val:0xfffffffe;  immval:31
TEST_IMM_OP( srai, x10, x2, 0x1, 0xfffffffe, 31, x13, 16, x11)

// rs1==x10, rd==x3, rs1_val > 0 and imm_val == (xlen-1), rs1_val == 134217728
// opcode: srai ; op1:x10; dest:x3; op1val:0x08000000;  immval:31
TEST_IMM_OP( srai, x3, x10, 0x0, 0x08000000, 31, x13, 20, x11)

// rs1==x0, rd==x1, rs1_val == imm_val and imm_val > 0 and imm_val < xlen, 
// opcode: srai ; op1:x0; dest:x1; op1val:0x00000009;  immval:9
TEST_IMM_OP( srai, x1, x0, 0x0, 0x00000009, 9, x13, 24, x11)

// rs1==x25, rd==x7, rs1_val == (-2**(xlen-1)) and imm_val >= 0 and imm_val < xlen, rs1_val == -2147483648
// opcode: srai ; op1:x25; dest:x7; op1val:0x80000000;  immval:9
TEST_IMM_OP( srai, x7, x25, 0x400000, 0x80000000, 9, x13, 28, x11)

// rs1==x7, rd==x0, rs1_val == 0 and imm_val >= 0 and imm_val < xlen, 
// opcode: srai ; op1:x7; dest:x0; op1val:0x00000000;  immval:31
TEST_IMM_OP( srai, x0, x7, 0x0, 0x00000000, 31, x13, 32, x11)

// rs1==x24, rd==x19, rs1_val == (2**(xlen-1)-1) and imm_val >= 0 and imm_val < xlen, imm_val == 1, rs1_val == 2147483647
// opcode: srai ; op1:x24; dest:x19; op1val:0x7fffffff;  immval:1
TEST_IMM_OP( srai, x19, x24, 0x3fffffff, 0x7fffffff, 1, x13, 36, x11)

// rs1==x8, rd==x27, rs1_val == 1 and imm_val >= 0 and imm_val < xlen, imm_val == 2, rs1_val == 1
// opcode: srai ; op1:x8; dest:x27; op1val:0x00000001;  immval:2
TEST_IMM_OP( srai, x27, x8, 0x0, 0x00000001, 2, x13, 40, x11)

// rs1==x29, rd==x5, imm_val == 8, 
// opcode: srai ; op1:x29; dest:x5; op1val:0xfffffff8;  immval:8
TEST_IMM_OP( srai, x5, x29, 0xffffff, 0xfffffff8, 8, x13, 44, x11)

// rs1==x26, rd==x20, imm_val == 16, rs1_val == -262145
// opcode: srai ; op1:x26; dest:x20; op1val:0xfffbffff;  immval:16
TEST_IMM_OP( srai, x20, x26, 0xfffb, 0xfffbffff, 16, x13, 48, x11)

// rs1==x21, rd==x17, imm_val == 29, rs1_val == -65537
// opcode: srai ; op1:x21; dest:x17; op1val:0xfffeffff;  immval:29
TEST_IMM_OP( srai, x17, x21, 0x7, 0xfffeffff, 29, x13, 52, x11)

// rs1==x31, rd==x28, imm_val == 27, rs1_val == -33554433
// opcode: srai ; op1:x31; dest:x28; op1val:0xfdffffff;  immval:27
TEST_IMM_OP( srai, x28, x31, 0x1f, 0xfdffffff, 27, x13, 56, x11)

// rs1==x17, rd==x25, imm_val == 23, rs1_val == -8388609
// opcode: srai ; op1:x17; dest:x25; op1val:0xff7fffff;  immval:23
TEST_IMM_OP( srai, x25, x17, 0x1fe, 0xff7fffff, 23, x13, 60, x11)

// rs1==x28, rd==x14, imm_val == 15, 
// opcode: srai ; op1:x28; dest:x14; op1val:0xfffffff6;  immval:15
TEST_IMM_OP( srai, x14, x28, 0x1ffff, 0xfffffff6, 15, x13, 64, x11)

// rs1==x12, rd==x2, imm_val == 21, rs1_val == -4097
// opcode: srai ; op1:x12; dest:x2; op1val:0xffffefff;  immval:21
TEST_IMM_OP( srai, x2, x12, 0x7ff, 0xffffefff, 21, x13, 68, x11)

// rs1==x6, rd==x23, imm_val == 10, 
// opcode: srai ; op1:x6; dest:x23; op1val:0x08000000;  immval:10
TEST_IMM_OP( srai, x23, x6, 0x20000, 0x08000000, 10, x13, 72, x11)

// rs1==x16, rd==x30, rs1_val == 2, 
// opcode: srai ; op1:x16; dest:x30; op1val:0x00000002;  immval:5
TEST_IMM_OP( srai, x30, x16, 0x0, 0x00000002, 5, x13, 76, x11)

// rs1==x11, rd==x9, rs1_val == 4, 
// opcode: srai ; op1:x11; dest:x9; op1val:0x00000004;  immval:14
TEST_IMM_OP( srai, x9, x11, 0x0, 0x00000004, 14, x13, 80, x7)
RVTEST_SIGBASE( x2,signature_x2_0)

// rs1==x30, rd==x6, rs1_val == 16, 
// opcode: srai ; op1:x30; dest:x6; op1val:0x00000010;  immval:15
TEST_IMM_OP( srai, x6, x30, 0x0, 0x00000010, 15, x2, 0, x7)

// rs1==x27, rd==x24, rs1_val == 32, 
// opcode: srai ; op1:x27; dest:x24; op1val:0x00000020;  immval:7
TEST_IMM_OP( srai, x24, x27, 0x0, 0x00000020, 7, x2, 4, x7)

// rs1==x20, rd==x21, rs1_val == 64, 
// opcode: srai ; op1:x20; dest:x21; op1val:0x00000040;  immval:29
TEST_IMM_OP( srai, x21, x20, 0x0, 0x00000040, 29, x2, 8, x7)

// rs1==x1, rd==x8, rs1_val == 128, 
// opcode: srai ; op1:x1; dest:x8; op1val:0x00000080;  immval:6
TEST_IMM_OP( srai, x8, x1, 0x2, 0x00000080, 6, x2, 12, x7)

// rs1==x23, rd==x22, rs1_val == 256, 
// opcode: srai ; op1:x23; dest:x22; op1val:0x00000100;  immval:12
TEST_IMM_OP( srai, x22, x23, 0x0, 0x00000100, 12, x2, 16, x7)

// rs1==x18, rd==x13, rs1_val == 512, 
// opcode: srai ; op1:x18; dest:x13; op1val:0x00000200;  immval:15
TEST_IMM_OP( srai, x13, x18, 0x0, 0x00000200, 15, x2, 20, x7)

// rs1==x4, rd==x16, rs1_val == 1024, 
// opcode: srai ; op1:x4; dest:x16; op1val:0x00000400;  immval:19
TEST_IMM_OP( srai, x16, x4, 0x0, 0x00000400, 19, x2, 24, x7)

// rs1==x3, rd==x31, rs1_val == 2048, 
// opcode: srai ; op1:x3; dest:x31; op1val:0x00000800;  immval:1
TEST_IMM_OP( srai, x31, x3, 0x400, 0x00000800, 1, x2, 28, x7)

// rs1==x5, rd==x18, rs1_val == 4096, 
// opcode: srai ; op1:x5; dest:x18; op1val:0x00001000;  immval:0
TEST_IMM_OP( srai, x18, x5, 0x1000, 0x00001000, 0, x2, 32, x7)

// rs1==x22, rd==x26, rs1_val == 8192, 
// opcode: srai ; op1:x22; dest:x26; op1val:0x00002000;  immval:31
TEST_IMM_OP( srai, x26, x22, 0x0, 0x00002000, 31, x2, 36, x7)

// rs1==x13, rd==x11, rs1_val == 16384, 
// opcode: srai ; op1:x13; dest:x11; op1val:0x00004000;  immval:16
TEST_IMM_OP( srai, x11, x13, 0x0, 0x00004000, 16, x2, 40, x7)

// rs1_val == 32768, 
// opcode: srai ; op1:x10; dest:x11; op1val:0x00008000;  immval:27
TEST_IMM_OP( srai, x11, x10, 0x0, 0x00008000, 27, x2, 44, x7)

// rs1_val == 65536, 
// opcode: srai ; op1:x10; dest:x11; op1val:0x00010000;  immval:21
TEST_IMM_OP( srai, x11, x10, 0x0, 0x00010000, 21, x2, 48, x7)

// rs1_val == 131072, 
// opcode: srai ; op1:x10; dest:x11; op1val:0x00020000;  immval:11
TEST_IMM_OP( srai, x11, x10, 0x40, 0x00020000, 11, x2, 52, x7)

// rs1_val == 262144, 
// opcode: srai ; op1:x10; dest:x11; op1val:0x00040000;  immval:30
TEST_IMM_OP( srai, x11, x10, 0x0, 0x00040000, 30, x2, 56, x7)

// rs1_val == 524288, 
// opcode: srai ; op1:x10; dest:x11; op1val:0x00080000;  immval:6
TEST_IMM_OP( srai, x11, x10, 0x2000, 0x00080000, 6, x2, 60, x7)

// rs1_val == 1048576, 
// opcode: srai ; op1:x10; dest:x11; op1val:0x00100000;  immval:23
TEST_IMM_OP( srai, x11, x10, 0x0, 0x00100000, 23, x2, 64, x7)

// rs1_val == 2097152, 
// opcode: srai ; op1:x10; dest:x11; op1val:0x00200000;  immval:17
TEST_IMM_OP( srai, x11, x10, 0x10, 0x00200000, 17, x2, 68, x7)

// rs1_val == 4194304, 
// opcode: srai ; op1:x10; dest:x11; op1val:0x00400000;  immval:18
TEST_IMM_OP( srai, x11, x10, 0x10, 0x00400000, 18, x2, 72, x7)

// rs1_val == 8388608, 
// opcode: srai ; op1:x10; dest:x11; op1val:0x00800000;  immval:3
TEST_IMM_OP( srai, x11, x10, 0x100000, 0x00800000, 3, x2, 76, x7)

// rs1_val == -513, 
// opcode: srai ; op1:x10; dest:x11; op1val:0xfffffdff;  immval:23
TEST_IMM_OP( srai, x11, x10, 0x1ff, 0xfffffdff, 23, x2, 80, x7)

// rs1_val == -1025, 
// opcode: srai ; op1:x10; dest:x11; op1val:0xfffffbff;  immval:23
TEST_IMM_OP( srai, x11, x10, 0x1ff, 0xfffffbff, 23, x2, 84, x7)

// rs1_val == -2049, 
// opcode: srai ; op1:x10; dest:x11; op1val:0xfffff7ff;  immval:21
TEST_IMM_OP( srai, x11, x10, 0x7ff, 0xfffff7ff, 21, x2, 88, x7)

// rs1_val == -8193, 
// opcode: srai ; op1:x10; dest:x11; op1val:0xffffdfff;  immval:16
TEST_IMM_OP( srai, x11, x10, 0xffff, 0xffffdfff, 16, x2, 92, x7)

// rs1_val == -16385, 
// opcode: srai ; op1:x10; dest:x11; op1val:0xffffbfff;  immval:10
TEST_IMM_OP( srai, x11, x10, 0x3fffef, 0xffffbfff, 10, x2, 96, x7)

// rs1_val == -32769, 
// opcode: srai ; op1:x10; dest:x11; op1val:0xffff7fff;  immval:6
TEST_IMM_OP( srai, x11, x10, 0x3fffdff, 0xffff7fff, 6, x2, 100, x7)

// rs1_val == -131073, 
// opcode: srai ; op1:x10; dest:x11; op1val:0xfffdffff;  immval:6
TEST_IMM_OP( srai, x11, x10, 0x3fff7ff, 0xfffdffff, 6, x2, 104, x7)

// rs1_val == -524289, 
// opcode: srai ; op1:x10; dest:x11; op1val:0xfff7ffff;  immval:4
TEST_IMM_OP( srai, x11, x10, 0xfff7fff, 0xfff7ffff, 4, x2, 108, x7)

// rs1_val == -1048577, 
// opcode: srai ; op1:x10; dest:x11; op1val:0xffefffff;  immval:5
TEST_IMM_OP( srai, x11, x10, 0x7ff7fff, 0xffefffff, 5, x2, 112, x7)

// rs1_val == -2097153, 
// opcode: srai ; op1:x10; dest:x11; op1val:0xffdfffff;  immval:8
TEST_IMM_OP( srai, x11, x10, 0xffdfff, 0xffdfffff, 8, x2, 116, x7)

// rs1_val == -4194305, 
// opcode: srai ; op1:x10; dest:x11; op1val:0xffbfffff;  immval:7
TEST_IMM_OP( srai, x11, x10, 0x1ff7fff, 0xffbfffff, 7, x2, 120, x7)

// rs1_val == -16777217, 
// opcode: srai ; op1:x10; dest:x11; op1val:0xfeffffff;  immval:0
TEST_IMM_OP( srai, x11, x10, 0xfeffffff, 0xfeffffff, 0, x2, 124, x7)

// rs1_val == -67108865, 
// opcode: srai ; op1:x10; dest:x11; op1val:0xfbffffff;  immval:30
TEST_IMM_OP( srai, x11, x10, 0x3, 0xfbffffff, 30, x2, 128, x7)

// rs1_val == -134217729, 
// opcode: srai ; op1:x10; dest:x11; op1val:0xf7ffffff;  immval:15
TEST_IMM_OP( srai, x11, x10, 0x1efff, 0xf7ffffff, 15, x2, 132, x7)

// rs1_val == -268435457, 
// opcode: srai ; op1:x10; dest:x11; op1val:0xefffffff;  immval:9
TEST_IMM_OP( srai, x11, x10, 0x77ffff, 0xefffffff, 9, x2, 136, x7)

// rs1_val == -536870913, 
// opcode: srai ; op1:x10; dest:x11; op1val:0xdfffffff;  immval:30
TEST_IMM_OP( srai, x11, x10, 0x3, 0xdfffffff, 30, x2, 140, x7)

// rs1_val == -9, 
// opcode: srai ; op1:x10; dest:x11; op1val:0xfffffff7;  immval:12
TEST_IMM_OP( srai, x11, x10, 0xfffff, 0xfffffff7, 12, x2, 144, x7)

// rs1_val == 16777216, 
// opcode: srai ; op1:x10; dest:x11; op1val:0x01000000;  immval:15
TEST_IMM_OP( srai, x11, x10, 0x200, 0x01000000, 15, x2, 148, x7)

// rs1_val == 33554432, 
// opcode: srai ; op1:x10; dest:x11; op1val:0x02000000;  immval:30
TEST_IMM_OP( srai, x11, x10, 0x0, 0x02000000, 30, x2, 152, x7)

// rs1_val == 268435456, 
// opcode: srai ; op1:x10; dest:x11; op1val:0x10000000;  immval:21
TEST_IMM_OP( srai, x11, x10, 0x80, 0x10000000, 21, x2, 156, x7)

// rs1_val == 536870912, 
// opcode: srai ; op1:x10; dest:x11; op1val:0x20000000;  immval:23
TEST_IMM_OP( srai, x11, x10, 0x40, 0x20000000, 23, x2, 160, x7)

// rs1_val == -1073741825, 
// opcode: srai ; op1:x10; dest:x11; op1val:0xbfffffff;  immval:8
TEST_IMM_OP( srai, x11, x10, 0xbfffff, 0xbfffffff, 8, x2, 164, x7)

// rs1_val == 1073741824, 
// opcode: srai ; op1:x10; dest:x11; op1val:0x40000000;  immval:21
TEST_IMM_OP( srai, x11, x10, 0x200, 0x40000000, 21, x2, 168, x7)

// rs1_val == 1431655765, 
// opcode: srai ; op1:x10; dest:x11; op1val:0x55555555;  immval:14
TEST_IMM_OP( srai, x11, x10, 0x15555, 0x55555555, 14, x2, 172, x7)

// rs1_val == -1431655766, 
// opcode: srai ; op1:x10; dest:x11; op1val:0xaaaaaaaa;  immval:7
TEST_IMM_OP( srai, x11, x10, 0x1555555, 0xaaaaaaaa, 7, x2, 176, x7)

// rs1_val == -3, 
// opcode: srai ; op1:x10; dest:x11; op1val:0xfffffffd;  immval:21
TEST_IMM_OP( srai, x11, x10, 0x7ff, 0xfffffffd, 21, x2, 180, x7)

// rs1_val == -17, 
// opcode: srai ; op1:x10; dest:x11; op1val:0xffffffef;  immval:0
TEST_IMM_OP( srai, x11, x10, 0xffffffef, 0xffffffef, 0, x2, 184, x7)

// rs1_val == -33, 
// opcode: srai ; op1:x10; dest:x11; op1val:0xffffffdf;  immval:5
TEST_IMM_OP( srai, x11, x10, 0x7fffffe, 0xffffffdf, 5, x2, 188, x7)

// rs1_val == -65, 
// opcode: srai ; op1:x10; dest:x11; op1val:0xffffffbf;  immval:16
TEST_IMM_OP( srai, x11, x10, 0xffff, 0xffffffbf, 16, x2, 192, x7)

// rs1_val == -129, 
// opcode: srai ; op1:x10; dest:x11; op1val:0xffffff7f;  immval:3
TEST_IMM_OP( srai, x11, x10, 0x1fffffef, 0xffffff7f, 3, x2, 196, x7)

// rs1_val == -257, 
// opcode: srai ; op1:x10; dest:x11; op1val:0xfffffeff;  immval:23
TEST_IMM_OP( srai, x11, x10, 0x1ff, 0xfffffeff, 23, x2, 200, x7)

// rs1_val == imm_val and imm_val > 0 and imm_val < xlen, 
// opcode: srai ; op1:x10; dest:x11; op1val:0x00000009;  immval:9
TEST_IMM_OP( srai, x11, x10, 0x0, 0x00000009, 9, x2, 204, x7)

// rs1_val == 0 and imm_val >= 0 and imm_val < xlen, 
// opcode: srai ; op1:x10; dest:x11; op1val:0x00000000;  immval:31
TEST_IMM_OP( srai, x11, x10, 0x0, 0x00000000, 31, x2, 208, x7)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x13_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x13_1:
    .fill 21*(XLEN/32),4,0xdeadbeef


signature_x2_0:
    .fill 53*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
