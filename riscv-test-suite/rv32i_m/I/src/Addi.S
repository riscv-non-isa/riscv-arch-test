
#include "compliance_model.h"
#include "compliance_test.h"

RVTEST_ISA("RV32I")

RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1
RVTEST_CASE(1,"//check ISA:=regex(.*I.*);def TEST_CASE_1=True;",addi)
la x1,signature_x1_1
TEST_IMM_OP( addi, x31, x30, -2, -1, -1, x1, 0, x2)
TEST_IMM_OP( addi, x30, x31, -16775170, -16777217, 2047, x1, 4, x2)
TEST_IMM_OP( addi, x29, x28, 1073743870, 1073741823, 2047, x1, 8, x2)
TEST_IMM_OP( addi, x28, x29, 1073741822, 1073741823, -1, x1, 12, x2)
TEST_IMM_OP( addi, x27, x26, -2147481601, -2147483648, 2047, x1, 16, x2)
TEST_IMM_OP( addi, x26, x27, 2047, 0, 2047, x1, 20, x2)
TEST_IMM_OP( addi, x25, x24, 2147485694, 2147483647, 2047, x1, 24, x2)
TEST_IMM_OP( addi, x24, x25, 2048, 1, 2047, x1, 28, x2)
TEST_IMM_OP( addi, x23, x22, -16779265, -16777217, -2048, x1, 32, x2)
TEST_IMM_OP( addi, x22, x23, -16777217, -16777217, 0, x1, 36, x2)
TEST_IMM_OP( addi, x21, x20, -16777216, -16777217, 1, x1, 40, x2)
TEST_IMM_OP( addi, x20, x21, 2049, 2, 2047, x1, 44, x2)
TEST_IMM_OP( addi, x19, x18, 2051, 4, 2047, x1, 48, x2)
TEST_IMM_OP( addi, x18, x19, 2055, 8, 2047, x1, 52, x2)
TEST_IMM_OP( addi, x17, x16, 2063, 16, 2047, x1, 56, x2)
TEST_IMM_OP( addi, x16, x17, 2079, 32, 2047, x1, 60, x2)
TEST_IMM_OP( addi, x15, x14, 2111, 64, 2047, x1, 64, x2)
TEST_IMM_OP( addi, x14, x15, 2175, 128, 2047, x1, 68, x2)
TEST_IMM_OP( addi, x13, x12, 2303, 256, 2047, x1, 72, x2)
TEST_IMM_OP( addi, x12, x13, 2559, 512, 2047, x1, 76, x2)
TEST_IMM_OP( addi, x11, x10, 3071, 1024, 2047, x1, 80, x2)
TEST_IMM_OP( addi, x10, x11, 4095, 2048, 2047, x1, 84, x2)
TEST_IMM_OP( addi, x9, x8, 6143, 4096, 2047, x1, 88, x2)
TEST_IMM_OP( addi, x8, x9, 10239, 8192, 2047, x1, 92, x2)
TEST_IMM_OP( addi, x7, x6, 18431, 16384, 2047, x1, 96, x2)
TEST_IMM_OP( addi, x6, x7, 34815, 32768, 2047, x1, 100, x2)
TEST_IMM_OP( addi, x5, x4, 67583, 65536, 2047, x1, 104, x2)
la x6,signature_x6_0
TEST_IMM_OP( addi, x4, x5, 133119, 131072, 2047, x6, 0, x7)
TEST_IMM_OP( addi, x3, x2, 264191, 262144, 2047, x6, 4, x7)
TEST_IMM_OP( addi, x2, x3, 526335, 524288, 2047, x6, 8, x7)
TEST_IMM_OP( addi, x1, x0, 1050623, 1048576, 2047, x6, 12, x7)
TEST_IMM_OP( addi, x0, x1, 2099199, 2097152, 2047, x6, 16, x7)
TEST_IMM_OP( addi, x31, x31, 4196351, 4194304, 2047, x6, 20, x7)
TEST_IMM_OP( addi, x11, x10, 8390655, 8388608, 2047, x6, 24, x7)
TEST_IMM_OP( addi, x11, x10, 16779263, 16777216, 2047, x6, 28, x7)
TEST_IMM_OP( addi, x11, x10, 33556479, 33554432, 2047, x6, 32, x7)
TEST_IMM_OP( addi, x11, x10, 67110911, 67108864, 2047, x6, 36, x7)
TEST_IMM_OP( addi, x11, x10, 134219775, 134217728, 2047, x6, 40, x7)
TEST_IMM_OP( addi, x11, x10, 268437503, 268435456, 2047, x6, 44, x7)
TEST_IMM_OP( addi, x11, x10, 536872959, 536870912, 2047, x6, 48, x7)
TEST_IMM_OP( addi, x11, x10, 1073743871, 1073741824, 2047, x6, 52, x7)
TEST_IMM_OP( addi, x11, x10, 2045, -2, 2047, x6, 56, x7)
TEST_IMM_OP( addi, x11, x10, 2044, -3, 2047, x6, 60, x7)
TEST_IMM_OP( addi, x11, x10, 2042, -5, 2047, x6, 64, x7)
TEST_IMM_OP( addi, x11, x10, 2038, -9, 2047, x6, 68, x7)
TEST_IMM_OP( addi, x11, x10, 2030, -17, 2047, x6, 72, x7)
TEST_IMM_OP( addi, x11, x10, 2014, -33, 2047, x6, 76, x7)
TEST_IMM_OP( addi, x11, x10, 1982, -65, 2047, x6, 80, x7)
TEST_IMM_OP( addi, x11, x10, 1918, -129, 2047, x6, 84, x7)
TEST_IMM_OP( addi, x11, x10, 1790, -257, 2047, x6, 88, x7)
TEST_IMM_OP( addi, x11, x10, 1534, -513, 2047, x6, 92, x7)
TEST_IMM_OP( addi, x11, x10, 1022, -1025, 2047, x6, 96, x7)
TEST_IMM_OP( addi, x11, x10, -2, -2049, 2047, x6, 100, x7)
TEST_IMM_OP( addi, x11, x10, -2050, -4097, 2047, x6, 104, x7)
TEST_IMM_OP( addi, x11, x10, -6146, -8193, 2047, x6, 108, x7)
TEST_IMM_OP( addi, x11, x10, -14338, -16385, 2047, x6, 112, x7)
TEST_IMM_OP( addi, x11, x10, -30722, -32769, 2047, x6, 116, x7)
TEST_IMM_OP( addi, x11, x10, -63490, -65537, 2047, x6, 120, x7)
TEST_IMM_OP( addi, x11, x10, -129026, -131073, 2047, x6, 124, x7)
TEST_IMM_OP( addi, x11, x10, -260098, -262145, 2047, x6, 128, x7)
TEST_IMM_OP( addi, x11, x10, -522242, -524289, 2047, x6, 132, x7)
TEST_IMM_OP( addi, x11, x10, -1046530, -1048577, 2047, x6, 136, x7)
TEST_IMM_OP( addi, x11, x10, -2095106, -2097153, 2047, x6, 140, x7)
TEST_IMM_OP( addi, x11, x10, -4192258, -4194305, 2047, x6, 144, x7)
TEST_IMM_OP( addi, x11, x10, -8386562, -8388609, 2047, x6, 148, x7)
TEST_IMM_OP( addi, x11, x10, -33552386, -33554433, 2047, x6, 152, x7)
TEST_IMM_OP( addi, x11, x10, -67106818, -67108865, 2047, x6, 156, x7)
TEST_IMM_OP( addi, x11, x10, -134215682, -134217729, 2047, x6, 160, x7)
TEST_IMM_OP( addi, x11, x10, -268433410, -268435457, 2047, x6, 164, x7)
TEST_IMM_OP( addi, x11, x10, -536868866, -536870913, 2047, x6, 168, x7)
TEST_IMM_OP( addi, x11, x10, -1073739778, -1073741825, 2047, x6, 172, x7)
TEST_IMM_OP( addi, x11, x10, 1431657812, 1431655765, 2047, x6, 176, x7)
TEST_IMM_OP( addi, x11, x10, -1431653719, -1431655766, 2047, x6, 180, x7)
TEST_IMM_OP( addi, x11, x10, -16777215, -16777217, 2, x6, 184, x7)
TEST_IMM_OP( addi, x11, x10, -16777213, -16777217, 4, x6, 188, x7)
TEST_IMM_OP( addi, x11, x10, -16777209, -16777217, 8, x6, 192, x7)
TEST_IMM_OP( addi, x11, x10, -16777201, -16777217, 16, x6, 196, x7)
TEST_IMM_OP( addi, x11, x10, -16777185, -16777217, 32, x6, 200, x7)
TEST_IMM_OP( addi, x11, x10, -16777153, -16777217, 64, x6, 204, x7)
TEST_IMM_OP( addi, x11, x10, -16777089, -16777217, 128, x6, 208, x7)
TEST_IMM_OP( addi, x11, x10, -16776961, -16777217, 256, x6, 212, x7)
TEST_IMM_OP( addi, x11, x10, -16777282, -16777217, -65, x6, 216, x7)
TEST_IMM_OP( addi, x11, x10, -16777346, -16777217, -129, x6, 220, x7)
TEST_IMM_OP( addi, x11, x10, -16777474, -16777217, -257, x6, 224, x7)
TEST_IMM_OP( addi, x11, x10, -16777730, -16777217, -513, x6, 228, x7)
TEST_IMM_OP( addi, x11, x10, -16778242, -16777217, -1025, x6, 232, x7)
TEST_IMM_OP( addi, x11, x10, -16775852, -16777217, 1365, x6, 236, x7)
TEST_IMM_OP( addi, x11, x10, -16778583, -16777217, -1366, x6, 240, x7)
TEST_IMM_OP( addi, x11, x10, -16776705, -16777217, 512, x6, 244, x7)
TEST_IMM_OP( addi, x11, x10, -16776193, -16777217, 1024, x6, 248, x7)
TEST_IMM_OP( addi, x11, x10, -16777219, -16777217, -2, x6, 252, x7)
TEST_IMM_OP( addi, x11, x10, -16777220, -16777217, -3, x6, 256, x7)
TEST_IMM_OP( addi, x11, x10, -16777222, -16777217, -5, x6, 260, x7)
TEST_IMM_OP( addi, x11, x10, -16777226, -16777217, -9, x6, 264, x7)
TEST_IMM_OP( addi, x11, x10, -16777234, -16777217, -17, x6, 268, x7)
TEST_IMM_OP( addi, x11, x10, -16777250, -16777217, -33, x6, 272, x7)
TEST_IMM_OP( addi, x11, x10, 1050623, 1048576, 2047, x6, 276, x7)
TEST_IMM_OP( addi, x11, x10, 2099199, 2097152, 2047, x6, 280, x7)
TEST_IMM_OP( addi, x11, x10, 4196351, 4194304, 2047, x6, 284, x7)
#endif


RVMODEL_HALT
RVTEST_CODE_END

RVTEST_DATA_BEGIN
.align 4
.align 4
rvtest_data:
.word 0xbabecafe
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
.align 4

signature_x1_0:
    .fill 0*(XLEN/32),4,0xafacadee


signature_x1_1:
    .fill 27*(XLEN/32),4,0xafacadee


signature_x6_0:
    .fill 72*(XLEN/32),4,0xafacadee

RVMODEL_DATA_END
