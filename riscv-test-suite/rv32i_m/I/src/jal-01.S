 
// -----------
// This file was generated by riscv_ctg (https://gitlab.com/incoresemi/riscv-compliance/riscv_ctg)
// version   : 0.1.0
// timestamp : Thu Nov  5 12:29:34 2020 GMT
// usage     : riscv_ctg \
//                  -- cgf /scratch/git-repo/incoresemi/riscv-compliance/riscv_ctg/sample_cgfs/rv32i.cgf \
//                  -- xlen 32 \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the jal instruction of the RISC-V I extension for the jal covergroup.
// 
#include "compliance_model.h"
#include "compliance_test.h"
RVTEST_ISA("RV32I")

RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*);def TEST_CASE_1=True;",jal)

RVTEST_SIGBASE( x7,signature_x7_1)

// rd==x25, imm_val < 0, 
// opcode: jal; dest:x25; immval:8; align:0
TEST_JAL_OP(x15, x25, 8, 1b, x7, 0,0)

// rd==x30, imm_val > 0, 
// opcode: jal; dest:x30; immval:2; align:0
TEST_JAL_OP(x15, x30, 2, 3f, x7, 4,0)

// rd==x29, imm_val == (-(2**(18))), 
// opcode: jal; dest:x29; immval:262144; align:0
TEST_JAL_OP(x15, x29, 262144, 1b, x7, 8,0)

// rd==x10, imm_val == ((2**(18))), 
// opcode: jal; dest:x10; immval:262144; align:0
TEST_JAL_OP(x15, x10, 262144, 3f, x7, 12,0)

// rd==x31, 
// opcode: jal; dest:x31; immval:0; align:0
TEST_JAL_OP(x15, x31, 0, 3f, x7, 16,0)

// rd==x11, 
// opcode: jal; dest:x11; immval:0; align:0
TEST_JAL_OP(x15, x11, 0, 3f, x7, 20,0)

// rd==x4, 
// opcode: jal; dest:x4; immval:0; align:0
TEST_JAL_OP(x15, x4, 0, 3f, x7, 24,0)

// rd==x19, 
// opcode: jal; dest:x19; immval:0; align:0
TEST_JAL_OP(x15, x19, 0, 3f, x7, 28,0)

// rd==x6, 
// opcode: jal; dest:x6; immval:0; align:0
TEST_JAL_OP(x15, x6, 0, 3f, x7, 32,0)

// rd==x12, 
// opcode: jal; dest:x12; immval:0; align:0
TEST_JAL_OP(x15, x12, 0, 3f, x7, 36,0)

// rd==x23, 
// opcode: jal; dest:x23; immval:0; align:0
TEST_JAL_OP(x15, x23, 0, 3f, x7, 40,0)

// rd==x3, 
// opcode: jal; dest:x3; immval:0; align:0
TEST_JAL_OP(x15, x3, 0, 3f, x7, 44,0)

// rd==x9, 
// opcode: jal; dest:x9; immval:0; align:0
TEST_JAL_OP(x15, x9, 0, 3f, x7, 48,0)

// rd==x2, 
// opcode: jal; dest:x2; immval:0; align:0
TEST_JAL_OP(x15, x2, 0, 3f, x7, 52,0)

// rd==x17, 
// opcode: jal; dest:x17; immval:0; align:0
TEST_JAL_OP(x15, x17, 0, 3f, x7, 56,0)

// rd==x20, 
// opcode: jal; dest:x20; immval:0; align:0
TEST_JAL_OP(x15, x20, 0, 3f, x7, 60,0)

// rd==x27, 
// opcode: jal; dest:x27; immval:0; align:0
TEST_JAL_OP(x15, x27, 0, 3f, x7, 64,0)

// rd==x16, 
// opcode: jal; dest:x16; immval:0; align:0
TEST_JAL_OP(x15, x16, 0, 3f, x7, 68,0)

// rd==x0, 
// opcode: jal; dest:x0; immval:0; align:0
TEST_JAL_OP(x15, x0, 0, 3f, x7, 72,0)

// rd==x13, 
// opcode: jal; dest:x13; immval:0; align:0
TEST_JAL_OP(x15, x13, 0, 3f, x7, 76,0)

// rd==x26, 
// opcode: jal; dest:x26; immval:0; align:0
TEST_JAL_OP(x15, x26, 0, 3f, x7, 80,0)

// rd==x1, 
// opcode: jal; dest:x1; immval:0; align:0
TEST_JAL_OP(x15, x1, 0, 3f, x7, 84,0)

// rd==x5, 
// opcode: jal; dest:x5; immval:0; align:0
TEST_JAL_OP(x15, x5, 0, 3f, x7, 88,0)

// rd==x14, 
// opcode: jal; dest:x14; immval:0; align:0
TEST_JAL_OP(x15, x14, 0, 3f, x7, 92,0)

// rd==x28, 
// opcode: jal; dest:x28; immval:0; align:0
TEST_JAL_OP(x15, x28, 0, 3f, x7, 96,0)

// rd==x24, 
// opcode: jal; dest:x24; immval:0; align:0
TEST_JAL_OP(x15, x24, 0, 3f, x7, 100,0)

// rd==x8, 
// opcode: jal; dest:x8; immval:0; align:0
TEST_JAL_OP(x15, x8, 0, 3f, x7, 104,0)

// rd==x18, 
// opcode: jal; dest:x18; immval:0; align:0
TEST_JAL_OP(x15, x18, 0, 3f, x7, 108,0)

// rd==x22, 
// opcode: jal; dest:x22; immval:0; align:0
TEST_JAL_OP(x2, x22, 0, 3f, x7, 112,0)
RVTEST_SIGBASE( x1,signature_x1_0)

// rd==x15, 
// opcode: jal; dest:x15; immval:0; align:0
TEST_JAL_OP(x2, x15, 0, 3f, x1, 0,0)

// rd==x21, 
// opcode: jal; dest:x21; immval:0; align:0
TEST_JAL_OP(x2, x21, 0, 3f, x1, 4,0)

// rd==x7, 
// opcode: jal; dest:x7; immval:0; align:0
TEST_JAL_OP(x2, x7, 0, 3f, x1, 8,0)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x7_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x7_1:
    .fill 29*(XLEN/32),4,0xdeadbeef


signature_x1_0:
    .fill 3*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
