
#include "compliance_model.h"
#include "compliance_test.h"

RVTEST_ISA("RV32I")

RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1
RVTEST_CASE(1,"//check ISA:=regex(.*I.*);def TEST_CASE_1=True;",sltu)
la x1,signature_x1_1
TEST_RR_OP(sltu, x31, x30, x29, 1, 0, 4160749567, x1, 0, x2)
TEST_RR_OP(sltu, x30, x31, x28, 0, 4294967295, 4160749567, x1, 4, x2)
TEST_RR_OP(sltu, x29, x28, x31, 1, 1, 4160749567, x1, 8, x2)
TEST_RR_OP(sltu, x28, x29, x30, 0, 4160749567, 0, x1, 12, x2)
TEST_RR_OP(sltu, x27, x26, x25, 1, 4160749567, 4294967295, x1, 16, x2)
TEST_RR_OP(sltu, x26, x27, x24, 0, 4160749567, 1, x1, 20, x2)
TEST_RR_OP(sltu, x25, x24, x27, 0, 4160749567, 4160749567, x1, 24, x2)
TEST_RR_OP(sltu, x24, x25, x26, 1, 2, 4160749567, x1, 28, x2)
TEST_RR_OP(sltu, x23, x22, x21, 1, 4, 4160749567, x1, 32, x2)
TEST_RR_OP(sltu, x22, x23, x20, 1, 8, 4160749567, x1, 36, x2)
TEST_RR_OP(sltu, x21, x20, x23, 1, 16, 4160749567, x1, 40, x2)
TEST_RR_OP(sltu, x20, x21, x22, 1, 32, 4160749567, x1, 44, x2)
TEST_RR_OP(sltu, x19, x18, x17, 1, 64, 4160749567, x1, 48, x2)
TEST_RR_OP(sltu, x18, x19, x16, 1, 128, 4160749567, x1, 52, x2)
TEST_RR_OP(sltu, x17, x16, x19, 1, 256, 4160749567, x1, 56, x2)
TEST_RR_OP(sltu, x16, x17, x18, 1, 512, 4160749567, x1, 60, x2)
TEST_RR_OP(sltu, x15, x14, x13, 1, 1024, 4160749567, x1, 64, x2)
TEST_RR_OP(sltu, x14, x15, x12, 1, 2048, 4160749567, x1, 68, x2)
TEST_RR_OP(sltu, x13, x12, x15, 1, 4096, 4160749567, x1, 72, x2)
TEST_RR_OP(sltu, x12, x13, x14, 1, 8192, 4160749567, x1, 76, x2)
TEST_RR_OP(sltu, x11, x10, x9, 1, 16384, 4160749567, x1, 80, x2)
TEST_RR_OP(sltu, x10, x11, x8, 1, 32768, 4160749567, x1, 84, x2)
TEST_RR_OP(sltu, x9, x8, x11, 1, 65536, 4160749567, x1, 88, x2)
TEST_RR_OP(sltu, x8, x9, x10, 1, 131072, 4160749567, x1, 92, x2)
TEST_RR_OP(sltu, x7, x6, x5, 1, 262144, 4160749567, x1, 96, x2)
TEST_RR_OP(sltu, x6, x7, x4, 1, 524288, 4160749567, x1, 100, x9)
la x8,signature_x8_0
TEST_RR_OP(sltu, x5, x4, x7, 1, 1048576, 4160749567, x8, 0, x9)
TEST_RR_OP(sltu, x4, x5, x6, 1, 2097152, 4160749567, x8, 4, x9)
TEST_RR_OP(sltu, x3, x2, x1, 1, 4194304, 4160749567, x8, 8, x9)
TEST_RR_OP(sltu, x2, x3, x0, 1, 8388608, 4160749567, x8, 12, x9)
TEST_RR_OP(sltu, x1, x0, x3, 1, 16777216, 4160749567, x8, 16, x9)
TEST_RR_OP(sltu, x0, x1, x2, 1, 33554432, 4160749567, x8, 20, x9)
TEST_RR_OP(sltu, x31, x30, x30, 1, 67108864, 4160749567, x8, 24, x9)
TEST_RR_OP(sltu, x31, x31, x30, 1, 134217728, 4160749567, x8, 28, x9)
TEST_RR_OP(sltu, x31, x30, x31, 1, 268435456, 4160749567, x8, 32, x9)
TEST_RR_OP(sltu, x31, x31, x31, 1, 536870912, 4160749567, x8, 36, x9)
TEST_RR_OP(sltu, x12, x10, x11, 1, 1073741824, 4160749567, x8, 40, x9)
TEST_RR_OP(sltu, x12, x10, x11, 1, 2147483648, 4160749567, x8, 44, x9)
TEST_RR_OP(sltu, x12, x10, x11, 0, 4294967294, 4160749567, x8, 48, x9)
TEST_RR_OP(sltu, x12, x10, x11, 0, 4294967293, 4160749567, x8, 52, x9)
TEST_RR_OP(sltu, x12, x10, x11, 0, 4294967291, 4160749567, x8, 56, x9)
TEST_RR_OP(sltu, x12, x10, x11, 0, 4294967287, 4160749567, x8, 60, x9)
TEST_RR_OP(sltu, x12, x10, x11, 0, 4294967279, 4160749567, x8, 64, x9)
TEST_RR_OP(sltu, x12, x10, x11, 0, 4294967263, 4160749567, x8, 68, x9)
TEST_RR_OP(sltu, x12, x10, x11, 0, 4294967231, 4160749567, x8, 72, x9)
TEST_RR_OP(sltu, x12, x10, x11, 0, 4294967167, 4160749567, x8, 76, x9)
TEST_RR_OP(sltu, x12, x10, x11, 0, 4294967039, 4160749567, x8, 80, x9)
TEST_RR_OP(sltu, x12, x10, x11, 0, 4294966783, 4160749567, x8, 84, x9)
TEST_RR_OP(sltu, x12, x10, x11, 0, 4294966271, 4160749567, x8, 88, x9)
TEST_RR_OP(sltu, x12, x10, x11, 0, 4294965247, 4160749567, x8, 92, x9)
TEST_RR_OP(sltu, x12, x10, x11, 0, 4294963199, 4160749567, x8, 96, x9)
TEST_RR_OP(sltu, x12, x10, x11, 0, 4294959103, 4160749567, x8, 100, x9)
TEST_RR_OP(sltu, x12, x10, x11, 0, 4294950911, 4160749567, x8, 104, x9)
TEST_RR_OP(sltu, x12, x10, x11, 0, 4294934527, 4160749567, x8, 108, x9)
TEST_RR_OP(sltu, x12, x10, x11, 0, 4294901759, 4160749567, x8, 112, x9)
TEST_RR_OP(sltu, x12, x10, x11, 0, 4294836223, 4160749567, x8, 116, x9)
TEST_RR_OP(sltu, x12, x10, x11, 0, 4294705151, 4160749567, x8, 120, x9)
TEST_RR_OP(sltu, x12, x10, x11, 0, 4294443007, 4160749567, x8, 124, x9)
TEST_RR_OP(sltu, x12, x10, x11, 0, 4293918719, 4160749567, x8, 128, x9)
TEST_RR_OP(sltu, x12, x10, x11, 0, 4292870143, 4160749567, x8, 132, x9)
TEST_RR_OP(sltu, x12, x10, x11, 0, 4290772991, 4160749567, x8, 136, x9)
TEST_RR_OP(sltu, x12, x10, x11, 0, 4286578687, 4160749567, x8, 140, x9)
TEST_RR_OP(sltu, x12, x10, x11, 0, 4278190079, 4160749567, x8, 144, x9)
TEST_RR_OP(sltu, x12, x10, x11, 0, 4261412863, 4160749567, x8, 148, x9)
TEST_RR_OP(sltu, x12, x10, x11, 0, 4227858431, 4160749567, x8, 152, x9)
TEST_RR_OP(sltu, x12, x10, x11, 1, 4026531839, 4160749567, x8, 156, x9)
TEST_RR_OP(sltu, x12, x10, x11, 1, 3758096383, 4160749567, x8, 160, x9)
TEST_RR_OP(sltu, x12, x10, x11, 1, 3221225471, 4160749567, x8, 164, x9)
TEST_RR_OP(sltu, x12, x10, x11, 1, 2147483647, 4160749567, x8, 168, x9)
TEST_RR_OP(sltu, x12, x10, x11, 1, 1431655765, 4160749567, x8, 172, x9)
TEST_RR_OP(sltu, x12, x10, x11, 1, 2863311530, 4160749567, x8, 176, x9)
TEST_RR_OP(sltu, x12, x10, x11, 0, 4160749567, 2, x8, 180, x9)
TEST_RR_OP(sltu, x12, x10, x11, 1, 4160749567, 4286578687, x8, 184, x9)
TEST_RR_OP(sltu, x12, x10, x11, 1, 4160749567, 4278190079, x8, 188, x9)
TEST_RR_OP(sltu, x12, x10, x11, 1, 4160749567, 4261412863, x8, 192, x9)
TEST_RR_OP(sltu, x12, x10, x11, 1, 4160749567, 4227858431, x8, 196, x9)
TEST_RR_OP(sltu, x12, x10, x11, 0, 4160749567, 4026531839, x8, 200, x9)
TEST_RR_OP(sltu, x12, x10, x11, 0, 4160749567, 3758096383, x8, 204, x9)
TEST_RR_OP(sltu, x12, x10, x11, 0, 4160749567, 3221225471, x8, 208, x9)
TEST_RR_OP(sltu, x12, x10, x11, 0, 4160749567, 2147483647, x8, 212, x9)
TEST_RR_OP(sltu, x12, x10, x11, 0, 4160749567, 1431655765, x8, 216, x9)
TEST_RR_OP(sltu, x12, x10, x11, 0, 4160749567, 2863311530, x8, 220, x9)
TEST_RR_OP(sltu, x12, x10, x11, 0, 4160749567, 4, x8, 224, x9)
TEST_RR_OP(sltu, x12, x10, x11, 0, 4160749567, 8, x8, 228, x9)
TEST_RR_OP(sltu, x12, x10, x11, 0, 4160749567, 16, x8, 232, x9)
TEST_RR_OP(sltu, x12, x10, x11, 0, 4160749567, 32, x8, 236, x9)
TEST_RR_OP(sltu, x12, x10, x11, 0, 4160749567, 64, x8, 240, x9)
TEST_RR_OP(sltu, x12, x10, x11, 0, 4160749567, 128, x8, 244, x9)
TEST_RR_OP(sltu, x12, x10, x11, 0, 4160749567, 256, x8, 248, x9)
TEST_RR_OP(sltu, x12, x10, x11, 0, 4160749567, 512, x8, 252, x9)
TEST_RR_OP(sltu, x12, x10, x11, 0, 4160749567, 1024, x8, 256, x9)
TEST_RR_OP(sltu, x12, x10, x11, 0, 4160749567, 2048, x8, 260, x9)
TEST_RR_OP(sltu, x12, x10, x11, 0, 4160749567, 4096, x8, 264, x9)
TEST_RR_OP(sltu, x12, x10, x11, 0, 4160749567, 8192, x8, 268, x9)
TEST_RR_OP(sltu, x12, x10, x11, 0, 4160749567, 16384, x8, 272, x9)
TEST_RR_OP(sltu, x12, x10, x11, 0, 4160749567, 32768, x8, 276, x9)
TEST_RR_OP(sltu, x12, x10, x11, 0, 4160749567, 65536, x8, 280, x9)
TEST_RR_OP(sltu, x12, x10, x11, 0, 4160749567, 131072, x8, 284, x9)
TEST_RR_OP(sltu, x12, x10, x11, 0, 4160749567, 262144, x8, 288, x9)
TEST_RR_OP(sltu, x12, x10, x11, 0, 4160749567, 524288, x8, 292, x9)
TEST_RR_OP(sltu, x12, x10, x11, 0, 4160749567, 1048576, x8, 296, x9)
TEST_RR_OP(sltu, x12, x10, x11, 0, 4160749567, 2097152, x8, 300, x9)
TEST_RR_OP(sltu, x12, x10, x11, 0, 4160749567, 4194304, x8, 304, x9)
TEST_RR_OP(sltu, x12, x10, x11, 0, 4160749567, 8388608, x8, 308, x9)
TEST_RR_OP(sltu, x12, x10, x11, 0, 4160749567, 16777216, x8, 312, x9)
TEST_RR_OP(sltu, x12, x10, x11, 0, 4160749567, 33554432, x8, 316, x9)
TEST_RR_OP(sltu, x12, x10, x11, 0, 4160749567, 67108864, x8, 320, x9)
TEST_RR_OP(sltu, x12, x10, x11, 0, 4160749567, 134217728, x8, 324, x9)
TEST_RR_OP(sltu, x12, x10, x11, 0, 4160749567, 268435456, x8, 328, x9)
TEST_RR_OP(sltu, x12, x10, x11, 0, 4160749567, 536870912, x8, 332, x9)
TEST_RR_OP(sltu, x12, x10, x11, 0, 4160749567, 1073741824, x8, 336, x9)
TEST_RR_OP(sltu, x12, x10, x11, 0, 4160749567, 2147483648, x8, 340, x9)
TEST_RR_OP(sltu, x12, x10, x11, 1, 4160749567, 4294967294, x8, 344, x9)
TEST_RR_OP(sltu, x12, x10, x11, 1, 4160749567, 4294967293, x8, 348, x9)
TEST_RR_OP(sltu, x12, x10, x11, 1, 4160749567, 4294967291, x8, 352, x9)
TEST_RR_OP(sltu, x12, x10, x11, 1, 4160749567, 4294967287, x8, 356, x9)
TEST_RR_OP(sltu, x12, x10, x11, 1, 4160749567, 4294967279, x8, 360, x9)
TEST_RR_OP(sltu, x12, x10, x11, 1, 4160749567, 4294967263, x8, 364, x9)
TEST_RR_OP(sltu, x12, x10, x11, 1, 4160749567, 4294967231, x8, 368, x9)
TEST_RR_OP(sltu, x12, x10, x11, 1, 4160749567, 4294967167, x8, 372, x9)
TEST_RR_OP(sltu, x12, x10, x11, 1, 4160749567, 4294967039, x8, 376, x9)
TEST_RR_OP(sltu, x12, x10, x11, 1, 4160749567, 4294966783, x8, 380, x9)
TEST_RR_OP(sltu, x12, x10, x11, 1, 4160749567, 4294966271, x8, 384, x9)
TEST_RR_OP(sltu, x12, x10, x11, 1, 4160749567, 4294965247, x8, 388, x9)
TEST_RR_OP(sltu, x12, x10, x11, 1, 4160749567, 4294963199, x8, 392, x9)
TEST_RR_OP(sltu, x12, x10, x11, 1, 4160749567, 4294959103, x8, 396, x9)
TEST_RR_OP(sltu, x12, x10, x11, 1, 4160749567, 4294950911, x8, 400, x9)
TEST_RR_OP(sltu, x12, x10, x11, 1, 4160749567, 4294934527, x8, 404, x9)
TEST_RR_OP(sltu, x12, x10, x11, 1, 4160749567, 4294901759, x8, 408, x9)
TEST_RR_OP(sltu, x12, x10, x11, 1, 4160749567, 4294836223, x8, 412, x9)
TEST_RR_OP(sltu, x12, x10, x11, 1, 4160749567, 4294705151, x8, 416, x9)
TEST_RR_OP(sltu, x12, x10, x11, 1, 4160749567, 4294443007, x8, 420, x9)
TEST_RR_OP(sltu, x12, x10, x11, 1, 4160749567, 4293918719, x8, 424, x9)
TEST_RR_OP(sltu, x12, x10, x11, 1, 4160749567, 4292870143, x8, 428, x9)
TEST_RR_OP(sltu, x12, x10, x11, 1, 4160749567, 4290772991, x8, 432, x9)
TEST_RR_OP(sltu, x12, x10, x11, 1, 8388608, 4160749567, x8, 436, x9)
TEST_RR_OP(sltu, x12, x10, x11, 1, 16777216, 4160749567, x8, 440, x9)
TEST_RR_OP(sltu, x12, x10, x11, 1, 33554432, 4160749567, x8, 444, x9)
TEST_RR_OP(sltu, x12, x10, x11, 1, 67108864, 4160749567, x8, 448, x9)
TEST_RR_OP(sltu, x12, x10, x11, 1, 134217728, 4160749567, x8, 452, x9)
TEST_RR_OP(sltu, x12, x10, x11, 1, 268435456, 4160749567, x8, 456, x9)
TEST_RR_OP(sltu, x12, x10, x11, 1, 536870912, 4160749567, x8, 460, x9)
#endif


RVMODEL_HALT
RVTEST_CODE_END

RVTEST_DATA_BEGIN
.align 4
.align 4
rvtest_data:
.word 0xbabecafe
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
.align 4

signature_x1_0:
    .fill 0*(XLEN/32),4,0xafacadee


signature_x1_1:
    .fill 26*(XLEN/32),4,0xafacadee


signature_x8_0:
    .fill 116*(XLEN/32),4,0xafacadee

RVMODEL_DATA_END
