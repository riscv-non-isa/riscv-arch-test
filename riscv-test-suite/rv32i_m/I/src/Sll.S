
#include "compliance_model.h"
#include "compliance_test.h"

RVTEST_ISA("RV32i")

RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1
RVTEST_CASE(1,"//check ISA:=regex(.*I.*);def TEST_CASE_1=True;",sll)
la x1,signature_x1_1
TEST_RR_OP(sll, x31, x30, x29, -36028801313931264, -16777217, 31, x1, 0, x2)
TEST_RR_OP(sll, x30, x31, x28, 2305843004918726656, 1073741823, 31, x1, 4, x2)
TEST_RR_OP(sll, x29, x28, x31, -2164260865, -16777217, 0, x1, 8, x2)
TEST_RR_OP(sll, x28, x29, x30, 1073741823, 1073741823, 0, x1, 12, x2)
TEST_RR_OP(sll, x27, x26, x25, 1048576, 16, 16, x1, 16, x2)
TEST_RR_OP(sll, x26, x27, x24, -4611686018427387904, -2147483648, 31, x1, 20, x2)
TEST_RR_OP(sll, x25, x24, x27, 0, 0, 31, x1, 24, x2)
TEST_RR_OP(sll, x24, x25, x26, 4611686014132420608, 2147483647, 31, x1, 28, x2)
TEST_RR_OP(sll, x23, x22, x21, 0, 1, 31, x1, 32, x2)
TEST_RR_OP(sll, x22, x23, x20, -2181038082, -16777217, 1, x1, 36, x2)
TEST_RR_OP(sll, x21, x20, x23, -2214592516, -16777217, 2, x1, 40, x2)
TEST_RR_OP(sll, x20, x21, x22, -2415919120, -16777217, 4, x1, 44, x2)
TEST_RR_OP(sll, x19, x18, x17, -6442451200, -16777217, 8, x1, 48, x2)
TEST_RR_OP(sll, x18, x19, x16, -18014401730707456, -16777217, 30, x1, 52, x2)
TEST_RR_OP(sll, x17, x16, x19, -9007201939095552, -16777217, 29, x1, 56, x2)
TEST_RR_OP(sll, x16, x17, x18, -2251802095386624, -16777217, 27, x1, 60, x2)
TEST_RR_OP(sll, x15, x14, x13, -140739644227584, -16777217, 23, x1, 64, x2)
TEST_RR_OP(sll, x14, x15, x12, -551903330304, -16777217, 15, x1, 68, x2)
TEST_RR_OP(sll, x13, x12, x15, -35186521669632, -16777217, 21, x1, 72, x2)
TEST_RR_OP(sll, x12, x13, x14, -19327353856, -16777217, 10, x1, 76, x2)
TEST_RR_OP(sll, x11, x10, x9, 4294967296, 2, 31, x1, 80, x2)
TEST_RR_OP(sll, x10, x11, x8, 8589934592, 4, 31, x1, 84, x2)
TEST_RR_OP(sll, x9, x8, x11, 17179869184, 8, 31, x1, 88, x2)
TEST_RR_OP(sll, x8, x9, x10, 68719476736, 32, 31, x1, 92, x2)
TEST_RR_OP(sll, x7, x6, x5, 137438953472, 64, 31, x1, 96, x2)
TEST_RR_OP(sll, x6, x7, x4, 274877906944, 128, 31, x1, 100, x9)
la x8,signature_x8_0
TEST_RR_OP(sll, x5, x4, x7, 549755813888, 256, 31, x8, 0, x9)
TEST_RR_OP(sll, x4, x5, x6, 1099511627776, 512, 31, x8, 4, x9)
TEST_RR_OP(sll, x3, x2, x1, 2199023255552, 1024, 31, x8, 8, x9)
TEST_RR_OP(sll, x2, x3, x0, 4398046511104, 2048, 31, x8, 12, x9)
TEST_RR_OP(sll, x1, x0, x3, 8796093022208, 4096, 31, x8, 16, x9)
TEST_RR_OP(sll, x0, x1, x2, 17592186044416, 8192, 31, x8, 20, x9)
TEST_RR_OP(sll, x31, x30, x30, 35184372088832, 16384, 31, x8, 24, x9)
TEST_RR_OP(sll, x31, x31, x30, 70368744177664, 32768, 31, x8, 28, x9)
TEST_RR_OP(sll, x31, x30, x31, 140737488355328, 65536, 31, x8, 32, x9)
TEST_RR_OP(sll, x31, x31, x31, 281474976710656, 131072, 31, x8, 36, x9)
TEST_RR_OP(sll, x12, x10, x11, 562949953421312, 262144, 31, x8, 40, x9)
TEST_RR_OP(sll, x12, x10, x11, 1125899906842624, 524288, 31, x8, 44, x9)
TEST_RR_OP(sll, x12, x10, x11, 2251799813685248, 1048576, 31, x8, 48, x9)
TEST_RR_OP(sll, x12, x10, x11, 4503599627370496, 2097152, 31, x8, 52, x9)
TEST_RR_OP(sll, x12, x10, x11, 9007199254740992, 4194304, 31, x8, 56, x9)
TEST_RR_OP(sll, x12, x10, x11, 18014398509481984, 8388608, 31, x8, 60, x9)
TEST_RR_OP(sll, x12, x10, x11, 36028797018963968, 16777216, 31, x8, 64, x9)
TEST_RR_OP(sll, x12, x10, x11, 72057594037927936, 33554432, 31, x8, 68, x9)
TEST_RR_OP(sll, x12, x10, x11, 144115188075855872, 67108864, 31, x8, 72, x9)
TEST_RR_OP(sll, x12, x10, x11, 288230376151711744, 134217728, 31, x8, 76, x9)
TEST_RR_OP(sll, x12, x10, x11, 576460752303423488, 268435456, 31, x8, 80, x9)
TEST_RR_OP(sll, x12, x10, x11, 1152921504606846976, 536870912, 31, x8, 84, x9)
TEST_RR_OP(sll, x12, x10, x11, 2305843009213693952, 1073741824, 31, x8, 88, x9)
TEST_RR_OP(sll, x12, x10, x11, -4294967296, -2, 31, x8, 92, x9)
TEST_RR_OP(sll, x12, x10, x11, -4402341478400, -2049, 31, x8, 96, x9)
TEST_RR_OP(sll, x12, x10, x11, -8800387989504, -4097, 31, x8, 100, x9)
TEST_RR_OP(sll, x12, x10, x11, -17596481011712, -8193, 31, x8, 104, x9)
TEST_RR_OP(sll, x12, x10, x11, -35188667056128, -16385, 31, x8, 108, x9)
TEST_RR_OP(sll, x12, x10, x11, -70373039144960, -32769, 31, x8, 112, x9)
TEST_RR_OP(sll, x12, x10, x11, -140741783322624, -65537, 31, x8, 116, x9)
TEST_RR_OP(sll, x12, x10, x11, -281479271677952, -131073, 31, x8, 120, x9)
TEST_RR_OP(sll, x12, x10, x11, -562954248388608, -262145, 31, x8, 124, x9)
TEST_RR_OP(sll, x12, x10, x11, -1125904201809920, -524289, 31, x8, 128, x9)
TEST_RR_OP(sll, x12, x10, x11, -2251804108652544, -1048577, 31, x8, 132, x9)
TEST_RR_OP(sll, x12, x10, x11, -4503603922337792, -2097153, 31, x8, 136, x9)
TEST_RR_OP(sll, x12, x10, x11, -9007203549708288, -4194305, 31, x8, 140, x9)
TEST_RR_OP(sll, x12, x10, x11, -18014402804449280, -8388609, 31, x8, 144, x9)
TEST_RR_OP(sll, x12, x10, x11, -72057598332895232, -33554433, 31, x8, 148, x9)
TEST_RR_OP(sll, x12, x10, x11, -144115192370823168, -67108865, 31, x8, 152, x9)
TEST_RR_OP(sll, x12, x10, x11, -288230380446679040, -134217729, 31, x8, 156, x9)
TEST_RR_OP(sll, x12, x10, x11, -73014444032, -33, 31, x8, 160, x9)
TEST_RR_OP(sll, x12, x10, x11, -576460756598390784, -268435457, 31, x8, 164, x9)
TEST_RR_OP(sll, x12, x10, x11, -1152921508901814272, -536870913, 31, x8, 168, x9)
TEST_RR_OP(sll, x12, x10, x11, -2305843013508661248, -1073741825, 31, x8, 172, x9)
TEST_RR_OP(sll, x12, x10, x11, 3074457342754947072, 1431655765, 31, x8, 176, x9)
TEST_RR_OP(sll, x12, x10, x11, -12884901888, -5, 31, x8, 180, x9)
TEST_RR_OP(sll, x12, x10, x11, -3074457347049914368, -1431655766, 31, x8, 184, x9)
TEST_RR_OP(sll, x12, x10, x11, -8589934592, -3, 31, x8, 188, x9)
TEST_RR_OP(sll, x12, x10, x11, -21474836480, -9, 31, x8, 192, x9)
TEST_RR_OP(sll, x12, x10, x11, -38654705664, -17, 31, x8, 196, x9)
TEST_RR_OP(sll, x12, x10, x11, -141733920768, -65, 31, x8, 200, x9)
TEST_RR_OP(sll, x12, x10, x11, -279172874240, -129, 31, x8, 204, x9)
TEST_RR_OP(sll, x12, x10, x11, -554050781184, -257, 31, x8, 208, x9)
TEST_RR_OP(sll, x12, x10, x11, -1103806595072, -513, 31, x8, 212, x9)
TEST_RR_OP(sll, x12, x10, x11, -2203318222848, -1025, 31, x8, 216, x9)
TEST_RR_OP(sll, x12, x10, x11, 4398046511104, 2048, 31, x8, 220, x9)
TEST_RR_OP(sll, x12, x10, x11, 8796093022208, 4096, 31, x8, 224, x9)
TEST_RR_OP(sll, x12, x10, x11, 17592186044416, 8192, 31, x8, 228, x9)
TEST_RR_OP(sll, x12, x10, x11, 35184372088832, 16384, 31, x8, 232, x9)
TEST_RR_OP(sll, x12, x10, x11, 70368744177664, 32768, 31, x8, 236, x9)
TEST_RR_OP(sll, x12, x10, x11, 140737488355328, 65536, 31, x8, 240, x9)
TEST_RR_OP(sll, x12, x10, x11, 281474976710656, 131072, 31, x8, 244, x9)
#endif


RVMODEL_HALT
RVTEST_CODE_END

RVTEST_DATA_BEGIN
.align 4
.align 4
rvtest_data:
.word 0xbabecafe
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
.align 4

signature_x1_0:
    .fill 0*(XLEN/32),4,0xafacadee


signature_x1_1:
    .fill 26*(XLEN/32),4,0xafacadee


signature_x8_0:
    .fill 62*(XLEN/32),4,0xafacadee

RVMODEL_DATA_END
