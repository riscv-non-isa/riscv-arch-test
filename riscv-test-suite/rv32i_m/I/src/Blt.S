
#include "compliance_model.h"
#include "compliance_test.h"

RVTEST_ISA("RV32I")

RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1
RVTEST_CASE(1,"//check ISA:=regex(.*I.*);def TEST_CASE_1=True;",blt)
la x1,signature_x1_1
TEST_BRANCH_OP(blt, x2, x31, x30, 1073741823, 1073741823, 4, 1b, x1, 0)
TEST_BRANCH_OP(blt, x2, x30, x31, 1073741823, -16777217, 4, 1b, x1, 4)
TEST_BRANCH_OP(blt, x2, x29, x28, -16777217, -16777217, 4, 1b, x1, 8)
TEST_BRANCH_OP(blt, x2, x28, x29, -16777217, 1073741823, 4, 1b, x1, 12)
TEST_BRANCH_OP(blt, x2, x27, x26, -16777217, -16777217, 64, 3f, x1, 16)
TEST_BRANCH_OP(blt, x2, x26, x27, -16777217, -134217729, 64, 3f, x1, 20)
TEST_BRANCH_OP(blt, x2, x25, x24, -16777217, -2, 64, 3f, x1, 24)
TEST_BRANCH_OP(blt, x2, x24, x25, 1, -16777217, 4, 1b, x1, 28)
TEST_BRANCH_OP(blt, x2, x23, x22, 2, -16777217, 4, 1b, x1, 32)
TEST_BRANCH_OP(blt, x2, x22, x23, 4, -16777217, 4, 1b, x1, 36)
TEST_BRANCH_OP(blt, x2, x21, x20, 8, -16777217, 4, 1b, x1, 40)
TEST_BRANCH_OP(blt, x2, x20, x21, 16, -16777217, 4, 1b, x1, 44)
TEST_BRANCH_OP(blt, x2, x19, x18, 32, -16777217, 4, 1b, x1, 48)
TEST_BRANCH_OP(blt, x2, x18, x19, 64, -16777217, 4, 1b, x1, 52)
TEST_BRANCH_OP(blt, x2, x17, x16, 128, -16777217, 4, 1b, x1, 56)
TEST_BRANCH_OP(blt, x2, x16, x17, 256, -16777217, 4, 1b, x1, 60)
TEST_BRANCH_OP(blt, x2, x15, x14, 512, -16777217, 4, 1b, x1, 64)
TEST_BRANCH_OP(blt, x2, x14, x15, 1024, -16777217, 4, 1b, x1, 68)
TEST_BRANCH_OP(blt, x2, x13, x12, 2048, -16777217, 4, 1b, x1, 72)
TEST_BRANCH_OP(blt, x2, x12, x13, 4096, -16777217, 4, 1b, x1, 76)
TEST_BRANCH_OP(blt, x2, x11, x10, 8192, -16777217, 4, 1b, x1, 80)
TEST_BRANCH_OP(blt, x2, x10, x11, 16384, -16777217, 4, 1b, x1, 84)
TEST_BRANCH_OP(blt, x2, x9, x8, 32768, -16777217, 4, 1b, x1, 88)
TEST_BRANCH_OP(blt, x2, x8, x9, 65536, -16777217, 4, 1b, x1, 92)
TEST_BRANCH_OP(blt, x2, x7, x6, 131072, -16777217, 4, 1b, x1, 96)
TEST_BRANCH_OP(blt, x2, x6, x7, 262144, -16777217, 4, 1b, x1, 100)
TEST_BRANCH_OP(blt, x2, x5, x4, 524288, -16777217, 4, 1b, x1, 104)
la x6,signature_x6_0
TEST_BRANCH_OP(blt, x7, x4, x5, 1048576, -16777217, 4, 1b, x6, 0)
TEST_BRANCH_OP(blt, x7, x3, x2, 2097152, -16777217, 4, 1b, x6, 4)
TEST_BRANCH_OP(blt, x7, x2, x3, 4194304, -16777217, 4, 1b, x6, 8)
TEST_BRANCH_OP(blt, x7, x1, x0, 8388608, -16777217, 4, 1b, x6, 12)
TEST_BRANCH_OP(blt, x7, x0, x1, 16777216, -16777217, 4, 1b, x6, 16)
TEST_BRANCH_OP(blt, x7, x31, x31, 33554432, -16777217, 4, 1b, x6, 20)
TEST_BRANCH_OP(blt, x7, x10, x11, 67108864, -16777217, 4, 1b, x6, 24)
TEST_BRANCH_OP(blt, x7, x10, x11, 134217728, -16777217, 4, 1b, x6, 28)
TEST_BRANCH_OP(blt, x7, x10, x11, 268435456, -16777217, 4, 1b, x6, 32)
TEST_BRANCH_OP(blt, x7, x10, x11, 536870912, -16777217, 4, 1b, x6, 36)
TEST_BRANCH_OP(blt, x7, x10, x11, 1073741824, -16777217, 4, 1b, x6, 40)
TEST_BRANCH_OP(blt, x7, x10, x11, -2147483648, -16777217, 4, 1b, x6, 44)
TEST_BRANCH_OP(blt, x7, x10, x11, -2, -16777217, 4, 1b, x6, 48)
TEST_BRANCH_OP(blt, x7, x10, x11, -3, -16777217, 4, 1b, x6, 52)
TEST_BRANCH_OP(blt, x7, x10, x11, -5, -16777217, 4, 1b, x6, 56)
TEST_BRANCH_OP(blt, x7, x10, x11, -9, -16777217, 4, 1b, x6, 60)
TEST_BRANCH_OP(blt, x7, x10, x11, -17, -16777217, 4, 1b, x6, 64)
TEST_BRANCH_OP(blt, x7, x10, x11, -33, -16777217, 4, 1b, x6, 68)
TEST_BRANCH_OP(blt, x7, x10, x11, -65, -16777217, 4, 1b, x6, 72)
TEST_BRANCH_OP(blt, x7, x10, x11, -129, -16777217, 4, 1b, x6, 76)
TEST_BRANCH_OP(blt, x7, x10, x11, -257, -16777217, 4, 1b, x6, 80)
TEST_BRANCH_OP(blt, x7, x10, x11, -513, -16777217, 4, 1b, x6, 84)
TEST_BRANCH_OP(blt, x7, x10, x11, -1025, -16777217, 4, 1b, x6, 88)
TEST_BRANCH_OP(blt, x7, x10, x11, -2049, -16777217, 4, 1b, x6, 92)
TEST_BRANCH_OP(blt, x7, x10, x11, -4097, -16777217, 4, 1b, x6, 96)
TEST_BRANCH_OP(blt, x7, x10, x11, -8193, -16777217, 4, 1b, x6, 100)
TEST_BRANCH_OP(blt, x7, x10, x11, -16385, -16777217, 4, 1b, x6, 104)
TEST_BRANCH_OP(blt, x7, x10, x11, -32769, -16777217, 4, 1b, x6, 108)
TEST_BRANCH_OP(blt, x7, x10, x11, -65537, -16777217, 4, 1b, x6, 112)
TEST_BRANCH_OP(blt, x7, x10, x11, -131073, -16777217, 4, 1b, x6, 116)
TEST_BRANCH_OP(blt, x7, x10, x11, -262145, -16777217, 4, 1b, x6, 120)
TEST_BRANCH_OP(blt, x7, x10, x11, -524289, -16777217, 4, 1b, x6, 124)
TEST_BRANCH_OP(blt, x7, x10, x11, -1048577, -16777217, 4, 1b, x6, 128)
TEST_BRANCH_OP(blt, x7, x10, x11, -2097153, -16777217, 4, 1b, x6, 132)
TEST_BRANCH_OP(blt, x7, x10, x11, -4194305, -16777217, 4, 1b, x6, 136)
TEST_BRANCH_OP(blt, x7, x10, x11, -8388609, -16777217, 4, 1b, x6, 140)
TEST_BRANCH_OP(blt, x7, x10, x11, -33554433, -16777217, 4, 1b, x6, 144)
TEST_BRANCH_OP(blt, x7, x10, x11, -67108865, -16777217, 4, 1b, x6, 148)
TEST_BRANCH_OP(blt, x7, x10, x11, -134217729, -16777217, 4, 1b, x6, 152)
TEST_BRANCH_OP(blt, x7, x10, x11, -268435457, -16777217, 4, 1b, x6, 156)
TEST_BRANCH_OP(blt, x7, x10, x11, -536870913, -16777217, 4, 1b, x6, 160)
TEST_BRANCH_OP(blt, x7, x10, x11, -1073741825, -16777217, 4, 1b, x6, 164)
TEST_BRANCH_OP(blt, x7, x10, x11, 2147483647, -16777217, 4, 1b, x6, 168)
TEST_BRANCH_OP(blt, x7, x10, x11, 1431655765, -16777217, 4, 1b, x6, 172)
TEST_BRANCH_OP(blt, x7, x10, x11, -1431655766, -16777217, 4, 1b, x6, 176)
TEST_BRANCH_OP(blt, x7, x10, x11, -16777217, -1048577, 4, 1b, x6, 180)
TEST_BRANCH_OP(blt, x7, x10, x11, -16777217, -2097153, 4, 1b, x6, 184)
TEST_BRANCH_OP(blt, x7, x10, x11, -16777217, -4194305, 4, 1b, x6, 188)
TEST_BRANCH_OP(blt, x7, x10, x11, -16777217, -8388609, 4, 1b, x6, 192)
TEST_BRANCH_OP(blt, x7, x10, x11, -16777217, -33554433, 4, 1b, x6, 196)
TEST_BRANCH_OP(blt, x7, x10, x11, -16777217, -67108865, 4, 1b, x6, 200)
TEST_BRANCH_OP(blt, x7, x10, x11, -16777217, -268435457, 4, 1b, x6, 204)
TEST_BRANCH_OP(blt, x7, x10, x11, -16777217, -536870913, 4, 1b, x6, 208)
TEST_BRANCH_OP(blt, x7, x10, x11, -16777217, -1073741825, 4, 1b, x6, 212)
TEST_BRANCH_OP(blt, x7, x10, x11, -16777217, 2147483647, 4, 1b, x6, 216)
TEST_BRANCH_OP(blt, x7, x10, x11, -16777217, 1431655765, 4, 1b, x6, 220)
TEST_BRANCH_OP(blt, x7, x10, x11, -16777217, -1431655766, 4, 1b, x6, 224)
TEST_BRANCH_OP(blt, x7, x10, x11, -16777217, 1, 4, 1b, x6, 228)
TEST_BRANCH_OP(blt, x7, x10, x11, -16777217, 2, 4, 1b, x6, 232)
TEST_BRANCH_OP(blt, x7, x10, x11, -16777217, 4, 4, 1b, x6, 236)
TEST_BRANCH_OP(blt, x7, x10, x11, -16777217, 8, 4, 1b, x6, 240)
TEST_BRANCH_OP(blt, x7, x10, x11, -16777217, 16, 4, 1b, x6, 244)
TEST_BRANCH_OP(blt, x7, x10, x11, -16777217, 32, 4, 1b, x6, 248)
TEST_BRANCH_OP(blt, x7, x10, x11, -16777217, 64, 4, 1b, x6, 252)
TEST_BRANCH_OP(blt, x7, x10, x11, -16777217, 128, 4, 1b, x6, 256)
TEST_BRANCH_OP(blt, x7, x10, x11, -16777217, 256, 4, 1b, x6, 260)
TEST_BRANCH_OP(blt, x7, x10, x11, -16777217, 512, 4, 1b, x6, 264)
TEST_BRANCH_OP(blt, x7, x10, x11, -16777217, 1024, 4, 1b, x6, 268)
TEST_BRANCH_OP(blt, x7, x10, x11, -16777217, 2048, 4, 1b, x6, 272)
TEST_BRANCH_OP(blt, x7, x10, x11, -16777217, 4096, 4, 1b, x6, 276)
TEST_BRANCH_OP(blt, x7, x10, x11, -16777217, 8192, 4, 1b, x6, 280)
TEST_BRANCH_OP(blt, x7, x10, x11, -16777217, 16384, 4, 1b, x6, 284)
TEST_BRANCH_OP(blt, x7, x10, x11, -16777217, 32768, 4, 1b, x6, 288)
TEST_BRANCH_OP(blt, x7, x10, x11, -16777217, 65536, 4, 1b, x6, 292)
TEST_BRANCH_OP(blt, x7, x10, x11, -16777217, 131072, 4, 1b, x6, 296)
TEST_BRANCH_OP(blt, x7, x10, x11, -16777217, 262144, 4, 1b, x6, 300)
TEST_BRANCH_OP(blt, x7, x10, x11, -16777217, 524288, 4, 1b, x6, 304)
TEST_BRANCH_OP(blt, x7, x10, x11, -16777217, 1048576, 4, 1b, x6, 308)
TEST_BRANCH_OP(blt, x7, x10, x11, -16777217, 2097152, 4, 1b, x6, 312)
TEST_BRANCH_OP(blt, x7, x10, x11, -16777217, 4194304, 4, 1b, x6, 316)
TEST_BRANCH_OP(blt, x7, x10, x11, -16777217, 8388608, 4, 1b, x6, 320)
TEST_BRANCH_OP(blt, x7, x10, x11, -16777217, 16777216, 4, 1b, x6, 324)
TEST_BRANCH_OP(blt, x7, x10, x11, -16777217, 33554432, 4, 1b, x6, 328)
TEST_BRANCH_OP(blt, x7, x10, x11, -16777217, 67108864, 4, 1b, x6, 332)
TEST_BRANCH_OP(blt, x7, x10, x11, -16777217, 134217728, 4, 1b, x6, 336)
TEST_BRANCH_OP(blt, x7, x10, x11, -16777217, 268435456, 4, 1b, x6, 340)
TEST_BRANCH_OP(blt, x7, x10, x11, -16777217, 536870912, 4, 1b, x6, 344)
TEST_BRANCH_OP(blt, x7, x10, x11, -16777217, 1073741824, 4, 1b, x6, 348)
TEST_BRANCH_OP(blt, x7, x10, x11, -16777217, -2147483648, 4, 1b, x6, 352)
TEST_BRANCH_OP(blt, x7, x10, x11, -16777217, -3, 4, 1b, x6, 356)
TEST_BRANCH_OP(blt, x7, x10, x11, -16777217, -5, 4, 1b, x6, 360)
TEST_BRANCH_OP(blt, x7, x10, x11, -16777217, -9, 4, 1b, x6, 364)
TEST_BRANCH_OP(blt, x7, x10, x11, -16777217, -17, 4, 1b, x6, 368)
TEST_BRANCH_OP(blt, x7, x10, x11, -16777217, -33, 4, 1b, x6, 372)
TEST_BRANCH_OP(blt, x7, x10, x11, -16777217, -65, 4, 1b, x6, 376)
TEST_BRANCH_OP(blt, x7, x10, x11, -16777217, -129, 4, 1b, x6, 380)
TEST_BRANCH_OP(blt, x7, x10, x11, -16777217, -257, 4, 1b, x6, 384)
TEST_BRANCH_OP(blt, x7, x10, x11, -16777217, -513, 4, 1b, x6, 388)
TEST_BRANCH_OP(blt, x7, x10, x11, -16777217, -1025, 4, 1b, x6, 392)
TEST_BRANCH_OP(blt, x7, x10, x11, -16777217, -2049, 4, 1b, x6, 396)
TEST_BRANCH_OP(blt, x7, x10, x11, -16777217, -4097, 4, 1b, x6, 400)
TEST_BRANCH_OP(blt, x7, x10, x11, -16777217, -8193, 4, 1b, x6, 404)
TEST_BRANCH_OP(blt, x7, x10, x11, -16777217, -16385, 4, 1b, x6, 408)
TEST_BRANCH_OP(blt, x7, x10, x11, -16777217, -32769, 4, 1b, x6, 412)
TEST_BRANCH_OP(blt, x7, x10, x11, -16777217, -65537, 4, 1b, x6, 416)
TEST_BRANCH_OP(blt, x7, x10, x11, -16777217, -131073, 4, 1b, x6, 420)
TEST_BRANCH_OP(blt, x7, x10, x11, -16777217, -262145, 4, 1b, x6, 424)
TEST_BRANCH_OP(blt, x7, x10, x11, -16777217, -524289, 4, 1b, x6, 428)
TEST_BRANCH_OP(blt, x7, x10, x11, 8388608, -16777217, 4, 1b, x6, 432)
TEST_BRANCH_OP(blt, x7, x10, x11, 16777216, -16777217, 4, 1b, x6, 436)
TEST_BRANCH_OP(blt, x7, x10, x11, 33554432, -16777217, 4, 1b, x6, 440)
#endif


RVMODEL_HALT
RVTEST_CODE_END

RVTEST_DATA_BEGIN
.align 4
.align 4
rvtest_data:
.word 0xbabecafe
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
.align 4

signature_x1_0:
    .fill 0*(XLEN/32),4,0xafacadee


signature_x1_1:
    .fill 27*(XLEN/32),4,0xafacadee


signature_x6_0:
    .fill 111*(XLEN/32),4,0xafacadee

RVMODEL_DATA_END
