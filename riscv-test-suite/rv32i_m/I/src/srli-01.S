 
// -----------
// This file was generated by riscv_ctg (https://gitlab.com/incoresemi/riscv-compliance/riscv_ctg)
// version   : 0.1.0
// timestamp : Thu Nov  5 12:29:34 2020 GMT
// usage     : riscv_ctg \
//                  -- cgf /scratch/git-repo/incoresemi/riscv-compliance/riscv_ctg/sample_cgfs/rv32i.cgf \
//                  -- xlen 32 \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the srli instruction of the RISC-V I extension for the srli covergroup.
// 
#include "compliance_model.h"
#include "compliance_test.h"
RVTEST_ISA("RV32I")

RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*);def TEST_CASE_1=True;",srli)

RVTEST_SIGBASE( x8,signature_x8_1)

// rs1 == rd, rs1==x18, rd==x18, rs1_val < 0 and imm_val > 0 and imm_val < xlen, rs1_val == -4194305
// opcode: srli ; op1:x18; dest:x18; op1val:0xffbfffff;  immval:13
TEST_IMM_OP( srli, x18, x18, 0x7fdff, 0xffbfffff, 13, x8, 0, x22)

// rs1 != rd, rs1==x23, rd==x17, rs1_val > 0 and imm_val > 0 and imm_val < xlen, rs1_val == 8
// opcode: srli ; op1:x23; dest:x17; op1val:0x00000008;  immval:17
TEST_IMM_OP( srli, x17, x23, 0x0, 0x00000008, 17, x8, 4, x22)

// rs1==x11, rd==x7, rs1_val < 0 and imm_val == 0, rs1_val == -4097
// opcode: srli ; op1:x11; dest:x7; op1val:0xffffefff;  immval:0
TEST_IMM_OP( srli, x7, x11, 0xffffefff, 0xffffefff, 0, x8, 8, x22)

// rs1==x6, rd==x16, rs1_val > 0 and imm_val == 0, rs1_val == 268435456
// opcode: srli ; op1:x6; dest:x16; op1val:0x10000000;  immval:0
TEST_IMM_OP( srli, x16, x6, 0x10000000, 0x10000000, 0, x8, 12, x22)

// rs1==x15, rd==x28, rs1_val < 0 and imm_val == (xlen-1), rs1_val == -16777217
// opcode: srli ; op1:x15; dest:x28; op1val:0xfeffffff;  immval:31
TEST_IMM_OP( srli, x28, x15, 0x1, 0xfeffffff, 31, x8, 16, x22)

// rs1==x0, rd==x2, rs1_val > 0 and imm_val == (xlen-1), rs1_val == 2
// opcode: srli ; op1:x0; dest:x2; op1val:0x00000002;  immval:31
TEST_IMM_OP( srli, x2, x0, 0x0, 0x00000002, 31, x8, 20, x22)

// rs1==x31, rd==x30, rs1_val == imm_val and imm_val > 0 and imm_val < xlen, 
// opcode: srli ; op1:x31; dest:x30; op1val:0x00000007;  immval:7
TEST_IMM_OP( srli, x30, x31, 0x0, 0x00000007, 7, x8, 24, x22)

// rs1==x27, rd==x25, rs1_val == (-2**(xlen-1)) and imm_val >= 0 and imm_val < xlen, imm_val == 15, rs1_val == -2147483648
// opcode: srli ; op1:x27; dest:x25; op1val:0x80000000;  immval:15
TEST_IMM_OP( srli, x25, x27, 0x10000, 0x80000000, 15, x8, 28, x22)

// rs1==x13, rd==x9, rs1_val == 0 and imm_val >= 0 and imm_val < xlen, 
// opcode: srli ; op1:x13; dest:x9; op1val:0x00000000;  immval:11
TEST_IMM_OP( srli, x9, x13, 0x0, 0x00000000, 11, x8, 32, x22)

// rs1==x9, rd==x12, rs1_val == (2**(xlen-1)-1) and imm_val >= 0 and imm_val < xlen, rs1_val == 2147483647
// opcode: srli ; op1:x9; dest:x12; op1val:0x7fffffff;  immval:3
TEST_IMM_OP( srli, x12, x9, 0xfffffff, 0x7fffffff, 3, x8, 36, x22)

// rs1==x12, rd==x23, rs1_val == 1 and imm_val >= 0 and imm_val < xlen, rs1_val == 1
// opcode: srli ; op1:x12; dest:x23; op1val:0x00000001;  immval:12
TEST_IMM_OP( srli, x23, x12, 0x0, 0x00000001, 12, x8, 40, x22)

// rs1==x26, rd==x5, imm_val == 1, rs1_val == 4096
// opcode: srli ; op1:x26; dest:x5; op1val:0x00001000;  immval:1
TEST_IMM_OP( srli, x5, x26, 0x800, 0x00001000, 1, x8, 44, x22)

// rs1==x7, rd==x10, imm_val == 2, 
// opcode: srli ; op1:x7; dest:x10; op1val:0x00000008;  immval:2
TEST_IMM_OP( srli, x10, x7, 0x2, 0x00000008, 2, x8, 48, x22)

// rs1==x5, rd==x1, imm_val == 4, rs1_val == -1025
// opcode: srli ; op1:x5; dest:x1; op1val:0xfffffbff;  immval:4
TEST_IMM_OP( srli, x1, x5, 0xfffffbf, 0xfffffbff, 4, x8, 52, x22)

// rs1==x16, rd==x26, imm_val == 8, 
// opcode: srli ; op1:x16; dest:x26; op1val:0x00000000;  immval:8
TEST_IMM_OP( srli, x26, x16, 0x0, 0x00000000, 8, x8, 56, x22)

// rs1==x17, rd==x13, imm_val == 16, rs1_val == 32
// opcode: srli ; op1:x17; dest:x13; op1val:0x00000020;  immval:16
TEST_IMM_OP( srli, x13, x17, 0x0, 0x00000020, 16, x8, 60, x22)

// rs1==x14, rd==x6, imm_val == 30, rs1_val == -131073
// opcode: srli ; op1:x14; dest:x6; op1val:0xfffdffff;  immval:30
TEST_IMM_OP( srli, x6, x14, 0x3, 0xfffdffff, 30, x8, 64, x22)

// rs1==x1, rd==x31, imm_val == 29, rs1_val == 4
// opcode: srli ; op1:x1; dest:x31; op1val:0x00000004;  immval:29
TEST_IMM_OP( srli, x31, x1, 0x0, 0x00000004, 29, x8, 68, x22)

// rs1==x19, rd==x11, imm_val == 27, rs1_val == -268435457
// opcode: srli ; op1:x19; dest:x11; op1val:0xefffffff;  immval:27
TEST_IMM_OP( srli, x11, x19, 0x1d, 0xefffffff, 27, x8, 72, x22)

// rs1==x28, rd==x24, imm_val == 23, rs1_val == -67108865
// opcode: srli ; op1:x28; dest:x24; op1val:0xfbffffff;  immval:23
TEST_IMM_OP( srli, x24, x28, 0x1f7, 0xfbffffff, 23, x8, 76, x22)

// rs1==x3, rd==x19, imm_val == 21, 
// opcode: srli ; op1:x3; dest:x19; op1val:0xfffffbff;  immval:21
TEST_IMM_OP( srli, x19, x3, 0x7ff, 0xfffffbff, 21, x8, 80, x22)

// rs1==x25, rd==x21, imm_val == 10, rs1_val == -16385
// opcode: srli ; op1:x25; dest:x21; op1val:0xffffbfff;  immval:10
TEST_IMM_OP( srli, x21, x25, 0x3fffef, 0xffffbfff, 10, x8, 84, x22)

// rs1==x20, rd==x4, rs1_val == 16, 
// opcode: srli ; op1:x20; dest:x4; op1val:0x00000010;  immval:4
TEST_IMM_OP( srli, x4, x20, 0x1, 0x00000010, 4, x8, 88, x22)
RVTEST_SIGBASE( x1,signature_x1_0)

// rs1==x30, rd==x29, rs1_val == 64, 
// opcode: srli ; op1:x30; dest:x29; op1val:0x00000040;  immval:23
TEST_IMM_OP( srli, x29, x30, 0x0, 0x00000040, 23, x1, 0, x5)

// rs1==x22, rd==x27, rs1_val == 128, 
// opcode: srli ; op1:x22; dest:x27; op1val:0x00000080;  immval:15
TEST_IMM_OP( srli, x27, x22, 0x0, 0x00000080, 15, x1, 4, x5)

// rs1==x8, rd==x22, rs1_val == 256, 
// opcode: srli ; op1:x8; dest:x22; op1val:0x00000100;  immval:9
TEST_IMM_OP( srli, x22, x8, 0x0, 0x00000100, 9, x1, 8, x5)

// rs1==x24, rd==x20, rs1_val == 512, 
// opcode: srli ; op1:x24; dest:x20; op1val:0x00000200;  immval:12
TEST_IMM_OP( srli, x20, x24, 0x0, 0x00000200, 12, x1, 12, x5)

// rs1==x10, rd==x8, rs1_val == 1024, 
// opcode: srli ; op1:x10; dest:x8; op1val:0x00000400;  immval:21
TEST_IMM_OP( srli, x8, x10, 0x0, 0x00000400, 21, x1, 16, x5)

// rs1==x4, rd==x0, rs1_val == 2048, 
// opcode: srli ; op1:x4; dest:x0; op1val:0x00000800;  immval:29
TEST_IMM_OP( srli, x0, x4, 0x0, 0x00000800, 29, x1, 20, x5)

// rs1==x21, rd==x15, rs1_val == 8192, 
// opcode: srli ; op1:x21; dest:x15; op1val:0x00002000;  immval:10
TEST_IMM_OP( srli, x15, x21, 0x8, 0x00002000, 10, x1, 24, x5)

// rs1==x2, rd==x14, rs1_val == 16384, 
// opcode: srli ; op1:x2; dest:x14; op1val:0x00004000;  immval:5
TEST_IMM_OP( srli, x14, x2, 0x200, 0x00004000, 5, x1, 28, x5)

// rs1==x29, rd==x3, rs1_val == 32768, 
// opcode: srli ; op1:x29; dest:x3; op1val:0x00008000;  immval:27
TEST_IMM_OP( srli, x3, x29, 0x0, 0x00008000, 27, x1, 32, x5)

// rs1_val == 65536, 
// opcode: srli ; op1:x10; dest:x11; op1val:0x00010000;  immval:16
TEST_IMM_OP( srli, x11, x10, 0x1, 0x00010000, 16, x1, 36, x5)

// rs1_val == 131072, 
// opcode: srli ; op1:x10; dest:x11; op1val:0x00020000;  immval:18
TEST_IMM_OP( srli, x11, x10, 0x0, 0x00020000, 18, x1, 40, x5)

// rs1_val == 262144, 
// opcode: srli ; op1:x10; dest:x11; op1val:0x00040000;  immval:31
TEST_IMM_OP( srli, x11, x10, 0x0, 0x00040000, 31, x1, 44, x5)

// rs1_val == 524288, 
// opcode: srli ; op1:x10; dest:x11; op1val:0x00080000;  immval:7
TEST_IMM_OP( srli, x11, x10, 0x1000, 0x00080000, 7, x1, 48, x5)

// rs1_val == 1048576, 
// opcode: srli ; op1:x10; dest:x11; op1val:0x00100000;  immval:8
TEST_IMM_OP( srli, x11, x10, 0x1000, 0x00100000, 8, x1, 52, x5)

// rs1_val == 2097152, 
// opcode: srli ; op1:x10; dest:x11; op1val:0x00200000;  immval:3
TEST_IMM_OP( srli, x11, x10, 0x40000, 0x00200000, 3, x1, 56, x5)

// rs1_val == 4194304, 
// opcode: srli ; op1:x10; dest:x11; op1val:0x00400000;  immval:31
TEST_IMM_OP( srli, x11, x10, 0x0, 0x00400000, 31, x1, 60, x5)

// rs1_val == 8388608, 
// opcode: srli ; op1:x10; dest:x11; op1val:0x00800000;  immval:10
TEST_IMM_OP( srli, x11, x10, 0x2000, 0x00800000, 10, x1, 64, x5)

// rs1_val == -513, 
// opcode: srli ; op1:x10; dest:x11; op1val:0xfffffdff;  immval:6
TEST_IMM_OP( srli, x11, x10, 0x3fffff7, 0xfffffdff, 6, x1, 68, x5)

// rs1_val == -2049, 
// opcode: srli ; op1:x10; dest:x11; op1val:0xfffff7ff;  immval:11
TEST_IMM_OP( srli, x11, x10, 0x1ffffe, 0xfffff7ff, 11, x1, 72, x5)

// rs1_val == -8193, 
// opcode: srli ; op1:x10; dest:x11; op1val:0xffffdfff;  immval:1
TEST_IMM_OP( srli, x11, x10, 0x7fffefff, 0xffffdfff, 1, x1, 76, x5)

// rs1_val == -32769, 
// opcode: srli ; op1:x10; dest:x11; op1val:0xffff7fff;  immval:0
TEST_IMM_OP( srli, x11, x10, 0xffff7fff, 0xffff7fff, 0, x1, 80, x5)

// rs1_val == -65537, 
// opcode: srli ; op1:x10; dest:x11; op1val:0xfffeffff;  immval:6
TEST_IMM_OP( srli, x11, x10, 0x3fffbff, 0xfffeffff, 6, x1, 84, x5)

// rs1_val == -262145, 
// opcode: srli ; op1:x10; dest:x11; op1val:0xfffbffff;  immval:15
TEST_IMM_OP( srli, x11, x10, 0x1fff7, 0xfffbffff, 15, x1, 88, x5)

// rs1_val == -524289, 
// opcode: srli ; op1:x10; dest:x11; op1val:0xfff7ffff;  immval:0
TEST_IMM_OP( srli, x11, x10, 0xfff7ffff, 0xfff7ffff, 0, x1, 92, x5)

// rs1_val == -1048577, 
// opcode: srli ; op1:x10; dest:x11; op1val:0xffefffff;  immval:14
TEST_IMM_OP( srli, x11, x10, 0x3ffbf, 0xffefffff, 14, x1, 96, x5)

// rs1_val == -2097153, 
// opcode: srli ; op1:x10; dest:x11; op1val:0xffdfffff;  immval:18
TEST_IMM_OP( srli, x11, x10, 0x3ff7, 0xffdfffff, 18, x1, 100, x5)

// rs1_val == -8388609, 
// opcode: srli ; op1:x10; dest:x11; op1val:0xff7fffff;  immval:31
TEST_IMM_OP( srli, x11, x10, 0x1, 0xff7fffff, 31, x1, 104, x5)

// rs1_val == -33554433, 
// opcode: srli ; op1:x10; dest:x11; op1val:0xfdffffff;  immval:16
TEST_IMM_OP( srli, x11, x10, 0xfdff, 0xfdffffff, 16, x1, 108, x5)

// rs1_val == -134217729, 
// opcode: srli ; op1:x10; dest:x11; op1val:0xf7ffffff;  immval:9
TEST_IMM_OP( srli, x11, x10, 0x7bffff, 0xf7ffffff, 9, x1, 112, x5)

// rs1_val == -536870913, 
// opcode: srli ; op1:x10; dest:x11; op1val:0xdfffffff;  immval:31
TEST_IMM_OP( srli, x11, x10, 0x1, 0xdfffffff, 31, x1, 116, x5)

// rs1_val == -1073741825, 
// opcode: srli ; op1:x10; dest:x11; op1val:0xbfffffff;  immval:5
TEST_IMM_OP( srli, x11, x10, 0x5ffffff, 0xbfffffff, 5, x1, 120, x5)

// rs1_val == 1431655765, 
// opcode: srli ; op1:x10; dest:x11; op1val:0x55555555;  immval:10
TEST_IMM_OP( srli, x11, x10, 0x155555, 0x55555555, 10, x1, 124, x5)

// rs1_val == -1431655766, 
// opcode: srli ; op1:x10; dest:x11; op1val:0xaaaaaaaa;  immval:30
TEST_IMM_OP( srli, x11, x10, 0x2, 0xaaaaaaaa, 30, x1, 128, x5)

// rs1_val == 16777216, 
// opcode: srli ; op1:x10; dest:x11; op1val:0x01000000;  immval:17
TEST_IMM_OP( srli, x11, x10, 0x80, 0x01000000, 17, x1, 132, x5)

// rs1_val == 33554432, 
// opcode: srli ; op1:x10; dest:x11; op1val:0x02000000;  immval:8
TEST_IMM_OP( srli, x11, x10, 0x20000, 0x02000000, 8, x1, 136, x5)

// rs1_val == 67108864, 
// opcode: srli ; op1:x10; dest:x11; op1val:0x04000000;  immval:0
TEST_IMM_OP( srli, x11, x10, 0x4000000, 0x04000000, 0, x1, 140, x5)

// rs1_val == 134217728, 
// opcode: srli ; op1:x10; dest:x11; op1val:0x08000000;  immval:3
TEST_IMM_OP( srli, x11, x10, 0x1000000, 0x08000000, 3, x1, 144, x5)

// rs1_val == 536870912, 
// opcode: srli ; op1:x10; dest:x11; op1val:0x20000000;  immval:2
TEST_IMM_OP( srli, x11, x10, 0x8000000, 0x20000000, 2, x1, 148, x5)

// rs1_val == 1073741824, 
// opcode: srli ; op1:x10; dest:x11; op1val:0x40000000;  immval:4
TEST_IMM_OP( srli, x11, x10, 0x4000000, 0x40000000, 4, x1, 152, x5)

// rs1_val == -2, 
// opcode: srli ; op1:x10; dest:x11; op1val:0xfffffffe;  immval:10
TEST_IMM_OP( srli, x11, x10, 0x3fffff, 0xfffffffe, 10, x1, 156, x5)

// rs1_val == -3, 
// opcode: srli ; op1:x10; dest:x11; op1val:0xfffffffd;  immval:7
TEST_IMM_OP( srli, x11, x10, 0x1ffffff, 0xfffffffd, 7, x1, 160, x5)

// rs1_val == -5, 
// opcode: srli ; op1:x10; dest:x11; op1val:0xfffffffb;  immval:6
TEST_IMM_OP( srli, x11, x10, 0x3ffffff, 0xfffffffb, 6, x1, 164, x5)

// rs1_val == -9, 
// opcode: srli ; op1:x10; dest:x11; op1val:0xfffffff7;  immval:30
TEST_IMM_OP( srli, x11, x10, 0x3, 0xfffffff7, 30, x1, 168, x5)

// rs1_val == -17, 
// opcode: srli ; op1:x10; dest:x11; op1val:0xffffffef;  immval:13
TEST_IMM_OP( srli, x11, x10, 0x7ffff, 0xffffffef, 13, x1, 172, x5)

// rs1_val == -33, 
// opcode: srli ; op1:x10; dest:x11; op1val:0xffffffdf;  immval:14
TEST_IMM_OP( srli, x11, x10, 0x3ffff, 0xffffffdf, 14, x1, 176, x5)

// rs1_val == -65, 
// opcode: srli ; op1:x10; dest:x11; op1val:0xffffffbf;  immval:13
TEST_IMM_OP( srli, x11, x10, 0x7ffff, 0xffffffbf, 13, x1, 180, x5)

// rs1_val == -129, 
// opcode: srli ; op1:x10; dest:x11; op1val:0xffffff7f;  immval:10
TEST_IMM_OP( srli, x11, x10, 0x3fffff, 0xffffff7f, 10, x1, 184, x5)

// rs1_val == -257, 
// opcode: srli ; op1:x10; dest:x11; op1val:0xfffffeff;  immval:14
TEST_IMM_OP( srli, x11, x10, 0x3ffff, 0xfffffeff, 14, x1, 188, x5)

// rs1_val > 0 and imm_val == (xlen-1), rs1_val == 2
// opcode: srli ; op1:x10; dest:x11; op1val:0x00000002;  immval:31
TEST_IMM_OP( srli, x11, x10, 0x0, 0x00000002, 31, x1, 192, x5)

// rs1_val == 2048, 
// opcode: srli ; op1:x10; dest:x11; op1val:0x00000800;  immval:29
TEST_IMM_OP( srli, x11, x10, 0x0, 0x00000800, 29, x1, 196, x5)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x8_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x8_1:
    .fill 23*(XLEN/32),4,0xdeadbeef


signature_x1_0:
    .fill 50*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
