 
// -----------
// This file was generated by riscv_ctg (https://gitlab.com/incoresemi/riscv-compliance/riscv_ctg)
// version   : 0.1.0
// timestamp : Thu Nov  5 11:18:24 2020 GMT
// usage     : riscv_ctg \
//                  -- cgf /scratch/git-repo/incoresemi/riscv-compliance/riscv_ctg/sample_cgfs/rv32i.cgf \
//                  -- xlen 32 \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the xor instruction of the RISC-V I extension for the xor covergroup.
// 
#include "compliance_model.h"
#include "compliance_test.h"
RVTEST_ISA("RV32I")

RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*);def TEST_CASE_1=True;",xor)

RVTEST_SIGBASE( x8,signature_x8_1)

// rs1 == rd != rs2, rs1==x29, rs2==x22, rd==x29, rs1_val == (-2**(xlen-1)), rs1_val < 0 and rs2_val < 0, rs1_val == -2147483648, rs1_val != rs2_val
// opcode: xor ; op1:x29; op2:x22; dest:x29; op1val:0x80000000;  op2val:0xfffffff8
TEST_RR_OP(xor, x29, x29, x22, 0x7ffffff8, 0x80000000, 0xfffffff8, x8, 0, x20)

// rs1 == rs2 != rd, rs1==x15, rs2==x15, rd==x17, rs1_val == 0, 
// opcode: xor ; op1:x15; op2:x15; dest:x17; op1val:0x00000000;  op2val:0xfffffffa
TEST_RR_OP(xor, x17, x15, x15, 0xfffffffa, 0x00000000, 0xfffffffa, x8, 4, x20)

// rs1 == rs2 == rd, rs1==x21, rs2==x21, rd==x21, rs1_val == (2**(xlen-1)-1), rs1_val > 0 and rs2_val < 0, rs1_val == 2147483647, rs2_val == -1073741825
// opcode: xor ; op1:x21; op2:x21; dest:x21; op1val:0x7fffffff;  op2val:0xbfffffff
TEST_RR_OP(xor, x21, x21, x21, 0xc0000000, 0x7fffffff, 0xbfffffff, x8, 8, x20)

// rs2 == rd != rs1, rs1==x26, rs2==x5, rd==x5, rs1_val == 1, rs2_val == -4097
// opcode: xor ; op1:x26; op2:x5; dest:x5; op1val:0x00000001;  op2val:0xffffefff
TEST_RR_OP(xor, x5, x26, x5, 0xffffeffe, 0x00000001, 0xffffefff, x8, 12, x20)

// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x25, rs2==x0, rd==x23, rs2_val == (-2**(xlen-1)), rs2_val == -2147483648
// opcode: xor ; op1:x25; op2:x0; dest:x23; op1val:0xffffffff;  op2val:0x80000000
TEST_RR_OP(xor, x23, x25, x0, 0x7fffffff, 0xffffffff, 0x80000000, x8, 16, x20)

// rs1==x10, rs2==x6, rd==x0, rs2_val == 0, rs1_val == -33554433
// opcode: xor ; op1:x10; op2:x6; dest:x0; op1val:0xfdffffff;  op2val:0x00000000
TEST_RR_OP(xor, x0, x10, x6, 0xfdffffff, 0xfdffffff, 0x00000000, x8, 20, x20)

// rs1==x19, rs2==x2, rd==x4, rs2_val == (2**(xlen-1)-1), rs1_val < 0 and rs2_val > 0, rs1_val == -129, rs2_val == 2147483647
// opcode: xor ; op1:x19; op2:x2; dest:x4; op1val:0xffffff7f;  op2val:0x7fffffff
TEST_RR_OP(xor, x4, x19, x2, 0x80000080, 0xffffff7f, 0x7fffffff, x8, 24, x20)

// rs1==x16, rs2==x3, rd==x15, rs2_val == 1, rs1_val > 0 and rs2_val > 0, rs1_val == 16384
// opcode: xor ; op1:x16; op2:x3; dest:x15; op1val:0x00004000;  op2val:0x00000001
TEST_RR_OP(xor, x15, x16, x3, 0x4001, 0x00004000, 0x00000001, x8, 28, x20)

// rs1==x31, rs2==x7, rd==x10, rs1_val == rs2_val, rs1_val == -9, rs2_val == -9
// opcode: xor ; op1:x31; op2:x7; dest:x10; op1val:0xfffffff7;  op2val:0xfffffff7
TEST_RR_OP(xor, x10, x31, x7, 0x0, 0xfffffff7, 0xfffffff7, x8, 32, x20)

// rs1==x18, rs2==x27, rd==x12, rs1_val == 2, rs2_val == -32769
// opcode: xor ; op1:x18; op2:x27; dest:x12; op1val:0x00000002;  op2val:0xffff7fff
TEST_RR_OP(xor, x12, x18, x27, 0xffff7ffd, 0x00000002, 0xffff7fff, x8, 36, x20)

// rs1==x1, rs2==x9, rd==x14, rs1_val == 4, rs2_val == -3
// opcode: xor ; op1:x1; op2:x9; dest:x14; op1val:0x00000004;  op2val:0xfffffffd
TEST_RR_OP(xor, x14, x1, x9, 0xfffffff9, 0x00000004, 0xfffffffd, x8, 40, x20)

// rs1==x27, rs2==x19, rd==x2, rs1_val == 8, rs2_val == 16384
// opcode: xor ; op1:x27; op2:x19; dest:x2; op1val:0x00000008;  op2val:0x00004000
TEST_RR_OP(xor, x2, x27, x19, 0x4008, 0x00000008, 0x00004000, x8, 44, x20)

// rs1==x13, rs2==x11, rd==x1, rs1_val == 16, rs2_val == -513
// opcode: xor ; op1:x13; op2:x11; dest:x1; op1val:0x00000010;  op2val:0xfffffdff
TEST_RR_OP(xor, x1, x13, x11, 0xfffffdef, 0x00000010, 0xfffffdff, x8, 48, x20)

// rs1==x22, rs2==x1, rd==x6, rs1_val == 32, rs2_val == -67108865
// opcode: xor ; op1:x22; op2:x1; dest:x6; op1val:0x00000020;  op2val:0xfbffffff
TEST_RR_OP(xor, x6, x22, x1, 0xfbffffdf, 0x00000020, 0xfbffffff, x8, 52, x20)

// rs1==x23, rs2==x17, rd==x3, rs1_val == 64, 
// opcode: xor ; op1:x23; op2:x17; dest:x3; op1val:0x00000040;  op2val:0xbfffffff
TEST_RR_OP(xor, x3, x23, x17, 0xbfffffbf, 0x00000040, 0xbfffffff, x8, 56, x20)

// rs1==x14, rs2==x24, rd==x16, rs1_val == 128, rs2_val == -262145
// opcode: xor ; op1:x14; op2:x24; dest:x16; op1val:0x00000080;  op2val:0xfffbffff
TEST_RR_OP(xor, x16, x14, x24, 0xfffbff7f, 0x00000080, 0xfffbffff, x8, 60, x20)

// rs1==x28, rs2==x14, rd==x25, rs1_val == 256, rs2_val == -2049
// opcode: xor ; op1:x28; op2:x14; dest:x25; op1val:0x00000100;  op2val:0xfffff7ff
TEST_RR_OP(xor, x25, x28, x14, 0xfffff6ff, 0x00000100, 0xfffff7ff, x8, 64, x2)
RVTEST_SIGBASE( x1,signature_x1_0)

// rs1==x4, rs2==x23, rd==x22, rs1_val == 512, rs2_val == -8388609
// opcode: xor ; op1:x4; op2:x23; dest:x22; op1val:0x00000200;  op2val:0xff7fffff
TEST_RR_OP(xor, x22, x4, x23, 0xff7ffdff, 0x00000200, 0xff7fffff, x1, 0, x2)

// rs1==x9, rs2==x28, rd==x13, rs1_val == 1024, 
// opcode: xor ; op1:x9; op2:x28; dest:x13; op1val:0x00000400;  op2val:0xffff7fff
TEST_RR_OP(xor, x13, x9, x28, 0xffff7bff, 0x00000400, 0xffff7fff, x1, 4, x2)

// rs1==x0, rs2==x30, rd==x18, rs1_val == 2048, 
// opcode: xor ; op1:x0; op2:x30; dest:x18; op1val:0x00000800;  op2val:0x00000005
TEST_RR_OP(xor, x18, x0, x30, 0x805, 0x00000800, 0x00000005, x1, 8, x2)

// rs1==x3, rs2==x12, rd==x27, rs1_val == 4096, 
// opcode: xor ; op1:x3; op2:x12; dest:x27; op1val:0x00001000;  op2val:0xffffefff
TEST_RR_OP(xor, x27, x3, x12, 0xffffffff, 0x00001000, 0xffffefff, x1, 12, x2)

// rs1==x8, rs2==x13, rd==x7, rs1_val == 8192, rs2_val == -257
// opcode: xor ; op1:x8; op2:x13; dest:x7; op1val:0x00002000;  op2val:0xfffffeff
TEST_RR_OP(xor, x7, x8, x13, 0xffffdeff, 0x00002000, 0xfffffeff, x1, 16, x2)

// rs1==x7, rs2==x29, rd==x28, rs1_val == 32768, 
// opcode: xor ; op1:x7; op2:x29; dest:x28; op1val:0x00008000;  op2val:0xfffffff8
TEST_RR_OP(xor, x28, x7, x29, 0xffff7ff8, 0x00008000, 0xfffffff8, x1, 20, x2)

// rs1==x30, rs2==x10, rd==x9, rs1_val == 65536, rs2_val == 16777216
// opcode: xor ; op1:x30; op2:x10; dest:x9; op1val:0x00010000;  op2val:0x01000000
TEST_RR_OP(xor, x9, x30, x10, 0x1010000, 0x00010000, 0x01000000, x1, 24, x2)

// rs1==x12, rs2==x26, rd==x24, rs1_val == 131072, 
// opcode: xor ; op1:x12; op2:x26; dest:x24; op1val:0x00020000;  op2val:0x01000000
TEST_RR_OP(xor, x24, x12, x26, 0x1020000, 0x00020000, 0x01000000, x1, 28, x2)

// rs1==x17, rs2==x31, rd==x19, rs1_val == 262144, rs2_val == 268435456
// opcode: xor ; op1:x17; op2:x31; dest:x19; op1val:0x00040000;  op2val:0x10000000
TEST_RR_OP(xor, x19, x17, x31, 0x10040000, 0x00040000, 0x10000000, x1, 32, x2)

// rs1==x5, rs2==x18, rd==x20, rs1_val == 524288, 
// opcode: xor ; op1:x5; op2:x18; dest:x20; op1val:0x00080000;  op2val:0x7fffffff
TEST_RR_OP(xor, x20, x5, x18, 0x7ff7ffff, 0x00080000, 0x7fffffff, x1, 36, x2)

// rs1==x24, rs2==x16, rd==x26, rs1_val == 1048576, rs2_val == 4
// opcode: xor ; op1:x24; op2:x16; dest:x26; op1val:0x00100000;  op2val:0x00000004
TEST_RR_OP(xor, x26, x24, x16, 0x100004, 0x00100000, 0x00000004, x1, 40, x2)

// rs1==x6, rs2==x8, rd==x31, rs1_val == 2097152, 
// opcode: xor ; op1:x6; op2:x8; dest:x31; op1val:0x00200000;  op2val:0xffff7fff
TEST_RR_OP(xor, x31, x6, x8, 0xffdf7fff, 0x00200000, 0xffff7fff, x1, 44, x2)

// rs1==x11, rs2==x4, rd==x30, rs1_val == 4194304, rs2_val == 33554432
// opcode: xor ; op1:x11; op2:x4; dest:x30; op1val:0x00400000;  op2val:0x02000000
TEST_RR_OP(xor, x30, x11, x4, 0x2400000, 0x00400000, 0x02000000, x1, 48, x2)

// rs1==x20, rs2==x25, rd==x11, rs1_val == 8388608, 
// opcode: xor ; op1:x20; op2:x25; dest:x11; op1val:0x00800000;  op2val:0x00000005
TEST_RR_OP(xor, x11, x20, x25, 0x800005, 0x00800000, 0x00000005, x1, 52, x3)

// rs1==x2, rs2==x20, rd==x8, rs1_val == 16777216, 
// opcode: xor ; op1:x2; op2:x20; dest:x8; op1val:0x01000000;  op2val:0xfffffeff
TEST_RR_OP(xor, x8, x2, x20, 0xfefffeff, 0x01000000, 0xfffffeff, x1, 56, x3)

// rs1_val == 33554432, rs2_val == -131073
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x02000000;  op2val:0xfffdffff
TEST_RR_OP(xor, x12, x10, x11, 0xfdfdffff, 0x02000000, 0xfffdffff, x1, 60, x3)

// rs1_val == 67108864, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x04000000;  op2val:0xc0000000
TEST_RR_OP(xor, x12, x10, x11, 0xc4000000, 0x04000000, 0xc0000000, x1, 64, x3)

// rs1_val == 134217728, rs2_val == 134217728
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x08000000;  op2val:0x08000000
TEST_RR_OP(xor, x12, x10, x11, 0x0, 0x08000000, 0x08000000, x1, 68, x3)

// rs1_val == 268435456, rs2_val == -536870913
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x10000000;  op2val:0xdfffffff
TEST_RR_OP(xor, x12, x10, x11, 0xcfffffff, 0x10000000, 0xdfffffff, x1, 72, x3)

// rs1_val == 536870912, rs2_val == 32768
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x20000000;  op2val:0x00008000
TEST_RR_OP(xor, x12, x10, x11, 0x20008000, 0x20000000, 0x00008000, x1, 76, x3)

// rs1_val == 1073741824, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x40000000;  op2val:0x02000000
TEST_RR_OP(xor, x12, x10, x11, 0x42000000, 0x40000000, 0x02000000, x1, 80, x3)

// rs1_val == -2, rs2_val == -16777217
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0xfffffffe;  op2val:0xfeffffff
TEST_RR_OP(xor, x12, x10, x11, 0x1000001, 0xfffffffe, 0xfeffffff, x1, 84, x3)

// rs1_val == -3, rs2_val == 67108864
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0xfffffffd;  op2val:0x04000000
TEST_RR_OP(xor, x12, x10, x11, 0xfbfffffd, 0xfffffffd, 0x04000000, x1, 88, x3)

// rs1_val == -5, rs2_val == -134217729
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0xfffffffb;  op2val:0xf7ffffff
TEST_RR_OP(xor, x12, x10, x11, 0x8000004, 0xfffffffb, 0xf7ffffff, x1, 92, x3)

// rs1_val == -17, rs2_val == 16
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0xffffffef;  op2val:0x00000010
TEST_RR_OP(xor, x12, x10, x11, 0xffffffff, 0xffffffef, 0x00000010, x1, 96, x3)

// rs1_val == -33, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0xffffffdf;  op2val:0x00000000
TEST_RR_OP(xor, x12, x10, x11, 0xffffffdf, 0xffffffdf, 0x00000000, x1, 100, x3)

// rs1_val == -65, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0xffffffbf;  op2val:0xffffffff
TEST_RR_OP(xor, x12, x10, x11, 0x40, 0xffffffbf, 0xffffffff, x1, 104, x3)

// rs2_val == -524289, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x00400000;  op2val:0xfff7ffff
TEST_RR_OP(xor, x12, x10, x11, 0xffb7ffff, 0x00400000, 0xfff7ffff, x1, 108, x3)

// rs2_val == -1048577, rs1_val == -8388609
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0xff7fffff;  op2val:0xffefffff
TEST_RR_OP(xor, x12, x10, x11, 0x900000, 0xff7fffff, 0xffefffff, x1, 112, x3)

// rs2_val == -2097153, rs1_val == -1048577
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0xffefffff;  op2val:0xffdfffff
TEST_RR_OP(xor, x12, x10, x11, 0x300000, 0xffefffff, 0xffdfffff, x1, 116, x3)

// rs2_val == -4194305, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x04000000;  op2val:0xffbfffff
TEST_RR_OP(xor, x12, x10, x11, 0xfbbfffff, 0x04000000, 0xffbfffff, x1, 120, x3)

// rs2_val == -33554433, rs1_val == -1073741825
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0xbfffffff;  op2val:0xfdffffff
TEST_RR_OP(xor, x12, x10, x11, 0x42000000, 0xbfffffff, 0xfdffffff, x1, 124, x3)

// rs2_val == -268435457, rs1_val == -524289
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0xfff7ffff;  op2val:0xefffffff
TEST_RR_OP(xor, x12, x10, x11, 0x10080000, 0xfff7ffff, 0xefffffff, x1, 128, x3)

// rs2_val == 1431655765, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x00000004;  op2val:0x55555555
TEST_RR_OP(xor, x12, x10, x11, 0x55555551, 0x00000004, 0x55555555, x1, 132, x3)

// rs2_val == -1431655766, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x01000000;  op2val:0xaaaaaaaa
TEST_RR_OP(xor, x12, x10, x11, 0xabaaaaaa, 0x01000000, 0xaaaaaaaa, x1, 136, x3)

// rs1_val == -257, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0xfffffeff;  op2val:0xfffbffff
TEST_RR_OP(xor, x12, x10, x11, 0x40100, 0xfffffeff, 0xfffbffff, x1, 140, x3)

// rs1_val == -513, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0xfffffdff;  op2val:0xffff7fff
TEST_RR_OP(xor, x12, x10, x11, 0x8200, 0xfffffdff, 0xffff7fff, x1, 144, x3)

// rs1_val == -1025, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0xfffffbff;  op2val:0xfffffff9
TEST_RR_OP(xor, x12, x10, x11, 0x406, 0xfffffbff, 0xfffffff9, x1, 148, x3)

// rs1_val == -2049, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0xfffff7ff;  op2val:0x3fffffff
TEST_RR_OP(xor, x12, x10, x11, 0xc0000800, 0xfffff7ff, 0x3fffffff, x1, 152, x3)

// rs1_val == -4097, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0xffffefff;  op2val:0xffffefff
TEST_RR_OP(xor, x12, x10, x11, 0x0, 0xffffefff, 0xffffefff, x1, 156, x3)

// rs1_val == -8193, rs2_val == 8
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0xffffdfff;  op2val:0x00000008
TEST_RR_OP(xor, x12, x10, x11, 0xffffdff7, 0xffffdfff, 0x00000008, x1, 160, x3)

// rs1_val == -16385, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0xffffbfff;  op2val:0xaaaaaaaa
TEST_RR_OP(xor, x12, x10, x11, 0x55551555, 0xffffbfff, 0xaaaaaaaa, x1, 164, x3)

// rs1_val == -32769, rs2_val == 2
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0xffff7fff;  op2val:0x00000002
TEST_RR_OP(xor, x12, x10, x11, 0xffff7ffd, 0xffff7fff, 0x00000002, x1, 168, x3)

// rs1_val == -65537, rs2_val == -8193
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0xfffeffff;  op2val:0xffffdfff
TEST_RR_OP(xor, x12, x10, x11, 0x12000, 0xfffeffff, 0xffffdfff, x1, 172, x3)

// rs1_val == -131073, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0xfffdffff;  op2val:0xffdfffff
TEST_RR_OP(xor, x12, x10, x11, 0x220000, 0xfffdffff, 0xffdfffff, x1, 176, x3)

// rs1_val == -262145, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0xfffbffff;  op2val:0x00000008
TEST_RR_OP(xor, x12, x10, x11, 0xfffbfff7, 0xfffbffff, 0x00000008, x1, 180, x3)

// rs1_val == -2097153, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0xffdfffff;  op2val:0xc0000000
TEST_RR_OP(xor, x12, x10, x11, 0x3fdfffff, 0xffdfffff, 0xc0000000, x1, 184, x3)

// rs1_val == -4194305, rs2_val == 1024
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0xffbfffff;  op2val:0x00000400
TEST_RR_OP(xor, x12, x10, x11, 0xffbffbff, 0xffbfffff, 0x00000400, x1, 188, x3)

// rs1_val == -16777217, rs2_val == -2
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0xfeffffff;  op2val:0xfffffffe
TEST_RR_OP(xor, x12, x10, x11, 0x1000001, 0xfeffffff, 0xfffffffe, x1, 192, x3)

// rs1_val == -67108865, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0xfbffffff;  op2val:0x00000010
TEST_RR_OP(xor, x12, x10, x11, 0xfbffffef, 0xfbffffff, 0x00000010, x1, 196, x3)

// rs1_val == -134217729, rs2_val == -33
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0xf7ffffff;  op2val:0xffffffdf
TEST_RR_OP(xor, x12, x10, x11, 0x8000020, 0xf7ffffff, 0xffffffdf, x1, 200, x3)

// rs1_val == -268435457, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0xefffffff;  op2val:0x3fffffff
TEST_RR_OP(xor, x12, x10, x11, 0xd0000000, 0xefffffff, 0x3fffffff, x1, 204, x3)

// rs1_val == -536870913, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0xdfffffff;  op2val:0xfeffffff
TEST_RR_OP(xor, x12, x10, x11, 0x21000000, 0xdfffffff, 0xfeffffff, x1, 208, x3)

// rs1_val == 1431655765, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x55555555;  op2val:0xffffffff
TEST_RR_OP(xor, x12, x10, x11, 0xaaaaaaaa, 0x55555555, 0xffffffff, x1, 212, x3)

// rs1_val == -1431655766, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0xaaaaaaaa;  op2val:0x02000000
TEST_RR_OP(xor, x12, x10, x11, 0xa8aaaaaa, 0xaaaaaaaa, 0x02000000, x1, 216, x3)

// rs2_val == 32, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x00100000;  op2val:0x00000020
TEST_RR_OP(xor, x12, x10, x11, 0x100020, 0x00100000, 0x00000020, x1, 220, x3)

// rs2_val == 64, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x10000000;  op2val:0x00000040
TEST_RR_OP(xor, x12, x10, x11, 0x10000040, 0x10000000, 0x00000040, x1, 224, x3)

// rs2_val == 128, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0xffffefff;  op2val:0x00000080
TEST_RR_OP(xor, x12, x10, x11, 0xffffef7f, 0xffffefff, 0x00000080, x1, 228, x3)

// rs2_val == 256, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0xffffffff;  op2val:0x00000100
TEST_RR_OP(xor, x12, x10, x11, 0xfffffeff, 0xffffffff, 0x00000100, x1, 232, x3)

// rs2_val == 512, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0xffffffbf;  op2val:0x00000200
TEST_RR_OP(xor, x12, x10, x11, 0xfffffdbf, 0xffffffbf, 0x00000200, x1, 236, x3)

// rs2_val == 2048, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0xfffdffff;  op2val:0x00000800
TEST_RR_OP(xor, x12, x10, x11, 0xfffdf7ff, 0xfffdffff, 0x00000800, x1, 240, x3)

// rs2_val == 4096, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0xffffbfff;  op2val:0x00001000
TEST_RR_OP(xor, x12, x10, x11, 0xffffafff, 0xffffbfff, 0x00001000, x1, 244, x3)

// rs2_val == 8192, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0xffefffff;  op2val:0x00002000
TEST_RR_OP(xor, x12, x10, x11, 0xffefdfff, 0xffefffff, 0x00002000, x1, 248, x3)

// rs2_val == 65536, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0xffffdfff;  op2val:0x00010000
TEST_RR_OP(xor, x12, x10, x11, 0xfffedfff, 0xffffdfff, 0x00010000, x1, 252, x3)

// rs2_val == 131072, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0xfffffffb;  op2val:0x00020000
TEST_RR_OP(xor, x12, x10, x11, 0xfffdfffb, 0xfffffffb, 0x00020000, x1, 256, x3)

// rs2_val == 262144, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x00080000;  op2val:0x00040000
TEST_RR_OP(xor, x12, x10, x11, 0xc0000, 0x00080000, 0x00040000, x1, 260, x3)

// rs2_val == 524288, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x00000008;  op2val:0x00080000
TEST_RR_OP(xor, x12, x10, x11, 0x80008, 0x00000008, 0x00080000, x1, 264, x3)

// rs2_val == 1048576, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0xfff7ffff;  op2val:0x00100000
TEST_RR_OP(xor, x12, x10, x11, 0xffe7ffff, 0xfff7ffff, 0x00100000, x1, 268, x3)

// rs2_val == 2097152, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0xfbffffff;  op2val:0x00200000
TEST_RR_OP(xor, x12, x10, x11, 0xfbdfffff, 0xfbffffff, 0x00200000, x1, 272, x3)

// rs2_val == 4194304, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x55555555;  op2val:0x00400000
TEST_RR_OP(xor, x12, x10, x11, 0x55155555, 0x55555555, 0x00400000, x1, 276, x3)

// rs2_val == 8388608, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0xfeffffff;  op2val:0x00800000
TEST_RR_OP(xor, x12, x10, x11, 0xfe7fffff, 0xfeffffff, 0x00800000, x1, 280, x3)

// rs2_val == 536870912, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x10000000;  op2val:0x20000000
TEST_RR_OP(xor, x12, x10, x11, 0x30000000, 0x10000000, 0x20000000, x1, 284, x3)

// rs2_val == 1073741824, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x00000004;  op2val:0x40000000
TEST_RR_OP(xor, x12, x10, x11, 0x40000004, 0x00000004, 0x40000000, x1, 288, x3)

// rs2_val == -5, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0xfffffffe;  op2val:0xfffffffb
TEST_RR_OP(xor, x12, x10, x11, 0x5, 0xfffffffe, 0xfffffffb, x1, 292, x3)

// rs2_val == -17, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x80000000;  op2val:0xffffffef
TEST_RR_OP(xor, x12, x10, x11, 0x7fffffef, 0x80000000, 0xffffffef, x1, 296, x3)

// rs2_val == -65, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0xffffffff;  op2val:0xffffffbf
TEST_RR_OP(xor, x12, x10, x11, 0x40, 0xffffffff, 0xffffffbf, x1, 300, x3)

// rs2_val == -1025, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0xfffffff6;  op2val:0xfffffbff
TEST_RR_OP(xor, x12, x10, x11, 0x409, 0xfffffff6, 0xfffffbff, x1, 304, x3)

// rs2_val == -16385, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x10000000;  op2val:0xffffbfff
TEST_RR_OP(xor, x12, x10, x11, 0xefffbfff, 0x10000000, 0xffffbfff, x1, 308, x3)

// rs2_val == -129, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0xbfffffff;  op2val:0xffffff7f
TEST_RR_OP(xor, x12, x10, x11, 0x40000080, 0xbfffffff, 0xffffff7f, x1, 312, x3)

// rs2_val == -65537, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x00000007;  op2val:0xfffeffff
TEST_RR_OP(xor, x12, x10, x11, 0xfffefff8, 0x00000007, 0xfffeffff, x1, 316, x3)

// rs1_val == 0, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x00000000;  op2val:0xfffffffa
TEST_RR_OP(xor, x12, x10, x11, 0xfffffffa, 0x00000000, 0xfffffffa, x1, 320, x3)

// rs1_val == (2**(xlen-1)-1), rs1_val > 0 and rs2_val < 0, rs1_val == 2147483647, rs2_val == -1073741825
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x7fffffff;  op2val:0xbfffffff
TEST_RR_OP(xor, x12, x10, x11, 0xc0000000, 0x7fffffff, 0xbfffffff, x1, 324, x3)

// rs2_val == (-2**(xlen-1)), rs2_val == -2147483648
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0xffffffff;  op2val:0x80000000
TEST_RR_OP(xor, x12, x10, x11, 0x7fffffff, 0xffffffff, 0x80000000, x1, 328, x3)

// rs2_val == 0, rs1_val == -33554433
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0xfdffffff;  op2val:0x00000000
TEST_RR_OP(xor, x12, x10, x11, 0xfdffffff, 0xfdffffff, 0x00000000, x1, 332, x3)

// rs1_val == 2048, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x00000800;  op2val:0x00000005
TEST_RR_OP(xor, x12, x10, x11, 0x805, 0x00000800, 0x00000005, x1, 336, x3)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
.align 4

signature_x8_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x8_1:
    .fill 17*(XLEN/32),4,0xdeadbeef


signature_x1_0:
    .fill 85*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
