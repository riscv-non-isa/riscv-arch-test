 
// -----------
// This file was generated by riscv_ctg (https://gitlab.com/incoresemi/riscv-compliance/riscv_ctg)
// version   : 0.1.0
// timestamp : Fri Nov  6 10:29:11 2020 GMT
// usage     : riscv_ctg \
//                  -- cgf /scratch/git-repo/incoresemi/riscv-compliance/riscv_ctg/sample_cgfs/rv32i.cgf \
//                  -- xlen 32 \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the sw instruction of the RISC-V I extension for the sw-align covergroup.
// 
#include "compliance_model.h"
#include "compliance_test.h"
RVTEST_ISA("RV32I")

RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*);def TEST_CASE_1=True;",sw-align)

RVTEST_SIGBASE( x10,signature_x10_1)

inst_0:
// rs1 != rs2, rs1==x23, rs2==x17, ea_align == 0 and (imm_val % 4) == 0, imm_val > 0
// opcode: sw; op1:x23; op2:x17; op2val:3; immval:16; align:0
TEST_STORE(x10,x14,0,x23,x17,3,16,0,sw,0)

inst_1:
// rs1==x17, rs2==x20, ea_align == 0 and (imm_val % 4) == 1, rs2_val == -2049, imm_val < 0
// opcode: sw; op1:x17; op2:x20; op2val:-2049; immval:-3; align:0
TEST_STORE(x10,x14,0,x17,x20,-2049,-3,4,sw,0)

inst_2:
// rs1==x3, rs2==x24, ea_align == 0 and (imm_val % 4) == 2, rs2_val == 2048
// opcode: sw; op1:x3; op2:x24; op2val:2048; immval:-2; align:0
TEST_STORE(x10,x14,0,x3,x24,2048,-2,8,sw,0)

inst_3:
// rs1==x1, rs2==x19, ea_align == 0 and (imm_val % 4) == 3, rs2_val == -33
// opcode: sw; op1:x1; op2:x19; op2val:-33; immval:1023; align:0
TEST_STORE(x10,x14,0,x1,x19,-33,1023,12,sw,0)

inst_4:
// rs1==x24, rs2==x11, imm_val == 0, rs2_val == 4
// opcode: sw; op1:x24; op2:x11; op2val:4; immval:0; align:0
TEST_STORE(x10,x14,0,x24,x11,4,0,16,sw,0)

inst_5:
// rs1==x20, rs2==x8, rs2_val == (-2**(xlen-1)), rs2_val == -2147483648
// opcode: sw; op1:x20; op2:x8; op2val:-2147483648; immval:-1024; align:0
TEST_STORE(x10,x14,0,x20,x8,-2147483648,-1024,20,sw,0)

inst_6:
// rs1==x8, rs2==x21, rs2_val == 0, 
// opcode: sw; op1:x8; op2:x21; op2val:0; immval:7; align:0
TEST_STORE(x10,x14,0,x8,x21,0,7,24,sw,0)

inst_7:
// rs1==x16, rs2==x27, rs2_val == (2**(xlen-1)-1), rs2_val == 2147483647
// opcode: sw; op1:x16; op2:x27; op2val:2147483647; immval:5; align:0
TEST_STORE(x10,x14,0,x16,x27,2147483647,5,28,sw,0)

inst_8:
// rs1==x5, rs2==x15, rs2_val == 1, 
// opcode: sw; op1:x5; op2:x15; op2val:1; immval:-2048; align:0
TEST_STORE(x10,x14,0,x5,x15,1,-2048,32,sw,0)

inst_9:
// rs1==x22, rs2==x23, rs2_val == 2, 
// opcode: sw; op1:x22; op2:x23; op2val:2; immval:256; align:0
TEST_STORE(x10,x14,0,x22,x23,2,256,36,sw,0)

inst_10:
// rs1==x12, rs2==x18, rs2_val == 8, 
// opcode: sw; op1:x12; op2:x18; op2val:8; immval:512; align:0
TEST_STORE(x10,x14,0,x12,x18,8,512,40,sw,0)

inst_11:
// rs1==x7, rs2==x9, rs2_val == 16, 
// opcode: sw; op1:x7; op2:x9; op2val:16; immval:1024; align:0
TEST_STORE(x10,x14,0,x7,x9,16,1024,44,sw,0)

inst_12:
// rs1==x4, rs2==x30, rs2_val == 32, 
// opcode: sw; op1:x4; op2:x30; op2val:32; immval:1; align:0
TEST_STORE(x10,x14,0,x4,x30,32,1,48,sw,0)

inst_13:
// rs1==x15, rs2==x3, rs2_val == 64, 
// opcode: sw; op1:x15; op2:x3; op2val:64; immval:-1024; align:0
TEST_STORE(x10,x14,0,x15,x3,64,-1024,52,sw,0)

inst_14:
// rs1==x9, rs2==x6, rs2_val == 128, 
// opcode: sw; op1:x9; op2:x6; op2val:128; immval:2047; align:0
TEST_STORE(x10,x14,0,x9,x6,128,2047,56,sw,0)

inst_15:
// rs1==x11, rs2==x22, rs2_val == 256, 
// opcode: sw; op1:x11; op2:x22; op2val:256; immval:6; align:0
TEST_STORE(x10,x14,0,x11,x22,256,6,60,sw,0)

inst_16:
// rs1==x21, rs2==x0, rs2_val == 512, 
// opcode: sw; op1:x21; op2:x0; op2val:512; immval:8; align:0
TEST_STORE(x10,x14,0,x21,x0,512,8,64,sw,0)

inst_17:
// rs1==x25, rs2==x2, rs2_val == 1024, 
// opcode: sw; op1:x25; op2:x2; op2val:1024; immval:-5; align:0
TEST_STORE(x10,x14,0,x25,x2,1024,-5,68,sw,0)

inst_18:
// rs1==x18, rs2==x13, rs2_val == 4096, 
// opcode: sw; op1:x18; op2:x13; op2val:4096; immval:1; align:0
TEST_STORE(x10,x14,0,x18,x13,4096,1,72,sw,0)

inst_19:
// rs1==x6, rs2==x16, rs2_val == 8192, 
// opcode: sw; op1:x6; op2:x16; op2val:8192; immval:-7; align:0
TEST_STORE(x10,x14,0,x6,x16,8192,-7,76,sw,0)

inst_20:
// rs1==x19, rs2==x25, rs2_val == 16384, 
// opcode: sw; op1:x19; op2:x25; op2val:16384; immval:5; align:0
TEST_STORE(x10,x14,0,x19,x25,16384,5,80,sw,0)

inst_21:
// rs1==x31, rs2==x4, rs2_val == 32768, 
// opcode: sw; op1:x31; op2:x4; op2val:32768; immval:2047; align:0
TEST_STORE(x10,x14,0,x31,x4,32768,2047,84,sw,0)

inst_22:
// rs1==x30, rs2==x5, rs2_val == 65536, 
// opcode: sw; op1:x30; op2:x5; op2val:65536; immval:-1025; align:0
TEST_STORE(x10,x14,0,x30,x5,65536,-1025,88,sw,0)

inst_23:
// rs1==x27, rs2==x31, rs2_val == 131072, 
// opcode: sw; op1:x27; op2:x31; op2val:131072; immval:256; align:0
TEST_STORE(x10,x14,0,x27,x31,131072,256,92,sw,0)

inst_24:
// rs1==x26, rs2==x29, rs2_val == 262144, 
// opcode: sw; op1:x26; op2:x29; op2val:262144; immval:-2048; align:0
TEST_STORE(x10,x14,0,x26,x29,262144,-2048,96,sw,0)
RVTEST_SIGBASE( x3,signature_x3_0)

inst_25:
// rs1==x2, rs2==x14, rs2_val == 524288, 
// opcode: sw; op1:x2; op2:x14; op2val:524288; immval:1365; align:0
TEST_STORE(x3,x4,0,x2,x14,524288,1365,0,sw,0)

inst_26:
// rs1==x28, rs2==x7, rs2_val == 1048576, 
// opcode: sw; op1:x28; op2:x7; op2val:1048576; immval:128; align:0
TEST_STORE(x3,x4,0,x28,x7,1048576,128,4,sw,0)

inst_27:
// rs1==x29, rs2==x26, rs2_val == 2097152, 
// opcode: sw; op1:x29; op2:x26; op2val:2097152; immval:-513; align:0
TEST_STORE(x3,x4,0,x29,x26,2097152,-513,8,sw,0)

inst_28:
// rs1==x13, rs2==x12, rs2_val == 4194304, 
// opcode: sw; op1:x13; op2:x12; op2val:4194304; immval:-1025; align:0
TEST_STORE(x3,x4,0,x13,x12,4194304,-1025,12,sw,0)

inst_29:
// rs1==x10, rs2==x1, rs2_val == 8388608, 
// opcode: sw; op1:x10; op2:x1; op2val:8388608; immval:-3; align:0
TEST_STORE(x3,x4,0,x10,x1,8388608,-3,16,sw,0)

inst_30:
// rs1==x14, rs2==x28, rs2_val == 16777216, 
// opcode: sw; op1:x14; op2:x28; op2val:16777216; immval:1; align:0
TEST_STORE(x3,x4,0,x14,x28,16777216,1,20,sw,0)

inst_31:
// rs2==x10, rs2_val == 33554432, 
// opcode: sw; op1:x18; op2:x10; op2val:33554432; immval:-4; align:0
TEST_STORE(x3,x4,0,x18,x10,33554432,-4,24,sw,0)

inst_32:
// rs2_val == 67108864, 
// opcode: sw; op1:x10; op2:x11; op2val:67108864; immval:-2048; align:0
TEST_STORE(x3,x4,0,x10,x11,67108864,-2048,28,sw,0)

inst_33:
// rs2_val == 134217728, 
// opcode: sw; op1:x10; op2:x11; op2val:134217728; immval:-17; align:0
TEST_STORE(x3,x4,0,x10,x11,134217728,-17,32,sw,0)

inst_34:
// rs2_val == 268435456, 
// opcode: sw; op1:x10; op2:x11; op2val:268435456; immval:-3; align:0
TEST_STORE(x3,x4,0,x10,x11,268435456,-3,36,sw,0)

inst_35:
// rs2_val == 536870912, 
// opcode: sw; op1:x10; op2:x11; op2val:536870912; immval:256; align:0
TEST_STORE(x3,x4,0,x10,x11,536870912,256,40,sw,0)

inst_36:
// rs2_val == 1073741824, 
// opcode: sw; op1:x10; op2:x11; op2val:1073741824; immval:16; align:0
TEST_STORE(x3,x4,0,x10,x11,1073741824,16,44,sw,0)

inst_37:
// rs2_val == -4194305, 
// opcode: sw; op1:x10; op2:x11; op2val:-4194305; immval:-10; align:0
TEST_STORE(x3,x4,0,x10,x11,-4194305,-10,48,sw,0)

inst_38:
// rs2_val == -8388609, 
// opcode: sw; op1:x10; op2:x11; op2val:-8388609; immval:1024; align:0
TEST_STORE(x3,x4,0,x10,x11,-8388609,1024,52,sw,0)

inst_39:
// rs2_val == -16777217, 
// opcode: sw; op1:x10; op2:x11; op2val:-16777217; immval:-4; align:0
TEST_STORE(x3,x4,0,x10,x11,-16777217,-4,56,sw,0)

inst_40:
// rs2_val == -33554433, 
// opcode: sw; op1:x10; op2:x11; op2val:-33554433; immval:9; align:0
TEST_STORE(x3,x4,0,x10,x11,-33554433,9,60,sw,0)

inst_41:
// rs2_val == -67108865, 
// opcode: sw; op1:x10; op2:x11; op2val:-67108865; immval:-2; align:0
TEST_STORE(x3,x4,0,x10,x11,-67108865,-2,64,sw,0)

inst_42:
// rs2_val == -134217729, 
// opcode: sw; op1:x10; op2:x11; op2val:-134217729; immval:1; align:0
TEST_STORE(x3,x4,0,x10,x11,-134217729,1,68,sw,0)

inst_43:
// rs2_val == -268435457, 
// opcode: sw; op1:x10; op2:x11; op2val:-268435457; immval:-7; align:0
TEST_STORE(x3,x4,0,x10,x11,-268435457,-7,72,sw,0)

inst_44:
// rs2_val == -536870913, 
// opcode: sw; op1:x10; op2:x11; op2val:-536870913; immval:16; align:0
TEST_STORE(x3,x4,0,x10,x11,-536870913,16,76,sw,0)

inst_45:
// rs2_val == -1073741825, 
// opcode: sw; op1:x10; op2:x11; op2val:-1073741825; immval:0; align:0
TEST_STORE(x3,x4,0,x10,x11,-1073741825,0,80,sw,0)

inst_46:
// rs2_val == 1431655765, 
// opcode: sw; op1:x10; op2:x11; op2val:1431655765; immval:256; align:0
TEST_STORE(x3,x4,0,x10,x11,1431655765,256,84,sw,0)

inst_47:
// rs2_val == -1431655766, 
// opcode: sw; op1:x10; op2:x11; op2val:-1431655766; immval:-9; align:0
TEST_STORE(x3,x4,0,x10,x11,-1431655766,-9,88,sw,0)

inst_48:
// rs2_val == -2, 
// opcode: sw; op1:x10; op2:x11; op2val:-2; immval:-17; align:0
TEST_STORE(x3,x4,0,x10,x11,-2,-17,92,sw,0)

inst_49:
// rs2_val == -3, 
// opcode: sw; op1:x10; op2:x11; op2val:-3; immval:1023; align:0
TEST_STORE(x3,x4,0,x10,x11,-3,1023,96,sw,0)

inst_50:
// rs2_val == -5, 
// opcode: sw; op1:x10; op2:x11; op2val:-5; immval:2; align:0
TEST_STORE(x3,x4,0,x10,x11,-5,2,100,sw,0)

inst_51:
// rs2_val == -9, 
// opcode: sw; op1:x10; op2:x11; op2val:-9; immval:64; align:0
TEST_STORE(x3,x4,0,x10,x11,-9,64,104,sw,0)

inst_52:
// rs2_val == -17, 
// opcode: sw; op1:x10; op2:x11; op2val:-17; immval:-2; align:0
TEST_STORE(x3,x4,0,x10,x11,-17,-2,108,sw,0)

inst_53:
// rs2_val == -65, 
// opcode: sw; op1:x10; op2:x11; op2val:-65; immval:-33; align:0
TEST_STORE(x3,x4,0,x10,x11,-65,-33,112,sw,0)

inst_54:
// rs2_val == -129, 
// opcode: sw; op1:x10; op2:x11; op2val:-129; immval:1365; align:0
TEST_STORE(x3,x4,0,x10,x11,-129,1365,116,sw,0)

inst_55:
// rs2_val == -257, 
// opcode: sw; op1:x10; op2:x11; op2val:-257; immval:-513; align:0
TEST_STORE(x3,x4,0,x10,x11,-257,-513,120,sw,0)

inst_56:
// rs2_val == -513, 
// opcode: sw; op1:x10; op2:x11; op2val:-513; immval:1365; align:0
TEST_STORE(x3,x4,0,x10,x11,-513,1365,124,sw,0)

inst_57:
// rs2_val == -1025, 
// opcode: sw; op1:x10; op2:x11; op2val:-1025; immval:-1366; align:0
TEST_STORE(x3,x4,0,x10,x11,-1025,-1366,128,sw,0)

inst_58:
// rs2_val == -4097, 
// opcode: sw; op1:x10; op2:x11; op2val:-4097; immval:-65; align:0
TEST_STORE(x3,x4,0,x10,x11,-4097,-65,132,sw,0)

inst_59:
// rs2_val == -8193, 
// opcode: sw; op1:x10; op2:x11; op2val:-8193; immval:4; align:0
TEST_STORE(x3,x4,0,x10,x11,-8193,4,136,sw,0)

inst_60:
// rs2_val == -16385, 
// opcode: sw; op1:x10; op2:x11; op2val:-16385; immval:-1024; align:0
TEST_STORE(x3,x4,0,x10,x11,-16385,-1024,140,sw,0)

inst_61:
// rs2_val == -32769, 
// opcode: sw; op1:x10; op2:x11; op2val:-32769; immval:9; align:0
TEST_STORE(x3,x4,0,x10,x11,-32769,9,144,sw,0)

inst_62:
// rs2_val == -65537, 
// opcode: sw; op1:x10; op2:x11; op2val:-65537; immval:-1025; align:0
TEST_STORE(x3,x4,0,x10,x11,-65537,-1025,148,sw,0)

inst_63:
// rs2_val == -131073, 
// opcode: sw; op1:x10; op2:x11; op2val:-131073; immval:-129; align:0
TEST_STORE(x3,x4,0,x10,x11,-131073,-129,152,sw,0)

inst_64:
// rs2_val == -262145, 
// opcode: sw; op1:x10; op2:x11; op2val:-262145; immval:-1366; align:0
TEST_STORE(x3,x4,0,x10,x11,-262145,-1366,156,sw,0)

inst_65:
// rs2_val == -524289, 
// opcode: sw; op1:x10; op2:x11; op2val:-524289; immval:-17; align:0
TEST_STORE(x3,x4,0,x10,x11,-524289,-17,160,sw,0)

inst_66:
// rs2_val == -1048577, 
// opcode: sw; op1:x10; op2:x11; op2val:-1048577; immval:-65; align:0
TEST_STORE(x3,x4,0,x10,x11,-1048577,-65,164,sw,0)

inst_67:
// rs2_val == -2097153, 
// opcode: sw; op1:x10; op2:x11; op2val:-2097153; immval:-2; align:0
TEST_STORE(x3,x4,0,x10,x11,-2097153,-2,168,sw,0)

inst_68:
// rs2_val == 512, 
// opcode: sw; op1:x10; op2:x11; op2val:512; immval:8; align:0
TEST_STORE(x3,x4,0,x10,x11,512,8,172,sw,0)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x10_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x10_1:
    .fill 25*(XLEN/32),4,0xdeadbeef


signature_x3_0:
    .fill 44*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
