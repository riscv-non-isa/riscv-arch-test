 
// -----------
// This file was generated by riscv_ctg (https://gitlab.com/incoresemi/riscv-compliance/riscv_ctg)
// version   : 0.1.0
// timestamp : Fri Nov  6 10:29:11 2020 GMT
// usage     : riscv_ctg \
//                  -- cgf /scratch/git-repo/incoresemi/riscv-compliance/riscv_ctg/sample_cgfs/rv32i.cgf \
//                  -- xlen 32 \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the ori instruction of the RISC-V I extension for the ori covergroup.
// 
#include "compliance_model.h"
#include "compliance_test.h"
RVTEST_ISA("RV32I")

RVTEST_CODE_BEGIN
RVMODEL_BOOT

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*);def TEST_CASE_1=True;",ori)

RVTEST_SIGBASE( x18,signature_x18_1)

inst_0:
// rs1 != rd, rs1==x12, rd==x16, rs1_val == imm_val, rs1_val < 0 and imm_val < 0
// opcode: ori ; op1:x12; dest:x16; op1val:-8;  immval:-8
TEST_IMM_OP( ori, x16, x12, 0xfffffff8, -8, -8, x18, 0, x6)

inst_1:
// rs1 == rd, rs1==x3, rd==x3, rs1_val != imm_val, rs1_val == 134217728, imm_val == -513, rs1_val > 0 and imm_val < 0
// opcode: ori ; op1:x3; dest:x3; op1val:134217728;  immval:-513
TEST_IMM_OP( ori, x3, x3, 0xfffffdff, 134217728, -513, x18, 4, x6)

inst_2:
// rs1==x20, rd==x22, rs1_val > 0 and imm_val > 0, rs1_val == 64
// opcode: ori ; op1:x20; dest:x22; op1val:64;  immval:9
TEST_IMM_OP( ori, x22, x20, 0x49, 64, 9, x18, 8, x6)

inst_3:
// rs1==x2, rd==x14, rs1_val < 0 and imm_val > 0, 
// opcode: ori ; op1:x2; dest:x14; op1val:-10;  immval:1023
TEST_IMM_OP( ori, x14, x2, 0xffffffff, -10, 1023, x18, 12, x6)

inst_4:
// rs1==x13, rd==x10, rs1_val == (-2**(xlen-1)), rs1_val == -2147483648, imm_val == -5
// opcode: ori ; op1:x13; dest:x10; op1val:-2147483648;  immval:-5
TEST_IMM_OP( ori, x10, x13, 0xfffffffb, -2147483648, -5, x18, 16, x6)

inst_5:
// rs1==x23, rd==x27, rs1_val == 0, imm_val == (2**(12-1)-1), imm_val == 2047
// opcode: ori ; op1:x23; dest:x27; op1val:0;  immval:2047
TEST_IMM_OP( ori, x27, x23, 0x7ff, 0, 2047, x18, 20, x6)

inst_6:
// rs1==x26, rd==x1, rs1_val == (2**(xlen-1)-1), imm_val == -2048, imm_val == (-2**(12-1)), rs1_val == 2147483647
// opcode: ori ; op1:x26; dest:x1; op1val:2147483647;  immval:-2048
TEST_IMM_OP( ori, x1, x26, 0xffffffff, 2147483647, -2048, x18, 24, x6)

inst_7:
// rs1==x7, rd==x29, rs1_val == 1, imm_val == -17
// opcode: ori ; op1:x7; dest:x29; op1val:1;  immval:-17
TEST_IMM_OP( ori, x29, x7, 0xffffffef, 1, -17, x18, 28, x6)

inst_8:
// rs1==x11, rd==x28, imm_val == 0, rs1_val == -17
// opcode: ori ; op1:x11; dest:x28; op1val:-17;  immval:0
TEST_IMM_OP( ori, x28, x11, 0xffffffef, -17, 0, x18, 32, x6)

inst_9:
// rs1==x14, rd==x11, imm_val == 1, 
// opcode: ori ; op1:x14; dest:x11; op1val:-6;  immval:1
TEST_IMM_OP( ori, x11, x14, 0xfffffffb, -6, 1, x18, 36, x6)

inst_10:
// rs1==x10, rd==x31, rs1_val == 2, imm_val == 2
// opcode: ori ; op1:x10; dest:x31; op1val:2;  immval:2
TEST_IMM_OP( ori, x31, x10, 0x2, 2, 2, x18, 40, x6)

inst_11:
// rs1==x0, rd==x23, rs1_val == 4, 
// opcode: ori ; op1:x0; dest:x23; op1val:4;  immval:0
TEST_IMM_OP( ori, x23, x0, 0x4, 4, 0, x18, 44, x6)

inst_12:
// rs1==x28, rd==x25, rs1_val == 8, imm_val == 4
// opcode: ori ; op1:x28; dest:x25; op1val:8;  immval:4
TEST_IMM_OP( ori, x25, x28, 0xc, 8, 4, x18, 48, x6)

inst_13:
// rs1==x22, rd==x15, rs1_val == 16, 
// opcode: ori ; op1:x22; dest:x15; op1val:16;  immval:4
TEST_IMM_OP( ori, x15, x22, 0x14, 16, 4, x18, 52, x6)

inst_14:
// rs1==x27, rd==x20, rs1_val == 32, 
// opcode: ori ; op1:x27; dest:x20; op1val:32;  immval:-5
TEST_IMM_OP( ori, x20, x27, 0xfffffffb, 32, -5, x18, 56, x6)

inst_15:
// rs1==x25, rd==x17, rs1_val == 128, imm_val == -257
// opcode: ori ; op1:x25; dest:x17; op1val:128;  immval:-257
TEST_IMM_OP( ori, x17, x25, 0xfffffeff, 128, -257, x18, 60, x6)

inst_16:
// rs1==x1, rd==x0, rs1_val == 256, imm_val == 128
// opcode: ori ; op1:x1; dest:x0; op1val:256;  immval:128
TEST_IMM_OP( ori, x0, x1, 0x180, 256, 128, x18, 64, x6)

inst_17:
// rs1==x24, rd==x26, rs1_val == 512, 
// opcode: ori ; op1:x24; dest:x26; op1val:512;  immval:1023
TEST_IMM_OP( ori, x26, x24, 0x3ff, 512, 1023, x18, 68, x6)

inst_18:
// rs1==x9, rd==x5, rs1_val == 1024, imm_val == -1366
// opcode: ori ; op1:x9; dest:x5; op1val:1024;  immval:-1366
TEST_IMM_OP( ori, x5, x9, 0xfffffeaa, 1024, -1366, x18, 72, x6)

inst_19:
// rs1==x31, rd==x13, rs1_val == 2048, 
// opcode: ori ; op1:x31; dest:x13; op1val:2048;  immval:4
TEST_IMM_OP( ori, x13, x31, 0x804, 2048, 4, x18, 76, x6)

inst_20:
// rs1==x15, rd==x8, rs1_val == 4096, 
// opcode: ori ; op1:x15; dest:x8; op1val:4096;  immval:-10
TEST_IMM_OP( ori, x8, x15, 0xfffffff6, 4096, -10, x18, 80, x6)

inst_21:
// rs1==x17, rd==x19, rs1_val == 8192, 
// opcode: ori ; op1:x17; dest:x19; op1val:8192;  immval:-1366
TEST_IMM_OP( ori, x19, x17, 0xfffffaaa, 8192, -1366, x18, 84, x6)

inst_22:
// rs1==x16, rd==x4, rs1_val == 16384, 
// opcode: ori ; op1:x16; dest:x4; op1val:16384;  immval:1
TEST_IMM_OP( ori, x4, x16, 0x4001, 16384, 1, x18, 88, x6)

inst_23:
// rs1==x19, rd==x6, rs1_val == 32768, 
// opcode: ori ; op1:x19; dest:x6; op1val:32768;  immval:-7
TEST_IMM_OP( ori, x6, x19, 0xfffffff9, 32768, -7, x18, 92, x3)
RVTEST_SIGBASE( x1,signature_x1_0)

inst_24:
// rs1==x4, rd==x12, rs1_val == 65536, imm_val == 512
// opcode: ori ; op1:x4; dest:x12; op1val:65536;  immval:512
TEST_IMM_OP( ori, x12, x4, 0x10200, 65536, 512, x1, 0, x3)

inst_25:
// rs1==x18, rd==x21, rs1_val == 131072, imm_val == 8
// opcode: ori ; op1:x18; dest:x21; op1val:131072;  immval:8
TEST_IMM_OP( ori, x21, x18, 0x20008, 131072, 8, x1, 4, x3)

inst_26:
// rs1==x6, rd==x24, rs1_val == 262144, 
// opcode: ori ; op1:x6; dest:x24; op1val:262144;  immval:-4
TEST_IMM_OP( ori, x24, x6, 0xfffffffc, 262144, -4, x1, 8, x3)

inst_27:
// rs1==x5, rd==x30, rs1_val == 524288, 
// opcode: ori ; op1:x5; dest:x30; op1val:524288;  immval:-2048
TEST_IMM_OP( ori, x30, x5, 0xfffff800, 524288, -2048, x1, 12, x3)

inst_28:
// rs1==x8, rd==x2, rs1_val == 1048576, 
// opcode: ori ; op1:x8; dest:x2; op1val:1048576;  immval:9
TEST_IMM_OP( ori, x2, x8, 0x100009, 1048576, 9, x1, 16, x3)

inst_29:
// rs1==x30, rd==x18, rs1_val == 2097152, 
// opcode: ori ; op1:x30; dest:x18; op1val:2097152;  immval:7
TEST_IMM_OP( ori, x18, x30, 0x200007, 2097152, 7, x1, 20, x3)

inst_30:
// rs1==x29, rd==x9, rs1_val == 4194304, imm_val == -33
// opcode: ori ; op1:x29; dest:x9; op1val:4194304;  immval:-33
TEST_IMM_OP( ori, x9, x29, 0xffffffdf, 4194304, -33, x1, 24, x3)

inst_31:
// rs1==x21, rd==x7, rs1_val == 8388608, 
// opcode: ori ; op1:x21; dest:x7; op1val:8388608;  immval:-2048
TEST_IMM_OP( ori, x7, x21, 0xfffff800, 8388608, -2048, x1, 28, x3)

inst_32:
// rs1_val == 16777216, 
// opcode: ori ; op1:x10; dest:x11; op1val:16777216;  immval:-257
TEST_IMM_OP( ori, x11, x10, 0xfffffeff, 16777216, -257, x1, 32, x3)

inst_33:
// rs1_val == 33554432, 
// opcode: ori ; op1:x10; dest:x11; op1val:33554432;  immval:-5
TEST_IMM_OP( ori, x11, x10, 0xfffffffb, 33554432, -5, x1, 36, x3)

inst_34:
// rs1_val == 67108864, 
// opcode: ori ; op1:x10; dest:x11; op1val:67108864;  immval:2
TEST_IMM_OP( ori, x11, x10, 0x4000002, 67108864, 2, x1, 40, x3)

inst_35:
// rs1_val == 268435456, imm_val == -1025
// opcode: ori ; op1:x10; dest:x11; op1val:268435456;  immval:-1025
TEST_IMM_OP( ori, x11, x10, 0xfffffbff, 268435456, -1025, x1, 44, x3)

inst_36:
// rs1_val == 536870912, 
// opcode: ori ; op1:x10; dest:x11; op1val:536870912;  immval:3
TEST_IMM_OP( ori, x11, x10, 0x20000003, 536870912, 3, x1, 48, x3)

inst_37:
// rs1_val == 1073741824, imm_val == -129
// opcode: ori ; op1:x10; dest:x11; op1val:1073741824;  immval:-129
TEST_IMM_OP( ori, x11, x10, 0xffffff7f, 1073741824, -129, x1, 52, x3)

inst_38:
// rs1_val == -2, imm_val == 1365
// opcode: ori ; op1:x10; dest:x11; op1val:-2;  immval:1365
TEST_IMM_OP( ori, x11, x10, 0xffffffff, -2, 1365, x1, 56, x3)

inst_39:
// rs1_val == -3, 
// opcode: ori ; op1:x10; dest:x11; op1val:-3;  immval:-33
TEST_IMM_OP( ori, x11, x10, 0xffffffff, -3, -33, x1, 60, x3)

inst_40:
// rs1_val == -5, 
// opcode: ori ; op1:x10; dest:x11; op1val:-5;  immval:3
TEST_IMM_OP( ori, x11, x10, 0xfffffffb, -5, 3, x1, 64, x3)

inst_41:
// rs1_val == -9, 
// opcode: ori ; op1:x10; dest:x11; op1val:-9;  immval:-1025
TEST_IMM_OP( ori, x11, x10, 0xffffffff, -9, -1025, x1, 68, x3)

inst_42:
// rs1_val == -33, 
// opcode: ori ; op1:x10; dest:x11; op1val:-33;  immval:-513
TEST_IMM_OP( ori, x11, x10, 0xffffffff, -33, -513, x1, 72, x3)

inst_43:
// rs1_val == -65, 
// opcode: ori ; op1:x10; dest:x11; op1val:-65;  immval:0
TEST_IMM_OP( ori, x11, x10, 0xffffffbf, -65, 0, x1, 76, x3)

inst_44:
// rs1_val == -129, 
// opcode: ori ; op1:x10; dest:x11; op1val:-129;  immval:-8
TEST_IMM_OP( ori, x11, x10, 0xffffffff, -129, -8, x1, 80, x3)

inst_45:
// rs1_val == -257, 
// opcode: ori ; op1:x10; dest:x11; op1val:-257;  immval:4
TEST_IMM_OP( ori, x11, x10, 0xfffffeff, -257, 4, x1, 84, x3)

inst_46:
// rs1_val == -513, 
// opcode: ori ; op1:x10; dest:x11; op1val:-513;  immval:-1024
TEST_IMM_OP( ori, x11, x10, 0xfffffdff, -513, -1024, x1, 88, x3)

inst_47:
// rs1_val == -1025, 
// opcode: ori ; op1:x10; dest:x11; op1val:-1025;  immval:-129
TEST_IMM_OP( ori, x11, x10, 0xffffffff, -1025, -129, x1, 92, x3)

inst_48:
// rs1_val == -524289, imm_val == 64
// opcode: ori ; op1:x10; dest:x11; op1val:-524289;  immval:64
TEST_IMM_OP( ori, x11, x10, 0xfff7ffff, -524289, 64, x1, 96, x3)

inst_49:
// rs1_val == -1048577, imm_val == 32
// opcode: ori ; op1:x10; dest:x11; op1val:-1048577;  immval:32
TEST_IMM_OP( ori, x11, x10, 0xffefffff, -1048577, 32, x1, 100, x3)

inst_50:
// rs1_val == -2097153, 
// opcode: ori ; op1:x10; dest:x11; op1val:-2097153;  immval:512
TEST_IMM_OP( ori, x11, x10, 0xffdfffff, -2097153, 512, x1, 104, x3)

inst_51:
// rs1_val == -4194305, 
// opcode: ori ; op1:x10; dest:x11; op1val:-4194305;  immval:7
TEST_IMM_OP( ori, x11, x10, 0xffbfffff, -4194305, 7, x1, 108, x3)

inst_52:
// rs1_val == -8388609, 
// opcode: ori ; op1:x10; dest:x11; op1val:-8388609;  immval:1
TEST_IMM_OP( ori, x11, x10, 0xff7fffff, -8388609, 1, x1, 112, x3)

inst_53:
// rs1_val == -16777217, 
// opcode: ori ; op1:x10; dest:x11; op1val:-16777217;  immval:64
TEST_IMM_OP( ori, x11, x10, 0xfeffffff, -16777217, 64, x1, 116, x3)

inst_54:
// rs1_val == -33554433, 
// opcode: ori ; op1:x10; dest:x11; op1val:-33554433;  immval:-1024
TEST_IMM_OP( ori, x11, x10, 0xffffffff, -33554433, -1024, x1, 120, x3)

inst_55:
// rs1_val == -67108865, 
// opcode: ori ; op1:x10; dest:x11; op1val:-67108865;  immval:1
TEST_IMM_OP( ori, x11, x10, 0xfbffffff, -67108865, 1, x1, 124, x3)

inst_56:
// rs1_val == -134217729, 
// opcode: ori ; op1:x10; dest:x11; op1val:-134217729;  immval:8
TEST_IMM_OP( ori, x11, x10, 0xf7ffffff, -134217729, 8, x1, 128, x3)

inst_57:
// rs1_val == -268435457, imm_val == 16
// opcode: ori ; op1:x10; dest:x11; op1val:-268435457;  immval:16
TEST_IMM_OP( ori, x11, x10, 0xefffffff, -268435457, 16, x1, 132, x3)

inst_58:
// rs1_val == -536870913, 
// opcode: ori ; op1:x10; dest:x11; op1val:-536870913;  immval:-1025
TEST_IMM_OP( ori, x11, x10, 0xffffffff, -536870913, -1025, x1, 136, x3)

inst_59:
// rs1_val == -1073741825, 
// opcode: ori ; op1:x10; dest:x11; op1val:-1073741825;  immval:1023
TEST_IMM_OP( ori, x11, x10, 0xbfffffff, -1073741825, 1023, x1, 140, x3)

inst_60:
// rs1_val == 1431655765, 
// opcode: ori ; op1:x10; dest:x11; op1val:1431655765;  immval:16
TEST_IMM_OP( ori, x11, x10, 0x55555555, 1431655765, 16, x1, 144, x3)

inst_61:
// imm_val == -65, 
// opcode: ori ; op1:x10; dest:x11; op1val:-4194305;  immval:-65
TEST_IMM_OP( ori, x11, x10, 0xffffffff, -4194305, -65, x1, 148, x3)

inst_62:
// imm_val == -2, 
// opcode: ori ; op1:x10; dest:x11; op1val:-33;  immval:-2
TEST_IMM_OP( ori, x11, x10, 0xffffffff, -33, -2, x1, 152, x3)

inst_63:
// rs1_val == -8193, 
// opcode: ori ; op1:x10; dest:x11; op1val:-8193;  immval:2
TEST_IMM_OP( ori, x11, x10, 0xffffdfff, -8193, 2, x1, 156, x3)

inst_64:
// imm_val == -3, 
// opcode: ori ; op1:x10; dest:x11; op1val:1073741824;  immval:-3
TEST_IMM_OP( ori, x11, x10, 0xfffffffd, 1073741824, -3, x1, 160, x3)

inst_65:
// rs1_val == -1431655766, 
// opcode: ori ; op1:x10; dest:x11; op1val:-1431655766;  immval:1
TEST_IMM_OP( ori, x11, x10, 0xaaaaaaab, -1431655766, 1, x1, 164, x3)

inst_66:
// imm_val == -9, 
// opcode: ori ; op1:x10; dest:x11; op1val:-257;  immval:-9
TEST_IMM_OP( ori, x11, x10, 0xffffffff, -257, -9, x1, 168, x3)

inst_67:
// imm_val == 256, 
// opcode: ori ; op1:x10; dest:x11; op1val:262144;  immval:256
TEST_IMM_OP( ori, x11, x10, 0x40100, 262144, 256, x1, 172, x3)

inst_68:
// imm_val == 1024, 
// opcode: ori ; op1:x10; dest:x11; op1val:32768;  immval:1024
TEST_IMM_OP( ori, x11, x10, 0x8400, 32768, 1024, x1, 176, x3)

inst_69:
// rs1_val == -2049, 
// opcode: ori ; op1:x10; dest:x11; op1val:-2049;  immval:-10
TEST_IMM_OP( ori, x11, x10, 0xffffffff, -2049, -10, x1, 180, x3)

inst_70:
// rs1_val == -4097, 
// opcode: ori ; op1:x10; dest:x11; op1val:-4097;  immval:-6
TEST_IMM_OP( ori, x11, x10, 0xffffffff, -4097, -6, x1, 184, x3)

inst_71:
// rs1_val == -16385, 
// opcode: ori ; op1:x10; dest:x11; op1val:-16385;  immval:-17
TEST_IMM_OP( ori, x11, x10, 0xffffffff, -16385, -17, x1, 188, x3)

inst_72:
// rs1_val == -32769, 
// opcode: ori ; op1:x10; dest:x11; op1val:-32769;  immval:-257
TEST_IMM_OP( ori, x11, x10, 0xffffffff, -32769, -257, x1, 192, x3)

inst_73:
// rs1_val == -65537, 
// opcode: ori ; op1:x10; dest:x11; op1val:-65537;  immval:-10
TEST_IMM_OP( ori, x11, x10, 0xffffffff, -65537, -10, x1, 196, x3)

inst_74:
// rs1_val == -131073, 
// opcode: ori ; op1:x10; dest:x11; op1val:-131073;  immval:-2048
TEST_IMM_OP( ori, x11, x10, 0xffffffff, -131073, -2048, x1, 200, x3)

inst_75:
// rs1_val == -262145, 
// opcode: ori ; op1:x10; dest:x11; op1val:-262145;  immval:-10
TEST_IMM_OP( ori, x11, x10, 0xffffffff, -262145, -10, x1, 204, x3)

inst_76:
// rs1_val == 4, 
// opcode: ori ; op1:x10; dest:x11; op1val:4;  immval:0
TEST_IMM_OP( ori, x11, x10, 0x4, 4, 0, x1, 208, x3)

inst_77:
// rs1_val == 256, imm_val == 128
// opcode: ori ; op1:x10; dest:x11; op1val:256;  immval:128
TEST_IMM_OP( ori, x11, x10, 0x180, 256, 128, x1, 212, x3)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x18_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x18_1:
    .fill 24*(XLEN/32),4,0xdeadbeef


signature_x1_0:
    .fill 54*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
