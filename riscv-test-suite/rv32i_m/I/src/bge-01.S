 
// -----------
// This file was generated by riscv_ctg (https://gitlab.com/incoresemi/riscv-compliance/riscv_ctg)
// version   : 0.1.0
// timestamp : Fri Nov  6 10:29:11 2020 GMT
// usage     : riscv_ctg \
//                  -- cgf /scratch/git-repo/incoresemi/riscv-compliance/riscv_ctg/sample_cgfs/rv32i.cgf \
//                  -- xlen 32 \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the bge instruction of the RISC-V I extension for the bge covergroup.
// 
#include "compliance_model.h"
#include "compliance_test.h"
RVTEST_ISA("RV32I")

RVMODEL_BOOT
RVTEST_CODE_BEGIN
RVMODEL_TARGET_INIT

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*);def TEST_CASE_1=True;",bge)

RVTEST_SIGBASE( x5,signature_x5_1)

inst_0:
// rs1 == rs2, rs1==x23, rs2==x23, rs1_val > 0 and rs2_val > 0 and imm_val & 0x03 == 0, rs1_val < rs2_val and imm_val > 0 and imm_val & 0x03 == 0, rs2_val == 536870912, rs1_val == 32
// opcode: bge, op1:x23; op2:x23; op1val:32; op2val:536870912; immval:8; align:0
TEST_BRANCH_OP(bge, x3, x23, x23, 32, 536870912, 8, 3f, x5, 0,0)

inst_1:
// rs1 != rs2, rs1==x6, rs2==x17, rs1_val > 0 and rs2_val < 0 and imm_val & 0x03 == 0, rs1_val == 1073741824, rs2_val == -16385, rs1_val > rs2_val and imm_val > 0 and imm_val & 0x03 == 0
// opcode: bge, op1:x6; op2:x17; op1val:1073741824; op2val:-16385; immval:4; align:0
TEST_BRANCH_OP(bge, x3, x6, x17, 1073741824, -16385, 4, 3f, x5, 4,0)

inst_2:
// rs1==x7, rs2==x13, rs1_val < 0 and rs2_val < 0 and imm_val & 0x03 == 0, rs2_val == -67108865, rs1_val == -17
// opcode: bge, op1:x7; op2:x13; op1val:-17; op2val:-67108865; immval:64; align:0
TEST_BRANCH_OP(bge, x3, x7, x13, -17, -67108865, 64, 3f, x5, 8,0)

inst_3:
// rs1==x18, rs2==x8, rs1_val < 0 and rs2_val > 0 and imm_val & 0x03 == 0, rs2_val == 67108864, rs1_val == -2097153
// opcode: bge, op1:x18; op2:x8; op1val:-2097153; op2val:67108864; immval:128; align:0
TEST_BRANCH_OP(bge, x3, x18, x8, -2097153, 67108864, 128, 3f, x5, 12,0)

inst_4:
// rs1==x31, rs2==x11, rs1_val == rs2_val and imm_val > 0 and imm_val & 0x03 == 0, rs1_val == -9, rs2_val == -9
// opcode: bge, op1:x31; op2:x11; op1val:-9; op2val:-9; immval:128; align:0
TEST_BRANCH_OP(bge, x3, x31, x11, -9, -9, 128, 3f, x5, 16,0)

inst_5:
// rs1==x11, rs2==x18, rs1_val == rs2_val and imm_val < 0 and imm_val & 0x03 == 0, rs2_val == 16, rs1_val == 16
// opcode: bge, op1:x11; op2:x18; op1val:16; op2val:16; immval:0; align:0
TEST_BRANCH_OP(bge, x3, x11, x18, 16, 16, 0, 1b, x5, 20,0)

inst_6:
// rs1==x15, rs2==x9, rs1_val > rs2_val and imm_val < 0 and imm_val & 0x03 == 0, rs2_val == -134217729
// opcode: bge, op1:x15; op2:x9; op1val:-8; op2val:-134217729; immval:1024; align:0
TEST_BRANCH_OP(bge, x3, x15, x9, -8, -134217729, 1024, 1b, x5, 24,0)

inst_7:
// rs1==x2, rs2==x19, rs1_val < rs2_val and imm_val < 0 and imm_val & 0x03 == 0, rs1_val == -16385, rs2_val == 16777216
// opcode: bge, op1:x2; op2:x19; op1val:-16385; op2val:16777216; immval:8; align:0
TEST_BRANCH_OP(bge, x3, x2, x19, -16385, 16777216, 8, 1b, x5, 28,0)

inst_8:
// rs1==x28, rs2==x15, rs1_val == 1, rs2_val == -129
// opcode: bge, op1:x28; op2:x15; op1val:1; op2val:-129; immval:1366; align:0
TEST_BRANCH_OP(bge, x3, x28, x15, 1, -129, 1366, 1b, x5, 32,0)

inst_9:
// rs1==x26, rs2==x7, rs1_val == 2, rs2_val == -2049
// opcode: bge, op1:x26; op2:x7; op1val:2; op2val:-2049; immval:4; align:0
TEST_BRANCH_OP(bge, x3, x26, x7, 2, -2049, 4, 1b, x5, 36,0)

inst_10:
// rs1==x25, rs2==x16, rs1_val == 4, rs2_val == -536870913
// opcode: bge, op1:x25; op2:x16; op1val:4; op2val:-536870913; immval:128; align:0
TEST_BRANCH_OP(bge, x3, x25, x16, 4, -536870913, 128, 3f, x5, 40,0)

inst_11:
// rs1==x24, rs2==x22, rs1_val == 8, 
// opcode: bge, op1:x24; op2:x22; op1val:8; op2val:536870912; immval:10; align:0
TEST_BRANCH_OP(bge, x3, x24, x22, 8, 536870912, 10, 1b, x5, 44,0)

inst_12:
// rs1==x8, rs2==x6, rs1_val == 64, rs2_val == 2097152
// opcode: bge, op1:x8; op2:x6; op1val:64; op2val:2097152; immval:1024; align:0
TEST_BRANCH_OP(bge, x3, x8, x6, 64, 2097152, 1024, 1b, x5, 48,0)

inst_13:
// rs1==x29, rs2==x2, rs1_val == 128, rs2_val == -33554433
// opcode: bge, op1:x29; op2:x2; op1val:128; op2val:-33554433; immval:0; align:0
TEST_BRANCH_OP(bge, x3, x29, x2, 128, -33554433, 0, 1b, x5, 52,0)

inst_14:
// rs1==x22, rs2==x20, rs1_val == 256, rs2_val == -131073
// opcode: bge, op1:x22; op2:x20; op1val:256; op2val:-131073; immval:256; align:0
TEST_BRANCH_OP(bge, x3, x22, x20, 256, -131073, 256, 3f, x5, 56,0)

inst_15:
// rs1==x13, rs2==x4, rs1_val == 512, rs2_val == 268435456
// opcode: bge, op1:x13; op2:x4; op1val:512; op2val:268435456; immval:8; align:0
TEST_BRANCH_OP(bge, x3, x13, x4, 512, 268435456, 8, 1b, x5, 60,0)

inst_16:
// rs1==x21, rs2==x29, rs1_val == 1024, 
// opcode: bge, op1:x21; op2:x29; op1val:1024; op2val:0; immval:2; align:0
TEST_BRANCH_OP(bge, x3, x21, x29, 1024, 0, 2, 3f, x5, 64,0)

inst_17:
// rs1==x10, rs2==x12, rs1_val == 2048, 
// opcode: bge, op1:x10; op2:x12; op1val:2048; op2val:6; immval:8; align:0
TEST_BRANCH_OP(bge, x3, x10, x12, 2048, 6, 8, 3f, x5, 68,0)

inst_18:
// rs1==x20, rs2==x25, rs1_val == 4096, rs2_val == 256
// opcode: bge, op1:x20; op2:x25; op1val:4096; op2val:256; immval:8; align:0
TEST_BRANCH_OP(bge, x3, x20, x25, 4096, 256, 8, 1b, x5, 72,0)

inst_19:
// rs1==x14, rs2==x1, rs1_val == 8192, 
// opcode: bge, op1:x14; op2:x1; op1val:8192; op2val:-4; immval:256; align:0
TEST_BRANCH_OP(bge, x3, x14, x1, 8192, -4, 256, 3f, x5, 76,0)

inst_20:
// rs1==x3, rs2==x31, rs1_val == 16384, rs2_val == 2147483647
// opcode: bge, op1:x3; op2:x31; op1val:16384; op2val:2147483647; immval:6; align:0
TEST_BRANCH_OP(bge, x6, x3, x31, 16384, 2147483647, 6, 1b, x5, 80,0)
RVTEST_SIGBASE( x2,signature_x2_0)

inst_21:
// rs1==x19, rs2==x0, rs1_val == 32768, rs2_val == -4097
// opcode: bge, op1:x19; op2:x0; op1val:32768; op2val:-4097; immval:8; align:0
TEST_BRANCH_OP(bge, x6, x19, x0, 32768, -4097, 8, 1b, x2, 0,0)

inst_22:
// rs1==x9, rs2==x27, rs1_val == 65536, rs2_val == -32769
// opcode: bge, op1:x9; op2:x27; op1val:65536; op2val:-32769; immval:6; align:0
TEST_BRANCH_OP(bge, x6, x9, x27, 65536, -32769, 6, 3f, x2, 4,0)

inst_23:
// rs1==x17, rs2==x26, rs1_val == 131072, rs2_val == 1048576
// opcode: bge, op1:x17; op2:x26; op1val:131072; op2val:1048576; immval:8; align:0
TEST_BRANCH_OP(bge, x6, x17, x26, 131072, 1048576, 8, 1b, x2, 8,0)

inst_24:
// rs1==x1, rs2==x28, rs1_val == 262144, rs2_val == -1431655766
// opcode: bge, op1:x1; op2:x28; op1val:262144; op2val:-1431655766; immval:2; align:0
TEST_BRANCH_OP(bge, x6, x1, x28, 262144, -1431655766, 2, 3f, x2, 12,0)

inst_25:
// rs1==x27, rs2==x5, rs1_val == 524288, rs2_val == -1073741825
// opcode: bge, op1:x27; op2:x5; op1val:524288; op2val:-1073741825; immval:8; align:0
TEST_BRANCH_OP(bge, x6, x27, x5, 524288, -1073741825, 8, 3f, x2, 16,0)

inst_26:
// rs1==x4, rs2==x14, rs1_val == 1048576, rs2_val == 8192
// opcode: bge, op1:x4; op2:x14; op1val:1048576; op2val:8192; immval:4; align:0
TEST_BRANCH_OP(bge, x6, x4, x14, 1048576, 8192, 4, 3f, x2, 20,0)

inst_27:
// rs1==x5, rs2==x10, rs1_val == 2097152, rs2_val == 524288
// opcode: bge, op1:x5; op2:x10; op1val:2097152; op2val:524288; immval:4; align:0
TEST_BRANCH_OP(bge, x6, x5, x10, 2097152, 524288, 4, 1b, x2, 24,0)

inst_28:
// rs1==x12, rs2==x3, rs1_val == 4194304, rs2_val == 64
// opcode: bge, op1:x12; op2:x3; op1val:4194304; op2val:64; immval:1024; align:0
TEST_BRANCH_OP(bge, x6, x12, x3, 4194304, 64, 1024, 3f, x2, 28,0)

inst_29:
// rs1==x30, rs2==x21, rs1_val == 8388608, 
// opcode: bge, op1:x30; op2:x21; op1val:8388608; op2val:-2049; immval:0; align:0
TEST_BRANCH_OP(bge, x6, x30, x21, 8388608, -2049, 0, 1b, x2, 32,0)

inst_30:
// rs1==x16, rs2==x24, rs1_val == 16777216, 
// opcode: bge, op1:x16; op2:x24; op1val:16777216; op2val:2097152; immval:16; align:0
TEST_BRANCH_OP(bge, x6, x16, x24, 16777216, 2097152, 16, 3f, x2, 36,0)

inst_31:
// rs1==x0, rs2==x30, rs1_val == 33554432, 
// opcode: bge, op1:x0; op2:x30; op1val:33554432; op2val:1073741823; immval:6; align:0
TEST_BRANCH_OP(bge, x6, x0, x30, 33554432, 1073741823, 6, 3f, x2, 40,0)

inst_32:
// rs1_val == 67108864, rs2_val == 2
// opcode: bge, op1:x10; op2:x11; op1val:67108864; op2val:2; immval:0; align:0
TEST_BRANCH_OP(bge, x6, x10, x11, 67108864, 2, 0, 1b, x2, 44,0)

inst_33:
// rs1_val == 134217728, 
// opcode: bge, op1:x10; op2:x11; op1val:134217728; op2val:6; immval:1366; align:0
TEST_BRANCH_OP(bge, x6, x10, x11, 134217728, 6, 1366, 1b, x2, 48,0)

inst_34:
// rs1_val == 268435456, rs2_val == -16777217
// opcode: bge, op1:x10; op2:x11; op1val:268435456; op2val:-16777217; immval:256; align:0
TEST_BRANCH_OP(bge, x6, x10, x11, 268435456, -16777217, 256, 3f, x2, 52,0)

inst_35:
// rs1_val == 536870912, rs2_val == 1073741824
// opcode: bge, op1:x10; op2:x11; op1val:536870912; op2val:1073741824; immval:6; align:0
TEST_BRANCH_OP(bge, x6, x10, x11, 536870912, 1073741824, 6, 3f, x2, 56,0)

inst_36:
// rs1_val == -2147483648, rs2_val == -513
// opcode: bge, op1:x10; op2:x11; op1val:-2147483648; op2val:-513; immval:4; align:0
TEST_BRANCH_OP(bge, x6, x10, x11, -2147483648, -513, 4, 1b, x2, 60,0)

inst_37:
// rs1_val == -2, rs2_val == 8388608
// opcode: bge, op1:x10; op2:x11; op1val:-2; op2val:8388608; immval:64; align:0
TEST_BRANCH_OP(bge, x6, x10, x11, -2, 8388608, 64, 3f, x2, 64,0)

inst_38:
// rs1_val == -3, rs2_val == -65537
// opcode: bge, op1:x10; op2:x11; op1val:-3; op2val:-65537; immval:10; align:0
TEST_BRANCH_OP(bge, x6, x10, x11, -3, -65537, 10, 1b, x2, 68,0)

inst_39:
// rs1_val == -5, 
// opcode: bge, op1:x10; op2:x11; op1val:-5; op2val:0; immval:128; align:0
TEST_BRANCH_OP(bge, x6, x10, x11, -5, 0, 128, 3f, x2, 72,0)

inst_40:
// rs2_val == -1048577, 
// opcode: bge, op1:x10; op2:x11; op1val:-16385; op2val:-1048577; immval:10; align:0
TEST_BRANCH_OP(bge, x6, x10, x11, -16385, -1048577, 10, 1b, x2, 76,0)

inst_41:
// rs2_val == -2097153, rs1_val == -8388609
// opcode: bge, op1:x10; op2:x11; op1val:-8388609; op2val:-2097153; immval:2; align:0
TEST_BRANCH_OP(bge, x6, x10, x11, -8388609, -2097153, 2, 1b, x2, 80,0)

inst_42:
// rs2_val == -4194305, 
// opcode: bge, op1:x10; op2:x11; op1val:64; op2val:-4194305; immval:6; align:0
TEST_BRANCH_OP(bge, x6, x10, x11, 64, -4194305, 6, 1b, x2, 84,0)

inst_43:
// rs2_val == -8388609, 
// opcode: bge, op1:x10; op2:x11; op1val:4; op2val:-8388609; immval:1024; align:0
TEST_BRANCH_OP(bge, x6, x10, x11, 4, -8388609, 1024, 1b, x2, 88,0)

inst_44:
// rs2_val == -268435457, 
// opcode: bge, op1:x10; op2:x11; op1val:1024; op2val:-268435457; immval:16; align:0
TEST_BRANCH_OP(bge, x6, x10, x11, 1024, -268435457, 16, 3f, x2, 92,0)

inst_45:
// rs2_val == 1431655765, 
// opcode: bge, op1:x10; op2:x11; op1val:262144; op2val:1431655765; immval:4; align:0
TEST_BRANCH_OP(bge, x6, x10, x11, 262144, 1431655765, 4, 1b, x2, 96,0)

inst_46:
// rs1_val == -33, 
// opcode: bge, op1:x10; op2:x11; op1val:-33; op2val:-8; immval:0; align:0
TEST_BRANCH_OP(bge, x6, x10, x11, -33, -8, 0, 3f, x2, 100,0)

inst_47:
// rs1_val == -65, rs2_val == 4
// opcode: bge, op1:x10; op2:x11; op1val:-65; op2val:4; immval:1024; align:0
TEST_BRANCH_OP(bge, x6, x10, x11, -65, 4, 1024, 1b, x2, 104,0)

inst_48:
// rs1_val == -129, rs2_val == 1024
// opcode: bge, op1:x10; op2:x11; op1val:-129; op2val:1024; immval:2; align:0
TEST_BRANCH_OP(bge, x6, x10, x11, -129, 1024, 2, 3f, x2, 108,0)

inst_49:
// rs1_val == -257, rs2_val == 33554432
// opcode: bge, op1:x10; op2:x11; op1val:-257; op2val:33554432; immval:0; align:0
TEST_BRANCH_OP(bge, x6, x10, x11, -257, 33554432, 0, 3f, x2, 112,0)

inst_50:
// rs1_val == -513, 
// opcode: bge, op1:x10; op2:x11; op1val:-513; op2val:2147483647; immval:2; align:0
TEST_BRANCH_OP(bge, x6, x10, x11, -513, 2147483647, 2, 3f, x2, 116,0)

inst_51:
// rs1_val == -1025, 
// opcode: bge, op1:x10; op2:x11; op1val:-1025; op2val:-16777217; immval:128; align:0
TEST_BRANCH_OP(bge, x6, x10, x11, -1025, -16777217, 128, 3f, x2, 120,0)

inst_52:
// rs1_val == -2049, 
// opcode: bge, op1:x10; op2:x11; op1val:-2049; op2val:256; immval:10; align:0
TEST_BRANCH_OP(bge, x6, x10, x11, -2049, 256, 10, 1b, x2, 124,0)

inst_53:
// rs1_val == -4097, 
// opcode: bge, op1:x10; op2:x11; op1val:-4097; op2val:-1073741824; immval:8; align:0
TEST_BRANCH_OP(bge, x6, x10, x11, -4097, -1073741824, 8, 3f, x2, 128,0)

inst_54:
// rs1_val == -8193, 
// opcode: bge, op1:x10; op2:x11; op1val:-8193; op2val:-536870913; immval:1366; align:0
TEST_BRANCH_OP(bge, x6, x10, x11, -8193, -536870913, 1366, 1b, x2, 132,0)

inst_55:
// rs1_val == -32769, 
// opcode: bge, op1:x10; op2:x11; op1val:-32769; op2val:1048576; immval:16; align:0
TEST_BRANCH_OP(bge, x6, x10, x11, -32769, 1048576, 16, 3f, x2, 136,0)

inst_56:
// rs1_val == -65537, rs2_val == 65536
// opcode: bge, op1:x10; op2:x11; op1val:-65537; op2val:65536; immval:64; align:0
TEST_BRANCH_OP(bge, x6, x10, x11, -65537, 65536, 64, 3f, x2, 140,0)

inst_57:
// rs1_val == -131073, 
// opcode: bge, op1:x10; op2:x11; op1val:-131073; op2val:4; immval:4; align:0
TEST_BRANCH_OP(bge, x6, x10, x11, -131073, 4, 4, 1b, x2, 144,0)

inst_58:
// rs1_val == -262145, rs2_val == -33
// opcode: bge, op1:x10; op2:x11; op1val:-262145; op2val:-33; immval:1366; align:0
TEST_BRANCH_OP(bge, x6, x10, x11, -262145, -33, 1366, 1b, x2, 148,0)

inst_59:
// rs1_val == -524289, 
// opcode: bge, op1:x10; op2:x11; op1val:-524289; op2val:-7; immval:8; align:0
TEST_BRANCH_OP(bge, x6, x10, x11, -524289, -7, 8, 3f, x2, 152,0)

inst_60:
// rs1_val == -1048577, 
// opcode: bge, op1:x10; op2:x11; op1val:-1048577; op2val:-536870913; immval:64; align:0
TEST_BRANCH_OP(bge, x6, x10, x11, -1048577, -536870913, 64, 3f, x2, 156,0)

inst_61:
// rs1_val == -4194305, 
// opcode: bge, op1:x10; op2:x11; op1val:-4194305; op2val:2097152; immval:10; align:0
TEST_BRANCH_OP(bge, x6, x10, x11, -4194305, 2097152, 10, 1b, x2, 160,0)

inst_62:
// rs1_val == -16777217, 
// opcode: bge, op1:x10; op2:x11; op1val:-16777217; op2val:67108864; immval:0; align:0
TEST_BRANCH_OP(bge, x6, x10, x11, -16777217, 67108864, 0, 3f, x2, 164,0)

inst_63:
// rs1_val == -33554433, rs2_val == 131072
// opcode: bge, op1:x10; op2:x11; op1val:-33554433; op2val:131072; immval:2; align:0
TEST_BRANCH_OP(bge, x6, x10, x11, -33554433, 131072, 2, 1b, x2, 168,0)

inst_64:
// rs1_val == -67108865, 
// opcode: bge, op1:x10; op2:x11; op1val:-67108865; op2val:1073741823; immval:10; align:0
TEST_BRANCH_OP(bge, x6, x10, x11, -67108865, 1073741823, 10, 1b, x2, 172,0)

inst_65:
// rs1_val == -134217729, 
// opcode: bge, op1:x10; op2:x11; op1val:-134217729; op2val:-7; immval:1366; align:0
TEST_BRANCH_OP(bge, x6, x10, x11, -134217729, -7, 1366, 1b, x2, 176,0)

inst_66:
// rs1_val == -268435457, rs2_val == -8193
// opcode: bge, op1:x10; op2:x11; op1val:-268435457; op2val:-8193; immval:6; align:0
TEST_BRANCH_OP(bge, x6, x10, x11, -268435457, -8193, 6, 3f, x2, 180,0)

inst_67:
// rs1_val == -536870913, 
// opcode: bge, op1:x10; op2:x11; op1val:-536870913; op2val:64; immval:0; align:0
TEST_BRANCH_OP(bge, x6, x10, x11, -536870913, 64, 0, 1b, x2, 184,0)

inst_68:
// rs1_val == -1073741825, 
// opcode: bge, op1:x10; op2:x11; op1val:-1073741825; op2val:4; immval:2; align:0
TEST_BRANCH_OP(bge, x6, x10, x11, -1073741825, 4, 2, 1b, x2, 188,0)

inst_69:
// rs1_val == 2147483647, 
// opcode: bge, op1:x10; op2:x11; op1val:2147483647; op2val:-4097; immval:10; align:0
TEST_BRANCH_OP(bge, x6, x10, x11, 2147483647, -4097, 10, 1b, x2, 192,0)

inst_70:
// rs1_val == 1431655765, 
// opcode: bge, op1:x10; op2:x11; op1val:1431655765; op2val:-2097153; immval:4; align:0
TEST_BRANCH_OP(bge, x6, x10, x11, 1431655765, -2097153, 4, 1b, x2, 196,0)

inst_71:
// rs1_val == -1431655766, 
// opcode: bge, op1:x10; op2:x11; op1val:-1431655766; op2val:5; immval:0; align:0
TEST_BRANCH_OP(bge, x6, x10, x11, -1431655766, 5, 0, 3f, x2, 200,0)

inst_72:
// rs2_val == 1, 
// opcode: bge, op1:x10; op2:x11; op1val:16384; op2val:1; immval:6; align:0
TEST_BRANCH_OP(bge, x6, x10, x11, 16384, 1, 6, 3f, x2, 204,0)

inst_73:
// rs2_val == 8, 
// opcode: bge, op1:x10; op2:x11; op1val:4096; op2val:8; immval:6; align:0
TEST_BRANCH_OP(bge, x6, x10, x11, 4096, 8, 6, 1b, x2, 208,0)

inst_74:
// rs2_val == 32, 
// opcode: bge, op1:x10; op2:x11; op1val:33554432; op2val:32; immval:2; align:0
TEST_BRANCH_OP(bge, x6, x10, x11, 33554432, 32, 2, 3f, x2, 212,0)

inst_75:
// rs2_val == 128, 
// opcode: bge, op1:x10; op2:x11; op1val:-2049; op2val:128; immval:4; align:0
TEST_BRANCH_OP(bge, x6, x10, x11, -2049, 128, 4, 3f, x2, 216,0)

inst_76:
// rs2_val == 512, 
// opcode: bge, op1:x10; op2:x11; op1val:67108864; op2val:512; immval:32; align:0
TEST_BRANCH_OP(bge, x6, x10, x11, 67108864, 512, 32, 3f, x2, 220,0)

inst_77:
// rs2_val == 2048, 
// opcode: bge, op1:x10; op2:x11; op1val:512; op2val:2048; immval:1366; align:0
TEST_BRANCH_OP(bge, x6, x10, x11, 512, 2048, 1366, 1b, x2, 224,0)

inst_78:
// rs2_val == 4096, 
// opcode: bge, op1:x10; op2:x11; op1val:-65537; op2val:4096; immval:512; align:0
TEST_BRANCH_OP(bge, x6, x10, x11, -65537, 4096, 512, 3f, x2, 228,0)

inst_79:
// rs2_val == 4194304, 
// opcode: bge, op1:x10; op2:x11; op1val:-513; op2val:4194304; immval:1024; align:0
TEST_BRANCH_OP(bge, x6, x10, x11, -513, 4194304, 1024, 1b, x2, 232,0)

inst_80:
// rs2_val == 134217728, 
// opcode: bge, op1:x10; op2:x11; op1val:65536; op2val:134217728; immval:1024; align:0
TEST_BRANCH_OP(bge, x6, x10, x11, 65536, 134217728, 1024, 3f, x2, 236,0)

inst_81:
// rs2_val == -262145, 
// opcode: bge, op1:x10; op2:x11; op1val:-4097; op2val:-262145; immval:6; align:0
TEST_BRANCH_OP(bge, x6, x10, x11, -4097, -262145, 6, 3f, x2, 240,0)

inst_82:
// rs2_val == -2147483648, 
// opcode: bge, op1:x10; op2:x11; op1val:536870912; op2val:-2147483648; immval:6; align:0
TEST_BRANCH_OP(bge, x6, x10, x11, 536870912, -2147483648, 6, 1b, x2, 244,0)

inst_83:
// rs2_val == -2, 
// opcode: bge, op1:x10; op2:x11; op1val:134217728; op2val:-2; immval:2; align:0
TEST_BRANCH_OP(bge, x6, x10, x11, 134217728, -2, 2, 1b, x2, 248,0)

inst_84:
// rs2_val == -3, 
// opcode: bge, op1:x10; op2:x11; op1val:32; op2val:-3; immval:6; align:0
TEST_BRANCH_OP(bge, x6, x10, x11, 32, -3, 6, 1b, x2, 252,0)

inst_85:
// rs2_val == -5, 
// opcode: bge, op1:x10; op2:x11; op1val:-33554433; op2val:-5; immval:64; align:0
TEST_BRANCH_OP(bge, x6, x10, x11, -33554433, -5, 64, 3f, x2, 256,0)

inst_86:
// rs2_val == -17, 
// opcode: bge, op1:x10; op2:x11; op1val:16777216; op2val:-17; immval:6; align:0
TEST_BRANCH_OP(bge, x6, x10, x11, 16777216, -17, 6, 3f, x2, 260,0)

inst_87:
// rs2_val == -65, 
// opcode: bge, op1:x10; op2:x11; op1val:-5; op2val:-65; immval:1024; align:0
TEST_BRANCH_OP(bge, x6, x10, x11, -5, -65, 1024, 3f, x2, 264,0)

inst_88:
// rs2_val == -257, 
// opcode: bge, op1:x10; op2:x11; op1val:-8388609; op2val:-257; immval:4; align:0
TEST_BRANCH_OP(bge, x6, x10, x11, -8388609, -257, 4, 3f, x2, 268,0)

inst_89:
// rs2_val == -1025, 
// opcode: bge, op1:x10; op2:x11; op1val:-1; op2val:-1025; immval:128; align:0
TEST_BRANCH_OP(bge, x6, x10, x11, -1, -1025, 128, 3f, x2, 272,0)

inst_90:
// rs2_val == 16384, 
// opcode: bge, op1:x10; op2:x11; op1val:16384; op2val:16384; immval:128; align:0
TEST_BRANCH_OP(bge, x6, x10, x11, 16384, 16384, 128, 3f, x2, 276,0)

inst_91:
// rs2_val == 32768, 
// opcode: bge, op1:x10; op2:x11; op1val:-67108865; op2val:32768; immval:64; align:0
TEST_BRANCH_OP(bge, x6, x10, x11, -67108865, 32768, 64, 3f, x2, 280,0)

inst_92:
// rs2_val == 262144, 
// opcode: bge, op1:x10; op2:x11; op1val:262144; op2val:262144; immval:10; align:0
TEST_BRANCH_OP(bge, x6, x10, x11, 262144, 262144, 10, 1b, x2, 284,0)

inst_93:
// rs2_val == -524289, 
// opcode: bge, op1:x10; op2:x11; op1val:-2; op2val:-524289; immval:32; align:0
TEST_BRANCH_OP(bge, x6, x10, x11, -2, -524289, 32, 3f, x2, 288,0)

inst_94:
// rs1_val == 32768, rs2_val == -4097
// opcode: bge, op1:x10; op2:x11; op1val:32768; op2val:-4097; immval:8; align:0
TEST_BRANCH_OP(bge, x6, x10, x11, 32768, -4097, 8, 1b, x2, 292,0)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x5_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x5_1:
    .fill 21*(XLEN/32),4,0xdeadbeef


signature_x2_0:
    .fill 74*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
