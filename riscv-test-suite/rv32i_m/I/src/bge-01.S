
// -----------
// This file was generated by riscv_ctg (https://gitlab.com/incoresemi/riscv-compliance/riscv_ctg)
// version   : 0.4.0
// timestamp : Fri Dec  4 15:11:13 2020 GMT
// usage     : riscv_ctg \
//                  -- cgf ('/scratch/git-repo/incoresemi/riscv-compliance/riscv_ctg/sample_cgfs/dataset.cgf', '/scratch/git-repo/incoresemi/riscv-compliance/riscv_ctg/sample_cgfs/rv32i.cgf') \
//                  -- xlen 32 \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the bge instruction of the RISC-V I extension for the bge covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32I")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*);def TEST_CASE_1=True;",bge)

RVTEST_SIGBASE( x2,signature_x2_1)

inst_0:
// rs1 != rs2, rs1==x14, rs2==x23, rs1_val > 0 and rs2_val > 0 and imm_val & 0x03 == 0, rs2_val == 32768, rs1_val > rs2_val and imm_val > 0 and imm_val & 0x03 == 0, rs1_val == 524288
// opcode: bge, op1:x14; op2:x23; op1val:0x80000; op2val:0x8000; immval:0x20; align:0
TEST_BRANCH_OP(bge, x4, x14, x23, 0x80000, 0x8000, 0x20, 3f, x2, 0,0)

inst_1:
// rs1 == rs2, rs1==x16, rs2==x16, rs1_val > 0 and rs2_val < 0 and imm_val & 0x03 == 0, rs1_val == 1048576
// opcode: bge, op1:x16; op2:x16; op1val:0x100000; op2val:-0xb504; immval:0x8; align:0
TEST_BRANCH_OP(bge, x4, x16, x16, 0x100000, -0xb504, 0x8, 3f, x2, 4,0)

inst_2:
// rs1==x28, rs2==x15, rs1_val < 0 and rs2_val < 0 and imm_val & 0x03 == 0, rs1_val == -3
// opcode: bge, op1:x28; op2:x15; op1val:-0x3; op2val:-0x4; immval:0x200; align:0
TEST_BRANCH_OP(bge, x4, x28, x15, -0x3, -0x4, 0x200, 3f, x2, 8,0)

inst_3:
// rs1==x13, rs2==x21, rs1_val < 0 and rs2_val > 0 and imm_val & 0x03 == 0, rs1_val < rs2_val and imm_val > 0 and imm_val & 0x03 == 0, rs1_val == -1048577, rs2_val == 4096
// opcode: bge, op1:x13; op2:x21; op1val:-0x100001; op2val:0x1000; immval:0x10; align:0
TEST_BRANCH_OP(bge, x4, x13, x21, -0x100001, 0x1000, 0x10, 3f, x2, 12,0)

inst_4:
// rs1==x10, rs2==x18, rs1_val == rs2_val and imm_val > 0 and imm_val & 0x03 == 0, rs2_val == -1073741825, rs1_val == -1073741825
// opcode: bge, op1:x10; op2:x18; op1val:-0x40000001; op2val:-0x40000001; immval:0x200; align:0
TEST_BRANCH_OP(bge, x4, x10, x18, -0x40000001, -0x40000001, 0x200, 3f, x2, 16,0)

inst_5:
// rs1==x30, rs2==x0, rs1_val == rs2_val and imm_val < 0 and imm_val & 0x03 == 0, rs1_val == 2097152, rs2_val == 2097152
// opcode: bge, op1:x30; op2:x0; op1val:0x200000; op2val:0x200000; immval:0x4; align:0
TEST_BRANCH_OP(bge, x4, x30, x0, 0x200000, 0x200000, 0x4, 1b, x2, 20,0)

inst_6:
// rs1==x3, rs2==x24, rs1_val > rs2_val and imm_val < 0 and imm_val & 0x03 == 0, rs1_val == 64
// opcode: bge, op1:x3; op2:x24; op1val:0x40; op2val:0x6; immval:0x4; align:0
TEST_BRANCH_OP(bge, x4, x3, x24, 0x40, 0x6, 0x4, 1b, x2, 24,0)

inst_7:
// rs1==x8, rs2==x19, rs1_val < rs2_val and imm_val < 0 and imm_val & 0x03 == 0, 
// opcode: bge, op1:x8; op2:x19; op1val:-0x3; op2val:0x5; immval:0x400; align:0
TEST_BRANCH_OP(bge, x4, x8, x19, -0x3, 0x5, 0x400, 1b, x2, 28,0)

inst_8:
// rs1==x25, rs2==x7, rs2_val == 1, 
// opcode: bge, op1:x25; op2:x7; op1val:0x0; op2val:0x1; immval:0x100; align:0
TEST_BRANCH_OP(bge, x4, x25, x7, 0x0, 0x1, 0x100, 3f, x2, 32,0)

inst_9:
// rs1==x9, rs2==x22, rs2_val == 2, rs1_val == -536870913
// opcode: bge, op1:x9; op2:x22; op1val:-0x20000001; op2val:0x2; immval:0x556; align:0
TEST_BRANCH_OP(bge, x4, x9, x22, -0x20000001, 0x2, 0x556, 1b, x2, 36,0)

inst_10:
// rs1==x18, rs2==x29, rs2_val == 4, rs1_val==-1431655766 and rs2_val==4, rs1_val == -1431655766
// opcode: bge, op1:x18; op2:x29; op1val:-0x55555556; op2val:0x4; immval:0x8; align:0
TEST_BRANCH_OP(bge, x4, x18, x29, -0x55555556, 0x4, 0x8, 3f, x2, 40,0)

inst_11:
// rs1==x0, rs2==x5, rs2_val == 8, rs1_val == 262144
// opcode: bge, op1:x0; op2:x5; op1val:0x40000; op2val:0x8; immval:0x20; align:0
TEST_BRANCH_OP(bge, x4, x0, x5, 0x40000, 0x8, 0x20, 3f, x2, 44,0)

inst_12:
// rs1==x11, rs2==x13, rs2_val == 16, rs1_val == 131072
// opcode: bge, op1:x11; op2:x13; op1val:0x20000; op2val:0x10; immval:0x400; align:0
TEST_BRANCH_OP(bge, x4, x11, x13, 0x20000, 0x10, 0x400, 1b, x2, 48,0)

inst_13:
// rs1==x29, rs2==x1, rs2_val == 32, rs1_val == -129
// opcode: bge, op1:x29; op2:x1; op1val:-0x81; op2val:0x20; immval:0x4; align:0
TEST_BRANCH_OP(bge, x4, x29, x1, -0x81, 0x20, 0x4, 1b, x2, 52,0)

inst_14:
// rs1==x22, rs2==x6, rs2_val == 64, 
// opcode: bge, op1:x22; op2:x6; op1val:0x3fffffff; op2val:0x40; immval:0x400; align:0
TEST_BRANCH_OP(bge, x4, x22, x6, 0x3fffffff, 0x40, 0x400, 3f, x2, 56,0)

inst_15:
// rs1==x1, rs2==x26, rs2_val == 128, rs1_val == 536870912
// opcode: bge, op1:x1; op2:x26; op1val:0x20000000; op2val:0x80; immval:0x6; align:0
TEST_BRANCH_OP(bge, x4, x1, x26, 0x20000000, 0x80, 0x6, 1b, x2, 60,0)

inst_16:
// rs1==x26, rs2==x9, rs2_val == 256, rs1_val == 32768
// opcode: bge, op1:x26; op2:x9; op1val:0x8000; op2val:0x100; immval:0x4; align:0
TEST_BRANCH_OP(bge, x4, x26, x9, 0x8000, 0x100, 0x4, 3f, x2, 64,0)

inst_17:
// rs1==x5, rs2==x11, rs2_val == 512, 
// opcode: bge, op1:x5; op2:x11; op1val:0x5; op2val:0x200; immval:0x6; align:0
TEST_BRANCH_OP(bge, x4, x5, x11, 0x5, 0x200, 0x6, 1b, x2, 68,0)

inst_18:
// rs1==x31, rs2==x27, rs2_val == 1024, 
// opcode: bge, op1:x31; op2:x27; op1val:0x0; op2val:0x400; immval:0x10; align:0
TEST_BRANCH_OP(bge, x4, x31, x27, 0x0, 0x400, 0x10, 3f, x2, 72,0)

inst_19:
// rs1==x12, rs2==x20, rs2_val == 2048, 
// opcode: bge, op1:x12; op2:x20; op1val:0x7; op2val:0x800; immval:0x2; align:0
TEST_BRANCH_OP(bge, x4, x12, x20, 0x7, 0x800, 0x2, 3f, x2, 76,0)
RVTEST_SIGBASE( x1,signature_x1_0)

inst_20:
// rs1==x20, rs2==x8, rs2_val == 8192, 
// opcode: bge, op1:x20; op2:x8; op1val:0x80000; op2val:0x2000; immval:0x8; align:0
TEST_BRANCH_OP(bge, x5, x20, x8, 0x80000, 0x2000, 0x8, 1b, x1, 0,0)

inst_21:
// rs1==x15, rs2==x3, rs2_val == 16384, 
// opcode: bge, op1:x15; op2:x3; op1val:-0xb503; op2val:0x4000; immval:0x400; align:0
TEST_BRANCH_OP(bge, x5, x15, x3, -0xb503, 0x4000, 0x400, 3f, x1, 4,0)

inst_22:
// rs1==x19, rs2==x28, rs2_val == 65536, 
// opcode: bge, op1:x19; op2:x28; op1val:0x6; op2val:0x10000; immval:0x6; align:0
TEST_BRANCH_OP(bge, x5, x19, x28, 0x6, 0x10000, 0x6, 1b, x1, 8,0)

inst_23:
// rs1==x6, rs2==x4, rs2_val == 131072, 
// opcode: bge, op1:x6; op2:x4; op1val:-0xb504; op2val:0x20000; immval:0x200; align:0
TEST_BRANCH_OP(bge, x5, x6, x4, -0xb504, 0x20000, 0x200, 3f, x1, 12,0)

inst_24:
// rs1==x2, rs2==x14, rs2_val == 262144, 
// opcode: bge, op1:x2; op2:x14; op1val:0x66666665; op2val:0x40000; immval:0xa; align:0
TEST_BRANCH_OP(bge, x5, x2, x14, 0x66666665, 0x40000, 0xa, 1b, x1, 16,0)

inst_25:
// rs1==x24, rs2==x2, rs2_val == 524288, 
// opcode: bge, op1:x24; op2:x2; op1val:0xb503; op2val:0x80000; immval:0x8; align:0
TEST_BRANCH_OP(bge, x5, x24, x2, 0xb503, 0x80000, 0x8, 3f, x1, 20,0)

inst_26:
// rs1==x4, rs2==x25, rs2_val == 1048576, 
// opcode: bge, op1:x4; op2:x25; op1val:0xb504; op2val:0x100000; immval:0x400; align:0
TEST_BRANCH_OP(bge, x5, x4, x25, 0xb504, 0x100000, 0x400, 1b, x1, 24,0)

inst_27:
// rs1==x23, rs2==x30, rs2_val == 4194304, 
// opcode: bge, op1:x23; op2:x30; op1val:0x9; op2val:0x400000; immval:0x8; align:0
TEST_BRANCH_OP(bge, x5, x23, x30, 0x9, 0x400000, 0x8, 1b, x1, 28,0)

inst_28:
// rs1==x27, rs2==x10, rs2_val == 8388608, rs1_val == 128
// opcode: bge, op1:x27; op2:x10; op1val:0x80; op2val:0x800000; immval:0x400; align:0
TEST_BRANCH_OP(bge, x5, x27, x10, 0x80, 0x800000, 0x400, 3f, x1, 32,0)

inst_29:
// rs1==x7, rs2==x17, rs2_val == 16777216, 
// opcode: bge, op1:x7; op2:x17; op1val:0x33333332; op2val:0x1000000; immval:0x10; align:0
TEST_BRANCH_OP(bge, x5, x7, x17, 0x33333332, 0x1000000, 0x10, 3f, x1, 36,0)

inst_30:
// rs1==x17, rs2==x12, rs2_val == 33554432, 
// opcode: bge, op1:x17; op2:x12; op1val:-0x55555556; op2val:0x2000000; immval:0x40; align:0
TEST_BRANCH_OP(bge, x5, x17, x12, -0x55555556, 0x2000000, 0x40, 3f, x1, 40,0)

inst_31:
// rs1==x21, rs2==x31, rs2_val == 67108864, 
// opcode: bge, op1:x21; op2:x31; op1val:0xb504; op2val:0x4000000; immval:0x400; align:0
TEST_BRANCH_OP(bge, x5, x21, x31, 0xb504, 0x4000000, 0x400, 3f, x1, 44,0)

inst_32:
// rs2_val == 134217728, rs1_val == 2147483647
// opcode: bge, op1:x10; op2:x11; op1val:0x7fffffff; op2val:0x8000000; immval:0x4; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x7fffffff, 0x8000000, 0x4, 3f, x1, 48,0)

inst_33:
// rs2_val == 268435456, 
// opcode: bge, op1:x10; op2:x11; op1val:-0x6; op2val:0x10000000; immval:0x400; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, -0x6, 0x10000000, 0x400, 3f, x1, 52,0)

inst_34:
// rs2_val == 536870912, rs1_val == -268435457
// opcode: bge, op1:x10; op2:x11; op1val:-0x10000001; op2val:0x20000000; immval:0x2; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, -0x10000001, 0x20000000, 0x2, 3f, x1, 56,0)

inst_35:
// rs2_val == 1073741824, rs1_val == -134217729
// opcode: bge, op1:x10; op2:x11; op1val:-0x8000001; op2val:0x40000000; immval:0x8; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, -0x8000001, 0x40000000, 0x8, 1b, x1, 60,0)

inst_36:
// rs2_val == -2147483648, rs1_val == -2097153
// opcode: bge, op1:x10; op2:x11; op1val:-0x200001; op2val:-0x80000000; immval:0x2; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, -0x200001, -0x80000000, 0x2, 1b, x1, 64,0)

inst_37:
// rs2_val == -2, 
// opcode: bge, op1:x10; op2:x11; op1val:0x80000; op2val:-0x2; immval:0x200; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x80000, -0x2, 0x200, 3f, x1, 68,0)

inst_38:
// rs2_val == -3, 
// opcode: bge, op1:x10; op2:x11; op1val:0x6; op2val:-0x3; immval:0x8; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x6, -0x3, 0x8, 3f, x1, 72,0)

inst_39:
// rs2_val == -5, 
// opcode: bge, op1:x10; op2:x11; op1val:0x0; op2val:-0x5; immval:0x200; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x0, -0x5, 0x200, 3f, x1, 76,0)

inst_40:
// rs2_val == -9, 
// opcode: bge, op1:x10; op2:x11; op1val:-0x55555556; op2val:-0x9; immval:0x10; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, -0x55555556, -0x9, 0x10, 3f, x1, 80,0)

inst_41:
// rs2_val == -17, 
// opcode: bge, op1:x10; op2:x11; op1val:-0x81; op2val:-0x11; immval:0x20; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, -0x81, -0x11, 0x20, 3f, x1, 84,0)

inst_42:
// rs2_val == -33, 
// opcode: bge, op1:x10; op2:x11; op1val:-0xb504; op2val:-0x21; immval:0x40; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, -0xb504, -0x21, 0x40, 3f, x1, 88,0)

inst_43:
// rs2_val == -65, rs1_val == 8192
// opcode: bge, op1:x10; op2:x11; op1val:0x2000; op2val:-0x41; immval:0x8; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x2000, -0x41, 0x8, 3f, x1, 92,0)

inst_44:
// rs2_val == -129, rs1_val == -16385
// opcode: bge, op1:x10; op2:x11; op1val:-0x4001; op2val:-0x81; immval:0x8; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, -0x4001, -0x81, 0x8, 1b, x1, 96,0)

inst_45:
// rs2_val == -257, rs1_val == 16777216
// opcode: bge, op1:x10; op2:x11; op1val:0x1000000; op2val:-0x101; immval:0x6; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x1000000, -0x101, 0x6, 1b, x1, 100,0)

inst_46:
// rs2_val == -513, 
// opcode: bge, op1:x10; op2:x11; op1val:0x33333334; op2val:-0x201; immval:0x6; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x33333334, -0x201, 0x6, 1b, x1, 104,0)

inst_47:
// rs2_val == -1025, 
// opcode: bge, op1:x10; op2:x11; op1val:0x3fffffff; op2val:-0x401; immval:0x80; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x3fffffff, -0x401, 0x80, 3f, x1, 108,0)

inst_48:
// rs2_val == -2049, rs1_val == 1
// opcode: bge, op1:x10; op2:x11; op1val:0x1; op2val:-0x801; immval:0x40; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x1, -0x801, 0x40, 3f, x1, 112,0)

inst_49:
// rs2_val == -4097, 
// opcode: bge, op1:x10; op2:x11; op1val:0x55555554; op2val:-0x1001; immval:0x20; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x55555554, -0x1001, 0x20, 3f, x1, 116,0)

inst_50:
// rs2_val == -8193, 
// opcode: bge, op1:x10; op2:x11; op1val:0x80; op2val:-0x2001; immval:0x6; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x80, -0x2001, 0x6, 3f, x1, 120,0)

inst_51:
// rs2_val == -16385, 
// opcode: bge, op1:x10; op2:x11; op1val:-0x8000001; op2val:-0x4001; immval:0x0; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, -0x8000001, -0x4001, 0x0, 1b, x1, 124,0)

inst_52:
// rs2_val == -32769, 
// opcode: bge, op1:x10; op2:x11; op1val:-0x81; op2val:-0x8001; immval:0x100; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, -0x81, -0x8001, 0x100, 3f, x1, 128,0)

inst_53:
// rs2_val == -65537, 
// opcode: bge, op1:x10; op2:x11; op1val:0xb504; op2val:-0x10001; immval:0x10; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0xb504, -0x10001, 0x10, 3f, x1, 132,0)

inst_54:
// rs2_val == -131073, 
// opcode: bge, op1:x10; op2:x11; op1val:-0x100001; op2val:-0x20001; immval:0x6; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, -0x100001, -0x20001, 0x6, 3f, x1, 136,0)

inst_55:
// rs2_val == -262145, 
// opcode: bge, op1:x10; op2:x11; op1val:0x0; op2val:-0x40001; immval:0x8; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x0, -0x40001, 0x8, 1b, x1, 140,0)

inst_56:
// rs2_val == -524289, rs1_val == -33
// opcode: bge, op1:x10; op2:x11; op1val:-0x21; op2val:-0x80001; immval:0x100; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, -0x21, -0x80001, 0x100, 3f, x1, 144,0)

inst_57:
// rs2_val == -1048577, 
// opcode: bge, op1:x10; op2:x11; op1val:0xb503; op2val:-0x100001; immval:0x6; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0xb503, -0x100001, 0x6, 3f, x1, 148,0)

inst_58:
// rs2_val == -2097153, 
// opcode: bge, op1:x10; op2:x11; op1val:-0xb503; op2val:-0x200001; immval:0x556; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, -0xb503, -0x200001, 0x556, 1b, x1, 152,0)

inst_59:
// rs2_val == -4194305, 
// opcode: bge, op1:x10; op2:x11; op1val:0x7; op2val:-0x400001; immval:0x556; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x7, -0x400001, 0x556, 1b, x1, 156,0)

inst_60:
// rs2_val == -8388609, rs1_val == 67108864
// opcode: bge, op1:x10; op2:x11; op1val:0x4000000; op2val:-0x800001; immval:0x556; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x4000000, -0x800001, 0x556, 1b, x1, 160,0)

inst_61:
// rs2_val == -16777217, 
// opcode: bge, op1:x10; op2:x11; op1val:0x0; op2val:-0x1000001; immval:0x100; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x0, -0x1000001, 0x100, 3f, x1, 164,0)

inst_62:
// rs2_val == -33554433, 
// opcode: bge, op1:x10; op2:x11; op1val:-0x8; op2val:-0x2000001; immval:0x8; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, -0x8, -0x2000001, 0x8, 3f, x1, 168,0)

inst_63:
// rs2_val == -67108865, 
// opcode: bge, op1:x10; op2:x11; op1val:-0x200001; op2val:-0x4000001; immval:0x6; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, -0x200001, -0x4000001, 0x6, 1b, x1, 172,0)

inst_64:
// rs2_val == -134217729, 
// opcode: bge, op1:x10; op2:x11; op1val:0x6; op2val:-0x8000001; immval:0x20; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x6, -0x8000001, 0x20, 3f, x1, 176,0)

inst_65:
// rs2_val == -268435457, 
// opcode: bge, op1:x10; op2:x11; op1val:0x33333334; op2val:-0x10000001; immval:0x400; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x33333334, -0x10000001, 0x400, 1b, x1, 180,0)

inst_66:
// rs2_val == -536870913, 
// opcode: bge, op1:x10; op2:x11; op1val:-0xb503; op2val:-0x20000001; immval:0x100; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, -0xb503, -0x20000001, 0x100, 3f, x1, 184,0)

inst_67:
// rs2_val == 2147483647, 
// opcode: bge, op1:x10; op2:x11; op1val:-0x10000001; op2val:0x7fffffff; immval:0x0; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, -0x10000001, 0x7fffffff, 0x0, 1b, x1, 188,0)

inst_68:
// rs2_val == 1431655765, rs1_val == 512
// opcode: bge, op1:x10; op2:x11; op1val:0x200; op2val:0x55555555; immval:0x100; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x200, 0x55555555, 0x100, 3f, x1, 192,0)

inst_69:
// rs2_val == -1431655766, rs1_val==4 and rs2_val==-1431655766, rs1_val == 4
// opcode: bge, op1:x10; op2:x11; op1val:0x4; op2val:-0x55555556; immval:0x4; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x4, -0x55555556, 0x4, 1b, x1, 196,0)

inst_70:
// rs1_val == 2, 
// opcode: bge, op1:x10; op2:x11; op1val:0x2; op2val:-0x801; immval:0x400; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x2, -0x801, 0x400, 1b, x1, 200,0)

inst_71:
// rs1_val == 8, 
// opcode: bge, op1:x10; op2:x11; op1val:0x8; op2val:0x66666666; immval:0x100; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x8, 0x66666666, 0x100, 3f, x1, 204,0)

inst_72:
// rs1_val == 16, 
// opcode: bge, op1:x10; op2:x11; op1val:0x10; op2val:-0x10000001; immval:0x6; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x10, -0x10000001, 0x6, 1b, x1, 208,0)

inst_73:
// rs1_val == 32, 
// opcode: bge, op1:x10; op2:x11; op1val:0x20; op2val:-0x1000001; immval:0x4; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x20, -0x1000001, 0x4, 3f, x1, 212,0)

inst_74:
// rs1_val == 256, 
// opcode: bge, op1:x10; op2:x11; op1val:0x100; op2val:0x33333333; immval:0x20; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x100, 0x33333333, 0x20, 3f, x1, 216,0)

inst_75:
// rs1_val == 1024, 
// opcode: bge, op1:x10; op2:x11; op1val:0x400; op2val:0x2; immval:0x200; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x400, 0x2, 0x200, 3f, x1, 220,0)

inst_76:
// rs1_val == 2048, 
// opcode: bge, op1:x10; op2:x11; op1val:0x800; op2val:0x20; immval:0x6; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x800, 0x20, 0x6, 3f, x1, 224,0)

inst_77:
// rs1_val == 4096, 
// opcode: bge, op1:x10; op2:x11; op1val:0x1000; op2val:0x200000; immval:0x556; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x1000, 0x200000, 0x556, 1b, x1, 228,0)

inst_78:
// rs1_val == 16384, 
// opcode: bge, op1:x10; op2:x11; op1val:0x4000; op2val:-0x401; immval:0x4; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x4000, -0x401, 0x4, 3f, x1, 232,0)

inst_79:
// rs1_val == 65536, 
// opcode: bge, op1:x10; op2:x11; op1val:0x10000; op2val:-0x401; immval:0x40; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x10000, -0x401, 0x40, 3f, x1, 236,0)

inst_80:
// rs1_val == 4194304, 
// opcode: bge, op1:x10; op2:x11; op1val:0x400000; op2val:-0x20000001; immval:0x4; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x400000, -0x20000001, 0x4, 1b, x1, 240,0)

inst_81:
// rs1_val == 8388608, 
// opcode: bge, op1:x10; op2:x11; op1val:0x800000; op2val:0x5; immval:0x80; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x800000, 0x5, 0x80, 3f, x1, 244,0)

inst_82:
// rs1_val == 33554432, 
// opcode: bge, op1:x10; op2:x11; op1val:0x2000000; op2val:0xb503; immval:0x8; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x2000000, 0xb503, 0x8, 3f, x1, 248,0)

inst_83:
// rs1_val == 134217728, 
// opcode: bge, op1:x10; op2:x11; op1val:0x8000000; op2val:0x9; immval:0x0; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x8000000, 0x9, 0x0, 1b, x1, 252,0)

inst_84:
// rs1_val == 268435456, 
// opcode: bge, op1:x10; op2:x11; op1val:0x10000000; op2val:-0x55555556; immval:0x10; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x10000000, -0x55555556, 0x10, 3f, x1, 256,0)

inst_85:
// rs1_val == 1073741824, 
// opcode: bge, op1:x10; op2:x11; op1val:0x40000000; op2val:-0xb503; immval:0x4; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x40000000, -0xb503, 0x4, 1b, x1, 260,0)

inst_86:
// rs1_val == -2147483648, 
// opcode: bge, op1:x10; op2:x11; op1val:-0x80000000; op2val:-0x55555556; immval:0x4; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, -0x80000000, -0x55555556, 0x4, 1b, x1, 264,0)

inst_87:
// rs1_val == -2, 
// opcode: bge, op1:x10; op2:x11; op1val:-0x2; op2val:-0x10000001; immval:0x8; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, -0x2, -0x10000001, 0x8, 1b, x1, 268,0)

inst_88:
// rs1_val == -5, 
// opcode: bge, op1:x10; op2:x11; op1val:-0x5; op2val:-0xb504; immval:0x20; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, -0x5, -0xb504, 0x20, 3f, x1, 272,0)

inst_89:
// rs1_val == -9, 
// opcode: bge, op1:x10; op2:x11; op1val:-0x9; op2val:0x20; immval:0x0; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, -0x9, 0x20, 0x0, 3f, x1, 276,0)

inst_90:
// rs1_val == -17, 
// opcode: bge, op1:x10; op2:x11; op1val:-0x11; op2val:0x2; immval:0x0; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, -0x11, 0x2, 0x0, 1b, x1, 280,0)

inst_91:
// rs1_val == -65, 
// opcode: bge, op1:x10; op2:x11; op1val:-0x41; op2val:0x1000000; immval:0x0; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, -0x41, 0x1000000, 0x0, 1b, x1, 284,0)

inst_92:
// rs1_val == -257, 
// opcode: bge, op1:x10; op2:x11; op1val:-0x101; op2val:0x1000; immval:0xa; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, -0x101, 0x1000, 0xa, 1b, x1, 288,0)

inst_93:
// rs1_val == -513, 
// opcode: bge, op1:x10; op2:x11; op1val:-0x201; op2val:0xb504; immval:0x400; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, -0x201, 0xb504, 0x400, 1b, x1, 292,0)

inst_94:
// rs1_val == -1025, 
// opcode: bge, op1:x10; op2:x11; op1val:-0x401; op2val:0x4000; immval:0x6; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, -0x401, 0x4000, 0x6, 1b, x1, 296,0)

inst_95:
// rs1_val == -2049, 
// opcode: bge, op1:x10; op2:x11; op1val:-0x801; op2val:0x0; immval:0x40; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, -0x801, 0x0, 0x40, 3f, x1, 300,0)

inst_96:
// rs1_val == -4097, 
// opcode: bge, op1:x10; op2:x11; op1val:-0x1001; op2val:0x5; immval:0x8; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, -0x1001, 0x5, 0x8, 3f, x1, 304,0)

inst_97:
// rs1_val == -8193, 
// opcode: bge, op1:x10; op2:x11; op1val:-0x2001; op2val:0x0; immval:0x556; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, -0x2001, 0x0, 0x556, 1b, x1, 308,0)

inst_98:
// rs1_val == -32769, 
// opcode: bge, op1:x10; op2:x11; op1val:-0x8001; op2val:-0x201; immval:0x6; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, -0x8001, -0x201, 0x6, 3f, x1, 312,0)

inst_99:
// rs1_val == -65537, 
// opcode: bge, op1:x10; op2:x11; op1val:-0x10001; op2val:-0x8; immval:0x200; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, -0x10001, -0x8, 0x200, 3f, x1, 316,0)

inst_100:
// rs1_val == -131073, 
// opcode: bge, op1:x10; op2:x11; op1val:-0x20001; op2val:-0xa; immval:0x0; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, -0x20001, -0xa, 0x0, 1b, x1, 320,0)

inst_101:
// rs1_val == -262145, 
// opcode: bge, op1:x10; op2:x11; op1val:-0x40001; op2val:-0x400001; immval:0x200; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, -0x40001, -0x400001, 0x200, 3f, x1, 324,0)

inst_102:
// rs1_val == -524289, 
// opcode: bge, op1:x10; op2:x11; op1val:-0x80001; op2val:0x0; immval:0x6; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, -0x80001, 0x0, 0x6, 3f, x1, 328,0)

inst_103:
// rs1_val == -4194305, 
// opcode: bge, op1:x10; op2:x11; op1val:-0x400001; op2val:0x20; immval:0x556; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, -0x400001, 0x20, 0x556, 1b, x1, 332,0)

inst_104:
// rs1_val == -8388609, 
// opcode: bge, op1:x10; op2:x11; op1val:-0x800001; op2val:0x2000000; immval:0x400; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, -0x800001, 0x2000000, 0x400, 3f, x1, 336,0)

inst_105:
// rs1_val == -16777217, 
// opcode: bge, op1:x10; op2:x11; op1val:-0x1000001; op2val:-0x2001; immval:0x2; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, -0x1000001, -0x2001, 0x2, 3f, x1, 340,0)

inst_106:
// rs1_val == -33554433, 
// opcode: bge, op1:x10; op2:x11; op1val:-0x2000001; op2val:-0x55555556; immval:0x400; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, -0x2000001, -0x55555556, 0x400, 3f, x1, 344,0)

inst_107:
// rs1_val == -67108865, 
// opcode: bge, op1:x10; op2:x11; op1val:-0x4000001; op2val:-0xb503; immval:0x80; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, -0x4000001, -0xb503, 0x80, 3f, x1, 348,0)

inst_108:
// rs1_val == 1431655765, 
// opcode: bge, op1:x10; op2:x11; op1val:0x55555555; op2val:0x20; immval:0x10; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x55555555, 0x20, 0x10, 3f, x1, 352,0)

inst_109:
// rs1_val==3 and rs2_val==3, 
// opcode: bge, op1:x10; op2:x11; op1val:0x3; op2val:0x3; immval:0x0; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x3, 0x3, 0x0, 1b, x1, 356,0)

inst_110:
// rs1_val==3 and rs2_val==1431655765, 
// opcode: bge, op1:x10; op2:x11; op1val:0x3; op2val:0x55555555; immval:0x0; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x3, 0x55555555, 0x0, 1b, x1, 360,0)

inst_111:
// rs1_val==3 and rs2_val==-1431655766, 
// opcode: bge, op1:x10; op2:x11; op1val:0x3; op2val:-0x55555556; immval:0x400; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x3, -0x55555556, 0x400, 3f, x1, 364,0)

inst_112:
// rs1_val==3 and rs2_val==5, 
// opcode: bge, op1:x10; op2:x11; op1val:0x3; op2val:0x5; immval:0x4; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x3, 0x5, 0x4, 1b, x1, 368,0)

inst_113:
// rs1_val==3 and rs2_val==858993459, 
// opcode: bge, op1:x10; op2:x11; op1val:0x3; op2val:0x33333333; immval:0x0; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x3, 0x33333333, 0x0, 3f, x1, 372,0)

inst_114:
// rs1_val==3 and rs2_val==1717986918, 
// opcode: bge, op1:x10; op2:x11; op1val:0x3; op2val:0x66666666; immval:0x0; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x3, 0x66666666, 0x0, 1b, x1, 376,0)

inst_115:
// rs1_val==3 and rs2_val==-46340, 
// opcode: bge, op1:x10; op2:x11; op1val:0x3; op2val:-0xb504; immval:0x40; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x3, -0xb504, 0x40, 3f, x1, 380,0)

inst_116:
// rs1_val==3 and rs2_val==46340, 
// opcode: bge, op1:x10; op2:x11; op1val:0x3; op2val:0xb504; immval:0x200; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x3, 0xb504, 0x200, 3f, x1, 384,0)

inst_117:
// rs1_val==3 and rs2_val==2, 
// opcode: bge, op1:x10; op2:x11; op1val:0x3; op2val:0x2; immval:0x6; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x3, 0x2, 0x6, 1b, x1, 388,0)

inst_118:
// rs1_val==3 and rs2_val==1431655764, 
// opcode: bge, op1:x10; op2:x11; op1val:0x3; op2val:0x55555554; immval:0x556; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x3, 0x55555554, 0x556, 1b, x1, 392,0)

inst_119:
// rs1_val==3 and rs2_val==0, 
// opcode: bge, op1:x10; op2:x11; op1val:0x3; op2val:0x0; immval:0x8; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x3, 0x0, 0x8, 3f, x1, 396,0)

inst_120:
// rs1_val==3 and rs2_val==4, 
// opcode: bge, op1:x10; op2:x11; op1val:0x3; op2val:0x4; immval:0x400; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x3, 0x4, 0x400, 1b, x1, 400,0)

inst_121:
// rs1_val==3 and rs2_val==858993458, 
// opcode: bge, op1:x10; op2:x11; op1val:0x3; op2val:0x33333332; immval:0x0; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x3, 0x33333332, 0x0, 1b, x1, 404,0)

inst_122:
// rs1_val==3 and rs2_val==1717986917, 
// opcode: bge, op1:x10; op2:x11; op1val:0x3; op2val:0x66666665; immval:0x0; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x3, 0x66666665, 0x0, 3f, x1, 408,0)

inst_123:
// rs1_val==3 and rs2_val==46339, 
// opcode: bge, op1:x10; op2:x11; op1val:0x3; op2val:0xb503; immval:0x4; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x3, 0xb503, 0x4, 1b, x1, 412,0)

inst_124:
// rs1_val==3 and rs2_val==1431655766, 
// opcode: bge, op1:x10; op2:x11; op1val:0x3; op2val:0x55555556; immval:0x200; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x3, 0x55555556, 0x200, 3f, x1, 416,0)

inst_125:
// rs1_val==3 and rs2_val==-1431655765, 
// opcode: bge, op1:x10; op2:x11; op1val:0x3; op2val:-0x55555555; immval:0x2; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x3, -0x55555555, 0x2, 1b, x1, 420,0)

inst_126:
// rs1_val==3 and rs2_val==6, 
// opcode: bge, op1:x10; op2:x11; op1val:0x3; op2val:0x6; immval:0x80; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x3, 0x6, 0x80, 3f, x1, 424,0)

inst_127:
// rs1_val==3 and rs2_val==858993460, 
// opcode: bge, op1:x10; op2:x11; op1val:0x3; op2val:0x33333334; immval:0x400; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x3, 0x33333334, 0x400, 3f, x1, 428,0)

inst_128:
// rs1_val==3 and rs2_val==1717986919, 
// opcode: bge, op1:x10; op2:x11; op1val:0x3; op2val:0x66666667; immval:0x40; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x3, 0x66666667, 0x40, 3f, x1, 432,0)

inst_129:
// rs1_val==3 and rs2_val==-46339, 
// opcode: bge, op1:x10; op2:x11; op1val:0x3; op2val:-0xb503; immval:0x4; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x3, -0xb503, 0x4, 3f, x1, 436,0)

inst_130:
// rs1_val==3 and rs2_val==46341, 
// opcode: bge, op1:x10; op2:x11; op1val:0x3; op2val:0xb505; immval:0x0; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x3, 0xb505, 0x0, 1b, x1, 440,0)

inst_131:
// rs1_val==1431655765 and rs2_val==3, 
// opcode: bge, op1:x10; op2:x11; op1val:0x55555555; op2val:0x3; immval:0x2; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x55555555, 0x3, 0x2, 3f, x1, 444,0)

inst_132:
// rs1_val==1431655765 and rs2_val==1431655765, 
// opcode: bge, op1:x10; op2:x11; op1val:0x55555555; op2val:0x55555555; immval:0x6; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x55555555, 0x55555555, 0x6, 1b, x1, 448,0)

inst_133:
// rs1_val==1431655765 and rs2_val==-1431655766, 
// opcode: bge, op1:x10; op2:x11; op1val:0x55555555; op2val:-0x55555556; immval:0x8; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x55555555, -0x55555556, 0x8, 1b, x1, 452,0)

inst_134:
// rs1_val==1431655765 and rs2_val==5, 
// opcode: bge, op1:x10; op2:x11; op1val:0x55555555; op2val:0x5; immval:0x2; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x55555555, 0x5, 0x2, 1b, x1, 456,0)

inst_135:
// rs1_val==1431655765 and rs2_val==858993459, 
// opcode: bge, op1:x10; op2:x11; op1val:0x55555555; op2val:0x33333333; immval:0x8; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x55555555, 0x33333333, 0x8, 1b, x1, 460,0)

inst_136:
// rs1_val==1431655765 and rs2_val==1717986918, 
// opcode: bge, op1:x10; op2:x11; op1val:0x55555555; op2val:0x66666666; immval:0x556; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x55555555, 0x66666666, 0x556, 1b, x1, 464,0)

inst_137:
// rs1_val==1431655765 and rs2_val==-46340, 
// opcode: bge, op1:x10; op2:x11; op1val:0x55555555; op2val:-0xb504; immval:0x8; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x55555555, -0xb504, 0x8, 1b, x1, 468,0)

inst_138:
// rs1_val==1431655765 and rs2_val==46340, 
// opcode: bge, op1:x10; op2:x11; op1val:0x55555555; op2val:0xb504; immval:0x2; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x55555555, 0xb504, 0x2, 3f, x1, 472,0)

inst_139:
// rs1_val==1431655765 and rs2_val==2, 
// opcode: bge, op1:x10; op2:x11; op1val:0x55555555; op2val:0x2; immval:0x4; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x55555555, 0x2, 0x4, 1b, x1, 476,0)

inst_140:
// rs1_val==1431655765 and rs2_val==1431655764, 
// opcode: bge, op1:x10; op2:x11; op1val:0x55555555; op2val:0x55555554; immval:0x556; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x55555555, 0x55555554, 0x556, 1b, x1, 480,0)

inst_141:
// rs1_val==1431655765 and rs2_val==0, 
// opcode: bge, op1:x10; op2:x11; op1val:0x55555555; op2val:0x0; immval:0x40; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x55555555, 0x0, 0x40, 3f, x1, 484,0)

inst_142:
// rs1_val==1431655765 and rs2_val==4, 
// opcode: bge, op1:x10; op2:x11; op1val:0x55555555; op2val:0x4; immval:0x6; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x55555555, 0x4, 0x6, 1b, x1, 488,0)

inst_143:
// rs1_val==1431655765 and rs2_val==858993458, 
// opcode: bge, op1:x10; op2:x11; op1val:0x55555555; op2val:0x33333332; immval:0x4; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x55555555, 0x33333332, 0x4, 3f, x1, 492,0)

inst_144:
// rs1_val==1431655765 and rs2_val==1717986917, 
// opcode: bge, op1:x10; op2:x11; op1val:0x55555555; op2val:0x66666665; immval:0x400; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x55555555, 0x66666665, 0x400, 3f, x1, 496,0)

inst_145:
// rs1_val==1431655765 and rs2_val==46339, 
// opcode: bge, op1:x10; op2:x11; op1val:0x55555555; op2val:0xb503; immval:0x100; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x55555555, 0xb503, 0x100, 3f, x1, 500,0)

inst_146:
// rs1_val==1431655765 and rs2_val==1431655766, 
// opcode: bge, op1:x10; op2:x11; op1val:0x55555555; op2val:0x55555556; immval:0x8; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x55555555, 0x55555556, 0x8, 3f, x1, 504,0)

inst_147:
// rs1_val==1431655765 and rs2_val==-1431655765, 
// opcode: bge, op1:x10; op2:x11; op1val:0x55555555; op2val:-0x55555555; immval:0x80; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x55555555, -0x55555555, 0x80, 3f, x1, 508,0)

inst_148:
// rs1_val==1431655765 and rs2_val==6, 
// opcode: bge, op1:x10; op2:x11; op1val:0x55555555; op2val:0x6; immval:0x200; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x55555555, 0x6, 0x200, 3f, x1, 512,0)

inst_149:
// rs1_val==1431655765 and rs2_val==858993460, 
// opcode: bge, op1:x10; op2:x11; op1val:0x55555555; op2val:0x33333334; immval:0x6; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x55555555, 0x33333334, 0x6, 1b, x1, 516,0)

inst_150:
// rs1_val==1431655765 and rs2_val==1717986919, 
// opcode: bge, op1:x10; op2:x11; op1val:0x55555555; op2val:0x66666667; immval:0x556; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x55555555, 0x66666667, 0x556, 1b, x1, 520,0)

inst_151:
// rs1_val==1431655765 and rs2_val==-46339, 
// opcode: bge, op1:x10; op2:x11; op1val:0x55555555; op2val:-0xb503; immval:0x200; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x55555555, -0xb503, 0x200, 3f, x1, 524,0)

inst_152:
// rs1_val==1431655765 and rs2_val==46341, 
// opcode: bge, op1:x10; op2:x11; op1val:0x55555555; op2val:0xb505; immval:0x8; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x55555555, 0xb505, 0x8, 3f, x1, 528,0)

inst_153:
// rs1_val==-1431655766 and rs2_val==3, 
// opcode: bge, op1:x10; op2:x11; op1val:-0x55555556; op2val:0x3; immval:0x556; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, -0x55555556, 0x3, 0x556, 1b, x1, 532,0)

inst_154:
// rs1_val==-1431655766 and rs2_val==1431655765, 
// opcode: bge, op1:x10; op2:x11; op1val:-0x55555556; op2val:0x55555555; immval:0x6; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, -0x55555556, 0x55555555, 0x6, 1b, x1, 536,0)

inst_155:
// rs1_val==-1431655766 and rs2_val==-1431655766, 
// opcode: bge, op1:x10; op2:x11; op1val:-0x55555556; op2val:-0x55555556; immval:0x400; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, -0x55555556, -0x55555556, 0x400, 1b, x1, 540,0)

inst_156:
// rs1_val==-1431655766 and rs2_val==5, 
// opcode: bge, op1:x10; op2:x11; op1val:-0x55555556; op2val:0x5; immval:0x80; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, -0x55555556, 0x5, 0x80, 3f, x1, 544,0)

inst_157:
// rs1_val==-1431655766 and rs2_val==858993459, 
// opcode: bge, op1:x10; op2:x11; op1val:-0x55555556; op2val:0x33333333; immval:0x2; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, -0x55555556, 0x33333333, 0x2, 3f, x1, 548,0)

inst_158:
// rs1_val==-1431655766 and rs2_val==1717986918, 
// opcode: bge, op1:x10; op2:x11; op1val:-0x55555556; op2val:0x66666666; immval:0x4; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, -0x55555556, 0x66666666, 0x4, 3f, x1, 552,0)

inst_159:
// rs1_val==-1431655766 and rs2_val==-46340, 
// opcode: bge, op1:x10; op2:x11; op1val:-0x55555556; op2val:-0xb504; immval:0x4; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, -0x55555556, -0xb504, 0x4, 1b, x1, 556,0)

inst_160:
// rs1_val==-1431655766 and rs2_val==46340, 
// opcode: bge, op1:x10; op2:x11; op1val:-0x55555556; op2val:0xb504; immval:0x6; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, -0x55555556, 0xb504, 0x6, 3f, x1, 560,0)

inst_161:
// rs1_val==-1431655766 and rs2_val==2, 
// opcode: bge, op1:x10; op2:x11; op1val:-0x55555556; op2val:0x2; immval:0x40; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, -0x55555556, 0x2, 0x40, 3f, x1, 564,0)

inst_162:
// rs1_val==-1431655766 and rs2_val==1431655764, 
// opcode: bge, op1:x10; op2:x11; op1val:-0x55555556; op2val:0x55555554; immval:0x100; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, -0x55555556, 0x55555554, 0x100, 3f, x1, 568,0)

inst_163:
// rs1_val==-1431655766 and rs2_val==0, 
// opcode: bge, op1:x10; op2:x11; op1val:-0x55555556; op2val:0x0; immval:0x6; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, -0x55555556, 0x0, 0x6, 1b, x1, 572,0)

inst_164:
// rs1_val==-1431655766 and rs2_val==858993458, 
// opcode: bge, op1:x10; op2:x11; op1val:-0x55555556; op2val:0x33333332; immval:0x556; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, -0x55555556, 0x33333332, 0x556, 1b, x1, 576,0)

inst_165:
// rs1_val==-1431655766 and rs2_val==1717986917, 
// opcode: bge, op1:x10; op2:x11; op1val:-0x55555556; op2val:0x66666665; immval:0x8; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, -0x55555556, 0x66666665, 0x8, 1b, x1, 580,0)

inst_166:
// rs1_val==-1431655766 and rs2_val==46339, 
// opcode: bge, op1:x10; op2:x11; op1val:-0x55555556; op2val:0xb503; immval:0x0; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, -0x55555556, 0xb503, 0x0, 3f, x1, 584,0)

inst_167:
// rs1_val==-1431655766 and rs2_val==1431655766, 
// opcode: bge, op1:x10; op2:x11; op1val:-0x55555556; op2val:0x55555556; immval:0x8; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, -0x55555556, 0x55555556, 0x8, 1b, x1, 588,0)

inst_168:
// rs1_val==-1431655766 and rs2_val==-1431655765, 
// opcode: bge, op1:x10; op2:x11; op1val:-0x55555556; op2val:-0x55555555; immval:0x200; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, -0x55555556, -0x55555555, 0x200, 3f, x1, 592,0)

inst_169:
// rs1_val==-1431655766 and rs2_val==6, 
// opcode: bge, op1:x10; op2:x11; op1val:-0x55555556; op2val:0x6; immval:0x200; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, -0x55555556, 0x6, 0x200, 3f, x1, 596,0)

inst_170:
// rs1_val==-1431655766 and rs2_val==858993460, 
// opcode: bge, op1:x10; op2:x11; op1val:-0x55555556; op2val:0x33333334; immval:0x400; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, -0x55555556, 0x33333334, 0x400, 1b, x1, 600,0)

inst_171:
// rs1_val==-1431655766 and rs2_val==1717986919, 
// opcode: bge, op1:x10; op2:x11; op1val:-0x55555556; op2val:0x66666667; immval:0x80; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, -0x55555556, 0x66666667, 0x80, 3f, x1, 604,0)

inst_172:
// rs1_val==-1431655766 and rs2_val==-46339, 
// opcode: bge, op1:x10; op2:x11; op1val:-0x55555556; op2val:-0xb503; immval:0xa; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, -0x55555556, -0xb503, 0xa, 1b, x1, 608,0)

inst_173:
// rs1_val==-1431655766 and rs2_val==46341, 
// opcode: bge, op1:x10; op2:x11; op1val:-0x55555556; op2val:0xb505; immval:0x20; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, -0x55555556, 0xb505, 0x20, 3f, x1, 612,0)

inst_174:
// rs1_val==5 and rs2_val==3, 
// opcode: bge, op1:x10; op2:x11; op1val:0x5; op2val:0x3; immval:0x100; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x5, 0x3, 0x100, 3f, x1, 616,0)

inst_175:
// rs1_val==5 and rs2_val==1431655765, 
// opcode: bge, op1:x10; op2:x11; op1val:0x5; op2val:0x55555555; immval:0x8; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x5, 0x55555555, 0x8, 3f, x1, 620,0)

inst_176:
// rs1_val==5 and rs2_val==-1431655766, 
// opcode: bge, op1:x10; op2:x11; op1val:0x5; op2val:-0x55555556; immval:0x40; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x5, -0x55555556, 0x40, 3f, x1, 624,0)

inst_177:
// rs1_val==5 and rs2_val==5, 
// opcode: bge, op1:x10; op2:x11; op1val:0x5; op2val:0x5; immval:0x8; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x5, 0x5, 0x8, 3f, x1, 628,0)

inst_178:
// rs1_val==5 and rs2_val==858993459, 
// opcode: bge, op1:x10; op2:x11; op1val:0x5; op2val:0x33333333; immval:0x10; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x5, 0x33333333, 0x10, 3f, x1, 632,0)

inst_179:
// rs1_val==5 and rs2_val==1717986918, 
// opcode: bge, op1:x10; op2:x11; op1val:0x5; op2val:0x66666666; immval:0x556; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x5, 0x66666666, 0x556, 1b, x1, 636,0)

inst_180:
// rs1_val==5 and rs2_val==-46340, 
// opcode: bge, op1:x10; op2:x11; op1val:0x5; op2val:-0xb504; immval:0x8; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x5, -0xb504, 0x8, 3f, x1, 640,0)

inst_181:
// rs1_val==5 and rs2_val==46340, 
// opcode: bge, op1:x10; op2:x11; op1val:0x5; op2val:0xb504; immval:0x8; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x5, 0xb504, 0x8, 1b, x1, 644,0)

inst_182:
// rs1_val==5 and rs2_val==2, 
// opcode: bge, op1:x10; op2:x11; op1val:0x5; op2val:0x2; immval:0x2; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x5, 0x2, 0x2, 1b, x1, 648,0)

inst_183:
// rs1_val==5 and rs2_val==1431655764, 
// opcode: bge, op1:x10; op2:x11; op1val:0x5; op2val:0x55555554; immval:0x6; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x5, 0x55555554, 0x6, 1b, x1, 652,0)

inst_184:
// rs1_val==5 and rs2_val==0, 
// opcode: bge, op1:x10; op2:x11; op1val:0x5; op2val:0x0; immval:0x0; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x5, 0x0, 0x0, 1b, x1, 656,0)

inst_185:
// rs1_val==5 and rs2_val==4, 
// opcode: bge, op1:x10; op2:x11; op1val:0x5; op2val:0x4; immval:0x0; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x5, 0x4, 0x0, 3f, x1, 660,0)

inst_186:
// rs1_val==5 and rs2_val==858993458, 
// opcode: bge, op1:x10; op2:x11; op1val:0x5; op2val:0x33333332; immval:0x10; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x5, 0x33333332, 0x10, 3f, x1, 664,0)

inst_187:
// rs1_val==5 and rs2_val==1717986917, 
// opcode: bge, op1:x10; op2:x11; op1val:0x5; op2val:0x66666665; immval:0x4; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x5, 0x66666665, 0x4, 3f, x1, 668,0)

inst_188:
// rs1_val==5 and rs2_val==46339, 
// opcode: bge, op1:x10; op2:x11; op1val:0x5; op2val:0xb503; immval:0x200; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x5, 0xb503, 0x200, 3f, x1, 672,0)

inst_189:
// rs1_val==5 and rs2_val==1431655766, 
// opcode: bge, op1:x10; op2:x11; op1val:0x5; op2val:0x55555556; immval:0x556; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x5, 0x55555556, 0x556, 1b, x1, 676,0)

inst_190:
// rs1_val==5 and rs2_val==-1431655765, 
// opcode: bge, op1:x10; op2:x11; op1val:0x5; op2val:-0x55555555; immval:0x400; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x5, -0x55555555, 0x400, 1b, x1, 680,0)

inst_191:
// rs1_val==5 and rs2_val==6, 
// opcode: bge, op1:x10; op2:x11; op1val:0x5; op2val:0x6; immval:0x0; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x5, 0x6, 0x0, 3f, x1, 684,0)

inst_192:
// rs1_val==5 and rs2_val==858993460, 
// opcode: bge, op1:x10; op2:x11; op1val:0x5; op2val:0x33333334; immval:0x0; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x5, 0x33333334, 0x0, 3f, x1, 688,0)

inst_193:
// rs1_val==5 and rs2_val==1717986919, 
// opcode: bge, op1:x10; op2:x11; op1val:0x5; op2val:0x66666667; immval:0x40; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x5, 0x66666667, 0x40, 3f, x1, 692,0)

inst_194:
// rs1_val==5 and rs2_val==-46339, 
// opcode: bge, op1:x10; op2:x11; op1val:0x5; op2val:-0xb503; immval:0x6; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x5, -0xb503, 0x6, 1b, x1, 696,0)

inst_195:
// rs1_val==5 and rs2_val==46341, 
// opcode: bge, op1:x10; op2:x11; op1val:0x5; op2val:0xb505; immval:0x0; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x5, 0xb505, 0x0, 3f, x1, 700,0)

inst_196:
// rs1_val==858993459 and rs2_val==3, 
// opcode: bge, op1:x10; op2:x11; op1val:0x33333333; op2val:0x3; immval:0x2; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x33333333, 0x3, 0x2, 1b, x1, 704,0)

inst_197:
// rs1_val==858993459 and rs2_val==1431655765, 
// opcode: bge, op1:x10; op2:x11; op1val:0x33333333; op2val:0x55555555; immval:0x8; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x33333333, 0x55555555, 0x8, 3f, x1, 708,0)

inst_198:
// rs1_val==858993459 and rs2_val==-1431655766, 
// opcode: bge, op1:x10; op2:x11; op1val:0x33333333; op2val:-0x55555556; immval:0x6; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x33333333, -0x55555556, 0x6, 3f, x1, 712,0)

inst_199:
// rs1_val==858993459 and rs2_val==5, 
// opcode: bge, op1:x10; op2:x11; op1val:0x33333333; op2val:0x5; immval:0x0; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x33333333, 0x5, 0x0, 1b, x1, 716,0)

inst_200:
// rs1_val==858993459 and rs2_val==858993459, 
// opcode: bge, op1:x10; op2:x11; op1val:0x33333333; op2val:0x33333333; immval:0x10; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x33333333, 0x33333333, 0x10, 3f, x1, 720,0)

inst_201:
// rs1_val==858993459 and rs2_val==1717986918, 
// opcode: bge, op1:x10; op2:x11; op1val:0x33333333; op2val:0x66666666; immval:0x40; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x33333333, 0x66666666, 0x40, 3f, x1, 724,0)

inst_202:
// rs1_val==858993459 and rs2_val==-46340, 
// opcode: bge, op1:x10; op2:x11; op1val:0x33333333; op2val:-0xb504; immval:0x0; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x33333333, -0xb504, 0x0, 1b, x1, 728,0)

inst_203:
// rs1_val==858993459 and rs2_val==46340, 
// opcode: bge, op1:x10; op2:x11; op1val:0x33333333; op2val:0xb504; immval:0x40; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x33333333, 0xb504, 0x40, 3f, x1, 732,0)

inst_204:
// rs1_val==858993459 and rs2_val==2, 
// opcode: bge, op1:x10; op2:x11; op1val:0x33333333; op2val:0x2; immval:0x40; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x33333333, 0x2, 0x40, 3f, x1, 736,0)

inst_205:
// rs1_val==858993459 and rs2_val==1431655764, 
// opcode: bge, op1:x10; op2:x11; op1val:0x33333333; op2val:0x55555554; immval:0x400; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x33333333, 0x55555554, 0x400, 1b, x1, 740,0)

inst_206:
// rs1_val==858993459 and rs2_val==0, 
// opcode: bge, op1:x10; op2:x11; op1val:0x33333333; op2val:0x0; immval:0x200; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x33333333, 0x0, 0x200, 3f, x1, 744,0)

inst_207:
// rs1_val==858993459 and rs2_val==4, 
// opcode: bge, op1:x10; op2:x11; op1val:0x33333333; op2val:0x4; immval:0x8; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x33333333, 0x4, 0x8, 1b, x1, 748,0)

inst_208:
// rs1_val==858993459 and rs2_val==858993458, 
// opcode: bge, op1:x10; op2:x11; op1val:0x33333333; op2val:0x33333332; immval:0x556; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x33333333, 0x33333332, 0x556, 1b, x1, 752,0)

inst_209:
// rs1_val==858993459 and rs2_val==1717986917, 
// opcode: bge, op1:x10; op2:x11; op1val:0x33333333; op2val:0x66666665; immval:0x400; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x33333333, 0x66666665, 0x400, 3f, x1, 756,0)

inst_210:
// rs1_val==858993459 and rs2_val==46339, 
// opcode: bge, op1:x10; op2:x11; op1val:0x33333333; op2val:0xb503; immval:0x8; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x33333333, 0xb503, 0x8, 3f, x1, 760,0)

inst_211:
// rs1_val==858993459 and rs2_val==1431655766, 
// opcode: bge, op1:x10; op2:x11; op1val:0x33333333; op2val:0x55555556; immval:0x8; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x33333333, 0x55555556, 0x8, 1b, x1, 764,0)

inst_212:
// rs1_val==858993459 and rs2_val==-1431655765, 
// opcode: bge, op1:x10; op2:x11; op1val:0x33333333; op2val:-0x55555555; immval:0x0; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x33333333, -0x55555555, 0x0, 3f, x1, 768,0)

inst_213:
// rs1_val==858993459 and rs2_val==6, 
// opcode: bge, op1:x10; op2:x11; op1val:0x33333333; op2val:0x6; immval:0xa; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x33333333, 0x6, 0xa, 1b, x1, 772,0)

inst_214:
// rs1_val==858993459 and rs2_val==858993460, 
// opcode: bge, op1:x10; op2:x11; op1val:0x33333333; op2val:0x33333334; immval:0x2; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x33333333, 0x33333334, 0x2, 1b, x1, 776,0)

inst_215:
// rs1_val==858993459 and rs2_val==1717986919, 
// opcode: bge, op1:x10; op2:x11; op1val:0x33333333; op2val:0x66666667; immval:0x10; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x33333333, 0x66666667, 0x10, 3f, x1, 780,0)

inst_216:
// rs1_val==858993459 and rs2_val==-46339, 
// opcode: bge, op1:x10; op2:x11; op1val:0x33333333; op2val:-0xb503; immval:0x0; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x33333333, -0xb503, 0x0, 1b, x1, 784,0)

inst_217:
// rs1_val==858993459 and rs2_val==46341, 
// opcode: bge, op1:x10; op2:x11; op1val:0x33333333; op2val:0xb505; immval:0x4; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x33333333, 0xb505, 0x4, 1b, x1, 788,0)

inst_218:
// rs1_val==1717986918 and rs2_val==3, 
// opcode: bge, op1:x10; op2:x11; op1val:0x66666666; op2val:0x3; immval:0x6; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x66666666, 0x3, 0x6, 1b, x1, 792,0)

inst_219:
// rs1_val==1717986918 and rs2_val==1431655765, 
// opcode: bge, op1:x10; op2:x11; op1val:0x66666666; op2val:0x55555555; immval:0x8; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x66666666, 0x55555555, 0x8, 1b, x1, 796,0)

inst_220:
// rs1_val==1717986918 and rs2_val==-1431655766, 
// opcode: bge, op1:x10; op2:x11; op1val:0x66666666; op2val:-0x55555556; immval:0x200; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x66666666, -0x55555556, 0x200, 3f, x1, 800,0)

inst_221:
// rs1_val==1717986918 and rs2_val==5, 
// opcode: bge, op1:x10; op2:x11; op1val:0x66666666; op2val:0x5; immval:0xa; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x66666666, 0x5, 0xa, 1b, x1, 804,0)

inst_222:
// rs1_val==1717986918 and rs2_val==858993459, 
// opcode: bge, op1:x10; op2:x11; op1val:0x66666666; op2val:0x33333333; immval:0x40; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x66666666, 0x33333333, 0x40, 3f, x1, 808,0)

inst_223:
// rs1_val==1717986918 and rs2_val==1717986918, 
// opcode: bge, op1:x10; op2:x11; op1val:0x66666666; op2val:0x66666666; immval:0x400; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x66666666, 0x66666666, 0x400, 1b, x1, 812,0)

inst_224:
// rs1_val==1717986918 and rs2_val==-46340, 
// opcode: bge, op1:x10; op2:x11; op1val:0x66666666; op2val:-0xb504; immval:0x2; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x66666666, -0xb504, 0x2, 3f, x1, 816,0)

inst_225:
// rs1_val==1717986918 and rs2_val==46340, 
// opcode: bge, op1:x10; op2:x11; op1val:0x66666666; op2val:0xb504; immval:0x400; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x66666666, 0xb504, 0x400, 3f, x1, 820,0)

inst_226:
// rs1_val==1717986918 and rs2_val==2, 
// opcode: bge, op1:x10; op2:x11; op1val:0x66666666; op2val:0x2; immval:0x40; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x66666666, 0x2, 0x40, 3f, x1, 824,0)

inst_227:
// rs1_val==1717986918 and rs2_val==1431655764, 
// opcode: bge, op1:x10; op2:x11; op1val:0x66666666; op2val:0x55555554; immval:0x8; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x66666666, 0x55555554, 0x8, 3f, x1, 828,0)

inst_228:
// rs1_val==1717986918 and rs2_val==0, 
// opcode: bge, op1:x10; op2:x11; op1val:0x66666666; op2val:0x0; immval:0x556; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x66666666, 0x0, 0x556, 1b, x1, 832,0)

inst_229:
// rs1_val==1717986918 and rs2_val==4, 
// opcode: bge, op1:x10; op2:x11; op1val:0x66666666; op2val:0x4; immval:0x80; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x66666666, 0x4, 0x80, 3f, x1, 836,0)

inst_230:
// rs1_val==1717986918 and rs2_val==858993458, 
// opcode: bge, op1:x10; op2:x11; op1val:0x66666666; op2val:0x33333332; immval:0x80; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x66666666, 0x33333332, 0x80, 3f, x1, 840,0)

inst_231:
// rs1_val==1717986918 and rs2_val==1717986917, 
// opcode: bge, op1:x10; op2:x11; op1val:0x66666666; op2val:0x66666665; immval:0x8; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x66666666, 0x66666665, 0x8, 3f, x1, 844,0)

inst_232:
// rs1_val==1717986918 and rs2_val==46339, 
// opcode: bge, op1:x10; op2:x11; op1val:0x66666666; op2val:0xb503; immval:0x6; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x66666666, 0xb503, 0x6, 3f, x1, 848,0)

inst_233:
// rs1_val==1717986918 and rs2_val==1431655766, 
// opcode: bge, op1:x10; op2:x11; op1val:0x66666666; op2val:0x55555556; immval:0x0; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x66666666, 0x55555556, 0x0, 1b, x1, 852,0)

inst_234:
// rs1_val==1717986918 and rs2_val==-1431655765, 
// opcode: bge, op1:x10; op2:x11; op1val:0x66666666; op2val:-0x55555555; immval:0x400; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x66666666, -0x55555555, 0x400, 3f, x1, 856,0)

inst_235:
// rs1_val==1717986918 and rs2_val==6, 
// opcode: bge, op1:x10; op2:x11; op1val:0x66666666; op2val:0x6; immval:0x4; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x66666666, 0x6, 0x4, 1b, x1, 860,0)

inst_236:
// rs1_val==1717986918 and rs2_val==858993460, 
// opcode: bge, op1:x10; op2:x11; op1val:0x66666666; op2val:0x33333334; immval:0x0; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x66666666, 0x33333334, 0x0, 3f, x1, 864,0)

inst_237:
// rs1_val==1717986918 and rs2_val==1717986919, 
// opcode: bge, op1:x10; op2:x11; op1val:0x66666666; op2val:0x66666667; immval:0x10; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x66666666, 0x66666667, 0x10, 3f, x1, 868,0)

inst_238:
// rs1_val==1717986918 and rs2_val==-46339, 
// opcode: bge, op1:x10; op2:x11; op1val:0x66666666; op2val:-0xb503; immval:0x80; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x66666666, -0xb503, 0x80, 3f, x1, 872,0)

inst_239:
// rs1_val==1717986918 and rs2_val==46341, 
// opcode: bge, op1:x10; op2:x11; op1val:0x66666666; op2val:0xb505; immval:0xa; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x66666666, 0xb505, 0xa, 1b, x1, 876,0)

inst_240:
// rs1_val==-46340 and rs2_val==3, 
// opcode: bge, op1:x10; op2:x11; op1val:-0xb504; op2val:0x3; immval:0x20; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, -0xb504, 0x3, 0x20, 3f, x1, 880,0)

inst_241:
// rs1_val==-46340 and rs2_val==1431655765, 
// opcode: bge, op1:x10; op2:x11; op1val:-0xb504; op2val:0x55555555; immval:0x2; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, -0xb504, 0x55555555, 0x2, 3f, x1, 884,0)

inst_242:
// rs1_val==-46340 and rs2_val==-1431655766, 
// opcode: bge, op1:x10; op2:x11; op1val:-0xb504; op2val:-0x55555556; immval:0x400; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, -0xb504, -0x55555556, 0x400, 1b, x1, 888,0)

inst_243:
// rs1_val==-46340 and rs2_val==5, 
// opcode: bge, op1:x10; op2:x11; op1val:-0xb504; op2val:0x5; immval:0x40; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, -0xb504, 0x5, 0x40, 3f, x1, 892,0)

inst_244:
// rs1_val==-46340 and rs2_val==858993459, 
// opcode: bge, op1:x10; op2:x11; op1val:-0xb504; op2val:0x33333333; immval:0x8; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, -0xb504, 0x33333333, 0x8, 1b, x1, 896,0)

inst_245:
// rs1_val==-46340 and rs2_val==1717986918, 
// opcode: bge, op1:x10; op2:x11; op1val:-0xb504; op2val:0x66666666; immval:0x6; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, -0xb504, 0x66666666, 0x6, 1b, x1, 900,0)

inst_246:
// rs1_val==-46340 and rs2_val==-46340, 
// opcode: bge, op1:x10; op2:x11; op1val:-0xb504; op2val:-0xb504; immval:0x0; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, -0xb504, -0xb504, 0x0, 1b, x1, 904,0)

inst_247:
// rs1_val==-46340 and rs2_val==46340, 
// opcode: bge, op1:x10; op2:x11; op1val:-0xb504; op2val:0xb504; immval:0x8; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, -0xb504, 0xb504, 0x8, 3f, x1, 908,0)

inst_248:
// rs1_val==-46340 and rs2_val==2, 
// opcode: bge, op1:x10; op2:x11; op1val:-0xb504; op2val:0x2; immval:0x80; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, -0xb504, 0x2, 0x80, 3f, x1, 912,0)

inst_249:
// rs1_val==-46340 and rs2_val==1431655764, 
// opcode: bge, op1:x10; op2:x11; op1val:-0xb504; op2val:0x55555554; immval:0x4; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, -0xb504, 0x55555554, 0x4, 1b, x1, 916,0)

inst_250:
// rs1_val==-46340 and rs2_val==0, 
// opcode: bge, op1:x10; op2:x11; op1val:-0xb504; op2val:0x0; immval:0x4; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, -0xb504, 0x0, 0x4, 1b, x1, 920,0)

inst_251:
// rs1_val==-46340 and rs2_val==4, 
// opcode: bge, op1:x10; op2:x11; op1val:-0xb504; op2val:0x4; immval:0x8; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, -0xb504, 0x4, 0x8, 3f, x1, 924,0)

inst_252:
// rs1_val==-46340 and rs2_val==858993458, 
// opcode: bge, op1:x10; op2:x11; op1val:-0xb504; op2val:0x33333332; immval:0x6; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, -0xb504, 0x33333332, 0x6, 1b, x1, 928,0)

inst_253:
// rs1_val==-46340 and rs2_val==1717986917, 
// opcode: bge, op1:x10; op2:x11; op1val:-0xb504; op2val:0x66666665; immval:0x8; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, -0xb504, 0x66666665, 0x8, 1b, x1, 932,0)

inst_254:
// rs1_val==-46340 and rs2_val==46339, 
// opcode: bge, op1:x10; op2:x11; op1val:-0xb504; op2val:0xb503; immval:0x10; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, -0xb504, 0xb503, 0x10, 3f, x1, 936,0)

inst_255:
// rs1_val==-46340 and rs2_val==1431655766, 
// opcode: bge, op1:x10; op2:x11; op1val:-0xb504; op2val:0x55555556; immval:0x40; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, -0xb504, 0x55555556, 0x40, 3f, x1, 940,0)

inst_256:
// rs1_val==-46340 and rs2_val==-1431655765, 
// opcode: bge, op1:x10; op2:x11; op1val:-0xb504; op2val:-0x55555555; immval:0x400; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, -0xb504, -0x55555555, 0x400, 3f, x1, 944,0)

inst_257:
// rs1_val==-46340 and rs2_val==6, 
// opcode: bge, op1:x10; op2:x11; op1val:-0xb504; op2val:0x6; immval:0x40; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, -0xb504, 0x6, 0x40, 3f, x1, 948,0)

inst_258:
// rs1_val==-46340 and rs2_val==858993460, 
// opcode: bge, op1:x10; op2:x11; op1val:-0xb504; op2val:0x33333334; immval:0x4; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, -0xb504, 0x33333334, 0x4, 1b, x1, 952,0)

inst_259:
// rs1_val==-46340 and rs2_val==1717986919, 
// opcode: bge, op1:x10; op2:x11; op1val:-0xb504; op2val:0x66666667; immval:0x2; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, -0xb504, 0x66666667, 0x2, 1b, x1, 956,0)

inst_260:
// rs1_val==-46340 and rs2_val==-46339, 
// opcode: bge, op1:x10; op2:x11; op1val:-0xb504; op2val:-0xb503; immval:0x10; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, -0xb504, -0xb503, 0x10, 3f, x1, 960,0)

inst_261:
// rs1_val==-46340 and rs2_val==46341, 
// opcode: bge, op1:x10; op2:x11; op1val:-0xb504; op2val:0xb505; immval:0x80; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, -0xb504, 0xb505, 0x80, 3f, x1, 964,0)

inst_262:
// rs1_val==46340 and rs2_val==3, 
// opcode: bge, op1:x10; op2:x11; op1val:0xb504; op2val:0x3; immval:0x10; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0xb504, 0x3, 0x10, 3f, x1, 968,0)

inst_263:
// rs1_val==46340 and rs2_val==1431655765, 
// opcode: bge, op1:x10; op2:x11; op1val:0xb504; op2val:0x55555555; immval:0x4; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0xb504, 0x55555555, 0x4, 1b, x1, 972,0)

inst_264:
// rs1_val==46340 and rs2_val==-1431655766, 
// opcode: bge, op1:x10; op2:x11; op1val:0xb504; op2val:-0x55555556; immval:0x20; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0xb504, -0x55555556, 0x20, 3f, x1, 976,0)

inst_265:
// rs1_val==46340 and rs2_val==5, 
// opcode: bge, op1:x10; op2:x11; op1val:0xb504; op2val:0x5; immval:0x0; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0xb504, 0x5, 0x0, 3f, x1, 980,0)

inst_266:
// rs1_val==46340 and rs2_val==858993459, 
// opcode: bge, op1:x10; op2:x11; op1val:0xb504; op2val:0x33333333; immval:0x2; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0xb504, 0x33333333, 0x2, 3f, x1, 984,0)

inst_267:
// rs1_val==46340 and rs2_val==1717986918, 
// opcode: bge, op1:x10; op2:x11; op1val:0xb504; op2val:0x66666666; immval:0xa; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0xb504, 0x66666666, 0xa, 1b, x1, 988,0)

inst_268:
// rs1_val==46340 and rs2_val==-46340, 
// opcode: bge, op1:x10; op2:x11; op1val:0xb504; op2val:-0xb504; immval:0x200; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0xb504, -0xb504, 0x200, 3f, x1, 992,0)

inst_269:
// rs1_val==46340 and rs2_val==46340, 
// opcode: bge, op1:x10; op2:x11; op1val:0xb504; op2val:0xb504; immval:0x8; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0xb504, 0xb504, 0x8, 1b, x1, 996,0)

inst_270:
// rs1_val==46340 and rs2_val==2, 
// opcode: bge, op1:x10; op2:x11; op1val:0xb504; op2val:0x2; immval:0x200; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0xb504, 0x2, 0x200, 3f, x1, 1000,0)

inst_271:
// rs1_val==46340 and rs2_val==1431655764, 
// opcode: bge, op1:x10; op2:x11; op1val:0xb504; op2val:0x55555554; immval:0x556; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0xb504, 0x55555554, 0x556, 1b, x1, 1004,0)

inst_272:
// rs1_val==46340 and rs2_val==0, 
// opcode: bge, op1:x10; op2:x11; op1val:0xb504; op2val:0x0; immval:0x2; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0xb504, 0x0, 0x2, 1b, x1, 1008,0)

inst_273:
// rs1_val==46340 and rs2_val==4, 
// opcode: bge, op1:x10; op2:x11; op1val:0xb504; op2val:0x4; immval:0x100; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0xb504, 0x4, 0x100, 3f, x1, 1012,0)

inst_274:
// rs1_val==46340 and rs2_val==858993458, 
// opcode: bge, op1:x10; op2:x11; op1val:0xb504; op2val:0x33333332; immval:0x2; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0xb504, 0x33333332, 0x2, 3f, x1, 1016,0)

inst_275:
// rs1_val==46340 and rs2_val==1717986917, 
// opcode: bge, op1:x10; op2:x11; op1val:0xb504; op2val:0x66666665; immval:0xa; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0xb504, 0x66666665, 0xa, 1b, x1, 1020,0)

inst_276:
// rs1_val==46340 and rs2_val==46339, 
// opcode: bge, op1:x10; op2:x11; op1val:0xb504; op2val:0xb503; immval:0x4; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0xb504, 0xb503, 0x4, 3f, x1, 1024,0)

inst_277:
// rs1_val==46340 and rs2_val==1431655766, 
// opcode: bge, op1:x10; op2:x11; op1val:0xb504; op2val:0x55555556; immval:0x556; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0xb504, 0x55555556, 0x556, 1b, x1, 1028,0)

inst_278:
// rs1_val==46340 and rs2_val==-1431655765, 
// opcode: bge, op1:x10; op2:x11; op1val:0xb504; op2val:-0x55555555; immval:0x40; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0xb504, -0x55555555, 0x40, 3f, x1, 1032,0)

inst_279:
// rs1_val==46340 and rs2_val==6, 
// opcode: bge, op1:x10; op2:x11; op1val:0xb504; op2val:0x6; immval:0x6; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0xb504, 0x6, 0x6, 1b, x1, 1036,0)

inst_280:
// rs1_val==46340 and rs2_val==858993460, 
// opcode: bge, op1:x10; op2:x11; op1val:0xb504; op2val:0x33333334; immval:0x0; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0xb504, 0x33333334, 0x0, 1b, x1, 1040,0)

inst_281:
// rs1_val==46340 and rs2_val==1717986919, 
// opcode: bge, op1:x10; op2:x11; op1val:0xb504; op2val:0x66666667; immval:0x80; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0xb504, 0x66666667, 0x80, 3f, x1, 1044,0)

inst_282:
// rs1_val==46340 and rs2_val==-46339, 
// opcode: bge, op1:x10; op2:x11; op1val:0xb504; op2val:-0xb503; immval:0x8; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0xb504, -0xb503, 0x8, 3f, x1, 1048,0)

inst_283:
// rs1_val==46340 and rs2_val==46341, 
// opcode: bge, op1:x10; op2:x11; op1val:0xb504; op2val:0xb505; immval:0x20; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0xb504, 0xb505, 0x20, 3f, x1, 1052,0)

inst_284:
// rs1_val==2 and rs2_val==3, 
// opcode: bge, op1:x10; op2:x11; op1val:0x2; op2val:0x3; immval:0x0; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x2, 0x3, 0x0, 1b, x1, 1056,0)

inst_285:
// rs1_val==2 and rs2_val==1431655765, 
// opcode: bge, op1:x10; op2:x11; op1val:0x2; op2val:0x55555555; immval:0x20; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x2, 0x55555555, 0x20, 3f, x1, 1060,0)

inst_286:
// rs1_val==2 and rs2_val==-1431655766, 
// opcode: bge, op1:x10; op2:x11; op1val:0x2; op2val:-0x55555556; immval:0x6; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x2, -0x55555556, 0x6, 3f, x1, 1064,0)

inst_287:
// rs1_val==2 and rs2_val==5, 
// opcode: bge, op1:x10; op2:x11; op1val:0x2; op2val:0x5; immval:0x8; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x2, 0x5, 0x8, 3f, x1, 1068,0)

inst_288:
// rs1_val==2 and rs2_val==858993459, 
// opcode: bge, op1:x10; op2:x11; op1val:0x2; op2val:0x33333333; immval:0x8; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x2, 0x33333333, 0x8, 3f, x1, 1072,0)

inst_289:
// rs1_val==2 and rs2_val==1717986918, 
// opcode: bge, op1:x10; op2:x11; op1val:0x2; op2val:0x66666666; immval:0x0; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x2, 0x66666666, 0x0, 3f, x1, 1076,0)

inst_290:
// rs1_val==2 and rs2_val==-46340, 
// opcode: bge, op1:x10; op2:x11; op1val:0x2; op2val:-0xb504; immval:0x4; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x2, -0xb504, 0x4, 3f, x1, 1080,0)

inst_291:
// rs1_val==2 and rs2_val==46340, 
// opcode: bge, op1:x10; op2:x11; op1val:0x2; op2val:0xb504; immval:0x0; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x2, 0xb504, 0x0, 3f, x1, 1084,0)

inst_292:
// rs1_val==2 and rs2_val==2, 
// opcode: bge, op1:x10; op2:x11; op1val:0x2; op2val:0x2; immval:0x2; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x2, 0x2, 0x2, 3f, x1, 1088,0)

inst_293:
// rs1_val==2 and rs2_val==1431655764, 
// opcode: bge, op1:x10; op2:x11; op1val:0x2; op2val:0x55555554; immval:0x400; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x2, 0x55555554, 0x400, 1b, x1, 1092,0)

inst_294:
// rs1_val==2 and rs2_val==0, 
// opcode: bge, op1:x10; op2:x11; op1val:0x2; op2val:0x0; immval:0x6; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x2, 0x0, 0x6, 1b, x1, 1096,0)

inst_295:
// rs1_val==2 and rs2_val==4, 
// opcode: bge, op1:x10; op2:x11; op1val:0x2; op2val:0x4; immval:0x8; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x2, 0x4, 0x8, 1b, x1, 1100,0)

inst_296:
// rs1_val==2 and rs2_val==858993458, 
// opcode: bge, op1:x10; op2:x11; op1val:0x2; op2val:0x33333332; immval:0x20; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x2, 0x33333332, 0x20, 3f, x1, 1104,0)

inst_297:
// rs1_val==2 and rs2_val==1717986917, 
// opcode: bge, op1:x10; op2:x11; op1val:0x2; op2val:0x66666665; immval:0x200; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x2, 0x66666665, 0x200, 3f, x1, 1108,0)

inst_298:
// rs1_val==2 and rs2_val==46339, 
// opcode: bge, op1:x10; op2:x11; op1val:0x2; op2val:0xb503; immval:0x4; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x2, 0xb503, 0x4, 3f, x1, 1112,0)

inst_299:
// rs1_val==2 and rs2_val==1431655766, 
// opcode: bge, op1:x10; op2:x11; op1val:0x2; op2val:0x55555556; immval:0x200; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x2, 0x55555556, 0x200, 3f, x1, 1116,0)

inst_300:
// rs1_val==2 and rs2_val==-1431655765, 
// opcode: bge, op1:x10; op2:x11; op1val:0x2; op2val:-0x55555555; immval:0x556; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x2, -0x55555555, 0x556, 1b, x1, 1120,0)

inst_301:
// rs1_val==2 and rs2_val==6, 
// opcode: bge, op1:x10; op2:x11; op1val:0x2; op2val:0x6; immval:0x4; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x2, 0x6, 0x4, 1b, x1, 1124,0)

inst_302:
// rs1_val==2 and rs2_val==858993460, 
// opcode: bge, op1:x10; op2:x11; op1val:0x2; op2val:0x33333334; immval:0x0; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x2, 0x33333334, 0x0, 3f, x1, 1128,0)

inst_303:
// rs1_val==2 and rs2_val==1717986919, 
// opcode: bge, op1:x10; op2:x11; op1val:0x2; op2val:0x66666667; immval:0x2; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x2, 0x66666667, 0x2, 1b, x1, 1132,0)

inst_304:
// rs1_val==2 and rs2_val==-46339, 
// opcode: bge, op1:x10; op2:x11; op1val:0x2; op2val:-0xb503; immval:0x0; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x2, -0xb503, 0x0, 1b, x1, 1136,0)

inst_305:
// rs1_val==2 and rs2_val==46341, 
// opcode: bge, op1:x10; op2:x11; op1val:0x2; op2val:0xb505; immval:0x10; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x2, 0xb505, 0x10, 3f, x1, 1140,0)

inst_306:
// rs1_val==1431655764 and rs2_val==3, 
// opcode: bge, op1:x10; op2:x11; op1val:0x55555554; op2val:0x3; immval:0x100; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x55555554, 0x3, 0x100, 3f, x1, 1144,0)

inst_307:
// rs1_val==1431655764 and rs2_val==1431655765, 
// opcode: bge, op1:x10; op2:x11; op1val:0x55555554; op2val:0x55555555; immval:0x20; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x55555554, 0x55555555, 0x20, 3f, x1, 1148,0)

inst_308:
// rs1_val==1431655764 and rs2_val==-1431655766, 
// opcode: bge, op1:x10; op2:x11; op1val:0x55555554; op2val:-0x55555556; immval:0x6; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x55555554, -0x55555556, 0x6, 1b, x1, 1152,0)

inst_309:
// rs1_val==1431655764 and rs2_val==5, 
// opcode: bge, op1:x10; op2:x11; op1val:0x55555554; op2val:0x5; immval:0x2; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x55555554, 0x5, 0x2, 3f, x1, 1156,0)

inst_310:
// rs1_val==1431655764 and rs2_val==858993459, 
// opcode: bge, op1:x10; op2:x11; op1val:0x55555554; op2val:0x33333333; immval:0x8; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x55555554, 0x33333333, 0x8, 3f, x1, 1160,0)

inst_311:
// rs1_val==1431655764 and rs2_val==1717986918, 
// opcode: bge, op1:x10; op2:x11; op1val:0x55555554; op2val:0x66666666; immval:0xa; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x55555554, 0x66666666, 0xa, 1b, x1, 1164,0)

inst_312:
// rs1_val==1431655764 and rs2_val==-46340, 
// opcode: bge, op1:x10; op2:x11; op1val:0x55555554; op2val:-0xb504; immval:0x4; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x55555554, -0xb504, 0x4, 3f, x1, 1168,0)

inst_313:
// rs1_val==1431655764 and rs2_val==46340, 
// opcode: bge, op1:x10; op2:x11; op1val:0x55555554; op2val:0xb504; immval:0x2; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x55555554, 0xb504, 0x2, 1b, x1, 1172,0)

inst_314:
// rs1_val==1431655764 and rs2_val==2, 
// opcode: bge, op1:x10; op2:x11; op1val:0x55555554; op2val:0x2; immval:0x6; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x55555554, 0x2, 0x6, 3f, x1, 1176,0)

inst_315:
// rs1_val==1431655764 and rs2_val==1431655764, 
// opcode: bge, op1:x10; op2:x11; op1val:0x55555554; op2val:0x55555554; immval:0x0; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x55555554, 0x55555554, 0x0, 1b, x1, 1180,0)

inst_316:
// rs1_val==1431655764 and rs2_val==0, 
// opcode: bge, op1:x10; op2:x11; op1val:0x55555554; op2val:0x0; immval:0x2; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x55555554, 0x0, 0x2, 1b, x1, 1184,0)

inst_317:
// rs1_val==1431655764 and rs2_val==4, 
// opcode: bge, op1:x10; op2:x11; op1val:0x55555554; op2val:0x4; immval:0x0; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x55555554, 0x4, 0x0, 3f, x1, 1188,0)

inst_318:
// rs1_val==1431655764 and rs2_val==858993458, 
// opcode: bge, op1:x10; op2:x11; op1val:0x55555554; op2val:0x33333332; immval:0x400; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x55555554, 0x33333332, 0x400, 1b, x1, 1192,0)

inst_319:
// rs1_val==1431655764 and rs2_val==1717986917, 
// opcode: bge, op1:x10; op2:x11; op1val:0x55555554; op2val:0x66666665; immval:0x8; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x55555554, 0x66666665, 0x8, 3f, x1, 1196,0)

inst_320:
// rs1_val==1431655764 and rs2_val==46339, 
// opcode: bge, op1:x10; op2:x11; op1val:0x55555554; op2val:0xb503; immval:0x6; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x55555554, 0xb503, 0x6, 3f, x1, 1200,0)

inst_321:
// rs1_val==1431655764 and rs2_val==1431655766, 
// opcode: bge, op1:x10; op2:x11; op1val:0x55555554; op2val:0x55555556; immval:0x20; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x55555554, 0x55555556, 0x20, 3f, x1, 1204,0)

inst_322:
// rs1_val==1431655764 and rs2_val==-1431655765, 
// opcode: bge, op1:x10; op2:x11; op1val:0x55555554; op2val:-0x55555555; immval:0x8; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x55555554, -0x55555555, 0x8, 3f, x1, 1208,0)

inst_323:
// rs1_val==1431655764 and rs2_val==6, 
// opcode: bge, op1:x10; op2:x11; op1val:0x55555554; op2val:0x6; immval:0x400; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x55555554, 0x6, 0x400, 3f, x1, 1212,0)

inst_324:
// rs1_val==1431655764 and rs2_val==858993460, 
// opcode: bge, op1:x10; op2:x11; op1val:0x55555554; op2val:0x33333334; immval:0x400; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x55555554, 0x33333334, 0x400, 3f, x1, 1216,0)

inst_325:
// rs1_val==1431655764 and rs2_val==1717986919, 
// opcode: bge, op1:x10; op2:x11; op1val:0x55555554; op2val:0x66666667; immval:0x2; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x55555554, 0x66666667, 0x2, 3f, x1, 1220,0)

inst_326:
// rs1_val==1431655764 and rs2_val==-46339, 
// opcode: bge, op1:x10; op2:x11; op1val:0x55555554; op2val:-0xb503; immval:0x400; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x55555554, -0xb503, 0x400, 1b, x1, 1224,0)

inst_327:
// rs1_val==1431655764 and rs2_val==46341, 
// opcode: bge, op1:x10; op2:x11; op1val:0x55555554; op2val:0xb505; immval:0x0; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x55555554, 0xb505, 0x0, 3f, x1, 1228,0)

inst_328:
// rs1_val==0 and rs2_val==3, 
// opcode: bge, op1:x10; op2:x11; op1val:0x0; op2val:0x3; immval:0xa; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x0, 0x3, 0xa, 1b, x1, 1232,0)

inst_329:
// rs1_val==0 and rs2_val==1431655765, 
// opcode: bge, op1:x10; op2:x11; op1val:0x0; op2val:0x55555555; immval:0x556; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x0, 0x55555555, 0x556, 1b, x1, 1236,0)

inst_330:
// rs1_val==0 and rs2_val==-1431655766, 
// opcode: bge, op1:x10; op2:x11; op1val:0x0; op2val:-0x55555556; immval:0x8; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x0, -0x55555556, 0x8, 3f, x1, 1240,0)

inst_331:
// rs1_val==0 and rs2_val==5, 
// opcode: bge, op1:x10; op2:x11; op1val:0x0; op2val:0x5; immval:0x400; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x0, 0x5, 0x400, 1b, x1, 1244,0)

inst_332:
// rs1_val==0 and rs2_val==858993459, 
// opcode: bge, op1:x10; op2:x11; op1val:0x0; op2val:0x33333333; immval:0x2; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x0, 0x33333333, 0x2, 3f, x1, 1248,0)

inst_333:
// rs1_val==0 and rs2_val==1717986918, 
// opcode: bge, op1:x10; op2:x11; op1val:0x0; op2val:0x66666666; immval:0x4; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x0, 0x66666666, 0x4, 1b, x1, 1252,0)

inst_334:
// rs1_val==0 and rs2_val==-46340, 
// opcode: bge, op1:x10; op2:x11; op1val:0x0; op2val:-0xb504; immval:0x400; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x0, -0xb504, 0x400, 3f, x1, 1256,0)

inst_335:
// rs1_val==0 and rs2_val==46340, 
// opcode: bge, op1:x10; op2:x11; op1val:0x0; op2val:0xb504; immval:0x100; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x0, 0xb504, 0x100, 3f, x1, 1260,0)

inst_336:
// rs1_val==-1431655765 and rs2_val==858993460, 
// opcode: bge, op1:x10; op2:x11; op1val:-0x55555555; op2val:0x33333334; immval:0x8; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, -0x55555555, 0x33333334, 0x8, 3f, x1, 1264,0)

inst_337:
// rs1_val==-1431655765 and rs2_val==1717986919, 
// opcode: bge, op1:x10; op2:x11; op1val:-0x55555555; op2val:0x66666667; immval:0x2; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, -0x55555555, 0x66666667, 0x2, 1b, x1, 1268,0)

inst_338:
// rs1_val==-1431655765 and rs2_val==-46339, 
// opcode: bge, op1:x10; op2:x11; op1val:-0x55555555; op2val:-0xb503; immval:0x6; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, -0x55555555, -0xb503, 0x6, 1b, x1, 1272,0)

inst_339:
// rs1_val==-1431655765 and rs2_val==46341, 
// opcode: bge, op1:x10; op2:x11; op1val:-0x55555555; op2val:0xb505; immval:0x200; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, -0x55555555, 0xb505, 0x200, 3f, x1, 1276,0)

inst_340:
// rs1_val==6 and rs2_val==3, 
// opcode: bge, op1:x10; op2:x11; op1val:0x6; op2val:0x3; immval:0x0; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x6, 0x3, 0x0, 1b, x1, 1280,0)

inst_341:
// rs1_val==6 and rs2_val==1431655765, 
// opcode: bge, op1:x10; op2:x11; op1val:0x6; op2val:0x55555555; immval:0x40; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x6, 0x55555555, 0x40, 3f, x1, 1284,0)

inst_342:
// rs1_val==6 and rs2_val==-1431655766, 
// opcode: bge, op1:x10; op2:x11; op1val:0x6; op2val:-0x55555556; immval:0x100; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x6, -0x55555556, 0x100, 3f, x1, 1288,0)

inst_343:
// rs1_val==6 and rs2_val==5, 
// opcode: bge, op1:x10; op2:x11; op1val:0x6; op2val:0x5; immval:0x400; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x6, 0x5, 0x400, 3f, x1, 1292,0)

inst_344:
// rs1_val==6 and rs2_val==858993459, 
// opcode: bge, op1:x10; op2:x11; op1val:0x6; op2val:0x33333333; immval:0x10; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x6, 0x33333333, 0x10, 3f, x1, 1296,0)

inst_345:
// rs1_val==6 and rs2_val==1717986918, 
// opcode: bge, op1:x10; op2:x11; op1val:0x6; op2val:0x66666666; immval:0x200; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x6, 0x66666666, 0x200, 3f, x1, 1300,0)

inst_346:
// rs1_val==6 and rs2_val==-46340, 
// opcode: bge, op1:x10; op2:x11; op1val:0x6; op2val:-0xb504; immval:0x8; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x6, -0xb504, 0x8, 1b, x1, 1304,0)

inst_347:
// rs1_val==6 and rs2_val==46340, 
// opcode: bge, op1:x10; op2:x11; op1val:0x6; op2val:0xb504; immval:0x400; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x6, 0xb504, 0x400, 3f, x1, 1308,0)

inst_348:
// rs1_val==6 and rs2_val==2, 
// opcode: bge, op1:x10; op2:x11; op1val:0x6; op2val:0x2; immval:0xa; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x6, 0x2, 0xa, 1b, x1, 1312,0)

inst_349:
// rs1_val==6 and rs2_val==1431655764, 
// opcode: bge, op1:x10; op2:x11; op1val:0x6; op2val:0x55555554; immval:0x2; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x6, 0x55555554, 0x2, 1b, x1, 1316,0)

inst_350:
// rs1_val==6 and rs2_val==0, 
// opcode: bge, op1:x10; op2:x11; op1val:0x6; op2val:0x0; immval:0x8; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x6, 0x0, 0x8, 1b, x1, 1320,0)

inst_351:
// rs1_val==6 and rs2_val==4, 
// opcode: bge, op1:x10; op2:x11; op1val:0x6; op2val:0x4; immval:0x0; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x6, 0x4, 0x0, 3f, x1, 1324,0)

inst_352:
// rs1_val==6 and rs2_val==858993458, 
// opcode: bge, op1:x10; op2:x11; op1val:0x6; op2val:0x33333332; immval:0x100; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x6, 0x33333332, 0x100, 3f, x1, 1328,0)

inst_353:
// rs1_val==6 and rs2_val==1717986917, 
// opcode: bge, op1:x10; op2:x11; op1val:0x6; op2val:0x66666665; immval:0x6; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x6, 0x66666665, 0x6, 3f, x1, 1332,0)

inst_354:
// rs1_val==6 and rs2_val==46339, 
// opcode: bge, op1:x10; op2:x11; op1val:0x6; op2val:0xb503; immval:0x8; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x6, 0xb503, 0x8, 1b, x1, 1336,0)

inst_355:
// rs1_val==6 and rs2_val==1431655766, 
// opcode: bge, op1:x10; op2:x11; op1val:0x6; op2val:0x55555556; immval:0x200; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x6, 0x55555556, 0x200, 3f, x1, 1340,0)

inst_356:
// rs1_val==6 and rs2_val==-1431655765, 
// opcode: bge, op1:x10; op2:x11; op1val:0x6; op2val:-0x55555555; immval:0x4; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x6, -0x55555555, 0x4, 1b, x1, 1344,0)

inst_357:
// rs1_val==6 and rs2_val==6, 
// opcode: bge, op1:x10; op2:x11; op1val:0x6; op2val:0x6; immval:0x4; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x6, 0x6, 0x4, 3f, x1, 1348,0)

inst_358:
// rs1_val==6 and rs2_val==858993460, 
// opcode: bge, op1:x10; op2:x11; op1val:0x6; op2val:0x33333334; immval:0x20; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x6, 0x33333334, 0x20, 3f, x1, 1352,0)

inst_359:
// rs1_val==6 and rs2_val==1717986919, 
// opcode: bge, op1:x10; op2:x11; op1val:0x6; op2val:0x66666667; immval:0x4; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x6, 0x66666667, 0x4, 3f, x1, 1356,0)

inst_360:
// rs1_val==6 and rs2_val==-46339, 
// opcode: bge, op1:x10; op2:x11; op1val:0x6; op2val:-0xb503; immval:0x6; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x6, -0xb503, 0x6, 3f, x1, 1360,0)

inst_361:
// rs1_val==6 and rs2_val==46341, 
// opcode: bge, op1:x10; op2:x11; op1val:0x6; op2val:0xb505; immval:0xa; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x6, 0xb505, 0xa, 1b, x1, 1364,0)

inst_362:
// rs1_val==858993460 and rs2_val==3, 
// opcode: bge, op1:x10; op2:x11; op1val:0x33333334; op2val:0x3; immval:0x80; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x33333334, 0x3, 0x80, 3f, x1, 1368,0)

inst_363:
// rs1_val==858993460 and rs2_val==1431655765, 
// opcode: bge, op1:x10; op2:x11; op1val:0x33333334; op2val:0x55555555; immval:0x0; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x33333334, 0x55555555, 0x0, 3f, x1, 1372,0)

inst_364:
// rs1_val==858993460 and rs2_val==-1431655766, 
// opcode: bge, op1:x10; op2:x11; op1val:0x33333334; op2val:-0x55555556; immval:0x400; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x33333334, -0x55555556, 0x400, 3f, x1, 1376,0)

inst_365:
// rs1_val==858993460 and rs2_val==5, 
// opcode: bge, op1:x10; op2:x11; op1val:0x33333334; op2val:0x5; immval:0xa; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x33333334, 0x5, 0xa, 1b, x1, 1380,0)

inst_366:
// rs1_val==858993460 and rs2_val==858993459, 
// opcode: bge, op1:x10; op2:x11; op1val:0x33333334; op2val:0x33333333; immval:0x4; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x33333334, 0x33333333, 0x4, 3f, x1, 1384,0)

inst_367:
// rs1_val==858993460 and rs2_val==1717986918, 
// opcode: bge, op1:x10; op2:x11; op1val:0x33333334; op2val:0x66666666; immval:0x400; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x33333334, 0x66666666, 0x400, 3f, x1, 1388,0)

inst_368:
// rs1_val==858993460 and rs2_val==-46340, 
// opcode: bge, op1:x10; op2:x11; op1val:0x33333334; op2val:-0xb504; immval:0x400; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x33333334, -0xb504, 0x400, 1b, x1, 1392,0)

inst_369:
// rs1_val==858993460 and rs2_val==46340, 
// opcode: bge, op1:x10; op2:x11; op1val:0x33333334; op2val:0xb504; immval:0x20; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x33333334, 0xb504, 0x20, 3f, x1, 1396,0)

inst_370:
// rs1_val==858993460 and rs2_val==2, 
// opcode: bge, op1:x10; op2:x11; op1val:0x33333334; op2val:0x2; immval:0x6; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x33333334, 0x2, 0x6, 3f, x1, 1400,0)

inst_371:
// rs1_val==858993460 and rs2_val==1431655764, 
// opcode: bge, op1:x10; op2:x11; op1val:0x33333334; op2val:0x55555554; immval:0x40; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x33333334, 0x55555554, 0x40, 3f, x1, 1404,0)

inst_372:
// rs1_val==858993460 and rs2_val==0, 
// opcode: bge, op1:x10; op2:x11; op1val:0x33333334; op2val:0x0; immval:0x556; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x33333334, 0x0, 0x556, 1b, x1, 1408,0)

inst_373:
// rs1_val==858993460 and rs2_val==4, 
// opcode: bge, op1:x10; op2:x11; op1val:0x33333334; op2val:0x4; immval:0x10; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x33333334, 0x4, 0x10, 3f, x1, 1412,0)

inst_374:
// rs1_val==858993460 and rs2_val==858993458, 
// opcode: bge, op1:x10; op2:x11; op1val:0x33333334; op2val:0x33333332; immval:0x2; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x33333334, 0x33333332, 0x2, 1b, x1, 1416,0)

inst_375:
// rs1_val==858993460 and rs2_val==1717986917, 
// opcode: bge, op1:x10; op2:x11; op1val:0x33333334; op2val:0x66666665; immval:0x100; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x33333334, 0x66666665, 0x100, 3f, x1, 1420,0)

inst_376:
// rs1_val==858993460 and rs2_val==46339, 
// opcode: bge, op1:x10; op2:x11; op1val:0x33333334; op2val:0xb503; immval:0x400; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x33333334, 0xb503, 0x400, 3f, x1, 1424,0)

inst_377:
// rs1_val==858993460 and rs2_val==1431655766, 
// opcode: bge, op1:x10; op2:x11; op1val:0x33333334; op2val:0x55555556; immval:0x400; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x33333334, 0x55555556, 0x400, 3f, x1, 1428,0)

inst_378:
// rs1_val==858993460 and rs2_val==-1431655765, 
// opcode: bge, op1:x10; op2:x11; op1val:0x33333334; op2val:-0x55555555; immval:0x400; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x33333334, -0x55555555, 0x400, 1b, x1, 1432,0)

inst_379:
// rs1_val==858993460 and rs2_val==6, 
// opcode: bge, op1:x10; op2:x11; op1val:0x33333334; op2val:0x6; immval:0x10; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x33333334, 0x6, 0x10, 3f, x1, 1436,0)

inst_380:
// rs1_val==858993460 and rs2_val==858993460, 
// opcode: bge, op1:x10; op2:x11; op1val:0x33333334; op2val:0x33333334; immval:0x0; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x33333334, 0x33333334, 0x0, 3f, x1, 1440,0)

inst_381:
// rs1_val==858993460 and rs2_val==1717986919, 
// opcode: bge, op1:x10; op2:x11; op1val:0x33333334; op2val:0x66666667; immval:0x100; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x33333334, 0x66666667, 0x100, 3f, x1, 1444,0)

inst_382:
// rs1_val==858993460 and rs2_val==-46339, 
// opcode: bge, op1:x10; op2:x11; op1val:0x33333334; op2val:-0xb503; immval:0x10; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x33333334, -0xb503, 0x10, 3f, x1, 1448,0)

inst_383:
// rs1_val==858993460 and rs2_val==46341, 
// opcode: bge, op1:x10; op2:x11; op1val:0x33333334; op2val:0xb505; immval:0x4; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x33333334, 0xb505, 0x4, 3f, x1, 1452,0)

inst_384:
// rs1_val==1717986919 and rs2_val==3, 
// opcode: bge, op1:x10; op2:x11; op1val:0x66666667; op2val:0x3; immval:0x0; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x66666667, 0x3, 0x0, 3f, x1, 1456,0)

inst_385:
// rs1_val==1717986919 and rs2_val==1431655765, 
// opcode: bge, op1:x10; op2:x11; op1val:0x66666667; op2val:0x55555555; immval:0x8; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x66666667, 0x55555555, 0x8, 1b, x1, 1460,0)

inst_386:
// rs1_val==1717986919 and rs2_val==-1431655766, 
// opcode: bge, op1:x10; op2:x11; op1val:0x66666667; op2val:-0x55555556; immval:0x6; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x66666667, -0x55555556, 0x6, 3f, x1, 1464,0)

inst_387:
// rs1_val==1717986919 and rs2_val==5, 
// opcode: bge, op1:x10; op2:x11; op1val:0x66666667; op2val:0x5; immval:0x200; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x66666667, 0x5, 0x200, 3f, x1, 1468,0)

inst_388:
// rs1_val==1717986919 and rs2_val==858993459, 
// opcode: bge, op1:x10; op2:x11; op1val:0x66666667; op2val:0x33333333; immval:0x80; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x66666667, 0x33333333, 0x80, 3f, x1, 1472,0)

inst_389:
// rs1_val==1717986919 and rs2_val==1717986918, 
// opcode: bge, op1:x10; op2:x11; op1val:0x66666667; op2val:0x66666666; immval:0x10; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x66666667, 0x66666666, 0x10, 3f, x1, 1476,0)

inst_390:
// rs1_val==1717986919 and rs2_val==-46340, 
// opcode: bge, op1:x10; op2:x11; op1val:0x66666667; op2val:-0xb504; immval:0x200; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x66666667, -0xb504, 0x200, 3f, x1, 1480,0)

inst_391:
// rs1_val==1717986919 and rs2_val==46340, 
// opcode: bge, op1:x10; op2:x11; op1val:0x66666667; op2val:0xb504; immval:0xa; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x66666667, 0xb504, 0xa, 1b, x1, 1484,0)

inst_392:
// rs1_val==1717986919 and rs2_val==2, 
// opcode: bge, op1:x10; op2:x11; op1val:0x66666667; op2val:0x2; immval:0x0; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x66666667, 0x2, 0x0, 3f, x1, 1488,0)

inst_393:
// rs1_val==1717986919 and rs2_val==1431655764, 
// opcode: bge, op1:x10; op2:x11; op1val:0x66666667; op2val:0x55555554; immval:0x8; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x66666667, 0x55555554, 0x8, 1b, x1, 1492,0)

inst_394:
// rs1_val==1717986919 and rs2_val==0, 
// opcode: bge, op1:x10; op2:x11; op1val:0x66666667; op2val:0x0; immval:0x400; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x66666667, 0x0, 0x400, 3f, x1, 1496,0)

inst_395:
// rs1_val==1717986919 and rs2_val==4, 
// opcode: bge, op1:x10; op2:x11; op1val:0x66666667; op2val:0x4; immval:0x6; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x66666667, 0x4, 0x6, 1b, x1, 1500,0)

inst_396:
// rs1_val==1717986919 and rs2_val==858993458, 
// opcode: bge, op1:x10; op2:x11; op1val:0x66666667; op2val:0x33333332; immval:0x4; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x66666667, 0x33333332, 0x4, 1b, x1, 1504,0)

inst_397:
// rs1_val==1717986919 and rs2_val==1717986917, 
// opcode: bge, op1:x10; op2:x11; op1val:0x66666667; op2val:0x66666665; immval:0x200; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x66666667, 0x66666665, 0x200, 3f, x1, 1508,0)

inst_398:
// rs1_val==1717986919 and rs2_val==46339, 
// opcode: bge, op1:x10; op2:x11; op1val:0x66666667; op2val:0xb503; immval:0xa; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x66666667, 0xb503, 0xa, 1b, x1, 1512,0)

inst_399:
// rs1_val==1717986919 and rs2_val==1431655766, 
// opcode: bge, op1:x10; op2:x11; op1val:0x66666667; op2val:0x55555556; immval:0x10; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x66666667, 0x55555556, 0x10, 3f, x1, 1516,0)

inst_400:
// rs1_val==1717986919 and rs2_val==-1431655765, 
// opcode: bge, op1:x10; op2:x11; op1val:0x66666667; op2val:-0x55555555; immval:0x8; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x66666667, -0x55555555, 0x8, 1b, x1, 1520,0)

inst_401:
// rs1_val==1717986919 and rs2_val==6, 
// opcode: bge, op1:x10; op2:x11; op1val:0x66666667; op2val:0x6; immval:0x6; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x66666667, 0x6, 0x6, 1b, x1, 1524,0)

inst_402:
// rs1_val==1717986919 and rs2_val==858993460, 
// opcode: bge, op1:x10; op2:x11; op1val:0x66666667; op2val:0x33333334; immval:0x8; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x66666667, 0x33333334, 0x8, 3f, x1, 1528,0)

inst_403:
// rs1_val==1717986919 and rs2_val==1717986919, 
// opcode: bge, op1:x10; op2:x11; op1val:0x66666667; op2val:0x66666667; immval:0xa; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x66666667, 0x66666667, 0xa, 1b, x1, 1532,0)

inst_404:
// rs1_val==1717986919 and rs2_val==-46339, 
// opcode: bge, op1:x10; op2:x11; op1val:0x66666667; op2val:-0xb503; immval:0x80; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x66666667, -0xb503, 0x80, 3f, x1, 1536,0)

inst_405:
// rs1_val==1717986919 and rs2_val==46341, 
// opcode: bge, op1:x10; op2:x11; op1val:0x66666667; op2val:0xb505; immval:0x0; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x66666667, 0xb505, 0x0, 3f, x1, 1540,0)

inst_406:
// rs1_val==-46339 and rs2_val==3, 
// opcode: bge, op1:x10; op2:x11; op1val:-0xb503; op2val:0x3; immval:0x40; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, -0xb503, 0x3, 0x40, 3f, x1, 1544,0)

inst_407:
// rs1_val==-46339 and rs2_val==1431655765, 
// opcode: bge, op1:x10; op2:x11; op1val:-0xb503; op2val:0x55555555; immval:0x4; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, -0xb503, 0x55555555, 0x4, 1b, x1, 1548,0)

inst_408:
// rs1_val==-46339 and rs2_val==-1431655766, 
// opcode: bge, op1:x10; op2:x11; op1val:-0xb503; op2val:-0x55555556; immval:0x10; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, -0xb503, -0x55555556, 0x10, 3f, x1, 1552,0)

inst_409:
// rs1_val==-46339 and rs2_val==5, 
// opcode: bge, op1:x10; op2:x11; op1val:-0xb503; op2val:0x5; immval:0x10; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, -0xb503, 0x5, 0x10, 3f, x1, 1556,0)

inst_410:
// rs1_val==-46339 and rs2_val==858993459, 
// opcode: bge, op1:x10; op2:x11; op1val:-0xb503; op2val:0x33333333; immval:0x0; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, -0xb503, 0x33333333, 0x0, 3f, x1, 1560,0)

inst_411:
// rs1_val==-46339 and rs2_val==1717986918, 
// opcode: bge, op1:x10; op2:x11; op1val:-0xb503; op2val:0x66666666; immval:0x400; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, -0xb503, 0x66666666, 0x400, 1b, x1, 1564,0)

inst_412:
// rs1_val==-46339 and rs2_val==-46340, 
// opcode: bge, op1:x10; op2:x11; op1val:-0xb503; op2val:-0xb504; immval:0x2; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, -0xb503, -0xb504, 0x2, 3f, x1, 1568,0)

inst_413:
// rs1_val==-46339 and rs2_val==46340, 
// opcode: bge, op1:x10; op2:x11; op1val:-0xb503; op2val:0xb504; immval:0x4; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, -0xb503, 0xb504, 0x4, 3f, x1, 1572,0)

inst_414:
// rs1_val==-46339 and rs2_val==2, 
// opcode: bge, op1:x10; op2:x11; op1val:-0xb503; op2val:0x2; immval:0x40; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, -0xb503, 0x2, 0x40, 3f, x1, 1576,0)

inst_415:
// rs1_val==-46339 and rs2_val==1431655764, 
// opcode: bge, op1:x10; op2:x11; op1val:-0xb503; op2val:0x55555554; immval:0x2; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, -0xb503, 0x55555554, 0x2, 1b, x1, 1580,0)

inst_416:
// rs1_val==-46339 and rs2_val==0, 
// opcode: bge, op1:x10; op2:x11; op1val:-0xb503; op2val:0x0; immval:0x80; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, -0xb503, 0x0, 0x80, 3f, x1, 1584,0)

inst_417:
// rs1_val==-46339 and rs2_val==4, 
// opcode: bge, op1:x10; op2:x11; op1val:-0xb503; op2val:0x4; immval:0x556; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, -0xb503, 0x4, 0x556, 1b, x1, 1588,0)

inst_418:
// rs1_val==-46339 and rs2_val==858993458, 
// opcode: bge, op1:x10; op2:x11; op1val:-0xb503; op2val:0x33333332; immval:0xa; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, -0xb503, 0x33333332, 0xa, 1b, x1, 1592,0)

inst_419:
// rs1_val==-46339 and rs2_val==1717986917, 
// opcode: bge, op1:x10; op2:x11; op1val:-0xb503; op2val:0x66666665; immval:0x10; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, -0xb503, 0x66666665, 0x10, 3f, x1, 1596,0)

inst_420:
// rs1_val==-46339 and rs2_val==46339, 
// opcode: bge, op1:x10; op2:x11; op1val:-0xb503; op2val:0xb503; immval:0x0; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, -0xb503, 0xb503, 0x0, 3f, x1, 1600,0)

inst_421:
// rs1_val==-46339 and rs2_val==1431655766, 
// opcode: bge, op1:x10; op2:x11; op1val:-0xb503; op2val:0x55555556; immval:0x40; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, -0xb503, 0x55555556, 0x40, 3f, x1, 1604,0)

inst_422:
// rs1_val==-46339 and rs2_val==-1431655765, 
// opcode: bge, op1:x10; op2:x11; op1val:-0xb503; op2val:-0x55555555; immval:0x80; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, -0xb503, -0x55555555, 0x80, 3f, x1, 1608,0)

inst_423:
// rs1_val==-46339 and rs2_val==6, 
// opcode: bge, op1:x10; op2:x11; op1val:-0xb503; op2val:0x6; immval:0x400; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, -0xb503, 0x6, 0x400, 3f, x1, 1612,0)

inst_424:
// rs1_val==-46339 and rs2_val==858993460, 
// opcode: bge, op1:x10; op2:x11; op1val:-0xb503; op2val:0x33333334; immval:0x2; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, -0xb503, 0x33333334, 0x2, 1b, x1, 1616,0)

inst_425:
// rs1_val==-46339 and rs2_val==1717986919, 
// opcode: bge, op1:x10; op2:x11; op1val:-0xb503; op2val:0x66666667; immval:0x8; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, -0xb503, 0x66666667, 0x8, 3f, x1, 1620,0)

inst_426:
// rs1_val==-46339 and rs2_val==-46339, 
// opcode: bge, op1:x10; op2:x11; op1val:-0xb503; op2val:-0xb503; immval:0x20; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, -0xb503, -0xb503, 0x20, 3f, x1, 1624,0)

inst_427:
// rs1_val==-46339 and rs2_val==46341, 
// opcode: bge, op1:x10; op2:x11; op1val:-0xb503; op2val:0xb505; immval:0x0; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, -0xb503, 0xb505, 0x0, 1b, x1, 1628,0)

inst_428:
// rs1_val==46341 and rs2_val==3, 
// opcode: bge, op1:x10; op2:x11; op1val:0xb505; op2val:0x3; immval:0x2; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0xb505, 0x3, 0x2, 1b, x1, 1632,0)

inst_429:
// rs1_val==46341 and rs2_val==1431655765, 
// opcode: bge, op1:x10; op2:x11; op1val:0xb505; op2val:0x55555555; immval:0x2; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0xb505, 0x55555555, 0x2, 1b, x1, 1636,0)

inst_430:
// rs1_val==46341 and rs2_val==-1431655766, 
// opcode: bge, op1:x10; op2:x11; op1val:0xb505; op2val:-0x55555556; immval:0x2; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0xb505, -0x55555556, 0x2, 3f, x1, 1640,0)

inst_431:
// rs1_val==46341 and rs2_val==5, 
// opcode: bge, op1:x10; op2:x11; op1val:0xb505; op2val:0x5; immval:0x10; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0xb505, 0x5, 0x10, 3f, x1, 1644,0)

inst_432:
// rs1_val==46341 and rs2_val==858993459, 
// opcode: bge, op1:x10; op2:x11; op1val:0xb505; op2val:0x33333333; immval:0x4; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0xb505, 0x33333333, 0x4, 1b, x1, 1648,0)

inst_433:
// rs1_val==46341 and rs2_val==1717986918, 
// opcode: bge, op1:x10; op2:x11; op1val:0xb505; op2val:0x66666666; immval:0x2; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0xb505, 0x66666666, 0x2, 1b, x1, 1652,0)

inst_434:
// rs1_val==46341 and rs2_val==-46340, 
// opcode: bge, op1:x10; op2:x11; op1val:0xb505; op2val:-0xb504; immval:0x40; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0xb505, -0xb504, 0x40, 3f, x1, 1656,0)

inst_435:
// rs1_val==46341 and rs2_val==46340, 
// opcode: bge, op1:x10; op2:x11; op1val:0xb505; op2val:0xb504; immval:0x556; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0xb505, 0xb504, 0x556, 1b, x1, 1660,0)

inst_436:
// rs1_val==46341 and rs2_val==2, 
// opcode: bge, op1:x10; op2:x11; op1val:0xb505; op2val:0x2; immval:0x400; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0xb505, 0x2, 0x400, 3f, x1, 1664,0)

inst_437:
// rs1_val==46341 and rs2_val==1431655764, 
// opcode: bge, op1:x10; op2:x11; op1val:0xb505; op2val:0x55555554; immval:0x0; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0xb505, 0x55555554, 0x0, 3f, x1, 1668,0)

inst_438:
// rs1_val==46341 and rs2_val==0, 
// opcode: bge, op1:x10; op2:x11; op1val:0xb505; op2val:0x0; immval:0xa; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0xb505, 0x0, 0xa, 1b, x1, 1672,0)

inst_439:
// rs1_val==46341 and rs2_val==4, 
// opcode: bge, op1:x10; op2:x11; op1val:0xb505; op2val:0x4; immval:0x8; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0xb505, 0x4, 0x8, 3f, x1, 1676,0)

inst_440:
// rs1_val==46341 and rs2_val==858993458, 
// opcode: bge, op1:x10; op2:x11; op1val:0xb505; op2val:0x33333332; immval:0x100; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0xb505, 0x33333332, 0x100, 3f, x1, 1680,0)

inst_441:
// rs1_val==46341 and rs2_val==1717986917, 
// opcode: bge, op1:x10; op2:x11; op1val:0xb505; op2val:0x66666665; immval:0xa; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0xb505, 0x66666665, 0xa, 1b, x1, 1684,0)

inst_442:
// rs1_val==46341 and rs2_val==46339, 
// opcode: bge, op1:x10; op2:x11; op1val:0xb505; op2val:0xb503; immval:0x6; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0xb505, 0xb503, 0x6, 3f, x1, 1688,0)

inst_443:
// rs1_val==46341 and rs2_val==1431655766, 
// opcode: bge, op1:x10; op2:x11; op1val:0xb505; op2val:0x55555556; immval:0x10; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0xb505, 0x55555556, 0x10, 3f, x1, 1692,0)

inst_444:
// rs1_val==46341 and rs2_val==-1431655765, 
// opcode: bge, op1:x10; op2:x11; op1val:0xb505; op2val:-0x55555555; immval:0x4; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0xb505, -0x55555555, 0x4, 3f, x1, 1696,0)

inst_445:
// rs1_val==46341 and rs2_val==6, 
// opcode: bge, op1:x10; op2:x11; op1val:0xb505; op2val:0x6; immval:0x400; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0xb505, 0x6, 0x400, 3f, x1, 1700,0)

inst_446:
// rs1_val==46341 and rs2_val==858993460, 
// opcode: bge, op1:x10; op2:x11; op1val:0xb505; op2val:0x33333334; immval:0x2; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0xb505, 0x33333334, 0x2, 3f, x1, 1704,0)

inst_447:
// rs1_val==46341 and rs2_val==1717986919, 
// opcode: bge, op1:x10; op2:x11; op1val:0xb505; op2val:0x66666667; immval:0x400; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0xb505, 0x66666667, 0x400, 1b, x1, 1708,0)

inst_448:
// rs1_val==46341 and rs2_val==-46339, 
// opcode: bge, op1:x10; op2:x11; op1val:0xb505; op2val:-0xb503; immval:0x400; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0xb505, -0xb503, 0x400, 1b, x1, 1712,0)

inst_449:
// rs1_val==46341 and rs2_val==46341, 
// opcode: bge, op1:x10; op2:x11; op1val:0xb505; op2val:0xb505; immval:0x2; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0xb505, 0xb505, 0x2, 1b, x1, 1716,0)

inst_450:
// rs1_val==0 and rs2_val==2, 
// opcode: bge, op1:x10; op2:x11; op1val:0x0; op2val:0x2; immval:0x6; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x0, 0x2, 0x6, 1b, x1, 1720,0)

inst_451:
// rs1_val==0 and rs2_val==1431655764, 
// opcode: bge, op1:x10; op2:x11; op1val:0x0; op2val:0x55555554; immval:0x0; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x0, 0x55555554, 0x0, 1b, x1, 1724,0)

inst_452:
// rs1_val==0 and rs2_val==0, 
// opcode: bge, op1:x10; op2:x11; op1val:0x0; op2val:0x0; immval:0x40; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x0, 0x0, 0x40, 3f, x1, 1728,0)

inst_453:
// rs1_val==0 and rs2_val==4, 
// opcode: bge, op1:x10; op2:x11; op1val:0x0; op2val:0x4; immval:0x4; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x0, 0x4, 0x4, 3f, x1, 1732,0)

inst_454:
// rs1_val==0 and rs2_val==858993458, 
// opcode: bge, op1:x10; op2:x11; op1val:0x0; op2val:0x33333332; immval:0x200; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x0, 0x33333332, 0x200, 3f, x1, 1736,0)

inst_455:
// rs1_val==0 and rs2_val==1717986917, 
// opcode: bge, op1:x10; op2:x11; op1val:0x0; op2val:0x66666665; immval:0x6; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x0, 0x66666665, 0x6, 1b, x1, 1740,0)

inst_456:
// rs1_val==0 and rs2_val==46339, 
// opcode: bge, op1:x10; op2:x11; op1val:0x0; op2val:0xb503; immval:0x80; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x0, 0xb503, 0x80, 3f, x1, 1744,0)

inst_457:
// rs1_val==0 and rs2_val==1431655766, 
// opcode: bge, op1:x10; op2:x11; op1val:0x0; op2val:0x55555556; immval:0x2; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x0, 0x55555556, 0x2, 1b, x1, 1748,0)

inst_458:
// rs1_val==0 and rs2_val==-1431655765, 
// opcode: bge, op1:x10; op2:x11; op1val:0x0; op2val:-0x55555555; immval:0x20; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x0, -0x55555555, 0x20, 3f, x1, 1752,0)

inst_459:
// rs1_val==0 and rs2_val==6, 
// opcode: bge, op1:x10; op2:x11; op1val:0x0; op2val:0x6; immval:0x8; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x0, 0x6, 0x8, 1b, x1, 1756,0)

inst_460:
// rs1_val==0 and rs2_val==858993460, 
// opcode: bge, op1:x10; op2:x11; op1val:0x0; op2val:0x33333334; immval:0x200; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x0, 0x33333334, 0x200, 3f, x1, 1760,0)

inst_461:
// rs1_val==0 and rs2_val==1717986919, 
// opcode: bge, op1:x10; op2:x11; op1val:0x0; op2val:0x66666667; immval:0x0; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x0, 0x66666667, 0x0, 3f, x1, 1764,0)

inst_462:
// rs1_val==0 and rs2_val==-46339, 
// opcode: bge, op1:x10; op2:x11; op1val:0x0; op2val:-0xb503; immval:0x6; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x0, -0xb503, 0x6, 3f, x1, 1768,0)

inst_463:
// rs1_val==0 and rs2_val==46341, 
// opcode: bge, op1:x10; op2:x11; op1val:0x0; op2val:0xb505; immval:0x100; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x0, 0xb505, 0x100, 3f, x1, 1772,0)

inst_464:
// rs1_val==4 and rs2_val==3, 
// opcode: bge, op1:x10; op2:x11; op1val:0x4; op2val:0x3; immval:0x8; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x4, 0x3, 0x8, 3f, x1, 1776,0)

inst_465:
// rs1_val==4 and rs2_val==1431655765, 
// opcode: bge, op1:x10; op2:x11; op1val:0x4; op2val:0x55555555; immval:0x400; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x4, 0x55555555, 0x400, 1b, x1, 1780,0)

inst_466:
// rs1_val==4 and rs2_val==5, 
// opcode: bge, op1:x10; op2:x11; op1val:0x4; op2val:0x5; immval:0x80; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x4, 0x5, 0x80, 3f, x1, 1784,0)

inst_467:
// rs1_val==4 and rs2_val==858993459, 
// opcode: bge, op1:x10; op2:x11; op1val:0x4; op2val:0x33333333; immval:0x0; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x4, 0x33333333, 0x0, 3f, x1, 1788,0)

inst_468:
// rs1_val==4 and rs2_val==1717986918, 
// opcode: bge, op1:x10; op2:x11; op1val:0x4; op2val:0x66666666; immval:0x8; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x4, 0x66666666, 0x8, 1b, x1, 1792,0)

inst_469:
// rs1_val==4 and rs2_val==-46340, 
// opcode: bge, op1:x10; op2:x11; op1val:0x4; op2val:-0xb504; immval:0x8; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x4, -0xb504, 0x8, 3f, x1, 1796,0)

inst_470:
// rs1_val==4 and rs2_val==46340, 
// opcode: bge, op1:x10; op2:x11; op1val:0x4; op2val:0xb504; immval:0x10; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x4, 0xb504, 0x10, 3f, x1, 1800,0)

inst_471:
// rs1_val==4 and rs2_val==2, 
// opcode: bge, op1:x10; op2:x11; op1val:0x4; op2val:0x2; immval:0x400; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x4, 0x2, 0x400, 1b, x1, 1804,0)

inst_472:
// rs1_val==4 and rs2_val==1431655764, 
// opcode: bge, op1:x10; op2:x11; op1val:0x4; op2val:0x55555554; immval:0x556; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x4, 0x55555554, 0x556, 1b, x1, 1808,0)

inst_473:
// rs1_val==4 and rs2_val==0, 
// opcode: bge, op1:x10; op2:x11; op1val:0x4; op2val:0x0; immval:0xa; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x4, 0x0, 0xa, 1b, x1, 1812,0)

inst_474:
// rs1_val==4 and rs2_val==4, 
// opcode: bge, op1:x10; op2:x11; op1val:0x4; op2val:0x4; immval:0x400; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x4, 0x4, 0x400, 3f, x1, 1816,0)

inst_475:
// rs1_val==4 and rs2_val==858993458, 
// opcode: bge, op1:x10; op2:x11; op1val:0x4; op2val:0x33333332; immval:0x2; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x4, 0x33333332, 0x2, 3f, x1, 1820,0)

inst_476:
// rs1_val==4 and rs2_val==1717986917, 
// opcode: bge, op1:x10; op2:x11; op1val:0x4; op2val:0x66666665; immval:0x400; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x4, 0x66666665, 0x400, 3f, x1, 1824,0)

inst_477:
// rs1_val==4 and rs2_val==46339, 
// opcode: bge, op1:x10; op2:x11; op1val:0x4; op2val:0xb503; immval:0x80; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x4, 0xb503, 0x80, 3f, x1, 1828,0)

inst_478:
// rs1_val==4 and rs2_val==1431655766, 
// opcode: bge, op1:x10; op2:x11; op1val:0x4; op2val:0x55555556; immval:0x2; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x4, 0x55555556, 0x2, 1b, x1, 1832,0)

inst_479:
// rs1_val==4 and rs2_val==-1431655765, 
// opcode: bge, op1:x10; op2:x11; op1val:0x4; op2val:-0x55555555; immval:0x556; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x4, -0x55555555, 0x556, 1b, x1, 1836,0)

inst_480:
// rs1_val==4 and rs2_val==6, 
// opcode: bge, op1:x10; op2:x11; op1val:0x4; op2val:0x6; immval:0x556; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x4, 0x6, 0x556, 1b, x1, 1840,0)

inst_481:
// rs1_val==4 and rs2_val==858993460, 
// opcode: bge, op1:x10; op2:x11; op1val:0x4; op2val:0x33333334; immval:0x200; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x4, 0x33333334, 0x200, 3f, x1, 1844,0)

inst_482:
// rs1_val==4 and rs2_val==1717986919, 
// opcode: bge, op1:x10; op2:x11; op1val:0x4; op2val:0x66666667; immval:0x80; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x4, 0x66666667, 0x80, 3f, x1, 1848,0)

inst_483:
// rs1_val==4 and rs2_val==-46339, 
// opcode: bge, op1:x10; op2:x11; op1val:0x4; op2val:-0xb503; immval:0x4; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x4, -0xb503, 0x4, 1b, x1, 1852,0)

inst_484:
// rs1_val==4 and rs2_val==46341, 
// opcode: bge, op1:x10; op2:x11; op1val:0x4; op2val:0xb505; immval:0x556; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x4, 0xb505, 0x556, 1b, x1, 1856,0)

inst_485:
// rs1_val==858993458 and rs2_val==3, 
// opcode: bge, op1:x10; op2:x11; op1val:0x33333332; op2val:0x3; immval:0x556; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x33333332, 0x3, 0x556, 1b, x1, 1860,0)

inst_486:
// rs1_val==858993458 and rs2_val==1431655765, 
// opcode: bge, op1:x10; op2:x11; op1val:0x33333332; op2val:0x55555555; immval:0x0; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x33333332, 0x55555555, 0x0, 3f, x1, 1864,0)

inst_487:
// rs1_val==858993458 and rs2_val==-1431655766, 
// opcode: bge, op1:x10; op2:x11; op1val:0x33333332; op2val:-0x55555556; immval:0x80; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x33333332, -0x55555556, 0x80, 3f, x1, 1868,0)

inst_488:
// rs1_val==858993458 and rs2_val==5, 
// opcode: bge, op1:x10; op2:x11; op1val:0x33333332; op2val:0x5; immval:0x20; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x33333332, 0x5, 0x20, 3f, x1, 1872,0)

inst_489:
// rs1_val==858993458 and rs2_val==858993459, 
// opcode: bge, op1:x10; op2:x11; op1val:0x33333332; op2val:0x33333333; immval:0x400; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x33333332, 0x33333333, 0x400, 3f, x1, 1876,0)

inst_490:
// rs1_val==858993458 and rs2_val==1717986918, 
// opcode: bge, op1:x10; op2:x11; op1val:0x33333332; op2val:0x66666666; immval:0x2; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x33333332, 0x66666666, 0x2, 3f, x1, 1880,0)

inst_491:
// rs1_val==858993458 and rs2_val==-46340, 
// opcode: bge, op1:x10; op2:x11; op1val:0x33333332; op2val:-0xb504; immval:0x20; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x33333332, -0xb504, 0x20, 3f, x1, 1884,0)

inst_492:
// rs1_val==858993458 and rs2_val==46340, 
// opcode: bge, op1:x10; op2:x11; op1val:0x33333332; op2val:0xb504; immval:0x0; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x33333332, 0xb504, 0x0, 1b, x1, 1888,0)

inst_493:
// rs1_val==858993458 and rs2_val==2, 
// opcode: bge, op1:x10; op2:x11; op1val:0x33333332; op2val:0x2; immval:0x2; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x33333332, 0x2, 0x2, 1b, x1, 1892,0)

inst_494:
// rs1_val==858993458 and rs2_val==1431655764, 
// opcode: bge, op1:x10; op2:x11; op1val:0x33333332; op2val:0x55555554; immval:0x556; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x33333332, 0x55555554, 0x556, 1b, x1, 1896,0)

inst_495:
// rs1_val==858993458 and rs2_val==0, 
// opcode: bge, op1:x10; op2:x11; op1val:0x33333332; op2val:0x0; immval:0x80; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x33333332, 0x0, 0x80, 3f, x1, 1900,0)

inst_496:
// rs1_val==858993458 and rs2_val==4, 
// opcode: bge, op1:x10; op2:x11; op1val:0x33333332; op2val:0x4; immval:0x10; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x33333332, 0x4, 0x10, 3f, x1, 1904,0)

inst_497:
// rs1_val==858993458 and rs2_val==858993458, 
// opcode: bge, op1:x10; op2:x11; op1val:0x33333332; op2val:0x33333332; immval:0x6; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x33333332, 0x33333332, 0x6, 1b, x1, 1908,0)

inst_498:
// rs1_val==858993458 and rs2_val==1717986917, 
// opcode: bge, op1:x10; op2:x11; op1val:0x33333332; op2val:0x66666665; immval:0x400; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x33333332, 0x66666665, 0x400, 3f, x1, 1912,0)

inst_499:
// rs1_val==858993458 and rs2_val==46339, 
// opcode: bge, op1:x10; op2:x11; op1val:0x33333332; op2val:0xb503; immval:0xa; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x33333332, 0xb503, 0xa, 1b, x1, 1916,0)

inst_500:
// rs1_val==858993458 and rs2_val==1431655766, 
// opcode: bge, op1:x10; op2:x11; op1val:0x33333332; op2val:0x55555556; immval:0x556; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x33333332, 0x55555556, 0x556, 1b, x1, 1920,0)

inst_501:
// rs1_val==858993458 and rs2_val==-1431655765, 
// opcode: bge, op1:x10; op2:x11; op1val:0x33333332; op2val:-0x55555555; immval:0x4; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x33333332, -0x55555555, 0x4, 1b, x1, 1924,0)

inst_502:
// rs1_val==858993458 and rs2_val==6, 
// opcode: bge, op1:x10; op2:x11; op1val:0x33333332; op2val:0x6; immval:0x6; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x33333332, 0x6, 0x6, 1b, x1, 1928,0)

inst_503:
// rs1_val==858993458 and rs2_val==858993460, 
// opcode: bge, op1:x10; op2:x11; op1val:0x33333332; op2val:0x33333334; immval:0x2; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x33333332, 0x33333334, 0x2, 3f, x1, 1932,0)

inst_504:
// rs1_val==858993458 and rs2_val==1717986919, 
// opcode: bge, op1:x10; op2:x11; op1val:0x33333332; op2val:0x66666667; immval:0x2; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x33333332, 0x66666667, 0x2, 1b, x1, 1936,0)

inst_505:
// rs1_val==858993458 and rs2_val==-46339, 
// opcode: bge, op1:x10; op2:x11; op1val:0x33333332; op2val:-0xb503; immval:0x6; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x33333332, -0xb503, 0x6, 3f, x1, 1940,0)

inst_506:
// rs1_val==858993458 and rs2_val==46341, 
// opcode: bge, op1:x10; op2:x11; op1val:0x33333332; op2val:0xb505; immval:0x400; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x33333332, 0xb505, 0x400, 1b, x1, 1944,0)

inst_507:
// rs1_val==1717986917 and rs2_val==3, 
// opcode: bge, op1:x10; op2:x11; op1val:0x66666665; op2val:0x3; immval:0x4; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x66666665, 0x3, 0x4, 1b, x1, 1948,0)

inst_508:
// rs1_val==1717986917 and rs2_val==1431655765, 
// opcode: bge, op1:x10; op2:x11; op1val:0x66666665; op2val:0x55555555; immval:0x0; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x66666665, 0x55555555, 0x0, 3f, x1, 1952,0)

inst_509:
// rs1_val==1717986917 and rs2_val==-1431655766, 
// opcode: bge, op1:x10; op2:x11; op1val:0x66666665; op2val:-0x55555556; immval:0x4; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x66666665, -0x55555556, 0x4, 1b, x1, 1956,0)

inst_510:
// rs1_val==1717986917 and rs2_val==5, 
// opcode: bge, op1:x10; op2:x11; op1val:0x66666665; op2val:0x5; immval:0x4; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x66666665, 0x5, 0x4, 1b, x1, 1960,0)

inst_511:
// rs1_val==1717986917 and rs2_val==858993459, 
// opcode: bge, op1:x10; op2:x11; op1val:0x66666665; op2val:0x33333333; immval:0x2; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x66666665, 0x33333333, 0x2, 1b, x1, 1964,0)

inst_512:
// rs1_val==1717986917 and rs2_val==1717986918, 
// opcode: bge, op1:x10; op2:x11; op1val:0x66666665; op2val:0x66666666; immval:0x4; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x66666665, 0x66666666, 0x4, 1b, x1, 1968,0)

inst_513:
// rs1_val==1717986917 and rs2_val==-46340, 
// opcode: bge, op1:x10; op2:x11; op1val:0x66666665; op2val:-0xb504; immval:0x6; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x66666665, -0xb504, 0x6, 3f, x1, 1972,0)

inst_514:
// rs1_val==1717986917 and rs2_val==46340, 
// opcode: bge, op1:x10; op2:x11; op1val:0x66666665; op2val:0xb504; immval:0x200; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x66666665, 0xb504, 0x200, 3f, x1, 1976,0)

inst_515:
// rs1_val==1717986917 and rs2_val==2, 
// opcode: bge, op1:x10; op2:x11; op1val:0x66666665; op2val:0x2; immval:0x100; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x66666665, 0x2, 0x100, 3f, x1, 1980,0)

inst_516:
// rs1_val==1717986917 and rs2_val==1431655764, 
// opcode: bge, op1:x10; op2:x11; op1val:0x66666665; op2val:0x55555554; immval:0x6; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x66666665, 0x55555554, 0x6, 3f, x1, 1984,0)

inst_517:
// rs1_val==1717986917 and rs2_val==0, 
// opcode: bge, op1:x10; op2:x11; op1val:0x66666665; op2val:0x0; immval:0x4; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x66666665, 0x0, 0x4, 3f, x1, 1988,0)

inst_518:
// rs1_val==1717986917 and rs2_val==4, 
// opcode: bge, op1:x10; op2:x11; op1val:0x66666665; op2val:0x4; immval:0x2; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x66666665, 0x4, 0x2, 1b, x1, 1992,0)

inst_519:
// rs1_val==1717986917 and rs2_val==858993458, 
// opcode: bge, op1:x10; op2:x11; op1val:0x66666665; op2val:0x33333332; immval:0x0; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x66666665, 0x33333332, 0x0, 1b, x1, 1996,0)

inst_520:
// rs1_val==1717986917 and rs2_val==1717986917, 
// opcode: bge, op1:x10; op2:x11; op1val:0x66666665; op2val:0x66666665; immval:0x0; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x66666665, 0x66666665, 0x0, 3f, x1, 2000,0)

inst_521:
// rs1_val==1717986917 and rs2_val==46339, 
// opcode: bge, op1:x10; op2:x11; op1val:0x66666665; op2val:0xb503; immval:0x4; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x66666665, 0xb503, 0x4, 3f, x1, 2004,0)

inst_522:
// rs1_val==1717986917 and rs2_val==1431655766, 
// opcode: bge, op1:x10; op2:x11; op1val:0x66666665; op2val:0x55555556; immval:0x6; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x66666665, 0x55555556, 0x6, 3f, x1, 2008,0)

inst_523:
// rs1_val==1717986917 and rs2_val==-1431655765, 
// opcode: bge, op1:x10; op2:x11; op1val:0x66666665; op2val:-0x55555555; immval:0x4; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x66666665, -0x55555555, 0x4, 1b, x1, 2012,0)

inst_524:
// rs1_val==1717986917 and rs2_val==6, 
// opcode: bge, op1:x10; op2:x11; op1val:0x66666665; op2val:0x6; immval:0x4; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x66666665, 0x6, 0x4, 3f, x1, 2016,0)

inst_525:
// rs1_val==1717986917 and rs2_val==858993460, 
// opcode: bge, op1:x10; op2:x11; op1val:0x66666665; op2val:0x33333334; immval:0x400; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x66666665, 0x33333334, 0x400, 1b, x1, 2020,0)

inst_526:
// rs1_val==1717986917 and rs2_val==1717986919, 
// opcode: bge, op1:x10; op2:x11; op1val:0x66666665; op2val:0x66666667; immval:0x6; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x66666665, 0x66666667, 0x6, 1b, x1, 2024,0)

inst_527:
// rs1_val==1717986917 and rs2_val==-46339, 
// opcode: bge, op1:x10; op2:x11; op1val:0x66666665; op2val:-0xb503; immval:0x80; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x66666665, -0xb503, 0x80, 3f, x1, 2028,0)

inst_528:
// rs1_val==1717986917 and rs2_val==46341, 
// opcode: bge, op1:x10; op2:x11; op1val:0x66666665; op2val:0xb505; immval:0x10; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x66666665, 0xb505, 0x10, 3f, x1, 2032,0)

inst_529:
// rs1_val==46339 and rs2_val==3, 
// opcode: bge, op1:x10; op2:x11; op1val:0xb503; op2val:0x3; immval:0x4; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0xb503, 0x3, 0x4, 3f, x1, 2036,0)

inst_530:
// rs1_val==46339 and rs2_val==1431655765, 
// opcode: bge, op1:x10; op2:x11; op1val:0xb503; op2val:0x55555555; immval:0x20; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0xb503, 0x55555555, 0x20, 3f, x1, 2040,0)

inst_531:
// rs1_val==46339 and rs2_val==-1431655766, 
// opcode: bge, op1:x10; op2:x11; op1val:0xb503; op2val:-0x55555556; immval:0x80; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0xb503, -0x55555556, 0x80, 3f, x1, 2044,0)
RVTEST_SIGBASE( x1,signature_x1_1)

inst_532:
// rs1_val==46339 and rs2_val==5, 
// opcode: bge, op1:x10; op2:x11; op1val:0xb503; op2val:0x5; immval:0x4; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0xb503, 0x5, 0x4, 3f, x1, 0,0)

inst_533:
// rs1_val==46339 and rs2_val==858993459, 
// opcode: bge, op1:x10; op2:x11; op1val:0xb503; op2val:0x33333333; immval:0x200; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0xb503, 0x33333333, 0x200, 3f, x1, 4,0)

inst_534:
// rs1_val==46339 and rs2_val==1717986918, 
// opcode: bge, op1:x10; op2:x11; op1val:0xb503; op2val:0x66666666; immval:0x400; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0xb503, 0x66666666, 0x400, 3f, x1, 8,0)

inst_535:
// rs1_val==46339 and rs2_val==-46340, 
// opcode: bge, op1:x10; op2:x11; op1val:0xb503; op2val:-0xb504; immval:0x100; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0xb503, -0xb504, 0x100, 3f, x1, 12,0)

inst_536:
// rs1_val==46339 and rs2_val==46340, 
// opcode: bge, op1:x10; op2:x11; op1val:0xb503; op2val:0xb504; immval:0x80; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0xb503, 0xb504, 0x80, 3f, x1, 16,0)

inst_537:
// rs1_val==46339 and rs2_val==2, 
// opcode: bge, op1:x10; op2:x11; op1val:0xb503; op2val:0x2; immval:0x40; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0xb503, 0x2, 0x40, 3f, x1, 20,0)

inst_538:
// rs1_val==46339 and rs2_val==1431655764, 
// opcode: bge, op1:x10; op2:x11; op1val:0xb503; op2val:0x55555554; immval:0x2; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0xb503, 0x55555554, 0x2, 3f, x1, 24,0)

inst_539:
// rs1_val==46339 and rs2_val==0, 
// opcode: bge, op1:x10; op2:x11; op1val:0xb503; op2val:0x0; immval:0x10; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0xb503, 0x0, 0x10, 3f, x1, 28,0)

inst_540:
// rs1_val==46339 and rs2_val==4, 
// opcode: bge, op1:x10; op2:x11; op1val:0xb503; op2val:0x4; immval:0x556; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0xb503, 0x4, 0x556, 1b, x1, 32,0)

inst_541:
// rs1_val==46339 and rs2_val==858993458, 
// opcode: bge, op1:x10; op2:x11; op1val:0xb503; op2val:0x33333332; immval:0x10; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0xb503, 0x33333332, 0x10, 3f, x1, 36,0)

inst_542:
// rs1_val==46339 and rs2_val==1717986917, 
// opcode: bge, op1:x10; op2:x11; op1val:0xb503; op2val:0x66666665; immval:0x10; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0xb503, 0x66666665, 0x10, 3f, x1, 40,0)

inst_543:
// rs1_val==46339 and rs2_val==46339, 
// opcode: bge, op1:x10; op2:x11; op1val:0xb503; op2val:0xb503; immval:0x2; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0xb503, 0xb503, 0x2, 1b, x1, 44,0)

inst_544:
// rs1_val==46339 and rs2_val==1431655766, 
// opcode: bge, op1:x10; op2:x11; op1val:0xb503; op2val:0x55555556; immval:0x0; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0xb503, 0x55555556, 0x0, 3f, x1, 48,0)

inst_545:
// rs1_val==46339 and rs2_val==-1431655765, 
// opcode: bge, op1:x10; op2:x11; op1val:0xb503; op2val:-0x55555555; immval:0x4; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0xb503, -0x55555555, 0x4, 3f, x1, 52,0)

inst_546:
// rs1_val==46339 and rs2_val==6, 
// opcode: bge, op1:x10; op2:x11; op1val:0xb503; op2val:0x6; immval:0x8; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0xb503, 0x6, 0x8, 3f, x1, 56,0)

inst_547:
// rs1_val==46339 and rs2_val==858993460, 
// opcode: bge, op1:x10; op2:x11; op1val:0xb503; op2val:0x33333334; immval:0x400; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0xb503, 0x33333334, 0x400, 3f, x1, 60,0)

inst_548:
// rs1_val==46339 and rs2_val==1717986919, 
// opcode: bge, op1:x10; op2:x11; op1val:0xb503; op2val:0x66666667; immval:0x4; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0xb503, 0x66666667, 0x4, 3f, x1, 64,0)

inst_549:
// rs1_val==46339 and rs2_val==-46339, 
// opcode: bge, op1:x10; op2:x11; op1val:0xb503; op2val:-0xb503; immval:0x40; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0xb503, -0xb503, 0x40, 3f, x1, 68,0)

inst_550:
// rs1_val==46339 and rs2_val==46341, 
// opcode: bge, op1:x10; op2:x11; op1val:0xb503; op2val:0xb505; immval:0x400; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0xb503, 0xb505, 0x400, 3f, x1, 72,0)

inst_551:
// rs1_val==1431655766 and rs2_val==3, 
// opcode: bge, op1:x10; op2:x11; op1val:0x55555556; op2val:0x3; immval:0xa; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x55555556, 0x3, 0xa, 1b, x1, 76,0)

inst_552:
// rs1_val==1431655766 and rs2_val==1431655765, 
// opcode: bge, op1:x10; op2:x11; op1val:0x55555556; op2val:0x55555555; immval:0x2; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x55555556, 0x55555555, 0x2, 1b, x1, 80,0)

inst_553:
// rs1_val==1431655766 and rs2_val==-1431655766, 
// opcode: bge, op1:x10; op2:x11; op1val:0x55555556; op2val:-0x55555556; immval:0x20; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x55555556, -0x55555556, 0x20, 3f, x1, 84,0)

inst_554:
// rs1_val==1431655766 and rs2_val==5, 
// opcode: bge, op1:x10; op2:x11; op1val:0x55555556; op2val:0x5; immval:0x80; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x55555556, 0x5, 0x80, 3f, x1, 88,0)

inst_555:
// rs1_val==1431655766 and rs2_val==858993459, 
// opcode: bge, op1:x10; op2:x11; op1val:0x55555556; op2val:0x33333333; immval:0x8; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x55555556, 0x33333333, 0x8, 1b, x1, 92,0)

inst_556:
// rs1_val==1431655766 and rs2_val==1717986918, 
// opcode: bge, op1:x10; op2:x11; op1val:0x55555556; op2val:0x66666666; immval:0x8; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x55555556, 0x66666666, 0x8, 1b, x1, 96,0)

inst_557:
// rs1_val==1431655766 and rs2_val==-46340, 
// opcode: bge, op1:x10; op2:x11; op1val:0x55555556; op2val:-0xb504; immval:0x200; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x55555556, -0xb504, 0x200, 3f, x1, 100,0)

inst_558:
// rs1_val==1431655766 and rs2_val==46340, 
// opcode: bge, op1:x10; op2:x11; op1val:0x55555556; op2val:0xb504; immval:0x2; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x55555556, 0xb504, 0x2, 1b, x1, 104,0)

inst_559:
// rs1_val==1431655766 and rs2_val==2, 
// opcode: bge, op1:x10; op2:x11; op1val:0x55555556; op2val:0x2; immval:0x6; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x55555556, 0x2, 0x6, 3f, x1, 108,0)

inst_560:
// rs1_val==1431655766 and rs2_val==1431655764, 
// opcode: bge, op1:x10; op2:x11; op1val:0x55555556; op2val:0x55555554; immval:0x2; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x55555556, 0x55555554, 0x2, 1b, x1, 112,0)

inst_561:
// rs1_val==1431655766 and rs2_val==0, 
// opcode: bge, op1:x10; op2:x11; op1val:0x55555556; op2val:0x0; immval:0x2; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x55555556, 0x0, 0x2, 3f, x1, 116,0)

inst_562:
// rs1_val==1431655766 and rs2_val==4, 
// opcode: bge, op1:x10; op2:x11; op1val:0x55555556; op2val:0x4; immval:0x80; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x55555556, 0x4, 0x80, 3f, x1, 120,0)

inst_563:
// rs1_val==1431655766 and rs2_val==858993458, 
// opcode: bge, op1:x10; op2:x11; op1val:0x55555556; op2val:0x33333332; immval:0x400; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x55555556, 0x33333332, 0x400, 3f, x1, 124,0)

inst_564:
// rs1_val==1431655766 and rs2_val==1717986917, 
// opcode: bge, op1:x10; op2:x11; op1val:0x55555556; op2val:0x66666665; immval:0x2; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x55555556, 0x66666665, 0x2, 3f, x1, 128,0)

inst_565:
// rs1_val==1431655766 and rs2_val==46339, 
// opcode: bge, op1:x10; op2:x11; op1val:0x55555556; op2val:0xb503; immval:0x8; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x55555556, 0xb503, 0x8, 3f, x1, 132,0)

inst_566:
// rs1_val==1431655766 and rs2_val==1431655766, 
// opcode: bge, op1:x10; op2:x11; op1val:0x55555556; op2val:0x55555556; immval:0x20; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x55555556, 0x55555556, 0x20, 3f, x1, 136,0)

inst_567:
// rs1_val==1431655766 and rs2_val==-1431655765, 
// opcode: bge, op1:x10; op2:x11; op1val:0x55555556; op2val:-0x55555555; immval:0x100; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x55555556, -0x55555555, 0x100, 3f, x1, 140,0)

inst_568:
// rs1_val==1431655766 and rs2_val==6, 
// opcode: bge, op1:x10; op2:x11; op1val:0x55555556; op2val:0x6; immval:0x20; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x55555556, 0x6, 0x20, 3f, x1, 144,0)

inst_569:
// rs1_val==1431655766 and rs2_val==858993460, 
// opcode: bge, op1:x10; op2:x11; op1val:0x55555556; op2val:0x33333334; immval:0x556; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x55555556, 0x33333334, 0x556, 1b, x1, 148,0)

inst_570:
// rs1_val==1431655766 and rs2_val==1717986919, 
// opcode: bge, op1:x10; op2:x11; op1val:0x55555556; op2val:0x66666667; immval:0x0; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x55555556, 0x66666667, 0x0, 3f, x1, 152,0)

inst_571:
// rs1_val==1431655766 and rs2_val==-46339, 
// opcode: bge, op1:x10; op2:x11; op1val:0x55555556; op2val:-0xb503; immval:0x400; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x55555556, -0xb503, 0x400, 3f, x1, 156,0)

inst_572:
// rs1_val==1431655766 and rs2_val==46341, 
// opcode: bge, op1:x10; op2:x11; op1val:0x55555556; op2val:0xb505; immval:0x556; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x55555556, 0xb505, 0x556, 1b, x1, 160,0)

inst_573:
// rs1_val==-1431655765 and rs2_val==3, 
// opcode: bge, op1:x10; op2:x11; op1val:-0x55555555; op2val:0x3; immval:0x100; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, -0x55555555, 0x3, 0x100, 3f, x1, 164,0)

inst_574:
// rs1_val==-1431655765 and rs2_val==1431655765, 
// opcode: bge, op1:x10; op2:x11; op1val:-0x55555555; op2val:0x55555555; immval:0x4; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, -0x55555555, 0x55555555, 0x4, 1b, x1, 168,0)

inst_575:
// rs1_val==-1431655765 and rs2_val==-1431655766, 
// opcode: bge, op1:x10; op2:x11; op1val:-0x55555555; op2val:-0x55555556; immval:0x6; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, -0x55555555, -0x55555556, 0x6, 3f, x1, 172,0)

inst_576:
// rs1_val==-1431655765 and rs2_val==5, 
// opcode: bge, op1:x10; op2:x11; op1val:-0x55555555; op2val:0x5; immval:0x80; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, -0x55555555, 0x5, 0x80, 3f, x1, 176,0)

inst_577:
// rs1_val==-1431655765 and rs2_val==858993459, 
// opcode: bge, op1:x10; op2:x11; op1val:-0x55555555; op2val:0x33333333; immval:0x0; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, -0x55555555, 0x33333333, 0x0, 3f, x1, 180,0)

inst_578:
// rs1_val==-1431655765 and rs2_val==1717986918, 
// opcode: bge, op1:x10; op2:x11; op1val:-0x55555555; op2val:0x66666666; immval:0x4; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, -0x55555555, 0x66666666, 0x4, 3f, x1, 184,0)

inst_579:
// rs1_val==-1431655765 and rs2_val==-46340, 
// opcode: bge, op1:x10; op2:x11; op1val:-0x55555555; op2val:-0xb504; immval:0x2; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, -0x55555555, -0xb504, 0x2, 3f, x1, 188,0)

inst_580:
// rs1_val==-1431655765 and rs2_val==46340, 
// opcode: bge, op1:x10; op2:x11; op1val:-0x55555555; op2val:0xb504; immval:0x10; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, -0x55555555, 0xb504, 0x10, 3f, x1, 192,0)

inst_581:
// rs1_val==-1431655765 and rs2_val==2, 
// opcode: bge, op1:x10; op2:x11; op1val:-0x55555555; op2val:0x2; immval:0x556; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, -0x55555555, 0x2, 0x556, 1b, x1, 196,0)

inst_582:
// rs1_val==-1431655765 and rs2_val==1431655764, 
// opcode: bge, op1:x10; op2:x11; op1val:-0x55555555; op2val:0x55555554; immval:0x40; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, -0x55555555, 0x55555554, 0x40, 3f, x1, 200,0)

inst_583:
// rs1_val==-1431655765 and rs2_val==0, 
// opcode: bge, op1:x10; op2:x11; op1val:-0x55555555; op2val:0x0; immval:0x4; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, -0x55555555, 0x0, 0x4, 1b, x1, 204,0)

inst_584:
// rs1_val==-1431655765 and rs2_val==4, 
// opcode: bge, op1:x10; op2:x11; op1val:-0x55555555; op2val:0x4; immval:0x400; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, -0x55555555, 0x4, 0x400, 1b, x1, 208,0)

inst_585:
// rs1_val==-1431655765 and rs2_val==858993458, 
// opcode: bge, op1:x10; op2:x11; op1val:-0x55555555; op2val:0x33333332; immval:0x400; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, -0x55555555, 0x33333332, 0x400, 3f, x1, 212,0)

inst_586:
// rs1_val==-1431655765 and rs2_val==1717986917, 
// opcode: bge, op1:x10; op2:x11; op1val:-0x55555555; op2val:0x66666665; immval:0x556; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, -0x55555555, 0x66666665, 0x556, 1b, x1, 216,0)

inst_587:
// rs1_val==-1431655765 and rs2_val==46339, 
// opcode: bge, op1:x10; op2:x11; op1val:-0x55555555; op2val:0xb503; immval:0x0; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, -0x55555555, 0xb503, 0x0, 3f, x1, 220,0)

inst_588:
// rs1_val==-1431655765 and rs2_val==1431655766, 
// opcode: bge, op1:x10; op2:x11; op1val:-0x55555555; op2val:0x55555556; immval:0x0; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, -0x55555555, 0x55555556, 0x0, 3f, x1, 224,0)

inst_589:
// rs1_val==-1431655765 and rs2_val==-1431655765, 
// opcode: bge, op1:x10; op2:x11; op1val:-0x55555555; op2val:-0x55555555; immval:0x2; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, -0x55555555, -0x55555555, 0x2, 3f, x1, 228,0)

inst_590:
// rs1_val==-1431655765 and rs2_val==6, 
// opcode: bge, op1:x10; op2:x11; op1val:-0x55555555; op2val:0x6; immval:0x0; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, -0x55555555, 0x6, 0x0, 1b, x1, 232,0)

inst_591:
// rs1_val > 0 and rs2_val < 0 and imm_val & 0x03 == 0, rs1_val == 1048576
// opcode: bge, op1:x10; op2:x11; op1val:0x100000; op2val:-0xb504; immval:0x8; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x100000, -0xb504, 0x8, 3f, x1, 236,0)

inst_592:
// rs1_val == rs2_val and imm_val < 0 and imm_val & 0x03 == 0, rs1_val == 2097152, rs2_val == 2097152
// opcode: bge, op1:x10; op2:x11; op1val:0x200000; op2val:0x200000; immval:0x4; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x200000, 0x200000, 0x4, 1b, x1, 240,0)

inst_593:
// rs2_val == 8, rs1_val == 262144
// opcode: bge, op1:x10; op2:x11; op1val:0x40000; op2val:0x8; immval:0x20; align:0
TEST_BRANCH_OP(bge, x5, x10, x11, 0x40000, 0x8, 0x20, 3f, x1, 244,0)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x2_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x2_1:
    .fill 20*(XLEN/32),4,0xdeadbeef


signature_x1_0:
    .fill 512*(XLEN/32),4,0xdeadbeef


signature_x1_1:
    .fill 62*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
