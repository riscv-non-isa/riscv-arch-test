 
// -----------
// This file was generated by riscv_ctg (https://gitlab.com/incoresemi/riscv-compliance/riscv_ctg)
// version   : 0.1.0
// timestamp : Fri Nov  6 10:29:11 2020 GMT
// usage     : riscv_ctg \
//                  -- cgf /scratch/git-repo/incoresemi/riscv-compliance/riscv_ctg/sample_cgfs/rv32i.cgf \
//                  -- xlen 32 \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the sltu instruction of the RISC-V I extension for the sltu covergroup.
// 
#include "compliance_model.h"
#include "compliance_test.h"
RVTEST_ISA("RV32I")

RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*);def TEST_CASE_1=True;",sltu)

RVTEST_SIGBASE( x2,signature_x2_1)

inst_0:
// rs2 == rd != rs1, rs1==x26, rs2==x20, rd==x20, rs1_val == 0, rs2_val == 4261412863
// opcode: sltu ; op1:x26; op2:x20; dest:x20; op1val:0;  op2val:4261412863
TEST_RR_OP(sltu, x20, x26, x20, 0x1, 0, 4261412863, x2, 0, x15)

inst_1:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x29, rs2==x3, rd==x21, rs1_val == (2**(xlen)-1), rs1_val != rs2_val and rs1_val > 0 and rs2_val > 0, rs2_val == 2147483648, rs1_val > 0 and rs2_val > 0
// opcode: sltu ; op1:x29; op2:x3; dest:x21; op1val:4294967295;  op2val:2147483648
TEST_RR_OP(sltu, x21, x29, x3, 0x0, 4294967295, 2147483648, x2, 4, x15)

inst_2:
// rs1 == rs2 != rd, rs1==x19, rs2==x19, rd==x1, rs1_val == 1, rs2_val == 128
// opcode: sltu ; op1:x19; op2:x19; dest:x1; op1val:1;  op2val:128
TEST_RR_OP(sltu, x1, x19, x19, 0x1, 1, 128, x2, 8, x15)

inst_3:
// rs1 == rs2 == rd, rs1==x10, rs2==x10, rd==x10, rs2_val == 0, rs1_val == 4194304
// opcode: sltu ; op1:x10; op2:x10; dest:x10; op1val:4194304;  op2val:0
TEST_RR_OP(sltu, x10, x10, x10, 0x0, 4194304, 0, x2, 12, x15)

inst_4:
// rs1 == rd != rs2, rs1==x30, rs2==x27, rd==x30, rs2_val == (2**(xlen)-1), rs1_val == 512
// opcode: sltu ; op1:x30; op2:x27; dest:x30; op1val:512;  op2val:4294967295
TEST_RR_OP(sltu, x30, x30, x27, 0x1, 512, 4294967295, x2, 16, x15)

inst_5:
// rs1==x22, rs2==x9, rd==x26, rs2_val == 1, rs1_val == 16777216
// opcode: sltu ; op1:x22; op2:x9; dest:x26; op1val:16777216;  op2val:1
TEST_RR_OP(sltu, x26, x22, x9, 0x0, 16777216, 1, x2, 20, x15)

inst_6:
// rs1==x5, rs2==x23, rd==x25, rs1_val == rs2_val and rs1_val > 0 and rs2_val > 0, rs1_val == 4294950911, rs2_val == 4294950911
// opcode: sltu ; op1:x5; op2:x23; dest:x25; op1val:4294950911;  op2val:4294950911
TEST_RR_OP(sltu, x25, x5, x23, 0x0, 4294950911, 4294950911, x2, 24, x15)

inst_7:
// rs1==x12, rs2==x29, rd==x0, rs1_val == 2, 
// opcode: sltu ; op1:x12; op2:x29; dest:x0; op1val:2;  op2val:10
TEST_RR_OP(sltu, x0, x12, x29, 0x1, 2, 10, x2, 28, x15)

inst_8:
// rs1==x3, rs2==x14, rd==x19, rs1_val == 4, rs2_val == 256
// opcode: sltu ; op1:x3; op2:x14; dest:x19; op1val:4;  op2val:256
TEST_RR_OP(sltu, x19, x3, x14, 0x1, 4, 256, x2, 32, x15)

inst_9:
// rs1==x7, rs2==x1, rd==x28, rs1_val == 8, 
// opcode: sltu ; op1:x7; op2:x1; dest:x28; op1val:8;  op2val:2147483648
TEST_RR_OP(sltu, x28, x7, x1, 0x1, 8, 2147483648, x2, 36, x15)

inst_10:
// rs1==x28, rs2==x30, rd==x11, rs1_val == 16, rs2_val == 4
// opcode: sltu ; op1:x28; op2:x30; dest:x11; op1val:16;  op2val:4
TEST_RR_OP(sltu, x11, x28, x30, 0x0, 16, 4, x2, 40, x15)

inst_11:
// rs1==x0, rs2==x4, rd==x7, rs1_val == 32, 
// opcode: sltu ; op1:x0; op2:x4; dest:x7; op1val:32;  op2val:7
TEST_RR_OP(sltu, x7, x0, x4, 0x0, 32, 7, x2, 44, x15)

inst_12:
// rs1==x9, rs2==x6, rd==x23, rs1_val == 64, 
// opcode: sltu ; op1:x9; op2:x6; dest:x23; op1val:64;  op2val:5
TEST_RR_OP(sltu, x23, x9, x6, 0x0, 64, 5, x2, 48, x15)

inst_13:
// rs1==x27, rs2==x16, rd==x31, rs1_val == 128, 
// opcode: sltu ; op1:x27; op2:x16; dest:x31; op1val:128;  op2val:9
TEST_RR_OP(sltu, x31, x27, x16, 0x0, 128, 9, x2, 52, x15)

inst_14:
// rs1==x18, rs2==x25, rd==x14, rs1_val == 256, rs2_val == 2097152
// opcode: sltu ; op1:x18; op2:x25; dest:x14; op1val:256;  op2val:2097152
TEST_RR_OP(sltu, x14, x18, x25, 0x1, 256, 2097152, x2, 56, x15)

inst_15:
// rs1==x6, rs2==x24, rd==x9, rs1_val == 1024, rs2_val == 4294963199
// opcode: sltu ; op1:x6; op2:x24; dest:x9; op1val:1024;  op2val:4294963199
TEST_RR_OP(sltu, x9, x6, x24, 0x1, 1024, 4294963199, x2, 60, x15)

inst_16:
// rs1==x13, rs2==x8, rd==x17, rs1_val == 2048, rs2_val == 33554432
// opcode: sltu ; op1:x13; op2:x8; dest:x17; op1val:2048;  op2val:33554432
TEST_RR_OP(sltu, x17, x13, x8, 0x1, 2048, 33554432, x2, 64, x15)
RVTEST_SIGBASE( x9,signature_x9_0)

inst_17:
// rs1==x23, rs2==x11, rd==x18, rs1_val == 4096, 
// opcode: sltu ; op1:x23; op2:x11; dest:x18; op1val:4096;  op2val:18
TEST_RR_OP(sltu, x18, x23, x11, 0x0, 4096, 18, x9, 0, x10)

inst_18:
// rs1==x16, rs2==x22, rd==x5, rs1_val == 8192, rs2_val == 4294967279
// opcode: sltu ; op1:x16; op2:x22; dest:x5; op1val:8192;  op2val:4294967279
TEST_RR_OP(sltu, x5, x16, x22, 0x1, 8192, 4294967279, x9, 4, x10)

inst_19:
// rs1==x21, rs2==x15, rd==x13, rs1_val == 16384, rs2_val == 4294967294
// opcode: sltu ; op1:x21; op2:x15; dest:x13; op1val:16384;  op2val:4294967294
TEST_RR_OP(sltu, x13, x21, x15, 0x1, 16384, 4294967294, x9, 8, x10)

inst_20:
// rs1==x31, rs2==x18, rd==x12, rs1_val == 32768, rs2_val == 67108864
// opcode: sltu ; op1:x31; op2:x18; dest:x12; op1val:32768;  op2val:67108864
TEST_RR_OP(sltu, x12, x31, x18, 0x1, 32768, 67108864, x9, 12, x10)

inst_21:
// rs1==x14, rs2==x12, rd==x22, rs1_val == 65536, rs2_val == 4278190079
// opcode: sltu ; op1:x14; op2:x12; dest:x22; op1val:65536;  op2val:4278190079
TEST_RR_OP(sltu, x22, x14, x12, 0x1, 65536, 4278190079, x9, 16, x10)

inst_22:
// rs1==x25, rs2==x31, rd==x24, rs1_val == 131072, rs2_val == 16777216
// opcode: sltu ; op1:x25; op2:x31; dest:x24; op1val:131072;  op2val:16777216
TEST_RR_OP(sltu, x24, x25, x31, 0x1, 131072, 16777216, x9, 20, x10)

inst_23:
// rs1==x15, rs2==x13, rd==x16, rs1_val == 262144, 
// opcode: sltu ; op1:x15; op2:x13; dest:x16; op1val:262144;  op2val:4294963199
TEST_RR_OP(sltu, x16, x15, x13, 0x1, 262144, 4294963199, x9, 24, x10)

inst_24:
// rs1==x11, rs2==x17, rd==x4, rs1_val == 524288, 
// opcode: sltu ; op1:x11; op2:x17; dest:x4; op1val:524288;  op2val:4294950911
TEST_RR_OP(sltu, x4, x11, x17, 0x1, 524288, 4294950911, x9, 28, x10)

inst_25:
// rs1==x1, rs2==x26, rd==x3, rs1_val == 1048576, rs2_val == 4294967287
// opcode: sltu ; op1:x1; op2:x26; dest:x3; op1val:1048576;  op2val:4294967287
TEST_RR_OP(sltu, x3, x1, x26, 0x1, 1048576, 4294967287, x9, 32, x10)

inst_26:
// rs1==x8, rs2==x0, rd==x15, rs1_val == 2097152, rs2_val == 1048576
// opcode: sltu ; op1:x8; op2:x0; dest:x15; op1val:2097152;  op2val:1048576
TEST_RR_OP(sltu, x15, x8, x0, 0x0, 2097152, 1048576, x9, 36, x10)

inst_27:
// rs1==x17, rs2==x21, rd==x27, rs1_val == 8388608, rs2_val == 1024
// opcode: sltu ; op1:x17; op2:x21; dest:x27; op1val:8388608;  op2val:1024
TEST_RR_OP(sltu, x27, x17, x21, 0x0, 8388608, 1024, x9, 40, x10)

inst_28:
// rs1==x4, rs2==x28, rd==x8, rs1_val == 33554432, rs2_val == 4294965247
// opcode: sltu ; op1:x4; op2:x28; dest:x8; op1val:33554432;  op2val:4294965247
TEST_RR_OP(sltu, x8, x4, x28, 0x1, 33554432, 4294965247, x9, 44, x10)

inst_29:
// rs1==x20, rs2==x7, rd==x2, rs1_val == 67108864, 
// opcode: sltu ; op1:x20; op2:x7; dest:x2; op1val:67108864;  op2val:16777216
TEST_RR_OP(sltu, x2, x20, x7, 0x0, 67108864, 16777216, x9, 48, x10)

inst_30:
// rs1==x2, rs2==x5, rd==x29, rs1_val == 134217728, 
// opcode: sltu ; op1:x2; op2:x5; dest:x29; op1val:134217728;  op2val:4
TEST_RR_OP(sltu, x29, x2, x5, 0x0, 134217728, 4, x9, 52, x10)

inst_31:
// rs1==x24, rs2==x2, rd==x6, rs1_val == 268435456, rs2_val == 3221225471
// opcode: sltu ; op1:x24; op2:x2; dest:x6; op1val:268435456;  op2val:3221225471
TEST_RR_OP(sltu, x6, x24, x2, 0x1, 268435456, 3221225471, x9, 56, x10)

inst_32:
// rs1_val == 536870912, rs2_val == 134217728
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:536870912;  op2val:134217728
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 536870912, 134217728, x9, 60, x2)
RVTEST_SIGBASE( x1,signature_x1_0)

inst_33:
// rs1_val == 1073741824, rs2_val == 2863311530
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:1073741824;  op2val:2863311530
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 1073741824, 2863311530, x1, 0, x2)

inst_34:
// rs1_val == 2147483648, rs2_val == 4160749567
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:2147483648;  op2val:4160749567
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 2147483648, 4160749567, x1, 4, x2)

inst_35:
// rs1_val == 4294967294, rs2_val == 3758096383
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:4294967294;  op2val:3758096383
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 4294967294, 3758096383, x1, 8, x2)

inst_36:
// rs1_val == 4294967293, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:4294967293;  op2val:9
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 4294967293, 9, x1, 12, x2)

inst_37:
// rs1_val == 4294967291, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:4294967291;  op2val:1
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 4294967291, 1, x1, 16, x2)

inst_38:
// rs1_val == 4294967287, rs2_val == 8192
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:4294967287;  op2val:8192
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 4294967287, 8192, x1, 20, x2)

inst_39:
// rs1_val == 4294967279, rs2_val == 16
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:4294967279;  op2val:16
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 4294967279, 16, x1, 24, x2)

inst_40:
// rs1_val == 4294967263, rs2_val == 64
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:4294967263;  op2val:64
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 4294967263, 64, x1, 28, x2)

inst_41:
// rs1_val == 4294967231, rs2_val == 8
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:4294967231;  op2val:8
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 4294967231, 8, x1, 32, x2)

inst_42:
// rs1_val == 4294967167, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:4294967167;  op2val:0
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 4294967167, 0, x1, 36, x2)

inst_43:
// rs2_val == 4286578687, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:131072;  op2val:4286578687
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 131072, 4286578687, x1, 40, x2)

inst_44:
// rs2_val == 4227858431, rs1_val == 4294963199
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:4294963199;  op2val:4227858431
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 4294963199, 4227858431, x1, 44, x2)

inst_45:
// rs2_val == 4026531839, rs1_val == 4026531839
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:4026531839;  op2val:4026531839
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 4026531839, 4026531839, x1, 48, x2)

inst_46:
// rs2_val == 2147483647, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:4294963199;  op2val:2147483647
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 4294963199, 2147483647, x1, 52, x2)

inst_47:
// rs2_val == 1431655765, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:268435456;  op2val:1431655765
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 268435456, 1431655765, x1, 56, x2)

inst_48:
// rs1_val == 4294967039, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:4294967039;  op2val:4286578687
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 4294967039, 4286578687, x1, 60, x2)

inst_49:
// rs1_val == 4294966783, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:4294966783;  op2val:5
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 4294966783, 5, x1, 64, x2)

inst_50:
// rs1_val == 4294966271, rs2_val == 4194304
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:4294966271;  op2val:4194304
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 4294966271, 4194304, x1, 68, x2)

inst_51:
// rs1_val == 4294965247, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:4294965247;  op2val:2147483647
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 4294965247, 2147483647, x1, 72, x2)

inst_52:
// rs1_val == 4294959103, rs2_val == 4292870143
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:4294959103;  op2val:4292870143
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 4294959103, 4292870143, x1, 76, x2)

inst_53:
// rs1_val == 4294934527, rs2_val == 4294967263
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:4294934527;  op2val:4294967263
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 4294934527, 4294967263, x1, 80, x2)

inst_54:
// rs1_val == 4294901759, rs2_val == 4293918719
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:4294901759;  op2val:4293918719
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 4294901759, 4293918719, x1, 84, x2)

inst_55:
// rs1_val == 4294836223, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:4294836223;  op2val:2147483647
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 4294836223, 2147483647, x1, 88, x2)

inst_56:
// rs1_val == 4294705151, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:4294705151;  op2val:2147483647
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 4294705151, 2147483647, x1, 92, x2)

inst_57:
// rs1_val == 4294443007, rs2_val == 4096
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:4294443007;  op2val:4096
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 4294443007, 4096, x1, 96, x2)

inst_58:
// rs1_val == 4293918719, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:4293918719;  op2val:4278190079
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 4293918719, 4278190079, x1, 100, x2)

inst_59:
// rs1_val == 4292870143, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:4292870143;  op2val:13
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 4292870143, 13, x1, 104, x2)

inst_60:
// rs1_val == 4290772991, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:4290772991;  op2val:19
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 4290772991, 19, x1, 108, x2)

inst_61:
// rs1_val == 4286578687, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:4286578687;  op2val:2097152
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 4286578687, 2097152, x1, 112, x2)

inst_62:
// rs1_val == 4278190079, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:4278190079;  op2val:4294950911
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 4278190079, 4294950911, x1, 116, x2)

inst_63:
// rs1_val == 4261412863, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:4261412863;  op2val:33554432
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 4261412863, 33554432, x1, 120, x2)

inst_64:
// rs1_val == 4227858431, rs2_val == 4294705151
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:4227858431;  op2val:4294705151
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 4227858431, 4294705151, x1, 124, x2)

inst_65:
// rs1_val == 4160749567, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:4160749567;  op2val:19
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 4160749567, 19, x1, 128, x2)

inst_66:
// rs1_val == 3758096383, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:3758096383;  op2val:4294967295
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 3758096383, 4294967295, x1, 132, x2)

inst_67:
// rs1_val == 3221225471, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:3221225471;  op2val:18
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 3221225471, 18, x1, 136, x2)

inst_68:
// rs1_val == 2147483647, rs2_val == 4294959103
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:2147483647;  op2val:4294959103
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 2147483647, 4294959103, x1, 140, x2)

inst_69:
// rs1_val == 1431655765, rs2_val == 2
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:1431655765;  op2val:2
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 1431655765, 2, x1, 144, x2)

inst_70:
// rs1_val == 2863311530, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:2863311530;  op2val:4294963199
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 2863311530, 4294963199, x1, 148, x2)

inst_71:
// rs2_val == 32, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:2147483648;  op2val:32
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 2147483648, 32, x1, 152, x2)

inst_72:
// rs2_val == 512, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:4194304;  op2val:512
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 4194304, 512, x1, 156, x2)

inst_73:
// rs2_val == 2048, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:262144;  op2val:2048
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 262144, 2048, x1, 160, x2)

inst_74:
// rs2_val == 16384, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:3758096383;  op2val:16384
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 3758096383, 16384, x1, 164, x2)

inst_75:
// rs2_val == 32768, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:33554432;  op2val:32768
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 33554432, 32768, x1, 168, x2)

inst_76:
// rs2_val == 65536, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:4294967167;  op2val:65536
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 4294967167, 65536, x1, 172, x2)

inst_77:
// rs2_val == 131072, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:4294934527;  op2val:131072
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 4294934527, 131072, x1, 176, x2)

inst_78:
// rs2_val == 262144, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:64;  op2val:262144
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 64, 262144, x1, 180, x2)

inst_79:
// rs2_val == 524288, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:4294705151;  op2val:524288
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 4294705151, 524288, x1, 184, x2)

inst_80:
// rs2_val == 8388608, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:7;  op2val:8388608
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 7, 8388608, x1, 188, x2)

inst_81:
// rs2_val == 268435456, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:4286578687;  op2val:268435456
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 4286578687, 268435456, x1, 192, x2)

inst_82:
// rs2_val == 536870912, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:67108864;  op2val:536870912
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 67108864, 536870912, x1, 196, x2)

inst_83:
// rs2_val == 1073741824, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:4294967279;  op2val:1073741824
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 4294967279, 1073741824, x1, 200, x2)

inst_84:
// rs2_val == 4294967293, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:33554432;  op2val:4294967293
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 33554432, 4294967293, x1, 204, x2)

inst_85:
// rs2_val == 4294967291, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:4261412863;  op2val:4294967291
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 4261412863, 4294967291, x1, 208, x2)

inst_86:
// rs2_val == 4294967231, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:6;  op2val:4294967231
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 6, 4294967231, x1, 212, x2)

inst_87:
// rs2_val == 4294967167, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:4294963199;  op2val:4294967167
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 4294963199, 4294967167, x1, 216, x2)

inst_88:
// rs2_val == 4294967039, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:4294967294;  op2val:4294967039
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 4294967294, 4294967039, x1, 220, x2)

inst_89:
// rs2_val == 4294966783, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:33554432;  op2val:4294966783
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 33554432, 4294966783, x1, 224, x2)

inst_90:
// rs2_val == 4294966271, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:12;  op2val:4294966271
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 12, 4294966271, x1, 228, x2)

inst_91:
// rs2_val == 4294934527, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:4294966783;  op2val:4294934527
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 4294966783, 4294934527, x1, 232, x2)

inst_92:
// rs2_val == 4294901759, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:14;  op2val:4294901759
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 14, 4294901759, x1, 236, x2)

inst_93:
// rs2_val == 4294836223, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:2;  op2val:4294836223
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 2, 4294836223, x1, 240, x2)

inst_94:
// rs2_val == 4294443007, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:4292870143;  op2val:4294443007
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 4292870143, 4294443007, x1, 244, x2)

inst_95:
// rs2_val == 4290772991, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:2097152;  op2val:4290772991
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 2097152, 4290772991, x1, 248, x2)

inst_96:
// rs1_val == 1, rs2_val == 128
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:1;  op2val:128
TEST_RR_OP(sltu, x12, x10, x11, 0x1, 1, 128, x1, 252, x2)

inst_97:
// rs1_val == 32, 
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:32;  op2val:7
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 32, 7, x1, 256, x2)

inst_98:
// rs1_val == 2097152, rs2_val == 1048576
// opcode: sltu ; op1:x10; op2:x11; dest:x12; op1val:2097152;  op2val:1048576
TEST_RR_OP(sltu, x12, x10, x11, 0x0, 2097152, 1048576, x1, 260, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x2_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x2_1:
    .fill 17*(XLEN/32),4,0xdeadbeef


signature_x9_0:
    .fill 16*(XLEN/32),4,0xdeadbeef


signature_x1_0:
    .fill 66*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
