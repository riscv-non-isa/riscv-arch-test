 
// -----------
// This file was generated by riscv_ctg (https://gitlab.com/incoresemi/riscv-compliance/riscv_ctg)
// version   : 0.1.0
// timestamp : Fri Nov  6 10:29:11 2020 GMT
// usage     : riscv_ctg \
//                  -- cgf /scratch/git-repo/incoresemi/riscv-compliance/riscv_ctg/sample_cgfs/rv32i.cgf \
//                  -- xlen 32 \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the srl instruction of the RISC-V i extension for the srl covergroup.
// 
#include "compliance_model.h"
#include "compliance_test.h"
RVTEST_ISA("RV32i")

RVMODEL_BOOT
RVTEST_CODE_BEGIN
RVMODEL_TARGET_INIT

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*);def TEST_CASE_1=True;",srl)

RVTEST_SIGBASE( x10,signature_x10_1)

inst_0:
// rs2 == rd != rs1, rs1==x23, rs2==x9, rd==x9, rs1_val < 0 and rs2_val > 0 and rs2_val < xlen, rs1_val == -268435457
// opcode: srl ; op1:x23; op2:x9; dest:x9; op1val:-268435457;  op2val:14
TEST_RR_OP(srl, x9, x23, x9, 0x3bfff, -268435457, 14, x10, 0, x14)

inst_1:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x6, rs2==x25, rd==x28, rs1_val > 0 and rs2_val > 0 and rs2_val < xlen, rs1_val == 16384
// opcode: srl ; op1:x6; op2:x25; dest:x28; op1val:16384;  op2val:9
TEST_RR_OP(srl, x28, x6, x25, 0x20, 16384, 9, x10, 4, x14)

inst_2:
// rs1 == rs2 != rd, rs1==x27, rs2==x27, rd==x1, rs1_val < 0 and rs2_val == 0, rs1_val == -2147483648, rs1_val == (-2**(xlen-1)) and rs2_val >= 0 and rs2_val < xlen
// opcode: srl ; op1:x27; op2:x27; dest:x1; op1val:-2147483648;  op2val:0
TEST_RR_OP(srl, x1, x27, x27, 0x80000000, -2147483648, 0, x10, 8, x14)

inst_3:
// rs1 == rs2 == rd, rs1==x3, rs2==x3, rd==x3, rs1_val > 0 and rs2_val == 0, rs1_val == 4
// opcode: srl ; op1:x3; op2:x3; dest:x3; op1val:4;  op2val:0
TEST_RR_OP(srl, x3, x3, x3, 0x4, 4, 0, x10, 12, x14)

inst_4:
// rs1 == rd != rs2, rs1==x21, rs2==x20, rd==x21, rs1_val == rs2_val and rs2_val > 0 and rs2_val < xlen, 
// opcode: srl ; op1:x21; op2:x20; dest:x21; op1val:9;  op2val:9
TEST_RR_OP(srl, x21, x21, x20, 0x0, 9, 9, x10, 16, x14)

inst_5:
// rs1==x7, rs2==x18, rd==x22, rs1_val == 0 and rs2_val >= 0 and rs2_val < xlen, rs2_val == 27
// opcode: srl ; op1:x7; op2:x18; dest:x22; op1val:0;  op2val:27
TEST_RR_OP(srl, x22, x7, x18, 0x0, 0, 27, x10, 20, x14)

inst_6:
// rs1==x17, rs2==x8, rd==x2, rs1_val == (2**(xlen-1)-1) and rs2_val >= 0 and rs2_val < xlen, rs1_val == 2147483647
// opcode: srl ; op1:x17; op2:x8; dest:x2; op1val:2147483647;  op2val:19
TEST_RR_OP(srl, x2, x17, x8, 0xfff, 2147483647, 19, x10, 24, x14)

inst_7:
// rs1==x29, rs2==x31, rd==x13, rs1_val == 1 and rs2_val >= 0 and rs2_val < xlen, rs1_val == 1
// opcode: srl ; op1:x29; op2:x31; dest:x13; op1val:1;  op2val:11
TEST_RR_OP(srl, x13, x29, x31, 0x0, 1, 11, x10, 28, x14)

inst_8:
// rs1==x15, rs2==x11, rd==x26, rs2_val == 1, rs1_val == -524289
// opcode: srl ; op1:x15; op2:x11; dest:x26; op1val:-524289;  op2val:1
TEST_RR_OP(srl, x26, x15, x11, 0x7ffbffff, -524289, 1, x10, 32, x14)

inst_9:
// rs1==x25, rs2==x12, rd==x27, rs2_val == 2, rs1_val == 512
// opcode: srl ; op1:x25; op2:x12; dest:x27; op1val:512;  op2val:2
TEST_RR_OP(srl, x27, x25, x12, 0x80, 512, 2, x10, 36, x14)

inst_10:
// rs1==x9, rs2==x13, rd==x18, rs2_val == 4, rs1_val == 256
// opcode: srl ; op1:x9; op2:x13; dest:x18; op1val:256;  op2val:4
TEST_RR_OP(srl, x18, x9, x13, 0x10, 256, 4, x10, 40, x14)

inst_11:
// rs1==x20, rs2==x1, rd==x23, rs2_val == 8, rs1_val == 16777216
// opcode: srl ; op1:x20; op2:x1; dest:x23; op1val:16777216;  op2val:8
TEST_RR_OP(srl, x23, x20, x1, 0x10000, 16777216, 8, x10, 44, x14)

inst_12:
// rs1==x30, rs2==x28, rd==x6, rs2_val == 16, 
// opcode: srl ; op1:x30; op2:x28; dest:x6; op1val:-4;  op2val:16
TEST_RR_OP(srl, x6, x30, x28, 0xffff, -4, 16, x10, 48, x14)

inst_13:
// rs1==x13, rs2==x21, rd==x4, rs2_val == 30, rs1_val == -32769
// opcode: srl ; op1:x13; op2:x21; dest:x4; op1val:-32769;  op2val:30
TEST_RR_OP(srl, x4, x13, x21, 0x3, -32769, 30, x10, 52, x14)

inst_14:
// rs1==x1, rs2==x2, rd==x5, rs2_val == 29, 
// opcode: srl ; op1:x1; op2:x2; dest:x5; op1val:-1;  op2val:29
TEST_RR_OP(srl, x5, x1, x2, 0x7, -1, 29, x10, 56, x14)

inst_15:
// rs1==x12, rs2==x23, rd==x29, rs2_val == 23, 
// opcode: srl ; op1:x12; op2:x23; dest:x29; op1val:512;  op2val:23
TEST_RR_OP(srl, x29, x12, x23, 0x0, 512, 23, x10, 60, x14)

inst_16:
// rs1==x2, rs2==x16, rd==x15, rs2_val == 15, rs1_val == 1073741824
// opcode: srl ; op1:x2; op2:x16; dest:x15; op1val:1073741824;  op2val:15
TEST_RR_OP(srl, x15, x2, x16, 0x8000, 1073741824, 15, x10, 64, x14)

inst_17:
// rs1==x24, rs2==x5, rd==x20, rs2_val == 21, rs1_val == 1431655765
// opcode: srl ; op1:x24; op2:x5; dest:x20; op1val:1431655765;  op2val:21
TEST_RR_OP(srl, x20, x24, x5, 0x2aa, 1431655765, 21, x10, 68, x2)
RVTEST_SIGBASE( x1,signature_x1_0)

inst_18:
// rs1==x0, rs2==x19, rd==x12, rs2_val == 10, rs1_val == 2097152
// opcode: srl ; op1:x0; op2:x19; dest:x12; op1val:2097152;  op2val:10
TEST_RR_OP(srl, x12, x0, x19, 0x800, 2097152, 10, x1, 0, x2)

inst_19:
// rs1==x26, rs2==x7, rd==x16, rs1_val == 2, 
// opcode: srl ; op1:x26; op2:x7; dest:x16; op1val:2;  op2val:5
TEST_RR_OP(srl, x16, x26, x7, 0x0, 2, 5, x1, 4, x2)

inst_20:
// rs1==x11, rs2==x22, rd==x30, rs1_val == 8, 
// opcode: srl ; op1:x11; op2:x22; dest:x30; op1val:8;  op2val:12
TEST_RR_OP(srl, x30, x11, x22, 0x0, 8, 12, x1, 8, x2)

inst_21:
// rs1==x10, rs2==x30, rd==x0, rs1_val == 16, 
// opcode: srl ; op1:x10; op2:x30; dest:x0; op1val:16;  op2val:15
TEST_RR_OP(srl, x0, x10, x30, 0x0, 16, 15, x1, 12, x2)

inst_22:
// rs1==x5, rs2==x4, rd==x19, rs1_val == 32, 
// opcode: srl ; op1:x5; op2:x4; dest:x19; op1val:32;  op2val:9
TEST_RR_OP(srl, x19, x5, x4, 0x0, 32, 9, x1, 16, x2)

inst_23:
// rs1==x22, rs2==x26, rd==x31, rs1_val == 64, 
// opcode: srl ; op1:x22; op2:x26; dest:x31; op1val:64;  op2val:7
TEST_RR_OP(srl, x31, x22, x26, 0x0, 64, 7, x1, 20, x2)

inst_24:
// rs1==x18, rs2==x10, rd==x8, rs1_val == 128, 
// opcode: srl ; op1:x18; op2:x10; dest:x8; op1val:128;  op2val:5
TEST_RR_OP(srl, x8, x18, x10, 0x4, 128, 5, x1, 24, x2)

inst_25:
// rs1==x19, rs2==x29, rd==x11, rs1_val == 1024, 
// opcode: srl ; op1:x19; op2:x29; dest:x11; op1val:1024;  op2val:8
TEST_RR_OP(srl, x11, x19, x29, 0x4, 1024, 8, x1, 28, x2)

inst_26:
// rs1==x31, rs2==x6, rd==x10, rs1_val == 2048, 
// opcode: srl ; op1:x31; op2:x6; dest:x10; op1val:2048;  op2val:31
TEST_RR_OP(srl, x10, x31, x6, 0x0, 2048, 31, x1, 32, x2)

inst_27:
// rs1==x14, rs2==x17, rd==x24, rs1_val == 4096, 
// opcode: srl ; op1:x14; op2:x17; dest:x24; op1val:4096;  op2val:17
TEST_RR_OP(srl, x24, x14, x17, 0x0, 4096, 17, x1, 36, x2)

inst_28:
// rs1==x16, rs2==x24, rd==x17, rs1_val == 8192, 
// opcode: srl ; op1:x16; op2:x24; dest:x17; op1val:8192;  op2val:2
TEST_RR_OP(srl, x17, x16, x24, 0x800, 8192, 2, x1, 40, x2)

inst_29:
// rs1==x8, rs2==x0, rd==x25, rs1_val == 32768, 
// opcode: srl ; op1:x8; op2:x0; dest:x25; op1val:32768;  op2val:18
TEST_RR_OP(srl, x25, x8, x0, 0x0, 32768, 18, x1, 44, x2)

inst_30:
// rs1==x28, rs2==x15, rd==x14, rs1_val == 65536, 
// opcode: srl ; op1:x28; op2:x15; dest:x14; op1val:65536;  op2val:6
TEST_RR_OP(srl, x14, x28, x15, 0x400, 65536, 6, x1, 48, x2)

inst_31:
// rs1==x4, rs2==x14, rd==x7, rs1_val == 131072, 
// opcode: srl ; op1:x4; op2:x14; dest:x7; op1val:131072;  op2val:1
TEST_RR_OP(srl, x7, x4, x14, 0x10000, 131072, 1, x1, 52, x2)

inst_32:
// rs1_val == 262144, 
// opcode: srl ; op1:x10; op2:x11; dest:x12; op1val:262144;  op2val:4
TEST_RR_OP(srl, x12, x10, x11, 0x4000, 262144, 4, x1, 56, x2)

inst_33:
// rs1_val == 524288, 
// opcode: srl ; op1:x10; op2:x11; dest:x12; op1val:524288;  op2val:17
TEST_RR_OP(srl, x12, x10, x11, 0x4, 524288, 17, x1, 60, x2)

inst_34:
// rs1_val == 1048576, 
// opcode: srl ; op1:x10; op2:x11; dest:x12; op1val:1048576;  op2val:7
TEST_RR_OP(srl, x12, x10, x11, 0x2000, 1048576, 7, x1, 64, x2)

inst_35:
// rs1_val == 4194304, 
// opcode: srl ; op1:x10; op2:x11; dest:x12; op1val:4194304;  op2val:0
TEST_RR_OP(srl, x12, x10, x11, 0x400000, 4194304, 0, x1, 68, x2)

inst_36:
// rs1_val == 8388608, 
// opcode: srl ; op1:x10; op2:x11; dest:x12; op1val:8388608;  op2val:11
TEST_RR_OP(srl, x12, x10, x11, 0x1000, 8388608, 11, x1, 72, x2)

inst_37:
// rs1_val == 33554432, 
// opcode: srl ; op1:x10; op2:x11; dest:x12; op1val:33554432;  op2val:7
TEST_RR_OP(srl, x12, x10, x11, 0x40000, 33554432, 7, x1, 76, x2)

inst_38:
// rs1_val == 67108864, 
// opcode: srl ; op1:x10; op2:x11; dest:x12; op1val:67108864;  op2val:31
TEST_RR_OP(srl, x12, x10, x11, 0x0, 67108864, 31, x1, 80, x2)

inst_39:
// rs1_val == 134217728, 
// opcode: srl ; op1:x10; op2:x11; dest:x12; op1val:134217728;  op2val:1
TEST_RR_OP(srl, x12, x10, x11, 0x4000000, 134217728, 1, x1, 84, x2)

inst_40:
// rs1_val == -2049, 
// opcode: srl ; op1:x10; op2:x11; dest:x12; op1val:-2049;  op2val:1
TEST_RR_OP(srl, x12, x10, x11, 0x7ffffbff, -2049, 1, x1, 88, x2)

inst_41:
// rs1_val == -4097, 
// opcode: srl ; op1:x10; op2:x11; dest:x12; op1val:-4097;  op2val:27
TEST_RR_OP(srl, x12, x10, x11, 0x1f, -4097, 27, x1, 92, x2)

inst_42:
// rs1_val == -8193, 
// opcode: srl ; op1:x10; op2:x11; dest:x12; op1val:-8193;  op2val:23
TEST_RR_OP(srl, x12, x10, x11, 0x1ff, -8193, 23, x1, 96, x2)

inst_43:
// rs1_val == -16385, 
// opcode: srl ; op1:x10; op2:x11; dest:x12; op1val:-16385;  op2val:11
TEST_RR_OP(srl, x12, x10, x11, 0x1ffff7, -16385, 11, x1, 100, x2)

inst_44:
// rs1_val == -65537, 
// opcode: srl ; op1:x10; op2:x11; dest:x12; op1val:-65537;  op2val:11
TEST_RR_OP(srl, x12, x10, x11, 0x1fffdf, -65537, 11, x1, 104, x2)

inst_45:
// rs1_val == -131073, 
// opcode: srl ; op1:x10; op2:x11; dest:x12; op1val:-131073;  op2val:17
TEST_RR_OP(srl, x12, x10, x11, 0x7ffe, -131073, 17, x1, 108, x2)

inst_46:
// rs1_val == -262145, 
// opcode: srl ; op1:x10; op2:x11; dest:x12; op1val:-262145;  op2val:1
TEST_RR_OP(srl, x12, x10, x11, 0x7ffdffff, -262145, 1, x1, 112, x2)

inst_47:
// rs1_val == -1048577, 
// opcode: srl ; op1:x10; op2:x11; dest:x12; op1val:-1048577;  op2val:2
TEST_RR_OP(srl, x12, x10, x11, 0x3ffbffff, -1048577, 2, x1, 116, x2)

inst_48:
// rs1_val == -2097153, 
// opcode: srl ; op1:x10; op2:x11; dest:x12; op1val:-2097153;  op2val:10
TEST_RR_OP(srl, x12, x10, x11, 0x3ff7ff, -2097153, 10, x1, 120, x2)

inst_49:
// rs1_val == -4194305, 
// opcode: srl ; op1:x10; op2:x11; dest:x12; op1val:-4194305;  op2val:29
TEST_RR_OP(srl, x12, x10, x11, 0x7, -4194305, 29, x1, 124, x2)

inst_50:
// rs1_val == -8388609, 
// opcode: srl ; op1:x10; op2:x11; dest:x12; op1val:-8388609;  op2val:30
TEST_RR_OP(srl, x12, x10, x11, 0x3, -8388609, 30, x1, 128, x2)

inst_51:
// rs1_val == -16777217, 
// opcode: srl ; op1:x10; op2:x11; dest:x12; op1val:-16777217;  op2val:29
TEST_RR_OP(srl, x12, x10, x11, 0x7, -16777217, 29, x1, 132, x2)

inst_52:
// rs1_val == -33554433, 
// opcode: srl ; op1:x10; op2:x11; dest:x12; op1val:-33554433;  op2val:30
TEST_RR_OP(srl, x12, x10, x11, 0x3, -33554433, 30, x1, 136, x2)

inst_53:
// rs1_val == -67108865, 
// opcode: srl ; op1:x10; op2:x11; dest:x12; op1val:-67108865;  op2val:27
TEST_RR_OP(srl, x12, x10, x11, 0x1f, -67108865, 27, x1, 140, x2)

inst_54:
// rs1_val == -134217729, 
// opcode: srl ; op1:x10; op2:x11; dest:x12; op1val:-134217729;  op2val:0
TEST_RR_OP(srl, x12, x10, x11, 0xf7ffffff, -134217729, 0, x1, 144, x2)

inst_55:
// rs1_val == -536870913, 
// opcode: srl ; op1:x10; op2:x11; dest:x12; op1val:-536870913;  op2val:1
TEST_RR_OP(srl, x12, x10, x11, 0x6fffffff, -536870913, 1, x1, 148, x2)

inst_56:
// rs1_val == -33, 
// opcode: srl ; op1:x10; op2:x11; dest:x12; op1val:-33;  op2val:7
TEST_RR_OP(srl, x12, x10, x11, 0x1ffffff, -33, 7, x1, 152, x2)

inst_57:
// rs1_val == 268435456, 
// opcode: srl ; op1:x10; op2:x11; dest:x12; op1val:268435456;  op2val:16
TEST_RR_OP(srl, x12, x10, x11, 0x1000, 268435456, 16, x1, 156, x2)

inst_58:
// rs1_val == 536870912, 
// opcode: srl ; op1:x10; op2:x11; dest:x12; op1val:536870912;  op2val:8
TEST_RR_OP(srl, x12, x10, x11, 0x200000, 536870912, 8, x1, 160, x2)

inst_59:
// rs1_val == -1073741825, 
// opcode: srl ; op1:x10; op2:x11; dest:x12; op1val:-1073741825;  op2val:17
TEST_RR_OP(srl, x12, x10, x11, 0x5fff, -1073741825, 17, x1, 164, x2)

inst_60:
// rs1_val == -2, 
// opcode: srl ; op1:x10; op2:x11; dest:x12; op1val:-2;  op2val:2
TEST_RR_OP(srl, x12, x10, x11, 0x3fffffff, -2, 2, x1, 168, x2)

inst_61:
// rs1_val == -5, 
// opcode: srl ; op1:x10; op2:x11; dest:x12; op1val:-5;  op2val:29
TEST_RR_OP(srl, x12, x10, x11, 0x7, -5, 29, x1, 172, x2)

inst_62:
// rs1_val == -1431655766, 
// opcode: srl ; op1:x10; op2:x11; dest:x12; op1val:-1431655766;  op2val:12
TEST_RR_OP(srl, x12, x10, x11, 0xaaaaa, -1431655766, 12, x1, 176, x2)

inst_63:
// rs1_val == -3, 
// opcode: srl ; op1:x10; op2:x11; dest:x12; op1val:-3;  op2val:30
TEST_RR_OP(srl, x12, x10, x11, 0x3, -3, 30, x1, 180, x2)

inst_64:
// rs1_val == -9, 
// opcode: srl ; op1:x10; op2:x11; dest:x12; op1val:-9;  op2val:19
TEST_RR_OP(srl, x12, x10, x11, 0x1fff, -9, 19, x1, 184, x2)

inst_65:
// rs1_val == -17, 
// opcode: srl ; op1:x10; op2:x11; dest:x12; op1val:-17;  op2val:2
TEST_RR_OP(srl, x12, x10, x11, 0x3ffffffb, -17, 2, x1, 188, x2)

inst_66:
// rs1_val == -65, 
// opcode: srl ; op1:x10; op2:x11; dest:x12; op1val:-65;  op2val:30
TEST_RR_OP(srl, x12, x10, x11, 0x3, -65, 30, x1, 192, x2)

inst_67:
// rs1_val == -129, 
// opcode: srl ; op1:x10; op2:x11; dest:x12; op1val:-129;  op2val:30
TEST_RR_OP(srl, x12, x10, x11, 0x3, -129, 30, x1, 196, x2)

inst_68:
// rs1_val == -257, 
// opcode: srl ; op1:x10; op2:x11; dest:x12; op1val:-257;  op2val:18
TEST_RR_OP(srl, x12, x10, x11, 0x3fff, -257, 18, x1, 200, x2)

inst_69:
// rs1_val == -513, 
// opcode: srl ; op1:x10; op2:x11; dest:x12; op1val:-513;  op2val:13
TEST_RR_OP(srl, x12, x10, x11, 0x7ffff, -513, 13, x1, 204, x2)

inst_70:
// rs1_val == -1025, 
// opcode: srl ; op1:x10; op2:x11; dest:x12; op1val:-1025;  op2val:13
TEST_RR_OP(srl, x12, x10, x11, 0x7ffff, -1025, 13, x1, 208, x2)

inst_71:
// rs1_val < 0 and rs2_val == 0, rs1_val == -2147483648, rs1_val == (-2**(xlen-1)) and rs2_val >= 0 and rs2_val < xlen
// opcode: srl ; op1:x10; op2:x11; dest:x12; op1val:-2147483648;  op2val:0
TEST_RR_OP(srl, x12, x10, x11, 0x80000000, -2147483648, 0, x1, 212, x2)

inst_72:
// rs1_val > 0 and rs2_val == 0, rs1_val == 4
// opcode: srl ; op1:x10; op2:x11; dest:x12; op1val:4;  op2val:0
TEST_RR_OP(srl, x12, x10, x11, 0x4, 4, 0, x1, 216, x2)

inst_73:
// rs2_val == 10, rs1_val == 2097152
// opcode: srl ; op1:x10; op2:x11; dest:x12; op1val:2097152;  op2val:10
TEST_RR_OP(srl, x12, x10, x11, 0x800, 2097152, 10, x1, 220, x2)

inst_74:
// rs1_val == 16, 
// opcode: srl ; op1:x10; op2:x11; dest:x12; op1val:16;  op2val:15
TEST_RR_OP(srl, x12, x10, x11, 0x0, 16, 15, x1, 224, x2)

inst_75:
// rs1_val == 32768, 
// opcode: srl ; op1:x10; op2:x11; dest:x12; op1val:32768;  op2val:18
TEST_RR_OP(srl, x12, x10, x11, 0x0, 32768, 18, x1, 228, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x10_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x10_1:
    .fill 18*(XLEN/32),4,0xdeadbeef


signature_x1_0:
    .fill 58*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
