 
// -----------
// This file was generated by riscv_ctg (https://gitlab.com/incoresemi/riscv-compliance/riscv_ctg)
// version   : 0.1.0
// timestamp : Fri Nov  6 10:29:11 2020 GMT
// usage     : riscv_ctg \
//                  -- cgf /scratch/git-repo/incoresemi/riscv-compliance/riscv_ctg/sample_cgfs/rv32i.cgf \
//                  -- xlen 32 \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the sb instruction of the RISC-V I extension for the sb-align covergroup.
// 
#include "compliance_model.h"
#include "compliance_test.h"
RVTEST_ISA("RV32I")

RVMODEL_BOOT
RVTEST_CODE_BEGIN
RVMODEL_TARGET_INIT

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*);def TEST_CASE_1=True;",sb-align)

RVTEST_SIGBASE( x1,signature_x1_1)

inst_0:
// rs1 != rs2, rs1==x11, rs2==x6, ea_align == 0 and (imm_val % 4) == 0, imm_val > 0, rs2_val == 65536
// opcode: sb; op1:x11; op2:x6; op2val:65536; immval:16; align:0
TEST_STORE(x1,x9,0,x11,x6,65536,16,0,sb,0)

inst_1:
// rs1==x17, rs2==x23, ea_align == 0 and (imm_val % 4) == 1, imm_val < 0, rs2_val == -9
// opcode: sb; op1:x17; op2:x23; op2val:-9; immval:-7; align:0
TEST_STORE(x1,x9,0,x17,x23,-9,-7,4,sb,0)

inst_2:
// rs1==x21, rs2==x18, ea_align == 0 and (imm_val % 4) == 2, rs2_val == -129
// opcode: sb; op1:x21; op2:x18; op2val:-129; immval:-6; align:0
TEST_STORE(x1,x9,0,x21,x18,-129,-6,8,sb,0)

inst_3:
// rs1==x29, rs2==x12, ea_align == 0 and (imm_val % 4) == 3, 
// opcode: sb; op1:x29; op2:x12; op2val:-9; immval:-9; align:0
TEST_STORE(x1,x9,0,x29,x12,-9,-9,12,sb,0)

inst_4:
// rs1==x23, rs2==x24, ea_align == 2 and (imm_val % 4) == 0, rs2_val == 2097152
// opcode: sb; op1:x23; op2:x24; op2val:2097152; immval:4; align:2
TEST_STORE(x1,x9,0,x23,x24,2097152,4,16,sb,2)

inst_5:
// rs1==x26, rs2==x10, ea_align == 2 and (imm_val % 4) == 1, rs2_val == 262144
// opcode: sb; op1:x26; op2:x10; op2val:262144; immval:-7; align:2
TEST_STORE(x1,x9,0,x26,x10,262144,-7,20,sb,2)

inst_6:
// rs1==x24, rs2==x25, ea_align == 2 and (imm_val % 4) == 2, rs2_val == -33
// opcode: sb; op1:x24; op2:x25; op2val:-33; immval:-2; align:2
TEST_STORE(x1,x9,0,x24,x25,-33,-2,24,sb,2)

inst_7:
// rs1==x25, rs2==x0, ea_align == 2 and (imm_val % 4) == 3, rs2_val == 128
// opcode: sb; op1:x25; op2:x0; op2val:128; immval:-1; align:2
TEST_STORE(x1,x9,0,x25,x0,128,-1,28,sb,2)

inst_8:
// rs1==x2, rs2==x16, ea_align == 1 and (imm_val % 4) == 0, rs2_val == -17
// opcode: sb; op1:x2; op2:x16; op2val:-17; immval:4; align:1
TEST_STORE(x1,x9,0,x2,x16,-17,4,32,sb,1)

inst_9:
// rs1==x15, rs2==x4, ea_align == 1 and (imm_val % 4) == 1, rs2_val == 16777216
// opcode: sb; op1:x15; op2:x4; op2val:16777216; immval:5; align:1
TEST_STORE(x1,x9,0,x15,x4,16777216,5,36,sb,1)

inst_10:
// rs1==x31, rs2==x28, ea_align == 1 and (imm_val % 4) == 2, rs2_val == -1431655766
// opcode: sb; op1:x31; op2:x28; op2val:-1431655766; immval:-2; align:1
TEST_STORE(x1,x9,0,x31,x28,-1431655766,-2,40,sb,1)

inst_11:
// rs1==x13, rs2==x31, ea_align == 1 and (imm_val % 4) == 3, 
// opcode: sb; op1:x13; op2:x31; op2val:1073741823; immval:-1; align:1
TEST_STORE(x1,x9,0,x13,x31,1073741823,-1,44,sb,1)

inst_12:
// rs1==x20, rs2==x15, ea_align == 3 and (imm_val % 4) == 0, imm_val == 0, rs2_val == 4096
// opcode: sb; op1:x20; op2:x15; op2val:4096; immval:0; align:3
TEST_STORE(x1,x9,0,x20,x15,4096,0,48,sb,3)

inst_13:
// rs1==x27, rs2==x5, ea_align == 3 and (imm_val % 4) == 1, rs2_val == 1
// opcode: sb; op1:x27; op2:x5; op2val:1; immval:1; align:3
TEST_STORE(x1,x9,0,x27,x5,1,1,52,sb,3)

inst_14:
// rs1==x4, rs2==x8, ea_align == 3 and (imm_val % 4) == 2, 
// opcode: sb; op1:x4; op2:x8; op2val:3; immval:-10; align:3
TEST_STORE(x1,x9,0,x4,x8,3,-10,56,sb,3)

inst_15:
// rs1==x6, rs2==x7, ea_align == 3 and (imm_val % 4) == 3, rs2_val == 67108864
// opcode: sb; op1:x6; op2:x7; op2val:67108864; immval:-513; align:3
TEST_STORE(x1,x9,0,x6,x7,67108864,-513,60,sb,3)

inst_16:
// rs1==x10, rs2==x30, rs2_val == (-2**(xlen-1)), rs2_val == -2147483648
// opcode: sb; op1:x10; op2:x30; op2val:-2147483648; immval:0; align:0
TEST_STORE(x1,x9,0,x10,x30,-2147483648,0,64,sb,0)

inst_17:
// rs1==x19, rs2==x26, rs2_val == 0, 
// opcode: sb; op1:x19; op2:x26; op2val:0; immval:-10; align:0
TEST_STORE(x1,x9,0,x19,x26,0,-10,68,sb,0)

inst_18:
// rs1==x18, rs2==x3, rs2_val == (2**(xlen-1)-1), rs2_val == 2147483647
// opcode: sb; op1:x18; op2:x3; op2val:2147483647; immval:-1; align:0
TEST_STORE(x1,x9,0,x18,x3,2147483647,-1,72,sb,0)

inst_19:
// rs1==x30, rs2==x22, rs2_val == 2, 
// opcode: sb; op1:x30; op2:x22; op2val:2; immval:-1025; align:0
TEST_STORE(x1,x6,0,x30,x22,2,-1025,76,sb,0)
RVTEST_SIGBASE( x4,signature_x4_0)

inst_20:
// rs1==x16, rs2==x13, rs2_val == 4, 
// opcode: sb; op1:x16; op2:x13; op2val:4; immval:2047; align:0
TEST_STORE(x4,x6,0,x16,x13,4,2047,0,sb,0)

inst_21:
// rs1==x7, rs2==x14, rs2_val == 8, 
// opcode: sb; op1:x7; op2:x14; op2val:8; immval:-257; align:0
TEST_STORE(x4,x6,0,x7,x14,8,-257,4,sb,0)

inst_22:
// rs1==x14, rs2==x17, rs2_val == 16, 
// opcode: sb; op1:x14; op2:x17; op2val:16; immval:256; align:0
TEST_STORE(x4,x6,0,x14,x17,16,256,8,sb,0)

inst_23:
// rs1==x3, rs2==x2, rs2_val == 32, 
// opcode: sb; op1:x3; op2:x2; op2val:32; immval:0; align:0
TEST_STORE(x4,x6,0,x3,x2,32,0,12,sb,0)

inst_24:
// rs1==x28, rs2==x27, rs2_val == 64, 
// opcode: sb; op1:x28; op2:x27; op2val:64; immval:-65; align:0
TEST_STORE(x4,x6,0,x28,x27,64,-65,16,sb,0)

inst_25:
// rs1==x22, rs2==x20, rs2_val == 256, 
// opcode: sb; op1:x22; op2:x20; op2val:256; immval:256; align:0
TEST_STORE(x4,x6,0,x22,x20,256,256,20,sb,0)

inst_26:
// rs1==x5, rs2==x11, rs2_val == 512, 
// opcode: sb; op1:x5; op2:x11; op2val:512; immval:-513; align:0
TEST_STORE(x4,x6,0,x5,x11,512,-513,24,sb,0)

inst_27:
// rs1==x9, rs2==x21, rs2_val == 1024, 
// opcode: sb; op1:x9; op2:x21; op2val:1024; immval:-513; align:0
TEST_STORE(x4,x6,0,x9,x21,1024,-513,28,sb,0)

inst_28:
// rs1==x8, rs2==x9, rs2_val == 2048, 
// opcode: sb; op1:x8; op2:x9; op2val:2048; immval:-10; align:0
TEST_STORE(x4,x6,0,x8,x9,2048,-10,32,sb,0)

inst_29:
// rs1==x1, rs2==x29, rs2_val == 8192, 
// opcode: sb; op1:x1; op2:x29; op2val:8192; immval:-4; align:0
TEST_STORE(x4,x6,0,x1,x29,8192,-4,36,sb,0)

inst_30:
// rs1==x12, rs2==x19, rs2_val == 16384, 
// opcode: sb; op1:x12; op2:x19; op2val:16384; immval:-1366; align:0
TEST_STORE(x4,x6,0,x12,x19,16384,-1366,40,sb,0)

inst_31:
// rs2==x1, rs2_val == 32768, 
// opcode: sb; op1:x18; op2:x1; op2val:32768; immval:1024; align:0
TEST_STORE(x4,x6,0,x18,x1,32768,1024,44,sb,0)

inst_32:
// rs2_val == 131072, 
// opcode: sb; op1:x10; op2:x11; op2val:131072; immval:-10; align:0
TEST_STORE(x4,x6,0,x10,x11,131072,-10,48,sb,0)

inst_33:
// rs2_val == 524288, 
// opcode: sb; op1:x10; op2:x11; op2val:524288; immval:3; align:0
TEST_STORE(x4,x6,0,x10,x11,524288,3,52,sb,0)

inst_34:
// rs2_val == 1048576, 
// opcode: sb; op1:x10; op2:x11; op2val:1048576; immval:1023; align:0
TEST_STORE(x4,x6,0,x10,x11,1048576,1023,56,sb,0)

inst_35:
// rs2_val == 4194304, 
// opcode: sb; op1:x10; op2:x11; op2val:4194304; immval:8; align:0
TEST_STORE(x4,x6,0,x10,x11,4194304,8,60,sb,0)

inst_36:
// rs2_val == 8388608, 
// opcode: sb; op1:x10; op2:x11; op2val:8388608; immval:9; align:0
TEST_STORE(x4,x6,0,x10,x11,8388608,9,64,sb,0)

inst_37:
// rs2_val == 33554432, 
// opcode: sb; op1:x10; op2:x11; op2val:33554432; immval:-257; align:0
TEST_STORE(x4,x6,0,x10,x11,33554432,-257,68,sb,0)

inst_38:
// rs2_val == 134217728, 
// opcode: sb; op1:x10; op2:x11; op2val:134217728; immval:-9; align:0
TEST_STORE(x4,x6,0,x10,x11,134217728,-9,72,sb,0)

inst_39:
// rs2_val == -1025, 
// opcode: sb; op1:x10; op2:x11; op2val:-1025; immval:-1; align:0
TEST_STORE(x4,x6,0,x10,x11,-1025,-1,76,sb,0)

inst_40:
// rs2_val == -2049, 
// opcode: sb; op1:x10; op2:x11; op2val:-2049; immval:16; align:0
TEST_STORE(x4,x6,0,x10,x11,-2049,16,80,sb,0)

inst_41:
// rs2_val == -4097, 
// opcode: sb; op1:x10; op2:x11; op2val:-4097; immval:1024; align:0
TEST_STORE(x4,x6,0,x10,x11,-4097,1024,84,sb,0)

inst_42:
// rs2_val == -8193, 
// opcode: sb; op1:x10; op2:x11; op2val:-8193; immval:-1366; align:0
TEST_STORE(x4,x6,0,x10,x11,-8193,-1366,88,sb,0)

inst_43:
// rs2_val == -16385, 
// opcode: sb; op1:x10; op2:x11; op2val:-16385; immval:512; align:0
TEST_STORE(x4,x6,0,x10,x11,-16385,512,92,sb,0)

inst_44:
// rs2_val == -32769, 
// opcode: sb; op1:x10; op2:x11; op2val:-32769; immval:-129; align:0
TEST_STORE(x4,x6,0,x10,x11,-32769,-129,96,sb,0)

inst_45:
// rs2_val == -65537, 
// opcode: sb; op1:x10; op2:x11; op2val:-65537; immval:128; align:0
TEST_STORE(x4,x6,0,x10,x11,-65537,128,100,sb,0)

inst_46:
// rs2_val == -131073, 
// opcode: sb; op1:x10; op2:x11; op2val:-131073; immval:-513; align:0
TEST_STORE(x4,x6,0,x10,x11,-131073,-513,104,sb,0)

inst_47:
// rs2_val == -262145, 
// opcode: sb; op1:x10; op2:x11; op2val:-262145; immval:-9; align:0
TEST_STORE(x4,x6,0,x10,x11,-262145,-9,108,sb,0)

inst_48:
// rs2_val == -524289, 
// opcode: sb; op1:x10; op2:x11; op2val:-524289; immval:-513; align:0
TEST_STORE(x4,x6,0,x10,x11,-524289,-513,112,sb,0)

inst_49:
// rs2_val == -1048577, 
// opcode: sb; op1:x10; op2:x11; op2val:-1048577; immval:3; align:0
TEST_STORE(x4,x6,0,x10,x11,-1048577,3,116,sb,0)

inst_50:
// rs2_val == -2097153, 
// opcode: sb; op1:x10; op2:x11; op2val:-2097153; immval:1024; align:0
TEST_STORE(x4,x6,0,x10,x11,-2097153,1024,120,sb,0)

inst_51:
// rs2_val == -4194305, 
// opcode: sb; op1:x10; op2:x11; op2val:-4194305; immval:9; align:0
TEST_STORE(x4,x6,0,x10,x11,-4194305,9,124,sb,0)

inst_52:
// rs2_val == -8388609, 
// opcode: sb; op1:x10; op2:x11; op2val:-8388609; immval:4; align:0
TEST_STORE(x4,x6,0,x10,x11,-8388609,4,128,sb,0)

inst_53:
// rs2_val == -16777217, 
// opcode: sb; op1:x10; op2:x11; op2val:-16777217; immval:-17; align:0
TEST_STORE(x4,x6,0,x10,x11,-16777217,-17,132,sb,0)

inst_54:
// rs2_val == -33554433, 
// opcode: sb; op1:x10; op2:x11; op2val:-33554433; immval:256; align:0
TEST_STORE(x4,x6,0,x10,x11,-33554433,256,136,sb,0)

inst_55:
// rs2_val == -5, 
// opcode: sb; op1:x10; op2:x11; op2val:-5; immval:0; align:0
TEST_STORE(x4,x6,0,x10,x11,-5,0,140,sb,0)

inst_56:
// rs2_val == -67108865, 
// opcode: sb; op1:x10; op2:x11; op2val:-67108865; immval:2047; align:0
TEST_STORE(x4,x6,0,x10,x11,-67108865,2047,144,sb,0)

inst_57:
// rs2_val == -134217729, 
// opcode: sb; op1:x10; op2:x11; op2val:-134217729; immval:1024; align:0
TEST_STORE(x4,x6,0,x10,x11,-134217729,1024,148,sb,0)

inst_58:
// rs2_val == -268435457, 
// opcode: sb; op1:x10; op2:x11; op2val:-268435457; immval:2; align:0
TEST_STORE(x4,x6,0,x10,x11,-268435457,2,152,sb,0)

inst_59:
// rs2_val == 268435456, 
// opcode: sb; op1:x10; op2:x11; op2val:268435456; immval:-4; align:0
TEST_STORE(x4,x6,0,x10,x11,268435456,-4,156,sb,0)

inst_60:
// rs2_val == -536870913, 
// opcode: sb; op1:x10; op2:x11; op2val:-536870913; immval:4; align:0
TEST_STORE(x4,x6,0,x10,x11,-536870913,4,160,sb,0)

inst_61:
// rs2_val == 536870912, 
// opcode: sb; op1:x10; op2:x11; op2val:536870912; immval:-4; align:0
TEST_STORE(x4,x6,0,x10,x11,536870912,-4,164,sb,0)

inst_62:
// rs2_val == -1073741825, 
// opcode: sb; op1:x10; op2:x11; op2val:-1073741825; immval:6; align:0
TEST_STORE(x4,x6,0,x10,x11,-1073741825,6,168,sb,0)

inst_63:
// rs2_val == 1073741824, 
// opcode: sb; op1:x10; op2:x11; op2val:1073741824; immval:8; align:0
TEST_STORE(x4,x6,0,x10,x11,1073741824,8,172,sb,0)

inst_64:
// rs2_val == 1431655765, 
// opcode: sb; op1:x10; op2:x11; op2val:1431655765; immval:-1366; align:0
TEST_STORE(x4,x6,0,x10,x11,1431655765,-1366,176,sb,0)

inst_65:
// rs2_val == -2, 
// opcode: sb; op1:x10; op2:x11; op2val:-2; immval:-1025; align:0
TEST_STORE(x4,x6,0,x10,x11,-2,-1025,180,sb,0)

inst_66:
// rs2_val == -65, 
// opcode: sb; op1:x10; op2:x11; op2val:-65; immval:-6; align:0
TEST_STORE(x4,x6,0,x10,x11,-65,-6,184,sb,0)

inst_67:
// rs2_val == -3, 
// opcode: sb; op1:x10; op2:x11; op2val:-3; immval:-33; align:0
TEST_STORE(x4,x6,0,x10,x11,-3,-33,188,sb,0)

inst_68:
// rs2_val == -257, 
// opcode: sb; op1:x10; op2:x11; op2val:-257; immval:-1024; align:0
TEST_STORE(x4,x6,0,x10,x11,-257,-1024,192,sb,0)

inst_69:
// rs2_val == -513, 
// opcode: sb; op1:x10; op2:x11; op2val:-513; immval:-8; align:0
TEST_STORE(x4,x6,0,x10,x11,-513,-8,196,sb,0)

inst_70:
// ea_align == 2 and (imm_val % 4) == 3, rs2_val == 128
// opcode: sb; op1:x10; op2:x11; op2val:128; immval:-1; align:2
TEST_STORE(x4,x6,0,x10,x11,128,-1,200,sb,2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x1_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x1_1:
    .fill 20*(XLEN/32),4,0xdeadbeef


signature_x4_0:
    .fill 51*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
