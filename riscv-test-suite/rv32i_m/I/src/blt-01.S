 
// -----------
// This file was generated by riscv_ctg (https://gitlab.com/incoresemi/riscv-compliance/riscv_ctg)
// version   : 0.1.0
// timestamp : Fri Nov  6 10:29:11 2020 GMT
// usage     : riscv_ctg \
//                  -- cgf /scratch/git-repo/incoresemi/riscv-compliance/riscv_ctg/sample_cgfs/rv32i.cgf \
//                  -- xlen 32 \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the blt instruction of the RISC-V I extension for the blt covergroup.
// 
#include "compliance_model.h"
#include "compliance_test.h"
RVTEST_ISA("RV32I")

RVTEST_CODE_BEGIN
RVMODEL_BOOT

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*);def TEST_CASE_1=True;",blt)

RVTEST_SIGBASE( x21,signature_x21_1)

inst_0:
// rs1 == rs2, rs1==x15, rs2==x15, rs1_val > 0 and rs2_val > 0 and imm_val & 0x03 == 0, rs2_val == 128, rs1_val == 67108864, rs1_val > rs2_val and imm_val > 0 and imm_val & 0x03 == 0
// opcode: blt, op1:x15; op2:x15; op1val:67108864; op2val:128; immval:512; align:0
TEST_BRANCH_OP(blt, x23, x15, x15, 67108864, 128, 512, 3f, x21, 0,0)

inst_1:
// rs1 != rs2, rs1==x9, rs2==x1, rs1_val > 0 and rs2_val < 0 and imm_val & 0x03 == 0, rs1_val == 1073741824, rs2_val == -67108865
// opcode: blt, op1:x9; op2:x1; op1val:1073741824; op2val:-67108865; immval:512; align:0
TEST_BRANCH_OP(blt, x23, x9, x1, 1073741824, -67108865, 512, 3f, x21, 4,0)

inst_2:
// rs1==x5, rs2==x9, rs1_val < 0 and rs2_val < 0 and imm_val & 0x03 == 0, rs2_val == -16385, rs1_val == -33
// opcode: blt, op1:x5; op2:x9; op1val:-33; op2val:-16385; immval:16; align:0
TEST_BRANCH_OP(blt, x23, x5, x9, -33, -16385, 16, 3f, x21, 8,0)

inst_3:
// rs1==x28, rs2==x19, rs1_val < 0 and rs2_val > 0 and imm_val & 0x03 == 0, rs2_val == 4194304
// opcode: blt, op1:x28; op2:x19; op1val:-7; op2val:4194304; immval:0; align:0
TEST_BRANCH_OP(blt, x23, x28, x19, -7, 4194304, 0, 3f, x21, 12,0)

inst_4:
// rs1==x6, rs2==x8, rs1_val == rs2_val and imm_val > 0 and imm_val & 0x03 == 0, rs1_val == -16385
// opcode: blt, op1:x6; op2:x8; op1val:-16385; op2val:-16385; immval:256; align:0
TEST_BRANCH_OP(blt, x23, x6, x8, -16385, -16385, 256, 3f, x21, 16,0)

inst_5:
// rs1==x12, rs2==x2, rs1_val == rs2_val and imm_val < 0 and imm_val & 0x03 == 0, 
// opcode: blt, op1:x12; op2:x2; op1val:-1073741824; op2val:-1073741824; immval:1024; align:0
TEST_BRANCH_OP(blt, x23, x12, x2, -1073741824, -1073741824, 1024, 1b, x21, 20,0)

inst_6:
// rs1==x10, rs2==x20, rs1_val > rs2_val and imm_val < 0 and imm_val & 0x03 == 0, rs1_val == -268435457
// opcode: blt, op1:x10; op2:x20; op1val:-268435457; op2val:-1073741824; immval:1024; align:0
TEST_BRANCH_OP(blt, x23, x10, x20, -268435457, -1073741824, 1024, 1b, x21, 24,0)

inst_7:
// rs1==x0, rs2==x31, rs1_val < rs2_val and imm_val > 0 and imm_val & 0x03 == 0, rs1_val == -1073741825, rs2_val == 2097152
// opcode: blt, op1:x0; op2:x31; op1val:-1073741825; op2val:2097152; immval:32; align:0
TEST_BRANCH_OP(blt, x23, x0, x31, -1073741825, 2097152, 32, 3f, x21, 28,0)

inst_8:
// rs1==x17, rs2==x3, rs1_val < rs2_val and imm_val < 0 and imm_val & 0x03 == 0, rs1_val == -1431655766, rs2_val == -131073
// opcode: blt, op1:x17; op2:x3; op1val:-1431655766; op2val:-131073; immval:1024; align:0
TEST_BRANCH_OP(blt, x23, x17, x3, -1431655766, -131073, 1024, 1b, x21, 32,0)

inst_9:
// rs1==x14, rs2==x4, rs1_val == 1, rs2_val == 32768
// opcode: blt, op1:x14; op2:x4; op1val:1; op2val:32768; immval:1024; align:0
TEST_BRANCH_OP(blt, x23, x14, x4, 1, 32768, 1024, 1b, x21, 36,0)

inst_10:
// rs1==x4, rs2==x26, rs1_val == 2, rs2_val == -2147483648
// opcode: blt, op1:x4; op2:x26; op1val:2; op2val:-2147483648; immval:6; align:0
TEST_BRANCH_OP(blt, x23, x4, x26, 2, -2147483648, 6, 1b, x21, 40,0)

inst_11:
// rs1==x2, rs2==x27, rs1_val == 4, rs2_val == 1024
// opcode: blt, op1:x2; op2:x27; op1val:4; op2val:1024; immval:8; align:0
TEST_BRANCH_OP(blt, x23, x2, x27, 4, 1024, 8, 1b, x21, 44,0)

inst_12:
// rs1==x8, rs2==x13, rs1_val == 8, 
// opcode: blt, op1:x8; op2:x13; op1val:8; op2val:-8; immval:1366; align:0
TEST_BRANCH_OP(blt, x23, x8, x13, 8, -8, 1366, 1b, x21, 48,0)

inst_13:
// rs1==x7, rs2==x11, rs1_val == 16, rs2_val == 262144
// opcode: blt, op1:x7; op2:x11; op1val:16; op2val:262144; immval:512; align:0
TEST_BRANCH_OP(blt, x23, x7, x11, 16, 262144, 512, 3f, x21, 52,0)

inst_14:
// rs1==x16, rs2==x25, rs1_val == 32, rs2_val == -17
// opcode: blt, op1:x16; op2:x25; op1val:32; op2val:-17; immval:1024; align:0
TEST_BRANCH_OP(blt, x23, x16, x25, 32, -17, 1024, 3f, x21, 56,0)

inst_15:
// rs1==x25, rs2==x29, rs1_val == 64, rs2_val == 65536
// opcode: blt, op1:x25; op2:x29; op1val:64; op2val:65536; immval:32; align:0
TEST_BRANCH_OP(blt, x23, x25, x29, 64, 65536, 32, 3f, x21, 60,0)

inst_16:
// rs1==x18, rs2==x16, rs1_val == 128, rs2_val == -3
// opcode: blt, op1:x18; op2:x16; op1val:128; op2val:-3; immval:8; align:0
TEST_BRANCH_OP(blt, x23, x18, x16, 128, -3, 8, 3f, x21, 64,0)

inst_17:
// rs1==x1, rs2==x5, rs1_val == 256, rs2_val == -65
// opcode: blt, op1:x1; op2:x5; op1val:256; op2val:-65; immval:0; align:0
TEST_BRANCH_OP(blt, x23, x1, x5, 256, -65, 0, 3f, x21, 68,0)

inst_18:
// rs1==x13, rs2==x18, rs1_val == 512, rs2_val == 4096
// opcode: blt, op1:x13; op2:x18; op1val:512; op2val:4096; immval:2; align:0
TEST_BRANCH_OP(blt, x23, x13, x18, 512, 4096, 2, 1b, x21, 72,0)

inst_19:
// rs1==x27, rs2==x12, rs1_val == 1024, rs2_val == 8
// opcode: blt, op1:x27; op2:x12; op1val:1024; op2val:8; immval:0; align:0
TEST_BRANCH_OP(blt, x23, x27, x12, 1024, 8, 0, 1b, x21, 76,0)

inst_20:
// rs1==x22, rs2==x0, rs1_val == 2048, rs2_val == -536870913
// opcode: blt, op1:x22; op2:x0; op1val:2048; op2val:-536870913; immval:1024; align:0
TEST_BRANCH_OP(blt, x23, x22, x0, 2048, -536870913, 1024, 3f, x21, 80,0)

inst_21:
// rs1==x24, rs2==x17, rs1_val == 4096, rs2_val == 16
// opcode: blt, op1:x24; op2:x17; op1val:4096; op2val:16; immval:4; align:0
TEST_BRANCH_OP(blt, x2, x24, x17, 4096, 16, 4, 3f, x21, 84,0)
RVTEST_SIGBASE( x1,signature_x1_0)

inst_22:
// rs1==x29, rs2==x10, rs1_val == 8192, rs2_val == 16384
// opcode: blt, op1:x29; op2:x10; op1val:8192; op2val:16384; immval:6; align:0
TEST_BRANCH_OP(blt, x2, x29, x10, 8192, 16384, 6, 3f, x1, 0,0)

inst_23:
// rs1==x19, rs2==x21, rs1_val == 16384, rs2_val == 268435456
// opcode: blt, op1:x19; op2:x21; op1val:16384; op2val:268435456; immval:128; align:0
TEST_BRANCH_OP(blt, x2, x19, x21, 16384, 268435456, 128, 3f, x1, 4,0)

inst_24:
// rs1==x30, rs2==x23, rs1_val == 32768, rs2_val == -513
// opcode: blt, op1:x30; op2:x23; op1val:32768; op2val:-513; immval:4; align:0
TEST_BRANCH_OP(blt, x2, x30, x23, 32768, -513, 4, 3f, x1, 8,0)

inst_25:
// rs1==x26, rs2==x24, rs1_val == 65536, 
// opcode: blt, op1:x26; op2:x24; op1val:65536; op2val:-8; immval:256; align:0
TEST_BRANCH_OP(blt, x2, x26, x24, 65536, -8, 256, 3f, x1, 12,0)

inst_26:
// rs1==x11, rs2==x6, rs1_val == 131072, 
// opcode: blt, op1:x11; op2:x6; op1val:131072; op2val:128; immval:128; align:0
TEST_BRANCH_OP(blt, x2, x11, x6, 131072, 128, 128, 3f, x1, 16,0)

inst_27:
// rs1==x21, rs2==x7, rs1_val == 262144, 
// opcode: blt, op1:x21; op2:x7; op1val:262144; op2val:16384; immval:256; align:0
TEST_BRANCH_OP(blt, x2, x21, x7, 262144, 16384, 256, 3f, x1, 20,0)

inst_28:
// rs1==x23, rs2==x22, rs1_val == 524288, rs2_val == -4097
// opcode: blt, op1:x23; op2:x22; op1val:524288; op2val:-4097; immval:256; align:0
TEST_BRANCH_OP(blt, x2, x23, x22, 524288, -4097, 256, 3f, x1, 24,0)

inst_29:
// rs1==x20, rs2==x28, rs1_val == 1048576, rs2_val == 1048576
// opcode: blt, op1:x20; op2:x28; op1val:1048576; op2val:1048576; immval:4; align:0
TEST_BRANCH_OP(blt, x2, x20, x28, 1048576, 1048576, 4, 1b, x1, 28,0)

inst_30:
// rs1==x3, rs2==x14, rs1_val == 2097152, rs2_val == 2147483647
// opcode: blt, op1:x3; op2:x14; op1val:2097152; op2val:2147483647; immval:256; align:0
TEST_BRANCH_OP(blt, x2, x3, x14, 2097152, 2147483647, 256, 3f, x1, 32,0)

inst_31:
// rs1==x31, rs2==x30, rs1_val == 4194304, rs2_val == -9
// opcode: blt, op1:x31; op2:x30; op1val:4194304; op2val:-9; immval:6; align:0
TEST_BRANCH_OP(blt, x2, x31, x30, 4194304, -9, 6, 3f, x1, 36,0)

inst_32:
// rs1_val == 8388608, rs2_val == -16777217
// opcode: blt, op1:x10; op2:x11; op1val:8388608; op2val:-16777217; immval:256; align:0
TEST_BRANCH_OP(blt, x2, x10, x11, 8388608, -16777217, 256, 3f, x1, 40,0)

inst_33:
// rs1_val == 16777216, rs2_val == 2048
// opcode: blt, op1:x10; op2:x11; op1val:16777216; op2val:2048; immval:8; align:0
TEST_BRANCH_OP(blt, x2, x10, x11, 16777216, 2048, 8, 1b, x1, 44,0)

inst_34:
// rs1_val == 33554432, 
// opcode: blt, op1:x10; op2:x11; op1val:33554432; op2val:-4097; immval:0; align:0
TEST_BRANCH_OP(blt, x2, x10, x11, 33554432, -4097, 0, 3f, x1, 48,0)

inst_35:
// rs1_val == 134217728, 
// opcode: blt, op1:x10; op2:x11; op1val:134217728; op2val:-4097; immval:0; align:0
TEST_BRANCH_OP(blt, x2, x10, x11, 134217728, -4097, 0, 3f, x1, 52,0)

inst_36:
// rs1_val == 268435456, 
// opcode: blt, op1:x10; op2:x11; op1val:268435456; op2val:128; immval:4; align:0
TEST_BRANCH_OP(blt, x2, x10, x11, 268435456, 128, 4, 1b, x1, 56,0)

inst_37:
// rs1_val == 536870912, 
// opcode: blt, op1:x10; op2:x11; op1val:536870912; op2val:-1073741824; immval:512; align:0
TEST_BRANCH_OP(blt, x2, x10, x11, 536870912, -1073741824, 512, 3f, x1, 60,0)

inst_38:
// rs1_val == -2147483648, rs2_val == 524288
// opcode: blt, op1:x10; op2:x11; op1val:-2147483648; op2val:524288; immval:4; align:0
TEST_BRANCH_OP(blt, x2, x10, x11, -2147483648, 524288, 4, 1b, x1, 64,0)

inst_39:
// rs1_val == -2, 
// opcode: blt, op1:x10; op2:x11; op1val:-2; op2val:-7; immval:1024; align:0
TEST_BRANCH_OP(blt, x2, x10, x11, -2, -7, 1024, 1b, x1, 68,0)

inst_40:
// rs1_val == -3, rs2_val == 32
// opcode: blt, op1:x10; op2:x11; op1val:-3; op2val:32; immval:1024; align:0
TEST_BRANCH_OP(blt, x2, x10, x11, -3, 32, 1024, 3f, x1, 72,0)

inst_41:
// rs1_val == -5, rs2_val == 536870912
// opcode: blt, op1:x10; op2:x11; op1val:-5; op2val:536870912; immval:64; align:0
TEST_BRANCH_OP(blt, x2, x10, x11, -5, 536870912, 64, 3f, x1, 76,0)

inst_42:
// rs2_val == -1048577, rs1_val == -129
// opcode: blt, op1:x10; op2:x11; op1val:-129; op2val:-1048577; immval:2; align:0
TEST_BRANCH_OP(blt, x2, x10, x11, -129, -1048577, 2, 1b, x1, 80,0)

inst_43:
// rs2_val == -2097153, rs1_val == -33554433
// opcode: blt, op1:x10; op2:x11; op1val:-33554433; op2val:-2097153; immval:512; align:0
TEST_BRANCH_OP(blt, x2, x10, x11, -33554433, -2097153, 512, 3f, x1, 84,0)

inst_44:
// rs2_val == -4194305, rs1_val == -513
// opcode: blt, op1:x10; op2:x11; op1val:-513; op2val:-4194305; immval:0; align:0
TEST_BRANCH_OP(blt, x2, x10, x11, -513, -4194305, 0, 3f, x1, 88,0)

inst_45:
// rs2_val == -8388609, 
// opcode: blt, op1:x10; op2:x11; op1val:67108864; op2val:-8388609; immval:10; align:0
TEST_BRANCH_OP(blt, x2, x10, x11, 67108864, -8388609, 10, 1b, x1, 92,0)

inst_46:
// rs2_val == -33554433, 
// opcode: blt, op1:x10; op2:x11; op1val:-1073741825; op2val:-33554433; immval:0; align:0
TEST_BRANCH_OP(blt, x2, x10, x11, -1073741825, -33554433, 0, 3f, x1, 96,0)

inst_47:
// rs2_val == -134217729, 
// opcode: blt, op1:x10; op2:x11; op1val:32; op2val:-134217729; immval:32; align:0
TEST_BRANCH_OP(blt, x2, x10, x11, 32, -134217729, 32, 3f, x1, 100,0)

inst_48:
// rs2_val == -268435457, rs1_val == -131073
// opcode: blt, op1:x10; op2:x11; op1val:-131073; op2val:-268435457; immval:64; align:0
TEST_BRANCH_OP(blt, x2, x10, x11, -131073, -268435457, 64, 3f, x1, 104,0)

inst_49:
// rs2_val == -1073741825, 
// opcode: blt, op1:x10; op2:x11; op1val:8388608; op2val:-1073741825; immval:1024; align:0
TEST_BRANCH_OP(blt, x2, x10, x11, 8388608, -1073741825, 1024, 1b, x1, 108,0)

inst_50:
// rs2_val == 1431655765, 
// opcode: blt, op1:x10; op2:x11; op1val:-3; op2val:1431655765; immval:2; align:0
TEST_BRANCH_OP(blt, x2, x10, x11, -3, 1431655765, 2, 3f, x1, 112,0)

inst_51:
// rs2_val == -1431655766, 
// opcode: blt, op1:x10; op2:x11; op1val:-131073; op2val:-1431655766; immval:1366; align:0
TEST_BRANCH_OP(blt, x2, x10, x11, -131073, -1431655766, 1366, 1b, x1, 116,0)

inst_52:
// rs1_val == -9, 
// opcode: blt, op1:x10; op2:x11; op1val:-9; op2val:-7; immval:64; align:0
TEST_BRANCH_OP(blt, x2, x10, x11, -9, -7, 64, 3f, x1, 120,0)

inst_53:
// rs1_val == -17, rs2_val == -65537
// opcode: blt, op1:x10; op2:x11; op1val:-17; op2val:-65537; immval:16; align:0
TEST_BRANCH_OP(blt, x2, x10, x11, -17, -65537, 16, 3f, x1, 124,0)

inst_54:
// rs1_val == -65, rs2_val == -33
// opcode: blt, op1:x10; op2:x11; op1val:-65; op2val:-33; immval:0; align:0
TEST_BRANCH_OP(blt, x2, x10, x11, -65, -33, 0, 1b, x1, 128,0)

inst_55:
// rs1_val == -257, rs2_val == 256
// opcode: blt, op1:x10; op2:x11; op1val:-257; op2val:256; immval:6; align:0
TEST_BRANCH_OP(blt, x2, x10, x11, -257, 256, 6, 1b, x1, 132,0)

inst_56:
// rs1_val == -1025, 
// opcode: blt, op1:x10; op2:x11; op1val:-1025; op2val:-33; immval:6; align:0
TEST_BRANCH_OP(blt, x2, x10, x11, -1025, -33, 6, 3f, x1, 136,0)

inst_57:
// rs1_val == -2049, rs2_val == -2049
// opcode: blt, op1:x10; op2:x11; op1val:-2049; op2val:-2049; immval:0; align:0
TEST_BRANCH_OP(blt, x2, x10, x11, -2049, -2049, 0, 3f, x1, 140,0)

inst_58:
// rs1_val == -4097, 
// opcode: blt, op1:x10; op2:x11; op1val:-4097; op2val:-8388609; immval:1366; align:0
TEST_BRANCH_OP(blt, x2, x10, x11, -4097, -8388609, 1366, 1b, x1, 144,0)

inst_59:
// rs1_val == -8193, rs2_val == 33554432
// opcode: blt, op1:x10; op2:x11; op1val:-8193; op2val:33554432; immval:6; align:0
TEST_BRANCH_OP(blt, x2, x10, x11, -8193, 33554432, 6, 3f, x1, 148,0)

inst_60:
// rs1_val == -32769, 
// opcode: blt, op1:x10; op2:x11; op1val:-32769; op2val:-65; immval:6; align:0
TEST_BRANCH_OP(blt, x2, x10, x11, -32769, -65, 6, 3f, x1, 152,0)

inst_61:
// rs1_val == -65537, 
// opcode: blt, op1:x10; op2:x11; op1val:-65537; op2val:32; immval:1366; align:0
TEST_BRANCH_OP(blt, x2, x10, x11, -65537, 32, 1366, 1b, x1, 156,0)

inst_62:
// rs1_val == -262145, 
// opcode: blt, op1:x10; op2:x11; op1val:-262145; op2val:-1073741824; immval:256; align:0
TEST_BRANCH_OP(blt, x2, x10, x11, -262145, -1073741824, 256, 3f, x1, 160,0)

inst_63:
// rs1_val == -524289, 
// opcode: blt, op1:x10; op2:x11; op1val:-524289; op2val:-8; immval:10; align:0
TEST_BRANCH_OP(blt, x2, x10, x11, -524289, -8, 10, 1b, x1, 164,0)

inst_64:
// rs1_val == -4194305, 
// opcode: blt, op1:x10; op2:x11; op1val:-4194305; op2val:33554432; immval:8; align:0
TEST_BRANCH_OP(blt, x2, x10, x11, -4194305, 33554432, 8, 1b, x1, 168,0)

inst_65:
// rs1_val == -8388609, 
// opcode: blt, op1:x10; op2:x11; op1val:-8388609; op2val:-33554433; immval:0; align:0
TEST_BRANCH_OP(blt, x2, x10, x11, -8388609, -33554433, 0, 3f, x1, 172,0)

inst_66:
// rs1_val == -16777217, rs2_val == -257
// opcode: blt, op1:x10; op2:x11; op1val:-16777217; op2val:-257; immval:1024; align:0
TEST_BRANCH_OP(blt, x2, x10, x11, -16777217, -257, 1024, 3f, x1, 176,0)

inst_67:
// rs1_val == -67108865, rs2_val == 134217728
// opcode: blt, op1:x10; op2:x11; op1val:-67108865; op2val:134217728; immval:64; align:0
TEST_BRANCH_OP(blt, x2, x10, x11, -67108865, 134217728, 64, 3f, x1, 180,0)

inst_68:
// rs1_val == -134217729, 
// opcode: blt, op1:x10; op2:x11; op1val:-134217729; op2val:1024; immval:16; align:0
TEST_BRANCH_OP(blt, x2, x10, x11, -134217729, 1024, 16, 3f, x1, 184,0)

inst_69:
// rs1_val == -536870913, 
// opcode: blt, op1:x10; op2:x11; op1val:-536870913; op2val:-1073741825; immval:6; align:0
TEST_BRANCH_OP(blt, x2, x10, x11, -536870913, -1073741825, 6, 3f, x1, 188,0)

inst_70:
// rs1_val == 2147483647, 
// opcode: blt, op1:x10; op2:x11; op1val:2147483647; op2val:-65; immval:0; align:0
TEST_BRANCH_OP(blt, x2, x10, x11, 2147483647, -65, 0, 3f, x1, 192,0)

inst_71:
// rs1_val == 1431655765, 
// opcode: blt, op1:x10; op2:x11; op1val:1431655765; op2val:-4194305; immval:2; align:0
TEST_BRANCH_OP(blt, x2, x10, x11, 1431655765, -4194305, 2, 1b, x1, 196,0)

inst_72:
// rs2_val == 1, 
// opcode: blt, op1:x10; op2:x11; op1val:524288; op2val:1; immval:8; align:0
TEST_BRANCH_OP(blt, x2, x10, x11, 524288, 1, 8, 1b, x1, 200,0)

inst_73:
// rs2_val == 2, 
// opcode: blt, op1:x10; op2:x11; op1val:-9; op2val:2; immval:64; align:0
TEST_BRANCH_OP(blt, x2, x10, x11, -9, 2, 64, 3f, x1, 204,0)

inst_74:
// rs2_val == 4, 
// opcode: blt, op1:x10; op2:x11; op1val:65536; op2val:4; immval:512; align:0
TEST_BRANCH_OP(blt, x2, x10, x11, 65536, 4, 512, 3f, x1, 208,0)

inst_75:
// rs2_val == 64, 
// opcode: blt, op1:x10; op2:x11; op1val:-8193; op2val:64; immval:8; align:0
TEST_BRANCH_OP(blt, x2, x10, x11, -8193, 64, 8, 1b, x1, 212,0)

inst_76:
// rs2_val == 512, 
// opcode: blt, op1:x10; op2:x11; op1val:-6; op2val:512; immval:512; align:0
TEST_BRANCH_OP(blt, x2, x10, x11, -6, 512, 512, 3f, x1, 216,0)

inst_77:
// rs2_val == 8192, 
// opcode: blt, op1:x10; op2:x11; op1val:16777216; op2val:8192; immval:512; align:0
TEST_BRANCH_OP(blt, x2, x10, x11, 16777216, 8192, 512, 3f, x1, 220,0)

inst_78:
// rs2_val == 8388608, 
// opcode: blt, op1:x10; op2:x11; op1val:-536870913; op2val:8388608; immval:6; align:0
TEST_BRANCH_OP(blt, x2, x10, x11, -536870913, 8388608, 6, 1b, x1, 224,0)

inst_79:
// rs2_val == 16777216, 
// opcode: blt, op1:x10; op2:x11; op1val:131072; op2val:16777216; immval:1024; align:0
TEST_BRANCH_OP(blt, x2, x10, x11, 131072, 16777216, 1024, 1b, x1, 228,0)

inst_80:
// rs2_val == 67108864, 
// opcode: blt, op1:x10; op2:x11; op1val:6; op2val:67108864; immval:6; align:0
TEST_BRANCH_OP(blt, x2, x10, x11, 6, 67108864, 6, 1b, x1, 232,0)

inst_81:
// rs2_val == 1073741824, 
// opcode: blt, op1:x10; op2:x11; op1val:32768; op2val:1073741824; immval:0; align:0
TEST_BRANCH_OP(blt, x2, x10, x11, 32768, 1073741824, 0, 1b, x1, 236,0)

inst_82:
// rs2_val == -2, 
// opcode: blt, op1:x10; op2:x11; op1val:256; op2val:-2; immval:64; align:0
TEST_BRANCH_OP(blt, x2, x10, x11, 256, -2, 64, 3f, x1, 240,0)

inst_83:
// rs2_val == -5, 
// opcode: blt, op1:x10; op2:x11; op1val:-1073741824; op2val:-5; immval:512; align:0
TEST_BRANCH_OP(blt, x2, x10, x11, -1073741824, -5, 512, 3f, x1, 244,0)

inst_84:
// rs2_val == -129, 
// opcode: blt, op1:x10; op2:x11; op1val:-257; op2val:-129; immval:16; align:0
TEST_BRANCH_OP(blt, x2, x10, x11, -257, -129, 16, 3f, x1, 248,0)

inst_85:
// rs1_val == -2097153, 
// opcode: blt, op1:x10; op2:x11; op1val:-2097153; op2val:-65537; immval:256; align:0
TEST_BRANCH_OP(blt, x2, x10, x11, -2097153, -65537, 256, 3f, x1, 252,0)

inst_86:
// rs2_val == -1025, 
// opcode: blt, op1:x10; op2:x11; op1val:-8; op2val:-1025; immval:6; align:0
TEST_BRANCH_OP(blt, x2, x10, x11, -8, -1025, 6, 3f, x1, 256,0)

inst_87:
// rs1_val == -1048577, 
// opcode: blt, op1:x10; op2:x11; op1val:-1048577; op2val:-1025; immval:2; align:0
TEST_BRANCH_OP(blt, x2, x10, x11, -1048577, -1025, 2, 3f, x1, 260,0)

inst_88:
// rs2_val == -8193, 
// opcode: blt, op1:x10; op2:x11; op1val:-32769; op2val:-8193; immval:256; align:0
TEST_BRANCH_OP(blt, x2, x10, x11, -32769, -8193, 256, 3f, x1, 264,0)

inst_89:
// rs2_val == -32769, 
// opcode: blt, op1:x10; op2:x11; op1val:1024; op2val:-32769; immval:6; align:0
TEST_BRANCH_OP(blt, x2, x10, x11, 1024, -32769, 6, 1b, x1, 268,0)

inst_90:
// rs2_val == 131072, 
// opcode: blt, op1:x10; op2:x11; op1val:-10; op2val:131072; immval:6; align:0
TEST_BRANCH_OP(blt, x2, x10, x11, -10, 131072, 6, 1b, x1, 272,0)

inst_91:
// rs2_val == -262145, 
// opcode: blt, op1:x10; op2:x11; op1val:-129; op2val:-262145; immval:64; align:0
TEST_BRANCH_OP(blt, x2, x10, x11, -129, -262145, 64, 3f, x1, 276,0)

inst_92:
// rs2_val == -524289, 
// opcode: blt, op1:x10; op2:x11; op1val:-33554433; op2val:-524289; immval:32; align:0
TEST_BRANCH_OP(blt, x2, x10, x11, -33554433, -524289, 32, 3f, x1, 280,0)

inst_93:
// rs1_val < rs2_val and imm_val > 0 and imm_val & 0x03 == 0, rs1_val == -1073741825, rs2_val == 2097152
// opcode: blt, op1:x10; op2:x11; op1val:-1073741825; op2val:2097152; immval:32; align:0
TEST_BRANCH_OP(blt, x2, x10, x11, -1073741825, 2097152, 32, 3f, x1, 284,0)

inst_94:
// rs1_val == 2048, rs2_val == -536870913
// opcode: blt, op1:x10; op2:x11; op1val:2048; op2val:-536870913; immval:1024; align:0
TEST_BRANCH_OP(blt, x2, x10, x11, 2048, -536870913, 1024, 3f, x1, 288,0)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x21_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x21_1:
    .fill 22*(XLEN/32),4,0xdeadbeef


signature_x1_0:
    .fill 73*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
