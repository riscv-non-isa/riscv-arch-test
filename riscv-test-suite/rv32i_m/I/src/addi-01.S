
// -----------
// This file was generated by riscv_ctg (https://gitlab.com/incoresemi/riscv-compliance/riscv_ctg)
// version   : 0.4.0
// timestamp : Fri Dec  4 15:11:13 2020 GMT
// usage     : riscv_ctg \
//                  -- cgf ('/scratch/git-repo/incoresemi/riscv-compliance/riscv_ctg/sample_cgfs/dataset.cgf', '/scratch/git-repo/incoresemi/riscv-compliance/riscv_ctg/sample_cgfs/rv32i.cgf') \
//                  -- xlen 32 \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the addi instruction of the RISC-V I extension for the addi covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32I")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*);def TEST_CASE_1=True;",addi)

RVTEST_SIGBASE( x7,signature_x7_1)

inst_0:
// rs1 != rd, rs1==x2, rd==x25, imm_val == (-2**(12-1)), imm_val == -2048, rs1_val != imm_val, rs1_val == 0
// opcode: addi ; op1:x2; dest:x25; op1val:0x0;  immval:-0x800
TEST_IMM_OP( addi, x25, x2, 0xfffff800, 0x0, -0x800, x7, 0, x3)

inst_1:
// rs1 == rd, rs1==x1, rd==x1, imm_val == 0, rs1_val == -2049
// opcode: addi ; op1:x1; dest:x1; op1val:-0x801;  immval:0x0
TEST_IMM_OP( addi, x1, x1, 0xfffff7ff, -0x801, 0x0, x7, 4, x3)

inst_2:
// rs1==x19, rd==x22, imm_val == (2**(12-1)-1), rs1_val > 0 and imm_val > 0, imm_val == 2047, rs1_val == 64
// opcode: addi ; op1:x19; dest:x22; op1val:0x40;  immval:0x7ff
TEST_IMM_OP( addi, x22, x19, 0x83f, 0x40, 0x7ff, x7, 8, x3)

inst_3:
// rs1==x31, rd==x24, imm_val == 1, rs1_val == -2097153, rs1_val < 0 and imm_val > 0
// opcode: addi ; op1:x31; dest:x24; op1val:-0x200001;  immval:0x1
TEST_IMM_OP( addi, x24, x31, 0xffe00000, -0x200001, 0x1, x7, 12, x3)

inst_4:
// rs1==x22, rd==x13, rs1_val == (-2**(xlen-1)), rs1_val == -2147483648
// opcode: addi ; op1:x22; dest:x13; op1val:-0x80000000;  immval:0x1
TEST_IMM_OP( addi, x13, x22, 0x80000001, -0x80000000, 0x1, x7, 16, x3)

inst_5:
// rs1==x15, rd==x30, rs1_val == (2**(xlen-1)-1), imm_val == -1025, rs1_val > 0 and imm_val < 0, rs1_val == 2147483647
// opcode: addi ; op1:x15; dest:x30; op1val:0x7fffffff;  immval:-0x401
TEST_IMM_OP( addi, x30, x15, 0x7ffffbfe, 0x7fffffff, -0x401, x7, 20, x3)

inst_6:
// rs1==x0, rd==x9, rs1_val == 1, imm_val == 32
// opcode: addi ; op1:x0; dest:x9; op1val:0x1;  immval:0x20
TEST_IMM_OP( addi, x9, x0, 0x21, 0x1, 0x20, x7, 24, x3)

inst_7:
// rs1==x8, rd==x15, rs1_val == imm_val, rs1_val < 0 and imm_val < 0
// opcode: addi ; op1:x8; dest:x15; op1val:-0x7;  immval:-0x7
TEST_IMM_OP( addi, x15, x8, 0xfffffff2, -0x7, -0x7, x7, 28, x3)

inst_8:
// rs1==x6, rd==x18, imm_val == 2, rs1_val==0 and imm_val==2
// opcode: addi ; op1:x6; dest:x18; op1val:0x0;  immval:0x2
TEST_IMM_OP( addi, x18, x6, 0x2, 0x0, 0x2, x7, 32, x3)

inst_9:
// rs1==x29, rd==x14, imm_val == 4, rs1_val == 67108864
// opcode: addi ; op1:x29; dest:x14; op1val:0x4000000;  immval:0x4
TEST_IMM_OP( addi, x14, x29, 0x4000004, 0x4000000, 0x4, x7, 36, x3)

inst_10:
// rs1==x4, rd==x2, imm_val == 8, rs1_val == 8
// opcode: addi ; op1:x4; dest:x2; op1val:0x8;  immval:0x8
TEST_IMM_OP( addi, x2, x4, 0x10, 0x8, 0x8, x7, 40, x3)

inst_11:
// rs1==x21, rd==x5, imm_val == 16, rs1_val == 4
// opcode: addi ; op1:x21; dest:x5; op1val:0x4;  immval:0x10
TEST_IMM_OP( addi, x5, x21, 0x14, 0x4, 0x10, x7, 44, x3)

inst_12:
// rs1==x25, rd==x11, imm_val == 64, 
// opcode: addi ; op1:x25; dest:x11; op1val:0x7fffffff;  immval:0x40
TEST_IMM_OP( addi, x11, x25, 0x8000003f, 0x7fffffff, 0x40, x7, 48, x3)

inst_13:
// rs1==x26, rd==x8, imm_val == 128, rs1_val == -5
// opcode: addi ; op1:x26; dest:x8; op1val:-0x5;  immval:0x80
TEST_IMM_OP( addi, x8, x26, 0x7b, -0x5, 0x80, x7, 52, x3)

inst_14:
// rs1==x17, rd==x21, imm_val == 256, 
// opcode: addi ; op1:x17; dest:x21; op1val:0xb504;  immval:0x100
TEST_IMM_OP( addi, x21, x17, 0xb604, 0xb504, 0x100, x7, 56, x3)

inst_15:
// rs1==x12, rd==x29, imm_val == 512, rs1_val == 16777216
// opcode: addi ; op1:x12; dest:x29; op1val:0x1000000;  immval:0x200
TEST_IMM_OP( addi, x29, x12, 0x1000200, 0x1000000, 0x200, x7, 60, x3)

inst_16:
// rs1==x20, rd==x16, imm_val == 1024, rs1_val == -8193
// opcode: addi ; op1:x20; dest:x16; op1val:-0x2001;  immval:0x400
TEST_IMM_OP( addi, x16, x20, 0xffffe3ff, -0x2001, 0x400, x7, 64, x3)

inst_17:
// rs1==x10, rd==x28, imm_val == -2, 
// opcode: addi ; op1:x10; dest:x28; op1val:-0x55555555;  immval:-0x2
TEST_IMM_OP( addi, x28, x10, 0xaaaaaaa9, -0x55555555, -0x2, x7, 68, x3)

inst_18:
// rs1==x5, rd==x20, imm_val == -3, 
// opcode: addi ; op1:x5; dest:x20; op1val:0x4000000;  immval:-0x3
TEST_IMM_OP( addi, x20, x5, 0x3fffffd, 0x4000000, -0x3, x7, 72, x2)

inst_19:
// rs1==x9, rd==x3, imm_val == -5, 
// opcode: addi ; op1:x9; dest:x3; op1val:-0x7;  immval:-0x5
TEST_IMM_OP( addi, x3, x9, 0xfffffff4, -0x7, -0x5, x7, 76, x2)
RVTEST_SIGBASE( x1,signature_x1_0)

inst_20:
// rs1==x23, rd==x10, imm_val == -9, rs1_val == -536870913
// opcode: addi ; op1:x23; dest:x10; op1val:-0x20000001;  immval:-0x9
TEST_IMM_OP( addi, x10, x23, 0xdffffff6, -0x20000001, -0x9, x1, 0, x2)

inst_21:
// rs1==x30, rd==x26, imm_val == -17, rs1_val == -8388609
// opcode: addi ; op1:x30; dest:x26; op1val:-0x800001;  immval:-0x11
TEST_IMM_OP( addi, x26, x30, 0xff7fffee, -0x800001, -0x11, x1, 4, x2)

inst_22:
// rs1==x7, rd==x12, imm_val == -33, rs1_val == -33
// opcode: addi ; op1:x7; dest:x12; op1val:-0x21;  immval:-0x21
TEST_IMM_OP( addi, x12, x7, 0xffffffbe, -0x21, -0x21, x1, 8, x2)

inst_23:
// rs1==x3, rd==x6, imm_val == -65, rs1_val == -134217729
// opcode: addi ; op1:x3; dest:x6; op1val:-0x8000001;  immval:-0x41
TEST_IMM_OP( addi, x6, x3, 0xf7ffffbe, -0x8000001, -0x41, x1, 12, x2)

inst_24:
// rs1==x28, rd==x19, imm_val == -129, 
// opcode: addi ; op1:x28; dest:x19; op1val:0x9;  immval:-0x81
TEST_IMM_OP( addi, x19, x28, 0xffffff88, 0x9, -0x81, x1, 16, x2)

inst_25:
// rs1==x16, rd==x0, imm_val == -257, 
// opcode: addi ; op1:x16; dest:x0; op1val:0x33333332;  immval:-0x101
TEST_IMM_OP( addi, x0, x16, 0x33333231, 0x33333332, -0x101, x1, 20, x2)

inst_26:
// rs1==x11, rd==x17, imm_val == -513, rs1_val == -3
// opcode: addi ; op1:x11; dest:x17; op1val:-0x3;  immval:-0x201
TEST_IMM_OP( addi, x17, x11, 0xfffffdfc, -0x3, -0x201, x1, 24, x2)

inst_27:
// rs1==x24, rd==x23, imm_val == 1365, 
// opcode: addi ; op1:x24; dest:x23; op1val:0x7;  immval:0x555
TEST_IMM_OP( addi, x23, x24, 0x55c, 0x7, 0x555, x1, 28, x2)

inst_28:
// rs1==x13, rd==x7, imm_val == -1366, rs1_val == -33554433
// opcode: addi ; op1:x13; dest:x7; op1val:-0x2000001;  immval:-0x556
TEST_IMM_OP( addi, x7, x13, 0xfdfffaa9, -0x2000001, -0x556, x1, 32, x2)

inst_29:
// rs1==x27, rd==x4, rs1_val == 2, 
// opcode: addi ; op1:x27; dest:x4; op1val:0x2;  immval:0x9
TEST_IMM_OP( addi, x4, x27, 0xb, 0x2, 0x9, x1, 36, x2)

inst_30:
// rs1==x14, rd==x31, rs1_val == 16, 
// opcode: addi ; op1:x14; dest:x31; op1val:0x10;  immval:0x5
TEST_IMM_OP( addi, x31, x14, 0x15, 0x10, 0x5, x1, 40, x2)

inst_31:
// rs1==x18, rd==x27, rs1_val == 32, 
// opcode: addi ; op1:x18; dest:x27; op1val:0x20;  immval:-0x400
TEST_IMM_OP( addi, x27, x18, 0xfffffc20, 0x20, -0x400, x1, 44, x2)

inst_32:
// rs1_val == 128, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x80;  immval:-0x201
TEST_IMM_OP( addi, x11, x10, 0xfffffe7f, 0x80, -0x201, x1, 48, x2)

inst_33:
// rs1_val == 256, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x100;  immval:0x40
TEST_IMM_OP( addi, x11, x10, 0x140, 0x100, 0x40, x1, 52, x2)

inst_34:
// rs1_val == 512, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x200;  immval:0x4
TEST_IMM_OP( addi, x11, x10, 0x204, 0x200, 0x4, x1, 56, x2)

inst_35:
// rs1_val == 1024, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x400;  immval:0x40
TEST_IMM_OP( addi, x11, x10, 0x440, 0x400, 0x40, x1, 60, x2)

inst_36:
// rs1_val == 2048, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x800;  immval:-0x21
TEST_IMM_OP( addi, x11, x10, 0x7df, 0x800, -0x21, x1, 64, x2)

inst_37:
// rs1_val == 4096, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x1000;  immval:0x555
TEST_IMM_OP( addi, x11, x10, 0x1555, 0x1000, 0x555, x1, 68, x2)

inst_38:
// rs1_val == 8192, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x2000;  immval:-0x2
TEST_IMM_OP( addi, x11, x10, 0x1ffe, 0x2000, -0x2, x1, 72, x2)

inst_39:
// rs1_val == 16384, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x4000;  immval:0x556
TEST_IMM_OP( addi, x11, x10, 0x4556, 0x4000, 0x556, x1, 76, x2)

inst_40:
// rs1_val == 32768, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x8000;  immval:-0xa
TEST_IMM_OP( addi, x11, x10, 0x7ff6, 0x8000, -0xa, x1, 80, x2)

inst_41:
// rs1_val == 65536, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x10000;  immval:0x2e
TEST_IMM_OP( addi, x11, x10, 0x1002e, 0x10000, 0x2e, x1, 84, x2)

inst_42:
// rs1_val == 131072, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x20000;  immval:0x2d
TEST_IMM_OP( addi, x11, x10, 0x2002d, 0x20000, 0x2d, x1, 88, x2)

inst_43:
// rs1_val == 262144, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x40000;  immval:0x9
TEST_IMM_OP( addi, x11, x10, 0x40009, 0x40000, 0x9, x1, 92, x2)

inst_44:
// rs1_val == 524288, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x80000;  immval:0x1
TEST_IMM_OP( addi, x11, x10, 0x80001, 0x80000, 0x1, x1, 96, x2)

inst_45:
// rs1_val == 1048576, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x100000;  immval:-0x3
TEST_IMM_OP( addi, x11, x10, 0xffffd, 0x100000, -0x3, x1, 100, x2)

inst_46:
// rs1_val == 2097152, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x200000;  immval:0x1
TEST_IMM_OP( addi, x11, x10, 0x200001, 0x200000, 0x1, x1, 104, x2)

inst_47:
// rs1_val == 4194304, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x400000;  immval:0x0
TEST_IMM_OP( addi, x11, x10, 0x400000, 0x400000, 0x0, x1, 108, x2)

inst_48:
// rs1_val == 8388608, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x800000;  immval:-0x4
TEST_IMM_OP( addi, x11, x10, 0x7ffffc, 0x800000, -0x4, x1, 112, x2)

inst_49:
// rs1_val == 33554432, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x2000000;  immval:0x555
TEST_IMM_OP( addi, x11, x10, 0x2000555, 0x2000000, 0x555, x1, 116, x2)

inst_50:
// rs1_val == 134217728, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x8000000;  immval:0x400
TEST_IMM_OP( addi, x11, x10, 0x8000400, 0x8000000, 0x400, x1, 120, x2)

inst_51:
// rs1_val == 268435456, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x10000000;  immval:0x80
TEST_IMM_OP( addi, x11, x10, 0x10000080, 0x10000000, 0x80, x1, 124, x2)

inst_52:
// rs1_val == 536870912, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x20000000;  immval:-0x3
TEST_IMM_OP( addi, x11, x10, 0x1ffffffd, 0x20000000, -0x3, x1, 128, x2)

inst_53:
// rs1_val == 1073741824, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x40000000;  immval:-0x81
TEST_IMM_OP( addi, x11, x10, 0x3fffff7f, 0x40000000, -0x81, x1, 132, x2)

inst_54:
// rs1_val == -2, 
// opcode: addi ; op1:x10; dest:x11; op1val:-0x2;  immval:-0x2
TEST_IMM_OP( addi, x11, x10, 0xfffffffc, -0x2, -0x2, x1, 136, x2)

inst_55:
// rs1_val == -9, 
// opcode: addi ; op1:x10; dest:x11; op1val:-0x9;  immval:0x666
TEST_IMM_OP( addi, x11, x10, 0x65d, -0x9, 0x666, x1, 140, x2)

inst_56:
// rs1_val == -17, 
// opcode: addi ; op1:x10; dest:x11; op1val:-0x11;  immval:0x3ff
TEST_IMM_OP( addi, x11, x10, 0x3ee, -0x11, 0x3ff, x1, 144, x2)

inst_57:
// rs1_val == -65, 
// opcode: addi ; op1:x10; dest:x11; op1val:-0x41;  immval:-0x555
TEST_IMM_OP( addi, x11, x10, 0xfffffa6a, -0x41, -0x555, x1, 148, x2)

inst_58:
// rs1_val == -129, 
// opcode: addi ; op1:x10; dest:x11; op1val:-0x81;  immval:0x5
TEST_IMM_OP( addi, x11, x10, 0xffffff84, -0x81, 0x5, x1, 152, x2)

inst_59:
// rs1_val == -257, 
// opcode: addi ; op1:x10; dest:x11; op1val:-0x101;  immval:0x0
TEST_IMM_OP( addi, x11, x10, 0xfffffeff, -0x101, 0x0, x1, 156, x2)

inst_60:
// rs1_val == -513, 
// opcode: addi ; op1:x10; dest:x11; op1val:-0x201;  immval:-0x555
TEST_IMM_OP( addi, x11, x10, 0xfffff8aa, -0x201, -0x555, x1, 160, x2)

inst_61:
// rs1_val == -1025, 
// opcode: addi ; op1:x10; dest:x11; op1val:-0x401;  immval:0x667
TEST_IMM_OP( addi, x11, x10, 0x266, -0x401, 0x667, x1, 164, x2)

inst_62:
// rs1_val == -4097, 
// opcode: addi ; op1:x10; dest:x11; op1val:-0x1001;  immval:-0x201
TEST_IMM_OP( addi, x11, x10, 0xffffedfe, -0x1001, -0x201, x1, 168, x2)

inst_63:
// rs1_val == -16385, 
// opcode: addi ; op1:x10; dest:x11; op1val:-0x4001;  immval:-0x6
TEST_IMM_OP( addi, x11, x10, 0xffffbff9, -0x4001, -0x6, x1, 172, x2)

inst_64:
// rs1_val == -32769, 
// opcode: addi ; op1:x10; dest:x11; op1val:-0x8001;  immval:0x555
TEST_IMM_OP( addi, x11, x10, 0xffff8554, -0x8001, 0x555, x1, 176, x2)

inst_65:
// rs1_val == -65537, 
// opcode: addi ; op1:x10; dest:x11; op1val:-0x10001;  immval:0x4
TEST_IMM_OP( addi, x11, x10, 0xffff0003, -0x10001, 0x4, x1, 180, x2)

inst_66:
// rs1_val == -131073, 
// opcode: addi ; op1:x10; dest:x11; op1val:-0x20001;  immval:0x100
TEST_IMM_OP( addi, x11, x10, 0xfffe00ff, -0x20001, 0x100, x1, 184, x2)

inst_67:
// rs1_val == -262145, 
// opcode: addi ; op1:x10; dest:x11; op1val:-0x40001;  immval:-0x201
TEST_IMM_OP( addi, x11, x10, 0xfffbfdfe, -0x40001, -0x201, x1, 188, x2)

inst_68:
// rs1_val == -524289, 
// opcode: addi ; op1:x10; dest:x11; op1val:-0x80001;  immval:-0x11
TEST_IMM_OP( addi, x11, x10, 0xfff7ffee, -0x80001, -0x11, x1, 192, x2)

inst_69:
// rs1_val == -1048577, 
// opcode: addi ; op1:x10; dest:x11; op1val:-0x100001;  immval:0x555
TEST_IMM_OP( addi, x11, x10, 0xfff00554, -0x100001, 0x555, x1, 196, x2)

inst_70:
// rs1_val == -4194305, 
// opcode: addi ; op1:x10; dest:x11; op1val:-0x400001;  immval:-0x101
TEST_IMM_OP( addi, x11, x10, 0xffbffefe, -0x400001, -0x101, x1, 200, x2)

inst_71:
// rs1_val == -16777217, 
// opcode: addi ; op1:x10; dest:x11; op1val:-0x1000001;  immval:0x1
TEST_IMM_OP( addi, x11, x10, 0xff000000, -0x1000001, 0x1, x1, 204, x2)

inst_72:
// rs1_val == -67108865, 
// opcode: addi ; op1:x10; dest:x11; op1val:-0x4000001;  immval:-0x2d
TEST_IMM_OP( addi, x11, x10, 0xfbffffd2, -0x4000001, -0x2d, x1, 208, x2)

inst_73:
// rs1_val == -268435457, 
// opcode: addi ; op1:x10; dest:x11; op1val:-0x10000001;  immval:0x3ff
TEST_IMM_OP( addi, x11, x10, 0xf00003fe, -0x10000001, 0x3ff, x1, 212, x2)

inst_74:
// rs1_val == -1073741825, 
// opcode: addi ; op1:x10; dest:x11; op1val:-0x40000001;  immval:-0x8
TEST_IMM_OP( addi, x11, x10, 0xbffffff7, -0x40000001, -0x8, x1, 216, x2)

inst_75:
// rs1_val == 1431655765, rs1_val==1431655765 and imm_val==3
// opcode: addi ; op1:x10; dest:x11; op1val:0x55555555;  immval:0x3
TEST_IMM_OP( addi, x11, x10, 0x55555558, 0x55555555, 0x3, x1, 220, x2)

inst_76:
// rs1_val == -1431655766, 
// opcode: addi ; op1:x10; dest:x11; op1val:-0x55555556;  immval:-0x400
TEST_IMM_OP( addi, x11, x10, 0xaaaaa6aa, -0x55555556, -0x400, x1, 224, x2)

inst_77:
// rs1_val==3 and imm_val==3, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x3;  immval:0x3
TEST_IMM_OP( addi, x11, x10, 0x6, 0x3, 0x3, x1, 228, x2)

inst_78:
// rs1_val==3 and imm_val==1365, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x3;  immval:0x555
TEST_IMM_OP( addi, x11, x10, 0x558, 0x3, 0x555, x1, 232, x2)

inst_79:
// rs1_val==3 and imm_val==-1366, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x3;  immval:-0x556
TEST_IMM_OP( addi, x11, x10, 0xfffffaad, 0x3, -0x556, x1, 236, x2)

inst_80:
// rs1_val==3 and imm_val==5, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x3;  immval:0x5
TEST_IMM_OP( addi, x11, x10, 0x8, 0x3, 0x5, x1, 240, x2)

inst_81:
// rs1_val==3 and imm_val==819, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x3;  immval:0x333
TEST_IMM_OP( addi, x11, x10, 0x336, 0x3, 0x333, x1, 244, x2)

inst_82:
// rs1_val==3 and imm_val==1638, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x3;  immval:0x666
TEST_IMM_OP( addi, x11, x10, 0x669, 0x3, 0x666, x1, 248, x2)

inst_83:
// rs1_val==3 and imm_val==-45, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x3;  immval:-0x2d
TEST_IMM_OP( addi, x11, x10, 0xffffffd6, 0x3, -0x2d, x1, 252, x2)

inst_84:
// rs1_val==3 and imm_val==45, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x3;  immval:0x2d
TEST_IMM_OP( addi, x11, x10, 0x30, 0x3, 0x2d, x1, 256, x2)

inst_85:
// rs1_val==3 and imm_val==2, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x3;  immval:0x2
TEST_IMM_OP( addi, x11, x10, 0x5, 0x3, 0x2, x1, 260, x2)

inst_86:
// rs1_val==3 and imm_val==1364, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x3;  immval:0x554
TEST_IMM_OP( addi, x11, x10, 0x557, 0x3, 0x554, x1, 264, x2)

inst_87:
// rs1_val==3 and imm_val==0, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x3;  immval:0x0
TEST_IMM_OP( addi, x11, x10, 0x3, 0x3, 0x0, x1, 268, x2)

inst_88:
// rs1_val==3 and imm_val==4, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x3;  immval:0x4
TEST_IMM_OP( addi, x11, x10, 0x7, 0x3, 0x4, x1, 272, x2)

inst_89:
// rs1_val==3 and imm_val==818, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x3;  immval:0x332
TEST_IMM_OP( addi, x11, x10, 0x335, 0x3, 0x332, x1, 276, x2)

inst_90:
// rs1_val==3 and imm_val==1637, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x3;  immval:0x665
TEST_IMM_OP( addi, x11, x10, 0x668, 0x3, 0x665, x1, 280, x2)

inst_91:
// rs1_val==3 and imm_val==44, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x3;  immval:0x2c
TEST_IMM_OP( addi, x11, x10, 0x2f, 0x3, 0x2c, x1, 284, x2)

inst_92:
// rs1_val==3 and imm_val==1366, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x3;  immval:0x556
TEST_IMM_OP( addi, x11, x10, 0x559, 0x3, 0x556, x1, 288, x2)

inst_93:
// rs1_val==3 and imm_val==-1365, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x3;  immval:-0x555
TEST_IMM_OP( addi, x11, x10, 0xfffffaae, 0x3, -0x555, x1, 292, x2)

inst_94:
// rs1_val==3 and imm_val==6, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x3;  immval:0x6
TEST_IMM_OP( addi, x11, x10, 0x9, 0x3, 0x6, x1, 296, x2)

inst_95:
// rs1_val==3 and imm_val==820, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x3;  immval:0x334
TEST_IMM_OP( addi, x11, x10, 0x337, 0x3, 0x334, x1, 300, x2)

inst_96:
// rs1_val==3 and imm_val==1639, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x3;  immval:0x667
TEST_IMM_OP( addi, x11, x10, 0x66a, 0x3, 0x667, x1, 304, x2)

inst_97:
// rs1_val==3 and imm_val==-44, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x3;  immval:-0x2c
TEST_IMM_OP( addi, x11, x10, 0xffffffd7, 0x3, -0x2c, x1, 308, x2)

inst_98:
// rs1_val==3 and imm_val==46, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x3;  immval:0x2e
TEST_IMM_OP( addi, x11, x10, 0x31, 0x3, 0x2e, x1, 312, x2)

inst_99:
// rs1_val==1431655765 and imm_val==1365, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x55555555;  immval:0x555
TEST_IMM_OP( addi, x11, x10, 0x55555aaa, 0x55555555, 0x555, x1, 316, x2)

inst_100:
// rs1_val==1431655765 and imm_val==-1366, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x55555555;  immval:-0x556
TEST_IMM_OP( addi, x11, x10, 0x55554fff, 0x55555555, -0x556, x1, 320, x2)

inst_101:
// rs1_val==1431655765 and imm_val==5, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x55555555;  immval:0x5
TEST_IMM_OP( addi, x11, x10, 0x5555555a, 0x55555555, 0x5, x1, 324, x2)

inst_102:
// rs1_val==1431655765 and imm_val==819, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x55555555;  immval:0x333
TEST_IMM_OP( addi, x11, x10, 0x55555888, 0x55555555, 0x333, x1, 328, x2)

inst_103:
// rs1_val==1431655765 and imm_val==1638, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x55555555;  immval:0x666
TEST_IMM_OP( addi, x11, x10, 0x55555bbb, 0x55555555, 0x666, x1, 332, x2)

inst_104:
// rs1_val==1431655765 and imm_val==-45, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x55555555;  immval:-0x2d
TEST_IMM_OP( addi, x11, x10, 0x55555528, 0x55555555, -0x2d, x1, 336, x2)

inst_105:
// rs1_val==1431655765 and imm_val==45, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x55555555;  immval:0x2d
TEST_IMM_OP( addi, x11, x10, 0x55555582, 0x55555555, 0x2d, x1, 340, x2)

inst_106:
// rs1_val==1431655765 and imm_val==2, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x55555555;  immval:0x2
TEST_IMM_OP( addi, x11, x10, 0x55555557, 0x55555555, 0x2, x1, 344, x2)

inst_107:
// rs1_val==1431655765 and imm_val==1364, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x55555555;  immval:0x554
TEST_IMM_OP( addi, x11, x10, 0x55555aa9, 0x55555555, 0x554, x1, 348, x2)

inst_108:
// rs1_val==1431655765 and imm_val==0, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x55555555;  immval:0x0
TEST_IMM_OP( addi, x11, x10, 0x55555555, 0x55555555, 0x0, x1, 352, x2)

inst_109:
// rs1_val==1431655765 and imm_val==4, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x55555555;  immval:0x4
TEST_IMM_OP( addi, x11, x10, 0x55555559, 0x55555555, 0x4, x1, 356, x2)

inst_110:
// rs1_val==1431655765 and imm_val==818, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x55555555;  immval:0x332
TEST_IMM_OP( addi, x11, x10, 0x55555887, 0x55555555, 0x332, x1, 360, x2)

inst_111:
// rs1_val==1431655765 and imm_val==1637, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x55555555;  immval:0x665
TEST_IMM_OP( addi, x11, x10, 0x55555bba, 0x55555555, 0x665, x1, 364, x2)

inst_112:
// rs1_val==1431655765 and imm_val==44, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x55555555;  immval:0x2c
TEST_IMM_OP( addi, x11, x10, 0x55555581, 0x55555555, 0x2c, x1, 368, x2)

inst_113:
// rs1_val==1431655765 and imm_val==1366, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x55555555;  immval:0x556
TEST_IMM_OP( addi, x11, x10, 0x55555aab, 0x55555555, 0x556, x1, 372, x2)

inst_114:
// rs1_val==1431655765 and imm_val==-1365, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x55555555;  immval:-0x555
TEST_IMM_OP( addi, x11, x10, 0x55555000, 0x55555555, -0x555, x1, 376, x2)

inst_115:
// rs1_val==1431655765 and imm_val==6, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x55555555;  immval:0x6
TEST_IMM_OP( addi, x11, x10, 0x5555555b, 0x55555555, 0x6, x1, 380, x2)

inst_116:
// rs1_val==1431655765 and imm_val==820, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x55555555;  immval:0x334
TEST_IMM_OP( addi, x11, x10, 0x55555889, 0x55555555, 0x334, x1, 384, x2)

inst_117:
// rs1_val==1431655765 and imm_val==1639, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x55555555;  immval:0x667
TEST_IMM_OP( addi, x11, x10, 0x55555bbc, 0x55555555, 0x667, x1, 388, x2)

inst_118:
// rs1_val==1431655765 and imm_val==-44, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x55555555;  immval:-0x2c
TEST_IMM_OP( addi, x11, x10, 0x55555529, 0x55555555, -0x2c, x1, 392, x2)

inst_119:
// rs1_val==1431655765 and imm_val==46, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x55555555;  immval:0x2e
TEST_IMM_OP( addi, x11, x10, 0x55555583, 0x55555555, 0x2e, x1, 396, x2)

inst_120:
// rs1_val==-1431655766 and imm_val==3, 
// opcode: addi ; op1:x10; dest:x11; op1val:-0x55555556;  immval:0x3
TEST_IMM_OP( addi, x11, x10, 0xaaaaaaad, -0x55555556, 0x3, x1, 400, x2)

inst_121:
// rs1_val==-1431655766 and imm_val==1365, 
// opcode: addi ; op1:x10; dest:x11; op1val:-0x55555556;  immval:0x555
TEST_IMM_OP( addi, x11, x10, 0xaaaaafff, -0x55555556, 0x555, x1, 404, x2)

inst_122:
// rs1_val==-1431655766 and imm_val==-1366, 
// opcode: addi ; op1:x10; dest:x11; op1val:-0x55555556;  immval:-0x556
TEST_IMM_OP( addi, x11, x10, 0xaaaaa554, -0x55555556, -0x556, x1, 408, x2)

inst_123:
// rs1_val==-1431655766 and imm_val==5, 
// opcode: addi ; op1:x10; dest:x11; op1val:-0x55555556;  immval:0x5
TEST_IMM_OP( addi, x11, x10, 0xaaaaaaaf, -0x55555556, 0x5, x1, 412, x2)

inst_124:
// rs1_val==-1431655766 and imm_val==819, 
// opcode: addi ; op1:x10; dest:x11; op1val:-0x55555556;  immval:0x333
TEST_IMM_OP( addi, x11, x10, 0xaaaaaddd, -0x55555556, 0x333, x1, 416, x2)

inst_125:
// rs1_val==-1431655766 and imm_val==1638, 
// opcode: addi ; op1:x10; dest:x11; op1val:-0x55555556;  immval:0x666
TEST_IMM_OP( addi, x11, x10, 0xaaaab110, -0x55555556, 0x666, x1, 420, x2)

inst_126:
// rs1_val==-1431655766 and imm_val==-45, 
// opcode: addi ; op1:x10; dest:x11; op1val:-0x55555556;  immval:-0x2d
TEST_IMM_OP( addi, x11, x10, 0xaaaaaa7d, -0x55555556, -0x2d, x1, 424, x2)

inst_127:
// rs1_val==-1431655766 and imm_val==45, 
// opcode: addi ; op1:x10; dest:x11; op1val:-0x55555556;  immval:0x2d
TEST_IMM_OP( addi, x11, x10, 0xaaaaaad7, -0x55555556, 0x2d, x1, 428, x2)

inst_128:
// rs1_val==-1431655766 and imm_val==2, 
// opcode: addi ; op1:x10; dest:x11; op1val:-0x55555556;  immval:0x2
TEST_IMM_OP( addi, x11, x10, 0xaaaaaaac, -0x55555556, 0x2, x1, 432, x2)

inst_129:
// rs1_val==-1431655766 and imm_val==1364, 
// opcode: addi ; op1:x10; dest:x11; op1val:-0x55555556;  immval:0x554
TEST_IMM_OP( addi, x11, x10, 0xaaaaaffe, -0x55555556, 0x554, x1, 436, x2)

inst_130:
// rs1_val==-1431655766 and imm_val==0, 
// opcode: addi ; op1:x10; dest:x11; op1val:-0x55555556;  immval:0x0
TEST_IMM_OP( addi, x11, x10, 0xaaaaaaaa, -0x55555556, 0x0, x1, 440, x2)

inst_131:
// rs1_val==-1431655766 and imm_val==4, 
// opcode: addi ; op1:x10; dest:x11; op1val:-0x55555556;  immval:0x4
TEST_IMM_OP( addi, x11, x10, 0xaaaaaaae, -0x55555556, 0x4, x1, 444, x2)

inst_132:
// rs1_val==-1431655766 and imm_val==818, 
// opcode: addi ; op1:x10; dest:x11; op1val:-0x55555556;  immval:0x332
TEST_IMM_OP( addi, x11, x10, 0xaaaaaddc, -0x55555556, 0x332, x1, 448, x2)

inst_133:
// rs1_val==-1431655766 and imm_val==1637, 
// opcode: addi ; op1:x10; dest:x11; op1val:-0x55555556;  immval:0x665
TEST_IMM_OP( addi, x11, x10, 0xaaaab10f, -0x55555556, 0x665, x1, 452, x2)

inst_134:
// rs1_val==-1431655766 and imm_val==44, 
// opcode: addi ; op1:x10; dest:x11; op1val:-0x55555556;  immval:0x2c
TEST_IMM_OP( addi, x11, x10, 0xaaaaaad6, -0x55555556, 0x2c, x1, 456, x2)

inst_135:
// rs1_val==-1431655766 and imm_val==1366, 
// opcode: addi ; op1:x10; dest:x11; op1val:-0x55555556;  immval:0x556
TEST_IMM_OP( addi, x11, x10, 0xaaaab000, -0x55555556, 0x556, x1, 460, x2)

inst_136:
// rs1_val==-1431655766 and imm_val==-1365, 
// opcode: addi ; op1:x10; dest:x11; op1val:-0x55555556;  immval:-0x555
TEST_IMM_OP( addi, x11, x10, 0xaaaaa555, -0x55555556, -0x555, x1, 464, x2)

inst_137:
// rs1_val==-1431655766 and imm_val==6, 
// opcode: addi ; op1:x10; dest:x11; op1val:-0x55555556;  immval:0x6
TEST_IMM_OP( addi, x11, x10, 0xaaaaaab0, -0x55555556, 0x6, x1, 468, x2)

inst_138:
// rs1_val==-1431655766 and imm_val==820, 
// opcode: addi ; op1:x10; dest:x11; op1val:-0x55555556;  immval:0x334
TEST_IMM_OP( addi, x11, x10, 0xaaaaadde, -0x55555556, 0x334, x1, 472, x2)

inst_139:
// rs1_val==-1431655766 and imm_val==1639, 
// opcode: addi ; op1:x10; dest:x11; op1val:-0x55555556;  immval:0x667
TEST_IMM_OP( addi, x11, x10, 0xaaaab111, -0x55555556, 0x667, x1, 476, x2)

inst_140:
// rs1_val==-1431655766 and imm_val==-44, 
// opcode: addi ; op1:x10; dest:x11; op1val:-0x55555556;  immval:-0x2c
TEST_IMM_OP( addi, x11, x10, 0xaaaaaa7e, -0x55555556, -0x2c, x1, 480, x2)

inst_141:
// rs1_val==-1431655766 and imm_val==46, 
// opcode: addi ; op1:x10; dest:x11; op1val:-0x55555556;  immval:0x2e
TEST_IMM_OP( addi, x11, x10, 0xaaaaaad8, -0x55555556, 0x2e, x1, 484, x2)

inst_142:
// rs1_val==5 and imm_val==3, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x5;  immval:0x3
TEST_IMM_OP( addi, x11, x10, 0x8, 0x5, 0x3, x1, 488, x2)

inst_143:
// rs1_val==5 and imm_val==1365, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x5;  immval:0x555
TEST_IMM_OP( addi, x11, x10, 0x55a, 0x5, 0x555, x1, 492, x2)

inst_144:
// rs1_val==5 and imm_val==-1366, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x5;  immval:-0x556
TEST_IMM_OP( addi, x11, x10, 0xfffffaaf, 0x5, -0x556, x1, 496, x2)

inst_145:
// rs1_val==5 and imm_val==5, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x5;  immval:0x5
TEST_IMM_OP( addi, x11, x10, 0xa, 0x5, 0x5, x1, 500, x2)

inst_146:
// rs1_val==5 and imm_val==819, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x5;  immval:0x333
TEST_IMM_OP( addi, x11, x10, 0x338, 0x5, 0x333, x1, 504, x2)

inst_147:
// rs1_val==5 and imm_val==1638, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x5;  immval:0x666
TEST_IMM_OP( addi, x11, x10, 0x66b, 0x5, 0x666, x1, 508, x2)

inst_148:
// rs1_val==5 and imm_val==-45, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x5;  immval:-0x2d
TEST_IMM_OP( addi, x11, x10, 0xffffffd8, 0x5, -0x2d, x1, 512, x2)

inst_149:
// rs1_val==5 and imm_val==45, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x5;  immval:0x2d
TEST_IMM_OP( addi, x11, x10, 0x32, 0x5, 0x2d, x1, 516, x2)

inst_150:
// rs1_val==5 and imm_val==2, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x5;  immval:0x2
TEST_IMM_OP( addi, x11, x10, 0x7, 0x5, 0x2, x1, 520, x2)

inst_151:
// rs1_val==5 and imm_val==1364, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x5;  immval:0x554
TEST_IMM_OP( addi, x11, x10, 0x559, 0x5, 0x554, x1, 524, x2)

inst_152:
// rs1_val==5 and imm_val==0, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x5;  immval:0x0
TEST_IMM_OP( addi, x11, x10, 0x5, 0x5, 0x0, x1, 528, x2)

inst_153:
// rs1_val==5 and imm_val==4, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x5;  immval:0x4
TEST_IMM_OP( addi, x11, x10, 0x9, 0x5, 0x4, x1, 532, x2)

inst_154:
// rs1_val==5 and imm_val==818, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x5;  immval:0x332
TEST_IMM_OP( addi, x11, x10, 0x337, 0x5, 0x332, x1, 536, x2)

inst_155:
// rs1_val==5 and imm_val==1637, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x5;  immval:0x665
TEST_IMM_OP( addi, x11, x10, 0x66a, 0x5, 0x665, x1, 540, x2)

inst_156:
// rs1_val==5 and imm_val==44, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x5;  immval:0x2c
TEST_IMM_OP( addi, x11, x10, 0x31, 0x5, 0x2c, x1, 544, x2)

inst_157:
// rs1_val==5 and imm_val==1366, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x5;  immval:0x556
TEST_IMM_OP( addi, x11, x10, 0x55b, 0x5, 0x556, x1, 548, x2)

inst_158:
// rs1_val==5 and imm_val==-1365, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x5;  immval:-0x555
TEST_IMM_OP( addi, x11, x10, 0xfffffab0, 0x5, -0x555, x1, 552, x2)

inst_159:
// rs1_val==5 and imm_val==6, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x5;  immval:0x6
TEST_IMM_OP( addi, x11, x10, 0xb, 0x5, 0x6, x1, 556, x2)

inst_160:
// rs1_val==5 and imm_val==820, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x5;  immval:0x334
TEST_IMM_OP( addi, x11, x10, 0x339, 0x5, 0x334, x1, 560, x2)

inst_161:
// rs1_val==5 and imm_val==1639, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x5;  immval:0x667
TEST_IMM_OP( addi, x11, x10, 0x66c, 0x5, 0x667, x1, 564, x2)

inst_162:
// rs1_val==5 and imm_val==-44, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x5;  immval:-0x2c
TEST_IMM_OP( addi, x11, x10, 0xffffffd9, 0x5, -0x2c, x1, 568, x2)

inst_163:
// rs1_val==5 and imm_val==46, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x5;  immval:0x2e
TEST_IMM_OP( addi, x11, x10, 0x33, 0x5, 0x2e, x1, 572, x2)

inst_164:
// rs1_val==858993459 and imm_val==3, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x33333333;  immval:0x3
TEST_IMM_OP( addi, x11, x10, 0x33333336, 0x33333333, 0x3, x1, 576, x2)

inst_165:
// rs1_val==858993459 and imm_val==1365, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x33333333;  immval:0x555
TEST_IMM_OP( addi, x11, x10, 0x33333888, 0x33333333, 0x555, x1, 580, x2)

inst_166:
// rs1_val==858993459 and imm_val==-1366, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x33333333;  immval:-0x556
TEST_IMM_OP( addi, x11, x10, 0x33332ddd, 0x33333333, -0x556, x1, 584, x2)

inst_167:
// rs1_val==858993459 and imm_val==5, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x33333333;  immval:0x5
TEST_IMM_OP( addi, x11, x10, 0x33333338, 0x33333333, 0x5, x1, 588, x2)

inst_168:
// rs1_val==858993459 and imm_val==819, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x33333333;  immval:0x333
TEST_IMM_OP( addi, x11, x10, 0x33333666, 0x33333333, 0x333, x1, 592, x2)

inst_169:
// rs1_val==858993459 and imm_val==1638, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x33333333;  immval:0x666
TEST_IMM_OP( addi, x11, x10, 0x33333999, 0x33333333, 0x666, x1, 596, x2)

inst_170:
// rs1_val==858993459 and imm_val==-45, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x33333333;  immval:-0x2d
TEST_IMM_OP( addi, x11, x10, 0x33333306, 0x33333333, -0x2d, x1, 600, x2)

inst_171:
// rs1_val==858993459 and imm_val==45, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x33333333;  immval:0x2d
TEST_IMM_OP( addi, x11, x10, 0x33333360, 0x33333333, 0x2d, x1, 604, x2)

inst_172:
// rs1_val==858993459 and imm_val==2, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x33333333;  immval:0x2
TEST_IMM_OP( addi, x11, x10, 0x33333335, 0x33333333, 0x2, x1, 608, x2)

inst_173:
// rs1_val==858993459 and imm_val==1364, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x33333333;  immval:0x554
TEST_IMM_OP( addi, x11, x10, 0x33333887, 0x33333333, 0x554, x1, 612, x2)

inst_174:
// rs1_val==858993459 and imm_val==0, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x33333333;  immval:0x0
TEST_IMM_OP( addi, x11, x10, 0x33333333, 0x33333333, 0x0, x1, 616, x2)

inst_175:
// rs1_val==858993459 and imm_val==4, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x33333333;  immval:0x4
TEST_IMM_OP( addi, x11, x10, 0x33333337, 0x33333333, 0x4, x1, 620, x2)

inst_176:
// rs1_val==858993459 and imm_val==818, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x33333333;  immval:0x332
TEST_IMM_OP( addi, x11, x10, 0x33333665, 0x33333333, 0x332, x1, 624, x2)

inst_177:
// rs1_val==858993459 and imm_val==1637, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x33333333;  immval:0x665
TEST_IMM_OP( addi, x11, x10, 0x33333998, 0x33333333, 0x665, x1, 628, x2)

inst_178:
// rs1_val==858993459 and imm_val==44, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x33333333;  immval:0x2c
TEST_IMM_OP( addi, x11, x10, 0x3333335f, 0x33333333, 0x2c, x1, 632, x2)

inst_179:
// rs1_val==858993459 and imm_val==1366, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x33333333;  immval:0x556
TEST_IMM_OP( addi, x11, x10, 0x33333889, 0x33333333, 0x556, x1, 636, x2)

inst_180:
// rs1_val==858993459 and imm_val==-1365, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x33333333;  immval:-0x555
TEST_IMM_OP( addi, x11, x10, 0x33332dde, 0x33333333, -0x555, x1, 640, x2)

inst_181:
// rs1_val==858993459 and imm_val==6, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x33333333;  immval:0x6
TEST_IMM_OP( addi, x11, x10, 0x33333339, 0x33333333, 0x6, x1, 644, x2)

inst_182:
// rs1_val==858993459 and imm_val==820, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x33333333;  immval:0x334
TEST_IMM_OP( addi, x11, x10, 0x33333667, 0x33333333, 0x334, x1, 648, x2)

inst_183:
// rs1_val==858993459 and imm_val==1639, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x33333333;  immval:0x667
TEST_IMM_OP( addi, x11, x10, 0x3333399a, 0x33333333, 0x667, x1, 652, x2)

inst_184:
// rs1_val==858993459 and imm_val==-44, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x33333333;  immval:-0x2c
TEST_IMM_OP( addi, x11, x10, 0x33333307, 0x33333333, -0x2c, x1, 656, x2)

inst_185:
// rs1_val==858993459 and imm_val==46, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x33333333;  immval:0x2e
TEST_IMM_OP( addi, x11, x10, 0x33333361, 0x33333333, 0x2e, x1, 660, x2)

inst_186:
// rs1_val==1717986918 and imm_val==3, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x66666666;  immval:0x3
TEST_IMM_OP( addi, x11, x10, 0x66666669, 0x66666666, 0x3, x1, 664, x2)

inst_187:
// rs1_val==1717986918 and imm_val==1365, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x66666666;  immval:0x555
TEST_IMM_OP( addi, x11, x10, 0x66666bbb, 0x66666666, 0x555, x1, 668, x2)

inst_188:
// rs1_val==1717986918 and imm_val==-1366, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x66666666;  immval:-0x556
TEST_IMM_OP( addi, x11, x10, 0x66666110, 0x66666666, -0x556, x1, 672, x2)

inst_189:
// rs1_val==1717986918 and imm_val==5, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x66666666;  immval:0x5
TEST_IMM_OP( addi, x11, x10, 0x6666666b, 0x66666666, 0x5, x1, 676, x2)

inst_190:
// rs1_val==1717986918 and imm_val==819, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x66666666;  immval:0x333
TEST_IMM_OP( addi, x11, x10, 0x66666999, 0x66666666, 0x333, x1, 680, x2)

inst_191:
// rs1_val==1717986918 and imm_val==1638, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x66666666;  immval:0x666
TEST_IMM_OP( addi, x11, x10, 0x66666ccc, 0x66666666, 0x666, x1, 684, x2)

inst_192:
// rs1_val==1717986918 and imm_val==-45, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x66666666;  immval:-0x2d
TEST_IMM_OP( addi, x11, x10, 0x66666639, 0x66666666, -0x2d, x1, 688, x2)

inst_193:
// rs1_val==1717986918 and imm_val==45, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x66666666;  immval:0x2d
TEST_IMM_OP( addi, x11, x10, 0x66666693, 0x66666666, 0x2d, x1, 692, x2)

inst_194:
// rs1_val==1717986918 and imm_val==2, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x66666666;  immval:0x2
TEST_IMM_OP( addi, x11, x10, 0x66666668, 0x66666666, 0x2, x1, 696, x2)

inst_195:
// rs1_val==1717986918 and imm_val==1364, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x66666666;  immval:0x554
TEST_IMM_OP( addi, x11, x10, 0x66666bba, 0x66666666, 0x554, x1, 700, x2)

inst_196:
// rs1_val==1717986918 and imm_val==0, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x66666666;  immval:0x0
TEST_IMM_OP( addi, x11, x10, 0x66666666, 0x66666666, 0x0, x1, 704, x2)

inst_197:
// rs1_val==1717986918 and imm_val==4, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x66666666;  immval:0x4
TEST_IMM_OP( addi, x11, x10, 0x6666666a, 0x66666666, 0x4, x1, 708, x2)

inst_198:
// rs1_val==1717986918 and imm_val==818, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x66666666;  immval:0x332
TEST_IMM_OP( addi, x11, x10, 0x66666998, 0x66666666, 0x332, x1, 712, x2)

inst_199:
// rs1_val==1717986918 and imm_val==1637, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x66666666;  immval:0x665
TEST_IMM_OP( addi, x11, x10, 0x66666ccb, 0x66666666, 0x665, x1, 716, x2)

inst_200:
// rs1_val==1717986918 and imm_val==44, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x66666666;  immval:0x2c
TEST_IMM_OP( addi, x11, x10, 0x66666692, 0x66666666, 0x2c, x1, 720, x2)

inst_201:
// rs1_val==1717986918 and imm_val==1366, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x66666666;  immval:0x556
TEST_IMM_OP( addi, x11, x10, 0x66666bbc, 0x66666666, 0x556, x1, 724, x2)

inst_202:
// rs1_val==1717986918 and imm_val==-1365, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x66666666;  immval:-0x555
TEST_IMM_OP( addi, x11, x10, 0x66666111, 0x66666666, -0x555, x1, 728, x2)

inst_203:
// rs1_val==1717986918 and imm_val==6, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x66666666;  immval:0x6
TEST_IMM_OP( addi, x11, x10, 0x6666666c, 0x66666666, 0x6, x1, 732, x2)

inst_204:
// rs1_val==1717986918 and imm_val==820, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x66666666;  immval:0x334
TEST_IMM_OP( addi, x11, x10, 0x6666699a, 0x66666666, 0x334, x1, 736, x2)

inst_205:
// rs1_val==1717986918 and imm_val==1639, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x66666666;  immval:0x667
TEST_IMM_OP( addi, x11, x10, 0x66666ccd, 0x66666666, 0x667, x1, 740, x2)

inst_206:
// rs1_val==1717986918 and imm_val==-44, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x66666666;  immval:-0x2c
TEST_IMM_OP( addi, x11, x10, 0x6666663a, 0x66666666, -0x2c, x1, 744, x2)

inst_207:
// rs1_val==1717986918 and imm_val==46, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x66666666;  immval:0x2e
TEST_IMM_OP( addi, x11, x10, 0x66666694, 0x66666666, 0x2e, x1, 748, x2)

inst_208:
// rs1_val==-46340 and imm_val==3, 
// opcode: addi ; op1:x10; dest:x11; op1val:-0xb504;  immval:0x3
TEST_IMM_OP( addi, x11, x10, 0xffff4aff, -0xb504, 0x3, x1, 752, x2)

inst_209:
// rs1_val==-46340 and imm_val==1365, 
// opcode: addi ; op1:x10; dest:x11; op1val:-0xb504;  immval:0x555
TEST_IMM_OP( addi, x11, x10, 0xffff5051, -0xb504, 0x555, x1, 756, x2)

inst_210:
// rs1_val==-46340 and imm_val==-1366, 
// opcode: addi ; op1:x10; dest:x11; op1val:-0xb504;  immval:-0x556
TEST_IMM_OP( addi, x11, x10, 0xffff45a6, -0xb504, -0x556, x1, 760, x2)

inst_211:
// rs1_val==-46340 and imm_val==5, 
// opcode: addi ; op1:x10; dest:x11; op1val:-0xb504;  immval:0x5
TEST_IMM_OP( addi, x11, x10, 0xffff4b01, -0xb504, 0x5, x1, 764, x2)

inst_212:
// rs1_val==-46340 and imm_val==819, 
// opcode: addi ; op1:x10; dest:x11; op1val:-0xb504;  immval:0x333
TEST_IMM_OP( addi, x11, x10, 0xffff4e2f, -0xb504, 0x333, x1, 768, x2)

inst_213:
// rs1_val==-46340 and imm_val==1638, 
// opcode: addi ; op1:x10; dest:x11; op1val:-0xb504;  immval:0x666
TEST_IMM_OP( addi, x11, x10, 0xffff5162, -0xb504, 0x666, x1, 772, x2)

inst_214:
// rs1_val==-46340 and imm_val==-45, 
// opcode: addi ; op1:x10; dest:x11; op1val:-0xb504;  immval:-0x2d
TEST_IMM_OP( addi, x11, x10, 0xffff4acf, -0xb504, -0x2d, x1, 776, x2)

inst_215:
// rs1_val==-46340 and imm_val==45, 
// opcode: addi ; op1:x10; dest:x11; op1val:-0xb504;  immval:0x2d
TEST_IMM_OP( addi, x11, x10, 0xffff4b29, -0xb504, 0x2d, x1, 780, x2)

inst_216:
// rs1_val==-46340 and imm_val==2, 
// opcode: addi ; op1:x10; dest:x11; op1val:-0xb504;  immval:0x2
TEST_IMM_OP( addi, x11, x10, 0xffff4afe, -0xb504, 0x2, x1, 784, x2)

inst_217:
// rs1_val==-46340 and imm_val==1364, 
// opcode: addi ; op1:x10; dest:x11; op1val:-0xb504;  immval:0x554
TEST_IMM_OP( addi, x11, x10, 0xffff5050, -0xb504, 0x554, x1, 788, x2)

inst_218:
// rs1_val==-46340 and imm_val==0, 
// opcode: addi ; op1:x10; dest:x11; op1val:-0xb504;  immval:0x0
TEST_IMM_OP( addi, x11, x10, 0xffff4afc, -0xb504, 0x0, x1, 792, x2)

inst_219:
// rs1_val==-46340 and imm_val==4, 
// opcode: addi ; op1:x10; dest:x11; op1val:-0xb504;  immval:0x4
TEST_IMM_OP( addi, x11, x10, 0xffff4b00, -0xb504, 0x4, x1, 796, x2)

inst_220:
// rs1_val==-46340 and imm_val==818, 
// opcode: addi ; op1:x10; dest:x11; op1val:-0xb504;  immval:0x332
TEST_IMM_OP( addi, x11, x10, 0xffff4e2e, -0xb504, 0x332, x1, 800, x2)

inst_221:
// rs1_val==-46340 and imm_val==1637, 
// opcode: addi ; op1:x10; dest:x11; op1val:-0xb504;  immval:0x665
TEST_IMM_OP( addi, x11, x10, 0xffff5161, -0xb504, 0x665, x1, 804, x2)

inst_222:
// rs1_val==-46340 and imm_val==44, 
// opcode: addi ; op1:x10; dest:x11; op1val:-0xb504;  immval:0x2c
TEST_IMM_OP( addi, x11, x10, 0xffff4b28, -0xb504, 0x2c, x1, 808, x2)

inst_223:
// rs1_val==-46340 and imm_val==1366, 
// opcode: addi ; op1:x10; dest:x11; op1val:-0xb504;  immval:0x556
TEST_IMM_OP( addi, x11, x10, 0xffff5052, -0xb504, 0x556, x1, 812, x2)

inst_224:
// rs1_val==-46340 and imm_val==-1365, 
// opcode: addi ; op1:x10; dest:x11; op1val:-0xb504;  immval:-0x555
TEST_IMM_OP( addi, x11, x10, 0xffff45a7, -0xb504, -0x555, x1, 816, x2)

inst_225:
// rs1_val==-46340 and imm_val==6, 
// opcode: addi ; op1:x10; dest:x11; op1val:-0xb504;  immval:0x6
TEST_IMM_OP( addi, x11, x10, 0xffff4b02, -0xb504, 0x6, x1, 820, x2)

inst_226:
// rs1_val==-46340 and imm_val==820, 
// opcode: addi ; op1:x10; dest:x11; op1val:-0xb504;  immval:0x334
TEST_IMM_OP( addi, x11, x10, 0xffff4e30, -0xb504, 0x334, x1, 824, x2)

inst_227:
// rs1_val==-46340 and imm_val==1639, 
// opcode: addi ; op1:x10; dest:x11; op1val:-0xb504;  immval:0x667
TEST_IMM_OP( addi, x11, x10, 0xffff5163, -0xb504, 0x667, x1, 828, x2)

inst_228:
// rs1_val==-46340 and imm_val==-44, 
// opcode: addi ; op1:x10; dest:x11; op1val:-0xb504;  immval:-0x2c
TEST_IMM_OP( addi, x11, x10, 0xffff4ad0, -0xb504, -0x2c, x1, 832, x2)

inst_229:
// rs1_val==-46340 and imm_val==46, 
// opcode: addi ; op1:x10; dest:x11; op1val:-0xb504;  immval:0x2e
TEST_IMM_OP( addi, x11, x10, 0xffff4b2a, -0xb504, 0x2e, x1, 836, x2)

inst_230:
// rs1_val==46340 and imm_val==3, 
// opcode: addi ; op1:x10; dest:x11; op1val:0xb504;  immval:0x3
TEST_IMM_OP( addi, x11, x10, 0xb507, 0xb504, 0x3, x1, 840, x2)

inst_231:
// rs1_val==46340 and imm_val==1365, 
// opcode: addi ; op1:x10; dest:x11; op1val:0xb504;  immval:0x555
TEST_IMM_OP( addi, x11, x10, 0xba59, 0xb504, 0x555, x1, 844, x2)

inst_232:
// rs1_val==46340 and imm_val==-1366, 
// opcode: addi ; op1:x10; dest:x11; op1val:0xb504;  immval:-0x556
TEST_IMM_OP( addi, x11, x10, 0xafae, 0xb504, -0x556, x1, 848, x2)

inst_233:
// rs1_val==46340 and imm_val==5, 
// opcode: addi ; op1:x10; dest:x11; op1val:0xb504;  immval:0x5
TEST_IMM_OP( addi, x11, x10, 0xb509, 0xb504, 0x5, x1, 852, x2)

inst_234:
// rs1_val==46340 and imm_val==819, 
// opcode: addi ; op1:x10; dest:x11; op1val:0xb504;  immval:0x333
TEST_IMM_OP( addi, x11, x10, 0xb837, 0xb504, 0x333, x1, 856, x2)

inst_235:
// rs1_val==46340 and imm_val==1638, 
// opcode: addi ; op1:x10; dest:x11; op1val:0xb504;  immval:0x666
TEST_IMM_OP( addi, x11, x10, 0xbb6a, 0xb504, 0x666, x1, 860, x2)

inst_236:
// rs1_val==46340 and imm_val==-45, 
// opcode: addi ; op1:x10; dest:x11; op1val:0xb504;  immval:-0x2d
TEST_IMM_OP( addi, x11, x10, 0xb4d7, 0xb504, -0x2d, x1, 864, x2)

inst_237:
// rs1_val==46340 and imm_val==45, 
// opcode: addi ; op1:x10; dest:x11; op1val:0xb504;  immval:0x2d
TEST_IMM_OP( addi, x11, x10, 0xb531, 0xb504, 0x2d, x1, 868, x2)

inst_238:
// rs1_val==46340 and imm_val==2, 
// opcode: addi ; op1:x10; dest:x11; op1val:0xb504;  immval:0x2
TEST_IMM_OP( addi, x11, x10, 0xb506, 0xb504, 0x2, x1, 872, x2)

inst_239:
// rs1_val==46340 and imm_val==1364, 
// opcode: addi ; op1:x10; dest:x11; op1val:0xb504;  immval:0x554
TEST_IMM_OP( addi, x11, x10, 0xba58, 0xb504, 0x554, x1, 876, x2)

inst_240:
// rs1_val==46340 and imm_val==0, 
// opcode: addi ; op1:x10; dest:x11; op1val:0xb504;  immval:0x0
TEST_IMM_OP( addi, x11, x10, 0xb504, 0xb504, 0x0, x1, 880, x2)

inst_241:
// rs1_val==46340 and imm_val==4, 
// opcode: addi ; op1:x10; dest:x11; op1val:0xb504;  immval:0x4
TEST_IMM_OP( addi, x11, x10, 0xb508, 0xb504, 0x4, x1, 884, x2)

inst_242:
// rs1_val==46340 and imm_val==818, 
// opcode: addi ; op1:x10; dest:x11; op1val:0xb504;  immval:0x332
TEST_IMM_OP( addi, x11, x10, 0xb836, 0xb504, 0x332, x1, 888, x2)

inst_243:
// rs1_val==46340 and imm_val==1637, 
// opcode: addi ; op1:x10; dest:x11; op1val:0xb504;  immval:0x665
TEST_IMM_OP( addi, x11, x10, 0xbb69, 0xb504, 0x665, x1, 892, x2)

inst_244:
// rs1_val==46340 and imm_val==44, 
// opcode: addi ; op1:x10; dest:x11; op1val:0xb504;  immval:0x2c
TEST_IMM_OP( addi, x11, x10, 0xb530, 0xb504, 0x2c, x1, 896, x2)

inst_245:
// rs1_val==46340 and imm_val==1366, 
// opcode: addi ; op1:x10; dest:x11; op1val:0xb504;  immval:0x556
TEST_IMM_OP( addi, x11, x10, 0xba5a, 0xb504, 0x556, x1, 900, x2)

inst_246:
// rs1_val==46340 and imm_val==-1365, 
// opcode: addi ; op1:x10; dest:x11; op1val:0xb504;  immval:-0x555
TEST_IMM_OP( addi, x11, x10, 0xafaf, 0xb504, -0x555, x1, 904, x2)

inst_247:
// rs1_val==46340 and imm_val==6, 
// opcode: addi ; op1:x10; dest:x11; op1val:0xb504;  immval:0x6
TEST_IMM_OP( addi, x11, x10, 0xb50a, 0xb504, 0x6, x1, 908, x2)

inst_248:
// rs1_val==46340 and imm_val==820, 
// opcode: addi ; op1:x10; dest:x11; op1val:0xb504;  immval:0x334
TEST_IMM_OP( addi, x11, x10, 0xb838, 0xb504, 0x334, x1, 912, x2)

inst_249:
// rs1_val==46340 and imm_val==1639, 
// opcode: addi ; op1:x10; dest:x11; op1val:0xb504;  immval:0x667
TEST_IMM_OP( addi, x11, x10, 0xbb6b, 0xb504, 0x667, x1, 916, x2)

inst_250:
// rs1_val==46340 and imm_val==-44, 
// opcode: addi ; op1:x10; dest:x11; op1val:0xb504;  immval:-0x2c
TEST_IMM_OP( addi, x11, x10, 0xb4d8, 0xb504, -0x2c, x1, 920, x2)

inst_251:
// rs1_val==46340 and imm_val==46, 
// opcode: addi ; op1:x10; dest:x11; op1val:0xb504;  immval:0x2e
TEST_IMM_OP( addi, x11, x10, 0xb532, 0xb504, 0x2e, x1, 924, x2)

inst_252:
// rs1_val==2 and imm_val==3, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x2;  immval:0x3
TEST_IMM_OP( addi, x11, x10, 0x5, 0x2, 0x3, x1, 928, x2)

inst_253:
// rs1_val==2 and imm_val==1365, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x2;  immval:0x555
TEST_IMM_OP( addi, x11, x10, 0x557, 0x2, 0x555, x1, 932, x2)

inst_254:
// rs1_val==2 and imm_val==-1366, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x2;  immval:-0x556
TEST_IMM_OP( addi, x11, x10, 0xfffffaac, 0x2, -0x556, x1, 936, x2)

inst_255:
// rs1_val==2 and imm_val==5, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x2;  immval:0x5
TEST_IMM_OP( addi, x11, x10, 0x7, 0x2, 0x5, x1, 940, x2)

inst_256:
// rs1_val==2 and imm_val==819, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x2;  immval:0x333
TEST_IMM_OP( addi, x11, x10, 0x335, 0x2, 0x333, x1, 944, x2)

inst_257:
// rs1_val==2 and imm_val==1638, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x2;  immval:0x666
TEST_IMM_OP( addi, x11, x10, 0x668, 0x2, 0x666, x1, 948, x2)

inst_258:
// rs1_val==2 and imm_val==-45, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x2;  immval:-0x2d
TEST_IMM_OP( addi, x11, x10, 0xffffffd5, 0x2, -0x2d, x1, 952, x2)

inst_259:
// rs1_val==2 and imm_val==45, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x2;  immval:0x2d
TEST_IMM_OP( addi, x11, x10, 0x2f, 0x2, 0x2d, x1, 956, x2)

inst_260:
// rs1_val==2 and imm_val==2, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x2;  immval:0x2
TEST_IMM_OP( addi, x11, x10, 0x4, 0x2, 0x2, x1, 960, x2)

inst_261:
// rs1_val==2 and imm_val==1364, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x2;  immval:0x554
TEST_IMM_OP( addi, x11, x10, 0x556, 0x2, 0x554, x1, 964, x2)

inst_262:
// rs1_val==2 and imm_val==0, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x2;  immval:0x0
TEST_IMM_OP( addi, x11, x10, 0x2, 0x2, 0x0, x1, 968, x2)

inst_263:
// rs1_val==2 and imm_val==4, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x2;  immval:0x4
TEST_IMM_OP( addi, x11, x10, 0x6, 0x2, 0x4, x1, 972, x2)

inst_264:
// rs1_val==2 and imm_val==818, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x2;  immval:0x332
TEST_IMM_OP( addi, x11, x10, 0x334, 0x2, 0x332, x1, 976, x2)

inst_265:
// rs1_val==2 and imm_val==1637, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x2;  immval:0x665
TEST_IMM_OP( addi, x11, x10, 0x667, 0x2, 0x665, x1, 980, x2)

inst_266:
// rs1_val==2 and imm_val==44, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x2;  immval:0x2c
TEST_IMM_OP( addi, x11, x10, 0x2e, 0x2, 0x2c, x1, 984, x2)

inst_267:
// rs1_val==2 and imm_val==1366, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x2;  immval:0x556
TEST_IMM_OP( addi, x11, x10, 0x558, 0x2, 0x556, x1, 988, x2)

inst_268:
// rs1_val==2 and imm_val==-1365, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x2;  immval:-0x555
TEST_IMM_OP( addi, x11, x10, 0xfffffaad, 0x2, -0x555, x1, 992, x2)

inst_269:
// rs1_val==2 and imm_val==6, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x2;  immval:0x6
TEST_IMM_OP( addi, x11, x10, 0x8, 0x2, 0x6, x1, 996, x2)

inst_270:
// rs1_val==2 and imm_val==820, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x2;  immval:0x334
TEST_IMM_OP( addi, x11, x10, 0x336, 0x2, 0x334, x1, 1000, x2)

inst_271:
// rs1_val==2 and imm_val==1639, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x2;  immval:0x667
TEST_IMM_OP( addi, x11, x10, 0x669, 0x2, 0x667, x1, 1004, x2)

inst_272:
// rs1_val==2 and imm_val==-44, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x2;  immval:-0x2c
TEST_IMM_OP( addi, x11, x10, 0xffffffd6, 0x2, -0x2c, x1, 1008, x2)

inst_273:
// rs1_val==2 and imm_val==46, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x2;  immval:0x2e
TEST_IMM_OP( addi, x11, x10, 0x30, 0x2, 0x2e, x1, 1012, x2)

inst_274:
// rs1_val==1431655764 and imm_val==3, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x55555554;  immval:0x3
TEST_IMM_OP( addi, x11, x10, 0x55555557, 0x55555554, 0x3, x1, 1016, x2)

inst_275:
// rs1_val==1431655764 and imm_val==1365, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x55555554;  immval:0x555
TEST_IMM_OP( addi, x11, x10, 0x55555aa9, 0x55555554, 0x555, x1, 1020, x2)

inst_276:
// rs1_val==1431655764 and imm_val==-1366, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x55555554;  immval:-0x556
TEST_IMM_OP( addi, x11, x10, 0x55554ffe, 0x55555554, -0x556, x1, 1024, x2)

inst_277:
// rs1_val==1431655764 and imm_val==5, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x55555554;  immval:0x5
TEST_IMM_OP( addi, x11, x10, 0x55555559, 0x55555554, 0x5, x1, 1028, x2)

inst_278:
// rs1_val==1431655764 and imm_val==819, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x55555554;  immval:0x333
TEST_IMM_OP( addi, x11, x10, 0x55555887, 0x55555554, 0x333, x1, 1032, x2)

inst_279:
// rs1_val==1431655764 and imm_val==1638, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x55555554;  immval:0x666
TEST_IMM_OP( addi, x11, x10, 0x55555bba, 0x55555554, 0x666, x1, 1036, x2)

inst_280:
// rs1_val==1431655764 and imm_val==-45, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x55555554;  immval:-0x2d
TEST_IMM_OP( addi, x11, x10, 0x55555527, 0x55555554, -0x2d, x1, 1040, x2)

inst_281:
// rs1_val==1431655764 and imm_val==45, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x55555554;  immval:0x2d
TEST_IMM_OP( addi, x11, x10, 0x55555581, 0x55555554, 0x2d, x1, 1044, x2)

inst_282:
// rs1_val==1431655764 and imm_val==2, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x55555554;  immval:0x2
TEST_IMM_OP( addi, x11, x10, 0x55555556, 0x55555554, 0x2, x1, 1048, x2)

inst_283:
// rs1_val==1431655764 and imm_val==1364, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x55555554;  immval:0x554
TEST_IMM_OP( addi, x11, x10, 0x55555aa8, 0x55555554, 0x554, x1, 1052, x2)

inst_284:
// rs1_val==1431655764 and imm_val==0, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x55555554;  immval:0x0
TEST_IMM_OP( addi, x11, x10, 0x55555554, 0x55555554, 0x0, x1, 1056, x2)

inst_285:
// rs1_val==1431655764 and imm_val==4, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x55555554;  immval:0x4
TEST_IMM_OP( addi, x11, x10, 0x55555558, 0x55555554, 0x4, x1, 1060, x2)

inst_286:
// rs1_val==1431655764 and imm_val==818, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x55555554;  immval:0x332
TEST_IMM_OP( addi, x11, x10, 0x55555886, 0x55555554, 0x332, x1, 1064, x2)

inst_287:
// rs1_val==1431655764 and imm_val==1637, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x55555554;  immval:0x665
TEST_IMM_OP( addi, x11, x10, 0x55555bb9, 0x55555554, 0x665, x1, 1068, x2)

inst_288:
// rs1_val==1431655764 and imm_val==44, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x55555554;  immval:0x2c
TEST_IMM_OP( addi, x11, x10, 0x55555580, 0x55555554, 0x2c, x1, 1072, x2)

inst_289:
// rs1_val==1431655764 and imm_val==1366, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x55555554;  immval:0x556
TEST_IMM_OP( addi, x11, x10, 0x55555aaa, 0x55555554, 0x556, x1, 1076, x2)

inst_290:
// rs1_val==1431655764 and imm_val==-1365, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x55555554;  immval:-0x555
TEST_IMM_OP( addi, x11, x10, 0x55554fff, 0x55555554, -0x555, x1, 1080, x2)

inst_291:
// rs1_val==1431655764 and imm_val==6, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x55555554;  immval:0x6
TEST_IMM_OP( addi, x11, x10, 0x5555555a, 0x55555554, 0x6, x1, 1084, x2)

inst_292:
// rs1_val==1431655764 and imm_val==820, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x55555554;  immval:0x334
TEST_IMM_OP( addi, x11, x10, 0x55555888, 0x55555554, 0x334, x1, 1088, x2)

inst_293:
// rs1_val==1431655764 and imm_val==1639, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x55555554;  immval:0x667
TEST_IMM_OP( addi, x11, x10, 0x55555bbb, 0x55555554, 0x667, x1, 1092, x2)

inst_294:
// rs1_val==1431655764 and imm_val==-44, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x55555554;  immval:-0x2c
TEST_IMM_OP( addi, x11, x10, 0x55555528, 0x55555554, -0x2c, x1, 1096, x2)

inst_295:
// rs1_val==1431655764 and imm_val==46, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x55555554;  immval:0x2e
TEST_IMM_OP( addi, x11, x10, 0x55555582, 0x55555554, 0x2e, x1, 1100, x2)

inst_296:
// rs1_val==0 and imm_val==3, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x0;  immval:0x3
TEST_IMM_OP( addi, x11, x10, 0x3, 0x0, 0x3, x1, 1104, x2)

inst_297:
// rs1_val==0 and imm_val==1365, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x0;  immval:0x555
TEST_IMM_OP( addi, x11, x10, 0x555, 0x0, 0x555, x1, 1108, x2)

inst_298:
// rs1_val==0 and imm_val==-1366, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x0;  immval:-0x556
TEST_IMM_OP( addi, x11, x10, 0xfffffaaa, 0x0, -0x556, x1, 1112, x2)

inst_299:
// rs1_val==0 and imm_val==5, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x0;  immval:0x5
TEST_IMM_OP( addi, x11, x10, 0x5, 0x0, 0x5, x1, 1116, x2)

inst_300:
// rs1_val==0 and imm_val==819, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x0;  immval:0x333
TEST_IMM_OP( addi, x11, x10, 0x333, 0x0, 0x333, x1, 1120, x2)

inst_301:
// rs1_val==0 and imm_val==1638, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x0;  immval:0x666
TEST_IMM_OP( addi, x11, x10, 0x666, 0x0, 0x666, x1, 1124, x2)

inst_302:
// rs1_val==0 and imm_val==-45, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x0;  immval:-0x2d
TEST_IMM_OP( addi, x11, x10, 0xffffffd3, 0x0, -0x2d, x1, 1128, x2)

inst_303:
// rs1_val==0 and imm_val==45, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x0;  immval:0x2d
TEST_IMM_OP( addi, x11, x10, 0x2d, 0x0, 0x2d, x1, 1132, x2)

inst_304:
// rs1_val==858993460 and imm_val==818, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x33333334;  immval:0x332
TEST_IMM_OP( addi, x11, x10, 0x33333666, 0x33333334, 0x332, x1, 1136, x2)

inst_305:
// rs1_val==858993460 and imm_val==1637, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x33333334;  immval:0x665
TEST_IMM_OP( addi, x11, x10, 0x33333999, 0x33333334, 0x665, x1, 1140, x2)

inst_306:
// rs1_val==858993460 and imm_val==44, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x33333334;  immval:0x2c
TEST_IMM_OP( addi, x11, x10, 0x33333360, 0x33333334, 0x2c, x1, 1144, x2)

inst_307:
// rs1_val==858993460 and imm_val==1366, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x33333334;  immval:0x556
TEST_IMM_OP( addi, x11, x10, 0x3333388a, 0x33333334, 0x556, x1, 1148, x2)

inst_308:
// rs1_val==858993460 and imm_val==-1365, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x33333334;  immval:-0x555
TEST_IMM_OP( addi, x11, x10, 0x33332ddf, 0x33333334, -0x555, x1, 1152, x2)

inst_309:
// rs1_val==858993460 and imm_val==6, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x33333334;  immval:0x6
TEST_IMM_OP( addi, x11, x10, 0x3333333a, 0x33333334, 0x6, x1, 1156, x2)

inst_310:
// rs1_val==858993460 and imm_val==820, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x33333334;  immval:0x334
TEST_IMM_OP( addi, x11, x10, 0x33333668, 0x33333334, 0x334, x1, 1160, x2)

inst_311:
// rs1_val==858993460 and imm_val==1639, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x33333334;  immval:0x667
TEST_IMM_OP( addi, x11, x10, 0x3333399b, 0x33333334, 0x667, x1, 1164, x2)

inst_312:
// rs1_val==858993460 and imm_val==-44, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x33333334;  immval:-0x2c
TEST_IMM_OP( addi, x11, x10, 0x33333308, 0x33333334, -0x2c, x1, 1168, x2)

inst_313:
// rs1_val==858993460 and imm_val==46, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x33333334;  immval:0x2e
TEST_IMM_OP( addi, x11, x10, 0x33333362, 0x33333334, 0x2e, x1, 1172, x2)

inst_314:
// rs1_val==1717986919 and imm_val==3, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x66666667;  immval:0x3
TEST_IMM_OP( addi, x11, x10, 0x6666666a, 0x66666667, 0x3, x1, 1176, x2)

inst_315:
// rs1_val==1717986919 and imm_val==1365, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x66666667;  immval:0x555
TEST_IMM_OP( addi, x11, x10, 0x66666bbc, 0x66666667, 0x555, x1, 1180, x2)

inst_316:
// rs1_val==1717986919 and imm_val==-1366, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x66666667;  immval:-0x556
TEST_IMM_OP( addi, x11, x10, 0x66666111, 0x66666667, -0x556, x1, 1184, x2)

inst_317:
// rs1_val==1717986919 and imm_val==5, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x66666667;  immval:0x5
TEST_IMM_OP( addi, x11, x10, 0x6666666c, 0x66666667, 0x5, x1, 1188, x2)

inst_318:
// rs1_val==1717986919 and imm_val==819, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x66666667;  immval:0x333
TEST_IMM_OP( addi, x11, x10, 0x6666699a, 0x66666667, 0x333, x1, 1192, x2)

inst_319:
// rs1_val==1717986919 and imm_val==1638, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x66666667;  immval:0x666
TEST_IMM_OP( addi, x11, x10, 0x66666ccd, 0x66666667, 0x666, x1, 1196, x2)

inst_320:
// rs1_val==1717986919 and imm_val==-45, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x66666667;  immval:-0x2d
TEST_IMM_OP( addi, x11, x10, 0x6666663a, 0x66666667, -0x2d, x1, 1200, x2)

inst_321:
// rs1_val==1717986919 and imm_val==45, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x66666667;  immval:0x2d
TEST_IMM_OP( addi, x11, x10, 0x66666694, 0x66666667, 0x2d, x1, 1204, x2)

inst_322:
// rs1_val==1717986919 and imm_val==2, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x66666667;  immval:0x2
TEST_IMM_OP( addi, x11, x10, 0x66666669, 0x66666667, 0x2, x1, 1208, x2)

inst_323:
// rs1_val==1717986919 and imm_val==1364, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x66666667;  immval:0x554
TEST_IMM_OP( addi, x11, x10, 0x66666bbb, 0x66666667, 0x554, x1, 1212, x2)

inst_324:
// rs1_val==1717986919 and imm_val==0, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x66666667;  immval:0x0
TEST_IMM_OP( addi, x11, x10, 0x66666667, 0x66666667, 0x0, x1, 1216, x2)

inst_325:
// rs1_val==1717986919 and imm_val==4, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x66666667;  immval:0x4
TEST_IMM_OP( addi, x11, x10, 0x6666666b, 0x66666667, 0x4, x1, 1220, x2)

inst_326:
// rs1_val==1717986919 and imm_val==818, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x66666667;  immval:0x332
TEST_IMM_OP( addi, x11, x10, 0x66666999, 0x66666667, 0x332, x1, 1224, x2)

inst_327:
// rs1_val==1717986919 and imm_val==1637, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x66666667;  immval:0x665
TEST_IMM_OP( addi, x11, x10, 0x66666ccc, 0x66666667, 0x665, x1, 1228, x2)

inst_328:
// rs1_val==1717986919 and imm_val==44, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x66666667;  immval:0x2c
TEST_IMM_OP( addi, x11, x10, 0x66666693, 0x66666667, 0x2c, x1, 1232, x2)

inst_329:
// rs1_val==1717986919 and imm_val==1366, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x66666667;  immval:0x556
TEST_IMM_OP( addi, x11, x10, 0x66666bbd, 0x66666667, 0x556, x1, 1236, x2)

inst_330:
// rs1_val==1717986919 and imm_val==-1365, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x66666667;  immval:-0x555
TEST_IMM_OP( addi, x11, x10, 0x66666112, 0x66666667, -0x555, x1, 1240, x2)

inst_331:
// rs1_val==1717986919 and imm_val==6, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x66666667;  immval:0x6
TEST_IMM_OP( addi, x11, x10, 0x6666666d, 0x66666667, 0x6, x1, 1244, x2)

inst_332:
// rs1_val==1717986919 and imm_val==820, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x66666667;  immval:0x334
TEST_IMM_OP( addi, x11, x10, 0x6666699b, 0x66666667, 0x334, x1, 1248, x2)

inst_333:
// rs1_val==1717986919 and imm_val==1639, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x66666667;  immval:0x667
TEST_IMM_OP( addi, x11, x10, 0x66666cce, 0x66666667, 0x667, x1, 1252, x2)

inst_334:
// rs1_val==1717986919 and imm_val==-44, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x66666667;  immval:-0x2c
TEST_IMM_OP( addi, x11, x10, 0x6666663b, 0x66666667, -0x2c, x1, 1256, x2)

inst_335:
// rs1_val==1717986919 and imm_val==46, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x66666667;  immval:0x2e
TEST_IMM_OP( addi, x11, x10, 0x66666695, 0x66666667, 0x2e, x1, 1260, x2)

inst_336:
// rs1_val==-46339 and imm_val==3, 
// opcode: addi ; op1:x10; dest:x11; op1val:-0xb503;  immval:0x3
TEST_IMM_OP( addi, x11, x10, 0xffff4b00, -0xb503, 0x3, x1, 1264, x2)

inst_337:
// rs1_val==-46339 and imm_val==1365, 
// opcode: addi ; op1:x10; dest:x11; op1val:-0xb503;  immval:0x555
TEST_IMM_OP( addi, x11, x10, 0xffff5052, -0xb503, 0x555, x1, 1268, x2)

inst_338:
// rs1_val==-46339 and imm_val==-1366, 
// opcode: addi ; op1:x10; dest:x11; op1val:-0xb503;  immval:-0x556
TEST_IMM_OP( addi, x11, x10, 0xffff45a7, -0xb503, -0x556, x1, 1272, x2)

inst_339:
// rs1_val==-46339 and imm_val==5, 
// opcode: addi ; op1:x10; dest:x11; op1val:-0xb503;  immval:0x5
TEST_IMM_OP( addi, x11, x10, 0xffff4b02, -0xb503, 0x5, x1, 1276, x2)

inst_340:
// rs1_val==-46339 and imm_val==819, 
// opcode: addi ; op1:x10; dest:x11; op1val:-0xb503;  immval:0x333
TEST_IMM_OP( addi, x11, x10, 0xffff4e30, -0xb503, 0x333, x1, 1280, x2)

inst_341:
// rs1_val==-46339 and imm_val==1638, 
// opcode: addi ; op1:x10; dest:x11; op1val:-0xb503;  immval:0x666
TEST_IMM_OP( addi, x11, x10, 0xffff5163, -0xb503, 0x666, x1, 1284, x2)

inst_342:
// rs1_val==-46339 and imm_val==-45, 
// opcode: addi ; op1:x10; dest:x11; op1val:-0xb503;  immval:-0x2d
TEST_IMM_OP( addi, x11, x10, 0xffff4ad0, -0xb503, -0x2d, x1, 1288, x2)

inst_343:
// rs1_val==-46339 and imm_val==45, 
// opcode: addi ; op1:x10; dest:x11; op1val:-0xb503;  immval:0x2d
TEST_IMM_OP( addi, x11, x10, 0xffff4b2a, -0xb503, 0x2d, x1, 1292, x2)

inst_344:
// rs1_val==-46339 and imm_val==2, 
// opcode: addi ; op1:x10; dest:x11; op1val:-0xb503;  immval:0x2
TEST_IMM_OP( addi, x11, x10, 0xffff4aff, -0xb503, 0x2, x1, 1296, x2)

inst_345:
// rs1_val==-46339 and imm_val==1364, 
// opcode: addi ; op1:x10; dest:x11; op1val:-0xb503;  immval:0x554
TEST_IMM_OP( addi, x11, x10, 0xffff5051, -0xb503, 0x554, x1, 1300, x2)

inst_346:
// rs1_val==-46339 and imm_val==0, 
// opcode: addi ; op1:x10; dest:x11; op1val:-0xb503;  immval:0x0
TEST_IMM_OP( addi, x11, x10, 0xffff4afd, -0xb503, 0x0, x1, 1304, x2)

inst_347:
// rs1_val==-46339 and imm_val==4, 
// opcode: addi ; op1:x10; dest:x11; op1val:-0xb503;  immval:0x4
TEST_IMM_OP( addi, x11, x10, 0xffff4b01, -0xb503, 0x4, x1, 1308, x2)

inst_348:
// rs1_val==-46339 and imm_val==818, 
// opcode: addi ; op1:x10; dest:x11; op1val:-0xb503;  immval:0x332
TEST_IMM_OP( addi, x11, x10, 0xffff4e2f, -0xb503, 0x332, x1, 1312, x2)

inst_349:
// rs1_val==-46339 and imm_val==1637, 
// opcode: addi ; op1:x10; dest:x11; op1val:-0xb503;  immval:0x665
TEST_IMM_OP( addi, x11, x10, 0xffff5162, -0xb503, 0x665, x1, 1316, x2)

inst_350:
// rs1_val==-46339 and imm_val==44, 
// opcode: addi ; op1:x10; dest:x11; op1val:-0xb503;  immval:0x2c
TEST_IMM_OP( addi, x11, x10, 0xffff4b29, -0xb503, 0x2c, x1, 1320, x2)

inst_351:
// rs1_val==-46339 and imm_val==1366, 
// opcode: addi ; op1:x10; dest:x11; op1val:-0xb503;  immval:0x556
TEST_IMM_OP( addi, x11, x10, 0xffff5053, -0xb503, 0x556, x1, 1324, x2)

inst_352:
// rs1_val==-46339 and imm_val==-1365, 
// opcode: addi ; op1:x10; dest:x11; op1val:-0xb503;  immval:-0x555
TEST_IMM_OP( addi, x11, x10, 0xffff45a8, -0xb503, -0x555, x1, 1328, x2)

inst_353:
// rs1_val==-46339 and imm_val==6, 
// opcode: addi ; op1:x10; dest:x11; op1val:-0xb503;  immval:0x6
TEST_IMM_OP( addi, x11, x10, 0xffff4b03, -0xb503, 0x6, x1, 1332, x2)

inst_354:
// rs1_val==-46339 and imm_val==820, 
// opcode: addi ; op1:x10; dest:x11; op1val:-0xb503;  immval:0x334
TEST_IMM_OP( addi, x11, x10, 0xffff4e31, -0xb503, 0x334, x1, 1336, x2)

inst_355:
// rs1_val==-46339 and imm_val==1639, 
// opcode: addi ; op1:x10; dest:x11; op1val:-0xb503;  immval:0x667
TEST_IMM_OP( addi, x11, x10, 0xffff5164, -0xb503, 0x667, x1, 1340, x2)

inst_356:
// rs1_val==-46339 and imm_val==-44, 
// opcode: addi ; op1:x10; dest:x11; op1val:-0xb503;  immval:-0x2c
TEST_IMM_OP( addi, x11, x10, 0xffff4ad1, -0xb503, -0x2c, x1, 1344, x2)

inst_357:
// rs1_val==-46339 and imm_val==46, 
// opcode: addi ; op1:x10; dest:x11; op1val:-0xb503;  immval:0x2e
TEST_IMM_OP( addi, x11, x10, 0xffff4b2b, -0xb503, 0x2e, x1, 1348, x2)

inst_358:
// rs1_val==46341 and imm_val==3, 
// opcode: addi ; op1:x10; dest:x11; op1val:0xb505;  immval:0x3
TEST_IMM_OP( addi, x11, x10, 0xb508, 0xb505, 0x3, x1, 1352, x2)

inst_359:
// rs1_val==46341 and imm_val==1365, 
// opcode: addi ; op1:x10; dest:x11; op1val:0xb505;  immval:0x555
TEST_IMM_OP( addi, x11, x10, 0xba5a, 0xb505, 0x555, x1, 1356, x2)

inst_360:
// rs1_val==46341 and imm_val==-1366, 
// opcode: addi ; op1:x10; dest:x11; op1val:0xb505;  immval:-0x556
TEST_IMM_OP( addi, x11, x10, 0xafaf, 0xb505, -0x556, x1, 1360, x2)

inst_361:
// rs1_val==46341 and imm_val==5, 
// opcode: addi ; op1:x10; dest:x11; op1val:0xb505;  immval:0x5
TEST_IMM_OP( addi, x11, x10, 0xb50a, 0xb505, 0x5, x1, 1364, x2)

inst_362:
// rs1_val==46341 and imm_val==819, 
// opcode: addi ; op1:x10; dest:x11; op1val:0xb505;  immval:0x333
TEST_IMM_OP( addi, x11, x10, 0xb838, 0xb505, 0x333, x1, 1368, x2)

inst_363:
// rs1_val==46341 and imm_val==1638, 
// opcode: addi ; op1:x10; dest:x11; op1val:0xb505;  immval:0x666
TEST_IMM_OP( addi, x11, x10, 0xbb6b, 0xb505, 0x666, x1, 1372, x2)

inst_364:
// rs1_val==46341 and imm_val==-45, 
// opcode: addi ; op1:x10; dest:x11; op1val:0xb505;  immval:-0x2d
TEST_IMM_OP( addi, x11, x10, 0xb4d8, 0xb505, -0x2d, x1, 1376, x2)

inst_365:
// rs1_val==46341 and imm_val==45, 
// opcode: addi ; op1:x10; dest:x11; op1val:0xb505;  immval:0x2d
TEST_IMM_OP( addi, x11, x10, 0xb532, 0xb505, 0x2d, x1, 1380, x2)

inst_366:
// rs1_val==46341 and imm_val==2, 
// opcode: addi ; op1:x10; dest:x11; op1val:0xb505;  immval:0x2
TEST_IMM_OP( addi, x11, x10, 0xb507, 0xb505, 0x2, x1, 1384, x2)

inst_367:
// rs1_val==46341 and imm_val==1364, 
// opcode: addi ; op1:x10; dest:x11; op1val:0xb505;  immval:0x554
TEST_IMM_OP( addi, x11, x10, 0xba59, 0xb505, 0x554, x1, 1388, x2)

inst_368:
// rs1_val==46341 and imm_val==0, 
// opcode: addi ; op1:x10; dest:x11; op1val:0xb505;  immval:0x0
TEST_IMM_OP( addi, x11, x10, 0xb505, 0xb505, 0x0, x1, 1392, x2)

inst_369:
// rs1_val==46341 and imm_val==4, 
// opcode: addi ; op1:x10; dest:x11; op1val:0xb505;  immval:0x4
TEST_IMM_OP( addi, x11, x10, 0xb509, 0xb505, 0x4, x1, 1396, x2)

inst_370:
// rs1_val==46341 and imm_val==818, 
// opcode: addi ; op1:x10; dest:x11; op1val:0xb505;  immval:0x332
TEST_IMM_OP( addi, x11, x10, 0xb837, 0xb505, 0x332, x1, 1400, x2)

inst_371:
// rs1_val==46341 and imm_val==1637, 
// opcode: addi ; op1:x10; dest:x11; op1val:0xb505;  immval:0x665
TEST_IMM_OP( addi, x11, x10, 0xbb6a, 0xb505, 0x665, x1, 1404, x2)

inst_372:
// rs1_val==46341 and imm_val==44, 
// opcode: addi ; op1:x10; dest:x11; op1val:0xb505;  immval:0x2c
TEST_IMM_OP( addi, x11, x10, 0xb531, 0xb505, 0x2c, x1, 1408, x2)

inst_373:
// rs1_val==46341 and imm_val==1366, 
// opcode: addi ; op1:x10; dest:x11; op1val:0xb505;  immval:0x556
TEST_IMM_OP( addi, x11, x10, 0xba5b, 0xb505, 0x556, x1, 1412, x2)

inst_374:
// rs1_val==46341 and imm_val==-1365, 
// opcode: addi ; op1:x10; dest:x11; op1val:0xb505;  immval:-0x555
TEST_IMM_OP( addi, x11, x10, 0xafb0, 0xb505, -0x555, x1, 1416, x2)

inst_375:
// rs1_val==46341 and imm_val==6, 
// opcode: addi ; op1:x10; dest:x11; op1val:0xb505;  immval:0x6
TEST_IMM_OP( addi, x11, x10, 0xb50b, 0xb505, 0x6, x1, 1420, x2)

inst_376:
// rs1_val==46341 and imm_val==820, 
// opcode: addi ; op1:x10; dest:x11; op1val:0xb505;  immval:0x334
TEST_IMM_OP( addi, x11, x10, 0xb839, 0xb505, 0x334, x1, 1424, x2)

inst_377:
// rs1_val==46341 and imm_val==1639, 
// opcode: addi ; op1:x10; dest:x11; op1val:0xb505;  immval:0x667
TEST_IMM_OP( addi, x11, x10, 0xbb6c, 0xb505, 0x667, x1, 1428, x2)

inst_378:
// rs1_val==46341 and imm_val==-44, 
// opcode: addi ; op1:x10; dest:x11; op1val:0xb505;  immval:-0x2c
TEST_IMM_OP( addi, x11, x10, 0xb4d9, 0xb505, -0x2c, x1, 1432, x2)

inst_379:
// rs1_val==46341 and imm_val==46, 
// opcode: addi ; op1:x10; dest:x11; op1val:0xb505;  immval:0x2e
TEST_IMM_OP( addi, x11, x10, 0xb533, 0xb505, 0x2e, x1, 1436, x2)

inst_380:
// rs1_val==0 and imm_val==1364, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x0;  immval:0x554
TEST_IMM_OP( addi, x11, x10, 0x554, 0x0, 0x554, x1, 1440, x2)

inst_381:
// rs1_val==0 and imm_val==0, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x0;  immval:0x0
TEST_IMM_OP( addi, x11, x10, 0x0, 0x0, 0x0, x1, 1444, x2)

inst_382:
// rs1_val==0 and imm_val==4, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x0;  immval:0x4
TEST_IMM_OP( addi, x11, x10, 0x4, 0x0, 0x4, x1, 1448, x2)

inst_383:
// rs1_val==0 and imm_val==818, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x0;  immval:0x332
TEST_IMM_OP( addi, x11, x10, 0x332, 0x0, 0x332, x1, 1452, x2)

inst_384:
// rs1_val==0 and imm_val==1637, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x0;  immval:0x665
TEST_IMM_OP( addi, x11, x10, 0x665, 0x0, 0x665, x1, 1456, x2)

inst_385:
// rs1_val==0 and imm_val==44, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x0;  immval:0x2c
TEST_IMM_OP( addi, x11, x10, 0x2c, 0x0, 0x2c, x1, 1460, x2)

inst_386:
// rs1_val==0 and imm_val==1366, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x0;  immval:0x556
TEST_IMM_OP( addi, x11, x10, 0x556, 0x0, 0x556, x1, 1464, x2)

inst_387:
// rs1_val==0 and imm_val==-1365, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x0;  immval:-0x555
TEST_IMM_OP( addi, x11, x10, 0xfffffaab, 0x0, -0x555, x1, 1468, x2)

inst_388:
// rs1_val==0 and imm_val==6, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x0;  immval:0x6
TEST_IMM_OP( addi, x11, x10, 0x6, 0x0, 0x6, x1, 1472, x2)

inst_389:
// rs1_val==0 and imm_val==820, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x0;  immval:0x334
TEST_IMM_OP( addi, x11, x10, 0x334, 0x0, 0x334, x1, 1476, x2)

inst_390:
// rs1_val==0 and imm_val==1639, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x0;  immval:0x667
TEST_IMM_OP( addi, x11, x10, 0x667, 0x0, 0x667, x1, 1480, x2)

inst_391:
// rs1_val==0 and imm_val==-44, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x0;  immval:-0x2c
TEST_IMM_OP( addi, x11, x10, 0xffffffd4, 0x0, -0x2c, x1, 1484, x2)

inst_392:
// rs1_val==0 and imm_val==46, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x0;  immval:0x2e
TEST_IMM_OP( addi, x11, x10, 0x2e, 0x0, 0x2e, x1, 1488, x2)

inst_393:
// rs1_val==4 and imm_val==3, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x4;  immval:0x3
TEST_IMM_OP( addi, x11, x10, 0x7, 0x4, 0x3, x1, 1492, x2)

inst_394:
// rs1_val==4 and imm_val==1365, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x4;  immval:0x555
TEST_IMM_OP( addi, x11, x10, 0x559, 0x4, 0x555, x1, 1496, x2)

inst_395:
// rs1_val==4 and imm_val==-1366, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x4;  immval:-0x556
TEST_IMM_OP( addi, x11, x10, 0xfffffaae, 0x4, -0x556, x1, 1500, x2)

inst_396:
// rs1_val==4 and imm_val==5, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x4;  immval:0x5
TEST_IMM_OP( addi, x11, x10, 0x9, 0x4, 0x5, x1, 1504, x2)

inst_397:
// rs1_val==4 and imm_val==819, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x4;  immval:0x333
TEST_IMM_OP( addi, x11, x10, 0x337, 0x4, 0x333, x1, 1508, x2)

inst_398:
// rs1_val==4 and imm_val==1638, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x4;  immval:0x666
TEST_IMM_OP( addi, x11, x10, 0x66a, 0x4, 0x666, x1, 1512, x2)

inst_399:
// rs1_val==4 and imm_val==-45, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x4;  immval:-0x2d
TEST_IMM_OP( addi, x11, x10, 0xffffffd7, 0x4, -0x2d, x1, 1516, x2)

inst_400:
// rs1_val==4 and imm_val==45, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x4;  immval:0x2d
TEST_IMM_OP( addi, x11, x10, 0x31, 0x4, 0x2d, x1, 1520, x2)

inst_401:
// rs1_val==4 and imm_val==2, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x4;  immval:0x2
TEST_IMM_OP( addi, x11, x10, 0x6, 0x4, 0x2, x1, 1524, x2)

inst_402:
// rs1_val==4 and imm_val==1364, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x4;  immval:0x554
TEST_IMM_OP( addi, x11, x10, 0x558, 0x4, 0x554, x1, 1528, x2)

inst_403:
// rs1_val==4 and imm_val==0, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x4;  immval:0x0
TEST_IMM_OP( addi, x11, x10, 0x4, 0x4, 0x0, x1, 1532, x2)

inst_404:
// rs1_val==4 and imm_val==4, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x4;  immval:0x4
TEST_IMM_OP( addi, x11, x10, 0x8, 0x4, 0x4, x1, 1536, x2)

inst_405:
// rs1_val==4 and imm_val==818, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x4;  immval:0x332
TEST_IMM_OP( addi, x11, x10, 0x336, 0x4, 0x332, x1, 1540, x2)

inst_406:
// rs1_val==4 and imm_val==1637, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x4;  immval:0x665
TEST_IMM_OP( addi, x11, x10, 0x669, 0x4, 0x665, x1, 1544, x2)

inst_407:
// rs1_val==4 and imm_val==44, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x4;  immval:0x2c
TEST_IMM_OP( addi, x11, x10, 0x30, 0x4, 0x2c, x1, 1548, x2)

inst_408:
// rs1_val==4 and imm_val==1366, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x4;  immval:0x556
TEST_IMM_OP( addi, x11, x10, 0x55a, 0x4, 0x556, x1, 1552, x2)

inst_409:
// rs1_val==4 and imm_val==-1365, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x4;  immval:-0x555
TEST_IMM_OP( addi, x11, x10, 0xfffffaaf, 0x4, -0x555, x1, 1556, x2)

inst_410:
// rs1_val==4 and imm_val==6, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x4;  immval:0x6
TEST_IMM_OP( addi, x11, x10, 0xa, 0x4, 0x6, x1, 1560, x2)

inst_411:
// rs1_val==4 and imm_val==820, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x4;  immval:0x334
TEST_IMM_OP( addi, x11, x10, 0x338, 0x4, 0x334, x1, 1564, x2)

inst_412:
// rs1_val==4 and imm_val==1639, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x4;  immval:0x667
TEST_IMM_OP( addi, x11, x10, 0x66b, 0x4, 0x667, x1, 1568, x2)

inst_413:
// rs1_val==4 and imm_val==-44, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x4;  immval:-0x2c
TEST_IMM_OP( addi, x11, x10, 0xffffffd8, 0x4, -0x2c, x1, 1572, x2)

inst_414:
// rs1_val==4 and imm_val==46, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x4;  immval:0x2e
TEST_IMM_OP( addi, x11, x10, 0x32, 0x4, 0x2e, x1, 1576, x2)

inst_415:
// rs1_val==858993458 and imm_val==3, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x33333332;  immval:0x3
TEST_IMM_OP( addi, x11, x10, 0x33333335, 0x33333332, 0x3, x1, 1580, x2)

inst_416:
// rs1_val==858993458 and imm_val==1365, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x33333332;  immval:0x555
TEST_IMM_OP( addi, x11, x10, 0x33333887, 0x33333332, 0x555, x1, 1584, x2)

inst_417:
// rs1_val==858993458 and imm_val==-1366, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x33333332;  immval:-0x556
TEST_IMM_OP( addi, x11, x10, 0x33332ddc, 0x33333332, -0x556, x1, 1588, x2)

inst_418:
// rs1_val==858993458 and imm_val==5, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x33333332;  immval:0x5
TEST_IMM_OP( addi, x11, x10, 0x33333337, 0x33333332, 0x5, x1, 1592, x2)

inst_419:
// rs1_val==858993458 and imm_val==819, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x33333332;  immval:0x333
TEST_IMM_OP( addi, x11, x10, 0x33333665, 0x33333332, 0x333, x1, 1596, x2)

inst_420:
// rs1_val==858993458 and imm_val==1638, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x33333332;  immval:0x666
TEST_IMM_OP( addi, x11, x10, 0x33333998, 0x33333332, 0x666, x1, 1600, x2)

inst_421:
// rs1_val==858993458 and imm_val==-45, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x33333332;  immval:-0x2d
TEST_IMM_OP( addi, x11, x10, 0x33333305, 0x33333332, -0x2d, x1, 1604, x2)

inst_422:
// rs1_val==858993458 and imm_val==45, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x33333332;  immval:0x2d
TEST_IMM_OP( addi, x11, x10, 0x3333335f, 0x33333332, 0x2d, x1, 1608, x2)

inst_423:
// rs1_val==858993458 and imm_val==2, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x33333332;  immval:0x2
TEST_IMM_OP( addi, x11, x10, 0x33333334, 0x33333332, 0x2, x1, 1612, x2)

inst_424:
// rs1_val==858993458 and imm_val==1364, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x33333332;  immval:0x554
TEST_IMM_OP( addi, x11, x10, 0x33333886, 0x33333332, 0x554, x1, 1616, x2)

inst_425:
// rs1_val==858993458 and imm_val==0, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x33333332;  immval:0x0
TEST_IMM_OP( addi, x11, x10, 0x33333332, 0x33333332, 0x0, x1, 1620, x2)

inst_426:
// rs1_val==858993458 and imm_val==4, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x33333332;  immval:0x4
TEST_IMM_OP( addi, x11, x10, 0x33333336, 0x33333332, 0x4, x1, 1624, x2)

inst_427:
// rs1_val==858993458 and imm_val==818, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x33333332;  immval:0x332
TEST_IMM_OP( addi, x11, x10, 0x33333664, 0x33333332, 0x332, x1, 1628, x2)

inst_428:
// rs1_val==858993458 and imm_val==1637, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x33333332;  immval:0x665
TEST_IMM_OP( addi, x11, x10, 0x33333997, 0x33333332, 0x665, x1, 1632, x2)

inst_429:
// rs1_val==858993458 and imm_val==44, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x33333332;  immval:0x2c
TEST_IMM_OP( addi, x11, x10, 0x3333335e, 0x33333332, 0x2c, x1, 1636, x2)

inst_430:
// rs1_val==858993458 and imm_val==1366, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x33333332;  immval:0x556
TEST_IMM_OP( addi, x11, x10, 0x33333888, 0x33333332, 0x556, x1, 1640, x2)

inst_431:
// rs1_val==858993458 and imm_val==-1365, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x33333332;  immval:-0x555
TEST_IMM_OP( addi, x11, x10, 0x33332ddd, 0x33333332, -0x555, x1, 1644, x2)

inst_432:
// rs1_val==858993458 and imm_val==6, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x33333332;  immval:0x6
TEST_IMM_OP( addi, x11, x10, 0x33333338, 0x33333332, 0x6, x1, 1648, x2)

inst_433:
// rs1_val==858993458 and imm_val==820, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x33333332;  immval:0x334
TEST_IMM_OP( addi, x11, x10, 0x33333666, 0x33333332, 0x334, x1, 1652, x2)

inst_434:
// rs1_val==858993458 and imm_val==1639, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x33333332;  immval:0x667
TEST_IMM_OP( addi, x11, x10, 0x33333999, 0x33333332, 0x667, x1, 1656, x2)

inst_435:
// rs1_val==858993458 and imm_val==-44, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x33333332;  immval:-0x2c
TEST_IMM_OP( addi, x11, x10, 0x33333306, 0x33333332, -0x2c, x1, 1660, x2)

inst_436:
// rs1_val==858993458 and imm_val==46, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x33333332;  immval:0x2e
TEST_IMM_OP( addi, x11, x10, 0x33333360, 0x33333332, 0x2e, x1, 1664, x2)

inst_437:
// rs1_val==1717986917 and imm_val==3, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x66666665;  immval:0x3
TEST_IMM_OP( addi, x11, x10, 0x66666668, 0x66666665, 0x3, x1, 1668, x2)

inst_438:
// rs1_val==1717986917 and imm_val==1365, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x66666665;  immval:0x555
TEST_IMM_OP( addi, x11, x10, 0x66666bba, 0x66666665, 0x555, x1, 1672, x2)

inst_439:
// rs1_val==1717986917 and imm_val==-1366, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x66666665;  immval:-0x556
TEST_IMM_OP( addi, x11, x10, 0x6666610f, 0x66666665, -0x556, x1, 1676, x2)

inst_440:
// rs1_val==1717986917 and imm_val==5, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x66666665;  immval:0x5
TEST_IMM_OP( addi, x11, x10, 0x6666666a, 0x66666665, 0x5, x1, 1680, x2)

inst_441:
// rs1_val==1717986917 and imm_val==819, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x66666665;  immval:0x333
TEST_IMM_OP( addi, x11, x10, 0x66666998, 0x66666665, 0x333, x1, 1684, x2)

inst_442:
// rs1_val==1717986917 and imm_val==1638, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x66666665;  immval:0x666
TEST_IMM_OP( addi, x11, x10, 0x66666ccb, 0x66666665, 0x666, x1, 1688, x2)

inst_443:
// rs1_val==1717986917 and imm_val==-45, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x66666665;  immval:-0x2d
TEST_IMM_OP( addi, x11, x10, 0x66666638, 0x66666665, -0x2d, x1, 1692, x2)

inst_444:
// rs1_val==1717986917 and imm_val==45, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x66666665;  immval:0x2d
TEST_IMM_OP( addi, x11, x10, 0x66666692, 0x66666665, 0x2d, x1, 1696, x2)

inst_445:
// rs1_val==1717986917 and imm_val==2, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x66666665;  immval:0x2
TEST_IMM_OP( addi, x11, x10, 0x66666667, 0x66666665, 0x2, x1, 1700, x2)

inst_446:
// rs1_val==1717986917 and imm_val==1364, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x66666665;  immval:0x554
TEST_IMM_OP( addi, x11, x10, 0x66666bb9, 0x66666665, 0x554, x1, 1704, x2)

inst_447:
// rs1_val==1717986917 and imm_val==0, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x66666665;  immval:0x0
TEST_IMM_OP( addi, x11, x10, 0x66666665, 0x66666665, 0x0, x1, 1708, x2)

inst_448:
// rs1_val==1717986917 and imm_val==4, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x66666665;  immval:0x4
TEST_IMM_OP( addi, x11, x10, 0x66666669, 0x66666665, 0x4, x1, 1712, x2)

inst_449:
// rs1_val==1717986917 and imm_val==818, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x66666665;  immval:0x332
TEST_IMM_OP( addi, x11, x10, 0x66666997, 0x66666665, 0x332, x1, 1716, x2)

inst_450:
// rs1_val==1717986917 and imm_val==1637, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x66666665;  immval:0x665
TEST_IMM_OP( addi, x11, x10, 0x66666cca, 0x66666665, 0x665, x1, 1720, x2)

inst_451:
// rs1_val==1717986917 and imm_val==44, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x66666665;  immval:0x2c
TEST_IMM_OP( addi, x11, x10, 0x66666691, 0x66666665, 0x2c, x1, 1724, x2)

inst_452:
// rs1_val==1717986917 and imm_val==1366, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x66666665;  immval:0x556
TEST_IMM_OP( addi, x11, x10, 0x66666bbb, 0x66666665, 0x556, x1, 1728, x2)

inst_453:
// rs1_val==1717986917 and imm_val==-1365, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x66666665;  immval:-0x555
TEST_IMM_OP( addi, x11, x10, 0x66666110, 0x66666665, -0x555, x1, 1732, x2)

inst_454:
// rs1_val==1717986917 and imm_val==6, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x66666665;  immval:0x6
TEST_IMM_OP( addi, x11, x10, 0x6666666b, 0x66666665, 0x6, x1, 1736, x2)

inst_455:
// rs1_val==1717986917 and imm_val==820, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x66666665;  immval:0x334
TEST_IMM_OP( addi, x11, x10, 0x66666999, 0x66666665, 0x334, x1, 1740, x2)

inst_456:
// rs1_val==1717986917 and imm_val==1639, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x66666665;  immval:0x667
TEST_IMM_OP( addi, x11, x10, 0x66666ccc, 0x66666665, 0x667, x1, 1744, x2)

inst_457:
// rs1_val==1717986917 and imm_val==-44, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x66666665;  immval:-0x2c
TEST_IMM_OP( addi, x11, x10, 0x66666639, 0x66666665, -0x2c, x1, 1748, x2)

inst_458:
// rs1_val==1717986917 and imm_val==46, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x66666665;  immval:0x2e
TEST_IMM_OP( addi, x11, x10, 0x66666693, 0x66666665, 0x2e, x1, 1752, x2)

inst_459:
// rs1_val==46339 and imm_val==3, 
// opcode: addi ; op1:x10; dest:x11; op1val:0xb503;  immval:0x3
TEST_IMM_OP( addi, x11, x10, 0xb506, 0xb503, 0x3, x1, 1756, x2)

inst_460:
// rs1_val==46339 and imm_val==1365, 
// opcode: addi ; op1:x10; dest:x11; op1val:0xb503;  immval:0x555
TEST_IMM_OP( addi, x11, x10, 0xba58, 0xb503, 0x555, x1, 1760, x2)

inst_461:
// rs1_val==46339 and imm_val==-1366, 
// opcode: addi ; op1:x10; dest:x11; op1val:0xb503;  immval:-0x556
TEST_IMM_OP( addi, x11, x10, 0xafad, 0xb503, -0x556, x1, 1764, x2)

inst_462:
// rs1_val==46339 and imm_val==5, 
// opcode: addi ; op1:x10; dest:x11; op1val:0xb503;  immval:0x5
TEST_IMM_OP( addi, x11, x10, 0xb508, 0xb503, 0x5, x1, 1768, x2)

inst_463:
// rs1_val==46339 and imm_val==819, 
// opcode: addi ; op1:x10; dest:x11; op1val:0xb503;  immval:0x333
TEST_IMM_OP( addi, x11, x10, 0xb836, 0xb503, 0x333, x1, 1772, x2)

inst_464:
// rs1_val==46339 and imm_val==1638, 
// opcode: addi ; op1:x10; dest:x11; op1val:0xb503;  immval:0x666
TEST_IMM_OP( addi, x11, x10, 0xbb69, 0xb503, 0x666, x1, 1776, x2)

inst_465:
// rs1_val==46339 and imm_val==-45, 
// opcode: addi ; op1:x10; dest:x11; op1val:0xb503;  immval:-0x2d
TEST_IMM_OP( addi, x11, x10, 0xb4d6, 0xb503, -0x2d, x1, 1780, x2)

inst_466:
// rs1_val==46339 and imm_val==45, 
// opcode: addi ; op1:x10; dest:x11; op1val:0xb503;  immval:0x2d
TEST_IMM_OP( addi, x11, x10, 0xb530, 0xb503, 0x2d, x1, 1784, x2)

inst_467:
// rs1_val==46339 and imm_val==2, 
// opcode: addi ; op1:x10; dest:x11; op1val:0xb503;  immval:0x2
TEST_IMM_OP( addi, x11, x10, 0xb505, 0xb503, 0x2, x1, 1788, x2)

inst_468:
// rs1_val==46339 and imm_val==1364, 
// opcode: addi ; op1:x10; dest:x11; op1val:0xb503;  immval:0x554
TEST_IMM_OP( addi, x11, x10, 0xba57, 0xb503, 0x554, x1, 1792, x2)

inst_469:
// rs1_val==46339 and imm_val==0, 
// opcode: addi ; op1:x10; dest:x11; op1val:0xb503;  immval:0x0
TEST_IMM_OP( addi, x11, x10, 0xb503, 0xb503, 0x0, x1, 1796, x2)

inst_470:
// rs1_val==46339 and imm_val==4, 
// opcode: addi ; op1:x10; dest:x11; op1val:0xb503;  immval:0x4
TEST_IMM_OP( addi, x11, x10, 0xb507, 0xb503, 0x4, x1, 1800, x2)

inst_471:
// rs1_val==46339 and imm_val==818, 
// opcode: addi ; op1:x10; dest:x11; op1val:0xb503;  immval:0x332
TEST_IMM_OP( addi, x11, x10, 0xb835, 0xb503, 0x332, x1, 1804, x2)

inst_472:
// rs1_val==46339 and imm_val==1637, 
// opcode: addi ; op1:x10; dest:x11; op1val:0xb503;  immval:0x665
TEST_IMM_OP( addi, x11, x10, 0xbb68, 0xb503, 0x665, x1, 1808, x2)

inst_473:
// rs1_val==46339 and imm_val==44, 
// opcode: addi ; op1:x10; dest:x11; op1val:0xb503;  immval:0x2c
TEST_IMM_OP( addi, x11, x10, 0xb52f, 0xb503, 0x2c, x1, 1812, x2)

inst_474:
// rs1_val==46339 and imm_val==1366, 
// opcode: addi ; op1:x10; dest:x11; op1val:0xb503;  immval:0x556
TEST_IMM_OP( addi, x11, x10, 0xba59, 0xb503, 0x556, x1, 1816, x2)

inst_475:
// rs1_val==46339 and imm_val==-1365, 
// opcode: addi ; op1:x10; dest:x11; op1val:0xb503;  immval:-0x555
TEST_IMM_OP( addi, x11, x10, 0xafae, 0xb503, -0x555, x1, 1820, x2)

inst_476:
// rs1_val==46339 and imm_val==6, 
// opcode: addi ; op1:x10; dest:x11; op1val:0xb503;  immval:0x6
TEST_IMM_OP( addi, x11, x10, 0xb509, 0xb503, 0x6, x1, 1824, x2)

inst_477:
// rs1_val==46339 and imm_val==820, 
// opcode: addi ; op1:x10; dest:x11; op1val:0xb503;  immval:0x334
TEST_IMM_OP( addi, x11, x10, 0xb837, 0xb503, 0x334, x1, 1828, x2)

inst_478:
// rs1_val==46339 and imm_val==1639, 
// opcode: addi ; op1:x10; dest:x11; op1val:0xb503;  immval:0x667
TEST_IMM_OP( addi, x11, x10, 0xbb6a, 0xb503, 0x667, x1, 1832, x2)

inst_479:
// rs1_val==46339 and imm_val==-44, 
// opcode: addi ; op1:x10; dest:x11; op1val:0xb503;  immval:-0x2c
TEST_IMM_OP( addi, x11, x10, 0xb4d7, 0xb503, -0x2c, x1, 1836, x2)

inst_480:
// rs1_val==46339 and imm_val==46, 
// opcode: addi ; op1:x10; dest:x11; op1val:0xb503;  immval:0x2e
TEST_IMM_OP( addi, x11, x10, 0xb531, 0xb503, 0x2e, x1, 1840, x2)

inst_481:
// rs1_val==1431655766 and imm_val==3, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x55555556;  immval:0x3
TEST_IMM_OP( addi, x11, x10, 0x55555559, 0x55555556, 0x3, x1, 1844, x2)

inst_482:
// rs1_val==1431655766 and imm_val==1365, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x55555556;  immval:0x555
TEST_IMM_OP( addi, x11, x10, 0x55555aab, 0x55555556, 0x555, x1, 1848, x2)

inst_483:
// rs1_val==1431655766 and imm_val==-1366, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x55555556;  immval:-0x556
TEST_IMM_OP( addi, x11, x10, 0x55555000, 0x55555556, -0x556, x1, 1852, x2)

inst_484:
// rs1_val==1431655766 and imm_val==5, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x55555556;  immval:0x5
TEST_IMM_OP( addi, x11, x10, 0x5555555b, 0x55555556, 0x5, x1, 1856, x2)

inst_485:
// rs1_val==1431655766 and imm_val==819, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x55555556;  immval:0x333
TEST_IMM_OP( addi, x11, x10, 0x55555889, 0x55555556, 0x333, x1, 1860, x2)

inst_486:
// rs1_val==1431655766 and imm_val==1638, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x55555556;  immval:0x666
TEST_IMM_OP( addi, x11, x10, 0x55555bbc, 0x55555556, 0x666, x1, 1864, x2)

inst_487:
// rs1_val==1431655766 and imm_val==-45, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x55555556;  immval:-0x2d
TEST_IMM_OP( addi, x11, x10, 0x55555529, 0x55555556, -0x2d, x1, 1868, x2)

inst_488:
// rs1_val==1431655766 and imm_val==45, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x55555556;  immval:0x2d
TEST_IMM_OP( addi, x11, x10, 0x55555583, 0x55555556, 0x2d, x1, 1872, x2)

inst_489:
// rs1_val==1431655766 and imm_val==2, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x55555556;  immval:0x2
TEST_IMM_OP( addi, x11, x10, 0x55555558, 0x55555556, 0x2, x1, 1876, x2)

inst_490:
// rs1_val==1431655766 and imm_val==1364, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x55555556;  immval:0x554
TEST_IMM_OP( addi, x11, x10, 0x55555aaa, 0x55555556, 0x554, x1, 1880, x2)

inst_491:
// rs1_val==1431655766 and imm_val==0, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x55555556;  immval:0x0
TEST_IMM_OP( addi, x11, x10, 0x55555556, 0x55555556, 0x0, x1, 1884, x2)

inst_492:
// rs1_val==1431655766 and imm_val==4, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x55555556;  immval:0x4
TEST_IMM_OP( addi, x11, x10, 0x5555555a, 0x55555556, 0x4, x1, 1888, x2)

inst_493:
// rs1_val==1431655766 and imm_val==818, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x55555556;  immval:0x332
TEST_IMM_OP( addi, x11, x10, 0x55555888, 0x55555556, 0x332, x1, 1892, x2)

inst_494:
// rs1_val==1431655766 and imm_val==1637, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x55555556;  immval:0x665
TEST_IMM_OP( addi, x11, x10, 0x55555bbb, 0x55555556, 0x665, x1, 1896, x2)

inst_495:
// rs1_val==1431655766 and imm_val==44, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x55555556;  immval:0x2c
TEST_IMM_OP( addi, x11, x10, 0x55555582, 0x55555556, 0x2c, x1, 1900, x2)

inst_496:
// rs1_val==1431655766 and imm_val==1366, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x55555556;  immval:0x556
TEST_IMM_OP( addi, x11, x10, 0x55555aac, 0x55555556, 0x556, x1, 1904, x2)

inst_497:
// rs1_val==1431655766 and imm_val==-1365, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x55555556;  immval:-0x555
TEST_IMM_OP( addi, x11, x10, 0x55555001, 0x55555556, -0x555, x1, 1908, x2)

inst_498:
// rs1_val==1431655766 and imm_val==6, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x55555556;  immval:0x6
TEST_IMM_OP( addi, x11, x10, 0x5555555c, 0x55555556, 0x6, x1, 1912, x2)

inst_499:
// rs1_val==1431655766 and imm_val==820, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x55555556;  immval:0x334
TEST_IMM_OP( addi, x11, x10, 0x5555588a, 0x55555556, 0x334, x1, 1916, x2)

inst_500:
// rs1_val==1431655766 and imm_val==1639, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x55555556;  immval:0x667
TEST_IMM_OP( addi, x11, x10, 0x55555bbd, 0x55555556, 0x667, x1, 1920, x2)

inst_501:
// rs1_val==1431655766 and imm_val==-44, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x55555556;  immval:-0x2c
TEST_IMM_OP( addi, x11, x10, 0x5555552a, 0x55555556, -0x2c, x1, 1924, x2)

inst_502:
// rs1_val==1431655766 and imm_val==46, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x55555556;  immval:0x2e
TEST_IMM_OP( addi, x11, x10, 0x55555584, 0x55555556, 0x2e, x1, 1928, x2)

inst_503:
// rs1_val==-1431655765 and imm_val==3, 
// opcode: addi ; op1:x10; dest:x11; op1val:-0x55555555;  immval:0x3
TEST_IMM_OP( addi, x11, x10, 0xaaaaaaae, -0x55555555, 0x3, x1, 1932, x2)

inst_504:
// rs1_val==-1431655765 and imm_val==1365, 
// opcode: addi ; op1:x10; dest:x11; op1val:-0x55555555;  immval:0x555
TEST_IMM_OP( addi, x11, x10, 0xaaaab000, -0x55555555, 0x555, x1, 1936, x2)

inst_505:
// rs1_val==-1431655765 and imm_val==-1366, 
// opcode: addi ; op1:x10; dest:x11; op1val:-0x55555555;  immval:-0x556
TEST_IMM_OP( addi, x11, x10, 0xaaaaa555, -0x55555555, -0x556, x1, 1940, x2)

inst_506:
// rs1_val==-1431655765 and imm_val==5, 
// opcode: addi ; op1:x10; dest:x11; op1val:-0x55555555;  immval:0x5
TEST_IMM_OP( addi, x11, x10, 0xaaaaaab0, -0x55555555, 0x5, x1, 1944, x2)

inst_507:
// rs1_val==-1431655765 and imm_val==819, 
// opcode: addi ; op1:x10; dest:x11; op1val:-0x55555555;  immval:0x333
TEST_IMM_OP( addi, x11, x10, 0xaaaaadde, -0x55555555, 0x333, x1, 1948, x2)

inst_508:
// rs1_val==-1431655765 and imm_val==1638, 
// opcode: addi ; op1:x10; dest:x11; op1val:-0x55555555;  immval:0x666
TEST_IMM_OP( addi, x11, x10, 0xaaaab111, -0x55555555, 0x666, x1, 1952, x2)

inst_509:
// rs1_val==-1431655765 and imm_val==-45, 
// opcode: addi ; op1:x10; dest:x11; op1val:-0x55555555;  immval:-0x2d
TEST_IMM_OP( addi, x11, x10, 0xaaaaaa7e, -0x55555555, -0x2d, x1, 1956, x2)

inst_510:
// rs1_val==-1431655765 and imm_val==45, 
// opcode: addi ; op1:x10; dest:x11; op1val:-0x55555555;  immval:0x2d
TEST_IMM_OP( addi, x11, x10, 0xaaaaaad8, -0x55555555, 0x2d, x1, 1960, x2)

inst_511:
// rs1_val==-1431655765 and imm_val==2, 
// opcode: addi ; op1:x10; dest:x11; op1val:-0x55555555;  immval:0x2
TEST_IMM_OP( addi, x11, x10, 0xaaaaaaad, -0x55555555, 0x2, x1, 1964, x2)

inst_512:
// rs1_val==-1431655765 and imm_val==1364, 
// opcode: addi ; op1:x10; dest:x11; op1val:-0x55555555;  immval:0x554
TEST_IMM_OP( addi, x11, x10, 0xaaaaafff, -0x55555555, 0x554, x1, 1968, x2)

inst_513:
// rs1_val==-1431655765 and imm_val==0, 
// opcode: addi ; op1:x10; dest:x11; op1val:-0x55555555;  immval:0x0
TEST_IMM_OP( addi, x11, x10, 0xaaaaaaab, -0x55555555, 0x0, x1, 1972, x2)

inst_514:
// rs1_val==-1431655765 and imm_val==4, 
// opcode: addi ; op1:x10; dest:x11; op1val:-0x55555555;  immval:0x4
TEST_IMM_OP( addi, x11, x10, 0xaaaaaaaf, -0x55555555, 0x4, x1, 1976, x2)

inst_515:
// rs1_val==-1431655765 and imm_val==818, 
// opcode: addi ; op1:x10; dest:x11; op1val:-0x55555555;  immval:0x332
TEST_IMM_OP( addi, x11, x10, 0xaaaaaddd, -0x55555555, 0x332, x1, 1980, x2)

inst_516:
// rs1_val==-1431655765 and imm_val==1637, 
// opcode: addi ; op1:x10; dest:x11; op1val:-0x55555555;  immval:0x665
TEST_IMM_OP( addi, x11, x10, 0xaaaab110, -0x55555555, 0x665, x1, 1984, x2)

inst_517:
// rs1_val==-1431655765 and imm_val==44, 
// opcode: addi ; op1:x10; dest:x11; op1val:-0x55555555;  immval:0x2c
TEST_IMM_OP( addi, x11, x10, 0xaaaaaad7, -0x55555555, 0x2c, x1, 1988, x2)

inst_518:
// rs1_val==-1431655765 and imm_val==1366, 
// opcode: addi ; op1:x10; dest:x11; op1val:-0x55555555;  immval:0x556
TEST_IMM_OP( addi, x11, x10, 0xaaaab001, -0x55555555, 0x556, x1, 1992, x2)

inst_519:
// rs1_val==-1431655765 and imm_val==-1365, 
// opcode: addi ; op1:x10; dest:x11; op1val:-0x55555555;  immval:-0x555
TEST_IMM_OP( addi, x11, x10, 0xaaaaa556, -0x55555555, -0x555, x1, 1996, x2)

inst_520:
// rs1_val==-1431655765 and imm_val==6, 
// opcode: addi ; op1:x10; dest:x11; op1val:-0x55555555;  immval:0x6
TEST_IMM_OP( addi, x11, x10, 0xaaaaaab1, -0x55555555, 0x6, x1, 2000, x2)

inst_521:
// rs1_val==-1431655765 and imm_val==820, 
// opcode: addi ; op1:x10; dest:x11; op1val:-0x55555555;  immval:0x334
TEST_IMM_OP( addi, x11, x10, 0xaaaaaddf, -0x55555555, 0x334, x1, 2004, x2)

inst_522:
// rs1_val==-1431655765 and imm_val==1639, 
// opcode: addi ; op1:x10; dest:x11; op1val:-0x55555555;  immval:0x667
TEST_IMM_OP( addi, x11, x10, 0xaaaab112, -0x55555555, 0x667, x1, 2008, x2)

inst_523:
// rs1_val==-1431655765 and imm_val==-44, 
// opcode: addi ; op1:x10; dest:x11; op1val:-0x55555555;  immval:-0x2c
TEST_IMM_OP( addi, x11, x10, 0xaaaaaa7f, -0x55555555, -0x2c, x1, 2012, x2)

inst_524:
// rs1_val==-1431655765 and imm_val==46, 
// opcode: addi ; op1:x10; dest:x11; op1val:-0x55555555;  immval:0x2e
TEST_IMM_OP( addi, x11, x10, 0xaaaaaad9, -0x55555555, 0x2e, x1, 2016, x2)

inst_525:
// rs1_val==6 and imm_val==3, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x6;  immval:0x3
TEST_IMM_OP( addi, x11, x10, 0x9, 0x6, 0x3, x1, 2020, x2)

inst_526:
// rs1_val==6 and imm_val==1365, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x6;  immval:0x555
TEST_IMM_OP( addi, x11, x10, 0x55b, 0x6, 0x555, x1, 2024, x2)

inst_527:
// rs1_val==6 and imm_val==-1366, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x6;  immval:-0x556
TEST_IMM_OP( addi, x11, x10, 0xfffffab0, 0x6, -0x556, x1, 2028, x2)

inst_528:
// rs1_val==6 and imm_val==5, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x6;  immval:0x5
TEST_IMM_OP( addi, x11, x10, 0xb, 0x6, 0x5, x1, 2032, x2)

inst_529:
// rs1_val==6 and imm_val==819, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x6;  immval:0x333
TEST_IMM_OP( addi, x11, x10, 0x339, 0x6, 0x333, x1, 2036, x2)

inst_530:
// rs1_val==6 and imm_val==1638, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x6;  immval:0x666
TEST_IMM_OP( addi, x11, x10, 0x66c, 0x6, 0x666, x1, 2040, x2)

inst_531:
// rs1_val==6 and imm_val==-45, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x6;  immval:-0x2d
TEST_IMM_OP( addi, x11, x10, 0xffffffd9, 0x6, -0x2d, x1, 2044, x2)
RVTEST_SIGBASE( x1,signature_x1_1)

inst_532:
// rs1_val==6 and imm_val==45, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x6;  immval:0x2d
TEST_IMM_OP( addi, x11, x10, 0x33, 0x6, 0x2d, x1, 0, x2)

inst_533:
// rs1_val==6 and imm_val==2, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x6;  immval:0x2
TEST_IMM_OP( addi, x11, x10, 0x8, 0x6, 0x2, x1, 4, x2)

inst_534:
// rs1_val==6 and imm_val==1364, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x6;  immval:0x554
TEST_IMM_OP( addi, x11, x10, 0x55a, 0x6, 0x554, x1, 8, x2)

inst_535:
// rs1_val==6 and imm_val==0, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x6;  immval:0x0
TEST_IMM_OP( addi, x11, x10, 0x6, 0x6, 0x0, x1, 12, x2)

inst_536:
// rs1_val==6 and imm_val==4, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x6;  immval:0x4
TEST_IMM_OP( addi, x11, x10, 0xa, 0x6, 0x4, x1, 16, x2)

inst_537:
// rs1_val==6 and imm_val==818, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x6;  immval:0x332
TEST_IMM_OP( addi, x11, x10, 0x338, 0x6, 0x332, x1, 20, x2)

inst_538:
// rs1_val==6 and imm_val==1637, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x6;  immval:0x665
TEST_IMM_OP( addi, x11, x10, 0x66b, 0x6, 0x665, x1, 24, x2)

inst_539:
// rs1_val==6 and imm_val==44, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x6;  immval:0x2c
TEST_IMM_OP( addi, x11, x10, 0x32, 0x6, 0x2c, x1, 28, x2)

inst_540:
// rs1_val==6 and imm_val==1366, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x6;  immval:0x556
TEST_IMM_OP( addi, x11, x10, 0x55c, 0x6, 0x556, x1, 32, x2)

inst_541:
// rs1_val==6 and imm_val==-1365, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x6;  immval:-0x555
TEST_IMM_OP( addi, x11, x10, 0xfffffab1, 0x6, -0x555, x1, 36, x2)

inst_542:
// rs1_val==6 and imm_val==6, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x6;  immval:0x6
TEST_IMM_OP( addi, x11, x10, 0xc, 0x6, 0x6, x1, 40, x2)

inst_543:
// rs1_val==6 and imm_val==820, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x6;  immval:0x334
TEST_IMM_OP( addi, x11, x10, 0x33a, 0x6, 0x334, x1, 44, x2)

inst_544:
// rs1_val==6 and imm_val==1639, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x6;  immval:0x667
TEST_IMM_OP( addi, x11, x10, 0x66d, 0x6, 0x667, x1, 48, x2)

inst_545:
// rs1_val==6 and imm_val==-44, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x6;  immval:-0x2c
TEST_IMM_OP( addi, x11, x10, 0xffffffda, 0x6, -0x2c, x1, 52, x2)

inst_546:
// rs1_val==6 and imm_val==46, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x6;  immval:0x2e
TEST_IMM_OP( addi, x11, x10, 0x34, 0x6, 0x2e, x1, 56, x2)

inst_547:
// rs1_val==858993460 and imm_val==3, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x33333334;  immval:0x3
TEST_IMM_OP( addi, x11, x10, 0x33333337, 0x33333334, 0x3, x1, 60, x2)

inst_548:
// rs1_val==858993460 and imm_val==1365, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x33333334;  immval:0x555
TEST_IMM_OP( addi, x11, x10, 0x33333889, 0x33333334, 0x555, x1, 64, x2)

inst_549:
// rs1_val==858993460 and imm_val==-1366, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x33333334;  immval:-0x556
TEST_IMM_OP( addi, x11, x10, 0x33332dde, 0x33333334, -0x556, x1, 68, x2)

inst_550:
// rs1_val==858993460 and imm_val==5, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x33333334;  immval:0x5
TEST_IMM_OP( addi, x11, x10, 0x33333339, 0x33333334, 0x5, x1, 72, x2)

inst_551:
// rs1_val==858993460 and imm_val==819, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x33333334;  immval:0x333
TEST_IMM_OP( addi, x11, x10, 0x33333667, 0x33333334, 0x333, x1, 76, x2)

inst_552:
// rs1_val==858993460 and imm_val==1638, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x33333334;  immval:0x666
TEST_IMM_OP( addi, x11, x10, 0x3333399a, 0x33333334, 0x666, x1, 80, x2)

inst_553:
// rs1_val==858993460 and imm_val==-45, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x33333334;  immval:-0x2d
TEST_IMM_OP( addi, x11, x10, 0x33333307, 0x33333334, -0x2d, x1, 84, x2)

inst_554:
// rs1_val==858993460 and imm_val==45, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x33333334;  immval:0x2d
TEST_IMM_OP( addi, x11, x10, 0x33333361, 0x33333334, 0x2d, x1, 88, x2)

inst_555:
// rs1_val==858993460 and imm_val==2, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x33333334;  immval:0x2
TEST_IMM_OP( addi, x11, x10, 0x33333336, 0x33333334, 0x2, x1, 92, x2)

inst_556:
// rs1_val==858993460 and imm_val==1364, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x33333334;  immval:0x554
TEST_IMM_OP( addi, x11, x10, 0x33333888, 0x33333334, 0x554, x1, 96, x2)

inst_557:
// rs1_val==858993460 and imm_val==0, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x33333334;  immval:0x0
TEST_IMM_OP( addi, x11, x10, 0x33333334, 0x33333334, 0x0, x1, 100, x2)

inst_558:
// rs1_val==858993460 and imm_val==4, 
// opcode: addi ; op1:x10; dest:x11; op1val:0x33333334;  immval:0x4
TEST_IMM_OP( addi, x11, x10, 0x33333338, 0x33333334, 0x4, x1, 104, x2)

inst_559:
// rs1_val == 1, imm_val == 32
// opcode: addi ; op1:x10; dest:x11; op1val:0x1;  immval:0x20
TEST_IMM_OP( addi, x11, x10, 0x21, 0x1, 0x20, x1, 108, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x7_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x7_1:
    .fill 20*(XLEN/32),4,0xdeadbeef


signature_x1_0:
    .fill 512*(XLEN/32),4,0xdeadbeef


signature_x1_1:
    .fill 28*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
