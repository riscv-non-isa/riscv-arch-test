 
// -----------
// This file was generated by riscv_ctg (https://gitlab.com/incoresemi/riscv-compliance/riscv_ctg)
// version   : 0.1.0
// timestamp : Fri Nov  6 10:29:11 2020 GMT
// usage     : riscv_ctg \
//                  -- cgf /scratch/git-repo/incoresemi/riscv-compliance/riscv_ctg/sample_cgfs/rv32i.cgf \
//                  -- xlen 32 \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the addi instruction of the RISC-V I extension for the addi covergroup.
// 
#include "compliance_model.h"
#include "compliance_test.h"
RVTEST_ISA("RV32I")

.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*);def TEST_CASE_1=True;",addi)

RVTEST_SIGBASE( x10,signature_x10_1)

inst_0:
// rs1 != rd, rs1==x12, rd==x26, rs1_val == imm_val, imm_val == -129, rs1_val == -129, rs1_val < 0 and imm_val < 0
// opcode: addi ; op1:x12; dest:x26; op1val:-129;  immval:-129
TEST_IMM_OP( addi, x26, x12, 0xfffffefe, -129, -129, x10, 0, x3)

inst_1:
// rs1 == rd, rs1==x9, rd==x9, rs1_val != imm_val, imm_val == -2048, imm_val == (-2**(12-1)), rs1_val > 0 and imm_val < 0
// opcode: addi ; op1:x9; dest:x9; op1val:9;  immval:-2048
TEST_IMM_OP( addi, x9, x9, 0xfffff809, 9, -2048, x10, 4, x3)

inst_2:
// rs1==x5, rd==x1, rs1_val > 0 and imm_val > 0, imm_val == 512
// opcode: addi ; op1:x5; dest:x1; op1val:3;  immval:512
TEST_IMM_OP( addi, x1, x5, 0x203, 3, 512, x10, 8, x3)

inst_3:
// rs1==x0, rd==x25, rs1_val < 0 and imm_val > 0, rs1_val == -2049
// opcode: addi ; op1:x0; dest:x25; op1val:-2049;  immval:6
TEST_IMM_OP( addi, x25, x0, 0xfffff805, -2049, 6, x10, 12, x3)

inst_4:
// rs1==x11, rd==x22, rs1_val == (-2**(xlen-1)), imm_val == -1025, rs1_val == -2147483648
// opcode: addi ; op1:x11; dest:x22; op1val:-2147483648;  immval:-1025
TEST_IMM_OP( addi, x22, x11, 0x7ffffbff, -2147483648, -1025, x10, 16, x3)

inst_5:
// rs1==x21, rd==x2, rs1_val == 0, imm_val == -3
// opcode: addi ; op1:x21; dest:x2; op1val:0;  immval:-3
TEST_IMM_OP( addi, x2, x21, 0xfffffffd, 0, -3, x10, 20, x3)

inst_6:
// rs1==x27, rd==x5, rs1_val == (2**(xlen-1)-1), rs1_val == 2147483647
// opcode: addi ; op1:x27; dest:x5; op1val:2147483647;  immval:3
TEST_IMM_OP( addi, x5, x27, 0x80000002, 2147483647, 3, x10, 24, x3)

inst_7:
// rs1==x18, rd==x29, rs1_val == 1, imm_val == (2**(12-1)-1), imm_val == 2047
// opcode: addi ; op1:x18; dest:x29; op1val:1;  immval:2047
TEST_IMM_OP( addi, x29, x18, 0x800, 1, 2047, x10, 28, x3)

inst_8:
// rs1==x23, rd==x6, imm_val == 0, 
// opcode: addi ; op1:x23; dest:x6; op1val:1073741823;  immval:0
TEST_IMM_OP( addi, x6, x23, 0x3fffffff, 1073741823, 0, x10, 32, x3)

inst_9:
// rs1==x2, rd==x17, imm_val == 1, rs1_val == -513
// opcode: addi ; op1:x2; dest:x17; op1val:-513;  immval:1
TEST_IMM_OP( addi, x17, x2, 0xfffffe00, -513, 1, x10, 36, x3)

inst_10:
// rs1==x26, rd==x30, rs1_val == 2, imm_val == 32
// opcode: addi ; op1:x26; dest:x30; op1val:2;  immval:32
TEST_IMM_OP( addi, x30, x26, 0x22, 2, 32, x10, 40, x3)

inst_11:
// rs1==x29, rd==x19, rs1_val == 4, 
// opcode: addi ; op1:x29; dest:x19; op1val:4;  immval:-8
TEST_IMM_OP( addi, x19, x29, 0xfffffffc, 4, -8, x10, 44, x3)

inst_12:
// rs1==x16, rd==x14, rs1_val == 8, imm_val == -17
// opcode: addi ; op1:x16; dest:x14; op1val:8;  immval:-17
TEST_IMM_OP( addi, x14, x16, 0xfffffff7, 8, -17, x10, 48, x3)

inst_13:
// rs1==x14, rd==x12, rs1_val == 16, imm_val == 4
// opcode: addi ; op1:x14; dest:x12; op1val:16;  immval:4
TEST_IMM_OP( addi, x12, x14, 0x14, 16, 4, x10, 52, x3)

inst_14:
// rs1==x1, rd==x27, rs1_val == 32, imm_val == 128
// opcode: addi ; op1:x1; dest:x27; op1val:32;  immval:128
TEST_IMM_OP( addi, x27, x1, 0xa0, 32, 128, x10, 56, x3)

inst_15:
// rs1==x8, rd==x4, rs1_val == 64, 
// opcode: addi ; op1:x8; dest:x4; op1val:64;  immval:-4
TEST_IMM_OP( addi, x4, x8, 0x3c, 64, -4, x10, 60, x3)

inst_16:
// rs1==x4, rd==x16, rs1_val == 128, imm_val == 1365
// opcode: addi ; op1:x4; dest:x16; op1val:128;  immval:1365
TEST_IMM_OP( addi, x16, x4, 0x5d5, 128, 1365, x10, 64, x3)

inst_17:
// rs1==x20, rd==x31, rs1_val == 256, 
// opcode: addi ; op1:x20; dest:x31; op1val:256;  immval:-6
TEST_IMM_OP( addi, x31, x20, 0xfa, 256, -6, x10, 68, x3)

inst_18:
// rs1==x24, rd==x7, rs1_val == 512, 
// opcode: addi ; op1:x24; dest:x7; op1val:512;  immval:-8
TEST_IMM_OP( addi, x7, x24, 0x1f8, 512, -8, x10, 72, x3)

inst_19:
// rs1==x13, rd==x23, rs1_val == 1024, 
// opcode: addi ; op1:x13; dest:x23; op1val:1024;  immval:-17
TEST_IMM_OP( addi, x23, x13, 0x3ef, 1024, -17, x10, 76, x3)

inst_20:
// rs1==x3, rd==x13, rs1_val == 2048, imm_val == -1366
// opcode: addi ; op1:x3; dest:x13; op1val:2048;  immval:-1366
TEST_IMM_OP( addi, x13, x3, 0x2aa, 2048, -1366, x10, 80, x2)
RVTEST_SIGBASE( x1,signature_x1_0)

inst_21:
// rs1==x22, rd==x15, rs1_val == 4096, imm_val == 16
// opcode: addi ; op1:x22; dest:x15; op1val:4096;  immval:16
TEST_IMM_OP( addi, x15, x22, 0x1010, 4096, 16, x1, 0, x2)

inst_22:
// rs1==x28, rd==x20, rs1_val == 8192, imm_val == -257
// opcode: addi ; op1:x28; dest:x20; op1val:8192;  immval:-257
TEST_IMM_OP( addi, x20, x28, 0x1eff, 8192, -257, x1, 4, x2)

inst_23:
// rs1==x10, rd==x0, rs1_val == 16384, imm_val == 1024
// opcode: addi ; op1:x10; dest:x0; op1val:16384;  immval:1024
TEST_IMM_OP( addi, x0, x10, 0x4400, 16384, 1024, x1, 8, x2)

inst_24:
// rs1==x15, rd==x28, rs1_val == 32768, 
// opcode: addi ; op1:x15; dest:x28; op1val:32768;  immval:-3
TEST_IMM_OP( addi, x28, x15, 0x7ffd, 32768, -3, x1, 12, x2)

inst_25:
// rs1==x17, rd==x18, rs1_val == 65536, 
// opcode: addi ; op1:x17; dest:x18; op1val:65536;  immval:1365
TEST_IMM_OP( addi, x18, x17, 0x10555, 65536, 1365, x1, 16, x2)

inst_26:
// rs1==x19, rd==x10, rs1_val == 131072, 
// opcode: addi ; op1:x19; dest:x10; op1val:131072;  immval:32
TEST_IMM_OP( addi, x10, x19, 0x20020, 131072, 32, x1, 20, x2)

inst_27:
// rs1==x25, rd==x3, rs1_val == 262144, 
// opcode: addi ; op1:x25; dest:x3; op1val:262144;  immval:512
TEST_IMM_OP( addi, x3, x25, 0x40200, 262144, 512, x1, 24, x2)

inst_28:
// rs1==x7, rd==x24, rs1_val == 524288, 
// opcode: addi ; op1:x7; dest:x24; op1val:524288;  immval:6
TEST_IMM_OP( addi, x24, x7, 0x80006, 524288, 6, x1, 28, x2)

inst_29:
// rs1==x31, rd==x11, rs1_val == 1048576, 
// opcode: addi ; op1:x31; dest:x11; op1val:1048576;  immval:-3
TEST_IMM_OP( addi, x11, x31, 0xffffd, 1048576, -3, x1, 32, x2)

inst_30:
// rs1==x6, rd==x8, rs1_val == 2097152, 
// opcode: addi ; op1:x6; dest:x8; op1val:2097152;  immval:-129
TEST_IMM_OP( addi, x8, x6, 0x1fff7f, 2097152, -129, x1, 36, x2)

inst_31:
// rs1==x30, rd==x21, rs1_val == 4194304, 
// opcode: addi ; op1:x30; dest:x21; op1val:4194304;  immval:32
TEST_IMM_OP( addi, x21, x30, 0x400020, 4194304, 32, x1, 40, x2)

inst_32:
// rs1_val == 8388608, imm_val == -65
// opcode: addi ; op1:x10; dest:x11; op1val:8388608;  immval:-65
TEST_IMM_OP( addi, x11, x10, 0x7fffbf, 8388608, -65, x1, 44, x2)

inst_33:
// rs1_val == 16777216, 
// opcode: addi ; op1:x10; dest:x11; op1val:16777216;  immval:0
TEST_IMM_OP( addi, x11, x10, 0x1000000, 16777216, 0, x1, 48, x2)

inst_34:
// rs1_val == 33554432, 
// opcode: addi ; op1:x10; dest:x11; op1val:33554432;  immval:9
TEST_IMM_OP( addi, x11, x10, 0x2000009, 33554432, 9, x1, 52, x2)

inst_35:
// rs1_val == 67108864, imm_val == -513
// opcode: addi ; op1:x10; dest:x11; op1val:67108864;  immval:-513
TEST_IMM_OP( addi, x11, x10, 0x3fffdff, 67108864, -513, x1, 56, x2)

inst_36:
// rs1_val == 134217728, 
// opcode: addi ; op1:x10; dest:x11; op1val:134217728;  immval:-513
TEST_IMM_OP( addi, x11, x10, 0x7fffdff, 134217728, -513, x1, 60, x2)

inst_37:
// rs1_val == 268435456, 
// opcode: addi ; op1:x10; dest:x11; op1val:268435456;  immval:-129
TEST_IMM_OP( addi, x11, x10, 0xfffff7f, 268435456, -129, x1, 64, x2)

inst_38:
// rs1_val == 536870912, imm_val == 2
// opcode: addi ; op1:x10; dest:x11; op1val:536870912;  immval:2
TEST_IMM_OP( addi, x11, x10, 0x20000002, 536870912, 2, x1, 68, x2)

inst_39:
// rs1_val == 1073741824, 
// opcode: addi ; op1:x10; dest:x11; op1val:1073741824;  immval:-1
TEST_IMM_OP( addi, x11, x10, 0x3fffffff, 1073741824, -1, x1, 72, x2)

inst_40:
// rs1_val == -2, 
// opcode: addi ; op1:x10; dest:x11; op1val:-2;  immval:-1
TEST_IMM_OP( addi, x11, x10, 0xfffffffd, -2, -1, x1, 76, x2)

inst_41:
// rs1_val == -3, 
// opcode: addi ; op1:x10; dest:x11; op1val:-3;  immval:0
TEST_IMM_OP( addi, x11, x10, 0xfffffffd, -3, 0, x1, 80, x2)

inst_42:
// rs1_val == -5, 
// opcode: addi ; op1:x10; dest:x11; op1val:-5;  immval:-513
TEST_IMM_OP( addi, x11, x10, 0xfffffdfa, -5, -513, x1, 84, x2)

inst_43:
// rs1_val == -9, 
// opcode: addi ; op1:x10; dest:x11; op1val:-9;  immval:-8
TEST_IMM_OP( addi, x11, x10, 0xffffffef, -9, -8, x1, 88, x2)

inst_44:
// rs1_val == -17, 
// opcode: addi ; op1:x10; dest:x11; op1val:-17;  immval:1023
TEST_IMM_OP( addi, x11, x10, 0x3ee, -17, 1023, x1, 92, x2)

inst_45:
// rs1_val == -33, 
// opcode: addi ; op1:x10; dest:x11; op1val:-33;  immval:7
TEST_IMM_OP( addi, x11, x10, 0xffffffe6, -33, 7, x1, 96, x2)

inst_46:
// rs1_val == -524289, 
// opcode: addi ; op1:x10; dest:x11; op1val:-524289;  immval:-17
TEST_IMM_OP( addi, x11, x10, 0xfff7ffee, -524289, -17, x1, 100, x2)

inst_47:
// rs1_val == -1048577, 
// opcode: addi ; op1:x10; dest:x11; op1val:-1048577;  immval:-1
TEST_IMM_OP( addi, x11, x10, 0xffeffffe, -1048577, -1, x1, 104, x2)

inst_48:
// rs1_val == -2097153, 
// opcode: addi ; op1:x10; dest:x11; op1val:-2097153;  immval:-513
TEST_IMM_OP( addi, x11, x10, 0xffdffdfe, -2097153, -513, x1, 108, x2)

inst_49:
// rs1_val == -4194305, 
// opcode: addi ; op1:x10; dest:x11; op1val:-4194305;  immval:0
TEST_IMM_OP( addi, x11, x10, 0xffbfffff, -4194305, 0, x1, 112, x2)

inst_50:
// rs1_val == -8388609, 
// opcode: addi ; op1:x10; dest:x11; op1val:-8388609;  immval:-65
TEST_IMM_OP( addi, x11, x10, 0xff7fffbe, -8388609, -65, x1, 116, x2)

inst_51:
// rs1_val == -16777217, 
// opcode: addi ; op1:x10; dest:x11; op1val:-16777217;  immval:-1366
TEST_IMM_OP( addi, x11, x10, 0xfefffaa9, -16777217, -1366, x1, 120, x2)

inst_52:
// rs1_val == -33554433, 
// opcode: addi ; op1:x10; dest:x11; op1val:-33554433;  immval:-1366
TEST_IMM_OP( addi, x11, x10, 0xfdfffaa9, -33554433, -1366, x1, 124, x2)

inst_53:
// rs1_val == -67108865, 
// opcode: addi ; op1:x10; dest:x11; op1val:-67108865;  immval:-3
TEST_IMM_OP( addi, x11, x10, 0xfbfffffc, -67108865, -3, x1, 128, x2)

inst_54:
// rs1_val == -134217729, 
// opcode: addi ; op1:x10; dest:x11; op1val:-134217729;  immval:3
TEST_IMM_OP( addi, x11, x10, 0xf8000002, -134217729, 3, x1, 132, x2)

inst_55:
// rs1_val == -268435457, 
// opcode: addi ; op1:x10; dest:x11; op1val:-268435457;  immval:1365
TEST_IMM_OP( addi, x11, x10, 0xf0000554, -268435457, 1365, x1, 136, x2)

inst_56:
// rs1_val == -536870913, 
// opcode: addi ; op1:x10; dest:x11; op1val:-536870913;  immval:-17
TEST_IMM_OP( addi, x11, x10, 0xdfffffee, -536870913, -17, x1, 140, x2)

inst_57:
// rs1_val == -1073741825, 
// opcode: addi ; op1:x10; dest:x11; op1val:-1073741825;  immval:2047
TEST_IMM_OP( addi, x11, x10, 0xc00007fe, -1073741825, 2047, x1, 144, x2)

inst_58:
// rs1_val == 1431655765, imm_val == 64
// opcode: addi ; op1:x10; dest:x11; op1val:1431655765;  immval:64
TEST_IMM_OP( addi, x11, x10, 0x55555595, 1431655765, 64, x1, 148, x2)

inst_59:
// rs1_val == -1431655766, imm_val == 8
// opcode: addi ; op1:x10; dest:x11; op1val:-1431655766;  immval:8
TEST_IMM_OP( addi, x11, x10, 0xaaaaaab2, -1431655766, 8, x1, 152, x2)

inst_60:
// imm_val == 256, 
// opcode: addi ; op1:x10; dest:x11; op1val:2147483647;  immval:256
TEST_IMM_OP( addi, x11, x10, 0x800000ff, 2147483647, 256, x1, 156, x2)

inst_61:
// rs1_val == -8193, imm_val == -5
// opcode: addi ; op1:x10; dest:x11; op1val:-8193;  immval:-5
TEST_IMM_OP( addi, x11, x10, 0xffffdffa, -8193, -5, x1, 160, x2)

inst_62:
// rs1_val == -65, 
// opcode: addi ; op1:x10; dest:x11; op1val:-65;  immval:-257
TEST_IMM_OP( addi, x11, x10, 0xfffffebe, -65, -257, x1, 164, x2)

inst_63:
// rs1_val == -262145, 
// opcode: addi ; op1:x10; dest:x11; op1val:-262145;  immval:-1024
TEST_IMM_OP( addi, x11, x10, 0xfffbfbff, -262145, -1024, x1, 168, x2)

inst_64:
// imm_val == -9, 
// opcode: addi ; op1:x10; dest:x11; op1val:-5;  immval:-9
TEST_IMM_OP( addi, x11, x10, 0xfffffff2, -5, -9, x1, 172, x2)

inst_65:
// rs1_val == -257, 
// opcode: addi ; op1:x10; dest:x11; op1val:-257;  immval:-2048
TEST_IMM_OP( addi, x11, x10, 0xfffff6ff, -257, -2048, x1, 176, x2)

inst_66:
// rs1_val == -1025, 
// opcode: addi ; op1:x10; dest:x11; op1val:-1025;  immval:2047
TEST_IMM_OP( addi, x11, x10, 0x3fe, -1025, 2047, x1, 180, x2)

inst_67:
// rs1_val == -4097, 
// opcode: addi ; op1:x10; dest:x11; op1val:-4097;  immval:256
TEST_IMM_OP( addi, x11, x10, 0xfffff0ff, -4097, 256, x1, 184, x2)

inst_68:
// imm_val == -2, 
// opcode: addi ; op1:x10; dest:x11; op1val:6;  immval:-2
TEST_IMM_OP( addi, x11, x10, 0x4, 6, -2, x1, 188, x2)

inst_69:
// rs1_val == -16385, 
// opcode: addi ; op1:x10; dest:x11; op1val:-16385;  immval:32
TEST_IMM_OP( addi, x11, x10, 0xffffc01f, -16385, 32, x1, 192, x2)

inst_70:
// rs1_val == -32769, 
// opcode: addi ; op1:x10; dest:x11; op1val:-32769;  immval:-8
TEST_IMM_OP( addi, x11, x10, 0xffff7ff7, -32769, -8, x1, 196, x2)

inst_71:
// rs1_val == -65537, 
// opcode: addi ; op1:x10; dest:x11; op1val:-65537;  immval:6
TEST_IMM_OP( addi, x11, x10, 0xffff0005, -65537, 6, x1, 200, x2)

inst_72:
// rs1_val == -131073, 
// opcode: addi ; op1:x10; dest:x11; op1val:-131073;  immval:-1024
TEST_IMM_OP( addi, x11, x10, 0xfffdfbff, -131073, -1024, x1, 204, x2)

inst_73:
// imm_val == -33, 
// opcode: addi ; op1:x10; dest:x11; op1val:128;  immval:-33
TEST_IMM_OP( addi, x11, x10, 0x5f, 128, -33, x1, 208, x2)

inst_74:
// rs1_val < 0 and imm_val > 0, rs1_val == -2049
// opcode: addi ; op1:x10; dest:x11; op1val:-2049;  immval:6
TEST_IMM_OP( addi, x11, x10, 0xfffff805, -2049, 6, x1, 212, x2)

inst_75:
// rs1_val == 16384, imm_val == 1024
// opcode: addi ; op1:x10; dest:x11; op1val:16384;  immval:1024
TEST_IMM_OP( addi, x11, x10, 0x4400, 16384, 1024, x1, 216, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x10_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x10_1:
    .fill 21*(XLEN/32),4,0xdeadbeef


signature_x1_0:
    .fill 55*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
