
// -----------
// This file was generated by riscv_ctg (https://gitlab.com/incoresemi/riscv-compliance/riscv_ctg)
// version   : 0.2.0
// timestamp : Wed Nov 18 05:39:15 2020 GMT
// usage     : riscv_ctg \
//                  -- cgf ('/scratch/git-repo/incoresemi/riscv-compliance/riscv_ctg/sample_cgfs/dataset.cgf', '/scratch/git-repo/incoresemi/riscv-compliance/riscv_ctg/sample_cgfs/rv32i.cgf') \
//                  -- xlen 32 \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the sh instruction of the RISC-V I extension for the sh-align covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32I")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*);def TEST_CASE_1=True;",sh-align)

RVTEST_SIGBASE( x2,signature_x2_1)

inst_0:
// rs1 != rs2, rs1==x20, rs2==x22, rs2_val == (-2**(xlen-1)), rs2_val == -2147483648, imm_val > 0, ea_align == 0 and (imm_val % 4) == 1
// opcode: sh; op1:x20; op2:x22; op2val:-2147483648; immval:5; align:0
TEST_STORE(x2,x9,0,x20,x22,-2147483648,5,0,sh,0)

inst_1:
// rs1==x13, rs2==x30, rs2_val == 0, imm_val < 0, ea_align == 0 and (imm_val % 4) == 3
// opcode: sh; op1:x13; op2:x30; op2val:0; immval:-1; align:0
TEST_STORE(x2,x9,0,x13,x30,0,-1,4,sh,0)

inst_2:
// rs1==x10, rs2==x26, rs2_val == (2**(xlen-1)-1), ea_align == 0 and (imm_val % 4) == 0, rs2_val == 2147483647
// opcode: sh; op1:x10; op2:x26; op2val:2147483647; immval:-8; align:0
TEST_STORE(x2,x9,0,x10,x26,2147483647,-8,8,sh,0)

inst_3:
// rs1==x22, rs2==x25, rs2_val == 1, 
// opcode: sh; op1:x22; op2:x25; op2val:1; immval:1; align:0
TEST_STORE(x2,x9,0,x22,x25,1,1,12,sh,0)

inst_4:
// rs1==x11, rs2==x0, ea_align == 0 and (imm_val % 4) == 2, rs2_val == 536870912
// opcode: sh; op1:x11; op2:x0; op2val:536870912; immval:-1366; align:0
TEST_STORE(x2,x9,0,x11,x0,536870912,-1366,16,sh,0)

inst_5:
// rs1==x25, rs2==x5, ea_align == 2 and (imm_val % 4) == 0, rs2_val == -17
// opcode: sh; op1:x25; op2:x5; op2val:-17; immval:1024; align:2
TEST_STORE(x2,x9,0,x25,x5,-17,1024,20,sh,2)

inst_6:
// rs1==x14, rs2==x15, ea_align == 2 and (imm_val % 4) == 1, rs2_val == -16385
// opcode: sh; op1:x14; op2:x15; op2val:-16385; immval:1; align:2
TEST_STORE(x2,x9,0,x14,x15,-16385,1,24,sh,2)

inst_7:
// rs1==x8, rs2==x18, ea_align == 2 and (imm_val % 4) == 2, rs2_val == 8
// opcode: sh; op1:x8; op2:x18; op2val:8; immval:-10; align:2
TEST_STORE(x2,x9,0,x8,x18,8,-10,28,sh,2)

inst_8:
// rs1==x4, rs2==x6, ea_align == 2 and (imm_val % 4) == 3, rs2_val == -8388609
// opcode: sh; op1:x4; op2:x6; op2val:-8388609; immval:-9; align:2
TEST_STORE(x2,x9,0,x4,x6,-8388609,-9,32,sh,2)

inst_9:
// rs1==x19, rs2==x28, imm_val == 0, rs2_val == -32769
// opcode: sh; op1:x19; op2:x28; op2val:-32769; immval:0; align:0
TEST_STORE(x2,x9,0,x19,x28,-32769,0,36,sh,0)

inst_10:
// rs1==x18, rs2==x24, rs2_val == 2, 
// opcode: sh; op1:x18; op2:x24; op2val:2; immval:-3; align:0
TEST_STORE(x2,x9,0,x18,x24,2,-3,40,sh,0)

inst_11:
// rs1==x16, rs2==x11, rs2_val == 4, 
// opcode: sh; op1:x16; op2:x11; op2val:4; immval:-513; align:0
TEST_STORE(x2,x9,0,x16,x11,4,-513,44,sh,0)

inst_12:
// rs1==x24, rs2==x31, rs2_val == 16, 
// opcode: sh; op1:x24; op2:x31; op2val:16; immval:7; align:0
TEST_STORE(x2,x9,0,x24,x31,16,7,48,sh,0)

inst_13:
// rs1==x31, rs2==x12, rs2_val == 32, 
// opcode: sh; op1:x31; op2:x12; op2val:32; immval:1024; align:0
TEST_STORE(x2,x9,0,x31,x12,32,1024,52,sh,0)

inst_14:
// rs1==x28, rs2==x17, rs2_val == 64, 
// opcode: sh; op1:x28; op2:x17; op2val:64; immval:-10; align:0
TEST_STORE(x2,x9,0,x28,x17,64,-10,56,sh,0)

inst_15:
// rs1==x1, rs2==x10, rs2_val == 128, 
// opcode: sh; op1:x1; op2:x10; op2val:128; immval:32; align:0
TEST_STORE(x2,x9,0,x1,x10,128,32,60,sh,0)

inst_16:
// rs1==x6, rs2==x7, rs2_val == 256, 
// opcode: sh; op1:x6; op2:x7; op2val:256; immval:1024; align:0
TEST_STORE(x2,x9,0,x6,x7,256,1024,64,sh,0)

inst_17:
// rs1==x3, rs2==x8, rs2_val == 512, 
// opcode: sh; op1:x3; op2:x8; op2val:512; immval:256; align:0
TEST_STORE(x2,x9,0,x3,x8,512,256,68,sh,0)

inst_18:
// rs1==x17, rs2==x21, rs2_val == 1024, 
// opcode: sh; op1:x17; op2:x21; op2val:1024; immval:-2; align:0
TEST_STORE(x2,x9,0,x17,x21,1024,-2,72,sh,0)

inst_19:
// rs1==x26, rs2==x20, rs2_val == 2048, 
// opcode: sh; op1:x26; op2:x20; op2val:2048; immval:-65; align:0
TEST_STORE(x2,x9,0,x26,x20,2048,-65,76,sh,0)

inst_20:
// rs1==x5, rs2==x1, rs2_val == 4096, 
// opcode: sh; op1:x5; op2:x1; op2val:4096; immval:-8; align:0
TEST_STORE(x2,x9,0,x5,x1,4096,-8,80,sh,0)

inst_21:
// rs1==x7, rs2==x13, rs2_val == 8192, 
// opcode: sh; op1:x7; op2:x13; op2val:8192; immval:16; align:0
TEST_STORE(x2,x9,0,x7,x13,8192,16,84,sh,0)

inst_22:
// rs1==x27, rs2==x14, rs2_val == 16384, 
// opcode: sh; op1:x27; op2:x14; op2val:16384; immval:-257; align:0
TEST_STORE(x2,x9,0,x27,x14,16384,-257,88,sh,0)

inst_23:
// rs1==x9, rs2==x4, rs2_val == 32768, 
// opcode: sh; op1:x9; op2:x4; op2val:32768; immval:-1366; align:0
TEST_STORE(x2,x5,0,x9,x4,32768,-1366,92,sh,0)
RVTEST_SIGBASE( x1,signature_x1_0)

inst_24:
// rs1==x23, rs2==x27, rs2_val == 65536, 
// opcode: sh; op1:x23; op2:x27; op2val:65536; immval:-10; align:0
TEST_STORE(x1,x5,0,x23,x27,65536,-10,0,sh,0)

inst_25:
// rs1==x15, rs2==x3, rs2_val == 131072, 
// opcode: sh; op1:x15; op2:x3; op2val:131072; immval:64; align:0
TEST_STORE(x1,x5,0,x15,x3,131072,64,4,sh,0)

inst_26:
// rs1==x29, rs2==x9, rs2_val == 262144, 
// opcode: sh; op1:x29; op2:x9; op2val:262144; immval:3; align:0
TEST_STORE(x1,x5,0,x29,x9,262144,3,8,sh,0)

inst_27:
// rs1==x30, rs2==x2, rs2_val == 524288, 
// opcode: sh; op1:x30; op2:x2; op2val:524288; immval:2; align:0
TEST_STORE(x1,x5,0,x30,x2,524288,2,12,sh,0)

inst_28:
// rs1==x2, rs2==x29, rs2_val == 1048576, 
// opcode: sh; op1:x2; op2:x29; op2val:1048576; immval:1023; align:0
TEST_STORE(x1,x5,0,x2,x29,1048576,1023,16,sh,0)

inst_29:
// rs1==x21, rs2==x19, rs2_val == 2097152, 
// opcode: sh; op1:x21; op2:x19; op2val:2097152; immval:7; align:0
TEST_STORE(x1,x5,0,x21,x19,2097152,7,20,sh,0)

inst_30:
// rs1==x12, rs2==x23, rs2_val == 4194304, 
// opcode: sh; op1:x12; op2:x23; op2val:4194304; immval:1365; align:0
TEST_STORE(x1,x5,0,x12,x23,4194304,1365,24,sh,0)

inst_31:
// rs2==x16, rs2_val == 8388608, 
// opcode: sh; op1:x7; op2:x16; op2val:8388608; immval:32; align:0
TEST_STORE(x1,x5,0,x7,x16,8388608,32,28,sh,0)

inst_32:
// rs2_val == 16777216, 
// opcode: sh; op1:x10; op2:x11; op2val:16777216; immval:-17; align:0
TEST_STORE(x1,x5,0,x10,x11,16777216,-17,32,sh,0)

inst_33:
// rs2_val == 33554432, 
// opcode: sh; op1:x10; op2:x11; op2val:33554432; immval:-6; align:0
TEST_STORE(x1,x5,0,x10,x11,33554432,-6,36,sh,0)

inst_34:
// rs2_val == 67108864, 
// opcode: sh; op1:x10; op2:x11; op2val:67108864; immval:6; align:0
TEST_STORE(x1,x5,0,x10,x11,67108864,6,40,sh,0)

inst_35:
// rs2_val == 134217728, 
// opcode: sh; op1:x10; op2:x11; op2val:134217728; immval:5; align:0
TEST_STORE(x1,x5,0,x10,x11,134217728,5,44,sh,0)

inst_36:
// rs2_val == -262145, 
// opcode: sh; op1:x10; op2:x11; op2val:-262145; immval:-1025; align:0
TEST_STORE(x1,x5,0,x10,x11,-262145,-1025,48,sh,0)

inst_37:
// rs2_val == -524289, 
// opcode: sh; op1:x10; op2:x11; op2val:-524289; immval:1; align:0
TEST_STORE(x1,x5,0,x10,x11,-524289,1,52,sh,0)

inst_38:
// rs2_val == -1048577, 
// opcode: sh; op1:x10; op2:x11; op2val:-1048577; immval:5; align:0
TEST_STORE(x1,x5,0,x10,x11,-1048577,5,56,sh,0)

inst_39:
// rs2_val == -2097153, 
// opcode: sh; op1:x10; op2:x11; op2val:-2097153; immval:16; align:0
TEST_STORE(x1,x5,0,x10,x11,-2097153,16,60,sh,0)

inst_40:
// rs2_val == -4194305, 
// opcode: sh; op1:x10; op2:x11; op2val:-4194305; immval:0; align:0
TEST_STORE(x1,x5,0,x10,x11,-4194305,0,64,sh,0)

inst_41:
// rs2_val == -16777217, 
// opcode: sh; op1:x10; op2:x11; op2val:-16777217; immval:-1; align:0
TEST_STORE(x1,x5,0,x10,x11,-16777217,-1,68,sh,0)

inst_42:
// rs2_val == -33554433, 
// opcode: sh; op1:x10; op2:x11; op2val:-33554433; immval:64; align:0
TEST_STORE(x1,x5,0,x10,x11,-33554433,64,72,sh,0)

inst_43:
// rs2_val == -67108865, 
// opcode: sh; op1:x10; op2:x11; op2val:-67108865; immval:256; align:0
TEST_STORE(x1,x5,0,x10,x11,-67108865,256,76,sh,0)

inst_44:
// rs2_val == -134217729, 
// opcode: sh; op1:x10; op2:x11; op2val:-134217729; immval:-2; align:0
TEST_STORE(x1,x5,0,x10,x11,-134217729,-2,80,sh,0)

inst_45:
// rs2_val == -268435457, 
// opcode: sh; op1:x10; op2:x11; op2val:-268435457; immval:-33; align:0
TEST_STORE(x1,x5,0,x10,x11,-268435457,-33,84,sh,0)

inst_46:
// rs2_val == -536870913, 
// opcode: sh; op1:x10; op2:x11; op2val:-536870913; immval:-3; align:0
TEST_STORE(x1,x5,0,x10,x11,-536870913,-3,88,sh,0)

inst_47:
// rs2_val == -1073741825, 
// opcode: sh; op1:x10; op2:x11; op2val:-1073741825; immval:6; align:0
TEST_STORE(x1,x5,0,x10,x11,-1073741825,6,92,sh,0)

inst_48:
// rs2_val == 1431655765, 
// opcode: sh; op1:x10; op2:x11; op2val:1431655765; immval:-17; align:0
TEST_STORE(x1,x5,0,x10,x11,1431655765,-17,96,sh,0)

inst_49:
// rs2_val == -1431655766, 
// opcode: sh; op1:x10; op2:x11; op2val:-1431655766; immval:6; align:0
TEST_STORE(x1,x5,0,x10,x11,-1431655766,6,100,sh,0)

inst_50:
// rs2_val == 268435456, 
// opcode: sh; op1:x10; op2:x11; op2val:268435456; immval:-1025; align:0
TEST_STORE(x1,x5,0,x10,x11,268435456,-1025,104,sh,0)

inst_51:
// rs2_val == 1073741824, 
// opcode: sh; op1:x10; op2:x11; op2val:1073741824; immval:9; align:0
TEST_STORE(x1,x5,0,x10,x11,1073741824,9,108,sh,0)

inst_52:
// rs2_val == -2, 
// opcode: sh; op1:x10; op2:x11; op2val:-2; immval:64; align:0
TEST_STORE(x1,x5,0,x10,x11,-2,64,112,sh,0)

inst_53:
// rs2_val == -3, 
// opcode: sh; op1:x10; op2:x11; op2val:-3; immval:1; align:0
TEST_STORE(x1,x5,0,x10,x11,-3,1,116,sh,0)

inst_54:
// rs2_val == -5, 
// opcode: sh; op1:x10; op2:x11; op2val:-5; immval:-4; align:0
TEST_STORE(x1,x5,0,x10,x11,-5,-4,120,sh,0)

inst_55:
// rs2_val == -9, 
// opcode: sh; op1:x10; op2:x11; op2val:-9; immval:1024; align:0
TEST_STORE(x1,x5,0,x10,x11,-9,1024,124,sh,0)

inst_56:
// rs2_val == -33, 
// opcode: sh; op1:x10; op2:x11; op2val:-33; immval:64; align:0
TEST_STORE(x1,x5,0,x10,x11,-33,64,128,sh,0)

inst_57:
// rs2_val == -65, 
// opcode: sh; op1:x10; op2:x11; op2val:-65; immval:8; align:0
TEST_STORE(x1,x5,0,x10,x11,-65,8,132,sh,0)

inst_58:
// rs2_val == -129, 
// opcode: sh; op1:x10; op2:x11; op2val:-129; immval:-4; align:0
TEST_STORE(x1,x5,0,x10,x11,-129,-4,136,sh,0)

inst_59:
// rs2_val == -257, 
// opcode: sh; op1:x10; op2:x11; op2val:-257; immval:6; align:0
TEST_STORE(x1,x5,0,x10,x11,-257,6,140,sh,0)

inst_60:
// rs2_val == -513, 
// opcode: sh; op1:x10; op2:x11; op2val:-513; immval:128; align:0
TEST_STORE(x1,x5,0,x10,x11,-513,128,144,sh,0)

inst_61:
// rs2_val == -1025, 
// opcode: sh; op1:x10; op2:x11; op2val:-1025; immval:-129; align:0
TEST_STORE(x1,x5,0,x10,x11,-1025,-129,148,sh,0)

inst_62:
// rs2_val == -2049, 
// opcode: sh; op1:x10; op2:x11; op2val:-2049; immval:-1024; align:0
TEST_STORE(x1,x5,0,x10,x11,-2049,-1024,152,sh,0)

inst_63:
// rs2_val == -4097, 
// opcode: sh; op1:x10; op2:x11; op2val:-4097; immval:-3; align:0
TEST_STORE(x1,x5,0,x10,x11,-4097,-3,156,sh,0)

inst_64:
// rs2_val == -8193, 
// opcode: sh; op1:x10; op2:x11; op2val:-8193; immval:0; align:0
TEST_STORE(x1,x5,0,x10,x11,-8193,0,160,sh,0)

inst_65:
// rs2_val == -65537, 
// opcode: sh; op1:x10; op2:x11; op2val:-65537; immval:8; align:0
TEST_STORE(x1,x5,0,x10,x11,-65537,8,164,sh,0)

inst_66:
// rs2_val == -131073, 
// opcode: sh; op1:x10; op2:x11; op2val:-131073; immval:2; align:0
TEST_STORE(x1,x5,0,x10,x11,-131073,2,168,sh,0)

inst_67:
// ea_align == 0 and (imm_val % 4) == 2, rs2_val == 536870912
// opcode: sh; op1:x10; op2:x11; op2val:536870912; immval:-1366; align:0
TEST_STORE(x1,x5,0,x10,x11,536870912,-1366,172,sh,0)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x2_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x2_1:
    .fill 24*(XLEN/32),4,0xdeadbeef


signature_x1_0:
    .fill 44*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
