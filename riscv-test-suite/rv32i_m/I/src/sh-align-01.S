 
// -----------
// This file was generated by riscv_ctg (https://gitlab.com/incoresemi/riscv-compliance/riscv_ctg)
// version   : 0.1.0
// timestamp : Fri Nov  6 10:29:11 2020 GMT
// usage     : riscv_ctg \
//                  -- cgf /scratch/git-repo/incoresemi/riscv-compliance/riscv_ctg/sample_cgfs/rv32i.cgf \
//                  -- xlen 32 \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the sh instruction of the RISC-V I extension for the sh-align covergroup.
// 
#include "compliance_model.h"
#include "compliance_test.h"
RVTEST_ISA("RV32I")

RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*);def TEST_CASE_1=True;",sh-align)

RVTEST_SIGBASE( x15,signature_x15_1)

inst_0:
// rs1 != rs2, rs1==x20, rs2==x9, ea_align == 0 and (imm_val % 4) == 0, imm_val > 0, rs2_val == 1073741824
// opcode: sh; op1:x20; op2:x9; op2val:1073741824; immval:1024; align:0
TEST_STORE(x15,x13,0,x20,x9,1073741824,1024,0,sh,0)

inst_1:
// rs1==x21, rs2==x4, ea_align == 0 and (imm_val % 4) == 1, rs2_val == -16385
// opcode: sh; op1:x21; op2:x4; op2val:-16385; immval:1365; align:0
TEST_STORE(x15,x13,0,x21,x4,-16385,1365,4,sh,0)

inst_2:
// rs1==x12, rs2==x22, ea_align == 0 and (imm_val % 4) == 2, imm_val < 0, rs2_val == 65536
// opcode: sh; op1:x12; op2:x22; op2val:65536; immval:-6; align:0
TEST_STORE(x15,x13,0,x12,x22,65536,-6,8,sh,0)

inst_3:
// rs1==x18, rs2==x16, ea_align == 0 and (imm_val % 4) == 3, rs2_val == -131073
// opcode: sh; op1:x18; op2:x16; op2val:-131073; immval:3; align:0
TEST_STORE(x15,x13,0,x18,x16,-131073,3,12,sh,0)

inst_4:
// rs1==x2, rs2==x30, ea_align == 2 and (imm_val % 4) == 0, rs2_val == 2097152
// opcode: sh; op1:x2; op2:x30; op2val:2097152; immval:128; align:2
TEST_STORE(x15,x13,0,x2,x30,2097152,128,16,sh,2)

inst_5:
// rs1==x24, rs2==x3, ea_align == 2 and (imm_val % 4) == 1, rs2_val == 8388608
// opcode: sh; op1:x24; op2:x3; op2val:8388608; immval:-3; align:2
TEST_STORE(x15,x13,0,x24,x3,8388608,-3,20,sh,2)

inst_6:
// rs1==x31, rs2==x12, ea_align == 2 and (imm_val % 4) == 2, 
// opcode: sh; op1:x31; op2:x12; op2val:8388608; immval:-6; align:2
TEST_STORE(x15,x13,0,x31,x12,8388608,-6,24,sh,2)

inst_7:
// rs1==x8, rs2==x25, ea_align == 2 and (imm_val % 4) == 3, rs2_val == 134217728
// opcode: sh; op1:x8; op2:x25; op2val:134217728; immval:-513; align:2
TEST_STORE(x15,x13,0,x8,x25,134217728,-513,28,sh,2)

inst_8:
// rs1==x4, rs2==x14, imm_val == 0, rs2_val == 268435456
// opcode: sh; op1:x4; op2:x14; op2val:268435456; immval:0; align:0
TEST_STORE(x15,x13,0,x4,x14,268435456,0,32,sh,0)

inst_9:
// rs1==x23, rs2==x6, rs2_val == (-2**(xlen-1)), rs2_val == -2147483648
// opcode: sh; op1:x23; op2:x6; op2val:-2147483648; immval:-33; align:0
TEST_STORE(x15,x13,0,x23,x6,-2147483648,-33,36,sh,0)

inst_10:
// rs1==x11, rs2==x1, rs2_val == 0, 
// opcode: sh; op1:x11; op2:x1; op2val:0; immval:-3; align:0
TEST_STORE(x15,x13,0,x11,x1,0,-3,40,sh,0)

inst_11:
// rs1==x30, rs2==x5, rs2_val == (2**(xlen-1)-1), rs2_val == 2147483647
// opcode: sh; op1:x30; op2:x5; op2val:2147483647; immval:64; align:0
TEST_STORE(x15,x13,0,x30,x5,2147483647,64,44,sh,0)

inst_12:
// rs1==x17, rs2==x0, rs2_val == 1, 
// opcode: sh; op1:x17; op2:x0; op2val:1; immval:1023; align:0
TEST_STORE(x15,x13,0,x17,x0,1,1023,48,sh,0)

inst_13:
// rs1==x3, rs2==x20, rs2_val == 2, 
// opcode: sh; op1:x3; op2:x20; op2val:2; immval:-33; align:0
TEST_STORE(x15,x13,0,x3,x20,2,-33,52,sh,0)

inst_14:
// rs1==x19, rs2==x10, rs2_val == 4, 
// opcode: sh; op1:x19; op2:x10; op2val:4; immval:-1024; align:0
TEST_STORE(x15,x13,0,x19,x10,4,-1024,56,sh,0)

inst_15:
// rs1==x28, rs2==x26, rs2_val == 8, 
// opcode: sh; op1:x28; op2:x26; op2val:8; immval:2; align:0
TEST_STORE(x15,x13,0,x28,x26,8,2,60,sh,0)

inst_16:
// rs1==x7, rs2==x11, rs2_val == 16, 
// opcode: sh; op1:x7; op2:x11; op2val:16; immval:-4; align:0
TEST_STORE(x15,x13,0,x7,x11,16,-4,64,sh,0)

inst_17:
// rs1==x13, rs2==x23, rs2_val == 32, 
// opcode: sh; op1:x13; op2:x23; op2val:32; immval:1365; align:0
TEST_STORE(x15,x4,0,x13,x23,32,1365,68,sh,0)
RVTEST_SIGBASE( x3,signature_x3_0)

inst_18:
// rs1==x1, rs2==x28, rs2_val == 64, 
// opcode: sh; op1:x1; op2:x28; op2val:64; immval:-257; align:0
TEST_STORE(x3,x4,0,x1,x28,64,-257,0,sh,0)

inst_19:
// rs1==x5, rs2==x31, rs2_val == 128, 
// opcode: sh; op1:x5; op2:x31; op2val:128; immval:-1024; align:0
TEST_STORE(x3,x4,0,x5,x31,128,-1024,4,sh,0)

inst_20:
// rs1==x10, rs2==x18, rs2_val == 256, 
// opcode: sh; op1:x10; op2:x18; op2val:256; immval:9; align:0
TEST_STORE(x3,x4,0,x10,x18,256,9,8,sh,0)

inst_21:
// rs1==x26, rs2==x15, rs2_val == 512, 
// opcode: sh; op1:x26; op2:x15; op2val:512; immval:-10; align:0
TEST_STORE(x3,x4,0,x26,x15,512,-10,12,sh,0)

inst_22:
// rs1==x27, rs2==x7, rs2_val == 1024, 
// opcode: sh; op1:x27; op2:x7; op2val:1024; immval:-7; align:0
TEST_STORE(x3,x4,0,x27,x7,1024,-7,16,sh,0)

inst_23:
// rs1==x14, rs2==x24, rs2_val == 2048, 
// opcode: sh; op1:x14; op2:x24; op2val:2048; immval:3; align:0
TEST_STORE(x3,x4,0,x14,x24,2048,3,20,sh,0)

inst_24:
// rs1==x15, rs2==x8, rs2_val == 4096, 
// opcode: sh; op1:x15; op2:x8; op2val:4096; immval:6; align:0
TEST_STORE(x3,x4,0,x15,x8,4096,6,24,sh,0)

inst_25:
// rs1==x25, rs2==x21, rs2_val == 8192, 
// opcode: sh; op1:x25; op2:x21; op2val:8192; immval:9; align:0
TEST_STORE(x3,x4,0,x25,x21,8192,9,28,sh,0)

inst_26:
// rs1==x29, rs2==x27, rs2_val == 16384, 
// opcode: sh; op1:x29; op2:x27; op2val:16384; immval:5; align:0
TEST_STORE(x3,x4,0,x29,x27,16384,5,32,sh,0)

inst_27:
// rs1==x16, rs2==x13, rs2_val == 32768, 
// opcode: sh; op1:x16; op2:x13; op2val:32768; immval:-65; align:0
TEST_STORE(x3,x4,0,x16,x13,32768,-65,36,sh,0)

inst_28:
// rs1==x9, rs2==x19, rs2_val == 131072, 
// opcode: sh; op1:x9; op2:x19; op2val:131072; immval:32; align:0
TEST_STORE(x3,x4,0,x9,x19,131072,32,40,sh,0)

inst_29:
// rs1==x22, rs2==x29, rs2_val == 262144, 
// opcode: sh; op1:x22; op2:x29; op2val:262144; immval:-1; align:0
TEST_STORE(x3,x4,0,x22,x29,262144,-1,44,sh,0)

inst_30:
// rs1==x6, rs2==x17, rs2_val == 524288, 
// opcode: sh; op1:x6; op2:x17; op2val:524288; immval:-2048; align:0
TEST_STORE(x3,x4,0,x6,x17,524288,-2048,48,sh,0)

inst_31:
// rs2==x2, rs2_val == 1048576, 
// opcode: sh; op1:x1; op2:x2; op2val:1048576; immval:5; align:0
TEST_STORE(x3,x4,0,x1,x2,1048576,5,52,sh,0)

inst_32:
// rs2_val == 4194304, 
// opcode: sh; op1:x10; op2:x11; op2val:4194304; immval:3; align:0
TEST_STORE(x3,x4,0,x10,x11,4194304,3,56,sh,0)

inst_33:
// rs2_val == 16777216, 
// opcode: sh; op1:x10; op2:x11; op2val:16777216; immval:-1025; align:0
TEST_STORE(x3,x4,0,x10,x11,16777216,-1025,60,sh,0)

inst_34:
// rs2_val == 33554432, 
// opcode: sh; op1:x10; op2:x11; op2val:33554432; immval:0; align:0
TEST_STORE(x3,x4,0,x10,x11,33554432,0,64,sh,0)

inst_35:
// rs2_val == 67108864, 
// opcode: sh; op1:x10; op2:x11; op2val:67108864; immval:-6; align:0
TEST_STORE(x3,x4,0,x10,x11,67108864,-6,68,sh,0)

inst_36:
// rs2_val == 536870912, 
// opcode: sh; op1:x10; op2:x11; op2val:536870912; immval:-1366; align:0
TEST_STORE(x3,x4,0,x10,x11,536870912,-1366,72,sh,0)

inst_37:
// rs2_val == -262145, 
// opcode: sh; op1:x10; op2:x11; op2val:-262145; immval:-7; align:0
TEST_STORE(x3,x4,0,x10,x11,-262145,-7,76,sh,0)

inst_38:
// rs2_val == -524289, 
// opcode: sh; op1:x10; op2:x11; op2val:-524289; immval:-1; align:0
TEST_STORE(x3,x4,0,x10,x11,-524289,-1,80,sh,0)

inst_39:
// rs2_val == -1048577, 
// opcode: sh; op1:x10; op2:x11; op2val:-1048577; immval:8; align:0
TEST_STORE(x3,x4,0,x10,x11,-1048577,8,84,sh,0)

inst_40:
// rs2_val == -2097153, 
// opcode: sh; op1:x10; op2:x11; op2val:-2097153; immval:8; align:0
TEST_STORE(x3,x4,0,x10,x11,-2097153,8,88,sh,0)

inst_41:
// rs2_val == -4194305, 
// opcode: sh; op1:x10; op2:x11; op2val:-4194305; immval:32; align:0
TEST_STORE(x3,x4,0,x10,x11,-4194305,32,92,sh,0)

inst_42:
// rs2_val == -8388609, 
// opcode: sh; op1:x10; op2:x11; op2val:-8388609; immval:-6; align:0
TEST_STORE(x3,x4,0,x10,x11,-8388609,-6,96,sh,0)

inst_43:
// rs2_val == -16777217, 
// opcode: sh; op1:x10; op2:x11; op2val:-16777217; immval:8; align:0
TEST_STORE(x3,x4,0,x10,x11,-16777217,8,100,sh,0)

inst_44:
// rs2_val == -33554433, 
// opcode: sh; op1:x10; op2:x11; op2val:-33554433; immval:-1025; align:0
TEST_STORE(x3,x4,0,x10,x11,-33554433,-1025,104,sh,0)

inst_45:
// rs2_val == -67108865, 
// opcode: sh; op1:x10; op2:x11; op2val:-67108865; immval:1365; align:0
TEST_STORE(x3,x4,0,x10,x11,-67108865,1365,108,sh,0)

inst_46:
// rs2_val == -134217729, 
// opcode: sh; op1:x10; op2:x11; op2val:-134217729; immval:-257; align:0
TEST_STORE(x3,x4,0,x10,x11,-134217729,-257,112,sh,0)

inst_47:
// rs2_val == -268435457, 
// opcode: sh; op1:x10; op2:x11; op2val:-268435457; immval:0; align:0
TEST_STORE(x3,x4,0,x10,x11,-268435457,0,116,sh,0)

inst_48:
// rs2_val == -536870913, 
// opcode: sh; op1:x10; op2:x11; op2val:-536870913; immval:128; align:0
TEST_STORE(x3,x4,0,x10,x11,-536870913,128,120,sh,0)

inst_49:
// rs2_val == -1073741825, 
// opcode: sh; op1:x10; op2:x11; op2val:-1073741825; immval:3; align:0
TEST_STORE(x3,x4,0,x10,x11,-1073741825,3,124,sh,0)

inst_50:
// rs2_val == 1431655765, 
// opcode: sh; op1:x10; op2:x11; op2val:1431655765; immval:6; align:0
TEST_STORE(x3,x4,0,x10,x11,1431655765,6,128,sh,0)

inst_51:
// rs2_val == -1431655766, 
// opcode: sh; op1:x10; op2:x11; op2val:-1431655766; immval:2047; align:0
TEST_STORE(x3,x4,0,x10,x11,-1431655766,2047,132,sh,0)

inst_52:
// rs2_val == -2, 
// opcode: sh; op1:x10; op2:x11; op2val:-2; immval:3; align:0
TEST_STORE(x3,x4,0,x10,x11,-2,3,136,sh,0)

inst_53:
// rs2_val == -3, 
// opcode: sh; op1:x10; op2:x11; op2val:-3; immval:-33; align:0
TEST_STORE(x3,x4,0,x10,x11,-3,-33,140,sh,0)

inst_54:
// rs2_val == -5, 
// opcode: sh; op1:x10; op2:x11; op2val:-5; immval:1024; align:0
TEST_STORE(x3,x4,0,x10,x11,-5,1024,144,sh,0)

inst_55:
// rs2_val == -9, 
// opcode: sh; op1:x10; op2:x11; op2val:-9; immval:9; align:0
TEST_STORE(x3,x4,0,x10,x11,-9,9,148,sh,0)

inst_56:
// rs2_val == -17, 
// opcode: sh; op1:x10; op2:x11; op2val:-17; immval:128; align:0
TEST_STORE(x3,x4,0,x10,x11,-17,128,152,sh,0)

inst_57:
// rs2_val == -33, 
// opcode: sh; op1:x10; op2:x11; op2val:-33; immval:4; align:0
TEST_STORE(x3,x4,0,x10,x11,-33,4,156,sh,0)

inst_58:
// rs2_val == -65, 
// opcode: sh; op1:x10; op2:x11; op2val:-65; immval:-1366; align:0
TEST_STORE(x3,x4,0,x10,x11,-65,-1366,160,sh,0)

inst_59:
// rs2_val == -129, 
// opcode: sh; op1:x10; op2:x11; op2val:-129; immval:-2048; align:0
TEST_STORE(x3,x4,0,x10,x11,-129,-2048,164,sh,0)

inst_60:
// rs2_val == -257, 
// opcode: sh; op1:x10; op2:x11; op2val:-257; immval:-65; align:0
TEST_STORE(x3,x4,0,x10,x11,-257,-65,168,sh,0)

inst_61:
// rs2_val == -513, 
// opcode: sh; op1:x10; op2:x11; op2val:-513; immval:-5; align:0
TEST_STORE(x3,x4,0,x10,x11,-513,-5,172,sh,0)

inst_62:
// rs2_val == -1025, 
// opcode: sh; op1:x10; op2:x11; op2val:-1025; immval:4; align:0
TEST_STORE(x3,x4,0,x10,x11,-1025,4,176,sh,0)

inst_63:
// rs2_val == -2049, 
// opcode: sh; op1:x10; op2:x11; op2val:-2049; immval:2; align:0
TEST_STORE(x3,x4,0,x10,x11,-2049,2,180,sh,0)

inst_64:
// rs2_val == -4097, 
// opcode: sh; op1:x10; op2:x11; op2val:-4097; immval:8; align:0
TEST_STORE(x3,x4,0,x10,x11,-4097,8,184,sh,0)

inst_65:
// rs2_val == -8193, 
// opcode: sh; op1:x10; op2:x11; op2val:-8193; immval:-2048; align:0
TEST_STORE(x3,x4,0,x10,x11,-8193,-2048,188,sh,0)

inst_66:
// rs2_val == -32769, 
// opcode: sh; op1:x10; op2:x11; op2val:-32769; immval:-17; align:0
TEST_STORE(x3,x4,0,x10,x11,-32769,-17,192,sh,0)

inst_67:
// rs2_val == -65537, 
// opcode: sh; op1:x10; op2:x11; op2val:-65537; immval:64; align:0
TEST_STORE(x3,x4,0,x10,x11,-65537,64,196,sh,0)

inst_68:
// rs2_val == 1, 
// opcode: sh; op1:x10; op2:x11; op2val:1; immval:1023; align:0
TEST_STORE(x3,x4,0,x10,x11,1,1023,200,sh,0)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x15_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x15_1:
    .fill 18*(XLEN/32),4,0xdeadbeef


signature_x3_0:
    .fill 51*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
