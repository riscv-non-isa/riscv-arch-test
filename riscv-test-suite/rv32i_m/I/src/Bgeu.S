
#include "compliance_model.h"
#include "compliance_test.h"

RVTEST_ISA("RV32I")

RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1
RVTEST_CASE(1,"//check ISA:=regex(.*I.*);def TEST_CASE_1=True;",bgeu)
la x1,signature_x1_1
TEST_BRANCH_OP(bgeu, x2, x31, x30, 4160749567, 4160749567, 4, 1b, x1, 0)
TEST_BRANCH_OP(bgeu, x2, x30, x31, 4160749567, 4160749567, 64, 3f, x1, 4)
TEST_BRANCH_OP(bgeu, x2, x29, x28, 4160749567, 3221225471, 64, 3f, x1, 8)
TEST_BRANCH_OP(bgeu, x2, x28, x29, 4160749567, 3221225471, 4, 1b, x1, 12)
TEST_BRANCH_OP(bgeu, x2, x27, x26, 4160749567, 4294967294, 64, 3f, x1, 16)
TEST_BRANCH_OP(bgeu, x2, x26, x27, 4160749567, 4294967294, 4, 1b, x1, 20)
TEST_BRANCH_OP(bgeu, x2, x25, x24, 1, 4160749567, 4, 1b, x1, 24)
TEST_BRANCH_OP(bgeu, x2, x24, x25, 2, 4160749567, 4, 1b, x1, 28)
TEST_BRANCH_OP(bgeu, x2, x23, x22, 4, 4160749567, 4, 1b, x1, 32)
TEST_BRANCH_OP(bgeu, x2, x22, x23, 8, 4160749567, 4, 1b, x1, 36)
TEST_BRANCH_OP(bgeu, x2, x21, x20, 16, 4160749567, 4, 1b, x1, 40)
TEST_BRANCH_OP(bgeu, x2, x20, x21, 32, 4160749567, 4, 1b, x1, 44)
TEST_BRANCH_OP(bgeu, x2, x19, x18, 64, 4160749567, 4, 1b, x1, 48)
TEST_BRANCH_OP(bgeu, x2, x18, x19, 128, 4160749567, 4, 1b, x1, 52)
TEST_BRANCH_OP(bgeu, x2, x17, x16, 256, 4160749567, 4, 1b, x1, 56)
TEST_BRANCH_OP(bgeu, x2, x16, x17, 512, 4160749567, 4, 1b, x1, 60)
TEST_BRANCH_OP(bgeu, x2, x15, x14, 1024, 4160749567, 4, 1b, x1, 64)
TEST_BRANCH_OP(bgeu, x2, x14, x15, 2048, 4160749567, 4, 1b, x1, 68)
TEST_BRANCH_OP(bgeu, x2, x13, x12, 4096, 4160749567, 4, 1b, x1, 72)
TEST_BRANCH_OP(bgeu, x2, x12, x13, 8192, 4160749567, 4, 1b, x1, 76)
TEST_BRANCH_OP(bgeu, x2, x11, x10, 16384, 4160749567, 4, 1b, x1, 80)
TEST_BRANCH_OP(bgeu, x2, x10, x11, 32768, 4160749567, 4, 1b, x1, 84)
TEST_BRANCH_OP(bgeu, x2, x9, x8, 65536, 4160749567, 4, 1b, x1, 88)
TEST_BRANCH_OP(bgeu, x2, x8, x9, 131072, 4160749567, 4, 1b, x1, 92)
TEST_BRANCH_OP(bgeu, x2, x7, x6, 262144, 4160749567, 4, 1b, x1, 96)
TEST_BRANCH_OP(bgeu, x2, x6, x7, 524288, 4160749567, 4, 1b, x1, 100)
TEST_BRANCH_OP(bgeu, x2, x5, x4, 1048576, 4160749567, 4, 1b, x1, 104)
la x6,signature_x6_0
TEST_BRANCH_OP(bgeu, x7, x4, x5, 2097152, 4160749567, 4, 1b, x6, 0)
TEST_BRANCH_OP(bgeu, x7, x3, x2, 4194304, 4160749567, 4, 1b, x6, 4)
TEST_BRANCH_OP(bgeu, x7, x2, x3, 8388608, 4160749567, 4, 1b, x6, 8)
TEST_BRANCH_OP(bgeu, x7, x1, x0, 16777216, 4160749567, 4, 1b, x6, 12)
TEST_BRANCH_OP(bgeu, x7, x0, x1, 33554432, 4160749567, 4, 1b, x6, 16)
TEST_BRANCH_OP(bgeu, x7, x31, x31, 67108864, 4160749567, 4, 1b, x6, 20)
TEST_BRANCH_OP(bgeu, x7, x10, x11, 134217728, 4160749567, 4, 1b, x6, 24)
TEST_BRANCH_OP(bgeu, x7, x10, x11, 268435456, 4160749567, 4, 1b, x6, 28)
TEST_BRANCH_OP(bgeu, x7, x10, x11, 536870912, 4160749567, 4, 1b, x6, 32)
TEST_BRANCH_OP(bgeu, x7, x10, x11, 1073741824, 4160749567, 4, 1b, x6, 36)
TEST_BRANCH_OP(bgeu, x7, x10, x11, 2147483648, 4160749567, 4, 1b, x6, 40)
TEST_BRANCH_OP(bgeu, x7, x10, x11, 4294967294, 4160749567, 4, 1b, x6, 44)
TEST_BRANCH_OP(bgeu, x7, x10, x11, 4294967293, 4160749567, 4, 1b, x6, 48)
TEST_BRANCH_OP(bgeu, x7, x10, x11, 4294967291, 4160749567, 4, 1b, x6, 52)
TEST_BRANCH_OP(bgeu, x7, x10, x11, 4294967287, 4160749567, 4, 1b, x6, 56)
TEST_BRANCH_OP(bgeu, x7, x10, x11, 4294967279, 4160749567, 4, 1b, x6, 60)
TEST_BRANCH_OP(bgeu, x7, x10, x11, 4294967263, 4160749567, 4, 1b, x6, 64)
TEST_BRANCH_OP(bgeu, x7, x10, x11, 4294967231, 4160749567, 4, 1b, x6, 68)
TEST_BRANCH_OP(bgeu, x7, x10, x11, 4294967167, 4160749567, 4, 1b, x6, 72)
TEST_BRANCH_OP(bgeu, x7, x10, x11, 4294967039, 4160749567, 4, 1b, x6, 76)
TEST_BRANCH_OP(bgeu, x7, x10, x11, 4294966783, 4160749567, 4, 1b, x6, 80)
TEST_BRANCH_OP(bgeu, x7, x10, x11, 4294966271, 4160749567, 4, 1b, x6, 84)
TEST_BRANCH_OP(bgeu, x7, x10, x11, 4294965247, 4160749567, 4, 1b, x6, 88)
TEST_BRANCH_OP(bgeu, x7, x10, x11, 4294963199, 4160749567, 4, 1b, x6, 92)
TEST_BRANCH_OP(bgeu, x7, x10, x11, 4294959103, 4160749567, 4, 1b, x6, 96)
TEST_BRANCH_OP(bgeu, x7, x10, x11, 4294950911, 4160749567, 4, 1b, x6, 100)
TEST_BRANCH_OP(bgeu, x7, x10, x11, 4294934527, 4160749567, 4, 1b, x6, 104)
TEST_BRANCH_OP(bgeu, x7, x10, x11, 4294901759, 4160749567, 4, 1b, x6, 108)
TEST_BRANCH_OP(bgeu, x7, x10, x11, 4294836223, 4160749567, 4, 1b, x6, 112)
TEST_BRANCH_OP(bgeu, x7, x10, x11, 4294705151, 4160749567, 4, 1b, x6, 116)
TEST_BRANCH_OP(bgeu, x7, x10, x11, 4294443007, 4160749567, 4, 1b, x6, 120)
TEST_BRANCH_OP(bgeu, x7, x10, x11, 4293918719, 4160749567, 4, 1b, x6, 124)
TEST_BRANCH_OP(bgeu, x7, x10, x11, 4292870143, 4160749567, 4, 1b, x6, 128)
TEST_BRANCH_OP(bgeu, x7, x10, x11, 4290772991, 4160749567, 4, 1b, x6, 132)
TEST_BRANCH_OP(bgeu, x7, x10, x11, 4286578687, 4160749567, 4, 1b, x6, 136)
TEST_BRANCH_OP(bgeu, x7, x10, x11, 4278190079, 4160749567, 4, 1b, x6, 140)
TEST_BRANCH_OP(bgeu, x7, x10, x11, 4261412863, 4160749567, 4, 1b, x6, 144)
TEST_BRANCH_OP(bgeu, x7, x10, x11, 4227858431, 4160749567, 4, 1b, x6, 148)
TEST_BRANCH_OP(bgeu, x7, x10, x11, 4026531839, 4160749567, 4, 1b, x6, 152)
TEST_BRANCH_OP(bgeu, x7, x10, x11, 3758096383, 4160749567, 4, 1b, x6, 156)
TEST_BRANCH_OP(bgeu, x7, x10, x11, 3221225471, 4160749567, 4, 1b, x6, 160)
TEST_BRANCH_OP(bgeu, x7, x10, x11, 2147483647, 4160749567, 4, 1b, x6, 164)
TEST_BRANCH_OP(bgeu, x7, x10, x11, 1431655765, 4160749567, 4, 1b, x6, 168)
TEST_BRANCH_OP(bgeu, x7, x10, x11, 2863311530, 4160749567, 4, 1b, x6, 172)
TEST_BRANCH_OP(bgeu, x7, x10, x11, 4160749567, 4286578687, 4, 1b, x6, 176)
TEST_BRANCH_OP(bgeu, x7, x10, x11, 4160749567, 4278190079, 4, 1b, x6, 180)
TEST_BRANCH_OP(bgeu, x7, x10, x11, 4160749567, 4261412863, 4, 1b, x6, 184)
TEST_BRANCH_OP(bgeu, x7, x10, x11, 4160749567, 4227858431, 4, 1b, x6, 188)
TEST_BRANCH_OP(bgeu, x7, x10, x11, 4160749567, 4026531839, 4, 1b, x6, 192)
TEST_BRANCH_OP(bgeu, x7, x10, x11, 4160749567, 3758096383, 4, 1b, x6, 196)
TEST_BRANCH_OP(bgeu, x7, x10, x11, 4160749567, 2147483647, 4, 1b, x6, 200)
TEST_BRANCH_OP(bgeu, x7, x10, x11, 4160749567, 1431655765, 4, 1b, x6, 204)
TEST_BRANCH_OP(bgeu, x7, x10, x11, 4160749567, 2863311530, 4, 1b, x6, 208)
TEST_BRANCH_OP(bgeu, x7, x10, x11, 4160749567, 1, 4, 1b, x6, 212)
TEST_BRANCH_OP(bgeu, x7, x10, x11, 4160749567, 2, 4, 1b, x6, 216)
TEST_BRANCH_OP(bgeu, x7, x10, x11, 4160749567, 4, 4, 1b, x6, 220)
TEST_BRANCH_OP(bgeu, x7, x10, x11, 4160749567, 8, 4, 1b, x6, 224)
TEST_BRANCH_OP(bgeu, x7, x10, x11, 4160749567, 16, 4, 1b, x6, 228)
TEST_BRANCH_OP(bgeu, x7, x10, x11, 4160749567, 32, 4, 1b, x6, 232)
TEST_BRANCH_OP(bgeu, x7, x10, x11, 4160749567, 64, 4, 1b, x6, 236)
TEST_BRANCH_OP(bgeu, x7, x10, x11, 4160749567, 128, 4, 1b, x6, 240)
TEST_BRANCH_OP(bgeu, x7, x10, x11, 4160749567, 256, 4, 1b, x6, 244)
TEST_BRANCH_OP(bgeu, x7, x10, x11, 4160749567, 512, 4, 1b, x6, 248)
TEST_BRANCH_OP(bgeu, x7, x10, x11, 4160749567, 1024, 4, 1b, x6, 252)
TEST_BRANCH_OP(bgeu, x7, x10, x11, 4160749567, 2048, 4, 1b, x6, 256)
TEST_BRANCH_OP(bgeu, x7, x10, x11, 4160749567, 4096, 4, 1b, x6, 260)
TEST_BRANCH_OP(bgeu, x7, x10, x11, 4160749567, 8192, 4, 1b, x6, 264)
TEST_BRANCH_OP(bgeu, x7, x10, x11, 4160749567, 16384, 4, 1b, x6, 268)
TEST_BRANCH_OP(bgeu, x7, x10, x11, 4160749567, 32768, 4, 1b, x6, 272)
TEST_BRANCH_OP(bgeu, x7, x10, x11, 4160749567, 65536, 4, 1b, x6, 276)
TEST_BRANCH_OP(bgeu, x7, x10, x11, 4160749567, 131072, 4, 1b, x6, 280)
TEST_BRANCH_OP(bgeu, x7, x10, x11, 4160749567, 262144, 4, 1b, x6, 284)
TEST_BRANCH_OP(bgeu, x7, x10, x11, 4160749567, 524288, 4, 1b, x6, 288)
TEST_BRANCH_OP(bgeu, x7, x10, x11, 4160749567, 1048576, 4, 1b, x6, 292)
TEST_BRANCH_OP(bgeu, x7, x10, x11, 4160749567, 2097152, 4, 1b, x6, 296)
TEST_BRANCH_OP(bgeu, x7, x10, x11, 4160749567, 4194304, 4, 1b, x6, 300)
TEST_BRANCH_OP(bgeu, x7, x10, x11, 4160749567, 8388608, 4, 1b, x6, 304)
TEST_BRANCH_OP(bgeu, x7, x10, x11, 4160749567, 16777216, 4, 1b, x6, 308)
TEST_BRANCH_OP(bgeu, x7, x10, x11, 4160749567, 33554432, 4, 1b, x6, 312)
TEST_BRANCH_OP(bgeu, x7, x10, x11, 4160749567, 67108864, 4, 1b, x6, 316)
TEST_BRANCH_OP(bgeu, x7, x10, x11, 4160749567, 134217728, 4, 1b, x6, 320)
TEST_BRANCH_OP(bgeu, x7, x10, x11, 4160749567, 268435456, 4, 1b, x6, 324)
TEST_BRANCH_OP(bgeu, x7, x10, x11, 4160749567, 536870912, 4, 1b, x6, 328)
TEST_BRANCH_OP(bgeu, x7, x10, x11, 4160749567, 1073741824, 4, 1b, x6, 332)
TEST_BRANCH_OP(bgeu, x7, x10, x11, 4160749567, 2147483648, 4, 1b, x6, 336)
TEST_BRANCH_OP(bgeu, x7, x10, x11, 4160749567, 4294967293, 4, 1b, x6, 340)
TEST_BRANCH_OP(bgeu, x7, x10, x11, 4160749567, 4294967291, 4, 1b, x6, 344)
TEST_BRANCH_OP(bgeu, x7, x10, x11, 4160749567, 4294967287, 4, 1b, x6, 348)
TEST_BRANCH_OP(bgeu, x7, x10, x11, 4160749567, 4294967279, 4, 1b, x6, 352)
TEST_BRANCH_OP(bgeu, x7, x10, x11, 4160749567, 4294967263, 4, 1b, x6, 356)
TEST_BRANCH_OP(bgeu, x7, x10, x11, 4160749567, 4294967231, 4, 1b, x6, 360)
TEST_BRANCH_OP(bgeu, x7, x10, x11, 4160749567, 4294967167, 4, 1b, x6, 364)
TEST_BRANCH_OP(bgeu, x7, x10, x11, 4160749567, 4294967039, 4, 1b, x6, 368)
TEST_BRANCH_OP(bgeu, x7, x10, x11, 4160749567, 4294966783, 4, 1b, x6, 372)
TEST_BRANCH_OP(bgeu, x7, x10, x11, 4160749567, 4294966271, 4, 1b, x6, 376)
TEST_BRANCH_OP(bgeu, x7, x10, x11, 4160749567, 4294965247, 4, 1b, x6, 380)
TEST_BRANCH_OP(bgeu, x7, x10, x11, 4160749567, 4294963199, 4, 1b, x6, 384)
TEST_BRANCH_OP(bgeu, x7, x10, x11, 4160749567, 4294959103, 4, 1b, x6, 388)
TEST_BRANCH_OP(bgeu, x7, x10, x11, 4160749567, 4294950911, 4, 1b, x6, 392)
TEST_BRANCH_OP(bgeu, x7, x10, x11, 4160749567, 4294934527, 4, 1b, x6, 396)
TEST_BRANCH_OP(bgeu, x7, x10, x11, 4160749567, 4294901759, 4, 1b, x6, 400)
TEST_BRANCH_OP(bgeu, x7, x10, x11, 4160749567, 4294836223, 4, 1b, x6, 404)
TEST_BRANCH_OP(bgeu, x7, x10, x11, 4160749567, 4294705151, 4, 1b, x6, 408)
TEST_BRANCH_OP(bgeu, x7, x10, x11, 4160749567, 4294443007, 4, 1b, x6, 412)
TEST_BRANCH_OP(bgeu, x7, x10, x11, 4160749567, 4293918719, 4, 1b, x6, 416)
TEST_BRANCH_OP(bgeu, x7, x10, x11, 4160749567, 4292870143, 4, 1b, x6, 420)
TEST_BRANCH_OP(bgeu, x7, x10, x11, 4160749567, 4290772991, 4, 1b, x6, 424)
TEST_BRANCH_OP(bgeu, x7, x10, x11, 16777216, 4160749567, 4, 1b, x6, 428)
TEST_BRANCH_OP(bgeu, x7, x10, x11, 33554432, 4160749567, 4, 1b, x6, 432)
TEST_BRANCH_OP(bgeu, x7, x10, x11, 67108864, 4160749567, 4, 1b, x6, 436)
#endif


RVMODEL_HALT
RVTEST_CODE_END

RVTEST_DATA_BEGIN
.align 4
.align 4
rvtest_data:
.word 0xbabecafe
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
.align 4

signature_x1_0:
    .fill 0*(XLEN/32),4,0xafacadee


signature_x1_1:
    .fill 27*(XLEN/32),4,0xafacadee


signature_x6_0:
    .fill 110*(XLEN/32),4,0xafacadee

RVMODEL_DATA_END
