
// -----------
// This file was generated by riscv_ctg (https://gitlab.com/incoresemi/riscv-compliance/riscv_ctg)
// version   : 0.2.0
// timestamp : Wed Nov 18 05:39:15 2020 GMT
// usage     : riscv_ctg \
//                  -- cgf ('/scratch/git-repo/incoresemi/riscv-compliance/riscv_ctg/sample_cgfs/dataset.cgf', '/scratch/git-repo/incoresemi/riscv-compliance/riscv_ctg/sample_cgfs/rv32i.cgf') \
//                  -- xlen 32 \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the jalr instruction of the RISC-V I extension for the jalr covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32I")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*);def TEST_CASE_1=True;",jalr)

RVTEST_SIGBASE( x15,signature_x15_1)

inst_0:
// rs1 != rd, rs1==x6, rd==x17, imm_val > 0, imm_val == 256
// opcode: jalr; op1:x6; dest:x17; immval:256; align:0 
TEST_JALR_OP(x4, x17, x6, 256, x15, 0,0)

inst_1:
// rs1 == rd, rs1==x19, rd==x19, imm_val < 0, imm_val == -3
// opcode: jalr; op1:x19; dest:x19; immval:-3; align:0 
TEST_JALR_OP(x4, x19, x19, -3, x15, 4,0)

inst_2:
// rs1==x20, rd==x30, imm_val == 1, 
// opcode: jalr; op1:x20; dest:x30; immval:1; align:0 
TEST_JALR_OP(x4, x30, x20, 1, x15, 8,0)

inst_3:
// rs1==x21, rd==x1, imm_val == 2, 
// opcode: jalr; op1:x21; dest:x1; immval:2; align:0 
TEST_JALR_OP(x4, x1, x21, 2, x15, 12,0)

inst_4:
// rs1==x8, rd==x0, imm_val == 4, 
// opcode: jalr; op1:x8; dest:x0; immval:4; align:0 
TEST_JALR_OP(x4, x0, x8, 4, x15, 16,0)

inst_5:
// rs1==x29, rd==x27, imm_val == 8, 
// opcode: jalr; op1:x29; dest:x27; immval:8; align:0 
TEST_JALR_OP(x4, x27, x29, 8, x15, 20,0)

inst_6:
// rs1==x12, rd==x24, imm_val == 16, 
// opcode: jalr; op1:x12; dest:x24; immval:16; align:0 
TEST_JALR_OP(x4, x24, x12, 16, x15, 24,0)

inst_7:
// rs1==x7, rd==x20, imm_val == 32, 
// opcode: jalr; op1:x7; dest:x20; immval:32; align:0 
TEST_JALR_OP(x4, x20, x7, 32, x15, 28,0)

inst_8:
// rs1==x18, rd==x3, imm_val == 64, 
// opcode: jalr; op1:x18; dest:x3; immval:64; align:0 
TEST_JALR_OP(x4, x3, x18, 64, x15, 32,0)

inst_9:
// rs1==x25, rd==x21, imm_val == 128, 
// opcode: jalr; op1:x25; dest:x21; immval:128; align:0 
TEST_JALR_OP(x4, x21, x25, 128, x15, 36,0)

inst_10:
// rs1==x10, rd==x7, imm_val == 512, 
// opcode: jalr; op1:x10; dest:x7; immval:512; align:0 
TEST_JALR_OP(x4, x7, x10, 512, x15, 40,0)

inst_11:
// rs1==x3, rd==x25, imm_val == 1024, 
// opcode: jalr; op1:x3; dest:x25; immval:1024; align:0 
TEST_JALR_OP(x4, x25, x3, 1024, x15, 44,0)

inst_12:
// rs1==x30, rd==x13, imm_val == -2048, 
// opcode: jalr; op1:x30; dest:x13; immval:-2048; align:0 
TEST_JALR_OP(x4, x13, x30, -2048, x15, 48,0)

inst_13:
// rs1==x31, rd==x14, imm_val == -2, 
// opcode: jalr; op1:x31; dest:x14; immval:-2; align:0 
TEST_JALR_OP(x4, x14, x31, -2, x15, 52,0)

inst_14:
// rs1==x11, rd==x8, imm_val == -5, 
// opcode: jalr; op1:x11; dest:x8; immval:-5; align:0 
TEST_JALR_OP(x4, x8, x11, -5, x15, 56,0)

inst_15:
// rs1==x16, rd==x29, imm_val == -9, 
// opcode: jalr; op1:x16; dest:x29; immval:-9; align:0 
TEST_JALR_OP(x4, x29, x16, -9, x15, 60,0)

inst_16:
// rs1==x17, rd==x18, imm_val == -17, 
// opcode: jalr; op1:x17; dest:x18; immval:-17; align:0 
TEST_JALR_OP(x4, x18, x17, -17, x15, 64,0)

inst_17:
// rs1==x24, rd==x5, imm_val == -33, 
// opcode: jalr; op1:x24; dest:x5; immval:-33; align:0 
TEST_JALR_OP(x4, x5, x24, -33, x15, 68,0)

inst_18:
// rs1==x14, rd==x16, imm_val == -65, 
// opcode: jalr; op1:x14; dest:x16; immval:-65; align:0 
TEST_JALR_OP(x4, x16, x14, -65, x15, 72,0)

inst_19:
// rs1==x13, rd==x26, imm_val == -129, 
// opcode: jalr; op1:x13; dest:x26; immval:-129; align:0 
TEST_JALR_OP(x4, x26, x13, -129, x15, 76,0)

inst_20:
// rs1==x22, rd==x2, imm_val == -257, 
// opcode: jalr; op1:x22; dest:x2; immval:-257; align:0 
TEST_JALR_OP(x4, x2, x22, -257, x15, 80,0)

inst_21:
// rs1==x9, rd==x6, imm_val == -513, 
// opcode: jalr; op1:x9; dest:x6; immval:-513; align:0 
TEST_JALR_OP(x4, x6, x9, -513, x15, 84,0)

inst_22:
// rs1==x4, rd==x12, imm_val == -1025, 
// opcode: jalr; op1:x4; dest:x12; immval:-1025; align:0 
TEST_JALR_OP(x7, x12, x4, -1025, x15, 88,0)
RVTEST_SIGBASE( x6,signature_x6_0)

inst_23:
// rs1==x15, rd==x11, imm_val == 2047, 
// opcode: jalr; op1:x15; dest:x11; immval:2047; align:0 
TEST_JALR_OP(x7, x11, x15, 2047, x6, 0,0)

inst_24:
// rs1==x26, rd==x23, imm_val == 1365, 
// opcode: jalr; op1:x26; dest:x23; immval:1365; align:0 
TEST_JALR_OP(x7, x23, x26, 1365, x6, 4,0)

inst_25:
// rs1==x1, rd==x15, imm_val == -1366, 
// opcode: jalr; op1:x1; dest:x15; immval:-1366; align:0 
TEST_JALR_OP(x7, x15, x1, -1366, x6, 8,0)

inst_26:
// rs1==x28, rd==x4, 
// opcode: jalr; op1:x28; dest:x4; immval:-2048; align:0 
TEST_JALR_OP(x7, x4, x28, -2048, x6, 12,0)

inst_27:
// rs1==x23, rd==x31, 
// opcode: jalr; op1:x23; dest:x31; immval:-2048; align:0 
TEST_JALR_OP(x7, x31, x23, -2048, x6, 16,0)

inst_28:
// rs1==x5, rd==x10, 
// opcode: jalr; op1:x5; dest:x10; immval:-2048; align:0 
TEST_JALR_OP(x7, x10, x5, -2048, x6, 20,0)

inst_29:
// rs1==x2, rd==x28, 
// opcode: jalr; op1:x2; dest:x28; immval:-2048; align:0 
TEST_JALR_OP(x7, x28, x2, -2048, x6, 24,0)

inst_30:
// rs1==x27, rd==x22, 
// opcode: jalr; op1:x27; dest:x22; immval:-2048; align:0 
TEST_JALR_OP(x7, x22, x27, -2048, x6, 28,0)

inst_31:
// rd==x9, 
// opcode: jalr; op1:x3; dest:x9; immval:-2048; align:0 
TEST_JALR_OP(x7, x9, x3, -2048, x6, 32,0)

inst_32:
// imm_val == 4, 
// opcode: jalr; op1:x10; dest:x11; immval:4; align:0 
TEST_JALR_OP(x7, x11, x10, 4, x6, 36,0)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x15_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x15_1:
    .fill 23*(XLEN/32),4,0xdeadbeef


signature_x6_0:
    .fill 10*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
