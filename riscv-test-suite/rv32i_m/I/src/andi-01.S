 
// -----------
// This file was generated by riscv_ctg (https://gitlab.com/incoresemi/riscv-compliance/riscv_ctg)
// version   : 0.1.0
// timestamp : Fri Nov  6 10:29:11 2020 GMT
// usage     : riscv_ctg \
//                  -- cgf /scratch/git-repo/incoresemi/riscv-compliance/riscv_ctg/sample_cgfs/rv32i.cgf \
//                  -- xlen 32 \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the andi instruction of the RISC-V I extension for the andi covergroup.
// 
#include "compliance_model.h"
#include "compliance_test.h"
RVTEST_ISA("RV32I")

RVMODEL_BOOT
RVTEST_CODE_BEGIN
RVMODEL_TARGET_INIT

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*);def TEST_CASE_1=True;",andi)

RVTEST_SIGBASE( x17,signature_x17_1)

inst_0:
// rs1 != rd, rs1==x22, rd==x6, rs1_val == imm_val, rs1_val > 0 and imm_val > 0
// opcode: andi ; op1:x22; dest:x6; op1val:5;  immval:5
TEST_IMM_OP( andi, x6, x22, 0x5, 5, 5, x17, 0, x18)

inst_1:
// rs1 == rd, rs1==x24, rd==x24, rs1_val != imm_val, imm_val == -65, rs1_val == -16385, rs1_val < 0 and imm_val < 0
// opcode: andi ; op1:x24; dest:x24; op1val:-16385;  immval:-65
TEST_IMM_OP( andi, x24, x24, 0xffffbfbf, -16385, -65, x17, 4, x18)

inst_2:
// rs1==x10, rd==x14, rs1_val > 0 and imm_val < 0, rs1_val == 2048
// opcode: andi ; op1:x10; dest:x14; op1val:2048;  immval:-1024
TEST_IMM_OP( andi, x14, x10, 0x800, 2048, -1024, x17, 8, x18)

inst_3:
// rs1==x31, rd==x16, rs1_val < 0 and imm_val > 0, imm_val == 2, rs1_val == -262145
// opcode: andi ; op1:x31; dest:x16; op1val:-262145;  immval:2
TEST_IMM_OP( andi, x16, x31, 0x2, -262145, 2, x17, 12, x18)

inst_4:
// rs1==x6, rd==x20, rs1_val == (-2**(xlen-1)), imm_val == 4, rs1_val == -2147483648
// opcode: andi ; op1:x6; dest:x20; op1val:-2147483648;  immval:4
TEST_IMM_OP( andi, x20, x6, 0x0, -2147483648, 4, x17, 16, x18)

inst_5:
// rs1==x5, rd==x15, rs1_val == 0, imm_val == -1025
// opcode: andi ; op1:x5; dest:x15; op1val:0;  immval:-1025
TEST_IMM_OP( andi, x15, x5, 0x0, 0, -1025, x17, 20, x18)

inst_6:
// rs1==x25, rd==x31, rs1_val == (2**(xlen-1)-1), rs1_val == 2147483647, imm_val == 1
// opcode: andi ; op1:x25; dest:x31; op1val:2147483647;  immval:1
TEST_IMM_OP( andi, x31, x25, 0x1, 2147483647, 1, x17, 24, x18)

inst_7:
// rs1==x2, rd==x27, rs1_val == 1, imm_val == -257
// opcode: andi ; op1:x2; dest:x27; op1val:1;  immval:-257
TEST_IMM_OP( andi, x27, x2, 0x1, 1, -257, x17, 28, x18)

inst_8:
// rs1==x26, rd==x10, imm_val == (-2**(12-1)), imm_val == -2048, rs1_val == -17
// opcode: andi ; op1:x26; dest:x10; op1val:-17;  immval:-2048
TEST_IMM_OP( andi, x10, x26, 0xfffff800, -17, -2048, x17, 32, x18)

inst_9:
// rs1==x3, rd==x29, imm_val == 0, rs1_val == -4194305
// opcode: andi ; op1:x3; dest:x29; op1val:-4194305;  immval:0
TEST_IMM_OP( andi, x29, x3, 0x0, -4194305, 0, x17, 36, x18)

inst_10:
// rs1==x15, rd==x1, imm_val == (2**(12-1)-1), imm_val == 2047, rs1_val == -5
// opcode: andi ; op1:x15; dest:x1; op1val:-5;  immval:2047
TEST_IMM_OP( andi, x1, x15, 0x7fb, -5, 2047, x17, 40, x18)

inst_11:
// rs1==x28, rd==x11, rs1_val == 2, imm_val == -513
// opcode: andi ; op1:x28; dest:x11; op1val:2;  immval:-513
TEST_IMM_OP( andi, x11, x28, 0x2, 2, -513, x17, 44, x18)

inst_12:
// rs1==x11, rd==x8, rs1_val == 4, 
// opcode: andi ; op1:x11; dest:x8; op1val:4;  immval:-7
TEST_IMM_OP( andi, x8, x11, 0x0, 4, -7, x17, 48, x18)

inst_13:
// rs1==x27, rd==x19, rs1_val == 8, imm_val == 128
// opcode: andi ; op1:x27; dest:x19; op1val:8;  immval:128
TEST_IMM_OP( andi, x19, x27, 0x0, 8, 128, x17, 52, x18)

inst_14:
// rs1==x12, rd==x0, rs1_val == 16, imm_val == -5
// opcode: andi ; op1:x12; dest:x0; op1val:16;  immval:-5
TEST_IMM_OP( andi, x0, x12, 0x10, 16, -5, x17, 56, x18)

inst_15:
// rs1==x20, rd==x9, rs1_val == 32, 
// opcode: andi ; op1:x20; dest:x9; op1val:32;  immval:-4
TEST_IMM_OP( andi, x9, x20, 0x20, 32, -4, x17, 60, x18)

inst_16:
// rs1==x0, rd==x28, rs1_val == 64, imm_val == -2
// opcode: andi ; op1:x0; dest:x28; op1val:64;  immval:-2
TEST_IMM_OP( andi, x28, x0, 0x40, 64, -2, x17, 64, x18)

inst_17:
// rs1==x21, rd==x5, rs1_val == 128, 
// opcode: andi ; op1:x21; dest:x5; op1val:128;  immval:128
TEST_IMM_OP( andi, x5, x21, 0x80, 128, 128, x17, 68, x18)

inst_18:
// rs1==x4, rd==x7, rs1_val == 256, imm_val == 1365
// opcode: andi ; op1:x4; dest:x7; op1val:256;  immval:1365
TEST_IMM_OP( andi, x7, x4, 0x100, 256, 1365, x17, 72, x18)

inst_19:
// rs1==x7, rd==x13, rs1_val == 512, imm_val == 64
// opcode: andi ; op1:x7; dest:x13; op1val:512;  immval:64
TEST_IMM_OP( andi, x13, x7, 0x0, 512, 64, x17, 76, x18)

inst_20:
// rs1==x9, rd==x23, rs1_val == 1024, 
// opcode: andi ; op1:x9; dest:x23; op1val:1024;  immval:64
TEST_IMM_OP( andi, x23, x9, 0x0, 1024, 64, x17, 80, x6)
RVTEST_SIGBASE( x5,signature_x5_0)

inst_21:
// rs1==x18, rd==x2, rs1_val == 4096, 
// opcode: andi ; op1:x18; dest:x2; op1val:4096;  immval:0
TEST_IMM_OP( andi, x2, x18, 0x0, 4096, 0, x5, 0, x6)

inst_22:
// rs1==x8, rd==x21, rs1_val == 8192, imm_val == -129
// opcode: andi ; op1:x8; dest:x21; op1val:8192;  immval:-129
TEST_IMM_OP( andi, x21, x8, 0x2000, 8192, -129, x5, 4, x6)

inst_23:
// rs1==x14, rd==x25, rs1_val == 16384, 
// opcode: andi ; op1:x14; dest:x25; op1val:16384;  immval:-5
TEST_IMM_OP( andi, x25, x14, 0x4000, 16384, -5, x5, 8, x6)

inst_24:
// rs1==x17, rd==x26, rs1_val == 32768, imm_val == 512
// opcode: andi ; op1:x17; dest:x26; op1val:32768;  immval:512
TEST_IMM_OP( andi, x26, x17, 0x0, 32768, 512, x5, 12, x6)

inst_25:
// rs1==x16, rd==x4, rs1_val == 65536, 
// opcode: andi ; op1:x16; dest:x4; op1val:65536;  immval:6
TEST_IMM_OP( andi, x4, x16, 0x0, 65536, 6, x5, 16, x6)

inst_26:
// rs1==x13, rd==x30, rs1_val == 131072, 
// opcode: andi ; op1:x13; dest:x30; op1val:131072;  immval:-1025
TEST_IMM_OP( andi, x30, x13, 0x20000, 131072, -1025, x5, 20, x6)

inst_27:
// rs1==x19, rd==x12, rs1_val == 262144, 
// opcode: andi ; op1:x19; dest:x12; op1val:262144;  immval:-1024
TEST_IMM_OP( andi, x12, x19, 0x40000, 262144, -1024, x5, 24, x6)

inst_28:
// rs1==x1, rd==x22, rs1_val == 524288, 
// opcode: andi ; op1:x1; dest:x22; op1val:524288;  immval:-513
TEST_IMM_OP( andi, x22, x1, 0x80000, 524288, -513, x5, 28, x6)

inst_29:
// rs1==x30, rd==x17, rs1_val == 1048576, 
// opcode: andi ; op1:x30; dest:x17; op1val:1048576;  immval:2
TEST_IMM_OP( andi, x17, x30, 0x0, 1048576, 2, x5, 32, x6)

inst_30:
// rs1==x23, rd==x3, rs1_val == 2097152, imm_val == 256
// opcode: andi ; op1:x23; dest:x3; op1val:2097152;  immval:256
TEST_IMM_OP( andi, x3, x23, 0x0, 2097152, 256, x5, 36, x6)

inst_31:
// rs1==x29, rd==x18, rs1_val == 4194304, 
// opcode: andi ; op1:x29; dest:x18; op1val:4194304;  immval:6
TEST_IMM_OP( andi, x18, x29, 0x0, 4194304, 6, x5, 40, x6)

inst_32:
// rs1_val == 8388608, 
// opcode: andi ; op1:x10; dest:x11; op1val:8388608;  immval:-513
TEST_IMM_OP( andi, x11, x10, 0x800000, 8388608, -513, x5, 44, x6)

inst_33:
// rs1_val == 16777216, imm_val == -3
// opcode: andi ; op1:x10; dest:x11; op1val:16777216;  immval:-3
TEST_IMM_OP( andi, x11, x10, 0x1000000, 16777216, -3, x5, 48, x6)

inst_34:
// rs1_val == 33554432, 
// opcode: andi ; op1:x10; dest:x11; op1val:33554432;  immval:2
TEST_IMM_OP( andi, x11, x10, 0x0, 33554432, 2, x5, 52, x6)

inst_35:
// rs1_val == 67108864, 
// opcode: andi ; op1:x10; dest:x11; op1val:67108864;  immval:5
TEST_IMM_OP( andi, x11, x10, 0x0, 67108864, 5, x5, 56, x6)

inst_36:
// rs1_val == 134217728, 
// opcode: andi ; op1:x10; dest:x11; op1val:134217728;  immval:2
TEST_IMM_OP( andi, x11, x10, 0x0, 134217728, 2, x5, 60, x6)

inst_37:
// rs1_val == 268435456, 
// opcode: andi ; op1:x10; dest:x11; op1val:268435456;  immval:2047
TEST_IMM_OP( andi, x11, x10, 0x0, 268435456, 2047, x5, 64, x6)

inst_38:
// rs1_val == 536870912, 
// opcode: andi ; op1:x10; dest:x11; op1val:536870912;  immval:9
TEST_IMM_OP( andi, x11, x10, 0x0, 536870912, 9, x5, 68, x6)

inst_39:
// rs1_val == 1073741824, 
// opcode: andi ; op1:x10; dest:x11; op1val:1073741824;  immval:-10
TEST_IMM_OP( andi, x11, x10, 0x40000000, 1073741824, -10, x5, 72, x6)

inst_40:
// rs1_val == -2, imm_val == -9
// opcode: andi ; op1:x10; dest:x11; op1val:-2;  immval:-9
TEST_IMM_OP( andi, x11, x10, 0xfffffff6, -2, -9, x5, 76, x6)

inst_41:
// rs1_val == -3, imm_val == -17
// opcode: andi ; op1:x10; dest:x11; op1val:-3;  immval:-17
TEST_IMM_OP( andi, x11, x10, 0xffffffed, -3, -17, x5, 80, x6)

inst_42:
// rs1_val == -9, 
// opcode: andi ; op1:x10; dest:x11; op1val:-9;  immval:1
TEST_IMM_OP( andi, x11, x10, 0x1, -9, 1, x5, 84, x6)

inst_43:
// rs1_val == -524289, 
// opcode: andi ; op1:x10; dest:x11; op1val:-524289;  immval:6
TEST_IMM_OP( andi, x11, x10, 0x6, -524289, 6, x5, 88, x6)

inst_44:
// rs1_val == -1048577, 
// opcode: andi ; op1:x10; dest:x11; op1val:-1048577;  immval:-1024
TEST_IMM_OP( andi, x11, x10, 0xffeffc00, -1048577, -1024, x5, 92, x6)

inst_45:
// rs1_val == -2097153, 
// opcode: andi ; op1:x10; dest:x11; op1val:-2097153;  immval:512
TEST_IMM_OP( andi, x11, x10, 0x200, -2097153, 512, x5, 96, x6)

inst_46:
// rs1_val == -8388609, 
// opcode: andi ; op1:x10; dest:x11; op1val:-8388609;  immval:512
TEST_IMM_OP( andi, x11, x10, 0x200, -8388609, 512, x5, 100, x6)

inst_47:
// rs1_val == -16777217, 
// opcode: andi ; op1:x10; dest:x11; op1val:-16777217;  immval:-7
TEST_IMM_OP( andi, x11, x10, 0xfefffff9, -16777217, -7, x5, 104, x6)

inst_48:
// rs1_val == -33554433, imm_val == -1366
// opcode: andi ; op1:x10; dest:x11; op1val:-33554433;  immval:-1366
TEST_IMM_OP( andi, x11, x10, 0xfdfffaaa, -33554433, -1366, x5, 108, x6)

inst_49:
// rs1_val == -67108865, imm_val == -33
// opcode: andi ; op1:x10; dest:x11; op1val:-67108865;  immval:-33
TEST_IMM_OP( andi, x11, x10, 0xfbffffdf, -67108865, -33, x5, 112, x6)

inst_50:
// rs1_val == -134217729, imm_val == 16
// opcode: andi ; op1:x10; dest:x11; op1val:-134217729;  immval:16
TEST_IMM_OP( andi, x11, x10, 0x10, -134217729, 16, x5, 116, x6)

inst_51:
// rs1_val == -268435457, 
// opcode: andi ; op1:x10; dest:x11; op1val:-268435457;  immval:-1025
TEST_IMM_OP( andi, x11, x10, 0xeffffbff, -268435457, -1025, x5, 120, x6)

inst_52:
// rs1_val == -536870913, 
// opcode: andi ; op1:x10; dest:x11; op1val:-536870913;  immval:2
TEST_IMM_OP( andi, x11, x10, 0x2, -536870913, 2, x5, 124, x6)

inst_53:
// rs1_val == -1073741825, 
// opcode: andi ; op1:x10; dest:x11; op1val:-1073741825;  immval:-1
TEST_IMM_OP( andi, x11, x10, 0xbfffffff, -1073741825, -1, x5, 128, x6)

inst_54:
// rs1_val == 1431655765, 
// opcode: andi ; op1:x10; dest:x11; op1val:1431655765;  immval:-513
TEST_IMM_OP( andi, x11, x10, 0x55555555, 1431655765, -513, x5, 132, x6)

inst_55:
// rs1_val == -1431655766, 
// opcode: andi ; op1:x10; dest:x11; op1val:-1431655766;  immval:1365
TEST_IMM_OP( andi, x11, x10, 0x0, -1431655766, 1365, x5, 136, x6)

inst_56:
// rs1_val == -8193, 
// opcode: andi ; op1:x10; dest:x11; op1val:-8193;  immval:-33
TEST_IMM_OP( andi, x11, x10, 0xffffdfdf, -8193, -33, x5, 140, x6)

inst_57:
// imm_val == 8, 
// opcode: andi ; op1:x10; dest:x11; op1val:-536870913;  immval:8
TEST_IMM_OP( andi, x11, x10, 0x8, -536870913, 8, x5, 144, x6)

inst_58:
// rs1_val == -33, 
// opcode: andi ; op1:x10; dest:x11; op1val:-33;  immval:2047
TEST_IMM_OP( andi, x11, x10, 0x7df, -33, 2047, x5, 148, x6)

inst_59:
// imm_val == 32, 
// opcode: andi ; op1:x10; dest:x11; op1val:2;  immval:32
TEST_IMM_OP( andi, x11, x10, 0x0, 2, 32, x5, 152, x6)

inst_60:
// rs1_val == -65, 
// opcode: andi ; op1:x10; dest:x11; op1val:-65;  immval:-4
TEST_IMM_OP( andi, x11, x10, 0xffffffbc, -65, -4, x5, 156, x6)

inst_61:
// rs1_val == -129, 
// opcode: andi ; op1:x10; dest:x11; op1val:-129;  immval:1365
TEST_IMM_OP( andi, x11, x10, 0x555, -129, 1365, x5, 160, x6)

inst_62:
// rs1_val == -257, 
// opcode: andi ; op1:x10; dest:x11; op1val:-257;  immval:-1366
TEST_IMM_OP( andi, x11, x10, 0xfffffaaa, -257, -1366, x5, 164, x6)

inst_63:
// rs1_val == -513, 
// opcode: andi ; op1:x10; dest:x11; op1val:-513;  immval:-129
TEST_IMM_OP( andi, x11, x10, 0xfffffd7f, -513, -129, x5, 168, x6)

inst_64:
// rs1_val == -1025, 
// opcode: andi ; op1:x10; dest:x11; op1val:-1025;  immval:-257
TEST_IMM_OP( andi, x11, x10, 0xfffffaff, -1025, -257, x5, 172, x6)

inst_65:
// imm_val == 1024, 
// opcode: andi ; op1:x10; dest:x11; op1val:2097152;  immval:1024
TEST_IMM_OP( andi, x11, x10, 0x0, 2097152, 1024, x5, 176, x6)

inst_66:
// rs1_val == -2049, 
// opcode: andi ; op1:x10; dest:x11; op1val:-2049;  immval:-1
TEST_IMM_OP( andi, x11, x10, 0xfffff7ff, -2049, -1, x5, 180, x6)

inst_67:
// rs1_val == -4097, 
// opcode: andi ; op1:x10; dest:x11; op1val:-4097;  immval:4
TEST_IMM_OP( andi, x11, x10, 0x4, -4097, 4, x5, 184, x6)

inst_68:
// rs1_val == -32769, 
// opcode: andi ; op1:x10; dest:x11; op1val:-32769;  immval:1
TEST_IMM_OP( andi, x11, x10, 0x1, -32769, 1, x5, 188, x6)

inst_69:
// rs1_val == -65537, 
// opcode: andi ; op1:x10; dest:x11; op1val:-65537;  immval:-2
TEST_IMM_OP( andi, x11, x10, 0xfffefffe, -65537, -2, x5, 192, x6)

inst_70:
// rs1_val == -131073, 
// opcode: andi ; op1:x10; dest:x11; op1val:-131073;  immval:1023
TEST_IMM_OP( andi, x11, x10, 0x3ff, -131073, 1023, x5, 196, x6)

inst_71:
// rs1_val == 16, imm_val == -5
// opcode: andi ; op1:x10; dest:x11; op1val:16;  immval:-5
TEST_IMM_OP( andi, x11, x10, 0x10, 16, -5, x5, 200, x6)

inst_72:
// rs1_val == 64, imm_val == -2
// opcode: andi ; op1:x10; dest:x11; op1val:64;  immval:-2
TEST_IMM_OP( andi, x11, x10, 0x40, 64, -2, x5, 204, x6)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x17_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x17_1:
    .fill 21*(XLEN/32),4,0xdeadbeef


signature_x5_0:
    .fill 52*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
