
// -----------
// This file was generated by riscv_ctg (https://gitlab.com/incoresemi/riscv-compliance/riscv_ctg)
// version   : 0.2.0
// timestamp : Wed Nov 18 05:39:15 2020 GMT
// usage     : riscv_ctg \
//                  -- cgf ('/scratch/git-repo/incoresemi/riscv-compliance/riscv_ctg/sample_cgfs/dataset.cgf', '/scratch/git-repo/incoresemi/riscv-compliance/riscv_ctg/sample_cgfs/rv32i.cgf') \
//                  -- xlen 32 \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the auipc instruction of the RISC-V I extension for the auipc covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32I")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*);def TEST_CASE_1=True;",auipc)

RVTEST_SIGBASE( x3,signature_x3_1)

inst_0:
// rd==x10, imm_val == 0, imm_val==0
// opcode: auipc ; dest:x10; immval:0
TEST_AUIPC(auipc, x10, 0x0, 0, x3, 0, x8)

inst_1:
// rd==x19, imm_val > 0, imm_val == 1040383
// opcode: auipc ; dest:x19; immval:1040383
TEST_AUIPC(auipc, x19, 0xfdfff000, 1040383, x3, 4, x8)

inst_2:
// rd==x21, imm_val == ((2**20)-1), 
// opcode: auipc ; dest:x21; immval:1048575
TEST_AUIPC(auipc, x21, 0xfffff000, 1048575, x3, 8, x8)

inst_3:
// rd==x13, imm_val==3, 
// opcode: auipc ; dest:x13; immval:3
TEST_AUIPC(auipc, x13, 0x3000, 3, x3, 12, x8)

inst_4:
// rd==x16, imm_val==349525, imm_val == 349525
// opcode: auipc ; dest:x16; immval:349525
TEST_AUIPC(auipc, x16, 0x55555000, 349525, x3, 16, x8)

inst_5:
// rd==x18, imm_val==699050, imm_val == 699050
// opcode: auipc ; dest:x18; immval:699050
TEST_AUIPC(auipc, x18, 0xaaaaa000, 699050, x3, 20, x8)

inst_6:
// rd==x6, imm_val==5, 
// opcode: auipc ; dest:x6; immval:5
TEST_AUIPC(auipc, x6, 0x5000, 5, x3, 24, x8)

inst_7:
// rd==x24, imm_val==209715, 
// opcode: auipc ; dest:x24; immval:209715
TEST_AUIPC(auipc, x24, 0x33333000, 209715, x3, 28, x8)

inst_8:
// rd==x14, imm_val==419430, 
// opcode: auipc ; dest:x14; immval:419430
TEST_AUIPC(auipc, x14, 0x66666000, 419430, x3, 32, x8)

inst_9:
// rd==x12, imm_val==724, 
// opcode: auipc ; dest:x12; immval:724
TEST_AUIPC(auipc, x12, 0x2d4000, 724, x3, 36, x8)

inst_10:
// rd==x11, imm_val==1023, 
// opcode: auipc ; dest:x11; immval:1023
TEST_AUIPC(auipc, x11, 0x3ff000, 1023, x3, 40, x8)

inst_11:
// rd==x5, imm_val==2, imm_val == 2
// opcode: auipc ; dest:x5; immval:2
TEST_AUIPC(auipc, x5, 0x2000, 2, x3, 44, x8)

inst_12:
// rd==x1, imm_val==349524, 
// opcode: auipc ; dest:x1; immval:349524
TEST_AUIPC(auipc, x1, 0x55554000, 349524, x3, 48, x8)

inst_13:
// rd==x30, imm_val==699049, 
// opcode: auipc ; dest:x30; immval:699049
TEST_AUIPC(auipc, x30, 0xaaaa9000, 699049, x3, 52, x8)

inst_14:
// rd==x9, imm_val==4, imm_val == 4
// opcode: auipc ; dest:x9; immval:4
TEST_AUIPC(auipc, x9, 0x4000, 4, x3, 56, x8)

inst_15:
// rd==x28, imm_val==209714, 
// opcode: auipc ; dest:x28; immval:209714
TEST_AUIPC(auipc, x28, 0x33332000, 209714, x3, 60, x8)

inst_16:
// rd==x7, imm_val==419429, 
// opcode: auipc ; dest:x7; immval:419429
TEST_AUIPC(auipc, x7, 0x66665000, 419429, x3, 64, x8)

inst_17:
// rd==x27, imm_val==723, 
// opcode: auipc ; dest:x27; immval:723
TEST_AUIPC(auipc, x27, 0x2d3000, 723, x3, 68, x8)

inst_18:
// rd==x26, imm_val==1022, 
// opcode: auipc ; dest:x26; immval:1022
TEST_AUIPC(auipc, x26, 0x3fe000, 1022, x3, 72, x8)

inst_19:
// rd==x2, imm_val==349526, 
// opcode: auipc ; dest:x2; immval:349526
TEST_AUIPC(auipc, x2, 0x55556000, 349526, x3, 76, x8)

inst_20:
// rd==x4, imm_val==699051, 
// opcode: auipc ; dest:x4; immval:699051
TEST_AUIPC(auipc, x4, 0xaaaab000, 699051, x3, 80, x8)

inst_21:
// rd==x29, imm_val==6, 
// opcode: auipc ; dest:x29; immval:6
TEST_AUIPC(auipc, x29, 0x6000, 6, x3, 84, x8)

inst_22:
// rd==x31, imm_val==209716, 
// opcode: auipc ; dest:x31; immval:209716
TEST_AUIPC(auipc, x31, 0x33334000, 209716, x3, 88, x8)

inst_23:
// rd==x0, imm_val==419431, 
// opcode: auipc ; dest:x0; immval:419431
TEST_AUIPC(auipc, x0, 0x66667000, 419431, x3, 92, x8)

inst_24:
// rd==x22, imm_val==725, 
// opcode: auipc ; dest:x22; immval:725
TEST_AUIPC(auipc, x22, 0x2d5000, 725, x3, 96, x8)

inst_25:
// rd==x15, imm_val==1, imm_val == 1
// opcode: auipc ; dest:x15; immval:1
TEST_AUIPC(auipc, x15, 0x1000, 1, x3, 100, x8)

inst_26:
// rd==x25, imm_val==1024, imm_val == 1024
// opcode: auipc ; dest:x25; immval:1024
TEST_AUIPC(auipc, x25, 0x400000, 1024, x3, 104, x8)

inst_27:
// rd==x23, imm_val == 8, 
// opcode: auipc ; dest:x23; immval:8
TEST_AUIPC(auipc, x23, 0x8000, 8, x3, 108, x8)

inst_28:
// rd==x17, imm_val == 16, 
// opcode: auipc ; dest:x17; immval:16
TEST_AUIPC(auipc, x17, 0x10000, 16, x3, 112, x2)
RVTEST_SIGBASE( x1,signature_x1_0)

inst_29:
// rd==x3, imm_val == 32, 
// opcode: auipc ; dest:x3; immval:32
TEST_AUIPC(auipc, x3, 0x20000, 32, x1, 0, x2)

inst_30:
// rd==x20, imm_val == 64, 
// opcode: auipc ; dest:x20; immval:64
TEST_AUIPC(auipc, x20, 0x40000, 64, x1, 4, x2)

inst_31:
// rd==x8, imm_val == 983039, 
// opcode: auipc ; dest:x8; immval:983039
TEST_AUIPC(auipc, x8, 0xeffff000, 983039, x1, 8, x2)

inst_32:
// imm_val == 917503, 
// opcode: auipc ; dest:x10; immval:917503
TEST_AUIPC(auipc, x10, 0xdffff000, 917503, x1, 12, x2)

inst_33:
// imm_val == 786431, 
// opcode: auipc ; dest:x10; immval:786431
TEST_AUIPC(auipc, x10, 0xbffff000, 786431, x1, 16, x2)

inst_34:
// imm_val == 524287, 
// opcode: auipc ; dest:x10; immval:524287
TEST_AUIPC(auipc, x10, 0x7ffff000, 524287, x1, 20, x2)

inst_35:
// imm_val == 128, 
// opcode: auipc ; dest:x10; immval:128
TEST_AUIPC(auipc, x10, 0x80000, 128, x1, 24, x2)

inst_36:
// imm_val == 256, 
// opcode: auipc ; dest:x10; immval:256
TEST_AUIPC(auipc, x10, 0x100000, 256, x1, 28, x2)

inst_37:
// imm_val == 512, 
// opcode: auipc ; dest:x10; immval:512
TEST_AUIPC(auipc, x10, 0x200000, 512, x1, 32, x2)

inst_38:
// imm_val == 2048, 
// opcode: auipc ; dest:x10; immval:2048
TEST_AUIPC(auipc, x10, 0x800000, 2048, x1, 36, x2)

inst_39:
// imm_val == 4096, 
// opcode: auipc ; dest:x10; immval:4096
TEST_AUIPC(auipc, x10, 0x1000000, 4096, x1, 40, x2)

inst_40:
// imm_val == 8192, 
// opcode: auipc ; dest:x10; immval:8192
TEST_AUIPC(auipc, x10, 0x2000000, 8192, x1, 44, x2)

inst_41:
// imm_val == 16384, 
// opcode: auipc ; dest:x10; immval:16384
TEST_AUIPC(auipc, x10, 0x4000000, 16384, x1, 48, x2)

inst_42:
// imm_val == 32768, 
// opcode: auipc ; dest:x10; immval:32768
TEST_AUIPC(auipc, x10, 0x8000000, 32768, x1, 52, x2)

inst_43:
// imm_val == 65536, 
// opcode: auipc ; dest:x10; immval:65536
TEST_AUIPC(auipc, x10, 0x10000000, 65536, x1, 56, x2)

inst_44:
// imm_val == 131072, 
// opcode: auipc ; dest:x10; immval:131072
TEST_AUIPC(auipc, x10, 0x20000000, 131072, x1, 60, x2)

inst_45:
// imm_val == 262144, 
// opcode: auipc ; dest:x10; immval:262144
TEST_AUIPC(auipc, x10, 0x40000000, 262144, x1, 64, x2)

inst_46:
// imm_val == 524288, 
// opcode: auipc ; dest:x10; immval:524288
TEST_AUIPC(auipc, x10, 0x80000000, 524288, x1, 68, x2)

inst_47:
// imm_val == 1048574, 
// opcode: auipc ; dest:x10; immval:1048574
TEST_AUIPC(auipc, x10, 0xffffe000, 1048574, x1, 72, x2)

inst_48:
// imm_val == 1048573, 
// opcode: auipc ; dest:x10; immval:1048573
TEST_AUIPC(auipc, x10, 0xffffd000, 1048573, x1, 76, x2)

inst_49:
// imm_val == 1048571, 
// opcode: auipc ; dest:x10; immval:1048571
TEST_AUIPC(auipc, x10, 0xffffb000, 1048571, x1, 80, x2)

inst_50:
// imm_val == 1048567, 
// opcode: auipc ; dest:x10; immval:1048567
TEST_AUIPC(auipc, x10, 0xffff7000, 1048567, x1, 84, x2)

inst_51:
// imm_val == 1048559, 
// opcode: auipc ; dest:x10; immval:1048559
TEST_AUIPC(auipc, x10, 0xfffef000, 1048559, x1, 88, x2)

inst_52:
// imm_val == 1048543, 
// opcode: auipc ; dest:x10; immval:1048543
TEST_AUIPC(auipc, x10, 0xfffdf000, 1048543, x1, 92, x2)

inst_53:
// imm_val == 1048511, 
// opcode: auipc ; dest:x10; immval:1048511
TEST_AUIPC(auipc, x10, 0xfffbf000, 1048511, x1, 96, x2)

inst_54:
// imm_val == 1048447, 
// opcode: auipc ; dest:x10; immval:1048447
TEST_AUIPC(auipc, x10, 0xfff7f000, 1048447, x1, 100, x2)

inst_55:
// imm_val == 1048319, 
// opcode: auipc ; dest:x10; immval:1048319
TEST_AUIPC(auipc, x10, 0xffeff000, 1048319, x1, 104, x2)

inst_56:
// imm_val == 1048063, 
// opcode: auipc ; dest:x10; immval:1048063
TEST_AUIPC(auipc, x10, 0xffdff000, 1048063, x1, 108, x2)

inst_57:
// imm_val == 1047551, 
// opcode: auipc ; dest:x10; immval:1047551
TEST_AUIPC(auipc, x10, 0xffbff000, 1047551, x1, 112, x2)

inst_58:
// imm_val == 1046527, 
// opcode: auipc ; dest:x10; immval:1046527
TEST_AUIPC(auipc, x10, 0xff7ff000, 1046527, x1, 116, x2)

inst_59:
// imm_val == 1044479, 
// opcode: auipc ; dest:x10; immval:1044479
TEST_AUIPC(auipc, x10, 0xfefff000, 1044479, x1, 120, x2)

inst_60:
// imm_val == 1032191, 
// opcode: auipc ; dest:x10; immval:1032191
TEST_AUIPC(auipc, x10, 0xfbfff000, 1032191, x1, 124, x2)

inst_61:
// imm_val == 1015807, 
// opcode: auipc ; dest:x10; immval:1015807
TEST_AUIPC(auipc, x10, 0xf7fff000, 1015807, x1, 128, x2)

inst_62:
// imm_val==419431, 
// opcode: auipc ; dest:x10; immval:419431
TEST_AUIPC(auipc, x10, 0x66667000, 419431, x1, 132, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x3_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x3_1:
    .fill 29*(XLEN/32),4,0xdeadbeef


signature_x1_0:
    .fill 34*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
