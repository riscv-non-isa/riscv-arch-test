 
// -----------
// This file was generated by riscv_ctg (https://gitlab.com/incoresemi/riscv-compliance/riscv_ctg)
// version   : 0.1.0
// timestamp : Fri Nov  6 10:29:11 2020 GMT
// usage     : riscv_ctg \
//                  -- cgf /scratch/git-repo/incoresemi/riscv-compliance/riscv_ctg/sample_cgfs/rv32i.cgf \
//                  -- xlen 32 \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the xori instruction of the RISC-V I extension for the xori covergroup.
// 
#include "compliance_model.h"
#include "compliance_test.h"
RVTEST_ISA("RV32I")

RVTEST_CODE_BEGIN
RVMODEL_BOOT

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*);def TEST_CASE_1=True;",xori)

RVTEST_SIGBASE( x7,signature_x7_1)

inst_0:
// rs1 != rd, rs1==x31, rd==x9, rs1_val == imm_val, rs1_val == -33, rs1_val < 0 and imm_val < 0, imm_val == -33
// opcode: xori ; op1:x31; dest:x9; op1val:-33;  immval:-33
TEST_IMM_OP( xori, x9, x31, 0x0, -33, -33, x7, 0, x6)

inst_1:
// rs1 == rd, rs1==x25, rd==x25, rs1_val != imm_val, rs1_val == -16385
// opcode: xori ; op1:x25; dest:x25; op1val:-16385;  immval:-10
TEST_IMM_OP( xori, x25, x25, 0x4009, -16385, -10, x7, 4, x6)

inst_2:
// rs1==x26, rd==x30, rs1_val > 0 and imm_val > 0, rs1_val == 1
// opcode: xori ; op1:x26; dest:x30; op1val:1;  immval:9
TEST_IMM_OP( xori, x30, x26, 0x8, 1, 9, x7, 8, x6)

inst_3:
// rs1==x24, rd==x17, rs1_val > 0 and imm_val < 0, rs1_val == 16
// opcode: xori ; op1:x24; dest:x17; op1val:16;  immval:-1
TEST_IMM_OP( xori, x17, x24, 0xffffffef, 16, -1, x7, 12, x6)

inst_4:
// rs1==x23, rd==x20, rs1_val < 0 and imm_val > 0, rs1_val == -536870913, imm_val == 2
// opcode: xori ; op1:x23; dest:x20; op1val:-536870913;  immval:2
TEST_IMM_OP( xori, x20, x23, 0xdffffffd, -536870913, 2, x7, 16, x6)

inst_5:
// rs1==x12, rd==x19, rs1_val == (-2**(xlen-1)), imm_val == -2048, imm_val == (-2**(12-1)), rs1_val == -2147483648
// opcode: xori ; op1:x12; dest:x19; op1val:-2147483648;  immval:-2048
TEST_IMM_OP( xori, x19, x12, 0x7ffff800, -2147483648, -2048, x7, 20, x6)

inst_6:
// rs1==x15, rd==x2, rs1_val == 0, imm_val == (2**(12-1)-1), imm_val == 2047
// opcode: xori ; op1:x15; dest:x2; op1val:0;  immval:2047
TEST_IMM_OP( xori, x2, x15, 0x7ff, 0, 2047, x7, 24, x6)

inst_7:
// rs1==x28, rd==x4, rs1_val == (2**(xlen-1)-1), rs1_val == 2147483647
// opcode: xori ; op1:x28; dest:x4; op1val:2147483647;  immval:6
TEST_IMM_OP( xori, x4, x28, 0x7ffffff9, 2147483647, 6, x7, 28, x6)

inst_8:
// rs1==x21, rd==x0, imm_val == 0, rs1_val == -33554433
// opcode: xori ; op1:x21; dest:x0; op1val:-33554433;  immval:0
TEST_IMM_OP( xori, x0, x21, 0xfdffffff, -33554433, 0, x7, 32, x6)

inst_9:
// rs1==x2, rd==x5, imm_val == 1, rs1_val == 128
// opcode: xori ; op1:x2; dest:x5; op1val:128;  immval:1
TEST_IMM_OP( xori, x5, x2, 0x81, 128, 1, x7, 36, x6)

inst_10:
// rs1==x17, rd==x12, rs1_val == 2, 
// opcode: xori ; op1:x17; dest:x12; op1val:2;  immval:9
TEST_IMM_OP( xori, x12, x17, 0xb, 2, 9, x7, 40, x6)

inst_11:
// rs1==x14, rd==x29, rs1_val == 4, 
// opcode: xori ; op1:x14; dest:x29; op1val:4;  immval:1023
TEST_IMM_OP( xori, x29, x14, 0x3fb, 4, 1023, x7, 44, x6)

inst_12:
// rs1==x13, rd==x24, rs1_val == 8, imm_val == 1024
// opcode: xori ; op1:x13; dest:x24; op1val:8;  immval:1024
TEST_IMM_OP( xori, x24, x13, 0x408, 8, 1024, x7, 48, x6)

inst_13:
// rs1==x8, rd==x15, rs1_val == 32, 
// opcode: xori ; op1:x8; dest:x15; op1val:32;  immval:-10
TEST_IMM_OP( xori, x15, x8, 0xffffffd6, 32, -10, x7, 52, x6)

inst_14:
// rs1==x30, rd==x13, rs1_val == 64, imm_val == 64
// opcode: xori ; op1:x30; dest:x13; op1val:64;  immval:64
TEST_IMM_OP( xori, x13, x30, 0x0, 64, 64, x7, 56, x6)

inst_15:
// rs1==x11, rd==x23, rs1_val == 256, imm_val == -1025
// opcode: xori ; op1:x11; dest:x23; op1val:256;  immval:-1025
TEST_IMM_OP( xori, x23, x11, 0xfffffaff, 256, -1025, x7, 60, x6)

inst_16:
// rs1==x22, rd==x26, rs1_val == 512, 
// opcode: xori ; op1:x22; dest:x26; op1val:512;  immval:7
TEST_IMM_OP( xori, x26, x22, 0x207, 512, 7, x7, 64, x6)

inst_17:
// rs1==x16, rd==x1, rs1_val == 1024, 
// opcode: xori ; op1:x16; dest:x1; op1val:1024;  immval:1023
TEST_IMM_OP( xori, x1, x16, 0x7ff, 1024, 1023, x7, 68, x6)

inst_18:
// rs1==x29, rd==x22, rs1_val == 2048, imm_val == -5
// opcode: xori ; op1:x29; dest:x22; op1val:2048;  immval:-5
TEST_IMM_OP( xori, x22, x29, 0xfffff7fb, 2048, -5, x7, 72, x6)

inst_19:
// rs1==x10, rd==x3, rs1_val == 4096, 
// opcode: xori ; op1:x10; dest:x3; op1val:4096;  immval:3
TEST_IMM_OP( xori, x3, x10, 0x1003, 4096, 3, x7, 76, x6)

inst_20:
// rs1==x9, rd==x16, rs1_val == 8192, imm_val == 256
// opcode: xori ; op1:x9; dest:x16; op1val:8192;  immval:256
TEST_IMM_OP( xori, x16, x9, 0x2100, 8192, 256, x7, 80, x12)

inst_21:
// rs1==x6, rd==x11, rs1_val == 16384, 
// opcode: xori ; op1:x6; dest:x11; op1val:16384;  immval:-5
TEST_IMM_OP( xori, x11, x6, 0xffffbffb, 16384, -5, x7, 84, x12)
RVTEST_SIGBASE( x2,signature_x2_0)

inst_22:
// rs1==x19, rd==x31, rs1_val == 32768, imm_val == -9
// opcode: xori ; op1:x19; dest:x31; op1val:32768;  immval:-9
TEST_IMM_OP( xori, x31, x19, 0xffff7ff7, 32768, -9, x2, 0, x12)

inst_23:
// rs1==x20, rd==x14, rs1_val == 65536, 
// opcode: xori ; op1:x20; dest:x14; op1val:65536;  immval:-10
TEST_IMM_OP( xori, x14, x20, 0xfffefff6, 65536, -10, x2, 4, x12)

inst_24:
// rs1==x18, rd==x28, rs1_val == 131072, 
// opcode: xori ; op1:x18; dest:x28; op1val:131072;  immval:-5
TEST_IMM_OP( xori, x28, x18, 0xfffdfffb, 131072, -5, x2, 8, x12)

inst_25:
// rs1==x0, rd==x18, rs1_val == 262144, imm_val == 32
// opcode: xori ; op1:x0; dest:x18; op1val:262144;  immval:32
TEST_IMM_OP( xori, x18, x0, 0x40020, 262144, 32, x2, 12, x12)

inst_26:
// rs1==x7, rd==x21, rs1_val == 524288, 
// opcode: xori ; op1:x7; dest:x21; op1val:524288;  immval:-9
TEST_IMM_OP( xori, x21, x7, 0xfff7fff7, 524288, -9, x2, 16, x12)

inst_27:
// rs1==x1, rd==x27, rs1_val == 1048576, 
// opcode: xori ; op1:x1; dest:x27; op1val:1048576;  immval:5
TEST_IMM_OP( xori, x27, x1, 0x100005, 1048576, 5, x2, 20, x12)

inst_28:
// rs1==x4, rd==x7, rs1_val == 2097152, 
// opcode: xori ; op1:x4; dest:x7; op1val:2097152;  immval:-5
TEST_IMM_OP( xori, x7, x4, 0xffdffffb, 2097152, -5, x2, 24, x12)

inst_29:
// rs1==x27, rd==x8, rs1_val == 4194304, imm_val == 512
// opcode: xori ; op1:x27; dest:x8; op1val:4194304;  immval:512
TEST_IMM_OP( xori, x8, x27, 0x400200, 4194304, 512, x2, 28, x12)

inst_30:
// rs1==x3, rd==x6, rs1_val == 8388608, 
// opcode: xori ; op1:x3; dest:x6; op1val:8388608;  immval:256
TEST_IMM_OP( xori, x6, x3, 0x800100, 8388608, 256, x2, 32, x12)

inst_31:
// rs1==x5, rd==x10, rs1_val == 16777216, 
// opcode: xori ; op1:x5; dest:x10; op1val:16777216;  immval:-1
TEST_IMM_OP( xori, x10, x5, 0xfeffffff, 16777216, -1, x2, 36, x12)

inst_32:
// rs1_val == 33554432, imm_val == -3
// opcode: xori ; op1:x10; dest:x11; op1val:33554432;  immval:-3
TEST_IMM_OP( xori, x11, x10, 0xfdfffffd, 33554432, -3, x2, 40, x12)

inst_33:
// rs1_val == 67108864, 
// opcode: xori ; op1:x10; dest:x11; op1val:67108864;  immval:-10
TEST_IMM_OP( xori, x11, x10, 0xfbfffff6, 67108864, -10, x2, 44, x12)

inst_34:
// rs1_val == 134217728, imm_val == -17
// opcode: xori ; op1:x10; dest:x11; op1val:134217728;  immval:-17
TEST_IMM_OP( xori, x11, x10, 0xf7ffffef, 134217728, -17, x2, 48, x12)

inst_35:
// rs1_val == 268435456, imm_val == 128
// opcode: xori ; op1:x10; dest:x11; op1val:268435456;  immval:128
TEST_IMM_OP( xori, x11, x10, 0x10000080, 268435456, 128, x2, 52, x12)

inst_36:
// rs1_val == 536870912, imm_val == -129
// opcode: xori ; op1:x10; dest:x11; op1val:536870912;  immval:-129
TEST_IMM_OP( xori, x11, x10, 0xdfffff7f, 536870912, -129, x2, 56, x12)

inst_37:
// rs1_val == 1073741824, imm_val == -513
// opcode: xori ; op1:x10; dest:x11; op1val:1073741824;  immval:-513
TEST_IMM_OP( xori, x11, x10, 0xbffffdff, 1073741824, -513, x2, 60, x12)

inst_38:
// rs1_val == -2, 
// opcode: xori ; op1:x10; dest:x11; op1val:-2;  immval:1
TEST_IMM_OP( xori, x11, x10, 0xffffffff, -2, 1, x2, 64, x12)

inst_39:
// rs1_val == -3, imm_val == 4
// opcode: xori ; op1:x10; dest:x11; op1val:-3;  immval:4
TEST_IMM_OP( xori, x11, x10, 0xfffffff9, -3, 4, x2, 68, x12)

inst_40:
// rs1_val == -5, 
// opcode: xori ; op1:x10; dest:x11; op1val:-5;  immval:128
TEST_IMM_OP( xori, x11, x10, 0xffffff7b, -5, 128, x2, 72, x12)

inst_41:
// rs1_val == -9, 
// opcode: xori ; op1:x10; dest:x11; op1val:-9;  immval:1024
TEST_IMM_OP( xori, x11, x10, 0xfffffbf7, -9, 1024, x2, 76, x12)

inst_42:
// rs1_val == -17, 
// opcode: xori ; op1:x10; dest:x11; op1val:-17;  immval:-3
TEST_IMM_OP( xori, x11, x10, 0x12, -17, -3, x2, 80, x12)

inst_43:
// rs1_val == -524289, 
// opcode: xori ; op1:x10; dest:x11; op1val:-524289;  immval:5
TEST_IMM_OP( xori, x11, x10, 0xfff7fffa, -524289, 5, x2, 84, x12)

inst_44:
// rs1_val == -1048577, 
// opcode: xori ; op1:x10; dest:x11; op1val:-1048577;  immval:3
TEST_IMM_OP( xori, x11, x10, 0xffeffffc, -1048577, 3, x2, 88, x12)

inst_45:
// rs1_val == -2097153, 
// opcode: xori ; op1:x10; dest:x11; op1val:-2097153;  immval:5
TEST_IMM_OP( xori, x11, x10, 0xffdffffa, -2097153, 5, x2, 92, x12)

inst_46:
// rs1_val == -4194305, imm_val == 1365
// opcode: xori ; op1:x10; dest:x11; op1val:-4194305;  immval:1365
TEST_IMM_OP( xori, x11, x10, 0xffbffaaa, -4194305, 1365, x2, 96, x12)

inst_47:
// rs1_val == -8388609, imm_val == 16
// opcode: xori ; op1:x10; dest:x11; op1val:-8388609;  immval:16
TEST_IMM_OP( xori, x11, x10, 0xff7fffef, -8388609, 16, x2, 100, x12)

inst_48:
// rs1_val == -16777217, 
// opcode: xori ; op1:x10; dest:x11; op1val:-16777217;  immval:1
TEST_IMM_OP( xori, x11, x10, 0xfefffffe, -16777217, 1, x2, 104, x12)

inst_49:
// rs1_val == -67108865, 
// opcode: xori ; op1:x10; dest:x11; op1val:-67108865;  immval:-5
TEST_IMM_OP( xori, x11, x10, 0x4000004, -67108865, -5, x2, 108, x12)

inst_50:
// rs1_val == -134217729, 
// opcode: xori ; op1:x10; dest:x11; op1val:-134217729;  immval:-3
TEST_IMM_OP( xori, x11, x10, 0x8000002, -134217729, -3, x2, 112, x12)

inst_51:
// rs1_val == -268435457, 
// opcode: xori ; op1:x10; dest:x11; op1val:-268435457;  immval:-1024
TEST_IMM_OP( xori, x11, x10, 0x100003ff, -268435457, -1024, x2, 116, x12)

inst_52:
// rs1_val == -1073741825, imm_val == -1366
// opcode: xori ; op1:x10; dest:x11; op1val:-1073741825;  immval:-1366
TEST_IMM_OP( xori, x11, x10, 0x40000555, -1073741825, -1366, x2, 120, x12)

inst_53:
// rs1_val == 1431655765, 
// opcode: xori ; op1:x10; dest:x11; op1val:1431655765;  immval:5
TEST_IMM_OP( xori, x11, x10, 0x55555550, 1431655765, 5, x2, 124, x12)

inst_54:
// rs1_val == -1431655766, 
// opcode: xori ; op1:x10; dest:x11; op1val:-1431655766;  immval:16
TEST_IMM_OP( xori, x11, x10, 0xaaaaaaba, -1431655766, 16, x2, 128, x12)

inst_55:
// imm_val == 8, 
// opcode: xori ; op1:x10; dest:x11; op1val:-2097153;  immval:8
TEST_IMM_OP( xori, x11, x10, 0xffdffff7, -2097153, 8, x2, 132, x12)

inst_56:
// imm_val == -65, rs1_val == -513
// opcode: xori ; op1:x10; dest:x11; op1val:-513;  immval:-65
TEST_IMM_OP( xori, x11, x10, 0x240, -513, -65, x2, 136, x12)

inst_57:
// imm_val == -257, 
// opcode: xori ; op1:x10; dest:x11; op1val:-2;  immval:-257
TEST_IMM_OP( xori, x11, x10, 0x101, -2, -257, x2, 140, x12)

inst_58:
// rs1_val == -8193, 
// opcode: xori ; op1:x10; dest:x11; op1val:-8193;  immval:-4
TEST_IMM_OP( xori, x11, x10, 0x2003, -8193, -4, x2, 144, x12)

inst_59:
// rs1_val == -65, 
// opcode: xori ; op1:x10; dest:x11; op1val:-65;  immval:-2048
TEST_IMM_OP( xori, x11, x10, 0x7bf, -65, -2048, x2, 148, x12)

inst_60:
// rs1_val == -129, 
// opcode: xori ; op1:x10; dest:x11; op1val:-129;  immval:1024
TEST_IMM_OP( xori, x11, x10, 0xfffffb7f, -129, 1024, x2, 152, x12)

inst_61:
// rs1_val == -257, 
// opcode: xori ; op1:x10; dest:x11; op1val:-257;  immval:16
TEST_IMM_OP( xori, x11, x10, 0xfffffeef, -257, 16, x2, 156, x12)

inst_62:
// rs1_val == -1025, 
// opcode: xori ; op1:x10; dest:x11; op1val:-1025;  immval:-1366
TEST_IMM_OP( xori, x11, x10, 0x155, -1025, -1366, x2, 160, x12)

inst_63:
// rs1_val == -2049, 
// opcode: xori ; op1:x10; dest:x11; op1val:-2049;  immval:-65
TEST_IMM_OP( xori, x11, x10, 0x840, -2049, -65, x2, 164, x12)

inst_64:
// rs1_val == -4097, 
// opcode: xori ; op1:x10; dest:x11; op1val:-4097;  immval:64
TEST_IMM_OP( xori, x11, x10, 0xffffefbf, -4097, 64, x2, 168, x12)

inst_65:
// imm_val == -2, 
// opcode: xori ; op1:x10; dest:x11; op1val:4;  immval:-2
TEST_IMM_OP( xori, x11, x10, 0xfffffffa, 4, -2, x2, 172, x12)

inst_66:
// rs1_val == -32769, 
// opcode: xori ; op1:x10; dest:x11; op1val:-32769;  immval:16
TEST_IMM_OP( xori, x11, x10, 0xffff7fef, -32769, 16, x2, 176, x12)

inst_67:
// rs1_val == -65537, 
// opcode: xori ; op1:x10; dest:x11; op1val:-65537;  immval:6
TEST_IMM_OP( xori, x11, x10, 0xfffefff9, -65537, 6, x2, 180, x12)

inst_68:
// rs1_val == -131073, 
// opcode: xori ; op1:x10; dest:x11; op1val:-131073;  immval:-5
TEST_IMM_OP( xori, x11, x10, 0x20004, -131073, -5, x2, 184, x12)

inst_69:
// rs1_val == -262145, 
// opcode: xori ; op1:x10; dest:x11; op1val:-262145;  immval:9
TEST_IMM_OP( xori, x11, x10, 0xfffbfff6, -262145, 9, x2, 188, x12)

inst_70:
// imm_val == 0, rs1_val == -33554433
// opcode: xori ; op1:x10; dest:x11; op1val:-33554433;  immval:0
TEST_IMM_OP( xori, x11, x10, 0xfdffffff, -33554433, 0, x2, 192, x12)

inst_71:
// rs1_val == 262144, imm_val == 32
// opcode: xori ; op1:x10; dest:x11; op1val:262144;  immval:32
TEST_IMM_OP( xori, x11, x10, 0x40020, 262144, 32, x2, 196, x12)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x7_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x7_1:
    .fill 22*(XLEN/32),4,0xdeadbeef


signature_x2_0:
    .fill 50*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
