 
// -----------
// This file was generated by riscv_ctg (https://gitlab.com/incoresemi/riscv-compliance/riscv_ctg)
// version   : 0.1.0
// timestamp : Thu Nov  5 11:18:24 2020 GMT
// usage     : riscv_ctg \
//                  -- cgf /scratch/git-repo/incoresemi/riscv-compliance/riscv_ctg/sample_cgfs/rv32i.cgf \
//                  -- xlen 32 \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the xori instruction of the RISC-V I extension for the xori covergroup.
// 
#include "compliance_model.h"
#include "compliance_test.h"
RVTEST_ISA("RV32I")

RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*);def TEST_CASE_1=True;",xori)

RVTEST_SIGBASE( x2,signature_x2_1)

// rs1 != rd, rs1==x17, rd==x0, rs1_val == imm_val, imm_val == -65, rs1_val == -65, rs1_val < 0 and imm_val < 0
// opcode: xori ; op1:x17; dest:x0; op1val:0xffffffbf;  immval:-65
TEST_IMM_OP( xori, x0, x17, 0x0, 0xffffffbf, -65, x2, 0, x12)

// rs1 == rd, rs1==x30, rd==x30, rs1_val != imm_val, imm_val == -257, rs1_val == -65537
// opcode: xori ; op1:x30; dest:x30; op1val:0xfffeffff;  immval:-257
TEST_IMM_OP( xori, x30, x30, 0x10100, 0xfffeffff, -257, x2, 4, x12)

// rs1==x31, rd==x3, rs1_val > 0 and imm_val > 0, rs1_val == 1
// opcode: xori ; op1:x31; dest:x3; op1val:0x00000001;  immval:9
TEST_IMM_OP( xori, x3, x31, 0x8, 0x00000001, 9, x2, 8, x12)

// rs1==x5, rd==x7, rs1_val > 0 and imm_val < 0, 
// opcode: xori ; op1:x5; dest:x7; op1val:0x00000005;  immval:-10
TEST_IMM_OP( xori, x7, x5, 0xfffffff3, 0x00000005, -10, x2, 12, x12)

// rs1==x15, rd==x27, rs1_val < 0 and imm_val > 0, imm_val == 1024, rs1_val == -2
// opcode: xori ; op1:x15; dest:x27; op1val:0xfffffffe;  immval:1024
TEST_IMM_OP( xori, x27, x15, 0xfffffbfe, 0xfffffffe, 1024, x2, 16, x12)

// rs1==x28, rd==x5, rs1_val == (-2**(xlen-1)), rs1_val == -2147483648
// opcode: xori ; op1:x28; dest:x5; op1val:0x80000000;  immval:-8
TEST_IMM_OP( xori, x5, x28, 0x7ffffff8, 0x80000000, -8, x2, 20, x12)

// rs1==x23, rd==x24, rs1_val == 0, imm_val == 1
// opcode: xori ; op1:x23; dest:x24; op1val:0x00000000;  immval:1
TEST_IMM_OP( xori, x24, x23, 0x1, 0x00000000, 1, x2, 24, x12)

// rs1==x27, rd==x19, rs1_val == (2**(xlen-1)-1), rs1_val == 2147483647
// opcode: xori ; op1:x27; dest:x19; op1val:0x7fffffff;  immval:5
TEST_IMM_OP( xori, x19, x27, 0x7ffffffa, 0x7fffffff, 5, x2, 28, x12)

// rs1==x18, rd==x11, imm_val == (-2**(12-1)), imm_val == -2048, rs1_val == -129
// opcode: xori ; op1:x18; dest:x11; op1val:0xffffff7f;  immval:-2048
TEST_IMM_OP( xori, x11, x18, 0x77f, 0xffffff7f, -2048, x2, 32, x12)

// rs1==x26, rd==x20, imm_val == 0, 
// opcode: xori ; op1:x26; dest:x20; op1val:0x00000007;  immval:0
TEST_IMM_OP( xori, x20, x26, 0x7, 0x00000007, 0, x2, 36, x12)

// rs1==x22, rd==x17, imm_val == (2**(12-1)-1), imm_val == 2047, rs1_val == -262145
// opcode: xori ; op1:x22; dest:x17; op1val:0xfffbffff;  immval:2047
TEST_IMM_OP( xori, x17, x22, 0xfffbf800, 0xfffbffff, 2047, x2, 40, x12)

// rs1==x11, rd==x13, rs1_val == 2, imm_val == -33
// opcode: xori ; op1:x11; dest:x13; op1val:0x00000002;  immval:-33
TEST_IMM_OP( xori, x13, x11, 0xffffffdd, 0x00000002, -33, x2, 44, x12)

// rs1==x20, rd==x8, rs1_val == 4, imm_val == 32
// opcode: xori ; op1:x20; dest:x8; op1val:0x00000004;  immval:32
TEST_IMM_OP( xori, x8, x20, 0x24, 0x00000004, 32, x2, 48, x12)

// rs1==x16, rd==x29, rs1_val == 8, 
// opcode: xori ; op1:x16; dest:x29; op1val:0x00000008;  immval:-10
TEST_IMM_OP( xori, x29, x16, 0xfffffffe, 0x00000008, -10, x2, 52, x12)

// rs1==x8, rd==x9, rs1_val == 16, imm_val == -1025
// opcode: xori ; op1:x8; dest:x9; op1val:0x00000010;  immval:-1025
TEST_IMM_OP( xori, x9, x8, 0xfffffbef, 0x00000010, -1025, x2, 56, x12)

// rs1==x19, rd==x26, rs1_val == 32, 
// opcode: xori ; op1:x19; dest:x26; op1val:0x00000020;  immval:-8
TEST_IMM_OP( xori, x26, x19, 0xffffffd8, 0x00000020, -8, x2, 60, x12)

// rs1==x29, rd==x23, rs1_val == 64, imm_val == 2
// opcode: xori ; op1:x29; dest:x23; op1val:0x00000040;  immval:2
TEST_IMM_OP( xori, x23, x29, 0x42, 0x00000040, 2, x2, 64, x12)

// rs1==x24, rd==x6, rs1_val == 128, imm_val == 16
// opcode: xori ; op1:x24; dest:x6; op1val:0x00000080;  immval:16
TEST_IMM_OP( xori, x6, x24, 0x90, 0x00000080, 16, x2, 68, x12)

// rs1==x7, rd==x31, rs1_val == 256, 
// opcode: xori ; op1:x7; dest:x31; op1val:0x00000100;  immval:-8
TEST_IMM_OP( xori, x31, x7, 0xfffffef8, 0x00000100, -8, x2, 72, x12)

// rs1==x4, rd==x14, rs1_val == 512, imm_val == 64
// opcode: xori ; op1:x4; dest:x14; op1val:0x00000200;  immval:64
TEST_IMM_OP( xori, x14, x4, 0x240, 0x00000200, 64, x2, 76, x12)

// rs1==x1, rd==x10, rs1_val == 1024, imm_val == -513
// opcode: xori ; op1:x1; dest:x10; op1val:0x00000400;  immval:-513
TEST_IMM_OP( xori, x10, x1, 0xfffff9ff, 0x00000400, -513, x2, 80, x12)

// rs1==x21, rd==x28, rs1_val == 2048, imm_val == -9
// opcode: xori ; op1:x21; dest:x28; op1val:0x00000800;  immval:-9
TEST_IMM_OP( xori, x28, x21, 0xfffff7f7, 0x00000800, -9, x2, 84, x7)
RVTEST_SIGBASE( x5,signature_x5_0)

// rs1==x10, rd==x12, rs1_val == 4096, 
// opcode: xori ; op1:x10; dest:x12; op1val:0x00001000;  immval:3
TEST_IMM_OP( xori, x12, x10, 0x1003, 0x00001000, 3, x5, 0, x7)

// rs1==x12, rd==x4, rs1_val == 8192, imm_val == 512
// opcode: xori ; op1:x12; dest:x4; op1val:0x00002000;  immval:512
TEST_IMM_OP( xori, x4, x12, 0x2200, 0x00002000, 512, x5, 4, x7)

// rs1==x14, rd==x2, rs1_val == 16384, 
// opcode: xori ; op1:x14; dest:x2; op1val:0x00004000;  immval:-9
TEST_IMM_OP( xori, x2, x14, 0xffffbff7, 0x00004000, -9, x5, 8, x7)

// rs1==x2, rd==x25, rs1_val == 32768, 
// opcode: xori ; op1:x2; dest:x25; op1val:0x00008000;  immval:3
TEST_IMM_OP( xori, x25, x2, 0x8003, 0x00008000, 3, x5, 12, x7)

// rs1==x25, rd==x21, rs1_val == 65536, 
// opcode: xori ; op1:x25; dest:x21; op1val:0x00010000;  immval:-1025
TEST_IMM_OP( xori, x21, x25, 0xfffefbff, 0x00010000, -1025, x5, 16, x7)

// rs1==x13, rd==x1, rs1_val == 131072, 
// opcode: xori ; op1:x13; dest:x1; op1val:0x00020000;  immval:-4
TEST_IMM_OP( xori, x1, x13, 0xfffdfffc, 0x00020000, -4, x5, 20, x7)

// rs1==x6, rd==x22, rs1_val == 262144, 
// opcode: xori ; op1:x6; dest:x22; op1val:0x00040000;  immval:-10
TEST_IMM_OP( xori, x22, x6, 0xfffbfff6, 0x00040000, -10, x5, 24, x7)

// rs1==x3, rd==x18, rs1_val == 524288, 
// opcode: xori ; op1:x3; dest:x18; op1val:0x00080000;  immval:1023
TEST_IMM_OP( xori, x18, x3, 0x803ff, 0x00080000, 1023, x5, 28, x7)

// rs1==x0, rd==x15, rs1_val == 1048576, imm_val == -2
// opcode: xori ; op1:x0; dest:x15; op1val:0x00100000;  immval:-2
TEST_IMM_OP( xori, x15, x0, 0xffeffffe, 0x00100000, -2, x5, 32, x7)

// rs1==x9, rd==x16, rs1_val == 2097152, 
// opcode: xori ; op1:x9; dest:x16; op1val:0x00200000;  immval:-65
TEST_IMM_OP( xori, x16, x9, 0xffdfffbf, 0x00200000, -65, x5, 36, x7)

// rs1_val == 4194304, imm_val == -129
// opcode: xori ; op1:x10; dest:x11; op1val:0x00400000;  immval:-129
TEST_IMM_OP( xori, x11, x10, 0xffbfff7f, 0x00400000, -129, x5, 40, x7)

// rs1_val == 8388608, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x00800000;  immval:1023
TEST_IMM_OP( xori, x11, x10, 0x8003ff, 0x00800000, 1023, x5, 44, x7)

// rs1_val == 16777216, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x01000000;  immval:-1025
TEST_IMM_OP( xori, x11, x10, 0xfefffbff, 0x01000000, -1025, x5, 48, x7)

// rs1_val == 33554432, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x02000000;  immval:-1024
TEST_IMM_OP( xori, x11, x10, 0xfdfffc00, 0x02000000, -1024, x5, 52, x7)

// rs1_val == 67108864, imm_val == 1365
// opcode: xori ; op1:x10; dest:x11; op1val:0x04000000;  immval:1365
TEST_IMM_OP( xori, x11, x10, 0x4000555, 0x04000000, 1365, x5, 56, x7)

// rs1_val == 134217728, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x08000000;  immval:1024
TEST_IMM_OP( xori, x11, x10, 0x8000400, 0x08000000, 1024, x5, 60, x7)

// rs1_val == 268435456, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x10000000;  immval:1365
TEST_IMM_OP( xori, x11, x10, 0x10000555, 0x10000000, 1365, x5, 64, x7)

// rs1_val == 536870912, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x20000000;  immval:2047
TEST_IMM_OP( xori, x11, x10, 0x200007ff, 0x20000000, 2047, x5, 68, x7)

// rs1_val == 1073741824, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x40000000;  immval:-6
TEST_IMM_OP( xori, x11, x10, 0xbffffffa, 0x40000000, -6, x5, 72, x7)

// rs1_val == -3, 
// opcode: xori ; op1:x10; dest:x11; op1val:0xfffffffd;  immval:-513
TEST_IMM_OP( xori, x11, x10, 0x202, 0xfffffffd, -513, x5, 76, x7)

// rs1_val == -5, 
// opcode: xori ; op1:x10; dest:x11; op1val:0xfffffffb;  immval:6
TEST_IMM_OP( xori, x11, x10, 0xfffffffd, 0xfffffffb, 6, x5, 80, x7)

// rs1_val == -9, 
// opcode: xori ; op1:x10; dest:x11; op1val:0xfffffff7;  immval:-1
TEST_IMM_OP( xori, x11, x10, 0x8, 0xfffffff7, -1, x5, 84, x7)

// rs1_val == -17, 
// opcode: xori ; op1:x10; dest:x11; op1val:0xffffffef;  immval:-1
TEST_IMM_OP( xori, x11, x10, 0x10, 0xffffffef, -1, x5, 88, x7)

// rs1_val == -33, 
// opcode: xori ; op1:x10; dest:x11; op1val:0xffffffdf;  immval:2047
TEST_IMM_OP( xori, x11, x10, 0xfffff820, 0xffffffdf, 2047, x5, 92, x7)

// rs1_val == -524289, 
// opcode: xori ; op1:x10; dest:x11; op1val:0xfff7ffff;  immval:1023
TEST_IMM_OP( xori, x11, x10, 0xfff7fc00, 0xfff7ffff, 1023, x5, 96, x7)

// rs1_val == -1048577, 
// opcode: xori ; op1:x10; dest:x11; op1val:0xffefffff;  immval:-65
TEST_IMM_OP( xori, x11, x10, 0x100040, 0xffefffff, -65, x5, 100, x7)

// rs1_val == -2097153, 
// opcode: xori ; op1:x10; dest:x11; op1val:0xffdfffff;  immval:1023
TEST_IMM_OP( xori, x11, x10, 0xffdffc00, 0xffdfffff, 1023, x5, 104, x7)

// rs1_val == -4194305, 
// opcode: xori ; op1:x10; dest:x11; op1val:0xffbfffff;  immval:-65
TEST_IMM_OP( xori, x11, x10, 0x400040, 0xffbfffff, -65, x5, 108, x7)

// rs1_val == -8388609, 
// opcode: xori ; op1:x10; dest:x11; op1val:0xff7fffff;  immval:512
TEST_IMM_OP( xori, x11, x10, 0xff7ffdff, 0xff7fffff, 512, x5, 112, x7)

// rs1_val == -16777217, 
// opcode: xori ; op1:x10; dest:x11; op1val:0xfeffffff;  immval:512
TEST_IMM_OP( xori, x11, x10, 0xfefffdff, 0xfeffffff, 512, x5, 116, x7)

// rs1_val == -33554433, 
// opcode: xori ; op1:x10; dest:x11; op1val:0xfdffffff;  immval:2047
TEST_IMM_OP( xori, x11, x10, 0xfdfff800, 0xfdffffff, 2047, x5, 120, x7)

// rs1_val == -67108865, 
// opcode: xori ; op1:x10; dest:x11; op1val:0xfbffffff;  immval:1365
TEST_IMM_OP( xori, x11, x10, 0xfbfffaaa, 0xfbffffff, 1365, x5, 124, x7)

// rs1_val == -134217729, 
// opcode: xori ; op1:x10; dest:x11; op1val:0xf7ffffff;  immval:6
TEST_IMM_OP( xori, x11, x10, 0xf7fffff9, 0xf7ffffff, 6, x5, 128, x7)

// rs1_val == -268435457, 
// opcode: xori ; op1:x10; dest:x11; op1val:0xefffffff;  immval:64
TEST_IMM_OP( xori, x11, x10, 0xefffffbf, 0xefffffff, 64, x5, 132, x7)

// rs1_val == -536870913, imm_val == -5
// opcode: xori ; op1:x10; dest:x11; op1val:0xdfffffff;  immval:-5
TEST_IMM_OP( xori, x11, x10, 0x20000004, 0xdfffffff, -5, x5, 136, x7)

// rs1_val == -1073741825, 
// opcode: xori ; op1:x10; dest:x11; op1val:0xbfffffff;  immval:2047
TEST_IMM_OP( xori, x11, x10, 0xbffff800, 0xbfffffff, 2047, x5, 140, x7)

// rs1_val == 1431655765, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x55555555;  immval:0
TEST_IMM_OP( xori, x11, x10, 0x55555555, 0x55555555, 0, x5, 144, x7)

// rs1_val == -1431655766, 
// opcode: xori ; op1:x10; dest:x11; op1val:0xaaaaaaaa;  immval:-1025
TEST_IMM_OP( xori, x11, x10, 0x55555155, 0xaaaaaaaa, -1025, x5, 148, x7)

// imm_val == 4, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x00008000;  immval:4
TEST_IMM_OP( xori, x11, x10, 0x8004, 0x00008000, 4, x5, 152, x7)

// rs1_val == -8193, 
// opcode: xori ; op1:x10; dest:x11; op1val:0xffffdfff;  immval:-8
TEST_IMM_OP( xori, x11, x10, 0x2007, 0xffffdfff, -8, x5, 156, x7)

// imm_val == -1366, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x00000007;  immval:-1366
TEST_IMM_OP( xori, x11, x10, 0xfffffaad, 0x00000007, -1366, x5, 160, x7)

// rs1_val == -16385, 
// opcode: xori ; op1:x10; dest:x11; op1val:0xffffbfff;  immval:5
TEST_IMM_OP( xori, x11, x10, 0xffffbffa, 0xffffbfff, 5, x5, 164, x7)

// imm_val == 8, 
// opcode: xori ; op1:x10; dest:x11; op1val:0xfffffffc;  immval:8
TEST_IMM_OP( xori, x11, x10, 0xfffffff4, 0xfffffffc, 8, x5, 168, x7)

// rs1_val == -131073, 
// opcode: xori ; op1:x10; dest:x11; op1val:0xfffdffff;  immval:-2048
TEST_IMM_OP( xori, x11, x10, 0x207ff, 0xfffdffff, -2048, x5, 172, x7)

// imm_val == 128, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x00000040;  immval:128
TEST_IMM_OP( xori, x11, x10, 0xc0, 0x00000040, 128, x5, 176, x7)

// rs1_val == -257, 
// opcode: xori ; op1:x10; dest:x11; op1val:0xfffffeff;  immval:1023
TEST_IMM_OP( xori, x11, x10, 0xfffffd00, 0xfffffeff, 1023, x5, 180, x7)

// rs1_val == -1025, 
// opcode: xori ; op1:x10; dest:x11; op1val:0xfffffbff;  immval:-1024
TEST_IMM_OP( xori, x11, x10, 0x7ff, 0xfffffbff, -1024, x5, 184, x7)

// imm_val == 256, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x00000800;  immval:256
TEST_IMM_OP( xori, x11, x10, 0x900, 0x00000800, 256, x5, 188, x7)

// rs1_val == -513, 
// opcode: xori ; op1:x10; dest:x11; op1val:0xfffffdff;  immval:-6
TEST_IMM_OP( xori, x11, x10, 0x205, 0xfffffdff, -6, x5, 192, x7)

// rs1_val == -2049, 
// opcode: xori ; op1:x10; dest:x11; op1val:0xfffff7ff;  immval:4
TEST_IMM_OP( xori, x11, x10, 0xfffff7fb, 0xfffff7ff, 4, x5, 196, x7)

// rs1_val == -4097, 
// opcode: xori ; op1:x10; dest:x11; op1val:0xffffefff;  immval:-10
TEST_IMM_OP( xori, x11, x10, 0x1009, 0xffffefff, -10, x5, 200, x7)

// imm_val == -3, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x80000000;  immval:-3
TEST_IMM_OP( xori, x11, x10, 0x7ffffffd, 0x80000000, -3, x5, 204, x7)

// rs1_val == -32769, 
// opcode: xori ; op1:x10; dest:x11; op1val:0xffff7fff;  immval:-3
TEST_IMM_OP( xori, x11, x10, 0x8002, 0xffff7fff, -3, x5, 208, x7)

// imm_val == -17, 
// opcode: xori ; op1:x10; dest:x11; op1val:0xffffffff;  immval:-17
TEST_IMM_OP( xori, x11, x10, 0x10, 0xffffffff, -17, x5, 212, x7)

// rs1_val == imm_val, imm_val == -65, rs1_val == -65, rs1_val < 0 and imm_val < 0
// opcode: xori ; op1:x10; dest:x11; op1val:0xffffffbf;  immval:-65
TEST_IMM_OP( xori, x11, x10, 0x0, 0xffffffbf, -65, x5, 216, x7)

// rs1_val == 1048576, imm_val == -2
// opcode: xori ; op1:x10; dest:x11; op1val:0x00100000;  immval:-2
TEST_IMM_OP( xori, x11, x10, 0xffeffffe, 0x00100000, -2, x5, 220, x7)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
.align 4

signature_x2_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x2_1:
    .fill 22*(XLEN/32),4,0xdeadbeef


signature_x5_0:
    .fill 56*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
