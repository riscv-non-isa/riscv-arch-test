
// -----------
// This file was generated by riscv_ctg (https://gitlab.com/incoresemi/riscv-compliance/riscv_ctg)
// version   : 0.4.0
// timestamp : Fri Dec  4 15:11:13 2020 GMT
// usage     : riscv_ctg \
//                  -- cgf ('/scratch/git-repo/incoresemi/riscv-compliance/riscv_ctg/sample_cgfs/dataset.cgf', '/scratch/git-repo/incoresemi/riscv-compliance/riscv_ctg/sample_cgfs/rv32i.cgf') \
//                  -- xlen 32 \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the sub instruction of the RISC-V I extension for the sub covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32I")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*);def TEST_CASE_1=True;",sub)

RVTEST_SIGBASE( x4,signature_x4_1)

inst_0:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x8, rs2==x7, rd==x28, rs1_val > 0 and rs2_val > 0, rs1_val == 536870912, rs1_val != rs2_val, rs2_val == 2
// opcode: sub ; op1:x8; op2:x7; dest:x28; op1val:0x20000000;  op2val:0x2
TEST_RR_OP(sub, x28, x8, x7, 0x1ffffffe, 0x20000000, 0x2, x4, 0, x23)

inst_1:
// rs2 == rd != rs1, rs1==x26, rs2==x13, rd==x13, rs1_val > 0 and rs2_val < 0, rs1_val == 16777216, rs2_val == -5
// opcode: sub ; op1:x26; op2:x13; dest:x13; op1val:0x1000000;  op2val:-0x5
TEST_RR_OP(sub, x13, x26, x13, 0x1000005, 0x1000000, -0x5, x4, 4, x23)

inst_2:
// rs1 == rd != rs2, rs1==x29, rs2==x5, rd==x29, rs1_val < 0 and rs2_val < 0, rs2_val == -536870913, rs1_val == -65537
// opcode: sub ; op1:x29; op2:x5; dest:x29; op1val:-0x10001;  op2val:-0x20000001
TEST_RR_OP(sub, x29, x29, x5, 0x1fff0000, -0x10001, -0x20000001, x4, 8, x23)

inst_3:
// rs1 == rs2 == rd, rs1==x24, rs2==x24, rd==x24, rs1_val < 0 and rs2_val > 0, rs2_val == 32, rs1_val == -131073
// opcode: sub ; op1:x24; op2:x24; dest:x24; op1val:-0x20001;  op2val:0x20
TEST_RR_OP(sub, x24, x24, x24, 0xfffdffdf, -0x20001, 0x20, x4, 12, x23)

inst_4:
// rs1 == rs2 != rd, rs1==x10, rs2==x10, rd==x5, rs1_val == rs2_val, rs1_val==2 and rs2_val==2, rs1_val == 2
// opcode: sub ; op1:x10; op2:x10; dest:x5; op1val:0x2;  op2val:0x2
TEST_RR_OP(sub, x5, x10, x10, 0x0, 0x2, 0x2, x4, 16, x23)

inst_5:
// rs1==x28, rs2==x17, rd==x27, rs2_val == (-2**(xlen-1)), rs2_val == -2147483648
// opcode: sub ; op1:x28; op2:x17; dest:x27; op1val:0x5;  op2val:-0x80000000
TEST_RR_OP(sub, x27, x28, x17, 0x80000005, 0x5, -0x80000000, x4, 20, x23)

inst_6:
// rs1==x18, rs2==x1, rd==x17, rs2_val == 0, rs1_val==1431655764 and rs2_val==0
// opcode: sub ; op1:x18; op2:x1; dest:x17; op1val:0x55555554;  op2val:0x0
TEST_RR_OP(sub, x17, x18, x1, 0x55555554, 0x55555554, 0x0, x4, 24, x23)

inst_7:
// rs1==x19, rs2==x14, rd==x3, rs2_val == (2**(xlen-1)-1), rs2_val == 2147483647
// opcode: sub ; op1:x19; op2:x14; dest:x3; op1val:0x20000000;  op2val:0x7fffffff
TEST_RR_OP(sub, x3, x19, x14, 0xa0000001, 0x20000000, 0x7fffffff, x4, 28, x23)

inst_8:
// rs1==x14, rs2==x2, rd==x21, rs2_val == 1, 
// opcode: sub ; op1:x14; op2:x2; dest:x21; op1val:0x66666667;  op2val:0x1
TEST_RR_OP(sub, x21, x14, x2, 0x66666666, 0x66666667, 0x1, x4, 32, x23)

inst_9:
// rs1==x5, rs2==x0, rd==x9, rs1_val == (-2**(xlen-1)), rs1_val == -2147483648
// opcode: sub ; op1:x5; op2:x0; dest:x9; op1val:-0x80000000;  op2val:0x3
TEST_RR_OP(sub, x9, x5, x0, 0x7ffffffd, -0x80000000, 0x3, x4, 36, x23)

inst_10:
// rs1==x1, rs2==x19, rd==x6, rs1_val == 0, rs2_val == -32769
// opcode: sub ; op1:x1; op2:x19; dest:x6; op1val:0x0;  op2val:-0x8001
TEST_RR_OP(sub, x6, x1, x19, 0x8001, 0x0, -0x8001, x4, 40, x23)

inst_11:
// rs1==x17, rs2==x11, rd==x18, rs1_val == (2**(xlen-1)-1), rs1_val == 2147483647, rs2_val == 4
// opcode: sub ; op1:x17; op2:x11; dest:x18; op1val:0x7fffffff;  op2val:0x4
TEST_RR_OP(sub, x18, x17, x11, 0x7ffffffb, 0x7fffffff, 0x4, x4, 44, x23)

inst_12:
// rs1==x11, rs2==x8, rd==x19, rs1_val == 1, rs2_val == 64
// opcode: sub ; op1:x11; op2:x8; dest:x19; op1val:0x1;  op2val:0x40
TEST_RR_OP(sub, x19, x11, x8, 0xffffffc1, 0x1, 0x40, x4, 48, x23)

inst_13:
// rs1==x16, rs2==x15, rd==x0, rs2_val == 8, 
// opcode: sub ; op1:x16; op2:x15; dest:x0; op1val:0x7fffffff;  op2val:0x8
TEST_RR_OP(sub, x0, x16, x15, 0x7ffffff7, 0x7fffffff, 0x8, x4, 52, x23)

inst_14:
// rs1==x0, rs2==x31, rd==x14, rs2_val == 16, rs1_val == 256
// opcode: sub ; op1:x0; op2:x31; dest:x14; op1val:0x100;  op2val:0x10
TEST_RR_OP(sub, x14, x0, x31, 0xf0, 0x100, 0x10, x4, 56, x23)

inst_15:
// rs1==x13, rs2==x22, rd==x16, rs2_val == 128, rs1_val == -257
// opcode: sub ; op1:x13; op2:x22; dest:x16; op1val:-0x101;  op2val:0x80
TEST_RR_OP(sub, x16, x13, x22, 0xfffffe7f, -0x101, 0x80, x4, 60, x23)

inst_16:
// rs1==x22, rs2==x28, rd==x8, rs2_val == 256, 
// opcode: sub ; op1:x22; op2:x28; dest:x8; op1val:0x7fffffff;  op2val:0x100
TEST_RR_OP(sub, x8, x22, x28, 0x7ffffeff, 0x7fffffff, 0x100, x4, 64, x23)

inst_17:
// rs1==x15, rs2==x12, rd==x20, rs2_val == 512, 
// opcode: sub ; op1:x15; op2:x12; dest:x20; op1val:-0x10001;  op2val:0x200
TEST_RR_OP(sub, x20, x15, x12, 0xfffefdff, -0x10001, 0x200, x4, 68, x23)

inst_18:
// rs1==x27, rs2==x9, rd==x2, rs2_val == 1024, 
// opcode: sub ; op1:x27; op2:x9; dest:x2; op1val:0x2;  op2val:0x400
TEST_RR_OP(sub, x2, x27, x9, 0xfffffc02, 0x2, 0x400, x4, 72, x13)

inst_19:
// rs1==x30, rs2==x29, rd==x25, rs2_val == 2048, 
// opcode: sub ; op1:x30; op2:x29; dest:x25; op1val:-0x6;  op2val:0x800
TEST_RR_OP(sub, x25, x30, x29, 0xfffff7fa, -0x6, 0x800, x4, 76, x13)
RVTEST_SIGBASE( x5,signature_x5_0)

inst_20:
// rs1==x4, rs2==x18, rd==x22, rs2_val == 4096, rs1_val == -65
// opcode: sub ; op1:x4; op2:x18; dest:x22; op1val:-0x41;  op2val:0x1000
TEST_RR_OP(sub, x22, x4, x18, 0xffffefbf, -0x41, 0x1000, x5, 0, x13)

inst_21:
// rs1==x9, rs2==x16, rd==x12, rs2_val == 8192, 
// opcode: sub ; op1:x9; op2:x16; dest:x12; op1val:-0xb504;  op2val:0x2000
TEST_RR_OP(sub, x12, x9, x16, 0xffff2afc, -0xb504, 0x2000, x5, 4, x13)

inst_22:
// rs1==x21, rs2==x4, rd==x30, rs2_val == 16384, rs1_val == 2048
// opcode: sub ; op1:x21; op2:x4; dest:x30; op1val:0x800;  op2val:0x4000
TEST_RR_OP(sub, x30, x21, x4, 0xffffc800, 0x800, 0x4000, x5, 8, x13)

inst_23:
// rs1==x20, rs2==x23, rd==x10, rs2_val == 32768, 
// opcode: sub ; op1:x20; op2:x23; dest:x10; op1val:0x1000000;  op2val:0x8000
TEST_RR_OP(sub, x10, x20, x23, 0xff8000, 0x1000000, 0x8000, x5, 12, x13)

inst_24:
// rs1==x6, rs2==x26, rd==x1, rs2_val == 65536, rs1_val == -134217729
// opcode: sub ; op1:x6; op2:x26; dest:x1; op1val:-0x8000001;  op2val:0x10000
TEST_RR_OP(sub, x1, x6, x26, 0xf7feffff, -0x8000001, 0x10000, x5, 16, x13)

inst_25:
// rs1==x7, rs2==x21, rd==x23, rs2_val == 131072, rs1_val == -536870913
// opcode: sub ; op1:x7; op2:x21; dest:x23; op1val:-0x20000001;  op2val:0x20000
TEST_RR_OP(sub, x23, x7, x21, 0xdffdffff, -0x20000001, 0x20000, x5, 20, x13)

inst_26:
// rs1==x23, rs2==x6, rd==x7, rs2_val == 262144, 
// opcode: sub ; op1:x23; op2:x6; dest:x7; op1val:0x66666665;  op2val:0x40000
TEST_RR_OP(sub, x7, x23, x6, 0x66626665, 0x66666665, 0x40000, x5, 24, x13)

inst_27:
// rs1==x25, rs2==x20, rd==x4, rs2_val == 524288, rs1_val == 134217728
// opcode: sub ; op1:x25; op2:x20; dest:x4; op1val:0x8000000;  op2val:0x80000
TEST_RR_OP(sub, x4, x25, x20, 0x7f80000, 0x8000000, 0x80000, x5, 28, x13)

inst_28:
// rs1==x12, rs2==x27, rd==x11, rs2_val == 1048576, 
// opcode: sub ; op1:x12; op2:x27; dest:x11; op1val:-0x40000000;  op2val:0x100000
TEST_RR_OP(sub, x11, x12, x27, 0xbff00000, -0x40000000, 0x100000, x5, 32, x13)

inst_29:
// rs1==x3, rs2==x30, rd==x15, rs2_val == 2097152, 
// opcode: sub ; op1:x3; op2:x30; dest:x15; op1val:0x20000000;  op2val:0x200000
TEST_RR_OP(sub, x15, x3, x30, 0x1fe00000, 0x20000000, 0x200000, x5, 36, x13)

inst_30:
// rs1==x2, rs2==x25, rd==x26, rs2_val == 4194304, rs1_val == -67108865
// opcode: sub ; op1:x2; op2:x25; dest:x26; op1val:-0x4000001;  op2val:0x400000
TEST_RR_OP(sub, x26, x2, x25, 0xfbbfffff, -0x4000001, 0x400000, x5, 40, x13)

inst_31:
// rs1==x31, rs2_val == 8388608, rs1_val == -33554433
// opcode: sub ; op1:x31; op2:x8; dest:x7; op1val:-0x2000001;  op2val:0x800000
TEST_RR_OP(sub, x7, x31, x8, 0xfd7fffff, -0x2000001, 0x800000, x5, 44, x13)

inst_32:
// rs2==x3, rs2_val == 16777216, rs1_val == -2
// opcode: sub ; op1:x2; op2:x3; dest:x31; op1val:-0x2;  op2val:0x1000000
TEST_RR_OP(sub, x31, x2, x3, 0xfefffffe, -0x2, 0x1000000, x5, 48, x13)

inst_33:
// rs2_val == 33554432, rs1_val == -268435457
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-0x10000001;  op2val:0x2000000
TEST_RR_OP(sub, x12, x10, x11, 0xedffffff, -0x10000001, 0x2000000, x5, 52, x13)

inst_34:
// rs2_val == 67108864, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-0x4000001;  op2val:0x4000000
TEST_RR_OP(sub, x12, x10, x11, 0xf7ffffff, -0x4000001, 0x4000000, x5, 56, x13)

inst_35:
// rs2_val == 134217728, rs1_val == 16
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x10;  op2val:0x8000000
TEST_RR_OP(sub, x12, x10, x11, 0xf8000010, 0x10, 0x8000000, x5, 60, x13)

inst_36:
// rs2_val == 268435456, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x20000000;  op2val:0x10000000
TEST_RR_OP(sub, x12, x10, x11, 0x10000000, 0x20000000, 0x10000000, x5, 64, x13)

inst_37:
// rs2_val == 536870912, rs1_val == -4194305
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-0x400001;  op2val:0x20000000
TEST_RR_OP(sub, x12, x10, x11, 0xdfbfffff, -0x400001, 0x20000000, x5, 68, x13)

inst_38:
// rs2_val == 1073741824, rs1_val == -16777217
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-0x1000001;  op2val:0x40000000
TEST_RR_OP(sub, x12, x10, x11, 0xbeffffff, -0x1000001, 0x40000000, x5, 72, x13)

inst_39:
// rs2_val == -2, rs1_val == -262145
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-0x40001;  op2val:-0x2
TEST_RR_OP(sub, x12, x10, x11, 0xfffc0001, -0x40001, -0x2, x5, 76, x13)

inst_40:
// rs2_val == -3, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-0xb504;  op2val:-0x3
TEST_RR_OP(sub, x12, x10, x11, 0xffff4aff, -0xb504, -0x3, x5, 80, x13)

inst_41:
// rs2_val == -9, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x6;  op2val:-0x9
TEST_RR_OP(sub, x12, x10, x11, 0xf, 0x6, -0x9, x5, 84, x13)

inst_42:
// rs2_val == -17, rs1_val == 268435456
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x10000000;  op2val:-0x11
TEST_RR_OP(sub, x12, x10, x11, 0x10000011, 0x10000000, -0x11, x5, 88, x13)

inst_43:
// rs2_val == -33, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x2;  op2val:-0x21
TEST_RR_OP(sub, x12, x10, x11, 0x23, 0x2, -0x21, x5, 92, x13)

inst_44:
// rs2_val == -65, rs1_val == 16384
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x4000;  op2val:-0x41
TEST_RR_OP(sub, x12, x10, x11, 0x4041, 0x4000, -0x41, x5, 96, x13)

inst_45:
// rs2_val == -129, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-0x6;  op2val:-0x81
TEST_RR_OP(sub, x12, x10, x11, 0x7b, -0x6, -0x81, x5, 100, x13)

inst_46:
// rs2_val == -257, rs1_val == -32769
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-0x8001;  op2val:-0x101
TEST_RR_OP(sub, x12, x10, x11, 0xffff8100, -0x8001, -0x101, x5, 104, x13)

inst_47:
// rs2_val == -513, rs1_val == -16385
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-0x4001;  op2val:-0x201
TEST_RR_OP(sub, x12, x10, x11, 0xffffc200, -0x4001, -0x201, x5, 108, x13)

inst_48:
// rs2_val == -1025, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-0x4000001;  op2val:-0x401
TEST_RR_OP(sub, x12, x10, x11, 0xfc000400, -0x4000001, -0x401, x5, 112, x13)

inst_49:
// rs2_val == -2049, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-0x55555555;  op2val:-0x801
TEST_RR_OP(sub, x12, x10, x11, 0xaaaab2ac, -0x55555555, -0x801, x5, 116, x13)

inst_50:
// rs2_val == -4097, rs1_val == 512
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x200;  op2val:-0x1001
TEST_RR_OP(sub, x12, x10, x11, 0x1201, 0x200, -0x1001, x5, 120, x13)

inst_51:
// rs2_val == -8193, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x5;  op2val:-0x2001
TEST_RR_OP(sub, x12, x10, x11, 0x2006, 0x5, -0x2001, x5, 124, x13)

inst_52:
// rs2_val == -16385, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x3;  op2val:-0x4001
TEST_RR_OP(sub, x12, x10, x11, 0x4004, 0x3, -0x4001, x5, 128, x13)

inst_53:
// rs2_val == -65537, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0xb504;  op2val:-0x10001
TEST_RR_OP(sub, x12, x10, x11, 0x1b505, 0xb504, -0x10001, x5, 132, x13)

inst_54:
// rs2_val == -131073, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x800;  op2val:-0x20001
TEST_RR_OP(sub, x12, x10, x11, 0x20801, 0x800, -0x20001, x5, 136, x13)

inst_55:
// rs2_val == -262145, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0xb504;  op2val:-0x40001
TEST_RR_OP(sub, x12, x10, x11, 0x4b505, 0xb504, -0x40001, x5, 140, x13)

inst_56:
// rs2_val == -524289, rs1_val == 1073741824
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x40000000;  op2val:-0x80001
TEST_RR_OP(sub, x12, x10, x11, 0x40080001, 0x40000000, -0x80001, x5, 144, x13)

inst_57:
// rs2_val == -1048577, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-0x1000001;  op2val:-0x100001
TEST_RR_OP(sub, x12, x10, x11, 0xff100000, -0x1000001, -0x100001, x5, 148, x13)

inst_58:
// rs2_val == -2097153, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x2;  op2val:-0x200001
TEST_RR_OP(sub, x12, x10, x11, 0x200003, 0x2, -0x200001, x5, 152, x13)

inst_59:
// rs2_val == -4194305, rs1_val == -513
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-0x201;  op2val:-0x400001
TEST_RR_OP(sub, x12, x10, x11, 0x3ffe00, -0x201, -0x400001, x5, 156, x13)

inst_60:
// rs2_val == -8388609, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x33333332;  op2val:-0x800001
TEST_RR_OP(sub, x12, x10, x11, 0x33b33333, 0x33333332, -0x800001, x5, 160, x13)

inst_61:
// rs2_val == -16777217, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-0x40000000;  op2val:-0x1000001
TEST_RR_OP(sub, x12, x10, x11, 0xc1000001, -0x40000000, -0x1000001, x5, 164, x13)

inst_62:
// rs2_val == -33554433, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x66666665;  op2val:-0x2000001
TEST_RR_OP(sub, x12, x10, x11, 0x68666666, 0x66666665, -0x2000001, x5, 168, x13)

inst_63:
// rs2_val == -67108865, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-0x101;  op2val:-0x4000001
TEST_RR_OP(sub, x12, x10, x11, 0x3ffff00, -0x101, -0x4000001, x5, 172, x13)

inst_64:
// rs2_val == -134217729, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x40000000;  op2val:-0x8000001
TEST_RR_OP(sub, x12, x10, x11, 0x48000001, 0x40000000, -0x8000001, x5, 176, x13)

inst_65:
// rs2_val == -268435457, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x4000;  op2val:-0x10000001
TEST_RR_OP(sub, x12, x10, x11, 0x10004001, 0x4000, -0x10000001, x5, 180, x13)

inst_66:
// rs2_val == -1073741825, rs1_val == 4
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x4;  op2val:-0x40000001
TEST_RR_OP(sub, x12, x10, x11, 0x40000005, 0x4, -0x40000001, x5, 184, x13)

inst_67:
// rs2_val == 1431655765, rs1_val == -17
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-0x11;  op2val:0x55555555
TEST_RR_OP(sub, x12, x10, x11, 0xaaaaaa9a, -0x11, 0x55555555, x5, 188, x13)

inst_68:
// rs2_val == -1431655766, rs1_val==-1431655765 and rs2_val==-1431655766
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-0x55555555;  op2val:-0x55555556
TEST_RR_OP(sub, x12, x10, x11, 0x1, -0x55555555, -0x55555556, x5, 192, x13)

inst_69:
// rs1_val == 8, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x8;  op2val:-0x8
TEST_RR_OP(sub, x12, x10, x11, 0x10, 0x8, -0x8, x5, 196, x13)

inst_70:
// rs1_val == 32, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x20;  op2val:-0x1001
TEST_RR_OP(sub, x12, x10, x11, 0x1021, 0x20, -0x1001, x5, 200, x13)

inst_71:
// rs1_val == 64, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x40;  op2val:0x66666667
TEST_RR_OP(sub, x12, x10, x11, 0x999999d9, 0x40, 0x66666667, x5, 204, x13)

inst_72:
// rs1_val == 128, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x80;  op2val:-0x55555555
TEST_RR_OP(sub, x12, x10, x11, 0x555555d5, 0x80, -0x55555555, x5, 208, x13)

inst_73:
// rs1_val == 1024, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x400;  op2val:0x20000
TEST_RR_OP(sub, x12, x10, x11, 0xfffe0400, 0x400, 0x20000, x5, 212, x13)

inst_74:
// rs1_val == 4096, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x1000;  op2val:0x100000
TEST_RR_OP(sub, x12, x10, x11, 0xfff01000, 0x1000, 0x100000, x5, 216, x13)

inst_75:
// rs1_val == 8192, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x2000;  op2val:-0x1001
TEST_RR_OP(sub, x12, x10, x11, 0x3001, 0x2000, -0x1001, x5, 220, x13)

inst_76:
// rs1_val == 32768, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x8000;  op2val:0xb503
TEST_RR_OP(sub, x12, x10, x11, 0xffffcafd, 0x8000, 0xb503, x5, 224, x13)

inst_77:
// rs1_val == 65536, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x10000;  op2val:0x55555555
TEST_RR_OP(sub, x12, x10, x11, 0xaaabaaab, 0x10000, 0x55555555, x5, 228, x13)

inst_78:
// rs1_val == 131072, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x20000;  op2val:0x200
TEST_RR_OP(sub, x12, x10, x11, 0x1fe00, 0x20000, 0x200, x5, 232, x13)

inst_79:
// rs1_val == 262144, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x40000;  op2val:0xb503
TEST_RR_OP(sub, x12, x10, x11, 0x34afd, 0x40000, 0xb503, x5, 236, x13)

inst_80:
// rs1_val == 524288, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x80000;  op2val:-0x55555556
TEST_RR_OP(sub, x12, x10, x11, 0x555d5556, 0x80000, -0x55555556, x5, 240, x13)

inst_81:
// rs1_val == 1048576, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x100000;  op2val:-0x400001
TEST_RR_OP(sub, x12, x10, x11, 0x500001, 0x100000, -0x400001, x5, 244, x13)

inst_82:
// rs1_val == 2097152, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x200000;  op2val:0x3
TEST_RR_OP(sub, x12, x10, x11, 0x1ffffd, 0x200000, 0x3, x5, 248, x13)

inst_83:
// rs1_val == 4194304, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x400000;  op2val:0x2
TEST_RR_OP(sub, x12, x10, x11, 0x3ffffe, 0x400000, 0x2, x5, 252, x13)

inst_84:
// rs1_val == 8388608, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x800000;  op2val:-0x8001
TEST_RR_OP(sub, x12, x10, x11, 0x808001, 0x800000, -0x8001, x5, 256, x13)

inst_85:
// rs1_val == 33554432, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x2000000;  op2val:0x33333332
TEST_RR_OP(sub, x12, x10, x11, 0xceccccce, 0x2000000, 0x33333332, x5, 260, x13)

inst_86:
// rs1_val == 67108864, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x4000000;  op2val:-0x101
TEST_RR_OP(sub, x12, x10, x11, 0x4000101, 0x4000000, -0x101, x5, 264, x13)

inst_87:
// rs1_val == -3, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-0x3;  op2val:0x0
TEST_RR_OP(sub, x12, x10, x11, 0xfffffffd, -0x3, 0x0, x5, 268, x13)

inst_88:
// rs1_val == -5, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-0x5;  op2val:0x6
TEST_RR_OP(sub, x12, x10, x11, 0xfffffff5, -0x5, 0x6, x5, 272, x13)

inst_89:
// rs1_val == -9, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-0x9;  op2val:-0x801
TEST_RR_OP(sub, x12, x10, x11, 0x7f8, -0x9, -0x801, x5, 276, x13)

inst_90:
// rs1_val == -33, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-0x21;  op2val:0x3
TEST_RR_OP(sub, x12, x10, x11, 0xffffffdc, -0x21, 0x3, x5, 280, x13)

inst_91:
// rs1_val == -129, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-0x81;  op2val:-0x20000001
TEST_RR_OP(sub, x12, x10, x11, 0x1fffff80, -0x81, -0x20000001, x5, 284, x13)

inst_92:
// rs1_val == -1025, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-0x401;  op2val:0x33333332
TEST_RR_OP(sub, x12, x10, x11, 0xccccc8cd, -0x401, 0x33333332, x5, 288, x13)

inst_93:
// rs1_val == -2049, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-0x801;  op2val:0x8
TEST_RR_OP(sub, x12, x10, x11, 0xfffff7f7, -0x801, 0x8, x5, 292, x13)

inst_94:
// rs1_val == -4097, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-0x1001;  op2val:0x4
TEST_RR_OP(sub, x12, x10, x11, 0xffffeffb, -0x1001, 0x4, x5, 296, x13)

inst_95:
// rs1_val == -8193, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-0x2001;  op2val:-0x8
TEST_RR_OP(sub, x12, x10, x11, 0xffffe007, -0x2001, -0x8, x5, 300, x13)

inst_96:
// rs1_val == -524289, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-0x80001;  op2val:-0xb504
TEST_RR_OP(sub, x12, x10, x11, 0xfff8b503, -0x80001, -0xb504, x5, 304, x13)

inst_97:
// rs1_val == -1048577, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-0x100001;  op2val:-0x55555555
TEST_RR_OP(sub, x12, x10, x11, 0x55455554, -0x100001, -0x55555555, x5, 308, x13)

inst_98:
// rs1_val == -2097153, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-0x200001;  op2val:0x66666666
TEST_RR_OP(sub, x12, x10, x11, 0x99799999, -0x200001, 0x66666666, x5, 312, x13)

inst_99:
// rs1_val == -8388609, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-0x800001;  op2val:0x10
TEST_RR_OP(sub, x12, x10, x11, 0xff7fffef, -0x800001, 0x10, x5, 316, x13)

inst_100:
// rs1_val == -1073741825, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-0x40000001;  op2val:0x55555555
TEST_RR_OP(sub, x12, x10, x11, 0x6aaaaaaa, -0x40000001, 0x55555555, x5, 320, x13)

inst_101:
// rs1_val == 1431655765, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x55555555;  op2val:-0x4000001
TEST_RR_OP(sub, x12, x10, x11, 0x59555556, 0x55555555, -0x4000001, x5, 324, x13)

inst_102:
// rs1_val == -1431655766, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-0x55555556;  op2val:0x10000000
TEST_RR_OP(sub, x12, x10, x11, 0x9aaaaaaa, -0x55555556, 0x10000000, x5, 328, x13)

inst_103:
// rs1_val==3 and rs2_val==3, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x3;  op2val:0x3
TEST_RR_OP(sub, x12, x10, x11, 0x0, 0x3, 0x3, x5, 332, x13)

inst_104:
// rs1_val==3 and rs2_val==1431655765, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x3;  op2val:0x55555555
TEST_RR_OP(sub, x12, x10, x11, 0xaaaaaaae, 0x3, 0x55555555, x5, 336, x13)

inst_105:
// rs1_val==3 and rs2_val==-1431655766, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x3;  op2val:-0x55555556
TEST_RR_OP(sub, x12, x10, x11, 0x55555559, 0x3, -0x55555556, x5, 340, x13)

inst_106:
// rs1_val==3 and rs2_val==5, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x3;  op2val:0x5
TEST_RR_OP(sub, x12, x10, x11, 0xfffffffe, 0x3, 0x5, x5, 344, x13)

inst_107:
// rs1_val==3 and rs2_val==858993459, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x3;  op2val:0x33333333
TEST_RR_OP(sub, x12, x10, x11, 0xccccccd0, 0x3, 0x33333333, x5, 348, x13)

inst_108:
// rs1_val==3 and rs2_val==1717986918, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x3;  op2val:0x66666666
TEST_RR_OP(sub, x12, x10, x11, 0x9999999d, 0x3, 0x66666666, x5, 352, x13)

inst_109:
// rs1_val==3 and rs2_val==-46340, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x3;  op2val:-0xb504
TEST_RR_OP(sub, x12, x10, x11, 0xb507, 0x3, -0xb504, x5, 356, x13)

inst_110:
// rs1_val==3 and rs2_val==46340, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x3;  op2val:0xb504
TEST_RR_OP(sub, x12, x10, x11, 0xffff4aff, 0x3, 0xb504, x5, 360, x13)

inst_111:
// rs1_val==3 and rs2_val==2, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x3;  op2val:0x2
TEST_RR_OP(sub, x12, x10, x11, 0x1, 0x3, 0x2, x5, 364, x13)

inst_112:
// rs1_val==3 and rs2_val==1431655764, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x3;  op2val:0x55555554
TEST_RR_OP(sub, x12, x10, x11, 0xaaaaaaaf, 0x3, 0x55555554, x5, 368, x13)

inst_113:
// rs1_val==3 and rs2_val==0, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x3;  op2val:0x0
TEST_RR_OP(sub, x12, x10, x11, 0x3, 0x3, 0x0, x5, 372, x13)

inst_114:
// rs1_val==3 and rs2_val==4, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x3;  op2val:0x4
TEST_RR_OP(sub, x12, x10, x11, 0xffffffff, 0x3, 0x4, x5, 376, x13)

inst_115:
// rs1_val==3 and rs2_val==858993458, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x3;  op2val:0x33333332
TEST_RR_OP(sub, x12, x10, x11, 0xccccccd1, 0x3, 0x33333332, x5, 380, x13)

inst_116:
// rs1_val==3 and rs2_val==1717986917, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x3;  op2val:0x66666665
TEST_RR_OP(sub, x12, x10, x11, 0x9999999e, 0x3, 0x66666665, x5, 384, x13)

inst_117:
// rs1_val==3 and rs2_val==46339, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x3;  op2val:0xb503
TEST_RR_OP(sub, x12, x10, x11, 0xffff4b00, 0x3, 0xb503, x5, 388, x13)

inst_118:
// rs1_val==3 and rs2_val==1431655766, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x3;  op2val:0x55555556
TEST_RR_OP(sub, x12, x10, x11, 0xaaaaaaad, 0x3, 0x55555556, x5, 392, x13)

inst_119:
// rs1_val==3 and rs2_val==-1431655765, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x3;  op2val:-0x55555555
TEST_RR_OP(sub, x12, x10, x11, 0x55555558, 0x3, -0x55555555, x5, 396, x13)

inst_120:
// rs1_val==3 and rs2_val==6, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x3;  op2val:0x6
TEST_RR_OP(sub, x12, x10, x11, 0xfffffffd, 0x3, 0x6, x5, 400, x13)

inst_121:
// rs1_val==3 and rs2_val==858993460, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x3;  op2val:0x33333334
TEST_RR_OP(sub, x12, x10, x11, 0xcccccccf, 0x3, 0x33333334, x5, 404, x13)

inst_122:
// rs1_val==3 and rs2_val==1717986919, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x3;  op2val:0x66666667
TEST_RR_OP(sub, x12, x10, x11, 0x9999999c, 0x3, 0x66666667, x5, 408, x13)

inst_123:
// rs1_val==3 and rs2_val==-46339, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x3;  op2val:-0xb503
TEST_RR_OP(sub, x12, x10, x11, 0xb506, 0x3, -0xb503, x5, 412, x13)

inst_124:
// rs1_val==3 and rs2_val==46341, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x3;  op2val:0xb505
TEST_RR_OP(sub, x12, x10, x11, 0xffff4afe, 0x3, 0xb505, x5, 416, x13)

inst_125:
// rs1_val==1431655765 and rs2_val==3, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x55555555;  op2val:0x3
TEST_RR_OP(sub, x12, x10, x11, 0x55555552, 0x55555555, 0x3, x5, 420, x13)

inst_126:
// rs1_val==1431655765 and rs2_val==1431655765, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x55555555;  op2val:0x55555555
TEST_RR_OP(sub, x12, x10, x11, 0x0, 0x55555555, 0x55555555, x5, 424, x13)

inst_127:
// rs1_val==1431655765 and rs2_val==-1431655766, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x55555555;  op2val:-0x55555556
TEST_RR_OP(sub, x12, x10, x11, 0xaaaaaaab, 0x55555555, -0x55555556, x5, 428, x13)

inst_128:
// rs1_val==1431655765 and rs2_val==5, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x55555555;  op2val:0x5
TEST_RR_OP(sub, x12, x10, x11, 0x55555550, 0x55555555, 0x5, x5, 432, x13)

inst_129:
// rs1_val==1431655765 and rs2_val==858993459, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x55555555;  op2val:0x33333333
TEST_RR_OP(sub, x12, x10, x11, 0x22222222, 0x55555555, 0x33333333, x5, 436, x13)

inst_130:
// rs1_val==1431655765 and rs2_val==1717986918, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x55555555;  op2val:0x66666666
TEST_RR_OP(sub, x12, x10, x11, 0xeeeeeeef, 0x55555555, 0x66666666, x5, 440, x13)

inst_131:
// rs1_val==1431655765 and rs2_val==-46340, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x55555555;  op2val:-0xb504
TEST_RR_OP(sub, x12, x10, x11, 0x55560a59, 0x55555555, -0xb504, x5, 444, x13)

inst_132:
// rs1_val==1431655765 and rs2_val==46340, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x55555555;  op2val:0xb504
TEST_RR_OP(sub, x12, x10, x11, 0x5554a051, 0x55555555, 0xb504, x5, 448, x13)

inst_133:
// rs1_val==1431655765 and rs2_val==2, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x55555555;  op2val:0x2
TEST_RR_OP(sub, x12, x10, x11, 0x55555553, 0x55555555, 0x2, x5, 452, x13)

inst_134:
// rs1_val==1431655765 and rs2_val==1431655764, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x55555555;  op2val:0x55555554
TEST_RR_OP(sub, x12, x10, x11, 0x1, 0x55555555, 0x55555554, x5, 456, x13)

inst_135:
// rs1_val==1431655765 and rs2_val==0, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x55555555;  op2val:0x0
TEST_RR_OP(sub, x12, x10, x11, 0x55555555, 0x55555555, 0x0, x5, 460, x13)

inst_136:
// rs1_val==1431655765 and rs2_val==4, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x55555555;  op2val:0x4
TEST_RR_OP(sub, x12, x10, x11, 0x55555551, 0x55555555, 0x4, x5, 464, x13)

inst_137:
// rs1_val==1431655765 and rs2_val==858993458, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x55555555;  op2val:0x33333332
TEST_RR_OP(sub, x12, x10, x11, 0x22222223, 0x55555555, 0x33333332, x5, 468, x13)

inst_138:
// rs1_val==1431655765 and rs2_val==1717986917, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x55555555;  op2val:0x66666665
TEST_RR_OP(sub, x12, x10, x11, 0xeeeeeef0, 0x55555555, 0x66666665, x5, 472, x13)

inst_139:
// rs1_val==1431655765 and rs2_val==46339, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x55555555;  op2val:0xb503
TEST_RR_OP(sub, x12, x10, x11, 0x5554a052, 0x55555555, 0xb503, x5, 476, x13)

inst_140:
// rs1_val==1431655765 and rs2_val==1431655766, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x55555555;  op2val:0x55555556
TEST_RR_OP(sub, x12, x10, x11, 0xffffffff, 0x55555555, 0x55555556, x5, 480, x13)

inst_141:
// rs1_val==1431655765 and rs2_val==-1431655765, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x55555555;  op2val:-0x55555555
TEST_RR_OP(sub, x12, x10, x11, 0xaaaaaaaa, 0x55555555, -0x55555555, x5, 484, x13)

inst_142:
// rs1_val==1431655765 and rs2_val==6, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x55555555;  op2val:0x6
TEST_RR_OP(sub, x12, x10, x11, 0x5555554f, 0x55555555, 0x6, x5, 488, x13)

inst_143:
// rs1_val==1431655765 and rs2_val==858993460, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x55555555;  op2val:0x33333334
TEST_RR_OP(sub, x12, x10, x11, 0x22222221, 0x55555555, 0x33333334, x5, 492, x13)

inst_144:
// rs1_val==1431655765 and rs2_val==1717986919, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x55555555;  op2val:0x66666667
TEST_RR_OP(sub, x12, x10, x11, 0xeeeeeeee, 0x55555555, 0x66666667, x5, 496, x13)

inst_145:
// rs1_val==1431655765 and rs2_val==-46339, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x55555555;  op2val:-0xb503
TEST_RR_OP(sub, x12, x10, x11, 0x55560a58, 0x55555555, -0xb503, x5, 500, x13)

inst_146:
// rs1_val==1431655765 and rs2_val==46341, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x55555555;  op2val:0xb505
TEST_RR_OP(sub, x12, x10, x11, 0x5554a050, 0x55555555, 0xb505, x5, 504, x13)

inst_147:
// rs1_val==-1431655766 and rs2_val==3, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-0x55555556;  op2val:0x3
TEST_RR_OP(sub, x12, x10, x11, 0xaaaaaaa7, -0x55555556, 0x3, x5, 508, x13)

inst_148:
// rs1_val==-1431655766 and rs2_val==1431655765, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-0x55555556;  op2val:0x55555555
TEST_RR_OP(sub, x12, x10, x11, 0x55555555, -0x55555556, 0x55555555, x5, 512, x13)

inst_149:
// rs1_val==-1431655766 and rs2_val==-1431655766, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-0x55555556;  op2val:-0x55555556
TEST_RR_OP(sub, x12, x10, x11, 0x0, -0x55555556, -0x55555556, x5, 516, x13)

inst_150:
// rs1_val==-1431655766 and rs2_val==5, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-0x55555556;  op2val:0x5
TEST_RR_OP(sub, x12, x10, x11, 0xaaaaaaa5, -0x55555556, 0x5, x5, 520, x13)

inst_151:
// rs1_val==-1431655766 and rs2_val==858993459, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-0x55555556;  op2val:0x33333333
TEST_RR_OP(sub, x12, x10, x11, 0x77777777, -0x55555556, 0x33333333, x5, 524, x13)

inst_152:
// rs1_val==-1431655766 and rs2_val==1717986918, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-0x55555556;  op2val:0x66666666
TEST_RR_OP(sub, x12, x10, x11, 0x44444444, -0x55555556, 0x66666666, x5, 528, x13)

inst_153:
// rs1_val==-1431655766 and rs2_val==-46340, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-0x55555556;  op2val:-0xb504
TEST_RR_OP(sub, x12, x10, x11, 0xaaab5fae, -0x55555556, -0xb504, x5, 532, x13)

inst_154:
// rs1_val==-1431655766 and rs2_val==46340, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-0x55555556;  op2val:0xb504
TEST_RR_OP(sub, x12, x10, x11, 0xaaa9f5a6, -0x55555556, 0xb504, x5, 536, x13)

inst_155:
// rs1_val==-1431655766 and rs2_val==2, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-0x55555556;  op2val:0x2
TEST_RR_OP(sub, x12, x10, x11, 0xaaaaaaa8, -0x55555556, 0x2, x5, 540, x13)

inst_156:
// rs1_val==-1431655766 and rs2_val==1431655764, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-0x55555556;  op2val:0x55555554
TEST_RR_OP(sub, x12, x10, x11, 0x55555556, -0x55555556, 0x55555554, x5, 544, x13)

inst_157:
// rs1_val==-1431655766 and rs2_val==0, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-0x55555556;  op2val:0x0
TEST_RR_OP(sub, x12, x10, x11, 0xaaaaaaaa, -0x55555556, 0x0, x5, 548, x13)

inst_158:
// rs1_val==-1431655766 and rs2_val==4, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-0x55555556;  op2val:0x4
TEST_RR_OP(sub, x12, x10, x11, 0xaaaaaaa6, -0x55555556, 0x4, x5, 552, x13)

inst_159:
// rs1_val==-1431655766 and rs2_val==858993458, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-0x55555556;  op2val:0x33333332
TEST_RR_OP(sub, x12, x10, x11, 0x77777778, -0x55555556, 0x33333332, x5, 556, x13)

inst_160:
// rs1_val==-1431655766 and rs2_val==1717986917, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-0x55555556;  op2val:0x66666665
TEST_RR_OP(sub, x12, x10, x11, 0x44444445, -0x55555556, 0x66666665, x5, 560, x13)

inst_161:
// rs1_val==-1431655766 and rs2_val==46339, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-0x55555556;  op2val:0xb503
TEST_RR_OP(sub, x12, x10, x11, 0xaaa9f5a7, -0x55555556, 0xb503, x5, 564, x13)

inst_162:
// rs1_val==-1431655766 and rs2_val==1431655766, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-0x55555556;  op2val:0x55555556
TEST_RR_OP(sub, x12, x10, x11, 0x55555554, -0x55555556, 0x55555556, x5, 568, x13)

inst_163:
// rs1_val==-1431655766 and rs2_val==-1431655765, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-0x55555556;  op2val:-0x55555555
TEST_RR_OP(sub, x12, x10, x11, 0xffffffff, -0x55555556, -0x55555555, x5, 572, x13)

inst_164:
// rs1_val==-1431655766 and rs2_val==6, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-0x55555556;  op2val:0x6
TEST_RR_OP(sub, x12, x10, x11, 0xaaaaaaa4, -0x55555556, 0x6, x5, 576, x13)

inst_165:
// rs1_val==-1431655766 and rs2_val==858993460, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-0x55555556;  op2val:0x33333334
TEST_RR_OP(sub, x12, x10, x11, 0x77777776, -0x55555556, 0x33333334, x5, 580, x13)

inst_166:
// rs1_val==-1431655766 and rs2_val==1717986919, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-0x55555556;  op2val:0x66666667
TEST_RR_OP(sub, x12, x10, x11, 0x44444443, -0x55555556, 0x66666667, x5, 584, x13)

inst_167:
// rs1_val==-1431655766 and rs2_val==-46339, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-0x55555556;  op2val:-0xb503
TEST_RR_OP(sub, x12, x10, x11, 0xaaab5fad, -0x55555556, -0xb503, x5, 588, x13)

inst_168:
// rs1_val==-1431655766 and rs2_val==46341, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-0x55555556;  op2val:0xb505
TEST_RR_OP(sub, x12, x10, x11, 0xaaa9f5a5, -0x55555556, 0xb505, x5, 592, x13)

inst_169:
// rs1_val==5 and rs2_val==3, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x5;  op2val:0x3
TEST_RR_OP(sub, x12, x10, x11, 0x2, 0x5, 0x3, x5, 596, x13)

inst_170:
// rs1_val==5 and rs2_val==1431655765, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x5;  op2val:0x55555555
TEST_RR_OP(sub, x12, x10, x11, 0xaaaaaab0, 0x5, 0x55555555, x5, 600, x13)

inst_171:
// rs1_val==5 and rs2_val==-1431655766, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x5;  op2val:-0x55555556
TEST_RR_OP(sub, x12, x10, x11, 0x5555555b, 0x5, -0x55555556, x5, 604, x13)

inst_172:
// rs1_val==5 and rs2_val==5, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x5;  op2val:0x5
TEST_RR_OP(sub, x12, x10, x11, 0x0, 0x5, 0x5, x5, 608, x13)

inst_173:
// rs1_val==5 and rs2_val==858993459, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x5;  op2val:0x33333333
TEST_RR_OP(sub, x12, x10, x11, 0xccccccd2, 0x5, 0x33333333, x5, 612, x13)

inst_174:
// rs1_val==5 and rs2_val==1717986918, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x5;  op2val:0x66666666
TEST_RR_OP(sub, x12, x10, x11, 0x9999999f, 0x5, 0x66666666, x5, 616, x13)

inst_175:
// rs1_val==5 and rs2_val==-46340, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x5;  op2val:-0xb504
TEST_RR_OP(sub, x12, x10, x11, 0xb509, 0x5, -0xb504, x5, 620, x13)

inst_176:
// rs1_val==5 and rs2_val==46340, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x5;  op2val:0xb504
TEST_RR_OP(sub, x12, x10, x11, 0xffff4b01, 0x5, 0xb504, x5, 624, x13)

inst_177:
// rs1_val==5 and rs2_val==2, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x5;  op2val:0x2
TEST_RR_OP(sub, x12, x10, x11, 0x3, 0x5, 0x2, x5, 628, x13)

inst_178:
// rs1_val==5 and rs2_val==1431655764, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x5;  op2val:0x55555554
TEST_RR_OP(sub, x12, x10, x11, 0xaaaaaab1, 0x5, 0x55555554, x5, 632, x13)

inst_179:
// rs1_val==5 and rs2_val==0, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x5;  op2val:0x0
TEST_RR_OP(sub, x12, x10, x11, 0x5, 0x5, 0x0, x5, 636, x13)

inst_180:
// rs1_val==5 and rs2_val==4, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x5;  op2val:0x4
TEST_RR_OP(sub, x12, x10, x11, 0x1, 0x5, 0x4, x5, 640, x13)

inst_181:
// rs1_val==5 and rs2_val==858993458, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x5;  op2val:0x33333332
TEST_RR_OP(sub, x12, x10, x11, 0xccccccd3, 0x5, 0x33333332, x5, 644, x13)

inst_182:
// rs1_val==5 and rs2_val==1717986917, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x5;  op2val:0x66666665
TEST_RR_OP(sub, x12, x10, x11, 0x999999a0, 0x5, 0x66666665, x5, 648, x13)

inst_183:
// rs1_val==5 and rs2_val==46339, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x5;  op2val:0xb503
TEST_RR_OP(sub, x12, x10, x11, 0xffff4b02, 0x5, 0xb503, x5, 652, x13)

inst_184:
// rs1_val==5 and rs2_val==1431655766, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x5;  op2val:0x55555556
TEST_RR_OP(sub, x12, x10, x11, 0xaaaaaaaf, 0x5, 0x55555556, x5, 656, x13)

inst_185:
// rs1_val==5 and rs2_val==-1431655765, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x5;  op2val:-0x55555555
TEST_RR_OP(sub, x12, x10, x11, 0x5555555a, 0x5, -0x55555555, x5, 660, x13)

inst_186:
// rs1_val==5 and rs2_val==6, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x5;  op2val:0x6
TEST_RR_OP(sub, x12, x10, x11, 0xffffffff, 0x5, 0x6, x5, 664, x13)

inst_187:
// rs1_val==5 and rs2_val==858993460, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x5;  op2val:0x33333334
TEST_RR_OP(sub, x12, x10, x11, 0xccccccd1, 0x5, 0x33333334, x5, 668, x13)

inst_188:
// rs1_val==5 and rs2_val==1717986919, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x5;  op2val:0x66666667
TEST_RR_OP(sub, x12, x10, x11, 0x9999999e, 0x5, 0x66666667, x5, 672, x13)

inst_189:
// rs1_val==5 and rs2_val==-46339, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x5;  op2val:-0xb503
TEST_RR_OP(sub, x12, x10, x11, 0xb508, 0x5, -0xb503, x5, 676, x13)

inst_190:
// rs1_val==5 and rs2_val==46341, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x5;  op2val:0xb505
TEST_RR_OP(sub, x12, x10, x11, 0xffff4b00, 0x5, 0xb505, x5, 680, x13)

inst_191:
// rs1_val==858993459 and rs2_val==3, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x33333333;  op2val:0x3
TEST_RR_OP(sub, x12, x10, x11, 0x33333330, 0x33333333, 0x3, x5, 684, x13)

inst_192:
// rs1_val==858993459 and rs2_val==1431655765, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x33333333;  op2val:0x55555555
TEST_RR_OP(sub, x12, x10, x11, 0xddddddde, 0x33333333, 0x55555555, x5, 688, x13)

inst_193:
// rs1_val==858993459 and rs2_val==-1431655766, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x33333333;  op2val:-0x55555556
TEST_RR_OP(sub, x12, x10, x11, 0x88888889, 0x33333333, -0x55555556, x5, 692, x13)

inst_194:
// rs1_val==858993459 and rs2_val==5, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x33333333;  op2val:0x5
TEST_RR_OP(sub, x12, x10, x11, 0x3333332e, 0x33333333, 0x5, x5, 696, x13)

inst_195:
// rs1_val==858993459 and rs2_val==858993459, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x33333333;  op2val:0x33333333
TEST_RR_OP(sub, x12, x10, x11, 0x0, 0x33333333, 0x33333333, x5, 700, x13)

inst_196:
// rs1_val==858993459 and rs2_val==1717986918, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x33333333;  op2val:0x66666666
TEST_RR_OP(sub, x12, x10, x11, 0xcccccccd, 0x33333333, 0x66666666, x5, 704, x13)

inst_197:
// rs1_val==858993459 and rs2_val==-46340, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x33333333;  op2val:-0xb504
TEST_RR_OP(sub, x12, x10, x11, 0x3333e837, 0x33333333, -0xb504, x5, 708, x13)

inst_198:
// rs1_val==858993459 and rs2_val==46340, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x33333333;  op2val:0xb504
TEST_RR_OP(sub, x12, x10, x11, 0x33327e2f, 0x33333333, 0xb504, x5, 712, x13)

inst_199:
// rs1_val==858993459 and rs2_val==2, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x33333333;  op2val:0x2
TEST_RR_OP(sub, x12, x10, x11, 0x33333331, 0x33333333, 0x2, x5, 716, x13)

inst_200:
// rs1_val==858993459 and rs2_val==1431655764, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x33333333;  op2val:0x55555554
TEST_RR_OP(sub, x12, x10, x11, 0xdddddddf, 0x33333333, 0x55555554, x5, 720, x13)

inst_201:
// rs1_val==858993459 and rs2_val==0, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x33333333;  op2val:0x0
TEST_RR_OP(sub, x12, x10, x11, 0x33333333, 0x33333333, 0x0, x5, 724, x13)

inst_202:
// rs1_val==858993459 and rs2_val==4, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x33333333;  op2val:0x4
TEST_RR_OP(sub, x12, x10, x11, 0x3333332f, 0x33333333, 0x4, x5, 728, x13)

inst_203:
// rs1_val==858993459 and rs2_val==858993458, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x33333333;  op2val:0x33333332
TEST_RR_OP(sub, x12, x10, x11, 0x1, 0x33333333, 0x33333332, x5, 732, x13)

inst_204:
// rs1_val==858993459 and rs2_val==1717986917, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x33333333;  op2val:0x66666665
TEST_RR_OP(sub, x12, x10, x11, 0xccccccce, 0x33333333, 0x66666665, x5, 736, x13)

inst_205:
// rs1_val==858993459 and rs2_val==46339, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x33333333;  op2val:0xb503
TEST_RR_OP(sub, x12, x10, x11, 0x33327e30, 0x33333333, 0xb503, x5, 740, x13)

inst_206:
// rs1_val==858993459 and rs2_val==1431655766, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x33333333;  op2val:0x55555556
TEST_RR_OP(sub, x12, x10, x11, 0xdddddddd, 0x33333333, 0x55555556, x5, 744, x13)

inst_207:
// rs1_val==858993459 and rs2_val==-1431655765, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x33333333;  op2val:-0x55555555
TEST_RR_OP(sub, x12, x10, x11, 0x88888888, 0x33333333, -0x55555555, x5, 748, x13)

inst_208:
// rs1_val==858993459 and rs2_val==6, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x33333333;  op2val:0x6
TEST_RR_OP(sub, x12, x10, x11, 0x3333332d, 0x33333333, 0x6, x5, 752, x13)

inst_209:
// rs1_val==858993459 and rs2_val==858993460, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x33333333;  op2val:0x33333334
TEST_RR_OP(sub, x12, x10, x11, 0xffffffff, 0x33333333, 0x33333334, x5, 756, x13)

inst_210:
// rs1_val==858993459 and rs2_val==1717986919, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x33333333;  op2val:0x66666667
TEST_RR_OP(sub, x12, x10, x11, 0xcccccccc, 0x33333333, 0x66666667, x5, 760, x13)

inst_211:
// rs1_val==858993459 and rs2_val==-46339, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x33333333;  op2val:-0xb503
TEST_RR_OP(sub, x12, x10, x11, 0x3333e836, 0x33333333, -0xb503, x5, 764, x13)

inst_212:
// rs1_val==858993459 and rs2_val==46341, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x33333333;  op2val:0xb505
TEST_RR_OP(sub, x12, x10, x11, 0x33327e2e, 0x33333333, 0xb505, x5, 768, x13)

inst_213:
// rs1_val==1717986918 and rs2_val==3, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x66666666;  op2val:0x3
TEST_RR_OP(sub, x12, x10, x11, 0x66666663, 0x66666666, 0x3, x5, 772, x13)

inst_214:
// rs1_val==1717986918 and rs2_val==1431655765, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x66666666;  op2val:0x55555555
TEST_RR_OP(sub, x12, x10, x11, 0x11111111, 0x66666666, 0x55555555, x5, 776, x13)

inst_215:
// rs1_val==1717986918 and rs2_val==-1431655766, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x66666666;  op2val:-0x55555556
TEST_RR_OP(sub, x12, x10, x11, 0xbbbbbbbc, 0x66666666, -0x55555556, x5, 780, x13)

inst_216:
// rs1_val==1717986918 and rs2_val==5, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x66666666;  op2val:0x5
TEST_RR_OP(sub, x12, x10, x11, 0x66666661, 0x66666666, 0x5, x5, 784, x13)

inst_217:
// rs1_val==1717986918 and rs2_val==858993459, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x66666666;  op2val:0x33333333
TEST_RR_OP(sub, x12, x10, x11, 0x33333333, 0x66666666, 0x33333333, x5, 788, x13)

inst_218:
// rs1_val==1717986918 and rs2_val==1717986918, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x66666666;  op2val:0x66666666
TEST_RR_OP(sub, x12, x10, x11, 0x0, 0x66666666, 0x66666666, x5, 792, x13)

inst_219:
// rs1_val==1717986918 and rs2_val==-46340, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x66666666;  op2val:-0xb504
TEST_RR_OP(sub, x12, x10, x11, 0x66671b6a, 0x66666666, -0xb504, x5, 796, x13)

inst_220:
// rs1_val==1717986918 and rs2_val==46340, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x66666666;  op2val:0xb504
TEST_RR_OP(sub, x12, x10, x11, 0x6665b162, 0x66666666, 0xb504, x5, 800, x13)

inst_221:
// rs1_val==1717986918 and rs2_val==2, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x66666666;  op2val:0x2
TEST_RR_OP(sub, x12, x10, x11, 0x66666664, 0x66666666, 0x2, x5, 804, x13)

inst_222:
// rs1_val==1717986918 and rs2_val==1431655764, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x66666666;  op2val:0x55555554
TEST_RR_OP(sub, x12, x10, x11, 0x11111112, 0x66666666, 0x55555554, x5, 808, x13)

inst_223:
// rs1_val==1717986918 and rs2_val==0, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x66666666;  op2val:0x0
TEST_RR_OP(sub, x12, x10, x11, 0x66666666, 0x66666666, 0x0, x5, 812, x13)

inst_224:
// rs1_val==1717986918 and rs2_val==4, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x66666666;  op2val:0x4
TEST_RR_OP(sub, x12, x10, x11, 0x66666662, 0x66666666, 0x4, x5, 816, x13)

inst_225:
// rs1_val==1717986918 and rs2_val==858993458, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x66666666;  op2val:0x33333332
TEST_RR_OP(sub, x12, x10, x11, 0x33333334, 0x66666666, 0x33333332, x5, 820, x13)

inst_226:
// rs1_val==1717986918 and rs2_val==1717986917, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x66666666;  op2val:0x66666665
TEST_RR_OP(sub, x12, x10, x11, 0x1, 0x66666666, 0x66666665, x5, 824, x13)

inst_227:
// rs1_val==1717986918 and rs2_val==46339, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x66666666;  op2val:0xb503
TEST_RR_OP(sub, x12, x10, x11, 0x6665b163, 0x66666666, 0xb503, x5, 828, x13)

inst_228:
// rs1_val==1717986918 and rs2_val==1431655766, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x66666666;  op2val:0x55555556
TEST_RR_OP(sub, x12, x10, x11, 0x11111110, 0x66666666, 0x55555556, x5, 832, x13)

inst_229:
// rs1_val==1717986918 and rs2_val==-1431655765, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x66666666;  op2val:-0x55555555
TEST_RR_OP(sub, x12, x10, x11, 0xbbbbbbbb, 0x66666666, -0x55555555, x5, 836, x13)

inst_230:
// rs1_val==1717986918 and rs2_val==6, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x66666666;  op2val:0x6
TEST_RR_OP(sub, x12, x10, x11, 0x66666660, 0x66666666, 0x6, x5, 840, x13)

inst_231:
// rs1_val==1717986918 and rs2_val==858993460, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x66666666;  op2val:0x33333334
TEST_RR_OP(sub, x12, x10, x11, 0x33333332, 0x66666666, 0x33333334, x5, 844, x13)

inst_232:
// rs1_val==1717986918 and rs2_val==1717986919, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x66666666;  op2val:0x66666667
TEST_RR_OP(sub, x12, x10, x11, 0xffffffff, 0x66666666, 0x66666667, x5, 848, x13)

inst_233:
// rs1_val==1717986918 and rs2_val==-46339, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x66666666;  op2val:-0xb503
TEST_RR_OP(sub, x12, x10, x11, 0x66671b69, 0x66666666, -0xb503, x5, 852, x13)

inst_234:
// rs1_val==1717986918 and rs2_val==46341, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x66666666;  op2val:0xb505
TEST_RR_OP(sub, x12, x10, x11, 0x6665b161, 0x66666666, 0xb505, x5, 856, x13)

inst_235:
// rs1_val==-46340 and rs2_val==3, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-0xb504;  op2val:0x3
TEST_RR_OP(sub, x12, x10, x11, 0xffff4af9, -0xb504, 0x3, x5, 860, x13)

inst_236:
// rs1_val==-46340 and rs2_val==1431655765, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-0xb504;  op2val:0x55555555
TEST_RR_OP(sub, x12, x10, x11, 0xaaa9f5a7, -0xb504, 0x55555555, x5, 864, x13)

inst_237:
// rs1_val==-46340 and rs2_val==-1431655766, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-0xb504;  op2val:-0x55555556
TEST_RR_OP(sub, x12, x10, x11, 0x5554a052, -0xb504, -0x55555556, x5, 868, x13)

inst_238:
// rs1_val==-46340 and rs2_val==5, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-0xb504;  op2val:0x5
TEST_RR_OP(sub, x12, x10, x11, 0xffff4af7, -0xb504, 0x5, x5, 872, x13)

inst_239:
// rs1_val==-46340 and rs2_val==858993459, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-0xb504;  op2val:0x33333333
TEST_RR_OP(sub, x12, x10, x11, 0xcccc17c9, -0xb504, 0x33333333, x5, 876, x13)

inst_240:
// rs1_val==-46340 and rs2_val==1717986918, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-0xb504;  op2val:0x66666666
TEST_RR_OP(sub, x12, x10, x11, 0x9998e496, -0xb504, 0x66666666, x5, 880, x13)

inst_241:
// rs1_val==-46340 and rs2_val==-46340, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-0xb504;  op2val:-0xb504
TEST_RR_OP(sub, x12, x10, x11, 0x0, -0xb504, -0xb504, x5, 884, x13)

inst_242:
// rs1_val==-46340 and rs2_val==46340, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-0xb504;  op2val:0xb504
TEST_RR_OP(sub, x12, x10, x11, 0xfffe95f8, -0xb504, 0xb504, x5, 888, x13)

inst_243:
// rs1_val==-46340 and rs2_val==2, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-0xb504;  op2val:0x2
TEST_RR_OP(sub, x12, x10, x11, 0xffff4afa, -0xb504, 0x2, x5, 892, x13)

inst_244:
// rs1_val==-46340 and rs2_val==1431655764, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-0xb504;  op2val:0x55555554
TEST_RR_OP(sub, x12, x10, x11, 0xaaa9f5a8, -0xb504, 0x55555554, x5, 896, x13)

inst_245:
// rs1_val==-46340 and rs2_val==0, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-0xb504;  op2val:0x0
TEST_RR_OP(sub, x12, x10, x11, 0xffff4afc, -0xb504, 0x0, x5, 900, x13)

inst_246:
// rs1_val==-46340 and rs2_val==4, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-0xb504;  op2val:0x4
TEST_RR_OP(sub, x12, x10, x11, 0xffff4af8, -0xb504, 0x4, x5, 904, x13)

inst_247:
// rs1_val==-46340 and rs2_val==858993458, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-0xb504;  op2val:0x33333332
TEST_RR_OP(sub, x12, x10, x11, 0xcccc17ca, -0xb504, 0x33333332, x5, 908, x13)

inst_248:
// rs1_val==-46340 and rs2_val==1717986917, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-0xb504;  op2val:0x66666665
TEST_RR_OP(sub, x12, x10, x11, 0x9998e497, -0xb504, 0x66666665, x5, 912, x13)

inst_249:
// rs1_val==-46340 and rs2_val==46339, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-0xb504;  op2val:0xb503
TEST_RR_OP(sub, x12, x10, x11, 0xfffe95f9, -0xb504, 0xb503, x5, 916, x13)

inst_250:
// rs1_val==-46340 and rs2_val==1431655766, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-0xb504;  op2val:0x55555556
TEST_RR_OP(sub, x12, x10, x11, 0xaaa9f5a6, -0xb504, 0x55555556, x5, 920, x13)

inst_251:
// rs1_val==-46340 and rs2_val==-1431655765, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-0xb504;  op2val:-0x55555555
TEST_RR_OP(sub, x12, x10, x11, 0x5554a051, -0xb504, -0x55555555, x5, 924, x13)

inst_252:
// rs1_val==-46340 and rs2_val==6, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-0xb504;  op2val:0x6
TEST_RR_OP(sub, x12, x10, x11, 0xffff4af6, -0xb504, 0x6, x5, 928, x13)

inst_253:
// rs1_val==-46340 and rs2_val==858993460, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-0xb504;  op2val:0x33333334
TEST_RR_OP(sub, x12, x10, x11, 0xcccc17c8, -0xb504, 0x33333334, x5, 932, x13)

inst_254:
// rs1_val==-46340 and rs2_val==1717986919, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-0xb504;  op2val:0x66666667
TEST_RR_OP(sub, x12, x10, x11, 0x9998e495, -0xb504, 0x66666667, x5, 936, x13)

inst_255:
// rs1_val==-46340 and rs2_val==-46339, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-0xb504;  op2val:-0xb503
TEST_RR_OP(sub, x12, x10, x11, 0xffffffff, -0xb504, -0xb503, x5, 940, x13)

inst_256:
// rs1_val==-46340 and rs2_val==46341, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-0xb504;  op2val:0xb505
TEST_RR_OP(sub, x12, x10, x11, 0xfffe95f7, -0xb504, 0xb505, x5, 944, x13)

inst_257:
// rs1_val==46340 and rs2_val==3, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0xb504;  op2val:0x3
TEST_RR_OP(sub, x12, x10, x11, 0xb501, 0xb504, 0x3, x5, 948, x13)

inst_258:
// rs1_val==46340 and rs2_val==1431655765, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0xb504;  op2val:0x55555555
TEST_RR_OP(sub, x12, x10, x11, 0xaaab5faf, 0xb504, 0x55555555, x5, 952, x13)

inst_259:
// rs1_val==46340 and rs2_val==-1431655766, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0xb504;  op2val:-0x55555556
TEST_RR_OP(sub, x12, x10, x11, 0x55560a5a, 0xb504, -0x55555556, x5, 956, x13)

inst_260:
// rs1_val==46340 and rs2_val==5, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0xb504;  op2val:0x5
TEST_RR_OP(sub, x12, x10, x11, 0xb4ff, 0xb504, 0x5, x5, 960, x13)

inst_261:
// rs1_val==46340 and rs2_val==858993459, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0xb504;  op2val:0x33333333
TEST_RR_OP(sub, x12, x10, x11, 0xcccd81d1, 0xb504, 0x33333333, x5, 964, x13)

inst_262:
// rs1_val==46340 and rs2_val==1717986918, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0xb504;  op2val:0x66666666
TEST_RR_OP(sub, x12, x10, x11, 0x999a4e9e, 0xb504, 0x66666666, x5, 968, x13)

inst_263:
// rs1_val==46340 and rs2_val==-46340, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0xb504;  op2val:-0xb504
TEST_RR_OP(sub, x12, x10, x11, 0x16a08, 0xb504, -0xb504, x5, 972, x13)

inst_264:
// rs1_val==46340 and rs2_val==46340, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0xb504;  op2val:0xb504
TEST_RR_OP(sub, x12, x10, x11, 0x0, 0xb504, 0xb504, x5, 976, x13)

inst_265:
// rs1_val==46340 and rs2_val==2, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0xb504;  op2val:0x2
TEST_RR_OP(sub, x12, x10, x11, 0xb502, 0xb504, 0x2, x5, 980, x13)

inst_266:
// rs1_val==46340 and rs2_val==1431655764, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0xb504;  op2val:0x55555554
TEST_RR_OP(sub, x12, x10, x11, 0xaaab5fb0, 0xb504, 0x55555554, x5, 984, x13)

inst_267:
// rs1_val==46340 and rs2_val==0, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0xb504;  op2val:0x0
TEST_RR_OP(sub, x12, x10, x11, 0xb504, 0xb504, 0x0, x5, 988, x13)

inst_268:
// rs1_val==46340 and rs2_val==4, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0xb504;  op2val:0x4
TEST_RR_OP(sub, x12, x10, x11, 0xb500, 0xb504, 0x4, x5, 992, x13)

inst_269:
// rs1_val==46340 and rs2_val==858993458, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0xb504;  op2val:0x33333332
TEST_RR_OP(sub, x12, x10, x11, 0xcccd81d2, 0xb504, 0x33333332, x5, 996, x13)

inst_270:
// rs1_val==46340 and rs2_val==1717986917, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0xb504;  op2val:0x66666665
TEST_RR_OP(sub, x12, x10, x11, 0x999a4e9f, 0xb504, 0x66666665, x5, 1000, x13)

inst_271:
// rs1_val==46340 and rs2_val==46339, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0xb504;  op2val:0xb503
TEST_RR_OP(sub, x12, x10, x11, 0x1, 0xb504, 0xb503, x5, 1004, x13)

inst_272:
// rs1_val==46340 and rs2_val==1431655766, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0xb504;  op2val:0x55555556
TEST_RR_OP(sub, x12, x10, x11, 0xaaab5fae, 0xb504, 0x55555556, x5, 1008, x13)

inst_273:
// rs1_val==46340 and rs2_val==-1431655765, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0xb504;  op2val:-0x55555555
TEST_RR_OP(sub, x12, x10, x11, 0x55560a59, 0xb504, -0x55555555, x5, 1012, x13)

inst_274:
// rs1_val==46340 and rs2_val==6, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0xb504;  op2val:0x6
TEST_RR_OP(sub, x12, x10, x11, 0xb4fe, 0xb504, 0x6, x5, 1016, x13)

inst_275:
// rs1_val==46340 and rs2_val==858993460, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0xb504;  op2val:0x33333334
TEST_RR_OP(sub, x12, x10, x11, 0xcccd81d0, 0xb504, 0x33333334, x5, 1020, x13)

inst_276:
// rs1_val==46340 and rs2_val==1717986919, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0xb504;  op2val:0x66666667
TEST_RR_OP(sub, x12, x10, x11, 0x999a4e9d, 0xb504, 0x66666667, x5, 1024, x13)

inst_277:
// rs1_val==46340 and rs2_val==-46339, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0xb504;  op2val:-0xb503
TEST_RR_OP(sub, x12, x10, x11, 0x16a07, 0xb504, -0xb503, x5, 1028, x13)

inst_278:
// rs1_val==46340 and rs2_val==46341, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0xb504;  op2val:0xb505
TEST_RR_OP(sub, x12, x10, x11, 0xffffffff, 0xb504, 0xb505, x5, 1032, x13)

inst_279:
// rs1_val==2 and rs2_val==3, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x2;  op2val:0x3
TEST_RR_OP(sub, x12, x10, x11, 0xffffffff, 0x2, 0x3, x5, 1036, x13)

inst_280:
// rs1_val==2 and rs2_val==1431655765, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x2;  op2val:0x55555555
TEST_RR_OP(sub, x12, x10, x11, 0xaaaaaaad, 0x2, 0x55555555, x5, 1040, x13)

inst_281:
// rs1_val==2 and rs2_val==-1431655766, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x2;  op2val:-0x55555556
TEST_RR_OP(sub, x12, x10, x11, 0x55555558, 0x2, -0x55555556, x5, 1044, x13)

inst_282:
// rs1_val==2 and rs2_val==5, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x2;  op2val:0x5
TEST_RR_OP(sub, x12, x10, x11, 0xfffffffd, 0x2, 0x5, x5, 1048, x13)

inst_283:
// rs1_val==2 and rs2_val==858993459, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x2;  op2val:0x33333333
TEST_RR_OP(sub, x12, x10, x11, 0xcccccccf, 0x2, 0x33333333, x5, 1052, x13)

inst_284:
// rs1_val==2 and rs2_val==1717986918, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x2;  op2val:0x66666666
TEST_RR_OP(sub, x12, x10, x11, 0x9999999c, 0x2, 0x66666666, x5, 1056, x13)

inst_285:
// rs1_val==2 and rs2_val==-46340, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x2;  op2val:-0xb504
TEST_RR_OP(sub, x12, x10, x11, 0xb506, 0x2, -0xb504, x5, 1060, x13)

inst_286:
// rs1_val==2 and rs2_val==46340, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x2;  op2val:0xb504
TEST_RR_OP(sub, x12, x10, x11, 0xffff4afe, 0x2, 0xb504, x5, 1064, x13)

inst_287:
// rs1_val==2 and rs2_val==1431655764, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x2;  op2val:0x55555554
TEST_RR_OP(sub, x12, x10, x11, 0xaaaaaaae, 0x2, 0x55555554, x5, 1068, x13)

inst_288:
// rs1_val==2 and rs2_val==0, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x2;  op2val:0x0
TEST_RR_OP(sub, x12, x10, x11, 0x2, 0x2, 0x0, x5, 1072, x13)

inst_289:
// rs1_val==2 and rs2_val==4, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x2;  op2val:0x4
TEST_RR_OP(sub, x12, x10, x11, 0xfffffffe, 0x2, 0x4, x5, 1076, x13)

inst_290:
// rs1_val==2 and rs2_val==858993458, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x2;  op2val:0x33333332
TEST_RR_OP(sub, x12, x10, x11, 0xccccccd0, 0x2, 0x33333332, x5, 1080, x13)

inst_291:
// rs1_val==2 and rs2_val==1717986917, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x2;  op2val:0x66666665
TEST_RR_OP(sub, x12, x10, x11, 0x9999999d, 0x2, 0x66666665, x5, 1084, x13)

inst_292:
// rs1_val==2 and rs2_val==46339, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x2;  op2val:0xb503
TEST_RR_OP(sub, x12, x10, x11, 0xffff4aff, 0x2, 0xb503, x5, 1088, x13)

inst_293:
// rs1_val==2 and rs2_val==1431655766, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x2;  op2val:0x55555556
TEST_RR_OP(sub, x12, x10, x11, 0xaaaaaaac, 0x2, 0x55555556, x5, 1092, x13)

inst_294:
// rs1_val==2 and rs2_val==-1431655765, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x2;  op2val:-0x55555555
TEST_RR_OP(sub, x12, x10, x11, 0x55555557, 0x2, -0x55555555, x5, 1096, x13)

inst_295:
// rs1_val==2 and rs2_val==6, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x2;  op2val:0x6
TEST_RR_OP(sub, x12, x10, x11, 0xfffffffc, 0x2, 0x6, x5, 1100, x13)

inst_296:
// rs1_val==2 and rs2_val==858993460, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x2;  op2val:0x33333334
TEST_RR_OP(sub, x12, x10, x11, 0xccccccce, 0x2, 0x33333334, x5, 1104, x13)

inst_297:
// rs1_val==2 and rs2_val==1717986919, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x2;  op2val:0x66666667
TEST_RR_OP(sub, x12, x10, x11, 0x9999999b, 0x2, 0x66666667, x5, 1108, x13)

inst_298:
// rs1_val==2 and rs2_val==-46339, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x2;  op2val:-0xb503
TEST_RR_OP(sub, x12, x10, x11, 0xb505, 0x2, -0xb503, x5, 1112, x13)

inst_299:
// rs1_val==2 and rs2_val==46341, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x2;  op2val:0xb505
TEST_RR_OP(sub, x12, x10, x11, 0xffff4afd, 0x2, 0xb505, x5, 1116, x13)

inst_300:
// rs1_val==1431655764 and rs2_val==3, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x55555554;  op2val:0x3
TEST_RR_OP(sub, x12, x10, x11, 0x55555551, 0x55555554, 0x3, x5, 1120, x13)

inst_301:
// rs1_val==1431655764 and rs2_val==1431655765, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x55555554;  op2val:0x55555555
TEST_RR_OP(sub, x12, x10, x11, 0xffffffff, 0x55555554, 0x55555555, x5, 1124, x13)

inst_302:
// rs1_val==1431655764 and rs2_val==-1431655766, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x55555554;  op2val:-0x55555556
TEST_RR_OP(sub, x12, x10, x11, 0xaaaaaaaa, 0x55555554, -0x55555556, x5, 1128, x13)

inst_303:
// rs1_val==1431655764 and rs2_val==5, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x55555554;  op2val:0x5
TEST_RR_OP(sub, x12, x10, x11, 0x5555554f, 0x55555554, 0x5, x5, 1132, x13)

inst_304:
// rs1_val==1431655764 and rs2_val==858993459, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x55555554;  op2val:0x33333333
TEST_RR_OP(sub, x12, x10, x11, 0x22222221, 0x55555554, 0x33333333, x5, 1136, x13)

inst_305:
// rs1_val==1431655764 and rs2_val==1717986918, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x55555554;  op2val:0x66666666
TEST_RR_OP(sub, x12, x10, x11, 0xeeeeeeee, 0x55555554, 0x66666666, x5, 1140, x13)

inst_306:
// rs1_val==1431655764 and rs2_val==-46340, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x55555554;  op2val:-0xb504
TEST_RR_OP(sub, x12, x10, x11, 0x55560a58, 0x55555554, -0xb504, x5, 1144, x13)

inst_307:
// rs1_val==1431655764 and rs2_val==46340, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x55555554;  op2val:0xb504
TEST_RR_OP(sub, x12, x10, x11, 0x5554a050, 0x55555554, 0xb504, x5, 1148, x13)

inst_308:
// rs1_val==1431655764 and rs2_val==2, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x55555554;  op2val:0x2
TEST_RR_OP(sub, x12, x10, x11, 0x55555552, 0x55555554, 0x2, x5, 1152, x13)

inst_309:
// rs1_val==1431655764 and rs2_val==1431655764, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x55555554;  op2val:0x55555554
TEST_RR_OP(sub, x12, x10, x11, 0x0, 0x55555554, 0x55555554, x5, 1156, x13)

inst_310:
// rs1_val==1431655764 and rs2_val==4, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x55555554;  op2val:0x4
TEST_RR_OP(sub, x12, x10, x11, 0x55555550, 0x55555554, 0x4, x5, 1160, x13)

inst_311:
// rs1_val==1431655764 and rs2_val==858993458, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x55555554;  op2val:0x33333332
TEST_RR_OP(sub, x12, x10, x11, 0x22222222, 0x55555554, 0x33333332, x5, 1164, x13)

inst_312:
// rs1_val==1431655764 and rs2_val==1717986917, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x55555554;  op2val:0x66666665
TEST_RR_OP(sub, x12, x10, x11, 0xeeeeeeef, 0x55555554, 0x66666665, x5, 1168, x13)

inst_313:
// rs1_val==1431655764 and rs2_val==46339, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x55555554;  op2val:0xb503
TEST_RR_OP(sub, x12, x10, x11, 0x5554a051, 0x55555554, 0xb503, x5, 1172, x13)

inst_314:
// rs1_val==1431655764 and rs2_val==1431655766, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x55555554;  op2val:0x55555556
TEST_RR_OP(sub, x12, x10, x11, 0xfffffffe, 0x55555554, 0x55555556, x5, 1176, x13)

inst_315:
// rs1_val==1431655764 and rs2_val==-1431655765, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x55555554;  op2val:-0x55555555
TEST_RR_OP(sub, x12, x10, x11, 0xaaaaaaa9, 0x55555554, -0x55555555, x5, 1180, x13)

inst_316:
// rs1_val==1431655764 and rs2_val==6, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x55555554;  op2val:0x6
TEST_RR_OP(sub, x12, x10, x11, 0x5555554e, 0x55555554, 0x6, x5, 1184, x13)

inst_317:
// rs1_val==1431655764 and rs2_val==858993460, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x55555554;  op2val:0x33333334
TEST_RR_OP(sub, x12, x10, x11, 0x22222220, 0x55555554, 0x33333334, x5, 1188, x13)

inst_318:
// rs1_val==1431655764 and rs2_val==1717986919, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x55555554;  op2val:0x66666667
TEST_RR_OP(sub, x12, x10, x11, 0xeeeeeeed, 0x55555554, 0x66666667, x5, 1192, x13)

inst_319:
// rs1_val==1431655764 and rs2_val==-46339, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x55555554;  op2val:-0xb503
TEST_RR_OP(sub, x12, x10, x11, 0x55560a57, 0x55555554, -0xb503, x5, 1196, x13)

inst_320:
// rs1_val==1431655764 and rs2_val==46341, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x55555554;  op2val:0xb505
TEST_RR_OP(sub, x12, x10, x11, 0x5554a04f, 0x55555554, 0xb505, x5, 1200, x13)

inst_321:
// rs1_val==0 and rs2_val==3, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x0;  op2val:0x3
TEST_RR_OP(sub, x12, x10, x11, 0xfffffffd, 0x0, 0x3, x5, 1204, x13)

inst_322:
// rs1_val==0 and rs2_val==1431655765, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x0;  op2val:0x55555555
TEST_RR_OP(sub, x12, x10, x11, 0xaaaaaaab, 0x0, 0x55555555, x5, 1208, x13)

inst_323:
// rs1_val==0 and rs2_val==-1431655766, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x0;  op2val:-0x55555556
TEST_RR_OP(sub, x12, x10, x11, 0x55555556, 0x0, -0x55555556, x5, 1212, x13)

inst_324:
// rs1_val==0 and rs2_val==5, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x0;  op2val:0x5
TEST_RR_OP(sub, x12, x10, x11, 0xfffffffb, 0x0, 0x5, x5, 1216, x13)

inst_325:
// rs1_val==0 and rs2_val==858993459, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x0;  op2val:0x33333333
TEST_RR_OP(sub, x12, x10, x11, 0xcccccccd, 0x0, 0x33333333, x5, 1220, x13)

inst_326:
// rs1_val==0 and rs2_val==1717986918, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x0;  op2val:0x66666666
TEST_RR_OP(sub, x12, x10, x11, 0x9999999a, 0x0, 0x66666666, x5, 1224, x13)

inst_327:
// rs1_val==0 and rs2_val==-46340, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x0;  op2val:-0xb504
TEST_RR_OP(sub, x12, x10, x11, 0xb504, 0x0, -0xb504, x5, 1228, x13)

inst_328:
// rs1_val==0 and rs2_val==46340, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x0;  op2val:0xb504
TEST_RR_OP(sub, x12, x10, x11, 0xffff4afc, 0x0, 0xb504, x5, 1232, x13)

inst_329:
// rs1_val==-1431655765 and rs2_val==-1431655765, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-0x55555555;  op2val:-0x55555555
TEST_RR_OP(sub, x12, x10, x11, 0x0, -0x55555555, -0x55555555, x5, 1236, x13)

inst_330:
// rs1_val==-1431655765 and rs2_val==6, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-0x55555555;  op2val:0x6
TEST_RR_OP(sub, x12, x10, x11, 0xaaaaaaa5, -0x55555555, 0x6, x5, 1240, x13)

inst_331:
// rs1_val==-1431655765 and rs2_val==858993460, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-0x55555555;  op2val:0x33333334
TEST_RR_OP(sub, x12, x10, x11, 0x77777777, -0x55555555, 0x33333334, x5, 1244, x13)

inst_332:
// rs1_val==-1431655765 and rs2_val==1717986919, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-0x55555555;  op2val:0x66666667
TEST_RR_OP(sub, x12, x10, x11, 0x44444444, -0x55555555, 0x66666667, x5, 1248, x13)

inst_333:
// rs1_val==-1431655765 and rs2_val==-46339, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-0x55555555;  op2val:-0xb503
TEST_RR_OP(sub, x12, x10, x11, 0xaaab5fae, -0x55555555, -0xb503, x5, 1252, x13)

inst_334:
// rs1_val==-1431655765 and rs2_val==46341, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-0x55555555;  op2val:0xb505
TEST_RR_OP(sub, x12, x10, x11, 0xaaa9f5a6, -0x55555555, 0xb505, x5, 1256, x13)

inst_335:
// rs1_val==6 and rs2_val==3, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x6;  op2val:0x3
TEST_RR_OP(sub, x12, x10, x11, 0x3, 0x6, 0x3, x5, 1260, x13)

inst_336:
// rs1_val==6 and rs2_val==1431655765, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x6;  op2val:0x55555555
TEST_RR_OP(sub, x12, x10, x11, 0xaaaaaab1, 0x6, 0x55555555, x5, 1264, x13)

inst_337:
// rs1_val==6 and rs2_val==-1431655766, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x6;  op2val:-0x55555556
TEST_RR_OP(sub, x12, x10, x11, 0x5555555c, 0x6, -0x55555556, x5, 1268, x13)

inst_338:
// rs1_val==6 and rs2_val==5, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x6;  op2val:0x5
TEST_RR_OP(sub, x12, x10, x11, 0x1, 0x6, 0x5, x5, 1272, x13)

inst_339:
// rs1_val==6 and rs2_val==858993459, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x6;  op2val:0x33333333
TEST_RR_OP(sub, x12, x10, x11, 0xccccccd3, 0x6, 0x33333333, x5, 1276, x13)

inst_340:
// rs1_val==6 and rs2_val==1717986918, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x6;  op2val:0x66666666
TEST_RR_OP(sub, x12, x10, x11, 0x999999a0, 0x6, 0x66666666, x5, 1280, x13)

inst_341:
// rs1_val==6 and rs2_val==-46340, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x6;  op2val:-0xb504
TEST_RR_OP(sub, x12, x10, x11, 0xb50a, 0x6, -0xb504, x5, 1284, x13)

inst_342:
// rs1_val==6 and rs2_val==46340, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x6;  op2val:0xb504
TEST_RR_OP(sub, x12, x10, x11, 0xffff4b02, 0x6, 0xb504, x5, 1288, x13)

inst_343:
// rs1_val==6 and rs2_val==2, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x6;  op2val:0x2
TEST_RR_OP(sub, x12, x10, x11, 0x4, 0x6, 0x2, x5, 1292, x13)

inst_344:
// rs1_val==6 and rs2_val==1431655764, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x6;  op2val:0x55555554
TEST_RR_OP(sub, x12, x10, x11, 0xaaaaaab2, 0x6, 0x55555554, x5, 1296, x13)

inst_345:
// rs1_val==6 and rs2_val==0, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x6;  op2val:0x0
TEST_RR_OP(sub, x12, x10, x11, 0x6, 0x6, 0x0, x5, 1300, x13)

inst_346:
// rs1_val==6 and rs2_val==4, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x6;  op2val:0x4
TEST_RR_OP(sub, x12, x10, x11, 0x2, 0x6, 0x4, x5, 1304, x13)

inst_347:
// rs1_val==6 and rs2_val==858993458, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x6;  op2val:0x33333332
TEST_RR_OP(sub, x12, x10, x11, 0xccccccd4, 0x6, 0x33333332, x5, 1308, x13)

inst_348:
// rs1_val==6 and rs2_val==1717986917, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x6;  op2val:0x66666665
TEST_RR_OP(sub, x12, x10, x11, 0x999999a1, 0x6, 0x66666665, x5, 1312, x13)

inst_349:
// rs1_val==6 and rs2_val==46339, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x6;  op2val:0xb503
TEST_RR_OP(sub, x12, x10, x11, 0xffff4b03, 0x6, 0xb503, x5, 1316, x13)

inst_350:
// rs1_val==6 and rs2_val==1431655766, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x6;  op2val:0x55555556
TEST_RR_OP(sub, x12, x10, x11, 0xaaaaaab0, 0x6, 0x55555556, x5, 1320, x13)

inst_351:
// rs1_val==6 and rs2_val==-1431655765, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x6;  op2val:-0x55555555
TEST_RR_OP(sub, x12, x10, x11, 0x5555555b, 0x6, -0x55555555, x5, 1324, x13)

inst_352:
// rs1_val==6 and rs2_val==6, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x6;  op2val:0x6
TEST_RR_OP(sub, x12, x10, x11, 0x0, 0x6, 0x6, x5, 1328, x13)

inst_353:
// rs1_val==6 and rs2_val==858993460, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x6;  op2val:0x33333334
TEST_RR_OP(sub, x12, x10, x11, 0xccccccd2, 0x6, 0x33333334, x5, 1332, x13)

inst_354:
// rs1_val==6 and rs2_val==1717986919, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x6;  op2val:0x66666667
TEST_RR_OP(sub, x12, x10, x11, 0x9999999f, 0x6, 0x66666667, x5, 1336, x13)

inst_355:
// rs1_val==6 and rs2_val==-46339, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x6;  op2val:-0xb503
TEST_RR_OP(sub, x12, x10, x11, 0xb509, 0x6, -0xb503, x5, 1340, x13)

inst_356:
// rs1_val==6 and rs2_val==46341, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x6;  op2val:0xb505
TEST_RR_OP(sub, x12, x10, x11, 0xffff4b01, 0x6, 0xb505, x5, 1344, x13)

inst_357:
// rs1_val==858993460 and rs2_val==3, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x33333334;  op2val:0x3
TEST_RR_OP(sub, x12, x10, x11, 0x33333331, 0x33333334, 0x3, x5, 1348, x13)

inst_358:
// rs1_val==858993460 and rs2_val==1431655765, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x33333334;  op2val:0x55555555
TEST_RR_OP(sub, x12, x10, x11, 0xdddddddf, 0x33333334, 0x55555555, x5, 1352, x13)

inst_359:
// rs1_val==858993460 and rs2_val==-1431655766, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x33333334;  op2val:-0x55555556
TEST_RR_OP(sub, x12, x10, x11, 0x8888888a, 0x33333334, -0x55555556, x5, 1356, x13)

inst_360:
// rs1_val==858993460 and rs2_val==5, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x33333334;  op2val:0x5
TEST_RR_OP(sub, x12, x10, x11, 0x3333332f, 0x33333334, 0x5, x5, 1360, x13)

inst_361:
// rs1_val==858993460 and rs2_val==858993459, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x33333334;  op2val:0x33333333
TEST_RR_OP(sub, x12, x10, x11, 0x1, 0x33333334, 0x33333333, x5, 1364, x13)

inst_362:
// rs1_val==858993460 and rs2_val==1717986918, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x33333334;  op2val:0x66666666
TEST_RR_OP(sub, x12, x10, x11, 0xccccccce, 0x33333334, 0x66666666, x5, 1368, x13)

inst_363:
// rs1_val==858993460 and rs2_val==-46340, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x33333334;  op2val:-0xb504
TEST_RR_OP(sub, x12, x10, x11, 0x3333e838, 0x33333334, -0xb504, x5, 1372, x13)

inst_364:
// rs1_val==858993460 and rs2_val==46340, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x33333334;  op2val:0xb504
TEST_RR_OP(sub, x12, x10, x11, 0x33327e30, 0x33333334, 0xb504, x5, 1376, x13)

inst_365:
// rs1_val==858993460 and rs2_val==2, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x33333334;  op2val:0x2
TEST_RR_OP(sub, x12, x10, x11, 0x33333332, 0x33333334, 0x2, x5, 1380, x13)

inst_366:
// rs1_val==858993460 and rs2_val==1431655764, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x33333334;  op2val:0x55555554
TEST_RR_OP(sub, x12, x10, x11, 0xdddddde0, 0x33333334, 0x55555554, x5, 1384, x13)

inst_367:
// rs1_val==858993460 and rs2_val==0, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x33333334;  op2val:0x0
TEST_RR_OP(sub, x12, x10, x11, 0x33333334, 0x33333334, 0x0, x5, 1388, x13)

inst_368:
// rs1_val==858993460 and rs2_val==4, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x33333334;  op2val:0x4
TEST_RR_OP(sub, x12, x10, x11, 0x33333330, 0x33333334, 0x4, x5, 1392, x13)

inst_369:
// rs1_val==858993460 and rs2_val==858993458, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x33333334;  op2val:0x33333332
TEST_RR_OP(sub, x12, x10, x11, 0x2, 0x33333334, 0x33333332, x5, 1396, x13)

inst_370:
// rs1_val==858993460 and rs2_val==1717986917, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x33333334;  op2val:0x66666665
TEST_RR_OP(sub, x12, x10, x11, 0xcccccccf, 0x33333334, 0x66666665, x5, 1400, x13)

inst_371:
// rs1_val==858993460 and rs2_val==46339, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x33333334;  op2val:0xb503
TEST_RR_OP(sub, x12, x10, x11, 0x33327e31, 0x33333334, 0xb503, x5, 1404, x13)

inst_372:
// rs1_val==858993460 and rs2_val==1431655766, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x33333334;  op2val:0x55555556
TEST_RR_OP(sub, x12, x10, x11, 0xddddddde, 0x33333334, 0x55555556, x5, 1408, x13)

inst_373:
// rs1_val==858993460 and rs2_val==-1431655765, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x33333334;  op2val:-0x55555555
TEST_RR_OP(sub, x12, x10, x11, 0x88888889, 0x33333334, -0x55555555, x5, 1412, x13)

inst_374:
// rs1_val==858993460 and rs2_val==6, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x33333334;  op2val:0x6
TEST_RR_OP(sub, x12, x10, x11, 0x3333332e, 0x33333334, 0x6, x5, 1416, x13)

inst_375:
// rs1_val==858993460 and rs2_val==858993460, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x33333334;  op2val:0x33333334
TEST_RR_OP(sub, x12, x10, x11, 0x0, 0x33333334, 0x33333334, x5, 1420, x13)

inst_376:
// rs1_val==858993460 and rs2_val==1717986919, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x33333334;  op2val:0x66666667
TEST_RR_OP(sub, x12, x10, x11, 0xcccccccd, 0x33333334, 0x66666667, x5, 1424, x13)

inst_377:
// rs1_val==858993460 and rs2_val==-46339, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x33333334;  op2val:-0xb503
TEST_RR_OP(sub, x12, x10, x11, 0x3333e837, 0x33333334, -0xb503, x5, 1428, x13)

inst_378:
// rs1_val==858993460 and rs2_val==46341, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x33333334;  op2val:0xb505
TEST_RR_OP(sub, x12, x10, x11, 0x33327e2f, 0x33333334, 0xb505, x5, 1432, x13)

inst_379:
// rs1_val==1717986919 and rs2_val==3, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x66666667;  op2val:0x3
TEST_RR_OP(sub, x12, x10, x11, 0x66666664, 0x66666667, 0x3, x5, 1436, x13)

inst_380:
// rs1_val==1717986919 and rs2_val==1431655765, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x66666667;  op2val:0x55555555
TEST_RR_OP(sub, x12, x10, x11, 0x11111112, 0x66666667, 0x55555555, x5, 1440, x13)

inst_381:
// rs1_val==1717986919 and rs2_val==-1431655766, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x66666667;  op2val:-0x55555556
TEST_RR_OP(sub, x12, x10, x11, 0xbbbbbbbd, 0x66666667, -0x55555556, x5, 1444, x13)

inst_382:
// rs1_val==1717986919 and rs2_val==5, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x66666667;  op2val:0x5
TEST_RR_OP(sub, x12, x10, x11, 0x66666662, 0x66666667, 0x5, x5, 1448, x13)

inst_383:
// rs1_val==1717986919 and rs2_val==858993459, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x66666667;  op2val:0x33333333
TEST_RR_OP(sub, x12, x10, x11, 0x33333334, 0x66666667, 0x33333333, x5, 1452, x13)

inst_384:
// rs1_val==1717986919 and rs2_val==1717986918, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x66666667;  op2val:0x66666666
TEST_RR_OP(sub, x12, x10, x11, 0x1, 0x66666667, 0x66666666, x5, 1456, x13)

inst_385:
// rs1_val==1717986919 and rs2_val==-46340, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x66666667;  op2val:-0xb504
TEST_RR_OP(sub, x12, x10, x11, 0x66671b6b, 0x66666667, -0xb504, x5, 1460, x13)

inst_386:
// rs1_val==1717986919 and rs2_val==46340, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x66666667;  op2val:0xb504
TEST_RR_OP(sub, x12, x10, x11, 0x6665b163, 0x66666667, 0xb504, x5, 1464, x13)

inst_387:
// rs1_val==1717986919 and rs2_val==2, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x66666667;  op2val:0x2
TEST_RR_OP(sub, x12, x10, x11, 0x66666665, 0x66666667, 0x2, x5, 1468, x13)

inst_388:
// rs1_val==1717986919 and rs2_val==1431655764, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x66666667;  op2val:0x55555554
TEST_RR_OP(sub, x12, x10, x11, 0x11111113, 0x66666667, 0x55555554, x5, 1472, x13)

inst_389:
// rs1_val==1717986919 and rs2_val==0, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x66666667;  op2val:0x0
TEST_RR_OP(sub, x12, x10, x11, 0x66666667, 0x66666667, 0x0, x5, 1476, x13)

inst_390:
// rs1_val==1717986919 and rs2_val==4, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x66666667;  op2val:0x4
TEST_RR_OP(sub, x12, x10, x11, 0x66666663, 0x66666667, 0x4, x5, 1480, x13)

inst_391:
// rs1_val==1717986919 and rs2_val==858993458, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x66666667;  op2val:0x33333332
TEST_RR_OP(sub, x12, x10, x11, 0x33333335, 0x66666667, 0x33333332, x5, 1484, x13)

inst_392:
// rs1_val==1717986919 and rs2_val==1717986917, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x66666667;  op2val:0x66666665
TEST_RR_OP(sub, x12, x10, x11, 0x2, 0x66666667, 0x66666665, x5, 1488, x13)

inst_393:
// rs1_val==1717986919 and rs2_val==46339, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x66666667;  op2val:0xb503
TEST_RR_OP(sub, x12, x10, x11, 0x6665b164, 0x66666667, 0xb503, x5, 1492, x13)

inst_394:
// rs1_val==1717986919 and rs2_val==1431655766, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x66666667;  op2val:0x55555556
TEST_RR_OP(sub, x12, x10, x11, 0x11111111, 0x66666667, 0x55555556, x5, 1496, x13)

inst_395:
// rs1_val==1717986919 and rs2_val==-1431655765, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x66666667;  op2val:-0x55555555
TEST_RR_OP(sub, x12, x10, x11, 0xbbbbbbbc, 0x66666667, -0x55555555, x5, 1500, x13)

inst_396:
// rs1_val==1717986919 and rs2_val==6, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x66666667;  op2val:0x6
TEST_RR_OP(sub, x12, x10, x11, 0x66666661, 0x66666667, 0x6, x5, 1504, x13)

inst_397:
// rs1_val==1717986919 and rs2_val==858993460, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x66666667;  op2val:0x33333334
TEST_RR_OP(sub, x12, x10, x11, 0x33333333, 0x66666667, 0x33333334, x5, 1508, x13)

inst_398:
// rs1_val==1717986919 and rs2_val==1717986919, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x66666667;  op2val:0x66666667
TEST_RR_OP(sub, x12, x10, x11, 0x0, 0x66666667, 0x66666667, x5, 1512, x13)

inst_399:
// rs1_val==1717986919 and rs2_val==-46339, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x66666667;  op2val:-0xb503
TEST_RR_OP(sub, x12, x10, x11, 0x66671b6a, 0x66666667, -0xb503, x5, 1516, x13)

inst_400:
// rs1_val==1717986919 and rs2_val==46341, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x66666667;  op2val:0xb505
TEST_RR_OP(sub, x12, x10, x11, 0x6665b162, 0x66666667, 0xb505, x5, 1520, x13)

inst_401:
// rs1_val==-46339 and rs2_val==3, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-0xb503;  op2val:0x3
TEST_RR_OP(sub, x12, x10, x11, 0xffff4afa, -0xb503, 0x3, x5, 1524, x13)

inst_402:
// rs1_val==-46339 and rs2_val==1431655765, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-0xb503;  op2val:0x55555555
TEST_RR_OP(sub, x12, x10, x11, 0xaaa9f5a8, -0xb503, 0x55555555, x5, 1528, x13)

inst_403:
// rs1_val==-46339 and rs2_val==-1431655766, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-0xb503;  op2val:-0x55555556
TEST_RR_OP(sub, x12, x10, x11, 0x5554a053, -0xb503, -0x55555556, x5, 1532, x13)

inst_404:
// rs1_val==-46339 and rs2_val==5, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-0xb503;  op2val:0x5
TEST_RR_OP(sub, x12, x10, x11, 0xffff4af8, -0xb503, 0x5, x5, 1536, x13)

inst_405:
// rs1_val==-46339 and rs2_val==858993459, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-0xb503;  op2val:0x33333333
TEST_RR_OP(sub, x12, x10, x11, 0xcccc17ca, -0xb503, 0x33333333, x5, 1540, x13)

inst_406:
// rs1_val==-46339 and rs2_val==1717986918, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-0xb503;  op2val:0x66666666
TEST_RR_OP(sub, x12, x10, x11, 0x9998e497, -0xb503, 0x66666666, x5, 1544, x13)

inst_407:
// rs1_val==-46339 and rs2_val==-46340, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-0xb503;  op2val:-0xb504
TEST_RR_OP(sub, x12, x10, x11, 0x1, -0xb503, -0xb504, x5, 1548, x13)

inst_408:
// rs1_val==-46339 and rs2_val==46340, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-0xb503;  op2val:0xb504
TEST_RR_OP(sub, x12, x10, x11, 0xfffe95f9, -0xb503, 0xb504, x5, 1552, x13)

inst_409:
// rs1_val==-46339 and rs2_val==2, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-0xb503;  op2val:0x2
TEST_RR_OP(sub, x12, x10, x11, 0xffff4afb, -0xb503, 0x2, x5, 1556, x13)

inst_410:
// rs1_val==-46339 and rs2_val==1431655764, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-0xb503;  op2val:0x55555554
TEST_RR_OP(sub, x12, x10, x11, 0xaaa9f5a9, -0xb503, 0x55555554, x5, 1560, x13)

inst_411:
// rs1_val==-46339 and rs2_val==0, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-0xb503;  op2val:0x0
TEST_RR_OP(sub, x12, x10, x11, 0xffff4afd, -0xb503, 0x0, x5, 1564, x13)

inst_412:
// rs1_val==-46339 and rs2_val==4, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-0xb503;  op2val:0x4
TEST_RR_OP(sub, x12, x10, x11, 0xffff4af9, -0xb503, 0x4, x5, 1568, x13)

inst_413:
// rs1_val==-46339 and rs2_val==858993458, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-0xb503;  op2val:0x33333332
TEST_RR_OP(sub, x12, x10, x11, 0xcccc17cb, -0xb503, 0x33333332, x5, 1572, x13)

inst_414:
// rs1_val==-46339 and rs2_val==1717986917, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-0xb503;  op2val:0x66666665
TEST_RR_OP(sub, x12, x10, x11, 0x9998e498, -0xb503, 0x66666665, x5, 1576, x13)

inst_415:
// rs1_val==-46339 and rs2_val==46339, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-0xb503;  op2val:0xb503
TEST_RR_OP(sub, x12, x10, x11, 0xfffe95fa, -0xb503, 0xb503, x5, 1580, x13)

inst_416:
// rs1_val==-46339 and rs2_val==1431655766, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-0xb503;  op2val:0x55555556
TEST_RR_OP(sub, x12, x10, x11, 0xaaa9f5a7, -0xb503, 0x55555556, x5, 1584, x13)

inst_417:
// rs1_val==-46339 and rs2_val==-1431655765, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-0xb503;  op2val:-0x55555555
TEST_RR_OP(sub, x12, x10, x11, 0x5554a052, -0xb503, -0x55555555, x5, 1588, x13)

inst_418:
// rs1_val==-46339 and rs2_val==6, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-0xb503;  op2val:0x6
TEST_RR_OP(sub, x12, x10, x11, 0xffff4af7, -0xb503, 0x6, x5, 1592, x13)

inst_419:
// rs1_val==-46339 and rs2_val==858993460, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-0xb503;  op2val:0x33333334
TEST_RR_OP(sub, x12, x10, x11, 0xcccc17c9, -0xb503, 0x33333334, x5, 1596, x13)

inst_420:
// rs1_val==-46339 and rs2_val==1717986919, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-0xb503;  op2val:0x66666667
TEST_RR_OP(sub, x12, x10, x11, 0x9998e496, -0xb503, 0x66666667, x5, 1600, x13)

inst_421:
// rs1_val==-46339 and rs2_val==-46339, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-0xb503;  op2val:-0xb503
TEST_RR_OP(sub, x12, x10, x11, 0x0, -0xb503, -0xb503, x5, 1604, x13)

inst_422:
// rs1_val==-46339 and rs2_val==46341, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-0xb503;  op2val:0xb505
TEST_RR_OP(sub, x12, x10, x11, 0xfffe95f8, -0xb503, 0xb505, x5, 1608, x13)

inst_423:
// rs1_val==46341 and rs2_val==3, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0xb505;  op2val:0x3
TEST_RR_OP(sub, x12, x10, x11, 0xb502, 0xb505, 0x3, x5, 1612, x13)

inst_424:
// rs1_val==46341 and rs2_val==1431655765, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0xb505;  op2val:0x55555555
TEST_RR_OP(sub, x12, x10, x11, 0xaaab5fb0, 0xb505, 0x55555555, x5, 1616, x13)

inst_425:
// rs1_val==46341 and rs2_val==-1431655766, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0xb505;  op2val:-0x55555556
TEST_RR_OP(sub, x12, x10, x11, 0x55560a5b, 0xb505, -0x55555556, x5, 1620, x13)

inst_426:
// rs1_val==46341 and rs2_val==5, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0xb505;  op2val:0x5
TEST_RR_OP(sub, x12, x10, x11, 0xb500, 0xb505, 0x5, x5, 1624, x13)

inst_427:
// rs1_val==46341 and rs2_val==858993459, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0xb505;  op2val:0x33333333
TEST_RR_OP(sub, x12, x10, x11, 0xcccd81d2, 0xb505, 0x33333333, x5, 1628, x13)

inst_428:
// rs1_val==46341 and rs2_val==1717986918, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0xb505;  op2val:0x66666666
TEST_RR_OP(sub, x12, x10, x11, 0x999a4e9f, 0xb505, 0x66666666, x5, 1632, x13)

inst_429:
// rs1_val==46341 and rs2_val==-46340, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0xb505;  op2val:-0xb504
TEST_RR_OP(sub, x12, x10, x11, 0x16a09, 0xb505, -0xb504, x5, 1636, x13)

inst_430:
// rs1_val==46341 and rs2_val==46340, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0xb505;  op2val:0xb504
TEST_RR_OP(sub, x12, x10, x11, 0x1, 0xb505, 0xb504, x5, 1640, x13)

inst_431:
// rs1_val==46341 and rs2_val==2, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0xb505;  op2val:0x2
TEST_RR_OP(sub, x12, x10, x11, 0xb503, 0xb505, 0x2, x5, 1644, x13)

inst_432:
// rs1_val==46341 and rs2_val==1431655764, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0xb505;  op2val:0x55555554
TEST_RR_OP(sub, x12, x10, x11, 0xaaab5fb1, 0xb505, 0x55555554, x5, 1648, x13)

inst_433:
// rs1_val==46341 and rs2_val==0, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0xb505;  op2val:0x0
TEST_RR_OP(sub, x12, x10, x11, 0xb505, 0xb505, 0x0, x5, 1652, x13)

inst_434:
// rs1_val==46341 and rs2_val==4, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0xb505;  op2val:0x4
TEST_RR_OP(sub, x12, x10, x11, 0xb501, 0xb505, 0x4, x5, 1656, x13)

inst_435:
// rs1_val==46341 and rs2_val==858993458, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0xb505;  op2val:0x33333332
TEST_RR_OP(sub, x12, x10, x11, 0xcccd81d3, 0xb505, 0x33333332, x5, 1660, x13)

inst_436:
// rs1_val==46341 and rs2_val==1717986917, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0xb505;  op2val:0x66666665
TEST_RR_OP(sub, x12, x10, x11, 0x999a4ea0, 0xb505, 0x66666665, x5, 1664, x13)

inst_437:
// rs1_val==46341 and rs2_val==46339, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0xb505;  op2val:0xb503
TEST_RR_OP(sub, x12, x10, x11, 0x2, 0xb505, 0xb503, x5, 1668, x13)

inst_438:
// rs1_val==46341 and rs2_val==1431655766, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0xb505;  op2val:0x55555556
TEST_RR_OP(sub, x12, x10, x11, 0xaaab5faf, 0xb505, 0x55555556, x5, 1672, x13)

inst_439:
// rs1_val==46341 and rs2_val==-1431655765, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0xb505;  op2val:-0x55555555
TEST_RR_OP(sub, x12, x10, x11, 0x55560a5a, 0xb505, -0x55555555, x5, 1676, x13)

inst_440:
// rs1_val==46341 and rs2_val==6, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0xb505;  op2val:0x6
TEST_RR_OP(sub, x12, x10, x11, 0xb4ff, 0xb505, 0x6, x5, 1680, x13)

inst_441:
// rs1_val==46341 and rs2_val==858993460, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0xb505;  op2val:0x33333334
TEST_RR_OP(sub, x12, x10, x11, 0xcccd81d1, 0xb505, 0x33333334, x5, 1684, x13)

inst_442:
// rs1_val==46341 and rs2_val==1717986919, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0xb505;  op2val:0x66666667
TEST_RR_OP(sub, x12, x10, x11, 0x999a4e9e, 0xb505, 0x66666667, x5, 1688, x13)

inst_443:
// rs1_val==46341 and rs2_val==-46339, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0xb505;  op2val:-0xb503
TEST_RR_OP(sub, x12, x10, x11, 0x16a08, 0xb505, -0xb503, x5, 1692, x13)

inst_444:
// rs1_val==46341 and rs2_val==46341, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0xb505;  op2val:0xb505
TEST_RR_OP(sub, x12, x10, x11, 0x0, 0xb505, 0xb505, x5, 1696, x13)

inst_445:
// rs1_val==0 and rs2_val==2, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x0;  op2val:0x2
TEST_RR_OP(sub, x12, x10, x11, 0xfffffffe, 0x0, 0x2, x5, 1700, x13)

inst_446:
// rs1_val==0 and rs2_val==1431655764, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x0;  op2val:0x55555554
TEST_RR_OP(sub, x12, x10, x11, 0xaaaaaaac, 0x0, 0x55555554, x5, 1704, x13)

inst_447:
// rs1_val==0 and rs2_val==0, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x0;  op2val:0x0
TEST_RR_OP(sub, x12, x10, x11, 0x0, 0x0, 0x0, x5, 1708, x13)

inst_448:
// rs1_val==0 and rs2_val==4, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x0;  op2val:0x4
TEST_RR_OP(sub, x12, x10, x11, 0xfffffffc, 0x0, 0x4, x5, 1712, x13)

inst_449:
// rs1_val==0 and rs2_val==858993458, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x0;  op2val:0x33333332
TEST_RR_OP(sub, x12, x10, x11, 0xccccccce, 0x0, 0x33333332, x5, 1716, x13)

inst_450:
// rs1_val==0 and rs2_val==1717986917, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x0;  op2val:0x66666665
TEST_RR_OP(sub, x12, x10, x11, 0x9999999b, 0x0, 0x66666665, x5, 1720, x13)

inst_451:
// rs1_val==0 and rs2_val==46339, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x0;  op2val:0xb503
TEST_RR_OP(sub, x12, x10, x11, 0xffff4afd, 0x0, 0xb503, x5, 1724, x13)

inst_452:
// rs1_val==0 and rs2_val==1431655766, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x0;  op2val:0x55555556
TEST_RR_OP(sub, x12, x10, x11, 0xaaaaaaaa, 0x0, 0x55555556, x5, 1728, x13)

inst_453:
// rs1_val==0 and rs2_val==-1431655765, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x0;  op2val:-0x55555555
TEST_RR_OP(sub, x12, x10, x11, 0x55555555, 0x0, -0x55555555, x5, 1732, x13)

inst_454:
// rs1_val==0 and rs2_val==6, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x0;  op2val:0x6
TEST_RR_OP(sub, x12, x10, x11, 0xfffffffa, 0x0, 0x6, x5, 1736, x13)

inst_455:
// rs1_val==0 and rs2_val==858993460, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x0;  op2val:0x33333334
TEST_RR_OP(sub, x12, x10, x11, 0xcccccccc, 0x0, 0x33333334, x5, 1740, x13)

inst_456:
// rs1_val==0 and rs2_val==1717986919, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x0;  op2val:0x66666667
TEST_RR_OP(sub, x12, x10, x11, 0x99999999, 0x0, 0x66666667, x5, 1744, x13)

inst_457:
// rs1_val==0 and rs2_val==-46339, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x0;  op2val:-0xb503
TEST_RR_OP(sub, x12, x10, x11, 0xb503, 0x0, -0xb503, x5, 1748, x13)

inst_458:
// rs1_val==0 and rs2_val==46341, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x0;  op2val:0xb505
TEST_RR_OP(sub, x12, x10, x11, 0xffff4afb, 0x0, 0xb505, x5, 1752, x13)

inst_459:
// rs1_val==4 and rs2_val==3, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x4;  op2val:0x3
TEST_RR_OP(sub, x12, x10, x11, 0x1, 0x4, 0x3, x5, 1756, x13)

inst_460:
// rs1_val==4 and rs2_val==1431655765, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x4;  op2val:0x55555555
TEST_RR_OP(sub, x12, x10, x11, 0xaaaaaaaf, 0x4, 0x55555555, x5, 1760, x13)

inst_461:
// rs1_val==4 and rs2_val==-1431655766, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x4;  op2val:-0x55555556
TEST_RR_OP(sub, x12, x10, x11, 0x5555555a, 0x4, -0x55555556, x5, 1764, x13)

inst_462:
// rs1_val==4 and rs2_val==5, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x4;  op2val:0x5
TEST_RR_OP(sub, x12, x10, x11, 0xffffffff, 0x4, 0x5, x5, 1768, x13)

inst_463:
// rs1_val==4 and rs2_val==858993459, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x4;  op2val:0x33333333
TEST_RR_OP(sub, x12, x10, x11, 0xccccccd1, 0x4, 0x33333333, x5, 1772, x13)

inst_464:
// rs1_val==4 and rs2_val==1717986918, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x4;  op2val:0x66666666
TEST_RR_OP(sub, x12, x10, x11, 0x9999999e, 0x4, 0x66666666, x5, 1776, x13)

inst_465:
// rs1_val==4 and rs2_val==-46340, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x4;  op2val:-0xb504
TEST_RR_OP(sub, x12, x10, x11, 0xb508, 0x4, -0xb504, x5, 1780, x13)

inst_466:
// rs1_val==4 and rs2_val==46340, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x4;  op2val:0xb504
TEST_RR_OP(sub, x12, x10, x11, 0xffff4b00, 0x4, 0xb504, x5, 1784, x13)

inst_467:
// rs1_val==4 and rs2_val==2, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x4;  op2val:0x2
TEST_RR_OP(sub, x12, x10, x11, 0x2, 0x4, 0x2, x5, 1788, x13)

inst_468:
// rs1_val==4 and rs2_val==1431655764, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x4;  op2val:0x55555554
TEST_RR_OP(sub, x12, x10, x11, 0xaaaaaab0, 0x4, 0x55555554, x5, 1792, x13)

inst_469:
// rs1_val==4 and rs2_val==0, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x4;  op2val:0x0
TEST_RR_OP(sub, x12, x10, x11, 0x4, 0x4, 0x0, x5, 1796, x13)

inst_470:
// rs1_val==4 and rs2_val==4, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x4;  op2val:0x4
TEST_RR_OP(sub, x12, x10, x11, 0x0, 0x4, 0x4, x5, 1800, x13)

inst_471:
// rs1_val==4 and rs2_val==858993458, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x4;  op2val:0x33333332
TEST_RR_OP(sub, x12, x10, x11, 0xccccccd2, 0x4, 0x33333332, x5, 1804, x13)

inst_472:
// rs1_val==4 and rs2_val==1717986917, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x4;  op2val:0x66666665
TEST_RR_OP(sub, x12, x10, x11, 0x9999999f, 0x4, 0x66666665, x5, 1808, x13)

inst_473:
// rs1_val==4 and rs2_val==46339, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x4;  op2val:0xb503
TEST_RR_OP(sub, x12, x10, x11, 0xffff4b01, 0x4, 0xb503, x5, 1812, x13)

inst_474:
// rs1_val==4 and rs2_val==1431655766, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x4;  op2val:0x55555556
TEST_RR_OP(sub, x12, x10, x11, 0xaaaaaaae, 0x4, 0x55555556, x5, 1816, x13)

inst_475:
// rs1_val==4 and rs2_val==-1431655765, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x4;  op2val:-0x55555555
TEST_RR_OP(sub, x12, x10, x11, 0x55555559, 0x4, -0x55555555, x5, 1820, x13)

inst_476:
// rs1_val==4 and rs2_val==6, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x4;  op2val:0x6
TEST_RR_OP(sub, x12, x10, x11, 0xfffffffe, 0x4, 0x6, x5, 1824, x13)

inst_477:
// rs1_val==4 and rs2_val==858993460, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x4;  op2val:0x33333334
TEST_RR_OP(sub, x12, x10, x11, 0xccccccd0, 0x4, 0x33333334, x5, 1828, x13)

inst_478:
// rs1_val==4 and rs2_val==1717986919, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x4;  op2val:0x66666667
TEST_RR_OP(sub, x12, x10, x11, 0x9999999d, 0x4, 0x66666667, x5, 1832, x13)

inst_479:
// rs1_val==4 and rs2_val==-46339, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x4;  op2val:-0xb503
TEST_RR_OP(sub, x12, x10, x11, 0xb507, 0x4, -0xb503, x5, 1836, x13)

inst_480:
// rs1_val==4 and rs2_val==46341, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x4;  op2val:0xb505
TEST_RR_OP(sub, x12, x10, x11, 0xffff4aff, 0x4, 0xb505, x5, 1840, x13)

inst_481:
// rs1_val==858993458 and rs2_val==3, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x33333332;  op2val:0x3
TEST_RR_OP(sub, x12, x10, x11, 0x3333332f, 0x33333332, 0x3, x5, 1844, x13)

inst_482:
// rs1_val==858993458 and rs2_val==1431655765, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x33333332;  op2val:0x55555555
TEST_RR_OP(sub, x12, x10, x11, 0xdddddddd, 0x33333332, 0x55555555, x5, 1848, x13)

inst_483:
// rs1_val==858993458 and rs2_val==-1431655766, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x33333332;  op2val:-0x55555556
TEST_RR_OP(sub, x12, x10, x11, 0x88888888, 0x33333332, -0x55555556, x5, 1852, x13)

inst_484:
// rs1_val==858993458 and rs2_val==5, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x33333332;  op2val:0x5
TEST_RR_OP(sub, x12, x10, x11, 0x3333332d, 0x33333332, 0x5, x5, 1856, x13)

inst_485:
// rs1_val==858993458 and rs2_val==858993459, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x33333332;  op2val:0x33333333
TEST_RR_OP(sub, x12, x10, x11, 0xffffffff, 0x33333332, 0x33333333, x5, 1860, x13)

inst_486:
// rs1_val==858993458 and rs2_val==1717986918, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x33333332;  op2val:0x66666666
TEST_RR_OP(sub, x12, x10, x11, 0xcccccccc, 0x33333332, 0x66666666, x5, 1864, x13)

inst_487:
// rs1_val==858993458 and rs2_val==-46340, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x33333332;  op2val:-0xb504
TEST_RR_OP(sub, x12, x10, x11, 0x3333e836, 0x33333332, -0xb504, x5, 1868, x13)

inst_488:
// rs1_val==858993458 and rs2_val==46340, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x33333332;  op2val:0xb504
TEST_RR_OP(sub, x12, x10, x11, 0x33327e2e, 0x33333332, 0xb504, x5, 1872, x13)

inst_489:
// rs1_val==858993458 and rs2_val==2, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x33333332;  op2val:0x2
TEST_RR_OP(sub, x12, x10, x11, 0x33333330, 0x33333332, 0x2, x5, 1876, x13)

inst_490:
// rs1_val==858993458 and rs2_val==1431655764, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x33333332;  op2val:0x55555554
TEST_RR_OP(sub, x12, x10, x11, 0xddddddde, 0x33333332, 0x55555554, x5, 1880, x13)

inst_491:
// rs1_val==858993458 and rs2_val==0, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x33333332;  op2val:0x0
TEST_RR_OP(sub, x12, x10, x11, 0x33333332, 0x33333332, 0x0, x5, 1884, x13)

inst_492:
// rs1_val==858993458 and rs2_val==4, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x33333332;  op2val:0x4
TEST_RR_OP(sub, x12, x10, x11, 0x3333332e, 0x33333332, 0x4, x5, 1888, x13)

inst_493:
// rs1_val==858993458 and rs2_val==858993458, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x33333332;  op2val:0x33333332
TEST_RR_OP(sub, x12, x10, x11, 0x0, 0x33333332, 0x33333332, x5, 1892, x13)

inst_494:
// rs1_val==858993458 and rs2_val==1717986917, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x33333332;  op2val:0x66666665
TEST_RR_OP(sub, x12, x10, x11, 0xcccccccd, 0x33333332, 0x66666665, x5, 1896, x13)

inst_495:
// rs1_val==858993458 and rs2_val==46339, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x33333332;  op2val:0xb503
TEST_RR_OP(sub, x12, x10, x11, 0x33327e2f, 0x33333332, 0xb503, x5, 1900, x13)

inst_496:
// rs1_val==858993458 and rs2_val==1431655766, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x33333332;  op2val:0x55555556
TEST_RR_OP(sub, x12, x10, x11, 0xdddddddc, 0x33333332, 0x55555556, x5, 1904, x13)

inst_497:
// rs1_val==858993458 and rs2_val==-1431655765, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x33333332;  op2val:-0x55555555
TEST_RR_OP(sub, x12, x10, x11, 0x88888887, 0x33333332, -0x55555555, x5, 1908, x13)

inst_498:
// rs1_val==858993458 and rs2_val==6, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x33333332;  op2val:0x6
TEST_RR_OP(sub, x12, x10, x11, 0x3333332c, 0x33333332, 0x6, x5, 1912, x13)

inst_499:
// rs1_val==858993458 and rs2_val==858993460, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x33333332;  op2val:0x33333334
TEST_RR_OP(sub, x12, x10, x11, 0xfffffffe, 0x33333332, 0x33333334, x5, 1916, x13)

inst_500:
// rs1_val==858993458 and rs2_val==1717986919, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x33333332;  op2val:0x66666667
TEST_RR_OP(sub, x12, x10, x11, 0xcccccccb, 0x33333332, 0x66666667, x5, 1920, x13)

inst_501:
// rs1_val==858993458 and rs2_val==-46339, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x33333332;  op2val:-0xb503
TEST_RR_OP(sub, x12, x10, x11, 0x3333e835, 0x33333332, -0xb503, x5, 1924, x13)

inst_502:
// rs1_val==858993458 and rs2_val==46341, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x33333332;  op2val:0xb505
TEST_RR_OP(sub, x12, x10, x11, 0x33327e2d, 0x33333332, 0xb505, x5, 1928, x13)

inst_503:
// rs1_val==1717986917 and rs2_val==3, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x66666665;  op2val:0x3
TEST_RR_OP(sub, x12, x10, x11, 0x66666662, 0x66666665, 0x3, x5, 1932, x13)

inst_504:
// rs1_val==1717986917 and rs2_val==1431655765, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x66666665;  op2val:0x55555555
TEST_RR_OP(sub, x12, x10, x11, 0x11111110, 0x66666665, 0x55555555, x5, 1936, x13)

inst_505:
// rs1_val==1717986917 and rs2_val==-1431655766, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x66666665;  op2val:-0x55555556
TEST_RR_OP(sub, x12, x10, x11, 0xbbbbbbbb, 0x66666665, -0x55555556, x5, 1940, x13)

inst_506:
// rs1_val==1717986917 and rs2_val==5, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x66666665;  op2val:0x5
TEST_RR_OP(sub, x12, x10, x11, 0x66666660, 0x66666665, 0x5, x5, 1944, x13)

inst_507:
// rs1_val==1717986917 and rs2_val==858993459, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x66666665;  op2val:0x33333333
TEST_RR_OP(sub, x12, x10, x11, 0x33333332, 0x66666665, 0x33333333, x5, 1948, x13)

inst_508:
// rs1_val==1717986917 and rs2_val==1717986918, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x66666665;  op2val:0x66666666
TEST_RR_OP(sub, x12, x10, x11, 0xffffffff, 0x66666665, 0x66666666, x5, 1952, x13)

inst_509:
// rs1_val==1717986917 and rs2_val==-46340, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x66666665;  op2val:-0xb504
TEST_RR_OP(sub, x12, x10, x11, 0x66671b69, 0x66666665, -0xb504, x5, 1956, x13)

inst_510:
// rs1_val==1717986917 and rs2_val==46340, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x66666665;  op2val:0xb504
TEST_RR_OP(sub, x12, x10, x11, 0x6665b161, 0x66666665, 0xb504, x5, 1960, x13)

inst_511:
// rs1_val==1717986917 and rs2_val==2, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x66666665;  op2val:0x2
TEST_RR_OP(sub, x12, x10, x11, 0x66666663, 0x66666665, 0x2, x5, 1964, x13)

inst_512:
// rs1_val==1717986917 and rs2_val==1431655764, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x66666665;  op2val:0x55555554
TEST_RR_OP(sub, x12, x10, x11, 0x11111111, 0x66666665, 0x55555554, x5, 1968, x13)

inst_513:
// rs1_val==1717986917 and rs2_val==0, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x66666665;  op2val:0x0
TEST_RR_OP(sub, x12, x10, x11, 0x66666665, 0x66666665, 0x0, x5, 1972, x13)

inst_514:
// rs1_val==1717986917 and rs2_val==4, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x66666665;  op2val:0x4
TEST_RR_OP(sub, x12, x10, x11, 0x66666661, 0x66666665, 0x4, x5, 1976, x13)

inst_515:
// rs1_val==1717986917 and rs2_val==858993458, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x66666665;  op2val:0x33333332
TEST_RR_OP(sub, x12, x10, x11, 0x33333333, 0x66666665, 0x33333332, x5, 1980, x13)

inst_516:
// rs1_val==1717986917 and rs2_val==1717986917, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x66666665;  op2val:0x66666665
TEST_RR_OP(sub, x12, x10, x11, 0x0, 0x66666665, 0x66666665, x5, 1984, x13)

inst_517:
// rs1_val==1717986917 and rs2_val==46339, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x66666665;  op2val:0xb503
TEST_RR_OP(sub, x12, x10, x11, 0x6665b162, 0x66666665, 0xb503, x5, 1988, x13)

inst_518:
// rs1_val==1717986917 and rs2_val==1431655766, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x66666665;  op2val:0x55555556
TEST_RR_OP(sub, x12, x10, x11, 0x1111110f, 0x66666665, 0x55555556, x5, 1992, x13)

inst_519:
// rs1_val==1717986917 and rs2_val==-1431655765, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x66666665;  op2val:-0x55555555
TEST_RR_OP(sub, x12, x10, x11, 0xbbbbbbba, 0x66666665, -0x55555555, x5, 1996, x13)

inst_520:
// rs1_val==1717986917 and rs2_val==6, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x66666665;  op2val:0x6
TEST_RR_OP(sub, x12, x10, x11, 0x6666665f, 0x66666665, 0x6, x5, 2000, x13)

inst_521:
// rs1_val==1717986917 and rs2_val==858993460, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x66666665;  op2val:0x33333334
TEST_RR_OP(sub, x12, x10, x11, 0x33333331, 0x66666665, 0x33333334, x5, 2004, x13)

inst_522:
// rs1_val==1717986917 and rs2_val==1717986919, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x66666665;  op2val:0x66666667
TEST_RR_OP(sub, x12, x10, x11, 0xfffffffe, 0x66666665, 0x66666667, x5, 2008, x13)

inst_523:
// rs1_val==1717986917 and rs2_val==-46339, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x66666665;  op2val:-0xb503
TEST_RR_OP(sub, x12, x10, x11, 0x66671b68, 0x66666665, -0xb503, x5, 2012, x13)

inst_524:
// rs1_val==1717986917 and rs2_val==46341, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x66666665;  op2val:0xb505
TEST_RR_OP(sub, x12, x10, x11, 0x6665b160, 0x66666665, 0xb505, x5, 2016, x13)

inst_525:
// rs1_val==46339 and rs2_val==3, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0xb503;  op2val:0x3
TEST_RR_OP(sub, x12, x10, x11, 0xb500, 0xb503, 0x3, x5, 2020, x13)

inst_526:
// rs1_val==46339 and rs2_val==1431655765, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0xb503;  op2val:0x55555555
TEST_RR_OP(sub, x12, x10, x11, 0xaaab5fae, 0xb503, 0x55555555, x5, 2024, x13)

inst_527:
// rs1_val==46339 and rs2_val==-1431655766, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0xb503;  op2val:-0x55555556
TEST_RR_OP(sub, x12, x10, x11, 0x55560a59, 0xb503, -0x55555556, x5, 2028, x13)

inst_528:
// rs1_val==46339 and rs2_val==5, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0xb503;  op2val:0x5
TEST_RR_OP(sub, x12, x10, x11, 0xb4fe, 0xb503, 0x5, x5, 2032, x13)

inst_529:
// rs1_val==46339 and rs2_val==858993459, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0xb503;  op2val:0x33333333
TEST_RR_OP(sub, x12, x10, x11, 0xcccd81d0, 0xb503, 0x33333333, x5, 2036, x13)

inst_530:
// rs1_val==46339 and rs2_val==1717986918, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0xb503;  op2val:0x66666666
TEST_RR_OP(sub, x12, x10, x11, 0x999a4e9d, 0xb503, 0x66666666, x5, 2040, x13)

inst_531:
// rs1_val==46339 and rs2_val==-46340, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0xb503;  op2val:-0xb504
TEST_RR_OP(sub, x12, x10, x11, 0x16a07, 0xb503, -0xb504, x5, 2044, x13)
RVTEST_SIGBASE( x5,signature_x5_1)

inst_532:
// rs1_val==46339 and rs2_val==46340, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0xb503;  op2val:0xb504
TEST_RR_OP(sub, x12, x10, x11, 0xffffffff, 0xb503, 0xb504, x5, 0, x13)

inst_533:
// rs1_val==46339 and rs2_val==2, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0xb503;  op2val:0x2
TEST_RR_OP(sub, x12, x10, x11, 0xb501, 0xb503, 0x2, x5, 4, x13)

inst_534:
// rs1_val==46339 and rs2_val==1431655764, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0xb503;  op2val:0x55555554
TEST_RR_OP(sub, x12, x10, x11, 0xaaab5faf, 0xb503, 0x55555554, x5, 8, x13)

inst_535:
// rs1_val==46339 and rs2_val==0, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0xb503;  op2val:0x0
TEST_RR_OP(sub, x12, x10, x11, 0xb503, 0xb503, 0x0, x5, 12, x13)

inst_536:
// rs1_val==46339 and rs2_val==4, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0xb503;  op2val:0x4
TEST_RR_OP(sub, x12, x10, x11, 0xb4ff, 0xb503, 0x4, x5, 16, x13)

inst_537:
// rs1_val==46339 and rs2_val==858993458, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0xb503;  op2val:0x33333332
TEST_RR_OP(sub, x12, x10, x11, 0xcccd81d1, 0xb503, 0x33333332, x5, 20, x13)

inst_538:
// rs1_val==46339 and rs2_val==1717986917, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0xb503;  op2val:0x66666665
TEST_RR_OP(sub, x12, x10, x11, 0x999a4e9e, 0xb503, 0x66666665, x5, 24, x13)

inst_539:
// rs1_val==46339 and rs2_val==46339, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0xb503;  op2val:0xb503
TEST_RR_OP(sub, x12, x10, x11, 0x0, 0xb503, 0xb503, x5, 28, x13)

inst_540:
// rs1_val==46339 and rs2_val==1431655766, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0xb503;  op2val:0x55555556
TEST_RR_OP(sub, x12, x10, x11, 0xaaab5fad, 0xb503, 0x55555556, x5, 32, x13)

inst_541:
// rs1_val==46339 and rs2_val==-1431655765, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0xb503;  op2val:-0x55555555
TEST_RR_OP(sub, x12, x10, x11, 0x55560a58, 0xb503, -0x55555555, x5, 36, x13)

inst_542:
// rs1_val==46339 and rs2_val==6, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0xb503;  op2val:0x6
TEST_RR_OP(sub, x12, x10, x11, 0xb4fd, 0xb503, 0x6, x5, 40, x13)

inst_543:
// rs1_val==46339 and rs2_val==858993460, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0xb503;  op2val:0x33333334
TEST_RR_OP(sub, x12, x10, x11, 0xcccd81cf, 0xb503, 0x33333334, x5, 44, x13)

inst_544:
// rs1_val==46339 and rs2_val==1717986919, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0xb503;  op2val:0x66666667
TEST_RR_OP(sub, x12, x10, x11, 0x999a4e9c, 0xb503, 0x66666667, x5, 48, x13)

inst_545:
// rs1_val==46339 and rs2_val==-46339, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0xb503;  op2val:-0xb503
TEST_RR_OP(sub, x12, x10, x11, 0x16a06, 0xb503, -0xb503, x5, 52, x13)

inst_546:
// rs1_val==46339 and rs2_val==46341, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0xb503;  op2val:0xb505
TEST_RR_OP(sub, x12, x10, x11, 0xfffffffe, 0xb503, 0xb505, x5, 56, x13)

inst_547:
// rs1_val==1431655766 and rs2_val==3, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x55555556;  op2val:0x3
TEST_RR_OP(sub, x12, x10, x11, 0x55555553, 0x55555556, 0x3, x5, 60, x13)

inst_548:
// rs1_val==1431655766 and rs2_val==1431655765, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x55555556;  op2val:0x55555555
TEST_RR_OP(sub, x12, x10, x11, 0x1, 0x55555556, 0x55555555, x5, 64, x13)

inst_549:
// rs1_val==1431655766 and rs2_val==-1431655766, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x55555556;  op2val:-0x55555556
TEST_RR_OP(sub, x12, x10, x11, 0xaaaaaaac, 0x55555556, -0x55555556, x5, 68, x13)

inst_550:
// rs1_val==1431655766 and rs2_val==5, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x55555556;  op2val:0x5
TEST_RR_OP(sub, x12, x10, x11, 0x55555551, 0x55555556, 0x5, x5, 72, x13)

inst_551:
// rs1_val==1431655766 and rs2_val==858993459, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x55555556;  op2val:0x33333333
TEST_RR_OP(sub, x12, x10, x11, 0x22222223, 0x55555556, 0x33333333, x5, 76, x13)

inst_552:
// rs1_val==1431655766 and rs2_val==1717986918, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x55555556;  op2val:0x66666666
TEST_RR_OP(sub, x12, x10, x11, 0xeeeeeef0, 0x55555556, 0x66666666, x5, 80, x13)

inst_553:
// rs1_val==1431655766 and rs2_val==-46340, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x55555556;  op2val:-0xb504
TEST_RR_OP(sub, x12, x10, x11, 0x55560a5a, 0x55555556, -0xb504, x5, 84, x13)

inst_554:
// rs1_val==1431655766 and rs2_val==46340, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x55555556;  op2val:0xb504
TEST_RR_OP(sub, x12, x10, x11, 0x5554a052, 0x55555556, 0xb504, x5, 88, x13)

inst_555:
// rs1_val==1431655766 and rs2_val==2, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x55555556;  op2val:0x2
TEST_RR_OP(sub, x12, x10, x11, 0x55555554, 0x55555556, 0x2, x5, 92, x13)

inst_556:
// rs1_val==1431655766 and rs2_val==1431655764, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x55555556;  op2val:0x55555554
TEST_RR_OP(sub, x12, x10, x11, 0x2, 0x55555556, 0x55555554, x5, 96, x13)

inst_557:
// rs1_val==1431655766 and rs2_val==0, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x55555556;  op2val:0x0
TEST_RR_OP(sub, x12, x10, x11, 0x55555556, 0x55555556, 0x0, x5, 100, x13)

inst_558:
// rs1_val==1431655766 and rs2_val==4, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x55555556;  op2val:0x4
TEST_RR_OP(sub, x12, x10, x11, 0x55555552, 0x55555556, 0x4, x5, 104, x13)

inst_559:
// rs1_val==1431655766 and rs2_val==858993458, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x55555556;  op2val:0x33333332
TEST_RR_OP(sub, x12, x10, x11, 0x22222224, 0x55555556, 0x33333332, x5, 108, x13)

inst_560:
// rs1_val==1431655766 and rs2_val==1717986917, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x55555556;  op2val:0x66666665
TEST_RR_OP(sub, x12, x10, x11, 0xeeeeeef1, 0x55555556, 0x66666665, x5, 112, x13)

inst_561:
// rs1_val==1431655766 and rs2_val==46339, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x55555556;  op2val:0xb503
TEST_RR_OP(sub, x12, x10, x11, 0x5554a053, 0x55555556, 0xb503, x5, 116, x13)

inst_562:
// rs1_val==1431655766 and rs2_val==1431655766, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x55555556;  op2val:0x55555556
TEST_RR_OP(sub, x12, x10, x11, 0x0, 0x55555556, 0x55555556, x5, 120, x13)

inst_563:
// rs1_val==1431655766 and rs2_val==-1431655765, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x55555556;  op2val:-0x55555555
TEST_RR_OP(sub, x12, x10, x11, 0xaaaaaaab, 0x55555556, -0x55555555, x5, 124, x13)

inst_564:
// rs1_val==1431655766 and rs2_val==6, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x55555556;  op2val:0x6
TEST_RR_OP(sub, x12, x10, x11, 0x55555550, 0x55555556, 0x6, x5, 128, x13)

inst_565:
// rs1_val==1431655766 and rs2_val==858993460, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x55555556;  op2val:0x33333334
TEST_RR_OP(sub, x12, x10, x11, 0x22222222, 0x55555556, 0x33333334, x5, 132, x13)

inst_566:
// rs1_val==1431655766 and rs2_val==1717986919, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x55555556;  op2val:0x66666667
TEST_RR_OP(sub, x12, x10, x11, 0xeeeeeeef, 0x55555556, 0x66666667, x5, 136, x13)

inst_567:
// rs1_val==1431655766 and rs2_val==-46339, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x55555556;  op2val:-0xb503
TEST_RR_OP(sub, x12, x10, x11, 0x55560a59, 0x55555556, -0xb503, x5, 140, x13)

inst_568:
// rs1_val==1431655766 and rs2_val==46341, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x55555556;  op2val:0xb505
TEST_RR_OP(sub, x12, x10, x11, 0x5554a051, 0x55555556, 0xb505, x5, 144, x13)

inst_569:
// rs1_val==-1431655765 and rs2_val==3, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-0x55555555;  op2val:0x3
TEST_RR_OP(sub, x12, x10, x11, 0xaaaaaaa8, -0x55555555, 0x3, x5, 148, x13)

inst_570:
// rs1_val==-1431655765 and rs2_val==1431655765, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-0x55555555;  op2val:0x55555555
TEST_RR_OP(sub, x12, x10, x11, 0x55555556, -0x55555555, 0x55555555, x5, 152, x13)

inst_571:
// rs1_val==-1431655765 and rs2_val==5, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-0x55555555;  op2val:0x5
TEST_RR_OP(sub, x12, x10, x11, 0xaaaaaaa6, -0x55555555, 0x5, x5, 156, x13)

inst_572:
// rs1_val==-1431655765 and rs2_val==858993459, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-0x55555555;  op2val:0x33333333
TEST_RR_OP(sub, x12, x10, x11, 0x77777778, -0x55555555, 0x33333333, x5, 160, x13)

inst_573:
// rs1_val==-1431655765 and rs2_val==1717986918, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-0x55555555;  op2val:0x66666666
TEST_RR_OP(sub, x12, x10, x11, 0x44444445, -0x55555555, 0x66666666, x5, 164, x13)

inst_574:
// rs1_val==-1431655765 and rs2_val==-46340, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-0x55555555;  op2val:-0xb504
TEST_RR_OP(sub, x12, x10, x11, 0xaaab5faf, -0x55555555, -0xb504, x5, 168, x13)

inst_575:
// rs1_val==-1431655765 and rs2_val==46340, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-0x55555555;  op2val:0xb504
TEST_RR_OP(sub, x12, x10, x11, 0xaaa9f5a7, -0x55555555, 0xb504, x5, 172, x13)

inst_576:
// rs1_val==-1431655765 and rs2_val==2, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-0x55555555;  op2val:0x2
TEST_RR_OP(sub, x12, x10, x11, 0xaaaaaaa9, -0x55555555, 0x2, x5, 176, x13)

inst_577:
// rs1_val==-1431655765 and rs2_val==1431655764, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-0x55555555;  op2val:0x55555554
TEST_RR_OP(sub, x12, x10, x11, 0x55555557, -0x55555555, 0x55555554, x5, 180, x13)

inst_578:
// rs1_val==-1431655765 and rs2_val==0, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-0x55555555;  op2val:0x0
TEST_RR_OP(sub, x12, x10, x11, 0xaaaaaaab, -0x55555555, 0x0, x5, 184, x13)

inst_579:
// rs1_val==-1431655765 and rs2_val==4, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-0x55555555;  op2val:0x4
TEST_RR_OP(sub, x12, x10, x11, 0xaaaaaaa7, -0x55555555, 0x4, x5, 188, x13)

inst_580:
// rs1_val==-1431655765 and rs2_val==858993458, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-0x55555555;  op2val:0x33333332
TEST_RR_OP(sub, x12, x10, x11, 0x77777779, -0x55555555, 0x33333332, x5, 192, x13)

inst_581:
// rs1_val==-1431655765 and rs2_val==1717986917, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-0x55555555;  op2val:0x66666665
TEST_RR_OP(sub, x12, x10, x11, 0x44444446, -0x55555555, 0x66666665, x5, 196, x13)

inst_582:
// rs1_val==-1431655765 and rs2_val==46339, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-0x55555555;  op2val:0xb503
TEST_RR_OP(sub, x12, x10, x11, 0xaaa9f5a8, -0x55555555, 0xb503, x5, 200, x13)

inst_583:
// rs1_val==-1431655765 and rs2_val==1431655766, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-0x55555555;  op2val:0x55555556
TEST_RR_OP(sub, x12, x10, x11, 0x55555555, -0x55555555, 0x55555556, x5, 204, x13)

inst_584:
// rs1_val < 0 and rs2_val > 0, rs2_val == 32, rs1_val == -131073
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-0x20001;  op2val:0x20
TEST_RR_OP(sub, x12, x10, x11, 0xfffdffdf, -0x20001, 0x20, x5, 208, x13)

inst_585:
// rs1_val == rs2_val, rs1_val==2 and rs2_val==2, rs1_val == 2
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x2;  op2val:0x2
TEST_RR_OP(sub, x12, x10, x11, 0x0, 0x2, 0x2, x5, 212, x13)

inst_586:
// rs1_val == (-2**(xlen-1)), rs1_val == -2147483648
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-0x80000000;  op2val:0x3
TEST_RR_OP(sub, x12, x10, x11, 0x7ffffffd, -0x80000000, 0x3, x5, 216, x13)

inst_587:
// rs2_val == 16, rs1_val == 256
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:0x100;  op2val:0x10
TEST_RR_OP(sub, x12, x10, x11, 0xf0, 0x100, 0x10, x5, 220, x13)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x4_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x4_1:
    .fill 20*(XLEN/32),4,0xdeadbeef


signature_x5_0:
    .fill 512*(XLEN/32),4,0xdeadbeef


signature_x5_1:
    .fill 56*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
