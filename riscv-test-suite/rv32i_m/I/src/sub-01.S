 
// -----------
// This file was generated by riscv_ctg (https://gitlab.com/incoresemi/riscv-compliance/riscv_ctg)
// version   : 0.1.0
// timestamp : Fri Nov  6 10:29:11 2020 GMT
// usage     : riscv_ctg \
//                  -- cgf /scratch/git-repo/incoresemi/riscv-compliance/riscv_ctg/sample_cgfs/rv32i.cgf \
//                  -- xlen 32 \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the sub instruction of the RISC-V I extension for the sub covergroup.
// 
#include "compliance_model.h"
#include "compliance_test.h"
RVTEST_ISA("RV32I")

.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*);def TEST_CASE_1=True;",sub)

RVTEST_SIGBASE( x5,signature_x5_1)

inst_0:
// rs2 == rd != rs1, rs1==x4, rs2==x3, rd==x3, rs1_val == (-2**(xlen-1)), rs1_val < 0 and rs2_val > 0, rs1_val == -2147483648, rs1_val != rs2_val
// opcode: sub ; op1:x4; op2:x3; dest:x3; op1val:-2147483648;  op2val:3
TEST_RR_OP(sub, x3, x4, x3, 0x7ffffffd, -2147483648, 3, x5, 0, x22)

inst_1:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x15, rs2==x14, rd==x12, rs1_val == 0, rs2_val == 4194304
// opcode: sub ; op1:x15; op2:x14; dest:x12; op1val:0;  op2val:4194304
TEST_RR_OP(sub, x12, x15, x14, 0xffc00000, 0, 4194304, x5, 4, x22)

inst_2:
// rs1 == rs2 != rd, rs1==x19, rs2==x19, rd==x1, rs1_val == (2**(xlen-1)-1), rs1_val > 0 and rs2_val > 0, rs2_val == 16, rs1_val == 2147483647
// opcode: sub ; op1:x19; op2:x19; dest:x1; op1val:2147483647;  op2val:16
TEST_RR_OP(sub, x1, x19, x19, 0x7fffffef, 2147483647, 16, x5, 8, x22)

inst_3:
// rs1 == rs2 == rd, rs1==x17, rs2==x17, rd==x17, rs1_val == 1, rs1_val > 0 and rs2_val < 0, rs2_val == -33554433
// opcode: sub ; op1:x17; op2:x17; dest:x17; op1val:1;  op2val:-33554433
TEST_RR_OP(sub, x17, x17, x17, 0x2000002, 1, -33554433, x5, 12, x22)

inst_4:
// rs1 == rd != rs2, rs1==x0, rs2==x21, rd==x0, rs2_val == (-2**(xlen-1)), rs1_val < 0 and rs2_val < 0, rs2_val == -2147483648
// opcode: sub ; op1:x0; op2:x21; dest:x0; op1val:-4;  op2val:-2147483648
TEST_RR_OP(sub, x0, x0, x21, 0x7ffffffc, -4, -2147483648, x5, 16, x22)

inst_5:
// rs1==x8, rs2==x2, rd==x26, rs2_val == 0, rs1_val == -5
// opcode: sub ; op1:x8; op2:x2; dest:x26; op1val:-5;  op2val:0
TEST_RR_OP(sub, x26, x8, x2, 0xfffffffb, -5, 0, x5, 20, x22)

inst_6:
// rs1==x21, rs2==x11, rd==x7, rs2_val == (2**(xlen-1)-1), rs1_val == -1073741825, rs2_val == 2147483647
// opcode: sub ; op1:x21; op2:x11; dest:x7; op1val:-1073741825;  op2val:2147483647
TEST_RR_OP(sub, x7, x21, x11, 0x40000000, -1073741825, 2147483647, x5, 24, x22)

inst_7:
// rs1==x14, rs2==x27, rd==x18, rs2_val == 1, rs1_val == -32769
// opcode: sub ; op1:x14; op2:x27; dest:x18; op1val:-32769;  op2val:1
TEST_RR_OP(sub, x18, x14, x27, 0xffff7ffe, -32769, 1, x5, 28, x22)

inst_8:
// rs1==x18, rs2==x25, rd==x21, rs1_val == rs2_val, rs1_val == 2097152, rs2_val == 2097152
// opcode: sub ; op1:x18; op2:x25; dest:x21; op1val:2097152;  op2val:2097152
TEST_RR_OP(sub, x21, x18, x25, 0x0, 2097152, 2097152, x5, 32, x22)

inst_9:
// rs1==x23, rs2==x15, rd==x13, rs1_val == 2, rs2_val == 65536
// opcode: sub ; op1:x23; op2:x15; dest:x13; op1val:2;  op2val:65536
TEST_RR_OP(sub, x13, x23, x15, 0xffff0002, 2, 65536, x5, 36, x22)

inst_10:
// rs1==x13, rs2==x6, rd==x28, rs1_val == 4, rs2_val == 128
// opcode: sub ; op1:x13; op2:x6; dest:x28; op1val:4;  op2val:128
TEST_RR_OP(sub, x28, x13, x6, 0xffffff84, 4, 128, x5, 40, x22)

inst_11:
// rs1==x25, rs2==x1, rd==x19, rs1_val == 8, rs2_val == 134217728
// opcode: sub ; op1:x25; op2:x1; dest:x19; op1val:8;  op2val:134217728
TEST_RR_OP(sub, x19, x25, x1, 0xf8000008, 8, 134217728, x5, 44, x22)

inst_12:
// rs1==x3, rs2==x26, rd==x29, rs1_val == 16, rs2_val == 256
// opcode: sub ; op1:x3; op2:x26; dest:x29; op1val:16;  op2val:256
TEST_RR_OP(sub, x29, x3, x26, 0xffffff10, 16, 256, x5, 48, x22)

inst_13:
// rs1==x2, rs2==x23, rd==x9, rs1_val == 32, rs2_val == 1024
// opcode: sub ; op1:x2; op2:x23; dest:x9; op1val:32;  op2val:1024
TEST_RR_OP(sub, x9, x2, x23, 0xfffffc20, 32, 1024, x5, 52, x22)

inst_14:
// rs1==x16, rs2==x30, rd==x31, rs1_val == 64, rs2_val == 2048
// opcode: sub ; op1:x16; op2:x30; dest:x31; op1val:64;  op2val:2048
TEST_RR_OP(sub, x31, x16, x30, 0xfffff840, 64, 2048, x5, 56, x22)

inst_15:
// rs1==x9, rs2==x20, rd==x10, rs1_val == 128, 
// opcode: sub ; op1:x9; op2:x20; dest:x10; op1val:128;  op2val:134217728
TEST_RR_OP(sub, x10, x9, x20, 0xf8000080, 128, 134217728, x5, 60, x22)
RVTEST_SIGBASE( x3,signature_x3_0)

inst_16:
// rs1==x24, rs2==x8, rd==x15, rs1_val == 256, 
// opcode: sub ; op1:x24; op2:x8; dest:x15; op1val:256;  op2val:7
TEST_RR_OP(sub, x15, x24, x8, 0xf9, 256, 7, x3, 0, x17)

inst_17:
// rs1==x5, rs2==x13, rd==x23, rs1_val == 512, 
// opcode: sub ; op1:x5; op2:x13; dest:x23; op1val:512;  op2val:1024
TEST_RR_OP(sub, x23, x5, x13, 0xfffffe00, 512, 1024, x3, 4, x17)

inst_18:
// rs1==x31, rs2==x22, rd==x14, rs1_val == 1024, 
// opcode: sub ; op1:x31; op2:x22; dest:x14; op1val:1024;  op2val:2147483647
TEST_RR_OP(sub, x14, x31, x22, 0x80000401, 1024, 2147483647, x3, 8, x17)

inst_19:
// rs1==x7, rs2==x4, rd==x22, rs1_val == 2048, rs2_val == -4097
// opcode: sub ; op1:x7; op2:x4; dest:x22; op1val:2048;  op2val:-4097
TEST_RR_OP(sub, x22, x7, x4, 0x1801, 2048, -4097, x3, 12, x17)

inst_20:
// rs1==x22, rs2==x5, rd==x27, rs1_val == 4096, 
// opcode: sub ; op1:x22; op2:x5; dest:x27; op1val:4096;  op2val:16
TEST_RR_OP(sub, x27, x22, x5, 0xff0, 4096, 16, x3, 16, x17)

inst_21:
// rs1==x27, rs2==x24, rd==x20, rs1_val == 8192, rs2_val == 524288
// opcode: sub ; op1:x27; op2:x24; dest:x20; op1val:8192;  op2val:524288
TEST_RR_OP(sub, x20, x27, x24, 0xfff82000, 8192, 524288, x3, 20, x17)

inst_22:
// rs1==x10, rs2==x7, rd==x25, rs1_val == 16384, 
// opcode: sub ; op1:x10; op2:x7; dest:x25; op1val:16384;  op2val:2097152
TEST_RR_OP(sub, x25, x10, x7, 0xffe04000, 16384, 2097152, x3, 24, x17)

inst_23:
// rs1==x6, rs2==x16, rd==x24, rs1_val == 32768, rs2_val == 4
// opcode: sub ; op1:x6; op2:x16; dest:x24; op1val:32768;  op2val:4
TEST_RR_OP(sub, x24, x6, x16, 0x7ffc, 32768, 4, x3, 28, x17)

inst_24:
// rs1==x12, rs2==x28, rd==x30, rs1_val == 65536, rs2_val == -8193
// opcode: sub ; op1:x12; op2:x28; dest:x30; op1val:65536;  op2val:-8193
TEST_RR_OP(sub, x30, x12, x28, 0x12001, 65536, -8193, x3, 32, x17)

inst_25:
// rs1==x28, rs2==x31, rd==x4, rs1_val == 131072, 
// opcode: sub ; op1:x28; op2:x31; dest:x4; op1val:131072;  op2val:65536
TEST_RR_OP(sub, x4, x28, x31, 0x10000, 131072, 65536, x3, 36, x17)

inst_26:
// rs1==x20, rs2==x10, rd==x5, rs1_val == 262144, rs2_val == -1073741825
// opcode: sub ; op1:x20; op2:x10; dest:x5; op1val:262144;  op2val:-1073741825
TEST_RR_OP(sub, x5, x20, x10, 0x40040001, 262144, -1073741825, x3, 40, x17)

inst_27:
// rs1==x26, rs2==x18, rd==x11, rs1_val == 524288, 
// opcode: sub ; op1:x26; op2:x18; dest:x11; op1val:524288;  op2val:-1073741825
TEST_RR_OP(sub, x11, x26, x18, 0x40080001, 524288, -1073741825, x3, 44, x17)

inst_28:
// rs1==x1, rs2==x9, rd==x8, rs1_val == 1048576, rs2_val == -4194305
// opcode: sub ; op1:x1; op2:x9; dest:x8; op1val:1048576;  op2val:-4194305
TEST_RR_OP(sub, x8, x1, x9, 0x500001, 1048576, -4194305, x3, 48, x17)

inst_29:
// rs1==x11, rs2==x12, rd==x16, rs1_val == 4194304, 
// opcode: sub ; op1:x11; op2:x12; dest:x16; op1val:4194304;  op2val:524288
TEST_RR_OP(sub, x16, x11, x12, 0x380000, 4194304, 524288, x3, 52, x17)

inst_30:
// rs1==x30, rs2==x0, rd==x2, rs1_val == 8388608, rs2_val == -1048577
// opcode: sub ; op1:x30; op2:x0; dest:x2; op1val:8388608;  op2val:-1048577
TEST_RR_OP(sub, x2, x30, x0, 0x900001, 8388608, -1048577, x3, 56, x17)

inst_31:
// rs1==x29, rs1_val == 16777216, 
// opcode: sub ; op1:x29; op2:x0; dest:x26; op1val:16777216;  op2val:1
TEST_RR_OP(sub, x26, x29, x0, 0xffffff, 16777216, 1, x3, 60, x17)

inst_32:
// rs2==x29, rs1_val == 33554432, 
// opcode: sub ; op1:x14; op2:x29; dest:x11; op1val:33554432;  op2val:3
TEST_RR_OP(sub, x11, x14, x29, 0x1fffffd, 33554432, 3, x3, 64, x1)

inst_33:
// rd==x6, rs1_val == 67108864, rs2_val == 2
// opcode: sub ; op1:x18; op2:x14; dest:x6; op1val:67108864;  op2val:2
TEST_RR_OP(sub, x6, x18, x14, 0x3fffffe, 67108864, 2, x3, 68, x1)

inst_34:
// rs1_val == 134217728, rs2_val == -257
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:134217728;  op2val:-257
TEST_RR_OP(sub, x12, x10, x11, 0x8000101, 134217728, -257, x3, 72, x1)

inst_35:
// rs1_val == 268435456, rs2_val == -134217729
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:268435456;  op2val:-134217729
TEST_RR_OP(sub, x12, x10, x11, 0x18000001, 268435456, -134217729, x3, 76, x1)

inst_36:
// rs1_val == 536870912, rs2_val == 1048576
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:536870912;  op2val:1048576
TEST_RR_OP(sub, x12, x10, x11, 0x1ff00000, 536870912, 1048576, x3, 80, x1)

inst_37:
// rs1_val == 1073741824, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:1073741824;  op2val:134217728
TEST_RR_OP(sub, x12, x10, x11, 0x38000000, 1073741824, 134217728, x3, 84, x1)

inst_38:
// rs1_val == -2, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-2;  op2val:-2147483648
TEST_RR_OP(sub, x12, x10, x11, 0x7ffffffe, -2, -2147483648, x3, 88, x1)

inst_39:
// rs1_val == -3, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-3;  op2val:-1073741824
TEST_RR_OP(sub, x12, x10, x11, 0x3ffffffd, -3, -1073741824, x3, 92, x1)

inst_40:
// rs1_val == -9, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-9;  op2val:-2147483648
TEST_RR_OP(sub, x12, x10, x11, 0x7ffffff7, -9, -2147483648, x3, 96, x1)

inst_41:
// rs1_val == -17, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-17;  op2val:128
TEST_RR_OP(sub, x12, x10, x11, 0xffffff6f, -17, 128, x3, 100, x1)

inst_42:
// rs1_val == -33, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-33;  op2val:-1
TEST_RR_OP(sub, x12, x10, x11, 0xffffffe0, -33, -1, x3, 104, x1)

inst_43:
// rs1_val == -65, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-65;  op2val:-1048577
TEST_RR_OP(sub, x12, x10, x11, 0xfffc0, -65, -1048577, x3, 108, x1)

inst_44:
// rs1_val == -129, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-129;  op2val:7
TEST_RR_OP(sub, x12, x10, x11, 0xffffff78, -129, 7, x3, 112, x1)

inst_45:
// rs1_val == -257, rs2_val == 1431655765
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-257;  op2val:1431655765
TEST_RR_OP(sub, x12, x10, x11, 0xaaaaa9aa, -257, 1431655765, x3, 116, x1)

inst_46:
// rs1_val == -513, rs2_val == -32769
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-513;  op2val:-32769
TEST_RR_OP(sub, x12, x10, x11, 0x7e00, -513, -32769, x3, 120, x1)

inst_47:
// rs2_val == -262145, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:9;  op2val:-262145
TEST_RR_OP(sub, x12, x10, x11, 0x4000a, 9, -262145, x3, 124, x1)

inst_48:
// rs2_val == -524289, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-5;  op2val:-524289
TEST_RR_OP(sub, x12, x10, x11, 0x7fffc, -5, -524289, x3, 128, x1)

inst_49:
// rs2_val == -2097153, rs1_val == -8193
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-8193;  op2val:-2097153
TEST_RR_OP(sub, x12, x10, x11, 0x1fe000, -8193, -2097153, x3, 132, x1)

inst_50:
// rs2_val == -8388609, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-1073741824;  op2val:-8388609
TEST_RR_OP(sub, x12, x10, x11, 0xc0800001, -1073741824, -8388609, x3, 136, x1)

inst_51:
// rs2_val == -16777217, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:16;  op2val:-16777217
TEST_RR_OP(sub, x12, x10, x11, 0x1000011, 16, -16777217, x3, 140, x1)

inst_52:
// rs2_val == -67108865, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-1073741825;  op2val:-67108865
TEST_RR_OP(sub, x12, x10, x11, 0xc4000000, -1073741825, -67108865, x3, 144, x1)

inst_53:
// rs2_val == -268435457, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:2097152;  op2val:-268435457
TEST_RR_OP(sub, x12, x10, x11, 0x10200001, 2097152, -268435457, x3, 148, x1)

inst_54:
// rs2_val == -536870913, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-129;  op2val:-536870913
TEST_RR_OP(sub, x12, x10, x11, 0x1fffff80, -129, -536870913, x3, 152, x1)

inst_55:
// rs2_val == -1431655766, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:536870912;  op2val:-1431655766
TEST_RR_OP(sub, x12, x10, x11, 0x75555556, 536870912, -1431655766, x3, 156, x1)

inst_56:
// rs1_val == -1025, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-1025;  op2val:524288
TEST_RR_OP(sub, x12, x10, x11, 0xfff7fbff, -1025, 524288, x3, 160, x1)

inst_57:
// rs1_val == -2049, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-2049;  op2val:-4
TEST_RR_OP(sub, x12, x10, x11, 0xfffff803, -2049, -4, x3, 164, x1)

inst_58:
// rs1_val == -4097, rs2_val == -17
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-4097;  op2val:-17
TEST_RR_OP(sub, x12, x10, x11, 0xfffff010, -4097, -17, x3, 168, x1)

inst_59:
// rs1_val == -16385, rs2_val == 268435456
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-16385;  op2val:268435456
TEST_RR_OP(sub, x12, x10, x11, 0xefffbfff, -16385, 268435456, x3, 172, x1)

inst_60:
// rs1_val == -65537, rs2_val == -9
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-65537;  op2val:-9
TEST_RR_OP(sub, x12, x10, x11, 0xffff0008, -65537, -9, x3, 176, x1)

inst_61:
// rs1_val == -131073, rs2_val == 33554432
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-131073;  op2val:33554432
TEST_RR_OP(sub, x12, x10, x11, 0xfdfdffff, -131073, 33554432, x3, 180, x1)

inst_62:
// rs1_val == -262145, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-262145;  op2val:-524289
TEST_RR_OP(sub, x12, x10, x11, 0x40000, -262145, -524289, x3, 184, x1)

inst_63:
// rs1_val == -524289, rs2_val == -2
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-524289;  op2val:-2
TEST_RR_OP(sub, x12, x10, x11, 0xfff80001, -524289, -2, x3, 188, x1)

inst_64:
// rs1_val == -1048577, rs2_val == -5
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-1048577;  op2val:-5
TEST_RR_OP(sub, x12, x10, x11, 0xfff00004, -1048577, -5, x3, 192, x1)

inst_65:
// rs1_val == -2097153, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-2097153;  op2val:256
TEST_RR_OP(sub, x12, x10, x11, 0xffdffeff, -2097153, 256, x3, 196, x1)

inst_66:
// rs1_val == -4194305, rs2_val == -513
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-4194305;  op2val:-513
TEST_RR_OP(sub, x12, x10, x11, 0xffc00200, -4194305, -513, x3, 200, x1)

inst_67:
// rs1_val == -8388609, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-8388609;  op2val:134217728
TEST_RR_OP(sub, x12, x10, x11, 0xf77fffff, -8388609, 134217728, x3, 204, x1)

inst_68:
// rs1_val == -16777217, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-16777217;  op2val:-33554433
TEST_RR_OP(sub, x12, x10, x11, 0x1000000, -16777217, -33554433, x3, 208, x1)

inst_69:
// rs1_val == -33554433, rs2_val == -33
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-33554433;  op2val:-33
TEST_RR_OP(sub, x12, x10, x11, 0xfe000020, -33554433, -33, x3, 212, x1)

inst_70:
// rs1_val == -67108865, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-67108865;  op2val:-32769
TEST_RR_OP(sub, x12, x10, x11, 0xfc008000, -67108865, -32769, x3, 216, x1)

inst_71:
// rs1_val == -134217729, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-134217729;  op2val:65536
TEST_RR_OP(sub, x12, x10, x11, 0xf7feffff, -134217729, 65536, x3, 220, x1)

inst_72:
// rs1_val == -268435457, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-268435457;  op2val:524288
TEST_RR_OP(sub, x12, x10, x11, 0xeff7ffff, -268435457, 524288, x3, 224, x1)

inst_73:
// rs1_val == -536870913, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-536870913;  op2val:-1048577
TEST_RR_OP(sub, x12, x10, x11, 0xe0100000, -536870913, -1048577, x3, 228, x1)

inst_74:
// rs1_val == 1431655765, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:1431655765;  op2val:-8
TEST_RR_OP(sub, x12, x10, x11, 0x5555555d, 1431655765, -8, x3, 232, x1)

inst_75:
// rs1_val == -1431655766, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-1431655766;  op2val:1431655765
TEST_RR_OP(sub, x12, x10, x11, 0x55555555, -1431655766, 1431655765, x3, 236, x1)

inst_76:
// rs2_val == 8, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-9;  op2val:8
TEST_RR_OP(sub, x12, x10, x11, 0xffffffef, -9, 8, x3, 240, x1)

inst_77:
// rs2_val == 32, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-134217729;  op2val:32
TEST_RR_OP(sub, x12, x10, x11, 0xf7ffffdf, -134217729, 32, x3, 244, x1)

inst_78:
// rs2_val == 64, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:16;  op2val:64
TEST_RR_OP(sub, x12, x10, x11, 0xffffffd0, 16, 64, x3, 248, x1)

inst_79:
// rs2_val == 512, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:7;  op2val:512
TEST_RR_OP(sub, x12, x10, x11, 0xfffffe07, 7, 512, x3, 252, x1)

inst_80:
// rs2_val == 4096, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-257;  op2val:4096
TEST_RR_OP(sub, x12, x10, x11, 0xffffeeff, -257, 4096, x3, 256, x1)

inst_81:
// rs2_val == 8192, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:512;  op2val:8192
TEST_RR_OP(sub, x12, x10, x11, 0xffffe200, 512, 8192, x3, 260, x1)

inst_82:
// rs2_val == 16384, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:1;  op2val:16384
TEST_RR_OP(sub, x12, x10, x11, 0xffffc001, 1, 16384, x3, 264, x1)

inst_83:
// rs2_val == 32768, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:2;  op2val:32768
TEST_RR_OP(sub, x12, x10, x11, 0xffff8002, 2, 32768, x3, 268, x1)

inst_84:
// rs2_val == 262144, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:9;  op2val:262144
TEST_RR_OP(sub, x12, x10, x11, 0xfffc0009, 9, 262144, x3, 272, x1)

inst_85:
// rs2_val == 8388608, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-1048577;  op2val:8388608
TEST_RR_OP(sub, x12, x10, x11, 0xff6fffff, -1048577, 8388608, x3, 276, x1)

inst_86:
// rs2_val == 16777216, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-65537;  op2val:16777216
TEST_RR_OP(sub, x12, x10, x11, 0xfefeffff, -65537, 16777216, x3, 280, x1)

inst_87:
// rs2_val == 67108864, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-513;  op2val:67108864
TEST_RR_OP(sub, x12, x10, x11, 0xfbfffdff, -513, 67108864, x3, 284, x1)

inst_88:
// rs2_val == 536870912, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-9;  op2val:536870912
TEST_RR_OP(sub, x12, x10, x11, 0xdffffff7, -9, 536870912, x3, 288, x1)

inst_89:
// rs2_val == 1073741824, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-33554433;  op2val:1073741824
TEST_RR_OP(sub, x12, x10, x11, 0xbdffffff, -33554433, 1073741824, x3, 292, x1)

inst_90:
// rs2_val == -131073, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:268435456;  op2val:-131073
TEST_RR_OP(sub, x12, x10, x11, 0x10020001, 268435456, -131073, x3, 296, x1)

inst_91:
// rs2_val == -3, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-33;  op2val:-3
TEST_RR_OP(sub, x12, x10, x11, 0xffffffe2, -33, -3, x3, 300, x1)

inst_92:
// rs2_val == -65, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:134217728;  op2val:-65
TEST_RR_OP(sub, x12, x10, x11, 0x8000041, 134217728, -65, x3, 304, x1)

inst_93:
// rs2_val == -129, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:1073741824;  op2val:-129
TEST_RR_OP(sub, x12, x10, x11, 0x40000081, 1073741824, -129, x3, 308, x1)

inst_94:
// rs2_val == -1025, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:32;  op2val:-1025
TEST_RR_OP(sub, x12, x10, x11, 0x421, 32, -1025, x3, 312, x1)

inst_95:
// rs2_val == -2049, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:6;  op2val:-2049
TEST_RR_OP(sub, x12, x10, x11, 0x807, 6, -2049, x3, 316, x1)

inst_96:
// rs2_val == -16385, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-2147483648;  op2val:-16385
TEST_RR_OP(sub, x12, x10, x11, 0x80004001, -2147483648, -16385, x3, 320, x1)

inst_97:
// rs2_val == -65537, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:134217728;  op2val:-65537
TEST_RR_OP(sub, x12, x10, x11, 0x8010001, 134217728, -65537, x3, 324, x1)

inst_98:
// rs2_val == 131072, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:-17;  op2val:131072
TEST_RR_OP(sub, x12, x10, x11, 0xfffdffef, -17, 131072, x3, 328, x1)

inst_99:
// rs1_val == (2**(xlen-1)-1), rs1_val > 0 and rs2_val > 0, rs2_val == 16, rs1_val == 2147483647
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:2147483647;  op2val:16
TEST_RR_OP(sub, x12, x10, x11, 0x7fffffef, 2147483647, 16, x3, 332, x1)

inst_100:
// rs1_val == 8388608, rs2_val == -1048577
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:8388608;  op2val:-1048577
TEST_RR_OP(sub, x12, x10, x11, 0x900001, 8388608, -1048577, x3, 336, x1)

inst_101:
// rs1_val == 16777216, 
// opcode: sub ; op1:x10; op2:x11; dest:x12; op1val:16777216;  op2val:1
TEST_RR_OP(sub, x12, x10, x11, 0xffffff, 16777216, 1, x3, 340, x1)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x5_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x5_1:
    .fill 16*(XLEN/32),4,0xdeadbeef


signature_x3_0:
    .fill 86*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
