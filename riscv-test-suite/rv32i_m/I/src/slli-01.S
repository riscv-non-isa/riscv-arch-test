
// -----------
// This file was generated by riscv_ctg (https://gitlab.com/incoresemi/riscv-compliance/riscv_ctg)
// version   : 0.2.0
// timestamp : Wed Nov 18 05:39:15 2020 GMT
// usage     : riscv_ctg \
//                  -- cgf ('/scratch/git-repo/incoresemi/riscv-compliance/riscv_ctg/sample_cgfs/dataset.cgf', '/scratch/git-repo/incoresemi/riscv-compliance/riscv_ctg/sample_cgfs/rv32i.cgf') \
//                  -- xlen 32 \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the slli instruction of the RISC-V I extension for the slli covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32I")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*);def TEST_CASE_1=True;",slli)

RVTEST_SIGBASE( x9,signature_x9_1)

inst_0:
// rs1 != rd, rs1==x3, rd==x13, rs1_val < 0 and imm_val > 0 and imm_val < xlen, rs1_val == -524289
// opcode: slli ; op1:x3; dest:x13; op1val:-524289;  immval:17
TEST_IMM_OP( slli, x13, x3, 0xfffe0000, -524289, 17, x9, 0, x24)

inst_1:
// rs1 == rd, rs1==x0, rd==x0, rs1_val > 0 and imm_val > 0 and imm_val < xlen, rs1_val == 2097152
// opcode: slli ; op1:x0; dest:x0; op1val:2097152;  immval:11
TEST_IMM_OP( slli, x0, x0, 0x0, 2097152, 11, x9, 4, x24)

inst_2:
// rs1==x26, rd==x28, rs1_val < 0 and imm_val == 0, rs1_val == -262145
// opcode: slli ; op1:x26; dest:x28; op1val:-262145;  immval:0
TEST_IMM_OP( slli, x28, x26, 0xfffbffff, -262145, 0, x9, 8, x24)

inst_3:
// rs1==x8, rd==x15, rs1_val > 0 and imm_val == 0, rs1_val == (2**(xlen-1)-1) and imm_val >= 0 and imm_val < xlen, rs1_val == 2147483647
// opcode: slli ; op1:x8; dest:x15; op1val:2147483647;  immval:0
TEST_IMM_OP( slli, x15, x8, 0x7fffffff, 2147483647, 0, x9, 12, x24)

inst_4:
// rs1==x22, rd==x6, rs1_val < 0 and imm_val == (xlen-1), rs1_val == -134217729
// opcode: slli ; op1:x22; dest:x6; op1val:-134217729;  immval:31
TEST_IMM_OP( slli, x6, x22, 0x80000000, -134217729, 31, x9, 16, x24)

inst_5:
// rs1==x19, rd==x2, rs1_val > 0 and imm_val == (xlen-1), rs1_val==858993458
// opcode: slli ; op1:x19; dest:x2; op1val:858993458;  immval:31
TEST_IMM_OP( slli, x2, x19, 0x0, 858993458, 31, x9, 20, x24)

inst_6:
// rs1==x12, rd==x26, rs1_val == imm_val and imm_val > 0 and imm_val < xlen, 
// opcode: slli ; op1:x12; dest:x26; op1val:7;  immval:7
TEST_IMM_OP( slli, x26, x12, 0x380, 7, 7, x9, 24, x24)

inst_7:
// rs1==x29, rd==x16, rs1_val == (-2**(xlen-1)) and imm_val >= 0 and imm_val < xlen, rs1_val == -2147483648, imm_val == 8
// opcode: slli ; op1:x29; dest:x16; op1val:-2147483648;  immval:8
TEST_IMM_OP( slli, x16, x29, 0x0, -2147483648, 8, x9, 28, x24)

inst_8:
// rs1==x13, rd==x20, rs1_val == 0 and imm_val >= 0 and imm_val < xlen, rs1_val==0
// opcode: slli ; op1:x13; dest:x20; op1val:0;  immval:17
TEST_IMM_OP( slli, x20, x13, 0x0, 0, 17, x9, 32, x24)

inst_9:
// rs1==x7, rd==x4, rs1_val == 1 and imm_val >= 0 and imm_val < xlen, rs1_val == 1, imm_val == 21
// opcode: slli ; op1:x7; dest:x4; op1val:1;  immval:21
TEST_IMM_OP( slli, x4, x7, 0x200000, 1, 21, x9, 36, x24)

inst_10:
// rs1==x1, rd==x30, rs1_val == 2, rs1_val==2
// opcode: slli ; op1:x1; dest:x30; op1val:2;  immval:31
TEST_IMM_OP( slli, x30, x1, 0x0, 2, 31, x9, 40, x24)

inst_11:
// rs1==x23, rd==x18, rs1_val == 4, rs1_val==4
// opcode: slli ; op1:x23; dest:x18; op1val:4;  immval:19
TEST_IMM_OP( slli, x18, x23, 0x200000, 4, 19, x9, 44, x24)

inst_12:
// rs1==x17, rd==x21, rs1_val == 8, 
// opcode: slli ; op1:x17; dest:x21; op1val:8;  immval:3
TEST_IMM_OP( slli, x21, x17, 0x40, 8, 3, x9, 48, x24)

inst_13:
// rs1==x10, rd==x8, rs1_val == 16, 
// opcode: slli ; op1:x10; dest:x8; op1val:16;  immval:12
TEST_IMM_OP( slli, x8, x10, 0x10000, 16, 12, x9, 52, x24)

inst_14:
// rs1==x16, rd==x25, rs1_val == 32, imm_val == 30
// opcode: slli ; op1:x16; dest:x25; op1val:32;  immval:30
TEST_IMM_OP( slli, x25, x16, 0x0, 32, 30, x9, 56, x24)

inst_15:
// rs1==x21, rd==x12, rs1_val == 64, imm_val == 2
// opcode: slli ; op1:x21; dest:x12; op1val:64;  immval:2
TEST_IMM_OP( slli, x12, x21, 0x100, 64, 2, x9, 60, x24)

inst_16:
// rs1==x11, rd==x17, rs1_val == 128, imm_val == 23
// opcode: slli ; op1:x11; dest:x17; op1val:128;  immval:23
TEST_IMM_OP( slli, x17, x11, 0x40000000, 128, 23, x9, 64, x24)

inst_17:
// rs1==x18, rd==x19, rs1_val == 256, imm_val == 10
// opcode: slli ; op1:x18; dest:x19; op1val:256;  immval:10
TEST_IMM_OP( slli, x19, x18, 0x40000, 256, 10, x9, 68, x24)

inst_18:
// rs1==x25, rd==x29, rs1_val == 512, 
// opcode: slli ; op1:x25; dest:x29; op1val:512;  immval:5
TEST_IMM_OP( slli, x29, x25, 0x4000, 512, 5, x9, 72, x24)

inst_19:
// rs1==x28, rd==x31, rs1_val == 1024, 
// opcode: slli ; op1:x28; dest:x31; op1val:1024;  immval:9
TEST_IMM_OP( slli, x31, x28, 0x80000, 1024, 9, x9, 76, x24)

inst_20:
// rs1==x31, rd==x23, rs1_val == 2048, 
// opcode: slli ; op1:x31; dest:x23; op1val:2048;  immval:3
TEST_IMM_OP( slli, x23, x31, 0x4000, 2048, 3, x9, 80, x24)

inst_21:
// rs1==x4, rd==x7, rs1_val == 4096, 
// opcode: slli ; op1:x4; dest:x7; op1val:4096;  immval:21
TEST_IMM_OP( slli, x7, x4, 0x0, 4096, 21, x9, 84, x24)

inst_22:
// rs1==x14, rd==x5, rs1_val == 8192, 
// opcode: slli ; op1:x14; dest:x5; op1val:8192;  immval:21
TEST_IMM_OP( slli, x5, x14, 0x0, 8192, 21, x9, 88, x24)
RVTEST_SIGBASE( x4,signature_x4_0)

inst_23:
// rs1==x2, rd==x10, rs1_val == 16384, 
// opcode: slli ; op1:x2; dest:x10; op1val:16384;  immval:6
TEST_IMM_OP( slli, x10, x2, 0x100000, 16384, 6, x4, 0, x7)

inst_24:
// rs1==x5, rd==x3, rs1_val == 32768, 
// opcode: slli ; op1:x5; dest:x3; op1val:32768;  immval:10
TEST_IMM_OP( slli, x3, x5, 0x2000000, 32768, 10, x4, 4, x7)

inst_25:
// rs1==x27, rd==x9, rs1_val == 65536, imm_val == 16
// opcode: slli ; op1:x27; dest:x9; op1val:65536;  immval:16
TEST_IMM_OP( slli, x9, x27, 0x0, 65536, 16, x4, 8, x7)

inst_26:
// rs1==x20, rd==x22, rs1_val == 131072, imm_val == 29
// opcode: slli ; op1:x20; dest:x22; op1val:131072;  immval:29
TEST_IMM_OP( slli, x22, x20, 0x0, 131072, 29, x4, 12, x7)

inst_27:
// rs1==x6, rd==x1, rs1_val == 262144, 
// opcode: slli ; op1:x6; dest:x1; op1val:262144;  immval:21
TEST_IMM_OP( slli, x1, x6, 0x0, 262144, 21, x4, 16, x7)

inst_28:
// rs1==x9, rd==x27, rs1_val == 524288, 
// opcode: slli ; op1:x9; dest:x27; op1val:524288;  immval:30
TEST_IMM_OP( slli, x27, x9, 0x0, 524288, 30, x4, 20, x7)

inst_29:
// rs1==x24, rd==x14, rs1_val == 1048576, 
// opcode: slli ; op1:x24; dest:x14; op1val:1048576;  immval:7
TEST_IMM_OP( slli, x14, x24, 0x8000000, 1048576, 7, x4, 24, x7)

inst_30:
// rs1==x30, rd==x24, rs1_val == 4194304, 
// opcode: slli ; op1:x30; dest:x24; op1val:4194304;  immval:19
TEST_IMM_OP( slli, x24, x30, 0x0, 4194304, 19, x4, 28, x7)

inst_31:
// rs1==x15, rd==x11, rs1_val == 8388608, 
// opcode: slli ; op1:x15; dest:x11; op1val:8388608;  immval:21
TEST_IMM_OP( slli, x11, x15, 0x0, 8388608, 21, x4, 32, x7)

inst_32:
// rs1_val == 16777216, 
// opcode: slli ; op1:x10; dest:x11; op1val:16777216;  immval:8
TEST_IMM_OP( slli, x11, x10, 0x0, 16777216, 8, x4, 36, x7)

inst_33:
// rs1_val == 33554432, 
// opcode: slli ; op1:x10; dest:x11; op1val:33554432;  immval:11
TEST_IMM_OP( slli, x11, x10, 0x0, 33554432, 11, x4, 40, x7)

inst_34:
// rs1_val == 67108864, 
// opcode: slli ; op1:x10; dest:x11; op1val:67108864;  immval:29
TEST_IMM_OP( slli, x11, x10, 0x0, 67108864, 29, x4, 44, x7)

inst_35:
// rs1_val == 134217728, 
// opcode: slli ; op1:x10; dest:x11; op1val:134217728;  immval:9
TEST_IMM_OP( slli, x11, x10, 0x0, 134217728, 9, x4, 48, x7)

inst_36:
// rs1_val == 268435456, 
// opcode: slli ; op1:x10; dest:x11; op1val:268435456;  immval:5
TEST_IMM_OP( slli, x11, x10, 0x0, 268435456, 5, x4, 52, x7)

inst_37:
// rs1_val == 536870912, 
// opcode: slli ; op1:x10; dest:x11; op1val:536870912;  immval:9
TEST_IMM_OP( slli, x11, x10, 0x0, 536870912, 9, x4, 56, x7)

inst_38:
// rs1_val == 1073741824, 
// opcode: slli ; op1:x10; dest:x11; op1val:1073741824;  immval:23
TEST_IMM_OP( slli, x11, x10, 0x0, 1073741824, 23, x4, 60, x7)

inst_39:
// rs1_val == -2, 
// opcode: slli ; op1:x10; dest:x11; op1val:-2;  immval:0
TEST_IMM_OP( slli, x11, x10, 0xfffffffe, -2, 0, x4, 64, x7)

inst_40:
// rs1_val == -3, 
// opcode: slli ; op1:x10; dest:x11; op1val:-3;  immval:21
TEST_IMM_OP( slli, x11, x10, 0xffa00000, -3, 21, x4, 68, x7)

inst_41:
// rs1_val == -5, 
// opcode: slli ; op1:x10; dest:x11; op1val:-5;  immval:12
TEST_IMM_OP( slli, x11, x10, 0xffffb000, -5, 12, x4, 72, x7)

inst_42:
// rs1_val == -9, imm_val == 4
// opcode: slli ; op1:x10; dest:x11; op1val:-9;  immval:4
TEST_IMM_OP( slli, x11, x10, 0xffffff70, -9, 4, x4, 76, x7)

inst_43:
// rs1_val == -17, 
// opcode: slli ; op1:x10; dest:x11; op1val:-17;  immval:23
TEST_IMM_OP( slli, x11, x10, 0xf7800000, -17, 23, x4, 80, x7)

inst_44:
// rs1_val == -33, 
// opcode: slli ; op1:x10; dest:x11; op1val:-33;  immval:17
TEST_IMM_OP( slli, x11, x10, 0xffbe0000, -33, 17, x4, 84, x7)

inst_45:
// rs1_val == -65, 
// opcode: slli ; op1:x10; dest:x11; op1val:-65;  immval:12
TEST_IMM_OP( slli, x11, x10, 0xfffbf000, -65, 12, x4, 88, x7)

inst_46:
// rs1_val == -129, 
// opcode: slli ; op1:x10; dest:x11; op1val:-129;  immval:21
TEST_IMM_OP( slli, x11, x10, 0xefe00000, -129, 21, x4, 92, x7)

inst_47:
// rs1_val == -257, 
// opcode: slli ; op1:x10; dest:x11; op1val:-257;  immval:9
TEST_IMM_OP( slli, x11, x10, 0xfffdfe00, -257, 9, x4, 96, x7)

inst_48:
// rs1_val == -513, imm_val == 27
// opcode: slli ; op1:x10; dest:x11; op1val:-513;  immval:27
TEST_IMM_OP( slli, x11, x10, 0xf8000000, -513, 27, x4, 100, x7)

inst_49:
// rs1_val == -1025, 
// opcode: slli ; op1:x10; dest:x11; op1val:-1025;  immval:3
TEST_IMM_OP( slli, x11, x10, 0xffffdff8, -1025, 3, x4, 104, x7)

inst_50:
// rs1_val == -2049, 
// opcode: slli ; op1:x10; dest:x11; op1val:-2049;  immval:17
TEST_IMM_OP( slli, x11, x10, 0xeffe0000, -2049, 17, x4, 108, x7)

inst_51:
// rs1_val == -4097, 
// opcode: slli ; op1:x10; dest:x11; op1val:-4097;  immval:21
TEST_IMM_OP( slli, x11, x10, 0xffe00000, -4097, 21, x4, 112, x7)

inst_52:
// rs1_val == -8193, 
// opcode: slli ; op1:x10; dest:x11; op1val:-8193;  immval:27
TEST_IMM_OP( slli, x11, x10, 0xf8000000, -8193, 27, x4, 116, x7)

inst_53:
// rs1_val == -16385, 
// opcode: slli ; op1:x10; dest:x11; op1val:-16385;  immval:29
TEST_IMM_OP( slli, x11, x10, 0xe0000000, -16385, 29, x4, 120, x7)

inst_54:
// rs1_val == -32769, 
// opcode: slli ; op1:x10; dest:x11; op1val:-32769;  immval:30
TEST_IMM_OP( slli, x11, x10, 0xc0000000, -32769, 30, x4, 124, x7)

inst_55:
// rs1_val == -65537, imm_val == 15
// opcode: slli ; op1:x10; dest:x11; op1val:-65537;  immval:15
TEST_IMM_OP( slli, x11, x10, 0x7fff8000, -65537, 15, x4, 128, x7)

inst_56:
// rs1_val == -131073, 
// opcode: slli ; op1:x10; dest:x11; op1val:-131073;  immval:30
TEST_IMM_OP( slli, x11, x10, 0xc0000000, -131073, 30, x4, 132, x7)

inst_57:
// rs1_val == -2097153, 
// opcode: slli ; op1:x10; dest:x11; op1val:-2097153;  immval:3
TEST_IMM_OP( slli, x11, x10, 0xfefffff8, -2097153, 3, x4, 136, x7)

inst_58:
// rs1_val == -4194305, 
// opcode: slli ; op1:x10; dest:x11; op1val:-4194305;  immval:15
TEST_IMM_OP( slli, x11, x10, 0xffff8000, -4194305, 15, x4, 140, x7)

inst_59:
// rs1_val == -8388609, 
// opcode: slli ; op1:x10; dest:x11; op1val:-8388609;  immval:0
TEST_IMM_OP( slli, x11, x10, 0xff7fffff, -8388609, 0, x4, 144, x7)

inst_60:
// rs1_val == -16777217, 
// opcode: slli ; op1:x10; dest:x11; op1val:-16777217;  immval:5
TEST_IMM_OP( slli, x11, x10, 0xdfffffe0, -16777217, 5, x4, 148, x7)

inst_61:
// rs1_val == -33554433, imm_val == 1
// opcode: slli ; op1:x10; dest:x11; op1val:-33554433;  immval:1
TEST_IMM_OP( slli, x11, x10, 0xfbfffffe, -33554433, 1, x4, 152, x7)

inst_62:
// rs1_val == -67108865, 
// opcode: slli ; op1:x10; dest:x11; op1val:-67108865;  immval:8
TEST_IMM_OP( slli, x11, x10, 0xffffff00, -67108865, 8, x4, 156, x7)

inst_63:
// rs1_val == -268435457, 
// opcode: slli ; op1:x10; dest:x11; op1val:-268435457;  immval:27
TEST_IMM_OP( slli, x11, x10, 0xf8000000, -268435457, 27, x4, 160, x7)

inst_64:
// rs1_val == -536870913, 
// opcode: slli ; op1:x10; dest:x11; op1val:-536870913;  immval:16
TEST_IMM_OP( slli, x11, x10, 0xffff0000, -536870913, 16, x4, 164, x7)

inst_65:
// rs1_val == -1073741825, 
// opcode: slli ; op1:x10; dest:x11; op1val:-1073741825;  immval:12
TEST_IMM_OP( slli, x11, x10, 0xfffff000, -1073741825, 12, x4, 168, x7)

inst_66:
// rs1_val == 1431655765, rs1_val==1431655765
// opcode: slli ; op1:x10; dest:x11; op1val:1431655765;  immval:29
TEST_IMM_OP( slli, x11, x10, 0xa0000000, 1431655765, 29, x4, 172, x7)

inst_67:
// rs1_val == -1431655766, rs1_val==-1431655766
// opcode: slli ; op1:x10; dest:x11; op1val:-1431655766;  immval:11
TEST_IMM_OP( slli, x11, x10, 0x55555000, -1431655766, 11, x4, 176, x7)

inst_68:
// rs1_val==3, 
// opcode: slli ; op1:x10; dest:x11; op1val:3;  immval:17
TEST_IMM_OP( slli, x11, x10, 0x60000, 3, 17, x4, 180, x7)

inst_69:
// rs1_val==5, 
// opcode: slli ; op1:x10; dest:x11; op1val:5;  immval:6
TEST_IMM_OP( slli, x11, x10, 0x140, 5, 6, x4, 184, x7)

inst_70:
// rs1_val==1717986919, 
// opcode: slli ; op1:x10; dest:x11; op1val:1717986919;  immval:7
TEST_IMM_OP( slli, x11, x10, 0x33333380, 1717986919, 7, x4, 188, x7)

inst_71:
// rs1_val==-46339, 
// opcode: slli ; op1:x10; dest:x11; op1val:-46339;  immval:13
TEST_IMM_OP( slli, x11, x10, 0xe95fa000, -46339, 13, x4, 192, x7)

inst_72:
// rs1_val==46341, 
// opcode: slli ; op1:x10; dest:x11; op1val:46341;  immval:14
TEST_IMM_OP( slli, x11, x10, 0x2d414000, 46341, 14, x4, 196, x7)

inst_73:
// rs1_val==858993459, 
// opcode: slli ; op1:x10; dest:x11; op1val:858993459;  immval:3
TEST_IMM_OP( slli, x11, x10, 0x99999998, 858993459, 3, x4, 200, x7)

inst_74:
// rs1_val==1717986918, 
// opcode: slli ; op1:x10; dest:x11; op1val:1717986918;  immval:8
TEST_IMM_OP( slli, x11, x10, 0x66666600, 1717986918, 8, x4, 204, x7)

inst_75:
// rs1_val==-46340, 
// opcode: slli ; op1:x10; dest:x11; op1val:-46340;  immval:21
TEST_IMM_OP( slli, x11, x10, 0x5f800000, -46340, 21, x4, 208, x7)

inst_76:
// rs1_val == -1048577, 
// opcode: slli ; op1:x10; dest:x11; op1val:-1048577;  immval:27
TEST_IMM_OP( slli, x11, x10, 0xf8000000, -1048577, 27, x4, 212, x7)

inst_77:
// rs1_val==46340, 
// opcode: slli ; op1:x10; dest:x11; op1val:46340;  immval:19
TEST_IMM_OP( slli, x11, x10, 0xa8200000, 46340, 19, x4, 216, x7)

inst_78:
// rs1_val==1431655764, 
// opcode: slli ; op1:x10; dest:x11; op1val:1431655764;  immval:27
TEST_IMM_OP( slli, x11, x10, 0xa0000000, 1431655764, 27, x4, 220, x7)

inst_79:
// rs1_val==1717986917, 
// opcode: slli ; op1:x10; dest:x11; op1val:1717986917;  immval:5
TEST_IMM_OP( slli, x11, x10, 0xcccccca0, 1717986917, 5, x4, 224, x7)

inst_80:
// rs1_val==46339, 
// opcode: slli ; op1:x10; dest:x11; op1val:46339;  immval:6
TEST_IMM_OP( slli, x11, x10, 0x2d40c0, 46339, 6, x4, 228, x7)

inst_81:
// rs1_val==1431655766, 
// opcode: slli ; op1:x10; dest:x11; op1val:1431655766;  immval:21
TEST_IMM_OP( slli, x11, x10, 0xaac00000, 1431655766, 21, x4, 232, x7)

inst_82:
// rs1_val==-1431655765, 
// opcode: slli ; op1:x10; dest:x11; op1val:-1431655765;  immval:11
TEST_IMM_OP( slli, x11, x10, 0x55555800, -1431655765, 11, x4, 236, x7)

inst_83:
// rs1_val==6, 
// opcode: slli ; op1:x10; dest:x11; op1val:6;  immval:23
TEST_IMM_OP( slli, x11, x10, 0x3000000, 6, 23, x4, 240, x7)

inst_84:
// rs1_val==858993460, 
// opcode: slli ; op1:x10; dest:x11; op1val:858993460;  immval:8
TEST_IMM_OP( slli, x11, x10, 0x33333400, 858993460, 8, x4, 244, x7)

inst_85:
// rs1_val > 0 and imm_val > 0 and imm_val < xlen, rs1_val == 2097152
// opcode: slli ; op1:x10; dest:x11; op1val:2097152;  immval:11
TEST_IMM_OP( slli, x11, x10, 0x0, 2097152, 11, x4, 248, x7)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x9_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x9_1:
    .fill 23*(XLEN/32),4,0xdeadbeef


signature_x4_0:
    .fill 63*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
