 
// -----------
// This file was generated by riscv_ctg (https://gitlab.com/incoresemi/riscv-compliance/riscv_ctg)
// version   : 0.1.0
// timestamp : Fri Nov  6 10:29:15 2020 GMT
// usage     : riscv_ctg \
//                  -- cgf /scratch/git-repo/incoresemi/riscv-compliance/riscv_ctg/sample_cgfs/rv32ic.cgf \
//                  -- xlen 32 \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the c.addi16sp instruction of the RISC-V C extension for the caddi16sp covergroup.
// 
#include "compliance_model.h"
#include "compliance_test.h"
RVTEST_ISA("RV32IC")

RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*C.*);def TEST_CASE_1=True;",caddi16sp)

RVTEST_SIGBASE( x1,signature_x1_1)

inst_0:
// rd==x2, imm_val == -512, rs1_val == -2049, rs1_val < 0 and imm_val < 0, rs1_val != imm_val
// opcode:c.addi16sp; op1:x2; dest:x2 op1val:-2049; immval:-512
TEST_CI_OP( c.addi16sp, x2, 0x00000000, -2049, -512, x1, 0, x3)

inst_1:
// imm_val == 496, rs1_val < 0 and imm_val > 0, rs1_val == -2097153
// opcode:c.addi16sp; op1:x2; dest:x2 op1val:-2097153; immval:496
TEST_CI_OP( c.addi16sp, x2, 0x00000000, -2097153, 496, x1, 4, x3)

inst_2:
// rs1_val == (-2**(xlen-1)), rs1_val == -2147483648
// opcode:c.addi16sp; op1:x2; dest:x2 op1val:-2147483648; immval:-160
TEST_CI_OP( c.addi16sp, x2, 0x00000000, -2147483648, -160, x1, 8, x3)

inst_3:
// rs1_val == 0, 
// opcode:c.addi16sp; op1:x2; dest:x2 op1val:0; immval:80
TEST_CI_OP( c.addi16sp, x2, 0x00000000, 0, 80, x1, 12, x3)

inst_4:
// rs1_val == (2**(xlen-1)-1), rs1_val > 0 and imm_val < 0, rs1_val == 2147483647
// opcode:c.addi16sp; op1:x2; dest:x2 op1val:2147483647; immval:-96
TEST_CI_OP( c.addi16sp, x2, 0x00000000, 2147483647, -96, x1, 16, x3)

inst_5:
// rs1_val == 1, imm_val == -80
// opcode:c.addi16sp; op1:x2; dest:x2 op1val:1; immval:-80
TEST_CI_OP( c.addi16sp, x2, 0x00000000, 1, -80, x1, 20, x3)

inst_6:
// rs1_val == imm_val, rs1_val > 0 and imm_val > 0, rs1_val == 32, imm_val == 32
// opcode:c.addi16sp; op1:x2; dest:x2 op1val:32; immval:32
TEST_CI_OP( c.addi16sp, x2, 0x00000000, 32, 32, x1, 24, x3)

inst_7:
// imm_val == 16, rs1_val == 1048576
// opcode:c.addi16sp; op1:x2; dest:x2 op1val:1048576; immval:16
TEST_CI_OP( c.addi16sp, x2, 0x00000000, 1048576, 16, x1, 28, x3)

inst_8:
// imm_val == 64, rs1_val == -524289
// opcode:c.addi16sp; op1:x2; dest:x2 op1val:-524289; immval:64
TEST_CI_OP( c.addi16sp, x2, 0x00000000, -524289, 64, x1, 32, x3)

inst_9:
// imm_val == 128, rs1_val == -257
// opcode:c.addi16sp; op1:x2; dest:x2 op1val:-257; immval:128
TEST_CI_OP( c.addi16sp, x2, 0x00000000, -257, 128, x1, 36, x3)

inst_10:
// imm_val == 256, 
// opcode:c.addi16sp; op1:x2; dest:x2 op1val:32; immval:256
TEST_CI_OP( c.addi16sp, x2, 0x00000000, 32, 256, x1, 40, x3)

inst_11:
// imm_val == -32, 
// opcode:c.addi16sp; op1:x2; dest:x2 op1val:-8; immval:-32
TEST_CI_OP( c.addi16sp, x2, 0x00000000, -8, -32, x1, 44, x3)

inst_12:
// imm_val == -48, rs1_val == -2
// opcode:c.addi16sp; op1:x2; dest:x2 op1val:-2; immval:-48
TEST_CI_OP( c.addi16sp, x2, 0x00000000, -2, -48, x1, 48, x3)

inst_13:
// imm_val == -144, rs1_val == -4097
// opcode:c.addi16sp; op1:x2; dest:x2 op1val:-4097; immval:-144
TEST_CI_OP( c.addi16sp, x2, 0x00000000, -4097, -144, x1, 52, x3)

inst_14:
// imm_val == -272, rs1_val == -32769
// opcode:c.addi16sp; op1:x2; dest:x2 op1val:-32769; immval:-272
TEST_CI_OP( c.addi16sp, x2, 0x00000000, -32769, -272, x1, 56, x3)

inst_15:
// imm_val == 336, rs1_val == -129
// opcode:c.addi16sp; op1:x2; dest:x2 op1val:-129; immval:336
TEST_CI_OP( c.addi16sp, x2, 0x00000000, -129, 336, x1, 60, x3)

inst_16:
// imm_val == -352, 
// opcode:c.addi16sp; op1:x2; dest:x2 op1val:-2; immval:-352
TEST_CI_OP( c.addi16sp, x2, 0x00000000, -2, -352, x1, 64, x3)

inst_17:
// rs1_val == 2, 
// opcode:c.addi16sp; op1:x2; dest:x2 op1val:2; immval:48
TEST_CI_OP( c.addi16sp, x2, 0x00000000, 2, 48, x1, 68, x3)

inst_18:
// rs1_val == 4, 
// opcode:c.addi16sp; op1:x2; dest:x2 op1val:4; immval:32
TEST_CI_OP( c.addi16sp, x2, 0x00000000, 4, 32, x1, 72, x3)

inst_19:
// rs1_val == 8, 
// opcode:c.addi16sp; op1:x2; dest:x2 op1val:8; immval:112
TEST_CI_OP( c.addi16sp, x2, 0x00000000, 8, 112, x1, 76, x3)

inst_20:
// rs1_val == 16, 
// opcode:c.addi16sp; op1:x2; dest:x2 op1val:16; immval:-128
TEST_CI_OP( c.addi16sp, x2, 0x00000000, 16, -128, x1, 80, x3)

inst_21:
// rs1_val == 64, 
// opcode:c.addi16sp; op1:x2; dest:x2 op1val:64; immval:96
TEST_CI_OP( c.addi16sp, x2, 0x00000000, 64, 96, x1, 84, x3)

inst_22:
// rs1_val == 128, 
// opcode:c.addi16sp; op1:x2; dest:x2 op1val:128; immval:-352
TEST_CI_OP( c.addi16sp, x2, 0x00000000, 128, -352, x1, 88, x3)

inst_23:
// rs1_val == 256, 
// opcode:c.addi16sp; op1:x2; dest:x2 op1val:256; immval:-128
TEST_CI_OP( c.addi16sp, x2, 0x00000000, 256, -128, x1, 92, x3)

inst_24:
// rs1_val == 512, 
// opcode:c.addi16sp; op1:x2; dest:x2 op1val:512; immval:-160
TEST_CI_OP( c.addi16sp, x2, 0x00000000, 512, -160, x1, 96, x3)

inst_25:
// rs1_val == 1024, 
// opcode:c.addi16sp; op1:x2; dest:x2 op1val:1024; immval:32
TEST_CI_OP( c.addi16sp, x2, 0x00000000, 1024, 32, x1, 100, x3)

inst_26:
// rs1_val == 2048, 
// opcode:c.addi16sp; op1:x2; dest:x2 op1val:2048; immval:-128
TEST_CI_OP( c.addi16sp, x2, 0x00000000, 2048, -128, x1, 104, x3)

inst_27:
// rs1_val == 4096, 
// opcode:c.addi16sp; op1:x2; dest:x2 op1val:4096; immval:-16
TEST_CI_OP( c.addi16sp, x2, 0x00000000, 4096, -16, x1, 108, x3)

inst_28:
// rs1_val == 8192, 
// opcode:c.addi16sp; op1:x2; dest:x2 op1val:8192; immval:-352
TEST_CI_OP( c.addi16sp, x2, 0x00000000, 8192, -352, x1, 112, x3)

inst_29:
// rs1_val == 16384, 
// opcode:c.addi16sp; op1:x2; dest:x2 op1val:16384; immval:-160
TEST_CI_OP( c.addi16sp, x2, 0x00000000, 16384, -160, x1, 116, x3)

inst_30:
// rs1_val == 32768, 
// opcode:c.addi16sp; op1:x2; dest:x2 op1val:32768; immval:144
TEST_CI_OP( c.addi16sp, x2, 0x00000000, 32768, 144, x1, 120, x3)

inst_31:
// rs1_val == 65536, 
// opcode:c.addi16sp; op1:x2; dest:x2 op1val:65536; immval:-96
TEST_CI_OP( c.addi16sp, x2, 0x00000000, 65536, -96, x1, 124, x3)

inst_32:
// rs1_val == 131072, 
// opcode:c.addi16sp; op1:x2; dest:x2 op1val:131072; immval:-352
TEST_CI_OP( c.addi16sp, x2, 0x00000000, 131072, -352, x1, 128, x3)

inst_33:
// rs1_val == 262144, 
// opcode:c.addi16sp; op1:x2; dest:x2 op1val:262144; immval:144
TEST_CI_OP( c.addi16sp, x2, 0x00000000, 262144, 144, x1, 132, x3)

inst_34:
// rs1_val == 524288, 
// opcode:c.addi16sp; op1:x2; dest:x2 op1val:524288; immval:16
TEST_CI_OP( c.addi16sp, x2, 0x00000000, 524288, 16, x1, 136, x3)

inst_35:
// rs1_val == 2097152, 
// opcode:c.addi16sp; op1:x2; dest:x2 op1val:2097152; immval:-160
TEST_CI_OP( c.addi16sp, x2, 0x00000000, 2097152, -160, x1, 140, x3)

inst_36:
// rs1_val == 4194304, 
// opcode:c.addi16sp; op1:x2; dest:x2 op1val:4194304; immval:-352
TEST_CI_OP( c.addi16sp, x2, 0x00000000, 4194304, -352, x1, 144, x3)

inst_37:
// rs1_val == 8388608, 
// opcode:c.addi16sp; op1:x2; dest:x2 op1val:8388608; immval:336
TEST_CI_OP( c.addi16sp, x2, 0x00000000, 8388608, 336, x1, 148, x3)

inst_38:
// rs1_val == 16777216, 
// opcode:c.addi16sp; op1:x2; dest:x2 op1val:16777216; immval:96
TEST_CI_OP( c.addi16sp, x2, 0x00000000, 16777216, 96, x1, 152, x3)

inst_39:
// rs1_val == -513, 
// opcode:c.addi16sp; op1:x2; dest:x2 op1val:-513; immval:-144
TEST_CI_OP( c.addi16sp, x2, 0x00000000, -513, -144, x1, 156, x3)

inst_40:
// rs1_val == -1025, 
// opcode:c.addi16sp; op1:x2; dest:x2 op1val:-1025; immval:80
TEST_CI_OP( c.addi16sp, x2, 0x00000000, -1025, 80, x1, 160, x3)

inst_41:
// rs1_val == -8193, 
// opcode:c.addi16sp; op1:x2; dest:x2 op1val:-8193; immval:-32
TEST_CI_OP( c.addi16sp, x2, 0x00000000, -8193, -32, x1, 164, x3)

inst_42:
// rs1_val == -16385, 
// opcode:c.addi16sp; op1:x2; dest:x2 op1val:-16385; immval:32
TEST_CI_OP( c.addi16sp, x2, 0x00000000, -16385, 32, x1, 168, x3)

inst_43:
// rs1_val == -65537, 
// opcode:c.addi16sp; op1:x2; dest:x2 op1val:-65537; immval:-128
TEST_CI_OP( c.addi16sp, x2, 0x00000000, -65537, -128, x1, 172, x3)

inst_44:
// rs1_val == -131073, 
// opcode:c.addi16sp; op1:x2; dest:x2 op1val:-131073; immval:32
TEST_CI_OP( c.addi16sp, x2, 0x00000000, -131073, 32, x1, 176, x3)

inst_45:
// rs1_val == -262145, 
// opcode:c.addi16sp; op1:x2; dest:x2 op1val:-262145; immval:-272
TEST_CI_OP( c.addi16sp, x2, 0x00000000, -262145, -272, x1, 180, x3)

inst_46:
// rs1_val == -1048577, 
// opcode:c.addi16sp; op1:x2; dest:x2 op1val:-1048577; immval:336
TEST_CI_OP( c.addi16sp, x2, 0x00000000, -1048577, 336, x1, 184, x3)

inst_47:
// rs1_val == -4194305, 
// opcode:c.addi16sp; op1:x2; dest:x2 op1val:-4194305; immval:96
TEST_CI_OP( c.addi16sp, x2, 0x00000000, -4194305, 96, x1, 188, x3)

inst_48:
// rs1_val == -8388609, 
// opcode:c.addi16sp; op1:x2; dest:x2 op1val:-8388609; immval:-112
TEST_CI_OP( c.addi16sp, x2, 0x00000000, -8388609, -112, x1, 192, x3)

inst_49:
// rs1_val == -16777217, 
// opcode:c.addi16sp; op1:x2; dest:x2 op1val:-16777217; immval:112
TEST_CI_OP( c.addi16sp, x2, 0x00000000, -16777217, 112, x1, 196, x3)

inst_50:
// rs1_val == -33554433, 
// opcode:c.addi16sp; op1:x2; dest:x2 op1val:-33554433; immval:-512
TEST_CI_OP( c.addi16sp, x2, 0x00000000, -33554433, -512, x1, 200, x3)

inst_51:
// rs1_val == -67108865, 
// opcode:c.addi16sp; op1:x2; dest:x2 op1val:-67108865; immval:112
TEST_CI_OP( c.addi16sp, x2, 0x00000000, -67108865, 112, x1, 204, x3)

inst_52:
// rs1_val == -134217729, 
// opcode:c.addi16sp; op1:x2; dest:x2 op1val:-134217729; immval:-112
TEST_CI_OP( c.addi16sp, x2, 0x00000000, -134217729, -112, x1, 208, x3)

inst_53:
// rs1_val == -268435457, 
// opcode:c.addi16sp; op1:x2; dest:x2 op1val:-268435457; immval:-64
TEST_CI_OP( c.addi16sp, x2, 0x00000000, -268435457, -64, x1, 212, x3)

inst_54:
// rs1_val == -536870913, 
// opcode:c.addi16sp; op1:x2; dest:x2 op1val:-536870913; immval:-352
TEST_CI_OP( c.addi16sp, x2, 0x00000000, -536870913, -352, x1, 216, x3)

inst_55:
// rs1_val == -9, 
// opcode:c.addi16sp; op1:x2; dest:x2 op1val:-9; immval:336
TEST_CI_OP( c.addi16sp, x2, 0x00000000, -9, 336, x1, 220, x3)

inst_56:
// rs1_val == 33554432, 
// opcode:c.addi16sp; op1:x2; dest:x2 op1val:33554432; immval:496
TEST_CI_OP( c.addi16sp, x2, 0x00000000, 33554432, 496, x1, 224, x3)

inst_57:
// rs1_val == 67108864, 
// opcode:c.addi16sp; op1:x2; dest:x2 op1val:67108864; immval:-272
TEST_CI_OP( c.addi16sp, x2, 0x00000000, 67108864, -272, x1, 228, x3)

inst_58:
// rs1_val == 134217728, 
// opcode:c.addi16sp; op1:x2; dest:x2 op1val:134217728; immval:-16
TEST_CI_OP( c.addi16sp, x2, 0x00000000, 134217728, -16, x1, 232, x3)

inst_59:
// rs1_val == 268435456, 
// opcode:c.addi16sp; op1:x2; dest:x2 op1val:268435456; immval:144
TEST_CI_OP( c.addi16sp, x2, 0x00000000, 268435456, 144, x1, 236, x3)

inst_60:
// rs1_val == 536870912, 
// opcode:c.addi16sp; op1:x2; dest:x2 op1val:536870912; immval:-16
TEST_CI_OP( c.addi16sp, x2, 0x00000000, 536870912, -16, x1, 240, x3)

inst_61:
// rs1_val == -1073741825, 
// opcode:c.addi16sp; op1:x2; dest:x2 op1val:-1073741825; immval:48
TEST_CI_OP( c.addi16sp, x2, 0x00000000, -1073741825, 48, x1, 244, x3)

inst_62:
// rs1_val == 1073741824, 
// opcode:c.addi16sp; op1:x2; dest:x2 op1val:1073741824; immval:-32
TEST_CI_OP( c.addi16sp, x2, 0x00000000, 1073741824, -32, x1, 248, x3)

inst_63:
// rs1_val == 1431655765, 
// opcode:c.addi16sp; op1:x2; dest:x2 op1val:1431655765; immval:-96
TEST_CI_OP( c.addi16sp, x2, 0x00000000, 1431655765, -96, x1, 252, x3)

inst_64:
// rs1_val == -1431655766, 
// opcode:c.addi16sp; op1:x2; dest:x2 op1val:-1431655766; immval:-32
TEST_CI_OP( c.addi16sp, x2, 0x00000000, -1431655766, -32, x1, 256, x3)

inst_65:
// rs1_val == -3, 
// opcode:c.addi16sp; op1:x2; dest:x2 op1val:-3; immval:240
TEST_CI_OP( c.addi16sp, x2, 0x00000000, -3, 240, x1, 260, x3)

inst_66:
// rs1_val == -5, 
// opcode:c.addi16sp; op1:x2; dest:x2 op1val:-5; immval:-256
TEST_CI_OP( c.addi16sp, x2, 0x00000000, -5, -256, x1, 264, x3)

inst_67:
// rs1_val == -17, 
// opcode:c.addi16sp; op1:x2; dest:x2 op1val:-17; immval:496
TEST_CI_OP( c.addi16sp, x2, 0x00000000, -17, 496, x1, 268, x3)

inst_68:
// rs1_val == -33, 
// opcode:c.addi16sp; op1:x2; dest:x2 op1val:-33; immval:-112
TEST_CI_OP( c.addi16sp, x2, 0x00000000, -33, -112, x1, 272, x3)

inst_69:
// rs1_val == -65, 
// opcode:c.addi16sp; op1:x2; dest:x2 op1val:-65; immval:256
TEST_CI_OP( c.addi16sp, x2, 0x00000000, -65, 256, x1, 276, x3)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x1_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x1_1:
    .fill 70*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
