 
// -----------
// This file was generated by riscv_ctg (https://gitlab.com/incoresemi/riscv-compliance/riscv_ctg)
// version   : 0.1.0
// timestamp : Fri Nov  6 10:29:15 2020 GMT
// usage     : riscv_ctg \
//                  -- cgf /scratch/git-repo/incoresemi/riscv-compliance/riscv_ctg/sample_cgfs/rv32ic.cgf \
//                  -- xlen 32 \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the c.bnez instruction of the RISC-V C extension for the cbnez covergroup.
// 
#include "compliance_model.h"
#include "compliance_test.h"
RVTEST_ISA("RV32IC")

RVMODEL_BOOT
RVTEST_CODE_BEGIN
RVMODEL_TARGET_INIT

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*C.*);def TEST_CASE_1=True;",cbnez)

RVTEST_SIGBASE( x1,signature_x1_1)

inst_0:
// rs1==x10, rs1_val > 0 and imm_val > 0, rs1_val == 65536
// opcode: c.bnez; op1:x10; op1val:65536; immval:18
TEST_CBRANCH_OP(c.bnez, x2, x10, 65536, 18, 3f, x1, 0)

inst_1:
// rs1==x12, rs1_val < 0 and imm_val > 0, 
// opcode: c.bnez; op1:x12; op1val:-1; immval:170
TEST_CBRANCH_OP(c.bnez, x2, x12, -1, 170, 3f, x1, 4)

inst_2:
// rs1==x9, rs1_val == 0 and imm_val > 0, rs1_val == 0
// opcode: c.bnez; op1:x9; op1val:0; immval:64
TEST_CBRANCH_OP(c.bnez, x2, x9, 0, 64, 3f, x1, 8)

inst_3:
// rs1==x11, rs1_val > 0 and imm_val < 0, rs1_val == 2097152
// opcode: c.bnez; op1:x11; op1val:2097152; immval:6
TEST_CBRANCH_OP(c.bnez, x2, x11, 2097152, 6, 1b, x1, 12)

inst_4:
// rs1==x8, rs1_val < 0 and imm_val < 0, rs1_val == -33
// opcode: c.bnez; op1:x8; op1val:-33; immval:130
TEST_CBRANCH_OP(c.bnez, x2, x8, -33, 130, 1b, x1, 16)

inst_5:
// rs1==x14, rs1_val == 0 and imm_val < 0, 
// opcode: c.bnez; op1:x14; op1val:0; immval:20
TEST_CBRANCH_OP(c.bnez, x2, x14, 0, 20, 1b, x1, 20)

inst_6:
// rs1==x15, rs1_val == (-2**(xlen-1)), rs1_val == -2147483648
// opcode: c.bnez; op1:x15; op1val:-2147483648; immval:18
TEST_CBRANCH_OP(c.bnez, x2, x15, -2147483648, 18, 3f, x1, 24)

inst_7:
// rs1==x13, rs1_val == (2**(xlen-1)-1), rs1_val == 2147483647
// opcode: c.bnez; op1:x13; op1val:2147483647; immval:32
TEST_CBRANCH_OP(c.bnez, x2, x13, 2147483647, 32, 3f, x1, 28)

inst_8:
// rs1_val == 1, 
// opcode: c.bnez; op1:x10; op1val:1; immval:34
TEST_CBRANCH_OP(c.bnez, x2, x10, 1, 34, 1b, x1, 32)

inst_9:
// rs1_val == 2, 
// opcode: c.bnez; op1:x10; op1val:2; immval:14
TEST_CBRANCH_OP(c.bnez, x2, x10, 2, 14, 1b, x1, 36)

inst_10:
// rs1_val == 4, 
// opcode: c.bnez; op1:x10; op1val:4; immval:126
TEST_CBRANCH_OP(c.bnez, x2, x10, 4, 126, 3f, x1, 40)

inst_11:
// rs1_val == 8, 
// opcode: c.bnez; op1:x10; op1val:8; immval:12
TEST_CBRANCH_OP(c.bnez, x2, x10, 8, 12, 1b, x1, 44)

inst_12:
// rs1_val == 16, 
// opcode: c.bnez; op1:x10; op1val:16; immval:10
TEST_CBRANCH_OP(c.bnez, x2, x10, 16, 10, 1b, x1, 48)

inst_13:
// rs1_val == 32, 
// opcode: c.bnez; op1:x10; op1val:32; immval:170
TEST_CBRANCH_OP(c.bnez, x2, x10, 32, 170, 3f, x1, 52)

inst_14:
// rs1_val == 64, 
// opcode: c.bnez; op1:x10; op1val:64; immval:16
TEST_CBRANCH_OP(c.bnez, x2, x10, 64, 16, 3f, x1, 56)

inst_15:
// rs1_val == 128, 
// opcode: c.bnez; op1:x10; op1val:128; immval:12
TEST_CBRANCH_OP(c.bnez, x2, x10, 128, 12, 1b, x1, 60)

inst_16:
// rs1_val == 256, 
// opcode: c.bnez; op1:x10; op1val:256; immval:170
TEST_CBRANCH_OP(c.bnez, x2, x10, 256, 170, 3f, x1, 64)

inst_17:
// rs1_val == 512, 
// opcode: c.bnez; op1:x10; op1val:512; immval:128
TEST_CBRANCH_OP(c.bnez, x2, x10, 512, 128, 1b, x1, 68)

inst_18:
// rs1_val == 1024, 
// opcode: c.bnez; op1:x10; op1val:1024; immval:6
TEST_CBRANCH_OP(c.bnez, x2, x10, 1024, 6, 3f, x1, 72)

inst_19:
// rs1_val == 2048, 
// opcode: c.bnez; op1:x10; op1val:2048; immval:12
TEST_CBRANCH_OP(c.bnez, x2, x10, 2048, 12, 3f, x1, 76)

inst_20:
// rs1_val == 4096, 
// opcode: c.bnez; op1:x10; op1val:4096; immval:8
TEST_CBRANCH_OP(c.bnez, x2, x10, 4096, 8, 3f, x1, 80)

inst_21:
// rs1_val == 8192, 
// opcode: c.bnez; op1:x10; op1val:8192; immval:8
TEST_CBRANCH_OP(c.bnez, x2, x10, 8192, 8, 1b, x1, 84)

inst_22:
// rs1_val == 16384, 
// opcode: c.bnez; op1:x10; op1val:16384; immval:10
TEST_CBRANCH_OP(c.bnez, x2, x10, 16384, 10, 3f, x1, 88)

inst_23:
// rs1_val == 32768, 
// opcode: c.bnez; op1:x10; op1val:32768; immval:10
TEST_CBRANCH_OP(c.bnez, x2, x10, 32768, 10, 3f, x1, 92)

inst_24:
// rs1_val == 131072, 
// opcode: c.bnez; op1:x10; op1val:131072; immval:12
TEST_CBRANCH_OP(c.bnez, x2, x10, 131072, 12, 3f, x1, 96)

inst_25:
// rs1_val == 262144, 
// opcode: c.bnez; op1:x10; op1val:262144; immval:6
TEST_CBRANCH_OP(c.bnez, x2, x10, 262144, 6, 1b, x1, 100)

inst_26:
// rs1_val == 524288, 
// opcode: c.bnez; op1:x10; op1val:524288; immval:128
TEST_CBRANCH_OP(c.bnez, x2, x10, 524288, 128, 1b, x1, 104)

inst_27:
// rs1_val == 1048576, 
// opcode: c.bnez; op1:x10; op1val:1048576; immval:12
TEST_CBRANCH_OP(c.bnez, x2, x10, 1048576, 12, 1b, x1, 108)

inst_28:
// rs1_val == 4194304, 
// opcode: c.bnez; op1:x10; op1val:4194304; immval:32
TEST_CBRANCH_OP(c.bnez, x2, x10, 4194304, 32, 3f, x1, 112)

inst_29:
// rs1_val == 8388608, 
// opcode: c.bnez; op1:x10; op1val:8388608; immval:18
TEST_CBRANCH_OP(c.bnez, x2, x10, 8388608, 18, 1b, x1, 116)

inst_30:
// rs1_val == 16777216, 
// opcode: c.bnez; op1:x10; op1val:16777216; immval:16
TEST_CBRANCH_OP(c.bnez, x2, x10, 16777216, 16, 1b, x1, 120)

inst_31:
// rs1_val == 33554432, 
// opcode: c.bnez; op1:x10; op1val:33554432; immval:64
TEST_CBRANCH_OP(c.bnez, x2, x10, 33554432, 64, 3f, x1, 124)

inst_32:
// rs1_val == 67108864, 
// opcode: c.bnez; op1:x10; op1val:67108864; immval:130
TEST_CBRANCH_OP(c.bnez, x2, x10, 67108864, 130, 1b, x1, 128)

inst_33:
// rs1_val == 134217728, 
// opcode: c.bnez; op1:x10; op1val:134217728; immval:170
TEST_CBRANCH_OP(c.bnez, x2, x10, 134217728, 170, 3f, x1, 132)

inst_34:
// rs1_val == 268435456, 
// opcode: c.bnez; op1:x10; op1val:268435456; immval:12
TEST_CBRANCH_OP(c.bnez, x2, x10, 268435456, 12, 3f, x1, 136)

inst_35:
// rs1_val == 536870912, 
// opcode: c.bnez; op1:x10; op1val:536870912; immval:128
TEST_CBRANCH_OP(c.bnez, x2, x10, 536870912, 128, 1b, x1, 140)

inst_36:
// rs1_val == 1073741824, 
// opcode: c.bnez; op1:x10; op1val:1073741824; immval:128
TEST_CBRANCH_OP(c.bnez, x2, x10, 1073741824, 128, 3f, x1, 144)

inst_37:
// rs1_val == -2, 
// opcode: c.bnez; op1:x10; op1val:-2; immval:12
TEST_CBRANCH_OP(c.bnez, x2, x10, -2, 12, 1b, x1, 148)

inst_38:
// rs1_val == -8388609, 
// opcode: c.bnez; op1:x10; op1val:-8388609; immval:18
TEST_CBRANCH_OP(c.bnez, x2, x10, -8388609, 18, 3f, x1, 152)

inst_39:
// rs1_val == -16777217, 
// opcode: c.bnez; op1:x10; op1val:-16777217; immval:66
TEST_CBRANCH_OP(c.bnez, x2, x10, -16777217, 66, 1b, x1, 156)

inst_40:
// rs1_val == -33554433, 
// opcode: c.bnez; op1:x10; op1val:-33554433; immval:12
TEST_CBRANCH_OP(c.bnez, x2, x10, -33554433, 12, 3f, x1, 160)

inst_41:
// rs1_val == -67108865, 
// opcode: c.bnez; op1:x10; op1val:-67108865; immval:126
TEST_CBRANCH_OP(c.bnez, x2, x10, -67108865, 126, 3f, x1, 164)

inst_42:
// rs1_val == -134217729, 
// opcode: c.bnez; op1:x10; op1val:-134217729; immval:14
TEST_CBRANCH_OP(c.bnez, x2, x10, -134217729, 14, 1b, x1, 168)

inst_43:
// rs1_val == -268435457, 
// opcode: c.bnez; op1:x10; op1val:-268435457; immval:10
TEST_CBRANCH_OP(c.bnez, x2, x10, -268435457, 10, 1b, x1, 172)

inst_44:
// rs1_val == -536870913, 
// opcode: c.bnez; op1:x10; op1val:-536870913; immval:34
TEST_CBRANCH_OP(c.bnez, x2, x10, -536870913, 34, 1b, x1, 176)

inst_45:
// rs1_val == -1073741825, 
// opcode: c.bnez; op1:x10; op1val:-1073741825; immval:126
TEST_CBRANCH_OP(c.bnez, x2, x10, -1073741825, 126, 3f, x1, 180)

inst_46:
// rs1_val == 1431655765, 
// opcode: c.bnez; op1:x10; op1val:1431655765; immval:34
TEST_CBRANCH_OP(c.bnez, x2, x10, 1431655765, 34, 1b, x1, 184)

inst_47:
// rs1_val == -1431655766, 
// opcode: c.bnez; op1:x10; op1val:-1431655766; immval:170
TEST_CBRANCH_OP(c.bnez, x2, x10, -1431655766, 170, 3f, x1, 188)

inst_48:
// rs1_val == -3, 
// opcode: c.bnez; op1:x10; op1val:-3; immval:66
TEST_CBRANCH_OP(c.bnez, x2, x10, -3, 66, 1b, x1, 192)

inst_49:
// rs1_val == -5, 
// opcode: c.bnez; op1:x10; op1val:-5; immval:10
TEST_CBRANCH_OP(c.bnez, x2, x10, -5, 10, 1b, x1, 196)

inst_50:
// rs1_val == -9, 
// opcode: c.bnez; op1:x10; op1val:-9; immval:4
TEST_CBRANCH_OP(c.bnez, x2, x10, -9, 4, 3f, x1, 200)

inst_51:
// rs1_val == -17, 
// opcode: c.bnez; op1:x10; op1val:-17; immval:4
TEST_CBRANCH_OP(c.bnez, x2, x10, -17, 4, 3f, x1, 204)

inst_52:
// rs1_val == -65, 
// opcode: c.bnez; op1:x10; op1val:-65; immval:4
TEST_CBRANCH_OP(c.bnez, x2, x10, -65, 4, 3f, x1, 208)

inst_53:
// rs1_val == -129, 
// opcode: c.bnez; op1:x10; op1val:-129; immval:6
TEST_CBRANCH_OP(c.bnez, x2, x10, -129, 6, 3f, x1, 212)

inst_54:
// rs1_val == -257, 
// opcode: c.bnez; op1:x10; op1val:-257; immval:8
TEST_CBRANCH_OP(c.bnez, x2, x10, -257, 8, 1b, x1, 216)

inst_55:
// rs1_val == -513, 
// opcode: c.bnez; op1:x10; op1val:-513; immval:170
TEST_CBRANCH_OP(c.bnez, x2, x10, -513, 170, 3f, x1, 220)

inst_56:
// rs1_val == -1025, 
// opcode: c.bnez; op1:x10; op1val:-1025; immval:4
TEST_CBRANCH_OP(c.bnez, x2, x10, -1025, 4, 1b, x1, 224)

inst_57:
// rs1_val == -2049, 
// opcode: c.bnez; op1:x10; op1val:-2049; immval:6
TEST_CBRANCH_OP(c.bnez, x2, x10, -2049, 6, 3f, x1, 228)

inst_58:
// rs1_val == -4097, 
// opcode: c.bnez; op1:x10; op1val:-4097; immval:12
TEST_CBRANCH_OP(c.bnez, x2, x10, -4097, 12, 1b, x1, 232)

inst_59:
// rs1_val == -8193, 
// opcode: c.bnez; op1:x10; op1val:-8193; immval:10
TEST_CBRANCH_OP(c.bnez, x2, x10, -8193, 10, 1b, x1, 236)

inst_60:
// rs1_val == -16385, 
// opcode: c.bnez; op1:x10; op1val:-16385; immval:34
TEST_CBRANCH_OP(c.bnez, x2, x10, -16385, 34, 1b, x1, 240)

inst_61:
// rs1_val == -32769, 
// opcode: c.bnez; op1:x10; op1val:-32769; immval:32
TEST_CBRANCH_OP(c.bnez, x2, x10, -32769, 32, 3f, x1, 244)

inst_62:
// rs1_val == -65537, 
// opcode: c.bnez; op1:x10; op1val:-65537; immval:4
TEST_CBRANCH_OP(c.bnez, x2, x10, -65537, 4, 3f, x1, 248)

inst_63:
// rs1_val == -131073, 
// opcode: c.bnez; op1:x10; op1val:-131073; immval:128
TEST_CBRANCH_OP(c.bnez, x2, x10, -131073, 128, 1b, x1, 252)

inst_64:
// rs1_val == -262145, 
// opcode: c.bnez; op1:x10; op1val:-262145; immval:66
TEST_CBRANCH_OP(c.bnez, x2, x10, -262145, 66, 1b, x1, 256)

inst_65:
// rs1_val == -524289, 
// opcode: c.bnez; op1:x10; op1val:-524289; immval:34
TEST_CBRANCH_OP(c.bnez, x2, x10, -524289, 34, 1b, x1, 260)

inst_66:
// rs1_val == -1048577, 
// opcode: c.bnez; op1:x10; op1val:-1048577; immval:4
TEST_CBRANCH_OP(c.bnez, x2, x10, -1048577, 4, 1b, x1, 264)

inst_67:
// rs1_val == -2097153, 
// opcode: c.bnez; op1:x10; op1val:-2097153; immval:8
TEST_CBRANCH_OP(c.bnez, x2, x10, -2097153, 8, 3f, x1, 268)

inst_68:
// rs1_val == -4194305, 
// opcode: c.bnez; op1:x10; op1val:-4194305; immval:32
TEST_CBRANCH_OP(c.bnez, x2, x10, -4194305, 32, 3f, x1, 272)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x1_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x1_1:
    .fill 69*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
