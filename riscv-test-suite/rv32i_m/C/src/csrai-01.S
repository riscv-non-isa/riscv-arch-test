 
// -----------
// This file was generated by riscv_ctg (https://gitlab.com/incoresemi/riscv-compliance/riscv_ctg)
// version   : 0.1.0
// timestamp : Fri Nov  6 10:29:15 2020 GMT
// usage     : riscv_ctg \
//                  -- cgf /scratch/git-repo/incoresemi/riscv-compliance/riscv_ctg/sample_cgfs/rv32ic.cgf \
//                  -- xlen 32 \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the c.srai instruction of the RISC-V C extension for the csrai covergroup.
// 
#include "compliance_model.h"
#include "compliance_test.h"
RVTEST_ISA("RV32IC")

RVMODEL_BOOT
RVTEST_CODE_BEGIN
RVMODEL_TARGET_INIT

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*C.*);def TEST_CASE_1=True;",csrai)

RVTEST_SIGBASE( x1,signature_x1_1)

inst_0:
// rs1==x9, rs1_val < 0 and imm_val < xlen, rs1_val == -8388609, imm_val == 27
// opcode:c.srai; op1:x9; dest:x9 op1val:-8388609; immval:27
TEST_CI_OP( c.srai, x9, 0x00000000, -8388609, 27, x1, 0, x2)

inst_1:
// rs1==x14, rs1_val > 0 and imm_val < xlen, rs1_val == 64, imm_val == 29
// opcode:c.srai; op1:x14; dest:x14 op1val:64; immval:29
TEST_CI_OP( c.srai, x14, 0x00000000, 64, 29, x1, 4, x2)

inst_2:
// rs1==x15, rs1_val == imm_val and imm_val != 0  and imm_val < xlen, rs1_val == 1, rs1_val == 1 and imm_val != 0 and imm_val < xlen, imm_val == 1
// opcode:c.srai; op1:x15; dest:x15 op1val:1; immval:1
TEST_CI_OP( c.srai, x15, 0x00000000, 1, 1, x1, 8, x2)

inst_3:
// rs1==x13, rs1_val == (-2**(xlen-1)) and imm_val != 0 and imm_val < xlen, rs1_val == -2147483648, imm_val == 30
// opcode:c.srai; op1:x13; dest:x13 op1val:-2147483648; immval:30
TEST_CI_OP( c.srai, x13, 0x00000000, -2147483648, 30, x1, 12, x2)

inst_4:
// rs1==x11, rs1_val == 0 and imm_val != 0 and imm_val < xlen, 
// opcode:c.srai; op1:x11; dest:x11 op1val:0; immval:11
TEST_CI_OP( c.srai, x11, 0x00000000, 0, 11, x1, 16, x2)

inst_5:
// rs1==x8, rs1_val == (2**(xlen-1)-1) and imm_val != 0 and imm_val < xlen, rs1_val == 2147483647
// opcode:c.srai; op1:x8; dest:x8 op1val:2147483647; immval:17
TEST_CI_OP( c.srai, x8, 0x00000000, 2147483647, 17, x1, 20, x2)

inst_6:
// rs1==x10, imm_val == 2, rs1_val == -536870913
// opcode:c.srai; op1:x10; dest:x10 op1val:-536870913; immval:2
TEST_CI_OP( c.srai, x10, 0x00000000, -536870913, 2, x1, 24, x2)

inst_7:
// rs1==x12, imm_val == 4, rs1_val == 16384
// opcode:c.srai; op1:x12; dest:x12 op1val:16384; immval:4
TEST_CI_OP( c.srai, x12, 0x00000000, 16384, 4, x1, 28, x2)

inst_8:
// imm_val == 8, rs1_val == -131073
// opcode:c.srai; op1:x10; dest:x10 op1val:-131073; immval:8
TEST_CI_OP( c.srai, x10, 0x00000000, -131073, 8, x1, 32, x2)

inst_9:
// imm_val == 16, rs1_val == 8192
// opcode:c.srai; op1:x10; dest:x10 op1val:8192; immval:16
TEST_CI_OP( c.srai, x10, 0x00000000, 8192, 16, x1, 36, x2)

inst_10:
// imm_val == 23, rs1_val == -17
// opcode:c.srai; op1:x10; dest:x10 op1val:-17; immval:23
TEST_CI_OP( c.srai, x10, 0x00000000, -17, 23, x1, 40, x2)

inst_11:
// imm_val == 15, rs1_val == 2048
// opcode:c.srai; op1:x10; dest:x10 op1val:2048; immval:15
TEST_CI_OP( c.srai, x10, 0x00000000, 2048, 15, x1, 44, x2)

inst_12:
// imm_val == 21, rs1_val == -32769
// opcode:c.srai; op1:x10; dest:x10 op1val:-32769; immval:21
TEST_CI_OP( c.srai, x10, 0x00000000, -32769, 21, x1, 48, x2)

inst_13:
// imm_val == 10, rs1_val == -5
// opcode:c.srai; op1:x10; dest:x10 op1val:-5; immval:10
TEST_CI_OP( c.srai, x10, 0x00000000, -5, 10, x1, 52, x2)

inst_14:
// rs1_val == 2, 
// opcode:c.srai; op1:x10; dest:x10 op1val:2; immval:6
TEST_CI_OP( c.srai, x10, 0x00000000, 2, 6, x1, 56, x2)

inst_15:
// rs1_val == 4, 
// opcode:c.srai; op1:x10; dest:x10 op1val:4; immval:18
TEST_CI_OP( c.srai, x10, 0x00000000, 4, 18, x1, 60, x2)

inst_16:
// rs1_val == 8, 
// opcode:c.srai; op1:x10; dest:x10 op1val:8; immval:19
TEST_CI_OP( c.srai, x10, 0x00000000, 8, 19, x1, 64, x2)

inst_17:
// rs1_val == 16, 
// opcode:c.srai; op1:x10; dest:x10 op1val:16; immval:10
TEST_CI_OP( c.srai, x10, 0x00000000, 16, 10, x1, 68, x2)

inst_18:
// rs1_val == 32, 
// opcode:c.srai; op1:x10; dest:x10 op1val:32; immval:9
TEST_CI_OP( c.srai, x10, 0x00000000, 32, 9, x1, 72, x2)

inst_19:
// rs1_val == 128, 
// opcode:c.srai; op1:x10; dest:x10 op1val:128; immval:5
TEST_CI_OP( c.srai, x10, 0x00000000, 128, 5, x1, 76, x2)

inst_20:
// rs1_val == 256, 
// opcode:c.srai; op1:x10; dest:x10 op1val:256; immval:12
TEST_CI_OP( c.srai, x10, 0x00000000, 256, 12, x1, 80, x2)

inst_21:
// rs1_val == 512, 
// opcode:c.srai; op1:x10; dest:x10 op1val:512; immval:16
TEST_CI_OP( c.srai, x10, 0x00000000, 512, 16, x1, 84, x2)

inst_22:
// rs1_val == 1024, 
// opcode:c.srai; op1:x10; dest:x10 op1val:1024; immval:4
TEST_CI_OP( c.srai, x10, 0x00000000, 1024, 4, x1, 88, x2)

inst_23:
// rs1_val == 4096, 
// opcode:c.srai; op1:x10; dest:x10 op1val:4096; immval:15
TEST_CI_OP( c.srai, x10, 0x00000000, 4096, 15, x1, 92, x2)

inst_24:
// rs1_val == 32768, 
// opcode:c.srai; op1:x10; dest:x10 op1val:32768; immval:23
TEST_CI_OP( c.srai, x10, 0x00000000, 32768, 23, x1, 96, x2)

inst_25:
// rs1_val == 65536, 
// opcode:c.srai; op1:x10; dest:x10 op1val:65536; immval:15
TEST_CI_OP( c.srai, x10, 0x00000000, 65536, 15, x1, 100, x2)

inst_26:
// rs1_val == 131072, 
// opcode:c.srai; op1:x10; dest:x10 op1val:131072; immval:18
TEST_CI_OP( c.srai, x10, 0x00000000, 131072, 18, x1, 104, x2)

inst_27:
// rs1_val == 262144, 
// opcode:c.srai; op1:x10; dest:x10 op1val:262144; immval:31
TEST_CI_OP( c.srai, x10, 0x00000000, 262144, 31, x1, 108, x2)

inst_28:
// rs1_val == 524288, 
// opcode:c.srai; op1:x10; dest:x10 op1val:524288; immval:30
TEST_CI_OP( c.srai, x10, 0x00000000, 524288, 30, x1, 112, x2)

inst_29:
// rs1_val == 1048576, 
// opcode:c.srai; op1:x10; dest:x10 op1val:1048576; immval:1
TEST_CI_OP( c.srai, x10, 0x00000000, 1048576, 1, x1, 116, x2)

inst_30:
// rs1_val == 2097152, 
// opcode:c.srai; op1:x10; dest:x10 op1val:2097152; immval:3
TEST_CI_OP( c.srai, x10, 0x00000000, 2097152, 3, x1, 120, x2)

inst_31:
// rs1_val == 4194304, 
// opcode:c.srai; op1:x10; dest:x10 op1val:4194304; immval:4
TEST_CI_OP( c.srai, x10, 0x00000000, 4194304, 4, x1, 124, x2)

inst_32:
// rs1_val == 8388608, 
// opcode:c.srai; op1:x10; dest:x10 op1val:8388608; immval:10
TEST_CI_OP( c.srai, x10, 0x00000000, 8388608, 10, x1, 128, x2)

inst_33:
// rs1_val == 16777216, 
// opcode:c.srai; op1:x10; dest:x10 op1val:16777216; immval:6
TEST_CI_OP( c.srai, x10, 0x00000000, 16777216, 6, x1, 132, x2)

inst_34:
// rs1_val == 33554432, 
// opcode:c.srai; op1:x10; dest:x10 op1val:33554432; immval:13
TEST_CI_OP( c.srai, x10, 0x00000000, 33554432, 13, x1, 136, x2)

inst_35:
// rs1_val == 67108864, 
// opcode:c.srai; op1:x10; dest:x10 op1val:67108864; immval:8
TEST_CI_OP( c.srai, x10, 0x00000000, 67108864, 8, x1, 140, x2)

inst_36:
// rs1_val == -8193, 
// opcode:c.srai; op1:x10; dest:x10 op1val:-8193; immval:18
TEST_CI_OP( c.srai, x10, 0x00000000, -8193, 18, x1, 144, x2)

inst_37:
// rs1_val == -16385, 
// opcode:c.srai; op1:x10; dest:x10 op1val:-16385; immval:5
TEST_CI_OP( c.srai, x10, 0x00000000, -16385, 5, x1, 148, x2)

inst_38:
// rs1_val == -65537, 
// opcode:c.srai; op1:x10; dest:x10 op1val:-65537; immval:27
TEST_CI_OP( c.srai, x10, 0x00000000, -65537, 27, x1, 152, x2)

inst_39:
// rs1_val == -262145, 
// opcode:c.srai; op1:x10; dest:x10 op1val:-262145; immval:15
TEST_CI_OP( c.srai, x10, 0x00000000, -262145, 15, x1, 156, x2)

inst_40:
// rs1_val == -524289, 
// opcode:c.srai; op1:x10; dest:x10 op1val:-524289; immval:9
TEST_CI_OP( c.srai, x10, 0x00000000, -524289, 9, x1, 160, x2)

inst_41:
// rs1_val == -1048577, 
// opcode:c.srai; op1:x10; dest:x10 op1val:-1048577; immval:11
TEST_CI_OP( c.srai, x10, 0x00000000, -1048577, 11, x1, 164, x2)

inst_42:
// rs1_val == -2097153, 
// opcode:c.srai; op1:x10; dest:x10 op1val:-2097153; immval:29
TEST_CI_OP( c.srai, x10, 0x00000000, -2097153, 29, x1, 168, x2)

inst_43:
// rs1_val == -4194305, 
// opcode:c.srai; op1:x10; dest:x10 op1val:-4194305; immval:5
TEST_CI_OP( c.srai, x10, 0x00000000, -4194305, 5, x1, 172, x2)

inst_44:
// rs1_val == -16777217, 
// opcode:c.srai; op1:x10; dest:x10 op1val:-16777217; immval:16
TEST_CI_OP( c.srai, x10, 0x00000000, -16777217, 16, x1, 176, x2)

inst_45:
// rs1_val == -33554433, 
// opcode:c.srai; op1:x10; dest:x10 op1val:-33554433; immval:17
TEST_CI_OP( c.srai, x10, 0x00000000, -33554433, 17, x1, 180, x2)

inst_46:
// rs1_val == -67108865, 
// opcode:c.srai; op1:x10; dest:x10 op1val:-67108865; immval:31
TEST_CI_OP( c.srai, x10, 0x00000000, -67108865, 31, x1, 184, x2)

inst_47:
// rs1_val == -134217729, 
// opcode:c.srai; op1:x10; dest:x10 op1val:-134217729; immval:27
TEST_CI_OP( c.srai, x10, 0x00000000, -134217729, 27, x1, 188, x2)

inst_48:
// rs1_val == -268435457, 
// opcode:c.srai; op1:x10; dest:x10 op1val:-268435457; immval:6
TEST_CI_OP( c.srai, x10, 0x00000000, -268435457, 6, x1, 192, x2)

inst_49:
// rs1_val == -1073741825, 
// opcode:c.srai; op1:x10; dest:x10 op1val:-1073741825; immval:1
TEST_CI_OP( c.srai, x10, 0x00000000, -1073741825, 1, x1, 196, x2)

inst_50:
// rs1_val == 1431655765, 
// opcode:c.srai; op1:x10; dest:x10 op1val:1431655765; immval:13
TEST_CI_OP( c.srai, x10, 0x00000000, 1431655765, 13, x1, 200, x2)

inst_51:
// rs1_val == -1431655766, 
// opcode:c.srai; op1:x10; dest:x10 op1val:-1431655766; immval:27
TEST_CI_OP( c.srai, x10, 0x00000000, -1431655766, 27, x1, 204, x2)

inst_52:
// rs1_val == 134217728, 
// opcode:c.srai; op1:x10; dest:x10 op1val:134217728; immval:4
TEST_CI_OP( c.srai, x10, 0x00000000, 134217728, 4, x1, 208, x2)

inst_53:
// rs1_val == 268435456, 
// opcode:c.srai; op1:x10; dest:x10 op1val:268435456; immval:15
TEST_CI_OP( c.srai, x10, 0x00000000, 268435456, 15, x1, 212, x2)

inst_54:
// rs1_val == 536870912, 
// opcode:c.srai; op1:x10; dest:x10 op1val:536870912; immval:27
TEST_CI_OP( c.srai, x10, 0x00000000, 536870912, 27, x1, 216, x2)

inst_55:
// rs1_val == 1073741824, 
// opcode:c.srai; op1:x10; dest:x10 op1val:1073741824; immval:13
TEST_CI_OP( c.srai, x10, 0x00000000, 1073741824, 13, x1, 220, x2)

inst_56:
// rs1_val == -2, 
// opcode:c.srai; op1:x10; dest:x10 op1val:-2; immval:8
TEST_CI_OP( c.srai, x10, 0x00000000, -2, 8, x1, 224, x2)

inst_57:
// rs1_val == -3, 
// opcode:c.srai; op1:x10; dest:x10 op1val:-3; immval:11
TEST_CI_OP( c.srai, x10, 0x00000000, -3, 11, x1, 228, x2)

inst_58:
// rs1_val == -9, 
// opcode:c.srai; op1:x10; dest:x10 op1val:-9; immval:6
TEST_CI_OP( c.srai, x10, 0x00000000, -9, 6, x1, 232, x2)

inst_59:
// rs1_val == -33, 
// opcode:c.srai; op1:x10; dest:x10 op1val:-33; immval:27
TEST_CI_OP( c.srai, x10, 0x00000000, -33, 27, x1, 236, x2)

inst_60:
// rs1_val == -65, 
// opcode:c.srai; op1:x10; dest:x10 op1val:-65; immval:3
TEST_CI_OP( c.srai, x10, 0x00000000, -65, 3, x1, 240, x2)

inst_61:
// rs1_val == -129, 
// opcode:c.srai; op1:x10; dest:x10 op1val:-129; immval:30
TEST_CI_OP( c.srai, x10, 0x00000000, -129, 30, x1, 244, x2)

inst_62:
// rs1_val == -257, 
// opcode:c.srai; op1:x10; dest:x10 op1val:-257; immval:9
TEST_CI_OP( c.srai, x10, 0x00000000, -257, 9, x1, 248, x2)

inst_63:
// rs1_val == -513, 
// opcode:c.srai; op1:x10; dest:x10 op1val:-513; immval:23
TEST_CI_OP( c.srai, x10, 0x00000000, -513, 23, x1, 252, x2)

inst_64:
// rs1_val == -1025, 
// opcode:c.srai; op1:x10; dest:x10 op1val:-1025; immval:29
TEST_CI_OP( c.srai, x10, 0x00000000, -1025, 29, x1, 256, x2)

inst_65:
// rs1_val == -2049, 
// opcode:c.srai; op1:x10; dest:x10 op1val:-2049; immval:8
TEST_CI_OP( c.srai, x10, 0x00000000, -2049, 8, x1, 260, x2)

inst_66:
// rs1_val == -4097, 
// opcode:c.srai; op1:x10; dest:x10 op1val:-4097; immval:15
TEST_CI_OP( c.srai, x10, 0x00000000, -4097, 15, x1, 264, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x1_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x1_1:
    .fill 67*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
