
// -----------
// This file was generated by riscv_ctg (https://gitlab.com/incoresemi/riscv-compliance/riscv_ctg)
// version   : 0.2.0
// timestamp : Wed Nov 18 05:46:14 2020 GMT
// usage     : riscv_ctg \
//                  -- cgf ('/scratch/git-repo/incoresemi/riscv-compliance/riscv_ctg/sample_cgfs/dataset.cgf', '/scratch/git-repo/incoresemi/riscv-compliance/riscv_ctg/sample_cgfs/rv32ic.cgf') \
//                  -- xlen 32 \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the c.swsp instruction of the RISC-V C extension for the cswsp covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IC")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*C.*);def TEST_CASE_1=True;",cswsp)

RVTEST_SIGBASE( x12,signature_x12_1)

inst_0:
// rs2==x13, rs2_val == (-2**(xlen-1)), imm_val == 124, imm_val > 0, rs2_val == -2147483648
// opcode:c.swsp; op1:x2; op2:x13; op2val:-2147483648; immval:124
TEST_STORE(x12,x8,0,x2,x13,-2147483648,124,0,c.swsp,0)

inst_1:
// rs2==x4, rs2_val == 0, imm_val == 8
// opcode:c.swsp; op1:x2; op2:x4; op2val:0; immval:8
TEST_STORE(x12,x8,0,x2,x4,0,8,4,c.swsp,0)

inst_2:
// rs2==x6, rs2_val == (2**(xlen-1)-1), rs2_val == 2147483647
// opcode:c.swsp; op1:x2; op2:x6; op2val:2147483647; immval:20
TEST_STORE(x12,x8,0,x2,x6,2147483647,20,8,c.swsp,0)

inst_3:
// rs2==x30, rs2_val == 1, 
// opcode:c.swsp; op1:x2; op2:x30; op2val:1; immval:72
TEST_STORE(x12,x8,0,x2,x30,1,72,12,c.swsp,0)

inst_4:
// rs2==x26, imm_val == 0, rs2_val == -134217729
// opcode:c.swsp; op1:x2; op2:x26; op2val:-134217729; immval:0
TEST_STORE(x12,x8,0,x2,x26,-134217729,0,16,c.swsp,0)

inst_5:
// rs2==x9, rs2_val == 2, 
// opcode:c.swsp; op1:x2; op2:x9; op2val:2; immval:76
TEST_STORE(x12,x8,0,x2,x9,2,76,20,c.swsp,0)

inst_6:
// rs2==x10, rs2_val == 4, 
// opcode:c.swsp; op1:x2; op2:x10; op2val:4; immval:36
TEST_STORE(x12,x8,0,x2,x10,4,36,24,c.swsp,0)

inst_7:
// rs2==x22, rs2_val == 8, 
// opcode:c.swsp; op1:x2; op2:x22; op2val:8; immval:8
TEST_STORE(x12,x8,0,x2,x22,8,8,28,c.swsp,0)

inst_8:
// rs2==x29, rs2_val == 16, imm_val == 4
// opcode:c.swsp; op1:x2; op2:x29; op2val:16; immval:4
TEST_STORE(x12,x8,0,x2,x29,16,4,32,c.swsp,0)

inst_9:
// rs2==x20, rs2_val == 32, imm_val == 64
// opcode:c.swsp; op1:x2; op2:x20; op2val:32; immval:64
TEST_STORE(x12,x8,0,x2,x20,32,64,36,c.swsp,0)

inst_10:
// rs2==x31, rs2_val == 64, 
// opcode:c.swsp; op1:x2; op2:x31; op2val:64; immval:44
TEST_STORE(x12,x8,0,x2,x31,64,44,40,c.swsp,0)

inst_11:
// rs2==x15, rs2_val == 128, imm_val == 84
// opcode:c.swsp; op1:x2; op2:x15; op2val:128; immval:84
TEST_STORE(x12,x8,0,x2,x15,128,84,44,c.swsp,0)

inst_12:
// rs2==x3, rs2_val == 256, 
// opcode:c.swsp; op1:x2; op2:x3; op2val:256; immval:60
TEST_STORE(x12,x8,0,x2,x3,256,60,48,c.swsp,0)

inst_13:
// rs2==x16, rs2_val == 512, imm_val == 220
// opcode:c.swsp; op1:x2; op2:x16; op2val:512; immval:220
TEST_STORE(x12,x8,0,x2,x16,512,220,52,c.swsp,0)

inst_14:
// rs2==x21, rs2_val == 1024, 
// opcode:c.swsp; op1:x2; op2:x21; op2val:1024; immval:124
TEST_STORE(x12,x8,0,x2,x21,1024,124,56,c.swsp,0)

inst_15:
// rs2==x17, rs2_val == 2048, 
// opcode:c.swsp; op1:x2; op2:x17; op2val:2048; immval:40
TEST_STORE(x12,x8,0,x2,x17,2048,40,60,c.swsp,0)

inst_16:
// rs2==x27, rs2_val == 4096, imm_val == 32
// opcode:c.swsp; op1:x2; op2:x27; op2val:4096; immval:32
TEST_STORE(x12,x8,0,x2,x27,4096,32,64,c.swsp,0)

inst_17:
// rs2==x1, rs2_val == 8192, 
// opcode:c.swsp; op1:x2; op2:x1; op2val:8192; immval:32
TEST_STORE(x12,x8,0,x2,x1,8192,32,68,c.swsp,0)

inst_18:
// rs2==x24, rs2_val == 16384, 
// opcode:c.swsp; op1:x2; op2:x24; op2val:16384; immval:72
TEST_STORE(x12,x8,0,x2,x24,16384,72,72,c.swsp,0)

inst_19:
// rs2==x23, rs2_val == 32768, 
// opcode:c.swsp; op1:x2; op2:x23; op2val:32768; immval:4
TEST_STORE(x12,x8,0,x2,x23,32768,4,76,c.swsp,0)

inst_20:
// rs2==x11, rs2_val == 65536, 
// opcode:c.swsp; op1:x2; op2:x11; op2val:65536; immval:68
TEST_STORE(x12,x8,0,x2,x11,65536,68,80,c.swsp,0)

inst_21:
// rs2==x14, rs2_val == 131072, 
// opcode:c.swsp; op1:x2; op2:x14; op2val:131072; immval:72
TEST_STORE(x12,x8,0,x2,x14,131072,72,84,c.swsp,0)

inst_22:
// rs2==x7, rs2_val == 262144, 
// opcode:c.swsp; op1:x2; op2:x7; op2val:262144; immval:44
TEST_STORE(x12,x8,0,x2,x7,262144,44,88,c.swsp,0)

inst_23:
// rs2==x25, rs2_val == 524288, 
// opcode:c.swsp; op1:x2; op2:x25; op2val:524288; immval:220
TEST_STORE(x12,x8,0,x2,x25,524288,220,92,c.swsp,0)

inst_24:
// rs2==x19, rs2_val == 1048576, 
// opcode:c.swsp; op1:x2; op2:x19; op2val:1048576; immval:68
TEST_STORE(x12,x8,0,x2,x19,1048576,68,96,c.swsp,0)

inst_25:
// rs2==x5, rs2_val == 2097152, 
// opcode:c.swsp; op1:x2; op2:x5; op2val:2097152; immval:52
TEST_STORE(x12,x8,0,x2,x5,2097152,52,100,c.swsp,0)

inst_26:
// rs2==x8, rs2_val == 4194304, 
// opcode:c.swsp; op1:x2; op2:x8; op2val:4194304; immval:52
TEST_STORE(x12,x3,0,x2,x8,4194304,52,104,c.swsp,0)
RVTEST_SIGBASE( x1,signature_x1_0)

inst_27:
// rs2==x28, rs2_val == 8388608, 
// opcode:c.swsp; op1:x2; op2:x28; op2val:8388608; immval:56
TEST_STORE(x1,x3,0,x2,x28,8388608,56,0,c.swsp,0)

inst_28:
// rs2==x12, rs2_val == 16777216, imm_val == 168
// opcode:c.swsp; op1:x2; op2:x12; op2val:16777216; immval:168
TEST_STORE(x1,x3,0,x2,x12,16777216,168,4,c.swsp,0)

inst_29:
// rs2==x18, rs2_val == 33554432, 
// opcode:c.swsp; op1:x2; op2:x18; op2val:33554432; immval:28
TEST_STORE(x1,x3,0,x2,x18,33554432,28,8,c.swsp,0)

inst_30:
// rs2_val == 67108864, imm_val == 128
// opcode:c.swsp; op1:x2; op2:x10; op2val:67108864; immval:128
TEST_STORE(x1,x3,0,x2,x10,67108864,128,12,c.swsp,0)

inst_31:
// rs2_val == 134217728, 
// opcode:c.swsp; op1:x2; op2:x10; op2val:134217728; immval:220
TEST_STORE(x1,x3,0,x2,x10,134217728,220,16,c.swsp,0)

inst_32:
// rs2_val == 268435456, imm_val == 188
// opcode:c.swsp; op1:x2; op2:x10; op2val:268435456; immval:188
TEST_STORE(x1,x3,0,x2,x10,268435456,188,20,c.swsp,0)

inst_33:
// rs2_val == 536870912, 
// opcode:c.swsp; op1:x2; op2:x10; op2val:536870912; immval:12
TEST_STORE(x1,x3,0,x2,x10,536870912,12,24,c.swsp,0)

inst_34:
// rs2_val == 1073741824, 
// opcode:c.swsp; op1:x2; op2:x10; op2val:1073741824; immval:36
TEST_STORE(x1,x3,0,x2,x10,1073741824,36,28,c.swsp,0)

inst_35:
// rs2_val == -2, imm_val == 248
// opcode:c.swsp; op1:x2; op2:x10; op2val:-2; immval:248
TEST_STORE(x1,x3,0,x2,x10,-2,248,32,c.swsp,0)

inst_36:
// rs2_val == -3, 
// opcode:c.swsp; op1:x2; op2:x10; op2val:-3; immval:76
TEST_STORE(x1,x3,0,x2,x10,-3,76,36,c.swsp,0)

inst_37:
// rs2_val == -5, 
// opcode:c.swsp; op1:x2; op2:x10; op2val:-5; immval:12
TEST_STORE(x1,x3,0,x2,x10,-5,12,40,c.swsp,0)

inst_38:
// rs2_val == -9, 
// opcode:c.swsp; op1:x2; op2:x10; op2val:-9; immval:28
TEST_STORE(x1,x3,0,x2,x10,-9,28,44,c.swsp,0)

inst_39:
// rs2_val == -268435457, 
// opcode:c.swsp; op1:x2; op2:x10; op2val:-268435457; immval:60
TEST_STORE(x1,x3,0,x2,x10,-268435457,60,48,c.swsp,0)

inst_40:
// rs2_val == -536870913, 
// opcode:c.swsp; op1:x2; op2:x10; op2val:-536870913; immval:168
TEST_STORE(x1,x3,0,x2,x10,-536870913,168,52,c.swsp,0)

inst_41:
// rs2_val == -1073741825, 
// opcode:c.swsp; op1:x2; op2:x10; op2val:-1073741825; immval:128
TEST_STORE(x1,x3,0,x2,x10,-1073741825,128,56,c.swsp,0)

inst_42:
// rs2_val == 1431655765, 
// opcode:c.swsp; op1:x2; op2:x10; op2val:1431655765; immval:168
TEST_STORE(x1,x3,0,x2,x10,1431655765,168,60,c.swsp,0)

inst_43:
// rs2_val == -1431655766, 
// opcode:c.swsp; op1:x2; op2:x10; op2val:-1431655766; immval:20
TEST_STORE(x1,x3,0,x2,x10,-1431655766,20,64,c.swsp,0)

inst_44:
// imm_val == 16, 
// opcode:c.swsp; op1:x2; op2:x10; op2val:-1; immval:16
TEST_STORE(x1,x3,0,x2,x10,-1,16,68,c.swsp,0)

inst_45:
// imm_val == 244, rs2_val == -262145
// opcode:c.swsp; op1:x2; op2:x10; op2val:-262145; immval:244
TEST_STORE(x1,x3,0,x2,x10,-262145,244,72,c.swsp,0)

inst_46:
// imm_val == 236, rs2_val == -524289
// opcode:c.swsp; op1:x2; op2:x10; op2val:-524289; immval:236
TEST_STORE(x1,x3,0,x2,x10,-524289,236,76,c.swsp,0)

inst_47:
// rs2_val == -17, 
// opcode:c.swsp; op1:x2; op2:x10; op2val:-17; immval:72
TEST_STORE(x1,x3,0,x2,x10,-17,72,80,c.swsp,0)

inst_48:
// rs2_val == -33, 
// opcode:c.swsp; op1:x2; op2:x10; op2val:-33; immval:72
TEST_STORE(x1,x3,0,x2,x10,-33,72,84,c.swsp,0)

inst_49:
// rs2_val == -65, 
// opcode:c.swsp; op1:x2; op2:x10; op2val:-65; immval:32
TEST_STORE(x1,x3,0,x2,x10,-65,32,88,c.swsp,0)

inst_50:
// rs2_val == -129, 
// opcode:c.swsp; op1:x2; op2:x10; op2val:-129; immval:28
TEST_STORE(x1,x3,0,x2,x10,-129,28,92,c.swsp,0)

inst_51:
// rs2_val == -257, 
// opcode:c.swsp; op1:x2; op2:x10; op2val:-257; immval:52
TEST_STORE(x1,x3,0,x2,x10,-257,52,96,c.swsp,0)

inst_52:
// rs2_val == -513, 
// opcode:c.swsp; op1:x2; op2:x10; op2val:-513; immval:72
TEST_STORE(x1,x3,0,x2,x10,-513,72,100,c.swsp,0)

inst_53:
// rs2_val == -1025, 
// opcode:c.swsp; op1:x2; op2:x10; op2val:-1025; immval:52
TEST_STORE(x1,x3,0,x2,x10,-1025,52,104,c.swsp,0)

inst_54:
// rs2_val == -2049, 
// opcode:c.swsp; op1:x2; op2:x10; op2val:-2049; immval:0
TEST_STORE(x1,x3,0,x2,x10,-2049,0,108,c.swsp,0)

inst_55:
// rs2_val == -4097, 
// opcode:c.swsp; op1:x2; op2:x10; op2val:-4097; immval:32
TEST_STORE(x1,x3,0,x2,x10,-4097,32,112,c.swsp,0)

inst_56:
// rs2_val == -8193, 
// opcode:c.swsp; op1:x2; op2:x10; op2val:-8193; immval:72
TEST_STORE(x1,x3,0,x2,x10,-8193,72,116,c.swsp,0)

inst_57:
// rs2_val == -16385, 
// opcode:c.swsp; op1:x2; op2:x10; op2val:-16385; immval:188
TEST_STORE(x1,x3,0,x2,x10,-16385,188,120,c.swsp,0)

inst_58:
// rs2_val == -32769, 
// opcode:c.swsp; op1:x2; op2:x10; op2val:-32769; immval:40
TEST_STORE(x1,x3,0,x2,x10,-32769,40,124,c.swsp,0)

inst_59:
// rs2_val == -65537, 
// opcode:c.swsp; op1:x2; op2:x10; op2val:-65537; immval:16
TEST_STORE(x1,x3,0,x2,x10,-65537,16,128,c.swsp,0)

inst_60:
// rs2_val == -131073, 
// opcode:c.swsp; op1:x2; op2:x10; op2val:-131073; immval:252
TEST_STORE(x1,x3,0,x2,x10,-131073,252,132,c.swsp,0)

inst_61:
// rs2_val == -1048577, 
// opcode:c.swsp; op1:x2; op2:x10; op2val:-1048577; immval:128
TEST_STORE(x1,x3,0,x2,x10,-1048577,128,136,c.swsp,0)

inst_62:
// rs2_val == -2097153, 
// opcode:c.swsp; op1:x2; op2:x10; op2val:-2097153; immval:124
TEST_STORE(x1,x3,0,x2,x10,-2097153,124,140,c.swsp,0)

inst_63:
// rs2_val == -4194305, 
// opcode:c.swsp; op1:x2; op2:x10; op2val:-4194305; immval:36
TEST_STORE(x1,x3,0,x2,x10,-4194305,36,144,c.swsp,0)

inst_64:
// rs2_val == -8388609, 
// opcode:c.swsp; op1:x2; op2:x10; op2val:-8388609; immval:252
TEST_STORE(x1,x3,0,x2,x10,-8388609,252,148,c.swsp,0)

inst_65:
// rs2_val == -16777217, 
// opcode:c.swsp; op1:x2; op2:x10; op2val:-16777217; immval:188
TEST_STORE(x1,x3,0,x2,x10,-16777217,188,152,c.swsp,0)

inst_66:
// rs2_val == -33554433, 
// opcode:c.swsp; op1:x2; op2:x10; op2val:-33554433; immval:12
TEST_STORE(x1,x3,0,x2,x10,-33554433,12,156,c.swsp,0)

inst_67:
// rs2_val == -67108865, 
// opcode:c.swsp; op1:x2; op2:x10; op2val:-67108865; immval:24
TEST_STORE(x1,x3,0,x2,x10,-67108865,24,160,c.swsp,0)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x12_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x12_1:
    .fill 27*(XLEN/32),4,0xdeadbeef


signature_x1_0:
    .fill 41*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
