 
// -----------
// This file was generated by riscv_ctg (https://gitlab.com/incoresemi/riscv-compliance/riscv_ctg)
// version   : 0.1.0
// timestamp : Fri Nov  6 10:29:15 2020 GMT
// usage     : riscv_ctg \
//                  -- cgf /scratch/git-repo/incoresemi/riscv-compliance/riscv_ctg/sample_cgfs/rv32ic.cgf \
//                  -- xlen 32 \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the c.swsp instruction of the RISC-V C extension for the cswsp covergroup.
// 
#include "compliance_model.h"
#include "compliance_test.h"
RVTEST_ISA("RV32IC")

RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*C.*);def TEST_CASE_1=True;",cswsp)

RVTEST_SIGBASE( x6,signature_x6_1)

inst_0:
// rs2==x17, imm_val > 0, 
// opcode:c.swsp; op1:x2; op2:x17; op2val:7; immval:60
TEST_STORE(x6,x8,0,x2,x17,7,60,0,c.swsp,0)

inst_1:
// rs2==x31, imm_val == 0, rs2_val == 33554432
// opcode:c.swsp; op1:x2; op2:x31; op2val:33554432; immval:0
TEST_STORE(x6,x8,0,x2,x31,33554432,0,4,c.swsp,0)

inst_2:
// rs2==x2, rs2_val == (-2**(xlen-1)), imm_val == 16, rs2_val == -2147483648
// opcode:c.swsp; op1:x2; op2:x2; op2val:-2147483648; immval:16
TEST_STORE(x6,x8,0,x2,x2,-2147483648,16,8,c.swsp,0)

inst_3:
// rs2==x19, rs2_val == 0, imm_val == 244
// opcode:c.swsp; op1:x2; op2:x19; op2val:0; immval:244
TEST_STORE(x6,x8,0,x2,x19,0,244,12,c.swsp,0)

inst_4:
// rs2==x18, rs2_val == (2**(xlen-1)-1), rs2_val == 2147483647
// opcode:c.swsp; op1:x2; op2:x18; op2val:2147483647; immval:52
TEST_STORE(x6,x8,0,x2,x18,2147483647,52,16,c.swsp,0)

inst_5:
// rs2==x10, rs2_val == 1, imm_val == 124
// opcode:c.swsp; op1:x2; op2:x10; op2val:1; immval:124
TEST_STORE(x6,x8,0,x2,x10,1,124,20,c.swsp,0)

inst_6:
// rs2==x20, imm_val == 4, rs2_val == 32
// opcode:c.swsp; op1:x2; op2:x20; op2val:32; immval:4
TEST_STORE(x6,x8,0,x2,x20,32,4,24,c.swsp,0)

inst_7:
// rs2==x22, imm_val == 8, rs2_val == 1431655765
// opcode:c.swsp; op1:x2; op2:x22; op2val:1431655765; immval:8
TEST_STORE(x6,x8,0,x2,x22,1431655765,8,28,c.swsp,0)

inst_8:
// rs2==x14, imm_val == 32, rs2_val == -32769
// opcode:c.swsp; op1:x2; op2:x14; op2val:-32769; immval:32
TEST_STORE(x6,x8,0,x2,x14,-32769,32,32,c.swsp,0)

inst_9:
// rs2==x11, imm_val == 64, rs2_val == -3
// opcode:c.swsp; op1:x2; op2:x11; op2val:-3; immval:64
TEST_STORE(x6,x8,0,x2,x11,-3,64,36,c.swsp,0)

inst_10:
// rs2==x25, imm_val == 128, rs2_val == -65
// opcode:c.swsp; op1:x2; op2:x25; op2val:-65; immval:128
TEST_STORE(x6,x8,0,x2,x25,-65,128,40,c.swsp,0)

inst_11:
// rs2==x23, imm_val == 248, 
// opcode:c.swsp; op1:x2; op2:x23; op2val:-7; immval:248
TEST_STORE(x6,x8,0,x2,x23,-7,248,44,c.swsp,0)

inst_12:
// rs2==x29, imm_val == 236, 
// opcode:c.swsp; op1:x2; op2:x29; op2val:-1; immval:236
TEST_STORE(x6,x8,0,x2,x29,-1,236,48,c.swsp,0)

inst_13:
// rs2==x12, imm_val == 220, rs2_val == -257
// opcode:c.swsp; op1:x2; op2:x12; op2val:-257; immval:220
TEST_STORE(x6,x8,0,x2,x12,-257,220,52,c.swsp,0)

inst_14:
// rs2==x7, imm_val == 188, rs2_val == -524289
// opcode:c.swsp; op1:x2; op2:x7; op2val:-524289; immval:188
TEST_STORE(x6,x8,0,x2,x7,-524289,188,56,c.swsp,0)

inst_15:
// rs2==x9, imm_val == 84, rs2_val == -4194305
// opcode:c.swsp; op1:x2; op2:x9; op2val:-4194305; immval:84
TEST_STORE(x6,x8,0,x2,x9,-4194305,84,60,c.swsp,0)

inst_16:
// rs2==x15, imm_val == 168, rs2_val == 8192
// opcode:c.swsp; op1:x2; op2:x15; op2val:8192; immval:168
TEST_STORE(x6,x8,0,x2,x15,8192,168,64,c.swsp,0)

inst_17:
// rs2==x24, rs2_val == 2, 
// opcode:c.swsp; op1:x2; op2:x24; op2val:2; immval:52
TEST_STORE(x6,x8,0,x2,x24,2,52,68,c.swsp,0)

inst_18:
// rs2==x3, rs2_val == 4, 
// opcode:c.swsp; op1:x2; op2:x3; op2val:4; immval:20
TEST_STORE(x6,x8,0,x2,x3,4,20,72,c.swsp,0)

inst_19:
// rs2==x13, rs2_val == 8, 
// opcode:c.swsp; op1:x2; op2:x13; op2val:8; immval:48
TEST_STORE(x6,x8,0,x2,x13,8,48,76,c.swsp,0)

inst_20:
// rs2==x4, rs2_val == 16, 
// opcode:c.swsp; op1:x2; op2:x4; op2val:16; immval:248
TEST_STORE(x6,x8,0,x2,x4,16,248,80,c.swsp,0)

inst_21:
// rs2==x1, rs2_val == 64, 
// opcode:c.swsp; op1:x2; op2:x1; op2val:64; immval:12
TEST_STORE(x6,x8,0,x2,x1,64,12,84,c.swsp,0)

inst_22:
// rs2==x30, rs2_val == 128, 
// opcode:c.swsp; op1:x2; op2:x30; op2val:128; immval:168
TEST_STORE(x6,x8,0,x2,x30,128,168,88,c.swsp,0)

inst_23:
// rs2==x16, rs2_val == 256, 
// opcode:c.swsp; op1:x2; op2:x16; op2val:256; immval:36
TEST_STORE(x6,x8,0,x2,x16,256,36,92,c.swsp,0)

inst_24:
// rs2==x5, rs2_val == 512, 
// opcode:c.swsp; op1:x2; op2:x5; op2val:512; immval:32
TEST_STORE(x6,x8,0,x2,x5,512,32,96,c.swsp,0)

inst_25:
// rs2==x28, rs2_val == 1024, 
// opcode:c.swsp; op1:x2; op2:x28; op2val:1024; immval:244
TEST_STORE(x6,x8,0,x2,x28,1024,244,100,c.swsp,0)

inst_26:
// rs2==x26, rs2_val == 2048, 
// opcode:c.swsp; op1:x2; op2:x26; op2val:2048; immval:36
TEST_STORE(x6,x8,0,x2,x26,2048,36,104,c.swsp,0)

inst_27:
// rs2==x21, rs2_val == 4096, 
// opcode:c.swsp; op1:x2; op2:x21; op2val:4096; immval:128
TEST_STORE(x6,x3,0,x2,x21,4096,128,108,c.swsp,0)
RVTEST_SIGBASE( x1,signature_x1_0)

inst_28:
// rs2==x6, rs2_val == 16384, 
// opcode:c.swsp; op1:x2; op2:x6; op2val:16384; immval:124
TEST_STORE(x1,x3,0,x2,x6,16384,124,0,c.swsp,0)

inst_29:
// rs2==x0, rs2_val == 32768, 
// opcode:c.swsp; op1:x2; op2:x0; op2val:32768; immval:188
TEST_STORE(x1,x3,0,x2,x0,32768,188,4,c.swsp,0)

inst_30:
// rs2==x27, rs2_val == 65536, 
// opcode:c.swsp; op1:x2; op2:x27; op2val:65536; immval:84
TEST_STORE(x1,x3,0,x2,x27,65536,84,8,c.swsp,0)

inst_31:
// rs2==x8, rs2_val == 131072, 
// opcode:c.swsp; op1:x2; op2:x8; op2val:131072; immval:248
TEST_STORE(x1,x3,0,x2,x8,131072,248,12,c.swsp,0)

inst_32:
// rs2_val == 262144, 
// opcode:c.swsp; op1:x2; op2:x10; op2val:262144; immval:8
TEST_STORE(x1,x3,0,x2,x10,262144,8,16,c.swsp,0)

inst_33:
// rs2_val == 524288, 
// opcode:c.swsp; op1:x2; op2:x10; op2val:524288; immval:248
TEST_STORE(x1,x3,0,x2,x10,524288,248,20,c.swsp,0)

inst_34:
// rs2_val == 1048576, 
// opcode:c.swsp; op1:x2; op2:x10; op2val:1048576; immval:44
TEST_STORE(x1,x3,0,x2,x10,1048576,44,24,c.swsp,0)

inst_35:
// rs2_val == 2097152, 
// opcode:c.swsp; op1:x2; op2:x10; op2val:2097152; immval:252
TEST_STORE(x1,x3,0,x2,x10,2097152,252,28,c.swsp,0)

inst_36:
// rs2_val == 4194304, 
// opcode:c.swsp; op1:x2; op2:x10; op2val:4194304; immval:40
TEST_STORE(x1,x3,0,x2,x10,4194304,40,32,c.swsp,0)

inst_37:
// rs2_val == 8388608, 
// opcode:c.swsp; op1:x2; op2:x10; op2val:8388608; immval:8
TEST_STORE(x1,x3,0,x2,x10,8388608,8,36,c.swsp,0)

inst_38:
// rs2_val == 16777216, 
// opcode:c.swsp; op1:x2; op2:x10; op2val:16777216; immval:220
TEST_STORE(x1,x3,0,x2,x10,16777216,220,40,c.swsp,0)

inst_39:
// rs2_val == -8193, 
// opcode:c.swsp; op1:x2; op2:x10; op2val:-8193; immval:188
TEST_STORE(x1,x3,0,x2,x10,-8193,188,44,c.swsp,0)

inst_40:
// rs2_val == -16385, 
// opcode:c.swsp; op1:x2; op2:x10; op2val:-16385; immval:0
TEST_STORE(x1,x3,0,x2,x10,-16385,0,48,c.swsp,0)

inst_41:
// rs2_val == -65537, 
// opcode:c.swsp; op1:x2; op2:x10; op2val:-65537; immval:28
TEST_STORE(x1,x3,0,x2,x10,-65537,28,52,c.swsp,0)

inst_42:
// rs2_val == -131073, 
// opcode:c.swsp; op1:x2; op2:x10; op2val:-131073; immval:44
TEST_STORE(x1,x3,0,x2,x10,-131073,44,56,c.swsp,0)

inst_43:
// rs2_val == -262145, 
// opcode:c.swsp; op1:x2; op2:x10; op2val:-262145; immval:28
TEST_STORE(x1,x3,0,x2,x10,-262145,28,60,c.swsp,0)

inst_44:
// rs2_val == -1048577, 
// opcode:c.swsp; op1:x2; op2:x10; op2val:-1048577; immval:64
TEST_STORE(x1,x3,0,x2,x10,-1048577,64,64,c.swsp,0)

inst_45:
// rs2_val == -2097153, 
// opcode:c.swsp; op1:x2; op2:x10; op2val:-2097153; immval:60
TEST_STORE(x1,x3,0,x2,x10,-2097153,60,68,c.swsp,0)

inst_46:
// rs2_val == -8388609, 
// opcode:c.swsp; op1:x2; op2:x10; op2val:-8388609; immval:244
TEST_STORE(x1,x3,0,x2,x10,-8388609,244,72,c.swsp,0)

inst_47:
// rs2_val == -16777217, 
// opcode:c.swsp; op1:x2; op2:x10; op2val:-16777217; immval:0
TEST_STORE(x1,x3,0,x2,x10,-16777217,0,76,c.swsp,0)

inst_48:
// rs2_val == -33554433, 
// opcode:c.swsp; op1:x2; op2:x10; op2val:-33554433; immval:220
TEST_STORE(x1,x3,0,x2,x10,-33554433,220,80,c.swsp,0)

inst_49:
// rs2_val == -67108865, 
// opcode:c.swsp; op1:x2; op2:x10; op2val:-67108865; immval:52
TEST_STORE(x1,x3,0,x2,x10,-67108865,52,84,c.swsp,0)

inst_50:
// rs2_val == -134217729, 
// opcode:c.swsp; op1:x2; op2:x10; op2val:-134217729; immval:76
TEST_STORE(x1,x3,0,x2,x10,-134217729,76,88,c.swsp,0)

inst_51:
// rs2_val == -268435457, 
// opcode:c.swsp; op1:x2; op2:x10; op2val:-268435457; immval:24
TEST_STORE(x1,x3,0,x2,x10,-268435457,24,92,c.swsp,0)

inst_52:
// rs2_val == -536870913, 
// opcode:c.swsp; op1:x2; op2:x10; op2val:-536870913; immval:8
TEST_STORE(x1,x3,0,x2,x10,-536870913,8,96,c.swsp,0)

inst_53:
// rs2_val == -1073741825, 
// opcode:c.swsp; op1:x2; op2:x10; op2val:-1073741825; immval:124
TEST_STORE(x1,x3,0,x2,x10,-1073741825,124,100,c.swsp,0)

inst_54:
// rs2_val == -1431655766, 
// opcode:c.swsp; op1:x2; op2:x10; op2val:-1431655766; immval:48
TEST_STORE(x1,x3,0,x2,x10,-1431655766,48,104,c.swsp,0)

inst_55:
// rs2_val == 67108864, 
// opcode:c.swsp; op1:x2; op2:x10; op2val:67108864; immval:220
TEST_STORE(x1,x3,0,x2,x10,67108864,220,108,c.swsp,0)

inst_56:
// rs2_val == 134217728, 
// opcode:c.swsp; op1:x2; op2:x10; op2val:134217728; immval:252
TEST_STORE(x1,x3,0,x2,x10,134217728,252,112,c.swsp,0)

inst_57:
// rs2_val == 268435456, 
// opcode:c.swsp; op1:x2; op2:x10; op2val:268435456; immval:20
TEST_STORE(x1,x3,0,x2,x10,268435456,20,116,c.swsp,0)

inst_58:
// rs2_val == 536870912, 
// opcode:c.swsp; op1:x2; op2:x10; op2val:536870912; immval:32
TEST_STORE(x1,x3,0,x2,x10,536870912,32,120,c.swsp,0)

inst_59:
// rs2_val == 1073741824, 
// opcode:c.swsp; op1:x2; op2:x10; op2val:1073741824; immval:0
TEST_STORE(x1,x3,0,x2,x10,1073741824,0,124,c.swsp,0)

inst_60:
// rs2_val == -2, 
// opcode:c.swsp; op1:x2; op2:x10; op2val:-2; immval:124
TEST_STORE(x1,x3,0,x2,x10,-2,124,128,c.swsp,0)

inst_61:
// rs2_val == -5, 
// opcode:c.swsp; op1:x2; op2:x10; op2val:-5; immval:72
TEST_STORE(x1,x3,0,x2,x10,-5,72,132,c.swsp,0)

inst_62:
// rs2_val == -9, 
// opcode:c.swsp; op1:x2; op2:x10; op2val:-9; immval:244
TEST_STORE(x1,x3,0,x2,x10,-9,244,136,c.swsp,0)

inst_63:
// rs2_val == -17, 
// opcode:c.swsp; op1:x2; op2:x10; op2val:-17; immval:36
TEST_STORE(x1,x3,0,x2,x10,-17,36,140,c.swsp,0)

inst_64:
// rs2_val == -33, 
// opcode:c.swsp; op1:x2; op2:x10; op2val:-33; immval:168
TEST_STORE(x1,x3,0,x2,x10,-33,168,144,c.swsp,0)

inst_65:
// rs2_val == -129, 
// opcode:c.swsp; op1:x2; op2:x10; op2val:-129; immval:76
TEST_STORE(x1,x3,0,x2,x10,-129,76,148,c.swsp,0)

inst_66:
// rs2_val == -513, 
// opcode:c.swsp; op1:x2; op2:x10; op2val:-513; immval:64
TEST_STORE(x1,x3,0,x2,x10,-513,64,152,c.swsp,0)

inst_67:
// rs2_val == -1025, 
// opcode:c.swsp; op1:x2; op2:x10; op2val:-1025; immval:68
TEST_STORE(x1,x3,0,x2,x10,-1025,68,156,c.swsp,0)

inst_68:
// rs2_val == -2049, 
// opcode:c.swsp; op1:x2; op2:x10; op2val:-2049; immval:236
TEST_STORE(x1,x3,0,x2,x10,-2049,236,160,c.swsp,0)

inst_69:
// rs2_val == -4097, 
// opcode:c.swsp; op1:x2; op2:x10; op2val:-4097; immval:32
TEST_STORE(x1,x3,0,x2,x10,-4097,32,164,c.swsp,0)

inst_70:
// rs2_val == (-2**(xlen-1)), imm_val == 16, rs2_val == -2147483648
// opcode:c.swsp; op1:x2; op2:x10; op2val:-2147483648; immval:16
TEST_STORE(x1,x3,0,x2,x10,-2147483648,16,168,c.swsp,0)

inst_71:
// rs2_val == 32768, 
// opcode:c.swsp; op1:x2; op2:x10; op2val:32768; immval:188
TEST_STORE(x1,x3,0,x2,x10,32768,188,172,c.swsp,0)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x6_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x6_1:
    .fill 28*(XLEN/32),4,0xdeadbeef


signature_x1_0:
    .fill 44*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
