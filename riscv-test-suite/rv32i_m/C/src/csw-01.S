
// -----------
// This file was generated by riscv_ctg (https://gitlab.com/incoresemi/riscv-compliance/riscv_ctg)
// version   : 0.2.0
// timestamp : Wed Nov 18 05:46:14 2020 GMT
// usage     : riscv_ctg \
//                  -- cgf ('/scratch/git-repo/incoresemi/riscv-compliance/riscv_ctg/sample_cgfs/dataset.cgf', '/scratch/git-repo/incoresemi/riscv-compliance/riscv_ctg/sample_cgfs/rv32ic.cgf') \
//                  -- xlen 32 \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the c.sw instruction of the RISC-V C extension for the csw covergroup.
// 
#include "compliance_model.h"
#include "arch_test.h"
RVTEST_ISA("RV32IC")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*C.*);def TEST_CASE_1=True;",csw)

RVTEST_SIGBASE( x1,signature_x1_1)

inst_0:
// rs1 != rs2, rs1==x12, rs2==x10, rs2_val == (-2**(xlen-1)), imm_val == 32, imm_val > 0, rs2_val == -2147483648
// opcode:c.sw; op1:x12; op2:x10; op2val:-2147483648; immval:32
TEST_STORE(x1,x2,0,x12,x10,-2147483648,32,0,c.sw,0)

inst_1:
// rs1==x14, rs2==x8, rs2_val == 0, 
// opcode:c.sw; op1:x14; op2:x8; op2val:0; immval:76
TEST_STORE(x1,x2,0,x14,x8,0,76,4,c.sw,0)

inst_2:
// rs1==x11, rs2==x15, rs2_val == (2**(xlen-1)-1), rs2_val == 2147483647
// opcode:c.sw; op1:x11; op2:x15; op2val:2147483647; immval:124
TEST_STORE(x1,x2,0,x11,x15,2147483647,124,8,c.sw,0)

inst_3:
// rs1==x9, rs2==x12, rs2_val == 1, 
// opcode:c.sw; op1:x9; op2:x12; op2val:1; immval:52
TEST_STORE(x1,x2,0,x9,x12,1,52,12,c.sw,0)

inst_4:
// rs1==x15, rs2==x14, imm_val == 0, rs2_val == -1048577
// opcode:c.sw; op1:x15; op2:x14; op2val:-1048577; immval:0
TEST_STORE(x1,x2,0,x15,x14,-1048577,0,16,c.sw,0)

inst_5:
// rs1==x13, rs2==x9, rs2_val == 2, 
// opcode:c.sw; op1:x13; op2:x9; op2val:2; immval:20
TEST_STORE(x1,x2,0,x13,x9,2,20,20,c.sw,0)

inst_6:
// rs1==x8, rs2==x11, rs2_val == 4, imm_val == 92
// opcode:c.sw; op1:x8; op2:x11; op2val:4; immval:92
TEST_STORE(x1,x2,0,x8,x11,4,92,24,c.sw,0)

inst_7:
// rs1==x10, rs2==x13, rs2_val == 8, imm_val == 120
// opcode:c.sw; op1:x10; op2:x13; op2val:8; immval:120
TEST_STORE(x1,x2,0,x10,x13,8,120,28,c.sw,0)

inst_8:
// rs2_val == 16, imm_val == 116
// opcode:c.sw; op1:x10; op2:x11; op2val:16; immval:116
TEST_STORE(x1,x2,0,x10,x11,16,116,32,c.sw,0)

inst_9:
// rs2_val == 32, 
// opcode:c.sw; op1:x10; op2:x11; op2val:32; immval:120
TEST_STORE(x1,x2,0,x10,x11,32,120,36,c.sw,0)

inst_10:
// rs2_val == 64, imm_val == 84
// opcode:c.sw; op1:x10; op2:x11; op2val:64; immval:84
TEST_STORE(x1,x2,0,x10,x11,64,84,40,c.sw,0)

inst_11:
// rs2_val == 128, 
// opcode:c.sw; op1:x10; op2:x11; op2val:128; immval:28
TEST_STORE(x1,x2,0,x10,x11,128,28,44,c.sw,0)

inst_12:
// rs2_val == 256, imm_val == 40
// opcode:c.sw; op1:x10; op2:x11; op2val:256; immval:40
TEST_STORE(x1,x2,0,x10,x11,256,40,48,c.sw,0)

inst_13:
// rs2_val == 512, imm_val == 4
// opcode:c.sw; op1:x10; op2:x11; op2val:512; immval:4
TEST_STORE(x1,x2,0,x10,x11,512,4,52,c.sw,0)

inst_14:
// rs2_val == 1024, 
// opcode:c.sw; op1:x10; op2:x11; op2val:1024; immval:4
TEST_STORE(x1,x2,0,x10,x11,1024,4,56,c.sw,0)

inst_15:
// rs2_val == 2048, imm_val == 8
// opcode:c.sw; op1:x10; op2:x11; op2val:2048; immval:8
TEST_STORE(x1,x2,0,x10,x11,2048,8,60,c.sw,0)

inst_16:
// rs2_val == 4096, 
// opcode:c.sw; op1:x10; op2:x11; op2val:4096; immval:68
TEST_STORE(x1,x2,0,x10,x11,4096,68,64,c.sw,0)

inst_17:
// rs2_val == 8192, 
// opcode:c.sw; op1:x10; op2:x11; op2val:8192; immval:20
TEST_STORE(x1,x2,0,x10,x11,8192,20,68,c.sw,0)

inst_18:
// rs2_val == 16384, 
// opcode:c.sw; op1:x10; op2:x11; op2val:16384; immval:92
TEST_STORE(x1,x2,0,x10,x11,16384,92,72,c.sw,0)

inst_19:
// rs2_val == 32768, 
// opcode:c.sw; op1:x10; op2:x11; op2val:32768; immval:92
TEST_STORE(x1,x2,0,x10,x11,32768,92,76,c.sw,0)

inst_20:
// rs2_val == 65536, 
// opcode:c.sw; op1:x10; op2:x11; op2val:65536; immval:76
TEST_STORE(x1,x2,0,x10,x11,65536,76,80,c.sw,0)

inst_21:
// rs2_val == 131072, 
// opcode:c.sw; op1:x10; op2:x11; op2val:131072; immval:12
TEST_STORE(x1,x2,0,x10,x11,131072,12,84,c.sw,0)

inst_22:
// rs2_val == 262144, imm_val == 64
// opcode:c.sw; op1:x10; op2:x11; op2val:262144; immval:64
TEST_STORE(x1,x2,0,x10,x11,262144,64,88,c.sw,0)

inst_23:
// rs2_val == 524288, 
// opcode:c.sw; op1:x10; op2:x11; op2val:524288; immval:68
TEST_STORE(x1,x2,0,x10,x11,524288,68,92,c.sw,0)

inst_24:
// rs2_val == 1048576, 
// opcode:c.sw; op1:x10; op2:x11; op2val:1048576; immval:24
TEST_STORE(x1,x2,0,x10,x11,1048576,24,96,c.sw,0)

inst_25:
// rs2_val == 2097152, 
// opcode:c.sw; op1:x10; op2:x11; op2val:2097152; immval:4
TEST_STORE(x1,x2,0,x10,x11,2097152,4,100,c.sw,0)

inst_26:
// rs2_val == 4194304, 
// opcode:c.sw; op1:x10; op2:x11; op2val:4194304; immval:8
TEST_STORE(x1,x2,0,x10,x11,4194304,8,104,c.sw,0)

inst_27:
// rs2_val == 8388608, 
// opcode:c.sw; op1:x10; op2:x11; op2val:8388608; immval:40
TEST_STORE(x1,x2,0,x10,x11,8388608,40,108,c.sw,0)

inst_28:
// rs2_val == 16777216, 
// opcode:c.sw; op1:x10; op2:x11; op2val:16777216; immval:92
TEST_STORE(x1,x2,0,x10,x11,16777216,92,112,c.sw,0)

inst_29:
// rs2_val == 33554432, imm_val == 108
// opcode:c.sw; op1:x10; op2:x11; op2val:33554432; immval:108
TEST_STORE(x1,x2,0,x10,x11,33554432,108,116,c.sw,0)

inst_30:
// rs2_val == 67108864, 
// opcode:c.sw; op1:x10; op2:x11; op2val:67108864; immval:48
TEST_STORE(x1,x2,0,x10,x11,67108864,48,120,c.sw,0)

inst_31:
// rs2_val == 134217728, 
// opcode:c.sw; op1:x10; op2:x11; op2val:134217728; immval:48
TEST_STORE(x1,x2,0,x10,x11,134217728,48,124,c.sw,0)

inst_32:
// rs2_val == 268435456, 
// opcode:c.sw; op1:x10; op2:x11; op2val:268435456; immval:48
TEST_STORE(x1,x2,0,x10,x11,268435456,48,128,c.sw,0)

inst_33:
// rs2_val == 536870912, 
// opcode:c.sw; op1:x10; op2:x11; op2val:536870912; immval:44
TEST_STORE(x1,x2,0,x10,x11,536870912,44,132,c.sw,0)

inst_34:
// rs2_val == 1073741824, 
// opcode:c.sw; op1:x10; op2:x11; op2val:1073741824; immval:32
TEST_STORE(x1,x2,0,x10,x11,1073741824,32,136,c.sw,0)

inst_35:
// rs2_val == -2, 
// opcode:c.sw; op1:x10; op2:x11; op2val:-2; immval:52
TEST_STORE(x1,x2,0,x10,x11,-2,52,140,c.sw,0)

inst_36:
// rs2_val == -3, 
// opcode:c.sw; op1:x10; op2:x11; op2val:-3; immval:64
TEST_STORE(x1,x2,0,x10,x11,-3,64,144,c.sw,0)

inst_37:
// rs2_val == -5, 
// opcode:c.sw; op1:x10; op2:x11; op2val:-5; immval:0
TEST_STORE(x1,x2,0,x10,x11,-5,0,148,c.sw,0)

inst_38:
// rs2_val == -134217729, 
// opcode:c.sw; op1:x10; op2:x11; op2val:-134217729; immval:120
TEST_STORE(x1,x2,0,x10,x11,-134217729,120,152,c.sw,0)

inst_39:
// rs2_val == -268435457, 
// opcode:c.sw; op1:x10; op2:x11; op2val:-268435457; immval:44
TEST_STORE(x1,x2,0,x10,x11,-268435457,44,156,c.sw,0)

inst_40:
// rs2_val == -536870913, 
// opcode:c.sw; op1:x10; op2:x11; op2val:-536870913; immval:84
TEST_STORE(x1,x2,0,x10,x11,-536870913,84,160,c.sw,0)

inst_41:
// rs2_val == -1073741825, 
// opcode:c.sw; op1:x10; op2:x11; op2val:-1073741825; immval:116
TEST_STORE(x1,x2,0,x10,x11,-1073741825,116,164,c.sw,0)

inst_42:
// rs2_val == 1431655765, 
// opcode:c.sw; op1:x10; op2:x11; op2val:1431655765; immval:68
TEST_STORE(x1,x2,0,x10,x11,1431655765,68,168,c.sw,0)

inst_43:
// rs2_val == -1431655766, 
// opcode:c.sw; op1:x10; op2:x11; op2val:-1431655766; immval:76
TEST_STORE(x1,x2,0,x10,x11,-1431655766,76,172,c.sw,0)

inst_44:
// imm_val == 16, rs2_val == -513
// opcode:c.sw; op1:x10; op2:x11; op2val:-513; immval:16
TEST_STORE(x1,x2,0,x10,x11,-513,16,176,c.sw,0)

inst_45:
// imm_val == 60, 
// opcode:c.sw; op1:x10; op2:x11; op2val:-513; immval:60
TEST_STORE(x1,x2,0,x10,x11,-513,60,180,c.sw,0)

inst_46:
// rs2_val == -9, 
// opcode:c.sw; op1:x10; op2:x11; op2val:-9; immval:120
TEST_STORE(x1,x2,0,x10,x11,-9,120,184,c.sw,0)

inst_47:
// rs2_val == -17, 
// opcode:c.sw; op1:x10; op2:x11; op2val:-17; immval:120
TEST_STORE(x1,x2,0,x10,x11,-17,120,188,c.sw,0)

inst_48:
// rs2_val == -33, 
// opcode:c.sw; op1:x10; op2:x11; op2val:-33; immval:52
TEST_STORE(x1,x2,0,x10,x11,-33,52,192,c.sw,0)

inst_49:
// rs2_val == -65, 
// opcode:c.sw; op1:x10; op2:x11; op2val:-65; immval:60
TEST_STORE(x1,x2,0,x10,x11,-65,60,196,c.sw,0)

inst_50:
// rs2_val == -129, 
// opcode:c.sw; op1:x10; op2:x11; op2val:-129; immval:4
TEST_STORE(x1,x2,0,x10,x11,-129,4,200,c.sw,0)

inst_51:
// rs2_val == -257, 
// opcode:c.sw; op1:x10; op2:x11; op2val:-257; immval:72
TEST_STORE(x1,x2,0,x10,x11,-257,72,204,c.sw,0)

inst_52:
// rs2_val == -1025, 
// opcode:c.sw; op1:x10; op2:x11; op2val:-1025; immval:120
TEST_STORE(x1,x2,0,x10,x11,-1025,120,208,c.sw,0)

inst_53:
// rs2_val == -2049, 
// opcode:c.sw; op1:x10; op2:x11; op2val:-2049; immval:52
TEST_STORE(x1,x2,0,x10,x11,-2049,52,212,c.sw,0)

inst_54:
// rs2_val == -4097, 
// opcode:c.sw; op1:x10; op2:x11; op2val:-4097; immval:4
TEST_STORE(x1,x2,0,x10,x11,-4097,4,216,c.sw,0)

inst_55:
// rs2_val == -8193, 
// opcode:c.sw; op1:x10; op2:x11; op2val:-8193; immval:32
TEST_STORE(x1,x2,0,x10,x11,-8193,32,220,c.sw,0)

inst_56:
// rs2_val == -16385, 
// opcode:c.sw; op1:x10; op2:x11; op2val:-16385; immval:60
TEST_STORE(x1,x2,0,x10,x11,-16385,60,224,c.sw,0)

inst_57:
// rs2_val == -32769, 
// opcode:c.sw; op1:x10; op2:x11; op2val:-32769; immval:56
TEST_STORE(x1,x2,0,x10,x11,-32769,56,228,c.sw,0)

inst_58:
// rs2_val == -65537, 
// opcode:c.sw; op1:x10; op2:x11; op2val:-65537; immval:0
TEST_STORE(x1,x2,0,x10,x11,-65537,0,232,c.sw,0)

inst_59:
// rs2_val == -131073, 
// opcode:c.sw; op1:x10; op2:x11; op2val:-131073; immval:56
TEST_STORE(x1,x2,0,x10,x11,-131073,56,236,c.sw,0)

inst_60:
// rs2_val == -262145, 
// opcode:c.sw; op1:x10; op2:x11; op2val:-262145; immval:68
TEST_STORE(x1,x2,0,x10,x11,-262145,68,240,c.sw,0)

inst_61:
// rs2_val == -524289, 
// opcode:c.sw; op1:x10; op2:x11; op2val:-524289; immval:8
TEST_STORE(x1,x2,0,x10,x11,-524289,8,244,c.sw,0)

inst_62:
// rs2_val == -2097153, 
// opcode:c.sw; op1:x10; op2:x11; op2val:-2097153; immval:36
TEST_STORE(x1,x2,0,x10,x11,-2097153,36,248,c.sw,0)

inst_63:
// rs2_val == -4194305, 
// opcode:c.sw; op1:x10; op2:x11; op2val:-4194305; immval:20
TEST_STORE(x1,x2,0,x10,x11,-4194305,20,252,c.sw,0)

inst_64:
// rs2_val == -8388609, 
// opcode:c.sw; op1:x10; op2:x11; op2val:-8388609; immval:72
TEST_STORE(x1,x2,0,x10,x11,-8388609,72,256,c.sw,0)

inst_65:
// rs2_val == -16777217, 
// opcode:c.sw; op1:x10; op2:x11; op2val:-16777217; immval:20
TEST_STORE(x1,x2,0,x10,x11,-16777217,20,260,c.sw,0)

inst_66:
// rs2_val == -33554433, 
// opcode:c.sw; op1:x10; op2:x11; op2val:-33554433; immval:76
TEST_STORE(x1,x2,0,x10,x11,-33554433,76,264,c.sw,0)

inst_67:
// rs2_val == -67108865, 
// opcode:c.sw; op1:x10; op2:x11; op2val:-67108865; immval:72
TEST_STORE(x1,x2,0,x10,x11,-67108865,72,268,c.sw,0)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x1_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x1_1:
    .fill 68*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
