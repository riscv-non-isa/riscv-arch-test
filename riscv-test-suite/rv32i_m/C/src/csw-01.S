 
// -----------
// This file was generated by riscv_ctg (https://gitlab.com/incoresemi/riscv-compliance/riscv_ctg)
// version   : 0.1.0
// timestamp : Thu Nov  5 11:18:28 2020 GMT
// usage     : riscv_ctg \
//                  -- cgf /scratch/git-repo/incoresemi/riscv-compliance/riscv_ctg/sample_cgfs/rv32ic.cgf \
//                  -- xlen 32 \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the c.sw instruction of the RISC-V C extension for the csw covergroup.
// 
#include "compliance_model.h"
#include "compliance_test.h"
RVTEST_ISA("RV32IC")

RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*C.*);def TEST_CASE_1=True;",csw)

RVTEST_SIGBASE( x1,signature_x1_1)

// rs1 != rs2, rs1==x12, rs2==x14, imm_val > 0, imm_val == 40, rs2_val == -9
// opcode:c.sw; op1:x12; op2:x14; op2val:0xfffffff7; immval:40
TEST_STORE(x1,x2,0,x12,x14,0xfffffff7,40,0,c.sw,0)

// rs1==x13, rs2==x15, imm_val == 0, rs2_val == -131073
// opcode:c.sw; op1:x13; op2:x15; op2val:0xfffdffff; immval:0
TEST_STORE(x1,x2,0,x13,x15,0xfffdffff,0,4,c.sw,0)

// rs1==x8, rs2==x11, rs2_val == (-2**(xlen-1)), rs2_val == -2147483648
// opcode:c.sw; op1:x8; op2:x11; op2val:0x80000000; immval:20
TEST_STORE(x1,x2,0,x8,x11,0x80000000,20,8,c.sw,0)

// rs1==x14, rs2==x10, rs2_val == 0, 
// opcode:c.sw; op1:x14; op2:x10; op2val:0x00000000; immval:68
TEST_STORE(x1,x2,0,x14,x10,0x00000000,68,12,c.sw,0)

// rs1==x9, rs2==x13, rs2_val == (2**(xlen-1)-1), rs2_val == 2147483647
// opcode:c.sw; op1:x9; op2:x13; op2val:0x7fffffff; immval:28
TEST_STORE(x1,x2,0,x9,x13,0x7fffffff,28,16,c.sw,0)

// rs1==x10, rs2==x12, rs2_val == 1, 
// opcode:c.sw; op1:x10; op2:x12; op2val:0x00000001; immval:68
TEST_STORE(x1,x2,0,x10,x12,0x00000001,68,20,c.sw,0)

// rs1==x11, rs2==x8, imm_val == 4, 
// opcode:c.sw; op1:x11; op2:x8; op2val:0xfffffff7; immval:4
TEST_STORE(x1,x2,0,x11,x8,0xfffffff7,4,24,c.sw,0)

// rs1==x15, rs2==x9, imm_val == 8, rs2_val == -2
// opcode:c.sw; op1:x15; op2:x9; op2val:0xfffffffe; immval:8
TEST_STORE(x1,x2,0,x15,x9,0xfffffffe,8,28,c.sw,0)

// imm_val == 16, rs2_val == -1048577
// opcode:c.sw; op1:x10; op2:x11; op2val:0xffefffff; immval:16
TEST_STORE(x1,x2,0,x10,x11,0xffefffff,16,32,c.sw,0)

// imm_val == 32, 
// opcode:c.sw; op1:x10; op2:x11; op2val:0xfffffff7; immval:32
TEST_STORE(x1,x2,0,x10,x11,0xfffffff7,32,36,c.sw,0)

// imm_val == 64, 
// opcode:c.sw; op1:x10; op2:x11; op2val:0xfffffff6; immval:64
TEST_STORE(x1,x2,0,x10,x11,0xfffffff6,64,40,c.sw,0)

// imm_val == 120, rs2_val == -32769
// opcode:c.sw; op1:x10; op2:x11; op2val:0xffff7fff; immval:120
TEST_STORE(x1,x2,0,x10,x11,0xffff7fff,120,44,c.sw,0)

// imm_val == 116, rs2_val == 2048
// opcode:c.sw; op1:x10; op2:x11; op2val:0x00000800; immval:116
TEST_STORE(x1,x2,0,x10,x11,0x00000800,116,48,c.sw,0)

// imm_val == 108, rs2_val == 67108864
// opcode:c.sw; op1:x10; op2:x11; op2val:0x04000000; immval:108
TEST_STORE(x1,x2,0,x10,x11,0x04000000,108,52,c.sw,0)

// imm_val == 92, 
// opcode:c.sw; op1:x10; op2:x11; op2val:0xffffffff; immval:92
TEST_STORE(x1,x2,0,x10,x11,0xffffffff,92,56,c.sw,0)

// imm_val == 60, rs2_val == 4096
// opcode:c.sw; op1:x10; op2:x11; op2val:0x00001000; immval:60
TEST_STORE(x1,x2,0,x10,x11,0x00001000,60,60,c.sw,0)

// imm_val == 84, rs2_val == 16
// opcode:c.sw; op1:x10; op2:x11; op2val:0x00000010; immval:84
TEST_STORE(x1,x2,0,x10,x11,0x00000010,84,64,c.sw,0)

// rs2_val == 2, 
// opcode:c.sw; op1:x10; op2:x11; op2val:0x00000002; immval:36
TEST_STORE(x1,x2,0,x10,x11,0x00000002,36,68,c.sw,0)

// rs2_val == 4, 
// opcode:c.sw; op1:x10; op2:x11; op2val:0x00000004; immval:60
TEST_STORE(x1,x2,0,x10,x11,0x00000004,60,72,c.sw,0)

// rs2_val == 8, 
// opcode:c.sw; op1:x10; op2:x11; op2val:0x00000008; immval:32
TEST_STORE(x1,x2,0,x10,x11,0x00000008,32,76,c.sw,0)

// rs2_val == 32, 
// opcode:c.sw; op1:x10; op2:x11; op2val:0x00000020; immval:116
TEST_STORE(x1,x2,0,x10,x11,0x00000020,116,80,c.sw,0)

// rs2_val == 64, 
// opcode:c.sw; op1:x10; op2:x11; op2val:0x00000040; immval:32
TEST_STORE(x1,x2,0,x10,x11,0x00000040,32,84,c.sw,0)

// rs2_val == 128, 
// opcode:c.sw; op1:x10; op2:x11; op2val:0x00000080; immval:84
TEST_STORE(x1,x2,0,x10,x11,0x00000080,84,88,c.sw,0)

// rs2_val == 256, 
// opcode:c.sw; op1:x10; op2:x11; op2val:0x00000100; immval:28
TEST_STORE(x1,x2,0,x10,x11,0x00000100,28,92,c.sw,0)

// rs2_val == 512, 
// opcode:c.sw; op1:x10; op2:x11; op2val:0x00000200; immval:52
TEST_STORE(x1,x2,0,x10,x11,0x00000200,52,96,c.sw,0)

// rs2_val == 1024, 
// opcode:c.sw; op1:x10; op2:x11; op2val:0x00000400; immval:8
TEST_STORE(x1,x2,0,x10,x11,0x00000400,8,100,c.sw,0)

// rs2_val == 8192, 
// opcode:c.sw; op1:x10; op2:x11; op2val:0x00002000; immval:116
TEST_STORE(x1,x2,0,x10,x11,0x00002000,116,104,c.sw,0)

// rs2_val == 16384, 
// opcode:c.sw; op1:x10; op2:x11; op2val:0x00004000; immval:4
TEST_STORE(x1,x2,0,x10,x11,0x00004000,4,108,c.sw,0)

// rs2_val == 32768, 
// opcode:c.sw; op1:x10; op2:x11; op2val:0x00008000; immval:72
TEST_STORE(x1,x2,0,x10,x11,0x00008000,72,112,c.sw,0)

// rs2_val == 65536, 
// opcode:c.sw; op1:x10; op2:x11; op2val:0x00010000; immval:0
TEST_STORE(x1,x2,0,x10,x11,0x00010000,0,116,c.sw,0)

// rs2_val == 131072, 
// opcode:c.sw; op1:x10; op2:x11; op2val:0x00020000; immval:52
TEST_STORE(x1,x2,0,x10,x11,0x00020000,52,120,c.sw,0)

// rs2_val == 262144, 
// opcode:c.sw; op1:x10; op2:x11; op2val:0x00040000; immval:64
TEST_STORE(x1,x2,0,x10,x11,0x00040000,64,124,c.sw,0)

// rs2_val == 524288, 
// opcode:c.sw; op1:x10; op2:x11; op2val:0x00080000; immval:44
TEST_STORE(x1,x2,0,x10,x11,0x00080000,44,128,c.sw,0)

// rs2_val == 1048576, 
// opcode:c.sw; op1:x10; op2:x11; op2val:0x00100000; immval:92
TEST_STORE(x1,x2,0,x10,x11,0x00100000,92,132,c.sw,0)

// rs2_val == 2097152, 
// opcode:c.sw; op1:x10; op2:x11; op2val:0x00200000; immval:36
TEST_STORE(x1,x2,0,x10,x11,0x00200000,36,136,c.sw,0)

// rs2_val == 4194304, 
// opcode:c.sw; op1:x10; op2:x11; op2val:0x00400000; immval:48
TEST_STORE(x1,x2,0,x10,x11,0x00400000,48,140,c.sw,0)

// rs2_val == 8388608, 
// opcode:c.sw; op1:x10; op2:x11; op2val:0x00800000; immval:32
TEST_STORE(x1,x2,0,x10,x11,0x00800000,32,144,c.sw,0)

// rs2_val == 16777216, 
// opcode:c.sw; op1:x10; op2:x11; op2val:0x01000000; immval:40
TEST_STORE(x1,x2,0,x10,x11,0x01000000,40,148,c.sw,0)

// rs2_val == 33554432, 
// opcode:c.sw; op1:x10; op2:x11; op2val:0x02000000; immval:28
TEST_STORE(x1,x2,0,x10,x11,0x02000000,28,152,c.sw,0)

// rs2_val == 134217728, 
// opcode:c.sw; op1:x10; op2:x11; op2val:0x08000000; immval:36
TEST_STORE(x1,x2,0,x10,x11,0x08000000,36,156,c.sw,0)

// rs2_val == -65537, 
// opcode:c.sw; op1:x10; op2:x11; op2val:0xfffeffff; immval:48
TEST_STORE(x1,x2,0,x10,x11,0xfffeffff,48,160,c.sw,0)

// rs2_val == -262145, 
// opcode:c.sw; op1:x10; op2:x11; op2val:0xfffbffff; immval:24
TEST_STORE(x1,x2,0,x10,x11,0xfffbffff,24,164,c.sw,0)

// rs2_val == -524289, 
// opcode:c.sw; op1:x10; op2:x11; op2val:0xfff7ffff; immval:60
TEST_STORE(x1,x2,0,x10,x11,0xfff7ffff,60,168,c.sw,0)

// rs2_val == -2097153, 
// opcode:c.sw; op1:x10; op2:x11; op2val:0xffdfffff; immval:76
TEST_STORE(x1,x2,0,x10,x11,0xffdfffff,76,172,c.sw,0)

// rs2_val == -4194305, 
// opcode:c.sw; op1:x10; op2:x11; op2val:0xffbfffff; immval:120
TEST_STORE(x1,x2,0,x10,x11,0xffbfffff,120,176,c.sw,0)

// rs2_val == -8388609, 
// opcode:c.sw; op1:x10; op2:x11; op2val:0xff7fffff; immval:120
TEST_STORE(x1,x2,0,x10,x11,0xff7fffff,120,180,c.sw,0)

// rs2_val == -16777217, 
// opcode:c.sw; op1:x10; op2:x11; op2val:0xfeffffff; immval:40
TEST_STORE(x1,x2,0,x10,x11,0xfeffffff,40,184,c.sw,0)

// rs2_val == -33554433, 
// opcode:c.sw; op1:x10; op2:x11; op2val:0xfdffffff; immval:8
TEST_STORE(x1,x2,0,x10,x11,0xfdffffff,8,188,c.sw,0)

// rs2_val == -67108865, 
// opcode:c.sw; op1:x10; op2:x11; op2val:0xfbffffff; immval:20
TEST_STORE(x1,x2,0,x10,x11,0xfbffffff,20,192,c.sw,0)

// rs2_val == -134217729, 
// opcode:c.sw; op1:x10; op2:x11; op2val:0xf7ffffff; immval:32
TEST_STORE(x1,x2,0,x10,x11,0xf7ffffff,32,196,c.sw,0)

// rs2_val == -268435457, 
// opcode:c.sw; op1:x10; op2:x11; op2val:0xefffffff; immval:40
TEST_STORE(x1,x2,0,x10,x11,0xefffffff,40,200,c.sw,0)

// rs2_val == -536870913, 
// opcode:c.sw; op1:x10; op2:x11; op2val:0xdfffffff; immval:20
TEST_STORE(x1,x2,0,x10,x11,0xdfffffff,20,204,c.sw,0)

// rs2_val == -1073741825, 
// opcode:c.sw; op1:x10; op2:x11; op2val:0xbfffffff; immval:40
TEST_STORE(x1,x2,0,x10,x11,0xbfffffff,40,208,c.sw,0)

// rs2_val == 1431655765, 
// opcode:c.sw; op1:x10; op2:x11; op2val:0x55555555; immval:124
TEST_STORE(x1,x2,0,x10,x11,0x55555555,124,212,c.sw,0)

// rs2_val == -1431655766, 
// opcode:c.sw; op1:x10; op2:x11; op2val:0xaaaaaaaa; immval:92
TEST_STORE(x1,x2,0,x10,x11,0xaaaaaaaa,92,216,c.sw,0)

// rs2_val == 268435456, 
// opcode:c.sw; op1:x10; op2:x11; op2val:0x10000000; immval:108
TEST_STORE(x1,x2,0,x10,x11,0x10000000,108,220,c.sw,0)

// rs2_val == 536870912, 
// opcode:c.sw; op1:x10; op2:x11; op2val:0x20000000; immval:4
TEST_STORE(x1,x2,0,x10,x11,0x20000000,4,224,c.sw,0)

// rs2_val == 1073741824, 
// opcode:c.sw; op1:x10; op2:x11; op2val:0x40000000; immval:32
TEST_STORE(x1,x2,0,x10,x11,0x40000000,32,228,c.sw,0)

// rs2_val == -3, 
// opcode:c.sw; op1:x10; op2:x11; op2val:0xfffffffd; immval:16
TEST_STORE(x1,x2,0,x10,x11,0xfffffffd,16,232,c.sw,0)

// rs2_val == -5, 
// opcode:c.sw; op1:x10; op2:x11; op2val:0xfffffffb; immval:56
TEST_STORE(x1,x2,0,x10,x11,0xfffffffb,56,236,c.sw,0)

// rs2_val == -17, 
// opcode:c.sw; op1:x10; op2:x11; op2val:0xffffffef; immval:60
TEST_STORE(x1,x2,0,x10,x11,0xffffffef,60,240,c.sw,0)

// rs2_val == -33, 
// opcode:c.sw; op1:x10; op2:x11; op2val:0xffffffdf; immval:84
TEST_STORE(x1,x2,0,x10,x11,0xffffffdf,84,244,c.sw,0)

// rs2_val == -65, 
// opcode:c.sw; op1:x10; op2:x11; op2val:0xffffffbf; immval:108
TEST_STORE(x1,x2,0,x10,x11,0xffffffbf,108,248,c.sw,0)

// rs2_val == -129, 
// opcode:c.sw; op1:x10; op2:x11; op2val:0xffffff7f; immval:56
TEST_STORE(x1,x2,0,x10,x11,0xffffff7f,56,252,c.sw,0)

// rs2_val == -257, 
// opcode:c.sw; op1:x10; op2:x11; op2val:0xfffffeff; immval:68
TEST_STORE(x1,x2,0,x10,x11,0xfffffeff,68,256,c.sw,0)

// rs2_val == -513, 
// opcode:c.sw; op1:x10; op2:x11; op2val:0xfffffdff; immval:72
TEST_STORE(x1,x2,0,x10,x11,0xfffffdff,72,260,c.sw,0)

// rs2_val == -1025, 
// opcode:c.sw; op1:x10; op2:x11; op2val:0xfffffbff; immval:76
TEST_STORE(x1,x2,0,x10,x11,0xfffffbff,76,264,c.sw,0)

// rs2_val == -2049, 
// opcode:c.sw; op1:x10; op2:x11; op2val:0xfffff7ff; immval:120
TEST_STORE(x1,x2,0,x10,x11,0xfffff7ff,120,268,c.sw,0)

// rs2_val == -4097, 
// opcode:c.sw; op1:x10; op2:x11; op2val:0xffffefff; immval:24
TEST_STORE(x1,x2,0,x10,x11,0xffffefff,24,272,c.sw,0)

// rs2_val == -8193, 
// opcode:c.sw; op1:x10; op2:x11; op2val:0xffffdfff; immval:8
TEST_STORE(x1,x2,0,x10,x11,0xffffdfff,8,276,c.sw,0)

// rs2_val == -16385, 
// opcode:c.sw; op1:x10; op2:x11; op2val:0xffffbfff; immval:32
TEST_STORE(x1,x2,0,x10,x11,0xffffbfff,32,280,c.sw,0)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
.align 4

signature_x1_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x1_1:
    .fill 71*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
