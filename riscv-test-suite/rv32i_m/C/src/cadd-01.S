 
// -----------
// This file was generated by riscv_ctg (https://gitlab.com/incoresemi/riscv-compliance/riscv_ctg)
// version   : 0.1.0
// timestamp : Fri Nov  6 10:29:15 2020 GMT
// usage     : riscv_ctg \
//                  -- cgf /scratch/git-repo/incoresemi/riscv-compliance/riscv_ctg/sample_cgfs/rv32ic.cgf \
//                  -- xlen 32 \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the c.add instruction of the RISC-V C extension for the cadd covergroup.
// 
#include "compliance_model.h"
#include "compliance_test.h"
RVTEST_ISA("RV32IC")

.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*C.*);def TEST_CASE_1=True;",cadd)

RVTEST_SIGBASE( x4,signature_x4_1)

inst_0:
// rs1 == rs2, rs1==x2, rs2==x2, rs2_val > 0, rs1_val == 134217728, rs2_val == 8192
// opcode: c.add; op1:x2; op2:x2; op1val:134217728; op2val:8192
TEST_CR_OP( c.add, x2, x2, 0x00000000, 134217728, 8192, x4, 0, x10)

inst_1:
// rs1 != rs2, rs1==x23, rs2==x7, rs2_val < 0, rs1_val == 512
// opcode: c.add; op1:x23; op2:x7; op1val:512; op2val:-1
TEST_CR_OP( c.add, x23, x7, 0x00000000, 512, -1, x4, 4, x10)

inst_2:
// rs1==x6, rs2==x17, rs1_val == (-2**(xlen-1)), rs1_val == -2147483648, rs2_val == 1
// opcode: c.add; op1:x6; op2:x17; op1val:-2147483648; op2val:1
TEST_CR_OP( c.add, x6, x17, 0x00000000, -2147483648, 1, x4, 8, x10)

inst_3:
// rs1==x18, rs2==x14, rs1_val == 0, rs2_val == 4194304
// opcode: c.add; op1:x18; op2:x14; op1val:0; op2val:4194304
TEST_CR_OP( c.add, x18, x14, 0x00000000, 0, 4194304, x4, 12, x10)

inst_4:
// rs1==x27, rs2==x5, rs1_val == (2**(xlen-1)-1), rs1_val == 2147483647, rs2_val == -17
// opcode: c.add; op1:x27; op2:x5; op1val:2147483647; op2val:-17
TEST_CR_OP( c.add, x27, x5, 0x00000000, 2147483647, -17, x4, 16, x10)

inst_5:
// rs1==x21, rs2==x12, rs1_val == 1, rs2_val == 1048576
// opcode: c.add; op1:x21; op2:x12; op1val:1; op2val:1048576
TEST_CR_OP( c.add, x21, x12, 0x00000000, 1, 1048576, x4, 20, x10)

inst_6:
// rs1==x1, rs2==x24, rs2_val == (-2**(xlen-1)), rs2_val == -2147483648
// opcode: c.add; op1:x1; op2:x24; op1val:-10; op2val:-2147483648
TEST_CR_OP( c.add, x1, x24, 0x00000000, -10, -2147483648, x4, 24, x10)

inst_7:
// rs1==x24, rs2==x6, rs2_val == 0, rs1_val == 1073741824
// opcode: c.add; op1:x24; op2:x6; op1val:1073741824; op2val:0
TEST_CR_OP( c.add, x24, x6, 0x00000000, 1073741824, 0, x4, 28, x10)

inst_8:
// rs1==x30, rs2==x19, rs2_val == (2**(xlen-1)-1), rs2_val == 2147483647
// opcode: c.add; op1:x30; op2:x19; op1val:134217728; op2val:2147483647
TEST_CR_OP( c.add, x30, x19, 0x00000000, 134217728, 2147483647, x4, 32, x10)

inst_9:
// rs1==x22, rs2==x21, rs1_val == 2, 
// opcode: c.add; op1:x22; op2:x21; op1val:2; op2val:1073741823
TEST_CR_OP( c.add, x22, x21, 0x00000000, 2, 1073741823, x4, 36, x10)

inst_10:
// rs1==x0, rs2==x8, rs1_val == 4, 
// opcode: c.add; op1:x0; op2:x8; op1val:4; op2val:-17
TEST_CR_OP( c.add, x0, x8, 0x00000000, 4, -17, x4, 40, x10)

inst_11:
// rs1==x25, rs2==x9, rs1_val == 8, rs2_val == -65537
// opcode: c.add; op1:x25; op2:x9; op1val:8; op2val:-65537
TEST_CR_OP( c.add, x25, x9, 0x00000000, 8, -65537, x4, 44, x10)

inst_12:
// rs1==x31, rs2==x29, rs1_val == 16, rs2_val == 4
// opcode: c.add; op1:x31; op2:x29; op1val:16; op2val:4
TEST_CR_OP( c.add, x31, x29, 0x00000000, 16, 4, x4, 48, x10)

inst_13:
// rs1==x16, rs2==x11, rs1_val == 32, rs2_val == -524289
// opcode: c.add; op1:x16; op2:x11; op1val:32; op2val:-524289
TEST_CR_OP( c.add, x16, x11, 0x00000000, 32, -524289, x4, 52, x10)

inst_14:
// rs1==x15, rs2==x22, rs1_val == 64, rs2_val == 16384
// opcode: c.add; op1:x15; op2:x22; op1val:64; op2val:16384
TEST_CR_OP( c.add, x15, x22, 0x00000000, 64, 16384, x4, 56, x10)

inst_15:
// rs1==x8, rs2==x27, rs1_val == 128, rs2_val == -8193
// opcode: c.add; op1:x8; op2:x27; op1val:128; op2val:-8193
TEST_CR_OP( c.add, x8, x27, 0x00000000, 128, -8193, x4, 60, x10)

inst_16:
// rs1==x20, rs2==x3, rs1_val == 256, 
// opcode: c.add; op1:x20; op2:x3; op1val:256; op2val:-4
TEST_CR_OP( c.add, x20, x3, 0x00000000, 256, -4, x4, 64, x10)

inst_17:
// rs1==x28, rs2==x30, rs1_val == 1024, 
// opcode: c.add; op1:x28; op2:x30; op1val:1024; op2val:16384
TEST_CR_OP( c.add, x28, x30, 0x00000000, 1024, 16384, x4, 68, x10)

inst_18:
// rs1==x5, rs2==x13, rs1_val == 2048, 
// opcode: c.add; op1:x5; op2:x13; op1val:2048; op2val:-65537
TEST_CR_OP( c.add, x5, x13, 0x00000000, 2048, -65537, x4, 72, x6)
RVTEST_SIGBASE( x2,signature_x2_0)

inst_19:
// rs1==x19, rs2==x18, rs1_val == 4096, 
// opcode: c.add; op1:x19; op2:x18; op1val:4096; op2val:16384
TEST_CR_OP( c.add, x19, x18, 0x00000000, 4096, 16384, x2, 0, x6)

inst_20:
// rs1==x10, rs2==x16, rs1_val == 8192, rs2_val == 256
// opcode: c.add; op1:x10; op2:x16; op1val:8192; op2val:256
TEST_CR_OP( c.add, x10, x16, 0x00000000, 8192, 256, x2, 4, x6)

inst_21:
// rs1==x3, rs2==x10, rs1_val == 16384, 
// opcode: c.add; op1:x3; op2:x10; op1val:16384; op2val:-10
TEST_CR_OP( c.add, x3, x10, 0x00000000, 16384, -10, x2, 8, x6)

inst_22:
// rs1==x7, rs2==x25, rs1_val == 32768, rs2_val == -4194305
// opcode: c.add; op1:x7; op2:x25; op1val:32768; op2val:-4194305
TEST_CR_OP( c.add, x7, x25, 0x00000000, 32768, -4194305, x2, 12, x6)

inst_23:
// rs1==x26, rs2==x4, rs1_val == 65536, rs2_val == -16385
// opcode: c.add; op1:x26; op2:x4; op1val:65536; op2val:-16385
TEST_CR_OP( c.add, x26, x4, 0x00000000, 65536, -16385, x2, 16, x6)

inst_24:
// rs1==x12, rs2==x1, rs1_val == 131072, rs2_val == 536870912
// opcode: c.add; op1:x12; op2:x1; op1val:131072; op2val:536870912
TEST_CR_OP( c.add, x12, x1, 0x00000000, 131072, 536870912, x2, 20, x6)

inst_25:
// rs1==x9, rs2==x31, rs1_val == 262144, 
// opcode: c.add; op1:x9; op2:x31; op1val:262144; op2val:-6
TEST_CR_OP( c.add, x9, x31, 0x00000000, 262144, -6, x2, 24, x6)

inst_26:
// rs1==x29, rs2==x23, rs1_val == 524288, rs2_val == 16
// opcode: c.add; op1:x29; op2:x23; op1val:524288; op2val:16
TEST_CR_OP( c.add, x29, x23, 0x00000000, 524288, 16, x2, 28, x6)

inst_27:
// rs1==x13, rs2==x28, rs1_val == 1048576, rs2_val == -9
// opcode: c.add; op1:x13; op2:x28; op1val:1048576; op2val:-9
TEST_CR_OP( c.add, x13, x28, 0x00000000, 1048576, -9, x2, 32, x6)

inst_28:
// rs1==x4, rs2==x26, rs1_val == 2097152, 
// opcode: c.add; op1:x4; op2:x26; op1val:2097152; op2val:4194304
TEST_CR_OP( c.add, x4, x26, 0x00000000, 2097152, 4194304, x2, 36, x6)

inst_29:
// rs1==x11, rs2==x20, rs1_val == 4194304, rs2_val == 128
// opcode: c.add; op1:x11; op2:x20; op1val:4194304; op2val:128
TEST_CR_OP( c.add, x11, x20, 0x00000000, 4194304, 128, x2, 40, x6)

inst_30:
// rs1==x17, rs2==x15, rs1_val == 8388608, 
// opcode: c.add; op1:x17; op2:x15; op1val:8388608; op2val:-1
TEST_CR_OP( c.add, x17, x15, 0x00000000, 8388608, -1, x2, 44, x6)

inst_31:
// rs1==x14, rs1_val == 16777216, 
// opcode: c.add; op1:x14; op2:x9; op1val:16777216; op2val:1073741823
TEST_CR_OP( c.add, x14, x9, 0x00000000, 16777216, 1073741823, x2, 48, x6)

inst_32:
// rs1_val == 33554432, rs2_val == 512
// opcode: c.add; op1:x10; op2:x11; op1val:33554432; op2val:512
TEST_CR_OP( c.add, x10, x11, 0x00000000, 33554432, 512, x2, 52, x6)

inst_33:
// rs1_val == 67108864, 
// opcode: c.add; op1:x10; op2:x11; op1val:67108864; op2val:0
TEST_CR_OP( c.add, x10, x11, 0x00000000, 67108864, 0, x2, 56, x6)

inst_34:
// rs1_val == 268435456, 
// opcode: c.add; op1:x10; op2:x11; op1val:268435456; op2val:1073741823
TEST_CR_OP( c.add, x10, x11, 0x00000000, 268435456, 1073741823, x2, 60, x6)

inst_35:
// rs1_val == 536870912, rs2_val == 134217728
// opcode: c.add; op1:x10; op2:x11; op1val:536870912; op2val:134217728
TEST_CR_OP( c.add, x10, x11, 0x00000000, 536870912, 134217728, x2, 64, x6)

inst_36:
// rs1_val == -2, 
// opcode: c.add; op1:x10; op2:x11; op1val:-2; op2val:-8193
TEST_CR_OP( c.add, x10, x11, 0x00000000, -2, -8193, x2, 68, x6)

inst_37:
// rs1_val == -3, 
// opcode: c.add; op1:x10; op2:x11; op1val:-3; op2val:-10
TEST_CR_OP( c.add, x10, x11, 0x00000000, -3, -10, x2, 72, x6)

inst_38:
// rs1_val == -5, rs2_val == -5
// opcode: c.add; op1:x10; op2:x11; op1val:-5; op2val:-5
TEST_CR_OP( c.add, x10, x11, 0x00000000, -5, -5, x2, 76, x6)

inst_39:
// rs1_val == -9, 
// opcode: c.add; op1:x10; op2:x11; op1val:-9; op2val:-4194305
TEST_CR_OP( c.add, x10, x11, 0x00000000, -9, -4194305, x2, 80, x6)

inst_40:
// rs1_val == -17, rs2_val == -16777217
// opcode: c.add; op1:x10; op2:x11; op1val:-17; op2val:-16777217
TEST_CR_OP( c.add, x10, x11, 0x00000000, -17, -16777217, x2, 84, x6)

inst_41:
// rs1_val == -33, rs2_val == 8
// opcode: c.add; op1:x10; op2:x11; op1val:-33; op2val:8
TEST_CR_OP( c.add, x10, x11, 0x00000000, -33, 8, x2, 88, x6)

inst_42:
// rs1_val == -65, 
// opcode: c.add; op1:x10; op2:x11; op1val:-65; op2val:-8
TEST_CR_OP( c.add, x10, x11, 0x00000000, -65, -8, x2, 92, x6)

inst_43:
// rs1_val == -129, 
// opcode: c.add; op1:x10; op2:x11; op1val:-129; op2val:3
TEST_CR_OP( c.add, x10, x11, 0x00000000, -129, 3, x2, 96, x6)

inst_44:
// rs1_val == -257, rs2_val == -1431655766
// opcode: c.add; op1:x10; op2:x11; op1val:-257; op2val:-1431655766
TEST_CR_OP( c.add, x10, x11, 0x00000000, -257, -1431655766, x2, 100, x6)

inst_45:
// rs1_val == -513, rs2_val == 524288
// opcode: c.add; op1:x10; op2:x11; op1val:-513; op2val:524288
TEST_CR_OP( c.add, x10, x11, 0x00000000, -513, 524288, x2, 104, x6)

inst_46:
// rs1_val == -1025, 
// opcode: c.add; op1:x10; op2:x11; op1val:-1025; op2val:134217728
TEST_CR_OP( c.add, x10, x11, 0x00000000, -1025, 134217728, x2, 108, x6)

inst_47:
// rs2_val == -8388609, 
// opcode: c.add; op1:x10; op2:x11; op1val:134217728; op2val:-8388609
TEST_CR_OP( c.add, x10, x11, 0x00000000, 134217728, -8388609, x2, 112, x6)

inst_48:
// rs2_val == -33554433, 
// opcode: c.add; op1:x10; op2:x11; op1val:-65; op2val:-33554433
TEST_CR_OP( c.add, x10, x11, 0x00000000, -65, -33554433, x2, 116, x6)

inst_49:
// rs2_val == -67108865, 
// opcode: c.add; op1:x10; op2:x11; op1val:536870912; op2val:-67108865
TEST_CR_OP( c.add, x10, x11, 0x00000000, 536870912, -67108865, x2, 120, x6)

inst_50:
// rs2_val == -134217729, 
// opcode: c.add; op1:x10; op2:x11; op1val:8; op2val:-134217729
TEST_CR_OP( c.add, x10, x11, 0x00000000, 8, -134217729, x2, 124, x6)

inst_51:
// rs2_val == -268435457, rs1_val == -1048577
// opcode: c.add; op1:x10; op2:x11; op1val:-1048577; op2val:-268435457
TEST_CR_OP( c.add, x10, x11, 0x00000000, -1048577, -268435457, x2, 128, x6)

inst_52:
// rs2_val == -536870913, 
// opcode: c.add; op1:x10; op2:x11; op1val:1024; op2val:-536870913
TEST_CR_OP( c.add, x10, x11, 0x00000000, 1024, -536870913, x2, 132, x6)

inst_53:
// rs2_val == -1073741825, 
// opcode: c.add; op1:x10; op2:x11; op1val:5; op2val:-1073741825
TEST_CR_OP( c.add, x10, x11, 0x00000000, 5, -1073741825, x2, 136, x6)

inst_54:
// rs2_val == 1431655765, 
// opcode: c.add; op1:x10; op2:x11; op1val:-7; op2val:1431655765
TEST_CR_OP( c.add, x10, x11, 0x00000000, -7, 1431655765, x2, 140, x6)

inst_55:
// rs1_val == -2049, 
// opcode: c.add; op1:x10; op2:x11; op1val:-2049; op2val:-10
TEST_CR_OP( c.add, x10, x11, 0x00000000, -2049, -10, x2, 144, x6)

inst_56:
// rs1_val == -4097, 
// opcode: c.add; op1:x10; op2:x11; op1val:-4097; op2val:-67108865
TEST_CR_OP( c.add, x10, x11, 0x00000000, -4097, -67108865, x2, 148, x6)

inst_57:
// rs1_val == -8193, rs2_val == 2
// opcode: c.add; op1:x10; op2:x11; op1val:-8193; op2val:2
TEST_CR_OP( c.add, x10, x11, 0x00000000, -8193, 2, x2, 152, x6)

inst_58:
// rs1_val == -16385, rs2_val == 16777216
// opcode: c.add; op1:x10; op2:x11; op1val:-16385; op2val:16777216
TEST_CR_OP( c.add, x10, x11, 0x00000000, -16385, 16777216, x2, 156, x6)

inst_59:
// rs1_val == -32769, 
// opcode: c.add; op1:x10; op2:x11; op1val:-32769; op2val:5
TEST_CR_OP( c.add, x10, x11, 0x00000000, -32769, 5, x2, 160, x6)

inst_60:
// rs1_val == -65537, 
// opcode: c.add; op1:x10; op2:x11; op1val:-65537; op2val:-9
TEST_CR_OP( c.add, x10, x11, 0x00000000, -65537, -9, x2, 164, x6)

inst_61:
// rs1_val == -131073, 
// opcode: c.add; op1:x10; op2:x11; op1val:-131073; op2val:-6
TEST_CR_OP( c.add, x10, x11, 0x00000000, -131073, -6, x2, 168, x6)

inst_62:
// rs1_val == -262145, rs2_val == 1024
// opcode: c.add; op1:x10; op2:x11; op1val:-262145; op2val:1024
TEST_CR_OP( c.add, x10, x11, 0x00000000, -262145, 1024, x2, 172, x6)

inst_63:
// rs1_val == -524289, 
// opcode: c.add; op1:x10; op2:x11; op1val:-524289; op2val:524288
TEST_CR_OP( c.add, x10, x11, 0x00000000, -524289, 524288, x2, 176, x6)

inst_64:
// rs1_val == -2097153, 
// opcode: c.add; op1:x10; op2:x11; op1val:-2097153; op2val:7
TEST_CR_OP( c.add, x10, x11, 0x00000000, -2097153, 7, x2, 180, x6)

inst_65:
// rs1_val == -4194305, rs2_val == -3
// opcode: c.add; op1:x10; op2:x11; op1val:-4194305; op2val:-3
TEST_CR_OP( c.add, x10, x11, 0x00000000, -4194305, -3, x2, 184, x6)

inst_66:
// rs1_val == -8388609, 
// opcode: c.add; op1:x10; op2:x11; op1val:-8388609; op2val:9
TEST_CR_OP( c.add, x10, x11, 0x00000000, -8388609, 9, x2, 188, x6)

inst_67:
// rs1_val == -16777217, 
// opcode: c.add; op1:x10; op2:x11; op1val:-16777217; op2val:128
TEST_CR_OP( c.add, x10, x11, 0x00000000, -16777217, 128, x2, 192, x6)

inst_68:
// rs1_val == -33554433, 
// opcode: c.add; op1:x10; op2:x11; op1val:-33554433; op2val:-67108865
TEST_CR_OP( c.add, x10, x11, 0x00000000, -33554433, -67108865, x2, 196, x6)

inst_69:
// rs1_val == -67108865, 
// opcode: c.add; op1:x10; op2:x11; op1val:-67108865; op2val:1048576
TEST_CR_OP( c.add, x10, x11, 0x00000000, -67108865, 1048576, x2, 200, x6)

inst_70:
// rs1_val == -134217729, 
// opcode: c.add; op1:x10; op2:x11; op1val:-134217729; op2val:16777216
TEST_CR_OP( c.add, x10, x11, 0x00000000, -134217729, 16777216, x2, 204, x6)

inst_71:
// rs1_val == -268435457, 
// opcode: c.add; op1:x10; op2:x11; op1val:-268435457; op2val:-1431655766
TEST_CR_OP( c.add, x10, x11, 0x00000000, -268435457, -1431655766, x2, 208, x6)

inst_72:
// rs1_val == -536870913, 
// opcode: c.add; op1:x10; op2:x11; op1val:-536870913; op2val:-3
TEST_CR_OP( c.add, x10, x11, 0x00000000, -536870913, -3, x2, 212, x6)

inst_73:
// rs1_val == -1073741825, rs2_val == -4097
// opcode: c.add; op1:x10; op2:x11; op1val:-1073741825; op2val:-4097
TEST_CR_OP( c.add, x10, x11, 0x00000000, -1073741825, -4097, x2, 216, x6)

inst_74:
// rs1_val == 1431655765, 
// opcode: c.add; op1:x10; op2:x11; op1val:1431655765; op2val:-3
TEST_CR_OP( c.add, x10, x11, 0x00000000, 1431655765, -3, x2, 220, x6)

inst_75:
// rs1_val == -1431655766, rs2_val == 4096
// opcode: c.add; op1:x10; op2:x11; op1val:-1431655766; op2val:4096
TEST_CR_OP( c.add, x10, x11, 0x00000000, -1431655766, 4096, x2, 224, x6)

inst_76:
// rs2_val == 32, 
// opcode: c.add; op1:x10; op2:x11; op1val:-9; op2val:32
TEST_CR_OP( c.add, x10, x11, 0x00000000, -9, 32, x2, 228, x6)

inst_77:
// rs2_val == 64, 
// opcode: c.add; op1:x10; op2:x11; op1val:-3; op2val:64
TEST_CR_OP( c.add, x10, x11, 0x00000000, -3, 64, x2, 232, x6)

inst_78:
// rs2_val == 2048, 
// opcode: c.add; op1:x10; op2:x11; op1val:-262145; op2val:2048
TEST_CR_OP( c.add, x10, x11, 0x00000000, -262145, 2048, x2, 236, x6)

inst_79:
// rs2_val == 32768, 
// opcode: c.add; op1:x10; op2:x11; op1val:524288; op2val:32768
TEST_CR_OP( c.add, x10, x11, 0x00000000, 524288, 32768, x2, 240, x6)

inst_80:
// rs2_val == 65536, 
// opcode: c.add; op1:x10; op2:x11; op1val:134217728; op2val:65536
TEST_CR_OP( c.add, x10, x11, 0x00000000, 134217728, 65536, x2, 244, x6)

inst_81:
// rs2_val == 131072, 
// opcode: c.add; op1:x10; op2:x11; op1val:524288; op2val:131072
TEST_CR_OP( c.add, x10, x11, 0x00000000, 524288, 131072, x2, 248, x6)

inst_82:
// rs2_val == 262144, 
// opcode: c.add; op1:x10; op2:x11; op1val:1; op2val:262144
TEST_CR_OP( c.add, x10, x11, 0x00000000, 1, 262144, x2, 252, x6)

inst_83:
// rs2_val == 2097152, 
// opcode: c.add; op1:x10; op2:x11; op1val:-8; op2val:2097152
TEST_CR_OP( c.add, x10, x11, 0x00000000, -8, 2097152, x2, 256, x6)

inst_84:
// rs2_val == 8388608, 
// opcode: c.add; op1:x10; op2:x11; op1val:32768; op2val:8388608
TEST_CR_OP( c.add, x10, x11, 0x00000000, 32768, 8388608, x2, 260, x6)

inst_85:
// rs2_val == 33554432, 
// opcode: c.add; op1:x10; op2:x11; op1val:2048; op2val:33554432
TEST_CR_OP( c.add, x10, x11, 0x00000000, 2048, 33554432, x2, 264, x6)

inst_86:
// rs2_val == 67108864, 
// opcode: c.add; op1:x10; op2:x11; op1val:64; op2val:67108864
TEST_CR_OP( c.add, x10, x11, 0x00000000, 64, 67108864, x2, 268, x6)

inst_87:
// rs2_val == 268435456, 
// opcode: c.add; op1:x10; op2:x11; op1val:-257; op2val:268435456
TEST_CR_OP( c.add, x10, x11, 0x00000000, -257, 268435456, x2, 272, x6)

inst_88:
// rs2_val == 1073741824, 
// opcode: c.add; op1:x10; op2:x11; op1val:-4097; op2val:1073741824
TEST_CR_OP( c.add, x10, x11, 0x00000000, -4097, 1073741824, x2, 276, x6)

inst_89:
// rs2_val == -2, 
// opcode: c.add; op1:x10; op2:x11; op1val:-129; op2val:-2
TEST_CR_OP( c.add, x10, x11, 0x00000000, -129, -2, x2, 280, x6)

inst_90:
// rs2_val == -33, 
// opcode: c.add; op1:x10; op2:x11; op1val:2048; op2val:-33
TEST_CR_OP( c.add, x10, x11, 0x00000000, 2048, -33, x2, 284, x6)

inst_91:
// rs2_val == -65, 
// opcode: c.add; op1:x10; op2:x11; op1val:4194304; op2val:-65
TEST_CR_OP( c.add, x10, x11, 0x00000000, 4194304, -65, x2, 288, x6)

inst_92:
// rs2_val == -129, 
// opcode: c.add; op1:x10; op2:x11; op1val:32; op2val:-129
TEST_CR_OP( c.add, x10, x11, 0x00000000, 32, -129, x2, 292, x6)

inst_93:
// rs2_val == -257, 
// opcode: c.add; op1:x10; op2:x11; op1val:4; op2val:-257
TEST_CR_OP( c.add, x10, x11, 0x00000000, 4, -257, x2, 296, x6)

inst_94:
// rs2_val == -513, 
// opcode: c.add; op1:x10; op2:x11; op1val:-2097153; op2val:-513
TEST_CR_OP( c.add, x10, x11, 0x00000000, -2097153, -513, x2, 300, x6)

inst_95:
// rs2_val == -1025, 
// opcode: c.add; op1:x10; op2:x11; op1val:2097152; op2val:-1025
TEST_CR_OP( c.add, x10, x11, 0x00000000, 2097152, -1025, x2, 304, x6)

inst_96:
// rs2_val == -2049, 
// opcode: c.add; op1:x10; op2:x11; op1val:1048576; op2val:-2049
TEST_CR_OP( c.add, x10, x11, 0x00000000, 1048576, -2049, x2, 308, x6)

inst_97:
// rs2_val == -32769, 
// opcode: c.add; op1:x10; op2:x11; op1val:-257; op2val:-32769
TEST_CR_OP( c.add, x10, x11, 0x00000000, -257, -32769, x2, 312, x6)

inst_98:
// rs2_val == -131073, 
// opcode: c.add; op1:x10; op2:x11; op1val:33554432; op2val:-131073
TEST_CR_OP( c.add, x10, x11, 0x00000000, 33554432, -131073, x2, 316, x6)

inst_99:
// rs2_val == -262145, 
// opcode: c.add; op1:x10; op2:x11; op1val:2147483647; op2val:-262145
TEST_CR_OP( c.add, x10, x11, 0x00000000, 2147483647, -262145, x2, 320, x6)

inst_100:
// rs2_val == -1048577, 
// opcode: c.add; op1:x10; op2:x11; op1val:1048576; op2val:-1048577
TEST_CR_OP( c.add, x10, x11, 0x00000000, 1048576, -1048577, x2, 324, x6)

inst_101:
// rs2_val == -2097153, 
// opcode: c.add; op1:x10; op2:x11; op1val:268435456; op2val:-2097153
TEST_CR_OP( c.add, x10, x11, 0x00000000, 268435456, -2097153, x2, 328, x6)

inst_102:
// rs2_val > 0, rs1_val == 134217728, rs2_val == 8192
// opcode: c.add; op1:x10; op2:x11; op1val:134217728; op2val:8192
TEST_CR_OP( c.add, x10, x11, 0x00000000, 134217728, 8192, x2, 332, x6)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x4_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x4_1:
    .fill 19*(XLEN/32),4,0xdeadbeef


signature_x2_0:
    .fill 84*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
