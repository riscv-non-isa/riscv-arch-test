 
// -----------
// This file was generated by riscv_ctg (https://gitlab.com/incoresemi/riscv-compliance/riscv_ctg)
// version   : 0.1.0
// timestamp : Thu Nov  5 12:29:38 2020 GMT
// usage     : riscv_ctg \
//                  -- cgf /scratch/git-repo/incoresemi/riscv-compliance/riscv_ctg/sample_cgfs/rv32ic.cgf \
//                  -- xlen 32 \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the c.add instruction of the RISC-V C extension for the cadd covergroup.
// 
#include "compliance_model.h"
#include "compliance_test.h"
RVTEST_ISA("RV32IC")

RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*C.*);def TEST_CASE_1=True;",cadd)

RVTEST_SIGBASE( x1,signature_x1_1)

// rs1 == rs2, rs1==x16, rs2==x16, rs2_val > 0, rs1_val == 262144, rs2_val == 1024
// opcode: c.add; op1:x16; op2:x16; op1val:0x00040000; op2val:0x00000400
TEST_CR_OP( c.add, x16, x16, 0x00000000, 0x00040000, 0x00000400, x1, 0, x6)

// rs1 != rs2, rs1==x0, rs2==x7, rs2_val < 0, rs2_val == -65537
// opcode: c.add; op1:x0; op2:x7; op1val:0x00000007; op2val:0xfffeffff
TEST_CR_OP( c.add, x0, x7, 0x00000000, 0x00000007, 0xfffeffff, x1, 4, x6)

// rs1==x15, rs2==x9, rs1_val == (-2**(xlen-1)), rs1_val == -2147483648, rs2_val == -129
// opcode: c.add; op1:x15; op2:x9; op1val:0x80000000; op2val:0xffffff7f
TEST_CR_OP( c.add, x15, x9, 0x00000000, 0x80000000, 0xffffff7f, x1, 8, x6)

// rs1==x13, rs2==x29, rs1_val == 0, rs2_val == 2
// opcode: c.add; op1:x13; op2:x29; op1val:0x00000000; op2val:0x00000002
TEST_CR_OP( c.add, x13, x29, 0x00000000, 0x00000000, 0x00000002, x1, 12, x6)

// rs1==x4, rs2==x2, rs1_val == (2**(xlen-1)-1), rs1_val == 2147483647, rs2_val == 1
// opcode: c.add; op1:x4; op2:x2; op1val:0x7fffffff; op2val:0x00000001
TEST_CR_OP( c.add, x4, x2, 0x00000000, 0x7fffffff, 0x00000001, x1, 16, x6)

// rs1==x10, rs2==x12, rs1_val == 1, rs2_val == -32769
// opcode: c.add; op1:x10; op2:x12; op1val:0x00000001; op2val:0xffff7fff
TEST_CR_OP( c.add, x10, x12, 0x00000000, 0x00000001, 0xffff7fff, x1, 20, x6)

// rs1==x17, rs2==x5, rs2_val == (-2**(xlen-1)), rs2_val == -2147483648
// opcode: c.add; op1:x17; op2:x5; op1val:0x80000000; op2val:0x80000000
TEST_CR_OP( c.add, x17, x5, 0x00000000, 0x80000000, 0x80000000, x1, 24, x6)

// rs1==x29, rs2==x21, rs2_val == 0, rs1_val == 65536
// opcode: c.add; op1:x29; op2:x21; op1val:0x00010000; op2val:0x00000000
TEST_CR_OP( c.add, x29, x21, 0x00000000, 0x00010000, 0x00000000, x1, 28, x6)

// rs1==x20, rs2==x30, rs2_val == (2**(xlen-1)-1), rs2_val == 2147483647, rs1_val == -1048577
// opcode: c.add; op1:x20; op2:x30; op1val:0xffefffff; op2val:0x7fffffff
TEST_CR_OP( c.add, x20, x30, 0x00000000, 0xffefffff, 0x7fffffff, x1, 32, x6)

// rs1==x3, rs2==x17, rs1_val == 2, rs2_val == 32768
// opcode: c.add; op1:x3; op2:x17; op1val:0x00000002; op2val:0x00008000
TEST_CR_OP( c.add, x3, x17, 0x00000000, 0x00000002, 0x00008000, x1, 36, x6)

// rs1==x14, rs2==x31, rs1_val == 4, rs2_val == -2049
// opcode: c.add; op1:x14; op2:x31; op1val:0x00000004; op2val:0xfffff7ff
TEST_CR_OP( c.add, x14, x31, 0x00000000, 0x00000004, 0xfffff7ff, x1, 40, x6)

// rs1==x5, rs2==x22, rs1_val == 8, rs2_val == -257
// opcode: c.add; op1:x5; op2:x22; op1val:0x00000008; op2val:0xfffffeff
TEST_CR_OP( c.add, x5, x22, 0x00000000, 0x00000008, 0xfffffeff, x1, 44, x6)

// rs1==x11, rs2==x3, rs1_val == 16, rs2_val == -1048577
// opcode: c.add; op1:x11; op2:x3; op1val:0x00000010; op2val:0xffefffff
TEST_CR_OP( c.add, x11, x3, 0x00000000, 0x00000010, 0xffefffff, x1, 48, x6)

// rs1==x7, rs2==x18, rs1_val == 32, 
// opcode: c.add; op1:x7; op2:x18; op1val:0x00000020; op2val:0x7fffffff
TEST_CR_OP( c.add, x7, x18, 0x00000000, 0x00000020, 0x7fffffff, x1, 52, x6)

// rs1==x27, rs2==x23, rs1_val == 64, rs2_val == -1025
// opcode: c.add; op1:x27; op2:x23; op1val:0x00000040; op2val:0xfffffbff
TEST_CR_OP( c.add, x27, x23, 0x00000000, 0x00000040, 0xfffffbff, x1, 56, x6)

// rs1==x9, rs2==x8, rs1_val == 128, rs2_val == 8192
// opcode: c.add; op1:x9; op2:x8; op1val:0x00000080; op2val:0x00002000
TEST_CR_OP( c.add, x9, x8, 0x00000000, 0x00000080, 0x00002000, x1, 60, x6)

// rs1==x26, rs2==x13, rs1_val == 256, rs2_val == 2097152
// opcode: c.add; op1:x26; op2:x13; op1val:0x00000100; op2val:0x00200000
TEST_CR_OP( c.add, x26, x13, 0x00000000, 0x00000100, 0x00200000, x1, 64, x6)

// rs1==x8, rs2==x15, rs1_val == 512, 
// opcode: c.add; op1:x8; op2:x15; op1val:0x00000200; op2val:0x00000400
TEST_CR_OP( c.add, x8, x15, 0x00000000, 0x00000200, 0x00000400, x1, 68, x6)

// rs1==x30, rs2==x28, rs1_val == 1024, 
// opcode: c.add; op1:x30; op2:x28; op1val:0x00000400; op2val:0x00000003
TEST_CR_OP( c.add, x30, x28, 0x00000000, 0x00000400, 0x00000003, x1, 72, x6)

// rs1==x25, rs2==x4, rs1_val == 2048, rs2_val == 128
// opcode: c.add; op1:x25; op2:x4; op1val:0x00000800; op2val:0x00000080
TEST_CR_OP( c.add, x25, x4, 0x00000000, 0x00000800, 0x00000080, x1, 76, x6)

// rs1==x19, rs2==x10, rs1_val == 4096, rs2_val == -5
// opcode: c.add; op1:x19; op2:x10; op1val:0x00001000; op2val:0xfffffffb
TEST_CR_OP( c.add, x19, x10, 0x00000000, 0x00001000, 0xfffffffb, x1, 80, x4)
RVTEST_SIGBASE( x3,signature_x3_0)

// rs1==x31, rs2==x27, rs1_val == 8192, rs2_val == -1073741825
// opcode: c.add; op1:x31; op2:x27; op1val:0x00002000; op2val:0xbfffffff
TEST_CR_OP( c.add, x31, x27, 0x00000000, 0x00002000, 0xbfffffff, x3, 0, x4)

// rs1==x28, rs2==x20, rs1_val == 16384, rs2_val == 512
// opcode: c.add; op1:x28; op2:x20; op1val:0x00004000; op2val:0x00000200
TEST_CR_OP( c.add, x28, x20, 0x00000000, 0x00004000, 0x00000200, x3, 4, x4)

// rs1==x22, rs2==x26, rs1_val == 32768, rs2_val == 16384
// opcode: c.add; op1:x22; op2:x26; op1val:0x00008000; op2val:0x00004000
TEST_CR_OP( c.add, x22, x26, 0x00000000, 0x00008000, 0x00004000, x3, 8, x4)

// rs1==x21, rs2==x1, rs1_val == 131072, 
// opcode: c.add; op1:x21; op2:x1; op1val:0x00020000; op2val:0x00000005
TEST_CR_OP( c.add, x21, x1, 0x00000000, 0x00020000, 0x00000005, x3, 12, x4)

// rs1==x6, rs2==x25, rs1_val == 524288, rs2_val == -17
// opcode: c.add; op1:x6; op2:x25; op1val:0x00080000; op2val:0xffffffef
TEST_CR_OP( c.add, x6, x25, 0x00000000, 0x00080000, 0xffffffef, x3, 16, x4)

// rs1==x2, rs2==x24, rs1_val == 1048576, 
// opcode: c.add; op1:x2; op2:x24; op1val:0x00100000; op2val:0x00000400
TEST_CR_OP( c.add, x2, x24, 0x00000000, 0x00100000, 0x00000400, x3, 20, x4)

// rs1==x18, rs2==x6, rs1_val == 2097152, rs2_val == 256
// opcode: c.add; op1:x18; op2:x6; op1val:0x00200000; op2val:0x00000100
TEST_CR_OP( c.add, x18, x6, 0x00000000, 0x00200000, 0x00000100, x3, 24, x4)

// rs1==x1, rs2==x19, rs1_val == 4194304, rs2_val == 524288
// opcode: c.add; op1:x1; op2:x19; op1val:0x00400000; op2val:0x00080000
TEST_CR_OP( c.add, x1, x19, 0x00000000, 0x00400000, 0x00080000, x3, 28, x4)

// rs1==x23, rs2==x11, rs1_val == 8388608, 
// opcode: c.add; op1:x23; op2:x11; op1val:0x00800000; op2val:0xffffffff
TEST_CR_OP( c.add, x23, x11, 0x00000000, 0x00800000, 0xffffffff, x3, 32, x4)

// rs1==x12, rs2==x14, rs1_val == 16777216, 
// opcode: c.add; op1:x12; op2:x14; op1val:0x01000000; op2val:0x00000080
TEST_CR_OP( c.add, x12, x14, 0x00000000, 0x01000000, 0x00000080, x3, 36, x4)

// rs1==x24, rs1_val == 33554432, rs2_val == 16777216
// opcode: c.add; op1:x24; op2:x10; op1val:0x02000000; op2val:0x01000000
TEST_CR_OP( c.add, x24, x10, 0x00000000, 0x02000000, 0x01000000, x3, 40, x4)

// rs1_val == 67108864, rs2_val == 33554432
// opcode: c.add; op1:x10; op2:x11; op1val:0x04000000; op2val:0x02000000
TEST_CR_OP( c.add, x10, x11, 0x00000000, 0x04000000, 0x02000000, x3, 44, x4)

// rs1_val == 134217728, rs2_val == 67108864
// opcode: c.add; op1:x10; op2:x11; op1val:0x08000000; op2val:0x04000000
TEST_CR_OP( c.add, x10, x11, 0x00000000, 0x08000000, 0x04000000, x3, 48, x4)

// rs1_val == 268435456, rs2_val == -3
// opcode: c.add; op1:x10; op2:x11; op1val:0x10000000; op2val:0xfffffffd
TEST_CR_OP( c.add, x10, x11, 0x00000000, 0x10000000, 0xfffffffd, x3, 52, x4)

// rs1_val == 536870912, rs2_val == 131072
// opcode: c.add; op1:x10; op2:x11; op1val:0x20000000; op2val:0x00020000
TEST_CR_OP( c.add, x10, x11, 0x00000000, 0x20000000, 0x00020000, x3, 56, x4)

// rs1_val == 1073741824, rs2_val == 1048576
// opcode: c.add; op1:x10; op2:x11; op1val:0x40000000; op2val:0x00100000
TEST_CR_OP( c.add, x10, x11, 0x00000000, 0x40000000, 0x00100000, x3, 60, x4)

// rs1_val == -2, rs2_val == -524289
// opcode: c.add; op1:x10; op2:x11; op1val:0xfffffffe; op2val:0xfff7ffff
TEST_CR_OP( c.add, x10, x11, 0x00000000, 0xfffffffe, 0xfff7ffff, x3, 64, x4)

// rs1_val == -3, rs2_val == 65536
// opcode: c.add; op1:x10; op2:x11; op1val:0xfffffffd; op2val:0x00010000
TEST_CR_OP( c.add, x10, x11, 0x00000000, 0xfffffffd, 0x00010000, x3, 68, x4)

// rs1_val == -5, rs2_val == -2097153
// opcode: c.add; op1:x10; op2:x11; op1val:0xfffffffb; op2val:0xffdfffff
TEST_CR_OP( c.add, x10, x11, 0x00000000, 0xfffffffb, 0xffdfffff, x3, 72, x4)

// rs1_val == -9, rs2_val == 4194304
// opcode: c.add; op1:x10; op2:x11; op1val:0xfffffff7; op2val:0x00400000
TEST_CR_OP( c.add, x10, x11, 0x00000000, 0xfffffff7, 0x00400000, x3, 76, x4)

// rs2_val == -4194305, 
// opcode: c.add; op1:x10; op2:x11; op1val:0x00080000; op2val:0xffbfffff
TEST_CR_OP( c.add, x10, x11, 0x00000000, 0x00080000, 0xffbfffff, x3, 80, x4)

// rs2_val == -8388609, 
// opcode: c.add; op1:x10; op2:x11; op1val:0xfffffffe; op2val:0xff7fffff
TEST_CR_OP( c.add, x10, x11, 0x00000000, 0xfffffffe, 0xff7fffff, x3, 84, x4)

// rs2_val == -16777217, 
// opcode: c.add; op1:x10; op2:x11; op1val:0x04000000; op2val:0xfeffffff
TEST_CR_OP( c.add, x10, x11, 0x00000000, 0x04000000, 0xfeffffff, x3, 88, x4)

// rs2_val == -33554433, 
// opcode: c.add; op1:x10; op2:x11; op1val:0x00800000; op2val:0xfdffffff
TEST_CR_OP( c.add, x10, x11, 0x00000000, 0x00800000, 0xfdffffff, x3, 92, x4)

// rs2_val == -67108865, 
// opcode: c.add; op1:x10; op2:x11; op1val:0x00002000; op2val:0xfbffffff
TEST_CR_OP( c.add, x10, x11, 0x00000000, 0x00002000, 0xfbffffff, x3, 96, x4)

// rs2_val == -134217729, 
// opcode: c.add; op1:x10; op2:x11; op1val:0x00080000; op2val:0xf7ffffff
TEST_CR_OP( c.add, x10, x11, 0x00000000, 0x00080000, 0xf7ffffff, x3, 100, x4)

// rs2_val == -268435457, 
// opcode: c.add; op1:x10; op2:x11; op1val:0x00000001; op2val:0xefffffff
TEST_CR_OP( c.add, x10, x11, 0x00000000, 0x00000001, 0xefffffff, x3, 104, x4)

// rs2_val == -536870913, 
// opcode: c.add; op1:x10; op2:x11; op1val:0x00002000; op2val:0xdfffffff
TEST_CR_OP( c.add, x10, x11, 0x00000000, 0x00002000, 0xdfffffff, x3, 108, x4)

// rs2_val == 1431655765, 
// opcode: c.add; op1:x10; op2:x11; op1val:0x3fffffff; op2val:0x55555555
TEST_CR_OP( c.add, x10, x11, 0x00000000, 0x3fffffff, 0x55555555, x3, 112, x4)

// rs2_val == -1431655766, 
// opcode: c.add; op1:x10; op2:x11; op1val:0x00000004; op2val:0xaaaaaaaa
TEST_CR_OP( c.add, x10, x11, 0x00000000, 0x00000004, 0xaaaaaaaa, x3, 116, x4)

// rs1_val == -17, 
// opcode: c.add; op1:x10; op2:x11; op1val:0xffffffef; op2val:0x00000200
TEST_CR_OP( c.add, x10, x11, 0x00000000, 0xffffffef, 0x00000200, x3, 120, x4)

// rs1_val == -33, 
// opcode: c.add; op1:x10; op2:x11; op1val:0xffffffdf; op2val:0x00008000
TEST_CR_OP( c.add, x10, x11, 0x00000000, 0xffffffdf, 0x00008000, x3, 124, x4)

// rs1_val == -65, rs2_val == 2048
// opcode: c.add; op1:x10; op2:x11; op1val:0xffffffbf; op2val:0x00000800
TEST_CR_OP( c.add, x10, x11, 0x00000000, 0xffffffbf, 0x00000800, x3, 128, x4)

// rs1_val == -129, 
// opcode: c.add; op1:x10; op2:x11; op1val:0xffffff7f; op2val:0x00000080
TEST_CR_OP( c.add, x10, x11, 0x00000000, 0xffffff7f, 0x00000080, x3, 132, x4)

// rs1_val == -257, 
// opcode: c.add; op1:x10; op2:x11; op1val:0xfffffeff; op2val:0xf7ffffff
TEST_CR_OP( c.add, x10, x11, 0x00000000, 0xfffffeff, 0xf7ffffff, x3, 136, x4)

// rs1_val == -513, 
// opcode: c.add; op1:x10; op2:x11; op1val:0xfffffdff; op2val:0x00008000
TEST_CR_OP( c.add, x10, x11, 0x00000000, 0xfffffdff, 0x00008000, x3, 140, x4)

// rs1_val == -1025, 
// opcode: c.add; op1:x10; op2:x11; op1val:0xfffffbff; op2val:0x00000000
TEST_CR_OP( c.add, x10, x11, 0x00000000, 0xfffffbff, 0x00000000, x3, 144, x4)

// rs1_val == -2049, 
// opcode: c.add; op1:x10; op2:x11; op1val:0xfffff7ff; op2val:0x00000800
TEST_CR_OP( c.add, x10, x11, 0x00000000, 0xfffff7ff, 0x00000800, x3, 148, x4)

// rs1_val == -4097, rs2_val == -131073
// opcode: c.add; op1:x10; op2:x11; op1val:0xffffefff; op2val:0xfffdffff
TEST_CR_OP( c.add, x10, x11, 0x00000000, 0xffffefff, 0xfffdffff, x3, 152, x4)

// rs1_val == -8193, 
// opcode: c.add; op1:x10; op2:x11; op1val:0xffffdfff; op2val:0x00004000
TEST_CR_OP( c.add, x10, x11, 0x00000000, 0xffffdfff, 0x00004000, x3, 156, x4)

// rs1_val == -16385, 
// opcode: c.add; op1:x10; op2:x11; op1val:0xffffbfff; op2val:0xfffdffff
TEST_CR_OP( c.add, x10, x11, 0x00000000, 0xffffbfff, 0xfffdffff, x3, 160, x4)

// rs1_val == -32769, rs2_val == 134217728
// opcode: c.add; op1:x10; op2:x11; op1val:0xffff7fff; op2val:0x08000000
TEST_CR_OP( c.add, x10, x11, 0x00000000, 0xffff7fff, 0x08000000, x3, 164, x4)

// rs1_val == -65537, rs2_val == 4
// opcode: c.add; op1:x10; op2:x11; op1val:0xfffeffff; op2val:0x00000004
TEST_CR_OP( c.add, x10, x11, 0x00000000, 0xfffeffff, 0x00000004, x3, 168, x4)

// rs1_val == -131073, rs2_val == -4097
// opcode: c.add; op1:x10; op2:x11; op1val:0xfffdffff; op2val:0xffffefff
TEST_CR_OP( c.add, x10, x11, 0x00000000, 0xfffdffff, 0xffffefff, x3, 172, x4)

// rs1_val == -262145, 
// opcode: c.add; op1:x10; op2:x11; op1val:0xfffbffff; op2val:0x00000080
TEST_CR_OP( c.add, x10, x11, 0x00000000, 0xfffbffff, 0x00000080, x3, 176, x4)

// rs1_val == -8388609, 
// opcode: c.add; op1:x10; op2:x11; op1val:0xff7fffff; op2val:0xff7fffff
TEST_CR_OP( c.add, x10, x11, 0x00000000, 0xff7fffff, 0xff7fffff, x3, 180, x4)

// rs1_val == -16777217, 
// opcode: c.add; op1:x10; op2:x11; op1val:0xfeffffff; op2val:0xffefffff
TEST_CR_OP( c.add, x10, x11, 0x00000000, 0xfeffffff, 0xffefffff, x3, 184, x4)

// rs1_val == -33554433, 
// opcode: c.add; op1:x10; op2:x11; op1val:0xfdffffff; op2val:0xfffffffa
TEST_CR_OP( c.add, x10, x11, 0x00000000, 0xfdffffff, 0xfffffffa, x3, 188, x4)

// rs1_val == -67108865, 
// opcode: c.add; op1:x10; op2:x11; op1val:0xfbffffff; op2val:0x00000005
TEST_CR_OP( c.add, x10, x11, 0x00000000, 0xfbffffff, 0x00000005, x3, 192, x4)

// rs1_val == -134217729, 
// opcode: c.add; op1:x10; op2:x11; op1val:0xf7ffffff; op2val:0xaaaaaaaa
TEST_CR_OP( c.add, x10, x11, 0x00000000, 0xf7ffffff, 0xaaaaaaaa, x3, 196, x4)

// rs1_val == -268435457, rs2_val == 536870912
// opcode: c.add; op1:x10; op2:x11; op1val:0xefffffff; op2val:0x20000000
TEST_CR_OP( c.add, x10, x11, 0x00000000, 0xefffffff, 0x20000000, x3, 200, x4)

// rs1_val == -536870913, rs2_val == -262145
// opcode: c.add; op1:x10; op2:x11; op1val:0xdfffffff; op2val:0xfffbffff
TEST_CR_OP( c.add, x10, x11, 0x00000000, 0xdfffffff, 0xfffbffff, x3, 204, x4)

// rs1_val == -1073741825, 
// opcode: c.add; op1:x10; op2:x11; op1val:0xbfffffff; op2val:0xff7fffff
TEST_CR_OP( c.add, x10, x11, 0x00000000, 0xbfffffff, 0xff7fffff, x3, 208, x4)

// rs1_val == 1431655765, 
// opcode: c.add; op1:x10; op2:x11; op1val:0x55555555; op2val:0x04000000
TEST_CR_OP( c.add, x10, x11, 0x00000000, 0x55555555, 0x04000000, x3, 212, x4)

// rs1_val == -1431655766, 
// opcode: c.add; op1:x10; op2:x11; op1val:0xaaaaaaaa; op2val:0xffffefff
TEST_CR_OP( c.add, x10, x11, 0x00000000, 0xaaaaaaaa, 0xffffefff, x3, 216, x4)

// rs2_val == 8, 
// opcode: c.add; op1:x10; op2:x11; op1val:0x20000000; op2val:0x00000008
TEST_CR_OP( c.add, x10, x11, 0x00000000, 0x20000000, 0x00000008, x3, 220, x4)

// rs2_val == 16, 
// opcode: c.add; op1:x10; op2:x11; op1val:0x00000004; op2val:0x00000010
TEST_CR_OP( c.add, x10, x11, 0x00000000, 0x00000004, 0x00000010, x3, 224, x4)

// rs2_val == 32, 
// opcode: c.add; op1:x10; op2:x11; op1val:0xffffdfff; op2val:0x00000020
TEST_CR_OP( c.add, x10, x11, 0x00000000, 0xffffdfff, 0x00000020, x3, 228, x4)

// rs2_val == 64, 
// opcode: c.add; op1:x10; op2:x11; op1val:0xffffffef; op2val:0x00000040
TEST_CR_OP( c.add, x10, x11, 0x00000000, 0xffffffef, 0x00000040, x3, 232, x4)

// rs2_val == 8388608, 
// opcode: c.add; op1:x10; op2:x11; op1val:0x00200000; op2val:0x00800000
TEST_CR_OP( c.add, x10, x11, 0x00000000, 0x00200000, 0x00800000, x3, 236, x4)

// rs2_val == 268435456, rs1_val == -524289
// opcode: c.add; op1:x10; op2:x11; op1val:0xfff7ffff; op2val:0x10000000
TEST_CR_OP( c.add, x10, x11, 0x00000000, 0xfff7ffff, 0x10000000, x3, 240, x4)

// rs2_val == 1073741824, 
// opcode: c.add; op1:x10; op2:x11; op1val:0x00000010; op2val:0x40000000
TEST_CR_OP( c.add, x10, x11, 0x00000000, 0x00000010, 0x40000000, x3, 244, x4)

// rs2_val == -2, 
// opcode: c.add; op1:x10; op2:x11; op1val:0xefffffff; op2val:0xfffffffe
TEST_CR_OP( c.add, x10, x11, 0x00000000, 0xefffffff, 0xfffffffe, x3, 248, x4)

// rs2_val == -9, 
// opcode: c.add; op1:x10; op2:x11; op1val:0x7fffffff; op2val:0xfffffff7
TEST_CR_OP( c.add, x10, x11, 0x00000000, 0x7fffffff, 0xfffffff7, x3, 252, x4)

// rs2_val == -33, 
// opcode: c.add; op1:x10; op2:x11; op1val:0xfffffff7; op2val:0xffffffdf
TEST_CR_OP( c.add, x10, x11, 0x00000000, 0xfffffff7, 0xffffffdf, x3, 256, x4)

// rs2_val == -65, 
// opcode: c.add; op1:x10; op2:x11; op1val:0x10000000; op2val:0xffffffbf
TEST_CR_OP( c.add, x10, x11, 0x00000000, 0x10000000, 0xffffffbf, x3, 260, x4)

// rs2_val == -513, rs1_val == -4194305
// opcode: c.add; op1:x10; op2:x11; op1val:0xffbfffff; op2val:0xfffffdff
TEST_CR_OP( c.add, x10, x11, 0x00000000, 0xffbfffff, 0xfffffdff, x3, 264, x4)

// rs2_val == 4096, 
// opcode: c.add; op1:x10; op2:x11; op1val:0x00000003; op2val:0x00001000
TEST_CR_OP( c.add, x10, x11, 0x00000000, 0x00000003, 0x00001000, x3, 268, x4)

// rs2_val == -16385, 
// opcode: c.add; op1:x10; op2:x11; op1val:0x00000005; op2val:0xffffbfff
TEST_CR_OP( c.add, x10, x11, 0x00000000, 0x00000005, 0xffffbfff, x3, 272, x4)

// rs2_val == 262144, 
// opcode: c.add; op1:x10; op2:x11; op1val:0xc0000000; op2val:0x00040000
TEST_CR_OP( c.add, x10, x11, 0x00000000, 0xc0000000, 0x00040000, x3, 276, x4)

// rs1_val == -2097153, 
// opcode: c.add; op1:x10; op2:x11; op1val:0xffdfffff; op2val:0xfeffffff
TEST_CR_OP( c.add, x10, x11, 0x00000000, 0xffdfffff, 0xfeffffff, x3, 280, x4)

// rs2_val == -8193, 
// opcode: c.add; op1:x10; op2:x11; op1val:0x00000007; op2val:0xffffdfff
TEST_CR_OP( c.add, x10, x11, 0x00000000, 0x00000007, 0xffffdfff, x3, 284, x4)

// rs2_val > 0, rs1_val == 262144, rs2_val == 1024
// opcode: c.add; op1:x10; op2:x11; op1val:0x00040000; op2val:0x00000400
TEST_CR_OP( c.add, x10, x11, 0x00000000, 0x00040000, 0x00000400, x3, 288, x4)

// rs2_val < 0, rs2_val == -65537
// opcode: c.add; op1:x10; op2:x11; op1val:0x00000007; op2val:0xfffeffff
TEST_CR_OP( c.add, x10, x11, 0x00000000, 0x00000007, 0xfffeffff, x3, 292, x4)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x1_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x1_1:
    .fill 21*(XLEN/32),4,0xdeadbeef


signature_x3_0:
    .fill 74*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
