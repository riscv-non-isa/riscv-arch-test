 
// -----------
// This file was generated by riscv_ctg (https://gitlab.com/incoresemi/riscv-compliance/riscv_ctg)
// version   : 0.1.0
// timestamp : Thu Nov  5 11:18:28 2020 GMT
// usage     : riscv_ctg \
//                  -- cgf /scratch/git-repo/incoresemi/riscv-compliance/riscv_ctg/sample_cgfs/rv32ic.cgf \
//                  -- xlen 32 \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the c.lwsp instruction of the RISC-V C extension for the clwsp covergroup.
// 
#include "compliance_model.h"
#include "compliance_test.h"
RVTEST_ISA("RV32IC")

RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*C.*);def TEST_CASE_1=True;",clwsp)

RVTEST_SIGBASE( x14,signature_x14_1)

// rd==x9, imm_val > 0, 
// opcode: c.lwsp; op1:x2; dest:x9; immval:252
TEST_LOAD(x14,x19,0,x2,x9,252,0,c.lwsp,0)

// rd==x28, imm_val == 0, 
// opcode: c.lwsp; op1:x2; dest:x28; immval:0
TEST_LOAD(x14,x19,0,x2,x28,0,4,c.lwsp,0)

// rd==x24, imm_val == 4, 
// opcode: c.lwsp; op1:x2; dest:x24; immval:4
TEST_LOAD(x14,x19,0,x2,x24,4,8,c.lwsp,0)

// rd==x30, imm_val == 8, 
// opcode: c.lwsp; op1:x2; dest:x30; immval:8
TEST_LOAD(x14,x19,0,x2,x30,8,12,c.lwsp,0)

// rd==x18, imm_val == 16, 
// opcode: c.lwsp; op1:x2; dest:x18; immval:16
TEST_LOAD(x14,x19,0,x2,x18,16,16,c.lwsp,0)

// rd==x16, imm_val == 32, 
// opcode: c.lwsp; op1:x2; dest:x16; immval:32
TEST_LOAD(x14,x19,0,x2,x16,32,20,c.lwsp,0)

// rd==x13, imm_val == 64, 
// opcode: c.lwsp; op1:x2; dest:x13; immval:64
TEST_LOAD(x14,x19,0,x2,x13,64,24,c.lwsp,0)

// rd==x11, imm_val == 128, 
// opcode: c.lwsp; op1:x2; dest:x11; immval:128
TEST_LOAD(x14,x19,0,x2,x11,128,28,c.lwsp,0)

// rd==x17, imm_val == 248, 
// opcode: c.lwsp; op1:x2; dest:x17; immval:248
TEST_LOAD(x14,x19,0,x2,x17,248,32,c.lwsp,0)

// rd==x7, imm_val == 244, 
// opcode: c.lwsp; op1:x2; dest:x7; immval:244
TEST_LOAD(x14,x19,0,x2,x7,244,36,c.lwsp,0)

// rd==x31, imm_val == 236, 
// opcode: c.lwsp; op1:x2; dest:x31; immval:236
TEST_LOAD(x14,x19,0,x2,x31,236,40,c.lwsp,0)

// rd==x22, imm_val == 220, 
// opcode: c.lwsp; op1:x2; dest:x22; immval:220
TEST_LOAD(x14,x19,0,x2,x22,220,44,c.lwsp,0)

// rd==x1, imm_val == 188, 
// opcode: c.lwsp; op1:x2; dest:x1; immval:188
TEST_LOAD(x14,x19,0,x2,x1,188,48,c.lwsp,0)

// rd==x6, imm_val == 124, 
// opcode: c.lwsp; op1:x2; dest:x6; immval:124
TEST_LOAD(x14,x19,0,x2,x6,124,52,c.lwsp,0)

// rd==x3, imm_val == 84, 
// opcode: c.lwsp; op1:x2; dest:x3; immval:84
TEST_LOAD(x14,x19,0,x2,x3,84,56,c.lwsp,0)

// rd==x23, imm_val == 168, 
// opcode: c.lwsp; op1:x2; dest:x23; immval:168
TEST_LOAD(x14,x19,0,x2,x23,168,60,c.lwsp,0)

// rd==x27, 
// opcode: c.lwsp; op1:x2; dest:x27; immval:0
TEST_LOAD(x14,x19,0,x2,x27,0,64,c.lwsp,0)

// rd==x8, 
// opcode: c.lwsp; op1:x2; dest:x8; immval:0
TEST_LOAD(x14,x19,0,x2,x8,0,68,c.lwsp,0)

// rd==x2, 
// opcode: c.lwsp; op1:x2; dest:x2; immval:0
TEST_LOAD(x14,x19,0,x2,x2,0,72,c.lwsp,0)

// rd==x12, 
// opcode: c.lwsp; op1:x2; dest:x12; immval:0
TEST_LOAD(x14,x19,0,x2,x12,0,76,c.lwsp,0)

// rd==x29, 
// opcode: c.lwsp; op1:x2; dest:x29; immval:0
TEST_LOAD(x14,x19,0,x2,x29,0,80,c.lwsp,0)

// rd==x4, 
// opcode: c.lwsp; op1:x2; dest:x4; immval:0
TEST_LOAD(x14,x19,0,x2,x4,0,84,c.lwsp,0)

// rd==x15, 
// opcode: c.lwsp; op1:x2; dest:x15; immval:0
TEST_LOAD(x14,x19,0,x2,x15,0,88,c.lwsp,0)

// rd==x21, 
// opcode: c.lwsp; op1:x2; dest:x21; immval:0
TEST_LOAD(x14,x19,0,x2,x21,0,92,c.lwsp,0)

// rd==x5, 
// opcode: c.lwsp; op1:x2; dest:x5; immval:0
TEST_LOAD(x14,x19,0,x2,x5,0,96,c.lwsp,0)

// rd==x20, 
// opcode: c.lwsp; op1:x2; dest:x20; immval:0
TEST_LOAD(x14,x19,0,x2,x20,0,100,c.lwsp,0)

// rd==x10, 
// opcode: c.lwsp; op1:x2; dest:x10; immval:0
TEST_LOAD(x14,x19,0,x2,x10,0,104,c.lwsp,0)

// rd==x25, 
// opcode: c.lwsp; op1:x2; dest:x25; immval:0
TEST_LOAD(x14,x3,0,x2,x25,0,108,c.lwsp,0)
RVTEST_SIGBASE( x1,signature_x1_0)

// rd==x26, 
// opcode: c.lwsp; op1:x2; dest:x26; immval:0
TEST_LOAD(x1,x3,0,x2,x26,0,0,c.lwsp,0)

// rd==x14, 
// opcode: c.lwsp; op1:x2; dest:x14; immval:0
TEST_LOAD(x1,x3,0,x2,x14,0,4,c.lwsp,0)

// rd==x19, 
// opcode: c.lwsp; op1:x2; dest:x19; immval:0
TEST_LOAD(x1,x3,0,x2,x19,0,8,c.lwsp,0)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
.align 4

signature_x14_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x14_1:
    .fill 28*(XLEN/32),4,0xdeadbeef


signature_x1_0:
    .fill 3*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
