 
// -----------
// This file was generated by riscv_ctg (https://gitlab.com/incoresemi/riscv-compliance/riscv_ctg)
// version   : 0.1.0
// timestamp : Fri Nov  6 10:29:15 2020 GMT
// usage     : riscv_ctg \
//                  -- cgf /scratch/git-repo/incoresemi/riscv-compliance/riscv_ctg/sample_cgfs/rv32ic.cgf \
//                  -- xlen 32 \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the c.xor instruction of the RISC-V C extension for the cxor covergroup.
// 
#include "compliance_model.h"
#include "compliance_test.h"
RVTEST_ISA("RV32IC")

RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*C.*);def TEST_CASE_1=True;",cxor)

RVTEST_SIGBASE( x1,signature_x1_1)

inst_0:
// rs1 == rs2, rs1==x15, rs2==x15, rs2_val > 0, rs2_val == 1, rs1_val == -1073741825
// opcode: c.xor; op1:x15; op2:x15; op1val:-1073741825; op2val:1
TEST_CR_OP( c.xor, x15, x15, 0x00000000, -1073741825, 1, x1, 0, x2)

inst_1:
// rs1 != rs2, rs1==x13, rs2==x9, rs2_val < 0, rs1_val == 256, rs2_val == -8193
// opcode: c.xor; op1:x13; op2:x9; op1val:256; op2val:-8193
TEST_CR_OP( c.xor, x13, x9, 0x00000000, 256, -8193, x1, 4, x2)

inst_2:
// rs1==x9, rs2==x11, rs1_val == (-2**(xlen-1)), rs1_val == -2147483648, rs2_val == 64
// opcode: c.xor; op1:x9; op2:x11; op1val:-2147483648; op2val:64
TEST_CR_OP( c.xor, x9, x11, 0x00000000, -2147483648, 64, x1, 8, x2)

inst_3:
// rs1==x14, rs2==x12, rs1_val == 0, rs2_val == 128
// opcode: c.xor; op1:x14; op2:x12; op1val:0; op2val:128
TEST_CR_OP( c.xor, x14, x12, 0x00000000, 0, 128, x1, 12, x2)

inst_4:
// rs1==x12, rs2==x8, rs1_val == (2**(xlen-1)-1), rs1_val == 2147483647
// opcode: c.xor; op1:x12; op2:x8; op1val:2147483647; op2val:6
TEST_CR_OP( c.xor, x12, x8, 0x00000000, 2147483647, 6, x1, 16, x2)

inst_5:
// rs1==x10, rs2==x13, rs1_val == 1, rs2_val == 268435456
// opcode: c.xor; op1:x10; op2:x13; op1val:1; op2val:268435456
TEST_CR_OP( c.xor, x10, x13, 0x00000000, 1, 268435456, x1, 20, x2)

inst_6:
// rs1==x8, rs2==x10, rs2_val == (-2**(xlen-1)), rs2_val == -2147483648, rs1_val == -134217729
// opcode: c.xor; op1:x8; op2:x10; op1val:-134217729; op2val:-2147483648
TEST_CR_OP( c.xor, x8, x10, 0x00000000, -134217729, -2147483648, x1, 24, x2)

inst_7:
// rs1==x11, rs2==x14, rs2_val == 0, rs1_val == -17
// opcode: c.xor; op1:x11; op2:x14; op1val:-17; op2val:0
TEST_CR_OP( c.xor, x11, x14, 0x00000000, -17, 0, x1, 28, x2)

inst_8:
// rs2_val == (2**(xlen-1)-1), rs2_val == 2147483647
// opcode: c.xor; op1:x10; op2:x11; op1val:-6; op2val:2147483647
TEST_CR_OP( c.xor, x10, x11, 0x00000000, -6, 2147483647, x1, 32, x2)

inst_9:
// rs1_val == 2, rs2_val == 16777216
// opcode: c.xor; op1:x10; op2:x11; op1val:2; op2val:16777216
TEST_CR_OP( c.xor, x10, x11, 0x00000000, 2, 16777216, x1, 36, x2)

inst_10:
// rs1_val == 4, rs2_val == -65537
// opcode: c.xor; op1:x10; op2:x11; op1val:4; op2val:-65537
TEST_CR_OP( c.xor, x10, x11, 0x00000000, 4, -65537, x1, 40, x2)

inst_11:
// rs1_val == 8, rs2_val == 8192
// opcode: c.xor; op1:x10; op2:x11; op1val:8; op2val:8192
TEST_CR_OP( c.xor, x10, x11, 0x00000000, 8, 8192, x1, 44, x2)

inst_12:
// rs1_val == 16, rs2_val == 65536
// opcode: c.xor; op1:x10; op2:x11; op1val:16; op2val:65536
TEST_CR_OP( c.xor, x10, x11, 0x00000000, 16, 65536, x1, 48, x2)

inst_13:
// rs1_val == 32, 
// opcode: c.xor; op1:x10; op2:x11; op1val:32; op2val:-2147483648
TEST_CR_OP( c.xor, x10, x11, 0x00000000, 32, -2147483648, x1, 52, x2)

inst_14:
// rs1_val == 64, rs2_val == -524289
// opcode: c.xor; op1:x10; op2:x11; op1val:64; op2val:-524289
TEST_CR_OP( c.xor, x10, x11, 0x00000000, 64, -524289, x1, 56, x2)

inst_15:
// rs1_val == 128, 
// opcode: c.xor; op1:x10; op2:x11; op1val:128; op2val:0
TEST_CR_OP( c.xor, x10, x11, 0x00000000, 128, 0, x1, 60, x2)

inst_16:
// rs1_val == 512, rs2_val == -1025
// opcode: c.xor; op1:x10; op2:x11; op1val:512; op2val:-1025
TEST_CR_OP( c.xor, x10, x11, 0x00000000, 512, -1025, x1, 64, x2)

inst_17:
// rs1_val == 1024, rs2_val == 33554432
// opcode: c.xor; op1:x10; op2:x11; op1val:1024; op2val:33554432
TEST_CR_OP( c.xor, x10, x11, 0x00000000, 1024, 33554432, x1, 68, x2)

inst_18:
// rs1_val == 2048, rs2_val == 536870912
// opcode: c.xor; op1:x10; op2:x11; op1val:2048; op2val:536870912
TEST_CR_OP( c.xor, x10, x11, 0x00000000, 2048, 536870912, x1, 72, x2)

inst_19:
// rs1_val == 4096, rs2_val == -2097153
// opcode: c.xor; op1:x10; op2:x11; op1val:4096; op2val:-2097153
TEST_CR_OP( c.xor, x10, x11, 0x00000000, 4096, -2097153, x1, 76, x2)

inst_20:
// rs1_val == 8192, rs2_val == 67108864
// opcode: c.xor; op1:x10; op2:x11; op1val:8192; op2val:67108864
TEST_CR_OP( c.xor, x10, x11, 0x00000000, 8192, 67108864, x1, 80, x2)

inst_21:
// rs1_val == 16384, rs2_val == 134217728
// opcode: c.xor; op1:x10; op2:x11; op1val:16384; op2val:134217728
TEST_CR_OP( c.xor, x10, x11, 0x00000000, 16384, 134217728, x1, 84, x2)

inst_22:
// rs1_val == 32768, rs2_val == 2097152
// opcode: c.xor; op1:x10; op2:x11; op1val:32768; op2val:2097152
TEST_CR_OP( c.xor, x10, x11, 0x00000000, 32768, 2097152, x1, 88, x2)

inst_23:
// rs1_val == 65536, rs2_val == 32
// opcode: c.xor; op1:x10; op2:x11; op1val:65536; op2val:32
TEST_CR_OP( c.xor, x10, x11, 0x00000000, 65536, 32, x1, 92, x2)

inst_24:
// rs1_val == 131072, rs2_val == -129
// opcode: c.xor; op1:x10; op2:x11; op1val:131072; op2val:-129
TEST_CR_OP( c.xor, x10, x11, 0x00000000, 131072, -129, x1, 96, x2)

inst_25:
// rs1_val == 262144, 
// opcode: c.xor; op1:x10; op2:x11; op1val:262144; op2val:-8193
TEST_CR_OP( c.xor, x10, x11, 0x00000000, 262144, -8193, x1, 100, x2)

inst_26:
// rs1_val == 524288, 
// opcode: c.xor; op1:x10; op2:x11; op1val:524288; op2val:-8193
TEST_CR_OP( c.xor, x10, x11, 0x00000000, 524288, -8193, x1, 104, x2)

inst_27:
// rs1_val == 1048576, rs2_val == -262145
// opcode: c.xor; op1:x10; op2:x11; op1val:1048576; op2val:-262145
TEST_CR_OP( c.xor, x10, x11, 0x00000000, 1048576, -262145, x1, 108, x2)

inst_28:
// rs1_val == 2097152, rs2_val == -536870913
// opcode: c.xor; op1:x10; op2:x11; op1val:2097152; op2val:-536870913
TEST_CR_OP( c.xor, x10, x11, 0x00000000, 2097152, -536870913, x1, 112, x2)

inst_29:
// rs1_val == 4194304, 
// opcode: c.xor; op1:x10; op2:x11; op1val:4194304; op2val:33554432
TEST_CR_OP( c.xor, x10, x11, 0x00000000, 4194304, 33554432, x1, 116, x2)

inst_30:
// rs1_val == 8388608, 
// opcode: c.xor; op1:x10; op2:x11; op1val:8388608; op2val:65536
TEST_CR_OP( c.xor, x10, x11, 0x00000000, 8388608, 65536, x1, 120, x2)

inst_31:
// rs1_val == 16777216, rs2_val == 262144
// opcode: c.xor; op1:x10; op2:x11; op1val:16777216; op2val:262144
TEST_CR_OP( c.xor, x10, x11, 0x00000000, 16777216, 262144, x1, 124, x2)

inst_32:
// rs1_val == 33554432, 
// opcode: c.xor; op1:x10; op2:x11; op1val:33554432; op2val:-7
TEST_CR_OP( c.xor, x10, x11, 0x00000000, 33554432, -7, x1, 128, x2)

inst_33:
// rs1_val == 67108864, 
// opcode: c.xor; op1:x10; op2:x11; op1val:67108864; op2val:-4
TEST_CR_OP( c.xor, x10, x11, 0x00000000, 67108864, -4, x1, 132, x2)

inst_34:
// rs1_val == 134217728, 
// opcode: c.xor; op1:x10; op2:x11; op1val:134217728; op2val:32
TEST_CR_OP( c.xor, x10, x11, 0x00000000, 134217728, 32, x1, 136, x2)

inst_35:
// rs1_val == 268435456, 
// opcode: c.xor; op1:x10; op2:x11; op1val:268435456; op2val:268435456
TEST_CR_OP( c.xor, x10, x11, 0x00000000, 268435456, 268435456, x1, 140, x2)

inst_36:
// rs1_val == 536870912, rs2_val == 1073741824
// opcode: c.xor; op1:x10; op2:x11; op1val:536870912; op2val:1073741824
TEST_CR_OP( c.xor, x10, x11, 0x00000000, 536870912, 1073741824, x1, 144, x2)

inst_37:
// rs1_val == 1073741824, 
// opcode: c.xor; op1:x10; op2:x11; op1val:1073741824; op2val:-1
TEST_CR_OP( c.xor, x10, x11, 0x00000000, 1073741824, -1, x1, 148, x2)

inst_38:
// rs1_val == -2, rs2_val == -32769
// opcode: c.xor; op1:x10; op2:x11; op1val:-2; op2val:-32769
TEST_CR_OP( c.xor, x10, x11, 0x00000000, -2, -32769, x1, 152, x2)

inst_39:
// rs1_val == -3, 
// opcode: c.xor; op1:x10; op2:x11; op1val:-3; op2val:-262145
TEST_CR_OP( c.xor, x10, x11, 0x00000000, -3, -262145, x1, 156, x2)

inst_40:
// rs1_val == -5, 
// opcode: c.xor; op1:x10; op2:x11; op1val:-5; op2val:-32769
TEST_CR_OP( c.xor, x10, x11, 0x00000000, -5, -32769, x1, 160, x2)

inst_41:
// rs1_val == -9, 
// opcode: c.xor; op1:x10; op2:x11; op1val:-9; op2val:65536
TEST_CR_OP( c.xor, x10, x11, 0x00000000, -9, 65536, x1, 164, x2)

inst_42:
// rs1_val == -33, rs2_val == -17
// opcode: c.xor; op1:x10; op2:x11; op1val:-33; op2val:-17
TEST_CR_OP( c.xor, x10, x11, 0x00000000, -33, -17, x1, 168, x2)

inst_43:
// rs1_val == -65, rs2_val == -33
// opcode: c.xor; op1:x10; op2:x11; op1val:-65; op2val:-33
TEST_CR_OP( c.xor, x10, x11, 0x00000000, -65, -33, x1, 172, x2)

inst_44:
// rs2_val == -4194305, 
// opcode: c.xor; op1:x10; op2:x11; op1val:-3; op2val:-4194305
TEST_CR_OP( c.xor, x10, x11, 0x00000000, -3, -4194305, x1, 176, x2)

inst_45:
// rs2_val == -8388609, rs1_val == -262145
// opcode: c.xor; op1:x10; op2:x11; op1val:-262145; op2val:-8388609
TEST_CR_OP( c.xor, x10, x11, 0x00000000, -262145, -8388609, x1, 180, x2)

inst_46:
// rs2_val == -16777217, 
// opcode: c.xor; op1:x10; op2:x11; op1val:6; op2val:-16777217
TEST_CR_OP( c.xor, x10, x11, 0x00000000, 6, -16777217, x1, 184, x2)

inst_47:
// rs2_val == -33554433, 
// opcode: c.xor; op1:x10; op2:x11; op1val:67108864; op2val:-33554433
TEST_CR_OP( c.xor, x10, x11, 0x00000000, 67108864, -33554433, x1, 188, x2)

inst_48:
// rs2_val == -67108865, 
// opcode: c.xor; op1:x10; op2:x11; op1val:262144; op2val:-67108865
TEST_CR_OP( c.xor, x10, x11, 0x00000000, 262144, -67108865, x1, 192, x2)

inst_49:
// rs2_val == -134217729, rs1_val == -268435457
// opcode: c.xor; op1:x10; op2:x11; op1val:-268435457; op2val:-134217729
TEST_CR_OP( c.xor, x10, x11, 0x00000000, -268435457, -134217729, x1, 196, x2)

inst_50:
// rs2_val == -268435457, 
// opcode: c.xor; op1:x10; op2:x11; op1val:1; op2val:-268435457
TEST_CR_OP( c.xor, x10, x11, 0x00000000, 1, -268435457, x1, 200, x2)

inst_51:
// rs2_val == -1073741825, 
// opcode: c.xor; op1:x10; op2:x11; op1val:9; op2val:-1073741825
TEST_CR_OP( c.xor, x10, x11, 0x00000000, 9, -1073741825, x1, 204, x2)

inst_52:
// rs2_val == 1431655765, 
// opcode: c.xor; op1:x10; op2:x11; op1val:256; op2val:1431655765
TEST_CR_OP( c.xor, x10, x11, 0x00000000, 256, 1431655765, x1, 208, x2)

inst_53:
// rs2_val == -1431655766, 
// opcode: c.xor; op1:x10; op2:x11; op1val:2; op2val:-1431655766
TEST_CR_OP( c.xor, x10, x11, 0x00000000, 2, -1431655766, x1, 212, x2)

inst_54:
// rs1_val == -129, 
// opcode: c.xor; op1:x10; op2:x11; op1val:-129; op2val:64
TEST_CR_OP( c.xor, x10, x11, 0x00000000, -129, 64, x1, 216, x2)

inst_55:
// rs1_val == -257, 
// opcode: c.xor; op1:x10; op2:x11; op1val:-257; op2val:2097152
TEST_CR_OP( c.xor, x10, x11, 0x00000000, -257, 2097152, x1, 220, x2)

inst_56:
// rs1_val == -513, rs2_val == -65
// opcode: c.xor; op1:x10; op2:x11; op1val:-513; op2val:-65
TEST_CR_OP( c.xor, x10, x11, 0x00000000, -513, -65, x1, 224, x2)

inst_57:
// rs1_val == -1025, rs2_val == -2
// opcode: c.xor; op1:x10; op2:x11; op1val:-1025; op2val:-2
TEST_CR_OP( c.xor, x10, x11, 0x00000000, -1025, -2, x1, 228, x2)

inst_58:
// rs1_val == -2049, rs2_val == 2
// opcode: c.xor; op1:x10; op2:x11; op1val:-2049; op2val:2
TEST_CR_OP( c.xor, x10, x11, 0x00000000, -2049, 2, x1, 232, x2)

inst_59:
// rs1_val == -4097, rs2_val == 524288
// opcode: c.xor; op1:x10; op2:x11; op1val:-4097; op2val:524288
TEST_CR_OP( c.xor, x10, x11, 0x00000000, -4097, 524288, x1, 236, x2)

inst_60:
// rs1_val == -8193, 
// opcode: c.xor; op1:x10; op2:x11; op1val:-8193; op2val:8192
TEST_CR_OP( c.xor, x10, x11, 0x00000000, -8193, 8192, x1, 240, x2)

inst_61:
// rs1_val == -16385, rs2_val == 8
// opcode: c.xor; op1:x10; op2:x11; op1val:-16385; op2val:8
TEST_CR_OP( c.xor, x10, x11, 0x00000000, -16385, 8, x1, 244, x2)

inst_62:
// rs1_val == -32769, rs2_val == -3
// opcode: c.xor; op1:x10; op2:x11; op1val:-32769; op2val:-3
TEST_CR_OP( c.xor, x10, x11, 0x00000000, -32769, -3, x1, 248, x2)

inst_63:
// rs1_val == -65537, rs2_val == -5
// opcode: c.xor; op1:x10; op2:x11; op1val:-65537; op2val:-5
TEST_CR_OP( c.xor, x10, x11, 0x00000000, -65537, -5, x1, 252, x2)

inst_64:
// rs1_val == -131073, 
// opcode: c.xor; op1:x10; op2:x11; op1val:-131073; op2val:1073741824
TEST_CR_OP( c.xor, x10, x11, 0x00000000, -131073, 1073741824, x1, 256, x2)

inst_65:
// rs1_val == -524289, 
// opcode: c.xor; op1:x10; op2:x11; op1val:-524289; op2val:-536870913
TEST_CR_OP( c.xor, x10, x11, 0x00000000, -524289, -536870913, x1, 260, x2)

inst_66:
// rs1_val == -8388609, 
// opcode: c.xor; op1:x10; op2:x11; op1val:-8388609; op2val:8
TEST_CR_OP( c.xor, x10, x11, 0x00000000, -8388609, 8, x1, 264, x2)

inst_67:
// rs1_val == -16777217, 
// opcode: c.xor; op1:x10; op2:x11; op1val:-16777217; op2val:1073741823
TEST_CR_OP( c.xor, x10, x11, 0x00000000, -16777217, 1073741823, x1, 268, x2)

inst_68:
// rs1_val == -33554433, 
// opcode: c.xor; op1:x10; op2:x11; op1val:-33554433; op2val:6
TEST_CR_OP( c.xor, x10, x11, 0x00000000, -33554433, 6, x1, 272, x2)

inst_69:
// rs1_val == -67108865, 
// opcode: c.xor; op1:x10; op2:x11; op1val:-67108865; op2val:1073741823
TEST_CR_OP( c.xor, x10, x11, 0x00000000, -67108865, 1073741823, x1, 276, x2)

inst_70:
// rs1_val == -536870913, rs2_val == 2048
// opcode: c.xor; op1:x10; op2:x11; op1val:-536870913; op2val:2048
TEST_CR_OP( c.xor, x10, x11, 0x00000000, -536870913, 2048, x1, 280, x2)

inst_71:
// rs1_val == 1431655765, 
// opcode: c.xor; op1:x10; op2:x11; op1val:1431655765; op2val:32
TEST_CR_OP( c.xor, x10, x11, 0x00000000, 1431655765, 32, x1, 284, x2)

inst_72:
// rs1_val == -1431655766, 
// opcode: c.xor; op1:x10; op2:x11; op1val:-1431655766; op2val:-8388609
TEST_CR_OP( c.xor, x10, x11, 0x00000000, -1431655766, -8388609, x1, 288, x2)

inst_73:
// rs2_val == 4, 
// opcode: c.xor; op1:x10; op2:x11; op1val:-10; op2val:4
TEST_CR_OP( c.xor, x10, x11, 0x00000000, -10, 4, x1, 292, x2)

inst_74:
// rs2_val == 16, 
// opcode: c.xor; op1:x10; op2:x11; op1val:7; op2val:16
TEST_CR_OP( c.xor, x10, x11, 0x00000000, 7, 16, x1, 296, x2)

inst_75:
// rs2_val == 256, 
// opcode: c.xor; op1:x10; op2:x11; op1val:4194304; op2val:256
TEST_CR_OP( c.xor, x10, x11, 0x00000000, 4194304, 256, x1, 300, x2)

inst_76:
// rs2_val == 512, 
// opcode: c.xor; op1:x10; op2:x11; op1val:-4; op2val:512
TEST_CR_OP( c.xor, x10, x11, 0x00000000, -4, 512, x1, 304, x2)

inst_77:
// rs2_val == 1024, 
// opcode: c.xor; op1:x10; op2:x11; op1val:-10; op2val:1024
TEST_CR_OP( c.xor, x10, x11, 0x00000000, -10, 1024, x1, 308, x2)

inst_78:
// rs2_val == 4096, rs1_val == -4194305
// opcode: c.xor; op1:x10; op2:x11; op1val:-4194305; op2val:4096
TEST_CR_OP( c.xor, x10, x11, 0x00000000, -4194305, 4096, x1, 312, x2)

inst_79:
// rs2_val == 16384, 
// opcode: c.xor; op1:x10; op2:x11; op1val:-16777217; op2val:16384
TEST_CR_OP( c.xor, x10, x11, 0x00000000, -16777217, 16384, x1, 316, x2)

inst_80:
// rs2_val == 4194304, 
// opcode: c.xor; op1:x10; op2:x11; op1val:-257; op2val:4194304
TEST_CR_OP( c.xor, x10, x11, 0x00000000, -257, 4194304, x1, 320, x2)

inst_81:
// rs2_val == 8388608, 
// opcode: c.xor; op1:x10; op2:x11; op1val:-4097; op2val:8388608
TEST_CR_OP( c.xor, x10, x11, 0x00000000, -4097, 8388608, x1, 324, x2)

inst_82:
// rs2_val == -131073, 
// opcode: c.xor; op1:x10; op2:x11; op1val:-1073741824; op2val:-131073
TEST_CR_OP( c.xor, x10, x11, 0x00000000, -1073741824, -131073, x1, 328, x2)

inst_83:
// rs2_val == -9, 
// opcode: c.xor; op1:x10; op2:x11; op1val:524288; op2val:-9
TEST_CR_OP( c.xor, x10, x11, 0x00000000, 524288, -9, x1, 332, x2)

inst_84:
// rs2_val == -257, 
// opcode: c.xor; op1:x10; op2:x11; op1val:131072; op2val:-257
TEST_CR_OP( c.xor, x10, x11, 0x00000000, 131072, -257, x1, 336, x2)

inst_85:
// rs2_val == -513, 
// opcode: c.xor; op1:x10; op2:x11; op1val:3; op2val:-513
TEST_CR_OP( c.xor, x10, x11, 0x00000000, 3, -513, x1, 340, x2)

inst_86:
// rs2_val == -2049, 
// opcode: c.xor; op1:x10; op2:x11; op1val:-6; op2val:-2049
TEST_CR_OP( c.xor, x10, x11, 0x00000000, -6, -2049, x1, 344, x2)

inst_87:
// rs2_val == -4097, 
// opcode: c.xor; op1:x10; op2:x11; op1val:-8388609; op2val:-4097
TEST_CR_OP( c.xor, x10, x11, 0x00000000, -8388609, -4097, x1, 348, x2)

inst_88:
// rs2_val == 1048576, 
// opcode: c.xor; op1:x10; op2:x11; op1val:131072; op2val:1048576
TEST_CR_OP( c.xor, x10, x11, 0x00000000, 131072, 1048576, x1, 352, x2)

inst_89:
// rs1_val == -2097153, 
// opcode: c.xor; op1:x10; op2:x11; op1val:-2097153; op2val:-524289
TEST_CR_OP( c.xor, x10, x11, 0x00000000, -2097153, -524289, x1, 356, x2)

inst_90:
// rs2_val == -16385, 
// opcode: c.xor; op1:x10; op2:x11; op1val:-7; op2val:-16385
TEST_CR_OP( c.xor, x10, x11, 0x00000000, -7, -16385, x1, 360, x2)

inst_91:
// rs2_val == 32768, 
// opcode: c.xor; op1:x10; op2:x11; op1val:-10; op2val:32768
TEST_CR_OP( c.xor, x10, x11, 0x00000000, -10, 32768, x1, 364, x2)

inst_92:
// rs2_val == 131072, 
// opcode: c.xor; op1:x10; op2:x11; op1val:-8193; op2val:131072
TEST_CR_OP( c.xor, x10, x11, 0x00000000, -8193, 131072, x1, 368, x2)

inst_93:
// rs1_val == -1048577, 
// opcode: c.xor; op1:x10; op2:x11; op1val:-1048577; op2val:1048576
TEST_CR_OP( c.xor, x10, x11, 0x00000000, -1048577, 1048576, x1, 372, x2)

inst_94:
// rs2_val == -1048577, 
// opcode: c.xor; op1:x10; op2:x11; op1val:-1073741825; op2val:-1048577
TEST_CR_OP( c.xor, x10, x11, 0x00000000, -1073741825, -1048577, x1, 376, x2)

inst_95:
// rs2_val > 0, rs2_val == 1, rs1_val == -1073741825
// opcode: c.xor; op1:x10; op2:x11; op1val:-1073741825; op2val:1
TEST_CR_OP( c.xor, x10, x11, 0x00000000, -1073741825, 1, x1, 380, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x1_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x1_1:
    .fill 96*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
