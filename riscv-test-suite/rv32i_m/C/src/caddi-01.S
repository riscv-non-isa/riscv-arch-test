
// -----------
// This file was generated by riscv_ctg (https://gitlab.com/incoresemi/riscv-compliance/riscv_ctg)
// version   : 0.4.0
// timestamp : Fri Dec  4 15:18:06 2020 GMT
// usage     : riscv_ctg \
//                  -- cgf ('/scratch/git-repo/incoresemi/riscv-compliance/riscv_ctg/sample_cgfs/dataset.cgf', '/scratch/git-repo/incoresemi/riscv-compliance/riscv_ctg/sample_cgfs/rv32ic.cgf') \
//                  -- xlen 32 \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the c.addi instruction of the RISC-V C extension for the caddi covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IC")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*C.*);def TEST_CASE_1=True;",caddi)

RVTEST_SIGBASE( x7,signature_x7_1)

inst_0:
// rd==x18, rs1_val == imm_val, rs1_val > 0 and imm_val > 0, rs1_val == 4, rs1_val==4 and imm_val==4, imm_val == 4
// opcode:c.addi; op1:x18; dest:x18 op1val:0x4; immval:0x4
TEST_CI_OP( c.addi, x18, 0x00000000, 0x4, 0x4, x7, 0, x15)

inst_1:
// rd==x17, rs1_val != imm_val, rs1_val == 67108864
// opcode:c.addi; op1:x17; dest:x17 op1val:0x4000000; immval:0x6
TEST_CI_OP( c.addi, x17, 0x00000000, 0x4000000, 0x6, x7, 4, x15)

inst_2:
// rd==x25, rs1_val > 0 and imm_val < 0, rs1_val == 512
// opcode:c.addi; op1:x25; dest:x25 op1val:0x200; immval:-0x1
TEST_CI_OP( c.addi, x25, 0x00000000, 0x200, -0x1, x7, 8, x15)

inst_3:
// rd==x24, rs1_val < 0 and imm_val > 0, rs1_val == -33554433
// opcode:c.addi; op1:x24; dest:x24 op1val:-0x2000001; immval:0x6
TEST_CI_OP( c.addi, x24, 0x00000000, -0x2000001, 0x6, x7, 12, x15)

inst_4:
// rd==x3, rs1_val < 0 and imm_val < 0, rs1_val == -262145
// opcode:c.addi; op1:x3; dest:x3 op1val:-0x40001; immval:-0x8
TEST_CI_OP( c.addi, x3, 0x00000000, -0x40001, -0x8, x7, 16, x15)

inst_5:
// rd==x1, imm_val == (-2**(6-1)), imm_val == -32, rs1_val == 8192
// opcode:c.addi; op1:x1; dest:x1 op1val:0x2000; immval:-0x20
TEST_CI_OP( c.addi, x1, 0x00000000, 0x2000, -0x20, x7, 20, x15)

inst_6:
// rd==x22, imm_val == 0, rs1_val == 32
// opcode:c.addi; op1:x22; dest:x22 op1val:0x20; immval:0x0
TEST_CI_OP( c.addi, x22, 0x00000000, 0x20, 0x0, x7, 24, x15)

inst_7:
// rd==x6, imm_val == (2**(6-1)-1), imm_val == 31
// opcode:c.addi; op1:x6; dest:x6 op1val:0x5; immval:0x1f
TEST_CI_OP( c.addi, x6, 0x00000000, 0x5, 0x1f, x7, 28, x15)

inst_8:
// rd==x29, imm_val == 1, rs1_val == -16385
// opcode:c.addi; op1:x29; dest:x29 op1val:-0x4001; immval:0x1
TEST_CI_OP( c.addi, x29, 0x00000000, -0x4001, 0x1, x7, 32, x15)

inst_9:
// rd==x19, rs1_val == (-2**(xlen-1)), rs1_val == -2147483648, imm_val == -2
// opcode:c.addi; op1:x19; dest:x19 op1val:-0x80000000; immval:-0x2
TEST_CI_OP( c.addi, x19, 0x00000000, -0x80000000, -0x2, x7, 36, x15)

inst_10:
// rd==x12, rs1_val == 0, rs1_val==0 and imm_val==4
// opcode:c.addi; op1:x12; dest:x12 op1val:0x0; immval:0x4
TEST_CI_OP( c.addi, x12, 0x00000000, 0x0, 0x4, x7, 40, x15)

inst_11:
// rd==x4, rs1_val == (2**(xlen-1)-1), rs1_val == 2147483647, imm_val == 16
// opcode:c.addi; op1:x4; dest:x4 op1val:0x7fffffff; immval:0x10
TEST_CI_OP( c.addi, x4, 0x00000000, 0x7fffffff, 0x10, x7, 44, x15)

inst_12:
// rd==x21, rs1_val == 1, 
// opcode:c.addi; op1:x21; dest:x21 op1val:0x1; immval:-0x1
TEST_CI_OP( c.addi, x21, 0x00000000, 0x1, -0x1, x7, 48, x15)

inst_13:
// rd==x10, imm_val == 2, rs1_val==0 and imm_val==2
// opcode:c.addi; op1:x10; dest:x10 op1val:0x0; immval:0x2
TEST_CI_OP( c.addi, x10, 0x00000000, 0x0, 0x2, x7, 52, x15)

inst_14:
// rd==x14, imm_val == 8, rs1_val == -2
// opcode:c.addi; op1:x14; dest:x14 op1val:-0x2; immval:0x8
TEST_CI_OP( c.addi, x14, 0x00000000, -0x2, 0x8, x7, 56, x15)

inst_15:
// rd==x20, imm_val == -3, rs1_val == -16777217
// opcode:c.addi; op1:x20; dest:x20 op1val:-0x1000001; immval:-0x3
TEST_CI_OP( c.addi, x20, 0x00000000, -0x1000001, -0x3, x7, 60, x15)

inst_16:
// rd==x5, imm_val == -5, rs1_val == -67108865
// opcode:c.addi; op1:x5; dest:x5 op1val:-0x4000001; immval:-0x5
TEST_CI_OP( c.addi, x5, 0x00000000, -0x4000001, -0x5, x7, 64, x15)

inst_17:
// rd==x11, imm_val == -9, rs1_val == 16
// opcode:c.addi; op1:x11; dest:x11 op1val:0x10; immval:-0x9
TEST_CI_OP( c.addi, x11, 0x00000000, 0x10, -0x9, x7, 68, x15)

inst_18:
// rd==x9, imm_val == -17, 
// opcode:c.addi; op1:x9; dest:x9 op1val:-0x40000000; immval:-0x11
TEST_CI_OP( c.addi, x9, 0x00000000, -0x40000000, -0x11, x7, 72, x15)

inst_19:
// rd==x30, imm_val == 21, rs1_val == 32768
// opcode:c.addi; op1:x30; dest:x30 op1val:0x8000; immval:0x15
TEST_CI_OP( c.addi, x30, 0x00000000, 0x8000, 0x15, x7, 76, x15)

inst_20:
// rd==x31, imm_val == -22, 
// opcode:c.addi; op1:x31; dest:x31 op1val:-0x1; immval:-0x16
TEST_CI_OP( c.addi, x31, 0x00000000, -0x1, -0x16, x7, 80, x15)

inst_21:
// rd==x23, rs1_val == 2, rs1_val==2 and imm_val==4
// opcode:c.addi; op1:x23; dest:x23 op1val:0x2; immval:0x4
TEST_CI_OP( c.addi, x23, 0x00000000, 0x2, 0x4, x7, 84, x15)

inst_22:
// rd==x2, rs1_val == 8, 
// opcode:c.addi; op1:x2; dest:x2 op1val:0x8; immval:0x9
TEST_CI_OP( c.addi, x2, 0x00000000, 0x8, 0x9, x7, 88, x15)

inst_23:
// rd==x13, rs1_val == 64, 
// opcode:c.addi; op1:x13; dest:x13 op1val:0x40; immval:0x4
TEST_CI_OP( c.addi, x13, 0x00000000, 0x40, 0x4, x7, 92, x15)

inst_24:
// rd==x8, rs1_val == 128, 
// opcode:c.addi; op1:x8; dest:x8 op1val:0x80; immval:0x4
TEST_CI_OP( c.addi, x8, 0x00000000, 0x80, 0x4, x7, 96, x15)

inst_25:
// rd==x27, rs1_val == 256, 
// opcode:c.addi; op1:x27; dest:x27 op1val:0x100; immval:0x15
TEST_CI_OP( c.addi, x27, 0x00000000, 0x100, 0x15, x7, 100, x15)

inst_26:
// rd==x16, rs1_val == 1024, 
// opcode:c.addi; op1:x16; dest:x16 op1val:0x400; immval:-0x4
TEST_CI_OP( c.addi, x16, 0x00000000, 0x400, -0x4, x7, 104, x15)

inst_27:
// rd==x28, rs1_val == 2048, 
// opcode:c.addi; op1:x28; dest:x28 op1val:0x800; immval:-0x5
TEST_CI_OP( c.addi, x28, 0x00000000, 0x800, -0x5, x7, 108, x2)
RVTEST_SIGBASE( x1,signature_x1_0)

inst_28:
// rd==x15, rs1_val == 4096, 
// opcode:c.addi; op1:x15; dest:x15 op1val:0x1000; immval:0x9
TEST_CI_OP( c.addi, x15, 0x00000000, 0x1000, 0x9, x1, 0, x2)

inst_29:
// rd==x26, rs1_val == 16384, 
// opcode:c.addi; op1:x26; dest:x26 op1val:0x4000; immval:-0x2
TEST_CI_OP( c.addi, x26, 0x00000000, 0x4000, -0x2, x1, 4, x2)

inst_30:
// rd==x7, rs1_val == 65536, 
// opcode:c.addi; op1:x7; dest:x7 op1val:0x10000; immval:0xb
TEST_CI_OP( c.addi, x7, 0x00000000, 0x10000, 0xb, x1, 8, x2)

inst_31:
// rs1_val == 131072, 
// opcode:c.addi; op1:x10; dest:x10 op1val:0x20000; immval:0x6
TEST_CI_OP( c.addi, x10, 0x00000000, 0x20000, 0x6, x1, 12, x2)

inst_32:
// rs1_val == 262144, 
// opcode:c.addi; op1:x10; dest:x10 op1val:0x40000; immval:0xa
TEST_CI_OP( c.addi, x10, 0x00000000, 0x40000, 0xa, x1, 16, x2)

inst_33:
// rs1_val == 524288, 
// opcode:c.addi; op1:x10; dest:x10 op1val:0x80000; immval:-0x3
TEST_CI_OP( c.addi, x10, 0x00000000, 0x80000, -0x3, x1, 20, x2)

inst_34:
// rs1_val == 1048576, 
// opcode:c.addi; op1:x10; dest:x10 op1val:0x100000; immval:0x5
TEST_CI_OP( c.addi, x10, 0x00000000, 0x100000, 0x5, x1, 24, x2)

inst_35:
// rs1_val == 2097152, 
// opcode:c.addi; op1:x10; dest:x10 op1val:0x200000; immval:-0x3
TEST_CI_OP( c.addi, x10, 0x00000000, 0x200000, -0x3, x1, 28, x2)

inst_36:
// rs1_val == 4194304, 
// opcode:c.addi; op1:x10; dest:x10 op1val:0x400000; immval:-0x8
TEST_CI_OP( c.addi, x10, 0x00000000, 0x400000, -0x8, x1, 32, x2)

inst_37:
// rs1_val == 8388608, 
// opcode:c.addi; op1:x10; dest:x10 op1val:0x800000; immval:-0x10
TEST_CI_OP( c.addi, x10, 0x00000000, 0x800000, -0x10, x1, 36, x2)

inst_38:
// rs1_val == 16777216, 
// opcode:c.addi; op1:x10; dest:x10 op1val:0x1000000; immval:0x15
TEST_CI_OP( c.addi, x10, 0x00000000, 0x1000000, 0x15, x1, 40, x2)

inst_39:
// rs1_val == 33554432, 
// opcode:c.addi; op1:x10; dest:x10 op1val:0x2000000; immval:0x5
TEST_CI_OP( c.addi, x10, 0x00000000, 0x2000000, 0x5, x1, 44, x2)

inst_40:
// rs1_val == 134217728, 
// opcode:c.addi; op1:x10; dest:x10 op1val:0x8000000; immval:-0x16
TEST_CI_OP( c.addi, x10, 0x00000000, 0x8000000, -0x16, x1, 48, x2)

inst_41:
// rs1_val == 268435456, 
// opcode:c.addi; op1:x10; dest:x10 op1val:0x10000000; immval:-0x7
TEST_CI_OP( c.addi, x10, 0x00000000, 0x10000000, -0x7, x1, 52, x2)

inst_42:
// rs1_val == 536870912, 
// opcode:c.addi; op1:x10; dest:x10 op1val:0x20000000; immval:-0x11
TEST_CI_OP( c.addi, x10, 0x00000000, 0x20000000, -0x11, x1, 56, x2)

inst_43:
// rs1_val == 1073741824, 
// opcode:c.addi; op1:x10; dest:x10 op1val:0x40000000; immval:-0x16
TEST_CI_OP( c.addi, x10, 0x00000000, 0x40000000, -0x16, x1, 60, x2)

inst_44:
// rs1_val == -3, 
// opcode:c.addi; op1:x10; dest:x10 op1val:-0x3; immval:0x5
TEST_CI_OP( c.addi, x10, 0x00000000, -0x3, 0x5, x1, 64, x2)

inst_45:
// rs1_val == -5, 
// opcode:c.addi; op1:x10; dest:x10 op1val:-0x5; immval:0x4
TEST_CI_OP( c.addi, x10, 0x00000000, -0x5, 0x4, x1, 68, x2)

inst_46:
// rs1_val == -9, 
// opcode:c.addi; op1:x10; dest:x10 op1val:-0x9; immval:-0x6
TEST_CI_OP( c.addi, x10, 0x00000000, -0x9, -0x6, x1, 72, x2)

inst_47:
// rs1_val == -17, 
// opcode:c.addi; op1:x10; dest:x10 op1val:-0x11; immval:0x7
TEST_CI_OP( c.addi, x10, 0x00000000, -0x11, 0x7, x1, 76, x2)

inst_48:
// rs1_val == -33, 
// opcode:c.addi; op1:x10; dest:x10 op1val:-0x21; immval:-0x2
TEST_CI_OP( c.addi, x10, 0x00000000, -0x21, -0x2, x1, 80, x2)

inst_49:
// rs1_val == -65, 
// opcode:c.addi; op1:x10; dest:x10 op1val:-0x41; immval:0x3
TEST_CI_OP( c.addi, x10, 0x00000000, -0x41, 0x3, x1, 84, x2)

inst_50:
// rs1_val == -129, 
// opcode:c.addi; op1:x10; dest:x10 op1val:-0x81; immval:-0x16
TEST_CI_OP( c.addi, x10, 0x00000000, -0x81, -0x16, x1, 88, x2)

inst_51:
// rs1_val == -257, 
// opcode:c.addi; op1:x10; dest:x10 op1val:-0x101; immval:-0x4
TEST_CI_OP( c.addi, x10, 0x00000000, -0x101, -0x4, x1, 92, x2)

inst_52:
// rs1_val == -513, 
// opcode:c.addi; op1:x10; dest:x10 op1val:-0x201; immval:-0x16
TEST_CI_OP( c.addi, x10, 0x00000000, -0x201, -0x16, x1, 96, x2)

inst_53:
// rs1_val == -1025, 
// opcode:c.addi; op1:x10; dest:x10 op1val:-0x401; immval:0x6
TEST_CI_OP( c.addi, x10, 0x00000000, -0x401, 0x6, x1, 100, x2)

inst_54:
// rs1_val == -2049, 
// opcode:c.addi; op1:x10; dest:x10 op1val:-0x801; immval:0x9
TEST_CI_OP( c.addi, x10, 0x00000000, -0x801, 0x9, x1, 104, x2)

inst_55:
// rs1_val == -4097, 
// opcode:c.addi; op1:x10; dest:x10 op1val:-0x1001; immval:0x3
TEST_CI_OP( c.addi, x10, 0x00000000, -0x1001, 0x3, x1, 108, x2)

inst_56:
// rs1_val == -8193, 
// opcode:c.addi; op1:x10; dest:x10 op1val:-0x2001; immval:-0x1
TEST_CI_OP( c.addi, x10, 0x00000000, -0x2001, -0x1, x1, 112, x2)

inst_57:
// rs1_val == -32769, 
// opcode:c.addi; op1:x10; dest:x10 op1val:-0x8001; immval:0xb
TEST_CI_OP( c.addi, x10, 0x00000000, -0x8001, 0xb, x1, 116, x2)

inst_58:
// rs1_val == -65537, 
// opcode:c.addi; op1:x10; dest:x10 op1val:-0x10001; immval:0x4
TEST_CI_OP( c.addi, x10, 0x00000000, -0x10001, 0x4, x1, 120, x2)

inst_59:
// rs1_val == -131073, 
// opcode:c.addi; op1:x10; dest:x10 op1val:-0x20001; immval:0x7
TEST_CI_OP( c.addi, x10, 0x00000000, -0x20001, 0x7, x1, 124, x2)

inst_60:
// rs1_val == -524289, 
// opcode:c.addi; op1:x10; dest:x10 op1val:-0x80001; immval:-0x7
TEST_CI_OP( c.addi, x10, 0x00000000, -0x80001, -0x7, x1, 128, x2)

inst_61:
// rs1_val == -1048577, 
// opcode:c.addi; op1:x10; dest:x10 op1val:-0x100001; immval:-0x2
TEST_CI_OP( c.addi, x10, 0x00000000, -0x100001, -0x2, x1, 132, x2)

inst_62:
// rs1_val == -2097153, 
// opcode:c.addi; op1:x10; dest:x10 op1val:-0x200001; immval:-0x1
TEST_CI_OP( c.addi, x10, 0x00000000, -0x200001, -0x1, x1, 136, x2)

inst_63:
// rs1_val == -4194305, 
// opcode:c.addi; op1:x10; dest:x10 op1val:-0x400001; immval:0x4
TEST_CI_OP( c.addi, x10, 0x00000000, -0x400001, 0x4, x1, 140, x2)

inst_64:
// rs1_val == -8388609, 
// opcode:c.addi; op1:x10; dest:x10 op1val:-0x800001; immval:0x6
TEST_CI_OP( c.addi, x10, 0x00000000, -0x800001, 0x6, x1, 144, x2)

inst_65:
// rs1_val == -134217729, 
// opcode:c.addi; op1:x10; dest:x10 op1val:-0x8000001; immval:-0x20
TEST_CI_OP( c.addi, x10, 0x00000000, -0x8000001, -0x20, x1, 148, x2)

inst_66:
// rs1_val == -268435457, 
// opcode:c.addi; op1:x10; dest:x10 op1val:-0x10000001; immval:0x4
TEST_CI_OP( c.addi, x10, 0x00000000, -0x10000001, 0x4, x1, 152, x2)

inst_67:
// rs1_val == -536870913, 
// opcode:c.addi; op1:x10; dest:x10 op1val:-0x20000001; immval:0x3
TEST_CI_OP( c.addi, x10, 0x00000000, -0x20000001, 0x3, x1, 156, x2)

inst_68:
// rs1_val == -1073741825, 
// opcode:c.addi; op1:x10; dest:x10 op1val:-0x40000001; immval:0x10
TEST_CI_OP( c.addi, x10, 0x00000000, -0x40000001, 0x10, x1, 160, x2)

inst_69:
// rs1_val == 1431655765, rs1_val==1431655765 and imm_val==7
// opcode:c.addi; op1:x10; dest:x10 op1val:0x55555555; immval:0x7
TEST_CI_OP( c.addi, x10, 0x00000000, 0x55555555, 0x7, x1, 164, x2)

inst_70:
// rs1_val == -1431655766, rs1_val==-1431655766 and imm_val==11
// opcode:c.addi; op1:x10; dest:x10 op1val:-0x55555556; immval:0xb
TEST_CI_OP( c.addi, x10, 0x00000000, -0x55555556, 0xb, x1, 168, x2)

inst_71:
// rs1_val==3 and imm_val==3, 
// opcode:c.addi; op1:x10; dest:x10 op1val:0x3; immval:0x3
TEST_CI_OP( c.addi, x10, 0x00000000, 0x3, 0x3, x1, 172, x2)

inst_72:
// rs1_val==3 and imm_val==5, 
// opcode:c.addi; op1:x10; dest:x10 op1val:0x3; immval:0x5
TEST_CI_OP( c.addi, x10, 0x00000000, 0x3, 0x5, x1, 176, x2)

inst_73:
// rs1_val==3 and imm_val==10, 
// opcode:c.addi; op1:x10; dest:x10 op1val:0x3; immval:0xa
TEST_CI_OP( c.addi, x10, 0x00000000, 0x3, 0xa, x1, 180, x2)

inst_74:
// rs1_val==3 and imm_val==6, 
// opcode:c.addi; op1:x10; dest:x10 op1val:0x3; immval:0x6
TEST_CI_OP( c.addi, x10, 0x00000000, 0x3, 0x6, x1, 184, x2)

inst_75:
// rs1_val==3 and imm_val==-2, 
// opcode:c.addi; op1:x10; dest:x10 op1val:0x3; immval:-0x2
TEST_CI_OP( c.addi, x10, 0x00000000, 0x3, -0x2, x1, 188, x2)

inst_76:
// rs1_val==3 and imm_val==-5, 
// opcode:c.addi; op1:x10; dest:x10 op1val:0x3; immval:-0x5
TEST_CI_OP( c.addi, x10, 0x00000000, 0x3, -0x5, x1, 192, x2)

inst_77:
// rs1_val==3 and imm_val==2, 
// opcode:c.addi; op1:x10; dest:x10 op1val:0x3; immval:0x2
TEST_CI_OP( c.addi, x10, 0x00000000, 0x3, 0x2, x1, 196, x2)

inst_78:
// rs1_val==3 and imm_val==4, 
// opcode:c.addi; op1:x10; dest:x10 op1val:0x3; immval:0x4
TEST_CI_OP( c.addi, x10, 0x00000000, 0x3, 0x4, x1, 200, x2)

inst_79:
// rs1_val==3 and imm_val==9, 
// opcode:c.addi; op1:x10; dest:x10 op1val:0x3; immval:0x9
TEST_CI_OP( c.addi, x10, 0x00000000, 0x3, 0x9, x1, 204, x2)

inst_80:
// rs1_val==3 and imm_val==0, 
// opcode:c.addi; op1:x10; dest:x10 op1val:0x3; immval:0x0
TEST_CI_OP( c.addi, x10, 0x00000000, 0x3, 0x0, x1, 208, x2)

inst_81:
// rs1_val==3 and imm_val==11, 
// opcode:c.addi; op1:x10; dest:x10 op1val:0x3; immval:0xb
TEST_CI_OP( c.addi, x10, 0x00000000, 0x3, 0xb, x1, 212, x2)

inst_82:
// rs1_val==3 and imm_val==7, 
// opcode:c.addi; op1:x10; dest:x10 op1val:0x3; immval:0x7
TEST_CI_OP( c.addi, x10, 0x00000000, 0x3, 0x7, x1, 216, x2)

inst_83:
// rs1_val==3 and imm_val==-1, 
// opcode:c.addi; op1:x10; dest:x10 op1val:0x3; immval:-0x1
TEST_CI_OP( c.addi, x10, 0x00000000, 0x3, -0x1, x1, 220, x2)

inst_84:
// rs1_val==3 and imm_val==-4, 
// opcode:c.addi; op1:x10; dest:x10 op1val:0x3; immval:-0x4
TEST_CI_OP( c.addi, x10, 0x00000000, 0x3, -0x4, x1, 224, x2)

inst_85:
// rs1_val==1431655765 and imm_val==3, 
// opcode:c.addi; op1:x10; dest:x10 op1val:0x55555555; immval:0x3
TEST_CI_OP( c.addi, x10, 0x00000000, 0x55555555, 0x3, x1, 228, x2)

inst_86:
// rs1_val==1431655765 and imm_val==5, 
// opcode:c.addi; op1:x10; dest:x10 op1val:0x55555555; immval:0x5
TEST_CI_OP( c.addi, x10, 0x00000000, 0x55555555, 0x5, x1, 232, x2)

inst_87:
// rs1_val==1431655765 and imm_val==10, 
// opcode:c.addi; op1:x10; dest:x10 op1val:0x55555555; immval:0xa
TEST_CI_OP( c.addi, x10, 0x00000000, 0x55555555, 0xa, x1, 236, x2)

inst_88:
// rs1_val==1431655765 and imm_val==6, 
// opcode:c.addi; op1:x10; dest:x10 op1val:0x55555555; immval:0x6
TEST_CI_OP( c.addi, x10, 0x00000000, 0x55555555, 0x6, x1, 240, x2)

inst_89:
// rs1_val==1431655765 and imm_val==-2, 
// opcode:c.addi; op1:x10; dest:x10 op1val:0x55555555; immval:-0x2
TEST_CI_OP( c.addi, x10, 0x00000000, 0x55555555, -0x2, x1, 244, x2)

inst_90:
// rs1_val==1431655765 and imm_val==-5, 
// opcode:c.addi; op1:x10; dest:x10 op1val:0x55555555; immval:-0x5
TEST_CI_OP( c.addi, x10, 0x00000000, 0x55555555, -0x5, x1, 248, x2)

inst_91:
// rs1_val==1431655765 and imm_val==2, 
// opcode:c.addi; op1:x10; dest:x10 op1val:0x55555555; immval:0x2
TEST_CI_OP( c.addi, x10, 0x00000000, 0x55555555, 0x2, x1, 252, x2)

inst_92:
// rs1_val==1431655765 and imm_val==4, 
// opcode:c.addi; op1:x10; dest:x10 op1val:0x55555555; immval:0x4
TEST_CI_OP( c.addi, x10, 0x00000000, 0x55555555, 0x4, x1, 256, x2)

inst_93:
// rs1_val==1431655765 and imm_val==9, 
// opcode:c.addi; op1:x10; dest:x10 op1val:0x55555555; immval:0x9
TEST_CI_OP( c.addi, x10, 0x00000000, 0x55555555, 0x9, x1, 260, x2)

inst_94:
// rs1_val==1431655765 and imm_val==0, 
// opcode:c.addi; op1:x10; dest:x10 op1val:0x55555555; immval:0x0
TEST_CI_OP( c.addi, x10, 0x00000000, 0x55555555, 0x0, x1, 264, x2)

inst_95:
// rs1_val==1431655765 and imm_val==11, 
// opcode:c.addi; op1:x10; dest:x10 op1val:0x55555555; immval:0xb
TEST_CI_OP( c.addi, x10, 0x00000000, 0x55555555, 0xb, x1, 268, x2)

inst_96:
// rs1_val==1431655765 and imm_val==-1, 
// opcode:c.addi; op1:x10; dest:x10 op1val:0x55555555; immval:-0x1
TEST_CI_OP( c.addi, x10, 0x00000000, 0x55555555, -0x1, x1, 272, x2)

inst_97:
// rs1_val==1431655765 and imm_val==-4, 
// opcode:c.addi; op1:x10; dest:x10 op1val:0x55555555; immval:-0x4
TEST_CI_OP( c.addi, x10, 0x00000000, 0x55555555, -0x4, x1, 276, x2)

inst_98:
// rs1_val==-1431655766 and imm_val==3, 
// opcode:c.addi; op1:x10; dest:x10 op1val:-0x55555556; immval:0x3
TEST_CI_OP( c.addi, x10, 0x00000000, -0x55555556, 0x3, x1, 280, x2)

inst_99:
// rs1_val==-1431655766 and imm_val==5, 
// opcode:c.addi; op1:x10; dest:x10 op1val:-0x55555556; immval:0x5
TEST_CI_OP( c.addi, x10, 0x00000000, -0x55555556, 0x5, x1, 284, x2)

inst_100:
// rs1_val==-1431655766 and imm_val==10, 
// opcode:c.addi; op1:x10; dest:x10 op1val:-0x55555556; immval:0xa
TEST_CI_OP( c.addi, x10, 0x00000000, -0x55555556, 0xa, x1, 288, x2)

inst_101:
// rs1_val==-1431655766 and imm_val==6, 
// opcode:c.addi; op1:x10; dest:x10 op1val:-0x55555556; immval:0x6
TEST_CI_OP( c.addi, x10, 0x00000000, -0x55555556, 0x6, x1, 292, x2)

inst_102:
// rs1_val==-1431655766 and imm_val==-2, 
// opcode:c.addi; op1:x10; dest:x10 op1val:-0x55555556; immval:-0x2
TEST_CI_OP( c.addi, x10, 0x00000000, -0x55555556, -0x2, x1, 296, x2)

inst_103:
// rs1_val==-1431655766 and imm_val==-5, 
// opcode:c.addi; op1:x10; dest:x10 op1val:-0x55555556; immval:-0x5
TEST_CI_OP( c.addi, x10, 0x00000000, -0x55555556, -0x5, x1, 300, x2)

inst_104:
// rs1_val==-1431655766 and imm_val==2, 
// opcode:c.addi; op1:x10; dest:x10 op1val:-0x55555556; immval:0x2
TEST_CI_OP( c.addi, x10, 0x00000000, -0x55555556, 0x2, x1, 304, x2)

inst_105:
// rs1_val==-1431655766 and imm_val==4, 
// opcode:c.addi; op1:x10; dest:x10 op1val:-0x55555556; immval:0x4
TEST_CI_OP( c.addi, x10, 0x00000000, -0x55555556, 0x4, x1, 308, x2)

inst_106:
// rs1_val==-1431655766 and imm_val==9, 
// opcode:c.addi; op1:x10; dest:x10 op1val:-0x55555556; immval:0x9
TEST_CI_OP( c.addi, x10, 0x00000000, -0x55555556, 0x9, x1, 312, x2)

inst_107:
// rs1_val==-1431655766 and imm_val==0, 
// opcode:c.addi; op1:x10; dest:x10 op1val:-0x55555556; immval:0x0
TEST_CI_OP( c.addi, x10, 0x00000000, -0x55555556, 0x0, x1, 316, x2)

inst_108:
// rs1_val==-1431655766 and imm_val==7, 
// opcode:c.addi; op1:x10; dest:x10 op1val:-0x55555556; immval:0x7
TEST_CI_OP( c.addi, x10, 0x00000000, -0x55555556, 0x7, x1, 320, x2)

inst_109:
// rs1_val==-1431655766 and imm_val==-1, 
// opcode:c.addi; op1:x10; dest:x10 op1val:-0x55555556; immval:-0x1
TEST_CI_OP( c.addi, x10, 0x00000000, -0x55555556, -0x1, x1, 324, x2)

inst_110:
// rs1_val==-1431655766 and imm_val==-4, 
// opcode:c.addi; op1:x10; dest:x10 op1val:-0x55555556; immval:-0x4
TEST_CI_OP( c.addi, x10, 0x00000000, -0x55555556, -0x4, x1, 328, x2)

inst_111:
// rs1_val==5 and imm_val==3, 
// opcode:c.addi; op1:x10; dest:x10 op1val:0x5; immval:0x3
TEST_CI_OP( c.addi, x10, 0x00000000, 0x5, 0x3, x1, 332, x2)

inst_112:
// rs1_val==5 and imm_val==5, 
// opcode:c.addi; op1:x10; dest:x10 op1val:0x5; immval:0x5
TEST_CI_OP( c.addi, x10, 0x00000000, 0x5, 0x5, x1, 336, x2)

inst_113:
// rs1_val==5 and imm_val==10, 
// opcode:c.addi; op1:x10; dest:x10 op1val:0x5; immval:0xa
TEST_CI_OP( c.addi, x10, 0x00000000, 0x5, 0xa, x1, 340, x2)

inst_114:
// rs1_val==5 and imm_val==6, 
// opcode:c.addi; op1:x10; dest:x10 op1val:0x5; immval:0x6
TEST_CI_OP( c.addi, x10, 0x00000000, 0x5, 0x6, x1, 344, x2)

inst_115:
// rs1_val==5 and imm_val==-2, 
// opcode:c.addi; op1:x10; dest:x10 op1val:0x5; immval:-0x2
TEST_CI_OP( c.addi, x10, 0x00000000, 0x5, -0x2, x1, 348, x2)

inst_116:
// rs1_val==5 and imm_val==-5, 
// opcode:c.addi; op1:x10; dest:x10 op1val:0x5; immval:-0x5
TEST_CI_OP( c.addi, x10, 0x00000000, 0x5, -0x5, x1, 352, x2)

inst_117:
// rs1_val==5 and imm_val==2, 
// opcode:c.addi; op1:x10; dest:x10 op1val:0x5; immval:0x2
TEST_CI_OP( c.addi, x10, 0x00000000, 0x5, 0x2, x1, 356, x2)

inst_118:
// rs1_val==5 and imm_val==4, 
// opcode:c.addi; op1:x10; dest:x10 op1val:0x5; immval:0x4
TEST_CI_OP( c.addi, x10, 0x00000000, 0x5, 0x4, x1, 360, x2)

inst_119:
// rs1_val==5 and imm_val==9, 
// opcode:c.addi; op1:x10; dest:x10 op1val:0x5; immval:0x9
TEST_CI_OP( c.addi, x10, 0x00000000, 0x5, 0x9, x1, 364, x2)

inst_120:
// rs1_val==5 and imm_val==0, 
// opcode:c.addi; op1:x10; dest:x10 op1val:0x5; immval:0x0
TEST_CI_OP( c.addi, x10, 0x00000000, 0x5, 0x0, x1, 368, x2)

inst_121:
// rs1_val==5 and imm_val==11, 
// opcode:c.addi; op1:x10; dest:x10 op1val:0x5; immval:0xb
TEST_CI_OP( c.addi, x10, 0x00000000, 0x5, 0xb, x1, 372, x2)

inst_122:
// rs1_val==5 and imm_val==7, 
// opcode:c.addi; op1:x10; dest:x10 op1val:0x5; immval:0x7
TEST_CI_OP( c.addi, x10, 0x00000000, 0x5, 0x7, x1, 376, x2)

inst_123:
// rs1_val==5 and imm_val==-1, 
// opcode:c.addi; op1:x10; dest:x10 op1val:0x5; immval:-0x1
TEST_CI_OP( c.addi, x10, 0x00000000, 0x5, -0x1, x1, 380, x2)

inst_124:
// rs1_val==5 and imm_val==-4, 
// opcode:c.addi; op1:x10; dest:x10 op1val:0x5; immval:-0x4
TEST_CI_OP( c.addi, x10, 0x00000000, 0x5, -0x4, x1, 384, x2)

inst_125:
// rs1_val==858993459 and imm_val==3, 
// opcode:c.addi; op1:x10; dest:x10 op1val:0x33333333; immval:0x3
TEST_CI_OP( c.addi, x10, 0x00000000, 0x33333333, 0x3, x1, 388, x2)

inst_126:
// rs1_val==858993459 and imm_val==5, 
// opcode:c.addi; op1:x10; dest:x10 op1val:0x33333333; immval:0x5
TEST_CI_OP( c.addi, x10, 0x00000000, 0x33333333, 0x5, x1, 392, x2)

inst_127:
// rs1_val==858993459 and imm_val==10, 
// opcode:c.addi; op1:x10; dest:x10 op1val:0x33333333; immval:0xa
TEST_CI_OP( c.addi, x10, 0x00000000, 0x33333333, 0xa, x1, 396, x2)

inst_128:
// rs1_val==858993459 and imm_val==6, 
// opcode:c.addi; op1:x10; dest:x10 op1val:0x33333333; immval:0x6
TEST_CI_OP( c.addi, x10, 0x00000000, 0x33333333, 0x6, x1, 400, x2)

inst_129:
// rs1_val==858993459 and imm_val==-2, 
// opcode:c.addi; op1:x10; dest:x10 op1val:0x33333333; immval:-0x2
TEST_CI_OP( c.addi, x10, 0x00000000, 0x33333333, -0x2, x1, 404, x2)

inst_130:
// rs1_val==858993459 and imm_val==-5, 
// opcode:c.addi; op1:x10; dest:x10 op1val:0x33333333; immval:-0x5
TEST_CI_OP( c.addi, x10, 0x00000000, 0x33333333, -0x5, x1, 408, x2)

inst_131:
// rs1_val==858993459 and imm_val==2, 
// opcode:c.addi; op1:x10; dest:x10 op1val:0x33333333; immval:0x2
TEST_CI_OP( c.addi, x10, 0x00000000, 0x33333333, 0x2, x1, 412, x2)

inst_132:
// rs1_val==858993459 and imm_val==4, 
// opcode:c.addi; op1:x10; dest:x10 op1val:0x33333333; immval:0x4
TEST_CI_OP( c.addi, x10, 0x00000000, 0x33333333, 0x4, x1, 416, x2)

inst_133:
// rs1_val==858993459 and imm_val==9, 
// opcode:c.addi; op1:x10; dest:x10 op1val:0x33333333; immval:0x9
TEST_CI_OP( c.addi, x10, 0x00000000, 0x33333333, 0x9, x1, 420, x2)

inst_134:
// rs1_val==858993459 and imm_val==0, 
// opcode:c.addi; op1:x10; dest:x10 op1val:0x33333333; immval:0x0
TEST_CI_OP( c.addi, x10, 0x00000000, 0x33333333, 0x0, x1, 424, x2)

inst_135:
// rs1_val==858993459 and imm_val==11, 
// opcode:c.addi; op1:x10; dest:x10 op1val:0x33333333; immval:0xb
TEST_CI_OP( c.addi, x10, 0x00000000, 0x33333333, 0xb, x1, 428, x2)

inst_136:
// rs1_val==858993459 and imm_val==7, 
// opcode:c.addi; op1:x10; dest:x10 op1val:0x33333333; immval:0x7
TEST_CI_OP( c.addi, x10, 0x00000000, 0x33333333, 0x7, x1, 432, x2)

inst_137:
// rs1_val==858993459 and imm_val==-1, 
// opcode:c.addi; op1:x10; dest:x10 op1val:0x33333333; immval:-0x1
TEST_CI_OP( c.addi, x10, 0x00000000, 0x33333333, -0x1, x1, 436, x2)

inst_138:
// rs1_val==858993459 and imm_val==-4, 
// opcode:c.addi; op1:x10; dest:x10 op1val:0x33333333; immval:-0x4
TEST_CI_OP( c.addi, x10, 0x00000000, 0x33333333, -0x4, x1, 440, x2)

inst_139:
// rs1_val==1717986918 and imm_val==3, 
// opcode:c.addi; op1:x10; dest:x10 op1val:0x66666666; immval:0x3
TEST_CI_OP( c.addi, x10, 0x00000000, 0x66666666, 0x3, x1, 444, x2)

inst_140:
// rs1_val==1717986918 and imm_val==5, 
// opcode:c.addi; op1:x10; dest:x10 op1val:0x66666666; immval:0x5
TEST_CI_OP( c.addi, x10, 0x00000000, 0x66666666, 0x5, x1, 448, x2)

inst_141:
// rs1_val==1717986918 and imm_val==10, 
// opcode:c.addi; op1:x10; dest:x10 op1val:0x66666666; immval:0xa
TEST_CI_OP( c.addi, x10, 0x00000000, 0x66666666, 0xa, x1, 452, x2)

inst_142:
// rs1_val==1717986918 and imm_val==6, 
// opcode:c.addi; op1:x10; dest:x10 op1val:0x66666666; immval:0x6
TEST_CI_OP( c.addi, x10, 0x00000000, 0x66666666, 0x6, x1, 456, x2)

inst_143:
// rs1_val==1717986918 and imm_val==-2, 
// opcode:c.addi; op1:x10; dest:x10 op1val:0x66666666; immval:-0x2
TEST_CI_OP( c.addi, x10, 0x00000000, 0x66666666, -0x2, x1, 460, x2)

inst_144:
// rs1_val==1717986918 and imm_val==-5, 
// opcode:c.addi; op1:x10; dest:x10 op1val:0x66666666; immval:-0x5
TEST_CI_OP( c.addi, x10, 0x00000000, 0x66666666, -0x5, x1, 464, x2)

inst_145:
// rs1_val==1717986918 and imm_val==2, 
// opcode:c.addi; op1:x10; dest:x10 op1val:0x66666666; immval:0x2
TEST_CI_OP( c.addi, x10, 0x00000000, 0x66666666, 0x2, x1, 468, x2)

inst_146:
// rs1_val==1717986918 and imm_val==4, 
// opcode:c.addi; op1:x10; dest:x10 op1val:0x66666666; immval:0x4
TEST_CI_OP( c.addi, x10, 0x00000000, 0x66666666, 0x4, x1, 472, x2)

inst_147:
// rs1_val==1717986918 and imm_val==9, 
// opcode:c.addi; op1:x10; dest:x10 op1val:0x66666666; immval:0x9
TEST_CI_OP( c.addi, x10, 0x00000000, 0x66666666, 0x9, x1, 476, x2)

inst_148:
// rs1_val==1717986918 and imm_val==0, 
// opcode:c.addi; op1:x10; dest:x10 op1val:0x66666666; immval:0x0
TEST_CI_OP( c.addi, x10, 0x00000000, 0x66666666, 0x0, x1, 480, x2)

inst_149:
// rs1_val==1717986918 and imm_val==11, 
// opcode:c.addi; op1:x10; dest:x10 op1val:0x66666666; immval:0xb
TEST_CI_OP( c.addi, x10, 0x00000000, 0x66666666, 0xb, x1, 484, x2)

inst_150:
// rs1_val==1717986918 and imm_val==7, 
// opcode:c.addi; op1:x10; dest:x10 op1val:0x66666666; immval:0x7
TEST_CI_OP( c.addi, x10, 0x00000000, 0x66666666, 0x7, x1, 488, x2)

inst_151:
// rs1_val==1717986918 and imm_val==-1, 
// opcode:c.addi; op1:x10; dest:x10 op1val:0x66666666; immval:-0x1
TEST_CI_OP( c.addi, x10, 0x00000000, 0x66666666, -0x1, x1, 492, x2)

inst_152:
// rs1_val==1717986918 and imm_val==-4, 
// opcode:c.addi; op1:x10; dest:x10 op1val:0x66666666; immval:-0x4
TEST_CI_OP( c.addi, x10, 0x00000000, 0x66666666, -0x4, x1, 496, x2)

inst_153:
// rs1_val==-46340 and imm_val==3, 
// opcode:c.addi; op1:x10; dest:x10 op1val:-0xb504; immval:0x3
TEST_CI_OP( c.addi, x10, 0x00000000, -0xb504, 0x3, x1, 500, x2)

inst_154:
// rs1_val==-46340 and imm_val==5, 
// opcode:c.addi; op1:x10; dest:x10 op1val:-0xb504; immval:0x5
TEST_CI_OP( c.addi, x10, 0x00000000, -0xb504, 0x5, x1, 504, x2)

inst_155:
// rs1_val==-46340 and imm_val==10, 
// opcode:c.addi; op1:x10; dest:x10 op1val:-0xb504; immval:0xa
TEST_CI_OP( c.addi, x10, 0x00000000, -0xb504, 0xa, x1, 508, x2)

inst_156:
// rs1_val==-46340 and imm_val==6, 
// opcode:c.addi; op1:x10; dest:x10 op1val:-0xb504; immval:0x6
TEST_CI_OP( c.addi, x10, 0x00000000, -0xb504, 0x6, x1, 512, x2)

inst_157:
// rs1_val==-46340 and imm_val==-2, 
// opcode:c.addi; op1:x10; dest:x10 op1val:-0xb504; immval:-0x2
TEST_CI_OP( c.addi, x10, 0x00000000, -0xb504, -0x2, x1, 516, x2)

inst_158:
// rs1_val==-46340 and imm_val==-5, 
// opcode:c.addi; op1:x10; dest:x10 op1val:-0xb504; immval:-0x5
TEST_CI_OP( c.addi, x10, 0x00000000, -0xb504, -0x5, x1, 520, x2)

inst_159:
// rs1_val==-46340 and imm_val==2, 
// opcode:c.addi; op1:x10; dest:x10 op1val:-0xb504; immval:0x2
TEST_CI_OP( c.addi, x10, 0x00000000, -0xb504, 0x2, x1, 524, x2)

inst_160:
// rs1_val==-46340 and imm_val==4, 
// opcode:c.addi; op1:x10; dest:x10 op1val:-0xb504; immval:0x4
TEST_CI_OP( c.addi, x10, 0x00000000, -0xb504, 0x4, x1, 528, x2)

inst_161:
// rs1_val==-46340 and imm_val==9, 
// opcode:c.addi; op1:x10; dest:x10 op1val:-0xb504; immval:0x9
TEST_CI_OP( c.addi, x10, 0x00000000, -0xb504, 0x9, x1, 532, x2)

inst_162:
// rs1_val==-46340 and imm_val==0, 
// opcode:c.addi; op1:x10; dest:x10 op1val:-0xb504; immval:0x0
TEST_CI_OP( c.addi, x10, 0x00000000, -0xb504, 0x0, x1, 536, x2)

inst_163:
// rs1_val==-46340 and imm_val==11, 
// opcode:c.addi; op1:x10; dest:x10 op1val:-0xb504; immval:0xb
TEST_CI_OP( c.addi, x10, 0x00000000, -0xb504, 0xb, x1, 540, x2)

inst_164:
// rs1_val==-46340 and imm_val==7, 
// opcode:c.addi; op1:x10; dest:x10 op1val:-0xb504; immval:0x7
TEST_CI_OP( c.addi, x10, 0x00000000, -0xb504, 0x7, x1, 544, x2)

inst_165:
// rs1_val==-46340 and imm_val==-1, 
// opcode:c.addi; op1:x10; dest:x10 op1val:-0xb504; immval:-0x1
TEST_CI_OP( c.addi, x10, 0x00000000, -0xb504, -0x1, x1, 548, x2)

inst_166:
// rs1_val==-46340 and imm_val==-4, 
// opcode:c.addi; op1:x10; dest:x10 op1val:-0xb504; immval:-0x4
TEST_CI_OP( c.addi, x10, 0x00000000, -0xb504, -0x4, x1, 552, x2)

inst_167:
// rs1_val==46340 and imm_val==3, 
// opcode:c.addi; op1:x10; dest:x10 op1val:0xb504; immval:0x3
TEST_CI_OP( c.addi, x10, 0x00000000, 0xb504, 0x3, x1, 556, x2)

inst_168:
// rs1_val==46340 and imm_val==5, 
// opcode:c.addi; op1:x10; dest:x10 op1val:0xb504; immval:0x5
TEST_CI_OP( c.addi, x10, 0x00000000, 0xb504, 0x5, x1, 560, x2)

inst_169:
// rs1_val==46340 and imm_val==10, 
// opcode:c.addi; op1:x10; dest:x10 op1val:0xb504; immval:0xa
TEST_CI_OP( c.addi, x10, 0x00000000, 0xb504, 0xa, x1, 564, x2)

inst_170:
// rs1_val==46340 and imm_val==6, 
// opcode:c.addi; op1:x10; dest:x10 op1val:0xb504; immval:0x6
TEST_CI_OP( c.addi, x10, 0x00000000, 0xb504, 0x6, x1, 568, x2)

inst_171:
// rs1_val==46340 and imm_val==-2, 
// opcode:c.addi; op1:x10; dest:x10 op1val:0xb504; immval:-0x2
TEST_CI_OP( c.addi, x10, 0x00000000, 0xb504, -0x2, x1, 572, x2)

inst_172:
// rs1_val==46340 and imm_val==-5, 
// opcode:c.addi; op1:x10; dest:x10 op1val:0xb504; immval:-0x5
TEST_CI_OP( c.addi, x10, 0x00000000, 0xb504, -0x5, x1, 576, x2)

inst_173:
// rs1_val==46340 and imm_val==2, 
// opcode:c.addi; op1:x10; dest:x10 op1val:0xb504; immval:0x2
TEST_CI_OP( c.addi, x10, 0x00000000, 0xb504, 0x2, x1, 580, x2)

inst_174:
// rs1_val==46340 and imm_val==4, 
// opcode:c.addi; op1:x10; dest:x10 op1val:0xb504; immval:0x4
TEST_CI_OP( c.addi, x10, 0x00000000, 0xb504, 0x4, x1, 584, x2)

inst_175:
// rs1_val==46340 and imm_val==9, 
// opcode:c.addi; op1:x10; dest:x10 op1val:0xb504; immval:0x9
TEST_CI_OP( c.addi, x10, 0x00000000, 0xb504, 0x9, x1, 588, x2)

inst_176:
// rs1_val==46340 and imm_val==0, 
// opcode:c.addi; op1:x10; dest:x10 op1val:0xb504; immval:0x0
TEST_CI_OP( c.addi, x10, 0x00000000, 0xb504, 0x0, x1, 592, x2)

inst_177:
// rs1_val==46340 and imm_val==11, 
// opcode:c.addi; op1:x10; dest:x10 op1val:0xb504; immval:0xb
TEST_CI_OP( c.addi, x10, 0x00000000, 0xb504, 0xb, x1, 596, x2)

inst_178:
// rs1_val==46340 and imm_val==7, 
// opcode:c.addi; op1:x10; dest:x10 op1val:0xb504; immval:0x7
TEST_CI_OP( c.addi, x10, 0x00000000, 0xb504, 0x7, x1, 600, x2)

inst_179:
// rs1_val==46340 and imm_val==-1, 
// opcode:c.addi; op1:x10; dest:x10 op1val:0xb504; immval:-0x1
TEST_CI_OP( c.addi, x10, 0x00000000, 0xb504, -0x1, x1, 604, x2)

inst_180:
// rs1_val==46340 and imm_val==-4, 
// opcode:c.addi; op1:x10; dest:x10 op1val:0xb504; immval:-0x4
TEST_CI_OP( c.addi, x10, 0x00000000, 0xb504, -0x4, x1, 608, x2)

inst_181:
// rs1_val==2 and imm_val==3, 
// opcode:c.addi; op1:x10; dest:x10 op1val:0x2; immval:0x3
TEST_CI_OP( c.addi, x10, 0x00000000, 0x2, 0x3, x1, 612, x2)

inst_182:
// rs1_val==2 and imm_val==5, 
// opcode:c.addi; op1:x10; dest:x10 op1val:0x2; immval:0x5
TEST_CI_OP( c.addi, x10, 0x00000000, 0x2, 0x5, x1, 616, x2)

inst_183:
// rs1_val==2 and imm_val==10, 
// opcode:c.addi; op1:x10; dest:x10 op1val:0x2; immval:0xa
TEST_CI_OP( c.addi, x10, 0x00000000, 0x2, 0xa, x1, 620, x2)

inst_184:
// rs1_val==2 and imm_val==6, 
// opcode:c.addi; op1:x10; dest:x10 op1val:0x2; immval:0x6
TEST_CI_OP( c.addi, x10, 0x00000000, 0x2, 0x6, x1, 624, x2)

inst_185:
// rs1_val==2 and imm_val==-2, 
// opcode:c.addi; op1:x10; dest:x10 op1val:0x2; immval:-0x2
TEST_CI_OP( c.addi, x10, 0x00000000, 0x2, -0x2, x1, 628, x2)

inst_186:
// rs1_val==2 and imm_val==-5, 
// opcode:c.addi; op1:x10; dest:x10 op1val:0x2; immval:-0x5
TEST_CI_OP( c.addi, x10, 0x00000000, 0x2, -0x5, x1, 632, x2)

inst_187:
// rs1_val==2 and imm_val==2, 
// opcode:c.addi; op1:x10; dest:x10 op1val:0x2; immval:0x2
TEST_CI_OP( c.addi, x10, 0x00000000, 0x2, 0x2, x1, 636, x2)

inst_188:
// rs1_val==2 and imm_val==9, 
// opcode:c.addi; op1:x10; dest:x10 op1val:0x2; immval:0x9
TEST_CI_OP( c.addi, x10, 0x00000000, 0x2, 0x9, x1, 640, x2)

inst_189:
// rs1_val==2 and imm_val==0, 
// opcode:c.addi; op1:x10; dest:x10 op1val:0x2; immval:0x0
TEST_CI_OP( c.addi, x10, 0x00000000, 0x2, 0x0, x1, 644, x2)

inst_190:
// rs1_val==2 and imm_val==11, 
// opcode:c.addi; op1:x10; dest:x10 op1val:0x2; immval:0xb
TEST_CI_OP( c.addi, x10, 0x00000000, 0x2, 0xb, x1, 648, x2)

inst_191:
// rs1_val==2 and imm_val==7, 
// opcode:c.addi; op1:x10; dest:x10 op1val:0x2; immval:0x7
TEST_CI_OP( c.addi, x10, 0x00000000, 0x2, 0x7, x1, 652, x2)

inst_192:
// rs1_val==2 and imm_val==-1, 
// opcode:c.addi; op1:x10; dest:x10 op1val:0x2; immval:-0x1
TEST_CI_OP( c.addi, x10, 0x00000000, 0x2, -0x1, x1, 656, x2)

inst_193:
// rs1_val==2 and imm_val==-4, 
// opcode:c.addi; op1:x10; dest:x10 op1val:0x2; immval:-0x4
TEST_CI_OP( c.addi, x10, 0x00000000, 0x2, -0x4, x1, 660, x2)

inst_194:
// rs1_val==1431655764 and imm_val==3, 
// opcode:c.addi; op1:x10; dest:x10 op1val:0x55555554; immval:0x3
TEST_CI_OP( c.addi, x10, 0x00000000, 0x55555554, 0x3, x1, 664, x2)

inst_195:
// rs1_val==1431655764 and imm_val==5, 
// opcode:c.addi; op1:x10; dest:x10 op1val:0x55555554; immval:0x5
TEST_CI_OP( c.addi, x10, 0x00000000, 0x55555554, 0x5, x1, 668, x2)

inst_196:
// rs1_val==1431655764 and imm_val==10, 
// opcode:c.addi; op1:x10; dest:x10 op1val:0x55555554; immval:0xa
TEST_CI_OP( c.addi, x10, 0x00000000, 0x55555554, 0xa, x1, 672, x2)

inst_197:
// rs1_val==1431655764 and imm_val==6, 
// opcode:c.addi; op1:x10; dest:x10 op1val:0x55555554; immval:0x6
TEST_CI_OP( c.addi, x10, 0x00000000, 0x55555554, 0x6, x1, 676, x2)

inst_198:
// rs1_val==1431655764 and imm_val==-2, 
// opcode:c.addi; op1:x10; dest:x10 op1val:0x55555554; immval:-0x2
TEST_CI_OP( c.addi, x10, 0x00000000, 0x55555554, -0x2, x1, 680, x2)

inst_199:
// rs1_val==1431655764 and imm_val==-5, 
// opcode:c.addi; op1:x10; dest:x10 op1val:0x55555554; immval:-0x5
TEST_CI_OP( c.addi, x10, 0x00000000, 0x55555554, -0x5, x1, 684, x2)

inst_200:
// rs1_val==1431655764 and imm_val==2, 
// opcode:c.addi; op1:x10; dest:x10 op1val:0x55555554; immval:0x2
TEST_CI_OP( c.addi, x10, 0x00000000, 0x55555554, 0x2, x1, 688, x2)

inst_201:
// rs1_val==1431655764 and imm_val==4, 
// opcode:c.addi; op1:x10; dest:x10 op1val:0x55555554; immval:0x4
TEST_CI_OP( c.addi, x10, 0x00000000, 0x55555554, 0x4, x1, 692, x2)

inst_202:
// rs1_val==1431655764 and imm_val==9, 
// opcode:c.addi; op1:x10; dest:x10 op1val:0x55555554; immval:0x9
TEST_CI_OP( c.addi, x10, 0x00000000, 0x55555554, 0x9, x1, 696, x2)

inst_203:
// rs1_val==1431655764 and imm_val==0, 
// opcode:c.addi; op1:x10; dest:x10 op1val:0x55555554; immval:0x0
TEST_CI_OP( c.addi, x10, 0x00000000, 0x55555554, 0x0, x1, 700, x2)

inst_204:
// rs1_val==1431655764 and imm_val==11, 
// opcode:c.addi; op1:x10; dest:x10 op1val:0x55555554; immval:0xb
TEST_CI_OP( c.addi, x10, 0x00000000, 0x55555554, 0xb, x1, 704, x2)

inst_205:
// rs1_val==1431655764 and imm_val==7, 
// opcode:c.addi; op1:x10; dest:x10 op1val:0x55555554; immval:0x7
TEST_CI_OP( c.addi, x10, 0x00000000, 0x55555554, 0x7, x1, 708, x2)

inst_206:
// rs1_val==1431655764 and imm_val==-1, 
// opcode:c.addi; op1:x10; dest:x10 op1val:0x55555554; immval:-0x1
TEST_CI_OP( c.addi, x10, 0x00000000, 0x55555554, -0x1, x1, 712, x2)

inst_207:
// rs1_val==1431655764 and imm_val==-4, 
// opcode:c.addi; op1:x10; dest:x10 op1val:0x55555554; immval:-0x4
TEST_CI_OP( c.addi, x10, 0x00000000, 0x55555554, -0x4, x1, 716, x2)

inst_208:
// rs1_val==0 and imm_val==3, 
// opcode:c.addi; op1:x10; dest:x10 op1val:0x0; immval:0x3
TEST_CI_OP( c.addi, x10, 0x00000000, 0x0, 0x3, x1, 720, x2)

inst_209:
// rs1_val==0 and imm_val==5, 
// opcode:c.addi; op1:x10; dest:x10 op1val:0x0; immval:0x5
TEST_CI_OP( c.addi, x10, 0x00000000, 0x0, 0x5, x1, 724, x2)

inst_210:
// rs1_val==0 and imm_val==10, 
// opcode:c.addi; op1:x10; dest:x10 op1val:0x0; immval:0xa
TEST_CI_OP( c.addi, x10, 0x00000000, 0x0, 0xa, x1, 728, x2)

inst_211:
// rs1_val==0 and imm_val==6, 
// opcode:c.addi; op1:x10; dest:x10 op1val:0x0; immval:0x6
TEST_CI_OP( c.addi, x10, 0x00000000, 0x0, 0x6, x1, 732, x2)

inst_212:
// rs1_val==0 and imm_val==-2, 
// opcode:c.addi; op1:x10; dest:x10 op1val:0x0; immval:-0x2
TEST_CI_OP( c.addi, x10, 0x00000000, 0x0, -0x2, x1, 736, x2)

inst_213:
// rs1_val==0 and imm_val==-5, 
// opcode:c.addi; op1:x10; dest:x10 op1val:0x0; immval:-0x5
TEST_CI_OP( c.addi, x10, 0x00000000, 0x0, -0x5, x1, 740, x2)

inst_214:
// rs1_val==0 and imm_val==9, 
// opcode:c.addi; op1:x10; dest:x10 op1val:0x0; immval:0x9
TEST_CI_OP( c.addi, x10, 0x00000000, 0x0, 0x9, x1, 744, x2)

inst_215:
// rs1_val==0 and imm_val==0, 
// opcode:c.addi; op1:x10; dest:x10 op1val:0x0; immval:0x0
TEST_CI_OP( c.addi, x10, 0x00000000, 0x0, 0x0, x1, 748, x2)

inst_216:
// rs1_val==0 and imm_val==11, 
// opcode:c.addi; op1:x10; dest:x10 op1val:0x0; immval:0xb
TEST_CI_OP( c.addi, x10, 0x00000000, 0x0, 0xb, x1, 752, x2)

inst_217:
// rs1_val==0 and imm_val==7, 
// opcode:c.addi; op1:x10; dest:x10 op1val:0x0; immval:0x7
TEST_CI_OP( c.addi, x10, 0x00000000, 0x0, 0x7, x1, 756, x2)

inst_218:
// rs1_val==0 and imm_val==-1, 
// opcode:c.addi; op1:x10; dest:x10 op1val:0x0; immval:-0x1
TEST_CI_OP( c.addi, x10, 0x00000000, 0x0, -0x1, x1, 760, x2)

inst_219:
// rs1_val==0 and imm_val==-4, 
// opcode:c.addi; op1:x10; dest:x10 op1val:0x0; immval:-0x4
TEST_CI_OP( c.addi, x10, 0x00000000, 0x0, -0x4, x1, 764, x2)

inst_220:
// rs1_val==4 and imm_val==3, 
// opcode:c.addi; op1:x10; dest:x10 op1val:0x4; immval:0x3
TEST_CI_OP( c.addi, x10, 0x00000000, 0x4, 0x3, x1, 768, x2)

inst_221:
// rs1_val==4 and imm_val==5, 
// opcode:c.addi; op1:x10; dest:x10 op1val:0x4; immval:0x5
TEST_CI_OP( c.addi, x10, 0x00000000, 0x4, 0x5, x1, 772, x2)

inst_222:
// rs1_val==4 and imm_val==10, 
// opcode:c.addi; op1:x10; dest:x10 op1val:0x4; immval:0xa
TEST_CI_OP( c.addi, x10, 0x00000000, 0x4, 0xa, x1, 776, x2)

inst_223:
// rs1_val==4 and imm_val==6, 
// opcode:c.addi; op1:x10; dest:x10 op1val:0x4; immval:0x6
TEST_CI_OP( c.addi, x10, 0x00000000, 0x4, 0x6, x1, 780, x2)

inst_224:
// rs1_val==4 and imm_val==-2, 
// opcode:c.addi; op1:x10; dest:x10 op1val:0x4; immval:-0x2
TEST_CI_OP( c.addi, x10, 0x00000000, 0x4, -0x2, x1, 784, x2)

inst_225:
// rs1_val==4 and imm_val==-5, 
// opcode:c.addi; op1:x10; dest:x10 op1val:0x4; immval:-0x5
TEST_CI_OP( c.addi, x10, 0x00000000, 0x4, -0x5, x1, 788, x2)

inst_226:
// rs1_val==4 and imm_val==2, 
// opcode:c.addi; op1:x10; dest:x10 op1val:0x4; immval:0x2
TEST_CI_OP( c.addi, x10, 0x00000000, 0x4, 0x2, x1, 792, x2)

inst_227:
// rs1_val==4 and imm_val==9, 
// opcode:c.addi; op1:x10; dest:x10 op1val:0x4; immval:0x9
TEST_CI_OP( c.addi, x10, 0x00000000, 0x4, 0x9, x1, 796, x2)

inst_228:
// rs1_val==4 and imm_val==0, 
// opcode:c.addi; op1:x10; dest:x10 op1val:0x4; immval:0x0
TEST_CI_OP( c.addi, x10, 0x00000000, 0x4, 0x0, x1, 800, x2)

inst_229:
// rs1_val==4 and imm_val==11, 
// opcode:c.addi; op1:x10; dest:x10 op1val:0x4; immval:0xb
TEST_CI_OP( c.addi, x10, 0x00000000, 0x4, 0xb, x1, 804, x2)

inst_230:
// rs1_val==4 and imm_val==7, 
// opcode:c.addi; op1:x10; dest:x10 op1val:0x4; immval:0x7
TEST_CI_OP( c.addi, x10, 0x00000000, 0x4, 0x7, x1, 808, x2)

inst_231:
// rs1_val==4 and imm_val==-1, 
// opcode:c.addi; op1:x10; dest:x10 op1val:0x4; immval:-0x1
TEST_CI_OP( c.addi, x10, 0x00000000, 0x4, -0x1, x1, 812, x2)

inst_232:
// rs1_val==4 and imm_val==-4, 
// opcode:c.addi; op1:x10; dest:x10 op1val:0x4; immval:-0x4
TEST_CI_OP( c.addi, x10, 0x00000000, 0x4, -0x4, x1, 816, x2)

inst_233:
// rs1_val==858993458 and imm_val==3, 
// opcode:c.addi; op1:x10; dest:x10 op1val:0x33333332; immval:0x3
TEST_CI_OP( c.addi, x10, 0x00000000, 0x33333332, 0x3, x1, 820, x2)

inst_234:
// rs1_val==858993458 and imm_val==5, 
// opcode:c.addi; op1:x10; dest:x10 op1val:0x33333332; immval:0x5
TEST_CI_OP( c.addi, x10, 0x00000000, 0x33333332, 0x5, x1, 824, x2)

inst_235:
// rs1_val==858993458 and imm_val==10, 
// opcode:c.addi; op1:x10; dest:x10 op1val:0x33333332; immval:0xa
TEST_CI_OP( c.addi, x10, 0x00000000, 0x33333332, 0xa, x1, 828, x2)

inst_236:
// rs1_val==858993458 and imm_val==6, 
// opcode:c.addi; op1:x10; dest:x10 op1val:0x33333332; immval:0x6
TEST_CI_OP( c.addi, x10, 0x00000000, 0x33333332, 0x6, x1, 832, x2)

inst_237:
// rs1_val==858993458 and imm_val==-2, 
// opcode:c.addi; op1:x10; dest:x10 op1val:0x33333332; immval:-0x2
TEST_CI_OP( c.addi, x10, 0x00000000, 0x33333332, -0x2, x1, 836, x2)

inst_238:
// rs1_val==858993458 and imm_val==-5, 
// opcode:c.addi; op1:x10; dest:x10 op1val:0x33333332; immval:-0x5
TEST_CI_OP( c.addi, x10, 0x00000000, 0x33333332, -0x5, x1, 840, x2)

inst_239:
// rs1_val==858993458 and imm_val==2, 
// opcode:c.addi; op1:x10; dest:x10 op1val:0x33333332; immval:0x2
TEST_CI_OP( c.addi, x10, 0x00000000, 0x33333332, 0x2, x1, 844, x2)

inst_240:
// rs1_val==858993458 and imm_val==4, 
// opcode:c.addi; op1:x10; dest:x10 op1val:0x33333332; immval:0x4
TEST_CI_OP( c.addi, x10, 0x00000000, 0x33333332, 0x4, x1, 848, x2)

inst_241:
// rs1_val==858993458 and imm_val==9, 
// opcode:c.addi; op1:x10; dest:x10 op1val:0x33333332; immval:0x9
TEST_CI_OP( c.addi, x10, 0x00000000, 0x33333332, 0x9, x1, 852, x2)

inst_242:
// rs1_val==858993458 and imm_val==0, 
// opcode:c.addi; op1:x10; dest:x10 op1val:0x33333332; immval:0x0
TEST_CI_OP( c.addi, x10, 0x00000000, 0x33333332, 0x0, x1, 856, x2)

inst_243:
// rs1_val==858993458 and imm_val==11, 
// opcode:c.addi; op1:x10; dest:x10 op1val:0x33333332; immval:0xb
TEST_CI_OP( c.addi, x10, 0x00000000, 0x33333332, 0xb, x1, 860, x2)

inst_244:
// rs1_val==858993458 and imm_val==7, 
// opcode:c.addi; op1:x10; dest:x10 op1val:0x33333332; immval:0x7
TEST_CI_OP( c.addi, x10, 0x00000000, 0x33333332, 0x7, x1, 864, x2)

inst_245:
// rs1_val==858993458 and imm_val==-1, 
// opcode:c.addi; op1:x10; dest:x10 op1val:0x33333332; immval:-0x1
TEST_CI_OP( c.addi, x10, 0x00000000, 0x33333332, -0x1, x1, 868, x2)

inst_246:
// rs1_val==858993458 and imm_val==-4, 
// opcode:c.addi; op1:x10; dest:x10 op1val:0x33333332; immval:-0x4
TEST_CI_OP( c.addi, x10, 0x00000000, 0x33333332, -0x4, x1, 872, x2)

inst_247:
// rs1_val==1717986917 and imm_val==3, 
// opcode:c.addi; op1:x10; dest:x10 op1val:0x66666665; immval:0x3
TEST_CI_OP( c.addi, x10, 0x00000000, 0x66666665, 0x3, x1, 876, x2)

inst_248:
// rs1_val==1717986917 and imm_val==5, 
// opcode:c.addi; op1:x10; dest:x10 op1val:0x66666665; immval:0x5
TEST_CI_OP( c.addi, x10, 0x00000000, 0x66666665, 0x5, x1, 880, x2)

inst_249:
// rs1_val==1717986917 and imm_val==10, 
// opcode:c.addi; op1:x10; dest:x10 op1val:0x66666665; immval:0xa
TEST_CI_OP( c.addi, x10, 0x00000000, 0x66666665, 0xa, x1, 884, x2)

inst_250:
// rs1_val==1717986917 and imm_val==6, 
// opcode:c.addi; op1:x10; dest:x10 op1val:0x66666665; immval:0x6
TEST_CI_OP( c.addi, x10, 0x00000000, 0x66666665, 0x6, x1, 888, x2)

inst_251:
// rs1_val==1717986917 and imm_val==-2, 
// opcode:c.addi; op1:x10; dest:x10 op1val:0x66666665; immval:-0x2
TEST_CI_OP( c.addi, x10, 0x00000000, 0x66666665, -0x2, x1, 892, x2)

inst_252:
// rs1_val==1717986917 and imm_val==-5, 
// opcode:c.addi; op1:x10; dest:x10 op1val:0x66666665; immval:-0x5
TEST_CI_OP( c.addi, x10, 0x00000000, 0x66666665, -0x5, x1, 896, x2)

inst_253:
// rs1_val==1717986917 and imm_val==2, 
// opcode:c.addi; op1:x10; dest:x10 op1val:0x66666665; immval:0x2
TEST_CI_OP( c.addi, x10, 0x00000000, 0x66666665, 0x2, x1, 900, x2)

inst_254:
// rs1_val==1717986917 and imm_val==4, 
// opcode:c.addi; op1:x10; dest:x10 op1val:0x66666665; immval:0x4
TEST_CI_OP( c.addi, x10, 0x00000000, 0x66666665, 0x4, x1, 904, x2)

inst_255:
// rs1_val==1717986917 and imm_val==9, 
// opcode:c.addi; op1:x10; dest:x10 op1val:0x66666665; immval:0x9
TEST_CI_OP( c.addi, x10, 0x00000000, 0x66666665, 0x9, x1, 908, x2)

inst_256:
// rs1_val==1717986917 and imm_val==0, 
// opcode:c.addi; op1:x10; dest:x10 op1val:0x66666665; immval:0x0
TEST_CI_OP( c.addi, x10, 0x00000000, 0x66666665, 0x0, x1, 912, x2)

inst_257:
// rs1_val==1717986917 and imm_val==11, 
// opcode:c.addi; op1:x10; dest:x10 op1val:0x66666665; immval:0xb
TEST_CI_OP( c.addi, x10, 0x00000000, 0x66666665, 0xb, x1, 916, x2)

inst_258:
// rs1_val==1717986917 and imm_val==7, 
// opcode:c.addi; op1:x10; dest:x10 op1val:0x66666665; immval:0x7
TEST_CI_OP( c.addi, x10, 0x00000000, 0x66666665, 0x7, x1, 920, x2)

inst_259:
// rs1_val==1717986917 and imm_val==-1, 
// opcode:c.addi; op1:x10; dest:x10 op1val:0x66666665; immval:-0x1
TEST_CI_OP( c.addi, x10, 0x00000000, 0x66666665, -0x1, x1, 924, x2)

inst_260:
// rs1_val==1717986917 and imm_val==-4, 
// opcode:c.addi; op1:x10; dest:x10 op1val:0x66666665; immval:-0x4
TEST_CI_OP( c.addi, x10, 0x00000000, 0x66666665, -0x4, x1, 928, x2)

inst_261:
// rs1_val==46339 and imm_val==3, 
// opcode:c.addi; op1:x10; dest:x10 op1val:0xb503; immval:0x3
TEST_CI_OP( c.addi, x10, 0x00000000, 0xb503, 0x3, x1, 932, x2)

inst_262:
// rs1_val==46339 and imm_val==5, 
// opcode:c.addi; op1:x10; dest:x10 op1val:0xb503; immval:0x5
TEST_CI_OP( c.addi, x10, 0x00000000, 0xb503, 0x5, x1, 936, x2)

inst_263:
// rs1_val==46339 and imm_val==10, 
// opcode:c.addi; op1:x10; dest:x10 op1val:0xb503; immval:0xa
TEST_CI_OP( c.addi, x10, 0x00000000, 0xb503, 0xa, x1, 940, x2)

inst_264:
// rs1_val==46339 and imm_val==6, 
// opcode:c.addi; op1:x10; dest:x10 op1val:0xb503; immval:0x6
TEST_CI_OP( c.addi, x10, 0x00000000, 0xb503, 0x6, x1, 944, x2)

inst_265:
// rs1_val==46339 and imm_val==-2, 
// opcode:c.addi; op1:x10; dest:x10 op1val:0xb503; immval:-0x2
TEST_CI_OP( c.addi, x10, 0x00000000, 0xb503, -0x2, x1, 948, x2)

inst_266:
// rs1_val==46339 and imm_val==-5, 
// opcode:c.addi; op1:x10; dest:x10 op1val:0xb503; immval:-0x5
TEST_CI_OP( c.addi, x10, 0x00000000, 0xb503, -0x5, x1, 952, x2)

inst_267:
// rs1_val==46339 and imm_val==2, 
// opcode:c.addi; op1:x10; dest:x10 op1val:0xb503; immval:0x2
TEST_CI_OP( c.addi, x10, 0x00000000, 0xb503, 0x2, x1, 956, x2)

inst_268:
// rs1_val==46339 and imm_val==4, 
// opcode:c.addi; op1:x10; dest:x10 op1val:0xb503; immval:0x4
TEST_CI_OP( c.addi, x10, 0x00000000, 0xb503, 0x4, x1, 960, x2)

inst_269:
// rs1_val==46339 and imm_val==9, 
// opcode:c.addi; op1:x10; dest:x10 op1val:0xb503; immval:0x9
TEST_CI_OP( c.addi, x10, 0x00000000, 0xb503, 0x9, x1, 964, x2)

inst_270:
// rs1_val==46339 and imm_val==0, 
// opcode:c.addi; op1:x10; dest:x10 op1val:0xb503; immval:0x0
TEST_CI_OP( c.addi, x10, 0x00000000, 0xb503, 0x0, x1, 968, x2)

inst_271:
// rs1_val==46339 and imm_val==11, 
// opcode:c.addi; op1:x10; dest:x10 op1val:0xb503; immval:0xb
TEST_CI_OP( c.addi, x10, 0x00000000, 0xb503, 0xb, x1, 972, x2)

inst_272:
// rs1_val==46339 and imm_val==7, 
// opcode:c.addi; op1:x10; dest:x10 op1val:0xb503; immval:0x7
TEST_CI_OP( c.addi, x10, 0x00000000, 0xb503, 0x7, x1, 976, x2)

inst_273:
// rs1_val==46339 and imm_val==-1, 
// opcode:c.addi; op1:x10; dest:x10 op1val:0xb503; immval:-0x1
TEST_CI_OP( c.addi, x10, 0x00000000, 0xb503, -0x1, x1, 980, x2)

inst_274:
// rs1_val==46339 and imm_val==-4, 
// opcode:c.addi; op1:x10; dest:x10 op1val:0xb503; immval:-0x4
TEST_CI_OP( c.addi, x10, 0x00000000, 0xb503, -0x4, x1, 984, x2)

inst_275:
// rs1_val==1431655766 and imm_val==3, 
// opcode:c.addi; op1:x10; dest:x10 op1val:0x55555556; immval:0x3
TEST_CI_OP( c.addi, x10, 0x00000000, 0x55555556, 0x3, x1, 988, x2)

inst_276:
// rs1_val==1431655766 and imm_val==5, 
// opcode:c.addi; op1:x10; dest:x10 op1val:0x55555556; immval:0x5
TEST_CI_OP( c.addi, x10, 0x00000000, 0x55555556, 0x5, x1, 992, x2)

inst_277:
// rs1_val==1431655766 and imm_val==10, 
// opcode:c.addi; op1:x10; dest:x10 op1val:0x55555556; immval:0xa
TEST_CI_OP( c.addi, x10, 0x00000000, 0x55555556, 0xa, x1, 996, x2)

inst_278:
// rs1_val==1431655766 and imm_val==6, 
// opcode:c.addi; op1:x10; dest:x10 op1val:0x55555556; immval:0x6
TEST_CI_OP( c.addi, x10, 0x00000000, 0x55555556, 0x6, x1, 1000, x2)

inst_279:
// rs1_val==1431655766 and imm_val==-2, 
// opcode:c.addi; op1:x10; dest:x10 op1val:0x55555556; immval:-0x2
TEST_CI_OP( c.addi, x10, 0x00000000, 0x55555556, -0x2, x1, 1004, x2)

inst_280:
// rs1_val==1431655766 and imm_val==-5, 
// opcode:c.addi; op1:x10; dest:x10 op1val:0x55555556; immval:-0x5
TEST_CI_OP( c.addi, x10, 0x00000000, 0x55555556, -0x5, x1, 1008, x2)

inst_281:
// rs1_val==1431655766 and imm_val==2, 
// opcode:c.addi; op1:x10; dest:x10 op1val:0x55555556; immval:0x2
TEST_CI_OP( c.addi, x10, 0x00000000, 0x55555556, 0x2, x1, 1012, x2)

inst_282:
// rs1_val==1431655766 and imm_val==4, 
// opcode:c.addi; op1:x10; dest:x10 op1val:0x55555556; immval:0x4
TEST_CI_OP( c.addi, x10, 0x00000000, 0x55555556, 0x4, x1, 1016, x2)

inst_283:
// rs1_val==1431655766 and imm_val==9, 
// opcode:c.addi; op1:x10; dest:x10 op1val:0x55555556; immval:0x9
TEST_CI_OP( c.addi, x10, 0x00000000, 0x55555556, 0x9, x1, 1020, x2)

inst_284:
// rs1_val==1431655766 and imm_val==0, 
// opcode:c.addi; op1:x10; dest:x10 op1val:0x55555556; immval:0x0
TEST_CI_OP( c.addi, x10, 0x00000000, 0x55555556, 0x0, x1, 1024, x2)

inst_285:
// rs1_val==1431655766 and imm_val==11, 
// opcode:c.addi; op1:x10; dest:x10 op1val:0x55555556; immval:0xb
TEST_CI_OP( c.addi, x10, 0x00000000, 0x55555556, 0xb, x1, 1028, x2)

inst_286:
// rs1_val==1431655766 and imm_val==7, 
// opcode:c.addi; op1:x10; dest:x10 op1val:0x55555556; immval:0x7
TEST_CI_OP( c.addi, x10, 0x00000000, 0x55555556, 0x7, x1, 1032, x2)

inst_287:
// rs1_val==1431655766 and imm_val==-1, 
// opcode:c.addi; op1:x10; dest:x10 op1val:0x55555556; immval:-0x1
TEST_CI_OP( c.addi, x10, 0x00000000, 0x55555556, -0x1, x1, 1036, x2)

inst_288:
// rs1_val==1431655766 and imm_val==-4, 
// opcode:c.addi; op1:x10; dest:x10 op1val:0x55555556; immval:-0x4
TEST_CI_OP( c.addi, x10, 0x00000000, 0x55555556, -0x4, x1, 1040, x2)

inst_289:
// rs1_val==-1431655765 and imm_val==3, 
// opcode:c.addi; op1:x10; dest:x10 op1val:-0x55555555; immval:0x3
TEST_CI_OP( c.addi, x10, 0x00000000, -0x55555555, 0x3, x1, 1044, x2)

inst_290:
// rs1_val==-1431655765 and imm_val==5, 
// opcode:c.addi; op1:x10; dest:x10 op1val:-0x55555555; immval:0x5
TEST_CI_OP( c.addi, x10, 0x00000000, -0x55555555, 0x5, x1, 1048, x2)

inst_291:
// rs1_val==-1431655765 and imm_val==10, 
// opcode:c.addi; op1:x10; dest:x10 op1val:-0x55555555; immval:0xa
TEST_CI_OP( c.addi, x10, 0x00000000, -0x55555555, 0xa, x1, 1052, x2)

inst_292:
// rs1_val==-1431655765 and imm_val==6, 
// opcode:c.addi; op1:x10; dest:x10 op1val:-0x55555555; immval:0x6
TEST_CI_OP( c.addi, x10, 0x00000000, -0x55555555, 0x6, x1, 1056, x2)

inst_293:
// rs1_val==-1431655765 and imm_val==-2, 
// opcode:c.addi; op1:x10; dest:x10 op1val:-0x55555555; immval:-0x2
TEST_CI_OP( c.addi, x10, 0x00000000, -0x55555555, -0x2, x1, 1060, x2)

inst_294:
// rs1_val==-1431655765 and imm_val==-5, 
// opcode:c.addi; op1:x10; dest:x10 op1val:-0x55555555; immval:-0x5
TEST_CI_OP( c.addi, x10, 0x00000000, -0x55555555, -0x5, x1, 1064, x2)

inst_295:
// rs1_val==-1431655765 and imm_val==2, 
// opcode:c.addi; op1:x10; dest:x10 op1val:-0x55555555; immval:0x2
TEST_CI_OP( c.addi, x10, 0x00000000, -0x55555555, 0x2, x1, 1068, x2)

inst_296:
// rs1_val==-1431655765 and imm_val==4, 
// opcode:c.addi; op1:x10; dest:x10 op1val:-0x55555555; immval:0x4
TEST_CI_OP( c.addi, x10, 0x00000000, -0x55555555, 0x4, x1, 1072, x2)

inst_297:
// rs1_val==-1431655765 and imm_val==9, 
// opcode:c.addi; op1:x10; dest:x10 op1val:-0x55555555; immval:0x9
TEST_CI_OP( c.addi, x10, 0x00000000, -0x55555555, 0x9, x1, 1076, x2)

inst_298:
// rs1_val==-1431655765 and imm_val==0, 
// opcode:c.addi; op1:x10; dest:x10 op1val:-0x55555555; immval:0x0
TEST_CI_OP( c.addi, x10, 0x00000000, -0x55555555, 0x0, x1, 1080, x2)

inst_299:
// rs1_val==-1431655765 and imm_val==11, 
// opcode:c.addi; op1:x10; dest:x10 op1val:-0x55555555; immval:0xb
TEST_CI_OP( c.addi, x10, 0x00000000, -0x55555555, 0xb, x1, 1084, x2)

inst_300:
// rs1_val==-1431655765 and imm_val==7, 
// opcode:c.addi; op1:x10; dest:x10 op1val:-0x55555555; immval:0x7
TEST_CI_OP( c.addi, x10, 0x00000000, -0x55555555, 0x7, x1, 1088, x2)

inst_301:
// rs1_val==-1431655765 and imm_val==-1, 
// opcode:c.addi; op1:x10; dest:x10 op1val:-0x55555555; immval:-0x1
TEST_CI_OP( c.addi, x10, 0x00000000, -0x55555555, -0x1, x1, 1092, x2)

inst_302:
// rs1_val==-1431655765 and imm_val==-4, 
// opcode:c.addi; op1:x10; dest:x10 op1val:-0x55555555; immval:-0x4
TEST_CI_OP( c.addi, x10, 0x00000000, -0x55555555, -0x4, x1, 1096, x2)

inst_303:
// rs1_val==6 and imm_val==3, 
// opcode:c.addi; op1:x10; dest:x10 op1val:0x6; immval:0x3
TEST_CI_OP( c.addi, x10, 0x00000000, 0x6, 0x3, x1, 1100, x2)

inst_304:
// rs1_val==6 and imm_val==5, 
// opcode:c.addi; op1:x10; dest:x10 op1val:0x6; immval:0x5
TEST_CI_OP( c.addi, x10, 0x00000000, 0x6, 0x5, x1, 1104, x2)

inst_305:
// rs1_val==6 and imm_val==10, 
// opcode:c.addi; op1:x10; dest:x10 op1val:0x6; immval:0xa
TEST_CI_OP( c.addi, x10, 0x00000000, 0x6, 0xa, x1, 1108, x2)

inst_306:
// rs1_val==6 and imm_val==6, 
// opcode:c.addi; op1:x10; dest:x10 op1val:0x6; immval:0x6
TEST_CI_OP( c.addi, x10, 0x00000000, 0x6, 0x6, x1, 1112, x2)

inst_307:
// rs1_val==6 and imm_val==-2, 
// opcode:c.addi; op1:x10; dest:x10 op1val:0x6; immval:-0x2
TEST_CI_OP( c.addi, x10, 0x00000000, 0x6, -0x2, x1, 1116, x2)

inst_308:
// rs1_val==6 and imm_val==-5, 
// opcode:c.addi; op1:x10; dest:x10 op1val:0x6; immval:-0x5
TEST_CI_OP( c.addi, x10, 0x00000000, 0x6, -0x5, x1, 1120, x2)

inst_309:
// rs1_val==6 and imm_val==2, 
// opcode:c.addi; op1:x10; dest:x10 op1val:0x6; immval:0x2
TEST_CI_OP( c.addi, x10, 0x00000000, 0x6, 0x2, x1, 1124, x2)

inst_310:
// rs1_val==-46339 and imm_val==-1, 
// opcode:c.addi; op1:x10; dest:x10 op1val:-0xb503; immval:-0x1
TEST_CI_OP( c.addi, x10, 0x00000000, -0xb503, -0x1, x1, 1128, x2)

inst_311:
// rs1_val==-46339 and imm_val==-4, 
// opcode:c.addi; op1:x10; dest:x10 op1val:-0xb503; immval:-0x4
TEST_CI_OP( c.addi, x10, 0x00000000, -0xb503, -0x4, x1, 1132, x2)

inst_312:
// rs1_val==46341 and imm_val==3, 
// opcode:c.addi; op1:x10; dest:x10 op1val:0xb505; immval:0x3
TEST_CI_OP( c.addi, x10, 0x00000000, 0xb505, 0x3, x1, 1136, x2)

inst_313:
// rs1_val==46341 and imm_val==5, 
// opcode:c.addi; op1:x10; dest:x10 op1val:0xb505; immval:0x5
TEST_CI_OP( c.addi, x10, 0x00000000, 0xb505, 0x5, x1, 1140, x2)

inst_314:
// rs1_val==46341 and imm_val==10, 
// opcode:c.addi; op1:x10; dest:x10 op1val:0xb505; immval:0xa
TEST_CI_OP( c.addi, x10, 0x00000000, 0xb505, 0xa, x1, 1144, x2)

inst_315:
// rs1_val==46341 and imm_val==6, 
// opcode:c.addi; op1:x10; dest:x10 op1val:0xb505; immval:0x6
TEST_CI_OP( c.addi, x10, 0x00000000, 0xb505, 0x6, x1, 1148, x2)

inst_316:
// rs1_val==46341 and imm_val==-2, 
// opcode:c.addi; op1:x10; dest:x10 op1val:0xb505; immval:-0x2
TEST_CI_OP( c.addi, x10, 0x00000000, 0xb505, -0x2, x1, 1152, x2)

inst_317:
// rs1_val==46341 and imm_val==-5, 
// opcode:c.addi; op1:x10; dest:x10 op1val:0xb505; immval:-0x5
TEST_CI_OP( c.addi, x10, 0x00000000, 0xb505, -0x5, x1, 1156, x2)

inst_318:
// rs1_val==46341 and imm_val==2, 
// opcode:c.addi; op1:x10; dest:x10 op1val:0xb505; immval:0x2
TEST_CI_OP( c.addi, x10, 0x00000000, 0xb505, 0x2, x1, 1160, x2)

inst_319:
// rs1_val==46341 and imm_val==4, 
// opcode:c.addi; op1:x10; dest:x10 op1val:0xb505; immval:0x4
TEST_CI_OP( c.addi, x10, 0x00000000, 0xb505, 0x4, x1, 1164, x2)

inst_320:
// rs1_val==46341 and imm_val==9, 
// opcode:c.addi; op1:x10; dest:x10 op1val:0xb505; immval:0x9
TEST_CI_OP( c.addi, x10, 0x00000000, 0xb505, 0x9, x1, 1168, x2)

inst_321:
// rs1_val==46341 and imm_val==0, 
// opcode:c.addi; op1:x10; dest:x10 op1val:0xb505; immval:0x0
TEST_CI_OP( c.addi, x10, 0x00000000, 0xb505, 0x0, x1, 1172, x2)

inst_322:
// rs1_val==46341 and imm_val==11, 
// opcode:c.addi; op1:x10; dest:x10 op1val:0xb505; immval:0xb
TEST_CI_OP( c.addi, x10, 0x00000000, 0xb505, 0xb, x1, 1176, x2)

inst_323:
// rs1_val==46341 and imm_val==7, 
// opcode:c.addi; op1:x10; dest:x10 op1val:0xb505; immval:0x7
TEST_CI_OP( c.addi, x10, 0x00000000, 0xb505, 0x7, x1, 1180, x2)

inst_324:
// rs1_val==46341 and imm_val==-1, 
// opcode:c.addi; op1:x10; dest:x10 op1val:0xb505; immval:-0x1
TEST_CI_OP( c.addi, x10, 0x00000000, 0xb505, -0x1, x1, 1184, x2)

inst_325:
// rs1_val==46341 and imm_val==-4, 
// opcode:c.addi; op1:x10; dest:x10 op1val:0xb505; immval:-0x4
TEST_CI_OP( c.addi, x10, 0x00000000, 0xb505, -0x4, x1, 1188, x2)

inst_326:
// rs1_val==6 and imm_val==4, 
// opcode:c.addi; op1:x10; dest:x10 op1val:0x6; immval:0x4
TEST_CI_OP( c.addi, x10, 0x00000000, 0x6, 0x4, x1, 1192, x2)

inst_327:
// rs1_val==6 and imm_val==9, 
// opcode:c.addi; op1:x10; dest:x10 op1val:0x6; immval:0x9
TEST_CI_OP( c.addi, x10, 0x00000000, 0x6, 0x9, x1, 1196, x2)

inst_328:
// rs1_val==6 and imm_val==0, 
// opcode:c.addi; op1:x10; dest:x10 op1val:0x6; immval:0x0
TEST_CI_OP( c.addi, x10, 0x00000000, 0x6, 0x0, x1, 1200, x2)

inst_329:
// rs1_val==6 and imm_val==11, 
// opcode:c.addi; op1:x10; dest:x10 op1val:0x6; immval:0xb
TEST_CI_OP( c.addi, x10, 0x00000000, 0x6, 0xb, x1, 1204, x2)

inst_330:
// rs1_val==6 and imm_val==7, 
// opcode:c.addi; op1:x10; dest:x10 op1val:0x6; immval:0x7
TEST_CI_OP( c.addi, x10, 0x00000000, 0x6, 0x7, x1, 1208, x2)

inst_331:
// rs1_val==6 and imm_val==-1, 
// opcode:c.addi; op1:x10; dest:x10 op1val:0x6; immval:-0x1
TEST_CI_OP( c.addi, x10, 0x00000000, 0x6, -0x1, x1, 1212, x2)

inst_332:
// rs1_val==6 and imm_val==-4, 
// opcode:c.addi; op1:x10; dest:x10 op1val:0x6; immval:-0x4
TEST_CI_OP( c.addi, x10, 0x00000000, 0x6, -0x4, x1, 1216, x2)

inst_333:
// rs1_val==858993460 and imm_val==3, 
// opcode:c.addi; op1:x10; dest:x10 op1val:0x33333334; immval:0x3
TEST_CI_OP( c.addi, x10, 0x00000000, 0x33333334, 0x3, x1, 1220, x2)

inst_334:
// rs1_val==858993460 and imm_val==5, 
// opcode:c.addi; op1:x10; dest:x10 op1val:0x33333334; immval:0x5
TEST_CI_OP( c.addi, x10, 0x00000000, 0x33333334, 0x5, x1, 1224, x2)

inst_335:
// rs1_val==858993460 and imm_val==10, 
// opcode:c.addi; op1:x10; dest:x10 op1val:0x33333334; immval:0xa
TEST_CI_OP( c.addi, x10, 0x00000000, 0x33333334, 0xa, x1, 1228, x2)

inst_336:
// rs1_val==858993460 and imm_val==6, 
// opcode:c.addi; op1:x10; dest:x10 op1val:0x33333334; immval:0x6
TEST_CI_OP( c.addi, x10, 0x00000000, 0x33333334, 0x6, x1, 1232, x2)

inst_337:
// rs1_val==858993460 and imm_val==-2, 
// opcode:c.addi; op1:x10; dest:x10 op1val:0x33333334; immval:-0x2
TEST_CI_OP( c.addi, x10, 0x00000000, 0x33333334, -0x2, x1, 1236, x2)

inst_338:
// rs1_val==858993460 and imm_val==-5, 
// opcode:c.addi; op1:x10; dest:x10 op1val:0x33333334; immval:-0x5
TEST_CI_OP( c.addi, x10, 0x00000000, 0x33333334, -0x5, x1, 1240, x2)

inst_339:
// rs1_val==858993460 and imm_val==2, 
// opcode:c.addi; op1:x10; dest:x10 op1val:0x33333334; immval:0x2
TEST_CI_OP( c.addi, x10, 0x00000000, 0x33333334, 0x2, x1, 1244, x2)

inst_340:
// rs1_val==858993460 and imm_val==4, 
// opcode:c.addi; op1:x10; dest:x10 op1val:0x33333334; immval:0x4
TEST_CI_OP( c.addi, x10, 0x00000000, 0x33333334, 0x4, x1, 1248, x2)

inst_341:
// rs1_val==858993460 and imm_val==9, 
// opcode:c.addi; op1:x10; dest:x10 op1val:0x33333334; immval:0x9
TEST_CI_OP( c.addi, x10, 0x00000000, 0x33333334, 0x9, x1, 1252, x2)

inst_342:
// rs1_val==858993460 and imm_val==0, 
// opcode:c.addi; op1:x10; dest:x10 op1val:0x33333334; immval:0x0
TEST_CI_OP( c.addi, x10, 0x00000000, 0x33333334, 0x0, x1, 1256, x2)

inst_343:
// rs1_val==858993460 and imm_val==11, 
// opcode:c.addi; op1:x10; dest:x10 op1val:0x33333334; immval:0xb
TEST_CI_OP( c.addi, x10, 0x00000000, 0x33333334, 0xb, x1, 1260, x2)

inst_344:
// rs1_val==858993460 and imm_val==7, 
// opcode:c.addi; op1:x10; dest:x10 op1val:0x33333334; immval:0x7
TEST_CI_OP( c.addi, x10, 0x00000000, 0x33333334, 0x7, x1, 1264, x2)

inst_345:
// rs1_val==858993460 and imm_val==-1, 
// opcode:c.addi; op1:x10; dest:x10 op1val:0x33333334; immval:-0x1
TEST_CI_OP( c.addi, x10, 0x00000000, 0x33333334, -0x1, x1, 1268, x2)

inst_346:
// rs1_val==858993460 and imm_val==-4, 
// opcode:c.addi; op1:x10; dest:x10 op1val:0x33333334; immval:-0x4
TEST_CI_OP( c.addi, x10, 0x00000000, 0x33333334, -0x4, x1, 1272, x2)

inst_347:
// rs1_val==1717986919 and imm_val==3, 
// opcode:c.addi; op1:x10; dest:x10 op1val:0x66666667; immval:0x3
TEST_CI_OP( c.addi, x10, 0x00000000, 0x66666667, 0x3, x1, 1276, x2)

inst_348:
// rs1_val==1717986919 and imm_val==5, 
// opcode:c.addi; op1:x10; dest:x10 op1val:0x66666667; immval:0x5
TEST_CI_OP( c.addi, x10, 0x00000000, 0x66666667, 0x5, x1, 1280, x2)

inst_349:
// rs1_val==1717986919 and imm_val==10, 
// opcode:c.addi; op1:x10; dest:x10 op1val:0x66666667; immval:0xa
TEST_CI_OP( c.addi, x10, 0x00000000, 0x66666667, 0xa, x1, 1284, x2)

inst_350:
// rs1_val==1717986919 and imm_val==6, 
// opcode:c.addi; op1:x10; dest:x10 op1val:0x66666667; immval:0x6
TEST_CI_OP( c.addi, x10, 0x00000000, 0x66666667, 0x6, x1, 1288, x2)

inst_351:
// rs1_val==1717986919 and imm_val==-2, 
// opcode:c.addi; op1:x10; dest:x10 op1val:0x66666667; immval:-0x2
TEST_CI_OP( c.addi, x10, 0x00000000, 0x66666667, -0x2, x1, 1292, x2)

inst_352:
// rs1_val==1717986919 and imm_val==-5, 
// opcode:c.addi; op1:x10; dest:x10 op1val:0x66666667; immval:-0x5
TEST_CI_OP( c.addi, x10, 0x00000000, 0x66666667, -0x5, x1, 1296, x2)

inst_353:
// rs1_val==1717986919 and imm_val==2, 
// opcode:c.addi; op1:x10; dest:x10 op1val:0x66666667; immval:0x2
TEST_CI_OP( c.addi, x10, 0x00000000, 0x66666667, 0x2, x1, 1300, x2)

inst_354:
// rs1_val==1717986919 and imm_val==4, 
// opcode:c.addi; op1:x10; dest:x10 op1val:0x66666667; immval:0x4
TEST_CI_OP( c.addi, x10, 0x00000000, 0x66666667, 0x4, x1, 1304, x2)

inst_355:
// rs1_val==1717986919 and imm_val==9, 
// opcode:c.addi; op1:x10; dest:x10 op1val:0x66666667; immval:0x9
TEST_CI_OP( c.addi, x10, 0x00000000, 0x66666667, 0x9, x1, 1308, x2)

inst_356:
// rs1_val==1717986919 and imm_val==0, 
// opcode:c.addi; op1:x10; dest:x10 op1val:0x66666667; immval:0x0
TEST_CI_OP( c.addi, x10, 0x00000000, 0x66666667, 0x0, x1, 1312, x2)

inst_357:
// rs1_val==1717986919 and imm_val==11, 
// opcode:c.addi; op1:x10; dest:x10 op1val:0x66666667; immval:0xb
TEST_CI_OP( c.addi, x10, 0x00000000, 0x66666667, 0xb, x1, 1316, x2)

inst_358:
// rs1_val==1717986919 and imm_val==7, 
// opcode:c.addi; op1:x10; dest:x10 op1val:0x66666667; immval:0x7
TEST_CI_OP( c.addi, x10, 0x00000000, 0x66666667, 0x7, x1, 1320, x2)

inst_359:
// rs1_val==1717986919 and imm_val==-1, 
// opcode:c.addi; op1:x10; dest:x10 op1val:0x66666667; immval:-0x1
TEST_CI_OP( c.addi, x10, 0x00000000, 0x66666667, -0x1, x1, 1324, x2)

inst_360:
// rs1_val==1717986919 and imm_val==-4, 
// opcode:c.addi; op1:x10; dest:x10 op1val:0x66666667; immval:-0x4
TEST_CI_OP( c.addi, x10, 0x00000000, 0x66666667, -0x4, x1, 1328, x2)

inst_361:
// rs1_val==-46339 and imm_val==3, 
// opcode:c.addi; op1:x10; dest:x10 op1val:-0xb503; immval:0x3
TEST_CI_OP( c.addi, x10, 0x00000000, -0xb503, 0x3, x1, 1332, x2)

inst_362:
// rs1_val==-46339 and imm_val==5, 
// opcode:c.addi; op1:x10; dest:x10 op1val:-0xb503; immval:0x5
TEST_CI_OP( c.addi, x10, 0x00000000, -0xb503, 0x5, x1, 1336, x2)

inst_363:
// rs1_val==-46339 and imm_val==10, 
// opcode:c.addi; op1:x10; dest:x10 op1val:-0xb503; immval:0xa
TEST_CI_OP( c.addi, x10, 0x00000000, -0xb503, 0xa, x1, 1340, x2)

inst_364:
// rs1_val==-46339 and imm_val==6, 
// opcode:c.addi; op1:x10; dest:x10 op1val:-0xb503; immval:0x6
TEST_CI_OP( c.addi, x10, 0x00000000, -0xb503, 0x6, x1, 1344, x2)

inst_365:
// rs1_val==-46339 and imm_val==-2, 
// opcode:c.addi; op1:x10; dest:x10 op1val:-0xb503; immval:-0x2
TEST_CI_OP( c.addi, x10, 0x00000000, -0xb503, -0x2, x1, 1348, x2)

inst_366:
// rs1_val==-46339 and imm_val==-5, 
// opcode:c.addi; op1:x10; dest:x10 op1val:-0xb503; immval:-0x5
TEST_CI_OP( c.addi, x10, 0x00000000, -0xb503, -0x5, x1, 1352, x2)

inst_367:
// rs1_val==-46339 and imm_val==2, 
// opcode:c.addi; op1:x10; dest:x10 op1val:-0xb503; immval:0x2
TEST_CI_OP( c.addi, x10, 0x00000000, -0xb503, 0x2, x1, 1356, x2)

inst_368:
// rs1_val==-46339 and imm_val==4, 
// opcode:c.addi; op1:x10; dest:x10 op1val:-0xb503; immval:0x4
TEST_CI_OP( c.addi, x10, 0x00000000, -0xb503, 0x4, x1, 1360, x2)

inst_369:
// rs1_val==-46339 and imm_val==9, 
// opcode:c.addi; op1:x10; dest:x10 op1val:-0xb503; immval:0x9
TEST_CI_OP( c.addi, x10, 0x00000000, -0xb503, 0x9, x1, 1364, x2)

inst_370:
// rs1_val==-46339 and imm_val==0, 
// opcode:c.addi; op1:x10; dest:x10 op1val:-0xb503; immval:0x0
TEST_CI_OP( c.addi, x10, 0x00000000, -0xb503, 0x0, x1, 1368, x2)

inst_371:
// rs1_val==-46339 and imm_val==11, 
// opcode:c.addi; op1:x10; dest:x10 op1val:-0xb503; immval:0xb
TEST_CI_OP( c.addi, x10, 0x00000000, -0xb503, 0xb, x1, 1372, x2)

inst_372:
// rs1_val==-46339 and imm_val==7, 
// opcode:c.addi; op1:x10; dest:x10 op1val:-0xb503; immval:0x7
TEST_CI_OP( c.addi, x10, 0x00000000, -0xb503, 0x7, x1, 1376, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x7_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x7_1:
    .fill 28*(XLEN/32),4,0xdeadbeef


signature_x1_0:
    .fill 345*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
