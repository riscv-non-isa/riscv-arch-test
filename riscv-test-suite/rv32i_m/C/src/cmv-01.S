
// -----------
// This file was generated by riscv_ctg (https://gitlab.com/incoresemi/riscv-compliance/riscv_ctg)
// version   : 0.2.0
// timestamp : Wed Nov 18 05:46:14 2020 GMT
// usage     : riscv_ctg \
//                  -- cgf ('/scratch/git-repo/incoresemi/riscv-compliance/riscv_ctg/sample_cgfs/dataset.cgf', '/scratch/git-repo/incoresemi/riscv-compliance/riscv_ctg/sample_cgfs/rv32ic.cgf') \
//                  -- xlen 32 \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the c.mv instruction of the RISC-V C extension for the cmv covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IC")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*C.*);def TEST_CASE_1=True;",cmv)

RVTEST_SIGBASE( x10,signature_x10_1)

inst_0:
// rs2 != rd and rs2 != 0, rd==x29, rs2==x8, rs2_val == (-2**(xlen-1)), rs2_val == -2147483648
// opcode: c.mv; op2:x8; dest:x29; op2val:-2147483648
TEST_CMV_OP( c.mv, x29, x8, 0x00000000, -2147483648, x10, 0, x11)

inst_1:
// rs2 == rd and rs2 != 0, rd==x13, rs2==x13, rs2_val == 0, rs2_val==0
// opcode: c.mv; op2:x13; dest:x13; op2val:0
TEST_CMV_OP( c.mv, x13, x13, 0x00000000, 0, x10, 4, x11)

inst_2:
// rd==x8, rs2==x22, rs2_val == (2**(xlen-1)-1), rs2_val == 2147483647
// opcode: c.mv; op2:x22; dest:x8; op2val:2147483647
TEST_CMV_OP( c.mv, x8, x22, 0x00000000, 2147483647, x10, 8, x11)

inst_3:
// rd==x22, rs2==x9, rs2_val == 1, 
// opcode: c.mv; op2:x9; dest:x22; op2val:1
TEST_CMV_OP( c.mv, x22, x9, 0x00000000, 1, x10, 12, x11)

inst_4:
// rd==x7, rs2==x26, rs2_val == 2, rs2_val==2
// opcode: c.mv; op2:x26; dest:x7; op2val:2
TEST_CMV_OP( c.mv, x7, x26, 0x00000000, 2, x10, 16, x11)

inst_5:
// rd==x18, rs2==x16, rs2_val == 4, rs2_val==4
// opcode: c.mv; op2:x16; dest:x18; op2val:4
TEST_CMV_OP( c.mv, x18, x16, 0x00000000, 4, x10, 20, x11)

inst_6:
// rd==x17, rs2==x25, rs2_val == 8, 
// opcode: c.mv; op2:x25; dest:x17; op2val:8
TEST_CMV_OP( c.mv, x17, x25, 0x00000000, 8, x10, 24, x11)

inst_7:
// rd==x27, rs2==x23, rs2_val == 16, 
// opcode: c.mv; op2:x23; dest:x27; op2val:16
TEST_CMV_OP( c.mv, x27, x23, 0x00000000, 16, x10, 28, x11)

inst_8:
// rd==x26, rs2==x28, rs2_val == 32, 
// opcode: c.mv; op2:x28; dest:x26; op2val:32
TEST_CMV_OP( c.mv, x26, x28, 0x00000000, 32, x10, 32, x11)

inst_9:
// rd==x0, rs2==x15, rs2_val == 64, 
// opcode: c.mv; op2:x15; dest:x0; op2val:64
TEST_CMV_OP( c.mv, x0, x15, 0x00000000, 64, x10, 36, x11)

inst_10:
// rd==x16, rs2==x30, rs2_val == 128, 
// opcode: c.mv; op2:x30; dest:x16; op2val:128
TEST_CMV_OP( c.mv, x16, x30, 0x00000000, 128, x10, 40, x11)

inst_11:
// rd==x12, rs2==x3, rs2_val == 256, 
// opcode: c.mv; op2:x3; dest:x12; op2val:256
TEST_CMV_OP( c.mv, x12, x3, 0x00000000, 256, x10, 44, x11)

inst_12:
// rd==x2, rs2==x20, rs2_val == 512, 
// opcode: c.mv; op2:x20; dest:x2; op2val:512
TEST_CMV_OP( c.mv, x2, x20, 0x00000000, 512, x10, 48, x11)

inst_13:
// rd==x25, rs2==x7, rs2_val == 1024, 
// opcode: c.mv; op2:x7; dest:x25; op2val:1024
TEST_CMV_OP( c.mv, x25, x7, 0x00000000, 1024, x10, 52, x11)

inst_14:
// rd==x24, rs2==x21, rs2_val == 2048, 
// opcode: c.mv; op2:x21; dest:x24; op2val:2048
TEST_CMV_OP( c.mv, x24, x21, 0x00000000, 2048, x10, 56, x11)

inst_15:
// rd==x5, rs2==x6, rs2_val == 4096, 
// opcode: c.mv; op2:x6; dest:x5; op2val:4096
TEST_CMV_OP( c.mv, x5, x6, 0x00000000, 4096, x10, 60, x11)

inst_16:
// rd==x21, rs2==x12, rs2_val == 8192, 
// opcode: c.mv; op2:x12; dest:x21; op2val:8192
TEST_CMV_OP( c.mv, x21, x12, 0x00000000, 8192, x10, 64, x11)

inst_17:
// rd==x15, rs2==x29, rs2_val == 16384, 
// opcode: c.mv; op2:x29; dest:x15; op2val:16384
TEST_CMV_OP( c.mv, x15, x29, 0x00000000, 16384, x10, 68, x11)

inst_18:
// rd==x1, rs2==x17, rs2_val == 32768, 
// opcode: c.mv; op2:x17; dest:x1; op2val:32768
TEST_CMV_OP( c.mv, x1, x17, 0x00000000, 32768, x10, 72, x11)

inst_19:
// rd==x23, rs2==x5, rs2_val == 65536, 
// opcode: c.mv; op2:x5; dest:x23; op2val:65536
TEST_CMV_OP( c.mv, x23, x5, 0x00000000, 65536, x10, 76, x11)

inst_20:
// rd==x3, rs2==x2, rs2_val == 131072, 
// opcode: c.mv; op2:x2; dest:x3; op2val:131072
TEST_CMV_OP( c.mv, x3, x2, 0x00000000, 131072, x10, 80, x11)

inst_21:
// rd==x28, rs2==x19, rs2_val == 262144, 
// opcode: c.mv; op2:x19; dest:x28; op2val:262144
TEST_CMV_OP( c.mv, x28, x19, 0x00000000, 262144, x10, 84, x11)

inst_22:
// rd==x4, rs2==x18, rs2_val == 524288, 
// opcode: c.mv; op2:x18; dest:x4; op2val:524288
TEST_CMV_OP( c.mv, x4, x18, 0x00000000, 524288, x10, 88, x11)

inst_23:
// rd==x9, rs2==x24, rs2_val == 1048576, 
// opcode: c.mv; op2:x24; dest:x9; op2val:1048576
TEST_CMV_OP( c.mv, x9, x24, 0x00000000, 1048576, x10, 92, x3)

inst_24:
// rd==x6, rs2==x11, rs2_val == 2097152, 
// opcode: c.mv; op2:x11; dest:x6; op2val:2097152
TEST_CMV_OP( c.mv, x6, x11, 0x00000000, 2097152, x10, 96, x3)
RVTEST_SIGBASE( x2,signature_x2_0)

inst_25:
// rd==x11, rs2==x27, rs2_val == 4194304, 
// opcode: c.mv; op2:x27; dest:x11; op2val:4194304
TEST_CMV_OP( c.mv, x11, x27, 0x00000000, 4194304, x2, 0, x3)

inst_26:
// rd==x14, rs2==x1, rs2_val == 8388608, 
// opcode: c.mv; op2:x1; dest:x14; op2val:8388608
TEST_CMV_OP( c.mv, x14, x1, 0x00000000, 8388608, x2, 4, x3)

inst_27:
// rd==x20, rs2==x10, rs2_val == 16777216, 
// opcode: c.mv; op2:x10; dest:x20; op2val:16777216
TEST_CMV_OP( c.mv, x20, x10, 0x00000000, 16777216, x2, 8, x3)

inst_28:
// rd==x19, rs2==x31, rs2_val == 33554432, 
// opcode: c.mv; op2:x31; dest:x19; op2val:33554432
TEST_CMV_OP( c.mv, x19, x31, 0x00000000, 33554432, x2, 12, x3)

inst_29:
// rd==x10, rs2==x4, rs2_val == 67108864, 
// opcode: c.mv; op2:x4; dest:x10; op2val:67108864
TEST_CMV_OP( c.mv, x10, x4, 0x00000000, 67108864, x2, 16, x3)

inst_30:
// rd==x30, rs2==x14, rs2_val == 134217728, 
// opcode: c.mv; op2:x14; dest:x30; op2val:134217728
TEST_CMV_OP( c.mv, x30, x14, 0x00000000, 134217728, x2, 20, x3)

inst_31:
// rd==x31, rs2_val == 268435456, 
// opcode: c.mv; op2:x13; dest:x31; op2val:268435456
TEST_CMV_OP( c.mv, x31, x13, 0x00000000, 268435456, x2, 24, x3)

inst_32:
// rs2_val == 536870912, 
// opcode: c.mv; op2:x11; dest:x10; op2val:536870912
TEST_CMV_OP( c.mv, x10, x11, 0x00000000, 536870912, x2, 28, x3)

inst_33:
// rs2_val == 1073741824, 
// opcode: c.mv; op2:x11; dest:x10; op2val:1073741824
TEST_CMV_OP( c.mv, x10, x11, 0x00000000, 1073741824, x2, 32, x3)

inst_34:
// rs2_val == -2, 
// opcode: c.mv; op2:x11; dest:x10; op2val:-2
TEST_CMV_OP( c.mv, x10, x11, 0x00000000, -2, x2, 36, x3)

inst_35:
// rs2_val == -3, 
// opcode: c.mv; op2:x11; dest:x10; op2val:-3
TEST_CMV_OP( c.mv, x10, x11, 0x00000000, -3, x2, 40, x3)

inst_36:
// rs2_val == -5, 
// opcode: c.mv; op2:x11; dest:x10; op2val:-5
TEST_CMV_OP( c.mv, x10, x11, 0x00000000, -5, x2, 44, x3)

inst_37:
// rs2_val == -9, 
// opcode: c.mv; op2:x11; dest:x10; op2val:-9
TEST_CMV_OP( c.mv, x10, x11, 0x00000000, -9, x2, 48, x3)

inst_38:
// rs2_val == -17, 
// opcode: c.mv; op2:x11; dest:x10; op2val:-17
TEST_CMV_OP( c.mv, x10, x11, 0x00000000, -17, x2, 52, x3)

inst_39:
// rs2_val == -33, 
// opcode: c.mv; op2:x11; dest:x10; op2val:-33
TEST_CMV_OP( c.mv, x10, x11, 0x00000000, -33, x2, 56, x3)

inst_40:
// rs2_val == -65, 
// opcode: c.mv; op2:x11; dest:x10; op2val:-65
TEST_CMV_OP( c.mv, x10, x11, 0x00000000, -65, x2, 60, x3)

inst_41:
// rs2_val == -129, 
// opcode: c.mv; op2:x11; dest:x10; op2val:-129
TEST_CMV_OP( c.mv, x10, x11, 0x00000000, -129, x2, 64, x3)

inst_42:
// rs2_val == -257, 
// opcode: c.mv; op2:x11; dest:x10; op2val:-257
TEST_CMV_OP( c.mv, x10, x11, 0x00000000, -257, x2, 68, x3)

inst_43:
// rs2_val == -513, 
// opcode: c.mv; op2:x11; dest:x10; op2val:-513
TEST_CMV_OP( c.mv, x10, x11, 0x00000000, -513, x2, 72, x3)

inst_44:
// rs2_val == -1025, 
// opcode: c.mv; op2:x11; dest:x10; op2val:-1025
TEST_CMV_OP( c.mv, x10, x11, 0x00000000, -1025, x2, 76, x3)

inst_45:
// rs2_val == -2049, 
// opcode: c.mv; op2:x11; dest:x10; op2val:-2049
TEST_CMV_OP( c.mv, x10, x11, 0x00000000, -2049, x2, 80, x3)

inst_46:
// rs2_val == -4097, 
// opcode: c.mv; op2:x11; dest:x10; op2val:-4097
TEST_CMV_OP( c.mv, x10, x11, 0x00000000, -4097, x2, 84, x3)

inst_47:
// rs2_val == -8193, 
// opcode: c.mv; op2:x11; dest:x10; op2val:-8193
TEST_CMV_OP( c.mv, x10, x11, 0x00000000, -8193, x2, 88, x3)

inst_48:
// rs2_val == -16385, 
// opcode: c.mv; op2:x11; dest:x10; op2val:-16385
TEST_CMV_OP( c.mv, x10, x11, 0x00000000, -16385, x2, 92, x3)

inst_49:
// rs2_val == -32769, 
// opcode: c.mv; op2:x11; dest:x10; op2val:-32769
TEST_CMV_OP( c.mv, x10, x11, 0x00000000, -32769, x2, 96, x3)

inst_50:
// rs2_val == -65537, 
// opcode: c.mv; op2:x11; dest:x10; op2val:-65537
TEST_CMV_OP( c.mv, x10, x11, 0x00000000, -65537, x2, 100, x3)

inst_51:
// rs2_val == -131073, 
// opcode: c.mv; op2:x11; dest:x10; op2val:-131073
TEST_CMV_OP( c.mv, x10, x11, 0x00000000, -131073, x2, 104, x3)

inst_52:
// rs2_val == -262145, 
// opcode: c.mv; op2:x11; dest:x10; op2val:-262145
TEST_CMV_OP( c.mv, x10, x11, 0x00000000, -262145, x2, 108, x3)

inst_53:
// rs2_val == -524289, 
// opcode: c.mv; op2:x11; dest:x10; op2val:-524289
TEST_CMV_OP( c.mv, x10, x11, 0x00000000, -524289, x2, 112, x3)

inst_54:
// rs2_val == -1048577, 
// opcode: c.mv; op2:x11; dest:x10; op2val:-1048577
TEST_CMV_OP( c.mv, x10, x11, 0x00000000, -1048577, x2, 116, x3)

inst_55:
// rs2_val == -536870913, 
// opcode: c.mv; op2:x11; dest:x10; op2val:-536870913
TEST_CMV_OP( c.mv, x10, x11, 0x00000000, -536870913, x2, 120, x3)

inst_56:
// rs2_val == -1073741825, 
// opcode: c.mv; op2:x11; dest:x10; op2val:-1073741825
TEST_CMV_OP( c.mv, x10, x11, 0x00000000, -1073741825, x2, 124, x3)

inst_57:
// rs2_val == 1431655765, rs2_val==1431655765
// opcode: c.mv; op2:x11; dest:x10; op2val:1431655765
TEST_CMV_OP( c.mv, x10, x11, 0x00000000, 1431655765, x2, 128, x3)

inst_58:
// rs2_val == -1431655766, rs2_val==-1431655766
// opcode: c.mv; op2:x11; dest:x10; op2val:-1431655766
TEST_CMV_OP( c.mv, x10, x11, 0x00000000, -1431655766, x2, 132, x3)

inst_59:
// rs2_val==3, 
// opcode: c.mv; op2:x11; dest:x10; op2val:3
TEST_CMV_OP( c.mv, x10, x11, 0x00000000, 3, x2, 136, x3)

inst_60:
// rs2_val==5, 
// opcode: c.mv; op2:x11; dest:x10; op2val:5
TEST_CMV_OP( c.mv, x10, x11, 0x00000000, 5, x2, 140, x3)

inst_61:
// rs2_val==858993459, 
// opcode: c.mv; op2:x11; dest:x10; op2val:858993459
TEST_CMV_OP( c.mv, x10, x11, 0x00000000, 858993459, x2, 144, x3)

inst_62:
// rs2_val==1717986918, 
// opcode: c.mv; op2:x11; dest:x10; op2val:1717986918
TEST_CMV_OP( c.mv, x10, x11, 0x00000000, 1717986918, x2, 148, x3)

inst_63:
// rs2_val==-46340, 
// opcode: c.mv; op2:x11; dest:x10; op2val:-46340
TEST_CMV_OP( c.mv, x10, x11, 0x00000000, -46340, x2, 152, x3)

inst_64:
// rs2_val==46340, 
// opcode: c.mv; op2:x11; dest:x10; op2val:46340
TEST_CMV_OP( c.mv, x10, x11, 0x00000000, 46340, x2, 156, x3)

inst_65:
// rs2_val==1431655764, 
// opcode: c.mv; op2:x11; dest:x10; op2val:1431655764
TEST_CMV_OP( c.mv, x10, x11, 0x00000000, 1431655764, x2, 160, x3)

inst_66:
// rs2_val==858993458, 
// opcode: c.mv; op2:x11; dest:x10; op2val:858993458
TEST_CMV_OP( c.mv, x10, x11, 0x00000000, 858993458, x2, 164, x3)

inst_67:
// rs2_val==1717986917, 
// opcode: c.mv; op2:x11; dest:x10; op2val:1717986917
TEST_CMV_OP( c.mv, x10, x11, 0x00000000, 1717986917, x2, 168, x3)

inst_68:
// rs2_val==46339, 
// opcode: c.mv; op2:x11; dest:x10; op2val:46339
TEST_CMV_OP( c.mv, x10, x11, 0x00000000, 46339, x2, 172, x3)

inst_69:
// rs2_val == -2097153, 
// opcode: c.mv; op2:x11; dest:x10; op2val:-2097153
TEST_CMV_OP( c.mv, x10, x11, 0x00000000, -2097153, x2, 176, x3)

inst_70:
// rs2_val==46341, 
// opcode: c.mv; op2:x11; dest:x10; op2val:46341
TEST_CMV_OP( c.mv, x10, x11, 0x00000000, 46341, x2, 180, x3)

inst_71:
// rs2_val==-46339, 
// opcode: c.mv; op2:x11; dest:x10; op2val:-46339
TEST_CMV_OP( c.mv, x10, x11, 0x00000000, -46339, x2, 184, x3)

inst_72:
// rs2_val==1431655766, 
// opcode: c.mv; op2:x11; dest:x10; op2val:1431655766
TEST_CMV_OP( c.mv, x10, x11, 0x00000000, 1431655766, x2, 188, x3)

inst_73:
// rs2_val==-1431655765, 
// opcode: c.mv; op2:x11; dest:x10; op2val:-1431655765
TEST_CMV_OP( c.mv, x10, x11, 0x00000000, -1431655765, x2, 192, x3)

inst_74:
// rs2_val==6, 
// opcode: c.mv; op2:x11; dest:x10; op2val:6
TEST_CMV_OP( c.mv, x10, x11, 0x00000000, 6, x2, 196, x3)

inst_75:
// rs2_val==858993460, 
// opcode: c.mv; op2:x11; dest:x10; op2val:858993460
TEST_CMV_OP( c.mv, x10, x11, 0x00000000, 858993460, x2, 200, x3)

inst_76:
// rs2_val==1717986919, 
// opcode: c.mv; op2:x11; dest:x10; op2val:1717986919
TEST_CMV_OP( c.mv, x10, x11, 0x00000000, 1717986919, x2, 204, x3)

inst_77:
// rs2_val == -4194305, 
// opcode: c.mv; op2:x11; dest:x10; op2val:-4194305
TEST_CMV_OP( c.mv, x10, x11, 0x00000000, -4194305, x2, 208, x3)

inst_78:
// rs2_val == -8388609, 
// opcode: c.mv; op2:x11; dest:x10; op2val:-8388609
TEST_CMV_OP( c.mv, x10, x11, 0x00000000, -8388609, x2, 212, x3)

inst_79:
// rs2_val == -16777217, 
// opcode: c.mv; op2:x11; dest:x10; op2val:-16777217
TEST_CMV_OP( c.mv, x10, x11, 0x00000000, -16777217, x2, 216, x3)

inst_80:
// rs2_val == -33554433, 
// opcode: c.mv; op2:x11; dest:x10; op2val:-33554433
TEST_CMV_OP( c.mv, x10, x11, 0x00000000, -33554433, x2, 220, x3)

inst_81:
// rs2_val == -67108865, 
// opcode: c.mv; op2:x11; dest:x10; op2val:-67108865
TEST_CMV_OP( c.mv, x10, x11, 0x00000000, -67108865, x2, 224, x3)

inst_82:
// rs2_val == -134217729, 
// opcode: c.mv; op2:x11; dest:x10; op2val:-134217729
TEST_CMV_OP( c.mv, x10, x11, 0x00000000, -134217729, x2, 228, x3)

inst_83:
// rs2_val == -268435457, 
// opcode: c.mv; op2:x11; dest:x10; op2val:-268435457
TEST_CMV_OP( c.mv, x10, x11, 0x00000000, -268435457, x2, 232, x3)

inst_84:
// rs2_val == 64, 
// opcode: c.mv; op2:x11; dest:x10; op2val:64
TEST_CMV_OP( c.mv, x10, x11, 0x00000000, 64, x2, 236, x3)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x10_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x10_1:
    .fill 25*(XLEN/32),4,0xdeadbeef


signature_x2_0:
    .fill 60*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
