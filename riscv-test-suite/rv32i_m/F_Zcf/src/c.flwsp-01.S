
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.11.0
// timestamp : Thu Aug 10 08:04:09 2023 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /home/riscv/riscv-ctg/sample_cgfs/dataset.cgf \
//                  --cgf /home/riscv/riscv-ctg/sample_cgfs/RV32C/flwsp.cgf \
 \
//                  -- xlen 32  \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the c.flwsp instruction of the RISC-V RV32F_Zcf extension for the c.flwsp covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zcf")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*Zcf.*);def TEST_CASE_1=True;",c.flwsp)

RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x4,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_0:
// rd==f31, imm_val == 0 and fcsr == 0, 
// opcode:c.flwsp; op1:x2; dest:f31; immval:0x0; align:0; flagreg:x4
TEST_LOAD_F(x1,x3,0,x2,f31,0x0,c.flwsp,0,x4)

inst_1:
// rd==f30, imm_val > 0  and fcsr == 0, 
// opcode:c.flwsp; op1:x2; dest:f30; immval:0xfc; align:0; flagreg:x4
TEST_LOAD_F(x1,x3,0,x2,f30,0xfc,c.flwsp,0,x4)

inst_2:
// rd==f29, imm_val == 84, 
// opcode:c.flwsp; op1:x2; dest:f29; immval:0x54; align:0; flagreg:x4
TEST_LOAD_F(x1,x3,159,x2,f29,0x54,c.flwsp,0,x4)

inst_3:
// rd==f28, imm_val == 168, 
// opcode:c.flwsp; op1:x2; dest:f28; immval:0xa8; align:0; flagreg:x4
TEST_LOAD_F(x1,x3,159,x2,f28,0xa8,c.flwsp,0,x4)

inst_4:
// rd==f27, imm_val == 248, 
// opcode:c.flwsp; op1:x2; dest:f27; immval:0xf8; align:0; flagreg:x4
TEST_LOAD_F(x1,x3,159,x2,f27,0xf8,c.flwsp,0,x4)

inst_5:
// rd==f26, imm_val == 244, 
// opcode:c.flwsp; op1:x2; dest:f26; immval:0xf4; align:0; flagreg:x4
TEST_LOAD_F(x1,x3,159,x2,f26,0xf4,c.flwsp,0,x4)

inst_6:
// rd==f25, imm_val == 236, 
// opcode:c.flwsp; op1:x2; dest:f25; immval:0xec; align:0; flagreg:x4
TEST_LOAD_F(x1,x3,159,x2,f25,0xec,c.flwsp,0,x4)

inst_7:
// rd==f24, imm_val == 220, 
// opcode:c.flwsp; op1:x2; dest:f24; immval:0xdc; align:0; flagreg:x4
TEST_LOAD_F(x1,x3,159,x2,f24,0xdc,c.flwsp,0,x4)

inst_8:
// rd==f23, imm_val == 188, 
// opcode:c.flwsp; op1:x2; dest:f23; immval:0xbc; align:0; flagreg:x4
TEST_LOAD_F(x1,x3,159,x2,f23,0xbc,c.flwsp,0,x4)

inst_9:
// rd==f22, imm_val == 124, 
// opcode:c.flwsp; op1:x2; dest:f22; immval:0x7c; align:0; flagreg:x4
TEST_LOAD_F(x1,x3,159,x2,f22,0x7c,c.flwsp,0,x4)

inst_10:
// rd==f21, imm_val == 4, 
// opcode:c.flwsp; op1:x2; dest:f21; immval:0x4; align:0; flagreg:x4
TEST_LOAD_F(x1,x3,159,x2,f21,0x4,c.flwsp,0,x4)

inst_11:
// rd==f20, imm_val == 8, 
// opcode:c.flwsp; op1:x2; dest:f20; immval:0x8; align:0; flagreg:x4
TEST_LOAD_F(x1,x3,159,x2,f20,0x8,c.flwsp,0,x4)

inst_12:
// rd==f19, imm_val == 16, 
// opcode:c.flwsp; op1:x2; dest:f19; immval:0x10; align:0; flagreg:x4
TEST_LOAD_F(x1,x3,159,x2,f19,0x10,c.flwsp,0,x4)

inst_13:
// rd==f18, imm_val == 32, 
// opcode:c.flwsp; op1:x2; dest:f18; immval:0x20; align:0; flagreg:x4
TEST_LOAD_F(x1,x3,159,x2,f18,0x20,c.flwsp,0,x4)

inst_14:
// rd==f17, imm_val == 64, 
// opcode:c.flwsp; op1:x2; dest:f17; immval:0x40; align:0; flagreg:x4
TEST_LOAD_F(x1,x3,159,x2,f17,0x40,c.flwsp,0,x4)

inst_15:
// rd==f16, imm_val == 128, 
// opcode:c.flwsp; op1:x2; dest:f16; immval:0x80; align:0; flagreg:x4
TEST_LOAD_F(x1,x3,159,x2,f16,0x80,c.flwsp,0,x4)

inst_16:
// rd==f15, 
// opcode:c.flwsp; op1:x2; dest:f15; immval:0x0; align:0; flagreg:x4
TEST_LOAD_F(x1,x3,0,x2,f15,0x0,c.flwsp,0,x4)

inst_17:
// rd==f14, 
// opcode:c.flwsp; op1:x2; dest:f14; immval:0x0; align:0; flagreg:x4
TEST_LOAD_F(x1,x3,0,x2,f14,0x0,c.flwsp,0,x4)

inst_18:
// rd==f13, 
// opcode:c.flwsp; op1:x2; dest:f13; immval:0x0; align:0; flagreg:x4
TEST_LOAD_F(x1,x3,0,x2,f13,0x0,c.flwsp,0,x4)

inst_19:
// rd==f12, 
// opcode:c.flwsp; op1:x2; dest:f12; immval:0x0; align:0; flagreg:x4
TEST_LOAD_F(x1,x3,0,x2,f12,0x0,c.flwsp,0,x4)

inst_20:
// rd==f11, 
// opcode:c.flwsp; op1:x2; dest:f11; immval:0x0; align:0; flagreg:x4
TEST_LOAD_F(x1,x3,0,x2,f11,0x0,c.flwsp,0,x4)

inst_21:
// rd==f10, 
// opcode:c.flwsp; op1:x2; dest:f10; immval:0x0; align:0; flagreg:x4
TEST_LOAD_F(x1,x3,0,x2,f10,0x0,c.flwsp,0,x4)

inst_22:
// rd==f9, 
// opcode:c.flwsp; op1:x2; dest:f9; immval:0x0; align:0; flagreg:x4
TEST_LOAD_F(x1,x3,0,x2,f9,0x0,c.flwsp,0,x4)

inst_23:
// rd==f8, 
// opcode:c.flwsp; op1:x2; dest:f8; immval:0x0; align:0; flagreg:x4
TEST_LOAD_F(x1,x3,0,x2,f8,0x0,c.flwsp,0,x4)

inst_24:
// rd==f7, 
// opcode:c.flwsp; op1:x2; dest:f7; immval:0x0; align:0; flagreg:x4
TEST_LOAD_F(x1,x3,0,x2,f7,0x0,c.flwsp,0,x4)

inst_25:
// rd==f6, 
// opcode:c.flwsp; op1:x2; dest:f6; immval:0x0; align:0; flagreg:x4
TEST_LOAD_F(x1,x3,0,x2,f6,0x0,c.flwsp,0,x4)

inst_26:
// rd==f5, 
// opcode:c.flwsp; op1:x2; dest:f5; immval:0x0; align:0; flagreg:x4
TEST_LOAD_F(x1,x3,0,x2,f5,0x0,c.flwsp,0,x4)

inst_27:
// rd==f4, 
// opcode:c.flwsp; op1:x2; dest:f4; immval:0x0; align:0; flagreg:x4
TEST_LOAD_F(x1,x3,0,x2,f4,0x0,c.flwsp,0,x4)

inst_28:
// rd==f3, 
// opcode:c.flwsp; op1:x2; dest:f3; immval:0x0; align:0; flagreg:x4
TEST_LOAD_F(x1,x3,0,x2,f3,0x0,c.flwsp,0,x4)

inst_29:
// rd==f2, 
// opcode:c.flwsp; op1:x2; dest:f2; immval:0x0; align:0; flagreg:x4
TEST_LOAD_F(x1,x3,0,x2,f2,0x0,c.flwsp,0,x4)

inst_30:
// rd==f1, 
// opcode:c.flwsp; op1:x2; dest:f1; immval:0x0; align:0; flagreg:x4
TEST_LOAD_F(x1,x3,0,x2,f1,0x0,c.flwsp,0,x4)

inst_31:
// rd==f0, 
// opcode:c.flwsp; op1:x2; dest:f0; immval:0x0; align:0; flagreg:x4
TEST_LOAD_F(x1,x3,0,x2,f0,0x0,c.flwsp,0,x4)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;



signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 64*((SIGALIGN)/4),4,0xdeadbeef

#ifdef rvtest_mtrap_routine
tsig_begin_canary:
CANARY;

mtrap_sigptr:
    .fill 64*XLEN/32,4,0xdeadbeef

tsig_end_canary:
CANARY;
#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif


sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
