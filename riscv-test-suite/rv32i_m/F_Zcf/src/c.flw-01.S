
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.11.0
// timestamp : Thu Aug  3 07:43:25 2023 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /home/riscv/riscv-ctg/sample_cgfs/dataset.cgf \
//                  --cgf /home/riscv/riscv-ctg/sample_cgfs/RV32C/FLW.cgf \
 \
//                  -- xlen 32  \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the c.flw instruction of the RISC-V RV32F_Zcf extension for the c.flw covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zcf")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*Zcf.*);def TEST_CASE_1=True;",c.flw)

RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_0:
// rs1==x15, rd==f15,imm_val == 0 and fcsr == 0, 
// opcode:c.flw; op1:x15; dest:f15; immval:0x0; align:0; flagreg:x4
TEST_LOAD_F(x1,x2,0,x15,f15,0x0,c.flw,0,x4)

inst_1:
// rs1==x14, rd==f14,imm_val > 0  and fcsr == 0, 
// opcode:c.flw; op1:x14; dest:f14; immval:0x7c; align:0; flagreg:x4
TEST_LOAD_F(x1,x2,0,x14,f14,0x7c,c.flw,0,x4)

inst_2:
// rs1==x13, rd==f13,imm_val == 84, 
// opcode:c.flw; op1:x13; dest:f13; immval:0x54; align:0; flagreg:x4
TEST_LOAD_F(x1,x2,159,x13,f13,0x54,c.flw,0,x4)

inst_3:
// rs1==x12, rd==f12,imm_val == 40, 
// opcode:c.flw; op1:x12; dest:f12; immval:0x28; align:0; flagreg:x4
TEST_LOAD_F(x1,x2,159,x12,f12,0x28,c.flw,0,x4)

inst_4:
// rs1==x11, rd==f11,imm_val == 4, 
// opcode:c.flw; op1:x11; dest:f11; immval:0x4; align:0; flagreg:x4
TEST_LOAD_F(x1,x2,159,x11,f11,0x4,c.flw,0,x4)

inst_5:
// rs1==x10, rd==f10,imm_val == 120, 
// opcode:c.flw; op1:x10; dest:f10; immval:0x78; align:0; flagreg:x4
TEST_LOAD_F(x1,x2,159,x10,f10,0x78,c.flw,0,x4)

inst_6:
// rs1==x9, rd==f9,imm_val == 116, 
// opcode:c.flw; op1:x9; dest:f9; immval:0x74; align:0; flagreg:x4
TEST_LOAD_F(x1,x2,159,x9,f9,0x74,c.flw,0,x4)

inst_7:
// rs1==x8, rd==f8,imm_val == 108, 
// opcode:c.flw; op1:x8; dest:f8; immval:0x6c; align:0; flagreg:x4
TEST_LOAD_F(x1,x2,159,x8,f8,0x6c,c.flw,0,x4)

inst_8:
// imm_val == 92, 
// opcode:c.flw; op1:x15; dest:f15; immval:0x5c; align:0; flagreg:x4
TEST_LOAD_F(x1,x2,159,x15,f15,0x5c,c.flw,0,x4)

inst_9:
// imm_val == 60, 
// opcode:c.flw; op1:x15; dest:f15; immval:0x3c; align:0; flagreg:x4
TEST_LOAD_F(x1,x2,159,x15,f15,0x3c,c.flw,0,x4)

inst_10:
// imm_val == 8, 
// opcode:c.flw; op1:x15; dest:f15; immval:0x8; align:0; flagreg:x4
TEST_LOAD_F(x1,x2,159,x15,f15,0x8,c.flw,0,x4)

inst_11:
// imm_val == 16, 
// opcode:c.flw; op1:x15; dest:f15; immval:0x10; align:0; flagreg:x4
TEST_LOAD_F(x1,x2,159,x15,f15,0x10,c.flw,0,x4)

inst_12:
// imm_val == 32, 
// opcode:c.flw; op1:x15; dest:f15; immval:0x20; align:0; flagreg:x4
TEST_LOAD_F(x1,x2,159,x15,f15,0x20,c.flw,0,x4)

inst_13:
// imm_val == 64, 
// opcode:c.flw; op1:x15; dest:f15; immval:0x40; align:0; flagreg:x4
TEST_LOAD_F(x1,x2,159,x15,f15,0x40,c.flw,0,x4)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:














RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;



signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 28*((SIGALIGN)/4),4,0xdeadbeef

#ifdef rvtest_mtrap_routine
tsig_begin_canary:
CANARY;

mtrap_sigptr:
    .fill 64*XLEN/32,4,0xdeadbeef

tsig_end_canary:
CANARY;
#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif


sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
