
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.12.2
// timestamp : Wed May 29 11:42:16 2024 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /home/vsysuser/verif/newctg/riscv-ctg/sample_cgfs/dataset.cgf \
//                  --cgf /home/vsysuser/verif/newctg/riscv-ctg/sample_cgfs/rv32zilsd.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the c.ldspz instruction of the RISC-V RV32CZilsd_Zcmlsd extension for the cldsp covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32ICZilsd_Zcmlsd")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*C.*Zilsd.*Zcmlsd.*);def TEST_CASE_1=True;",cldsp)

RVTEST_SIGBASE(x1,signature_x1_1)

inst_0:
// rd==x20, imm_val == 0, 
// opcode: c.ldspz; op1:x2; dest:x20; immval:0x0; rd_hi:x21
TEST_LOAD_ZILSD(x1,x3,0,x2,x20,x21,0x0,0*XLEN/8,c.ldsp,0)

inst_1:
// rd==x4, imm_val > 0, imm_val == 32
// opcode: c.ldspz; op1:x2; dest:x4; immval:0x20; rd_hi:x5
TEST_LOAD_ZILSD(x1,x3,0,x2,x4,x5,0x20,2*XLEN/8,c.ldsp,0)

inst_2:
// rd==x16, imm_val == 168, 
// opcode: c.ldspz; op1:x2; dest:x16; immval:0xa8; rd_hi:x17
TEST_LOAD_ZILSD(x1,x3,0,x2,x16,x17,0xa8,4*XLEN/8,c.ldsp,0)

inst_3:
// rd==x28, imm_val == 336, 
// opcode: c.ldspz; op1:x2; dest:x28; immval:0x150; rd_hi:x29
TEST_LOAD_ZILSD(x1,x3,0,x2,x28,x29,0x150,6*XLEN/8,c.ldsp,0)

inst_4:
// rd==x18, imm_val == 496, 
// opcode: c.ldspz; op1:x2; dest:x18; immval:0x1f0; rd_hi:x19
TEST_LOAD_ZILSD(x1,x3,0,x2,x18,x19,0x1f0,8*XLEN/8,c.ldsp,0)

inst_5:
// rd==x14, imm_val == 488, 
// opcode: c.ldspz; op1:x2; dest:x14; immval:0x1e8; rd_hi:x15
TEST_LOAD_ZILSD(x1,x3,0,x2,x14,x15,0x1e8,10*XLEN/8,c.ldsp,0)

inst_6:
// rd==x6, imm_val == 472, 
// opcode: c.ldspz; op1:x2; dest:x6; immval:0x1d8; rd_hi:x7
TEST_LOAD_ZILSD(x1,x3,0,x2,x6,x7,0x1d8,12*XLEN/8,c.ldsp,0)

inst_7:
// rd==x8, imm_val == 440, 
// opcode: c.ldspz; op1:x2; dest:x8; immval:0x1b8; rd_hi:x9
TEST_LOAD_ZILSD(x1,x3,0,x2,x8,x9,0x1b8,14*XLEN/8,c.ldsp,0)

inst_8:
// rd==x26, imm_val == 376, 
// opcode: c.ldspz; op1:x2; dest:x26; immval:0x178; rd_hi:x27
TEST_LOAD_ZILSD(x1,x3,0,x2,x26,x27,0x178,16*XLEN/8,c.ldsp,0)

inst_9:
// rd==x30, imm_val == 248, 
// opcode: c.ldspz; op1:x2; dest:x30; immval:0xf8; rd_hi:x31
TEST_LOAD_ZILSD(x1,x3,0,x2,x30,x31,0xf8,18*XLEN/8,c.ldsp,0)

inst_10:
// rd==x12, imm_val == 8, 
// opcode: c.ldspz; op1:x2; dest:x12; immval:0x8; rd_hi:x13
TEST_LOAD_ZILSD(x1,x3,0,x2,x12,x13,0x8,20*XLEN/8,c.ldsp,0)

inst_11:
// rd==x22, imm_val == 16, 
// opcode: c.ldspz; op1:x2; dest:x22; immval:0x10; rd_hi:x23
TEST_LOAD_ZILSD(x1,x3,0,x2,x22,x23,0x10,22*XLEN/8,c.ldsp,0)

inst_12:
// rd==x24, imm_val == 64, 
// opcode: c.ldspz; op1:x2; dest:x24; immval:0x40; rd_hi:x25
TEST_LOAD_ZILSD(x1,x3,0,x2,x24,x25,0x40,24*XLEN/8,c.ldsp,0)

inst_13:
// rd==x2, imm_val == 128, 
// opcode: c.ldspz; op1:x2; dest:x2; immval:0x80; rd_hi:x3
TEST_LOAD_ZILSD(x1,x3,0,x2,x2,x3,0x80,26*XLEN/8,c.ldsp,0)
RVTEST_SIGBASE(x1,signature_x1_2)

inst_14:
// rd==x10, imm_val == 256, 
// opcode: c.ldspz; op1:x2; dest:x10; immval:0x100; rd_hi:x11
TEST_LOAD_ZILSD(x1,x3,0,x2,x10,x11,0x100,0*XLEN/8,c.ldsp,0)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;



signature_x1_0:
    .fill 0*((XLEN/8)/4),4,0xdeadbeef


signature_x1_1:
    .fill 28*((XLEN/8)/4),4,0xdeadbeef


signature_x1_2:
    .fill 2*((XLEN/8)/4),4,0xdeadbeef

#ifdef rvtest_mtrap_routine
tsig_begin_canary:
CANARY;

mtrap_sigptr:
    .fill 64*XLEN/32,4,0xdeadbeef

tsig_end_canary:
CANARY;
#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif


sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
