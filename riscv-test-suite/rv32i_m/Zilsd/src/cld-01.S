
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.12.2
// timestamp : Wed May 29 11:42:16 2024 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /home/vsysuser/verif/newctg/riscv-ctg/sample_cgfs/dataset.cgf \
//                  --cgf /home/vsysuser/verif/newctg/riscv-ctg/sample_cgfs/rv32zilsd.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the c.ldz instruction of the RISC-V RV32CZilsd_Zcmlsd extension for the cld covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32ICZilsd_Zcmlsd")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*C.*Zilsd.*Zcmlsd.*);def TEST_CASE_1=True;",cld)

RVTEST_SIGBASE(x1,signature_x1_1)

inst_0:
// rs1 != rd, rd==x10, rs1==x13, imm_val == 0, 
// opcode: c.ldz; op1:x13; dest:x10; op1val:0x0; immval:0x0; rd_hi:x11
TEST_LOAD_ZILSD(x1,x2,0,x13,x10,x11,0x0,0*XLEN/8,c.ld,0x0)

inst_1:
// rs1 == rd, rd==x12, rs1==x12, imm_val > 0, 
// opcode: c.ldz; op1:x12; dest:x12; op1val:0x0; immval:0x60; rd_hi:x13
TEST_LOAD_ZILSD(x1,x2,0,x12,x12,x13,0x60,2*XLEN/8,c.ld,0x0)

inst_2:
// rd==x14, rs1==x8, imm_val == 168, 
// opcode: c.ldz; op1:x8; dest:x14; op1val:0x0; immval:0xa8; rd_hi:x15
TEST_LOAD_ZILSD(x1,x2,0,x8,x14,x15,0xa8,4*XLEN/8,c.ld,0x0)

inst_3:
// rd==x8, rs1==x9, imm_val == 80, 
// opcode: c.ldz; op1:x9; dest:x8; op1val:0x0; immval:0x50; rd_hi:x9
TEST_LOAD_ZILSD(x1,x2,0,x9,x8,x9,0x50,6*XLEN/8,c.ld,0x0)

inst_4:
// rs1==x11, imm_val == 8, 
// opcode: c.ldz; op1:x11; dest:x14; op1val:0x0; immval:0x8; rd_hi:x15
TEST_LOAD_ZILSD(x1,x2,0,x11,x14,x15,0x8,8*XLEN/8,c.ld,0x0)

inst_5:
// rs1==x15, imm_val == 16, 
// opcode: c.ldz; op1:x15; dest:x10; op1val:0x0; immval:0x10; rd_hi:x11
TEST_LOAD_ZILSD(x1,x2,0,x15,x10,x11,0x10,10*XLEN/8,c.ld,0x0)

inst_6:
// rs1==x10, imm_val == 240, 
// opcode: c.ldz; op1:x10; dest:x14; op1val:0x0; immval:0xf0; rd_hi:x15
TEST_LOAD_ZILSD(x1,x2,0,x10,x14,x15,0xf0,12*XLEN/8,c.ld,0x0)

inst_7:
// rs1==x14, imm_val == 232, 
// opcode: c.ldz; op1:x14; dest:x8; op1val:0x0; immval:0xe8; rd_hi:x9
TEST_LOAD_ZILSD(x1,x2,0,x14,x8,x9,0xe8,14*XLEN/8,c.ld,0x0)

inst_8:
// imm_val == 216, 
// opcode: c.ldz; op1:x15; dest:x14; op1val:0x0; immval:0xd8; rd_hi:x15
TEST_LOAD_ZILSD(x1,x2,0,x15,x14,x15,0xd8,16*XLEN/8,c.ld,0x0)

inst_9:
// imm_val == 184, 
// opcode: c.ldz; op1:x15; dest:x14; op1val:0x0; immval:0xb8; rd_hi:x15
TEST_LOAD_ZILSD(x1,x2,0,x15,x14,x15,0xb8,18*XLEN/8,c.ld,0x0)

inst_10:
// imm_val == 120, 
// opcode: c.ldz; op1:x15; dest:x14; op1val:0x0; immval:0x78; rd_hi:x15
TEST_LOAD_ZILSD(x1,x2,0,x15,x14,x15,0x78,20*XLEN/8,c.ld,0x0)

inst_11:
// imm_val == 32, 
// opcode: c.ldz; op1:x15; dest:x14; op1val:0x0; immval:0x20; rd_hi:x15
TEST_LOAD_ZILSD(x1,x2,0,x15,x14,x15,0x20,22*XLEN/8,c.ld,0x0)

inst_12:
// imm_val == 64, 
// opcode: c.ldz; op1:x15; dest:x14; op1val:0x0; immval:0x40; rd_hi:x15
TEST_LOAD_ZILSD(x1,x2,0,x15,x14,x15,0x40,24*XLEN/8,c.ld,0x0)

inst_13:
// imm_val == 128, 
// opcode: c.ldz; op1:x15; dest:x14; op1val:0x0; immval:0x80; rd_hi:x15
TEST_LOAD_ZILSD(x1,x2,0,x15,x14,x15,0x80,26*XLEN/8,c.ld,0x0)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;



signature_x1_0:
    .fill 0*((XLEN/8)/4),4,0xdeadbeef


signature_x1_1:
    .fill 28*((XLEN/8)/4),4,0xdeadbeef

#ifdef rvtest_mtrap_routine
tsig_begin_canary:
CANARY;

mtrap_sigptr:
    .fill 64*XLEN/32,4,0xdeadbeef

tsig_end_canary:
CANARY;
#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif


sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
