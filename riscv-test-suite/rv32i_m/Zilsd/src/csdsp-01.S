
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.12.1
// timestamp : Mon Mar 25 11:47:14 2024 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /home/vsysuser/verif/trial2/github/zilsd/wd/riscv-ctg/sample_cgfs/dataset.cgf \
//                  --cgf /home/vsysuser/verif/trial2/github/zilsd/wd/riscv-ctg/sample_cgfs/rv32zilsd.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the c.sdspz instruction of the RISC-V RV32CZilsd extension for the csdsp covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32ICZilsd")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*C.*Zilsd.*);def TEST_CASE_1=True;",csdsp)

RVTEST_SIGBASE(x1,signature_x1_1)

inst_0:
// rs2==x22, imm_val == 0, 
// opcode:c.sdspz; op1:x2; op2:x22; op2val:-0x1; immval:0x0; rd_hi:x23
TEST_STORE_ZILSD(x1,x3,0,x2,x22,x23,-0x1,0x0,0*XLEN/8,c.sdsp,0)

inst_1:
// rs2==x24, imm_val > 0, rs2_val == -131073
// opcode:c.sdspz; op1:x2; op2:x24; op2val:-0x20001; immval:0x58; rd_hi:x25
TEST_STORE_ZILSD(x1,x3,0,x2,x24,x25,-0x20001,0x58,2*XLEN/8,c.sdsp,0)

inst_2:
// rs2==x12, rs2_val == (-2**(xlen-1)), rs2_val == -2147483648, imm_val == 336
// opcode:c.sdspz; op1:x2; op2:x12; op2val:-0x80000000; immval:0x150; rd_hi:x13
TEST_STORE_ZILSD(x1,x3,0,x2,x12,x13,-0x80000000,0x150,4*XLEN/8,c.sdsp,0)

inst_3:
// rs2==x4, rs2_val == (2**(xlen-1)-1), rs2_val == 2147483647, imm_val == 64
// opcode:c.sdspz; op1:x2; op2:x4; op2val:0x7fffffff; immval:0x40; rd_hi:x5
TEST_STORE_ZILSD(x1,x3,0,x2,x4,x5,0x7fffffff,0x40,6*XLEN/8,c.sdsp,0)

inst_4:
// rs2==x16, rs2_val == -2, 
// opcode:c.sdspz; op1:x2; op2:x16; op2val:-0x2; immval:0x0; rd_hi:x17
TEST_STORE_ZILSD(x1,x3,0,x2,x16,x17,-0x2,0x0,8*XLEN/8,c.sdsp,0)

inst_5:
// rs2==x28, rs2_val == -3, 
// opcode:c.sdspz; op1:x2; op2:x28; op2val:-0x3; immval:0x150; rd_hi:x29
TEST_STORE_ZILSD(x1,x3,0,x2,x28,x29,-0x3,0x150,10*XLEN/8,c.sdsp,0)

inst_6:
// rs2==x8, rs2_val == -5, 
// opcode:c.sdspz; op1:x2; op2:x8; op2val:-0x5; immval:0x48; rd_hi:x9
TEST_STORE_ZILSD(x1,x3,0,x2,x8,x9,-0x5,0x48,12*XLEN/8,c.sdsp,0)

inst_7:
// rs2==x30, rs2_val == -9, 
// opcode:c.sdspz; op1:x2; op2:x30; op2val:-0x9; immval:0x60; rd_hi:x31
TEST_STORE_ZILSD(x1,x3,0,x2,x30,x31,-0x9,0x60,14*XLEN/8,c.sdsp,0)

inst_8:
// rs2==x2, rs2_val == -17, imm_val == 16
// opcode:c.sdspz; op1:x2; op2:x2; op2val:-0x11; immval:0x10; rd_hi:x3
TEST_STORE_ZILSD(x1,x3,0,x2,x2,x3,-0x11,0x10,16*XLEN/8,c.sdsp,0)

inst_9:
// rs2==x14, rs2_val == -33, 
// opcode:c.sdspz; op1:x2; op2:x14; op2val:-0x21; immval:0x1f8; rd_hi:x15
TEST_STORE_ZILSD(x1,x3,0,x2,x14,x15,-0x21,0x1f8,18*XLEN/8,c.sdsp,0)

inst_10:
// rs2==x26, rs2_val == -65, imm_val == 248
// opcode:c.sdspz; op1:x2; op2:x26; op2val:-0x41; immval:0xf8; rd_hi:x27
TEST_STORE_ZILSD(x1,x3,0,x2,x26,x27,-0x41,0xf8,20*XLEN/8,c.sdsp,0)

inst_11:
// rs2==x18, rs2_val == -129, 
// opcode:c.sdspz; op1:x2; op2:x18; op2val:-0x81; immval:0x1f8; rd_hi:x19
TEST_STORE_ZILSD(x1,x3,0,x2,x18,x19,-0x81,0x1f8,22*XLEN/8,c.sdsp,0)

inst_12:
// rs2==x20, rs2_val == -257, 
// opcode:c.sdspz; op1:x2; op2:x20; op2val:-0x101; immval:0x50; rd_hi:x21
TEST_STORE_ZILSD(x1,x3,0,x2,x20,x21,-0x101,0x50,24*XLEN/8,c.sdsp,0)

inst_13:
// rs2==x6, rs2_val == -513, 
// opcode:c.sdspz; op1:x2; op2:x6; op2val:-0x201; immval:0x68; rd_hi:x7
TEST_STORE_ZILSD(x1,x3,0,x2,x6,x7,-0x201,0x68,26*XLEN/8,c.sdsp,0)
RVTEST_SIGBASE(x1,signature_x1_2)

inst_14:
// rs2==x10, rs2_val == -1025, imm_val == 32
// opcode:c.sdspz; op1:x2; op2:x10; op2val:-0x401; immval:0x20; rd_hi:x11
TEST_STORE_ZILSD(x1,x3,0,x2,x10,x11,-0x401,0x20,0*XLEN/8,c.sdsp,0)

inst_15:
// rs2_val == -2049, 
// opcode:c.sdspz; op1:x2; op2:x30; op2val:-0x801; immval:0x88; rd_hi:x31
TEST_STORE_ZILSD(x1,x3,0,x2,x30,x31,-0x801,0x88,2*XLEN/8,c.sdsp,0)

inst_16:
// rs2_val == -4097, 
// opcode:c.sdspz; op1:x2; op2:x30; op2val:-0x1001; immval:0x88; rd_hi:x31
TEST_STORE_ZILSD(x1,x3,0,x2,x30,x31,-0x1001,0x88,4*XLEN/8,c.sdsp,0)

inst_17:
// rs2_val == -8193, 
// opcode:c.sdspz; op1:x2; op2:x30; op2val:-0x2001; immval:0x150; rd_hi:x31
TEST_STORE_ZILSD(x1,x3,0,x2,x30,x31,-0x2001,0x150,6*XLEN/8,c.sdsp,0)

inst_18:
// rs2_val == -16385, 
// opcode:c.sdspz; op1:x2; op2:x30; op2val:-0x4001; immval:0x40; rd_hi:x31
TEST_STORE_ZILSD(x1,x3,0,x2,x30,x31,-0x4001,0x40,8*XLEN/8,c.sdsp,0)

inst_19:
// rs2_val == -32769, imm_val == 8
// opcode:c.sdspz; op1:x2; op2:x30; op2val:-0x8001; immval:0x8; rd_hi:x31
TEST_STORE_ZILSD(x1,x3,0,x2,x30,x31,-0x8001,0x8,10*XLEN/8,c.sdsp,0)

inst_20:
// rs2_val == -65537, 
// opcode:c.sdspz; op1:x2; op2:x30; op2val:-0x10001; immval:0x70; rd_hi:x31
TEST_STORE_ZILSD(x1,x3,0,x2,x30,x31,-0x10001,0x70,12*XLEN/8,c.sdsp,0)

inst_21:
// rs2_val == -262145, imm_val == 440
// opcode:c.sdspz; op1:x2; op2:x30; op2val:-0x40001; immval:0x1b8; rd_hi:x31
TEST_STORE_ZILSD(x1,x3,0,x2,x30,x31,-0x40001,0x1b8,14*XLEN/8,c.sdsp,0)

inst_22:
// rs2_val == -524289, 
// opcode:c.sdspz; op1:x2; op2:x30; op2val:-0x80001; immval:0x28; rd_hi:x31
TEST_STORE_ZILSD(x1,x3,0,x2,x30,x31,-0x80001,0x28,16*XLEN/8,c.sdsp,0)

inst_23:
// rs2_val == -1048577, 
// opcode:c.sdspz; op1:x2; op2:x30; op2val:-0x100001; immval:0x30; rd_hi:x31
TEST_STORE_ZILSD(x1,x3,0,x2,x30,x31,-0x100001,0x30,18*XLEN/8,c.sdsp,0)

inst_24:
// rs2_val == -2097153, 
// opcode:c.sdspz; op1:x2; op2:x30; op2val:-0x200001; immval:0x20; rd_hi:x31
TEST_STORE_ZILSD(x1,x3,0,x2,x30,x31,-0x200001,0x20,20*XLEN/8,c.sdsp,0)

inst_25:
// rs2_val == -4194305, 
// opcode:c.sdspz; op1:x2; op2:x30; op2val:-0x400001; immval:0x40; rd_hi:x31
TEST_STORE_ZILSD(x1,x3,0,x2,x30,x31,-0x400001,0x40,22*XLEN/8,c.sdsp,0)

inst_26:
// rs2_val == -8388609, 
// opcode:c.sdspz; op1:x2; op2:x30; op2val:-0x800001; immval:0x48; rd_hi:x31
TEST_STORE_ZILSD(x1,x3,0,x2,x30,x31,-0x800001,0x48,24*XLEN/8,c.sdsp,0)

inst_27:
// rs2_val == -16777217, 
// opcode:c.sdspz; op1:x2; op2:x30; op2val:-0x1000001; immval:0x70; rd_hi:x31
TEST_STORE_ZILSD(x1,x3,0,x2,x30,x31,-0x1000001,0x70,26*XLEN/8,c.sdsp,0)

inst_28:
// rs2_val == -33554433, 
// opcode:c.sdspz; op1:x2; op2:x30; op2val:-0x2000001; immval:0x58; rd_hi:x31
TEST_STORE_ZILSD(x1,x3,0,x2,x30,x31,-0x2000001,0x58,28*XLEN/8,c.sdsp,0)

inst_29:
// rs2_val == -67108865, 
// opcode:c.sdspz; op1:x2; op2:x30; op2val:-0x4000001; immval:0x68; rd_hi:x31
TEST_STORE_ZILSD(x1,x3,0,x2,x30,x31,-0x4000001,0x68,30*XLEN/8,c.sdsp,0)

inst_30:
// rs2_val == -134217729, 
// opcode:c.sdspz; op1:x2; op2:x30; op2val:-0x8000001; immval:0x0; rd_hi:x31
TEST_STORE_ZILSD(x1,x3,0,x2,x30,x31,-0x8000001,0x0,32*XLEN/8,c.sdsp,0)

inst_31:
// rs2_val == -268435457, imm_val == 472
// opcode:c.sdspz; op1:x2; op2:x30; op2val:-0x10000001; immval:0x1d8; rd_hi:x31
TEST_STORE_ZILSD(x1,x3,0,x2,x30,x31,-0x10000001,0x1d8,34*XLEN/8,c.sdsp,0)

inst_32:
// rs2_val == -536870913, 
// opcode:c.sdspz; op1:x2; op2:x30; op2val:-0x20000001; immval:0x20; rd_hi:x31
TEST_STORE_ZILSD(x1,x3,0,x2,x30,x31,-0x20000001,0x20,36*XLEN/8,c.sdsp,0)

inst_33:
// rs2_val == -1073741825, 
// opcode:c.sdspz; op1:x2; op2:x30; op2val:-0x40000001; immval:0x18; rd_hi:x31
TEST_STORE_ZILSD(x1,x3,0,x2,x30,x31,-0x40000001,0x18,38*XLEN/8,c.sdsp,0)

inst_34:
// imm_val == 496, 
// opcode:c.sdspz; op1:x2; op2:x30; op2val:0x6; immval:0x1f0; rd_hi:x31
TEST_STORE_ZILSD(x1,x3,0,x2,x30,x31,0x6,0x1f0,40*XLEN/8,c.sdsp,0)

inst_35:
// imm_val == 488, 
// opcode:c.sdspz; op1:x2; op2:x30; op2val:-0x8001; immval:0x1e8; rd_hi:x31
TEST_STORE_ZILSD(x1,x3,0,x2,x30,x31,-0x8001,0x1e8,42*XLEN/8,c.sdsp,0)

inst_36:
// imm_val == 376, 
// opcode:c.sdspz; op1:x2; op2:x30; op2val:-0x801; immval:0x178; rd_hi:x31
TEST_STORE_ZILSD(x1,x3,0,x2,x30,x31,-0x801,0x178,44*XLEN/8,c.sdsp,0)

inst_37:
// rs2_val == 1, 
// opcode:c.sdspz; op1:x2; op2:x30; op2val:0x1; immval:0x70; rd_hi:x31
TEST_STORE_ZILSD(x1,x3,0,x2,x30,x31,0x1,0x70,46*XLEN/8,c.sdsp,0)

inst_38:
// rs2_val == 2, 
// opcode:c.sdspz; op1:x2; op2:x30; op2val:0x2; immval:0x20; rd_hi:x31
TEST_STORE_ZILSD(x1,x3,0,x2,x30,x31,0x2,0x20,48*XLEN/8,c.sdsp,0)

inst_39:
// rs2_val == 4, 
// opcode:c.sdspz; op1:x2; op2:x30; op2val:0x4; immval:0x88; rd_hi:x31
TEST_STORE_ZILSD(x1,x3,0,x2,x30,x31,0x4,0x88,50*XLEN/8,c.sdsp,0)

inst_40:
// rs2_val == 8, 
// opcode:c.sdspz; op1:x2; op2:x30; op2val:0x8; immval:0xf8; rd_hi:x31
TEST_STORE_ZILSD(x1,x3,0,x2,x30,x31,0x8,0xf8,52*XLEN/8,c.sdsp,0)

inst_41:
// rs2_val == 16, 
// opcode:c.sdspz; op1:x2; op2:x30; op2val:0x10; immval:0x88; rd_hi:x31
TEST_STORE_ZILSD(x1,x3,0,x2,x30,x31,0x10,0x88,54*XLEN/8,c.sdsp,0)

inst_42:
// rs2_val == 32, 
// opcode:c.sdspz; op1:x2; op2:x30; op2val:0x20; immval:0x1f8; rd_hi:x31
TEST_STORE_ZILSD(x1,x3,0,x2,x30,x31,0x20,0x1f8,56*XLEN/8,c.sdsp,0)

inst_43:
// rs2_val == 4194304, 
// opcode:c.sdspz; op1:x2; op2:x30; op2val:0x400000; immval:0x40; rd_hi:x31
TEST_STORE_ZILSD(x1,x3,0,x2,x30,x31,0x400000,0x40,58*XLEN/8,c.sdsp,0)

inst_44:
// rs2_val == 8388608, 
// opcode:c.sdspz; op1:x2; op2:x30; op2val:0x800000; immval:0x78; rd_hi:x31
TEST_STORE_ZILSD(x1,x3,0,x2,x30,x31,0x800000,0x78,60*XLEN/8,c.sdsp,0)

inst_45:
// rs2_val == 16777216, 
// opcode:c.sdspz; op1:x2; op2:x30; op2val:0x1000000; immval:0x178; rd_hi:x31
TEST_STORE_ZILSD(x1,x3,0,x2,x30,x31,0x1000000,0x178,62*XLEN/8,c.sdsp,0)

inst_46:
// rs2_val == 33554432, 
// opcode:c.sdspz; op1:x2; op2:x30; op2val:0x2000000; immval:0x10; rd_hi:x31
TEST_STORE_ZILSD(x1,x3,0,x2,x30,x31,0x2000000,0x10,64*XLEN/8,c.sdsp,0)

inst_47:
// rs2_val == 67108864, 
// opcode:c.sdspz; op1:x2; op2:x30; op2val:0x4000000; immval:0x1e8; rd_hi:x31
TEST_STORE_ZILSD(x1,x3,0,x2,x30,x31,0x4000000,0x1e8,66*XLEN/8,c.sdsp,0)

inst_48:
// rs2_val == 134217728, 
// opcode:c.sdspz; op1:x2; op2:x30; op2val:0x8000000; immval:0x18; rd_hi:x31
TEST_STORE_ZILSD(x1,x3,0,x2,x30,x31,0x8000000,0x18,68*XLEN/8,c.sdsp,0)

inst_49:
// rs2_val == 268435456, 
// opcode:c.sdspz; op1:x2; op2:x30; op2val:0x10000000; immval:0x90; rd_hi:x31
TEST_STORE_ZILSD(x1,x3,0,x2,x30,x31,0x10000000,0x90,70*XLEN/8,c.sdsp,0)

inst_50:
// rs2_val == 536870912, 
// opcode:c.sdspz; op1:x2; op2:x30; op2val:0x20000000; immval:0x70; rd_hi:x31
TEST_STORE_ZILSD(x1,x3,0,x2,x30,x31,0x20000000,0x70,72*XLEN/8,c.sdsp,0)

inst_51:
// rs2_val == 1073741824, 
// opcode:c.sdspz; op1:x2; op2:x30; op2val:0x40000000; immval:0x90; rd_hi:x31
TEST_STORE_ZILSD(x1,x3,0,x2,x30,x31,0x40000000,0x90,74*XLEN/8,c.sdsp,0)

inst_52:
// imm_val == 128, rs2_val == 512
// opcode:c.sdspz; op1:x2; op2:x30; op2val:0x200; immval:0x80; rd_hi:x31
TEST_STORE_ZILSD(x1,x3,0,x2,x30,x31,0x200,0x80,76*XLEN/8,c.sdsp,0)

inst_53:
// imm_val == 256, 
// opcode:c.sdspz; op1:x2; op2:x30; op2val:-0x81; immval:0x100; rd_hi:x31
TEST_STORE_ZILSD(x1,x3,0,x2,x30,x31,-0x81,0x100,78*XLEN/8,c.sdsp,0)

inst_54:
// rs2_val == 1431655765, 
// opcode:c.sdspz; op1:x2; op2:x30; op2val:0x55555555; immval:0x78; rd_hi:x31
TEST_STORE_ZILSD(x1,x3,0,x2,x30,x31,0x55555555,0x78,80*XLEN/8,c.sdsp,0)

inst_55:
// rs2_val == -1431655766, 
// opcode:c.sdspz; op1:x2; op2:x30; op2val:-0x55555556; immval:0x98; rd_hi:x31
TEST_STORE_ZILSD(x1,x3,0,x2,x30,x31,-0x55555556,0x98,82*XLEN/8,c.sdsp,0)

inst_56:
// imm_val == 168, 
// opcode:c.sdspz; op1:x2; op2:x30; op2val:0x3; immval:0xa8; rd_hi:x31
TEST_STORE_ZILSD(x1,x3,0,x2,x30,x31,0x3,0xa8,84*XLEN/8,c.sdsp,0)

inst_57:
// rs2_val == 0, 
// opcode:c.sdspz; op1:x2; op2:x30; op2val:0x0; immval:0x80; rd_hi:x31
TEST_STORE_ZILSD(x1,x3,0,x2,x30,x31,0x0,0x80,86*XLEN/8,c.sdsp,0)

inst_58:
// rs2_val == 64, 
// opcode:c.sdspz; op1:x2; op2:x30; op2val:0x40; immval:0xa8; rd_hi:x31
TEST_STORE_ZILSD(x1,x3,0,x2,x30,x31,0x40,0xa8,88*XLEN/8,c.sdsp,0)

inst_59:
// rs2_val == 128, 
// opcode:c.sdspz; op1:x2; op2:x30; op2val:0x80; immval:0x38; rd_hi:x31
TEST_STORE_ZILSD(x1,x3,0,x2,x30,x31,0x80,0x38,90*XLEN/8,c.sdsp,0)

inst_60:
// rs2_val == 256, 
// opcode:c.sdspz; op1:x2; op2:x30; op2val:0x100; immval:0x0; rd_hi:x31
TEST_STORE_ZILSD(x1,x3,0,x2,x30,x31,0x100,0x0,92*XLEN/8,c.sdsp,0)

inst_61:
// rs2_val == 1024, 
// opcode:c.sdspz; op1:x2; op2:x30; op2val:0x400; immval:0x80; rd_hi:x31
TEST_STORE_ZILSD(x1,x3,0,x2,x30,x31,0x400,0x80,94*XLEN/8,c.sdsp,0)

inst_62:
// rs2_val == 2048, 
// opcode:c.sdspz; op1:x2; op2:x30; op2val:0x800; immval:0x1f0; rd_hi:x31
TEST_STORE_ZILSD(x1,x3,0,x2,x30,x31,0x800,0x1f0,96*XLEN/8,c.sdsp,0)

inst_63:
// rs2_val == 4096, 
// opcode:c.sdspz; op1:x2; op2:x30; op2val:0x1000; immval:0x30; rd_hi:x31
TEST_STORE_ZILSD(x1,x3,0,x2,x30,x31,0x1000,0x30,98*XLEN/8,c.sdsp,0)

inst_64:
// rs2_val == 8192, 
// opcode:c.sdspz; op1:x2; op2:x30; op2val:0x2000; immval:0x68; rd_hi:x31
TEST_STORE_ZILSD(x1,x3,0,x2,x30,x31,0x2000,0x68,100*XLEN/8,c.sdsp,0)

inst_65:
// rs2_val == 16384, 
// opcode:c.sdspz; op1:x2; op2:x30; op2val:0x4000; immval:0x60; rd_hi:x31
TEST_STORE_ZILSD(x1,x3,0,x2,x30,x31,0x4000,0x60,102*XLEN/8,c.sdsp,0)

inst_66:
// rs2_val == 32768, 
// opcode:c.sdspz; op1:x2; op2:x30; op2val:0x8000; immval:0x1f8; rd_hi:x31
TEST_STORE_ZILSD(x1,x3,0,x2,x30,x31,0x8000,0x1f8,104*XLEN/8,c.sdsp,0)

inst_67:
// rs2_val == 65536, 
// opcode:c.sdspz; op1:x2; op2:x30; op2val:0x10000; immval:0x178; rd_hi:x31
TEST_STORE_ZILSD(x1,x3,0,x2,x30,x31,0x10000,0x178,106*XLEN/8,c.sdsp,0)

inst_68:
// rs2_val == 131072, 
// opcode:c.sdspz; op1:x2; op2:x30; op2val:0x20000; immval:0x40; rd_hi:x31
TEST_STORE_ZILSD(x1,x3,0,x2,x30,x31,0x20000,0x40,108*XLEN/8,c.sdsp,0)

inst_69:
// rs2_val == 262144, 
// opcode:c.sdspz; op1:x2; op2:x30; op2val:0x40000; immval:0x150; rd_hi:x31
TEST_STORE_ZILSD(x1,x3,0,x2,x30,x31,0x40000,0x150,110*XLEN/8,c.sdsp,0)

inst_70:
// rs2_val == 524288, 
// opcode:c.sdspz; op1:x2; op2:x30; op2val:0x80000; immval:0x78; rd_hi:x31
TEST_STORE_ZILSD(x1,x3,0,x2,x30,x31,0x80000,0x78,112*XLEN/8,c.sdsp,0)

inst_71:
// rs2_val == 1048576, 
// opcode:c.sdspz; op1:x2; op2:x30; op2val:0x100000; immval:0x48; rd_hi:x31
TEST_STORE_ZILSD(x1,x3,0,x2,x30,x31,0x100000,0x48,114*XLEN/8,c.sdsp,0)

inst_72:
// rs2_val == 2097152, 
// opcode:c.sdspz; op1:x2; op2:x30; op2val:0x200000; immval:0x1f8; rd_hi:x31
TEST_STORE_ZILSD(x1,x3,0,x2,x30,x31,0x200000,0x1f8,116*XLEN/8,c.sdsp,0)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;



signature_x1_0:
    .fill 0*((XLEN/8)/4),4,0xdeadbeef


signature_x1_1:
    .fill 28*((XLEN/8)/4),4,0xdeadbeef


signature_x1_2:
    .fill 118*((XLEN/8)/4),4,0xdeadbeef

#ifdef rvtest_mtrap_routine
tsig_begin_canary:
CANARY;

mtrap_sigptr:
    .fill 64*XLEN/32,4,0xdeadbeef

tsig_end_canary:
CANARY;
#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif


sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
