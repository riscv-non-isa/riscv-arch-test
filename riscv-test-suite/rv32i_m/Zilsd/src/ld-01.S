
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.12.1
// timestamp : Mon Mar 25 11:47:14 2024 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /home/vsysuser/verif/trial2/github/zilsd/wd/riscv-ctg/sample_cgfs/dataset.cgf \
//                  --cgf /home/vsysuser/verif/trial2/github/zilsd/wd/riscv-ctg/sample_cgfs/rv32zilsd.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the ldz instruction of the RISC-V RV32Zilsd extension for the ld covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IZilsd")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*Zilsd.*);def TEST_CASE_1=True;",ld)

RVTEST_SIGBASE(x1,signature_x1_1)

inst_0:
// rs1 == rd, rs1==x30, rd==x30, ea_align == 0 and (imm_val % 8) == 0, imm_val > 0
// opcode:$opcode op1:x30; dest:x30; immval:0x40; align:0;rd_hi:x31
//TEST_LOAD_ZILSD(x1,x5,0,x30,x30,x31,0x40,0*XLEN/8,ld,0)

inst_1:
// rs1 != rd, rs1==x22, rd==x12, ea_align == 0 and (imm_val % 8) == 1, imm_val < 0
// opcode:$opcode op1:x22; dest:x12; immval:-0x7; align:0;rd_hi:x13
TEST_LOAD_ZILSD(x1,x5,0,x22,x12,x13,-0x7,2*XLEN/8,ld,0)

inst_2:
// rs1==x18, rd==x24, ea_align == 0 and (imm_val % 8) == 2, 
// opcode:$opcode op1:x18; dest:x24; immval:-0x6; align:0;rd_hi:x25
TEST_LOAD_ZILSD(x1,x5,0,x18,x24,x25,-0x6,4*XLEN/8,ld,0)

inst_3:
// rs1==x20, rd==x18, ea_align == 0 and (imm_val % 8) == 3, 
// opcode:$opcode op1:x20; dest:x18; immval:0x3; align:0;rd_hi:x19
TEST_LOAD_ZILSD(x1,x5,0,x20,x18,x19,0x3,6*XLEN/8,ld,0)

inst_4:
// rs1==x14, rd==x26, ea_align == 0 and (imm_val % 8) == 4, 
// opcode:$opcode op1:x14; dest:x26; immval:0x4; align:0;rd_hi:x27
TEST_LOAD_ZILSD(x1,x5,0,x14,x26,x27,0x4,8*XLEN/8,ld,0)

inst_5:
// rs1==x6, rd==x10, imm_val == 0, 
// opcode:$opcode op1:x6; dest:x10; immval:0x0; align:0;rd_hi:x11
TEST_LOAD_ZILSD(x1,x5,0,x6,x10,x11,0x0,10*XLEN/8,ld,0)

inst_6:
// rs1==x16, rd==x2, ea_align == 0 and (imm_val % 8) == 5, 
// opcode:$opcode op1:x16; dest:x2; immval:-0x3; align:0;rd_hi:x3
TEST_LOAD_ZILSD(x1,x5,0,x16,x2,x3,-0x3,12*XLEN/8,ld,0)

inst_7:
// rs1==x24, rd==x6, ea_align == 0 and (imm_val % 8) == 6, 
// opcode:$opcode op1:x24; dest:x6; immval:-0x2; align:0;rd_hi:x7
TEST_LOAD_ZILSD(x1,x5,0,x24,x6,x7,-0x2,14*XLEN/8,ld,0)

inst_8:
// rs1==x26, rd==x14, ea_align == 0 and (imm_val % 8) == 7, 
// opcode:$opcode op1:x26; dest:x14; immval:-0x81; align:0;rd_hi:x15
TEST_LOAD_ZILSD(x1,x5,0,x26,x14,x15,-0x81,16*XLEN/8,ld,0)

inst_9:
// rs1==x4, rd==x16, 
// opcode:$opcode op1:x4; dest:x16; immval:-0x800; align:0;rd_hi:x17
TEST_LOAD_ZILSD(x1,x5,0,x4,x16,x17,-0x800,18*XLEN/8,ld,0)

inst_10:
// rs1==x10, rd==x4, 
// opcode:$opcode op1:x10; dest:x4; immval:-0x800; align:0;rd_hi:x5
TEST_LOAD_ZILSD(x1,x5,0,x10,x4,x5,-0x800,20*XLEN/8,ld,0)

inst_11:
// rs1==x8, rd==x20, 
// opcode:$opcode op1:x8; dest:x20; immval:-0x800; align:0;rd_hi:x21
TEST_LOAD_ZILSD(x1,x5,0,x8,x20,x21,-0x800,22*XLEN/8,ld,0)

inst_12:
// rs1==x2, rd==x28, 
// opcode:$opcode op1:x2; dest:x28; immval:-0x800; align:0;rd_hi:x29
TEST_LOAD_ZILSD(x1,x5,0,x2,x28,x29,-0x800,24*XLEN/8,ld,0)
RVTEST_SIGBASE(x1,signature_x1_2)

inst_13:
// rs1==x28, rd==x22, 
// opcode:$opcode op1:x28; dest:x22; immval:-0x800; align:0;rd_hi:x23
TEST_LOAD_ZILSD(x1,x5,0,x28,x22,x23,-0x800,0*XLEN/8,ld,0)

inst_14:
// rs1==x12, rd==x8, 
// opcode:$opcode op1:x12; dest:x8; immval:-0x800; align:0;rd_hi:x9
TEST_LOAD_ZILSD(x1,x5,0,x12,x8,x9,-0x800,2*XLEN/8,ld,0)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;



signature_x1_0:
    .fill 0*((XLEN/8)/4),4,0xdeadbeef


signature_x1_1:
    .fill 26*((XLEN/8)/4),4,0xdeadbeef


signature_x1_2:
    .fill 4*((XLEN/8)/4),4,0xdeadbeef

#ifdef rvtest_mtrap_routine
tsig_begin_canary:
CANARY;

mtrap_sigptr:
    .fill 64*XLEN/32,4,0xdeadbeef

tsig_end_canary:
CANARY;
#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif


sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
