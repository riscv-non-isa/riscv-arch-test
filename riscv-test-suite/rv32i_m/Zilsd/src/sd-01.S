
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.12.2
// timestamp : Fri Jul  5 09:42:50 2024 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /home/vsysuser/verif/kumarans/riscv-ctg/sample_cgfs/dataset.cgf \
//                  --cgf /home/vsysuser/verif/kumarans/riscv-ctg/sample_cgfs/rv32zilsd.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the sdz instruction of the RISC-V RV32Zilsd extension for the sd covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IZilsd")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*Zilsd.*);def TEST_CASE_1=True;",sd)

RVTEST_SIGBASE(x7,signature_x7_1)

inst_0:
// rs1 != rs2, rs1==x9, rs2==x8, ea_align == 0 and (imm_val % 8) == 0, imm_val < 0, rs2_val == 8192
// opcode:$opcode; op1:x9; op2:x8; op2val:0x2000;op3val:0x8000000; immval:-0x8; align:0; rs2_hi:x9
TEST_STORE_ZILSD(x7,x1,0,x9,x8,x9,0x2000,0x8000000,-0x8,0*XLEN/8,sd,0)

inst_1:
// rs1==x24, rs2==x18, ea_align == 0 and (imm_val % 8) == 1, imm_val > 0
// opcode:$opcode; op1:x24; op2:x18; op2val:0x6;op3val:0x4; immval:0x1; align:0; rs2_hi:x19
TEST_STORE_ZILSD(x7,x1,0,x24,x18,x19,0x6,0x4,0x1,2*XLEN/8,sd,0)

inst_2:
// rs1==x2, rs2==x14, ea_align == 0 and (imm_val % 8) == 2, 
// opcode:$opcode; op1:x2; op2:x14; op2val:0x3;op3val:-0x400001; immval:-0x6; align:0; rs2_hi:x15
TEST_STORE_ZILSD(x7,x1,0,x2,x14,x15,0x3,-0x400001,-0x6,4*XLEN/8,sd,0)

inst_3:
// rs1==x19, rs2==x28, ea_align == 0 and (imm_val % 8) == 3, rs2_val == -4194305
// opcode:$opcode; op1:x19; op2:x28; op2val:-0x400001;op3val:-0x8; immval:-0x5; align:0; rs2_hi:x29
TEST_STORE_ZILSD(x7,x1,0,x19,x28,x29,-0x400001,-0x8,-0x5,6*XLEN/8,sd,0)

inst_4:
// rs1==x30, rs2==x4, ea_align == 0 and (imm_val % 8) == 4, rs2_val == -131073
// opcode:$opcode; op1:x30; op2:x4; op2val:-0x20001;op3val:0x20; immval:-0x4; align:0; rs2_hi:x5
TEST_STORE_ZILSD(x7,x1,0,x30,x4,x5,-0x20001,0x20,-0x4,8*XLEN/8,sd,0)

inst_5:
// rs1==x11, rs2==x24, ea_align == 0 and (imm_val % 8) == 5, rs2_val == -257
// opcode:$opcode; op1:x11; op2:x24; op2val:-0x101;op3val:-0x2; immval:0x5; align:0; rs2_hi:x25
TEST_STORE_ZILSD(x7,x1,0,x11,x24,x25,-0x101,-0x2,0x5,10*XLEN/8,sd,0)

inst_6:
// rs1==x22, rs2==x10, rs2_val == -2, ea_align == 0 and (imm_val % 8) == 7
// opcode:$opcode; op1:x22; op2:x10; op2val:-0x2;op3val:-0x3; immval:-0x41; align:0; rs2_hi:x11
TEST_STORE_ZILSD(x7,x1,0,x22,x10,x11,-0x2,-0x3,-0x41,12*XLEN/8,sd,0)

inst_7:
// rs1==x8, rs2==x2, rs2_val == -3, ea_align == 0 and (imm_val % 8) == 6
// opcode:$opcode; op1:x8; op2:x2; op2val:-0x3;op3val:-0x801; immval:-0xa; align:0; rs2_hi:x3
TEST_STORE_ZILSD(x7,x1,0,x8,x2,x3,-0x3,-0x801,-0xa,14*XLEN/8,sd,0)

inst_8:
// rs1==x25, rs2==x16, rs2_val == -5, 
// opcode:$opcode; op1:x25; op2:x16; op2val:-0x5;op3val:-0x2000001; immval:0x8; align:0; rs2_hi:x17
TEST_STORE_ZILSD(x7,x1,0,x25,x16,x17,-0x5,-0x2000001,0x8,16*XLEN/8,sd,0)

inst_9:
// rs1==x15, rs2==x26, rs2_val == -9, 
// opcode:$opcode; op1:x15; op2:x26; op2val:-0x9;op3val:0x4000000; immval:-0x7; align:0; rs2_hi:x27
TEST_STORE_ZILSD(x7,x1,0,x15,x26,x27,-0x9,0x4000000,-0x7,18*XLEN/8,sd,0)

inst_10:
// rs1==x21, rs2==x0, rs2_val == -17, 
// opcode:$opcode; op1:x21; op2:x0; op2val:0x0;op3val:-0x5; immval:0x3ff; align:0; rs2_hi:x1
TEST_STORE_ZILSD(x7,x1,0,x21,x0,x1,0x0,-0x5,0x3ff,20*XLEN/8,sd,0)

inst_11:
// rs1==x6, rs2==x12, rs2_val == -33, 
// opcode:$opcode; op1:x6; op2:x12; op2val:-0x21;op3val:0x200000; immval:0x200; align:0; rs2_hi:x13
TEST_STORE_ZILSD(x7,x1,0,x6,x12,x13,-0x21,0x200000,0x200,22*XLEN/8,sd,0)
RVTEST_SIGBASE(x4,signature_x4_0)

inst_12:
// rs1==x12, rs2==x30, rs2_val == -65, 
// opcode:$opcode; op1:x12; op2:x30; op2val:-0x41;op3val:-0x40000000; immval:-0x5; align:0; rs2_hi:x31
TEST_STORE_ZILSD(x4,x1,0,x12,x30,x31,-0x41,-0x40000000,-0x5,0*XLEN/8,sd,0)

inst_13:
// rs1==x10, rs2==x20, rs2_val == -129, 
// opcode:$opcode; op1:x10; op2:x20; op2val:-0x81;op3val:-0x7; immval:-0x9; align:0; rs2_hi:x21
TEST_STORE_ZILSD(x4,x1,0,x10,x20,x21,-0x81,-0x7,-0x9,2*XLEN/8,sd,0)

inst_14:
// rs1==x29, rs2==x6, rs2_val == -513, 
// opcode:$opcode; op1:x29; op2:x6; op2val:-0x201;op3val:-0x5; immval:0x10; align:0; rs2_hi:x7
TEST_STORE_ZILSD(x4,x12,0,x29,x6,x7,-0x201,-0x5,0x10,4*XLEN/8,sd,0)

inst_15:
// rs1==x5, rs2==x22, rs2_val == -1025, 
// opcode:$opcode; op1:x5; op2:x22; op2val:-0x401;op3val:-0x40001; immval:-0x11; align:0; rs2_hi:x23
TEST_STORE_ZILSD(x4,x12,0,x5,x22,x23,-0x401,-0x40001,-0x11,6*XLEN/8,sd,0)

inst_16:
// rs1==x16, rs2_val == -2049, 
// opcode:$opcode; op1:x16; op2:x28; op2val:-0x801;op3val:-0x4000001; immval:0x4; align:0; rs2_hi:x29
TEST_STORE_ZILSD(x4,x12,0,x16,x28,x29,-0x801,-0x4000001,0x4,8*XLEN/8,sd,0)

inst_17:
// rs1==x28, rs2_val == -4097, 
// opcode:$opcode; op1:x28; op2:x6; op2val:-0x1001;op3val:0x80; immval:0x7ff; align:0; rs2_hi:x7
TEST_STORE_ZILSD(x4,x12,0,x28,x6,x7,-0x1001,0x80,0x7ff,10*XLEN/8,sd,0)

inst_18:
// rs1==x13, rs2_val == -8193, 
// opcode:$opcode; op1:x13; op2:x2; op2val:-0x2001;op3val:-0x6; immval:-0x11; align:0; rs2_hi:x3
TEST_STORE_ZILSD(x4,x12,0,x13,x2,x3,-0x2001,-0x6,-0x11,12*XLEN/8,sd,0)

inst_19:
// rs1==x17, rs2_val == -16385, 
// opcode:$opcode; op1:x17; op2:x16; op2val:-0x4001;op3val:0x800000; immval:-0x2; align:0; rs2_hi:x17
TEST_STORE_ZILSD(x4,x12,0,x17,x16,x17,-0x4001,0x800000,-0x2,14*XLEN/8,sd,0)

inst_20:
// rs1==x7, rs2_val == -32769, 
// opcode:$opcode; op1:x7; op2:x22; op2val:-0x8001;op3val:0x2; immval:-0x8; align:0; rs2_hi:x23
TEST_STORE_ZILSD(x4,x12,0,x7,x22,x23,-0x8001,0x2,-0x8,16*XLEN/8,sd,0)

inst_21:
// rs1==x27, rs2_val == -65537, 
// opcode:$opcode; op1:x27; op2:x10; op2val:-0x10001;op3val:-0x40000000; immval:-0x8; align:0; rs2_hi:x11
TEST_STORE_ZILSD(x4,x12,0,x27,x10,x11,-0x10001,-0x40000000,-0x8,18*XLEN/8,sd,0)

inst_22:
// rs1==x3, rs2_val == -262145, 
// opcode:$opcode; op1:x3; op2:x14; op2val:-0x40001;op3val:0x200000; immval:0x5; align:0; rs2_hi:x15
TEST_STORE_ZILSD(x4,x12,0,x3,x14,x15,-0x40001,0x200000,0x5,20*XLEN/8,sd,0)

inst_23:
// rs1==x23, rs2_val == -524289, 
// opcode:$opcode; op1:x23; op2:x8; op2val:-0x80001;op3val:-0x5; immval:0x2; align:0; rs2_hi:x9
TEST_STORE_ZILSD(x4,x12,0,x23,x8,x9,-0x80001,-0x5,0x2,22*XLEN/8,sd,0)

inst_24:
// rs1==x14, rs2_val == -1048577, 
// opcode:$opcode; op1:x14; op2:x2; op2val:-0x100001;op3val:-0x10000001; immval:0x40; align:0; rs2_hi:x3
TEST_STORE_ZILSD(x4,x12,0,x14,x2,x3,-0x100001,-0x10000001,0x40,24*XLEN/8,sd,0)

inst_25:
// rs1==x1, rs2_val == -2097153, 
// opcode:$opcode; op1:x1; op2:x0; op2val:0x0;op3val:0x40000000; immval:-0x4; align:0; rs2_hi:x1
TEST_STORE_ZILSD(x4,x12,0,x1,x0,x1,0x0,0x40000000,-0x4,26*XLEN/8,sd,0)

inst_26:
// rs1==x31, rs2_val == -8388609, 
// opcode:$opcode; op1:x31; op2:x14; op2val:-0x800001;op3val:0x200; immval:0x1; align:0; rs2_hi:x15
TEST_STORE_ZILSD(x4,x12,0,x31,x14,x15,-0x800001,0x200,0x1,28*XLEN/8,sd,0)

inst_27:
// rs1==x20, rs2_val == -16777217, 
// opcode:$opcode; op1:x20; op2:x24; op2val:-0x1000001;op3val:-0x6; immval:0x7; align:0; rs2_hi:x25
TEST_STORE_ZILSD(x4,x12,0,x20,x24,x25,-0x1000001,-0x6,0x7,30*XLEN/8,sd,0)
RVTEST_SIGBASE(x1,signature_x1_0)

inst_28:
// rs1==x18, rs2_val == -33554433, 
// opcode:$opcode; op1:x18; op2:x20; op2val:-0x2000001;op3val:-0x4000001; immval:0x7; align:0; rs2_hi:x21
TEST_STORE_ZILSD(x1,x12,0,x18,x20,x21,-0x2000001,-0x4000001,0x7,0*XLEN/8,sd,0)

inst_29:
// rs1==x4, rs2_val == -67108865, 
// opcode:$opcode; op1:x4; op2:x22; op2val:-0x4000001;op3val:-0x40001; immval:-0x4; align:0; rs2_hi:x23
TEST_STORE_ZILSD(x1,x12,0,x4,x22,x23,-0x4000001,-0x40001,-0x4,2*XLEN/8,sd,0)

inst_30:
// rs1==x26, rs2_val == -134217729, 
// opcode:$opcode; op1:x26; op2:x18; op2val:-0x8000001;op3val:0x400; immval:-0x2; align:0; rs2_hi:x19
TEST_STORE_ZILSD(x1,x12,0,x26,x18,x19,-0x8000001,0x400,-0x2,4*XLEN/8,sd,0)

inst_31:
// rs2_val == -268435457, 
// opcode:$opcode; op1:x29; op2:x30; op2val:-0x10000001;op3val:0x20000; immval:-0x101; align:0; rs2_hi:x31
TEST_STORE_ZILSD(x1,x2,0,x29,x30,x31,-0x10000001,0x20000,-0x101,6*XLEN/8,sd,0)

inst_32:
// rs2_val == -536870913, 
// opcode:$opcode; op1:x29; op2:x30; op2val:-0x20000001;op3val:-0x41; immval:0x200; align:0; rs2_hi:x31
TEST_STORE_ZILSD(x1,x2,0,x29,x30,x31,-0x20000001,-0x41,0x200,8*XLEN/8,sd,0)

inst_33:
// rs2_val == -1073741825, 
// opcode:$opcode; op1:x29; op2:x30; op2val:-0x40000001;op3val:0x55555555; immval:-0x556; align:0; rs2_hi:x31
TEST_STORE_ZILSD(x1,x2,0,x29,x30,x31,-0x40000001,0x55555555,-0x556,10*XLEN/8,sd,0)

inst_34:
// rs2_val == 2147483647, rs2_val == (2**(xlen-1)-1)
// opcode:$opcode; op1:x29; op2:x30; op2val:0x7fffffff;op3val:-0x10000001; immval:0x40; align:0; rs2_hi:x31
TEST_STORE_ZILSD(x1,x2,0,x29,x30,x31,0x7fffffff,-0x10000001,0x40,12*XLEN/8,sd,0)

inst_35:
// rs2_val == 1, 
// opcode:$opcode; op1:x29; op2:x30; op2val:0x1;op3val:-0x200001; immval:-0x81; align:0; rs2_hi:x31
TEST_STORE_ZILSD(x1,x2,0,x29,x30,x31,0x1,-0x200001,-0x81,14*XLEN/8,sd,0)

inst_36:
// rs2_val == 2, 
// opcode:$opcode; op1:x29; op2:x30; op2val:0x2;op3val:-0x9; immval:0x40; align:0; rs2_hi:x31
TEST_STORE_ZILSD(x1,x2,0,x29,x30,x31,0x2,-0x9,0x40,16*XLEN/8,sd,0)

inst_37:
// rs2_val == 4, imm_val == 0
// opcode:$opcode; op1:x29; op2:x30; op2val:0x4;op3val:-0x801; immval:0x0; align:0; rs2_hi:x31
TEST_STORE_ZILSD(x1,x2,0,x29,x30,x31,0x4,-0x801,0x0,18*XLEN/8,sd,0)

inst_38:
// rs2_val == 8, 
// opcode:$opcode; op1:x29; op2:x30; op2val:0x8;op3val:0x20; immval:-0x21; align:0; rs2_hi:x31
TEST_STORE_ZILSD(x1,x2,0,x29,x30,x31,0x8,0x20,-0x21,20*XLEN/8,sd,0)

inst_39:
// rs2_val == 67108864, 
// opcode:$opcode; op1:x29; op2:x30; op2val:0x4000000;op3val:-0x2001; immval:0x1; align:0; rs2_hi:x31
TEST_STORE_ZILSD(x1,x2,0,x29,x30,x31,0x4000000,-0x2001,0x1,22*XLEN/8,sd,0)

inst_40:
// rs2_val == 134217728, 
// opcode:$opcode; op1:x29; op2:x30; op2val:0x8000000;op3val:-0x2000001; immval:-0x400; align:0; rs2_hi:x31
TEST_STORE_ZILSD(x1,x2,0,x29,x30,x31,0x8000000,-0x2000001,-0x400,24*XLEN/8,sd,0)

inst_41:
// rs2_val == 268435456, 
// opcode:$opcode; op1:x29; op2:x30; op2val:0x10000000;op3val:0x400000; immval:-0x401; align:0; rs2_hi:x31
TEST_STORE_ZILSD(x1,x2,0,x29,x30,x31,0x10000000,0x400000,-0x401,26*XLEN/8,sd,0)

inst_42:
// rs2_val == 536870912, 
// opcode:$opcode; op1:x29; op2:x30; op2val:0x20000000;op3val:0x2000; immval:0x80; align:0; rs2_hi:x31
TEST_STORE_ZILSD(x1,x2,0,x29,x30,x31,0x20000000,0x2000,0x80,28*XLEN/8,sd,0)

inst_43:
// rs2_val == 1073741824, 
// opcode:$opcode; op1:x29; op2:x30; op2val:0x40000000;op3val:0x10000000; immval:-0xa; align:0; rs2_hi:x31
TEST_STORE_ZILSD(x1,x2,0,x29,x30,x31,0x40000000,0x10000000,-0xa,30*XLEN/8,sd,0)

inst_44:
// rs2_val == -2147483648, rs2_val == (-2**(xlen-1))
// opcode:$opcode; op1:x29; op2:x30; op2val:-0x80000000;op3val:0x4000; immval:-0x1; align:0; rs2_hi:x31
TEST_STORE_ZILSD(x1,x2,0,x29,x30,x31,-0x80000000,0x4000,-0x1,32*XLEN/8,sd,0)

inst_45:
// rs2_val == 1431655765, 
// opcode:$opcode; op1:x29; op2:x30; op2val:0x55555555;op3val:0x400000; immval:-0x5; align:0; rs2_hi:x31
TEST_STORE_ZILSD(x1,x2,0,x29,x30,x31,0x55555555,0x400000,-0x5,34*XLEN/8,sd,0)

inst_46:
// rs2_val == -1431655766, 
// opcode:$opcode; op1:x29; op2:x30; op2val:-0x55555556;op3val:0x10; immval:0x3ff; align:0; rs2_hi:x31
TEST_STORE_ZILSD(x1,x2,0,x29,x30,x31,-0x55555556,0x10,0x3ff,36*XLEN/8,sd,0)

inst_47:
// rs2_val == 0, 
// opcode:$opcode; op1:x29; op2:x30; op2val:0x0;op3val:0x3fffffff; immval:-0x4; align:0; rs2_hi:x31
TEST_STORE_ZILSD(x1,x2,0,x29,x30,x31,0x0,0x3fffffff,-0x4,38*XLEN/8,sd,0)

inst_48:
// rs2_val == 16, 
// opcode:$opcode; op1:x29; op2:x30; op2val:0x10;op3val:0x1000; immval:0x3; align:0; rs2_hi:x31
TEST_STORE_ZILSD(x1,x2,0,x29,x30,x31,0x10,0x1000,0x3,40*XLEN/8,sd,0)

inst_49:
// rs2_val == 32, 
// opcode:$opcode; op1:x29; op2:x30; op2val:0x20;op3val:0x40; immval:0x3; align:0; rs2_hi:x31
TEST_STORE_ZILSD(x1,x2,0,x29,x30,x31,0x20,0x40,0x3,42*XLEN/8,sd,0)

inst_50:
// rs2_val == 64, 
// opcode:$opcode; op1:x29; op2:x30; op2val:0x40;op3val:0x80; immval:-0x3; align:0; rs2_hi:x31
TEST_STORE_ZILSD(x1,x2,0,x29,x30,x31,0x40,0x80,-0x3,44*XLEN/8,sd,0)

inst_51:
// rs2_val == 128, 
// opcode:$opcode; op1:x29; op2:x30; op2val:0x80;op3val:0x800000; immval:0x1; align:0; rs2_hi:x31
TEST_STORE_ZILSD(x1,x2,0,x29,x30,x31,0x80,0x800000,0x1,46*XLEN/8,sd,0)

inst_52:
// rs2_val == 256, 
// opcode:$opcode; op1:x29; op2:x30; op2val:0x100;op3val:-0x3; immval:-0x2; align:0; rs2_hi:x31
TEST_STORE_ZILSD(x1,x2,0,x29,x30,x31,0x100,-0x3,-0x2,48*XLEN/8,sd,0)

inst_53:
// rs2_val == 512, 
// opcode:$opcode; op1:x29; op2:x30; op2val:0x200;op3val:-0x7; immval:0x20; align:0; rs2_hi:x31
TEST_STORE_ZILSD(x1,x2,0,x29,x30,x31,0x200,-0x7,0x20,50*XLEN/8,sd,0)

inst_54:
// rs2_val == 1024, 
// opcode:$opcode; op1:x29; op2:x30; op2val:0x400;op3val:0x1000; immval:-0x800; align:0; rs2_hi:x31
TEST_STORE_ZILSD(x1,x2,0,x29,x30,x31,0x400,0x1000,-0x800,52*XLEN/8,sd,0)

inst_55:
// rs2_val == 2048, 
// opcode:$opcode; op1:x29; op2:x30; op2val:0x800;op3val:0x200000; immval:0x80; align:0; rs2_hi:x31
TEST_STORE_ZILSD(x1,x2,0,x29,x30,x31,0x800,0x200000,0x80,54*XLEN/8,sd,0)

inst_56:
// rs2_val == 4096, 
// opcode:$opcode; op1:x29; op2:x30; op2val:0x1000;op3val:-0x4001; immval:-0x8; align:0; rs2_hi:x31
TEST_STORE_ZILSD(x1,x2,0,x29,x30,x31,0x1000,-0x4001,-0x8,56*XLEN/8,sd,0)

inst_57:
// rs2_val == 16384, 
// opcode:$opcode; op1:x29; op2:x30; op2val:0x4000;op3val:-0x41; immval:-0x7; align:0; rs2_hi:x31
TEST_STORE_ZILSD(x1,x2,0,x29,x30,x31,0x4000,-0x41,-0x7,58*XLEN/8,sd,0)

inst_58:
// rs2_val == 32768, 
// opcode:$opcode; op1:x29; op2:x30; op2val:0x8000;op3val:-0x80000000; immval:0x400; align:0; rs2_hi:x31
TEST_STORE_ZILSD(x1,x2,0,x29,x30,x31,0x8000,-0x80000000,0x400,60*XLEN/8,sd,0)

inst_59:
// rs2_val == 65536, 
// opcode:$opcode; op1:x29; op2:x30; op2val:0x10000;op3val:0x5; immval:-0x81; align:0; rs2_hi:x31
TEST_STORE_ZILSD(x1,x2,0,x29,x30,x31,0x10000,0x5,-0x81,62*XLEN/8,sd,0)

inst_60:
// rs2_val == 131072, 
// opcode:$opcode; op1:x29; op2:x30; op2val:0x20000;op3val:-0x21; immval:0x9; align:0; rs2_hi:x31
TEST_STORE_ZILSD(x1,x2,0,x29,x30,x31,0x20000,-0x21,0x9,64*XLEN/8,sd,0)

inst_61:
// rs2_val == 262144, 
// opcode:$opcode; op1:x29; op2:x30; op2val:0x40000;op3val:-0x400001; immval:-0x11; align:0; rs2_hi:x31
TEST_STORE_ZILSD(x1,x2,0,x29,x30,x31,0x40000,-0x400001,-0x11,66*XLEN/8,sd,0)

inst_62:
// rs2_val == 524288, 
// opcode:$opcode; op1:x29; op2:x30; op2val:0x80000;op3val:0x1000000; immval:0x400; align:0; rs2_hi:x31
TEST_STORE_ZILSD(x1,x2,0,x29,x30,x31,0x80000,0x1000000,0x400,68*XLEN/8,sd,0)

inst_63:
// rs2_val == 1048576, 
// opcode:$opcode; op1:x29; op2:x30; op2val:0x100000;op3val:0x4; immval:-0xa; align:0; rs2_hi:x31
TEST_STORE_ZILSD(x1,x2,0,x29,x30,x31,0x100000,0x4,-0xa,70*XLEN/8,sd,0)

inst_64:
// rs2_val == 2097152, 
// opcode:$opcode; op1:x29; op2:x30; op2val:0x200000;op3val:-0x80001; immval:-0x7; align:0; rs2_hi:x31
TEST_STORE_ZILSD(x1,x2,0,x29,x30,x31,0x200000,-0x80001,-0x7,72*XLEN/8,sd,0)

inst_65:
// rs2_val == 4194304, 
// opcode:$opcode; op1:x29; op2:x30; op2val:0x400000;op3val:-0x100001; immval:0x7ff; align:0; rs2_hi:x31
TEST_STORE_ZILSD(x1,x2,0,x29,x30,x31,0x400000,-0x100001,0x7ff,74*XLEN/8,sd,0)

inst_66:
// rs2_val == 8388608, 
// opcode:$opcode; op1:x29; op2:x30; op2val:0x800000;op3val:0x40000; immval:-0x201; align:0; rs2_hi:x31
TEST_STORE_ZILSD(x1,x2,0,x29,x30,x31,0x800000,0x40000,-0x201,76*XLEN/8,sd,0)

inst_67:
// rs2_val == 16777216, 
// opcode:$opcode; op1:x29; op2:x30; op2val:0x1000000;op3val:-0x20001; immval:0x4; align:0; rs2_hi:x31
TEST_STORE_ZILSD(x1,x2,0,x29,x30,x31,0x1000000,-0x20001,0x4,78*XLEN/8,sd,0)

inst_68:
// rs2_val == 33554432, 
// opcode:$opcode; op1:x29; op2:x30; op2val:0x2000000;op3val:0x20000; immval:0x100; align:0; rs2_hi:x31
TEST_STORE_ZILSD(x1,x2,0,x29,x30,x31,0x2000000,0x20000,0x100,80*XLEN/8,sd,0)

inst_69:
// rs2_val == -17, 
// opcode:$opcode; op1:x29; op2:x30; op2val:-0x11;op3val:-0x5; immval:0x3ff; align:0; rs2_hi:x31
TEST_STORE_ZILSD(x1,x2,0,x29,x30,x31,-0x11,-0x5,0x3ff,82*XLEN/8,sd,0)

inst_70:
// rs2_val == -2097153, 
// opcode:$opcode; op1:x29; op2:x30; op2val:-0x200001;op3val:0x40000000; immval:-0x4; align:0; rs2_hi:x31
TEST_STORE_ZILSD(x1,x2,0,x29,x30,x31,-0x200001,0x40000000,-0x4,84*XLEN/8,sd,0)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;



signature_x7_0:
    .fill 0*((XLEN/8)/4),4,0xdeadbeef


signature_x7_1:
    .fill 24*((XLEN/8)/4),4,0xdeadbeef


signature_x4_0:
    .fill 32*((XLEN/8)/4),4,0xdeadbeef


signature_x1_0:
    .fill 86*((XLEN/8)/4),4,0xdeadbeef

#ifdef rvtest_mtrap_routine
tsig_begin_canary:
CANARY;

mtrap_sigptr:
    .fill 64*XLEN/32,4,0xdeadbeef

tsig_end_canary:
CANARY;
#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif


sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
