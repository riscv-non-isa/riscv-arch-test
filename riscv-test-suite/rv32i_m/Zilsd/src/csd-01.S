
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.12.1
// timestamp : Thu Apr  4 11:33:49 2024 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /home/vsysuser/verif/working_model/zilsd/wd/riscv-ctg/sample_cgfs/dataset.cgf \
//                  --cgf /home/vsysuser/verif/working_model/zilsd/wd/riscv-ctg/sample_cgfs/rv32zilsd.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the c.sdz instruction of the RISC-V RV32CZilsd extension for the csd covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32ICZilsd")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*C.*Zilsd.*);def TEST_CASE_1=True;",csd)

RVTEST_SIGBASE(x1,signature_x1_1)

inst_0:
// rs1 != rs2, rs1==x12, rs2==x10, imm_val == 0, 
// opcode:c.sdz; op1:x12; op2:x10; op2val:-0x6; op3val:-0x81; $immval:0x0; rs2_hi:x11
TEST_STORE_ZILSD(x1,x2,0,x12,x10,x11,-0x6,-0x81,0x0,0*XLEN/8,c.sd,0)

inst_1:
// rs1==x8, rs2==x12, imm_val > 0, 
// opcode:c.sdz; op1:x8; op2:x12; op2val:-0x1; op3val:-0x7; $immval:0x90; rs2_hi:x13
TEST_STORE_ZILSD(x1,x2,0,x8,x12,x13,-0x1,-0x7,0x90,2*XLEN/8,c.sd,0)

inst_2:
// rs1==x10, rs2==x8, rs2_val == (-2**(xlen-1)), rs2_val == -2147483648, imm_val == 64
// opcode:c.sdz; op1:x10; op2:x8; op2val:-0x80000000; op3val:0x2; $immval:0x40; rs2_hi:x9
TEST_STORE_ZILSD(x1,x2,0,x10,x8,x9,-0x80000000,0x2,0x40,4*XLEN/8,c.sd,0)

inst_3:
// rs1==x14, rs2_val == (2**(xlen-1)-1), rs2_val == 2147483647
// opcode:c.sdz; op1:x14; op2:x10; op2val:0x7fffffff; op3val:-0x1; $immval:0x60; rs2_hi:x11
TEST_STORE_ZILSD(x1,x2,0,x14,x10,x11,0x7fffffff,-0x1,0x60,6*XLEN/8,c.sd,0)

inst_4:
// rs2==x14, rs2_val == 0, imm_val == 16
// opcode:c.sdz; op1:x12; op2:x14; op2val:0x0; op3val:0x7; $immval:0x10; rs2_hi:x15
TEST_STORE_ZILSD(x1,x2,0,x12,x14,x15,0x0,0x7,0x10,8*XLEN/8,c.sd,0)

inst_5:
// imm_val == 8, 
// opcode:c.sdz; op1:x14; op2:x12; op2val:-0xa; op3val:-0xa; $immval:0x8; rs2_hi:x13
TEST_STORE_ZILSD(x1,x2,0,x14,x12,x13,-0xa,-0xa,0x8,10*XLEN/8,c.sd,0)

inst_6:
// rs2_val == -2, 
// opcode:c.sdz; op1:x14; op2:x12; op2val:-0x2; op3val:-0x800001; $immval:0x58; rs2_hi:x13
TEST_STORE_ZILSD(x1,x2,0,x14,x12,x13,-0x2,-0x800001,0x58,12*XLEN/8,c.sd,0)

inst_7:
// rs2_val == -3, 
// opcode:c.sdz; op1:x14; op2:x12; op2val:-0x3; op3val:0x8; $immval:0x68; rs2_hi:x13
TEST_STORE_ZILSD(x1,x2,0,x14,x12,x13,-0x3,0x8,0x68,14*XLEN/8,c.sd,0)

inst_8:
// rs2_val == -5, 
// opcode:c.sdz; op1:x14; op2:x12; op2val:-0x5; op3val:0x8; $immval:0x8; rs2_hi:x13
TEST_STORE_ZILSD(x1,x2,0,x14,x12,x13,-0x5,0x8,0x8,16*XLEN/8,c.sd,0)

inst_9:
// rs2_val == -9, 
// opcode:c.sdz; op1:x14; op2:x12; op2val:-0x9; op3val:-0x400001; $immval:0x58; rs2_hi:x13
TEST_STORE_ZILSD(x1,x2,0,x14,x12,x13,-0x9,-0x400001,0x58,18*XLEN/8,c.sd,0)

inst_10:
// rs2_val == -17, 
// opcode:c.sdz; op1:x14; op2:x12; op2val:-0x11; op3val:0x20; $immval:0x48; rs2_hi:x13
TEST_STORE_ZILSD(x1,x2,0,x14,x12,x13,-0x11,0x20,0x48,20*XLEN/8,c.sd,0)

inst_11:
// rs2_val == -33, 
// opcode:c.sdz; op1:x14; op2:x12; op2val:-0x21; op3val:-0x1; $immval:0x18; rs2_hi:x13
TEST_STORE_ZILSD(x1,x2,0,x14,x12,x13,-0x21,-0x1,0x18,22*XLEN/8,c.sd,0)

inst_12:
// rs2_val == -65, imm_val == 184
// opcode:c.sdz; op1:x14; op2:x12; op2val:-0x41; op3val:0x2000000; $immval:0xb8; rs2_hi:x13
TEST_STORE_ZILSD(x1,x2,0,x14,x12,x13,-0x41,0x2000000,0xb8,24*XLEN/8,c.sd,0)

inst_13:
// rs2_val == -129, 
// opcode:c.sdz; op1:x14; op2:x12; op2val:-0x81; op3val:-0x8; $immval:0xf8; rs2_hi:x13
TEST_STORE_ZILSD(x1,x2,0,x14,x12,x13,-0x81,-0x8,0xf8,26*XLEN/8,c.sd,0)

inst_14:
// rs2_val == -257, imm_val == 168
// opcode:c.sdz; op1:x14; op2:x12; op2val:-0x101; op3val:-0x80001; $immval:0xa8; rs2_hi:x13
TEST_STORE_ZILSD(x1,x2,0,x14,x12,x13,-0x101,-0x80001,0xa8,28*XLEN/8,c.sd,0)

inst_15:
// rs2_val == -513, 
// opcode:c.sdz; op1:x14; op2:x12; op2val:-0x201; op3val:-0x20000001; $immval:0x38; rs2_hi:x13
TEST_STORE_ZILSD(x1,x2,0,x14,x12,x13,-0x201,-0x20000001,0x38,30*XLEN/8,c.sd,0)

inst_16:
// rs2_val == -1025, 
// opcode:c.sdz; op1:x14; op2:x12; op2val:-0x401; op3val:0x800000; $immval:0x60; rs2_hi:x13
TEST_STORE_ZILSD(x1,x2,0,x14,x12,x13,-0x401,0x800000,0x60,32*XLEN/8,c.sd,0)

inst_17:
// rs2_val == -2049, imm_val == 128
// opcode:c.sdz; op1:x14; op2:x12; op2val:-0x801; op3val:-0x81; $immval:0x80; rs2_hi:x13
TEST_STORE_ZILSD(x1,x2,0,x14,x12,x13,-0x801,-0x81,0x80,34*XLEN/8,c.sd,0)

inst_18:
// rs2_val == -4097, 
// opcode:c.sdz; op1:x14; op2:x12; op2val:-0x1001; op3val:0x8000; $immval:0x48; rs2_hi:x13
TEST_STORE_ZILSD(x1,x2,0,x14,x12,x13,-0x1001,0x8000,0x48,36*XLEN/8,c.sd,0)

inst_19:
// rs2_val == -8193, 
// opcode:c.sdz; op1:x14; op2:x12; op2val:-0x2001; op3val:0x9; $immval:0x40; rs2_hi:x13
TEST_STORE_ZILSD(x1,x2,0,x14,x12,x13,-0x2001,0x9,0x40,38*XLEN/8,c.sd,0)

inst_20:
// rs2_val == -16385, 
// opcode:c.sdz; op1:x14; op2:x12; op2val:-0x4001; op3val:0x20000000; $immval:0x40; rs2_hi:x13
TEST_STORE_ZILSD(x1,x2,0,x14,x12,x13,-0x4001,0x20000000,0x40,40*XLEN/8,c.sd,0)

inst_21:
// rs2_val == -32769, 
// opcode:c.sdz; op1:x14; op2:x12; op2val:-0x8001; op3val:-0x201; $immval:0x90; rs2_hi:x13
TEST_STORE_ZILSD(x1,x2,0,x14,x12,x13,-0x8001,-0x201,0x90,42*XLEN/8,c.sd,0)

inst_22:
// rs2_val == -65537, 
// opcode:c.sdz; op1:x14; op2:x12; op2val:-0x10001; op3val:-0x100001; $immval:0x8; rs2_hi:x13
TEST_STORE_ZILSD(x1,x2,0,x14,x12,x13,-0x10001,-0x100001,0x8,44*XLEN/8,c.sd,0)

inst_23:
// rs2_val == -131073, 
// opcode:c.sdz; op1:x14; op2:x12; op2val:-0x20001; op3val:-0x10000001; $immval:0x88; rs2_hi:x13
TEST_STORE_ZILSD(x1,x2,0,x14,x12,x13,-0x20001,-0x10000001,0x88,46*XLEN/8,c.sd,0)

inst_24:
// rs2_val == -262145, 
// opcode:c.sdz; op1:x14; op2:x12; op2val:-0x40001; op3val:0x40000000; $immval:0xf8; rs2_hi:x13
TEST_STORE_ZILSD(x1,x2,0,x14,x12,x13,-0x40001,0x40000000,0xf8,48*XLEN/8,c.sd,0)

inst_25:
// rs2_val == -524289, 
// opcode:c.sdz; op1:x14; op2:x12; op2val:-0x80001; op3val:0x20; $immval:0x80; rs2_hi:x13
TEST_STORE_ZILSD(x1,x2,0,x14,x12,x13,-0x80001,0x20,0x80,50*XLEN/8,c.sd,0)

inst_26:
// rs2_val == -1048577, 
// opcode:c.sdz; op1:x14; op2:x12; op2val:-0x100001; op3val:-0x4000001; $immval:0x18; rs2_hi:x13
TEST_STORE_ZILSD(x1,x2,0,x14,x12,x13,-0x100001,-0x4000001,0x18,52*XLEN/8,c.sd,0)

inst_27:
// rs2_val == -2097153, 
// opcode:c.sdz; op1:x14; op2:x12; op2val:-0x200001; op3val:0x2000; $immval:0xb8; rs2_hi:x13
TEST_STORE_ZILSD(x1,x2,0,x14,x12,x13,-0x200001,0x2000,0xb8,54*XLEN/8,c.sd,0)

inst_28:
// rs2_val == -4194305, 
// opcode:c.sdz; op1:x14; op2:x12; op2val:-0x400001; op3val:0x9; $immval:0x90; rs2_hi:x13
TEST_STORE_ZILSD(x1,x2,0,x14,x12,x13,-0x400001,0x9,0x90,56*XLEN/8,c.sd,0)

inst_29:
// rs2_val == -8388609, 
// opcode:c.sdz; op1:x14; op2:x12; op2val:-0x800001; op3val:-0x801; $immval:0x88; rs2_hi:x13
TEST_STORE_ZILSD(x1,x2,0,x14,x12,x13,-0x800001,-0x801,0x88,58*XLEN/8,c.sd,0)

inst_30:
// rs2_val == -16777217, 
// opcode:c.sdz; op1:x14; op2:x12; op2val:-0x1000001; op3val:-0x2000001; $immval:0xb8; rs2_hi:x13
TEST_STORE_ZILSD(x1,x2,0,x14,x12,x13,-0x1000001,-0x2000001,0xb8,60*XLEN/8,c.sd,0)

inst_31:
// rs2_val == -33554433, 
// opcode:c.sdz; op1:x14; op2:x12; op2val:-0x2000001; op3val:-0x21; $immval:0x30; rs2_hi:x13
TEST_STORE_ZILSD(x1,x2,0,x14,x12,x13,-0x2000001,-0x21,0x30,62*XLEN/8,c.sd,0)

inst_32:
// rs2_val == -67108865, 
// opcode:c.sdz; op1:x14; op2:x12; op2val:-0x4000001; op3val:0x4000000; $immval:0x98; rs2_hi:x13
TEST_STORE_ZILSD(x1,x2,0,x14,x12,x13,-0x4000001,0x4000000,0x98,64*XLEN/8,c.sd,0)

inst_33:
// rs2_val == -134217729, imm_val == 232
// opcode:c.sdz; op1:x14; op2:x12; op2val:-0x8000001; op3val:0x40000; $immval:0xe8; rs2_hi:x13
TEST_STORE_ZILSD(x1,x2,0,x14,x12,x13,-0x8000001,0x40000,0xe8,66*XLEN/8,c.sd,0)

inst_34:
// rs2_val == -268435457, 
// opcode:c.sdz; op1:x14; op2:x12; op2val:-0x10000001; op3val:0x20000000; $immval:0x88; rs2_hi:x13
TEST_STORE_ZILSD(x1,x2,0,x14,x12,x13,-0x10000001,0x20000000,0x88,68*XLEN/8,c.sd,0)

inst_35:
// rs2_val == -536870913, 
// opcode:c.sdz; op1:x14; op2:x12; op2val:-0x20000001; op3val:0x10000000; $immval:0x10; rs2_hi:x13
TEST_STORE_ZILSD(x1,x2,0,x14,x12,x13,-0x20000001,0x10000000,0x10,70*XLEN/8,c.sd,0)

inst_36:
// rs2_val == -1073741825, 
// opcode:c.sdz; op1:x14; op2:x12; op2val:-0x40000001; op3val:0x800; $immval:0x38; rs2_hi:x13
TEST_STORE_ZILSD(x1,x2,0,x14,x12,x13,-0x40000001,0x800,0x38,72*XLEN/8,c.sd,0)

inst_37:
// imm_val == 240, rs2_val == 2097152
// opcode:c.sdz; op1:x14; op2:x12; op2val:0x200000; op3val:-0x80000000; $immval:0xf0; rs2_hi:x13
TEST_STORE_ZILSD(x1,x2,0,x14,x12,x13,0x200000,-0x80000000,0xf0,74*XLEN/8,c.sd,0)

inst_38:
// imm_val == 216, rs2_val == 1073741824
// opcode:c.sdz; op1:x14; op2:x12; op2val:0x40000000; op3val:0x40000; $immval:0xd8; rs2_hi:x13
TEST_STORE_ZILSD(x1,x2,0,x14,x12,x13,0x40000000,0x40000,0xd8,76*XLEN/8,c.sd,0)

inst_39:
// imm_val == 120, rs2_val == 16
// opcode:c.sdz; op1:x14; op2:x12; op2val:0x10; op3val:0x4; $immval:0x78; rs2_hi:x13
TEST_STORE_ZILSD(x1,x2,0,x14,x12,x13,0x10,0x4,0x78,78*XLEN/8,c.sd,0)

inst_40:
// rs2_val == 1, 
// opcode:c.sdz; op1:x14; op2:x12; op2val:0x1; op3val:-0x101; $immval:0xe8; rs2_hi:x13
TEST_STORE_ZILSD(x1,x2,0,x14,x12,x13,0x1,-0x101,0xe8,80*XLEN/8,c.sd,0)

inst_41:
// rs2_val == 4194304, 
// opcode:c.sdz; op1:x14; op2:x12; op2val:0x400000; op3val:0x8000000; $immval:0x98; rs2_hi:x13
TEST_STORE_ZILSD(x1,x2,0,x14,x12,x13,0x400000,0x8000000,0x98,82*XLEN/8,c.sd,0)

inst_42:
// rs2_val == 8388608, 
// opcode:c.sdz; op1:x14; op2:x12; op2val:0x800000; op3val:0x2000; $immval:0x28; rs2_hi:x13
TEST_STORE_ZILSD(x1,x2,0,x14,x12,x13,0x800000,0x2000,0x28,84*XLEN/8,c.sd,0)

inst_43:
// rs2_val == 16777216, 
// opcode:c.sdz; op1:x14; op2:x12; op2val:0x1000000; op3val:0x1; $immval:0x38; rs2_hi:x13
TEST_STORE_ZILSD(x1,x2,0,x14,x12,x13,0x1000000,0x1,0x38,86*XLEN/8,c.sd,0)

inst_44:
// rs2_val == 33554432, 
// opcode:c.sdz; op1:x14; op2:x12; op2val:0x2000000; op3val:-0x401; $immval:0x38; rs2_hi:x13
TEST_STORE_ZILSD(x1,x2,0,x14,x12,x13,0x2000000,-0x401,0x38,88*XLEN/8,c.sd,0)

inst_45:
// rs2_val == 67108864, 
// opcode:c.sdz; op1:x14; op2:x12; op2val:0x4000000; op3val:-0x200001; $immval:0xf0; rs2_hi:x13
TEST_STORE_ZILSD(x1,x2,0,x14,x12,x13,0x4000000,-0x200001,0xf0,90*XLEN/8,c.sd,0)

inst_46:
// rs2_val == 134217728, 
// opcode:c.sdz; op1:x14; op2:x12; op2val:0x8000000; op3val:-0x1001; $immval:0x70; rs2_hi:x13
TEST_STORE_ZILSD(x1,x2,0,x14,x12,x13,0x8000000,-0x1001,0x70,92*XLEN/8,c.sd,0)

inst_47:
// rs2_val == 268435456, 
// opcode:c.sdz; op1:x14; op2:x12; op2val:0x10000000; op3val:-0x40000001; $immval:0x80; rs2_hi:x13
TEST_STORE_ZILSD(x1,x2,0,x14,x12,x13,0x10000000,-0x40000001,0x80,94*XLEN/8,c.sd,0)

inst_48:
// rs2_val == 536870912, imm_val == 80
// opcode:c.sdz; op1:x14; op2:x12; op2val:0x20000000; op3val:-0x10001; $immval:0x50; rs2_hi:x13
TEST_STORE_ZILSD(x1,x2,0,x14,x12,x13,0x20000000,-0x10001,0x50,96*XLEN/8,c.sd,0)

inst_49:
// imm_val == 32, rs2_val == 16384
// opcode:c.sdz; op1:x14; op2:x12; op2val:0x4000; op3val:0x8000000; $immval:0x20; rs2_hi:x13
TEST_STORE_ZILSD(x1,x2,0,x14,x12,x13,0x4000,0x8000000,0x20,98*XLEN/8,c.sd,0)

inst_50:
// rs2_val == 1431655765, 
// opcode:c.sdz; op1:x14; op2:x12; op2val:0x55555555; op3val:0x800; $immval:0x20; rs2_hi:x13
TEST_STORE_ZILSD(x1,x2,0,x14,x12,x13,0x55555555,0x800,0x20,100*XLEN/8,c.sd,0)

inst_51:
// rs2_val == -1431655766, 
// opcode:c.sdz; op1:x14; op2:x12; op2val:-0x55555556; op3val:0x9; $immval:0x90; rs2_hi:x13
TEST_STORE_ZILSD(x1,x2,0,x14,x12,x13,-0x55555556,0x9,0x90,102*XLEN/8,c.sd,0)

inst_52:
// rs2_val == 2, 
// opcode:c.sdz; op1:x14; op2:x12; op2val:0x2; op3val:-0x201; $immval:0xe8; rs2_hi:x13
TEST_STORE_ZILSD(x1,x2,0,x14,x12,x13,0x2,-0x201,0xe8,104*XLEN/8,c.sd,0)

inst_53:
// rs2_val == 4, 
// opcode:c.sdz; op1:x14; op2:x12; op2val:0x4; op3val:-0x80000000; $immval:0xe8; rs2_hi:x13
TEST_STORE_ZILSD(x1,x2,0,x14,x12,x13,0x4,-0x80000000,0xe8,106*XLEN/8,c.sd,0)

inst_54:
// rs2_val == 8, 
// opcode:c.sdz; op1:x14; op2:x12; op2val:0x8; op3val:0x2; $immval:0xe8; rs2_hi:x13
TEST_STORE_ZILSD(x1,x2,0,x14,x12,x13,0x8,0x2,0xe8,108*XLEN/8,c.sd,0)

inst_55:
// rs2_val == 32, 
// opcode:c.sdz; op1:x14; op2:x12; op2val:0x20; op3val:0x1; $immval:0x90; rs2_hi:x13
TEST_STORE_ZILSD(x1,x2,0,x14,x12,x13,0x20,0x1,0x90,110*XLEN/8,c.sd,0)

inst_56:
// rs2_val == 64, 
// opcode:c.sdz; op1:x14; op2:x12; op2val:0x40; op3val:-0x20000001; $immval:0x18; rs2_hi:x13
TEST_STORE_ZILSD(x1,x2,0,x14,x12,x13,0x40,-0x20000001,0x18,112*XLEN/8,c.sd,0)

inst_57:
// rs2_val == 128, 
// opcode:c.sdz; op1:x14; op2:x12; op2val:0x80; op3val:0x10; $immval:0x98; rs2_hi:x13
TEST_STORE_ZILSD(x1,x2,0,x14,x12,x13,0x80,0x10,0x98,114*XLEN/8,c.sd,0)

inst_58:
// rs2_val == 256, 
// opcode:c.sdz; op1:x14; op2:x12; op2val:0x100; op3val:0x20000000; $immval:0x88; rs2_hi:x13
TEST_STORE_ZILSD(x1,x2,0,x14,x12,x13,0x100,0x20000000,0x88,116*XLEN/8,c.sd,0)

inst_59:
// rs2_val == 512, 
// opcode:c.sdz; op1:x14; op2:x12; op2val:0x200; op3val:-0x40000001; $immval:0xf8; rs2_hi:x13
TEST_STORE_ZILSD(x1,x2,0,x14,x12,x13,0x200,-0x40000001,0xf8,118*XLEN/8,c.sd,0)

inst_60:
// rs2_val == 1024, 
// opcode:c.sdz; op1:x14; op2:x12; op2val:0x400; op3val:0x40000; $immval:0x8; rs2_hi:x13
TEST_STORE_ZILSD(x1,x2,0,x14,x12,x13,0x400,0x40000,0x8,120*XLEN/8,c.sd,0)

inst_61:
// rs2_val == 2048, 
// opcode:c.sdz; op1:x14; op2:x12; op2val:0x800; op3val:-0x401; $immval:0x38; rs2_hi:x13
TEST_STORE_ZILSD(x1,x2,0,x14,x12,x13,0x800,-0x401,0x38,122*XLEN/8,c.sd,0)

inst_62:
// rs2_val == 4096, 
// opcode:c.sdz; op1:x14; op2:x12; op2val:0x1000; op3val:-0x81; $immval:0x88; rs2_hi:x13
TEST_STORE_ZILSD(x1,x2,0,x14,x12,x13,0x1000,-0x81,0x88,124*XLEN/8,c.sd,0)

inst_63:
// rs2_val == 8192, 
// opcode:c.sdz; op1:x14; op2:x12; op2val:0x2000; op3val:0x9; $immval:0x8; rs2_hi:x13
TEST_STORE_ZILSD(x1,x2,0,x14,x12,x13,0x2000,0x9,0x8,126*XLEN/8,c.sd,0)

inst_64:
// rs2_val == 32768, 
// opcode:c.sdz; op1:x14; op2:x12; op2val:0x8000; op3val:0x4000000; $immval:0x8; rs2_hi:x13
TEST_STORE_ZILSD(x1,x2,0,x14,x12,x13,0x8000,0x4000000,0x8,128*XLEN/8,c.sd,0)

inst_65:
// rs2_val == 65536, 
// opcode:c.sdz; op1:x14; op2:x12; op2val:0x10000; op3val:-0x8; $immval:0x90; rs2_hi:x13
TEST_STORE_ZILSD(x1,x2,0,x14,x12,x13,0x10000,-0x8,0x90,130*XLEN/8,c.sd,0)

inst_66:
// rs2_val == 131072, 
// opcode:c.sdz; op1:x14; op2:x12; op2val:0x20000; op3val:-0x10000001; $immval:0x40; rs2_hi:x13
TEST_STORE_ZILSD(x1,x2,0,x14,x12,x13,0x20000,-0x10000001,0x40,132*XLEN/8,c.sd,0)

inst_67:
// rs2_val == 262144, 
// opcode:c.sdz; op1:x14; op2:x12; op2val:0x40000; op3val:0x3; $immval:0xd8; rs2_hi:x13
TEST_STORE_ZILSD(x1,x2,0,x14,x12,x13,0x40000,0x3,0xd8,134*XLEN/8,c.sd,0)

inst_68:
// rs2_val == 524288, 
// opcode:c.sdz; op1:x14; op2:x12; op2val:0x80000; op3val:-0x21; $immval:0x80; rs2_hi:x13
TEST_STORE_ZILSD(x1,x2,0,x14,x12,x13,0x80000,-0x21,0x80,136*XLEN/8,c.sd,0)

inst_69:
// rs2_val == 1048576, 
// opcode:c.sdz; op1:x14; op2:x12; op2val:0x100000; op3val:0x20; $immval:0x28; rs2_hi:x13
TEST_STORE_ZILSD(x1,x2,0,x14,x12,x13,0x100000,0x20,0x28,138*XLEN/8,c.sd,0)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;



signature_x1_0:
    .fill 0*((XLEN/8)/4),4,0xdeadbeef


signature_x1_1:
    .fill 140*((XLEN/8)/4),4,0xdeadbeef

#ifdef rvtest_mtrap_routine
tsig_begin_canary:
CANARY;

mtrap_sigptr:
    .fill 64*XLEN/32,4,0xdeadbeef

tsig_end_canary:
CANARY;
#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif


sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
