# See LICENSE.incore for details
# IITM Changes
# This new inx.yaml file handles all of the z*inx extensions
# =======
fadd.s:
  sig:
    stride: 2
    sz: 'SIGALIGN'
  val:
    stride: 2
    sz: 'FLEN/8'
    val_template: "'NAN_BOXED($val,$width,FLEN)'"
    load_instr: "LREG"
  xlen: [32,64]
  isa: 
    - I_Zfinx
    - I_Zdinx
  flen: [32,64]
  std_op:
  formattype: 'rformat'
  rm_val_data: '[7,0,1,2,3,4]'
  fcsr_data: '[x<<5|y for x,y in itertools.product([0,1,2,3,4],range(0,2**5))]'
  rs1_op_data: *all_regs
  rs2_op_data: *all_regs
  rd_op_data: *all_regs
  template: |-

    // $comment
    /* opcode: $inst ; op1:$rs1; op2:$rs2; dest:$rd; op1val:$rs1_val; op2val:$rs2_val; 
       valaddr_reg:$valaddr_reg; val_offset:$val_offset; rmval:$rm_val; fcsr: $fcsr;
       correctval:$correctval; testreg:$testreg 
    */
    TEST_FPRR_OP($inst, $rd, $rs1, $rs2, $rm_val, $fcsr, $correctval, $valaddr_reg, $val_offset, $flagreg, $swreg, $testreg)
    
fadd.d:
  sig:
    stride: 2
    sz: 'SIGALIGN'
  val:
    stride: 2
    sz: 'FLEN/8'
    val_template: "'NAN_BOXED($val,$width,FLEN)'"
    load_instr: "LREG"
  xlen: [32,64]
  isa: 
    - I_Zdinx
  flen: [64]
  rm_val_data: '[7,0,1,2,3,4]'
  fcsr_data: '[x<<5|y for x,y in itertools.product([0,1,2,3,4],range(0,2**5))]'
  std_op:
  formattype: 'rformat'
  rs1_op_data: *pair_regs
  rs2_op_data: *pair_regs
  rd_op_data: *pair_regs
  template: |-

    // $comment
    /* opcode: $inst ; op1:$rs1; op2:$rs2; dest:$rd; op1val:$rs1_val; op2val:$rs2_val; 
       valaddr_reg:$valaddr_reg; val_offset:$val_offset; rmval:$rm_val; fcsr: $fcsr;
       correctval:$correctval; testreg:$testreg 
    */
    TEST_FPRR_OP($inst, $rd, $rs1, $rs2, $rm_val, $fcsr, $correctval, $valaddr_reg, $val_offset, $flagreg, $swreg, $testreg)

fsub.s:
  sig:
    stride: 2
    sz: 'SIGALIGN'
  val:
    stride: 2
    sz: 'FLEN/8'
    val_template: "'NAN_BOXED($val,$width,FLEN)'"
    load_instr: "LREG"
  xlen: [32,64]
  isa: 
    - I_Zfinx
    - I_Zdinx
  flen: [32,64]
  rm_val_data: '[7,0,1,2,3,4]'
  fcsr_data: '[x<<5|y for x,y in itertools.product([0,1,2,3,4],range(0,2**5))]'
  std_op:
  formattype: 'rformat'
  rs1_op_data: *all_regs
  rs2_op_data: *all_regs
  rd_op_data: *all_regs
  template: |-

    // $comment
    /* opcode: $inst ; op1:$rs1; op2:$rs2; dest:$rd; op1val:$rs1_val; op2val:$rs2_val;
       valaddr_reg:$valaddr_reg; val_offset:$val_offset; rmval:$rm_val; fcsr: $fcsr;
       correctval:$correctval; testreg:$testreg
    */
    TEST_FPRR_OP($inst, $rd, $rs1, $rs2, $rm_val, $fcsr, $correctval, $valaddr_reg, $val_offset, $flagreg, $swreg, $testreg)
    
fsub.d:
  sig:
    stride: 2
    sz: 'SIGALIGN'
  val:
    stride: 2
    sz: 'FLEN/8'
    val_template: "'NAN_BOXED($val,$width,FLEN)'"
    load_instr: "LREG"
  xlen: [32,64]
  isa: 
    - I_Zdinx
  flen: [64]
  rm_val_data: '[7,0,1,2,3,4]'
  fcsr_data: '[x<<5|y for x,y in itertools.product([0,1,2,3,4],range(0,2**5))]'
  std_op:
  formattype: 'rformat'
  rs1_op_data: *pair_regs
  rs2_op_data: *pair_regs
  rd_op_data: *pair_regs
  template: |-

    // $comment
    /* opcode: $inst ; op1:$rs1; op2:$rs2; dest:$rd; op1val:$rs1_val; op2val:$rs2_val;
       valaddr_reg:$valaddr_reg; val_offset:$val_offset; rmval:$rm_val; fcsr: $fcsr;
       correctval:$correctval; testreg:$testreg
    */
    TEST_FPRR_OP($inst, $rd, $rs1, $rs2, $rm_val, $fcsr, $correctval, $valaddr_reg, $val_offset, $flagreg, $swreg, $testreg)
    
fmul.s:
  sig:
    stride: 2
    sz: 'SIGALIGN'
  val:
    stride: 2
    sz: 'FLEN/8'
    val_template: "'NAN_BOXED($val,$width,FLEN)'"
    load_instr: "LREG"
  xlen: [32,64]
  isa: 
    - I_Zfinx
    - I_Zdinx
  flen: [32,64]
  rm_val_data: '[7,0,1,2,3,4]'
  fcsr_data: '[x<<5|y for x,y in itertools.product([0,1,2,3,4],range(0,2**5))]'
  std_op:
  formattype: 'rformat'
  rs1_op_data: *all_regs
  rs2_op_data: *all_regs
  rd_op_data: *all_regs
  template: |-

    // $comment
    /* opcode: $inst ; op1:$rs1; op2:$rs2; dest:$rd; op1val:$rs1_val; op2val:$rs2_val;
       valaddr_reg:$valaddr_reg; val_offset:$val_offset; rmval:$rm_val; fcsr: $fcsr;
       correctval:$correctval; testreg:$testreg
    */
    TEST_FPRR_OP($inst, $rd, $rs1, $rs2, $rm_val, $fcsr, $correctval, $valaddr_reg, $val_offset, $flagreg, $swreg, $testreg)
    
fmul.d:
  sig:
    stride: 2
    sz: 'SIGALIGN'
  val:
    stride: 2
    sz: 'FLEN/8'
    val_template: "'NAN_BOXED($val,$width,FLEN)'"
    load_instr: "LREG"
  xlen: [32,64]
  isa: 
    - I_Zdinx
  flen: [64]
  rm_val_data: '[7,0,1,2,3,4]'
  fcsr_data: '[x<<5|y for x,y in itertools.product([0,1,2,3,4],range(0,2**5))]'
  std_op:
  formattype: 'rformat'
  rs1_op_data: *pair_regs
  rs2_op_data: *pair_regs
  rd_op_data: *pair_regs
  template: |-

    // $comment
    /* opcode: $inst ; op1:$rs1; op2:$rs2; dest:$rd; op1val:$rs1_val; op2val:$rs2_val;
       valaddr_reg:$valaddr_reg; val_offset:$val_offset; rmval:$rm_val; fcsr: $fcsr;
       correctval:$correctval; testreg:$testreg
    */
    TEST_FPRR_OP($inst, $rd, $rs1, $rs2, $rm_val, $fcsr, $correctval, $valaddr_reg, $val_offset, $flagreg, $swreg, $testreg)
    
fdiv.s:
  sig:
    stride: 2
    sz: 'SIGALIGN'
  val:
    stride: 2
    sz: 'FLEN/8'
    val_template: "'NAN_BOXED($val,$width,FLEN)'"
    load_instr: "LREG"
  xlen: [32,64]
  isa: 
    - I_Zfinx
    - I_Zdinx
  flen: [32,64]
  rm_val_data: '[7,0,1,2,3,4]'
  fcsr_data: '[x<<5|y for x,y in itertools.product([0,1,2,3,4],range(0,2**5))]'
  std_op:
  formattype: 'rformat'
  rs1_op_data: *all_regs
  rs2_op_data: *all_regs
  rd_op_data: *all_regs
  template: |-

    // $comment
    /* opcode: $inst ; op1:$rs1; op2:$rs2; dest:$rd; op1val:$rs1_val; op2val:$rs2_val;
       valaddr_reg:$valaddr_reg; val_offset:$val_offset; rmval:$rm_val; fcsr: $fcsr;
       correctval:$correctval; testreg:$testreg
    */
    TEST_FPRR_OP($inst, $rd, $rs1, $rs2, $rm_val, $fcsr, $correctval, $valaddr_reg, $val_offset, $flagreg, $swreg, $testreg)
    
fdiv.d:
  sig:
    stride: 2
    sz: 'SIGALIGN'
  val:
    stride: 2
    sz: 'FLEN/8'
    val_template: "'NAN_BOXED($val,$width,FLEN)'"
    load_instr: "LREG"
  xlen: [32,64]
  isa: 
    - I_Zdinx
  flen: [64]
  rm_val_data: '[7,0,1,2,3,4]'
  fcsr_data: '[x<<5|y for x,y in itertools.product([0,1,2,3,4],range(0,2**5))]'
  std_op:
  formattype: 'rformat'
  rs1_op_data: *pair_regs
  rs2_op_data: *pair_regs
  rd_op_data: *pair_regs
  template: |-

    // $comment
    /* opcode: $inst ; op1:$rs1; op2:$rs2; dest:$rd; op1val:$rs1_val; op2val:$rs2_val;
       valaddr_reg:$valaddr_reg; val_offset:$val_offset; rmval:$rm_val; fcsr: $fcsr;
       correctval:$correctval; testreg:$testreg
    */
    TEST_FPRR_OP($inst, $rd, $rs1, $rs2, $rm_val, $fcsr, $correctval, $valaddr_reg, $val_offset, $flagreg, $swreg, $testreg)
    
fsqrt.s:
  sig:
    stride: 1
    sz: 'SIGALIGN'
  val:
    stride: 1
    sz: 'FLEN/8'
    val_template: "'NAN_BOXED($val,$width,FLEN)'"
    load_instr: "LREG"
  xlen: [32,64]
  isa: 
    - I_Zfinx
    - I_Zdinx
  flen: [32,64]
  rm_val_data: '[7,0,1,2,3,4]'
  fcsr_data: '[x<<5|y for x,y in itertools.product([0,1,2,3,4],range(0,2**5))]'
  std_op:
  formattype: 'fsrformat'
  rs1_op_data: *all_regs
  rd_op_data: *all_regs
  template: |-

    // $comment
    /* opcode: $inst ; op1:$rs1; dest:$rd; op1val:$rs1_val; valaddr_reg:$valaddr_reg;
    val_offset:$val_offset; rmval:$rm_val; correctval:$correctval; testreg:$testreg;
    fcsr_val: $fcsr */
    TEST_FPSR_OP($inst, $rd, $rs1, $rm_val, $fcsr, $correctval, $valaddr_reg, $val_offset, $flagreg, $swreg, $testreg)
    
fsqrt.d:
  sig:
    stride: 1
    sz: 'SIGALIGN'
  val:
    stride: 1
    sz: 'FLEN/4'
    val_template: "'NAN_BOXED($val,$width,FLEN)'"
    load_instr: "LREG"
  xlen: [32,64]
  isa: 
    - I_Zdinx
  flen: [64]
  rm_val_data: '[7,0,1,2,3,4]'
  fcsr_data: '[x<<5|y for x,y in itertools.product([0,1,2,3,4],range(0,2**5))]'
  std_op:
  formattype: 'fsrformat'
  rs1_op_data: *pair_regs
  rd_op_data: *pair_regs
  template: |-

    // $comment
    /* opcode: $inst ; op1:$rs1; dest:$rd; op1val:$rs1_val; valaddr_reg:$valaddr_reg;
    val_offset:$val_offset; rmval:$rm_val; correctval:$correctval; testreg:$testreg;
    fcsr_val: $fcsr */
    TEST_FPSR_OP($inst, $rd, $rs1, $rm_val, $fcsr, $correctval, $valaddr_reg, $val_offset, $flagreg, $swreg, $testreg)
    
fmadd.s:
  sig:
    stride: 2
    sz: 'SIGALIGN'
  val:
    stride: 3
    sz: 'FLEN/8'
    val_template: "'NAN_BOXED($val,$width,FLEN)'"
    load_instr: "LREG"
  xlen: [32,64]
  isa: 
    - I_Zfinx
    - I_Zdinx
  flen: [32,64]
  rm_val_data: '[7,0,1,2,3,4]'
  fcsr_data: '[x<<5|y for x,y in itertools.product([0,1,2,3,4],range(0,2**5))]'
  std_op:
  formattype: 'r4format'
  rs1_op_data: *all_regs
  rs2_op_data: *all_regs
  rs3_op_data: *all_regs
  rd_op_data: *all_regs
  template: |-

    // $comment
    /* opcode: $inst ; op1:$rs1; op2:$rs2; op3:$rs3; dest:$rd; op1val:$rs1_val; op2val:$rs2_val;
    op3val:$rs3_val; valaddr_reg:$valaddr_reg; val_offset:$val_offset; rmval:$rm_val;
    testreg:$testreg; fcsr_val:$fcsr */
    TEST_FPR4_OP($inst, $rd, $rs1, $rs2, $rs3, $rm_val, $fcsr, $correctval, $valaddr_reg, $val_offset, $flagreg, $swreg, $testreg)
    
fmadd.d:
  sig:
    stride: 2
    sz: 'SIGALIGN'
  val:
    stride: 3
    sz: 'FLEN/8'
    val_template: "'NAN_BOXED($val,$width,FLEN)'"
    load_instr: "LREG"
  xlen: [32,64]
  isa: 
    - I_Zdinx
  flen: [64]
  rm_val_data: '[7,0,1,2,3,4]'
  fcsr_data: '[x<<5|y for x,y in itertools.product([0,1,2,3,4],range(0,2**5))]'
  std_op:
  formattype: 'r4format'
  rs1_op_data: *pair_regs
  rs2_op_data: *pair_regs
  rs3_op_data: *pair_regs
  rd_op_data: *pair_regs
  template: |-

    // $comment
    /* opcode: $inst ; op1:$rs1; op2:$rs2; op3:$rs3; dest:$rd; op1val:$rs1_val; op2val:$rs2_val;
    op3val:$rs3_val; valaddr_reg:$valaddr_reg; val_offset:$val_offset; rmval:$rm_val;
    testreg:$testreg; fcsr_val:$fcsr */
    TEST_FPR4_OP($inst, $rd, $rs1, $rs2, $rs3, $rm_val, $fcsr, $correctval, $valaddr_reg, $val_offset, $flagreg, $swreg, $testreg)
    
fmsub.s:
  sig:
    stride: 2
    sz: 'SIGALIGN'
  val:
    stride: 3
    sz: 'FLEN/8'
    val_template: "'NAN_BOXED($val,$width,FLEN)'"
    load_instr: "LREG"
  xlen: [32,64]
  isa: 
    - I_Zfinx
    - I_Zdinx
  flen: [32,64]
  rm_val_data: '[7,0,1,2,3,4]'
  fcsr_data: '[x<<5|y for x,y in itertools.product([0,1,2,3,4],range(0,2**5))]'
  std_op:
  formattype: 'r4format'
  rs1_op_data: *all_regs
  rs2_op_data: *all_regs
  rs3_op_data: *all_regs
  rd_op_data: *all_regs
  template: |-

    // $comment
    /* opcode: $inst ; op1:$rs1; op2:$rs2; op3:$rs3; dest:$rd; op1val:$rs1_val; op2val:$rs2_val;
    op3val:$rs3_val; valaddr_reg:$valaddr_reg; val_offset:$val_offset; rmval:$rm_val;
    testreg:$testreg; fcsr_val:$fcsr */
    TEST_FPR4_OP($inst, $rd, $rs1, $rs2, $rs3, $rm_val, $fcsr, $correctval, $valaddr_reg, $val_offset, $flagreg, $swreg, $testreg)
    
fmsub.d:
  sig:
    stride: 2
    sz: 'SIGALIGN'
  val:
    stride: 3
    sz: 'FLEN/8'
    val_template: "'NAN_BOXED($val,$width,FLEN)'"
    load_instr: "LREG"
  xlen: [32,64]
  isa: 
    - I_Zdinx
  flen: [64]
  rm_val_data: '[7,0,1,2,3,4]'
  fcsr_data: '[x<<5|y for x,y in itertools.product([0,1,2,3,4],range(0,2**5))]'
  std_op:
  formattype: 'r4format'
  rs1_op_data: *pair_regs
  rs2_op_data: *pair_regs
  rs3_op_data: *pair_regs
  rd_op_data: *pair_regs
  template: |-

    // $comment
    /* opcode: $inst ; op1:$rs1; op2:$rs2; op3:$rs3; dest:$rd; op1val:$rs1_val; op2val:$rs2_val;
    op3val:$rs3_val; valaddr_reg:$valaddr_reg; val_offset:$val_offset; rmval:$rm_val;
    testreg:$testreg; fcsr_val:$fcsr */
    TEST_FPR4_OP($inst, $rd, $rs1, $rs2, $rs3, $rm_val, $fcsr, $correctval, $valaddr_reg, $val_offset, $flagreg, $swreg, $testreg)
    
fnmadd.s:
  sig:
    stride: 2
    sz: 'SIGALIGN'
  val:
    stride: 3
    sz: 'FLEN/8'
    val_template: "'NAN_BOXED($val,$width,FLEN)'"
    load_instr: "LREG"
  xlen: [32,64]
  isa: 
    - I_Zfinx
    - I_Zdinx
  flen: [32,64]
  rm_val_data: '[7,0,1,2,3,4]'
  fcsr_data: '[x<<5|y for x,y in itertools.product([0,1,2,3,4],range(0,2**5))]'
  std_op:
  formattype: 'r4format'
  rs1_op_data: *all_regs
  rs2_op_data: *all_regs
  rs3_op_data: *all_regs
  rd_op_data: *all_regs
  template: |-

    // $comment
    /* opcode: $inst ; op1:$rs1; op2:$rs2; op3:$rs3; dest:$rd; op1val:$rs1_val; op2val:$rs2_val;
    op3val:$rs3_val; valaddr_reg:$valaddr_reg; val_offset:$val_offset; rmval:$rm_val;
    testreg:$testreg; fcsr_val:$fcsr */
    TEST_FPR4_OP($inst, $rd, $rs1, $rs2, $rs3, $rm_val, $fcsr, $correctval, $valaddr_reg, $val_offset, $flagreg, $swreg, $testreg)
    
fnmadd.d:
  sig:
    stride: 2
    sz: 'SIGALIGN'
  val:
    stride: 3
    sz: 'FLEN/8'
    val_template: "'NAN_BOXED($val,$width,FLEN)'"
    load_instr: "LREG"
  xlen: [32,64]
  isa: 
    - I_Zdinx
  flen: [64]
  rm_val_data: '[7,0,1,2,3,4]'
  fcsr_data: '[x<<5|y for x,y in itertools.product([0,1,2,3,4],range(0,2**5))]'
  std_op:
  formattype: 'r4format'
  rs1_op_data: *pair_regs
  rs2_op_data: *pair_regs
  rs3_op_data: *pair_regs
  rd_op_data: *pair_regs
  template: |-

    // $comment
    /* opcode: $inst ; op1:$rs1; op2:$rs2; op3:$rs3; dest:$rd; op1val:$rs1_val; op2val:$rs2_val;
    op3val:$rs3_val; valaddr_reg:$valaddr_reg; val_offset:$val_offset; rmval:$rm_val;
    testreg:$testreg; fcsr_val:$fcsr */
    TEST_FPR4_OP($inst, $rd, $rs1, $rs2, $rs3, $rm_val, $fcsr, $correctval, $valaddr_reg, $val_offset, $flagreg, $swreg, $testreg)
    
fnmsub.s:
  sig:
    stride: 2
    sz: 'SIGALIGN'
  val:
    stride: 3
    sz: 'FLEN/8'
    val_template: "'NAN_BOXED($val,$width,FLEN)'"
    load_instr: "LREG"
  xlen: [32,64]
  isa: 
    - I_Zfinx
    - I_Zdinx
  flen: [32,64]
  rm_val_data: '[7,0,1,2,3,4]'
  fcsr_data: '[x<<5|y for x,y in itertools.product([0,1,2,3,4],range(0,2**5))]'
  std_op:
  formattype: 'r4format'
  rs1_op_data: *all_regs
  rs2_op_data: *all_regs
  rs3_op_data: *all_regs
  rd_op_data: *all_regs
  template: |-

    // $comment
    /* opcode: $inst ; op1:$rs1; op2:$rs2; op3:$rs3; dest:$rd; op1val:$rs1_val; op2val:$rs2_val;
    op3val:$rs3_val; valaddr_reg:$valaddr_reg; val_offset:$val_offset; rmval:$rm_val;
    testreg:$testreg; fcsr_val:$fcsr */
    TEST_FPR4_OP($inst, $rd, $rs1, $rs2, $rs3, $rm_val, $fcsr, $correctval, $valaddr_reg, $val_offset, $flagreg, $swreg, $testreg)
    
fnmsub.d:
  sig:
    stride: 2
    sz: 'SIGALIGN'
  val:
    stride: 3
    sz: 'FLEN/8'
    val_template: "'NAN_BOXED($val,$width,FLEN)'"
    load_instr: "LREG"
  xlen: [32,64]
  isa: 
    - I_Zdinx
  flen: [64]
  rm_val_data: '[7,0,1,2,3,4]'
  fcsr_data: '[x<<5|y for x,y in itertools.product([0,1,2,3,4],range(0,2**5))]'
  std_op:
  formattype: 'r4format'
  rs1_op_data: *pair_regs
  rs2_op_data: *pair_regs
  rs3_op_data: *pair_regs
  rd_op_data: *pair_regs
  template: |-

    // $comment
    /* opcode: $inst ; op1:$rs1; op2:$rs2; op3:$rs3; dest:$rd; op1val:$rs1_val; op2val:$rs2_val;
    op3val:$rs3_val; valaddr_reg:$valaddr_reg; val_offset:$val_offset; rmval:$rm_val;
    testreg:$testreg; fcsr_val:$fcsr */
    TEST_FPR4_OP($inst, $rd, $rs1, $rs2, $rs3, $rm_val, $fcsr, $correctval, $valaddr_reg, $val_offset, $flagreg, $swreg, $testreg)

fsgnj.s:
  sig:
    stride: 2
    sz: 'SIGALIGN'
  val:
    stride: 2
    sz: 'FLEN/8'
    val_template: "'NAN_BOXED($val,$width,FLEN)'"
    load_instr: "LREG"
  xlen: [32,64]
  isa: 
    - I_Zfinx
    - I_Zdinx
  flen: [32,64]
  fcsr_data: '[x<<5|y for x,y in itertools.product([0,1,2,3,4],range(0,2**5))]'
  std_op:
  formattype: 'rformat'
  rs1_op_data: *all_regs
  rs2_op_data: *all_regs
  rd_op_data: *all_regs
  template: |-

    // $comment
    /* opcode: $inst ; op1:$rs1; op2:$rs2; dest:$rd; op1val:$rs1_val; op2val:$rs2_val;
       valaddr_reg:$valaddr_reg; val_offset:$val_offset; fcsr: $fcsr;
       correctval:$correctval; testreg:$testreg
    */
    TEST_FPRR_OP_NRM($inst, $rd, $rs1, $rs2, $fcsr, $correctval, $valaddr_reg, $val_offset, $flagreg, $swreg, $testreg)
    
fsgnj.d:
  sig:
    stride: 2
    sz: 'SIGALIGN'
  val:
    stride: 2
    sz: 'FLEN/8'
    val_template: "'NAN_BOXED($val,$width,FLEN)'"
    load_instr: "LREG"
  xlen: [32,64]
  isa: 
    - I_Zdinx
  flen: [64]
  fcsr_data: '[x<<5|y for x,y in itertools.product([0,1,2,3,4],range(0,2**5))]'
  std_op:
  formattype: 'rformat'
  rs1_op_data: *pair_regs
  rs2_op_data: *pair_regs
  rd_op_data: *pair_regs
  template: |-

    // $comment
    /* opcode: $inst ; op1:$rs1; op2:$rs2; dest:$rd; op1val:$rs1_val; op2val:$rs2_val;
       valaddr_reg:$valaddr_reg; val_offset:$val_offset; fcsr: $fcsr;
       correctval:$correctval; testreg:$testreg
    */
    TEST_FPRR_OP_NRM($inst, $rd, $rs1, $rs2,  $fcsr, $correctval, $valaddr_reg, $val_offset, $flagreg, $swreg, $testreg)
    
fsgnjn.s:
  sig:
    stride: 2
    sz: 'SIGALIGN'
  val:
    stride: 2
    sz: 'FLEN/8'
    val_template: "'NAN_BOXED($val,$width,FLEN)'"
    load_instr: "LREG"
  xlen: [32,64]
  isa: 
    - I_Zfinx
    - I_Zdinx
  flen: [32,64]
  fcsr_data: '[x<<5|y for x,y in itertools.product([0,1,2,3,4],range(0,2**5))]'
  std_op:
  formattype: 'rformat'
  rs1_op_data: *all_regs
  rs2_op_data: *all_regs
  rd_op_data: *all_regs
  template: |-

    // $comment
    /* opcode: $inst ; op1:$rs1; op2:$rs2; dest:$rd; op1val:$rs1_val; op2val:$rs2_val;
       valaddr_reg:$valaddr_reg; val_offset:$val_offset;  fcsr: $fcsr;
       correctval:$correctval; testreg:$testreg
    */
    TEST_FPRR_OP_NRM($inst, $rd, $rs1, $rs2, $fcsr, $correctval, $valaddr_reg, $val_offset, $flagreg, $swreg, $testreg)
    
fsgnjn.d:
  sig:
    stride: 2
    sz: 'SIGALIGN'
  val:
    stride: 2
    sz: 'FLEN/8'
    val_template: "'NAN_BOXED($val,$width,FLEN)'"
    load_instr: "LREG"
  xlen: [32,64]
  isa: 
    - I_Zdinx
  flen: [64]
  fcsr_data: '[x<<5|y for x,y in itertools.product([0,1,2,3,4],range(0,2**5))]'
  std_op:
  formattype: 'rformat'
  rs1_op_data: *pair_regs
  rs2_op_data: *pair_regs
  rd_op_data: *pair_regs
  template: |-

    // $comment
    /* opcode: $inst ; op1:$rs1; op2:$rs2; dest:$rd; op1val:$rs1_val; op2val:$rs2_val;
       valaddr_reg:$valaddr_reg; val_offset:$val_offset; fcsr: $fcsr;
       correctval:$correctval; testreg:$testreg
    */
    TEST_FPRR_OP_NRM($inst, $rd, $rs1, $rs2, $fcsr, $correctval, $valaddr_reg, $val_offset, $flagreg, $swreg, $testreg)
    
fsgnjx.s:
  sig:
    stride: 2
    sz: 'SIGALIGN'
  val:
    stride: 2
    sz: 'FLEN/8'
    val_template: "'NAN_BOXED($val,$width,FLEN)'"
    load_instr: "LREG"
  xlen: [32,64]
  isa: 
    - I_Zfinx
    - I_Zdinx
  flen: [32,64]
  fcsr_data: '[x<<5|y for x,y in itertools.product([0,1,2,3,4],range(0,2**5))]'
  std_op:
  formattype: 'rformat'
  rs1_op_data: *all_regs
  rs2_op_data: *all_regs
  rd_op_data: *all_regs
  template: |-

    // $comment
    /* opcode: $inst ; op1:$rs1; op2:$rs2; dest:$rd; op1val:$rs1_val; op2val:$rs2_val;
       valaddr_reg:$valaddr_reg; val_offset:$val_offset; fcsr: $fcsr;
       correctval:$correctval; testreg:$testreg
    */
    TEST_FPRR_OP_NRM($inst, $rd, $rs1, $rs2, $fcsr, $correctval, $valaddr_reg, $val_offset, $flagreg, $swreg, $testreg)
    
fsgnjx.d:
  sig:
    stride: 2
    sz: 'SIGALIGN'
  val:
    stride: 2
    sz: 'FLEN/8'
    val_template: "'NAN_BOXED($val,$width,FLEN)'"
    load_instr: "LREG"
  xlen: [32,64]
  isa: 
    - I_Zdinx
  flen: [64]
  fcsr_data: '[x<<5|y for x,y in itertools.product([0,1,2,3,4],range(0,2**5))]'
  std_op:
  formattype: 'rformat'
  rs1_op_data: *pair_regs
  rs2_op_data: *pair_regs
  rd_op_data: *pair_regs
  template: |-

    // $comment
    /* opcode: $inst ; op1:$rs1; op2:$rs2; dest:$rd; op1val:$rs1_val; op2val:$rs2_val;
       valaddr_reg:$valaddr_reg; val_offset:$val_offset; fcsr: $fcsr;
       correctval:$correctval; testreg:$testreg
    */
    TEST_FPRR_OP_NRM($inst, $rd, $rs1, $rs2, $fcsr, $correctval, $valaddr_reg, $val_offset, $flagreg, $swreg, $testreg)
    
fmin.s:
  sig:
    stride: 2
    sz: 'SIGALIGN'
  val:
    stride: 2
    sz: 'FLEN/8'
    val_template: "'NAN_BOXED($val,$width,FLEN)'"
    load_instr: "LREG"
  xlen: [32,64]
  isa: 
    - I_Zfinx
    - I_Zdinx
  flen: [32,64]
  fcsr_data: '[x<<5|y for x,y in itertools.product([0,1,2,3,4],range(0,2**5))]'
  std_op:
  formattype: 'rformat'
  rs1_op_data: *all_regs
  rs2_op_data: *all_regs
  rd_op_data: *all_regs
  template: |-

    // $comment
    /* opcode: $inst ; op1:$rs1; op2:$rs2; dest:$rd; op1val:$rs1_val; op2val:$rs2_val;
       valaddr_reg:$valaddr_reg; val_offset:$val_offset; fcsr: $fcsr;
       correctval:$correctval; testreg:$testreg
    */
    TEST_FPRR_OP_NRM($inst, $rd, $rs1, $rs2, $fcsr, $correctval, $valaddr_reg, $val_offset, $flagreg, $swreg, $testreg)
    
fmin.d:
  sig:
    stride: 2
    sz: 'SIGALIGN'
  val:
    stride: 2
    sz: 'FLEN/8'
    val_template: "'NAN_BOXED($val,$width,FLEN)'"
    load_instr: "LREG"
  xlen: [32,64]
  isa: 
    - I_Zdinx
  flen: [64]
  fcsr_data: '[x<<5|y for x,y in itertools.product([0,1,2,3,4],range(0,2**5))]'
  std_op:
  formattype: 'rformat'
  rs1_op_data: *pair_regs
  rs2_op_data: *pair_regs
  rd_op_data: *pair_regs
  template: |-

    // $comment
    /* opcode: $inst ; op1:$rs1; op2:$rs2; dest:$rd; op1val:$rs1_val; op2val:$rs2_val;
       valaddr_reg:$valaddr_reg; val_offset:$val_offset; fcsr: $fcsr;
       correctval:$correctval; testreg:$testreg
    */
    TEST_FPRR_OP_NRM($inst, $rd, $rs1, $rs2, $fcsr, $correctval, $valaddr_reg, $val_offset, $flagreg, $swreg, $testreg)
    
fmax.s:
  sig:
    stride: 2
    sz: 'SIGALIGN'
  val:
    stride: 2
    sz: 'FLEN/8'
    val_template: "'NAN_BOXED($val,$width,FLEN)'"
    load_instr: "LREG"
  xlen: [32,64]
  isa: 
    - I_Zfinx
    - I_Zdinx
  flen: [32,64]
  fcsr_data: '[x<<5|y for x,y in itertools.product([0,1,2,3,4],range(0,2**5))]'
  std_op:
  formattype: 'rformat'
  rs1_op_data: *all_regs
  rs2_op_data: *all_regs
  rd_op_data: *all_regs
  template: |-

    // $comment
    /* opcode: $inst ; op1:$rs1; op2:$rs2; dest:$rd; op1val:$rs1_val; op2val:$rs2_val;
       valaddr_reg:$valaddr_reg; val_offset:$val_offset; fcsr: $fcsr;
       correctval:$correctval; testreg:$testreg
    */
    TEST_FPRR_OP_NRM($inst, $rd, $rs1, $rs2, $fcsr, $correctval, $valaddr_reg, $val_offset, $flagreg, $swreg, $testreg)
    
fmax.d:
  sig:
    stride: 2
    sz: 'SIGALIGN'
  val:
    stride: 2
    sz: 'FLEN/8'
    val_template: "'NAN_BOXED($val,$width,FLEN)'"
    load_instr: "LREG"
  xlen: [32,64]
  isa: 
    - I_Zdinx
  flen: [64]
  fcsr_data: '[x<<5|y for x,y in itertools.product([0,1,2,3,4],range(0,2**5))]'
  std_op:
  formattype: 'rformat'
  rs1_op_data: *pair_regs
  rs2_op_data: *pair_regs
  rd_op_data: *pair_regs
  template: |-

    // $comment
    /* opcode: $inst ; op1:$rs1; op2:$rs2; dest:$rd; op1val:$rs1_val; op2val:$rs2_val;
       valaddr_reg:$valaddr_reg; val_offset:$val_offset;  fcsr: $fcsr;
       correctval:$correctval; testreg:$testreg
    */
    TEST_FPRR_OP_NRM($inst, $rd, $rs1, $rs2, $fcsr, $correctval, $valaddr_reg, $val_offset, $flagreg, $swreg, $testreg)
    
feq.s:
  sig:
    stride: 2
    sz: 'SIGALIGN'
  val:
    stride: 2
    sz: 'FLEN/8'
    val_template: "'NAN_BOXED($val,$width,FLEN)'"
    load_instr: "LREG"
  xlen: [32,64]
  isa: 
    - I_Zfinx
    - I_Zdinx
  flen: [32,64]
  fcsr_data: '[x<<5|y for x,y in itertools.product([0,1,2,3,4],range(0,2**5))]'
  std_op:
  formattype: 'rformat'
  rs1_op_data: *all_regs
  rs2_op_data: *all_regs
  rd_op_data: *all_regs
  template: |-
    // $comment
    /* opcode: $inst ; op1:$rs1; op2:$rs2; dest:$rd; op1val:$rs1_val; op2val:$rs2_val;
    valaddr_reg:$valaddr_reg; val_offset:$val_offset; correctval:$correctval; testreg:$testreg;
    fcsr_val: $fcsr*/
    TEST_FCMP_OP($inst, $rd, $rs1, $rs2, $fcsr, $correctval, $valaddr_reg, $val_offset, $flagreg, $swreg, $testreg)
    
feq.d:
  sig:
    stride: 2
    sz: 'SIGALIGN'
  val:
    stride: 2
    sz: 'FLEN/8'
    val_template: "'NAN_BOXED($val,$width,FLEN)'"
    load_instr: "LREG"
  xlen: [32,64]
  isa: 
    - I_Zdinx
  flen: [64]
  fcsr_data: '[x<<5|y for x,y in itertools.product([0,1,2,3,4],range(0,2**5))]'
  std_op:
  formattype: 'rformat'
  rs1_op_data: *pair_regs
  rs2_op_data: *pair_regs
  rd_op_data: *pair_regs
  template: |-
    // $comment
    /* opcode: $inst ; op1:$rs1; op2:$rs2; dest:$rd; op1val:$rs1_val; op2val:$rs2_val;
    valaddr_reg:$valaddr_reg; val_offset:$val_offset; correctval:$correctval; testreg:$testreg;
    fcsr_val: $fcsr*/
    TEST_FCMP_OP($inst, $rd, $rs1, $rs2, $fcsr, $correctval, $valaddr_reg, $val_offset, $flagreg, $swreg, $testreg)
    
flt.s:
  sig:
    stride: 2
    sz: 'SIGALIGN'
  val:
    stride: 2
    sz: 'FLEN/8'
    val_template: "'NAN_BOXED($val,$width,FLEN)'"
    load_instr: "LREG"
  xlen: [32,64]
  isa: 
    - I_Zfinx
    - I_Zdinx
  flen: [32,64]
  fcsr_data: '[x<<5|y for x,y in itertools.product([0,1,2,3,4],range(0,2**5))]'
  std_op:
  formattype: 'rformat'
  rs1_op_data: *all_regs
  rs2_op_data: *all_regs
  rd_op_data: *all_regs
  template: |-
    // $comment
    /* opcode: $inst ; op1:$rs1; op2:$rs2; dest:$rd; op1val:$rs1_val; op2val:$rs2_val;
    valaddr_reg:$valaddr_reg; val_offset:$val_offset; correctval:$correctval; testreg:$testreg;
    fcsr_val: $fcsr*/
    TEST_FCMP_OP($inst, $rd, $rs1, $rs2, $fcsr, $correctval, $valaddr_reg, $val_offset, $flagreg, $swreg, $testreg)
    
flt.d:
  sig:
    stride: 2
    sz: 'SIGALIGN'
  val:
    stride: 2
    sz: 'FLEN/8'
    val_template: "'NAN_BOXED($val,$width,FLEN)'"
    load_instr: "LREG"
  xlen: [32,64]
  isa: 
    - I_Zdinx
  flen: [64]
  fcsr_data: '[x<<5|y for x,y in itertools.product([0,1,2,3,4],range(0,2**5))]'
  std_op:
  formattype: 'rformat'
  rs1_op_data: *pair_regs
  rs2_op_data: *pair_regs
  rd_op_data: *pair_regs
  template: |-
    // $comment
    /* opcode: $inst ; op1:$rs1; op2:$rs2; dest:$rd; op1val:$rs1_val; op2val:$rs2_val;
    valaddr_reg:$valaddr_reg; val_offset:$val_offset; correctval:$correctval; testreg:$testreg;
    fcsr_val: $fcsr*/
    TEST_FCMP_OP($inst, $rd, $rs1, $rs2, $fcsr, $correctval, $valaddr_reg, $val_offset, $flagreg, $swreg, $testreg)
    
fle.s:
  sig:
    stride: 2
    sz: 'SIGALIGN'
  val:
    stride: 2
    sz: 'FLEN/8'
    val_template: "'NAN_BOXED($val,$width,FLEN)'"
    load_instr: "LREG"
  xlen: [32,64]
  isa: 
    - I_Zfinx
    - I_Zdinx
  flen: [32,64]
  fcsr_data: '[x<<5|y for x,y in itertools.product([0,1,2,3,4],range(0,2**5))]'
  std_op:
  formattype: 'rformat'
  rs1_op_data: *all_regs
  rs2_op_data: *all_regs
  rd_op_data: *all_regs
  template: |-
    // $comment
    /* opcode: $inst ; op1:$rs1; op2:$rs2; dest:$rd; op1val:$rs1_val; op2val:$rs2_val;
    valaddr_reg:$valaddr_reg; val_offset:$val_offset; correctval:$correctval; testreg:$testreg;
    fcsr_val: $fcsr*/
    TEST_FCMP_OP($inst, $rd, $rs1, $rs2, $fcsr, $correctval, $valaddr_reg, $val_offset, $flagreg, $swreg, $testreg)
    
fle.d:
  sig:
    stride: 2
    sz: 'SIGALIGN'
  val:
    stride: 2
    sz: 'FLEN/8'
    val_template: "'NAN_BOXED($val,$width,FLEN)'"
    load_instr: "LREG"
  xlen: [32,64]
  isa: 
    - I_Zdinx
  flen: [64]
  fcsr_data: '[x<<5|y for x,y in itertools.product([0,1,2,3,4],range(0,2**5))]'
  std_op:
  formattype: 'rformat'
  rs1_op_data: *pair_regs
  rs2_op_data: *pair_regs
  rd_op_data: *pair_regs
  template: |-
    // $comment
    /* opcode: $inst ; op1:$rs1; op2:$rs2; dest:$rd; op1val:$rs1_val; op2val:$rs2_val;
    valaddr_reg:$valaddr_reg; val_offset:$val_offset; correctval:$correctval; testreg:$testreg;
    fcsr_val: $fcsr*/
    TEST_FCMP_OP($inst, $rd, $rs1, $rs2, $fcsr, $correctval, $valaddr_reg, $val_offset, $flagreg, $swreg, $testreg)
    
fcvt.w.s:
  sig:
    stride: 2
    sz: 'SIGALIGN'
  val:
    stride: 1
    sz: 'FLEN/8'
    val_template: "'NAN_BOXED($val,$width,FLEN)'"
    load_instr: "LREG"
  xlen: [32,64]
  isa: 
    - I_Zfinx
    - I_Zdinx
  flen: [32,64]
  rm_val_data: '[7,0,1,2,3,4]'
  fcsr_data: '[x<<5|y for x,y in itertools.product([0,1,2,3,4],range(0,2**5))]'
  std_op:
  formattype: 'fsrformat'
  rs1_op_data: *all_regs
  rd_op_data: *all_regs
  template: |-
    // $comment
    /* opcode: $inst ; op1:$rs1; dest:$rd; op1val:$rs1_val; valaddr_reg:$valaddr_reg;
    val_offset:$val_offset; rmval:$rm_val; correctval:$correctval; testreg:$testreg;
    fcsr_val:$fcsr*/
    TEST_FPID_OP($inst, $rd, $rs1, $rm_val, $fcsr, $correctval, $valaddr_reg, $val_offset, $flagreg, $swreg, $testreg,$load_instr)
    
fcvt.w.d:
  sig:
    stride: 2
    sz: 'SIGALIGN'
  val:
    stride: 1
    sz: 'FLEN/8'
    val_template: "'NAN_BOXED($val,$width,FLEN)'"
    load_instr: "LREG"
  xlen: [32,64]
  isa: 
    - I_Zdinx
  flen: [64]
  rm_val_data: '[7,0,1,2,3,4]'
  fcsr_data: '[x<<5|y for x,y in itertools.product([0,1,2,3,4],range(0,2**5))]'
  std_op:
  formattype: 'fsrformat'
  rs1_op_data: *pair_regs
  rd_op_data: *pair_regs
  template: |-
    // $comment
    /* opcode: $inst ; op1:$rs1; dest:$rd; op1val:$rs1_val; valaddr_reg:$valaddr_reg;
    val_offset:$val_offset; rmval:$rm_val; correctval:$correctval; testreg:$testreg;
    fcsr_val:$fcsr*/
    TEST_FPID_OP($inst, $rd, $rs1, $rm_val, $fcsr, $correctval, $valaddr_reg, $val_offset, $flagreg, $swreg, $testreg,$load_instr)
    
fcvt.wu.s:
  sig:
    stride: 2
    sz: 'SIGALIGN'
  val:
    stride: 1
    sz: 'FLEN/8'
    val_template: "'NAN_BOXED($val,$width,FLEN)'"
    load_instr: "LREG"
  xlen: [32,64]
  isa: 
    - I_Zfinx
    - I_Zdinx
  flen: [32,64]
  rm_val_data: '[7,0,1,2,3,4]'
  fcsr_data: '[x<<5|y for x,y in itertools.product([0,1,2,3,4],range(0,2**5))]'
  std_op:
  formattype: 'fsrformat'
  rs1_op_data: *all_regs
  rd_op_data: *all_regs
  template: |-
    // $comment
    /* opcode: $inst ; op1:$rs1; dest:$rd; op1val:$rs1_val; valaddr_reg:$valaddr_reg;
    val_offset:$val_offset; rmval:$rm_val; correctval:$correctval; testreg:$testreg;
    fcsr_val:$fcsr*/
    TEST_FPID_OP($inst, $rd, $rs1, $rm_val, $fcsr, $correctval, $valaddr_reg, $val_offset, $flagreg, $swreg, $testreg,$load_instr)

fcvt.wu.d:
  sig:
    stride: 2
    sz: 'SIGALIGN'
  val:
    stride: 1
    sz: 'FLEN/8'
    val_template: "'NAN_BOXED($val,$width,FLEN)'"
    load_instr: "LREG"
  xlen: [32,64]
  isa: 
    - I_Zdinx
  flen: [64]
  rm_val_data: '[7,0,1,2,3,4]'
  fcsr_data: '[x<<5|y for x,y in itertools.product([0,1,2,3,4],range(0,2**5))]'
  std_op:
  formattype: 'fsrformat'
  rs1_op_data: *pair_regs
  rd_op_data: *pair_regs
  template: |-
    // $comment
    /* opcode: $inst ; op1:$rs1; dest:$rd; op1val:$rs1_val; valaddr_reg:$valaddr_reg;
    val_offset:$val_offset; rmval:$rm_val; correctval:$correctval; testreg:$testreg;
    fcsr_val:$fcsr*/
    TEST_FPID_OP($inst, $rd, $rs1, $rm_val, $fcsr, $correctval, $valaddr_reg, $val_offset, $flagreg, $swreg, $testreg,$load_instr)
    
fcvt.l.d:
  sig:
    stride: 2
    sz: 'SIGALIGN'
  val:
    stride: 1
    sz: 'FLEN/8'
    val_template: "'NAN_BOXED($val,$width,FLEN)'"
    load_instr: "LREG"
  xlen: [64]
  isa: 
    - I_Zdinx
  flen: [64]
  rm_val_data: '[7,0,1,2,3,4]'
  fcsr_data: '[x<<5|y for x,y in itertools.product([0,1,2,3,4],range(0,2**5))]'
  std_op:
  formattype: 'fsrformat'
  rs1_op_data: *pair_regs
  rd_op_data: *pair_regs
  template: |-
    // $comment
    /* opcode: $inst ; op1:$rs1; dest:$rd; op1val:$rs1_val; valaddr_reg:$valaddr_reg;
    val_offset:$val_offset; rmval:$rm_val; correctval:$correctval; testreg:$testreg;
    fcsr_val:$fcsr*/
    TEST_FPID_OP($inst, $rd, $rs1, $rm_val, $fcsr, $correctval, $valaddr_reg, $val_offset, $flagreg, $swreg, $testreg,$load_instr)

fcvt.lu.d:
  sig:
    stride: 2
    sz: 'SIGALIGN'
  val:
    stride: 1
    sz: 'FLEN/8'
    val_template: "'NAN_BOXED($val,$width,FLEN)'"
    load_instr: "LREG"
  xlen: [64]
  isa: 
    - I_Zdinx
  flen: [64]
  rm_val_data: '[7,0,1,2,3,4]'
  fcsr_data: '[x<<5|y for x,y in itertools.product([0,1,2,3,4],range(0,2**5))]'
  std_op:
  formattype: 'fsrformat'
  rs1_op_data: *pair_regs
  rd_op_data: *pair_regs
  template: |-
    // $comment
    /* opcode: $inst ; op1:$rs1; dest:$rd; op1val:$rs1_val; valaddr_reg:$valaddr_reg;
    val_offset:$val_offset; rmval:$rm_val; correctval:$correctval; testreg:$testreg;
    fcsr_val:$fcsr*/
    TEST_FPID_OP($inst, $rd, $rs1, $rm_val, $fcsr, $correctval, $valaddr_reg, $val_offset, $flagreg, $swreg, $testreg,$load_instr)
   
fcvt.s.d:
  sig:
    stride: 2
    sz: 'SIGALIGN'
  val:
    stride: 1
    sz: 'FLEN/8'
    val_template: "'NAN_BOXED($val,$width,FLEN)'"
    load_instr: "LREG"
  xlen: [32,64]
  isa: 
    - I_Zdinx
  flen: [64]
  rm_val_data: '[7,0,1,2,3,4]'
  fcsr_data: '[x<<5|y for x,y in itertools.product([0,1,2,3,4],range(0,2**5))]'
  std_op:
  formattype: 'fsrformat'
  rs1_op_data: *pair_regs
  rd_op_data: *pair_regs
  template: |-

    // $comment
    /* opcode: $inst ; op1:$rs1; dest:$rd; op1val:$rs1_val; valaddr_reg:$valaddr_reg;
    val_offset:$val_offset; rmval:$rm_val; correctval:$correctval; testreg:$testreg;
    fcsr_val: $fcsr */
    TEST_FPSR_OP($inst, $rd, $rs1, $rm_val, $fcsr, $correctval, $valaddr_reg, $val_offset, $flagreg, $swreg, $testreg)
    
fcvt.d.s:
  sig:
    stride: 2
    sz: 'SIGALIGN'
  val:
    stride: 2
    sz: 'FLEN/8'
    val_template: "'NAN_BOXED($val,$width,FLEN)'"
    load_instr: "LREG"
  xlen: [32,64]
  isa: 
    - I_Zdinx
  flen: [32,64]
  rm_val_data: '[7,0,1,2,3,4]'
  fcsr_data: '[x<<5|y for x,y in itertools.product([0,1,2,3,4],range(0,2**5))]'
  std_op:
  formattype: 'fsrformat'
  rs1_op_data: *pair_regs
  rd_op_data: *pair_regs
  template: |-

    // $comment
    /* opcode: $inst ; op1:$rs1; dest:$rd; op1val:$rs1_val; valaddr_reg:$valaddr_reg;
    val_offset:$val_offset; correctval:$correctval; testreg:$testreg;
    fcsr_val: $fcsr */
    TEST_FPSR_OP_NRM($inst, $rd, $rs1, $fcsr, $correctval, $valaddr_reg, $val_offset, $flagreg, $swreg, $testreg)  
    
fcvt.s.w:
  sig:
    stride: 2
    sz: 'SIGALIGN'
  val:
    stride: 1
    sz: '4'
    val_template: "'.word $val;'"
    load_instr: "lw"
  xlen: [32,64]
  isa: 
    - I_Zfinx
    - I_Zdinx
  flen: [32,64]
  rm_val_data: '[7,0,1,2,3,4]'
  fcsr_data: '[x<<5|y for x,y in itertools.product([0,1,2,3,4],range(0,2**5))]'
  std_op:
  formattype: 'fsrformat'
  rs1_op_data: *all_regs
  rd_op_data: *all_regs
  template: |-
    // $comment
    /* opcode: $inst ; op1:$rs1; dest:$rd; op1val:$rs1_val; valaddr_reg:$valaddr_reg;
    val_offset:$val_offset; rmval:$rm_val; correctval:$correctval; testreg:$testreg;
    fcsr_val: $fcsr*/
    TEST_FPIO_OP($inst, $rd, $rs1, $rm_val, $fcsr, $correctval, $valaddr_reg, $val_offset, $flagreg, $swreg, $testreg,$load_instr)

fcvt.s.wu:
  sig:
    stride: 2
    sz: 'SIGALIGN'
  val:
    stride: 1
    sz: '4'
    val_template: "'.word $val;'"
    load_instr: "LREGWU"
  xlen: [32,64]
  isa: 
    - I_Zfinx
    - I_Zdinx
  flen: [32,64]
  rm_val_data: '[7,0,1,2,3,4]'
  fcsr_data: '[x<<5|y for x,y in itertools.product([0,1,2,3,4],range(0,2**5))]'
  std_op:
  formattype: 'fsrformat'
  rs1_op_data: *all_regs
  rd_op_data: *all_regs
  template: |-
    // $comment
    /* opcode: $inst ; op1:$rs1; dest:$rd; op1val:$rs1_val; valaddr_reg:$valaddr_reg;
    val_offset:$val_offset; rmval:$rm_val; correctval:$correctval; testreg:$testreg;
    fcsr_val: $fcsr*/
    TEST_FPIO_OP($inst, $rd, $rs1, $rm_val, $fcsr, $correctval, $valaddr_reg, $val_offset, $flagreg, $swreg, $testreg,$load_instr)
 
fcvt.d.w:
  sig:
    stride: 2
    sz: 'SIGALIGN'
  val:
    stride: 1
    sz: '4'
    val_template: "'.word $val;'"
    load_instr: "lw"
  xlen: [32,64]
  isa: 
    - I_Zdinx
  flen: [64]
  rm_val_data: '[7,0,1,2,3,4]'
  fcsr_data: '[x<<5|y for x,y in itertools.product([0,1,2,3,4],range(0,2**5))]'
  std_op:
  formattype: 'fsrformat'
  rs1_op_data: *pair_regs
  rd_op_data: *pair_regs
  template: |-
    // $comment
    /* opcode: $inst ; op1:$rs1; dest:$rd; op1val:$rs1_val; valaddr_reg:$valaddr_reg;
    val_offset:$val_offset; correctval:$correctval; testreg:$testreg;
    fcsr_val: $fcsr*/
    TEST_FPIO_OP_NRM($inst, $rd, $rs1, $fcsr, $correctval, $valaddr_reg, $val_offset, $flagreg, $swreg, $testreg,$load_instr)

fcvt.d.wu:
  sig:
    stride: 2
    sz: 'SIGALIGN'
  val:
    stride: 1
    sz: '4'
    val_template: "'.word $val;'"
    load_instr: "LREGWU"
  xlen: [32,64]
  isa: 
    - I_Zdinx
  flen: [64]
  rm_val_data: '[7,0,1,2,3,4]'
  fcsr_data: '[x<<5|y for x,y in itertools.product([0,1,2,3,4],range(0,2**5))]'
  std_op:
  formattype: 'fsrformat'
  rs1_op_data: *pair_regs
  rd_op_data: *pair_regs
  template: |-
    // $comment
    /* opcode: $inst ; op1:$rs1; dest:$rd; op1val:$rs1_val; valaddr_reg:$valaddr_reg;
    val_offset:$val_offset; correctval:$correctval; testreg:$testreg;
    fcsr_val: $fcsr*/
    TEST_FPIO_OP_NRM($inst, $rd, $rs1, $fcsr, $correctval, $valaddr_reg, $val_offset, $flagreg, $swreg, $testreg,$load_instr)
    
fcvt.d.l:
  sig:
    stride: 2
    sz: 'SIGALIGN'
  val:
    stride: 1
    sz: '8'
    val_template: "'.dword $val;'"
    load_instr: "ld"
  xlen: [64]
  isa: 
    - I_Zdinx
  flen: [64]
  rm_val_data: '[7,0,1,2,3,4]'
  fcsr_data: '[x<<5|y for x,y in itertools.product([0,1,2,3,4],range(0,2**5))]'
  std_op:
  formattype: 'fsrformat'
  rs1_op_data: *pair_regs
  rd_op_data: *pair_regs
  template: |-
    // $comment
    /* opcode: $inst ; op1:$rs1; dest:$rd; op1val:$rs1_val; valaddr_reg:$valaddr_reg;
    val_offset:$val_offset; rmval:$rm_val; correctval:$correctval; testreg:$testreg;
    fcsr_val: $fcsr*/
    TEST_FPIO_OP($inst, $rd, $rs1, $rm_val, $fcsr, $correctval, $valaddr_reg, $val_offset, $flagreg, $swreg, $testreg,$load_instr)

fcvt.d.lu:
  sig:
    stride: 2
    sz: 'SIGALIGN'
  val:
    stride: 1
    sz: '8'
    val_template: "'.dword $val;'"
    load_instr: "ld"
  xlen: [64]
  isa: 
    - I_Zdinx
  flen: [64]
  rm_val_data: '[7,0,1,2,3,4]'
  fcsr_data: '[x<<5|y for x,y in itertools.product([0,1,2,3,4],range(0,2**5))]'
  std_op:
  formattype: 'fsrformat'
  rs1_op_data: *pair_regs
  rd_op_data: *pair_regs
  template: |-
    // $comment
    /* opcode: $inst ; op1:$rs1; dest:$rd; op1val:$rs1_val; valaddr_reg:$valaddr_reg;
    val_offset:$val_offset; rmval:$rm_val; correctval:$correctval; testreg:$testreg;
    fcsr_val: $fcsr*/
    TEST_FPIO_OP($inst, $rd, $rs1, $rm_val, $fcsr, $correctval, $valaddr_reg, $val_offset, $flagreg, $swreg, $testreg,$load_instr)

fmv.d.x:
  sig:
    stride: 2
    sz: 'SIGALIGN'
  val:
    stride: 1
    sz: '8'
    val_template: "'.dword $val;'"
    load_instr: "ld"
  xlen: [64]
  isa: 
    - I_Zdinx
  flen: [64]
  fcsr_data: '[x<<5|y for x,y in itertools.product([0,1,2,3,4],range(0,2**5))]'
  std_op:
  formattype: 'fsrformat'
  rs1_op_data: *all_regs
  rd_op_data: *all_regs
  template: |-
    // $comment
    /* opcode: $inst ; op1:$rs1; dest:$rd; op1val:$rs1_val; valaddr_reg:$valaddr_reg;
    val_offset:$val_offset; correctval:$correctval; testreg:$testreg;
    fcsr_val: $fcsr*/
    TEST_FPIO_OP_NRM($inst, $rd, $rs1, $fcsr, $correctval, $valaddr_reg, $val_offset, $flagreg, $swreg, $testreg,$load_instr)
    
fclass.s:
  sig:
    stride: 1
    sz: 'SIGALIGN'
  val:
    stride: 1
    sz: 'FLEN/8'
    val_template: "'NAN_BOXED($val,$width,FLEN)'"
    load_instr: "LREG"
  xlen: [32,64]
  isa: 
    - I_Zfinx
    - I_Zdinx
  flen: [32,64]
  fcsr_data: '[x<<5|y for x,y in itertools.product([0,1,2,3,4],range(0,2**5))]'
  std_op:
  formattype: 'fsrformat'
  rs1_op_data: *all_regs
  rd_op_data: *all_regs
  template: |-
    // $comment
    /* opcode: $inst ; op1:$rs1; dest:$rd; op1val:$rs1_val; valaddr_reg:$valaddr_reg;
    val_offset:$val_offset; correctval:$correctval; testreg:$testreg;
    fcsr_val:$fcsr*/
    TEST_FPID_OP_NRM($inst, $rd, $rs1, $fcsr, $correctval, $valaddr_reg, $val_offset, $flagreg, $swreg, $testreg)
   
fclass.d:
  sig:
    stride: 1
    sz: 'SIGALIGN'
  val:
    stride: 1
    sz: 'FLEN/8'
    val_template: "'NAN_BOXED($val,$width,FLEN)'"
    load_instr: "LREG"
  xlen: [32, 64]
  isa: 
    - I_Zdinx
  flen: [64]
  fcsr_data: '[x<<5|y for x,y in itertools.product([0,1,2,3,4],range(0,2**5))]'
  std_op:
  formattype: 'fsrformat'
  rs1_op_data: *pair_regs
  rd_op_data: *pair_regs
  template: |-
    // $comment
    /* opcode: $inst ; op1:$rs1; dest:$rd; op1val:$rs1_val; valaddr_reg:$valaddr_reg;
    val_offset:$val_offset; correctval:$correctval; testreg:$testreg;
    fcsr_val:$fcsr*/
    TEST_FPID_OP_NRM($inst, $rd, $rs1, $fcsr, $correctval, $valaddr_reg, $val_offset, $flagreg, $swreg, $testreg)

# The val nodes are present in the fmem ops right now as a hack to force allocation of flagreg. Once
# anxilliary registers are moved to their own functions, this can be removed.
   
fcvt.l.s:
  sig:
    stride: 2
    sz: 'SIGALIGN'
  val:
    stride: 1
    sz: 'FLEN/4'
    val_template: "'NAN_BOXED($val,64,FLEN)'"
    load_instr: "LREG"
  xlen: [64]
  std_op:
  isa: 
    - I_Zfinx
    - I_Zdinx
  flen: [32,64]
  rm_val_data: '[0,1,2,3,4,7]'
  fcsr_data: '[x<<5|y for x,y in itertools.product([0,1,2,3,4],range(0,2**5))]'
  formattype: 'fsrformat'
  rs1_op_data: *all_regs
  rd_op_data: *all_regs
  template: |-
    // $comment
    /* opcode: $inst ; op1:$rs1; dest:$rd; op1val:$rs1_val; valaddr_reg:$valaddr_reg;
    val_offset:$val_offset; rmval:$rm_val; correctval:$correctval; testreg:$testreg;
    fcsr_val:$fcsr*/
    TEST_FPID_OP($inst, $rd, $rs1, $rm_val, $fcsr, $correctval, $valaddr_reg, $val_offset, $flagreg, $swreg, $testreg,$load_instr)
    
fcvt.lu.s:
  sig:
    stride: 2
    sz: 'SIGALIGN'
  val:
    stride: 1
    sz: 'FLEN/8'
    val_template: "'NAN_BOXED($val,$width,FLEN)'"
    load_instr: "LREG"
  xlen: [64]
  isa: 
    - I_Zfinx
    - I_Zdinx
  flen: [32,64]
  rm_val_data: '[0,1,2,3,4,7]'
  fcsr_data: '[x<<5|y for x,y in itertools.product([0,1,2,3,4],range(0,2**5))]'
  std_op:
  formattype: 'fsrformat'
  rs1_op_data: *all_regs
  rd_op_data: *all_regs
  template: |-
    // $comment
    /* opcode: $inst ; op1:$rs1; dest:$rd; op1val:$rs1_val; valaddr_reg:$valaddr_reg;
    val_offset:$val_offset; rmval:$rm_val; correctval:$correctval; testreg:$testreg;
    fcsr_val:$fcsr*/
    TEST_FPID_OP($inst, $rd, $rs1, $rm_val, $fcsr, $correctval, $valaddr_reg, $val_offset, $flagreg, $swreg, $testreg,$load_instr)
    
fcvt.s.l:
  sig:
    stride: 2
    sz: 'SIGALIGN'
  val:
    stride: 1
    sz: '8'
    val_template: "'.dword $val;'"
    load_instr: "ld"
  xlen: [64]
  isa: 
    - I_Zfinx
    - I_Zdinx
  std_op:
  flen: [32,64]
  rm_val_data: '[7,0,1,2,3,4]'
  fcsr_data: '[x<<5|y for x,y in itertools.product([0,1,2,3,4],range(0,2**5))]'
  formattype: 'fsrformat'
  rs1_op_data: *all_regs
  rd_op_data: *all_regs
  template: |-
    // $comment
    /* opcode: $inst ; op1:$rs1; dest:$rd; op1val:$rs1_val; valaddr_reg:$valaddr_reg;
    val_offset:$val_offset; rmval:$rm_val; correctval:$correctval; testreg:$testreg;
    fcsr_val: $fcsr*/
    TEST_FPIO_OP($inst, $rd, $rs1, $rm_val, $fcsr, $correctval, $valaddr_reg, $val_offset, $flagreg, $swreg, $testreg,$load_instr)
 
fcvt.s.lu:
  sig:
    stride: 2
    sz: 'SIGALIGN'
  val:
    stride: 1
    sz: '8'
    val_template: "'.dword $val;'"
    load_instr: "ld"
  xlen: [64]
  isa: 
    - I_Zfinx
    - I_Zdinxz
  flen: [32,64]
  rm_val_data: '[7,0,1,2,3,4]'
  fcsr_data: '[x<<5|y for x,y in itertools.product([0,1,2,3,4],range(0,2**5))]'
  std_op:
  formattype: 'fsrformat'
  rs1_op_data: *all_regs
  rd_op_data: *all_regs
  template: |-
    // $comment
    /* opcode: $inst ; op1:$rs1; dest:$rd; op1val:$rs1_val; valaddr_reg:$valaddr_reg;
    val_offset:$val_offset; rmval:$rm_val; correctval:$correctval; testreg:$testreg;
    fcsr_val: $fcsr*/