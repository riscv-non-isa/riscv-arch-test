# For Licence details look at https://github.com/riscv-software-src/riscv-ctg/-/blob/master/LICENSE.incore

# *----------------------------------------------------------------------------------------------------------------------
# *----------------------------------------------------------------------------------------------------------------------

invalid_PTE01:

  config:

  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True;

  mnemonics:

    csrrw       : 0                                                                             # Sets the expected encoding value for the "csrrw" mnemonic.
    csrrs       : 0                                                                             # Sets the expected encoding value for the "csrrs" mnemonic.
    sd          : 0                                                                             # Sets the expected encoding value for the "sd" mnemonic.

  csr_comb:

    (satp >> 60 == 0x8) and (rs1 == 'x31') and (rd == 'x0'): 0                                  # Check if the top 4 bits of the "satp" register indicate sv39 mode.
    (mstatus & 0x1800)  == 0x0800 and ( rs1 == 'x9' ) and (rd == 'x0') : 0                      # Ensure the "MPP" bits in "mstatus" are set to "S" mode.

  val_comb:

    (rs2_val == 0xF): 0                                                                         # check if the rs2 matches the "store/AMO page fault
    (rs2_val == 0xD): 0                                                                         # check if the rs2 matches the "load page fault
    (((rs1_val >> 12 ) == 0x80000000005) and ((rs2_val & 0xFFF) == 0x0C6)): 0                   # checks the PTE permission and level0 at which PTE is stored 

# *----------------------------------------------------------------------------------------------------------------------
# *----------------------------------------------------------------------------------------------------------------------

invalid_PTE02:

  config:

  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True;

  mnemonics:

    csrrw       : 0                                                                             # Sets the expected encoding value for the "csrrw" mnemonic.
    csrrs       : 0                                                                             # Sets the expected encoding value for the "csrrs" mnemonic.
    sd          : 0                                                                             # Sets the expected encoding value for the "sd" mnemonic.

  csr_comb:

    (satp >> 60 == 0x8) and (rs1 == 'x31') and (rd == 'x0'): 0                                  # Check if the top 4 bits of the "satp" register indicate sv39 mode.
    (mstatus & 0x1800)  == 0x0800 and ( rs1 == 'x9' ) and (rd == 'x0') : 0                      # Ensure the "MPP" bits in "mstatus" are set to "S" mode.

  val_comb:

    (rs2_val == 0xF): 0                                                                         # check if the rs2 matches the "store/AMO page fault
    (rs2_val == 0xD): 0                                                                         # check if the rs2 matches the "load page fault
    (((rs1_val >> 12 ) == 0x80000000004) and ((rs2_val & 0xFFF) == 0x0C6)): 0                   # checks the PTE permission and level1 at which PTE is stored 

# *----------------------------------------------------------------------------------------------------------------------
# *----------------------------------------------------------------------------------------------------------------------

invalid_PTE03:

  config:

  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True;

  mnemonics:

    csrrw       : 0                                                                             # Sets the expected encoding value for the "csrrw" mnemonic.
    csrrs       : 0                                                                             # Sets the expected encoding value for the "csrrs" mnemonic.
    sd          : 0                                                                             # Sets the expected encoding value for the "sd" mnemonic.

  csr_comb:

    (satp >> 60 == 0x8) and (rs1 == 'x31') and (rd == 'x0'): 0                                  # Check if the top 4 bits of the "satp" register indicate sv39 mode.
    (mstatus & 0x1800)  == 0x0800 and ( rs1 == 'x9' ) and (rd == 'x0') : 0                      # Ensure the "MPP" bits in "mstatus" are set to "S" mode.

  val_comb:

    (rs2_val == 0xF): 0                                                                         # check if the rs2 matches the "store/AMO page fault
    (rs2_val == 0xD): 0                                                                         # check if the rs2 matches the "load page fault
    (((rs1_val >> 12 ) == 0x80000000006) and ((rs2_val & 0xFFF) == 0x0C6)) if rs2_val is not None else None: 0               
                                                                                                # checks the PTE permission and level2 at which PTE is stored 

# *----------------------------------------------------------------------------------------------------------------------
# *----------------------------------------------------------------------------------------------------------------------

invalid_PTE04:

  config:

  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True;

  mnemonics:

    csrrw       : 0                                                                             # Sets the expected encoding value for the "csrrw" mnemonic.
    csrrs       : 0                                                                             # Sets the expected encoding value for the "csrrs" mnemonic.
    sd          : 0                                                                             # Sets the expected encoding value for the "sd" mnemonic.
    csrrc       : 0                                                                             # Sets the expected encoding value for the "csrrc" mnemonic.

  csr_comb:

    (satp >> 60 == 0x8) and (rs1 == 'x31') and (rd == 'x0'): 0                                  # Check if the top 4 bits of the "satp" register indicate sv39 mode.
    (mstatus & 0x1800)  == 0x0000 and ( rs1 == 'x9' ) and (rd == 'x0') : 0                      # Ensure the "MPP" bits in "mstatus" are set to "U" mode.

  val_comb:

    (rs2_val == 0xF): 0                                                                         # check if the rs2 matches the "store/AMO page fault
    (rs2_val == 0xD): 0                                                                         # check if the rs2 matches the "load page fault
    (((rs1_val >> 12 ) == 0x80000000005) and ((rs2_val & 0xFFF) == 0x0D6)): 0                   # checks the PTE permission and level0 at which PTE is stored 

# *----------------------------------------------------------------------------------------------------------------------
# *----------------------------------------------------------------------------------------------------------------------

invalid_PTE05:

  config:

  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True;

  mnemonics:

    csrrw       : 0                                                                             # Sets the expected encoding value for the "csrrw" mnemonic.
    csrrs       : 0                                                                             # Sets the expected encoding value for the "csrrs" mnemonic.
    sd          : 0                                                                             # Sets the expected encoding value for the "sd" mnemonic.
    csrrc       : 0                                                                             # Sets the expected encoding value for the "csrrc" mnemonic.

  csr_comb:

    (satp >> 60 == 0x8) and (rs1 == 'x31') and (rd == 'x0'): 0                                  # Check if the top 4 bits of the "satp" register indicate sv39 mode.
    (mstatus & 0x1800)  == 0x0000 and ( rs1 == 'x9' ) and (rd == 'x0') : 0                      # Ensure the "MPP" bits in "mstatus" are set to "U" mode.

  val_comb:

    (rs2_val == 0xF): 0                                                                         # check if the rs2 matches the "store/AMO page fault
    (rs2_val == 0xD): 0                                                                         # check if the rs2 matches the "load page fault
    (((rs1_val >> 12 ) == 0x80000000004) and ((rs2_val & 0xFFF) == 0x0D6)): 0                   # checks the PTE permission and level1 at which PTE is stored 

# *----------------------------------------------------------------------------------------------------------------------
# *----------------------------------------------------------------------------------------------------------------------

invalid_PTE06:

  config:

  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True;

  mnemonics:

    csrrw       : 0                                                                             # Sets the expected encoding value for the "csrrw" mnemonic.
    csrrs       : 0                                                                             # Sets the expected encoding value for the "csrrs" mnemonic.
    sd          : 0                                                                             # Sets the expected encoding value for the "sd" mnemonic.
    csrrc       : 0                                                                             # Sets the expected encoding value for the "csrrc" mnemonic.

  csr_comb:

    (satp >> 60 == 0x8) and (rs1 == 'x31') and (rd == 'x0'): 0                                  # Check if the top 4 bits of the "satp" register indicate sv39 mode.
    (mstatus & 0x1800)  == 0x0000 and ( rs1 == 'x9' ) and (rd == 'x0') : 0                      # Ensure the "MPP" bits in "mstatus" are set to "U" mode.

  val_comb:

    (rs2_val == 0xF): 0                                                                         # check if the rs2 matches the "store/AMO page fault
    (rs2_val == 0xD): 0                                                                         # check if the rs2 matches the "load page fault
    (((rs1_val >> 12 ) == 0x80000000006) and ((rs2_val & 0xFFF) == 0x0D6)) if rs2_val is not None else None: 0               
                                                                                                # checks the PTE permission and level2 at which PTE is stored 


# *----------------------------------------------------------------------------------------------------------------------
# *----------------------------------------------------------------------------------------------------------------------

invalid_PTE07:

  config:

  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True;

  mnemonics:

    csrrw       : 0                                                                             # Sets the expected encoding value for the "csrrw" mnemonic.
    csrrs       : 0                                                                             # Sets the expected encoding value for the "csrrs" mnemonic.
    sd          : 0                                                                             # Sets the expected encoding value for the "sd" mnemonic.

  csr_comb:

    (satp >> 60 == 0x8) and (rs1 == 'x31') and (rd == 'x0'): 0                                  # Check if the top 4 bits of the "satp" register indicate sv39 mode.
    (mstatus & 0x1800)  == 0x0800 and ( rs1 == 'x9' ) and (rd == 'x0') : 0                      # Ensure the "MPP" bits in "mstatus" are set to "S" mode.

  val_comb:

    (rs2_val == 0xC): 0                                                                         # checks if the rs2 matches the " Instruction page fault"
    (((rs1_val >> 12 ) == 0x80000000005) and ((rs2_val & 0xFFF) == 0x0C6)): 0                   # checks the PTE permission and level0 at which PTE is stored 

# *----------------------------------------------------------------------------------------------------------------------
# *----------------------------------------------------------------------------------------------------------------------

invalid_PTE08:

  config:

  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True;

  mnemonics:

    csrrw       : 0                                                                             # Sets the expected encoding value for the "csrrw" mnemonic.
    csrrs       : 0                                                                             # Sets the expected encoding value for the "csrrs" mnemonic.
    sd          : 0                                                                             # Sets the expected encoding value for the "sd" mnemonic.

  csr_comb:

    (satp >> 60 == 0x8) and (rs1 == 'x31') and (rd == 'x0'): 0                                  # Check if the top 4 bits of the "satp" register indicate sv39 mode.
    (mstatus & 0x1800)  == 0x0800 and ( rs1 == 'x9' ) and (rd == 'x0') : 0                      # Ensure the "MPP" bits in "mstatus" are set to "S" mode.

  val_comb:

    (rs2_val == 0xC): 0                                                                        # checks if the rs2 matches the " Instruction page fault"
    (((rs1_val >> 12 ) == 0x80000000004) and ((rs2_val & 0xFFF) == 0x0C6)): 0                  # checks the PTE permission and level1 at which PTE is stored 

# *----------------------------------------------------------------------------------------------------------------------
# *----------------------------------------------------------------------------------------------------------------------

invalid_PTE09: 

  config:

  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True;

  mnemonics:

    csrrw       : 0                                                                             # Sets the expected encoding value for the "csrrw" mnemonic.
    csrrs       : 0                                                                             # Sets the expected encoding value for the "csrrs" mnemonic.
    sd          : 0                                                                             # Sets the expected encoding value for the "sd" mnemonic.

  csr_comb:

    (satp >> 60 == 0x8) and (rs1 == 'x31') and (rd == 'x0'): 0                                  # Check if the top 4 bits of the "satp" register indicate sv39 mode.
    (mstatus & 0x1800)  == 0x0800 and ( rs1 == 'x9' ) and (rd == 'x0') : 0                      # Ensure the "MPP" bits in "mstatus" are set to "S" mode.

  val_comb:

    (rs2_val == 0xC): 0                                                                        # checks if the rs2 matches the " Instruction page fault"
    (((rs1_val >> 12 ) == 0x80000000006) and ((rs2_val & 0xFFF) == 0x0C6)) if rs2_val is not None else None: 0               
                                                                                                # checks the PTE permission and level2 at which PTE is stored 

# *----------------------------------------------------------------------------------------------------------------------
# *----------------------------------------------------------------------------------------------------------------------

invalid_PTE10:

  config:

  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True;

  mnemonics:

    csrrw       : 0                                                                             # Sets the expected encoding value for the "csrrw" mnemonic.
    csrrs       : 0                                                                             # Sets the expected encoding value for the "csrrs" mnemonic.
    sd          : 0                                                                             # Sets the expected encoding value for the "sd" mnemonic.
    csrrc       : 0                                                                             # Sets the expected encoding value for the "csrrc" mnemonic.

  csr_comb:

    (satp >> 60 == 0x8) and (rs1 == 'x31') and (rd == 'x0'): 0                                  # Check if the top 4 bits of the "satp" register indicate sv39 mode.
    (mstatus & 0x1800)  == 0x0000 and ( rs1 == 'x9' ) and (rd == 'x0') : 0                      # Ensure the "MPP" bits in "mstatus" are set to "U" mode.

  val_comb:

    (rs2_val == 0xC): 0                                                                         # checks if the rs2 matches the " Instruction page fault"
    (((rs1_val >> 12 ) == 0x80000000005) and ((rs2_val & 0xFFF) == 0x0D6)): 0                   # checks the PTE permission and level0 at which PTE is stored 

# *----------------------------------------------------------------------------------------------------------------------
# *----------------------------------------------------------------------------------------------------------------------

invalid_PTE11:

  config:

  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True;

  mnemonics:

    csrrw       : 0                                                                             # Sets the expected encoding value for the "csrrw" mnemonic.
    csrrs       : 0                                                                             # Sets the expected encoding value for the "csrrs" mnemonic.
    sd          : 0                                                                             # Sets the expected encoding value for the "sd" mnemonic.
    csrrc       : 0                                                                             # Sets the expected encoding value for the "csrrc" mnemonic.

  csr_comb:

    (satp >> 60 == 0x8) and (rs1 == 'x31') and (rd == 'x0'): 0                                  # Check if the top 4 bits of the "satp" register indicate sv39 mode.
    (mstatus & 0x1800)  == 0x0000 and ( rs1 == 'x9' ) and (rd == 'x0') : 0                      # Ensure the "MPP" bits in "mstatus" are set to "U" mode.

  val_comb:

    (rs2_val == 0xC): 0                                                                        # checks if the rs2 matches the " Instruction page fault"
    (((rs1_val >> 12 ) == 0x80000000004) and ((rs2_val & 0xFFF) == 0x0D6)): 0                  # checks the PTE permission and level1 at which PTE is stored 

# *----------------------------------------------------------------------------------------------------------------------
# *----------------------------------------------------------------------------------------------------------------------

invalid_PTE12: 

  config:

  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True;

  mnemonics:

    csrrw       : 0                                                                             # Sets the expected encoding value for the "csrrw" mnemonic.
    csrrs       : 0                                                                             # Sets the expected encoding value for the "csrrs" mnemonic.
    sd          : 0                                                                             # Sets the expected encoding value for the "sd" mnemonic.
    csrrc       : 0                                                                             # Sets the expected encoding value for the "csrrc" mnemonic.

  csr_comb:

    (satp >> 60 == 0x8) and (rs1 == 'x31') and (rd == 'x0'): 0                                  # Check if the top 4 bits of the "satp" register indicate sv39 mode.
    (mstatus & 0x1800)  == 0x0000 and ( rs1 == 'x9' ) and (rd == 'x0') : 0                      # Ensure the "MPP" bits in "mstatus" are set to "U" mode.

  val_comb:

    (rs2_val == 0xC): 0                                                                        # checks if the rs2 matches the " Instruction page fault"
    (((rs1_val >> 12 ) == 0x80000000006) and ((rs2_val & 0xFFF) == 0x0D6)) if rs2_val is not None else None: 0               
                                                                                                # checks the PTE permission and level2 at which PTE is stored 

# *----------------------------------------------------------------------------------------------------------------------
# *----------------------------------------------------------------------------------------------------------------------

access_bit01:

  config:

  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True;

  mnemonics:

    csrrw       : 0                                                                             # Sets the expected encoding value for the "csrrw" mnemonic.
    csrrs       : 0                                                                             # Sets the expected encoding value for the "csrrs" mnemonic.
    sd          : 0                                                                             # Sets the expected encoding value for the "sd" mnemonic.

  csr_comb:

    (satp >> 60 == 0x8) and (rs1 == 'x31') and (rd == 'x0'): 0                                  # Check if the top 4 bits of the "satp" register indicate sv39 mode.
    (mstatus & 0x1800)  == 0x0800 and ( rs1 == 'x9' ) and (rd == 'x0') : 0                      # Ensure the "MPP" bits in "mstatus" are set to "S" mode.

  val_comb:

    (rs2_val == 0xF): 0                                                                         # check if the rs2 matches the "store/AMO page fault
    (rs2_val == 0xD): 0                                                                         # check if the rs2 matches the "load page fault
    (((rs1_val >> 12 ) == 0x80000000005) and ((rs2_val & 0xFFF) == 0x087)): 0                   # checks the PTE permission and level0 at which PTE is stored 

# *----------------------------------------------------------------------------------------------------------------------
# *----------------------------------------------------------------------------------------------------------------------

access_bit02:

  config:

  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True;

  mnemonics:

    csrrw       : 0                                                                             # Sets the expected encoding value for the "csrrw" mnemonic.
    csrrs       : 0                                                                             # Sets the expected encoding value for the "csrrs" mnemonic.
    sd          : 0                                                                             # Sets the expected encoding value for the "sd" mnemonic.

  csr_comb:

    (satp >> 60 == 0x8) and (rs1 == 'x31') and (rd == 'x0'): 0                                  # Check if the top 4 bits of the "satp" register indicate sv39 mode.
    (mstatus & 0x1800)  == 0x0800 and ( rs1 == 'x9' ) and (rd == 'x0') : 0                      # Ensure the "MPP" bits in "mstatus" are set to "S" mode.

  val_comb:

    (rs2_val == 0xF): 0                                                                         # check if the rs2 matches the "store/AMO page fault
    (rs2_val == 0xD): 0                                                                         # check if the rs2 matches the "load page fault
    (((rs1_val >> 12 ) == 0x80000000004) and ((rs2_val & 0xFFF) == 0x087)): 0                   # checks the PTE permission and level1 at which PTE is stored 

# *----------------------------------------------------------------------------------------------------------------------
# *----------------------------------------------------------------------------------------------------------------------

access_bit03:

  config:

  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True;

  mnemonics:

    csrrw       : 0                                                                             # Sets the expected encoding value for the "csrrw" mnemonic.
    csrrs       : 0                                                                             # Sets the expected encoding value for the "csrrs" mnemonic.
    sd          : 0                                                                             # Sets the expected encoding value for the "sd" mnemonic.

  csr_comb:

    (satp >> 60 == 0x8) and (rs1 == 'x31') and (rd == 'x0'): 0                                  # Check if the top 4 bits of the "satp" register indicate sv39 mode.
    (mstatus & 0x1800)  == 0x0800 and ( rs1 == 'x9' ) and (rd == 'x0') : 0                      # Ensure the "MPP" bits in "mstatus" are set to "S" mode.

  val_comb:

    (rs2_val == 0xF): 0                                                                         # check if the rs2 matches the "store/AMO page fault
    (rs2_val == 0xD): 0                                                                         # check if the rs2 matches the "load page fault
    (((rs1_val >> 12 ) == 0x80000000006) and ((rs2_val & 0xFFF) == 0x087)) if rs2_val is not None else None: 0               
                                                                                                # checks the PTE permission and level2 at which PTE is stored 

# *----------------------------------------------------------------------------------------------------------------------
# *----------------------------------------------------------------------------------------------------------------------

access_bit04:

  config:

  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True;

  mnemonics:

    csrrw       : 0                                                                             # Sets the expected encoding value for the "csrrw" mnemonic.
    csrrs       : 0                                                                             # Sets the expected encoding value for the "csrrs" mnemonic.
    sd          : 0                                                                             # Sets the expected encoding value for the "sd" mnemonic.
    csrrc       : 0                                                                             # Sets the expected encoding value for the "csrrc" mnemonic.

  csr_comb:

    (satp >> 60 == 0x8) and (rs1 == 'x31') and (rd == 'x0'): 0                                  # Check if the top 4 bits of the "satp" register indicate sv39 mode.
    (mstatus & 0x1800)  == 0x0000 and ( rs1 == 'x9' ) and (rd == 'x0') : 0                      # Ensure the "MPP" bits in "mstatus" are set to "U" mode.

  val_comb:

    (rs2_val == 0xF): 0                                                                         # check if the rs2 matches the "store/AMO page fault
    (rs2_val == 0xD): 0                                                                         # check if the rs2 matches the "load page fault
    (((rs1_val >> 12 ) == 0x80000000005) and ((rs2_val & 0xFFF) == 0x097)): 0                   # checks the PTE permission and level0 at which PTE is stored 

# *----------------------------------------------------------------------------------------------------------------------
# *----------------------------------------------------------------------------------------------------------------------

access_bit05:

  config:

  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True;

  mnemonics:

    csrrw       : 0                                                                             # Sets the expected encoding value for the "csrrw" mnemonic.
    csrrs       : 0                                                                             # Sets the expected encoding value for the "csrrs" mnemonic.
    sd          : 0                                                                             # Sets the expected encoding value for the "sd" mnemonic.
    csrrc       : 0                                                                             # Sets the expected encoding value for the "csrrc" mnemonic.

  csr_comb:

    (satp >> 60 == 0x8) and (rs1 == 'x31') and (rd == 'x0'): 0                                  # Check if the top 4 bits of the "satp" register indicate sv39 mode.
    (mstatus & 0x1800)  == 0x0000 and ( rs1 == 'x9' ) and (rd == 'x0') : 0                      # Ensure the "MPP" bits in "mstatus" are set to "U" mode.

  val_comb:

    (rs2_val == 0xF): 0                                                                         # check if the rs2 matches the "store/AMO page fault
    (rs2_val == 0xD): 0                                                                         # check if the rs2 matches the "load page fault
    (((rs1_val >> 12 ) == 0x80000000004) and ((rs2_val & 0xFFF) == 0x097)): 0                   # checks the PTE permission and level1 at which PTE is stored 

# *----------------------------------------------------------------------------------------------------------------------
# *----------------------------------------------------------------------------------------------------------------------

access_bit06:

  config:

  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True;

  mnemonics:

    csrrw       : 0                                                                             # Sets the expected encoding value for the "csrrw" mnemonic.
    csrrs       : 0                                                                             # Sets the expected encoding value for the "csrrs" mnemonic.
    sd          : 0                                                                             # Sets the expected encoding value for the "sd" mnemonic.
    csrrc       : 0                                                                             # Sets the expected encoding value for the "csrrc" mnemonic.

  csr_comb:

    (satp >> 60 == 0x8) and (rs1 == 'x31') and (rd == 'x0'): 0                                  # Check if the top 4 bits of the "satp" register indicate sv39 mode.
    (mstatus & 0x1800)  == 0x0000 and ( rs1 == 'x9' ) and (rd == 'x0') : 0                      # Ensure the "MPP" bits in "mstatus" are set to "U" mode.

  val_comb:

    (rs2_val == 0xF): 0                                                                         # check if the rs2 matches the "store/AMO page fault
    (rs2_val == 0xD): 0                                                                         # check if the rs2 matches the "load page fault
    (((rs1_val >> 12 ) == 0x80000000006) and ((rs2_val & 0xFFF) == 0x097)) if rs2_val is not None else None: 0               
                                                                                                # checks the PTE permission and level2 at which PTE is stored 

# *----------------------------------------------------------------------------------------------------------------------
# *----------------------------------------------------------------------------------------------------------------------

access_bit07:

  config:

  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True;

  mnemonics:

    csrrw       : 0                                                                             # Sets the expected encoding value for the "csrrw" mnemonic.
    csrrs       : 0                                                                             # Sets the expected encoding value for the "csrrs" mnemonic.
    sd          : 0                                                                             # Sets the expected encoding value for the "sd" mnemonic.

  csr_comb:

    (satp >> 60 == 0x8) and (rs1 == 'x31') and (rd == 'x0'): 0                                  # Check if the top 4 bits of the "satp" register indicate sv39 mode.
    (mstatus & 0x1800)  == 0x0800 and ( rs1 == 'x9' ) and (rd == 'x0') : 0                      # Ensure the "MPP" bits in "mstatus" are set to "S" mode.

  val_comb:

    (rs2_val == 0xC): 0                                                                         # checks if the rs2 matches the " Instruction page fault"
    (((rs1_val >> 12 ) == 0x80000000005) and ((rs2_val & 0xFFF) == 0x089)): 0                   # checks the PTE permission and level0 at which PTE is stored 

# *----------------------------------------------------------------------------------------------------------------------
# *----------------------------------------------------------------------------------------------------------------------

access_bit08:

  config:

  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True;

  mnemonics:

    csrrw       : 0                                                                             # Sets the expected encoding value for the "csrrw" mnemonic.
    csrrs       : 0                                                                             # Sets the expected encoding value for the "csrrs" mnemonic.
    sd          : 0                                                                             # Sets the expected encoding value for the "sd" mnemonic.

  csr_comb:

    (satp >> 60 == 0x8) and (rs1 == 'x31') and (rd == 'x0'): 0                                  # Check if the top 4 bits of the "satp" register indicate sv39 mode.
    (mstatus & 0x1800)  == 0x0800 and ( rs1 == 'x9' ) and (rd == 'x0') : 0                      # Ensure the "MPP" bits in "mstatus" are set to "S" mode.

  val_comb:

    (rs2_val == 0xC): 0                                                                         # checks if the rs2 matches the " Instruction page fault"
    (((rs1_val >> 12 ) == 0x80000000004) and ((rs2_val & 0xFFF) == 0x089)): 0                   # checks the PTE permission and level1 at which PTE is stored 

# *----------------------------------------------------------------------------------------------------------------------
# *----------------------------------------------------------------------------------------------------------------------

access_bit09:

  config:

  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True;

  mnemonics:

    csrrw       : 0                                                                             # Sets the expected encoding value for the "csrrw" mnemonic.
    csrrs       : 0                                                                             # Sets the expected encoding value for the "csrrs" mnemonic.
    sd          : 0                                                                             # Sets the expected encoding value for the "sd" mnemonic.

  csr_comb:

    (satp >> 60 == 0x8) and (rs1 == 'x31') and (rd == 'x0'): 0                                  # Check if the top 4 bits of the "satp" register indicate sv39 mode.
    (mstatus & 0x1800)  == 0x0800 and ( rs1 == 'x9' ) and (rd == 'x0') : 0                      # Ensure the "MPP" bits in "mstatus" are set to "S" mode.

  val_comb:

    (rs2_val == 0xC): 0                                                                         # checks if the rs2 matches the " Instruction page fault"
    (((rs1_val >> 12 ) == 0x80000000006) and ((rs2_val & 0xFFF) == 0x089)) if rs2_val is not None else None: 0               
                                                                                                # checks the PTE permission and level2 at which PTE is stored 


# *----------------------------------------------------------------------------------------------------------------------
# *----------------------------------------------------------------------------------------------------------------------

access_bit10:

  config:

  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True;

  mnemonics:

    csrrw       : 0                                                                             # Sets the expected encoding value for the "csrrw" mnemonic.
    csrrs       : 0                                                                             # Sets the expected encoding value for the "csrrs" mnemonic.
    sd          : 0                                                                             # Sets the expected encoding value for the "sd" mnemonic.
    csrrc       : 0                                                                             # Sets the expected encoding value for the "csrrc" mnemonic.

  csr_comb:

    (satp >> 60 == 0x8) and (rs1 == 'x31') and (rd == 'x0'): 0                                  # Check if the top 4 bits of the "satp" register indicate sv39 mode.
    (mstatus & 0x1800)  == 0x0000 and ( rs1 == 'x9' ) and (rd == 'x0') : 0                      # Ensure the "MPP" bits in "mstatus" are set to "U" mode.

  val_comb:

    (rs2_val == 0xC): 0                                                                         # checks if the rs2 matches the " Instruction page fault"
    (((rs1_val >> 12 ) == 0x80000000005) and ((rs2_val & 0xFFF) == 0x099)): 0                   # checks the PTE permission and level0 at which PTE is stored 

# *----------------------------------------------------------------------------------------------------------------------
# *----------------------------------------------------------------------------------------------------------------------

access_bit11:

  config:

  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True;

  mnemonics:

    csrrw       : 0                                                                             # Sets the expected encoding value for the "csrrw" mnemonic.
    csrrs       : 0                                                                             # Sets the expected encoding value for the "csrrs" mnemonic.
    sd          : 0                                                                             # Sets the expected encoding value for the "sd" mnemonic.
    csrrc       : 0                                                                             # Sets the expected encoding value for the "csrrc" mnemonic.

  csr_comb:

    (satp >> 60 == 0x8) and (rs1 == 'x31') and (rd == 'x0'): 0                                  # Check if the top 4 bits of the "satp" register indicate sv39 mode.
    (mstatus & 0x1800)  == 0x0000 and ( rs1 == 'x9' ) and (rd == 'x0') : 0                      # Ensure the "MPP" bits in "mstatus" are set to "U" mode.

  val_comb:

    (rs2_val == 0xC): 0                                                                         # checks if the rs2 matches the " Instruction page fault"
    (((rs1_val >> 12 ) == 0x80000000004) and ((rs2_val & 0xFFF) == 0x099)): 0                   # checks the PTE permission and level1 at which PTE is stored 

# *----------------------------------------------------------------------------------------------------------------------
# *----------------------------------------------------------------------------------------------------------------------

access_bit12:

  config:

  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True;

  mnemonics:

    csrrw       : 0                                                                             # Sets the expected encoding value for the "csrrw" mnemonic.
    csrrs       : 0                                                                             # Sets the expected encoding value for the "csrrs" mnemonic.
    sd          : 0                                                                             # Sets the expected encoding value for the "sd" mnemonic.
    csrrc       : 0                                                                             # Sets the expected encoding value for the "csrrc" mnemonic.

  csr_comb:

    (satp >> 60 == 0x8) and (rs1 == 'x31') and (rd == 'x0'): 0                                  # Check if the top 4 bits of the "satp" register indicate sv39 mode.
    (mstatus & 0x1800)  == 0x0000 and ( rs1 == 'x9' ) and (rd == 'x0') : 0                      # Ensure the "MPP" bits in "mstatus" are set to "U" mode.

  val_comb:

    (rs2_val == 0xC): 0                                                                         # checks if the rs2 matches the " Instruction page fault"
    (((rs1_val >> 12 ) == 0x80000000006) and ((rs2_val & 0xFFF) == 0x099)) if rs2_val is not None else None: 0               
                                                                                                # checks the PTE permission and level2 at which PTE is stored 

# *----------------------------------------------------------------------------------------------------------------------
# *----------------------------------------------------------------------------------------------------------------------

dirty_bit01:

  config:

  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True;

  mnemonics:

    csrrw       : 0                                                                             # Sets the expected encoding value for the "csrrw" mnemonic.
    csrrs       : 0                                                                             # Sets the expected encoding value for the "csrrs" mnemonic.
    sd          : 0                                                                             # Sets the expected encoding value for the "sd" mnemonic.

  csr_comb:

    (satp >> 60 == 0x8) and (rs1 == 'x31') and (rd == 'x0'): 0                                  # Check if the top 4 bits of the "satp" register indicate sv39 mode.
    (mstatus & 0x1800)  == 0x0800 and ( rs1 == 'x9' ) and (rd == 'x0') : 0                      # Ensure the "MPP" bits in "mstatus" are set to "S" mode.

  val_comb:

    (rs2_val == 0xF): 0                                                                         # check if the rs2 matches the "store/AMO page fault
    (((rs1_val >> 12 ) == 0x80000000005) and ((rs2_val & 0xFFF) == 0x047)): 0                   # checks the PTE permission and level0 at which PTE is stored 

# *----------------------------------------------------------------------------------------------------------------------
# *----------------------------------------------------------------------------------------------------------------------

dirty_bit02:

  config:

  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True;

  mnemonics:

    csrrw       : 0                                                                             # Sets the expected encoding value for the "csrrw" mnemonic.
    csrrs       : 0                                                                             # Sets the expected encoding value for the "csrrs" mnemonic.
    sd          : 0                                                                             # Sets the expected encoding value for the "sd" mnemonic.

  csr_comb:

    (satp >> 60 == 0x8) and (rs1 == 'x31') and (rd == 'x0'): 0                                  # Check if the top 4 bits of the "satp" register indicate sv39 mode.
    (mstatus & 0x1800)  == 0x0800 and ( rs1 == 'x9' ) and (rd == 'x0') : 0                      # Ensure the "MPP" bits in "mstatus" are set to "S" mode.

  val_comb:

    (rs2_val == 0xF): 0                                                                         # check if the rs2 matches the "store/AMO page fault
    (((rs1_val >> 12 ) == 0x80000000004) and ((rs2_val & 0xFFF) == 0x047)): 0                   # checks the PTE permission and level1 at which PTE is stored 

# *----------------------------------------------------------------------------------------------------------------------
# *----------------------------------------------------------------------------------------------------------------------

dirty_bit03:

  config:

  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True;

  mnemonics:

    csrrw       : 0                                                                             # Sets the expected encoding value for the "csrrw" mnemonic.
    csrrs       : 0                                                                             # Sets the expected encoding value for the "csrrs" mnemonic.
    sd          : 0                                                                             # Sets the expected encoding value for the "sd" mnemonic.

  csr_comb:

    (satp >> 60 == 0x8) and (rs1 == 'x31') and (rd == 'x0'): 0                                  # Check if the top 4 bits of the "satp" register indicate sv39 mode.
    (mstatus & 0x1800)  == 0x0800 and ( rs1 == 'x9' ) and (rd == 'x0') : 0                      # Ensure the "MPP" bits in "mstatus" are set to "S" mode.

  val_comb:

    (rs2_val == 0xF): 0                                                                         # check if the rs2 matches the "store/AMO page fault
    (((rs1_val >> 12 ) == 0x80000000006) and ((rs2_val & 0xFFF) == 0x047)) if rs2_val is not None else None: 0               
                                                                                                # checks the PTE permission and level2 at which PTE is stored 

# *----------------------------------------------------------------------------------------------------------------------
# *----------------------------------------------------------------------------------------------------------------------

dirty_bit04:

  config:

  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True;

  mnemonics:

    csrrw       : 0                                                                             # Sets the expected encoding value for the "csrrw" mnemonic.
    csrrs       : 0                                                                             # Sets the expected encoding value for the "csrrs" mnemonic.
    sd          : 0                                                                             # Sets the expected encoding value for the "sd" mnemonic.
    csrrc       : 0                                                                             # Sets the expected encoding value for the "csrrc" mnemonic.

  csr_comb:

    (satp >> 60 == 0x8) and (rs1 == 'x31') and (rd == 'x0'): 0                                  # Check if the top 4 bits of the "satp" register indicate sv39 mode.
    (mstatus & 0x1800)  == 0x0000 and ( rs1 == 'x9' ) and (rd == 'x0') : 0                      # Ensure the "MPP" bits in "mstatus" are set to "U" mode.

  val_comb:

    (rs2_val == 0xF): 0                                                                         # check if the rs2 matches the "store/AMO page fault
    (((rs1_val >> 12 ) == 0x80000000005) and ((rs2_val & 0xFFF) == 0x057)): 0                   # checks the PTE permission and level0 at which PTE is stored 

# *----------------------------------------------------------------------------------------------------------------------
# *----------------------------------------------------------------------------------------------------------------------

dirty_bit05:

  config:

  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True;

  mnemonics:

    csrrw       : 0                                                                             # Sets the expected encoding value for the "csrrw" mnemonic.
    csrrs       : 0                                                                             # Sets the expected encoding value for the "csrrs" mnemonic.
    sd          : 0                                                                             # Sets the expected encoding value for the "sd" mnemonic.
    csrrc       : 0                                                                             # Sets the expected encoding value for the "csrrc" mnemonic.

  csr_comb:

    (satp >> 60 == 0x8) and (rs1 == 'x31') and (rd == 'x0'): 0                                  # Check if the top 4 bits of the "satp" register indicate sv39 mode.
    (mstatus & 0x1800)  == 0x0000 and ( rs1 == 'x9' ) and (rd == 'x0') : 0                      # Ensure the "MPP" bits in "mstatus" are set to "U" mode.

  val_comb:

    (rs2_val == 0xF): 0                                                                         # check if the rs2 matches the "store/AMO page fault
    (((rs1_val >> 12 ) == 0x80000000004) and ((rs2_val & 0xFFF) == 0x057)): 0                   # checks the PTE permission and level1 at which PTE is stored 

# *----------------------------------------------------------------------------------------------------------------------
# *----------------------------------------------------------------------------------------------------------------------

dirty_bit06:

  config:

  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True;

  mnemonics:

    csrrw       : 0                                                                             # Sets the expected encoding value for the "csrrw" mnemonic.
    csrrs       : 0                                                                             # Sets the expected encoding value for the "csrrs" mnemonic.
    sd          : 0                                                                             # Sets the expected encoding value for the "sd" mnemonic.
    csrrc       : 0                                                                             # Sets the expected encoding value for the "csrrc" mnemonic.

  csr_comb:

    (satp >> 60 == 0x8) and (rs1 == 'x31') and (rd == 'x0'): 0                                  # Check if the top 4 bits of the "satp" register indicate sv39 mode.
    (mstatus & 0x1800)  == 0x0000 and ( rs1 == 'x9' ) and (rd == 'x0') : 0                      # Ensure the "MPP" bits in "mstatus" are set to "U" mode.

  val_comb:

    (rs2_val == 0xF): 0                                                                         # check if the rs2 matches the "store/AMO page fault
    (((rs1_val >> 12 ) == 0x80000000006) and ((rs2_val & 0xFFF) == 0x057)) if rs2_val is not None else None: 0               
                                                                                                # checks the PTE permission and level2 at which PTE is stored 

# *----------------------------------------------------------------------------------------------------------------------
# *----------------------------------------------------------------------------------------------------------------------

misaligned_superpage01:

  config:

  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True;

  mnemonics:

    csrrw       : 0                                                                             # Sets the expected encoding value for the "csrrw" mnemonic.
    csrrs       : 0                                                                             # Sets the expected encoding value for the "csrrs" mnemonic.
    sd          : 0                                                                             # Sets the expected encoding value for the "sd" mnemonic.

  csr_comb:

    (satp >> 60 == 0x8) and (rs1 == 'x31') and (rd == 'x0'): 0                                  # Check if the top 4 bits of the "satp" register indicate sv39 mode.
    (mstatus & 0x1800)  == 0x0800 and ( rs1 == 'x9' ) and (rd == 'x0') : 0                      # Ensure the "MPP" bits in "mstatus" are set to "S" mode.

  val_comb:

    (rs2_val == 0xF): 0                                                                         # check if the rs2 matches the "store/AMO page fault
    (rs2_val == 0xD): 0                                                                         # check if the rs2 matches the "load page fault
    (((rs1_val >> 12 ) == 0x80000000005) and ((rs2_val & 0x0FF) == 0x0C7) and (((rs2_val &  0x7FC00) != 0x0))): 0 
                                                                                                # checks the PTE permission,level1 and that ppn0!=0 (misaligned) at which PTE is stored 

# *----------------------------------------------------------------------------------------------------------------------
# *----------------------------------------------------------------------------------------------------------------------

misaligned_superpage02:

  config:

  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True;

  mnemonics:

    csrrw       : 0                                                                             # Sets the expected encoding value for the "csrrw" mnemonic.
    csrrs       : 0                                                                             # Sets the expected encoding value for the "csrrs" mnemonic.
    sd          : 0                                                                             # Sets the expected encoding value for the "sd" mnemonic.

  csr_comb:

    (satp >> 60 == 0x8) and (rs1 == 'x31') and (rd == 'x0'): 0                                  # Check if the top 4 bits of the "satp" register indicate sv39 mode.
    (mstatus & 0x1800)  == 0x0800 and ( rs1 == 'x9' ) and (rd == 'x0') : 0                      # Ensure the "MPP" bits in "mstatus" are set to "S" mode.

  val_comb:

    (rs2_val == 0xF): 0                                                                         # check if the rs2 matches the "store/AMO page fault
    (rs2_val == 0xD): 0                                                                         # check if the rs2 matches the "load page fault
    (((rs1_val >> 12 ) == 0x80000000007) and ((rs2_val & 0xFFF) == 0x4C7) and (((rs2_val &  0xFFFFC00) != 0x0))) if rs2_val is not None else None: 0               
                                                                                                # checks the PTE permission and level2 at which PTE is stored 

# *----------------------------------------------------------------------------------------------------------------------
# *----------------------------------------------------------------------------------------------------------------------

misaligned_superpage03:

  config:

  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True;

  mnemonics:

    csrrw       : 0                                                                             # Sets the expected encoding value for the "csrrw" mnemonic.
    csrrs       : 0                                                                             # Sets the expected encoding value for the "csrrs" mnemonic.
    sd          : 0                                                                             # Sets the expected encoding value for the "sd" mnemonic.
    csrrc       : 0                                                                             # Sets the expected encoding value for the "csrrc" mnemonic.

  csr_comb:

    (satp >> 60 == 0x8) and (rs1 == 'x31') and (rd == 'x0'): 0                                  # Check if the top 4 bits of the "satp" register indicate sv39 mode.
    (mstatus & 0x1800)  == 0x0000 and ( rs1 == 'x9' ) and (rd == 'x0') : 0                      # Ensure the "MPP" bits in "mstatus" are set to "U" mode.

  val_comb:

    (rs2_val == 0xF): 0                                                                         # check if the rs2 matches the "store/AMO page fault
    (rs2_val == 0xD): 0                                                                         # check if the rs2 matches the "load page fault
    (((rs1_val >> 12 ) == 0x80000000005) and ((rs2_val & 0x0FF) == 0x0D7) and (((rs2_val &  0x7FC00) != 0x0))): 0 
                                                                                                # checks the PTE permission,level1 and that ppn0!=0 (misaligned) at which PTE is stored 

# *----------------------------------------------------------------------------------------------------------------------
# *----------------------------------------------------------------------------------------------------------------------

misaligned_superpage04:

  config:

  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True;

  mnemonics:

    csrrw       : 0                                                                             # Sets the expected encoding value for the "csrrw" mnemonic.
    csrrs       : 0                                                                             # Sets the expected encoding value for the "csrrs" mnemonic.
    sd          : 0                                                                             # Sets the expected encoding value for the "sd" mnemonic.
    csrrc       : 0                                                                             # Sets the expected encoding value for the "csrrc" mnemonic.

  csr_comb:

    (satp >> 60 == 0x8) and (rs1 == 'x31') and (rd == 'x0'): 0                                  # Check if the top 4 bits of the "satp" register indicate sv39 mode.
    (mstatus & 0x1800)  == 0x0000 and ( rs1 == 'x9' ) and (rd == 'x0') : 0                      # Ensure the "MPP" bits in "mstatus" are set to "U" mode.

  val_comb:

    (rs2_val == 0xF): 0                                                                         # check if the rs2 matches the "store/AMO page fault
    (rs2_val == 0xD): 0                                                                         # check if the rs2 matches the "load page fault
    (((rs1_val >> 12 ) == 0x80000000007) and ((rs2_val & 0xFFF) == 0x4D7) and (((rs2_val &  0xFFFFC00) != 0x0))) if rs2_val is not None else None: 0               
                                                                                                # checks the PTE permission and level2 at which PTE is stored 

# *----------------------------------------------------------------------------------------------------------------------
# *----------------------------------------------------------------------------------------------------------------------

misaligned_superpage05:

  config:

  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True;

  mnemonics:

    csrrw       : 0                                                                             # Sets the expected encoding value for the "csrrw" mnemonic.
    csrrs       : 0                                                                             # Sets the expected encoding value for the "csrrs" mnemonic.
    sd          : 0                                                                             # Sets the expected encoding value for the "sd" mnemonic.

  csr_comb:

    (satp >> 60 == 0x8) and (rs1 == 'x31') and (rd == 'x0'): 0                                  # Check if the top 4 bits of the "satp" register indicate sv39 mode.
    (mstatus & 0x1800)  == 0x0800 and ( rs1 == 'x9' ) and (rd == 'x0') : 0                      # Ensure the "MPP" bits in "mstatus" are set to "S" mode.

  val_comb:

    (rs2_val == 0xC): 0                                                                         # checks if the rs2 matches the " Instruction page fault"
    (((rs1_val >> 12 ) == 0x80000000005) and ((rs2_val & 0x0FF) == 0x0C9) and (((rs2_val &  0x7FC00) != 0x0))): 0 
                                                                                                # checks the PTE permission,level1 and that ppn0!=0 (misaligned) at which PTE is stored 

# *----------------------------------------------------------------------------------------------------------------------
# *----------------------------------------------------------------------------------------------------------------------

misaligned_superpage06:

  config:

  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True;

  mnemonics:

    csrrw       : 0                                                                             # Sets the expected encoding value for the "csrrw" mnemonic.
    csrrs       : 0                                                                             # Sets the expected encoding value for the "csrrs" mnemonic.
    sd          : 0                                                                             # Sets the expected encoding value for the "sd" mnemonic.

  csr_comb:

    (satp >> 60 == 0x8) and (rs1 == 'x31') and (rd == 'x0'): 0                                  # Check if the top 4 bits of the "satp" register indicate sv39 mode.
    (mstatus & 0x1800)  == 0x0800 and ( rs1 == 'x9' ) and (rd == 'x0') : 0                      # Ensure the "MPP" bits in "mstatus" are set to "S" mode.

  val_comb:

    (rs2_val == 0xC): 0                                                                         # checks if the rs2 matches the " Instruction page fault"
    (((rs1_val >> 12 ) == 0x80000000007) and ((rs2_val & 0xFFF) == 0x4C9) and (((rs2_val &  0xFFFFC00) != 0x0))) if rs2_val is not None else None: 0               
                                                                                                # checks the PTE permission,level1 and that either ppn0!=0 or ppn1!=0 (misaligned) at which PTE is stored 

# *----------------------------------------------------------------------------------------------------------------------
# *----------------------------------------------------------------------------------------------------------------------

misaligned_superpage07:

  config:

  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True;

  mnemonics:

    csrrw       : 0                                                                             # Sets the expected encoding value for the "csrrw" mnemonic.
    csrrs       : 0                                                                             # Sets the expected encoding value for the "csrrs" mnemonic.
    sd          : 0                                                                             # Sets the expected encoding value for the "sd" mnemonic.
    csrrc       : 0                                                                             # Sets the expected encoding value for the "csrrc" mnemonic.

  csr_comb:

    (satp >> 60 == 0x8) and (rs1 == 'x31') and (rd == 'x0'): 0                                  # Check if the top 4 bits of the "satp" register indicate sv39 mode.
    (mstatus & 0x1800)  == 0x0000 and ( rs1 == 'x9' ) and (rd == 'x0') : 0                      # Ensure the "MPP" bits in "mstatus" are set to "U" mode.

  val_comb:

    (rs2_val == 0xC): 0                                                                         # checks if the rs2 matches the " Instruction page fault"
    (((rs1_val >> 12 ) == 0x80000000005) and ((rs2_val & 0x0FF) == 0x0D9) and (((rs2_val &  0x7FC00) != 0x0))): 0 
                                                                                                # checks the PTE permission,level1 and that ppn0!=0 (misaligned) at which PTE is stored 

# *----------------------------------------------------------------------------------------------------------------------
# *----------------------------------------------------------------------------------------------------------------------

misaligned_superpage08:

  config:

  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True;

  mnemonics:

    csrrw       : 0                                                                             # Sets the expected encoding value for the "csrrw" mnemonic.
    csrrs       : 0                                                                             # Sets the expected encoding value for the "csrrs" mnemonic.
    sd          : 0                                                                             # Sets the expected encoding value for the "sd" mnemonic.
    csrrc       : 0                                                                             # Sets the expected encoding value for the "csrrc" mnemonic.

  csr_comb:

    (satp >> 60 == 0x8) and (rs1 == 'x31') and (rd == 'x0'): 0                                  # Check if the top 4 bits of the "satp" register indicate sv39 mode.
    (mstatus & 0x1800)  == 0x0000 and ( rs1 == 'x9' ) and (rd == 'x0') : 0                      # Ensure the "MPP" bits in "mstatus" are set to "U" mode.
    
  val_comb:

    (rs2_val == 0xC): 0                                                                         # checks if the rs2 matches the " Instruction page fault"
    (((rs1_val >> 12 ) == 0x80000000007) and ((rs2_val & 0xFFF) == 0x4D9) and (((rs2_val &  0xFFFFC00) != 0x0))) if rs2_val is not None else None: 0               
                                                                                                # checks the PTE permission,level1 and that either ppn0!=0 or ppn1!=0 (misaligned) at which PTE is stored 

# *----------------------------------------------------------------------------------------------------------------------
# *----------------------------------------------------------------------------------------------------------------------

mxr_set01:

  config:

  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True;

  mnemonics:

    csrrw       : 0                                                                             # Sets the expected encoding value for the "csrrw" mnemonic.
    csrrs       : 0                                                                             # Sets the expected encoding value for the "csrrs" mnemonic.
    sd          : 0                                                                             # Sets the expected encoding value for the "sd" mnemonic.

  csr_comb:

    (satp >> 60 == 0x8) and (rs1 == 'x31') and (rd == 'x0'): 0                                  # Check if the top 4 bits of the "satp" register indicate sv39 mode.
    (mstatus & 0x1800)  == 0x0800 and ( rs1 == 'x9' ) and (rd == 'x0') : 0                      # Ensure the "MPP" bits in "mstatus" are set to "S" mode.
    (mstatus & 0x80000) == 0x80000: 0                                                           # checks the mstatus.MXR == 1  

  val_comb:

    (rs2_val != 0xF): 0                                                                         # check if the rs2 does not match the "store/AMO page fault
    (rs2_val != 0xD): 0                                                                         # check if the rs2 does not match the "load page fault
    (rs2_val != 0xC): 0                                                                         # checks if the rs2 does not match the " Instruction page fault" 
    (((rs1_val >> 12 ) == 0x80000000005) and ((rs2_val & 0xFFF) == 0x0C9)): 0                   # checks the PTE permission and level0 at which PTE is stored 

# *----------------------------------------------------------------------------------------------------------------------
# *----------------------------------------------------------------------------------------------------------------------

mxr_set02:

  config:

  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True;

  mnemonics:

    csrrw       : 0                                                                             # Sets the expected encoding value for the "csrrw" mnemonic.
    csrrs       : 0                                                                             # Sets the expected encoding value for the "csrrs" mnemonic.
    sd          : 0                                                                             # Sets the expected encoding value for the "sd" mnemonic.

  csr_comb:

    (satp >> 60 == 0x8) and (rs1 == 'x31') and (rd == 'x0'): 0                                  # Check if the top 4 bits of the "satp" register indicate sv39 mode.
    (mstatus & 0x1800)  == 0x0800 and ( rs1 == 'x9' ) and (rd == 'x0') : 0                      # Ensure the "MPP" bits in "mstatus" are set to "S" mode.
    (mstatus & 0x80000) == 0x80000: 0                                                           # checks the mstatus.MXR == 1  

  val_comb:

    (rs2_val != 0xF): 0                                                                         # check if the rs2 does not match the "store/AMO page fault
    (rs2_val != 0xD): 0                                                                         # check if the rs2 does not match the "load page fault
    (rs2_val != 0xC): 0                                                                         # checks if the rs2 does not match the " Instruction page fault" 
    (((rs1_val >> 12 ) == 0x80000000004) and ((rs2_val & 0xFFF) == 0x0C9)): 0                   # checks the PTE permission and level1 at which PTE is stored 

# *----------------------------------------------------------------------------------------------------------------------
# *----------------------------------------------------------------------------------------------------------------------

mxr_set03:

  config:

  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True;

  mnemonics:

    csrrw       : 0                                                                             # Sets the expected encoding value for the "csrrw" mnemonic.
    csrrs       : 0                                                                             # Sets the expected encoding value for the "csrrs" mnemonic.
    sd          : 0                                                                             # Sets the expected encoding value for the "sd" mnemonic.

  csr_comb:

    (satp >> 60 == 0x8) and (rs1 == 'x31') and (rd == 'x0'): 0                                  # Check if the top 4 bits of the "satp" register indicate sv39 mode.
    (mstatus & 0x1800)  == 0x0800 and ( rs1 == 'x9' ) and (rd == 'x0') : 0                      # Ensure the "MPP" bits in "mstatus" are set to "S" mode.
    (mstatus & 0x80000) == 0x80000: 0                                                           # checks the mstatus.MXR == 1  

  val_comb:

    (rs2_val != 0xF): 0                                                                         # check if the rs2 does not match the "store/AMO page fault
    (rs2_val != 0xD): 0                                                                         # check if the rs2 does not match the "load page fault
    (rs2_val != 0xC): 0                                                                         # checks if the rs2 does not match the " Instruction page fault"    
    (((rs1_val >> 12 ) == 0x80000000006) and ((rs2_val & 0xFFF) == 0x0C9)) if rs2_val is not None else None: 0 
                                                                                                # checks the PTE permission and level2 at which PTE is stored               

# *----------------------------------------------------------------------------------------------------------------------
# *----------------------------------------------------------------------------------------------------------------------

mxr_set04:

  config:

  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True;

  mnemonics:

    csrrw       : 0                                                                             # Sets the expected encoding value for the "csrrw" mnemonic.
    csrrs       : 0                                                                             # Sets the expected encoding value for the "csrrs" mnemonic.
    sd          : 0                                                                             # Sets the expected encoding value for the "sd" mnemonic.
    csrrc       : 0                                                                             # Sets the expected encoding value for the "csrrc" mnemonic.

  csr_comb:

    (satp >> 60 == 0x8) and (rs1 == 'x31') and (rd == 'x0'): 0                                  # Check if the top 4 bits of the "satp" register indicate sv39 mode.
    (mstatus & 0x1800)  == 0x0000 and ( rs1 == 'x9' ) and (rd == 'x0') : 0                      # Ensure the "MPP" bits in "mstatus" are set to "U" mode.
    (mstatus & 0x80000) == 0x80000: 0                                                           # checks the mstatus.MXR == 1  

  val_comb:

    (rs2_val != 0xF): 0                                                                         # check if the rs2 does not match the "store/AMO page fault
    (rs2_val != 0xD): 0                                                                         # check if the rs2 does not match the "load page fault
    (rs2_val != 0xC): 0                                                                         # checks if the rs2 does not match the " Instruction page fault" 
    (((rs1_val >> 12 ) == 0x80000000005) and ((rs2_val & 0xFFF) == 0x0D9)): 0                   # checks the PTE permission and level0 at which PTE is stored 

# *----------------------------------------------------------------------------------------------------------------------
# *----------------------------------------------------------------------------------------------------------------------

mxr_set05:

  config:

  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True;

  mnemonics:

    csrrw       : 0                                                                             # Sets the expected encoding value for the "csrrw" mnemonic.
    csrrs       : 0                                                                             # Sets the expected encoding value for the "csrrs" mnemonic.
    sd          : 0                                                                             # Sets the expected encoding value for the "sd" mnemonic.
    csrrc       : 0                                                                             # Sets the expected encoding value for the "csrrc" mnemonic.

  csr_comb:

    (satp >> 60 == 0x8) and (rs1 == 'x31') and (rd == 'x0'): 0                                  # Check if the top 4 bits of the "satp" register indicate sv39 mode.
    (mstatus & 0x1800)  == 0x0000 and ( rs1 == 'x9' ) and (rd == 'x0') : 0                      # Ensure the "MPP" bits in "mstatus" are set to "U" mode.
    (mstatus & 0x80000) == 0x80000: 0                                                           # checks the mstatus.MXR == 1  

  val_comb:

    (rs2_val != 0xF): 0                                                                         # check if the rs2 does not match the "store/AMO page fault
    (rs2_val != 0xD): 0                                                                         # check if the rs2 does not match the "load page fault
    (rs2_val != 0xC): 0                                                                         # checks if the rs2 does not match the " Instruction page fault" 
    (((rs1_val >> 12 ) == 0x80000000004) and ((rs2_val & 0xFFF) == 0x0D9)): 0                   # checks the PTE permission and level1 at which PTE is stored 

# *----------------------------------------------------------------------------------------------------------------------
# *----------------------------------------------------------------------------------------------------------------------

mxr_set06:

  config:

  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True;

  mnemonics:

    csrrw       : 0                                                                             # Sets the expected encoding value for the "csrrw" mnemonic.
    csrrs       : 0                                                                             # Sets the expected encoding value for the "csrrs" mnemonic.
    sd          : 0                                                                             # Sets the expected encoding value for the "sd" mnemonic.
    csrrc       : 0                                                                             # Sets the expected encoding value for the "csrrc" mnemonic.

  csr_comb:

    (satp >> 60 == 0x8) and (rs1 == 'x31') and (rd == 'x0'): 0                                  # Check if the top 4 bits of the "satp" register indicate sv39 mode.
    (mstatus & 0x1800)  == 0x0000 and ( rs1 == 'x9' ) and (rd == 'x0') : 0                      # Ensure the "MPP" bits in "mstatus" are set to "U" mode.
    (mstatus & 0x80000) == 0x80000: 0                                                           # checks the mstatus.MXR == 1  
  
  val_comb:

    (rs2_val != 0xF): 0                                                                         # check if the rs2 does not match the "store/AMO page fault
    (rs2_val != 0xD): 0                                                                         # check if the rs2 does not match the "load page fault
    (rs2_val != 0xC): 0                                                                         # checks if the rs2 does not match the " Instruction page fault"    
    (((rs1_val >> 12 ) == 0x80000000006) and ((rs2_val & 0xFFF) == 0x0D9)) if rs2_val is not None else None: 0 
                                                                                                # checks the PTE permission and level2 at which PTE is stored               

# *----------------------------------------------------------------------------------------------------------------------
# *----------------------------------------------------------------------------------------------------------------------

mxr_unset01:

  config:

  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True;

  mnemonics:

    csrrw       : 0                                                                             # Sets the expected encoding value for the "csrrw" mnemonic.
    csrrs       : 0                                                                             # Sets the expected encoding value for the "csrrs" mnemonic.
    csrrc       : 0                                                                             # Sets the expected encoding value for the "csrrc" mnemonic.
    sd          : 0                                                                             # Sets the expected encoding value for the "sd" mnemonic.

  csr_comb:

    (satp >> 60 == 0x8) and (rs1 == 'x31') and (rd == 'x0'): 0                                  # Check if the top 4 bits of the "satp" register indicate sv39 mode.
    (mstatus & 0x1800)  == 0x0800 and ( rs1 == 'x9' ) and (rd == 'x0') : 0                      # Ensure the "MPP" bits in "mstatus" are set to "S" mode.
    (mstatus & 0x80000) == 0x0    : 0                                                           # checks the mstatus.MXR == 0  

  val_comb:

    (rs2_val == 0xD): 0                                                                         # check if the rs2 matches the "load page fault
    (((rs1_val >> 12 ) == 0x80000000005) and ((rs2_val & 0xFFF) == 0x0C9)): 0                   # checks the PTE permission and level0 at which PTE is stored 

# *----------------------------------------------------------------------------------------------------------------------
# *----------------------------------------------------------------------------------------------------------------------

mxr_unset02:

  config:

  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True;

  mnemonics:

    csrrw       : 0                                                                             # Sets the expected encoding value for the "csrrw" mnemonic.
    csrrs       : 0                                                                             # Sets the expected encoding value for the "csrrs" mnemonic.
    csrrc       : 0                                                                             # Sets the expected encoding value for the "csrrc" mnemonic.   
    sd          : 0                                                                             # Sets the expected encoding value for the "sd" mnemonic.

  csr_comb:

    (satp >> 60 == 0x8) and (rs1 == 'x31') and (rd == 'x0'): 0                                  # Check if the top 4 bits of the "satp" register indicate sv39 mode.
    (mstatus & 0x1800)  == 0x0800 and ( rs1 == 'x9' ) and (rd == 'x0') : 0                      # Ensure the "MPP" bits in "mstatus" are set to "S" mode.
    (mstatus & 0x80000) == 0x0    : 0                                                           # checks the mstatus.MXR == 0  

  val_comb:

    (rs2_val == 0xD): 0                                                                         # check if the rs2 matches the "load page fault
    (((rs1_val >> 12 ) == 0x80000000004) and ((rs2_val & 0xFFF) == 0x0C9)): 0                   # checks the PTE permission and level1 at which PTE is stored 

# *----------------------------------------------------------------------------------------------------------------------
# *----------------------------------------------------------------------------------------------------------------------

mxr_unset03:

  config:

  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True;

  mnemonics:

    csrrw       : 0                                                                             # Sets the expected encoding value for the "csrrw" mnemonic.
    csrrs       : 0                                                                             # Sets the expected encoding value for the "csrrs" mnemonic.
    csrrc       : 0                                                                             # Sets the expected encoding value for the "csrrc" mnemonic.
    sd          : 0                                                                             # Sets the expected encoding value for the "sd" mnemonic.

  csr_comb:

    (satp >> 60 == 0x8) and (rs1 == 'x31') and (rd == 'x0'): 0                                  # Check if the top 4 bits of the "satp" register indicate sv39 mode.
    (mstatus & 0x1800)  == 0x0800 and ( rs1 == 'x9' ) and (rd == 'x0') : 0                      # Ensure the "MPP" bits in "mstatus" are set to "S" mode.
    (mstatus & 0x80000) == 0x0    : 0                                                           # checks the mstatus.MXR == 0  
  
  val_comb:

    (rs2_val == 0xD): 0                                                                         # check if the rs2 matches the "load page fault
    (((rs1_val >> 12 ) == 0x80000000006) and ((rs2_val & 0xFFF) == 0x0C9)) if rs2_val is not None else None: 0 
                                                                                                # checks the PTE permission and level2 at which PTE is stored               

# *----------------------------------------------------------------------------------------------------------------------
# *----------------------------------------------------------------------------------------------------------------------

mxr_unset04:

  config:

  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True;

  mnemonics:

    csrrw       : 0                                                                             # Sets the expected encoding value for the "csrrw" mnemonic.
    csrrs       : 0                                                                             # Sets the expected encoding value for the "csrrs" mnemonic.
    csrrc       : 0                                                                             # Sets the expected encoding value for the "csrrc" mnemonic.
    sd          : 0                                                                             # Sets the expected encoding value for the "sd" mnemonic.

  csr_comb:

    (satp >> 60 == 0x8) and (rs1 == 'x31') and (rd == 'x0'): 0                                  # Check if the top 4 bits of the "satp" register indicate sv39 mode.
    (mstatus & 0x1800)  == 0x0000 and ( rs1 == 'x9' ) and (rd == 'x0') : 0                      # Ensure the "MPP" bits in "mstatus" are set to "U" mode.
    (mstatus & 0x80000) == 0x0    : 0                                                           # checks the mstatus.MXR == 0  

  val_comb:

    (rs2_val == 0xD): 0                                                                         # check if the rs2 matches the "load page fault
    (((rs1_val >> 12 ) == 0x80000000005) and ((rs2_val & 0xFFF) == 0x0D9)): 0                   # checks the PTE permission and level0 at which PTE is stored 

# *----------------------------------------------------------------------------------------------------------------------
# *----------------------------------------------------------------------------------------------------------------------

mxr_unset05:

  config:

  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True;

  mnemonics:

    csrrw       : 0                                                                             # Sets the expected encoding value for the "csrrw" mnemonic.
    csrrs       : 0                                                                             # Sets the expected encoding value for the "csrrs" mnemonic.
    csrrc       : 0                                                                             # Sets the expected encoding value for the "csrrc" mnemonic.   
    sd          : 0                                                                             # Sets the expected encoding value for the "sd" mnemonic.

  csr_comb:

    (satp >> 60 == 0x8) and (rs1 == 'x31') and (rd == 'x0'): 0                                  # Check if the top 4 bits of the "satp" register indicate sv39 mode.
    (mstatus & 0x1800)  == 0x0000 and ( rs1 == 'x9' ) and (rd == 'x0') : 0                      # Ensure the "MPP" bits in "mstatus" are set to "U" mode.
    (mstatus & 0x80000) == 0x0    : 0                                                           # checks the mstatus.MXR == 0  

  val_comb:

    (rs2_val == 0xD): 0                                                                         # check if the rs2 matches the "load page fault
    (((rs1_val >> 12 ) == 0x80000000004) and ((rs2_val & 0xFFF) == 0x0D9)): 0                   # checks the PTE permission and level1 at which PTE is stored 

# *----------------------------------------------------------------------------------------------------------------------
# *----------------------------------------------------------------------------------------------------------------------

mxr_unset06:

  config:

  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True;

  mnemonics:

    csrrw       : 0                                                                             # Sets the expected encoding value for the "csrrw" mnemonic.
    csrrs       : 0                                                                             # Sets the expected encoding value for the "csrrs" mnemonic.
    csrrc       : 0                                                                             # Sets the expected encoding value for the "csrrc" mnemonic.
    sd          : 0                                                                             # Sets the expected encoding value for the "sd" mnemonic.

  csr_comb:

    (satp >> 60 == 0x8) and (rs1 == 'x31') and (rd == 'x0'): 0                                  # Check if the top 4 bits of the "satp" register indicate sv39 mode.
    (mstatus & 0x1800)  == 0x0000 and ( rs1 == 'x9' ) and (rd == 'x0') : 0                      # Ensure the "MPP" bits in "mstatus" are set to "U" mode.
    (mstatus & 0x80000) == 0x0    : 0                                                           # checks the mstatus.MXR == 0  
  
  val_comb:

    (rs2_val == 0xD): 0                                                                         # check if the rs2 matches the "load page fault
    (((rs1_val >> 12 ) == 0x80000000006) and ((rs2_val & 0xFFF) == 0x0D9)) if rs2_val is not None else None: 0 
                                                                                                # checks the PTE permission and level2 at which PTE is stored               

# *----------------------------------------------------------------------------------------------------------------------
# *----------------------------------------------------------------------------------------------------------------------

sum_set01:

  config:

  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True;

  mnemonics:

    csrrw       : 0                                                                             # Sets the expected encoding value for the "csrrw" mnemonic.
    csrrs       : 0                                                                             # Sets the expected encoding value for the "csrrs" mnemonic.
    sd          : 0                                                                             # Sets the expected encoding value for the "sd" mnemonic.

  csr_comb:

    (satp >> 60 == 0x8) and (rs1 == 'x31') and (rd == 'x0'): 0                                  # Check if the top 4 bits of the "satp" register indicate sv39 mode.
    (mstatus & 0x1800)  == 0x0800 and ( rs1 == 'x9' ) and (rd == 'x0') : 0                      # Ensure the "MPP" bits in "mstatus" are set to "S" mode.
    (mstatus & 0x40000) == 0x40000: 0                                                           # Checks that mstatus.SUM == 1

  val_comb:

    (rs2_val != 0xF): 0                                                                         # check if the rs2 does not match the "store/AMO page fault
    (rs2_val != 0xD): 0                                                                         # check if the rs2 does not match the "load page fault
    (rs2_val != 0xC): 0                                                                         # checks if the rs2 does not match the " Instruction page fault"     (rs2_val != 0xD): 0                                                                         # check if the rs2 matches the "load page fault
    (((rs1_val >> 12 ) == 0x80000000005) and ((rs2_val & 0xFFF) == 0x0D7)): 0                   # checks the PTE permission and level0 at which PTE is stored 

# *----------------------------------------------------------------------------------------------------------------------
# *----------------------------------------------------------------------------------------------------------------------

sum_set02:

  config:

  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True;

  mnemonics:

    csrrw       : 0                                                                             # Sets the expected encoding value for the "csrrw" mnemonic.
    csrrs       : 0                                                                             # Sets the expected encoding value for the "csrrs" mnemonic.
    sd          : 0                                                                             # Sets the expected encoding value for the "sd" mnemonic.

  csr_comb:

    (satp >> 60 == 0x8) and (rs1 == 'x31') and (rd == 'x0'): 0                                  # Check if the top 4 bits of the "satp" register indicate sv39 mode.
    (mstatus & 0x1800)  == 0x0800 and ( rs1 == 'x9' ) and (rd == 'x0') : 0                      # Ensure the "MPP" bits in "mstatus" are set to "S" mode.
    (mstatus & 0x40000) == 0x40000: 0                                                           # Checks that mstatus.SUM == 1

  val_comb:

    (rs2_val != 0xF): 0                                                                         # check if the rs2 does not match the "store/AMO page fault
    (rs2_val != 0xD): 0                                                                         # check if the rs2 does not match the "load page fault
    (rs2_val != 0xC): 0                                                                         # checks if the rs2 does not match the " Instruction page fault"     (rs2_val == 0xD): 0                                                                         # check if the rs2 matches the "load page fault
    (((rs1_val >> 12 ) == 0x80000000004) and ((rs2_val & 0xFFF) == 0x0D7)): 0                   # checks the PTE permission and level1 at which PTE is stored 

# *----------------------------------------------------------------------------------------------------------------------
# *----------------------------------------------------------------------------------------------------------------------

sum_set03:

  config:

  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True;

  mnemonics:

    csrrw       : 0                                                                             # Sets the expected encoding value for the "csrrw" mnemonic.
    csrrs       : 0                                                                             # Sets the expected encoding value for the "csrrs" mnemonic.
    sd          : 0                                                                             # Sets the expected encoding value for the "sd" mnemonic.

  csr_comb:

    (satp >> 60 == 0x8) and (rs1 == 'x31') and (rd == 'x0'): 0                                  # Check if the top 4 bits of the "satp" register indicate sv39 mode.
    (mstatus & 0x1800)  == 0x0800 and ( rs1 == 'x9' ) and (rd == 'x0') : 0                      # Ensure the "MPP" bits in "mstatus" are set to "S" mode.
    (mstatus & 0x40000) == 0x40000: 0                                                           # Checks that mstatus.SUM == 1

  val_comb:

    (rs2_val != 0xF): 0                                                                         # check if the rs2 does not match the "store/AMO page fault
    (rs2_val != 0xD): 0                                                                         # check if the rs2 does not match the "load page fault
    (rs2_val != 0xC): 0                                                                         # checks if the rs2 does not match the " Instruction page fault" 
    (((rs1_val >> 12 ) == 0x80000000006) and ((rs2_val & 0xFFF) == 0x0D7)) if rs2_val is not None else None: 0 
                                                                                                 # checks the PTE permission and level2 at which PTE is stored 

# *----------------------------------------------------------------------------------------------------------------------
# *----------------------------------------------------------------------------------------------------------------------

sum_set04:

  config:

  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True;

  mnemonics:

    csrrw       : 0                                                                             # Sets the expected encoding value for the "csrrw" mnemonic.
    csrrs       : 0                                                                             # Sets the expected encoding value for the "csrrs" mnemonic.
    sd          : 0                                                                             # Sets the expected encoding value for the "sd" mnemonic.

  csr_comb:

    (satp >> 60 == 0x8) and (rs1 == 'x31') and (rd == 'x0'): 0                                  # Check if the top 4 bits of the "satp" register indicate sv39 mode.
    (mstatus & 0x1800)  == 0x0800 and ( rs1 == 'x9' ) and (rd == 'x0') : 0                      # Ensure the "MPP" bits in "mstatus" are set to "S" mode.
    (mstatus & 0x40000) == 0x40000: 0                                                           # Checks that mstatus.SUM == 1
    
  val_comb:

    (rs2_val == 0xC): 0                                                                         # checks if the rs2 matches the " Instruction page fault"                                                                        # check if the rs2 matches the "load page fault
    (((rs1_val >> 12 ) == 0x80000000005) and ((rs2_val & 0xFFF) == 0x0D7)): 0                   # checks the PTE permission and level0 at which PTE is stored 

# *----------------------------------------------------------------------------------------------------------------------
# *----------------------------------------------------------------------------------------------------------------------

sum_set05:

  config:

  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True;

  mnemonics:

    csrrw       : 0                                                                             # Sets the expected encoding value for the "csrrw" mnemonic.
    csrrs       : 0                                                                             # Sets the expected encoding value for the "csrrs" mnemonic.
    sd          : 0                                                                             # Sets the expected encoding value for the "sd" mnemonic.

  csr_comb:

    (satp >> 60 == 0x8) and (rs1 == 'x31') and (rd == 'x0'): 0                                  # Check if the top 4 bits of the "satp" register indicate sv39 mode.
    (mstatus & 0x1800)  == 0x0800 and ( rs1 == 'x9' ) and (rd == 'x0') : 0                      # Ensure the "MPP" bits in "mstatus" are set to "S" mode.
    (mstatus & 0x40000) == 0x40000: 0                                                           # Checks that mstatus.SUM == 1

  val_comb:

    (rs2_val == 0xC): 0                                                                         # checks if the rs2 matches the " Instruction page fault" 
    (((rs1_val >> 12 ) == 0x80000000004) and ((rs2_val & 0xFFF) == 0x0D7)): 0                   # checks the PTE permission and level1 at which PTE is stored 

# *----------------------------------------------------------------------------------------------------------------------
# *----------------------------------------------------------------------------------------------------------------------

sum_set06:

  config:

  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True;

  mnemonics:

    csrrw       : 0                                                                             # Sets the expected encoding value for the "csrrw" mnemonic.
    csrrs       : 0                                                                             # Sets the expected encoding value for the "csrrs" mnemonic.
    sd          : 0                                                                             # Sets the expected encoding value for the "sd" mnemonic.

  csr_comb:

    (satp >> 60 == 0x8) and (rs1 == 'x31') and (rd == 'x0'): 0                                  # Check if the top 4 bits of the "satp" register indicate sv39 mode.
    (mstatus & 0x1800)  == 0x0800 and ( rs1 == 'x9' ) and (rd == 'x0') : 0                      # Ensure the "MPP" bits in "mstatus" are set to "S" mode.
    (mstatus & 0x40000) == 0x40000: 0                                                           # Checks that mstatus.SUM == 1

  val_comb:

    (rs2_val == 0xC): 0                                                                         # checks if the rs2 matches the " Instruction page fault" 
    (((rs1_val >> 12 ) == 0x80000000006) and ((rs2_val & 0xFFF) == 0x0D7)) if rs2_val is not None else None: 0 
                                                                                                 # checks the PTE permission and level2 at which PTE is stored 
# *----------------------------------------------------------------------------------------------------------------------
# *----------------------------------------------------------------------------------------------------------------------

sum_unset01:

  config:

  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True;

  mnemonics:

    csrrw       : 0                                                                             # Sets the expected encoding value for the "csrrw" mnemonic.
    csrrs       : 0                                                                             # Sets the expected encoding value for the "csrrs" mnemonic.
    sd          : 0                                                                             # Sets the expected encoding value for the "sd" mnemonic.

  csr_comb:

    (satp >> 60 == 0x8) and (rs1 == 'x31') and (rd == 'x0'): 0                                  # Check if the top 4 bits of the "satp" register indicate sv39 mode.
    (mstatus & 0x1800)  == 0x0800 and ( rs1 == 'x9' ) and (rd == 'x0') : 0                      # Ensure the "MPP" bits in "mstatus" are set to "S" mode.
    (mstatus & 0x40000) == 0x0    : 0                                                           # Checks that mstatus.SUM == 0

  val_comb:

    (rs2_val == 0xF): 0                                                                         # check if the rs2 matches the "store/AMO page fault
    (rs2_val == 0xD): 0                                                                         # check if the rs2 matches the "load page fault
    (((rs1_val >> 12 ) == 0x80000000005) and ((rs2_val & 0xFFF) == 0x0D7)): 0                   # checks the PTE permission and level0 at which PTE is stored 

# *----------------------------------------------------------------------------------------------------------------------
# *----------------------------------------------------------------------------------------------------------------------

sum_unset02:

  config:

  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True;

  mnemonics:

    csrrw       : 0                                                                             # Sets the expected encoding value for the "csrrw" mnemonic.
    csrrs       : 0                                                                             # Sets the expected encoding value for the "csrrs" mnemonic.
    sd          : 0                                                                             # Sets the expected encoding value for the "sd" mnemonic.

  csr_comb:

    (satp >> 60 == 0x8) and (rs1 == 'x31') and (rd == 'x0'): 0                                  # Check if the top 4 bits of the "satp" register indicate sv39 mode.
    (mstatus & 0x1800)  == 0x0800 and ( rs1 == 'x9' ) and (rd == 'x0') : 0                      # Ensure the "MPP" bits in "mstatus" are set to "S" mode.
    (mstatus & 0x40000) == 0x0    : 0                                                           # Checks that mstatus.SUM == 0

  val_comb:

    (rs2_val == 0xF): 0                                                                         # check if the rs2 matches the "store/AMO page fault
    (rs2_val == 0xD): 0                                                                         # check if the rs2 matches the "load page fault
    (((rs1_val >> 12 ) == 0x80000000004) and ((rs2_val & 0xFFF) == 0x0D7)): 0                   # checks the PTE permission and level1 at which PTE is stored 

# *----------------------------------------------------------------------------------------------------------------------
# *----------------------------------------------------------------------------------------------------------------------

sum_unset03:

  config:

  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True;

  mnemonics:

    csrrw       : 0                                                                             # Sets the expected encoding value for the "csrrw" mnemonic.
    csrrs       : 0                                                                             # Sets the expected encoding value for the "csrrs" mnemonic.
    sd          : 0                                                                             # Sets the expected encoding value for the "sd" mnemonic.

  csr_comb:

    (satp >> 60 == 0x8) and (rs1 == 'x31') and (rd == 'x0'): 0                                  # Check if the top 4 bits of the "satp" register indicate sv39 mode.
    (mstatus & 0x1800)  == 0x0800 and ( rs1 == 'x9' ) and (rd == 'x0') : 0                      # Ensure the "MPP" bits in "mstatus" are set to "S" mode.
    (mstatus & 0x40000) == 0x0    : 0                                                           # Checks that mstatus.SUM == 0

  val_comb:

    (rs2_val == 0xF): 0                                                                         # check if the rs2 matches the "store/AMO page fault
    (rs2_val == 0xD): 0                                                                         # check if the rs2 matches the "load page fault
    (((rs1_val >> 12 ) == 0x80000000006) and ((rs2_val & 0xFFF) == 0x0D7)) if rs2_val is not None else None: 0 
                                                                                                 # checks the PTE permission and level2 at which PTE is stored 
# *----------------------------------------------------------------------------------------------------------------------
# *----------------------------------------------------------------------------------------------------------------------

sum_unset04:

  config:

  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True;

  mnemonics:

    csrrw       : 0                                                                             # Sets the expected encoding value for the "csrrw" mnemonic.
    csrrs       : 0                                                                             # Sets the expected encoding value for the "csrrs" mnemonic.
    sd          : 0                                                                             # Sets the expected encoding value for the "sd" mnemonic.

  csr_comb:

    (satp >> 60 == 0x8) and (rs1 == 'x31') and (rd == 'x0'): 0                                  # Check if the top 4 bits of the "satp" register indicate sv39 mode.
    (mstatus & 0x1800)  == 0x0800 and ( rs1 == 'x9' ) and (rd == 'x0') : 0                      # Ensure the "MPP" bits in "mstatus" are set to "S" mode.
    (mstatus & 0x40000) == 0x0    : 0                                                           # Checks that mstatus.SUM == 0

  val_comb:

    (rs2_val == 0xC): 0                                                                         # checks if the rs2 matches the " Instruction page fault" 
    (((rs1_val >> 12 ) == 0x80000000005) and ((rs2_val & 0xFFF) == 0x0D7)): 0                   # checks the PTE permission and level0 at which PTE is stored 

# *----------------------------------------------------------------------------------------------------------------------
# *----------------------------------------------------------------------------------------------------------------------

sum_unset05:

  config:

  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True;

  mnemonics:

    csrrw       : 0                                                                             # Sets the expected encoding value for the "csrrw" mnemonic.
    csrrs       : 0                                                                             # Sets the expected encoding value for the "csrrs" mnemonic.
    sd          : 0                                                                             # Sets the expected encoding value for the "sd" mnemonic.

  csr_comb:

    (satp >> 60 == 0x8) and (rs1 == 'x31') and (rd == 'x0'): 0                                  # Check if the top 4 bits of the "satp" register indicate sv39 mode.
    (mstatus & 0x1800)  == 0x0800 and ( rs1 == 'x9' ) and (rd == 'x0') : 0                      # Ensure the "MPP" bits in "mstatus" are set to "S" mode.
    (mstatus & 0x40000) == 0x0    : 0                                                           # Checks that mstatus.SUM == 0

  val_comb:

    (rs2_val == 0xC): 0                                                                         # checks if the rs2 matches the " Instruction page fault" 
    (((rs1_val >> 12 ) == 0x80000000004) and ((rs2_val & 0xFFF) == 0x0D7)): 0                   # checks the PTE permission and level1 at which PTE is stored 

# *----------------------------------------------------------------------------------------------------------------------
# *----------------------------------------------------------------------------------------------------------------------

sum_unset06:

  config:

  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True;

  mnemonics:

    csrrw       : 0                                                                             # Sets the expected encoding value for the "csrrw" mnemonic.
    csrrs       : 0                                                                             # Sets the expected encoding value for the "csrrs" mnemonic.
    sd          : 0                                                                             # Sets the expected encoding value for the "sd" mnemonic.

  csr_comb:

    (satp >> 60 == 0x8) and (rs1 == 'x31') and (rd == 'x0'): 0                                  # Check if the top 4 bits of the "satp" register indicate sv39 mode.
    (mstatus & 0x1800)  == 0x0800 and ( rs1 == 'x9' ) and (rd == 'x0') : 0                      # Ensure the "MPP" bits in "mstatus" are set to "S" mode.
    (mstatus & 0x40000) == 0x0    : 0                                                           # Checks that mstatus.SUM == 0

  val_comb:

    (rs2_val == 0xC): 0                                                                         # checks if the rs2 matches the " Instruction page fault" 
    (((rs1_val >> 12 ) == 0x80000000006) and ((rs2_val & 0xFFF) == 0x0D7)) if rs2_val is not None else None: 0 
                                                                                                 # checks the PTE permission and level2 at which PTE is stored 
# *----------------------------------------------------------------------------------------------------------------------
# *----------------------------------------------------------------------------------------------------------------------

ubit_set01:

  config:

  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True;

  mnemonics:

    csrrw       : 0                                                                             # Sets the expected encoding value for the "csrrw" mnemonic.
    csrrs       : 0                                                                             # Sets the expected encoding value for the "csrrs" mnemonic.
    sd          : 0                                                                             # Sets the expected encoding value for the "sd" mnemonic.
    csrrc       : 0                                                                             # Sets the expected encoding value for the "csrrc" mnemonic.

  csr_comb:

    (satp >> 60 == 0x8) and (rs1 == 'x31') and (rd == 'x0'): 0                                  # Check if the top 4 bits of the "satp" register indicate sv39 mode.
    (mstatus & 0x1800)  == 0x0000 and ( rs1 == 'x9' ) and (rd == 'x0') : 0                      # Ensure the "MPP" bits in "mstatus" are set to "U" mode.

  val_comb:

    (rs2_val == 0xF): 0                                                                         # check if the rs2 matches the "store/AMO page fault
    (rs2_val == 0xD): 0                                                                         # check if the rs2 matches the "load page fault
    (((rs1_val >> 12 ) == 0x80000000005) and ((rs2_val & 0xFFF) == 0x0D1)): 0                   # checks the PTE permission and level0 at which PTE is stored 

# *----------------------------------------------------------------------------------------------------------------------
# *----------------------------------------------------------------------------------------------------------------------

ubit_set02:

  config:

  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True;

  mnemonics:

    csrrw       : 0                                                                             # Sets the expected encoding value for the "csrrw" mnemonic.
    csrrs       : 0                                                                             # Sets the expected encoding value for the "csrrs" mnemonic.
    sd          : 0                                                                             # Sets the expected encoding value for the "sd" mnemonic.
    csrrc       : 0                                                                             # Sets the expected encoding value for the "csrrc" mnemonic.

  csr_comb:

    (satp >> 60 == 0x8) and (rs1 == 'x31') and (rd == 'x0'): 0                                  # Check if the top 4 bits of the "satp" register indicate sv39 mode.
    (mstatus & 0x1800)  == 0x0000 and ( rs1 == 'x9' ) and (rd == 'x0') : 0                      # Ensure the "MPP" bits in "mstatus" are set to "U" mode.

  val_comb:

    (rs2_val != 0xF): 0                                                                         # check if the rs2 does not match the "store/AMO page fault
    (rs2_val != 0xD): 0                                                                         # check if the rs2 does not match the "load page fault
    (((rs1_val >> 12 ) == 0x80000000005) and ((rs2_val & 0xFFF) == 0x0D7)): 0                   # checks the PTE permission and level0 at which PTE is stored 

# *----------------------------------------------------------------------------------------------------------------------
# *----------------------------------------------------------------------------------------------------------------------

ubit_set03:

  config:

  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True;

  mnemonics:

    csrrw       : 0                                                                             # Sets the expected encoding value for the "csrrw" mnemonic.
    csrrs       : 0                                                                             # Sets the expected encoding value for the "csrrs" mnemonic.
    sd          : 0                                                                             # Sets the expected encoding value for the "sd" mnemonic.
    csrrc       : 0                                                                             # Sets the expected encoding value for the "csrrc" mnemonic.

  csr_comb:

    (satp >> 60 == 0x8) and (rs1 == 'x31') and (rd == 'x0'): 0                                  # Check if the top 4 bits of the "satp" register indicate sv39 mode.
    (mstatus & 0x1800)  == 0x0000 and ( rs1 == 'x9' ) and (rd == 'x0') : 0                      # Ensure the "MPP" bits in "mstatus" are set to "U" mode.

  val_comb:

    (rs2_val == 0xF): 0                                                                         # check if the rs2 matches the "store/AMO page fault
    (rs2_val == 0xD): 0                                                                         # check if the rs2 matches the "load page fault
    (((rs1_val >> 12 ) == 0x80000000004) and ((rs2_val & 0xFFF) == 0x0D1)): 0                   # checks the PTE permission and level1 at which PTE is stored 

# *----------------------------------------------------------------------------------------------------------------------
# *----------------------------------------------------------------------------------------------------------------------

ubit_set04:

  config:

  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True;

  mnemonics:

    csrrw       : 0                                                                             # Sets the expected encoding value for the "csrrw" mnemonic.
    csrrs       : 0                                                                             # Sets the expected encoding value for the "csrrs" mnemonic.
    sd          : 0                                                                             # Sets the expected encoding value for the "sd" mnemonic.
    csrrc       : 0                                                                             # Sets the expected encoding value for the "csrrc" mnemonic.

  csr_comb:

    (satp >> 60 == 0x8) and (rs1 == 'x31') and (rd == 'x0'): 0                                  # Check if the top 4 bits of the "satp" register indicate sv39 mode.
    (mstatus & 0x1800)  == 0x0000 and ( rs1 == 'x9' ) and (rd == 'x0') : 0                      # Ensure the "MPP" bits in "mstatus" are set to "U" mode.

  val_comb:

    (rs2_val != 0xF): 0                                                                         # check if the rs2 matches the "store/AMO page fault
    (rs2_val != 0xD): 0                                                                         # check if the rs2 matches the "load page fault
    (((rs1_val >> 12 ) == 0x80000000004) and ((rs2_val & 0xFFF) == 0x0D7)): 0                   # checks the PTE permission and level1 at which PTE is stored 

# *----------------------------------------------------------------------------------------------------------------------
# *----------------------------------------------------------------------------------------------------------------------

ubit_set05:

  config:

  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True;

  mnemonics:

    csrrw       : 0                                                                             # Sets the expected encoding value for the "csrrw" mnemonic.
    csrrs       : 0                                                                             # Sets the expected encoding value for the "csrrs" mnemonic.
    sd          : 0                                                                             # Sets the expected encoding value for the "sd" mnemonic.
    csrrc       : 0                                                                             # Sets the expected encoding value for the "csrrc" mnemonic.

  csr_comb:

    (satp >> 60 == 0x8) and (rs1 == 'x31') and (rd == 'x0'): 0                                  # Check if the top 4 bits of the "satp" register indicate sv39 mode.
    (mstatus & 0x1800)  == 0x0000 and ( rs1 == 'x9' ) and (rd == 'x0') : 0                      # Ensure the "MPP" bits in "mstatus" are set to "U" mode.

  val_comb:

    (rs2_val == 0xF): 0                                                                         # check if the rs2 matches the "store/AMO page fault
    (rs2_val == 0xD): 0                                                                         # check if the rs2 matches the "load page fault
    (((rs1_val >> 12 ) == 0x80000000006) and ((rs2_val & 0xFFF) == 0x0D1)) if rs2_val is not None else None: 0 
                                                                                                 # checks the PTE permission and level2 at which PTE is stored 
# *----------------------------------------------------------------------------------------------------------------------
# *----------------------------------------------------------------------------------------------------------------------

ubit_set06:

  config:

  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True;

  mnemonics:

    csrrw       : 0                                                                             # Sets the expected encoding value for the "csrrw" mnemonic.
    csrrs       : 0                                                                             # Sets the expected encoding value for the "csrrs" mnemonic.
    sd          : 0                                                                             # Sets the expected encoding value for the "sd" mnemonic.
    csrrc       : 0                                                                             # Sets the expected encoding value for the "csrrc" mnemonic.

  csr_comb:

    (satp >> 60 == 0x8) and (rs1 == 'x31') and (rd == 'x0'): 0                                  # Check if the top 4 bits of the "satp" register indicate sv39 mode.
    (mstatus & 0x1800)  == 0x0000 and ( rs1 == 'x9' ) and (rd == 'x0') : 0                      # Ensure the "MPP" bits in "mstatus" are set to "U" mode.

  val_comb:

    (rs2_val != 0xF): 0                                                                         # check if the rs2 matches the "store/AMO page fault
    (rs2_val != 0xD): 0                                                                         # check if the rs2 matches the "load page fault
    (((rs1_val >> 12 ) == 0x80000000006) and ((rs2_val & 0xFFF) == 0x0D7)) if rs2_val is not None else None: 0 
                                                                                                 # checks the PTE permission and level2 at which PTE is stored 

# *----------------------------------------------------------------------------------------------------------------------
# *----------------------------------------------------------------------------------------------------------------------

ubit_unset01:

  config:

  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True;

  mnemonics:

    csrrw       : 0                                                                             # Sets the expected encoding value for the "csrrw" mnemonic.
    csrrs       : 0                                                                             # Sets the expected encoding value for the "csrrs" mnemonic.
    sd          : 0                                                                             # Sets the expected encoding value for the "sd" mnemonic.
    csrrc       : 0                                                                             # Sets the expected encoding value for the "csrrc" mnemonic.

  csr_comb:

    (satp >> 60 == 0x8) and (rs1 == 'x31') and (rd == 'x0'): 0                                  # Check if the top 4 bits of the "satp" register indicate sv39 mode.
    (mstatus & 0x1800)  == 0x0000 and ( rs1 == 'x9' ) and (rd == 'x0') : 0                      # Ensure the "MPP" bits in "mstatus" are set to "U" mode.

  val_comb:

    (rs2_val == 0xF): 0                                                                         # check if the rs2 matches the "store/AMO page fault
    (rs2_val == 0xD): 0                                                                         # check if the rs2 matches the "load page fault
    (((rs1_val >> 12 ) == 0x80000000005) and ((rs2_val & 0xFFF) == 0x0C7)): 0                   # checks the PTE permission and level0 at which PTE is stored 

# *----------------------------------------------------------------------------------------------------------------------
# *----------------------------------------------------------------------------------------------------------------------

ubit_unset02:

  config:

  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True;

  mnemonics:

    csrrw       : 0                                                                             # Sets the expected encoding value for the "csrrw" mnemonic.
    csrrs       : 0                                                                             # Sets the expected encoding value for the "csrrs" mnemonic.
    sd          : 0                                                                             # Sets the expected encoding value for the "sd" mnemonic.
    csrrc       : 0                                                                             # Sets the expected encoding value for the "csrrc" mnemonic.

  csr_comb:

    (satp >> 60 == 0x8) and (rs1 == 'x31') and (rd == 'x0'): 0                                  # Check if the top 4 bits of the "satp" register indicate sv39 mode.
    (mstatus & 0x1800)  == 0x0000 and ( rs1 == 'x9' ) and (rd == 'x0') : 0                      # Ensure the "MPP" bits in "mstatus" are set to "U" mode.

  val_comb:

    (rs2_val == 0xF): 0                                                                         # check if the rs2 matches the "store/AMO page fault
    (rs2_val == 0xD): 0                                                                         # check if the rs2 matches the "load page fault
    (((rs1_val >> 12 ) == 0x80000000004) and ((rs2_val & 0xFFF) == 0x0C7)): 0                   # checks the PTE permission and level1 at which PTE is stored 

# *----------------------------------------------------------------------------------------------------------------------
# *----------------------------------------------------------------------------------------------------------------------

ubit_unset03:

  config:

  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True;

  mnemonics:

    csrrw       : 0                                                                             # Sets the expected encoding value for the "csrrw" mnemonic.
    csrrs       : 0                                                                             # Sets the expected encoding value for the "csrrs" mnemonic.
    sd          : 0                                                                             # Sets the expected encoding value for the "sd" mnemonic.
    csrrc       : 0                                                                             # Sets the expected encoding value for the "csrrc" mnemonic.

  csr_comb:

    (satp >> 60 == 0x8) and (rs1 == 'x31') and (rd == 'x0'): 0                                  # Check if the top 4 bits of the "satp" register indicate sv39 mode.
    (mstatus & 0x1800)  == 0x0000 and ( rs1 == 'x9' ) and (rd == 'x0') : 0                      # Ensure the "MPP" bits in "mstatus" are set to "U" mode.

  val_comb:

    (rs2_val == 0xF): 0                                                                         # check if the rs2 matches the "store/AMO page fault
    (rs2_val == 0xD): 0                                                                         # check if the rs2 matches the "load page fault
    (((rs1_val >> 12 ) == 0x80000000006) and ((rs2_val & 0xFFF) == 0x0C7)) if rs2_val is not None else None: 0 
                                                                                                 # checks the PTE permission and level2 at which PTE is stored 

# *----------------------------------------------------------------------------------------------------------------------
# *----------------------------------------------------------------------------------------------------------------------

ubit_unset04:

  config:

  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True;

  mnemonics:

    csrrw       : 0                                                                             # Sets the expected encoding value for the "csrrw" mnemonic.
    csrrs       : 0                                                                             # Sets the expected encoding value for the "csrrs" mnemonic.
    sd          : 0                                                                             # Sets the expected encoding value for the "sd" mnemonic.
    csrrc       : 0                                                                             # Sets the expected encoding value for the "csrrc" mnemonic.

  csr_comb:

    (satp >> 60 == 0x8) and (rs1 == 'x31') and (rd == 'x0'): 0                                  # Check if the top 4 bits of the "satp" register indicate sv39 mode.
    (mstatus & 0x1800)  == 0x0000 and ( rs1 == 'x9' ) and (rd == 'x0') : 0                      # Ensure the "MPP" bits in "mstatus" are set to "U" mode.

  val_comb:

    (rs2_val == 0xC): 0                                                                         # check if the rs2 matches the "load page fault
    (((rs1_val >> 12 ) == 0x80000000005) and ((rs2_val & 0xFFF) == 0x0C7)): 0                   # checks the PTE permission and level0 at which PTE is stored 

# *----------------------------------------------------------------------------------------------------------------------
# *----------------------------------------------------------------------------------------------------------------------

ubit_unset05:

  config:

  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True;

  mnemonics:

    csrrw       : 0                                                                             # Sets the expected encoding value for the "csrrw" mnemonic.
    csrrs       : 0                                                                             # Sets the expected encoding value for the "csrrs" mnemonic.
    sd          : 0                                                                             # Sets the expected encoding value for the "sd" mnemonic.
    csrrc       : 0                                                                             # Sets the expected encoding value for the "csrrc" mnemonic.

  csr_comb:

    (satp >> 60 == 0x8) and (rs1 == 'x31') and (rd == 'x0'): 0                                  # Check if the top 4 bits of the "satp" register indicate sv39 mode.
    (mstatus & 0x1800)  == 0x0000 and ( rs1 == 'x9' ) and (rd == 'x0') : 0                      # Ensure the "MPP" bits in "mstatus" are set to "U" mode.

  val_comb:

    (rs2_val == 0xC): 0                                                                         # check if the rs2 matches the "load page fault
    (((rs1_val >> 12 ) == 0x80000000004) and ((rs2_val & 0xFFF) == 0x0C7)): 0                   # checks the PTE permission and level1 at which PTE is stored 

# *----------------------------------------------------------------------------------------------------------------------
# *----------------------------------------------------------------------------------------------------------------------

ubit_unset06:

  config:

  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True;

  mnemonics:

    csrrw       : 0                                                                             # Sets the expected encoding value for the "csrrw" mnemonic.
    csrrs       : 0                                                                             # Sets the expected encoding value for the "csrrs" mnemonic.
    sd          : 0                                                                             # Sets the expected encoding value for the "sd" mnemonic.
    csrrc       : 0                                                                             # Sets the expected encoding value for the "csrrc" mnemonic.

  csr_comb:

    (satp >> 60 == 0x8) and (rs1 == 'x31') and (rd == 'x0'): 0                                  # Check if the top 4 bits of the "satp" register indicate sv39 mode.
    (mstatus & 0x1800)  == 0x0000 and ( rs1 == 'x9' ) and (rd == 'x0') : 0                      # Ensure the "MPP" bits in "mstatus" are set to "U" mode.

  val_comb:

    (rs2_val == 0xC): 0                                                                         # check if the rs2 matches the "load page fault
    (((rs1_val >> 12 ) == 0x80000000006) and ((rs2_val & 0xFFF) == 0x0C7)) if rs2_val is not None else None: 0 
                                                                                                 # checks the PTE permission and level2 at which PTE is stored 

# *----------------------------------------------------------------------------------------------------------------------
# *----------------------------------------------------------------------------------------------------------------------

Smode_page_in_Smode01:

  config:

  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True;

  mnemonics:

    csrrw       : 0                                                                             # Sets the expected encoding value for the "csrrw" mnemonic.
    csrrs       : 0                                                                             # Sets the expected encoding value for the "csrrs" mnemonic.
    sd          : 0                                                                             # Sets the expected encoding value for the "sd" mnemonic.

  csr_comb:

    (satp >> 60 == 0x8) and (rs1 == 'x31') and (rd == 'x0'): 0                                  # Check if the top 4 bits of the "satp" register indicate sv39 mode.
    (mstatus & 0x1800)  == 0x0800 and ( rs1 == 'x9' ) and (rd == 'x0') : 0                      # Ensure the "MPP" bits in "mstatus" are set to "S" mode.

  val_comb:

    (rs2_val != 0xF): 0                                                                         # check if the rs2 matches the "store/AMO page fault
    (rs2_val != 0xD): 0                                                                         # check if the rs2 matches the "load page fault
    (((rs1_val >> 12 ) == 0x80000000005) and ((rs2_val & 0xFFF) == 0x0C7)): 0                   # checks the PTE permission and level0 at which PTE is stored 

# *----------------------------------------------------------------------------------------------------------------------
# *----------------------------------------------------------------------------------------------------------------------

Smode_page_in_Smode02:

  config:

  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True;

  mnemonics:

    csrrw       : 0                                                                             # Sets the expected encoding value for the "csrrw" mnemonic.
    csrrs       : 0                                                                             # Sets the expected encoding value for the "csrrs" mnemonic.
    sd          : 0                                                                             # Sets the expected encoding value for the "sd" mnemonic.

  csr_comb:

    (satp >> 60 == 0x8) and (rs1 == 'x31') and (rd == 'x0'): 0                                  # Check if the top 4 bits of the "satp" register indicate sv39 mode.
    (mstatus & 0x1800)  == 0x0800 and ( rs1 == 'x9' ) and (rd == 'x0') : 0                      # Ensure the "MPP" bits in "mstatus" are set to "S" mode.

  val_comb:

    (rs2_val != 0xF): 0                                                                         # check if the rs2 matches the "store/AMO page fault
    (rs2_val != 0xD): 0                                                                         # check if the rs2 matches the "load page fault
    (((rs1_val >> 12 ) == 0x80000000004) and ((rs2_val & 0xFFF) == 0x0C7)): 0                   # checks the PTE permission and level1 at which PTE is stored 

# *----------------------------------------------------------------------------------------------------------------------
# *----------------------------------------------------------------------------------------------------------------------

Smode_page_in_Smode03:

  config:

  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True;

  mnemonics:

    csrrw       : 0                                                                             # Sets the expected encoding value for the "csrrw" mnemonic.
    csrrs       : 0                                                                             # Sets the expected encoding value for the "csrrs" mnemonic.
    sd          : 0                                                                             # Sets the expected encoding value for the "sd" mnemonic.

  csr_comb:

    (satp >> 60 == 0x8) and (rs1 == 'x31') and (rd == 'x0'): 0                                  # Check if the top 4 bits of the "satp" register indicate sv39 mode.
    (mstatus & 0x1800)  == 0x0800 and ( rs1 == 'x9' ) and (rd == 'x0') : 0                      # Ensure the "MPP" bits in "mstatus" are set to "S" mode.

  val_comb:

    (rs2_val != 0xF): 0                                                                         # check if the rs2 matches the "store/AMO page fault
    (rs2_val != 0xD): 0                                                                         # check if the rs2 matches the "load page fault
    (((rs1_val >> 12 ) == 0x80000000006) and ((rs2_val & 0xFFF) == 0x0C7)) if rs2_val is not None else None: 0 
                                                                                                 # checks the PTE permission and level2 at which PTE is stored 

# *----------------------------------------------------------------------------------------------------------------------
# *----------------------------------------------------------------------------------------------------------------------

Smode_page_in_Smode04:

  config:

  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True;

  mnemonics:

    csrrw       : 0                                                                             # Sets the expected encoding value for the "csrrw" mnemonic.
    csrrs       : 0                                                                             # Sets the expected encoding value for the "csrrs" mnemonic.
    sd          : 0                                                                             # Sets the expected encoding value for the "sd" mnemonic.

  csr_comb:

    (satp >> 60 == 0x8) and (rs1 == 'x31') and (rd == 'x0'): 0                                  # Check if the top 4 bits of the "satp" register indicate sv39 mode.
    (mstatus & 0x1800)  == 0x0800 and ( rs1 == 'x9' ) and (rd == 'x0') : 0                      # Ensure the "MPP" bits in "mstatus" are set to "S" mode.

  val_comb:

    (rs2_val == 0xF): 0                                                                         # check if the rs2 matches the "store/AMO page fault
    (rs2_val == 0xD): 0                                                                         # check if the rs2 matches the "load page fault
    (((rs1_val >> 12 ) == 0x80000000005) and ((rs2_val & 0xFFF) == 0x0C1)): 0                   # checks the PTE permission and level0 at which PTE is stored 

# *----------------------------------------------------------------------------------------------------------------------
# *----------------------------------------------------------------------------------------------------------------------

Smode_page_in_Smode05:

  config:

  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True;

  mnemonics:

    csrrw       : 0                                                                             # Sets the expected encoding value for the "csrrw" mnemonic.
    csrrs       : 0                                                                             # Sets the expected encoding value for the "csrrs" mnemonic.
    sd          : 0                                                                             # Sets the expected encoding value for the "sd" mnemonic.

  csr_comb:

    (satp >> 60 == 0x8) and (rs1 == 'x31') and (rd == 'x0'): 0                                  # Check if the top 4 bits of the "satp" register indicate sv39 mode.
    (mstatus & 0x1800)  == 0x0800 and ( rs1 == 'x9' ) and (rd == 'x0') : 0                      # Ensure the "MPP" bits in "mstatus" are set to "S" mode.

  val_comb:

    (rs2_val == 0xF): 0                                                                         # check if the rs2 matches the "store/AMO page fault
    (rs2_val == 0xD): 0                                                                         # check if the rs2 matches the "load page fault
    (((rs1_val >> 12 ) == 0x80000000004) and ((rs2_val & 0xFFF) == 0x0C1)): 0                   # checks the PTE permission and level1 at which PTE is stored 

# *----------------------------------------------------------------------------------------------------------------------
# *----------------------------------------------------------------------------------------------------------------------

Smode_page_in_Smode06:

  config:

  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True;

  mnemonics:

    csrrw       : 0                                                                             # Sets the expected encoding value for the "csrrw" mnemonic.
    csrrs       : 0                                                                             # Sets the expected encoding value for the "csrrs" mnemonic.
    sd          : 0                                                                             # Sets the expected encoding value for the "sd" mnemonic.

  csr_comb:

    (satp >> 60 == 0x8) and (rs1 == 'x31') and (rd == 'x0'): 0                                  # Check if the top 4 bits of the "satp" register indicate sv39 mode.
    (mstatus & 0x1800)  == 0x0800 and ( rs1 == 'x9' ) and (rd == 'x0') : 0                      # Ensure the "MPP" bits in "mstatus" are set to "S" mode.

  val_comb:

    (rs2_val == 0xF): 0                                                                         # check if the rs2 matches the "store/AMO page fault
    (rs2_val == 0xD): 0                                                                         # check if the rs2 matches the "load page fault
    (((rs1_val >> 12 ) == 0x80000000006) and ((rs2_val & 0xFFF) == 0x0C1)) if rs2_val is not None else None: 0 
                                                                                                 # checks the PTE permission and level2 at which PTE is stored 

# *----------------------------------------------------------------------------------------------------------------------
# *----------------------------------------------------------------------------------------------------------------------

Smode_page_in_Smode07:

  config:

  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True;

  mnemonics:

    csrrw       : 0                                                                             # Sets the expected encoding value for the "csrrw" mnemonic.
    csrrs       : 0                                                                             # Sets the expected encoding value for the "csrrs" mnemonic.
    sd          : 0                                                                             # Sets the expected encoding value for the "sd" mnemonic.

  csr_comb:

    (satp >> 60 == 0x8) and (rs1 == 'x31') and (rd == 'x0'): 0                                  # Check if the top 4 bits of the "satp" register indicate sv39 mode.
    (mstatus & 0x1800)  == 0x0800 and ( rs1 == 'x9' ) and (rd == 'x0') : 0                      # Ensure the "MPP" bits in "mstatus" are set to "S" mode.

  val_comb:

    (rs2_val == 0xC): 0                                                                         # check if the rs2 matches the "load page fault
    (((rs1_val >> 12 ) == 0x80000000005) and ((rs2_val & 0xFFF) == 0x0C7)): 0                   # checks the PTE permission and level0 at which PTE is stored 

# *----------------------------------------------------------------------------------------------------------------------
# *----------------------------------------------------------------------------------------------------------------------

Smode_page_in_Smode08:

  config:

  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True;

  mnemonics:

    csrrw       : 0                                                                             # Sets the expected encoding value for the "csrrw" mnemonic.
    csrrs       : 0                                                                             # Sets the expected encoding value for the "csrrs" mnemonic.
    sd          : 0                                                                             # Sets the expected encoding value for the "sd" mnemonic.

  csr_comb:

    (satp >> 60 == 0x8) and (rs1 == 'x31') and (rd == 'x0'): 0                                  # Check if the top 4 bits of the "satp" register indicate sv39 mode.
    (mstatus & 0x1800)  == 0x0800 and ( rs1 == 'x9' ) and (rd == 'x0') : 0                      # Ensure the "MPP" bits in "mstatus" are set to "S" mode.

  val_comb:

    (rs2_val == 0xC): 0                                                                         # check if the rs2 matches the "load page fault
    (((rs1_val >> 12 ) == 0x80000000004) and ((rs2_val & 0xFFF) == 0x0C7)): 0                   # checks the PTE permission and level1 at which PTE is stored 

# *----------------------------------------------------------------------------------------------------------------------
# *----------------------------------------------------------------------------------------------------------------------

Smode_page_in_Smode09:

  config:

  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True;

  mnemonics:

    csrrw       : 0                                                                             # Sets the expected encoding value for the "csrrw" mnemonic.
    csrrs       : 0                                                                             # Sets the expected encoding value for the "csrrs" mnemonic.
    sd          : 0                                                                             # Sets the expected encoding value for the "sd" mnemonic.

  csr_comb:

    (satp >> 60 == 0x8) and (rs1 == 'x31') and (rd == 'x0'): 0                                  # Check if the top 4 bits of the "satp" register indicate sv39 mode.
    (mstatus & 0x1800)  == 0x0800 and ( rs1 == 'x9' ) and (rd == 'x0') : 0                      # Ensure the "MPP" bits in "mstatus" are set to "S" mode.

  val_comb:

    (rs2_val == 0xC): 0                                                                         # check if the rs2 matches the "load page fault
    (((rs1_val >> 12 ) == 0x80000000006) and ((rs2_val & 0xFFF) == 0x0C7)) if rs2_val is not None else None: 0 
                                                                                                 # checks the PTE permission and level2 at which PTE is stored 

# *----------------------------------------------------------------------------------------------------------------------
# *----------------------------------------------------------------------------------------------------------------------

reserved_rwx01:

  config:

  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True;

  mnemonics:

    csrrw       : 0                                                                             # Sets the expected encoding value for the "csrrw" mnemonic.
    csrrs       : 0                                                                             # Sets the expected encoding value for the "csrrs" mnemonic.
    sd          : 0                                                                             # Sets the expected encoding value for the "sd" mnemonic.

  csr_comb:

    (satp >> 60 == 0x8) and (rs1 == 'x31') and (rd == 'x0'): 0                                  # Check if the top 4 bits of the "satp" register indicate sv39 mode.
    (mstatus & 0x1800)  == 0x0800 and ( rs1 == 'x9' ) and (rd == 'x0') : 0                      # Ensure the "MPP" bits in "mstatus" are set to "S" mode.

  val_comb:

    (rs2_val == 0xF): 0                                                                         # check if the rs2 matches the "store/AMO page fault
    (rs2_val == 0xD): 0                                                                         # check if the rs2 matches the "load page fault
    (((rs1_val >> 12 ) == 0x80000000005) and ((rs2_val & 0xFFF) == 0x0C5)): 0                   # checks the PTE permission and level0 at which PTE is stored 

# *----------------------------------------------------------------------------------------------------------------------
# *----------------------------------------------------------------------------------------------------------------------

reserved_rwx02:

  config:

  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True;

  mnemonics:

    csrrw       : 0                                                                             # Sets the expected encoding value for the "csrrw" mnemonic.
    csrrs       : 0                                                                             # Sets the expected encoding value for the "csrrs" mnemonic.
    sd          : 0                                                                             # Sets the expected encoding value for the "sd" mnemonic.

  csr_comb:

    (satp >> 60 == 0x8) and (rs1 == 'x31') and (rd == 'x0'): 0                                  # Check if the top 4 bits of the "satp" register indicate sv39 mode.
    (mstatus & 0x1800)  == 0x0800 and ( rs1 == 'x9' ) and (rd == 'x0') : 0                      # Ensure the "MPP" bits in "mstatus" are set to "S" mode.

  val_comb:

    (rs2_val == 0xF): 0                                                                         # check if the rs2 matches the "store/AMO page fault
    (rs2_val == 0xD): 0                                                                         # check if the rs2 matches the "load page fault
    (((rs1_val >> 12 ) == 0x80000000004) and ((rs2_val & 0xFFF) == 0x0C5)): 0                   # checks the PTE permission and level1 at which PTE is stored 

# *----------------------------------------------------------------------------------------------------------------------
# *----------------------------------------------------------------------------------------------------------------------

reserved_rwx03:

  config:

  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True;

  mnemonics:

    csrrw       : 0                                                                             # Sets the expected encoding value for the "csrrw" mnemonic.
    csrrs       : 0                                                                             # Sets the expected encoding value for the "csrrs" mnemonic.
    sd          : 0                                                                             # Sets the expected encoding value for the "sd" mnemonic.

  csr_comb:

    (satp >> 60 == 0x8) and (rs1 == 'x31') and (rd == 'x0'): 0                                  # Check if the top 4 bits of the "satp" register indicate sv39 mode.
    (mstatus & 0x1800)  == 0x0800 and ( rs1 == 'x9' ) and (rd == 'x0') : 0                      # Ensure the "MPP" bits in "mstatus" are set to "S" mode.

  val_comb:

    (rs2_val == 0xF): 0                                                                         # check if the rs2 matches the "store/AMO page fault
    (rs2_val == 0xD): 0                                                                         # check if the rs2 matches the "load page fault
    (((rs1_val >> 12 ) == 0x80000000006) and ((rs2_val & 0xFFF) == 0x0C5)) if rs2_val is not None else None: 0 
                                                                                                 # checks the PTE permission and level2 at which PTE is stored 

# *----------------------------------------------------------------------------------------------------------------------
# *----------------------------------------------------------------------------------------------------------------------

reserved_rwx04:

  config:

  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True;

  mnemonics:

    csrrw       : 0                                                                             # Sets the expected encoding value for the "csrrw" mnemonic.
    csrrs       : 0                                                                             # Sets the expected encoding value for the "csrrs" mnemonic.
    sd          : 0                                                                             # Sets the expected encoding value for the "sd" mnemonic.
    csrrc       : 0                                                                             # Sets the expected encoding value for the "csrrc" mnemonic.
  
  csr_comb:

    (satp >> 60 == 0x8) and (rs1 == 'x31') and (rd == 'x0'): 0                                  # Check if the top 4 bits of the "satp" register indicate sv39 mode.
    (mstatus & 0x1800)  == 0x0000 and ( rs1 == 'x9' ) and (rd == 'x0') : 0                      # Ensure the "MPP" bits in "mstatus" are set to "U" mode.

  val_comb:

    (rs2_val == 0xF): 0                                                                         # check if the rs2 matches the "store/AMO page fault
    (rs2_val == 0xD): 0                                                                         # check if the rs2 matches the "load page fault
    (((rs1_val >> 12 ) == 0x80000000005) and ((rs2_val & 0xFFF) == 0x0D5)): 0                   # checks the PTE permission and level0 at which PTE is stored 

# *----------------------------------------------------------------------------------------------------------------------
# *----------------------------------------------------------------------------------------------------------------------

reserved_rwx05:

  config:

  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True;

  mnemonics:

    csrrw       : 0                                                                             # Sets the expected encoding value for the "csrrw" mnemonic.
    csrrs       : 0                                                                             # Sets the expected encoding value for the "csrrs" mnemonic.
    sd          : 0                                                                             # Sets the expected encoding value for the "sd" mnemonic.
    csrrc       : 0                                                                             # Sets the expected encoding value for the "csrrc" mnemonic.

  csr_comb:

    (satp >> 60 == 0x8) and (rs1 == 'x31') and (rd == 'x0'): 0                                  # Check if the top 4 bits of the "satp" register indicate sv39 mode.
    (mstatus & 0x1800)  == 0x0000 and ( rs1 == 'x9' ) and (rd == 'x0') : 0                      # Ensure the "MPP" bits in "mstatus" are set to "U" mode.

  val_comb:

    (rs2_val == 0xF): 0                                                                         # check if the rs2 matches the "store/AMO page fault
    (rs2_val == 0xD): 0                                                                         # check if the rs2 matches the "load page fault
    (((rs1_val >> 12 ) == 0x80000000004) and ((rs2_val & 0xFFF) == 0x0D5)): 0                   # checks the PTE permission and level1 at which PTE is stored 

# *----------------------------------------------------------------------------------------------------------------------
# *----------------------------------------------------------------------------------------------------------------------

reserved_rwx06:

  config:

  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True;

  mnemonics:

    csrrw       : 0                                                                             # Sets the expected encoding value for the "csrrw" mnemonic.
    csrrs       : 0                                                                             # Sets the expected encoding value for the "csrrs" mnemonic.
    sd          : 0                                                                             # Sets the expected encoding value for the "sd" mnemonic.
    csrrc       : 0                                                                             # Sets the expected encoding value for the "csrrc" mnemonic.

  csr_comb:

    (satp >> 60 == 0x8) and (rs1 == 'x31') and (rd == 'x0'): 0                                  # Check if the top 4 bits of the "satp" register indicate sv39 mode.
    (mstatus & 0x1800)  == 0x0000 and ( rs1 == 'x9' ) and (rd == 'x0') : 0                      # Ensure the "MPP" bits in "mstatus" are set to "U" mode.

  val_comb:

    (rs2_val == 0xF): 0                                                                         # check if the rs2 matches the "store/AMO page fault
    (rs2_val == 0xD): 0                                                                         # check if the rs2 matches the "load page fault
    (((rs1_val >> 12 ) == 0x80000000006) and ((rs2_val & 0xFFF) == 0x0D5)) if rs2_val is not None else None: 0 
                                                                                                 # checks the PTE permission and level2 at which PTE is stored 

# *----------------------------------------------------------------------------------------------------------------------
# *----------------------------------------------------------------------------------------------------------------------

reserved_rwx07:

  config:

  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True;

  mnemonics:

    csrrw       : 0                                                                             # Sets the expected encoding value for the "csrrw" mnemonic.
    csrrs       : 0                                                                             # Sets the expected encoding value for the "csrrs" mnemonic.
    sd          : 0                                                                             # Sets the expected encoding value for the "sd" mnemonic.
    csrrc       : 0                                                                             # Sets the expected encoding value for the "csrrc" mnemonic.
  
  csr_comb:

    (satp >> 60 == 0x8) and (rs1 == 'x31') and (rd == 'x0'): 0                                  # Check if the top 4 bits of the "satp" register indicate sv39 mode.
    (mstatus & 0x1800)  == 0x0000 and ( rs1 == 'x9' ) and (rd == 'x0') : 0                      # Ensure the "MPP" bits in "mstatus" are set to "U" mode.

  val_comb:

    (rs2_val == 0xC): 0                                                                         # checks if the rs2 matches the " Instruction page fault"
    (((rs1_val >> 12 ) == 0x80000000005) and ((rs2_val & 0xFFF) == 0x0D5)): 0                   # checks the PTE permission and level0 at which PTE is stored 

# *----------------------------------------------------------------------------------------------------------------------
# *----------------------------------------------------------------------------------------------------------------------

reserved_rwx08:

  config:

  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True;

  mnemonics:

    csrrw       : 0                                                                             # Sets the expected encoding value for the "csrrw" mnemonic.
    csrrs       : 0                                                                             # Sets the expected encoding value for the "csrrs" mnemonic.
    sd          : 0                                                                             # Sets the expected encoding value for the "sd" mnemonic.
    csrrc       : 0                                                                             # Sets the expected encoding value for the "csrrc" mnemonic.

  csr_comb:

    (satp >> 60 == 0x8) and (rs1 == 'x31') and (rd == 'x0'): 0                                  # Check if the top 4 bits of the "satp" register indicate sv39 mode.
    (mstatus & 0x1800)  == 0x0000 and ( rs1 == 'x9' ) and (rd == 'x0') : 0                      # Ensure the "MPP" bits in "mstatus" are set to "U" mode.

  val_comb:

    (rs2_val == 0xC): 0                                                                         # checks if the rs2 matches the " Instruction page fault"
    (((rs1_val >> 12 ) == 0x80000000004) and ((rs2_val & 0xFFF) == 0x0D5)): 0                   # checks the PTE permission and level1 at which PTE is stored 

# *----------------------------------------------------------------------------------------------------------------------
# *----------------------------------------------------------------------------------------------------------------------

reserved_rwx09:

  config:

  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True;

  mnemonics:

    csrrw       : 0                                                                             # Sets the expected encoding value for the "csrrw" mnemonic.
    csrrs       : 0                                                                             # Sets the expected encoding value for the "csrrs" mnemonic.
    sd          : 0                                                                             # Sets the expected encoding value for the "sd" mnemonic.
    csrrc       : 0                                                                             # Sets the expected encoding value for the "csrrc" mnemonic.

  csr_comb:

    (satp >> 60 == 0x8) and (rs1 == 'x31') and (rd == 'x0'): 0                                  # Check if the top 4 bits of the "satp" register indicate sv39 mode.
    (mstatus & 0x1800)  == 0x0000 and ( rs1 == 'x9' ) and (rd == 'x0') : 0                      # Ensure the "MPP" bits in "mstatus" are set to "U" mode.

  val_comb:

    (rs2_val == 0xC): 0                                                                         # checks if the rs2 matches the " Instruction page fault"
    (((rs1_val >> 12 ) == 0x80000000006) and ((rs2_val & 0xFFF) == 0x0D5)) if rs2_val is not None else None: 0 
                                                                                                 # checks the PTE permission and level2 at which PTE is stored 

# *----------------------------------------------------------------------------------------------------------------------
# *----------------------------------------------------------------------------------------------------------------------

nonleaf_pte01:

  config:

  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True;

  mnemonics:

    csrrw       : 0                                                                             # Sets the expected encoding value for the "csrrw" mnemonic.
    csrrs       : 0                                                                             # Sets the expected encoding value for the "csrrs" mnemonic.
    sd          : 0                                                                             # Sets the expected encoding value for the "sd" mnemonic.

  csr_comb:

    (satp >> 60 == 0x8) and (rs1 == 'x31') and (rd == 'x0'): 0                                  # Check if the top 4 bits of the "satp" register indicate sv39 mode.
    (mstatus & 0x1800)  == 0x0800 and ( rs1 == 'x9' ) and (rd == 'x0') : 0                      # Ensure the "MPP" bits in "mstatus" are set to "S" mode.

  val_comb:

    (rs2_val == 0xF): 0                                                                         # check if the rs2 matches the "store/AMO page fault
    (rs2_val == 0xD): 0                                                                         # check if the rs2 matches the "load page fault
    (((rs1_val >> 12 ) == 0x80000000005) and ((rs2_val & 0xFFF) == 0x0C1)): 0                   # checks the PTE permission and level0 at which PTE is stored 

# *----------------------------------------------------------------------------------------------------------------------
# *----------------------------------------------------------------------------------------------------------------------

nonleaf_pte02:

  config:

  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True;

  mnemonics:

    csrrw       : 0                                                                             # Sets the expected encoding value for the "csrrw" mnemonic.
    csrrs       : 0                                                                             # Sets the expected encoding value for the "csrrs" mnemonic.
    sd          : 0                                                                             # Sets the expected encoding value for the "sd" mnemonic.
    csrrc       : 0                                                                             # Sets the expected encoding value for the "csrrc" mnemonic.

  csr_comb:

    (satp >> 60 == 0x8) and (rs1 == 'x31') and (rd == 'x0'): 0                                  # Check if the top 4 bits of the "satp" register indicate sv39 mode.
    (mstatus & 0x1800)  == 0x0000 and ( rs1 == 'x9' ) and (rd == 'x0') : 0                      # Ensure the "MPP" bits in "mstatus" are set to "U" mode.

  val_comb:

    (rs2_val == 0xF): 0                                                                         # check if the rs2 matches the "store/AMO page fault
    (rs2_val == 0xD): 0                                                                         # check if the rs2 matches the "load page fault
    (((rs1_val >> 12 ) == 0x80000000005) and ((rs2_val & 0xFFF) == 0x0D1)): 0                   # checks the PTE permission and level0 at which PTE is stored 

# *----------------------------------------------------------------------------------------------------------------------
# *----------------------------------------------------------------------------------------------------------------------

nonleaf_pte03:

  config:

  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True;

  mnemonics:

    csrrw       : 0                                                                             # Sets the expected encoding value for the "csrrw" mnemonic.
    csrrs       : 0                                                                             # Sets the expected encoding value for the "csrrs" mnemonic.
    sd          : 0                                                                             # Sets the expected encoding value for the "sd" mnemonic.
    csrrc       : 0                                                                             # Sets the expected encoding value for the "csrrc" mnemonic.

  csr_comb:

    (satp >> 60 == 0x8) and (rs1 == 'x31') and (rd == 'x0'): 0                                  # Check if the top 4 bits of the "satp" register indicate sv39 mode.
    (mstatus & 0x1800)  == 0x0000 and ( rs1 == 'x9' ) and (rd == 'x0') : 0                      # Ensure the "MPP" bits in "mstatus" are set to "U" mode.

  val_comb:

    (rs2_val == 0xC): 0                                                                         # checks if the rs2 matches the " Instruction page fault"
    (((rs1_val >> 12 ) == 0x80000000005) and ((rs2_val & 0xFFF) == 0x0D1)): 0                   # checks the PTE permission and level0 at which PTE is stored 


# *----------------------------------------------------------------------------------------------------------------------
# *----------------------------------------------------------------------------------------------------------------------

pmp_pte01:

  config:

  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True;

  mnemonics:

    csrrw       : 0                                                                             # Sets the expected encoding value for the "csrrw" mnemonic.
    csrrs       : 0                                                                             # Sets the expected encoding value for the "csrrs" mnemonic.
    sd          : 0                                                                             # Sets the expected encoding value for the "sd" mnemonic.

  csr_comb:

    (satp >> 60 == 0x8) and (rs1 == 'x31') and (rd == 'x0'): 0                                  # Check if the top 4 bits of the "satp" register indicate sv39 mode.
    (mstatus & 0x1800)  == 0x0800 and ( rs1 == 'x9' ) and (rd == 'x0') : 0                      # Ensure the "MPP" bits in "mstatus" are set to "S" mode.

  val_comb:

    (rs2_val == 0x7): 0                                                                         # check if the rs2 matches the "store/AMO access fault
    (rs2_val == 0x5): 0                                                                         # check if the rs2 matches the "load access fault
    (((rs1_val >> 12 ) == 0x80000000005) and ((rs2_val & 0xFFF) == 0x0C7)): 0                   # checks the PTE permission and level0 at which PTE is stored 
    (rs1_val >= (pmpaddr3 << 2)) and (rs1_val <= (pmpaddr3 << 2)) and ((pmpcfg0 & 0xFF000000) >> 24 == 0x18): 0
                                                                                                # Check if rs1_val falls within the range specified by pmpaddr3, and if the
                                                                                                # corresponding 8 bits of pmpcfg0 are equal to 0x18( No Read and write permissions)
# *----------------------------------------------------------------------------------------------------------------------
# *----------------------------------------------------------------------------------------------------------------------

pmp_pte02:

  config:

  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True;

  mnemonics:

    csrrw       : 0                                                                             # Sets the expected encoding value for the "csrrw" mnemonic.
    csrrs       : 0                                                                             # Sets the expected encoding value for the "csrrs" mnemonic.
    sd          : 0                                                                             # Sets the expected encoding value for the "sd" mnemonic.

  csr_comb:

    (satp >> 60 == 0x8) and (rs1 == 'x31') and (rd == 'x0'): 0                                  # Check if the top 4 bits of the "satp" register indicate sv39 mode.
    (mstatus & 0x1800)  == 0x0800 and ( rs1 == 'x9' ) and (rd == 'x0') : 0                      # Ensure the "MPP" bits in "mstatus" are set to "S" mode.

  val_comb:

    (rs2_val == 0x7): 0                                                                         # check if the rs2 matches the "store/AMO access fault
    (rs2_val == 0x5): 0                                                                         # check if the rs2 matches the "load access fault
    (((rs1_val >> 12 ) == 0x80000000004) and ((rs2_val & 0xFFF) == 0x0C7)): 0                   # checks the PTE permission and level1 at which PTE is stored 
    (rs1_val >= (pmpaddr2 << 2)) and (rs1_val <= (pmpaddr2 << 2)) and ((pmpcfg0 & 0xFF0000) >> 16 == 0x18): 0
                                                                                                # Check if rs1_val falls within the range specified by pmpaddr2, and if the
                                                                                                # corresponding 8 bits of pmpcfg0 are equal to 0x18( No Read and write permissions)    

# *----------------------------------------------------------------------------------------------------------------------
# *----------------------------------------------------------------------------------------------------------------------

pmp_pte03:

  config:

  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True;

  mnemonics:

    csrrw       : 0                                                                             # Sets the expected encoding value for the "csrrw" mnemonic.
    csrrs       : 0                                                                             # Sets the expected encoding value for the "csrrs" mnemonic.
    sd          : 0                                                                             # Sets the expected encoding value for the "sd" mnemonic.

  csr_comb:

    (satp >> 60 == 0x8) and (rs1 == 'x31') and (rd == 'x0'): 0                                  # Check if the top 4 bits of the "satp" register indicate sv39 mode.
    (mstatus & 0x1800)  == 0x0800 and ( rs1 == 'x9' ) and (rd == 'x0') : 0                      # Ensure the "MPP" bits in "mstatus" are set to "S" mode.

  val_comb:

    (rs2_val == 0x7): 0                                                                         # check if the rs2 matches the "store/AMO access fault
    (rs2_val == 0x5): 0                                                                         # check if the rs2 matches the "load access fault
    (((rs1_val >> 12 ) == 0x80000000006) and ((rs2_val & 0xFFF) == 0x0C7)) if rs2_val is not None else None: 0 
                                                                                                 # checks the PTE permission and level2 at which PTE is stored 
    (rs1_val >= (pmpaddr4 << 2)) and (rs1_val <= (pmpaddr4 << 2)) and ((pmpcfg0 & 0xFF00000000) >> 32 == 0x18): 0
                                                                                                # Check if rs1_val falls within the range specified by pmpaddr2, and if the
                                                                                                # corresponding 8 bits of pmpcfg0 are equal to 0x18( No Read and write permissions)    

# *----------------------------------------------------------------------------------------------------------------------
# *----------------------------------------------------------------------------------------------------------------------

pmp_pte04:

  config:

  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True;

  mnemonics:

    csrrw       : 0                                                                             # Sets the expected encoding value for the "csrrw" mnemonic.
    csrrs       : 0                                                                             # Sets the expected encoding value for the "csrrs" mnemonic.
    sd          : 0                                                                             # Sets the expected encoding value for the "sd" mnemonic.
    csrrc       : 0                                                                             # Sets the expected encoding value for the "csrrc" mnemonic.

  csr_comb:

    (satp >> 60 == 0x8) and (rs1 == 'x31') and (rd == 'x0'): 0                                  # Check if the top 4 bits of the "satp" register indicate sv39 mode.
    (mstatus & 0x1800)  == 0x0000 and ( rs1 == 'x9' ) and (rd == 'x0') : 0                      # Ensure the "MPP" bits in "mstatus" are set to "U" mode.

  val_comb:

    (rs2_val == 0x7): 0                                                                         # check if the rs2 matches the "store/AMO access fault
    (rs2_val == 0x5): 0                                                                         # check if the rs2 matches the "load access fault
    (((rs1_val >> 12 ) == 0x80000000005) and ((rs2_val & 0xFFF) == 0x0D7)): 0                   # checks the PTE permission and level0 at which PTE is stored 
    (rs1_val >= (pmpaddr3 << 2)) and (rs1_val <= (pmpaddr3 << 2)) and ((pmpcfg0 & 0xFF000000) >> 24 == 0x18): 0
                                                                                                # Check if rs1_val falls within the range specified by pmpaddr3, and if the
                                                                                                # corresponding 8 bits of pmpcfg0 are equal to 0x18( No Read and write permissions)
# *----------------------------------------------------------------------------------------------------------------------
# *----------------------------------------------------------------------------------------------------------------------

pmp_pte05:

  config:

  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True;

  mnemonics:

    csrrw       : 0                                                                             # Sets the expected encoding value for the "csrrw" mnemonic.
    csrrs       : 0                                                                             # Sets the expected encoding value for the "csrrs" mnemonic.
    sd          : 0                                                                             # Sets the expected encoding value for the "sd" mnemonic.
    csrrc       : 0                                                                             # Sets the expected encoding value for the "csrrc" mnemonic.

  csr_comb:

    (satp >> 60 == 0x8) and (rs1 == 'x31') and (rd == 'x0'): 0                                  # Check if the top 4 bits of the "satp" register indicate sv39 mode.
    (mstatus & 0x1800)  == 0x0000 and ( rs1 == 'x9' ) and (rd == 'x0') : 0                      # Ensure the "MPP" bits in "mstatus" are set to "U" mode.

  val_comb:

    (rs2_val == 0x7): 0                                                                         # check if the rs2 matches the "store/AMO access fault
    (rs2_val == 0x5): 0                                                                         # check if the rs2 matches the "load access fault
    (((rs1_val >> 12 ) == 0x80000000004) and ((rs2_val & 0xFFF) == 0x0D7)): 0                   # checks the PTE permission and level1 at which PTE is stored 
    (rs1_val >= (pmpaddr2 << 2)) and (rs1_val <= (pmpaddr2 << 2)) and ((pmpcfg0 & 0xFF0000) >> 16 == 0x18): 0
                                                                                                # Check if rs1_val falls within the range specified by pmpaddr2, and if the
                                                                                                # corresponding 8 bits of pmpcfg0 are equal to 0x18( No Read and write permissions)    

# *----------------------------------------------------------------------------------------------------------------------
# *----------------------------------------------------------------------------------------------------------------------

pmp_pte06:

  config:

  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True;

  mnemonics:

    csrrw       : 0                                                                             # Sets the expected encoding value for the "csrrw" mnemonic.
    csrrs       : 0                                                                             # Sets the expected encoding value for the "csrrs" mnemonic.
    sd          : 0                                                                             # Sets the expected encoding value for the "sd" mnemonic.
    csrrc       : 0                                                                             # Sets the expected encoding value for the "csrrc" mnemonic.

  csr_comb:

    (satp >> 60 == 0x8) and (rs1 == 'x31') and (rd == 'x0'): 0                                  # Check if the top 4 bits of the "satp" register indicate sv39 mode.
    (mstatus & 0x1800)  == 0x0000 and ( rs1 == 'x9' ) and (rd == 'x0') : 0                      # Ensure the "MPP" bits in "mstatus" are set to "U" mode.

  val_comb:

    (rs2_val == 0x7): 0                                                                         # check if the rs2 matches the "store/AMO access fault
    (rs2_val == 0x5): 0                                                                         # check if the rs2 matches the "load access fault
    (((rs1_val >> 12 ) == 0x80000000006) and ((rs2_val & 0xFFF) == 0x0D7)) if rs2_val is not None else None: 0 
                                                                                                 # checks the PTE permission and level2 at which PTE is stored 
    (rs1_val >= (pmpaddr4 << 2)) and (rs1_val <= (pmpaddr4 << 2)) and ((pmpcfg0 & 0xFF00000000) >> 32 == 0x18): 0
                                                                                                # Check if rs1_val falls within the range specified by pmpaddr2, and if the
                                                                                                # corresponding 8 bits of pmpcfg0 are equal to 0x18( No Read and write permissions)    

# *----------------------------------------------------------------------------------------------------------------------
# *----------------------------------------------------------------------------------------------------------------------

pmp_pte07:

  config:

  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True;

  mnemonics:

    csrrw       : 0                                                                             # Sets the expected encoding value for the "csrrw" mnemonic.
    csrrs       : 0                                                                             # Sets the expected encoding value for the "csrrs" mnemonic.
    sd          : 0                                                                             # Sets the expected encoding value for the "sd" mnemonic.

  csr_comb:

    (satp >> 60 == 0x8) and (rs1 == 'x31') and (rd == 'x0'): 0                                  # Check if the top 4 bits of the "satp" register indicate sv39 mode.
    (mstatus & 0x1800)  == 0x0800 and ( rs1 == 'x9' ) and (rd == 'x0') : 0                      # Ensure the "MPP" bits in "mstatus" are set to "S" mode.

  val_comb:

    (rs2_val == 0x1): 0                                                                         # check if the rs2 matches the instruction access fault
    (((rs1_val >> 12 ) == 0x80000000005) and ((rs2_val & 0xFFF) == 0x0C7)): 0                   # checks the PTE permission and level0 at which PTE is stored 
    (rs1_val >= (pmpaddr3 << 2)) and ((pmpcfg0 & 0xFF000000) >> 24 == 0x18): 0
                                                                                                # Check if rs1_val falls within the range specified by pmpaddr3, and if the
                                                                                                # corresponding 8 bits of pmpcfg0 are equal to 0x18( No Read and write permissions)
# *----------------------------------------------------------------------------------------------------------------------
# *----------------------------------------------------------------------------------------------------------------------

pmp_pte08:

  config:

  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True;

  mnemonics:

    csrrw       : 0                                                                             # Sets the expected encoding value for the "csrrw" mnemonic.
    csrrs       : 0                                                                             # Sets the expected encoding value for the "csrrs" mnemonic.
    sd          : 0                                                                             # Sets the expected encoding value for the "sd" mnemonic.

  csr_comb:

    (satp >> 60 == 0x8) and (rs1 == 'x31') and (rd == 'x0'): 0                                  # Check if the top 4 bits of the "satp" register indicate sv39 mode.
    (mstatus & 0x1800)  == 0x0800 and ( rs1 == 'x9' ) and (rd == 'x0') : 0                      # Ensure the "MPP" bits in "mstatus" are set to "S" mode.

  val_comb:

    (rs2_val == 0x1): 0                                                                         # check if the rs2 matches the instruction access fault
    (((rs1_val >> 12 ) == 0x80000000004) and ((rs2_val & 0xFFF) == 0x0C7)): 0                   # checks the PTE permission and level1 at which PTE is stored 
    (rs1_val >= (pmpaddr2 << 2)) and ((pmpcfg0 & 0xFF0000) >> 16 == 0x18): 0
                                                                                                # Check if rs1_val falls within the range specified by pmpaddr2, and if the
                                                                                                # corresponding 8 bits of pmpcfg0 are equal to 0x18( No Read and write permissions)    

# *----------------------------------------------------------------------------------------------------------------------
# *----------------------------------------------------------------------------------------------------------------------

pmp_pte09:

  config:

  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True;

  mnemonics:

    csrrw       : 0                                                                             # Sets the expected encoding value for the "csrrw" mnemonic.
    csrrs       : 0                                                                             # Sets the expected encoding value for the "csrrs" mnemonic.
    sd          : 0                                                                             # Sets the expected encoding value for the "sd" mnemonic.

  csr_comb:

    (satp >> 60 == 0x8) and (rs1 == 'x31') and (rd == 'x0'): 0                                  # Check if the top 4 bits of the "satp" register indicate sv39 mode.
    (mstatus & 0x1800)  == 0x0800 and ( rs1 == 'x9' ) and (rd == 'x0') : 0                      # Ensure the "MPP" bits in "mstatus" are set to "S" mode.

  val_comb:

    (rs2_val == 0x1): 0                                                                         # check if the rs2 matches the instruction access fault
    (((rs1_val >> 12 ) == 0x80000000006) and ((rs2_val & 0xFFF) == 0x0C7)) if rs2_val is not None else None: 0 
                                                                                                 # checks the PTE permission and level2 at which PTE is stored 
    (rs1_val >= (pmpaddr4 << 2)) and ((pmpcfg0 & 0xFF00000000) >> 32 == 0x18): 0
                                                                                                # Check if rs1_val falls within the range specified by pmpaddr2, and if the
                                                                                                # corresponding 8 bits of pmpcfg0 are equal to 0x18( No Read and write permissions)    

# *----------------------------------------------------------------------------------------------------------------------
# *----------------------------------------------------------------------------------------------------------------------

pmp_pte10:

  config:

  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True;

  mnemonics:

    csrrw       : 0                                                                             # Sets the expected encoding value for the "csrrw" mnemonic.
    csrrs       : 0                                                                             # Sets the expected encoding value for the "csrrs" mnemonic.
    sd          : 0                                                                             # Sets the expected encoding value for the "sd" mnemonic.
    csrrc       : 0                                                                             # Sets the expected encoding value for the "csrrc" mnemonic.

  csr_comb:

    (satp >> 60 == 0x8) and (rs1 == 'x31') and (rd == 'x0'): 0                                  # Check if the top 4 bits of the "satp" register indicate sv39 mode.
    (mstatus & 0x1800)  == 0x0000 and ( rs1 == 'x9' ) and (rd == 'x0') : 0                      # Ensure the "MPP" bits in "mstatus" are set to "U" mode.

  val_comb:

    (rs2_val == 0x1): 0                                                                         # check if the rs2 matches the instruction access fault
    (((rs1_val >> 12 ) == 0x80000000005) and ((rs2_val & 0xFFF) == 0x0D7)): 0                   # checks the PTE permission and level0 at which PTE is stored 
    (rs1_val >= (pmpaddr3 << 2)) and ((pmpcfg0 & 0xFF000000) >> 24 == 0x18): 0
                                                                                                # Check if rs1_val falls within the range specified by pmpaddr3, and if the
                                                                                                # corresponding 8 bits of pmpcfg0 are equal to 0x18( No Read and write permissions)
# *----------------------------------------------------------------------------------------------------------------------
# *----------------------------------------------------------------------------------------------------------------------

pmp_pte11:

  config:

  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True;

  mnemonics:

    csrrw       : 0                                                                             # Sets the expected encoding value for the "csrrw" mnemonic.
    csrrs       : 0                                                                             # Sets the expected encoding value for the "csrrs" mnemonic.
    sd          : 0                                                                             # Sets the expected encoding value for the "sd" mnemonic.
    csrrc       : 0                                                                             # Sets the expected encoding value for the "csrrc" mnemonic.

  csr_comb:

    (satp >> 60 == 0x8) and (rs1 == 'x31') and (rd == 'x0'): 0                                  # Check if the top 4 bits of the "satp" register indicate sv39 mode.
    (mstatus & 0x1800)  == 0x0000 and ( rs1 == 'x9' ) and (rd == 'x0') : 0                      # Ensure the "MPP" bits in "mstatus" are set to "U" mode.

  val_comb:

    (rs2_val == 0x1): 0                                                                         # check if the rs2 matches the instruction access fault
    (((rs1_val >> 12 ) == 0x80000000004) and ((rs2_val & 0xFFF) == 0x0D7)): 0                   # checks the PTE permission and level1 at which PTE is stored 
    (rs1_val >= (pmpaddr2 << 2)) and ((pmpcfg0 & 0xFF0000) >> 16 == 0x18): 0
                                                                                                # Check if rs1_val falls within the range specified by pmpaddr2, and if the
                                                                                                # corresponding 8 bits of pmpcfg0 are equal to 0x18( No Read and write permissions)    

# *----------------------------------------------------------------------------------------------------------------------
# *----------------------------------------------------------------------------------------------------------------------

pmp_pte12:

  config:

  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True;

  mnemonics:

    csrrw       : 0                                                                             # Sets the expected encoding value for the "csrrw" mnemonic.
    csrrs       : 0                                                                             # Sets the expected encoding value for the "csrrs" mnemonic.
    sd          : 0                                                                             # Sets the expected encoding value for the "sd" mnemonic.
    csrrc       : 0                                                                             # Sets the expected encoding value for the "csrrc" mnemonic.

  csr_comb:

    (satp >> 60 == 0x8) and (rs1 == 'x31') and (rd == 'x0'): 0                                  # Check if the top 4 bits of the "satp" register indicate sv39 mode.
    (mstatus & 0x1800)  == 0x0000 and ( rs1 == 'x9' ) and (rd == 'x0') : 0                      # Ensure the "MPP" bits in "mstatus" are set to "U" mode.

  val_comb:

    (rs2_val == 0x1): 0                                                                         # check if the rs2 matches the instruction access fault
    (((rs1_val >> 12 ) == 0x80000000006) and ((rs2_val & 0xFFF) == 0x0D7)) if rs2_val is not None else None: 0 
                                                                                                 # checks the PTE permission and level2 at which PTE is stored 
    (rs1_val >= (pmpaddr4 << 2)) and ((pmpcfg0 & 0xFF00000000) >> 32 == 0x18): 0
                                                                                                # Check if rs1_val falls within the range specified by pmpaddr2, and if the
                                                                                                # corresponding 8 bits of pmpcfg0 are equal to 0x18( No Read and write permissions)    

# *----------------------------------------------------------------------------------------------------------------------
# *----------------------------------------------------------------------------------------------------------------------

pmp_pa01:

  config:

  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True;

  mnemonics:

    csrrw       : 0                                                                             # Sets the expected encoding value for the "csrrw" mnemonic.
    csrrs       : 0                                                                             # Sets the expected encoding value for the "csrrs" mnemonic.
    sd          : 0                                                                             # Sets the expected encoding value for the "sd" mnemonic.
    ld          : 0 

  csr_comb:

    (satp >> 60 == 0x8) and (rs1 == 'x31') and (rd == 'x0'): 0                                  # Check if the top 4 bits of the "satp" register indicate sv39 mode.
    (mstatus & 0x1800)  == 0x0800 and ( rs1 == 'x9' ) and (rd == 'x0') : 0                      # Ensure the "MPP" bits in "mstatus" are set to "S" mode.

  val_comb:

    (rs2_val == 0x7): 0                                                                         # check if the rs2 matches the "store/AMO access fault
    (rs2_val == 0x5): 0                                                                         # check if the rs2 matches the "load access fault
    (rs2_val == 0x1): 0                                                                         # check if the rs2 matches the instruction access fault
   
    (((rs1_val >> 12 ) == 0x80000000005) and ((rs2_val & 0xFFF) == 0x0C7)): 0                   # checks the PTE permission and level0 at which PTE is stored 
    (rs1_val == 0x0900001688 ) and ((pmpcfg0 & 0xFF00) >> 8 == 0x08): 0                        
    # checks that the value in rs1 equals to 0x0900001688 (va_data) which is a virtual address for the rvtest_data where there is no read and write 
    # PTE permissions, which is confirmed by checking the bits fo pmpcfg0, this cover point should hit two times one for the LREG and one for SREG
    # instr in the "vm_en" label during virtualization 

# *----------------------------------------------------------------------------------------------------------------------
# *----------------------------------------------------------------------------------------------------------------------

pmp_pa02:

  config:

  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True;

  mnemonics:

    csrrw       : 0                                                                             # Sets the expected encoding value for the "csrrw" mnemonic.
    csrrs       : 0                                                                             # Sets the expected encoding value for the "csrrs" mnemonic.    
    sd          : 0                                                                             # Sets the expected encoding value for the "sd" mnemonic.
    ld          : 0 

  csr_comb:

    (satp >> 60 == 0x8) and (rs1 == 'x31') and (rd == 'x0'): 0                                  # Check if the top 4 bits of the "satp" register indicate sv39 mode.
    (mstatus & 0x1800)  == 0x0800 and ( rs1 == 'x9' ) and (rd == 'x0') : 0                      # Ensure the "MPP" bits in "mstatus" are set to "S" mode.

  val_comb:

    (rs2_val == 0x7): 0                                                                         # check if the rs2 matches the "store/AMO access fault
    (rs2_val == 0x5): 0                                                                         # check if the rs2 matches the "load access fault
    (rs2_val == 0x1): 0                                                                         # check if the rs2 matches the instruction access fault
   
    (((rs1_val >> 12 ) == 0x80000000004) and ((rs2_val & 0xFFF) == 0x0C7)): 0                   # checks the PTE permission and level1 at which PTE is stored 
    (rs1_val == 0x0901000688 ) and ((pmpcfg0 & 0xFF00) >> 8 == 0x08): 0                        
    # checks that the value in rs1 equals to 0x0901000688 (va_data) which is a virtual address for the rvtest_data where there is no read and write 
    # PTE permissions, which is confirmed by checking the bits fo pmpcfg0, this cover point should hit two times one for the LREG and one for SREG
    # instr in the "vm_en" label during virtualization 

# *----------------------------------------------------------------------------------------------------------------------
# *----------------------------------------------------------------------------------------------------------------------

pmp_pa03:

  config:

  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True;

  mnemonics:

    csrrw       : 0                                                                             # Sets the expected encoding value for the "csrrw" mnemonic.
    csrrs       : 0                                                                             # Sets the expected encoding value for the "csrrs" mnemonic.
    sd          : 0                                                                             # Sets the expected encoding value for the "sd" mnemonic.
    ld          : 0 

  csr_comb:

    (satp >> 60 == 0x8) and (rs1 == 'x31') and (rd == 'x0'): 0                                  # Check if the top 4 bits of the "satp" register indicate sv39 mode.
    (mstatus & 0x1800)  == 0x0800 and ( rs1 == 'x9' ) and (rd == 'x0') : 0                      # Ensure the "MPP" bits in "mstatus" are set to "S" mode.

  val_comb:

    (rs2_val == 0x7): 0                                                                         # check if the rs2 matches the "store/AMO access fault
    (rs2_val == 0x5): 0                                                                         # check if the rs2 matches the "load access fault
    (rs2_val == 0x1): 0                                                                         # check if the rs2 matches the instruction access fault
   
    (((rs1_val >> 12 ) == 0x80000000006) and ((rs2_val & 0xFFF) == 0x0C7)) if rs2_val is not None else None: 0 
                                                                                                 # checks the PTE permission and level2 at which PTE is stored 
    (rs1_val == 0x0980000688 ) and ((pmpcfg0 & 0xFF00) >> 8 == 0x08): 0                        
    # checks that the value in rs1 equals to 0x0980000688 (va_data) which is a virtual address for the rvtest_data where there is no read and write 
    # PTE permissions, which is confirmed by checking the bits fo pmpcfg0, this cover point should hit two times one for the LREG and one for SREG
    # instr in the "vm_en" label during virtualization 

# *----------------------------------------------------------------------------------------------------------------------
# *----------------------------------------------------------------------------------------------------------------------

pmp_pa04:

  config:

  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True;

  mnemonics:

    csrrw       : 0                                                                             # Sets the expected encoding value for the "csrrw" mnemonic.
    csrrs       : 0                                                                             # Sets the expected encoding value for the "csrrs" mnemonic.
    csrrc       : 0                                                                             # Sets the expected encoding value for the "csrrc" mnemonic.
    sd          : 0                                                                             # Sets the expected encoding value for the "sd" mnemonic.
    ld          : 0 

  csr_comb:

    (satp >> 60 == 0x8) and (rs1 == 'x31') and (rd == 'x0'): 0                                  # Check if the top 4 bits of the "satp" register indicate sv39 mode.
    (mstatus & 0x1800)  == 0x0000 and ( rs1 == 'x9' ) and (rd == 'x0') : 0                      # Ensure the "MPP" bits in "mstatus" are set to "U" mode.

  val_comb:

    (rs2_val == 0x7): 0                                                                         # check if the rs2 matches the "store/AMO access fault
    (rs2_val == 0x5): 0                                                                         # check if the rs2 matches the "load access fault
    (rs2_val == 0x1): 0                                                                         # check if the rs2 matches the instruction access fault
   
    (((rs1_val >> 12 ) == 0x80000000005) and ((rs2_val & 0xFFF) == 0x0D7)): 0                   # checks the PTE permission and level0 at which PTE is stored 
    (rs1_val == 0x0900001688 ) and ((pmpcfg0 & 0xFF00) >> 8 == 0x08): 0                        
    # checks that the value in rs1 equals to 0x0900001688 (va_data) which is a virtual address for the rvtest_data where there is no read and write 
    # PTE permissions, which is confirmed by checking the bits fo pmpcfg0, this cover point should hit two times one for the LREG and one for SREG
    # instr in the "vm_en" label during virtualization 

# *----------------------------------------------------------------------------------------------------------------------
# *----------------------------------------------------------------------------------------------------------------------

pmp_pa05:

  config:

  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True;

  mnemonics:

    csrrw       : 0                                                                             # Sets the expected encoding value for the "csrrw" mnemonic.
    csrrs       : 0                                                                             # Sets the expected encoding value for the "csrrs" mnemonic.
    csrrc       : 0                                                                             # Sets the expected encoding value for the "csrrc" mnemonic.
    sd          : 0                                                                             # Sets the expected encoding value for the "sd" mnemonic.
    ld          : 0 

  csr_comb:

    (satp >> 60 == 0x8) and (rs1 == 'x31') and (rd == 'x0'): 0                                  # Check if the top 4 bits of the "satp" register indicate sv39 mode.
    (mstatus & 0x1800)  == 0x0000 and ( rs1 == 'x9' ) and (rd == 'x0') : 0                      # Ensure the "MPP" bits in "mstatus" are set to "U" mode.

  val_comb:

    (rs2_val == 0x7): 0                                                                         # check if the rs2 matches the "store/AMO access fault
    (rs2_val == 0x5): 0                                                                         # check if the rs2 matches the "load access fault
    (rs2_val == 0x1): 0                                                                         # check if the rs2 matches the instruction access fault
   
    (((rs1_val >> 12 ) == 0x80000000004) and ((rs2_val & 0xFFF) == 0x0D7)): 0                   # checks the PTE permission and level1 at which PTE is stored 

    (rs1_val == 0x0901000688 ) and ((pmpcfg0 & 0xFF00) >> 8 == 0x08): 0                        
    # checks that the value in rs1 equals to 0x0901000688 (va_data) which is a virtual address for the rvtest_data where there is no read and write 
    # PTE permissions, which is confirmed by checking the bits fo pmpcfg0, this cover point should hit two times one for the LREG and one for SREG
    # instr in the "vm_en" label during virtualization 

# *----------------------------------------------------------------------------------------------------------------------
# *----------------------------------------------------------------------------------------------------------------------

pmp_pa06:

  config:

  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True;

  mnemonics:

    csrrw       : 0                                                                             # Sets the expected encoding value for the "csrrw" mnemonic.
    csrrs       : 0                                                                             # Sets the expected encoding value for the "csrrs" mnemonic.
    csrrc       : 0                                                                             # Sets the expected encoding value for the "csrrc" mnemonic.  
    sd          : 0                                                                             # Sets the expected encoding value for the "sd" mnemonic.
    ld          : 0 

  csr_comb:

    (satp >> 60 == 0x8) and (rs1 == 'x31') and (rd == 'x0'): 0                                  # Check if the top 4 bits of the "satp" register indicate sv39 mode.
    (mstatus & 0x1800)  == 0x0000 and ( rs1 == 'x9' ) and (rd == 'x0') : 0                      # Ensure the "MPP" bits in "mstatus" are set to "U" mode.

  val_comb:

    (rs2_val == 0x7): 0                                                                         # check if the rs2 matches the "store/AMO access fault
    (rs2_val == 0x5): 0                                                                         # check if the rs2 matches the "load access fault
    (rs2_val == 0x1): 0                                                                         # check if the rs2 matches the instruction access fault
   
    (((rs1_val >> 12 ) == 0x80000000006) and ((rs2_val & 0xFFF) == 0x0D7)) if rs2_val is not None else None: 0 
                                                                                                 # checks the PTE permission and level2 at which PTE is stored 
    (rs1_val == 0x0980000688 ) and ((pmpcfg0 & 0xFF00) >> 8 == 0x08): 0                        
    # checks that the value in rs1 equals to 0x0980000688 (va_data) which is a virtual address for the rvtest_data where there is no read and write 
    # PTE permissions, which is confirmed by checking the bits fo pmpcfg0, this cover point should hit two times one for the LREG and one for SREG
    # instr in the "vm_en" label during virtualization 

# *----------------------------------------------------------------------------------------------------------------------
# *----------------------------------------------------------------------------------------------------------------------


