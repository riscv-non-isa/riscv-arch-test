add.uw:
    config: 
      - check ISA:=regex(.*RV64.*I.*B.*)
      - check ISA:=regex(.*RV64.*I.*Zba.*)
    mnemonics: 	
      add.uw: 0
    rs1: 
      <<: *all_regs
    rs2: 
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb: 
      <<: *rfmt_op_comb
    val_comb:
      <<: [*base_rs1val_unsgn , *base_rs2val_unsgn , *rfmt_val_comb_unsgn]
      abstract_comb:
        'bitmanip_dataset(xlen,signed=False)': 0
        <<: [*rs1val_walking_unsgn, *rs2val_walking_unsgn]
        
sh1add:
    config: 
      - check ISA:=regex(.*I.*B.*)
      - check ISA:=regex(.*I.*Zba.*)
    mnemonics: 
      sh1add: 0
    rs1: 
      <<: *all_regs
    rs2: 
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb: 
      <<: *rfmt_op_comb
    val_comb:
      <<: [*base_rs1val_sgn , *base_rs2val_sgn , *rfmt_val_comb_sgn]
      abstract_comb:
        'bitmanip_dataset(xlen)': 0
        <<: [*rs1val_walking, *rs2val_walking]

        
sh1add.uw:
    config: 
      - check ISA:=regex(.*RV64.*I.*B.*)
      - check ISA:=regex(.*RV64.*I.*Zba.*)
    mnemonics: 
      sh1add.uw: 0
    rs1: 
      <<: *all_regs
    rs2: 
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb: 
      <<: *rfmt_op_comb
    val_comb:
      <<: [*base_rs1val_unsgn , *base_rs2val_unsgn , *rfmt_val_comb_unsgn]
      abstract_comb:
        'bitmanip_dataset(xlen,signed=False)': 0
        <<: [*rs1val_walking_unsgn, *rs2val_walking_unsgn]
        
sh2add:
    config: 
      - check ISA:=regex(.*I.*B.*)
      - check ISA:=regex(.*I.*Zba.*)
    mnemonics: 
      sh2add: 0
    rs1: 
      <<: *all_regs
    rs2: 
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb: 
      <<: *rfmt_op_comb
    val_comb:
      <<: [*base_rs1val_sgn , *base_rs2val_sgn , *rfmt_val_comb_sgn]
      abstract_comb:
        'bitmanip_dataset(xlen)': 0
        <<: [*rs1val_walking, *rs2val_walking]
        
sh2add.uw:
    config: 
      - check ISA:=regex(.*RV64.*I.*B.*)
      - check ISA:=regex(.*RV64.*I.*Zba.*)
    mnemonics: 
      sh2add.uw: 0
    rs1: 
      <<: *all_regs
    rs2: 
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb: 
      <<: *rfmt_op_comb
    val_comb:
      <<: [*base_rs1val_unsgn , *base_rs2val_unsgn , *rfmt_val_comb_unsgn]
      abstract_comb:
        'bitmanip_dataset(xlen,signed=False)': 0
        <<: [*rs1val_walking_unsgn, *rs2val_walking_unsgn]
        
sh3add:
    config: 
      - check ISA:=regex(.*I.*B.*)
      - check ISA:=regex(.*I.*Zba.*)
    mnemonics: 
      sh3add: 0
    rs1: 
      <<: *all_regs
    rs2: 
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb: 
      <<: *rfmt_op_comb
    val_comb:
      <<: [*base_rs1val_sgn , *base_rs2val_sgn , *rfmt_val_comb_sgn]
      abstract_comb:
        'bitmanip_dataset(xlen)': 0
        <<: [*rs1val_walking, *rs2val_walking]
        
sh3add.uw:
    config: 
      - check ISA:=regex(.*RV64.*I.*B.*)
      - check ISA:=regex(.*RV64.*I.*Zba.*)
    mnemonics: 
      sh3add.uw: 0
    rs1: 
      <<: *all_regs
    rs2: 
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb: 
      <<: *rfmt_op_comb
    val_comb:
      <<: [*base_rs1val_unsgn , *base_rs2val_unsgn , *rfmt_val_comb_unsgn]
      abstract_comb:
        'bitmanip_dataset(xlen,signed=False)': 0
        <<: [*rs1val_walking_unsgn, *rs2val_walking_unsgn]
        
slli.uw:
    config: 
      - check ISA:=regex(.*RV64.*I.*B.*)
      - check ISA:=regex(.*RV64.*I.*Zba.*)
    mnemonics: 
      slli.uw: 0
    rs1: 
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb: 
      <<: *ifmt_op_comb
    val_comb:
      abstract_comb:      
        'bitmanip_dataset(xlen,["rs1_val"],signed=False)': 0
        <<: [*rs1val_walking_unsgn]
        'walking_ones("imm_val", 5, False)': 0
        'walking_zeros("imm_val", 5, False)': 0
        'alternate("imm_val", 5, False)': 0

xnor:
    config: 
      - check ISA:=regex(.*I.*B.*)
      - check ISA:=regex(.*I.*Zbb.*)
      - check ISA:=regex(.*I.*Zbkb.*)
      - check ISA:=regex(.*I.*Zk.*)
      - check ISA:=regex(.*I.*Zkn.*)
      - check ISA:=regex(.*I.*Zks.*)
    mnemonics: 
      xnor: 0
    rs1: 
      <<: *all_regs
    rs2: 
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb: 
      <<: *rfmt_op_comb
    val_comb:
      <<: [*base_rs1val_unsgn , *base_rs2val_unsgn , *rfmt_val_comb_unsgn]
      abstract_comb:
        'bitmanip_dataset(xlen,signed=False)': 0
        <<: [*rs1val_walking_unsgn, *rs2val_walking_unsgn]
        'uniform_random(20, 100, ["rs1_val","rs2_val"], [xlen, xlen])': 0
        
zext.h_64:
    config: 
      - check ISA:=regex(.*I.*B.*)
      - check ISA:=regex(.*I.*Zbb.*)
    mnemonics: 
      zext.h: 0
    base_op: packw
    p_op_cond: rs2 == x0
    rs1: 
      <<: *all_regs
    rd: 
      <<: *all_regs
    op_comb: 
      <<: *ifmt_op_comb
    val_comb:
      'rs1_val == 0': 0
      'rs1_val == 0x80': 0
      'rs1_val == 0xFF80': 0
      abstract_comb:
        'walking_ones("rs1_val", xlen, False)': 0
        'walking_zeros("rs1_val", xlen, False)': 0
        'uniform_random(20, 100, ["rs1_val"], [xlen])': 0
andn:
    config: 
      - check ISA:=regex(.*I.*B.*)
      - check ISA:=regex(.*I.*Zbb.*)
      - check ISA:=regex(.*I.*Zbkb.*)
      - check ISA:=regex(.*I.*Zk.*)
      - check ISA:=regex(.*I.*Zkn.*)
      - check ISA:=regex(.*I.*Zks.*)
    mnemonics: 
      andn: 0
    rs1: 
      <<: *all_regs
    rs2: 
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb: 
      <<: *rfmt_op_comb
    val_comb:
      <<: [*base_rs1val_unsgn , *base_rs2val_unsgn , *rfmt_val_comb_unsgn]
      abstract_comb:
        <<: [*rs1val_walking_unsgn, *rs2val_walking_unsgn]
        'uniform_random(5, 100, ["rs1_val","rs2_val"], [xlen, xlen])': 0
        'bitmanip_dataset(xlen,["rs1_val","rs2_val"],False)': 0

clz:
    config: 
      - check ISA:=regex(.*I.*B.*)
      - check ISA:=regex(.*I.*Zbb.*)
    mnemonics: 
      clz: 0
    rs1: 
      <<: *all_regs
    rd: 
      <<: *all_regs
    op_comb: 
      <<: *ifmt_op_comb
    val_comb:
      abstract_comb:
        <<: [*rs1val_walking_unsgn]
        'leading_zeros(xlen, ["rs1_val"], [xlen], 11)': 0
        'leading_ones(xlen, ["rs1_val"], [xlen], 10)': 0
        'trailing_zeros(xlen, ["rs1_val"], [xlen], 12)': 0
        'trailing_ones(xlen, ["rs1_val"], [xlen], 13)': 0

        
clzw:
    config: 
      - check ISA:=regex(.*RV64.*I.*B.*)
      - check ISA:=regex(.*RV64.*I.*Zbb.*)
    mnemonics: 
      clzw: 0
    rs1: 
      <<: *all_regs
    rd: 
      <<: *all_regs
    op_comb: 
      <<: *ifmt_op_comb
    val_comb:
      abstract_comb:
        <<: [*rs1val_walking_unsgn]
        'leading_zeros(xlen, ["rs1_val"], [xlen], 11)': 0
        'leading_ones(xlen, ["rs1_val"], [xlen], 10)': 0
        'trailing_zeros(xlen, ["rs1_val"], [xlen], 12)': 0
        'trailing_ones(xlen, ["rs1_val"], [xlen], 13)': 0
        
ctz:
    config: 
      - check ISA:=regex(.*I.*B.*)
      - check ISA:=regex(.*I.*Zbb.*)
    mnemonics: 
      ctz: 0
    rs1: 
      <<: *all_regs
    rd: 
      <<: *all_regs
    op_comb: 
      <<: *ifmt_op_comb
    val_comb:
      abstract_comb:
        <<: [*rs1val_walking_unsgn]
        'leading_zeros(xlen, ["rs1_val"], [xlen], 11)': 0
        'leading_ones(xlen, ["rs1_val"], [xlen], 10)': 0
        'trailing_zeros(xlen, ["rs1_val"], [xlen], 12)': 0
        'trailing_ones(xlen, ["rs1_val"], [xlen], 13)': 0
        
ctzw:
    config: 
      - check ISA:=regex(.*RV64.*I.*B.*)
      - check ISA:=regex(.*RV64.*I.*Zbb.*)
    mnemonics: 
      ctzw: 0
    rs1: 
      <<: *all_regs
    rd: 
      <<: *all_regs
    op_comb: 
      <<: *ifmt_op_comb
    val_comb:
      abstract_comb:
        <<: [*rs1val_walking_unsgn]
        'leading_zeros(xlen, ["rs1_val"], [xlen], 11)': 0
        'leading_ones(xlen, ["rs1_val"], [xlen], 10)': 0
        'trailing_zeros(xlen, ["rs1_val"], [xlen], 12)': 0
        'trailing_ones(xlen, ["rs1_val"], [xlen], 13)': 0

        
cpop:
    config: 
      - check ISA:=regex(.*I.*B.*)
      - check ISA:=regex(.*I.*Zbb.*)
    mnemonics: 
      cpop: 0
    rs1: 
      <<: *all_regs
    rd: 
      <<: *all_regs
    op_comb: 
      <<: *ifmt_op_comb
    val_comb:
      abstract_comb:
        <<: [*rs1val_walking_unsgn]
        'leading_zeros(xlen, ["rs1_val"], [xlen], 11)': 0
        'leading_ones(xlen, ["rs1_val"], [xlen], 10)': 0
        'trailing_zeros(xlen, ["rs1_val"], [xlen], 12)': 0
        'trailing_ones(xlen, ["rs1_val"], [xlen], 13)': 0
        
cpopw:
    config: 
      - check ISA:=regex(.*RV64.*I.*B.*)
      - check ISA:=regex(.*RV64.*I.*Zbb.*)
    mnemonics: 
      cpopw: 0
    rs1: 
      <<: *all_regs
    rd: 
      <<: *all_regs
    op_comb: 
      <<: *ifmt_op_comb
    val_comb:
      abstract_comb:
        <<: [*rs1val_walking_unsgn]
        'leading_zeros(xlen, ["rs1_val"], [xlen], 11)': 0
        'leading_ones(xlen, ["rs1_val"], [xlen], 10)': 0
        'trailing_zeros(xlen, ["rs1_val"], [xlen], 12)': 0
        'trailing_ones(xlen, ["rs1_val"], [xlen], 13)': 0
        
max:
    config: 
      - check ISA:=regex(.*I.*B.*)
      - check ISA:=regex(.*I.*Zbb.*)
    mnemonics: 
      max: 0
    rs1: 
      <<: *all_regs
    rs2: 
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb: 
      <<: *rfmt_op_comb
    val_comb:
      <<: [*base_rs1val_sgn , *base_rs2val_sgn , *rfmt_val_comb_sgn]
      abstract_comb:
        'bitmanip_dataset(xlen)': 0
        <<: [*rs1val_walking, *rs2val_walking]

maxu:
    config: 
      - check ISA:=regex(.*I.*B.*)
      - check ISA:=regex(.*I.*Zbb.*)
    mnemonics: 
      maxu: 0
    rs1: 
      <<: *all_regs
    rs2: 
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb: 
      <<: *rfmt_op_comb
    val_comb:
      <<: [*base_rs1val_unsgn , *base_rs2val_unsgn , *rfmt_val_comb_unsgn]
      abstract_comb:
        'bitmanip_dataset(xlen,signed=False)': 0
        <<: [*rs1val_walking_unsgn,*rs2val_walking_unsgn]
        
min:
    config: 
      - check ISA:=regex(.*I.*B.*)
      - check ISA:=regex(.*I.*Zbb.*)
    mnemonics: 
      min: 0
    rs1: 
      <<: *all_regs
    rs2: 
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb: 
      <<: *rfmt_op_comb
    val_comb:
      <<: [*base_rs1val_sgn , *base_rs2val_sgn , *rfmt_val_comb_sgn]
      abstract_comb:
        'bitmanip_dataset(xlen)': 0
        <<: [*rs1val_walking, *rs2val_walking]
        
minu:
    config: 
      - check ISA:=regex(.*I.*B.*)
      - check ISA:=regex(.*I.*Zbb.*)
    mnemonics: 
      minu: 0
    rs1: 
      <<: *all_regs
    rs2: 
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb: 
      <<: *rfmt_op_comb
    val_comb:
      <<: [*base_rs1val_unsgn , *base_rs2val_unsgn , *rfmt_val_comb_unsgn]
      abstract_comb:
        'bitmanip_dataset(xlen,signed=False)': 0
        <<: [*rs1val_walking_unsgn,*rs2val_walking_unsgn]
        
orcb_64:
    config: 
      - check ISA:=regex(.*I.*B.*)
      - check ISA:=regex(.*I.*Zbb.*)
    mnemonics: 
      orc.b: 0
    base_op: gorci
    p_op_cond: imm_val == 7
    rs1: 
      <<: *all_regs
    rd: 
      <<: *all_regs
    op_comb: 
      <<: *ifmt_op_comb
    val_comb:
      'rs1_val == 0x102040801020408': 0
      'rs1_val == 0x204080102040801': 0
      'rs1_val == 0x408010204080102': 0
      'rs1_val == 0x801020408010204': 0
      abstract_comb:
        <<: [*rs1val_walking_unsgn]

        
orn:
    config: 
      - check ISA:=regex(.*I.*B.*)
      - check ISA:=regex(.*I.*Zbb.*)
      - check ISA:=regex(.*I.*Zbkb.*)
      - check ISA:=regex(.*I.*Zk.*)
      - check ISA:=regex(.*I.*Zkn.*)
      - check ISA:=regex(.*I.*Zks.*)
    mnemonics: 
      orn: 0
    rs1: 
      <<: *all_regs
    rs2: 
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb: 
      <<: *rfmt_op_comb
    val_comb:
      <<: [*base_rs1val_unsgn , *base_rs2val_unsgn , *rfmt_val_comb_unsgn]
      abstract_comb:
        'bitmanip_dataset(xlen,signed=False)': 0
        <<: [*rs1val_walking_unsgn,*rs2val_walking_unsgn]
        'uniform_random(20, 100, ["rs1_val","rs2_val"], [xlen, xlen])': 0

rev8:
    config: 
      - check ISA:=regex(.*I.*B.*)
      - check ISA:=regex(.*I.*Zbb.*)
      - check ISA:=regex(.*I.*Zbkb.*)
      - check ISA:=regex(.*I.*Zk.*)
      - check ISA:=regex(.*I.*Zkn.*)
      - check ISA:=regex(.*I.*Zks.*)
    mnemonics: 
      rev8: 0
    base_op: grevi
    p_op_cond: imm_val == 56
    rs1: 
      <<: *all_regs
    rd: 
      <<: *all_regs
    op_comb: 
      <<: *ifmt_op_comb
    val_comb:
      'rs1_val == 0x102040801020408': 0
      'rs1_val == 0x204080102040801': 0
      'rs1_val == 0x408010204080102': 0
      'rs1_val == 0x801020408010204': 0
      abstract_comb:
        'leading_ones(64, ["rs1_val"], [32])': 0
        'trailing_ones(64, ["rs1_val"], [32])': 0
        'leading_zeros(64, ["rs1_val"], [32])': 0
        'trailing_zeros(64, ["rs1_val"], [32])': 0
        'bitmanip_dataset(xlen,["rs1_val"],signed=False)': 0
        
rol:
    config: 
      - check ISA:=regex(.*I.*B.*)
      - check ISA:=regex(.*I.*Zbb.*)
      - check ISA:=regex(.*I.*Zbkb.*)
      - check ISA:=regex(.*I.*Zk.*)
      - check ISA:=regex(.*I.*Zkn.*)
      - check ISA:=regex(.*I.*Zks.*)
    mnemonics: 
      rol: 0
    rs1: 
      <<: *all_regs
    rs2: 
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb: 
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:      
        'leading_ones(64, ["rs1_val","rs2_val"],[xlen,xlen])': 0
        'trailing_ones(64, ["rs1_val","rs2_val"],[xlen,xlen])': 0
        'leading_zeros(64, ["rs1_val","rs2_val"],[xlen,xlen])': 0
        'trailing_zeros(64, ["rs1_val","rs2_val"],[xlen,xlen])': 0

rolw:
    config: 
      - check ISA:=regex(.*RV64.*I.*B.*)
      - check ISA:=regex(.*RV64.*I.*Zbb.*)
      - check ISA:=regex(.*RV64.*I.*Zbkb.*)
      - check ISA:=regex(.*RV64.*I.*Zk.*)
      - check ISA:=regex(.*RV64.*I.*Zkn.*)
      - check ISA:=regex(.*RV64.*I.*Zks.*)
    mnemonics: 
      rolw: 0
    rs1: 
      <<: *all_regs
    rs2: 
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb: 
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:      
        'leading_ones(64, ["rs1_val","rs2_val"],[xlen,xlen])': 0
        'trailing_ones(64, ["rs1_val","rs2_val"],[xlen,xlen])': 0
        'leading_zeros(64, ["rs1_val","rs2_val"],[xlen,xlen])': 0
        'trailing_zeros(64, ["rs1_val","rs2_val"],[xlen,xlen])': 0
        
ror:
    config: 
      - check ISA:=regex(.*I.*B.*)
      - check ISA:=regex(.*I.*Zbb.*)
      - check ISA:=regex(.*I.*Zbkb.*)
      - check ISA:=regex(.*I.*Zk.*)
      - check ISA:=regex(.*I.*Zkn.*)
      - check ISA:=regex(.*I.*Zks.*)
    mnemonics: 
      ror: 0
    rs1: 
      <<: *all_regs
    rs2: 
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb: 
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:      
        'leading_ones(64, ["rs1_val","rs2_val"],[xlen,xlen])': 0
        'trailing_ones(64, ["rs1_val","rs2_val"],[xlen,xlen])': 0
        'leading_zeros(64, ["rs1_val","rs2_val"],[xlen,xlen])': 0
        'trailing_zeros(64, ["rs1_val","rs2_val"],[xlen,xlen])': 0
        
rori:
    config: 
      - check ISA:=regex(.*I.*B.*)
      - check ISA:=regex(.*I.*Zbb.*)
      - check ISA:=regex(.*I.*Zbkb.*)
      - check ISA:=regex(.*I.*Zk.*)
      - check ISA:=regex(.*I.*Zkn.*)
      - check ISA:=regex(.*I.*Zks.*)
    mnemonics: 
      rori: 0
    rs1: 
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb: 
      <<: *ifmt_op_comb
    val_comb:
      abstract_comb:      
        'leading_ones(64, ["rs1_val","imm_val"],[32,5])': 0
        'trailing_ones(64, ["rs1_val","imm_val"],[32,5])': 0
        'leading_zeros(64, ["rs1_val","imm_val"],[32,5])': 0
        'trailing_zeros(64, ["rs1_val","imm_val"],[32,5])': 0

        
roriw:
    config: 
      - check ISA:=regex(.*RV64.*I.*B.*)
      - check ISA:=regex(.*RV64.*I.*Zbb.*)
      - check ISA:=regex(.*RV64.*I.*Zbkb.*)
      - check ISA:=regex(.*RV64.*I.*Zk.*)
      - check ISA:=regex(.*RV64.*I.*Zkn.*)
      - check ISA:=regex(.*RV64.*I.*Zks.*)
    mnemonics: 
      roriw: 0
    rs1: 
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb: 
      <<: *ifmt_op_comb
    val_comb:
      abstract_comb:      
        'leading_ones(64, ["rs1_val","imm_val"],[32,5])': 0
        'trailing_ones(64, ["rs1_val","imm_val"],[32,5])': 0
        'leading_zeros(64, ["rs1_val","imm_val"],[32,5])': 0
        'trailing_zeros(64, ["rs1_val","imm_val"],[32,5])': 0

rorw:
    config: 
      - check ISA:=regex(.*RV64.*I.*B.*)
      - check ISA:=regex(.*RV64.*I.*Zbb.*)
      - check ISA:=regex(.*RV64.*I.*Zbkb.*)
      - check ISA:=regex(.*RV64.*I.*Zk.*)
      - check ISA:=regex(.*RV64.*I.*Zkn.*)
      - check ISA:=regex(.*RV64.*I.*Zks.*)
    mnemonics: 
      rorw: 0
    rs1: 
      <<: *all_regs
    rs2: 
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb: 
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'leading_ones(64, ["rs1_val","rs2_val"],[xlen,xlen])': 0
        'trailing_ones(64, ["rs1_val","rs2_val"],[xlen,xlen])': 0
        'leading_zeros(64, ["rs1_val","rs2_val"],[xlen,xlen])': 0
        'trailing_zeros(64, ["rs1_val","rs2_val"],[xlen,xlen])': 0

        
sext.b:
    config: 
      - check ISA:=regex(.*I.*B.*)
      - check ISA:=regex(.*I.*Zbb.*)
    mnemonics: 
      sext.b: 0
    rs1: 
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb: 
      <<: *ifmt_op_comb
    val_comb:
      'rs1_val == 0': 0
      'rs1_val == 0x8000': 0
      abstract_comb:      
        'walking_ones("rs1_val", xlen, False)': 0
        'walking_zeros("rs1_val", xlen, False)': 0
        'uniform_random(20, 100, ["rs1_val"], [xlen])': 0

sext.h:
    config: 
      - check ISA:=regex(.*I.*B.*)
      - check ISA:=regex(.*I.*Zbb.*)
    mnemonics: 
      sext.h: 0
    rs1: 
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb: 
      <<: *ifmt_op_comb
    val_comb:
      'rs1_val == 0': 0
      'rs1_val == 0x80': 0
      'rs1_val == 0xff80': 0
      abstract_comb:      
        'walking_ones("rs1_val", xlen, False)': 0
        'walking_zeros("rs1_val", xlen, False)': 0
        'uniform_random(20, 100, ["rs1_val"], [xlen])': 0

clmul:
    config: 
      - check ISA:=regex(.*I.*Zbc.*)
      - check ISA:=regex(.*I.*Zbkc.*)
      - check ISA:=regex(.*I.*Zk.*)
      - check ISA:=regex(.*I.*Zkn.*)
      - check ISA:=regex(.*I.*Zks.*)
    mnemonics: 
      clmul: 0
    rs1: 
      <<: *all_regs
    rs2: 
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb: 
      <<: *rfmt_op_comb
    val_comb:
      'rs1_val==1 and rs2_val==1': 0
      'rs1_val==1 and rs2_val==0': 0 
      'rs1_val==1 and rs2_val==0x1000': 0
      'rs1_val==0 and rs2_val==1': 0
      'rs1_val==0 and rs2_val==0': 0 
      'rs1_val==0 and rs2_val==0x1000': 0
      abstract_comb:
        <<: [*rs1val_walking_unsgn,*rs2val_walking_unsgn]
        'uniform_random(20, 100, ["rs1_val","rs2_val"], [xlen, xlen])': 0
        
clmulh:
    config: 
      - check ISA:=regex(.*I.*Zbc.*)
      - check ISA:=regex(.*I.*Zbkc.*)
      - check ISA:=regex(.*I.*Zk.*)
      - check ISA:=regex(.*I.*Zkn.*)
      - check ISA:=regex(.*I.*Zks.*)
    mnemonics: 
      clmulh: 0
    rs1: 
      <<: *all_regs
    rs2: 
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb: 
      <<: *rfmt_op_comb
    val_comb:
      'rs1_val==1 and rs2_val==1': 0
      'rs1_val==1 and rs2_val==0': 0 
      'rs1_val==1 and rs2_val==0x1000': 0
      'rs1_val==0 and rs2_val==1': 0
      'rs1_val==0 and rs2_val==0': 0 
      'rs1_val==0 and rs2_val==0x1000': 0
      abstract_comb:
        <<: [*rs1val_walking_unsgn,*rs2val_walking_unsgn]
        'uniform_random(20, 100, ["rs1_val","rs2_val"], [xlen, xlen])': 0

        
clmulr:
    config: 
      - check ISA:=regex(.*I.*Zbc.*)
    mnemonics: 
      clmulr: 0
    rs1: 
      <<: *all_regs
    rs2: 
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb: 
      <<: *rfmt_op_comb
    val_comb:
      'rs1_val==1 and rs2_val==1': 0
      'rs1_val==1 and rs2_val==0': 0 
      'rs1_val==1 and rs2_val==0x1000': 0
      'rs1_val==0 and rs2_val==1': 0
      'rs1_val==0 and rs2_val==0': 0 
      'rs1_val==0 and rs2_val==0x1000': 0
      abstract_comb:
        <<: [*rs1val_walking_unsgn,*rs2val_walking_unsgn]
        'uniform_random(20, 100, ["rs1_val","rs2_val"], [xlen, xlen])': 0

bclr:
    config: 
      - check ISA:=regex(.*I.*B.*)
      - check ISA:=regex(.*I.*Zbs.*)
    mnemonics: 
      bclr: 0
    rs1: 
      <<: *all_regs
    rs2: 
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb: 
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
#        'xlenlim("rs1_val", xlen)': 0
#        'xlenlim("rs2_val", xlen )': 0
        'walking_ones("rs1_val", ceil(log(xlen, 2)), False)': 0
        'walking_ones("rs2_val", ceil(log(xlen, 2)), False)': 0
        'leading_ones(64, ["rs1_val", "rs2_val"], [32,5])': 0
        'trailing_ones(64, ["rs1_val", "rs2_val"], [32,5])': 0
        'leading_zeros(64, ["rs1_val", "rs2_val"], [32,5])': 0
        'trailing_zeros(64, ["rs1_val", "rs2_val"], [32,5])': 0
        <<: [*rs1val_walking_unsgn,*rs2val_walking_unsgn]

        
bclri:
    config: 
      - check ISA:=regex(.*I.*B.*)
      - check ISA:=regex(.*I.*Zbs.*)
    mnemonics: 
      bclri: 0
    rs1: 
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb: 
      <<: *ifmt_op_comb
    val_comb:
      abstract_comb:      
#        'xlenlim("rs1_val", xlen)': 0
        'leading_ones(64, ["rs1_val", "imm_val"], [32,5])': 0
        'trailing_ones(64, ["rs1_val", "imm_val"], [32,5])': 0
        'leading_zeros(64, ["rs1_val", "imm_val"], [32,5])': 0
        'trailing_zeros(64, ["rs1_val", "imm_val"], [32,5])': 0

        
bext:
    config: 
      - check ISA:=regex(.*I.*B.*)
      - check ISA:=regex(.*I.*Zbs.*)
    mnemonics: 
      bext: 0
    rs1: 
      <<: *all_regs
    rs2: 
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb: 
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
#        'xlenlim("rs1_val", xlen)': 0
#        'xlenlim("rs2_val", xlen )': 0
        'walking_ones("rs1_val", ceil(log(xlen, 2)), False)': 0
        'walking_ones("rs2_val", ceil(log(xlen, 2)), False)': 0
        'leading_ones(64, ["rs1_val", "rs2_val"], [32,5])': 0
        'trailing_ones(64, ["rs1_val", "rs2_val"], [32,5])': 0
        'leading_zeros(64, ["rs1_val", "rs2_val"], [32,5])': 0
        'trailing_zeros(64, ["rs1_val", "rs2_val"], [32,5])': 0
        <<: [*rs1val_walking_unsgn,*rs2val_walking_unsgn]

        
bexti:
    config: 
      - check ISA:=regex(.*I.*B.*)
      - check ISA:=regex(.*I.*Zbs.*)
    mnemonics: 
      bexti: 0
    rs1: 
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb: 
      <<: *ifmt_op_comb
    val_comb:
      abstract_comb:      
#        'xlenlim("rs1_val", xlen)': 0
        'leading_ones(64, ["rs1_val", "imm_val"], [32,5])': 0
        'trailing_ones(64, ["rs1_val", "imm_val"], [32,5])': 0
        'leading_zeros(64, ["rs1_val", "imm_val"], [32,5])': 0
        'trailing_zeros(64, ["rs1_val", "imm_val"], [32,5])': 0

        
binv:
    config: 
      - check ISA:=regex(.*I.*B.*)
      - check ISA:=regex(.*I.*Zbs.*)
    mnemonics: 
      binv: 0
    rs1: 
      <<: *all_regs
    rs2: 
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb: 
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
#        'xlenlim("rs1_val", xlen)': 0
#        'xlenlim("rs2_val", xlen )': 0
        'walking_ones("rs1_val", ceil(log(xlen, 2)), False)': 0
        'walking_ones("rs2_val", ceil(log(xlen, 2)), False)': 0
        'leading_ones(64, ["rs1_val", "rs2_val"], [32,5])': 0
        'trailing_ones(64, ["rs1_val", "rs2_val"], [32,5])': 0
        'leading_zeros(64, ["rs1_val", "rs2_val"], [32,5])': 0
        'trailing_zeros(64, ["rs1_val", "rs2_val"], [32,5])': 0
        <<: [*rs1val_walking_unsgn,*rs2val_walking_unsgn]

        
binvi:
    config: 
      - check ISA:=regex(.*I.*B.*)
      - check ISA:=regex(.*I.*Zbs.*)
    mnemonics: 
      binvi: 0
    rs1: 
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb: 
      <<: *ifmt_op_comb
    val_comb:
      abstract_comb:      
#        'xlenlim("rs1_val", xlen)': 0
        'leading_ones(64, ["rs1_val", "imm_val"], [32,5])': 0
        'trailing_ones(64, ["rs1_val", "imm_val"], [32,5])': 0
        'leading_zeros(64, ["rs1_val", "imm_val"], [32,5])': 0
        'trailing_zeros(64, ["rs1_val", "imm_val"], [32,5])': 0
        
bset:
    config: 
      - check ISA:=regex(.*I.*B.*)
      - check ISA:=regex(.*I.*Zbs.*)
    mnemonics: 
      bset: 0
    rs1: 
      <<: *all_regs
    rs2: 
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb: 
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
#        'xlenlim("rs1_val", xlen)': 0
#        'xlenlim("rs2_val", xlen )': 0
        'walking_ones("rs1_val", ceil(log(xlen, 2)), False)': 0
        'walking_ones("rs2_val", ceil(log(xlen, 2)), False)': 0
        'leading_ones(64, ["rs1_val", "rs2_val"], [32,5])': 0
        'trailing_ones(64, ["rs1_val", "rs2_val"], [32,5])': 0
        'leading_zeros(64, ["rs1_val", "rs2_val"], [32,5])': 0
        'trailing_zeros(64, ["rs1_val", "rs2_val"], [32,5])': 0
        <<: [*rs1val_walking_unsgn,*rs2val_walking_unsgn]


        
bseti:
    config: 
      - check ISA:=regex(.*I.*B.*)
      - check ISA:=regex(.*I.*Zbs.*)
    mnemonics: 
      bseti: 0
    rs1: 
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb: 
      <<: *ifmt_op_comb
    val_comb:
      abstract_comb:      
#        'xlenlim("rs1_val", xlen)': 0
        'leading_ones(64, ["rs1_val", "imm_val"], [32,5])': 0
        'trailing_ones(64, ["rs1_val", "imm_val"], [32,5])': 0
        'leading_zeros(64, ["rs1_val", "imm_val"], [32,5])': 0
        'trailing_zeros(64, ["rs1_val", "imm_val"], [32,5])': 0
